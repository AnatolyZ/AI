
AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c664  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000209c  0800c7f4  0800c7f4  0001c7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e890  0800e890  0001e890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e898  0800e898  0001e898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e89c  0800e89c  0001e89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800e8a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  8 .bss          0000a3fc  20000014  20000014  00020014  2**2
                  ALLOC
  9 ._user_heap_stack 00008000  2000a410  2000a410  00020014  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004fc59  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008cd2  00000000  00000000  0006fc9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000199e9  00000000  00000000  0007896f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e70  00000000  00000000  00092358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002288  00000000  00000000  000941c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001432b  00000000  00000000  00096450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000096b5  00000000  00000000  000aa77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000b3e30  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005640  00000000  00000000  000b3eac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7dc 	.word	0x0800c7dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800c7dc 	.word	0x0800c7dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b97a 	b.w	80004ec <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	9e08      	ldr	r6, [sp, #32]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d151      	bne.n	80002c4 <__udivmoddi4+0xb4>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d96d      	bls.n	8000302 <__udivmoddi4+0xf2>
 8000226:	fab2 fe82 	clz	lr, r2
 800022a:	f1be 0f00 	cmp.w	lr, #0
 800022e:	d00b      	beq.n	8000248 <__udivmoddi4+0x38>
 8000230:	f1ce 0c20 	rsb	ip, lr, #32
 8000234:	fa01 f50e 	lsl.w	r5, r1, lr
 8000238:	fa20 fc0c 	lsr.w	ip, r0, ip
 800023c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000240:	ea4c 0c05 	orr.w	ip, ip, r5
 8000244:	fa00 f40e 	lsl.w	r4, r0, lr
 8000248:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800024c:	0c25      	lsrs	r5, r4, #16
 800024e:	fbbc f8fa 	udiv	r8, ip, sl
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb0a cc18 	mls	ip, sl, r8, ip
 800025a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025e:	fb08 f309 	mul.w	r3, r8, r9
 8000262:	42ab      	cmp	r3, r5
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x6c>
 8000266:	19ed      	adds	r5, r5, r7
 8000268:	f108 32ff 	add.w	r2, r8, #4294967295
 800026c:	f080 8123 	bcs.w	80004b6 <__udivmoddi4+0x2a6>
 8000270:	42ab      	cmp	r3, r5
 8000272:	f240 8120 	bls.w	80004b6 <__udivmoddi4+0x2a6>
 8000276:	f1a8 0802 	sub.w	r8, r8, #2
 800027a:	443d      	add	r5, r7
 800027c:	1aed      	subs	r5, r5, r3
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb5 f0fa 	udiv	r0, r5, sl
 8000284:	fb0a 5510 	mls	r5, sl, r0, r5
 8000288:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800028c:	fb00 f909 	mul.w	r9, r0, r9
 8000290:	45a1      	cmp	r9, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x98>
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 810a 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 800029e:	45a1      	cmp	r9, r4
 80002a0:	f240 8107 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	eba4 0409 	sub.w	r4, r4, r9
 80002ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d061      	beq.n	800037a <__udivmoddi4+0x16a>
 80002b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ba:	2300      	movs	r3, #0
 80002bc:	6034      	str	r4, [r6, #0]
 80002be:	6073      	str	r3, [r6, #4]
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d907      	bls.n	80002d8 <__udivmoddi4+0xc8>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d054      	beq.n	8000376 <__udivmoddi4+0x166>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	f040 808e 	bne.w	80003fe <__udivmoddi4+0x1ee>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xdc>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2d0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0503 	sbc.w	r5, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	46ac      	mov	ip, r5
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d03f      	beq.n	800037a <__udivmoddi4+0x16a>
 80002fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b912      	cbnz	r2, 800030a <__udivmoddi4+0xfa>
 8000304:	2701      	movs	r7, #1
 8000306:	fbb7 f7f2 	udiv	r7, r7, r2
 800030a:	fab7 fe87 	clz	lr, r7
 800030e:	f1be 0f00 	cmp.w	lr, #0
 8000312:	d134      	bne.n	800037e <__udivmoddi4+0x16e>
 8000314:	1beb      	subs	r3, r5, r7
 8000316:	0c3a      	lsrs	r2, r7, #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb02 3318 	mls	r3, r2, r8, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb0c f308 	mul.w	r3, ip, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x134>
 8000334:	19ed      	adds	r5, r5, r7
 8000336:	f108 30ff 	add.w	r0, r8, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x132>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80d1 	bhi.w	80004e4 <__udivmoddi4+0x2d4>
 8000342:	4680      	mov	r8, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0f2 	udiv	r0, r5, r2
 800034c:	fb02 5510 	mls	r5, r2, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb0c fc00 	mul.w	ip, ip, r0
 8000358:	45a4      	cmp	ip, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x15c>
 800035c:	19e4      	adds	r4, r4, r7
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x15a>
 8000364:	45a4      	cmp	ip, r4
 8000366:	f200 80b8 	bhi.w	80004da <__udivmoddi4+0x2ca>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000374:	e79d      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000376:	4631      	mov	r1, r6
 8000378:	4630      	mov	r0, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	f1ce 0420 	rsb	r4, lr, #32
 8000382:	fa05 f30e 	lsl.w	r3, r5, lr
 8000386:	fa07 f70e 	lsl.w	r7, r7, lr
 800038a:	fa20 f804 	lsr.w	r8, r0, r4
 800038e:	0c3a      	lsrs	r2, r7, #16
 8000390:	fa25 f404 	lsr.w	r4, r5, r4
 8000394:	ea48 0803 	orr.w	r8, r8, r3
 8000398:	fbb4 f1f2 	udiv	r1, r4, r2
 800039c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a0:	fb02 4411 	mls	r4, r2, r1, r4
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ac:	fb01 f30c 	mul.w	r3, r1, ip
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1bc>
 80003b8:	19ed      	adds	r5, r5, r7
 80003ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80003be:	f080 808a 	bcs.w	80004d6 <__udivmoddi4+0x2c6>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	f240 8087 	bls.w	80004d6 <__udivmoddi4+0x2c6>
 80003c8:	3902      	subs	r1, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aeb      	subs	r3, r5, r3
 80003ce:	fa1f f588 	uxth.w	r5, r8
 80003d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d6:	fb02 3310 	mls	r3, r2, r0, r3
 80003da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003de:	fb00 f30c 	mul.w	r3, r0, ip
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1e6>
 80003e6:	19ed      	adds	r5, r5, r7
 80003e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003ec:	d26f      	bcs.n	80004ce <__udivmoddi4+0x2be>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d96d      	bls.n	80004ce <__udivmoddi4+0x2be>
 80003f2:	3802      	subs	r0, #2
 80003f4:	443d      	add	r5, r7
 80003f6:	1aeb      	subs	r3, r5, r3
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	e78f      	b.n	800031e <__udivmoddi4+0x10e>
 80003fe:	f1c1 0720 	rsb	r7, r1, #32
 8000402:	fa22 f807 	lsr.w	r8, r2, r7
 8000406:	408b      	lsls	r3, r1
 8000408:	fa05 f401 	lsl.w	r4, r5, r1
 800040c:	ea48 0303 	orr.w	r3, r8, r3
 8000410:	fa20 fe07 	lsr.w	lr, r0, r7
 8000414:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4e 0e04 	orr.w	lr, lr, r4
 800041e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000422:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000426:	fb0c 5519 	mls	r5, ip, r9, r5
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000432:	fb09 f408 	mul.w	r4, r9, r8
 8000436:	42ac      	cmp	r4, r5
 8000438:	fa02 f201 	lsl.w	r2, r2, r1
 800043c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x244>
 8000442:	18ed      	adds	r5, r5, r3
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d243      	bcs.n	80004d2 <__udivmoddi4+0x2c2>
 800044a:	42ac      	cmp	r4, r5
 800044c:	d941      	bls.n	80004d2 <__udivmoddi4+0x2c2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	441d      	add	r5, r3
 8000454:	1b2d      	subs	r5, r5, r4
 8000456:	fa1f fe8e 	uxth.w	lr, lr
 800045a:	fbb5 f0fc 	udiv	r0, r5, ip
 800045e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000462:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45a0      	cmp	r8, r4
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x26e>
 800046e:	18e4      	adds	r4, r4, r3
 8000470:	f100 35ff 	add.w	r5, r0, #4294967295
 8000474:	d229      	bcs.n	80004ca <__udivmoddi4+0x2ba>
 8000476:	45a0      	cmp	r8, r4
 8000478:	d927      	bls.n	80004ca <__udivmoddi4+0x2ba>
 800047a:	3802      	subs	r0, #2
 800047c:	441c      	add	r4, r3
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454c      	cmp	r4, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	464d      	mov	r5, r9
 8000490:	d315      	bcc.n	80004be <__udivmoddi4+0x2ae>
 8000492:	d012      	beq.n	80004ba <__udivmoddi4+0x2aa>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x29c>
 8000496:	ebba 030e 	subs.w	r3, sl, lr
 800049a:	eb64 0405 	sbc.w	r4, r4, r5
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40cb      	lsrs	r3, r1
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	6037      	str	r7, [r6, #0]
 80004aa:	6074      	str	r4, [r6, #4]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	4618      	mov	r0, r3
 80004b4:	e6f8      	b.n	80002a8 <__udivmoddi4+0x98>
 80004b6:	4690      	mov	r8, r2
 80004b8:	e6e0      	b.n	800027c <__udivmoddi4+0x6c>
 80004ba:	45c2      	cmp	sl, r8
 80004bc:	d2ea      	bcs.n	8000494 <__udivmoddi4+0x284>
 80004be:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c2:	eb69 0503 	sbc.w	r5, r9, r3
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7e4      	b.n	8000494 <__udivmoddi4+0x284>
 80004ca:	4628      	mov	r0, r5
 80004cc:	e7d7      	b.n	800047e <__udivmoddi4+0x26e>
 80004ce:	4640      	mov	r0, r8
 80004d0:	e791      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e7be      	b.n	8000454 <__udivmoddi4+0x244>
 80004d6:	4601      	mov	r1, r0
 80004d8:	e778      	b.n	80003cc <__udivmoddi4+0x1bc>
 80004da:	3802      	subs	r0, #2
 80004dc:	443c      	add	r4, r7
 80004de:	e745      	b.n	800036c <__udivmoddi4+0x15c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xe6>
 80004e4:	f1a8 0802 	sub.w	r8, r8, #2
 80004e8:	443d      	add	r5, r7
 80004ea:	e72b      	b.n	8000344 <__udivmoddi4+0x134>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x30>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000502:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800050a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f82f 	bl	8000570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f00b febe 	bl	800c294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f00b fe9a 	bl	800c250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800051c:	2000      	movs	r0, #0
 800051e:	bd08      	pop	{r3, pc}
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000524:	4a03      	ldr	r2, [pc, #12]	; (8000534 <HAL_IncTick+0x10>)
 8000526:	6811      	ldr	r1, [r2, #0]
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <HAL_IncTick+0x14>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	440b      	add	r3, r1
 800052e:	6013      	str	r3, [r2, #0]
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20003f18 	.word	0x20003f18
 8000538:	20000000 	.word	0x20000000

0800053c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800053c:	4b01      	ldr	r3, [pc, #4]	; (8000544 <HAL_GetTick+0x8>)
 800053e:	6818      	ldr	r0, [r3, #0]
}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20003f18 	.word	0x20003f18

08000548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
 800054a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800054c:	f7ff fff6 	bl	800053c <HAL_GetTick>
 8000550:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000552:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000556:	d002      	beq.n	800055e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <HAL_Delay+0x24>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800055e:	f7ff ffed 	bl	800053c <HAL_GetTick>
 8000562:	1b40      	subs	r0, r0, r5
 8000564:	4284      	cmp	r4, r0
 8000566:	d8fa      	bhi.n	800055e <HAL_Delay+0x16>
  {
  }
}
 8000568:	bd38      	pop	{r3, r4, r5, pc}
 800056a:	bf00      	nop
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000572:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000574:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000578:	041b      	lsls	r3, r3, #16
 800057a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800057c:	0200      	lsls	r0, r0, #8
 800057e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000582:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000584:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000588:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800058c:	60d0      	str	r0, [r2, #12]
 800058e:	4770      	bx	lr
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000594:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <HAL_NVIC_SetPriority+0x5c>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800059e:	f1c3 0407 	rsb	r4, r3, #7
 80005a2:	2c04      	cmp	r4, #4
 80005a4:	bf28      	it	cs
 80005a6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a8:	1d1d      	adds	r5, r3, #4
 80005aa:	2d06      	cmp	r5, #6
 80005ac:	d917      	bls.n	80005de <HAL_NVIC_SetPriority+0x4a>
 80005ae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	2501      	movs	r5, #1
 80005b2:	fa05 f404 	lsl.w	r4, r5, r4
 80005b6:	3c01      	subs	r4, #1
 80005b8:	4021      	ands	r1, r4
 80005ba:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005bc:	fa05 f303 	lsl.w	r3, r5, r3
 80005c0:	3b01      	subs	r3, #1
 80005c2:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80005c6:	2800      	cmp	r0, #0
 80005c8:	db0b      	blt.n	80005e2 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	0109      	lsls	r1, r1, #4
 80005cc:	b2c9      	uxtb	r1, r1
 80005ce:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005d2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005d6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005da:	bc30      	pop	{r4, r5}
 80005dc:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005de:	2300      	movs	r3, #0
 80005e0:	e7e6      	b.n	80005b0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	f000 000f 	and.w	r0, r0, #15
 80005e6:	0109      	lsls	r1, r1, #4
 80005e8:	b2c9      	uxtb	r1, r1
 80005ea:	4b02      	ldr	r3, [pc, #8]	; (80005f4 <HAL_NVIC_SetPriority+0x60>)
 80005ec:	5419      	strb	r1, [r3, r0]
 80005ee:	e7f4      	b.n	80005da <HAL_NVIC_SetPriority+0x46>
 80005f0:	e000ed00 	.word	0xe000ed00
 80005f4:	e000ed14 	.word	0xe000ed14

080005f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005f8:	0942      	lsrs	r2, r0, #5
 80005fa:	f000 001f 	and.w	r0, r0, #31
 80005fe:	2301      	movs	r3, #1
 8000600:	fa03 f000 	lsl.w	r0, r3, r0
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <HAL_NVIC_EnableIRQ+0x14>)
 8000606:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800060a:	4770      	bx	lr
 800060c:	e000e100 	.word	0xe000e100

08000610 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000610:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b02      	cmp	r3, #2
 8000618:	d003      	beq.n	8000622 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800061e:	2001      	movs	r0, #1
 8000620:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000622:	2305      	movs	r3, #5
 8000624:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000628:	6802      	ldr	r2, [r0, #0]
 800062a:	6813      	ldr	r3, [r2, #0]
 800062c:	f023 0301 	bic.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000632:	2000      	movs	r0, #0
}
 8000634:	4770      	bx	lr
	...

08000638 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000638:	7950      	ldrb	r0, [r2, #5]
 800063a:	7913      	ldrb	r3, [r2, #4]
 800063c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000640:	4807      	ldr	r0, [pc, #28]	; (8000660 <ETH_MACAddressConfig+0x28>)
 8000642:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000644:	78d0      	ldrb	r0, [r2, #3]
 8000646:	7893      	ldrb	r3, [r2, #2]
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800064e:	7850      	ldrb	r0, [r2, #1]
 8000650:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000658:	4a02      	ldr	r2, [pc, #8]	; (8000664 <ETH_MACAddressConfig+0x2c>)
 800065a:	508b      	str	r3, [r1, r2]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40028040 	.word	0x40028040
 8000664:	40028044 	.word	0x40028044

08000668 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000668:	6801      	ldr	r1, [r0, #0]
 800066a:	f241 0218 	movw	r2, #4120	; 0x1018
 800066e:	588b      	ldr	r3, [r1, r2]
 8000670:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000674:	508b      	str	r3, [r1, r2]
 8000676:	4770      	bx	lr

08000678 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000678:	6801      	ldr	r1, [r0, #0]
 800067a:	f241 0218 	movw	r2, #4120	; 0x1018
 800067e:	588b      	ldr	r3, [r1, r2]
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	508b      	str	r3, [r1, r2]
 8000686:	4770      	bx	lr

08000688 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8000688:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <ETH_Delay+0x24>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <ETH_Delay+0x28>)
 8000690:	fba2 2303 	umull	r2, r3, r2, r3
 8000694:	0a5b      	lsrs	r3, r3, #9
 8000696:	fb00 f003 	mul.w	r0, r0, r3
 800069a:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800069c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800069e:	9b01      	ldr	r3, [sp, #4]
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	9201      	str	r2, [sp, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1f9      	bne.n	800069c <ETH_Delay+0x14>
}
 80006a8:	b002      	add	sp, #8
 80006aa:	4770      	bx	lr
 80006ac:	20000010 	.word	0x20000010
 80006b0:	10624dd3 	.word	0x10624dd3

080006b4 <ETH_MACTransmissionEnable>:
{ 
 80006b4:	b510      	push	{r4, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80006ba:	2300      	movs	r3, #0
 80006bc:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80006be:	6802      	ldr	r2, [r0, #0]
 80006c0:	6813      	ldr	r3, [r2, #0]
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80006c8:	6803      	ldr	r3, [r0, #0]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff ffda 	bl	8000688 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80006d4:	6823      	ldr	r3, [r4, #0]
 80006d6:	9a01      	ldr	r2, [sp, #4]
 80006d8:	601a      	str	r2, [r3, #0]
}
 80006da:	b002      	add	sp, #8
 80006dc:	bd10      	pop	{r4, pc}

080006de <ETH_MACReceptionEnable>:
{ 
 80006de:	b510      	push	{r4, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80006e4:	2300      	movs	r3, #0
 80006e6:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80006e8:	6802      	ldr	r2, [r0, #0]
 80006ea:	6813      	ldr	r3, [r2, #0]
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80006f2:	6803      	ldr	r3, [r0, #0]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f7ff ffc5 	bl	8000688 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80006fe:	6823      	ldr	r3, [r4, #0]
 8000700:	9a01      	ldr	r2, [sp, #4]
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	b002      	add	sp, #8
 8000706:	bd10      	pop	{r4, pc}

08000708 <ETH_FlushTransmitFIFO>:
{
 8000708:	b530      	push	{r4, r5, lr}
 800070a:	b083      	sub	sp, #12
 800070c:	4605      	mov	r5, r0
  __IO uint32_t tmpreg1 = 0U;
 800070e:	2300      	movs	r3, #0
 8000710:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000712:	6802      	ldr	r2, [r0, #0]
 8000714:	f241 0418 	movw	r4, #4120	; 0x1018
 8000718:	5913      	ldr	r3, [r2, r4]
 800071a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800071e:	5113      	str	r3, [r2, r4]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000720:	6803      	ldr	r3, [r0, #0]
 8000722:	591b      	ldr	r3, [r3, r4]
 8000724:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff ffae 	bl	8000688 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800072c:	682b      	ldr	r3, [r5, #0]
 800072e:	9a01      	ldr	r2, [sp, #4]
 8000730:	511a      	str	r2, [r3, r4]
}
 8000732:	b003      	add	sp, #12
 8000734:	bd30      	pop	{r4, r5, pc}
	...

08000738 <ETH_MACDMAConfig>:
{
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	b09e      	sub	sp, #120	; 0x78
 800073c:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800073e:	b129      	cbz	r1, 800074c <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000744:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000746:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800074a:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800074c:	69e3      	ldr	r3, [r4, #28]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d16a      	bne.n	8000828 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000758:	6821      	ldr	r1, [r4, #0]
 800075a:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800075c:	4a39      	ldr	r2, [pc, #228]	; (8000844 <ETH_MACDMAConfig+0x10c>)
 800075e:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8000760:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8000762:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8000764:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000766:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8000768:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 800076a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800076e:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000770:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000772:	6823      	ldr	r3, [r4, #0]
 8000774:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff fee6 	bl	8000548 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000780:	6823      	ldr	r3, [r4, #0]
 8000782:	2240      	movs	r2, #64	; 0x40
 8000784:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8000786:	6823      	ldr	r3, [r4, #0]
 8000788:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff fedc 	bl	8000548 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8000790:	6823      	ldr	r3, [r4, #0]
 8000792:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	2500      	movs	r5, #0
 8000798:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800079a:	6823      	ldr	r3, [r4, #0]
 800079c:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 800079e:	6822      	ldr	r2, [r4, #0]
 80007a0:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80007a2:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 80007a6:	041b      	lsls	r3, r3, #16
 80007a8:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80007aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80007ae:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 80007b0:	6823      	ldr	r3, [r4, #0]
 80007b2:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff fec7 	bl	8000548 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff febe 	bl	8000548 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007d0:	6822      	ldr	r2, [r4, #0]
 80007d2:	f241 0518 	movw	r5, #4120	; 0x1018
 80007d6:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <ETH_MACDMAConfig+0x110>)
 80007da:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007dc:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007e0:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80007e4:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff feac 	bl	8000548 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007fa:	4a14      	ldr	r2, [pc, #80]	; (800084c <ETH_MACDMAConfig+0x114>)
 80007fc:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000804:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000806:	2001      	movs	r0, #1
 8000808:	f7ff fe9e 	bl	8000548 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000812:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000814:	69a3      	ldr	r3, [r4, #24]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d009      	beq.n	800082e <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800081a:	6962      	ldr	r2, [r4, #20]
 800081c:	2100      	movs	r1, #0
 800081e:	4620      	mov	r0, r4
 8000820:	f7ff ff0a 	bl	8000638 <ETH_MACAddressConfig>
}
 8000824:	b01e      	add	sp, #120	; 0x78
 8000826:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	9307      	str	r3, [sp, #28]
 800082c:	e794      	b.n	8000758 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800082e:	6821      	ldr	r1, [r4, #0]
 8000830:	f241 021c 	movw	r2, #4124	; 0x101c
 8000834:	588b      	ldr	r3, [r1, r2]
 8000836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800083a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083e:	508b      	str	r3, [r1, r2]
 8000840:	e7eb      	b.n	800081a <ETH_MACDMAConfig+0xe2>
 8000842:	bf00      	nop
 8000844:	ff20810f 	.word	0xff20810f
 8000848:	f8de3f23 	.word	0xf8de3f23
 800084c:	02c12080 	.word	0x02c12080

08000850 <HAL_ETH_DMATxDescListInit>:
{
 8000850:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8000852:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000856:	2c01      	cmp	r4, #1
 8000858:	d031      	beq.n	80008be <HAL_ETH_DMATxDescListInit+0x6e>
 800085a:	2401      	movs	r4, #1
 800085c:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000860:	2402      	movs	r4, #2
 8000862:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000866:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8000868:	2400      	movs	r4, #0
 800086a:	e001      	b.n	8000870 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800086c:	60f9      	str	r1, [r7, #12]
  for(i=0U; i < TxBuffCount; i++)
 800086e:	3401      	adds	r4, #1
 8000870:	429c      	cmp	r4, r3
 8000872:	d217      	bcs.n	80008a4 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8000874:	0165      	lsls	r5, r4, #5
 8000876:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000878:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 800087c:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800087e:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8000882:	fb06 2604 	mla	r6, r6, r4, r2
 8000886:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000888:	69c6      	ldr	r6, [r0, #28]
 800088a:	b91e      	cbnz	r6, 8000894 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800088c:	594e      	ldr	r6, [r1, r5]
 800088e:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8000892:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1U))
 8000894:	1e5d      	subs	r5, r3, #1
 8000896:	42ac      	cmp	r4, r5
 8000898:	d2e8      	bcs.n	800086c <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800089a:	1c65      	adds	r5, r4, #1
 800089c:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80008a0:	60fd      	str	r5, [r7, #12]
 80008a2:	e7e4      	b.n	800086e <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80008a4:	6802      	ldr	r2, [r0, #0]
 80008a6:	f241 0310 	movw	r3, #4112	; 0x1010
 80008aa:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008ac:	2301      	movs	r3, #1
 80008ae:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008b2:	2300      	movs	r3, #0
 80008b4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008b8:	4618      	mov	r0, r3
}
 80008ba:	bcf0      	pop	{r4, r5, r6, r7}
 80008bc:	4770      	bx	lr
  __HAL_LOCK(heth);
 80008be:	2002      	movs	r0, #2
 80008c0:	e7fb      	b.n	80008ba <HAL_ETH_DMATxDescListInit+0x6a>

080008c2 <HAL_ETH_DMARxDescListInit>:
{
 80008c2:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 80008c4:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008c8:	2c01      	cmp	r4, #1
 80008ca:	d02e      	beq.n	800092a <HAL_ETH_DMARxDescListInit+0x68>
 80008cc:	2401      	movs	r4, #1
 80008ce:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80008d2:	2402      	movs	r4, #2
 80008d4:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80008d8:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 80008da:	2400      	movs	r4, #0
 80008dc:	e001      	b.n	80008e2 <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80008de:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 80008e0:	3401      	adds	r4, #1
 80008e2:	429c      	cmp	r4, r3
 80008e4:	d214      	bcs.n	8000910 <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 80008e6:	0166      	lsls	r6, r4, #5
 80008e8:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008ea:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80008ee:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008f0:	f244 56f4 	movw	r6, #17908	; 0x45f4
 80008f4:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008f6:	f240 56f4 	movw	r6, #1524	; 0x5f4
 80008fa:	fb06 2604 	mla	r6, r6, r4, r2
 80008fe:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 8000900:	1e5e      	subs	r6, r3, #1
 8000902:	42b4      	cmp	r4, r6
 8000904:	d2eb      	bcs.n	80008de <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000906:	1c66      	adds	r6, r4, #1
 8000908:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 800090c:	60ee      	str	r6, [r5, #12]
 800090e:	e7e7      	b.n	80008e0 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000910:	6802      	ldr	r2, [r0, #0]
 8000912:	f241 030c 	movw	r3, #4108	; 0x100c
 8000916:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000918:	2301      	movs	r3, #1
 800091a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800091e:	2300      	movs	r3, #0
 8000920:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000924:	4618      	mov	r0, r3
}
 8000926:	bcf0      	pop	{r4, r5, r6, r7}
 8000928:	4770      	bx	lr
  __HAL_LOCK(heth);
 800092a:	2002      	movs	r0, #2
 800092c:	e7fb      	b.n	8000926 <HAL_ETH_DMARxDescListInit+0x64>
	...

08000930 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000930:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000934:	2b01      	cmp	r3, #1
 8000936:	f000 8087 	beq.w	8000a48 <HAL_ETH_TransmitFrame+0x118>
 800093a:	2301      	movs	r3, #1
 800093c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000940:	2302      	movs	r3, #2
 8000942:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8000946:	b199      	cbz	r1, 8000970 <HAL_ETH_TransmitFrame+0x40>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000948:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2a00      	cmp	r2, #0
 800094e:	db17      	blt.n	8000980 <HAL_ETH_TransmitFrame+0x50>
{
 8000950:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000952:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000956:	4291      	cmp	r1, r2
 8000958:	d91a      	bls.n	8000990 <HAL_ETH_TransmitFrame+0x60>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800095a:	4c3c      	ldr	r4, [pc, #240]	; (8000a4c <HAL_ETH_TransmitFrame+0x11c>)
 800095c:	fba4 2401 	umull	r2, r4, r4, r1
 8000960:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000962:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000966:	fb02 1214 	mls	r2, r2, r4, r1
 800096a:	b192      	cbz	r2, 8000992 <HAL_ETH_TransmitFrame+0x62>
      bufcount++;
 800096c:	3401      	adds	r4, #1
 800096e:	e010      	b.n	8000992 <HAL_ETH_TransmitFrame+0x62>
    heth->State = HAL_ETH_STATE_READY;
 8000970:	2301      	movs	r3, #1
 8000972:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000976:	2200      	movs	r2, #0
 8000978:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 800097c:	4618      	mov	r0, r3
 800097e:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000980:	2312      	movs	r3, #18
 8000982:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000986:	2300      	movs	r3, #0
 8000988:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 800098c:	2001      	movs	r0, #1
 800098e:	4770      	bx	lr
    bufcount = 1U;
 8000990:	2401      	movs	r4, #1
  if (bufcount == 1U)
 8000992:	2c01      	cmp	r4, #1
 8000994:	d001      	beq.n	800099a <HAL_ETH_TransmitFrame+0x6a>
 8000996:	2300      	movs	r3, #0
 8000998:	e037      	b.n	8000a0a <HAL_ETH_TransmitFrame+0xda>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80009a0:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009a4:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80009a8:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009aa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80009ac:	6813      	ldr	r3, [r2, #0]
 80009ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009b2:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80009ba:	6803      	ldr	r3, [r0, #0]
 80009bc:	f241 0214 	movw	r2, #4116	; 0x1014
 80009c0:	589a      	ldr	r2, [r3, r2]
 80009c2:	f012 0f04 	tst.w	r2, #4
 80009c6:	d008      	beq.n	80009da <HAL_ETH_TransmitFrame+0xaa>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80009c8:	2104      	movs	r1, #4
 80009ca:	f241 0214 	movw	r2, #4116	; 0x1014
 80009ce:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80009d0:	6802      	ldr	r2, [r0, #0]
 80009d2:	2100      	movs	r1, #0
 80009d4:	f241 0304 	movw	r3, #4100	; 0x1004
 80009d8:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 80009da:	2301      	movs	r3, #1
 80009dc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009e0:	2300      	movs	r3, #0
 80009e2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80009e6:	4618      	mov	r0, r3
}
 80009e8:	bc30      	pop	{r4, r5}
 80009ea:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80009ec:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80009ee:	682a      	ldr	r2, [r5, #0]
 80009f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009f4:	602a      	str	r2, [r5, #0]
 80009f6:	e011      	b.n	8000a1c <HAL_ETH_TransmitFrame+0xec>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009f8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80009fa:	682a      	ldr	r2, [r5, #0]
 80009fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a00:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a02:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a04:	68d2      	ldr	r2, [r2, #12]
 8000a06:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000a08:	3301      	adds	r3, #1
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	d9d5      	bls.n	80009ba <HAL_ETH_TransmitFrame+0x8a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000a0e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a10:	682a      	ldr	r2, [r5, #0]
 8000a12:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a16:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0e7      	beq.n	80009ec <HAL_ETH_TransmitFrame+0xbc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a1c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a1e:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8000a22:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 8000a24:	1e62      	subs	r2, r4, #1
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d1e6      	bne.n	80009f8 <HAL_ETH_TransmitFrame+0xc8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a2a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a2c:	682a      	ldr	r2, [r5, #0]
 8000a2e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a32:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <HAL_ETH_TransmitFrame+0x120>)
 8000a36:	fb02 1204 	mla	r2, r2, r4, r1
 8000a3a:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a3e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a40:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000a44:	606a      	str	r2, [r5, #4]
 8000a46:	e7d7      	b.n	80009f8 <HAL_ETH_TransmitFrame+0xc8>
  __HAL_LOCK(heth);
 8000a48:	2002      	movs	r0, #2
 8000a4a:	4770      	bx	lr
 8000a4c:	ac02b00b 	.word	0xac02b00b
 8000a50:	fffffa0c 	.word	0xfffffa0c

08000a54 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000a54:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d045      	beq.n	8000ae8 <HAL_ETH_GetReceivedFrame_IT+0x94>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a62:	2302      	movs	r3, #2
 8000a64:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  uint32_t descriptorscancounter = 0U;
 8000a68:	2100      	movs	r1, #0
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a6a:	e00a      	b.n	8000a82 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a6c:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000a6e:	2201      	movs	r2, #1
 8000a70:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	6283      	str	r3, [r0, #40]	; 0x28
 8000a76:	e004      	b.n	8000a82 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      (heth->RxFrameInfos.SegCount)++;
 8000a78:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a7a:	3201      	adds	r2, #1
 8000a7c:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a82:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	2a00      	cmp	r2, #0
 8000a88:	db26      	blt.n	8000ad8 <HAL_ETH_GetReceivedFrame_IT+0x84>
 8000a8a:	2903      	cmp	r1, #3
 8000a8c:	d824      	bhi.n	8000ad8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    descriptorscancounter++;
 8000a8e:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a96:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a9a:	d0e7      	beq.n	8000a6c <HAL_ETH_GetReceivedFrame_IT+0x18>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000aa2:	d0e9      	beq.n	8000a78 <HAL_ETH_GetReceivedFrame_IT+0x24>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000aa4:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8000aa6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000aa8:	3201      	adds	r2, #1
 8000aaa:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000aac:	2a01      	cmp	r2, #1
 8000aae:	d011      	beq.n	8000ad4 <HAL_ETH_GetReceivedFrame_IT+0x80>
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8000ab6:	3a04      	subs	r2, #4
 8000ab8:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000aba:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000abc:	6892      	ldr	r2, [r2, #8]
 8000abe:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000aca:	2300      	movs	r3, #0
 8000acc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	4770      	bx	lr
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000ad4:	6303      	str	r3, [r0, #48]	; 0x30
 8000ad6:	e7eb      	b.n	8000ab0 <HAL_ETH_GetReceivedFrame_IT+0x5c>
  heth->State = HAL_ETH_STATE_READY;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000ae8:	2002      	movs	r0, #2
}
 8000aea:	4770      	bx	lr

08000aec <HAL_ETH_TxCpltCallback>:
{
 8000aec:	4770      	bx	lr

08000aee <HAL_ETH_ErrorCallback>:
{
 8000aee:	4770      	bx	lr

08000af0 <HAL_ETH_IRQHandler>:
{
 8000af0:	b510      	push	{r4, lr}
 8000af2:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000af4:	6803      	ldr	r3, [r0, #0]
 8000af6:	f241 0214 	movw	r2, #4116	; 0x1014
 8000afa:	589a      	ldr	r2, [r3, r2]
 8000afc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000b00:	d111      	bne.n	8000b26 <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000b02:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b06:	589b      	ldr	r3, [r3, r2]
 8000b08:	f013 0f01 	tst.w	r3, #1
 8000b0c:	d119      	bne.n	8000b42 <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000b0e:	6822      	ldr	r2, [r4, #0]
 8000b10:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b14:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000b18:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000b1a:	6822      	ldr	r2, [r4, #0]
 8000b1c:	58d3      	ldr	r3, [r2, r3]
 8000b1e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000b22:	d11b      	bne.n	8000b5c <HAL_ETH_IRQHandler+0x6c>
 8000b24:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8000b26:	f00b f97f 	bl	800be28 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000b2a:	6822      	ldr	r2, [r4, #0]
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b32:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000b34:	2301      	movs	r3, #1
 8000b36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b40:	e7e5      	b.n	8000b0e <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8000b42:	f7ff ffd3 	bl	8000aec <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000b46:	6821      	ldr	r1, [r4, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b4e:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8000b50:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b54:	2300      	movs	r3, #0
 8000b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b5a:	e7d8      	b.n	8000b0e <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f7ff ffc6 	bl	8000aee <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000b62:	6822      	ldr	r2, [r4, #0]
 8000b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b68:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b6c:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b74:	2300      	movs	r3, #0
 8000b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000b7a:	e7d3      	b.n	8000b24 <HAL_ETH_IRQHandler+0x34>

08000b7c <HAL_ETH_ReadPHYRegister>:
{
 8000b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b7e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b82      	cmp	r3, #130	; 0x82
 8000b86:	d101      	bne.n	8000b8c <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8000b88:	2002      	movs	r0, #2
}
 8000b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b8c:	4616      	mov	r6, r2
 8000b8e:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b90:	2382      	movs	r3, #130	; 0x82
 8000b92:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b96:	6802      	ldr	r2, [r0, #0]
 8000b98:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b9a:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b9e:	8a03      	ldrh	r3, [r0, #16]
 8000ba0:	02db      	lsls	r3, r3, #11
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000ba6:	0189      	lsls	r1, r1, #6
 8000ba8:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000bac:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000bae:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000bb2:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000bb4:	f7ff fcc2 	bl	800053c <HAL_GetTick>
 8000bb8:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bba:	f014 0f01 	tst.w	r4, #1
 8000bbe:	d010      	beq.n	8000be2 <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000bc0:	f7ff fcbc 	bl	800053c <HAL_GetTick>
 8000bc4:	1bc0      	subs	r0, r0, r7
 8000bc6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bca:	d202      	bcs.n	8000bd2 <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000bcc:	682b      	ldr	r3, [r5, #0]
 8000bce:	691c      	ldr	r4, [r3, #16]
 8000bd0:	e7f3      	b.n	8000bba <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000bde:	2003      	movs	r0, #3
 8000be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000be2:	682b      	ldr	r3, [r5, #0]
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000bf4 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000bf4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b42      	cmp	r3, #66	; 0x42
 8000bfc:	d101      	bne.n	8000c02 <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8000bfe:	2002      	movs	r0, #2
 8000c00:	4770      	bx	lr
{
 8000c02:	b570      	push	{r4, r5, r6, lr}
 8000c04:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c06:	2342      	movs	r3, #66	; 0x42
 8000c08:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000c0c:	6800      	ldr	r0, [r0, #0]
 8000c0e:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000c10:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c14:	8a2b      	ldrh	r3, [r5, #16]
 8000c16:	02db      	lsls	r3, r3, #11
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000c1c:	0189      	lsls	r1, r1, #6
 8000c1e:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000c22:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000c24:	f044 0403 	orr.w	r4, r4, #3
 8000c28:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000c2a:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000c2c:	682b      	ldr	r3, [r5, #0]
 8000c2e:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000c30:	f7ff fc84 	bl	800053c <HAL_GetTick>
 8000c34:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c36:	f014 0f01 	tst.w	r4, #1
 8000c3a:	d010      	beq.n	8000c5e <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000c3c:	f7ff fc7e 	bl	800053c <HAL_GetTick>
 8000c40:	1b80      	subs	r0, r0, r6
 8000c42:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c46:	d202      	bcs.n	8000c4e <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	691c      	ldr	r4, [r3, #16]
 8000c4c:	e7f3      	b.n	8000c36 <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c54:	2300      	movs	r3, #0
 8000c56:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8000c64:	2000      	movs	r0, #0
 8000c66:	bd70      	pop	{r4, r5, r6, pc}

08000c68 <HAL_ETH_Init>:
{
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8000c70:	2800      	cmp	r0, #0
 8000c72:	f000 810e 	beq.w	8000e92 <HAL_ETH_Init+0x22a>
 8000c76:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c78:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d034      	beq.n	8000cea <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4b84      	ldr	r3, [pc, #528]	; (8000e98 <HAL_ETH_Init+0x230>)
 8000c86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c8c:	645a      	str	r2, [r3, #68]	; 0x44
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c98:	4b80      	ldr	r3, [pc, #512]	; (8000e9c <HAL_ETH_Init+0x234>)
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000ca0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	6a21      	ldr	r1, [r4, #32]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	f042 0201 	orr.w	r2, r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000cb8:	f7ff fc40 	bl	800053c <HAL_GetTick>
 8000cbc:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000cc4:	6812      	ldr	r2, [r2, #0]
 8000cc6:	f012 0f01 	tst.w	r2, #1
 8000cca:	d013      	beq.n	8000cf4 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000ccc:	f7ff fc36 	bl	800053c <HAL_GetTick>
 8000cd0:	1b40      	subs	r0, r0, r5
 8000cd2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cd6:	d9f2      	bls.n	8000cbe <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cd8:	2503      	movs	r5, #3
 8000cda:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8000cea:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000cee:	f00b f83f 	bl	800bd70 <HAL_ETH_MspInit>
 8000cf2:	e7c5      	b.n	8000c80 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000cf4:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000cf6:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8000cfa:	f000 fcbd 	bl	8001678 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000cfe:	4b68      	ldr	r3, [pc, #416]	; (8000ea0 <HAL_ETH_Init+0x238>)
 8000d00:	4403      	add	r3, r0
 8000d02:	4a68      	ldr	r2, [pc, #416]	; (8000ea4 <HAL_ETH_Init+0x23c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d855      	bhi.n	8000db4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000d08:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000d10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d14:	2100      	movs	r1, #0
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff ff6c 	bl	8000bf4 <HAL_ETH_WritePHYRegister>
 8000d1c:	4605      	mov	r5, r0
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d160      	bne.n	8000de4 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8000d22:	20ff      	movs	r0, #255	; 0xff
 8000d24:	f7ff fc10 	bl	8000548 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000d28:	6863      	ldr	r3, [r4, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 8091 	beq.w	8000e52 <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8000d30:	f7ff fc04 	bl	800053c <HAL_GetTick>
 8000d34:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d36:	aa01      	add	r2, sp, #4
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f7ff ff1e 	bl	8000b7c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d40:	f7ff fbfc 	bl	800053c <HAL_GetTick>
 8000d44:	1b80      	subs	r0, r0, r6
 8000d46:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d4a:	4298      	cmp	r0, r3
 8000d4c:	d852      	bhi.n	8000df4 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d4e:	9b01      	ldr	r3, [sp, #4]
 8000d50:	f013 0f04 	tst.w	r3, #4
 8000d54:	d0ef      	beq.n	8000d36 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f7ff ff49 	bl	8000bf4 <HAL_ETH_WritePHYRegister>
 8000d62:	2800      	cmp	r0, #0
 8000d64:	d152      	bne.n	8000e0c <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8000d66:	f7ff fbe9 	bl	800053c <HAL_GetTick>
 8000d6a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d6c:	aa01      	add	r2, sp, #4
 8000d6e:	2101      	movs	r1, #1
 8000d70:	4620      	mov	r0, r4
 8000d72:	f7ff ff03 	bl	8000b7c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d76:	f7ff fbe1 	bl	800053c <HAL_GetTick>
 8000d7a:	1b80      	subs	r0, r0, r6
 8000d7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d80:	4298      	cmp	r0, r3
 8000d82:	d84b      	bhi.n	8000e1c <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d84:	9b01      	ldr	r3, [sp, #4]
 8000d86:	f013 0f20 	tst.w	r3, #32
 8000d8a:	d0ef      	beq.n	8000d6c <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d8c:	aa01      	add	r2, sp, #4
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4620      	mov	r0, r4
 8000d92:	f7ff fef3 	bl	8000b7c <HAL_ETH_ReadPHYRegister>
 8000d96:	2800      	cmp	r0, #0
 8000d98:	d14c      	bne.n	8000e34 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d9a:	9b01      	ldr	r3, [sp, #4]
 8000d9c:	f013 0f04 	tst.w	r3, #4
 8000da0:	d050      	beq.n	8000e44 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da6:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000da8:	f013 0f02 	tst.w	r3, #2
 8000dac:	d04d      	beq.n	8000e4a <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000dae:	2300      	movs	r3, #0
 8000db0:	60a3      	str	r3, [r4, #8]
 8000db2:	e05e      	b.n	8000e72 <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000db4:	4b3c      	ldr	r3, [pc, #240]	; (8000ea8 <HAL_ETH_Init+0x240>)
 8000db6:	4403      	add	r3, r0
 8000db8:	4a3c      	ldr	r2, [pc, #240]	; (8000eac <HAL_ETH_Init+0x244>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d802      	bhi.n	8000dc4 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000dbe:	f045 050c 	orr.w	r5, r5, #12
 8000dc2:	e7a3      	b.n	8000d0c <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000dc4:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <HAL_ETH_Init+0x248>)
 8000dc6:	4403      	add	r3, r0
 8000dc8:	4a3a      	ldr	r2, [pc, #232]	; (8000eb4 <HAL_ETH_Init+0x24c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d99e      	bls.n	8000d0c <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000dce:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <HAL_ETH_Init+0x250>)
 8000dd0:	4403      	add	r3, r0
 8000dd2:	4a3a      	ldr	r2, [pc, #232]	; (8000ebc <HAL_ETH_Init+0x254>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d802      	bhi.n	8000dde <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000dd8:	f045 0504 	orr.w	r5, r5, #4
 8000ddc:	e796      	b.n	8000d0c <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000dde:	f045 0510 	orr.w	r5, r5, #16
 8000de2:	e793      	b.n	8000d0c <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 8000de4:	2101      	movs	r1, #1
 8000de6:	4620      	mov	r0, r4
 8000de8:	f7ff fca6 	bl	8000738 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8000dec:	2501      	movs	r5, #1
 8000dee:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000df2:	e777      	b.n	8000ce4 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000df4:	2101      	movs	r1, #1
 8000df6:	4620      	mov	r0, r4
 8000df8:	f7ff fc9e 	bl	8000738 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000e02:	2300      	movs	r3, #0
 8000e04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000e08:	2503      	movs	r5, #3
 8000e0a:	e76b      	b.n	8000ce4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4620      	mov	r0, r4
 8000e10:	f7ff fc92 	bl	8000738 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e14:	2501      	movs	r5, #1
 8000e16:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000e1a:	e763      	b.n	8000ce4 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f7ff fc8a 	bl	8000738 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000e24:	2301      	movs	r3, #1
 8000e26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000e30:	2503      	movs	r5, #3
 8000e32:	e757      	b.n	8000ce4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e34:	2101      	movs	r1, #1
 8000e36:	4620      	mov	r0, r4
 8000e38:	f7ff fc7e 	bl	8000738 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e3c:	2501      	movs	r5, #1
 8000e3e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000e42:	e74f      	b.n	8000ce4 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000e44:	2200      	movs	r2, #0
 8000e46:	60e2      	str	r2, [r4, #12]
 8000e48:	e7ae      	b.n	8000da8 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8000e4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e4e:	60a3      	str	r3, [r4, #8]
 8000e50:	e00f      	b.n	8000e72 <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e52:	68e3      	ldr	r3, [r4, #12]
 8000e54:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000e58:	68a3      	ldr	r3, [r4, #8]
 8000e5a:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff fec6 	bl	8000bf4 <HAL_ETH_WritePHYRegister>
 8000e68:	b958      	cbnz	r0, 8000e82 <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000e6a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e6e:	f7ff fb6b 	bl	8000548 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000e72:	2100      	movs	r1, #0
 8000e74:	4620      	mov	r0, r4
 8000e76:	f7ff fc5f 	bl	8000738 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000e80:	e730      	b.n	8000ce4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e82:	2101      	movs	r1, #1
 8000e84:	4620      	mov	r0, r4
 8000e86:	f7ff fc57 	bl	8000738 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e8a:	2501      	movs	r5, #1
 8000e8c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000e90:	e728      	b.n	8000ce4 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 8000e92:	2501      	movs	r5, #1
 8000e94:	e726      	b.n	8000ce4 <HAL_ETH_Init+0x7c>
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40013800 	.word	0x40013800
 8000ea0:	feced300 	.word	0xfeced300
 8000ea4:	00e4e1bf 	.word	0x00e4e1bf
 8000ea8:	fde9f140 	.word	0xfde9f140
 8000eac:	017d783f 	.word	0x017d783f
 8000eb0:	fc6c7900 	.word	0xfc6c7900
 8000eb4:	026259ff 	.word	0x026259ff
 8000eb8:	fa0a1f00 	.word	0xfa0a1f00
 8000ebc:	02faf07f 	.word	0x02faf07f

08000ec0 <HAL_ETH_Start>:
{  
 8000ec0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8000ec2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d101      	bne.n	8000ece <HAL_ETH_Start+0xe>
 8000eca:	2002      	movs	r0, #2
}
 8000ecc:	bd38      	pop	{r3, r4, r5, pc}
 8000ece:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8000ed0:	2501      	movs	r5, #1
 8000ed2:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8000edc:	f7ff fbea 	bl	80006b4 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f7ff fbfc 	bl	80006de <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f7ff fc0e 	bl	8000708 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8000eec:	4620      	mov	r0, r4
 8000eee:	f7ff fbbb 	bl	8000668 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f7ff fbc0 	bl	8000678 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8000ef8:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 8000f02:	bd38      	pop	{r3, r4, r5, pc}

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f06:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f08:	2400      	movs	r4, #0
 8000f0a:	e04b      	b.n	8000fa4 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f0c:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000f10:	f10e 0e08 	add.w	lr, lr, #8
 8000f14:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f18:	f004 0607 	and.w	r6, r4, #7
 8000f1c:	00b6      	lsls	r6, r6, #2
 8000f1e:	270f      	movs	r7, #15
 8000f20:	40b7      	lsls	r7, r6
 8000f22:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f26:	690f      	ldr	r7, [r1, #16]
 8000f28:	fa07 f606 	lsl.w	r6, r7, r6
 8000f2c:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000f2e:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000f32:	e046      	b.n	8000fc2 <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f34:	2607      	movs	r6, #7
 8000f36:	e000      	b.n	8000f3a <HAL_GPIO_Init+0x36>
 8000f38:	2600      	movs	r6, #0
 8000f3a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f3e:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f40:	3302      	adds	r3, #2
 8000f42:	4e5e      	ldr	r6, [pc, #376]	; (80010bc <HAL_GPIO_Init+0x1b8>)
 8000f44:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f48:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <HAL_GPIO_Init+0x1bc>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	43eb      	mvns	r3, r5
 8000f4e:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f52:	684f      	ldr	r7, [r1, #4]
 8000f54:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000f58:	d001      	beq.n	8000f5e <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8000f5a:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000f5e:	4a58      	ldr	r2, [pc, #352]	; (80010c0 <HAL_GPIO_Init+0x1bc>)
 8000f60:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000f62:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f68:	684f      	ldr	r7, [r1, #4]
 8000f6a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000f6e:	d001      	beq.n	8000f74 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8000f70:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000f74:	4a52      	ldr	r2, [pc, #328]	; (80010c0 <HAL_GPIO_Init+0x1bc>)
 8000f76:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f78:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7e:	684f      	ldr	r7, [r1, #4]
 8000f80:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000f84:	d001      	beq.n	8000f8a <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8000f86:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000f8a:	4a4d      	ldr	r2, [pc, #308]	; (80010c0 <HAL_GPIO_Init+0x1bc>)
 8000f8c:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000f8e:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f92:	684e      	ldr	r6, [r1, #4]
 8000f94:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000f98:	d001      	beq.n	8000f9e <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8000f9a:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000f9e:	4a48      	ldr	r2, [pc, #288]	; (80010c0 <HAL_GPIO_Init+0x1bc>)
 8000fa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	3401      	adds	r4, #1
 8000fa4:	2c0f      	cmp	r4, #15
 8000fa6:	f200 8086 	bhi.w	80010b6 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000faa:	2301      	movs	r3, #1
 8000fac:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	680a      	ldr	r2, [r1, #0]
 8000fb0:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000fb4:	42ab      	cmp	r3, r5
 8000fb6:	d1f4      	bne.n	8000fa2 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb8:	684a      	ldr	r2, [r1, #4]
 8000fba:	2a02      	cmp	r2, #2
 8000fbc:	d0a6      	beq.n	8000f0c <HAL_GPIO_Init+0x8>
 8000fbe:	2a12      	cmp	r2, #18
 8000fc0:	d0a4      	beq.n	8000f0c <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000fc2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc4:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fce:	43d2      	mvns	r2, r2
 8000fd0:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd2:	684f      	ldr	r7, [r1, #4]
 8000fd4:	f007 0703 	and.w	r7, r7, #3
 8000fd8:	fa07 f70e 	lsl.w	r7, r7, lr
 8000fdc:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000fde:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe0:	684e      	ldr	r6, [r1, #4]
 8000fe2:	1e77      	subs	r7, r6, #1
 8000fe4:	2f01      	cmp	r7, #1
 8000fe6:	d903      	bls.n	8000ff0 <HAL_GPIO_Init+0xec>
 8000fe8:	2e11      	cmp	r6, #17
 8000fea:	d001      	beq.n	8000ff0 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fec:	2e12      	cmp	r6, #18
 8000fee:	d10f      	bne.n	8001010 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8000ff0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff2:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff4:	68cf      	ldr	r7, [r1, #12]
 8000ff6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ffa:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000ffc:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ffe:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001000:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001004:	684e      	ldr	r6, [r1, #4]
 8001006:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800100a:	40a6      	lsls	r6, r4
 800100c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800100e:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001010:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001012:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001014:	688b      	ldr	r3, [r1, #8]
 8001016:	fa03 f30e 	lsl.w	r3, r3, lr
 800101a:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 800101c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101e:	684b      	ldr	r3, [r1, #4]
 8001020:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001024:	d0bd      	beq.n	8000fa2 <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <HAL_GPIO_Init+0x1c0>)
 800102c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800102e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001032:	645a      	str	r2, [r3, #68]	; 0x44
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800103e:	08a3      	lsrs	r3, r4, #2
 8001040:	1c9e      	adds	r6, r3, #2
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <HAL_GPIO_Init+0x1b8>)
 8001044:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	f004 0603 	and.w	r6, r4, #3
 800104c:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8001050:	260f      	movs	r6, #15
 8001052:	fa06 f60e 	lsl.w	r6, r6, lr
 8001056:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	4f1b      	ldr	r7, [pc, #108]	; (80010c8 <HAL_GPIO_Init+0x1c4>)
 800105c:	42b8      	cmp	r0, r7
 800105e:	f43f af6b 	beq.w	8000f38 <HAL_GPIO_Init+0x34>
 8001062:	4e1a      	ldr	r6, [pc, #104]	; (80010cc <HAL_GPIO_Init+0x1c8>)
 8001064:	42b0      	cmp	r0, r6
 8001066:	d01a      	beq.n	800109e <HAL_GPIO_Init+0x19a>
 8001068:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800106c:	42b0      	cmp	r0, r6
 800106e:	d018      	beq.n	80010a2 <HAL_GPIO_Init+0x19e>
 8001070:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001074:	42b0      	cmp	r0, r6
 8001076:	d016      	beq.n	80010a6 <HAL_GPIO_Init+0x1a2>
 8001078:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800107c:	42b0      	cmp	r0, r6
 800107e:	d014      	beq.n	80010aa <HAL_GPIO_Init+0x1a6>
 8001080:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001084:	42b0      	cmp	r0, r6
 8001086:	d012      	beq.n	80010ae <HAL_GPIO_Init+0x1aa>
 8001088:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800108c:	42b0      	cmp	r0, r6
 800108e:	d010      	beq.n	80010b2 <HAL_GPIO_Init+0x1ae>
 8001090:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001094:	42b0      	cmp	r0, r6
 8001096:	f43f af4d 	beq.w	8000f34 <HAL_GPIO_Init+0x30>
 800109a:	2608      	movs	r6, #8
 800109c:	e74d      	b.n	8000f3a <HAL_GPIO_Init+0x36>
 800109e:	2601      	movs	r6, #1
 80010a0:	e74b      	b.n	8000f3a <HAL_GPIO_Init+0x36>
 80010a2:	2602      	movs	r6, #2
 80010a4:	e749      	b.n	8000f3a <HAL_GPIO_Init+0x36>
 80010a6:	2603      	movs	r6, #3
 80010a8:	e747      	b.n	8000f3a <HAL_GPIO_Init+0x36>
 80010aa:	2604      	movs	r6, #4
 80010ac:	e745      	b.n	8000f3a <HAL_GPIO_Init+0x36>
 80010ae:	2605      	movs	r6, #5
 80010b0:	e743      	b.n	8000f3a <HAL_GPIO_Init+0x36>
 80010b2:	2606      	movs	r6, #6
 80010b4:	e741      	b.n	8000f3a <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 80010b6:	b003      	add	sp, #12
 80010b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40013800 	.word	0x40013800
 80010c0:	40013c00 	.word	0x40013c00
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400

080010d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d0:	b912      	cbnz	r2, 80010d8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d2:	0409      	lsls	r1, r1, #16
 80010d4:	6181      	str	r1, [r0, #24]
 80010d6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80010d8:	6181      	str	r1, [r0, #24]
 80010da:	4770      	bx	lr

080010dc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80010dc:	6943      	ldr	r3, [r0, #20]
 80010de:	4059      	eors	r1, r3
 80010e0:	6141      	str	r1, [r0, #20]
 80010e2:	4770      	bx	lr

080010e4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e4:	2800      	cmp	r0, #0
 80010e6:	f000 81bb 	beq.w	8001460 <HAL_RCC_OscConfig+0x37c>
{
 80010ea:	b570      	push	{r4, r5, r6, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f0:	6803      	ldr	r3, [r0, #0]
 80010f2:	f013 0f01 	tst.w	r3, #1
 80010f6:	d03b      	beq.n	8001170 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010f8:	4ba7      	ldr	r3, [pc, #668]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b04      	cmp	r3, #4
 8001102:	d02c      	beq.n	800115e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001104:	4ba4      	ldr	r3, [pc, #656]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110c:	2b08      	cmp	r3, #8
 800110e:	d021      	beq.n	8001154 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001110:	6863      	ldr	r3, [r4, #4]
 8001112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001116:	d04f      	beq.n	80011b8 <HAL_RCC_OscConfig+0xd4>
 8001118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800111c:	d052      	beq.n	80011c4 <HAL_RCC_OscConfig+0xe0>
 800111e:	4b9e      	ldr	r3, [pc, #632]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800112e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001130:	6863      	ldr	r3, [r4, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d050      	beq.n	80011d8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fa01 	bl	800053c <HAL_GetTick>
 800113a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113c:	4b96      	ldr	r3, [pc, #600]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001144:	d114      	bne.n	8001170 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001146:	f7ff f9f9 	bl	800053c <HAL_GetTick>
 800114a:	1b40      	subs	r0, r0, r5
 800114c:	2864      	cmp	r0, #100	; 0x64
 800114e:	d9f5      	bls.n	800113c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001150:	2003      	movs	r0, #3
 8001152:	e18a      	b.n	800146a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001154:	4b90      	ldr	r3, [pc, #576]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800115c:	d0d8      	beq.n	8001110 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115e:	4b8e      	ldr	r3, [pc, #568]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001166:	d003      	beq.n	8001170 <HAL_RCC_OscConfig+0x8c>
 8001168:	6863      	ldr	r3, [r4, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 817a 	beq.w	8001464 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	f013 0f02 	tst.w	r3, #2
 8001176:	d055      	beq.n	8001224 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001178:	4b87      	ldr	r3, [pc, #540]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f013 0f0c 	tst.w	r3, #12
 8001180:	d03e      	beq.n	8001200 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001182:	4b85      	ldr	r3, [pc, #532]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118a:	2b08      	cmp	r3, #8
 800118c:	d033      	beq.n	80011f6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800118e:	68e3      	ldr	r3, [r4, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d068      	beq.n	8001266 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001194:	2201      	movs	r2, #1
 8001196:	4b81      	ldr	r3, [pc, #516]	; (800139c <HAL_RCC_OscConfig+0x2b8>)
 8001198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119a:	f7ff f9cf 	bl	800053c <HAL_GetTick>
 800119e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a0:	4b7d      	ldr	r3, [pc, #500]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f013 0f02 	tst.w	r3, #2
 80011a8:	d154      	bne.n	8001254 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011aa:	f7ff f9c7 	bl	800053c <HAL_GetTick>
 80011ae:	1b40      	subs	r0, r0, r5
 80011b0:	2802      	cmp	r0, #2
 80011b2:	d9f5      	bls.n	80011a0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80011b4:	2003      	movs	r0, #3
 80011b6:	e158      	b.n	800146a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b8:	4a77      	ldr	r2, [pc, #476]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 80011ba:	6813      	ldr	r3, [r2, #0]
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e7b5      	b.n	8001130 <HAL_RCC_OscConfig+0x4c>
 80011c4:	4b74      	ldr	r3, [pc, #464]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e7ab      	b.n	8001130 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80011d8:	f7ff f9b0 	bl	800053c <HAL_GetTick>
 80011dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011de:	4b6e      	ldr	r3, [pc, #440]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011e6:	d0c3      	beq.n	8001170 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff f9a8 	bl	800053c <HAL_GetTick>
 80011ec:	1b40      	subs	r0, r0, r5
 80011ee:	2864      	cmp	r0, #100	; 0x64
 80011f0:	d9f5      	bls.n	80011de <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80011f2:	2003      	movs	r0, #3
 80011f4:	e139      	b.n	800146a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f6:	4b68      	ldr	r3, [pc, #416]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80011fe:	d1c6      	bne.n	800118e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001200:	4b65      	ldr	r3, [pc, #404]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f013 0f02 	tst.w	r3, #2
 8001208:	d004      	beq.n	8001214 <HAL_RCC_OscConfig+0x130>
 800120a:	68e3      	ldr	r3, [r4, #12]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d001      	beq.n	8001214 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001210:	2001      	movs	r0, #1
 8001212:	e12a      	b.n	800146a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	4a60      	ldr	r2, [pc, #384]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800121c:	6921      	ldr	r1, [r4, #16]
 800121e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001222:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	f013 0f08 	tst.w	r3, #8
 800122a:	d040      	beq.n	80012ae <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800122c:	6963      	ldr	r3, [r4, #20]
 800122e:	b363      	cbz	r3, 800128a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001230:	2201      	movs	r2, #1
 8001232:	4b5b      	ldr	r3, [pc, #364]	; (80013a0 <HAL_RCC_OscConfig+0x2bc>)
 8001234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001236:	f7ff f981 	bl	800053c <HAL_GetTick>
 800123a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123c:	4b56      	ldr	r3, [pc, #344]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 800123e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001240:	f013 0f02 	tst.w	r3, #2
 8001244:	d133      	bne.n	80012ae <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001246:	f7ff f979 	bl	800053c <HAL_GetTick>
 800124a:	1b40      	subs	r0, r0, r5
 800124c:	2802      	cmp	r0, #2
 800124e:	d9f5      	bls.n	800123c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001250:	2003      	movs	r0, #3
 8001252:	e10a      	b.n	800146a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001254:	4a50      	ldr	r2, [pc, #320]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 8001256:	6813      	ldr	r3, [r2, #0]
 8001258:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800125c:	6921      	ldr	r1, [r4, #16]
 800125e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e7de      	b.n	8001224 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001266:	2200      	movs	r2, #0
 8001268:	4b4c      	ldr	r3, [pc, #304]	; (800139c <HAL_RCC_OscConfig+0x2b8>)
 800126a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800126c:	f7ff f966 	bl	800053c <HAL_GetTick>
 8001270:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	4b49      	ldr	r3, [pc, #292]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f013 0f02 	tst.w	r3, #2
 800127a:	d0d3      	beq.n	8001224 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127c:	f7ff f95e 	bl	800053c <HAL_GetTick>
 8001280:	1b40      	subs	r0, r0, r5
 8001282:	2802      	cmp	r0, #2
 8001284:	d9f5      	bls.n	8001272 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001286:	2003      	movs	r0, #3
 8001288:	e0ef      	b.n	800146a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128a:	2200      	movs	r2, #0
 800128c:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <HAL_RCC_OscConfig+0x2bc>)
 800128e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001290:	f7ff f954 	bl	800053c <HAL_GetTick>
 8001294:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001296:	4b40      	ldr	r3, [pc, #256]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 8001298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800129a:	f013 0f02 	tst.w	r3, #2
 800129e:	d006      	beq.n	80012ae <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff f94c 	bl	800053c <HAL_GetTick>
 80012a4:	1b40      	subs	r0, r0, r5
 80012a6:	2802      	cmp	r0, #2
 80012a8:	d9f5      	bls.n	8001296 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 80012aa:	2003      	movs	r0, #3
 80012ac:	e0dd      	b.n	800146a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	f013 0f04 	tst.w	r3, #4
 80012b4:	d079      	beq.n	80013aa <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b6:	4b38      	ldr	r3, [pc, #224]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80012be:	d133      	bne.n	8001328 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 80012c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012d8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012da:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <HAL_RCC_OscConfig+0x2c0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012e2:	d023      	beq.n	800132c <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e4:	68a3      	ldr	r3, [r4, #8]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d034      	beq.n	8001354 <HAL_RCC_OscConfig+0x270>
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	d038      	beq.n	8001360 <HAL_RCC_OscConfig+0x27c>
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 80012f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80012f2:	f022 0201 	bic.w	r2, r2, #1
 80012f6:	671a      	str	r2, [r3, #112]	; 0x70
 80012f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80012fa:	f022 0204 	bic.w	r2, r2, #4
 80012fe:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001300:	68a3      	ldr	r3, [r4, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d036      	beq.n	8001374 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001306:	f7ff f919 	bl	800053c <HAL_GetTick>
 800130a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 800130e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001310:	f013 0f02 	tst.w	r3, #2
 8001314:	d148      	bne.n	80013a8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff f911 	bl	800053c <HAL_GetTick>
 800131a:	1b80      	subs	r0, r0, r6
 800131c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001320:	4298      	cmp	r0, r3
 8001322:	d9f3      	bls.n	800130c <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001324:	2003      	movs	r0, #3
 8001326:	e0a0      	b.n	800146a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8001328:	2500      	movs	r5, #0
 800132a:	e7d6      	b.n	80012da <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132c:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <HAL_RCC_OscConfig+0x2c0>)
 800132e:	6813      	ldr	r3, [r2, #0]
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001336:	f7ff f901 	bl	800053c <HAL_GetTick>
 800133a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_RCC_OscConfig+0x2c0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001344:	d1ce      	bne.n	80012e4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001346:	f7ff f8f9 	bl	800053c <HAL_GetTick>
 800134a:	1b80      	subs	r0, r0, r6
 800134c:	2802      	cmp	r0, #2
 800134e:	d9f5      	bls.n	800133c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001350:	2003      	movs	r0, #3
 8001352:	e08a      	b.n	800146a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001354:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 8001356:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6713      	str	r3, [r2, #112]	; 0x70
 800135e:	e7cf      	b.n	8001300 <HAL_RCC_OscConfig+0x21c>
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 8001362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001364:	f042 0204 	orr.w	r2, r2, #4
 8001368:	671a      	str	r2, [r3, #112]	; 0x70
 800136a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800136c:	f042 0201 	orr.w	r2, r2, #1
 8001370:	671a      	str	r2, [r3, #112]	; 0x70
 8001372:	e7c5      	b.n	8001300 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001374:	f7ff f8e2 	bl	800053c <HAL_GetTick>
 8001378:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_RCC_OscConfig+0x2b4>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	f013 0f02 	tst.w	r3, #2
 8001382:	d011      	beq.n	80013a8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001384:	f7ff f8da 	bl	800053c <HAL_GetTick>
 8001388:	1b80      	subs	r0, r0, r6
 800138a:	f241 3388 	movw	r3, #5000	; 0x1388
 800138e:	4298      	cmp	r0, r3
 8001390:	d9f3      	bls.n	800137a <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8001392:	2003      	movs	r0, #3
 8001394:	e069      	b.n	800146a <HAL_RCC_OscConfig+0x386>
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	42470000 	.word	0x42470000
 80013a0:	42470e80 	.word	0x42470e80
 80013a4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013a8:	b9e5      	cbnz	r5, 80013e4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013aa:	69a3      	ldr	r3, [r4, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d05b      	beq.n	8001468 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013b0:	4a30      	ldr	r2, [pc, #192]	; (8001474 <HAL_RCC_OscConfig+0x390>)
 80013b2:	6892      	ldr	r2, [r2, #8]
 80013b4:	f002 020c 	and.w	r2, r2, #12
 80013b8:	2a08      	cmp	r2, #8
 80013ba:	d058      	beq.n	800146e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d017      	beq.n	80013f0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c0:	2200      	movs	r2, #0
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_RCC_OscConfig+0x394>)
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff f8b9 	bl	800053c <HAL_GetTick>
 80013ca:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013cc:	4b29      	ldr	r3, [pc, #164]	; (8001474 <HAL_RCC_OscConfig+0x390>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013d4:	d042      	beq.n	800145c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d6:	f7ff f8b1 	bl	800053c <HAL_GetTick>
 80013da:	1b00      	subs	r0, r0, r4
 80013dc:	2802      	cmp	r0, #2
 80013de:	d9f5      	bls.n	80013cc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013e0:	2003      	movs	r0, #3
 80013e2:	e042      	b.n	800146a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e4:	4a23      	ldr	r2, [pc, #140]	; (8001474 <HAL_RCC_OscConfig+0x390>)
 80013e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	e7dc      	b.n	80013aa <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80013f0:	2200      	movs	r2, #0
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_RCC_OscConfig+0x394>)
 80013f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013f6:	f7ff f8a1 	bl	800053c <HAL_GetTick>
 80013fa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_RCC_OscConfig+0x390>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001404:	d006      	beq.n	8001414 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff f899 	bl	800053c <HAL_GetTick>
 800140a:	1b40      	subs	r0, r0, r5
 800140c:	2802      	cmp	r0, #2
 800140e:	d9f5      	bls.n	80013fc <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001410:	2003      	movs	r0, #3
 8001412:	e02a      	b.n	800146a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001414:	69e3      	ldr	r3, [r4, #28]
 8001416:	6a22      	ldr	r2, [r4, #32]
 8001418:	4313      	orrs	r3, r2
 800141a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800141c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001420:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001422:	0852      	lsrs	r2, r2, #1
 8001424:	3a01      	subs	r2, #1
 8001426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800142a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800142c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001430:	4a10      	ldr	r2, [pc, #64]	; (8001474 <HAL_RCC_OscConfig+0x390>)
 8001432:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001434:	2201      	movs	r2, #1
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_RCC_OscConfig+0x394>)
 8001438:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800143a:	f7ff f87f 	bl	800053c <HAL_GetTick>
 800143e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_RCC_OscConfig+0x390>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001448:	d106      	bne.n	8001458 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff f877 	bl	800053c <HAL_GetTick>
 800144e:	1b00      	subs	r0, r0, r4
 8001450:	2802      	cmp	r0, #2
 8001452:	d9f5      	bls.n	8001440 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001454:	2003      	movs	r0, #3
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001458:	2000      	movs	r0, #0
 800145a:	e006      	b.n	800146a <HAL_RCC_OscConfig+0x386>
 800145c:	2000      	movs	r0, #0
 800145e:	e004      	b.n	800146a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8001460:	2001      	movs	r0, #1
 8001462:	4770      	bx	lr
        return HAL_ERROR;
 8001464:	2001      	movs	r0, #1
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8001468:	2000      	movs	r0, #0
}
 800146a:	b002      	add	sp, #8
 800146c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800146e:	2001      	movs	r0, #1
 8001470:	e7fb      	b.n	800146a <HAL_RCC_OscConfig+0x386>
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	42470060 	.word	0x42470060

0800147c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800147e:	4b25      	ldr	r3, [pc, #148]	; (8001514 <HAL_RCC_GetSysClockFreq+0x98>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b04      	cmp	r3, #4
 8001488:	d041      	beq.n	800150e <HAL_RCC_GetSysClockFreq+0x92>
 800148a:	2b08      	cmp	r3, #8
 800148c:	d001      	beq.n	8001492 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800148e:	4822      	ldr	r0, [pc, #136]	; (8001518 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_RCC_GetSysClockFreq+0x98>)
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80014a0:	d012      	beq.n	80014c8 <HAL_RCC_GetSysClockFreq+0x4c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_RCC_GetSysClockFreq+0x98>)
 80014a4:	6859      	ldr	r1, [r3, #4]
 80014a6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014aa:	2300      	movs	r3, #0
 80014ac:	481b      	ldr	r0, [pc, #108]	; (800151c <HAL_RCC_GetSysClockFreq+0xa0>)
 80014ae:	fba1 0100 	umull	r0, r1, r1, r0
 80014b2:	f7fe fe95 	bl	80001e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_RCC_GetSysClockFreq+0x98>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014be:	3301      	adds	r3, #1
 80014c0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80014c2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80014c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80014d0:	461e      	mov	r6, r3
 80014d2:	2700      	movs	r7, #0
 80014d4:	015c      	lsls	r4, r3, #5
 80014d6:	2500      	movs	r5, #0
 80014d8:	1ae4      	subs	r4, r4, r3
 80014da:	eb65 0507 	sbc.w	r5, r5, r7
 80014de:	01a9      	lsls	r1, r5, #6
 80014e0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80014e4:	01a0      	lsls	r0, r4, #6
 80014e6:	1b00      	subs	r0, r0, r4
 80014e8:	eb61 0105 	sbc.w	r1, r1, r5
 80014ec:	00cb      	lsls	r3, r1, #3
 80014ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014f2:	00c4      	lsls	r4, r0, #3
 80014f4:	19a0      	adds	r0, r4, r6
 80014f6:	eb43 0107 	adc.w	r1, r3, r7
 80014fa:	028b      	lsls	r3, r1, #10
 80014fc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001500:	0284      	lsls	r4, r0, #10
 8001502:	4620      	mov	r0, r4
 8001504:	4619      	mov	r1, r3
 8001506:	2300      	movs	r3, #0
 8001508:	f7fe fe6a 	bl	80001e0 <__aeabi_uldivmod>
 800150c:	e7d3      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 800150e:	4803      	ldr	r0, [pc, #12]	; (800151c <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	00f42400 	.word	0x00f42400
 800151c:	017d7840 	.word	0x017d7840

08001520 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001520:	2800      	cmp	r0, #0
 8001522:	f000 809d 	beq.w	8001660 <HAL_RCC_ClockConfig+0x140>
{
 8001526:	b570      	push	{r4, r5, r6, lr}
 8001528:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800152a:	4b4f      	ldr	r3, [pc, #316]	; (8001668 <HAL_RCC_ClockConfig+0x148>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	428b      	cmp	r3, r1
 8001534:	d209      	bcs.n	800154a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	b2cb      	uxtb	r3, r1
 8001538:	4a4b      	ldr	r2, [pc, #300]	; (8001668 <HAL_RCC_ClockConfig+0x148>)
 800153a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153c:	6813      	ldr	r3, [r2, #0]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	4299      	cmp	r1, r3
 8001544:	d001      	beq.n	800154a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001546:	2001      	movs	r0, #1
 8001548:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	f013 0f02 	tst.w	r3, #2
 8001550:	d017      	beq.n	8001582 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001552:	f013 0f04 	tst.w	r3, #4
 8001556:	d004      	beq.n	8001562 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001558:	4a44      	ldr	r2, [pc, #272]	; (800166c <HAL_RCC_ClockConfig+0x14c>)
 800155a:	6893      	ldr	r3, [r2, #8]
 800155c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001560:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	f013 0f08 	tst.w	r3, #8
 8001568:	d004      	beq.n	8001574 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800156a:	4a40      	ldr	r2, [pc, #256]	; (800166c <HAL_RCC_ClockConfig+0x14c>)
 800156c:	6893      	ldr	r3, [r2, #8]
 800156e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001572:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	4a3d      	ldr	r2, [pc, #244]	; (800166c <HAL_RCC_ClockConfig+0x14c>)
 8001576:	6893      	ldr	r3, [r2, #8]
 8001578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800157c:	68a0      	ldr	r0, [r4, #8]
 800157e:	4303      	orrs	r3, r0
 8001580:	6093      	str	r3, [r2, #8]
 8001582:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	f013 0f01 	tst.w	r3, #1
 800158a:	d032      	beq.n	80015f2 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158c:	6863      	ldr	r3, [r4, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d021      	beq.n	80015d6 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001592:	1e9a      	subs	r2, r3, #2
 8001594:	2a01      	cmp	r2, #1
 8001596:	d925      	bls.n	80015e4 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	4a34      	ldr	r2, [pc, #208]	; (800166c <HAL_RCC_ClockConfig+0x14c>)
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	f012 0f02 	tst.w	r2, #2
 80015a0:	d060      	beq.n	8001664 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a2:	4932      	ldr	r1, [pc, #200]	; (800166c <HAL_RCC_ClockConfig+0x14c>)
 80015a4:	688a      	ldr	r2, [r1, #8]
 80015a6:	f022 0203 	bic.w	r2, r2, #3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80015ae:	f7fe ffc5 	bl	800053c <HAL_GetTick>
 80015b2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_RCC_ClockConfig+0x14c>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	6862      	ldr	r2, [r4, #4]
 80015be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015c2:	d016      	beq.n	80015f2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c4:	f7fe ffba 	bl	800053c <HAL_GetTick>
 80015c8:	1b80      	subs	r0, r0, r6
 80015ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80015ce:	4298      	cmp	r0, r3
 80015d0:	d9f0      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80015d2:	2003      	movs	r0, #3
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4a25      	ldr	r2, [pc, #148]	; (800166c <HAL_RCC_ClockConfig+0x14c>)
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80015de:	d1e0      	bne.n	80015a2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80015e0:	2001      	movs	r0, #1
 80015e2:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e4:	4a21      	ldr	r2, [pc, #132]	; (800166c <HAL_RCC_ClockConfig+0x14c>)
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015ec:	d1d9      	bne.n	80015a2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
 80015f0:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_RCC_ClockConfig+0x148>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	429d      	cmp	r5, r3
 80015fc:	d209      	bcs.n	8001612 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	b2ea      	uxtb	r2, r5
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_RCC_ClockConfig+0x148>)
 8001602:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	429d      	cmp	r5, r3
 800160c:	d001      	beq.n	8001612 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800160e:	2001      	movs	r0, #1
}
 8001610:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	f013 0f04 	tst.w	r3, #4
 8001618:	d006      	beq.n	8001628 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800161a:	4a14      	ldr	r2, [pc, #80]	; (800166c <HAL_RCC_ClockConfig+0x14c>)
 800161c:	6893      	ldr	r3, [r2, #8]
 800161e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001622:	68e1      	ldr	r1, [r4, #12]
 8001624:	430b      	orrs	r3, r1
 8001626:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	f013 0f08 	tst.w	r3, #8
 800162e:	d007      	beq.n	8001640 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_RCC_ClockConfig+0x14c>)
 8001632:	6893      	ldr	r3, [r2, #8]
 8001634:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001638:	6921      	ldr	r1, [r4, #16]
 800163a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800163e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001640:	f7ff ff1c 	bl	800147c <HAL_RCC_GetSysClockFreq>
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_RCC_ClockConfig+0x14c>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800164c:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_RCC_ClockConfig+0x150>)
 800164e:	5cd3      	ldrb	r3, [r2, r3]
 8001650:	40d8      	lsrs	r0, r3
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_RCC_ClockConfig+0x154>)
 8001654:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001656:	2000      	movs	r0, #0
 8001658:	f00a fe1c 	bl	800c294 <HAL_InitTick>
  return HAL_OK;
 800165c:	2000      	movs	r0, #0
 800165e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001660:	2001      	movs	r0, #1
 8001662:	4770      	bx	lr
        return HAL_ERROR;
 8001664:	2001      	movs	r0, #1
 8001666:	bd70      	pop	{r4, r5, r6, pc}
 8001668:	40023c00 	.word	0x40023c00
 800166c:	40023800 	.word	0x40023800
 8001670:	0800e878 	.word	0x0800e878
 8001674:	20000010 	.word	0x20000010

08001678 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001678:	4b01      	ldr	r3, [pc, #4]	; (8001680 <HAL_RCC_GetHCLKFreq+0x8>)
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000010 	.word	0x20000010

08001684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001684:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001686:	f7ff fff7 	bl	8001678 <HAL_RCC_GetHCLKFreq>
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <HAL_RCC_GetPCLK1Freq+0x18>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001692:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
}
 8001696:	40d8      	lsrs	r0, r3
 8001698:	bd08      	pop	{r3, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	0800e888 	.word	0x0800e888

080016a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016a4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016a6:	f7ff ffe7 	bl	8001678 <HAL_RCC_GetHCLKFreq>
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80016b2:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
}
 80016b6:	40d8      	lsrs	r0, r3
 80016b8:	bd08      	pop	{r3, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	0800e888 	.word	0x0800e888

080016c4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016c4:	230f      	movs	r3, #15
 80016c6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_RCC_GetClockConfig+0x34>)
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80016d8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80016e0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	08db      	lsrs	r3, r3, #3
 80016e6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80016ea:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_RCC_GetClockConfig+0x38>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	600b      	str	r3, [r1, #0]
 80016f6:	4770      	bx	lr
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40023c00 	.word	0x40023c00

08001700 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001700:	4770      	bx	lr

08001702 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001702:	6802      	ldr	r2, [r0, #0]
 8001704:	68d3      	ldr	r3, [r2, #12]
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800170c:	6802      	ldr	r2, [r0, #0]
 800170e:	6813      	ldr	r3, [r2, #0]
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001716:	2000      	movs	r0, #0
 8001718:	4770      	bx	lr

0800171a <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800171a:	4770      	bx	lr

0800171c <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800171c:	4770      	bx	lr

0800171e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800171e:	4770      	bx	lr

08001720 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001720:	4770      	bx	lr

08001722 <HAL_TIM_IRQHandler>:
{
 8001722:	b510      	push	{r4, lr}
 8001724:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001726:	6803      	ldr	r3, [r0, #0]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	f012 0f02 	tst.w	r2, #2
 800172e:	d011      	beq.n	8001754 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	f012 0f02 	tst.w	r2, #2
 8001736:	d00d      	beq.n	8001754 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001738:	f06f 0202 	mvn.w	r2, #2
 800173c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800173e:	2301      	movs	r3, #1
 8001740:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001742:	6803      	ldr	r3, [r0, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f013 0f03 	tst.w	r3, #3
 800174a:	d070      	beq.n	800182e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800174c:	f7ff ffe6 	bl	800171c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001750:	2300      	movs	r3, #0
 8001752:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	f012 0f04 	tst.w	r2, #4
 800175c:	d012      	beq.n	8001784 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	f012 0f04 	tst.w	r2, #4
 8001764:	d00e      	beq.n	8001784 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001766:	f06f 0204 	mvn.w	r2, #4
 800176a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800176c:	2302      	movs	r3, #2
 800176e:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001778:	d05f      	beq.n	800183a <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800177a:	4620      	mov	r0, r4
 800177c:	f7ff ffce 	bl	800171c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001780:	2300      	movs	r3, #0
 8001782:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001784:	6823      	ldr	r3, [r4, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	f012 0f08 	tst.w	r2, #8
 800178c:	d012      	beq.n	80017b4 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	f012 0f08 	tst.w	r2, #8
 8001794:	d00e      	beq.n	80017b4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001796:	f06f 0208 	mvn.w	r2, #8
 800179a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800179c:	2304      	movs	r3, #4
 800179e:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	f013 0f03 	tst.w	r3, #3
 80017a8:	d04e      	beq.n	8001848 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80017aa:	4620      	mov	r0, r4
 80017ac:	f7ff ffb6 	bl	800171c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b0:	2300      	movs	r3, #0
 80017b2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	f012 0f10 	tst.w	r2, #16
 80017bc:	d012      	beq.n	80017e4 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	f012 0f10 	tst.w	r2, #16
 80017c4:	d00e      	beq.n	80017e4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017c6:	f06f 0210 	mvn.w	r2, #16
 80017ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017cc:	2308      	movs	r3, #8
 80017ce:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80017d8:	d03d      	beq.n	8001856 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff ff9e 	bl	800171c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e0:	2300      	movs	r3, #0
 80017e2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	f012 0f01 	tst.w	r2, #1
 80017ec:	d003      	beq.n	80017f6 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	f012 0f01 	tst.w	r2, #1
 80017f4:	d136      	bne.n	8001864 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	691a      	ldr	r2, [r3, #16]
 80017fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80017fe:	d003      	beq.n	8001808 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001806:	d134      	bne.n	8001872 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001810:	d003      	beq.n	800181a <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001818:	d132      	bne.n	8001880 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	f012 0f20 	tst.w	r2, #32
 8001822:	d003      	beq.n	800182c <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	f012 0f20 	tst.w	r2, #32
 800182a:	d130      	bne.n	800188e <HAL_TIM_IRQHandler+0x16c>
 800182c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800182e:	f7ff ff74 	bl	800171a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff ff73 	bl	800171e <HAL_TIM_PWM_PulseFinishedCallback>
 8001838:	e78a      	b.n	8001750 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183a:	4620      	mov	r0, r4
 800183c:	f7ff ff6d 	bl	800171a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff ff6c 	bl	800171e <HAL_TIM_PWM_PulseFinishedCallback>
 8001846:	e79b      	b.n	8001780 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff ff66 	bl	800171a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff ff65 	bl	800171e <HAL_TIM_PWM_PulseFinishedCallback>
 8001854:	e7ac      	b.n	80017b0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001856:	4620      	mov	r0, r4
 8001858:	f7ff ff5f 	bl	800171a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800185c:	4620      	mov	r0, r4
 800185e:	f7ff ff5e 	bl	800171e <HAL_TIM_PWM_PulseFinishedCallback>
 8001862:	e7bd      	b.n	80017e0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001864:	f06f 0201 	mvn.w	r2, #1
 8001868:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800186a:	4620      	mov	r0, r4
 800186c:	f00a fce2 	bl	800c234 <HAL_TIM_PeriodElapsedCallback>
 8001870:	e7c1      	b.n	80017f6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001872:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001876:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001878:	4620      	mov	r0, r4
 800187a:	f000 f8b7 	bl	80019ec <HAL_TIMEx_BreakCallback>
 800187e:	e7c3      	b.n	8001808 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001884:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001886:	4620      	mov	r0, r4
 8001888:	f7ff ff4a 	bl	8001720 <HAL_TIM_TriggerCallback>
 800188c:	e7c5      	b.n	800181a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800188e:	f06f 0220 	mvn.w	r2, #32
 8001892:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001894:	4620      	mov	r0, r4
 8001896:	f000 f8a8 	bl	80019ea <HAL_TIMEx_CommutationCallback>
}
 800189a:	e7c7      	b.n	800182c <HAL_TIM_IRQHandler+0x10a>

0800189c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 800189c:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800189e:	4a45      	ldr	r2, [pc, #276]	; (80019b4 <TIM_Base_SetConfig+0x118>)
 80018a0:	4290      	cmp	r0, r2
 80018a2:	d04a      	beq.n	800193a <TIM_Base_SetConfig+0x9e>
 80018a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018a8:	d049      	beq.n	800193e <TIM_Base_SetConfig+0xa2>
 80018aa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80018ae:	4290      	cmp	r0, r2
 80018b0:	d047      	beq.n	8001942 <TIM_Base_SetConfig+0xa6>
 80018b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018b6:	4290      	cmp	r0, r2
 80018b8:	d045      	beq.n	8001946 <TIM_Base_SetConfig+0xaa>
 80018ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018be:	4290      	cmp	r0, r2
 80018c0:	d043      	beq.n	800194a <TIM_Base_SetConfig+0xae>
 80018c2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80018c6:	4290      	cmp	r0, r2
 80018c8:	d035      	beq.n	8001936 <TIM_Base_SetConfig+0x9a>
 80018ca:	2200      	movs	r2, #0
 80018cc:	b11a      	cbz	r2, 80018d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80018d2:	684a      	ldr	r2, [r1, #4]
 80018d4:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80018d6:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <TIM_Base_SetConfig+0x118>)
 80018d8:	4290      	cmp	r0, r2
 80018da:	d03a      	beq.n	8001952 <TIM_Base_SetConfig+0xb6>
 80018dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018e0:	d050      	beq.n	8001984 <TIM_Base_SetConfig+0xe8>
 80018e2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80018e6:	4290      	cmp	r0, r2
 80018e8:	d04e      	beq.n	8001988 <TIM_Base_SetConfig+0xec>
 80018ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018ee:	4290      	cmp	r0, r2
 80018f0:	d04c      	beq.n	800198c <TIM_Base_SetConfig+0xf0>
 80018f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018f6:	4290      	cmp	r0, r2
 80018f8:	d04a      	beq.n	8001990 <TIM_Base_SetConfig+0xf4>
 80018fa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80018fe:	4290      	cmp	r0, r2
 8001900:	d048      	beq.n	8001994 <TIM_Base_SetConfig+0xf8>
 8001902:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001906:	4290      	cmp	r0, r2
 8001908:	d046      	beq.n	8001998 <TIM_Base_SetConfig+0xfc>
 800190a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800190e:	4290      	cmp	r0, r2
 8001910:	d044      	beq.n	800199c <TIM_Base_SetConfig+0x100>
 8001912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001916:	4290      	cmp	r0, r2
 8001918:	d042      	beq.n	80019a0 <TIM_Base_SetConfig+0x104>
 800191a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800191e:	4290      	cmp	r0, r2
 8001920:	d040      	beq.n	80019a4 <TIM_Base_SetConfig+0x108>
 8001922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001926:	4290      	cmp	r0, r2
 8001928:	d03e      	beq.n	80019a8 <TIM_Base_SetConfig+0x10c>
 800192a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800192e:	4290      	cmp	r0, r2
 8001930:	d00d      	beq.n	800194e <TIM_Base_SetConfig+0xb2>
 8001932:	2200      	movs	r2, #0
 8001934:	e00e      	b.n	8001954 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001936:	2201      	movs	r2, #1
 8001938:	e7c8      	b.n	80018cc <TIM_Base_SetConfig+0x30>
 800193a:	2201      	movs	r2, #1
 800193c:	e7c6      	b.n	80018cc <TIM_Base_SetConfig+0x30>
 800193e:	2201      	movs	r2, #1
 8001940:	e7c4      	b.n	80018cc <TIM_Base_SetConfig+0x30>
 8001942:	2201      	movs	r2, #1
 8001944:	e7c2      	b.n	80018cc <TIM_Base_SetConfig+0x30>
 8001946:	2201      	movs	r2, #1
 8001948:	e7c0      	b.n	80018cc <TIM_Base_SetConfig+0x30>
 800194a:	2201      	movs	r2, #1
 800194c:	e7be      	b.n	80018cc <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800194e:	2201      	movs	r2, #1
 8001950:	e000      	b.n	8001954 <TIM_Base_SetConfig+0xb8>
 8001952:	2201      	movs	r2, #1
 8001954:	b11a      	cbz	r2, 800195e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800195a:	68ca      	ldr	r2, [r1, #12]
 800195c:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 800195e:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001960:	688b      	ldr	r3, [r1, #8]
 8001962:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001964:	680b      	ldr	r3, [r1, #0]
 8001966:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <TIM_Base_SetConfig+0x118>)
 800196a:	4298      	cmp	r0, r3
 800196c:	d020      	beq.n	80019b0 <TIM_Base_SetConfig+0x114>
 800196e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001972:	4298      	cmp	r0, r3
 8001974:	d01a      	beq.n	80019ac <TIM_Base_SetConfig+0x110>
 8001976:	2300      	movs	r3, #0
 8001978:	b10b      	cbz	r3, 800197e <TIM_Base_SetConfig+0xe2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800197a:	690b      	ldr	r3, [r1, #16]
 800197c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800197e:	2301      	movs	r3, #1
 8001980:	6143      	str	r3, [r0, #20]
 8001982:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001984:	2201      	movs	r2, #1
 8001986:	e7e5      	b.n	8001954 <TIM_Base_SetConfig+0xb8>
 8001988:	2201      	movs	r2, #1
 800198a:	e7e3      	b.n	8001954 <TIM_Base_SetConfig+0xb8>
 800198c:	2201      	movs	r2, #1
 800198e:	e7e1      	b.n	8001954 <TIM_Base_SetConfig+0xb8>
 8001990:	2201      	movs	r2, #1
 8001992:	e7df      	b.n	8001954 <TIM_Base_SetConfig+0xb8>
 8001994:	2201      	movs	r2, #1
 8001996:	e7dd      	b.n	8001954 <TIM_Base_SetConfig+0xb8>
 8001998:	2201      	movs	r2, #1
 800199a:	e7db      	b.n	8001954 <TIM_Base_SetConfig+0xb8>
 800199c:	2201      	movs	r2, #1
 800199e:	e7d9      	b.n	8001954 <TIM_Base_SetConfig+0xb8>
 80019a0:	2201      	movs	r2, #1
 80019a2:	e7d7      	b.n	8001954 <TIM_Base_SetConfig+0xb8>
 80019a4:	2201      	movs	r2, #1
 80019a6:	e7d5      	b.n	8001954 <TIM_Base_SetConfig+0xb8>
 80019a8:	2201      	movs	r2, #1
 80019aa:	e7d3      	b.n	8001954 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80019ac:	2301      	movs	r3, #1
 80019ae:	e7e3      	b.n	8001978 <TIM_Base_SetConfig+0xdc>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e7e1      	b.n	8001978 <TIM_Base_SetConfig+0xdc>
 80019b4:	40010000 	.word	0x40010000

080019b8 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80019b8:	b1a8      	cbz	r0, 80019e6 <HAL_TIM_Base_Init+0x2e>
{ 
 80019ba:	b510      	push	{r4, lr}
 80019bc:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80019be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019c2:	b15b      	cbz	r3, 80019dc <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80019c4:	2302      	movs	r3, #2
 80019c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80019ca:	1d21      	adds	r1, r4, #4
 80019cc:	6820      	ldr	r0, [r4, #0]
 80019ce:	f7ff ff65 	bl	800189c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80019d8:	2000      	movs	r0, #0
 80019da:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80019dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80019e0:	f7ff fe8e 	bl	8001700 <HAL_TIM_Base_MspInit>
 80019e4:	e7ee      	b.n	80019c4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80019e6:	2001      	movs	r0, #1
 80019e8:	4770      	bx	lr

080019ea <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80019ea:	4770      	bx	lr

080019ec <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019ec:	4770      	bx	lr

080019ee <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019ee:	6802      	ldr	r2, [r0, #0]
 80019f0:	68d3      	ldr	r3, [r2, #12]
 80019f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80019f6:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019f8:	6802      	ldr	r2, [r0, #0]
 80019fa:	6953      	ldr	r3, [r2, #20]
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a02:	2320      	movs	r3, #32
 8001a04:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001a08:	4770      	bx	lr

08001a0a <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a0a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b21      	cmp	r3, #33	; 0x21
 8001a12:	d001      	beq.n	8001a18 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001a14:	2002      	movs	r0, #2
 8001a16:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a18:	6883      	ldr	r3, [r0, #8]
 8001a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a1e:	d017      	beq.n	8001a50 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a20:	6802      	ldr	r2, [r0, #0]
 8001a22:	6a03      	ldr	r3, [r0, #32]
 8001a24:	1c59      	adds	r1, r3, #1
 8001a26:	6201      	str	r1, [r0, #32]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 8001a2c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001a36:	b9db      	cbnz	r3, 8001a70 <UART_Transmit_IT+0x66>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001a38:	6802      	ldr	r2, [r0, #0]
 8001a3a:	68d3      	ldr	r3, [r2, #12]
 8001a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a40:	60d3      	str	r3, [r2, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a42:	6802      	ldr	r2, [r0, #0]
 8001a44:	68d3      	ldr	r3, [r2, #12]
 8001a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a4a:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001a50:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001a52:	6802      	ldr	r2, [r0, #0]
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5a:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001a5c:	6903      	ldr	r3, [r0, #16]
 8001a5e:	b91b      	cbnz	r3, 8001a68 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8001a60:	6a03      	ldr	r3, [r0, #32]
 8001a62:	3302      	adds	r3, #2
 8001a64:	6203      	str	r3, [r0, #32]
 8001a66:	e7e1      	b.n	8001a2c <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8001a68:	6a03      	ldr	r3, [r0, #32]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	6203      	str	r3, [r0, #32]
 8001a6e:	e7dd      	b.n	8001a2c <UART_Transmit_IT+0x22>
    return HAL_OK;
 8001a70:	2000      	movs	r0, #0
  }
}
 8001a72:	4770      	bx	lr

08001a74 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a78:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001a7a:	6802      	ldr	r2, [r0, #0]
 8001a7c:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001a7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001a82:	68c1      	ldr	r1, [r0, #12]
 8001a84:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001a86:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001a88:	6801      	ldr	r1, [r0, #0]
 8001a8a:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001a8c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001a90:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a94:	6882      	ldr	r2, [r0, #8]
 8001a96:	6900      	ldr	r0, [r0, #16]
 8001a98:	4302      	orrs	r2, r0
 8001a9a:	6960      	ldr	r0, [r4, #20]
 8001a9c:	4302      	orrs	r2, r0
 8001a9e:	69e0      	ldr	r0, [r4, #28]
 8001aa0:	4302      	orrs	r2, r0
 8001aa2:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001aa4:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001aa6:	6822      	ldr	r2, [r4, #0]
 8001aa8:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001aae:	69a1      	ldr	r1, [r4, #24]
 8001ab0:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001ab2:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ab4:	69e3      	ldr	r3, [r4, #28]
 8001ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aba:	d062      	beq.n	8001b82 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001abc:	f8d4 8000 	ldr.w	r8, [r4]
 8001ac0:	4bbb      	ldr	r3, [pc, #748]	; (8001db0 <UART_SetConfig+0x33c>)
 8001ac2:	4598      	cmp	r8, r3
 8001ac4:	f000 811b 	beq.w	8001cfe <UART_SetConfig+0x28a>
 8001ac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001acc:	4598      	cmp	r8, r3
 8001ace:	f000 8116 	beq.w	8001cfe <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ad2:	f7ff fdd7 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8001ad6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ada:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ade:	6865      	ldr	r5, [r4, #4]
 8001ae0:	00ad      	lsls	r5, r5, #2
 8001ae2:	fbb0 f5f5 	udiv	r5, r0, r5
 8001ae6:	4fb3      	ldr	r7, [pc, #716]	; (8001db4 <UART_SetConfig+0x340>)
 8001ae8:	fba7 3505 	umull	r3, r5, r7, r5
 8001aec:	096d      	lsrs	r5, r5, #5
 8001aee:	012e      	lsls	r6, r5, #4
 8001af0:	f7ff fdc8 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8001af4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001af8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001afc:	6865      	ldr	r5, [r4, #4]
 8001afe:	00ad      	lsls	r5, r5, #2
 8001b00:	fbb0 faf5 	udiv	sl, r0, r5
 8001b04:	f7ff fdbe 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8001b08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b10:	6865      	ldr	r5, [r4, #4]
 8001b12:	00ad      	lsls	r5, r5, #2
 8001b14:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b18:	fba7 3505 	umull	r3, r5, r7, r5
 8001b1c:	096d      	lsrs	r5, r5, #5
 8001b1e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b22:	fb09 a515 	mls	r5, r9, r5, sl
 8001b26:	012d      	lsls	r5, r5, #4
 8001b28:	3532      	adds	r5, #50	; 0x32
 8001b2a:	fba7 3505 	umull	r3, r5, r7, r5
 8001b2e:	096d      	lsrs	r5, r5, #5
 8001b30:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001b34:	4435      	add	r5, r6
 8001b36:	f7ff fda5 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8001b3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b42:	6866      	ldr	r6, [r4, #4]
 8001b44:	00b6      	lsls	r6, r6, #2
 8001b46:	fbb0 f6f6 	udiv	r6, r0, r6
 8001b4a:	f7ff fd9b 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8001b4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b56:	6863      	ldr	r3, [r4, #4]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b5e:	fba7 3000 	umull	r3, r0, r7, r0
 8001b62:	0940      	lsrs	r0, r0, #5
 8001b64:	fb09 6910 	mls	r9, r9, r0, r6
 8001b68:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001b6c:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001b70:	fba7 3709 	umull	r3, r7, r7, r9
 8001b74:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001b78:	442f      	add	r7, r5
 8001b7a:	f8c8 7008 	str.w	r7, [r8, #8]
 8001b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b82:	f8d4 8000 	ldr.w	r8, [r4]
 8001b86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b8a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8001b8e:	4598      	cmp	r8, r3
 8001b90:	d05c      	beq.n	8001c4c <UART_SetConfig+0x1d8>
 8001b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b96:	4598      	cmp	r8, r3
 8001b98:	d058      	beq.n	8001c4c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b9a:	f7ff fd73 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8001b9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ba2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ba6:	6865      	ldr	r5, [r4, #4]
 8001ba8:	006d      	lsls	r5, r5, #1
 8001baa:	fbb0 f5f5 	udiv	r5, r0, r5
 8001bae:	4f81      	ldr	r7, [pc, #516]	; (8001db4 <UART_SetConfig+0x340>)
 8001bb0:	fba7 3505 	umull	r3, r5, r7, r5
 8001bb4:	096d      	lsrs	r5, r5, #5
 8001bb6:	012e      	lsls	r6, r5, #4
 8001bb8:	f7ff fd64 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8001bbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bc4:	6865      	ldr	r5, [r4, #4]
 8001bc6:	006d      	lsls	r5, r5, #1
 8001bc8:	fbb0 faf5 	udiv	sl, r0, r5
 8001bcc:	f7ff fd5a 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8001bd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bd8:	6865      	ldr	r5, [r4, #4]
 8001bda:	006d      	lsls	r5, r5, #1
 8001bdc:	fbb0 f5f5 	udiv	r5, r0, r5
 8001be0:	fba7 3505 	umull	r3, r5, r7, r5
 8001be4:	096d      	lsrs	r5, r5, #5
 8001be6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001bea:	fb09 a515 	mls	r5, r9, r5, sl
 8001bee:	00ed      	lsls	r5, r5, #3
 8001bf0:	3532      	adds	r5, #50	; 0x32
 8001bf2:	fba7 3505 	umull	r3, r5, r7, r5
 8001bf6:	096d      	lsrs	r5, r5, #5
 8001bf8:	006d      	lsls	r5, r5, #1
 8001bfa:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001bfe:	4435      	add	r5, r6
 8001c00:	f7ff fd40 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8001c04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c0c:	6866      	ldr	r6, [r4, #4]
 8001c0e:	0076      	lsls	r6, r6, #1
 8001c10:	fbb0 f6f6 	udiv	r6, r0, r6
 8001c14:	f7ff fd36 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8001c18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c20:	6863      	ldr	r3, [r4, #4]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c28:	fba7 2303 	umull	r2, r3, r7, r3
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	fb09 6913 	mls	r9, r9, r3, r6
 8001c32:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001c36:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001c3a:	fba7 3709 	umull	r3, r7, r7, r9
 8001c3e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001c42:	442f      	add	r7, r5
 8001c44:	f8c8 7008 	str.w	r7, [r8, #8]
 8001c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c4c:	f7ff fd2a 	bl	80016a4 <HAL_RCC_GetPCLK2Freq>
 8001c50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c58:	6865      	ldr	r5, [r4, #4]
 8001c5a:	006d      	lsls	r5, r5, #1
 8001c5c:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c60:	4f54      	ldr	r7, [pc, #336]	; (8001db4 <UART_SetConfig+0x340>)
 8001c62:	fba7 3505 	umull	r3, r5, r7, r5
 8001c66:	096d      	lsrs	r5, r5, #5
 8001c68:	012e      	lsls	r6, r5, #4
 8001c6a:	f7ff fd1b 	bl	80016a4 <HAL_RCC_GetPCLK2Freq>
 8001c6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c76:	6865      	ldr	r5, [r4, #4]
 8001c78:	006d      	lsls	r5, r5, #1
 8001c7a:	fbb0 faf5 	udiv	sl, r0, r5
 8001c7e:	f7ff fd11 	bl	80016a4 <HAL_RCC_GetPCLK2Freq>
 8001c82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c8a:	6865      	ldr	r5, [r4, #4]
 8001c8c:	006d      	lsls	r5, r5, #1
 8001c8e:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c92:	fba7 3505 	umull	r3, r5, r7, r5
 8001c96:	096d      	lsrs	r5, r5, #5
 8001c98:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c9c:	fb09 a515 	mls	r5, r9, r5, sl
 8001ca0:	00ed      	lsls	r5, r5, #3
 8001ca2:	3532      	adds	r5, #50	; 0x32
 8001ca4:	fba7 3505 	umull	r3, r5, r7, r5
 8001ca8:	096d      	lsrs	r5, r5, #5
 8001caa:	006d      	lsls	r5, r5, #1
 8001cac:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001cb0:	4435      	add	r5, r6
 8001cb2:	f7ff fcf7 	bl	80016a4 <HAL_RCC_GetPCLK2Freq>
 8001cb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cbe:	6866      	ldr	r6, [r4, #4]
 8001cc0:	0076      	lsls	r6, r6, #1
 8001cc2:	fbb0 f6f6 	udiv	r6, r0, r6
 8001cc6:	f7ff fced 	bl	80016a4 <HAL_RCC_GetPCLK2Freq>
 8001cca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cd2:	6863      	ldr	r3, [r4, #4]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cda:	fba7 2303 	umull	r2, r3, r7, r3
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	fb09 6913 	mls	r9, r9, r3, r6
 8001ce4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001ce8:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001cec:	fba7 3709 	umull	r3, r7, r7, r9
 8001cf0:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001cf4:	442f      	add	r7, r5
 8001cf6:	f8c8 7008 	str.w	r7, [r8, #8]
 8001cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001cfe:	f7ff fcd1 	bl	80016a4 <HAL_RCC_GetPCLK2Freq>
 8001d02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d0a:	6865      	ldr	r5, [r4, #4]
 8001d0c:	00ad      	lsls	r5, r5, #2
 8001d0e:	fbb0 f5f5 	udiv	r5, r0, r5
 8001d12:	4f28      	ldr	r7, [pc, #160]	; (8001db4 <UART_SetConfig+0x340>)
 8001d14:	fba7 3505 	umull	r3, r5, r7, r5
 8001d18:	096d      	lsrs	r5, r5, #5
 8001d1a:	012e      	lsls	r6, r5, #4
 8001d1c:	f7ff fcc2 	bl	80016a4 <HAL_RCC_GetPCLK2Freq>
 8001d20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d28:	6865      	ldr	r5, [r4, #4]
 8001d2a:	00ad      	lsls	r5, r5, #2
 8001d2c:	fbb0 faf5 	udiv	sl, r0, r5
 8001d30:	f7ff fcb8 	bl	80016a4 <HAL_RCC_GetPCLK2Freq>
 8001d34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d3c:	6865      	ldr	r5, [r4, #4]
 8001d3e:	00ad      	lsls	r5, r5, #2
 8001d40:	fbb0 f5f5 	udiv	r5, r0, r5
 8001d44:	fba7 3505 	umull	r3, r5, r7, r5
 8001d48:	096d      	lsrs	r5, r5, #5
 8001d4a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d4e:	fb09 a515 	mls	r5, r9, r5, sl
 8001d52:	012d      	lsls	r5, r5, #4
 8001d54:	3532      	adds	r5, #50	; 0x32
 8001d56:	fba7 3505 	umull	r3, r5, r7, r5
 8001d5a:	096d      	lsrs	r5, r5, #5
 8001d5c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001d60:	4435      	add	r5, r6
 8001d62:	f7ff fc9f 	bl	80016a4 <HAL_RCC_GetPCLK2Freq>
 8001d66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d6e:	6866      	ldr	r6, [r4, #4]
 8001d70:	00b6      	lsls	r6, r6, #2
 8001d72:	fbb0 f6f6 	udiv	r6, r0, r6
 8001d76:	f7ff fc95 	bl	80016a4 <HAL_RCC_GetPCLK2Freq>
 8001d7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d82:	6863      	ldr	r3, [r4, #4]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8a:	fba7 2303 	umull	r2, r3, r7, r3
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	fb09 6913 	mls	r9, r9, r3, r6
 8001d94:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001d98:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001d9c:	fba7 3709 	umull	r3, r7, r7, r9
 8001da0:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001da4:	442f      	add	r7, r5
 8001da6:	f8c8 7008 	str.w	r7, [r8, #8]
 8001daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dae:	bf00      	nop
 8001db0:	40011000 	.word	0x40011000
 8001db4:	51eb851f 	.word	0x51eb851f

08001db8 <HAL_UART_Init>:
  if(huart == NULL)
 8001db8:	b358      	cbz	r0, 8001e12 <HAL_UART_Init+0x5a>
{
 8001dba:	b510      	push	{r4, lr}
 8001dbc:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8001dbe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001dc2:	b30b      	cbz	r3, 8001e08 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001dc4:	2324      	movs	r3, #36	; 0x24
 8001dc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001dca:	6822      	ldr	r2, [r4, #0]
 8001dcc:	68d3      	ldr	r3, [r2, #12]
 8001dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001dd2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff fe4d 	bl	8001a74 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dda:	6822      	ldr	r2, [r4, #0]
 8001ddc:	6913      	ldr	r3, [r2, #16]
 8001dde:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001de2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001de4:	6822      	ldr	r2, [r4, #0]
 8001de6:	6953      	ldr	r3, [r2, #20]
 8001de8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001dec:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001dee:	6822      	ldr	r2, [r4, #0]
 8001df0:	68d3      	ldr	r3, [r2, #12]
 8001df2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001df6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df8:	2000      	movs	r0, #0
 8001dfa:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001e02:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001e06:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001e08:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001e0c:	f00a fc1a 	bl	800c644 <HAL_UART_MspInit>
 8001e10:	e7d8      	b.n	8001dc4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001e12:	2001      	movs	r0, #1
 8001e14:	4770      	bx	lr

08001e16 <HAL_UART_TxCpltCallback>:
{
 8001e16:	4770      	bx	lr

08001e18 <UART_EndTransmit_IT>:
{
 8001e18:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e1a:	6801      	ldr	r1, [r0, #0]
 8001e1c:	68cb      	ldr	r3, [r1, #12]
 8001e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e22:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e24:	2320      	movs	r3, #32
 8001e26:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001e2a:	f7ff fff4 	bl	8001e16 <HAL_UART_TxCpltCallback>
}
 8001e2e:	2000      	movs	r0, #0
 8001e30:	bd08      	pop	{r3, pc}

08001e32 <HAL_UART_RxCpltCallback>:
{
 8001e32:	4770      	bx	lr

08001e34 <UART_Receive_IT>:
{
 8001e34:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001e36:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b22      	cmp	r3, #34	; 0x22
 8001e3e:	d001      	beq.n	8001e44 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 8001e40:	2002      	movs	r0, #2
 8001e42:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e44:	6883      	ldr	r3, [r0, #8]
 8001e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4a:	d00f      	beq.n	8001e6c <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e4c:	6903      	ldr	r3, [r0, #16]
 8001e4e:	bb0b      	cbnz	r3, 8001e94 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e50:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	6282      	str	r2, [r0, #40]	; 0x28
 8001e56:	6802      	ldr	r2, [r0, #0]
 8001e58:	6852      	ldr	r2, [r2, #4]
 8001e5a:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8001e5c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001e66:	b1f3      	cbz	r3, 8001ea6 <UART_Receive_IT+0x72>
    return HAL_OK;
 8001e68:	2000      	movs	r0, #0
}
 8001e6a:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001e6c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e6e:	6903      	ldr	r3, [r0, #16]
 8001e70:	b943      	cbnz	r3, 8001e84 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e72:	6803      	ldr	r3, [r0, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e7a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8001e7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e7e:	3302      	adds	r3, #2
 8001e80:	6283      	str	r3, [r0, #40]	; 0x28
 8001e82:	e7eb      	b.n	8001e5c <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e84:	6803      	ldr	r3, [r0, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8001e8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e8e:	3301      	adds	r3, #1
 8001e90:	6283      	str	r3, [r0, #40]	; 0x28
 8001e92:	e7e3      	b.n	8001e5c <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e94:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001e96:	1c53      	adds	r3, r2, #1
 8001e98:	6283      	str	r3, [r0, #40]	; 0x28
 8001e9a:	6803      	ldr	r3, [r0, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea2:	7013      	strb	r3, [r2, #0]
 8001ea4:	e7da      	b.n	8001e5c <UART_Receive_IT+0x28>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ea6:	6802      	ldr	r2, [r0, #0]
 8001ea8:	68d3      	ldr	r3, [r2, #12]
 8001eaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001eae:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eb0:	6802      	ldr	r2, [r0, #0]
 8001eb2:	6953      	ldr	r3, [r2, #20]
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001ec0:	f7ff ffb7 	bl	8001e32 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	bd08      	pop	{r3, pc}

08001ec8 <HAL_UART_ErrorCallback>:
{
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_UART_IRQHandler>:
{
 8001ecc:	b510      	push	{r4, lr}
 8001ece:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ed0:	6802      	ldr	r2, [r0, #0]
 8001ed2:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ed4:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ed6:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8001ed8:	f013 000f 	ands.w	r0, r3, #15
 8001edc:	d105      	bne.n	8001eea <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ede:	f013 0f20 	tst.w	r3, #32
 8001ee2:	d002      	beq.n	8001eea <HAL_UART_IRQHandler+0x1e>
 8001ee4:	f011 0f20 	tst.w	r1, #32
 8001ee8:	d153      	bne.n	8001f92 <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d067      	beq.n	8001fbe <HAL_UART_IRQHandler+0xf2>
 8001eee:	f012 0201 	ands.w	r2, r2, #1
 8001ef2:	d102      	bne.n	8001efa <HAL_UART_IRQHandler+0x2e>
 8001ef4:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001ef8:	d061      	beq.n	8001fbe <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001efa:	f013 0f01 	tst.w	r3, #1
 8001efe:	d006      	beq.n	8001f0e <HAL_UART_IRQHandler+0x42>
 8001f00:	f411 7f80 	tst.w	r1, #256	; 0x100
 8001f04:	d003      	beq.n	8001f0e <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f06:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001f08:	f040 0001 	orr.w	r0, r0, #1
 8001f0c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f0e:	f013 0f04 	tst.w	r3, #4
 8001f12:	d004      	beq.n	8001f1e <HAL_UART_IRQHandler+0x52>
 8001f14:	b11a      	cbz	r2, 8001f1e <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f16:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001f18:	f040 0002 	orr.w	r0, r0, #2
 8001f1c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f1e:	f013 0f02 	tst.w	r3, #2
 8001f22:	d004      	beq.n	8001f2e <HAL_UART_IRQHandler+0x62>
 8001f24:	b11a      	cbz	r2, 8001f2e <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f26:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001f28:	f040 0004 	orr.w	r0, r0, #4
 8001f2c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f2e:	f013 0f08 	tst.w	r3, #8
 8001f32:	d004      	beq.n	8001f3e <HAL_UART_IRQHandler+0x72>
 8001f34:	b11a      	cbz	r2, 8001f3e <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f38:	f042 0208 	orr.w	r2, r2, #8
 8001f3c:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f40:	2a00      	cmp	r2, #0
 8001f42:	d048      	beq.n	8001fd6 <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f44:	f013 0f20 	tst.w	r3, #32
 8001f48:	d002      	beq.n	8001f50 <HAL_UART_IRQHandler+0x84>
 8001f4a:	f011 0f20 	tst.w	r1, #32
 8001f4e:	d124      	bne.n	8001f9a <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f58:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f5a:	f012 0f08 	tst.w	r2, #8
 8001f5e:	d100      	bne.n	8001f62 <HAL_UART_IRQHandler+0x96>
 8001f60:	b33b      	cbz	r3, 8001fb2 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff fd43 	bl	80019ee <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	695a      	ldr	r2, [r3, #20]
 8001f6c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001f70:	d01b      	beq.n	8001faa <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f78:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001f7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f7c:	b18b      	cbz	r3, 8001fa2 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	; (8001fe8 <HAL_UART_IRQHandler+0x11c>)
 8001f80:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f82:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001f84:	f7fe fb44 	bl	8000610 <HAL_DMA_Abort_IT>
 8001f88:	b328      	cbz	r0, 8001fd6 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001f8c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f8e:	4798      	blx	r3
 8001f90:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7ff ff4e 	bl	8001e34 <UART_Receive_IT>
      return;
 8001f98:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7ff ff4a 	bl	8001e34 <UART_Receive_IT>
 8001fa0:	e7d6      	b.n	8001f50 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f7ff ff90 	bl	8001ec8 <HAL_UART_ErrorCallback>
 8001fa8:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8001faa:	4620      	mov	r0, r4
 8001fac:	f7ff ff8c 	bl	8001ec8 <HAL_UART_ErrorCallback>
 8001fb0:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7ff ff88 	bl	8001ec8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001fbc:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fbe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001fc2:	d002      	beq.n	8001fca <HAL_UART_IRQHandler+0xfe>
 8001fc4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001fc8:	d106      	bne.n	8001fd8 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001fce:	d002      	beq.n	8001fd6 <HAL_UART_IRQHandler+0x10a>
 8001fd0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001fd4:	d104      	bne.n	8001fe0 <HAL_UART_IRQHandler+0x114>
 8001fd6:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff fd16 	bl	8001a0a <UART_Transmit_IT>
    return;
 8001fde:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f7ff ff19 	bl	8001e18 <UART_EndTransmit_IT>
    return;
 8001fe6:	e7f6      	b.n	8001fd6 <HAL_UART_IRQHandler+0x10a>
 8001fe8:	08001fed 	.word	0x08001fed

08001fec <UART_DMAAbortOnError>:
{
 8001fec:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001ff4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001ff6:	f7ff ff67 	bl	8001ec8 <HAL_UART_ErrorCallback>
 8001ffa:	bd08      	pop	{r3, pc}

08001ffc <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001ffc:	2884      	cmp	r0, #132	; 0x84
 8001ffe:	d001      	beq.n	8002004 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8002000:	3003      	adds	r0, #3
 8002002:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002004:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8002006:	4770      	bx	lr

08002008 <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002008:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 800200c:	3000      	adds	r0, #0
 800200e:	bf18      	it	ne
 8002010:	2001      	movne	r0, #1
 8002012:	4770      	bx	lr

08002014 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002014:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002016:	f001 fa65 	bl	80034e4 <vTaskStartScheduler>
  
  return osOK;
}
 800201a:	2000      	movs	r0, #0
 800201c:	bd08      	pop	{r3, pc}

0800201e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800201e:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8002020:	f7ff fff2 	bl	8002008 <inHandlerMode>
 8002024:	b910      	cbnz	r0, 800202c <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 8002026:	f001 faa3 	bl	8003570 <xTaskGetTickCount>
  }
}
 800202a:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 800202c:	f001 faa6 	bl	800357c <xTaskGetTickCountFromISR>
 8002030:	bd08      	pop	{r3, pc}

08002032 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002032:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002034:	b085      	sub	sp, #20
 8002036:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002038:	6844      	ldr	r4, [r0, #4]
 800203a:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800203c:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800203e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002042:	f7ff ffdb 	bl	8001ffc <makeFreeRtosPriority>
 8002046:	ab03      	add	r3, sp, #12
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	9000      	str	r0, [sp, #0]
 800204c:	463b      	mov	r3, r7
 800204e:	b2b2      	uxth	r2, r6
 8002050:	4629      	mov	r1, r5
 8002052:	4620      	mov	r0, r4
 8002054:	f001 fa14 	bl	8003480 <xTaskCreate>
 8002058:	2801      	cmp	r0, #1
 800205a:	d102      	bne.n	8002062 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800205c:	9803      	ldr	r0, [sp, #12]
}
 800205e:	b005      	add	sp, #20
 8002060:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8002062:	2000      	movs	r0, #0
 8002064:	e7fb      	b.n	800205e <osThreadCreate+0x2c>

08002066 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002066:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002068:	4603      	mov	r3, r0
 800206a:	b900      	cbnz	r0, 800206e <osDelay+0x8>
 800206c:	2301      	movs	r3, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f001 fb9a 	bl	80037a8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002074:	2000      	movs	r0, #0
 8002076:	bd08      	pop	{r3, pc}

08002078 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002078:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800207a:	2001      	movs	r0, #1
 800207c:	f000 fe76 	bl	8002d6c <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8002080:	bd08      	pop	{r3, pc}
	...

08002084 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002084:	b530      	push	{r4, r5, lr}
 8002086:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002088:	2300      	movs	r3, #0
 800208a:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800208c:	b360      	cbz	r0, 80020e8 <osMutexWait+0x64>
 800208e:	460c      	mov	r4, r1
 8002090:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8002092:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002096:	d00d      	beq.n	80020b4 <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8002098:	b901      	cbnz	r1, 800209c <osMutexWait+0x18>
  ticks = 0;
 800209a:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800209c:	f7ff ffb4 	bl	8002008 <inHandlerMode>
 80020a0:	b1b8      	cbz	r0, 80020d2 <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80020a2:	aa01      	add	r2, sp, #4
 80020a4:	2100      	movs	r1, #0
 80020a6:	4628      	mov	r0, r5
 80020a8:	f001 f810 	bl	80030cc <xQueueReceiveFromISR>
 80020ac:	2801      	cmp	r0, #1
 80020ae:	d004      	beq.n	80020ba <osMutexWait+0x36>
      return osErrorOS;
 80020b0:	20ff      	movs	r0, #255	; 0xff
 80020b2:	e017      	b.n	80020e4 <osMutexWait+0x60>
    ticks = portMAX_DELAY;
 80020b4:	f04f 34ff 	mov.w	r4, #4294967295
 80020b8:	e7f0      	b.n	800209c <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80020ba:	9b01      	ldr	r3, [sp, #4]
 80020bc:	b1b3      	cbz	r3, 80020ec <osMutexWait+0x68>
 80020be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <osMutexWait+0x70>)
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	f3bf 8f4f 	dsb	sy
 80020ca:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80020ce:	2000      	movs	r0, #0
 80020d0:	e008      	b.n	80020e4 <osMutexWait+0x60>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80020d2:	2300      	movs	r3, #0
 80020d4:	4622      	mov	r2, r4
 80020d6:	4619      	mov	r1, r3
 80020d8:	4628      	mov	r0, r5
 80020da:	f000 ff1f 	bl	8002f1c <xQueueGenericReceive>
 80020de:	2801      	cmp	r0, #1
 80020e0:	d006      	beq.n	80020f0 <osMutexWait+0x6c>
    return osErrorOS;
 80020e2:	20ff      	movs	r0, #255	; 0xff
}
 80020e4:	b003      	add	sp, #12
 80020e6:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 80020e8:	2080      	movs	r0, #128	; 0x80
 80020ea:	e7fb      	b.n	80020e4 <osMutexWait+0x60>
  return osOK;
 80020ec:	2000      	movs	r0, #0
 80020ee:	e7f9      	b.n	80020e4 <osMutexWait+0x60>
 80020f0:	2000      	movs	r0, #0
 80020f2:	e7f7      	b.n	80020e4 <osMutexWait+0x60>
 80020f4:	e000ed04 	.word	0xe000ed04

080020f8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80020f8:	b510      	push	{r4, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80020fe:	2300      	movs	r3, #0
 8002100:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 8002102:	f7ff ff81 	bl	8002008 <inHandlerMode>
 8002106:	b1a0      	cbz	r0, 8002132 <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002108:	a901      	add	r1, sp, #4
 800210a:	4620      	mov	r0, r4
 800210c:	f000 fea8 	bl	8002e60 <xQueueGiveFromISR>
 8002110:	2801      	cmp	r0, #1
 8002112:	d002      	beq.n	800211a <osMutexRelease+0x22>
      return osErrorOS;
 8002114:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8002116:	b002      	add	sp, #8
 8002118:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800211a:	9b01      	ldr	r3, [sp, #4]
 800211c:	b1ab      	cbz	r3, 800214a <osMutexRelease+0x52>
 800211e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <osMutexRelease+0x58>)
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	f3bf 8f4f 	dsb	sy
 800212a:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800212e:	2000      	movs	r0, #0
 8002130:	e7f1      	b.n	8002116 <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002132:	2300      	movs	r3, #0
 8002134:	461a      	mov	r2, r3
 8002136:	4619      	mov	r1, r3
 8002138:	4620      	mov	r0, r4
 800213a:	f000 fd47 	bl	8002bcc <xQueueGenericSend>
 800213e:	2801      	cmp	r0, #1
 8002140:	d001      	beq.n	8002146 <osMutexRelease+0x4e>
    result = osErrorOS;
 8002142:	20ff      	movs	r0, #255	; 0xff
 8002144:	e7e7      	b.n	8002116 <osMutexRelease+0x1e>
  osStatus result = osOK;
 8002146:	2000      	movs	r0, #0
 8002148:	e7e5      	b.n	8002116 <osMutexRelease+0x1e>
 800214a:	2000      	movs	r0, #0
 800214c:	e7e3      	b.n	8002116 <osMutexRelease+0x1e>
 800214e:	bf00      	nop
 8002150:	e000ed04 	.word	0xe000ed04

08002154 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002154:	b510      	push	{r4, lr}
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002156:	2901      	cmp	r1, #1
 8002158:	d10d      	bne.n	8002176 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 800215a:	2203      	movs	r2, #3
 800215c:	2100      	movs	r1, #0
 800215e:	2001      	movs	r0, #1
 8002160:	f000 fd10 	bl	8002b84 <xQueueGenericCreate>
 8002164:	4604      	mov	r4, r0
 8002166:	b120      	cbz	r0, 8002172 <osSemaphoreCreate+0x1e>
 8002168:	2300      	movs	r3, #0
 800216a:	461a      	mov	r2, r3
 800216c:	4619      	mov	r1, r3
 800216e:	f000 fd2d 	bl	8002bcc <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8002172:	4620      	mov	r0, r4
 8002174:	bd10      	pop	{r4, pc}
    return NULL;
 8002176:	2400      	movs	r4, #0
 8002178:	e7fb      	b.n	8002172 <osSemaphoreCreate+0x1e>
	...

0800217c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800217c:	b530      	push	{r4, r5, lr}
 800217e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002180:	2300      	movs	r3, #0
 8002182:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8002184:	b360      	cbz	r0, 80021e0 <osSemaphoreWait+0x64>
 8002186:	460c      	mov	r4, r1
 8002188:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800218a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800218e:	d00d      	beq.n	80021ac <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8002190:	b901      	cbnz	r1, 8002194 <osSemaphoreWait+0x18>
  ticks = 0;
 8002192:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002194:	f7ff ff38 	bl	8002008 <inHandlerMode>
 8002198:	b1b8      	cbz	r0, 80021ca <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800219a:	aa01      	add	r2, sp, #4
 800219c:	2100      	movs	r1, #0
 800219e:	4628      	mov	r0, r5
 80021a0:	f000 ff94 	bl	80030cc <xQueueReceiveFromISR>
 80021a4:	2801      	cmp	r0, #1
 80021a6:	d004      	beq.n	80021b2 <osSemaphoreWait+0x36>
      return osErrorOS;
 80021a8:	20ff      	movs	r0, #255	; 0xff
 80021aa:	e017      	b.n	80021dc <osSemaphoreWait+0x60>
    ticks = portMAX_DELAY;
 80021ac:	f04f 34ff 	mov.w	r4, #4294967295
 80021b0:	e7f0      	b.n	8002194 <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80021b2:	9b01      	ldr	r3, [sp, #4]
 80021b4:	b1b3      	cbz	r3, 80021e4 <osSemaphoreWait+0x68>
 80021b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <osSemaphoreWait+0x70>)
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	f3bf 8f4f 	dsb	sy
 80021c2:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80021c6:	2000      	movs	r0, #0
 80021c8:	e008      	b.n	80021dc <osSemaphoreWait+0x60>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80021ca:	2300      	movs	r3, #0
 80021cc:	4622      	mov	r2, r4
 80021ce:	4619      	mov	r1, r3
 80021d0:	4628      	mov	r0, r5
 80021d2:	f000 fea3 	bl	8002f1c <xQueueGenericReceive>
 80021d6:	2801      	cmp	r0, #1
 80021d8:	d006      	beq.n	80021e8 <osSemaphoreWait+0x6c>
    return osErrorOS;
 80021da:	20ff      	movs	r0, #255	; 0xff
}
 80021dc:	b003      	add	sp, #12
 80021de:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 80021e0:	2080      	movs	r0, #128	; 0x80
 80021e2:	e7fb      	b.n	80021dc <osSemaphoreWait+0x60>
  return osOK;
 80021e4:	2000      	movs	r0, #0
 80021e6:	e7f9      	b.n	80021dc <osSemaphoreWait+0x60>
 80021e8:	2000      	movs	r0, #0
 80021ea:	e7f7      	b.n	80021dc <osSemaphoreWait+0x60>
 80021ec:	e000ed04 	.word	0xe000ed04

080021f0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80021f0:	b510      	push	{r4, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 80021fa:	f7ff ff05 	bl	8002008 <inHandlerMode>
 80021fe:	b1a0      	cbz	r0, 800222a <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002200:	a901      	add	r1, sp, #4
 8002202:	4620      	mov	r0, r4
 8002204:	f000 fe2c 	bl	8002e60 <xQueueGiveFromISR>
 8002208:	2801      	cmp	r0, #1
 800220a:	d002      	beq.n	8002212 <osSemaphoreRelease+0x22>
      return osErrorOS;
 800220c:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 800220e:	b002      	add	sp, #8
 8002210:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002212:	9b01      	ldr	r3, [sp, #4]
 8002214:	b1ab      	cbz	r3, 8002242 <osSemaphoreRelease+0x52>
 8002216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <osSemaphoreRelease+0x58>)
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	f3bf 8f4f 	dsb	sy
 8002222:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002226:	2000      	movs	r0, #0
 8002228:	e7f1      	b.n	800220e <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800222a:	2300      	movs	r3, #0
 800222c:	461a      	mov	r2, r3
 800222e:	4619      	mov	r1, r3
 8002230:	4620      	mov	r0, r4
 8002232:	f000 fccb 	bl	8002bcc <xQueueGenericSend>
 8002236:	2801      	cmp	r0, #1
 8002238:	d001      	beq.n	800223e <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 800223a:	20ff      	movs	r0, #255	; 0xff
 800223c:	e7e7      	b.n	800220e <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 800223e:	2000      	movs	r0, #0
 8002240:	e7e5      	b.n	800220e <osSemaphoreRelease+0x1e>
 8002242:	2000      	movs	r0, #0
 8002244:	e7e3      	b.n	800220e <osSemaphoreRelease+0x1e>
 8002246:	bf00      	nop
 8002248:	e000ed04 	.word	0xe000ed04

0800224c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800224c:	b510      	push	{r4, lr}
 800224e:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8002250:	f7ff feda 	bl	8002008 <inHandlerMode>
 8002254:	b108      	cbz	r0, 800225a <osSemaphoreDelete+0xe>
    return osErrorISR;
 8002256:	2082      	movs	r0, #130	; 0x82
  }

  vSemaphoreDelete(semaphore_id);

  return osOK; 
}
 8002258:	bd10      	pop	{r4, pc}
  vSemaphoreDelete(semaphore_id);
 800225a:	4620      	mov	r0, r4
 800225c:	f000 ffc6 	bl	80031ec <vQueueDelete>
  return osOK; 
 8002260:	2000      	movs	r0, #0
 8002262:	bd10      	pop	{r4, pc}

08002264 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002264:	b508      	push	{r3, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002266:	2200      	movs	r2, #0
 8002268:	6841      	ldr	r1, [r0, #4]
 800226a:	6800      	ldr	r0, [r0, #0]
 800226c:	f000 fc8a 	bl	8002b84 <xQueueGenericCreate>
#endif
}
 8002270:	bd08      	pop	{r3, pc}
	...

08002274 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002274:	b530      	push	{r4, r5, lr}
 8002276:	b085      	sub	sp, #20
 8002278:	4604      	mov	r4, r0
 800227a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800227c:	2300      	movs	r3, #0
 800227e:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8002280:	4615      	mov	r5, r2
 8002282:	b902      	cbnz	r2, 8002286 <osMessagePut+0x12>
    ticks = 1;
 8002284:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8002286:	f7ff febf 	bl	8002008 <inHandlerMode>
 800228a:	b1a8      	cbz	r0, 80022b8 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800228c:	2300      	movs	r3, #0
 800228e:	aa03      	add	r2, sp, #12
 8002290:	a901      	add	r1, sp, #4
 8002292:	4620      	mov	r0, r4
 8002294:	f000 fd75 	bl	8002d82 <xQueueGenericSendFromISR>
 8002298:	2801      	cmp	r0, #1
 800229a:	d001      	beq.n	80022a0 <osMessagePut+0x2c>
      return osErrorOS;
 800229c:	20ff      	movs	r0, #255	; 0xff
 800229e:	e014      	b.n	80022ca <osMessagePut+0x56>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80022a0:	9b03      	ldr	r3, [sp, #12]
 80022a2:	b1a3      	cbz	r3, 80022ce <osMessagePut+0x5a>
 80022a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <osMessagePut+0x64>)
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80022b4:	2000      	movs	r0, #0
 80022b6:	e008      	b.n	80022ca <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80022b8:	2300      	movs	r3, #0
 80022ba:	462a      	mov	r2, r5
 80022bc:	a901      	add	r1, sp, #4
 80022be:	4620      	mov	r0, r4
 80022c0:	f000 fc84 	bl	8002bcc <xQueueGenericSend>
 80022c4:	2801      	cmp	r0, #1
 80022c6:	d004      	beq.n	80022d2 <osMessagePut+0x5e>
      return osErrorOS;
 80022c8:	20ff      	movs	r0, #255	; 0xff
}
 80022ca:	b005      	add	sp, #20
 80022cc:	bd30      	pop	{r4, r5, pc}
  return osOK;
 80022ce:	2000      	movs	r0, #0
 80022d0:	e7fb      	b.n	80022ca <osMessagePut+0x56>
 80022d2:	2000      	movs	r0, #0
 80022d4:	e7f9      	b.n	80022ca <osMessagePut+0x56>
 80022d6:	bf00      	nop
 80022d8:	e000ed04 	.word	0xe000ed04

080022dc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80022e2:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 80022e8:	b1f9      	cbz	r1, 800232a <osMessageGet+0x4e>
 80022ea:	460d      	mov	r5, r1
 80022ec:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 80022f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80022f6:	d021      	beq.n	800233c <osMessageGet+0x60>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 80022f8:	b902      	cbnz	r2, 80022fc <osMessageGet+0x20>
  ticks = 0;
 80022fa:	461e      	mov	r6, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80022fc:	f7ff fe84 	bl	8002008 <inHandlerMode>
 8002300:	b310      	cbz	r0, 8002348 <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002302:	aa03      	add	r2, sp, #12
 8002304:	a901      	add	r1, sp, #4
 8002306:	4628      	mov	r0, r5
 8002308:	f000 fee0 	bl	80030cc <xQueueReceiveFromISR>
 800230c:	2801      	cmp	r0, #1
 800230e:	d018      	beq.n	8002342 <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8002310:	2300      	movs	r3, #0
 8002312:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002314:	9b03      	ldr	r3, [sp, #12]
 8002316:	b313      	cbz	r3, 800235e <osMessageGet+0x82>
 8002318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <osMessageGet+0x9c>)
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	e019      	b.n	800235e <osMessageGet+0x82>
    event.status = osErrorParameter;
 800232a:	ab04      	add	r3, sp, #16
 800232c:	2280      	movs	r2, #128	; 0x80
 800232e:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8002332:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800233a:	e014      	b.n	8002366 <osMessageGet+0x8a>
    ticks = portMAX_DELAY;
 800233c:	f04f 36ff 	mov.w	r6, #4294967295
 8002340:	e7dc      	b.n	80022fc <osMessageGet+0x20>
      event.status = osEventMessage;
 8002342:	2310      	movs	r3, #16
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	e7e5      	b.n	8002314 <osMessageGet+0x38>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002348:	2300      	movs	r3, #0
 800234a:	4632      	mov	r2, r6
 800234c:	a901      	add	r1, sp, #4
 800234e:	4628      	mov	r0, r5
 8002350:	f000 fde4 	bl	8002f1c <xQueueGenericReceive>
 8002354:	2801      	cmp	r0, #1
 8002356:	d009      	beq.n	800236c <osMessageGet+0x90>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002358:	b95e      	cbnz	r6, 8002372 <osMessageGet+0x96>
 800235a:	2300      	movs	r3, #0
 800235c:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 800235e:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 8002362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002366:	4620      	mov	r0, r4
 8002368:	b004      	add	sp, #16
 800236a:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 800236c:	2310      	movs	r3, #16
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	e7f5      	b.n	800235e <osMessageGet+0x82>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002372:	2340      	movs	r3, #64	; 0x40
 8002374:	e7f2      	b.n	800235c <osMessageGet+0x80>
 8002376:	bf00      	nop
 8002378:	e000ed04 	.word	0xe000ed04

0800237c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800237c:	b510      	push	{r4, lr}
 800237e:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8002380:	f7ff fe42 	bl	8002008 <inHandlerMode>
 8002384:	b918      	cbnz	r0, 800238e <osMessageWaiting+0x12>
    return uxQueueMessagesWaitingFromISR(queue_id);
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8002386:	4620      	mov	r0, r4
 8002388:	f000 fefb 	bl	8003182 <uxQueueMessagesWaiting>
  }
}
 800238c:	bd10      	pop	{r4, pc}
    return uxQueueMessagesWaitingFromISR(queue_id);
 800238e:	4620      	mov	r0, r4
 8002390:	f000 ff0a 	bl	80031a8 <uxQueueMessagesWaitingFromISR>
 8002394:	bd10      	pop	{r4, pc}

08002396 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8002396:	b510      	push	{r4, lr}
 8002398:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 800239a:	f7ff fe35 	bl	8002008 <inHandlerMode>
 800239e:	b108      	cbz	r0, 80023a4 <osMessageDelete+0xe>
    return osErrorISR;
 80023a0:	2082      	movs	r0, #130	; 0x82
  }

  vQueueDelete(queue_id);

  return osOK; 
}
 80023a2:	bd10      	pop	{r4, pc}
  vQueueDelete(queue_id);
 80023a4:	4620      	mov	r0, r4
 80023a6:	f000 ff21 	bl	80031ec <vQueueDelete>
  return osOK; 
 80023aa:	2000      	movs	r0, #0
 80023ac:	bd10      	pop	{r4, pc}

080023ae <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ae:	f100 0308 	add.w	r3, r0, #8
 80023b2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ba:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023bc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	6003      	str	r3, [r0, #0]
 80023c2:	4770      	bx	lr

080023c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	6103      	str	r3, [r0, #16]
 80023c8:	4770      	bx	lr

080023ca <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80023ca:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023cc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023d6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023d8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80023da:	6803      	ldr	r3, [r0, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	6003      	str	r3, [r0, #0]
 80023e0:	4770      	bx	lr

080023e2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023e2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023e4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80023ea:	d002      	beq.n	80023f2 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ec:	f100 0208 	add.w	r2, r0, #8
 80023f0:	e002      	b.n	80023f8 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 80023f2:	6902      	ldr	r2, [r0, #16]
 80023f4:	e004      	b.n	8002400 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f6:	461a      	mov	r2, r3
 80023f8:	6853      	ldr	r3, [r2, #4]
 80023fa:	681c      	ldr	r4, [r3, #0]
 80023fc:	42a5      	cmp	r5, r4
 80023fe:	d2fa      	bcs.n	80023f6 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002400:	6853      	ldr	r3, [r2, #4]
 8002402:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002404:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002406:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002408:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800240a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800240c:	6803      	ldr	r3, [r0, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	6003      	str	r3, [r0, #0]
}
 8002412:	bc30      	pop	{r4, r5}
 8002414:	4770      	bx	lr

08002416 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002416:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002418:	6842      	ldr	r2, [r0, #4]
 800241a:	6881      	ldr	r1, [r0, #8]
 800241c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800241e:	6882      	ldr	r2, [r0, #8]
 8002420:	6841      	ldr	r1, [r0, #4]
 8002422:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	4290      	cmp	r0, r2
 8002428:	d005      	beq.n	8002436 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800242a:	2200      	movs	r2, #0
 800242c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	3801      	subs	r0, #1
 8002432:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002434:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002436:	6882      	ldr	r2, [r0, #8]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	e7f6      	b.n	800242a <uxListRemove+0x14>

0800243c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <prvTaskExitError+0x30>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d008      	beq.n	8002458 <prvTaskExitError+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	e7fe      	b.n	8002456 <prvTaskExitError+0x1a>
 8002458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245c:	f383 8811 	msr	BASEPRI, r3
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	e7fe      	b.n	8002468 <prvTaskExitError+0x2c>
 800246a:	bf00      	nop
 800246c:	20000004 	.word	0x20000004

08002470 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002470:	4806      	ldr	r0, [pc, #24]	; (800248c <prvPortStartFirstTask+0x1c>)
 8002472:	6800      	ldr	r0, [r0, #0]
 8002474:	6800      	ldr	r0, [r0, #0]
 8002476:	f380 8808 	msr	MSP, r0
 800247a:	b662      	cpsie	i
 800247c:	b661      	cpsie	f
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	f3bf 8f6f 	isb	sy
 8002486:	df00      	svc	0
 8002488:	bf00      	nop
 800248a:	0000      	.short	0x0000
 800248c:	e000ed08 	.word	0xe000ed08

08002490 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002490:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80024a0 <vPortEnableVFP+0x10>
 8002494:	6801      	ldr	r1, [r0, #0]
 8002496:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800249a:	6001      	str	r1, [r0, #0]
 800249c:	4770      	bx	lr
 800249e:	0000      	.short	0x0000
 80024a0:	e000ed88 	.word	0xe000ed88

080024a4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80024a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024a8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80024ac:	f021 0101 	bic.w	r1, r1, #1
 80024b0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <pxPortInitialiseStack+0x28>)
 80024b6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80024ba:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80024be:	f06f 0302 	mvn.w	r3, #2
 80024c2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80024c6:	3844      	subs	r0, #68	; 0x44
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	0800243d 	.word	0x0800243d

080024d0 <SVC_Handler>:
	__asm volatile (
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <pxCurrentTCBConst2>)
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	6808      	ldr	r0, [r1, #0]
 80024d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024da:	f380 8809 	msr	PSP, r0
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f04f 0000 	mov.w	r0, #0
 80024e6:	f380 8811 	msr	BASEPRI, r0
 80024ea:	4770      	bx	lr
 80024ec:	f3af 8000 	nop.w

080024f0 <pxCurrentTCBConst2>:
 80024f0:	20003c50 	.word	0x20003c50

080024f4 <vPortEnterCritical>:
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002504:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <vPortEnterCritical+0x3c>)
 8002506:	6813      	ldr	r3, [r2, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800250c:	2b01      	cmp	r3, #1
 800250e:	d10d      	bne.n	800252c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <vPortEnterCritical+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002518:	d008      	beq.n	800252c <vPortEnterCritical+0x38>
 800251a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251e:	f383 8811 	msr	BASEPRI, r3
 8002522:	f3bf 8f6f 	isb	sy
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	e7fe      	b.n	800252a <vPortEnterCritical+0x36>
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000004 	.word	0x20000004
 8002534:	e000ed04 	.word	0xe000ed04

08002538 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <vPortExitCritical+0x28>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b943      	cbnz	r3, 8002550 <vPortExitCritical+0x18>
 800253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	e7fe      	b.n	800254e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002550:	3b01      	subs	r3, #1
 8002552:	4a03      	ldr	r2, [pc, #12]	; (8002560 <vPortExitCritical+0x28>)
 8002554:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002556:	b90b      	cbnz	r3, 800255c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000004 	.word	0x20000004
	...

08002570 <PendSV_Handler>:
	__asm volatile
 8002570:	f3ef 8009 	mrs	r0, PSP
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <pxCurrentTCBConst>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	f01e 0f10 	tst.w	lr, #16
 8002580:	bf08      	it	eq
 8002582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800258a:	6010      	str	r0, [r2, #0]
 800258c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002594:	f380 8811 	msr	BASEPRI, r0
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f001 f96c 	bl	800387c <vTaskSwitchContext>
 80025a4:	f04f 0000 	mov.w	r0, #0
 80025a8:	f380 8811 	msr	BASEPRI, r0
 80025ac:	bc08      	pop	{r3}
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	6808      	ldr	r0, [r1, #0]
 80025b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b6:	f01e 0f10 	tst.w	lr, #16
 80025ba:	bf08      	it	eq
 80025bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80025c0:	f380 8809 	msr	PSP, r0
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	f3af 8000 	nop.w

080025d0 <pxCurrentTCBConst>:
 80025d0:	20003c50 	.word	0x20003c50

080025d4 <SysTick_Handler>:
{
 80025d4:	b508      	push	{r3, lr}
	__asm volatile
 80025d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80025e6:	f000 ffd1 	bl	800358c <xTaskIncrementTick>
 80025ea:	b118      	cbz	r0, 80025f4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80025ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f0:	4b02      	ldr	r3, [pc, #8]	; (80025fc <SysTick_Handler+0x28>)
 80025f2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80025f4:	2300      	movs	r3, #0
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	bd08      	pop	{r3, pc}
 80025fc:	e000ed04 	.word	0xe000ed04

08002600 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <vPortSetupTimerInterrupt+0x1c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a06      	ldr	r2, [pc, #24]	; (8002620 <vPortSetupTimerInterrupt+0x20>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	3b01      	subs	r3, #1
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <vPortSetupTimerInterrupt+0x24>)
 8002610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002612:	2207      	movs	r2, #7
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <vPortSetupTimerInterrupt+0x28>)
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000010 	.word	0x20000010
 8002620:	10624dd3 	.word	0x10624dd3
 8002624:	e000e014 	.word	0xe000e014
 8002628:	e000e010 	.word	0xe000e010

0800262c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800262c:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <xPortStartScheduler+0xc8>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <xPortStartScheduler+0xcc>)
 8002632:	429a      	cmp	r2, r3
 8002634:	d01a      	beq.n	800266c <xPortStartScheduler+0x40>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002636:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <xPortStartScheduler+0xc8>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <xPortStartScheduler+0xd0>)
 800263c:	429a      	cmp	r2, r3
 800263e:	d01e      	beq.n	800267e <xPortStartScheduler+0x52>
{
 8002640:	b500      	push	{lr}
 8002642:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002644:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <xPortStartScheduler+0xd4>)
 8002646:	781a      	ldrb	r2, [r3, #0]
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800264c:	22ff      	movs	r2, #255	; 0xff
 800264e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002658:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800265c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002660:	4a28      	ldr	r2, [pc, #160]	; (8002704 <xPortStartScheduler+0xd8>)
 8002662:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002664:	2207      	movs	r2, #7
 8002666:	4b28      	ldr	r3, [pc, #160]	; (8002708 <xPortStartScheduler+0xdc>)
 8002668:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800266a:	e01b      	b.n	80026a4 <xPortStartScheduler+0x78>
	__asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	e7fe      	b.n	800267c <xPortStartScheduler+0x50>
 800267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002682:	f383 8811 	msr	BASEPRI, r3
 8002686:	f3bf 8f6f 	isb	sy
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	e7fe      	b.n	800268e <xPortStartScheduler+0x62>
			ulMaxPRIGROUPValue--;
 8002690:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <xPortStartScheduler+0xdc>)
 8002692:	6813      	ldr	r3, [r2, #0]
 8002694:	3b01      	subs	r3, #1
 8002696:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002698:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80026a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80026ac:	d1f0      	bne.n	8002690 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80026ae:	4a16      	ldr	r2, [pc, #88]	; (8002708 <xPortStartScheduler+0xdc>)
 80026b0:	6813      	ldr	r3, [r2, #0]
 80026b2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80026b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026b8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80026ba:	9b01      	ldr	r3, [sp, #4]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	4a10      	ldr	r2, [pc, #64]	; (8002700 <xPortStartScheduler+0xd4>)
 80026c0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <xPortStartScheduler+0xe0>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80026ca:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80026d2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80026d4:	f7ff ff94 	bl	8002600 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80026d8:	2200      	movs	r2, #0
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <xPortStartScheduler+0xe4>)
 80026dc:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80026de:	f7ff fed7 	bl	8002490 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80026e2:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <xPortStartScheduler+0xe8>)
 80026e4:	6813      	ldr	r3, [r2, #0]
 80026e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80026ea:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80026ec:	f7ff fec0 	bl	8002470 <prvPortStartFirstTask>
	prvTaskExitError();
 80026f0:	f7ff fea4 	bl	800243c <prvTaskExitError>
 80026f4:	e000ed00 	.word	0xe000ed00
 80026f8:	410fc271 	.word	0x410fc271
 80026fc:	410fc270 	.word	0x410fc270
 8002700:	e000e400 	.word	0xe000e400
 8002704:	20000030 	.word	0x20000030
 8002708:	20000034 	.word	0x20000034
 800270c:	e000ed20 	.word	0xe000ed20
 8002710:	20000004 	.word	0x20000004
 8002714:	e000ef34 	.word	0xe000ef34

08002718 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002718:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d90f      	bls.n	8002740 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002720:	4a10      	ldr	r2, [pc, #64]	; (8002764 <vPortValidateInterruptPriority+0x4c>)
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002726:	4a10      	ldr	r2, [pc, #64]	; (8002768 <vPortValidateInterruptPriority+0x50>)
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	4293      	cmp	r3, r2
 800272c:	d208      	bcs.n	8002740 <vPortValidateInterruptPriority+0x28>
 800272e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002732:	f383 8811 	msr	BASEPRI, r3
 8002736:	f3bf 8f6f 	isb	sy
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	e7fe      	b.n	800273e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <vPortValidateInterruptPriority+0x54>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002748:	4a09      	ldr	r2, [pc, #36]	; (8002770 <vPortValidateInterruptPriority+0x58>)
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	4293      	cmp	r3, r2
 800274e:	d908      	bls.n	8002762 <vPortValidateInterruptPriority+0x4a>
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	e7fe      	b.n	8002760 <vPortValidateInterruptPriority+0x48>
 8002762:	4770      	bx	lr
 8002764:	e000e3f0 	.word	0xe000e3f0
 8002768:	20000030 	.word	0x20000030
 800276c:	e000ed0c 	.word	0xe000ed0c
 8002770:	20000034 	.word	0x20000034

08002774 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002774:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002776:	f012 0f07 	tst.w	r2, #7
 800277a:	d01e      	beq.n	80027ba <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800277c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800277e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002782:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8002786:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002788:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800278a:	480e      	ldr	r0, [pc, #56]	; (80027c4 <prvHeapInit+0x50>)
 800278c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800278e:	2100      	movs	r1, #0
 8002790:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002792:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002794:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002796:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800279a:	480b      	ldr	r0, [pc, #44]	; (80027c8 <prvHeapInit+0x54>)
 800279c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800279e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80027a0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80027a2:	1a99      	subs	r1, r3, r2
 80027a4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80027a6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <prvHeapInit+0x58>)
 80027aa:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <prvHeapInit+0x5c>)
 80027ae:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80027b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <prvHeapInit+0x60>)
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80027be:	e7e4      	b.n	800278a <prvHeapInit+0x16>
 80027c0:	2000003c 	.word	0x2000003c
 80027c4:	20003c48 	.word	0x20003c48
 80027c8:	20000038 	.word	0x20000038
 80027cc:	20003c44 	.word	0x20003c44
 80027d0:	20003c40 	.word	0x20003c40
 80027d4:	20003c3c 	.word	0x20003c3c

080027d8 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80027d8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <prvInsertBlockIntoFreeList+0x50>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4282      	cmp	r2, r0
 80027e0:	d31b      	bcc.n	800281a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	185c      	adds	r4, r3, r1
 80027e6:	42a0      	cmp	r0, r4
 80027e8:	d103      	bne.n	80027f2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80027ea:	6840      	ldr	r0, [r0, #4]
 80027ec:	4401      	add	r1, r0
 80027ee:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80027f0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027f2:	6841      	ldr	r1, [r0, #4]
 80027f4:	1844      	adds	r4, r0, r1
 80027f6:	42a2      	cmp	r2, r4
 80027f8:	d113      	bne.n	8002822 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80027fa:	4c0c      	ldr	r4, [pc, #48]	; (800282c <prvInsertBlockIntoFreeList+0x54>)
 80027fc:	6824      	ldr	r4, [r4, #0]
 80027fe:	42a2      	cmp	r2, r4
 8002800:	d00d      	beq.n	800281e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002802:	6852      	ldr	r2, [r2, #4]
 8002804:	4411      	add	r1, r2
 8002806:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800280e:	4298      	cmp	r0, r3
 8002810:	d000      	beq.n	8002814 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002812:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002814:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002818:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800281a:	4613      	mov	r3, r2
 800281c:	e7de      	b.n	80027dc <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800281e:	6004      	str	r4, [r0, #0]
 8002820:	e7f5      	b.n	800280e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002822:	6002      	str	r2, [r0, #0]
 8002824:	e7f3      	b.n	800280e <prvInsertBlockIntoFreeList+0x36>
 8002826:	bf00      	nop
 8002828:	20003c48 	.word	0x20003c48
 800282c:	20000038 	.word	0x20000038

08002830 <pvPortMalloc>:
{
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002834:	f000 fe94 	bl	8003560 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002838:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <pvPortMalloc+0xf4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	b1bb      	cbz	r3, 800286e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <pvPortMalloc+0xf8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	421c      	tst	r4, r3
 8002844:	d163      	bne.n	800290e <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8002846:	b1ac      	cbz	r4, 8002874 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8002848:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800284a:	f014 0f07 	tst.w	r4, #7
 800284e:	d011      	beq.n	8002874 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002850:	f024 0407 	bic.w	r4, r4, #7
 8002854:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002856:	f004 0307 	and.w	r3, r4, #7
 800285a:	b15b      	cbz	r3, 8002874 <pvPortMalloc+0x44>
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	e7fe      	b.n	800286c <pvPortMalloc+0x3c>
			prvHeapInit();
 800286e:	f7ff ff81 	bl	8002774 <prvHeapInit>
 8002872:	e7e4      	b.n	800283e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002874:	2c00      	cmp	r4, #0
 8002876:	d04c      	beq.n	8002912 <pvPortMalloc+0xe2>
 8002878:	4b2c      	ldr	r3, [pc, #176]	; (800292c <pvPortMalloc+0xfc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	429c      	cmp	r4, r3
 800287e:	d84a      	bhi.n	8002916 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <pvPortMalloc+0x100>)
 8002882:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002884:	e001      	b.n	800288a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8002886:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8002888:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800288a:	686a      	ldr	r2, [r5, #4]
 800288c:	4294      	cmp	r4, r2
 800288e:	d902      	bls.n	8002896 <pvPortMalloc+0x66>
 8002890:	682a      	ldr	r2, [r5, #0]
 8002892:	2a00      	cmp	r2, #0
 8002894:	d1f7      	bne.n	8002886 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8002896:	4a23      	ldr	r2, [pc, #140]	; (8002924 <pvPortMalloc+0xf4>)
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	4295      	cmp	r5, r2
 800289c:	d03d      	beq.n	800291a <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800289e:	681e      	ldr	r6, [r3, #0]
 80028a0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80028a2:	682a      	ldr	r2, [r5, #0]
 80028a4:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80028a6:	686b      	ldr	r3, [r5, #4]
 80028a8:	1b1b      	subs	r3, r3, r4
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d910      	bls.n	80028d0 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80028ae:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028b0:	f010 0f07 	tst.w	r0, #7
 80028b4:	d008      	beq.n	80028c8 <pvPortMalloc+0x98>
 80028b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	e7fe      	b.n	80028c6 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028c8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80028ca:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80028cc:	f7ff ff84 	bl	80027d8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028d0:	686a      	ldr	r2, [r5, #4]
 80028d2:	4916      	ldr	r1, [pc, #88]	; (800292c <pvPortMalloc+0xfc>)
 80028d4:	680b      	ldr	r3, [r1, #0]
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028da:	4916      	ldr	r1, [pc, #88]	; (8002934 <pvPortMalloc+0x104>)
 80028dc:	6809      	ldr	r1, [r1, #0]
 80028de:	428b      	cmp	r3, r1
 80028e0:	d201      	bcs.n	80028e6 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028e2:	4914      	ldr	r1, [pc, #80]	; (8002934 <pvPortMalloc+0x104>)
 80028e4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <pvPortMalloc+0xf8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80028f2:	f000 fedb 	bl	80036ac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80028f6:	f016 0f07 	tst.w	r6, #7
 80028fa:	d010      	beq.n	800291e <pvPortMalloc+0xee>
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	e7fe      	b.n	800290c <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 800290e:	2600      	movs	r6, #0
 8002910:	e7ef      	b.n	80028f2 <pvPortMalloc+0xc2>
 8002912:	2600      	movs	r6, #0
 8002914:	e7ed      	b.n	80028f2 <pvPortMalloc+0xc2>
 8002916:	2600      	movs	r6, #0
 8002918:	e7eb      	b.n	80028f2 <pvPortMalloc+0xc2>
 800291a:	2600      	movs	r6, #0
 800291c:	e7e9      	b.n	80028f2 <pvPortMalloc+0xc2>
}
 800291e:	4630      	mov	r0, r6
 8002920:	bd70      	pop	{r4, r5, r6, pc}
 8002922:	bf00      	nop
 8002924:	20000038 	.word	0x20000038
 8002928:	20003c3c 	.word	0x20003c3c
 800292c:	20003c40 	.word	0x20003c40
 8002930:	20003c48 	.word	0x20003c48
 8002934:	20003c44 	.word	0x20003c44

08002938 <vPortFree>:
	if( pv != NULL )
 8002938:	b380      	cbz	r0, 800299c <vPortFree+0x64>
{
 800293a:	b538      	push	{r3, r4, r5, lr}
 800293c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800293e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002942:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8002946:	4916      	ldr	r1, [pc, #88]	; (80029a0 <vPortFree+0x68>)
 8002948:	6809      	ldr	r1, [r1, #0]
 800294a:	420a      	tst	r2, r1
 800294c:	d108      	bne.n	8002960 <vPortFree+0x28>
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	e7fe      	b.n	800295e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002960:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8002964:	b140      	cbz	r0, 8002978 <vPortFree+0x40>
 8002966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296a:	f383 8811 	msr	BASEPRI, r3
 800296e:	f3bf 8f6f 	isb	sy
 8002972:	f3bf 8f4f 	dsb	sy
 8002976:	e7fe      	b.n	8002976 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002978:	ea22 0201 	bic.w	r2, r2, r1
 800297c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8002980:	f000 fdee 	bl	8003560 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002984:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002988:	4a06      	ldr	r2, [pc, #24]	; (80029a4 <vPortFree+0x6c>)
 800298a:	6813      	ldr	r3, [r2, #0]
 800298c:	440b      	add	r3, r1
 800298e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002990:	4628      	mov	r0, r5
 8002992:	f7ff ff21 	bl	80027d8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8002996:	f000 fe89 	bl	80036ac <xTaskResumeAll>
 800299a:	bd38      	pop	{r3, r4, r5, pc}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20003c3c 	.word	0x20003c3c
 80029a4:	20003c40 	.word	0x20003c40

080029a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80029a8:	b510      	push	{r4, lr}
 80029aa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029ac:	f7ff fda2 	bl	80024f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80029b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d004      	beq.n	80029c2 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80029b8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80029ba:	f7ff fdbd 	bl	8002538 <vPortExitCritical>

	return xReturn;
}
 80029be:	4620      	mov	r0, r4
 80029c0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80029c2:	2401      	movs	r4, #1
 80029c4:	e7f9      	b.n	80029ba <prvIsQueueFull+0x12>

080029c6 <prvIsQueueEmpty>:
{
 80029c6:	b510      	push	{r4, lr}
 80029c8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80029ca:	f7ff fd93 	bl	80024f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80029ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029d0:	b123      	cbz	r3, 80029dc <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 80029d2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80029d4:	f7ff fdb0 	bl	8002538 <vPortExitCritical>
}
 80029d8:	4620      	mov	r0, r4
 80029da:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80029dc:	2401      	movs	r4, #1
 80029de:	e7f9      	b.n	80029d4 <prvIsQueueEmpty+0xe>

080029e0 <prvCopyDataToQueue>:
{
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	4604      	mov	r4, r0
 80029e4:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029e6:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029e8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80029ea:	b94a      	cbnz	r2, 8002a00 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029ec:	6803      	ldr	r3, [r0, #0]
 80029ee:	bb53      	cbnz	r3, 8002a46 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80029f0:	6840      	ldr	r0, [r0, #4]
 80029f2:	f001 f8ad 	bl	8003b50 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80029fa:	3501      	adds	r5, #1
 80029fc:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80029fe:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002a00:	b96e      	cbnz	r6, 8002a1e <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002a02:	6880      	ldr	r0, [r0, #8]
 8002a04:	f009 fed7 	bl	800c7b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002a08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a0a:	68a3      	ldr	r3, [r4, #8]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a10:	6862      	ldr	r2, [r4, #4]
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d319      	bcc.n	8002a4a <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	e7ed      	b.n	80029fa <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a1e:	68c0      	ldr	r0, [r0, #12]
 8002a20:	f009 fec9 	bl	800c7b6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002a24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a26:	425b      	negs	r3, r3
 8002a28:	68e2      	ldr	r2, [r4, #12]
 8002a2a:	441a      	add	r2, r3
 8002a2c:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a2e:	6821      	ldr	r1, [r4, #0]
 8002a30:	428a      	cmp	r2, r1
 8002a32:	d202      	bcs.n	8002a3a <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002a34:	6862      	ldr	r2, [r4, #4]
 8002a36:	4413      	add	r3, r2
 8002a38:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002a3a:	2e02      	cmp	r6, #2
 8002a3c:	d107      	bne.n	8002a4e <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a3e:	b145      	cbz	r5, 8002a52 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8002a40:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8002a42:	2000      	movs	r0, #0
 8002a44:	e7d9      	b.n	80029fa <prvCopyDataToQueue+0x1a>
 8002a46:	2000      	movs	r0, #0
 8002a48:	e7d7      	b.n	80029fa <prvCopyDataToQueue+0x1a>
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	e7d5      	b.n	80029fa <prvCopyDataToQueue+0x1a>
 8002a4e:	2000      	movs	r0, #0
 8002a50:	e7d3      	b.n	80029fa <prvCopyDataToQueue+0x1a>
 8002a52:	2000      	movs	r0, #0
 8002a54:	e7d1      	b.n	80029fa <prvCopyDataToQueue+0x1a>

08002a56 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a56:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002a58:	b172      	cbz	r2, 8002a78 <prvCopyDataFromQueue+0x22>
{
 8002a5a:	b510      	push	{r4, lr}
 8002a5c:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002a5e:	68c4      	ldr	r4, [r0, #12]
 8002a60:	4414      	add	r4, r2
 8002a62:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a64:	6840      	ldr	r0, [r0, #4]
 8002a66:	4284      	cmp	r4, r0
 8002a68:	d301      	bcc.n	8002a6e <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	60d8      	str	r0, [r3, #12]
 8002a6e:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002a70:	68d9      	ldr	r1, [r3, #12]
 8002a72:	f009 fea0 	bl	800c7b6 <memcpy>
 8002a76:	bd10      	pop	{r4, pc}
 8002a78:	4770      	bx	lr

08002a7a <prvUnlockQueue>:
{
 8002a7a:	b538      	push	{r3, r4, r5, lr}
 8002a7c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002a7e:	f7ff fd39 	bl	80024f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002a82:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8002a86:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a88:	e001      	b.n	8002a8e <prvUnlockQueue+0x14>
			--cTxLock;
 8002a8a:	3c01      	subs	r4, #1
 8002a8c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a8e:	2c00      	cmp	r4, #0
 8002a90:	dd0a      	ble.n	8002aa8 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002a94:	b143      	cbz	r3, 8002aa8 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a96:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002a9a:	f000 ff55 	bl	8003948 <xTaskRemoveFromEventList>
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d0f3      	beq.n	8002a8a <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8002aa2:	f000 ffed 	bl	8003a80 <vTaskMissedYield>
 8002aa6:	e7f0      	b.n	8002a8a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8002aa8:	23ff      	movs	r3, #255	; 0xff
 8002aaa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002aae:	f7ff fd43 	bl	8002538 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002ab2:	f7ff fd1f 	bl	80024f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002ab6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8002aba:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002abc:	e001      	b.n	8002ac2 <prvUnlockQueue+0x48>
				--cRxLock;
 8002abe:	3c01      	subs	r4, #1
 8002ac0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ac2:	2c00      	cmp	r4, #0
 8002ac4:	dd0a      	ble.n	8002adc <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac6:	692b      	ldr	r3, [r5, #16]
 8002ac8:	b143      	cbz	r3, 8002adc <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aca:	f105 0010 	add.w	r0, r5, #16
 8002ace:	f000 ff3b 	bl	8003948 <xTaskRemoveFromEventList>
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d0f3      	beq.n	8002abe <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8002ad6:	f000 ffd3 	bl	8003a80 <vTaskMissedYield>
 8002ada:	e7f0      	b.n	8002abe <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8002adc:	23ff      	movs	r3, #255	; 0xff
 8002ade:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002ae2:	f7ff fd29 	bl	8002538 <vPortExitCritical>
 8002ae6:	bd38      	pop	{r3, r4, r5, pc}

08002ae8 <xQueueGenericReset>:
{
 8002ae8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002aea:	b330      	cbz	r0, 8002b3a <xQueueGenericReset+0x52>
 8002aec:	4604      	mov	r4, r0
 8002aee:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8002af0:	f7ff fd00 	bl	80024f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002af4:	6821      	ldr	r1, [r4, #0]
 8002af6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002af8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002afa:	fb03 1002 	mla	r0, r3, r2, r1
 8002afe:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b00:	2000      	movs	r0, #0
 8002b02:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b04:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002b06:	3a01      	subs	r2, #1
 8002b08:	fb02 1303 	mla	r3, r2, r3, r1
 8002b0c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b0e:	23ff      	movs	r3, #255	; 0xff
 8002b10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002b18:	b9c5      	cbnz	r5, 8002b4c <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b1a:	6923      	ldr	r3, [r4, #16]
 8002b1c:	b1f3      	cbz	r3, 8002b5c <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b1e:	f104 0010 	add.w	r0, r4, #16
 8002b22:	f000 ff11 	bl	8003948 <xTaskRemoveFromEventList>
 8002b26:	b1c8      	cbz	r0, 8002b5c <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
 8002b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <xQueueGenericReset+0x7c>)
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	e010      	b.n	8002b5c <xQueueGenericReset+0x74>
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	e7fe      	b.n	8002b4a <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b4c:	f104 0010 	add.w	r0, r4, #16
 8002b50:	f7ff fc2d 	bl	80023ae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b54:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b58:	f7ff fc29 	bl	80023ae <vListInitialise>
	taskEXIT_CRITICAL();
 8002b5c:	f7ff fcec 	bl	8002538 <vPortExitCritical>
}
 8002b60:	2001      	movs	r0, #1
 8002b62:	bd38      	pop	{r3, r4, r5, pc}
 8002b64:	e000ed04 	.word	0xe000ed04

08002b68 <prvInitialiseNewQueue>:
{
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	b139      	cbz	r1, 8002b80 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b70:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002b72:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b74:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ffb5 	bl	8002ae8 <xQueueGenericReset>
 8002b7e:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b80:	601b      	str	r3, [r3, #0]
 8002b82:	e7f6      	b.n	8002b72 <prvInitialiseNewQueue+0xa>

08002b84 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b84:	b940      	cbnz	r0, 8002b98 <xQueueGenericCreate+0x14>
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	e7fe      	b.n	8002b96 <xQueueGenericCreate+0x12>
	{
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8002b9e:	b111      	cbz	r1, 8002ba6 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ba0:	fb01 f000 	mul.w	r0, r1, r0
 8002ba4:	e000      	b.n	8002ba8 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	4617      	mov	r7, r2
 8002baa:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002bac:	3048      	adds	r0, #72	; 0x48
 8002bae:	f7ff fe3f 	bl	8002830 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002bb2:	4606      	mov	r6, r0
 8002bb4:	b138      	cbz	r0, 8002bc6 <xQueueGenericCreate+0x42>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bb6:	9000      	str	r0, [sp, #0]
 8002bb8:	463b      	mov	r3, r7
 8002bba:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	f7ff ffd1 	bl	8002b68 <prvInitialiseNewQueue>
	}
 8002bc6:	4630      	mov	r0, r6
 8002bc8:	b003      	add	sp, #12
 8002bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bcc <xQueueGenericSend>:
{
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002bd2:	b160      	cbz	r0, 8002bee <xQueueGenericSend+0x22>
 8002bd4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bd6:	b199      	cbz	r1, 8002c00 <xQueueGenericSend+0x34>
 8002bd8:	2501      	movs	r5, #1
 8002bda:	b9bd      	cbnz	r5, 8002c0c <xQueueGenericSend+0x40>
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	e7fe      	b.n	8002bec <xQueueGenericSend+0x20>
 8002bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	e7fe      	b.n	8002bfe <xQueueGenericSend+0x32>
 8002c00:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002c02:	b90a      	cbnz	r2, 8002c08 <xQueueGenericSend+0x3c>
 8002c04:	2501      	movs	r5, #1
 8002c06:	e7e8      	b.n	8002bda <xQueueGenericSend+0xe>
 8002c08:	2500      	movs	r5, #0
 8002c0a:	e7e6      	b.n	8002bda <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d009      	beq.n	8002c24 <xQueueGenericSend+0x58>
 8002c10:	b96d      	cbnz	r5, 8002c2e <xQueueGenericSend+0x62>
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	e7fe      	b.n	8002c22 <xQueueGenericSend+0x56>
 8002c24:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c26:	2a01      	cmp	r2, #1
 8002c28:	d0f2      	beq.n	8002c10 <xQueueGenericSend+0x44>
 8002c2a:	2500      	movs	r5, #0
 8002c2c:	e7f0      	b.n	8002c10 <xQueueGenericSend+0x44>
 8002c2e:	461e      	mov	r6, r3
 8002c30:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c32:	f000 ff2b 	bl	8003a8c <xTaskGetSchedulerState>
 8002c36:	b910      	cbnz	r0, 8002c3e <xQueueGenericSend+0x72>
 8002c38:	9b01      	ldr	r3, [sp, #4]
 8002c3a:	b103      	cbz	r3, 8002c3e <xQueueGenericSend+0x72>
 8002c3c:	2500      	movs	r5, #0
 8002c3e:	b945      	cbnz	r5, 8002c52 <xQueueGenericSend+0x86>
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	e7fe      	b.n	8002c50 <xQueueGenericSend+0x84>
 8002c52:	2500      	movs	r5, #0
 8002c54:	e02c      	b.n	8002cb0 <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c56:	4632      	mov	r2, r6
 8002c58:	4639      	mov	r1, r7
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7ff fec0 	bl	80029e0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c62:	b18b      	cbz	r3, 8002c88 <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c64:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c68:	f000 fe6e 	bl	8003948 <xTaskRemoveFromEventList>
 8002c6c:	b138      	cbz	r0, 8002c7e <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 8002c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c72:	4b37      	ldr	r3, [pc, #220]	; (8002d50 <xQueueGenericSend+0x184>)
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002c7e:	f7ff fc5b 	bl	8002538 <vPortExitCritical>
				return pdPASS;
 8002c82:	2001      	movs	r0, #1
}
 8002c84:	b005      	add	sp, #20
 8002c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	d0f8      	beq.n	8002c7e <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8002c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c90:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <xQueueGenericSend+0x184>)
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	e7ef      	b.n	8002c7e <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 8002c9e:	f7ff fc4b 	bl	8002538 <vPortExitCritical>
					return errQUEUE_FULL;
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	e7ee      	b.n	8002c84 <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f7ff fee7 	bl	8002a7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cac:	f000 fcfe 	bl	80036ac <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002cb0:	f7ff fc20 	bl	80024f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002cb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d3cc      	bcc.n	8002c56 <xQueueGenericSend+0x8a>
 8002cbc:	2e02      	cmp	r6, #2
 8002cbe:	d0ca      	beq.n	8002c56 <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cc0:	9b01      	ldr	r3, [sp, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0eb      	beq.n	8002c9e <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
 8002cc6:	b91d      	cbnz	r5, 8002cd0 <xQueueGenericSend+0x104>
					vTaskSetTimeOutState( &xTimeOut );
 8002cc8:	a802      	add	r0, sp, #8
 8002cca:	f000 fe83 	bl	80039d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cce:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8002cd0:	f7ff fc32 	bl	8002538 <vPortExitCritical>
		vTaskSuspendAll();
 8002cd4:	f000 fc44 	bl	8003560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cd8:	f7ff fc0c 	bl	80024f4 <vPortEnterCritical>
 8002cdc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002ce0:	b25b      	sxtb	r3, r3
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce6:	d102      	bne.n	8002cee <xQueueGenericSend+0x122>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002cee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002cf2:	b25b      	sxtb	r3, r3
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d102      	bne.n	8002d00 <xQueueGenericSend+0x134>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d00:	f7ff fc1a 	bl	8002538 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d04:	a901      	add	r1, sp, #4
 8002d06:	a802      	add	r0, sp, #8
 8002d08:	f000 fe7a 	bl	8003a00 <xTaskCheckForTimeOut>
 8002d0c:	b9c8      	cbnz	r0, 8002d42 <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f7ff fe4a 	bl	80029a8 <prvIsQueueFull>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	d0c6      	beq.n	8002ca6 <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d18:	9901      	ldr	r1, [sp, #4]
 8002d1a:	f104 0010 	add.w	r0, r4, #16
 8002d1e:	f000 fdfb 	bl	8003918 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d22:	4620      	mov	r0, r4
 8002d24:	f7ff fea9 	bl	8002a7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d28:	f000 fcc0 	bl	80036ac <xTaskResumeAll>
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	d1bf      	bne.n	8002cb0 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8002d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <xQueueGenericSend+0x184>)
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	e7b6      	b.n	8002cb0 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8002d42:	4620      	mov	r0, r4
 8002d44:	f7ff fe99 	bl	8002a7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d48:	f000 fcb0 	bl	80036ac <xTaskResumeAll>
			return errQUEUE_FULL;
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	e799      	b.n	8002c84 <xQueueGenericSend+0xb8>
 8002d50:	e000ed04 	.word	0xe000ed04

08002d54 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8002d54:	b148      	cbz	r0, 8002d6a <prvInitialiseMutex+0x16>
	{
 8002d56:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8002d58:	2100      	movs	r1, #0
 8002d5a:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002d5c:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002d5e:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002d60:	460b      	mov	r3, r1
 8002d62:	460a      	mov	r2, r1
 8002d64:	f7ff ff32 	bl	8002bcc <xQueueGenericSend>
 8002d68:	bd08      	pop	{r3, pc}
 8002d6a:	4770      	bx	lr

08002d6c <xQueueCreateMutex>:
	{
 8002d6c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002d6e:	4602      	mov	r2, r0
 8002d70:	2100      	movs	r1, #0
 8002d72:	2001      	movs	r0, #1
 8002d74:	f7ff ff06 	bl	8002b84 <xQueueGenericCreate>
 8002d78:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8002d7a:	f7ff ffeb 	bl	8002d54 <prvInitialiseMutex>
	}
 8002d7e:	4620      	mov	r0, r4
 8002d80:	bd10      	pop	{r4, pc}

08002d82 <xQueueGenericSendFromISR>:
{
 8002d82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002d86:	b160      	cbz	r0, 8002da2 <xQueueGenericSendFromISR+0x20>
 8002d88:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d8a:	b199      	cbz	r1, 8002db4 <xQueueGenericSendFromISR+0x32>
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	b9b8      	cbnz	r0, 8002dc0 <xQueueGenericSendFromISR+0x3e>
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	e7fe      	b.n	8002da0 <xQueueGenericSendFromISR+0x1e>
 8002da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	e7fe      	b.n	8002db2 <xQueueGenericSendFromISR+0x30>
 8002db4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002db6:	b908      	cbnz	r0, 8002dbc <xQueueGenericSendFromISR+0x3a>
 8002db8:	2001      	movs	r0, #1
 8002dba:	e7e8      	b.n	8002d8e <xQueueGenericSendFromISR+0xc>
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	e7e6      	b.n	8002d8e <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d009      	beq.n	8002dd8 <xQueueGenericSendFromISR+0x56>
 8002dc4:	b968      	cbnz	r0, 8002de2 <xQueueGenericSendFromISR+0x60>
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	e7fe      	b.n	8002dd6 <xQueueGenericSendFromISR+0x54>
 8002dd8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002dda:	2d01      	cmp	r5, #1
 8002ddc:	d0f2      	beq.n	8002dc4 <xQueueGenericSendFromISR+0x42>
 8002dde:	2000      	movs	r0, #0
 8002de0:	e7f0      	b.n	8002dc4 <xQueueGenericSendFromISR+0x42>
 8002de2:	461f      	mov	r7, r3
 8002de4:	4690      	mov	r8, r2
 8002de6:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002de8:	f7ff fc96 	bl	8002718 <vPortValidateInterruptPriority>
	__asm volatile
 8002dec:	f3ef 8611 	mrs	r6, BASEPRI
 8002df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df4:	f383 8811 	msr	BASEPRI, r3
 8002df8:	f3bf 8f6f 	isb	sy
 8002dfc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d301      	bcc.n	8002e0c <xQueueGenericSendFromISR+0x8a>
 8002e08:	2f02      	cmp	r7, #2
 8002e0a:	d121      	bne.n	8002e50 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e0c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8002e10:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e12:	463a      	mov	r2, r7
 8002e14:	4649      	mov	r1, r9
 8002e16:	4620      	mov	r0, r4
 8002e18:	f7ff fde2 	bl	80029e0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002e1c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002e20:	d110      	bne.n	8002e44 <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e24:	b1b3      	cbz	r3, 8002e54 <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e2a:	f000 fd8d 	bl	8003948 <xTaskRemoveFromEventList>
 8002e2e:	b198      	cbz	r0, 8002e58 <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 8002e30:	f1b8 0f00 	cmp.w	r8, #0
 8002e34:	d012      	beq.n	8002e5c <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e36:	2001      	movs	r0, #1
 8002e38:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8002e3c:	f386 8811 	msr	BASEPRI, r6
}
 8002e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e44:	1c6b      	adds	r3, r5, #1
 8002e46:	b25b      	sxtb	r3, r3
 8002e48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	e7f5      	b.n	8002e3c <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8002e50:	2000      	movs	r0, #0
 8002e52:	e7f3      	b.n	8002e3c <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 8002e54:	2001      	movs	r0, #1
 8002e56:	e7f1      	b.n	8002e3c <xQueueGenericSendFromISR+0xba>
 8002e58:	2001      	movs	r0, #1
 8002e5a:	e7ef      	b.n	8002e3c <xQueueGenericSendFromISR+0xba>
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	e7ed      	b.n	8002e3c <xQueueGenericSendFromISR+0xba>

08002e60 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8002e60:	b160      	cbz	r0, 8002e7c <xQueueGiveFromISR+0x1c>
{
 8002e62:	b570      	push	{r4, r5, r6, lr}
 8002e64:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e66:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e68:	b18b      	cbz	r3, 8002e8e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	e7fe      	b.n	8002e7a <xQueueGiveFromISR+0x1a>
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	e7fe      	b.n	8002e8c <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002e8e:	6803      	ldr	r3, [r0, #0]
 8002e90:	b153      	cbz	r3, 8002ea8 <xQueueGiveFromISR+0x48>
 8002e92:	2301      	movs	r3, #1
 8002e94:	b973      	cbnz	r3, 8002eb4 <xQueueGiveFromISR+0x54>
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	e7fe      	b.n	8002ea6 <xQueueGiveFromISR+0x46>
 8002ea8:	6843      	ldr	r3, [r0, #4]
 8002eaa:	b90b      	cbnz	r3, 8002eb0 <xQueueGiveFromISR+0x50>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e7f1      	b.n	8002e94 <xQueueGiveFromISR+0x34>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e7ef      	b.n	8002e94 <xQueueGiveFromISR+0x34>
 8002eb4:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002eb6:	f7ff fc2f 	bl	8002718 <vPortValidateInterruptPriority>
	__asm volatile
 8002eba:	f3ef 8511 	mrs	r5, BASEPRI
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ece:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002ed0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d21a      	bcs.n	8002f0c <xQueueGiveFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ed6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002eda:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002edc:	3201      	adds	r2, #1
 8002ede:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d10c      	bne.n	8002f00 <xQueueGiveFromISR+0xa0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ee8:	b193      	cbz	r3, 8002f10 <xQueueGiveFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002eee:	f000 fd2b 	bl	8003948 <xTaskRemoveFromEventList>
 8002ef2:	b178      	cbz	r0, 8002f14 <xQueueGiveFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 8002ef4:	b186      	cbz	r6, 8002f18 <xQueueGiveFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	6030      	str	r0, [r6, #0]
	__asm volatile
 8002efa:	f385 8811 	msr	BASEPRI, r5
}
 8002efe:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f00:	3301      	adds	r3, #1
 8002f02:	b25b      	sxtb	r3, r3
 8002f04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8002f08:	2001      	movs	r0, #1
 8002f0a:	e7f6      	b.n	8002efa <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	e7f4      	b.n	8002efa <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
 8002f10:	2001      	movs	r0, #1
 8002f12:	e7f2      	b.n	8002efa <xQueueGiveFromISR+0x9a>
 8002f14:	2001      	movs	r0, #1
 8002f16:	e7f0      	b.n	8002efa <xQueueGiveFromISR+0x9a>
 8002f18:	2001      	movs	r0, #1
 8002f1a:	e7ee      	b.n	8002efa <xQueueGiveFromISR+0x9a>

08002f1c <xQueueGenericReceive>:
{
 8002f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002f24:	b160      	cbz	r0, 8002f40 <xQueueGenericReceive+0x24>
 8002f26:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f28:	b199      	cbz	r1, 8002f52 <xQueueGenericReceive+0x36>
 8002f2a:	2501      	movs	r5, #1
 8002f2c:	b9bd      	cbnz	r5, 8002f5e <xQueueGenericReceive+0x42>
	__asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	e7fe      	b.n	8002f3e <xQueueGenericReceive+0x22>
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	e7fe      	b.n	8002f50 <xQueueGenericReceive+0x34>
 8002f52:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002f54:	b90a      	cbnz	r2, 8002f5a <xQueueGenericReceive+0x3e>
 8002f56:	2501      	movs	r5, #1
 8002f58:	e7e8      	b.n	8002f2c <xQueueGenericReceive+0x10>
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	e7e6      	b.n	8002f2c <xQueueGenericReceive+0x10>
 8002f5e:	461f      	mov	r7, r3
 8002f60:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f62:	f000 fd93 	bl	8003a8c <xTaskGetSchedulerState>
 8002f66:	b910      	cbnz	r0, 8002f6e <xQueueGenericReceive+0x52>
 8002f68:	9b01      	ldr	r3, [sp, #4]
 8002f6a:	b103      	cbz	r3, 8002f6e <xQueueGenericReceive+0x52>
 8002f6c:	2500      	movs	r5, #0
 8002f6e:	b945      	cbnz	r5, 8002f82 <xQueueGenericReceive+0x66>
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	e7fe      	b.n	8002f80 <xQueueGenericReceive+0x64>
 8002f82:	2600      	movs	r6, #0
 8002f84:	e05d      	b.n	8003042 <xQueueGenericReceive+0x126>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002f86:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f88:	4641      	mov	r1, r8
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7ff fd63 	bl	8002a56 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8002f90:	b9df      	cbnz	r7, 8002fca <xQueueGenericReceive+0xae>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002f92:	3d01      	subs	r5, #1
 8002f94:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	b913      	cbnz	r3, 8002fa0 <xQueueGenericReceive+0x84>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002f9a:	f000 fe33 	bl	8003c04 <pvTaskIncrementMutexHeldCount>
 8002f9e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fa0:	6923      	ldr	r3, [r4, #16]
 8002fa2:	b163      	cbz	r3, 8002fbe <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fa4:	f104 0010 	add.w	r0, r4, #16
 8002fa8:	f000 fcce 	bl	8003948 <xTaskRemoveFromEventList>
 8002fac:	b138      	cbz	r0, 8002fbe <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8002fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb2:	4b45      	ldr	r3, [pc, #276]	; (80030c8 <xQueueGenericReceive+0x1ac>)
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002fbe:	f7ff fabb 	bl	8002538 <vPortExitCritical>
				return pdPASS;
 8002fc2:	2001      	movs	r0, #1
}
 8002fc4:	b004      	add	sp, #16
 8002fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002fca:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f5      	beq.n	8002fbe <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002fd6:	f000 fcb7 	bl	8003948 <xTaskRemoveFromEventList>
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d0ef      	beq.n	8002fbe <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8002fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe2:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <xQueueGenericReceive+0x1ac>)
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	e7e6      	b.n	8002fbe <xQueueGenericReceive+0xa2>
					taskEXIT_CRITICAL();
 8002ff0:	f7ff faa2 	bl	8002538 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	e7e5      	b.n	8002fc4 <xQueueGenericReceive+0xa8>
					vTaskSetTimeOutState( &xTimeOut );
 8002ff8:	a802      	add	r0, sp, #8
 8002ffa:	f000 fceb 	bl	80039d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ffe:	2601      	movs	r6, #1
 8003000:	e029      	b.n	8003056 <xQueueGenericReceive+0x13a>
		prvLockQueue( pxQueue );
 8003002:	2300      	movs	r3, #0
 8003004:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003008:	e031      	b.n	800306e <xQueueGenericReceive+0x152>
 800300a:	2300      	movs	r3, #0
 800300c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003010:	e033      	b.n	800307a <xQueueGenericReceive+0x15e>
						taskENTER_CRITICAL();
 8003012:	f7ff fa6f 	bl	80024f4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003016:	6860      	ldr	r0, [r4, #4]
 8003018:	f000 fd48 	bl	8003aac <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800301c:	f7ff fa8c 	bl	8002538 <vPortExitCritical>
 8003020:	e03b      	b.n	800309a <xQueueGenericReceive+0x17e>
				prvUnlockQueue( pxQueue );
 8003022:	4620      	mov	r0, r4
 8003024:	f7ff fd29 	bl	8002a7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003028:	f000 fb40 	bl	80036ac <xTaskResumeAll>
 800302c:	e009      	b.n	8003042 <xQueueGenericReceive+0x126>
			prvUnlockQueue( pxQueue );
 800302e:	4620      	mov	r0, r4
 8003030:	f7ff fd23 	bl	8002a7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003034:	f000 fb3a 	bl	80036ac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003038:	4620      	mov	r0, r4
 800303a:	f7ff fcc4 	bl	80029c6 <prvIsQueueEmpty>
 800303e:	2800      	cmp	r0, #0
 8003040:	d140      	bne.n	80030c4 <xQueueGenericReceive+0x1a8>
		taskENTER_CRITICAL();
 8003042:	f7ff fa57 	bl	80024f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003046:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003048:	2d00      	cmp	r5, #0
 800304a:	d19c      	bne.n	8002f86 <xQueueGenericReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800304c:	9b01      	ldr	r3, [sp, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ce      	beq.n	8002ff0 <xQueueGenericReceive+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8003052:	2e00      	cmp	r6, #0
 8003054:	d0d0      	beq.n	8002ff8 <xQueueGenericReceive+0xdc>
		taskEXIT_CRITICAL();
 8003056:	f7ff fa6f 	bl	8002538 <vPortExitCritical>
		vTaskSuspendAll();
 800305a:	f000 fa81 	bl	8003560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800305e:	f7ff fa49 	bl	80024f4 <vPortEnterCritical>
 8003062:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003066:	b25b      	sxtb	r3, r3
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d0c9      	beq.n	8003002 <xQueueGenericReceive+0xe6>
 800306e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003072:	b25b      	sxtb	r3, r3
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d0c7      	beq.n	800300a <xQueueGenericReceive+0xee>
 800307a:	f7ff fa5d 	bl	8002538 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800307e:	a901      	add	r1, sp, #4
 8003080:	a802      	add	r0, sp, #8
 8003082:	f000 fcbd 	bl	8003a00 <xTaskCheckForTimeOut>
 8003086:	2800      	cmp	r0, #0
 8003088:	d1d1      	bne.n	800302e <xQueueGenericReceive+0x112>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff fc9b 	bl	80029c6 <prvIsQueueEmpty>
 8003090:	2800      	cmp	r0, #0
 8003092:	d0c6      	beq.n	8003022 <xQueueGenericReceive+0x106>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0bb      	beq.n	8003012 <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800309a:	9901      	ldr	r1, [sp, #4]
 800309c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80030a0:	f000 fc3a 	bl	8003918 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030a4:	4620      	mov	r0, r4
 80030a6:	f7ff fce8 	bl	8002a7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030aa:	f000 faff 	bl	80036ac <xTaskResumeAll>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d1c7      	bne.n	8003042 <xQueueGenericReceive+0x126>
					portYIELD_WITHIN_API();
 80030b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <xQueueGenericReceive+0x1ac>)
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	e7be      	b.n	8003042 <xQueueGenericReceive+0x126>
				return errQUEUE_EMPTY;
 80030c4:	2000      	movs	r0, #0
 80030c6:	e77d      	b.n	8002fc4 <xQueueGenericReceive+0xa8>
 80030c8:	e000ed04 	.word	0xe000ed04

080030cc <xQueueReceiveFromISR>:
{
 80030cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80030d0:	b160      	cbz	r0, 80030ec <xQueueReceiveFromISR+0x20>
 80030d2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030d4:	b199      	cbz	r1, 80030fe <xQueueReceiveFromISR+0x32>
 80030d6:	2301      	movs	r3, #1
 80030d8:	b9bb      	cbnz	r3, 800310a <xQueueReceiveFromISR+0x3e>
 80030da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	e7fe      	b.n	80030ea <xQueueReceiveFromISR+0x1e>
 80030ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	e7fe      	b.n	80030fc <xQueueReceiveFromISR+0x30>
 80030fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003100:	b90b      	cbnz	r3, 8003106 <xQueueReceiveFromISR+0x3a>
 8003102:	2301      	movs	r3, #1
 8003104:	e7e8      	b.n	80030d8 <xQueueReceiveFromISR+0xc>
 8003106:	2300      	movs	r3, #0
 8003108:	e7e6      	b.n	80030d8 <xQueueReceiveFromISR+0xc>
 800310a:	4617      	mov	r7, r2
 800310c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800310e:	f7ff fb03 	bl	8002718 <vPortValidateInterruptPriority>
	__asm volatile
 8003112:	f3ef 8611 	mrs	r6, BASEPRI
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003126:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800312a:	f1b8 0f00 	cmp.w	r8, #0
 800312e:	d020      	beq.n	8003172 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003130:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003134:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003136:	4649      	mov	r1, r9
 8003138:	4620      	mov	r0, r4
 800313a:	f7ff fc8c 	bl	8002a56 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800313e:	f108 33ff 	add.w	r3, r8, #4294967295
 8003142:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8003144:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003148:	d10d      	bne.n	8003166 <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800314a:	6923      	ldr	r3, [r4, #16]
 800314c:	b19b      	cbz	r3, 8003176 <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800314e:	f104 0010 	add.w	r0, r4, #16
 8003152:	f000 fbf9 	bl	8003948 <xTaskRemoveFromEventList>
 8003156:	b180      	cbz	r0, 800317a <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 8003158:	b18f      	cbz	r7, 800317e <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800315a:	2001      	movs	r0, #1
 800315c:	6038      	str	r0, [r7, #0]
	__asm volatile
 800315e:	f386 8811 	msr	BASEPRI, r6
}
 8003162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003166:	1c6b      	adds	r3, r5, #1
 8003168:	b25b      	sxtb	r3, r3
 800316a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800316e:	2001      	movs	r0, #1
 8003170:	e7f5      	b.n	800315e <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 8003172:	2000      	movs	r0, #0
 8003174:	e7f3      	b.n	800315e <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 8003176:	2001      	movs	r0, #1
 8003178:	e7f1      	b.n	800315e <xQueueReceiveFromISR+0x92>
 800317a:	2001      	movs	r0, #1
 800317c:	e7ef      	b.n	800315e <xQueueReceiveFromISR+0x92>
 800317e:	2001      	movs	r0, #1
 8003180:	e7ed      	b.n	800315e <xQueueReceiveFromISR+0x92>

08003182 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8003182:	b940      	cbnz	r0, 8003196 <uxQueueMessagesWaiting+0x14>
	__asm volatile
 8003184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	e7fe      	b.n	8003194 <uxQueueMessagesWaiting+0x12>
{
 8003196:	b510      	push	{r4, lr}
 8003198:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800319a:	f7ff f9ab 	bl	80024f4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800319e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80031a0:	f7ff f9ca 	bl	8002538 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80031a4:	4620      	mov	r0, r4
 80031a6:	bd10      	pop	{r4, pc}

080031a8 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 80031a8:	b108      	cbz	r0, 80031ae <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80031aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80031ac:	4770      	bx	lr
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	e7fe      	b.n	80031be <uxQueueMessagesWaitingFromISR+0x16>

080031c0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031c0:	2300      	movs	r3, #0
 80031c2:	2b07      	cmp	r3, #7
 80031c4:	d80f      	bhi.n	80031e6 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80031c6:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <vQueueUnregisterQueue+0x28>)
 80031c8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80031cc:	6852      	ldr	r2, [r2, #4]
 80031ce:	4282      	cmp	r2, r0
 80031d0:	d001      	beq.n	80031d6 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031d2:	3301      	adds	r3, #1
 80031d4:	e7f5      	b.n	80031c2 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <vQueueUnregisterQueue+0x28>)
 80031d8:	2100      	movs	r1, #0
 80031da:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80031de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80031e2:	6059      	str	r1, [r3, #4]
				break;
 80031e4:	4770      	bx	lr
 80031e6:	4770      	bx	lr
 80031e8:	20003f1c 	.word	0x20003f1c

080031ec <vQueueDelete>:
	configASSERT( pxQueue );
 80031ec:	b940      	cbnz	r0, 8003200 <vQueueDelete+0x14>
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	e7fe      	b.n	80031fe <vQueueDelete+0x12>
{
 8003200:	b510      	push	{r4, lr}
 8003202:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8003204:	f7ff ffdc 	bl	80031c0 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff fb95 	bl	8002938 <vPortFree>
 800320e:	bd10      	pop	{r4, pc}

08003210 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <prvResetNextTaskUnblockTime+0x2c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b94b      	cbnz	r3, 800322c <prvResetNextTaskUnblockTime+0x1c>
 8003218:	2301      	movs	r3, #1
 800321a:	b94b      	cbnz	r3, 8003230 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800321c:	4b07      	ldr	r3, [pc, #28]	; (800323c <prvResetNextTaskUnblockTime+0x2c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <prvResetNextTaskUnblockTime+0x30>)
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800322c:	2300      	movs	r3, #0
 800322e:	e7f4      	b.n	800321a <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	4b02      	ldr	r3, [pc, #8]	; (8003240 <prvResetNextTaskUnblockTime+0x30>)
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20003c54 	.word	0x20003c54
 8003240:	20003d2c 	.word	0x20003d2c

08003244 <prvDeleteTCB>:
	{
 8003244:	b510      	push	{r4, lr}
 8003246:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8003248:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800324a:	f7ff fb75 	bl	8002938 <vPortFree>
			vPortFree( pxTCB );
 800324e:	4620      	mov	r0, r4
 8003250:	f7ff fb72 	bl	8002938 <vPortFree>
 8003254:	bd10      	pop	{r4, pc}

08003256 <prvInitialiseNewTask>:
{
 8003256:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800325a:	4680      	mov	r8, r0
 800325c:	4699      	mov	r9, r3
 800325e:	9d08      	ldr	r5, [sp, #32]
 8003260:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003262:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003264:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003266:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800326a:	3a01      	subs	r2, #1
 800326c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003270:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003274:	2300      	movs	r3, #0
 8003276:	2b0f      	cmp	r3, #15
 8003278:	d807      	bhi.n	800328a <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800327a:	5cc8      	ldrb	r0, [r1, r3]
 800327c:	18e2      	adds	r2, r4, r3
 800327e:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8003282:	5cca      	ldrb	r2, [r1, r3]
 8003284:	b10a      	cbz	r2, 800328a <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003286:	3301      	adds	r3, #1
 8003288:	e7f5      	b.n	8003276 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800328a:	2300      	movs	r3, #0
 800328c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003290:	2d06      	cmp	r5, #6
 8003292:	d900      	bls.n	8003296 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003294:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8003296:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003298:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800329a:	f04f 0a00 	mov.w	sl, #0
 800329e:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032a2:	1d20      	adds	r0, r4, #4
 80032a4:	f7ff f88e 	bl	80023c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032a8:	f104 0018 	add.w	r0, r4, #24
 80032ac:	f7ff f88a 	bl	80023c4 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032b0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032b2:	f1c5 0507 	rsb	r5, r5, #7
 80032b6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032b8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80032ba:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032be:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032c2:	464a      	mov	r2, r9
 80032c4:	4641      	mov	r1, r8
 80032c6:	4630      	mov	r0, r6
 80032c8:	f7ff f8ec 	bl	80024a4 <pxPortInitialiseStack>
 80032cc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80032ce:	b107      	cbz	r7, 80032d2 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032d0:	603c      	str	r4, [r7, #0]
 80032d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080032d8 <prvInitialiseTaskLists>:
{
 80032d8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032da:	2400      	movs	r4, #0
 80032dc:	e007      	b.n	80032ee <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032de:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80032e2:	0093      	lsls	r3, r2, #2
 80032e4:	480e      	ldr	r0, [pc, #56]	; (8003320 <prvInitialiseTaskLists+0x48>)
 80032e6:	4418      	add	r0, r3
 80032e8:	f7ff f861 	bl	80023ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032ec:	3401      	adds	r4, #1
 80032ee:	2c06      	cmp	r4, #6
 80032f0:	d9f5      	bls.n	80032de <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80032f2:	4d0c      	ldr	r5, [pc, #48]	; (8003324 <prvInitialiseTaskLists+0x4c>)
 80032f4:	4628      	mov	r0, r5
 80032f6:	f7ff f85a 	bl	80023ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032fa:	4c0b      	ldr	r4, [pc, #44]	; (8003328 <prvInitialiseTaskLists+0x50>)
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7ff f856 	bl	80023ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003302:	480a      	ldr	r0, [pc, #40]	; (800332c <prvInitialiseTaskLists+0x54>)
 8003304:	f7ff f853 	bl	80023ae <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003308:	4809      	ldr	r0, [pc, #36]	; (8003330 <prvInitialiseTaskLists+0x58>)
 800330a:	f7ff f850 	bl	80023ae <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800330e:	4809      	ldr	r0, [pc, #36]	; (8003334 <prvInitialiseTaskLists+0x5c>)
 8003310:	f7ff f84d 	bl	80023ae <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <prvInitialiseTaskLists+0x60>)
 8003316:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <prvInitialiseTaskLists+0x64>)
 800331a:	601c      	str	r4, [r3, #0]
 800331c:	bd38      	pop	{r3, r4, r5, pc}
 800331e:	bf00      	nop
 8003320:	20003c5c 	.word	0x20003c5c
 8003324:	20003d00 	.word	0x20003d00
 8003328:	20003d14 	.word	0x20003d14
 800332c:	20003d34 	.word	0x20003d34
 8003330:	20003d60 	.word	0x20003d60
 8003334:	20003d4c 	.word	0x20003d4c
 8003338:	20003c54 	.word	0x20003c54
 800333c:	20003c58 	.word	0x20003c58

08003340 <prvAddNewTaskToReadyList>:
{
 8003340:	b510      	push	{r4, lr}
 8003342:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003344:	f7ff f8d6 	bl	80024f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003348:	4a20      	ldr	r2, [pc, #128]	; (80033cc <prvAddNewTaskToReadyList+0x8c>)
 800334a:	6813      	ldr	r3, [r2, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003350:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <prvAddNewTaskToReadyList+0x90>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d031      	beq.n	80033bc <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 8003358:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <prvAddNewTaskToReadyList+0x94>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	b93b      	cbnz	r3, 800336e <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800335e:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <prvAddNewTaskToReadyList+0x90>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003364:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003366:	429a      	cmp	r2, r3
 8003368:	d801      	bhi.n	800336e <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 800336a:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <prvAddNewTaskToReadyList+0x90>)
 800336c:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 800336e:	4a1a      	ldr	r2, [pc, #104]	; (80033d8 <prvAddNewTaskToReadyList+0x98>)
 8003370:	6813      	ldr	r3, [r2, #0]
 8003372:	3301      	adds	r3, #1
 8003374:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003376:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003378:	2201      	movs	r2, #1
 800337a:	409a      	lsls	r2, r3
 800337c:	4917      	ldr	r1, [pc, #92]	; (80033dc <prvAddNewTaskToReadyList+0x9c>)
 800337e:	6808      	ldr	r0, [r1, #0]
 8003380:	4302      	orrs	r2, r0
 8003382:	600a      	str	r2, [r1, #0]
 8003384:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003388:	009a      	lsls	r2, r3, #2
 800338a:	1d21      	adds	r1, r4, #4
 800338c:	4814      	ldr	r0, [pc, #80]	; (80033e0 <prvAddNewTaskToReadyList+0xa0>)
 800338e:	4410      	add	r0, r2
 8003390:	f7ff f81b 	bl	80023ca <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003394:	f7ff f8d0 	bl	8002538 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003398:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <prvAddNewTaskToReadyList+0x94>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	b16b      	cbz	r3, 80033ba <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800339e:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <prvAddNewTaskToReadyList+0x90>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d207      	bcs.n	80033ba <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 80033aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <prvAddNewTaskToReadyList+0xa4>)
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <prvAddNewTaskToReadyList+0x90>)
 80033be:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033c0:	6813      	ldr	r3, [r2, #0]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d1d3      	bne.n	800336e <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 80033c6:	f7ff ff87 	bl	80032d8 <prvInitialiseTaskLists>
 80033ca:	e7d0      	b.n	800336e <prvAddNewTaskToReadyList+0x2e>
 80033cc:	20003ce8 	.word	0x20003ce8
 80033d0:	20003c50 	.word	0x20003c50
 80033d4:	20003d48 	.word	0x20003d48
 80033d8:	20003cf8 	.word	0x20003cf8
 80033dc:	20003cfc 	.word	0x20003cfc
 80033e0:	20003c5c 	.word	0x20003c5c
 80033e4:	e000ed04 	.word	0xe000ed04

080033e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	4604      	mov	r4, r0
 80033ec:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80033ee:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <prvAddCurrentTaskToDelayedList+0x7c>)
 80033f0:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <prvAddCurrentTaskToDelayedList+0x80>)
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	3004      	adds	r0, #4
 80033f8:	f7ff f80d 	bl	8002416 <uxListRemove>
 80033fc:	b950      	cbnz	r0, 8003414 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <prvAddCurrentTaskToDelayedList+0x80>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003404:	2301      	movs	r3, #1
 8003406:	fa03 f202 	lsl.w	r2, r3, r2
 800340a:	4918      	ldr	r1, [pc, #96]	; (800346c <prvAddCurrentTaskToDelayedList+0x84>)
 800340c:	680b      	ldr	r3, [r1, #0]
 800340e:	ea23 0302 	bic.w	r3, r3, r2
 8003412:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003414:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003418:	d013      	beq.n	8003442 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800341a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <prvAddCurrentTaskToDelayedList+0x80>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8003422:	42a5      	cmp	r5, r4
 8003424:	d816      	bhi.n	8003454 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <prvAddCurrentTaskToDelayedList+0x88>)
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <prvAddCurrentTaskToDelayedList+0x80>)
 800342c:	6819      	ldr	r1, [r3, #0]
 800342e:	3104      	adds	r1, #4
 8003430:	f7fe ffd7 	bl	80023e2 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <prvAddCurrentTaskToDelayedList+0x8c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	429c      	cmp	r4, r3
 800343a:	d201      	bcs.n	8003440 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800343c:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <prvAddCurrentTaskToDelayedList+0x8c>)
 800343e:	601c      	str	r4, [r3, #0]
 8003440:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003442:	2e00      	cmp	r6, #0
 8003444:	d0e9      	beq.n	800341a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <prvAddCurrentTaskToDelayedList+0x80>)
 8003448:	6819      	ldr	r1, [r3, #0]
 800344a:	3104      	adds	r1, #4
 800344c:	480a      	ldr	r0, [pc, #40]	; (8003478 <prvAddCurrentTaskToDelayedList+0x90>)
 800344e:	f7fe ffbc 	bl	80023ca <vListInsertEnd>
 8003452:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <prvAddCurrentTaskToDelayedList+0x94>)
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <prvAddCurrentTaskToDelayedList+0x80>)
 800345a:	6819      	ldr	r1, [r3, #0]
 800345c:	3104      	adds	r1, #4
 800345e:	f7fe ffc0 	bl	80023e2 <vListInsert>
 8003462:	bd70      	pop	{r4, r5, r6, pc}
 8003464:	20003d74 	.word	0x20003d74
 8003468:	20003c50 	.word	0x20003c50
 800346c:	20003cfc 	.word	0x20003cfc
 8003470:	20003c54 	.word	0x20003c54
 8003474:	20003d2c 	.word	0x20003d2c
 8003478:	20003d4c 	.word	0x20003d4c
 800347c:	20003c58 	.word	0x20003c58

08003480 <xTaskCreate>:
	{
 8003480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003484:	b085      	sub	sp, #20
 8003486:	4606      	mov	r6, r0
 8003488:	460f      	mov	r7, r1
 800348a:	4615      	mov	r5, r2
 800348c:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800348e:	0090      	lsls	r0, r2, #2
 8003490:	f7ff f9ce 	bl	8002830 <pvPortMalloc>
			if( pxStack != NULL )
 8003494:	b300      	cbz	r0, 80034d8 <xTaskCreate+0x58>
 8003496:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003498:	2054      	movs	r0, #84	; 0x54
 800349a:	f7ff f9c9 	bl	8002830 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800349e:	4604      	mov	r4, r0
 80034a0:	b1b0      	cbz	r0, 80034d0 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80034a2:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80034a6:	b1cc      	cbz	r4, 80034dc <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034a8:	2300      	movs	r3, #0
 80034aa:	9303      	str	r3, [sp, #12]
 80034ac:	9402      	str	r4, [sp, #8]
 80034ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034b0:	9301      	str	r3, [sp, #4]
 80034b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	4643      	mov	r3, r8
 80034b8:	462a      	mov	r2, r5
 80034ba:	4639      	mov	r1, r7
 80034bc:	4630      	mov	r0, r6
 80034be:	f7ff feca 	bl	8003256 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034c2:	4620      	mov	r0, r4
 80034c4:	f7ff ff3c 	bl	8003340 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034c8:	2001      	movs	r0, #1
	}
 80034ca:	b005      	add	sp, #20
 80034cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80034d0:	4648      	mov	r0, r9
 80034d2:	f7ff fa31 	bl	8002938 <vPortFree>
 80034d6:	e7e6      	b.n	80034a6 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 80034d8:	2400      	movs	r4, #0
 80034da:	e7e4      	b.n	80034a6 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80034e0:	e7f3      	b.n	80034ca <xTaskCreate+0x4a>
	...

080034e4 <vTaskStartScheduler>:
{
 80034e4:	b500      	push	{lr}
 80034e6:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <vTaskStartScheduler+0x64>)
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	2300      	movs	r3, #0
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f4:	4915      	ldr	r1, [pc, #84]	; (800354c <vTaskStartScheduler+0x68>)
 80034f6:	4816      	ldr	r0, [pc, #88]	; (8003550 <vTaskStartScheduler+0x6c>)
 80034f8:	f7ff ffc2 	bl	8003480 <xTaskCreate>
	if( xReturn == pdPASS )
 80034fc:	2801      	cmp	r0, #1
 80034fe:	d005      	beq.n	800350c <vTaskStartScheduler+0x28>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003500:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003504:	d017      	beq.n	8003536 <vTaskStartScheduler+0x52>
}
 8003506:	b003      	add	sp, #12
 8003508:	f85d fb04 	ldr.w	pc, [sp], #4
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <vTaskStartScheduler+0x70>)
 8003522:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003524:	2201      	movs	r2, #1
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <vTaskStartScheduler+0x74>)
 8003528:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800352a:	2200      	movs	r2, #0
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <vTaskStartScheduler+0x78>)
 800352e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003530:	f7ff f87c 	bl	800262c <xPortStartScheduler>
 8003534:	e7e7      	b.n	8003506 <vTaskStartScheduler+0x22>
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	e7fe      	b.n	8003546 <vTaskStartScheduler+0x62>
 8003548:	20003d28 	.word	0x20003d28
 800354c:	0800c81c 	.word	0x0800c81c
 8003550:	08003855 	.word	0x08003855
 8003554:	20003d2c 	.word	0x20003d2c
 8003558:	20003d48 	.word	0x20003d48
 800355c:	20003d74 	.word	0x20003d74

08003560 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003560:	4a02      	ldr	r2, [pc, #8]	; (800356c <vTaskSuspendAll+0xc>)
 8003562:	6813      	ldr	r3, [r2, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20003cf4 	.word	0x20003cf4

08003570 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003570:	4b01      	ldr	r3, [pc, #4]	; (8003578 <xTaskGetTickCount+0x8>)
 8003572:	6818      	ldr	r0, [r3, #0]
}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20003d74 	.word	0x20003d74

0800357c <xTaskGetTickCountFromISR>:
{
 800357c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800357e:	f7ff f8cb 	bl	8002718 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003582:	4b01      	ldr	r3, [pc, #4]	; (8003588 <xTaskGetTickCountFromISR+0xc>)
 8003584:	6818      	ldr	r0, [r3, #0]
}
 8003586:	bd08      	pop	{r3, pc}
 8003588:	20003d74 	.word	0x20003d74

0800358c <xTaskIncrementTick>:
{
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800358e:	4b3c      	ldr	r3, [pc, #240]	; (8003680 <xTaskIncrementTick+0xf4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d168      	bne.n	8003668 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003596:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <xTaskIncrementTick+0xf8>)
 8003598:	681d      	ldr	r5, [r3, #0]
 800359a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800359c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 800359e:	b9c5      	cbnz	r5, 80035d2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80035a0:	4b39      	ldr	r3, [pc, #228]	; (8003688 <xTaskIncrementTick+0xfc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	b143      	cbz	r3, 80035ba <xTaskIncrementTick+0x2e>
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	e7fe      	b.n	80035b8 <xTaskIncrementTick+0x2c>
 80035ba:	4a33      	ldr	r2, [pc, #204]	; (8003688 <xTaskIncrementTick+0xfc>)
 80035bc:	6811      	ldr	r1, [r2, #0]
 80035be:	4b33      	ldr	r3, [pc, #204]	; (800368c <xTaskIncrementTick+0x100>)
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	6010      	str	r0, [r2, #0]
 80035c4:	6019      	str	r1, [r3, #0]
 80035c6:	4a32      	ldr	r2, [pc, #200]	; (8003690 <xTaskIncrementTick+0x104>)
 80035c8:	6813      	ldr	r3, [r2, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	f7ff fe1f 	bl	8003210 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035d2:	4b30      	ldr	r3, [pc, #192]	; (8003694 <xTaskIncrementTick+0x108>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	429d      	cmp	r5, r3
 80035d8:	d23a      	bcs.n	8003650 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 80035da:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035dc:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <xTaskIncrementTick+0x10c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035e6:	009a      	lsls	r2, r3, #2
 80035e8:	4b2c      	ldr	r3, [pc, #176]	; (800369c <xTaskIncrementTick+0x110>)
 80035ea:	589b      	ldr	r3, [r3, r2]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d940      	bls.n	8003672 <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 80035f0:	2401      	movs	r4, #1
 80035f2:	e03e      	b.n	8003672 <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 80035f4:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <xTaskIncrementTick+0xfc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	b353      	cbz	r3, 8003654 <xTaskIncrementTick+0xc8>
 80035fe:	2300      	movs	r3, #0
 8003600:	bb53      	cbnz	r3, 8003658 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <xTaskIncrementTick+0xfc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800360a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800360c:	429d      	cmp	r5, r3
 800360e:	d328      	bcc.n	8003662 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003610:	1d37      	adds	r7, r6, #4
 8003612:	4638      	mov	r0, r7
 8003614:	f7fe feff 	bl	8002416 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003618:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800361a:	b11b      	cbz	r3, 8003624 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800361c:	f106 0018 	add.w	r0, r6, #24
 8003620:	f7fe fef9 	bl	8002416 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003624:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003626:	2201      	movs	r2, #1
 8003628:	409a      	lsls	r2, r3
 800362a:	491d      	ldr	r1, [pc, #116]	; (80036a0 <xTaskIncrementTick+0x114>)
 800362c:	6808      	ldr	r0, [r1, #0]
 800362e:	4302      	orrs	r2, r0
 8003630:	600a      	str	r2, [r1, #0]
 8003632:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003636:	009a      	lsls	r2, r3, #2
 8003638:	4639      	mov	r1, r7
 800363a:	4818      	ldr	r0, [pc, #96]	; (800369c <xTaskIncrementTick+0x110>)
 800363c:	4410      	add	r0, r2
 800363e:	f7fe fec4 	bl	80023ca <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003642:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003644:	4b14      	ldr	r3, [pc, #80]	; (8003698 <xTaskIncrementTick+0x10c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	429a      	cmp	r2, r3
 800364c:	d2d2      	bcs.n	80035f4 <xTaskIncrementTick+0x68>
 800364e:	e7d2      	b.n	80035f6 <xTaskIncrementTick+0x6a>
 8003650:	2400      	movs	r4, #0
 8003652:	e7d0      	b.n	80035f6 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003654:	2301      	movs	r3, #1
 8003656:	e7d3      	b.n	8003600 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003658:	f04f 32ff 	mov.w	r2, #4294967295
 800365c:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <xTaskIncrementTick+0x108>)
 800365e:	601a      	str	r2, [r3, #0]
					break;
 8003660:	e7bc      	b.n	80035dc <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8003662:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <xTaskIncrementTick+0x108>)
 8003664:	6013      	str	r3, [r2, #0]
						break;
 8003666:	e7b9      	b.n	80035dc <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8003668:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <xTaskIncrementTick+0x118>)
 800366a:	6813      	ldr	r3, [r2, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003670:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <xTaskIncrementTick+0x11c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b103      	cbz	r3, 800367a <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 8003678:	2401      	movs	r4, #1
}
 800367a:	4620      	mov	r0, r4
 800367c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800367e:	bf00      	nop
 8003680:	20003cf4 	.word	0x20003cf4
 8003684:	20003d74 	.word	0x20003d74
 8003688:	20003c54 	.word	0x20003c54
 800368c:	20003c58 	.word	0x20003c58
 8003690:	20003d30 	.word	0x20003d30
 8003694:	20003d2c 	.word	0x20003d2c
 8003698:	20003c50 	.word	0x20003c50
 800369c:	20003c5c 	.word	0x20003c5c
 80036a0:	20003cfc 	.word	0x20003cfc
 80036a4:	20003cf0 	.word	0x20003cf0
 80036a8:	20003d78 	.word	0x20003d78

080036ac <xTaskResumeAll>:
{
 80036ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80036ae:	4b35      	ldr	r3, [pc, #212]	; (8003784 <xTaskResumeAll+0xd8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	b943      	cbnz	r3, 80036c6 <xTaskResumeAll+0x1a>
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	e7fe      	b.n	80036c4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80036c6:	f7fe ff15 	bl	80024f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80036ca:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <xTaskResumeAll+0xd8>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	3a01      	subs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d150      	bne.n	800377a <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036d8:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <xTaskResumeAll+0xdc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b923      	cbnz	r3, 80036e8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 80036de:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80036e0:	f7fe ff2a 	bl	8002538 <vPortExitCritical>
}
 80036e4:	4620      	mov	r0, r4
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
 80036e8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036ea:	4b28      	ldr	r3, [pc, #160]	; (800378c <xTaskResumeAll+0xe0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	b31b      	cbz	r3, 8003738 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036f0:	4b26      	ldr	r3, [pc, #152]	; (800378c <xTaskResumeAll+0xe0>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036f6:	f104 0018 	add.w	r0, r4, #24
 80036fa:	f7fe fe8c 	bl	8002416 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036fe:	1d25      	adds	r5, r4, #4
 8003700:	4628      	mov	r0, r5
 8003702:	f7fe fe88 	bl	8002416 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003706:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003708:	2201      	movs	r2, #1
 800370a:	409a      	lsls	r2, r3
 800370c:	4920      	ldr	r1, [pc, #128]	; (8003790 <xTaskResumeAll+0xe4>)
 800370e:	6808      	ldr	r0, [r1, #0]
 8003710:	4302      	orrs	r2, r0
 8003712:	600a      	str	r2, [r1, #0]
 8003714:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003718:	009a      	lsls	r2, r3, #2
 800371a:	4629      	mov	r1, r5
 800371c:	481d      	ldr	r0, [pc, #116]	; (8003794 <xTaskResumeAll+0xe8>)
 800371e:	4410      	add	r0, r2
 8003720:	f7fe fe53 	bl	80023ca <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003724:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003726:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <xTaskResumeAll+0xec>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	429a      	cmp	r2, r3
 800372e:	d3dc      	bcc.n	80036ea <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8003730:	2201      	movs	r2, #1
 8003732:	4b1a      	ldr	r3, [pc, #104]	; (800379c <xTaskResumeAll+0xf0>)
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e7d8      	b.n	80036ea <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8003738:	b10c      	cbz	r4, 800373e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800373a:	f7ff fd69 	bl	8003210 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <xTaskResumeAll+0xf4>)
 8003740:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003742:	b974      	cbnz	r4, 8003762 <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 8003744:	4b15      	ldr	r3, [pc, #84]	; (800379c <xTaskResumeAll+0xf0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	b1cb      	cbz	r3, 800377e <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 800374a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374e:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <xTaskResumeAll+0xf8>)
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800375a:	2401      	movs	r4, #1
 800375c:	e7c0      	b.n	80036e0 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800375e:	3c01      	subs	r4, #1
 8003760:	d007      	beq.n	8003772 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 8003762:	f7ff ff13 	bl	800358c <xTaskIncrementTick>
 8003766:	2800      	cmp	r0, #0
 8003768:	d0f9      	beq.n	800375e <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 800376a:	2201      	movs	r2, #1
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <xTaskResumeAll+0xf0>)
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e7f5      	b.n	800375e <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8003772:	2200      	movs	r2, #0
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <xTaskResumeAll+0xf4>)
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e7e4      	b.n	8003744 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 800377a:	2400      	movs	r4, #0
 800377c:	e7b0      	b.n	80036e0 <xTaskResumeAll+0x34>
 800377e:	2400      	movs	r4, #0
 8003780:	e7ae      	b.n	80036e0 <xTaskResumeAll+0x34>
 8003782:	bf00      	nop
 8003784:	20003cf4 	.word	0x20003cf4
 8003788:	20003ce8 	.word	0x20003ce8
 800378c:	20003d34 	.word	0x20003d34
 8003790:	20003cfc 	.word	0x20003cfc
 8003794:	20003c5c 	.word	0x20003c5c
 8003798:	20003c50 	.word	0x20003c50
 800379c:	20003d78 	.word	0x20003d78
 80037a0:	20003cf0 	.word	0x20003cf0
 80037a4:	e000ed04 	.word	0xe000ed04

080037a8 <vTaskDelay>:
	{
 80037a8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037aa:	b1a8      	cbz	r0, 80037d8 <vTaskDelay+0x30>
 80037ac:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <vTaskDelay+0x48>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	b143      	cbz	r3, 80037c6 <vTaskDelay+0x1e>
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	e7fe      	b.n	80037c4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80037c6:	f7ff fecb 	bl	8003560 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037ca:	2100      	movs	r1, #0
 80037cc:	4620      	mov	r0, r4
 80037ce:	f7ff fe0b 	bl	80033e8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80037d2:	f7ff ff6b 	bl	80036ac <xTaskResumeAll>
 80037d6:	e000      	b.n	80037da <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 80037d8:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 80037da:	b938      	cbnz	r0, 80037ec <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80037dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e0:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <vTaskDelay+0x4c>)
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	bd10      	pop	{r4, pc}
 80037ee:	bf00      	nop
 80037f0:	20003cf4 	.word	0x20003cf4
 80037f4:	e000ed04 	.word	0xe000ed04

080037f8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037f8:	4b13      	ldr	r3, [pc, #76]	; (8003848 <prvCheckTasksWaitingTermination+0x50>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	b313      	cbz	r3, 8003844 <prvCheckTasksWaitingTermination+0x4c>
{
 80037fe:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8003800:	f7ff feae 	bl	8003560 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <prvCheckTasksWaitingTermination+0x54>)
 8003806:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8003808:	f7ff ff50 	bl	80036ac <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800380c:	b924      	cbnz	r4, 8003818 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <prvCheckTasksWaitingTermination+0x50>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f4      	bne.n	8003800 <prvCheckTasksWaitingTermination+0x8>
}
 8003816:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8003818:	f7fe fe6c 	bl	80024f4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <prvCheckTasksWaitingTermination+0x54>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003822:	1d20      	adds	r0, r4, #4
 8003824:	f7fe fdf7 	bl	8002416 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003828:	4a09      	ldr	r2, [pc, #36]	; (8003850 <prvCheckTasksWaitingTermination+0x58>)
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	3b01      	subs	r3, #1
 800382e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003830:	4a05      	ldr	r2, [pc, #20]	; (8003848 <prvCheckTasksWaitingTermination+0x50>)
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	3b01      	subs	r3, #1
 8003836:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8003838:	f7fe fe7e 	bl	8002538 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 800383c:	4620      	mov	r0, r4
 800383e:	f7ff fd01 	bl	8003244 <prvDeleteTCB>
 8003842:	e7e4      	b.n	800380e <prvCheckTasksWaitingTermination+0x16>
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20003cec 	.word	0x20003cec
 800384c:	20003d60 	.word	0x20003d60
 8003850:	20003ce8 	.word	0x20003ce8

08003854 <prvIdleTask>:
{
 8003854:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8003856:	f7ff ffcf 	bl	80037f8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <prvIdleTask+0x20>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d9f9      	bls.n	8003856 <prvIdleTask+0x2>
				taskYIELD();
 8003862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003866:	4b04      	ldr	r3, [pc, #16]	; (8003878 <prvIdleTask+0x24>)
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	e7f0      	b.n	8003856 <prvIdleTask+0x2>
 8003874:	20003c5c 	.word	0x20003c5c
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800387c:	4b21      	ldr	r3, [pc, #132]	; (8003904 <vTaskSwitchContext+0x88>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	b9c3      	cbnz	r3, 80038b4 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 8003882:	2200      	movs	r2, #0
 8003884:	4b20      	ldr	r3, [pc, #128]	; (8003908 <vTaskSwitchContext+0x8c>)
 8003886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003888:	4b20      	ldr	r3, [pc, #128]	; (800390c <vTaskSwitchContext+0x90>)
 800388a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f1c3 031f 	rsb	r3, r3, #31
 8003896:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800389a:	008a      	lsls	r2, r1, #2
 800389c:	491c      	ldr	r1, [pc, #112]	; (8003910 <vTaskSwitchContext+0x94>)
 800389e:	588a      	ldr	r2, [r1, r2]
 80038a0:	b962      	cbnz	r2, 80038bc <vTaskSwitchContext+0x40>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	e7fe      	b.n	80038b2 <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 80038b4:	2201      	movs	r2, #1
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <vTaskSwitchContext+0x8c>)
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	4770      	bx	lr
{
 80038bc:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038be:	4814      	ldr	r0, [pc, #80]	; (8003910 <vTaskSwitchContext+0x94>)
 80038c0:	009a      	lsls	r2, r3, #2
 80038c2:	18d4      	adds	r4, r2, r3
 80038c4:	00a1      	lsls	r1, r4, #2
 80038c6:	4401      	add	r1, r0
 80038c8:	684c      	ldr	r4, [r1, #4]
 80038ca:	6864      	ldr	r4, [r4, #4]
 80038cc:	604c      	str	r4, [r1, #4]
 80038ce:	441a      	add	r2, r3
 80038d0:	0091      	lsls	r1, r2, #2
 80038d2:	3108      	adds	r1, #8
 80038d4:	4408      	add	r0, r1
 80038d6:	4284      	cmp	r4, r0
 80038d8:	d00b      	beq.n	80038f2 <vTaskSwitchContext+0x76>
 80038da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038de:	009a      	lsls	r2, r3, #2
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <vTaskSwitchContext+0x94>)
 80038e2:	4413      	add	r3, r2
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <vTaskSwitchContext+0x98>)
 80038ea:	601a      	str	r2, [r3, #0]
}
 80038ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038f0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038f2:	6860      	ldr	r0, [r4, #4]
 80038f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80038f8:	0091      	lsls	r1, r2, #2
 80038fa:	4a05      	ldr	r2, [pc, #20]	; (8003910 <vTaskSwitchContext+0x94>)
 80038fc:	440a      	add	r2, r1
 80038fe:	6050      	str	r0, [r2, #4]
 8003900:	e7eb      	b.n	80038da <vTaskSwitchContext+0x5e>
 8003902:	bf00      	nop
 8003904:	20003cf4 	.word	0x20003cf4
 8003908:	20003d78 	.word	0x20003d78
 800390c:	20003cfc 	.word	0x20003cfc
 8003910:	20003c5c 	.word	0x20003c5c
 8003914:	20003c50 	.word	0x20003c50

08003918 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003918:	b940      	cbnz	r0, 800392c <vTaskPlaceOnEventList+0x14>
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	e7fe      	b.n	800392a <vTaskPlaceOnEventList+0x12>
{
 800392c:	b510      	push	{r4, lr}
 800392e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <vTaskPlaceOnEventList+0x2c>)
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	3118      	adds	r1, #24
 8003936:	f7fe fd54 	bl	80023e2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800393a:	2101      	movs	r1, #1
 800393c:	4620      	mov	r0, r4
 800393e:	f7ff fd53 	bl	80033e8 <prvAddCurrentTaskToDelayedList>
 8003942:	bd10      	pop	{r4, pc}
 8003944:	20003c50 	.word	0x20003c50

08003948 <xTaskRemoveFromEventList>:
{
 8003948:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800394a:	68c3      	ldr	r3, [r0, #12]
 800394c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800394e:	b324      	cbz	r4, 800399a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003950:	f104 0518 	add.w	r5, r4, #24
 8003954:	4628      	mov	r0, r5
 8003956:	f7fe fd5e 	bl	8002416 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <xTaskRemoveFromEventList+0x74>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	bb2b      	cbnz	r3, 80039ac <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003960:	1d25      	adds	r5, r4, #4
 8003962:	4628      	mov	r0, r5
 8003964:	f7fe fd57 	bl	8002416 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003968:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800396a:	2201      	movs	r2, #1
 800396c:	409a      	lsls	r2, r3
 800396e:	4914      	ldr	r1, [pc, #80]	; (80039c0 <xTaskRemoveFromEventList+0x78>)
 8003970:	6808      	ldr	r0, [r1, #0]
 8003972:	4302      	orrs	r2, r0
 8003974:	600a      	str	r2, [r1, #0]
 8003976:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800397a:	009a      	lsls	r2, r3, #2
 800397c:	4629      	mov	r1, r5
 800397e:	4811      	ldr	r0, [pc, #68]	; (80039c4 <xTaskRemoveFromEventList+0x7c>)
 8003980:	4410      	add	r0, r2
 8003982:	f7fe fd22 	bl	80023ca <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003986:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <xTaskRemoveFromEventList+0x80>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	429a      	cmp	r2, r3
 8003990:	d911      	bls.n	80039b6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8003992:	2001      	movs	r0, #1
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <xTaskRemoveFromEventList+0x84>)
 8003996:	6018      	str	r0, [r3, #0]
 8003998:	bd38      	pop	{r3, r4, r5, pc}
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	e7fe      	b.n	80039aa <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039ac:	4629      	mov	r1, r5
 80039ae:	4808      	ldr	r0, [pc, #32]	; (80039d0 <xTaskRemoveFromEventList+0x88>)
 80039b0:	f7fe fd0b 	bl	80023ca <vListInsertEnd>
 80039b4:	e7e7      	b.n	8003986 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80039b6:	2000      	movs	r0, #0
}
 80039b8:	bd38      	pop	{r3, r4, r5, pc}
 80039ba:	bf00      	nop
 80039bc:	20003cf4 	.word	0x20003cf4
 80039c0:	20003cfc 	.word	0x20003cfc
 80039c4:	20003c5c 	.word	0x20003c5c
 80039c8:	20003c50 	.word	0x20003c50
 80039cc:	20003d78 	.word	0x20003d78
 80039d0:	20003d34 	.word	0x20003d34

080039d4 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 80039d4:	b130      	cbz	r0, 80039e4 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039d6:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <vTaskSetTimeOutState+0x24>)
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039dc:	4a07      	ldr	r2, [pc, #28]	; (80039fc <vTaskSetTimeOutState+0x28>)
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	6042      	str	r2, [r0, #4]
 80039e2:	4770      	bx	lr
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	e7fe      	b.n	80039f4 <vTaskSetTimeOutState+0x20>
 80039f6:	bf00      	nop
 80039f8:	20003d30 	.word	0x20003d30
 80039fc:	20003d74 	.word	0x20003d74

08003a00 <xTaskCheckForTimeOut>:
{
 8003a00:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8003a02:	b1c0      	cbz	r0, 8003a36 <xTaskCheckForTimeOut+0x36>
 8003a04:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8003a06:	b1f9      	cbz	r1, 8003a48 <xTaskCheckForTimeOut+0x48>
 8003a08:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8003a0a:	f7fe fd73 	bl	80024f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <xTaskCheckForTimeOut+0x78>)
 8003a10:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003a12:	682b      	ldr	r3, [r5, #0]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d02a      	beq.n	8003a70 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a1a:	6820      	ldr	r0, [r4, #0]
 8003a1c:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <xTaskCheckForTimeOut+0x7c>)
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	4290      	cmp	r0, r2
 8003a22:	d002      	beq.n	8003a2a <xTaskCheckForTimeOut+0x2a>
 8003a24:	6862      	ldr	r2, [r4, #4]
 8003a26:	4291      	cmp	r1, r2
 8003a28:	d224      	bcs.n	8003a74 <xTaskCheckForTimeOut+0x74>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a2a:	6862      	ldr	r2, [r4, #4]
 8003a2c:	1a88      	subs	r0, r1, r2
 8003a2e:	4283      	cmp	r3, r0
 8003a30:	d813      	bhi.n	8003a5a <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8003a32:	2401      	movs	r4, #1
 8003a34:	e018      	b.n	8003a68 <xTaskCheckForTimeOut+0x68>
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	e7fe      	b.n	8003a46 <xTaskCheckForTimeOut+0x46>
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	e7fe      	b.n	8003a58 <xTaskCheckForTimeOut+0x58>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003a5a:	1a52      	subs	r2, r2, r1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003a60:	4620      	mov	r0, r4
 8003a62:	f7ff ffb7 	bl	80039d4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003a66:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003a68:	f7fe fd66 	bl	8002538 <vPortExitCritical>
}
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 8003a70:	2400      	movs	r4, #0
 8003a72:	e7f9      	b.n	8003a68 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8003a74:	2401      	movs	r4, #1
 8003a76:	e7f7      	b.n	8003a68 <xTaskCheckForTimeOut+0x68>
 8003a78:	20003d74 	.word	0x20003d74
 8003a7c:	20003d30 	.word	0x20003d30

08003a80 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003a80:	2201      	movs	r2, #1
 8003a82:	4b01      	ldr	r3, [pc, #4]	; (8003a88 <vTaskMissedYield+0x8>)
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	4770      	bx	lr
 8003a88:	20003d78 	.word	0x20003d78

08003a8c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <xTaskGetSchedulerState+0x18>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	b123      	cbz	r3, 8003a9c <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <xTaskGetSchedulerState+0x1c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	b91b      	cbnz	r3, 8003aa0 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8003a98:	2002      	movs	r0, #2
 8003a9a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8003aa0:	2000      	movs	r0, #0
	}
 8003aa2:	4770      	bx	lr
 8003aa4:	20003d48 	.word	0x20003d48
 8003aa8:	20003cf4 	.word	0x20003cf4

08003aac <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d047      	beq.n	8003b40 <vTaskPriorityInherit+0x94>
	{
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003ab4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003ab6:	4923      	ldr	r1, [pc, #140]	; (8003b44 <vTaskPriorityInherit+0x98>)
 8003ab8:	6809      	ldr	r1, [r1, #0]
 8003aba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003abc:	428b      	cmp	r3, r1
 8003abe:	d216      	bcs.n	8003aee <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003ac0:	6981      	ldr	r1, [r0, #24]
 8003ac2:	2900      	cmp	r1, #0
 8003ac4:	db05      	blt.n	8003ad2 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac6:	491f      	ldr	r1, [pc, #124]	; (8003b44 <vTaskPriorityInherit+0x98>)
 8003ac8:	6809      	ldr	r1, [r1, #0]
 8003aca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003acc:	f1c1 0107 	rsb	r1, r1, #7
 8003ad0:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003ad2:	6960      	ldr	r0, [r4, #20]
 8003ad4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ad8:	0099      	lsls	r1, r3, #2
 8003ada:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <vTaskPriorityInherit+0x9c>)
 8003adc:	440b      	add	r3, r1
 8003ade:	4298      	cmp	r0, r3
 8003ae0:	d006      	beq.n	8003af0 <vTaskPriorityInherit+0x44>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	b933      	cbnz	r3, 8003af4 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <vTaskPriorityInherit+0x98>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003aee:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003af0:	2301      	movs	r3, #1
 8003af2:	e7f7      	b.n	8003ae4 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003af4:	1d25      	adds	r5, r4, #4
 8003af6:	4628      	mov	r0, r5
 8003af8:	f7fe fc8d 	bl	8002416 <uxListRemove>
 8003afc:	b968      	cbnz	r0, 8003b1a <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003afe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b00:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003b04:	008a      	lsls	r2, r1, #2
 8003b06:	4910      	ldr	r1, [pc, #64]	; (8003b48 <vTaskPriorityInherit+0x9c>)
 8003b08:	588a      	ldr	r2, [r1, r2]
 8003b0a:	b932      	cbnz	r2, 8003b1a <vTaskPriorityInherit+0x6e>
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	490e      	ldr	r1, [pc, #56]	; (8003b4c <vTaskPriorityInherit+0xa0>)
 8003b12:	680b      	ldr	r3, [r1, #0]
 8003b14:	ea23 0302 	bic.w	r3, r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <vTaskPriorityInherit+0x98>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003b22:	2201      	movs	r2, #1
 8003b24:	409a      	lsls	r2, r3
 8003b26:	4909      	ldr	r1, [pc, #36]	; (8003b4c <vTaskPriorityInherit+0xa0>)
 8003b28:	6808      	ldr	r0, [r1, #0]
 8003b2a:	4302      	orrs	r2, r0
 8003b2c:	600a      	str	r2, [r1, #0]
 8003b2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b32:	009a      	lsls	r2, r3, #2
 8003b34:	4629      	mov	r1, r5
 8003b36:	4804      	ldr	r0, [pc, #16]	; (8003b48 <vTaskPriorityInherit+0x9c>)
 8003b38:	4410      	add	r0, r2
 8003b3a:	f7fe fc46 	bl	80023ca <vListInsertEnd>
 8003b3e:	bd38      	pop	{r3, r4, r5, pc}
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20003c50 	.word	0x20003c50
 8003b48:	20003c5c 	.word	0x20003c5c
 8003b4c:	20003cfc 	.word	0x20003cfc

08003b50 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d04a      	beq.n	8003bea <xTaskPriorityDisinherit+0x9a>
	{
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8003b58:	4a27      	ldr	r2, [pc, #156]	; (8003bf8 <xTaskPriorityDisinherit+0xa8>)
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	4290      	cmp	r0, r2
 8003b5e:	d008      	beq.n	8003b72 <xTaskPriorityDisinherit+0x22>
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	e7fe      	b.n	8003b70 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b72:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003b74:	b942      	cbnz	r2, 8003b88 <xTaskPriorityDisinherit+0x38>
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	e7fe      	b.n	8003b86 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8003b88:	3a01      	subs	r2, #1
 8003b8a:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b8c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003b8e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003b90:	4288      	cmp	r0, r1
 8003b92:	d02c      	beq.n	8003bee <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b94:	bb6a      	cbnz	r2, 8003bf2 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b96:	1d25      	adds	r5, r4, #4
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f7fe fc3c 	bl	8002416 <uxListRemove>
 8003b9e:	b970      	cbnz	r0, 8003bbe <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ba0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ba2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003ba6:	008b      	lsls	r3, r1, #2
 8003ba8:	4914      	ldr	r1, [pc, #80]	; (8003bfc <xTaskPriorityDisinherit+0xac>)
 8003baa:	58cb      	ldr	r3, [r1, r3]
 8003bac:	b93b      	cbnz	r3, 8003bbe <xTaskPriorityDisinherit+0x6e>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	fa03 f202 	lsl.w	r2, r3, r2
 8003bb4:	4912      	ldr	r1, [pc, #72]	; (8003c00 <xTaskPriorityDisinherit+0xb0>)
 8003bb6:	680b      	ldr	r3, [r1, #0]
 8003bb8:	ea23 0302 	bic.w	r3, r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bc2:	f1c3 0207 	rsb	r2, r3, #7
 8003bc6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003bc8:	2401      	movs	r4, #1
 8003bca:	fa04 f203 	lsl.w	r2, r4, r3
 8003bce:	490c      	ldr	r1, [pc, #48]	; (8003c00 <xTaskPriorityDisinherit+0xb0>)
 8003bd0:	6808      	ldr	r0, [r1, #0]
 8003bd2:	4302      	orrs	r2, r0
 8003bd4:	600a      	str	r2, [r1, #0]
 8003bd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bda:	009a      	lsls	r2, r3, #2
 8003bdc:	4629      	mov	r1, r5
 8003bde:	4807      	ldr	r0, [pc, #28]	; (8003bfc <xTaskPriorityDisinherit+0xac>)
 8003be0:	4410      	add	r0, r2
 8003be2:	f7fe fbf2 	bl	80023ca <vListInsertEnd>
					xReturn = pdTRUE;
 8003be6:	4620      	mov	r0, r4
 8003be8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8003bea:	2000      	movs	r0, #0
 8003bec:	4770      	bx	lr
 8003bee:	2000      	movs	r0, #0
 8003bf0:	bd38      	pop	{r3, r4, r5, pc}
 8003bf2:	2000      	movs	r0, #0
	}
 8003bf4:	bd38      	pop	{r3, r4, r5, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20003c50 	.word	0x20003c50
 8003bfc:	20003c5c 	.word	0x20003c5c
 8003c00:	20003cfc 	.word	0x20003cfc

08003c04 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <pvTaskIncrementMutexHeldCount+0x18>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b123      	cbz	r3, 8003c14 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003c0a:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <pvTaskIncrementMutexHeldCount+0x18>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8003c10:	3301      	adds	r3, #1
 8003c12:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8003c14:	4b01      	ldr	r3, [pc, #4]	; (8003c1c <pvTaskIncrementMutexHeldCount+0x18>)
 8003c16:	6818      	ldr	r0, [r3, #0]
	}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20003c50 	.word	0x20003c50

08003c20 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8003c20:	b510      	push	{r4, lr}
 8003c22:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003c24:	680a      	ldr	r2, [r1, #0]
 8003c26:	320c      	adds	r2, #12
 8003c28:	f001 fb52 	bl	80052d0 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	b908      	cbnz	r0, 8003c34 <netconn_apimsg+0x14>
    return apimsg->err;
 8003c30:	f994 3004 	ldrsb.w	r3, [r4, #4]
  }
  return err;
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd10      	pop	{r4, pc}

08003c38 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8003c38:	b500      	push	{lr}
 8003c3a:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003c3c:	b160      	cbz	r0, 8003c58 <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8003c3e:	9001      	str	r0, [sp, #4]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8003c40:	f88d 100c 	strb.w	r1, [sp, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8003c44:	2329      	movs	r3, #41	; 0x29
 8003c46:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8003c4a:	a901      	add	r1, sp, #4
 8003c4c:	4807      	ldr	r0, [pc, #28]	; (8003c6c <netconn_close_shutdown+0x34>)
 8003c4e:	f7ff ffe7 	bl	8003c20 <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 8003c52:	b007      	add	sp, #28
 8003c54:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <netconn_close_shutdown+0x38>)
 8003c5a:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003c5e:	4905      	ldr	r1, [pc, #20]	; (8003c74 <netconn_close_shutdown+0x3c>)
 8003c60:	4805      	ldr	r0, [pc, #20]	; (8003c78 <netconn_close_shutdown+0x40>)
 8003c62:	f008 fc92 	bl	800c58a <iprintf>
 8003c66:	f06f 000f 	mvn.w	r0, #15
 8003c6a:	e7f2      	b.n	8003c52 <netconn_close_shutdown+0x1a>
 8003c6c:	08004fb1 	.word	0x08004fb1
 8003c70:	0800c880 	.word	0x0800c880
 8003c74:	0800c8b4 	.word	0x0800c8b4
 8003c78:	0800c8d0 	.word	0x0800c8d0

08003c7c <netconn_recv_data>:
{
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	b086      	sub	sp, #24
  void *buf = NULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8003c84:	b1b1      	cbz	r1, 8003cb4 <netconn_recv_data+0x38>
 8003c86:	4604      	mov	r4, r0
 8003c88:	460d      	mov	r5, r1
  *new_buf = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8003c8e:	b1d8      	cbz	r0, 8003cc8 <netconn_recv_data+0x4c>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8003c90:	7803      	ldrb	r3, [r0, #0]
 8003c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c96:	2b10      	cmp	r3, #16
 8003c98:	d020      	beq.n	8003cdc <netconn_recv_data+0x60>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8003c9a:	f104 0610 	add.w	r6, r4, #16
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f007 fe5a 	bl	800b958 <sys_mbox_valid>
 8003ca4:	b340      	cbz	r0, 8003cf8 <netconn_recv_data+0x7c>
  if (ERR_IS_FATAL(conn->last_err)) {
 8003ca6:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8003caa:	f110 0f0c 	cmn.w	r0, #12
 8003cae:	da2d      	bge.n	8003d0c <netconn_recv_data+0x90>
}
 8003cb0:	b006      	add	sp, #24
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8003cb4:	4b3a      	ldr	r3, [pc, #232]	; (8003da0 <netconn_recv_data+0x124>)
 8003cb6:	f240 12e7 	movw	r2, #487	; 0x1e7
 8003cba:	493a      	ldr	r1, [pc, #232]	; (8003da4 <netconn_recv_data+0x128>)
 8003cbc:	483a      	ldr	r0, [pc, #232]	; (8003da8 <netconn_recv_data+0x12c>)
 8003cbe:	f008 fc64 	bl	800c58a <iprintf>
 8003cc2:	f06f 000f 	mvn.w	r0, #15
 8003cc6:	e7f3      	b.n	8003cb0 <netconn_recv_data+0x34>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8003cc8:	4b35      	ldr	r3, [pc, #212]	; (8003da0 <netconn_recv_data+0x124>)
 8003cca:	f240 12e9 	movw	r2, #489	; 0x1e9
 8003cce:	4937      	ldr	r1, [pc, #220]	; (8003dac <netconn_recv_data+0x130>)
 8003cd0:	4835      	ldr	r0, [pc, #212]	; (8003da8 <netconn_recv_data+0x12c>)
 8003cd2:	f008 fc5a 	bl	800c58a <iprintf>
 8003cd6:	f06f 000f 	mvn.w	r0, #15
 8003cda:	e7e9      	b.n	8003cb0 <netconn_recv_data+0x34>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8003cdc:	3010      	adds	r0, #16
 8003cde:	f007 fe3b 	bl	800b958 <sys_mbox_valid>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d1d9      	bne.n	8003c9a <netconn_recv_data+0x1e>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8003ce6:	f104 0014 	add.w	r0, r4, #20
 8003cea:	f007 fe35 	bl	800b958 <sys_mbox_valid>
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	d053      	beq.n	8003d9a <netconn_recv_data+0x11e>
 8003cf2:	f06f 000a 	mvn.w	r0, #10
 8003cf6:	e7db      	b.n	8003cb0 <netconn_recv_data+0x34>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <netconn_recv_data+0x124>)
 8003cfa:	f240 12f5 	movw	r2, #501	; 0x1f5
 8003cfe:	492c      	ldr	r1, [pc, #176]	; (8003db0 <netconn_recv_data+0x134>)
 8003d00:	4829      	ldr	r0, [pc, #164]	; (8003da8 <netconn_recv_data+0x12c>)
 8003d02:	f008 fc42 	bl	800c58a <iprintf>
 8003d06:	f06f 000a 	mvn.w	r0, #10
 8003d0a:	e7d1      	b.n	8003cb0 <netconn_recv_data+0x34>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	a905      	add	r1, sp, #20
 8003d10:	4630      	mov	r0, r6
 8003d12:	f007 fde2 	bl	800b8da <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8003d16:	7823      	ldrb	r3, [r4, #0]
 8003d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d00e      	beq.n	8003d3e <netconn_recv_data+0xc2>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8003d20:	9b05      	ldr	r3, [sp, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d031      	beq.n	8003d8a <netconn_recv_data+0x10e>
    len = netbuf_len((struct netbuf*)buf);
 8003d26:	9b05      	ldr	r3, [sp, #20]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8003d2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d2e:	b113      	cbz	r3, 8003d36 <netconn_recv_data+0xba>
 8003d30:	2101      	movs	r1, #1
 8003d32:	4620      	mov	r0, r4
 8003d34:	4798      	blx	r3
  *new_buf = buf;
 8003d36:	9b05      	ldr	r3, [sp, #20]
 8003d38:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	e7b8      	b.n	8003cb0 <netconn_recv_data+0x34>
    API_MSG_VAR_REF(msg).conn = conn;
 8003d3e:	9400      	str	r4, [sp, #0]
    if (buf != NULL) {
 8003d40:	9b05      	ldr	r3, [sp, #20]
 8003d42:	b14b      	cbz	r3, 8003d58 <netconn_recv_data+0xdc>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8003d44:	891b      	ldrh	r3, [r3, #8]
 8003d46:	9302      	str	r3, [sp, #8]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8003d48:	4669      	mov	r1, sp
 8003d4a:	481a      	ldr	r0, [pc, #104]	; (8003db4 <netconn_recv_data+0x138>)
 8003d4c:	f7ff ff68 	bl	8003c20 <netconn_apimsg>
    if (buf == NULL) {
 8003d50:	9b05      	ldr	r3, [sp, #20]
 8003d52:	b123      	cbz	r3, 8003d5e <netconn_recv_data+0xe2>
    len = ((struct pbuf *)buf)->tot_len;
 8003d54:	891a      	ldrh	r2, [r3, #8]
 8003d56:	e7e9      	b.n	8003d2c <netconn_recv_data+0xb0>
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	9302      	str	r3, [sp, #8]
 8003d5c:	e7f4      	b.n	8003d48 <netconn_recv_data+0xcc>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8003d5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d60:	b11b      	cbz	r3, 8003d6a <netconn_recv_data+0xee>
 8003d62:	2200      	movs	r2, #0
 8003d64:	2101      	movs	r1, #1
 8003d66:	4620      	mov	r0, r4
 8003d68:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8003d6a:	6863      	ldr	r3, [r4, #4]
 8003d6c:	b933      	cbnz	r3, 8003d7c <netconn_recv_data+0x100>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8003d6e:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d19c      	bne.n	8003cb0 <netconn_recv_data+0x34>
 8003d76:	f06f 000d 	mvn.w	r0, #13
 8003d7a:	e799      	b.n	8003cb0 <netconn_recv_data+0x34>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f7ff ff5a 	bl	8003c38 <netconn_close_shutdown>
      return ERR_CLSD;
 8003d84:	f06f 000e 	mvn.w	r0, #14
 8003d88:	e792      	b.n	8003cb0 <netconn_recv_data+0x34>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <netconn_recv_data+0x124>)
 8003d8c:	f240 223e 	movw	r2, #574	; 0x23e
 8003d90:	4909      	ldr	r1, [pc, #36]	; (8003db8 <netconn_recv_data+0x13c>)
 8003d92:	4805      	ldr	r0, [pc, #20]	; (8003da8 <netconn_recv_data+0x12c>)
 8003d94:	f008 fbf9 	bl	800c58a <iprintf>
 8003d98:	e7c5      	b.n	8003d26 <netconn_recv_data+0xaa>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8003d9a:	f06f 000e 	mvn.w	r0, #14
 8003d9e:	e787      	b.n	8003cb0 <netconn_recv_data+0x34>
 8003da0:	0800c880 	.word	0x0800c880
 8003da4:	0800c994 	.word	0x0800c994
 8003da8:	0800c8d0 	.word	0x0800c8d0
 8003dac:	0800c9b4 	.word	0x0800c9b4
 8003db0:	0800c9d0 	.word	0x0800c9d0
 8003db4:	08004f59 	.word	0x08004f59
 8003db8:	0800c9f0 	.word	0x0800c9f0

08003dbc <netconn_new_with_proto_and_callback>:
{
 8003dbc:	b570      	push	{r4, r5, r6, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	460d      	mov	r5, r1
  conn = netconn_alloc(t, callback);
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	f000 fe14 	bl	80049f0 <netconn_alloc>
  if (conn != NULL) {
 8003dc8:	4604      	mov	r4, r0
 8003dca:	b140      	cbz	r0, 8003dde <netconn_new_with_proto_and_callback+0x22>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8003dcc:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 8003dd0:	a906      	add	r1, sp, #24
 8003dd2:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8003dd6:	4820      	ldr	r0, [pc, #128]	; (8003e58 <netconn_new_with_proto_and_callback+0x9c>)
 8003dd8:	f7ff ff22 	bl	8003c20 <netconn_apimsg>
    if (err != ERR_OK) {
 8003ddc:	b910      	cbnz	r0, 8003de4 <netconn_new_with_proto_and_callback+0x28>
}
 8003dde:	4620      	mov	r0, r4
 8003de0:	b006      	add	sp, #24
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8003de4:	6863      	ldr	r3, [r4, #4]
 8003de6:	b12b      	cbz	r3, 8003df4 <netconn_new_with_proto_and_callback+0x38>
 8003de8:	4b1c      	ldr	r3, [pc, #112]	; (8003e5c <netconn_new_with_proto_and_callback+0xa0>)
 8003dea:	2289      	movs	r2, #137	; 0x89
 8003dec:	491c      	ldr	r1, [pc, #112]	; (8003e60 <netconn_new_with_proto_and_callback+0xa4>)
 8003dee:	481d      	ldr	r0, [pc, #116]	; (8003e64 <netconn_new_with_proto_and_callback+0xa8>)
 8003df0:	f008 fbcb 	bl	800c58a <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8003df4:	f104 0510 	add.w	r5, r4, #16
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f007 fdad 	bl	800b958 <sys_mbox_valid>
 8003dfe:	b1b0      	cbz	r0, 8003e2e <netconn_new_with_proto_and_callback+0x72>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8003e00:	f104 0014 	add.w	r0, r4, #20
 8003e04:	f007 fda8 	bl	800b958 <sys_mbox_valid>
 8003e08:	b9c0      	cbnz	r0, 8003e3c <netconn_new_with_proto_and_callback+0x80>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8003e0a:	f104 060c 	add.w	r6, r4, #12
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f007 fdec 	bl	800b9ec <sys_sem_valid>
 8003e14:	b1c8      	cbz	r0, 8003e4a <netconn_new_with_proto_and_callback+0x8e>
      sys_sem_free(&conn->op_completed);
 8003e16:	4630      	mov	r0, r6
 8003e18:	f007 fde3 	bl	800b9e2 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	f007 fd3d 	bl	800b89c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8003e22:	4621      	mov	r1, r4
 8003e24:	2007      	movs	r0, #7
 8003e26:	f003 f8eb 	bl	8007000 <memp_free>
      return NULL;
 8003e2a:	2400      	movs	r4, #0
 8003e2c:	e7d7      	b.n	8003dde <netconn_new_with_proto_and_callback+0x22>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <netconn_new_with_proto_and_callback+0xa0>)
 8003e30:	228a      	movs	r2, #138	; 0x8a
 8003e32:	490d      	ldr	r1, [pc, #52]	; (8003e68 <netconn_new_with_proto_and_callback+0xac>)
 8003e34:	480b      	ldr	r0, [pc, #44]	; (8003e64 <netconn_new_with_proto_and_callback+0xa8>)
 8003e36:	f008 fba8 	bl	800c58a <iprintf>
 8003e3a:	e7e1      	b.n	8003e00 <netconn_new_with_proto_and_callback+0x44>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8003e3c:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <netconn_new_with_proto_and_callback+0xa0>)
 8003e3e:	228c      	movs	r2, #140	; 0x8c
 8003e40:	490a      	ldr	r1, [pc, #40]	; (8003e6c <netconn_new_with_proto_and_callback+0xb0>)
 8003e42:	4808      	ldr	r0, [pc, #32]	; (8003e64 <netconn_new_with_proto_and_callback+0xa8>)
 8003e44:	f008 fba1 	bl	800c58a <iprintf>
 8003e48:	e7df      	b.n	8003e0a <netconn_new_with_proto_and_callback+0x4e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <netconn_new_with_proto_and_callback+0xa0>)
 8003e4c:	228f      	movs	r2, #143	; 0x8f
 8003e4e:	4908      	ldr	r1, [pc, #32]	; (8003e70 <netconn_new_with_proto_and_callback+0xb4>)
 8003e50:	4804      	ldr	r0, [pc, #16]	; (8003e64 <netconn_new_with_proto_and_callback+0xa8>)
 8003e52:	f008 fb9a 	bl	800c58a <iprintf>
 8003e56:	e7de      	b.n	8003e16 <netconn_new_with_proto_and_callback+0x5a>
 8003e58:	080049bd 	.word	0x080049bd
 8003e5c:	0800c880 	.word	0x0800c880
 8003e60:	0800c918 	.word	0x0800c918
 8003e64:	0800c8d0 	.word	0x0800c8d0
 8003e68:	0800c93c 	.word	0x0800c93c
 8003e6c:	0800c954 	.word	0x0800c954
 8003e70:	0800c978 	.word	0x0800c978

08003e74 <netconn_delete>:
{
 8003e74:	b530      	push	{r4, r5, lr}
 8003e76:	b087      	sub	sp, #28
  if (conn == NULL) {
 8003e78:	b188      	cbz	r0, 8003e9e <netconn_delete+0x2a>
 8003e7a:	4604      	mov	r4, r0
  API_MSG_VAR_REF(msg).conn = conn;
 8003e7c:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8003e7e:	2329      	movs	r3, #41	; 0x29
 8003e80:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8003e84:	a901      	add	r1, sp, #4
 8003e86:	4807      	ldr	r0, [pc, #28]	; (8003ea4 <netconn_delete+0x30>)
 8003e88:	f7ff feca 	bl	8003c20 <netconn_apimsg>
  if (err != ERR_OK) {
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	b110      	cbz	r0, 8003e96 <netconn_delete+0x22>
}
 8003e90:	4628      	mov	r0, r5
 8003e92:	b007      	add	sp, #28
 8003e94:	bd30      	pop	{r4, r5, pc}
  netconn_free(conn);
 8003e96:	4620      	mov	r0, r4
 8003e98:	f000 fdf0 	bl	8004a7c <netconn_free>
  return ERR_OK;
 8003e9c:	e7f8      	b.n	8003e90 <netconn_delete+0x1c>
    return ERR_OK;
 8003e9e:	2500      	movs	r5, #0
 8003ea0:	e7f6      	b.n	8003e90 <netconn_delete+0x1c>
 8003ea2:	bf00      	nop
 8003ea4:	08004c99 	.word	0x08004c99

08003ea8 <netconn_bind>:
{
 8003ea8:	b500      	push	{lr}
 8003eaa:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8003eac:	b160      	cbz	r0, 8003ec8 <netconn_bind+0x20>
 8003eae:	4603      	mov	r3, r0
  if (addr == NULL) {
 8003eb0:	b199      	cbz	r1, 8003eda <netconn_bind+0x32>
  API_MSG_VAR_REF(msg).conn = conn;
 8003eb2:	9301      	str	r3, [sp, #4]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8003eb4:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8003eb6:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8003eba:	a901      	add	r1, sp, #4
 8003ebc:	4808      	ldr	r0, [pc, #32]	; (8003ee0 <netconn_bind+0x38>)
 8003ebe:	f7ff feaf 	bl	8003c20 <netconn_apimsg>
}
 8003ec2:	b007      	add	sp, #28
 8003ec4:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <netconn_bind+0x3c>)
 8003eca:	22ff      	movs	r2, #255	; 0xff
 8003ecc:	4906      	ldr	r1, [pc, #24]	; (8003ee8 <netconn_bind+0x40>)
 8003ece:	4807      	ldr	r0, [pc, #28]	; (8003eec <netconn_bind+0x44>)
 8003ed0:	f008 fb5b 	bl	800c58a <iprintf>
 8003ed4:	f06f 000f 	mvn.w	r0, #15
 8003ed8:	e7f3      	b.n	8003ec2 <netconn_bind+0x1a>
    addr = IP4_ADDR_ANY;
 8003eda:	4905      	ldr	r1, [pc, #20]	; (8003ef0 <netconn_bind+0x48>)
 8003edc:	e7e9      	b.n	8003eb2 <netconn_bind+0xa>
 8003ede:	bf00      	nop
 8003ee0:	08004e05 	.word	0x08004e05
 8003ee4:	0800c880 	.word	0x0800c880
 8003ee8:	0800c864 	.word	0x0800c864
 8003eec:	0800c8d0 	.word	0x0800c8d0
 8003ef0:	0800d268 	.word	0x0800d268

08003ef4 <netconn_listen_with_backlog>:
{
 8003ef4:	b500      	push	{lr}
 8003ef6:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8003ef8:	b140      	cbz	r0, 8003f0c <netconn_listen_with_backlog+0x18>
  API_MSG_VAR_REF(msg).conn = conn;
 8003efa:	a906      	add	r1, sp, #24
 8003efc:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8003f00:	4807      	ldr	r0, [pc, #28]	; (8003f20 <netconn_listen_with_backlog+0x2c>)
 8003f02:	f7ff fe8d 	bl	8003c20 <netconn_apimsg>
}
 8003f06:	b007      	add	sp, #28
 8003f08:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <netconn_listen_with_backlog+0x30>)
 8003f0e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003f12:	4905      	ldr	r1, [pc, #20]	; (8003f28 <netconn_listen_with_backlog+0x34>)
 8003f14:	4805      	ldr	r0, [pc, #20]	; (8003f2c <netconn_listen_with_backlog+0x38>)
 8003f16:	f008 fb38 	bl	800c58a <iprintf>
 8003f1a:	f06f 000f 	mvn.w	r0, #15
 8003f1e:	e7f2      	b.n	8003f06 <netconn_listen_with_backlog+0x12>
 8003f20:	08004e69 	.word	0x08004e69
 8003f24:	0800c880 	.word	0x0800c880
 8003f28:	0800c8f8 	.word	0x0800c8f8
 8003f2c:	0800c8d0 	.word	0x0800c8d0

08003f30 <netconn_accept>:
{
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8003f34:	b159      	cbz	r1, 8003f4e <netconn_accept+0x1e>
 8003f36:	4604      	mov	r4, r0
 8003f38:	460d      	mov	r5, r1
  *new_conn = NULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8003f3e:	b180      	cbz	r0, 8003f62 <netconn_accept+0x32>
  if (ERR_IS_FATAL(conn->last_err)) {
 8003f40:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8003f44:	f110 0f0c 	cmn.w	r0, #12
 8003f48:	da15      	bge.n	8003f76 <netconn_accept+0x46>
}
 8003f4a:	b002      	add	sp, #8
 8003f4c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8003f4e:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <netconn_accept+0xa4>)
 8003f50:	f240 128d 	movw	r2, #397	; 0x18d
 8003f54:	4920      	ldr	r1, [pc, #128]	; (8003fd8 <netconn_accept+0xa8>)
 8003f56:	4821      	ldr	r0, [pc, #132]	; (8003fdc <netconn_accept+0xac>)
 8003f58:	f008 fb17 	bl	800c58a <iprintf>
 8003f5c:	f06f 000f 	mvn.w	r0, #15
 8003f60:	e7f3      	b.n	8003f4a <netconn_accept+0x1a>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8003f62:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <netconn_accept+0xa4>)
 8003f64:	f240 128f 	movw	r2, #399	; 0x18f
 8003f68:	491d      	ldr	r1, [pc, #116]	; (8003fe0 <netconn_accept+0xb0>)
 8003f6a:	481c      	ldr	r0, [pc, #112]	; (8003fdc <netconn_accept+0xac>)
 8003f6c:	f008 fb0d 	bl	800c58a <iprintf>
 8003f70:	f06f 000f 	mvn.w	r0, #15
 8003f74:	e7e9      	b.n	8003f4a <netconn_accept+0x1a>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8003f76:	f104 0614 	add.w	r6, r4, #20
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	f007 fcec 	bl	800b958 <sys_mbox_valid>
 8003f80:	b308      	cbz	r0, 8003fc6 <netconn_accept+0x96>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8003f82:	2200      	movs	r2, #0
 8003f84:	a901      	add	r1, sp, #4
 8003f86:	4630      	mov	r0, r6
 8003f88:	f007 fca7 	bl	800b8da <sys_arch_mbox_fetch>
  newconn = (struct netconn *)accept_ptr;
 8003f8c:	9e01      	ldr	r6, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8003f8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f90:	b11b      	cbz	r3, 8003f9a <netconn_accept+0x6a>
 8003f92:	2200      	movs	r2, #0
 8003f94:	2101      	movs	r1, #1
 8003f96:	4620      	mov	r0, r4
 8003f98:	4798      	blx	r3
  if (accept_ptr == &netconn_aborted) {
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <netconn_accept+0xb4>)
 8003f9c:	9a01      	ldr	r2, [sp, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d014      	beq.n	8003fcc <netconn_accept+0x9c>
  if (newconn == NULL) {
 8003fa2:	b116      	cbz	r6, 8003faa <netconn_accept+0x7a>
  *new_conn = newconn;
 8003fa4:	602e      	str	r6, [r5, #0]
  return ERR_OK;
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	e7cf      	b.n	8003f4a <netconn_accept+0x1a>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8003faa:	f007 fd65 	bl	800ba78 <sys_arch_protect>
 8003fae:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8003fb2:	f113 0f0c 	cmn.w	r3, #12
 8003fb6:	db01      	blt.n	8003fbc <netconn_accept+0x8c>
 8003fb8:	23f1      	movs	r3, #241	; 0xf1
 8003fba:	7223      	strb	r3, [r4, #8]
 8003fbc:	f007 fd68 	bl	800ba90 <sys_arch_unprotect>
    return ERR_CLSD;
 8003fc0:	f06f 000e 	mvn.w	r0, #14
 8003fc4:	e7c1      	b.n	8003f4a <netconn_accept+0x1a>
    return ERR_CLSD;
 8003fc6:	f06f 000e 	mvn.w	r0, #14
 8003fca:	e7be      	b.n	8003f4a <netconn_accept+0x1a>
    return ERR_ABRT;
 8003fcc:	f06f 000c 	mvn.w	r0, #12
 8003fd0:	e7bb      	b.n	8003f4a <netconn_accept+0x1a>
 8003fd2:	bf00      	nop
 8003fd4:	0800c880 	.word	0x0800c880
 8003fd8:	0800c824 	.word	0x0800c824
 8003fdc:	0800c8d0 	.word	0x0800c8d0
 8003fe0:	0800c844 	.word	0x0800c844
 8003fe4:	20003f5c 	.word	0x20003f5c

08003fe8 <netconn_recv>:
{
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8003fec:	b179      	cbz	r1, 800400e <netconn_recv+0x26>
 8003fee:	4604      	mov	r4, r0
 8003ff0:	460d      	mov	r5, r1
  *new_buf = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8003ff6:	b1a0      	cbz	r0, 8004022 <netconn_recv+0x3a>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8003ff8:	7803      	ldrb	r3, [r0, #0]
 8003ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d019      	beq.n	8004036 <netconn_recv+0x4e>
    return netconn_recv_data(conn, (void **)new_buf);
 8004002:	f7ff fe3b 	bl	8003c7c <netconn_recv_data>
 8004006:	4604      	mov	r4, r0
}
 8004008:	4620      	mov	r0, r4
 800400a:	b002      	add	sp, #8
 800400c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800400e:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <netconn_recv+0xa0>)
 8004010:	f44f 721d 	mov.w	r2, #628	; 0x274
 8004014:	491d      	ldr	r1, [pc, #116]	; (800408c <netconn_recv+0xa4>)
 8004016:	481e      	ldr	r0, [pc, #120]	; (8004090 <netconn_recv+0xa8>)
 8004018:	f008 fab7 	bl	800c58a <iprintf>
 800401c:	f06f 040f 	mvn.w	r4, #15
 8004020:	e7f2      	b.n	8004008 <netconn_recv+0x20>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004022:	4b19      	ldr	r3, [pc, #100]	; (8004088 <netconn_recv+0xa0>)
 8004024:	f240 2276 	movw	r2, #630	; 0x276
 8004028:	491a      	ldr	r1, [pc, #104]	; (8004094 <netconn_recv+0xac>)
 800402a:	4819      	ldr	r0, [pc, #100]	; (8004090 <netconn_recv+0xa8>)
 800402c:	f008 faad 	bl	800c58a <iprintf>
 8004030:	f06f 040f 	mvn.w	r4, #15
 8004034:	e7e8      	b.n	8004008 <netconn_recv+0x20>
    struct pbuf *p = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	9301      	str	r3, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800403a:	2006      	movs	r0, #6
 800403c:	f002 ffc6 	bl	8006fcc <memp_malloc>
    if (buf == NULL) {
 8004040:	4606      	mov	r6, r0
 8004042:	b1e8      	cbz	r0, 8004080 <netconn_recv+0x98>
    err = netconn_recv_data(conn, (void **)&p);
 8004044:	a901      	add	r1, sp, #4
 8004046:	4620      	mov	r0, r4
 8004048:	f7ff fe18 	bl	8003c7c <netconn_recv_data>
    if (err != ERR_OK) {
 800404c:	4604      	mov	r4, r0
 800404e:	b950      	cbnz	r0, 8004066 <netconn_recv+0x7e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004050:	9b01      	ldr	r3, [sp, #4]
 8004052:	b16b      	cbz	r3, 8004070 <netconn_recv+0x88>
    buf->p = p;
 8004054:	9b01      	ldr	r3, [sp, #4]
 8004056:	6033      	str	r3, [r6, #0]
    buf->ptr = p;
 8004058:	9b01      	ldr	r3, [sp, #4]
 800405a:	6073      	str	r3, [r6, #4]
    buf->port = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	81b3      	strh	r3, [r6, #12]
    ip_addr_set_zero(&buf->addr);
 8004060:	60b3      	str	r3, [r6, #8]
    *new_buf = buf;
 8004062:	602e      	str	r6, [r5, #0]
    return ERR_OK;
 8004064:	e7d0      	b.n	8004008 <netconn_recv+0x20>
      memp_free(MEMP_NETBUF, buf);
 8004066:	4631      	mov	r1, r6
 8004068:	2006      	movs	r0, #6
 800406a:	f002 ffc9 	bl	8007000 <memp_free>
      return err;
 800406e:	e7cb      	b.n	8004008 <netconn_recv+0x20>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <netconn_recv+0xa0>)
 8004072:	f240 228a 	movw	r2, #650	; 0x28a
 8004076:	4908      	ldr	r1, [pc, #32]	; (8004098 <netconn_recv+0xb0>)
 8004078:	4805      	ldr	r0, [pc, #20]	; (8004090 <netconn_recv+0xa8>)
 800407a:	f008 fa86 	bl	800c58a <iprintf>
 800407e:	e7e9      	b.n	8004054 <netconn_recv+0x6c>
      return ERR_MEM;
 8004080:	f04f 34ff 	mov.w	r4, #4294967295
 8004084:	e7c0      	b.n	8004008 <netconn_recv+0x20>
 8004086:	bf00      	nop
 8004088:	0800c880 	.word	0x0800c880
 800408c:	0800c994 	.word	0x0800c994
 8004090:	0800c8d0 	.word	0x0800c8d0
 8004094:	0800c9b4 	.word	0x0800c9b4
 8004098:	0800cb70 	.word	0x0800cb70

0800409c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800409c:	b508      	push	{r3, lr}
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800409e:	2103      	movs	r1, #3
 80040a0:	f7ff fdca 	bl	8003c38 <netconn_close_shutdown>
}
 80040a4:	bd08      	pop	{r3, pc}
	...

080040a8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 80040a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ac:	4604      	mov	r4, r0
 80040ae:	4616      	mov	r6, r2
 80040b0:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80040b2:	460d      	mov	r5, r1
 80040b4:	2900      	cmp	r1, #0
 80040b6:	d030      	beq.n	800411a <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80040b8:	2c00      	cmp	r4, #0
 80040ba:	d035      	beq.n	8004128 <recv_udp+0x80>
  conn = (struct netconn *)arg;

  if (conn == NULL) {
 80040bc:	2c00      	cmp	r4, #0
 80040be:	d03a      	beq.n	8004136 <recv_udp+0x8e>
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80040c0:	6863      	ldr	r3, [r4, #4]
 80040c2:	429d      	cmp	r5, r3
 80040c4:	d005      	beq.n	80040d2 <recv_udp+0x2a>
 80040c6:	4b27      	ldr	r3, [pc, #156]	; (8004164 <recv_udp+0xbc>)
 80040c8:	22ba      	movs	r2, #186	; 0xba
 80040ca:	4927      	ldr	r1, [pc, #156]	; (8004168 <recv_udp+0xc0>)
 80040cc:	4827      	ldr	r0, [pc, #156]	; (800416c <recv_udp+0xc4>)
 80040ce:	f008 fa5c 	bl	800c58a <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80040d2:	f104 0710 	add.w	r7, r4, #16
 80040d6:	4638      	mov	r0, r7
 80040d8:	f007 fc3e 	bl	800b958 <sys_mbox_valid>
 80040dc:	b380      	cbz	r0, 8004140 <recv_udp+0x98>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80040de:	2006      	movs	r0, #6
 80040e0:	f002 ff74 	bl	8006fcc <memp_malloc>
  if (buf == NULL) {
 80040e4:	4605      	mov	r5, r0
 80040e6:	b380      	cbz	r0, 800414a <recv_udp+0xa2>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 80040e8:	6006      	str	r6, [r0, #0]
    buf->ptr = p;
 80040ea:	6046      	str	r6, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 80040ec:	f1b8 0f00 	cmp.w	r8, #0
 80040f0:	d030      	beq.n	8004154 <recv_udp+0xac>
 80040f2:	f8d8 3000 	ldr.w	r3, [r8]
 80040f6:	60ab      	str	r3, [r5, #8]
    buf->port = port;
 80040f8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80040fc:	81ab      	strh	r3, [r5, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80040fe:	8936      	ldrh	r6, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8004100:	4629      	mov	r1, r5
 8004102:	4638      	mov	r0, r7
 8004104:	f007 fbdf 	bl	800b8c6 <sys_mbox_trypost>
 8004108:	bb30      	cbnz	r0, 8004158 <recv_udp+0xb0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800410a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800410c:	b11b      	cbz	r3, 8004116 <recv_udp+0x6e>
 800410e:	4632      	mov	r2, r6
 8004110:	2100      	movs	r1, #0
 8004112:	4620      	mov	r0, r4
 8004114:	4798      	blx	r3
 8004116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800411a:	4b12      	ldr	r3, [pc, #72]	; (8004164 <recv_udp+0xbc>)
 800411c:	22b1      	movs	r2, #177	; 0xb1
 800411e:	4914      	ldr	r1, [pc, #80]	; (8004170 <recv_udp+0xc8>)
 8004120:	4812      	ldr	r0, [pc, #72]	; (800416c <recv_udp+0xc4>)
 8004122:	f008 fa32 	bl	800c58a <iprintf>
 8004126:	e7c7      	b.n	80040b8 <recv_udp+0x10>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <recv_udp+0xbc>)
 800412a:	22b2      	movs	r2, #178	; 0xb2
 800412c:	4911      	ldr	r1, [pc, #68]	; (8004174 <recv_udp+0xcc>)
 800412e:	480f      	ldr	r0, [pc, #60]	; (800416c <recv_udp+0xc4>)
 8004130:	f008 fa2b 	bl	800c58a <iprintf>
 8004134:	e7c2      	b.n	80040bc <recv_udp+0x14>
    pbuf_free(p);
 8004136:	4630      	mov	r0, r6
 8004138:	f003 f938 	bl	80073ac <pbuf_free>
    return;
 800413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8004140:	4630      	mov	r0, r6
 8004142:	f003 f933 	bl	80073ac <pbuf_free>
    return;
 8004146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 800414a:	4630      	mov	r0, r6
 800414c:	f003 f92e 	bl	80073ac <pbuf_free>
    return;
 8004150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ip_addr_set(&buf->addr, addr);
 8004154:	2300      	movs	r3, #0
 8004156:	e7ce      	b.n	80040f6 <recv_udp+0x4e>
    netbuf_delete(buf);
 8004158:	4628      	mov	r0, r5
 800415a:	f000 ffa1 	bl	80050a0 <netbuf_delete>
    return;
 800415e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004162:	bf00      	nop
 8004164:	0800cd30 	.word	0x0800cd30
 8004168:	0800cda8 	.word	0x0800cda8
 800416c:	0800c8d0 	.word	0x0800c8d0
 8004170:	0800cd64 	.word	0x0800cd64
 8004174:	0800cd88 	.word	0x0800cd88

08004178 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8004178:	b510      	push	{r4, lr}
 800417a:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800417c:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 800417e:	4620      	mov	r0, r4
 8004180:	f003 fe23 	bl	8007dca <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8004184:	4908      	ldr	r1, [pc, #32]	; (80041a8 <setup_tcp+0x30>)
 8004186:	4620      	mov	r0, r4
 8004188:	f003 fe22 	bl	8007dd0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800418c:	4907      	ldr	r1, [pc, #28]	; (80041ac <setup_tcp+0x34>)
 800418e:	4620      	mov	r0, r4
 8004190:	f003 fe38 	bl	8007e04 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8004194:	2202      	movs	r2, #2
 8004196:	4906      	ldr	r1, [pc, #24]	; (80041b0 <setup_tcp+0x38>)
 8004198:	4620      	mov	r0, r4
 800419a:	f003 fe6d 	bl	8007e78 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800419e:	4905      	ldr	r1, [pc, #20]	; (80041b4 <setup_tcp+0x3c>)
 80041a0:	4620      	mov	r0, r4
 80041a2:	f003 fe47 	bl	8007e34 <tcp_err>
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	080048ed 	.word	0x080048ed
 80041ac:	08004879 	.word	0x08004879
 80041b0:	080047f5 	.word	0x080047f5
 80041b4:	08004241 	.word	0x08004241

080041b8 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4604      	mov	r4, r0
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80041bc:	6803      	ldr	r3, [r0, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	b133      	cbz	r3, 80041d0 <pcb_new+0x18>
 80041c2:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <pcb_new+0x78>)
 80041c4:	f44f 720b 	mov.w	r2, #556	; 0x22c
 80041c8:	491a      	ldr	r1, [pc, #104]	; (8004234 <pcb_new+0x7c>)
 80041ca:	481b      	ldr	r0, [pc, #108]	; (8004238 <pcb_new+0x80>)
 80041cc:	f008 f9dd 	bl	800c58a <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 80041d0:	6825      	ldr	r5, [r4, #0]
 80041d2:	782b      	ldrb	r3, [r5, #0]
 80041d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d018      	beq.n	800420e <pcb_new+0x56>
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d121      	bne.n	8004224 <pcb_new+0x6c>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80041e0:	2000      	movs	r0, #0
 80041e2:	f007 fa9f 	bl	800b724 <udp_new_ip_type>
 80041e6:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	b142      	cbz	r2, 8004200 <pcb_new+0x48>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b22      	cmp	r3, #34	; 0x22
 80041f2:	d009      	beq.n	8004208 <pcb_new+0x50>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	4910      	ldr	r1, [pc, #64]	; (800423c <pcb_new+0x84>)
 80041fa:	6858      	ldr	r0, [r3, #4]
 80041fc:	f007 fa64 	bl	800b6c8 <udp_recv>
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
    return;
  }
  if (msg->conn->pcb.ip == NULL) {
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	b18b      	cbz	r3, 800422a <pcb_new+0x72>
 8004206:	bd38      	pop	{r3, r4, r5, pc}
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8004208:	2301      	movs	r3, #1
 800420a:	7413      	strb	r3, [r2, #16]
 800420c:	e7f2      	b.n	80041f4 <pcb_new+0x3c>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800420e:	2000      	movs	r0, #0
 8004210:	f004 fba4 	bl	800895c <tcp_new_ip_type>
 8004214:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8004216:	6820      	ldr	r0, [r4, #0]
 8004218:	6843      	ldr	r3, [r0, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <pcb_new+0x48>
      setup_tcp(msg->conn);
 800421e:	f7ff ffab 	bl	8004178 <setup_tcp>
 8004222:	e7ed      	b.n	8004200 <pcb_new+0x48>
    msg->err = ERR_VAL;
 8004224:	23fa      	movs	r3, #250	; 0xfa
 8004226:	7123      	strb	r3, [r4, #4]
    return;
 8004228:	bd38      	pop	{r3, r4, r5, pc}
    msg->err = ERR_MEM;
 800422a:	23ff      	movs	r3, #255	; 0xff
 800422c:	7123      	strb	r3, [r4, #4]
 800422e:	e7ea      	b.n	8004206 <pcb_new+0x4e>
 8004230:	0800cd30 	.word	0x0800cd30
 8004234:	0800ccac 	.word	0x0800ccac
 8004238:	0800c8d0 	.word	0x0800c8d0
 800423c:	080040a9 	.word	0x080040a9

08004240 <err_tcp>:
{
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004244:	4604      	mov	r4, r0
 8004246:	2800      	cmp	r0, #0
 8004248:	d038      	beq.n	80042bc <err_tcp+0x7c>
  conn->pcb.tcp = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	6063      	str	r3, [r4, #4]
  old_state = conn->state;
 800424e:	7865      	ldrb	r5, [r4, #1]
  conn->state = NETCONN_NONE;
 8004250:	7063      	strb	r3, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 8004252:	2d04      	cmp	r5, #4
 8004254:	d03a      	beq.n	80042cc <err_tcp+0x8c>
    SYS_ARCH_SET(conn->last_err, err);
 8004256:	f007 fc0f 	bl	800ba78 <sys_arch_protect>
 800425a:	7226      	strb	r6, [r4, #8]
 800425c:	f007 fc18 	bl	800ba90 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004260:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004262:	b11b      	cbz	r3, 800426c <err_tcp+0x2c>
 8004264:	2200      	movs	r2, #0
 8004266:	2104      	movs	r1, #4
 8004268:	4620      	mov	r0, r4
 800426a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800426c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800426e:	b11b      	cbz	r3, 8004278 <err_tcp+0x38>
 8004270:	2200      	movs	r2, #0
 8004272:	4611      	mov	r1, r2
 8004274:	4620      	mov	r0, r4
 8004276:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004278:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800427a:	b11b      	cbz	r3, 8004284 <err_tcp+0x44>
 800427c:	2200      	movs	r2, #0
 800427e:	2102      	movs	r1, #2
 8004280:	4620      	mov	r0, r4
 8004282:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 8004284:	f104 0710 	add.w	r7, r4, #16
 8004288:	4638      	mov	r0, r7
 800428a:	f007 fb65 	bl	800b958 <sys_mbox_valid>
 800428e:	bb68      	cbnz	r0, 80042ec <err_tcp+0xac>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004290:	f104 0714 	add.w	r7, r4, #20
 8004294:	4638      	mov	r0, r7
 8004296:	f007 fb5f 	bl	800b958 <sys_mbox_valid>
 800429a:	bb60      	cbnz	r0, 80042f6 <err_tcp+0xb6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800429c:	2d01      	cmp	r5, #1
 800429e:	d02f      	beq.n	8004300 <err_tcp+0xc0>
 80042a0:	2d04      	cmp	r5, #4
 80042a2:	d02d      	beq.n	8004300 <err_tcp+0xc0>
 80042a4:	2d03      	cmp	r5, #3
 80042a6:	d02b      	beq.n	8004300 <err_tcp+0xc0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80042a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042aa:	b133      	cbz	r3, 80042ba <err_tcp+0x7a>
 80042ac:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <err_tcp+0x128>)
 80042ae:	f240 12bd 	movw	r2, #445	; 0x1bd
 80042b2:	492e      	ldr	r1, [pc, #184]	; (800436c <err_tcp+0x12c>)
 80042b4:	482e      	ldr	r0, [pc, #184]	; (8004370 <err_tcp+0x130>)
 80042b6:	f008 f968 	bl	800c58a <iprintf>
 80042ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80042bc:	4b2a      	ldr	r3, [pc, #168]	; (8004368 <err_tcp+0x128>)
 80042be:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80042c2:	492c      	ldr	r1, [pc, #176]	; (8004374 <err_tcp+0x134>)
 80042c4:	482a      	ldr	r0, [pc, #168]	; (8004370 <err_tcp+0x130>)
 80042c6:	f008 f960 	bl	800c58a <iprintf>
 80042ca:	e7be      	b.n	800424a <err_tcp+0xa>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 80042cc:	b164      	cbz	r4, 80042e8 <err_tcp+0xa8>
 80042ce:	f007 fbd3 	bl	800ba78 <sys_arch_protect>
 80042d2:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80042d6:	f113 0f0c 	cmn.w	r3, #12
 80042da:	db01      	blt.n	80042e0 <err_tcp+0xa0>
 80042dc:	2300      	movs	r3, #0
 80042de:	7223      	strb	r3, [r4, #8]
 80042e0:	f007 fbd6 	bl	800ba90 <sys_arch_unprotect>
    err = ERR_OK;
 80042e4:	2600      	movs	r6, #0
 80042e6:	e7bb      	b.n	8004260 <err_tcp+0x20>
 80042e8:	2600      	movs	r6, #0
 80042ea:	e7b9      	b.n	8004260 <err_tcp+0x20>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 80042ec:	2100      	movs	r1, #0
 80042ee:	4638      	mov	r0, r7
 80042f0:	f007 fae9 	bl	800b8c6 <sys_mbox_trypost>
 80042f4:	e7cc      	b.n	8004290 <err_tcp+0x50>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80042f6:	2100      	movs	r1, #0
 80042f8:	4638      	mov	r0, r7
 80042fa:	f007 fae4 	bl	800b8c6 <sys_mbox_trypost>
 80042fe:	e7cd      	b.n	800429c <err_tcp+0x5c>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8004300:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8004302:	f023 0204 	bic.w	r2, r3, #4
 8004306:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8004308:	f013 0f04 	tst.w	r3, #4
 800430c:	d1d5      	bne.n	80042ba <err_tcp+0x7a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800430e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004310:	b1cb      	cbz	r3, 8004346 <err_tcp+0x106>
      conn->current_msg->err = err;
 8004312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004314:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004318:	681d      	ldr	r5, [r3, #0]
 800431a:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800431c:	4628      	mov	r0, r5
 800431e:	f007 fb65 	bl	800b9ec <sys_sem_valid>
 8004322:	b1c0      	cbz	r0, 8004356 <err_tcp+0x116>
      conn->current_msg = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 8004328:	b14c      	cbz	r4, 800433e <err_tcp+0xfe>
 800432a:	f007 fba5 	bl	800ba78 <sys_arch_protect>
 800432e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004332:	f113 0f0c 	cmn.w	r3, #12
 8004336:	db00      	blt.n	800433a <err_tcp+0xfa>
 8004338:	7226      	strb	r6, [r4, #8]
 800433a:	f007 fba9 	bl	800ba90 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800433e:	4628      	mov	r0, r5
 8004340:	f007 fb4a 	bl	800b9d8 <sys_sem_signal>
 8004344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <err_tcp+0x128>)
 8004348:	f240 12b3 	movw	r2, #435	; 0x1b3
 800434c:	490a      	ldr	r1, [pc, #40]	; (8004378 <err_tcp+0x138>)
 800434e:	4808      	ldr	r0, [pc, #32]	; (8004370 <err_tcp+0x130>)
 8004350:	f008 f91b 	bl	800c58a <iprintf>
 8004354:	e7dd      	b.n	8004312 <err_tcp+0xd2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8004356:	4b04      	ldr	r3, [pc, #16]	; (8004368 <err_tcp+0x128>)
 8004358:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800435c:	4907      	ldr	r1, [pc, #28]	; (800437c <err_tcp+0x13c>)
 800435e:	4804      	ldr	r0, [pc, #16]	; (8004370 <err_tcp+0x130>)
 8004360:	f008 f913 	bl	800c58a <iprintf>
 8004364:	e7de      	b.n	8004324 <err_tcp+0xe4>
 8004366:	bf00      	nop
 8004368:	0800cd30 	.word	0x0800cd30
 800436c:	0800ca44 	.word	0x0800ca44
 8004370:	0800c8d0 	.word	0x0800c8d0
 8004374:	0800c9fc 	.word	0x0800c9fc
 8004378:	0800ca0c 	.word	0x0800ca0c
 800437c:	0800ca28 	.word	0x0800ca28

08004380 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8004380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004384:	4688      	mov	r8, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8004386:	4604      	mov	r4, r0
 8004388:	b1f0      	cbz	r0, 80043c8 <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800438a:	7863      	ldrb	r3, [r4, #1]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d006      	beq.n	800439e <lwip_netconn_do_writemore+0x1e>
 8004390:	4b7b      	ldr	r3, [pc, #492]	; (8004580 <lwip_netconn_do_writemore+0x200>)
 8004392:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8004396:	497b      	ldr	r1, [pc, #492]	; (8004584 <lwip_netconn_do_writemore+0x204>)
 8004398:	487b      	ldr	r0, [pc, #492]	; (8004588 <lwip_netconn_do_writemore+0x208>)
 800439a:	f008 f8f6 	bl	800c58a <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800439e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043a0:	b1d3      	cbz	r3, 80043d8 <lwip_netconn_do_writemore+0x58>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80043a2:	6863      	ldr	r3, [r4, #4]
 80043a4:	b303      	cbz	r3, 80043e8 <lwip_netconn_do_writemore+0x68>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80043a6:	6a22      	ldr	r2, [r4, #32]
 80043a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d223      	bcs.n	80043f8 <lwip_netconn_do_writemore+0x78>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 80043b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043b2:	f892 9010 	ldrb.w	r9, [r2, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80043b6:	7f23      	ldrb	r3, [r4, #28]
 80043b8:	f013 0f02 	tst.w	r3, #2
 80043bc:	d124      	bne.n	8004408 <lwip_netconn_do_writemore+0x88>
 80043be:	f019 0f04 	tst.w	r9, #4
 80043c2:	d039      	beq.n	8004438 <lwip_netconn_do_writemore+0xb8>
 80043c4:	2601      	movs	r6, #1
 80043c6:	e020      	b.n	800440a <lwip_netconn_do_writemore+0x8a>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 80043c8:	4b6d      	ldr	r3, [pc, #436]	; (8004580 <lwip_netconn_do_writemore+0x200>)
 80043ca:	f240 52e3 	movw	r2, #1507	; 0x5e3
 80043ce:	496f      	ldr	r1, [pc, #444]	; (800458c <lwip_netconn_do_writemore+0x20c>)
 80043d0:	486d      	ldr	r0, [pc, #436]	; (8004588 <lwip_netconn_do_writemore+0x208>)
 80043d2:	f008 f8da 	bl	800c58a <iprintf>
 80043d6:	e7d8      	b.n	800438a <lwip_netconn_do_writemore+0xa>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80043d8:	4b69      	ldr	r3, [pc, #420]	; (8004580 <lwip_netconn_do_writemore+0x200>)
 80043da:	f240 52e5 	movw	r2, #1509	; 0x5e5
 80043de:	496c      	ldr	r1, [pc, #432]	; (8004590 <lwip_netconn_do_writemore+0x210>)
 80043e0:	4869      	ldr	r0, [pc, #420]	; (8004588 <lwip_netconn_do_writemore+0x208>)
 80043e2:	f008 f8d2 	bl	800c58a <iprintf>
 80043e6:	e7dc      	b.n	80043a2 <lwip_netconn_do_writemore+0x22>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80043e8:	4b65      	ldr	r3, [pc, #404]	; (8004580 <lwip_netconn_do_writemore+0x200>)
 80043ea:	f240 52e6 	movw	r2, #1510	; 0x5e6
 80043ee:	4969      	ldr	r1, [pc, #420]	; (8004594 <lwip_netconn_do_writemore+0x214>)
 80043f0:	4865      	ldr	r0, [pc, #404]	; (8004588 <lwip_netconn_do_writemore+0x208>)
 80043f2:	f008 f8ca 	bl	800c58a <iprintf>
 80043f6:	e7d6      	b.n	80043a6 <lwip_netconn_do_writemore+0x26>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80043f8:	4b61      	ldr	r3, [pc, #388]	; (8004580 <lwip_netconn_do_writemore+0x200>)
 80043fa:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 80043fe:	4966      	ldr	r1, [pc, #408]	; (8004598 <lwip_netconn_do_writemore+0x218>)
 8004400:	4861      	ldr	r0, [pc, #388]	; (8004588 <lwip_netconn_do_writemore+0x208>)
 8004402:	f008 f8c2 	bl	800c58a <iprintf>
 8004406:	e7d3      	b.n	80043b0 <lwip_netconn_do_writemore+0x30>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004408:	2601      	movs	r6, #1
 800440a:	b2f6      	uxtb	r6, r6
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800440c:	6897      	ldr	r7, [r2, #8]
 800440e:	6a23      	ldr	r3, [r4, #32]
 8004410:	441f      	add	r7, r3
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8004412:	68d2      	ldr	r2, [r2, #12]
 8004414:	1ad5      	subs	r5, r2, r3
    if (diff > 0xffffUL) { /* max_u16_t */
 8004416:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800441a:	d30f      	bcc.n	800443c <lwip_netconn_do_writemore+0xbc>
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 800441c:	f049 0902 	orr.w	r9, r9, #2
      len = 0xffff;
 8004420:	f64f 75ff 	movw	r5, #65535	; 0xffff
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8004424:	6861      	ldr	r1, [r4, #4]
 8004426:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
    if (available < len) {
 800442a:	428d      	cmp	r5, r1
 800442c:	d90b      	bls.n	8004446 <lwip_netconn_do_writemore+0xc6>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 800442e:	b13e      	cbz	r6, 8004440 <lwip_netconn_do_writemore+0xc0>
        if (!len) {
 8004430:	2900      	cmp	r1, #0
 8004432:	d039      	beq.n	80044a8 <lwip_netconn_do_writemore+0x128>
      len = available;
 8004434:	460d      	mov	r5, r1
 8004436:	e006      	b.n	8004446 <lwip_netconn_do_writemore+0xc6>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004438:	2600      	movs	r6, #0
 800443a:	e7e6      	b.n	800440a <lwip_netconn_do_writemore+0x8a>
      len = (u16_t)diff;
 800443c:	b2ad      	uxth	r5, r5
 800443e:	e7f1      	b.n	8004424 <lwip_netconn_do_writemore+0xa4>
          err = ERR_WOULDBLOCK;
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8004440:	f049 0902 	orr.w	r9, r9, #2
      len = available;
 8004444:	460d      	mov	r5, r1
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8004446:	442b      	add	r3, r5
 8004448:	429a      	cmp	r2, r3
 800444a:	d325      	bcc.n	8004498 <lwip_netconn_do_writemore+0x118>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800444c:	464b      	mov	r3, r9
 800444e:	462a      	mov	r2, r5
 8004450:	4639      	mov	r1, r7
 8004452:	6860      	ldr	r0, [r4, #4]
 8004454:	f006 f86e 	bl	800a534 <tcp_write>
 8004458:	4607      	mov	r7, r0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800445a:	1c43      	adds	r3, r0, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b01      	cmp	r3, #1
 8004460:	d925      	bls.n	80044ae <lwip_netconn_do_writemore+0x12e>
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 8004462:	2f00      	cmp	r7, #0
 8004464:	d146      	bne.n	80044f4 <lwip_netconn_do_writemore+0x174>
      err_t out_err;
      conn->write_offset += len;
 8004466:	6a23      	ldr	r3, [r4, #32]
 8004468:	441d      	add	r5, r3
 800446a:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800446c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	4295      	cmp	r5, r2
 8004472:	d000      	beq.n	8004476 <lwip_netconn_do_writemore+0xf6>
 8004474:	b10e      	cbz	r6, 800447a <lwip_netconn_do_writemore+0xfa>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8004476:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8004478:	2601      	movs	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 800447a:	6860      	ldr	r0, [r4, #4]
 800447c:	f006 fc08 	bl	800ac90 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8004480:	f110 0f0c 	cmn.w	r0, #12
 8004484:	db02      	blt.n	800448c <lwip_netconn_do_writemore+0x10c>
 8004486:	f110 0f04 	cmn.w	r0, #4
 800448a:	d13a      	bne.n	8004502 <lwip_netconn_do_writemore+0x182>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 800448c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800448e:	2200      	movs	r2, #0
 8004490:	60da      	str	r2, [r3, #12]
        err = out_err;
 8004492:	4607      	mov	r7, r0
        write_finished = 1;
 8004494:	2601      	movs	r6, #1
 8004496:	e034      	b.n	8004502 <lwip_netconn_do_writemore+0x182>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8004498:	4b39      	ldr	r3, [pc, #228]	; (8004580 <lwip_netconn_do_writemore+0x200>)
 800449a:	f240 6213 	movw	r2, #1555	; 0x613
 800449e:	493f      	ldr	r1, [pc, #252]	; (800459c <lwip_netconn_do_writemore+0x21c>)
 80044a0:	4839      	ldr	r0, [pc, #228]	; (8004588 <lwip_netconn_do_writemore+0x208>)
 80044a2:	f008 f872 	bl	800c58a <iprintf>
 80044a6:	e7d1      	b.n	800444c <lwip_netconn_do_writemore+0xcc>
      len = available;
 80044a8:	460d      	mov	r5, r1
          err = ERR_WOULDBLOCK;
 80044aa:	f06f 0706 	mvn.w	r7, #6
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 80044ae:	b176      	cbz	r6, 80044ce <lwip_netconn_do_writemore+0x14e>
 80044b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	429d      	cmp	r5, r3
 80044b6:	d20a      	bcs.n	80044ce <lwip_netconn_do_writemore+0x14e>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80044b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80044ba:	b11b      	cbz	r3, 80044c4 <lwip_netconn_do_writemore+0x144>
 80044bc:	462a      	mov	r2, r5
 80044be:	2103      	movs	r1, #3
 80044c0:	4620      	mov	r0, r4
 80044c2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80044c4:	7f23      	ldrb	r3, [r4, #28]
 80044c6:	f043 0310 	orr.w	r3, r3, #16
 80044ca:	7723      	strb	r3, [r4, #28]
 80044cc:	e7c9      	b.n	8004462 <lwip_netconn_do_writemore+0xe2>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80044ce:	6863      	ldr	r3, [r4, #4]
 80044d0:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 80044d4:	f240 3299 	movw	r2, #921	; 0x399
 80044d8:	4291      	cmp	r1, r2
 80044da:	d903      	bls.n	80044e4 <lwip_netconn_do_writemore+0x164>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80044dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80044e0:	2b07      	cmp	r3, #7
 80044e2:	d9be      	bls.n	8004462 <lwip_netconn_do_writemore+0xe2>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80044e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0bb      	beq.n	8004462 <lwip_netconn_do_writemore+0xe2>
 80044ea:	462a      	mov	r2, r5
 80044ec:	2103      	movs	r1, #3
 80044ee:	4620      	mov	r0, r4
 80044f0:	4798      	blx	r3
 80044f2:	e7b6      	b.n	8004462 <lwip_netconn_do_writemore+0xe2>
      }
    } else if (err == ERR_MEM) {
 80044f4:	f1b7 3fff 	cmp.w	r7, #4294967295
 80044f8:	d01f      	beq.n	800453a <lwip_netconn_do_writemore+0x1ba>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 80044fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044fc:	2200      	movs	r2, #0
 80044fe:	60da      	str	r2, [r3, #12]
      write_finished = 1;
 8004500:	2601      	movs	r6, #1
    }
  }
  if (write_finished) {
 8004502:	2e00      	cmp	r6, #0
 8004504:	d037      	beq.n	8004576 <lwip_netconn_do_writemore+0x1f6>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	f100 050c 	add.w	r5, r0, #12
    conn->current_msg->err = err;
 800450e:	711f      	strb	r7, [r3, #4]
    conn->current_msg = NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 8004514:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8004516:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8004518:	b14c      	cbz	r4, 800452e <lwip_netconn_do_writemore+0x1ae>
 800451a:	f007 faad 	bl	800ba78 <sys_arch_protect>
 800451e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004522:	f113 0f0c 	cmn.w	r3, #12
 8004526:	db00      	blt.n	800452a <lwip_netconn_do_writemore+0x1aa>
 8004528:	7227      	strb	r7, [r4, #8]
 800452a:	f007 fab1 	bl	800ba90 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800452e:	f1b8 0f00 	cmp.w	r8, #0
 8004532:	d11a      	bne.n	800456a <lwip_netconn_do_writemore+0x1ea>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8004534:	2000      	movs	r0, #0
}
 8004536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      err_t out_err = tcp_output(conn->pcb.tcp);
 800453a:	6860      	ldr	r0, [r4, #4]
 800453c:	f006 fba8 	bl	800ac90 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8004540:	f110 0f0c 	cmn.w	r0, #12
 8004544:	db0b      	blt.n	800455e <lwip_netconn_do_writemore+0x1de>
 8004546:	f110 0f04 	cmn.w	r0, #4
 800454a:	d008      	beq.n	800455e <lwip_netconn_do_writemore+0x1de>
      } else if (dontblock) {
 800454c:	2e00      	cmp	r6, #0
 800454e:	d0d8      	beq.n	8004502 <lwip_netconn_do_writemore+0x182>
        conn->current_msg->msg.w.len = 0;
 8004550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004552:	2200      	movs	r2, #0
 8004554:	60da      	str	r2, [r3, #12]
        write_finished = 1;
 8004556:	2601      	movs	r6, #1
        err = ERR_WOULDBLOCK;
 8004558:	f06f 0706 	mvn.w	r7, #6
 800455c:	e7d1      	b.n	8004502 <lwip_netconn_do_writemore+0x182>
        conn->current_msg->msg.w.len = 0;
 800455e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004560:	2200      	movs	r2, #0
 8004562:	60da      	str	r2, [r3, #12]
        err = out_err;
 8004564:	4607      	mov	r7, r0
        write_finished = 1;
 8004566:	2601      	movs	r6, #1
        conn->current_msg->msg.w.len = 0;
 8004568:	e7cb      	b.n	8004502 <lwip_netconn_do_writemore+0x182>
      sys_sem_signal(op_completed_sem);
 800456a:	4628      	mov	r0, r5
 800456c:	f007 fa34 	bl	800b9d8 <sys_sem_signal>
  return ERR_OK;
 8004570:	2000      	movs	r0, #0
 8004572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return ERR_MEM;
 8004576:	f04f 30ff 	mov.w	r0, #4294967295
 800457a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800457e:	bf00      	nop
 8004580:	0800cd30 	.word	0x0800cd30
 8004584:	0800cb44 	.word	0x0800cb44
 8004588:	0800c8d0 	.word	0x0800c8d0
 800458c:	0800c9fc 	.word	0x0800c9fc
 8004590:	0800ca0c 	.word	0x0800ca0c
 8004594:	0800cb64 	.word	0x0800cb64
 8004598:	0800cb7c 	.word	0x0800cb7c
 800459c:	0800cbb0 	.word	0x0800cbb0

080045a0 <lwip_netconn_do_close_internal>:
{
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	4688      	mov	r8, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80045a6:	4604      	mov	r4, r0
 80045a8:	2800      	cmp	r0, #0
 80045aa:	d035      	beq.n	8004618 <lwip_netconn_do_close_internal+0x78>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80045ac:	7823      	ldrb	r3, [r4, #0]
 80045ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b2:	2b10      	cmp	r3, #16
 80045b4:	d006      	beq.n	80045c4 <lwip_netconn_do_close_internal+0x24>
 80045b6:	4b83      	ldr	r3, [pc, #524]	; (80047c4 <lwip_netconn_do_close_internal+0x224>)
 80045b8:	f44f 7251 	mov.w	r2, #836	; 0x344
 80045bc:	4982      	ldr	r1, [pc, #520]	; (80047c8 <lwip_netconn_do_close_internal+0x228>)
 80045be:	4883      	ldr	r0, [pc, #524]	; (80047cc <lwip_netconn_do_close_internal+0x22c>)
 80045c0:	f007 ffe3 	bl	800c58a <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80045c4:	7863      	ldrb	r3, [r4, #1]
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d006      	beq.n	80045d8 <lwip_netconn_do_close_internal+0x38>
 80045ca:	4b7e      	ldr	r3, [pc, #504]	; (80047c4 <lwip_netconn_do_close_internal+0x224>)
 80045cc:	f240 3245 	movw	r2, #837	; 0x345
 80045d0:	497f      	ldr	r1, [pc, #508]	; (80047d0 <lwip_netconn_do_close_internal+0x230>)
 80045d2:	487e      	ldr	r0, [pc, #504]	; (80047cc <lwip_netconn_do_close_internal+0x22c>)
 80045d4:	f007 ffd9 	bl	800c58a <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80045d8:	6863      	ldr	r3, [r4, #4]
 80045da:	b32b      	cbz	r3, 8004628 <lwip_netconn_do_close_internal+0x88>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80045dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045de:	b35b      	cbz	r3, 8004638 <lwip_netconn_do_close_internal+0x98>
  tpcb = conn->pcb.tcp;
 80045e0:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80045e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045e4:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 80045e6:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80045ea:	f003 0902 	and.w	r9, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d02a      	beq.n	8004648 <lwip_netconn_do_close_internal+0xa8>
  } else if (shut_rx &&
 80045f2:	f1ba 0f00 	cmp.w	sl, #0
 80045f6:	d006      	beq.n	8004606 <lwip_netconn_do_close_internal+0x66>
             ((tpcb->state == FIN_WAIT_1) ||
 80045f8:	7d2a      	ldrb	r2, [r5, #20]
 80045fa:	1f53      	subs	r3, r2, #5
 80045fc:	b2db      	uxtb	r3, r3
  } else if (shut_rx &&
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d93a      	bls.n	8004678 <lwip_netconn_do_close_internal+0xd8>
              (tpcb->state == FIN_WAIT_2) ||
 8004602:	2a08      	cmp	r2, #8
 8004604:	d03a      	beq.n	800467c <lwip_netconn_do_close_internal+0xdc>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8004606:	f1b9 0f00 	cmp.w	r9, #0
 800460a:	d039      	beq.n	8004680 <lwip_netconn_do_close_internal+0xe0>
 800460c:	7eab      	ldrb	r3, [r5, #26]
 800460e:	f013 0f10 	tst.w	r3, #16
 8004612:	d137      	bne.n	8004684 <lwip_netconn_do_close_internal+0xe4>
    close = 0;
 8004614:	2700      	movs	r7, #0
 8004616:	e018      	b.n	800464a <lwip_netconn_do_close_internal+0xaa>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8004618:	4b6a      	ldr	r3, [pc, #424]	; (80047c4 <lwip_netconn_do_close_internal+0x224>)
 800461a:	f240 3243 	movw	r2, #835	; 0x343
 800461e:	496d      	ldr	r1, [pc, #436]	; (80047d4 <lwip_netconn_do_close_internal+0x234>)
 8004620:	486a      	ldr	r0, [pc, #424]	; (80047cc <lwip_netconn_do_close_internal+0x22c>)
 8004622:	f007 ffb2 	bl	800c58a <iprintf>
 8004626:	e7c1      	b.n	80045ac <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8004628:	4b66      	ldr	r3, [pc, #408]	; (80047c4 <lwip_netconn_do_close_internal+0x224>)
 800462a:	f240 3246 	movw	r2, #838	; 0x346
 800462e:	496a      	ldr	r1, [pc, #424]	; (80047d8 <lwip_netconn_do_close_internal+0x238>)
 8004630:	4866      	ldr	r0, [pc, #408]	; (80047cc <lwip_netconn_do_close_internal+0x22c>)
 8004632:	f007 ffaa 	bl	800c58a <iprintf>
 8004636:	e7d1      	b.n	80045dc <lwip_netconn_do_close_internal+0x3c>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004638:	4b62      	ldr	r3, [pc, #392]	; (80047c4 <lwip_netconn_do_close_internal+0x224>)
 800463a:	f240 3247 	movw	r2, #839	; 0x347
 800463e:	4967      	ldr	r1, [pc, #412]	; (80047dc <lwip_netconn_do_close_internal+0x23c>)
 8004640:	4862      	ldr	r0, [pc, #392]	; (80047cc <lwip_netconn_do_close_internal+0x22c>)
 8004642:	f007 ffa2 	bl	800c58a <iprintf>
 8004646:	e7cb      	b.n	80045e0 <lwip_netconn_do_close_internal+0x40>
    close = 1;
 8004648:	2701      	movs	r7, #1
  if (close) {
 800464a:	b9ef      	cbnz	r7, 8004688 <lwip_netconn_do_close_internal+0xe8>
  if (tpcb->state == LISTEN) {
 800464c:	7d2b      	ldrb	r3, [r5, #20]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d01f      	beq.n	8004692 <lwip_netconn_do_close_internal+0xf2>
    if (shut_rx) {
 8004652:	f1ba 0f00 	cmp.w	sl, #0
 8004656:	d121      	bne.n	800469c <lwip_netconn_do_close_internal+0xfc>
    if (shut_tx) {
 8004658:	f1b9 0f00 	cmp.w	r9, #0
 800465c:	d127      	bne.n	80046ae <lwip_netconn_do_close_internal+0x10e>
    if (close) {
 800465e:	bb5f      	cbnz	r7, 80046b8 <lwip_netconn_do_close_internal+0x118>
  if (close) {
 8004660:	b3a7      	cbz	r7, 80046cc <lwip_netconn_do_close_internal+0x12c>
      err = tcp_close(tpcb);
 8004662:	4628      	mov	r0, r5
 8004664:	f003 ff42 	bl	80084ec <tcp_close>
 8004668:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 800466a:	2e00      	cmp	r6, #0
 800466c:	d042      	beq.n	80046f4 <lwip_netconn_do_close_internal+0x154>
    if (err == ERR_MEM) {
 800466e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004672:	d032      	beq.n	80046da <lwip_netconn_do_close_internal+0x13a>
      close_finished = 1;
 8004674:	2301      	movs	r3, #1
 8004676:	e03e      	b.n	80046f6 <lwip_netconn_do_close_internal+0x156>
    close = 1;
 8004678:	2701      	movs	r7, #1
 800467a:	e7e6      	b.n	800464a <lwip_netconn_do_close_internal+0xaa>
 800467c:	2701      	movs	r7, #1
 800467e:	e7e4      	b.n	800464a <lwip_netconn_do_close_internal+0xaa>
    close = 0;
 8004680:	2700      	movs	r7, #0
 8004682:	e7e2      	b.n	800464a <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8004684:	2701      	movs	r7, #1
 8004686:	e7e0      	b.n	800464a <lwip_netconn_do_close_internal+0xaa>
    tcp_arg(tpcb, NULL);
 8004688:	2100      	movs	r1, #0
 800468a:	4628      	mov	r0, r5
 800468c:	f003 fb9d 	bl	8007dca <tcp_arg>
 8004690:	e7dc      	b.n	800464c <lwip_netconn_do_close_internal+0xac>
    tcp_accept(tpcb, NULL);
 8004692:	2100      	movs	r1, #0
 8004694:	4628      	mov	r0, r5
 8004696:	f003 fbe7 	bl	8007e68 <tcp_accept>
 800469a:	e7e1      	b.n	8004660 <lwip_netconn_do_close_internal+0xc0>
      tcp_recv(tpcb, NULL);
 800469c:	2100      	movs	r1, #0
 800469e:	4628      	mov	r0, r5
 80046a0:	f003 fb96 	bl	8007dd0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80046a4:	2100      	movs	r1, #0
 80046a6:	4628      	mov	r0, r5
 80046a8:	f003 fbde 	bl	8007e68 <tcp_accept>
 80046ac:	e7d4      	b.n	8004658 <lwip_netconn_do_close_internal+0xb8>
      tcp_sent(tpcb, NULL);
 80046ae:	2100      	movs	r1, #0
 80046b0:	4628      	mov	r0, r5
 80046b2:	f003 fba7 	bl	8007e04 <tcp_sent>
 80046b6:	e7d2      	b.n	800465e <lwip_netconn_do_close_internal+0xbe>
      tcp_poll(tpcb, NULL, 0);
 80046b8:	2200      	movs	r2, #0
 80046ba:	4611      	mov	r1, r2
 80046bc:	4628      	mov	r0, r5
 80046be:	f003 fbdb 	bl	8007e78 <tcp_poll>
      tcp_err(tpcb, NULL);
 80046c2:	2100      	movs	r1, #0
 80046c4:	4628      	mov	r0, r5
 80046c6:	f003 fbb5 	bl	8007e34 <tcp_err>
 80046ca:	e7c9      	b.n	8004660 <lwip_netconn_do_close_internal+0xc0>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80046cc:	464a      	mov	r2, r9
 80046ce:	4651      	mov	r1, sl
 80046d0:	4628      	mov	r0, r5
 80046d2:	f003 ffb3 	bl	800863c <tcp_shutdown>
 80046d6:	4606      	mov	r6, r0
 80046d8:	e7c7      	b.n	800466a <lwip_netconn_do_close_internal+0xca>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80046da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046dc:	7a5b      	ldrb	r3, [r3, #9]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d13f      	bne.n	8004762 <lwip_netconn_do_close_internal+0x1c2>
        if (close) {
 80046e2:	b90f      	cbnz	r7, 80046e8 <lwip_netconn_do_close_internal+0x148>
        close_finished = 1;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e006      	b.n	80046f6 <lwip_netconn_do_close_internal+0x156>
          tcp_abort(tpcb);
 80046e8:	4628      	mov	r0, r5
 80046ea:	f004 f84f 	bl	800878c <tcp_abort>
        close_finished = 1;
 80046ee:	463b      	mov	r3, r7
          err = ERR_OK;
 80046f0:	2600      	movs	r6, #0
 80046f2:	e000      	b.n	80046f6 <lwip_netconn_do_close_internal+0x156>
    close_finished = 1;
 80046f4:	2301      	movs	r3, #1
  if (close_finished) {
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d03a      	beq.n	8004770 <lwip_netconn_do_close_internal+0x1d0>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80046fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046fc:	681d      	ldr	r5, [r3, #0]
 80046fe:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 8004700:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8004706:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8004708:	b9ce      	cbnz	r6, 800473e <lwip_netconn_do_close_internal+0x19e>
      if (close) {
 800470a:	b137      	cbz	r7, 800471a <lwip_netconn_do_close_internal+0x17a>
        conn->pcb.tcp = NULL;
 800470c:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800470e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004710:	b11b      	cbz	r3, 800471a <lwip_netconn_do_close_internal+0x17a>
 8004712:	2200      	movs	r2, #0
 8004714:	2104      	movs	r1, #4
 8004716:	4620      	mov	r0, r4
 8004718:	4798      	blx	r3
      if (shut_rx) {
 800471a:	f1ba 0f00 	cmp.w	sl, #0
 800471e:	d005      	beq.n	800472c <lwip_netconn_do_close_internal+0x18c>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004722:	b11b      	cbz	r3, 800472c <lwip_netconn_do_close_internal+0x18c>
 8004724:	2200      	movs	r2, #0
 8004726:	4611      	mov	r1, r2
 8004728:	4620      	mov	r0, r4
 800472a:	4798      	blx	r3
      if (shut_tx) {
 800472c:	f1b9 0f00 	cmp.w	r9, #0
 8004730:	d005      	beq.n	800473e <lwip_netconn_do_close_internal+0x19e>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004732:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004734:	b11b      	cbz	r3, 800473e <lwip_netconn_do_close_internal+0x19e>
 8004736:	2200      	movs	r2, #0
 8004738:	2102      	movs	r1, #2
 800473a:	4620      	mov	r0, r4
 800473c:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 800473e:	b14c      	cbz	r4, 8004754 <lwip_netconn_do_close_internal+0x1b4>
 8004740:	f007 f99a 	bl	800ba78 <sys_arch_protect>
 8004744:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004748:	f113 0f0c 	cmn.w	r3, #12
 800474c:	db00      	blt.n	8004750 <lwip_netconn_do_close_internal+0x1b0>
 800474e:	7226      	strb	r6, [r4, #8]
 8004750:	f007 f99e 	bl	800ba90 <sys_arch_unprotect>
    if (delayed)
 8004754:	f1b8 0f00 	cmp.w	r8, #0
 8004758:	d105      	bne.n	8004766 <lwip_netconn_do_close_internal+0x1c6>
    return ERR_OK;
 800475a:	2600      	movs	r6, #0
}
 800475c:	4630      	mov	r0, r6
 800475e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t close_finished = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	e7c7      	b.n	80046f6 <lwip_netconn_do_close_internal+0x156>
      sys_sem_signal(op_completed_sem);
 8004766:	4628      	mov	r0, r5
 8004768:	f007 f936 	bl	800b9d8 <sys_sem_signal>
    return ERR_OK;
 800476c:	2600      	movs	r6, #0
 800476e:	e7f5      	b.n	800475c <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004770:	7d2b      	ldrb	r3, [r5, #20]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d019      	beq.n	80047aa <lwip_netconn_do_close_internal+0x20a>
    if (shut_tx) {
 8004776:	f1b9 0f00 	cmp.w	r9, #0
 800477a:	d11e      	bne.n	80047ba <lwip_netconn_do_close_internal+0x21a>
    tcp_poll(tpcb, poll_tcp, 1);
 800477c:	2201      	movs	r2, #1
 800477e:	4918      	ldr	r1, [pc, #96]	; (80047e0 <lwip_netconn_do_close_internal+0x240>)
 8004780:	4628      	mov	r0, r5
 8004782:	f003 fb79 	bl	8007e78 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8004786:	4917      	ldr	r1, [pc, #92]	; (80047e4 <lwip_netconn_do_close_internal+0x244>)
 8004788:	4628      	mov	r0, r5
 800478a:	f003 fb53 	bl	8007e34 <tcp_err>
    tcp_arg(tpcb, conn);
 800478e:	4621      	mov	r1, r4
 8004790:	4628      	mov	r0, r5
 8004792:	f003 fb1a 	bl	8007dca <tcp_arg>
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8004796:	2e00      	cmp	r6, #0
 8004798:	d1e0      	bne.n	800475c <lwip_netconn_do_close_internal+0x1bc>
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <lwip_netconn_do_close_internal+0x224>)
 800479c:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80047a0:	4911      	ldr	r1, [pc, #68]	; (80047e8 <lwip_netconn_do_close_internal+0x248>)
 80047a2:	480a      	ldr	r0, [pc, #40]	; (80047cc <lwip_netconn_do_close_internal+0x22c>)
 80047a4:	f007 fef1 	bl	800c58a <iprintf>
 80047a8:	e7d8      	b.n	800475c <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <lwip_netconn_do_close_internal+0x224>)
 80047ac:	f240 32e3 	movw	r2, #995	; 0x3e3
 80047b0:	490e      	ldr	r1, [pc, #56]	; (80047ec <lwip_netconn_do_close_internal+0x24c>)
 80047b2:	4806      	ldr	r0, [pc, #24]	; (80047cc <lwip_netconn_do_close_internal+0x22c>)
 80047b4:	f007 fee9 	bl	800c58a <iprintf>
 80047b8:	e7dd      	b.n	8004776 <lwip_netconn_do_close_internal+0x1d6>
      tcp_sent(tpcb, sent_tcp);
 80047ba:	490d      	ldr	r1, [pc, #52]	; (80047f0 <lwip_netconn_do_close_internal+0x250>)
 80047bc:	4628      	mov	r0, r5
 80047be:	f003 fb21 	bl	8007e04 <tcp_sent>
 80047c2:	e7db      	b.n	800477c <lwip_netconn_do_close_internal+0x1dc>
 80047c4:	0800cd30 	.word	0x0800cd30
 80047c8:	0800ca60 	.word	0x0800ca60
 80047cc:	0800c8d0 	.word	0x0800c8d0
 80047d0:	0800ca80 	.word	0x0800ca80
 80047d4:	0800c908 	.word	0x0800c908
 80047d8:	0800caa4 	.word	0x0800caa4
 80047dc:	0800ca0c 	.word	0x0800ca0c
 80047e0:	080047f5 	.word	0x080047f5
 80047e4:	08004241 	.word	0x08004241
 80047e8:	0800cadc 	.word	0x0800cadc
 80047ec:	0800cab8 	.word	0x0800cab8
 80047f0:	08004879 	.word	0x08004879

080047f4 <poll_tcp>:
{
 80047f4:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80047f6:	4604      	mov	r4, r0
 80047f8:	b1f8      	cbz	r0, 800483a <poll_tcp+0x46>
  if (conn->state == NETCONN_WRITE) {
 80047fa:	7863      	ldrb	r3, [r4, #1]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d024      	beq.n	800484a <poll_tcp+0x56>
  } else if (conn->state == NETCONN_CLOSE) {
 8004800:	2b04      	cmp	r3, #4
 8004802:	d027      	beq.n	8004854 <poll_tcp+0x60>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8004804:	7f23      	ldrb	r3, [r4, #28]
 8004806:	f013 0f10 	tst.w	r3, #16
 800480a:	d014      	beq.n	8004836 <poll_tcp+0x42>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800480c:	6862      	ldr	r2, [r4, #4]
 800480e:	b192      	cbz	r2, 8004836 <poll_tcp+0x42>
 8004810:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
 8004814:	f240 3199 	movw	r1, #921	; 0x399
 8004818:	4288      	cmp	r0, r1
 800481a:	d90c      	bls.n	8004836 <poll_tcp+0x42>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800481c:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004820:	2a07      	cmp	r2, #7
 8004822:	d808      	bhi.n	8004836 <poll_tcp+0x42>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8004824:	f023 0310 	bic.w	r3, r3, #16
 8004828:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800482a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800482c:	b11b      	cbz	r3, 8004836 <poll_tcp+0x42>
 800482e:	2200      	movs	r2, #0
 8004830:	2102      	movs	r1, #2
 8004832:	4620      	mov	r0, r4
 8004834:	4798      	blx	r3
}
 8004836:	2000      	movs	r0, #0
 8004838:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800483a:	4b0c      	ldr	r3, [pc, #48]	; (800486c <poll_tcp+0x78>)
 800483c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004840:	490b      	ldr	r1, [pc, #44]	; (8004870 <poll_tcp+0x7c>)
 8004842:	480c      	ldr	r0, [pc, #48]	; (8004874 <poll_tcp+0x80>)
 8004844:	f007 fea1 	bl	800c58a <iprintf>
 8004848:	e7d7      	b.n	80047fa <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800484a:	2101      	movs	r1, #1
 800484c:	4620      	mov	r0, r4
 800484e:	f7ff fd97 	bl	8004380 <lwip_netconn_do_writemore>
 8004852:	e7d7      	b.n	8004804 <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8004854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004856:	b11b      	cbz	r3, 8004860 <poll_tcp+0x6c>
 8004858:	7a5a      	ldrb	r2, [r3, #9]
 800485a:	b10a      	cbz	r2, 8004860 <poll_tcp+0x6c>
      conn->current_msg->msg.sd.polls_left--;
 800485c:	3a01      	subs	r2, #1
 800485e:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004860:	2101      	movs	r1, #1
 8004862:	4620      	mov	r0, r4
 8004864:	f7ff fe9c 	bl	80045a0 <lwip_netconn_do_close_internal>
 8004868:	e7cc      	b.n	8004804 <poll_tcp+0x10>
 800486a:	bf00      	nop
 800486c:	0800cd30 	.word	0x0800cd30
 8004870:	0800c9fc 	.word	0x0800c9fc
 8004874:	0800c8d0 	.word	0x0800c8d0

08004878 <sent_tcp>:
{
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800487c:	4604      	mov	r4, r0
 800487e:	b1e8      	cbz	r0, 80048bc <sent_tcp+0x44>
  if (conn) {
 8004880:	b1d4      	cbz	r4, 80048b8 <sent_tcp+0x40>
    if (conn->state == NETCONN_WRITE) {
 8004882:	7863      	ldrb	r3, [r4, #1]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d021      	beq.n	80048cc <sent_tcp+0x54>
    } else if (conn->state == NETCONN_CLOSE) {
 8004888:	2b04      	cmp	r3, #4
 800488a:	d024      	beq.n	80048d6 <sent_tcp+0x5e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800488c:	6863      	ldr	r3, [r4, #4]
 800488e:	b19b      	cbz	r3, 80048b8 <sent_tcp+0x40>
 8004890:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 8004894:	f240 3299 	movw	r2, #921	; 0x399
 8004898:	4291      	cmp	r1, r2
 800489a:	d90d      	bls.n	80048b8 <sent_tcp+0x40>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800489c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80048a0:	2b07      	cmp	r3, #7
 80048a2:	d809      	bhi.n	80048b8 <sent_tcp+0x40>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80048a4:	7f23      	ldrb	r3, [r4, #28]
 80048a6:	f023 0310 	bic.w	r3, r3, #16
 80048aa:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80048ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048ae:	b11b      	cbz	r3, 80048b8 <sent_tcp+0x40>
 80048b0:	462a      	mov	r2, r5
 80048b2:	2102      	movs	r1, #2
 80048b4:	4620      	mov	r0, r4
 80048b6:	4798      	blx	r3
}
 80048b8:	2000      	movs	r0, #0
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <sent_tcp+0x68>)
 80048be:	f240 1261 	movw	r2, #353	; 0x161
 80048c2:	4908      	ldr	r1, [pc, #32]	; (80048e4 <sent_tcp+0x6c>)
 80048c4:	4808      	ldr	r0, [pc, #32]	; (80048e8 <sent_tcp+0x70>)
 80048c6:	f007 fe60 	bl	800c58a <iprintf>
 80048ca:	e7d9      	b.n	8004880 <sent_tcp+0x8>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80048cc:	2101      	movs	r1, #1
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7ff fd56 	bl	8004380 <lwip_netconn_do_writemore>
 80048d4:	e7da      	b.n	800488c <sent_tcp+0x14>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80048d6:	2101      	movs	r1, #1
 80048d8:	4620      	mov	r0, r4
 80048da:	f7ff fe61 	bl	80045a0 <lwip_netconn_do_close_internal>
 80048de:	e7d5      	b.n	800488c <sent_tcp+0x14>
 80048e0:	0800cd30 	.word	0x0800cd30
 80048e4:	0800c9fc 	.word	0x0800c9fc
 80048e8:	0800c8d0 	.word	0x0800c8d0

080048ec <recv_tcp>:
{
 80048ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f0:	4604      	mov	r4, r0
 80048f2:	4615      	mov	r5, r2
 80048f4:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80048f6:	460f      	mov	r7, r1
 80048f8:	b1e9      	cbz	r1, 8004936 <recv_tcp+0x4a>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80048fa:	b31c      	cbz	r4, 8004944 <recv_tcp+0x58>
  if (conn == NULL) {
 80048fc:	2c00      	cmp	r4, #0
 80048fe:	d04a      	beq.n	8004996 <recv_tcp+0xaa>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8004900:	6863      	ldr	r3, [r4, #4]
 8004902:	429f      	cmp	r7, r3
 8004904:	d006      	beq.n	8004914 <recv_tcp+0x28>
 8004906:	4b28      	ldr	r3, [pc, #160]	; (80049a8 <recv_tcp+0xbc>)
 8004908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800490c:	4927      	ldr	r1, [pc, #156]	; (80049ac <recv_tcp+0xc0>)
 800490e:	4828      	ldr	r0, [pc, #160]	; (80049b0 <recv_tcp+0xc4>)
 8004910:	f007 fe3b 	bl	800c58a <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8004914:	f104 0610 	add.w	r6, r4, #16
 8004918:	4630      	mov	r0, r6
 800491a:	f007 f81d 	bl	800b958 <sys_mbox_valid>
 800491e:	b9c0      	cbnz	r0, 8004952 <recv_tcp+0x66>
    if (p != NULL) {
 8004920:	2d00      	cmp	r5, #0
 8004922:	d03b      	beq.n	800499c <recv_tcp+0xb0>
      tcp_recved(pcb, p->tot_len);
 8004924:	8929      	ldrh	r1, [r5, #8]
 8004926:	4638      	mov	r0, r7
 8004928:	f003 f9e2 	bl	8007cf0 <tcp_recved>
      pbuf_free(p);
 800492c:	4628      	mov	r0, r5
 800492e:	f002 fd3d 	bl	80073ac <pbuf_free>
    return ERR_OK;
 8004932:	2500      	movs	r5, #0
 8004934:	e01e      	b.n	8004974 <recv_tcp+0x88>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8004936:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <recv_tcp+0xbc>)
 8004938:	22f9      	movs	r2, #249	; 0xf9
 800493a:	491e      	ldr	r1, [pc, #120]	; (80049b4 <recv_tcp+0xc8>)
 800493c:	481c      	ldr	r0, [pc, #112]	; (80049b0 <recv_tcp+0xc4>)
 800493e:	f007 fe24 	bl	800c58a <iprintf>
 8004942:	e7da      	b.n	80048fa <recv_tcp+0xe>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004944:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <recv_tcp+0xbc>)
 8004946:	22fa      	movs	r2, #250	; 0xfa
 8004948:	491b      	ldr	r1, [pc, #108]	; (80049b8 <recv_tcp+0xcc>)
 800494a:	4819      	ldr	r0, [pc, #100]	; (80049b0 <recv_tcp+0xc4>)
 800494c:	f007 fe1d 	bl	800c58a <iprintf>
 8004950:	e7d4      	b.n	80048fc <recv_tcp+0x10>
  if (err != ERR_OK) {
 8004952:	f1b8 0f00 	cmp.w	r8, #0
 8004956:	d110      	bne.n	800497a <recv_tcp+0x8e>
  if (p != NULL) {
 8004958:	b1dd      	cbz	r5, 8004992 <recv_tcp+0xa6>
    len = p->tot_len;
 800495a:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800495c:	4629      	mov	r1, r5
 800495e:	4630      	mov	r0, r6
 8004960:	f006 ffb1 	bl	800b8c6 <sys_mbox_trypost>
 8004964:	4605      	mov	r5, r0
 8004966:	b9d8      	cbnz	r0, 80049a0 <recv_tcp+0xb4>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004968:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800496a:	b11b      	cbz	r3, 8004974 <recv_tcp+0x88>
 800496c:	463a      	mov	r2, r7
 800496e:	2100      	movs	r1, #0
 8004970:	4620      	mov	r0, r4
 8004972:	4798      	blx	r3
}
 8004974:	4628      	mov	r0, r5
 8004976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NETCONN_SET_SAFE_ERR(conn, err);
 800497a:	f007 f87d 	bl	800ba78 <sys_arch_protect>
 800497e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004982:	f113 0f0c 	cmn.w	r3, #12
 8004986:	db01      	blt.n	800498c <recv_tcp+0xa0>
 8004988:	f884 8008 	strb.w	r8, [r4, #8]
 800498c:	f007 f880 	bl	800ba90 <sys_arch_unprotect>
 8004990:	e7e2      	b.n	8004958 <recv_tcp+0x6c>
    len = 0;
 8004992:	2700      	movs	r7, #0
 8004994:	e7e2      	b.n	800495c <recv_tcp+0x70>
    return ERR_VAL;
 8004996:	f06f 0505 	mvn.w	r5, #5
 800499a:	e7eb      	b.n	8004974 <recv_tcp+0x88>
    return ERR_OK;
 800499c:	2500      	movs	r5, #0
 800499e:	e7e9      	b.n	8004974 <recv_tcp+0x88>
    return ERR_MEM;
 80049a0:	f04f 35ff 	mov.w	r5, #4294967295
 80049a4:	e7e6      	b.n	8004974 <recv_tcp+0x88>
 80049a6:	bf00      	nop
 80049a8:	0800cd30 	.word	0x0800cd30
 80049ac:	0800cd10 	.word	0x0800cd10
 80049b0:	0800c8d0 	.word	0x0800c8d0
 80049b4:	0800cccc 	.word	0x0800cccc
 80049b8:	0800ccf0 	.word	0x0800ccf0

080049bc <lwip_netconn_do_newconn>:
{
 80049bc:	b510      	push	{r4, lr}
 80049be:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80049c4:	6803      	ldr	r3, [r0, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	b17b      	cbz	r3, 80049ea <lwip_netconn_do_newconn+0x2e>
  TCPIP_APIMSG_ACK(msg);
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	b163      	cbz	r3, 80049e8 <lwip_netconn_do_newconn+0x2c>
 80049ce:	f007 f853 	bl	800ba78 <sys_arch_protect>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80049d8:	f112 0f0c 	cmn.w	r2, #12
 80049dc:	db02      	blt.n	80049e4 <lwip_netconn_do_newconn+0x28>
 80049de:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80049e2:	721a      	strb	r2, [r3, #8]
 80049e4:	f007 f854 	bl	800ba90 <sys_arch_unprotect>
 80049e8:	bd10      	pop	{r4, pc}
    pcb_new(msg);
 80049ea:	f7ff fbe5 	bl	80041b8 <pcb_new>
 80049ee:	e7ec      	b.n	80049ca <lwip_netconn_do_newconn+0xe>

080049f0 <netconn_alloc>:
{
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	4605      	mov	r5, r0
 80049f4:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80049f6:	2007      	movs	r0, #7
 80049f8:	f002 fae8 	bl	8006fcc <memp_malloc>
  if (conn == NULL) {
 80049fc:	4604      	mov	r4, r0
 80049fe:	b318      	cbz	r0, 8004a48 <netconn_alloc+0x58>
  conn->last_err = ERR_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8004a04:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 8004a06:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 8004a08:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004a0c:	2d10      	cmp	r5, #16
 8004a0e:	d001      	beq.n	8004a14 <netconn_alloc+0x24>
 8004a10:	2d20      	cmp	r5, #32
 8004a12:	d11b      	bne.n	8004a4c <netconn_alloc+0x5c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8004a14:	f104 0510 	add.w	r5, r4, #16
 8004a18:	2106      	movs	r1, #6
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f006 ff2c 	bl	800b878 <sys_mbox_new>
 8004a20:	b9d8      	cbnz	r0, 8004a5a <netconn_alloc+0x6a>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8004a22:	2100      	movs	r1, #0
 8004a24:	f104 000c 	add.w	r0, r4, #12
 8004a28:	f006 ff9f 	bl	800b96a <sys_sem_new>
 8004a2c:	b9d8      	cbnz	r0, 8004a66 <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8004a2e:	f104 0014 	add.w	r0, r4, #20
 8004a32:	f006 ff97 	bl	800b964 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8004a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3e:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 8004a40:	62a6      	str	r6, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 8004a42:	6263      	str	r3, [r4, #36]	; 0x24
  conn->write_offset = 0;
 8004a44:	6223      	str	r3, [r4, #32]
  conn->flags = 0;
 8004a46:	7723      	strb	r3, [r4, #28]
}
 8004a48:	4620      	mov	r0, r4
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8004a4c:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <netconn_alloc+0x80>)
 8004a4e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8004a52:	4908      	ldr	r1, [pc, #32]	; (8004a74 <netconn_alloc+0x84>)
 8004a54:	4808      	ldr	r0, [pc, #32]	; (8004a78 <netconn_alloc+0x88>)
 8004a56:	f007 fd98 	bl	800c58a <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	2007      	movs	r0, #7
 8004a5e:	f002 facf 	bl	8007000 <memp_free>
  return NULL;
 8004a62:	2400      	movs	r4, #0
 8004a64:	e7f0      	b.n	8004a48 <netconn_alloc+0x58>
    sys_mbox_free(&conn->recvmbox);
 8004a66:	4628      	mov	r0, r5
 8004a68:	f006 ff18 	bl	800b89c <sys_mbox_free>
    goto free_and_return;
 8004a6c:	e7f5      	b.n	8004a5a <netconn_alloc+0x6a>
 8004a6e:	bf00      	nop
 8004a70:	0800cd30 	.word	0x0800cd30
 8004a74:	0800cbdc 	.word	0x0800cbdc
 8004a78:	0800c8d0 	.word	0x0800c8d0

08004a7c <netconn_free>:
{
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8004a80:	6843      	ldr	r3, [r0, #4]
 8004a82:	b133      	cbz	r3, 8004a92 <netconn_free+0x16>
 8004a84:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <netconn_free+0x64>)
 8004a86:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8004a8a:	4916      	ldr	r1, [pc, #88]	; (8004ae4 <netconn_free+0x68>)
 8004a8c:	4816      	ldr	r0, [pc, #88]	; (8004ae8 <netconn_free+0x6c>)
 8004a8e:	f007 fd7c 	bl	800c58a <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004a92:	f104 0010 	add.w	r0, r4, #16
 8004a96:	f006 ff5f 	bl	800b958 <sys_mbox_valid>
 8004a9a:	b988      	cbnz	r0, 8004ac0 <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004a9c:	f104 0014 	add.w	r0, r4, #20
 8004aa0:	f006 ff5a 	bl	800b958 <sys_mbox_valid>
 8004aa4:	b9a0      	cbnz	r0, 8004ad0 <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 8004aa6:	f104 050c 	add.w	r5, r4, #12
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f006 ff99 	bl	800b9e2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f006 ffa1 	bl	800b9f8 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	2007      	movs	r0, #7
 8004aba:	f002 faa1 	bl	8007000 <memp_free>
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <netconn_free+0x64>)
 8004ac2:	f240 22e2 	movw	r2, #738	; 0x2e2
 8004ac6:	4909      	ldr	r1, [pc, #36]	; (8004aec <netconn_free+0x70>)
 8004ac8:	4807      	ldr	r0, [pc, #28]	; (8004ae8 <netconn_free+0x6c>)
 8004aca:	f007 fd5e 	bl	800c58a <iprintf>
 8004ace:	e7e5      	b.n	8004a9c <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004ad0:	4b03      	ldr	r3, [pc, #12]	; (8004ae0 <netconn_free+0x64>)
 8004ad2:	f240 22e5 	movw	r2, #741	; 0x2e5
 8004ad6:	4906      	ldr	r1, [pc, #24]	; (8004af0 <netconn_free+0x74>)
 8004ad8:	4803      	ldr	r0, [pc, #12]	; (8004ae8 <netconn_free+0x6c>)
 8004ada:	f007 fd56 	bl	800c58a <iprintf>
 8004ade:	e7e2      	b.n	8004aa6 <netconn_free+0x2a>
 8004ae0:	0800cd30 	.word	0x0800cd30
 8004ae4:	0800cc04 	.word	0x0800cc04
 8004ae8:	0800c8d0 	.word	0x0800c8d0
 8004aec:	0800cc34 	.word	0x0800cc34
 8004af0:	0800cc70 	.word	0x0800cc70

08004af4 <netconn_drain>:
{
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	4605      	mov	r5, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8004afa:	f100 0410 	add.w	r4, r0, #16
 8004afe:	4620      	mov	r0, r4
 8004b00:	f006 ff2a 	bl	800b958 <sys_mbox_valid>
 8004b04:	bb38      	cbnz	r0, 8004b56 <netconn_drain+0x62>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004b06:	3514      	adds	r5, #20
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f006 ff25 	bl	800b958 <sys_mbox_valid>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d03e      	beq.n	8004b90 <netconn_drain+0x9c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8004b12:	a901      	add	r1, sp, #4
 8004b14:	4628      	mov	r0, r5
 8004b16:	f006 ff0c 	bl	800b932 <sys_arch_mbox_tryfetch>
 8004b1a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b1e:	d031      	beq.n	8004b84 <netconn_drain+0x90>
      if (mem != &netconn_aborted) {
 8004b20:	9c01      	ldr	r4, [sp, #4]
 8004b22:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <netconn_drain+0xa0>)
 8004b24:	429c      	cmp	r4, r3
 8004b26:	d0f4      	beq.n	8004b12 <netconn_drain+0x1e>
        netconn_drain(newconn);
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f7ff ffe3 	bl	8004af4 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8004b2e:	6860      	ldr	r0, [r4, #4]
 8004b30:	b118      	cbz	r0, 8004b3a <netconn_drain+0x46>
          tcp_abort(newconn->pcb.tcp);
 8004b32:	f003 fe2b 	bl	800878c <tcp_abort>
          newconn->pcb.tcp = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	6063      	str	r3, [r4, #4]
        netconn_free(newconn);
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f7ff ff9e 	bl	8004a7c <netconn_free>
 8004b40:	e7e7      	b.n	8004b12 <netconn_drain+0x1e>
        if (mem != NULL) {
 8004b42:	9e01      	ldr	r6, [sp, #4]
 8004b44:	b13e      	cbz	r6, 8004b56 <netconn_drain+0x62>
          if (conn->pcb.tcp != NULL) {
 8004b46:	6868      	ldr	r0, [r5, #4]
 8004b48:	b110      	cbz	r0, 8004b50 <netconn_drain+0x5c>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8004b4a:	8931      	ldrh	r1, [r6, #8]
 8004b4c:	f003 f8d0 	bl	8007cf0 <tcp_recved>
          pbuf_free(p);
 8004b50:	4630      	mov	r0, r6
 8004b52:	f002 fc2b 	bl	80073ac <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8004b56:	a901      	add	r1, sp, #4
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f006 feea 	bl	800b932 <sys_arch_mbox_tryfetch>
 8004b5e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b62:	d008      	beq.n	8004b76 <netconn_drain+0x82>
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8004b64:	782b      	ldrb	r3, [r5, #0]
 8004b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b6a:	2b10      	cmp	r3, #16
 8004b6c:	d0e9      	beq.n	8004b42 <netconn_drain+0x4e>
        netbuf_delete((struct netbuf *)mem);
 8004b6e:	9801      	ldr	r0, [sp, #4]
 8004b70:	f000 fa96 	bl	80050a0 <netbuf_delete>
 8004b74:	e7ef      	b.n	8004b56 <netconn_drain+0x62>
    sys_mbox_free(&conn->recvmbox);
 8004b76:	4620      	mov	r0, r4
 8004b78:	f006 fe90 	bl	800b89c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f006 fef1 	bl	800b964 <sys_mbox_set_invalid>
 8004b82:	e7c0      	b.n	8004b06 <netconn_drain+0x12>
    sys_mbox_free(&conn->acceptmbox);
 8004b84:	4628      	mov	r0, r5
 8004b86:	f006 fe89 	bl	800b89c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f006 feea 	bl	800b964 <sys_mbox_set_invalid>
}
 8004b90:	b002      	add	sp, #8
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
 8004b94:	20003f5c 	.word	0x20003f5c

08004b98 <accept_function>:
{
 8004b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (conn == NULL) {
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	d067      	beq.n	8004c70 <accept_function+0xd8>
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	4616      	mov	r6, r2
 8004ba4:	460d      	mov	r5, r1
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8004ba6:	f100 0814 	add.w	r8, r0, #20
 8004baa:	4640      	mov	r0, r8
 8004bac:	f006 fed4 	bl	800b958 <sys_mbox_valid>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d060      	beq.n	8004c76 <accept_function+0xde>
  if (newpcb == NULL) {
 8004bb4:	b1c5      	cbz	r5, 8004be8 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 8004bb6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004bb8:	7820      	ldrb	r0, [r4, #0]
 8004bba:	f7ff ff19 	bl	80049f0 <netconn_alloc>
  if (newconn == NULL) {
 8004bbe:	4607      	mov	r7, r0
 8004bc0:	b310      	cbz	r0, 8004c08 <accept_function+0x70>
  newconn->pcb.tcp = newpcb;
 8004bc2:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 8004bc4:	f7ff fad8 	bl	8004178 <setup_tcp>
  newconn->last_err = err;
 8004bc8:	723e      	strb	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8004bca:	4639      	mov	r1, r7
 8004bcc:	4640      	mov	r0, r8
 8004bce:	f006 fe7a 	bl	800b8c6 <sys_mbox_trypost>
 8004bd2:	4605      	mov	r5, r0
 8004bd4:	bb30      	cbnz	r0, 8004c24 <accept_function+0x8c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004bd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004bd8:	b11b      	cbz	r3, 8004be2 <accept_function+0x4a>
 8004bda:	2200      	movs	r2, #0
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4620      	mov	r0, r4
 8004be0:	4798      	blx	r3
}
 8004be2:	4628      	mov	r0, r5
 8004be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8004be8:	492a      	ldr	r1, [pc, #168]	; (8004c94 <accept_function+0xfc>)
 8004bea:	4640      	mov	r0, r8
 8004bec:	f006 fe6b 	bl	800b8c6 <sys_mbox_trypost>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d143      	bne.n	8004c7c <accept_function+0xe4>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004bf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d043      	beq.n	8004c82 <accept_function+0xea>
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	4620      	mov	r0, r4
 8004c00:	4798      	blx	r3
    return ERR_VAL;
 8004c02:	f06f 0505 	mvn.w	r5, #5
 8004c06:	e7ec      	b.n	8004be2 <accept_function+0x4a>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8004c08:	4922      	ldr	r1, [pc, #136]	; (8004c94 <accept_function+0xfc>)
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	f006 fe5b 	bl	800b8c6 <sys_mbox_trypost>
 8004c10:	bbd0      	cbnz	r0, 8004c88 <accept_function+0xf0>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004c12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c14:	b3db      	cbz	r3, 8004c8e <accept_function+0xf6>
 8004c16:	2200      	movs	r2, #0
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	4798      	blx	r3
    return ERR_MEM;
 8004c1e:	f04f 35ff 	mov.w	r5, #4294967295
 8004c22:	e7de      	b.n	8004be2 <accept_function+0x4a>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8004c24:	687c      	ldr	r4, [r7, #4]
    tcp_arg(pcb, NULL);
 8004c26:	2100      	movs	r1, #0
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f003 f8ce 	bl	8007dca <tcp_arg>
    tcp_recv(pcb, NULL);
 8004c2e:	2100      	movs	r1, #0
 8004c30:	4620      	mov	r0, r4
 8004c32:	f003 f8cd 	bl	8007dd0 <tcp_recv>
    tcp_sent(pcb, NULL);
 8004c36:	2100      	movs	r1, #0
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f003 f8e3 	bl	8007e04 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	4611      	mov	r1, r2
 8004c42:	4620      	mov	r0, r4
 8004c44:	f003 f918 	bl	8007e78 <tcp_poll>
    tcp_err(pcb, NULL);
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f003 f8f2 	bl	8007e34 <tcp_err>
    newconn->pcb.tcp = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	607b      	str	r3, [r7, #4]
    sys_mbox_free(&newconn->recvmbox);
 8004c54:	f107 0410 	add.w	r4, r7, #16
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f006 fe1f 	bl	800b89c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f006 fe80 	bl	800b964 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8004c64:	4638      	mov	r0, r7
 8004c66:	f7ff ff09 	bl	8004a7c <netconn_free>
    return ERR_MEM;
 8004c6a:	f04f 35ff 	mov.w	r5, #4294967295
 8004c6e:	e7b8      	b.n	8004be2 <accept_function+0x4a>
    return ERR_VAL;
 8004c70:	f06f 0505 	mvn.w	r5, #5
 8004c74:	e7b5      	b.n	8004be2 <accept_function+0x4a>
    return ERR_VAL;
 8004c76:	f06f 0505 	mvn.w	r5, #5
 8004c7a:	e7b2      	b.n	8004be2 <accept_function+0x4a>
    return ERR_VAL;
 8004c7c:	f06f 0505 	mvn.w	r5, #5
 8004c80:	e7af      	b.n	8004be2 <accept_function+0x4a>
 8004c82:	f06f 0505 	mvn.w	r5, #5
 8004c86:	e7ac      	b.n	8004be2 <accept_function+0x4a>
    return ERR_MEM;
 8004c88:	f04f 35ff 	mov.w	r5, #4294967295
 8004c8c:	e7a9      	b.n	8004be2 <accept_function+0x4a>
 8004c8e:	f04f 35ff 	mov.w	r5, #4294967295
 8004c92:	e7a6      	b.n	8004be2 <accept_function+0x4a>
 8004c94:	20003f5c 	.word	0x20003f5c

08004c98 <lwip_netconn_do_delconn>:
{
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 8004c9c:	6803      	ldr	r3, [r0, #0]
 8004c9e:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8004ca0:	b15d      	cbz	r5, 8004cba <lwip_netconn_do_delconn+0x22>
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d006      	beq.n	8004cba <lwip_netconn_do_delconn+0x22>
 8004cac:	4b4e      	ldr	r3, [pc, #312]	; (8004de8 <lwip_netconn_do_delconn+0x150>)
 8004cae:	f240 4201 	movw	r2, #1025	; 0x401
 8004cb2:	494e      	ldr	r1, [pc, #312]	; (8004dec <lwip_netconn_do_delconn+0x154>)
 8004cb4:	484e      	ldr	r0, [pc, #312]	; (8004df0 <lwip_netconn_do_delconn+0x158>)
 8004cb6:	f007 fc68 	bl	800c58a <iprintf>
  if (((state != NETCONN_NONE) &&
 8004cba:	b1d5      	cbz	r5, 8004cf2 <lwip_netconn_do_delconn+0x5a>
 8004cbc:	2d02      	cmp	r5, #2
 8004cbe:	d018      	beq.n	8004cf2 <lwip_netconn_do_delconn+0x5a>
       (state != NETCONN_LISTEN) &&
 8004cc0:	2d03      	cmp	r5, #3
 8004cc2:	d016      	beq.n	8004cf2 <lwip_netconn_do_delconn+0x5a>
    msg->err = ERR_INPROGRESS;
 8004cc4:	23fb      	movs	r3, #251	; 0xfb
 8004cc6:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8004cc8:	6820      	ldr	r0, [r4, #0]
 8004cca:	300c      	adds	r0, #12
 8004ccc:	f006 fe8e 	bl	800b9ec <sys_sem_valid>
 8004cd0:	b170      	cbz	r0, 8004cf0 <lwip_netconn_do_delconn+0x58>
    TCPIP_APIMSG_ACK(msg);
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	b163      	cbz	r3, 8004cf0 <lwip_netconn_do_delconn+0x58>
 8004cd6:	f006 fecf 	bl	800ba78 <sys_arch_protect>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004ce0:	f112 0f0c 	cmn.w	r2, #12
 8004ce4:	db02      	blt.n	8004cec <lwip_netconn_do_delconn+0x54>
 8004ce6:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004cea:	721a      	strb	r2, [r3, #8]
 8004cec:	f006 fed0 	bl	800ba90 <sys_arch_unprotect>
 8004cf0:	bd38      	pop	{r3, r4, r5, pc}
       (state != NETCONN_CONNECT)) ||
 8004cf2:	2d03      	cmp	r5, #3
 8004cf4:	d027      	beq.n	8004d46 <lwip_netconn_do_delconn+0xae>
    LWIP_ASSERT("blocking connect in progress",
 8004cf6:	2d03      	cmp	r5, #3
 8004cf8:	d02b      	beq.n	8004d52 <lwip_netconn_do_delconn+0xba>
    msg->err = ERR_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 8004cfe:	6820      	ldr	r0, [r4, #0]
 8004d00:	f7ff fef8 	bl	8004af4 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8004d04:	6822      	ldr	r2, [r4, #0]
 8004d06:	6851      	ldr	r1, [r2, #4]
 8004d08:	b179      	cbz	r1, 8004d2a <lwip_netconn_do_delconn+0x92>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8004d0a:	7813      	ldrb	r3, [r2, #0]
 8004d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d02b      	beq.n	8004d6c <lwip_netconn_do_delconn+0xd4>
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d105      	bne.n	8004d24 <lwip_netconn_do_delconn+0x8c>
        msg->conn->pcb.udp->recv_arg = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61cb      	str	r3, [r1, #28]
        udp_remove(msg->conn->pcb.udp);
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	6858      	ldr	r0, [r3, #4]
 8004d20:	f006 fcd6 	bl	800b6d0 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	2200      	movs	r2, #0
 8004d28:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8004d2a:	6820      	ldr	r0, [r4, #0]
 8004d2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d2e:	b113      	cbz	r3, 8004d36 <lwip_netconn_do_delconn+0x9e>
 8004d30:	2200      	movs	r2, #0
 8004d32:	4611      	mov	r1, r2
 8004d34:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8004d36:	6820      	ldr	r0, [r4, #0]
 8004d38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0c4      	beq.n	8004cc8 <lwip_netconn_do_delconn+0x30>
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2102      	movs	r1, #2
 8004d42:	4798      	blx	r3
 8004d44:	e7c0      	b.n	8004cc8 <lwip_netconn_do_delconn+0x30>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	7f1b      	ldrb	r3, [r3, #28]
 8004d4a:	f013 0f04 	tst.w	r3, #4
 8004d4e:	d1d2      	bne.n	8004cf6 <lwip_netconn_do_delconn+0x5e>
 8004d50:	e7b8      	b.n	8004cc4 <lwip_netconn_do_delconn+0x2c>
    LWIP_ASSERT("blocking connect in progress",
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	7f1b      	ldrb	r3, [r3, #28]
 8004d56:	f013 0f04 	tst.w	r3, #4
 8004d5a:	d1ce      	bne.n	8004cfa <lwip_netconn_do_delconn+0x62>
 8004d5c:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <lwip_netconn_do_delconn+0x150>)
 8004d5e:	f240 421f 	movw	r2, #1055	; 0x41f
 8004d62:	4924      	ldr	r1, [pc, #144]	; (8004df4 <lwip_netconn_do_delconn+0x15c>)
 8004d64:	4822      	ldr	r0, [pc, #136]	; (8004df0 <lwip_netconn_do_delconn+0x158>)
 8004d66:	f007 fc10 	bl	800c58a <iprintf>
 8004d6a:	e7c6      	b.n	8004cfa <lwip_netconn_do_delconn+0x62>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8004d6c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d036      	beq.n	8004de0 <lwip_netconn_do_delconn+0x148>
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <lwip_netconn_do_delconn+0x150>)
 8004d74:	f240 4235 	movw	r2, #1077	; 0x435
 8004d78:	491f      	ldr	r1, [pc, #124]	; (8004df8 <lwip_netconn_do_delconn+0x160>)
 8004d7a:	481d      	ldr	r0, [pc, #116]	; (8004df0 <lwip_netconn_do_delconn+0x158>)
 8004d7c:	f007 fc05 	bl	800c58a <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	2204      	movs	r2, #4
 8004d84:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8004d86:	2303      	movs	r3, #3
 8004d88:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	625c      	str	r4, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8004d8e:	2100      	movs	r1, #0
 8004d90:	6820      	ldr	r0, [r4, #0]
 8004d92:	f7ff fc05 	bl	80045a0 <lwip_netconn_do_close_internal>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d0aa      	beq.n	8004cf0 <lwip_netconn_do_delconn+0x58>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d006      	beq.n	8004db0 <lwip_netconn_do_delconn+0x118>
 8004da2:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <lwip_netconn_do_delconn+0x150>)
 8004da4:	f240 423b 	movw	r2, #1083	; 0x43b
 8004da8:	4914      	ldr	r1, [pc, #80]	; (8004dfc <lwip_netconn_do_delconn+0x164>)
 8004daa:	4811      	ldr	r0, [pc, #68]	; (8004df0 <lwip_netconn_do_delconn+0x158>)
 8004dac:	f007 fbed 	bl	800c58a <iprintf>
          UNLOCK_TCPIP_CORE();
 8004db0:	4d13      	ldr	r5, [pc, #76]	; (8004e00 <lwip_netconn_do_delconn+0x168>)
 8004db2:	4628      	mov	r0, r5
 8004db4:	f006 fe48 	bl	800ba48 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8004db8:	6820      	ldr	r0, [r4, #0]
 8004dba:	2100      	movs	r1, #0
 8004dbc:	300c      	adds	r0, #12
 8004dbe:	f006 fded 	bl	800b99c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f006 fe39 	bl	800ba3a <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d08f      	beq.n	8004cf0 <lwip_netconn_do_delconn+0x58>
 8004dd0:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <lwip_netconn_do_delconn+0x150>)
 8004dd2:	f240 423f 	movw	r2, #1087	; 0x43f
 8004dd6:	4909      	ldr	r1, [pc, #36]	; (8004dfc <lwip_netconn_do_delconn+0x164>)
 8004dd8:	4805      	ldr	r0, [pc, #20]	; (8004df0 <lwip_netconn_do_delconn+0x158>)
 8004dda:	f007 fbd6 	bl	800c58a <iprintf>
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8004de0:	6a13      	ldr	r3, [r2, #32]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0cc      	beq.n	8004d80 <lwip_netconn_do_delconn+0xe8>
 8004de6:	e7c4      	b.n	8004d72 <lwip_netconn_do_delconn+0xda>
 8004de8:	0800cd30 	.word	0x0800cd30
 8004dec:	0800caec 	.word	0x0800caec
 8004df0:	0800c8d0 	.word	0x0800c8d0
 8004df4:	0800cb00 	.word	0x0800cb00
 8004df8:	0800cb20 	.word	0x0800cb20
 8004dfc:	0800cb3c 	.word	0x0800cb3c
 8004e00:	20003f60 	.word	0x20003f60

08004e04 <lwip_netconn_do_bind>:
{
 8004e04:	b510      	push	{r4, lr}
 8004e06:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8004e08:	6803      	ldr	r3, [r0, #0]
 8004e0a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004e0e:	f112 0f0c 	cmn.w	r2, #12
 8004e12:	da10      	bge.n	8004e36 <lwip_netconn_do_bind+0x32>
    msg->err = msg->conn->last_err;
 8004e14:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	b163      	cbz	r3, 8004e34 <lwip_netconn_do_bind+0x30>
 8004e1a:	f006 fe2d 	bl	800ba78 <sys_arch_protect>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004e24:	f112 0f0c 	cmn.w	r2, #12
 8004e28:	db02      	blt.n	8004e30 <lwip_netconn_do_bind+0x2c>
 8004e2a:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004e2e:	721a      	strb	r2, [r3, #8]
 8004e30:	f006 fe2e 	bl	800ba90 <sys_arch_unprotect>
 8004e34:	bd10      	pop	{r4, pc}
    msg->err = ERR_VAL;
 8004e36:	22fa      	movs	r2, #250	; 0xfa
 8004e38:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8004e3a:	6858      	ldr	r0, [r3, #4]
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d0ea      	beq.n	8004e16 <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d007      	beq.n	8004e5a <lwip_netconn_do_bind+0x56>
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d1e3      	bne.n	8004e16 <lwip_netconn_do_bind+0x12>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8004e4e:	89a2      	ldrh	r2, [r4, #12]
 8004e50:	68a1      	ldr	r1, [r4, #8]
 8004e52:	f006 fbf7 	bl	800b644 <udp_bind>
 8004e56:	7120      	strb	r0, [r4, #4]
        break;
 8004e58:	e7dd      	b.n	8004e16 <lwip_netconn_do_bind+0x12>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8004e5a:	89a2      	ldrh	r2, [r4, #12]
 8004e5c:	68a1      	ldr	r1, [r4, #8]
 8004e5e:	f002 fe59 	bl	8007b14 <tcp_bind>
 8004e62:	7120      	strb	r0, [r4, #4]
        break;
 8004e64:	e7d7      	b.n	8004e16 <lwip_netconn_do_bind+0x12>
	...

08004e68 <lwip_netconn_do_listen>:
{
 8004e68:	b530      	push	{r4, r5, lr}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8004e6e:	6803      	ldr	r3, [r0, #0]
 8004e70:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004e74:	f112 0f0c 	cmn.w	r2, #12
 8004e78:	da11      	bge.n	8004e9e <lwip_netconn_do_listen+0x36>
    msg->err = msg->conn->last_err;
 8004e7a:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	b163      	cbz	r3, 8004e9a <lwip_netconn_do_listen+0x32>
 8004e80:	f006 fdfa 	bl	800ba78 <sys_arch_protect>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004e8a:	f112 0f0c 	cmn.w	r2, #12
 8004e8e:	db02      	blt.n	8004e96 <lwip_netconn_do_listen+0x2e>
 8004e90:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004e94:	721a      	strb	r2, [r3, #8]
 8004e96:	f006 fdfb 	bl	800ba90 <sys_arch_unprotect>
}
 8004e9a:	b003      	add	sp, #12
 8004e9c:	bd30      	pop	{r4, r5, pc}
    msg->err = ERR_CONN;
 8004e9e:	22f5      	movs	r2, #245	; 0xf5
 8004ea0:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8004ea2:	6858      	ldr	r0, [r3, #4]
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d0e9      	beq.n	8004e7c <lwip_netconn_do_listen+0x14>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8004ea8:	781a      	ldrb	r2, [r3, #0]
 8004eaa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004eae:	2a10      	cmp	r2, #16
 8004eb0:	d002      	beq.n	8004eb8 <lwip_netconn_do_listen+0x50>
        msg->err = ERR_ARG;
 8004eb2:	23f0      	movs	r3, #240	; 0xf0
 8004eb4:	7123      	strb	r3, [r4, #4]
 8004eb6:	e7e1      	b.n	8004e7c <lwip_netconn_do_listen+0x14>
        if (msg->conn->state == NETCONN_NONE) {
 8004eb8:	785b      	ldrb	r3, [r3, #1]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d145      	bne.n	8004f4a <lwip_netconn_do_listen+0xe2>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8004ebe:	7d03      	ldrb	r3, [r0, #20]
 8004ec0:	b113      	cbz	r3, 8004ec8 <lwip_netconn_do_listen+0x60>
            msg->err = ERR_VAL;
 8004ec2:	23fa      	movs	r3, #250	; 0xfa
 8004ec4:	7123      	strb	r3, [r4, #4]
 8004ec6:	e7d9      	b.n	8004e7c <lwip_netconn_do_listen+0x14>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8004ec8:	f10d 0207 	add.w	r2, sp, #7
 8004ecc:	21ff      	movs	r1, #255	; 0xff
 8004ece:	f002 fe7f 	bl	8007bd0 <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	b1f0      	cbz	r0, 8004f14 <lwip_netconn_do_listen+0xac>
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8004ed6:	6820      	ldr	r0, [r4, #0]
 8004ed8:	3010      	adds	r0, #16
 8004eda:	f006 fd3d 	bl	800b958 <sys_mbox_valid>
 8004ede:	b9e8      	cbnz	r0, 8004f1c <lwip_netconn_do_listen+0xb4>
              msg->err = ERR_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	3014      	adds	r0, #20
 8004ee8:	f006 fd36 	bl	800b958 <sys_mbox_valid>
 8004eec:	b1f8      	cbz	r0, 8004f2e <lwip_netconn_do_listen+0xc6>
              if (msg->err == ERR_OK) {
 8004eee:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8004ef2:	bb1b      	cbnz	r3, 8004f3c <lwip_netconn_do_listen+0xd4>
                msg->conn->state = NETCONN_LISTEN;
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	605d      	str	r5, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	4619      	mov	r1, r3
 8004f02:	6858      	ldr	r0, [r3, #4]
 8004f04:	f002 ff61 	bl	8007dca <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	4912      	ldr	r1, [pc, #72]	; (8004f54 <lwip_netconn_do_listen+0xec>)
 8004f0c:	6858      	ldr	r0, [r3, #4]
 8004f0e:	f002 ffab 	bl	8007e68 <tcp_accept>
 8004f12:	e7b3      	b.n	8004e7c <lwip_netconn_do_listen+0x14>
              msg->err = err;
 8004f14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f18:	7123      	strb	r3, [r4, #4]
 8004f1a:	e7af      	b.n	8004e7c <lwip_netconn_do_listen+0x14>
                sys_mbox_free(&msg->conn->recvmbox);
 8004f1c:	6820      	ldr	r0, [r4, #0]
 8004f1e:	3010      	adds	r0, #16
 8004f20:	f006 fcbc 	bl	800b89c <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8004f24:	6820      	ldr	r0, [r4, #0]
 8004f26:	3010      	adds	r0, #16
 8004f28:	f006 fd1c 	bl	800b964 <sys_mbox_set_invalid>
 8004f2c:	e7d8      	b.n	8004ee0 <lwip_netconn_do_listen+0x78>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8004f2e:	6820      	ldr	r0, [r4, #0]
 8004f30:	2106      	movs	r1, #6
 8004f32:	3014      	adds	r0, #20
 8004f34:	f006 fca0 	bl	800b878 <sys_mbox_new>
 8004f38:	7120      	strb	r0, [r4, #4]
 8004f3a:	e7d8      	b.n	8004eee <lwip_netconn_do_listen+0x86>
                tcp_close(lpcb);
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f003 fad5 	bl	80084ec <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	2200      	movs	r2, #0
 8004f46:	605a      	str	r2, [r3, #4]
 8004f48:	e798      	b.n	8004e7c <lwip_netconn_do_listen+0x14>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d196      	bne.n	8004e7c <lwip_netconn_do_listen+0x14>
          msg->err = ERR_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	7123      	strb	r3, [r4, #4]
 8004f52:	e793      	b.n	8004e7c <lwip_netconn_do_listen+0x14>
 8004f54:	08004b99 	.word	0x08004b99

08004f58 <lwip_netconn_do_recv>:
{
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8004f60:	6803      	ldr	r3, [r0, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	b122      	cbz	r2, 8004f70 <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d00f      	beq.n	8004f90 <lwip_netconn_do_recv+0x38>
  TCPIP_APIMSG_ACK(msg);
 8004f70:	6833      	ldr	r3, [r6, #0]
 8004f72:	b163      	cbz	r3, 8004f8e <lwip_netconn_do_recv+0x36>
 8004f74:	f006 fd80 	bl	800ba78 <sys_arch_protect>
 8004f78:	6833      	ldr	r3, [r6, #0]
 8004f7a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004f7e:	f112 0f0c 	cmn.w	r2, #12
 8004f82:	db02      	blt.n	8004f8a <lwip_netconn_do_recv+0x32>
 8004f84:	f996 2004 	ldrsb.w	r2, [r6, #4]
 8004f88:	721a      	strb	r2, [r3, #8]
 8004f8a:	f006 fd81 	bl	800ba90 <sys_arch_unprotect>
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}
      u32_t remaining = msg->msg.r.len;
 8004f90:	6884      	ldr	r4, [r0, #8]
 8004f92:	e008      	b.n	8004fa6 <lwip_netconn_do_recv+0x4e>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8004f94:	f64f 75ff 	movw	r5, #65535	; 0xffff
        tcp_recved(msg->conn->pcb.tcp, recved);
 8004f98:	6833      	ldr	r3, [r6, #0]
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	6858      	ldr	r0, [r3, #4]
 8004f9e:	f002 fea7 	bl	8007cf0 <tcp_recved>
      } while (remaining != 0);
 8004fa2:	1b64      	subs	r4, r4, r5
 8004fa4:	d0e4      	beq.n	8004f70 <lwip_netconn_do_recv+0x18>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8004fa6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8004faa:	d2f3      	bcs.n	8004f94 <lwip_netconn_do_recv+0x3c>
 8004fac:	b2a5      	uxth	r5, r4
 8004fae:	e7f3      	b.n	8004f98 <lwip_netconn_do_recv+0x40>

08004fb0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8004fb4:	6800      	ldr	r0, [r0, #0]
 8004fb6:	7842      	ldrb	r2, [r0, #1]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8004fb8:	6843      	ldr	r3, [r0, #4]
 8004fba:	b123      	cbz	r3, 8004fc6 <lwip_netconn_do_close+0x16>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8004fbc:	7803      	ldrb	r3, [r0, #0]
  if ((msg->conn->pcb.tcp != NULL) &&
 8004fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d010      	beq.n	8004fe8 <lwip_netconn_do_close+0x38>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8004fc6:	23f5      	movs	r3, #245	; 0xf5
 8004fc8:	7123      	strb	r3, [r4, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8004fca:	b160      	cbz	r0, 8004fe6 <lwip_netconn_do_close+0x36>
 8004fcc:	f006 fd54 	bl	800ba78 <sys_arch_protect>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004fd6:	f112 0f0c 	cmn.w	r2, #12
 8004fda:	db02      	blt.n	8004fe2 <lwip_netconn_do_close+0x32>
 8004fdc:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004fe0:	721a      	strb	r2, [r3, #8]
 8004fe2:	f006 fd55 	bl	800ba90 <sys_arch_unprotect>
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8004fe8:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d001      	beq.n	8004ff2 <lwip_netconn_do_close+0x42>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8004fee:	2a02      	cmp	r2, #2
 8004ff0:	d0e9      	beq.n	8004fc6 <lwip_netconn_do_close+0x16>
    if (state == NETCONN_CONNECT) {
 8004ff2:	2a03      	cmp	r2, #3
 8004ff4:	d03d      	beq.n	8005072 <lwip_netconn_do_close+0xc2>
    } else if (state == NETCONN_WRITE) {
 8004ff6:	2a01      	cmp	r2, #1
 8004ff8:	d03e      	beq.n	8005078 <lwip_netconn_do_close+0xc8>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8004ffa:	f013 0f01 	tst.w	r3, #1
 8004ffe:	d13e      	bne.n	800507e <lwip_netconn_do_close+0xce>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005004:	2a00      	cmp	r2, #0
 8005006:	d03d      	beq.n	8005084 <lwip_netconn_do_close+0xd4>
 8005008:	4b20      	ldr	r3, [pc, #128]	; (800508c <lwip_netconn_do_close+0xdc>)
 800500a:	f240 721c 	movw	r2, #1820	; 0x71c
 800500e:	4920      	ldr	r1, [pc, #128]	; (8005090 <lwip_netconn_do_close+0xe0>)
 8005010:	4820      	ldr	r0, [pc, #128]	; (8005094 <lwip_netconn_do_close+0xe4>)
 8005012:	f007 faba 	bl	800c58a <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	2204      	movs	r2, #4
 800501a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	625c      	str	r4, [r3, #36]	; 0x24
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005020:	2100      	movs	r1, #0
 8005022:	6820      	ldr	r0, [r4, #0]
 8005024:	f7ff fabc 	bl	80045a0 <lwip_netconn_do_close_internal>
 8005028:	2800      	cmp	r0, #0
 800502a:	d0dc      	beq.n	8004fe6 <lwip_netconn_do_close+0x36>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	2b04      	cmp	r3, #4
 8005032:	d006      	beq.n	8005042 <lwip_netconn_do_close+0x92>
 8005034:	4b15      	ldr	r3, [pc, #84]	; (800508c <lwip_netconn_do_close+0xdc>)
 8005036:	f240 7221 	movw	r2, #1825	; 0x721
 800503a:	4917      	ldr	r1, [pc, #92]	; (8005098 <lwip_netconn_do_close+0xe8>)
 800503c:	4815      	ldr	r0, [pc, #84]	; (8005094 <lwip_netconn_do_close+0xe4>)
 800503e:	f007 faa4 	bl	800c58a <iprintf>
        UNLOCK_TCPIP_CORE();
 8005042:	4d16      	ldr	r5, [pc, #88]	; (800509c <lwip_netconn_do_close+0xec>)
 8005044:	4628      	mov	r0, r5
 8005046:	f006 fcff 	bl	800ba48 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800504a:	6820      	ldr	r0, [r4, #0]
 800504c:	2100      	movs	r1, #0
 800504e:	300c      	adds	r0, #12
 8005050:	f006 fca4 	bl	800b99c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8005054:	4628      	mov	r0, r5
 8005056:	f006 fcf0 	bl	800ba3a <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	785b      	ldrb	r3, [r3, #1]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0c1      	beq.n	8004fe6 <lwip_netconn_do_close+0x36>
 8005062:	4b0a      	ldr	r3, [pc, #40]	; (800508c <lwip_netconn_do_close+0xdc>)
 8005064:	f240 7225 	movw	r2, #1829	; 0x725
 8005068:	490b      	ldr	r1, [pc, #44]	; (8005098 <lwip_netconn_do_close+0xe8>)
 800506a:	480a      	ldr	r0, [pc, #40]	; (8005094 <lwip_netconn_do_close+0xe4>)
 800506c:	f007 fa8d 	bl	800c58a <iprintf>
 8005070:	bd38      	pop	{r3, r4, r5, pc}
      msg->err = ERR_CONN;
 8005072:	23f5      	movs	r3, #245	; 0xf5
 8005074:	7123      	strb	r3, [r4, #4]
 8005076:	e7a8      	b.n	8004fca <lwip_netconn_do_close+0x1a>
      msg->err = ERR_INPROGRESS;
 8005078:	23fb      	movs	r3, #251	; 0xfb
 800507a:	7123      	strb	r3, [r4, #4]
 800507c:	e7a5      	b.n	8004fca <lwip_netconn_do_close+0x1a>
        netconn_drain(msg->conn);
 800507e:	f7ff fd39 	bl	8004af4 <netconn_drain>
 8005082:	e7bd      	b.n	8005000 <lwip_netconn_do_close+0x50>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0c5      	beq.n	8005016 <lwip_netconn_do_close+0x66>
 800508a:	e7bd      	b.n	8005008 <lwip_netconn_do_close+0x58>
 800508c:	0800cd30 	.word	0x0800cd30
 8005090:	0800cb20 	.word	0x0800cb20
 8005094:	0800c8d0 	.word	0x0800c8d0
 8005098:	0800cb3c 	.word	0x0800cb3c
 800509c:	20003f60 	.word	0x20003f60

080050a0 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 80050a0:	b168      	cbz	r0, 80050be <netbuf_delete+0x1e>
{
 80050a2:	b510      	push	{r4, lr}
 80050a4:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 80050a6:	6800      	ldr	r0, [r0, #0]
 80050a8:	b120      	cbz	r0, 80050b4 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 80050aa:	f002 f97f 	bl	80073ac <pbuf_free>
      buf->p = buf->ptr = NULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	6063      	str	r3, [r4, #4]
 80050b2:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80050b4:	4621      	mov	r1, r4
 80050b6:	2006      	movs	r0, #6
 80050b8:	f001 ffa2 	bl	8007000 <memp_free>
 80050bc:	bd10      	pop	{r4, pc}
 80050be:	4770      	bx	lr

080050c0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80050c0:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80050c2:	b158      	cbz	r0, 80050dc <netbuf_data+0x1c>
 80050c4:	4603      	mov	r3, r0
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80050c6:	b191      	cbz	r1, 80050ee <netbuf_data+0x2e>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80050c8:	b1d2      	cbz	r2, 8005100 <netbuf_data+0x40>

  if (buf->ptr == NULL) {
 80050ca:	6840      	ldr	r0, [r0, #4]
 80050cc:	b308      	cbz	r0, 8005112 <netbuf_data+0x52>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 80050ce:	6840      	ldr	r0, [r0, #4]
 80050d0:	6008      	str	r0, [r1, #0]
  *len = buf->ptr->len;
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	895b      	ldrh	r3, [r3, #10]
 80050d6:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 80050d8:	2000      	movs	r0, #0
 80050da:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80050dc:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <netbuf_data+0x58>)
 80050de:	22c2      	movs	r2, #194	; 0xc2
 80050e0:	490e      	ldr	r1, [pc, #56]	; (800511c <netbuf_data+0x5c>)
 80050e2:	480f      	ldr	r0, [pc, #60]	; (8005120 <netbuf_data+0x60>)
 80050e4:	f007 fa51 	bl	800c58a <iprintf>
 80050e8:	f06f 000f 	mvn.w	r0, #15
 80050ec:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80050ee:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <netbuf_data+0x58>)
 80050f0:	22c3      	movs	r2, #195	; 0xc3
 80050f2:	490c      	ldr	r1, [pc, #48]	; (8005124 <netbuf_data+0x64>)
 80050f4:	480a      	ldr	r0, [pc, #40]	; (8005120 <netbuf_data+0x60>)
 80050f6:	f007 fa48 	bl	800c58a <iprintf>
 80050fa:	f06f 000f 	mvn.w	r0, #15
 80050fe:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <netbuf_data+0x58>)
 8005102:	22c4      	movs	r2, #196	; 0xc4
 8005104:	4908      	ldr	r1, [pc, #32]	; (8005128 <netbuf_data+0x68>)
 8005106:	4806      	ldr	r0, [pc, #24]	; (8005120 <netbuf_data+0x60>)
 8005108:	f007 fa3f 	bl	800c58a <iprintf>
 800510c:	f06f 000f 	mvn.w	r0, #15
 8005110:	bd08      	pop	{r3, pc}
    return ERR_BUF;
 8005112:	f06f 0001 	mvn.w	r0, #1
}
 8005116:	bd08      	pop	{r3, pc}
 8005118:	0800cdc8 	.word	0x0800cdc8
 800511c:	0800ce3c 	.word	0x0800ce3c
 8005120:	0800c8d0 	.word	0x0800c8d0
 8005124:	0800ce58 	.word	0x0800ce58
 8005128:	0800ce78 	.word	0x0800ce78

0800512c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800512c:	b500      	push	{lr}
 800512e:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8005130:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <tcpip_thread+0x88>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	b113      	cbz	r3, 800513c <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
 8005136:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <tcpip_thread+0x8c>)
 8005138:	6810      	ldr	r0, [r2, #0]
 800513a:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800513c:	481f      	ldr	r0, [pc, #124]	; (80051bc <tcpip_thread+0x90>)
 800513e:	f006 fc7c 	bl	800ba3a <sys_mutex_lock>
 8005142:	e00e      	b.n	8005162 <tcpip_thread+0x36>
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005144:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <tcpip_thread+0x94>)
 8005146:	2269      	movs	r2, #105	; 0x69
 8005148:	491e      	ldr	r1, [pc, #120]	; (80051c4 <tcpip_thread+0x98>)
 800514a:	481f      	ldr	r0, [pc, #124]	; (80051c8 <tcpip_thread+0x9c>)
 800514c:	f007 fa1d 	bl	800c58a <iprintf>
      continue;
 8005150:	e007      	b.n	8005162 <tcpip_thread+0x36>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	6899      	ldr	r1, [r3, #8]
 8005156:	6858      	ldr	r0, [r3, #4]
 8005158:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800515a:	9901      	ldr	r1, [sp, #4]
 800515c:	2009      	movs	r0, #9
 800515e:	f001 ff4f 	bl	8007000 <memp_free>
    UNLOCK_TCPIP_CORE();
 8005162:	4c16      	ldr	r4, [pc, #88]	; (80051bc <tcpip_thread+0x90>)
 8005164:	4620      	mov	r0, r4
 8005166:	f006 fc6f 	bl	800ba48 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800516a:	a901      	add	r1, sp, #4
 800516c:	4817      	ldr	r0, [pc, #92]	; (80051cc <tcpip_thread+0xa0>)
 800516e:	f006 f957 	bl	800b420 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8005172:	4620      	mov	r0, r4
 8005174:	f006 fc61 	bl	800ba3a <sys_mutex_lock>
    if (msg == NULL) {
 8005178:	9b01      	ldr	r3, [sp, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0e2      	beq.n	8005144 <tcpip_thread+0x18>
    switch (msg->type) {
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	2a03      	cmp	r2, #3
 8005182:	d00a      	beq.n	800519a <tcpip_thread+0x6e>
 8005184:	2a04      	cmp	r2, #4
 8005186:	d010      	beq.n	80051aa <tcpip_thread+0x7e>
 8005188:	2a02      	cmp	r2, #2
 800518a:	d0e2      	beq.n	8005152 <tcpip_thread+0x26>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <tcpip_thread+0x94>)
 800518e:	229b      	movs	r2, #155	; 0x9b
 8005190:	490c      	ldr	r1, [pc, #48]	; (80051c4 <tcpip_thread+0x98>)
 8005192:	480d      	ldr	r0, [pc, #52]	; (80051c8 <tcpip_thread+0x9c>)
 8005194:	f007 f9f9 	bl	800c58a <iprintf>
      break;
 8005198:	e7e3      	b.n	8005162 <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	6898      	ldr	r0, [r3, #8]
 800519e:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80051a0:	9901      	ldr	r1, [sp, #4]
 80051a2:	2008      	movs	r0, #8
 80051a4:	f001 ff2c 	bl	8007000 <memp_free>
      break;
 80051a8:	e7db      	b.n	8005162 <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	6898      	ldr	r0, [r3, #8]
 80051ae:	4790      	blx	r2
      break;
 80051b0:	e7d7      	b.n	8005162 <tcpip_thread+0x36>
 80051b2:	bf00      	nop
 80051b4:	20003d80 	.word	0x20003d80
 80051b8:	20003d84 	.word	0x20003d84
 80051bc:	20003f60 	.word	0x20003f60
 80051c0:	0800cefc 	.word	0x0800cefc
 80051c4:	0800cf2c 	.word	0x0800cf2c
 80051c8:	0800c8d0 	.word	0x0800c8d0
 80051cc:	20003d7c 	.word	0x20003d7c

080051d0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	4607      	mov	r7, r0
 80051d4:	460e      	mov	r6, r1
 80051d6:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80051d8:	4813      	ldr	r0, [pc, #76]	; (8005228 <tcpip_inpkt+0x58>)
 80051da:	f006 fbbd 	bl	800b958 <sys_mbox_valid>
 80051de:	b188      	cbz	r0, 8005204 <tcpip_inpkt+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80051e0:	2009      	movs	r0, #9
 80051e2:	f001 fef3 	bl	8006fcc <memp_malloc>
  if (msg == NULL) {
 80051e6:	4604      	mov	r4, r0
 80051e8:	b1d0      	cbz	r0, 8005220 <tcpip_inpkt+0x50>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80051ea:	2302      	movs	r3, #2
 80051ec:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 80051ee:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80051f0:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 80051f2:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80051f4:	4601      	mov	r1, r0
 80051f6:	480c      	ldr	r0, [pc, #48]	; (8005228 <tcpip_inpkt+0x58>)
 80051f8:	f006 fb65 	bl	800b8c6 <sys_mbox_trypost>
 80051fc:	4603      	mov	r3, r0
 80051fe:	b940      	cbnz	r0, 8005212 <tcpip_inpkt+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8005200:	4618      	mov	r0, r3
 8005202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005204:	4b09      	ldr	r3, [pc, #36]	; (800522c <tcpip_inpkt+0x5c>)
 8005206:	22b5      	movs	r2, #181	; 0xb5
 8005208:	4909      	ldr	r1, [pc, #36]	; (8005230 <tcpip_inpkt+0x60>)
 800520a:	480a      	ldr	r0, [pc, #40]	; (8005234 <tcpip_inpkt+0x64>)
 800520c:	f007 f9bd 	bl	800c58a <iprintf>
 8005210:	e7e6      	b.n	80051e0 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005212:	4621      	mov	r1, r4
 8005214:	2009      	movs	r0, #9
 8005216:	f001 fef3 	bl	8007000 <memp_free>
    return ERR_MEM;
 800521a:	f04f 33ff 	mov.w	r3, #4294967295
 800521e:	e7ef      	b.n	8005200 <tcpip_inpkt+0x30>
    return ERR_MEM;
 8005220:	f04f 33ff 	mov.w	r3, #4294967295
 8005224:	e7ec      	b.n	8005200 <tcpip_inpkt+0x30>
 8005226:	bf00      	nop
 8005228:	20003d7c 	.word	0x20003d7c
 800522c:	0800cefc 	.word	0x0800cefc
 8005230:	0800ceec 	.word	0x0800ceec
 8005234:	0800c8d0 	.word	0x0800c8d0

08005238 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8005238:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800523a:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 800523e:	f013 0f18 	tst.w	r3, #24
 8005242:	d103      	bne.n	800524c <tcpip_input+0x14>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8005244:	4a03      	ldr	r2, [pc, #12]	; (8005254 <tcpip_input+0x1c>)
 8005246:	f7ff ffc3 	bl	80051d0 <tcpip_inpkt>
}
 800524a:	bd08      	pop	{r3, pc}
    return tcpip_inpkt(p, inp, ethernet_input);
 800524c:	4a02      	ldr	r2, [pc, #8]	; (8005258 <tcpip_input+0x20>)
 800524e:	f7ff ffbf 	bl	80051d0 <tcpip_inpkt>
 8005252:	bd08      	pop	{r3, pc}
 8005254:	08005f69 	.word	0x08005f69
 8005258:	0800b761 	.word	0x0800b761

0800525c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	4607      	mov	r7, r0
 8005260:	460e      	mov	r6, r1
 8005262:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005264:	4816      	ldr	r0, [pc, #88]	; (80052c0 <tcpip_callback_with_block+0x64>)
 8005266:	f006 fb77 	bl	800b958 <sys_mbox_valid>
 800526a:	b188      	cbz	r0, 8005290 <tcpip_callback_with_block+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800526c:	2008      	movs	r0, #8
 800526e:	f001 fead 	bl	8006fcc <memp_malloc>
  if (msg == NULL) {
 8005272:	4604      	mov	r4, r0
 8005274:	b300      	cbz	r0, 80052b8 <tcpip_callback_with_block+0x5c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8005276:	2303      	movs	r3, #3
 8005278:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 800527a:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 800527c:	6086      	str	r6, [r0, #8]
  if (block) {
 800527e:	b975      	cbnz	r5, 800529e <tcpip_callback_with_block+0x42>
    sys_mbox_post(&mbox, msg);
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8005280:	4601      	mov	r1, r0
 8005282:	480f      	ldr	r0, [pc, #60]	; (80052c0 <tcpip_callback_with_block+0x64>)
 8005284:	f006 fb1f 	bl	800b8c6 <sys_mbox_trypost>
 8005288:	4603      	mov	r3, r0
 800528a:	b970      	cbnz	r0, 80052aa <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
}
 800528c:	4618      	mov	r0, r3
 800528e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005290:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <tcpip_callback_with_block+0x68>)
 8005292:	22ee      	movs	r2, #238	; 0xee
 8005294:	490c      	ldr	r1, [pc, #48]	; (80052c8 <tcpip_callback_with_block+0x6c>)
 8005296:	480d      	ldr	r0, [pc, #52]	; (80052cc <tcpip_callback_with_block+0x70>)
 8005298:	f007 f977 	bl	800c58a <iprintf>
 800529c:	e7e6      	b.n	800526c <tcpip_callback_with_block+0x10>
    sys_mbox_post(&mbox, msg);
 800529e:	4601      	mov	r1, r0
 80052a0:	4807      	ldr	r0, [pc, #28]	; (80052c0 <tcpip_callback_with_block+0x64>)
 80052a2:	f006 fb04 	bl	800b8ae <sys_mbox_post>
  return ERR_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e7f0      	b.n	800528c <tcpip_callback_with_block+0x30>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80052aa:	4621      	mov	r1, r4
 80052ac:	2008      	movs	r0, #8
 80052ae:	f001 fea7 	bl	8007000 <memp_free>
      return ERR_MEM;
 80052b2:	f04f 33ff 	mov.w	r3, #4294967295
 80052b6:	e7e9      	b.n	800528c <tcpip_callback_with_block+0x30>
    return ERR_MEM;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295
 80052bc:	e7e6      	b.n	800528c <tcpip_callback_with_block+0x30>
 80052be:	bf00      	nop
 80052c0:	20003d7c 	.word	0x20003d7c
 80052c4:	0800cefc 	.word	0x0800cefc
 80052c8:	0800ceec 	.word	0x0800ceec
 80052cc:	0800c8d0 	.word	0x0800c8d0

080052d0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	4605      	mov	r5, r0
 80052d4:	460e      	mov	r6, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80052d6:	4c05      	ldr	r4, [pc, #20]	; (80052ec <tcpip_send_msg_wait_sem+0x1c>)
 80052d8:	4620      	mov	r0, r4
 80052da:	f006 fbae 	bl	800ba3a <sys_mutex_lock>
  fn(apimsg);
 80052de:	4630      	mov	r0, r6
 80052e0:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 80052e2:	4620      	mov	r0, r4
 80052e4:	f006 fbb0 	bl	800ba48 <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80052e8:	2000      	movs	r0, #0
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	20003f60 	.word	0x20003f60

080052f0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80052f0:	b530      	push	{r4, r5, lr}
 80052f2:	b083      	sub	sp, #12
 80052f4:	4605      	mov	r5, r0
 80052f6:	460c      	mov	r4, r1
  lwip_init();
 80052f8:	f000 f84b 	bl	8005392 <lwip_init>

  tcpip_init_done = initfunc;
 80052fc:	4b13      	ldr	r3, [pc, #76]	; (800534c <tcpip_init+0x5c>)
 80052fe:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8005300:	4b13      	ldr	r3, [pc, #76]	; (8005350 <tcpip_init+0x60>)
 8005302:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005304:	2106      	movs	r1, #6
 8005306:	4813      	ldr	r0, [pc, #76]	; (8005354 <tcpip_init+0x64>)
 8005308:	f006 fab6 	bl	800b878 <sys_mbox_new>
 800530c:	b970      	cbnz	r0, 800532c <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800530e:	4812      	ldr	r0, [pc, #72]	; (8005358 <tcpip_init+0x68>)
 8005310:	f006 fb82 	bl	800ba18 <sys_mutex_new>
 8005314:	b990      	cbnz	r0, 800533c <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8005316:	2303      	movs	r3, #3
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800531e:	2200      	movs	r2, #0
 8005320:	490e      	ldr	r1, [pc, #56]	; (800535c <tcpip_init+0x6c>)
 8005322:	480f      	ldr	r0, [pc, #60]	; (8005360 <tcpip_init+0x70>)
 8005324:	f006 fb95 	bl	800ba52 <sys_thread_new>
}
 8005328:	b003      	add	sp, #12
 800532a:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800532c:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <tcpip_init+0x74>)
 800532e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8005332:	490d      	ldr	r1, [pc, #52]	; (8005368 <tcpip_init+0x78>)
 8005334:	480d      	ldr	r0, [pc, #52]	; (800536c <tcpip_init+0x7c>)
 8005336:	f007 f928 	bl	800c58a <iprintf>
 800533a:	e7e8      	b.n	800530e <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <tcpip_init+0x74>)
 800533e:	f240 12d9 	movw	r2, #473	; 0x1d9
 8005342:	490b      	ldr	r1, [pc, #44]	; (8005370 <tcpip_init+0x80>)
 8005344:	4809      	ldr	r0, [pc, #36]	; (800536c <tcpip_init+0x7c>)
 8005346:	f007 f920 	bl	800c58a <iprintf>
 800534a:	e7e4      	b.n	8005316 <tcpip_init+0x26>
 800534c:	20003d80 	.word	0x20003d80
 8005350:	20003d84 	.word	0x20003d84
 8005354:	20003d7c 	.word	0x20003d7c
 8005358:	20003f60 	.word	0x20003f60
 800535c:	0800512d 	.word	0x0800512d
 8005360:	0800cedc 	.word	0x0800cedc
 8005364:	0800cefc 	.word	0x0800cefc
 8005368:	0800ce94 	.word	0x0800ce94
 800536c:	0800c8d0 	.word	0x0800c8d0
 8005370:	0800ceb8 	.word	0x0800ceb8

08005374 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8005374:	ba40      	rev16	r0, r0
}
 8005376:	b280      	uxth	r0, r0
 8005378:	4770      	bx	lr

0800537a <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 800537a:	0203      	lsls	r3, r0, #8
 800537c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005380:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005384:	0a02      	lsrs	r2, r0, #8
 8005386:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800538a:	4313      	orrs	r3, r2
}
 800538c:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8005390:	4770      	bx	lr

08005392 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005392:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8005394:	f006 fb34 	bl	800ba00 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8005398:	f001 fbda 	bl	8006b50 <mem_init>
  memp_init();
 800539c:	f001 fe06 	bl	8006fac <memp_init>
  pbuf_init();
  netif_init();
 80053a0:	f001 fe59 	bl	8007056 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80053a4:	f006 f8aa 	bl	800b4fc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80053a8:	f002 fbb2 	bl	8007b10 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80053ac:	f006 f812 	bl	800b3d4 <sys_timeouts_init>
 80053b0:	bd08      	pop	{r3, pc}
	...

080053b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80053b4:	b510      	push	{r4, lr}
 80053b6:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80053b8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80053bc:	00d3      	lsls	r3, r2, #3
 80053be:	4a09      	ldr	r2, [pc, #36]	; (80053e4 <etharp_free_entry+0x30>)
 80053c0:	58d0      	ldr	r0, [r2, r3]
 80053c2:	b138      	cbz	r0, 80053d4 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80053c4:	f001 fff2 	bl	80073ac <pbuf_free>
    arp_table[i].q = NULL;
 80053c8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80053cc:	00d3      	lsls	r3, r2, #3
 80053ce:	2100      	movs	r1, #0
 80053d0:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <etharp_free_entry+0x30>)
 80053d2:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80053d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80053d8:	00e2      	lsls	r2, r4, #3
 80053da:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <etharp_free_entry+0x30>)
 80053dc:	4413      	add	r3, r2
 80053de:	2200      	movs	r2, #0
 80053e0:	751a      	strb	r2, [r3, #20]
 80053e2:	bd10      	pop	{r4, pc}
 80053e4:	20003d88 	.word	0x20003d88

080053e8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80053e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80053ec:	f04f 0e00 	mov.w	lr, #0
 80053f0:	46f3      	mov	fp, lr
 80053f2:	46f1      	mov	r9, lr
  s8_t old_queue = ARP_TABLE_SIZE;
 80053f4:	f04f 0c0a 	mov.w	ip, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80053f8:	4673      	mov	r3, lr
  s8_t empty = ARP_TABLE_SIZE;
 80053fa:	4667      	mov	r7, ip
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80053fc:	46e0      	mov	r8, ip
 80053fe:	46e2      	mov	sl, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005400:	e003      	b.n	800540a <etharp_find_entry+0x22>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005402:	b96c      	cbnz	r4, 8005420 <etharp_find_entry+0x38>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8005404:	b25f      	sxtb	r7, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005406:	3301      	adds	r3, #1
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b09      	cmp	r3, #9
 800540c:	d845      	bhi.n	800549a <etharp_find_entry+0xb2>
    u8_t state = arp_table[i].state;
 800540e:	461a      	mov	r2, r3
 8005410:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8005414:	00e5      	lsls	r5, r4, #3
 8005416:	4c59      	ldr	r4, [pc, #356]	; (800557c <etharp_find_entry+0x194>)
 8005418:	442c      	add	r4, r5
 800541a:	7d24      	ldrb	r4, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800541c:	2f0a      	cmp	r7, #10
 800541e:	d0f0      	beq.n	8005402 <etharp_find_entry+0x1a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8005420:	2c00      	cmp	r4, #0
 8005422:	d0f0      	beq.n	8005406 <etharp_find_entry+0x1e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005424:	b140      	cbz	r0, 8005438 <etharp_find_entry+0x50>
 8005426:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800542a:	00ee      	lsls	r6, r5, #3
 800542c:	4d53      	ldr	r5, [pc, #332]	; (800557c <etharp_find_entry+0x194>)
 800542e:	4435      	add	r5, r6
 8005430:	686d      	ldr	r5, [r5, #4]
 8005432:	6806      	ldr	r6, [r0, #0]
 8005434:	42ae      	cmp	r6, r5
 8005436:	d00f      	beq.n	8005458 <etharp_find_entry+0x70>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8005438:	2c01      	cmp	r4, #1
 800543a:	d010      	beq.n	800545e <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800543c:	2c01      	cmp	r4, #1
 800543e:	d9e2      	bls.n	8005406 <etharp_find_entry+0x1e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8005440:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005444:	00d4      	lsls	r4, r2, #3
 8005446:	4a4d      	ldr	r2, [pc, #308]	; (800557c <etharp_find_entry+0x194>)
 8005448:	4422      	add	r2, r4
 800544a:	8a52      	ldrh	r2, [r2, #18]
 800544c:	4596      	cmp	lr, r2
 800544e:	d8da      	bhi.n	8005406 <etharp_find_entry+0x1e>
            old_stable = i;
 8005450:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 8005454:	4696      	mov	lr, r2
 8005456:	e7d6      	b.n	8005406 <etharp_find_entry+0x1e>
        return i;
 8005458:	b258      	sxtb	r0, r3
 800545a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 800545e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8005462:	00ec      	lsls	r4, r5, #3
 8005464:	4d45      	ldr	r5, [pc, #276]	; (800557c <etharp_find_entry+0x194>)
 8005466:	592c      	ldr	r4, [r5, r4]
 8005468:	b15c      	cbz	r4, 8005482 <etharp_find_entry+0x9a>
          if (arp_table[i].ctime >= age_queue) {
 800546a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800546e:	00d4      	lsls	r4, r2, #3
 8005470:	462a      	mov	r2, r5
 8005472:	4422      	add	r2, r4
 8005474:	8a52      	ldrh	r2, [r2, #18]
 8005476:	4591      	cmp	r9, r2
 8005478:	d8c5      	bhi.n	8005406 <etharp_find_entry+0x1e>
            old_queue = i;
 800547a:	fa4f fc83 	sxtb.w	ip, r3
            age_queue = arp_table[i].ctime;
 800547e:	4691      	mov	r9, r2
 8005480:	e7c1      	b.n	8005406 <etharp_find_entry+0x1e>
          if (arp_table[i].ctime >= age_pending) {
 8005482:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005486:	00d4      	lsls	r4, r2, #3
 8005488:	4a3c      	ldr	r2, [pc, #240]	; (800557c <etharp_find_entry+0x194>)
 800548a:	4422      	add	r2, r4
 800548c:	8a52      	ldrh	r2, [r2, #18]
 800548e:	4593      	cmp	fp, r2
 8005490:	d8b9      	bhi.n	8005406 <etharp_find_entry+0x1e>
            old_pending = i;
 8005492:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 8005496:	4693      	mov	fp, r2
 8005498:	e7b5      	b.n	8005406 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800549a:	f011 0f02 	tst.w	r1, #2
 800549e:	d165      	bne.n	800556c <etharp_find_entry+0x184>
 80054a0:	2f0a      	cmp	r7, #10
 80054a2:	d020      	beq.n	80054e6 <etharp_find_entry+0xfe>
 80054a4:	4605      	mov	r5, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80054a6:	2f09      	cmp	r7, #9
 80054a8:	dc24      	bgt.n	80054f4 <etharp_find_entry+0x10c>
    i = empty;
 80054aa:	b2ff      	uxtb	r7, r7
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80054ac:	2f09      	cmp	r7, #9
 80054ae:	d84d      	bhi.n	800554c <etharp_find_entry+0x164>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80054b0:	463c      	mov	r4, r7
 80054b2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80054b6:	00da      	lsls	r2, r3, #3
 80054b8:	4b30      	ldr	r3, [pc, #192]	; (800557c <etharp_find_entry+0x194>)
 80054ba:	4413      	add	r3, r2
 80054bc:	7d1b      	ldrb	r3, [r3, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d14c      	bne.n	800555c <etharp_find_entry+0x174>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80054c2:	b135      	cbz	r5, 80054d2 <etharp_find_entry+0xea>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80054c4:	6829      	ldr	r1, [r5, #0]
 80054c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80054ca:	00da      	lsls	r2, r3, #3
 80054cc:	4b2b      	ldr	r3, [pc, #172]	; (800557c <etharp_find_entry+0x194>)
 80054ce:	4413      	add	r3, r2
 80054d0:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80054d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80054d6:	00e2      	lsls	r2, r4, #3
 80054d8:	4b28      	ldr	r3, [pc, #160]	; (800557c <etharp_find_entry+0x194>)
 80054da:	4413      	add	r3, r2
 80054dc:	2200      	movs	r2, #0
 80054de:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80054e0:	b278      	sxtb	r0, r7
 80054e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80054e6:	f011 0f01 	tst.w	r1, #1
 80054ea:	d1db      	bne.n	80054a4 <etharp_find_entry+0xbc>
    return (s8_t)ERR_MEM;
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295
 80054f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (old_stable < ARP_TABLE_SIZE) {
 80054f4:	f1b8 0f09 	cmp.w	r8, #9
 80054f8:	dc14      	bgt.n	8005524 <etharp_find_entry+0x13c>
      i = old_stable;
 80054fa:	fa5f f788 	uxtb.w	r7, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80054fe:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8005502:	00d3      	lsls	r3, r2, #3
 8005504:	4a1d      	ldr	r2, [pc, #116]	; (800557c <etharp_find_entry+0x194>)
 8005506:	58d3      	ldr	r3, [r2, r3]
 8005508:	b133      	cbz	r3, 8005518 <etharp_find_entry+0x130>
 800550a:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <etharp_find_entry+0x198>)
 800550c:	f240 126f 	movw	r2, #367	; 0x16f
 8005510:	491c      	ldr	r1, [pc, #112]	; (8005584 <etharp_find_entry+0x19c>)
 8005512:	481d      	ldr	r0, [pc, #116]	; (8005588 <etharp_find_entry+0x1a0>)
 8005514:	f007 f839 	bl	800c58a <iprintf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8005518:	2f09      	cmp	r7, #9
 800551a:	d80f      	bhi.n	800553c <etharp_find_entry+0x154>
    etharp_free_entry(i);
 800551c:	4638      	mov	r0, r7
 800551e:	f7ff ff49 	bl	80053b4 <etharp_free_entry>
 8005522:	e7c3      	b.n	80054ac <etharp_find_entry+0xc4>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8005524:	f1ba 0f09 	cmp.w	sl, #9
 8005528:	dc02      	bgt.n	8005530 <etharp_find_entry+0x148>
      i = old_pending;
 800552a:	fa5f f78a 	uxtb.w	r7, sl
 800552e:	e7f3      	b.n	8005518 <etharp_find_entry+0x130>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8005530:	f1bc 0f09 	cmp.w	ip, #9
 8005534:	dc1e      	bgt.n	8005574 <etharp_find_entry+0x18c>
      i = old_queue;
 8005536:	fa5f f78c 	uxtb.w	r7, ip
 800553a:	e7ed      	b.n	8005518 <etharp_find_entry+0x130>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <etharp_find_entry+0x198>)
 800553e:	f240 1281 	movw	r2, #385	; 0x181
 8005542:	4912      	ldr	r1, [pc, #72]	; (800558c <etharp_find_entry+0x1a4>)
 8005544:	4810      	ldr	r0, [pc, #64]	; (8005588 <etharp_find_entry+0x1a0>)
 8005546:	f007 f820 	bl	800c58a <iprintf>
 800554a:	e7e7      	b.n	800551c <etharp_find_entry+0x134>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800554c:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <etharp_find_entry+0x198>)
 800554e:	f240 1285 	movw	r2, #389	; 0x185
 8005552:	490e      	ldr	r1, [pc, #56]	; (800558c <etharp_find_entry+0x1a4>)
 8005554:	480c      	ldr	r0, [pc, #48]	; (8005588 <etharp_find_entry+0x1a0>)
 8005556:	f007 f818 	bl	800c58a <iprintf>
 800555a:	e7a9      	b.n	80054b0 <etharp_find_entry+0xc8>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800555c:	4b08      	ldr	r3, [pc, #32]	; (8005580 <etharp_find_entry+0x198>)
 800555e:	f240 1287 	movw	r2, #391	; 0x187
 8005562:	490b      	ldr	r1, [pc, #44]	; (8005590 <etharp_find_entry+0x1a8>)
 8005564:	4808      	ldr	r0, [pc, #32]	; (8005588 <etharp_find_entry+0x1a0>)
 8005566:	f007 f810 	bl	800c58a <iprintf>
 800556a:	e7aa      	b.n	80054c2 <etharp_find_entry+0xda>
    return (s8_t)ERR_MEM;
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (s8_t)ERR_MEM;
 8005574:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	20003d88 	.word	0x20003d88
 8005580:	0800cf4c 	.word	0x0800cf4c
 8005584:	0800cf84 	.word	0x0800cf84
 8005588:	0800c8d0 	.word	0x0800c8d0
 800558c:	0800cf9c 	.word	0x0800cf9c
 8005590:	0800cfb0 	.word	0x0800cfb0

08005594 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8005594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005596:	b083      	sub	sp, #12
 8005598:	4604      	mov	r4, r0
 800559a:	460d      	mov	r5, r1
 800559c:	4616      	mov	r6, r2
 800559e:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80055a0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80055a4:	2b06      	cmp	r3, #6
 80055a6:	d006      	beq.n	80055b6 <etharp_update_arp_entry+0x22>
 80055a8:	4b28      	ldr	r3, [pc, #160]	; (800564c <etharp_update_arp_entry+0xb8>)
 80055aa:	f240 12ab 	movw	r2, #427	; 0x1ab
 80055ae:	4928      	ldr	r1, [pc, #160]	; (8005650 <etharp_update_arp_entry+0xbc>)
 80055b0:	4828      	ldr	r0, [pc, #160]	; (8005654 <etharp_update_arp_entry+0xc0>)
 80055b2:	f006 ffea 	bl	800c58a <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80055b6:	2d00      	cmp	r5, #0
 80055b8:	d039      	beq.n	800562e <etharp_update_arp_entry+0x9a>
 80055ba:	6828      	ldr	r0, [r5, #0]
 80055bc:	2800      	cmp	r0, #0
 80055be:	d039      	beq.n	8005634 <etharp_update_arp_entry+0xa0>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80055c0:	4621      	mov	r1, r4
 80055c2:	f000 fe3c 	bl	800623e <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d137      	bne.n	800563a <etharp_update_arp_entry+0xa6>
      ip4_addr_ismulticast(ipaddr)) {
 80055ca:	682b      	ldr	r3, [r5, #0]
 80055cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80055d0:	2be0      	cmp	r3, #224	; 0xe0
 80055d2:	d035      	beq.n	8005640 <etharp_update_arp_entry+0xac>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80055d4:	4622      	mov	r2, r4
 80055d6:	4639      	mov	r1, r7
 80055d8:	4628      	mov	r0, r5
 80055da:	f7ff ff05 	bl	80053e8 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 80055de:	2800      	cmp	r0, #0
 80055e0:	db23      	blt.n	800562a <etharp_update_arp_entry+0x96>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80055e2:	4d1d      	ldr	r5, [pc, #116]	; (8005658 <etharp_update_arp_entry+0xc4>)
 80055e4:	0042      	lsls	r2, r0, #1
 80055e6:	1813      	adds	r3, r2, r0
 80055e8:	00d9      	lsls	r1, r3, #3
 80055ea:	186f      	adds	r7, r5, r1
 80055ec:	2302      	movs	r3, #2
 80055ee:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80055f0:	60bc      	str	r4, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80055f2:	460b      	mov	r3, r1
 80055f4:	3308      	adds	r3, #8
 80055f6:	442b      	add	r3, r5
 80055f8:	6832      	ldr	r2, [r6, #0]
 80055fa:	605a      	str	r2, [r3, #4]
 80055fc:	88b2      	ldrh	r2, [r6, #4]
 80055fe:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8005604:	586d      	ldr	r5, [r5, r1]
 8005606:	b1f5      	cbz	r5, 8005646 <etharp_update_arp_entry+0xb2>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 8005608:	2700      	movs	r7, #0
 800560a:	4a13      	ldr	r2, [pc, #76]	; (8005658 <etharp_update_arp_entry+0xc4>)
 800560c:	5057      	str	r7, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800560e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	4633      	mov	r3, r6
 8005616:	f104 0225 	add.w	r2, r4, #37	; 0x25
 800561a:	4629      	mov	r1, r5
 800561c:	4620      	mov	r0, r4
 800561e:	f006 f8f3 	bl	800b808 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8005622:	4628      	mov	r0, r5
 8005624:	f001 fec2 	bl	80073ac <pbuf_free>
  }
  return ERR_OK;
 8005628:	4638      	mov	r0, r7
}
 800562a:	b003      	add	sp, #12
 800562c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 800562e:	f06f 000f 	mvn.w	r0, #15
 8005632:	e7fa      	b.n	800562a <etharp_update_arp_entry+0x96>
 8005634:	f06f 000f 	mvn.w	r0, #15
 8005638:	e7f7      	b.n	800562a <etharp_update_arp_entry+0x96>
 800563a:	f06f 000f 	mvn.w	r0, #15
 800563e:	e7f4      	b.n	800562a <etharp_update_arp_entry+0x96>
 8005640:	f06f 000f 	mvn.w	r0, #15
 8005644:	e7f1      	b.n	800562a <etharp_update_arp_entry+0x96>
  return ERR_OK;
 8005646:	2000      	movs	r0, #0
 8005648:	e7ef      	b.n	800562a <etharp_update_arp_entry+0x96>
 800564a:	bf00      	nop
 800564c:	0800cf4c 	.word	0x0800cf4c
 8005650:	0800d104 	.word	0x0800d104
 8005654:	0800c8d0 	.word	0x0800c8d0
 8005658:	20003d88 	.word	0x20003d88

0800565c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800565c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	4689      	mov	r9, r1
 8005664:	4692      	mov	sl, r2
 8005666:	4698      	mov	r8, r3
 8005668:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800566a:	4607      	mov	r7, r0
 800566c:	2800      	cmp	r0, #0
 800566e:	d048      	beq.n	8005702 <etharp_raw+0xa6>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8005670:	2200      	movs	r2, #0
 8005672:	211c      	movs	r1, #28
 8005674:	2002      	movs	r0, #2
 8005676:	f001 ff05 	bl	8007484 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800567a:	4606      	mov	r6, r0
 800567c:	2800      	cmp	r0, #0
 800567e:	d050      	beq.n	8005722 <etharp_raw+0xc6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005680:	8943      	ldrh	r3, [r0, #10]
 8005682:	2b1b      	cmp	r3, #27
 8005684:	d945      	bls.n	8005712 <etharp_raw+0xb6>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8005686:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8005688:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800568c:	f7ff fe72 	bl	8005374 <lwip_htons>
 8005690:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005692:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005696:	2b06      	cmp	r3, #6
 8005698:	d006      	beq.n	80056a8 <etharp_raw+0x4c>
 800569a:	4b23      	ldr	r3, [pc, #140]	; (8005728 <etharp_raw+0xcc>)
 800569c:	f240 426b 	movw	r2, #1131	; 0x46b
 80056a0:	4922      	ldr	r1, [pc, #136]	; (800572c <etharp_raw+0xd0>)
 80056a2:	4823      	ldr	r0, [pc, #140]	; (8005730 <etharp_raw+0xd4>)
 80056a4:	f006 ff71 	bl	800c58a <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80056a8:	f8d8 3000 	ldr.w	r3, [r8]
 80056ac:	60a3      	str	r3, [r4, #8]
 80056ae:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80056b2:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	f8c4 3012 	str.w	r3, [r4, #18]
 80056ba:	88ab      	ldrh	r3, [r5, #4]
 80056bc:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80056be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80056c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80056cc:	2500      	movs	r5, #0
 80056ce:	7025      	strb	r5, [r4, #0]
 80056d0:	2301      	movs	r3, #1
 80056d2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80056d4:	2308      	movs	r3, #8
 80056d6:	70a3      	strb	r3, [r4, #2]
 80056d8:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80056da:	2306      	movs	r3, #6
 80056dc:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80056de:	2304      	movs	r3, #4
 80056e0:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80056e2:	f640 0306 	movw	r3, #2054	; 0x806
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	4653      	mov	r3, sl
 80056ea:	464a      	mov	r2, r9
 80056ec:	4631      	mov	r1, r6
 80056ee:	4638      	mov	r0, r7
 80056f0:	f006 f88a 	bl	800b808 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80056f4:	4630      	mov	r0, r6
 80056f6:	f001 fe59 	bl	80073ac <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80056fa:	4628      	mov	r0, r5
}
 80056fc:	b002      	add	sp, #8
 80056fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005702:	4b09      	ldr	r3, [pc, #36]	; (8005728 <etharp_raw+0xcc>)
 8005704:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8005708:	490a      	ldr	r1, [pc, #40]	; (8005734 <etharp_raw+0xd8>)
 800570a:	4809      	ldr	r0, [pc, #36]	; (8005730 <etharp_raw+0xd4>)
 800570c:	f006 ff3d 	bl	800c58a <iprintf>
 8005710:	e7ae      	b.n	8005670 <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005712:	4b05      	ldr	r3, [pc, #20]	; (8005728 <etharp_raw+0xcc>)
 8005714:	f240 4264 	movw	r2, #1124	; 0x464
 8005718:	4907      	ldr	r1, [pc, #28]	; (8005738 <etharp_raw+0xdc>)
 800571a:	4805      	ldr	r0, [pc, #20]	; (8005730 <etharp_raw+0xd4>)
 800571c:	f006 ff35 	bl	800c58a <iprintf>
 8005720:	e7b1      	b.n	8005686 <etharp_raw+0x2a>
    return ERR_MEM;
 8005722:	f04f 30ff 	mov.w	r0, #4294967295
 8005726:	e7e9      	b.n	80056fc <etharp_raw+0xa0>
 8005728:	0800cf4c 	.word	0x0800cf4c
 800572c:	0800d0c0 	.word	0x0800d0c0
 8005730:	0800c8d0 	.word	0x0800c8d0
 8005734:	0800d07c 	.word	0x0800d07c
 8005738:	0800d08c 	.word	0x0800d08c

0800573c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800573c:	b530      	push	{r4, r5, lr}
 800573e:	b085      	sub	sp, #20
 8005740:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005742:	f100 0425 	add.w	r4, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005746:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005748:	2501      	movs	r5, #1
 800574a:	9503      	str	r5, [sp, #12]
 800574c:	9102      	str	r1, [sp, #8]
 800574e:	4904      	ldr	r1, [pc, #16]	; (8005760 <etharp_request_dst+0x24>)
 8005750:	9101      	str	r1, [sp, #4]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	4623      	mov	r3, r4
 8005756:	4621      	mov	r1, r4
 8005758:	f7ff ff80 	bl	800565c <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800575c:	b005      	add	sp, #20
 800575e:	bd30      	pop	{r4, r5, pc}
 8005760:	0800e814 	.word	0x0800e814

08005764 <etharp_cleanup_netif>:
{
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005768:	2400      	movs	r4, #0
 800576a:	e001      	b.n	8005770 <etharp_cleanup_netif+0xc>
 800576c:	3401      	adds	r4, #1
 800576e:	b2e4      	uxtb	r4, r4
 8005770:	2c09      	cmp	r4, #9
 8005772:	d810      	bhi.n	8005796 <etharp_cleanup_netif+0x32>
    u8_t state = arp_table[i].state;
 8005774:	4620      	mov	r0, r4
 8005776:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800577a:	00da      	lsls	r2, r3, #3
 800577c:	4b06      	ldr	r3, [pc, #24]	; (8005798 <etharp_cleanup_netif+0x34>)
 800577e:	4413      	add	r3, r2
 8005780:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f2      	beq.n	800576c <etharp_cleanup_netif+0x8>
 8005786:	4b04      	ldr	r3, [pc, #16]	; (8005798 <etharp_cleanup_netif+0x34>)
 8005788:	4413      	add	r3, r2
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	42ab      	cmp	r3, r5
 800578e:	d1ed      	bne.n	800576c <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 8005790:	f7ff fe10 	bl	80053b4 <etharp_free_entry>
 8005794:	e7ea      	b.n	800576c <etharp_cleanup_netif+0x8>
}
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	20003d88 	.word	0x20003d88

0800579c <etharp_input>:
{
 800579c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a0:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80057a2:	b161      	cbz	r1, 80057be <etharp_input+0x22>
 80057a4:	4604      	mov	r4, r0
 80057a6:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 80057a8:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80057aa:	882b      	ldrh	r3, [r5, #0]
 80057ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b0:	d00d      	beq.n	80057ce <etharp_input+0x32>
    pbuf_free(p);
 80057b2:	4620      	mov	r0, r4
 80057b4:	f001 fdfa 	bl	80073ac <pbuf_free>
}
 80057b8:	b006      	add	sp, #24
 80057ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80057be:	4b20      	ldr	r3, [pc, #128]	; (8005840 <etharp_input+0xa4>)
 80057c0:	f44f 7222 	mov.w	r2, #648	; 0x288
 80057c4:	491f      	ldr	r1, [pc, #124]	; (8005844 <etharp_input+0xa8>)
 80057c6:	4820      	ldr	r0, [pc, #128]	; (8005848 <etharp_input+0xac>)
 80057c8:	f006 fedf 	bl	800c58a <iprintf>
 80057cc:	e7f4      	b.n	80057b8 <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80057ce:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80057d0:	2b06      	cmp	r3, #6
 80057d2:	d1ee      	bne.n	80057b2 <etharp_input+0x16>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80057d4:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d1eb      	bne.n	80057b2 <etharp_input+0x16>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80057da:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d1e8      	bne.n	80057b2 <etharp_input+0x16>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80057e0:	f8d5 300e 	ldr.w	r3, [r5, #14]
 80057e4:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80057e6:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80057e8:	684b      	ldr	r3, [r1, #4]
 80057ea:	b1ab      	cbz	r3, 8005818 <etharp_input+0x7c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80057ec:	429f      	cmp	r7, r3
 80057ee:	bf14      	ite	ne
 80057f0:	2700      	movne	r7, #0
 80057f2:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80057f4:	f105 0808 	add.w	r8, r5, #8
 80057f8:	b187      	cbz	r7, 800581c <etharp_input+0x80>
 80057fa:	2301      	movs	r3, #1
 80057fc:	4642      	mov	r2, r8
 80057fe:	a905      	add	r1, sp, #20
 8005800:	4630      	mov	r0, r6
 8005802:	f7ff fec7 	bl	8005594 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 8005806:	88eb      	ldrh	r3, [r5, #6]
 8005808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800580c:	d100      	bne.n	8005810 <etharp_input+0x74>
    if (for_us) {
 800580e:	b93f      	cbnz	r7, 8005820 <etharp_input+0x84>
  pbuf_free(p);
 8005810:	4620      	mov	r0, r4
 8005812:	f001 fdcb 	bl	80073ac <pbuf_free>
 8005816:	e7cf      	b.n	80057b8 <etharp_input+0x1c>
    for_us = 0;
 8005818:	2700      	movs	r7, #0
 800581a:	e7eb      	b.n	80057f4 <etharp_input+0x58>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800581c:	2302      	movs	r3, #2
 800581e:	e7ed      	b.n	80057fc <etharp_input+0x60>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8005820:	f106 0125 	add.w	r1, r6, #37	; 0x25
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8005824:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 8005826:	2202      	movs	r2, #2
 8005828:	9203      	str	r2, [sp, #12]
 800582a:	aa05      	add	r2, sp, #20
 800582c:	9202      	str	r2, [sp, #8]
 800582e:	f8cd 8004 	str.w	r8, [sp, #4]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	460b      	mov	r3, r1
 8005836:	4642      	mov	r2, r8
 8005838:	4630      	mov	r0, r6
 800583a:	f7ff ff0f 	bl	800565c <etharp_raw>
 800583e:	e7e7      	b.n	8005810 <etharp_input+0x74>
 8005840:	0800cf4c 	.word	0x0800cf4c
 8005844:	0800d07c 	.word	0x0800d07c
 8005848:	0800c8d0 	.word	0x0800c8d0

0800584c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800584c:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800584e:	4a02      	ldr	r2, [pc, #8]	; (8005858 <etharp_request+0xc>)
 8005850:	f7ff ff74 	bl	800573c <etharp_request_dst>
}
 8005854:	bd08      	pop	{r3, pc}
 8005856:	bf00      	nop
 8005858:	0800e7a0 	.word	0x0800e7a0

0800585c <etharp_tmr>:
{
 800585c:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800585e:	2400      	movs	r4, #0
 8005860:	e005      	b.n	800586e <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005862:	2b04      	cmp	r3, #4
 8005864:	d91d      	bls.n	80058a2 <etharp_tmr+0x46>
        etharp_free_entry(i);
 8005866:	f7ff fda5 	bl	80053b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800586a:	3401      	adds	r4, #1
 800586c:	b2e4      	uxtb	r4, r4
 800586e:	2c09      	cmp	r4, #9
 8005870:	d838      	bhi.n	80058e4 <etharp_tmr+0x88>
    u8_t state = arp_table[i].state;
 8005872:	4620      	mov	r0, r4
 8005874:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005878:	00da      	lsls	r2, r3, #3
 800587a:	4b1b      	ldr	r3, [pc, #108]	; (80058e8 <etharp_tmr+0x8c>)
 800587c:	4413      	add	r3, r2
 800587e:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f2      	beq.n	800586a <etharp_tmr+0xe>
      arp_table[i].ctime++;
 8005884:	4611      	mov	r1, r2
 8005886:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <etharp_tmr+0x8c>)
 8005888:	440a      	add	r2, r1
 800588a:	8a53      	ldrh	r3, [r2, #18]
 800588c:	3301      	adds	r3, #1
 800588e:	b29b      	uxth	r3, r3
 8005890:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005892:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005896:	d2e6      	bcs.n	8005866 <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005898:	4a13      	ldr	r2, [pc, #76]	; (80058e8 <etharp_tmr+0x8c>)
 800589a:	440a      	add	r2, r1
 800589c:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800589e:	2a01      	cmp	r2, #1
 80058a0:	d0df      	beq.n	8005862 <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80058a2:	2a03      	cmp	r2, #3
 80058a4:	d00e      	beq.n	80058c4 <etharp_tmr+0x68>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80058a6:	2a04      	cmp	r2, #4
 80058a8:	d014      	beq.n	80058d4 <etharp_tmr+0x78>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80058aa:	2a01      	cmp	r2, #1
 80058ac:	d1dd      	bne.n	800586a <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80058ae:	4a0e      	ldr	r2, [pc, #56]	; (80058e8 <etharp_tmr+0x8c>)
 80058b0:	0043      	lsls	r3, r0, #1
 80058b2:	181d      	adds	r5, r3, r0
 80058b4:	00e9      	lsls	r1, r5, #3
 80058b6:	4411      	add	r1, r2
 80058b8:	460a      	mov	r2, r1
 80058ba:	3104      	adds	r1, #4
 80058bc:	6890      	ldr	r0, [r2, #8]
 80058be:	f7ff ffc5 	bl	800584c <etharp_request>
 80058c2:	e7d2      	b.n	800586a <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80058c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80058c8:	00c2      	lsls	r2, r0, #3
 80058ca:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <etharp_tmr+0x8c>)
 80058cc:	4413      	add	r3, r2
 80058ce:	2204      	movs	r2, #4
 80058d0:	751a      	strb	r2, [r3, #20]
 80058d2:	e7ca      	b.n	800586a <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80058d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80058d8:	00c2      	lsls	r2, r0, #3
 80058da:	4b03      	ldr	r3, [pc, #12]	; (80058e8 <etharp_tmr+0x8c>)
 80058dc:	4413      	add	r3, r2
 80058de:	2202      	movs	r2, #2
 80058e0:	751a      	strb	r2, [r3, #20]
 80058e2:	e7c2      	b.n	800586a <etharp_tmr+0xe>
}
 80058e4:	bd38      	pop	{r3, r4, r5, pc}
 80058e6:	bf00      	nop
 80058e8:	20003d88 	.word	0x20003d88

080058ec <etharp_output_to_arp_index>:
{
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	4605      	mov	r5, r0
 80058f2:	460e      	mov	r6, r1
 80058f4:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80058f6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80058fa:	00da      	lsls	r2, r3, #3
 80058fc:	4b2c      	ldr	r3, [pc, #176]	; (80059b0 <etharp_output_to_arp_index+0xc4>)
 80058fe:	4413      	add	r3, r2
 8005900:	7d1b      	ldrb	r3, [r3, #20]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d919      	bls.n	800593a <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005906:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800590a:	00da      	lsls	r2, r3, #3
 800590c:	4b28      	ldr	r3, [pc, #160]	; (80059b0 <etharp_output_to_arp_index+0xc4>)
 800590e:	4413      	add	r3, r2
 8005910:	7d1b      	ldrb	r3, [r3, #20]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d019      	beq.n	800594a <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005916:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800591a:	00e3      	lsls	r3, r4, #3
 800591c:	3308      	adds	r3, #8
 800591e:	4a24      	ldr	r2, [pc, #144]	; (80059b0 <etharp_output_to_arp_index+0xc4>)
 8005920:	4413      	add	r3, r2
 8005922:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005926:	9200      	str	r2, [sp, #0]
 8005928:	3304      	adds	r3, #4
 800592a:	f105 0225 	add.w	r2, r5, #37	; 0x25
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	f005 ff69 	bl	800b808 <ethernet_output>
}
 8005936:	b002      	add	sp, #8
 8005938:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800593a:	4b1e      	ldr	r3, [pc, #120]	; (80059b4 <etharp_output_to_arp_index+0xc8>)
 800593c:	f240 22ed 	movw	r2, #749	; 0x2ed
 8005940:	491d      	ldr	r1, [pc, #116]	; (80059b8 <etharp_output_to_arp_index+0xcc>)
 8005942:	481e      	ldr	r0, [pc, #120]	; (80059bc <etharp_output_to_arp_index+0xd0>)
 8005944:	f006 fe21 	bl	800c58a <iprintf>
 8005948:	e7dd      	b.n	8005906 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800594a:	4b19      	ldr	r3, [pc, #100]	; (80059b0 <etharp_output_to_arp_index+0xc4>)
 800594c:	4413      	add	r3, r2
 800594e:	8a5b      	ldrh	r3, [r3, #18]
 8005950:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8005954:	d819      	bhi.n	800598a <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005956:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800595a:	d3dc      	bcc.n	8005916 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800595c:	4a14      	ldr	r2, [pc, #80]	; (80059b0 <etharp_output_to_arp_index+0xc4>)
 800595e:	0063      	lsls	r3, r4, #1
 8005960:	1918      	adds	r0, r3, r4
 8005962:	00c1      	lsls	r1, r0, #3
 8005964:	4608      	mov	r0, r1
 8005966:	4411      	add	r1, r2
 8005968:	3008      	adds	r0, #8
 800596a:	4402      	add	r2, r0
 800596c:	3204      	adds	r2, #4
 800596e:	3104      	adds	r1, #4
 8005970:	4628      	mov	r0, r5
 8005972:	f7ff fee3 	bl	800573c <etharp_request_dst>
 8005976:	2800      	cmp	r0, #0
 8005978:	d1cd      	bne.n	8005916 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800597a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800597e:	00da      	lsls	r2, r3, #3
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <etharp_output_to_arp_index+0xc4>)
 8005982:	4413      	add	r3, r2
 8005984:	2203      	movs	r2, #3
 8005986:	751a      	strb	r2, [r3, #20]
 8005988:	e7c5      	b.n	8005916 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800598a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800598e:	00d3      	lsls	r3, r2, #3
 8005990:	4907      	ldr	r1, [pc, #28]	; (80059b0 <etharp_output_to_arp_index+0xc4>)
 8005992:	4419      	add	r1, r3
 8005994:	3104      	adds	r1, #4
 8005996:	4628      	mov	r0, r5
 8005998:	f7ff ff58 	bl	800584c <etharp_request>
 800599c:	2800      	cmp	r0, #0
 800599e:	d1ba      	bne.n	8005916 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80059a0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80059a4:	00da      	lsls	r2, r3, #3
 80059a6:	4b02      	ldr	r3, [pc, #8]	; (80059b0 <etharp_output_to_arp_index+0xc4>)
 80059a8:	4413      	add	r3, r2
 80059aa:	2203      	movs	r2, #3
 80059ac:	751a      	strb	r2, [r3, #20]
 80059ae:	e7b2      	b.n	8005916 <etharp_output_to_arp_index+0x2a>
 80059b0:	20003d88 	.word	0x20003d88
 80059b4:	0800cf4c 	.word	0x0800cf4c
 80059b8:	0800cffc 	.word	0x0800cffc
 80059bc:	0800c8d0 	.word	0x0800c8d0

080059c0 <etharp_query>:
{
 80059c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059c4:	b083      	sub	sp, #12
 80059c6:	4606      	mov	r6, r0
 80059c8:	460c      	mov	r4, r1
 80059ca:	4617      	mov	r7, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80059cc:	f100 0825 	add.w	r8, r0, #37	; 0x25
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80059d0:	4601      	mov	r1, r0
 80059d2:	6820      	ldr	r0, [r4, #0]
 80059d4:	f000 fc33 	bl	800623e <ip4_addr_isbroadcast_u32>
 80059d8:	2800      	cmp	r0, #0
 80059da:	f040 80aa 	bne.w	8005b32 <etharp_query+0x172>
      ip4_addr_ismulticast(ipaddr) ||
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80059e4:	2ae0      	cmp	r2, #224	; 0xe0
 80059e6:	f000 80a7 	beq.w	8005b38 <etharp_query+0x178>
      ip4_addr_ismulticast(ipaddr) ||
 80059ea:	2c00      	cmp	r4, #0
 80059ec:	f000 80a7 	beq.w	8005b3e <etharp_query+0x17e>
      ip4_addr_isany(ipaddr)) {
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80a7 	beq.w	8005b44 <etharp_query+0x184>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80059f6:	4632      	mov	r2, r6
 80059f8:	2101      	movs	r1, #1
 80059fa:	4620      	mov	r0, r4
 80059fc:	f7ff fcf4 	bl	80053e8 <etharp_find_entry>
  if (i < 0) {
 8005a00:	1e05      	subs	r5, r0, #0
 8005a02:	f2c0 80a2 	blt.w	8005b4a <etharp_query+0x18a>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8005a06:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005a0a:	00da      	lsls	r2, r3, #3
 8005a0c:	4b51      	ldr	r3, [pc, #324]	; (8005b54 <etharp_query+0x194>)
 8005a0e:	4413      	add	r3, r2
 8005a10:	7d1b      	ldrb	r3, [r3, #20]
 8005a12:	bb1b      	cbnz	r3, 8005a5c <etharp_query+0x9c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8005a14:	006a      	lsls	r2, r5, #1
 8005a16:	442a      	add	r2, r5
 8005a18:	00d1      	lsls	r1, r2, #3
 8005a1a:	4b4e      	ldr	r3, [pc, #312]	; (8005b54 <etharp_query+0x194>)
 8005a1c:	440b      	add	r3, r1
 8005a1e:	f04f 0901 	mov.w	r9, #1
 8005a22:	f883 9014 	strb.w	r9, [r3, #20]
    arp_table[i].netif = netif;
 8005a26:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8005a28:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005a2c:	00da      	lsls	r2, r3, #3
 8005a2e:	4b49      	ldr	r3, [pc, #292]	; (8005b54 <etharp_query+0x194>)
 8005a30:	4413      	add	r3, r2
 8005a32:	7d1b      	ldrb	r3, [r3, #20]
 8005a34:	b1ab      	cbz	r3, 8005a62 <etharp_query+0xa2>
  if (is_new_entry || (q == NULL)) {
 8005a36:	f1b9 0f00 	cmp.w	r9, #0
 8005a3a:	d11a      	bne.n	8005a72 <etharp_query+0xb2>
 8005a3c:	b1cf      	cbz	r7, 8005a72 <etharp_query+0xb2>
  err_t result = ERR_MEM;
 8005a3e:	f04f 34ff 	mov.w	r4, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 8005a42:	b1f7      	cbz	r7, 8005a82 <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8005a44:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005a48:	00da      	lsls	r2, r3, #3
 8005a4a:	4b42      	ldr	r3, [pc, #264]	; (8005b54 <etharp_query+0x194>)
 8005a4c:	4413      	add	r3, r2
 8005a4e:	7d1b      	ldrb	r3, [r3, #20]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d81e      	bhi.n	8005a92 <etharp_query+0xd2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d12c      	bne.n	8005ab2 <etharp_query+0xf2>
 8005a58:	463c      	mov	r4, r7
 8005a5a:	e032      	b.n	8005ac2 <etharp_query+0x102>
  int is_new_entry = 0;
 8005a5c:	f04f 0900 	mov.w	r9, #0
 8005a60:	e7e2      	b.n	8005a28 <etharp_query+0x68>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8005a62:	4b3d      	ldr	r3, [pc, #244]	; (8005b58 <etharp_query+0x198>)
 8005a64:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005a68:	493c      	ldr	r1, [pc, #240]	; (8005b5c <etharp_query+0x19c>)
 8005a6a:	483d      	ldr	r0, [pc, #244]	; (8005b60 <etharp_query+0x1a0>)
 8005a6c:	f006 fd8d 	bl	800c58a <iprintf>
 8005a70:	e7e1      	b.n	8005a36 <etharp_query+0x76>
    result = etharp_request(netif, ipaddr);
 8005a72:	4621      	mov	r1, r4
 8005a74:	4630      	mov	r0, r6
 8005a76:	f7ff fee9 	bl	800584c <etharp_request>
 8005a7a:	4604      	mov	r4, r0
    if (q == NULL) {
 8005a7c:	2f00      	cmp	r7, #0
 8005a7e:	d1e0      	bne.n	8005a42 <etharp_query+0x82>
 8005a80:	e017      	b.n	8005ab2 <etharp_query+0xf2>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005a82:	4b35      	ldr	r3, [pc, #212]	; (8005b58 <etharp_query+0x198>)
 8005a84:	f240 32db 	movw	r2, #987	; 0x3db
 8005a88:	4936      	ldr	r1, [pc, #216]	; (8005b64 <etharp_query+0x1a4>)
 8005a8a:	4835      	ldr	r0, [pc, #212]	; (8005b60 <etharp_query+0x1a0>)
 8005a8c:	f006 fd7d 	bl	800c58a <iprintf>
 8005a90:	e7d8      	b.n	8005a44 <etharp_query+0x84>
    ETHARP_SET_HINT(netif, i);
 8005a92:	4b35      	ldr	r3, [pc, #212]	; (8005b68 <etharp_query+0x1a8>)
 8005a94:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005a96:	4613      	mov	r3, r2
 8005a98:	3308      	adds	r3, #8
 8005a9a:	4a2e      	ldr	r2, [pc, #184]	; (8005b54 <etharp_query+0x194>)
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aa2:	9200      	str	r2, [sp, #0]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	4630      	mov	r0, r6
 8005aac:	f005 feac 	bl	800b808 <ethernet_output>
 8005ab0:	4604      	mov	r4, r0
}
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	b003      	add	sp, #12
 8005ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (p->type != PBUF_ROM) {
 8005aba:	7b23      	ldrb	r3, [r4, #12]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d122      	bne.n	8005b06 <etharp_query+0x146>
      p = p->next;
 8005ac0:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8005ac2:	b174      	cbz	r4, 8005ae2 <etharp_query+0x122>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8005ac4:	8962      	ldrh	r2, [r4, #10]
 8005ac6:	8923      	ldrh	r3, [r4, #8]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d1f6      	bne.n	8005aba <etharp_query+0xfa>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0f3      	beq.n	8005aba <etharp_query+0xfa>
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <etharp_query+0x198>)
 8005ad4:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8005ad8:	4924      	ldr	r1, [pc, #144]	; (8005b6c <etharp_query+0x1ac>)
 8005ada:	4821      	ldr	r0, [pc, #132]	; (8005b60 <etharp_query+0x1a0>)
 8005adc:	f006 fd55 	bl	800c58a <iprintf>
 8005ae0:	e7eb      	b.n	8005aba <etharp_query+0xfa>
    int copy_needed = 0;
 8005ae2:	2300      	movs	r3, #0
    if (copy_needed) {
 8005ae4:	b18b      	cbz	r3, 8005b0a <etharp_query+0x14a>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	8921      	ldrh	r1, [r4, #8]
 8005aea:	2002      	movs	r0, #2
 8005aec:	f001 fcca 	bl	8007484 <pbuf_alloc>
      if (p != NULL) {
 8005af0:	4604      	mov	r4, r0
 8005af2:	b170      	cbz	r0, 8005b12 <etharp_query+0x152>
        if (pbuf_copy(p, q) != ERR_OK) {
 8005af4:	4639      	mov	r1, r7
 8005af6:	f001 fe7f 	bl	80077f8 <pbuf_copy>
 8005afa:	b150      	cbz	r0, 8005b12 <etharp_query+0x152>
          pbuf_free(p);
 8005afc:	4620      	mov	r0, r4
 8005afe:	f001 fc55 	bl	80073ac <pbuf_free>
          p = NULL;
 8005b02:	2400      	movs	r4, #0
 8005b04:	e005      	b.n	8005b12 <etharp_query+0x152>
        copy_needed = 1;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e7ec      	b.n	8005ae4 <etharp_query+0x124>
      pbuf_ref(p);
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	f001 fe1e 	bl	800774c <pbuf_ref>
      p = q;
 8005b10:	463c      	mov	r4, r7
    if (p != NULL) {
 8005b12:	b1e4      	cbz	r4, 8005b4e <etharp_query+0x18e>
      if (arp_table[i].q != NULL) {
 8005b14:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8005b18:	00d3      	lsls	r3, r2, #3
 8005b1a:	4a0e      	ldr	r2, [pc, #56]	; (8005b54 <etharp_query+0x194>)
 8005b1c:	58d0      	ldr	r0, [r2, r3]
 8005b1e:	b108      	cbz	r0, 8005b24 <etharp_query+0x164>
        pbuf_free(arp_table[i].q);
 8005b20:	f001 fc44 	bl	80073ac <pbuf_free>
      arp_table[i].q = p;
 8005b24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b28:	00eb      	lsls	r3, r5, #3
 8005b2a:	4a0a      	ldr	r2, [pc, #40]	; (8005b54 <etharp_query+0x194>)
 8005b2c:	50d4      	str	r4, [r2, r3]
      result = ERR_OK;
 8005b2e:	2400      	movs	r4, #0
 8005b30:	e7bf      	b.n	8005ab2 <etharp_query+0xf2>
    return ERR_ARG;
 8005b32:	f06f 040f 	mvn.w	r4, #15
 8005b36:	e7bc      	b.n	8005ab2 <etharp_query+0xf2>
 8005b38:	f06f 040f 	mvn.w	r4, #15
 8005b3c:	e7b9      	b.n	8005ab2 <etharp_query+0xf2>
 8005b3e:	f06f 040f 	mvn.w	r4, #15
 8005b42:	e7b6      	b.n	8005ab2 <etharp_query+0xf2>
 8005b44:	f06f 040f 	mvn.w	r4, #15
 8005b48:	e7b3      	b.n	8005ab2 <etharp_query+0xf2>
    return (err_t)i;
 8005b4a:	462c      	mov	r4, r5
 8005b4c:	e7b1      	b.n	8005ab2 <etharp_query+0xf2>
      result = ERR_MEM;
 8005b4e:	f04f 34ff 	mov.w	r4, #4294967295
 8005b52:	e7ae      	b.n	8005ab2 <etharp_query+0xf2>
 8005b54:	20003d88 	.word	0x20003d88
 8005b58:	0800cf4c 	.word	0x0800cf4c
 8005b5c:	0800d02c 	.word	0x0800d02c
 8005b60:	0800c8d0 	.word	0x0800c8d0
 8005b64:	0800d054 	.word	0x0800d054
 8005b68:	20003e78 	.word	0x20003e78
 8005b6c:	0800d060 	.word	0x0800d060

08005b70 <etharp_output>:
{
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	460e      	mov	r6, r1
 8005b76:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005b78:	4605      	mov	r5, r0
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d02f      	beq.n	8005bde <etharp_output+0x6e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005b7e:	2e00      	cmp	r6, #0
 8005b80:	d035      	beq.n	8005bee <etharp_output+0x7e>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8005b82:	2c00      	cmp	r4, #0
 8005b84:	d03b      	beq.n	8005bfe <etharp_output+0x8e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8005b86:	4629      	mov	r1, r5
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	f000 fb58 	bl	800623e <ip4_addr_isbroadcast_u32>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d17a      	bne.n	8005c88 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b98:	2ae0      	cmp	r2, #224	; 0xe0
 8005b9a:	d038      	beq.n	8005c0e <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005b9c:	686a      	ldr	r2, [r5, #4]
 8005b9e:	68a9      	ldr	r1, [r5, #8]
 8005ba0:	405a      	eors	r2, r3
 8005ba2:	420a      	tst	r2, r1
 8005ba4:	d009      	beq.n	8005bba <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 8005ba6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005ba8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8005bb0:	68eb      	ldr	r3, [r5, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d074      	beq.n	8005ca0 <etharp_output+0x130>
            dst_addr = netif_ip4_gw(netif);
 8005bb6:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005bba:	4b3b      	ldr	r3, [pc, #236]	; (8005ca8 <etharp_output+0x138>)
 8005bbc:	781a      	ldrb	r2, [r3, #0]
 8005bbe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005bc2:	00d9      	lsls	r1, r3, #3
 8005bc4:	4b39      	ldr	r3, [pc, #228]	; (8005cac <etharp_output+0x13c>)
 8005bc6:	440b      	add	r3, r1
 8005bc8:	7d1b      	ldrb	r3, [r3, #20]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d954      	bls.n	8005c78 <etharp_output+0x108>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	4b36      	ldr	r3, [pc, #216]	; (8005cac <etharp_output+0x13c>)
 8005bd2:	440b      	add	r3, r1
 8005bd4:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005bd6:	4298      	cmp	r0, r3
 8005bd8:	d02f      	beq.n	8005c3a <etharp_output+0xca>
 8005bda:	2200      	movs	r2, #0
 8005bdc:	e034      	b.n	8005c48 <etharp_output+0xd8>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005bde:	4b34      	ldr	r3, [pc, #208]	; (8005cb0 <etharp_output+0x140>)
 8005be0:	f240 321b 	movw	r2, #795	; 0x31b
 8005be4:	4933      	ldr	r1, [pc, #204]	; (8005cb4 <etharp_output+0x144>)
 8005be6:	4834      	ldr	r0, [pc, #208]	; (8005cb8 <etharp_output+0x148>)
 8005be8:	f006 fccf 	bl	800c58a <iprintf>
 8005bec:	e7c7      	b.n	8005b7e <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005bee:	4b30      	ldr	r3, [pc, #192]	; (8005cb0 <etharp_output+0x140>)
 8005bf0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8005bf4:	4931      	ldr	r1, [pc, #196]	; (8005cbc <etharp_output+0x14c>)
 8005bf6:	4830      	ldr	r0, [pc, #192]	; (8005cb8 <etharp_output+0x148>)
 8005bf8:	f006 fcc7 	bl	800c58a <iprintf>
 8005bfc:	e7c1      	b.n	8005b82 <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8005bfe:	4b2c      	ldr	r3, [pc, #176]	; (8005cb0 <etharp_output+0x140>)
 8005c00:	f240 321d 	movw	r2, #797	; 0x31d
 8005c04:	492e      	ldr	r1, [pc, #184]	; (8005cc0 <etharp_output+0x150>)
 8005c06:	482c      	ldr	r0, [pc, #176]	; (8005cb8 <etharp_output+0x148>)
 8005c08:	f006 fcbf 	bl	800c58a <iprintf>
 8005c0c:	e7bb      	b.n	8005b86 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8005c1a:	235e      	movs	r3, #94	; 0x5e
 8005c1c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005c20:	7863      	ldrb	r3, [r4, #1]
 8005c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c26:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8005c2a:	78a3      	ldrb	r3, [r4, #2]
 8005c2c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8005c30:	78e3      	ldrb	r3, [r4, #3]
 8005c32:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8005c36:	ab02      	add	r3, sp, #8
 8005c38:	e027      	b.n	8005c8a <etharp_output+0x11a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f7ff fe55 	bl	80058ec <etharp_output_to_arp_index>
 8005c42:	e02b      	b.n	8005c9c <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8005c44:	3201      	adds	r2, #1
 8005c46:	b252      	sxtb	r2, r2
 8005c48:	2a09      	cmp	r2, #9
 8005c4a:	dc17      	bgt.n	8005c7c <etharp_output+0x10c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005c4c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005c50:	00d9      	lsls	r1, r3, #3
 8005c52:	4b16      	ldr	r3, [pc, #88]	; (8005cac <etharp_output+0x13c>)
 8005c54:	440b      	add	r3, r1
 8005c56:	7d1b      	ldrb	r3, [r3, #20]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d9f3      	bls.n	8005c44 <etharp_output+0xd4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8005c5c:	6820      	ldr	r0, [r4, #0]
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <etharp_output+0x13c>)
 8005c60:	440b      	add	r3, r1
 8005c62:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005c64:	4298      	cmp	r0, r3
 8005c66:	d1ed      	bne.n	8005c44 <etharp_output+0xd4>
        ETHARP_SET_HINT(netif, i);
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <etharp_output+0x138>)
 8005c6c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4628      	mov	r0, r5
 8005c72:	f7ff fe3b 	bl	80058ec <etharp_output_to_arp_index>
 8005c76:	e011      	b.n	8005c9c <etharp_output+0x12c>
 8005c78:	2200      	movs	r2, #0
 8005c7a:	e7e5      	b.n	8005c48 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 8005c7c:	4632      	mov	r2, r6
 8005c7e:	4621      	mov	r1, r4
 8005c80:	4628      	mov	r0, r5
 8005c82:	f7ff fe9d 	bl	80059c0 <etharp_query>
 8005c86:	e009      	b.n	8005c9c <etharp_output+0x12c>
    dest = (const struct eth_addr *)&ethbroadcast;
 8005c88:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <etharp_output+0x154>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8005c8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c8e:	9200      	str	r2, [sp, #0]
 8005c90:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8005c94:	4631      	mov	r1, r6
 8005c96:	4628      	mov	r0, r5
 8005c98:	f005 fdb6 	bl	800b808 <ethernet_output>
}
 8005c9c:	b004      	add	sp, #16
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
 8005ca0:	f06f 0003 	mvn.w	r0, #3
 8005ca4:	e7fa      	b.n	8005c9c <etharp_output+0x12c>
 8005ca6:	bf00      	nop
 8005ca8:	20003e78 	.word	0x20003e78
 8005cac:	20003d88 	.word	0x20003d88
 8005cb0:	0800cf4c 	.word	0x0800cf4c
 8005cb4:	0800d07c 	.word	0x0800d07c
 8005cb8:	0800c8d0 	.word	0x0800c8d0
 8005cbc:	0800d054 	.word	0x0800d054
 8005cc0:	0800cfdc 	.word	0x0800cfdc
 8005cc4:	0800e7a0 	.word	0x0800e7a0

08005cc8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8005cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ccc:	b086      	sub	sp, #24
 8005cce:	4606      	mov	r6, r0
 8005cd0:	4688      	mov	r8, r1
 8005cd2:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2124      	movs	r1, #36	; 0x24
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f001 fbd3 	bl	8007484 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d037      	beq.n	8005d52 <icmp_send_response+0x8a>
 8005ce2:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005ce4:	8943      	ldrh	r3, [r0, #10]
 8005ce6:	2b23      	cmp	r3, #35	; 0x23
 8005ce8:	d936      	bls.n	8005d58 <icmp_send_response+0x90>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005cea:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8005cee:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8005cf0:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 8005cf4:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	7123      	strb	r3, [r4, #4]
 8005cfa:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8005cfc:	71a3      	strb	r3, [r4, #6]
 8005cfe:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005d00:	686f      	ldr	r7, [r5, #4]
 8005d02:	6873      	ldr	r3, [r6, #4]
 8005d04:	681e      	ldr	r6, [r3, #0]
 8005d06:	6858      	ldr	r0, [r3, #4]
 8005d08:	6899      	ldr	r1, [r3, #8]
 8005d0a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005d0e:	60be      	str	r6, [r7, #8]
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	6139      	str	r1, [r7, #16]
 8005d14:	f8c7 c014 	str.w	ip, [r7, #20]
 8005d18:	691e      	ldr	r6, [r3, #16]
 8005d1a:	6958      	ldr	r0, [r3, #20]
 8005d1c:	6999      	ldr	r1, [r3, #24]
 8005d1e:	61be      	str	r6, [r7, #24]
 8005d20:	61f8      	str	r0, [r7, #28]
 8005d22:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005d24:	f8de 300c 	ldr.w	r3, [lr, #12]
 8005d28:	a806      	add	r0, sp, #24
 8005d2a:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005d2e:	f000 f8cb 	bl	8005ec8 <ip4_route>
#endif
  if (netif != NULL) {
 8005d32:	b158      	cbz	r0, 8005d4c <icmp_send_response+0x84>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005d34:	2100      	movs	r1, #0
 8005d36:	70a1      	strb	r1, [r4, #2]
 8005d38:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005d3a:	9002      	str	r0, [sp, #8]
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	9100      	str	r1, [sp, #0]
 8005d42:	23ff      	movs	r3, #255	; 0xff
 8005d44:	aa05      	add	r2, sp, #20
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 fa64 	bl	8006214 <ip4_output_if>
  }
  pbuf_free(q);
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f001 fb2d 	bl	80073ac <pbuf_free>
}
 8005d52:	b006      	add	sp, #24
 8005d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005d58:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <icmp_send_response+0xa0>)
 8005d5a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005d5e:	4903      	ldr	r1, [pc, #12]	; (8005d6c <icmp_send_response+0xa4>)
 8005d60:	4803      	ldr	r0, [pc, #12]	; (8005d70 <icmp_send_response+0xa8>)
 8005d62:	f006 fc12 	bl	800c58a <iprintf>
 8005d66:	e7c0      	b.n	8005cea <icmp_send_response+0x22>
 8005d68:	0800d194 	.word	0x0800d194
 8005d6c:	0800d1cc 	.word	0x0800d1cc
 8005d70:	0800c8d0 	.word	0x0800c8d0

08005d74 <icmp_input>:
{
 8005d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8005d7c:	4b47      	ldr	r3, [pc, #284]	; (8005e9c <icmp_input+0x128>)
 8005d7e:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8005d80:	7834      	ldrb	r4, [r6, #0]
 8005d82:	f004 040f 	and.w	r4, r4, #15
 8005d86:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8005d88:	2c13      	cmp	r4, #19
 8005d8a:	d915      	bls.n	8005db8 <icmp_input+0x44>
 8005d8c:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 8005d8e:	8943      	ldrh	r3, [r0, #10]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d911      	bls.n	8005db8 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8005d94:	6843      	ldr	r3, [r0, #4]
 8005d96:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d15d      	bne.n	8005e58 <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005d9c:	4b3f      	ldr	r3, [pc, #252]	; (8005e9c <icmp_input+0x128>)
 8005d9e:	6958      	ldr	r0, [r3, #20]
 8005da0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8005da4:	2be0      	cmp	r3, #224	; 0xe0
 8005da6:	d023      	beq.n	8005df0 <icmp_input+0x7c>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8005da8:	4b3c      	ldr	r3, [pc, #240]	; (8005e9c <icmp_input+0x128>)
 8005daa:	6819      	ldr	r1, [r3, #0]
 8005dac:	f000 fa47 	bl	800623e <ip4_addr_isbroadcast_u32>
 8005db0:	b9f0      	cbnz	r0, 8005df0 <icmp_input+0x7c>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8005db2:	892b      	ldrh	r3, [r5, #8]
 8005db4:	2b07      	cmp	r3, #7
 8005db6:	d805      	bhi.n	8005dc4 <icmp_input+0x50>
  pbuf_free(p);
 8005db8:	4628      	mov	r0, r5
 8005dba:	f001 faf7 	bl	80073ac <pbuf_free>
}
 8005dbe:	b004      	add	sp, #16
 8005dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8005dc4:	f104 010e 	add.w	r1, r4, #14
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f001 fae5 	bl	8007398 <pbuf_header>
 8005dce:	b3a8      	cbz	r0, 8005e3c <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8005dd0:	8929      	ldrh	r1, [r5, #8]
 8005dd2:	4421      	add	r1, r4
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	b289      	uxth	r1, r1
 8005dd8:	2002      	movs	r0, #2
 8005dda:	f001 fb53 	bl	8007484 <pbuf_alloc>
      if (r == NULL) {
 8005dde:	4680      	mov	r8, r0
 8005de0:	b130      	cbz	r0, 8005df0 <icmp_input+0x7c>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8005de2:	8942      	ldrh	r2, [r0, #10]
 8005de4:	f104 0308 	add.w	r3, r4, #8
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d205      	bcs.n	8005df8 <icmp_input+0x84>
        pbuf_free(r);
 8005dec:	f001 fade 	bl	80073ac <pbuf_free>
  pbuf_free(p);
 8005df0:	4628      	mov	r0, r5
 8005df2:	f001 fadb 	bl	80073ac <pbuf_free>
  return;
 8005df6:	e7e2      	b.n	8005dbe <icmp_input+0x4a>
      MEMCPY(r->payload, iphdr_in, hlen);
 8005df8:	4622      	mov	r2, r4
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	6840      	ldr	r0, [r0, #4]
 8005dfe:	f006 fcda 	bl	800c7b6 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8005e02:	4261      	negs	r1, r4
 8005e04:	4640      	mov	r0, r8
 8005e06:	f001 fac7 	bl	8007398 <pbuf_header>
 8005e0a:	b148      	cbz	r0, 8005e20 <icmp_input+0xac>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8005e0c:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <icmp_input+0x12c>)
 8005e0e:	22af      	movs	r2, #175	; 0xaf
 8005e10:	4924      	ldr	r1, [pc, #144]	; (8005ea4 <icmp_input+0x130>)
 8005e12:	4825      	ldr	r0, [pc, #148]	; (8005ea8 <icmp_input+0x134>)
 8005e14:	f006 fbb9 	bl	800c58a <iprintf>
        pbuf_free(r);
 8005e18:	4640      	mov	r0, r8
 8005e1a:	f001 fac7 	bl	80073ac <pbuf_free>
        goto icmperr;
 8005e1e:	e7e7      	b.n	8005df0 <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
 8005e20:	4629      	mov	r1, r5
 8005e22:	4640      	mov	r0, r8
 8005e24:	f001 fce8 	bl	80077f8 <pbuf_copy>
 8005e28:	b118      	cbz	r0, 8005e32 <icmp_input+0xbe>
        pbuf_free(r);
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	f001 fabe 	bl	80073ac <pbuf_free>
        goto icmperr;
 8005e30:	e7de      	b.n	8005df0 <icmp_input+0x7c>
      pbuf_free(p);
 8005e32:	4628      	mov	r0, r5
 8005e34:	f001 faba 	bl	80073ac <pbuf_free>
      p = r;
 8005e38:	4645      	mov	r5, r8
 8005e3a:	e007      	b.n	8005e4c <icmp_input+0xd8>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8005e3c:	f5c4 417f 	rsb	r1, r4, #65280	; 0xff00
 8005e40:	31f2      	adds	r1, #242	; 0xf2
 8005e42:	b209      	sxth	r1, r1
 8005e44:	4628      	mov	r0, r5
 8005e46:	f001 faa7 	bl	8007398 <pbuf_header>
 8005e4a:	b948      	cbnz	r0, 8005e60 <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 8005e4c:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4628      	mov	r0, r5
 8005e52:	f001 faa1 	bl	8007398 <pbuf_header>
 8005e56:	b150      	cbz	r0, 8005e6e <icmp_input+0xfa>
  pbuf_free(p);
 8005e58:	4628      	mov	r0, r5
 8005e5a:	f001 faa7 	bl	80073ac <pbuf_free>
  return;
 8005e5e:	e7ae      	b.n	8005dbe <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8005e60:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <icmp_input+0x12c>)
 8005e62:	22c0      	movs	r2, #192	; 0xc0
 8005e64:	4911      	ldr	r1, [pc, #68]	; (8005eac <icmp_input+0x138>)
 8005e66:	4810      	ldr	r0, [pc, #64]	; (8005ea8 <icmp_input+0x134>)
 8005e68:	f006 fb8f 	bl	800c58a <iprintf>
        goto icmperr;
 8005e6c:	e7c0      	b.n	8005df0 <icmp_input+0x7c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8005e6e:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 8005e70:	490a      	ldr	r1, [pc, #40]	; (8005e9c <icmp_input+0x128>)
 8005e72:	694b      	ldr	r3, [r1, #20]
 8005e74:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005e76:	690b      	ldr	r3, [r1, #16]
 8005e78:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 8005e7e:	70b2      	strb	r2, [r6, #2]
 8005e80:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8005e82:	23ff      	movs	r3, #255	; 0xff
 8005e84:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8005e86:	7282      	strb	r2, [r0, #10]
 8005e88:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8005e8a:	9702      	str	r7, [sp, #8]
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	9001      	str	r0, [sp, #4]
 8005e90:	9200      	str	r2, [sp, #0]
 8005e92:	3114      	adds	r1, #20
 8005e94:	4628      	mov	r0, r5
 8005e96:	f000 f9bd 	bl	8006214 <ip4_output_if>
 8005e9a:	e7dd      	b.n	8005e58 <icmp_input+0xe4>
 8005e9c:	20003f64 	.word	0x20003f64
 8005ea0:	0800d194 	.word	0x0800d194
 8005ea4:	0800d128 	.word	0x0800d128
 8005ea8:	0800c8d0 	.word	0x0800c8d0
 8005eac:	0800d160 	.word	0x0800d160

08005eb0 <icmp_dest_unreach>:
{
 8005eb0:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 8005eb2:	460a      	mov	r2, r1
 8005eb4:	2103      	movs	r1, #3
 8005eb6:	f7ff ff07 	bl	8005cc8 <icmp_send_response>
 8005eba:	bd08      	pop	{r3, pc}

08005ebc <icmp_time_exceeded>:
{
 8005ebc:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 8005ebe:	460a      	mov	r2, r1
 8005ec0:	210b      	movs	r1, #11
 8005ec2:	f7ff ff01 	bl	8005cc8 <icmp_send_response>
 8005ec6:	bd08      	pop	{r3, pc}

08005ec8 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005ec8:	4b25      	ldr	r3, [pc, #148]	; (8005f60 <ip4_route+0x98>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	e02b      	b.n	8005f26 <ip4_route+0x5e>
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	b1ab      	cbz	r3, 8005efe <ip4_route+0x36>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005ed2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005ed6:	f002 0105 	and.w	r1, r2, #5
 8005eda:	2905      	cmp	r1, #5
 8005edc:	d1f7      	bne.n	8005ece <ip4_route+0x6>
 8005ede:	6859      	ldr	r1, [r3, #4]
 8005ee0:	2900      	cmp	r1, #0
 8005ee2:	d0f4      	beq.n	8005ece <ip4_route+0x6>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8005ee4:	6804      	ldr	r4, [r0, #0]
 8005ee6:	689d      	ldr	r5, [r3, #8]
 8005ee8:	4061      	eors	r1, r4
 8005eea:	4229      	tst	r1, r5
 8005eec:	d016      	beq.n	8005f1c <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8005eee:	f012 0f02 	tst.w	r2, #2
 8005ef2:	d1ec      	bne.n	8005ece <ip4_route+0x6>
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	4294      	cmp	r4, r2
 8005ef8:	d1e9      	bne.n	8005ece <ip4_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
 8005efa:	4618      	mov	r0, r3
 8005efc:	e00a      	b.n	8005f14 <ip4_route+0x4c>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005efe:	4a19      	ldr	r2, [pc, #100]	; (8005f64 <ip4_route+0x9c>)
 8005f00:	6810      	ldr	r0, [r2, #0]
 8005f02:	b138      	cbz	r0, 8005f14 <ip4_route+0x4c>
 8005f04:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8005f08:	f002 0205 	and.w	r2, r2, #5
 8005f0c:	2a05      	cmp	r2, #5
 8005f0e:	d107      	bne.n	8005f20 <ip4_route+0x58>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8005f10:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005f12:	b10a      	cbz	r2, 8005f18 <ip4_route+0x50>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8005f14:	bc30      	pop	{r4, r5}
 8005f16:	4770      	bx	lr
    return NULL;
 8005f18:	4618      	mov	r0, r3
 8005f1a:	e7fb      	b.n	8005f14 <ip4_route+0x4c>
        return netif;
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	e7f9      	b.n	8005f14 <ip4_route+0x4c>
    return NULL;
 8005f20:	4618      	mov	r0, r3
 8005f22:	e7f7      	b.n	8005f14 <ip4_route+0x4c>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	b153      	cbz	r3, 8005f3e <ip4_route+0x76>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005f28:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005f2c:	f002 0105 	and.w	r1, r2, #5
 8005f30:	2905      	cmp	r1, #5
 8005f32:	d1f7      	bne.n	8005f24 <ip4_route+0x5c>
 8005f34:	6859      	ldr	r1, [r3, #4]
 8005f36:	2900      	cmp	r1, #0
 8005f38:	d0f4      	beq.n	8005f24 <ip4_route+0x5c>
{
 8005f3a:	b430      	push	{r4, r5}
 8005f3c:	e7d2      	b.n	8005ee4 <ip4_route+0x1c>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005f3e:	4a09      	ldr	r2, [pc, #36]	; (8005f64 <ip4_route+0x9c>)
 8005f40:	6810      	ldr	r0, [r2, #0]
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d0e7      	beq.n	8005f16 <ip4_route+0x4e>
 8005f46:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8005f4a:	f002 0205 	and.w	r2, r2, #5
 8005f4e:	2a05      	cmp	r2, #5
 8005f50:	d104      	bne.n	8005f5c <ip4_route+0x94>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8005f52:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005f54:	2a00      	cmp	r2, #0
 8005f56:	d1de      	bne.n	8005f16 <ip4_route+0x4e>
    return NULL;
 8005f58:	4618      	mov	r0, r3
 8005f5a:	4770      	bx	lr
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	4770      	bx	lr
 8005f60:	20007224 	.word	0x20007224
 8005f64:	20007228 	.word	0x20007228

08005f68 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f6c:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005f6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8005f72:	f898 3000 	ldrb.w	r3, [r8]
 8005f76:	091a      	lsrs	r2, r3, #4
 8005f78:	2a04      	cmp	r2, #4
 8005f7a:	d004      	beq.n	8005f86 <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8005f7c:	f001 fa16 	bl	80073ac <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8005f80:	2000      	movs	r0, #0
 8005f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f86:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
 8005f88:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 8005f8c:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005f8e:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8005f92:	f7ff f9ef 	bl	8005374 <lwip_htons>
 8005f96:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8005f98:	892b      	ldrh	r3, [r5, #8]
 8005f9a:	4298      	cmp	r0, r3
 8005f9c:	d316      	bcc.n	8005fcc <ip4_input+0x64>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005f9e:	896b      	ldrh	r3, [r5, #10]
 8005fa0:	429e      	cmp	r6, r3
 8005fa2:	d818      	bhi.n	8005fd6 <ip4_input+0x6e>
 8005fa4:	892b      	ldrh	r3, [r5, #8]
 8005fa6:	429c      	cmp	r4, r3
 8005fa8:	d815      	bhi.n	8005fd6 <ip4_input+0x6e>
 8005faa:	2e13      	cmp	r6, #19
 8005fac:	d913      	bls.n	8005fd6 <ip4_input+0x6e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8005fae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005fb2:	4a59      	ldr	r2, [pc, #356]	; (8006118 <ip4_input+0x1b0>)
 8005fb4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005fb6:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8005fba:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fc0:	2be0      	cmp	r3, #224	; 0xe0
 8005fc2:	d00c      	beq.n	8005fde <ip4_input+0x76>
 8005fc4:	463c      	mov	r4, r7
 8005fc6:	f04f 0901 	mov.w	r9, #1
 8005fca:	e015      	b.n	8005ff8 <ip4_input+0x90>
    pbuf_realloc(p, iphdr_len);
 8005fcc:	4601      	mov	r1, r0
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f001 fb40 	bl	8007654 <pbuf_realloc>
 8005fd4:	e7e3      	b.n	8005f9e <ip4_input+0x36>
    pbuf_free(p);
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f001 f9e8 	bl	80073ac <pbuf_free>
    return ERR_OK;
 8005fdc:	e7d0      	b.n	8005f80 <ip4_input+0x18>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8005fde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fe2:	f013 0f01 	tst.w	r3, #1
 8005fe6:	d024      	beq.n	8006032 <ip4_input+0xca>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	bb23      	cbnz	r3, 8006036 <ip4_input+0xce>
      netif = NULL;
 8005fec:	2400      	movs	r4, #0
 8005fee:	e025      	b.n	800603c <ip4_input+0xd4>
        netif = netif->next;
 8005ff0:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 8005ff2:	42bc      	cmp	r4, r7
 8005ff4:	d01b      	beq.n	800602e <ip4_input+0xc6>
    } while (netif != NULL);
 8005ff6:	b30c      	cbz	r4, 800603c <ip4_input+0xd4>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005ff8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8005ffc:	f013 0f01 	tst.w	r3, #1
 8006000:	d009      	beq.n	8006016 <ip4_input+0xae>
 8006002:	6863      	ldr	r3, [r4, #4]
 8006004:	b13b      	cbz	r3, 8006016 <ip4_input+0xae>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006006:	4a44      	ldr	r2, [pc, #272]	; (8006118 <ip4_input+0x1b0>)
 8006008:	6950      	ldr	r0, [r2, #20]
 800600a:	4283      	cmp	r3, r0
 800600c:	d016      	beq.n	800603c <ip4_input+0xd4>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800600e:	4621      	mov	r1, r4
 8006010:	f000 f915 	bl	800623e <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006014:	b990      	cbnz	r0, 800603c <ip4_input+0xd4>
      if (first) {
 8006016:	f1b9 0f00 	cmp.w	r9, #0
 800601a:	d0e9      	beq.n	8005ff0 <ip4_input+0x88>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800601c:	4b3e      	ldr	r3, [pc, #248]	; (8006118 <ip4_input+0x1b0>)
 800601e:	7d1b      	ldrb	r3, [r3, #20]
 8006020:	2b7f      	cmp	r3, #127	; 0x7f
 8006022:	d00a      	beq.n	800603a <ip4_input+0xd2>
        netif = netif_list;
 8006024:	4b3d      	ldr	r3, [pc, #244]	; (800611c <ip4_input+0x1b4>)
 8006026:	681c      	ldr	r4, [r3, #0]
        first = 0;
 8006028:	f04f 0900 	mov.w	r9, #0
 800602c:	e7e1      	b.n	8005ff2 <ip4_input+0x8a>
        netif = netif->next;
 800602e:	6824      	ldr	r4, [r4, #0]
 8006030:	e7e1      	b.n	8005ff6 <ip4_input+0x8e>
      netif = NULL;
 8006032:	2400      	movs	r4, #0
 8006034:	e002      	b.n	800603c <ip4_input+0xd4>
      netif = inp;
 8006036:	463c      	mov	r4, r7
 8006038:	e000      	b.n	800603c <ip4_input+0xd4>
          netif = NULL;
 800603a:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800603c:	4639      	mov	r1, r7
 800603e:	4b36      	ldr	r3, [pc, #216]	; (8006118 <ip4_input+0x1b0>)
 8006040:	6918      	ldr	r0, [r3, #16]
 8006042:	f000 f8fc 	bl	800623e <ip4_addr_isbroadcast_u32>
 8006046:	2800      	cmp	r0, #0
 8006048:	d146      	bne.n	80060d8 <ip4_input+0x170>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800604a:	4b33      	ldr	r3, [pc, #204]	; (8006118 <ip4_input+0x1b0>)
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006052:	2be0      	cmp	r3, #224	; 0xe0
 8006054:	d040      	beq.n	80060d8 <ip4_input+0x170>
  if (netif == NULL) {
 8006056:	2c00      	cmp	r4, #0
 8006058:	d042      	beq.n	80060e0 <ip4_input+0x178>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800605a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800605e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006062:	b29b      	uxth	r3, r3
 8006064:	b13b      	cbz	r3, 8006076 <ip4_input+0x10e>
    p = ip4_reass(p);
 8006066:	4628      	mov	r0, r5
 8006068:	f000 fb38 	bl	80066dc <ip4_reass>
    if (p == NULL) {
 800606c:	4605      	mov	r5, r0
 800606e:	2800      	cmp	r0, #0
 8006070:	d086      	beq.n	8005f80 <ip4_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
 8006072:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 8006076:	4a28      	ldr	r2, [pc, #160]	; (8006118 <ip4_input+0x1b0>)
 8006078:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 800607a:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800607c:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8006080:	f898 3000 	ldrb.w	r3, [r8]
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800608c:	4271      	negs	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	f001 f982 	bl	8007398 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8006094:	f898 3009 	ldrb.w	r3, [r8, #9]
 8006098:	2b06      	cmp	r3, #6
 800609a:	d032      	beq.n	8006102 <ip4_input+0x19a>
 800609c:	2b11      	cmp	r3, #17
 800609e:	d023      	beq.n	80060e8 <ip4_input+0x180>
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d033      	beq.n	800610c <ip4_input+0x1a4>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80060a4:	4621      	mov	r1, r4
 80060a6:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <ip4_input+0x1b0>)
 80060a8:	6958      	ldr	r0, [r3, #20]
 80060aa:	f000 f8c8 	bl	800623e <ip4_addr_isbroadcast_u32>
 80060ae:	b978      	cbnz	r0, 80060d0 <ip4_input+0x168>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80060b0:	4b19      	ldr	r3, [pc, #100]	; (8006118 <ip4_input+0x1b0>)
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80060b8:	2be0      	cmp	r3, #224	; 0xe0
 80060ba:	d009      	beq.n	80060d0 <ip4_input+0x168>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	f001 f96f 	bl	80073a2 <pbuf_header_force>
        p->payload = iphdr;
 80060c4:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80060c8:	2102      	movs	r1, #2
 80060ca:	4628      	mov	r0, r5
 80060cc:	f7ff fef0 	bl	8005eb0 <icmp_dest_unreach>
      pbuf_free(p);
 80060d0:	4628      	mov	r0, r5
 80060d2:	f001 f96b 	bl	80073ac <pbuf_free>
 80060d6:	e00b      	b.n	80060f0 <ip4_input+0x188>
      pbuf_free(p);
 80060d8:	4628      	mov	r0, r5
 80060da:	f001 f967 	bl	80073ac <pbuf_free>
      return ERR_OK;
 80060de:	e74f      	b.n	8005f80 <ip4_input+0x18>
    pbuf_free(p);
 80060e0:	4628      	mov	r0, r5
 80060e2:	f001 f963 	bl	80073ac <pbuf_free>
    return ERR_OK;
 80060e6:	e74b      	b.n	8005f80 <ip4_input+0x18>
      udp_input(p, inp);
 80060e8:	4639      	mov	r1, r7
 80060ea:	4628      	mov	r0, r5
 80060ec:	f005 fa08 	bl	800b500 <udp_input>
  ip_data.current_netif = NULL;
 80060f0:	4b09      	ldr	r3, [pc, #36]	; (8006118 <ip4_input+0x1b0>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80060f6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80060f8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80060fa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80060fc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80060fe:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 8006100:	e73e      	b.n	8005f80 <ip4_input+0x18>
      tcp_input(p, inp);
 8006102:	4639      	mov	r1, r7
 8006104:	4628      	mov	r0, r5
 8006106:	f003 fdd9 	bl	8009cbc <tcp_input>
      break;
 800610a:	e7f1      	b.n	80060f0 <ip4_input+0x188>
      icmp_input(p, inp);
 800610c:	4639      	mov	r1, r7
 800610e:	4628      	mov	r0, r5
 8006110:	f7ff fe30 	bl	8005d74 <icmp_input>
      break;
 8006114:	e7ec      	b.n	80060f0 <ip4_input+0x188>
 8006116:	bf00      	nop
 8006118:	20003f64 	.word	0x20003f64
 800611c:	20007224 	.word	0x20007224

08006120 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8006120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006124:	b083      	sub	sp, #12
 8006126:	4605      	mov	r5, r0
 8006128:	4689      	mov	r9, r1
 800612a:	4616      	mov	r6, r2
 800612c:	4698      	mov	r8, r3
 800612e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8006130:	89c3      	ldrh	r3, [r0, #14]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d006      	beq.n	8006144 <ip4_output_if_src+0x24>
 8006136:	4b31      	ldr	r3, [pc, #196]	; (80061fc <ip4_output_if_src+0xdc>)
 8006138:	f240 3233 	movw	r2, #819	; 0x333
 800613c:	4930      	ldr	r1, [pc, #192]	; (8006200 <ip4_output_if_src+0xe0>)
 800613e:	4831      	ldr	r0, [pc, #196]	; (8006204 <ip4_output_if_src+0xe4>)
 8006140:	f006 fa23 	bl	800c58a <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8006144:	2e00      	cmp	r6, #0
 8006146:	d04a      	beq.n	80061de <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8006148:	2114      	movs	r1, #20
 800614a:	4628      	mov	r0, r5
 800614c:	f001 f924 	bl	8007398 <pbuf_header>
 8006150:	2800      	cmp	r0, #0
 8006152:	d150      	bne.n	80061f6 <ip4_output_if_src+0xd6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 8006154:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006156:	896b      	ldrh	r3, [r5, #10]
 8006158:	2b13      	cmp	r3, #19
 800615a:	d934      	bls.n	80061c6 <ip4_output_if_src+0xa6>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800615c:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006160:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8006164:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8006166:	6833      	ldr	r3, [r6, #0]
 8006168:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800616a:	2345      	movs	r3, #69	; 0x45
 800616c:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800616e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8006172:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006174:	8928      	ldrh	r0, [r5, #8]
 8006176:	f7ff f8fd 	bl	8005374 <lwip_htons>
 800617a:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800617c:	2300      	movs	r3, #0
 800617e:	71a3      	strb	r3, [r4, #6]
 8006180:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006182:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8006210 <ip4_output_if_src+0xf0>
 8006186:	f8b8 0000 	ldrh.w	r0, [r8]
 800618a:	f7ff f8f3 	bl	8005374 <lwip_htons>
 800618e:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8006190:	f8b8 3000 	ldrh.w	r3, [r8]
 8006194:	3301      	adds	r3, #1
 8006196:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 800619a:	f1b9 0f00 	cmp.w	r9, #0
 800619e:	d01a      	beq.n	80061d6 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80061a0:	f8d9 3000 	ldr.w	r3, [r9]
 80061a4:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80061a6:	2300      	movs	r3, #0
 80061a8:	72a3      	strb	r3, [r4, #10]
 80061aa:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80061ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061ae:	b113      	cbz	r3, 80061b6 <ip4_output_if_src+0x96>
 80061b0:	892a      	ldrh	r2, [r5, #8]
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d319      	bcc.n	80061ea <ip4_output_if_src+0xca>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4632      	mov	r2, r6
 80061ba:	4629      	mov	r1, r5
 80061bc:	4638      	mov	r0, r7
 80061be:	4798      	blx	r3
}
 80061c0:	b003      	add	sp, #12
 80061c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80061c6:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <ip4_output_if_src+0xdc>)
 80061c8:	f240 3261 	movw	r2, #865	; 0x361
 80061cc:	490e      	ldr	r1, [pc, #56]	; (8006208 <ip4_output_if_src+0xe8>)
 80061ce:	480d      	ldr	r0, [pc, #52]	; (8006204 <ip4_output_if_src+0xe4>)
 80061d0:	f006 f9db 	bl	800c58a <iprintf>
 80061d4:	e7c2      	b.n	800615c <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80061d6:	4b0d      	ldr	r3, [pc, #52]	; (800620c <ip4_output_if_src+0xec>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60e3      	str	r3, [r4, #12]
 80061dc:	e7e3      	b.n	80061a6 <ip4_output_if_src+0x86>
    iphdr = (struct ip_hdr *)p->payload;
 80061de:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	ae02      	add	r6, sp, #8
 80061e4:	f846 3d04 	str.w	r3, [r6, #-4]!
 80061e8:	e7e0      	b.n	80061ac <ip4_output_if_src+0x8c>
    return ip4_frag(p, netif, dest);
 80061ea:	4632      	mov	r2, r6
 80061ec:	4639      	mov	r1, r7
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 fb48 	bl	8006884 <ip4_frag>
 80061f4:	e7e4      	b.n	80061c0 <ip4_output_if_src+0xa0>
      return ERR_BUF;
 80061f6:	f06f 0001 	mvn.w	r0, #1
 80061fa:	e7e1      	b.n	80061c0 <ip4_output_if_src+0xa0>
 80061fc:	0800d1f8 	.word	0x0800d1f8
 8006200:	0800d22c 	.word	0x0800d22c
 8006204:	0800c8d0 	.word	0x0800c8d0
 8006208:	0800d238 	.word	0x0800d238
 800620c:	0800d268 	.word	0x0800d268
 8006210:	20003e7a 	.word	0x20003e7a

08006214 <ip4_output_if>:
{
 8006214:	b530      	push	{r4, r5, lr}
 8006216:	b085      	sub	sp, #20
 8006218:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 800621a:	4615      	mov	r5, r2
 800621c:	b11a      	cbz	r2, 8006226 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800621e:	b109      	cbz	r1, 8006224 <ip4_output_if+0x10>
 8006220:	680a      	ldr	r2, [r1, #0]
 8006222:	b902      	cbnz	r2, 8006226 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 8006224:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8006226:	9402      	str	r4, [sp, #8]
 8006228:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800622c:	9201      	str	r2, [sp, #4]
 800622e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8006232:	9200      	str	r2, [sp, #0]
 8006234:	462a      	mov	r2, r5
 8006236:	f7ff ff73 	bl	8006120 <ip4_output_if_src>
}
 800623a:	b005      	add	sp, #20
 800623c:	bd30      	pop	{r4, r5, pc}

0800623e <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800623e:	1e43      	subs	r3, r0, #1
 8006240:	f113 0f03 	cmn.w	r3, #3
 8006244:	d811      	bhi.n	800626a <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8006246:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 800624a:	f013 0f02 	tst.w	r3, #2
 800624e:	d00e      	beq.n	800626e <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8006250:	684b      	ldr	r3, [r1, #4]
 8006252:	4298      	cmp	r0, r3
 8006254:	d00d      	beq.n	8006272 <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8006256:	688a      	ldr	r2, [r1, #8]
 8006258:	4043      	eors	r3, r0
 800625a:	4213      	tst	r3, r2
 800625c:	d10b      	bne.n	8006276 <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800625e:	43d2      	mvns	r2, r2
 8006260:	ea32 0300 	bics.w	r3, r2, r0
 8006264:	d009      	beq.n	800627a <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8006266:	2000      	movs	r0, #0
 8006268:	4770      	bx	lr
    return 1;
 800626a:	2001      	movs	r0, #1
 800626c:	4770      	bx	lr
    return 0;
 800626e:	2000      	movs	r0, #0
 8006270:	4770      	bx	lr
    return 0;
 8006272:	2000      	movs	r0, #0
 8006274:	4770      	bx	lr
    return 0;
 8006276:	2000      	movs	r0, #0
 8006278:	4770      	bx	lr
    return 1;
 800627a:	2001      	movs	r0, #1
  }
}
 800627c:	4770      	bx	lr
	...

08006280 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8006284:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <ip_reass_dequeue_datagram+0x38>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4283      	cmp	r3, r0
 800628a:	d008      	beq.n	800629e <ip_reass_dequeue_datagram+0x1e>
 800628c:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800628e:	b151      	cbz	r1, 80062a6 <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8006294:	4621      	mov	r1, r4
 8006296:	2004      	movs	r0, #4
 8006298:	f000 feb2 	bl	8007000 <memp_free>
 800629c:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800629e:	6802      	ldr	r2, [r0, #0]
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <ip_reass_dequeue_datagram+0x38>)
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	e7f6      	b.n	8006294 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <ip_reass_dequeue_datagram+0x3c>)
 80062a8:	f240 1245 	movw	r2, #325	; 0x145
 80062ac:	4904      	ldr	r1, [pc, #16]	; (80062c0 <ip_reass_dequeue_datagram+0x40>)
 80062ae:	4805      	ldr	r0, [pc, #20]	; (80062c4 <ip_reass_dequeue_datagram+0x44>)
 80062b0:	f006 f96b 	bl	800c58a <iprintf>
 80062b4:	e7ec      	b.n	8006290 <ip_reass_dequeue_datagram+0x10>
 80062b6:	bf00      	nop
 80062b8:	20003e80 	.word	0x20003e80
 80062bc:	0800d35c 	.word	0x0800d35c
 80062c0:	0800d398 	.word	0x0800d398
 80062c4:	0800c8d0 	.word	0x0800c8d0

080062c8 <ip_reass_free_complete_datagram>:
{
 80062c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062cc:	4680      	mov	r8, r0
 80062ce:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80062d0:	4281      	cmp	r1, r0
 80062d2:	d015      	beq.n	8006300 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 80062d4:	f1b9 0f00 	cmp.w	r9, #0
 80062d8:	d009      	beq.n	80062ee <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80062da:	f8d9 3000 	ldr.w	r3, [r9]
 80062de:	4598      	cmp	r8, r3
 80062e0:	d005      	beq.n	80062ee <ip_reass_free_complete_datagram+0x26>
 80062e2:	4b35      	ldr	r3, [pc, #212]	; (80063b8 <ip_reass_free_complete_datagram+0xf0>)
 80062e4:	22ad      	movs	r2, #173	; 0xad
 80062e6:	4935      	ldr	r1, [pc, #212]	; (80063bc <ip_reass_free_complete_datagram+0xf4>)
 80062e8:	4835      	ldr	r0, [pc, #212]	; (80063c0 <ip_reass_free_complete_datagram+0xf8>)
 80062ea:	f006 f94e 	bl	800c58a <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80062ee:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80062f2:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 80062f4:	889a      	ldrh	r2, [r3, #4]
 80062f6:	b152      	cbz	r2, 800630e <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 80062f8:	2600      	movs	r6, #0
  p = ipr->p;
 80062fa:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 80062fe:	e032      	b.n	8006366 <ip_reass_free_complete_datagram+0x9e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8006300:	4b2d      	ldr	r3, [pc, #180]	; (80063b8 <ip_reass_free_complete_datagram+0xf0>)
 8006302:	22ab      	movs	r2, #171	; 0xab
 8006304:	492f      	ldr	r1, [pc, #188]	; (80063c4 <ip_reass_free_complete_datagram+0xfc>)
 8006306:	482e      	ldr	r0, [pc, #184]	; (80063c0 <ip_reass_free_complete_datagram+0xf8>)
 8006308:	f006 f93f 	bl	800c58a <iprintf>
 800630c:	e7e2      	b.n	80062d4 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8006314:	4643      	mov	r3, r8
 8006316:	6862      	ldr	r2, [r4, #4]
 8006318:	f853 1f08 	ldr.w	r1, [r3, #8]!
 800631c:	685e      	ldr	r6, [r3, #4]
 800631e:	689d      	ldr	r5, [r3, #8]
 8006320:	68d8      	ldr	r0, [r3, #12]
 8006322:	6011      	str	r1, [r2, #0]
 8006324:	6056      	str	r6, [r2, #4]
 8006326:	6095      	str	r5, [r2, #8]
 8006328:	60d0      	str	r0, [r2, #12]
 800632a:	6919      	ldr	r1, [r3, #16]
 800632c:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800632e:	2101      	movs	r1, #1
 8006330:	4620      	mov	r0, r4
 8006332:	f7ff fdc3 	bl	8005ebc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8006336:	4620      	mov	r0, r4
 8006338:	f001 f9fe 	bl	8007738 <pbuf_clen>
 800633c:	4606      	mov	r6, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800633e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8006342:	da03      	bge.n	800634c <ip_reass_free_complete_datagram+0x84>
    pbuf_free(p);
 8006344:	4620      	mov	r0, r4
 8006346:	f001 f831 	bl	80073ac <pbuf_free>
 800634a:	e7d6      	b.n	80062fa <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800634c:	4b1a      	ldr	r3, [pc, #104]	; (80063b8 <ip_reass_free_complete_datagram+0xf0>)
 800634e:	22bc      	movs	r2, #188	; 0xbc
 8006350:	491d      	ldr	r1, [pc, #116]	; (80063c8 <ip_reass_free_complete_datagram+0x100>)
 8006352:	481b      	ldr	r0, [pc, #108]	; (80063c0 <ip_reass_free_complete_datagram+0xf8>)
 8006354:	f006 f919 	bl	800c58a <iprintf>
 8006358:	e7f4      	b.n	8006344 <ip_reass_free_complete_datagram+0x7c>
    pbufs_freed += clen;
 800635a:	4435      	add	r5, r6
 800635c:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 800635e:	4620      	mov	r0, r4
 8006360:	f001 f824 	bl	80073ac <pbuf_free>
    p = iprh->next_pbuf;
 8006364:	463c      	mov	r4, r7
  while (p != NULL) {
 8006366:	b184      	cbz	r4, 800638a <ip_reass_free_complete_datagram+0xc2>
    iprh = (struct ip_reass_helper *)p->payload;
 8006368:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 800636a:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 800636c:	4620      	mov	r0, r4
 800636e:	f001 f9e3 	bl	8007738 <pbuf_clen>
 8006372:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006374:	1833      	adds	r3, r6, r0
 8006376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637a:	dbee      	blt.n	800635a <ip_reass_free_complete_datagram+0x92>
 800637c:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <ip_reass_free_complete_datagram+0xf0>)
 800637e:	22cc      	movs	r2, #204	; 0xcc
 8006380:	4911      	ldr	r1, [pc, #68]	; (80063c8 <ip_reass_free_complete_datagram+0x100>)
 8006382:	480f      	ldr	r0, [pc, #60]	; (80063c0 <ip_reass_free_complete_datagram+0xf8>)
 8006384:	f006 f901 	bl	800c58a <iprintf>
 8006388:	e7e7      	b.n	800635a <ip_reass_free_complete_datagram+0x92>
  ip_reass_dequeue_datagram(ipr, prev);
 800638a:	4649      	mov	r1, r9
 800638c:	4640      	mov	r0, r8
 800638e:	f7ff ff77 	bl	8006280 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8006392:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <ip_reass_free_complete_datagram+0x104>)
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	429e      	cmp	r6, r3
 8006398:	d806      	bhi.n	80063a8 <ip_reass_free_complete_datagram+0xe0>
  ip_reass_pbufcount -= pbufs_freed;
 800639a:	4a0c      	ldr	r2, [pc, #48]	; (80063cc <ip_reass_free_complete_datagram+0x104>)
 800639c:	8813      	ldrh	r3, [r2, #0]
 800639e:	1b9b      	subs	r3, r3, r6
 80063a0:	8013      	strh	r3, [r2, #0]
}
 80063a2:	4630      	mov	r0, r6
 80063a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80063a8:	4b03      	ldr	r3, [pc, #12]	; (80063b8 <ip_reass_free_complete_datagram+0xf0>)
 80063aa:	22d2      	movs	r2, #210	; 0xd2
 80063ac:	4908      	ldr	r1, [pc, #32]	; (80063d0 <ip_reass_free_complete_datagram+0x108>)
 80063ae:	4804      	ldr	r0, [pc, #16]	; (80063c0 <ip_reass_free_complete_datagram+0xf8>)
 80063b0:	f006 f8eb 	bl	800c58a <iprintf>
 80063b4:	e7f1      	b.n	800639a <ip_reass_free_complete_datagram+0xd2>
 80063b6:	bf00      	nop
 80063b8:	0800d35c 	.word	0x0800d35c
 80063bc:	0800d3c0 	.word	0x0800d3c0
 80063c0:	0800c8d0 	.word	0x0800c8d0
 80063c4:	0800d3b4 	.word	0x0800d3b4
 80063c8:	0800d3d4 	.word	0x0800d3d4
 80063cc:	20003e7c 	.word	0x20003e7c
 80063d0:	0800d3f4 	.word	0x0800d3f4

080063d4 <ip_reass_remove_oldest_datagram>:
{
 80063d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d8:	4605      	mov	r5, r0
 80063da:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 80063dc:	2600      	movs	r6, #0
 80063de:	e02a      	b.n	8006436 <ip_reass_remove_oldest_datagram+0x62>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80063e6:	4562      	cmp	r2, ip
 80063e8:	d110      	bne.n	800640c <ip_reass_remove_oldest_datagram+0x38>
 80063ea:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 80063ee:	88aa      	ldrh	r2, [r5, #4]
 80063f0:	4594      	cmp	ip, r2
 80063f2:	d10b      	bne.n	800640c <ip_reass_remove_oldest_datagram+0x38>
 80063f4:	e001      	b.n	80063fa <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 80063f6:	4671      	mov	r1, lr
          oldest = r;
 80063f8:	4618      	mov	r0, r3
      if (r->next != NULL) {
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	b18a      	cbz	r2, 8006422 <ip_reass_remove_oldest_datagram+0x4e>
 80063fe:	469e      	mov	lr, r3
 8006400:	4613      	mov	r3, r2
    while (r != NULL) {
 8006402:	b183      	cbz	r3, 8006426 <ip_reass_remove_oldest_datagram+0x52>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8006404:	68ea      	ldr	r2, [r5, #12]
 8006406:	695f      	ldr	r7, [r3, #20]
 8006408:	4297      	cmp	r7, r2
 800640a:	d0e9      	beq.n	80063e0 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 800640c:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800640e:	2800      	cmp	r0, #0
 8006410:	d0f1      	beq.n	80063f6 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 8006412:	f893 c01f 	ldrb.w	ip, [r3, #31]
 8006416:	7fc2      	ldrb	r2, [r0, #31]
 8006418:	4594      	cmp	ip, r2
 800641a:	d8ee      	bhi.n	80063fa <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800641c:	4671      	mov	r1, lr
          oldest = r;
 800641e:	4618      	mov	r0, r3
 8006420:	e7eb      	b.n	80063fa <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 8006422:	4673      	mov	r3, lr
 8006424:	e7eb      	b.n	80063fe <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 8006426:	b110      	cbz	r0, 800642e <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8006428:	f7ff ff4e 	bl	80062c8 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800642c:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800642e:	4546      	cmp	r6, r8
 8006430:	da08      	bge.n	8006444 <ip_reass_remove_oldest_datagram+0x70>
 8006432:	2c01      	cmp	r4, #1
 8006434:	dd06      	ble.n	8006444 <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 8006436:	4b05      	ldr	r3, [pc, #20]	; (800644c <ip_reass_remove_oldest_datagram+0x78>)
 8006438:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 800643a:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800643c:	4621      	mov	r1, r4
    prev = NULL;
 800643e:	46a6      	mov	lr, r4
    oldest = NULL;
 8006440:	4620      	mov	r0, r4
    while (r != NULL) {
 8006442:	e7de      	b.n	8006402 <ip_reass_remove_oldest_datagram+0x2e>
}
 8006444:	4630      	mov	r0, r6
 8006446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800644a:	bf00      	nop
 800644c:	20003e80 	.word	0x20003e80

08006450 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8006450:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8006452:	4604      	mov	r4, r0
 8006454:	b120      	cbz	r0, 8006460 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 8006456:	4621      	mov	r1, r4
 8006458:	2005      	movs	r0, #5
 800645a:	f000 fdd1 	bl	8007000 <memp_free>
 800645e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8006460:	4b03      	ldr	r3, [pc, #12]	; (8006470 <ip_frag_free_pbuf_custom_ref+0x20>)
 8006462:	f240 22ae 	movw	r2, #686	; 0x2ae
 8006466:	4903      	ldr	r1, [pc, #12]	; (8006474 <ip_frag_free_pbuf_custom_ref+0x24>)
 8006468:	4803      	ldr	r0, [pc, #12]	; (8006478 <ip_frag_free_pbuf_custom_ref+0x28>)
 800646a:	f006 f88e 	bl	800c58a <iprintf>
 800646e:	e7f2      	b.n	8006456 <ip_frag_free_pbuf_custom_ref+0x6>
 8006470:	0800d35c 	.word	0x0800d35c
 8006474:	0800cb70 	.word	0x0800cb70
 8006478:	0800c8d0 	.word	0x0800c8d0

0800647c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800647c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800647e:	4604      	mov	r4, r0
 8006480:	b138      	cbz	r0, 8006492 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8006482:	6960      	ldr	r0, [r4, #20]
 8006484:	b108      	cbz	r0, 800648a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8006486:	f000 ff91 	bl	80073ac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800648a:	4620      	mov	r0, r4
 800648c:	f7ff ffe0 	bl	8006450 <ip_frag_free_pbuf_custom_ref>
 8006490:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8006492:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <ipfrag_free_pbuf_custom+0x28>)
 8006494:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8006498:	4903      	ldr	r1, [pc, #12]	; (80064a8 <ipfrag_free_pbuf_custom+0x2c>)
 800649a:	4804      	ldr	r0, [pc, #16]	; (80064ac <ipfrag_free_pbuf_custom+0x30>)
 800649c:	f006 f875 	bl	800c58a <iprintf>
 80064a0:	e7ef      	b.n	8006482 <ipfrag_free_pbuf_custom+0x6>
 80064a2:	bf00      	nop
 80064a4:	0800d35c 	.word	0x0800d35c
 80064a8:	0800d410 	.word	0x0800d410
 80064ac:	0800c8d0 	.word	0x0800c8d0

080064b0 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 80064b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b4:	4680      	mov	r8, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 80064ba:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80064bc:	8860      	ldrh	r0, [r4, #2]
 80064be:	f7fe ff59 	bl	8005374 <lwip_htons>
 80064c2:	7826      	ldrb	r6, [r4, #0]
 80064c4:	f006 060f 	and.w	r6, r6, #15
 80064c8:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 80064cc:	b2b6      	uxth	r6, r6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80064ce:	88e0      	ldrh	r0, [r4, #6]
 80064d0:	f7fe ff50 	bl	8005374 <lwip_htons>
 80064d4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80064d8:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 80064da:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 80064dc:	2400      	movs	r4, #0
 80064de:	702c      	strb	r4, [r5, #0]
 80064e0:	706c      	strb	r4, [r5, #1]
 80064e2:	70ac      	strb	r4, [r5, #2]
 80064e4:	70ec      	strb	r4, [r5, #3]
  iprh->start = offset;
 80064e6:	80a8      	strh	r0, [r5, #4]
  iprh->end = offset + len;
 80064e8:	eb06 0e00 	add.w	lr, r6, r0
 80064ec:	fa1f fe8e 	uxth.w	lr, lr
 80064f0:	f8a5 e006 	strh.w	lr, [r5, #6]
  for (q = ipr->p; q != NULL;) {
 80064f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
  int valid = 1;
 80064f8:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 80064fa:	e033      	b.n	8006564 <ip_reass_chain_frag_into_datagram_and_validate+0xb4>
      iprh->next_pbuf = q;
 80064fc:	6029      	str	r1, [r5, #0]
      if (iprh_prev != NULL) {
 80064fe:	b34c      	cbz	r4, 8006554 <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006500:	88e2      	ldrh	r2, [r4, #6]
 8006502:	4290      	cmp	r0, r2
 8006504:	d37e      	bcc.n	8006604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
 8006506:	889b      	ldrh	r3, [r3, #4]
 8006508:	459e      	cmp	lr, r3
 800650a:	d87b      	bhi.n	8006604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        iprh_prev->next_pbuf = new_p;
 800650c:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 800650e:	88ab      	ldrh	r3, [r5, #4]
 8006510:	429a      	cmp	r2, r3
 8006512:	d000      	beq.n	8006516 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
          valid = 0;
 8006514:	2600      	movs	r6, #0
  if (q == NULL) {
 8006516:	2900      	cmp	r1, #0
 8006518:	d036      	beq.n	8006588 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800651a:	f1b9 0f00 	cmp.w	r9, #0
 800651e:	d104      	bne.n	800652a <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
 8006520:	f898 301e 	ldrb.w	r3, [r8, #30]
 8006524:	f013 0f01 	tst.w	r3, #1
 8006528:	d07a      	beq.n	8006620 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
    if (valid) {
 800652a:	2e00      	cmp	r6, #0
 800652c:	d067      	beq.n	80065fe <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800652e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d060      	beq.n	80065f8 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 8006536:	6858      	ldr	r0, [r3, #4]
 8006538:	8883      	ldrh	r3, [r0, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d15e      	bne.n	80065fc <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        q = iprh->next_pbuf;
 800653e:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 8006540:	2a00      	cmp	r2, #0
 8006542:	d044      	beq.n	80065ce <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
          iprh = (struct ip_reass_helper*)q->payload;
 8006544:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 8006546:	88e9      	ldrh	r1, [r5, #6]
 8006548:	889a      	ldrh	r2, [r3, #4]
 800654a:	4291      	cmp	r1, r2
 800654c:	d13d      	bne.n	80065ca <ip_reass_chain_frag_into_datagram_and_validate+0x11a>
          q = iprh->next_pbuf;
 800654e:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 8006550:	461d      	mov	r5, r3
 8006552:	e7f5      	b.n	8006540 <ip_reass_chain_frag_into_datagram_and_validate+0x90>
        if (iprh->end > iprh_tmp->start) {
 8006554:	889b      	ldrh	r3, [r3, #4]
 8006556:	459e      	cmp	lr, r3
 8006558:	d854      	bhi.n	8006604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        ipr->p = new_p;
 800655a:	f8c8 7004 	str.w	r7, [r8, #4]
 800655e:	e7da      	b.n	8006516 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    q = iprh_tmp->next_pbuf;
 8006560:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 8006562:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 8006564:	2900      	cmp	r1, #0
 8006566:	d0d6      	beq.n	8006516 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8006568:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800656a:	889a      	ldrh	r2, [r3, #4]
 800656c:	4290      	cmp	r0, r2
 800656e:	d3c5      	bcc.n	80064fc <ip_reass_chain_frag_into_datagram_and_validate+0x4c>
    } else if (iprh->start == iprh_tmp->start) {
 8006570:	4290      	cmp	r0, r2
 8006572:	d047      	beq.n	8006604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start < iprh_tmp->end) {
 8006574:	88d9      	ldrh	r1, [r3, #6]
 8006576:	4288      	cmp	r0, r1
 8006578:	d344      	bcc.n	8006604 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      if (iprh_prev != NULL) {
 800657a:	2c00      	cmp	r4, #0
 800657c:	d0f0      	beq.n	8006560 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
        if (iprh_prev->end != iprh_tmp->start) {
 800657e:	88e1      	ldrh	r1, [r4, #6]
 8006580:	428a      	cmp	r2, r1
 8006582:	d0ed      	beq.n	8006560 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
          valid = 0;
 8006584:	2600      	movs	r6, #0
 8006586:	e7eb      	b.n	8006560 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
    if (iprh_prev != NULL) {
 8006588:	b194      	cbz	r4, 80065b0 <ip_reass_chain_frag_into_datagram_and_validate+0x100>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800658a:	88e2      	ldrh	r2, [r4, #6]
 800658c:	88ab      	ldrh	r3, [r5, #4]
 800658e:	429a      	cmp	r2, r3
 8006590:	d806      	bhi.n	80065a0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
      iprh_prev->next_pbuf = new_p;
 8006592:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 8006594:	88e2      	ldrh	r2, [r4, #6]
 8006596:	88ab      	ldrh	r3, [r5, #4]
 8006598:	429a      	cmp	r2, r3
 800659a:	d0be      	beq.n	800651a <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
        valid = 0;
 800659c:	2600      	movs	r6, #0
 800659e:	e7bc      	b.n	800651a <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80065a0:	4b21      	ldr	r3, [pc, #132]	; (8006628 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 80065a2:	f240 12ab 	movw	r2, #427	; 0x1ab
 80065a6:	4921      	ldr	r1, [pc, #132]	; (800662c <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 80065a8:	4821      	ldr	r0, [pc, #132]	; (8006630 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 80065aa:	f005 ffee 	bl	800c58a <iprintf>
 80065ae:	e7f0      	b.n	8006592 <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80065b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80065b4:	b133      	cbz	r3, 80065c4 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
 80065b6:	4b1c      	ldr	r3, [pc, #112]	; (8006628 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 80065b8:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80065bc:	491d      	ldr	r1, [pc, #116]	; (8006634 <ip_reass_chain_frag_into_datagram_and_validate+0x184>)
 80065be:	481c      	ldr	r0, [pc, #112]	; (8006630 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 80065c0:	f005 ffe3 	bl	800c58a <iprintf>
      ipr->p = new_p;
 80065c4:	f8c8 7004 	str.w	r7, [r8, #4]
 80065c8:	e7a7      	b.n	800651a <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
          iprh = (struct ip_reass_helper*)q->payload;
 80065ca:	461d      	mov	r5, r3
            valid = 0;
 80065cc:	2600      	movs	r6, #0
        if (valid) {
 80065ce:	b1b6      	cbz	r6, 80065fe <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 80065d0:	4285      	cmp	r5, r0
 80065d2:	d009      	beq.n	80065e8 <ip_reass_chain_frag_into_datagram_and_validate+0x138>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80065d4:	682b      	ldr	r3, [r5, #0]
 80065d6:	b193      	cbz	r3, 80065fe <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 80065d8:	4b13      	ldr	r3, [pc, #76]	; (8006628 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 80065da:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80065de:	4916      	ldr	r1, [pc, #88]	; (8006638 <ip_reass_chain_frag_into_datagram_and_validate+0x188>)
 80065e0:	4813      	ldr	r0, [pc, #76]	; (8006630 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 80065e2:	f005 ffd2 	bl	800c58a <iprintf>
 80065e6:	e00a      	b.n	80065fe <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 80065e8:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 80065ea:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80065ee:	4913      	ldr	r1, [pc, #76]	; (800663c <ip_reass_chain_frag_into_datagram_and_validate+0x18c>)
 80065f0:	480f      	ldr	r0, [pc, #60]	; (8006630 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 80065f2:	f005 ffca 	bl	800c58a <iprintf>
 80065f6:	e7ed      	b.n	80065d4 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        valid = 0;
 80065f8:	2600      	movs	r6, #0
 80065fa:	e000      	b.n	80065fe <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 80065fc:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80065fe:	4630      	mov	r0, r6
 8006600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8006604:	4638      	mov	r0, r7
 8006606:	f001 f897 	bl	8007738 <pbuf_clen>
 800660a:	4a0d      	ldr	r2, [pc, #52]	; (8006640 <ip_reass_chain_frag_into_datagram_and_validate+0x190>)
 800660c:	8813      	ldrh	r3, [r2, #0]
 800660e:	1a18      	subs	r0, r3, r0
 8006610:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8006612:	4638      	mov	r0, r7
 8006614:	f000 feca 	bl	80073ac <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006618:	f04f 30ff 	mov.w	r0, #4294967295
 800661c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006620:	4648      	mov	r0, r9
}
 8006622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006626:	bf00      	nop
 8006628:	0800d35c 	.word	0x0800d35c
 800662c:	0800d2d0 	.word	0x0800d2d0
 8006630:	0800c8d0 	.word	0x0800c8d0
 8006634:	0800d2f0 	.word	0x0800d2f0
 8006638:	0800d338 	.word	0x0800d338
 800663c:	0800d328 	.word	0x0800d328
 8006640:	20003e7c 	.word	0x20003e7c

08006644 <ip_frag_alloc_pbuf_custom_ref>:
{
 8006644:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8006646:	2005      	movs	r0, #5
 8006648:	f000 fcc0 	bl	8006fcc <memp_malloc>
}
 800664c:	bd08      	pop	{r3, pc}
	...

08006650 <ip_reass_enqueue_new_datagram>:
{
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	4605      	mov	r5, r0
 8006654:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8006656:	2004      	movs	r0, #4
 8006658:	f000 fcb8 	bl	8006fcc <memp_malloc>
  if (ipr == NULL) {
 800665c:	4604      	mov	r4, r0
 800665e:	b1b0      	cbz	r0, 800668e <ip_reass_enqueue_new_datagram+0x3e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8006660:	2220      	movs	r2, #32
 8006662:	2100      	movs	r1, #0
 8006664:	4620      	mov	r0, r4
 8006666:	f006 f8b1 	bl	800c7cc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800666a:	2303      	movs	r3, #3
 800666c:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800666e:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <ip_reass_enqueue_new_datagram+0x5c>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 8006674:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8006676:	682a      	ldr	r2, [r5, #0]
 8006678:	686e      	ldr	r6, [r5, #4]
 800667a:	68a8      	ldr	r0, [r5, #8]
 800667c:	68e9      	ldr	r1, [r5, #12]
 800667e:	60a2      	str	r2, [r4, #8]
 8006680:	60e6      	str	r6, [r4, #12]
 8006682:	6120      	str	r0, [r4, #16]
 8006684:	6161      	str	r1, [r4, #20]
 8006686:	692a      	ldr	r2, [r5, #16]
 8006688:	61a2      	str	r2, [r4, #24]
}
 800668a:	4620      	mov	r0, r4
 800668c:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800668e:	4631      	mov	r1, r6
 8006690:	4628      	mov	r0, r5
 8006692:	f7ff fe9f 	bl	80063d4 <ip_reass_remove_oldest_datagram>
 8006696:	4286      	cmp	r6, r0
 8006698:	dd02      	ble.n	80066a0 <ip_reass_enqueue_new_datagram+0x50>
    if (ipr == NULL)
 800669a:	2c00      	cmp	r4, #0
 800669c:	d1e0      	bne.n	8006660 <ip_reass_enqueue_new_datagram+0x10>
 800669e:	e7f4      	b.n	800668a <ip_reass_enqueue_new_datagram+0x3a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80066a0:	2004      	movs	r0, #4
 80066a2:	f000 fc93 	bl	8006fcc <memp_malloc>
 80066a6:	4604      	mov	r4, r0
 80066a8:	e7f7      	b.n	800669a <ip_reass_enqueue_new_datagram+0x4a>
 80066aa:	bf00      	nop
 80066ac:	20003e80 	.word	0x20003e80

080066b0 <ip_reass_tmr>:
{
 80066b0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80066b2:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <ip_reass_tmr+0x28>)
 80066b4:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 80066b6:	2400      	movs	r4, #0
  while (r != NULL) {
 80066b8:	e004      	b.n	80066c4 <ip_reass_tmr+0x14>
      r = r->next;
 80066ba:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 80066bc:	4621      	mov	r1, r4
 80066be:	f7ff fe03 	bl	80062c8 <ip_reass_free_complete_datagram>
      r = r->next;
 80066c2:	4628      	mov	r0, r5
  while (r != NULL) {
 80066c4:	b138      	cbz	r0, 80066d6 <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 80066c6:	7fc3      	ldrb	r3, [r0, #31]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0f6      	beq.n	80066ba <ip_reass_tmr+0xa>
      r->timer--;
 80066cc:	3b01      	subs	r3, #1
 80066ce:	77c3      	strb	r3, [r0, #31]
      prev = r;
 80066d0:	4604      	mov	r4, r0
      r = r->next;
 80066d2:	6800      	ldr	r0, [r0, #0]
 80066d4:	e7f6      	b.n	80066c4 <ip_reass_tmr+0x14>
}
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	20003e80 	.word	0x20003e80

080066dc <ip4_reass>:
{
 80066dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e0:	4681      	mov	r9, r0
  fraghdr = (struct ip_hdr*)p->payload;
 80066e2:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80066e4:	782b      	ldrb	r3, [r5, #0]
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	2b05      	cmp	r3, #5
 80066ec:	d124      	bne.n	8006738 <ip4_reass+0x5c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80066ee:	88e8      	ldrh	r0, [r5, #6]
 80066f0:	f7fe fe40 	bl	8005374 <lwip_htons>
 80066f4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80066f8:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80066fa:	8868      	ldrh	r0, [r5, #2]
 80066fc:	f7fe fe3a 	bl	8005374 <lwip_htons>
 8006700:	782e      	ldrb	r6, [r5, #0]
 8006702:	f006 060f 	and.w	r6, r6, #15
 8006706:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 800670a:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 800670c:	4648      	mov	r0, r9
 800670e:	f001 f813 	bl	8007738 <pbuf_clen>
 8006712:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8006714:	4b59      	ldr	r3, [pc, #356]	; (800687c <ip4_reass+0x1a0>)
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	4403      	add	r3, r0
 800671a:	2b0a      	cmp	r3, #10
 800671c:	dc02      	bgt.n	8006724 <ip4_reass+0x48>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800671e:	4b58      	ldr	r3, [pc, #352]	; (8006880 <ip4_reass+0x1a4>)
 8006720:	681c      	ldr	r4, [r3, #0]
 8006722:	e011      	b.n	8006748 <ip4_reass+0x6c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006724:	4601      	mov	r1, r0
 8006726:	4628      	mov	r0, r5
 8006728:	f7ff fe54 	bl	80063d4 <ip_reass_remove_oldest_datagram>
 800672c:	b120      	cbz	r0, 8006738 <ip4_reass+0x5c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800672e:	4b53      	ldr	r3, [pc, #332]	; (800687c <ip4_reass+0x1a0>)
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006734:	2b0a      	cmp	r3, #10
 8006736:	ddf2      	ble.n	800671e <ip4_reass+0x42>
  pbuf_free(p);
 8006738:	4648      	mov	r0, r9
 800673a:	f000 fe37 	bl	80073ac <pbuf_free>
  return NULL;
 800673e:	2700      	movs	r7, #0
}
 8006740:	4638      	mov	r0, r7
 8006742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006746:	6824      	ldr	r4, [r4, #0]
 8006748:	b15c      	cbz	r4, 8006762 <ip4_reass+0x86>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800674a:	6962      	ldr	r2, [r4, #20]
 800674c:	68eb      	ldr	r3, [r5, #12]
 800674e:	429a      	cmp	r2, r3
 8006750:	d1f9      	bne.n	8006746 <ip4_reass+0x6a>
 8006752:	69a2      	ldr	r2, [r4, #24]
 8006754:	692b      	ldr	r3, [r5, #16]
 8006756:	429a      	cmp	r2, r3
 8006758:	d1f5      	bne.n	8006746 <ip4_reass+0x6a>
 800675a:	89a2      	ldrh	r2, [r4, #12]
 800675c:	88ab      	ldrh	r3, [r5, #4]
 800675e:	429a      	cmp	r2, r3
 8006760:	d1f1      	bne.n	8006746 <ip4_reass+0x6a>
  if (ipr == NULL) {
 8006762:	2c00      	cmp	r4, #0
 8006764:	d048      	beq.n	80067f8 <ip4_reass+0x11c>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006766:	88e8      	ldrh	r0, [r5, #6]
 8006768:	f7fe fe04 	bl	8005374 <lwip_htons>
 800676c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006770:	2800      	cmp	r0, #0
 8006772:	d049      	beq.n	8006808 <ip4_reass+0x12c>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8006774:	88ed      	ldrh	r5, [r5, #6]
 8006776:	f005 0520 	and.w	r5, r5, #32
 800677a:	2d00      	cmp	r5, #0
 800677c:	bf0c      	ite	eq
 800677e:	2201      	moveq	r2, #1
 8006780:	2200      	movne	r2, #0
  if (is_last) {
 8006782:	d107      	bne.n	8006794 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8006784:	19bb      	adds	r3, r7, r6
 8006786:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8006788:	429f      	cmp	r7, r3
 800678a:	d8d5      	bhi.n	8006738 <ip4_reass+0x5c>
 800678c:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 8006790:	428b      	cmp	r3, r1
 8006792:	d8d1      	bhi.n	8006738 <ip4_reass+0x5c>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8006794:	4649      	mov	r1, r9
 8006796:	4620      	mov	r0, r4
 8006798:	f7ff fe8a 	bl	80064b0 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800679c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80067a0:	d0ca      	beq.n	8006738 <ip4_reass+0x5c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80067a2:	4b36      	ldr	r3, [pc, #216]	; (800687c <ip4_reass+0x1a0>)
 80067a4:	881a      	ldrh	r2, [r3, #0]
 80067a6:	4490      	add	r8, r2
 80067a8:	f8a3 8000 	strh.w	r8, [r3]
  if (is_last) {
 80067ac:	b92d      	cbnz	r5, 80067ba <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 80067ae:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 80067b0:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80067b2:	7fa3      	ldrb	r3, [r4, #30]
 80067b4:	f043 0301 	orr.w	r3, r3, #1
 80067b8:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80067ba:	2801      	cmp	r0, #1
 80067bc:	d15b      	bne.n	8006876 <ip4_reass+0x19a>
    ipr->datagram_len += IP_HLEN;
 80067be:	8ba3      	ldrh	r3, [r4, #28]
 80067c0:	3314      	adds	r3, #20
 80067c2:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80067c4:	6863      	ldr	r3, [r4, #4]
 80067c6:	685e      	ldr	r6, [r3, #4]
 80067c8:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80067ca:	4623      	mov	r3, r4
 80067cc:	f853 2f08 	ldr.w	r2, [r3, #8]!
 80067d0:	685f      	ldr	r7, [r3, #4]
 80067d2:	6898      	ldr	r0, [r3, #8]
 80067d4:	68d9      	ldr	r1, [r3, #12]
 80067d6:	6032      	str	r2, [r6, #0]
 80067d8:	6077      	str	r7, [r6, #4]
 80067da:	60b0      	str	r0, [r6, #8]
 80067dc:	60f1      	str	r1, [r6, #12]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80067e2:	8ba0      	ldrh	r0, [r4, #28]
 80067e4:	f7fe fdc6 	bl	8005374 <lwip_htons>
 80067e8:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80067ea:	2300      	movs	r3, #0
 80067ec:	71b3      	strb	r3, [r6, #6]
 80067ee:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80067f0:	72b3      	strb	r3, [r6, #10]
 80067f2:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 80067f4:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 80067f6:	e026      	b.n	8006846 <ip4_reass+0x16a>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80067f8:	4641      	mov	r1, r8
 80067fa:	4628      	mov	r0, r5
 80067fc:	f7ff ff28 	bl	8006650 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 8006800:	4604      	mov	r4, r0
 8006802:	2800      	cmp	r0, #0
 8006804:	d1b6      	bne.n	8006774 <ip4_reass+0x98>
 8006806:	e797      	b.n	8006738 <ip4_reass+0x5c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006808:	89e0      	ldrh	r0, [r4, #14]
 800680a:	f7fe fdb3 	bl	8005374 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800680e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006812:	2800      	cmp	r0, #0
 8006814:	d0ae      	beq.n	8006774 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006816:	682a      	ldr	r2, [r5, #0]
 8006818:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800681c:	68a8      	ldr	r0, [r5, #8]
 800681e:	68e9      	ldr	r1, [r5, #12]
 8006820:	60a2      	str	r2, [r4, #8]
 8006822:	f8c4 e00c 	str.w	lr, [r4, #12]
 8006826:	6120      	str	r0, [r4, #16]
 8006828:	6161      	str	r1, [r4, #20]
 800682a:	692a      	ldr	r2, [r5, #16]
 800682c:	61a2      	str	r2, [r4, #24]
 800682e:	e7a1      	b.n	8006774 <ip4_reass+0x98>
      iprh = (struct ip_reass_helper*)r->payload;
 8006830:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 8006832:	f06f 0113 	mvn.w	r1, #19
 8006836:	4628      	mov	r0, r5
 8006838:	f000 fdae 	bl	8007398 <pbuf_header>
      pbuf_cat(p, r);
 800683c:	4629      	mov	r1, r5
 800683e:	4638      	mov	r0, r7
 8006840:	f000 ffa0 	bl	8007784 <pbuf_cat>
      r = iprh->next_pbuf;
 8006844:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 8006846:	2d00      	cmp	r5, #0
 8006848:	d1f2      	bne.n	8006830 <ip4_reass+0x154>
    if (ipr == reassdatagrams) {
 800684a:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <ip4_reass+0x1a4>)
 800684c:	6819      	ldr	r1, [r3, #0]
 800684e:	428c      	cmp	r4, r1
 8006850:	d005      	beq.n	800685e <ip4_reass+0x182>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006852:	b129      	cbz	r1, 8006860 <ip4_reass+0x184>
        if (ipr_prev->next == ipr) {
 8006854:	680b      	ldr	r3, [r1, #0]
 8006856:	429c      	cmp	r4, r3
 8006858:	d002      	beq.n	8006860 <ip4_reass+0x184>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800685a:	4619      	mov	r1, r3
 800685c:	e7f9      	b.n	8006852 <ip4_reass+0x176>
      ipr_prev = NULL;
 800685e:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006860:	4620      	mov	r0, r4
 8006862:	f7ff fd0d 	bl	8006280 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8006866:	4638      	mov	r0, r7
 8006868:	f000 ff66 	bl	8007738 <pbuf_clen>
 800686c:	4a03      	ldr	r2, [pc, #12]	; (800687c <ip4_reass+0x1a0>)
 800686e:	8813      	ldrh	r3, [r2, #0]
 8006870:	1a18      	subs	r0, r3, r0
 8006872:	8010      	strh	r0, [r2, #0]
    return p;
 8006874:	e764      	b.n	8006740 <ip4_reass+0x64>
  return NULL;
 8006876:	2700      	movs	r7, #0
 8006878:	e762      	b.n	8006740 <ip4_reass+0x64>
 800687a:	bf00      	nop
 800687c:	20003e7c 	.word	0x20003e7c
 8006880:	20003e80 	.word	0x20003e80

08006884 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006888:	b08d      	sub	sp, #52	; 0x34
 800688a:	4605      	mov	r5, r0
 800688c:	9107      	str	r1, [sp, #28]
 800688e:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006890:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8006892:	3b14      	subs	r3, #20
 8006894:	d420      	bmi.n	80068d8 <ip4_frag+0x54>
 8006896:	10db      	asrs	r3, r3, #3
 8006898:	9309      	str	r3, [sp, #36]	; 0x24
 800689a:	b29b      	uxth	r3, r3
 800689c:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800689e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80068a2:	f89a 3000 	ldrb.w	r3, [sl]
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	2b05      	cmp	r3, #5
 80068ac:	d116      	bne.n	80068dc <ip4_frag+0x58>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80068ae:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80068b2:	f7fe fd5f 	bl	8005374 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 80068b6:	f3c0 030c 	ubfx	r3, r0, #0, #13
 80068ba:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80068bc:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80068c0:	d116      	bne.n	80068f0 <ip4_frag+0x6c>

  left = p->tot_len - IP_HLEN;
 80068c2:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80068c6:	f1a9 0914 	sub.w	r9, r9, #20
 80068ca:	fa1f fb89 	uxth.w	fp, r9
  u16_t poff = IP_HLEN;
 80068ce:	f04f 0814 	mov.w	r8, #20
  u16_t newpbuflen = 0;
 80068d2:	2400      	movs	r4, #0
 80068d4:	46d9      	mov	r9, fp

  while (left) {
 80068d6:	e08c      	b.n	80069f2 <ip4_frag+0x16e>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80068d8:	3307      	adds	r3, #7
 80068da:	e7dc      	b.n	8006896 <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80068dc:	4b5e      	ldr	r3, [pc, #376]	; (8006a58 <ip4_frag+0x1d4>)
 80068de:	f240 22e1 	movw	r2, #737	; 0x2e1
 80068e2:	495e      	ldr	r1, [pc, #376]	; (8006a5c <ip4_frag+0x1d8>)
 80068e4:	485e      	ldr	r0, [pc, #376]	; (8006a60 <ip4_frag+0x1dc>)
 80068e6:	f005 fe50 	bl	800c58a <iprintf>
 80068ea:	f06f 0005 	mvn.w	r0, #5
 80068ee:	e043      	b.n	8006978 <ip4_frag+0xf4>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80068f0:	4b59      	ldr	r3, [pc, #356]	; (8006a58 <ip4_frag+0x1d4>)
 80068f2:	f240 22e6 	movw	r2, #742	; 0x2e6
 80068f6:	495b      	ldr	r1, [pc, #364]	; (8006a64 <ip4_frag+0x1e0>)
 80068f8:	4859      	ldr	r0, [pc, #356]	; (8006a60 <ip4_frag+0x1dc>)
 80068fa:	f005 fe46 	bl	800c58a <iprintf>
 80068fe:	f06f 0005 	mvn.w	r0, #5
 8006902:	e039      	b.n	8006978 <ip4_frag+0xf4>
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006904:	4b54      	ldr	r3, [pc, #336]	; (8006a58 <ip4_frag+0x1d4>)
 8006906:	f240 3209 	movw	r2, #777	; 0x309
 800690a:	4957      	ldr	r1, [pc, #348]	; (8006a68 <ip4_frag+0x1e4>)
 800690c:	4854      	ldr	r0, [pc, #336]	; (8006a60 <ip4_frag+0x1dc>)
 800690e:	f005 fe3c 	bl	800c58a <iprintf>
 8006912:	e086      	b.n	8006a22 <ip4_frag+0x19e>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8006914:	f7ff fe96 	bl	8006644 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 8006918:	4607      	mov	r7, r0
 800691a:	b340      	cbz	r0, 800696e <ip4_frag+0xea>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 800691c:	686b      	ldr	r3, [r5, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800691e:	4443      	add	r3, r8
 8006920:	9401      	str	r4, [sp, #4]
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	4603      	mov	r3, r0
 8006926:	2202      	movs	r2, #2
 8006928:	4621      	mov	r1, r4
 800692a:	2004      	movs	r0, #4
 800692c:	f000 fcf8 	bl	8007320 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8006930:	9003      	str	r0, [sp, #12]
 8006932:	b320      	cbz	r0, 800697e <ip4_frag+0xfa>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8006934:	4628      	mov	r0, r5
 8006936:	f000 ff09 	bl	800774c <pbuf_ref>
      pcr->original = p;
 800693a:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800693c:	4b4b      	ldr	r3, [pc, #300]	; (8006a6c <ip4_frag+0x1e8>)
 800693e:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8006940:	9903      	ldr	r1, [sp, #12]
 8006942:	9804      	ldr	r0, [sp, #16]
 8006944:	f000 ff1e 	bl	8007784 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8006948:	1b36      	subs	r6, r6, r4
 800694a:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 800694c:	b116      	cbz	r6, 8006954 <ip4_frag+0xd0>
        poff = 0;
        p = p->next;
 800694e:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8006950:	f04f 0800 	mov.w	r8, #0
    while (left_to_copy) {
 8006954:	b1e6      	cbz	r6, 8006990 <ip4_frag+0x10c>
      u16_t plen = p->len - poff;
 8006956:	896c      	ldrh	r4, [r5, #10]
 8006958:	eba4 0408 	sub.w	r4, r4, r8
 800695c:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800695e:	42b4      	cmp	r4, r6
 8006960:	bf28      	it	cs
 8006962:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 8006964:	2c00      	cmp	r4, #0
 8006966:	d1d5      	bne.n	8006914 <ip4_frag+0x90>
        p = p->next;
 8006968:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 800696a:	46a0      	mov	r8, r4
        continue;
 800696c:	e7f2      	b.n	8006954 <ip4_frag+0xd0>
        pbuf_free(rambuf);
 800696e:	9804      	ldr	r0, [sp, #16]
 8006970:	f000 fd1c 	bl	80073ac <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8006974:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006978:	b00d      	add	sp, #52	; 0x34
 800697a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800697e:	4638      	mov	r0, r7
 8006980:	f7ff fd66 	bl	8006450 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8006984:	9804      	ldr	r0, [sp, #16]
 8006986:	f000 fd11 	bl	80073ac <pbuf_free>
  return ERR_MEM;
 800698a:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800698e:	e7f3      	b.n	8006978 <ip4_frag+0xf4>
    poff += newpbuflen;
 8006990:	44a0      	add	r8, r4
 8006992:	fa1f f888 	uxth.w	r8, r8
    last = (left <= netif->mtu - IP_HLEN);
 8006996:	9b07      	ldr	r3, [sp, #28]
 8006998:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800699a:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 800699c:	9a06      	ldr	r2, [sp, #24]
 800699e:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 80069a2:	9a08      	ldr	r2, [sp, #32]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	dd01      	ble.n	80069ac <ip4_frag+0x128>
      tmp = tmp | IP_MF;
 80069a8:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80069ac:	f7fe fce2 	bl	8005374 <lwip_htons>
 80069b0:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80069b4:	9e05      	ldr	r6, [sp, #20]
 80069b6:	f106 0014 	add.w	r0, r6, #20
 80069ba:	b280      	uxth	r0, r0
 80069bc:	f7fe fcda 	bl	8005374 <lwip_htons>
 80069c0:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80069c4:	2300      	movs	r3, #0
 80069c6:	f88b 300a 	strb.w	r3, [fp, #10]
 80069ca:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 80069ce:	9807      	ldr	r0, [sp, #28]
 80069d0:	6943      	ldr	r3, [r0, #20]
 80069d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069d4:	9f04      	ldr	r7, [sp, #16]
 80069d6:	4639      	mov	r1, r7
 80069d8:	4798      	blx	r3
    pbuf_free(rambuf);
 80069da:	4638      	mov	r0, r7
 80069dc:	f000 fce6 	bl	80073ac <pbuf_free>
    left -= fragsize;
 80069e0:	eba9 0306 	sub.w	r3, r9, r6
 80069e4:	fa1f f983 	uxth.w	r9, r3
    ofo += nfb;
 80069e8:	9b06      	ldr	r3, [sp, #24]
 80069ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ec:	4413      	add	r3, r2
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	9306      	str	r3, [sp, #24]
  while (left) {
 80069f2:	f1b9 0f00 	cmp.w	r9, #0
 80069f6:	d029      	beq.n	8006a4c <ip4_frag+0x1c8>
    fragsize = LWIP_MIN(left, nfb * 8);
 80069f8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	f8cd 9020 	str.w	r9, [sp, #32]
 8006a02:	454b      	cmp	r3, r9
 8006a04:	bfa8      	it	ge
 8006a06:	464b      	movge	r3, r9
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2114      	movs	r1, #20
 8006a10:	2002      	movs	r0, #2
 8006a12:	f000 fd37 	bl	8007484 <pbuf_alloc>
    if (rambuf == NULL) {
 8006a16:	9004      	str	r0, [sp, #16]
 8006a18:	b1d0      	cbz	r0, 8006a50 <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006a1a:	896b      	ldrh	r3, [r5, #10]
 8006a1c:	2b13      	cmp	r3, #19
 8006a1e:	f67f af71 	bls.w	8006904 <ip4_frag+0x80>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8006a22:	9f04      	ldr	r7, [sp, #16]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8da 2000 	ldr.w	r2, [sl]
 8006a2a:	f8da 6004 	ldr.w	r6, [sl, #4]
 8006a2e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8006a32:	f8da 100c 	ldr.w	r1, [sl, #12]
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	605e      	str	r6, [r3, #4]
 8006a3a:	6098      	str	r0, [r3, #8]
 8006a3c:	60d9      	str	r1, [r3, #12]
 8006a3e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8006a42:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006a44:	f8d7 b004 	ldr.w	fp, [r7, #4]
    left_to_copy = fragsize;
 8006a48:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 8006a4a:	e783      	b.n	8006954 <ip4_frag+0xd0>
  return ERR_OK;
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	e793      	b.n	8006978 <ip4_frag+0xf4>
  return ERR_MEM;
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	e790      	b.n	8006978 <ip4_frag+0xf4>
 8006a56:	bf00      	nop
 8006a58:	0800d35c 	.word	0x0800d35c
 8006a5c:	0800d26c 	.word	0x0800d26c
 8006a60:	0800c8d0 	.word	0x0800c8d0
 8006a64:	0800d294 	.word	0x0800d294
 8006a68:	0800d2b0 	.word	0x0800d2b0
 8006a6c:	0800647d 	.word	0x0800647d

08006a70 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006a70:	b510      	push	{r4, lr}
 8006a72:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006a74:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <plug_holes+0xbc>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4283      	cmp	r3, r0
 8006a7a:	d831      	bhi.n	8006ae0 <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006a7c:	4b2c      	ldr	r3, [pc, #176]	; (8006b30 <plug_holes+0xc0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	429c      	cmp	r4, r3
 8006a82:	d235      	bcs.n	8006af0 <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006a84:	7923      	ldrb	r3, [r4, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d13a      	bne.n	8006b00 <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006a8a:	8823      	ldrh	r3, [r4, #0]
 8006a8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a90:	d83e      	bhi.n	8006b10 <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8006a92:	4b26      	ldr	r3, [pc, #152]	; (8006b2c <plug_holes+0xbc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	8821      	ldrh	r1, [r4, #0]
 8006a98:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006a9a:	4294      	cmp	r4, r2
 8006a9c:	d00f      	beq.n	8006abe <plug_holes+0x4e>
 8006a9e:	7910      	ldrb	r0, [r2, #4]
 8006aa0:	b968      	cbnz	r0, 8006abe <plug_holes+0x4e>
 8006aa2:	4823      	ldr	r0, [pc, #140]	; (8006b30 <plug_holes+0xc0>)
 8006aa4:	6800      	ldr	r0, [r0, #0]
 8006aa6:	4282      	cmp	r2, r0
 8006aa8:	d009      	beq.n	8006abe <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006aaa:	4822      	ldr	r0, [pc, #136]	; (8006b34 <plug_holes+0xc4>)
 8006aac:	6800      	ldr	r0, [r0, #0]
 8006aae:	4282      	cmp	r2, r0
 8006ab0:	d036      	beq.n	8006b20 <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 8006ab2:	5a5a      	ldrh	r2, [r3, r1]
 8006ab4:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006ab6:	5a5a      	ldrh	r2, [r3, r1]
 8006ab8:	441a      	add	r2, r3
 8006aba:	1ae1      	subs	r1, r4, r3
 8006abc:	8051      	strh	r1, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006abe:	8861      	ldrh	r1, [r4, #2]
 8006ac0:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8006ac2:	4294      	cmp	r4, r2
 8006ac4:	d00b      	beq.n	8006ade <plug_holes+0x6e>
 8006ac6:	7910      	ldrb	r0, [r2, #4]
 8006ac8:	b948      	cbnz	r0, 8006ade <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006aca:	481a      	ldr	r0, [pc, #104]	; (8006b34 <plug_holes+0xc4>)
 8006acc:	6800      	ldr	r0, [r0, #0]
 8006ace:	4284      	cmp	r4, r0
 8006ad0:	d029      	beq.n	8006b26 <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 8006ad2:	8820      	ldrh	r0, [r4, #0]
 8006ad4:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8006ad6:	8821      	ldrh	r1, [r4, #0]
 8006ad8:	4419      	add	r1, r3
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	804b      	strh	r3, [r1, #2]
 8006ade:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006ae0:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <plug_holes+0xc8>)
 8006ae2:	f240 125d 	movw	r2, #349	; 0x15d
 8006ae6:	4915      	ldr	r1, [pc, #84]	; (8006b3c <plug_holes+0xcc>)
 8006ae8:	4815      	ldr	r0, [pc, #84]	; (8006b40 <plug_holes+0xd0>)
 8006aea:	f005 fd4e 	bl	800c58a <iprintf>
 8006aee:	e7c5      	b.n	8006a7c <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006af0:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <plug_holes+0xc8>)
 8006af2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006af6:	4913      	ldr	r1, [pc, #76]	; (8006b44 <plug_holes+0xd4>)
 8006af8:	4811      	ldr	r0, [pc, #68]	; (8006b40 <plug_holes+0xd0>)
 8006afa:	f005 fd46 	bl	800c58a <iprintf>
 8006afe:	e7c1      	b.n	8006a84 <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006b00:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <plug_holes+0xc8>)
 8006b02:	f240 125f 	movw	r2, #351	; 0x15f
 8006b06:	4910      	ldr	r1, [pc, #64]	; (8006b48 <plug_holes+0xd8>)
 8006b08:	480d      	ldr	r0, [pc, #52]	; (8006b40 <plug_holes+0xd0>)
 8006b0a:	f005 fd3e 	bl	800c58a <iprintf>
 8006b0e:	e7bc      	b.n	8006a8a <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006b10:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <plug_holes+0xc8>)
 8006b12:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006b16:	490d      	ldr	r1, [pc, #52]	; (8006b4c <plug_holes+0xdc>)
 8006b18:	4809      	ldr	r0, [pc, #36]	; (8006b40 <plug_holes+0xd0>)
 8006b1a:	f005 fd36 	bl	800c58a <iprintf>
 8006b1e:	e7b8      	b.n	8006a92 <plug_holes+0x22>
      lfree = mem;
 8006b20:	4a04      	ldr	r2, [pc, #16]	; (8006b34 <plug_holes+0xc4>)
 8006b22:	6014      	str	r4, [r2, #0]
 8006b24:	e7c5      	b.n	8006ab2 <plug_holes+0x42>
      lfree = pmem;
 8006b26:	4803      	ldr	r0, [pc, #12]	; (8006b34 <plug_holes+0xc4>)
 8006b28:	6002      	str	r2, [r0, #0]
 8006b2a:	e7d2      	b.n	8006ad2 <plug_holes+0x62>
 8006b2c:	20003e8c 	.word	0x20003e8c
 8006b30:	20003e90 	.word	0x20003e90
 8006b34:	20003e84 	.word	0x20003e84
 8006b38:	0800d560 	.word	0x0800d560
 8006b3c:	0800d590 	.word	0x0800d590
 8006b40:	0800c8d0 	.word	0x0800c8d0
 8006b44:	0800d5a8 	.word	0x0800d5a8
 8006b48:	0800d5c4 	.word	0x0800d5c4
 8006b4c:	0800d5e0 	.word	0x0800d5e0

08006b50 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006b50:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006b52:	4b11      	ldr	r3, [pc, #68]	; (8006b98 <mem_init+0x48>)
 8006b54:	f023 0303 	bic.w	r3, r3, #3
 8006b58:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <mem_init+0x4c>)
 8006b5a:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8006b5c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8006b60:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8006b62:	2200      	movs	r2, #0
 8006b64:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006b66:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006b68:	185a      	adds	r2, r3, r1
 8006b6a:	480d      	ldr	r0, [pc, #52]	; (8006ba0 <mem_init+0x50>)
 8006b6c:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 8006b6e:	2001      	movs	r0, #1
 8006b70:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006b72:	f8a3 1640 	strh.w	r1, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006b76:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006b78:	4a0a      	ldr	r2, [pc, #40]	; (8006ba4 <mem_init+0x54>)
 8006b7a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006b7c:	480a      	ldr	r0, [pc, #40]	; (8006ba8 <mem_init+0x58>)
 8006b7e:	f004 ff4b 	bl	800ba18 <sys_mutex_new>
 8006b82:	b900      	cbnz	r0, 8006b86 <mem_init+0x36>
 8006b84:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006b86:	4b09      	ldr	r3, [pc, #36]	; (8006bac <mem_init+0x5c>)
 8006b88:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006b8c:	4908      	ldr	r1, [pc, #32]	; (8006bb0 <mem_init+0x60>)
 8006b8e:	4809      	ldr	r0, [pc, #36]	; (8006bb4 <mem_init+0x64>)
 8006b90:	f005 fcfb 	bl	800c58a <iprintf>
  }
}
 8006b94:	e7f6      	b.n	8006b84 <mem_init+0x34>
 8006b96:	bf00      	nop
 8006b98:	20003f7f 	.word	0x20003f7f
 8006b9c:	20003e8c 	.word	0x20003e8c
 8006ba0:	20003e90 	.word	0x20003e90
 8006ba4:	20003e84 	.word	0x20003e84
 8006ba8:	20003e88 	.word	0x20003e88
 8006bac:	0800d560 	.word	0x0800d560
 8006bb0:	0800d46c 	.word	0x0800d46c
 8006bb4:	0800c8d0 	.word	0x0800c8d0

08006bb8 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d048      	beq.n	8006c4e <mem_free+0x96>
{
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006bc0:	f010 0f03 	tst.w	r0, #3
 8006bc4:	d11b      	bne.n	8006bfe <mem_free+0x46>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006bc6:	4b22      	ldr	r3, [pc, #136]	; (8006c50 <mem_free+0x98>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	429c      	cmp	r4, r3
 8006bcc:	d303      	bcc.n	8006bd6 <mem_free+0x1e>
 8006bce:	4b21      	ldr	r3, [pc, #132]	; (8006c54 <mem_free+0x9c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	429c      	cmp	r4, r3
 8006bd4:	d306      	bcc.n	8006be4 <mem_free+0x2c>
 8006bd6:	4b20      	ldr	r3, [pc, #128]	; (8006c58 <mem_free+0xa0>)
 8006bd8:	f240 12af 	movw	r2, #431	; 0x1af
 8006bdc:	491f      	ldr	r1, [pc, #124]	; (8006c5c <mem_free+0xa4>)
 8006bde:	4820      	ldr	r0, [pc, #128]	; (8006c60 <mem_free+0xa8>)
 8006be0:	f005 fcd3 	bl	800c58a <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006be4:	4b1a      	ldr	r3, [pc, #104]	; (8006c50 <mem_free+0x98>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	429c      	cmp	r4, r3
 8006bea:	d303      	bcc.n	8006bf4 <mem_free+0x3c>
 8006bec:	4b19      	ldr	r3, [pc, #100]	; (8006c54 <mem_free+0x9c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	d30c      	bcc.n	8006c0e <mem_free+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8006bf4:	f004 ff40 	bl	800ba78 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8006bf8:	f004 ff4a 	bl	800ba90 <sys_arch_unprotect>
    return;
 8006bfc:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006bfe:	4b16      	ldr	r3, [pc, #88]	; (8006c58 <mem_free+0xa0>)
 8006c00:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8006c04:	4917      	ldr	r1, [pc, #92]	; (8006c64 <mem_free+0xac>)
 8006c06:	4816      	ldr	r0, [pc, #88]	; (8006c60 <mem_free+0xa8>)
 8006c08:	f005 fcbf 	bl	800c58a <iprintf>
 8006c0c:	e7db      	b.n	8006bc6 <mem_free+0xe>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006c0e:	4816      	ldr	r0, [pc, #88]	; (8006c68 <mem_free+0xb0>)
 8006c10:	f004 ff13 	bl	800ba3a <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006c14:	f1a4 0508 	sub.w	r5, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006c18:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006c1c:	b17b      	cbz	r3, 8006c3e <mem_free+0x86>
  /* ... and is now unused. */
  mem->used = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8006c24:	4b11      	ldr	r3, [pc, #68]	; (8006c6c <mem_free+0xb4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	429d      	cmp	r5, r3
 8006c2a:	d201      	bcs.n	8006c30 <mem_free+0x78>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006c2c:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <mem_free+0xb4>)
 8006c2e:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006c30:	4628      	mov	r0, r5
 8006c32:	f7ff ff1d 	bl	8006a70 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006c36:	480c      	ldr	r0, [pc, #48]	; (8006c68 <mem_free+0xb0>)
 8006c38:	f004 ff06 	bl	800ba48 <sys_mutex_unlock>
 8006c3c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006c3e:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <mem_free+0xa0>)
 8006c40:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006c44:	490a      	ldr	r1, [pc, #40]	; (8006c70 <mem_free+0xb8>)
 8006c46:	4806      	ldr	r0, [pc, #24]	; (8006c60 <mem_free+0xa8>)
 8006c48:	f005 fc9f 	bl	800c58a <iprintf>
 8006c4c:	e7e7      	b.n	8006c1e <mem_free+0x66>
 8006c4e:	4770      	bx	lr
 8006c50:	20003e8c 	.word	0x20003e8c
 8006c54:	20003e90 	.word	0x20003e90
 8006c58:	0800d560 	.word	0x0800d560
 8006c5c:	0800d440 	.word	0x0800d440
 8006c60:	0800c8d0 	.word	0x0800c8d0
 8006c64:	0800d41c 	.word	0x0800d41c
 8006c68:	20003e88 	.word	0x20003e88
 8006c6c:	20003e84 	.word	0x20003e84
 8006c70:	0800d458 	.word	0x0800d458

08006c74 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006c78:	1ccc      	adds	r4, r1, #3
 8006c7a:	b2a4      	uxth	r4, r4
 8006c7c:	f024 0403 	bic.w	r4, r4, #3
 8006c80:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 8006c82:	2c0b      	cmp	r4, #11
 8006c84:	d800      	bhi.n	8006c88 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006c86:	240c      	movs	r4, #12
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8006c88:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8006c8c:	d879      	bhi.n	8006d82 <mem_trim+0x10e>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006c8e:	4b3f      	ldr	r3, [pc, #252]	; (8006d8c <mem_trim+0x118>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	42ab      	cmp	r3, r5
 8006c94:	d803      	bhi.n	8006c9e <mem_trim+0x2a>
 8006c96:	4b3e      	ldr	r3, [pc, #248]	; (8006d90 <mem_trim+0x11c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	429d      	cmp	r5, r3
 8006c9c:	d306      	bcc.n	8006cac <mem_trim+0x38>
 8006c9e:	4b3d      	ldr	r3, [pc, #244]	; (8006d94 <mem_trim+0x120>)
 8006ca0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006ca4:	493c      	ldr	r1, [pc, #240]	; (8006d98 <mem_trim+0x124>)
 8006ca6:	483d      	ldr	r0, [pc, #244]	; (8006d9c <mem_trim+0x128>)
 8006ca8:	f005 fc6f 	bl	800c58a <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006cac:	4b37      	ldr	r3, [pc, #220]	; (8006d8c <mem_trim+0x118>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	429d      	cmp	r5, r3
 8006cb2:	d336      	bcc.n	8006d22 <mem_trim+0xae>
 8006cb4:	4a36      	ldr	r2, [pc, #216]	; (8006d90 <mem_trim+0x11c>)
 8006cb6:	6812      	ldr	r2, [r2, #0]
 8006cb8:	4295      	cmp	r5, r2
 8006cba:	d232      	bcs.n	8006d22 <mem_trim+0xae>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006cbc:	f1a5 0708 	sub.w	r7, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006cc0:	1aff      	subs	r7, r7, r3
 8006cc2:	b2bf      	uxth	r7, r7

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006cc4:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8006cc8:	1bf6      	subs	r6, r6, r7
 8006cca:	b2b6      	uxth	r6, r6
 8006ccc:	3e08      	subs	r6, #8
 8006cce:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006cd0:	42b4      	cmp	r4, r6
 8006cd2:	d82c      	bhi.n	8006d2e <mem_trim+0xba>
  if (newsize > size) {
 8006cd4:	42b4      	cmp	r4, r6
 8006cd6:	d856      	bhi.n	8006d86 <mem_trim+0x112>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8006cd8:	d027      	beq.n	8006d2a <mem_trim+0xb6>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006cda:	4831      	ldr	r0, [pc, #196]	; (8006da0 <mem_trim+0x12c>)
 8006cdc:	f004 fead 	bl	800ba3a <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8006ce0:	4b2a      	ldr	r3, [pc, #168]	; (8006d8c <mem_trim+0x118>)
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8006ce8:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 8006cea:	7908      	ldrb	r0, [r1, #4]
 8006cec:	bb58      	cbnz	r0, 8006d46 <mem_trim+0xd2>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8006cee:	5ad0      	ldrh	r0, [r2, r3]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006cf0:	19e3      	adds	r3, r4, r7
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8006cf8:	4c2a      	ldr	r4, [pc, #168]	; (8006da4 <mem_trim+0x130>)
 8006cfa:	6824      	ldr	r4, [r4, #0]
 8006cfc:	42a1      	cmp	r1, r4
 8006cfe:	d01e      	beq.n	8006d3e <mem_trim+0xca>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006d00:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 8006d02:	2400      	movs	r4, #0
 8006d04:	710c      	strb	r4, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006d06:	52d0      	strh	r0, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
 8006d08:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006d0a:	f825 3c08 	strh.w	r3, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d0e:	5ad1      	ldrh	r1, [r2, r3]
 8006d10:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8006d14:	d001      	beq.n	8006d1a <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006d16:	440a      	add	r2, r1
 8006d18:	8053      	strh	r3, [r2, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006d1a:	4821      	ldr	r0, [pc, #132]	; (8006da0 <mem_trim+0x12c>)
 8006d1c:	f004 fe94 	bl	800ba48 <sys_mutex_unlock>
  return rmem;
 8006d20:	e003      	b.n	8006d2a <mem_trim+0xb6>
    SYS_ARCH_PROTECT(lev);
 8006d22:	f004 fea9 	bl	800ba78 <sys_arch_protect>
    SYS_ARCH_UNPROTECT(lev);
 8006d26:	f004 feb3 	bl	800ba90 <sys_arch_unprotect>
}
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006d2e:	4b19      	ldr	r3, [pc, #100]	; (8006d94 <mem_trim+0x120>)
 8006d30:	f240 2206 	movw	r2, #518	; 0x206
 8006d34:	491c      	ldr	r1, [pc, #112]	; (8006da8 <mem_trim+0x134>)
 8006d36:	4819      	ldr	r0, [pc, #100]	; (8006d9c <mem_trim+0x128>)
 8006d38:	f005 fc27 	bl	800c58a <iprintf>
 8006d3c:	e7ca      	b.n	8006cd4 <mem_trim+0x60>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8006d3e:	18d1      	adds	r1, r2, r3
 8006d40:	4c18      	ldr	r4, [pc, #96]	; (8006da4 <mem_trim+0x130>)
 8006d42:	6021      	str	r1, [r4, #0]
 8006d44:	e7dc      	b.n	8006d00 <mem_trim+0x8c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006d46:	f104 0314 	add.w	r3, r4, #20
 8006d4a:	42b3      	cmp	r3, r6
 8006d4c:	d8e5      	bhi.n	8006d1a <mem_trim+0xa6>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006d4e:	19e3      	adds	r3, r4, r7
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3308      	adds	r3, #8
 8006d54:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006d56:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 8006d58:	4812      	ldr	r0, [pc, #72]	; (8006da4 <mem_trim+0x130>)
 8006d5a:	6800      	ldr	r0, [r0, #0]
 8006d5c:	4281      	cmp	r1, r0
 8006d5e:	d201      	bcs.n	8006d64 <mem_trim+0xf0>
      lfree = mem2;
 8006d60:	4810      	ldr	r0, [pc, #64]	; (8006da4 <mem_trim+0x130>)
 8006d62:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 8006d64:	2000      	movs	r0, #0
 8006d66:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8006d68:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8006d6c:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 8006d6e:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 8006d70:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d74:	5ad1      	ldrh	r1, [r2, r3]
 8006d76:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8006d7a:	d0ce      	beq.n	8006d1a <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006d7c:	440a      	add	r2, r1
 8006d7e:	8053      	strh	r3, [r2, #2]
 8006d80:	e7cb      	b.n	8006d1a <mem_trim+0xa6>
    return NULL;
 8006d82:	2500      	movs	r5, #0
 8006d84:	e7d1      	b.n	8006d2a <mem_trim+0xb6>
    return NULL;
 8006d86:	2500      	movs	r5, #0
 8006d88:	e7cf      	b.n	8006d2a <mem_trim+0xb6>
 8006d8a:	bf00      	nop
 8006d8c:	20003e8c 	.word	0x20003e8c
 8006d90:	20003e90 	.word	0x20003e90
 8006d94:	0800d560 	.word	0x0800d560
 8006d98:	0800d528 	.word	0x0800d528
 8006d9c:	0800c8d0 	.word	0x0800c8d0
 8006da0:	20003e88 	.word	0x20003e88
 8006da4:	20003e84 	.word	0x20003e84
 8006da8:	0800d540 	.word	0x0800d540

08006dac <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8006dac:	2800      	cmp	r0, #0
 8006dae:	f000 808e 	beq.w	8006ece <mem_malloc+0x122>
{
 8006db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db4:	4605      	mov	r5, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8006db6:	3503      	adds	r5, #3
 8006db8:	b2ad      	uxth	r5, r5
 8006dba:	f025 0503 	bic.w	r5, r5, #3
 8006dbe:	b2ad      	uxth	r5, r5

  if (size < MIN_SIZE_ALIGNED) {
 8006dc0:	2d0b      	cmp	r5, #11
 8006dc2:	d800      	bhi.n	8006dc6 <mem_malloc+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006dc4:	250c      	movs	r5, #12
  }

  if (size > MEM_SIZE_ALIGNED) {
 8006dc6:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8006dca:	f200 8082 	bhi.w	8006ed2 <mem_malloc+0x126>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8006dce:	4842      	ldr	r0, [pc, #264]	; (8006ed8 <mem_malloc+0x12c>)
 8006dd0:	f004 fe33 	bl	800ba3a <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006dd4:	4b41      	ldr	r3, [pc, #260]	; (8006edc <mem_malloc+0x130>)
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	4b41      	ldr	r3, [pc, #260]	; (8006ee0 <mem_malloc+0x134>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	1a1b      	subs	r3, r3, r0
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	e049      	b.n	8006e76 <mem_malloc+0xca>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006de2:	2301      	movs	r3, #1
 8006de4:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006de6:	4b3e      	ldr	r3, [pc, #248]	; (8006ee0 <mem_malloc+0x134>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	429c      	cmp	r4, r3
 8006dec:	d014      	beq.n	8006e18 <mem_malloc+0x6c>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8006dee:	483a      	ldr	r0, [pc, #232]	; (8006ed8 <mem_malloc+0x12c>)
 8006df0:	f004 fe2a 	bl	800ba48 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006df4:	4426      	add	r6, r4
 8006df6:	3608      	adds	r6, #8
 8006df8:	4b3a      	ldr	r3, [pc, #232]	; (8006ee4 <mem_malloc+0x138>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	429e      	cmp	r6, r3
 8006dfe:	d821      	bhi.n	8006e44 <mem_malloc+0x98>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006e00:	f014 0503 	ands.w	r5, r4, #3
 8006e04:	d126      	bne.n	8006e54 <mem_malloc+0xa8>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006e06:	2d00      	cmp	r5, #0
 8006e08:	d12c      	bne.n	8006e64 <mem_malloc+0xb8>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006e0a:	f104 0008 	add.w	r0, r4, #8
 8006e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cur = (struct mem *)(void *)&ram[cur->next];
 8006e10:	4a32      	ldr	r2, [pc, #200]	; (8006edc <mem_malloc+0x130>)
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	4413      	add	r3, r2
          while (cur->used && cur != ram_end) {
 8006e18:	791a      	ldrb	r2, [r3, #4]
 8006e1a:	b11a      	cbz	r2, 8006e24 <mem_malloc+0x78>
 8006e1c:	4931      	ldr	r1, [pc, #196]	; (8006ee4 <mem_malloc+0x138>)
 8006e1e:	6809      	ldr	r1, [r1, #0]
 8006e20:	428b      	cmp	r3, r1
 8006e22:	d1f5      	bne.n	8006e10 <mem_malloc+0x64>
          lfree = cur;
 8006e24:	492e      	ldr	r1, [pc, #184]	; (8006ee0 <mem_malloc+0x134>)
 8006e26:	600b      	str	r3, [r1, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006e28:	492e      	ldr	r1, [pc, #184]	; (8006ee4 <mem_malloc+0x138>)
 8006e2a:	6809      	ldr	r1, [r1, #0]
 8006e2c:	428b      	cmp	r3, r1
 8006e2e:	d0de      	beq.n	8006dee <mem_malloc+0x42>
 8006e30:	2a00      	cmp	r2, #0
 8006e32:	d0dc      	beq.n	8006dee <mem_malloc+0x42>
 8006e34:	4b2c      	ldr	r3, [pc, #176]	; (8006ee8 <mem_malloc+0x13c>)
 8006e36:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006e3a:	492c      	ldr	r1, [pc, #176]	; (8006eec <mem_malloc+0x140>)
 8006e3c:	482c      	ldr	r0, [pc, #176]	; (8006ef0 <mem_malloc+0x144>)
 8006e3e:	f005 fba4 	bl	800c58a <iprintf>
 8006e42:	e7d4      	b.n	8006dee <mem_malloc+0x42>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006e44:	4b28      	ldr	r3, [pc, #160]	; (8006ee8 <mem_malloc+0x13c>)
 8006e46:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8006e4a:	492a      	ldr	r1, [pc, #168]	; (8006ef4 <mem_malloc+0x148>)
 8006e4c:	4828      	ldr	r0, [pc, #160]	; (8006ef0 <mem_malloc+0x144>)
 8006e4e:	f005 fb9c 	bl	800c58a <iprintf>
 8006e52:	e7d5      	b.n	8006e00 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006e54:	4b24      	ldr	r3, [pc, #144]	; (8006ee8 <mem_malloc+0x13c>)
 8006e56:	f240 22d6 	movw	r2, #726	; 0x2d6
 8006e5a:	4927      	ldr	r1, [pc, #156]	; (8006ef8 <mem_malloc+0x14c>)
 8006e5c:	4824      	ldr	r0, [pc, #144]	; (8006ef0 <mem_malloc+0x144>)
 8006e5e:	f005 fb94 	bl	800c58a <iprintf>
 8006e62:	e7d0      	b.n	8006e06 <mem_malloc+0x5a>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006e64:	4b20      	ldr	r3, [pc, #128]	; (8006ee8 <mem_malloc+0x13c>)
 8006e66:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8006e6a:	4924      	ldr	r1, [pc, #144]	; (8006efc <mem_malloc+0x150>)
 8006e6c:	4820      	ldr	r0, [pc, #128]	; (8006ef0 <mem_malloc+0x144>)
 8006e6e:	f005 fb8c 	bl	800c58a <iprintf>
 8006e72:	e7ca      	b.n	8006e0a <mem_malloc+0x5e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8006e74:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006e76:	461f      	mov	r7, r3
 8006e78:	462e      	mov	r6, r5
 8006e7a:	f5c5 61c8 	rsb	r1, r5, #1600	; 0x640
 8006e7e:	428b      	cmp	r3, r1
 8006e80:	d220      	bcs.n	8006ec4 <mem_malloc+0x118>
      mem = (struct mem *)(void *)&ram[ptr];
 8006e82:	18c4      	adds	r4, r0, r3
      if ((!mem->used) &&
 8006e84:	7921      	ldrb	r1, [r4, #4]
 8006e86:	2900      	cmp	r1, #0
 8006e88:	d1f4      	bne.n	8006e74 <mem_malloc+0xc8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006e8a:	5ac2      	ldrh	r2, [r0, r3]
 8006e8c:	1bd2      	subs	r2, r2, r7
 8006e8e:	3a08      	subs	r2, #8
      if ((!mem->used) &&
 8006e90:	4296      	cmp	r6, r2
 8006e92:	d8ef      	bhi.n	8006e74 <mem_malloc+0xc8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006e94:	f106 0114 	add.w	r1, r6, #20
 8006e98:	428a      	cmp	r2, r1
 8006e9a:	d3a2      	bcc.n	8006de2 <mem_malloc+0x36>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8006e9c:	18ea      	adds	r2, r5, r3
 8006e9e:	b292      	uxth	r2, r2
 8006ea0:	3208      	adds	r2, #8
 8006ea2:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8006ea4:	1881      	adds	r1, r0, r2
          mem2->used = 0;
 8006ea6:	2500      	movs	r5, #0
 8006ea8:	710d      	strb	r5, [r1, #4]
          mem2->next = mem->next;
 8006eaa:	8825      	ldrh	r5, [r4, #0]
 8006eac:	5285      	strh	r5, [r0, r2]
          mem2->prev = ptr;
 8006eae:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 8006eb0:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006eb6:	5a83      	ldrh	r3, [r0, r2]
 8006eb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006ebc:	d093      	beq.n	8006de6 <mem_malloc+0x3a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006ebe:	4418      	add	r0, r3
 8006ec0:	8042      	strh	r2, [r0, #2]
 8006ec2:	e790      	b.n	8006de6 <mem_malloc+0x3a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8006ec4:	4804      	ldr	r0, [pc, #16]	; (8006ed8 <mem_malloc+0x12c>)
 8006ec6:	f004 fdbf 	bl	800ba48 <sys_mutex_unlock>
  return NULL;
 8006eca:	2000      	movs	r0, #0
 8006ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8006ece:	2000      	movs	r0, #0
 8006ed0:	4770      	bx	lr
    return NULL;
 8006ed2:	2000      	movs	r0, #0
}
 8006ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20003e88 	.word	0x20003e88
 8006edc:	20003e8c 	.word	0x20003e8c
 8006ee0:	20003e84 	.word	0x20003e84
 8006ee4:	20003e90 	.word	0x20003e90
 8006ee8:	0800d560 	.word	0x0800d560
 8006eec:	0800d488 	.word	0x0800d488
 8006ef0:	0800c8d0 	.word	0x0800c8d0
 8006ef4:	0800d4a4 	.word	0x0800d4a4
 8006ef8:	0800d4d4 	.word	0x0800d4d4
 8006efc:	0800d504 	.word	0x0800d504

08006f00 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8006f04:	f004 fdb8 	bl	800ba78 <sys_arch_protect>
 8006f08:	4605      	mov	r5, r0

  memp = *desc->tab;
 8006f0a:	68a3      	ldr	r3, [r4, #8]
 8006f0c:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006f0e:	b18c      	cbz	r4, 8006f34 <do_memp_malloc_pool+0x34>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006f10:	6822      	ldr	r2, [r4, #0]
 8006f12:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006f14:	f014 0f03 	tst.w	r4, #3
 8006f18:	d104      	bne.n	8006f24 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f004 fdb8 	bl	800ba90 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8006f20:	4620      	mov	r0, r4
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <do_memp_malloc_pool+0x3c>)
 8006f26:	f240 1249 	movw	r2, #329	; 0x149
 8006f2a:	4905      	ldr	r1, [pc, #20]	; (8006f40 <do_memp_malloc_pool+0x40>)
 8006f2c:	4805      	ldr	r0, [pc, #20]	; (8006f44 <do_memp_malloc_pool+0x44>)
 8006f2e:	f005 fb2c 	bl	800c58a <iprintf>
 8006f32:	e7f2      	b.n	8006f1a <do_memp_malloc_pool+0x1a>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8006f34:	f004 fdac 	bl	800ba90 <sys_arch_unprotect>
  return NULL;
 8006f38:	2000      	movs	r0, #0
}
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
 8006f3c:	0800d62c 	.word	0x0800d62c
 8006f40:	0800d65c 	.word	0x0800d65c
 8006f44:	0800c8d0 	.word	0x0800c8d0

08006f48 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006f4e:	f011 0f03 	tst.w	r1, #3
 8006f52:	d109      	bne.n	8006f68 <do_memp_free_pool+0x20>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8006f54:	f004 fd90 	bl	800ba78 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006f58:	68ab      	ldr	r3, [r5, #8]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8006f5e:	68ab      	ldr	r3, [r5, #8]
 8006f60:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8006f62:	f004 fd95 	bl	800ba90 <sys_arch_unprotect>
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8006f68:	4b03      	ldr	r3, [pc, #12]	; (8006f78 <do_memp_free_pool+0x30>)
 8006f6a:	f240 129d 	movw	r2, #413	; 0x19d
 8006f6e:	4903      	ldr	r1, [pc, #12]	; (8006f7c <do_memp_free_pool+0x34>)
 8006f70:	4803      	ldr	r0, [pc, #12]	; (8006f80 <do_memp_free_pool+0x38>)
 8006f72:	f005 fb0a 	bl	800c58a <iprintf>
 8006f76:	e7ed      	b.n	8006f54 <do_memp_free_pool+0xc>
 8006f78:	0800d62c 	.word	0x0800d62c
 8006f7c:	0800d60c 	.word	0x0800d60c
 8006f80:	0800c8d0 	.word	0x0800c8d0

08006f84 <memp_init_pool>:
  *desc->tab = NULL;
 8006f84:	6883      	ldr	r3, [r0, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006f8a:	6843      	ldr	r3, [r0, #4]
 8006f8c:	3303      	adds	r3, #3
 8006f8e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8006f92:	e007      	b.n	8006fa4 <memp_init_pool+0x20>
    memp->next = *desc->tab;
 8006f94:	6881      	ldr	r1, [r0, #8]
 8006f96:	6809      	ldr	r1, [r1, #0]
 8006f98:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8006f9a:	6881      	ldr	r1, [r0, #8]
 8006f9c:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006f9e:	8801      	ldrh	r1, [r0, #0]
 8006fa0:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8006fa2:	3201      	adds	r2, #1
 8006fa4:	8841      	ldrh	r1, [r0, #2]
 8006fa6:	428a      	cmp	r2, r1
 8006fa8:	dbf4      	blt.n	8006f94 <memp_init_pool+0x10>
}
 8006faa:	4770      	bx	lr

08006fac <memp_init>:
{
 8006fac:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006fae:	2400      	movs	r4, #0
 8006fb0:	e006      	b.n	8006fc0 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 8006fb2:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <memp_init+0x1c>)
 8006fb4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006fb8:	f7ff ffe4 	bl	8006f84 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006fbc:	3401      	adds	r4, #1
 8006fbe:	b2a4      	uxth	r4, r4
 8006fc0:	2c0c      	cmp	r4, #12
 8006fc2:	d9f6      	bls.n	8006fb2 <memp_init+0x6>
}
 8006fc4:	bd10      	pop	{r4, pc}
 8006fc6:	bf00      	nop
 8006fc8:	0800d758 	.word	0x0800d758

08006fcc <memp_malloc>:
{
 8006fcc:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006fce:	280c      	cmp	r0, #12
 8006fd0:	d805      	bhi.n	8006fde <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006fd2:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <memp_malloc+0x24>)
 8006fd4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006fd8:	f7ff ff92 	bl	8006f00 <do_memp_malloc_pool>
}
 8006fdc:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006fde:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <memp_malloc+0x28>)
 8006fe0:	f240 1287 	movw	r2, #391	; 0x187
 8006fe4:	4904      	ldr	r1, [pc, #16]	; (8006ff8 <memp_malloc+0x2c>)
 8006fe6:	4805      	ldr	r0, [pc, #20]	; (8006ffc <memp_malloc+0x30>)
 8006fe8:	f005 facf 	bl	800c58a <iprintf>
 8006fec:	2000      	movs	r0, #0
 8006fee:	bd08      	pop	{r3, pc}
 8006ff0:	0800d758 	.word	0x0800d758
 8006ff4:	0800d62c 	.word	0x0800d62c
 8006ff8:	0800d738 	.word	0x0800d738
 8006ffc:	0800c8d0 	.word	0x0800c8d0

08007000 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007000:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007002:	280c      	cmp	r0, #12
 8007004:	d806      	bhi.n	8007014 <memp_free+0x14>

  if (mem == NULL) {
 8007006:	b121      	cbz	r1, 8007012 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007008:	4b06      	ldr	r3, [pc, #24]	; (8007024 <memp_free+0x24>)
 800700a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800700e:	f7ff ff9b 	bl	8006f48 <do_memp_free_pool>
 8007012:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <memp_free+0x28>)
 8007016:	f240 12db 	movw	r2, #475	; 0x1db
 800701a:	4904      	ldr	r1, [pc, #16]	; (800702c <memp_free+0x2c>)
 800701c:	4804      	ldr	r0, [pc, #16]	; (8007030 <memp_free+0x30>)
 800701e:	f005 fab4 	bl	800c58a <iprintf>
 8007022:	bd08      	pop	{r3, pc}
 8007024:	0800d758 	.word	0x0800d758
 8007028:	0800d62c 	.word	0x0800d62c
 800702c:	0800d71c 	.word	0x0800d71c
 8007030:	0800c8d0 	.word	0x0800c8d0

08007034 <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007034:	f011 0f01 	tst.w	r1, #1
 8007038:	d00c      	beq.n	8007054 <netif_issue_reports+0x20>
{
 800703a:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800703c:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800703e:	b123      	cbz	r3, 800704a <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007040:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8007044:	f013 0f08 	tst.w	r3, #8
 8007048:	d100      	bne.n	800704c <netif_issue_reports+0x18>
 800704a:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 800704c:	1d01      	adds	r1, r0, #4
 800704e:	f7fe fbfd 	bl	800584c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8007052:	e7fa      	b.n	800704a <netif_issue_reports+0x16>
 8007054:	4770      	bx	lr

08007056 <netif_init>:
{
 8007056:	4770      	bx	lr

08007058 <netif_set_ipaddr>:
{
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	b082      	sub	sp, #8
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800705c:	460d      	mov	r5, r1
 800705e:	b1c1      	cbz	r1, 8007092 <netif_set_ipaddr+0x3a>
 8007060:	680a      	ldr	r2, [r1, #0]
 8007062:	9201      	str	r2, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8007064:	6842      	ldr	r2, [r0, #4]
 8007066:	9901      	ldr	r1, [sp, #4]
 8007068:	4291      	cmp	r1, r2
 800706a:	d010      	beq.n	800708e <netif_set_ipaddr+0x36>
 800706c:	4604      	mov	r4, r0
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800706e:	1d06      	adds	r6, r0, #4
 8007070:	a901      	add	r1, sp, #4
 8007072:	4630      	mov	r0, r6
 8007074:	f001 fc96 	bl	80089a4 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007078:	a901      	add	r1, sp, #4
 800707a:	4630      	mov	r0, r6
 800707c:	f004 fb56 	bl	800b72c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007080:	b15d      	cbz	r5, 800709a <netif_set_ipaddr+0x42>
 8007082:	682b      	ldr	r3, [r5, #0]
 8007084:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007086:	2101      	movs	r1, #1
 8007088:	4620      	mov	r0, r4
 800708a:	f7ff ffd3 	bl	8007034 <netif_issue_reports>
}
 800708e:	b002      	add	sp, #8
 8007090:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007092:	4a03      	ldr	r2, [pc, #12]	; (80070a0 <netif_set_ipaddr+0x48>)
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	9201      	str	r2, [sp, #4]
 8007098:	e7e4      	b.n	8007064 <netif_set_ipaddr+0xc>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800709a:	2300      	movs	r3, #0
 800709c:	e7f2      	b.n	8007084 <netif_set_ipaddr+0x2c>
 800709e:	bf00      	nop
 80070a0:	0800d268 	.word	0x0800d268

080070a4 <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80070a4:	b111      	cbz	r1, 80070ac <netif_set_gw+0x8>
 80070a6:	680b      	ldr	r3, [r1, #0]
 80070a8:	60c3      	str	r3, [r0, #12]
 80070aa:	4770      	bx	lr
 80070ac:	2300      	movs	r3, #0
 80070ae:	e7fb      	b.n	80070a8 <netif_set_gw+0x4>

080070b0 <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80070b0:	b111      	cbz	r1, 80070b8 <netif_set_netmask+0x8>
 80070b2:	680b      	ldr	r3, [r1, #0]
 80070b4:	6083      	str	r3, [r0, #8]
 80070b6:	4770      	bx	lr
 80070b8:	2300      	movs	r3, #0
 80070ba:	e7fb      	b.n	80070b4 <netif_set_netmask+0x4>

080070bc <netif_set_addr>:
{
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	4604      	mov	r4, r0
 80070c0:	4617      	mov	r7, r2
 80070c2:	461e      	mov	r6, r3
  if (ip4_addr_isany(ipaddr)) {
 80070c4:	460d      	mov	r5, r1
 80070c6:	b109      	cbz	r1, 80070cc <netif_set_addr+0x10>
 80070c8:	680b      	ldr	r3, [r1, #0]
 80070ca:	b963      	cbnz	r3, 80070e6 <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 80070cc:	4629      	mov	r1, r5
 80070ce:	4620      	mov	r0, r4
 80070d0:	f7ff ffc2 	bl	8007058 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 80070d4:	4639      	mov	r1, r7
 80070d6:	4620      	mov	r0, r4
 80070d8:	f7ff ffea 	bl	80070b0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 80070dc:	4631      	mov	r1, r6
 80070de:	4620      	mov	r0, r4
 80070e0:	f7ff ffe0 	bl	80070a4 <netif_set_gw>
 80070e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 80070e6:	4611      	mov	r1, r2
 80070e8:	f7ff ffe2 	bl	80070b0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 80070ec:	4631      	mov	r1, r6
 80070ee:	4620      	mov	r0, r4
 80070f0:	f7ff ffd8 	bl	80070a4 <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 80070f4:	4629      	mov	r1, r5
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7ff ffae 	bl	8007058 <netif_set_ipaddr>
 80070fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007100 <netif_add>:
{
 8007100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007104:	4604      	mov	r4, r0
 8007106:	460e      	mov	r6, r1
 8007108:	4617      	mov	r7, r2
 800710a:	4698      	mov	r8, r3
 800710c:	9d07      	ldr	r5, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 800710e:	b315      	cbz	r5, 8007156 <netif_add+0x56>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007110:	2300      	movs	r3, #0
 8007112:	6063      	str	r3, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007114:	60a3      	str	r3, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007116:	60e3      	str	r3, [r4, #12]
  netif->flags = 0;
 8007118:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800711c:	2303      	movs	r3, #3
 800711e:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 8007122:	9b06      	ldr	r3, [sp, #24]
 8007124:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8007126:	4a11      	ldr	r2, [pc, #68]	; (800716c <netif_add+0x6c>)
 8007128:	7813      	ldrb	r3, [r2, #0]
 800712a:	1c59      	adds	r1, r3, #1
 800712c:	7011      	strb	r1, [r2, #0]
 800712e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 8007132:	9b08      	ldr	r3, [sp, #32]
 8007134:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007136:	4643      	mov	r3, r8
 8007138:	463a      	mov	r2, r7
 800713a:	4631      	mov	r1, r6
 800713c:	4620      	mov	r0, r4
 800713e:	f7ff ffbd 	bl	80070bc <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8007142:	4620      	mov	r0, r4
 8007144:	47a8      	blx	r5
 8007146:	b968      	cbnz	r0, 8007164 <netif_add+0x64>
  netif->next = netif_list;
 8007148:	4b09      	ldr	r3, [pc, #36]	; (8007170 <netif_add+0x70>)
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 800714e:	601c      	str	r4, [r3, #0]
  return netif;
 8007150:	4620      	mov	r0, r4
 8007152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 8007156:	4b07      	ldr	r3, [pc, #28]	; (8007174 <netif_add+0x74>)
 8007158:	22fb      	movs	r2, #251	; 0xfb
 800715a:	4907      	ldr	r1, [pc, #28]	; (8007178 <netif_add+0x78>)
 800715c:	4807      	ldr	r0, [pc, #28]	; (800717c <netif_add+0x7c>)
 800715e:	f005 fa14 	bl	800c58a <iprintf>
 8007162:	e7d5      	b.n	8007110 <netif_add+0x10>
    return NULL;
 8007164:	2000      	movs	r0, #0
}
 8007166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800716a:	bf00      	nop
 800716c:	20003ec8 	.word	0x20003ec8
 8007170:	20007224 	.word	0x20007224
 8007174:	0800d78c 	.word	0x0800d78c
 8007178:	0800d7c0 	.word	0x0800d7c0
 800717c:	0800c8d0 	.word	0x0800c8d0

08007180 <netif_set_default>:
  netif_default = netif;
 8007180:	4b01      	ldr	r3, [pc, #4]	; (8007188 <netif_set_default+0x8>)
 8007182:	6018      	str	r0, [r3, #0]
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20007228 	.word	0x20007228

0800718c <netif_set_up>:
{
 800718c:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800718e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8007192:	f013 0f01 	tst.w	r3, #1
 8007196:	d106      	bne.n	80071a6 <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 8007198:	f043 0301 	orr.w	r3, r3, #1
 800719c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80071a0:	f013 0f04 	tst.w	r3, #4
 80071a4:	d100      	bne.n	80071a8 <netif_set_up+0x1c>
 80071a6:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80071a8:	2103      	movs	r1, #3
 80071aa:	f7ff ff43 	bl	8007034 <netif_issue_reports>
}
 80071ae:	e7fa      	b.n	80071a6 <netif_set_up+0x1a>

080071b0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80071b0:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 80071b2:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80071b6:	f013 0f01 	tst.w	r3, #1
 80071ba:	d006      	beq.n	80071ca <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 80071bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80071c0:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80071c4:	f013 0f08 	tst.w	r3, #8
 80071c8:	d100      	bne.n	80071cc <netif_set_down+0x1c>
 80071ca:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 80071cc:	f7fe faca 	bl	8005764 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80071d0:	e7fb      	b.n	80071ca <netif_set_down+0x1a>
	...

080071d4 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	460c      	mov	r4, r1
 80071d8:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80071da:	4605      	mov	r5, r0
 80071dc:	b1c0      	cbz	r0, 8007210 <pbuf_header_impl+0x3c>
  if ((header_size_increment == 0) || (p == NULL)) {
 80071de:	2c00      	cmp	r4, #0
 80071e0:	d04e      	beq.n	8007280 <pbuf_header_impl+0xac>
 80071e2:	2d00      	cmp	r5, #0
 80071e4:	d04e      	beq.n	8007284 <pbuf_header_impl+0xb0>
    return 0;
  }

  if (header_size_increment < 0) {
 80071e6:	2c00      	cmp	r4, #0
 80071e8:	db1a      	blt.n	8007220 <pbuf_header_impl+0x4c>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80071ea:	b2a2      	uxth	r2, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80071ec:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80071ee:	6869      	ldr	r1, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80071f0:	b32b      	cbz	r3, 800723e <pbuf_header_impl+0x6a>
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d023      	beq.n	800723e <pbuf_header_impl+0x6a>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d837      	bhi.n	800726e <pbuf_header_impl+0x9a>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80071fe:	2c00      	cmp	r4, #0
 8007200:	db2f      	blt.n	8007262 <pbuf_header_impl+0x8e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 8007202:	2c00      	cmp	r4, #0
 8007204:	dd40      	ble.n	8007288 <pbuf_header_impl+0xb4>
 8007206:	2e00      	cmp	r6, #0
 8007208:	d040      	beq.n	800728c <pbuf_header_impl+0xb8>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800720a:	1b09      	subs	r1, r1, r4
 800720c:	6069      	str	r1, [r5, #4]
 800720e:	e01c      	b.n	800724a <pbuf_header_impl+0x76>
  LWIP_ASSERT("p != NULL", p != NULL);
 8007210:	4b1f      	ldr	r3, [pc, #124]	; (8007290 <pbuf_header_impl+0xbc>)
 8007212:	f240 223f 	movw	r2, #575	; 0x23f
 8007216:	491f      	ldr	r1, [pc, #124]	; (8007294 <pbuf_header_impl+0xc0>)
 8007218:	481f      	ldr	r0, [pc, #124]	; (8007298 <pbuf_header_impl+0xc4>)
 800721a:	f005 f9b6 	bl	800c58a <iprintf>
 800721e:	e7de      	b.n	80071de <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 8007220:	b2a2      	uxth	r2, r4
 8007222:	4252      	negs	r2, r2
 8007224:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007226:	896b      	ldrh	r3, [r5, #10]
 8007228:	429a      	cmp	r2, r3
 800722a:	d9df      	bls.n	80071ec <pbuf_header_impl+0x18>
 800722c:	4b18      	ldr	r3, [pc, #96]	; (8007290 <pbuf_header_impl+0xbc>)
 800722e:	f240 2247 	movw	r2, #583	; 0x247
 8007232:	491a      	ldr	r1, [pc, #104]	; (800729c <pbuf_header_impl+0xc8>)
 8007234:	4818      	ldr	r0, [pc, #96]	; (8007298 <pbuf_header_impl+0xc4>)
 8007236:	f005 f9a8 	bl	800c58a <iprintf>
 800723a:	2001      	movs	r0, #1
 800723c:	bd70      	pop	{r4, r5, r6, pc}
    p->payload = (u8_t *)p->payload - header_size_increment;
 800723e:	1b0b      	subs	r3, r1, r4
 8007240:	606b      	str	r3, [r5, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007242:	f105 0210 	add.w	r2, r5, #16
 8007246:	4293      	cmp	r3, r2
 8007248:	d308      	bcc.n	800725c <pbuf_header_impl+0x88>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800724a:	b2a4      	uxth	r4, r4
 800724c:	896b      	ldrh	r3, [r5, #10]
 800724e:	4423      	add	r3, r4
 8007250:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 8007252:	892b      	ldrh	r3, [r5, #8]
 8007254:	441c      	add	r4, r3
 8007256:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8007258:	2000      	movs	r0, #0
 800725a:	bd70      	pop	{r4, r5, r6, pc}
      p->payload = payload;
 800725c:	6069      	str	r1, [r5, #4]
      return 1;
 800725e:	2001      	movs	r0, #1
 8007260:	bd70      	pop	{r4, r5, r6, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8007262:	896b      	ldrh	r3, [r5, #10]
 8007264:	429a      	cmp	r2, r3
 8007266:	d8cc      	bhi.n	8007202 <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007268:	1b09      	subs	r1, r1, r4
 800726a:	6069      	str	r1, [r5, #4]
 800726c:	e7ed      	b.n	800724a <pbuf_header_impl+0x76>
    LWIP_ASSERT("bad pbuf type", 0);
 800726e:	4b08      	ldr	r3, [pc, #32]	; (8007290 <pbuf_header_impl+0xbc>)
 8007270:	f240 2277 	movw	r2, #631	; 0x277
 8007274:	490a      	ldr	r1, [pc, #40]	; (80072a0 <pbuf_header_impl+0xcc>)
 8007276:	4808      	ldr	r0, [pc, #32]	; (8007298 <pbuf_header_impl+0xc4>)
 8007278:	f005 f987 	bl	800c58a <iprintf>
    return 1;
 800727c:	2001      	movs	r0, #1
 800727e:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8007280:	2000      	movs	r0, #0
 8007282:	bd70      	pop	{r4, r5, r6, pc}
 8007284:	2000      	movs	r0, #0
 8007286:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8007288:	2001      	movs	r0, #1
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	2001      	movs	r0, #1
}
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	0800da90 	.word	0x0800da90
 8007294:	0800cb70 	.word	0x0800cb70
 8007298:	0800c8d0 	.word	0x0800c8d0
 800729c:	0800dac0 	.word	0x0800dac0
 80072a0:	0800dae0 	.word	0x0800dae0

080072a4 <pbuf_pool_is_empty>:
{
 80072a4:	b510      	push	{r4, lr}
  SYS_ARCH_PROTECT(old_level);
 80072a6:	f004 fbe7 	bl	800ba78 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 80072aa:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <pbuf_pool_is_empty+0x38>)
 80072ac:	781c      	ldrb	r4, [r3, #0]
 80072ae:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 80072b0:	2201      	movs	r2, #1
 80072b2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80072b4:	f004 fbec 	bl	800ba90 <sys_arch_unprotect>
  if (!queued) {
 80072b8:	b104      	cbz	r4, 80072bc <pbuf_pool_is_empty+0x18>
 80072ba:	bd10      	pop	{r4, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80072bc:	2200      	movs	r2, #0
 80072be:	4611      	mov	r1, r2
 80072c0:	4807      	ldr	r0, [pc, #28]	; (80072e0 <pbuf_pool_is_empty+0x3c>)
 80072c2:	f7fd ffcb 	bl	800525c <tcpip_callback_with_block>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d0f7      	beq.n	80072ba <pbuf_pool_is_empty+0x16>
 80072ca:	f004 fbd5 	bl	800ba78 <sys_arch_protect>
 80072ce:	2200      	movs	r2, #0
 80072d0:	4b02      	ldr	r3, [pc, #8]	; (80072dc <pbuf_pool_is_empty+0x38>)
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	f004 fbdc 	bl	800ba90 <sys_arch_unprotect>
}
 80072d8:	e7ef      	b.n	80072ba <pbuf_pool_is_empty+0x16>
 80072da:	bf00      	nop
 80072dc:	2000722c 	.word	0x2000722c
 80072e0:	08007319 	.word	0x08007319

080072e4 <pbuf_free_ooseq>:
{
 80072e4:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80072e6:	f004 fbc7 	bl	800ba78 <sys_arch_protect>
 80072ea:	2200      	movs	r2, #0
 80072ec:	4b08      	ldr	r3, [pc, #32]	; (8007310 <pbuf_free_ooseq+0x2c>)
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	f004 fbce 	bl	800ba90 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80072f4:	4b07      	ldr	r3, [pc, #28]	; (8007314 <pbuf_free_ooseq+0x30>)
 80072f6:	681c      	ldr	r4, [r3, #0]
 80072f8:	b144      	cbz	r4, 800730c <pbuf_free_ooseq+0x28>
    if (NULL != pcb->ooseq) {
 80072fa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80072fc:	b908      	cbnz	r0, 8007302 <pbuf_free_ooseq+0x1e>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80072fe:	68e4      	ldr	r4, [r4, #12]
 8007300:	e7fa      	b.n	80072f8 <pbuf_free_ooseq+0x14>
      tcp_segs_free(pcb->ooseq);
 8007302:	f000 fd44 	bl	8007d8e <tcp_segs_free>
      pcb->ooseq = NULL;
 8007306:	2300      	movs	r3, #0
 8007308:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 800730a:	bd10      	pop	{r4, pc}
 800730c:	bd10      	pop	{r4, pc}
 800730e:	bf00      	nop
 8007310:	2000722c 	.word	0x2000722c
 8007314:	20007234 	.word	0x20007234

08007318 <pbuf_free_ooseq_callback>:
{
 8007318:	b508      	push	{r3, lr}
  pbuf_free_ooseq();
 800731a:	f7ff ffe3 	bl	80072e4 <pbuf_free_ooseq>
 800731e:	bd08      	pop	{r3, pc}

08007320 <pbuf_alloced_custom>:
{
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 8007324:	2804      	cmp	r0, #4
 8007326:	d80a      	bhi.n	800733e <pbuf_alloced_custom+0x1e>
 8007328:	e8df f000 	tbb	[pc, r0]
 800732c:	05031412 	.word	0x05031412
 8007330:	07          	.byte	0x07
 8007331:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8007332:	200e      	movs	r0, #14
    break;
 8007334:	e00f      	b.n	8007356 <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8007336:	2000      	movs	r0, #0
    break;
 8007338:	e00d      	b.n	8007356 <pbuf_alloced_custom+0x36>
    offset = 0;
 800733a:	2000      	movs	r0, #0
    break;
 800733c:	e00b      	b.n	8007356 <pbuf_alloced_custom+0x36>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800733e:	4b13      	ldr	r3, [pc, #76]	; (800738c <pbuf_alloced_custom+0x6c>)
 8007340:	f240 12c5 	movw	r2, #453	; 0x1c5
 8007344:	4912      	ldr	r1, [pc, #72]	; (8007390 <pbuf_alloced_custom+0x70>)
 8007346:	4813      	ldr	r0, [pc, #76]	; (8007394 <pbuf_alloced_custom+0x74>)
 8007348:	f005 f91f 	bl	800c58a <iprintf>
    return NULL;
 800734c:	2000      	movs	r0, #0
 800734e:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007350:	2036      	movs	r0, #54	; 0x36
 8007352:	e000      	b.n	8007356 <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8007354:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007356:	3003      	adds	r0, #3
 8007358:	f020 0003 	bic.w	r0, r0, #3
 800735c:	180e      	adds	r6, r1, r0
 800735e:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8007362:	42ae      	cmp	r6, r5
 8007364:	d810      	bhi.n	8007388 <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 8007366:	2500      	movs	r5, #0
 8007368:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 800736a:	b154      	cbz	r4, 8007382 <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800736c:	4420      	add	r0, r4
 800736e:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8007370:	2002      	movs	r0, #2
 8007372:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8007374:	8119      	strh	r1, [r3, #8]
 8007376:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 8007378:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800737a:	2201      	movs	r2, #1
 800737c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800737e:	4618      	mov	r0, r3
 8007380:	bd70      	pop	{r4, r5, r6, pc}
    p->pbuf.payload = NULL;
 8007382:	2000      	movs	r0, #0
 8007384:	6058      	str	r0, [r3, #4]
 8007386:	e7f3      	b.n	8007370 <pbuf_alloced_custom+0x50>
    return NULL;
 8007388:	2000      	movs	r0, #0
}
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	0800da90 	.word	0x0800da90
 8007390:	0800d8bc 	.word	0x0800d8bc
 8007394:	0800c8d0 	.word	0x0800c8d0

08007398 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8007398:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 800739a:	2200      	movs	r2, #0
 800739c:	f7ff ff1a 	bl	80071d4 <pbuf_header_impl>
}
 80073a0:	bd08      	pop	{r3, pc}

080073a2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80073a2:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 80073a4:	2201      	movs	r2, #1
 80073a6:	f7ff ff15 	bl	80071d4 <pbuf_header_impl>
}
 80073aa:	bd08      	pop	{r3, pc}

080073ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80073ae:	b128      	cbz	r0, 80073bc <pbuf_free+0x10>
 80073b0:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80073b2:	7b03      	ldrb	r3, [r0, #12]
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d80b      	bhi.n	80073d0 <pbuf_free+0x24>
{
 80073b8:	2600      	movs	r6, #0
 80073ba:	e01f      	b.n	80073fc <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 80073bc:	4b2b      	ldr	r3, [pc, #172]	; (800746c <pbuf_free+0xc0>)
 80073be:	f240 22d2 	movw	r2, #722	; 0x2d2
 80073c2:	492b      	ldr	r1, [pc, #172]	; (8007470 <pbuf_free+0xc4>)
 80073c4:	482b      	ldr	r0, [pc, #172]	; (8007474 <pbuf_free+0xc8>)
 80073c6:	f005 f8e0 	bl	800c58a <iprintf>
    return 0;
 80073ca:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80073cc:	4630      	mov	r0, r6
 80073ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 80073d0:	4b26      	ldr	r3, [pc, #152]	; (800746c <pbuf_free+0xc0>)
 80073d2:	f240 22de 	movw	r2, #734	; 0x2de
 80073d6:	4928      	ldr	r1, [pc, #160]	; (8007478 <pbuf_free+0xcc>)
 80073d8:	4826      	ldr	r0, [pc, #152]	; (8007474 <pbuf_free+0xc8>)
 80073da:	f005 f8d6 	bl	800c58a <iprintf>
 80073de:	e7eb      	b.n	80073b8 <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80073e0:	4b22      	ldr	r3, [pc, #136]	; (800746c <pbuf_free+0xc0>)
 80073e2:	f240 22eb 	movw	r2, #747	; 0x2eb
 80073e6:	4925      	ldr	r1, [pc, #148]	; (800747c <pbuf_free+0xd0>)
 80073e8:	4822      	ldr	r0, [pc, #136]	; (8007474 <pbuf_free+0xc8>)
 80073ea:	f005 f8ce 	bl	800c58a <iprintf>
 80073ee:	e00d      	b.n	800740c <pbuf_free+0x60>
        pc->custom_free_function(p);
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	4620      	mov	r0, r4
 80073f4:	4798      	blx	r3
      count++;
 80073f6:	3601      	adds	r6, #1
 80073f8:	b2f6      	uxtb	r6, r6
      p = q;
 80073fa:	462c      	mov	r4, r5
  while (p != NULL) {
 80073fc:	2c00      	cmp	r4, #0
 80073fe:	d0e5      	beq.n	80073cc <pbuf_free+0x20>
    SYS_ARCH_PROTECT(old_level);
 8007400:	f004 fb3a 	bl	800ba78 <sys_arch_protect>
 8007404:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007406:	89e3      	ldrh	r3, [r4, #14]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0e9      	beq.n	80073e0 <pbuf_free+0x34>
    ref = --(p->ref);
 800740c:	89e5      	ldrh	r5, [r4, #14]
 800740e:	3d01      	subs	r5, #1
 8007410:	b2ad      	uxth	r5, r5
 8007412:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8007414:	4638      	mov	r0, r7
 8007416:	f004 fb3b 	bl	800ba90 <sys_arch_unprotect>
    if (ref == 0) {
 800741a:	bb25      	cbnz	r5, 8007466 <pbuf_free+0xba>
      q = p->next;
 800741c:	6825      	ldr	r5, [r4, #0]
      type = p->type;
 800741e:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007420:	7b62      	ldrb	r2, [r4, #13]
 8007422:	f012 0f02 	tst.w	r2, #2
 8007426:	d00a      	beq.n	800743e <pbuf_free+0x92>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e0      	bne.n	80073f0 <pbuf_free+0x44>
 800742e:	4b0f      	ldr	r3, [pc, #60]	; (800746c <pbuf_free+0xc0>)
 8007430:	f240 22f9 	movw	r2, #761	; 0x2f9
 8007434:	4912      	ldr	r1, [pc, #72]	; (8007480 <pbuf_free+0xd4>)
 8007436:	480f      	ldr	r0, [pc, #60]	; (8007474 <pbuf_free+0xc8>)
 8007438:	f005 f8a7 	bl	800c58a <iprintf>
 800743c:	e7d8      	b.n	80073f0 <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 800743e:	2b03      	cmp	r3, #3
 8007440:	d007      	beq.n	8007452 <pbuf_free+0xa6>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8007442:	3b01      	subs	r3, #1
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	d908      	bls.n	800745c <pbuf_free+0xb0>
          mem_free(p);
 800744a:	4620      	mov	r0, r4
 800744c:	f7ff fbb4 	bl	8006bb8 <mem_free>
 8007450:	e7d1      	b.n	80073f6 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 8007452:	4621      	mov	r1, r4
 8007454:	200c      	movs	r0, #12
 8007456:	f7ff fdd3 	bl	8007000 <memp_free>
 800745a:	e7cc      	b.n	80073f6 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 800745c:	4621      	mov	r1, r4
 800745e:	200b      	movs	r0, #11
 8007460:	f7ff fdce 	bl	8007000 <memp_free>
 8007464:	e7c7      	b.n	80073f6 <pbuf_free+0x4a>
      p = NULL;
 8007466:	2400      	movs	r4, #0
 8007468:	e7c8      	b.n	80073fc <pbuf_free+0x50>
 800746a:	bf00      	nop
 800746c:	0800da90 	.word	0x0800da90
 8007470:	0800cb70 	.word	0x0800cb70
 8007474:	0800c8d0 	.word	0x0800c8d0
 8007478:	0800da3c 	.word	0x0800da3c
 800747c:	0800da54 	.word	0x0800da54
 8007480:	0800da6c 	.word	0x0800da6c

08007484 <pbuf_alloc>:
{
 8007484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007488:	460d      	mov	r5, r1
 800748a:	4617      	mov	r7, r2
  switch (layer) {
 800748c:	2804      	cmp	r0, #4
 800748e:	d80a      	bhi.n	80074a6 <pbuf_alloc+0x22>
 8007490:	e8df f000 	tbb	[pc, r0]
 8007494:	05031412 	.word	0x05031412
 8007498:	07          	.byte	0x07
 8007499:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800749a:	240e      	movs	r4, #14
    break;
 800749c:	e00f      	b.n	80074be <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800749e:	2400      	movs	r4, #0
    break;
 80074a0:	e00d      	b.n	80074be <pbuf_alloc+0x3a>
    offset = 0;
 80074a2:	2400      	movs	r4, #0
    break;
 80074a4:	e00b      	b.n	80074be <pbuf_alloc+0x3a>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80074a6:	4b64      	ldr	r3, [pc, #400]	; (8007638 <pbuf_alloc+0x1b4>)
 80074a8:	f44f 728b 	mov.w	r2, #278	; 0x116
 80074ac:	4963      	ldr	r1, [pc, #396]	; (800763c <pbuf_alloc+0x1b8>)
 80074ae:	4864      	ldr	r0, [pc, #400]	; (8007640 <pbuf_alloc+0x1bc>)
 80074b0:	f005 f86b 	bl	800c58a <iprintf>
    return NULL;
 80074b4:	2600      	movs	r6, #0
 80074b6:	e0b1      	b.n	800761c <pbuf_alloc+0x198>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80074b8:	2436      	movs	r4, #54	; 0x36
 80074ba:	e000      	b.n	80074be <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80074bc:	2422      	movs	r4, #34	; 0x22
  switch (type) {
 80074be:	2f03      	cmp	r7, #3
 80074c0:	f200 80af 	bhi.w	8007622 <pbuf_alloc+0x19e>
 80074c4:	e8df f007 	tbb	[pc, r7]
 80074c8:	029b9b7b 	.word	0x029b9b7b
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80074cc:	200c      	movs	r0, #12
 80074ce:	f7ff fd7d 	bl	8006fcc <memp_malloc>
    if (p == NULL) {
 80074d2:	4606      	mov	r6, r0
 80074d4:	b1f8      	cbz	r0, 8007516 <pbuf_alloc+0x92>
    p->type = type;
 80074d6:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80074dc:	f104 0310 	add.w	r3, r4, #16
 80074e0:	4403      	add	r3, r0
 80074e2:	3303      	adds	r3, #3
 80074e4:	f023 0303 	bic.w	r3, r3, #3
 80074e8:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 80074ea:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80074ec:	1ce2      	adds	r2, r4, #3
 80074ee:	f022 0203 	bic.w	r2, r2, #3
 80074f2:	f5c2 7201 	rsb	r2, r2, #516	; 0x204
 80074f6:	42aa      	cmp	r2, r5
 80074f8:	bf28      	it	cs
 80074fa:	462a      	movcs	r2, r5
 80074fc:	b292      	uxth	r2, r2
 80074fe:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007500:	4413      	add	r3, r2
 8007502:	f500 7805 	add.w	r8, r0, #532	; 0x214
 8007506:	4543      	cmp	r3, r8
 8007508:	d808      	bhi.n	800751c <pbuf_alloc+0x98>
    p->ref = 1;
 800750a:	2301      	movs	r3, #1
 800750c:	81f3      	strh	r3, [r6, #14]
    rem_len = length - p->len;
 800750e:	8973      	ldrh	r3, [r6, #10]
 8007510:	1aed      	subs	r5, r5, r3
    r = p;
 8007512:	46b1      	mov	r9, r6
    while (rem_len > 0) {
 8007514:	e026      	b.n	8007564 <pbuf_alloc+0xe0>
      PBUF_POOL_IS_EMPTY();
 8007516:	f7ff fec5 	bl	80072a4 <pbuf_pool_is_empty>
      return NULL;
 800751a:	e07f      	b.n	800761c <pbuf_alloc+0x198>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800751c:	4b46      	ldr	r3, [pc, #280]	; (8007638 <pbuf_alloc+0x1b4>)
 800751e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8007522:	4948      	ldr	r1, [pc, #288]	; (8007644 <pbuf_alloc+0x1c0>)
 8007524:	4846      	ldr	r0, [pc, #280]	; (8007640 <pbuf_alloc+0x1bc>)
 8007526:	f005 f830 	bl	800c58a <iprintf>
 800752a:	e7ee      	b.n	800750a <pbuf_alloc+0x86>
        PBUF_POOL_IS_EMPTY();
 800752c:	f7ff feba 	bl	80072a4 <pbuf_pool_is_empty>
        pbuf_free(p);
 8007530:	4630      	mov	r0, r6
 8007532:	f7ff ff3b 	bl	80073ac <pbuf_free>
        return NULL;
 8007536:	4626      	mov	r6, r4
 8007538:	e070      	b.n	800761c <pbuf_alloc+0x198>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800753a:	4b3f      	ldr	r3, [pc, #252]	; (8007638 <pbuf_alloc+0x1b4>)
 800753c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8007540:	4941      	ldr	r1, [pc, #260]	; (8007648 <pbuf_alloc+0x1c4>)
 8007542:	483f      	ldr	r0, [pc, #252]	; (8007640 <pbuf_alloc+0x1bc>)
 8007544:	f005 f821 	bl	800c58a <iprintf>
 8007548:	e01e      	b.n	8007588 <pbuf_alloc+0x104>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800754a:	4b3b      	ldr	r3, [pc, #236]	; (8007638 <pbuf_alloc+0x1b4>)
 800754c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8007550:	493e      	ldr	r1, [pc, #248]	; (800764c <pbuf_alloc+0x1c8>)
 8007552:	483b      	ldr	r0, [pc, #236]	; (8007640 <pbuf_alloc+0x1bc>)
 8007554:	f005 f819 	bl	800c58a <iprintf>
 8007558:	e024      	b.n	80075a4 <pbuf_alloc+0x120>
      q->ref = 1;
 800755a:	2301      	movs	r3, #1
 800755c:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 800755e:	8963      	ldrh	r3, [r4, #10]
 8007560:	1aed      	subs	r5, r5, r3
      r = q;
 8007562:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 8007564:	2d00      	cmp	r5, #0
 8007566:	dd55      	ble.n	8007614 <pbuf_alloc+0x190>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007568:	200c      	movs	r0, #12
 800756a:	f7ff fd2f 	bl	8006fcc <memp_malloc>
      if (q == NULL) {
 800756e:	4604      	mov	r4, r0
 8007570:	2800      	cmp	r0, #0
 8007572:	d0db      	beq.n	800752c <pbuf_alloc+0xa8>
      q->type = type;
 8007574:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 800757a:	6003      	str	r3, [r0, #0]
      r->next = q;
 800757c:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8007580:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007584:	429d      	cmp	r5, r3
 8007586:	dcd8      	bgt.n	800753a <pbuf_alloc+0xb6>
      q->tot_len = (u16_t)rem_len;
 8007588:	b2ab      	uxth	r3, r5
 800758a:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800758c:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8007590:	bf28      	it	cs
 8007592:	f44f 7301 	movcs.w	r3, #516	; 0x204
 8007596:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8007598:	f104 0310 	add.w	r3, r4, #16
 800759c:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800759e:	f013 0f03 	tst.w	r3, #3
 80075a2:	d1d2      	bne.n	800754a <pbuf_alloc+0xc6>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80075a4:	6873      	ldr	r3, [r6, #4]
 80075a6:	8972      	ldrh	r2, [r6, #10]
 80075a8:	4413      	add	r3, r2
 80075aa:	4598      	cmp	r8, r3
 80075ac:	d2d5      	bcs.n	800755a <pbuf_alloc+0xd6>
 80075ae:	4b22      	ldr	r3, [pc, #136]	; (8007638 <pbuf_alloc+0x1b4>)
 80075b0:	f240 1255 	movw	r2, #341	; 0x155
 80075b4:	4923      	ldr	r1, [pc, #140]	; (8007644 <pbuf_alloc+0x1c0>)
 80075b6:	4822      	ldr	r0, [pc, #136]	; (8007640 <pbuf_alloc+0x1bc>)
 80075b8:	f004 ffe7 	bl	800c58a <iprintf>
 80075bc:	e7cd      	b.n	800755a <pbuf_alloc+0xd6>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80075be:	f104 0013 	add.w	r0, r4, #19
 80075c2:	f020 0003 	bic.w	r0, r0, #3
 80075c6:	b283      	uxth	r3, r0
 80075c8:	1cea      	adds	r2, r5, #3
 80075ca:	b290      	uxth	r0, r2
 80075cc:	f020 0003 	bic.w	r0, r0, #3
 80075d0:	4418      	add	r0, r3
 80075d2:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80075d4:	f022 0203 	bic.w	r2, r2, #3
 80075d8:	4290      	cmp	r0, r2
 80075da:	d32b      	bcc.n	8007634 <pbuf_alloc+0x1b0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 80075dc:	f7ff fbe6 	bl	8006dac <mem_malloc>
    if (p == NULL) {
 80075e0:	4606      	mov	r6, r0
 80075e2:	b1d8      	cbz	r0, 800761c <pbuf_alloc+0x198>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80075e4:	f104 0310 	add.w	r3, r4, #16
 80075e8:	4403      	add	r3, r0
 80075ea:	3303      	adds	r3, #3
 80075ec:	f023 0303 	bic.w	r3, r3, #3
 80075f0:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80075f2:	8105      	strh	r5, [r0, #8]
 80075f4:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	6003      	str	r3, [r0, #0]
    p->type = type;
 80075fa:	7307      	strb	r7, [r0, #12]
 80075fc:	e00a      	b.n	8007614 <pbuf_alloc+0x190>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80075fe:	200b      	movs	r0, #11
 8007600:	f7ff fce4 	bl	8006fcc <memp_malloc>
    if (p == NULL) {
 8007604:	4606      	mov	r6, r0
 8007606:	b148      	cbz	r0, 800761c <pbuf_alloc+0x198>
    p->payload = NULL;
 8007608:	2300      	movs	r3, #0
 800760a:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 800760c:	8105      	strh	r5, [r0, #8]
 800760e:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8007610:	6003      	str	r3, [r0, #0]
    p->type = type;
 8007612:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 8007614:	2301      	movs	r3, #1
 8007616:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	7373      	strb	r3, [r6, #13]
}
 800761c:	4630      	mov	r0, r6
 800761e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007622:	4b05      	ldr	r3, [pc, #20]	; (8007638 <pbuf_alloc+0x1b4>)
 8007624:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8007628:	4909      	ldr	r1, [pc, #36]	; (8007650 <pbuf_alloc+0x1cc>)
 800762a:	4805      	ldr	r0, [pc, #20]	; (8007640 <pbuf_alloc+0x1bc>)
 800762c:	f004 ffad 	bl	800c58a <iprintf>
    return NULL;
 8007630:	2600      	movs	r6, #0
 8007632:	e7f3      	b.n	800761c <pbuf_alloc+0x198>
        return NULL;
 8007634:	2600      	movs	r6, #0
 8007636:	e7f1      	b.n	800761c <pbuf_alloc+0x198>
 8007638:	0800da90 	.word	0x0800da90
 800763c:	0800d7d8 	.word	0x0800d7d8
 8007640:	0800c8d0 	.word	0x0800c8d0
 8007644:	0800d7f4 	.word	0x0800d7f4
 8007648:	0800d85c 	.word	0x0800d85c
 800764c:	0800d870 	.word	0x0800d870
 8007650:	0800d8a0 	.word	0x0800d8a0

08007654 <pbuf_realloc>:
{
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007658:	4604      	mov	r4, r0
 800765a:	b198      	cbz	r0, 8007684 <pbuf_realloc+0x30>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800765c:	7b23      	ldrb	r3, [r4, #12]
 800765e:	2b03      	cmp	r3, #3
 8007660:	d00b      	beq.n	800767a <pbuf_realloc+0x26>
 8007662:	2b01      	cmp	r3, #1
 8007664:	d009      	beq.n	800767a <pbuf_realloc+0x26>
 8007666:	b143      	cbz	r3, 800767a <pbuf_realloc+0x26>
 8007668:	2b02      	cmp	r3, #2
 800766a:	d006      	beq.n	800767a <pbuf_realloc+0x26>
 800766c:	4b2b      	ldr	r3, [pc, #172]	; (800771c <pbuf_realloc+0xc8>)
 800766e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007672:	492b      	ldr	r1, [pc, #172]	; (8007720 <pbuf_realloc+0xcc>)
 8007674:	482b      	ldr	r0, [pc, #172]	; (8007724 <pbuf_realloc+0xd0>)
 8007676:	f004 ff88 	bl	800c58a <iprintf>
  if (new_len >= p->tot_len) {
 800767a:	8926      	ldrh	r6, [r4, #8]
 800767c:	42ae      	cmp	r6, r5
 800767e:	d938      	bls.n	80076f2 <pbuf_realloc+0x9e>
  grow = new_len - p->tot_len;
 8007680:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 8007682:	e00d      	b.n	80076a0 <pbuf_realloc+0x4c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007684:	4b25      	ldr	r3, [pc, #148]	; (800771c <pbuf_realloc+0xc8>)
 8007686:	f240 12f3 	movw	r2, #499	; 0x1f3
 800768a:	4927      	ldr	r1, [pc, #156]	; (8007728 <pbuf_realloc+0xd4>)
 800768c:	4825      	ldr	r0, [pc, #148]	; (8007724 <pbuf_realloc+0xd0>)
 800768e:	f004 ff7c 	bl	800c58a <iprintf>
 8007692:	e7e3      	b.n	800765c <pbuf_realloc+0x8>
    q->tot_len += (u16_t)grow;
 8007694:	8923      	ldrh	r3, [r4, #8]
 8007696:	fa13 f386 	uxtah	r3, r3, r6
 800769a:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800769c:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800769e:	b184      	cbz	r4, 80076c2 <pbuf_realloc+0x6e>
  while (rem_len > q->len) {
 80076a0:	8961      	ldrh	r1, [r4, #10]
 80076a2:	428d      	cmp	r5, r1
 80076a4:	d915      	bls.n	80076d2 <pbuf_realloc+0x7e>
    rem_len -= q->len;
 80076a6:	1a69      	subs	r1, r5, r1
 80076a8:	b28d      	uxth	r5, r1
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80076aa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80076ae:	429e      	cmp	r6, r3
 80076b0:	ddf0      	ble.n	8007694 <pbuf_realloc+0x40>
 80076b2:	4b1a      	ldr	r3, [pc, #104]	; (800771c <pbuf_realloc+0xc8>)
 80076b4:	f240 220b 	movw	r2, #523	; 0x20b
 80076b8:	491c      	ldr	r1, [pc, #112]	; (800772c <pbuf_realloc+0xd8>)
 80076ba:	481a      	ldr	r0, [pc, #104]	; (8007724 <pbuf_realloc+0xd0>)
 80076bc:	f004 ff65 	bl	800c58a <iprintf>
 80076c0:	e7e8      	b.n	8007694 <pbuf_realloc+0x40>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80076c2:	4b16      	ldr	r3, [pc, #88]	; (800771c <pbuf_realloc+0xc8>)
 80076c4:	f240 220f 	movw	r2, #527	; 0x20f
 80076c8:	4919      	ldr	r1, [pc, #100]	; (8007730 <pbuf_realloc+0xdc>)
 80076ca:	4816      	ldr	r0, [pc, #88]	; (8007724 <pbuf_realloc+0xd0>)
 80076cc:	f004 ff5d 	bl	800c58a <iprintf>
 80076d0:	e7e6      	b.n	80076a0 <pbuf_realloc+0x4c>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80076d2:	7b23      	ldrb	r3, [r4, #12]
 80076d4:	b92b      	cbnz	r3, 80076e2 <pbuf_realloc+0x8e>
 80076d6:	428d      	cmp	r5, r1
 80076d8:	d003      	beq.n	80076e2 <pbuf_realloc+0x8e>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80076da:	7b63      	ldrb	r3, [r4, #13]
 80076dc:	f013 0f02 	tst.w	r3, #2
 80076e0:	d008      	beq.n	80076f4 <pbuf_realloc+0xa0>
  q->len = rem_len;
 80076e2:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80076e4:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80076e6:	6820      	ldr	r0, [r4, #0]
 80076e8:	b108      	cbz	r0, 80076ee <pbuf_realloc+0x9a>
    pbuf_free(q->next);
 80076ea:	f7ff fe5f 	bl	80073ac <pbuf_free>
  q->next = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80076f4:	6863      	ldr	r3, [r4, #4]
 80076f6:	1b1b      	subs	r3, r3, r4
 80076f8:	fa15 f183 	uxtah	r1, r5, r3
 80076fc:	b289      	uxth	r1, r1
 80076fe:	4620      	mov	r0, r4
 8007700:	f7ff fab8 	bl	8006c74 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007704:	4604      	mov	r4, r0
 8007706:	2800      	cmp	r0, #0
 8007708:	d1eb      	bne.n	80076e2 <pbuf_realloc+0x8e>
 800770a:	4b04      	ldr	r3, [pc, #16]	; (800771c <pbuf_realloc+0xc8>)
 800770c:	f240 221d 	movw	r2, #541	; 0x21d
 8007710:	4908      	ldr	r1, [pc, #32]	; (8007734 <pbuf_realloc+0xe0>)
 8007712:	4804      	ldr	r0, [pc, #16]	; (8007724 <pbuf_realloc+0xd0>)
 8007714:	f004 ff39 	bl	800c58a <iprintf>
 8007718:	e7e3      	b.n	80076e2 <pbuf_realloc+0x8e>
 800771a:	bf00      	nop
 800771c:	0800da90 	.word	0x0800da90
 8007720:	0800db08 	.word	0x0800db08
 8007724:	0800c8d0 	.word	0x0800c8d0
 8007728:	0800daf0 	.word	0x0800daf0
 800772c:	0800db24 	.word	0x0800db24
 8007730:	0800db38 	.word	0x0800db38
 8007734:	0800db50 	.word	0x0800db50

08007738 <pbuf_clen>:
u16_t
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
 8007738:	2300      	movs	r3, #0
  while (p != NULL) {
 800773a:	e002      	b.n	8007742 <pbuf_clen+0xa>
    ++len;
 800773c:	3301      	adds	r3, #1
 800773e:	b29b      	uxth	r3, r3
    p = p->next;
 8007740:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 8007742:	2800      	cmp	r0, #0
 8007744:	d1fa      	bne.n	800773c <pbuf_clen+0x4>
  }
  return len;
}
 8007746:	4618      	mov	r0, r3
 8007748:	4770      	bx	lr
	...

0800774c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800774c:	b198      	cbz	r0, 8007776 <pbuf_ref+0x2a>
{
 800774e:	b510      	push	{r4, lr}
 8007750:	4604      	mov	r4, r0
    SYS_ARCH_INC(p->ref, 1);
 8007752:	f004 f991 	bl	800ba78 <sys_arch_protect>
 8007756:	89e3      	ldrh	r3, [r4, #14]
 8007758:	3301      	adds	r3, #1
 800775a:	81e3      	strh	r3, [r4, #14]
 800775c:	f004 f998 	bl	800ba90 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007760:	89e3      	ldrh	r3, [r4, #14]
 8007762:	b103      	cbz	r3, 8007766 <pbuf_ref+0x1a>
 8007764:	bd10      	pop	{r4, pc}
 8007766:	4b04      	ldr	r3, [pc, #16]	; (8007778 <pbuf_ref+0x2c>)
 8007768:	f240 3239 	movw	r2, #825	; 0x339
 800776c:	4903      	ldr	r1, [pc, #12]	; (800777c <pbuf_ref+0x30>)
 800776e:	4804      	ldr	r0, [pc, #16]	; (8007780 <pbuf_ref+0x34>)
 8007770:	f004 ff0b 	bl	800c58a <iprintf>
  }
}
 8007774:	e7f6      	b.n	8007764 <pbuf_ref+0x18>
 8007776:	4770      	bx	lr
 8007778:	0800da90 	.word	0x0800da90
 800777c:	0800db6c 	.word	0x0800db6c
 8007780:	0800c8d0 	.word	0x0800c8d0

08007784 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007784:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007786:	b110      	cbz	r0, 800778e <pbuf_cat+0xa>
 8007788:	460d      	mov	r5, r1
 800778a:	4604      	mov	r4, r0
 800778c:	b961      	cbnz	r1, 80077a8 <pbuf_cat+0x24>
 800778e:	4b15      	ldr	r3, [pc, #84]	; (80077e4 <pbuf_cat+0x60>)
 8007790:	f240 324d 	movw	r2, #845	; 0x34d
 8007794:	4914      	ldr	r1, [pc, #80]	; (80077e8 <pbuf_cat+0x64>)
 8007796:	4815      	ldr	r0, [pc, #84]	; (80077ec <pbuf_cat+0x68>)
 8007798:	f004 fef7 	bl	800c58a <iprintf>
 800779c:	bd38      	pop	{r3, r4, r5, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800779e:	892b      	ldrh	r3, [r5, #8]
 80077a0:	8921      	ldrh	r1, [r4, #8]
 80077a2:	440b      	add	r3, r1
 80077a4:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80077a6:	4614      	mov	r4, r2
 80077a8:	6822      	ldr	r2, [r4, #0]
 80077aa:	2a00      	cmp	r2, #0
 80077ac:	d1f7      	bne.n	800779e <pbuf_cat+0x1a>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80077ae:	8922      	ldrh	r2, [r4, #8]
 80077b0:	8963      	ldrh	r3, [r4, #10]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d006      	beq.n	80077c4 <pbuf_cat+0x40>
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <pbuf_cat+0x60>)
 80077b8:	f240 3255 	movw	r2, #853	; 0x355
 80077bc:	490c      	ldr	r1, [pc, #48]	; (80077f0 <pbuf_cat+0x6c>)
 80077be:	480b      	ldr	r0, [pc, #44]	; (80077ec <pbuf_cat+0x68>)
 80077c0:	f004 fee3 	bl	800c58a <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	b133      	cbz	r3, 80077d6 <pbuf_cat+0x52>
 80077c8:	4b06      	ldr	r3, [pc, #24]	; (80077e4 <pbuf_cat+0x60>)
 80077ca:	f240 3256 	movw	r2, #854	; 0x356
 80077ce:	4909      	ldr	r1, [pc, #36]	; (80077f4 <pbuf_cat+0x70>)
 80077d0:	4806      	ldr	r0, [pc, #24]	; (80077ec <pbuf_cat+0x68>)
 80077d2:	f004 feda 	bl	800c58a <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80077d6:	892b      	ldrh	r3, [r5, #8]
 80077d8:	8922      	ldrh	r2, [r4, #8]
 80077da:	4413      	add	r3, r2
 80077dc:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80077de:	6025      	str	r5, [r4, #0]
 80077e0:	bd38      	pop	{r3, r4, r5, pc}
 80077e2:	bf00      	nop
 80077e4:	0800da90 	.word	0x0800da90
 80077e8:	0800d8e0 	.word	0x0800d8e0
 80077ec:	0800c8d0 	.word	0x0800c8d0
 80077f0:	0800d918 	.word	0x0800d918
 80077f4:	0800d948 	.word	0x0800d948

080077f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80077f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80077fc:	b150      	cbz	r0, 8007814 <pbuf_copy+0x1c>
 80077fe:	460d      	mov	r5, r1
 8007800:	4607      	mov	r7, r0
 8007802:	b139      	cbz	r1, 8007814 <pbuf_copy+0x1c>
 8007804:	8902      	ldrh	r2, [r0, #8]
 8007806:	890b      	ldrh	r3, [r1, #8]
 8007808:	429a      	cmp	r2, r3
 800780a:	d303      	bcc.n	8007814 <pbuf_copy+0x1c>
 800780c:	f04f 0800 	mov.w	r8, #0
 8007810:	4646      	mov	r6, r8
 8007812:	e02c      	b.n	800786e <pbuf_copy+0x76>
 8007814:	4b3f      	ldr	r3, [pc, #252]	; (8007914 <pbuf_copy+0x11c>)
 8007816:	f240 32bd 	movw	r2, #957	; 0x3bd
 800781a:	493f      	ldr	r1, [pc, #252]	; (8007918 <pbuf_copy+0x120>)
 800781c:	483f      	ldr	r0, [pc, #252]	; (800791c <pbuf_copy+0x124>)
 800781e:	f004 feb4 	bl	800c58a <iprintf>
 8007822:	f06f 000f 	mvn.w	r0, #15
 8007826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800782a:	1b9b      	subs	r3, r3, r6
 800782c:	b29c      	uxth	r4, r3
 800782e:	e026      	b.n	800787e <pbuf_copy+0x86>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007830:	4b38      	ldr	r3, [pc, #224]	; (8007914 <pbuf_copy+0x11c>)
 8007832:	f240 32cd 	movw	r2, #973	; 0x3cd
 8007836:	493a      	ldr	r1, [pc, #232]	; (8007920 <pbuf_copy+0x128>)
 8007838:	4838      	ldr	r0, [pc, #224]	; (800791c <pbuf_copy+0x124>)
 800783a:	f004 fea6 	bl	800c58a <iprintf>
 800783e:	e02d      	b.n	800789c <pbuf_copy+0xa4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007840:	4b34      	ldr	r3, [pc, #208]	; (8007914 <pbuf_copy+0x11c>)
 8007842:	f240 32ce 	movw	r2, #974	; 0x3ce
 8007846:	4937      	ldr	r1, [pc, #220]	; (8007924 <pbuf_copy+0x12c>)
 8007848:	4834      	ldr	r0, [pc, #208]	; (800791c <pbuf_copy+0x124>)
 800784a:	f004 fe9e 	bl	800c58a <iprintf>
 800784e:	e028      	b.n	80078a2 <pbuf_copy+0xaa>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8007850:	897b      	ldrh	r3, [r7, #10]
 8007852:	429e      	cmp	r6, r3
 8007854:	d02c      	beq.n	80078b0 <pbuf_copy+0xb8>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007856:	b11d      	cbz	r5, 8007860 <pbuf_copy+0x68>
 8007858:	896a      	ldrh	r2, [r5, #10]
 800785a:	892b      	ldrh	r3, [r5, #8]
 800785c:	429a      	cmp	r2, r3
 800785e:	d039      	beq.n	80078d4 <pbuf_copy+0xdc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007860:	b11f      	cbz	r7, 800786a <pbuf_copy+0x72>
 8007862:	897a      	ldrh	r2, [r7, #10]
 8007864:	893b      	ldrh	r3, [r7, #8]
 8007866:	429a      	cmp	r2, r3
 8007868:	d042      	beq.n	80078f0 <pbuf_copy+0xf8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800786a:	2d00      	cmp	r5, #0
 800786c:	d04e      	beq.n	800790c <pbuf_copy+0x114>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800786e:	897b      	ldrh	r3, [r7, #10]
 8007870:	1b99      	subs	r1, r3, r6
 8007872:	896c      	ldrh	r4, [r5, #10]
 8007874:	eba4 0208 	sub.w	r2, r4, r8
 8007878:	4291      	cmp	r1, r2
 800787a:	dbd6      	blt.n	800782a <pbuf_copy+0x32>
      len = p_from->len - offset_from;
 800787c:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	6869      	ldr	r1, [r5, #4]
 8007882:	4622      	mov	r2, r4
 8007884:	4441      	add	r1, r8
 8007886:	4430      	add	r0, r6
 8007888:	f004 ff95 	bl	800c7b6 <memcpy>
    offset_to += len;
 800788c:	4426      	add	r6, r4
 800788e:	b2b6      	uxth	r6, r6
    offset_from += len;
 8007890:	4444      	add	r4, r8
 8007892:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007896:	897b      	ldrh	r3, [r7, #10]
 8007898:	429e      	cmp	r6, r3
 800789a:	d8c9      	bhi.n	8007830 <pbuf_copy+0x38>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800789c:	896b      	ldrh	r3, [r5, #10]
 800789e:	4598      	cmp	r8, r3
 80078a0:	d8ce      	bhi.n	8007840 <pbuf_copy+0x48>
    if (offset_from >= p_from->len) {
 80078a2:	896b      	ldrh	r3, [r5, #10]
 80078a4:	4598      	cmp	r8, r3
 80078a6:	d3d3      	bcc.n	8007850 <pbuf_copy+0x58>
      p_from = p_from->next;
 80078a8:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 80078aa:	f04f 0800 	mov.w	r8, #0
 80078ae:	e7cf      	b.n	8007850 <pbuf_copy+0x58>
      p_to = p_to->next;
 80078b0:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80078b2:	b10f      	cbz	r7, 80078b8 <pbuf_copy+0xc0>
      offset_to = 0;
 80078b4:	2600      	movs	r6, #0
 80078b6:	e7ce      	b.n	8007856 <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80078b8:	b90d      	cbnz	r5, 80078be <pbuf_copy+0xc6>
      offset_to = 0;
 80078ba:	2600      	movs	r6, #0
 80078bc:	e7cb      	b.n	8007856 <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80078be:	4b15      	ldr	r3, [pc, #84]	; (8007914 <pbuf_copy+0x11c>)
 80078c0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80078c4:	4918      	ldr	r1, [pc, #96]	; (8007928 <pbuf_copy+0x130>)
 80078c6:	4815      	ldr	r0, [pc, #84]	; (800791c <pbuf_copy+0x124>)
 80078c8:	f004 fe5f 	bl	800c58a <iprintf>
 80078cc:	f06f 000f 	mvn.w	r0, #15
 80078d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0c2      	beq.n	8007860 <pbuf_copy+0x68>
 80078da:	4b0e      	ldr	r3, [pc, #56]	; (8007914 <pbuf_copy+0x11c>)
 80078dc:	f240 32de 	movw	r2, #990	; 0x3de
 80078e0:	4912      	ldr	r1, [pc, #72]	; (800792c <pbuf_copy+0x134>)
 80078e2:	480e      	ldr	r0, [pc, #56]	; (800791c <pbuf_copy+0x124>)
 80078e4:	f004 fe51 	bl	800c58a <iprintf>
 80078e8:	f06f 0005 	mvn.w	r0, #5
 80078ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0b9      	beq.n	800786a <pbuf_copy+0x72>
 80078f6:	4b07      	ldr	r3, [pc, #28]	; (8007914 <pbuf_copy+0x11c>)
 80078f8:	f240 32e3 	movw	r2, #995	; 0x3e3
 80078fc:	490b      	ldr	r1, [pc, #44]	; (800792c <pbuf_copy+0x134>)
 80078fe:	4807      	ldr	r0, [pc, #28]	; (800791c <pbuf_copy+0x124>)
 8007900:	f004 fe43 	bl	800c58a <iprintf>
 8007904:	f06f 0005 	mvn.w	r0, #5
 8007908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800790c:	2000      	movs	r0, #0
}
 800790e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007912:	bf00      	nop
 8007914:	0800da90 	.word	0x0800da90
 8007918:	0800d958 	.word	0x0800d958
 800791c:	0800c8d0 	.word	0x0800c8d0
 8007920:	0800d988 	.word	0x0800d988
 8007924:	0800d9a0 	.word	0x0800d9a0
 8007928:	0800d9bc 	.word	0x0800d9bc
 800792c:	0800d9cc 	.word	0x0800d9cc

08007930 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007934:	b128      	cbz	r0, 8007942 <pbuf_copy_partial+0x12>
 8007936:	460f      	mov	r7, r1
 8007938:	4690      	mov	r8, r2
 800793a:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800793c:	b161      	cbz	r1, 8007958 <pbuf_copy_partial+0x28>
 800793e:	2600      	movs	r6, #0
 8007940:	e027      	b.n	8007992 <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007942:	4b1a      	ldr	r3, [pc, #104]	; (80079ac <pbuf_copy_partial+0x7c>)
 8007944:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007948:	4919      	ldr	r1, [pc, #100]	; (80079b0 <pbuf_copy_partial+0x80>)
 800794a:	481a      	ldr	r0, [pc, #104]	; (80079b4 <pbuf_copy_partial+0x84>)
 800794c:	f004 fe1d 	bl	800c58a <iprintf>
 8007950:	2600      	movs	r6, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8007952:	4630      	mov	r0, r6
 8007954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007958:	4b14      	ldr	r3, [pc, #80]	; (80079ac <pbuf_copy_partial+0x7c>)
 800795a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800795e:	4916      	ldr	r1, [pc, #88]	; (80079b8 <pbuf_copy_partial+0x88>)
 8007960:	4814      	ldr	r0, [pc, #80]	; (80079b4 <pbuf_copy_partial+0x84>)
 8007962:	f004 fe12 	bl	800c58a <iprintf>
 8007966:	2600      	movs	r6, #0
 8007968:	e7f3      	b.n	8007952 <pbuf_copy_partial+0x22>
      buf_copy_len = p->len - offset;
 800796a:	896a      	ldrh	r2, [r5, #10]
 800796c:	1ad2      	subs	r2, r2, r3
 800796e:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 8007970:	45a0      	cmp	r8, r4
 8007972:	d200      	bcs.n	8007976 <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 8007974:	4644      	mov	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007976:	6869      	ldr	r1, [r5, #4]
 8007978:	4622      	mov	r2, r4
 800797a:	4419      	add	r1, r3
 800797c:	19b8      	adds	r0, r7, r6
 800797e:	f004 ff1a 	bl	800c7b6 <memcpy>
      copied_total += buf_copy_len;
 8007982:	4426      	add	r6, r4
 8007984:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 8007986:	eba8 0404 	sub.w	r4, r8, r4
 800798a:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 800798e:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007990:	682d      	ldr	r5, [r5, #0]
 8007992:	f1b8 0f00 	cmp.w	r8, #0
 8007996:	d0dc      	beq.n	8007952 <pbuf_copy_partial+0x22>
 8007998:	2d00      	cmp	r5, #0
 800799a:	d0da      	beq.n	8007952 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0e4      	beq.n	800796a <pbuf_copy_partial+0x3a>
 80079a0:	8969      	ldrh	r1, [r5, #10]
 80079a2:	428b      	cmp	r3, r1
 80079a4:	d3e1      	bcc.n	800796a <pbuf_copy_partial+0x3a>
      offset -= p->len;
 80079a6:	1a5b      	subs	r3, r3, r1
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	e7f1      	b.n	8007990 <pbuf_copy_partial+0x60>
 80079ac:	0800da90 	.word	0x0800da90
 80079b0:	0800d9f8 	.word	0x0800d9f8
 80079b4:	0800c8d0 	.word	0x0800c8d0
 80079b8:	0800da18 	.word	0x0800da18

080079bc <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80079bc:	e000      	b.n	80079c0 <tcp_remove_listener+0x4>
 80079be:	68c0      	ldr	r0, [r0, #12]
 80079c0:	b128      	cbz	r0, 80079ce <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 80079c2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80079c4:	428b      	cmp	r3, r1
 80079c6:	d1fa      	bne.n	80079be <tcp_remove_listener+0x2>
         pcb->listener = NULL;
 80079c8:	2300      	movs	r3, #0
 80079ca:	6783      	str	r3, [r0, #120]	; 0x78
 80079cc:	e7f7      	b.n	80079be <tcp_remove_listener+0x2>
      }
   }
}
 80079ce:	4770      	bx	lr

080079d0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80079d0:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 80079d2:	2400      	movs	r4, #0
 80079d4:	e009      	b.n	80079ea <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80079d6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80079da:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <tcp_new_port+0x5c>)
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	e00c      	b.n	80079fa <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80079e0:	3401      	adds	r4, #1
 80079e2:	b2a4      	uxth	r4, r4
 80079e4:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80079e8:	d21e      	bcs.n	8007a28 <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80079ea:	4a10      	ldr	r2, [pc, #64]	; (8007a2c <tcp_new_port+0x5c>)
 80079ec:	8813      	ldrh	r3, [r2, #0]
 80079ee:	1c59      	adds	r1, r3, #1
 80079f0:	8011      	strh	r1, [r2, #0]
 80079f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d0ed      	beq.n	80079d6 <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80079fa:	2000      	movs	r0, #0
 80079fc:	2803      	cmp	r0, #3
 80079fe:	d80e      	bhi.n	8007a1e <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007a00:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <tcp_new_port+0x60>)
 8007a02:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	b133      	cbz	r3, 8007a18 <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 8007a0a:	8ad9      	ldrh	r1, [r3, #22]
 8007a0c:	4a07      	ldr	r2, [pc, #28]	; (8007a2c <tcp_new_port+0x5c>)
 8007a0e:	8812      	ldrh	r2, [r2, #0]
 8007a10:	4291      	cmp	r1, r2
 8007a12:	d0e5      	beq.n	80079e0 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	e7f7      	b.n	8007a08 <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007a18:	3001      	adds	r0, #1
 8007a1a:	b2c0      	uxtb	r0, r0
 8007a1c:	e7ee      	b.n	80079fc <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007a1e:	4b03      	ldr	r3, [pc, #12]	; (8007a2c <tcp_new_port+0x5c>)
 8007a20:	8818      	ldrh	r0, [r3, #0]
}
 8007a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a26:	4770      	bx	lr
          return 0;
 8007a28:	2000      	movs	r0, #0
 8007a2a:	e7fa      	b.n	8007a22 <tcp_new_port+0x52>
 8007a2c:	2000000c 	.word	0x2000000c
 8007a30:	0800dcb8 	.word	0x0800dcb8

08007a34 <tcp_listen_closed>:
{
 8007a34:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007a36:	4605      	mov	r5, r0
 8007a38:	b150      	cbz	r0, 8007a50 <tcp_listen_closed+0x1c>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007a3a:	7d2b      	ldrb	r3, [r5, #20]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d005      	beq.n	8007a4c <tcp_listen_closed+0x18>
 8007a40:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <tcp_listen_closed+0x40>)
 8007a42:	22c1      	movs	r2, #193	; 0xc1
 8007a44:	490c      	ldr	r1, [pc, #48]	; (8007a78 <tcp_listen_closed+0x44>)
 8007a46:	480d      	ldr	r0, [pc, #52]	; (8007a7c <tcp_listen_closed+0x48>)
 8007a48:	f004 fd9f 	bl	800c58a <iprintf>
{
 8007a4c:	2401      	movs	r4, #1
 8007a4e:	e00e      	b.n	8007a6e <tcp_listen_closed+0x3a>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007a50:	4b08      	ldr	r3, [pc, #32]	; (8007a74 <tcp_listen_closed+0x40>)
 8007a52:	22c0      	movs	r2, #192	; 0xc0
 8007a54:	490a      	ldr	r1, [pc, #40]	; (8007a80 <tcp_listen_closed+0x4c>)
 8007a56:	4809      	ldr	r0, [pc, #36]	; (8007a7c <tcp_listen_closed+0x48>)
 8007a58:	f004 fd97 	bl	800c58a <iprintf>
 8007a5c:	e7ed      	b.n	8007a3a <tcp_listen_closed+0x6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007a5e:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <tcp_listen_closed+0x50>)
 8007a60:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a64:	4629      	mov	r1, r5
 8007a66:	6818      	ldr	r0, [r3, #0]
 8007a68:	f7ff ffa8 	bl	80079bc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007a6c:	3401      	adds	r4, #1
 8007a6e:	2c03      	cmp	r4, #3
 8007a70:	d9f5      	bls.n	8007a5e <tcp_listen_closed+0x2a>
}
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	0800dc40 	.word	0x0800dc40
 8007a78:	0800dc7c 	.word	0x0800dc7c
 8007a7c:	0800c8d0 	.word	0x0800c8d0
 8007a80:	0800dc70 	.word	0x0800dc70
 8007a84:	0800dcb8 	.word	0x0800dcb8

08007a88 <tcp_close_shutdown_fin>:
{
 8007a88:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	b140      	cbz	r0, 8007aa0 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8007a8e:	7d23      	ldrb	r3, [r4, #20]
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d01a      	beq.n	8007aca <tcp_close_shutdown_fin+0x42>
 8007a94:	2b07      	cmp	r3, #7
 8007a96:	d021      	beq.n	8007adc <tcp_close_shutdown_fin+0x54>
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d009      	beq.n	8007ab0 <tcp_close_shutdown_fin+0x28>
    return ERR_OK;
 8007a9c:	2500      	movs	r5, #0
 8007a9e:	e012      	b.n	8007ac6 <tcp_close_shutdown_fin+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007aa0:	4b18      	ldr	r3, [pc, #96]	; (8007b04 <tcp_close_shutdown_fin+0x7c>)
 8007aa2:	f240 124d 	movw	r2, #333	; 0x14d
 8007aa6:	4918      	ldr	r1, [pc, #96]	; (8007b08 <tcp_close_shutdown_fin+0x80>)
 8007aa8:	4818      	ldr	r0, [pc, #96]	; (8007b0c <tcp_close_shutdown_fin+0x84>)
 8007aaa:	f004 fd6e 	bl	800c58a <iprintf>
 8007aae:	e7ee      	b.n	8007a8e <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f003 f891 	bl	800abd8 <tcp_send_fin>
    if (err == ERR_OK) {
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	b908      	cbnz	r0, 8007abe <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8007aba:	2305      	movs	r3, #5
 8007abc:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 8007abe:	b1b5      	cbz	r5, 8007aee <tcp_close_shutdown_fin+0x66>
  } else if (err == ERR_MEM) {
 8007ac0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007ac4:	d017      	beq.n	8007af6 <tcp_close_shutdown_fin+0x6e>
}
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	bd38      	pop	{r3, r4, r5, pc}
    err = tcp_send_fin(pcb);
 8007aca:	4620      	mov	r0, r4
 8007acc:	f003 f884 	bl	800abd8 <tcp_send_fin>
    if (err == ERR_OK) {
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d1f3      	bne.n	8007abe <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8007ad6:	2305      	movs	r3, #5
 8007ad8:	7523      	strb	r3, [r4, #20]
 8007ada:	e7f0      	b.n	8007abe <tcp_close_shutdown_fin+0x36>
    err = tcp_send_fin(pcb);
 8007adc:	4620      	mov	r0, r4
 8007ade:	f003 f87b 	bl	800abd8 <tcp_send_fin>
    if (err == ERR_OK) {
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d1ea      	bne.n	8007abe <tcp_close_shutdown_fin+0x36>
      pcb->state = LAST_ACK;
 8007ae8:	2309      	movs	r3, #9
 8007aea:	7523      	strb	r3, [r4, #20]
 8007aec:	e7e7      	b.n	8007abe <tcp_close_shutdown_fin+0x36>
    tcp_output(pcb);
 8007aee:	4620      	mov	r0, r4
 8007af0:	f003 f8ce 	bl	800ac90 <tcp_output>
 8007af4:	e7e7      	b.n	8007ac6 <tcp_close_shutdown_fin+0x3e>
    pcb->flags |= TF_CLOSEPEND;
 8007af6:	7ea3      	ldrb	r3, [r4, #26]
 8007af8:	f043 0308 	orr.w	r3, r3, #8
 8007afc:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8007afe:	2500      	movs	r5, #0
 8007b00:	e7e1      	b.n	8007ac6 <tcp_close_shutdown_fin+0x3e>
 8007b02:	bf00      	nop
 8007b04:	0800dc40 	.word	0x0800dc40
 8007b08:	0800dc70 	.word	0x0800dc70
 8007b0c:	0800c8d0 	.word	0x0800c8d0

08007b10 <tcp_init>:
{
 8007b10:	4770      	bx	lr
	...

08007b14 <tcp_bind>:
{
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	4605      	mov	r5, r0
  if (ipaddr == NULL) {
 8007b18:	460c      	mov	r4, r1
 8007b1a:	b171      	cbz	r1, 8007b3a <tcp_bind+0x26>
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8007b1c:	2d00      	cmp	r5, #0
 8007b1e:	d039      	beq.n	8007b94 <tcp_bind+0x80>
 8007b20:	2c00      	cmp	r4, #0
 8007b22:	d03a      	beq.n	8007b9a <tcp_bind+0x86>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007b24:	7d2b      	ldrb	r3, [r5, #20]
 8007b26:	b953      	cbnz	r3, 8007b3e <tcp_bind+0x2a>
  if (port == 0) {
 8007b28:	b19a      	cbz	r2, 8007b52 <tcp_bind+0x3e>
 8007b2a:	2600      	movs	r6, #0
    for (i = 0; i < max_pcb_list; i++) {
 8007b2c:	2e03      	cmp	r6, #3
 8007b2e:	dc14      	bgt.n	8007b5a <tcp_bind+0x46>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007b30:	4b21      	ldr	r3, [pc, #132]	; (8007bb8 <tcp_bind+0xa4>)
 8007b32:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	e01c      	b.n	8007b74 <tcp_bind+0x60>
    ipaddr = IP4_ADDR_ANY;
 8007b3a:	4c20      	ldr	r4, [pc, #128]	; (8007bbc <tcp_bind+0xa8>)
 8007b3c:	e7ee      	b.n	8007b1c <tcp_bind+0x8>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007b3e:	4b20      	ldr	r3, [pc, #128]	; (8007bc0 <tcp_bind+0xac>)
 8007b40:	f44f 7211 	mov.w	r2, #580	; 0x244
 8007b44:	491f      	ldr	r1, [pc, #124]	; (8007bc4 <tcp_bind+0xb0>)
 8007b46:	4820      	ldr	r0, [pc, #128]	; (8007bc8 <tcp_bind+0xb4>)
 8007b48:	f004 fd1f 	bl	800c58a <iprintf>
 8007b4c:	f06f 0005 	mvn.w	r0, #5
 8007b50:	bd70      	pop	{r4, r5, r6, pc}
    port = tcp_new_port();
 8007b52:	f7ff ff3d 	bl	80079d0 <tcp_new_port>
    if (port == 0) {
 8007b56:	4602      	mov	r2, r0
 8007b58:	b310      	cbz	r0, 8007ba0 <tcp_bind+0x8c>
  if (!ip_addr_isany(ipaddr)) {
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	b103      	cbz	r3, 8007b60 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007b5e:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 8007b60:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007b62:	4b1a      	ldr	r3, [pc, #104]	; (8007bcc <tcp_bind+0xb8>)
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	60ea      	str	r2, [r5, #12]
 8007b68:	601d      	str	r5, [r3, #0]
 8007b6a:	f003 fbf9 	bl	800b360 <tcp_timer_needed>
  return ERR_OK;
 8007b6e:	2000      	movs	r0, #0
 8007b70:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	b163      	cbz	r3, 8007b90 <tcp_bind+0x7c>
        if (cpcb->local_port == port) {
 8007b76:	8ad9      	ldrh	r1, [r3, #22]
 8007b78:	428a      	cmp	r2, r1
 8007b7a:	d1fa      	bne.n	8007b72 <tcp_bind+0x5e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007b7c:	b19b      	cbz	r3, 8007ba6 <tcp_bind+0x92>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007b7e:	6819      	ldr	r1, [r3, #0]
 8007b80:	b1a1      	cbz	r1, 8007bac <tcp_bind+0x98>
                ip_addr_isany(ipaddr) ||
 8007b82:	6820      	ldr	r0, [r4, #0]
 8007b84:	b1a8      	cbz	r0, 8007bb2 <tcp_bind+0x9e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007b86:	4281      	cmp	r1, r0
 8007b88:	d1f3      	bne.n	8007b72 <tcp_bind+0x5e>
              return ERR_USE;
 8007b8a:	f06f 0007 	mvn.w	r0, #7
}
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8007b90:	3601      	adds	r6, #1
 8007b92:	e7cb      	b.n	8007b2c <tcp_bind+0x18>
    return ERR_VAL;
 8007b94:	f06f 0005 	mvn.w	r0, #5
 8007b98:	bd70      	pop	{r4, r5, r6, pc}
 8007b9a:	f06f 0005 	mvn.w	r0, #5
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_BUF;
 8007ba0:	f06f 0001 	mvn.w	r0, #1
 8007ba4:	bd70      	pop	{r4, r5, r6, pc}
              return ERR_USE;
 8007ba6:	f06f 0007 	mvn.w	r0, #7
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	f06f 0007 	mvn.w	r0, #7
 8007bb0:	bd70      	pop	{r4, r5, r6, pc}
 8007bb2:	f06f 0007 	mvn.w	r0, #7
 8007bb6:	bd70      	pop	{r4, r5, r6, pc}
 8007bb8:	0800dcb8 	.word	0x0800dcb8
 8007bbc:	0800d268 	.word	0x0800d268
 8007bc0:	0800dc40 	.word	0x0800dc40
 8007bc4:	0800dbc4 	.word	0x0800dbc4
 8007bc8:	0800c8d0 	.word	0x0800c8d0
 8007bcc:	20007240 	.word	0x20007240

08007bd0 <tcp_listen_with_backlog_and_err>:
{
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007bd4:	7d03      	ldrb	r3, [r0, #20]
 8007bd6:	bb23      	cbnz	r3, 8007c22 <tcp_listen_with_backlog_and_err+0x52>
 8007bd8:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d042      	beq.n	8007c64 <tcp_listen_with_backlog_and_err+0x94>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007bde:	2002      	movs	r0, #2
 8007be0:	f7ff f9f4 	bl	8006fcc <memp_malloc>
  if (lpcb == NULL) {
 8007be4:	4605      	mov	r5, r0
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d043      	beq.n	8007c72 <tcp_listen_with_backlog_and_err+0xa2>
  lpcb->callback_arg = pcb->callback_arg;
 8007bea:	6923      	ldr	r3, [r4, #16]
 8007bec:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8007bee:	8ae3      	ldrh	r3, [r4, #22]
 8007bf0:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8007bf6:	7d63      	ldrb	r3, [r4, #21]
 8007bf8:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8007bfa:	7a23      	ldrb	r3, [r4, #8]
 8007bfc:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8007bfe:	7aa3      	ldrb	r3, [r4, #10]
 8007c00:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
 8007c02:	7a63      	ldrb	r3, [r4, #9]
 8007c04:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 8007c0a:	8ae3      	ldrh	r3, [r4, #22]
 8007c0c:	b1e3      	cbz	r3, 8007c48 <tcp_listen_with_backlog_and_err+0x78>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007c0e:	4b1a      	ldr	r3, [pc, #104]	; (8007c78 <tcp_listen_with_backlog_and_err+0xa8>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	429c      	cmp	r4, r3
 8007c14:	d010      	beq.n	8007c38 <tcp_listen_with_backlog_and_err+0x68>
 8007c16:	b1ab      	cbz	r3, 8007c44 <tcp_listen_with_backlog_and_err+0x74>
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	4294      	cmp	r4, r2
 8007c1c:	d010      	beq.n	8007c40 <tcp_listen_with_backlog_and_err+0x70>
 8007c1e:	4613      	mov	r3, r2
 8007c20:	e7f9      	b.n	8007c16 <tcp_listen_with_backlog_and_err+0x46>
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007c22:	4b16      	ldr	r3, [pc, #88]	; (8007c7c <tcp_listen_with_backlog_and_err+0xac>)
 8007c24:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8007c28:	4915      	ldr	r1, [pc, #84]	; (8007c80 <tcp_listen_with_backlog_and_err+0xb0>)
 8007c2a:	4816      	ldr	r0, [pc, #88]	; (8007c84 <tcp_listen_with_backlog_and_err+0xb4>)
 8007c2c:	f004 fcad 	bl	800c58a <iprintf>
 8007c30:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8007c34:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007c36:	e018      	b.n	8007c6a <tcp_listen_with_backlog_and_err+0x9a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	4b0f      	ldr	r3, [pc, #60]	; (8007c78 <tcp_listen_with_backlog_and_err+0xa8>)
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e001      	b.n	8007c44 <tcp_listen_with_backlog_and_err+0x74>
 8007c40:	68e2      	ldr	r2, [r4, #12]
 8007c42:	60da      	str	r2, [r3, #12]
 8007c44:	2300      	movs	r3, #0
 8007c46:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8007c48:	4621      	mov	r1, r4
 8007c4a:	2001      	movs	r0, #1
 8007c4c:	f7ff f9d8 	bl	8007000 <memp_free>
  lpcb->accept = tcp_accept_null;
 8007c50:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <tcp_listen_with_backlog_and_err+0xb8>)
 8007c52:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007c54:	4b0d      	ldr	r3, [pc, #52]	; (8007c8c <tcp_listen_with_backlog_and_err+0xbc>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	60ea      	str	r2, [r5, #12]
 8007c5a:	601d      	str	r5, [r3, #0]
 8007c5c:	f003 fb80 	bl	800b360 <tcp_timer_needed>
  res = ERR_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	e002      	b.n	8007c6a <tcp_listen_with_backlog_and_err+0x9a>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8007c64:	4605      	mov	r5, r0
    res = ERR_ALREADY;
 8007c66:	f06f 0308 	mvn.w	r3, #8
  if (err != NULL) {
 8007c6a:	b106      	cbz	r6, 8007c6e <tcp_listen_with_backlog_and_err+0x9e>
    *err = res;
 8007c6c:	7033      	strb	r3, [r6, #0]
}
 8007c6e:	4628      	mov	r0, r5
 8007c70:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 8007c72:	f04f 33ff 	mov.w	r3, #4294967295
 8007c76:	e7f8      	b.n	8007c6a <tcp_listen_with_backlog_and_err+0x9a>
 8007c78:	20007240 	.word	0x20007240
 8007c7c:	0800dc40 	.word	0x0800dc40
 8007c80:	0800dc94 	.word	0x0800dc94
 8007c84:	0800c8d0 	.word	0x0800c8d0
 8007c88:	08008797 	.word	0x08008797
 8007c8c:	2000723c 	.word	0x2000723c

08007c90 <tcp_update_rcv_ann_wnd>:
{
 8007c90:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007c92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c94:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 8007c96:	192a      	adds	r2, r5, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007c98:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007c9a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8007c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ca0:	d901      	bls.n	8007ca6 <tcp_update_rcv_ann_wnd+0x16>
 8007ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ca6:	440b      	add	r3, r1
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	db02      	blt.n	8007cb4 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007cae:	8544      	strh	r4, [r0, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007cb0:	1a50      	subs	r0, r2, r1
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007cb4:	1a6b      	subs	r3, r5, r1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	dd03      	ble.n	8007cc2 <tcp_update_rcv_ann_wnd+0x32>
      pcb->rcv_ann_wnd = 0;
 8007cba:	2200      	movs	r2, #0
 8007cbc:	8542      	strh	r2, [r0, #42]	; 0x2a
    return 0;
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	bd38      	pop	{r3, r4, r5, pc}
 8007cc2:	4604      	mov	r4, r0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007cc4:	1b4d      	subs	r5, r1, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007cc6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007cca:	d202      	bcs.n	8007cd2 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007ccc:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8007cce:	2000      	movs	r0, #0
}
 8007cd0:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007cd2:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <tcp_update_rcv_ann_wnd+0x54>)
 8007cd4:	f44f 7242 	mov.w	r2, #776	; 0x308
 8007cd8:	4903      	ldr	r1, [pc, #12]	; (8007ce8 <tcp_update_rcv_ann_wnd+0x58>)
 8007cda:	4804      	ldr	r0, [pc, #16]	; (8007cec <tcp_update_rcv_ann_wnd+0x5c>)
 8007cdc:	f004 fc55 	bl	800c58a <iprintf>
 8007ce0:	e7f4      	b.n	8007ccc <tcp_update_rcv_ann_wnd+0x3c>
 8007ce2:	bf00      	nop
 8007ce4:	0800dc40 	.word	0x0800dc40
 8007ce8:	0800df38 	.word	0x0800df38
 8007cec:	0800c8d0 	.word	0x0800c8d0

08007cf0 <tcp_recved>:
{
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007cf6:	7d03      	ldrb	r3, [r0, #20]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d010      	beq.n	8007d1e <tcp_recved+0x2e>
  pcb->rcv_wnd += len;
 8007cfc:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 8007cfe:	4421      	add	r1, r4
 8007d00:	b289      	uxth	r1, r1
 8007d02:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8007d04:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007d08:	d911      	bls.n	8007d2e <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d0e:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007d10:	4628      	mov	r0, r5
 8007d12:	f7ff ffbd 	bl	8007c90 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007d16:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007d1a:	da1b      	bge.n	8007d54 <tcp_recved+0x64>
 8007d1c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007d1e:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <tcp_recved+0x74>)
 8007d20:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007d24:	4910      	ldr	r1, [pc, #64]	; (8007d68 <tcp_recved+0x78>)
 8007d26:	4811      	ldr	r0, [pc, #68]	; (8007d6c <tcp_recved+0x7c>)
 8007d28:	f004 fc2f 	bl	800c58a <iprintf>
 8007d2c:	e7e6      	b.n	8007cfc <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 8007d2e:	2900      	cmp	r1, #0
 8007d30:	d1ee      	bne.n	8007d10 <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8007d32:	7d2b      	ldrb	r3, [r5, #20]
 8007d34:	2b07      	cmp	r3, #7
 8007d36:	d009      	beq.n	8007d4c <tcp_recved+0x5c>
 8007d38:	2b09      	cmp	r3, #9
 8007d3a:	d007      	beq.n	8007d4c <tcp_recved+0x5c>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8007d3c:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <tcp_recved+0x74>)
 8007d3e:	f240 322d 	movw	r2, #813	; 0x32d
 8007d42:	490b      	ldr	r1, [pc, #44]	; (8007d70 <tcp_recved+0x80>)
 8007d44:	4809      	ldr	r0, [pc, #36]	; (8007d6c <tcp_recved+0x7c>)
 8007d46:	f004 fc20 	bl	800c58a <iprintf>
 8007d4a:	e7e1      	b.n	8007d10 <tcp_recved+0x20>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007d4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d50:	852b      	strh	r3, [r5, #40]	; 0x28
 8007d52:	e7dd      	b.n	8007d10 <tcp_recved+0x20>
    tcp_ack_now(pcb);
 8007d54:	7eab      	ldrb	r3, [r5, #26]
 8007d56:	f043 0302 	orr.w	r3, r3, #2
 8007d5a:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f002 ff97 	bl	800ac90 <tcp_output>
}
 8007d62:	e7db      	b.n	8007d1c <tcp_recved+0x2c>
 8007d64:	0800dc40 	.word	0x0800dc40
 8007d68:	0800dd64 	.word	0x0800dd64
 8007d6c:	0800c8d0 	.word	0x0800c8d0
 8007d70:	0800dd8c 	.word	0x0800dd8c

08007d74 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8007d74:	b150      	cbz	r0, 8007d8c <tcp_seg_free+0x18>
{
 8007d76:	b510      	push	{r4, lr}
 8007d78:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8007d7a:	6840      	ldr	r0, [r0, #4]
 8007d7c:	b108      	cbz	r0, 8007d82 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8007d7e:	f7ff fb15 	bl	80073ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007d82:	4621      	mov	r1, r4
 8007d84:	2003      	movs	r0, #3
 8007d86:	f7ff f93b 	bl	8007000 <memp_free>
 8007d8a:	bd10      	pop	{r4, pc}
 8007d8c:	4770      	bx	lr

08007d8e <tcp_segs_free>:
  while (seg != NULL) {
 8007d8e:	b138      	cbz	r0, 8007da0 <tcp_segs_free+0x12>
{
 8007d90:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8007d92:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8007d94:	f7ff ffee 	bl	8007d74 <tcp_seg_free>
    seg = next;
 8007d98:	4620      	mov	r0, r4
  while (seg != NULL) {
 8007d9a:	2c00      	cmp	r4, #0
 8007d9c:	d1f9      	bne.n	8007d92 <tcp_segs_free+0x4>
}
 8007d9e:	bd10      	pop	{r4, pc}
 8007da0:	4770      	bx	lr

08007da2 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007da2:	b538      	push	{r3, r4, r5, lr}
 8007da4:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007da6:	2003      	movs	r0, #3
 8007da8:	f7ff f910 	bl	8006fcc <memp_malloc>
  if (cseg == NULL) {
 8007dac:	4604      	mov	r4, r0
 8007dae:	b150      	cbz	r0, 8007dc6 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007db0:	6828      	ldr	r0, [r5, #0]
 8007db2:	6869      	ldr	r1, [r5, #4]
 8007db4:	68aa      	ldr	r2, [r5, #8]
 8007db6:	68eb      	ldr	r3, [r5, #12]
 8007db8:	6020      	str	r0, [r4, #0]
 8007dba:	6061      	str	r1, [r4, #4]
 8007dbc:	60a2      	str	r2, [r4, #8]
 8007dbe:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8007dc0:	6860      	ldr	r0, [r4, #4]
 8007dc2:	f7ff fcc3 	bl	800774c <pbuf_ref>
  return cseg;
}
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	bd38      	pop	{r3, r4, r5, pc}

08007dca <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007dca:	b100      	cbz	r0, 8007dce <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8007dcc:	6101      	str	r1, [r0, #16]
 8007dce:	4770      	bx	lr

08007dd0 <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 8007dd0:	b180      	cbz	r0, 8007df4 <tcp_recv+0x24>
{
 8007dd2:	b538      	push	{r3, r4, r5, lr}
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007dd8:	7d03      	ldrb	r3, [r0, #20]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d002      	beq.n	8007de4 <tcp_recv+0x14>
    pcb->recv = recv;
 8007dde:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007de4:	4b04      	ldr	r3, [pc, #16]	; (8007df8 <tcp_recv+0x28>)
 8007de6:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8007dea:	4904      	ldr	r1, [pc, #16]	; (8007dfc <tcp_recv+0x2c>)
 8007dec:	4804      	ldr	r0, [pc, #16]	; (8007e00 <tcp_recv+0x30>)
 8007dee:	f004 fbcc 	bl	800c58a <iprintf>
 8007df2:	e7f4      	b.n	8007dde <tcp_recv+0xe>
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	0800dc40 	.word	0x0800dc40
 8007dfc:	0800dd3c 	.word	0x0800dd3c
 8007e00:	0800c8d0 	.word	0x0800c8d0

08007e04 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 8007e04:	b178      	cbz	r0, 8007e26 <tcp_sent+0x22>
{
 8007e06:	b538      	push	{r3, r4, r5, lr}
 8007e08:	4604      	mov	r4, r0
 8007e0a:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007e0c:	7d03      	ldrb	r3, [r0, #20]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d001      	beq.n	8007e16 <tcp_sent+0x12>
    pcb->sent = sent;
 8007e12:	67e5      	str	r5, [r4, #124]	; 0x7c
 8007e14:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007e16:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <tcp_sent+0x24>)
 8007e18:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8007e1c:	4903      	ldr	r1, [pc, #12]	; (8007e2c <tcp_sent+0x28>)
 8007e1e:	4804      	ldr	r0, [pc, #16]	; (8007e30 <tcp_sent+0x2c>)
 8007e20:	f004 fbb3 	bl	800c58a <iprintf>
 8007e24:	e7f5      	b.n	8007e12 <tcp_sent+0xe>
 8007e26:	4770      	bx	lr
 8007e28:	0800dc40 	.word	0x0800dc40
 8007e2c:	0800ddb0 	.word	0x0800ddb0
 8007e30:	0800c8d0 	.word	0x0800c8d0

08007e34 <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 8007e34:	b180      	cbz	r0, 8007e58 <tcp_err+0x24>
{
 8007e36:	b538      	push	{r3, r4, r5, lr}
 8007e38:	4604      	mov	r4, r0
 8007e3a:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007e3c:	7d03      	ldrb	r3, [r0, #20]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d002      	beq.n	8007e48 <tcp_err+0x14>
    pcb->errf = err;
 8007e42:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8007e46:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <tcp_err+0x28>)
 8007e4a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8007e4e:	4904      	ldr	r1, [pc, #16]	; (8007e60 <tcp_err+0x2c>)
 8007e50:	4804      	ldr	r0, [pc, #16]	; (8007e64 <tcp_err+0x30>)
 8007e52:	f004 fb9a 	bl	800c58a <iprintf>
 8007e56:	e7f4      	b.n	8007e42 <tcp_err+0xe>
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	0800dc40 	.word	0x0800dc40
 8007e60:	0800dc08 	.word	0x0800dc08
 8007e64:	0800c8d0 	.word	0x0800c8d0

08007e68 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007e68:	b110      	cbz	r0, 8007e70 <tcp_accept+0x8>
 8007e6a:	7d02      	ldrb	r2, [r0, #20]
 8007e6c:	2a01      	cmp	r2, #1
 8007e6e:	d000      	beq.n	8007e72 <tcp_accept+0xa>
 8007e70:	4770      	bx	lr
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8007e72:	6181      	str	r1, [r0, #24]
  }
}
 8007e74:	e7fc      	b.n	8007e70 <tcp_accept+0x8>
	...

08007e78 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	460e      	mov	r6, r1
 8007e7e:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007e80:	7d03      	ldrb	r3, [r0, #20]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d003      	beq.n	8007e8e <tcp_poll+0x16>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007e86:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007e8a:	7725      	strb	r5, [r4, #28]
 8007e8c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007e8e:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <tcp_poll+0x28>)
 8007e90:	f240 7203 	movw	r2, #1795	; 0x703
 8007e94:	4903      	ldr	r1, [pc, #12]	; (8007ea4 <tcp_poll+0x2c>)
 8007e96:	4804      	ldr	r0, [pc, #16]	; (8007ea8 <tcp_poll+0x30>)
 8007e98:	f004 fb77 	bl	800c58a <iprintf>
 8007e9c:	e7f3      	b.n	8007e86 <tcp_poll+0xe>
 8007e9e:	bf00      	nop
 8007ea0:	0800dc40 	.word	0x0800dc40
 8007ea4:	0800dd1c 	.word	0x0800dd1c
 8007ea8:	0800c8d0 	.word	0x0800c8d0

08007eac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007eac:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8007eae:	7d03      	ldrb	r3, [r0, #20]
 8007eb0:	b1e3      	cbz	r3, 8007eec <tcp_pcb_purge+0x40>
 8007eb2:	2b0a      	cmp	r3, #10
 8007eb4:	d01a      	beq.n	8007eec <tcp_pcb_purge+0x40>
     pcb->state != TIME_WAIT &&
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d018      	beq.n	8007eec <tcp_pcb_purge+0x40>
 8007eba:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007ebc:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8007ebe:	b118      	cbz	r0, 8007ec8 <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007ec0:	f7ff fa74 	bl	80073ac <pbuf_free>
      pcb->refused_data = NULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8007ec8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007eca:	f7ff ff60 	bl	8007d8e <tcp_segs_free>
    pcb->ooseq = NULL;
 8007ece:	2500      	movs	r5, #0
 8007ed0:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007ed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ed6:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007ed8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007eda:	f7ff ff58 	bl	8007d8e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007ede:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007ee0:	f7ff ff55 	bl	8007d8e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007ee4:	66a5      	str	r5, [r4, #104]	; 0x68
 8007ee6:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007ee8:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8007eec:	bd38      	pop	{r3, r4, r5, pc}
	...

08007ef0 <tcp_slowtmr>:
{
 8007ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef4:	b082      	sub	sp, #8
  ++tcp_ticks;
 8007ef6:	4aae      	ldr	r2, [pc, #696]	; (80081b0 <tcp_slowtmr+0x2c0>)
 8007ef8:	6813      	ldr	r3, [r2, #0]
 8007efa:	3301      	adds	r3, #1
 8007efc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007efe:	4aad      	ldr	r2, [pc, #692]	; (80081b4 <tcp_slowtmr+0x2c4>)
 8007f00:	7813      	ldrb	r3, [r2, #0]
 8007f02:	3301      	adds	r3, #1
 8007f04:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8007f06:	4bac      	ldr	r3, [pc, #688]	; (80081b8 <tcp_slowtmr+0x2c8>)
 8007f08:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8007f0a:	2600      	movs	r6, #0
  while (pcb != NULL) {
 8007f0c:	e018      	b.n	8007f40 <tcp_slowtmr+0x50>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007f0e:	4bab      	ldr	r3, [pc, #684]	; (80081bc <tcp_slowtmr+0x2cc>)
 8007f10:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8007f14:	49aa      	ldr	r1, [pc, #680]	; (80081c0 <tcp_slowtmr+0x2d0>)
 8007f16:	48ab      	ldr	r0, [pc, #684]	; (80081c4 <tcp_slowtmr+0x2d4>)
 8007f18:	f004 fb37 	bl	800c58a <iprintf>
 8007f1c:	e016      	b.n	8007f4c <tcp_slowtmr+0x5c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007f1e:	4ba7      	ldr	r3, [pc, #668]	; (80081bc <tcp_slowtmr+0x2cc>)
 8007f20:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8007f24:	49a8      	ldr	r1, [pc, #672]	; (80081c8 <tcp_slowtmr+0x2d8>)
 8007f26:	48a7      	ldr	r0, [pc, #668]	; (80081c4 <tcp_slowtmr+0x2d4>)
 8007f28:	f004 fb2f 	bl	800c58a <iprintf>
 8007f2c:	e011      	b.n	8007f52 <tcp_slowtmr+0x62>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007f2e:	4ba3      	ldr	r3, [pc, #652]	; (80081bc <tcp_slowtmr+0x2cc>)
 8007f30:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8007f34:	49a5      	ldr	r1, [pc, #660]	; (80081cc <tcp_slowtmr+0x2dc>)
 8007f36:	48a3      	ldr	r0, [pc, #652]	; (80081c4 <tcp_slowtmr+0x2d4>)
 8007f38:	f004 fb27 	bl	800c58a <iprintf>
 8007f3c:	e00c      	b.n	8007f58 <tcp_slowtmr+0x68>
      pcb = pcb->next;
 8007f3e:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8007f40:	2c00      	cmp	r4, #0
 8007f42:	f000 817c 	beq.w	800823e <tcp_slowtmr+0x34e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007f46:	7d23      	ldrb	r3, [r4, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0e0      	beq.n	8007f0e <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007f4c:	7d23      	ldrb	r3, [r4, #20]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d0e5      	beq.n	8007f1e <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007f52:	7d23      	ldrb	r3, [r4, #20]
 8007f54:	2b0a      	cmp	r3, #10
 8007f56:	d0ea      	beq.n	8007f2e <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007f58:	7f62      	ldrb	r2, [r4, #29]
 8007f5a:	4b96      	ldr	r3, [pc, #600]	; (80081b4 <tcp_slowtmr+0x2c4>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d0ed      	beq.n	8007f3e <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8007f62:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007f64:	7d23      	ldrb	r3, [r4, #20]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d016      	beq.n	8007f98 <tcp_slowtmr+0xa8>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8007f6a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8007f6e:	2a0b      	cmp	r2, #11
 8007f70:	d860      	bhi.n	8008034 <tcp_slowtmr+0x144>
      if (pcb->persist_backoff > 0) {
 8007f72:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 8007f76:	b335      	cbz	r5, 8007fc6 <tcp_slowtmr+0xd6>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8007f78:	3d01      	subs	r5, #1
 8007f7a:	4b95      	ldr	r3, [pc, #596]	; (80081d0 <tcp_slowtmr+0x2e0>)
 8007f7c:	5d5a      	ldrb	r2, [r3, r5]
        if (pcb->persist_cnt < backoff_cnt) {
 8007f7e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d902      	bls.n	8007f8c <tcp_slowtmr+0x9c>
          pcb->persist_cnt++;
 8007f86:	3301      	adds	r3, #1
 8007f88:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8007f8c:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d907      	bls.n	8007fa4 <tcp_slowtmr+0xb4>
    pcb_remove = 0;
 8007f94:	2500      	movs	r5, #0
 8007f96:	e04e      	b.n	8008036 <tcp_slowtmr+0x146>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007f98:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8007f9c:	2a05      	cmp	r2, #5
 8007f9e:	d9e4      	bls.n	8007f6a <tcp_slowtmr+0x7a>
      ++pcb_remove;
 8007fa0:	2501      	movs	r5, #1
 8007fa2:	e048      	b.n	8008036 <tcp_slowtmr+0x146>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f003 f8c0 	bl	800b12a <tcp_zero_window_probe>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d150      	bne.n	8008050 <tcp_slowtmr+0x160>
            pcb->persist_cnt = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007fb4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8007fb8:	2b06      	cmp	r3, #6
 8007fba:	d84b      	bhi.n	8008054 <tcp_slowtmr+0x164>
              pcb->persist_backoff++;
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 8007fc2:	2500      	movs	r5, #0
 8007fc4:	e037      	b.n	8008036 <tcp_slowtmr+0x146>
        if (pcb->rtime >= 0) {
 8007fc6:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8007fca:	2900      	cmp	r1, #0
 8007fcc:	db01      	blt.n	8007fd2 <tcp_slowtmr+0xe2>
          ++pcb->rtime;
 8007fce:	3101      	adds	r1, #1
 8007fd0:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8007fd2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007fd4:	b379      	cbz	r1, 8008036 <tcp_slowtmr+0x146>
 8007fd6:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8007fda:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8007fde:	4288      	cmp	r0, r1
 8007fe0:	db29      	blt.n	8008036 <tcp_slowtmr+0x146>
          if (pcb->state != SYN_SENT) {
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d00d      	beq.n	8008002 <tcp_slowtmr+0x112>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8007fe6:	2a0c      	cmp	r2, #12
 8007fe8:	bf28      	it	cs
 8007fea:	220c      	movcs	r2, #12
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007fec:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8007ff0:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8007ff4:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8007ff8:	4976      	ldr	r1, [pc, #472]	; (80081d4 <tcp_slowtmr+0x2e4>)
 8007ffa:	5c8a      	ldrb	r2, [r1, r2]
 8007ffc:	4093      	lsls	r3, r2
 8007ffe:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008006:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800800a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800800e:	4293      	cmp	r3, r2
 8008010:	bf28      	it	cs
 8008012:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8008014:	085b      	lsrs	r3, r3, #1
 8008016:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800801a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 800801c:	004a      	lsls	r2, r1, #1
 800801e:	b292      	uxth	r2, r2
 8008020:	4293      	cmp	r3, r2
 8008022:	d201      	bcs.n	8008028 <tcp_slowtmr+0x138>
            pcb->ssthresh = (pcb->mss << 1);
 8008024:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 8008028:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 800802c:	4620      	mov	r0, r4
 800802e:	f002 ffdf 	bl	800aff0 <tcp_rexmit_rto>
 8008032:	e000      	b.n	8008036 <tcp_slowtmr+0x146>
      ++pcb_remove;
 8008034:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8008036:	7d23      	ldrb	r3, [r4, #20]
 8008038:	2b06      	cmp	r3, #6
 800803a:	d00d      	beq.n	8008058 <tcp_slowtmr+0x168>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800803c:	7a22      	ldrb	r2, [r4, #8]
 800803e:	f012 0f08 	tst.w	r2, #8
 8008042:	d043      	beq.n	80080cc <tcp_slowtmr+0x1dc>
 8008044:	2b04      	cmp	r3, #4
 8008046:	d014      	beq.n	8008072 <tcp_slowtmr+0x182>
       ((pcb->state == ESTABLISHED) ||
 8008048:	2b07      	cmp	r3, #7
 800804a:	d012      	beq.n	8008072 <tcp_slowtmr+0x182>
    pcb_reset = 0;
 800804c:	2700      	movs	r7, #0
 800804e:	e03e      	b.n	80080ce <tcp_slowtmr+0x1de>
    pcb_remove = 0;
 8008050:	2500      	movs	r5, #0
 8008052:	e7f0      	b.n	8008036 <tcp_slowtmr+0x146>
 8008054:	2500      	movs	r5, #0
 8008056:	e7ee      	b.n	8008036 <tcp_slowtmr+0x146>
      if (pcb->flags & TF_RXCLOSED) {
 8008058:	7ea2      	ldrb	r2, [r4, #26]
 800805a:	f012 0f10 	tst.w	r2, #16
 800805e:	d0ed      	beq.n	800803c <tcp_slowtmr+0x14c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008060:	6a21      	ldr	r1, [r4, #32]
 8008062:	4a53      	ldr	r2, [pc, #332]	; (80081b0 <tcp_slowtmr+0x2c0>)
 8008064:	6812      	ldr	r2, [r2, #0]
 8008066:	1a52      	subs	r2, r2, r1
 8008068:	2a28      	cmp	r2, #40	; 0x28
 800806a:	d9e7      	bls.n	800803c <tcp_slowtmr+0x14c>
          ++pcb_remove;
 800806c:	3501      	adds	r5, #1
 800806e:	b2ed      	uxtb	r5, r5
 8008070:	e7e4      	b.n	800803c <tcp_slowtmr+0x14c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008072:	4b4f      	ldr	r3, [pc, #316]	; (80081b0 <tcp_slowtmr+0x2c0>)
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	6a23      	ldr	r3, [r4, #32]
 8008078:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800807a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800807e:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8008082:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008086:	4854      	ldr	r0, [pc, #336]	; (80081d8 <tcp_slowtmr+0x2e8>)
 8008088:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800808c:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8008090:	d903      	bls.n	800809a <tcp_slowtmr+0x1aa>
        ++pcb_remove;
 8008092:	3501      	adds	r5, #1
 8008094:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8008096:	2701      	movs	r7, #1
 8008098:	e019      	b.n	80080ce <tcp_slowtmr+0x1de>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800809a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800809e:	484f      	ldr	r0, [pc, #316]	; (80081dc <tcp_slowtmr+0x2ec>)
 80080a0:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 80080a4:	494c      	ldr	r1, [pc, #304]	; (80081d8 <tcp_slowtmr+0x2e8>)
 80080a6:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80080aa:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 80080ae:	d801      	bhi.n	80080b4 <tcp_slowtmr+0x1c4>
    pcb_reset = 0;
 80080b0:	2700      	movs	r7, #0
 80080b2:	e00c      	b.n	80080ce <tcp_slowtmr+0x1de>
        err = tcp_keepalive(pcb);
 80080b4:	4620      	mov	r0, r4
 80080b6:	f003 f80c 	bl	800b0d2 <tcp_keepalive>
        if (err == ERR_OK) {
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d13a      	bne.n	8008134 <tcp_slowtmr+0x244>
          pcb->keep_cnt_sent++;
 80080be:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 80080c2:	3301      	adds	r3, #1
 80080c4:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 80080c8:	2700      	movs	r7, #0
 80080ca:	e000      	b.n	80080ce <tcp_slowtmr+0x1de>
 80080cc:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 80080ce:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80080d0:	b150      	cbz	r0, 80080e8 <tcp_slowtmr+0x1f8>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80080d2:	4b37      	ldr	r3, [pc, #220]	; (80081b0 <tcp_slowtmr+0x2c0>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	6a23      	ldr	r3, [r4, #32]
 80080d8:	1ad2      	subs	r2, r2, r3
 80080da:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80080de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80080e2:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 80080e4:	428a      	cmp	r2, r1
 80080e6:	d227      	bcs.n	8008138 <tcp_slowtmr+0x248>
    if (pcb->state == SYN_RCVD) {
 80080e8:	7d23      	ldrb	r3, [r4, #20]
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d029      	beq.n	8008142 <tcp_slowtmr+0x252>
    if (pcb->state == LAST_ACK) {
 80080ee:	2b09      	cmp	r3, #9
 80080f0:	d030      	beq.n	8008154 <tcp_slowtmr+0x264>
    if (pcb_remove) {
 80080f2:	2d00      	cmp	r5, #0
 80080f4:	d137      	bne.n	8008166 <tcp_slowtmr+0x276>
      pcb = pcb->next;
 80080f6:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 80080f8:	7ee3      	ldrb	r3, [r4, #27]
 80080fa:	3301      	adds	r3, #1
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8008100:	7f22      	ldrb	r2, [r4, #28]
 8008102:	4293      	cmp	r3, r2
 8008104:	f0c0 8098 	bcc.w	8008238 <tcp_slowtmr+0x348>
        prev->polltmr = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 800810c:	4a34      	ldr	r2, [pc, #208]	; (80081e0 <tcp_slowtmr+0x2f0>)
 800810e:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8008110:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 8087 	beq.w	8008228 <tcp_slowtmr+0x338>
 800811a:	4621      	mov	r1, r4
 800811c:	6920      	ldr	r0, [r4, #16]
 800811e:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8008120:	4b2f      	ldr	r3, [pc, #188]	; (80081e0 <tcp_slowtmr+0x2f0>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f47f aeee 	bne.w	8007f06 <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 800812a:	2800      	cmp	r0, #0
 800812c:	d07e      	beq.n	800822c <tcp_slowtmr+0x33c>
      prev = pcb;
 800812e:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008130:	462c      	mov	r4, r5
 8008132:	e705      	b.n	8007f40 <tcp_slowtmr+0x50>
    pcb_reset = 0;
 8008134:	2700      	movs	r7, #0
 8008136:	e7ca      	b.n	80080ce <tcp_slowtmr+0x1de>
      tcp_segs_free(pcb->ooseq);
 8008138:	f7ff fe29 	bl	8007d8e <tcp_segs_free>
      pcb->ooseq = NULL;
 800813c:	2300      	movs	r3, #0
 800813e:	6723      	str	r3, [r4, #112]	; 0x70
 8008140:	e7d2      	b.n	80080e8 <tcp_slowtmr+0x1f8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008142:	6a21      	ldr	r1, [r4, #32]
 8008144:	4a1a      	ldr	r2, [pc, #104]	; (80081b0 <tcp_slowtmr+0x2c0>)
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	1a52      	subs	r2, r2, r1
 800814a:	2a28      	cmp	r2, #40	; 0x28
 800814c:	d9cf      	bls.n	80080ee <tcp_slowtmr+0x1fe>
        ++pcb_remove;
 800814e:	3501      	adds	r5, #1
 8008150:	b2ed      	uxtb	r5, r5
 8008152:	e7cc      	b.n	80080ee <tcp_slowtmr+0x1fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008154:	6a22      	ldr	r2, [r4, #32]
 8008156:	4b16      	ldr	r3, [pc, #88]	; (80081b0 <tcp_slowtmr+0x2c0>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	1a9b      	subs	r3, r3, r2
 800815c:	2bf0      	cmp	r3, #240	; 0xf0
 800815e:	d9c8      	bls.n	80080f2 <tcp_slowtmr+0x202>
        ++pcb_remove;
 8008160:	3501      	adds	r5, #1
 8008162:	b2ed      	uxtb	r5, r5
 8008164:	e7c5      	b.n	80080f2 <tcp_slowtmr+0x202>
      tcp_err_fn err_fn = pcb->errf;
 8008166:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800816a:	4620      	mov	r0, r4
 800816c:	f7ff fe9e 	bl	8007eac <tcp_pcb_purge>
      if (prev != NULL) {
 8008170:	2e00      	cmp	r6, #0
 8008172:	d03f      	beq.n	80081f4 <tcp_slowtmr+0x304>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008174:	4b10      	ldr	r3, [pc, #64]	; (80081b8 <tcp_slowtmr+0x2c8>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	429c      	cmp	r4, r3
 800817a:	d033      	beq.n	80081e4 <tcp_slowtmr+0x2f4>
        prev->next = pcb->next;
 800817c:	68e3      	ldr	r3, [r4, #12]
 800817e:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 8008180:	2f00      	cmp	r7, #0
 8008182:	d146      	bne.n	8008212 <tcp_slowtmr+0x322>
      err_arg = pcb->callback_arg;
 8008184:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 8008188:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800818a:	4621      	mov	r1, r4
 800818c:	2001      	movs	r0, #1
 800818e:	f7fe ff37 	bl	8007000 <memp_free>
      tcp_active_pcbs_changed = 0;
 8008192:	2200      	movs	r2, #0
 8008194:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <tcp_slowtmr+0x2f0>)
 8008196:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008198:	b11d      	cbz	r5, 80081a2 <tcp_slowtmr+0x2b2>
 800819a:	f06f 010c 	mvn.w	r1, #12
 800819e:	4640      	mov	r0, r8
 80081a0:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 80081a2:	4b0f      	ldr	r3, [pc, #60]	; (80081e0 <tcp_slowtmr+0x2f0>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f47f aead 	bne.w	8007f06 <tcp_slowtmr+0x16>
      pcb = pcb->next;
 80081ac:	463c      	mov	r4, r7
 80081ae:	e6c7      	b.n	8007f40 <tcp_slowtmr+0x50>
 80081b0:	20007238 	.word	0x20007238
 80081b4:	20003eca 	.word	0x20003eca
 80081b8:	20007234 	.word	0x20007234
 80081bc:	0800dc40 	.word	0x0800dc40
 80081c0:	0800ddd8 	.word	0x0800ddd8
 80081c4:	0800c8d0 	.word	0x0800c8d0
 80081c8:	0800de04 	.word	0x0800de04
 80081cc:	0800de30 	.word	0x0800de30
 80081d0:	0800dd14 	.word	0x0800dd14
 80081d4:	0800dbb4 	.word	0x0800dbb4
 80081d8:	10624dd3 	.word	0x10624dd3
 80081dc:	000124f8 	.word	0x000124f8
 80081e0:	20007230 	.word	0x20007230
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80081e4:	4b39      	ldr	r3, [pc, #228]	; (80082cc <tcp_slowtmr+0x3dc>)
 80081e6:	f240 4289 	movw	r2, #1161	; 0x489
 80081ea:	4939      	ldr	r1, [pc, #228]	; (80082d0 <tcp_slowtmr+0x3e0>)
 80081ec:	4839      	ldr	r0, [pc, #228]	; (80082d4 <tcp_slowtmr+0x3e4>)
 80081ee:	f004 f9cc 	bl	800c58a <iprintf>
 80081f2:	e7c3      	b.n	800817c <tcp_slowtmr+0x28c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80081f4:	4b38      	ldr	r3, [pc, #224]	; (80082d8 <tcp_slowtmr+0x3e8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	429c      	cmp	r4, r3
 80081fa:	d006      	beq.n	800820a <tcp_slowtmr+0x31a>
 80081fc:	4b33      	ldr	r3, [pc, #204]	; (80082cc <tcp_slowtmr+0x3dc>)
 80081fe:	f240 428d 	movw	r2, #1165	; 0x48d
 8008202:	4936      	ldr	r1, [pc, #216]	; (80082dc <tcp_slowtmr+0x3ec>)
 8008204:	4833      	ldr	r0, [pc, #204]	; (80082d4 <tcp_slowtmr+0x3e4>)
 8008206:	f004 f9c0 	bl	800c58a <iprintf>
        tcp_active_pcbs = pcb->next;
 800820a:	68e2      	ldr	r2, [r4, #12]
 800820c:	4b32      	ldr	r3, [pc, #200]	; (80082d8 <tcp_slowtmr+0x3e8>)
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	e7b6      	b.n	8008180 <tcp_slowtmr+0x290>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008212:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008214:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008216:	8b23      	ldrh	r3, [r4, #24]
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	8ae3      	ldrh	r3, [r4, #22]
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	1d23      	adds	r3, r4, #4
 8008220:	4622      	mov	r2, r4
 8008222:	f002 fe91 	bl	800af48 <tcp_rst>
 8008226:	e7ad      	b.n	8008184 <tcp_slowtmr+0x294>
        TCP_EVENT_POLL(prev, err);
 8008228:	2000      	movs	r0, #0
 800822a:	e779      	b.n	8008120 <tcp_slowtmr+0x230>
          tcp_output(prev);
 800822c:	4620      	mov	r0, r4
 800822e:	f002 fd2f 	bl	800ac90 <tcp_output>
      prev = pcb;
 8008232:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008234:	462c      	mov	r4, r5
 8008236:	e683      	b.n	8007f40 <tcp_slowtmr+0x50>
      prev = pcb;
 8008238:	4626      	mov	r6, r4
      pcb = pcb->next;
 800823a:	462c      	mov	r4, r5
 800823c:	e680      	b.n	8007f40 <tcp_slowtmr+0x50>
  pcb = tcp_tw_pcbs;
 800823e:	4b28      	ldr	r3, [pc, #160]	; (80082e0 <tcp_slowtmr+0x3f0>)
 8008240:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8008242:	e003      	b.n	800824c <tcp_slowtmr+0x35c>
      ++pcb_remove;
 8008244:	2301      	movs	r3, #1
    if (pcb_remove) {
 8008246:	b9ab      	cbnz	r3, 8008274 <tcp_slowtmr+0x384>
      prev = pcb;
 8008248:	462c      	mov	r4, r5
      pcb = pcb->next;
 800824a:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 800824c:	2d00      	cmp	r5, #0
 800824e:	d039      	beq.n	80082c4 <tcp_slowtmr+0x3d4>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008250:	7d2b      	ldrb	r3, [r5, #20]
 8008252:	2b0a      	cmp	r3, #10
 8008254:	d006      	beq.n	8008264 <tcp_slowtmr+0x374>
 8008256:	4b1d      	ldr	r3, [pc, #116]	; (80082cc <tcp_slowtmr+0x3dc>)
 8008258:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800825c:	4921      	ldr	r1, [pc, #132]	; (80082e4 <tcp_slowtmr+0x3f4>)
 800825e:	481d      	ldr	r0, [pc, #116]	; (80082d4 <tcp_slowtmr+0x3e4>)
 8008260:	f004 f993 	bl	800c58a <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008264:	6a2a      	ldr	r2, [r5, #32]
 8008266:	4b20      	ldr	r3, [pc, #128]	; (80082e8 <tcp_slowtmr+0x3f8>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	2bf0      	cmp	r3, #240	; 0xf0
 800826e:	d8e9      	bhi.n	8008244 <tcp_slowtmr+0x354>
    pcb_remove = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	e7e8      	b.n	8008246 <tcp_slowtmr+0x356>
      tcp_pcb_purge(pcb);
 8008274:	4628      	mov	r0, r5
 8008276:	f7ff fe19 	bl	8007eac <tcp_pcb_purge>
      if (prev != NULL) {
 800827a:	b1a4      	cbz	r4, 80082a6 <tcp_slowtmr+0x3b6>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800827c:	4b18      	ldr	r3, [pc, #96]	; (80082e0 <tcp_slowtmr+0x3f0>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	429d      	cmp	r5, r3
 8008282:	d008      	beq.n	8008296 <tcp_slowtmr+0x3a6>
        prev->next = pcb->next;
 8008284:	68eb      	ldr	r3, [r5, #12]
 8008286:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8008288:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800828a:	4629      	mov	r1, r5
 800828c:	2001      	movs	r0, #1
 800828e:	f7fe feb7 	bl	8007000 <memp_free>
      pcb = pcb->next;
 8008292:	4635      	mov	r5, r6
 8008294:	e7da      	b.n	800824c <tcp_slowtmr+0x35c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008296:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <tcp_slowtmr+0x3dc>)
 8008298:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800829c:	4913      	ldr	r1, [pc, #76]	; (80082ec <tcp_slowtmr+0x3fc>)
 800829e:	480d      	ldr	r0, [pc, #52]	; (80082d4 <tcp_slowtmr+0x3e4>)
 80082a0:	f004 f973 	bl	800c58a <iprintf>
 80082a4:	e7ee      	b.n	8008284 <tcp_slowtmr+0x394>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80082a6:	4b0e      	ldr	r3, [pc, #56]	; (80082e0 <tcp_slowtmr+0x3f0>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	429d      	cmp	r5, r3
 80082ac:	d006      	beq.n	80082bc <tcp_slowtmr+0x3cc>
 80082ae:	4b07      	ldr	r3, [pc, #28]	; (80082cc <tcp_slowtmr+0x3dc>)
 80082b0:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80082b4:	490e      	ldr	r1, [pc, #56]	; (80082f0 <tcp_slowtmr+0x400>)
 80082b6:	4807      	ldr	r0, [pc, #28]	; (80082d4 <tcp_slowtmr+0x3e4>)
 80082b8:	f004 f967 	bl	800c58a <iprintf>
        tcp_tw_pcbs = pcb->next;
 80082bc:	68ea      	ldr	r2, [r5, #12]
 80082be:	4b08      	ldr	r3, [pc, #32]	; (80082e0 <tcp_slowtmr+0x3f0>)
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	e7e1      	b.n	8008288 <tcp_slowtmr+0x398>
}
 80082c4:	b002      	add	sp, #8
 80082c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ca:	bf00      	nop
 80082cc:	0800dc40 	.word	0x0800dc40
 80082d0:	0800de60 	.word	0x0800de60
 80082d4:	0800c8d0 	.word	0x0800c8d0
 80082d8:	20007234 	.word	0x20007234
 80082dc:	0800de8c 	.word	0x0800de8c
 80082e0:	20007244 	.word	0x20007244
 80082e4:	0800deb8 	.word	0x0800deb8
 80082e8:	20007238 	.word	0x20007238
 80082ec:	0800dee8 	.word	0x0800dee8
 80082f0:	0800df10 	.word	0x0800df10

080082f4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80082f4:	b510      	push	{r4, lr}
 80082f6:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 80082f8:	6803      	ldr	r3, [r0, #0]
 80082fa:	428b      	cmp	r3, r1
 80082fc:	d005      	beq.n	800830a <tcp_pcb_remove+0x16>
 80082fe:	b14b      	cbz	r3, 8008314 <tcp_pcb_remove+0x20>
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	4294      	cmp	r4, r2
 8008304:	d004      	beq.n	8008310 <tcp_pcb_remove+0x1c>
 8008306:	4613      	mov	r3, r2
 8008308:	e7f9      	b.n	80082fe <tcp_pcb_remove+0xa>
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	6003      	str	r3, [r0, #0]
 800830e:	e001      	b.n	8008314 <tcp_pcb_remove+0x20>
 8008310:	68e2      	ldr	r2, [r4, #12]
 8008312:	60da      	str	r2, [r3, #12]
 8008314:	2300      	movs	r3, #0
 8008316:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8008318:	4620      	mov	r0, r4
 800831a:	f7ff fdc7 	bl	8007eac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800831e:	7d23      	ldrb	r3, [r4, #20]
 8008320:	2b0a      	cmp	r3, #10
 8008322:	d005      	beq.n	8008330 <tcp_pcb_remove+0x3c>
 8008324:	2b01      	cmp	r3, #1
 8008326:	d003      	beq.n	8008330 <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8008328:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 800832a:	f013 0f01 	tst.w	r3, #1
 800832e:	d121      	bne.n	8008374 <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 8008330:	7d23      	ldrb	r3, [r4, #20]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d01a      	beq.n	800836c <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008336:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008338:	b133      	cbz	r3, 8008348 <tcp_pcb_remove+0x54>
 800833a:	4b12      	ldr	r3, [pc, #72]	; (8008384 <tcp_pcb_remove+0x90>)
 800833c:	f240 7253 	movw	r2, #1875	; 0x753
 8008340:	4911      	ldr	r1, [pc, #68]	; (8008388 <tcp_pcb_remove+0x94>)
 8008342:	4812      	ldr	r0, [pc, #72]	; (800838c <tcp_pcb_remove+0x98>)
 8008344:	f004 f921 	bl	800c58a <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008348:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800834a:	b133      	cbz	r3, 800835a <tcp_pcb_remove+0x66>
 800834c:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <tcp_pcb_remove+0x90>)
 800834e:	f240 7254 	movw	r2, #1876	; 0x754
 8008352:	490f      	ldr	r1, [pc, #60]	; (8008390 <tcp_pcb_remove+0x9c>)
 8008354:	480d      	ldr	r0, [pc, #52]	; (800838c <tcp_pcb_remove+0x98>)
 8008356:	f004 f918 	bl	800c58a <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800835a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800835c:	b133      	cbz	r3, 800836c <tcp_pcb_remove+0x78>
 800835e:	4b09      	ldr	r3, [pc, #36]	; (8008384 <tcp_pcb_remove+0x90>)
 8008360:	f240 7256 	movw	r2, #1878	; 0x756
 8008364:	490b      	ldr	r1, [pc, #44]	; (8008394 <tcp_pcb_remove+0xa0>)
 8008366:	4809      	ldr	r0, [pc, #36]	; (800838c <tcp_pcb_remove+0x98>)
 8008368:	f004 f90f 	bl	800c58a <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800836c:	2300      	movs	r3, #0
 800836e:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008370:	82e3      	strh	r3, [r4, #22]
 8008372:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 8008374:	f043 0302 	orr.w	r3, r3, #2
 8008378:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800837a:	4620      	mov	r0, r4
 800837c:	f002 fc88 	bl	800ac90 <tcp_output>
 8008380:	e7d6      	b.n	8008330 <tcp_pcb_remove+0x3c>
 8008382:	bf00      	nop
 8008384:	0800dc40 	.word	0x0800dc40
 8008388:	0800dcc8 	.word	0x0800dcc8
 800838c:	0800c8d0 	.word	0x0800c8d0
 8008390:	0800dce0 	.word	0x0800dce0
 8008394:	0800dcfc 	.word	0x0800dcfc

08008398 <tcp_close_shutdown>:
{
 8008398:	b510      	push	{r4, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800839e:	b121      	cbz	r1, 80083aa <tcp_close_shutdown+0x12>
 80083a0:	7d03      	ldrb	r3, [r0, #20]
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d00c      	beq.n	80083c0 <tcp_close_shutdown+0x28>
 80083a6:	2b07      	cmp	r3, #7
 80083a8:	d00a      	beq.n	80083c0 <tcp_close_shutdown+0x28>
  switch (pcb->state) {
 80083aa:	7d23      	ldrb	r3, [r4, #20]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d072      	beq.n	8008496 <tcp_close_shutdown+0xfe>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d055      	beq.n	8008460 <tcp_close_shutdown+0xc8>
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d07b      	beq.n	80084b0 <tcp_close_shutdown+0x118>
    return tcp_close_shutdown_fin(pcb);
 80083b8:	4620      	mov	r0, r4
 80083ba:	f7ff fb65 	bl	8007a88 <tcp_close_shutdown_fin>
 80083be:	e068      	b.n	8008492 <tcp_close_shutdown+0xfa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80083c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80083c2:	b1d3      	cbz	r3, 80083fa <tcp_close_shutdown+0x62>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80083c4:	7ea3      	ldrb	r3, [r4, #26]
 80083c6:	f013 0f10 	tst.w	r3, #16
 80083ca:	d01b      	beq.n	8008404 <tcp_close_shutdown+0x6c>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80083cc:	8b23      	ldrh	r3, [r4, #24]
 80083ce:	9301      	str	r3, [sp, #4]
 80083d0:	8ae3      	ldrh	r3, [r4, #22]
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	1d23      	adds	r3, r4, #4
 80083d6:	4622      	mov	r2, r4
 80083d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80083da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80083dc:	f002 fdb4 	bl	800af48 <tcp_rst>
      tcp_pcb_purge(pcb);
 80083e0:	4620      	mov	r0, r4
 80083e2:	f7ff fd63 	bl	8007eac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80083e6:	4b38      	ldr	r3, [pc, #224]	; (80084c8 <tcp_close_shutdown+0x130>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	429c      	cmp	r4, r3
 80083ec:	d012      	beq.n	8008414 <tcp_close_shutdown+0x7c>
 80083ee:	b1bb      	cbz	r3, 8008420 <tcp_close_shutdown+0x88>
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	4294      	cmp	r4, r2
 80083f4:	d012      	beq.n	800841c <tcp_close_shutdown+0x84>
 80083f6:	4613      	mov	r3, r2
 80083f8:	e7f9      	b.n	80083ee <tcp_close_shutdown+0x56>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80083fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80083fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008400:	d1e0      	bne.n	80083c4 <tcp_close_shutdown+0x2c>
 8008402:	e7d2      	b.n	80083aa <tcp_close_shutdown+0x12>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008404:	4b31      	ldr	r3, [pc, #196]	; (80084cc <tcp_close_shutdown+0x134>)
 8008406:	f240 120f 	movw	r2, #271	; 0x10f
 800840a:	4931      	ldr	r1, [pc, #196]	; (80084d0 <tcp_close_shutdown+0x138>)
 800840c:	4831      	ldr	r0, [pc, #196]	; (80084d4 <tcp_close_shutdown+0x13c>)
 800840e:	f004 f8bc 	bl	800c58a <iprintf>
 8008412:	e7db      	b.n	80083cc <tcp_close_shutdown+0x34>
      TCP_RMV_ACTIVE(pcb);
 8008414:	68da      	ldr	r2, [r3, #12]
 8008416:	4b2c      	ldr	r3, [pc, #176]	; (80084c8 <tcp_close_shutdown+0x130>)
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	e001      	b.n	8008420 <tcp_close_shutdown+0x88>
 800841c:	68e2      	ldr	r2, [r4, #12]
 800841e:	60da      	str	r2, [r3, #12]
 8008420:	2300      	movs	r3, #0
 8008422:	60e3      	str	r3, [r4, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	4b2c      	ldr	r3, [pc, #176]	; (80084d8 <tcp_close_shutdown+0x140>)
 8008428:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800842a:	7d23      	ldrb	r3, [r4, #20]
 800842c:	2b04      	cmp	r3, #4
 800842e:	d009      	beq.n	8008444 <tcp_close_shutdown+0xac>
        if (tcp_input_pcb == pcb) {
 8008430:	4b2a      	ldr	r3, [pc, #168]	; (80084dc <tcp_close_shutdown+0x144>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	429c      	cmp	r4, r3
 8008436:	d00f      	beq.n	8008458 <tcp_close_shutdown+0xc0>
          memp_free(MEMP_TCP_PCB, pcb);
 8008438:	4621      	mov	r1, r4
 800843a:	2001      	movs	r0, #1
 800843c:	f7fe fde0 	bl	8007000 <memp_free>
      return ERR_OK;
 8008440:	2000      	movs	r0, #0
 8008442:	e026      	b.n	8008492 <tcp_close_shutdown+0xfa>
        pcb->state = TIME_WAIT;
 8008444:	230a      	movs	r3, #10
 8008446:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008448:	4b25      	ldr	r3, [pc, #148]	; (80084e0 <tcp_close_shutdown+0x148>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	60e2      	str	r2, [r4, #12]
 800844e:	601c      	str	r4, [r3, #0]
 8008450:	f002 ff86 	bl	800b360 <tcp_timer_needed>
      return ERR_OK;
 8008454:	2000      	movs	r0, #0
 8008456:	e01c      	b.n	8008492 <tcp_close_shutdown+0xfa>
          tcp_trigger_input_pcb_close();
 8008458:	f001 feca 	bl	800a1f0 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 800845c:	2000      	movs	r0, #0
 800845e:	e018      	b.n	8008492 <tcp_close_shutdown+0xfa>
    if (pcb->local_port != 0) {
 8008460:	8ae3      	ldrh	r3, [r4, #22]
 8008462:	b18b      	cbz	r3, 8008488 <tcp_close_shutdown+0xf0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008464:	4b1f      	ldr	r3, [pc, #124]	; (80084e4 <tcp_close_shutdown+0x14c>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	429c      	cmp	r4, r3
 800846a:	d005      	beq.n	8008478 <tcp_close_shutdown+0xe0>
 800846c:	b153      	cbz	r3, 8008484 <tcp_close_shutdown+0xec>
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	4294      	cmp	r4, r2
 8008472:	d005      	beq.n	8008480 <tcp_close_shutdown+0xe8>
 8008474:	4613      	mov	r3, r2
 8008476:	e7f9      	b.n	800846c <tcp_close_shutdown+0xd4>
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	4b1a      	ldr	r3, [pc, #104]	; (80084e4 <tcp_close_shutdown+0x14c>)
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	e001      	b.n	8008484 <tcp_close_shutdown+0xec>
 8008480:	68e2      	ldr	r2, [r4, #12]
 8008482:	60da      	str	r2, [r3, #12]
 8008484:	2300      	movs	r3, #0
 8008486:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 8008488:	4621      	mov	r1, r4
 800848a:	2001      	movs	r0, #1
 800848c:	f7fe fdb8 	bl	8007000 <memp_free>
  return ERR_OK;
 8008490:	2000      	movs	r0, #0
}
 8008492:	b002      	add	sp, #8
 8008494:	bd10      	pop	{r4, pc}
    tcp_listen_closed(pcb);
 8008496:	4620      	mov	r0, r4
 8008498:	f7ff facc 	bl	8007a34 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800849c:	4621      	mov	r1, r4
 800849e:	4812      	ldr	r0, [pc, #72]	; (80084e8 <tcp_close_shutdown+0x150>)
 80084a0:	f7ff ff28 	bl	80082f4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80084a4:	4621      	mov	r1, r4
 80084a6:	2002      	movs	r0, #2
 80084a8:	f7fe fdaa 	bl	8007000 <memp_free>
  return ERR_OK;
 80084ac:	2000      	movs	r0, #0
    break;
 80084ae:	e7f0      	b.n	8008492 <tcp_close_shutdown+0xfa>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80084b0:	4621      	mov	r1, r4
 80084b2:	4805      	ldr	r0, [pc, #20]	; (80084c8 <tcp_close_shutdown+0x130>)
 80084b4:	f7ff ff1e 	bl	80082f4 <tcp_pcb_remove>
 80084b8:	2001      	movs	r0, #1
 80084ba:	4b07      	ldr	r3, [pc, #28]	; (80084d8 <tcp_close_shutdown+0x140>)
 80084bc:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80084be:	4621      	mov	r1, r4
 80084c0:	f7fe fd9e 	bl	8007000 <memp_free>
  return ERR_OK;
 80084c4:	2000      	movs	r0, #0
    break;
 80084c6:	e7e4      	b.n	8008492 <tcp_close_shutdown+0xfa>
 80084c8:	20007234 	.word	0x20007234
 80084cc:	0800dc40 	.word	0x0800dc40
 80084d0:	0800dbec 	.word	0x0800dbec
 80084d4:	0800c8d0 	.word	0x0800c8d0
 80084d8:	20007230 	.word	0x20007230
 80084dc:	20007248 	.word	0x20007248
 80084e0:	20007244 	.word	0x20007244
 80084e4:	20007240 	.word	0x20007240
 80084e8:	2000723c 	.word	0x2000723c

080084ec <tcp_close>:
{
 80084ec:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 80084ee:	7d03      	ldrb	r3, [r0, #20]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d003      	beq.n	80084fc <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 80084f4:	7e83      	ldrb	r3, [r0, #26]
 80084f6:	f043 0310 	orr.w	r3, r3, #16
 80084fa:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80084fc:	2101      	movs	r1, #1
 80084fe:	f7ff ff4b 	bl	8008398 <tcp_close_shutdown>
}
 8008502:	bd08      	pop	{r3, pc}

08008504 <tcp_recv_null>:
{
 8008504:	b510      	push	{r4, lr}
 8008506:	4608      	mov	r0, r1
  if (p != NULL) {
 8008508:	b142      	cbz	r2, 800851c <tcp_recv_null+0x18>
 800850a:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 800850c:	8911      	ldrh	r1, [r2, #8]
 800850e:	f7ff fbef 	bl	8007cf0 <tcp_recved>
    pbuf_free(p);
 8008512:	4620      	mov	r0, r4
 8008514:	f7fe ff4a 	bl	80073ac <pbuf_free>
  return ERR_OK;
 8008518:	2000      	movs	r0, #0
 800851a:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800851c:	b10b      	cbz	r3, 8008522 <tcp_recv_null+0x1e>
  return ERR_OK;
 800851e:	2000      	movs	r0, #0
}
 8008520:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 8008522:	f7ff ffe3 	bl	80084ec <tcp_close>
 8008526:	bd10      	pop	{r4, pc}

08008528 <tcp_process_refused_data>:
{
 8008528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852a:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800852c:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800852e:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8008530:	2300      	movs	r3, #0
 8008532:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008534:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 8008538:	b1dd      	cbz	r5, 8008572 <tcp_process_refused_data+0x4a>
 800853a:	4632      	mov	r2, r6
 800853c:	4601      	mov	r1, r0
 800853e:	6900      	ldr	r0, [r0, #16]
 8008540:	47a8      	blx	r5
 8008542:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8008544:	b9fd      	cbnz	r5, 8008586 <tcp_process_refused_data+0x5e>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8008546:	f017 0f20 	tst.w	r7, #32
 800854a:	d022      	beq.n	8008592 <tcp_process_refused_data+0x6a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800854c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800854e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008552:	d001      	beq.n	8008558 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 8008554:	3301      	adds	r3, #1
 8008556:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8008558:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800855c:	b18e      	cbz	r6, 8008582 <tcp_process_refused_data+0x5a>
 800855e:	2300      	movs	r3, #0
 8008560:	461a      	mov	r2, r3
 8008562:	4621      	mov	r1, r4
 8008564:	6920      	ldr	r0, [r4, #16]
 8008566:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8008568:	f110 0f0d 	cmn.w	r0, #13
 800856c:	d111      	bne.n	8008592 <tcp_process_refused_data+0x6a>
          return ERR_ABRT;
 800856e:	4605      	mov	r5, r0
 8008570:	e00f      	b.n	8008592 <tcp_process_refused_data+0x6a>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008572:	2300      	movs	r3, #0
 8008574:	4632      	mov	r2, r6
 8008576:	4601      	mov	r1, r0
 8008578:	4618      	mov	r0, r3
 800857a:	f7ff ffc3 	bl	8008504 <tcp_recv_null>
 800857e:	4605      	mov	r5, r0
 8008580:	e7e0      	b.n	8008544 <tcp_process_refused_data+0x1c>
        TCP_EVENT_CLOSED(pcb, err);
 8008582:	4628      	mov	r0, r5
 8008584:	e7f0      	b.n	8008568 <tcp_process_refused_data+0x40>
    } else if (err == ERR_ABRT) {
 8008586:	f115 0f0d 	cmn.w	r5, #13
 800858a:	d002      	beq.n	8008592 <tcp_process_refused_data+0x6a>
      pcb->refused_data = refused_data;
 800858c:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800858e:	f06f 0504 	mvn.w	r5, #4
}
 8008592:	4628      	mov	r0, r5
 8008594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008598 <tcp_fasttmr>:
{
 8008598:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 800859a:	4a1c      	ldr	r2, [pc, #112]	; (800860c <tcp_fasttmr+0x74>)
 800859c:	7813      	ldrb	r3, [r2, #0]
 800859e:	3301      	adds	r3, #1
 80085a0:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80085a2:	4b1b      	ldr	r3, [pc, #108]	; (8008610 <tcp_fasttmr+0x78>)
 80085a4:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 80085a6:	e013      	b.n	80085d0 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 80085a8:	f043 0302 	orr.w	r3, r3, #2
 80085ac:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 80085ae:	4620      	mov	r0, r4
 80085b0:	f002 fb6e 	bl	800ac90 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80085b4:	7ea3      	ldrb	r3, [r4, #26]
 80085b6:	f023 0303 	bic.w	r3, r3, #3
 80085ba:	76a3      	strb	r3, [r4, #26]
 80085bc:	e013      	b.n	80085e6 <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 80085be:	f023 0308 	bic.w	r3, r3, #8
 80085c2:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 80085c4:	4620      	mov	r0, r4
 80085c6:	f7ff fa5f 	bl	8007a88 <tcp_close_shutdown_fin>
 80085ca:	e010      	b.n	80085ee <tcp_fasttmr+0x56>
      pcb = pcb->next;
 80085cc:	68e5      	ldr	r5, [r4, #12]
{
 80085ce:	462c      	mov	r4, r5
  while (pcb != NULL) {
 80085d0:	b1dc      	cbz	r4, 800860a <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 80085d2:	7f62      	ldrb	r2, [r4, #29]
 80085d4:	4b0d      	ldr	r3, [pc, #52]	; (800860c <tcp_fasttmr+0x74>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d0f7      	beq.n	80085cc <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 80085dc:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 80085de:	7ea3      	ldrb	r3, [r4, #26]
 80085e0:	f013 0f01 	tst.w	r3, #1
 80085e4:	d1e0      	bne.n	80085a8 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 80085e6:	7ea3      	ldrb	r3, [r4, #26]
 80085e8:	f013 0f08 	tst.w	r3, #8
 80085ec:	d1e7      	bne.n	80085be <tcp_fasttmr+0x26>
      next = pcb->next;
 80085ee:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 80085f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0eb      	beq.n	80085ce <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 80085f6:	4e07      	ldr	r6, [pc, #28]	; (8008614 <tcp_fasttmr+0x7c>)
 80085f8:	2300      	movs	r3, #0
 80085fa:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 80085fc:	4620      	mov	r0, r4
 80085fe:	f7ff ff93 	bl	8008528 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008602:	7833      	ldrb	r3, [r6, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0e2      	beq.n	80085ce <tcp_fasttmr+0x36>
 8008608:	e7cb      	b.n	80085a2 <tcp_fasttmr+0xa>
}
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	20003eca 	.word	0x20003eca
 8008610:	20007234 	.word	0x20007234
 8008614:	20007230 	.word	0x20007230

08008618 <tcp_tmr>:
{
 8008618:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800861a:	f7ff ffbd 	bl	8008598 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800861e:	4a06      	ldr	r2, [pc, #24]	; (8008638 <tcp_tmr+0x20>)
 8008620:	7813      	ldrb	r3, [r2, #0]
 8008622:	3301      	adds	r3, #1
 8008624:	b2db      	uxtb	r3, r3
 8008626:	7013      	strb	r3, [r2, #0]
 8008628:	f013 0f01 	tst.w	r3, #1
 800862c:	d100      	bne.n	8008630 <tcp_tmr+0x18>
 800862e:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 8008630:	f7ff fc5e 	bl	8007ef0 <tcp_slowtmr>
}
 8008634:	e7fb      	b.n	800862e <tcp_tmr+0x16>
 8008636:	bf00      	nop
 8008638:	20003ec9 	.word	0x20003ec9

0800863c <tcp_shutdown>:
  if (pcb->state == LISTEN) {
 800863c:	7d03      	ldrb	r3, [r0, #20]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d020      	beq.n	8008684 <tcp_shutdown+0x48>
{
 8008642:	b570      	push	{r4, r5, r6, lr}
 8008644:	4616      	mov	r6, r2
 8008646:	460d      	mov	r5, r1
 8008648:	4604      	mov	r4, r0
  if (shut_rx) {
 800864a:	b151      	cbz	r1, 8008662 <tcp_shutdown+0x26>
    pcb->flags |= TF_RXCLOSED;
 800864c:	7e83      	ldrb	r3, [r0, #26]
 800864e:	f043 0310 	orr.w	r3, r3, #16
 8008652:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 8008654:	b992      	cbnz	r2, 800867c <tcp_shutdown+0x40>
    if (pcb->refused_data != NULL) {
 8008656:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008658:	b118      	cbz	r0, 8008662 <tcp_shutdown+0x26>
      pbuf_free(pcb->refused_data);
 800865a:	f7fe fea7 	bl	80073ac <pbuf_free>
      pcb->refused_data = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	6763      	str	r3, [r4, #116]	; 0x74
  if (shut_tx) {
 8008662:	b196      	cbz	r6, 800868a <tcp_shutdown+0x4e>
    switch (pcb->state) {
 8008664:	7d23      	ldrb	r3, [r4, #20]
 8008666:	2b03      	cmp	r3, #3
 8008668:	d311      	bcc.n	800868e <tcp_shutdown+0x52>
 800866a:	2b04      	cmp	r3, #4
 800866c:	d901      	bls.n	8008672 <tcp_shutdown+0x36>
 800866e:	2b07      	cmp	r3, #7
 8008670:	d10d      	bne.n	800868e <tcp_shutdown+0x52>
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8008672:	b2e9      	uxtb	r1, r5
 8008674:	4620      	mov	r0, r4
 8008676:	f7ff fe8f 	bl	8008398 <tcp_close_shutdown>
 800867a:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 800867c:	2101      	movs	r1, #1
 800867e:	f7ff fe8b 	bl	8008398 <tcp_close_shutdown>
 8008682:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_CONN;
 8008684:	f06f 000a 	mvn.w	r0, #10
 8008688:	4770      	bx	lr
  return ERR_OK;
 800868a:	2000      	movs	r0, #0
 800868c:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_CONN;
 800868e:	f06f 000a 	mvn.w	r0, #10
}
 8008692:	bd70      	pop	{r4, r5, r6, pc}

08008694 <tcp_abandon>:
{
 8008694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	4604      	mov	r4, r0
 800869c:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800869e:	7d03      	ldrb	r3, [r0, #20]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d01a      	beq.n	80086da <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 80086a4:	7d23      	ldrb	r3, [r4, #20]
 80086a6:	2b0a      	cmp	r3, #10
 80086a8:	d01f      	beq.n	80086ea <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 80086aa:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 80086ae:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 80086b2:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 80086b6:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d141      	bne.n	8008740 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 80086bc:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 80086c0:	f1ba 0f00 	cmp.w	sl, #0
 80086c4:	d046      	beq.n	8008754 <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80086c6:	4b2a      	ldr	r3, [pc, #168]	; (8008770 <tcp_abandon+0xdc>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	429c      	cmp	r4, r3
 80086cc:	d016      	beq.n	80086fc <tcp_abandon+0x68>
 80086ce:	b1db      	cbz	r3, 8008708 <tcp_abandon+0x74>
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	4294      	cmp	r4, r2
 80086d4:	d016      	beq.n	8008704 <tcp_abandon+0x70>
 80086d6:	4613      	mov	r3, r2
 80086d8:	e7f9      	b.n	80086ce <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80086da:	4b26      	ldr	r3, [pc, #152]	; (8008774 <tcp_abandon+0xe0>)
 80086dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80086e0:	4925      	ldr	r1, [pc, #148]	; (8008778 <tcp_abandon+0xe4>)
 80086e2:	4826      	ldr	r0, [pc, #152]	; (800877c <tcp_abandon+0xe8>)
 80086e4:	f003 ff51 	bl	800c58a <iprintf>
 80086e8:	e7dc      	b.n	80086a4 <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80086ea:	4621      	mov	r1, r4
 80086ec:	4824      	ldr	r0, [pc, #144]	; (8008780 <tcp_abandon+0xec>)
 80086ee:	f7ff fe01 	bl	80082f4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80086f2:	4621      	mov	r1, r4
 80086f4:	2001      	movs	r0, #1
 80086f6:	f7fe fc83 	bl	8007000 <memp_free>
 80086fa:	e01e      	b.n	800873a <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	4b1c      	ldr	r3, [pc, #112]	; (8008770 <tcp_abandon+0xdc>)
 8008700:	601a      	str	r2, [r3, #0]
 8008702:	e001      	b.n	8008708 <tcp_abandon+0x74>
 8008704:	68e2      	ldr	r2, [r4, #12]
 8008706:	60da      	str	r2, [r3, #12]
 8008708:	2500      	movs	r5, #0
 800870a:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 800870c:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 800870e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008710:	b108      	cbz	r0, 8008716 <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 8008712:	f7ff fb3c 	bl	8007d8e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8008716:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008718:	b108      	cbz	r0, 800871e <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 800871a:	f7ff fb38 	bl	8007d8e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800871e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008720:	b108      	cbz	r0, 8008726 <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 8008722:	f7ff fb34 	bl	8007d8e <tcp_segs_free>
    if (send_rst) {
 8008726:	b9bd      	cbnz	r5, 8008758 <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 8008728:	4621      	mov	r1, r4
 800872a:	2001      	movs	r0, #1
 800872c:	f7fe fc68 	bl	8007000 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008730:	b11e      	cbz	r6, 800873a <tcp_abandon+0xa6>
 8008732:	f06f 010c 	mvn.w	r1, #12
 8008736:	4638      	mov	r0, r7
 8008738:	47b0      	blx	r6
}
 800873a:	b002      	add	sp, #8
 800873c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8008740:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008744:	4621      	mov	r1, r4
 8008746:	480f      	ldr	r0, [pc, #60]	; (8008784 <tcp_abandon+0xf0>)
 8008748:	f7ff fdd4 	bl	80082f4 <tcp_pcb_remove>
 800874c:	2201      	movs	r2, #1
 800874e:	4b0e      	ldr	r3, [pc, #56]	; (8008788 <tcp_abandon+0xf4>)
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	e7dc      	b.n	800870e <tcp_abandon+0x7a>
    int send_rst = 0;
 8008754:	2500      	movs	r5, #0
 8008756:	e7da      	b.n	800870e <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008758:	8b23      	ldrh	r3, [r4, #24]
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	f8cd a000 	str.w	sl, [sp]
 8008760:	1d23      	adds	r3, r4, #4
 8008762:	4622      	mov	r2, r4
 8008764:	4649      	mov	r1, r9
 8008766:	4640      	mov	r0, r8
 8008768:	f002 fbee 	bl	800af48 <tcp_rst>
 800876c:	e7dc      	b.n	8008728 <tcp_abandon+0x94>
 800876e:	bf00      	nop
 8008770:	20007240 	.word	0x20007240
 8008774:	0800dc40 	.word	0x0800dc40
 8008778:	0800db80 	.word	0x0800db80
 800877c:	0800c8d0 	.word	0x0800c8d0
 8008780:	20007244 	.word	0x20007244
 8008784:	20007234 	.word	0x20007234
 8008788:	20007230 	.word	0x20007230

0800878c <tcp_abort>:
{
 800878c:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 800878e:	2101      	movs	r1, #1
 8008790:	f7ff ff80 	bl	8008694 <tcp_abandon>
 8008794:	bd08      	pop	{r3, pc}

08008796 <tcp_accept_null>:
{
 8008796:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8008798:	4608      	mov	r0, r1
 800879a:	f7ff fff7 	bl	800878c <tcp_abort>
}
 800879e:	f06f 000c 	mvn.w	r0, #12
 80087a2:	bd08      	pop	{r3, pc}

080087a4 <tcp_kill_timewait>:
{
 80087a4:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80087a6:	4b0a      	ldr	r3, [pc, #40]	; (80087d0 <tcp_kill_timewait+0x2c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80087aa:	2400      	movs	r4, #0
  inactive = NULL;
 80087ac:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80087ae:	e000      	b.n	80087b2 <tcp_kill_timewait+0xe>
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	b143      	cbz	r3, 80087c6 <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80087b4:	6a19      	ldr	r1, [r3, #32]
 80087b6:	4a07      	ldr	r2, [pc, #28]	; (80087d4 <tcp_kill_timewait+0x30>)
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	1a52      	subs	r2, r2, r1
 80087bc:	4294      	cmp	r4, r2
 80087be:	d8f7      	bhi.n	80087b0 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 80087c0:	4614      	mov	r4, r2
      inactive = pcb;
 80087c2:	4618      	mov	r0, r3
 80087c4:	e7f4      	b.n	80087b0 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 80087c6:	b108      	cbz	r0, 80087cc <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 80087c8:	f7ff ffe0 	bl	800878c <tcp_abort>
 80087cc:	bd10      	pop	{r4, pc}
 80087ce:	bf00      	nop
 80087d0:	20007244 	.word	0x20007244
 80087d4:	20007238 	.word	0x20007238

080087d8 <tcp_kill_prio>:
{
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	4602      	mov	r2, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80087dc:	f010 0f80 	tst.w	r0, #128	; 0x80
 80087e0:	d000      	beq.n	80087e4 <tcp_kill_prio+0xc>
 80087e2:	227f      	movs	r2, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087e4:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <tcp_kill_prio+0x3c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80087e8:	2400      	movs	r4, #0
  inactive = NULL;
 80087ea:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087ec:	b91b      	cbnz	r3, 80087f6 <tcp_kill_prio+0x1e>
  if (inactive != NULL) {
 80087ee:	b108      	cbz	r0, 80087f4 <tcp_kill_prio+0x1c>
    tcp_abort(inactive);
 80087f0:	f7ff ffcc 	bl	800878c <tcp_abort>
 80087f4:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->prio <= mprio &&
 80087f6:	7d5d      	ldrb	r5, [r3, #21]
 80087f8:	42aa      	cmp	r2, r5
 80087fa:	d308      	bcc.n	800880e <tcp_kill_prio+0x36>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80087fc:	6a1e      	ldr	r6, [r3, #32]
 80087fe:	4906      	ldr	r1, [pc, #24]	; (8008818 <tcp_kill_prio+0x40>)
 8008800:	6809      	ldr	r1, [r1, #0]
 8008802:	1b89      	subs	r1, r1, r6
    if (pcb->prio <= mprio &&
 8008804:	428c      	cmp	r4, r1
 8008806:	d802      	bhi.n	800880e <tcp_kill_prio+0x36>
      mprio = pcb->prio;
 8008808:	462a      	mov	r2, r5
      inactivity = tcp_ticks - pcb->tmr;
 800880a:	460c      	mov	r4, r1
      inactive = pcb;
 800880c:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	e7ec      	b.n	80087ec <tcp_kill_prio+0x14>
 8008812:	bf00      	nop
 8008814:	20007234 	.word	0x20007234
 8008818:	20007238 	.word	0x20007238

0800881c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4604      	mov	r4, r0
 8008820:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8008822:	e003      	b.n	800882c <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008824:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008826:	f7ff ffb1 	bl	800878c <tcp_abort>
      pcb = next;
 800882a:	4628      	mov	r0, r5
  while (pcb != NULL) {
 800882c:	b128      	cbz	r0, 800883a <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800882e:	6802      	ldr	r2, [r0, #0]
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d0f6      	beq.n	8008824 <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 8008836:	68c0      	ldr	r0, [r0, #12]
 8008838:	e7f8      	b.n	800882c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800883a:	bd38      	pop	{r3, r4, r5, pc}

0800883c <tcp_kill_state>:
{
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008840:	f1a0 0308 	sub.w	r3, r0, #8
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b01      	cmp	r3, #1
 8008848:	d906      	bls.n	8008858 <tcp_kill_state+0x1c>
 800884a:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <tcp_kill_state+0x4c>)
 800884c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008850:	490e      	ldr	r1, [pc, #56]	; (800888c <tcp_kill_state+0x50>)
 8008852:	480f      	ldr	r0, [pc, #60]	; (8008890 <tcp_kill_state+0x54>)
 8008854:	f003 fe99 	bl	800c58a <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008858:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <tcp_kill_state+0x58>)
 800885a:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800885c:	2100      	movs	r1, #0
  inactive = NULL;
 800885e:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008860:	e000      	b.n	8008864 <tcp_kill_state+0x28>
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	b15b      	cbz	r3, 800887e <tcp_kill_state+0x42>
    if (pcb->state == state) {
 8008866:	7d1a      	ldrb	r2, [r3, #20]
 8008868:	4294      	cmp	r4, r2
 800886a:	d1fa      	bne.n	8008862 <tcp_kill_state+0x26>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800886c:	6a1d      	ldr	r5, [r3, #32]
 800886e:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <tcp_kill_state+0x5c>)
 8008870:	6812      	ldr	r2, [r2, #0]
 8008872:	1b52      	subs	r2, r2, r5
 8008874:	4291      	cmp	r1, r2
 8008876:	d8f4      	bhi.n	8008862 <tcp_kill_state+0x26>
        inactivity = tcp_ticks - pcb->tmr;
 8008878:	4611      	mov	r1, r2
        inactive = pcb;
 800887a:	4618      	mov	r0, r3
 800887c:	e7f1      	b.n	8008862 <tcp_kill_state+0x26>
  if (inactive != NULL) {
 800887e:	b110      	cbz	r0, 8008886 <tcp_kill_state+0x4a>
    tcp_abandon(inactive, 0);
 8008880:	2100      	movs	r1, #0
 8008882:	f7ff ff07 	bl	8008694 <tcp_abandon>
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	0800dc40 	.word	0x0800dc40
 800888c:	0800dc30 	.word	0x0800dc30
 8008890:	0800c8d0 	.word	0x0800c8d0
 8008894:	20007234 	.word	0x20007234
 8008898:	20007238 	.word	0x20007238

0800889c <tcp_alloc>:
{
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80088a0:	2001      	movs	r0, #1
 80088a2:	f7fe fb93 	bl	8006fcc <memp_malloc>
  if (pcb == NULL) {
 80088a6:	4604      	mov	r4, r0
 80088a8:	b368      	cbz	r0, 8008906 <tcp_alloc+0x6a>
  if (pcb != NULL) {
 80088aa:	b354      	cbz	r4, 8008902 <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80088ac:	2298      	movs	r2, #152	; 0x98
 80088ae:	2100      	movs	r1, #0
 80088b0:	4620      	mov	r0, r4
 80088b2:	f003 ff8b 	bl	800c7cc <memset>
    pcb->prio = prio;
 80088b6:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80088b8:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 80088bc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80088c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088c4:	8562      	strh	r2, [r4, #42]	; 0x2a
 80088c6:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80088c8:	22ff      	movs	r2, #255	; 0xff
 80088ca:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 80088cc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80088d0:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80088d2:	2206      	movs	r2, #6
 80088d4:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80088d8:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 80088da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088de:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 80088e0:	2201      	movs	r2, #1
 80088e2:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80088e6:	4a19      	ldr	r2, [pc, #100]	; (800894c <tcp_alloc+0xb0>)
 80088e8:	6812      	ldr	r2, [r2, #0]
 80088ea:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 80088ec:	4a18      	ldr	r2, [pc, #96]	; (8008950 <tcp_alloc+0xb4>)
 80088ee:	7812      	ldrb	r2, [r2, #0]
 80088f0:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 80088f2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 80088f6:	4b17      	ldr	r3, [pc, #92]	; (8008954 <tcp_alloc+0xb8>)
 80088f8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80088fc:	4b16      	ldr	r3, [pc, #88]	; (8008958 <tcp_alloc+0xbc>)
 80088fe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8008902:	4620      	mov	r0, r4
 8008904:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 8008906:	f7ff ff4d 	bl	80087a4 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800890a:	2001      	movs	r0, #1
 800890c:	f7fe fb5e 	bl	8006fcc <memp_malloc>
    if (pcb == NULL) {
 8008910:	4604      	mov	r4, r0
 8008912:	2800      	cmp	r0, #0
 8008914:	d1c9      	bne.n	80088aa <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8008916:	2009      	movs	r0, #9
 8008918:	f7ff ff90 	bl	800883c <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800891c:	2001      	movs	r0, #1
 800891e:	f7fe fb55 	bl	8006fcc <memp_malloc>
      if (pcb == NULL) {
 8008922:	4604      	mov	r4, r0
 8008924:	2800      	cmp	r0, #0
 8008926:	d1c0      	bne.n	80088aa <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8008928:	2008      	movs	r0, #8
 800892a:	f7ff ff87 	bl	800883c <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800892e:	2001      	movs	r0, #1
 8008930:	f7fe fb4c 	bl	8006fcc <memp_malloc>
        if (pcb == NULL) {
 8008934:	4604      	mov	r4, r0
 8008936:	2800      	cmp	r0, #0
 8008938:	d1b7      	bne.n	80088aa <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 800893a:	4628      	mov	r0, r5
 800893c:	f7ff ff4c 	bl	80087d8 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008940:	2001      	movs	r0, #1
 8008942:	f7fe fb43 	bl	8006fcc <memp_malloc>
 8008946:	4604      	mov	r4, r0
 8008948:	e7af      	b.n	80088aa <tcp_alloc+0xe>
 800894a:	bf00      	nop
 800894c:	20007238 	.word	0x20007238
 8008950:	20003eca 	.word	0x20003eca
 8008954:	08008505 	.word	0x08008505
 8008958:	006ddd00 	.word	0x006ddd00

0800895c <tcp_new_ip_type>:
{
 800895c:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800895e:	2040      	movs	r0, #64	; 0x40
 8008960:	f7ff ff9c 	bl	800889c <tcp_alloc>
}
 8008964:	bd08      	pop	{r3, pc}
	...

08008968 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8008968:	4b03      	ldr	r3, [pc, #12]	; (8008978 <tcp_next_iss+0x10>)
 800896a:	6818      	ldr	r0, [r3, #0]
 800896c:	4a03      	ldr	r2, [pc, #12]	; (800897c <tcp_next_iss+0x14>)
 800896e:	6812      	ldr	r2, [r2, #0]
 8008970:	4410      	add	r0, r2
 8008972:	6018      	str	r0, [r3, #0]
}
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	20000008 	.word	0x20000008
 800897c:	20007238 	.word	0x20007238

08008980 <tcp_eff_send_mss_impl>:
{
 8008980:	b510      	push	{r4, lr}
 8008982:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8008984:	4608      	mov	r0, r1
 8008986:	f7fd fa9f 	bl	8005ec8 <ip4_route>
    if (outif == NULL) {
 800898a:	b138      	cbz	r0, 800899c <tcp_eff_send_mss_impl+0x1c>
    mtu = outif->mtu;
 800898c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 800898e:	b13b      	cbz	r3, 80089a0 <tcp_eff_send_mss_impl+0x20>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8008990:	3b28      	subs	r3, #40	; 0x28
 8008992:	b298      	uxth	r0, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008994:	42a0      	cmp	r0, r4
 8008996:	bf28      	it	cs
 8008998:	4620      	movcs	r0, r4
 800899a:	bd10      	pop	{r4, pc}
      return sendmss;
 800899c:	4620      	mov	r0, r4
 800899e:	bd10      	pop	{r4, pc}
 80089a0:	4620      	mov	r0, r4
}
 80089a2:	bd10      	pop	{r4, pc}

080089a4 <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80089a4:	b308      	cbz	r0, 80089ea <tcp_netif_ip_addr_changed+0x46>
{
 80089a6:	b570      	push	{r4, r5, r6, lr}
 80089a8:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 80089aa:	6803      	ldr	r3, [r0, #0]
 80089ac:	b903      	cbnz	r3, 80089b0 <tcp_netif_ip_addr_changed+0xc>
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	460e      	mov	r6, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80089b2:	4b0e      	ldr	r3, [pc, #56]	; (80089ec <tcp_netif_ip_addr_changed+0x48>)
 80089b4:	6819      	ldr	r1, [r3, #0]
 80089b6:	f7ff ff31 	bl	800881c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80089ba:	4b0d      	ldr	r3, [pc, #52]	; (80089f0 <tcp_netif_ip_addr_changed+0x4c>)
 80089bc:	6819      	ldr	r1, [r3, #0]
 80089be:	4620      	mov	r0, r4
 80089c0:	f7ff ff2c 	bl	800881c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80089c4:	2e00      	cmp	r6, #0
 80089c6:	d0f2      	beq.n	80089ae <tcp_netif_ip_addr_changed+0xa>
 80089c8:	6833      	ldr	r3, [r6, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0ef      	beq.n	80089ae <tcp_netif_ip_addr_changed+0xa>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80089ce:	4b09      	ldr	r3, [pc, #36]	; (80089f4 <tcp_netif_ip_addr_changed+0x50>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	e000      	b.n	80089d6 <tcp_netif_ip_addr_changed+0x32>
{
 80089d4:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0e9      	beq.n	80089ae <tcp_netif_ip_addr_changed+0xa>
        next = lpcb->next;
 80089da:	68da      	ldr	r2, [r3, #12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80089dc:	681d      	ldr	r5, [r3, #0]
 80089de:	6820      	ldr	r0, [r4, #0]
 80089e0:	4285      	cmp	r5, r0
 80089e2:	d1f7      	bne.n	80089d4 <tcp_netif_ip_addr_changed+0x30>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80089e4:	6831      	ldr	r1, [r6, #0]
 80089e6:	6019      	str	r1, [r3, #0]
 80089e8:	e7f4      	b.n	80089d4 <tcp_netif_ip_addr_changed+0x30>
 80089ea:	4770      	bx	lr
 80089ec:	20007234 	.word	0x20007234
 80089f0:	20007240 	.word	0x20007240
 80089f4:	2000723c 	.word	0x2000723c

080089f8 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80089f8:	4b0e      	ldr	r3, [pc, #56]	; (8008a34 <tcp_getoptbyte+0x3c>)
 80089fa:	6819      	ldr	r1, [r3, #0]
 80089fc:	b189      	cbz	r1, 8008a22 <tcp_getoptbyte+0x2a>
 80089fe:	4b0e      	ldr	r3, [pc, #56]	; (8008a38 <tcp_getoptbyte+0x40>)
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	4a0e      	ldr	r2, [pc, #56]	; (8008a3c <tcp_getoptbyte+0x44>)
 8008a04:	8812      	ldrh	r2, [r2, #0]
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d30b      	bcc.n	8008a22 <tcp_getoptbyte+0x2a>
{
 8008a0a:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008a0c:	1c5c      	adds	r4, r3, #1
 8008a0e:	480a      	ldr	r0, [pc, #40]	; (8008a38 <tcp_getoptbyte+0x40>)
 8008a10:	8004      	strh	r4, [r0, #0]
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	b2d2      	uxtb	r2, r2
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 8008a1a:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8008a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a20:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008a22:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <tcp_getoptbyte+0x48>)
 8008a24:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8008a26:	4904      	ldr	r1, [pc, #16]	; (8008a38 <tcp_getoptbyte+0x40>)
 8008a28:	880a      	ldrh	r2, [r1, #0]
 8008a2a:	1c50      	adds	r0, r2, #1
 8008a2c:	8008      	strh	r0, [r1, #0]
 8008a2e:	4413      	add	r3, r2
 8008a30:	7d18      	ldrb	r0, [r3, #20]
 8008a32:	4770      	bx	lr
 8008a34:	20003f00 	.word	0x20003f00
 8008a38:	20003ef4 	.word	0x20003ef4
 8008a3c:	20003efc 	.word	0x20003efc
 8008a40:	20003ef8 	.word	0x20003ef8

08008a44 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008a44:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008a46:	4b1f      	ldr	r3, [pc, #124]	; (8008ac4 <tcp_parseopt+0x80>)
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d038      	beq.n	8008ac0 <tcp_parseopt+0x7c>
 8008a4e:	4605      	mov	r5, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008a50:	2200      	movs	r2, #0
 8008a52:	4b1d      	ldr	r3, [pc, #116]	; (8008ac8 <tcp_parseopt+0x84>)
 8008a54:	801a      	strh	r2, [r3, #0]
 8008a56:	4b1c      	ldr	r3, [pc, #112]	; (8008ac8 <tcp_parseopt+0x84>)
 8008a58:	881a      	ldrh	r2, [r3, #0]
 8008a5a:	4b1a      	ldr	r3, [pc, #104]	; (8008ac4 <tcp_parseopt+0x80>)
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d22e      	bcs.n	8008ac0 <tcp_parseopt+0x7c>
      u8_t opt = tcp_getoptbyte();
 8008a62:	f7ff ffc9 	bl	80089f8 <tcp_getoptbyte>
      switch (opt) {
 8008a66:	2801      	cmp	r0, #1
 8008a68:	d0f5      	beq.n	8008a56 <tcp_parseopt+0x12>
 8008a6a:	b348      	cbz	r0, 8008ac0 <tcp_parseopt+0x7c>
 8008a6c:	2802      	cmp	r0, #2
 8008a6e:	d11d      	bne.n	8008aac <tcp_parseopt+0x68>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008a70:	f7ff ffc2 	bl	80089f8 <tcp_getoptbyte>
 8008a74:	2804      	cmp	r0, #4
 8008a76:	d123      	bne.n	8008ac0 <tcp_parseopt+0x7c>
 8008a78:	4b13      	ldr	r3, [pc, #76]	; (8008ac8 <tcp_parseopt+0x84>)
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	3302      	adds	r3, #2
 8008a7e:	4a11      	ldr	r2, [pc, #68]	; (8008ac4 <tcp_parseopt+0x80>)
 8008a80:	8812      	ldrh	r2, [r2, #0]
 8008a82:	4293      	cmp	r3, r2
 8008a84:	dc1c      	bgt.n	8008ac0 <tcp_parseopt+0x7c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8008a86:	f7ff ffb7 	bl	80089f8 <tcp_getoptbyte>
 8008a8a:	b283      	uxth	r3, r0
 8008a8c:	021b      	lsls	r3, r3, #8
 8008a8e:	b29c      	uxth	r4, r3
        mss |= tcp_getoptbyte();
 8008a90:	f7ff ffb2 	bl	80089f8 <tcp_getoptbyte>
 8008a94:	b280      	uxth	r0, r0
 8008a96:	ea44 0300 	orr.w	r3, r4, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008a9a:	1e5a      	subs	r2, r3, #1
 8008a9c:	b292      	uxth	r2, r2
 8008a9e:	f5b2 7fe6 	cmp.w	r2, #460	; 0x1cc
 8008aa2:	d301      	bcc.n	8008aa8 <tcp_parseopt+0x64>
 8008aa4:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8008aa8:	866b      	strh	r3, [r5, #50]	; 0x32
        break;
 8008aaa:	e7d4      	b.n	8008a56 <tcp_parseopt+0x12>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008aac:	f7ff ffa4 	bl	80089f8 <tcp_getoptbyte>
        if (data < 2) {
 8008ab0:	2801      	cmp	r0, #1
 8008ab2:	d905      	bls.n	8008ac0 <tcp_parseopt+0x7c>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008ab4:	4b04      	ldr	r3, [pc, #16]	; (8008ac8 <tcp_parseopt+0x84>)
 8008ab6:	881a      	ldrh	r2, [r3, #0]
 8008ab8:	4410      	add	r0, r2
 8008aba:	3802      	subs	r0, #2
 8008abc:	8018      	strh	r0, [r3, #0]
 8008abe:	e7ca      	b.n	8008a56 <tcp_parseopt+0x12>
 8008ac0:	bd38      	pop	{r3, r4, r5, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20003f04 	.word	0x20003f04
 8008ac8:	20003ef4 	.word	0x20003ef4

08008acc <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8008acc:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <tcp_input_delayed_close+0x3c>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	f013 0f10 	tst.w	r3, #16
 8008ad4:	d016      	beq.n	8008b04 <tcp_input_delayed_close+0x38>
{
 8008ad6:	b510      	push	{r4, lr}
 8008ad8:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008ada:	7e83      	ldrb	r3, [r0, #26]
 8008adc:	f013 0f10 	tst.w	r3, #16
 8008ae0:	d106      	bne.n	8008af0 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008ae2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8008ae6:	b11b      	cbz	r3, 8008af0 <tcp_input_delayed_close+0x24>
 8008ae8:	f06f 010e 	mvn.w	r1, #14
 8008aec:	6900      	ldr	r0, [r0, #16]
 8008aee:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008af0:	4621      	mov	r1, r4
 8008af2:	4806      	ldr	r0, [pc, #24]	; (8008b0c <tcp_input_delayed_close+0x40>)
 8008af4:	f7ff fbfe 	bl	80082f4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008af8:	4621      	mov	r1, r4
 8008afa:	2001      	movs	r0, #1
 8008afc:	f7fe fa80 	bl	8007000 <memp_free>
    return 1;
 8008b00:	2001      	movs	r0, #1
 8008b02:	bd10      	pop	{r4, pc}
  return 0;
 8008b04:	2000      	movs	r0, #0
 8008b06:	4770      	bx	lr
 8008b08:	20003eec 	.word	0x20003eec
 8008b0c:	20007234 	.word	0x20007234

08008b10 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8008b10:	4b1c      	ldr	r3, [pc, #112]	; (8008b84 <tcp_timewait_input+0x74>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	f013 0f04 	tst.w	r3, #4
 8008b18:	d132      	bne.n	8008b80 <tcp_timewait_input+0x70>
{
 8008b1a:	b510      	push	{r4, lr}
 8008b1c:	b082      	sub	sp, #8
  if (flags & TCP_SYN) {
 8008b1e:	f013 0f02 	tst.w	r3, #2
 8008b22:	d01c      	beq.n	8008b5e <tcp_timewait_input+0x4e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008b24:	4b18      	ldr	r3, [pc, #96]	; (8008b88 <tcp_timewait_input+0x78>)
 8008b26:	6819      	ldr	r1, [r3, #0]
 8008b28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b2a:	1aca      	subs	r2, r1, r3
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	db1c      	blt.n	8008b6a <tcp_timewait_input+0x5a>
 8008b30:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8008b32:	4413      	add	r3, r2
 8008b34:	1acb      	subs	r3, r1, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	dc17      	bgt.n	8008b6a <tcp_timewait_input+0x5a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b3a:	4b14      	ldr	r3, [pc, #80]	; (8008b8c <tcp_timewait_input+0x7c>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b3e:	4a14      	ldr	r2, [pc, #80]	; (8008b90 <tcp_timewait_input+0x80>)
 8008b40:	4814      	ldr	r0, [pc, #80]	; (8008b94 <tcp_timewait_input+0x84>)
 8008b42:	8800      	ldrh	r0, [r0, #0]
 8008b44:	881c      	ldrh	r4, [r3, #0]
 8008b46:	9401      	str	r4, [sp, #4]
 8008b48:	885b      	ldrh	r3, [r3, #2]
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	3204      	adds	r2, #4
 8008b50:	4401      	add	r1, r0
 8008b52:	4811      	ldr	r0, [pc, #68]	; (8008b98 <tcp_timewait_input+0x88>)
 8008b54:	6800      	ldr	r0, [r0, #0]
 8008b56:	f002 f9f7 	bl	800af48 <tcp_rst>
}
 8008b5a:	b002      	add	sp, #8
 8008b5c:	bd10      	pop	{r4, pc}
  } else if (flags & TCP_FIN) {
 8008b5e:	f013 0f01 	tst.w	r3, #1
 8008b62:	d002      	beq.n	8008b6a <tcp_timewait_input+0x5a>
    pcb->tmr = tcp_ticks;
 8008b64:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <tcp_timewait_input+0x8c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6203      	str	r3, [r0, #32]
  if ((tcplen > 0)) {
 8008b6a:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <tcp_timewait_input+0x84>)
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0f3      	beq.n	8008b5a <tcp_timewait_input+0x4a>
    pcb->flags |= TF_ACK_NOW;
 8008b72:	7e83      	ldrb	r3, [r0, #26]
 8008b74:	f043 0302 	orr.w	r3, r3, #2
 8008b78:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 8008b7a:	f002 f889 	bl	800ac90 <tcp_output>
 8008b7e:	e7ec      	b.n	8008b5a <tcp_timewait_input+0x4a>
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20003ed0 	.word	0x20003ed0
 8008b88:	20003ef0 	.word	0x20003ef0
 8008b8c:	20003ef8 	.word	0x20003ef8
 8008b90:	20003f74 	.word	0x20003f74
 8008b94:	20003f06 	.word	0x20003f06
 8008b98:	20003ecc 	.word	0x20003ecc
 8008b9c:	20007238 	.word	0x20007238

08008ba0 <tcp_listen_input>:
  if (flags & TCP_RST) {
 8008ba0:	4b3c      	ldr	r3, [pc, #240]	; (8008c94 <tcp_listen_input+0xf4>)
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	f013 0f04 	tst.w	r3, #4
 8008ba8:	d173      	bne.n	8008c92 <tcp_listen_input+0xf2>
{
 8008baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bac:	b083      	sub	sp, #12
 8008bae:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 8008bb0:	f013 0f10 	tst.w	r3, #16
 8008bb4:	d104      	bne.n	8008bc0 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 8008bb6:	f013 0f02 	tst.w	r3, #2
 8008bba:	d114      	bne.n	8008be6 <tcp_listen_input+0x46>
}
 8008bbc:	b003      	add	sp, #12
 8008bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bc0:	4b35      	ldr	r3, [pc, #212]	; (8008c98 <tcp_listen_input+0xf8>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bc4:	4a35      	ldr	r2, [pc, #212]	; (8008c9c <tcp_listen_input+0xfc>)
 8008bc6:	4936      	ldr	r1, [pc, #216]	; (8008ca0 <tcp_listen_input+0x100>)
 8008bc8:	880c      	ldrh	r4, [r1, #0]
 8008bca:	4936      	ldr	r1, [pc, #216]	; (8008ca4 <tcp_listen_input+0x104>)
 8008bcc:	6809      	ldr	r1, [r1, #0]
 8008bce:	4836      	ldr	r0, [pc, #216]	; (8008ca8 <tcp_listen_input+0x108>)
 8008bd0:	6800      	ldr	r0, [r0, #0]
 8008bd2:	881d      	ldrh	r5, [r3, #0]
 8008bd4:	9501      	str	r5, [sp, #4]
 8008bd6:	885b      	ldrh	r3, [r3, #2]
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	3204      	adds	r2, #4
 8008bde:	4421      	add	r1, r4
 8008be0:	f002 f9b2 	bl	800af48 <tcp_rst>
 8008be4:	e7ea      	b.n	8008bbc <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 8008be6:	7d40      	ldrb	r0, [r0, #21]
 8008be8:	f7ff fe58 	bl	800889c <tcp_alloc>
    if (npcb == NULL) {
 8008bec:	4604      	mov	r4, r0
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d041      	beq.n	8008c76 <tcp_listen_input+0xd6>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008bf2:	4b2e      	ldr	r3, [pc, #184]	; (8008cac <tcp_listen_input+0x10c>)
 8008bf4:	695a      	ldr	r2, [r3, #20]
 8008bf6:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8008bfc:	8aeb      	ldrh	r3, [r5, #22]
 8008bfe:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8008c00:	4e25      	ldr	r6, [pc, #148]	; (8008c98 <tcp_listen_input+0xf8>)
 8008c02:	6833      	ldr	r3, [r6, #0]
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8008c0c:	4f25      	ldr	r7, [pc, #148]	; (8008ca4 <tcp_listen_input+0x104>)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	3301      	adds	r3, #1
 8008c12:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008c14:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008c16:	f7ff fea7 	bl	8008968 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 8008c1a:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_nxt = iss;
 8008c1c:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8008c1e:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008c20:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8008c28:	692b      	ldr	r3, [r5, #16]
 8008c2a:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8008c2c:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008c2e:	7a2b      	ldrb	r3, [r5, #8]
 8008c30:	f003 030c 	and.w	r3, r3, #12
 8008c34:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8008c36:	4b1e      	ldr	r3, [pc, #120]	; (8008cb0 <tcp_listen_input+0x110>)
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	60e2      	str	r2, [r4, #12]
 8008c3c:	601c      	str	r4, [r3, #0]
 8008c3e:	f002 fb8f 	bl	800b360 <tcp_timer_needed>
 8008c42:	2201      	movs	r2, #1
 8008c44:	4b1b      	ldr	r3, [pc, #108]	; (8008cb4 <tcp_listen_input+0x114>)
 8008c46:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f7ff fefb 	bl	8008a44 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008c4e:	6833      	ldr	r3, [r6, #0]
 8008c50:	89db      	ldrh	r3, [r3, #14]
 8008c52:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008c56:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008c5a:	1d21      	adds	r1, r4, #4
 8008c5c:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8008c5e:	f7ff fe8f 	bl	8008980 <tcp_eff_send_mss_impl>
 8008c62:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008c64:	2112      	movs	r1, #18
 8008c66:	4620      	mov	r0, r4
 8008c68:	f001 ff02 	bl	800aa70 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8008c6c:	b960      	cbnz	r0, 8008c88 <tcp_listen_input+0xe8>
    tcp_output(npcb);
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f002 f80e 	bl	800ac90 <tcp_output>
 8008c74:	e7a2      	b.n	8008bbc <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008c76:	69ab      	ldr	r3, [r5, #24]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d09f      	beq.n	8008bbc <tcp_listen_input+0x1c>
 8008c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c80:	2100      	movs	r1, #0
 8008c82:	6928      	ldr	r0, [r5, #16]
 8008c84:	4798      	blx	r3
 8008c86:	e799      	b.n	8008bbc <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 8008c88:	2100      	movs	r1, #0
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f7ff fd02 	bl	8008694 <tcp_abandon>
      return;
 8008c90:	e794      	b.n	8008bbc <tcp_listen_input+0x1c>
 8008c92:	4770      	bx	lr
 8008c94:	20003ed0 	.word	0x20003ed0
 8008c98:	20003ef8 	.word	0x20003ef8
 8008c9c:	20003f74 	.word	0x20003f74
 8008ca0:	20003f06 	.word	0x20003f06
 8008ca4:	20003ef0 	.word	0x20003ef0
 8008ca8:	20003ecc 	.word	0x20003ecc
 8008cac:	20003f64 	.word	0x20003f64
 8008cb0:	20007234 	.word	0x20007234
 8008cb4:	20007230 	.word	0x20007230

08008cb8 <tcp_oos_insert_segment>:
{
 8008cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cba:	4605      	mov	r5, r0
 8008cbc:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008cbe:	68c3      	ldr	r3, [r0, #12]
 8008cc0:	8998      	ldrh	r0, [r3, #12]
 8008cc2:	f7fc fb57 	bl	8005374 <lwip_htons>
 8008cc6:	f010 0f01 	tst.w	r0, #1
 8008cca:	d009      	beq.n	8008ce0 <tcp_oos_insert_segment+0x28>
    tcp_segs_free(next);
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f7ff f85e 	bl	8007d8e <tcp_segs_free>
    next = NULL;
 8008cd2:	2400      	movs	r4, #0
 8008cd4:	e02e      	b.n	8008d34 <tcp_oos_insert_segment+0x7c>
      next = next->next;
 8008cd6:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f7ff f84b 	bl	8007d74 <tcp_seg_free>
      next = next->next;
 8008cde:	4634      	mov	r4, r6
    while (next &&
 8008ce0:	b1c4      	cbz	r4, 8008d14 <tcp_oos_insert_segment+0x5c>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008ce2:	892b      	ldrh	r3, [r5, #8]
 8008ce4:	4a14      	ldr	r2, [pc, #80]	; (8008d38 <tcp_oos_insert_segment+0x80>)
 8008ce6:	6812      	ldr	r2, [r2, #0]
 8008ce8:	4413      	add	r3, r2
 8008cea:	68e1      	ldr	r1, [r4, #12]
 8008cec:	684a      	ldr	r2, [r1, #4]
 8008cee:	8920      	ldrh	r0, [r4, #8]
 8008cf0:	4402      	add	r2, r0
 8008cf2:	1a9b      	subs	r3, r3, r2
    while (next &&
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	db0d      	blt.n	8008d14 <tcp_oos_insert_segment+0x5c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008cf8:	8988      	ldrh	r0, [r1, #12]
 8008cfa:	f7fc fb3b 	bl	8005374 <lwip_htons>
 8008cfe:	f010 0f01 	tst.w	r0, #1
 8008d02:	d0e8      	beq.n	8008cd6 <tcp_oos_insert_segment+0x1e>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008d04:	68ef      	ldr	r7, [r5, #12]
 8008d06:	89be      	ldrh	r6, [r7, #12]
 8008d08:	2001      	movs	r0, #1
 8008d0a:	f7fc fb33 	bl	8005374 <lwip_htons>
 8008d0e:	4330      	orrs	r0, r6
 8008d10:	81b8      	strh	r0, [r7, #12]
 8008d12:	e7e0      	b.n	8008cd6 <tcp_oos_insert_segment+0x1e>
    if (next &&
 8008d14:	b174      	cbz	r4, 8008d34 <tcp_oos_insert_segment+0x7c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008d16:	892b      	ldrh	r3, [r5, #8]
 8008d18:	4a07      	ldr	r2, [pc, #28]	; (8008d38 <tcp_oos_insert_segment+0x80>)
 8008d1a:	6811      	ldr	r1, [r2, #0]
 8008d1c:	440b      	add	r3, r1
 8008d1e:	68e2      	ldr	r2, [r4, #12]
 8008d20:	6852      	ldr	r2, [r2, #4]
 8008d22:	1a9b      	subs	r3, r3, r2
    if (next &&
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	dd05      	ble.n	8008d34 <tcp_oos_insert_segment+0x7c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008d28:	1a52      	subs	r2, r2, r1
 8008d2a:	b291      	uxth	r1, r2
 8008d2c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008d2e:	6868      	ldr	r0, [r5, #4]
 8008d30:	f7fe fc90 	bl	8007654 <pbuf_realloc>
  cseg->next = next;
 8008d34:	602c      	str	r4, [r5, #0]
 8008d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d38:	20003ef0 	.word	0x20003ef0

08008d3c <tcp_receive>:
{
 8008d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d40:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008d42:	7d03      	ldrb	r3, [r0, #20]
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d979      	bls.n	8008e3c <tcp_receive+0x100>
  if (flags & TCP_ACK) {
 8008d48:	4bae      	ldr	r3, [pc, #696]	; (8009004 <tcp_receive+0x2c8>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	f013 0f10 	tst.w	r3, #16
 8008d50:	f000 81aa 	beq.w	80090a8 <tcp_receive+0x36c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008d54:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8008d58:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008d5a:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008d5c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008d5e:	4baa      	ldr	r3, [pc, #680]	; (8009008 <tcp_receive+0x2cc>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	1acd      	subs	r5, r1, r3
 8008d64:	2d00      	cmp	r5, #0
 8008d66:	db7c      	blt.n	8008e62 <tcp_receive+0x126>
 8008d68:	4299      	cmp	r1, r3
 8008d6a:	d06f      	beq.n	8008e4c <tcp_receive+0x110>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008d6c:	49a7      	ldr	r1, [pc, #668]	; (800900c <tcp_receive+0x2d0>)
 8008d6e:	6809      	ldr	r1, [r1, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008d70:	428a      	cmp	r2, r1
 8008d72:	d071      	beq.n	8008e58 <tcp_receive+0x11c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008d74:	4ba5      	ldr	r3, [pc, #660]	; (800900c <tcp_receive+0x2d0>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008d7a:	1a5a      	subs	r2, r3, r1
 8008d7c:	2a00      	cmp	r2, #0
 8008d7e:	f340 8095 	ble.w	8008eac <tcp_receive+0x170>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008d82:	2a01      	cmp	r2, #1
 8008d84:	d404      	bmi.n	8008d90 <tcp_receive+0x54>
 8008d86:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008d88:	1a9a      	subs	r2, r3, r2
 8008d8a:	2a00      	cmp	r2, #0
 8008d8c:	f340 80cc 	ble.w	8008f28 <tcp_receive+0x1ec>
      tcp_send_empty_ack(pcb);
 8008d90:	4620      	mov	r0, r4
 8008d92:	f001 ff43 	bl	800ac1c <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 8008d96:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 8176 	beq.w	800908a <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008d9e:	4a9b      	ldr	r2, [pc, #620]	; (800900c <tcp_receive+0x2d0>)
 8008da0:	6815      	ldr	r5, [r2, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	6858      	ldr	r0, [r3, #4]
 8008da6:	f7fc fae8 	bl	800537a <lwip_htonl>
 8008daa:	4606      	mov	r6, r0
 8008dac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008dae:	891f      	ldrh	r7, [r3, #8]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	8998      	ldrh	r0, [r3, #12]
 8008db4:	f7fc fade 	bl	8005374 <lwip_htons>
 8008db8:	f010 0f03 	tst.w	r0, #3
 8008dbc:	f000 8163 	beq.w	8009086 <tcp_receive+0x34a>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	443b      	add	r3, r7
 8008dc4:	441e      	add	r6, r3
 8008dc6:	1bad      	subs	r5, r5, r6
    while (pcb->unsent != NULL &&
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	f2c0 815e 	blt.w	800908a <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008dce:	4b8f      	ldr	r3, [pc, #572]	; (800900c <tcp_receive+0x2d0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008dd4:	1a9b      	subs	r3, r3, r2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f300 8157 	bgt.w	800908a <tcp_receive+0x34e>
      next = pcb->unsent;
 8008ddc:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8008dde:	682b      	ldr	r3, [r5, #0]
 8008de0:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 8144 	beq.w	8009070 <tcp_receive+0x334>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008de8:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8008dec:	6868      	ldr	r0, [r5, #4]
 8008dee:	f7fe fca3 	bl	8007738 <pbuf_clen>
 8008df2:	4286      	cmp	r6, r0
 8008df4:	f0c0 813f 	bcc.w	8009076 <tcp_receive+0x33a>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008df8:	6868      	ldr	r0, [r5, #4]
 8008dfa:	f7fe fc9d 	bl	8007738 <pbuf_clen>
 8008dfe:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008e02:	1a18      	subs	r0, r3, r0
 8008e04:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8008e08:	892b      	ldrh	r3, [r5, #8]
 8008e0a:	4a81      	ldr	r2, [pc, #516]	; (8009010 <tcp_receive+0x2d4>)
 8008e0c:	8811      	ldrh	r1, [r2, #0]
 8008e0e:	440b      	add	r3, r1
 8008e10:	8013      	strh	r3, [r2, #0]
      tcp_seg_free(next);
 8008e12:	4628      	mov	r0, r5
 8008e14:	f7fe ffae 	bl	8007d74 <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 8008e18:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0ba      	beq.n	8008d96 <tcp_receive+0x5a>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008e20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1b7      	bne.n	8008d96 <tcp_receive+0x5a>
 8008e26:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1b4      	bne.n	8008d96 <tcp_receive+0x5a>
 8008e2c:	4b79      	ldr	r3, [pc, #484]	; (8009014 <tcp_receive+0x2d8>)
 8008e2e:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8008e32:	4979      	ldr	r1, [pc, #484]	; (8009018 <tcp_receive+0x2dc>)
 8008e34:	4879      	ldr	r0, [pc, #484]	; (800901c <tcp_receive+0x2e0>)
 8008e36:	f003 fba8 	bl	800c58a <iprintf>
 8008e3a:	e7ac      	b.n	8008d96 <tcp_receive+0x5a>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008e3c:	4b75      	ldr	r3, [pc, #468]	; (8009014 <tcp_receive+0x2d8>)
 8008e3e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8008e42:	4977      	ldr	r1, [pc, #476]	; (8009020 <tcp_receive+0x2e4>)
 8008e44:	4875      	ldr	r0, [pc, #468]	; (800901c <tcp_receive+0x2e0>)
 8008e46:	f003 fba0 	bl	800c58a <iprintf>
 8008e4a:	e77d      	b.n	8008d48 <tcp_receive+0xc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008e4c:	496f      	ldr	r1, [pc, #444]	; (800900c <tcp_receive+0x2d0>)
 8008e4e:	6809      	ldr	r1, [r1, #0]
 8008e50:	1a51      	subs	r1, r2, r1
 8008e52:	2900      	cmp	r1, #0
 8008e54:	da8a      	bge.n	8008d6c <tcp_receive+0x30>
 8008e56:	e004      	b.n	8008e62 <tcp_receive+0x126>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008e58:	4a72      	ldr	r2, [pc, #456]	; (8009024 <tcp_receive+0x2e8>)
 8008e5a:	6812      	ldr	r2, [r2, #0]
 8008e5c:	89d2      	ldrh	r2, [r2, #14]
 8008e5e:	4290      	cmp	r0, r2
 8008e60:	d288      	bcs.n	8008d74 <tcp_receive+0x38>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008e62:	4a70      	ldr	r2, [pc, #448]	; (8009024 <tcp_receive+0x2e8>)
 8008e64:	6812      	ldr	r2, [r2, #0]
 8008e66:	89d2      	ldrh	r2, [r2, #14]
 8008e68:	b291      	uxth	r1, r2
 8008e6a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008e6e:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 8008e72:	4281      	cmp	r1, r0
 8008e74:	d901      	bls.n	8008e7a <tcp_receive+0x13e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008e76:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 8008e7a:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8008e7c:	4b63      	ldr	r3, [pc, #396]	; (800900c <tcp_receive+0x2d0>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8008e82:	b951      	cbnz	r1, 8008e9a <tcp_receive+0x15e>
        if (pcb->persist_backoff == 0) {
 8008e84:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f47f af73 	bne.w	8008d74 <tcp_receive+0x38>
          pcb->persist_cnt = 0;
 8008e8e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8008e92:	2301      	movs	r3, #1
 8008e94:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8008e98:	e76c      	b.n	8008d74 <tcp_receive+0x38>
      } else if (pcb->persist_backoff > 0) {
 8008e9a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f43f af68 	beq.w	8008d74 <tcp_receive+0x38>
          pcb->persist_backoff = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8008eaa:	e763      	b.n	8008d74 <tcp_receive+0x38>
      if (tcplen == 0) {
 8008eac:	4a5e      	ldr	r2, [pc, #376]	; (8009028 <tcp_receive+0x2ec>)
 8008eae:	8812      	ldrh	r2, [r2, #0]
 8008eb0:	bb7a      	cbnz	r2, 8008f12 <tcp_receive+0x1d6>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008eb2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008eb4:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8008eb8:	4402      	add	r2, r0
 8008eba:	4296      	cmp	r6, r2
 8008ebc:	d001      	beq.n	8008ec2 <tcp_receive+0x186>
  int found_dupack = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	e028      	b.n	8008f14 <tcp_receive+0x1d8>
          if (pcb->rtime >= 0) {
 8008ec2:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8008ec6:	2a00      	cmp	r2, #0
 8008ec8:	db2a      	blt.n	8008f20 <tcp_receive+0x1e4>
            if (pcb->lastack == ackno) {
 8008eca:	428b      	cmp	r3, r1
 8008ecc:	d001      	beq.n	8008ed2 <tcp_receive+0x196>
  int found_dupack = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e020      	b.n	8008f14 <tcp_receive+0x1d8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008ed2:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ed6:	1c53      	adds	r3, r2, #1
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d201      	bcs.n	8008ee2 <tcp_receive+0x1a6>
                ++pcb->dupacks;
 8008ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8008ee2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	d90a      	bls.n	8008f00 <tcp_receive+0x1c4>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008eea:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008eee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008ef0:	4413      	add	r3, r2
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d215      	bcs.n	8008f24 <tcp_receive+0x1e8>
                  pcb->cwnd += pcb->mss;
 8008ef8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
              found_dupack = 1;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e009      	b.n	8008f14 <tcp_receive+0x1d8>
              } else if (pcb->dupacks == 3) {
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d001      	beq.n	8008f08 <tcp_receive+0x1cc>
              found_dupack = 1;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e005      	b.n	8008f14 <tcp_receive+0x1d8>
                tcp_rexmit_fast(pcb);
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f002 f8b6 	bl	800b07a <tcp_rexmit_fast>
              found_dupack = 1;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e000      	b.n	8008f14 <tcp_receive+0x1d8>
  int found_dupack = 0;
 8008f12:	2300      	movs	r3, #0
      if (!found_dupack) {
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f47f af3e 	bne.w	8008d96 <tcp_receive+0x5a>
        pcb->dupacks = 0;
 8008f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f1e:	e73a      	b.n	8008d96 <tcp_receive+0x5a>
  int found_dupack = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	e7f7      	b.n	8008f14 <tcp_receive+0x1d8>
              found_dupack = 1;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e7f5      	b.n	8008f14 <tcp_receive+0x1d8>
      if (pcb->flags & TF_INFR) {
 8008f28:	7ea2      	ldrb	r2, [r4, #26]
 8008f2a:	f012 0f04 	tst.w	r2, #4
 8008f2e:	d006      	beq.n	8008f3e <tcp_receive+0x202>
        pcb->flags &= ~TF_INFR;
 8008f30:	f022 0204 	bic.w	r2, r2, #4
 8008f34:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8008f36:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8008f3a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 8008f3e:	2100      	movs	r1, #0
 8008f40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008f44:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8008f48:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008f4a:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 8008f4e:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8008f52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8008f56:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8008f58:	7d23      	ldrb	r3, [r4, #20]
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d90c      	bls.n	8008f78 <tcp_receive+0x23c>
        if (pcb->cwnd < pcb->ssthresh) {
 8008f5e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008f62:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d260      	bcs.n	800902c <tcp_receive+0x2f0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008f6a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008f6c:	4413      	add	r3, r2
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d201      	bcs.n	8008f78 <tcp_receive+0x23c>
            pcb->cwnd += pcb->mss;
 8008f74:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 8008f78:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d06d      	beq.n	800905a <tcp_receive+0x31e>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	6858      	ldr	r0, [r3, #4]
 8008f82:	f7fc f9fa 	bl	800537a <lwip_htonl>
 8008f86:	4605      	mov	r5, r0
 8008f88:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008f8a:	891e      	ldrh	r6, [r3, #8]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	8998      	ldrh	r0, [r3, #12]
 8008f90:	f7fc f9f0 	bl	8005374 <lwip_htons>
 8008f94:	f010 0f03 	tst.w	r0, #3
 8008f98:	d05d      	beq.n	8009056 <tcp_receive+0x31a>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	4433      	add	r3, r6
 8008f9e:	441d      	add	r5, r3
 8008fa0:	4b1a      	ldr	r3, [pc, #104]	; (800900c <tcp_receive+0x2d0>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 8008fa6:	2d00      	cmp	r5, #0
 8008fa8:	dc57      	bgt.n	800905a <tcp_receive+0x31e>
        next = pcb->unacked;
 8008faa:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008fb0:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8008fb4:	6868      	ldr	r0, [r5, #4]
 8008fb6:	f7fe fbbf 	bl	8007738 <pbuf_clen>
 8008fba:	4286      	cmp	r6, r0
 8008fbc:	d343      	bcc.n	8009046 <tcp_receive+0x30a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008fbe:	6868      	ldr	r0, [r5, #4]
 8008fc0:	f7fe fbba 	bl	8007738 <pbuf_clen>
 8008fc4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008fc8:	1a18      	subs	r0, r3, r0
 8008fca:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8008fce:	892b      	ldrh	r3, [r5, #8]
 8008fd0:	4a0f      	ldr	r2, [pc, #60]	; (8009010 <tcp_receive+0x2d4>)
 8008fd2:	8811      	ldrh	r1, [r2, #0]
 8008fd4:	440b      	add	r3, r1
 8008fd6:	8013      	strh	r3, [r2, #0]
        tcp_seg_free(next);
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f7fe fecb 	bl	8007d74 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8008fde:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d0c8      	beq.n	8008f78 <tcp_receive+0x23c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008fe6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1c5      	bne.n	8008f78 <tcp_receive+0x23c>
 8008fec:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1c2      	bne.n	8008f78 <tcp_receive+0x23c>
 8008ff2:	4b08      	ldr	r3, [pc, #32]	; (8009014 <tcp_receive+0x2d8>)
 8008ff4:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8008ff8:	4907      	ldr	r1, [pc, #28]	; (8009018 <tcp_receive+0x2dc>)
 8008ffa:	4808      	ldr	r0, [pc, #32]	; (800901c <tcp_receive+0x2e0>)
 8008ffc:	f003 fac5 	bl	800c58a <iprintf>
 8009000:	e7ba      	b.n	8008f78 <tcp_receive+0x23c>
 8009002:	bf00      	nop
 8009004:	20003ed0 	.word	0x20003ed0
 8009008:	20003ef0 	.word	0x20003ef0
 800900c:	20003ecc 	.word	0x20003ecc
 8009010:	20003ee4 	.word	0x20003ee4
 8009014:	0800e11c 	.word	0x0800e11c
 8009018:	0800e194 	.word	0x0800e194
 800901c:	0800c8d0 	.word	0x0800c8d0
 8009020:	0800e150 	.word	0x0800e150
 8009024:	20003ef8 	.word	0x20003ef8
 8009028:	20003f06 	.word	0x20003f06
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800902c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800902e:	fb03 f303 	mul.w	r3, r3, r3
 8009032:	fb93 f3f2 	sdiv	r3, r3, r2
 8009036:	fa12 f383 	uxtah	r3, r2, r3
 800903a:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 800903c:	429a      	cmp	r2, r3
 800903e:	d29b      	bcs.n	8008f78 <tcp_receive+0x23c>
            pcb->cwnd = new_cwnd;
 8009040:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8009044:	e798      	b.n	8008f78 <tcp_receive+0x23c>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8009046:	4ba2      	ldr	r3, [pc, #648]	; (80092d0 <tcp_receive+0x594>)
 8009048:	f240 429e 	movw	r2, #1182	; 0x49e
 800904c:	49a1      	ldr	r1, [pc, #644]	; (80092d4 <tcp_receive+0x598>)
 800904e:	48a2      	ldr	r0, [pc, #648]	; (80092d8 <tcp_receive+0x59c>)
 8009050:	f003 fa9b 	bl	800c58a <iprintf>
 8009054:	e7b3      	b.n	8008fbe <tcp_receive+0x282>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8009056:	2300      	movs	r3, #0
 8009058:	e7a0      	b.n	8008f9c <tcp_receive+0x260>
      if (pcb->unacked == NULL) {
 800905a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800905c:	b123      	cbz	r3, 8009068 <tcp_receive+0x32c>
        pcb->rtime = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	76e3      	strb	r3, [r4, #27]
 8009066:	e696      	b.n	8008d96 <tcp_receive+0x5a>
        pcb->rtime = -1;
 8009068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800906c:	8623      	strh	r3, [r4, #48]	; 0x30
 800906e:	e7f8      	b.n	8009062 <tcp_receive+0x326>
        pcb->unsent_oversize = 0;
 8009070:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8009074:	e6b8      	b.n	8008de8 <tcp_receive+0xac>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8009076:	4b96      	ldr	r3, [pc, #600]	; (80092d0 <tcp_receive+0x594>)
 8009078:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800907c:	4995      	ldr	r1, [pc, #596]	; (80092d4 <tcp_receive+0x598>)
 800907e:	4896      	ldr	r0, [pc, #600]	; (80092d8 <tcp_receive+0x59c>)
 8009080:	f003 fa83 	bl	800c58a <iprintf>
 8009084:	e6b8      	b.n	8008df8 <tcp_receive+0xbc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009086:	2300      	movs	r3, #0
 8009088:	e69b      	b.n	8008dc2 <tcp_receive+0x86>
    pcb->snd_buf += recv_acked;
 800908a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800908e:	4a93      	ldr	r2, [pc, #588]	; (80092dc <tcp_receive+0x5a0>)
 8009090:	8812      	ldrh	r2, [r2, #0]
 8009092:	4413      	add	r3, r2
 8009094:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009098:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800909a:	b12b      	cbz	r3, 80090a8 <tcp_receive+0x36c>
 800909c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800909e:	4990      	ldr	r1, [pc, #576]	; (80092e0 <tcp_receive+0x5a4>)
 80090a0:	6809      	ldr	r1, [r1, #0]
 80090a2:	1a52      	subs	r2, r2, r1
 80090a4:	2a00      	cmp	r2, #0
 80090a6:	db29      	blt.n	80090fc <tcp_receive+0x3c0>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80090a8:	4b8e      	ldr	r3, [pc, #568]	; (80092e4 <tcp_receive+0x5a8>)
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 834b 	beq.w	8009748 <tcp_receive+0xa0c>
 80090b2:	7d22      	ldrb	r2, [r4, #20]
 80090b4:	2a06      	cmp	r2, #6
 80090b6:	f200 8347 	bhi.w	8009748 <tcp_receive+0xa0c>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80090ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80090bc:	4a8a      	ldr	r2, [pc, #552]	; (80092e8 <tcp_receive+0x5ac>)
 80090be:	6812      	ldr	r2, [r2, #0]
 80090c0:	1a8e      	subs	r6, r1, r2
 80090c2:	2e01      	cmp	r6, #1
 80090c4:	d404      	bmi.n	80090d0 <tcp_receive+0x394>
 80090c6:	4413      	add	r3, r2
 80090c8:	1acb      	subs	r3, r1, r3
 80090ca:	3301      	adds	r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	dd36      	ble.n	800913e <tcp_receive+0x402>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80090d0:	1a52      	subs	r2, r2, r1
 80090d2:	2a00      	cmp	r2, #0
 80090d4:	f2c0 8093 	blt.w	80091fe <tcp_receive+0x4c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80090d8:	4b83      	ldr	r3, [pc, #524]	; (80092e8 <tcp_receive+0x5ac>)
 80090da:	6819      	ldr	r1, [r3, #0]
 80090dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80090de:	1a8b      	subs	r3, r1, r2
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	db06      	blt.n	80090f2 <tcp_receive+0x3b6>
 80090e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80090e6:	4413      	add	r3, r2
 80090e8:	1acb      	subs	r3, r1, r3
 80090ea:	3301      	adds	r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f340 808b 	ble.w	8009208 <tcp_receive+0x4cc>
      tcp_send_empty_ack(pcb);
 80090f2:	4620      	mov	r0, r4
 80090f4:	f001 fd92 	bl	800ac1c <tcp_send_empty_ack>
 80090f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80090fc:	4a7b      	ldr	r2, [pc, #492]	; (80092ec <tcp_receive+0x5b0>)
 80090fe:	6812      	ldr	r2, [r2, #0]
 8009100:	1ad2      	subs	r2, r2, r3
 8009102:	b292      	uxth	r2, r2
      m = m - (pcb->sa >> 3);
 8009104:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8009108:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 800910c:	b292      	uxth	r2, r2
 800910e:	b213      	sxth	r3, r2
      pcb->sa += m;
 8009110:	4411      	add	r1, r2
 8009112:	b209      	sxth	r1, r1
 8009114:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 8009116:	2b00      	cmp	r3, #0
 8009118:	db0e      	blt.n	8009138 <tcp_receive+0x3fc>
      m = m - (pcb->sv >> 2);
 800911a:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 800911e:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv += m;
 8009122:	fa12 f383 	uxtah	r3, r2, r3
 8009126:	b29b      	uxth	r3, r3
 8009128:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800912a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800912e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	6363      	str	r3, [r4, #52]	; 0x34
 8009136:	e7b7      	b.n	80090a8 <tcp_receive+0x36c>
        m = -m;
 8009138:	4253      	negs	r3, r2
 800913a:	b21b      	sxth	r3, r3
 800913c:	e7ed      	b.n	800911a <tcp_receive+0x3de>
      struct pbuf *p = inseg.p;
 800913e:	4b6c      	ldr	r3, [pc, #432]	; (80092f0 <tcp_receive+0x5b4>)
 8009140:	685d      	ldr	r5, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 8009142:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009144:	b195      	cbz	r5, 800916c <tcp_receive+0x430>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8009146:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800914a:	429e      	cmp	r6, r3
 800914c:	dc16      	bgt.n	800917c <tcp_receive+0x440>
      if (inseg.p->len < off) {
 800914e:	4b68      	ldr	r3, [pc, #416]	; (80092f0 <tcp_receive+0x5b4>)
 8009150:	6858      	ldr	r0, [r3, #4]
 8009152:	8943      	ldrh	r3, [r0, #10]
 8009154:	429e      	cmp	r6, r3
 8009156:	dd44      	ble.n	80091e2 <tcp_receive+0x4a6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009158:	8903      	ldrh	r3, [r0, #8]
 800915a:	429e      	cmp	r6, r3
 800915c:	dc16      	bgt.n	800918c <tcp_receive+0x450>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800915e:	4b64      	ldr	r3, [pc, #400]	; (80092f0 <tcp_receive+0x5b4>)
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	891a      	ldrh	r2, [r3, #8]
 8009164:	b2b6      	uxth	r6, r6
 8009166:	1b92      	subs	r2, r2, r6
 8009168:	b292      	uxth	r2, r2
        while (p->len < off) {
 800916a:	e01c      	b.n	80091a6 <tcp_receive+0x46a>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800916c:	4b58      	ldr	r3, [pc, #352]	; (80092d0 <tcp_receive+0x594>)
 800916e:	f240 523c 	movw	r2, #1340	; 0x53c
 8009172:	4960      	ldr	r1, [pc, #384]	; (80092f4 <tcp_receive+0x5b8>)
 8009174:	4858      	ldr	r0, [pc, #352]	; (80092d8 <tcp_receive+0x59c>)
 8009176:	f003 fa08 	bl	800c58a <iprintf>
 800917a:	e7e4      	b.n	8009146 <tcp_receive+0x40a>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800917c:	4b54      	ldr	r3, [pc, #336]	; (80092d0 <tcp_receive+0x594>)
 800917e:	f240 523d 	movw	r2, #1341	; 0x53d
 8009182:	495d      	ldr	r1, [pc, #372]	; (80092f8 <tcp_receive+0x5bc>)
 8009184:	4854      	ldr	r0, [pc, #336]	; (80092d8 <tcp_receive+0x59c>)
 8009186:	f003 fa00 	bl	800c58a <iprintf>
 800918a:	e7e0      	b.n	800914e <tcp_receive+0x412>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800918c:	4b50      	ldr	r3, [pc, #320]	; (80092d0 <tcp_receive+0x594>)
 800918e:	f240 523f 	movw	r2, #1343	; 0x53f
 8009192:	495a      	ldr	r1, [pc, #360]	; (80092fc <tcp_receive+0x5c0>)
 8009194:	4850      	ldr	r0, [pc, #320]	; (80092d8 <tcp_receive+0x59c>)
 8009196:	f003 f9f8 	bl	800c58a <iprintf>
 800919a:	e7e0      	b.n	800915e <tcp_receive+0x422>
          off -= p->len;
 800919c:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 800919e:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	816b      	strh	r3, [r5, #10]
          p = p->next;
 80091a4:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 80091a6:	896b      	ldrh	r3, [r5, #10]
 80091a8:	429f      	cmp	r7, r3
 80091aa:	dcf7      	bgt.n	800919c <tcp_receive+0x460>
        if (pbuf_header(p, (s16_t)-off)) {
 80091ac:	4279      	negs	r1, r7
 80091ae:	b209      	sxth	r1, r1
 80091b0:	4628      	mov	r0, r5
 80091b2:	f7fe f8f1 	bl	8007398 <pbuf_header>
 80091b6:	b960      	cbnz	r0, 80091d2 <tcp_receive+0x496>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80091b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80091ba:	484b      	ldr	r0, [pc, #300]	; (80092e8 <tcp_receive+0x5ac>)
 80091bc:	6803      	ldr	r3, [r0, #0]
 80091be:	1a9b      	subs	r3, r3, r2
 80091c0:	494b      	ldr	r1, [pc, #300]	; (80092f0 <tcp_receive+0x5b4>)
 80091c2:	890d      	ldrh	r5, [r1, #8]
 80091c4:	fa15 f383 	uxtah	r3, r5, r3
 80091c8:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80091ca:	68cb      	ldr	r3, [r1, #12]
 80091cc:	6002      	str	r2, [r0, #0]
 80091ce:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80091d0:	e782      	b.n	80090d8 <tcp_receive+0x39c>
          LWIP_ASSERT("pbuf_header failed", 0);
 80091d2:	4b3f      	ldr	r3, [pc, #252]	; (80092d0 <tcp_receive+0x594>)
 80091d4:	f240 524c 	movw	r2, #1356	; 0x54c
 80091d8:	4949      	ldr	r1, [pc, #292]	; (8009300 <tcp_receive+0x5c4>)
 80091da:	483f      	ldr	r0, [pc, #252]	; (80092d8 <tcp_receive+0x59c>)
 80091dc:	f003 f9d5 	bl	800c58a <iprintf>
 80091e0:	e7ea      	b.n	80091b8 <tcp_receive+0x47c>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80091e2:	4271      	negs	r1, r6
 80091e4:	b209      	sxth	r1, r1
 80091e6:	f7fe f8d7 	bl	8007398 <pbuf_header>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d0e4      	beq.n	80091b8 <tcp_receive+0x47c>
          LWIP_ASSERT("pbuf_header failed", 0);
 80091ee:	4b38      	ldr	r3, [pc, #224]	; (80092d0 <tcp_receive+0x594>)
 80091f0:	f240 5251 	movw	r2, #1361	; 0x551
 80091f4:	4942      	ldr	r1, [pc, #264]	; (8009300 <tcp_receive+0x5c4>)
 80091f6:	4838      	ldr	r0, [pc, #224]	; (80092d8 <tcp_receive+0x59c>)
 80091f8:	f003 f9c7 	bl	800c58a <iprintf>
 80091fc:	e7dc      	b.n	80091b8 <tcp_receive+0x47c>
        tcp_ack_now(pcb);
 80091fe:	7ea3      	ldrb	r3, [r4, #26]
 8009200:	f043 0302 	orr.w	r3, r3, #2
 8009204:	76a3      	strb	r3, [r4, #26]
 8009206:	e767      	b.n	80090d8 <tcp_receive+0x39c>
      if (pcb->rcv_nxt == seqno) {
 8009208:	4291      	cmp	r1, r2
 800920a:	d008      	beq.n	800921e <tcp_receive+0x4e2>
        tcp_send_empty_ack(pcb);
 800920c:	4620      	mov	r0, r4
 800920e:	f001 fd05 	bl	800ac1c <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8009212:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8009214:	2d00      	cmp	r5, #0
 8009216:	f000 81ad 	beq.w	8009574 <tcp_receive+0x838>
 800921a:	2600      	movs	r6, #0
 800921c:	e1e4      	b.n	80095e8 <tcp_receive+0x8ac>
        tcplen = TCP_TCPLEN(&inseg);
 800921e:	4b34      	ldr	r3, [pc, #208]	; (80092f0 <tcp_receive+0x5b4>)
 8009220:	891d      	ldrh	r5, [r3, #8]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	8998      	ldrh	r0, [r3, #12]
 8009226:	f7fc f8a5 	bl	8005374 <lwip_htons>
 800922a:	f010 0f03 	tst.w	r0, #3
 800922e:	d015      	beq.n	800925c <tcp_receive+0x520>
 8009230:	2301      	movs	r3, #1
 8009232:	442b      	add	r3, r5
 8009234:	b29b      	uxth	r3, r3
 8009236:	4a2b      	ldr	r2, [pc, #172]	; (80092e4 <tcp_receive+0x5a8>)
 8009238:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800923a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800923c:	4293      	cmp	r3, r2
 800923e:	d80f      	bhi.n	8009260 <tcp_receive+0x524>
        if (pcb->ooseq != NULL) {
 8009240:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 80ed 	beq.w	8009422 <tcp_receive+0x6e6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009248:	4b29      	ldr	r3, [pc, #164]	; (80092f0 <tcp_receive+0x5b4>)
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	8998      	ldrh	r0, [r3, #12]
 800924e:	f7fc f891 	bl	8005374 <lwip_htons>
 8009252:	f010 0f01 	tst.w	r0, #1
 8009256:	d168      	bne.n	800932a <tcp_receive+0x5ee>
            next = pcb->ooseq;
 8009258:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 800925a:	e077      	b.n	800934c <tcp_receive+0x610>
        tcplen = TCP_TCPLEN(&inseg);
 800925c:	2300      	movs	r3, #0
 800925e:	e7e8      	b.n	8009232 <tcp_receive+0x4f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009260:	4b23      	ldr	r3, [pc, #140]	; (80092f0 <tcp_receive+0x5b4>)
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	8998      	ldrh	r0, [r3, #12]
 8009266:	f7fc f885 	bl	8005374 <lwip_htons>
 800926a:	f010 0f01 	tst.w	r0, #1
 800926e:	d14b      	bne.n	8009308 <tcp_receive+0x5cc>
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009270:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009272:	4b1f      	ldr	r3, [pc, #124]	; (80092f0 <tcp_receive+0x5b4>)
 8009274:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	8998      	ldrh	r0, [r3, #12]
 800927a:	f7fc f87b 	bl	8005374 <lwip_htons>
 800927e:	f010 0f02 	tst.w	r0, #2
 8009282:	d003      	beq.n	800928c <tcp_receive+0x550>
            inseg.len -= 1;
 8009284:	4a1a      	ldr	r2, [pc, #104]	; (80092f0 <tcp_receive+0x5b4>)
 8009286:	8913      	ldrh	r3, [r2, #8]
 8009288:	3b01      	subs	r3, #1
 800928a:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800928c:	4d18      	ldr	r5, [pc, #96]	; (80092f0 <tcp_receive+0x5b4>)
 800928e:	8929      	ldrh	r1, [r5, #8]
 8009290:	6868      	ldr	r0, [r5, #4]
 8009292:	f7fe f9df 	bl	8007654 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009296:	892e      	ldrh	r6, [r5, #8]
 8009298:	68eb      	ldr	r3, [r5, #12]
 800929a:	8998      	ldrh	r0, [r3, #12]
 800929c:	f7fc f86a 	bl	8005374 <lwip_htons>
 80092a0:	f010 0f03 	tst.w	r0, #3
 80092a4:	d03f      	beq.n	8009326 <tcp_receive+0x5ea>
 80092a6:	2301      	movs	r3, #1
 80092a8:	4433      	add	r3, r6
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	4a0d      	ldr	r2, [pc, #52]	; (80092e4 <tcp_receive+0x5a8>)
 80092ae:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80092b0:	4a0d      	ldr	r2, [pc, #52]	; (80092e8 <tcp_receive+0x5ac>)
 80092b2:	6812      	ldr	r2, [r2, #0]
 80092b4:	4413      	add	r3, r2
 80092b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80092b8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80092ba:	440a      	add	r2, r1
 80092bc:	4293      	cmp	r3, r2
 80092be:	d0bf      	beq.n	8009240 <tcp_receive+0x504>
 80092c0:	4b03      	ldr	r3, [pc, #12]	; (80092d0 <tcp_receive+0x594>)
 80092c2:	f240 527f 	movw	r2, #1407	; 0x57f
 80092c6:	490f      	ldr	r1, [pc, #60]	; (8009304 <tcp_receive+0x5c8>)
 80092c8:	4803      	ldr	r0, [pc, #12]	; (80092d8 <tcp_receive+0x59c>)
 80092ca:	f003 f95e 	bl	800c58a <iprintf>
 80092ce:	e7b7      	b.n	8009240 <tcp_receive+0x504>
 80092d0:	0800e11c 	.word	0x0800e11c
 80092d4:	0800e16c 	.word	0x0800e16c
 80092d8:	0800c8d0 	.word	0x0800c8d0
 80092dc:	20003ee4 	.word	0x20003ee4
 80092e0:	20003ecc 	.word	0x20003ecc
 80092e4:	20003f06 	.word	0x20003f06
 80092e8:	20003ef0 	.word	0x20003ef0
 80092ec:	20007238 	.word	0x20007238
 80092f0:	20003ed4 	.word	0x20003ed4
 80092f4:	0800e1b4 	.word	0x0800e1b4
 80092f8:	0800e1c4 	.word	0x0800e1c4
 80092fc:	0800e1d4 	.word	0x0800e1d4
 8009300:	0800e1e4 	.word	0x0800e1e4
 8009304:	0800e1f8 	.word	0x0800e1f8
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009308:	4ba9      	ldr	r3, [pc, #676]	; (80095b0 <tcp_receive+0x874>)
 800930a:	68de      	ldr	r6, [r3, #12]
 800930c:	89b0      	ldrh	r0, [r6, #12]
 800930e:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 8009312:	b2ad      	uxth	r5, r5
 8009314:	f7fc f82e 	bl	8005374 <lwip_htons>
 8009318:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800931c:	f7fc f82a 	bl	8005374 <lwip_htons>
 8009320:	4328      	orrs	r0, r5
 8009322:	81b0      	strh	r0, [r6, #12]
 8009324:	e7a4      	b.n	8009270 <tcp_receive+0x534>
          tcplen = TCP_TCPLEN(&inseg);
 8009326:	2300      	movs	r3, #0
 8009328:	e7be      	b.n	80092a8 <tcp_receive+0x56c>
            while (pcb->ooseq != NULL) {
 800932a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800932c:	2800      	cmp	r0, #0
 800932e:	d078      	beq.n	8009422 <tcp_receive+0x6e6>
              pcb->ooseq = pcb->ooseq->next;
 8009330:	6803      	ldr	r3, [r0, #0]
 8009332:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8009334:	f7fe fd1e 	bl	8007d74 <tcp_seg_free>
 8009338:	e7f7      	b.n	800932a <tcp_receive+0x5ee>
                tcplen = TCP_TCPLEN(&inseg);
 800933a:	2300      	movs	r3, #0
 800933c:	443b      	add	r3, r7
 800933e:	4a9d      	ldr	r2, [pc, #628]	; (80095b4 <tcp_receive+0x878>)
 8009340:	8013      	strh	r3, [r2, #0]
              next = next->next;
 8009342:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 8009344:	4628      	mov	r0, r5
 8009346:	f7fe fd15 	bl	8007d74 <tcp_seg_free>
              next = next->next;
 800934a:	4635      	mov	r5, r6
            while (next &&
 800934c:	b375      	cbz	r5, 80093ac <tcp_receive+0x670>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800934e:	4b99      	ldr	r3, [pc, #612]	; (80095b4 <tcp_receive+0x878>)
 8009350:	881b      	ldrh	r3, [r3, #0]
 8009352:	4a99      	ldr	r2, [pc, #612]	; (80095b8 <tcp_receive+0x87c>)
 8009354:	6812      	ldr	r2, [r2, #0]
 8009356:	4413      	add	r3, r2
 8009358:	68e9      	ldr	r1, [r5, #12]
 800935a:	684a      	ldr	r2, [r1, #4]
 800935c:	8928      	ldrh	r0, [r5, #8]
 800935e:	4402      	add	r2, r0
 8009360:	1a9b      	subs	r3, r3, r2
            while (next &&
 8009362:	2b00      	cmp	r3, #0
 8009364:	db22      	blt.n	80093ac <tcp_receive+0x670>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009366:	8988      	ldrh	r0, [r1, #12]
 8009368:	f7fc f804 	bl	8005374 <lwip_htons>
 800936c:	f010 0f01 	tst.w	r0, #1
 8009370:	d0e7      	beq.n	8009342 <tcp_receive+0x606>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009372:	4b8f      	ldr	r3, [pc, #572]	; (80095b0 <tcp_receive+0x874>)
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	8998      	ldrh	r0, [r3, #12]
 8009378:	f7fb fffc 	bl	8005374 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800937c:	f010 0f02 	tst.w	r0, #2
 8009380:	d1df      	bne.n	8009342 <tcp_receive+0x606>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009382:	4e8b      	ldr	r6, [pc, #556]	; (80095b0 <tcp_receive+0x874>)
 8009384:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8009388:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 800938c:	2001      	movs	r0, #1
 800938e:	f7fb fff1 	bl	8005374 <lwip_htons>
 8009392:	4338      	orrs	r0, r7
 8009394:	f8a8 000c 	strh.w	r0, [r8, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009398:	8937      	ldrh	r7, [r6, #8]
 800939a:	68f3      	ldr	r3, [r6, #12]
 800939c:	8998      	ldrh	r0, [r3, #12]
 800939e:	f7fb ffe9 	bl	8005374 <lwip_htons>
 80093a2:	f010 0f03 	tst.w	r0, #3
 80093a6:	d0c8      	beq.n	800933a <tcp_receive+0x5fe>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e7c7      	b.n	800933c <tcp_receive+0x600>
            if (next &&
 80093ac:	2d00      	cmp	r5, #0
 80093ae:	d037      	beq.n	8009420 <tcp_receive+0x6e4>
                TCP_SEQ_GT(seqno + tcplen,
 80093b0:	4b81      	ldr	r3, [pc, #516]	; (80095b8 <tcp_receive+0x87c>)
 80093b2:	6819      	ldr	r1, [r3, #0]
 80093b4:	4b7f      	ldr	r3, [pc, #508]	; (80095b4 <tcp_receive+0x878>)
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	440b      	add	r3, r1
 80093ba:	68ea      	ldr	r2, [r5, #12]
 80093bc:	6852      	ldr	r2, [r2, #4]
 80093be:	1a9b      	subs	r3, r3, r2
            if (next &&
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	dd2d      	ble.n	8009420 <tcp_receive+0x6e4>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80093c4:	1a52      	subs	r2, r2, r1
 80093c6:	4b7a      	ldr	r3, [pc, #488]	; (80095b0 <tcp_receive+0x874>)
 80093c8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	8998      	ldrh	r0, [r3, #12]
 80093ce:	f7fb ffd1 	bl	8005374 <lwip_htons>
 80093d2:	f010 0f02 	tst.w	r0, #2
 80093d6:	d003      	beq.n	80093e0 <tcp_receive+0x6a4>
                inseg.len -= 1;
 80093d8:	4a75      	ldr	r2, [pc, #468]	; (80095b0 <tcp_receive+0x874>)
 80093da:	8913      	ldrh	r3, [r2, #8]
 80093dc:	3b01      	subs	r3, #1
 80093de:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 80093e0:	4e73      	ldr	r6, [pc, #460]	; (80095b0 <tcp_receive+0x874>)
 80093e2:	8931      	ldrh	r1, [r6, #8]
 80093e4:	6870      	ldr	r0, [r6, #4]
 80093e6:	f7fe f935 	bl	8007654 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80093ea:	8937      	ldrh	r7, [r6, #8]
 80093ec:	68f3      	ldr	r3, [r6, #12]
 80093ee:	8998      	ldrh	r0, [r3, #12]
 80093f0:	f7fb ffc0 	bl	8005374 <lwip_htons>
 80093f4:	f010 0f03 	tst.w	r0, #3
 80093f8:	d03b      	beq.n	8009472 <tcp_receive+0x736>
 80093fa:	2301      	movs	r3, #1
 80093fc:	443b      	add	r3, r7
 80093fe:	b29b      	uxth	r3, r3
 8009400:	4a6c      	ldr	r2, [pc, #432]	; (80095b4 <tcp_receive+0x878>)
 8009402:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009404:	4a6c      	ldr	r2, [pc, #432]	; (80095b8 <tcp_receive+0x87c>)
 8009406:	6812      	ldr	r2, [r2, #0]
 8009408:	4413      	add	r3, r2
 800940a:	68ea      	ldr	r2, [r5, #12]
 800940c:	6852      	ldr	r2, [r2, #4]
 800940e:	4293      	cmp	r3, r2
 8009410:	d006      	beq.n	8009420 <tcp_receive+0x6e4>
 8009412:	4b6a      	ldr	r3, [pc, #424]	; (80095bc <tcp_receive+0x880>)
 8009414:	f240 52af 	movw	r2, #1455	; 0x5af
 8009418:	4969      	ldr	r1, [pc, #420]	; (80095c0 <tcp_receive+0x884>)
 800941a:	486a      	ldr	r0, [pc, #424]	; (80095c4 <tcp_receive+0x888>)
 800941c:	f003 f8b5 	bl	800c58a <iprintf>
            pcb->ooseq = next;
 8009420:	6725      	str	r5, [r4, #112]	; 0x70
        pcb->rcv_nxt = seqno + tcplen;
 8009422:	4b64      	ldr	r3, [pc, #400]	; (80095b4 <tcp_receive+0x878>)
 8009424:	881a      	ldrh	r2, [r3, #0]
 8009426:	4b64      	ldr	r3, [pc, #400]	; (80095b8 <tcp_receive+0x87c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4413      	add	r3, r2
 800942c:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800942e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009430:	429a      	cmp	r2, r3
 8009432:	d820      	bhi.n	8009476 <tcp_receive+0x73a>
        pcb->rcv_wnd -= tcplen;
 8009434:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009436:	4a5f      	ldr	r2, [pc, #380]	; (80095b4 <tcp_receive+0x878>)
 8009438:	8812      	ldrh	r2, [r2, #0]
 800943a:	1a9b      	subs	r3, r3, r2
 800943c:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800943e:	4620      	mov	r0, r4
 8009440:	f7fe fc26 	bl	8007c90 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8009444:	4b5a      	ldr	r3, [pc, #360]	; (80095b0 <tcp_receive+0x874>)
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	891a      	ldrh	r2, [r3, #8]
 800944a:	b122      	cbz	r2, 8009456 <tcp_receive+0x71a>
          recv_data = inseg.p;
 800944c:	4a5e      	ldr	r2, [pc, #376]	; (80095c8 <tcp_receive+0x88c>)
 800944e:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8009450:	2200      	movs	r2, #0
 8009452:	4b57      	ldr	r3, [pc, #348]	; (80095b0 <tcp_receive+0x874>)
 8009454:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009456:	4b56      	ldr	r3, [pc, #344]	; (80095b0 <tcp_receive+0x874>)
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	8998      	ldrh	r0, [r3, #12]
 800945c:	f7fb ff8a 	bl	8005374 <lwip_htons>
 8009460:	f010 0f01 	tst.w	r0, #1
 8009464:	d035      	beq.n	80094d2 <tcp_receive+0x796>
          recv_flags |= TF_GOT_FIN;
 8009466:	4a59      	ldr	r2, [pc, #356]	; (80095cc <tcp_receive+0x890>)
 8009468:	7813      	ldrb	r3, [r2, #0]
 800946a:	f043 0320 	orr.w	r3, r3, #32
 800946e:	7013      	strb	r3, [r2, #0]
 8009470:	e02f      	b.n	80094d2 <tcp_receive+0x796>
              tcplen = TCP_TCPLEN(&inseg);
 8009472:	2300      	movs	r3, #0
 8009474:	e7c2      	b.n	80093fc <tcp_receive+0x6c0>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009476:	4b51      	ldr	r3, [pc, #324]	; (80095bc <tcp_receive+0x880>)
 8009478:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800947c:	4954      	ldr	r1, [pc, #336]	; (80095d0 <tcp_receive+0x894>)
 800947e:	4851      	ldr	r0, [pc, #324]	; (80095c4 <tcp_receive+0x888>)
 8009480:	f003 f883 	bl	800c58a <iprintf>
 8009484:	e7d6      	b.n	8009434 <tcp_receive+0x6f8>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009486:	2300      	movs	r3, #0
 8009488:	e035      	b.n	80094f6 <tcp_receive+0x7ba>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800948a:	2300      	movs	r3, #0
 800948c:	e041      	b.n	8009512 <tcp_receive+0x7d6>
 800948e:	4b4b      	ldr	r3, [pc, #300]	; (80095bc <tcp_receive+0x880>)
 8009490:	f240 52de 	movw	r2, #1502	; 0x5de
 8009494:	494f      	ldr	r1, [pc, #316]	; (80095d4 <tcp_receive+0x898>)
 8009496:	484b      	ldr	r0, [pc, #300]	; (80095c4 <tcp_receive+0x888>)
 8009498:	f003 f877 	bl	800c58a <iprintf>
 800949c:	e03c      	b.n	8009518 <tcp_receive+0x7dc>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800949e:	2300      	movs	r3, #0
 80094a0:	e043      	b.n	800952a <tcp_receive+0x7ee>
              recv_data = cseg->p;
 80094a2:	4b49      	ldr	r3, [pc, #292]	; (80095c8 <tcp_receive+0x88c>)
 80094a4:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80094aa:	68eb      	ldr	r3, [r5, #12]
 80094ac:	8998      	ldrh	r0, [r3, #12]
 80094ae:	f7fb ff61 	bl	8005374 <lwip_htons>
 80094b2:	f010 0f01 	tst.w	r0, #1
 80094b6:	d007      	beq.n	80094c8 <tcp_receive+0x78c>
            recv_flags |= TF_GOT_FIN;
 80094b8:	4a44      	ldr	r2, [pc, #272]	; (80095cc <tcp_receive+0x890>)
 80094ba:	7813      	ldrb	r3, [r2, #0]
 80094bc:	f043 0320 	orr.w	r3, r3, #32
 80094c0:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80094c2:	7d23      	ldrb	r3, [r4, #20]
 80094c4:	2b04      	cmp	r3, #4
 80094c6:	d042      	beq.n	800954e <tcp_receive+0x812>
          pcb->ooseq = cseg->next;
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 80094cc:	4628      	mov	r0, r5
 80094ce:	f7fe fc51 	bl	8007d74 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80094d2:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80094d4:	2d00      	cmp	r5, #0
 80094d6:	d03d      	beq.n	8009554 <tcp_receive+0x818>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80094d8:	68ea      	ldr	r2, [r5, #12]
 80094da:	6853      	ldr	r3, [r2, #4]
 80094dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80094de:	428b      	cmp	r3, r1
 80094e0:	d138      	bne.n	8009554 <tcp_receive+0x818>
          seqno = pcb->ooseq->tcphdr->seqno;
 80094e2:	4935      	ldr	r1, [pc, #212]	; (80095b8 <tcp_receive+0x87c>)
 80094e4:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80094e6:	892e      	ldrh	r6, [r5, #8]
 80094e8:	8990      	ldrh	r0, [r2, #12]
 80094ea:	f7fb ff43 	bl	8005374 <lwip_htons>
 80094ee:	f010 0f03 	tst.w	r0, #3
 80094f2:	d0c8      	beq.n	8009486 <tcp_receive+0x74a>
 80094f4:	2301      	movs	r3, #1
 80094f6:	199a      	adds	r2, r3, r6
 80094f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094fa:	4413      	add	r3, r2
 80094fc:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80094fe:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8009500:	892f      	ldrh	r7, [r5, #8]
 8009502:	68eb      	ldr	r3, [r5, #12]
 8009504:	8998      	ldrh	r0, [r3, #12]
 8009506:	f7fb ff35 	bl	8005374 <lwip_htons>
 800950a:	f010 0f03 	tst.w	r0, #3
 800950e:	d0bc      	beq.n	800948a <tcp_receive+0x74e>
 8009510:	2301      	movs	r3, #1
 8009512:	443b      	add	r3, r7
 8009514:	429e      	cmp	r6, r3
 8009516:	d3ba      	bcc.n	800948e <tcp_receive+0x752>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009518:	892e      	ldrh	r6, [r5, #8]
 800951a:	68eb      	ldr	r3, [r5, #12]
 800951c:	8998      	ldrh	r0, [r3, #12]
 800951e:	f7fb ff29 	bl	8005374 <lwip_htons>
 8009522:	f010 0f03 	tst.w	r0, #3
 8009526:	d0ba      	beq.n	800949e <tcp_receive+0x762>
 8009528:	2301      	movs	r3, #1
 800952a:	199a      	adds	r2, r3, r6
 800952c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800952e:	1a9b      	subs	r3, r3, r2
 8009530:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8009532:	4620      	mov	r0, r4
 8009534:	f7fe fbac 	bl	8007c90 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8009538:	6869      	ldr	r1, [r5, #4]
 800953a:	890b      	ldrh	r3, [r1, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0b4      	beq.n	80094aa <tcp_receive+0x76e>
            if (recv_data) {
 8009540:	4b21      	ldr	r3, [pc, #132]	; (80095c8 <tcp_receive+0x88c>)
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	2800      	cmp	r0, #0
 8009546:	d0ac      	beq.n	80094a2 <tcp_receive+0x766>
              pbuf_cat(recv_data, cseg->p);
 8009548:	f7fe f91c 	bl	8007784 <pbuf_cat>
 800954c:	e7ab      	b.n	80094a6 <tcp_receive+0x76a>
              pcb->state = CLOSE_WAIT;
 800954e:	2307      	movs	r3, #7
 8009550:	7523      	strb	r3, [r4, #20]
 8009552:	e7b9      	b.n	80094c8 <tcp_receive+0x78c>
        tcp_ack(pcb);
 8009554:	7ea3      	ldrb	r3, [r4, #26]
 8009556:	f013 0f01 	tst.w	r3, #1
 800955a:	d006      	beq.n	800956a <tcp_receive+0x82e>
 800955c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009560:	f043 0302 	orr.w	r3, r3, #2
 8009564:	76a3      	strb	r3, [r4, #26]
 8009566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800956a:	f043 0301 	orr.w	r3, r3, #1
 800956e:	76a3      	strb	r3, [r4, #26]
 8009570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009574:	480e      	ldr	r0, [pc, #56]	; (80095b0 <tcp_receive+0x874>)
 8009576:	f7fe fc14 	bl	8007da2 <tcp_seg_copy>
 800957a:	6720      	str	r0, [r4, #112]	; 0x70
 800957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              if (inseg.len > next->len) {
 8009580:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <tcp_receive+0x874>)
 8009582:	891a      	ldrh	r2, [r3, #8]
 8009584:	892b      	ldrh	r3, [r5, #8]
 8009586:	429a      	cmp	r2, r3
 8009588:	f240 80ee 	bls.w	8009768 <tcp_receive+0xa2c>
                cseg = tcp_seg_copy(&inseg);
 800958c:	4808      	ldr	r0, [pc, #32]	; (80095b0 <tcp_receive+0x874>)
 800958e:	f7fe fc08 	bl	8007da2 <tcp_seg_copy>
                if (cseg != NULL) {
 8009592:	4603      	mov	r3, r0
 8009594:	2800      	cmp	r0, #0
 8009596:	f000 80e7 	beq.w	8009768 <tcp_receive+0xa2c>
                  if (prev != NULL) {
 800959a:	b136      	cbz	r6, 80095aa <tcp_receive+0x86e>
                    prev->next = cseg;
 800959c:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800959e:	4629      	mov	r1, r5
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff fb89 	bl	8008cb8 <tcp_oos_insert_segment>
 80095a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pcb->ooseq = cseg;
 80095aa:	6720      	str	r0, [r4, #112]	; 0x70
 80095ac:	e7f7      	b.n	800959e <tcp_receive+0x862>
 80095ae:	bf00      	nop
 80095b0:	20003ed4 	.word	0x20003ed4
 80095b4:	20003f06 	.word	0x20003f06
 80095b8:	20003ef0 	.word	0x20003ef0
 80095bc:	0800e11c 	.word	0x0800e11c
 80095c0:	0800e230 	.word	0x0800e230
 80095c4:	0800c8d0 	.word	0x0800c8d0
 80095c8:	20003ee8 	.word	0x20003ee8
 80095cc:	20003eec 	.word	0x20003eec
 80095d0:	0800e26c 	.word	0x0800e26c
 80095d4:	0800e28c 	.word	0x0800e28c
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80095d8:	1a5a      	subs	r2, r3, r1
 80095da:	2a00      	cmp	r2, #0
 80095dc:	db35      	blt.n	800964a <tcp_receive+0x90e>
              if (next->next == NULL &&
 80095de:	682a      	ldr	r2, [r5, #0]
 80095e0:	462e      	mov	r6, r5
 80095e2:	2a00      	cmp	r2, #0
 80095e4:	d03d      	beq.n	8009662 <tcp_receive+0x926>
 80095e6:	4615      	mov	r5, r2
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80095e8:	2d00      	cmp	r5, #0
 80095ea:	f000 80ab 	beq.w	8009744 <tcp_receive+0xa08>
            if (seqno == next->tcphdr->seqno) {
 80095ee:	68e8      	ldr	r0, [r5, #12]
 80095f0:	6841      	ldr	r1, [r0, #4]
 80095f2:	4b5e      	ldr	r3, [pc, #376]	; (800976c <tcp_receive+0xa30>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4299      	cmp	r1, r3
 80095f8:	d0c2      	beq.n	8009580 <tcp_receive+0x844>
              if (prev == NULL) {
 80095fa:	2e00      	cmp	r6, #0
 80095fc:	d0ec      	beq.n	80095d8 <tcp_receive+0x89c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80095fe:	68f2      	ldr	r2, [r6, #12]
 8009600:	6852      	ldr	r2, [r2, #4]
 8009602:	1a9a      	subs	r2, r3, r2
 8009604:	2a01      	cmp	r2, #1
 8009606:	d4ea      	bmi.n	80095de <tcp_receive+0x8a2>
 8009608:	1a5a      	subs	r2, r3, r1
 800960a:	3201      	adds	r2, #1
 800960c:	2a00      	cmp	r2, #0
 800960e:	dce6      	bgt.n	80095de <tcp_receive+0x8a2>
                  cseg = tcp_seg_copy(&inseg);
 8009610:	4857      	ldr	r0, [pc, #348]	; (8009770 <tcp_receive+0xa34>)
 8009612:	f7fe fbc6 	bl	8007da2 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009616:	4604      	mov	r4, r0
 8009618:	2800      	cmp	r0, #0
 800961a:	f000 80a5 	beq.w	8009768 <tcp_receive+0xa2c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800961e:	68f3      	ldr	r3, [r6, #12]
 8009620:	6859      	ldr	r1, [r3, #4]
 8009622:	8932      	ldrh	r2, [r6, #8]
 8009624:	440a      	add	r2, r1
 8009626:	4b51      	ldr	r3, [pc, #324]	; (800976c <tcp_receive+0xa30>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	1ad2      	subs	r2, r2, r3
 800962c:	2a00      	cmp	r2, #0
 800962e:	dd05      	ble.n	800963c <tcp_receive+0x900>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009630:	1a5b      	subs	r3, r3, r1
 8009632:	b299      	uxth	r1, r3
 8009634:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009636:	6870      	ldr	r0, [r6, #4]
 8009638:	f7fe f80c 	bl	8007654 <pbuf_realloc>
                    prev->next = cseg;
 800963c:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800963e:	4629      	mov	r1, r5
 8009640:	4620      	mov	r0, r4
 8009642:	f7ff fb39 	bl	8008cb8 <tcp_oos_insert_segment>
 8009646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  cseg = tcp_seg_copy(&inseg);
 800964a:	4849      	ldr	r0, [pc, #292]	; (8009770 <tcp_receive+0xa34>)
 800964c:	f7fe fba9 	bl	8007da2 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009650:	2800      	cmp	r0, #0
 8009652:	f000 8089 	beq.w	8009768 <tcp_receive+0xa2c>
                    pcb->ooseq = cseg;
 8009656:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8009658:	4629      	mov	r1, r5
 800965a:	f7ff fb2d 	bl	8008cb8 <tcp_oos_insert_segment>
 800965e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009662:	1a5b      	subs	r3, r3, r1
              if (next->next == NULL &&
 8009664:	2b00      	cmp	r3, #0
 8009666:	dc01      	bgt.n	800966c <tcp_receive+0x930>
 8009668:	4615      	mov	r5, r2
 800966a:	e7bd      	b.n	80095e8 <tcp_receive+0x8ac>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800966c:	8980      	ldrh	r0, [r0, #12]
 800966e:	f7fb fe81 	bl	8005374 <lwip_htons>
 8009672:	f010 0f01 	tst.w	r0, #1
 8009676:	d177      	bne.n	8009768 <tcp_receive+0xa2c>
                next->next = tcp_seg_copy(&inseg);
 8009678:	483d      	ldr	r0, [pc, #244]	; (8009770 <tcp_receive+0xa34>)
 800967a:	f7fe fb92 	bl	8007da2 <tcp_seg_copy>
 800967e:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8009680:	2800      	cmp	r0, #0
 8009682:	d071      	beq.n	8009768 <tcp_receive+0xa2c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009684:	68eb      	ldr	r3, [r5, #12]
 8009686:	6859      	ldr	r1, [r3, #4]
 8009688:	892a      	ldrh	r2, [r5, #8]
 800968a:	440a      	add	r2, r1
 800968c:	4b37      	ldr	r3, [pc, #220]	; (800976c <tcp_receive+0xa30>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	1ad2      	subs	r2, r2, r3
 8009692:	2a00      	cmp	r2, #0
 8009694:	dd05      	ble.n	80096a2 <tcp_receive+0x966>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009696:	1a5b      	subs	r3, r3, r1
 8009698:	b299      	uxth	r1, r3
 800969a:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800969c:	6868      	ldr	r0, [r5, #4]
 800969e:	f7fd ffd9 	bl	8007654 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80096a2:	4b34      	ldr	r3, [pc, #208]	; (8009774 <tcp_receive+0xa38>)
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	4a31      	ldr	r2, [pc, #196]	; (800976c <tcp_receive+0xa30>)
 80096a8:	6812      	ldr	r2, [r2, #0]
 80096aa:	4413      	add	r3, r2
 80096ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80096ae:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80096b0:	440a      	add	r2, r1
 80096b2:	1a9b      	subs	r3, r3, r2
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	dd57      	ble.n	8009768 <tcp_receive+0xa2c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80096b8:	682b      	ldr	r3, [r5, #0]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	8998      	ldrh	r0, [r3, #12]
 80096be:	f7fb fe59 	bl	8005374 <lwip_htons>
 80096c2:	f010 0f01 	tst.w	r0, #1
 80096c6:	d12c      	bne.n	8009722 <tcp_receive+0x9e6>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80096c8:	682a      	ldr	r2, [r5, #0]
 80096ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80096cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80096ce:	440b      	add	r3, r1
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	4926      	ldr	r1, [pc, #152]	; (800976c <tcp_receive+0xa30>)
 80096d4:	6809      	ldr	r1, [r1, #0]
 80096d6:	1a5b      	subs	r3, r3, r1
 80096d8:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80096da:	682b      	ldr	r3, [r5, #0]
 80096dc:	8919      	ldrh	r1, [r3, #8]
 80096de:	6858      	ldr	r0, [r3, #4]
 80096e0:	f7fd ffb8 	bl	8007654 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80096e4:	682b      	ldr	r3, [r5, #0]
 80096e6:	891d      	ldrh	r5, [r3, #8]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	8998      	ldrh	r0, [r3, #12]
 80096ec:	f7fb fe42 	bl	8005374 <lwip_htons>
 80096f0:	f010 0f03 	tst.w	r0, #3
 80096f4:	d024      	beq.n	8009740 <tcp_receive+0xa04>
 80096f6:	2301      	movs	r3, #1
 80096f8:	442b      	add	r3, r5
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	4a1d      	ldr	r2, [pc, #116]	; (8009774 <tcp_receive+0xa38>)
 80096fe:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009700:	4a1a      	ldr	r2, [pc, #104]	; (800976c <tcp_receive+0xa30>)
 8009702:	6812      	ldr	r2, [r2, #0]
 8009704:	4413      	add	r3, r2
 8009706:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009708:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800970a:	440a      	add	r2, r1
 800970c:	4293      	cmp	r3, r2
 800970e:	d02b      	beq.n	8009768 <tcp_receive+0xa2c>
 8009710:	4b19      	ldr	r3, [pc, #100]	; (8009778 <tcp_receive+0xa3c>)
 8009712:	f240 627b 	movw	r2, #1659	; 0x67b
 8009716:	4919      	ldr	r1, [pc, #100]	; (800977c <tcp_receive+0xa40>)
 8009718:	4819      	ldr	r0, [pc, #100]	; (8009780 <tcp_receive+0xa44>)
 800971a:	f002 ff36 	bl	800c58a <iprintf>
 800971e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009722:	682b      	ldr	r3, [r5, #0]
 8009724:	68df      	ldr	r7, [r3, #12]
 8009726:	89b8      	ldrh	r0, [r7, #12]
 8009728:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 800972c:	b2b6      	uxth	r6, r6
 800972e:	f7fb fe21 	bl	8005374 <lwip_htons>
 8009732:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009736:	f7fb fe1d 	bl	8005374 <lwip_htons>
 800973a:	4330      	orrs	r0, r6
 800973c:	81b8      	strh	r0, [r7, #12]
 800973e:	e7c3      	b.n	80096c8 <tcp_receive+0x98c>
                    tcplen = TCP_TCPLEN(next->next);
 8009740:	2300      	movs	r3, #0
 8009742:	e7d9      	b.n	80096f8 <tcp_receive+0x9bc>
 8009744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009748:	4b08      	ldr	r3, [pc, #32]	; (800976c <tcp_receive+0xa30>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800974e:	1a99      	subs	r1, r3, r2
 8009750:	2900      	cmp	r1, #0
 8009752:	db05      	blt.n	8009760 <tcp_receive+0xa24>
 8009754:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009756:	440a      	add	r2, r1
 8009758:	1a9b      	subs	r3, r3, r2
 800975a:	3301      	adds	r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	dd03      	ble.n	8009768 <tcp_receive+0xa2c>
      tcp_ack_now(pcb);
 8009760:	7ea3      	ldrb	r3, [r4, #26]
 8009762:	f043 0302 	orr.w	r3, r3, #2
 8009766:	76a3      	strb	r3, [r4, #26]
 8009768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976c:	20003ef0 	.word	0x20003ef0
 8009770:	20003ed4 	.word	0x20003ed4
 8009774:	20003f06 	.word	0x20003f06
 8009778:	0800e11c 	.word	0x0800e11c
 800977c:	0800e1f8 	.word	0x0800e1f8
 8009780:	0800c8d0 	.word	0x0800c8d0

08009784 <tcp_process>:
{
 8009784:	b570      	push	{r4, r5, r6, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 800978a:	4ba3      	ldr	r3, [pc, #652]	; (8009a18 <tcp_process+0x294>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	f013 0f04 	tst.w	r3, #4
 8009792:	d03d      	beq.n	8009810 <tcp_process+0x8c>
    if (pcb->state == SYN_SENT) {
 8009794:	7d01      	ldrb	r1, [r0, #20]
 8009796:	2902      	cmp	r1, #2
 8009798:	d012      	beq.n	80097c0 <tcp_process+0x3c>
      if (seqno == pcb->rcv_nxt) {
 800979a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800979c:	4b9f      	ldr	r3, [pc, #636]	; (8009a1c <tcp_process+0x298>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d01c      	beq.n	80097de <tcp_process+0x5a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80097a4:	1a98      	subs	r0, r3, r2
 80097a6:	2800      	cmp	r0, #0
 80097a8:	db1b      	blt.n	80097e2 <tcp_process+0x5e>
 80097aa:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80097ac:	4402      	add	r2, r0
 80097ae:	1a9b      	subs	r3, r3, r2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dd0c      	ble.n	80097ce <tcp_process+0x4a>
  u8_t acceptable = 0;
 80097b4:	2300      	movs	r3, #0
    if (acceptable) {
 80097b6:	b9b3      	cbnz	r3, 80097e6 <tcp_process+0x62>
      return ERR_OK;
 80097b8:	2500      	movs	r5, #0
}
 80097ba:	4628      	mov	r0, r5
 80097bc:	b002      	add	sp, #8
 80097be:	bd70      	pop	{r4, r5, r6, pc}
      if (ackno == pcb->snd_nxt) {
 80097c0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80097c2:	4b97      	ldr	r3, [pc, #604]	; (8009a20 <tcp_process+0x29c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d007      	beq.n	80097da <tcp_process+0x56>
  u8_t acceptable = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	e7f3      	b.n	80097b6 <tcp_process+0x32>
        tcp_ack_now(pcb);
 80097ce:	7ea3      	ldrb	r3, [r4, #26]
 80097d0:	f043 0302 	orr.w	r3, r3, #2
 80097d4:	76a3      	strb	r3, [r4, #26]
  u8_t acceptable = 0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e7ed      	b.n	80097b6 <tcp_process+0x32>
        acceptable = 1;
 80097da:	2301      	movs	r3, #1
 80097dc:	e7eb      	b.n	80097b6 <tcp_process+0x32>
        acceptable = 1;
 80097de:	2301      	movs	r3, #1
 80097e0:	e7e9      	b.n	80097b6 <tcp_process+0x32>
  u8_t acceptable = 0;
 80097e2:	2300      	movs	r3, #0
 80097e4:	e7e7      	b.n	80097b6 <tcp_process+0x32>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80097e6:	b159      	cbz	r1, 8009800 <tcp_process+0x7c>
      recv_flags |= TF_RESET;
 80097e8:	4a8e      	ldr	r2, [pc, #568]	; (8009a24 <tcp_process+0x2a0>)
 80097ea:	7813      	ldrb	r3, [r2, #0]
 80097ec:	f043 0308 	orr.w	r3, r3, #8
 80097f0:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80097f2:	7ea3      	ldrb	r3, [r4, #26]
 80097f4:	f023 0301 	bic.w	r3, r3, #1
 80097f8:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 80097fa:	f06f 050d 	mvn.w	r5, #13
 80097fe:	e7dc      	b.n	80097ba <tcp_process+0x36>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009800:	4b89      	ldr	r3, [pc, #548]	; (8009a28 <tcp_process+0x2a4>)
 8009802:	f240 22e7 	movw	r2, #743	; 0x2e7
 8009806:	4989      	ldr	r1, [pc, #548]	; (8009a2c <tcp_process+0x2a8>)
 8009808:	4889      	ldr	r0, [pc, #548]	; (8009a30 <tcp_process+0x2ac>)
 800980a:	f002 febe 	bl	800c58a <iprintf>
 800980e:	e7eb      	b.n	80097e8 <tcp_process+0x64>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009810:	f013 0f02 	tst.w	r3, #2
 8009814:	d00a      	beq.n	800982c <tcp_process+0xa8>
 8009816:	7d03      	ldrb	r3, [r0, #20]
 8009818:	3b02      	subs	r3, #2
 800981a:	b2db      	uxtb	r3, r3
 800981c:	2b01      	cmp	r3, #1
 800981e:	d905      	bls.n	800982c <tcp_process+0xa8>
    tcp_ack_now(pcb);
 8009820:	7e83      	ldrb	r3, [r0, #26]
 8009822:	f043 0302 	orr.w	r3, r3, #2
 8009826:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 8009828:	2500      	movs	r5, #0
 800982a:	e7c6      	b.n	80097ba <tcp_process+0x36>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800982c:	7ea3      	ldrb	r3, [r4, #26]
 800982e:	f013 0f10 	tst.w	r3, #16
 8009832:	d102      	bne.n	800983a <tcp_process+0xb6>
    pcb->tmr = tcp_ticks;
 8009834:	4b7f      	ldr	r3, [pc, #508]	; (8009a34 <tcp_process+0x2b0>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8009840:	4620      	mov	r0, r4
 8009842:	f7ff f8ff 	bl	8008a44 <tcp_parseopt>
  switch (pcb->state) {
 8009846:	7d23      	ldrb	r3, [r4, #20]
 8009848:	3b02      	subs	r3, #2
 800984a:	2b07      	cmp	r3, #7
 800984c:	f200 8219 	bhi.w	8009c82 <tcp_process+0x4fe>
 8009850:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009854:	009b0008 	.word	0x009b0008
 8009858:	01460135 	.word	0x01460135
 800985c:	0135019c 	.word	0x0135019c
 8009860:	01fd01ca 	.word	0x01fd01ca
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009864:	4b6c      	ldr	r3, [pc, #432]	; (8009a18 <tcp_process+0x294>)
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	f003 0212 	and.w	r2, r3, #18
 800986c:	2a12      	cmp	r2, #18
 800986e:	d004      	beq.n	800987a <tcp_process+0xf6>
    else if (flags & TCP_ACK) {
 8009870:	f013 0f10 	tst.w	r3, #16
 8009874:	d16b      	bne.n	800994e <tcp_process+0x1ca>
  return ERR_OK;
 8009876:	2500      	movs	r5, #0
 8009878:	e79f      	b.n	80097ba <tcp_process+0x36>
        && (ackno == pcb->lastack + 1)) {
 800987a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800987c:	3201      	adds	r2, #1
 800987e:	4968      	ldr	r1, [pc, #416]	; (8009a20 <tcp_process+0x29c>)
 8009880:	6809      	ldr	r1, [r1, #0]
 8009882:	428a      	cmp	r2, r1
 8009884:	d1f4      	bne.n	8009870 <tcp_process+0xec>
      pcb->rcv_nxt = seqno + 1;
 8009886:	4b65      	ldr	r3, [pc, #404]	; (8009a1c <tcp_process+0x298>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	1c5a      	adds	r2, r3, #1
 800988c:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800988e:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 8009890:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8009892:	4a69      	ldr	r2, [pc, #420]	; (8009a38 <tcp_process+0x2b4>)
 8009894:	6812      	ldr	r2, [r2, #0]
 8009896:	89d2      	ldrh	r2, [r2, #14]
 8009898:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800989c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80098a0:	3b01      	subs	r3, #1
 80098a2:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80098a4:	2304      	movs	r3, #4
 80098a6:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80098a8:	18e1      	adds	r1, r4, r3
 80098aa:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80098ac:	f7ff f868 	bl	8008980 <tcp_eff_send_mss_impl>
 80098b0:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80098b2:	0043      	lsls	r3, r0, #1
 80098b4:	f241 121c 	movw	r2, #4380	; 0x111c
 80098b8:	4293      	cmp	r3, r2
 80098ba:	bf38      	it	cc
 80098bc:	4613      	movcc	r3, r2
 80098be:	0080      	lsls	r0, r0, #2
 80098c0:	4283      	cmp	r3, r0
 80098c2:	bf28      	it	cs
 80098c4:	4603      	movcs	r3, r0
 80098c6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80098ca:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80098ce:	b31b      	cbz	r3, 8009918 <tcp_process+0x194>
      --pcb->snd_queuelen;
 80098d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80098d4:	3b01      	subs	r3, #1
 80098d6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 80098da:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 80098dc:	b325      	cbz	r5, 8009928 <tcp_process+0x1a4>
        pcb->unacked = rseg->next;
 80098de:	682b      	ldr	r3, [r5, #0]
 80098e0:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 80098e2:	4628      	mov	r0, r5
 80098e4:	f7fe fa46 	bl	8007d74 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 80098e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80098ea:	b353      	cbz	r3, 8009942 <tcp_process+0x1be>
        pcb->rtime = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 80098f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80098f4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80098f8:	b33b      	cbz	r3, 800994a <tcp_process+0x1c6>
 80098fa:	2200      	movs	r2, #0
 80098fc:	4621      	mov	r1, r4
 80098fe:	6920      	ldr	r0, [r4, #16]
 8009900:	4798      	blx	r3
 8009902:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 8009904:	f115 0f0d 	cmn.w	r5, #13
 8009908:	f43f af57 	beq.w	80097ba <tcp_process+0x36>
      tcp_ack_now(pcb);
 800990c:	7ea3      	ldrb	r3, [r4, #26]
 800990e:	f043 0302 	orr.w	r3, r3, #2
 8009912:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 8009914:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 8009916:	e750      	b.n	80097ba <tcp_process+0x36>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009918:	4b43      	ldr	r3, [pc, #268]	; (8009a28 <tcp_process+0x2a4>)
 800991a:	f240 321a 	movw	r2, #794	; 0x31a
 800991e:	4947      	ldr	r1, [pc, #284]	; (8009a3c <tcp_process+0x2b8>)
 8009920:	4843      	ldr	r0, [pc, #268]	; (8009a30 <tcp_process+0x2ac>)
 8009922:	f002 fe32 	bl	800c58a <iprintf>
 8009926:	e7d3      	b.n	80098d0 <tcp_process+0x14c>
        rseg = pcb->unsent;
 8009928:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800992a:	b115      	cbz	r5, 8009932 <tcp_process+0x1ae>
        pcb->unsent = rseg->next;
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	66a3      	str	r3, [r4, #104]	; 0x68
 8009930:	e7d7      	b.n	80098e2 <tcp_process+0x15e>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8009932:	4b3d      	ldr	r3, [pc, #244]	; (8009a28 <tcp_process+0x2a4>)
 8009934:	f240 3222 	movw	r2, #802	; 0x322
 8009938:	4941      	ldr	r1, [pc, #260]	; (8009a40 <tcp_process+0x2bc>)
 800993a:	483d      	ldr	r0, [pc, #244]	; (8009a30 <tcp_process+0x2ac>)
 800993c:	f002 fe25 	bl	800c58a <iprintf>
 8009940:	e7f4      	b.n	800992c <tcp_process+0x1a8>
        pcb->rtime = -1;
 8009942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009946:	8623      	strh	r3, [r4, #48]	; 0x30
 8009948:	e7d4      	b.n	80098f4 <tcp_process+0x170>
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800994a:	2500      	movs	r5, #0
 800994c:	e7da      	b.n	8009904 <tcp_process+0x180>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800994e:	4b3a      	ldr	r3, [pc, #232]	; (8009a38 <tcp_process+0x2b4>)
 8009950:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009952:	4a3c      	ldr	r2, [pc, #240]	; (8009a44 <tcp_process+0x2c0>)
 8009954:	493c      	ldr	r1, [pc, #240]	; (8009a48 <tcp_process+0x2c4>)
 8009956:	880d      	ldrh	r5, [r1, #0]
 8009958:	4930      	ldr	r1, [pc, #192]	; (8009a1c <tcp_process+0x298>)
 800995a:	6809      	ldr	r1, [r1, #0]
 800995c:	4830      	ldr	r0, [pc, #192]	; (8009a20 <tcp_process+0x29c>)
 800995e:	6800      	ldr	r0, [r0, #0]
 8009960:	881e      	ldrh	r6, [r3, #0]
 8009962:	9601      	str	r6, [sp, #4]
 8009964:	885b      	ldrh	r3, [r3, #2]
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	4613      	mov	r3, r2
 800996a:	3204      	adds	r2, #4
 800996c:	4429      	add	r1, r5
 800996e:	f001 faeb 	bl	800af48 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009972:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009976:	2b05      	cmp	r3, #5
 8009978:	d901      	bls.n	800997e <tcp_process+0x1fa>
  return ERR_OK;
 800997a:	2500      	movs	r5, #0
 800997c:	e71d      	b.n	80097ba <tcp_process+0x36>
        pcb->rtime = 0;
 800997e:	2500      	movs	r5, #0
 8009980:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8009982:	4620      	mov	r0, r4
 8009984:	f001 fb34 	bl	800aff0 <tcp_rexmit_rto>
 8009988:	e717      	b.n	80097ba <tcp_process+0x36>
    if (flags & TCP_ACK) {
 800998a:	4b23      	ldr	r3, [pc, #140]	; (8009a18 <tcp_process+0x294>)
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	f013 0f10 	tst.w	r3, #16
 8009992:	f000 8083 	beq.w	8009a9c <tcp_process+0x318>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009996:	4b22      	ldr	r3, [pc, #136]	; (8009a20 <tcp_process+0x29c>)
 8009998:	6818      	ldr	r0, [r3, #0]
 800999a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800999c:	1ac3      	subs	r3, r0, r3
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d403      	bmi.n	80099aa <tcp_process+0x226>
 80099a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80099a4:	1ac3      	subs	r3, r0, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	dd11      	ble.n	80099ce <tcp_process+0x24a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099aa:	4b23      	ldr	r3, [pc, #140]	; (8009a38 <tcp_process+0x2b4>)
 80099ac:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80099ae:	4a25      	ldr	r2, [pc, #148]	; (8009a44 <tcp_process+0x2c0>)
 80099b0:	4925      	ldr	r1, [pc, #148]	; (8009a48 <tcp_process+0x2c4>)
 80099b2:	880c      	ldrh	r4, [r1, #0]
 80099b4:	4919      	ldr	r1, [pc, #100]	; (8009a1c <tcp_process+0x298>)
 80099b6:	6809      	ldr	r1, [r1, #0]
 80099b8:	881d      	ldrh	r5, [r3, #0]
 80099ba:	9501      	str	r5, [sp, #4]
 80099bc:	885b      	ldrh	r3, [r3, #2]
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	4613      	mov	r3, r2
 80099c2:	3204      	adds	r2, #4
 80099c4:	4421      	add	r1, r4
 80099c6:	f001 fabf 	bl	800af48 <tcp_rst>
  return ERR_OK;
 80099ca:	2500      	movs	r5, #0
 80099cc:	e6f5      	b.n	80097ba <tcp_process+0x36>
        pcb->state = ESTABLISHED;
 80099ce:	2304      	movs	r3, #4
 80099d0:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80099d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80099d4:	b10b      	cbz	r3, 80099da <tcp_process+0x256>
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	b19b      	cbz	r3, 8009a02 <tcp_process+0x27e>
        if (pcb->listener == NULL) {
 80099da:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80099dc:	b1cb      	cbz	r3, 8009a12 <tcp_process+0x28e>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	b3b3      	cbz	r3, 8009a50 <tcp_process+0x2cc>
 80099e2:	2200      	movs	r2, #0
 80099e4:	4621      	mov	r1, r4
 80099e6:	6920      	ldr	r0, [r4, #16]
 80099e8:	4798      	blx	r3
 80099ea:	4605      	mov	r5, r0
        if (err != ERR_OK) {
 80099ec:	b39d      	cbz	r5, 8009a56 <tcp_process+0x2d2>
          if (err != ERR_ABRT) {
 80099ee:	f115 0f0d 	cmn.w	r5, #13
 80099f2:	f43f aee2 	beq.w	80097ba <tcp_process+0x36>
            tcp_abort(pcb);
 80099f6:	4620      	mov	r0, r4
 80099f8:	f7fe fec8 	bl	800878c <tcp_abort>
          return ERR_ABRT;
 80099fc:	f06f 050c 	mvn.w	r5, #12
 8009a00:	e6db      	b.n	80097ba <tcp_process+0x36>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009a02:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <tcp_process+0x2a4>)
 8009a04:	f240 3251 	movw	r2, #849	; 0x351
 8009a08:	4910      	ldr	r1, [pc, #64]	; (8009a4c <tcp_process+0x2c8>)
 8009a0a:	4809      	ldr	r0, [pc, #36]	; (8009a30 <tcp_process+0x2ac>)
 8009a0c:	f002 fdbd 	bl	800c58a <iprintf>
 8009a10:	e7e3      	b.n	80099da <tcp_process+0x256>
          err = ERR_VAL;
 8009a12:	f06f 0505 	mvn.w	r5, #5
 8009a16:	e7e9      	b.n	80099ec <tcp_process+0x268>
 8009a18:	20003ed0 	.word	0x20003ed0
 8009a1c:	20003ef0 	.word	0x20003ef0
 8009a20:	20003ecc 	.word	0x20003ecc
 8009a24:	20003eec 	.word	0x20003eec
 8009a28:	0800e11c 	.word	0x0800e11c
 8009a2c:	0800e0b0 	.word	0x0800e0b0
 8009a30:	0800c8d0 	.word	0x0800c8d0
 8009a34:	20007238 	.word	0x20007238
 8009a38:	20003ef8 	.word	0x20003ef8
 8009a3c:	0800e0d0 	.word	0x0800e0d0
 8009a40:	0800e0e8 	.word	0x0800e0e8
 8009a44:	20003f74 	.word	0x20003f74
 8009a48:	20003f06 	.word	0x20003f06
 8009a4c:	0800e0fc 	.word	0x0800e0fc
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009a50:	f06f 050f 	mvn.w	r5, #15
 8009a54:	e7ca      	b.n	80099ec <tcp_process+0x268>
        tcp_receive(pcb);
 8009a56:	4620      	mov	r0, r4
 8009a58:	f7ff f970 	bl	8008d3c <tcp_receive>
        if (recv_acked != 0) {
 8009a5c:	4b8f      	ldr	r3, [pc, #572]	; (8009c9c <tcp_process+0x518>)
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	b113      	cbz	r3, 8009a68 <tcp_process+0x2e4>
          recv_acked--;
 8009a62:	3b01      	subs	r3, #1
 8009a64:	4a8d      	ldr	r2, [pc, #564]	; (8009c9c <tcp_process+0x518>)
 8009a66:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009a68:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8009a6a:	0053      	lsls	r3, r2, #1
 8009a6c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009a70:	428b      	cmp	r3, r1
 8009a72:	bf38      	it	cc
 8009a74:	460b      	movcc	r3, r1
 8009a76:	0092      	lsls	r2, r2, #2
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	bf28      	it	cs
 8009a7c:	4613      	movcs	r3, r2
 8009a7e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 8009a82:	4b87      	ldr	r3, [pc, #540]	; (8009ca0 <tcp_process+0x51c>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	f013 0f20 	tst.w	r3, #32
 8009a8a:	f43f ae96 	beq.w	80097ba <tcp_process+0x36>
          tcp_ack_now(pcb);
 8009a8e:	7ea3      	ldrb	r3, [r4, #26]
 8009a90:	f043 0302 	orr.w	r3, r3, #2
 8009a94:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 8009a96:	2307      	movs	r3, #7
 8009a98:	7523      	strb	r3, [r4, #20]
 8009a9a:	e68e      	b.n	80097ba <tcp_process+0x36>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009a9c:	f013 0f02 	tst.w	r3, #2
 8009aa0:	f000 80f1 	beq.w	8009c86 <tcp_process+0x502>
 8009aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	4a7e      	ldr	r2, [pc, #504]	; (8009ca4 <tcp_process+0x520>)
 8009aaa:	6812      	ldr	r2, [r2, #0]
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d001      	beq.n	8009ab4 <tcp_process+0x330>
  return ERR_OK;
 8009ab0:	2500      	movs	r5, #0
 8009ab2:	e682      	b.n	80097ba <tcp_process+0x36>
      tcp_rexmit(pcb);
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f001 fab6 	bl	800b026 <tcp_rexmit>
  return ERR_OK;
 8009aba:	2500      	movs	r5, #0
 8009abc:	e67d      	b.n	80097ba <tcp_process+0x36>
    tcp_receive(pcb);
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f7ff f93c 	bl	8008d3c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009ac4:	4b76      	ldr	r3, [pc, #472]	; (8009ca0 <tcp_process+0x51c>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	f013 0f20 	tst.w	r3, #32
 8009acc:	f000 80dd 	beq.w	8009c8a <tcp_process+0x506>
      tcp_ack_now(pcb);
 8009ad0:	7ea3      	ldrb	r3, [r4, #26]
 8009ad2:	f043 0302 	orr.w	r3, r3, #2
 8009ad6:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8009ad8:	2307      	movs	r3, #7
 8009ada:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8009adc:	2500      	movs	r5, #0
 8009ade:	e66c      	b.n	80097ba <tcp_process+0x36>
    tcp_receive(pcb);
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f7ff f92b 	bl	8008d3c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009ae6:	4b6e      	ldr	r3, [pc, #440]	; (8009ca0 <tcp_process+0x51c>)
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	f013 0f20 	tst.w	r3, #32
 8009aee:	d038      	beq.n	8009b62 <tcp_process+0x3de>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009af0:	4b6d      	ldr	r3, [pc, #436]	; (8009ca8 <tcp_process+0x524>)
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	f013 0f10 	tst.w	r3, #16
 8009af8:	d004      	beq.n	8009b04 <tcp_process+0x380>
 8009afa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009afc:	4b6b      	ldr	r3, [pc, #428]	; (8009cac <tcp_process+0x528>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d007      	beq.n	8009b14 <tcp_process+0x390>
        tcp_ack_now(pcb);
 8009b04:	7ea3      	ldrb	r3, [r4, #26]
 8009b06:	f043 0302 	orr.w	r3, r3, #2
 8009b0a:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8009b0c:	2308      	movs	r3, #8
 8009b0e:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8009b10:	2500      	movs	r5, #0
 8009b12:	e652      	b.n	80097ba <tcp_process+0x36>
          pcb->unsent == NULL) {
 8009b14:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1f4      	bne.n	8009b04 <tcp_process+0x380>
        tcp_ack_now(pcb);
 8009b1a:	7ea3      	ldrb	r3, [r4, #26]
 8009b1c:	f043 0302 	orr.w	r3, r3, #2
 8009b20:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8009b22:	4620      	mov	r0, r4
 8009b24:	f7fe f9c2 	bl	8007eac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009b28:	4b61      	ldr	r3, [pc, #388]	; (8009cb0 <tcp_process+0x52c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	429c      	cmp	r4, r3
 8009b2e:	d005      	beq.n	8009b3c <tcp_process+0x3b8>
 8009b30:	b153      	cbz	r3, 8009b48 <tcp_process+0x3c4>
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	4294      	cmp	r4, r2
 8009b36:	d005      	beq.n	8009b44 <tcp_process+0x3c0>
 8009b38:	4613      	mov	r3, r2
 8009b3a:	e7f9      	b.n	8009b30 <tcp_process+0x3ac>
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	4b5c      	ldr	r3, [pc, #368]	; (8009cb0 <tcp_process+0x52c>)
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	e001      	b.n	8009b48 <tcp_process+0x3c4>
 8009b44:	68e2      	ldr	r2, [r4, #12]
 8009b46:	60da      	str	r2, [r3, #12]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	4b5a      	ldr	r3, [pc, #360]	; (8009cb4 <tcp_process+0x530>)
 8009b4c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009b4e:	230a      	movs	r3, #10
 8009b50:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009b52:	4b59      	ldr	r3, [pc, #356]	; (8009cb8 <tcp_process+0x534>)
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	60e2      	str	r2, [r4, #12]
 8009b58:	601c      	str	r4, [r3, #0]
 8009b5a:	f001 fc01 	bl	800b360 <tcp_timer_needed>
  return ERR_OK;
 8009b5e:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009b60:	e62b      	b.n	80097ba <tcp_process+0x36>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b62:	4b51      	ldr	r3, [pc, #324]	; (8009ca8 <tcp_process+0x524>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	f013 0f10 	tst.w	r3, #16
 8009b6a:	f000 8090 	beq.w	8009c8e <tcp_process+0x50a>
 8009b6e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009b70:	4b4e      	ldr	r3, [pc, #312]	; (8009cac <tcp_process+0x528>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d001      	beq.n	8009b7c <tcp_process+0x3f8>
  return ERR_OK;
 8009b78:	2500      	movs	r5, #0
 8009b7a:	e61e      	b.n	80097ba <tcp_process+0x36>
               pcb->unsent == NULL) {
 8009b7c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b7e:	b10b      	cbz	r3, 8009b84 <tcp_process+0x400>
  return ERR_OK;
 8009b80:	2500      	movs	r5, #0
 8009b82:	e61a      	b.n	80097ba <tcp_process+0x36>
      pcb->state = FIN_WAIT_2;
 8009b84:	2306      	movs	r3, #6
 8009b86:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8009b88:	2500      	movs	r5, #0
 8009b8a:	e616      	b.n	80097ba <tcp_process+0x36>
    tcp_receive(pcb);
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f7ff f8d5 	bl	8008d3c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009b92:	4b43      	ldr	r3, [pc, #268]	; (8009ca0 <tcp_process+0x51c>)
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	f013 0f20 	tst.w	r3, #32
 8009b9a:	d101      	bne.n	8009ba0 <tcp_process+0x41c>
  return ERR_OK;
 8009b9c:	2500      	movs	r5, #0
 8009b9e:	e60c      	b.n	80097ba <tcp_process+0x36>
      tcp_ack_now(pcb);
 8009ba0:	7ea3      	ldrb	r3, [r4, #26]
 8009ba2:	f043 0302 	orr.w	r3, r3, #2
 8009ba6:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f7fe f97f 	bl	8007eac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009bae:	4b40      	ldr	r3, [pc, #256]	; (8009cb0 <tcp_process+0x52c>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	429c      	cmp	r4, r3
 8009bb4:	d005      	beq.n	8009bc2 <tcp_process+0x43e>
 8009bb6:	b153      	cbz	r3, 8009bce <tcp_process+0x44a>
 8009bb8:	68da      	ldr	r2, [r3, #12]
 8009bba:	4294      	cmp	r4, r2
 8009bbc:	d005      	beq.n	8009bca <tcp_process+0x446>
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	e7f9      	b.n	8009bb6 <tcp_process+0x432>
 8009bc2:	68da      	ldr	r2, [r3, #12]
 8009bc4:	4b3a      	ldr	r3, [pc, #232]	; (8009cb0 <tcp_process+0x52c>)
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	e001      	b.n	8009bce <tcp_process+0x44a>
 8009bca:	68e2      	ldr	r2, [r4, #12]
 8009bcc:	60da      	str	r2, [r3, #12]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4b38      	ldr	r3, [pc, #224]	; (8009cb4 <tcp_process+0x530>)
 8009bd2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8009bd4:	230a      	movs	r3, #10
 8009bd6:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009bd8:	4b37      	ldr	r3, [pc, #220]	; (8009cb8 <tcp_process+0x534>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	60e2      	str	r2, [r4, #12]
 8009bde:	601c      	str	r4, [r3, #0]
 8009be0:	f001 fbbe 	bl	800b360 <tcp_timer_needed>
  return ERR_OK;
 8009be4:	2500      	movs	r5, #0
 8009be6:	e5e8      	b.n	80097ba <tcp_process+0x36>
    tcp_receive(pcb);
 8009be8:	4620      	mov	r0, r4
 8009bea:	f7ff f8a7 	bl	8008d3c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009bee:	4b2e      	ldr	r3, [pc, #184]	; (8009ca8 <tcp_process+0x524>)
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	f013 0f10 	tst.w	r3, #16
 8009bf6:	d04c      	beq.n	8009c92 <tcp_process+0x50e>
 8009bf8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009bfa:	4b2c      	ldr	r3, [pc, #176]	; (8009cac <tcp_process+0x528>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d001      	beq.n	8009c06 <tcp_process+0x482>
  return ERR_OK;
 8009c02:	2500      	movs	r5, #0
 8009c04:	e5d9      	b.n	80097ba <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009c06:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009c08:	b10b      	cbz	r3, 8009c0e <tcp_process+0x48a>
  return ERR_OK;
 8009c0a:	2500      	movs	r5, #0
 8009c0c:	e5d5      	b.n	80097ba <tcp_process+0x36>
      tcp_pcb_purge(pcb);
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f7fe f94c 	bl	8007eac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009c14:	4b26      	ldr	r3, [pc, #152]	; (8009cb0 <tcp_process+0x52c>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	d005      	beq.n	8009c28 <tcp_process+0x4a4>
 8009c1c:	b153      	cbz	r3, 8009c34 <tcp_process+0x4b0>
 8009c1e:	68da      	ldr	r2, [r3, #12]
 8009c20:	4294      	cmp	r4, r2
 8009c22:	d005      	beq.n	8009c30 <tcp_process+0x4ac>
 8009c24:	4613      	mov	r3, r2
 8009c26:	e7f9      	b.n	8009c1c <tcp_process+0x498>
 8009c28:	68da      	ldr	r2, [r3, #12]
 8009c2a:	4b21      	ldr	r3, [pc, #132]	; (8009cb0 <tcp_process+0x52c>)
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	e001      	b.n	8009c34 <tcp_process+0x4b0>
 8009c30:	68e2      	ldr	r2, [r4, #12]
 8009c32:	60da      	str	r2, [r3, #12]
 8009c34:	2201      	movs	r2, #1
 8009c36:	4b1f      	ldr	r3, [pc, #124]	; (8009cb4 <tcp_process+0x530>)
 8009c38:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8009c3a:	230a      	movs	r3, #10
 8009c3c:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009c3e:	4b1e      	ldr	r3, [pc, #120]	; (8009cb8 <tcp_process+0x534>)
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	60e2      	str	r2, [r4, #12]
 8009c44:	601c      	str	r4, [r3, #0]
 8009c46:	f001 fb8b 	bl	800b360 <tcp_timer_needed>
  return ERR_OK;
 8009c4a:	2500      	movs	r5, #0
 8009c4c:	e5b5      	b.n	80097ba <tcp_process+0x36>
    tcp_receive(pcb);
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f7ff f874 	bl	8008d3c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009c54:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <tcp_process+0x524>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	f013 0f10 	tst.w	r3, #16
 8009c5c:	d01b      	beq.n	8009c96 <tcp_process+0x512>
 8009c5e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009c60:	4b12      	ldr	r3, [pc, #72]	; (8009cac <tcp_process+0x528>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d001      	beq.n	8009c6c <tcp_process+0x4e8>
  return ERR_OK;
 8009c68:	2500      	movs	r5, #0
 8009c6a:	e5a6      	b.n	80097ba <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009c6c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009c6e:	b10b      	cbz	r3, 8009c74 <tcp_process+0x4f0>
  return ERR_OK;
 8009c70:	2500      	movs	r5, #0
 8009c72:	e5a2      	b.n	80097ba <tcp_process+0x36>
      recv_flags |= TF_CLOSED;
 8009c74:	4a0a      	ldr	r2, [pc, #40]	; (8009ca0 <tcp_process+0x51c>)
 8009c76:	7813      	ldrb	r3, [r2, #0]
 8009c78:	f043 0310 	orr.w	r3, r3, #16
 8009c7c:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 8009c7e:	2500      	movs	r5, #0
 8009c80:	e59b      	b.n	80097ba <tcp_process+0x36>
 8009c82:	2500      	movs	r5, #0
 8009c84:	e599      	b.n	80097ba <tcp_process+0x36>
 8009c86:	2500      	movs	r5, #0
 8009c88:	e597      	b.n	80097ba <tcp_process+0x36>
 8009c8a:	2500      	movs	r5, #0
 8009c8c:	e595      	b.n	80097ba <tcp_process+0x36>
 8009c8e:	2500      	movs	r5, #0
 8009c90:	e593      	b.n	80097ba <tcp_process+0x36>
 8009c92:	2500      	movs	r5, #0
 8009c94:	e591      	b.n	80097ba <tcp_process+0x36>
 8009c96:	2500      	movs	r5, #0
 8009c98:	e58f      	b.n	80097ba <tcp_process+0x36>
 8009c9a:	bf00      	nop
 8009c9c:	20003ee4 	.word	0x20003ee4
 8009ca0:	20003eec 	.word	0x20003eec
 8009ca4:	20003ef0 	.word	0x20003ef0
 8009ca8:	20003ed0 	.word	0x20003ed0
 8009cac:	20003ecc 	.word	0x20003ecc
 8009cb0:	20007234 	.word	0x20007234
 8009cb4:	20007230 	.word	0x20007230
 8009cb8:	20007244 	.word	0x20007244

08009cbc <tcp_input>:
{
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	4604      	mov	r4, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 8009cc2:	6842      	ldr	r2, [r0, #4]
 8009cc4:	4b9f      	ldr	r3, [pc, #636]	; (8009f44 <tcp_input+0x288>)
 8009cc6:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 8009cc8:	8943      	ldrh	r3, [r0, #10]
 8009cca:	2b13      	cmp	r3, #19
 8009ccc:	d93e      	bls.n	8009d4c <tcp_input+0x90>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009cce:	4b9e      	ldr	r3, [pc, #632]	; (8009f48 <tcp_input+0x28c>)
 8009cd0:	6819      	ldr	r1, [r3, #0]
 8009cd2:	6958      	ldr	r0, [r3, #20]
 8009cd4:	f7fc fab3 	bl	800623e <ip4_addr_isbroadcast_u32>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d137      	bne.n	8009d4c <tcp_input+0x90>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009cdc:	4b9a      	ldr	r3, [pc, #616]	; (8009f48 <tcp_input+0x28c>)
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009ce4:	2be0      	cmp	r3, #224	; 0xe0
 8009ce6:	d031      	beq.n	8009d4c <tcp_input+0x90>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8009ce8:	4b96      	ldr	r3, [pc, #600]	; (8009f44 <tcp_input+0x288>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	8998      	ldrh	r0, [r3, #12]
 8009cee:	f7fb fb41 	bl	8005374 <lwip_htons>
 8009cf2:	f3c0 310f 	ubfx	r1, r0, #12, #16
 8009cf6:	0089      	lsls	r1, r1, #2
 8009cf8:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009cfa:	2913      	cmp	r1, #19
 8009cfc:	d926      	bls.n	8009d4c <tcp_input+0x90>
 8009cfe:	b289      	uxth	r1, r1
 8009d00:	8923      	ldrh	r3, [r4, #8]
 8009d02:	4299      	cmp	r1, r3
 8009d04:	d822      	bhi.n	8009d4c <tcp_input+0x90>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8009d06:	f1a1 0314 	sub.w	r3, r1, #20
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	4a8f      	ldr	r2, [pc, #572]	; (8009f4c <tcp_input+0x290>)
 8009d0e:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
 8009d10:	2000      	movs	r0, #0
 8009d12:	4a8f      	ldr	r2, [pc, #572]	; (8009f50 <tcp_input+0x294>)
 8009d14:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 8009d16:	8962      	ldrh	r2, [r4, #10]
 8009d18:	4291      	cmp	r1, r2
 8009d1a:	d91c      	bls.n	8009d56 <tcp_input+0x9a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d051      	beq.n	8009dc6 <tcp_input+0x10a>
    pbuf_header(p, -TCP_HLEN);
 8009d22:	f06f 0113 	mvn.w	r1, #19
 8009d26:	4620      	mov	r0, r4
 8009d28:	f7fd fb36 	bl	8007398 <pbuf_header>
    tcphdr_opt1len = p->len;
 8009d2c:	8961      	ldrh	r1, [r4, #10]
 8009d2e:	4b89      	ldr	r3, [pc, #548]	; (8009f54 <tcp_input+0x298>)
 8009d30:	8019      	strh	r1, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8009d32:	4b86      	ldr	r3, [pc, #536]	; (8009f4c <tcp_input+0x290>)
 8009d34:	881d      	ldrh	r5, [r3, #0]
 8009d36:	1a6d      	subs	r5, r5, r1
 8009d38:	b2ad      	uxth	r5, r5
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8009d3a:	4249      	negs	r1, r1
 8009d3c:	b209      	sxth	r1, r1
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f7fd fb2a 	bl	8007398 <pbuf_header>
    if (opt2len > p->next->len) {
 8009d44:	6820      	ldr	r0, [r4, #0]
 8009d46:	8943      	ldrh	r3, [r0, #10]
 8009d48:	429d      	cmp	r5, r3
 8009d4a:	d943      	bls.n	8009dd4 <tcp_input+0x118>
  pbuf_free(p);
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f7fd fb2d 	bl	80073ac <pbuf_free>
}
 8009d52:	b002      	add	sp, #8
 8009d54:	bd70      	pop	{r4, r5, r6, pc}
    tcphdr_opt1len = tcphdr_optlen;
 8009d56:	4a7f      	ldr	r2, [pc, #508]	; (8009f54 <tcp_input+0x298>)
 8009d58:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8009d5a:	4249      	negs	r1, r1
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f7fd fb1b 	bl	8007398 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009d62:	4d78      	ldr	r5, [pc, #480]	; (8009f44 <tcp_input+0x288>)
 8009d64:	682e      	ldr	r6, [r5, #0]
 8009d66:	8830      	ldrh	r0, [r6, #0]
 8009d68:	f7fb fb04 	bl	8005374 <lwip_htons>
 8009d6c:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009d6e:	682e      	ldr	r6, [r5, #0]
 8009d70:	8870      	ldrh	r0, [r6, #2]
 8009d72:	f7fb faff 	bl	8005374 <lwip_htons>
 8009d76:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009d78:	682e      	ldr	r6, [r5, #0]
 8009d7a:	6870      	ldr	r0, [r6, #4]
 8009d7c:	f7fb fafd 	bl	800537a <lwip_htonl>
 8009d80:	6070      	str	r0, [r6, #4]
 8009d82:	4b75      	ldr	r3, [pc, #468]	; (8009f58 <tcp_input+0x29c>)
 8009d84:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009d86:	682e      	ldr	r6, [r5, #0]
 8009d88:	68b0      	ldr	r0, [r6, #8]
 8009d8a:	f7fb faf6 	bl	800537a <lwip_htonl>
 8009d8e:	60b0      	str	r0, [r6, #8]
 8009d90:	4b72      	ldr	r3, [pc, #456]	; (8009f5c <tcp_input+0x2a0>)
 8009d92:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009d94:	682e      	ldr	r6, [r5, #0]
 8009d96:	89f0      	ldrh	r0, [r6, #14]
 8009d98:	f7fb faec 	bl	8005374 <lwip_htons>
 8009d9c:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 8009d9e:	682b      	ldr	r3, [r5, #0]
 8009da0:	8998      	ldrh	r0, [r3, #12]
 8009da2:	f7fb fae7 	bl	8005374 <lwip_htons>
 8009da6:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 8009daa:	4a6d      	ldr	r2, [pc, #436]	; (8009f60 <tcp_input+0x2a4>)
 8009dac:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8009dae:	8922      	ldrh	r2, [r4, #8]
 8009db0:	f013 0303 	ands.w	r3, r3, #3
 8009db4:	bf18      	it	ne
 8009db6:	2301      	movne	r3, #1
 8009db8:	4413      	add	r3, r2
 8009dba:	4a6a      	ldr	r2, [pc, #424]	; (8009f64 <tcp_input+0x2a8>)
 8009dbc:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dbe:	4b6a      	ldr	r3, [pc, #424]	; (8009f68 <tcp_input+0x2ac>)
 8009dc0:	681d      	ldr	r5, [r3, #0]
  prev = NULL;
 8009dc2:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dc4:	e033      	b.n	8009e2e <tcp_input+0x172>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009dc6:	4b69      	ldr	r3, [pc, #420]	; (8009f6c <tcp_input+0x2b0>)
 8009dc8:	22b2      	movs	r2, #178	; 0xb2
 8009dca:	4969      	ldr	r1, [pc, #420]	; (8009f70 <tcp_input+0x2b4>)
 8009dcc:	4869      	ldr	r0, [pc, #420]	; (8009f74 <tcp_input+0x2b8>)
 8009dce:	f002 fbdc 	bl	800c58a <iprintf>
 8009dd2:	e7a6      	b.n	8009d22 <tcp_input+0x66>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8009dd4:	6842      	ldr	r2, [r0, #4]
 8009dd6:	4b5e      	ldr	r3, [pc, #376]	; (8009f50 <tcp_input+0x294>)
 8009dd8:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8009dda:	4269      	negs	r1, r5
 8009ddc:	b209      	sxth	r1, r1
 8009dde:	f7fd fadb 	bl	8007398 <pbuf_header>
    p->tot_len -= opt2len;
 8009de2:	8923      	ldrh	r3, [r4, #8]
 8009de4:	1b5d      	subs	r5, r3, r5
 8009de6:	8125      	strh	r5, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009de8:	8963      	ldrh	r3, [r4, #10]
 8009dea:	b95b      	cbnz	r3, 8009e04 <tcp_input+0x148>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009dec:	8922      	ldrh	r2, [r4, #8]
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	891b      	ldrh	r3, [r3, #8]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d0b5      	beq.n	8009d62 <tcp_input+0xa6>
 8009df6:	4b5d      	ldr	r3, [pc, #372]	; (8009f6c <tcp_input+0x2b0>)
 8009df8:	22d0      	movs	r2, #208	; 0xd0
 8009dfa:	495f      	ldr	r1, [pc, #380]	; (8009f78 <tcp_input+0x2bc>)
 8009dfc:	485d      	ldr	r0, [pc, #372]	; (8009f74 <tcp_input+0x2b8>)
 8009dfe:	f002 fbc4 	bl	800c58a <iprintf>
 8009e02:	e7ae      	b.n	8009d62 <tcp_input+0xa6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009e04:	4b59      	ldr	r3, [pc, #356]	; (8009f6c <tcp_input+0x2b0>)
 8009e06:	22cf      	movs	r2, #207	; 0xcf
 8009e08:	495c      	ldr	r1, [pc, #368]	; (8009f7c <tcp_input+0x2c0>)
 8009e0a:	485a      	ldr	r0, [pc, #360]	; (8009f74 <tcp_input+0x2b8>)
 8009e0c:	f002 fbbd 	bl	800c58a <iprintf>
 8009e10:	e7ec      	b.n	8009dec <tcp_input+0x130>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009e12:	7d2b      	ldrb	r3, [r5, #20]
 8009e14:	2b0a      	cmp	r3, #10
 8009e16:	d016      	beq.n	8009e46 <tcp_input+0x18a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009e18:	7d2b      	ldrb	r3, [r5, #20]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d01a      	beq.n	8009e54 <tcp_input+0x198>
    if (pcb->remote_port == tcphdr->src &&
 8009e1e:	8b29      	ldrh	r1, [r5, #24]
 8009e20:	4b48      	ldr	r3, [pc, #288]	; (8009f44 <tcp_input+0x288>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	881a      	ldrh	r2, [r3, #0]
 8009e26:	4291      	cmp	r1, r2
 8009e28:	d01b      	beq.n	8009e62 <tcp_input+0x1a6>
    prev = pcb;
 8009e2a:	462e      	mov	r6, r5
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e2c:	68ed      	ldr	r5, [r5, #12]
 8009e2e:	2d00      	cmp	r5, #0
 8009e30:	d032      	beq.n	8009e98 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009e32:	7d2b      	ldrb	r3, [r5, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1ec      	bne.n	8009e12 <tcp_input+0x156>
 8009e38:	4b4c      	ldr	r3, [pc, #304]	; (8009f6c <tcp_input+0x2b0>)
 8009e3a:	22e2      	movs	r2, #226	; 0xe2
 8009e3c:	4950      	ldr	r1, [pc, #320]	; (8009f80 <tcp_input+0x2c4>)
 8009e3e:	484d      	ldr	r0, [pc, #308]	; (8009f74 <tcp_input+0x2b8>)
 8009e40:	f002 fba3 	bl	800c58a <iprintf>
 8009e44:	e7e5      	b.n	8009e12 <tcp_input+0x156>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009e46:	4b49      	ldr	r3, [pc, #292]	; (8009f6c <tcp_input+0x2b0>)
 8009e48:	22e3      	movs	r2, #227	; 0xe3
 8009e4a:	494e      	ldr	r1, [pc, #312]	; (8009f84 <tcp_input+0x2c8>)
 8009e4c:	4849      	ldr	r0, [pc, #292]	; (8009f74 <tcp_input+0x2b8>)
 8009e4e:	f002 fb9c 	bl	800c58a <iprintf>
 8009e52:	e7e1      	b.n	8009e18 <tcp_input+0x15c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009e54:	4b45      	ldr	r3, [pc, #276]	; (8009f6c <tcp_input+0x2b0>)
 8009e56:	22e4      	movs	r2, #228	; 0xe4
 8009e58:	494b      	ldr	r1, [pc, #300]	; (8009f88 <tcp_input+0x2cc>)
 8009e5a:	4846      	ldr	r0, [pc, #280]	; (8009f74 <tcp_input+0x2b8>)
 8009e5c:	f002 fb95 	bl	800c58a <iprintf>
 8009e60:	e7dd      	b.n	8009e1e <tcp_input+0x162>
        pcb->local_port == tcphdr->dest &&
 8009e62:	8aea      	ldrh	r2, [r5, #22]
 8009e64:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d1df      	bne.n	8009e2a <tcp_input+0x16e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009e6a:	686a      	ldr	r2, [r5, #4]
 8009e6c:	4b36      	ldr	r3, [pc, #216]	; (8009f48 <tcp_input+0x28c>)
 8009e6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d1da      	bne.n	8009e2a <tcp_input+0x16e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009e74:	682a      	ldr	r2, [r5, #0]
 8009e76:	4b34      	ldr	r3, [pc, #208]	; (8009f48 <tcp_input+0x28c>)
 8009e78:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d1d5      	bne.n	8009e2a <tcp_input+0x16e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009e7e:	68eb      	ldr	r3, [r5, #12]
 8009e80:	429d      	cmp	r5, r3
 8009e82:	d04d      	beq.n	8009f20 <tcp_input+0x264>
      if (prev != NULL) {
 8009e84:	b12e      	cbz	r6, 8009e92 <tcp_input+0x1d6>
        prev->next = pcb->next;
 8009e86:	68eb      	ldr	r3, [r5, #12]
 8009e88:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 8009e8a:	4b37      	ldr	r3, [pc, #220]	; (8009f68 <tcp_input+0x2ac>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	60ea      	str	r2, [r5, #12]
        tcp_active_pcbs = pcb;
 8009e90:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009e92:	68eb      	ldr	r3, [r5, #12]
 8009e94:	429d      	cmp	r5, r3
 8009e96:	d04a      	beq.n	8009f2e <tcp_input+0x272>
  if (pcb == NULL) {
 8009e98:	2d00      	cmp	r5, #0
 8009e9a:	d04f      	beq.n	8009f3c <tcp_input+0x280>
  if (pcb != NULL) {
 8009e9c:	2d00      	cmp	r5, #0
 8009e9e:	f000 8168 	beq.w	800a172 <tcp_input+0x4b6>
    inseg.next = NULL;
 8009ea2:	4a3a      	ldr	r2, [pc, #232]	; (8009f8c <tcp_input+0x2d0>)
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 8009ea8:	8921      	ldrh	r1, [r4, #8]
 8009eaa:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 8009eac:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009eae:	4925      	ldr	r1, [pc, #148]	; (8009f44 <tcp_input+0x288>)
 8009eb0:	6809      	ldr	r1, [r1, #0]
 8009eb2:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 8009eb4:	4a36      	ldr	r2, [pc, #216]	; (8009f90 <tcp_input+0x2d4>)
 8009eb6:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 8009eb8:	4a36      	ldr	r2, [pc, #216]	; (8009f94 <tcp_input+0x2d8>)
 8009eba:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 8009ebc:	4a36      	ldr	r2, [pc, #216]	; (8009f98 <tcp_input+0x2dc>)
 8009ebe:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 8009ec0:	4b27      	ldr	r3, [pc, #156]	; (8009f60 <tcp_input+0x2a4>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	f013 0f08 	tst.w	r3, #8
 8009ec8:	d003      	beq.n	8009ed2 <tcp_input+0x216>
      p->flags |= PBUF_FLAG_PUSH;
 8009eca:	7b63      	ldrb	r3, [r4, #13]
 8009ecc:	f043 0301 	orr.w	r3, r3, #1
 8009ed0:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 8009ed2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 80b9 	beq.w	800a04c <tcp_input+0x390>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009eda:	4628      	mov	r0, r5
 8009edc:	f7fe fb24 	bl	8008528 <tcp_process_refused_data>
 8009ee0:	f110 0f0d 	cmn.w	r0, #13
 8009ee4:	d008      	beq.n	8009ef8 <tcp_input+0x23c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009ee6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 80af 	beq.w	800a04c <tcp_input+0x390>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009eee:	4b1d      	ldr	r3, [pc, #116]	; (8009f64 <tcp_input+0x2a8>)
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 80aa 	beq.w	800a04c <tcp_input+0x390>
        if (pcb->rcv_ann_wnd == 0) {
 8009ef8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 80a2 	beq.w	800a044 <tcp_input+0x388>
    tcp_input_pcb = NULL;
 8009f00:	2300      	movs	r3, #0
 8009f02:	4a26      	ldr	r2, [pc, #152]	; (8009f9c <tcp_input+0x2e0>)
 8009f04:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 8009f06:	4a22      	ldr	r2, [pc, #136]	; (8009f90 <tcp_input+0x2d4>)
 8009f08:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
 8009f0a:	4b20      	ldr	r3, [pc, #128]	; (8009f8c <tcp_input+0x2d0>)
 8009f0c:	6858      	ldr	r0, [r3, #4]
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f43f af1f 	beq.w	8009d52 <tcp_input+0x96>
      pbuf_free(inseg.p);
 8009f14:	f7fd fa4a 	bl	80073ac <pbuf_free>
      inseg.p = NULL;
 8009f18:	2200      	movs	r2, #0
 8009f1a:	4b1c      	ldr	r3, [pc, #112]	; (8009f8c <tcp_input+0x2d0>)
 8009f1c:	605a      	str	r2, [r3, #4]
 8009f1e:	e718      	b.n	8009d52 <tcp_input+0x96>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009f20:	4b12      	ldr	r3, [pc, #72]	; (8009f6c <tcp_input+0x2b0>)
 8009f22:	22ec      	movs	r2, #236	; 0xec
 8009f24:	491e      	ldr	r1, [pc, #120]	; (8009fa0 <tcp_input+0x2e4>)
 8009f26:	4813      	ldr	r0, [pc, #76]	; (8009f74 <tcp_input+0x2b8>)
 8009f28:	f002 fb2f 	bl	800c58a <iprintf>
 8009f2c:	e7aa      	b.n	8009e84 <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009f2e:	4b0f      	ldr	r3, [pc, #60]	; (8009f6c <tcp_input+0x2b0>)
 8009f30:	22f4      	movs	r2, #244	; 0xf4
 8009f32:	491c      	ldr	r1, [pc, #112]	; (8009fa4 <tcp_input+0x2e8>)
 8009f34:	480f      	ldr	r0, [pc, #60]	; (8009f74 <tcp_input+0x2b8>)
 8009f36:	f002 fb28 	bl	800c58a <iprintf>
 8009f3a:	e7ad      	b.n	8009e98 <tcp_input+0x1dc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f3c:	4b1a      	ldr	r3, [pc, #104]	; (8009fa8 <tcp_input+0x2ec>)
 8009f3e:	681d      	ldr	r5, [r3, #0]
 8009f40:	e03b      	b.n	8009fba <tcp_input+0x2fe>
 8009f42:	bf00      	nop
 8009f44:	20003ef8 	.word	0x20003ef8
 8009f48:	20003f64 	.word	0x20003f64
 8009f4c:	20003f04 	.word	0x20003f04
 8009f50:	20003f00 	.word	0x20003f00
 8009f54:	20003efc 	.word	0x20003efc
 8009f58:	20003ef0 	.word	0x20003ef0
 8009f5c:	20003ecc 	.word	0x20003ecc
 8009f60:	20003ed0 	.word	0x20003ed0
 8009f64:	20003f06 	.word	0x20003f06
 8009f68:	20007234 	.word	0x20007234
 8009f6c:	0800e11c 	.word	0x0800e11c
 8009f70:	0800df54 	.word	0x0800df54
 8009f74:	0800c8d0 	.word	0x0800c8d0
 8009f78:	0800df70 	.word	0x0800df70
 8009f7c:	0800df64 	.word	0x0800df64
 8009f80:	0800df90 	.word	0x0800df90
 8009f84:	0800dfb8 	.word	0x0800dfb8
 8009f88:	0800dfe4 	.word	0x0800dfe4
 8009f8c:	20003ed4 	.word	0x20003ed4
 8009f90:	20003ee8 	.word	0x20003ee8
 8009f94:	20003eec 	.word	0x20003eec
 8009f98:	20003ee4 	.word	0x20003ee4
 8009f9c:	20007248 	.word	0x20007248
 8009fa0:	0800e00c 	.word	0x0800e00c
 8009fa4:	0800e038 	.word	0x0800e038
 8009fa8:	20007244 	.word	0x20007244
      if (pcb->remote_port == tcphdr->src &&
 8009fac:	8b29      	ldrh	r1, [r5, #24]
 8009fae:	4b80      	ldr	r3, [pc, #512]	; (800a1b0 <tcp_input+0x4f4>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	881a      	ldrh	r2, [r3, #0]
 8009fb4:	4291      	cmp	r1, r2
 8009fb6:	d00b      	beq.n	8009fd0 <tcp_input+0x314>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fb8:	68ed      	ldr	r5, [r5, #12]
 8009fba:	b1f5      	cbz	r5, 8009ffa <tcp_input+0x33e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009fbc:	7d2b      	ldrb	r3, [r5, #20]
 8009fbe:	2b0a      	cmp	r3, #10
 8009fc0:	d0f4      	beq.n	8009fac <tcp_input+0x2f0>
 8009fc2:	4b7c      	ldr	r3, [pc, #496]	; (800a1b4 <tcp_input+0x4f8>)
 8009fc4:	22fe      	movs	r2, #254	; 0xfe
 8009fc6:	497c      	ldr	r1, [pc, #496]	; (800a1b8 <tcp_input+0x4fc>)
 8009fc8:	487c      	ldr	r0, [pc, #496]	; (800a1bc <tcp_input+0x500>)
 8009fca:	f002 fade 	bl	800c58a <iprintf>
 8009fce:	e7ed      	b.n	8009fac <tcp_input+0x2f0>
          pcb->local_port == tcphdr->dest &&
 8009fd0:	8aea      	ldrh	r2, [r5, #22]
 8009fd2:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d1ef      	bne.n	8009fb8 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009fd8:	686a      	ldr	r2, [r5, #4]
 8009fda:	4b79      	ldr	r3, [pc, #484]	; (800a1c0 <tcp_input+0x504>)
 8009fdc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d1ea      	bne.n	8009fb8 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009fe2:	682a      	ldr	r2, [r5, #0]
 8009fe4:	4b76      	ldr	r3, [pc, #472]	; (800a1c0 <tcp_input+0x504>)
 8009fe6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d1e5      	bne.n	8009fb8 <tcp_input+0x2fc>
        tcp_timewait_input(pcb);
 8009fec:	4628      	mov	r0, r5
 8009fee:	f7fe fd8f 	bl	8008b10 <tcp_timewait_input>
        pbuf_free(p);
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7fd f9da 	bl	80073ac <pbuf_free>
        return;
 8009ff8:	e6ab      	b.n	8009d52 <tcp_input+0x96>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009ffa:	4b72      	ldr	r3, [pc, #456]	; (800a1c4 <tcp_input+0x508>)
 8009ffc:	681e      	ldr	r6, [r3, #0]
 8009ffe:	4630      	mov	r0, r6
    prev = NULL;
 800a000:	4629      	mov	r1, r5
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a002:	e001      	b.n	800a008 <tcp_input+0x34c>
      prev = (struct tcp_pcb *)lpcb;
 800a004:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a006:	68c0      	ldr	r0, [r0, #12]
 800a008:	b168      	cbz	r0, 800a026 <tcp_input+0x36a>
      if (lpcb->local_port == tcphdr->dest) {
 800a00a:	8ac2      	ldrh	r2, [r0, #22]
 800a00c:	4b68      	ldr	r3, [pc, #416]	; (800a1b0 <tcp_input+0x4f4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	885b      	ldrh	r3, [r3, #2]
 800a012:	429a      	cmp	r2, r3
 800a014:	d1f6      	bne.n	800a004 <tcp_input+0x348>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a016:	6803      	ldr	r3, [r0, #0]
 800a018:	4a69      	ldr	r2, [pc, #420]	; (800a1c0 <tcp_input+0x504>)
 800a01a:	6952      	ldr	r2, [r2, #20]
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d002      	beq.n	800a026 <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a020:	b108      	cbz	r0, 800a026 <tcp_input+0x36a>
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1ee      	bne.n	800a004 <tcp_input+0x348>
    if (lpcb != NULL) {
 800a026:	2800      	cmp	r0, #0
 800a028:	f43f af38 	beq.w	8009e9c <tcp_input+0x1e0>
      if (prev != NULL) {
 800a02c:	b121      	cbz	r1, 800a038 <tcp_input+0x37c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a02e:	68c3      	ldr	r3, [r0, #12]
 800a030:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a032:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a034:	4b63      	ldr	r3, [pc, #396]	; (800a1c4 <tcp_input+0x508>)
 800a036:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 800a038:	f7fe fdb2 	bl	8008ba0 <tcp_listen_input>
      pbuf_free(p);
 800a03c:	4620      	mov	r0, r4
 800a03e:	f7fd f9b5 	bl	80073ac <pbuf_free>
      return;
 800a042:	e686      	b.n	8009d52 <tcp_input+0x96>
          tcp_send_empty_ack(pcb);
 800a044:	4628      	mov	r0, r5
 800a046:	f000 fde9 	bl	800ac1c <tcp_send_empty_ack>
 800a04a:	e759      	b.n	8009f00 <tcp_input+0x244>
    tcp_input_pcb = pcb;
 800a04c:	4b5e      	ldr	r3, [pc, #376]	; (800a1c8 <tcp_input+0x50c>)
 800a04e:	601d      	str	r5, [r3, #0]
    err = tcp_process(pcb);
 800a050:	4628      	mov	r0, r5
 800a052:	f7ff fb97 	bl	8009784 <tcp_process>
    if (err != ERR_ABRT) {
 800a056:	f110 0f0d 	cmn.w	r0, #13
 800a05a:	f43f af51 	beq.w	8009f00 <tcp_input+0x244>
      if (recv_flags & TF_RESET) {
 800a05e:	4b5b      	ldr	r3, [pc, #364]	; (800a1cc <tcp_input+0x510>)
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	f013 0f08 	tst.w	r3, #8
 800a066:	d00f      	beq.n	800a088 <tcp_input+0x3cc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a068:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800a06c:	b11b      	cbz	r3, 800a076 <tcp_input+0x3ba>
 800a06e:	f06f 010d 	mvn.w	r1, #13
 800a072:	6928      	ldr	r0, [r5, #16]
 800a074:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a076:	4629      	mov	r1, r5
 800a078:	4855      	ldr	r0, [pc, #340]	; (800a1d0 <tcp_input+0x514>)
 800a07a:	f7fe f93b 	bl	80082f4 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800a07e:	4629      	mov	r1, r5
 800a080:	2001      	movs	r0, #1
 800a082:	f7fc ffbd 	bl	8007000 <memp_free>
 800a086:	e73b      	b.n	8009f00 <tcp_input+0x244>
        if (recv_acked > 0) {
 800a088:	4b52      	ldr	r3, [pc, #328]	; (800a1d4 <tcp_input+0x518>)
 800a08a:	881a      	ldrh	r2, [r3, #0]
 800a08c:	b162      	cbz	r2, 800a0a8 <tcp_input+0x3ec>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a08e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d048      	beq.n	800a126 <tcp_input+0x46a>
 800a094:	4629      	mov	r1, r5
 800a096:	6928      	ldr	r0, [r5, #16]
 800a098:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800a09a:	f110 0f0d 	cmn.w	r0, #13
 800a09e:	f43f af2f 	beq.w	8009f00 <tcp_input+0x244>
          recv_acked = 0;
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	4b4b      	ldr	r3, [pc, #300]	; (800a1d4 <tcp_input+0x518>)
 800a0a6:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f7fe fd0f 	bl	8008acc <tcp_input_delayed_close>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	f47f af26 	bne.w	8009f00 <tcp_input+0x244>
        if (recv_data != NULL) {
 800a0b4:	4b48      	ldr	r3, [pc, #288]	; (800a1d8 <tcp_input+0x51c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	b1eb      	cbz	r3, 800a0f6 <tcp_input+0x43a>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a0ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a0bc:	b133      	cbz	r3, 800a0cc <tcp_input+0x410>
 800a0be:	4b3d      	ldr	r3, [pc, #244]	; (800a1b4 <tcp_input+0x4f8>)
 800a0c0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800a0c4:	4945      	ldr	r1, [pc, #276]	; (800a1dc <tcp_input+0x520>)
 800a0c6:	483d      	ldr	r0, [pc, #244]	; (800a1bc <tcp_input+0x500>)
 800a0c8:	f002 fa5f 	bl	800c58a <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a0cc:	7eab      	ldrb	r3, [r5, #26]
 800a0ce:	f013 0f10 	tst.w	r3, #16
 800a0d2:	d12a      	bne.n	800a12a <tcp_input+0x46e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a0d4:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 800a0d8:	b37c      	cbz	r4, 800a13a <tcp_input+0x47e>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	4a3e      	ldr	r2, [pc, #248]	; (800a1d8 <tcp_input+0x51c>)
 800a0de:	6812      	ldr	r2, [r2, #0]
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	6928      	ldr	r0, [r5, #16]
 800a0e4:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 800a0e6:	f110 0f0d 	cmn.w	r0, #13
 800a0ea:	f43f af09 	beq.w	8009f00 <tcp_input+0x244>
          if (err != ERR_OK) {
 800a0ee:	b110      	cbz	r0, 800a0f6 <tcp_input+0x43a>
            pcb->refused_data = recv_data;
 800a0f0:	4b39      	ldr	r3, [pc, #228]	; (800a1d8 <tcp_input+0x51c>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800a0f6:	4b35      	ldr	r3, [pc, #212]	; (800a1cc <tcp_input+0x510>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	f013 0f20 	tst.w	r3, #32
 800a0fe:	d005      	beq.n	800a10c <tcp_input+0x450>
          if (pcb->refused_data != NULL) {
 800a100:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a102:	b313      	cbz	r3, 800a14a <tcp_input+0x48e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a104:	7b5a      	ldrb	r2, [r3, #13]
 800a106:	f042 0220 	orr.w	r2, r2, #32
 800a10a:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800a10c:	2200      	movs	r2, #0
 800a10e:	4b2e      	ldr	r3, [pc, #184]	; (800a1c8 <tcp_input+0x50c>)
 800a110:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a112:	4628      	mov	r0, r5
 800a114:	f7fe fcda 	bl	8008acc <tcp_input_delayed_close>
 800a118:	2800      	cmp	r0, #0
 800a11a:	f47f aef1 	bne.w	8009f00 <tcp_input+0x244>
        tcp_output(pcb);
 800a11e:	4628      	mov	r0, r5
 800a120:	f000 fdb6 	bl	800ac90 <tcp_output>
 800a124:	e6ec      	b.n	8009f00 <tcp_input+0x244>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a126:	2000      	movs	r0, #0
 800a128:	e7b7      	b.n	800a09a <tcp_input+0x3de>
            pbuf_free(recv_data);
 800a12a:	4b2b      	ldr	r3, [pc, #172]	; (800a1d8 <tcp_input+0x51c>)
 800a12c:	6818      	ldr	r0, [r3, #0]
 800a12e:	f7fd f93d 	bl	80073ac <pbuf_free>
            tcp_abort(pcb);
 800a132:	4628      	mov	r0, r5
 800a134:	f7fe fb2a 	bl	800878c <tcp_abort>
            goto aborted;
 800a138:	e6e2      	b.n	8009f00 <tcp_input+0x244>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a13a:	2300      	movs	r3, #0
 800a13c:	4a26      	ldr	r2, [pc, #152]	; (800a1d8 <tcp_input+0x51c>)
 800a13e:	6812      	ldr	r2, [r2, #0]
 800a140:	4629      	mov	r1, r5
 800a142:	4618      	mov	r0, r3
 800a144:	f7fe f9de 	bl	8008504 <tcp_recv_null>
 800a148:	e7cd      	b.n	800a0e6 <tcp_input+0x42a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a14a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800a14c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a150:	d001      	beq.n	800a156 <tcp_input+0x49a>
              pcb->rcv_wnd++;
 800a152:	3301      	adds	r3, #1
 800a154:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800a156:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 800a15a:	b144      	cbz	r4, 800a16e <tcp_input+0x4b2>
 800a15c:	2300      	movs	r3, #0
 800a15e:	461a      	mov	r2, r3
 800a160:	4629      	mov	r1, r5
 800a162:	6928      	ldr	r0, [r5, #16]
 800a164:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 800a166:	f110 0f0d 	cmn.w	r0, #13
 800a16a:	d1cf      	bne.n	800a10c <tcp_input+0x450>
 800a16c:	e6c8      	b.n	8009f00 <tcp_input+0x244>
            TCP_EVENT_CLOSED(pcb, err);
 800a16e:	2000      	movs	r0, #0
 800a170:	e7f9      	b.n	800a166 <tcp_input+0x4aa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a172:	4b0f      	ldr	r3, [pc, #60]	; (800a1b0 <tcp_input+0x4f4>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	8998      	ldrh	r0, [r3, #12]
 800a178:	f7fb f8fc 	bl	8005374 <lwip_htons>
 800a17c:	f010 0f04 	tst.w	r0, #4
 800a180:	d003      	beq.n	800a18a <tcp_input+0x4ce>
    pbuf_free(p);
 800a182:	4620      	mov	r0, r4
 800a184:	f7fd f912 	bl	80073ac <pbuf_free>
 800a188:	e5e3      	b.n	8009d52 <tcp_input+0x96>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a18a:	4b09      	ldr	r3, [pc, #36]	; (800a1b0 <tcp_input+0x4f4>)
 800a18c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a18e:	4a14      	ldr	r2, [pc, #80]	; (800a1e0 <tcp_input+0x524>)
 800a190:	4914      	ldr	r1, [pc, #80]	; (800a1e4 <tcp_input+0x528>)
 800a192:	8808      	ldrh	r0, [r1, #0]
 800a194:	4914      	ldr	r1, [pc, #80]	; (800a1e8 <tcp_input+0x52c>)
 800a196:	6809      	ldr	r1, [r1, #0]
 800a198:	881d      	ldrh	r5, [r3, #0]
 800a19a:	9501      	str	r5, [sp, #4]
 800a19c:	885b      	ldrh	r3, [r3, #2]
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	3204      	adds	r2, #4
 800a1a4:	4401      	add	r1, r0
 800a1a6:	4811      	ldr	r0, [pc, #68]	; (800a1ec <tcp_input+0x530>)
 800a1a8:	6800      	ldr	r0, [r0, #0]
 800a1aa:	f000 fecd 	bl	800af48 <tcp_rst>
 800a1ae:	e7e8      	b.n	800a182 <tcp_input+0x4c6>
 800a1b0:	20003ef8 	.word	0x20003ef8
 800a1b4:	0800e11c 	.word	0x0800e11c
 800a1b8:	0800e064 	.word	0x0800e064
 800a1bc:	0800c8d0 	.word	0x0800c8d0
 800a1c0:	20003f64 	.word	0x20003f64
 800a1c4:	2000723c 	.word	0x2000723c
 800a1c8:	20007248 	.word	0x20007248
 800a1cc:	20003eec 	.word	0x20003eec
 800a1d0:	20007234 	.word	0x20007234
 800a1d4:	20003ee4 	.word	0x20003ee4
 800a1d8:	20003ee8 	.word	0x20003ee8
 800a1dc:	0800e094 	.word	0x0800e094
 800a1e0:	20003f74 	.word	0x20003f74
 800a1e4:	20003f06 	.word	0x20003f06
 800a1e8:	20003ef0 	.word	0x20003ef0
 800a1ec:	20003ecc 	.word	0x20003ecc

0800a1f0 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800a1f0:	4a02      	ldr	r2, [pc, #8]	; (800a1fc <tcp_trigger_input_pcb_close+0xc>)
 800a1f2:	7813      	ldrb	r3, [r2, #0]
 800a1f4:	f043 0310 	orr.w	r3, r3, #16
 800a1f8:	7013      	strb	r3, [r2, #0]
 800a1fa:	4770      	bx	lr
 800a1fc:	20003eec 	.word	0x20003eec

0800a200 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a200:	b508      	push	{r3, lr}
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a202:	7d03      	ldrb	r3, [r0, #20]
 800a204:	2b04      	cmp	r3, #4
 800a206:	d005      	beq.n	800a214 <tcp_write_checks+0x14>
 800a208:	2b07      	cmp	r3, #7
 800a20a:	d003      	beq.n	800a214 <tcp_write_checks+0x14>
      (pcb->state != CLOSE_WAIT) &&
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d001      	beq.n	800a214 <tcp_write_checks+0x14>
      (pcb->state != SYN_SENT) &&
 800a210:	2b03      	cmp	r3, #3
 800a212:	d139      	bne.n	800a288 <tcp_write_checks+0x88>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 800a214:	2900      	cmp	r1, #0
 800a216:	d03a      	beq.n	800a28e <tcp_write_checks+0x8e>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a218:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800a21c:	4299      	cmp	r1, r3
 800a21e:	d808      	bhi.n	800a232 <tcp_write_checks+0x32>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a220:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a224:	2b0f      	cmp	r3, #15
 800a226:	d80b      	bhi.n	800a240 <tcp_write_checks+0x40>
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 800a228:	b1f3      	cbz	r3, 800a268 <tcp_write_checks+0x68>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a22a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a22c:	b17b      	cbz	r3, 800a24e <tcp_write_checks+0x4e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a22e:	2000      	movs	r0, #0
 800a230:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 800a232:	7e83      	ldrb	r3, [r0, #26]
 800a234:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a238:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 800a23a:	f04f 30ff 	mov.w	r0, #4294967295
 800a23e:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 800a240:	7e83      	ldrb	r3, [r0, #26]
 800a242:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a246:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 800a248:	f04f 30ff 	mov.w	r0, #4294967295
 800a24c:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a24e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a250:	b10b      	cbz	r3, 800a256 <tcp_write_checks+0x56>
  return ERR_OK;
 800a252:	2000      	movs	r0, #0
 800a254:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a256:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <tcp_write_checks+0x94>)
 800a258:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800a25c:	490e      	ldr	r1, [pc, #56]	; (800a298 <tcp_write_checks+0x98>)
 800a25e:	480f      	ldr	r0, [pc, #60]	; (800a29c <tcp_write_checks+0x9c>)
 800a260:	f002 f993 	bl	800c58a <iprintf>
  return ERR_OK;
 800a264:	2000      	movs	r0, #0
 800a266:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a268:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a26a:	b143      	cbz	r3, 800a27e <tcp_write_checks+0x7e>
 800a26c:	4b09      	ldr	r3, [pc, #36]	; (800a294 <tcp_write_checks+0x94>)
 800a26e:	f240 1259 	movw	r2, #345	; 0x159
 800a272:	490b      	ldr	r1, [pc, #44]	; (800a2a0 <tcp_write_checks+0xa0>)
 800a274:	4809      	ldr	r0, [pc, #36]	; (800a29c <tcp_write_checks+0x9c>)
 800a276:	f002 f988 	bl	800c58a <iprintf>
  return ERR_OK;
 800a27a:	2000      	movs	r0, #0
 800a27c:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a27e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1f3      	bne.n	800a26c <tcp_write_checks+0x6c>
  return ERR_OK;
 800a284:	2000      	movs	r0, #0
}
 800a286:	bd08      	pop	{r3, pc}
    return ERR_CONN;
 800a288:	f06f 000a 	mvn.w	r0, #10
 800a28c:	bd08      	pop	{r3, pc}
    return ERR_OK;
 800a28e:	2000      	movs	r0, #0
 800a290:	bd08      	pop	{r3, pc}
 800a292:	bf00      	nop
 800a294:	0800e62c 	.word	0x0800e62c
 800a298:	0800e660 	.word	0x0800e660
 800a29c:	0800c8d0 	.word	0x0800c8d0
 800a2a0:	0800e69c 	.word	0x0800e69c

0800a2a4 <tcp_pbuf_prealloc>:
{
 800a2a4:	b570      	push	{r4, r5, r6, lr}
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	461e      	mov	r6, r3
 800a2aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 800a2ae:	4291      	cmp	r1, r2
 800a2b0:	d215      	bcs.n	800a2de <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a2b2:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800a2b6:	f011 0f02 	tst.w	r1, #2
 800a2ba:	d108      	bne.n	800a2ce <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 800a2bc:	9904      	ldr	r1, [sp, #16]
 800a2be:	7e89      	ldrb	r1, [r1, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a2c0:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a2c4:	d126      	bne.n	800a314 <tcp_pbuf_prealloc+0x70>
        (!(pcb->flags & TF_NODELAY) &&
 800a2c6:	b113      	cbz	r3, 800a2ce <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 800a2c8:	9b04      	ldr	r3, [sp, #16]
 800a2ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800a2cc:	b1e3      	cbz	r3, 800a308 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a2ce:	f204 11cf 	addw	r1, r4, #463	; 0x1cf
 800a2d2:	f021 0103 	bic.w	r1, r1, #3
 800a2d6:	428a      	cmp	r2, r1
 800a2d8:	bf28      	it	cs
 800a2da:	460a      	movcs	r2, r1
 800a2dc:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f7fd f8d0 	bl	8007484 <pbuf_alloc>
  if (p == NULL) {
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	b168      	cbz	r0, 800a304 <tcp_pbuf_prealloc+0x60>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a2e8:	6803      	ldr	r3, [r0, #0]
 800a2ea:	b133      	cbz	r3, 800a2fa <tcp_pbuf_prealloc+0x56>
 800a2ec:	4b0a      	ldr	r3, [pc, #40]	; (800a318 <tcp_pbuf_prealloc+0x74>)
 800a2ee:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a2f2:	490a      	ldr	r1, [pc, #40]	; (800a31c <tcp_pbuf_prealloc+0x78>)
 800a2f4:	480a      	ldr	r0, [pc, #40]	; (800a320 <tcp_pbuf_prealloc+0x7c>)
 800a2f6:	f002 f948 	bl	800c58a <iprintf>
  *oversize = p->len - length;
 800a2fa:	896b      	ldrh	r3, [r5, #10]
 800a2fc:	1b1b      	subs	r3, r3, r4
 800a2fe:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800a300:	812c      	strh	r4, [r5, #8]
 800a302:	816c      	strh	r4, [r5, #10]
}
 800a304:	4628      	mov	r0, r5
 800a306:	bd70      	pop	{r4, r5, r6, pc}
          pcb->unacked != NULL))) {
 800a308:	9b04      	ldr	r3, [sp, #16]
 800a30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1de      	bne.n	800a2ce <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 800a310:	4621      	mov	r1, r4
 800a312:	e7e4      	b.n	800a2de <tcp_pbuf_prealloc+0x3a>
 800a314:	4621      	mov	r1, r4
 800a316:	e7e2      	b.n	800a2de <tcp_pbuf_prealloc+0x3a>
 800a318:	0800e62c 	.word	0x0800e62c
 800a31c:	0800e43c 	.word	0x0800e43c
 800a320:	0800c8d0 	.word	0x0800c8d0

0800a324 <tcp_create_segment>:
{
 800a324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a328:	4680      	mov	r8, r0
 800a32a:	460e      	mov	r6, r1
 800a32c:	4617      	mov	r7, r2
 800a32e:	4699      	mov	r9, r3
 800a330:	f89d a020 	ldrb.w	sl, [sp, #32]
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a334:	f01a 0f01 	tst.w	sl, #1
 800a338:	d03c      	beq.n	800a3b4 <tcp_create_segment+0x90>
 800a33a:	2504      	movs	r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a33c:	2003      	movs	r0, #3
 800a33e:	f7fc fe45 	bl	8006fcc <memp_malloc>
 800a342:	4604      	mov	r4, r0
 800a344:	2800      	cmp	r0, #0
 800a346:	d037      	beq.n	800a3b8 <tcp_create_segment+0x94>
  seg->flags = optflags;
 800a348:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800a350:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a352:	8933      	ldrh	r3, [r6, #8]
 800a354:	fa1f fa85 	uxth.w	sl, r5
 800a358:	4553      	cmp	r3, sl
 800a35a:	d331      	bcc.n	800a3c0 <tcp_create_segment+0x9c>
  seg->len = p->tot_len - optlen;
 800a35c:	8933      	ldrh	r3, [r6, #8]
 800a35e:	eba3 030a 	sub.w	r3, r3, sl
 800a362:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800a364:	2114      	movs	r1, #20
 800a366:	4630      	mov	r0, r6
 800a368:	f7fd f816 	bl	8007398 <pbuf_header>
 800a36c:	bb78      	cbnz	r0, 800a3ce <tcp_create_segment+0xaa>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a36e:	6863      	ldr	r3, [r4, #4]
 800a370:	685e      	ldr	r6, [r3, #4]
 800a372:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a374:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 800a378:	f7fa fffc 	bl	8005374 <lwip_htons>
 800a37c:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a37e:	68e6      	ldr	r6, [r4, #12]
 800a380:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 800a384:	f7fa fff6 	bl	8005374 <lwip_htons>
 800a388:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a38a:	68e6      	ldr	r6, [r4, #12]
 800a38c:	4648      	mov	r0, r9
 800a38e:	f7fa fff4 	bl	800537a <lwip_htonl>
 800a392:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800a394:	68e6      	ldr	r6, [r4, #12]
 800a396:	08a8      	lsrs	r0, r5, #2
 800a398:	3005      	adds	r0, #5
 800a39a:	0300      	lsls	r0, r0, #12
 800a39c:	b280      	uxth	r0, r0
 800a39e:	4338      	orrs	r0, r7
 800a3a0:	f7fa ffe8 	bl	8005374 <lwip_htons>
 800a3a4:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 800a3a6:	68e3      	ldr	r3, [r4, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	749a      	strb	r2, [r3, #18]
 800a3ac:	74da      	strb	r2, [r3, #19]
}
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a3b4:	2500      	movs	r5, #0
 800a3b6:	e7c1      	b.n	800a33c <tcp_create_segment+0x18>
    pbuf_free(p);
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7fc fff7 	bl	80073ac <pbuf_free>
    return NULL;
 800a3be:	e7f6      	b.n	800a3ae <tcp_create_segment+0x8a>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a3c0:	4b05      	ldr	r3, [pc, #20]	; (800a3d8 <tcp_create_segment+0xb4>)
 800a3c2:	22ba      	movs	r2, #186	; 0xba
 800a3c4:	4905      	ldr	r1, [pc, #20]	; (800a3dc <tcp_create_segment+0xb8>)
 800a3c6:	4806      	ldr	r0, [pc, #24]	; (800a3e0 <tcp_create_segment+0xbc>)
 800a3c8:	f002 f8df 	bl	800c58a <iprintf>
 800a3cc:	e7c6      	b.n	800a35c <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f7fd fcd0 	bl	8007d74 <tcp_seg_free>
    return NULL;
 800a3d4:	2400      	movs	r4, #0
 800a3d6:	e7ea      	b.n	800a3ae <tcp_create_segment+0x8a>
 800a3d8:	0800e62c 	.word	0x0800e62c
 800a3dc:	0800e2b4 	.word	0x0800e2b4
 800a3e0:	0800c8d0 	.word	0x0800c8d0

0800a3e4 <tcp_output_alloc_header>:
{
 800a3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a3ee:	4411      	add	r1, r2
 800a3f0:	b289      	uxth	r1, r1
 800a3f2:	3114      	adds	r1, #20
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	b289      	uxth	r1, r1
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	f7fd f843 	bl	8007484 <pbuf_alloc>
  if (p != NULL) {
 800a3fe:	4607      	mov	r7, r0
 800a400:	b348      	cbz	r0, 800a456 <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a402:	8942      	ldrh	r2, [r0, #10]
 800a404:	f104 0314 	add.w	r3, r4, #20
 800a408:	429a      	cmp	r2, r3
 800a40a:	db27      	blt.n	800a45c <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800a40c:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800a40e:	8af0      	ldrh	r0, [r6, #22]
 800a410:	f7fa ffb0 	bl	8005374 <lwip_htons>
 800a414:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800a416:	8b30      	ldrh	r0, [r6, #24]
 800a418:	f7fa ffac 	bl	8005374 <lwip_htons>
 800a41c:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800a41e:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a422:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800a424:	f7fa ffa9 	bl	800537a <lwip_htonl>
 800a428:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800a42a:	08a0      	lsrs	r0, r4, #2
 800a42c:	3005      	adds	r0, #5
 800a42e:	0300      	lsls	r0, r0, #12
 800a430:	b280      	uxth	r0, r0
 800a432:	f040 0010 	orr.w	r0, r0, #16
 800a436:	f7fa ff9d 	bl	8005374 <lwip_htons>
 800a43a:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a43c:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 800a43e:	f7fa ff99 	bl	8005374 <lwip_htons>
 800a442:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	742b      	strb	r3, [r5, #16]
 800a448:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800a44a:	74ab      	strb	r3, [r5, #18]
 800a44c:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a44e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a450:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
 800a452:	4413      	add	r3, r2
 800a454:	62f3      	str	r3, [r6, #44]	; 0x2c
}
 800a456:	4638      	mov	r0, r7
 800a458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a45c:	4b03      	ldr	r3, [pc, #12]	; (800a46c <tcp_output_alloc_header+0x88>)
 800a45e:	2273      	movs	r2, #115	; 0x73
 800a460:	4903      	ldr	r1, [pc, #12]	; (800a470 <tcp_output_alloc_header+0x8c>)
 800a462:	4804      	ldr	r0, [pc, #16]	; (800a474 <tcp_output_alloc_header+0x90>)
 800a464:	f002 f891 	bl	800c58a <iprintf>
 800a468:	e7d0      	b.n	800a40c <tcp_output_alloc_header+0x28>
 800a46a:	bf00      	nop
 800a46c:	0800e62c 	.word	0x0800e62c
 800a470:	0800e40c 	.word	0x0800e40c
 800a474:	0800c8d0 	.word	0x0800c8d0

0800a478 <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800a478:	6843      	ldr	r3, [r0, #4]
 800a47a:	89db      	ldrh	r3, [r3, #14]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d001      	beq.n	800a484 <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800a480:	2000      	movs	r0, #0
 800a482:	4770      	bx	lr
{
 800a484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a486:	b085      	sub	sp, #20
 800a488:	4616      	mov	r6, r2
 800a48a:	460d      	mov	r5, r1
 800a48c:	4604      	mov	r4, r0
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a48e:	68c7      	ldr	r7, [r0, #12]
 800a490:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800a492:	f7fa ff72 	bl	800537a <lwip_htonl>
 800a496:	60b8      	str	r0, [r7, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a498:	68e7      	ldr	r7, [r4, #12]
 800a49a:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800a49c:	f7fa ff6a 	bl	8005374 <lwip_htons>
 800a4a0:	81f8      	strh	r0, [r7, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a4a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4a4:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800a4a6:	4413      	add	r3, r2
 800a4a8:	62eb      	str	r3, [r5, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a4aa:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a4ac:	7aa3      	ldrb	r3, [r4, #10]
 800a4ae:	f013 0f01 	tst.w	r3, #1
 800a4b2:	d126      	bne.n	800a502 <tcp_output_segment+0x8a>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a4b4:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	db2d      	blt.n	800a518 <tcp_output_segment+0xa0>
    pcb->rtime = 0;
  }

  if (pcb->rttest == 0) {
 800a4bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d02d      	beq.n	800a51e <tcp_output_segment+0xa6>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a4c2:	68e3      	ldr	r3, [r4, #12]
 800a4c4:	6862      	ldr	r2, [r4, #4]
 800a4c6:	6851      	ldr	r1, [r2, #4]
 800a4c8:	1a5b      	subs	r3, r3, r1
 800a4ca:	b29b      	uxth	r3, r3
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a4cc:	8951      	ldrh	r1, [r2, #10]
 800a4ce:	1ac9      	subs	r1, r1, r3
 800a4d0:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800a4d2:	6861      	ldr	r1, [r4, #4]
 800a4d4:	890a      	ldrh	r2, [r1, #8]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
 800a4da:	6863      	ldr	r3, [r4, #4]
 800a4dc:	68e2      	ldr	r2, [r4, #12]
 800a4de:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a4e0:	68e3      	ldr	r3, [r4, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	741a      	strb	r2, [r3, #16]
 800a4e6:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a4e8:	6860      	ldr	r0, [r4, #4]
 800a4ea:	7aab      	ldrb	r3, [r5, #10]
 800a4ec:	7a6a      	ldrb	r2, [r5, #9]
 800a4ee:	9602      	str	r6, [sp, #8]
 800a4f0:	2106      	movs	r1, #6
 800a4f2:	9101      	str	r1, [sp, #4]
 800a4f4:	9200      	str	r2, [sp, #0]
 800a4f6:	1d2a      	adds	r2, r5, #4
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	f7fb fe8b 	bl	8006214 <ip4_output_if>
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 800a4fe:	b005      	add	sp, #20
 800a500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a502:	1d29      	adds	r1, r5, #4
 800a504:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800a508:	f7fe fa3a 	bl	8008980 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a50c:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800a510:	f7fa ff33 	bl	800537a <lwip_htonl>
 800a514:	6178      	str	r0, [r7, #20]
 800a516:	e7cd      	b.n	800a4b4 <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	862b      	strh	r3, [r5, #48]	; 0x30
 800a51c:	e7ce      	b.n	800a4bc <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 800a51e:	4b04      	ldr	r3, [pc, #16]	; (800a530 <tcp_output_segment+0xb8>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a524:	68e3      	ldr	r3, [r4, #12]
 800a526:	6858      	ldr	r0, [r3, #4]
 800a528:	f7fa ff27 	bl	800537a <lwip_htonl>
 800a52c:	63a8      	str	r0, [r5, #56]	; 0x38
 800a52e:	e7c8      	b.n	800a4c2 <tcp_output_segment+0x4a>
 800a530:	20007238 	.word	0x20007238

0800a534 <tcp_write>:
{
 800a534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a538:	b091      	sub	sp, #68	; 0x44
 800a53a:	4681      	mov	r9, r0
 800a53c:	9108      	str	r1, [sp, #32]
 800a53e:	4692      	mov	sl, r2
 800a540:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 800a542:	2300      	movs	r3, #0
 800a544:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800a548:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800a54c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800a54e:	9205      	str	r2, [sp, #20]
 800a550:	085b      	lsrs	r3, r3, #1
 800a552:	4293      	cmp	r3, r2
 800a554:	bf28      	it	cs
 800a556:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800a558:	b103      	cbz	r3, 800a55c <tcp_write+0x28>
 800a55a:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a55c:	9b08      	ldr	r3, [sp, #32]
 800a55e:	b1cb      	cbz	r3, 800a594 <tcp_write+0x60>
  err = tcp_write_checks(pcb, len);
 800a560:	4651      	mov	r1, sl
 800a562:	4648      	mov	r0, r9
 800a564:	f7ff fe4c 	bl	800a200 <tcp_write_checks>
  if (err != ERR_OK) {
 800a568:	9009      	str	r0, [sp, #36]	; 0x24
 800a56a:	2800      	cmp	r0, #0
 800a56c:	f040 81b2 	bne.w	800a8d4 <tcp_write+0x3a0>
  queuelen = pcb->snd_queuelen;
 800a570:	f8b9 6062 	ldrh.w	r6, [r9, #98]	; 0x62
  if (pcb->unsent != NULL) {
 800a574:	f8d9 b068 	ldr.w	fp, [r9, #104]	; 0x68
 800a578:	f1bb 0f00 	cmp.w	fp, #0
 800a57c:	d116      	bne.n	800a5ac <tcp_write+0x78>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a57e:	f8b9 4064 	ldrh.w	r4, [r9, #100]	; 0x64
 800a582:	2c00      	cmp	r4, #0
 800a584:	f040 80d8 	bne.w	800a738 <tcp_write+0x204>
  u16_t extendlen = 0;
 800a588:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800a58a:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a58c:	46d8      	mov	r8, fp
  struct pbuf *concat_p = NULL;
 800a58e:	2300      	movs	r3, #0
 800a590:	930c      	str	r3, [sp, #48]	; 0x30
 800a592:	e0e3      	b.n	800a75c <tcp_write+0x228>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a594:	4bb1      	ldr	r3, [pc, #708]	; (800a85c <tcp_write+0x328>)
 800a596:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800a59a:	49b1      	ldr	r1, [pc, #708]	; (800a860 <tcp_write+0x32c>)
 800a59c:	48b1      	ldr	r0, [pc, #708]	; (800a864 <tcp_write+0x330>)
 800a59e:	f001 fff4 	bl	800c58a <iprintf>
 800a5a2:	f06f 030f 	mvn.w	r3, #15
 800a5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a8:	e194      	b.n	800a8d4 <tcp_write+0x3a0>
         last_unsent = last_unsent->next);
 800a5aa:	46bb      	mov	fp, r7
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a5ac:	f8db 7000 	ldr.w	r7, [fp]
 800a5b0:	2f00      	cmp	r7, #0
 800a5b2:	d1fa      	bne.n	800a5aa <tcp_write+0x76>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a5b4:	f89b 300a 	ldrb.w	r3, [fp, #10]
 800a5b8:	f013 0f01 	tst.w	r3, #1
 800a5bc:	d051      	beq.n	800a662 <tcp_write+0x12e>
 800a5be:	2404      	movs	r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a5c0:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800a5c4:	4423      	add	r3, r4
 800a5c6:	9a05      	ldr	r2, [sp, #20]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	db4c      	blt.n	800a666 <tcp_write+0x132>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a5cc:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800a5d0:	441c      	add	r4, r3
 800a5d2:	b2a4      	uxth	r4, r4
 800a5d4:	9b05      	ldr	r3, [sp, #20]
 800a5d6:	1b1c      	subs	r4, r3, r4
 800a5d8:	b2a3      	uxth	r3, r4
 800a5da:	461a      	mov	r2, r3
 800a5dc:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 800a5de:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800a5e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5e4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d04e      	beq.n	800a68a <tcp_write+0x156>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d342      	bcc.n	800a676 <tcp_write+0x142>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a5f0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a5f4:	459a      	cmp	sl, r3
 800a5f6:	d946      	bls.n	800a686 <tcp_write+0x152>
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a5fc:	4282      	cmp	r2, r0
 800a5fe:	bfa8      	it	ge
 800a600:	4602      	movge	r2, r0
 800a602:	b292      	uxth	r2, r2
 800a604:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 800a606:	1a9b      	subs	r3, r3, r2
 800a608:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800a60c:	1a83      	subs	r3, r0, r2
 800a60e:	b29b      	uxth	r3, r3
 800a610:	930b      	str	r3, [sp, #44]	; 0x2c
      seg = last_unsent;
 800a612:	46d8      	mov	r8, fp
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a614:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a618:	b14b      	cbz	r3, 800a62e <tcp_write+0xfa>
 800a61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a61c:	4553      	cmp	r3, sl
 800a61e:	d006      	beq.n	800a62e <tcp_write+0xfa>
 800a620:	4b8e      	ldr	r3, [pc, #568]	; (800a85c <tcp_write+0x328>)
 800a622:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a626:	4990      	ldr	r1, [pc, #576]	; (800a868 <tcp_write+0x334>)
 800a628:	488e      	ldr	r0, [pc, #568]	; (800a864 <tcp_write+0x330>)
 800a62a:	f001 ffae 	bl	800c58a <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a62e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a630:	4552      	cmp	r2, sl
 800a632:	f080 808f 	bcs.w	800a754 <tcp_write+0x220>
 800a636:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a638:	2900      	cmp	r1, #0
 800a63a:	f000 8094 	beq.w	800a766 <tcp_write+0x232>
 800a63e:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 8093 	beq.w	800a76e <tcp_write+0x23a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a648:	ebaa 0502 	sub.w	r5, sl, r2
 800a64c:	428d      	cmp	r5, r1
 800a64e:	bfa8      	it	ge
 800a650:	460d      	movge	r5, r1
 800a652:	b2ac      	uxth	r4, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a654:	9b06      	ldr	r3, [sp, #24]
 800a656:	f013 0f01 	tst.w	r3, #1
 800a65a:	d118      	bne.n	800a68e <tcp_write+0x15a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a65c:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a660:	e038      	b.n	800a6d4 <tcp_write+0x1a0>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a662:	2400      	movs	r4, #0
 800a664:	e7ac      	b.n	800a5c0 <tcp_write+0x8c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a666:	4b7d      	ldr	r3, [pc, #500]	; (800a85c <tcp_write+0x328>)
 800a668:	f240 12c7 	movw	r2, #455	; 0x1c7
 800a66c:	497f      	ldr	r1, [pc, #508]	; (800a86c <tcp_write+0x338>)
 800a66e:	487d      	ldr	r0, [pc, #500]	; (800a864 <tcp_write+0x330>)
 800a670:	f001 ff8b 	bl	800c58a <iprintf>
 800a674:	e7aa      	b.n	800a5cc <tcp_write+0x98>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a676:	4b79      	ldr	r3, [pc, #484]	; (800a85c <tcp_write+0x328>)
 800a678:	f240 12d9 	movw	r2, #473	; 0x1d9
 800a67c:	497c      	ldr	r1, [pc, #496]	; (800a870 <tcp_write+0x33c>)
 800a67e:	4879      	ldr	r0, [pc, #484]	; (800a864 <tcp_write+0x330>)
 800a680:	f001 ff83 	bl	800c58a <iprintf>
 800a684:	e7b4      	b.n	800a5f0 <tcp_write+0xbc>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a686:	4652      	mov	r2, sl
 800a688:	e7b7      	b.n	800a5fa <tcp_write+0xc6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a68a:	46b8      	mov	r8, r7
 800a68c:	e7c2      	b.n	800a614 <tcp_write+0xe0>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a68e:	2301      	movs	r3, #1
 800a690:	9302      	str	r3, [sp, #8]
 800a692:	9b06      	ldr	r3, [sp, #24]
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	f8cd 9000 	str.w	r9, [sp]
 800a69a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800a69e:	460a      	mov	r2, r1
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	2004      	movs	r0, #4
 800a6a4:	f7ff fdfe 	bl	800a2a4 <tcp_pbuf_prealloc>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	900c      	str	r0, [sp, #48]	; 0x30
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	f000 80f0 	beq.w	800a892 <tcp_write+0x35e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a6b2:	4622      	mov	r2, r4
 800a6b4:	9908      	ldr	r1, [sp, #32]
 800a6b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6b8:	4401      	add	r1, r0
 800a6ba:	461d      	mov	r5, r3
 800a6bc:	6858      	ldr	r0, [r3, #4]
 800a6be:	f002 f87a 	bl	800c7b6 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f7fd f838 	bl	8007738 <pbuf_clen>
 800a6c8:	4406      	add	r6, r0
 800a6ca:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6d0:	e01a      	b.n	800a708 <tcp_write+0x1d4>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	2a00      	cmp	r2, #0
 800a6d8:	d1fb      	bne.n	800a6d2 <tcp_write+0x19e>
 800a6da:	920c      	str	r2, [sp, #48]	; 0x30
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a6dc:	7b1a      	ldrb	r2, [r3, #12]
 800a6de:	2a01      	cmp	r2, #1
 800a6e0:	d017      	beq.n	800a712 <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	2004      	movs	r0, #4
 800a6e8:	f7fc fecc 	bl	8007484 <pbuf_alloc>
 800a6ec:	900c      	str	r0, [sp, #48]	; 0x30
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f000 80cf 	beq.w	800a892 <tcp_write+0x35e>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800a6f4:	9b08      	ldr	r3, [sp, #32]
 800a6f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6f8:	440b      	add	r3, r1
 800a6fa:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800a6fc:	f7fd f81c 	bl	8007738 <pbuf_clen>
 800a700:	4406      	add	r6, r0
 800a702:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800a704:	2300      	movs	r3, #0
 800a706:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800a708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a70a:	441c      	add	r4, r3
 800a70c:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 800a70e:	46d8      	mov	r8, fp
 800a710:	e024      	b.n	800a75c <tcp_write+0x228>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	895b      	ldrh	r3, [r3, #10]
 800a716:	4413      	add	r3, r2
 800a718:	9a08      	ldr	r2, [sp, #32]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d1e1      	bne.n	800a6e2 <tcp_write+0x1ae>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a720:	b90b      	cbnz	r3, 800a726 <tcp_write+0x1f2>
          extendlen = seglen;
 800a722:	940b      	str	r4, [sp, #44]	; 0x2c
 800a724:	e7f0      	b.n	800a708 <tcp_write+0x1d4>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a726:	4b4d      	ldr	r3, [pc, #308]	; (800a85c <tcp_write+0x328>)
 800a728:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800a72c:	4951      	ldr	r1, [pc, #324]	; (800a874 <tcp_write+0x340>)
 800a72e:	484d      	ldr	r0, [pc, #308]	; (800a864 <tcp_write+0x330>)
 800a730:	f001 ff2b 	bl	800c58a <iprintf>
          extendlen = seglen;
 800a734:	940b      	str	r4, [sp, #44]	; 0x2c
 800a736:	e7e7      	b.n	800a708 <tcp_write+0x1d4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a738:	4b48      	ldr	r3, [pc, #288]	; (800a85c <tcp_write+0x328>)
 800a73a:	f240 2225 	movw	r2, #549	; 0x225
 800a73e:	494e      	ldr	r1, [pc, #312]	; (800a878 <tcp_write+0x344>)
 800a740:	4848      	ldr	r0, [pc, #288]	; (800a864 <tcp_write+0x330>)
 800a742:	f001 ff22 	bl	800c58a <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a746:	46d8      	mov	r8, fp
  u16_t extendlen = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800a74c:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
 800a74e:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 800a750:	930c      	str	r3, [sp, #48]	; 0x30
 800a752:	e003      	b.n	800a75c <tcp_write+0x228>
 800a754:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  u16_t extendlen = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	930b      	str	r3, [sp, #44]	; 0x2c
  struct pbuf *concat_p = NULL;
 800a75a:	930c      	str	r3, [sp, #48]	; 0x30
      queue = seg;
 800a75c:	2700      	movs	r7, #0
 800a75e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800a762:	46bb      	mov	fp, r7
 800a764:	e060      	b.n	800a828 <tcp_write+0x2f4>
 800a766:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 800a768:	2300      	movs	r3, #0
 800a76a:	930c      	str	r3, [sp, #48]	; 0x30
 800a76c:	e7f6      	b.n	800a75c <tcp_write+0x228>
  u16_t extendlen = 0;
 800a76e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a770:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 800a772:	2300      	movs	r3, #0
 800a774:	930c      	str	r3, [sp, #48]	; 0x30
 800a776:	e7f1      	b.n	800a75c <tcp_write+0x228>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a778:	fab7 f387 	clz	r3, r7
 800a77c:	095b      	lsrs	r3, r3, #5
 800a77e:	9302      	str	r3, [sp, #8]
 800a780:	9b06      	ldr	r3, [sp, #24]
 800a782:	9301      	str	r3, [sp, #4]
 800a784:	f8cd 9000 	str.w	r9, [sp]
 800a788:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800a78c:	9a05      	ldr	r2, [sp, #20]
 800a78e:	4629      	mov	r1, r5
 800a790:	2000      	movs	r0, #0
 800a792:	f7ff fd87 	bl	800a2a4 <tcp_pbuf_prealloc>
 800a796:	4680      	mov	r8, r0
 800a798:	2800      	cmp	r0, #0
 800a79a:	d07a      	beq.n	800a892 <tcp_write+0x35e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a79c:	8943      	ldrh	r3, [r0, #10]
 800a79e:	429d      	cmp	r5, r3
 800a7a0:	d807      	bhi.n	800a7b2 <tcp_write+0x27e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800a7a2:	462a      	mov	r2, r5
 800a7a4:	9b08      	ldr	r3, [sp, #32]
 800a7a6:	1919      	adds	r1, r3, r4
 800a7a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a7ac:	f002 f803 	bl	800c7b6 <memcpy>
 800a7b0:	e01d      	b.n	800a7ee <tcp_write+0x2ba>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a7b2:	4b2a      	ldr	r3, [pc, #168]	; (800a85c <tcp_write+0x328>)
 800a7b4:	f240 2241 	movw	r2, #577	; 0x241
 800a7b8:	4930      	ldr	r1, [pc, #192]	; (800a87c <tcp_write+0x348>)
 800a7ba:	482a      	ldr	r0, [pc, #168]	; (800a864 <tcp_write+0x330>)
 800a7bc:	f001 fee5 	bl	800c58a <iprintf>
 800a7c0:	e7ef      	b.n	800a7a2 <tcp_write+0x26e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	f7fc fe5c 	bl	8007484 <pbuf_alloc>
 800a7cc:	9007      	str	r0, [sp, #28]
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d05f      	beq.n	800a892 <tcp_write+0x35e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800a7d2:	9b08      	ldr	r3, [sp, #32]
 800a7d4:	4423      	add	r3, r4
 800a7d6:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a7d8:	2200      	movs	r2, #0
 800a7da:	4611      	mov	r1, r2
 800a7dc:	4610      	mov	r0, r2
 800a7de:	f7fc fe51 	bl	8007484 <pbuf_alloc>
 800a7e2:	4680      	mov	r8, r0
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d04d      	beq.n	800a884 <tcp_write+0x350>
      pbuf_cat(p/*header*/, p2/*data*/);
 800a7e8:	9907      	ldr	r1, [sp, #28]
 800a7ea:	f7fc ffcb 	bl	8007784 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800a7ee:	4640      	mov	r0, r8
 800a7f0:	f7fc ffa2 	bl	8007738 <pbuf_clen>
 800a7f4:	4406      	add	r6, r0
 800a7f6:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a7f8:	2e10      	cmp	r6, #16
 800a7fa:	d847      	bhi.n	800a88c <tcp_write+0x358>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a7fc:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 800a800:	2200      	movs	r2, #0
 800a802:	9200      	str	r2, [sp, #0]
 800a804:	4423      	add	r3, r4
 800a806:	4641      	mov	r1, r8
 800a808:	4648      	mov	r0, r9
 800a80a:	f7ff fd8b 	bl	800a324 <tcp_create_segment>
 800a80e:	4680      	mov	r8, r0
 800a810:	2800      	cmp	r0, #0
 800a812:	d03e      	beq.n	800a892 <tcp_write+0x35e>
    if (queue == NULL) {
 800a814:	2f00      	cmp	r7, #0
 800a816:	d069      	beq.n	800a8ec <tcp_write+0x3b8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a818:	f1bb 0f00 	cmp.w	fp, #0
 800a81c:	d05e      	beq.n	800a8dc <tcp_write+0x3a8>
      prev_seg->next = seg;
 800a81e:	f8cb 8000 	str.w	r8, [fp]
    pos += seglen;
 800a822:	442c      	add	r4, r5
 800a824:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 800a826:	46c3      	mov	fp, r8
  while (pos < len) {
 800a828:	4554      	cmp	r4, sl
 800a82a:	d261      	bcs.n	800a8f0 <tcp_write+0x3bc>
    u16_t left = len - pos;
 800a82c:	ebaa 0504 	sub.w	r5, sl, r4
 800a830:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 800a832:	9b05      	ldr	r3, [sp, #20]
 800a834:	429d      	cmp	r5, r3
 800a836:	bf28      	it	cs
 800a838:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a83a:	9b06      	ldr	r3, [sp, #24]
 800a83c:	f013 0f01 	tst.w	r3, #1
 800a840:	d19a      	bne.n	800a778 <tcp_write+0x244>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a842:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0bb      	beq.n	800a7c2 <tcp_write+0x28e>
 800a84a:	4b04      	ldr	r3, [pc, #16]	; (800a85c <tcp_write+0x328>)
 800a84c:	f240 224b 	movw	r2, #587	; 0x24b
 800a850:	490b      	ldr	r1, [pc, #44]	; (800a880 <tcp_write+0x34c>)
 800a852:	4804      	ldr	r0, [pc, #16]	; (800a864 <tcp_write+0x330>)
 800a854:	f001 fe99 	bl	800c58a <iprintf>
 800a858:	e7b3      	b.n	800a7c2 <tcp_write+0x28e>
 800a85a:	bf00      	nop
 800a85c:	0800e62c 	.word	0x0800e62c
 800a860:	0800e450 	.word	0x0800e450
 800a864:	0800c8d0 	.word	0x0800c8d0
 800a868:	0800e4bc 	.word	0x0800e4bc
 800a86c:	0800e484 	.word	0x0800e484
 800a870:	0800e49c 	.word	0x0800e49c
 800a874:	0800e4dc 	.word	0x0800e4dc
 800a878:	0800e508 	.word	0x0800e508
 800a87c:	0800e538 	.word	0x0800e538
 800a880:	0800e578 	.word	0x0800e578
        pbuf_free(p2);
 800a884:	9807      	ldr	r0, [sp, #28]
 800a886:	f7fc fd91 	bl	80073ac <pbuf_free>
        goto memerr;
 800a88a:	e002      	b.n	800a892 <tcp_write+0x35e>
      pbuf_free(p);
 800a88c:	4640      	mov	r0, r8
 800a88e:	f7fc fd8d 	bl	80073ac <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800a892:	f899 301a 	ldrb.w	r3, [r9, #26]
 800a896:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a89a:	f889 301a 	strb.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800a89e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8a0:	b113      	cbz	r3, 800a8a8 <tcp_write+0x374>
    pbuf_free(concat_p);
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fc fd82 	bl	80073ac <pbuf_free>
  if (queue != NULL) {
 800a8a8:	b117      	cbz	r7, 800a8b0 <tcp_write+0x37c>
    tcp_segs_free(queue);
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	f7fd fa6f 	bl	8007d8e <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800a8b0:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 80c6 	beq.w	800aa46 <tcp_write+0x512>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a8ba:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f040 80c5 	bne.w	800aa4e <tcp_write+0x51a>
 800a8c4:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f000 80b1 	beq.w	800aa30 <tcp_write+0x4fc>
  return ERR_MEM;
 800a8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d2:	9309      	str	r3, [sp, #36]	; 0x24
}
 800a8d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8d6:	b011      	add	sp, #68	; 0x44
 800a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a8dc:	4b5e      	ldr	r3, [pc, #376]	; (800aa58 <tcp_write+0x524>)
 800a8de:	f240 2285 	movw	r2, #645	; 0x285
 800a8e2:	495e      	ldr	r1, [pc, #376]	; (800aa5c <tcp_write+0x528>)
 800a8e4:	485e      	ldr	r0, [pc, #376]	; (800aa60 <tcp_write+0x52c>)
 800a8e6:	f001 fe50 	bl	800c58a <iprintf>
 800a8ea:	e798      	b.n	800a81e <tcp_write+0x2ea>
      queue = seg;
 800a8ec:	4607      	mov	r7, r0
 800a8ee:	e798      	b.n	800a822 <tcp_write+0x2ee>
 800a8f0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  if (oversize_used > 0) {
 800a8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f6:	b1e3      	cbz	r3, 800a932 <tcp_write+0x3fe>
    for (p = last_unsent->p; p; p = p->next) {
 800a8f8:	f8db 4004 	ldr.w	r4, [fp, #4]
 800a8fc:	461d      	mov	r5, r3
 800a8fe:	e000      	b.n	800a902 <tcp_write+0x3ce>
 800a900:	6824      	ldr	r4, [r4, #0]
 800a902:	b184      	cbz	r4, 800a926 <tcp_write+0x3f2>
      p->tot_len += oversize_used;
 800a904:	8923      	ldrh	r3, [r4, #8]
 800a906:	442b      	add	r3, r5
 800a908:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1f7      	bne.n	800a900 <tcp_write+0x3cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a910:	6860      	ldr	r0, [r4, #4]
 800a912:	8963      	ldrh	r3, [r4, #10]
 800a914:	462a      	mov	r2, r5
 800a916:	9908      	ldr	r1, [sp, #32]
 800a918:	4418      	add	r0, r3
 800a91a:	f001 ff4c 	bl	800c7b6 <memcpy>
        p->len += oversize_used;
 800a91e:	8963      	ldrh	r3, [r4, #10]
 800a920:	442b      	add	r3, r5
 800a922:	8163      	strh	r3, [r4, #10]
 800a924:	e7ec      	b.n	800a900 <tcp_write+0x3cc>
    last_unsent->len += oversize_used;
 800a926:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800a92a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a92c:	441a      	add	r2, r3
 800a92e:	f8ab 2008 	strh.w	r2, [fp, #8]
  pcb->unsent_oversize = oversize;
 800a932:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a936:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (concat_p != NULL) {
 800a93a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d03f      	beq.n	800a9c0 <tcp_write+0x48c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a940:	f1bb 0f00 	cmp.w	fp, #0
 800a944:	d034      	beq.n	800a9b0 <tcp_write+0x47c>
    pbuf_cat(last_unsent->p, concat_p);
 800a946:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a948:	4621      	mov	r1, r4
 800a94a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800a94e:	f7fc ff19 	bl	8007784 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a952:	8923      	ldrh	r3, [r4, #8]
 800a954:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 800a958:	4413      	add	r3, r2
 800a95a:	f8ab 3008 	strh.w	r3, [fp, #8]
  if (last_unsent == NULL) {
 800a95e:	f1bb 0f00 	cmp.w	fp, #0
 800a962:	d056      	beq.n	800aa12 <tcp_write+0x4de>
    last_unsent->next = queue;
 800a964:	f8cb 7000 	str.w	r7, [fp]
  pcb->snd_lbb += len;
 800a968:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 800a96c:	4453      	add	r3, sl
 800a96e:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
  pcb->snd_buf -= len;
 800a972:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
 800a976:	eba3 0a0a 	sub.w	sl, r3, sl
 800a97a:	f8a9 a060 	strh.w	sl, [r9, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800a97e:	f8a9 6062 	strh.w	r6, [r9, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800a982:	b11e      	cbz	r6, 800a98c <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a984:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d045      	beq.n	800aa18 <tcp_write+0x4e4>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800a98c:	f1b8 0f00 	cmp.w	r8, #0
 800a990:	d0a0      	beq.n	800a8d4 <tcp_write+0x3a0>
 800a992:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800a996:	2c00      	cmp	r4, #0
 800a998:	d09c      	beq.n	800a8d4 <tcp_write+0x3a0>
 800a99a:	9b06      	ldr	r3, [sp, #24]
 800a99c:	f013 0f02 	tst.w	r3, #2
 800a9a0:	d198      	bne.n	800a8d4 <tcp_write+0x3a0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a9a2:	89a5      	ldrh	r5, [r4, #12]
 800a9a4:	2008      	movs	r0, #8
 800a9a6:	f7fa fce5 	bl	8005374 <lwip_htons>
 800a9aa:	4328      	orrs	r0, r5
 800a9ac:	81a0      	strh	r0, [r4, #12]
 800a9ae:	e791      	b.n	800a8d4 <tcp_write+0x3a0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a9b0:	4b29      	ldr	r3, [pc, #164]	; (800aa58 <tcp_write+0x524>)
 800a9b2:	f240 22bb 	movw	r2, #699	; 0x2bb
 800a9b6:	492b      	ldr	r1, [pc, #172]	; (800aa64 <tcp_write+0x530>)
 800a9b8:	4829      	ldr	r0, [pc, #164]	; (800aa60 <tcp_write+0x52c>)
 800a9ba:	f001 fde6 	bl	800c58a <iprintf>
 800a9be:	e7c2      	b.n	800a946 <tcp_write+0x412>
  } else if (extendlen > 0) {
 800a9c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d0cb      	beq.n	800a95e <tcp_write+0x42a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a9c6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ca:	d006      	beq.n	800a9da <tcp_write+0x4a6>
 800a9cc:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a9d0:	b11b      	cbz	r3, 800a9da <tcp_write+0x4a6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a9d2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a9d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a9d8:	e00b      	b.n	800a9f2 <tcp_write+0x4be>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a9da:	4b1f      	ldr	r3, [pc, #124]	; (800aa58 <tcp_write+0x524>)
 800a9dc:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a9e0:	4921      	ldr	r1, [pc, #132]	; (800aa68 <tcp_write+0x534>)
 800a9e2:	481f      	ldr	r0, [pc, #124]	; (800aa60 <tcp_write+0x52c>)
 800a9e4:	f001 fdd1 	bl	800c58a <iprintf>
 800a9e8:	e7f3      	b.n	800a9d2 <tcp_write+0x49e>
      p->tot_len += extendlen;
 800a9ea:	891a      	ldrh	r2, [r3, #8]
 800a9ec:	4402      	add	r2, r0
 800a9ee:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	6819      	ldr	r1, [r3, #0]
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	d1f8      	bne.n	800a9ea <tcp_write+0x4b6>
    p->tot_len += extendlen;
 800a9f8:	891a      	ldrh	r2, [r3, #8]
 800a9fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a9fc:	4402      	add	r2, r0
 800a9fe:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800aa00:	895a      	ldrh	r2, [r3, #10]
 800aa02:	4402      	add	r2, r0
 800aa04:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800aa06:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800aa0a:	4403      	add	r3, r0
 800aa0c:	f8ab 3008 	strh.w	r3, [fp, #8]
 800aa10:	e7a5      	b.n	800a95e <tcp_write+0x42a>
    pcb->unsent = queue;
 800aa12:	f8c9 7068 	str.w	r7, [r9, #104]	; 0x68
 800aa16:	e7a7      	b.n	800a968 <tcp_write+0x434>
    LWIP_ASSERT("tcp_write: valid queue length",
 800aa18:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1b5      	bne.n	800a98c <tcp_write+0x458>
 800aa20:	4b0d      	ldr	r3, [pc, #52]	; (800aa58 <tcp_write+0x524>)
 800aa22:	f240 22ed 	movw	r2, #749	; 0x2ed
 800aa26:	4911      	ldr	r1, [pc, #68]	; (800aa6c <tcp_write+0x538>)
 800aa28:	480d      	ldr	r0, [pc, #52]	; (800aa60 <tcp_write+0x52c>)
 800aa2a:	f001 fdae 	bl	800c58a <iprintf>
 800aa2e:	e7ad      	b.n	800a98c <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800aa30:	4b09      	ldr	r3, [pc, #36]	; (800aa58 <tcp_write+0x524>)
 800aa32:	f240 3202 	movw	r2, #770	; 0x302
 800aa36:	490d      	ldr	r1, [pc, #52]	; (800aa6c <tcp_write+0x538>)
 800aa38:	4809      	ldr	r0, [pc, #36]	; (800aa60 <tcp_write+0x52c>)
 800aa3a:	f001 fda6 	bl	800c58a <iprintf>
  return ERR_MEM;
 800aa3e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa42:	9309      	str	r3, [sp, #36]	; 0x24
 800aa44:	e746      	b.n	800a8d4 <tcp_write+0x3a0>
 800aa46:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4c:	e742      	b.n	800a8d4 <tcp_write+0x3a0>
 800aa4e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa52:	9309      	str	r3, [sp, #36]	; 0x24
 800aa54:	e73e      	b.n	800a8d4 <tcp_write+0x3a0>
 800aa56:	bf00      	nop
 800aa58:	0800e62c 	.word	0x0800e62c
 800aa5c:	0800e588 	.word	0x0800e588
 800aa60:	0800c8d0 	.word	0x0800c8d0
 800aa64:	0800e59c 	.word	0x0800e59c
 800aa68:	0800e5d4 	.word	0x0800e5d4
 800aa6c:	0800e60c 	.word	0x0800e60c

0800aa70 <tcp_enqueue_flags>:
{
 800aa70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa74:	b083      	sub	sp, #12
 800aa76:	4604      	mov	r4, r0
 800aa78:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800aa7a:	f011 0703 	ands.w	r7, r1, #3
 800aa7e:	d030      	beq.n	800aae2 <tcp_enqueue_flags+0x72>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800aa80:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800aa84:	2b0f      	cmp	r3, #15
 800aa86:	d902      	bls.n	800aa8e <tcp_enqueue_flags+0x1e>
 800aa88:	f015 0f01 	tst.w	r5, #1
 800aa8c:	d031      	beq.n	800aaf2 <tcp_enqueue_flags+0x82>
  if (flags & TCP_SYN) {
 800aa8e:	f015 0f02 	tst.w	r5, #2
 800aa92:	d135      	bne.n	800ab00 <tcp_enqueue_flags+0x90>
  u8_t optflags = 0;
 800aa94:	f04f 0900 	mov.w	r9, #0
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800aa98:	f1b9 0f00 	cmp.w	r9, #0
 800aa9c:	d033      	beq.n	800ab06 <tcp_enqueue_flags+0x96>
 800aa9e:	2604      	movs	r6, #4
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800aaa0:	b2b6      	uxth	r6, r6
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	f7fc fcec 	bl	8007484 <pbuf_alloc>
 800aaac:	4680      	mov	r8, r0
 800aaae:	b360      	cbz	r0, 800ab0a <tcp_enqueue_flags+0x9a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800aab0:	8943      	ldrh	r3, [r0, #10]
 800aab2:	429e      	cmp	r6, r3
 800aab4:	d830      	bhi.n	800ab18 <tcp_enqueue_flags+0xa8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800aab6:	f8cd 9000 	str.w	r9, [sp]
 800aaba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aabc:	462a      	mov	r2, r5
 800aabe:	4641      	mov	r1, r8
 800aac0:	4620      	mov	r0, r4
 800aac2:	f7ff fc2f 	bl	800a324 <tcp_create_segment>
 800aac6:	4606      	mov	r6, r0
 800aac8:	b370      	cbz	r0, 800ab28 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800aaca:	68c3      	ldr	r3, [r0, #12]
 800aacc:	f013 0f03 	tst.w	r3, #3
 800aad0:	d131      	bne.n	800ab36 <tcp_enqueue_flags+0xc6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800aad2:	8933      	ldrh	r3, [r6, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d136      	bne.n	800ab46 <tcp_enqueue_flags+0xd6>
  if (pcb->unsent == NULL) {
 800aad8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800aada:	2a00      	cmp	r2, #0
 800aadc:	d13c      	bne.n	800ab58 <tcp_enqueue_flags+0xe8>
    pcb->unsent = seg;
 800aade:	66a6      	str	r6, [r4, #104]	; 0x68
 800aae0:	e03e      	b.n	800ab60 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800aae2:	4b36      	ldr	r3, [pc, #216]	; (800abbc <tcp_enqueue_flags+0x14c>)
 800aae4:	f240 321b 	movw	r2, #795	; 0x31b
 800aae8:	4935      	ldr	r1, [pc, #212]	; (800abc0 <tcp_enqueue_flags+0x150>)
 800aaea:	4836      	ldr	r0, [pc, #216]	; (800abc4 <tcp_enqueue_flags+0x154>)
 800aaec:	f001 fd4d 	bl	800c58a <iprintf>
 800aaf0:	e7c6      	b.n	800aa80 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 800aaf2:	7ea3      	ldrb	r3, [r4, #26]
 800aaf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aaf8:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800aafa:	f04f 30ff 	mov.w	r0, #4294967295
 800aafe:	e04a      	b.n	800ab96 <tcp_enqueue_flags+0x126>
    optflags = TF_SEG_OPTS_MSS;
 800ab00:	f04f 0901 	mov.w	r9, #1
 800ab04:	e7c8      	b.n	800aa98 <tcp_enqueue_flags+0x28>
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ab06:	2600      	movs	r6, #0
 800ab08:	e7ca      	b.n	800aaa0 <tcp_enqueue_flags+0x30>
    pcb->flags |= TF_NAGLEMEMERR;
 800ab0a:	7ea3      	ldrb	r3, [r4, #26]
 800ab0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab10:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800ab12:	f04f 30ff 	mov.w	r0, #4294967295
 800ab16:	e03e      	b.n	800ab96 <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ab18:	4b28      	ldr	r3, [pc, #160]	; (800abbc <tcp_enqueue_flags+0x14c>)
 800ab1a:	f240 3241 	movw	r2, #833	; 0x341
 800ab1e:	492a      	ldr	r1, [pc, #168]	; (800abc8 <tcp_enqueue_flags+0x158>)
 800ab20:	4828      	ldr	r0, [pc, #160]	; (800abc4 <tcp_enqueue_flags+0x154>)
 800ab22:	f001 fd32 	bl	800c58a <iprintf>
 800ab26:	e7c6      	b.n	800aab6 <tcp_enqueue_flags+0x46>
    pcb->flags |= TF_NAGLEMEMERR;
 800ab28:	7ea3      	ldrb	r3, [r4, #26]
 800ab2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab2e:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800ab30:	f04f 30ff 	mov.w	r0, #4294967295
 800ab34:	e02f      	b.n	800ab96 <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ab36:	4b21      	ldr	r3, [pc, #132]	; (800abbc <tcp_enqueue_flags+0x14c>)
 800ab38:	f240 3249 	movw	r2, #841	; 0x349
 800ab3c:	4923      	ldr	r1, [pc, #140]	; (800abcc <tcp_enqueue_flags+0x15c>)
 800ab3e:	4821      	ldr	r0, [pc, #132]	; (800abc4 <tcp_enqueue_flags+0x154>)
 800ab40:	f001 fd23 	bl	800c58a <iprintf>
 800ab44:	e7c5      	b.n	800aad2 <tcp_enqueue_flags+0x62>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ab46:	4b1d      	ldr	r3, [pc, #116]	; (800abbc <tcp_enqueue_flags+0x14c>)
 800ab48:	f240 324a 	movw	r2, #842	; 0x34a
 800ab4c:	4920      	ldr	r1, [pc, #128]	; (800abd0 <tcp_enqueue_flags+0x160>)
 800ab4e:	481d      	ldr	r0, [pc, #116]	; (800abc4 <tcp_enqueue_flags+0x154>)
 800ab50:	f001 fd1b 	bl	800c58a <iprintf>
 800ab54:	e7c0      	b.n	800aad8 <tcp_enqueue_flags+0x68>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ab56:	461a      	mov	r2, r3
 800ab58:	6813      	ldr	r3, [r2, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1fb      	bne.n	800ab56 <tcp_enqueue_flags+0xe6>
    useg->next = seg;
 800ab5e:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ab66:	b117      	cbz	r7, 800ab6e <tcp_enqueue_flags+0xfe>
    pcb->snd_lbb++;
 800ab68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800ab6e:	f015 0f01 	tst.w	r5, #1
 800ab72:	d003      	beq.n	800ab7c <tcp_enqueue_flags+0x10c>
    pcb->flags |= TF_FIN;
 800ab74:	7ea3      	ldrb	r3, [r4, #26]
 800ab76:	f043 0320 	orr.w	r3, r3, #32
 800ab7a:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ab7c:	6870      	ldr	r0, [r6, #4]
 800ab7e:	f7fc fddb 	bl	8007738 <pbuf_clen>
 800ab82:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ab86:	4418      	add	r0, r3
 800ab88:	b280      	uxth	r0, r0
 800ab8a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800ab8e:	b190      	cbz	r0, 800abb6 <tcp_enqueue_flags+0x146>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ab90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ab92:	b11b      	cbz	r3, 800ab9c <tcp_enqueue_flags+0x12c>
  return ERR_OK;
 800ab94:	2000      	movs	r0, #0
}
 800ab96:	b003      	add	sp, #12
 800ab98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ab9c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ab9e:	b10b      	cbz	r3, 800aba4 <tcp_enqueue_flags+0x134>
  return ERR_OK;
 800aba0:	2000      	movs	r0, #0
 800aba2:	e7f8      	b.n	800ab96 <tcp_enqueue_flags+0x126>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800aba4:	4b05      	ldr	r3, [pc, #20]	; (800abbc <tcp_enqueue_flags+0x14c>)
 800aba6:	f240 326d 	movw	r2, #877	; 0x36d
 800abaa:	490a      	ldr	r1, [pc, #40]	; (800abd4 <tcp_enqueue_flags+0x164>)
 800abac:	4805      	ldr	r0, [pc, #20]	; (800abc4 <tcp_enqueue_flags+0x154>)
 800abae:	f001 fcec 	bl	800c58a <iprintf>
  return ERR_OK;
 800abb2:	2000      	movs	r0, #0
 800abb4:	e7ef      	b.n	800ab96 <tcp_enqueue_flags+0x126>
 800abb6:	2000      	movs	r0, #0
 800abb8:	e7ed      	b.n	800ab96 <tcp_enqueue_flags+0x126>
 800abba:	bf00      	nop
 800abbc:	0800e62c 	.word	0x0800e62c
 800abc0:	0800e2cc 	.word	0x0800e2cc
 800abc4:	0800c8d0 	.word	0x0800c8d0
 800abc8:	0800e324 	.word	0x0800e324
 800abcc:	0800e360 	.word	0x0800e360
 800abd0:	0800e378 	.word	0x0800e378
 800abd4:	0800e3a4 	.word	0x0800e3a4

0800abd8 <tcp_send_fin>:
{
 800abd8:	b570      	push	{r4, r5, r6, lr}
 800abda:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800abdc:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800abde:	b90c      	cbnz	r4, 800abe4 <tcp_send_fin+0xc>
 800abe0:	e00a      	b.n	800abf8 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
 800abe2:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1fb      	bne.n	800abe2 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800abea:	68e3      	ldr	r3, [r4, #12]
 800abec:	8998      	ldrh	r0, [r3, #12]
 800abee:	f7fa fbc1 	bl	8005374 <lwip_htons>
 800abf2:	f010 0f07 	tst.w	r0, #7
 800abf6:	d004      	beq.n	800ac02 <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800abf8:	2101      	movs	r1, #1
 800abfa:	4628      	mov	r0, r5
 800abfc:	f7ff ff38 	bl	800aa70 <tcp_enqueue_flags>
}
 800ac00:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ac02:	68e6      	ldr	r6, [r4, #12]
 800ac04:	89b4      	ldrh	r4, [r6, #12]
 800ac06:	2001      	movs	r0, #1
 800ac08:	f7fa fbb4 	bl	8005374 <lwip_htons>
 800ac0c:	4320      	orrs	r0, r4
 800ac0e:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 800ac10:	7eab      	ldrb	r3, [r5, #26]
 800ac12:	f043 0320 	orr.w	r3, r3, #32
 800ac16:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 800ac18:	2000      	movs	r0, #0
 800ac1a:	bd70      	pop	{r4, r5, r6, pc}

0800ac1c <tcp_send_empty_ack>:
{
 800ac1c:	b570      	push	{r4, r5, r6, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ac22:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800ac24:	f7fa fba9 	bl	800537a <lwip_htonl>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f7ff fbd8 	bl	800a3e4 <tcp_output_alloc_header>
  if (p == NULL) {
 800ac34:	b1e0      	cbz	r0, 800ac70 <tcp_send_empty_ack+0x54>
 800ac36:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ac38:	1d25      	adds	r5, r4, #4
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	f7fb f944 	bl	8005ec8 <ip4_route>
  if (netif == NULL) {
 800ac40:	b1e8      	cbz	r0, 800ac7e <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800ac42:	7aa3      	ldrb	r3, [r4, #10]
 800ac44:	7a61      	ldrb	r1, [r4, #9]
 800ac46:	9002      	str	r0, [sp, #8]
 800ac48:	2206      	movs	r2, #6
 800ac4a:	9201      	str	r2, [sp, #4]
 800ac4c:	9100      	str	r1, [sp, #0]
 800ac4e:	462a      	mov	r2, r5
 800ac50:	4621      	mov	r1, r4
 800ac52:	4630      	mov	r0, r6
 800ac54:	f7fb fade 	bl	8006214 <ip4_output_if>
 800ac58:	4605      	mov	r5, r0
  pbuf_free(p);
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f7fc fba6 	bl	80073ac <pbuf_free>
  if (err != ERR_OK) {
 800ac60:	b985      	cbnz	r5, 800ac84 <tcp_send_empty_ack+0x68>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ac62:	7ea3      	ldrb	r3, [r4, #26]
 800ac64:	f023 0303 	bic.w	r3, r3, #3
 800ac68:	76a3      	strb	r3, [r4, #26]
}
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	b004      	add	sp, #16
 800ac6e:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800ac70:	7ea3      	ldrb	r3, [r4, #26]
 800ac72:	f043 0303 	orr.w	r3, r3, #3
 800ac76:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 800ac78:	f06f 0501 	mvn.w	r5, #1
 800ac7c:	e7f5      	b.n	800ac6a <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 800ac7e:	f06f 0503 	mvn.w	r5, #3
 800ac82:	e7ea      	b.n	800ac5a <tcp_send_empty_ack+0x3e>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800ac84:	7ea3      	ldrb	r3, [r4, #26]
 800ac86:	f043 0303 	orr.w	r3, r3, #3
 800ac8a:	76a3      	strb	r3, [r4, #26]
 800ac8c:	e7ed      	b.n	800ac6a <tcp_send_empty_ack+0x4e>
	...

0800ac90 <tcp_output>:
{
 800ac90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac94:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ac96:	7d03      	ldrb	r3, [r0, #20]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d01e      	beq.n	800acda <tcp_output+0x4a>
  if (tcp_input_pcb == pcb) {
 800ac9c:	4ba5      	ldr	r3, [pc, #660]	; (800af34 <tcp_output+0x2a4>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	429d      	cmp	r5, r3
 800aca2:	f000 813e 	beq.w	800af22 <tcp_output+0x292>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800aca6:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800acaa:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 800acae:	42bb      	cmp	r3, r7
 800acb0:	d200      	bcs.n	800acb4 <tcp_output+0x24>
 800acb2:	461f      	mov	r7, r3
  seg = pcb->unsent;
 800acb4:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 800acb6:	7eab      	ldrb	r3, [r5, #26]
 800acb8:	f013 0f02 	tst.w	r3, #2
 800acbc:	d00a      	beq.n	800acd4 <tcp_output+0x44>
 800acbe:	b1a4      	cbz	r4, 800acea <tcp_output+0x5a>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800acc0:	68e3      	ldr	r3, [r4, #12]
 800acc2:	6858      	ldr	r0, [r3, #4]
 800acc4:	f7fa fb59 	bl	800537a <lwip_htonl>
 800acc8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800acca:	1ac3      	subs	r3, r0, r3
 800accc:	8920      	ldrh	r0, [r4, #8]
 800acce:	4403      	add	r3, r0
     (seg == NULL ||
 800acd0:	429f      	cmp	r7, r3
 800acd2:	d30a      	bcc.n	800acea <tcp_output+0x5a>
  useg = pcb->unacked;
 800acd4:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 800acd6:	b976      	cbnz	r6, 800acf6 <tcp_output+0x66>
 800acd8:	e010      	b.n	800acfc <tcp_output+0x6c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800acda:	4b97      	ldr	r3, [pc, #604]	; (800af38 <tcp_output+0x2a8>)
 800acdc:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800ace0:	4996      	ldr	r1, [pc, #600]	; (800af3c <tcp_output+0x2ac>)
 800ace2:	4897      	ldr	r0, [pc, #604]	; (800af40 <tcp_output+0x2b0>)
 800ace4:	f001 fc51 	bl	800c58a <iprintf>
 800ace8:	e7d8      	b.n	800ac9c <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 800acea:	4628      	mov	r0, r5
 800acec:	f7ff ff96 	bl	800ac1c <tcp_send_empty_ack>
 800acf0:	4603      	mov	r3, r0
 800acf2:	e03f      	b.n	800ad74 <tcp_output+0xe4>
    for (; useg->next != NULL; useg = useg->next);
 800acf4:	461e      	mov	r6, r3
 800acf6:	6833      	ldr	r3, [r6, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1fb      	bne.n	800acf4 <tcp_output+0x64>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800acfc:	1d28      	adds	r0, r5, #4
 800acfe:	f7fb f8e3 	bl	8005ec8 <ip4_route>
  if (netif == NULL) {
 800ad02:	4680      	mov	r8, r0
 800ad04:	2800      	cmp	r0, #0
 800ad06:	f000 810e 	beq.w	800af26 <tcp_output+0x296>
  if (ip_addr_isany(&pcb->local_ip)) {
 800ad0a:	b10d      	cbz	r5, 800ad10 <tcp_output+0x80>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b933      	cbnz	r3, 800ad1e <tcp_output+0x8e>
    if (local_ip == NULL) {
 800ad10:	f118 0f04 	cmn.w	r8, #4
 800ad14:	f000 810a 	beq.w	800af2c <tcp_output+0x29c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ad18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad1c:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 800ad1e:	2c00      	cmp	r4, #0
 800ad20:	f000 80a2 	beq.w	800ae68 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800ad24:	68e3      	ldr	r3, [r4, #12]
 800ad26:	6858      	ldr	r0, [r3, #4]
 800ad28:	f7fa fb27 	bl	800537a <lwip_htonl>
 800ad2c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ad2e:	1ac3      	subs	r3, r0, r3
 800ad30:	8920      	ldrh	r0, [r4, #8]
 800ad32:	4403      	add	r3, r0
  if (seg != NULL &&
 800ad34:	429f      	cmp	r7, r3
 800ad36:	f080 8097 	bcs.w	800ae68 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800ad3a:	2f00      	cmp	r7, #0
 800ad3c:	f000 8094 	beq.w	800ae68 <tcp_output+0x1d8>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800ad40:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800ad44:	429f      	cmp	r7, r3
 800ad46:	f040 808f 	bne.w	800ae68 <tcp_output+0x1d8>
 800ad4a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f040 808b 	bne.w	800ae68 <tcp_output+0x1d8>
    if (pcb->persist_backoff == 0) {
 800ad52:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 800ad56:	b923      	cbnz	r3, 800ad62 <tcp_output+0xd2>
      pcb->persist_cnt = 0;
 800ad58:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
  if (pcb->unsent == NULL) {
 800ad62:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 80d9 	beq.w	800af1c <tcp_output+0x28c>
  pcb->flags &= ~TF_NAGLEMEMERR;
 800ad6a:	7eab      	ldrb	r3, [r5, #26]
 800ad6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad70:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("RST not expected here!",
 800ad7a:	4b6f      	ldr	r3, [pc, #444]	; (800af38 <tcp_output+0x2a8>)
 800ad7c:	f240 4246 	movw	r2, #1094	; 0x446
 800ad80:	4970      	ldr	r1, [pc, #448]	; (800af44 <tcp_output+0x2b4>)
 800ad82:	486f      	ldr	r0, [pc, #444]	; (800af40 <tcp_output+0x2b0>)
 800ad84:	f001 fc01 	bl	800c58a <iprintf>
 800ad88:	e084      	b.n	800ae94 <tcp_output+0x204>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ad8a:	891a      	ldrh	r2, [r3, #8]
 800ad8c:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	f080 8091 	bcs.w	800aeb6 <tcp_output+0x226>
 800ad94:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f000 808e 	beq.w	800aeba <tcp_output+0x22a>
 800ad9e:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800ada2:	2b0f      	cmp	r3, #15
 800ada4:	f240 808b 	bls.w	800aebe <tcp_output+0x22e>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e002      	b.n	800adb2 <tcp_output+0x122>
 800adac:	2301      	movs	r3, #1
 800adae:	e000      	b.n	800adb2 <tcp_output+0x122>
 800adb0:	2301      	movs	r3, #1
 800adb2:	b91b      	cbnz	r3, 800adbc <tcp_output+0x12c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800adb4:	7eab      	ldrb	r3, [r5, #26]
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800adb6:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800adba:	d0d2      	beq.n	800ad62 <tcp_output+0xd2>
    if (pcb->state != SYN_SENT) {
 800adbc:	7d2b      	ldrb	r3, [r5, #20]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d00a      	beq.n	800add8 <tcp_output+0x148>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800adc2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800adc6:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 800adca:	2010      	movs	r0, #16
 800adcc:	f7fa fad2 	bl	8005374 <lwip_htons>
 800add0:	ea49 0000 	orr.w	r0, r9, r0
 800add4:	f8aa 000c 	strh.w	r0, [sl, #12]
    err = tcp_output_segment(seg, pcb, netif);
 800add8:	4642      	mov	r2, r8
 800adda:	4629      	mov	r1, r5
 800addc:	4620      	mov	r0, r4
 800adde:	f7ff fb4b 	bl	800a478 <tcp_output_segment>
    if (err != ERR_OK) {
 800ade2:	4603      	mov	r3, r0
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d16c      	bne.n	800aec2 <tcp_output+0x232>
    pcb->unsent = seg->next;
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800adec:	7d2b      	ldrb	r3, [r5, #20]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d003      	beq.n	800adfa <tcp_output+0x16a>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800adf2:	7eab      	ldrb	r3, [r5, #26]
 800adf4:	f023 0303 	bic.w	r3, r3, #3
 800adf8:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800adfa:	68e3      	ldr	r3, [r4, #12]
 800adfc:	6858      	ldr	r0, [r3, #4]
 800adfe:	f7fa fabc 	bl	800537a <lwip_htonl>
 800ae02:	4681      	mov	r9, r0
 800ae04:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 800ae08:	68e3      	ldr	r3, [r4, #12]
 800ae0a:	8998      	ldrh	r0, [r3, #12]
 800ae0c:	f7fa fab2 	bl	8005374 <lwip_htons>
 800ae10:	f010 0f03 	tst.w	r0, #3
 800ae14:	d05a      	beq.n	800aecc <tcp_output+0x23c>
 800ae16:	2001      	movs	r0, #1
 800ae18:	4450      	add	r0, sl
 800ae1a:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ae1c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ae1e:	1a1b      	subs	r3, r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	db55      	blt.n	800aed0 <tcp_output+0x240>
    if (TCP_TCPLEN(seg) > 0) {
 800ae24:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800ae28:	68e3      	ldr	r3, [r4, #12]
 800ae2a:	8998      	ldrh	r0, [r3, #12]
 800ae2c:	f7fa faa2 	bl	8005374 <lwip_htons>
 800ae30:	f010 0f03 	tst.w	r0, #3
 800ae34:	d04e      	beq.n	800aed4 <tcp_output+0x244>
 800ae36:	2301      	movs	r3, #1
 800ae38:	eb13 0f09 	cmn.w	r3, r9
 800ae3c:	d06a      	beq.n	800af14 <tcp_output+0x284>
      seg->next = NULL;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800ae42:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d047      	beq.n	800aed8 <tcp_output+0x248>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ae48:	68e3      	ldr	r3, [r4, #12]
 800ae4a:	6858      	ldr	r0, [r3, #4]
 800ae4c:	f7fa fa95 	bl	800537a <lwip_htonl>
 800ae50:	4681      	mov	r9, r0
 800ae52:	68f3      	ldr	r3, [r6, #12]
 800ae54:	6858      	ldr	r0, [r3, #4]
 800ae56:	f7fa fa90 	bl	800537a <lwip_htonl>
 800ae5a:	eba9 0000 	sub.w	r0, r9, r0
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	db3d      	blt.n	800aede <tcp_output+0x24e>
          useg->next = seg;
 800ae62:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 800ae64:	4626      	mov	r6, r4
    seg = pcb->unsent;
 800ae66:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 800ae68:	2c00      	cmp	r4, #0
 800ae6a:	f43f af7a 	beq.w	800ad62 <tcp_output+0xd2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ae6e:	68e3      	ldr	r3, [r4, #12]
 800ae70:	6858      	ldr	r0, [r3, #4]
 800ae72:	f7fa fa82 	bl	800537a <lwip_htonl>
 800ae76:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ae78:	1ac0      	subs	r0, r0, r3
 800ae7a:	8923      	ldrh	r3, [r4, #8]
 800ae7c:	4418      	add	r0, r3
  while (seg != NULL &&
 800ae7e:	4287      	cmp	r7, r0
 800ae80:	f4ff af6f 	bcc.w	800ad62 <tcp_output+0xd2>
    LWIP_ASSERT("RST not expected here!",
 800ae84:	68e3      	ldr	r3, [r4, #12]
 800ae86:	8998      	ldrh	r0, [r3, #12]
 800ae88:	f7fa fa74 	bl	8005374 <lwip_htons>
 800ae8c:	f010 0f04 	tst.w	r0, #4
 800ae90:	f47f af73 	bne.w	800ad7a <tcp_output+0xea>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ae94:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d088      	beq.n	800adac <tcp_output+0x11c>
 800ae9a:	7eab      	ldrb	r3, [r5, #26]
 800ae9c:	f013 0f44 	tst.w	r3, #68	; 0x44
 800aea0:	d186      	bne.n	800adb0 <tcp_output+0x120>
 800aea2:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f43f af75 	beq.w	800ad94 <tcp_output+0x104>
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	2a00      	cmp	r2, #0
 800aeae:	f43f af6c 	beq.w	800ad8a <tcp_output+0xfa>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e77d      	b.n	800adb2 <tcp_output+0x122>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e77b      	b.n	800adb2 <tcp_output+0x122>
 800aeba:	2301      	movs	r3, #1
 800aebc:	e779      	b.n	800adb2 <tcp_output+0x122>
 800aebe:	2300      	movs	r3, #0
 800aec0:	e777      	b.n	800adb2 <tcp_output+0x122>
      pcb->flags |= TF_NAGLEMEMERR;
 800aec2:	7eaa      	ldrb	r2, [r5, #26]
 800aec4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aec8:	76aa      	strb	r2, [r5, #26]
      return err;
 800aeca:	e753      	b.n	800ad74 <tcp_output+0xe4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800aecc:	2000      	movs	r0, #0
 800aece:	e7a3      	b.n	800ae18 <tcp_output+0x188>
      pcb->snd_nxt = snd_nxt;
 800aed0:	64e8      	str	r0, [r5, #76]	; 0x4c
 800aed2:	e7a7      	b.n	800ae24 <tcp_output+0x194>
    if (TCP_TCPLEN(seg) > 0) {
 800aed4:	2300      	movs	r3, #0
 800aed6:	e7af      	b.n	800ae38 <tcp_output+0x1a8>
        pcb->unacked = seg;
 800aed8:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 800aeda:	4626      	mov	r6, r4
 800aedc:	e7c3      	b.n	800ae66 <tcp_output+0x1d6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800aede:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 800aee2:	e001      	b.n	800aee8 <tcp_output+0x258>
              cur_seg = &((*cur_seg)->next );
 800aee4:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 800aee8:	f8da 3000 	ldr.w	r3, [sl]
 800aeec:	b163      	cbz	r3, 800af08 <tcp_output+0x278>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	6858      	ldr	r0, [r3, #4]
 800aef2:	f7fa fa42 	bl	800537a <lwip_htonl>
 800aef6:	4681      	mov	r9, r0
 800aef8:	68e3      	ldr	r3, [r4, #12]
 800aefa:	6858      	ldr	r0, [r3, #4]
 800aefc:	f7fa fa3d 	bl	800537a <lwip_htonl>
 800af00:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 800af04:	2800      	cmp	r0, #0
 800af06:	dbed      	blt.n	800aee4 <tcp_output+0x254>
          seg->next = (*cur_seg);
 800af08:	f8da 3000 	ldr.w	r3, [sl]
 800af0c:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800af0e:	f8ca 4000 	str.w	r4, [sl]
 800af12:	e7a8      	b.n	800ae66 <tcp_output+0x1d6>
      tcp_seg_free(seg);
 800af14:	4620      	mov	r0, r4
 800af16:	f7fc ff2d 	bl	8007d74 <tcp_seg_free>
 800af1a:	e7a4      	b.n	800ae66 <tcp_output+0x1d6>
    pcb->unsent_oversize = 0;
 800af1c:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 800af20:	e723      	b.n	800ad6a <tcp_output+0xda>
    return ERR_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	e726      	b.n	800ad74 <tcp_output+0xe4>
    return ERR_RTE;
 800af26:	f06f 0303 	mvn.w	r3, #3
 800af2a:	e723      	b.n	800ad74 <tcp_output+0xe4>
      return ERR_RTE;
 800af2c:	f06f 0303 	mvn.w	r3, #3
 800af30:	e720      	b.n	800ad74 <tcp_output+0xe4>
 800af32:	bf00      	nop
 800af34:	20007248 	.word	0x20007248
 800af38:	0800e62c 	.word	0x0800e62c
 800af3c:	0800e3cc 	.word	0x0800e3cc
 800af40:	0800c8d0 	.word	0x0800c8d0
 800af44:	0800e3f4 	.word	0x0800e3f4

0800af48 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800af48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af4c:	b085      	sub	sp, #20
 800af4e:	4680      	mov	r8, r0
 800af50:	460f      	mov	r7, r1
 800af52:	4691      	mov	r9, r2
 800af54:	461e      	mov	r6, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800af56:	2200      	movs	r2, #0
 800af58:	2114      	movs	r1, #20
 800af5a:	2001      	movs	r0, #1
 800af5c:	f7fc fa92 	bl	8007484 <pbuf_alloc>
  if (p == NULL) {
 800af60:	b3a8      	cbz	r0, 800afce <tcp_rst+0x86>
 800af62:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800af64:	8943      	ldrh	r3, [r0, #10]
 800af66:	2b13      	cmp	r3, #19
 800af68:	d934      	bls.n	800afd4 <tcp_rst+0x8c>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800af6a:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800af6c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 800af70:	f7fa fa00 	bl	8005374 <lwip_htons>
 800af74:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800af76:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800af7a:	f7fa f9fb 	bl	8005374 <lwip_htons>
 800af7e:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800af80:	4640      	mov	r0, r8
 800af82:	f7fa f9fa 	bl	800537a <lwip_htonl>
 800af86:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800af88:	4638      	mov	r0, r7
 800af8a:	f7fa f9f6 	bl	800537a <lwip_htonl>
 800af8e:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800af90:	f245 0014 	movw	r0, #20500	; 0x5014
 800af94:	f7fa f9ee 	bl	8005374 <lwip_htons>
 800af98:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800af9a:	2300      	movs	r3, #0
 800af9c:	2208      	movs	r2, #8
 800af9e:	73a2      	strb	r2, [r4, #14]
 800afa0:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800afa2:	7423      	strb	r3, [r4, #16]
 800afa4:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 800afa6:	74a3      	strb	r3, [r4, #18]
 800afa8:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800afaa:	4630      	mov	r0, r6
 800afac:	f7fa ff8c 	bl	8005ec8 <ip4_route>
  if (netif != NULL) {
 800afb0:	b150      	cbz	r0, 800afc8 <tcp_rst+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800afb2:	9002      	str	r0, [sp, #8]
 800afb4:	2306      	movs	r3, #6
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	2300      	movs	r3, #0
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	23ff      	movs	r3, #255	; 0xff
 800afbe:	4632      	mov	r2, r6
 800afc0:	4649      	mov	r1, r9
 800afc2:	4628      	mov	r0, r5
 800afc4:	f7fb f926 	bl	8006214 <ip4_output_if>
  }
  pbuf_free(p);
 800afc8:	4628      	mov	r0, r5
 800afca:	f7fc f9ef 	bl	80073ac <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800afce:	b005      	add	sp, #20
 800afd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800afd4:	4b03      	ldr	r3, [pc, #12]	; (800afe4 <tcp_rst+0x9c>)
 800afd6:	f240 524d 	movw	r2, #1357	; 0x54d
 800afda:	4903      	ldr	r1, [pc, #12]	; (800afe8 <tcp_rst+0xa0>)
 800afdc:	4803      	ldr	r0, [pc, #12]	; (800afec <tcp_rst+0xa4>)
 800afde:	f001 fad4 	bl	800c58a <iprintf>
 800afe2:	e7c2      	b.n	800af6a <tcp_rst+0x22>
 800afe4:	0800e62c 	.word	0x0800e62c
 800afe8:	0800e40c 	.word	0x0800e40c
 800afec:	0800c8d0 	.word	0x0800c8d0

0800aff0 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800aff0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800aff2:	b10a      	cbz	r2, 800aff8 <tcp_rexmit_rto+0x8>
{
 800aff4:	b508      	push	{r3, lr}
 800aff6:	e001      	b.n	800affc <tcp_rexmit_rto+0xc>
 800aff8:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800affa:	461a      	mov	r2, r3
 800affc:	6813      	ldr	r3, [r2, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1fb      	bne.n	800affa <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b002:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800b004:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b006:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b008:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b00a:	2300      	movs	r3, #0
 800b00c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b00e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800b012:	2bff      	cmp	r3, #255	; 0xff
 800b014:	d002      	beq.n	800b01c <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
 800b016:	3301      	adds	r3, #1
 800b018:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b01c:	2300      	movs	r3, #0
 800b01e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800b020:	f7ff fe36 	bl	800ac90 <tcp_output>
 800b024:	bd08      	pop	{r3, pc}

0800b026 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800b028:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 800b02a:	b316      	cbz	r6, 800b072 <tcp_rexmit+0x4c>
 800b02c:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800b02e:	6833      	ldr	r3, [r6, #0]
 800b030:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800b032:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 800b036:	e000      	b.n	800b03a <tcp_rexmit+0x14>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800b038:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800b03a:	682b      	ldr	r3, [r5, #0]
 800b03c:	b15b      	cbz	r3, 800b056 <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	6858      	ldr	r0, [r3, #4]
 800b042:	f7fa f99a 	bl	800537a <lwip_htonl>
 800b046:	4604      	mov	r4, r0
 800b048:	68f3      	ldr	r3, [r6, #12]
 800b04a:	6858      	ldr	r0, [r3, #4]
 800b04c:	f7fa f995 	bl	800537a <lwip_htonl>
 800b050:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 800b052:	2800      	cmp	r0, #0
 800b054:	dbf0      	blt.n	800b038 <tcp_rexmit+0x12>
  }
  seg->next = *cur_seg;
 800b056:	682b      	ldr	r3, [r5, #0]
 800b058:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800b05a:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b05c:	6833      	ldr	r3, [r6, #0]
 800b05e:	b14b      	cbz	r3, 800b074 <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b060:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b064:	2bff      	cmp	r3, #255	; 0xff
 800b066:	d002      	beq.n	800b06e <tcp_rexmit+0x48>
    ++pcb->nrtx;
 800b068:	3301      	adds	r3, #1
 800b06a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	637b      	str	r3, [r7, #52]	; 0x34
 800b072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800b074:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b078:	e7f2      	b.n	800b060 <tcp_rexmit+0x3a>

0800b07a <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b07a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b07c:	b11b      	cbz	r3, 800b086 <tcp_rexmit_fast+0xc>
 800b07e:	7e83      	ldrb	r3, [r0, #26]
 800b080:	f013 0f04 	tst.w	r3, #4
 800b084:	d000      	beq.n	800b088 <tcp_rexmit_fast+0xe>
 800b086:	4770      	bx	lr
{
 800b088:	b510      	push	{r4, lr}
 800b08a:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800b08c:	f7ff ffcb 	bl	800b026 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b090:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800b094:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800b098:	4293      	cmp	r3, r2
 800b09a:	d218      	bcs.n	800b0ce <tcp_rexmit_fast+0x54>
 800b09c:	085a      	lsrs	r2, r3, #1
 800b09e:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800b0a2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b0a4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800b0a8:	d202      	bcs.n	800b0b0 <tcp_rexmit_fast+0x36>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800b0aa:	005a      	lsls	r2, r3, #1
 800b0ac:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b0b0:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800b0b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b0b8:	fa12 f383 	uxtah	r3, r2, r3
 800b0bc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800b0c0:	7ea3      	ldrb	r3, [r4, #26]
 800b0c2:	f043 0304 	orr.w	r3, r3, #4
 800b0c6:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	8623      	strh	r3, [r4, #48]	; 0x30
 800b0cc:	bd10      	pop	{r4, pc}
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b0ce:	0852      	lsrs	r2, r2, #1
 800b0d0:	e7e5      	b.n	800b09e <tcp_rexmit_fast+0x24>

0800b0d2 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b0d2:	b570      	push	{r4, r5, r6, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b0d8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800b0da:	3801      	subs	r0, #1
 800b0dc:	f7fa f94d 	bl	800537a <lwip_htonl>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f7ff f97c 	bl	800a3e4 <tcp_output_alloc_header>
  if (p == NULL) {
 800b0ec:	b1d0      	cbz	r0, 800b124 <tcp_keepalive+0x52>
 800b0ee:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b0f0:	1d26      	adds	r6, r4, #4
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f7fa fee8 	bl	8005ec8 <ip4_route>
  if (netif == NULL) {
 800b0f8:	b188      	cbz	r0, 800b11e <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800b0fa:	7aa3      	ldrb	r3, [r4, #10]
 800b0fc:	9002      	str	r0, [sp, #8]
 800b0fe:	2206      	movs	r2, #6
 800b100:	9201      	str	r2, [sp, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	9200      	str	r2, [sp, #0]
 800b106:	4632      	mov	r2, r6
 800b108:	4621      	mov	r1, r4
 800b10a:	4628      	mov	r0, r5
 800b10c:	f7fb f882 	bl	8006214 <ip4_output_if>
 800b110:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800b112:	4628      	mov	r0, r5
 800b114:	f7fc f94a 	bl	80073ac <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800b118:	4620      	mov	r0, r4
 800b11a:	b004      	add	sp, #16
 800b11c:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800b11e:	f06f 0403 	mvn.w	r4, #3
 800b122:	e7f6      	b.n	800b112 <tcp_keepalive+0x40>
    return ERR_MEM;
 800b124:	f04f 34ff 	mov.w	r4, #4294967295
 800b128:	e7f6      	b.n	800b118 <tcp_keepalive+0x46>

0800b12a <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b12e:	b084      	sub	sp, #16
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800b130:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 800b132:	b175      	cbz	r5, 800b152 <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 800b134:	2d00      	cmp	r5, #0
 800b136:	d05d      	beq.n	800b1f4 <tcp_zero_window_probe+0xca>
 800b138:	4604      	mov	r4, r0
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b13a:	68eb      	ldr	r3, [r5, #12]
 800b13c:	8998      	ldrh	r0, [r3, #12]
 800b13e:	f7fa f919 	bl	8005374 <lwip_htons>
 800b142:	f010 0f01 	tst.w	r0, #1
 800b146:	d006      	beq.n	800b156 <tcp_zero_window_probe+0x2c>
 800b148:	892b      	ldrh	r3, [r5, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d040      	beq.n	800b1d0 <tcp_zero_window_probe+0xa6>
 800b14e:	2200      	movs	r2, #0
 800b150:	e002      	b.n	800b158 <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 800b152:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800b154:	e7ee      	b.n	800b134 <tcp_zero_window_probe+0xa>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b156:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b158:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800b15c:	68eb      	ldr	r3, [r5, #12]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f082 0201 	eor.w	r2, r2, #1
 800b164:	2100      	movs	r1, #0
 800b166:	4620      	mov	r0, r4
 800b168:	f7ff f93c 	bl	800a3e4 <tcp_output_alloc_header>
  if (p == NULL) {
 800b16c:	4607      	mov	r7, r0
 800b16e:	2800      	cmp	r0, #0
 800b170:	d042      	beq.n	800b1f8 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b172:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800b176:	b36e      	cbz	r6, 800b1d4 <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b178:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 800b17c:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800b180:	b2b6      	uxth	r6, r6
 800b182:	2011      	movs	r0, #17
 800b184:	f7fa f8f6 	bl	8005374 <lwip_htons>
 800b188:	4330      	orrs	r0, r6
 800b18a:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b18e:	68eb      	ldr	r3, [r5, #12]
 800b190:	6858      	ldr	r0, [r3, #4]
 800b192:	f7fa f8f2 	bl	800537a <lwip_htonl>
 800b196:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b198:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b19a:	1a1b      	subs	r3, r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	db24      	blt.n	800b1ea <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b1a0:	1d25      	adds	r5, r4, #4
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f7fa fe90 	bl	8005ec8 <ip4_route>
  if (netif == NULL) {
 800b1a8:	b308      	cbz	r0, 800b1ee <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b1aa:	7aa3      	ldrb	r3, [r4, #10]
 800b1ac:	9002      	str	r0, [sp, #8]
 800b1ae:	2206      	movs	r2, #6
 800b1b0:	9201      	str	r2, [sp, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	9200      	str	r2, [sp, #0]
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	f7fb f82a 	bl	8006214 <ip4_output_if>
 800b1c0:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	f7fc f8f2 	bl	80073ac <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	b004      	add	sp, #16
 800b1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	e7c1      	b.n	800b158 <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b1d4:	6868      	ldr	r0, [r5, #4]
 800b1d6:	8903      	ldrh	r3, [r0, #8]
 800b1d8:	892a      	ldrh	r2, [r5, #8]
 800b1da:	1a9b      	subs	r3, r3, r2
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f108 0114 	add.w	r1, r8, #20
 800b1e4:	f7fc fba4 	bl	8007930 <pbuf_copy_partial>
 800b1e8:	e7d1      	b.n	800b18e <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 800b1ea:	64e0      	str	r0, [r4, #76]	; 0x4c
 800b1ec:	e7d8      	b.n	800b1a0 <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 800b1ee:	f06f 0403 	mvn.w	r4, #3
 800b1f2:	e7e6      	b.n	800b1c2 <tcp_zero_window_probe+0x98>
    return ERR_OK;
 800b1f4:	2400      	movs	r4, #0
 800b1f6:	e7e7      	b.n	800b1c8 <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 800b1f8:	f04f 34ff 	mov.w	r4, #4294967295
 800b1fc:	e7e4      	b.n	800b1c8 <tcp_zero_window_probe+0x9e>
	...

0800b200 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800b200:	b508      	push	{r3, lr}
  u32_t diff;
  if (next_timeout == NULL) {
 800b202:	4b0a      	ldr	r3, [pc, #40]	; (800b22c <sys_timeouts_sleeptime+0x2c>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	b15b      	cbz	r3, 800b220 <sys_timeouts_sleeptime+0x20>
    return 0xffffffff;
  }
  diff = sys_now() - timeouts_last_time;
 800b208:	f000 fe3a 	bl	800be80 <sys_now>
 800b20c:	4b08      	ldr	r3, [pc, #32]	; (800b230 <sys_timeouts_sleeptime+0x30>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	1ac0      	subs	r0, r0, r3
  if (diff > next_timeout->time) {
 800b212:	4b06      	ldr	r3, [pc, #24]	; (800b22c <sys_timeouts_sleeptime+0x2c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	4298      	cmp	r0, r3
 800b21a:	d804      	bhi.n	800b226 <sys_timeouts_sleeptime+0x26>
    return 0;
  } else {
    return next_timeout->time - diff;
 800b21c:	1a18      	subs	r0, r3, r0
 800b21e:	bd08      	pop	{r3, pc}
    return 0xffffffff;
 800b220:	f04f 30ff 	mov.w	r0, #4294967295
 800b224:	bd08      	pop	{r3, pc}
    return 0;
 800b226:	2000      	movs	r0, #0
  }
}
 800b228:	bd08      	pop	{r3, pc}
 800b22a:	bf00      	nop
 800b22c:	20003f08 	.word	0x20003f08
 800b230:	20003f10 	.word	0x20003f10

0800b234 <sys_check_timeouts>:
{
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (next_timeout) {
 800b236:	4b18      	ldr	r3, [pc, #96]	; (800b298 <sys_check_timeouts+0x64>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	b363      	cbz	r3, 800b296 <sys_check_timeouts+0x62>
    now = sys_now();
 800b23c:	f000 fe20 	bl	800be80 <sys_now>
    diff = now - timeouts_last_time;
 800b240:	4b16      	ldr	r3, [pc, #88]	; (800b29c <sys_check_timeouts+0x68>)
 800b242:	681c      	ldr	r4, [r3, #0]
 800b244:	1b04      	subs	r4, r0, r4
 800b246:	e005      	b.n	800b254 <sys_check_timeouts+0x20>
      had_one = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	e002      	b.n	800b252 <sys_check_timeouts+0x1e>
 800b24c:	2300      	movs	r3, #0
 800b24e:	e000      	b.n	800b252 <sys_check_timeouts+0x1e>
        had_one = 1;
 800b250:	2301      	movs	r3, #1
    } while (had_one);
 800b252:	b303      	cbz	r3, 800b296 <sys_check_timeouts+0x62>
      tmptimeout = next_timeout;
 800b254:	4b10      	ldr	r3, [pc, #64]	; (800b298 <sys_check_timeouts+0x64>)
 800b256:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b258:	2900      	cmp	r1, #0
 800b25a:	d0f5      	beq.n	800b248 <sys_check_timeouts+0x14>
 800b25c:	684b      	ldr	r3, [r1, #4]
 800b25e:	429c      	cmp	r4, r3
 800b260:	d3f4      	bcc.n	800b24c <sys_check_timeouts+0x18>
        timeouts_last_time += tmptimeout->time;
 800b262:	480e      	ldr	r0, [pc, #56]	; (800b29c <sys_check_timeouts+0x68>)
 800b264:	6802      	ldr	r2, [r0, #0]
 800b266:	441a      	add	r2, r3
 800b268:	6002      	str	r2, [r0, #0]
        diff -= tmptimeout->time;
 800b26a:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
 800b26c:	680a      	ldr	r2, [r1, #0]
 800b26e:	4b0a      	ldr	r3, [pc, #40]	; (800b298 <sys_check_timeouts+0x64>)
 800b270:	601a      	str	r2, [r3, #0]
        handler = tmptimeout->h;
 800b272:	688d      	ldr	r5, [r1, #8]
        arg = tmptimeout->arg;
 800b274:	68cf      	ldr	r7, [r1, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b276:	200a      	movs	r0, #10
 800b278:	f7fb fec2 	bl	8007000 <memp_free>
        if (handler != NULL) {
 800b27c:	2d00      	cmp	r5, #0
 800b27e:	d0e7      	beq.n	800b250 <sys_check_timeouts+0x1c>
          LOCK_TCPIP_CORE();
 800b280:	4e07      	ldr	r6, [pc, #28]	; (800b2a0 <sys_check_timeouts+0x6c>)
 800b282:	4630      	mov	r0, r6
 800b284:	f000 fbd9 	bl	800ba3a <sys_mutex_lock>
          handler(arg);
 800b288:	4638      	mov	r0, r7
 800b28a:	47a8      	blx	r5
          UNLOCK_TCPIP_CORE();
 800b28c:	4630      	mov	r0, r6
 800b28e:	f000 fbdb 	bl	800ba48 <sys_mutex_unlock>
        had_one = 1;
 800b292:	2301      	movs	r3, #1
 800b294:	e7dd      	b.n	800b252 <sys_check_timeouts+0x1e>
 800b296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b298:	20003f08 	.word	0x20003f08
 800b29c:	20003f10 	.word	0x20003f10
 800b2a0:	20003f60 	.word	0x20003f60

0800b2a4 <sys_timeout>:
{
 800b2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	4688      	mov	r8, r1
 800b2ac:	4617      	mov	r7, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b2ae:	200a      	movs	r0, #10
 800b2b0:	f7fb fe8c 	bl	8006fcc <memp_malloc>
  if (timeout == NULL) {
 800b2b4:	b308      	cbz	r0, 800b2fa <sys_timeout+0x56>
 800b2b6:	4604      	mov	r4, r0
  now = sys_now();
 800b2b8:	f000 fde2 	bl	800be80 <sys_now>
  if (next_timeout == NULL) {
 800b2bc:	4b23      	ldr	r3, [pc, #140]	; (800b34c <sys_timeout+0xa8>)
 800b2be:	681e      	ldr	r6, [r3, #0]
 800b2c0:	b31e      	cbz	r6, 800b30a <sys_timeout+0x66>
    diff = now - timeouts_last_time;
 800b2c2:	4b23      	ldr	r3, [pc, #140]	; (800b350 <sys_timeout+0xac>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	1ac0      	subs	r0, r0, r3
  timeout->next = NULL;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	6023      	str	r3, [r4, #0]
  timeout->h = handler;
 800b2cc:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 800b2d0:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 800b2d2:	4428      	add	r0, r5
 800b2d4:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800b2d6:	b1e6      	cbz	r6, 800b312 <sys_timeout+0x6e>
  if (next_timeout->time > msecs) {
 800b2d8:	6873      	ldr	r3, [r6, #4]
 800b2da:	429d      	cmp	r5, r3
 800b2dc:	d31d      	bcc.n	800b31a <sys_timeout+0x76>
 800b2de:	4632      	mov	r2, r6
    for (t = next_timeout; t != NULL; t = t->next) {
 800b2e0:	2a00      	cmp	r2, #0
 800b2e2:	d030      	beq.n	800b346 <sys_timeout+0xa2>
      timeout->time -= t->time;
 800b2e4:	6851      	ldr	r1, [r2, #4]
 800b2e6:	6863      	ldr	r3, [r4, #4]
 800b2e8:	1a5b      	subs	r3, r3, r1
 800b2ea:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800b2ec:	6811      	ldr	r1, [r2, #0]
 800b2ee:	b1d9      	cbz	r1, 800b328 <sys_timeout+0x84>
 800b2f0:	6848      	ldr	r0, [r1, #4]
 800b2f2:	4283      	cmp	r3, r0
 800b2f4:	d318      	bcc.n	800b328 <sys_timeout+0x84>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b2f6:	460a      	mov	r2, r1
 800b2f8:	e7f2      	b.n	800b2e0 <sys_timeout+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b2fa:	4b16      	ldr	r3, [pc, #88]	; (800b354 <sys_timeout+0xb0>)
 800b2fc:	22d4      	movs	r2, #212	; 0xd4
 800b2fe:	4916      	ldr	r1, [pc, #88]	; (800b358 <sys_timeout+0xb4>)
 800b300:	4816      	ldr	r0, [pc, #88]	; (800b35c <sys_timeout+0xb8>)
 800b302:	f001 f942 	bl	800c58a <iprintf>
 800b306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeouts_last_time = now;
 800b30a:	4b11      	ldr	r3, [pc, #68]	; (800b350 <sys_timeout+0xac>)
 800b30c:	6018      	str	r0, [r3, #0]
    diff = 0;
 800b30e:	2000      	movs	r0, #0
 800b310:	e7da      	b.n	800b2c8 <sys_timeout+0x24>
    next_timeout = timeout;
 800b312:	4b0e      	ldr	r3, [pc, #56]	; (800b34c <sys_timeout+0xa8>)
 800b314:	601c      	str	r4, [r3, #0]
    return;
 800b316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
 800b31a:	1b5d      	subs	r5, r3, r5
 800b31c:	6075      	str	r5, [r6, #4]
    timeout->next = next_timeout;
 800b31e:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 800b320:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <sys_timeout+0xa8>)
 800b322:	601c      	str	r4, [r3, #0]
 800b324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (t->next != NULL) {
 800b328:	b139      	cbz	r1, 800b33a <sys_timeout+0x96>
          t->next->time -= timeout->time;
 800b32a:	6848      	ldr	r0, [r1, #4]
 800b32c:	1ac3      	subs	r3, r0, r3
 800b32e:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 800b330:	6813      	ldr	r3, [r2, #0]
 800b332:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800b334:	6014      	str	r4, [r2, #0]
        break;
 800b336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if (timeout->time > msecs) {
 800b33a:	429d      	cmp	r5, r3
 800b33c:	d2f8      	bcs.n	800b330 <sys_timeout+0x8c>
          timeout->time = msecs + next_timeout->time;
 800b33e:	6873      	ldr	r3, [r6, #4]
 800b340:	441d      	add	r5, r3
 800b342:	6065      	str	r5, [r4, #4]
 800b344:	e7f4      	b.n	800b330 <sys_timeout+0x8c>
 800b346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34a:	bf00      	nop
 800b34c:	20003f08 	.word	0x20003f08
 800b350:	20003f10 	.word	0x20003f10
 800b354:	0800e6e8 	.word	0x0800e6e8
 800b358:	0800e71c 	.word	0x0800e71c
 800b35c:	0800c8d0 	.word	0x0800c8d0

0800b360 <tcp_timer_needed>:
{
 800b360:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b362:	4b0a      	ldr	r3, [pc, #40]	; (800b38c <tcp_timer_needed+0x2c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	b953      	cbnz	r3, 800b37e <tcp_timer_needed+0x1e>
 800b368:	4b09      	ldr	r3, [pc, #36]	; (800b390 <tcp_timer_needed+0x30>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	b143      	cbz	r3, 800b380 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800b36e:	2201      	movs	r2, #1
 800b370:	4b06      	ldr	r3, [pc, #24]	; (800b38c <tcp_timer_needed+0x2c>)
 800b372:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b374:	2200      	movs	r2, #0
 800b376:	4907      	ldr	r1, [pc, #28]	; (800b394 <tcp_timer_needed+0x34>)
 800b378:	20fa      	movs	r0, #250	; 0xfa
 800b37a:	f7ff ff93 	bl	800b2a4 <sys_timeout>
 800b37e:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b380:	4b05      	ldr	r3, [pc, #20]	; (800b398 <tcp_timer_needed+0x38>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1f2      	bne.n	800b36e <tcp_timer_needed+0xe>
 800b388:	e7f9      	b.n	800b37e <tcp_timer_needed+0x1e>
 800b38a:	bf00      	nop
 800b38c:	20003f0c 	.word	0x20003f0c
 800b390:	20007234 	.word	0x20007234
 800b394:	0800b39d 	.word	0x0800b39d
 800b398:	20007244 	.word	0x20007244

0800b39c <tcpip_tcp_timer>:
{
 800b39c:	b508      	push	{r3, lr}
  tcp_tmr();
 800b39e:	f7fd f93b 	bl	8008618 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b3a2:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <tcpip_tcp_timer+0x28>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	b12b      	cbz	r3, 800b3b4 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	4907      	ldr	r1, [pc, #28]	; (800b3c8 <tcpip_tcp_timer+0x2c>)
 800b3ac:	20fa      	movs	r0, #250	; 0xfa
 800b3ae:	f7ff ff79 	bl	800b2a4 <sys_timeout>
 800b3b2:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b3b4:	4b05      	ldr	r3, [pc, #20]	; (800b3cc <tcpip_tcp_timer+0x30>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1f5      	bne.n	800b3a8 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800b3bc:	2200      	movs	r2, #0
 800b3be:	4b04      	ldr	r3, [pc, #16]	; (800b3d0 <tcpip_tcp_timer+0x34>)
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	bd08      	pop	{r3, pc}
 800b3c4:	20007234 	.word	0x20007234
 800b3c8:	0800b39d 	.word	0x0800b39d
 800b3cc:	20007244 	.word	0x20007244
 800b3d0:	20003f0c 	.word	0x20003f0c

0800b3d4 <sys_timeouts_init>:
{
 800b3d4:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b3d6:	2401      	movs	r4, #1
 800b3d8:	e008      	b.n	800b3ec <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800b3da:	4b08      	ldr	r3, [pc, #32]	; (800b3fc <sys_timeouts_init+0x28>)
 800b3dc:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800b3e0:	4907      	ldr	r1, [pc, #28]	; (800b400 <sys_timeouts_init+0x2c>)
 800b3e2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800b3e6:	f7ff ff5d 	bl	800b2a4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b3ea:	3401      	adds	r4, #1
 800b3ec:	2c02      	cmp	r4, #2
 800b3ee:	d9f4      	bls.n	800b3da <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 800b3f0:	f000 fd46 	bl	800be80 <sys_now>
 800b3f4:	4b03      	ldr	r3, [pc, #12]	; (800b404 <sys_timeouts_init+0x30>)
 800b3f6:	6018      	str	r0, [r3, #0]
 800b3f8:	bd10      	pop	{r4, pc}
 800b3fa:	bf00      	nop
 800b3fc:	0800e6d0 	.word	0x0800e6d0
 800b400:	0800b409 	.word	0x0800b409
 800b404:	20003f10 	.word	0x20003f10

0800b408 <cyclic_timer>:
{
 800b408:	b510      	push	{r4, lr}
 800b40a:	4604      	mov	r4, r0
  cyclic->handler();
 800b40c:	6843      	ldr	r3, [r0, #4]
 800b40e:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800b410:	4622      	mov	r2, r4
 800b412:	4902      	ldr	r1, [pc, #8]	; (800b41c <cyclic_timer+0x14>)
 800b414:	6820      	ldr	r0, [r4, #0]
 800b416:	f7ff ff45 	bl	800b2a4 <sys_timeout>
 800b41a:	bd10      	pop	{r4, pc}
 800b41c:	0800b409 	.word	0x0800b409

0800b420 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	4604      	mov	r4, r0
 800b424:	460d      	mov	r5, r1
 800b426:	e007      	b.n	800b438 <sys_timeouts_mbox_fetch+0x18>
  u32_t sleeptime;

again:
  if (!next_timeout) {
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b428:	2200      	movs	r2, #0
 800b42a:	4629      	mov	r1, r5
 800b42c:	4620      	mov	r0, r4
 800b42e:	f000 fa54 	bl	800b8da <sys_arch_mbox_fetch>
    return;
 800b432:	bd38      	pop	{r3, r4, r5, pc}

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b434:	f7ff fefe 	bl	800b234 <sys_check_timeouts>
  if (!next_timeout) {
 800b438:	4b08      	ldr	r3, [pc, #32]	; (800b45c <sys_timeouts_mbox_fetch+0x3c>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d0f3      	beq.n	800b428 <sys_timeouts_mbox_fetch+0x8>
  sleeptime = sys_timeouts_sleeptime();
 800b440:	f7ff fede 	bl	800b200 <sys_timeouts_sleeptime>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800b444:	4602      	mov	r2, r0
 800b446:	2800      	cmp	r0, #0
 800b448:	d0f4      	beq.n	800b434 <sys_timeouts_mbox_fetch+0x14>
 800b44a:	4629      	mov	r1, r5
 800b44c:	4620      	mov	r0, r4
 800b44e:	f000 fa44 	bl	800b8da <sys_arch_mbox_fetch>
 800b452:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b456:	d0ed      	beq.n	800b434 <sys_timeouts_mbox_fetch+0x14>
 800b458:	bd38      	pop	{r3, r4, r5, pc}
 800b45a:	bf00      	nop
 800b45c:	20003f08 	.word	0x20003f08

0800b460 <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 800b460:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b462:	4a10      	ldr	r2, [pc, #64]	; (800b4a4 <udp_new_port+0x44>)
 800b464:	8813      	ldrh	r3, [r2, #0]
 800b466:	1c59      	adds	r1, r3, #1
 800b468:	8011      	strh	r1, [r2, #0]
 800b46a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b46e:	4293      	cmp	r3, r2
 800b470:	d009      	beq.n	800b486 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b472:	4b0d      	ldr	r3, [pc, #52]	; (800b4a8 <udp_new_port+0x48>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	b193      	cbz	r3, 800b49e <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 800b478:	8a59      	ldrh	r1, [r3, #18]
 800b47a:	4a0a      	ldr	r2, [pc, #40]	; (800b4a4 <udp_new_port+0x44>)
 800b47c:	8812      	ldrh	r2, [r2, #0]
 800b47e:	4291      	cmp	r1, r2
 800b480:	d006      	beq.n	800b490 <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	e7f7      	b.n	800b476 <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b486:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b48a:	4b06      	ldr	r3, [pc, #24]	; (800b4a4 <udp_new_port+0x44>)
 800b48c:	801a      	strh	r2, [r3, #0]
 800b48e:	e7f0      	b.n	800b472 <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b490:	3001      	adds	r0, #1
 800b492:	b280      	uxth	r0, r0
 800b494:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800b498:	d3e3      	bcc.n	800b462 <udp_new_port+0x2>
        return 0;
 800b49a:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 800b49c:	4770      	bx	lr
  return udp_port;
 800b49e:	4b01      	ldr	r3, [pc, #4]	; (800b4a4 <udp_new_port+0x44>)
 800b4a0:	8818      	ldrh	r0, [r3, #0]
 800b4a2:	4770      	bx	lr
 800b4a4:	2000000e 	.word	0x2000000e
 800b4a8:	2000724c 	.word	0x2000724c

0800b4ac <udp_input_local_match>:
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b4ac:	b16a      	cbz	r2, 800b4ca <udp_input_local_match+0x1e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b4ae:	b1a8      	cbz	r0, 800b4dc <udp_input_local_match+0x30>
 800b4b0:	6803      	ldr	r3, [r0, #0]
 800b4b2:	b1ab      	cbz	r3, 800b4e0 <udp_input_local_match+0x34>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b4b4:	4a10      	ldr	r2, [pc, #64]	; (800b4f8 <udp_input_local_match+0x4c>)
 800b4b6:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b4b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b4bc:	d012      	beq.n	800b4e4 <udp_input_local_match+0x38>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b4be:	6889      	ldr	r1, [r1, #8]
 800b4c0:	4053      	eors	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b4c2:	420b      	tst	r3, r1
 800b4c4:	d010      	beq.n	800b4e8 <udp_input_local_match+0x3c>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      return 1;
    }
  }

  return 0;
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	4770      	bx	lr
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b4ca:	b178      	cbz	r0, 800b4ec <udp_input_local_match+0x40>
 800b4cc:	6803      	ldr	r3, [r0, #0]
 800b4ce:	b17b      	cbz	r3, 800b4f0 <udp_input_local_match+0x44>
 800b4d0:	4a09      	ldr	r2, [pc, #36]	; (800b4f8 <udp_input_local_match+0x4c>)
 800b4d2:	6952      	ldr	r2, [r2, #20]
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d00d      	beq.n	800b4f4 <udp_input_local_match+0x48>
  return 0;
 800b4d8:	2000      	movs	r0, #0
 800b4da:	4770      	bx	lr
          return 1;
 800b4dc:	2001      	movs	r0, #1
 800b4de:	4770      	bx	lr
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	4770      	bx	lr
 800b4e4:	2001      	movs	r0, #1
 800b4e6:	4770      	bx	lr
 800b4e8:	2001      	movs	r0, #1
 800b4ea:	4770      	bx	lr
      return 1;
 800b4ec:	2001      	movs	r0, #1
 800b4ee:	4770      	bx	lr
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	4770      	bx	lr
 800b4f4:	2001      	movs	r0, #1
}
 800b4f6:	4770      	bx	lr
 800b4f8:	20003f64 	.word	0x20003f64

0800b4fc <udp_init>:
{
 800b4fc:	4770      	bx	lr
	...

0800b500 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	b085      	sub	sp, #20
 800b506:	4681      	mov	r9, r0
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b508:	8943      	ldrh	r3, [r0, #10]
 800b50a:	2b07      	cmp	r3, #7
 800b50c:	d917      	bls.n	800b53e <udp_input+0x3e>
 800b50e:	460f      	mov	r7, r1
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b510:	6844      	ldr	r4, [r0, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b512:	4b46      	ldr	r3, [pc, #280]	; (800b62c <udp_input+0x12c>)
 800b514:	6819      	ldr	r1, [r3, #0]
 800b516:	6958      	ldr	r0, [r3, #20]
 800b518:	f7fa fe91 	bl	800623e <ip4_addr_isbroadcast_u32>
 800b51c:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b51e:	8820      	ldrh	r0, [r4, #0]
 800b520:	f7f9 ff28 	bl	8005374 <lwip_htons>
 800b524:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800b526:	8860      	ldrh	r0, [r4, #2]
 800b528:	f7f9 ff24 	bl	8005374 <lwip_htons>
 800b52c:	4606      	mov	r6, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b52e:	4b40      	ldr	r3, [pc, #256]	; (800b630 <udp_input+0x130>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	9303      	str	r3, [sp, #12]
 800b534:	461c      	mov	r4, r3
  uncon_pcb = NULL;
 800b536:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800b53a:	465d      	mov	r5, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b53c:	e009      	b.n	800b552 <udp_input+0x52>
    pbuf_free(p);
 800b53e:	f7fb ff35 	bl	80073ac <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b542:	b005      	add	sp, #20
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((pcb->remote_port == src) &&
 800b548:	8aa3      	ldrh	r3, [r4, #20]
 800b54a:	459a      	cmp	sl, r3
 800b54c:	d015      	beq.n	800b57a <udp_input+0x7a>
    prev = pcb;
 800b54e:	4625      	mov	r5, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b550:	68e4      	ldr	r4, [r4, #12]
 800b552:	b1fc      	cbz	r4, 800b594 <udp_input+0x94>
    if ((pcb->local_port == dest) &&
 800b554:	8a63      	ldrh	r3, [r4, #18]
 800b556:	429e      	cmp	r6, r3
 800b558:	d1f9      	bne.n	800b54e <udp_input+0x4e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b55a:	4642      	mov	r2, r8
 800b55c:	4639      	mov	r1, r7
 800b55e:	4620      	mov	r0, r4
 800b560:	f7ff ffa4 	bl	800b4ac <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800b564:	2800      	cmp	r0, #0
 800b566:	d0f2      	beq.n	800b54e <udp_input+0x4e>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800b568:	7c23      	ldrb	r3, [r4, #16]
 800b56a:	f013 0f04 	tst.w	r3, #4
 800b56e:	d1eb      	bne.n	800b548 <udp_input+0x48>
 800b570:	f1bb 0f00 	cmp.w	fp, #0
 800b574:	d1e8      	bne.n	800b548 <udp_input+0x48>
        uncon_pcb = pcb;
 800b576:	46a3      	mov	fp, r4
 800b578:	e7e6      	b.n	800b548 <udp_input+0x48>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b57a:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800b57c:	b11b      	cbz	r3, 800b586 <udp_input+0x86>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b57e:	4a2b      	ldr	r2, [pc, #172]	; (800b62c <udp_input+0x12c>)
 800b580:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b582:	4293      	cmp	r3, r2
 800b584:	d1e3      	bne.n	800b54e <udp_input+0x4e>
        if (prev != NULL) {
 800b586:	b12d      	cbz	r5, 800b594 <udp_input+0x94>
          prev->next = pcb->next;
 800b588:	68e3      	ldr	r3, [r4, #12]
 800b58a:	60eb      	str	r3, [r5, #12]
          pcb->next = udp_pcbs;
 800b58c:	9b03      	ldr	r3, [sp, #12]
 800b58e:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800b590:	4b27      	ldr	r3, [pc, #156]	; (800b630 <udp_input+0x130>)
 800b592:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 800b594:	b1a4      	cbz	r4, 800b5c0 <udp_input+0xc0>
  if (pcb != NULL) {
 800b596:	b1ac      	cbz	r4, 800b5c4 <udp_input+0xc4>
    for_us = 1;
 800b598:	2301      	movs	r3, #1
  if (for_us) {
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d041      	beq.n	800b622 <udp_input+0x122>
    if (pbuf_header(p, -UDP_HLEN)) {
 800b59e:	f06f 0107 	mvn.w	r1, #7
 800b5a2:	4648      	mov	r0, r9
 800b5a4:	f7fb fef8 	bl	8007398 <pbuf_header>
 800b5a8:	b9a0      	cbnz	r0, 800b5d4 <udp_input+0xd4>
    if (pcb != NULL) {
 800b5aa:	b314      	cbz	r4, 800b5f2 <udp_input+0xf2>
      if (pcb->recv != NULL) {
 800b5ac:	69a5      	ldr	r5, [r4, #24]
 800b5ae:	b1e5      	cbz	r5, 800b5ea <udp_input+0xea>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b5b0:	69e0      	ldr	r0, [r4, #28]
 800b5b2:	f8cd a000 	str.w	sl, [sp]
 800b5b6:	4b1f      	ldr	r3, [pc, #124]	; (800b634 <udp_input+0x134>)
 800b5b8:	464a      	mov	r2, r9
 800b5ba:	4621      	mov	r1, r4
 800b5bc:	47a8      	blx	r5
 800b5be:	e7c0      	b.n	800b542 <udp_input+0x42>
    pcb = uncon_pcb;
 800b5c0:	465c      	mov	r4, fp
 800b5c2:	e7e8      	b.n	800b596 <udp_input+0x96>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a19      	ldr	r2, [pc, #100]	; (800b62c <udp_input+0x12c>)
 800b5c8:	6952      	ldr	r2, [r2, #20]
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	bf14      	ite	ne
 800b5ce:	2300      	movne	r3, #0
 800b5d0:	2301      	moveq	r3, #1
 800b5d2:	e7e2      	b.n	800b59a <udp_input+0x9a>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800b5d4:	4b18      	ldr	r3, [pc, #96]	; (800b638 <udp_input+0x138>)
 800b5d6:	f240 1255 	movw	r2, #341	; 0x155
 800b5da:	4918      	ldr	r1, [pc, #96]	; (800b63c <udp_input+0x13c>)
 800b5dc:	4818      	ldr	r0, [pc, #96]	; (800b640 <udp_input+0x140>)
 800b5de:	f000 ffd4 	bl	800c58a <iprintf>
      pbuf_free(p);
 800b5e2:	4648      	mov	r0, r9
 800b5e4:	f7fb fee2 	bl	80073ac <pbuf_free>
      goto end;
 800b5e8:	e7ab      	b.n	800b542 <udp_input+0x42>
        pbuf_free(p);
 800b5ea:	4648      	mov	r0, r9
 800b5ec:	f7fb fede 	bl	80073ac <pbuf_free>
        goto end;
 800b5f0:	e7a7      	b.n	800b542 <udp_input+0x42>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b5f2:	f1b8 0f00 	cmp.w	r8, #0
 800b5f6:	d110      	bne.n	800b61a <udp_input+0x11a>
 800b5f8:	4b0c      	ldr	r3, [pc, #48]	; (800b62c <udp_input+0x12c>)
 800b5fa:	695b      	ldr	r3, [r3, #20]
 800b5fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b600:	2be0      	cmp	r3, #224	; 0xe0
 800b602:	d00a      	beq.n	800b61a <udp_input+0x11a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b604:	4b09      	ldr	r3, [pc, #36]	; (800b62c <udp_input+0x12c>)
 800b606:	8999      	ldrh	r1, [r3, #12]
 800b608:	3108      	adds	r1, #8
 800b60a:	b209      	sxth	r1, r1
 800b60c:	4648      	mov	r0, r9
 800b60e:	f7fb fec8 	bl	80073a2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b612:	2103      	movs	r1, #3
 800b614:	4648      	mov	r0, r9
 800b616:	f7fa fc4b 	bl	8005eb0 <icmp_dest_unreach>
      pbuf_free(p);
 800b61a:	4648      	mov	r0, r9
 800b61c:	f7fb fec6 	bl	80073ac <pbuf_free>
 800b620:	e78f      	b.n	800b542 <udp_input+0x42>
    pbuf_free(p);
 800b622:	4648      	mov	r0, r9
 800b624:	f7fb fec2 	bl	80073ac <pbuf_free>
  return;
 800b628:	e78b      	b.n	800b542 <udp_input+0x42>
 800b62a:	bf00      	nop
 800b62c:	20003f64 	.word	0x20003f64
 800b630:	2000724c 	.word	0x2000724c
 800b634:	20003f74 	.word	0x20003f74
 800b638:	0800e75c 	.word	0x0800e75c
 800b63c:	0800e78c 	.word	0x0800e78c
 800b640:	0800c8d0 	.word	0x0800c8d0

0800b644 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b644:	b570      	push	{r4, r5, r6, lr}
 800b646:	4604      	mov	r4, r0
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b648:	460d      	mov	r5, r1
 800b64a:	b159      	cbz	r1, 800b664 <udp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b64c:	2c00      	cmp	r4, #0
 800b64e:	d02c      	beq.n	800b6aa <udp_bind+0x66>
 800b650:	2d00      	cmp	r5, #0
 800b652:	d02d      	beq.n	800b6b0 <udp_bind+0x6c>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b654:	4b1a      	ldr	r3, [pc, #104]	; (800b6c0 <udp_bind+0x7c>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4619      	mov	r1, r3
 800b65a:	b129      	cbz	r1, 800b668 <udp_bind+0x24>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b65c:	42a1      	cmp	r1, r4
 800b65e:	d013      	beq.n	800b688 <udp_bind+0x44>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b660:	68c9      	ldr	r1, [r1, #12]
 800b662:	e7fa      	b.n	800b65a <udp_bind+0x16>
    ipaddr = IP4_ADDR_ANY;
 800b664:	4d17      	ldr	r5, [pc, #92]	; (800b6c4 <udp_bind+0x80>)
 800b666:	e7f1      	b.n	800b64c <udp_bind+0x8>
  rebind = 0;
 800b668:	2600      	movs	r6, #0
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800b66a:	b982      	cbnz	r2, 800b68e <udp_bind+0x4a>
    port = udp_new_port();
 800b66c:	f7ff fef8 	bl	800b460 <udp_new_port>
    if (port == 0) {
 800b670:	4602      	mov	r2, r0
 800b672:	b300      	cbz	r0, 800b6b6 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 800b678:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b67a:	b9fe      	cbnz	r6, 800b6bc <udp_bind+0x78>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b67c:	4b10      	ldr	r3, [pc, #64]	; (800b6c0 <udp_bind+0x7c>)
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 800b682:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b684:	2000      	movs	r0, #0
 800b686:	bd70      	pop	{r4, r5, r6, pc}
      rebind = 1;
 800b688:	2601      	movs	r6, #1
 800b68a:	e7ee      	b.n	800b66a <udp_bind+0x26>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d0f0      	beq.n	800b674 <udp_bind+0x30>
      if (pcb != ipcb) {
 800b692:	42a3      	cmp	r3, r4
 800b694:	d0fa      	beq.n	800b68c <udp_bind+0x48>
          if ((ipcb->local_port == port) &&
 800b696:	8a59      	ldrh	r1, [r3, #18]
 800b698:	428a      	cmp	r2, r1
 800b69a:	d1f7      	bne.n	800b68c <udp_bind+0x48>
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800b69c:	6818      	ldr	r0, [r3, #0]
 800b69e:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 800b6a0:	4288      	cmp	r0, r1
 800b6a2:	d1f3      	bne.n	800b68c <udp_bind+0x48>
            return ERR_USE;
 800b6a4:	f06f 0007 	mvn.w	r0, #7
 800b6a8:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800b6aa:	f06f 0005 	mvn.w	r0, #5
 800b6ae:	bd70      	pop	{r4, r5, r6, pc}
 800b6b0:	f06f 0005 	mvn.w	r0, #5
 800b6b4:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_USE;
 800b6b6:	f06f 0007 	mvn.w	r0, #7
 800b6ba:	bd70      	pop	{r4, r5, r6, pc}
  return ERR_OK;
 800b6bc:	2000      	movs	r0, #0
}
 800b6be:	bd70      	pop	{r4, r5, r6, pc}
 800b6c0:	2000724c 	.word	0x2000724c
 800b6c4:	0800d268 	.word	0x0800d268

0800b6c8 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b6c8:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800b6ca:	61c2      	str	r2, [r0, #28]
 800b6cc:	4770      	bx	lr
	...

0800b6d0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800b6d0:	b508      	push	{r3, lr}
 800b6d2:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b6d4:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <udp_remove+0x34>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	4282      	cmp	r2, r0
 800b6da:	d109      	bne.n	800b6f0 <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b6dc:	68d2      	ldr	r2, [r2, #12]
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	e001      	b.n	800b6e6 <udp_remove+0x16>
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800b6e2:	68cb      	ldr	r3, [r1, #12]
 800b6e4:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	f7fb fc8a 	bl	8007000 <memp_free>
 800b6ec:	bd08      	pop	{r3, pc}
 800b6ee:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b6f0:	2a00      	cmp	r2, #0
 800b6f2:	d0f8      	beq.n	800b6e6 <udp_remove+0x16>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b6f4:	68d3      	ldr	r3, [r2, #12]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d0f9      	beq.n	800b6ee <udp_remove+0x1e>
 800b6fa:	4299      	cmp	r1, r3
 800b6fc:	d0f1      	beq.n	800b6e2 <udp_remove+0x12>
 800b6fe:	461a      	mov	r2, r3
 800b700:	e7f6      	b.n	800b6f0 <udp_remove+0x20>
 800b702:	bf00      	nop
 800b704:	2000724c 	.word	0x2000724c

0800b708 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b708:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b70a:	2000      	movs	r0, #0
 800b70c:	f7fb fc5e 	bl	8006fcc <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b710:	4604      	mov	r4, r0
 800b712:	b128      	cbz	r0, 800b720 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b714:	2220      	movs	r2, #32
 800b716:	2100      	movs	r1, #0
 800b718:	f001 f858 	bl	800c7cc <memset>
    pcb->ttl = UDP_TTL;
 800b71c:	23ff      	movs	r3, #255	; 0xff
 800b71e:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800b720:	4620      	mov	r0, r4
 800b722:	bd10      	pop	{r4, pc}

0800b724 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800b724:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;
  pcb = udp_new();
 800b726:	f7ff ffef 	bl	800b708 <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800b72a:	bd08      	pop	{r3, pc}

0800b72c <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b72c:	b1a0      	cbz	r0, 800b758 <udp_netif_ip_addr_changed+0x2c>
{
 800b72e:	b410      	push	{r4}
 800b730:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b732:	6803      	ldr	r3, [r0, #0]
 800b734:	b173      	cbz	r3, 800b754 <udp_netif_ip_addr_changed+0x28>
 800b736:	b169      	cbz	r1, 800b754 <udp_netif_ip_addr_changed+0x28>
 800b738:	680b      	ldr	r3, [r1, #0]
 800b73a:	b15b      	cbz	r3, 800b754 <udp_netif_ip_addr_changed+0x28>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b73c:	4b07      	ldr	r3, [pc, #28]	; (800b75c <udp_netif_ip_addr_changed+0x30>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	e000      	b.n	800b744 <udp_netif_ip_addr_changed+0x18>
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	b133      	cbz	r3, 800b754 <udp_netif_ip_addr_changed+0x28>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b746:	6818      	ldr	r0, [r3, #0]
 800b748:	6822      	ldr	r2, [r4, #0]
 800b74a:	4290      	cmp	r0, r2
 800b74c:	d1f9      	bne.n	800b742 <udp_netif_ip_addr_changed+0x16>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b74e:	680a      	ldr	r2, [r1, #0]
 800b750:	601a      	str	r2, [r3, #0]
 800b752:	e7f6      	b.n	800b742 <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 800b754:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	2000724c 	.word	0x2000724c

0800b760 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800b760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b762:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800b764:	8945      	ldrh	r5, [r0, #10]
 800b766:	2d0e      	cmp	r5, #14
 800b768:	d916      	bls.n	800b798 <ethernet_input+0x38>
 800b76a:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b76c:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800b76e:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b770:	7803      	ldrb	r3, [r0, #0]
 800b772:	f013 0f01 	tst.w	r3, #1
 800b776:	d00a      	beq.n	800b78e <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d012      	beq.n	800b7a2 <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b77c:	2206      	movs	r2, #6
 800b77e:	4921      	ldr	r1, [pc, #132]	; (800b804 <ethernet_input+0xa4>)
 800b780:	f001 f80a 	bl	800c798 <memcmp>
 800b784:	b918      	cbnz	r0, 800b78e <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b786:	7b63      	ldrb	r3, [r4, #13]
 800b788:	f043 0308 	orr.w	r3, r3, #8
 800b78c:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800b78e:	2e08      	cmp	r6, #8
 800b790:	d012      	beq.n	800b7b8 <ethernet_input+0x58>
 800b792:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800b796:	d022      	beq.n	800b7de <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800b798:	4620      	mov	r0, r4
 800b79a:	f7fb fe07 	bl	80073ac <pbuf_free>
  return ERR_OK;
}
 800b79e:	2000      	movs	r0, #0
 800b7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b7a2:	7843      	ldrb	r3, [r0, #1]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d1f2      	bne.n	800b78e <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800b7a8:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b7aa:	2b5e      	cmp	r3, #94	; 0x5e
 800b7ac:	d1ef      	bne.n	800b78e <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 800b7ae:	7b63      	ldrb	r3, [r4, #13]
 800b7b0:	f043 0310 	orr.w	r3, r3, #16
 800b7b4:	7363      	strb	r3, [r4, #13]
 800b7b6:	e7ea      	b.n	800b78e <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b7b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7bc:	f013 0f08 	tst.w	r3, #8
 800b7c0:	d0ea      	beq.n	800b798 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b7c2:	2d0d      	cmp	r5, #13
 800b7c4:	dde8      	ble.n	800b798 <ethernet_input+0x38>
 800b7c6:	f06f 010d 	mvn.w	r1, #13
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f7fb fde4 	bl	8007398 <pbuf_header>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d1e1      	bne.n	800b798 <ethernet_input+0x38>
        ip4_input(p, netif);
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f7fa fbc6 	bl	8005f68 <ip4_input>
      break;
 800b7dc:	e7df      	b.n	800b79e <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b7de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7e2:	f013 0f08 	tst.w	r3, #8
 800b7e6:	d0d7      	beq.n	800b798 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b7e8:	2d0d      	cmp	r5, #13
 800b7ea:	ddd5      	ble.n	800b798 <ethernet_input+0x38>
 800b7ec:	f06f 010d 	mvn.w	r1, #13
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f7fb fdd1 	bl	8007398 <pbuf_header>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d1ce      	bne.n	800b798 <ethernet_input+0x38>
        etharp_input(p, netif);
 800b7fa:	4639      	mov	r1, r7
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f7f9 ffcd 	bl	800579c <etharp_input>
      break;
 800b802:	e7cc      	b.n	800b79e <ethernet_input+0x3e>
 800b804:	0800e7a0 	.word	0x0800e7a0

0800b808 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800b808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b80c:	4605      	mov	r5, r0
 800b80e:	460c      	mov	r4, r1
 800b810:	4616      	mov	r6, r2
 800b812:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b814:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800b818:	f7f9 fdac 	bl	8005374 <lwip_htons>
 800b81c:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800b81e:	210e      	movs	r1, #14
 800b820:	4620      	mov	r0, r4
 800b822:	f7fb fdb9 	bl	8007398 <pbuf_header>
 800b826:	b9e0      	cbnz	r0, 800b862 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800b828:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 800b82a:	f8a3 800c 	strh.w	r8, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	601a      	str	r2, [r3, #0]
 800b832:	88ba      	ldrh	r2, [r7, #4]
 800b834:	809a      	strh	r2, [r3, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800b836:	6832      	ldr	r2, [r6, #0]
 800b838:	f8c3 2006 	str.w	r2, [r3, #6]
 800b83c:	88b2      	ldrh	r2, [r6, #4]
 800b83e:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b840:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800b844:	2b06      	cmp	r3, #6
 800b846:	d006      	beq.n	800b856 <ethernet_output+0x4e>
 800b848:	4b08      	ldr	r3, [pc, #32]	; (800b86c <ethernet_output+0x64>)
 800b84a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b84e:	4908      	ldr	r1, [pc, #32]	; (800b870 <ethernet_output+0x68>)
 800b850:	4808      	ldr	r0, [pc, #32]	; (800b874 <ethernet_output+0x6c>)
 800b852:	f000 fe9a 	bl	800c58a <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b856:	69ab      	ldr	r3, [r5, #24]
 800b858:	4621      	mov	r1, r4
 800b85a:	4628      	mov	r0, r5
 800b85c:	4798      	blx	r3
 800b85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800b862:	f06f 0001 	mvn.w	r0, #1
}
 800b866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b86a:	bf00      	nop
 800b86c:	0800e7a8 	.word	0x0800e7a8
 800b870:	0800e7e0 	.word	0x0800e7e0
 800b874:	0800c8d0 	.word	0x0800c8d0

0800b878 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800b878:	b510      	push	{r4, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800b87e:	9100      	str	r1, [sp, #0]
 800b880:	2304      	movs	r3, #4
 800b882:	9301      	str	r3, [sp, #4]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800b884:	2100      	movs	r1, #0
 800b886:	4668      	mov	r0, sp
 800b888:	f7f6 fcec 	bl	8002264 <osMessageCreate>
 800b88c:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800b88e:	b110      	cbz	r0, 800b896 <sys_mbox_new+0x1e>
  return ERR_MEM;
 
 return ERR_OK;
 800b890:	2000      	movs	r0, #0
}
 800b892:	b002      	add	sp, #8
 800b894:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 800b896:	f04f 30ff 	mov.w	r0, #4294967295
 800b89a:	e7fa      	b.n	800b892 <sys_mbox_new+0x1a>

0800b89c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800b89c:	b510      	push	{r4, lr}
 800b89e:	4604      	mov	r4, r0
	if( osMessageWaiting(*mbox) )
 800b8a0:	6800      	ldr	r0, [r0, #0]
 800b8a2:	f7f6 fd6b 	bl	800237c <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 800b8a6:	6820      	ldr	r0, [r4, #0]
 800b8a8:	f7f6 fd75 	bl	8002396 <osMessageDelete>
 800b8ac:	bd10      	pop	{r4, pc}

0800b8ae <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800b8ae:	b538      	push	{r3, r4, r5, lr}
 800b8b0:	4605      	mov	r5, r0
 800b8b2:	460c      	mov	r4, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800b8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	6828      	ldr	r0, [r5, #0]
 800b8bc:	f7f6 fcda 	bl	8002274 <osMessagePut>
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	d1f7      	bne.n	800b8b4 <sys_mbox_post+0x6>
}
 800b8c4:	bd38      	pop	{r3, r4, r5, pc}

0800b8c6 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800b8c6:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	6800      	ldr	r0, [r0, #0]
 800b8cc:	f7f6 fcd2 	bl	8002274 <osMessagePut>
 800b8d0:	b900      	cbnz	r0, 800b8d4 <sys_mbox_trypost+0xe>
#endif /* SYS_STATS */
			
   }

   return result;
}
 800b8d2:	bd08      	pop	{r3, pc}
      result = ERR_MEM;
 800b8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d8:	e7fb      	b.n	800b8d2 <sys_mbox_trypost+0xc>

0800b8da <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800b8da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8dc:	b089      	sub	sp, #36	; 0x24
 800b8de:	4606      	mov	r6, r0
 800b8e0:	460f      	mov	r7, r1
 800b8e2:	4615      	mov	r5, r2
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 800b8e4:	f7f6 fb9b 	bl	800201e <osKernelSysTick>
 800b8e8:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800b8ea:	b185      	cbz	r5, 800b90e <sys_arch_mbox_fetch+0x34>
  { 
    event = osMessageGet (*mbox, timeout);
 800b8ec:	462a      	mov	r2, r5
 800b8ee:	6831      	ldr	r1, [r6, #0]
 800b8f0:	a805      	add	r0, sp, #20
 800b8f2:	f7f6 fcf3 	bl	80022dc <osMessageGet>
    
    if(event.status == osEventMessage)
 800b8f6:	9b05      	ldr	r3, [sp, #20]
 800b8f8:	2b10      	cmp	r3, #16
 800b8fa:	d002      	beq.n	800b902 <sys_arch_mbox_fetch+0x28>
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 800b8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b900:	e015      	b.n	800b92e <sys_arch_mbox_fetch+0x54>
      *msg = (void *)event.value.v;
 800b902:	9b06      	ldr	r3, [sp, #24]
 800b904:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 800b906:	f7f6 fb8a 	bl	800201e <osKernelSysTick>
 800b90a:	1b00      	subs	r0, r0, r4
 800b90c:	e00f      	b.n	800b92e <sys_arch_mbox_fetch+0x54>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 800b90e:	f04f 32ff 	mov.w	r2, #4294967295
 800b912:	6831      	ldr	r1, [r6, #0]
 800b914:	4668      	mov	r0, sp
 800b916:	f7f6 fce1 	bl	80022dc <osMessageGet>
 800b91a:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 800b91e:	ab08      	add	r3, sp, #32
 800b920:	e903 0007 	stmdb	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800b924:	9b06      	ldr	r3, [sp, #24]
 800b926:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 800b928:	f7f6 fb79 	bl	800201e <osKernelSysTick>
 800b92c:	1b00      	subs	r0, r0, r4
  }
}
 800b92e:	b009      	add	sp, #36	; 0x24
 800b930:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b932 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800b932:	b510      	push	{r4, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	460c      	mov	r4, r1
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 800b938:	2200      	movs	r2, #0
 800b93a:	6801      	ldr	r1, [r0, #0]
 800b93c:	a801      	add	r0, sp, #4
 800b93e:	f7f6 fccd 	bl	80022dc <osMessageGet>
  
  if(event.status == osEventMessage)
 800b942:	9b01      	ldr	r3, [sp, #4]
 800b944:	2b10      	cmp	r3, #16
 800b946:	d003      	beq.n	800b950 <sys_arch_mbox_tryfetch+0x1e>
    *msg = (void *)event.value.v;
    return ERR_OK;
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800b948:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 800b94c:	b004      	add	sp, #16
 800b94e:	bd10      	pop	{r4, pc}
    *msg = (void *)event.value.v;
 800b950:	9b02      	ldr	r3, [sp, #8]
 800b952:	6023      	str	r3, [r4, #0]
    return ERR_OK;
 800b954:	2000      	movs	r0, #0
 800b956:	e7f9      	b.n	800b94c <sys_arch_mbox_tryfetch+0x1a>

0800b958 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
  if (*mbox == SYS_MBOX_NULL) 
 800b958:	6803      	ldr	r3, [r0, #0]
 800b95a:	b10b      	cbz	r3, 800b960 <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 800b95c:	2001      	movs	r0, #1
}                                             
 800b95e:	4770      	bx	lr
    return 0;
 800b960:	2000      	movs	r0, #0
 800b962:	4770      	bx	lr

0800b964 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
  *mbox = SYS_MBOX_NULL;                      
 800b964:	2300      	movs	r3, #0
 800b966:	6003      	str	r3, [r0, #0]
 800b968:	4770      	bx	lr

0800b96a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800b96a:	b530      	push	{r4, r5, lr}
 800b96c:	b083      	sub	sp, #12
 800b96e:	4604      	mov	r4, r0
 800b970:	460d      	mov	r5, r1
  osSemaphoreDef(SEM);
 800b972:	a802      	add	r0, sp, #8
 800b974:	2300      	movs	r3, #0
 800b976:	f840 3d04 	str.w	r3, [r0, #-4]!

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800b97a:	2101      	movs	r1, #1
 800b97c:	f7f6 fbea 	bl	8002154 <osSemaphoreCreate>
 800b980:	6020      	str	r0, [r4, #0]
	
  if(*sem == NULL)
 800b982:	b140      	cbz	r0, 800b996 <sys_sem_new+0x2c>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
  }
	
  if(count == 0)	// Means it can't be taken
 800b984:	b115      	cbz	r5, 800b98c <sys_sem_new+0x22>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 800b986:	2000      	movs	r0, #0
}
 800b988:	b003      	add	sp, #12
 800b98a:	bd30      	pop	{r4, r5, pc}
    osSemaphoreWait(*sem,0);
 800b98c:	2100      	movs	r1, #0
 800b98e:	f7f6 fbf5 	bl	800217c <osSemaphoreWait>
	return ERR_OK;
 800b992:	2000      	movs	r0, #0
 800b994:	e7f8      	b.n	800b988 <sys_sem_new+0x1e>
		return ERR_MEM;
 800b996:	f04f 30ff 	mov.w	r0, #4294967295
 800b99a:	e7f5      	b.n	800b988 <sys_sem_new+0x1e>

0800b99c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800b99c:	b570      	push	{r4, r5, r6, lr}
 800b99e:	4604      	mov	r4, r0
 800b9a0:	460e      	mov	r6, r1
  uint32_t starttime = osKernelSysTick();
 800b9a2:	f7f6 fb3c 	bl	800201e <osKernelSysTick>
 800b9a6:	4605      	mov	r5, r0
  
  if(timeout != 0)
 800b9a8:	b956      	cbnz	r6, 800b9c0 <sys_arch_sem_wait+0x24>
      return SYS_ARCH_TIMEOUT;
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800b9aa:	f04f 31ff 	mov.w	r1, #4294967295
 800b9ae:	6820      	ldr	r0, [r4, #0]
 800b9b0:	f7f6 fbe4 	bl	800217c <osSemaphoreWait>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d1f8      	bne.n	800b9aa <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 800b9b8:	f7f6 fb31 	bl	800201e <osKernelSysTick>
 800b9bc:	1b40      	subs	r0, r0, r5
 800b9be:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800b9c0:	4631      	mov	r1, r6
 800b9c2:	6820      	ldr	r0, [r4, #0]
 800b9c4:	f7f6 fbda 	bl	800217c <osSemaphoreWait>
 800b9c8:	b110      	cbz	r0, 800b9d0 <sys_arch_sem_wait+0x34>
      return SYS_ARCH_TIMEOUT;
 800b9ca:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}
      return (osKernelSysTick() - starttime);
 800b9d0:	f7f6 fb25 	bl	800201e <osKernelSysTick>
 800b9d4:	1b40      	subs	r0, r0, r5
 800b9d6:	bd70      	pop	{r4, r5, r6, pc}

0800b9d8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800b9d8:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 800b9da:	6800      	ldr	r0, [r0, #0]
 800b9dc:	f7f6 fc08 	bl	80021f0 <osSemaphoreRelease>
 800b9e0:	bd08      	pop	{r3, pc}

0800b9e2 <sys_sem_free>:
}

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800b9e2:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 800b9e4:	6800      	ldr	r0, [r0, #0]
 800b9e6:	f7f6 fc31 	bl	800224c <osSemaphoreDelete>
 800b9ea:	bd08      	pop	{r3, pc}

0800b9ec <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
  if (*sem == SYS_SEM_NULL)
 800b9ec:	6803      	ldr	r3, [r0, #0]
 800b9ee:	b10b      	cbz	r3, 800b9f4 <sys_sem_valid+0x8>
    return 0;
  else
    return 1;                                       
 800b9f0:	2001      	movs	r0, #1
}
 800b9f2:	4770      	bx	lr
    return 0;
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	4770      	bx	lr

0800b9f8 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	6003      	str	r3, [r0, #0]
 800b9fc:	4770      	bx	lr
	...

0800ba00 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 800ba00:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800ba02:	4803      	ldr	r0, [pc, #12]	; (800ba10 <sys_init+0x10>)
 800ba04:	f7f6 fb38 	bl	8002078 <osMutexCreate>
 800ba08:	4b02      	ldr	r3, [pc, #8]	; (800ba14 <sys_init+0x14>)
 800ba0a:	6018      	str	r0, [r3, #0]
 800ba0c:	bd08      	pop	{r3, pc}
 800ba0e:	bf00      	nop
 800ba10:	0800e81c 	.word	0x0800e81c
 800ba14:	20007254 	.word	0x20007254

0800ba18 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800ba18:	b510      	push	{r4, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	4604      	mov	r4, r0
  
  osMutexDef(MUTEX);
 800ba1e:	a802      	add	r0, sp, #8
 800ba20:	2300      	movs	r3, #0
 800ba22:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 800ba26:	f7f6 fb27 	bl	8002078 <osMutexCreate>
 800ba2a:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 800ba2c:	b110      	cbz	r0, 800ba34 <sys_mutex_new+0x1c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800ba2e:	2000      	movs	r0, #0
}
 800ba30:	b002      	add	sp, #8
 800ba32:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 800ba34:	f04f 30ff 	mov.w	r0, #4294967295
 800ba38:	e7fa      	b.n	800ba30 <sys_mutex_new+0x18>

0800ba3a <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800ba3a:	b508      	push	{r3, lr}
  osMutexWait (*mutex, osWaitForever);
 800ba3c:	f04f 31ff 	mov.w	r1, #4294967295
 800ba40:	6800      	ldr	r0, [r0, #0]
 800ba42:	f7f6 fb1f 	bl	8002084 <osMutexWait>
 800ba46:	bd08      	pop	{r3, pc}

0800ba48 <sys_mutex_unlock>:
}

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800ba48:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 800ba4a:	6800      	ldr	r0, [r0, #0]
 800ba4c:	f7f6 fb54 	bl	80020f8 <osMutexRelease>
 800ba50:	bd08      	pop	{r3, pc}

0800ba52 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800ba52:	b500      	push	{lr}
 800ba54:	b087      	sub	sp, #28
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800ba56:	9001      	str	r0, [sp, #4]
 800ba58:	9102      	str	r1, [sp, #8]
 800ba5a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800ba5e:	f8ad 100c 	strh.w	r1, [sp, #12]
 800ba62:	2100      	movs	r1, #0
 800ba64:	9104      	str	r1, [sp, #16]
 800ba66:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 800ba68:	4611      	mov	r1, r2
 800ba6a:	a801      	add	r0, sp, #4
 800ba6c:	f7f6 fae1 	bl	8002032 <osThreadCreate>
}
 800ba70:	b007      	add	sp, #28
 800ba72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ba78 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800ba78:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800ba7a:	f04f 31ff 	mov.w	r1, #4294967295
 800ba7e:	4b03      	ldr	r3, [pc, #12]	; (800ba8c <sys_arch_protect+0x14>)
 800ba80:	6818      	ldr	r0, [r3, #0]
 800ba82:	f7f6 faff 	bl	8002084 <osMutexWait>
  return (sys_prot_t)1;
}
 800ba86:	2001      	movs	r0, #1
 800ba88:	bd08      	pop	{r3, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20007254 	.word	0x20007254

0800ba90 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800ba90:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800ba92:	4b02      	ldr	r3, [pc, #8]	; (800ba9c <sys_arch_unprotect+0xc>)
 800ba94:	6818      	ldr	r0, [r3, #0]
 800ba96:	f7f6 fb2f 	bl	80020f8 <osMutexRelease>
 800ba9a:	bd08      	pop	{r3, pc}
 800ba9c:	20007254 	.word	0x20007254

0800baa0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800baa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800baa4:	4834      	ldr	r0, [pc, #208]	; (800bb78 <low_level_input+0xd8>)
 800baa6:	f7f4 ffd5 	bl	8000a54 <HAL_ETH_GetReceivedFrame_IT>
 800baaa:	2800      	cmp	r0, #0
 800baac:	d160      	bne.n	800bb70 <low_level_input+0xd0>
    return NULL;
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800baae:	4b32      	ldr	r3, [pc, #200]	; (800bb78 <low_level_input+0xd8>)
 800bab0:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800bab2:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
  
  if (len > 0)
 800bab6:	b949      	cbnz	r1, 800bacc <low_level_input+0x2c>
  struct pbuf *p = NULL;
 800bab8:	f04f 0a00 	mov.w	sl, #0
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
  }
  
  if (p != NULL)
 800babc:	f1ba 0f00 	cmp.w	sl, #0
 800bac0:	d033      	beq.n	800bb2a <low_level_input+0x8a>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bac2:	4b2d      	ldr	r3, [pc, #180]	; (800bb78 <low_level_input+0xd8>)
 800bac4:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
 800bac6:	46d1      	mov	r9, sl
    bufferoffset = 0;
 800bac8:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 800baca:	e027      	b.n	800bb1c <low_level_input+0x7c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800bacc:	2203      	movs	r2, #3
 800bace:	2004      	movs	r0, #4
 800bad0:	f7fb fcd8 	bl	8007484 <pbuf_alloc>
 800bad4:	4682      	mov	sl, r0
 800bad6:	e7f1      	b.n	800babc <low_level_input+0x1c>
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800bad8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800badc:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800bae0:	3204      	adds	r2, #4
 800bae2:	eb08 0104 	add.w	r1, r8, r4
 800bae6:	4430      	add	r0, r6
 800bae8:	f000 fe65 	bl	800c7b6 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800baec:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800baee:	f8d7 8008 	ldr.w	r8, [r7, #8]
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800baf2:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800baf6:	1b36      	subs	r6, r6, r4
 800baf8:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 800bafc:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bafe:	18a5      	adds	r5, r4, r2
 800bb00:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800bb04:	429d      	cmp	r5, r3
 800bb06:	d8e7      	bhi.n	800bad8 <low_level_input+0x38>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800bb08:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800bb0c:	eb08 0104 	add.w	r1, r8, r4
 800bb10:	4430      	add	r0, r6
 800bb12:	f000 fe50 	bl	800c7b6 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800bb16:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 800bb1a:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 800bb1c:	f1b9 0f00 	cmp.w	r9, #0
 800bb20:	d003      	beq.n	800bb2a <low_level_input+0x8a>
      byteslefttocopy = q->len;
 800bb22:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 800bb26:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bb28:	e7e9      	b.n	800bafe <low_level_input+0x5e>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bb2a:	4b13      	ldr	r3, [pc, #76]	; (800bb78 <low_level_input+0xd8>)
 800bb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800bb2e:	2100      	movs	r1, #0
 800bb30:	e005      	b.n	800bb3e <low_level_input+0x9e>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800bb38:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800bb3a:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800bb3c:	3101      	adds	r1, #1
 800bb3e:	4a0e      	ldr	r2, [pc, #56]	; (800bb78 <low_level_input+0xd8>)
 800bb40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bb42:	4291      	cmp	r1, r2
 800bb44:	d3f5      	bcc.n	800bb32 <low_level_input+0x92>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800bb46:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <low_level_input+0xd8>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f241 0214 	movw	r2, #4116	; 0x1014
 800bb52:	589a      	ldr	r2, [r3, r2]
 800bb54:	f012 0f80 	tst.w	r2, #128	; 0x80
 800bb58:	d007      	beq.n	800bb6a <low_level_input+0xca>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800bb5a:	2180      	movs	r1, #128	; 0x80
 800bb5c:	f241 0214 	movw	r2, #4116	; 0x1014
 800bb60:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800bb62:	2100      	movs	r1, #0
 800bb64:	f241 0208 	movw	r2, #4104	; 0x1008
 800bb68:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 800bb6a:	4650      	mov	r0, sl
 800bb6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 800bb70:	f04f 0a00 	mov.w	sl, #0
 800bb74:	e7f9      	b.n	800bb6a <low_level_input+0xca>
 800bb76:	bf00      	nop
 800bb78:	20008b28 	.word	0x20008b28

0800bb7c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	4605      	mov	r5, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800bb80:	f04f 31ff 	mov.w	r1, #4294967295
 800bb84:	4b0b      	ldr	r3, [pc, #44]	; (800bbb4 <ethernetif_input+0x38>)
 800bb86:	6818      	ldr	r0, [r3, #0]
 800bb88:	f7f6 faf8 	bl	800217c <osSemaphoreWait>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d1f7      	bne.n	800bb80 <ethernetif_input+0x4>
 800bb90:	e001      	b.n	800bb96 <ethernetif_input+0x1a>
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
      } while(p!=NULL);
 800bb92:	2c00      	cmp	r4, #0
 800bb94:	d0f4      	beq.n	800bb80 <ethernetif_input+0x4>
        p = low_level_input( netif );
 800bb96:	4628      	mov	r0, r5
 800bb98:	f7ff ff82 	bl	800baa0 <low_level_input>
        if   (p != NULL)
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d0f7      	beq.n	800bb92 <ethernetif_input+0x16>
          if (netif->input( p, netif) != ERR_OK )
 800bba2:	692b      	ldr	r3, [r5, #16]
 800bba4:	4629      	mov	r1, r5
 800bba6:	4798      	blx	r3
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d0f2      	beq.n	800bb92 <ethernetif_input+0x16>
            pbuf_free(p);
 800bbac:	4620      	mov	r0, r4
 800bbae:	f7fb fbfd 	bl	80073ac <pbuf_free>
 800bbb2:	e7ee      	b.n	800bb92 <ethernetif_input+0x16>
 800bbb4:	20003f14 	.word	0x20003f14

0800bbb8 <low_level_output>:
{
 800bbb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbc:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800bbbe:	4b2c      	ldr	r3, [pc, #176]	; (800bc70 <low_level_output+0xb8>)
 800bbc0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800bbc2:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 800bbc6:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 800bbc8:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 800bbca:	f1bb 0f00 	cmp.w	fp, #0
 800bbce:	d032      	beq.n	800bc36 <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bbd0:	6833      	ldr	r3, [r6, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	db35      	blt.n	800bc42 <low_level_output+0x8a>
      byteslefttocopy = q->len;
 800bbd6:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 800bbda:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bbdc:	eb04 0809 	add.w	r8, r4, r9
 800bbe0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800bbe4:	4598      	cmp	r8, r3
 800bbe6:	d919      	bls.n	800bc1c <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800bbe8:	f8db 1004 	ldr.w	r1, [fp, #4]
 800bbec:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800bbf0:	3204      	adds	r2, #4
 800bbf2:	4429      	add	r1, r5
 800bbf4:	eb0a 0004 	add.w	r0, sl, r4
 800bbf8:	f000 fddd 	bl	800c7b6 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800bbfc:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bbfe:	6833      	ldr	r3, [r6, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	db21      	blt.n	800bc48 <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800bc04:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800bc08:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800bc0c:	1b2d      	subs	r5, r5, r4
 800bc0e:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800bc12:	1b3f      	subs	r7, r7, r4
 800bc14:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800bc18:	2400      	movs	r4, #0
 800bc1a:	e7df      	b.n	800bbdc <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bc1c:	f8db 1004 	ldr.w	r1, [fp, #4]
 800bc20:	464a      	mov	r2, r9
 800bc22:	4429      	add	r1, r5
 800bc24:	eb0a 0004 	add.w	r0, sl, r4
 800bc28:	f000 fdc5 	bl	800c7b6 <memcpy>
      framelength = framelength + byteslefttocopy;
 800bc2c:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 800bc2e:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 800bc32:	4644      	mov	r4, r8
 800bc34:	e7c9      	b.n	800bbca <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 800bc36:	4639      	mov	r1, r7
 800bc38:	480d      	ldr	r0, [pc, #52]	; (800bc70 <low_level_output+0xb8>)
 800bc3a:	f7f4 fe79 	bl	8000930 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800bc3e:	2000      	movs	r0, #0
 800bc40:	e004      	b.n	800bc4c <low_level_output+0x94>
        errval = ERR_USE;
 800bc42:	f06f 0007 	mvn.w	r0, #7
 800bc46:	e001      	b.n	800bc4c <low_level_output+0x94>
          errval = ERR_USE;
 800bc48:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800bc4c:	4b08      	ldr	r3, [pc, #32]	; (800bc70 <low_level_output+0xb8>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f241 0214 	movw	r2, #4116	; 0x1014
 800bc54:	589a      	ldr	r2, [r3, r2]
 800bc56:	f012 0f20 	tst.w	r2, #32
 800bc5a:	d007      	beq.n	800bc6c <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800bc5c:	2120      	movs	r1, #32
 800bc5e:	f241 0214 	movw	r2, #4116	; 0x1014
 800bc62:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800bc64:	2100      	movs	r1, #0
 800bc66:	f241 0204 	movw	r2, #4100	; 0x1004
 800bc6a:	5099      	str	r1, [r3, r2]
}
 800bc6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc70:	20008b28 	.word	0x20008b28

0800bc74 <low_level_init>:
{ 
 800bc74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc76:	b089      	sub	sp, #36	; 0x24
 800bc78:	4604      	mov	r4, r0
  heth.Instance = ETH;
 800bc7a:	4835      	ldr	r0, [pc, #212]	; (800bd50 <low_level_init+0xdc>)
 800bc7c:	4b35      	ldr	r3, [pc, #212]	; (800bd54 <low_level_init+0xe0>)
 800bc7e:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bc80:	2201      	movs	r2, #1
 800bc82:	6042      	str	r2, [r0, #4]
  heth.Init.PhyAddress = PHY_USER_NAME_PHY_ADDRESS;
 800bc84:	2300      	movs	r3, #0
 800bc86:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 800bc88:	f88d 3018 	strb.w	r3, [sp, #24]
  MACAddr[1] = 0x02;
 800bc8c:	2102      	movs	r1, #2
 800bc8e:	f88d 1019 	strb.w	r1, [sp, #25]
  MACAddr[2] = 0xA2;
 800bc92:	21a2      	movs	r1, #162	; 0xa2
 800bc94:	f88d 101a 	strb.w	r1, [sp, #26]
  MACAddr[3] = 0x42;
 800bc98:	2142      	movs	r1, #66	; 0x42
 800bc9a:	f88d 101b 	strb.w	r1, [sp, #27]
  MACAddr[4] = 0x50;
 800bc9e:	2150      	movs	r1, #80	; 0x50
 800bca0:	f88d 101c 	strb.w	r1, [sp, #28]
  MACAddr[5] = 0xE4;
 800bca4:	21e4      	movs	r1, #228	; 0xe4
 800bca6:	f88d 101d 	strb.w	r1, [sp, #29]
  heth.Init.MACAddr = &MACAddr[0];
 800bcaa:	a906      	add	r1, sp, #24
 800bcac:	6141      	str	r1, [r0, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800bcae:	6182      	str	r2, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800bcb0:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 800bcb2:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bcb4:	f7f4 ffd8 	bl	8000c68 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800bcb8:	b928      	cbnz	r0, 800bcc6 <low_level_init+0x52>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bcba:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800bcbe:	f043 0304 	orr.w	r3, r3, #4
 800bcc2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800bcc6:	4f22      	ldr	r7, [pc, #136]	; (800bd50 <low_level_init+0xdc>)
 800bcc8:	2304      	movs	r3, #4
 800bcca:	4a23      	ldr	r2, [pc, #140]	; (800bd58 <low_level_init+0xe4>)
 800bccc:	4923      	ldr	r1, [pc, #140]	; (800bd5c <low_level_init+0xe8>)
 800bcce:	4638      	mov	r0, r7
 800bcd0:	f7f4 fdbe 	bl	8000850 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800bcd4:	2304      	movs	r3, #4
 800bcd6:	4a22      	ldr	r2, [pc, #136]	; (800bd60 <low_level_init+0xec>)
 800bcd8:	4922      	ldr	r1, [pc, #136]	; (800bd64 <low_level_init+0xf0>)
 800bcda:	4638      	mov	r0, r7
 800bcdc:	f7f4 fdf1 	bl	80008c2 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bce0:	2306      	movs	r3, #6
 800bce2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	781a      	ldrb	r2, [r3, #0]
 800bcea:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bcee:	785a      	ldrb	r2, [r3, #1]
 800bcf0:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bcf4:	789a      	ldrb	r2, [r3, #2]
 800bcf6:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bcfa:	78da      	ldrb	r2, [r3, #3]
 800bcfc:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bd00:	791a      	ldrb	r2, [r3, #4]
 800bd02:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bd06:	795b      	ldrb	r3, [r3, #5]
 800bd08:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800bd0c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800bd10:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bd12:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800bd16:	f043 030a 	orr.w	r3, r3, #10
 800bd1a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  osSemaphoreDef(SEM);
 800bd1e:	a808      	add	r0, sp, #32
 800bd20:	2300      	movs	r3, #0
 800bd22:	f840 3d0c 	str.w	r3, [r0, #-12]!
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800bd26:	2101      	movs	r1, #1
 800bd28:	f7f6 fa14 	bl	8002154 <osSemaphoreCreate>
 800bd2c:	4b0e      	ldr	r3, [pc, #56]	; (800bd68 <low_level_init+0xf4>)
 800bd2e:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800bd30:	466d      	mov	r5, sp
 800bd32:	4e0e      	ldr	r6, [pc, #56]	; (800bd6c <low_level_init+0xf8>)
 800bd34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bd36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd38:	6833      	ldr	r3, [r6, #0]
 800bd3a:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	4668      	mov	r0, sp
 800bd40:	f7f6 f977 	bl	8002032 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800bd44:	4638      	mov	r0, r7
 800bd46:	f7f5 f8bb 	bl	8000ec0 <HAL_ETH_Start>
}
 800bd4a:	b009      	add	sp, #36	; 0x24
 800bd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	20008b28 	.word	0x20008b28
 800bd54:	40028000 	.word	0x40028000
 800bd58:	20008b70 	.word	0x20008b70
 800bd5c:	20007258 	.word	0x20007258
 800bd60:	200072d8 	.word	0x200072d8
 800bd64:	20008aa8 	.word	0x20008aa8
 800bd68:	20003f14 	.word	0x20003f14
 800bd6c:	0800c7f4 	.word	0x0800c7f4

0800bd70 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800bd70:	6802      	ldr	r2, [r0, #0]
 800bd72:	4b29      	ldr	r3, [pc, #164]	; (800be18 <HAL_ETH_MspInit+0xa8>)
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d000      	beq.n	800bd7a <HAL_ETH_MspInit+0xa>
 800bd78:	4770      	bx	lr
{
 800bd7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd7c:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_ETH_CLK_ENABLE();
 800bd7e:	2400      	movs	r4, #0
 800bd80:	9400      	str	r4, [sp, #0]
 800bd82:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800bd86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd88:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800bd8c:	631a      	str	r2, [r3, #48]	; 0x30
 800bd8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd90:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800bd94:	9200      	str	r2, [sp, #0]
 800bd96:	9a00      	ldr	r2, [sp, #0]
 800bd98:	9401      	str	r4, [sp, #4]
 800bd9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd9c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bda0:	631a      	str	r2, [r3, #48]	; 0x30
 800bda2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bda4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800bda8:	9201      	str	r2, [sp, #4]
 800bdaa:	9a01      	ldr	r2, [sp, #4]
 800bdac:	9402      	str	r4, [sp, #8]
 800bdae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdb0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800bdb4:	631a      	str	r2, [r3, #48]	; 0x30
 800bdb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdbc:	9302      	str	r3, [sp, #8]
 800bdbe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800bdc0:	233e      	movs	r3, #62	; 0x3e
 800bdc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdc4:	2702      	movs	r7, #2
 800bdc6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdc8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bdca:	2603      	movs	r6, #3
 800bdcc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bdce:	250b      	movs	r5, #11
 800bdd0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bdd2:	a903      	add	r1, sp, #12
 800bdd4:	4811      	ldr	r0, [pc, #68]	; (800be1c <HAL_ETH_MspInit+0xac>)
 800bdd6:	f7f5 f895 	bl	8000f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800bdda:	238f      	movs	r3, #143	; 0x8f
 800bddc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdde:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bde0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bde2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bde4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bde6:	a903      	add	r1, sp, #12
 800bde8:	480d      	ldr	r0, [pc, #52]	; (800be20 <HAL_ETH_MspInit+0xb0>)
 800bdea:	f7f5 f88b 	bl	8000f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 800bdee:	f643 5303 	movw	r3, #15619	; 0x3d03
 800bdf2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdf4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdf6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bdf8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bdfa:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bdfc:	a903      	add	r1, sp, #12
 800bdfe:	4809      	ldr	r0, [pc, #36]	; (800be24 <HAL_ETH_MspInit+0xb4>)
 800be00:	f7f5 f880 	bl	8000f04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800be04:	4622      	mov	r2, r4
 800be06:	2105      	movs	r1, #5
 800be08:	203d      	movs	r0, #61	; 0x3d
 800be0a:	f7f4 fbc3 	bl	8000594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800be0e:	203d      	movs	r0, #61	; 0x3d
 800be10:	f7f4 fbf2 	bl	80005f8 <HAL_NVIC_EnableIRQ>
}
 800be14:	b009      	add	sp, #36	; 0x24
 800be16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be18:	40028000 	.word	0x40028000
 800be1c:	40020800 	.word	0x40020800
 800be20:	40020000 	.word	0x40020000
 800be24:	40020400 	.word	0x40020400

0800be28 <HAL_ETH_RxCpltCallback>:
{
 800be28:	b508      	push	{r3, lr}
  osSemaphoreRelease(s_xSemaphore);
 800be2a:	4b02      	ldr	r3, [pc, #8]	; (800be34 <HAL_ETH_RxCpltCallback+0xc>)
 800be2c:	6818      	ldr	r0, [r3, #0]
 800be2e:	f7f6 f9df 	bl	80021f0 <osSemaphoreRelease>
 800be32:	bd08      	pop	{r3, pc}
 800be34:	20003f14 	.word	0x20003f14

0800be38 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800be38:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800be3a:	4604      	mov	r4, r0
 800be3c:	b170      	cbz	r0, 800be5c <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800be3e:	2373      	movs	r3, #115	; 0x73
 800be40:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800be44:	2374      	movs	r3, #116	; 0x74
 800be46:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800be4a:	4b08      	ldr	r3, [pc, #32]	; (800be6c <ethernetif_init+0x34>)
 800be4c:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800be4e:	4b08      	ldr	r3, [pc, #32]	; (800be70 <ethernetif_init+0x38>)
 800be50:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800be52:	4620      	mov	r0, r4
 800be54:	f7ff ff0e 	bl	800bc74 <low_level_init>

  return ERR_OK;
}
 800be58:	2000      	movs	r0, #0
 800be5a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800be5c:	4b05      	ldr	r3, [pc, #20]	; (800be74 <ethernetif_init+0x3c>)
 800be5e:	f240 2249 	movw	r2, #585	; 0x249
 800be62:	4905      	ldr	r1, [pc, #20]	; (800be78 <ethernetif_init+0x40>)
 800be64:	4805      	ldr	r0, [pc, #20]	; (800be7c <ethernetif_init+0x44>)
 800be66:	f000 fb90 	bl	800c58a <iprintf>
 800be6a:	e7e8      	b.n	800be3e <ethernetif_init+0x6>
 800be6c:	08005b71 	.word	0x08005b71
 800be70:	0800bbb9 	.word	0x0800bbb9
 800be74:	0800e820 	.word	0x0800e820
 800be78:	0800d07c 	.word	0x0800d07c
 800be7c:	0800c8d0 	.word	0x0800c8d0

0800be80 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800be80:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800be82:	f7f4 fb5b 	bl	800053c <HAL_GetTick>
}
 800be86:	bd08      	pop	{r3, pc}

0800be88 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 800be88:	b530      	push	{r4, r5, lr}
 800be8a:	b083      	sub	sp, #12
	/* init code for LWIP */
	MX_LWIP_Init();
 800be8c:	f000 f8ec 	bl	800c068 <MX_LWIP_Init>

	/* USER CODE BEGIN StartDefaultTask */
	printf("lwIP init completed.\n");
 800be90:	481c      	ldr	r0, [pc, #112]	; (800bf04 <StartDefaultTask+0x7c>)
 800be92:	f000 fb9d 	bl	800c5d0 <puts>
	struct netconn *conn;
	err_t err;
	conn = netconn_new(NETCONN_TCP);
 800be96:	2200      	movs	r2, #0
 800be98:	4611      	mov	r1, r2
 800be9a:	2010      	movs	r0, #16
 800be9c:	f7f7 ff8e 	bl	8003dbc <netconn_new_with_proto_and_callback>
	if (conn != NULL) {
 800bea0:	b1f8      	cbz	r0, 800bee2 <StartDefaultTask+0x5a>
 800bea2:	4604      	mov	r4, r0
		sock01.conn = conn;
 800bea4:	4b18      	ldr	r3, [pc, #96]	; (800bf08 <StartDefaultTask+0x80>)
 800bea6:	6018      	str	r0, [r3, #0]
		sock02.conn = conn;
 800bea8:	4b18      	ldr	r3, [pc, #96]	; (800bf0c <StartDefaultTask+0x84>)
 800beaa:	6018      	str	r0, [r3, #0]
		err = netconn_bind(conn, IP_ADDR_ANY, 80);
 800beac:	2250      	movs	r2, #80	; 0x50
 800beae:	4918      	ldr	r1, [pc, #96]	; (800bf10 <StartDefaultTask+0x88>)
 800beb0:	f7f7 fffa 	bl	8003ea8 <netconn_bind>
		if (err == ERR_OK) {
 800beb4:	bb08      	cbnz	r0, 800befa <StartDefaultTask+0x72>
			netconn_listen(conn);
 800beb6:	21ff      	movs	r1, #255	; 0xff
 800beb8:	4620      	mov	r0, r4
 800beba:	f7f8 f81b 	bl	8003ef4 <netconn_listen_with_backlog>
			sys_thread_new("tcp_thread1", tcp_thread, (void*) &sock01,
 800bebe:	4c15      	ldr	r4, [pc, #84]	; (800bf14 <StartDefaultTask+0x8c>)
 800bec0:	2500      	movs	r5, #0
 800bec2:	9500      	str	r5, [sp, #0]
 800bec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bec8:	4a0f      	ldr	r2, [pc, #60]	; (800bf08 <StartDefaultTask+0x80>)
 800beca:	4621      	mov	r1, r4
 800becc:	4812      	ldr	r0, [pc, #72]	; (800bf18 <StartDefaultTask+0x90>)
 800bece:	f7ff fdc0 	bl	800ba52 <sys_thread_new>
			DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
			sys_thread_new("tcp_thread2", tcp_thread, (void*) &sock02,
 800bed2:	9500      	str	r5, [sp, #0]
 800bed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bed8:	4a0c      	ldr	r2, [pc, #48]	; (800bf0c <StartDefaultTask+0x84>)
 800beda:	4621      	mov	r1, r4
 800bedc:	480f      	ldr	r0, [pc, #60]	; (800bf1c <StartDefaultTask+0x94>)
 800bede:	f7ff fdb8 	bl	800ba52 <sys_thread_new>
	}

	/* Infinite loop */
	for (;;) {

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 800bee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bee6:	480e      	ldr	r0, [pc, #56]	; (800bf20 <StartDefaultTask+0x98>)
 800bee8:	f7f5 f8f8 	bl	80010dc <HAL_GPIO_TogglePin>
		osDelay(249);
 800beec:	20f9      	movs	r0, #249	; 0xf9
 800beee:	f7f6 f8ba 	bl	8002066 <osDelay>

		osDelay(1);
 800bef2:	2001      	movs	r0, #1
 800bef4:	f7f6 f8b7 	bl	8002066 <osDelay>
 800bef8:	e7f3      	b.n	800bee2 <StartDefaultTask+0x5a>
			netconn_delete(conn);
 800befa:	4620      	mov	r0, r4
 800befc:	f7f7 ffba 	bl	8003e74 <netconn_delete>
 800bf00:	e7ef      	b.n	800bee2 <StartDefaultTask+0x5a>
 800bf02:	bf00      	nop
 800bf04:	0800e83c 	.word	0x0800e83c
 800bf08:	2000a344 	.word	0x2000a344
 800bf0c:	2000a348 	.word	0x2000a348
 800bf10:	0800d268 	.word	0x0800d268
 800bf14:	0800bf25 	.word	0x0800bf25
 800bf18:	0800e854 	.word	0x0800e854
 800bf1c:	0800e860 	.word	0x0800e860
 800bf20:	40020400 	.word	0x40020400

0800bf24 <tcp_thread>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
//---------------------------------------------------------------
static void tcp_thread(void *arg) {
 800bf24:	b510      	push	{r4, lr}
 800bf26:	b084      	sub	sp, #16
	struct netconn *conn;
	struct netbuf *inbuf;
	struct netconn *newconn;
	struct_sock *arg_sock;
	arg_sock = (struct_sock*) arg;
	conn = arg_sock->conn;
 800bf28:	6804      	ldr	r4, [r0, #0]
 800bf2a:	e005      	b.n	800bf38 <tcp_thread+0x14>
			for (;;) {
				recv_err = netconn_recv(newconn, &inbuf);
				if (recv_err == ERR_OK) {
					netbuf_data(inbuf, (void**) &buf, &buflen);
				} else {
					netbuf_delete(inbuf);
 800bf2c:	9803      	ldr	r0, [sp, #12]
 800bf2e:	f7f9 f8b7 	bl	80050a0 <netbuf_delete>
					netconn_close(newconn);
 800bf32:	9802      	ldr	r0, [sp, #8]
 800bf34:	f7f8 f8b2 	bl	800409c <netconn_close>
		err = netconn_accept(conn, &newconn);
 800bf38:	a902      	add	r1, sp, #8
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f7f7 fff8 	bl	8003f30 <netconn_accept>
		if (err == ERR_OK) {
 800bf40:	b960      	cbnz	r0, 800bf5c <tcp_thread+0x38>
				recv_err = netconn_recv(newconn, &inbuf);
 800bf42:	a903      	add	r1, sp, #12
 800bf44:	9802      	ldr	r0, [sp, #8]
 800bf46:	f7f8 f84f 	bl	8003fe8 <netconn_recv>
				if (recv_err == ERR_OK) {
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d1ee      	bne.n	800bf2c <tcp_thread+0x8>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 800bf4e:	f10d 0206 	add.w	r2, sp, #6
 800bf52:	4669      	mov	r1, sp
 800bf54:	9803      	ldr	r0, [sp, #12]
 800bf56:	f7f9 f8b3 	bl	80050c0 <netbuf_data>
				recv_err = netconn_recv(newconn, &inbuf);
 800bf5a:	e7f2      	b.n	800bf42 <tcp_thread+0x1e>
					break;
				}
			}
		} else {
			osDelay(1);
 800bf5c:	2001      	movs	r0, #1
 800bf5e:	f7f6 f882 	bl	8002066 <osDelay>
 800bf62:	e7e9      	b.n	800bf38 <tcp_thread+0x14>

0800bf64 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800bf64:	b530      	push	{r4, r5, lr}
 800bf66:	b087      	sub	sp, #28
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800bf68:	ac01      	add	r4, sp, #4
 800bf6a:	4d06      	ldr	r5, [pc, #24]	; (800bf84 <MX_FREERTOS_Init+0x20>)
 800bf6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	6023      	str	r3, [r4, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800bf74:	2100      	movs	r1, #0
 800bf76:	a801      	add	r0, sp, #4
 800bf78:	f7f6 f85b 	bl	8002032 <osThreadCreate>
 800bf7c:	4b02      	ldr	r3, [pc, #8]	; (800bf88 <MX_FREERTOS_Init+0x24>)
 800bf7e:	6018      	str	r0, [r3, #0]
}
 800bf80:	b007      	add	sp, #28
 800bf82:	bd30      	pop	{r4, r5, pc}
 800bf84:	0800c808 	.word	0x0800c808
 800bf88:	2000a340 	.word	0x2000a340

0800bf8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800bf8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf8e:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf90:	2400      	movs	r4, #0
 800bf92:	9407      	str	r4, [sp, #28]
 800bf94:	9408      	str	r4, [sp, #32]
 800bf96:	9409      	str	r4, [sp, #36]	; 0x24
 800bf98:	940a      	str	r4, [sp, #40]	; 0x28
 800bf9a:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bf9c:	9401      	str	r4, [sp, #4]
 800bf9e:	4b2f      	ldr	r3, [pc, #188]	; (800c05c <MX_GPIO_Init+0xd0>)
 800bfa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bfa6:	631a      	str	r2, [r3, #48]	; 0x30
 800bfa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfaa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800bfae:	9201      	str	r2, [sp, #4]
 800bfb0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bfb2:	9402      	str	r4, [sp, #8]
 800bfb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfb6:	f042 0204 	orr.w	r2, r2, #4
 800bfba:	631a      	str	r2, [r3, #48]	; 0x30
 800bfbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfbe:	f002 0204 	and.w	r2, r2, #4
 800bfc2:	9202      	str	r2, [sp, #8]
 800bfc4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfc6:	9403      	str	r4, [sp, #12]
 800bfc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfca:	f042 0201 	orr.w	r2, r2, #1
 800bfce:	631a      	str	r2, [r3, #48]	; 0x30
 800bfd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfd2:	f002 0201 	and.w	r2, r2, #1
 800bfd6:	9203      	str	r2, [sp, #12]
 800bfd8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bfda:	9404      	str	r4, [sp, #16]
 800bfdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfde:	f042 0202 	orr.w	r2, r2, #2
 800bfe2:	631a      	str	r2, [r3, #48]	; 0x30
 800bfe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfe6:	f002 0202 	and.w	r2, r2, #2
 800bfea:	9204      	str	r2, [sp, #16]
 800bfec:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bfee:	9405      	str	r4, [sp, #20]
 800bff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bff2:	f042 0208 	orr.w	r2, r2, #8
 800bff6:	631a      	str	r2, [r3, #48]	; 0x30
 800bff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bffa:	f002 0208 	and.w	r2, r2, #8
 800bffe:	9205      	str	r2, [sp, #20]
 800c000:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c002:	9406      	str	r4, [sp, #24]
 800c004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c006:	f042 0210 	orr.w	r2, r2, #16
 800c00a:	631a      	str	r2, [r3, #48]	; 0x30
 800c00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00e:	f003 0310 	and.w	r3, r3, #16
 800c012:	9306      	str	r3, [sp, #24]
 800c014:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c016:	4f12      	ldr	r7, [pc, #72]	; (800c060 <MX_GPIO_Init+0xd4>)
 800c018:	4622      	mov	r2, r4
 800c01a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c01e:	4638      	mov	r0, r7
 800c020:	f7f5 f856 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_OUT_GPIO_Port, RE_DE_OUT_Pin, GPIO_PIN_RESET);
 800c024:	4e0f      	ldr	r6, [pc, #60]	; (800c064 <MX_GPIO_Init+0xd8>)
 800c026:	4622      	mov	r2, r4
 800c028:	2101      	movs	r1, #1
 800c02a:	4630      	mov	r0, r6
 800c02c:	f7f5 f850 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c030:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c034:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c036:	2501      	movs	r5, #1
 800c038:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c03a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c03c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c03e:	a907      	add	r1, sp, #28
 800c040:	4638      	mov	r0, r7
 800c042:	f7f4 ff5f 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_OUT_Pin;
 800c046:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c048:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c04a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c04c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(RE_DE_OUT_GPIO_Port, &GPIO_InitStruct);
 800c04e:	a907      	add	r1, sp, #28
 800c050:	4630      	mov	r0, r6
 800c052:	f7f4 ff57 	bl	8000f04 <HAL_GPIO_Init>

}
 800c056:	b00d      	add	sp, #52	; 0x34
 800c058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c05a:	bf00      	nop
 800c05c:	40023800 	.word	0x40023800
 800c060:	40020400 	.word	0x40020400
 800c064:	40021000 	.word	0x40021000

0800c068 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c06a:	b085      	sub	sp, #20
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800c06c:	4f3b      	ldr	r7, [pc, #236]	; (800c15c <MX_LWIP_Init+0xf4>)
 800c06e:	23c0      	movs	r3, #192	; 0xc0
 800c070:	703b      	strb	r3, [r7, #0]
  IP_ADDRESS[1] = 168;
 800c072:	23a8      	movs	r3, #168	; 0xa8
 800c074:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 4;
 800c076:	2304      	movs	r3, #4
 800c078:	70bb      	strb	r3, [r7, #2]
  IP_ADDRESS[3] = 253;
 800c07a:	23fd      	movs	r3, #253	; 0xfd
 800c07c:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 800c07e:	4e38      	ldr	r6, [pc, #224]	; (800c160 <MX_LWIP_Init+0xf8>)
 800c080:	23ff      	movs	r3, #255	; 0xff
 800c082:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 800c084:	7073      	strb	r3, [r6, #1]
  NETMASK_ADDRESS[2] = 255;
 800c086:	70b3      	strb	r3, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 800c088:	2400      	movs	r4, #0
 800c08a:	70f4      	strb	r4, [r6, #3]
  GATEWAY_ADDRESS[0] = 0;
 800c08c:	4d35      	ldr	r5, [pc, #212]	; (800c164 <MX_LWIP_Init+0xfc>)
 800c08e:	702c      	strb	r4, [r5, #0]
  GATEWAY_ADDRESS[1] = 0;
 800c090:	706c      	strb	r4, [r5, #1]
  GATEWAY_ADDRESS[2] = 0;
 800c092:	70ac      	strb	r4, [r5, #2]
  GATEWAY_ADDRESS[3] = 0;
 800c094:	70ec      	strb	r4, [r5, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800c096:	4621      	mov	r1, r4
 800c098:	4620      	mov	r0, r4
 800c09a:	f7f9 f929 	bl	80052f0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c09e:	783a      	ldrb	r2, [r7, #0]
 800c0a0:	787b      	ldrb	r3, [r7, #1]
 800c0a2:	041b      	lsls	r3, r3, #16
 800c0a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c0a8:	78ba      	ldrb	r2, [r7, #2]
 800c0aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c0ae:	78fa      	ldrb	r2, [r7, #3]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	021a      	lsls	r2, r3, #8
 800c0b4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800c0b8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800c0bc:	0a19      	lsrs	r1, r3, #8
 800c0be:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800c0c2:	430a      	orrs	r2, r1
 800c0c4:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800c0c8:	4927      	ldr	r1, [pc, #156]	; (800c168 <MX_LWIP_Init+0x100>)
 800c0ca:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c0cc:	7832      	ldrb	r2, [r6, #0]
 800c0ce:	7873      	ldrb	r3, [r6, #1]
 800c0d0:	041b      	lsls	r3, r3, #16
 800c0d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c0d6:	78b2      	ldrb	r2, [r6, #2]
 800c0d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c0dc:	78f2      	ldrb	r2, [r6, #3]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	021a      	lsls	r2, r3, #8
 800c0e2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800c0e6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800c0ea:	0a18      	lsrs	r0, r3, #8
 800c0ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800c0f0:	4302      	orrs	r2, r0
 800c0f2:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800c0f6:	4a1d      	ldr	r2, [pc, #116]	; (800c16c <MX_LWIP_Init+0x104>)
 800c0f8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c0fa:	7828      	ldrb	r0, [r5, #0]
 800c0fc:	786b      	ldrb	r3, [r5, #1]
 800c0fe:	041b      	lsls	r3, r3, #16
 800c100:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c104:	78a8      	ldrb	r0, [r5, #2]
 800c106:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800c10a:	78e8      	ldrb	r0, [r5, #3]
 800c10c:	4303      	orrs	r3, r0
 800c10e:	0218      	lsls	r0, r3, #8
 800c110:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800c114:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800c118:	0a1d      	lsrs	r5, r3, #8
 800c11a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 800c11e:	4328      	orrs	r0, r5
 800c120:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
 800c124:	4b12      	ldr	r3, [pc, #72]	; (800c170 <MX_LWIP_Init+0x108>)
 800c126:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c128:	4d12      	ldr	r5, [pc, #72]	; (800c174 <MX_LWIP_Init+0x10c>)
 800c12a:	4813      	ldr	r0, [pc, #76]	; (800c178 <MX_LWIP_Init+0x110>)
 800c12c:	9002      	str	r0, [sp, #8]
 800c12e:	4813      	ldr	r0, [pc, #76]	; (800c17c <MX_LWIP_Init+0x114>)
 800c130:	9001      	str	r0, [sp, #4]
 800c132:	9400      	str	r4, [sp, #0]
 800c134:	4628      	mov	r0, r5
 800c136:	f7fa ffe3 	bl	8007100 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c13a:	4628      	mov	r0, r5
 800c13c:	f7fb f820 	bl	8007180 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c140:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800c144:	f013 0f04 	tst.w	r3, #4
 800c148:	d104      	bne.n	800c154 <MX_LWIP_Init+0xec>
    netif_set_up(&gnetif);
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800c14a:	480a      	ldr	r0, [pc, #40]	; (800c174 <MX_LWIP_Init+0x10c>)
 800c14c:	f7fb f830 	bl	80071b0 <netif_set_down>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c150:	b005      	add	sp, #20
 800c152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 800c154:	4628      	mov	r0, r5
 800c156:	f7fb f819 	bl	800718c <netif_set_up>
 800c15a:	e7f9      	b.n	800c150 <MX_LWIP_Init+0xe8>
 800c15c:	2000a388 	.word	0x2000a388
 800c160:	2000a384 	.word	0x2000a384
 800c164:	2000a34c 	.word	0x2000a34c
 800c168:	2000a380 	.word	0x2000a380
 800c16c:	2000a38c 	.word	0x2000a38c
 800c170:	2000a390 	.word	0x2000a390
 800c174:	2000a350 	.word	0x2000a350
 800c178:	08005239 	.word	0x08005239
 800c17c:	0800be39 	.word	0x0800be39

0800c180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c180:	b570      	push	{r4, r5, r6, lr}
 800c182:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c184:	2230      	movs	r2, #48	; 0x30
 800c186:	2100      	movs	r1, #0
 800c188:	a808      	add	r0, sp, #32
 800c18a:	f000 fb1f 	bl	800c7cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c18e:	2400      	movs	r4, #0
 800c190:	9403      	str	r4, [sp, #12]
 800c192:	9404      	str	r4, [sp, #16]
 800c194:	9405      	str	r4, [sp, #20]
 800c196:	9406      	str	r4, [sp, #24]
 800c198:	9407      	str	r4, [sp, #28]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c19a:	9401      	str	r4, [sp, #4]
 800c19c:	4b1c      	ldr	r3, [pc, #112]	; (800c210 <SystemClock_Config+0x90>)
 800c19e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c1a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c1a4:	641a      	str	r2, [r3, #64]	; 0x40
 800c1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c1b0:	9402      	str	r4, [sp, #8]
 800c1b2:	4b18      	ldr	r3, [pc, #96]	; (800c214 <SystemClock_Config+0x94>)
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1ba:	601a      	str	r2, [r3, #0]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1c2:	9302      	str	r3, [sp, #8]
 800c1c4:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c1ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c1ce:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c1d0:	2502      	movs	r5, #2
 800c1d2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c1d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c1d8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800c1da:	2319      	movs	r3, #25
 800c1dc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800c1de:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800c1e2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c1e4:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800c1e6:	2605      	movs	r6, #5
 800c1e8:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c1ea:	a808      	add	r0, sp, #32
 800c1ec:	f7f4 ff7a 	bl	80010e4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c1f0:	230f      	movs	r3, #15
 800c1f2:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c1f4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c1f6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c1f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c1fc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c1fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c202:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c204:	4631      	mov	r1, r6
 800c206:	a803      	add	r0, sp, #12
 800c208:	f7f5 f98a 	bl	8001520 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800c20c:	b014      	add	sp, #80	; 0x50
 800c20e:	bd70      	pop	{r4, r5, r6, pc}
 800c210:	40023800 	.word	0x40023800
 800c214:	40007000 	.word	0x40007000

0800c218 <main>:
{
 800c218:	b508      	push	{r3, lr}
  HAL_Init();
 800c21a:	f7f4 f969 	bl	80004f0 <HAL_Init>
  SystemClock_Config();
 800c21e:	f7ff ffaf 	bl	800c180 <SystemClock_Config>
  MX_GPIO_Init();
 800c222:	f7ff feb3 	bl	800bf8c <MX_GPIO_Init>
  MX_UART5_Init();
 800c226:	f000 f9ef 	bl	800c608 <MX_UART5_Init>
  MX_FREERTOS_Init();
 800c22a:	f7ff fe9b 	bl	800bf64 <MX_FREERTOS_Init>
  osKernelStart();
 800c22e:	f7f5 fef1 	bl	8002014 <osKernelStart>
 800c232:	e7fe      	b.n	800c232 <main+0x1a>

0800c234 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c234:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800c236:	6802      	ldr	r2, [r0, #0]
 800c238:	4b03      	ldr	r3, [pc, #12]	; (800c248 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d000      	beq.n	800c240 <HAL_TIM_PeriodElapsedCallback+0xc>
 800c23e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800c240:	f7f4 f970 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800c244:	e7fb      	b.n	800c23e <HAL_TIM_PeriodElapsedCallback+0xa>
 800c246:	bf00      	nop
 800c248:	40010000 	.word	0x40010000

0800c24c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c24c:	4770      	bx	lr
	...

0800c250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c250:	b500      	push	{lr}
 800c252:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c254:	2200      	movs	r2, #0
 800c256:	9200      	str	r2, [sp, #0]
 800c258:	4b0d      	ldr	r3, [pc, #52]	; (800c290 <HAL_MspInit+0x40>)
 800c25a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c25c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800c260:	6459      	str	r1, [r3, #68]	; 0x44
 800c262:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c264:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800c268:	9100      	str	r1, [sp, #0]
 800c26a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c26c:	9201      	str	r2, [sp, #4]
 800c26e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c270:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800c274:	6419      	str	r1, [r3, #64]	; 0x40
 800c276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c280:	210f      	movs	r1, #15
 800c282:	f06f 0001 	mvn.w	r0, #1
 800c286:	f7f4 f985 	bl	8000594 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c28a:	b003      	add	sp, #12
 800c28c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c290:	40023800 	.word	0x40023800

0800c294 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c294:	b510      	push	{r4, lr}
 800c296:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800c298:	2200      	movs	r2, #0
 800c29a:	4601      	mov	r1, r0
 800c29c:	2019      	movs	r0, #25
 800c29e:	f7f4 f979 	bl	8000594 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800c2a2:	2019      	movs	r0, #25
 800c2a4:	f7f4 f9a8 	bl	80005f8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800c2a8:	2400      	movs	r4, #0
 800c2aa:	9401      	str	r4, [sp, #4]
 800c2ac:	4b14      	ldr	r3, [pc, #80]	; (800c300 <HAL_InitTick+0x6c>)
 800c2ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2b0:	f042 0201 	orr.w	r2, r2, #1
 800c2b4:	645a      	str	r2, [r3, #68]	; 0x44
 800c2b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2b8:	f003 0301 	and.w	r3, r3, #1
 800c2bc:	9301      	str	r3, [sp, #4]
 800c2be:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c2c0:	a902      	add	r1, sp, #8
 800c2c2:	a803      	add	r0, sp, #12
 800c2c4:	f7f5 f9fe 	bl	80016c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800c2c8:	f7f5 f9ec 	bl	80016a4 <HAL_RCC_GetPCLK2Freq>
 800c2cc:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c2ce:	480d      	ldr	r0, [pc, #52]	; (800c304 <HAL_InitTick+0x70>)
 800c2d0:	fba0 2303 	umull	r2, r3, r0, r3
 800c2d4:	0c9b      	lsrs	r3, r3, #18
 800c2d6:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800c2d8:	480b      	ldr	r0, [pc, #44]	; (800c308 <HAL_InitTick+0x74>)
 800c2da:	4a0c      	ldr	r2, [pc, #48]	; (800c30c <HAL_InitTick+0x78>)
 800c2dc:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800c2de:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c2e2:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800c2e4:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 800c2e6:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c2e8:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800c2ea:	f7f5 fb65 	bl	80019b8 <HAL_TIM_Base_Init>
 800c2ee:	b110      	cbz	r0, 800c2f6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c2f0:	2001      	movs	r0, #1
}
 800c2f2:	b008      	add	sp, #32
 800c2f4:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 800c2f6:	4804      	ldr	r0, [pc, #16]	; (800c308 <HAL_InitTick+0x74>)
 800c2f8:	f7f5 fa03 	bl	8001702 <HAL_TIM_Base_Start_IT>
 800c2fc:	e7f9      	b.n	800c2f2 <HAL_InitTick+0x5e>
 800c2fe:	bf00      	nop
 800c300:	40023800 	.word	0x40023800
 800c304:	431bde83 	.word	0x431bde83
 800c308:	2000a394 	.word	0x2000a394
 800c30c:	40010000 	.word	0x40010000

0800c310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c310:	4770      	bx	lr

0800c312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c312:	e7fe      	b.n	800c312 <HardFault_Handler>

0800c314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c314:	e7fe      	b.n	800c314 <MemManage_Handler>

0800c316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c316:	e7fe      	b.n	800c316 <BusFault_Handler>

0800c318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c318:	e7fe      	b.n	800c318 <UsageFault_Handler>

0800c31a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c31a:	4770      	bx	lr

0800c31c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800c31c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c31e:	4802      	ldr	r0, [pc, #8]	; (800c328 <TIM1_UP_TIM10_IRQHandler+0xc>)
 800c320:	f7f5 f9ff 	bl	8001722 <HAL_TIM_IRQHandler>
 800c324:	bd08      	pop	{r3, pc}
 800c326:	bf00      	nop
 800c328:	2000a394 	.word	0x2000a394

0800c32c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800c32c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800c32e:	4802      	ldr	r0, [pc, #8]	; (800c338 <UART5_IRQHandler+0xc>)
 800c330:	f7f5 fdcc 	bl	8001ecc <HAL_UART_IRQHandler>
 800c334:	bd08      	pop	{r3, pc}
 800c336:	bf00      	nop
 800c338:	2000a3d0 	.word	0x2000a3d0

0800c33c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800c33c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800c33e:	4802      	ldr	r0, [pc, #8]	; (800c348 <ETH_IRQHandler+0xc>)
 800c340:	f7f4 fbd6 	bl	8000af0 <HAL_ETH_IRQHandler>
 800c344:	bd08      	pop	{r3, pc}
 800c346:	bf00      	nop
 800c348:	20008b28 	.word	0x20008b28

0800c34c <_write>:
	}

	return len;
}

int _write(int file, char *ptr, int len) {
 800c34c:	b430      	push	{r4, r5}
	int i = 0;
	for (i = 0; i < len; i++)
 800c34e:	2400      	movs	r4, #0
 800c350:	e00a      	b.n	800c368 <_write+0x1c>
  __ASM volatile ("nop");
 800c352:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800c354:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d0f9      	beq.n	800c352 <_write+0x6>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800c35e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800c362:	7019      	strb	r1, [r3, #0]
 800c364:	3401      	adds	r4, #1
		ITM_SendChar((*ptr++));
 800c366:	4629      	mov	r1, r5
	for (i = 0; i < len; i++)
 800c368:	4294      	cmp	r4, r2
 800c36a:	da10      	bge.n	800c38e <_write+0x42>
		ITM_SendChar((*ptr++));
 800c36c:	1c4d      	adds	r5, r1, #1
 800c36e:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800c370:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800c374:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800c378:	f013 0f01 	tst.w	r3, #1
 800c37c:	d0f2      	beq.n	800c364 <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800c37e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800c382:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800c386:	f013 0f01 	tst.w	r3, #1
 800c38a:	d1e3      	bne.n	800c354 <_write+0x8>
 800c38c:	e7ea      	b.n	800c364 <_write+0x18>
	return len;
}
 800c38e:	4610      	mov	r0, r2
 800c390:	bc30      	pop	{r4, r5}
 800c392:	4770      	bx	lr

0800c394 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c394:	490f      	ldr	r1, [pc, #60]	; (800c3d4 <SystemInit+0x40>)
 800c396:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800c39a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c39e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c3a2:	4b0d      	ldr	r3, [pc, #52]	; (800c3d8 <SystemInit+0x44>)
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	f042 0201 	orr.w	r2, r2, #1
 800c3aa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800c3b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c3ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c3bc:	4a07      	ldr	r2, [pc, #28]	; (800c3dc <SystemInit+0x48>)
 800c3be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c3c6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c3c8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c3ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c3ce:	608b      	str	r3, [r1, #8]
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	e000ed00 	.word	0xe000ed00
 800c3d8:	40023800 	.word	0x40023800
 800c3dc:	24003010 	.word	0x24003010

0800c3e0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800c3e0:	b470      	push	{r4, r5, r6}
	int div = 1;
 800c3e2:	2301      	movs	r3, #1
	while (d/div >= base)
 800c3e4:	e001      	b.n	800c3ea <ts_itoa+0xa>
		div *= base;
 800c3e6:	fb02 f303 	mul.w	r3, r2, r3
	while (d/div >= base)
 800c3ea:	fbb1 f4f3 	udiv	r4, r1, r3
 800c3ee:	4294      	cmp	r4, r2
 800c3f0:	d2f9      	bcs.n	800c3e6 <ts_itoa+0x6>
 800c3f2:	e004      	b.n	800c3fe <ts_itoa+0x1e>
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 800c3f4:	6805      	ldr	r5, [r0, #0]
 800c3f6:	1c6e      	adds	r6, r5, #1
 800c3f8:	6006      	str	r6, [r0, #0]
 800c3fa:	3430      	adds	r4, #48	; 0x30
 800c3fc:	702c      	strb	r4, [r5, #0]
	while (div != 0)
 800c3fe:	b16b      	cbz	r3, 800c41c <ts_itoa+0x3c>
		int num = d/div;
 800c400:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 800c404:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 800c408:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 800c40c:	2c09      	cmp	r4, #9
 800c40e:	ddf1      	ble.n	800c3f4 <ts_itoa+0x14>
			*((*buf)++) = (num-10) + 'A';
 800c410:	6805      	ldr	r5, [r0, #0]
 800c412:	1c6e      	adds	r6, r5, #1
 800c414:	6006      	str	r6, [r0, #0]
 800c416:	3437      	adds	r4, #55	; 0x37
 800c418:	702c      	strb	r4, [r5, #0]
 800c41a:	e7f0      	b.n	800c3fe <ts_itoa+0x1e>
	}
}
 800c41c:	bc70      	pop	{r4, r5, r6}
 800c41e:	4770      	bx	lr

0800c420 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800c420:	b530      	push	{r4, r5, lr}
 800c422:	b083      	sub	sp, #12
 800c424:	9001      	str	r0, [sp, #4]
 800c426:	460c      	mov	r4, r1
 800c428:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 800c42a:	4605      	mov	r5, r0
	while(*fmt)
 800c42c:	e03e      	b.n	800c4ac <ts_formatstring+0x8c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 800c42e:	7863      	ldrb	r3, [r4, #1]
 800c430:	2b64      	cmp	r3, #100	; 0x64
 800c432:	d01c      	beq.n	800c46e <ts_formatstring+0x4e>
 800c434:	d90d      	bls.n	800c452 <ts_formatstring+0x32>
 800c436:	2b73      	cmp	r3, #115	; 0x73
 800c438:	d04a      	beq.n	800c4d0 <ts_formatstring+0xb0>
 800c43a:	d916      	bls.n	800c46a <ts_formatstring+0x4a>
 800c43c:	2b75      	cmp	r3, #117	; 0x75
 800c43e:	d121      	bne.n	800c484 <ts_formatstring+0x64>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800c440:	9b00      	ldr	r3, [sp, #0]
 800c442:	1d1a      	adds	r2, r3, #4
 800c444:	9200      	str	r2, [sp, #0]
 800c446:	220a      	movs	r2, #10
 800c448:	6819      	ldr	r1, [r3, #0]
 800c44a:	a801      	add	r0, sp, #4
 800c44c:	f7ff ffc8 	bl	800c3e0 <ts_itoa>
				break;
 800c450:	e02b      	b.n	800c4aa <ts_formatstring+0x8a>
			switch (*(++fmt))
 800c452:	2b58      	cmp	r3, #88	; 0x58
 800c454:	d018      	beq.n	800c488 <ts_formatstring+0x68>
 800c456:	2b63      	cmp	r3, #99	; 0x63
 800c458:	d01f      	beq.n	800c49a <ts_formatstring+0x7a>
 800c45a:	2b25      	cmp	r3, #37	; 0x25
 800c45c:	d125      	bne.n	800c4aa <ts_formatstring+0x8a>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 800c45e:	9b01      	ldr	r3, [sp, #4]
 800c460:	1c5a      	adds	r2, r3, #1
 800c462:	9201      	str	r2, [sp, #4]
 800c464:	2225      	movs	r2, #37	; 0x25
 800c466:	701a      	strb	r2, [r3, #0]
				  break;
 800c468:	e01f      	b.n	800c4aa <ts_formatstring+0x8a>
			switch (*(++fmt))
 800c46a:	2b69      	cmp	r3, #105	; 0x69
 800c46c:	d11d      	bne.n	800c4aa <ts_formatstring+0x8a>
					signed int val = va_arg(va, signed int);
 800c46e:	9b00      	ldr	r3, [sp, #0]
 800c470:	1d1a      	adds	r2, r3, #4
 800c472:	9200      	str	r2, [sp, #0]
 800c474:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 800c476:	2900      	cmp	r1, #0
 800c478:	db23      	blt.n	800c4c2 <ts_formatstring+0xa2>
					ts_itoa(&buf, val, 10);
 800c47a:	220a      	movs	r2, #10
 800c47c:	a801      	add	r0, sp, #4
 800c47e:	f7ff ffaf 	bl	800c3e0 <ts_itoa>
				break;
 800c482:	e012      	b.n	800c4aa <ts_formatstring+0x8a>
			switch (*(++fmt))
 800c484:	2b78      	cmp	r3, #120	; 0x78
 800c486:	d110      	bne.n	800c4aa <ts_formatstring+0x8a>
					ts_itoa(&buf, va_arg(va, int), 16);
 800c488:	9b00      	ldr	r3, [sp, #0]
 800c48a:	1d1a      	adds	r2, r3, #4
 800c48c:	9200      	str	r2, [sp, #0]
 800c48e:	2210      	movs	r2, #16
 800c490:	6819      	ldr	r1, [r3, #0]
 800c492:	a801      	add	r0, sp, #4
 800c494:	f7ff ffa4 	bl	800c3e0 <ts_itoa>
				break;
 800c498:	e007      	b.n	800c4aa <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 800c49a:	9b01      	ldr	r3, [sp, #4]
 800c49c:	1c5a      	adds	r2, r3, #1
 800c49e:	9201      	str	r2, [sp, #4]
 800c4a0:	9a00      	ldr	r2, [sp, #0]
 800c4a2:	1d11      	adds	r1, r2, #4
 800c4a4:	9100      	str	r1, [sp, #0]
 800c4a6:	6812      	ldr	r2, [r2, #0]
 800c4a8:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 800c4aa:	3402      	adds	r4, #2
	while(*fmt)
 800c4ac:	7823      	ldrb	r3, [r4, #0]
 800c4ae:	b1f3      	cbz	r3, 800c4ee <ts_formatstring+0xce>
		if (*fmt == '%')
 800c4b0:	2b25      	cmp	r3, #37	; 0x25
 800c4b2:	d0bc      	beq.n	800c42e <ts_formatstring+0xe>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800c4b4:	9b01      	ldr	r3, [sp, #4]
 800c4b6:	1c5a      	adds	r2, r3, #1
 800c4b8:	9201      	str	r2, [sp, #4]
 800c4ba:	7822      	ldrb	r2, [r4, #0]
 800c4bc:	701a      	strb	r2, [r3, #0]
 800c4be:	3401      	adds	r4, #1
 800c4c0:	e7f4      	b.n	800c4ac <ts_formatstring+0x8c>
						val *= -1;
 800c4c2:	4249      	negs	r1, r1
						*buf++ = '-';
 800c4c4:	9b01      	ldr	r3, [sp, #4]
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	9201      	str	r2, [sp, #4]
 800c4ca:	222d      	movs	r2, #45	; 0x2d
 800c4cc:	701a      	strb	r2, [r3, #0]
 800c4ce:	e7d4      	b.n	800c47a <ts_formatstring+0x5a>
					char * arg = va_arg(va, char *);
 800c4d0:	9b00      	ldr	r3, [sp, #0]
 800c4d2:	1d1a      	adds	r2, r3, #4
 800c4d4:	9200      	str	r2, [sp, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 800c4d8:	e005      	b.n	800c4e6 <ts_formatstring+0xc6>
						*buf++ = *arg++;
 800c4da:	9a01      	ldr	r2, [sp, #4]
 800c4dc:	1c51      	adds	r1, r2, #1
 800c4de:	9101      	str	r1, [sp, #4]
 800c4e0:	7819      	ldrb	r1, [r3, #0]
 800c4e2:	7011      	strb	r1, [r2, #0]
 800c4e4:	3301      	adds	r3, #1
					while (*arg)
 800c4e6:	781a      	ldrb	r2, [r3, #0]
 800c4e8:	2a00      	cmp	r2, #0
 800c4ea:	d1f6      	bne.n	800c4da <ts_formatstring+0xba>
 800c4ec:	e7dd      	b.n	800c4aa <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	9b01      	ldr	r3, [sp, #4]
 800c4f2:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 800c4f4:	9801      	ldr	r0, [sp, #4]
 800c4f6:	1b40      	subs	r0, r0, r5
 800c4f8:	b003      	add	sp, #12
 800c4fa:	bd30      	pop	{r4, r5, pc}

0800c4fc <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	4603      	mov	r3, r0
 800c500:	9101      	str	r1, [sp, #4]
	int length = 0;
 800c502:	2000      	movs	r0, #0
	while (*fmt)
 800c504:	e01d      	b.n	800c542 <ts_formatlength+0x46>
	{
		if (*fmt == '%')
		{
			++fmt;
 800c506:	1c59      	adds	r1, r3, #1
			switch (*fmt)
 800c508:	785b      	ldrb	r3, [r3, #1]
 800c50a:	3b58      	subs	r3, #88	; 0x58
 800c50c:	2b20      	cmp	r3, #32
 800c50e:	d837      	bhi.n	800c580 <ts_formatlength+0x84>
 800c510:	e8df f003 	tbb	[pc, r3]
 800c514:	36363630 	.word	0x36363630
 800c518:	36363636 	.word	0x36363636
 800c51c:	11363636 	.word	0x11363636
 800c520:	3636361d 	.word	0x3636361d
 800c524:	36361d36 	.word	0x36361d36
 800c528:	36363636 	.word	0x36363636
 800c52c:	23363636 	.word	0x23363636
 800c530:	36361d36 	.word	0x36361d36
 800c534:	30          	.byte	0x30
 800c535:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 800c536:	9b01      	ldr	r3, [sp, #4]
 800c538:	3304      	adds	r3, #4
 800c53a:	9301      	str	r3, [sp, #4]
				  ++length;
 800c53c:	3001      	adds	r0, #1
			++fmt;
 800c53e:	460b      	mov	r3, r1
		}
		else
		{
			++length;
		}
		++fmt;
 800c540:	3301      	adds	r3, #1
	while (*fmt)
 800c542:	781a      	ldrb	r2, [r3, #0]
 800c544:	b1fa      	cbz	r2, 800c586 <ts_formatlength+0x8a>
		if (*fmt == '%')
 800c546:	2a25      	cmp	r2, #37	; 0x25
 800c548:	d0dd      	beq.n	800c506 <ts_formatlength+0xa>
			++length;
 800c54a:	3001      	adds	r0, #1
 800c54c:	e7f8      	b.n	800c540 <ts_formatlength+0x44>
				  length += 11;
 800c54e:	300b      	adds	r0, #11
				  va_arg(va, int);
 800c550:	9b01      	ldr	r3, [sp, #4]
 800c552:	3304      	adds	r3, #4
 800c554:	9301      	str	r3, [sp, #4]
			++fmt;
 800c556:	460b      	mov	r3, r1
 800c558:	e7f2      	b.n	800c540 <ts_formatlength+0x44>
			  		  char * str = va_arg(va, char *);
 800c55a:	9b01      	ldr	r3, [sp, #4]
 800c55c:	1d1a      	adds	r2, r3, #4
 800c55e:	9201      	str	r2, [sp, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
			  		  while (*str++)
 800c562:	e001      	b.n	800c568 <ts_formatlength+0x6c>
			  			  ++length;
 800c564:	3001      	adds	r0, #1
			  		  while (*str++)
 800c566:	4613      	mov	r3, r2
 800c568:	1c5a      	adds	r2, r3, #1
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1f9      	bne.n	800c564 <ts_formatlength+0x68>
			++fmt;
 800c570:	460b      	mov	r3, r1
 800c572:	e7e5      	b.n	800c540 <ts_formatlength+0x44>
				  length += 8;
 800c574:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 800c576:	9b01      	ldr	r3, [sp, #4]
 800c578:	3304      	adds	r3, #4
 800c57a:	9301      	str	r3, [sp, #4]
			++fmt;
 800c57c:	460b      	mov	r3, r1
 800c57e:	e7df      	b.n	800c540 <ts_formatlength+0x44>
				  ++length;
 800c580:	3001      	adds	r0, #1
			++fmt;
 800c582:	460b      	mov	r3, r1
				  break;
 800c584:	e7dc      	b.n	800c540 <ts_formatlength+0x44>
	}
	return length;
}
 800c586:	b002      	add	sp, #8
 800c588:	4770      	bx	lr

0800c58a <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 800c58a:	b40f      	push	{r0, r1, r2, r3}
 800c58c:	b5b0      	push	{r4, r5, r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	f107 0418 	add.w	r4, r7, #24
 800c596:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 800c59a:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 800c59c:	4621      	mov	r1, r4
 800c59e:	4628      	mov	r0, r5
 800c5a0:	f7ff ffac 	bl	800c4fc <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 800c5a4:	3007      	adds	r0, #7
 800c5a6:	f020 0007 	bic.w	r0, r0, #7
 800c5aa:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
 800c5ae:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 800c5b0:	4622      	mov	r2, r4
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	4668      	mov	r0, sp
 800c5b6:	f7ff ff33 	bl	800c420 <ts_formatstring>
		length = _write(1, buf, length);
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	4669      	mov	r1, sp
 800c5be:	2001      	movs	r0, #1
 800c5c0:	f7ff fec4 	bl	800c34c <_write>
		va_end(va);
	}
	return length;
}
 800c5c4:	3708      	adds	r7, #8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c5cc:	b004      	add	sp, #16
 800c5ce:	4770      	bx	lr

0800c5d0 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 800c5d0:	b538      	push	{r3, r4, r5, lr}
 800c5d2:	4605      	mov	r5, r0
	int length = strlen(s);
 800c5d4:	f7f3 fdfc 	bl	80001d0 <strlen>
 800c5d8:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 800c5da:	4602      	mov	r2, r0
 800c5dc:	4629      	mov	r1, r5
 800c5de:	2001      	movs	r0, #1
 800c5e0:	f7ff feb4 	bl	800c34c <_write>
 800c5e4:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	4906      	ldr	r1, [pc, #24]	; (800c604 <puts+0x34>)
 800c5ea:	4610      	mov	r0, r2
 800c5ec:	f7ff feae 	bl	800c34c <_write>
 800c5f0:	4428      	add	r0, r5

	if (numbytes == (length+1))
 800c5f2:	3401      	adds	r4, #1
 800c5f4:	42a0      	cmp	r0, r4
 800c5f6:	d101      	bne.n	800c5fc <puts+0x2c>
	{
		res = 0;
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		res = EOF;
 800c5fc:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return res;
}
 800c600:	bd38      	pop	{r3, r4, r5, pc}
 800c602:	bf00      	nop
 800c604:	0800de00 	.word	0x0800de00

0800c608 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800c608:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 800c60a:	480b      	ldr	r0, [pc, #44]	; (800c638 <MX_UART5_Init+0x30>)
 800c60c:	4b0b      	ldr	r3, [pc, #44]	; (800c63c <MX_UART5_Init+0x34>)
 800c60e:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 187500;
 800c610:	4b0b      	ldr	r3, [pc, #44]	; (800c640 <MX_UART5_Init+0x38>)
 800c612:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c614:	2300      	movs	r3, #0
 800c616:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c618:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 800c61a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c61e:	6102      	str	r2, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c620:	220c      	movs	r2, #12
 800c622:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c624:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c626:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800c628:	f7f5 fbc6 	bl	8001db8 <HAL_UART_Init>
 800c62c:	b900      	cbnz	r0, 800c630 <MX_UART5_Init+0x28>
 800c62e:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800c630:	f7ff fe0c 	bl	800c24c <Error_Handler>
  }

}
 800c634:	e7fb      	b.n	800c62e <MX_UART5_Init+0x26>
 800c636:	bf00      	nop
 800c638:	2000a3d0 	.word	0x2000a3d0
 800c63c:	40005000 	.word	0x40005000
 800c640:	0002dc6c 	.word	0x0002dc6c

0800c644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c648:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c64a:	2300      	movs	r3, #0
 800c64c:	9303      	str	r3, [sp, #12]
 800c64e:	9304      	str	r3, [sp, #16]
 800c650:	9305      	str	r3, [sp, #20]
 800c652:	9306      	str	r3, [sp, #24]
 800c654:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==UART5)
 800c656:	6802      	ldr	r2, [r0, #0]
 800c658:	4b25      	ldr	r3, [pc, #148]	; (800c6f0 <HAL_UART_MspInit+0xac>)
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d002      	beq.n	800c664 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800c65e:	b008      	add	sp, #32
 800c660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 800c664:	2400      	movs	r4, #0
 800c666:	9400      	str	r4, [sp, #0]
 800c668:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 800c66c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c66e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c672:	641a      	str	r2, [r3, #64]	; 0x40
 800c674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c676:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c67a:	9200      	str	r2, [sp, #0]
 800c67c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c67e:	9401      	str	r4, [sp, #4]
 800c680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c682:	f042 0204 	orr.w	r2, r2, #4
 800c686:	631a      	str	r2, [r3, #48]	; 0x30
 800c688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c68a:	f002 0204 	and.w	r2, r2, #4
 800c68e:	9201      	str	r2, [sp, #4]
 800c690:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c692:	9402      	str	r4, [sp, #8]
 800c694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c696:	f042 0208 	orr.w	r2, r2, #8
 800c69a:	631a      	str	r2, [r3, #48]	; 0x30
 800c69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c69e:	f003 0308 	and.w	r3, r3, #8
 800c6a2:	9302      	str	r3, [sp, #8]
 800c6a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c6a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6ac:	f04f 0802 	mov.w	r8, #2
 800c6b0:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c6b4:	2701      	movs	r7, #1
 800c6b6:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6b8:	2603      	movs	r6, #3
 800c6ba:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800c6bc:	2508      	movs	r5, #8
 800c6be:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c6c0:	a903      	add	r1, sp, #12
 800c6c2:	480c      	ldr	r0, [pc, #48]	; (800c6f4 <HAL_UART_MspInit+0xb0>)
 800c6c4:	f7f4 fc1e 	bl	8000f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c6c8:	2304      	movs	r3, #4
 800c6ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6cc:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c6d0:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6d2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800c6d4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c6d6:	a903      	add	r1, sp, #12
 800c6d8:	4807      	ldr	r0, [pc, #28]	; (800c6f8 <HAL_UART_MspInit+0xb4>)
 800c6da:	f7f4 fc13 	bl	8000f04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800c6de:	4622      	mov	r2, r4
 800c6e0:	2105      	movs	r1, #5
 800c6e2:	2035      	movs	r0, #53	; 0x35
 800c6e4:	f7f3 ff56 	bl	8000594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800c6e8:	2035      	movs	r0, #53	; 0x35
 800c6ea:	f7f3 ff85 	bl	80005f8 <HAL_NVIC_EnableIRQ>
}
 800c6ee:	e7b6      	b.n	800c65e <HAL_UART_MspInit+0x1a>
 800c6f0:	40005000 	.word	0x40005000
 800c6f4:	40020800 	.word	0x40020800
 800c6f8:	40020c00 	.word	0x40020c00

0800c6fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c6fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c734 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c700:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c702:	e003      	b.n	800c70c <LoopCopyDataInit>

0800c704 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c704:	4b0c      	ldr	r3, [pc, #48]	; (800c738 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c706:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c708:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c70a:	3104      	adds	r1, #4

0800c70c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c70c:	480b      	ldr	r0, [pc, #44]	; (800c73c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c70e:	4b0c      	ldr	r3, [pc, #48]	; (800c740 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c710:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c712:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c714:	d3f6      	bcc.n	800c704 <CopyDataInit>
  ldr  r2, =_sbss
 800c716:	4a0b      	ldr	r2, [pc, #44]	; (800c744 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c718:	e002      	b.n	800c720 <LoopFillZerobss>

0800c71a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c71a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c71c:	f842 3b04 	str.w	r3, [r2], #4

0800c720 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c720:	4b09      	ldr	r3, [pc, #36]	; (800c748 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c722:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c724:	d3f9      	bcc.n	800c71a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c726:	f7ff fe35 	bl	800c394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c72a:	f000 f811 	bl	800c750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c72e:	f7ff fd73 	bl	800c218 <main>
  bx  lr    
 800c732:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c734:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c738:	0800e8a0 	.word	0x0800e8a0
  ldr  r0, =_sdata
 800c73c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c740:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800c744:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800c748:	2000a410 	.word	0x2000a410

0800c74c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c74c:	e7fe      	b.n	800c74c <ADC_IRQHandler>
	...

0800c750 <__libc_init_array>:
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	4e0d      	ldr	r6, [pc, #52]	; (800c788 <__libc_init_array+0x38>)
 800c754:	4c0d      	ldr	r4, [pc, #52]	; (800c78c <__libc_init_array+0x3c>)
 800c756:	1ba4      	subs	r4, r4, r6
 800c758:	10a4      	asrs	r4, r4, #2
 800c75a:	2500      	movs	r5, #0
 800c75c:	42a5      	cmp	r5, r4
 800c75e:	d109      	bne.n	800c774 <__libc_init_array+0x24>
 800c760:	4e0b      	ldr	r6, [pc, #44]	; (800c790 <__libc_init_array+0x40>)
 800c762:	4c0c      	ldr	r4, [pc, #48]	; (800c794 <__libc_init_array+0x44>)
 800c764:	f000 f83a 	bl	800c7dc <_init>
 800c768:	1ba4      	subs	r4, r4, r6
 800c76a:	10a4      	asrs	r4, r4, #2
 800c76c:	2500      	movs	r5, #0
 800c76e:	42a5      	cmp	r5, r4
 800c770:	d105      	bne.n	800c77e <__libc_init_array+0x2e>
 800c772:	bd70      	pop	{r4, r5, r6, pc}
 800c774:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c778:	4798      	blx	r3
 800c77a:	3501      	adds	r5, #1
 800c77c:	e7ee      	b.n	800c75c <__libc_init_array+0xc>
 800c77e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c782:	4798      	blx	r3
 800c784:	3501      	adds	r5, #1
 800c786:	e7f2      	b.n	800c76e <__libc_init_array+0x1e>
 800c788:	0800e898 	.word	0x0800e898
 800c78c:	0800e898 	.word	0x0800e898
 800c790:	0800e898 	.word	0x0800e898
 800c794:	0800e89c 	.word	0x0800e89c

0800c798 <memcmp>:
 800c798:	b510      	push	{r4, lr}
 800c79a:	3901      	subs	r1, #1
 800c79c:	4402      	add	r2, r0
 800c79e:	4290      	cmp	r0, r2
 800c7a0:	d101      	bne.n	800c7a6 <memcmp+0xe>
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	bd10      	pop	{r4, pc}
 800c7a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c7aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c7ae:	42a3      	cmp	r3, r4
 800c7b0:	d0f5      	beq.n	800c79e <memcmp+0x6>
 800c7b2:	1b18      	subs	r0, r3, r4
 800c7b4:	bd10      	pop	{r4, pc}

0800c7b6 <memcpy>:
 800c7b6:	b510      	push	{r4, lr}
 800c7b8:	1e43      	subs	r3, r0, #1
 800c7ba:	440a      	add	r2, r1
 800c7bc:	4291      	cmp	r1, r2
 800c7be:	d100      	bne.n	800c7c2 <memcpy+0xc>
 800c7c0:	bd10      	pop	{r4, pc}
 800c7c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7ca:	e7f7      	b.n	800c7bc <memcpy+0x6>

0800c7cc <memset>:
 800c7cc:	4402      	add	r2, r0
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d100      	bne.n	800c7d6 <memset+0xa>
 800c7d4:	4770      	bx	lr
 800c7d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c7da:	e7f9      	b.n	800c7d0 <memset+0x4>

0800c7dc <_init>:
 800c7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7de:	bf00      	nop
 800c7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7e2:	bc08      	pop	{r3}
 800c7e4:	469e      	mov	lr, r3
 800c7e6:	4770      	bx	lr

0800c7e8 <_fini>:
 800c7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ea:	bf00      	nop
 800c7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ee:	bc08      	pop	{r3}
 800c7f0:	469e      	mov	lr, r3
 800c7f2:	4770      	bx	lr
