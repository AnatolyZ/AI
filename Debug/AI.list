
AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .eeprom_emul  00000000  08008000  08008000  00040214  2**0
                  CONTENTS
  2 .text         0001136c  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00006254  0802136c  0802136c  0003136c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  080275c0  080275c0  000375c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  080275c8  080275c8  000375c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080275cc  080275cc  000375cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000214  20000000  080275d0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00040214  2**0
                  CONTENTS
  9 .bss          00018f6c  20000214  20000214  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20019180  20019180  00040214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00070b02  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000bce2  00000000  00000000  000b0d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001ef3c  00000000  00000000  000bca28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000024c0  00000000  00000000  000db968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002c90  00000000  00000000  000dde28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ac34  00000000  00000000  000e0ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b8e0  00000000  00000000  000fb6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00106fcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006db0  00000000  00000000  00107048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000214 	.word	0x20000214
 801001c:	00000000 	.word	0x00000000
 8010020:	08021354 	.word	0x08021354

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000218 	.word	0x20000218
 801003c:	08021354 	.word	0x08021354

08010040 <setjmp>:
 8010040:	46ec      	mov	ip, sp
 8010042:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8010046:	f04f 0000 	mov.w	r0, #0
 801004a:	4770      	bx	lr

0801004c <longjmp>:
 801004c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8010050:	46e5      	mov	sp, ip
 8010052:	0008      	movs	r0, r1
 8010054:	bf08      	it	eq
 8010056:	2001      	moveq	r0, #1
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop

0801005c <strcmp>:
 801005c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010064:	2a01      	cmp	r2, #1
 8010066:	bf28      	it	cs
 8010068:	429a      	cmpcs	r2, r3
 801006a:	d0f7      	beq.n	801005c <strcmp>
 801006c:	1ad0      	subs	r0, r2, r3
 801006e:	4770      	bx	lr

08010070 <strlen>:
 8010070:	4603      	mov	r3, r0
 8010072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010076:	2a00      	cmp	r2, #0
 8010078:	d1fb      	bne.n	8010072 <strlen+0x2>
 801007a:	1a18      	subs	r0, r3, r0
 801007c:	3801      	subs	r0, #1
 801007e:	4770      	bx	lr

08010080 <__aeabi_uldivmod>:
 8010080:	b953      	cbnz	r3, 8010098 <__aeabi_uldivmod+0x18>
 8010082:	b94a      	cbnz	r2, 8010098 <__aeabi_uldivmod+0x18>
 8010084:	2900      	cmp	r1, #0
 8010086:	bf08      	it	eq
 8010088:	2800      	cmpeq	r0, #0
 801008a:	bf1c      	itt	ne
 801008c:	f04f 31ff 	movne.w	r1, #4294967295
 8010090:	f04f 30ff 	movne.w	r0, #4294967295
 8010094:	f000 b97a 	b.w	801038c <__aeabi_idiv0>
 8010098:	f1ad 0c08 	sub.w	ip, sp, #8
 801009c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80100a0:	f000 f806 	bl	80100b0 <__udivmoddi4>
 80100a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80100a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100ac:	b004      	add	sp, #16
 80100ae:	4770      	bx	lr

080100b0 <__udivmoddi4>:
 80100b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100b4:	468c      	mov	ip, r1
 80100b6:	460d      	mov	r5, r1
 80100b8:	4604      	mov	r4, r0
 80100ba:	9e08      	ldr	r6, [sp, #32]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d151      	bne.n	8010164 <__udivmoddi4+0xb4>
 80100c0:	428a      	cmp	r2, r1
 80100c2:	4617      	mov	r7, r2
 80100c4:	d96d      	bls.n	80101a2 <__udivmoddi4+0xf2>
 80100c6:	fab2 fe82 	clz	lr, r2
 80100ca:	f1be 0f00 	cmp.w	lr, #0
 80100ce:	d00b      	beq.n	80100e8 <__udivmoddi4+0x38>
 80100d0:	f1ce 0c20 	rsb	ip, lr, #32
 80100d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80100d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80100dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80100e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80100e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80100e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80100ec:	0c25      	lsrs	r5, r4, #16
 80100ee:	fbbc f8fa 	udiv	r8, ip, sl
 80100f2:	fa1f f987 	uxth.w	r9, r7
 80100f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80100fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80100fe:	fb08 f309 	mul.w	r3, r8, r9
 8010102:	42ab      	cmp	r3, r5
 8010104:	d90a      	bls.n	801011c <__udivmoddi4+0x6c>
 8010106:	19ed      	adds	r5, r5, r7
 8010108:	f108 32ff 	add.w	r2, r8, #4294967295
 801010c:	f080 8123 	bcs.w	8010356 <__udivmoddi4+0x2a6>
 8010110:	42ab      	cmp	r3, r5
 8010112:	f240 8120 	bls.w	8010356 <__udivmoddi4+0x2a6>
 8010116:	f1a8 0802 	sub.w	r8, r8, #2
 801011a:	443d      	add	r5, r7
 801011c:	1aed      	subs	r5, r5, r3
 801011e:	b2a4      	uxth	r4, r4
 8010120:	fbb5 f0fa 	udiv	r0, r5, sl
 8010124:	fb0a 5510 	mls	r5, sl, r0, r5
 8010128:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801012c:	fb00 f909 	mul.w	r9, r0, r9
 8010130:	45a1      	cmp	r9, r4
 8010132:	d909      	bls.n	8010148 <__udivmoddi4+0x98>
 8010134:	19e4      	adds	r4, r4, r7
 8010136:	f100 33ff 	add.w	r3, r0, #4294967295
 801013a:	f080 810a 	bcs.w	8010352 <__udivmoddi4+0x2a2>
 801013e:	45a1      	cmp	r9, r4
 8010140:	f240 8107 	bls.w	8010352 <__udivmoddi4+0x2a2>
 8010144:	3802      	subs	r0, #2
 8010146:	443c      	add	r4, r7
 8010148:	eba4 0409 	sub.w	r4, r4, r9
 801014c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010150:	2100      	movs	r1, #0
 8010152:	2e00      	cmp	r6, #0
 8010154:	d061      	beq.n	801021a <__udivmoddi4+0x16a>
 8010156:	fa24 f40e 	lsr.w	r4, r4, lr
 801015a:	2300      	movs	r3, #0
 801015c:	6034      	str	r4, [r6, #0]
 801015e:	6073      	str	r3, [r6, #4]
 8010160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010164:	428b      	cmp	r3, r1
 8010166:	d907      	bls.n	8010178 <__udivmoddi4+0xc8>
 8010168:	2e00      	cmp	r6, #0
 801016a:	d054      	beq.n	8010216 <__udivmoddi4+0x166>
 801016c:	2100      	movs	r1, #0
 801016e:	e886 0021 	stmia.w	r6, {r0, r5}
 8010172:	4608      	mov	r0, r1
 8010174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010178:	fab3 f183 	clz	r1, r3
 801017c:	2900      	cmp	r1, #0
 801017e:	f040 808e 	bne.w	801029e <__udivmoddi4+0x1ee>
 8010182:	42ab      	cmp	r3, r5
 8010184:	d302      	bcc.n	801018c <__udivmoddi4+0xdc>
 8010186:	4282      	cmp	r2, r0
 8010188:	f200 80fa 	bhi.w	8010380 <__udivmoddi4+0x2d0>
 801018c:	1a84      	subs	r4, r0, r2
 801018e:	eb65 0503 	sbc.w	r5, r5, r3
 8010192:	2001      	movs	r0, #1
 8010194:	46ac      	mov	ip, r5
 8010196:	2e00      	cmp	r6, #0
 8010198:	d03f      	beq.n	801021a <__udivmoddi4+0x16a>
 801019a:	e886 1010 	stmia.w	r6, {r4, ip}
 801019e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101a2:	b912      	cbnz	r2, 80101aa <__udivmoddi4+0xfa>
 80101a4:	2701      	movs	r7, #1
 80101a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80101aa:	fab7 fe87 	clz	lr, r7
 80101ae:	f1be 0f00 	cmp.w	lr, #0
 80101b2:	d134      	bne.n	801021e <__udivmoddi4+0x16e>
 80101b4:	1beb      	subs	r3, r5, r7
 80101b6:	0c3a      	lsrs	r2, r7, #16
 80101b8:	fa1f fc87 	uxth.w	ip, r7
 80101bc:	2101      	movs	r1, #1
 80101be:	fbb3 f8f2 	udiv	r8, r3, r2
 80101c2:	0c25      	lsrs	r5, r4, #16
 80101c4:	fb02 3318 	mls	r3, r2, r8, r3
 80101c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80101cc:	fb0c f308 	mul.w	r3, ip, r8
 80101d0:	42ab      	cmp	r3, r5
 80101d2:	d907      	bls.n	80101e4 <__udivmoddi4+0x134>
 80101d4:	19ed      	adds	r5, r5, r7
 80101d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80101da:	d202      	bcs.n	80101e2 <__udivmoddi4+0x132>
 80101dc:	42ab      	cmp	r3, r5
 80101de:	f200 80d1 	bhi.w	8010384 <__udivmoddi4+0x2d4>
 80101e2:	4680      	mov	r8, r0
 80101e4:	1aed      	subs	r5, r5, r3
 80101e6:	b2a3      	uxth	r3, r4
 80101e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80101ec:	fb02 5510 	mls	r5, r2, r0, r5
 80101f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80101f4:	fb0c fc00 	mul.w	ip, ip, r0
 80101f8:	45a4      	cmp	ip, r4
 80101fa:	d907      	bls.n	801020c <__udivmoddi4+0x15c>
 80101fc:	19e4      	adds	r4, r4, r7
 80101fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8010202:	d202      	bcs.n	801020a <__udivmoddi4+0x15a>
 8010204:	45a4      	cmp	ip, r4
 8010206:	f200 80b8 	bhi.w	801037a <__udivmoddi4+0x2ca>
 801020a:	4618      	mov	r0, r3
 801020c:	eba4 040c 	sub.w	r4, r4, ip
 8010210:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010214:	e79d      	b.n	8010152 <__udivmoddi4+0xa2>
 8010216:	4631      	mov	r1, r6
 8010218:	4630      	mov	r0, r6
 801021a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801021e:	f1ce 0420 	rsb	r4, lr, #32
 8010222:	fa05 f30e 	lsl.w	r3, r5, lr
 8010226:	fa07 f70e 	lsl.w	r7, r7, lr
 801022a:	fa20 f804 	lsr.w	r8, r0, r4
 801022e:	0c3a      	lsrs	r2, r7, #16
 8010230:	fa25 f404 	lsr.w	r4, r5, r4
 8010234:	ea48 0803 	orr.w	r8, r8, r3
 8010238:	fbb4 f1f2 	udiv	r1, r4, r2
 801023c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8010240:	fb02 4411 	mls	r4, r2, r1, r4
 8010244:	fa1f fc87 	uxth.w	ip, r7
 8010248:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 801024c:	fb01 f30c 	mul.w	r3, r1, ip
 8010250:	42ab      	cmp	r3, r5
 8010252:	fa00 f40e 	lsl.w	r4, r0, lr
 8010256:	d909      	bls.n	801026c <__udivmoddi4+0x1bc>
 8010258:	19ed      	adds	r5, r5, r7
 801025a:	f101 30ff 	add.w	r0, r1, #4294967295
 801025e:	f080 808a 	bcs.w	8010376 <__udivmoddi4+0x2c6>
 8010262:	42ab      	cmp	r3, r5
 8010264:	f240 8087 	bls.w	8010376 <__udivmoddi4+0x2c6>
 8010268:	3902      	subs	r1, #2
 801026a:	443d      	add	r5, r7
 801026c:	1aeb      	subs	r3, r5, r3
 801026e:	fa1f f588 	uxth.w	r5, r8
 8010272:	fbb3 f0f2 	udiv	r0, r3, r2
 8010276:	fb02 3310 	mls	r3, r2, r0, r3
 801027a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 801027e:	fb00 f30c 	mul.w	r3, r0, ip
 8010282:	42ab      	cmp	r3, r5
 8010284:	d907      	bls.n	8010296 <__udivmoddi4+0x1e6>
 8010286:	19ed      	adds	r5, r5, r7
 8010288:	f100 38ff 	add.w	r8, r0, #4294967295
 801028c:	d26f      	bcs.n	801036e <__udivmoddi4+0x2be>
 801028e:	42ab      	cmp	r3, r5
 8010290:	d96d      	bls.n	801036e <__udivmoddi4+0x2be>
 8010292:	3802      	subs	r0, #2
 8010294:	443d      	add	r5, r7
 8010296:	1aeb      	subs	r3, r5, r3
 8010298:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801029c:	e78f      	b.n	80101be <__udivmoddi4+0x10e>
 801029e:	f1c1 0720 	rsb	r7, r1, #32
 80102a2:	fa22 f807 	lsr.w	r8, r2, r7
 80102a6:	408b      	lsls	r3, r1
 80102a8:	fa05 f401 	lsl.w	r4, r5, r1
 80102ac:	ea48 0303 	orr.w	r3, r8, r3
 80102b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80102b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80102b8:	40fd      	lsrs	r5, r7
 80102ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80102be:	fbb5 f9fc 	udiv	r9, r5, ip
 80102c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80102c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80102ca:	fa1f f883 	uxth.w	r8, r3
 80102ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80102d2:	fb09 f408 	mul.w	r4, r9, r8
 80102d6:	42ac      	cmp	r4, r5
 80102d8:	fa02 f201 	lsl.w	r2, r2, r1
 80102dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80102e0:	d908      	bls.n	80102f4 <__udivmoddi4+0x244>
 80102e2:	18ed      	adds	r5, r5, r3
 80102e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80102e8:	d243      	bcs.n	8010372 <__udivmoddi4+0x2c2>
 80102ea:	42ac      	cmp	r4, r5
 80102ec:	d941      	bls.n	8010372 <__udivmoddi4+0x2c2>
 80102ee:	f1a9 0902 	sub.w	r9, r9, #2
 80102f2:	441d      	add	r5, r3
 80102f4:	1b2d      	subs	r5, r5, r4
 80102f6:	fa1f fe8e 	uxth.w	lr, lr
 80102fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80102fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8010302:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8010306:	fb00 f808 	mul.w	r8, r0, r8
 801030a:	45a0      	cmp	r8, r4
 801030c:	d907      	bls.n	801031e <__udivmoddi4+0x26e>
 801030e:	18e4      	adds	r4, r4, r3
 8010310:	f100 35ff 	add.w	r5, r0, #4294967295
 8010314:	d229      	bcs.n	801036a <__udivmoddi4+0x2ba>
 8010316:	45a0      	cmp	r8, r4
 8010318:	d927      	bls.n	801036a <__udivmoddi4+0x2ba>
 801031a:	3802      	subs	r0, #2
 801031c:	441c      	add	r4, r3
 801031e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010322:	eba4 0408 	sub.w	r4, r4, r8
 8010326:	fba0 8902 	umull	r8, r9, r0, r2
 801032a:	454c      	cmp	r4, r9
 801032c:	46c6      	mov	lr, r8
 801032e:	464d      	mov	r5, r9
 8010330:	d315      	bcc.n	801035e <__udivmoddi4+0x2ae>
 8010332:	d012      	beq.n	801035a <__udivmoddi4+0x2aa>
 8010334:	b156      	cbz	r6, 801034c <__udivmoddi4+0x29c>
 8010336:	ebba 030e 	subs.w	r3, sl, lr
 801033a:	eb64 0405 	sbc.w	r4, r4, r5
 801033e:	fa04 f707 	lsl.w	r7, r4, r7
 8010342:	40cb      	lsrs	r3, r1
 8010344:	431f      	orrs	r7, r3
 8010346:	40cc      	lsrs	r4, r1
 8010348:	6037      	str	r7, [r6, #0]
 801034a:	6074      	str	r4, [r6, #4]
 801034c:	2100      	movs	r1, #0
 801034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010352:	4618      	mov	r0, r3
 8010354:	e6f8      	b.n	8010148 <__udivmoddi4+0x98>
 8010356:	4690      	mov	r8, r2
 8010358:	e6e0      	b.n	801011c <__udivmoddi4+0x6c>
 801035a:	45c2      	cmp	sl, r8
 801035c:	d2ea      	bcs.n	8010334 <__udivmoddi4+0x284>
 801035e:	ebb8 0e02 	subs.w	lr, r8, r2
 8010362:	eb69 0503 	sbc.w	r5, r9, r3
 8010366:	3801      	subs	r0, #1
 8010368:	e7e4      	b.n	8010334 <__udivmoddi4+0x284>
 801036a:	4628      	mov	r0, r5
 801036c:	e7d7      	b.n	801031e <__udivmoddi4+0x26e>
 801036e:	4640      	mov	r0, r8
 8010370:	e791      	b.n	8010296 <__udivmoddi4+0x1e6>
 8010372:	4681      	mov	r9, r0
 8010374:	e7be      	b.n	80102f4 <__udivmoddi4+0x244>
 8010376:	4601      	mov	r1, r0
 8010378:	e778      	b.n	801026c <__udivmoddi4+0x1bc>
 801037a:	3802      	subs	r0, #2
 801037c:	443c      	add	r4, r7
 801037e:	e745      	b.n	801020c <__udivmoddi4+0x15c>
 8010380:	4608      	mov	r0, r1
 8010382:	e708      	b.n	8010196 <__udivmoddi4+0xe6>
 8010384:	f1a8 0802 	sub.w	r8, r8, #2
 8010388:	443d      	add	r5, r7
 801038a:	e72b      	b.n	80101e4 <__udivmoddi4+0x134>

0801038c <__aeabi_idiv0>:
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop

08010390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010390:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010392:	4b0b      	ldr	r3, [pc, #44]	; (80103c0 <HAL_Init+0x30>)
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801039a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80103a2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80103aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80103ac:	2003      	movs	r0, #3
 80103ae:	f000 f82f 	bl	8010410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80103b2:	2000      	movs	r0, #0
 80103b4:	f00e ff60 	bl	801f278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80103b8:	f00e ff3c 	bl	801f234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80103bc:	2000      	movs	r0, #0
 80103be:	bd08      	pop	{r3, pc}
 80103c0:	40023c00 	.word	0x40023c00

080103c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80103c4:	4a03      	ldr	r2, [pc, #12]	; (80103d4 <HAL_IncTick+0x10>)
 80103c6:	6811      	ldr	r1, [r2, #0]
 80103c8:	4b03      	ldr	r3, [pc, #12]	; (80103d8 <HAL_IncTick+0x14>)
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	440b      	add	r3, r1
 80103ce:	6013      	str	r3, [r2, #0]
 80103d0:	4770      	bx	lr
 80103d2:	bf00      	nop
 80103d4:	20010f94 	.word	0x20010f94
 80103d8:	20000000 	.word	0x20000000

080103dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80103dc:	4b01      	ldr	r3, [pc, #4]	; (80103e4 <HAL_GetTick+0x8>)
 80103de:	6818      	ldr	r0, [r3, #0]
}
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop
 80103e4:	20010f94 	.word	0x20010f94

080103e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80103e8:	b538      	push	{r3, r4, r5, lr}
 80103ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80103ec:	f7ff fff6 	bl	80103dc <HAL_GetTick>
 80103f0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80103f2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80103f6:	d002      	beq.n	80103fe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80103f8:	4b04      	ldr	r3, [pc, #16]	; (801040c <HAL_Delay+0x24>)
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80103fe:	f7ff ffed 	bl	80103dc <HAL_GetTick>
 8010402:	1b40      	subs	r0, r0, r5
 8010404:	4284      	cmp	r4, r0
 8010406:	d8fa      	bhi.n	80103fe <HAL_Delay+0x16>
  {
  }
}
 8010408:	bd38      	pop	{r3, r4, r5, pc}
 801040a:	bf00      	nop
 801040c:	20000000 	.word	0x20000000

08010410 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010410:	4a07      	ldr	r2, [pc, #28]	; (8010430 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8010412:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010414:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010418:	041b      	lsls	r3, r3, #16
 801041a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 801041c:	0200      	lsls	r0, r0, #8
 801041e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010422:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8010424:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8010428:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 801042c:	60d0      	str	r0, [r2, #12]
 801042e:	4770      	bx	lr
 8010430:	e000ed00 	.word	0xe000ed00

08010434 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010434:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010436:	4b16      	ldr	r3, [pc, #88]	; (8010490 <HAL_NVIC_SetPriority+0x5c>)
 8010438:	68db      	ldr	r3, [r3, #12]
 801043a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801043e:	f1c3 0407 	rsb	r4, r3, #7
 8010442:	2c04      	cmp	r4, #4
 8010444:	bf28      	it	cs
 8010446:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010448:	1d1d      	adds	r5, r3, #4
 801044a:	2d06      	cmp	r5, #6
 801044c:	d917      	bls.n	801047e <HAL_NVIC_SetPriority+0x4a>
 801044e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010450:	2501      	movs	r5, #1
 8010452:	fa05 f404 	lsl.w	r4, r5, r4
 8010456:	3c01      	subs	r4, #1
 8010458:	4021      	ands	r1, r4
 801045a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801045c:	fa05 f303 	lsl.w	r3, r5, r3
 8010460:	3b01      	subs	r3, #1
 8010462:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010464:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8010466:	2800      	cmp	r0, #0
 8010468:	db0b      	blt.n	8010482 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801046a:	0109      	lsls	r1, r1, #4
 801046c:	b2c9      	uxtb	r1, r1
 801046e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8010472:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8010476:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 801047a:	bc30      	pop	{r4, r5}
 801047c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801047e:	2300      	movs	r3, #0
 8010480:	e7e6      	b.n	8010450 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010482:	f000 000f 	and.w	r0, r0, #15
 8010486:	0109      	lsls	r1, r1, #4
 8010488:	b2c9      	uxtb	r1, r1
 801048a:	4b02      	ldr	r3, [pc, #8]	; (8010494 <HAL_NVIC_SetPriority+0x60>)
 801048c:	5419      	strb	r1, [r3, r0]
 801048e:	e7f4      	b.n	801047a <HAL_NVIC_SetPriority+0x46>
 8010490:	e000ed00 	.word	0xe000ed00
 8010494:	e000ed14 	.word	0xe000ed14

08010498 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010498:	0942      	lsrs	r2, r0, #5
 801049a:	f000 001f 	and.w	r0, r0, #31
 801049e:	2301      	movs	r3, #1
 80104a0:	fa03 f000 	lsl.w	r0, r3, r0
 80104a4:	4b01      	ldr	r3, [pc, #4]	; (80104ac <HAL_NVIC_EnableIRQ+0x14>)
 80104a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80104aa:	4770      	bx	lr
 80104ac:	e000e100 	.word	0xe000e100

080104b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80104b0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80104b2:	6805      	ldr	r5, [r0, #0]
 80104b4:	682c      	ldr	r4, [r5, #0]
 80104b6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80104ba:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80104bc:	6804      	ldr	r4, [r0, #0]
 80104be:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80104c0:	6883      	ldr	r3, [r0, #8]
 80104c2:	2b40      	cmp	r3, #64	; 0x40
 80104c4:	d005      	beq.n	80104d2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80104c6:	6803      	ldr	r3, [r0, #0]
 80104c8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80104ca:	6803      	ldr	r3, [r0, #0]
 80104cc:	60da      	str	r2, [r3, #12]
  }
}
 80104ce:	bc30      	pop	{r4, r5}
 80104d0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80104d2:	6803      	ldr	r3, [r0, #0]
 80104d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80104d6:	6803      	ldr	r3, [r0, #0]
 80104d8:	60d9      	str	r1, [r3, #12]
 80104da:	e7f8      	b.n	80104ce <DMA_SetConfig+0x1e>

080104dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80104dc:	6802      	ldr	r2, [r0, #0]
 80104de:	b2d3      	uxtb	r3, r2
 80104e0:	3b10      	subs	r3, #16
 80104e2:	490b      	ldr	r1, [pc, #44]	; (8010510 <DMA_CalcBaseAndBitshift+0x34>)
 80104e4:	fba1 1303 	umull	r1, r3, r1, r3
 80104e8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80104ea:	490a      	ldr	r1, [pc, #40]	; (8010514 <DMA_CalcBaseAndBitshift+0x38>)
 80104ec:	5cc9      	ldrb	r1, [r1, r3]
 80104ee:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80104f0:	2b03      	cmp	r3, #3
 80104f2:	d806      	bhi.n	8010502 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80104f4:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80104f8:	f022 0203 	bic.w	r2, r2, #3
 80104fc:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80104fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8010500:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010502:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8010506:	f022 0203 	bic.w	r2, r2, #3
 801050a:	3204      	adds	r2, #4
 801050c:	6582      	str	r2, [r0, #88]	; 0x58
 801050e:	e7f6      	b.n	80104fe <DMA_CalcBaseAndBitshift+0x22>
 8010510:	aaaaaaab 	.word	0xaaaaaaab
 8010514:	08021434 	.word	0x08021434

08010518 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010518:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801051a:	6982      	ldr	r2, [r0, #24]
 801051c:	b992      	cbnz	r2, 8010544 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 801051e:	2b01      	cmp	r3, #1
 8010520:	d00a      	beq.n	8010538 <DMA_CheckFifoParam+0x20>
 8010522:	b11b      	cbz	r3, 801052c <DMA_CheckFifoParam+0x14>
 8010524:	2b02      	cmp	r3, #2
 8010526:	d001      	beq.n	801052c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8010528:	2000      	movs	r0, #0
 801052a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801052c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801052e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8010532:	d12c      	bne.n	801058e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8010534:	2000      	movs	r0, #0
 8010536:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010538:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801053a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801053e:	d028      	beq.n	8010592 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8010540:	2000      	movs	r0, #0
 8010542:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010544:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8010548:	d005      	beq.n	8010556 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801054a:	2b02      	cmp	r3, #2
 801054c:	d929      	bls.n	80105a2 <DMA_CheckFifoParam+0x8a>
 801054e:	2b03      	cmp	r3, #3
 8010550:	d015      	beq.n	801057e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8010552:	2000      	movs	r0, #0
 8010554:	4770      	bx	lr
    switch (tmp)
 8010556:	2b03      	cmp	r3, #3
 8010558:	d803      	bhi.n	8010562 <DMA_CheckFifoParam+0x4a>
 801055a:	e8df f003 	tbb	[pc, r3]
 801055e:	041c      	.short	0x041c
 8010560:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8010562:	2000      	movs	r0, #0
 8010564:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010566:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010568:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 801056c:	d115      	bne.n	801059a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 801056e:	2000      	movs	r0, #0
 8010570:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010572:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010574:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010578:	d011      	beq.n	801059e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 801057a:	2000      	movs	r0, #0
 801057c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801057e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010580:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8010584:	d001      	beq.n	801058a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8010586:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8010588:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 801058a:	2000      	movs	r0, #0
 801058c:	4770      	bx	lr
        status = HAL_ERROR;
 801058e:	2001      	movs	r0, #1
 8010590:	4770      	bx	lr
        status = HAL_ERROR;
 8010592:	2001      	movs	r0, #1
 8010594:	4770      	bx	lr
      status = HAL_ERROR;
 8010596:	2001      	movs	r0, #1
 8010598:	4770      	bx	lr
        status = HAL_ERROR;
 801059a:	2001      	movs	r0, #1
 801059c:	4770      	bx	lr
        status = HAL_ERROR;
 801059e:	2001      	movs	r0, #1
 80105a0:	4770      	bx	lr
      status = HAL_ERROR;
 80105a2:	2001      	movs	r0, #1
 80105a4:	4770      	bx	lr
	...

080105a8 <HAL_DMA_Init>:
{
 80105a8:	b570      	push	{r4, r5, r6, lr}
 80105aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80105ac:	f7ff ff16 	bl	80103dc <HAL_GetTick>
  if(hdma == NULL)
 80105b0:	2c00      	cmp	r4, #0
 80105b2:	d05d      	beq.n	8010670 <HAL_DMA_Init+0xc8>
 80105b4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80105b6:	2300      	movs	r3, #0
 80105b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80105bc:	2302      	movs	r3, #2
 80105be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80105c2:	6822      	ldr	r2, [r4, #0]
 80105c4:	6813      	ldr	r3, [r2, #0]
 80105c6:	f023 0301 	bic.w	r3, r3, #1
 80105ca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80105cc:	6823      	ldr	r3, [r4, #0]
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	f012 0f01 	tst.w	r2, #1
 80105d4:	d00a      	beq.n	80105ec <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80105d6:	f7ff ff01 	bl	80103dc <HAL_GetTick>
 80105da:	1b40      	subs	r0, r0, r5
 80105dc:	2805      	cmp	r0, #5
 80105de:	d9f5      	bls.n	80105cc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80105e0:	2320      	movs	r3, #32
 80105e2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80105e4:	2003      	movs	r0, #3
 80105e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80105ea:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80105ec:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80105ee:	4921      	ldr	r1, [pc, #132]	; (8010674 <HAL_DMA_Init+0xcc>)
 80105f0:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80105f2:	6862      	ldr	r2, [r4, #4]
 80105f4:	68a0      	ldr	r0, [r4, #8]
 80105f6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80105f8:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80105fa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80105fc:	6920      	ldr	r0, [r4, #16]
 80105fe:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010600:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010602:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010604:	69a0      	ldr	r0, [r4, #24]
 8010606:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8010608:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801060a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 801060c:	6a20      	ldr	r0, [r4, #32]
 801060e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010610:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010612:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010614:	2904      	cmp	r1, #4
 8010616:	d016      	beq.n	8010646 <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 8010618:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 801061a:	6826      	ldr	r6, [r4, #0]
 801061c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801061e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8010622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010624:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010626:	2b04      	cmp	r3, #4
 8010628:	d012      	beq.n	8010650 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 801062a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801062c:	4620      	mov	r0, r4
 801062e:	f7ff ff55 	bl	80104dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010632:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010634:	233f      	movs	r3, #63	; 0x3f
 8010636:	4093      	lsls	r3, r2
 8010638:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801063a:	2000      	movs	r0, #0
 801063c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 801063e:	2301      	movs	r3, #1
 8010640:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8010644:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010646:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010648:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801064a:	4301      	orrs	r1, r0
 801064c:	430a      	orrs	r2, r1
 801064e:	e7e3      	b.n	8010618 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 8010650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010652:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010654:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010656:	2b00      	cmp	r3, #0
 8010658:	d0e7      	beq.n	801062a <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801065a:	4620      	mov	r0, r4
 801065c:	f7ff ff5c 	bl	8010518 <DMA_CheckFifoParam>
 8010660:	2800      	cmp	r0, #0
 8010662:	d0e2      	beq.n	801062a <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010664:	2340      	movs	r3, #64	; 0x40
 8010666:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8010668:	2001      	movs	r0, #1
 801066a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 801066e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010670:	2001      	movs	r0, #1
}
 8010672:	bd70      	pop	{r4, r5, r6, pc}
 8010674:	f010803f 	.word	0xf010803f

08010678 <HAL_DMA_Start_IT>:
{
 8010678:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801067a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 801067c:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8010680:	2c01      	cmp	r4, #1
 8010682:	d031      	beq.n	80106e8 <HAL_DMA_Start_IT+0x70>
 8010684:	2401      	movs	r4, #1
 8010686:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 801068a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 801068e:	b2e4      	uxtb	r4, r4
 8010690:	2c01      	cmp	r4, #1
 8010692:	d004      	beq.n	801069e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8010694:	2300      	movs	r3, #0
 8010696:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 801069a:	2002      	movs	r0, #2
 801069c:	bd38      	pop	{r3, r4, r5, pc}
 801069e:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80106a0:	2002      	movs	r0, #2
 80106a2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80106a6:	2000      	movs	r0, #0
 80106a8:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80106aa:	4620      	mov	r0, r4
 80106ac:	f7ff ff00 	bl	80104b0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80106b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80106b2:	233f      	movs	r3, #63	; 0x3f
 80106b4:	4093      	lsls	r3, r2
 80106b6:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80106b8:	6822      	ldr	r2, [r4, #0]
 80106ba:	6813      	ldr	r3, [r2, #0]
 80106bc:	f043 0316 	orr.w	r3, r3, #22
 80106c0:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80106c2:	6822      	ldr	r2, [r4, #0]
 80106c4:	6953      	ldr	r3, [r2, #20]
 80106c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106ca:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80106cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80106ce:	b123      	cbz	r3, 80106da <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 80106d0:	6822      	ldr	r2, [r4, #0]
 80106d2:	6813      	ldr	r3, [r2, #0]
 80106d4:	f043 0308 	orr.w	r3, r3, #8
 80106d8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80106da:	6822      	ldr	r2, [r4, #0]
 80106dc:	6813      	ldr	r3, [r2, #0]
 80106de:	f043 0301 	orr.w	r3, r3, #1
 80106e2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80106e4:	2000      	movs	r0, #0
 80106e6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 80106e8:	2002      	movs	r0, #2
}
 80106ea:	bd38      	pop	{r3, r4, r5, pc}

080106ec <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80106ec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	2b02      	cmp	r3, #2
 80106f4:	d003      	beq.n	80106fe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80106f6:	2380      	movs	r3, #128	; 0x80
 80106f8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80106fa:	2001      	movs	r0, #1
 80106fc:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80106fe:	2305      	movs	r3, #5
 8010700:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8010704:	6802      	ldr	r2, [r0, #0]
 8010706:	6813      	ldr	r3, [r2, #0]
 8010708:	f023 0301 	bic.w	r3, r3, #1
 801070c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 801070e:	2000      	movs	r0, #0
}
 8010710:	4770      	bx	lr
	...

08010714 <HAL_DMA_IRQHandler>:
{
 8010714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010716:	b083      	sub	sp, #12
 8010718:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 801071a:	2300      	movs	r3, #0
 801071c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 801071e:	4b72      	ldr	r3, [pc, #456]	; (80108e8 <HAL_DMA_IRQHandler+0x1d4>)
 8010720:	681d      	ldr	r5, [r3, #0]
 8010722:	4b72      	ldr	r3, [pc, #456]	; (80108ec <HAL_DMA_IRQHandler+0x1d8>)
 8010724:	fba3 3505 	umull	r3, r5, r3, r5
 8010728:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801072a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 801072c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801072e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8010730:	2308      	movs	r3, #8
 8010732:	4093      	lsls	r3, r2
 8010734:	421e      	tst	r6, r3
 8010736:	d010      	beq.n	801075a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010738:	6803      	ldr	r3, [r0, #0]
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	f012 0f04 	tst.w	r2, #4
 8010740:	d00b      	beq.n	801075a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	f022 0204 	bic.w	r2, r2, #4
 8010748:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801074a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 801074c:	2308      	movs	r3, #8
 801074e:	4093      	lsls	r3, r2
 8010750:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8010752:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8010754:	f043 0301 	orr.w	r3, r3, #1
 8010758:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801075a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801075c:	2301      	movs	r3, #1
 801075e:	4093      	lsls	r3, r2
 8010760:	421e      	tst	r6, r3
 8010762:	d009      	beq.n	8010778 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8010764:	6822      	ldr	r2, [r4, #0]
 8010766:	6952      	ldr	r2, [r2, #20]
 8010768:	f012 0f80 	tst.w	r2, #128	; 0x80
 801076c:	d004      	beq.n	8010778 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801076e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8010770:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8010772:	f043 0302 	orr.w	r3, r3, #2
 8010776:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8010778:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801077a:	2304      	movs	r3, #4
 801077c:	4093      	lsls	r3, r2
 801077e:	421e      	tst	r6, r3
 8010780:	d009      	beq.n	8010796 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8010782:	6822      	ldr	r2, [r4, #0]
 8010784:	6812      	ldr	r2, [r2, #0]
 8010786:	f012 0f02 	tst.w	r2, #2
 801078a:	d004      	beq.n	8010796 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801078c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801078e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8010790:	f043 0304 	orr.w	r3, r3, #4
 8010794:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010796:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010798:	2310      	movs	r3, #16
 801079a:	4093      	lsls	r3, r2
 801079c:	421e      	tst	r6, r3
 801079e:	d024      	beq.n	80107ea <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80107a0:	6822      	ldr	r2, [r4, #0]
 80107a2:	6812      	ldr	r2, [r2, #0]
 80107a4:	f012 0f08 	tst.w	r2, #8
 80107a8:	d01f      	beq.n	80107ea <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80107aa:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80107ac:	6823      	ldr	r3, [r4, #0]
 80107ae:	681a      	ldr	r2, [r3, #0]
 80107b0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80107b4:	d00d      	beq.n	80107d2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80107bc:	d104      	bne.n	80107c8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80107be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107c0:	b19b      	cbz	r3, 80107ea <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80107c2:	4620      	mov	r0, r4
 80107c4:	4798      	blx	r3
 80107c6:	e010      	b.n	80107ea <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80107c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80107ca:	b173      	cbz	r3, 80107ea <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80107cc:	4620      	mov	r0, r4
 80107ce:	4798      	blx	r3
 80107d0:	e00b      	b.n	80107ea <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80107d2:	681a      	ldr	r2, [r3, #0]
 80107d4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80107d8:	d103      	bne.n	80107e2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	f022 0208 	bic.w	r2, r2, #8
 80107e0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80107e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107e4:	b10b      	cbz	r3, 80107ea <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80107e6:	4620      	mov	r0, r4
 80107e8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80107ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80107ec:	2320      	movs	r3, #32
 80107ee:	4093      	lsls	r3, r2
 80107f0:	421e      	tst	r6, r3
 80107f2:	d055      	beq.n	80108a0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80107f4:	6822      	ldr	r2, [r4, #0]
 80107f6:	6812      	ldr	r2, [r2, #0]
 80107f8:	f012 0f10 	tst.w	r2, #16
 80107fc:	d050      	beq.n	80108a0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80107fe:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010800:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8010804:	b2db      	uxtb	r3, r3
 8010806:	2b05      	cmp	r3, #5
 8010808:	d00e      	beq.n	8010828 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801080a:	6823      	ldr	r3, [r4, #0]
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8010812:	d033      	beq.n	801087c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 801081a:	d12a      	bne.n	8010872 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 801081c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801081e:	2b00      	cmp	r3, #0
 8010820:	d03e      	beq.n	80108a0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8010822:	4620      	mov	r0, r4
 8010824:	4798      	blx	r3
 8010826:	e03b      	b.n	80108a0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010828:	6822      	ldr	r2, [r4, #0]
 801082a:	6813      	ldr	r3, [r2, #0]
 801082c:	f023 0316 	bic.w	r3, r3, #22
 8010830:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010832:	6822      	ldr	r2, [r4, #0]
 8010834:	6953      	ldr	r3, [r2, #20]
 8010836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801083a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801083c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801083e:	b1a3      	cbz	r3, 801086a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010840:	6822      	ldr	r2, [r4, #0]
 8010842:	6813      	ldr	r3, [r2, #0]
 8010844:	f023 0308 	bic.w	r3, r3, #8
 8010848:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801084a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801084c:	233f      	movs	r3, #63	; 0x3f
 801084e:	4093      	lsls	r3, r2
 8010850:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8010852:	2300      	movs	r3, #0
 8010854:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8010858:	2301      	movs	r3, #1
 801085a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 801085e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010860:	2b00      	cmp	r3, #0
 8010862:	d03f      	beq.n	80108e4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8010864:	4620      	mov	r0, r4
 8010866:	4798      	blx	r3
 8010868:	e03c      	b.n	80108e4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801086a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801086c:	2b00      	cmp	r3, #0
 801086e:	d1e7      	bne.n	8010840 <HAL_DMA_IRQHandler+0x12c>
 8010870:	e7eb      	b.n	801084a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8010872:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010874:	b1a3      	cbz	r3, 80108a0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8010876:	4620      	mov	r0, r4
 8010878:	4798      	blx	r3
 801087a:	e011      	b.n	80108a0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8010882:	d109      	bne.n	8010898 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8010884:	681a      	ldr	r2, [r3, #0]
 8010886:	f022 0210 	bic.w	r2, r2, #16
 801088a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 801088c:	2300      	movs	r3, #0
 801088e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8010892:	2301      	movs	r3, #1
 8010894:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8010898:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801089a:	b10b      	cbz	r3, 80108a0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 801089c:	4620      	mov	r0, r4
 801089e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80108a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80108a2:	b1fb      	cbz	r3, 80108e4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80108a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80108a6:	f013 0f01 	tst.w	r3, #1
 80108aa:	d017      	beq.n	80108dc <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80108ac:	2305      	movs	r3, #5
 80108ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80108b2:	6822      	ldr	r2, [r4, #0]
 80108b4:	6813      	ldr	r3, [r2, #0]
 80108b6:	f023 0301 	bic.w	r3, r3, #1
 80108ba:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80108bc:	9b01      	ldr	r3, [sp, #4]
 80108be:	3301      	adds	r3, #1
 80108c0:	9301      	str	r3, [sp, #4]
 80108c2:	429d      	cmp	r5, r3
 80108c4:	d304      	bcc.n	80108d0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80108c6:	6823      	ldr	r3, [r4, #0]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	f013 0f01 	tst.w	r3, #1
 80108ce:	d1f5      	bne.n	80108bc <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80108d0:	2300      	movs	r3, #0
 80108d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80108d6:	2301      	movs	r3, #1
 80108d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80108dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80108de:	b10b      	cbz	r3, 80108e4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80108e0:	4620      	mov	r0, r4
 80108e2:	4798      	blx	r3
}
 80108e4:	b003      	add	sp, #12
 80108e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108e8:	20000040 	.word	0x20000040
 80108ec:	1b4e81b5 	.word	0x1b4e81b5

080108f0 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80108f0:	7950      	ldrb	r0, [r2, #5]
 80108f2:	7913      	ldrb	r3, [r2, #4]
 80108f4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80108f8:	4807      	ldr	r0, [pc, #28]	; (8010918 <ETH_MACAddressConfig+0x28>)
 80108fa:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80108fc:	78d0      	ldrb	r0, [r2, #3]
 80108fe:	7893      	ldrb	r3, [r2, #2]
 8010900:	041b      	lsls	r3, r3, #16
 8010902:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8010906:	7850      	ldrb	r0, [r2, #1]
 8010908:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 801090c:	7812      	ldrb	r2, [r2, #0]
 801090e:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8010910:	4a02      	ldr	r2, [pc, #8]	; (801091c <ETH_MACAddressConfig+0x2c>)
 8010912:	508b      	str	r3, [r1, r2]
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop
 8010918:	40028040 	.word	0x40028040
 801091c:	40028044 	.word	0x40028044

08010920 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8010920:	6801      	ldr	r1, [r0, #0]
 8010922:	f241 0218 	movw	r2, #4120	; 0x1018
 8010926:	588b      	ldr	r3, [r1, r2]
 8010928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801092c:	508b      	str	r3, [r1, r2]
 801092e:	4770      	bx	lr

08010930 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8010930:	6801      	ldr	r1, [r0, #0]
 8010932:	f241 0218 	movw	r2, #4120	; 0x1018
 8010936:	588b      	ldr	r3, [r1, r2]
 8010938:	f043 0302 	orr.w	r3, r3, #2
 801093c:	508b      	str	r3, [r1, r2]
 801093e:	4770      	bx	lr

08010940 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8010940:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8010942:	4b08      	ldr	r3, [pc, #32]	; (8010964 <ETH_Delay+0x24>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	4a08      	ldr	r2, [pc, #32]	; (8010968 <ETH_Delay+0x28>)
 8010948:	fba2 2303 	umull	r2, r3, r2, r3
 801094c:	0a5b      	lsrs	r3, r3, #9
 801094e:	fb00 f003 	mul.w	r0, r0, r3
 8010952:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8010954:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8010956:	9b01      	ldr	r3, [sp, #4]
 8010958:	1e5a      	subs	r2, r3, #1
 801095a:	9201      	str	r2, [sp, #4]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d1f9      	bne.n	8010954 <ETH_Delay+0x14>
}
 8010960:	b002      	add	sp, #8
 8010962:	4770      	bx	lr
 8010964:	20000040 	.word	0x20000040
 8010968:	10624dd3 	.word	0x10624dd3

0801096c <ETH_MACTransmissionEnable>:
{ 
 801096c:	b510      	push	{r4, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8010972:	2300      	movs	r3, #0
 8010974:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8010976:	6802      	ldr	r2, [r0, #0]
 8010978:	6813      	ldr	r3, [r2, #0]
 801097a:	f043 0308 	orr.w	r3, r3, #8
 801097e:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010980:	6803      	ldr	r3, [r0, #0]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010986:	2001      	movs	r0, #1
 8010988:	f7ff ffda 	bl	8010940 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 801098c:	6823      	ldr	r3, [r4, #0]
 801098e:	9a01      	ldr	r2, [sp, #4]
 8010990:	601a      	str	r2, [r3, #0]
}
 8010992:	b002      	add	sp, #8
 8010994:	bd10      	pop	{r4, pc}

08010996 <ETH_MACReceptionEnable>:
{ 
 8010996:	b510      	push	{r4, lr}
 8010998:	b082      	sub	sp, #8
 801099a:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 801099c:	2300      	movs	r3, #0
 801099e:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80109a0:	6802      	ldr	r2, [r0, #0]
 80109a2:	6813      	ldr	r3, [r2, #0]
 80109a4:	f043 0304 	orr.w	r3, r3, #4
 80109a8:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80109aa:	6803      	ldr	r3, [r0, #0]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80109b0:	2001      	movs	r0, #1
 80109b2:	f7ff ffc5 	bl	8010940 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80109b6:	6823      	ldr	r3, [r4, #0]
 80109b8:	9a01      	ldr	r2, [sp, #4]
 80109ba:	601a      	str	r2, [r3, #0]
}
 80109bc:	b002      	add	sp, #8
 80109be:	bd10      	pop	{r4, pc}

080109c0 <ETH_FlushTransmitFIFO>:
{
 80109c0:	b530      	push	{r4, r5, lr}
 80109c2:	b083      	sub	sp, #12
 80109c4:	4605      	mov	r5, r0
  __IO uint32_t tmpreg1 = 0U;
 80109c6:	2300      	movs	r3, #0
 80109c8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80109ca:	6802      	ldr	r2, [r0, #0]
 80109cc:	f241 0418 	movw	r4, #4120	; 0x1018
 80109d0:	5913      	ldr	r3, [r2, r4]
 80109d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109d6:	5113      	str	r3, [r2, r4]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80109d8:	6803      	ldr	r3, [r0, #0]
 80109da:	591b      	ldr	r3, [r3, r4]
 80109dc:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80109de:	2001      	movs	r0, #1
 80109e0:	f7ff ffae 	bl	8010940 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80109e4:	682b      	ldr	r3, [r5, #0]
 80109e6:	9a01      	ldr	r2, [sp, #4]
 80109e8:	511a      	str	r2, [r3, r4]
}
 80109ea:	b003      	add	sp, #12
 80109ec:	bd30      	pop	{r4, r5, pc}
	...

080109f0 <ETH_MACDMAConfig>:
{
 80109f0:	b570      	push	{r4, r5, r6, lr}
 80109f2:	b09e      	sub	sp, #120	; 0x78
 80109f4:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80109f6:	b129      	cbz	r1, 8010a04 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80109f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80109fc:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 80109fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010a02:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8010a04:	69e3      	ldr	r3, [r4, #28]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d16a      	bne.n	8010ae0 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8010a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a0e:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8010a10:	6821      	ldr	r1, [r4, #0]
 8010a12:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8010a14:	4a39      	ldr	r2, [pc, #228]	; (8010afc <ETH_MACDMAConfig+0x10c>)
 8010a16:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8010a18:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8010a1a:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8010a1c:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8010a1e:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8010a20:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8010a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8010a26:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8010a28:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010a2a:	6823      	ldr	r3, [r4, #0]
 8010a2c:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8010a2e:	2001      	movs	r0, #1
 8010a30:	f7ff fcda 	bl	80103e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8010a34:	6823      	ldr	r3, [r4, #0]
 8010a36:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8010a38:	6823      	ldr	r3, [r4, #0]
 8010a3a:	2240      	movs	r2, #64	; 0x40
 8010a3c:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8010a3e:	6823      	ldr	r3, [r4, #0]
 8010a40:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010a42:	2001      	movs	r0, #1
 8010a44:	f7ff fcd0 	bl	80103e8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8010a48:	6823      	ldr	r3, [r4, #0]
 8010a4a:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8010a4c:	6823      	ldr	r3, [r4, #0]
 8010a4e:	2500      	movs	r5, #0
 8010a50:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8010a52:	6823      	ldr	r3, [r4, #0]
 8010a54:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8010a56:	6822      	ldr	r2, [r4, #0]
 8010a58:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8010a5a:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8010a5e:	041b      	lsls	r3, r3, #16
 8010a60:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8010a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8010a66:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 8010a68:	6823      	ldr	r3, [r4, #0]
 8010a6a:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010a6c:	2001      	movs	r0, #1
 8010a6e:	f7ff fcbb 	bl	80103e8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8010a72:	6823      	ldr	r3, [r4, #0]
 8010a74:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8010a76:	6823      	ldr	r3, [r4, #0]
 8010a78:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8010a7a:	6823      	ldr	r3, [r4, #0]
 8010a7c:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8010a7e:	2001      	movs	r0, #1
 8010a80:	f7ff fcb2 	bl	80103e8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8010a84:	6823      	ldr	r3, [r4, #0]
 8010a86:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8010a88:	6822      	ldr	r2, [r4, #0]
 8010a8a:	f241 0518 	movw	r5, #4120	; 0x1018
 8010a8e:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8010a90:	4b1b      	ldr	r3, [pc, #108]	; (8010b00 <ETH_MACDMAConfig+0x110>)
 8010a92:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8010a94:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8010a98:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8010a9c:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8010a9e:	6823      	ldr	r3, [r4, #0]
 8010aa0:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8010aa2:	2001      	movs	r0, #1
 8010aa4:	f7ff fca0 	bl	80103e8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8010aa8:	6823      	ldr	r3, [r4, #0]
 8010aaa:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8010aac:	6823      	ldr	r3, [r4, #0]
 8010aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ab2:	4a14      	ldr	r2, [pc, #80]	; (8010b04 <ETH_MACDMAConfig+0x114>)
 8010ab4:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8010ab6:	6823      	ldr	r3, [r4, #0]
 8010ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010abc:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8010abe:	2001      	movs	r0, #1
 8010ac0:	f7ff fc92 	bl	80103e8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8010ac4:	6823      	ldr	r3, [r4, #0]
 8010ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010aca:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8010acc:	69a3      	ldr	r3, [r4, #24]
 8010ace:	2b01      	cmp	r3, #1
 8010ad0:	d009      	beq.n	8010ae6 <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8010ad2:	6962      	ldr	r2, [r4, #20]
 8010ad4:	2100      	movs	r1, #0
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f7ff ff0a 	bl	80108f0 <ETH_MACAddressConfig>
}
 8010adc:	b01e      	add	sp, #120	; 0x78
 8010ade:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	9307      	str	r3, [sp, #28]
 8010ae4:	e794      	b.n	8010a10 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8010ae6:	6821      	ldr	r1, [r4, #0]
 8010ae8:	f241 021c 	movw	r2, #4124	; 0x101c
 8010aec:	588b      	ldr	r3, [r1, r2]
 8010aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010af6:	508b      	str	r3, [r1, r2]
 8010af8:	e7eb      	b.n	8010ad2 <ETH_MACDMAConfig+0xe2>
 8010afa:	bf00      	nop
 8010afc:	ff20810f 	.word	0xff20810f
 8010b00:	f8de3f23 	.word	0xf8de3f23
 8010b04:	02c12080 	.word	0x02c12080

08010b08 <HAL_ETH_DMATxDescListInit>:
{
 8010b08:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8010b0a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8010b0e:	2c01      	cmp	r4, #1
 8010b10:	d031      	beq.n	8010b76 <HAL_ETH_DMATxDescListInit+0x6e>
 8010b12:	2401      	movs	r4, #1
 8010b14:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010b18:	2402      	movs	r4, #2
 8010b1a:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8010b1e:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8010b20:	2400      	movs	r4, #0
 8010b22:	e001      	b.n	8010b28 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8010b24:	60f9      	str	r1, [r7, #12]
  for(i=0U; i < TxBuffCount; i++)
 8010b26:	3401      	adds	r4, #1
 8010b28:	429c      	cmp	r4, r3
 8010b2a:	d217      	bcs.n	8010b5c <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8010b2c:	0165      	lsls	r5, r4, #5
 8010b2e:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8010b30:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8010b34:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8010b36:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8010b3a:	fb06 2604 	mla	r6, r6, r4, r2
 8010b3e:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8010b40:	69c6      	ldr	r6, [r0, #28]
 8010b42:	b91e      	cbnz	r6, 8010b4c <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8010b44:	594e      	ldr	r6, [r1, r5]
 8010b46:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8010b4a:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1U))
 8010b4c:	1e5d      	subs	r5, r3, #1
 8010b4e:	42ac      	cmp	r4, r5
 8010b50:	d2e8      	bcs.n	8010b24 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8010b52:	1c65      	adds	r5, r4, #1
 8010b54:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8010b58:	60fd      	str	r5, [r7, #12]
 8010b5a:	e7e4      	b.n	8010b26 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8010b5c:	6802      	ldr	r2, [r0, #0]
 8010b5e:	f241 0310 	movw	r3, #4112	; 0x1010
 8010b62:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8010b64:	2301      	movs	r3, #1
 8010b66:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010b70:	4618      	mov	r0, r3
}
 8010b72:	bcf0      	pop	{r4, r5, r6, r7}
 8010b74:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010b76:	2002      	movs	r0, #2
 8010b78:	e7fb      	b.n	8010b72 <HAL_ETH_DMATxDescListInit+0x6a>

08010b7a <HAL_ETH_DMARxDescListInit>:
{
 8010b7a:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8010b7c:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8010b80:	2c01      	cmp	r4, #1
 8010b82:	d02e      	beq.n	8010be2 <HAL_ETH_DMARxDescListInit+0x68>
 8010b84:	2401      	movs	r4, #1
 8010b86:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010b8a:	2402      	movs	r4, #2
 8010b8c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8010b90:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8010b92:	2400      	movs	r4, #0
 8010b94:	e001      	b.n	8010b9a <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8010b96:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 8010b98:	3401      	adds	r4, #1
 8010b9a:	429c      	cmp	r4, r3
 8010b9c:	d214      	bcs.n	8010bc8 <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 8010b9e:	0166      	lsls	r6, r4, #5
 8010ba0:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8010ba2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8010ba6:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8010ba8:	f244 56f4 	movw	r6, #17908	; 0x45f4
 8010bac:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8010bae:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8010bb2:	fb06 2604 	mla	r6, r6, r4, r2
 8010bb6:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 8010bb8:	1e5e      	subs	r6, r3, #1
 8010bba:	42b4      	cmp	r4, r6
 8010bbc:	d2eb      	bcs.n	8010b96 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8010bbe:	1c66      	adds	r6, r4, #1
 8010bc0:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8010bc4:	60ee      	str	r6, [r5, #12]
 8010bc6:	e7e7      	b.n	8010b98 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8010bc8:	6802      	ldr	r2, [r0, #0]
 8010bca:	f241 030c 	movw	r3, #4108	; 0x100c
 8010bce:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010bdc:	4618      	mov	r0, r3
}
 8010bde:	bcf0      	pop	{r4, r5, r6, r7}
 8010be0:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010be2:	2002      	movs	r0, #2
 8010be4:	e7fb      	b.n	8010bde <HAL_ETH_DMARxDescListInit+0x64>
	...

08010be8 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8010be8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	f000 8087 	beq.w	8010d00 <HAL_ETH_TransmitFrame+0x118>
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010bf8:	2302      	movs	r3, #2
 8010bfa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8010bfe:	b199      	cbz	r1, 8010c28 <HAL_ETH_TransmitFrame+0x40>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8010c00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	2a00      	cmp	r2, #0
 8010c06:	db17      	blt.n	8010c38 <HAL_ETH_TransmitFrame+0x50>
{
 8010c08:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8010c0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010c0e:	4291      	cmp	r1, r2
 8010c10:	d91a      	bls.n	8010c48 <HAL_ETH_TransmitFrame+0x60>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8010c12:	4c3c      	ldr	r4, [pc, #240]	; (8010d04 <HAL_ETH_TransmitFrame+0x11c>)
 8010c14:	fba4 2401 	umull	r2, r4, r4, r1
 8010c18:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8010c1a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010c1e:	fb02 1214 	mls	r2, r2, r4, r1
 8010c22:	b192      	cbz	r2, 8010c4a <HAL_ETH_TransmitFrame+0x62>
      bufcount++;
 8010c24:	3401      	adds	r4, #1
 8010c26:	e010      	b.n	8010c4a <HAL_ETH_TransmitFrame+0x62>
    heth->State = HAL_ETH_STATE_READY;
 8010c28:	2301      	movs	r3, #1
 8010c2a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010c2e:	2200      	movs	r2, #0
 8010c30:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 8010c34:	4618      	mov	r0, r3
 8010c36:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8010c38:	2312      	movs	r3, #18
 8010c3a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010c3e:	2300      	movs	r3, #0
 8010c40:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 8010c44:	2001      	movs	r0, #1
 8010c46:	4770      	bx	lr
    bufcount = 1U;
 8010c48:	2401      	movs	r4, #1
  if (bufcount == 1U)
 8010c4a:	2c01      	cmp	r4, #1
 8010c4c:	d001      	beq.n	8010c52 <HAL_ETH_TransmitFrame+0x6a>
 8010c4e:	2300      	movs	r3, #0
 8010c50:	e037      	b.n	8010cc2 <HAL_ETH_TransmitFrame+0xda>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8010c58:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8010c5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010c5c:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8010c60:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8010c62:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010c64:	6813      	ldr	r3, [r2, #0]
 8010c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010c6a:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8010c6c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8010c72:	6803      	ldr	r3, [r0, #0]
 8010c74:	f241 0214 	movw	r2, #4116	; 0x1014
 8010c78:	589a      	ldr	r2, [r3, r2]
 8010c7a:	f012 0f04 	tst.w	r2, #4
 8010c7e:	d008      	beq.n	8010c92 <HAL_ETH_TransmitFrame+0xaa>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8010c80:	2104      	movs	r1, #4
 8010c82:	f241 0214 	movw	r2, #4116	; 0x1014
 8010c86:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8010c88:	6802      	ldr	r2, [r0, #0]
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	f241 0304 	movw	r3, #4100	; 0x1004
 8010c90:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8010c92:	2301      	movs	r3, #1
 8010c94:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010c98:	2300      	movs	r3, #0
 8010c9a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010c9e:	4618      	mov	r0, r3
}
 8010ca0:	bc30      	pop	{r4, r5}
 8010ca2:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8010ca4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010ca6:	682a      	ldr	r2, [r5, #0]
 8010ca8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010cac:	602a      	str	r2, [r5, #0]
 8010cae:	e011      	b.n	8010cd4 <HAL_ETH_TransmitFrame+0xec>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8010cb0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010cb2:	682a      	ldr	r2, [r5, #0]
 8010cb4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8010cb8:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8010cba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010cbc:	68d2      	ldr	r2, [r2, #12]
 8010cbe:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	429c      	cmp	r4, r3
 8010cc4:	d9d5      	bls.n	8010c72 <HAL_ETH_TransmitFrame+0x8a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8010cc6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010cc8:	682a      	ldr	r2, [r5, #0]
 8010cca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010cce:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d0e7      	beq.n	8010ca4 <HAL_ETH_TransmitFrame+0xbc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8010cd4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010cd6:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8010cda:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 8010cdc:	1e62      	subs	r2, r4, #1
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d1e6      	bne.n	8010cb0 <HAL_ETH_TransmitFrame+0xc8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8010ce2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010ce4:	682a      	ldr	r2, [r5, #0]
 8010ce6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8010cea:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8010cec:	4a06      	ldr	r2, [pc, #24]	; (8010d08 <HAL_ETH_TransmitFrame+0x120>)
 8010cee:	fb02 1204 	mla	r2, r2, r4, r1
 8010cf2:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8010cf6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010cf8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010cfc:	606a      	str	r2, [r5, #4]
 8010cfe:	e7d7      	b.n	8010cb0 <HAL_ETH_TransmitFrame+0xc8>
  __HAL_LOCK(heth);
 8010d00:	2002      	movs	r0, #2
 8010d02:	4770      	bx	lr
 8010d04:	ac02b00b 	.word	0xac02b00b
 8010d08:	fffffa0c 	.word	0xfffffa0c

08010d0c <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8010d0c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8010d10:	2b01      	cmp	r3, #1
 8010d12:	d045      	beq.n	8010da0 <HAL_ETH_GetReceivedFrame_IT+0x94>
 8010d14:	2301      	movs	r3, #1
 8010d16:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010d1a:	2302      	movs	r3, #2
 8010d1c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  uint32_t descriptorscancounter = 0U;
 8010d20:	2100      	movs	r1, #0
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8010d22:	e00a      	b.n	8010d3a <HAL_ETH_GetReceivedFrame_IT+0x2e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8010d24:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8010d26:	2201      	movs	r2, #1
 8010d28:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	6283      	str	r3, [r0, #40]	; 0x28
 8010d2e:	e004      	b.n	8010d3a <HAL_ETH_GetReceivedFrame_IT+0x2e>
      (heth->RxFrameInfos.SegCount)++;
 8010d30:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8010d32:	3201      	adds	r2, #1
 8010d34:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8010d3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	2a00      	cmp	r2, #0
 8010d40:	db26      	blt.n	8010d90 <HAL_ETH_GetReceivedFrame_IT+0x84>
 8010d42:	2903      	cmp	r1, #3
 8010d44:	d824      	bhi.n	8010d90 <HAL_ETH_GetReceivedFrame_IT+0x84>
    descriptorscancounter++;
 8010d46:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8010d4e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8010d52:	d0e7      	beq.n	8010d24 <HAL_ETH_GetReceivedFrame_IT+0x18>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	f412 7f40 	tst.w	r2, #768	; 0x300
 8010d5a:	d0e9      	beq.n	8010d30 <HAL_ETH_GetReceivedFrame_IT+0x24>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8010d5c:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8010d5e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8010d60:	3201      	adds	r2, #1
 8010d62:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8010d64:	2a01      	cmp	r2, #1
 8010d66:	d011      	beq.n	8010d8c <HAL_ETH_GetReceivedFrame_IT+0x80>
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8010d6e:	3a04      	subs	r2, #4
 8010d70:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8010d72:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8010d74:	6892      	ldr	r2, [r2, #8]
 8010d76:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8010d78:	68db      	ldr	r3, [r3, #12]
 8010d7a:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010d82:	2300      	movs	r3, #0
 8010d84:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8010d88:	4618      	mov	r0, r3
 8010d8a:	4770      	bx	lr
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8010d8c:	6303      	str	r3, [r0, #48]	; 0x30
 8010d8e:	e7eb      	b.n	8010d68 <HAL_ETH_GetReceivedFrame_IT+0x5c>
  heth->State = HAL_ETH_STATE_READY;
 8010d90:	2301      	movs	r3, #1
 8010d92:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010d96:	2200      	movs	r2, #0
 8010d98:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010da0:	2002      	movs	r0, #2
}
 8010da2:	4770      	bx	lr

08010da4 <HAL_ETH_TxCpltCallback>:
{
 8010da4:	4770      	bx	lr

08010da6 <HAL_ETH_ErrorCallback>:
{
 8010da6:	4770      	bx	lr

08010da8 <HAL_ETH_IRQHandler>:
{
 8010da8:	b510      	push	{r4, lr}
 8010daa:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8010dac:	6803      	ldr	r3, [r0, #0]
 8010dae:	f241 0214 	movw	r2, #4116	; 0x1014
 8010db2:	589a      	ldr	r2, [r3, r2]
 8010db4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8010db8:	d111      	bne.n	8010dde <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8010dba:	f241 0214 	movw	r2, #4116	; 0x1014
 8010dbe:	589b      	ldr	r3, [r3, r2]
 8010dc0:	f013 0f01 	tst.w	r3, #1
 8010dc4:	d119      	bne.n	8010dfa <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8010dc6:	6822      	ldr	r2, [r4, #0]
 8010dc8:	f241 0314 	movw	r3, #4116	; 0x1014
 8010dcc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8010dd0:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8010dd2:	6822      	ldr	r2, [r4, #0]
 8010dd4:	58d3      	ldr	r3, [r2, r3]
 8010dd6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8010dda:	d11b      	bne.n	8010e14 <HAL_ETH_IRQHandler+0x6c>
 8010ddc:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8010dde:	f00c fbcb 	bl	801d578 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8010de2:	6822      	ldr	r2, [r4, #0]
 8010de4:	2140      	movs	r1, #64	; 0x40
 8010de6:	f241 0314 	movw	r3, #4116	; 0x1014
 8010dea:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8010dec:	2301      	movs	r3, #1
 8010dee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010df2:	2300      	movs	r3, #0
 8010df4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010df8:	e7e5      	b.n	8010dc6 <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8010dfa:	f7ff ffd3 	bl	8010da4 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8010dfe:	6821      	ldr	r1, [r4, #0]
 8010e00:	2301      	movs	r3, #1
 8010e02:	f241 0214 	movw	r2, #4116	; 0x1014
 8010e06:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8010e08:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e12:	e7d8      	b.n	8010dc6 <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8010e14:	4620      	mov	r0, r4
 8010e16:	f7ff ffc6 	bl	8010da6 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8010e1a:	6822      	ldr	r2, [r4, #0]
 8010e1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010e20:	f241 0314 	movw	r3, #4116	; 0x1014
 8010e24:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8010e26:	2301      	movs	r3, #1
 8010e28:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8010e32:	e7d3      	b.n	8010ddc <HAL_ETH_IRQHandler+0x34>

08010e34 <HAL_ETH_ReadPHYRegister>:
{
 8010e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8010e36:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	2b82      	cmp	r3, #130	; 0x82
 8010e3e:	d101      	bne.n	8010e44 <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8010e40:	2002      	movs	r0, #2
}
 8010e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e44:	4616      	mov	r6, r2
 8010e46:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8010e48:	2382      	movs	r3, #130	; 0x82
 8010e4a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8010e4e:	6802      	ldr	r2, [r0, #0]
 8010e50:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8010e52:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8010e56:	8a03      	ldrh	r3, [r0, #16]
 8010e58:	02db      	lsls	r3, r3, #11
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8010e5e:	0189      	lsls	r1, r1, #6
 8010e60:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8010e64:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8010e66:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8010e6a:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8010e6c:	f7ff fab6 	bl	80103dc <HAL_GetTick>
 8010e70:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8010e72:	f014 0f01 	tst.w	r4, #1
 8010e76:	d010      	beq.n	8010e9a <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8010e78:	f7ff fab0 	bl	80103dc <HAL_GetTick>
 8010e7c:	1bc0      	subs	r0, r0, r7
 8010e7e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010e82:	d202      	bcs.n	8010e8a <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8010e84:	682b      	ldr	r3, [r5, #0]
 8010e86:	691c      	ldr	r4, [r3, #16]
 8010e88:	e7f3      	b.n	8010e72 <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010e90:	2300      	movs	r3, #0
 8010e92:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8010e96:	2003      	movs	r0, #3
 8010e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8010e9a:	682b      	ldr	r3, [r5, #0]
 8010e9c:	695b      	ldr	r3, [r3, #20]
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8010ea8:	2000      	movs	r0, #0
 8010eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010eac <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8010eac:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	2b42      	cmp	r3, #66	; 0x42
 8010eb4:	d101      	bne.n	8010eba <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8010eb6:	2002      	movs	r0, #2
 8010eb8:	4770      	bx	lr
{
 8010eba:	b570      	push	{r4, r5, r6, lr}
 8010ebc:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8010ebe:	2342      	movs	r3, #66	; 0x42
 8010ec0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8010ec4:	6800      	ldr	r0, [r0, #0]
 8010ec6:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8010ec8:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8010ecc:	8a2b      	ldrh	r3, [r5, #16]
 8010ece:	02db      	lsls	r3, r3, #11
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8010ed4:	0189      	lsls	r1, r1, #6
 8010ed6:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8010eda:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8010edc:	f044 0403 	orr.w	r4, r4, #3
 8010ee0:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8010ee2:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8010ee4:	682b      	ldr	r3, [r5, #0]
 8010ee6:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8010ee8:	f7ff fa78 	bl	80103dc <HAL_GetTick>
 8010eec:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8010eee:	f014 0f01 	tst.w	r4, #1
 8010ef2:	d010      	beq.n	8010f16 <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8010ef4:	f7ff fa72 	bl	80103dc <HAL_GetTick>
 8010ef8:	1b80      	subs	r0, r0, r6
 8010efa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010efe:	d202      	bcs.n	8010f06 <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8010f00:	682b      	ldr	r3, [r5, #0]
 8010f02:	691c      	ldr	r4, [r3, #16]
 8010f04:	e7f3      	b.n	8010eee <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8010f06:	2301      	movs	r3, #1
 8010f08:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8010f12:	2003      	movs	r0, #3
 8010f14:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8010f16:	2301      	movs	r3, #1
 8010f18:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8010f1c:	2000      	movs	r0, #0
 8010f1e:	bd70      	pop	{r4, r5, r6, pc}

08010f20 <HAL_ETH_Init>:
{
 8010f20:	b570      	push	{r4, r5, r6, lr}
 8010f22:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8010f24:	2300      	movs	r3, #0
 8010f26:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	f000 810e 	beq.w	801114a <HAL_ETH_Init+0x22a>
 8010f2e:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8010f30:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d034      	beq.n	8010fa2 <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010f38:	2300      	movs	r3, #0
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	4b84      	ldr	r3, [pc, #528]	; (8011150 <HAL_ETH_Init+0x230>)
 8010f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010f44:	645a      	str	r2, [r3, #68]	; 0x44
 8010f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f4c:	9300      	str	r3, [sp, #0]
 8010f4e:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8010f50:	4b80      	ldr	r3, [pc, #512]	; (8011154 <HAL_ETH_Init+0x234>)
 8010f52:	685a      	ldr	r2, [r3, #4]
 8010f54:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010f58:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8010f5a:	685a      	ldr	r2, [r3, #4]
 8010f5c:	6a21      	ldr	r1, [r4, #32]
 8010f5e:	430a      	orrs	r2, r1
 8010f60:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8010f62:	6823      	ldr	r3, [r4, #0]
 8010f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	f042 0201 	orr.w	r2, r2, #1
 8010f6e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8010f70:	f7ff fa34 	bl	80103dc <HAL_GetTick>
 8010f74:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8010f7c:	6812      	ldr	r2, [r2, #0]
 8010f7e:	f012 0f01 	tst.w	r2, #1
 8010f82:	d013      	beq.n	8010fac <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8010f84:	f7ff fa2a 	bl	80103dc <HAL_GetTick>
 8010f88:	1b40      	subs	r0, r0, r5
 8010f8a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8010f8e:	d9f2      	bls.n	8010f76 <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8010f90:	2503      	movs	r5, #3
 8010f92:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010f96:	2300      	movs	r3, #0
 8010f98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	b002      	add	sp, #8
 8010fa0:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8010fa2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8010fa6:	f00c fa8b 	bl	801d4c0 <HAL_ETH_MspInit>
 8010faa:	e7c5      	b.n	8010f38 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8010fac:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8010fae:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8010fb2:	f000 fe93 	bl	8011cdc <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8010fb6:	4b68      	ldr	r3, [pc, #416]	; (8011158 <HAL_ETH_Init+0x238>)
 8010fb8:	4403      	add	r3, r0
 8010fba:	4a68      	ldr	r2, [pc, #416]	; (801115c <HAL_ETH_Init+0x23c>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d855      	bhi.n	801106c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8010fc0:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8010fc4:	6823      	ldr	r3, [r4, #0]
 8010fc6:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8010fc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010fcc:	2100      	movs	r1, #0
 8010fce:	4620      	mov	r0, r4
 8010fd0:	f7ff ff6c 	bl	8010eac <HAL_ETH_WritePHYRegister>
 8010fd4:	4605      	mov	r5, r0
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	d160      	bne.n	801109c <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8010fda:	20ff      	movs	r0, #255	; 0xff
 8010fdc:	f7ff fa04 	bl	80103e8 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8010fe0:	6863      	ldr	r3, [r4, #4]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	f000 8091 	beq.w	801110a <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8010fe8:	f7ff f9f8 	bl	80103dc <HAL_GetTick>
 8010fec:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8010fee:	aa01      	add	r2, sp, #4
 8010ff0:	2101      	movs	r1, #1
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	f7ff ff1e 	bl	8010e34 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8010ff8:	f7ff f9f0 	bl	80103dc <HAL_GetTick>
 8010ffc:	1b80      	subs	r0, r0, r6
 8010ffe:	f241 3388 	movw	r3, #5000	; 0x1388
 8011002:	4298      	cmp	r0, r3
 8011004:	d852      	bhi.n	80110ac <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8011006:	9b01      	ldr	r3, [sp, #4]
 8011008:	f013 0f04 	tst.w	r3, #4
 801100c:	d0ef      	beq.n	8010fee <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 801100e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011012:	2100      	movs	r1, #0
 8011014:	4620      	mov	r0, r4
 8011016:	f7ff ff49 	bl	8010eac <HAL_ETH_WritePHYRegister>
 801101a:	2800      	cmp	r0, #0
 801101c:	d152      	bne.n	80110c4 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 801101e:	f7ff f9dd 	bl	80103dc <HAL_GetTick>
 8011022:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8011024:	aa01      	add	r2, sp, #4
 8011026:	2101      	movs	r1, #1
 8011028:	4620      	mov	r0, r4
 801102a:	f7ff ff03 	bl	8010e34 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 801102e:	f7ff f9d5 	bl	80103dc <HAL_GetTick>
 8011032:	1b80      	subs	r0, r0, r6
 8011034:	f241 3388 	movw	r3, #5000	; 0x1388
 8011038:	4298      	cmp	r0, r3
 801103a:	d84b      	bhi.n	80110d4 <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 801103c:	9b01      	ldr	r3, [sp, #4]
 801103e:	f013 0f20 	tst.w	r3, #32
 8011042:	d0ef      	beq.n	8011024 <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8011044:	aa01      	add	r2, sp, #4
 8011046:	2110      	movs	r1, #16
 8011048:	4620      	mov	r0, r4
 801104a:	f7ff fef3 	bl	8010e34 <HAL_ETH_ReadPHYRegister>
 801104e:	2800      	cmp	r0, #0
 8011050:	d14c      	bne.n	80110ec <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8011052:	9b01      	ldr	r3, [sp, #4]
 8011054:	f013 0f04 	tst.w	r3, #4
 8011058:	d050      	beq.n	80110fc <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 801105a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801105e:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8011060:	f013 0f02 	tst.w	r3, #2
 8011064:	d04d      	beq.n	8011102 <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8011066:	2300      	movs	r3, #0
 8011068:	60a3      	str	r3, [r4, #8]
 801106a:	e05e      	b.n	801112a <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 801106c:	4b3c      	ldr	r3, [pc, #240]	; (8011160 <HAL_ETH_Init+0x240>)
 801106e:	4403      	add	r3, r0
 8011070:	4a3c      	ldr	r2, [pc, #240]	; (8011164 <HAL_ETH_Init+0x244>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d802      	bhi.n	801107c <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8011076:	f045 050c 	orr.w	r5, r5, #12
 801107a:	e7a3      	b.n	8010fc4 <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 801107c:	4b3a      	ldr	r3, [pc, #232]	; (8011168 <HAL_ETH_Init+0x248>)
 801107e:	4403      	add	r3, r0
 8011080:	4a3a      	ldr	r2, [pc, #232]	; (801116c <HAL_ETH_Init+0x24c>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d99e      	bls.n	8010fc4 <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8011086:	4b3a      	ldr	r3, [pc, #232]	; (8011170 <HAL_ETH_Init+0x250>)
 8011088:	4403      	add	r3, r0
 801108a:	4a3a      	ldr	r2, [pc, #232]	; (8011174 <HAL_ETH_Init+0x254>)
 801108c:	4293      	cmp	r3, r2
 801108e:	d802      	bhi.n	8011096 <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8011090:	f045 0504 	orr.w	r5, r5, #4
 8011094:	e796      	b.n	8010fc4 <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8011096:	f045 0510 	orr.w	r5, r5, #16
 801109a:	e793      	b.n	8010fc4 <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 801109c:	2101      	movs	r1, #1
 801109e:	4620      	mov	r0, r4
 80110a0:	f7ff fca6 	bl	80109f0 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 80110a4:	2501      	movs	r5, #1
 80110a6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 80110aa:	e777      	b.n	8010f9c <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 80110ac:	2101      	movs	r1, #1
 80110ae:	4620      	mov	r0, r4
 80110b0:	f7ff fc9e 	bl	80109f0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80110b4:	2301      	movs	r3, #1
 80110b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80110ba:	2300      	movs	r3, #0
 80110bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80110c0:	2503      	movs	r5, #3
 80110c2:	e76b      	b.n	8010f9c <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 80110c4:	2101      	movs	r1, #1
 80110c6:	4620      	mov	r0, r4
 80110c8:	f7ff fc92 	bl	80109f0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80110cc:	2501      	movs	r5, #1
 80110ce:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 80110d2:	e763      	b.n	8010f9c <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 80110d4:	2101      	movs	r1, #1
 80110d6:	4620      	mov	r0, r4
 80110d8:	f7ff fc8a 	bl	80109f0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80110dc:	2301      	movs	r3, #1
 80110de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80110e2:	2300      	movs	r3, #0
 80110e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80110e8:	2503      	movs	r5, #3
 80110ea:	e757      	b.n	8010f9c <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 80110ec:	2101      	movs	r1, #1
 80110ee:	4620      	mov	r0, r4
 80110f0:	f7ff fc7e 	bl	80109f0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80110f4:	2501      	movs	r5, #1
 80110f6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 80110fa:	e74f      	b.n	8010f9c <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80110fc:	2200      	movs	r2, #0
 80110fe:	60e2      	str	r2, [r4, #12]
 8011100:	e7ae      	b.n	8011060 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8011102:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011106:	60a3      	str	r3, [r4, #8]
 8011108:	e00f      	b.n	801112a <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 801110a:	68e3      	ldr	r3, [r4, #12]
 801110c:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8011110:	68a3      	ldr	r3, [r4, #8]
 8011112:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8011116:	431a      	orrs	r2, r3
 8011118:	2100      	movs	r1, #0
 801111a:	4620      	mov	r0, r4
 801111c:	f7ff fec6 	bl	8010eac <HAL_ETH_WritePHYRegister>
 8011120:	b958      	cbnz	r0, 801113a <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8011122:	f640 70ff 	movw	r0, #4095	; 0xfff
 8011126:	f7ff f95f 	bl	80103e8 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 801112a:	2100      	movs	r1, #0
 801112c:	4620      	mov	r0, r4
 801112e:	f7ff fc5f 	bl	80109f0 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8011132:	2301      	movs	r3, #1
 8011134:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8011138:	e730      	b.n	8010f9c <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 801113a:	2101      	movs	r1, #1
 801113c:	4620      	mov	r0, r4
 801113e:	f7ff fc57 	bl	80109f0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8011142:	2501      	movs	r5, #1
 8011144:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8011148:	e728      	b.n	8010f9c <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 801114a:	2501      	movs	r5, #1
 801114c:	e726      	b.n	8010f9c <HAL_ETH_Init+0x7c>
 801114e:	bf00      	nop
 8011150:	40023800 	.word	0x40023800
 8011154:	40013800 	.word	0x40013800
 8011158:	feced300 	.word	0xfeced300
 801115c:	00e4e1bf 	.word	0x00e4e1bf
 8011160:	fde9f140 	.word	0xfde9f140
 8011164:	017d783f 	.word	0x017d783f
 8011168:	fc6c7900 	.word	0xfc6c7900
 801116c:	026259ff 	.word	0x026259ff
 8011170:	fa0a1f00 	.word	0xfa0a1f00
 8011174:	02faf07f 	.word	0x02faf07f

08011178 <HAL_ETH_Start>:
{  
 8011178:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 801117a:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 801117e:	2b01      	cmp	r3, #1
 8011180:	d101      	bne.n	8011186 <HAL_ETH_Start+0xe>
 8011182:	2002      	movs	r0, #2
}
 8011184:	bd38      	pop	{r3, r4, r5, pc}
 8011186:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8011188:	2501      	movs	r5, #1
 801118a:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 801118e:	2302      	movs	r3, #2
 8011190:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8011194:	f7ff fbea 	bl	801096c <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 8011198:	4620      	mov	r0, r4
 801119a:	f7ff fbfc 	bl	8010996 <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 801119e:	4620      	mov	r0, r4
 80111a0:	f7ff fc0e 	bl	80109c0 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 80111a4:	4620      	mov	r0, r4
 80111a6:	f7ff fbbb 	bl	8010920 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 80111aa:	4620      	mov	r0, r4
 80111ac:	f7ff fbc0 	bl	8010930 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 80111b0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80111b4:	2000      	movs	r0, #0
 80111b6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 80111ba:	bd38      	pop	{r3, r4, r5, pc}

080111bc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80111bc:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80111be:	4909      	ldr	r1, [pc, #36]	; (80111e4 <FLASH_Program_DoubleWord+0x28>)
 80111c0:	690c      	ldr	r4, [r1, #16]
 80111c2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80111c6:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80111c8:	690c      	ldr	r4, [r1, #16]
 80111ca:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80111ce:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80111d0:	690c      	ldr	r4, [r1, #16]
 80111d2:	f044 0401 	orr.w	r4, r4, #1
 80111d6:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80111d8:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80111da:	6043      	str	r3, [r0, #4]
}
 80111dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	40023c00 	.word	0x40023c00

080111e8 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80111e8:	4b07      	ldr	r3, [pc, #28]	; (8011208 <FLASH_Program_Word+0x20>)
 80111ea:	691a      	ldr	r2, [r3, #16]
 80111ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80111f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80111f2:	691a      	ldr	r2, [r3, #16]
 80111f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80111f8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80111fa:	691a      	ldr	r2, [r3, #16]
 80111fc:	f042 0201 	orr.w	r2, r2, #1
 8011200:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8011202:	6001      	str	r1, [r0, #0]
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	40023c00 	.word	0x40023c00

0801120c <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801120c:	4b07      	ldr	r3, [pc, #28]	; (801122c <FLASH_Program_HalfWord+0x20>)
 801120e:	691a      	ldr	r2, [r3, #16]
 8011210:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011214:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8011216:	691a      	ldr	r2, [r3, #16]
 8011218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801121c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 801121e:	691a      	ldr	r2, [r3, #16]
 8011220:	f042 0201 	orr.w	r2, r2, #1
 8011224:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8011226:	8001      	strh	r1, [r0, #0]
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop
 801122c:	40023c00 	.word	0x40023c00

08011230 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011230:	4b06      	ldr	r3, [pc, #24]	; (801124c <FLASH_Program_Byte+0x1c>)
 8011232:	691a      	ldr	r2, [r3, #16]
 8011234:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011238:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 801123a:	691a      	ldr	r2, [r3, #16]
 801123c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 801123e:	691a      	ldr	r2, [r3, #16]
 8011240:	f042 0201 	orr.w	r2, r2, #1
 8011244:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8011246:	7001      	strb	r1, [r0, #0]
 8011248:	4770      	bx	lr
 801124a:	bf00      	nop
 801124c:	40023c00 	.word	0x40023c00

08011250 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8011250:	4b20      	ldr	r3, [pc, #128]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 8011252:	68db      	ldr	r3, [r3, #12]
 8011254:	f013 0f10 	tst.w	r3, #16
 8011258:	d007      	beq.n	801126a <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801125a:	4a1f      	ldr	r2, [pc, #124]	; (80112d8 <FLASH_SetErrorCode+0x88>)
 801125c:	69d3      	ldr	r3, [r2, #28]
 801125e:	f043 0310 	orr.w	r3, r3, #16
 8011262:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8011264:	2210      	movs	r2, #16
 8011266:	4b1b      	ldr	r3, [pc, #108]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 8011268:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801126a:	4b1a      	ldr	r3, [pc, #104]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	f013 0f20 	tst.w	r3, #32
 8011272:	d007      	beq.n	8011284 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8011274:	4a18      	ldr	r2, [pc, #96]	; (80112d8 <FLASH_SetErrorCode+0x88>)
 8011276:	69d3      	ldr	r3, [r2, #28]
 8011278:	f043 0308 	orr.w	r3, r3, #8
 801127c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801127e:	2220      	movs	r2, #32
 8011280:	4b14      	ldr	r3, [pc, #80]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 8011282:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8011284:	4b13      	ldr	r3, [pc, #76]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	f013 0f40 	tst.w	r3, #64	; 0x40
 801128c:	d007      	beq.n	801129e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801128e:	4a12      	ldr	r2, [pc, #72]	; (80112d8 <FLASH_SetErrorCode+0x88>)
 8011290:	69d3      	ldr	r3, [r2, #28]
 8011292:	f043 0304 	orr.w	r3, r3, #4
 8011296:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8011298:	2240      	movs	r2, #64	; 0x40
 801129a:	4b0e      	ldr	r3, [pc, #56]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 801129c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801129e:	4b0d      	ldr	r3, [pc, #52]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80112a6:	d007      	beq.n	80112b8 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80112a8:	4a0b      	ldr	r2, [pc, #44]	; (80112d8 <FLASH_SetErrorCode+0x88>)
 80112aa:	69d3      	ldr	r3, [r2, #28]
 80112ac:	f043 0302 	orr.w	r3, r3, #2
 80112b0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80112b2:	2280      	movs	r2, #128	; 0x80
 80112b4:	4b07      	ldr	r3, [pc, #28]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 80112b6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80112b8:	4b06      	ldr	r3, [pc, #24]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	f013 0f02 	tst.w	r3, #2
 80112c0:	d007      	beq.n	80112d2 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80112c2:	4a05      	ldr	r2, [pc, #20]	; (80112d8 <FLASH_SetErrorCode+0x88>)
 80112c4:	69d3      	ldr	r3, [r2, #28]
 80112c6:	f043 0320 	orr.w	r3, r3, #32
 80112ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80112cc:	2202      	movs	r2, #2
 80112ce:	4b01      	ldr	r3, [pc, #4]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 80112d0:	60da      	str	r2, [r3, #12]
 80112d2:	4770      	bx	lr
 80112d4:	40023c00 	.word	0x40023c00
 80112d8:	20010f98 	.word	0x20010f98

080112dc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80112dc:	4b09      	ldr	r3, [pc, #36]	; (8011304 <HAL_FLASH_Unlock+0x28>)
 80112de:	691b      	ldr	r3, [r3, #16]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	db01      	blt.n	80112e8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80112e4:	2000      	movs	r0, #0
 80112e6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80112e8:	4b06      	ldr	r3, [pc, #24]	; (8011304 <HAL_FLASH_Unlock+0x28>)
 80112ea:	4a07      	ldr	r2, [pc, #28]	; (8011308 <HAL_FLASH_Unlock+0x2c>)
 80112ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80112ee:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80112f2:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80112f4:	691b      	ldr	r3, [r3, #16]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	db01      	blt.n	80112fe <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80112fa:	2000      	movs	r0, #0
 80112fc:	4770      	bx	lr
      status = HAL_ERROR;
 80112fe:	2001      	movs	r0, #1
}
 8011300:	4770      	bx	lr
 8011302:	bf00      	nop
 8011304:	40023c00 	.word	0x40023c00
 8011308:	45670123 	.word	0x45670123

0801130c <FLASH_WaitForLastOperation>:
{ 
 801130c:	b538      	push	{r3, r4, r5, lr}
 801130e:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011310:	2200      	movs	r2, #0
 8011312:	4b15      	ldr	r3, [pc, #84]	; (8011368 <FLASH_WaitForLastOperation+0x5c>)
 8011314:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8011316:	f7ff f861 	bl	80103dc <HAL_GetTick>
 801131a:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801131c:	4b13      	ldr	r3, [pc, #76]	; (801136c <FLASH_WaitForLastOperation+0x60>)
 801131e:	68db      	ldr	r3, [r3, #12]
 8011320:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8011324:	d00a      	beq.n	801133c <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8011326:	f1b4 3fff 	cmp.w	r4, #4294967295
 801132a:	d0f7      	beq.n	801131c <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801132c:	b1cc      	cbz	r4, 8011362 <FLASH_WaitForLastOperation+0x56>
 801132e:	f7ff f855 	bl	80103dc <HAL_GetTick>
 8011332:	1b40      	subs	r0, r0, r5
 8011334:	4284      	cmp	r4, r0
 8011336:	d2f1      	bcs.n	801131c <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8011338:	2003      	movs	r0, #3
 801133a:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 801133c:	4b0b      	ldr	r3, [pc, #44]	; (801136c <FLASH_WaitForLastOperation+0x60>)
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	f013 0f01 	tst.w	r3, #1
 8011344:	d002      	beq.n	801134c <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011346:	2201      	movs	r2, #1
 8011348:	4b08      	ldr	r3, [pc, #32]	; (801136c <FLASH_WaitForLastOperation+0x60>)
 801134a:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801134c:	4b07      	ldr	r3, [pc, #28]	; (801136c <FLASH_WaitForLastOperation+0x60>)
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8011354:	d101      	bne.n	801135a <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8011356:	2000      	movs	r0, #0
}  
 8011358:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 801135a:	f7ff ff79 	bl	8011250 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801135e:	2001      	movs	r0, #1
 8011360:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8011362:	2003      	movs	r0, #3
 8011364:	bd38      	pop	{r3, r4, r5, pc}
 8011366:	bf00      	nop
 8011368:	20010f98 	.word	0x20010f98
 801136c:	40023c00 	.word	0x40023c00

08011370 <HAL_FLASH_Program>:
{
 8011370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8011374:	4c1d      	ldr	r4, [pc, #116]	; (80113ec <HAL_FLASH_Program+0x7c>)
 8011376:	7e24      	ldrb	r4, [r4, #24]
 8011378:	2c01      	cmp	r4, #1
 801137a:	d103      	bne.n	8011384 <HAL_FLASH_Program+0x14>
 801137c:	2402      	movs	r4, #2
}
 801137e:	4620      	mov	r0, r4
 8011380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011384:	4698      	mov	r8, r3
 8011386:	4617      	mov	r7, r2
 8011388:	460e      	mov	r6, r1
 801138a:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 801138c:	2201      	movs	r2, #1
 801138e:	4b17      	ldr	r3, [pc, #92]	; (80113ec <HAL_FLASH_Program+0x7c>)
 8011390:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011392:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011396:	f7ff ffb9 	bl	801130c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 801139a:	4604      	mov	r4, r0
 801139c:	b998      	cbnz	r0, 80113c6 <HAL_FLASH_Program+0x56>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801139e:	b1b5      	cbz	r5, 80113ce <HAL_FLASH_Program+0x5e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80113a0:	2d01      	cmp	r5, #1
 80113a2:	d019      	beq.n	80113d8 <HAL_FLASH_Program+0x68>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80113a4:	2d02      	cmp	r5, #2
 80113a6:	d01c      	beq.n	80113e2 <HAL_FLASH_Program+0x72>
      FLASH_Program_DoubleWord(Address, Data);
 80113a8:	463a      	mov	r2, r7
 80113aa:	4643      	mov	r3, r8
 80113ac:	4630      	mov	r0, r6
 80113ae:	f7ff ff05 	bl	80111bc <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80113b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80113b6:	f7ff ffa9 	bl	801130c <FLASH_WaitForLastOperation>
 80113ba:	4604      	mov	r4, r0
    FLASH->CR &= (~FLASH_CR_PG);  
 80113bc:	4a0c      	ldr	r2, [pc, #48]	; (80113f0 <HAL_FLASH_Program+0x80>)
 80113be:	6913      	ldr	r3, [r2, #16]
 80113c0:	f023 0301 	bic.w	r3, r3, #1
 80113c4:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80113c6:	2200      	movs	r2, #0
 80113c8:	4b08      	ldr	r3, [pc, #32]	; (80113ec <HAL_FLASH_Program+0x7c>)
 80113ca:	761a      	strb	r2, [r3, #24]
  return status;
 80113cc:	e7d7      	b.n	801137e <HAL_FLASH_Program+0xe>
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80113ce:	b2f9      	uxtb	r1, r7
 80113d0:	4630      	mov	r0, r6
 80113d2:	f7ff ff2d 	bl	8011230 <FLASH_Program_Byte>
 80113d6:	e7ec      	b.n	80113b2 <HAL_FLASH_Program+0x42>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80113d8:	b2b9      	uxth	r1, r7
 80113da:	4630      	mov	r0, r6
 80113dc:	f7ff ff16 	bl	801120c <FLASH_Program_HalfWord>
 80113e0:	e7e7      	b.n	80113b2 <HAL_FLASH_Program+0x42>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80113e2:	4639      	mov	r1, r7
 80113e4:	4630      	mov	r0, r6
 80113e6:	f7ff feff 	bl	80111e8 <FLASH_Program_Word>
 80113ea:	e7e2      	b.n	80113b2 <HAL_FLASH_Program+0x42>
 80113ec:	20010f98 	.word	0x20010f98
 80113f0:	40023c00 	.word	0x40023c00

080113f4 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80113f4:	4b07      	ldr	r3, [pc, #28]	; (8011414 <FLASH_MassErase+0x20>)
 80113f6:	691a      	ldr	r2, [r3, #16]
 80113f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80113fc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80113fe:	691a      	ldr	r2, [r3, #16]
 8011400:	f042 0204 	orr.w	r2, r2, #4
 8011404:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8011406:	691a      	ldr	r2, [r3, #16]
 8011408:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 801140c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8011410:	6118      	str	r0, [r3, #16]
 8011412:	4770      	bx	lr
 8011414:	40023c00 	.word	0x40023c00

08011418 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8011418:	b1f9      	cbz	r1, 801145a <FLASH_Erase_Sector+0x42>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 801141a:	2901      	cmp	r1, #1
 801141c:	d01f      	beq.n	801145e <FLASH_Erase_Sector+0x46>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801141e:	2902      	cmp	r1, #2
 8011420:	d018      	beq.n	8011454 <FLASH_Erase_Sector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011422:	f44f 7140 	mov.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011426:	4b0f      	ldr	r3, [pc, #60]	; (8011464 <FLASH_Erase_Sector+0x4c>)
 8011428:	691a      	ldr	r2, [r3, #16]
 801142a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801142e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8011430:	691a      	ldr	r2, [r3, #16]
 8011432:	430a      	orrs	r2, r1
 8011434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8011436:	691a      	ldr	r2, [r3, #16]
 8011438:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 801143c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801143e:	691a      	ldr	r2, [r3, #16]
 8011440:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8011444:	f040 0002 	orr.w	r0, r0, #2
 8011448:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801144a:	691a      	ldr	r2, [r3, #16]
 801144c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011450:	611a      	str	r2, [r3, #16]
 8011452:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_WORD;
 8011454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011458:	e7e5      	b.n	8011426 <FLASH_Erase_Sector+0xe>
     tmp_psize = FLASH_PSIZE_BYTE;
 801145a:	2100      	movs	r1, #0
 801145c:	e7e3      	b.n	8011426 <FLASH_Erase_Sector+0xe>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801145e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011462:	e7e0      	b.n	8011426 <FLASH_Erase_Sector+0xe>
 8011464:	40023c00 	.word	0x40023c00

08011468 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8011468:	4b16      	ldr	r3, [pc, #88]	; (80114c4 <FLASH_FlushCaches+0x5c>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8011470:	d010      	beq.n	8011494 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8011472:	4b14      	ldr	r3, [pc, #80]	; (80114c4 <FLASH_FlushCaches+0x5c>)
 8011474:	681a      	ldr	r2, [r3, #0]
 8011476:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801147a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801147c:	681a      	ldr	r2, [r3, #0]
 801147e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011482:	601a      	str	r2, [r3, #0]
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801148a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011492:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8011494:	4b0b      	ldr	r3, [pc, #44]	; (80114c4 <FLASH_FlushCaches+0x5c>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f413 6f80 	tst.w	r3, #1024	; 0x400
 801149c:	d010      	beq.n	80114c0 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 801149e:	4b09      	ldr	r3, [pc, #36]	; (80114c4 <FLASH_FlushCaches+0x5c>)
 80114a0:	681a      	ldr	r2, [r3, #0]
 80114a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114a6:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80114ae:	601a      	str	r2, [r3, #0]
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80114b6:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80114be:	601a      	str	r2, [r3, #0]
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	40023c00 	.word	0x40023c00

080114c8 <HAL_FLASHEx_Erase>:
{
 80114c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80114ca:	4b22      	ldr	r3, [pc, #136]	; (8011554 <HAL_FLASHEx_Erase+0x8c>)
 80114cc:	7e1b      	ldrb	r3, [r3, #24]
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d102      	bne.n	80114d8 <HAL_FLASHEx_Erase+0x10>
 80114d2:	2702      	movs	r7, #2
}
 80114d4:	4638      	mov	r0, r7
 80114d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114d8:	460e      	mov	r6, r1
 80114da:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 80114dc:	2201      	movs	r2, #1
 80114de:	4b1d      	ldr	r3, [pc, #116]	; (8011554 <HAL_FLASHEx_Erase+0x8c>)
 80114e0:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80114e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80114e6:	f7ff ff11 	bl	801130c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80114ea:	4607      	mov	r7, r0
 80114ec:	bb70      	cbnz	r0, 801154c <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 80114ee:	f04f 33ff 	mov.w	r3, #4294967295
 80114f2:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80114f4:	6823      	ldr	r3, [r4, #0]
 80114f6:	2b01      	cmp	r3, #1
 80114f8:	d016      	beq.n	8011528 <HAL_FLASHEx_Erase+0x60>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80114fa:	68a5      	ldr	r5, [r4, #8]
 80114fc:	68e3      	ldr	r3, [r4, #12]
 80114fe:	68a2      	ldr	r2, [r4, #8]
 8011500:	4413      	add	r3, r2
 8011502:	429d      	cmp	r5, r3
 8011504:	d220      	bcs.n	8011548 <HAL_FLASHEx_Erase+0x80>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8011506:	7c21      	ldrb	r1, [r4, #16]
 8011508:	4628      	mov	r0, r5
 801150a:	f7ff ff85 	bl	8011418 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801150e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011512:	f7ff fefb 	bl	801130c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8011516:	4a10      	ldr	r2, [pc, #64]	; (8011558 <HAL_FLASHEx_Erase+0x90>)
 8011518:	6913      	ldr	r3, [r2, #16]
 801151a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801151e:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8011520:	4607      	mov	r7, r0
 8011522:	b980      	cbnz	r0, 8011546 <HAL_FLASHEx_Erase+0x7e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8011524:	3501      	adds	r5, #1
 8011526:	e7e9      	b.n	80114fc <HAL_FLASHEx_Erase+0x34>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8011528:	6861      	ldr	r1, [r4, #4]
 801152a:	7c20      	ldrb	r0, [r4, #16]
 801152c:	f7ff ff62 	bl	80113f4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011530:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011534:	f7ff feea 	bl	801130c <FLASH_WaitForLastOperation>
 8011538:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 801153a:	4a07      	ldr	r2, [pc, #28]	; (8011558 <HAL_FLASHEx_Erase+0x90>)
 801153c:	6913      	ldr	r3, [r2, #16]
 801153e:	f023 0304 	bic.w	r3, r3, #4
 8011542:	6113      	str	r3, [r2, #16]
 8011544:	e000      	b.n	8011548 <HAL_FLASHEx_Erase+0x80>
          *SectorError = index;
 8011546:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 8011548:	f7ff ff8e 	bl	8011468 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 801154c:	2200      	movs	r2, #0
 801154e:	4b01      	ldr	r3, [pc, #4]	; (8011554 <HAL_FLASHEx_Erase+0x8c>)
 8011550:	761a      	strb	r2, [r3, #24]
  return status;
 8011552:	e7bf      	b.n	80114d4 <HAL_FLASHEx_Erase+0xc>
 8011554:	20010f98 	.word	0x20010f98
 8011558:	40023c00 	.word	0x40023c00

0801155c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801155e:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011560:	2400      	movs	r4, #0
 8011562:	e04b      	b.n	80115fc <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011564:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8011568:	f10e 0e08 	add.w	lr, lr, #8
 801156c:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011570:	f004 0607 	and.w	r6, r4, #7
 8011574:	00b6      	lsls	r6, r6, #2
 8011576:	270f      	movs	r7, #15
 8011578:	40b7      	lsls	r7, r6
 801157a:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801157e:	690f      	ldr	r7, [r1, #16]
 8011580:	fa07 f606 	lsl.w	r6, r7, r6
 8011584:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8011586:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 801158a:	e046      	b.n	801161a <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801158c:	2607      	movs	r6, #7
 801158e:	e000      	b.n	8011592 <HAL_GPIO_Init+0x36>
 8011590:	2600      	movs	r6, #0
 8011592:	fa06 f60e 	lsl.w	r6, r6, lr
 8011596:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011598:	3302      	adds	r3, #2
 801159a:	4e5e      	ldr	r6, [pc, #376]	; (8011714 <HAL_GPIO_Init+0x1b8>)
 801159c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80115a0:	4b5d      	ldr	r3, [pc, #372]	; (8011718 <HAL_GPIO_Init+0x1bc>)
 80115a2:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 80115a4:	43eb      	mvns	r3, r5
 80115a6:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80115aa:	684f      	ldr	r7, [r1, #4]
 80115ac:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80115b0:	d001      	beq.n	80115b6 <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 80115b2:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 80115b6:	4a58      	ldr	r2, [pc, #352]	; (8011718 <HAL_GPIO_Init+0x1bc>)
 80115b8:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80115ba:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80115bc:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80115c0:	684f      	ldr	r7, [r1, #4]
 80115c2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80115c6:	d001      	beq.n	80115cc <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80115c8:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 80115cc:	4a52      	ldr	r2, [pc, #328]	; (8011718 <HAL_GPIO_Init+0x1bc>)
 80115ce:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80115d0:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80115d2:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80115d6:	684f      	ldr	r7, [r1, #4]
 80115d8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80115dc:	d001      	beq.n	80115e2 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 80115de:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 80115e2:	4a4d      	ldr	r2, [pc, #308]	; (8011718 <HAL_GPIO_Init+0x1bc>)
 80115e4:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80115e6:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80115e8:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80115ea:	684e      	ldr	r6, [r1, #4]
 80115ec:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80115f0:	d001      	beq.n	80115f6 <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 80115f2:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 80115f6:	4a48      	ldr	r2, [pc, #288]	; (8011718 <HAL_GPIO_Init+0x1bc>)
 80115f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80115fa:	3401      	adds	r4, #1
 80115fc:	2c0f      	cmp	r4, #15
 80115fe:	f200 8086 	bhi.w	801170e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8011602:	2301      	movs	r3, #1
 8011604:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011606:	680a      	ldr	r2, [r1, #0]
 8011608:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 801160c:	42ab      	cmp	r3, r5
 801160e:	d1f4      	bne.n	80115fa <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011610:	684a      	ldr	r2, [r1, #4]
 8011612:	2a02      	cmp	r2, #2
 8011614:	d0a6      	beq.n	8011564 <HAL_GPIO_Init+0x8>
 8011616:	2a12      	cmp	r2, #18
 8011618:	d0a4      	beq.n	8011564 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 801161a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801161c:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8011620:	2203      	movs	r2, #3
 8011622:	fa02 f20e 	lsl.w	r2, r2, lr
 8011626:	43d2      	mvns	r2, r2
 8011628:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801162a:	684f      	ldr	r7, [r1, #4]
 801162c:	f007 0703 	and.w	r7, r7, #3
 8011630:	fa07 f70e 	lsl.w	r7, r7, lr
 8011634:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8011636:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011638:	684e      	ldr	r6, [r1, #4]
 801163a:	1e77      	subs	r7, r6, #1
 801163c:	2f01      	cmp	r7, #1
 801163e:	d903      	bls.n	8011648 <HAL_GPIO_Init+0xec>
 8011640:	2e11      	cmp	r6, #17
 8011642:	d001      	beq.n	8011648 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011644:	2e12      	cmp	r6, #18
 8011646:	d10f      	bne.n	8011668 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8011648:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801164a:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 801164c:	68cf      	ldr	r7, [r1, #12]
 801164e:	fa07 f70e 	lsl.w	r7, r7, lr
 8011652:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8011654:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8011656:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011658:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801165c:	684e      	ldr	r6, [r1, #4]
 801165e:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8011662:	40a6      	lsls	r6, r4
 8011664:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8011666:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8011668:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801166a:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801166c:	688b      	ldr	r3, [r1, #8]
 801166e:	fa03 f30e 	lsl.w	r3, r3, lr
 8011672:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8011674:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011676:	684b      	ldr	r3, [r1, #4]
 8011678:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 801167c:	d0bd      	beq.n	80115fa <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801167e:	2300      	movs	r3, #0
 8011680:	9301      	str	r3, [sp, #4]
 8011682:	4b26      	ldr	r3, [pc, #152]	; (801171c <HAL_GPIO_Init+0x1c0>)
 8011684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801168a:	645a      	str	r2, [r3, #68]	; 0x44
 801168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011692:	9301      	str	r3, [sp, #4]
 8011694:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8011696:	08a3      	lsrs	r3, r4, #2
 8011698:	1c9e      	adds	r6, r3, #2
 801169a:	4a1e      	ldr	r2, [pc, #120]	; (8011714 <HAL_GPIO_Init+0x1b8>)
 801169c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80116a0:	f004 0603 	and.w	r6, r4, #3
 80116a4:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80116a8:	260f      	movs	r6, #15
 80116aa:	fa06 f60e 	lsl.w	r6, r6, lr
 80116ae:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80116b2:	4f1b      	ldr	r7, [pc, #108]	; (8011720 <HAL_GPIO_Init+0x1c4>)
 80116b4:	42b8      	cmp	r0, r7
 80116b6:	f43f af6b 	beq.w	8011590 <HAL_GPIO_Init+0x34>
 80116ba:	4e1a      	ldr	r6, [pc, #104]	; (8011724 <HAL_GPIO_Init+0x1c8>)
 80116bc:	42b0      	cmp	r0, r6
 80116be:	d01a      	beq.n	80116f6 <HAL_GPIO_Init+0x19a>
 80116c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80116c4:	42b0      	cmp	r0, r6
 80116c6:	d018      	beq.n	80116fa <HAL_GPIO_Init+0x19e>
 80116c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80116cc:	42b0      	cmp	r0, r6
 80116ce:	d016      	beq.n	80116fe <HAL_GPIO_Init+0x1a2>
 80116d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80116d4:	42b0      	cmp	r0, r6
 80116d6:	d014      	beq.n	8011702 <HAL_GPIO_Init+0x1a6>
 80116d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80116dc:	42b0      	cmp	r0, r6
 80116de:	d012      	beq.n	8011706 <HAL_GPIO_Init+0x1aa>
 80116e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80116e4:	42b0      	cmp	r0, r6
 80116e6:	d010      	beq.n	801170a <HAL_GPIO_Init+0x1ae>
 80116e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80116ec:	42b0      	cmp	r0, r6
 80116ee:	f43f af4d 	beq.w	801158c <HAL_GPIO_Init+0x30>
 80116f2:	2608      	movs	r6, #8
 80116f4:	e74d      	b.n	8011592 <HAL_GPIO_Init+0x36>
 80116f6:	2601      	movs	r6, #1
 80116f8:	e74b      	b.n	8011592 <HAL_GPIO_Init+0x36>
 80116fa:	2602      	movs	r6, #2
 80116fc:	e749      	b.n	8011592 <HAL_GPIO_Init+0x36>
 80116fe:	2603      	movs	r6, #3
 8011700:	e747      	b.n	8011592 <HAL_GPIO_Init+0x36>
 8011702:	2604      	movs	r6, #4
 8011704:	e745      	b.n	8011592 <HAL_GPIO_Init+0x36>
 8011706:	2605      	movs	r6, #5
 8011708:	e743      	b.n	8011592 <HAL_GPIO_Init+0x36>
 801170a:	2606      	movs	r6, #6
 801170c:	e741      	b.n	8011592 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 801170e:	b003      	add	sp, #12
 8011710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011712:	bf00      	nop
 8011714:	40013800 	.word	0x40013800
 8011718:	40013c00 	.word	0x40013c00
 801171c:	40023800 	.word	0x40023800
 8011720:	40020000 	.word	0x40020000
 8011724:	40020400 	.word	0x40020400

08011728 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011728:	b912      	cbnz	r2, 8011730 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801172a:	0409      	lsls	r1, r1, #16
 801172c:	6181      	str	r1, [r0, #24]
 801172e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8011730:	6181      	str	r1, [r0, #24]
 8011732:	4770      	bx	lr

08011734 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011734:	6943      	ldr	r3, [r0, #20]
 8011736:	4059      	eors	r1, r3
 8011738:	6141      	str	r1, [r0, #20]
 801173a:	4770      	bx	lr

0801173c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801173c:	6803      	ldr	r3, [r0, #0]
 801173e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8011742:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8011744:	2000      	movs	r0, #0
 8011746:	4770      	bx	lr

08011748 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011748:	2800      	cmp	r0, #0
 801174a:	f000 81bb 	beq.w	8011ac4 <HAL_RCC_OscConfig+0x37c>
{
 801174e:	b570      	push	{r4, r5, r6, lr}
 8011750:	b082      	sub	sp, #8
 8011752:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011754:	6803      	ldr	r3, [r0, #0]
 8011756:	f013 0f01 	tst.w	r3, #1
 801175a:	d03b      	beq.n	80117d4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801175c:	4ba7      	ldr	r3, [pc, #668]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 801175e:	689b      	ldr	r3, [r3, #8]
 8011760:	f003 030c 	and.w	r3, r3, #12
 8011764:	2b04      	cmp	r3, #4
 8011766:	d02c      	beq.n	80117c2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011768:	4ba4      	ldr	r3, [pc, #656]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 801176a:	689b      	ldr	r3, [r3, #8]
 801176c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011770:	2b08      	cmp	r3, #8
 8011772:	d021      	beq.n	80117b8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011774:	6863      	ldr	r3, [r4, #4]
 8011776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801177a:	d04f      	beq.n	801181c <HAL_RCC_OscConfig+0xd4>
 801177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011780:	d052      	beq.n	8011828 <HAL_RCC_OscConfig+0xe0>
 8011782:	4b9e      	ldr	r3, [pc, #632]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801178a:	601a      	str	r2, [r3, #0]
 801178c:	681a      	ldr	r2, [r3, #0]
 801178e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011792:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011794:	6863      	ldr	r3, [r4, #4]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d050      	beq.n	801183c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801179a:	f7fe fe1f 	bl	80103dc <HAL_GetTick>
 801179e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80117a0:	4b96      	ldr	r3, [pc, #600]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80117a8:	d114      	bne.n	80117d4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80117aa:	f7fe fe17 	bl	80103dc <HAL_GetTick>
 80117ae:	1b40      	subs	r0, r0, r5
 80117b0:	2864      	cmp	r0, #100	; 0x64
 80117b2:	d9f5      	bls.n	80117a0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80117b4:	2003      	movs	r0, #3
 80117b6:	e18a      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80117b8:	4b90      	ldr	r3, [pc, #576]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 80117ba:	685b      	ldr	r3, [r3, #4]
 80117bc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80117c0:	d0d8      	beq.n	8011774 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80117c2:	4b8e      	ldr	r3, [pc, #568]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80117ca:	d003      	beq.n	80117d4 <HAL_RCC_OscConfig+0x8c>
 80117cc:	6863      	ldr	r3, [r4, #4]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	f000 817a 	beq.w	8011ac8 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80117d4:	6823      	ldr	r3, [r4, #0]
 80117d6:	f013 0f02 	tst.w	r3, #2
 80117da:	d055      	beq.n	8011888 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80117dc:	4b87      	ldr	r3, [pc, #540]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 80117de:	689b      	ldr	r3, [r3, #8]
 80117e0:	f013 0f0c 	tst.w	r3, #12
 80117e4:	d03e      	beq.n	8011864 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80117e6:	4b85      	ldr	r3, [pc, #532]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 80117e8:	689b      	ldr	r3, [r3, #8]
 80117ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80117ee:	2b08      	cmp	r3, #8
 80117f0:	d033      	beq.n	801185a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80117f2:	68e3      	ldr	r3, [r4, #12]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d068      	beq.n	80118ca <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80117f8:	2201      	movs	r2, #1
 80117fa:	4b81      	ldr	r3, [pc, #516]	; (8011a00 <HAL_RCC_OscConfig+0x2b8>)
 80117fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80117fe:	f7fe fded 	bl	80103dc <HAL_GetTick>
 8011802:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011804:	4b7d      	ldr	r3, [pc, #500]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	f013 0f02 	tst.w	r3, #2
 801180c:	d154      	bne.n	80118b8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801180e:	f7fe fde5 	bl	80103dc <HAL_GetTick>
 8011812:	1b40      	subs	r0, r0, r5
 8011814:	2802      	cmp	r0, #2
 8011816:	d9f5      	bls.n	8011804 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8011818:	2003      	movs	r0, #3
 801181a:	e158      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801181c:	4a77      	ldr	r2, [pc, #476]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 801181e:	6813      	ldr	r3, [r2, #0]
 8011820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011824:	6013      	str	r3, [r2, #0]
 8011826:	e7b5      	b.n	8011794 <HAL_RCC_OscConfig+0x4c>
 8011828:	4b74      	ldr	r3, [pc, #464]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011830:	601a      	str	r2, [r3, #0]
 8011832:	681a      	ldr	r2, [r3, #0]
 8011834:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011838:	601a      	str	r2, [r3, #0]
 801183a:	e7ab      	b.n	8011794 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 801183c:	f7fe fdce 	bl	80103dc <HAL_GetTick>
 8011840:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011842:	4b6e      	ldr	r3, [pc, #440]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 801184a:	d0c3      	beq.n	80117d4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801184c:	f7fe fdc6 	bl	80103dc <HAL_GetTick>
 8011850:	1b40      	subs	r0, r0, r5
 8011852:	2864      	cmp	r0, #100	; 0x64
 8011854:	d9f5      	bls.n	8011842 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8011856:	2003      	movs	r0, #3
 8011858:	e139      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801185a:	4b68      	ldr	r3, [pc, #416]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8011862:	d1c6      	bne.n	80117f2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011864:	4b65      	ldr	r3, [pc, #404]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	f013 0f02 	tst.w	r3, #2
 801186c:	d004      	beq.n	8011878 <HAL_RCC_OscConfig+0x130>
 801186e:	68e3      	ldr	r3, [r4, #12]
 8011870:	2b01      	cmp	r3, #1
 8011872:	d001      	beq.n	8011878 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8011874:	2001      	movs	r0, #1
 8011876:	e12a      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011878:	4a60      	ldr	r2, [pc, #384]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 801187a:	6813      	ldr	r3, [r2, #0]
 801187c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011880:	6921      	ldr	r1, [r4, #16]
 8011882:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011886:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011888:	6823      	ldr	r3, [r4, #0]
 801188a:	f013 0f08 	tst.w	r3, #8
 801188e:	d040      	beq.n	8011912 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011890:	6963      	ldr	r3, [r4, #20]
 8011892:	b363      	cbz	r3, 80118ee <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011894:	2201      	movs	r2, #1
 8011896:	4b5b      	ldr	r3, [pc, #364]	; (8011a04 <HAL_RCC_OscConfig+0x2bc>)
 8011898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801189a:	f7fe fd9f 	bl	80103dc <HAL_GetTick>
 801189e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80118a0:	4b56      	ldr	r3, [pc, #344]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 80118a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118a4:	f013 0f02 	tst.w	r3, #2
 80118a8:	d133      	bne.n	8011912 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80118aa:	f7fe fd97 	bl	80103dc <HAL_GetTick>
 80118ae:	1b40      	subs	r0, r0, r5
 80118b0:	2802      	cmp	r0, #2
 80118b2:	d9f5      	bls.n	80118a0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80118b4:	2003      	movs	r0, #3
 80118b6:	e10a      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80118b8:	4a50      	ldr	r2, [pc, #320]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 80118ba:	6813      	ldr	r3, [r2, #0]
 80118bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80118c0:	6921      	ldr	r1, [r4, #16]
 80118c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80118c6:	6013      	str	r3, [r2, #0]
 80118c8:	e7de      	b.n	8011888 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80118ca:	2200      	movs	r2, #0
 80118cc:	4b4c      	ldr	r3, [pc, #304]	; (8011a00 <HAL_RCC_OscConfig+0x2b8>)
 80118ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80118d0:	f7fe fd84 	bl	80103dc <HAL_GetTick>
 80118d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80118d6:	4b49      	ldr	r3, [pc, #292]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f013 0f02 	tst.w	r3, #2
 80118de:	d0d3      	beq.n	8011888 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80118e0:	f7fe fd7c 	bl	80103dc <HAL_GetTick>
 80118e4:	1b40      	subs	r0, r0, r5
 80118e6:	2802      	cmp	r0, #2
 80118e8:	d9f5      	bls.n	80118d6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80118ea:	2003      	movs	r0, #3
 80118ec:	e0ef      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80118ee:	2200      	movs	r2, #0
 80118f0:	4b44      	ldr	r3, [pc, #272]	; (8011a04 <HAL_RCC_OscConfig+0x2bc>)
 80118f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80118f4:	f7fe fd72 	bl	80103dc <HAL_GetTick>
 80118f8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80118fa:	4b40      	ldr	r3, [pc, #256]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 80118fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118fe:	f013 0f02 	tst.w	r3, #2
 8011902:	d006      	beq.n	8011912 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011904:	f7fe fd6a 	bl	80103dc <HAL_GetTick>
 8011908:	1b40      	subs	r0, r0, r5
 801190a:	2802      	cmp	r0, #2
 801190c:	d9f5      	bls.n	80118fa <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 801190e:	2003      	movs	r0, #3
 8011910:	e0dd      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011912:	6823      	ldr	r3, [r4, #0]
 8011914:	f013 0f04 	tst.w	r3, #4
 8011918:	d079      	beq.n	8011a0e <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801191a:	4b38      	ldr	r3, [pc, #224]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 801191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801191e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8011922:	d133      	bne.n	801198c <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011924:	2300      	movs	r3, #0
 8011926:	9301      	str	r3, [sp, #4]
 8011928:	4b34      	ldr	r3, [pc, #208]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 801192a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801192c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011930:	641a      	str	r2, [r3, #64]	; 0x40
 8011932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011938:	9301      	str	r3, [sp, #4]
 801193a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 801193c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801193e:	4b32      	ldr	r3, [pc, #200]	; (8011a08 <HAL_RCC_OscConfig+0x2c0>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011946:	d023      	beq.n	8011990 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011948:	68a3      	ldr	r3, [r4, #8]
 801194a:	2b01      	cmp	r3, #1
 801194c:	d034      	beq.n	80119b8 <HAL_RCC_OscConfig+0x270>
 801194e:	2b05      	cmp	r3, #5
 8011950:	d038      	beq.n	80119c4 <HAL_RCC_OscConfig+0x27c>
 8011952:	4b2a      	ldr	r3, [pc, #168]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 8011954:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011956:	f022 0201 	bic.w	r2, r2, #1
 801195a:	671a      	str	r2, [r3, #112]	; 0x70
 801195c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801195e:	f022 0204 	bic.w	r2, r2, #4
 8011962:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011964:	68a3      	ldr	r3, [r4, #8]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d036      	beq.n	80119d8 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801196a:	f7fe fd37 	bl	80103dc <HAL_GetTick>
 801196e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011970:	4b22      	ldr	r3, [pc, #136]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 8011972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011974:	f013 0f02 	tst.w	r3, #2
 8011978:	d148      	bne.n	8011a0c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801197a:	f7fe fd2f 	bl	80103dc <HAL_GetTick>
 801197e:	1b80      	subs	r0, r0, r6
 8011980:	f241 3388 	movw	r3, #5000	; 0x1388
 8011984:	4298      	cmp	r0, r3
 8011986:	d9f3      	bls.n	8011970 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8011988:	2003      	movs	r0, #3
 801198a:	e0a0      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 801198c:	2500      	movs	r5, #0
 801198e:	e7d6      	b.n	801193e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011990:	4a1d      	ldr	r2, [pc, #116]	; (8011a08 <HAL_RCC_OscConfig+0x2c0>)
 8011992:	6813      	ldr	r3, [r2, #0]
 8011994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011998:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 801199a:	f7fe fd1f 	bl	80103dc <HAL_GetTick>
 801199e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80119a0:	4b19      	ldr	r3, [pc, #100]	; (8011a08 <HAL_RCC_OscConfig+0x2c0>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80119a8:	d1ce      	bne.n	8011948 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80119aa:	f7fe fd17 	bl	80103dc <HAL_GetTick>
 80119ae:	1b80      	subs	r0, r0, r6
 80119b0:	2802      	cmp	r0, #2
 80119b2:	d9f5      	bls.n	80119a0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80119b4:	2003      	movs	r0, #3
 80119b6:	e08a      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80119b8:	4a10      	ldr	r2, [pc, #64]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 80119ba:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80119bc:	f043 0301 	orr.w	r3, r3, #1
 80119c0:	6713      	str	r3, [r2, #112]	; 0x70
 80119c2:	e7cf      	b.n	8011964 <HAL_RCC_OscConfig+0x21c>
 80119c4:	4b0d      	ldr	r3, [pc, #52]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 80119c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80119c8:	f042 0204 	orr.w	r2, r2, #4
 80119cc:	671a      	str	r2, [r3, #112]	; 0x70
 80119ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80119d0:	f042 0201 	orr.w	r2, r2, #1
 80119d4:	671a      	str	r2, [r3, #112]	; 0x70
 80119d6:	e7c5      	b.n	8011964 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80119d8:	f7fe fd00 	bl	80103dc <HAL_GetTick>
 80119dc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80119de:	4b07      	ldr	r3, [pc, #28]	; (80119fc <HAL_RCC_OscConfig+0x2b4>)
 80119e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119e2:	f013 0f02 	tst.w	r3, #2
 80119e6:	d011      	beq.n	8011a0c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80119e8:	f7fe fcf8 	bl	80103dc <HAL_GetTick>
 80119ec:	1b80      	subs	r0, r0, r6
 80119ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80119f2:	4298      	cmp	r0, r3
 80119f4:	d9f3      	bls.n	80119de <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 80119f6:	2003      	movs	r0, #3
 80119f8:	e069      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
 80119fa:	bf00      	nop
 80119fc:	40023800 	.word	0x40023800
 8011a00:	42470000 	.word	0x42470000
 8011a04:	42470e80 	.word	0x42470e80
 8011a08:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011a0c:	b9e5      	cbnz	r5, 8011a48 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011a0e:	69a3      	ldr	r3, [r4, #24]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d05b      	beq.n	8011acc <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011a14:	4a30      	ldr	r2, [pc, #192]	; (8011ad8 <HAL_RCC_OscConfig+0x390>)
 8011a16:	6892      	ldr	r2, [r2, #8]
 8011a18:	f002 020c 	and.w	r2, r2, #12
 8011a1c:	2a08      	cmp	r2, #8
 8011a1e:	d058      	beq.n	8011ad2 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011a20:	2b02      	cmp	r3, #2
 8011a22:	d017      	beq.n	8011a54 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011a24:	2200      	movs	r2, #0
 8011a26:	4b2d      	ldr	r3, [pc, #180]	; (8011adc <HAL_RCC_OscConfig+0x394>)
 8011a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011a2a:	f7fe fcd7 	bl	80103dc <HAL_GetTick>
 8011a2e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011a30:	4b29      	ldr	r3, [pc, #164]	; (8011ad8 <HAL_RCC_OscConfig+0x390>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011a38:	d042      	beq.n	8011ac0 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011a3a:	f7fe fccf 	bl	80103dc <HAL_GetTick>
 8011a3e:	1b00      	subs	r0, r0, r4
 8011a40:	2802      	cmp	r0, #2
 8011a42:	d9f5      	bls.n	8011a30 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8011a44:	2003      	movs	r0, #3
 8011a46:	e042      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8011a48:	4a23      	ldr	r2, [pc, #140]	; (8011ad8 <HAL_RCC_OscConfig+0x390>)
 8011a4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011a50:	6413      	str	r3, [r2, #64]	; 0x40
 8011a52:	e7dc      	b.n	8011a0e <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8011a54:	2200      	movs	r2, #0
 8011a56:	4b21      	ldr	r3, [pc, #132]	; (8011adc <HAL_RCC_OscConfig+0x394>)
 8011a58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011a5a:	f7fe fcbf 	bl	80103dc <HAL_GetTick>
 8011a5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011a60:	4b1d      	ldr	r3, [pc, #116]	; (8011ad8 <HAL_RCC_OscConfig+0x390>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011a68:	d006      	beq.n	8011a78 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011a6a:	f7fe fcb7 	bl	80103dc <HAL_GetTick>
 8011a6e:	1b40      	subs	r0, r0, r5
 8011a70:	2802      	cmp	r0, #2
 8011a72:	d9f5      	bls.n	8011a60 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8011a74:	2003      	movs	r0, #3
 8011a76:	e02a      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011a78:	69e3      	ldr	r3, [r4, #28]
 8011a7a:	6a22      	ldr	r2, [r4, #32]
 8011a7c:	4313      	orrs	r3, r2
 8011a7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011a80:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8011a84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011a86:	0852      	lsrs	r2, r2, #1
 8011a88:	3a01      	subs	r2, #1
 8011a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011a90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011a94:	4a10      	ldr	r2, [pc, #64]	; (8011ad8 <HAL_RCC_OscConfig+0x390>)
 8011a96:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8011a98:	2201      	movs	r2, #1
 8011a9a:	4b10      	ldr	r3, [pc, #64]	; (8011adc <HAL_RCC_OscConfig+0x394>)
 8011a9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011a9e:	f7fe fc9d 	bl	80103dc <HAL_GetTick>
 8011aa2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011aa4:	4b0c      	ldr	r3, [pc, #48]	; (8011ad8 <HAL_RCC_OscConfig+0x390>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011aac:	d106      	bne.n	8011abc <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011aae:	f7fe fc95 	bl	80103dc <HAL_GetTick>
 8011ab2:	1b00      	subs	r0, r0, r4
 8011ab4:	2802      	cmp	r0, #2
 8011ab6:	d9f5      	bls.n	8011aa4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8011ab8:	2003      	movs	r0, #3
 8011aba:	e008      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8011abc:	2000      	movs	r0, #0
 8011abe:	e006      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
 8011ac0:	2000      	movs	r0, #0
 8011ac2:	e004      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8011ac4:	2001      	movs	r0, #1
 8011ac6:	4770      	bx	lr
        return HAL_ERROR;
 8011ac8:	2001      	movs	r0, #1
 8011aca:	e000      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8011acc:	2000      	movs	r0, #0
}
 8011ace:	b002      	add	sp, #8
 8011ad0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8011ad2:	2001      	movs	r0, #1
 8011ad4:	e7fb      	b.n	8011ace <HAL_RCC_OscConfig+0x386>
 8011ad6:	bf00      	nop
 8011ad8:	40023800 	.word	0x40023800
 8011adc:	42470060 	.word	0x42470060

08011ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011ae2:	4b25      	ldr	r3, [pc, #148]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8011ae4:	689b      	ldr	r3, [r3, #8]
 8011ae6:	f003 030c 	and.w	r3, r3, #12
 8011aea:	2b04      	cmp	r3, #4
 8011aec:	d041      	beq.n	8011b72 <HAL_RCC_GetSysClockFreq+0x92>
 8011aee:	2b08      	cmp	r3, #8
 8011af0:	d001      	beq.n	8011af6 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011af2:	4822      	ldr	r0, [pc, #136]	; (8011b7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8011af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011af6:	4b20      	ldr	r3, [pc, #128]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8011af8:	685a      	ldr	r2, [r3, #4]
 8011afa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011afe:	685b      	ldr	r3, [r3, #4]
 8011b00:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8011b04:	d012      	beq.n	8011b2c <HAL_RCC_GetSysClockFreq+0x4c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011b06:	4b1c      	ldr	r3, [pc, #112]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8011b08:	6859      	ldr	r1, [r3, #4]
 8011b0a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8011b0e:	2300      	movs	r3, #0
 8011b10:	481b      	ldr	r0, [pc, #108]	; (8011b80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8011b12:	fba1 0100 	umull	r0, r1, r1, r0
 8011b16:	f7fe fab3 	bl	8010080 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011b1a:	4b17      	ldr	r3, [pc, #92]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8011b22:	3301      	adds	r3, #1
 8011b24:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8011b26:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8011b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011b2c:	4b12      	ldr	r3, [pc, #72]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8011b34:	461e      	mov	r6, r3
 8011b36:	2700      	movs	r7, #0
 8011b38:	015c      	lsls	r4, r3, #5
 8011b3a:	2500      	movs	r5, #0
 8011b3c:	1ae4      	subs	r4, r4, r3
 8011b3e:	eb65 0507 	sbc.w	r5, r5, r7
 8011b42:	01a9      	lsls	r1, r5, #6
 8011b44:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8011b48:	01a0      	lsls	r0, r4, #6
 8011b4a:	1b00      	subs	r0, r0, r4
 8011b4c:	eb61 0105 	sbc.w	r1, r1, r5
 8011b50:	00cb      	lsls	r3, r1, #3
 8011b52:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8011b56:	00c4      	lsls	r4, r0, #3
 8011b58:	19a0      	adds	r0, r4, r6
 8011b5a:	eb43 0107 	adc.w	r1, r3, r7
 8011b5e:	028b      	lsls	r3, r1, #10
 8011b60:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8011b64:	0284      	lsls	r4, r0, #10
 8011b66:	4620      	mov	r0, r4
 8011b68:	4619      	mov	r1, r3
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	f7fe fa88 	bl	8010080 <__aeabi_uldivmod>
 8011b70:	e7d3      	b.n	8011b1a <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8011b72:	4803      	ldr	r0, [pc, #12]	; (8011b80 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b76:	bf00      	nop
 8011b78:	40023800 	.word	0x40023800
 8011b7c:	00f42400 	.word	0x00f42400
 8011b80:	017d7840 	.word	0x017d7840

08011b84 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8011b84:	2800      	cmp	r0, #0
 8011b86:	f000 809d 	beq.w	8011cc4 <HAL_RCC_ClockConfig+0x140>
{
 8011b8a:	b570      	push	{r4, r5, r6, lr}
 8011b8c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011b8e:	4b4f      	ldr	r3, [pc, #316]	; (8011ccc <HAL_RCC_ClockConfig+0x148>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f003 030f 	and.w	r3, r3, #15
 8011b96:	428b      	cmp	r3, r1
 8011b98:	d209      	bcs.n	8011bae <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011b9a:	b2cb      	uxtb	r3, r1
 8011b9c:	4a4b      	ldr	r2, [pc, #300]	; (8011ccc <HAL_RCC_ClockConfig+0x148>)
 8011b9e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011ba0:	6813      	ldr	r3, [r2, #0]
 8011ba2:	f003 030f 	and.w	r3, r3, #15
 8011ba6:	4299      	cmp	r1, r3
 8011ba8:	d001      	beq.n	8011bae <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8011baa:	2001      	movs	r0, #1
 8011bac:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011bae:	6823      	ldr	r3, [r4, #0]
 8011bb0:	f013 0f02 	tst.w	r3, #2
 8011bb4:	d017      	beq.n	8011be6 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011bb6:	f013 0f04 	tst.w	r3, #4
 8011bba:	d004      	beq.n	8011bc6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011bbc:	4a44      	ldr	r2, [pc, #272]	; (8011cd0 <HAL_RCC_ClockConfig+0x14c>)
 8011bbe:	6893      	ldr	r3, [r2, #8]
 8011bc0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011bc4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011bc6:	6823      	ldr	r3, [r4, #0]
 8011bc8:	f013 0f08 	tst.w	r3, #8
 8011bcc:	d004      	beq.n	8011bd8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011bce:	4a40      	ldr	r2, [pc, #256]	; (8011cd0 <HAL_RCC_ClockConfig+0x14c>)
 8011bd0:	6893      	ldr	r3, [r2, #8]
 8011bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011bd6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011bd8:	4a3d      	ldr	r2, [pc, #244]	; (8011cd0 <HAL_RCC_ClockConfig+0x14c>)
 8011bda:	6893      	ldr	r3, [r2, #8]
 8011bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011be0:	68a0      	ldr	r0, [r4, #8]
 8011be2:	4303      	orrs	r3, r0
 8011be4:	6093      	str	r3, [r2, #8]
 8011be6:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011be8:	6823      	ldr	r3, [r4, #0]
 8011bea:	f013 0f01 	tst.w	r3, #1
 8011bee:	d032      	beq.n	8011c56 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011bf0:	6863      	ldr	r3, [r4, #4]
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d021      	beq.n	8011c3a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011bf6:	1e9a      	subs	r2, r3, #2
 8011bf8:	2a01      	cmp	r2, #1
 8011bfa:	d925      	bls.n	8011c48 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011bfc:	4a34      	ldr	r2, [pc, #208]	; (8011cd0 <HAL_RCC_ClockConfig+0x14c>)
 8011bfe:	6812      	ldr	r2, [r2, #0]
 8011c00:	f012 0f02 	tst.w	r2, #2
 8011c04:	d060      	beq.n	8011cc8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011c06:	4932      	ldr	r1, [pc, #200]	; (8011cd0 <HAL_RCC_ClockConfig+0x14c>)
 8011c08:	688a      	ldr	r2, [r1, #8]
 8011c0a:	f022 0203 	bic.w	r2, r2, #3
 8011c0e:	4313      	orrs	r3, r2
 8011c10:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8011c12:	f7fe fbe3 	bl	80103dc <HAL_GetTick>
 8011c16:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011c18:	4b2d      	ldr	r3, [pc, #180]	; (8011cd0 <HAL_RCC_ClockConfig+0x14c>)
 8011c1a:	689b      	ldr	r3, [r3, #8]
 8011c1c:	f003 030c 	and.w	r3, r3, #12
 8011c20:	6862      	ldr	r2, [r4, #4]
 8011c22:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8011c26:	d016      	beq.n	8011c56 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c28:	f7fe fbd8 	bl	80103dc <HAL_GetTick>
 8011c2c:	1b80      	subs	r0, r0, r6
 8011c2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8011c32:	4298      	cmp	r0, r3
 8011c34:	d9f0      	bls.n	8011c18 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8011c36:	2003      	movs	r0, #3
 8011c38:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c3a:	4a25      	ldr	r2, [pc, #148]	; (8011cd0 <HAL_RCC_ClockConfig+0x14c>)
 8011c3c:	6812      	ldr	r2, [r2, #0]
 8011c3e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8011c42:	d1e0      	bne.n	8011c06 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8011c44:	2001      	movs	r0, #1
 8011c46:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011c48:	4a21      	ldr	r2, [pc, #132]	; (8011cd0 <HAL_RCC_ClockConfig+0x14c>)
 8011c4a:	6812      	ldr	r2, [r2, #0]
 8011c4c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8011c50:	d1d9      	bne.n	8011c06 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8011c52:	2001      	movs	r0, #1
 8011c54:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011c56:	4b1d      	ldr	r3, [pc, #116]	; (8011ccc <HAL_RCC_ClockConfig+0x148>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	f003 030f 	and.w	r3, r3, #15
 8011c5e:	429d      	cmp	r5, r3
 8011c60:	d209      	bcs.n	8011c76 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011c62:	b2ea      	uxtb	r2, r5
 8011c64:	4b19      	ldr	r3, [pc, #100]	; (8011ccc <HAL_RCC_ClockConfig+0x148>)
 8011c66:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	f003 030f 	and.w	r3, r3, #15
 8011c6e:	429d      	cmp	r5, r3
 8011c70:	d001      	beq.n	8011c76 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8011c72:	2001      	movs	r0, #1
}
 8011c74:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011c76:	6823      	ldr	r3, [r4, #0]
 8011c78:	f013 0f04 	tst.w	r3, #4
 8011c7c:	d006      	beq.n	8011c8c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011c7e:	4a14      	ldr	r2, [pc, #80]	; (8011cd0 <HAL_RCC_ClockConfig+0x14c>)
 8011c80:	6893      	ldr	r3, [r2, #8]
 8011c82:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8011c86:	68e1      	ldr	r1, [r4, #12]
 8011c88:	430b      	orrs	r3, r1
 8011c8a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	f013 0f08 	tst.w	r3, #8
 8011c92:	d007      	beq.n	8011ca4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011c94:	4a0e      	ldr	r2, [pc, #56]	; (8011cd0 <HAL_RCC_ClockConfig+0x14c>)
 8011c96:	6893      	ldr	r3, [r2, #8]
 8011c98:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8011c9c:	6921      	ldr	r1, [r4, #16]
 8011c9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011ca2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011ca4:	f7ff ff1c 	bl	8011ae0 <HAL_RCC_GetSysClockFreq>
 8011ca8:	4b09      	ldr	r3, [pc, #36]	; (8011cd0 <HAL_RCC_ClockConfig+0x14c>)
 8011caa:	689b      	ldr	r3, [r3, #8]
 8011cac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8011cb0:	4a08      	ldr	r2, [pc, #32]	; (8011cd4 <HAL_RCC_ClockConfig+0x150>)
 8011cb2:	5cd3      	ldrb	r3, [r2, r3]
 8011cb4:	40d8      	lsrs	r0, r3
 8011cb6:	4b08      	ldr	r3, [pc, #32]	; (8011cd8 <HAL_RCC_ClockConfig+0x154>)
 8011cb8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8011cba:	2000      	movs	r0, #0
 8011cbc:	f00d fadc 	bl	801f278 <HAL_InitTick>
  return HAL_OK;
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8011cc4:	2001      	movs	r0, #1
 8011cc6:	4770      	bx	lr
        return HAL_ERROR;
 8011cc8:	2001      	movs	r0, #1
 8011cca:	bd70      	pop	{r4, r5, r6, pc}
 8011ccc:	40023c00 	.word	0x40023c00
 8011cd0:	40023800 	.word	0x40023800
 8011cd4:	08027140 	.word	0x08027140
 8011cd8:	20000040 	.word	0x20000040

08011cdc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8011cdc:	4b01      	ldr	r3, [pc, #4]	; (8011ce4 <HAL_RCC_GetHCLKFreq+0x8>)
 8011cde:	6818      	ldr	r0, [r3, #0]
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop
 8011ce4:	20000040 	.word	0x20000040

08011ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011ce8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011cea:	f7ff fff7 	bl	8011cdc <HAL_RCC_GetHCLKFreq>
 8011cee:	4b04      	ldr	r3, [pc, #16]	; (8011d00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011cf0:	689b      	ldr	r3, [r3, #8]
 8011cf2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8011cf6:	4a03      	ldr	r2, [pc, #12]	; (8011d04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011cf8:	5cd3      	ldrb	r3, [r2, r3]
}
 8011cfa:	40d8      	lsrs	r0, r3
 8011cfc:	bd08      	pop	{r3, pc}
 8011cfe:	bf00      	nop
 8011d00:	40023800 	.word	0x40023800
 8011d04:	08027150 	.word	0x08027150

08011d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011d08:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011d0a:	f7ff ffe7 	bl	8011cdc <HAL_RCC_GetHCLKFreq>
 8011d0e:	4b04      	ldr	r3, [pc, #16]	; (8011d20 <HAL_RCC_GetPCLK2Freq+0x18>)
 8011d10:	689b      	ldr	r3, [r3, #8]
 8011d12:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8011d16:	4a03      	ldr	r2, [pc, #12]	; (8011d24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8011d18:	5cd3      	ldrb	r3, [r2, r3]
}
 8011d1a:	40d8      	lsrs	r0, r3
 8011d1c:	bd08      	pop	{r3, pc}
 8011d1e:	bf00      	nop
 8011d20:	40023800 	.word	0x40023800
 8011d24:	08027150 	.word	0x08027150

08011d28 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8011d28:	230f      	movs	r3, #15
 8011d2a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011d2c:	4b0b      	ldr	r3, [pc, #44]	; (8011d5c <HAL_RCC_GetClockConfig+0x34>)
 8011d2e:	689a      	ldr	r2, [r3, #8]
 8011d30:	f002 0203 	and.w	r2, r2, #3
 8011d34:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8011d36:	689a      	ldr	r2, [r3, #8]
 8011d38:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8011d3c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8011d3e:	689a      	ldr	r2, [r3, #8]
 8011d40:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8011d44:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8011d46:	689b      	ldr	r3, [r3, #8]
 8011d48:	08db      	lsrs	r3, r3, #3
 8011d4a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8011d4e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8011d50:	4b03      	ldr	r3, [pc, #12]	; (8011d60 <HAL_RCC_GetClockConfig+0x38>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f003 030f 	and.w	r3, r3, #15
 8011d58:	600b      	str	r3, [r1, #0]
 8011d5a:	4770      	bx	lr
 8011d5c:	40023800 	.word	0x40023800
 8011d60:	40023c00 	.word	0x40023c00

08011d64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011d64:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011d66:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011d68:	6a04      	ldr	r4, [r0, #32]
 8011d6a:	f024 0401 	bic.w	r4, r4, #1
 8011d6e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8011d70:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011d72:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011d76:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011d7a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8011d7e:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011d80:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8011d82:	6203      	str	r3, [r0, #32]
}
 8011d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d88:	4770      	bx	lr

08011d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011d8a:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011d8c:	6a03      	ldr	r3, [r0, #32]
 8011d8e:	f023 0310 	bic.w	r3, r3, #16
 8011d92:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011d94:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8011d96:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011d98:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011d9c:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011da0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8011da4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011da8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8011daa:	6203      	str	r3, [r0, #32]
}
 8011dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011db0:	4770      	bx	lr

08011db2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8011db2:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8011db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8011db8:	f041 0107 	orr.w	r1, r1, #7
 8011dbc:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8011dbe:	6083      	str	r3, [r0, #8]
 8011dc0:	4770      	bx	lr

08011dc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011dc2:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8011dc4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011dc6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8011dca:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8011dce:	4319      	orrs	r1, r3
 8011dd0:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011dd2:	6084      	str	r4, [r0, #8]
} 
 8011dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dd8:	4770      	bx	lr

08011dda <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011dda:	6802      	ldr	r2, [r0, #0]
 8011ddc:	68d3      	ldr	r3, [r2, #12]
 8011dde:	f043 0301 	orr.w	r3, r3, #1
 8011de2:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8011de4:	6802      	ldr	r2, [r0, #0]
 8011de6:	6813      	ldr	r3, [r2, #0]
 8011de8:	f043 0301 	orr.w	r3, r3, #1
 8011dec:	6013      	str	r3, [r2, #0]
}
 8011dee:	2000      	movs	r0, #0
 8011df0:	4770      	bx	lr

08011df2 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8011df2:	6802      	ldr	r2, [r0, #0]
 8011df4:	68d3      	ldr	r3, [r2, #12]
 8011df6:	f023 0301 	bic.w	r3, r3, #1
 8011dfa:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8011dfc:	6803      	ldr	r3, [r0, #0]
 8011dfe:	6a19      	ldr	r1, [r3, #32]
 8011e00:	f241 1211 	movw	r2, #4369	; 0x1111
 8011e04:	4211      	tst	r1, r2
 8011e06:	d108      	bne.n	8011e1a <HAL_TIM_Base_Stop_IT+0x28>
 8011e08:	6a19      	ldr	r1, [r3, #32]
 8011e0a:	f240 4244 	movw	r2, #1092	; 0x444
 8011e0e:	4211      	tst	r1, r2
 8011e10:	d103      	bne.n	8011e1a <HAL_TIM_Base_Stop_IT+0x28>
 8011e12:	681a      	ldr	r2, [r3, #0]
 8011e14:	f022 0201 	bic.w	r2, r2, #1
 8011e18:	601a      	str	r2, [r3, #0]
}
 8011e1a:	2000      	movs	r0, #0
 8011e1c:	4770      	bx	lr

08011e1e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8011e1e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011e22:	2b01      	cmp	r3, #1
 8011e24:	d07d      	beq.n	8011f22 <HAL_TIM_ConfigClockSource+0x104>
{
 8011e26:	b510      	push	{r4, lr}
 8011e28:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8011e30:	2302      	movs	r3, #2
 8011e32:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8011e36:	6802      	ldr	r2, [r0, #0]
 8011e38:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8011e42:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8011e44:	680b      	ldr	r3, [r1, #0]
 8011e46:	2b40      	cmp	r3, #64	; 0x40
 8011e48:	d057      	beq.n	8011efa <HAL_TIM_ConfigClockSource+0xdc>
 8011e4a:	d910      	bls.n	8011e6e <HAL_TIM_ConfigClockSource+0x50>
 8011e4c:	2b70      	cmp	r3, #112	; 0x70
 8011e4e:	d03e      	beq.n	8011ece <HAL_TIM_ConfigClockSource+0xb0>
 8011e50:	d81f      	bhi.n	8011e92 <HAL_TIM_ConfigClockSource+0x74>
 8011e52:	2b50      	cmp	r3, #80	; 0x50
 8011e54:	d047      	beq.n	8011ee6 <HAL_TIM_ConfigClockSource+0xc8>
 8011e56:	2b60      	cmp	r3, #96	; 0x60
 8011e58:	d132      	bne.n	8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8011e5a:	68ca      	ldr	r2, [r1, #12]
 8011e5c:	6849      	ldr	r1, [r1, #4]
 8011e5e:	6800      	ldr	r0, [r0, #0]
 8011e60:	f7ff ff93 	bl	8011d8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011e64:	2160      	movs	r1, #96	; 0x60
 8011e66:	6820      	ldr	r0, [r4, #0]
 8011e68:	f7ff ffa3 	bl	8011db2 <TIM_ITRx_SetConfig>
    break;
 8011e6c:	e028      	b.n	8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8011e6e:	2b10      	cmp	r3, #16
 8011e70:	d04d      	beq.n	8011f0e <HAL_TIM_ConfigClockSource+0xf0>
 8011e72:	d908      	bls.n	8011e86 <HAL_TIM_ConfigClockSource+0x68>
 8011e74:	2b20      	cmp	r3, #32
 8011e76:	d04f      	beq.n	8011f18 <HAL_TIM_ConfigClockSource+0xfa>
 8011e78:	2b30      	cmp	r3, #48	; 0x30
 8011e7a:	d121      	bne.n	8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8011e7c:	2130      	movs	r1, #48	; 0x30
 8011e7e:	6800      	ldr	r0, [r0, #0]
 8011e80:	f7ff ff97 	bl	8011db2 <TIM_ITRx_SetConfig>
    break;
 8011e84:	e01c      	b.n	8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8011e86:	b9db      	cbnz	r3, 8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8011e88:	2100      	movs	r1, #0
 8011e8a:	6800      	ldr	r0, [r0, #0]
 8011e8c:	f7ff ff91 	bl	8011db2 <TIM_ITRx_SetConfig>
    break;
 8011e90:	e016      	b.n	8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8011e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e96:	d00e      	beq.n	8011eb6 <HAL_TIM_ConfigClockSource+0x98>
 8011e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011e9c:	d110      	bne.n	8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance, 
 8011e9e:	68cb      	ldr	r3, [r1, #12]
 8011ea0:	684a      	ldr	r2, [r1, #4]
 8011ea2:	6889      	ldr	r1, [r1, #8]
 8011ea4:	6800      	ldr	r0, [r0, #0]
 8011ea6:	f7ff ff8c 	bl	8011dc2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011eaa:	6822      	ldr	r2, [r4, #0]
 8011eac:	6893      	ldr	r3, [r2, #8]
 8011eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011eb2:	6093      	str	r3, [r2, #8]
    break;
 8011eb4:	e004      	b.n	8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8011eb6:	6802      	ldr	r2, [r0, #0]
 8011eb8:	6893      	ldr	r3, [r2, #8]
 8011eba:	f023 0307 	bic.w	r3, r3, #7
 8011ebe:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8011ec6:	2000      	movs	r0, #0
 8011ec8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8011ecc:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 8011ece:	68cb      	ldr	r3, [r1, #12]
 8011ed0:	684a      	ldr	r2, [r1, #4]
 8011ed2:	6889      	ldr	r1, [r1, #8]
 8011ed4:	6800      	ldr	r0, [r0, #0]
 8011ed6:	f7ff ff74 	bl	8011dc2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8011eda:	6822      	ldr	r2, [r4, #0]
 8011edc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011ede:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8011ee2:	6093      	str	r3, [r2, #8]
    break;
 8011ee4:	e7ec      	b.n	8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8011ee6:	68ca      	ldr	r2, [r1, #12]
 8011ee8:	6849      	ldr	r1, [r1, #4]
 8011eea:	6800      	ldr	r0, [r0, #0]
 8011eec:	f7ff ff3a 	bl	8011d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011ef0:	2150      	movs	r1, #80	; 0x50
 8011ef2:	6820      	ldr	r0, [r4, #0]
 8011ef4:	f7ff ff5d 	bl	8011db2 <TIM_ITRx_SetConfig>
    break;
 8011ef8:	e7e2      	b.n	8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8011efa:	68ca      	ldr	r2, [r1, #12]
 8011efc:	6849      	ldr	r1, [r1, #4]
 8011efe:	6800      	ldr	r0, [r0, #0]
 8011f00:	f7ff ff30 	bl	8011d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011f04:	2140      	movs	r1, #64	; 0x40
 8011f06:	6820      	ldr	r0, [r4, #0]
 8011f08:	f7ff ff53 	bl	8011db2 <TIM_ITRx_SetConfig>
    break;
 8011f0c:	e7d8      	b.n	8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8011f0e:	2110      	movs	r1, #16
 8011f10:	6800      	ldr	r0, [r0, #0]
 8011f12:	f7ff ff4e 	bl	8011db2 <TIM_ITRx_SetConfig>
    break;
 8011f16:	e7d3      	b.n	8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8011f18:	2120      	movs	r1, #32
 8011f1a:	6800      	ldr	r0, [r0, #0]
 8011f1c:	f7ff ff49 	bl	8011db2 <TIM_ITRx_SetConfig>
    break;
 8011f20:	e7ce      	b.n	8011ec0 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8011f22:	2002      	movs	r0, #2
 8011f24:	4770      	bx	lr

08011f26 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8011f26:	4770      	bx	lr

08011f28 <HAL_TIM_IC_CaptureCallback>:
{
 8011f28:	4770      	bx	lr

08011f2a <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8011f2a:	4770      	bx	lr

08011f2c <HAL_TIM_TriggerCallback>:
{
 8011f2c:	4770      	bx	lr

08011f2e <HAL_TIM_IRQHandler>:
{
 8011f2e:	b510      	push	{r4, lr}
 8011f30:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011f32:	6803      	ldr	r3, [r0, #0]
 8011f34:	691a      	ldr	r2, [r3, #16]
 8011f36:	f012 0f02 	tst.w	r2, #2
 8011f3a:	d011      	beq.n	8011f60 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8011f3c:	68da      	ldr	r2, [r3, #12]
 8011f3e:	f012 0f02 	tst.w	r2, #2
 8011f42:	d00d      	beq.n	8011f60 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011f44:	f06f 0202 	mvn.w	r2, #2
 8011f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011f4e:	6803      	ldr	r3, [r0, #0]
 8011f50:	699b      	ldr	r3, [r3, #24]
 8011f52:	f013 0f03 	tst.w	r3, #3
 8011f56:	d070      	beq.n	801203a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8011f58:	f7ff ffe6 	bl	8011f28 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011f60:	6823      	ldr	r3, [r4, #0]
 8011f62:	691a      	ldr	r2, [r3, #16]
 8011f64:	f012 0f04 	tst.w	r2, #4
 8011f68:	d012      	beq.n	8011f90 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8011f6a:	68da      	ldr	r2, [r3, #12]
 8011f6c:	f012 0f04 	tst.w	r2, #4
 8011f70:	d00e      	beq.n	8011f90 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011f72:	f06f 0204 	mvn.w	r2, #4
 8011f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011f78:	2302      	movs	r3, #2
 8011f7a:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011f7c:	6823      	ldr	r3, [r4, #0]
 8011f7e:	699b      	ldr	r3, [r3, #24]
 8011f80:	f413 7f40 	tst.w	r3, #768	; 0x300
 8011f84:	d05f      	beq.n	8012046 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8011f86:	4620      	mov	r0, r4
 8011f88:	f7ff ffce 	bl	8011f28 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011f90:	6823      	ldr	r3, [r4, #0]
 8011f92:	691a      	ldr	r2, [r3, #16]
 8011f94:	f012 0f08 	tst.w	r2, #8
 8011f98:	d012      	beq.n	8011fc0 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8011f9a:	68da      	ldr	r2, [r3, #12]
 8011f9c:	f012 0f08 	tst.w	r2, #8
 8011fa0:	d00e      	beq.n	8011fc0 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011fa2:	f06f 0208 	mvn.w	r2, #8
 8011fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011fa8:	2304      	movs	r3, #4
 8011faa:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011fac:	6823      	ldr	r3, [r4, #0]
 8011fae:	69db      	ldr	r3, [r3, #28]
 8011fb0:	f013 0f03 	tst.w	r3, #3
 8011fb4:	d04e      	beq.n	8012054 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f7ff ffb6 	bl	8011f28 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011fc0:	6823      	ldr	r3, [r4, #0]
 8011fc2:	691a      	ldr	r2, [r3, #16]
 8011fc4:	f012 0f10 	tst.w	r2, #16
 8011fc8:	d012      	beq.n	8011ff0 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8011fca:	68da      	ldr	r2, [r3, #12]
 8011fcc:	f012 0f10 	tst.w	r2, #16
 8011fd0:	d00e      	beq.n	8011ff0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011fd2:	f06f 0210 	mvn.w	r2, #16
 8011fd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011fd8:	2308      	movs	r3, #8
 8011fda:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011fdc:	6823      	ldr	r3, [r4, #0]
 8011fde:	69db      	ldr	r3, [r3, #28]
 8011fe0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8011fe4:	d03d      	beq.n	8012062 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	f7ff ff9e 	bl	8011f28 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011fec:	2300      	movs	r3, #0
 8011fee:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011ff0:	6823      	ldr	r3, [r4, #0]
 8011ff2:	691a      	ldr	r2, [r3, #16]
 8011ff4:	f012 0f01 	tst.w	r2, #1
 8011ff8:	d003      	beq.n	8012002 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8011ffa:	68da      	ldr	r2, [r3, #12]
 8011ffc:	f012 0f01 	tst.w	r2, #1
 8012000:	d136      	bne.n	8012070 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012002:	6823      	ldr	r3, [r4, #0]
 8012004:	691a      	ldr	r2, [r3, #16]
 8012006:	f012 0f80 	tst.w	r2, #128	; 0x80
 801200a:	d003      	beq.n	8012014 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 801200c:	68da      	ldr	r2, [r3, #12]
 801200e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012012:	d134      	bne.n	801207e <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012014:	6823      	ldr	r3, [r4, #0]
 8012016:	691a      	ldr	r2, [r3, #16]
 8012018:	f012 0f40 	tst.w	r2, #64	; 0x40
 801201c:	d003      	beq.n	8012026 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 801201e:	68da      	ldr	r2, [r3, #12]
 8012020:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012024:	d132      	bne.n	801208c <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012026:	6823      	ldr	r3, [r4, #0]
 8012028:	691a      	ldr	r2, [r3, #16]
 801202a:	f012 0f20 	tst.w	r2, #32
 801202e:	d003      	beq.n	8012038 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8012030:	68da      	ldr	r2, [r3, #12]
 8012032:	f012 0f20 	tst.w	r2, #32
 8012036:	d130      	bne.n	801209a <HAL_TIM_IRQHandler+0x16c>
 8012038:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801203a:	f7ff ff74 	bl	8011f26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801203e:	4620      	mov	r0, r4
 8012040:	f7ff ff73 	bl	8011f2a <HAL_TIM_PWM_PulseFinishedCallback>
 8012044:	e78a      	b.n	8011f5c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012046:	4620      	mov	r0, r4
 8012048:	f7ff ff6d 	bl	8011f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801204c:	4620      	mov	r0, r4
 801204e:	f7ff ff6c 	bl	8011f2a <HAL_TIM_PWM_PulseFinishedCallback>
 8012052:	e79b      	b.n	8011f8c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012054:	4620      	mov	r0, r4
 8012056:	f7ff ff66 	bl	8011f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 801205a:	4620      	mov	r0, r4
 801205c:	f7ff ff65 	bl	8011f2a <HAL_TIM_PWM_PulseFinishedCallback>
 8012060:	e7ac      	b.n	8011fbc <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012062:	4620      	mov	r0, r4
 8012064:	f7ff ff5f 	bl	8011f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012068:	4620      	mov	r0, r4
 801206a:	f7ff ff5e 	bl	8011f2a <HAL_TIM_PWM_PulseFinishedCallback>
 801206e:	e7bd      	b.n	8011fec <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012070:	f06f 0201 	mvn.w	r2, #1
 8012074:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8012076:	4620      	mov	r0, r4
 8012078:	f00c fb68 	bl	801e74c <HAL_TIM_PeriodElapsedCallback>
 801207c:	e7c1      	b.n	8012002 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801207e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012082:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8012084:	4620      	mov	r0, r4
 8012086:	f000 f8e0 	bl	801224a <HAL_TIMEx_BreakCallback>
 801208a:	e7c3      	b.n	8012014 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801208c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012090:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8012092:	4620      	mov	r0, r4
 8012094:	f7ff ff4a 	bl	8011f2c <HAL_TIM_TriggerCallback>
 8012098:	e7c5      	b.n	8012026 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801209a:	f06f 0220 	mvn.w	r2, #32
 801209e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80120a0:	4620      	mov	r0, r4
 80120a2:	f000 f8d1 	bl	8012248 <HAL_TIMEx_CommutationCallback>
}
 80120a6:	e7c7      	b.n	8012038 <HAL_TIM_IRQHandler+0x10a>

080120a8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80120a8:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80120aa:	4a45      	ldr	r2, [pc, #276]	; (80121c0 <TIM_Base_SetConfig+0x118>)
 80120ac:	4290      	cmp	r0, r2
 80120ae:	d04a      	beq.n	8012146 <TIM_Base_SetConfig+0x9e>
 80120b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80120b4:	d049      	beq.n	801214a <TIM_Base_SetConfig+0xa2>
 80120b6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80120ba:	4290      	cmp	r0, r2
 80120bc:	d047      	beq.n	801214e <TIM_Base_SetConfig+0xa6>
 80120be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120c2:	4290      	cmp	r0, r2
 80120c4:	d045      	beq.n	8012152 <TIM_Base_SetConfig+0xaa>
 80120c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120ca:	4290      	cmp	r0, r2
 80120cc:	d043      	beq.n	8012156 <TIM_Base_SetConfig+0xae>
 80120ce:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80120d2:	4290      	cmp	r0, r2
 80120d4:	d035      	beq.n	8012142 <TIM_Base_SetConfig+0x9a>
 80120d6:	2200      	movs	r2, #0
 80120d8:	b11a      	cbz	r2, 80120e2 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80120da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80120de:	684a      	ldr	r2, [r1, #4]
 80120e0:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80120e2:	4a37      	ldr	r2, [pc, #220]	; (80121c0 <TIM_Base_SetConfig+0x118>)
 80120e4:	4290      	cmp	r0, r2
 80120e6:	d03a      	beq.n	801215e <TIM_Base_SetConfig+0xb6>
 80120e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80120ec:	d050      	beq.n	8012190 <TIM_Base_SetConfig+0xe8>
 80120ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80120f2:	4290      	cmp	r0, r2
 80120f4:	d04e      	beq.n	8012194 <TIM_Base_SetConfig+0xec>
 80120f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120fa:	4290      	cmp	r0, r2
 80120fc:	d04c      	beq.n	8012198 <TIM_Base_SetConfig+0xf0>
 80120fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012102:	4290      	cmp	r0, r2
 8012104:	d04a      	beq.n	801219c <TIM_Base_SetConfig+0xf4>
 8012106:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801210a:	4290      	cmp	r0, r2
 801210c:	d048      	beq.n	80121a0 <TIM_Base_SetConfig+0xf8>
 801210e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8012112:	4290      	cmp	r0, r2
 8012114:	d046      	beq.n	80121a4 <TIM_Base_SetConfig+0xfc>
 8012116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801211a:	4290      	cmp	r0, r2
 801211c:	d044      	beq.n	80121a8 <TIM_Base_SetConfig+0x100>
 801211e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012122:	4290      	cmp	r0, r2
 8012124:	d042      	beq.n	80121ac <TIM_Base_SetConfig+0x104>
 8012126:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 801212a:	4290      	cmp	r0, r2
 801212c:	d040      	beq.n	80121b0 <TIM_Base_SetConfig+0x108>
 801212e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012132:	4290      	cmp	r0, r2
 8012134:	d03e      	beq.n	80121b4 <TIM_Base_SetConfig+0x10c>
 8012136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801213a:	4290      	cmp	r0, r2
 801213c:	d00d      	beq.n	801215a <TIM_Base_SetConfig+0xb2>
 801213e:	2200      	movs	r2, #0
 8012140:	e00e      	b.n	8012160 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8012142:	2201      	movs	r2, #1
 8012144:	e7c8      	b.n	80120d8 <TIM_Base_SetConfig+0x30>
 8012146:	2201      	movs	r2, #1
 8012148:	e7c6      	b.n	80120d8 <TIM_Base_SetConfig+0x30>
 801214a:	2201      	movs	r2, #1
 801214c:	e7c4      	b.n	80120d8 <TIM_Base_SetConfig+0x30>
 801214e:	2201      	movs	r2, #1
 8012150:	e7c2      	b.n	80120d8 <TIM_Base_SetConfig+0x30>
 8012152:	2201      	movs	r2, #1
 8012154:	e7c0      	b.n	80120d8 <TIM_Base_SetConfig+0x30>
 8012156:	2201      	movs	r2, #1
 8012158:	e7be      	b.n	80120d8 <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 801215a:	2201      	movs	r2, #1
 801215c:	e000      	b.n	8012160 <TIM_Base_SetConfig+0xb8>
 801215e:	2201      	movs	r2, #1
 8012160:	b11a      	cbz	r2, 801216a <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012166:	68ca      	ldr	r2, [r1, #12]
 8012168:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801216a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801216c:	688b      	ldr	r3, [r1, #8]
 801216e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012170:	680b      	ldr	r3, [r1, #0]
 8012172:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8012174:	4b12      	ldr	r3, [pc, #72]	; (80121c0 <TIM_Base_SetConfig+0x118>)
 8012176:	4298      	cmp	r0, r3
 8012178:	d020      	beq.n	80121bc <TIM_Base_SetConfig+0x114>
 801217a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801217e:	4298      	cmp	r0, r3
 8012180:	d01a      	beq.n	80121b8 <TIM_Base_SetConfig+0x110>
 8012182:	2300      	movs	r3, #0
 8012184:	b10b      	cbz	r3, 801218a <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 8012186:	690b      	ldr	r3, [r1, #16]
 8012188:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 801218a:	2301      	movs	r3, #1
 801218c:	6143      	str	r3, [r0, #20]
 801218e:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8012190:	2201      	movs	r2, #1
 8012192:	e7e5      	b.n	8012160 <TIM_Base_SetConfig+0xb8>
 8012194:	2201      	movs	r2, #1
 8012196:	e7e3      	b.n	8012160 <TIM_Base_SetConfig+0xb8>
 8012198:	2201      	movs	r2, #1
 801219a:	e7e1      	b.n	8012160 <TIM_Base_SetConfig+0xb8>
 801219c:	2201      	movs	r2, #1
 801219e:	e7df      	b.n	8012160 <TIM_Base_SetConfig+0xb8>
 80121a0:	2201      	movs	r2, #1
 80121a2:	e7dd      	b.n	8012160 <TIM_Base_SetConfig+0xb8>
 80121a4:	2201      	movs	r2, #1
 80121a6:	e7db      	b.n	8012160 <TIM_Base_SetConfig+0xb8>
 80121a8:	2201      	movs	r2, #1
 80121aa:	e7d9      	b.n	8012160 <TIM_Base_SetConfig+0xb8>
 80121ac:	2201      	movs	r2, #1
 80121ae:	e7d7      	b.n	8012160 <TIM_Base_SetConfig+0xb8>
 80121b0:	2201      	movs	r2, #1
 80121b2:	e7d5      	b.n	8012160 <TIM_Base_SetConfig+0xb8>
 80121b4:	2201      	movs	r2, #1
 80121b6:	e7d3      	b.n	8012160 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80121b8:	2301      	movs	r3, #1
 80121ba:	e7e3      	b.n	8012184 <TIM_Base_SetConfig+0xdc>
 80121bc:	2301      	movs	r3, #1
 80121be:	e7e1      	b.n	8012184 <TIM_Base_SetConfig+0xdc>
 80121c0:	40010000 	.word	0x40010000

080121c4 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80121c4:	b1a8      	cbz	r0, 80121f2 <HAL_TIM_Base_Init+0x2e>
{ 
 80121c6:	b510      	push	{r4, lr}
 80121c8:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80121ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80121ce:	b15b      	cbz	r3, 80121e8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80121d0:	2302      	movs	r3, #2
 80121d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80121d6:	1d21      	adds	r1, r4, #4
 80121d8:	6820      	ldr	r0, [r4, #0]
 80121da:	f7ff ff65 	bl	80120a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80121de:	2301      	movs	r3, #1
 80121e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80121e4:	2000      	movs	r0, #0
 80121e6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80121e8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80121ec:	f00d fb62 	bl	801f8b4 <HAL_TIM_Base_MspInit>
 80121f0:	e7ee      	b.n	80121d0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80121f2:	2001      	movs	r0, #1
 80121f4:	4770      	bx	lr

080121f6 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80121f6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d022      	beq.n	8012244 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 80121fe:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8012200:	2201      	movs	r2, #1
 8012202:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8012206:	2302      	movs	r3, #2
 8012208:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801220c:	6804      	ldr	r4, [r0, #0]
 801220e:	6863      	ldr	r3, [r4, #4]
 8012210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012214:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8012216:	6804      	ldr	r4, [r0, #0]
 8012218:	6863      	ldr	r3, [r4, #4]
 801221a:	680d      	ldr	r5, [r1, #0]
 801221c:	432b      	orrs	r3, r5
 801221e:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012220:	6804      	ldr	r4, [r0, #0]
 8012222:	68a3      	ldr	r3, [r4, #8]
 8012224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012228:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 801222a:	6804      	ldr	r4, [r0, #0]
 801222c:	68a3      	ldr	r3, [r4, #8]
 801222e:	6849      	ldr	r1, [r1, #4]
 8012230:	430b      	orrs	r3, r1
 8012232:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8012234:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8012238:	2300      	movs	r3, #0
 801223a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 801223e:	4618      	mov	r0, r3
} 
 8012240:	bc30      	pop	{r4, r5}
 8012242:	4770      	bx	lr
  __HAL_LOCK(htim);
 8012244:	2002      	movs	r0, #2
 8012246:	4770      	bx	lr

08012248 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8012248:	4770      	bx	lr

0801224a <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801224a:	4770      	bx	lr

0801224c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801224c:	6802      	ldr	r2, [r0, #0]
 801224e:	68d3      	ldr	r3, [r2, #12]
 8012250:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012254:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012256:	2320      	movs	r3, #32
 8012258:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 801225c:	4770      	bx	lr

0801225e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801225e:	6802      	ldr	r2, [r0, #0]
 8012260:	68d3      	ldr	r3, [r2, #12]
 8012262:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012266:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012268:	6802      	ldr	r2, [r0, #0]
 801226a:	6953      	ldr	r3, [r2, #20]
 801226c:	f023 0301 	bic.w	r3, r3, #1
 8012270:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012272:	2320      	movs	r3, #32
 8012274:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8012278:	4770      	bx	lr

0801227a <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 801227a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801227e:	b2db      	uxtb	r3, r3
 8012280:	2b21      	cmp	r3, #33	; 0x21
 8012282:	d001      	beq.n	8012288 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012284:	2002      	movs	r0, #2
 8012286:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012288:	6883      	ldr	r3, [r0, #8]
 801228a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801228e:	d017      	beq.n	80122c0 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8012290:	6802      	ldr	r2, [r0, #0]
 8012292:	6a03      	ldr	r3, [r0, #32]
 8012294:	1c59      	adds	r1, r3, #1
 8012296:	6201      	str	r1, [r0, #32]
 8012298:	781b      	ldrb	r3, [r3, #0]
 801229a:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 801229c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801229e:	b29b      	uxth	r3, r3
 80122a0:	3b01      	subs	r3, #1
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80122a6:	b9db      	cbnz	r3, 80122e0 <UART_Transmit_IT+0x66>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80122a8:	6802      	ldr	r2, [r0, #0]
 80122aa:	68d3      	ldr	r3, [r2, #12]
 80122ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80122b0:	60d3      	str	r3, [r2, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80122b2:	6802      	ldr	r2, [r0, #0]
 80122b4:	68d3      	ldr	r3, [r2, #12]
 80122b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122ba:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80122bc:	2000      	movs	r0, #0
 80122be:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80122c0:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80122c2:	6802      	ldr	r2, [r0, #0]
 80122c4:	881b      	ldrh	r3, [r3, #0]
 80122c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122ca:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80122cc:	6903      	ldr	r3, [r0, #16]
 80122ce:	b91b      	cbnz	r3, 80122d8 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 80122d0:	6a03      	ldr	r3, [r0, #32]
 80122d2:	3302      	adds	r3, #2
 80122d4:	6203      	str	r3, [r0, #32]
 80122d6:	e7e1      	b.n	801229c <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 80122d8:	6a03      	ldr	r3, [r0, #32]
 80122da:	3301      	adds	r3, #1
 80122dc:	6203      	str	r3, [r0, #32]
 80122de:	e7dd      	b.n	801229c <UART_Transmit_IT+0x22>
    return HAL_OK;
 80122e0:	2000      	movs	r0, #0
  }
}
 80122e2:	4770      	bx	lr

080122e4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80122e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122e8:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80122ea:	6802      	ldr	r2, [r0, #0]
 80122ec:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80122ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80122f2:	68c1      	ldr	r1, [r0, #12]
 80122f4:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80122f6:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80122f8:	6801      	ldr	r1, [r0, #0]
 80122fa:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80122fc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8012300:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012304:	6882      	ldr	r2, [r0, #8]
 8012306:	6900      	ldr	r0, [r0, #16]
 8012308:	4302      	orrs	r2, r0
 801230a:	6960      	ldr	r0, [r4, #20]
 801230c:	4302      	orrs	r2, r0
 801230e:	69e0      	ldr	r0, [r4, #28]
 8012310:	4302      	orrs	r2, r0
 8012312:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8012314:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8012316:	6822      	ldr	r2, [r4, #0]
 8012318:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 801231a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 801231e:	69a1      	ldr	r1, [r4, #24]
 8012320:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8012322:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012324:	69e3      	ldr	r3, [r4, #28]
 8012326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801232a:	d062      	beq.n	80123f2 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 801232c:	f8d4 8000 	ldr.w	r8, [r4]
 8012330:	4bbb      	ldr	r3, [pc, #748]	; (8012620 <UART_SetConfig+0x33c>)
 8012332:	4598      	cmp	r8, r3
 8012334:	f000 811b 	beq.w	801256e <UART_SetConfig+0x28a>
 8012338:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801233c:	4598      	cmp	r8, r3
 801233e:	f000 8116 	beq.w	801256e <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8012342:	f7ff fcd1 	bl	8011ce8 <HAL_RCC_GetPCLK1Freq>
 8012346:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801234a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801234e:	6865      	ldr	r5, [r4, #4]
 8012350:	00ad      	lsls	r5, r5, #2
 8012352:	fbb0 f5f5 	udiv	r5, r0, r5
 8012356:	4fb3      	ldr	r7, [pc, #716]	; (8012624 <UART_SetConfig+0x340>)
 8012358:	fba7 3505 	umull	r3, r5, r7, r5
 801235c:	096d      	lsrs	r5, r5, #5
 801235e:	012e      	lsls	r6, r5, #4
 8012360:	f7ff fcc2 	bl	8011ce8 <HAL_RCC_GetPCLK1Freq>
 8012364:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012368:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801236c:	6865      	ldr	r5, [r4, #4]
 801236e:	00ad      	lsls	r5, r5, #2
 8012370:	fbb0 faf5 	udiv	sl, r0, r5
 8012374:	f7ff fcb8 	bl	8011ce8 <HAL_RCC_GetPCLK1Freq>
 8012378:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801237c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012380:	6865      	ldr	r5, [r4, #4]
 8012382:	00ad      	lsls	r5, r5, #2
 8012384:	fbb0 f5f5 	udiv	r5, r0, r5
 8012388:	fba7 3505 	umull	r3, r5, r7, r5
 801238c:	096d      	lsrs	r5, r5, #5
 801238e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8012392:	fb09 a515 	mls	r5, r9, r5, sl
 8012396:	012d      	lsls	r5, r5, #4
 8012398:	3532      	adds	r5, #50	; 0x32
 801239a:	fba7 3505 	umull	r3, r5, r7, r5
 801239e:	096d      	lsrs	r5, r5, #5
 80123a0:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80123a4:	4435      	add	r5, r6
 80123a6:	f7ff fc9f 	bl	8011ce8 <HAL_RCC_GetPCLK1Freq>
 80123aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80123ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80123b2:	6866      	ldr	r6, [r4, #4]
 80123b4:	00b6      	lsls	r6, r6, #2
 80123b6:	fbb0 f6f6 	udiv	r6, r0, r6
 80123ba:	f7ff fc95 	bl	8011ce8 <HAL_RCC_GetPCLK1Freq>
 80123be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80123c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80123c6:	6863      	ldr	r3, [r4, #4]
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80123ce:	fba7 3000 	umull	r3, r0, r7, r0
 80123d2:	0940      	lsrs	r0, r0, #5
 80123d4:	fb09 6910 	mls	r9, r9, r0, r6
 80123d8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80123dc:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80123e0:	fba7 3709 	umull	r3, r7, r7, r9
 80123e4:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80123e8:	442f      	add	r7, r5
 80123ea:	f8c8 7008 	str.w	r7, [r8, #8]
 80123ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80123f2:	f8d4 8000 	ldr.w	r8, [r4]
 80123f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80123fa:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80123fe:	4598      	cmp	r8, r3
 8012400:	d05c      	beq.n	80124bc <UART_SetConfig+0x1d8>
 8012402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012406:	4598      	cmp	r8, r3
 8012408:	d058      	beq.n	80124bc <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 801240a:	f7ff fc6d 	bl	8011ce8 <HAL_RCC_GetPCLK1Freq>
 801240e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012412:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012416:	6865      	ldr	r5, [r4, #4]
 8012418:	006d      	lsls	r5, r5, #1
 801241a:	fbb0 f5f5 	udiv	r5, r0, r5
 801241e:	4f81      	ldr	r7, [pc, #516]	; (8012624 <UART_SetConfig+0x340>)
 8012420:	fba7 3505 	umull	r3, r5, r7, r5
 8012424:	096d      	lsrs	r5, r5, #5
 8012426:	012e      	lsls	r6, r5, #4
 8012428:	f7ff fc5e 	bl	8011ce8 <HAL_RCC_GetPCLK1Freq>
 801242c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012430:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012434:	6865      	ldr	r5, [r4, #4]
 8012436:	006d      	lsls	r5, r5, #1
 8012438:	fbb0 faf5 	udiv	sl, r0, r5
 801243c:	f7ff fc54 	bl	8011ce8 <HAL_RCC_GetPCLK1Freq>
 8012440:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012444:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012448:	6865      	ldr	r5, [r4, #4]
 801244a:	006d      	lsls	r5, r5, #1
 801244c:	fbb0 f5f5 	udiv	r5, r0, r5
 8012450:	fba7 3505 	umull	r3, r5, r7, r5
 8012454:	096d      	lsrs	r5, r5, #5
 8012456:	f04f 0964 	mov.w	r9, #100	; 0x64
 801245a:	fb09 a515 	mls	r5, r9, r5, sl
 801245e:	00ed      	lsls	r5, r5, #3
 8012460:	3532      	adds	r5, #50	; 0x32
 8012462:	fba7 3505 	umull	r3, r5, r7, r5
 8012466:	096d      	lsrs	r5, r5, #5
 8012468:	006d      	lsls	r5, r5, #1
 801246a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 801246e:	4435      	add	r5, r6
 8012470:	f7ff fc3a 	bl	8011ce8 <HAL_RCC_GetPCLK1Freq>
 8012474:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012478:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801247c:	6866      	ldr	r6, [r4, #4]
 801247e:	0076      	lsls	r6, r6, #1
 8012480:	fbb0 f6f6 	udiv	r6, r0, r6
 8012484:	f7ff fc30 	bl	8011ce8 <HAL_RCC_GetPCLK1Freq>
 8012488:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801248c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012490:	6863      	ldr	r3, [r4, #4]
 8012492:	005b      	lsls	r3, r3, #1
 8012494:	fbb0 f3f3 	udiv	r3, r0, r3
 8012498:	fba7 2303 	umull	r2, r3, r7, r3
 801249c:	095b      	lsrs	r3, r3, #5
 801249e:	fb09 6913 	mls	r9, r9, r3, r6
 80124a2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80124a6:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80124aa:	fba7 3709 	umull	r3, r7, r7, r9
 80124ae:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80124b2:	442f      	add	r7, r5
 80124b4:	f8c8 7008 	str.w	r7, [r8, #8]
 80124b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80124bc:	f7ff fc24 	bl	8011d08 <HAL_RCC_GetPCLK2Freq>
 80124c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124c8:	6865      	ldr	r5, [r4, #4]
 80124ca:	006d      	lsls	r5, r5, #1
 80124cc:	fbb0 f5f5 	udiv	r5, r0, r5
 80124d0:	4f54      	ldr	r7, [pc, #336]	; (8012624 <UART_SetConfig+0x340>)
 80124d2:	fba7 3505 	umull	r3, r5, r7, r5
 80124d6:	096d      	lsrs	r5, r5, #5
 80124d8:	012e      	lsls	r6, r5, #4
 80124da:	f7ff fc15 	bl	8011d08 <HAL_RCC_GetPCLK2Freq>
 80124de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124e6:	6865      	ldr	r5, [r4, #4]
 80124e8:	006d      	lsls	r5, r5, #1
 80124ea:	fbb0 faf5 	udiv	sl, r0, r5
 80124ee:	f7ff fc0b 	bl	8011d08 <HAL_RCC_GetPCLK2Freq>
 80124f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124fa:	6865      	ldr	r5, [r4, #4]
 80124fc:	006d      	lsls	r5, r5, #1
 80124fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8012502:	fba7 3505 	umull	r3, r5, r7, r5
 8012506:	096d      	lsrs	r5, r5, #5
 8012508:	f04f 0964 	mov.w	r9, #100	; 0x64
 801250c:	fb09 a515 	mls	r5, r9, r5, sl
 8012510:	00ed      	lsls	r5, r5, #3
 8012512:	3532      	adds	r5, #50	; 0x32
 8012514:	fba7 3505 	umull	r3, r5, r7, r5
 8012518:	096d      	lsrs	r5, r5, #5
 801251a:	006d      	lsls	r5, r5, #1
 801251c:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8012520:	4435      	add	r5, r6
 8012522:	f7ff fbf1 	bl	8011d08 <HAL_RCC_GetPCLK2Freq>
 8012526:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801252a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801252e:	6866      	ldr	r6, [r4, #4]
 8012530:	0076      	lsls	r6, r6, #1
 8012532:	fbb0 f6f6 	udiv	r6, r0, r6
 8012536:	f7ff fbe7 	bl	8011d08 <HAL_RCC_GetPCLK2Freq>
 801253a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801253e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012542:	6863      	ldr	r3, [r4, #4]
 8012544:	005b      	lsls	r3, r3, #1
 8012546:	fbb0 f3f3 	udiv	r3, r0, r3
 801254a:	fba7 2303 	umull	r2, r3, r7, r3
 801254e:	095b      	lsrs	r3, r3, #5
 8012550:	fb09 6913 	mls	r9, r9, r3, r6
 8012554:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8012558:	f109 0932 	add.w	r9, r9, #50	; 0x32
 801255c:	fba7 3709 	umull	r3, r7, r7, r9
 8012560:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8012564:	442f      	add	r7, r5
 8012566:	f8c8 7008 	str.w	r7, [r8, #8]
 801256a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 801256e:	f7ff fbcb 	bl	8011d08 <HAL_RCC_GetPCLK2Freq>
 8012572:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012576:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801257a:	6865      	ldr	r5, [r4, #4]
 801257c:	00ad      	lsls	r5, r5, #2
 801257e:	fbb0 f5f5 	udiv	r5, r0, r5
 8012582:	4f28      	ldr	r7, [pc, #160]	; (8012624 <UART_SetConfig+0x340>)
 8012584:	fba7 3505 	umull	r3, r5, r7, r5
 8012588:	096d      	lsrs	r5, r5, #5
 801258a:	012e      	lsls	r6, r5, #4
 801258c:	f7ff fbbc 	bl	8011d08 <HAL_RCC_GetPCLK2Freq>
 8012590:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012594:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012598:	6865      	ldr	r5, [r4, #4]
 801259a:	00ad      	lsls	r5, r5, #2
 801259c:	fbb0 faf5 	udiv	sl, r0, r5
 80125a0:	f7ff fbb2 	bl	8011d08 <HAL_RCC_GetPCLK2Freq>
 80125a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125ac:	6865      	ldr	r5, [r4, #4]
 80125ae:	00ad      	lsls	r5, r5, #2
 80125b0:	fbb0 f5f5 	udiv	r5, r0, r5
 80125b4:	fba7 3505 	umull	r3, r5, r7, r5
 80125b8:	096d      	lsrs	r5, r5, #5
 80125ba:	f04f 0964 	mov.w	r9, #100	; 0x64
 80125be:	fb09 a515 	mls	r5, r9, r5, sl
 80125c2:	012d      	lsls	r5, r5, #4
 80125c4:	3532      	adds	r5, #50	; 0x32
 80125c6:	fba7 3505 	umull	r3, r5, r7, r5
 80125ca:	096d      	lsrs	r5, r5, #5
 80125cc:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80125d0:	4435      	add	r5, r6
 80125d2:	f7ff fb99 	bl	8011d08 <HAL_RCC_GetPCLK2Freq>
 80125d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125de:	6866      	ldr	r6, [r4, #4]
 80125e0:	00b6      	lsls	r6, r6, #2
 80125e2:	fbb0 f6f6 	udiv	r6, r0, r6
 80125e6:	f7ff fb8f 	bl	8011d08 <HAL_RCC_GetPCLK2Freq>
 80125ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125f2:	6863      	ldr	r3, [r4, #4]
 80125f4:	009b      	lsls	r3, r3, #2
 80125f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80125fa:	fba7 2303 	umull	r2, r3, r7, r3
 80125fe:	095b      	lsrs	r3, r3, #5
 8012600:	fb09 6913 	mls	r9, r9, r3, r6
 8012604:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8012608:	f109 0932 	add.w	r9, r9, #50	; 0x32
 801260c:	fba7 3709 	umull	r3, r7, r7, r9
 8012610:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8012614:	442f      	add	r7, r5
 8012616:	f8c8 7008 	str.w	r7, [r8, #8]
 801261a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801261e:	bf00      	nop
 8012620:	40011000 	.word	0x40011000
 8012624:	51eb851f 	.word	0x51eb851f

08012628 <UART_WaitOnFlagUntilTimeout>:
{
 8012628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801262c:	4605      	mov	r5, r0
 801262e:	460f      	mov	r7, r1
 8012630:	4616      	mov	r6, r2
 8012632:	4698      	mov	r8, r3
 8012634:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8012636:	682b      	ldr	r3, [r5, #0]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	ea37 0303 	bics.w	r3, r7, r3
 801263e:	bf0c      	ite	eq
 8012640:	2301      	moveq	r3, #1
 8012642:	2300      	movne	r3, #0
 8012644:	42b3      	cmp	r3, r6
 8012646:	d11e      	bne.n	8012686 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8012648:	f1b4 3fff 	cmp.w	r4, #4294967295
 801264c:	d0f3      	beq.n	8012636 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 801264e:	b12c      	cbz	r4, 801265c <UART_WaitOnFlagUntilTimeout+0x34>
 8012650:	f7fd fec4 	bl	80103dc <HAL_GetTick>
 8012654:	eba0 0008 	sub.w	r0, r0, r8
 8012658:	4284      	cmp	r4, r0
 801265a:	d2ec      	bcs.n	8012636 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801265c:	682a      	ldr	r2, [r5, #0]
 801265e:	68d3      	ldr	r3, [r2, #12]
 8012660:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012664:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012666:	682a      	ldr	r2, [r5, #0]
 8012668:	6953      	ldr	r3, [r2, #20]
 801266a:	f023 0301 	bic.w	r3, r3, #1
 801266e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8012670:	2320      	movs	r3, #32
 8012672:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8012676:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 801267a:	2300      	movs	r3, #0
 801267c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8012680:	2003      	movs	r0, #3
 8012682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8012686:	2000      	movs	r0, #0
}
 8012688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801268c <HAL_UART_Init>:
  if(huart == NULL)
 801268c:	b358      	cbz	r0, 80126e6 <HAL_UART_Init+0x5a>
{
 801268e:	b510      	push	{r4, lr}
 8012690:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8012692:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8012696:	b30b      	cbz	r3, 80126dc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8012698:	2324      	movs	r3, #36	; 0x24
 801269a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 801269e:	6822      	ldr	r2, [r4, #0]
 80126a0:	68d3      	ldr	r3, [r2, #12]
 80126a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80126a6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80126a8:	4620      	mov	r0, r4
 80126aa:	f7ff fe1b 	bl	80122e4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80126ae:	6822      	ldr	r2, [r4, #0]
 80126b0:	6913      	ldr	r3, [r2, #16]
 80126b2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80126b6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80126b8:	6822      	ldr	r2, [r4, #0]
 80126ba:	6953      	ldr	r3, [r2, #20]
 80126bc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80126c0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80126c2:	6822      	ldr	r2, [r4, #0]
 80126c4:	68d3      	ldr	r3, [r2, #12]
 80126c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80126ca:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126cc:	2000      	movs	r0, #0
 80126ce:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80126d0:	2320      	movs	r3, #32
 80126d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80126d6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80126da:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80126dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80126e0:	f00d fd96 	bl	8020210 <HAL_UART_MspInit>
 80126e4:	e7d8      	b.n	8012698 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80126e6:	2001      	movs	r0, #1
 80126e8:	4770      	bx	lr

080126ea <HAL_UART_Transmit>:
{
 80126ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ee:	b082      	sub	sp, #8
 80126f0:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80126f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	2b20      	cmp	r3, #32
 80126fa:	d004      	beq.n	8012706 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 80126fc:	2302      	movs	r3, #2
}
 80126fe:	4618      	mov	r0, r3
 8012700:	b002      	add	sp, #8
 8012702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012706:	4604      	mov	r4, r0
 8012708:	460d      	mov	r5, r1
 801270a:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 801270c:	2900      	cmp	r1, #0
 801270e:	d055      	beq.n	80127bc <HAL_UART_Transmit+0xd2>
 8012710:	2a00      	cmp	r2, #0
 8012712:	d055      	beq.n	80127c0 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 8012714:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8012718:	2b01      	cmp	r3, #1
 801271a:	d101      	bne.n	8012720 <HAL_UART_Transmit+0x36>
 801271c:	2302      	movs	r3, #2
 801271e:	e7ee      	b.n	80126fe <HAL_UART_Transmit+0x14>
 8012720:	2301      	movs	r3, #1
 8012722:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012726:	2300      	movs	r3, #0
 8012728:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801272a:	2321      	movs	r3, #33	; 0x21
 801272c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8012730:	f7fd fe54 	bl	80103dc <HAL_GetTick>
 8012734:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8012736:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 801273a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 801273e:	e010      	b.n	8012762 <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012740:	9600      	str	r6, [sp, #0]
 8012742:	463b      	mov	r3, r7
 8012744:	2200      	movs	r2, #0
 8012746:	2180      	movs	r1, #128	; 0x80
 8012748:	4620      	mov	r0, r4
 801274a:	f7ff ff6d 	bl	8012628 <UART_WaitOnFlagUntilTimeout>
 801274e:	2800      	cmp	r0, #0
 8012750:	d138      	bne.n	80127c4 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8012752:	6822      	ldr	r2, [r4, #0]
 8012754:	882b      	ldrh	r3, [r5, #0]
 8012756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801275a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 801275c:	6923      	ldr	r3, [r4, #16]
 801275e:	b9cb      	cbnz	r3, 8012794 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8012760:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 8012762:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8012764:	b29b      	uxth	r3, r3
 8012766:	b1bb      	cbz	r3, 8012798 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 8012768:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801276a:	b29b      	uxth	r3, r3
 801276c:	3b01      	subs	r3, #1
 801276e:	b29b      	uxth	r3, r3
 8012770:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012772:	68a3      	ldr	r3, [r4, #8]
 8012774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012778:	d0e2      	beq.n	8012740 <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801277a:	9600      	str	r6, [sp, #0]
 801277c:	463b      	mov	r3, r7
 801277e:	2200      	movs	r2, #0
 8012780:	2180      	movs	r1, #128	; 0x80
 8012782:	4620      	mov	r0, r4
 8012784:	f7ff ff50 	bl	8012628 <UART_WaitOnFlagUntilTimeout>
 8012788:	b9f0      	cbnz	r0, 80127c8 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801278a:	6823      	ldr	r3, [r4, #0]
 801278c:	782a      	ldrb	r2, [r5, #0]
 801278e:	605a      	str	r2, [r3, #4]
 8012790:	3501      	adds	r5, #1
 8012792:	e7e6      	b.n	8012762 <HAL_UART_Transmit+0x78>
          pData +=1U;
 8012794:	3501      	adds	r5, #1
 8012796:	e7e4      	b.n	8012762 <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012798:	9600      	str	r6, [sp, #0]
 801279a:	463b      	mov	r3, r7
 801279c:	2200      	movs	r2, #0
 801279e:	2140      	movs	r1, #64	; 0x40
 80127a0:	4620      	mov	r0, r4
 80127a2:	f7ff ff41 	bl	8012628 <UART_WaitOnFlagUntilTimeout>
 80127a6:	4603      	mov	r3, r0
 80127a8:	b108      	cbz	r0, 80127ae <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80127aa:	2303      	movs	r3, #3
 80127ac:	e7a7      	b.n	80126fe <HAL_UART_Transmit+0x14>
      huart->gState = HAL_UART_STATE_READY;
 80127ae:	2220      	movs	r2, #32
 80127b0:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80127b4:	2200      	movs	r2, #0
 80127b6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 80127ba:	e7a0      	b.n	80126fe <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 80127bc:	2301      	movs	r3, #1
 80127be:	e79e      	b.n	80126fe <HAL_UART_Transmit+0x14>
 80127c0:	2301      	movs	r3, #1
 80127c2:	e79c      	b.n	80126fe <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 80127c4:	2303      	movs	r3, #3
 80127c6:	e79a      	b.n	80126fe <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 80127c8:	2303      	movs	r3, #3
 80127ca:	e798      	b.n	80126fe <HAL_UART_Transmit+0x14>

080127cc <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80127cc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80127d0:	b2db      	uxtb	r3, r3
 80127d2:	2b20      	cmp	r3, #32
 80127d4:	d001      	beq.n	80127da <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY; 
 80127d6:	2002      	movs	r0, #2
 80127d8:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0)) 
 80127da:	b1d1      	cbz	r1, 8012812 <HAL_UART_Receive_IT+0x46>
 80127dc:	b1da      	cbz	r2, 8012816 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80127de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80127e2:	2b01      	cmp	r3, #1
 80127e4:	d019      	beq.n	801281a <HAL_UART_Receive_IT+0x4e>
    huart->pRxBuffPtr = pData;
 80127e6:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80127e8:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 80127ea:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127ec:	2300      	movs	r3, #0
 80127ee:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80127f0:	2222      	movs	r2, #34	; 0x22
 80127f2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 80127f6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80127fa:	6801      	ldr	r1, [r0, #0]
 80127fc:	694a      	ldr	r2, [r1, #20]
 80127fe:	f042 0201 	orr.w	r2, r2, #1
 8012802:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8012804:	6801      	ldr	r1, [r0, #0]
 8012806:	68ca      	ldr	r2, [r1, #12]
 8012808:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 801280c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 801280e:	4618      	mov	r0, r3
 8012810:	4770      	bx	lr
      return HAL_ERROR;
 8012812:	2001      	movs	r0, #1
 8012814:	4770      	bx	lr
 8012816:	2001      	movs	r0, #1
 8012818:	4770      	bx	lr
    __HAL_LOCK(huart);
 801281a:	2002      	movs	r0, #2
}
 801281c:	4770      	bx	lr
	...

08012820 <HAL_UART_Transmit_DMA>:
{
 8012820:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8012822:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8012826:	b2e4      	uxtb	r4, r4
 8012828:	2c20      	cmp	r4, #32
 801282a:	d001      	beq.n	8012830 <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 801282c:	2002      	movs	r0, #2
 801282e:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL ) || (Size == 0))
 8012830:	2900      	cmp	r1, #0
 8012832:	d031      	beq.n	8012898 <HAL_UART_Transmit_DMA+0x78>
 8012834:	2a00      	cmp	r2, #0
 8012836:	d031      	beq.n	801289c <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8012838:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801283c:	2b01      	cmp	r3, #1
 801283e:	d101      	bne.n	8012844 <HAL_UART_Transmit_DMA+0x24>
 8012840:	2002      	movs	r0, #2
}
 8012842:	bd38      	pop	{r3, r4, r5, pc}
 8012844:	4613      	mov	r3, r2
 8012846:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8012848:	2201      	movs	r2, #1
 801284a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 801284e:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8012850:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8012852:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012854:	2500      	movs	r5, #0
 8012856:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012858:	2221      	movs	r2, #33	; 0x21
 801285a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801285e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8012860:	480f      	ldr	r0, [pc, #60]	; (80128a0 <HAL_UART_Transmit_DMA+0x80>)
 8012862:	63d0      	str	r0, [r2, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012864:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012866:	480f      	ldr	r0, [pc, #60]	; (80128a4 <HAL_UART_Transmit_DMA+0x84>)
 8012868:	6410      	str	r0, [r2, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 801286a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801286c:	480e      	ldr	r0, [pc, #56]	; (80128a8 <HAL_UART_Transmit_DMA+0x88>)
 801286e:	64d0      	str	r0, [r2, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 8012870:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012872:	6515      	str	r5, [r2, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8012874:	6822      	ldr	r2, [r4, #0]
 8012876:	3204      	adds	r2, #4
 8012878:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801287a:	f7fd fefd 	bl	8010678 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 801287e:	6823      	ldr	r3, [r4, #0]
 8012880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012884:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8012886:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801288a:	6822      	ldr	r2, [r4, #0]
 801288c:	6953      	ldr	r3, [r2, #20]
 801288e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012892:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8012894:	4628      	mov	r0, r5
 8012896:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8012898:	2001      	movs	r0, #1
 801289a:	bd38      	pop	{r3, r4, r5, pc}
 801289c:	2001      	movs	r0, #1
 801289e:	bd38      	pop	{r3, r4, r5, pc}
 80128a0:	080128ad 	.word	0x080128ad
 80128a4:	080128f9 	.word	0x080128f9
 80128a8:	08012999 	.word	0x08012999

080128ac <UART_DMATransmitCplt>:
{
 80128ac:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80128ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80128b0:	6802      	ldr	r2, [r0, #0]
 80128b2:	6812      	ldr	r2, [r2, #0]
 80128b4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80128b8:	d10c      	bne.n	80128d4 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0U;
 80128ba:	2200      	movs	r2, #0
 80128bc:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80128be:	6819      	ldr	r1, [r3, #0]
 80128c0:	694a      	ldr	r2, [r1, #20]
 80128c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80128c6:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	68d3      	ldr	r3, [r2, #12]
 80128cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128d0:	60d3      	str	r3, [r2, #12]
 80128d2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80128d4:	4618      	mov	r0, r3
 80128d6:	f00c f9fd 	bl	801ecd4 <HAL_UART_TxCpltCallback>
 80128da:	bd08      	pop	{r3, pc}

080128dc <UART_EndTransmit_IT>:
{
 80128dc:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80128de:	6801      	ldr	r1, [r0, #0]
 80128e0:	68cb      	ldr	r3, [r1, #12]
 80128e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80128e6:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80128e8:	2320      	movs	r3, #32
 80128ea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80128ee:	f00c f9f1 	bl	801ecd4 <HAL_UART_TxCpltCallback>
}
 80128f2:	2000      	movs	r0, #0
 80128f4:	bd08      	pop	{r3, pc}

080128f6 <HAL_UART_TxHalfCpltCallback>:
{
 80128f6:	4770      	bx	lr

080128f8 <UART_DMATxHalfCplt>:
{
 80128f8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80128fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80128fc:	f7ff fffb 	bl	80128f6 <HAL_UART_TxHalfCpltCallback>
 8012900:	bd08      	pop	{r3, pc}

08012902 <UART_Receive_IT>:
{
 8012902:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8012904:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8012908:	b2db      	uxtb	r3, r3
 801290a:	2b22      	cmp	r3, #34	; 0x22
 801290c:	d001      	beq.n	8012912 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 801290e:	2002      	movs	r0, #2
 8012910:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012912:	6883      	ldr	r3, [r0, #8]
 8012914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012918:	d00f      	beq.n	801293a <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 801291a:	6903      	ldr	r3, [r0, #16]
 801291c:	bb0b      	cbnz	r3, 8012962 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801291e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012920:	1c5a      	adds	r2, r3, #1
 8012922:	6282      	str	r2, [r0, #40]	; 0x28
 8012924:	6802      	ldr	r2, [r0, #0]
 8012926:	6852      	ldr	r2, [r2, #4]
 8012928:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 801292a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801292c:	b29b      	uxth	r3, r3
 801292e:	3b01      	subs	r3, #1
 8012930:	b29b      	uxth	r3, r3
 8012932:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8012934:	b1f3      	cbz	r3, 8012974 <UART_Receive_IT+0x72>
    return HAL_OK;
 8012936:	2000      	movs	r0, #0
}
 8012938:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 801293a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 801293c:	6903      	ldr	r3, [r0, #16]
 801293e:	b943      	cbnz	r3, 8012952 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8012940:	6803      	ldr	r3, [r0, #0]
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012948:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 801294a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801294c:	3302      	adds	r3, #2
 801294e:	6283      	str	r3, [r0, #40]	; 0x28
 8012950:	e7eb      	b.n	801292a <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8012952:	6803      	ldr	r3, [r0, #0]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	b2db      	uxtb	r3, r3
 8012958:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 801295a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801295c:	3301      	adds	r3, #1
 801295e:	6283      	str	r3, [r0, #40]	; 0x28
 8012960:	e7e3      	b.n	801292a <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8012962:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8012964:	1c53      	adds	r3, r2, #1
 8012966:	6283      	str	r3, [r0, #40]	; 0x28
 8012968:	6803      	ldr	r3, [r0, #0]
 801296a:	685b      	ldr	r3, [r3, #4]
 801296c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012970:	7013      	strb	r3, [r2, #0]
 8012972:	e7da      	b.n	801292a <UART_Receive_IT+0x28>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012974:	6802      	ldr	r2, [r0, #0]
 8012976:	68d3      	ldr	r3, [r2, #12]
 8012978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801297c:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801297e:	6802      	ldr	r2, [r0, #0]
 8012980:	6953      	ldr	r3, [r2, #20]
 8012982:	f023 0301 	bic.w	r3, r3, #1
 8012986:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8012988:	2320      	movs	r3, #32
 801298a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 801298e:	f00c f983 	bl	801ec98 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8012992:	2000      	movs	r0, #0
 8012994:	bd08      	pop	{r3, pc}

08012996 <HAL_UART_ErrorCallback>:
{
 8012996:	4770      	bx	lr

08012998 <UART_DMAError>:
{
 8012998:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801299a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801299c:	6823      	ldr	r3, [r4, #0]
 801299e:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80129a0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80129a4:	b2db      	uxtb	r3, r3
 80129a6:	2b21      	cmp	r3, #33	; 0x21
 80129a8:	d010      	beq.n	80129cc <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80129aa:	6823      	ldr	r3, [r4, #0]
 80129ac:	695a      	ldr	r2, [r3, #20]
 80129ae:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80129b2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80129b6:	b2db      	uxtb	r3, r3
 80129b8:	2b22      	cmp	r3, #34	; 0x22
 80129ba:	d011      	beq.n	80129e0 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80129bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80129be:	f043 0310 	orr.w	r3, r3, #16
 80129c2:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80129c4:	4620      	mov	r0, r4
 80129c6:	f7ff ffe6 	bl	8012996 <HAL_UART_ErrorCallback>
 80129ca:	bd10      	pop	{r4, pc}
 80129cc:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80129d0:	2a00      	cmp	r2, #0
 80129d2:	d0ea      	beq.n	80129aa <UART_DMAError+0x12>
    huart->TxXferCount = 0U;
 80129d4:	2300      	movs	r3, #0
 80129d6:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80129d8:	4620      	mov	r0, r4
 80129da:	f7ff fc37 	bl	801224c <UART_EndTxTransfer>
 80129de:	e7e4      	b.n	80129aa <UART_DMAError+0x12>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80129e0:	2a00      	cmp	r2, #0
 80129e2:	d0eb      	beq.n	80129bc <UART_DMAError+0x24>
    huart->RxXferCount = 0U;
 80129e4:	2300      	movs	r3, #0
 80129e6:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80129e8:	4620      	mov	r0, r4
 80129ea:	f7ff fc38 	bl	801225e <UART_EndRxTransfer>
 80129ee:	e7e5      	b.n	80129bc <UART_DMAError+0x24>

080129f0 <HAL_UART_IRQHandler>:
{
 80129f0:	b510      	push	{r4, lr}
 80129f2:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80129f4:	6802      	ldr	r2, [r0, #0]
 80129f6:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80129f8:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80129fa:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 80129fc:	f013 000f 	ands.w	r0, r3, #15
 8012a00:	d105      	bne.n	8012a0e <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012a02:	f013 0f20 	tst.w	r3, #32
 8012a06:	d002      	beq.n	8012a0e <HAL_UART_IRQHandler+0x1e>
 8012a08:	f011 0f20 	tst.w	r1, #32
 8012a0c:	d153      	bne.n	8012ab6 <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012a0e:	2800      	cmp	r0, #0
 8012a10:	d067      	beq.n	8012ae2 <HAL_UART_IRQHandler+0xf2>
 8012a12:	f012 0201 	ands.w	r2, r2, #1
 8012a16:	d102      	bne.n	8012a1e <HAL_UART_IRQHandler+0x2e>
 8012a18:	f411 7f90 	tst.w	r1, #288	; 0x120
 8012a1c:	d061      	beq.n	8012ae2 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012a1e:	f013 0f01 	tst.w	r3, #1
 8012a22:	d006      	beq.n	8012a32 <HAL_UART_IRQHandler+0x42>
 8012a24:	f411 7f80 	tst.w	r1, #256	; 0x100
 8012a28:	d003      	beq.n	8012a32 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012a2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012a2c:	f040 0001 	orr.w	r0, r0, #1
 8012a30:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012a32:	f013 0f04 	tst.w	r3, #4
 8012a36:	d004      	beq.n	8012a42 <HAL_UART_IRQHandler+0x52>
 8012a38:	b11a      	cbz	r2, 8012a42 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a3a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012a3c:	f040 0002 	orr.w	r0, r0, #2
 8012a40:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012a42:	f013 0f02 	tst.w	r3, #2
 8012a46:	d004      	beq.n	8012a52 <HAL_UART_IRQHandler+0x62>
 8012a48:	b11a      	cbz	r2, 8012a52 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a4a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012a4c:	f040 0004 	orr.w	r0, r0, #4
 8012a50:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012a52:	f013 0f08 	tst.w	r3, #8
 8012a56:	d004      	beq.n	8012a62 <HAL_UART_IRQHandler+0x72>
 8012a58:	b11a      	cbz	r2, 8012a62 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012a5a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012a5c:	f042 0208 	orr.w	r2, r2, #8
 8012a60:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012a62:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012a64:	2a00      	cmp	r2, #0
 8012a66:	d048      	beq.n	8012afa <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012a68:	f013 0f20 	tst.w	r3, #32
 8012a6c:	d002      	beq.n	8012a74 <HAL_UART_IRQHandler+0x84>
 8012a6e:	f011 0f20 	tst.w	r1, #32
 8012a72:	d124      	bne.n	8012abe <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012a74:	6823      	ldr	r3, [r4, #0]
 8012a76:	695b      	ldr	r3, [r3, #20]
 8012a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012a7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012a7e:	f012 0f08 	tst.w	r2, #8
 8012a82:	d100      	bne.n	8012a86 <HAL_UART_IRQHandler+0x96>
 8012a84:	b33b      	cbz	r3, 8012ad6 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8012a86:	4620      	mov	r0, r4
 8012a88:	f7ff fbe9 	bl	801225e <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012a8c:	6823      	ldr	r3, [r4, #0]
 8012a8e:	695a      	ldr	r2, [r3, #20]
 8012a90:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012a94:	d01b      	beq.n	8012ace <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012a96:	695a      	ldr	r2, [r3, #20]
 8012a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012a9c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8012a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012aa0:	b18b      	cbz	r3, 8012ac6 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012aa2:	4a1a      	ldr	r2, [pc, #104]	; (8012b0c <HAL_UART_IRQHandler+0x11c>)
 8012aa4:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012aa6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012aa8:	f7fd fe20 	bl	80106ec <HAL_DMA_Abort_IT>
 8012aac:	b328      	cbz	r0, 8012afa <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012aae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012ab0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012ab2:	4798      	blx	r3
 8012ab4:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	f7ff ff23 	bl	8012902 <UART_Receive_IT>
      return;
 8012abc:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8012abe:	4620      	mov	r0, r4
 8012ac0:	f7ff ff1f 	bl	8012902 <UART_Receive_IT>
 8012ac4:	e7d6      	b.n	8012a74 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	f7ff ff65 	bl	8012996 <HAL_UART_ErrorCallback>
 8012acc:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8012ace:	4620      	mov	r0, r4
 8012ad0:	f7ff ff61 	bl	8012996 <HAL_UART_ErrorCallback>
 8012ad4:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	f7ff ff5d 	bl	8012996 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012adc:	2300      	movs	r3, #0
 8012ade:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012ae0:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8012ae2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012ae6:	d002      	beq.n	8012aee <HAL_UART_IRQHandler+0xfe>
 8012ae8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8012aec:	d106      	bne.n	8012afc <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8012aee:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012af2:	d002      	beq.n	8012afa <HAL_UART_IRQHandler+0x10a>
 8012af4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8012af8:	d104      	bne.n	8012b04 <HAL_UART_IRQHandler+0x114>
 8012afa:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8012afc:	4620      	mov	r0, r4
 8012afe:	f7ff fbbc 	bl	801227a <UART_Transmit_IT>
    return;
 8012b02:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8012b04:	4620      	mov	r0, r4
 8012b06:	f7ff fee9 	bl	80128dc <UART_EndTransmit_IT>
    return;
 8012b0a:	e7f6      	b.n	8012afa <HAL_UART_IRQHandler+0x10a>
 8012b0c:	08012b11 	.word	0x08012b11

08012b10 <UART_DMAAbortOnError>:
{
 8012b10:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012b12:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8012b14:	2300      	movs	r3, #0
 8012b16:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8012b18:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8012b1a:	f7ff ff3c 	bl	8012996 <HAL_UART_ErrorCallback>
 8012b1e:	bd08      	pop	{r3, pc}

08012b20 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8012b20:	2884      	cmp	r0, #132	; 0x84
 8012b22:	d001      	beq.n	8012b28 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8012b24:	3003      	adds	r0, #3
 8012b26:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012b28:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8012b2a:	4770      	bx	lr

08012b2c <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b2c:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8012b30:	3000      	adds	r0, #0
 8012b32:	bf18      	it	ne
 8012b34:	2001      	movne	r0, #1
 8012b36:	4770      	bx	lr

08012b38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012b38:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8012b3a:	f001 fbe5 	bl	8014308 <vTaskStartScheduler>
  
  return osOK;
}
 8012b3e:	2000      	movs	r0, #0
 8012b40:	bd08      	pop	{r3, pc}

08012b42 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012b42:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8012b44:	f7ff fff2 	bl	8012b2c <inHandlerMode>
 8012b48:	b910      	cbnz	r0, 8012b50 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 8012b4a:	f001 fc23 	bl	8014394 <xTaskGetTickCount>
  }
}
 8012b4e:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 8012b50:	f001 fc26 	bl	80143a0 <xTaskGetTickCountFromISR>
 8012b54:	bd08      	pop	{r3, pc}

08012b56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012b56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b5a:	b087      	sub	sp, #28
 8012b5c:	4604      	mov	r4, r0
 8012b5e:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012b60:	6945      	ldr	r5, [r0, #20]
 8012b62:	b1bd      	cbz	r5, 8012b94 <osThreadCreate+0x3e>
 8012b64:	6986      	ldr	r6, [r0, #24]
 8012b66:	b1ae      	cbz	r6, 8012b94 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012b68:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012b6c:	f8d0 9000 	ldr.w	r9, [r0]
 8012b70:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8012b74:	f7ff ffd4 	bl	8012b20 <makeFreeRtosPriority>
 8012b78:	6922      	ldr	r2, [r4, #16]
 8012b7a:	9602      	str	r6, [sp, #8]
 8012b7c:	9501      	str	r5, [sp, #4]
 8012b7e:	9000      	str	r0, [sp, #0]
 8012b80:	463b      	mov	r3, r7
 8012b82:	4649      	mov	r1, r9
 8012b84:	4640      	mov	r0, r8
 8012b86:	f001 faf1 	bl	801416c <xTaskCreateStatic>
 8012b8a:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012b8c:	9805      	ldr	r0, [sp, #20]
}
 8012b8e:	b007      	add	sp, #28
 8012b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012b94:	6865      	ldr	r5, [r4, #4]
 8012b96:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012b98:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012b9c:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8012ba0:	f7ff ffbe 	bl	8012b20 <makeFreeRtosPriority>
 8012ba4:	ab05      	add	r3, sp, #20
 8012ba6:	9301      	str	r3, [sp, #4]
 8012ba8:	9000      	str	r0, [sp, #0]
 8012baa:	463b      	mov	r3, r7
 8012bac:	fa1f f288 	uxth.w	r2, r8
 8012bb0:	4631      	mov	r1, r6
 8012bb2:	4628      	mov	r0, r5
 8012bb4:	f001 fb05 	bl	80141c2 <xTaskCreate>
 8012bb8:	2801      	cmp	r0, #1
 8012bba:	d0e7      	beq.n	8012b8c <osThreadCreate+0x36>
      return NULL;
 8012bbc:	2000      	movs	r0, #0
 8012bbe:	e7e6      	b.n	8012b8e <osThreadCreate+0x38>

08012bc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012bc0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	b900      	cbnz	r0, 8012bc8 <osDelay+0x8>
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f001 fcff 	bl	80145cc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012bce:	2000      	movs	r0, #0
 8012bd0:	bd08      	pop	{r3, pc}

08012bd2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012bd2:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012bd4:	6841      	ldr	r1, [r0, #4]
 8012bd6:	b119      	cbz	r1, 8012be0 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012bd8:	2001      	movs	r0, #1
 8012bda:	f000 ff00 	bl	80139de <xQueueCreateMutexStatic>
 8012bde:	bd08      	pop	{r3, pc}
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012be0:	2001      	movs	r0, #1
 8012be2:	f000 fef1 	bl	80139c8 <xQueueCreateMutex>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012be6:	bd08      	pop	{r3, pc}

08012be8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8012be8:	b530      	push	{r4, r5, lr}
 8012bea:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012bec:	2300      	movs	r3, #0
 8012bee:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8012bf0:	b360      	cbz	r0, 8012c4c <osMutexWait+0x64>
 8012bf2:	460c      	mov	r4, r1
 8012bf4:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8012bf6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012bfa:	d00d      	beq.n	8012c18 <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8012bfc:	b901      	cbnz	r1, 8012c00 <osMutexWait+0x18>
  ticks = 0;
 8012bfe:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012c00:	f7ff ff94 	bl	8012b2c <inHandlerMode>
 8012c04:	b1b8      	cbz	r0, 8012c36 <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012c06:	aa01      	add	r2, sp, #4
 8012c08:	2100      	movs	r1, #0
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	f001 f89c 	bl	8013d48 <xQueueReceiveFromISR>
 8012c10:	2801      	cmp	r0, #1
 8012c12:	d004      	beq.n	8012c1e <osMutexWait+0x36>
      return osErrorOS;
 8012c14:	20ff      	movs	r0, #255	; 0xff
 8012c16:	e017      	b.n	8012c48 <osMutexWait+0x60>
    ticks = portMAX_DELAY;
 8012c18:	f04f 34ff 	mov.w	r4, #4294967295
 8012c1c:	e7f0      	b.n	8012c00 <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012c1e:	9b01      	ldr	r3, [sp, #4]
 8012c20:	b1b3      	cbz	r3, 8012c50 <osMutexWait+0x68>
 8012c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c26:	4b0c      	ldr	r3, [pc, #48]	; (8012c58 <osMutexWait+0x70>)
 8012c28:	601a      	str	r2, [r3, #0]
 8012c2a:	f3bf 8f4f 	dsb	sy
 8012c2e:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8012c32:	2000      	movs	r0, #0
 8012c34:	e008      	b.n	8012c48 <osMutexWait+0x60>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8012c36:	2300      	movs	r3, #0
 8012c38:	4622      	mov	r2, r4
 8012c3a:	4619      	mov	r1, r3
 8012c3c:	4628      	mov	r0, r5
 8012c3e:	f000 ffab 	bl	8013b98 <xQueueGenericReceive>
 8012c42:	2801      	cmp	r0, #1
 8012c44:	d006      	beq.n	8012c54 <osMutexWait+0x6c>
    return osErrorOS;
 8012c46:	20ff      	movs	r0, #255	; 0xff
}
 8012c48:	b003      	add	sp, #12
 8012c4a:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8012c4c:	2080      	movs	r0, #128	; 0x80
 8012c4e:	e7fb      	b.n	8012c48 <osMutexWait+0x60>
  return osOK;
 8012c50:	2000      	movs	r0, #0
 8012c52:	e7f9      	b.n	8012c48 <osMutexWait+0x60>
 8012c54:	2000      	movs	r0, #0
 8012c56:	e7f7      	b.n	8012c48 <osMutexWait+0x60>
 8012c58:	e000ed04 	.word	0xe000ed04

08012c5c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8012c5c:	b510      	push	{r4, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8012c62:	2300      	movs	r3, #0
 8012c64:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 8012c66:	f7ff ff61 	bl	8012b2c <inHandlerMode>
 8012c6a:	b1a0      	cbz	r0, 8012c96 <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012c6c:	a901      	add	r1, sp, #4
 8012c6e:	4620      	mov	r0, r4
 8012c70:	f000 ff33 	bl	8013ada <xQueueGiveFromISR>
 8012c74:	2801      	cmp	r0, #1
 8012c76:	d002      	beq.n	8012c7e <osMutexRelease+0x22>
      return osErrorOS;
 8012c78:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8012c7a:	b002      	add	sp, #8
 8012c7c:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8012c7e:	9b01      	ldr	r3, [sp, #4]
 8012c80:	b1ab      	cbz	r3, 8012cae <osMutexRelease+0x52>
 8012c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c86:	4b0b      	ldr	r3, [pc, #44]	; (8012cb4 <osMutexRelease+0x58>)
 8012c88:	601a      	str	r2, [r3, #0]
 8012c8a:	f3bf 8f4f 	dsb	sy
 8012c8e:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8012c92:	2000      	movs	r0, #0
 8012c94:	e7f1      	b.n	8012c7a <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8012c96:	2300      	movs	r3, #0
 8012c98:	461a      	mov	r2, r3
 8012c9a:	4619      	mov	r1, r3
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	f000 fdc3 	bl	8013828 <xQueueGenericSend>
 8012ca2:	2801      	cmp	r0, #1
 8012ca4:	d001      	beq.n	8012caa <osMutexRelease+0x4e>
    result = osErrorOS;
 8012ca6:	20ff      	movs	r0, #255	; 0xff
 8012ca8:	e7e7      	b.n	8012c7a <osMutexRelease+0x1e>
  osStatus result = osOK;
 8012caa:	2000      	movs	r0, #0
 8012cac:	e7e5      	b.n	8012c7a <osMutexRelease+0x1e>
 8012cae:	2000      	movs	r0, #0
 8012cb0:	e7e3      	b.n	8012c7a <osMutexRelease+0x1e>
 8012cb2:	bf00      	nop
 8012cb4:	e000ed04 	.word	0xe000ed04

08012cb8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012cb8:	b510      	push	{r4, lr}
 8012cba:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012cbc:	6843      	ldr	r3, [r0, #4]
 8012cbe:	b163      	cbz	r3, 8012cda <osSemaphoreCreate+0x22>
    if (count == 1) {
 8012cc0:	2901      	cmp	r1, #1
 8012cc2:	d11a      	bne.n	8012cfa <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012cc4:	2203      	movs	r2, #3
 8012cc6:	9200      	str	r2, [sp, #0]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	4611      	mov	r1, r2
 8012ccc:	2001      	movs	r0, #1
 8012cce:	f000 fd34 	bl	801373a <xQueueGenericCreateStatic>
 8012cd2:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8012cd4:	4620      	mov	r0, r4
 8012cd6:	b002      	add	sp, #8
 8012cd8:	bd10      	pop	{r4, pc}
    if (count == 1) {
 8012cda:	2901      	cmp	r1, #1
 8012cdc:	d10f      	bne.n	8012cfe <osSemaphoreCreate+0x46>
      vSemaphoreCreateBinary(sema);
 8012cde:	2203      	movs	r2, #3
 8012ce0:	2100      	movs	r1, #0
 8012ce2:	2001      	movs	r0, #1
 8012ce4:	f000 fd79 	bl	80137da <xQueueGenericCreate>
 8012ce8:	4604      	mov	r4, r0
 8012cea:	2800      	cmp	r0, #0
 8012cec:	d0f2      	beq.n	8012cd4 <osSemaphoreCreate+0x1c>
 8012cee:	2300      	movs	r3, #0
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	f000 fd98 	bl	8013828 <xQueueGenericSend>
 8012cf8:	e7ec      	b.n	8012cd4 <osSemaphoreCreate+0x1c>
      return NULL;
 8012cfa:	2400      	movs	r4, #0
 8012cfc:	e7ea      	b.n	8012cd4 <osSemaphoreCreate+0x1c>
      return NULL;
 8012cfe:	2400      	movs	r4, #0
 8012d00:	e7e8      	b.n	8012cd4 <osSemaphoreCreate+0x1c>
	...

08012d04 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012d04:	b530      	push	{r4, r5, lr}
 8012d06:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012d08:	2300      	movs	r3, #0
 8012d0a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8012d0c:	b360      	cbz	r0, 8012d68 <osSemaphoreWait+0x64>
 8012d0e:	460c      	mov	r4, r1
 8012d10:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8012d12:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012d16:	d00d      	beq.n	8012d34 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8012d18:	b901      	cbnz	r1, 8012d1c <osSemaphoreWait+0x18>
  ticks = 0;
 8012d1a:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012d1c:	f7ff ff06 	bl	8012b2c <inHandlerMode>
 8012d20:	b1b8      	cbz	r0, 8012d52 <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012d22:	aa01      	add	r2, sp, #4
 8012d24:	2100      	movs	r1, #0
 8012d26:	4628      	mov	r0, r5
 8012d28:	f001 f80e 	bl	8013d48 <xQueueReceiveFromISR>
 8012d2c:	2801      	cmp	r0, #1
 8012d2e:	d004      	beq.n	8012d3a <osSemaphoreWait+0x36>
      return osErrorOS;
 8012d30:	20ff      	movs	r0, #255	; 0xff
 8012d32:	e017      	b.n	8012d64 <osSemaphoreWait+0x60>
    ticks = portMAX_DELAY;
 8012d34:	f04f 34ff 	mov.w	r4, #4294967295
 8012d38:	e7f0      	b.n	8012d1c <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012d3a:	9b01      	ldr	r3, [sp, #4]
 8012d3c:	b1b3      	cbz	r3, 8012d6c <osSemaphoreWait+0x68>
 8012d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d42:	4b0c      	ldr	r3, [pc, #48]	; (8012d74 <osSemaphoreWait+0x70>)
 8012d44:	601a      	str	r2, [r3, #0]
 8012d46:	f3bf 8f4f 	dsb	sy
 8012d4a:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8012d4e:	2000      	movs	r0, #0
 8012d50:	e008      	b.n	8012d64 <osSemaphoreWait+0x60>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012d52:	2300      	movs	r3, #0
 8012d54:	4622      	mov	r2, r4
 8012d56:	4619      	mov	r1, r3
 8012d58:	4628      	mov	r0, r5
 8012d5a:	f000 ff1d 	bl	8013b98 <xQueueGenericReceive>
 8012d5e:	2801      	cmp	r0, #1
 8012d60:	d006      	beq.n	8012d70 <osSemaphoreWait+0x6c>
    return osErrorOS;
 8012d62:	20ff      	movs	r0, #255	; 0xff
}
 8012d64:	b003      	add	sp, #12
 8012d66:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8012d68:	2080      	movs	r0, #128	; 0x80
 8012d6a:	e7fb      	b.n	8012d64 <osSemaphoreWait+0x60>
  return osOK;
 8012d6c:	2000      	movs	r0, #0
 8012d6e:	e7f9      	b.n	8012d64 <osSemaphoreWait+0x60>
 8012d70:	2000      	movs	r0, #0
 8012d72:	e7f7      	b.n	8012d64 <osSemaphoreWait+0x60>
 8012d74:	e000ed04 	.word	0xe000ed04

08012d78 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012d78:	b510      	push	{r4, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8012d82:	f7ff fed3 	bl	8012b2c <inHandlerMode>
 8012d86:	b1a0      	cbz	r0, 8012db2 <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012d88:	a901      	add	r1, sp, #4
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f000 fea5 	bl	8013ada <xQueueGiveFromISR>
 8012d90:	2801      	cmp	r0, #1
 8012d92:	d002      	beq.n	8012d9a <osSemaphoreRelease+0x22>
      return osErrorOS;
 8012d94:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 8012d96:	b002      	add	sp, #8
 8012d98:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8012d9a:	9b01      	ldr	r3, [sp, #4]
 8012d9c:	b1ab      	cbz	r3, 8012dca <osSemaphoreRelease+0x52>
 8012d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012da2:	4b0b      	ldr	r3, [pc, #44]	; (8012dd0 <osSemaphoreRelease+0x58>)
 8012da4:	601a      	str	r2, [r3, #0]
 8012da6:	f3bf 8f4f 	dsb	sy
 8012daa:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8012dae:	2000      	movs	r0, #0
 8012db0:	e7f1      	b.n	8012d96 <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012db2:	2300      	movs	r3, #0
 8012db4:	461a      	mov	r2, r3
 8012db6:	4619      	mov	r1, r3
 8012db8:	4620      	mov	r0, r4
 8012dba:	f000 fd35 	bl	8013828 <xQueueGenericSend>
 8012dbe:	2801      	cmp	r0, #1
 8012dc0:	d001      	beq.n	8012dc6 <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8012dc2:	20ff      	movs	r0, #255	; 0xff
 8012dc4:	e7e7      	b.n	8012d96 <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 8012dc6:	2000      	movs	r0, #0
 8012dc8:	e7e5      	b.n	8012d96 <osSemaphoreRelease+0x1e>
 8012dca:	2000      	movs	r0, #0
 8012dcc:	e7e3      	b.n	8012d96 <osSemaphoreRelease+0x1e>
 8012dce:	bf00      	nop
 8012dd0:	e000ed04 	.word	0xe000ed04

08012dd4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012dd4:	b510      	push	{r4, lr}
 8012dd6:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8012dd8:	f7ff fea8 	bl	8012b2c <inHandlerMode>
 8012ddc:	b108      	cbz	r0, 8012de2 <osSemaphoreDelete+0xe>
    return osErrorISR;
 8012dde:	2082      	movs	r0, #130	; 0x82
  }

  vSemaphoreDelete(semaphore_id);

  return osOK; 
}
 8012de0:	bd10      	pop	{r4, pc}
  vSemaphoreDelete(semaphore_id);
 8012de2:	4620      	mov	r0, r4
 8012de4:	f001 f854 	bl	8013e90 <vQueueDelete>
  return osOK; 
 8012de8:	2000      	movs	r0, #0
 8012dea:	bd10      	pop	{r4, pc}

08012dec <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012dec:	b510      	push	{r4, lr}
 8012dee:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012df0:	6882      	ldr	r2, [r0, #8]
 8012df2:	b14a      	cbz	r2, 8012e08 <osMessageCreate+0x1c>
 8012df4:	68c3      	ldr	r3, [r0, #12]
 8012df6:	b13b      	cbz	r3, 8012e08 <osMessageCreate+0x1c>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012df8:	6841      	ldr	r1, [r0, #4]
 8012dfa:	6800      	ldr	r0, [r0, #0]
 8012dfc:	2400      	movs	r4, #0
 8012dfe:	9400      	str	r4, [sp, #0]
 8012e00:	f000 fc9b 	bl	801373a <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012e04:	b002      	add	sp, #8
 8012e06:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012e08:	2200      	movs	r2, #0
 8012e0a:	6841      	ldr	r1, [r0, #4]
 8012e0c:	6800      	ldr	r0, [r0, #0]
 8012e0e:	f000 fce4 	bl	80137da <xQueueGenericCreate>
 8012e12:	e7f7      	b.n	8012e04 <osMessageCreate+0x18>

08012e14 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012e14:	b530      	push	{r4, r5, lr}
 8012e16:	b085      	sub	sp, #20
 8012e18:	4604      	mov	r4, r0
 8012e1a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8012e20:	4615      	mov	r5, r2
 8012e22:	b902      	cbnz	r2, 8012e26 <osMessagePut+0x12>
    ticks = 1;
 8012e24:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8012e26:	f7ff fe81 	bl	8012b2c <inHandlerMode>
 8012e2a:	b1a8      	cbz	r0, 8012e58 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	aa03      	add	r2, sp, #12
 8012e30:	a901      	add	r1, sp, #4
 8012e32:	4620      	mov	r0, r4
 8012e34:	f000 fde2 	bl	80139fc <xQueueGenericSendFromISR>
 8012e38:	2801      	cmp	r0, #1
 8012e3a:	d001      	beq.n	8012e40 <osMessagePut+0x2c>
      return osErrorOS;
 8012e3c:	20ff      	movs	r0, #255	; 0xff
 8012e3e:	e014      	b.n	8012e6a <osMessagePut+0x56>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012e40:	9b03      	ldr	r3, [sp, #12]
 8012e42:	b1a3      	cbz	r3, 8012e6e <osMessagePut+0x5a>
 8012e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e48:	4b0b      	ldr	r3, [pc, #44]	; (8012e78 <osMessagePut+0x64>)
 8012e4a:	601a      	str	r2, [r3, #0]
 8012e4c:	f3bf 8f4f 	dsb	sy
 8012e50:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8012e54:	2000      	movs	r0, #0
 8012e56:	e008      	b.n	8012e6a <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012e58:	2300      	movs	r3, #0
 8012e5a:	462a      	mov	r2, r5
 8012e5c:	a901      	add	r1, sp, #4
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f000 fce2 	bl	8013828 <xQueueGenericSend>
 8012e64:	2801      	cmp	r0, #1
 8012e66:	d004      	beq.n	8012e72 <osMessagePut+0x5e>
      return osErrorOS;
 8012e68:	20ff      	movs	r0, #255	; 0xff
}
 8012e6a:	b005      	add	sp, #20
 8012e6c:	bd30      	pop	{r4, r5, pc}
  return osOK;
 8012e6e:	2000      	movs	r0, #0
 8012e70:	e7fb      	b.n	8012e6a <osMessagePut+0x56>
 8012e72:	2000      	movs	r0, #0
 8012e74:	e7f9      	b.n	8012e6a <osMessagePut+0x56>
 8012e76:	bf00      	nop
 8012e78:	e000ed04 	.word	0xe000ed04

08012e7c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012e7c:	b570      	push	{r4, r5, r6, lr}
 8012e7e:	b084      	sub	sp, #16
 8012e80:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012e82:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8012e84:	2300      	movs	r3, #0
 8012e86:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8012e88:	b1f9      	cbz	r1, 8012eca <osMessageGet+0x4e>
 8012e8a:	460d      	mov	r5, r1
 8012e8c:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8012e92:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012e96:	d021      	beq.n	8012edc <osMessageGet+0x60>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8012e98:	b902      	cbnz	r2, 8012e9c <osMessageGet+0x20>
  ticks = 0;
 8012e9a:	461e      	mov	r6, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012e9c:	f7ff fe46 	bl	8012b2c <inHandlerMode>
 8012ea0:	b310      	cbz	r0, 8012ee8 <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012ea2:	aa03      	add	r2, sp, #12
 8012ea4:	a901      	add	r1, sp, #4
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	f000 ff4e 	bl	8013d48 <xQueueReceiveFromISR>
 8012eac:	2801      	cmp	r0, #1
 8012eae:	d018      	beq.n	8012ee2 <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012eb4:	9b03      	ldr	r3, [sp, #12]
 8012eb6:	b313      	cbz	r3, 8012efe <osMessageGet+0x82>
 8012eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ebc:	4b16      	ldr	r3, [pc, #88]	; (8012f18 <osMessageGet+0x9c>)
 8012ebe:	601a      	str	r2, [r3, #0]
 8012ec0:	f3bf 8f4f 	dsb	sy
 8012ec4:	f3bf 8f6f 	isb	sy
 8012ec8:	e019      	b.n	8012efe <osMessageGet+0x82>
    event.status = osErrorParameter;
 8012eca:	ab04      	add	r3, sp, #16
 8012ecc:	2280      	movs	r2, #128	; 0x80
 8012ece:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8012ed2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012ed6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012eda:	e014      	b.n	8012f06 <osMessageGet+0x8a>
    ticks = portMAX_DELAY;
 8012edc:	f04f 36ff 	mov.w	r6, #4294967295
 8012ee0:	e7dc      	b.n	8012e9c <osMessageGet+0x20>
      event.status = osEventMessage;
 8012ee2:	2310      	movs	r3, #16
 8012ee4:	9300      	str	r3, [sp, #0]
 8012ee6:	e7e5      	b.n	8012eb4 <osMessageGet+0x38>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012ee8:	2300      	movs	r3, #0
 8012eea:	4632      	mov	r2, r6
 8012eec:	a901      	add	r1, sp, #4
 8012eee:	4628      	mov	r0, r5
 8012ef0:	f000 fe52 	bl	8013b98 <xQueueGenericReceive>
 8012ef4:	2801      	cmp	r0, #1
 8012ef6:	d009      	beq.n	8012f0c <osMessageGet+0x90>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012ef8:	b95e      	cbnz	r6, 8012f12 <osMessageGet+0x96>
 8012efa:	2300      	movs	r3, #0
 8012efc:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 8012efe:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 8012f02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012f06:	4620      	mov	r0, r4
 8012f08:	b004      	add	sp, #16
 8012f0a:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8012f0c:	2310      	movs	r3, #16
 8012f0e:	9300      	str	r3, [sp, #0]
 8012f10:	e7f5      	b.n	8012efe <osMessageGet+0x82>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012f12:	2340      	movs	r3, #64	; 0x40
 8012f14:	e7f2      	b.n	8012efc <osMessageGet+0x80>
 8012f16:	bf00      	nop
 8012f18:	e000ed04 	.word	0xe000ed04

08012f1c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8012f1c:	b510      	push	{r4, lr}
 8012f1e:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8012f20:	f7ff fe04 	bl	8012b2c <inHandlerMode>
 8012f24:	b918      	cbnz	r0, 8012f2e <osMessageWaiting+0x12>
    return uxQueueMessagesWaitingFromISR(queue_id);
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8012f26:	4620      	mov	r0, r4
 8012f28:	f000 ff69 	bl	8013dfe <uxQueueMessagesWaiting>
  }
}
 8012f2c:	bd10      	pop	{r4, pc}
    return uxQueueMessagesWaitingFromISR(queue_id);
 8012f2e:	4620      	mov	r0, r4
 8012f30:	f000 ff78 	bl	8013e24 <uxQueueMessagesWaitingFromISR>
 8012f34:	bd10      	pop	{r4, pc}

08012f36 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8012f36:	b510      	push	{r4, lr}
 8012f38:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8012f3a:	f7ff fdf7 	bl	8012b2c <inHandlerMode>
 8012f3e:	b108      	cbz	r0, 8012f44 <osMessageDelete+0xe>
    return osErrorISR;
 8012f40:	2082      	movs	r0, #130	; 0x82
  }

  vQueueDelete(queue_id);

  return osOK; 
}
 8012f42:	bd10      	pop	{r4, pc}
  vQueueDelete(queue_id);
 8012f44:	4620      	mov	r0, r4
 8012f46:	f000 ffa3 	bl	8013e90 <vQueueDelete>
  return osOK; 
 8012f4a:	2000      	movs	r0, #0
 8012f4c:	bd10      	pop	{r4, pc}

08012f4e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f4e:	f100 0308 	add.w	r3, r0, #8
 8012f52:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012f54:	f04f 32ff 	mov.w	r2, #4294967295
 8012f58:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f5a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f5c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	6003      	str	r3, [r0, #0]
 8012f62:	4770      	bx	lr

08012f64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012f64:	2300      	movs	r3, #0
 8012f66:	6103      	str	r3, [r0, #16]
 8012f68:	4770      	bx	lr

08012f6a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8012f6a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012f6c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012f6e:	689a      	ldr	r2, [r3, #8]
 8012f70:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012f72:	689a      	ldr	r2, [r3, #8]
 8012f74:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f76:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012f78:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8012f7a:	6803      	ldr	r3, [r0, #0]
 8012f7c:	3301      	adds	r3, #1
 8012f7e:	6003      	str	r3, [r0, #0]
 8012f80:	4770      	bx	lr

08012f82 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f82:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012f84:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012f86:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012f8a:	d002      	beq.n	8012f92 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f8c:	f100 0208 	add.w	r2, r0, #8
 8012f90:	e002      	b.n	8012f98 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8012f92:	6902      	ldr	r2, [r0, #16]
 8012f94:	e004      	b.n	8012fa0 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f96:	461a      	mov	r2, r3
 8012f98:	6853      	ldr	r3, [r2, #4]
 8012f9a:	681c      	ldr	r4, [r3, #0]
 8012f9c:	42a5      	cmp	r5, r4
 8012f9e:	d2fa      	bcs.n	8012f96 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012fa0:	6853      	ldr	r3, [r2, #4]
 8012fa2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012fa4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012fa6:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8012fa8:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012faa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8012fac:	6803      	ldr	r3, [r0, #0]
 8012fae:	3301      	adds	r3, #1
 8012fb0:	6003      	str	r3, [r0, #0]
}
 8012fb2:	bc30      	pop	{r4, r5}
 8012fb4:	4770      	bx	lr

08012fb6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8012fb6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012fb8:	6842      	ldr	r2, [r0, #4]
 8012fba:	6881      	ldr	r1, [r0, #8]
 8012fbc:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012fbe:	6882      	ldr	r2, [r0, #8]
 8012fc0:	6841      	ldr	r1, [r0, #4]
 8012fc2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012fc4:	685a      	ldr	r2, [r3, #4]
 8012fc6:	4290      	cmp	r0, r2
 8012fc8:	d005      	beq.n	8012fd6 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8012fca:	2200      	movs	r2, #0
 8012fcc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8012fce:	6818      	ldr	r0, [r3, #0]
 8012fd0:	3801      	subs	r0, #1
 8012fd2:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8012fd4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012fd6:	6882      	ldr	r2, [r0, #8]
 8012fd8:	605a      	str	r2, [r3, #4]
 8012fda:	e7f6      	b.n	8012fca <uxListRemove+0x14>

08012fdc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012fdc:	4b0b      	ldr	r3, [pc, #44]	; (801300c <prvTaskExitError+0x30>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fe4:	d008      	beq.n	8012ff8 <prvTaskExitError+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fea:	f383 8811 	msr	BASEPRI, r3
 8012fee:	f3bf 8f6f 	isb	sy
 8012ff2:	f3bf 8f4f 	dsb	sy
 8012ff6:	e7fe      	b.n	8012ff6 <prvTaskExitError+0x1a>
 8012ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ffc:	f383 8811 	msr	BASEPRI, r3
 8013000:	f3bf 8f6f 	isb	sy
 8013004:	f3bf 8f4f 	dsb	sy
 8013008:	e7fe      	b.n	8013008 <prvTaskExitError+0x2c>
 801300a:	bf00      	nop
 801300c:	20000004 	.word	0x20000004

08013010 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8013010:	4806      	ldr	r0, [pc, #24]	; (801302c <prvPortStartFirstTask+0x1c>)
 8013012:	6800      	ldr	r0, [r0, #0]
 8013014:	6800      	ldr	r0, [r0, #0]
 8013016:	f380 8808 	msr	MSP, r0
 801301a:	b662      	cpsie	i
 801301c:	b661      	cpsie	f
 801301e:	f3bf 8f4f 	dsb	sy
 8013022:	f3bf 8f6f 	isb	sy
 8013026:	df00      	svc	0
 8013028:	bf00      	nop
 801302a:	0000      	.short	0x0000
 801302c:	e000ed08 	.word	0xe000ed08

08013030 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013030:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013040 <vPortEnableVFP+0x10>
 8013034:	6801      	ldr	r1, [r0, #0]
 8013036:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801303a:	6001      	str	r1, [r0, #0]
 801303c:	4770      	bx	lr
 801303e:	0000      	.short	0x0000
 8013040:	e000ed88 	.word	0xe000ed88

08013044 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013048:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801304c:	f021 0101 	bic.w	r1, r1, #1
 8013050:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013054:	4b05      	ldr	r3, [pc, #20]	; (801306c <pxPortInitialiseStack+0x28>)
 8013056:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801305a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 801305e:	f06f 0302 	mvn.w	r3, #2
 8013062:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8013066:	3844      	subs	r0, #68	; 0x44
 8013068:	4770      	bx	lr
 801306a:	bf00      	nop
 801306c:	08012fdd 	.word	0x08012fdd

08013070 <SVC_Handler>:
	__asm volatile (
 8013070:	4b07      	ldr	r3, [pc, #28]	; (8013090 <pxCurrentTCBConst2>)
 8013072:	6819      	ldr	r1, [r3, #0]
 8013074:	6808      	ldr	r0, [r1, #0]
 8013076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801307a:	f380 8809 	msr	PSP, r0
 801307e:	f3bf 8f6f 	isb	sy
 8013082:	f04f 0000 	mov.w	r0, #0
 8013086:	f380 8811 	msr	BASEPRI, r0
 801308a:	4770      	bx	lr
 801308c:	f3af 8000 	nop.w

08013090 <pxCurrentTCBConst2>:
 8013090:	20010038 	.word	0x20010038

08013094 <vPortEnterCritical>:
 8013094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013098:	f383 8811 	msr	BASEPRI, r3
 801309c:	f3bf 8f6f 	isb	sy
 80130a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80130a4:	4a0a      	ldr	r2, [pc, #40]	; (80130d0 <vPortEnterCritical+0x3c>)
 80130a6:	6813      	ldr	r3, [r2, #0]
 80130a8:	3301      	adds	r3, #1
 80130aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d10d      	bne.n	80130cc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80130b0:	4b08      	ldr	r3, [pc, #32]	; (80130d4 <vPortEnterCritical+0x40>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80130b8:	d008      	beq.n	80130cc <vPortEnterCritical+0x38>
 80130ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130be:	f383 8811 	msr	BASEPRI, r3
 80130c2:	f3bf 8f6f 	isb	sy
 80130c6:	f3bf 8f4f 	dsb	sy
 80130ca:	e7fe      	b.n	80130ca <vPortEnterCritical+0x36>
 80130cc:	4770      	bx	lr
 80130ce:	bf00      	nop
 80130d0:	20000004 	.word	0x20000004
 80130d4:	e000ed04 	.word	0xe000ed04

080130d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80130d8:	4b09      	ldr	r3, [pc, #36]	; (8013100 <vPortExitCritical+0x28>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	b943      	cbnz	r3, 80130f0 <vPortExitCritical+0x18>
 80130de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e2:	f383 8811 	msr	BASEPRI, r3
 80130e6:	f3bf 8f6f 	isb	sy
 80130ea:	f3bf 8f4f 	dsb	sy
 80130ee:	e7fe      	b.n	80130ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80130f0:	3b01      	subs	r3, #1
 80130f2:	4a03      	ldr	r2, [pc, #12]	; (8013100 <vPortExitCritical+0x28>)
 80130f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80130f6:	b90b      	cbnz	r3, 80130fc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80130f8:	f383 8811 	msr	BASEPRI, r3
 80130fc:	4770      	bx	lr
 80130fe:	bf00      	nop
 8013100:	20000004 	.word	0x20000004
	...

08013110 <PendSV_Handler>:
	__asm volatile
 8013110:	f3ef 8009 	mrs	r0, PSP
 8013114:	f3bf 8f6f 	isb	sy
 8013118:	4b15      	ldr	r3, [pc, #84]	; (8013170 <pxCurrentTCBConst>)
 801311a:	681a      	ldr	r2, [r3, #0]
 801311c:	f01e 0f10 	tst.w	lr, #16
 8013120:	bf08      	it	eq
 8013122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801312a:	6010      	str	r0, [r2, #0]
 801312c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8013130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013134:	f380 8811 	msr	BASEPRI, r0
 8013138:	f3bf 8f4f 	dsb	sy
 801313c:	f3bf 8f6f 	isb	sy
 8013140:	f001 faae 	bl	80146a0 <vTaskSwitchContext>
 8013144:	f04f 0000 	mov.w	r0, #0
 8013148:	f380 8811 	msr	BASEPRI, r0
 801314c:	bc08      	pop	{r3}
 801314e:	6819      	ldr	r1, [r3, #0]
 8013150:	6808      	ldr	r0, [r1, #0]
 8013152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013156:	f01e 0f10 	tst.w	lr, #16
 801315a:	bf08      	it	eq
 801315c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013160:	f380 8809 	msr	PSP, r0
 8013164:	f3bf 8f6f 	isb	sy
 8013168:	4770      	bx	lr
 801316a:	bf00      	nop
 801316c:	f3af 8000 	nop.w

08013170 <pxCurrentTCBConst>:
 8013170:	20010038 	.word	0x20010038

08013174 <SysTick_Handler>:
{
 8013174:	b508      	push	{r3, lr}
	__asm volatile
 8013176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801317a:	f383 8811 	msr	BASEPRI, r3
 801317e:	f3bf 8f6f 	isb	sy
 8013182:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8013186:	f001 f913 	bl	80143b0 <xTaskIncrementTick>
 801318a:	b118      	cbz	r0, 8013194 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801318c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013190:	4b02      	ldr	r3, [pc, #8]	; (801319c <SysTick_Handler+0x28>)
 8013192:	601a      	str	r2, [r3, #0]
	__asm volatile
 8013194:	2300      	movs	r3, #0
 8013196:	f383 8811 	msr	BASEPRI, r3
 801319a:	bd08      	pop	{r3, pc}
 801319c:	e000ed04 	.word	0xe000ed04

080131a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80131a0:	4b06      	ldr	r3, [pc, #24]	; (80131bc <vPortSetupTimerInterrupt+0x1c>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	4a06      	ldr	r2, [pc, #24]	; (80131c0 <vPortSetupTimerInterrupt+0x20>)
 80131a6:	fba2 2303 	umull	r2, r3, r2, r3
 80131aa:	099b      	lsrs	r3, r3, #6
 80131ac:	3b01      	subs	r3, #1
 80131ae:	4a05      	ldr	r2, [pc, #20]	; (80131c4 <vPortSetupTimerInterrupt+0x24>)
 80131b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80131b2:	2207      	movs	r2, #7
 80131b4:	4b04      	ldr	r3, [pc, #16]	; (80131c8 <vPortSetupTimerInterrupt+0x28>)
 80131b6:	601a      	str	r2, [r3, #0]
 80131b8:	4770      	bx	lr
 80131ba:	bf00      	nop
 80131bc:	20000040 	.word	0x20000040
 80131c0:	10624dd3 	.word	0x10624dd3
 80131c4:	e000e014 	.word	0xe000e014
 80131c8:	e000e010 	.word	0xe000e010

080131cc <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80131cc:	4b31      	ldr	r3, [pc, #196]	; (8013294 <xPortStartScheduler+0xc8>)
 80131ce:	681a      	ldr	r2, [r3, #0]
 80131d0:	4b31      	ldr	r3, [pc, #196]	; (8013298 <xPortStartScheduler+0xcc>)
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d01a      	beq.n	801320c <xPortStartScheduler+0x40>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80131d6:	4b2f      	ldr	r3, [pc, #188]	; (8013294 <xPortStartScheduler+0xc8>)
 80131d8:	681a      	ldr	r2, [r3, #0]
 80131da:	4b30      	ldr	r3, [pc, #192]	; (801329c <xPortStartScheduler+0xd0>)
 80131dc:	429a      	cmp	r2, r3
 80131de:	d01e      	beq.n	801321e <xPortStartScheduler+0x52>
{
 80131e0:	b500      	push	{lr}
 80131e2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80131e4:	4b2e      	ldr	r3, [pc, #184]	; (80132a0 <xPortStartScheduler+0xd4>)
 80131e6:	781a      	ldrb	r2, [r3, #0]
 80131e8:	b2d2      	uxtb	r2, r2
 80131ea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80131ec:	22ff      	movs	r2, #255	; 0xff
 80131ee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80131f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80131fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013200:	4a28      	ldr	r2, [pc, #160]	; (80132a4 <xPortStartScheduler+0xd8>)
 8013202:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013204:	2207      	movs	r2, #7
 8013206:	4b28      	ldr	r3, [pc, #160]	; (80132a8 <xPortStartScheduler+0xdc>)
 8013208:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801320a:	e01b      	b.n	8013244 <xPortStartScheduler+0x78>
	__asm volatile
 801320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013210:	f383 8811 	msr	BASEPRI, r3
 8013214:	f3bf 8f6f 	isb	sy
 8013218:	f3bf 8f4f 	dsb	sy
 801321c:	e7fe      	b.n	801321c <xPortStartScheduler+0x50>
 801321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013222:	f383 8811 	msr	BASEPRI, r3
 8013226:	f3bf 8f6f 	isb	sy
 801322a:	f3bf 8f4f 	dsb	sy
 801322e:	e7fe      	b.n	801322e <xPortStartScheduler+0x62>
			ulMaxPRIGROUPValue--;
 8013230:	4a1d      	ldr	r2, [pc, #116]	; (80132a8 <xPortStartScheduler+0xdc>)
 8013232:	6813      	ldr	r3, [r2, #0]
 8013234:	3b01      	subs	r3, #1
 8013236:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013238:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801323c:	005b      	lsls	r3, r3, #1
 801323e:	b2db      	uxtb	r3, r3
 8013240:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013244:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013248:	f013 0f80 	tst.w	r3, #128	; 0x80
 801324c:	d1f0      	bne.n	8013230 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801324e:	4a16      	ldr	r2, [pc, #88]	; (80132a8 <xPortStartScheduler+0xdc>)
 8013250:	6813      	ldr	r3, [r2, #0]
 8013252:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013258:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801325a:	9b01      	ldr	r3, [sp, #4]
 801325c:	b2db      	uxtb	r3, r3
 801325e:	4a10      	ldr	r2, [pc, #64]	; (80132a0 <xPortStartScheduler+0xd4>)
 8013260:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013262:	4b12      	ldr	r3, [pc, #72]	; (80132ac <xPortStartScheduler+0xe0>)
 8013264:	681a      	ldr	r2, [r3, #0]
 8013266:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 801326a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8013272:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8013274:	f7ff ff94 	bl	80131a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8013278:	2200      	movs	r2, #0
 801327a:	4b0d      	ldr	r3, [pc, #52]	; (80132b0 <xPortStartScheduler+0xe4>)
 801327c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 801327e:	f7ff fed7 	bl	8013030 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013282:	4a0c      	ldr	r2, [pc, #48]	; (80132b4 <xPortStartScheduler+0xe8>)
 8013284:	6813      	ldr	r3, [r2, #0]
 8013286:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801328a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 801328c:	f7ff fec0 	bl	8013010 <prvPortStartFirstTask>
	prvTaskExitError();
 8013290:	f7ff fea4 	bl	8012fdc <prvTaskExitError>
 8013294:	e000ed00 	.word	0xe000ed00
 8013298:	410fc271 	.word	0x410fc271
 801329c:	410fc270 	.word	0x410fc270
 80132a0:	e000e400 	.word	0xe000e400
 80132a4:	20000230 	.word	0x20000230
 80132a8:	20000234 	.word	0x20000234
 80132ac:	e000ed20 	.word	0xe000ed20
 80132b0:	20000004 	.word	0x20000004
 80132b4:	e000ef34 	.word	0xe000ef34

080132b8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80132b8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80132bc:	2b0f      	cmp	r3, #15
 80132be:	d90f      	bls.n	80132e0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80132c0:	4a10      	ldr	r2, [pc, #64]	; (8013304 <vPortValidateInterruptPriority+0x4c>)
 80132c2:	5c9b      	ldrb	r3, [r3, r2]
 80132c4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80132c6:	4a10      	ldr	r2, [pc, #64]	; (8013308 <vPortValidateInterruptPriority+0x50>)
 80132c8:	7812      	ldrb	r2, [r2, #0]
 80132ca:	4293      	cmp	r3, r2
 80132cc:	d208      	bcs.n	80132e0 <vPortValidateInterruptPriority+0x28>
 80132ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132d2:	f383 8811 	msr	BASEPRI, r3
 80132d6:	f3bf 8f6f 	isb	sy
 80132da:	f3bf 8f4f 	dsb	sy
 80132de:	e7fe      	b.n	80132de <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80132e0:	4b0a      	ldr	r3, [pc, #40]	; (801330c <vPortValidateInterruptPriority+0x54>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80132e8:	4a09      	ldr	r2, [pc, #36]	; (8013310 <vPortValidateInterruptPriority+0x58>)
 80132ea:	6812      	ldr	r2, [r2, #0]
 80132ec:	4293      	cmp	r3, r2
 80132ee:	d908      	bls.n	8013302 <vPortValidateInterruptPriority+0x4a>
 80132f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132f4:	f383 8811 	msr	BASEPRI, r3
 80132f8:	f3bf 8f6f 	isb	sy
 80132fc:	f3bf 8f4f 	dsb	sy
 8013300:	e7fe      	b.n	8013300 <vPortValidateInterruptPriority+0x48>
 8013302:	4770      	bx	lr
 8013304:	e000e3f0 	.word	0xe000e3f0
 8013308:	20000230 	.word	0x20000230
 801330c:	e000ed0c 	.word	0xe000ed0c
 8013310:	20000234 	.word	0x20000234

08013314 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013314:	4a13      	ldr	r2, [pc, #76]	; (8013364 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013316:	f012 0f07 	tst.w	r2, #7
 801331a:	d01f      	beq.n	801335c <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801331c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801331e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013322:	f5c1 437d 	rsb	r3, r1, #64768	; 0xfd00
 8013326:	33e8      	adds	r3, #232	; 0xe8
 8013328:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801332a:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801332c:	480e      	ldr	r0, [pc, #56]	; (8013368 <prvHeapInit+0x54>)
 801332e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013330:	2100      	movs	r1, #0
 8013332:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013334:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8013336:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013338:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801333c:	480b      	ldr	r0, [pc, #44]	; (801336c <prvHeapInit+0x58>)
 801333e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8013340:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013342:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013344:	1a99      	subs	r1, r3, r2
 8013346:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013348:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801334a:	4b09      	ldr	r3, [pc, #36]	; (8013370 <prvHeapInit+0x5c>)
 801334c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801334e:	4b09      	ldr	r3, [pc, #36]	; (8013374 <prvHeapInit+0x60>)
 8013350:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013352:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013356:	4b08      	ldr	r3, [pc, #32]	; (8013378 <prvHeapInit+0x64>)
 8013358:	601a      	str	r2, [r3, #0]
 801335a:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801335c:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8013360:	e7e4      	b.n	801332c <prvHeapInit+0x18>
 8013362:	bf00      	nop
 8013364:	2000023c 	.word	0x2000023c
 8013368:	20010030 	.word	0x20010030
 801336c:	20000238 	.word	0x20000238
 8013370:	2001002c 	.word	0x2001002c
 8013374:	20010028 	.word	0x20010028
 8013378:	20010024 	.word	0x20010024

0801337c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801337c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801337e:	4b13      	ldr	r3, [pc, #76]	; (80133cc <prvInsertBlockIntoFreeList+0x50>)
 8013380:	681a      	ldr	r2, [r3, #0]
 8013382:	4282      	cmp	r2, r0
 8013384:	d31b      	bcc.n	80133be <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013386:	6859      	ldr	r1, [r3, #4]
 8013388:	185c      	adds	r4, r3, r1
 801338a:	42a0      	cmp	r0, r4
 801338c:	d103      	bne.n	8013396 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801338e:	6840      	ldr	r0, [r0, #4]
 8013390:	4401      	add	r1, r0
 8013392:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013394:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013396:	6841      	ldr	r1, [r0, #4]
 8013398:	1844      	adds	r4, r0, r1
 801339a:	42a2      	cmp	r2, r4
 801339c:	d113      	bne.n	80133c6 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801339e:	4c0c      	ldr	r4, [pc, #48]	; (80133d0 <prvInsertBlockIntoFreeList+0x54>)
 80133a0:	6824      	ldr	r4, [r4, #0]
 80133a2:	42a2      	cmp	r2, r4
 80133a4:	d00d      	beq.n	80133c2 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80133a6:	6852      	ldr	r2, [r2, #4]
 80133a8:	4411      	add	r1, r2
 80133aa:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	6812      	ldr	r2, [r2, #0]
 80133b0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80133b2:	4298      	cmp	r0, r3
 80133b4:	d000      	beq.n	80133b8 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80133b6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133bc:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80133be:	4613      	mov	r3, r2
 80133c0:	e7de      	b.n	8013380 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80133c2:	6004      	str	r4, [r0, #0]
 80133c4:	e7f5      	b.n	80133b2 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80133c6:	6002      	str	r2, [r0, #0]
 80133c8:	e7f3      	b.n	80133b2 <prvInsertBlockIntoFreeList+0x36>
 80133ca:	bf00      	nop
 80133cc:	20010030 	.word	0x20010030
 80133d0:	20000238 	.word	0x20000238

080133d4 <pvPortMalloc>:
{
 80133d4:	b570      	push	{r4, r5, r6, lr}
 80133d6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80133d8:	f000 ffd4 	bl	8014384 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80133dc:	4b3a      	ldr	r3, [pc, #232]	; (80134c8 <pvPortMalloc+0xf4>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	b1bb      	cbz	r3, 8013412 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80133e2:	4b3a      	ldr	r3, [pc, #232]	; (80134cc <pvPortMalloc+0xf8>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	421c      	tst	r4, r3
 80133e8:	d163      	bne.n	80134b2 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 80133ea:	b1ac      	cbz	r4, 8013418 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 80133ec:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80133ee:	f014 0f07 	tst.w	r4, #7
 80133f2:	d011      	beq.n	8013418 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80133f4:	f024 0407 	bic.w	r4, r4, #7
 80133f8:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80133fa:	f004 0307 	and.w	r3, r4, #7
 80133fe:	b15b      	cbz	r3, 8013418 <pvPortMalloc+0x44>
 8013400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013404:	f383 8811 	msr	BASEPRI, r3
 8013408:	f3bf 8f6f 	isb	sy
 801340c:	f3bf 8f4f 	dsb	sy
 8013410:	e7fe      	b.n	8013410 <pvPortMalloc+0x3c>
			prvHeapInit();
 8013412:	f7ff ff7f 	bl	8013314 <prvHeapInit>
 8013416:	e7e4      	b.n	80133e2 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013418:	2c00      	cmp	r4, #0
 801341a:	d04c      	beq.n	80134b6 <pvPortMalloc+0xe2>
 801341c:	4b2c      	ldr	r3, [pc, #176]	; (80134d0 <pvPortMalloc+0xfc>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	429c      	cmp	r4, r3
 8013422:	d84a      	bhi.n	80134ba <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8013424:	4b2b      	ldr	r3, [pc, #172]	; (80134d4 <pvPortMalloc+0x100>)
 8013426:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013428:	e001      	b.n	801342e <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 801342a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 801342c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801342e:	686a      	ldr	r2, [r5, #4]
 8013430:	4294      	cmp	r4, r2
 8013432:	d902      	bls.n	801343a <pvPortMalloc+0x66>
 8013434:	682a      	ldr	r2, [r5, #0]
 8013436:	2a00      	cmp	r2, #0
 8013438:	d1f7      	bne.n	801342a <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 801343a:	4a23      	ldr	r2, [pc, #140]	; (80134c8 <pvPortMalloc+0xf4>)
 801343c:	6812      	ldr	r2, [r2, #0]
 801343e:	4295      	cmp	r5, r2
 8013440:	d03d      	beq.n	80134be <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013442:	681e      	ldr	r6, [r3, #0]
 8013444:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013446:	682a      	ldr	r2, [r5, #0]
 8013448:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801344a:	686b      	ldr	r3, [r5, #4]
 801344c:	1b1b      	subs	r3, r3, r4
 801344e:	2b10      	cmp	r3, #16
 8013450:	d910      	bls.n	8013474 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013452:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013454:	f010 0f07 	tst.w	r0, #7
 8013458:	d008      	beq.n	801346c <pvPortMalloc+0x98>
 801345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801345e:	f383 8811 	msr	BASEPRI, r3
 8013462:	f3bf 8f6f 	isb	sy
 8013466:	f3bf 8f4f 	dsb	sy
 801346a:	e7fe      	b.n	801346a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801346c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801346e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013470:	f7ff ff84 	bl	801337c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013474:	686a      	ldr	r2, [r5, #4]
 8013476:	4916      	ldr	r1, [pc, #88]	; (80134d0 <pvPortMalloc+0xfc>)
 8013478:	680b      	ldr	r3, [r1, #0]
 801347a:	1a9b      	subs	r3, r3, r2
 801347c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801347e:	4916      	ldr	r1, [pc, #88]	; (80134d8 <pvPortMalloc+0x104>)
 8013480:	6809      	ldr	r1, [r1, #0]
 8013482:	428b      	cmp	r3, r1
 8013484:	d201      	bcs.n	801348a <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013486:	4914      	ldr	r1, [pc, #80]	; (80134d8 <pvPortMalloc+0x104>)
 8013488:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801348a:	4b10      	ldr	r3, [pc, #64]	; (80134cc <pvPortMalloc+0xf8>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	4313      	orrs	r3, r2
 8013490:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013492:	2300      	movs	r3, #0
 8013494:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8013496:	f001 f81b 	bl	80144d0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801349a:	f016 0f07 	tst.w	r6, #7
 801349e:	d010      	beq.n	80134c2 <pvPortMalloc+0xee>
 80134a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a4:	f383 8811 	msr	BASEPRI, r3
 80134a8:	f3bf 8f6f 	isb	sy
 80134ac:	f3bf 8f4f 	dsb	sy
 80134b0:	e7fe      	b.n	80134b0 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 80134b2:	2600      	movs	r6, #0
 80134b4:	e7ef      	b.n	8013496 <pvPortMalloc+0xc2>
 80134b6:	2600      	movs	r6, #0
 80134b8:	e7ed      	b.n	8013496 <pvPortMalloc+0xc2>
 80134ba:	2600      	movs	r6, #0
 80134bc:	e7eb      	b.n	8013496 <pvPortMalloc+0xc2>
 80134be:	2600      	movs	r6, #0
 80134c0:	e7e9      	b.n	8013496 <pvPortMalloc+0xc2>
}
 80134c2:	4630      	mov	r0, r6
 80134c4:	bd70      	pop	{r4, r5, r6, pc}
 80134c6:	bf00      	nop
 80134c8:	20000238 	.word	0x20000238
 80134cc:	20010024 	.word	0x20010024
 80134d0:	20010028 	.word	0x20010028
 80134d4:	20010030 	.word	0x20010030
 80134d8:	2001002c 	.word	0x2001002c

080134dc <vPortFree>:
	if( pv != NULL )
 80134dc:	b380      	cbz	r0, 8013540 <vPortFree+0x64>
{
 80134de:	b538      	push	{r3, r4, r5, lr}
 80134e0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80134e2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80134e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80134ea:	4916      	ldr	r1, [pc, #88]	; (8013544 <vPortFree+0x68>)
 80134ec:	6809      	ldr	r1, [r1, #0]
 80134ee:	420a      	tst	r2, r1
 80134f0:	d108      	bne.n	8013504 <vPortFree+0x28>
 80134f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f6:	f383 8811 	msr	BASEPRI, r3
 80134fa:	f3bf 8f6f 	isb	sy
 80134fe:	f3bf 8f4f 	dsb	sy
 8013502:	e7fe      	b.n	8013502 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013504:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8013508:	b140      	cbz	r0, 801351c <vPortFree+0x40>
 801350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801350e:	f383 8811 	msr	BASEPRI, r3
 8013512:	f3bf 8f6f 	isb	sy
 8013516:	f3bf 8f4f 	dsb	sy
 801351a:	e7fe      	b.n	801351a <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801351c:	ea22 0201 	bic.w	r2, r2, r1
 8013520:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8013524:	f000 ff2e 	bl	8014384 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013528:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801352c:	4a06      	ldr	r2, [pc, #24]	; (8013548 <vPortFree+0x6c>)
 801352e:	6813      	ldr	r3, [r2, #0]
 8013530:	440b      	add	r3, r1
 8013532:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013534:	4628      	mov	r0, r5
 8013536:	f7ff ff21 	bl	801337c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 801353a:	f000 ffc9 	bl	80144d0 <xTaskResumeAll>
 801353e:	bd38      	pop	{r3, r4, r5, pc}
 8013540:	4770      	bx	lr
 8013542:	bf00      	nop
 8013544:	20010024 	.word	0x20010024
 8013548:	20010028 	.word	0x20010028

0801354c <xPortGetFreeHeapSize>:
}
 801354c:	4b01      	ldr	r3, [pc, #4]	; (8013554 <xPortGetFreeHeapSize+0x8>)
 801354e:	6818      	ldr	r0, [r3, #0]
 8013550:	4770      	bx	lr
 8013552:	bf00      	nop
 8013554:	20010028 	.word	0x20010028

08013558 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013558:	b510      	push	{r4, lr}
 801355a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801355c:	f7ff fd9a 	bl	8013094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013560:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013562:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013564:	429a      	cmp	r2, r3
 8013566:	d004      	beq.n	8013572 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8013568:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 801356a:	f7ff fdb5 	bl	80130d8 <vPortExitCritical>

	return xReturn;
}
 801356e:	4620      	mov	r0, r4
 8013570:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8013572:	2401      	movs	r4, #1
 8013574:	e7f9      	b.n	801356a <prvIsQueueFull+0x12>

08013576 <prvIsQueueEmpty>:
{
 8013576:	b510      	push	{r4, lr}
 8013578:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801357a:	f7ff fd8b 	bl	8013094 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801357e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013580:	b123      	cbz	r3, 801358c <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8013582:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8013584:	f7ff fda8 	bl	80130d8 <vPortExitCritical>
}
 8013588:	4620      	mov	r0, r4
 801358a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 801358c:	2401      	movs	r4, #1
 801358e:	e7f9      	b.n	8013584 <prvIsQueueEmpty+0xe>

08013590 <prvCopyDataToQueue>:
{
 8013590:	b570      	push	{r4, r5, r6, lr}
 8013592:	4604      	mov	r4, r0
 8013594:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013596:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013598:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801359a:	b94a      	cbnz	r2, 80135b0 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801359c:	6803      	ldr	r3, [r0, #0]
 801359e:	bb53      	cbnz	r3, 80135f6 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80135a0:	6840      	ldr	r0, [r0, #4]
 80135a2:	f001 f9f5 	bl	8014990 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80135a6:	2300      	movs	r3, #0
 80135a8:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80135aa:	3501      	adds	r5, #1
 80135ac:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80135ae:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80135b0:	b96e      	cbnz	r6, 80135ce <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80135b2:	6880      	ldr	r0, [r0, #8]
 80135b4:	f00d f99f 	bl	80208f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80135b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80135ba:	68a3      	ldr	r3, [r4, #8]
 80135bc:	4413      	add	r3, r2
 80135be:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80135c0:	6862      	ldr	r2, [r4, #4]
 80135c2:	4293      	cmp	r3, r2
 80135c4:	d319      	bcc.n	80135fa <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80135c6:	6823      	ldr	r3, [r4, #0]
 80135c8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80135ca:	2000      	movs	r0, #0
 80135cc:	e7ed      	b.n	80135aa <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135ce:	68c0      	ldr	r0, [r0, #12]
 80135d0:	f00d f991 	bl	80208f6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80135d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80135d6:	425b      	negs	r3, r3
 80135d8:	68e2      	ldr	r2, [r4, #12]
 80135da:	441a      	add	r2, r3
 80135dc:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80135de:	6821      	ldr	r1, [r4, #0]
 80135e0:	428a      	cmp	r2, r1
 80135e2:	d202      	bcs.n	80135ea <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80135e4:	6862      	ldr	r2, [r4, #4]
 80135e6:	4413      	add	r3, r2
 80135e8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80135ea:	2e02      	cmp	r6, #2
 80135ec:	d107      	bne.n	80135fe <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80135ee:	b145      	cbz	r5, 8013602 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80135f0:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80135f2:	2000      	movs	r0, #0
 80135f4:	e7d9      	b.n	80135aa <prvCopyDataToQueue+0x1a>
 80135f6:	2000      	movs	r0, #0
 80135f8:	e7d7      	b.n	80135aa <prvCopyDataToQueue+0x1a>
 80135fa:	2000      	movs	r0, #0
 80135fc:	e7d5      	b.n	80135aa <prvCopyDataToQueue+0x1a>
 80135fe:	2000      	movs	r0, #0
 8013600:	e7d3      	b.n	80135aa <prvCopyDataToQueue+0x1a>
 8013602:	2000      	movs	r0, #0
 8013604:	e7d1      	b.n	80135aa <prvCopyDataToQueue+0x1a>

08013606 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013606:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013608:	b172      	cbz	r2, 8013628 <prvCopyDataFromQueue+0x22>
{
 801360a:	b510      	push	{r4, lr}
 801360c:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801360e:	68c4      	ldr	r4, [r0, #12]
 8013610:	4414      	add	r4, r2
 8013612:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013614:	6840      	ldr	r0, [r0, #4]
 8013616:	4284      	cmp	r4, r0
 8013618:	d301      	bcc.n	801361e <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801361a:	6818      	ldr	r0, [r3, #0]
 801361c:	60d8      	str	r0, [r3, #12]
 801361e:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8013620:	68d9      	ldr	r1, [r3, #12]
 8013622:	f00d f968 	bl	80208f6 <memcpy>
 8013626:	bd10      	pop	{r4, pc}
 8013628:	4770      	bx	lr

0801362a <prvUnlockQueue>:
{
 801362a:	b538      	push	{r3, r4, r5, lr}
 801362c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 801362e:	f7ff fd31 	bl	8013094 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8013632:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8013636:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013638:	e001      	b.n	801363e <prvUnlockQueue+0x14>
			--cTxLock;
 801363a:	3c01      	subs	r4, #1
 801363c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801363e:	2c00      	cmp	r4, #0
 8013640:	dd0a      	ble.n	8013658 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013644:	b143      	cbz	r3, 8013658 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013646:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801364a:	f001 f89d 	bl	8014788 <xTaskRemoveFromEventList>
 801364e:	2800      	cmp	r0, #0
 8013650:	d0f3      	beq.n	801363a <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8013652:	f001 f935 	bl	80148c0 <vTaskMissedYield>
 8013656:	e7f0      	b.n	801363a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8013658:	23ff      	movs	r3, #255	; 0xff
 801365a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 801365e:	f7ff fd3b 	bl	80130d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8013662:	f7ff fd17 	bl	8013094 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8013666:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 801366a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801366c:	e001      	b.n	8013672 <prvUnlockQueue+0x48>
				--cRxLock;
 801366e:	3c01      	subs	r4, #1
 8013670:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013672:	2c00      	cmp	r4, #0
 8013674:	dd0a      	ble.n	801368c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013676:	692b      	ldr	r3, [r5, #16]
 8013678:	b143      	cbz	r3, 801368c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801367a:	f105 0010 	add.w	r0, r5, #16
 801367e:	f001 f883 	bl	8014788 <xTaskRemoveFromEventList>
 8013682:	2800      	cmp	r0, #0
 8013684:	d0f3      	beq.n	801366e <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8013686:	f001 f91b 	bl	80148c0 <vTaskMissedYield>
 801368a:	e7f0      	b.n	801366e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 801368c:	23ff      	movs	r3, #255	; 0xff
 801368e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8013692:	f7ff fd21 	bl	80130d8 <vPortExitCritical>
 8013696:	bd38      	pop	{r3, r4, r5, pc}

08013698 <xQueueGenericReset>:
{
 8013698:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 801369a:	b330      	cbz	r0, 80136ea <xQueueGenericReset+0x52>
 801369c:	4604      	mov	r4, r0
 801369e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80136a0:	f7ff fcf8 	bl	8013094 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80136a4:	6821      	ldr	r1, [r4, #0]
 80136a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80136a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80136aa:	fb03 1002 	mla	r0, r3, r2, r1
 80136ae:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80136b0:	2000      	movs	r0, #0
 80136b2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80136b4:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80136b6:	3a01      	subs	r2, #1
 80136b8:	fb02 1303 	mla	r3, r2, r3, r1
 80136bc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80136be:	23ff      	movs	r3, #255	; 0xff
 80136c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80136c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80136c8:	b9c5      	cbnz	r5, 80136fc <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136ca:	6923      	ldr	r3, [r4, #16]
 80136cc:	b1f3      	cbz	r3, 801370c <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136ce:	f104 0010 	add.w	r0, r4, #16
 80136d2:	f001 f859 	bl	8014788 <xTaskRemoveFromEventList>
 80136d6:	b1c8      	cbz	r0, 801370c <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
 80136d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136dc:	4b0d      	ldr	r3, [pc, #52]	; (8013714 <xQueueGenericReset+0x7c>)
 80136de:	601a      	str	r2, [r3, #0]
 80136e0:	f3bf 8f4f 	dsb	sy
 80136e4:	f3bf 8f6f 	isb	sy
 80136e8:	e010      	b.n	801370c <xQueueGenericReset+0x74>
 80136ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ee:	f383 8811 	msr	BASEPRI, r3
 80136f2:	f3bf 8f6f 	isb	sy
 80136f6:	f3bf 8f4f 	dsb	sy
 80136fa:	e7fe      	b.n	80136fa <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80136fc:	f104 0010 	add.w	r0, r4, #16
 8013700:	f7ff fc25 	bl	8012f4e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013704:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013708:	f7ff fc21 	bl	8012f4e <vListInitialise>
	taskEXIT_CRITICAL();
 801370c:	f7ff fce4 	bl	80130d8 <vPortExitCritical>
}
 8013710:	2001      	movs	r0, #1
 8013712:	bd38      	pop	{r3, r4, r5, pc}
 8013714:	e000ed04 	.word	0xe000ed04

08013718 <prvInitialiseNewQueue>:
{
 8013718:	b538      	push	{r3, r4, r5, lr}
 801371a:	461d      	mov	r5, r3
 801371c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 801371e:	460b      	mov	r3, r1
 8013720:	b149      	cbz	r1, 8013736 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013722:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8013724:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013726:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013728:	2101      	movs	r1, #1
 801372a:	4620      	mov	r0, r4
 801372c:	f7ff ffb4 	bl	8013698 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8013730:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8013734:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013736:	6024      	str	r4, [r4, #0]
 8013738:	e7f4      	b.n	8013724 <prvInitialiseNewQueue+0xc>

0801373a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801373a:	b940      	cbnz	r0, 801374e <xQueueGenericCreateStatic+0x14>
 801373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013740:	f383 8811 	msr	BASEPRI, r3
 8013744:	f3bf 8f6f 	isb	sy
 8013748:	f3bf 8f4f 	dsb	sy
 801374c:	e7fe      	b.n	801374c <xQueueGenericCreateStatic+0x12>
	{
 801374e:	b510      	push	{r4, lr}
 8013750:	b084      	sub	sp, #16
 8013752:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8013754:	b163      	cbz	r3, 8013770 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013756:	b1a2      	cbz	r2, 8013782 <xQueueGenericCreateStatic+0x48>
 8013758:	b1a9      	cbz	r1, 8013786 <xQueueGenericCreateStatic+0x4c>
 801375a:	2001      	movs	r0, #1
 801375c:	b9a8      	cbnz	r0, 801378a <xQueueGenericCreateStatic+0x50>
 801375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013762:	f383 8811 	msr	BASEPRI, r3
 8013766:	f3bf 8f6f 	isb	sy
 801376a:	f3bf 8f4f 	dsb	sy
 801376e:	e7fe      	b.n	801376e <xQueueGenericCreateStatic+0x34>
 8013770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013774:	f383 8811 	msr	BASEPRI, r3
 8013778:	f3bf 8f6f 	isb	sy
 801377c:	f3bf 8f4f 	dsb	sy
 8013780:	e7fe      	b.n	8013780 <xQueueGenericCreateStatic+0x46>
 8013782:	2001      	movs	r0, #1
 8013784:	e7ea      	b.n	801375c <xQueueGenericCreateStatic+0x22>
 8013786:	2000      	movs	r0, #0
 8013788:	e7e8      	b.n	801375c <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801378a:	b90a      	cbnz	r2, 8013790 <xQueueGenericCreateStatic+0x56>
 801378c:	b101      	cbz	r1, 8013790 <xQueueGenericCreateStatic+0x56>
 801378e:	2000      	movs	r0, #0
 8013790:	b940      	cbnz	r0, 80137a4 <xQueueGenericCreateStatic+0x6a>
 8013792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013796:	f383 8811 	msr	BASEPRI, r3
 801379a:	f3bf 8f6f 	isb	sy
 801379e:	f3bf 8f4f 	dsb	sy
 80137a2:	e7fe      	b.n	80137a2 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80137a4:	2050      	movs	r0, #80	; 0x50
 80137a6:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80137a8:	9803      	ldr	r0, [sp, #12]
 80137aa:	2850      	cmp	r0, #80	; 0x50
 80137ac:	d008      	beq.n	80137c0 <xQueueGenericCreateStatic+0x86>
 80137ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b2:	f383 8811 	msr	BASEPRI, r3
 80137b6:	f3bf 8f6f 	isb	sy
 80137ba:	f3bf 8f4f 	dsb	sy
 80137be:	e7fe      	b.n	80137be <xQueueGenericCreateStatic+0x84>
 80137c0:	4620      	mov	r0, r4
 80137c2:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80137c4:	2301      	movs	r3, #1
 80137c6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80137ca:	9400      	str	r4, [sp, #0]
 80137cc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80137d0:	f7ff ffa2 	bl	8013718 <prvInitialiseNewQueue>
	}
 80137d4:	4620      	mov	r0, r4
 80137d6:	b004      	add	sp, #16
 80137d8:	bd10      	pop	{r4, pc}

080137da <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80137da:	b940      	cbnz	r0, 80137ee <xQueueGenericCreate+0x14>
 80137dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e0:	f383 8811 	msr	BASEPRI, r3
 80137e4:	f3bf 8f6f 	isb	sy
 80137e8:	f3bf 8f4f 	dsb	sy
 80137ec:	e7fe      	b.n	80137ec <xQueueGenericCreate+0x12>
	{
 80137ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137f0:	b083      	sub	sp, #12
 80137f2:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 80137f4:	b111      	cbz	r1, 80137fc <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137f6:	fb01 f000 	mul.w	r0, r1, r0
 80137fa:	e000      	b.n	80137fe <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 80137fc:	2000      	movs	r0, #0
 80137fe:	4617      	mov	r7, r2
 8013800:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8013802:	3050      	adds	r0, #80	; 0x50
 8013804:	f7ff fde6 	bl	80133d4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8013808:	4605      	mov	r5, r0
 801380a:	b150      	cbz	r0, 8013822 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801380c:	2300      	movs	r3, #0
 801380e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013812:	9000      	str	r0, [sp, #0]
 8013814:	463b      	mov	r3, r7
 8013816:	f100 0250 	add.w	r2, r0, #80	; 0x50
 801381a:	4621      	mov	r1, r4
 801381c:	4630      	mov	r0, r6
 801381e:	f7ff ff7b 	bl	8013718 <prvInitialiseNewQueue>
	}
 8013822:	4628      	mov	r0, r5
 8013824:	b003      	add	sp, #12
 8013826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013828 <xQueueGenericSend>:
{
 8013828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801382a:	b085      	sub	sp, #20
 801382c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 801382e:	b160      	cbz	r0, 801384a <xQueueGenericSend+0x22>
 8013830:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013832:	b199      	cbz	r1, 801385c <xQueueGenericSend+0x34>
 8013834:	2501      	movs	r5, #1
 8013836:	b9bd      	cbnz	r5, 8013868 <xQueueGenericSend+0x40>
 8013838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801383c:	f383 8811 	msr	BASEPRI, r3
 8013840:	f3bf 8f6f 	isb	sy
 8013844:	f3bf 8f4f 	dsb	sy
 8013848:	e7fe      	b.n	8013848 <xQueueGenericSend+0x20>
 801384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801384e:	f383 8811 	msr	BASEPRI, r3
 8013852:	f3bf 8f6f 	isb	sy
 8013856:	f3bf 8f4f 	dsb	sy
 801385a:	e7fe      	b.n	801385a <xQueueGenericSend+0x32>
 801385c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801385e:	b90a      	cbnz	r2, 8013864 <xQueueGenericSend+0x3c>
 8013860:	2501      	movs	r5, #1
 8013862:	e7e8      	b.n	8013836 <xQueueGenericSend+0xe>
 8013864:	2500      	movs	r5, #0
 8013866:	e7e6      	b.n	8013836 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013868:	2b02      	cmp	r3, #2
 801386a:	d009      	beq.n	8013880 <xQueueGenericSend+0x58>
 801386c:	b96d      	cbnz	r5, 801388a <xQueueGenericSend+0x62>
 801386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013872:	f383 8811 	msr	BASEPRI, r3
 8013876:	f3bf 8f6f 	isb	sy
 801387a:	f3bf 8f4f 	dsb	sy
 801387e:	e7fe      	b.n	801387e <xQueueGenericSend+0x56>
 8013880:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8013882:	2a01      	cmp	r2, #1
 8013884:	d0f2      	beq.n	801386c <xQueueGenericSend+0x44>
 8013886:	2500      	movs	r5, #0
 8013888:	e7f0      	b.n	801386c <xQueueGenericSend+0x44>
 801388a:	461e      	mov	r6, r3
 801388c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801388e:	f001 f81d 	bl	80148cc <xTaskGetSchedulerState>
 8013892:	b910      	cbnz	r0, 801389a <xQueueGenericSend+0x72>
 8013894:	9b01      	ldr	r3, [sp, #4]
 8013896:	b103      	cbz	r3, 801389a <xQueueGenericSend+0x72>
 8013898:	2500      	movs	r5, #0
 801389a:	b945      	cbnz	r5, 80138ae <xQueueGenericSend+0x86>
 801389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a0:	f383 8811 	msr	BASEPRI, r3
 80138a4:	f3bf 8f6f 	isb	sy
 80138a8:	f3bf 8f4f 	dsb	sy
 80138ac:	e7fe      	b.n	80138ac <xQueueGenericSend+0x84>
 80138ae:	2500      	movs	r5, #0
 80138b0:	e02c      	b.n	801390c <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80138b2:	4632      	mov	r2, r6
 80138b4:	4639      	mov	r1, r7
 80138b6:	4620      	mov	r0, r4
 80138b8:	f7ff fe6a 	bl	8013590 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138be:	b18b      	cbz	r3, 80138e4 <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80138c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80138c4:	f000 ff60 	bl	8014788 <xTaskRemoveFromEventList>
 80138c8:	b138      	cbz	r0, 80138da <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 80138ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138ce:	4b37      	ldr	r3, [pc, #220]	; (80139ac <xQueueGenericSend+0x184>)
 80138d0:	601a      	str	r2, [r3, #0]
 80138d2:	f3bf 8f4f 	dsb	sy
 80138d6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80138da:	f7ff fbfd 	bl	80130d8 <vPortExitCritical>
				return pdPASS;
 80138de:	2001      	movs	r0, #1
}
 80138e0:	b005      	add	sp, #20
 80138e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 80138e4:	2800      	cmp	r0, #0
 80138e6:	d0f8      	beq.n	80138da <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 80138e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138ec:	4b2f      	ldr	r3, [pc, #188]	; (80139ac <xQueueGenericSend+0x184>)
 80138ee:	601a      	str	r2, [r3, #0]
 80138f0:	f3bf 8f4f 	dsb	sy
 80138f4:	f3bf 8f6f 	isb	sy
 80138f8:	e7ef      	b.n	80138da <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 80138fa:	f7ff fbed 	bl	80130d8 <vPortExitCritical>
					return errQUEUE_FULL;
 80138fe:	2000      	movs	r0, #0
 8013900:	e7ee      	b.n	80138e0 <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
 8013902:	4620      	mov	r0, r4
 8013904:	f7ff fe91 	bl	801362a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013908:	f000 fde2 	bl	80144d0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 801390c:	f7ff fbc2 	bl	8013094 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013910:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013912:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013914:	429a      	cmp	r2, r3
 8013916:	d3cc      	bcc.n	80138b2 <xQueueGenericSend+0x8a>
 8013918:	2e02      	cmp	r6, #2
 801391a:	d0ca      	beq.n	80138b2 <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801391c:	9b01      	ldr	r3, [sp, #4]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d0eb      	beq.n	80138fa <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
 8013922:	b91d      	cbnz	r5, 801392c <xQueueGenericSend+0x104>
					vTaskSetTimeOutState( &xTimeOut );
 8013924:	a802      	add	r0, sp, #8
 8013926:	f000 ff75 	bl	8014814 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801392a:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 801392c:	f7ff fbd4 	bl	80130d8 <vPortExitCritical>
		vTaskSuspendAll();
 8013930:	f000 fd28 	bl	8014384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013934:	f7ff fbae 	bl	8013094 <vPortEnterCritical>
 8013938:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801393c:	b25b      	sxtb	r3, r3
 801393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013942:	d102      	bne.n	801394a <xQueueGenericSend+0x122>
 8013944:	2300      	movs	r3, #0
 8013946:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801394a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801394e:	b25b      	sxtb	r3, r3
 8013950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013954:	d102      	bne.n	801395c <xQueueGenericSend+0x134>
 8013956:	2300      	movs	r3, #0
 8013958:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801395c:	f7ff fbbc 	bl	80130d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013960:	a901      	add	r1, sp, #4
 8013962:	a802      	add	r0, sp, #8
 8013964:	f000 ff6c 	bl	8014840 <xTaskCheckForTimeOut>
 8013968:	b9c8      	cbnz	r0, 801399e <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801396a:	4620      	mov	r0, r4
 801396c:	f7ff fdf4 	bl	8013558 <prvIsQueueFull>
 8013970:	2800      	cmp	r0, #0
 8013972:	d0c6      	beq.n	8013902 <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013974:	9901      	ldr	r1, [sp, #4]
 8013976:	f104 0010 	add.w	r0, r4, #16
 801397a:	f000 feed 	bl	8014758 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801397e:	4620      	mov	r0, r4
 8013980:	f7ff fe53 	bl	801362a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013984:	f000 fda4 	bl	80144d0 <xTaskResumeAll>
 8013988:	2800      	cmp	r0, #0
 801398a:	d1bf      	bne.n	801390c <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 801398c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013990:	4b06      	ldr	r3, [pc, #24]	; (80139ac <xQueueGenericSend+0x184>)
 8013992:	601a      	str	r2, [r3, #0]
 8013994:	f3bf 8f4f 	dsb	sy
 8013998:	f3bf 8f6f 	isb	sy
 801399c:	e7b6      	b.n	801390c <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 801399e:	4620      	mov	r0, r4
 80139a0:	f7ff fe43 	bl	801362a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80139a4:	f000 fd94 	bl	80144d0 <xTaskResumeAll>
			return errQUEUE_FULL;
 80139a8:	2000      	movs	r0, #0
 80139aa:	e799      	b.n	80138e0 <xQueueGenericSend+0xb8>
 80139ac:	e000ed04 	.word	0xe000ed04

080139b0 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80139b0:	b148      	cbz	r0, 80139c6 <prvInitialiseMutex+0x16>
	{
 80139b2:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80139b4:	2100      	movs	r1, #0
 80139b6:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80139b8:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80139ba:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80139bc:	460b      	mov	r3, r1
 80139be:	460a      	mov	r2, r1
 80139c0:	f7ff ff32 	bl	8013828 <xQueueGenericSend>
 80139c4:	bd08      	pop	{r3, pc}
 80139c6:	4770      	bx	lr

080139c8 <xQueueCreateMutex>:
	{
 80139c8:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80139ca:	4602      	mov	r2, r0
 80139cc:	2100      	movs	r1, #0
 80139ce:	2001      	movs	r0, #1
 80139d0:	f7ff ff03 	bl	80137da <xQueueGenericCreate>
 80139d4:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80139d6:	f7ff ffeb 	bl	80139b0 <prvInitialiseMutex>
	}
 80139da:	4620      	mov	r0, r4
 80139dc:	bd10      	pop	{r4, pc}

080139de <xQueueCreateMutexStatic>:
	{
 80139de:	b510      	push	{r4, lr}
 80139e0:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80139e2:	9000      	str	r0, [sp, #0]
 80139e4:	460b      	mov	r3, r1
 80139e6:	2200      	movs	r2, #0
 80139e8:	4611      	mov	r1, r2
 80139ea:	2001      	movs	r0, #1
 80139ec:	f7ff fea5 	bl	801373a <xQueueGenericCreateStatic>
 80139f0:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80139f2:	f7ff ffdd 	bl	80139b0 <prvInitialiseMutex>
	}
 80139f6:	4620      	mov	r0, r4
 80139f8:	b002      	add	sp, #8
 80139fa:	bd10      	pop	{r4, pc}

080139fc <xQueueGenericSendFromISR>:
{
 80139fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013a00:	b160      	cbz	r0, 8013a1c <xQueueGenericSendFromISR+0x20>
 8013a02:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a04:	b199      	cbz	r1, 8013a2e <xQueueGenericSendFromISR+0x32>
 8013a06:	2001      	movs	r0, #1
 8013a08:	b9b8      	cbnz	r0, 8013a3a <xQueueGenericSendFromISR+0x3e>
 8013a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a0e:	f383 8811 	msr	BASEPRI, r3
 8013a12:	f3bf 8f6f 	isb	sy
 8013a16:	f3bf 8f4f 	dsb	sy
 8013a1a:	e7fe      	b.n	8013a1a <xQueueGenericSendFromISR+0x1e>
 8013a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a20:	f383 8811 	msr	BASEPRI, r3
 8013a24:	f3bf 8f6f 	isb	sy
 8013a28:	f3bf 8f4f 	dsb	sy
 8013a2c:	e7fe      	b.n	8013a2c <xQueueGenericSendFromISR+0x30>
 8013a2e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8013a30:	b908      	cbnz	r0, 8013a36 <xQueueGenericSendFromISR+0x3a>
 8013a32:	2001      	movs	r0, #1
 8013a34:	e7e8      	b.n	8013a08 <xQueueGenericSendFromISR+0xc>
 8013a36:	2000      	movs	r0, #0
 8013a38:	e7e6      	b.n	8013a08 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013a3a:	2b02      	cmp	r3, #2
 8013a3c:	d009      	beq.n	8013a52 <xQueueGenericSendFromISR+0x56>
 8013a3e:	b968      	cbnz	r0, 8013a5c <xQueueGenericSendFromISR+0x60>
 8013a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a44:	f383 8811 	msr	BASEPRI, r3
 8013a48:	f3bf 8f6f 	isb	sy
 8013a4c:	f3bf 8f4f 	dsb	sy
 8013a50:	e7fe      	b.n	8013a50 <xQueueGenericSendFromISR+0x54>
 8013a52:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8013a54:	2d01      	cmp	r5, #1
 8013a56:	d0f2      	beq.n	8013a3e <xQueueGenericSendFromISR+0x42>
 8013a58:	2000      	movs	r0, #0
 8013a5a:	e7f0      	b.n	8013a3e <xQueueGenericSendFromISR+0x42>
 8013a5c:	461f      	mov	r7, r3
 8013a5e:	4690      	mov	r8, r2
 8013a60:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a62:	f7ff fc29 	bl	80132b8 <vPortValidateInterruptPriority>
	__asm volatile
 8013a66:	f3ef 8611 	mrs	r6, BASEPRI
 8013a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a6e:	f383 8811 	msr	BASEPRI, r3
 8013a72:	f3bf 8f6f 	isb	sy
 8013a76:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013a7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013a7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013a7e:	429a      	cmp	r2, r3
 8013a80:	d301      	bcc.n	8013a86 <xQueueGenericSendFromISR+0x8a>
 8013a82:	2f02      	cmp	r7, #2
 8013a84:	d121      	bne.n	8013aca <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013a86:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8013a8a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013a8c:	463a      	mov	r2, r7
 8013a8e:	4649      	mov	r1, r9
 8013a90:	4620      	mov	r0, r4
 8013a92:	f7ff fd7d 	bl	8013590 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8013a96:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013a9a:	d110      	bne.n	8013abe <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a9e:	b1b3      	cbz	r3, 8013ace <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013aa0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013aa4:	f000 fe70 	bl	8014788 <xTaskRemoveFromEventList>
 8013aa8:	b198      	cbz	r0, 8013ad2 <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 8013aaa:	f1b8 0f00 	cmp.w	r8, #0
 8013aae:	d012      	beq.n	8013ad6 <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013ab0:	2001      	movs	r0, #1
 8013ab2:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8013ab6:	f386 8811 	msr	BASEPRI, r6
}
 8013aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013abe:	1c6b      	adds	r3, r5, #1
 8013ac0:	b25b      	sxtb	r3, r3
 8013ac2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8013ac6:	2001      	movs	r0, #1
 8013ac8:	e7f5      	b.n	8013ab6 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8013aca:	2000      	movs	r0, #0
 8013acc:	e7f3      	b.n	8013ab6 <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 8013ace:	2001      	movs	r0, #1
 8013ad0:	e7f1      	b.n	8013ab6 <xQueueGenericSendFromISR+0xba>
 8013ad2:	2001      	movs	r0, #1
 8013ad4:	e7ef      	b.n	8013ab6 <xQueueGenericSendFromISR+0xba>
 8013ad6:	2001      	movs	r0, #1
 8013ad8:	e7ed      	b.n	8013ab6 <xQueueGenericSendFromISR+0xba>

08013ada <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8013ada:	b160      	cbz	r0, 8013af6 <xQueueGiveFromISR+0x1c>
{
 8013adc:	b570      	push	{r4, r5, r6, lr}
 8013ade:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8013ae0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013ae2:	b18b      	cbz	r3, 8013b08 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8013ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ae8:	f383 8811 	msr	BASEPRI, r3
 8013aec:	f3bf 8f6f 	isb	sy
 8013af0:	f3bf 8f4f 	dsb	sy
 8013af4:	e7fe      	b.n	8013af4 <xQueueGiveFromISR+0x1a>
 8013af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013afa:	f383 8811 	msr	BASEPRI, r3
 8013afe:	f3bf 8f6f 	isb	sy
 8013b02:	f3bf 8f4f 	dsb	sy
 8013b06:	e7fe      	b.n	8013b06 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8013b08:	6803      	ldr	r3, [r0, #0]
 8013b0a:	b153      	cbz	r3, 8013b22 <xQueueGiveFromISR+0x48>
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	b973      	cbnz	r3, 8013b2e <xQueueGiveFromISR+0x54>
 8013b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b14:	f383 8811 	msr	BASEPRI, r3
 8013b18:	f3bf 8f6f 	isb	sy
 8013b1c:	f3bf 8f4f 	dsb	sy
 8013b20:	e7fe      	b.n	8013b20 <xQueueGiveFromISR+0x46>
 8013b22:	6843      	ldr	r3, [r0, #4]
 8013b24:	b90b      	cbnz	r3, 8013b2a <xQueueGiveFromISR+0x50>
 8013b26:	2301      	movs	r3, #1
 8013b28:	e7f1      	b.n	8013b0e <xQueueGiveFromISR+0x34>
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	e7ef      	b.n	8013b0e <xQueueGiveFromISR+0x34>
 8013b2e:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b30:	f7ff fbc2 	bl	80132b8 <vPortValidateInterruptPriority>
	__asm volatile
 8013b34:	f3ef 8511 	mrs	r5, BASEPRI
 8013b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b3c:	f383 8811 	msr	BASEPRI, r3
 8013b40:	f3bf 8f6f 	isb	sy
 8013b44:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013b4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d21a      	bcs.n	8013b86 <xQueueGiveFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b50:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013b54:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8013b56:	3201      	adds	r2, #1
 8013b58:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8013b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b5e:	d10c      	bne.n	8013b7a <xQueueGiveFromISR+0xa0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b62:	b193      	cbz	r3, 8013b8a <xQueueGiveFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b64:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013b68:	f000 fe0e 	bl	8014788 <xTaskRemoveFromEventList>
 8013b6c:	b178      	cbz	r0, 8013b8e <xQueueGiveFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 8013b6e:	b186      	cbz	r6, 8013b92 <xQueueGiveFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013b70:	2001      	movs	r0, #1
 8013b72:	6030      	str	r0, [r6, #0]
	__asm volatile
 8013b74:	f385 8811 	msr	BASEPRI, r5
}
 8013b78:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	b25b      	sxtb	r3, r3
 8013b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8013b82:	2001      	movs	r0, #1
 8013b84:	e7f6      	b.n	8013b74 <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
 8013b86:	2000      	movs	r0, #0
 8013b88:	e7f4      	b.n	8013b74 <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
 8013b8a:	2001      	movs	r0, #1
 8013b8c:	e7f2      	b.n	8013b74 <xQueueGiveFromISR+0x9a>
 8013b8e:	2001      	movs	r0, #1
 8013b90:	e7f0      	b.n	8013b74 <xQueueGiveFromISR+0x9a>
 8013b92:	2001      	movs	r0, #1
 8013b94:	e7ee      	b.n	8013b74 <xQueueGiveFromISR+0x9a>
	...

08013b98 <xQueueGenericReceive>:
{
 8013b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b9c:	b084      	sub	sp, #16
 8013b9e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8013ba0:	b160      	cbz	r0, 8013bbc <xQueueGenericReceive+0x24>
 8013ba2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ba4:	b199      	cbz	r1, 8013bce <xQueueGenericReceive+0x36>
 8013ba6:	2501      	movs	r5, #1
 8013ba8:	b9bd      	cbnz	r5, 8013bda <xQueueGenericReceive+0x42>
	__asm volatile
 8013baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bae:	f383 8811 	msr	BASEPRI, r3
 8013bb2:	f3bf 8f6f 	isb	sy
 8013bb6:	f3bf 8f4f 	dsb	sy
 8013bba:	e7fe      	b.n	8013bba <xQueueGenericReceive+0x22>
 8013bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc0:	f383 8811 	msr	BASEPRI, r3
 8013bc4:	f3bf 8f6f 	isb	sy
 8013bc8:	f3bf 8f4f 	dsb	sy
 8013bcc:	e7fe      	b.n	8013bcc <xQueueGenericReceive+0x34>
 8013bce:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013bd0:	b90a      	cbnz	r2, 8013bd6 <xQueueGenericReceive+0x3e>
 8013bd2:	2501      	movs	r5, #1
 8013bd4:	e7e8      	b.n	8013ba8 <xQueueGenericReceive+0x10>
 8013bd6:	2500      	movs	r5, #0
 8013bd8:	e7e6      	b.n	8013ba8 <xQueueGenericReceive+0x10>
 8013bda:	461f      	mov	r7, r3
 8013bdc:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013bde:	f000 fe75 	bl	80148cc <xTaskGetSchedulerState>
 8013be2:	b910      	cbnz	r0, 8013bea <xQueueGenericReceive+0x52>
 8013be4:	9b01      	ldr	r3, [sp, #4]
 8013be6:	b103      	cbz	r3, 8013bea <xQueueGenericReceive+0x52>
 8013be8:	2500      	movs	r5, #0
 8013bea:	b945      	cbnz	r5, 8013bfe <xQueueGenericReceive+0x66>
 8013bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bf0:	f383 8811 	msr	BASEPRI, r3
 8013bf4:	f3bf 8f6f 	isb	sy
 8013bf8:	f3bf 8f4f 	dsb	sy
 8013bfc:	e7fe      	b.n	8013bfc <xQueueGenericReceive+0x64>
 8013bfe:	2600      	movs	r6, #0
 8013c00:	e05d      	b.n	8013cbe <xQueueGenericReceive+0x126>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8013c02:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c04:	4641      	mov	r1, r8
 8013c06:	4620      	mov	r0, r4
 8013c08:	f7ff fcfd 	bl	8013606 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8013c0c:	b9df      	cbnz	r7, 8013c46 <xQueueGenericReceive+0xae>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8013c0e:	3d01      	subs	r5, #1
 8013c10:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c12:	6823      	ldr	r3, [r4, #0]
 8013c14:	b913      	cbnz	r3, 8013c1c <xQueueGenericReceive+0x84>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8013c16:	f000 ff15 	bl	8014a44 <pvTaskIncrementMutexHeldCount>
 8013c1a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c1c:	6923      	ldr	r3, [r4, #16]
 8013c1e:	b163      	cbz	r3, 8013c3a <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c20:	f104 0010 	add.w	r0, r4, #16
 8013c24:	f000 fdb0 	bl	8014788 <xTaskRemoveFromEventList>
 8013c28:	b138      	cbz	r0, 8013c3a <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8013c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c2e:	4b45      	ldr	r3, [pc, #276]	; (8013d44 <xQueueGenericReceive+0x1ac>)
 8013c30:	601a      	str	r2, [r3, #0]
 8013c32:	f3bf 8f4f 	dsb	sy
 8013c36:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8013c3a:	f7ff fa4d 	bl	80130d8 <vPortExitCritical>
				return pdPASS;
 8013c3e:	2001      	movs	r0, #1
}
 8013c40:	b004      	add	sp, #16
 8013c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8013c46:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d0f5      	beq.n	8013c3a <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013c52:	f000 fd99 	bl	8014788 <xTaskRemoveFromEventList>
 8013c56:	2800      	cmp	r0, #0
 8013c58:	d0ef      	beq.n	8013c3a <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8013c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c5e:	4b39      	ldr	r3, [pc, #228]	; (8013d44 <xQueueGenericReceive+0x1ac>)
 8013c60:	601a      	str	r2, [r3, #0]
 8013c62:	f3bf 8f4f 	dsb	sy
 8013c66:	f3bf 8f6f 	isb	sy
 8013c6a:	e7e6      	b.n	8013c3a <xQueueGenericReceive+0xa2>
					taskEXIT_CRITICAL();
 8013c6c:	f7ff fa34 	bl	80130d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8013c70:	2000      	movs	r0, #0
 8013c72:	e7e5      	b.n	8013c40 <xQueueGenericReceive+0xa8>
					vTaskSetTimeOutState( &xTimeOut );
 8013c74:	a802      	add	r0, sp, #8
 8013c76:	f000 fdcd 	bl	8014814 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013c7a:	2601      	movs	r6, #1
 8013c7c:	e029      	b.n	8013cd2 <xQueueGenericReceive+0x13a>
		prvLockQueue( pxQueue );
 8013c7e:	2300      	movs	r3, #0
 8013c80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8013c84:	e031      	b.n	8013cea <xQueueGenericReceive+0x152>
 8013c86:	2300      	movs	r3, #0
 8013c88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013c8c:	e033      	b.n	8013cf6 <xQueueGenericReceive+0x15e>
						taskENTER_CRITICAL();
 8013c8e:	f7ff fa01 	bl	8013094 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8013c92:	6860      	ldr	r0, [r4, #4]
 8013c94:	f000 fe2a 	bl	80148ec <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8013c98:	f7ff fa1e 	bl	80130d8 <vPortExitCritical>
 8013c9c:	e03b      	b.n	8013d16 <xQueueGenericReceive+0x17e>
				prvUnlockQueue( pxQueue );
 8013c9e:	4620      	mov	r0, r4
 8013ca0:	f7ff fcc3 	bl	801362a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013ca4:	f000 fc14 	bl	80144d0 <xTaskResumeAll>
 8013ca8:	e009      	b.n	8013cbe <xQueueGenericReceive+0x126>
			prvUnlockQueue( pxQueue );
 8013caa:	4620      	mov	r0, r4
 8013cac:	f7ff fcbd 	bl	801362a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013cb0:	f000 fc0e 	bl	80144d0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013cb4:	4620      	mov	r0, r4
 8013cb6:	f7ff fc5e 	bl	8013576 <prvIsQueueEmpty>
 8013cba:	2800      	cmp	r0, #0
 8013cbc:	d140      	bne.n	8013d40 <xQueueGenericReceive+0x1a8>
		taskENTER_CRITICAL();
 8013cbe:	f7ff f9e9 	bl	8013094 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013cc2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013cc4:	2d00      	cmp	r5, #0
 8013cc6:	d19c      	bne.n	8013c02 <xQueueGenericReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013cc8:	9b01      	ldr	r3, [sp, #4]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d0ce      	beq.n	8013c6c <xQueueGenericReceive+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8013cce:	2e00      	cmp	r6, #0
 8013cd0:	d0d0      	beq.n	8013c74 <xQueueGenericReceive+0xdc>
		taskEXIT_CRITICAL();
 8013cd2:	f7ff fa01 	bl	80130d8 <vPortExitCritical>
		vTaskSuspendAll();
 8013cd6:	f000 fb55 	bl	8014384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cda:	f7ff f9db 	bl	8013094 <vPortEnterCritical>
 8013cde:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013ce2:	b25b      	sxtb	r3, r3
 8013ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ce8:	d0c9      	beq.n	8013c7e <xQueueGenericReceive+0xe6>
 8013cea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013cee:	b25b      	sxtb	r3, r3
 8013cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cf4:	d0c7      	beq.n	8013c86 <xQueueGenericReceive+0xee>
 8013cf6:	f7ff f9ef 	bl	80130d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013cfa:	a901      	add	r1, sp, #4
 8013cfc:	a802      	add	r0, sp, #8
 8013cfe:	f000 fd9f 	bl	8014840 <xTaskCheckForTimeOut>
 8013d02:	2800      	cmp	r0, #0
 8013d04:	d1d1      	bne.n	8013caa <xQueueGenericReceive+0x112>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d06:	4620      	mov	r0, r4
 8013d08:	f7ff fc35 	bl	8013576 <prvIsQueueEmpty>
 8013d0c:	2800      	cmp	r0, #0
 8013d0e:	d0c6      	beq.n	8013c9e <xQueueGenericReceive+0x106>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d10:	6823      	ldr	r3, [r4, #0]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d0bb      	beq.n	8013c8e <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d16:	9901      	ldr	r1, [sp, #4]
 8013d18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013d1c:	f000 fd1c 	bl	8014758 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d20:	4620      	mov	r0, r4
 8013d22:	f7ff fc82 	bl	801362a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d26:	f000 fbd3 	bl	80144d0 <xTaskResumeAll>
 8013d2a:	2800      	cmp	r0, #0
 8013d2c:	d1c7      	bne.n	8013cbe <xQueueGenericReceive+0x126>
					portYIELD_WITHIN_API();
 8013d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d32:	4b04      	ldr	r3, [pc, #16]	; (8013d44 <xQueueGenericReceive+0x1ac>)
 8013d34:	601a      	str	r2, [r3, #0]
 8013d36:	f3bf 8f4f 	dsb	sy
 8013d3a:	f3bf 8f6f 	isb	sy
 8013d3e:	e7be      	b.n	8013cbe <xQueueGenericReceive+0x126>
				return errQUEUE_EMPTY;
 8013d40:	2000      	movs	r0, #0
 8013d42:	e77d      	b.n	8013c40 <xQueueGenericReceive+0xa8>
 8013d44:	e000ed04 	.word	0xe000ed04

08013d48 <xQueueReceiveFromISR>:
{
 8013d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013d4c:	b160      	cbz	r0, 8013d68 <xQueueReceiveFromISR+0x20>
 8013d4e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013d50:	b199      	cbz	r1, 8013d7a <xQueueReceiveFromISR+0x32>
 8013d52:	2301      	movs	r3, #1
 8013d54:	b9bb      	cbnz	r3, 8013d86 <xQueueReceiveFromISR+0x3e>
 8013d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d5a:	f383 8811 	msr	BASEPRI, r3
 8013d5e:	f3bf 8f6f 	isb	sy
 8013d62:	f3bf 8f4f 	dsb	sy
 8013d66:	e7fe      	b.n	8013d66 <xQueueReceiveFromISR+0x1e>
 8013d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d6c:	f383 8811 	msr	BASEPRI, r3
 8013d70:	f3bf 8f6f 	isb	sy
 8013d74:	f3bf 8f4f 	dsb	sy
 8013d78:	e7fe      	b.n	8013d78 <xQueueReceiveFromISR+0x30>
 8013d7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013d7c:	b90b      	cbnz	r3, 8013d82 <xQueueReceiveFromISR+0x3a>
 8013d7e:	2301      	movs	r3, #1
 8013d80:	e7e8      	b.n	8013d54 <xQueueReceiveFromISR+0xc>
 8013d82:	2300      	movs	r3, #0
 8013d84:	e7e6      	b.n	8013d54 <xQueueReceiveFromISR+0xc>
 8013d86:	4617      	mov	r7, r2
 8013d88:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013d8a:	f7ff fa95 	bl	80132b8 <vPortValidateInterruptPriority>
	__asm volatile
 8013d8e:	f3ef 8611 	mrs	r6, BASEPRI
 8013d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d96:	f383 8811 	msr	BASEPRI, r3
 8013d9a:	f3bf 8f6f 	isb	sy
 8013d9e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013da2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013da6:	f1b8 0f00 	cmp.w	r8, #0
 8013daa:	d020      	beq.n	8013dee <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8013dac:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8013db0:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013db2:	4649      	mov	r1, r9
 8013db4:	4620      	mov	r0, r4
 8013db6:	f7ff fc26 	bl	8013606 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8013dba:	f108 33ff 	add.w	r3, r8, #4294967295
 8013dbe:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8013dc0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013dc4:	d10d      	bne.n	8013de2 <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013dc6:	6923      	ldr	r3, [r4, #16]
 8013dc8:	b19b      	cbz	r3, 8013df2 <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013dca:	f104 0010 	add.w	r0, r4, #16
 8013dce:	f000 fcdb 	bl	8014788 <xTaskRemoveFromEventList>
 8013dd2:	b180      	cbz	r0, 8013df6 <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 8013dd4:	b18f      	cbz	r7, 8013dfa <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013dd6:	2001      	movs	r0, #1
 8013dd8:	6038      	str	r0, [r7, #0]
	__asm volatile
 8013dda:	f386 8811 	msr	BASEPRI, r6
}
 8013dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013de2:	1c6b      	adds	r3, r5, #1
 8013de4:	b25b      	sxtb	r3, r3
 8013de6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8013dea:	2001      	movs	r0, #1
 8013dec:	e7f5      	b.n	8013dda <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 8013dee:	2000      	movs	r0, #0
 8013df0:	e7f3      	b.n	8013dda <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 8013df2:	2001      	movs	r0, #1
 8013df4:	e7f1      	b.n	8013dda <xQueueReceiveFromISR+0x92>
 8013df6:	2001      	movs	r0, #1
 8013df8:	e7ef      	b.n	8013dda <xQueueReceiveFromISR+0x92>
 8013dfa:	2001      	movs	r0, #1
 8013dfc:	e7ed      	b.n	8013dda <xQueueReceiveFromISR+0x92>

08013dfe <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8013dfe:	b940      	cbnz	r0, 8013e12 <uxQueueMessagesWaiting+0x14>
	__asm volatile
 8013e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e04:	f383 8811 	msr	BASEPRI, r3
 8013e08:	f3bf 8f6f 	isb	sy
 8013e0c:	f3bf 8f4f 	dsb	sy
 8013e10:	e7fe      	b.n	8013e10 <uxQueueMessagesWaiting+0x12>
{
 8013e12:	b510      	push	{r4, lr}
 8013e14:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8013e16:	f7ff f93d 	bl	8013094 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013e1a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8013e1c:	f7ff f95c 	bl	80130d8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013e20:	4620      	mov	r0, r4
 8013e22:	bd10      	pop	{r4, pc}

08013e24 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8013e24:	b108      	cbz	r0, 8013e2a <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013e26:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013e28:	4770      	bx	lr
 8013e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e2e:	f383 8811 	msr	BASEPRI, r3
 8013e32:	f3bf 8f6f 	isb	sy
 8013e36:	f3bf 8f4f 	dsb	sy
 8013e3a:	e7fe      	b.n	8013e3a <uxQueueMessagesWaitingFromISR+0x16>

08013e3c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	2b0f      	cmp	r3, #15
 8013e40:	d80c      	bhi.n	8013e5c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013e42:	4a07      	ldr	r2, [pc, #28]	; (8013e60 <vQueueAddToRegistry+0x24>)
 8013e44:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013e48:	b10a      	cbz	r2, 8013e4e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	e7f7      	b.n	8013e3e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013e4e:	4a04      	ldr	r2, [pc, #16]	; (8013e60 <vQueueAddToRegistry+0x24>)
 8013e50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013e54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013e58:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013e5a:	4770      	bx	lr
 8013e5c:	4770      	bx	lr
 8013e5e:	bf00      	nop
 8013e60:	20010fb8 	.word	0x20010fb8

08013e64 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e64:	2300      	movs	r3, #0
 8013e66:	2b0f      	cmp	r3, #15
 8013e68:	d80f      	bhi.n	8013e8a <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013e6a:	4a08      	ldr	r2, [pc, #32]	; (8013e8c <vQueueUnregisterQueue+0x28>)
 8013e6c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013e70:	6852      	ldr	r2, [r2, #4]
 8013e72:	4282      	cmp	r2, r0
 8013e74:	d001      	beq.n	8013e7a <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e76:	3301      	adds	r3, #1
 8013e78:	e7f5      	b.n	8013e66 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013e7a:	4a04      	ldr	r2, [pc, #16]	; (8013e8c <vQueueUnregisterQueue+0x28>)
 8013e7c:	2100      	movs	r1, #0
 8013e7e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013e82:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013e86:	6059      	str	r1, [r3, #4]
				break;
 8013e88:	4770      	bx	lr
 8013e8a:	4770      	bx	lr
 8013e8c:	20010fb8 	.word	0x20010fb8

08013e90 <vQueueDelete>:
	configASSERT( pxQueue );
 8013e90:	b150      	cbz	r0, 8013ea8 <vQueueDelete+0x18>
{
 8013e92:	b510      	push	{r4, lr}
 8013e94:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8013e96:	f7ff ffe5 	bl	8013e64 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013e9a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013e9e:	b913      	cbnz	r3, 8013ea6 <vQueueDelete+0x16>
			vPortFree( pxQueue );
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	f7ff fb1b 	bl	80134dc <vPortFree>
 8013ea6:	bd10      	pop	{r4, pc}
 8013ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eac:	f383 8811 	msr	BASEPRI, r3
 8013eb0:	f3bf 8f6f 	isb	sy
 8013eb4:	f3bf 8f4f 	dsb	sy
 8013eb8:	e7fe      	b.n	8013eb8 <vQueueDelete+0x28>
	...

08013ebc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ebc:	4b0a      	ldr	r3, [pc, #40]	; (8013ee8 <prvResetNextTaskUnblockTime+0x2c>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	b94b      	cbnz	r3, 8013ed8 <prvResetNextTaskUnblockTime+0x1c>
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	b94b      	cbnz	r3, 8013edc <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013ec8:	4b07      	ldr	r3, [pc, #28]	; (8013ee8 <prvResetNextTaskUnblockTime+0x2c>)
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	68db      	ldr	r3, [r3, #12]
 8013ece:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013ed0:	685a      	ldr	r2, [r3, #4]
 8013ed2:	4b06      	ldr	r3, [pc, #24]	; (8013eec <prvResetNextTaskUnblockTime+0x30>)
 8013ed4:	601a      	str	r2, [r3, #0]
 8013ed6:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ed8:	2300      	movs	r3, #0
 8013eda:	e7f4      	b.n	8013ec6 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8013edc:	f04f 32ff 	mov.w	r2, #4294967295
 8013ee0:	4b02      	ldr	r3, [pc, #8]	; (8013eec <prvResetNextTaskUnblockTime+0x30>)
 8013ee2:	601a      	str	r2, [r3, #0]
 8013ee4:	4770      	bx	lr
 8013ee6:	bf00      	nop
 8013ee8:	2001003c 	.word	0x2001003c
 8013eec:	20010114 	.word	0x20010114

08013ef0 <prvInitialiseNewTask>:
{
 8013ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ef4:	4681      	mov	r9, r0
 8013ef6:	460d      	mov	r5, r1
 8013ef8:	4617      	mov	r7, r2
 8013efa:	469a      	mov	sl, r3
 8013efc:	9e08      	ldr	r6, [sp, #32]
 8013efe:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8013f02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013f04:	0092      	lsls	r2, r2, #2
 8013f06:	21a5      	movs	r1, #165	; 0xa5
 8013f08:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013f0a:	f00c fcff 	bl	802090c <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013f0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013f10:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8013f14:	3a01      	subs	r2, #1
 8013f16:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013f1a:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f1e:	2300      	movs	r3, #0
 8013f20:	2b0f      	cmp	r3, #15
 8013f22:	d807      	bhi.n	8013f34 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013f24:	5ce9      	ldrb	r1, [r5, r3]
 8013f26:	18e2      	adds	r2, r4, r3
 8013f28:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8013f2c:	5cea      	ldrb	r2, [r5, r3]
 8013f2e:	b10a      	cbz	r2, 8013f34 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f30:	3301      	adds	r3, #1
 8013f32:	e7f5      	b.n	8013f20 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013f34:	2300      	movs	r3, #0
 8013f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013f3a:	2e06      	cmp	r6, #6
 8013f3c:	d900      	bls.n	8013f40 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013f3e:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8013f40:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8013f42:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013f44:	2500      	movs	r5, #0
 8013f46:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013f48:	1d20      	adds	r0, r4, #4
 8013f4a:	f7ff f80b 	bl	8012f64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013f4e:	f104 0018 	add.w	r0, r4, #24
 8013f52:	f7ff f807 	bl	8012f64 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013f56:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f58:	f1c6 0607 	rsb	r6, r6, #7
 8013f5c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013f5e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013f60:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8013f62:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013f64:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013f68:	4652      	mov	r2, sl
 8013f6a:	4649      	mov	r1, r9
 8013f6c:	4638      	mov	r0, r7
 8013f6e:	f7ff f869 	bl	8013044 <pxPortInitialiseStack>
 8013f72:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8013f74:	f1b8 0f00 	cmp.w	r8, #0
 8013f78:	d001      	beq.n	8013f7e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013f7a:	f8c8 4000 	str.w	r4, [r8]
 8013f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08013f84 <prvInitialiseTaskLists>:
{
 8013f84:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013f86:	2400      	movs	r4, #0
 8013f88:	e007      	b.n	8013f9a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013f8a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8013f8e:	0093      	lsls	r3, r2, #2
 8013f90:	480e      	ldr	r0, [pc, #56]	; (8013fcc <prvInitialiseTaskLists+0x48>)
 8013f92:	4418      	add	r0, r3
 8013f94:	f7fe ffdb 	bl	8012f4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013f98:	3401      	adds	r4, #1
 8013f9a:	2c06      	cmp	r4, #6
 8013f9c:	d9f5      	bls.n	8013f8a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8013f9e:	4d0c      	ldr	r5, [pc, #48]	; (8013fd0 <prvInitialiseTaskLists+0x4c>)
 8013fa0:	4628      	mov	r0, r5
 8013fa2:	f7fe ffd4 	bl	8012f4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013fa6:	4c0b      	ldr	r4, [pc, #44]	; (8013fd4 <prvInitialiseTaskLists+0x50>)
 8013fa8:	4620      	mov	r0, r4
 8013faa:	f7fe ffd0 	bl	8012f4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013fae:	480a      	ldr	r0, [pc, #40]	; (8013fd8 <prvInitialiseTaskLists+0x54>)
 8013fb0:	f7fe ffcd 	bl	8012f4e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8013fb4:	4809      	ldr	r0, [pc, #36]	; (8013fdc <prvInitialiseTaskLists+0x58>)
 8013fb6:	f7fe ffca 	bl	8012f4e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8013fba:	4809      	ldr	r0, [pc, #36]	; (8013fe0 <prvInitialiseTaskLists+0x5c>)
 8013fbc:	f7fe ffc7 	bl	8012f4e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8013fc0:	4b08      	ldr	r3, [pc, #32]	; (8013fe4 <prvInitialiseTaskLists+0x60>)
 8013fc2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013fc4:	4b08      	ldr	r3, [pc, #32]	; (8013fe8 <prvInitialiseTaskLists+0x64>)
 8013fc6:	601c      	str	r4, [r3, #0]
 8013fc8:	bd38      	pop	{r3, r4, r5, pc}
 8013fca:	bf00      	nop
 8013fcc:	20010044 	.word	0x20010044
 8013fd0:	200100ec 	.word	0x200100ec
 8013fd4:	20010100 	.word	0x20010100
 8013fd8:	2001011c 	.word	0x2001011c
 8013fdc:	20010148 	.word	0x20010148
 8013fe0:	20010134 	.word	0x20010134
 8013fe4:	2001003c 	.word	0x2001003c
 8013fe8:	20010040 	.word	0x20010040

08013fec <prvAddNewTaskToReadyList>:
{
 8013fec:	b510      	push	{r4, lr}
 8013fee:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8013ff0:	f7ff f850 	bl	8013094 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8013ff4:	4a21      	ldr	r2, [pc, #132]	; (801407c <prvAddNewTaskToReadyList+0x90>)
 8013ff6:	6813      	ldr	r3, [r2, #0]
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013ffc:	4b20      	ldr	r3, [pc, #128]	; (8014080 <prvAddNewTaskToReadyList+0x94>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d032      	beq.n	801406a <prvAddNewTaskToReadyList+0x7e>
			if( xSchedulerRunning == pdFALSE )
 8014004:	4b1f      	ldr	r3, [pc, #124]	; (8014084 <prvAddNewTaskToReadyList+0x98>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	b93b      	cbnz	r3, 801401a <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801400a:	4b1d      	ldr	r3, [pc, #116]	; (8014080 <prvAddNewTaskToReadyList+0x94>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014010:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014012:	429a      	cmp	r2, r3
 8014014:	d801      	bhi.n	801401a <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 8014016:	4b1a      	ldr	r3, [pc, #104]	; (8014080 <prvAddNewTaskToReadyList+0x94>)
 8014018:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 801401a:	4a1b      	ldr	r2, [pc, #108]	; (8014088 <prvAddNewTaskToReadyList+0x9c>)
 801401c:	6813      	ldr	r3, [r2, #0]
 801401e:	3301      	adds	r3, #1
 8014020:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014022:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8014024:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014026:	2201      	movs	r2, #1
 8014028:	409a      	lsls	r2, r3
 801402a:	4918      	ldr	r1, [pc, #96]	; (801408c <prvAddNewTaskToReadyList+0xa0>)
 801402c:	6808      	ldr	r0, [r1, #0]
 801402e:	4302      	orrs	r2, r0
 8014030:	600a      	str	r2, [r1, #0]
 8014032:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014036:	009a      	lsls	r2, r3, #2
 8014038:	1d21      	adds	r1, r4, #4
 801403a:	4815      	ldr	r0, [pc, #84]	; (8014090 <prvAddNewTaskToReadyList+0xa4>)
 801403c:	4410      	add	r0, r2
 801403e:	f7fe ff94 	bl	8012f6a <vListInsertEnd>
	taskEXIT_CRITICAL();
 8014042:	f7ff f849 	bl	80130d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8014046:	4b0f      	ldr	r3, [pc, #60]	; (8014084 <prvAddNewTaskToReadyList+0x98>)
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	b16b      	cbz	r3, 8014068 <prvAddNewTaskToReadyList+0x7c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801404c:	4b0c      	ldr	r3, [pc, #48]	; (8014080 <prvAddNewTaskToReadyList+0x94>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014052:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014054:	429a      	cmp	r2, r3
 8014056:	d207      	bcs.n	8014068 <prvAddNewTaskToReadyList+0x7c>
			taskYIELD_IF_USING_PREEMPTION();
 8014058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801405c:	4b0d      	ldr	r3, [pc, #52]	; (8014094 <prvAddNewTaskToReadyList+0xa8>)
 801405e:	601a      	str	r2, [r3, #0]
 8014060:	f3bf 8f4f 	dsb	sy
 8014064:	f3bf 8f6f 	isb	sy
 8014068:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 801406a:	4b05      	ldr	r3, [pc, #20]	; (8014080 <prvAddNewTaskToReadyList+0x94>)
 801406c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801406e:	6813      	ldr	r3, [r2, #0]
 8014070:	2b01      	cmp	r3, #1
 8014072:	d1d2      	bne.n	801401a <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 8014074:	f7ff ff86 	bl	8013f84 <prvInitialiseTaskLists>
 8014078:	e7cf      	b.n	801401a <prvAddNewTaskToReadyList+0x2e>
 801407a:	bf00      	nop
 801407c:	200100d4 	.word	0x200100d4
 8014080:	20010038 	.word	0x20010038
 8014084:	20010130 	.word	0x20010130
 8014088:	200100e4 	.word	0x200100e4
 801408c:	200100e8 	.word	0x200100e8
 8014090:	20010044 	.word	0x20010044
 8014094:	e000ed04 	.word	0xe000ed04

08014098 <prvDeleteTCB>:
	{
 8014098:	b510      	push	{r4, lr}
 801409a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801409c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80140a0:	b163      	cbz	r3, 80140bc <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80140a2:	2b01      	cmp	r3, #1
 80140a4:	d011      	beq.n	80140ca <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
 80140a6:	2b02      	cmp	r3, #2
 80140a8:	d012      	beq.n	80140d0 <prvDeleteTCB+0x38>
 80140aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ae:	f383 8811 	msr	BASEPRI, r3
 80140b2:	f3bf 8f6f 	isb	sy
 80140b6:	f3bf 8f4f 	dsb	sy
 80140ba:	e7fe      	b.n	80140ba <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80140bc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80140be:	f7ff fa0d 	bl	80134dc <vPortFree>
				vPortFree( pxTCB );
 80140c2:	4620      	mov	r0, r4
 80140c4:	f7ff fa0a 	bl	80134dc <vPortFree>
 80140c8:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80140ca:	f7ff fa07 	bl	80134dc <vPortFree>
 80140ce:	bd10      	pop	{r4, pc}
 80140d0:	bd10      	pop	{r4, pc}
	...

080140d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80140d4:	b570      	push	{r4, r5, r6, lr}
 80140d6:	4604      	mov	r4, r0
 80140d8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80140da:	4b1d      	ldr	r3, [pc, #116]	; (8014150 <prvAddCurrentTaskToDelayedList+0x7c>)
 80140dc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80140de:	4b1d      	ldr	r3, [pc, #116]	; (8014154 <prvAddCurrentTaskToDelayedList+0x80>)
 80140e0:	6818      	ldr	r0, [r3, #0]
 80140e2:	3004      	adds	r0, #4
 80140e4:	f7fe ff67 	bl	8012fb6 <uxListRemove>
 80140e8:	b950      	cbnz	r0, 8014100 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80140ea:	4b1a      	ldr	r3, [pc, #104]	; (8014154 <prvAddCurrentTaskToDelayedList+0x80>)
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140f0:	2301      	movs	r3, #1
 80140f2:	fa03 f202 	lsl.w	r2, r3, r2
 80140f6:	4918      	ldr	r1, [pc, #96]	; (8014158 <prvAddCurrentTaskToDelayedList+0x84>)
 80140f8:	680b      	ldr	r3, [r1, #0]
 80140fa:	ea23 0302 	bic.w	r3, r3, r2
 80140fe:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014100:	f1b4 3fff 	cmp.w	r4, #4294967295
 8014104:	d013      	beq.n	801412e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014106:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014108:	4b12      	ldr	r3, [pc, #72]	; (8014154 <prvAddCurrentTaskToDelayedList+0x80>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801410e:	42a5      	cmp	r5, r4
 8014110:	d816      	bhi.n	8014140 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014112:	4b12      	ldr	r3, [pc, #72]	; (801415c <prvAddCurrentTaskToDelayedList+0x88>)
 8014114:	6818      	ldr	r0, [r3, #0]
 8014116:	4b0f      	ldr	r3, [pc, #60]	; (8014154 <prvAddCurrentTaskToDelayedList+0x80>)
 8014118:	6819      	ldr	r1, [r3, #0]
 801411a:	3104      	adds	r1, #4
 801411c:	f7fe ff31 	bl	8012f82 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8014120:	4b0f      	ldr	r3, [pc, #60]	; (8014160 <prvAddCurrentTaskToDelayedList+0x8c>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	429c      	cmp	r4, r3
 8014126:	d201      	bcs.n	801412c <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8014128:	4b0d      	ldr	r3, [pc, #52]	; (8014160 <prvAddCurrentTaskToDelayedList+0x8c>)
 801412a:	601c      	str	r4, [r3, #0]
 801412c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801412e:	2e00      	cmp	r6, #0
 8014130:	d0e9      	beq.n	8014106 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014132:	4b08      	ldr	r3, [pc, #32]	; (8014154 <prvAddCurrentTaskToDelayedList+0x80>)
 8014134:	6819      	ldr	r1, [r3, #0]
 8014136:	3104      	adds	r1, #4
 8014138:	480a      	ldr	r0, [pc, #40]	; (8014164 <prvAddCurrentTaskToDelayedList+0x90>)
 801413a:	f7fe ff16 	bl	8012f6a <vListInsertEnd>
 801413e:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014140:	4b09      	ldr	r3, [pc, #36]	; (8014168 <prvAddCurrentTaskToDelayedList+0x94>)
 8014142:	6818      	ldr	r0, [r3, #0]
 8014144:	4b03      	ldr	r3, [pc, #12]	; (8014154 <prvAddCurrentTaskToDelayedList+0x80>)
 8014146:	6819      	ldr	r1, [r3, #0]
 8014148:	3104      	adds	r1, #4
 801414a:	f7fe ff1a 	bl	8012f82 <vListInsert>
 801414e:	bd70      	pop	{r4, r5, r6, pc}
 8014150:	2001015c 	.word	0x2001015c
 8014154:	20010038 	.word	0x20010038
 8014158:	200100e8 	.word	0x200100e8
 801415c:	2001003c 	.word	0x2001003c
 8014160:	20010114 	.word	0x20010114
 8014164:	20010134 	.word	0x20010134
 8014168:	20010040 	.word	0x20010040

0801416c <xTaskCreateStatic>:
	{
 801416c:	b530      	push	{r4, r5, lr}
 801416e:	b087      	sub	sp, #28
 8014170:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014172:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8014174:	b14d      	cbz	r5, 801418a <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8014176:	b98c      	cbnz	r4, 801419c <xTaskCreateStatic+0x30>
 8014178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801417c:	f383 8811 	msr	BASEPRI, r3
 8014180:	f3bf 8f6f 	isb	sy
 8014184:	f3bf 8f4f 	dsb	sy
 8014188:	e7fe      	b.n	8014188 <xTaskCreateStatic+0x1c>
 801418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801418e:	f383 8811 	msr	BASEPRI, r3
 8014192:	f3bf 8f6f 	isb	sy
 8014196:	f3bf 8f4f 	dsb	sy
 801419a:	e7fe      	b.n	801419a <xTaskCreateStatic+0x2e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801419c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801419e:	2502      	movs	r5, #2
 80141a0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80141a4:	2500      	movs	r5, #0
 80141a6:	9503      	str	r5, [sp, #12]
 80141a8:	9402      	str	r4, [sp, #8]
 80141aa:	ad05      	add	r5, sp, #20
 80141ac:	9501      	str	r5, [sp, #4]
 80141ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80141b0:	9500      	str	r5, [sp, #0]
 80141b2:	f7ff fe9d 	bl	8013ef0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80141b6:	4620      	mov	r0, r4
 80141b8:	f7ff ff18 	bl	8013fec <prvAddNewTaskToReadyList>
	}
 80141bc:	9805      	ldr	r0, [sp, #20]
 80141be:	b007      	add	sp, #28
 80141c0:	bd30      	pop	{r4, r5, pc}

080141c2 <xTaskCreate>:
	{
 80141c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141c6:	b085      	sub	sp, #20
 80141c8:	4606      	mov	r6, r0
 80141ca:	460f      	mov	r7, r1
 80141cc:	4615      	mov	r5, r2
 80141ce:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80141d0:	0090      	lsls	r0, r2, #2
 80141d2:	f7ff f8ff 	bl	80133d4 <pvPortMalloc>
			if( pxStack != NULL )
 80141d6:	b310      	cbz	r0, 801421e <xTaskCreate+0x5c>
 80141d8:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80141da:	2060      	movs	r0, #96	; 0x60
 80141dc:	f7ff f8fa 	bl	80133d4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80141e0:	4604      	mov	r4, r0
 80141e2:	b1c0      	cbz	r0, 8014216 <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
 80141e4:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80141e8:	b1dc      	cbz	r4, 8014222 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80141ea:	2300      	movs	r3, #0
 80141ec:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80141f0:	9303      	str	r3, [sp, #12]
 80141f2:	9402      	str	r4, [sp, #8]
 80141f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141f6:	9301      	str	r3, [sp, #4]
 80141f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141fa:	9300      	str	r3, [sp, #0]
 80141fc:	4643      	mov	r3, r8
 80141fe:	462a      	mov	r2, r5
 8014200:	4639      	mov	r1, r7
 8014202:	4630      	mov	r0, r6
 8014204:	f7ff fe74 	bl	8013ef0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014208:	4620      	mov	r0, r4
 801420a:	f7ff feef 	bl	8013fec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801420e:	2001      	movs	r0, #1
	}
 8014210:	b005      	add	sp, #20
 8014212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8014216:	4648      	mov	r0, r9
 8014218:	f7ff f960 	bl	80134dc <vPortFree>
 801421c:	e7e4      	b.n	80141e8 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 801421e:	2400      	movs	r4, #0
 8014220:	e7e2      	b.n	80141e8 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014222:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8014226:	e7f3      	b.n	8014210 <xTaskCreate+0x4e>

08014228 <vTaskDelete>:
	{
 8014228:	b538      	push	{r3, r4, r5, lr}
 801422a:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 801422c:	f7fe ff32 	bl	8013094 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8014230:	2c00      	cmp	r4, #0
 8014232:	d034      	beq.n	801429e <vTaskDelete+0x76>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014234:	1d25      	adds	r5, r4, #4
 8014236:	4628      	mov	r0, r5
 8014238:	f7fe febd 	bl	8012fb6 <uxListRemove>
 801423c:	b970      	cbnz	r0, 801425c <vTaskDelete+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801423e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014240:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8014244:	008b      	lsls	r3, r1, #2
 8014246:	4926      	ldr	r1, [pc, #152]	; (80142e0 <vTaskDelete+0xb8>)
 8014248:	58cb      	ldr	r3, [r1, r3]
 801424a:	b93b      	cbnz	r3, 801425c <vTaskDelete+0x34>
 801424c:	2301      	movs	r3, #1
 801424e:	fa03 f202 	lsl.w	r2, r3, r2
 8014252:	4924      	ldr	r1, [pc, #144]	; (80142e4 <vTaskDelete+0xbc>)
 8014254:	680b      	ldr	r3, [r1, #0]
 8014256:	ea23 0302 	bic.w	r3, r3, r2
 801425a:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801425c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801425e:	b11b      	cbz	r3, 8014268 <vTaskDelete+0x40>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014260:	f104 0018 	add.w	r0, r4, #24
 8014264:	f7fe fea7 	bl	8012fb6 <uxListRemove>
			uxTaskNumber++;
 8014268:	4a1f      	ldr	r2, [pc, #124]	; (80142e8 <vTaskDelete+0xc0>)
 801426a:	6813      	ldr	r3, [r2, #0]
 801426c:	3301      	adds	r3, #1
 801426e:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8014270:	4b1e      	ldr	r3, [pc, #120]	; (80142ec <vTaskDelete+0xc4>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	429c      	cmp	r4, r3
 8014276:	d015      	beq.n	80142a4 <vTaskDelete+0x7c>
				--uxCurrentNumberOfTasks;
 8014278:	4a1d      	ldr	r2, [pc, #116]	; (80142f0 <vTaskDelete+0xc8>)
 801427a:	6813      	ldr	r3, [r2, #0]
 801427c:	3b01      	subs	r3, #1
 801427e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8014280:	4620      	mov	r0, r4
 8014282:	f7ff ff09 	bl	8014098 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 8014286:	f7ff fe19 	bl	8013ebc <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
 801428a:	f7fe ff25 	bl	80130d8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 801428e:	4b19      	ldr	r3, [pc, #100]	; (80142f4 <vTaskDelete+0xcc>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	b11b      	cbz	r3, 801429c <vTaskDelete+0x74>
			if( pxTCB == pxCurrentTCB )
 8014294:	4b15      	ldr	r3, [pc, #84]	; (80142ec <vTaskDelete+0xc4>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	429c      	cmp	r4, r3
 801429a:	d00c      	beq.n	80142b6 <vTaskDelete+0x8e>
 801429c:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801429e:	4b13      	ldr	r3, [pc, #76]	; (80142ec <vTaskDelete+0xc4>)
 80142a0:	681c      	ldr	r4, [r3, #0]
 80142a2:	e7c7      	b.n	8014234 <vTaskDelete+0xc>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80142a4:	4629      	mov	r1, r5
 80142a6:	4814      	ldr	r0, [pc, #80]	; (80142f8 <vTaskDelete+0xd0>)
 80142a8:	f7fe fe5f 	bl	8012f6a <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80142ac:	4a13      	ldr	r2, [pc, #76]	; (80142fc <vTaskDelete+0xd4>)
 80142ae:	6813      	ldr	r3, [r2, #0]
 80142b0:	3301      	adds	r3, #1
 80142b2:	6013      	str	r3, [r2, #0]
 80142b4:	e7e9      	b.n	801428a <vTaskDelete+0x62>
				configASSERT( uxSchedulerSuspended == 0 );
 80142b6:	4b12      	ldr	r3, [pc, #72]	; (8014300 <vTaskDelete+0xd8>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	b143      	cbz	r3, 80142ce <vTaskDelete+0xa6>
 80142bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c0:	f383 8811 	msr	BASEPRI, r3
 80142c4:	f3bf 8f6f 	isb	sy
 80142c8:	f3bf 8f4f 	dsb	sy
 80142cc:	e7fe      	b.n	80142cc <vTaskDelete+0xa4>
				portYIELD_WITHIN_API();
 80142ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142d2:	4b0c      	ldr	r3, [pc, #48]	; (8014304 <vTaskDelete+0xdc>)
 80142d4:	601a      	str	r2, [r3, #0]
 80142d6:	f3bf 8f4f 	dsb	sy
 80142da:	f3bf 8f6f 	isb	sy
	}
 80142de:	e7dd      	b.n	801429c <vTaskDelete+0x74>
 80142e0:	20010044 	.word	0x20010044
 80142e4:	200100e8 	.word	0x200100e8
 80142e8:	200100e4 	.word	0x200100e4
 80142ec:	20010038 	.word	0x20010038
 80142f0:	200100d4 	.word	0x200100d4
 80142f4:	20010130 	.word	0x20010130
 80142f8:	20010148 	.word	0x20010148
 80142fc:	200100d8 	.word	0x200100d8
 8014300:	200100e0 	.word	0x200100e0
 8014304:	e000ed04 	.word	0xe000ed04

08014308 <vTaskStartScheduler>:
{
 8014308:	b510      	push	{r4, lr}
 801430a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801430c:	2400      	movs	r4, #0
 801430e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014310:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014312:	aa07      	add	r2, sp, #28
 8014314:	a906      	add	r1, sp, #24
 8014316:	a805      	add	r0, sp, #20
 8014318:	f009 fa82 	bl	801d820 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801431c:	9b05      	ldr	r3, [sp, #20]
 801431e:	9302      	str	r3, [sp, #8]
 8014320:	9b06      	ldr	r3, [sp, #24]
 8014322:	9301      	str	r3, [sp, #4]
 8014324:	9400      	str	r4, [sp, #0]
 8014326:	4623      	mov	r3, r4
 8014328:	9a07      	ldr	r2, [sp, #28]
 801432a:	4911      	ldr	r1, [pc, #68]	; (8014370 <vTaskStartScheduler+0x68>)
 801432c:	4811      	ldr	r0, [pc, #68]	; (8014374 <vTaskStartScheduler+0x6c>)
 801432e:	f7ff ff1d 	bl	801416c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8014332:	b118      	cbz	r0, 801433c <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 8014334:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 8014336:	b91b      	cbnz	r3, 8014340 <vTaskStartScheduler+0x38>
}
 8014338:	b008      	add	sp, #32
 801433a:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 801433c:	2300      	movs	r3, #0
 801433e:	e7fa      	b.n	8014336 <vTaskStartScheduler+0x2e>
 8014340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014344:	f383 8811 	msr	BASEPRI, r3
 8014348:	f3bf 8f6f 	isb	sy
 801434c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8014350:	f04f 32ff 	mov.w	r2, #4294967295
 8014354:	4b08      	ldr	r3, [pc, #32]	; (8014378 <vTaskStartScheduler+0x70>)
 8014356:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014358:	2201      	movs	r2, #1
 801435a:	4b08      	ldr	r3, [pc, #32]	; (801437c <vTaskStartScheduler+0x74>)
 801435c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801435e:	2200      	movs	r2, #0
 8014360:	4b07      	ldr	r3, [pc, #28]	; (8014380 <vTaskStartScheduler+0x78>)
 8014362:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8014364:	f009 fa44 	bl	801d7f0 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8014368:	f7fe ff30 	bl	80131cc <xPortStartScheduler>
 801436c:	e7e4      	b.n	8014338 <vTaskStartScheduler+0x30>
 801436e:	bf00      	nop
 8014370:	0802143c 	.word	0x0802143c
 8014374:	08014679 	.word	0x08014679
 8014378:	20010114 	.word	0x20010114
 801437c:	20010130 	.word	0x20010130
 8014380:	2001015c 	.word	0x2001015c

08014384 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8014384:	4a02      	ldr	r2, [pc, #8]	; (8014390 <vTaskSuspendAll+0xc>)
 8014386:	6813      	ldr	r3, [r2, #0]
 8014388:	3301      	adds	r3, #1
 801438a:	6013      	str	r3, [r2, #0]
 801438c:	4770      	bx	lr
 801438e:	bf00      	nop
 8014390:	200100e0 	.word	0x200100e0

08014394 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8014394:	4b01      	ldr	r3, [pc, #4]	; (801439c <xTaskGetTickCount+0x8>)
 8014396:	6818      	ldr	r0, [r3, #0]
}
 8014398:	4770      	bx	lr
 801439a:	bf00      	nop
 801439c:	2001015c 	.word	0x2001015c

080143a0 <xTaskGetTickCountFromISR>:
{
 80143a0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80143a2:	f7fe ff89 	bl	80132b8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80143a6:	4b01      	ldr	r3, [pc, #4]	; (80143ac <xTaskGetTickCountFromISR+0xc>)
 80143a8:	6818      	ldr	r0, [r3, #0]
}
 80143aa:	bd08      	pop	{r3, pc}
 80143ac:	2001015c 	.word	0x2001015c

080143b0 <xTaskIncrementTick>:
{
 80143b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143b2:	4b3c      	ldr	r3, [pc, #240]	; (80144a4 <xTaskIncrementTick+0xf4>)
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d168      	bne.n	801448c <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + 1;
 80143ba:	4b3b      	ldr	r3, [pc, #236]	; (80144a8 <xTaskIncrementTick+0xf8>)
 80143bc:	681d      	ldr	r5, [r3, #0]
 80143be:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80143c0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80143c2:	b9c5      	cbnz	r5, 80143f6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80143c4:	4b39      	ldr	r3, [pc, #228]	; (80144ac <xTaskIncrementTick+0xfc>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	b143      	cbz	r3, 80143de <xTaskIncrementTick+0x2e>
 80143cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143d0:	f383 8811 	msr	BASEPRI, r3
 80143d4:	f3bf 8f6f 	isb	sy
 80143d8:	f3bf 8f4f 	dsb	sy
 80143dc:	e7fe      	b.n	80143dc <xTaskIncrementTick+0x2c>
 80143de:	4a33      	ldr	r2, [pc, #204]	; (80144ac <xTaskIncrementTick+0xfc>)
 80143e0:	6811      	ldr	r1, [r2, #0]
 80143e2:	4b33      	ldr	r3, [pc, #204]	; (80144b0 <xTaskIncrementTick+0x100>)
 80143e4:	6818      	ldr	r0, [r3, #0]
 80143e6:	6010      	str	r0, [r2, #0]
 80143e8:	6019      	str	r1, [r3, #0]
 80143ea:	4a32      	ldr	r2, [pc, #200]	; (80144b4 <xTaskIncrementTick+0x104>)
 80143ec:	6813      	ldr	r3, [r2, #0]
 80143ee:	3301      	adds	r3, #1
 80143f0:	6013      	str	r3, [r2, #0]
 80143f2:	f7ff fd63 	bl	8013ebc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80143f6:	4b30      	ldr	r3, [pc, #192]	; (80144b8 <xTaskIncrementTick+0x108>)
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	429d      	cmp	r5, r3
 80143fc:	d23a      	bcs.n	8014474 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 80143fe:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014400:	4b2e      	ldr	r3, [pc, #184]	; (80144bc <xTaskIncrementTick+0x10c>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014406:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801440a:	009a      	lsls	r2, r3, #2
 801440c:	4b2c      	ldr	r3, [pc, #176]	; (80144c0 <xTaskIncrementTick+0x110>)
 801440e:	589b      	ldr	r3, [r3, r2]
 8014410:	2b01      	cmp	r3, #1
 8014412:	d940      	bls.n	8014496 <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 8014414:	2401      	movs	r4, #1
 8014416:	e03e      	b.n	8014496 <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 8014418:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801441a:	4b24      	ldr	r3, [pc, #144]	; (80144ac <xTaskIncrementTick+0xfc>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	b353      	cbz	r3, 8014478 <xTaskIncrementTick+0xc8>
 8014422:	2300      	movs	r3, #0
 8014424:	bb53      	cbnz	r3, 801447c <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014426:	4b21      	ldr	r3, [pc, #132]	; (80144ac <xTaskIncrementTick+0xfc>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	68db      	ldr	r3, [r3, #12]
 801442c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801442e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8014430:	429d      	cmp	r5, r3
 8014432:	d328      	bcc.n	8014486 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014434:	1d37      	adds	r7, r6, #4
 8014436:	4638      	mov	r0, r7
 8014438:	f7fe fdbd 	bl	8012fb6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801443c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 801443e:	b11b      	cbz	r3, 8014448 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014440:	f106 0018 	add.w	r0, r6, #24
 8014444:	f7fe fdb7 	bl	8012fb6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014448:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 801444a:	2201      	movs	r2, #1
 801444c:	409a      	lsls	r2, r3
 801444e:	491d      	ldr	r1, [pc, #116]	; (80144c4 <xTaskIncrementTick+0x114>)
 8014450:	6808      	ldr	r0, [r1, #0]
 8014452:	4302      	orrs	r2, r0
 8014454:	600a      	str	r2, [r1, #0]
 8014456:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801445a:	009a      	lsls	r2, r3, #2
 801445c:	4639      	mov	r1, r7
 801445e:	4818      	ldr	r0, [pc, #96]	; (80144c0 <xTaskIncrementTick+0x110>)
 8014460:	4410      	add	r0, r2
 8014462:	f7fe fd82 	bl	8012f6a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014466:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8014468:	4b14      	ldr	r3, [pc, #80]	; (80144bc <xTaskIncrementTick+0x10c>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801446e:	429a      	cmp	r2, r3
 8014470:	d2d2      	bcs.n	8014418 <xTaskIncrementTick+0x68>
 8014472:	e7d2      	b.n	801441a <xTaskIncrementTick+0x6a>
 8014474:	2400      	movs	r4, #0
 8014476:	e7d0      	b.n	801441a <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014478:	2301      	movs	r3, #1
 801447a:	e7d3      	b.n	8014424 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801447c:	f04f 32ff 	mov.w	r2, #4294967295
 8014480:	4b0d      	ldr	r3, [pc, #52]	; (80144b8 <xTaskIncrementTick+0x108>)
 8014482:	601a      	str	r2, [r3, #0]
					break;
 8014484:	e7bc      	b.n	8014400 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8014486:	4a0c      	ldr	r2, [pc, #48]	; (80144b8 <xTaskIncrementTick+0x108>)
 8014488:	6013      	str	r3, [r2, #0]
						break;
 801448a:	e7b9      	b.n	8014400 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 801448c:	4a0e      	ldr	r2, [pc, #56]	; (80144c8 <xTaskIncrementTick+0x118>)
 801448e:	6813      	ldr	r3, [r2, #0]
 8014490:	3301      	adds	r3, #1
 8014492:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8014494:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8014496:	4b0d      	ldr	r3, [pc, #52]	; (80144cc <xTaskIncrementTick+0x11c>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	b103      	cbz	r3, 801449e <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 801449c:	2401      	movs	r4, #1
}
 801449e:	4620      	mov	r0, r4
 80144a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144a2:	bf00      	nop
 80144a4:	200100e0 	.word	0x200100e0
 80144a8:	2001015c 	.word	0x2001015c
 80144ac:	2001003c 	.word	0x2001003c
 80144b0:	20010040 	.word	0x20010040
 80144b4:	20010118 	.word	0x20010118
 80144b8:	20010114 	.word	0x20010114
 80144bc:	20010038 	.word	0x20010038
 80144c0:	20010044 	.word	0x20010044
 80144c4:	200100e8 	.word	0x200100e8
 80144c8:	200100dc 	.word	0x200100dc
 80144cc:	20010160 	.word	0x20010160

080144d0 <xTaskResumeAll>:
{
 80144d0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80144d2:	4b35      	ldr	r3, [pc, #212]	; (80145a8 <xTaskResumeAll+0xd8>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	b943      	cbnz	r3, 80144ea <xTaskResumeAll+0x1a>
 80144d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144dc:	f383 8811 	msr	BASEPRI, r3
 80144e0:	f3bf 8f6f 	isb	sy
 80144e4:	f3bf 8f4f 	dsb	sy
 80144e8:	e7fe      	b.n	80144e8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80144ea:	f7fe fdd3 	bl	8013094 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80144ee:	4b2e      	ldr	r3, [pc, #184]	; (80145a8 <xTaskResumeAll+0xd8>)
 80144f0:	681a      	ldr	r2, [r3, #0]
 80144f2:	3a01      	subs	r2, #1
 80144f4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d150      	bne.n	801459e <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80144fc:	4b2b      	ldr	r3, [pc, #172]	; (80145ac <xTaskResumeAll+0xdc>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	b923      	cbnz	r3, 801450c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8014502:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8014504:	f7fe fde8 	bl	80130d8 <vPortExitCritical>
}
 8014508:	4620      	mov	r0, r4
 801450a:	bd38      	pop	{r3, r4, r5, pc}
 801450c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801450e:	4b28      	ldr	r3, [pc, #160]	; (80145b0 <xTaskResumeAll+0xe0>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	b31b      	cbz	r3, 801455c <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8014514:	4b26      	ldr	r3, [pc, #152]	; (80145b0 <xTaskResumeAll+0xe0>)
 8014516:	68db      	ldr	r3, [r3, #12]
 8014518:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801451a:	f104 0018 	add.w	r0, r4, #24
 801451e:	f7fe fd4a 	bl	8012fb6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014522:	1d25      	adds	r5, r4, #4
 8014524:	4628      	mov	r0, r5
 8014526:	f7fe fd46 	bl	8012fb6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801452a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801452c:	2201      	movs	r2, #1
 801452e:	409a      	lsls	r2, r3
 8014530:	4920      	ldr	r1, [pc, #128]	; (80145b4 <xTaskResumeAll+0xe4>)
 8014532:	6808      	ldr	r0, [r1, #0]
 8014534:	4302      	orrs	r2, r0
 8014536:	600a      	str	r2, [r1, #0]
 8014538:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801453c:	009a      	lsls	r2, r3, #2
 801453e:	4629      	mov	r1, r5
 8014540:	481d      	ldr	r0, [pc, #116]	; (80145b8 <xTaskResumeAll+0xe8>)
 8014542:	4410      	add	r0, r2
 8014544:	f7fe fd11 	bl	8012f6a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014548:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801454a:	4b1c      	ldr	r3, [pc, #112]	; (80145bc <xTaskResumeAll+0xec>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014550:	429a      	cmp	r2, r3
 8014552:	d3dc      	bcc.n	801450e <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8014554:	2201      	movs	r2, #1
 8014556:	4b1a      	ldr	r3, [pc, #104]	; (80145c0 <xTaskResumeAll+0xf0>)
 8014558:	601a      	str	r2, [r3, #0]
 801455a:	e7d8      	b.n	801450e <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 801455c:	b10c      	cbz	r4, 8014562 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 801455e:	f7ff fcad 	bl	8013ebc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014562:	4b18      	ldr	r3, [pc, #96]	; (80145c4 <xTaskResumeAll+0xf4>)
 8014564:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014566:	b974      	cbnz	r4, 8014586 <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 8014568:	4b15      	ldr	r3, [pc, #84]	; (80145c0 <xTaskResumeAll+0xf0>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	b1cb      	cbz	r3, 80145a2 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 801456e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014572:	4b15      	ldr	r3, [pc, #84]	; (80145c8 <xTaskResumeAll+0xf8>)
 8014574:	601a      	str	r2, [r3, #0]
 8014576:	f3bf 8f4f 	dsb	sy
 801457a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801457e:	2401      	movs	r4, #1
 8014580:	e7c0      	b.n	8014504 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014582:	3c01      	subs	r4, #1
 8014584:	d007      	beq.n	8014596 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 8014586:	f7ff ff13 	bl	80143b0 <xTaskIncrementTick>
 801458a:	2800      	cmp	r0, #0
 801458c:	d0f9      	beq.n	8014582 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 801458e:	2201      	movs	r2, #1
 8014590:	4b0b      	ldr	r3, [pc, #44]	; (80145c0 <xTaskResumeAll+0xf0>)
 8014592:	601a      	str	r2, [r3, #0]
 8014594:	e7f5      	b.n	8014582 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8014596:	2200      	movs	r2, #0
 8014598:	4b0a      	ldr	r3, [pc, #40]	; (80145c4 <xTaskResumeAll+0xf4>)
 801459a:	601a      	str	r2, [r3, #0]
 801459c:	e7e4      	b.n	8014568 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 801459e:	2400      	movs	r4, #0
 80145a0:	e7b0      	b.n	8014504 <xTaskResumeAll+0x34>
 80145a2:	2400      	movs	r4, #0
 80145a4:	e7ae      	b.n	8014504 <xTaskResumeAll+0x34>
 80145a6:	bf00      	nop
 80145a8:	200100e0 	.word	0x200100e0
 80145ac:	200100d4 	.word	0x200100d4
 80145b0:	2001011c 	.word	0x2001011c
 80145b4:	200100e8 	.word	0x200100e8
 80145b8:	20010044 	.word	0x20010044
 80145bc:	20010038 	.word	0x20010038
 80145c0:	20010160 	.word	0x20010160
 80145c4:	200100dc 	.word	0x200100dc
 80145c8:	e000ed04 	.word	0xe000ed04

080145cc <vTaskDelay>:
	{
 80145cc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80145ce:	b1a8      	cbz	r0, 80145fc <vTaskDelay+0x30>
 80145d0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80145d2:	4b10      	ldr	r3, [pc, #64]	; (8014614 <vTaskDelay+0x48>)
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	b143      	cbz	r3, 80145ea <vTaskDelay+0x1e>
 80145d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145dc:	f383 8811 	msr	BASEPRI, r3
 80145e0:	f3bf 8f6f 	isb	sy
 80145e4:	f3bf 8f4f 	dsb	sy
 80145e8:	e7fe      	b.n	80145e8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80145ea:	f7ff fecb 	bl	8014384 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80145ee:	2100      	movs	r1, #0
 80145f0:	4620      	mov	r0, r4
 80145f2:	f7ff fd6f 	bl	80140d4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80145f6:	f7ff ff6b 	bl	80144d0 <xTaskResumeAll>
 80145fa:	e000      	b.n	80145fe <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 80145fc:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 80145fe:	b938      	cbnz	r0, 8014610 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8014600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014604:	4b04      	ldr	r3, [pc, #16]	; (8014618 <vTaskDelay+0x4c>)
 8014606:	601a      	str	r2, [r3, #0]
 8014608:	f3bf 8f4f 	dsb	sy
 801460c:	f3bf 8f6f 	isb	sy
 8014610:	bd10      	pop	{r4, pc}
 8014612:	bf00      	nop
 8014614:	200100e0 	.word	0x200100e0
 8014618:	e000ed04 	.word	0xe000ed04

0801461c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801461c:	4b13      	ldr	r3, [pc, #76]	; (801466c <prvCheckTasksWaitingTermination+0x50>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	b313      	cbz	r3, 8014668 <prvCheckTasksWaitingTermination+0x4c>
{
 8014622:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8014624:	f7ff feae 	bl	8014384 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8014628:	4b11      	ldr	r3, [pc, #68]	; (8014670 <prvCheckTasksWaitingTermination+0x54>)
 801462a:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 801462c:	f7ff ff50 	bl	80144d0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8014630:	b924      	cbnz	r4, 801463c <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014632:	4b0e      	ldr	r3, [pc, #56]	; (801466c <prvCheckTasksWaitingTermination+0x50>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d1f4      	bne.n	8014624 <prvCheckTasksWaitingTermination+0x8>
}
 801463a:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 801463c:	f7fe fd2a 	bl	8013094 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8014640:	4b0b      	ldr	r3, [pc, #44]	; (8014670 <prvCheckTasksWaitingTermination+0x54>)
 8014642:	68db      	ldr	r3, [r3, #12]
 8014644:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014646:	1d20      	adds	r0, r4, #4
 8014648:	f7fe fcb5 	bl	8012fb6 <uxListRemove>
					--uxCurrentNumberOfTasks;
 801464c:	4a09      	ldr	r2, [pc, #36]	; (8014674 <prvCheckTasksWaitingTermination+0x58>)
 801464e:	6813      	ldr	r3, [r2, #0]
 8014650:	3b01      	subs	r3, #1
 8014652:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8014654:	4a05      	ldr	r2, [pc, #20]	; (801466c <prvCheckTasksWaitingTermination+0x50>)
 8014656:	6813      	ldr	r3, [r2, #0]
 8014658:	3b01      	subs	r3, #1
 801465a:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 801465c:	f7fe fd3c 	bl	80130d8 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8014660:	4620      	mov	r0, r4
 8014662:	f7ff fd19 	bl	8014098 <prvDeleteTCB>
 8014666:	e7e4      	b.n	8014632 <prvCheckTasksWaitingTermination+0x16>
 8014668:	4770      	bx	lr
 801466a:	bf00      	nop
 801466c:	200100d8 	.word	0x200100d8
 8014670:	20010148 	.word	0x20010148
 8014674:	200100d4 	.word	0x200100d4

08014678 <prvIdleTask>:
{
 8014678:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 801467a:	f7ff ffcf 	bl	801461c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801467e:	4b06      	ldr	r3, [pc, #24]	; (8014698 <prvIdleTask+0x20>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	2b01      	cmp	r3, #1
 8014684:	d9f9      	bls.n	801467a <prvIdleTask+0x2>
				taskYIELD();
 8014686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801468a:	4b04      	ldr	r3, [pc, #16]	; (801469c <prvIdleTask+0x24>)
 801468c:	601a      	str	r2, [r3, #0]
 801468e:	f3bf 8f4f 	dsb	sy
 8014692:	f3bf 8f6f 	isb	sy
 8014696:	e7f0      	b.n	801467a <prvIdleTask+0x2>
 8014698:	20010044 	.word	0x20010044
 801469c:	e000ed04 	.word	0xe000ed04

080146a0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80146a0:	4b27      	ldr	r3, [pc, #156]	; (8014740 <vTaskSwitchContext+0xa0>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	b11b      	cbz	r3, 80146ae <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80146a6:	2201      	movs	r2, #1
 80146a8:	4b26      	ldr	r3, [pc, #152]	; (8014744 <vTaskSwitchContext+0xa4>)
 80146aa:	601a      	str	r2, [r3, #0]
 80146ac:	4770      	bx	lr
{
 80146ae:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 80146b0:	2200      	movs	r2, #0
 80146b2:	4b24      	ldr	r3, [pc, #144]	; (8014744 <vTaskSwitchContext+0xa4>)
 80146b4:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80146b6:	f009 f8ad 	bl	801d814 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80146ba:	4b23      	ldr	r3, [pc, #140]	; (8014748 <vTaskSwitchContext+0xa8>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	4298      	cmp	r0, r3
 80146c0:	d905      	bls.n	80146ce <vTaskSwitchContext+0x2e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80146c2:	4a22      	ldr	r2, [pc, #136]	; (801474c <vTaskSwitchContext+0xac>)
 80146c4:	6811      	ldr	r1, [r2, #0]
 80146c6:	1ac3      	subs	r3, r0, r3
 80146c8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80146ca:	4413      	add	r3, r2
 80146cc:	654b      	str	r3, [r1, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 80146ce:	4b1e      	ldr	r3, [pc, #120]	; (8014748 <vTaskSwitchContext+0xa8>)
 80146d0:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80146d2:	4b1f      	ldr	r3, [pc, #124]	; (8014750 <vTaskSwitchContext+0xb0>)
 80146d4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80146d6:	fab3 f383 	clz	r3, r3
 80146da:	b2db      	uxtb	r3, r3
 80146dc:	f1c3 031f 	rsb	r3, r3, #31
 80146e0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80146e4:	008a      	lsls	r2, r1, #2
 80146e6:	491b      	ldr	r1, [pc, #108]	; (8014754 <vTaskSwitchContext+0xb4>)
 80146e8:	588a      	ldr	r2, [r1, r2]
 80146ea:	b942      	cbnz	r2, 80146fe <vTaskSwitchContext+0x5e>
	__asm volatile
 80146ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f0:	f383 8811 	msr	BASEPRI, r3
 80146f4:	f3bf 8f6f 	isb	sy
 80146f8:	f3bf 8f4f 	dsb	sy
 80146fc:	e7fe      	b.n	80146fc <vTaskSwitchContext+0x5c>
 80146fe:	4815      	ldr	r0, [pc, #84]	; (8014754 <vTaskSwitchContext+0xb4>)
 8014700:	009a      	lsls	r2, r3, #2
 8014702:	18d4      	adds	r4, r2, r3
 8014704:	00a1      	lsls	r1, r4, #2
 8014706:	4401      	add	r1, r0
 8014708:	684c      	ldr	r4, [r1, #4]
 801470a:	6864      	ldr	r4, [r4, #4]
 801470c:	604c      	str	r4, [r1, #4]
 801470e:	441a      	add	r2, r3
 8014710:	0091      	lsls	r1, r2, #2
 8014712:	3108      	adds	r1, #8
 8014714:	4408      	add	r0, r1
 8014716:	4284      	cmp	r4, r0
 8014718:	d009      	beq.n	801472e <vTaskSwitchContext+0x8e>
 801471a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801471e:	009a      	lsls	r2, r3, #2
 8014720:	4b0c      	ldr	r3, [pc, #48]	; (8014754 <vTaskSwitchContext+0xb4>)
 8014722:	4413      	add	r3, r2
 8014724:	685b      	ldr	r3, [r3, #4]
 8014726:	68da      	ldr	r2, [r3, #12]
 8014728:	4b08      	ldr	r3, [pc, #32]	; (801474c <vTaskSwitchContext+0xac>)
 801472a:	601a      	str	r2, [r3, #0]
 801472c:	bd10      	pop	{r4, pc}
 801472e:	6860      	ldr	r0, [r4, #4]
 8014730:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014734:	0091      	lsls	r1, r2, #2
 8014736:	4a07      	ldr	r2, [pc, #28]	; (8014754 <vTaskSwitchContext+0xb4>)
 8014738:	440a      	add	r2, r1
 801473a:	6050      	str	r0, [r2, #4]
 801473c:	e7ed      	b.n	801471a <vTaskSwitchContext+0x7a>
 801473e:	bf00      	nop
 8014740:	200100e0 	.word	0x200100e0
 8014744:	20010160 	.word	0x20010160
 8014748:	200100d0 	.word	0x200100d0
 801474c:	20010038 	.word	0x20010038
 8014750:	200100e8 	.word	0x200100e8
 8014754:	20010044 	.word	0x20010044

08014758 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8014758:	b940      	cbnz	r0, 801476c <vTaskPlaceOnEventList+0x14>
 801475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801475e:	f383 8811 	msr	BASEPRI, r3
 8014762:	f3bf 8f6f 	isb	sy
 8014766:	f3bf 8f4f 	dsb	sy
 801476a:	e7fe      	b.n	801476a <vTaskPlaceOnEventList+0x12>
{
 801476c:	b510      	push	{r4, lr}
 801476e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014770:	4b04      	ldr	r3, [pc, #16]	; (8014784 <vTaskPlaceOnEventList+0x2c>)
 8014772:	6819      	ldr	r1, [r3, #0]
 8014774:	3118      	adds	r1, #24
 8014776:	f7fe fc04 	bl	8012f82 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801477a:	2101      	movs	r1, #1
 801477c:	4620      	mov	r0, r4
 801477e:	f7ff fca9 	bl	80140d4 <prvAddCurrentTaskToDelayedList>
 8014782:	bd10      	pop	{r4, pc}
 8014784:	20010038 	.word	0x20010038

08014788 <xTaskRemoveFromEventList>:
{
 8014788:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801478a:	68c3      	ldr	r3, [r0, #12]
 801478c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801478e:	b324      	cbz	r4, 80147da <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014790:	f104 0518 	add.w	r5, r4, #24
 8014794:	4628      	mov	r0, r5
 8014796:	f7fe fc0e 	bl	8012fb6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801479a:	4b18      	ldr	r3, [pc, #96]	; (80147fc <xTaskRemoveFromEventList+0x74>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	bb2b      	cbnz	r3, 80147ec <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80147a0:	1d25      	adds	r5, r4, #4
 80147a2:	4628      	mov	r0, r5
 80147a4:	f7fe fc07 	bl	8012fb6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80147a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80147aa:	2201      	movs	r2, #1
 80147ac:	409a      	lsls	r2, r3
 80147ae:	4914      	ldr	r1, [pc, #80]	; (8014800 <xTaskRemoveFromEventList+0x78>)
 80147b0:	6808      	ldr	r0, [r1, #0]
 80147b2:	4302      	orrs	r2, r0
 80147b4:	600a      	str	r2, [r1, #0]
 80147b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80147ba:	009a      	lsls	r2, r3, #2
 80147bc:	4629      	mov	r1, r5
 80147be:	4811      	ldr	r0, [pc, #68]	; (8014804 <xTaskRemoveFromEventList+0x7c>)
 80147c0:	4410      	add	r0, r2
 80147c2:	f7fe fbd2 	bl	8012f6a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80147c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80147c8:	4b0f      	ldr	r3, [pc, #60]	; (8014808 <xTaskRemoveFromEventList+0x80>)
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147ce:	429a      	cmp	r2, r3
 80147d0:	d911      	bls.n	80147f6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80147d2:	2001      	movs	r0, #1
 80147d4:	4b0d      	ldr	r3, [pc, #52]	; (801480c <xTaskRemoveFromEventList+0x84>)
 80147d6:	6018      	str	r0, [r3, #0]
 80147d8:	bd38      	pop	{r3, r4, r5, pc}
 80147da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147de:	f383 8811 	msr	BASEPRI, r3
 80147e2:	f3bf 8f6f 	isb	sy
 80147e6:	f3bf 8f4f 	dsb	sy
 80147ea:	e7fe      	b.n	80147ea <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80147ec:	4629      	mov	r1, r5
 80147ee:	4808      	ldr	r0, [pc, #32]	; (8014810 <xTaskRemoveFromEventList+0x88>)
 80147f0:	f7fe fbbb 	bl	8012f6a <vListInsertEnd>
 80147f4:	e7e7      	b.n	80147c6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80147f6:	2000      	movs	r0, #0
}
 80147f8:	bd38      	pop	{r3, r4, r5, pc}
 80147fa:	bf00      	nop
 80147fc:	200100e0 	.word	0x200100e0
 8014800:	200100e8 	.word	0x200100e8
 8014804:	20010044 	.word	0x20010044
 8014808:	20010038 	.word	0x20010038
 801480c:	20010160 	.word	0x20010160
 8014810:	2001011c 	.word	0x2001011c

08014814 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8014814:	b130      	cbz	r0, 8014824 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014816:	4a08      	ldr	r2, [pc, #32]	; (8014838 <vTaskSetTimeOutState+0x24>)
 8014818:	6812      	ldr	r2, [r2, #0]
 801481a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801481c:	4a07      	ldr	r2, [pc, #28]	; (801483c <vTaskSetTimeOutState+0x28>)
 801481e:	6812      	ldr	r2, [r2, #0]
 8014820:	6042      	str	r2, [r0, #4]
 8014822:	4770      	bx	lr
 8014824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014828:	f383 8811 	msr	BASEPRI, r3
 801482c:	f3bf 8f6f 	isb	sy
 8014830:	f3bf 8f4f 	dsb	sy
 8014834:	e7fe      	b.n	8014834 <vTaskSetTimeOutState+0x20>
 8014836:	bf00      	nop
 8014838:	20010118 	.word	0x20010118
 801483c:	2001015c 	.word	0x2001015c

08014840 <xTaskCheckForTimeOut>:
{
 8014840:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8014842:	b1c0      	cbz	r0, 8014876 <xTaskCheckForTimeOut+0x36>
 8014844:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8014846:	b1f9      	cbz	r1, 8014888 <xTaskCheckForTimeOut+0x48>
 8014848:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 801484a:	f7fe fc23 	bl	8013094 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801484e:	4b1a      	ldr	r3, [pc, #104]	; (80148b8 <xTaskCheckForTimeOut+0x78>)
 8014850:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8014852:	682b      	ldr	r3, [r5, #0]
 8014854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014858:	d02a      	beq.n	80148b0 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801485a:	6820      	ldr	r0, [r4, #0]
 801485c:	4a17      	ldr	r2, [pc, #92]	; (80148bc <xTaskCheckForTimeOut+0x7c>)
 801485e:	6812      	ldr	r2, [r2, #0]
 8014860:	4290      	cmp	r0, r2
 8014862:	d002      	beq.n	801486a <xTaskCheckForTimeOut+0x2a>
 8014864:	6862      	ldr	r2, [r4, #4]
 8014866:	4291      	cmp	r1, r2
 8014868:	d224      	bcs.n	80148b4 <xTaskCheckForTimeOut+0x74>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801486a:	6862      	ldr	r2, [r4, #4]
 801486c:	1a88      	subs	r0, r1, r2
 801486e:	4283      	cmp	r3, r0
 8014870:	d813      	bhi.n	801489a <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8014872:	2401      	movs	r4, #1
 8014874:	e018      	b.n	80148a8 <xTaskCheckForTimeOut+0x68>
 8014876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801487a:	f383 8811 	msr	BASEPRI, r3
 801487e:	f3bf 8f6f 	isb	sy
 8014882:	f3bf 8f4f 	dsb	sy
 8014886:	e7fe      	b.n	8014886 <xTaskCheckForTimeOut+0x46>
 8014888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801488c:	f383 8811 	msr	BASEPRI, r3
 8014890:	f3bf 8f6f 	isb	sy
 8014894:	f3bf 8f4f 	dsb	sy
 8014898:	e7fe      	b.n	8014898 <xTaskCheckForTimeOut+0x58>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 801489a:	1a52      	subs	r2, r2, r1
 801489c:	4413      	add	r3, r2
 801489e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80148a0:	4620      	mov	r0, r4
 80148a2:	f7ff ffb7 	bl	8014814 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80148a6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80148a8:	f7fe fc16 	bl	80130d8 <vPortExitCritical>
}
 80148ac:	4620      	mov	r0, r4
 80148ae:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 80148b0:	2400      	movs	r4, #0
 80148b2:	e7f9      	b.n	80148a8 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 80148b4:	2401      	movs	r4, #1
 80148b6:	e7f7      	b.n	80148a8 <xTaskCheckForTimeOut+0x68>
 80148b8:	2001015c 	.word	0x2001015c
 80148bc:	20010118 	.word	0x20010118

080148c0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80148c0:	2201      	movs	r2, #1
 80148c2:	4b01      	ldr	r3, [pc, #4]	; (80148c8 <vTaskMissedYield+0x8>)
 80148c4:	601a      	str	r2, [r3, #0]
 80148c6:	4770      	bx	lr
 80148c8:	20010160 	.word	0x20010160

080148cc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80148cc:	4b05      	ldr	r3, [pc, #20]	; (80148e4 <xTaskGetSchedulerState+0x18>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	b123      	cbz	r3, 80148dc <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148d2:	4b05      	ldr	r3, [pc, #20]	; (80148e8 <xTaskGetSchedulerState+0x1c>)
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	b91b      	cbnz	r3, 80148e0 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 80148d8:	2002      	movs	r0, #2
 80148da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80148dc:	2001      	movs	r0, #1
 80148de:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 80148e0:	2000      	movs	r0, #0
	}
 80148e2:	4770      	bx	lr
 80148e4:	20010130 	.word	0x20010130
 80148e8:	200100e0 	.word	0x200100e0

080148ec <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80148ec:	2800      	cmp	r0, #0
 80148ee:	d047      	beq.n	8014980 <vTaskPriorityInherit+0x94>
	{
 80148f0:	b538      	push	{r3, r4, r5, lr}
 80148f2:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80148f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80148f6:	4923      	ldr	r1, [pc, #140]	; (8014984 <vTaskPriorityInherit+0x98>)
 80148f8:	6809      	ldr	r1, [r1, #0]
 80148fa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80148fc:	428b      	cmp	r3, r1
 80148fe:	d216      	bcs.n	801492e <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014900:	6981      	ldr	r1, [r0, #24]
 8014902:	2900      	cmp	r1, #0
 8014904:	db05      	blt.n	8014912 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014906:	491f      	ldr	r1, [pc, #124]	; (8014984 <vTaskPriorityInherit+0x98>)
 8014908:	6809      	ldr	r1, [r1, #0]
 801490a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801490c:	f1c1 0107 	rsb	r1, r1, #7
 8014910:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014912:	6960      	ldr	r0, [r4, #20]
 8014914:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014918:	0099      	lsls	r1, r3, #2
 801491a:	4b1b      	ldr	r3, [pc, #108]	; (8014988 <vTaskPriorityInherit+0x9c>)
 801491c:	440b      	add	r3, r1
 801491e:	4298      	cmp	r0, r3
 8014920:	d006      	beq.n	8014930 <vTaskPriorityInherit+0x44>
 8014922:	2300      	movs	r3, #0
 8014924:	b933      	cbnz	r3, 8014934 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014926:	4b17      	ldr	r3, [pc, #92]	; (8014984 <vTaskPriorityInherit+0x98>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801492c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801492e:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014930:	2301      	movs	r3, #1
 8014932:	e7f7      	b.n	8014924 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014934:	1d25      	adds	r5, r4, #4
 8014936:	4628      	mov	r0, r5
 8014938:	f7fe fb3d 	bl	8012fb6 <uxListRemove>
 801493c:	b968      	cbnz	r0, 801495a <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801493e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014940:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8014944:	008a      	lsls	r2, r1, #2
 8014946:	4910      	ldr	r1, [pc, #64]	; (8014988 <vTaskPriorityInherit+0x9c>)
 8014948:	588a      	ldr	r2, [r1, r2]
 801494a:	b932      	cbnz	r2, 801495a <vTaskPriorityInherit+0x6e>
 801494c:	2201      	movs	r2, #1
 801494e:	409a      	lsls	r2, r3
 8014950:	490e      	ldr	r1, [pc, #56]	; (801498c <vTaskPriorityInherit+0xa0>)
 8014952:	680b      	ldr	r3, [r1, #0]
 8014954:	ea23 0302 	bic.w	r3, r3, r2
 8014958:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801495a:	4b0a      	ldr	r3, [pc, #40]	; (8014984 <vTaskPriorityInherit+0x98>)
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014960:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8014962:	2201      	movs	r2, #1
 8014964:	409a      	lsls	r2, r3
 8014966:	4909      	ldr	r1, [pc, #36]	; (801498c <vTaskPriorityInherit+0xa0>)
 8014968:	6808      	ldr	r0, [r1, #0]
 801496a:	4302      	orrs	r2, r0
 801496c:	600a      	str	r2, [r1, #0]
 801496e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014972:	009a      	lsls	r2, r3, #2
 8014974:	4629      	mov	r1, r5
 8014976:	4804      	ldr	r0, [pc, #16]	; (8014988 <vTaskPriorityInherit+0x9c>)
 8014978:	4410      	add	r0, r2
 801497a:	f7fe faf6 	bl	8012f6a <vListInsertEnd>
 801497e:	bd38      	pop	{r3, r4, r5, pc}
 8014980:	4770      	bx	lr
 8014982:	bf00      	nop
 8014984:	20010038 	.word	0x20010038
 8014988:	20010044 	.word	0x20010044
 801498c:	200100e8 	.word	0x200100e8

08014990 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8014990:	2800      	cmp	r0, #0
 8014992:	d04a      	beq.n	8014a2a <xTaskPriorityDisinherit+0x9a>
	{
 8014994:	b538      	push	{r3, r4, r5, lr}
 8014996:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8014998:	4a27      	ldr	r2, [pc, #156]	; (8014a38 <xTaskPriorityDisinherit+0xa8>)
 801499a:	6812      	ldr	r2, [r2, #0]
 801499c:	4290      	cmp	r0, r2
 801499e:	d008      	beq.n	80149b2 <xTaskPriorityDisinherit+0x22>
 80149a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a4:	f383 8811 	msr	BASEPRI, r3
 80149a8:	f3bf 8f6f 	isb	sy
 80149ac:	f3bf 8f4f 	dsb	sy
 80149b0:	e7fe      	b.n	80149b0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80149b2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80149b4:	b942      	cbnz	r2, 80149c8 <xTaskPriorityDisinherit+0x38>
 80149b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ba:	f383 8811 	msr	BASEPRI, r3
 80149be:	f3bf 8f6f 	isb	sy
 80149c2:	f3bf 8f4f 	dsb	sy
 80149c6:	e7fe      	b.n	80149c6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80149c8:	3a01      	subs	r2, #1
 80149ca:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80149cc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80149ce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80149d0:	4288      	cmp	r0, r1
 80149d2:	d02c      	beq.n	8014a2e <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80149d4:	bb6a      	cbnz	r2, 8014a32 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80149d6:	1d25      	adds	r5, r4, #4
 80149d8:	4628      	mov	r0, r5
 80149da:	f7fe faec 	bl	8012fb6 <uxListRemove>
 80149de:	b970      	cbnz	r0, 80149fe <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80149e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80149e2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80149e6:	008b      	lsls	r3, r1, #2
 80149e8:	4914      	ldr	r1, [pc, #80]	; (8014a3c <xTaskPriorityDisinherit+0xac>)
 80149ea:	58cb      	ldr	r3, [r1, r3]
 80149ec:	b93b      	cbnz	r3, 80149fe <xTaskPriorityDisinherit+0x6e>
 80149ee:	2301      	movs	r3, #1
 80149f0:	fa03 f202 	lsl.w	r2, r3, r2
 80149f4:	4912      	ldr	r1, [pc, #72]	; (8014a40 <xTaskPriorityDisinherit+0xb0>)
 80149f6:	680b      	ldr	r3, [r1, #0]
 80149f8:	ea23 0302 	bic.w	r3, r3, r2
 80149fc:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80149fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8014a00:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a02:	f1c3 0207 	rsb	r2, r3, #7
 8014a06:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8014a08:	2401      	movs	r4, #1
 8014a0a:	fa04 f203 	lsl.w	r2, r4, r3
 8014a0e:	490c      	ldr	r1, [pc, #48]	; (8014a40 <xTaskPriorityDisinherit+0xb0>)
 8014a10:	6808      	ldr	r0, [r1, #0]
 8014a12:	4302      	orrs	r2, r0
 8014a14:	600a      	str	r2, [r1, #0]
 8014a16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014a1a:	009a      	lsls	r2, r3, #2
 8014a1c:	4629      	mov	r1, r5
 8014a1e:	4807      	ldr	r0, [pc, #28]	; (8014a3c <xTaskPriorityDisinherit+0xac>)
 8014a20:	4410      	add	r0, r2
 8014a22:	f7fe faa2 	bl	8012f6a <vListInsertEnd>
					xReturn = pdTRUE;
 8014a26:	4620      	mov	r0, r4
 8014a28:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8014a2a:	2000      	movs	r0, #0
 8014a2c:	4770      	bx	lr
 8014a2e:	2000      	movs	r0, #0
 8014a30:	bd38      	pop	{r3, r4, r5, pc}
 8014a32:	2000      	movs	r0, #0
	}
 8014a34:	bd38      	pop	{r3, r4, r5, pc}
 8014a36:	bf00      	nop
 8014a38:	20010038 	.word	0x20010038
 8014a3c:	20010044 	.word	0x20010044
 8014a40:	200100e8 	.word	0x200100e8

08014a44 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8014a44:	4b05      	ldr	r3, [pc, #20]	; (8014a5c <pvTaskIncrementMutexHeldCount+0x18>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	b123      	cbz	r3, 8014a54 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8014a4a:	4b04      	ldr	r3, [pc, #16]	; (8014a5c <pvTaskIncrementMutexHeldCount+0x18>)
 8014a4c:	681a      	ldr	r2, [r3, #0]
 8014a4e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8014a50:	3301      	adds	r3, #1
 8014a52:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8014a54:	4b01      	ldr	r3, [pc, #4]	; (8014a5c <pvTaskIncrementMutexHeldCount+0x18>)
 8014a56:	6818      	ldr	r0, [r3, #0]
	}
 8014a58:	4770      	bx	lr
 8014a5a:	bf00      	nop
 8014a5c:	20010038 	.word	0x20010038

08014a60 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8014a60:	b510      	push	{r4, lr}
 8014a62:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8014a64:	680a      	ldr	r2, [r1, #0]
 8014a66:	320c      	adds	r2, #12
 8014a68:	f001 fc10 	bl	801628c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	b908      	cbnz	r0, 8014a74 <netconn_apimsg+0x14>
    return apimsg->err;
 8014a70:	f994 3004 	ldrsb.w	r3, [r4, #4]
  }
  return err;
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	bd10      	pop	{r4, pc}

08014a78 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8014a78:	b500      	push	{lr}
 8014a7a:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014a7c:	b160      	cbz	r0, 8014a98 <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014a7e:	9001      	str	r0, [sp, #4]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8014a80:	f88d 100c 	strb.w	r1, [sp, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8014a84:	2329      	movs	r3, #41	; 0x29
 8014a86:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8014a8a:	a901      	add	r1, sp, #4
 8014a8c:	4807      	ldr	r0, [pc, #28]	; (8014aac <netconn_close_shutdown+0x34>)
 8014a8e:	f7ff ffe7 	bl	8014a60 <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 8014a92:	b007      	add	sp, #28
 8014a94:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014a98:	4b05      	ldr	r3, [pc, #20]	; (8014ab0 <netconn_close_shutdown+0x38>)
 8014a9a:	f44f 724a 	mov.w	r2, #808	; 0x328
 8014a9e:	4905      	ldr	r1, [pc, #20]	; (8014ab4 <netconn_close_shutdown+0x3c>)
 8014aa0:	4805      	ldr	r0, [pc, #20]	; (8014ab8 <netconn_close_shutdown+0x40>)
 8014aa2:	f00b f824 	bl	801faee <iprintf>
 8014aa6:	f06f 000f 	mvn.w	r0, #15
 8014aaa:	e7f2      	b.n	8014a92 <netconn_close_shutdown+0x1a>
 8014aac:	08015f31 	.word	0x08015f31
 8014ab0:	080214a0 	.word	0x080214a0
 8014ab4:	080214d4 	.word	0x080214d4
 8014ab8:	080214f0 	.word	0x080214f0

08014abc <netconn_recv_data>:
{
 8014abc:	b570      	push	{r4, r5, r6, lr}
 8014abe:	b086      	sub	sp, #24
  void *buf = NULL;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014ac4:	b199      	cbz	r1, 8014aee <netconn_recv_data+0x32>
 8014ac6:	4604      	mov	r4, r0
 8014ac8:	460e      	mov	r6, r1
  *new_buf = NULL;
 8014aca:	2300      	movs	r3, #0
 8014acc:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014ace:	b1c0      	cbz	r0, 8014b02 <netconn_recv_data+0x46>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8014ad0:	f100 0510 	add.w	r5, r0, #16
 8014ad4:	4628      	mov	r0, r5
 8014ad6:	f007 fe8d 	bl	801c7f4 <sys_mbox_valid>
 8014ada:	b9e0      	cbnz	r0, 8014b16 <netconn_recv_data+0x5a>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8014adc:	f104 0014 	add.w	r0, r4, #20
 8014ae0:	f007 fe88 	bl	801c7f4 <sys_mbox_valid>
 8014ae4:	2800      	cmp	r0, #0
 8014ae6:	d05e      	beq.n	8014ba6 <netconn_recv_data+0xea>
 8014ae8:	f06f 000a 	mvn.w	r0, #10
 8014aec:	e01c      	b.n	8014b28 <netconn_recv_data+0x6c>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014aee:	4b2f      	ldr	r3, [pc, #188]	; (8014bac <netconn_recv_data+0xf0>)
 8014af0:	f240 12e7 	movw	r2, #487	; 0x1e7
 8014af4:	492e      	ldr	r1, [pc, #184]	; (8014bb0 <netconn_recv_data+0xf4>)
 8014af6:	482f      	ldr	r0, [pc, #188]	; (8014bb4 <netconn_recv_data+0xf8>)
 8014af8:	f00a fff9 	bl	801faee <iprintf>
 8014afc:	f06f 000f 	mvn.w	r0, #15
 8014b00:	e012      	b.n	8014b28 <netconn_recv_data+0x6c>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014b02:	4b2a      	ldr	r3, [pc, #168]	; (8014bac <netconn_recv_data+0xf0>)
 8014b04:	f240 12e9 	movw	r2, #489	; 0x1e9
 8014b08:	492b      	ldr	r1, [pc, #172]	; (8014bb8 <netconn_recv_data+0xfc>)
 8014b0a:	482a      	ldr	r0, [pc, #168]	; (8014bb4 <netconn_recv_data+0xf8>)
 8014b0c:	f00a ffef 	bl	801faee <iprintf>
 8014b10:	f06f 000f 	mvn.w	r0, #15
 8014b14:	e008      	b.n	8014b28 <netconn_recv_data+0x6c>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8014b16:	4628      	mov	r0, r5
 8014b18:	f007 fe6c 	bl	801c7f4 <sys_mbox_valid>
 8014b1c:	b130      	cbz	r0, 8014b2c <netconn_recv_data+0x70>
  if (ERR_IS_FATAL(conn->last_err)) {
 8014b1e:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8014b22:	f110 0f0c 	cmn.w	r0, #12
 8014b26:	da0b      	bge.n	8014b40 <netconn_recv_data+0x84>
}
 8014b28:	b006      	add	sp, #24
 8014b2a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8014b2c:	4b1f      	ldr	r3, [pc, #124]	; (8014bac <netconn_recv_data+0xf0>)
 8014b2e:	f240 12f5 	movw	r2, #501	; 0x1f5
 8014b32:	4922      	ldr	r1, [pc, #136]	; (8014bbc <netconn_recv_data+0x100>)
 8014b34:	481f      	ldr	r0, [pc, #124]	; (8014bb4 <netconn_recv_data+0xf8>)
 8014b36:	f00a ffda 	bl	801faee <iprintf>
 8014b3a:	f06f 000a 	mvn.w	r0, #10
 8014b3e:	e7f3      	b.n	8014b28 <netconn_recv_data+0x6c>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8014b40:	2200      	movs	r2, #0
 8014b42:	a905      	add	r1, sp, #20
 8014b44:	4628      	mov	r0, r5
 8014b46:	f007 fe16 	bl	801c776 <sys_arch_mbox_fetch>
    API_MSG_VAR_REF(msg).conn = conn;
 8014b4a:	9400      	str	r4, [sp, #0]
    if (buf != NULL) {
 8014b4c:	9b05      	ldr	r3, [sp, #20]
 8014b4e:	b18b      	cbz	r3, 8014b74 <netconn_recv_data+0xb8>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8014b50:	891b      	ldrh	r3, [r3, #8]
 8014b52:	9302      	str	r3, [sp, #8]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8014b54:	4669      	mov	r1, sp
 8014b56:	481a      	ldr	r0, [pc, #104]	; (8014bc0 <netconn_recv_data+0x104>)
 8014b58:	f7ff ff82 	bl	8014a60 <netconn_apimsg>
    if (buf == NULL) {
 8014b5c:	9b05      	ldr	r3, [sp, #20]
 8014b5e:	b163      	cbz	r3, 8014b7a <netconn_recv_data+0xbe>
    len = ((struct pbuf *)buf)->tot_len;
 8014b60:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8014b62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014b64:	b113      	cbz	r3, 8014b6c <netconn_recv_data+0xb0>
 8014b66:	2101      	movs	r1, #1
 8014b68:	4620      	mov	r0, r4
 8014b6a:	4798      	blx	r3
  *new_buf = buf;
 8014b6c:	9b05      	ldr	r3, [sp, #20]
 8014b6e:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8014b70:	2000      	movs	r0, #0
 8014b72:	e7d9      	b.n	8014b28 <netconn_recv_data+0x6c>
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8014b74:	2301      	movs	r3, #1
 8014b76:	9302      	str	r3, [sp, #8]
 8014b78:	e7ec      	b.n	8014b54 <netconn_recv_data+0x98>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014b7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014b7c:	b11b      	cbz	r3, 8014b86 <netconn_recv_data+0xca>
 8014b7e:	2200      	movs	r2, #0
 8014b80:	2101      	movs	r1, #1
 8014b82:	4620      	mov	r0, r4
 8014b84:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8014b86:	6863      	ldr	r3, [r4, #4]
 8014b88:	b933      	cbnz	r3, 8014b98 <netconn_recv_data+0xdc>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8014b8a:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	d1ca      	bne.n	8014b28 <netconn_recv_data+0x6c>
 8014b92:	f06f 000d 	mvn.w	r0, #13
 8014b96:	e7c7      	b.n	8014b28 <netconn_recv_data+0x6c>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8014b98:	2101      	movs	r1, #1
 8014b9a:	4620      	mov	r0, r4
 8014b9c:	f7ff ff6c 	bl	8014a78 <netconn_close_shutdown>
      return ERR_CLSD;
 8014ba0:	f06f 000e 	mvn.w	r0, #14
 8014ba4:	e7c0      	b.n	8014b28 <netconn_recv_data+0x6c>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8014ba6:	f06f 000e 	mvn.w	r0, #14
 8014baa:	e7bd      	b.n	8014b28 <netconn_recv_data+0x6c>
 8014bac:	080214a0 	.word	0x080214a0
 8014bb0:	08021614 	.word	0x08021614
 8014bb4:	080214f0 	.word	0x080214f0
 8014bb8:	08021634 	.word	0x08021634
 8014bbc:	08021650 	.word	0x08021650
 8014bc0:	08015d49 	.word	0x08015d49

08014bc4 <netconn_new_with_proto_and_callback>:
{
 8014bc4:	b570      	push	{r4, r5, r6, lr}
 8014bc6:	b086      	sub	sp, #24
 8014bc8:	460d      	mov	r5, r1
  conn = netconn_alloc(t, callback);
 8014bca:	4611      	mov	r1, r2
 8014bcc:	f000 fe18 	bl	8015800 <netconn_alloc>
  if (conn != NULL) {
 8014bd0:	4604      	mov	r4, r0
 8014bd2:	b140      	cbz	r0, 8014be6 <netconn_new_with_proto_and_callback+0x22>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8014bd4:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 8014bd8:	a906      	add	r1, sp, #24
 8014bda:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8014bde:	4820      	ldr	r0, [pc, #128]	; (8014c60 <netconn_new_with_proto_and_callback+0x9c>)
 8014be0:	f7ff ff3e 	bl	8014a60 <netconn_apimsg>
    if (err != ERR_OK) {
 8014be4:	b910      	cbnz	r0, 8014bec <netconn_new_with_proto_and_callback+0x28>
}
 8014be6:	4620      	mov	r0, r4
 8014be8:	b006      	add	sp, #24
 8014bea:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8014bec:	6863      	ldr	r3, [r4, #4]
 8014bee:	b12b      	cbz	r3, 8014bfc <netconn_new_with_proto_and_callback+0x38>
 8014bf0:	4b1c      	ldr	r3, [pc, #112]	; (8014c64 <netconn_new_with_proto_and_callback+0xa0>)
 8014bf2:	2289      	movs	r2, #137	; 0x89
 8014bf4:	491c      	ldr	r1, [pc, #112]	; (8014c68 <netconn_new_with_proto_and_callback+0xa4>)
 8014bf6:	481d      	ldr	r0, [pc, #116]	; (8014c6c <netconn_new_with_proto_and_callback+0xa8>)
 8014bf8:	f00a ff79 	bl	801faee <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8014bfc:	f104 0510 	add.w	r5, r4, #16
 8014c00:	4628      	mov	r0, r5
 8014c02:	f007 fdf7 	bl	801c7f4 <sys_mbox_valid>
 8014c06:	b1b0      	cbz	r0, 8014c36 <netconn_new_with_proto_and_callback+0x72>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014c08:	f104 0014 	add.w	r0, r4, #20
 8014c0c:	f007 fdf2 	bl	801c7f4 <sys_mbox_valid>
 8014c10:	b9c0      	cbnz	r0, 8014c44 <netconn_new_with_proto_and_callback+0x80>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8014c12:	f104 060c 	add.w	r6, r4, #12
 8014c16:	4630      	mov	r0, r6
 8014c18:	f007 fe36 	bl	801c888 <sys_sem_valid>
 8014c1c:	b1c8      	cbz	r0, 8014c52 <netconn_new_with_proto_and_callback+0x8e>
      sys_sem_free(&conn->op_completed);
 8014c1e:	4630      	mov	r0, r6
 8014c20:	f007 fe2d 	bl	801c87e <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8014c24:	4628      	mov	r0, r5
 8014c26:	f007 fd87 	bl	801c738 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8014c2a:	4621      	mov	r1, r4
 8014c2c:	2006      	movs	r0, #6
 8014c2e:	f003 fa9b 	bl	8018168 <memp_free>
      return NULL;
 8014c32:	2400      	movs	r4, #0
 8014c34:	e7d7      	b.n	8014be6 <netconn_new_with_proto_and_callback+0x22>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8014c36:	4b0b      	ldr	r3, [pc, #44]	; (8014c64 <netconn_new_with_proto_and_callback+0xa0>)
 8014c38:	228a      	movs	r2, #138	; 0x8a
 8014c3a:	490d      	ldr	r1, [pc, #52]	; (8014c70 <netconn_new_with_proto_and_callback+0xac>)
 8014c3c:	480b      	ldr	r0, [pc, #44]	; (8014c6c <netconn_new_with_proto_and_callback+0xa8>)
 8014c3e:	f00a ff56 	bl	801faee <iprintf>
 8014c42:	e7e1      	b.n	8014c08 <netconn_new_with_proto_and_callback+0x44>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014c44:	4b07      	ldr	r3, [pc, #28]	; (8014c64 <netconn_new_with_proto_and_callback+0xa0>)
 8014c46:	228c      	movs	r2, #140	; 0x8c
 8014c48:	490a      	ldr	r1, [pc, #40]	; (8014c74 <netconn_new_with_proto_and_callback+0xb0>)
 8014c4a:	4808      	ldr	r0, [pc, #32]	; (8014c6c <netconn_new_with_proto_and_callback+0xa8>)
 8014c4c:	f00a ff4f 	bl	801faee <iprintf>
 8014c50:	e7df      	b.n	8014c12 <netconn_new_with_proto_and_callback+0x4e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8014c52:	4b04      	ldr	r3, [pc, #16]	; (8014c64 <netconn_new_with_proto_and_callback+0xa0>)
 8014c54:	228f      	movs	r2, #143	; 0x8f
 8014c56:	4908      	ldr	r1, [pc, #32]	; (8014c78 <netconn_new_with_proto_and_callback+0xb4>)
 8014c58:	4804      	ldr	r0, [pc, #16]	; (8014c6c <netconn_new_with_proto_and_callback+0xa8>)
 8014c5a:	f00a ff48 	bl	801faee <iprintf>
 8014c5e:	e7de      	b.n	8014c1e <netconn_new_with_proto_and_callback+0x5a>
 8014c60:	080157cd 	.word	0x080157cd
 8014c64:	080214a0 	.word	0x080214a0
 8014c68:	08021598 	.word	0x08021598
 8014c6c:	080214f0 	.word	0x080214f0
 8014c70:	080215bc 	.word	0x080215bc
 8014c74:	080215d4 	.word	0x080215d4
 8014c78:	080215f8 	.word	0x080215f8

08014c7c <netconn_delete>:
{
 8014c7c:	b530      	push	{r4, r5, lr}
 8014c7e:	b087      	sub	sp, #28
  if (conn == NULL) {
 8014c80:	b188      	cbz	r0, 8014ca6 <netconn_delete+0x2a>
 8014c82:	4604      	mov	r4, r0
  API_MSG_VAR_REF(msg).conn = conn;
 8014c84:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8014c86:	2329      	movs	r3, #41	; 0x29
 8014c88:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8014c8c:	a901      	add	r1, sp, #4
 8014c8e:	4807      	ldr	r0, [pc, #28]	; (8014cac <netconn_delete+0x30>)
 8014c90:	f7ff fee6 	bl	8014a60 <netconn_apimsg>
  if (err != ERR_OK) {
 8014c94:	4605      	mov	r5, r0
 8014c96:	b110      	cbz	r0, 8014c9e <netconn_delete+0x22>
}
 8014c98:	4628      	mov	r0, r5
 8014c9a:	b007      	add	sp, #28
 8014c9c:	bd30      	pop	{r4, r5, pc}
  netconn_free(conn);
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f000 fdf2 	bl	8015888 <netconn_free>
  return ERR_OK;
 8014ca4:	e7f8      	b.n	8014c98 <netconn_delete+0x1c>
    return ERR_OK;
 8014ca6:	2500      	movs	r5, #0
 8014ca8:	e7f6      	b.n	8014c98 <netconn_delete+0x1c>
 8014caa:	bf00      	nop
 8014cac:	08015aa5 	.word	0x08015aa5

08014cb0 <netconn_getaddr>:
{
 8014cb0:	b510      	push	{r4, lr}
 8014cb2:	b086      	sub	sp, #24
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8014cb4:	b160      	cbz	r0, 8014cd0 <netconn_getaddr+0x20>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8014cb6:	b1a1      	cbz	r1, 8014ce2 <netconn_getaddr+0x32>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8014cb8:	b1e2      	cbz	r2, 8014cf4 <netconn_getaddr+0x44>
  API_MSG_VAR_REF(msg).conn = conn;
 8014cba:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8014cbc:	f88d 3014 	strb.w	r3, [sp, #20]
  msg.msg.ad.ipaddr = addr;
 8014cc0:	9103      	str	r1, [sp, #12]
  msg.msg.ad.port = port;
 8014cc2:	9204      	str	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8014cc4:	a901      	add	r1, sp, #4
 8014cc6:	4810      	ldr	r0, [pc, #64]	; (8014d08 <netconn_getaddr+0x58>)
 8014cc8:	f7ff feca 	bl	8014a60 <netconn_apimsg>
}
 8014ccc:	b006      	add	sp, #24
 8014cce:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8014cd0:	4b0e      	ldr	r3, [pc, #56]	; (8014d0c <netconn_getaddr+0x5c>)
 8014cd2:	22d9      	movs	r2, #217	; 0xd9
 8014cd4:	490e      	ldr	r1, [pc, #56]	; (8014d10 <netconn_getaddr+0x60>)
 8014cd6:	480f      	ldr	r0, [pc, #60]	; (8014d14 <netconn_getaddr+0x64>)
 8014cd8:	f00a ff09 	bl	801faee <iprintf>
 8014cdc:	f06f 000f 	mvn.w	r0, #15
 8014ce0:	e7f4      	b.n	8014ccc <netconn_getaddr+0x1c>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8014ce2:	4b0a      	ldr	r3, [pc, #40]	; (8014d0c <netconn_getaddr+0x5c>)
 8014ce4:	22da      	movs	r2, #218	; 0xda
 8014ce6:	490c      	ldr	r1, [pc, #48]	; (8014d18 <netconn_getaddr+0x68>)
 8014ce8:	480a      	ldr	r0, [pc, #40]	; (8014d14 <netconn_getaddr+0x64>)
 8014cea:	f00a ff00 	bl	801faee <iprintf>
 8014cee:	f06f 000f 	mvn.w	r0, #15
 8014cf2:	e7eb      	b.n	8014ccc <netconn_getaddr+0x1c>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8014cf4:	4b05      	ldr	r3, [pc, #20]	; (8014d0c <netconn_getaddr+0x5c>)
 8014cf6:	22db      	movs	r2, #219	; 0xdb
 8014cf8:	4908      	ldr	r1, [pc, #32]	; (8014d1c <netconn_getaddr+0x6c>)
 8014cfa:	4806      	ldr	r0, [pc, #24]	; (8014d14 <netconn_getaddr+0x64>)
 8014cfc:	f00a fef7 	bl	801faee <iprintf>
 8014d00:	f06f 000f 	mvn.w	r0, #15
 8014d04:	e7e2      	b.n	8014ccc <netconn_getaddr+0x1c>
 8014d06:	bf00      	nop
 8014d08:	08015e9d 	.word	0x08015e9d
 8014d0c:	080214a0 	.word	0x080214a0
 8014d10:	08021518 	.word	0x08021518
 8014d14:	080214f0 	.word	0x080214f0
 8014d18:	08021538 	.word	0x08021538
 8014d1c:	08021558 	.word	0x08021558

08014d20 <netconn_bind>:
{
 8014d20:	b500      	push	{lr}
 8014d22:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014d24:	b160      	cbz	r0, 8014d40 <netconn_bind+0x20>
 8014d26:	4603      	mov	r3, r0
  if (addr == NULL) {
 8014d28:	b199      	cbz	r1, 8014d52 <netconn_bind+0x32>
  API_MSG_VAR_REF(msg).conn = conn;
 8014d2a:	9301      	str	r3, [sp, #4]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014d2c:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014d2e:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8014d32:	a901      	add	r1, sp, #4
 8014d34:	4808      	ldr	r0, [pc, #32]	; (8014d58 <netconn_bind+0x38>)
 8014d36:	f7ff fe93 	bl	8014a60 <netconn_apimsg>
}
 8014d3a:	b007      	add	sp, #28
 8014d3c:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014d40:	4b06      	ldr	r3, [pc, #24]	; (8014d5c <netconn_bind+0x3c>)
 8014d42:	22ff      	movs	r2, #255	; 0xff
 8014d44:	4906      	ldr	r1, [pc, #24]	; (8014d60 <netconn_bind+0x40>)
 8014d46:	4807      	ldr	r0, [pc, #28]	; (8014d64 <netconn_bind+0x44>)
 8014d48:	f00a fed1 	bl	801faee <iprintf>
 8014d4c:	f06f 000f 	mvn.w	r0, #15
 8014d50:	e7f3      	b.n	8014d3a <netconn_bind+0x1a>
    addr = IP4_ADDR_ANY;
 8014d52:	4905      	ldr	r1, [pc, #20]	; (8014d68 <netconn_bind+0x48>)
 8014d54:	e7e9      	b.n	8014d2a <netconn_bind+0xa>
 8014d56:	bf00      	nop
 8014d58:	08015c05 	.word	0x08015c05
 8014d5c:	080214a0 	.word	0x080214a0
 8014d60:	08021484 	.word	0x08021484
 8014d64:	080214f0 	.word	0x080214f0
 8014d68:	080258bc 	.word	0x080258bc

08014d6c <netconn_listen_with_backlog>:
{
 8014d6c:	b500      	push	{lr}
 8014d6e:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014d70:	b140      	cbz	r0, 8014d84 <netconn_listen_with_backlog+0x18>
  API_MSG_VAR_REF(msg).conn = conn;
 8014d72:	a906      	add	r1, sp, #24
 8014d74:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8014d78:	4807      	ldr	r0, [pc, #28]	; (8014d98 <netconn_listen_with_backlog+0x2c>)
 8014d7a:	f7ff fe71 	bl	8014a60 <netconn_apimsg>
}
 8014d7e:	b007      	add	sp, #28
 8014d80:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014d84:	4b05      	ldr	r3, [pc, #20]	; (8014d9c <netconn_listen_with_backlog+0x30>)
 8014d86:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014d8a:	4905      	ldr	r1, [pc, #20]	; (8014da0 <netconn_listen_with_backlog+0x34>)
 8014d8c:	4805      	ldr	r0, [pc, #20]	; (8014da4 <netconn_listen_with_backlog+0x38>)
 8014d8e:	f00a feae 	bl	801faee <iprintf>
 8014d92:	f06f 000f 	mvn.w	r0, #15
 8014d96:	e7f2      	b.n	8014d7e <netconn_listen_with_backlog+0x12>
 8014d98:	08015c59 	.word	0x08015c59
 8014d9c:	080214a0 	.word	0x080214a0
 8014da0:	08021578 	.word	0x08021578
 8014da4:	080214f0 	.word	0x080214f0

08014da8 <netconn_accept>:
{
 8014da8:	b570      	push	{r4, r5, r6, lr}
 8014daa:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014dac:	b159      	cbz	r1, 8014dc6 <netconn_accept+0x1e>
 8014dae:	4604      	mov	r4, r0
 8014db0:	460d      	mov	r5, r1
  *new_conn = NULL;
 8014db2:	2300      	movs	r3, #0
 8014db4:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014db6:	b180      	cbz	r0, 8014dda <netconn_accept+0x32>
  if (ERR_IS_FATAL(conn->last_err)) {
 8014db8:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8014dbc:	f110 0f0c 	cmn.w	r0, #12
 8014dc0:	da15      	bge.n	8014dee <netconn_accept+0x46>
}
 8014dc2:	b002      	add	sp, #8
 8014dc4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014dc6:	4b21      	ldr	r3, [pc, #132]	; (8014e4c <netconn_accept+0xa4>)
 8014dc8:	f240 128d 	movw	r2, #397	; 0x18d
 8014dcc:	4920      	ldr	r1, [pc, #128]	; (8014e50 <netconn_accept+0xa8>)
 8014dce:	4821      	ldr	r0, [pc, #132]	; (8014e54 <netconn_accept+0xac>)
 8014dd0:	f00a fe8d 	bl	801faee <iprintf>
 8014dd4:	f06f 000f 	mvn.w	r0, #15
 8014dd8:	e7f3      	b.n	8014dc2 <netconn_accept+0x1a>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014dda:	4b1c      	ldr	r3, [pc, #112]	; (8014e4c <netconn_accept+0xa4>)
 8014ddc:	f240 128f 	movw	r2, #399	; 0x18f
 8014de0:	491d      	ldr	r1, [pc, #116]	; (8014e58 <netconn_accept+0xb0>)
 8014de2:	481c      	ldr	r0, [pc, #112]	; (8014e54 <netconn_accept+0xac>)
 8014de4:	f00a fe83 	bl	801faee <iprintf>
 8014de8:	f06f 000f 	mvn.w	r0, #15
 8014dec:	e7e9      	b.n	8014dc2 <netconn_accept+0x1a>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8014dee:	f104 0614 	add.w	r6, r4, #20
 8014df2:	4630      	mov	r0, r6
 8014df4:	f007 fcfe 	bl	801c7f4 <sys_mbox_valid>
 8014df8:	b308      	cbz	r0, 8014e3e <netconn_accept+0x96>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	a901      	add	r1, sp, #4
 8014dfe:	4630      	mov	r0, r6
 8014e00:	f007 fcb9 	bl	801c776 <sys_arch_mbox_fetch>
  newconn = (struct netconn *)accept_ptr;
 8014e04:	9e01      	ldr	r6, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014e06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014e08:	b11b      	cbz	r3, 8014e12 <netconn_accept+0x6a>
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	2101      	movs	r1, #1
 8014e0e:	4620      	mov	r0, r4
 8014e10:	4798      	blx	r3
  if (accept_ptr == &netconn_aborted) {
 8014e12:	4b12      	ldr	r3, [pc, #72]	; (8014e5c <netconn_accept+0xb4>)
 8014e14:	9a01      	ldr	r2, [sp, #4]
 8014e16:	429a      	cmp	r2, r3
 8014e18:	d014      	beq.n	8014e44 <netconn_accept+0x9c>
  if (newconn == NULL) {
 8014e1a:	b116      	cbz	r6, 8014e22 <netconn_accept+0x7a>
  *new_conn = newconn;
 8014e1c:	602e      	str	r6, [r5, #0]
  return ERR_OK;
 8014e1e:	2000      	movs	r0, #0
 8014e20:	e7cf      	b.n	8014dc2 <netconn_accept+0x1a>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8014e22:	f007 fd79 	bl	801c918 <sys_arch_protect>
 8014e26:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8014e2a:	f113 0f0c 	cmn.w	r3, #12
 8014e2e:	db01      	blt.n	8014e34 <netconn_accept+0x8c>
 8014e30:	23f1      	movs	r3, #241	; 0xf1
 8014e32:	7223      	strb	r3, [r4, #8]
 8014e34:	f007 fd7c 	bl	801c930 <sys_arch_unprotect>
    return ERR_CLSD;
 8014e38:	f06f 000e 	mvn.w	r0, #14
 8014e3c:	e7c1      	b.n	8014dc2 <netconn_accept+0x1a>
    return ERR_CLSD;
 8014e3e:	f06f 000e 	mvn.w	r0, #14
 8014e42:	e7be      	b.n	8014dc2 <netconn_accept+0x1a>
    return ERR_ABRT;
 8014e44:	f06f 000c 	mvn.w	r0, #12
 8014e48:	e7bb      	b.n	8014dc2 <netconn_accept+0x1a>
 8014e4a:	bf00      	nop
 8014e4c:	080214a0 	.word	0x080214a0
 8014e50:	08021444 	.word	0x08021444
 8014e54:	080214f0 	.word	0x080214f0
 8014e58:	08021464 	.word	0x08021464
 8014e5c:	20011038 	.word	0x20011038

08014e60 <netconn_recv>:
{
 8014e60:	b570      	push	{r4, r5, r6, lr}
 8014e62:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014e64:	b1f9      	cbz	r1, 8014ea6 <netconn_recv+0x46>
 8014e66:	4605      	mov	r5, r0
 8014e68:	460e      	mov	r6, r1
  *new_buf = NULL;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014e6e:	b320      	cbz	r0, 8014eba <netconn_recv+0x5a>
    struct pbuf *p = NULL;
 8014e70:	2300      	movs	r3, #0
 8014e72:	9301      	str	r3, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8014e74:	2005      	movs	r0, #5
 8014e76:	f003 f95d 	bl	8018134 <memp_malloc>
    if (buf == NULL) {
 8014e7a:	4604      	mov	r4, r0
 8014e7c:	2800      	cmp	r0, #0
 8014e7e:	d033      	beq.n	8014ee8 <netconn_recv+0x88>
    err = netconn_recv_data(conn, (void **)&p);
 8014e80:	a901      	add	r1, sp, #4
 8014e82:	4628      	mov	r0, r5
 8014e84:	f7ff fe1a 	bl	8014abc <netconn_recv_data>
    if (err != ERR_OK) {
 8014e88:	4605      	mov	r5, r0
 8014e8a:	bb00      	cbnz	r0, 8014ece <netconn_recv+0x6e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014e8c:	9b01      	ldr	r3, [sp, #4]
 8014e8e:	b31b      	cbz	r3, 8014ed8 <netconn_recv+0x78>
    buf->p = p;
 8014e90:	9b01      	ldr	r3, [sp, #4]
 8014e92:	6023      	str	r3, [r4, #0]
    buf->ptr = p;
 8014e94:	9b01      	ldr	r3, [sp, #4]
 8014e96:	6063      	str	r3, [r4, #4]
    buf->port = 0;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 8014e9c:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 8014e9e:	6034      	str	r4, [r6, #0]
}
 8014ea0:	4628      	mov	r0, r5
 8014ea2:	b002      	add	sp, #8
 8014ea4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014ea6:	4b12      	ldr	r3, [pc, #72]	; (8014ef0 <netconn_recv+0x90>)
 8014ea8:	f44f 721d 	mov.w	r2, #628	; 0x274
 8014eac:	4911      	ldr	r1, [pc, #68]	; (8014ef4 <netconn_recv+0x94>)
 8014eae:	4812      	ldr	r0, [pc, #72]	; (8014ef8 <netconn_recv+0x98>)
 8014eb0:	f00a fe1d 	bl	801faee <iprintf>
 8014eb4:	f06f 050f 	mvn.w	r5, #15
 8014eb8:	e7f2      	b.n	8014ea0 <netconn_recv+0x40>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014eba:	4b0d      	ldr	r3, [pc, #52]	; (8014ef0 <netconn_recv+0x90>)
 8014ebc:	f240 2276 	movw	r2, #630	; 0x276
 8014ec0:	490e      	ldr	r1, [pc, #56]	; (8014efc <netconn_recv+0x9c>)
 8014ec2:	480d      	ldr	r0, [pc, #52]	; (8014ef8 <netconn_recv+0x98>)
 8014ec4:	f00a fe13 	bl	801faee <iprintf>
 8014ec8:	f06f 050f 	mvn.w	r5, #15
 8014ecc:	e7e8      	b.n	8014ea0 <netconn_recv+0x40>
      memp_free(MEMP_NETBUF, buf);
 8014ece:	4621      	mov	r1, r4
 8014ed0:	2005      	movs	r0, #5
 8014ed2:	f003 f949 	bl	8018168 <memp_free>
      return err;
 8014ed6:	e7e3      	b.n	8014ea0 <netconn_recv+0x40>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014ed8:	4b05      	ldr	r3, [pc, #20]	; (8014ef0 <netconn_recv+0x90>)
 8014eda:	f240 228a 	movw	r2, #650	; 0x28a
 8014ede:	4908      	ldr	r1, [pc, #32]	; (8014f00 <netconn_recv+0xa0>)
 8014ee0:	4805      	ldr	r0, [pc, #20]	; (8014ef8 <netconn_recv+0x98>)
 8014ee2:	f00a fe04 	bl	801faee <iprintf>
 8014ee6:	e7d3      	b.n	8014e90 <netconn_recv+0x30>
      return ERR_MEM;
 8014ee8:	f04f 35ff 	mov.w	r5, #4294967295
 8014eec:	e7d8      	b.n	8014ea0 <netconn_recv+0x40>
 8014eee:	bf00      	nop
 8014ef0:	080214a0 	.word	0x080214a0
 8014ef4:	08021614 	.word	0x08021614
 8014ef8:	080214f0 	.word	0x080214f0
 8014efc:	08021634 	.word	0x08021634
 8014f00:	08021850 	.word	0x08021850

08014f04 <netconn_write_partly>:
{
 8014f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f06:	b087      	sub	sp, #28
 8014f08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014f0a:	b188      	cbz	r0, 8014f30 <netconn_write_partly+0x2c>
 8014f0c:	4616      	mov	r6, r2
 8014f0e:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8014f10:	7802      	ldrb	r2, [r0, #0]
 8014f12:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8014f16:	2a10      	cmp	r2, #16
 8014f18:	d114      	bne.n	8014f44 <netconn_write_partly+0x40>
  if (size == 0) {
 8014f1a:	2e00      	cmp	r6, #0
 8014f1c:	d035      	beq.n	8014f8a <netconn_write_partly+0x86>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014f1e:	7f02      	ldrb	r2, [r0, #28]
 8014f20:	f012 0f02 	tst.w	r2, #2
 8014f24:	d118      	bne.n	8014f58 <netconn_write_partly+0x54>
 8014f26:	f013 0f04 	tst.w	r3, #4
 8014f2a:	d029      	beq.n	8014f80 <netconn_write_partly+0x7c>
 8014f2c:	2201      	movs	r2, #1
 8014f2e:	e014      	b.n	8014f5a <netconn_write_partly+0x56>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014f30:	4b19      	ldr	r3, [pc, #100]	; (8014f98 <netconn_write_partly+0x94>)
 8014f32:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014f36:	4919      	ldr	r1, [pc, #100]	; (8014f9c <netconn_write_partly+0x98>)
 8014f38:	4819      	ldr	r0, [pc, #100]	; (8014fa0 <netconn_write_partly+0x9c>)
 8014f3a:	f00a fdd8 	bl	801faee <iprintf>
 8014f3e:	f06f 030f 	mvn.w	r3, #15
 8014f42:	e023      	b.n	8014f8c <netconn_write_partly+0x88>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8014f44:	4b14      	ldr	r3, [pc, #80]	; (8014f98 <netconn_write_partly+0x94>)
 8014f46:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014f4a:	4916      	ldr	r1, [pc, #88]	; (8014fa4 <netconn_write_partly+0xa0>)
 8014f4c:	4814      	ldr	r0, [pc, #80]	; (8014fa0 <netconn_write_partly+0x9c>)
 8014f4e:	f00a fdce 	bl	801faee <iprintf>
 8014f52:	f06f 0305 	mvn.w	r3, #5
 8014f56:	e019      	b.n	8014f8c <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014f58:	2201      	movs	r2, #1
  if (dontblock && !bytes_written) {
 8014f5a:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 8014f5e:	b102      	cbz	r2, 8014f62 <netconn_write_partly+0x5e>
 8014f60:	b1bd      	cbz	r5, 8014f92 <netconn_write_partly+0x8e>
  API_MSG_VAR_REF(msg).conn = conn;
 8014f62:	9401      	str	r4, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8014f64:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8014f66:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8014f6a:	9604      	str	r6, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8014f6c:	a901      	add	r1, sp, #4
 8014f6e:	480e      	ldr	r0, [pc, #56]	; (8014fa8 <netconn_write_partly+0xa4>)
 8014f70:	f7ff fd76 	bl	8014a60 <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8014f74:	4603      	mov	r3, r0
 8014f76:	b948      	cbnz	r0, 8014f8c <netconn_write_partly+0x88>
 8014f78:	b145      	cbz	r5, 8014f8c <netconn_write_partly+0x88>
    if (dontblock) {
 8014f7a:	b91f      	cbnz	r7, 8014f84 <netconn_write_partly+0x80>
      *bytes_written = size;
 8014f7c:	602e      	str	r6, [r5, #0]
 8014f7e:	e005      	b.n	8014f8c <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014f80:	2200      	movs	r2, #0
 8014f82:	e7ea      	b.n	8014f5a <netconn_write_partly+0x56>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8014f84:	9a04      	ldr	r2, [sp, #16]
 8014f86:	602a      	str	r2, [r5, #0]
 8014f88:	e000      	b.n	8014f8c <netconn_write_partly+0x88>
    return ERR_OK;
 8014f8a:	2300      	movs	r3, #0
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	b007      	add	sp, #28
 8014f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 8014f92:	f06f 0305 	mvn.w	r3, #5
 8014f96:	e7f9      	b.n	8014f8c <netconn_write_partly+0x88>
 8014f98:	080214a0 	.word	0x080214a0
 8014f9c:	08021670 	.word	0x08021670
 8014fa0:	080214f0 	.word	0x080214f0
 8014fa4:	0802168c 	.word	0x0802168c
 8014fa8:	08015da1 	.word	0x08015da1

08014fac <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8014fac:	b508      	push	{r3, lr}
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8014fae:	2103      	movs	r1, #3
 8014fb0:	f7ff fd62 	bl	8014a78 <netconn_close_shutdown>
}
 8014fb4:	bd08      	pop	{r3, pc}
	...

08014fb8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8014fb8:	b510      	push	{r4, lr}
 8014fba:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8014fbc:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	f003 ffcd 	bl	8018f5e <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8014fc4:	4908      	ldr	r1, [pc, #32]	; (8014fe8 <setup_tcp+0x30>)
 8014fc6:	4620      	mov	r0, r4
 8014fc8:	f003 ffcc 	bl	8018f64 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8014fcc:	4907      	ldr	r1, [pc, #28]	; (8014fec <setup_tcp+0x34>)
 8014fce:	4620      	mov	r0, r4
 8014fd0:	f003 ffe2 	bl	8018f98 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8014fd4:	2202      	movs	r2, #2
 8014fd6:	4906      	ldr	r1, [pc, #24]	; (8014ff0 <setup_tcp+0x38>)
 8014fd8:	4620      	mov	r0, r4
 8014fda:	f004 f817 	bl	801900c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8014fde:	4905      	ldr	r1, [pc, #20]	; (8014ff4 <setup_tcp+0x3c>)
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	f003 fff1 	bl	8018fc8 <tcp_err>
 8014fe6:	bd10      	pop	{r4, pc}
 8014fe8:	080156fd 	.word	0x080156fd
 8014fec:	08015689 	.word	0x08015689
 8014ff0:	08015605 	.word	0x08015605
 8014ff4:	08015051 	.word	0x08015051

08014ff8 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8014ff8:	b538      	push	{r3, r4, r5, lr}
 8014ffa:	4604      	mov	r4, r0
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8014ffc:	6803      	ldr	r3, [r0, #0]
 8014ffe:	685b      	ldr	r3, [r3, #4]
 8015000:	b133      	cbz	r3, 8015010 <pcb_new+0x18>
 8015002:	4b10      	ldr	r3, [pc, #64]	; (8015044 <pcb_new+0x4c>)
 8015004:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8015008:	490f      	ldr	r1, [pc, #60]	; (8015048 <pcb_new+0x50>)
 801500a:	4810      	ldr	r0, [pc, #64]	; (801504c <pcb_new+0x54>)
 801500c:	f00a fd6f 	bl	801faee <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8015010:	6825      	ldr	r5, [r4, #0]
 8015012:	782b      	ldrb	r3, [r5, #0]
 8015014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015018:	2b10      	cmp	r3, #16
 801501a:	d002      	beq.n	8015022 <pcb_new+0x2a>
    }
    break;
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 801501c:	23fa      	movs	r3, #250	; 0xfa
 801501e:	7123      	strb	r3, [r4, #4]
    return;
 8015020:	bd38      	pop	{r3, r4, r5, pc}
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8015022:	2000      	movs	r0, #0
 8015024:	f004 fd66 	bl	8019af4 <tcp_new_ip_type>
 8015028:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 801502a:	6820      	ldr	r0, [r4, #0]
 801502c:	6843      	ldr	r3, [r0, #4]
 801502e:	b10b      	cbz	r3, 8015034 <pcb_new+0x3c>
      setup_tcp(msg->conn);
 8015030:	f7ff ffc2 	bl	8014fb8 <setup_tcp>
  }
  if (msg->conn->pcb.ip == NULL) {
 8015034:	6823      	ldr	r3, [r4, #0]
 8015036:	685b      	ldr	r3, [r3, #4]
 8015038:	b103      	cbz	r3, 801503c <pcb_new+0x44>
 801503a:	bd38      	pop	{r3, r4, r5, pc}
    msg->err = ERR_MEM;
 801503c:	23ff      	movs	r3, #255	; 0xff
 801503e:	7123      	strb	r3, [r4, #4]
 8015040:	e7fb      	b.n	801503a <pcb_new+0x42>
 8015042:	bf00      	nop
 8015044:	0802198c 	.word	0x0802198c
 8015048:	080219c0 	.word	0x080219c0
 801504c:	080214f0 	.word	0x080214f0

08015050 <err_tcp>:
{
 8015050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015052:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015054:	4604      	mov	r4, r0
 8015056:	2800      	cmp	r0, #0
 8015058:	d038      	beq.n	80150cc <err_tcp+0x7c>
  conn->pcb.tcp = NULL;
 801505a:	2300      	movs	r3, #0
 801505c:	6063      	str	r3, [r4, #4]
  old_state = conn->state;
 801505e:	7865      	ldrb	r5, [r4, #1]
  conn->state = NETCONN_NONE;
 8015060:	7063      	strb	r3, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 8015062:	2d04      	cmp	r5, #4
 8015064:	d03a      	beq.n	80150dc <err_tcp+0x8c>
    SYS_ARCH_SET(conn->last_err, err);
 8015066:	f007 fc57 	bl	801c918 <sys_arch_protect>
 801506a:	7226      	strb	r6, [r4, #8]
 801506c:	f007 fc60 	bl	801c930 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8015070:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015072:	b11b      	cbz	r3, 801507c <err_tcp+0x2c>
 8015074:	2200      	movs	r2, #0
 8015076:	2104      	movs	r1, #4
 8015078:	4620      	mov	r0, r4
 801507a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801507c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801507e:	b11b      	cbz	r3, 8015088 <err_tcp+0x38>
 8015080:	2200      	movs	r2, #0
 8015082:	4611      	mov	r1, r2
 8015084:	4620      	mov	r0, r4
 8015086:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015088:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801508a:	b11b      	cbz	r3, 8015094 <err_tcp+0x44>
 801508c:	2200      	movs	r2, #0
 801508e:	2102      	movs	r1, #2
 8015090:	4620      	mov	r0, r4
 8015092:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 8015094:	f104 0710 	add.w	r7, r4, #16
 8015098:	4638      	mov	r0, r7
 801509a:	f007 fbab 	bl	801c7f4 <sys_mbox_valid>
 801509e:	bb68      	cbnz	r0, 80150fc <err_tcp+0xac>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80150a0:	f104 0714 	add.w	r7, r4, #20
 80150a4:	4638      	mov	r0, r7
 80150a6:	f007 fba5 	bl	801c7f4 <sys_mbox_valid>
 80150aa:	bb60      	cbnz	r0, 8015106 <err_tcp+0xb6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80150ac:	2d01      	cmp	r5, #1
 80150ae:	d02f      	beq.n	8015110 <err_tcp+0xc0>
 80150b0:	2d04      	cmp	r5, #4
 80150b2:	d02d      	beq.n	8015110 <err_tcp+0xc0>
 80150b4:	2d03      	cmp	r5, #3
 80150b6:	d02b      	beq.n	8015110 <err_tcp+0xc0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80150b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150ba:	b133      	cbz	r3, 80150ca <err_tcp+0x7a>
 80150bc:	4b2e      	ldr	r3, [pc, #184]	; (8015178 <err_tcp+0x128>)
 80150be:	f240 12bd 	movw	r2, #445	; 0x1bd
 80150c2:	492e      	ldr	r1, [pc, #184]	; (801517c <err_tcp+0x12c>)
 80150c4:	482e      	ldr	r0, [pc, #184]	; (8015180 <err_tcp+0x130>)
 80150c6:	f00a fd12 	bl	801faee <iprintf>
 80150ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80150cc:	4b2a      	ldr	r3, [pc, #168]	; (8015178 <err_tcp+0x128>)
 80150ce:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80150d2:	492c      	ldr	r1, [pc, #176]	; (8015184 <err_tcp+0x134>)
 80150d4:	482a      	ldr	r0, [pc, #168]	; (8015180 <err_tcp+0x130>)
 80150d6:	f00a fd0a 	bl	801faee <iprintf>
 80150da:	e7be      	b.n	801505a <err_tcp+0xa>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 80150dc:	b164      	cbz	r4, 80150f8 <err_tcp+0xa8>
 80150de:	f007 fc1b 	bl	801c918 <sys_arch_protect>
 80150e2:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80150e6:	f113 0f0c 	cmn.w	r3, #12
 80150ea:	db01      	blt.n	80150f0 <err_tcp+0xa0>
 80150ec:	2300      	movs	r3, #0
 80150ee:	7223      	strb	r3, [r4, #8]
 80150f0:	f007 fc1e 	bl	801c930 <sys_arch_unprotect>
    err = ERR_OK;
 80150f4:	2600      	movs	r6, #0
 80150f6:	e7bb      	b.n	8015070 <err_tcp+0x20>
 80150f8:	2600      	movs	r6, #0
 80150fa:	e7b9      	b.n	8015070 <err_tcp+0x20>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 80150fc:	2100      	movs	r1, #0
 80150fe:	4638      	mov	r0, r7
 8015100:	f007 fb2f 	bl	801c762 <sys_mbox_trypost>
 8015104:	e7cc      	b.n	80150a0 <err_tcp+0x50>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8015106:	2100      	movs	r1, #0
 8015108:	4638      	mov	r0, r7
 801510a:	f007 fb2a 	bl	801c762 <sys_mbox_trypost>
 801510e:	e7cd      	b.n	80150ac <err_tcp+0x5c>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8015110:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8015112:	f023 0204 	bic.w	r2, r3, #4
 8015116:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8015118:	f013 0f04 	tst.w	r3, #4
 801511c:	d1d5      	bne.n	80150ca <err_tcp+0x7a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801511e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015120:	b1cb      	cbz	r3, 8015156 <err_tcp+0x106>
      conn->current_msg->err = err;
 8015122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015124:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015128:	681d      	ldr	r5, [r3, #0]
 801512a:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 801512c:	4628      	mov	r0, r5
 801512e:	f007 fbab 	bl	801c888 <sys_sem_valid>
 8015132:	b1c0      	cbz	r0, 8015166 <err_tcp+0x116>
      conn->current_msg = NULL;
 8015134:	2300      	movs	r3, #0
 8015136:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 8015138:	b14c      	cbz	r4, 801514e <err_tcp+0xfe>
 801513a:	f007 fbed 	bl	801c918 <sys_arch_protect>
 801513e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8015142:	f113 0f0c 	cmn.w	r3, #12
 8015146:	db00      	blt.n	801514a <err_tcp+0xfa>
 8015148:	7226      	strb	r6, [r4, #8]
 801514a:	f007 fbf1 	bl	801c930 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 801514e:	4628      	mov	r0, r5
 8015150:	f007 fb90 	bl	801c874 <sys_sem_signal>
 8015154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015156:	4b08      	ldr	r3, [pc, #32]	; (8015178 <err_tcp+0x128>)
 8015158:	f240 12b3 	movw	r2, #435	; 0x1b3
 801515c:	490a      	ldr	r1, [pc, #40]	; (8015188 <err_tcp+0x138>)
 801515e:	4808      	ldr	r0, [pc, #32]	; (8015180 <err_tcp+0x130>)
 8015160:	f00a fcc5 	bl	801faee <iprintf>
 8015164:	e7dd      	b.n	8015122 <err_tcp+0xd2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8015166:	4b04      	ldr	r3, [pc, #16]	; (8015178 <err_tcp+0x128>)
 8015168:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801516c:	4907      	ldr	r1, [pc, #28]	; (801518c <err_tcp+0x13c>)
 801516e:	4804      	ldr	r0, [pc, #16]	; (8015180 <err_tcp+0x130>)
 8015170:	f00a fcbd 	bl	801faee <iprintf>
 8015174:	e7de      	b.n	8015134 <err_tcp+0xe4>
 8015176:	bf00      	nop
 8015178:	0802198c 	.word	0x0802198c
 801517c:	080216f8 	.word	0x080216f8
 8015180:	080214f0 	.word	0x080214f0
 8015184:	080216b0 	.word	0x080216b0
 8015188:	080216c0 	.word	0x080216c0
 801518c:	080216dc 	.word	0x080216dc

08015190 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8015190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015194:	4688      	mov	r8, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8015196:	4604      	mov	r4, r0
 8015198:	b1f0      	cbz	r0, 80151d8 <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 801519a:	7863      	ldrb	r3, [r4, #1]
 801519c:	2b01      	cmp	r3, #1
 801519e:	d006      	beq.n	80151ae <lwip_netconn_do_writemore+0x1e>
 80151a0:	4b7b      	ldr	r3, [pc, #492]	; (8015390 <lwip_netconn_do_writemore+0x200>)
 80151a2:	f240 52e4 	movw	r2, #1508	; 0x5e4
 80151a6:	497b      	ldr	r1, [pc, #492]	; (8015394 <lwip_netconn_do_writemore+0x204>)
 80151a8:	487b      	ldr	r0, [pc, #492]	; (8015398 <lwip_netconn_do_writemore+0x208>)
 80151aa:	f00a fca0 	bl	801faee <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80151ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151b0:	b1d3      	cbz	r3, 80151e8 <lwip_netconn_do_writemore+0x58>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80151b2:	6863      	ldr	r3, [r4, #4]
 80151b4:	b303      	cbz	r3, 80151f8 <lwip_netconn_do_writemore+0x68>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80151b6:	6a22      	ldr	r2, [r4, #32]
 80151b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151ba:	68db      	ldr	r3, [r3, #12]
 80151bc:	429a      	cmp	r2, r3
 80151be:	d223      	bcs.n	8015208 <lwip_netconn_do_writemore+0x78>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 80151c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80151c2:	f892 9010 	ldrb.w	r9, [r2, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80151c6:	7f23      	ldrb	r3, [r4, #28]
 80151c8:	f013 0f02 	tst.w	r3, #2
 80151cc:	d124      	bne.n	8015218 <lwip_netconn_do_writemore+0x88>
 80151ce:	f019 0f04 	tst.w	r9, #4
 80151d2:	d039      	beq.n	8015248 <lwip_netconn_do_writemore+0xb8>
 80151d4:	2601      	movs	r6, #1
 80151d6:	e020      	b.n	801521a <lwip_netconn_do_writemore+0x8a>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 80151d8:	4b6d      	ldr	r3, [pc, #436]	; (8015390 <lwip_netconn_do_writemore+0x200>)
 80151da:	f240 52e3 	movw	r2, #1507	; 0x5e3
 80151de:	496f      	ldr	r1, [pc, #444]	; (801539c <lwip_netconn_do_writemore+0x20c>)
 80151e0:	486d      	ldr	r0, [pc, #436]	; (8015398 <lwip_netconn_do_writemore+0x208>)
 80151e2:	f00a fc84 	bl	801faee <iprintf>
 80151e6:	e7d8      	b.n	801519a <lwip_netconn_do_writemore+0xa>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80151e8:	4b69      	ldr	r3, [pc, #420]	; (8015390 <lwip_netconn_do_writemore+0x200>)
 80151ea:	f240 52e5 	movw	r2, #1509	; 0x5e5
 80151ee:	496c      	ldr	r1, [pc, #432]	; (80153a0 <lwip_netconn_do_writemore+0x210>)
 80151f0:	4869      	ldr	r0, [pc, #420]	; (8015398 <lwip_netconn_do_writemore+0x208>)
 80151f2:	f00a fc7c 	bl	801faee <iprintf>
 80151f6:	e7dc      	b.n	80151b2 <lwip_netconn_do_writemore+0x22>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80151f8:	4b65      	ldr	r3, [pc, #404]	; (8015390 <lwip_netconn_do_writemore+0x200>)
 80151fa:	f240 52e6 	movw	r2, #1510	; 0x5e6
 80151fe:	4969      	ldr	r1, [pc, #420]	; (80153a4 <lwip_netconn_do_writemore+0x214>)
 8015200:	4865      	ldr	r0, [pc, #404]	; (8015398 <lwip_netconn_do_writemore+0x208>)
 8015202:	f00a fc74 	bl	801faee <iprintf>
 8015206:	e7d6      	b.n	80151b6 <lwip_netconn_do_writemore+0x26>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8015208:	4b61      	ldr	r3, [pc, #388]	; (8015390 <lwip_netconn_do_writemore+0x200>)
 801520a:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 801520e:	4966      	ldr	r1, [pc, #408]	; (80153a8 <lwip_netconn_do_writemore+0x218>)
 8015210:	4861      	ldr	r0, [pc, #388]	; (8015398 <lwip_netconn_do_writemore+0x208>)
 8015212:	f00a fc6c 	bl	801faee <iprintf>
 8015216:	e7d3      	b.n	80151c0 <lwip_netconn_do_writemore+0x30>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015218:	2601      	movs	r6, #1
 801521a:	b2f6      	uxtb	r6, r6
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 801521c:	6897      	ldr	r7, [r2, #8]
 801521e:	6a23      	ldr	r3, [r4, #32]
 8015220:	441f      	add	r7, r3
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8015222:	68d2      	ldr	r2, [r2, #12]
 8015224:	1ad5      	subs	r5, r2, r3
    if (diff > 0xffffUL) { /* max_u16_t */
 8015226:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801522a:	d30f      	bcc.n	801524c <lwip_netconn_do_writemore+0xbc>
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 801522c:	f049 0902 	orr.w	r9, r9, #2
      len = 0xffff;
 8015230:	f64f 75ff 	movw	r5, #65535	; 0xffff
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8015234:	6861      	ldr	r1, [r4, #4]
 8015236:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
    if (available < len) {
 801523a:	428d      	cmp	r5, r1
 801523c:	d90b      	bls.n	8015256 <lwip_netconn_do_writemore+0xc6>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 801523e:	b13e      	cbz	r6, 8015250 <lwip_netconn_do_writemore+0xc0>
        if (!len) {
 8015240:	2900      	cmp	r1, #0
 8015242:	d039      	beq.n	80152b8 <lwip_netconn_do_writemore+0x128>
      len = available;
 8015244:	460d      	mov	r5, r1
 8015246:	e006      	b.n	8015256 <lwip_netconn_do_writemore+0xc6>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015248:	2600      	movs	r6, #0
 801524a:	e7e6      	b.n	801521a <lwip_netconn_do_writemore+0x8a>
      len = (u16_t)diff;
 801524c:	b2ad      	uxth	r5, r5
 801524e:	e7f1      	b.n	8015234 <lwip_netconn_do_writemore+0xa4>
          err = ERR_WOULDBLOCK;
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8015250:	f049 0902 	orr.w	r9, r9, #2
      len = available;
 8015254:	460d      	mov	r5, r1
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8015256:	442b      	add	r3, r5
 8015258:	429a      	cmp	r2, r3
 801525a:	d325      	bcc.n	80152a8 <lwip_netconn_do_writemore+0x118>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 801525c:	464b      	mov	r3, r9
 801525e:	462a      	mov	r2, r5
 8015260:	4639      	mov	r1, r7
 8015262:	6860      	ldr	r0, [r4, #4]
 8015264:	f006 fa32 	bl	801b6cc <tcp_write>
 8015268:	4607      	mov	r7, r0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801526a:	1c43      	adds	r3, r0, #1
 801526c:	b2db      	uxtb	r3, r3
 801526e:	2b01      	cmp	r3, #1
 8015270:	d925      	bls.n	80152be <lwip_netconn_do_writemore+0x12e>
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 8015272:	2f00      	cmp	r7, #0
 8015274:	d146      	bne.n	8015304 <lwip_netconn_do_writemore+0x174>
      err_t out_err;
      conn->write_offset += len;
 8015276:	6a23      	ldr	r3, [r4, #32]
 8015278:	441d      	add	r5, r3
 801527a:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 801527c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801527e:	68da      	ldr	r2, [r3, #12]
 8015280:	4295      	cmp	r5, r2
 8015282:	d000      	beq.n	8015286 <lwip_netconn_do_writemore+0xf6>
 8015284:	b10e      	cbz	r6, 801528a <lwip_netconn_do_writemore+0xfa>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8015286:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8015288:	2601      	movs	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 801528a:	6860      	ldr	r0, [r4, #4]
 801528c:	f006 fdcc 	bl	801be28 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8015290:	f110 0f0c 	cmn.w	r0, #12
 8015294:	db02      	blt.n	801529c <lwip_netconn_do_writemore+0x10c>
 8015296:	f110 0f04 	cmn.w	r0, #4
 801529a:	d13a      	bne.n	8015312 <lwip_netconn_do_writemore+0x182>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 801529c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801529e:	2200      	movs	r2, #0
 80152a0:	60da      	str	r2, [r3, #12]
        err = out_err;
 80152a2:	4607      	mov	r7, r0
        write_finished = 1;
 80152a4:	2601      	movs	r6, #1
 80152a6:	e034      	b.n	8015312 <lwip_netconn_do_writemore+0x182>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80152a8:	4b39      	ldr	r3, [pc, #228]	; (8015390 <lwip_netconn_do_writemore+0x200>)
 80152aa:	f240 6213 	movw	r2, #1555	; 0x613
 80152ae:	493f      	ldr	r1, [pc, #252]	; (80153ac <lwip_netconn_do_writemore+0x21c>)
 80152b0:	4839      	ldr	r0, [pc, #228]	; (8015398 <lwip_netconn_do_writemore+0x208>)
 80152b2:	f00a fc1c 	bl	801faee <iprintf>
 80152b6:	e7d1      	b.n	801525c <lwip_netconn_do_writemore+0xcc>
      len = available;
 80152b8:	460d      	mov	r5, r1
          err = ERR_WOULDBLOCK;
 80152ba:	f06f 0706 	mvn.w	r7, #6
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 80152be:	b176      	cbz	r6, 80152de <lwip_netconn_do_writemore+0x14e>
 80152c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152c2:	68db      	ldr	r3, [r3, #12]
 80152c4:	429d      	cmp	r5, r3
 80152c6:	d20a      	bcs.n	80152de <lwip_netconn_do_writemore+0x14e>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80152c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80152ca:	b11b      	cbz	r3, 80152d4 <lwip_netconn_do_writemore+0x144>
 80152cc:	462a      	mov	r2, r5
 80152ce:	2103      	movs	r1, #3
 80152d0:	4620      	mov	r0, r4
 80152d2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80152d4:	7f23      	ldrb	r3, [r4, #28]
 80152d6:	f043 0310 	orr.w	r3, r3, #16
 80152da:	7723      	strb	r3, [r4, #28]
 80152dc:	e7c9      	b.n	8015272 <lwip_netconn_do_writemore+0xe2>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80152de:	6863      	ldr	r3, [r4, #4]
 80152e0:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 80152e4:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80152e8:	4291      	cmp	r1, r2
 80152ea:	d903      	bls.n	80152f4 <lwip_netconn_do_writemore+0x164>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80152ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80152f0:	2b04      	cmp	r3, #4
 80152f2:	d9be      	bls.n	8015272 <lwip_netconn_do_writemore+0xe2>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80152f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d0bb      	beq.n	8015272 <lwip_netconn_do_writemore+0xe2>
 80152fa:	462a      	mov	r2, r5
 80152fc:	2103      	movs	r1, #3
 80152fe:	4620      	mov	r0, r4
 8015300:	4798      	blx	r3
 8015302:	e7b6      	b.n	8015272 <lwip_netconn_do_writemore+0xe2>
      }
    } else if (err == ERR_MEM) {
 8015304:	f1b7 3fff 	cmp.w	r7, #4294967295
 8015308:	d01f      	beq.n	801534a <lwip_netconn_do_writemore+0x1ba>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 801530a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801530c:	2200      	movs	r2, #0
 801530e:	60da      	str	r2, [r3, #12]
      write_finished = 1;
 8015310:	2601      	movs	r6, #1
    }
  }
  if (write_finished) {
 8015312:	2e00      	cmp	r6, #0
 8015314:	d037      	beq.n	8015386 <lwip_netconn_do_writemore+0x1f6>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015318:	6818      	ldr	r0, [r3, #0]
 801531a:	f100 050c 	add.w	r5, r0, #12
    conn->current_msg->err = err;
 801531e:	711f      	strb	r7, [r3, #4]
    conn->current_msg = NULL;
 8015320:	2300      	movs	r3, #0
 8015322:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 8015324:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8015326:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8015328:	b14c      	cbz	r4, 801533e <lwip_netconn_do_writemore+0x1ae>
 801532a:	f007 faf5 	bl	801c918 <sys_arch_protect>
 801532e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8015332:	f113 0f0c 	cmn.w	r3, #12
 8015336:	db00      	blt.n	801533a <lwip_netconn_do_writemore+0x1aa>
 8015338:	7227      	strb	r7, [r4, #8]
 801533a:	f007 faf9 	bl	801c930 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801533e:	f1b8 0f00 	cmp.w	r8, #0
 8015342:	d11a      	bne.n	801537a <lwip_netconn_do_writemore+0x1ea>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8015344:	2000      	movs	r0, #0
}
 8015346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      err_t out_err = tcp_output(conn->pcb.tcp);
 801534a:	6860      	ldr	r0, [r4, #4]
 801534c:	f006 fd6c 	bl	801be28 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8015350:	f110 0f0c 	cmn.w	r0, #12
 8015354:	db0b      	blt.n	801536e <lwip_netconn_do_writemore+0x1de>
 8015356:	f110 0f04 	cmn.w	r0, #4
 801535a:	d008      	beq.n	801536e <lwip_netconn_do_writemore+0x1de>
      } else if (dontblock) {
 801535c:	2e00      	cmp	r6, #0
 801535e:	d0d8      	beq.n	8015312 <lwip_netconn_do_writemore+0x182>
        conn->current_msg->msg.w.len = 0;
 8015360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015362:	2200      	movs	r2, #0
 8015364:	60da      	str	r2, [r3, #12]
        write_finished = 1;
 8015366:	2601      	movs	r6, #1
        err = ERR_WOULDBLOCK;
 8015368:	f06f 0706 	mvn.w	r7, #6
 801536c:	e7d1      	b.n	8015312 <lwip_netconn_do_writemore+0x182>
        conn->current_msg->msg.w.len = 0;
 801536e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015370:	2200      	movs	r2, #0
 8015372:	60da      	str	r2, [r3, #12]
        err = out_err;
 8015374:	4607      	mov	r7, r0
        write_finished = 1;
 8015376:	2601      	movs	r6, #1
        conn->current_msg->msg.w.len = 0;
 8015378:	e7cb      	b.n	8015312 <lwip_netconn_do_writemore+0x182>
      sys_sem_signal(op_completed_sem);
 801537a:	4628      	mov	r0, r5
 801537c:	f007 fa7a 	bl	801c874 <sys_sem_signal>
  return ERR_OK;
 8015380:	2000      	movs	r0, #0
 8015382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return ERR_MEM;
 8015386:	f04f 30ff 	mov.w	r0, #4294967295
 801538a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801538e:	bf00      	nop
 8015390:	0802198c 	.word	0x0802198c
 8015394:	08021824 	.word	0x08021824
 8015398:	080214f0 	.word	0x080214f0
 801539c:	080216b0 	.word	0x080216b0
 80153a0:	080216c0 	.word	0x080216c0
 80153a4:	08021844 	.word	0x08021844
 80153a8:	0802185c 	.word	0x0802185c
 80153ac:	08021890 	.word	0x08021890

080153b0 <lwip_netconn_do_close_internal>:
{
 80153b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153b4:	4688      	mov	r8, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80153b6:	4604      	mov	r4, r0
 80153b8:	2800      	cmp	r0, #0
 80153ba:	d035      	beq.n	8015428 <lwip_netconn_do_close_internal+0x78>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80153bc:	7823      	ldrb	r3, [r4, #0]
 80153be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80153c2:	2b10      	cmp	r3, #16
 80153c4:	d006      	beq.n	80153d4 <lwip_netconn_do_close_internal+0x24>
 80153c6:	4b83      	ldr	r3, [pc, #524]	; (80155d4 <lwip_netconn_do_close_internal+0x224>)
 80153c8:	f44f 7251 	mov.w	r2, #836	; 0x344
 80153cc:	4982      	ldr	r1, [pc, #520]	; (80155d8 <lwip_netconn_do_close_internal+0x228>)
 80153ce:	4883      	ldr	r0, [pc, #524]	; (80155dc <lwip_netconn_do_close_internal+0x22c>)
 80153d0:	f00a fb8d 	bl	801faee <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80153d4:	7863      	ldrb	r3, [r4, #1]
 80153d6:	2b04      	cmp	r3, #4
 80153d8:	d006      	beq.n	80153e8 <lwip_netconn_do_close_internal+0x38>
 80153da:	4b7e      	ldr	r3, [pc, #504]	; (80155d4 <lwip_netconn_do_close_internal+0x224>)
 80153dc:	f240 3245 	movw	r2, #837	; 0x345
 80153e0:	497f      	ldr	r1, [pc, #508]	; (80155e0 <lwip_netconn_do_close_internal+0x230>)
 80153e2:	487e      	ldr	r0, [pc, #504]	; (80155dc <lwip_netconn_do_close_internal+0x22c>)
 80153e4:	f00a fb83 	bl	801faee <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80153e8:	6863      	ldr	r3, [r4, #4]
 80153ea:	b32b      	cbz	r3, 8015438 <lwip_netconn_do_close_internal+0x88>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80153ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153ee:	b35b      	cbz	r3, 8015448 <lwip_netconn_do_close_internal+0x98>
  tpcb = conn->pcb.tcp;
 80153f0:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80153f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153f4:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 80153f6:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80153fa:	f003 0902 	and.w	r9, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80153fe:	2b03      	cmp	r3, #3
 8015400:	d02a      	beq.n	8015458 <lwip_netconn_do_close_internal+0xa8>
  } else if (shut_rx &&
 8015402:	f1ba 0f00 	cmp.w	sl, #0
 8015406:	d006      	beq.n	8015416 <lwip_netconn_do_close_internal+0x66>
             ((tpcb->state == FIN_WAIT_1) ||
 8015408:	7d2a      	ldrb	r2, [r5, #20]
 801540a:	1f53      	subs	r3, r2, #5
 801540c:	b2db      	uxtb	r3, r3
  } else if (shut_rx &&
 801540e:	2b01      	cmp	r3, #1
 8015410:	d93a      	bls.n	8015488 <lwip_netconn_do_close_internal+0xd8>
              (tpcb->state == FIN_WAIT_2) ||
 8015412:	2a08      	cmp	r2, #8
 8015414:	d03a      	beq.n	801548c <lwip_netconn_do_close_internal+0xdc>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8015416:	f1b9 0f00 	cmp.w	r9, #0
 801541a:	d039      	beq.n	8015490 <lwip_netconn_do_close_internal+0xe0>
 801541c:	7eab      	ldrb	r3, [r5, #26]
 801541e:	f013 0f10 	tst.w	r3, #16
 8015422:	d137      	bne.n	8015494 <lwip_netconn_do_close_internal+0xe4>
    close = 0;
 8015424:	2700      	movs	r7, #0
 8015426:	e018      	b.n	801545a <lwip_netconn_do_close_internal+0xaa>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8015428:	4b6a      	ldr	r3, [pc, #424]	; (80155d4 <lwip_netconn_do_close_internal+0x224>)
 801542a:	f240 3243 	movw	r2, #835	; 0x343
 801542e:	496d      	ldr	r1, [pc, #436]	; (80155e4 <lwip_netconn_do_close_internal+0x234>)
 8015430:	486a      	ldr	r0, [pc, #424]	; (80155dc <lwip_netconn_do_close_internal+0x22c>)
 8015432:	f00a fb5c 	bl	801faee <iprintf>
 8015436:	e7c1      	b.n	80153bc <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8015438:	4b66      	ldr	r3, [pc, #408]	; (80155d4 <lwip_netconn_do_close_internal+0x224>)
 801543a:	f240 3246 	movw	r2, #838	; 0x346
 801543e:	496a      	ldr	r1, [pc, #424]	; (80155e8 <lwip_netconn_do_close_internal+0x238>)
 8015440:	4866      	ldr	r0, [pc, #408]	; (80155dc <lwip_netconn_do_close_internal+0x22c>)
 8015442:	f00a fb54 	bl	801faee <iprintf>
 8015446:	e7d1      	b.n	80153ec <lwip_netconn_do_close_internal+0x3c>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015448:	4b62      	ldr	r3, [pc, #392]	; (80155d4 <lwip_netconn_do_close_internal+0x224>)
 801544a:	f240 3247 	movw	r2, #839	; 0x347
 801544e:	4967      	ldr	r1, [pc, #412]	; (80155ec <lwip_netconn_do_close_internal+0x23c>)
 8015450:	4862      	ldr	r0, [pc, #392]	; (80155dc <lwip_netconn_do_close_internal+0x22c>)
 8015452:	f00a fb4c 	bl	801faee <iprintf>
 8015456:	e7cb      	b.n	80153f0 <lwip_netconn_do_close_internal+0x40>
    close = 1;
 8015458:	2701      	movs	r7, #1
  if (close) {
 801545a:	b9ef      	cbnz	r7, 8015498 <lwip_netconn_do_close_internal+0xe8>
  if (tpcb->state == LISTEN) {
 801545c:	7d2b      	ldrb	r3, [r5, #20]
 801545e:	2b01      	cmp	r3, #1
 8015460:	d01f      	beq.n	80154a2 <lwip_netconn_do_close_internal+0xf2>
    if (shut_rx) {
 8015462:	f1ba 0f00 	cmp.w	sl, #0
 8015466:	d121      	bne.n	80154ac <lwip_netconn_do_close_internal+0xfc>
    if (shut_tx) {
 8015468:	f1b9 0f00 	cmp.w	r9, #0
 801546c:	d127      	bne.n	80154be <lwip_netconn_do_close_internal+0x10e>
    if (close) {
 801546e:	bb5f      	cbnz	r7, 80154c8 <lwip_netconn_do_close_internal+0x118>
  if (close) {
 8015470:	b3a7      	cbz	r7, 80154dc <lwip_netconn_do_close_internal+0x12c>
      err = tcp_close(tpcb);
 8015472:	4628      	mov	r0, r5
 8015474:	f004 f906 	bl	8019684 <tcp_close>
 8015478:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 801547a:	2e00      	cmp	r6, #0
 801547c:	d042      	beq.n	8015504 <lwip_netconn_do_close_internal+0x154>
    if (err == ERR_MEM) {
 801547e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8015482:	d032      	beq.n	80154ea <lwip_netconn_do_close_internal+0x13a>
      close_finished = 1;
 8015484:	2301      	movs	r3, #1
 8015486:	e03e      	b.n	8015506 <lwip_netconn_do_close_internal+0x156>
    close = 1;
 8015488:	2701      	movs	r7, #1
 801548a:	e7e6      	b.n	801545a <lwip_netconn_do_close_internal+0xaa>
 801548c:	2701      	movs	r7, #1
 801548e:	e7e4      	b.n	801545a <lwip_netconn_do_close_internal+0xaa>
    close = 0;
 8015490:	2700      	movs	r7, #0
 8015492:	e7e2      	b.n	801545a <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8015494:	2701      	movs	r7, #1
 8015496:	e7e0      	b.n	801545a <lwip_netconn_do_close_internal+0xaa>
    tcp_arg(tpcb, NULL);
 8015498:	2100      	movs	r1, #0
 801549a:	4628      	mov	r0, r5
 801549c:	f003 fd5f 	bl	8018f5e <tcp_arg>
 80154a0:	e7dc      	b.n	801545c <lwip_netconn_do_close_internal+0xac>
    tcp_accept(tpcb, NULL);
 80154a2:	2100      	movs	r1, #0
 80154a4:	4628      	mov	r0, r5
 80154a6:	f003 fda9 	bl	8018ffc <tcp_accept>
 80154aa:	e7e1      	b.n	8015470 <lwip_netconn_do_close_internal+0xc0>
      tcp_recv(tpcb, NULL);
 80154ac:	2100      	movs	r1, #0
 80154ae:	4628      	mov	r0, r5
 80154b0:	f003 fd58 	bl	8018f64 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80154b4:	2100      	movs	r1, #0
 80154b6:	4628      	mov	r0, r5
 80154b8:	f003 fda0 	bl	8018ffc <tcp_accept>
 80154bc:	e7d4      	b.n	8015468 <lwip_netconn_do_close_internal+0xb8>
      tcp_sent(tpcb, NULL);
 80154be:	2100      	movs	r1, #0
 80154c0:	4628      	mov	r0, r5
 80154c2:	f003 fd69 	bl	8018f98 <tcp_sent>
 80154c6:	e7d2      	b.n	801546e <lwip_netconn_do_close_internal+0xbe>
      tcp_poll(tpcb, NULL, 0);
 80154c8:	2200      	movs	r2, #0
 80154ca:	4611      	mov	r1, r2
 80154cc:	4628      	mov	r0, r5
 80154ce:	f003 fd9d 	bl	801900c <tcp_poll>
      tcp_err(tpcb, NULL);
 80154d2:	2100      	movs	r1, #0
 80154d4:	4628      	mov	r0, r5
 80154d6:	f003 fd77 	bl	8018fc8 <tcp_err>
 80154da:	e7c9      	b.n	8015470 <lwip_netconn_do_close_internal+0xc0>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80154dc:	464a      	mov	r2, r9
 80154de:	4651      	mov	r1, sl
 80154e0:	4628      	mov	r0, r5
 80154e2:	f004 f977 	bl	80197d4 <tcp_shutdown>
 80154e6:	4606      	mov	r6, r0
 80154e8:	e7c7      	b.n	801547a <lwip_netconn_do_close_internal+0xca>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80154ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154ec:	7a5b      	ldrb	r3, [r3, #9]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d13f      	bne.n	8015572 <lwip_netconn_do_close_internal+0x1c2>
        if (close) {
 80154f2:	b90f      	cbnz	r7, 80154f8 <lwip_netconn_do_close_internal+0x148>
        close_finished = 1;
 80154f4:	2301      	movs	r3, #1
 80154f6:	e006      	b.n	8015506 <lwip_netconn_do_close_internal+0x156>
          tcp_abort(tpcb);
 80154f8:	4628      	mov	r0, r5
 80154fa:	f004 fa13 	bl	8019924 <tcp_abort>
        close_finished = 1;
 80154fe:	463b      	mov	r3, r7
          err = ERR_OK;
 8015500:	2600      	movs	r6, #0
 8015502:	e000      	b.n	8015506 <lwip_netconn_do_close_internal+0x156>
    close_finished = 1;
 8015504:	2301      	movs	r3, #1
  if (close_finished) {
 8015506:	2b00      	cmp	r3, #0
 8015508:	d03a      	beq.n	8015580 <lwip_netconn_do_close_internal+0x1d0>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801550a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801550c:	681d      	ldr	r5, [r3, #0]
 801550e:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 8015510:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8015512:	2300      	movs	r3, #0
 8015514:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8015516:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8015518:	b9ce      	cbnz	r6, 801554e <lwip_netconn_do_close_internal+0x19e>
      if (close) {
 801551a:	b137      	cbz	r7, 801552a <lwip_netconn_do_close_internal+0x17a>
        conn->pcb.tcp = NULL;
 801551c:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801551e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015520:	b11b      	cbz	r3, 801552a <lwip_netconn_do_close_internal+0x17a>
 8015522:	2200      	movs	r2, #0
 8015524:	2104      	movs	r1, #4
 8015526:	4620      	mov	r0, r4
 8015528:	4798      	blx	r3
      if (shut_rx) {
 801552a:	f1ba 0f00 	cmp.w	sl, #0
 801552e:	d005      	beq.n	801553c <lwip_netconn_do_close_internal+0x18c>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015530:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015532:	b11b      	cbz	r3, 801553c <lwip_netconn_do_close_internal+0x18c>
 8015534:	2200      	movs	r2, #0
 8015536:	4611      	mov	r1, r2
 8015538:	4620      	mov	r0, r4
 801553a:	4798      	blx	r3
      if (shut_tx) {
 801553c:	f1b9 0f00 	cmp.w	r9, #0
 8015540:	d005      	beq.n	801554e <lwip_netconn_do_close_internal+0x19e>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015542:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015544:	b11b      	cbz	r3, 801554e <lwip_netconn_do_close_internal+0x19e>
 8015546:	2200      	movs	r2, #0
 8015548:	2102      	movs	r1, #2
 801554a:	4620      	mov	r0, r4
 801554c:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 801554e:	b14c      	cbz	r4, 8015564 <lwip_netconn_do_close_internal+0x1b4>
 8015550:	f007 f9e2 	bl	801c918 <sys_arch_protect>
 8015554:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8015558:	f113 0f0c 	cmn.w	r3, #12
 801555c:	db00      	blt.n	8015560 <lwip_netconn_do_close_internal+0x1b0>
 801555e:	7226      	strb	r6, [r4, #8]
 8015560:	f007 f9e6 	bl	801c930 <sys_arch_unprotect>
    if (delayed)
 8015564:	f1b8 0f00 	cmp.w	r8, #0
 8015568:	d105      	bne.n	8015576 <lwip_netconn_do_close_internal+0x1c6>
    return ERR_OK;
 801556a:	2600      	movs	r6, #0
}
 801556c:	4630      	mov	r0, r6
 801556e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t close_finished = 0;
 8015572:	2300      	movs	r3, #0
 8015574:	e7c7      	b.n	8015506 <lwip_netconn_do_close_internal+0x156>
      sys_sem_signal(op_completed_sem);
 8015576:	4628      	mov	r0, r5
 8015578:	f007 f97c 	bl	801c874 <sys_sem_signal>
    return ERR_OK;
 801557c:	2600      	movs	r6, #0
 801557e:	e7f5      	b.n	801556c <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8015580:	7d2b      	ldrb	r3, [r5, #20]
 8015582:	2b01      	cmp	r3, #1
 8015584:	d019      	beq.n	80155ba <lwip_netconn_do_close_internal+0x20a>
    if (shut_tx) {
 8015586:	f1b9 0f00 	cmp.w	r9, #0
 801558a:	d11e      	bne.n	80155ca <lwip_netconn_do_close_internal+0x21a>
    tcp_poll(tpcb, poll_tcp, 1);
 801558c:	2201      	movs	r2, #1
 801558e:	4918      	ldr	r1, [pc, #96]	; (80155f0 <lwip_netconn_do_close_internal+0x240>)
 8015590:	4628      	mov	r0, r5
 8015592:	f003 fd3b 	bl	801900c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8015596:	4917      	ldr	r1, [pc, #92]	; (80155f4 <lwip_netconn_do_close_internal+0x244>)
 8015598:	4628      	mov	r0, r5
 801559a:	f003 fd15 	bl	8018fc8 <tcp_err>
    tcp_arg(tpcb, conn);
 801559e:	4621      	mov	r1, r4
 80155a0:	4628      	mov	r0, r5
 80155a2:	f003 fcdc 	bl	8018f5e <tcp_arg>
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80155a6:	2e00      	cmp	r6, #0
 80155a8:	d1e0      	bne.n	801556c <lwip_netconn_do_close_internal+0x1bc>
 80155aa:	4b0a      	ldr	r3, [pc, #40]	; (80155d4 <lwip_netconn_do_close_internal+0x224>)
 80155ac:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80155b0:	4911      	ldr	r1, [pc, #68]	; (80155f8 <lwip_netconn_do_close_internal+0x248>)
 80155b2:	480a      	ldr	r0, [pc, #40]	; (80155dc <lwip_netconn_do_close_internal+0x22c>)
 80155b4:	f00a fa9b 	bl	801faee <iprintf>
 80155b8:	e7d8      	b.n	801556c <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80155ba:	4b06      	ldr	r3, [pc, #24]	; (80155d4 <lwip_netconn_do_close_internal+0x224>)
 80155bc:	f240 32e3 	movw	r2, #995	; 0x3e3
 80155c0:	490e      	ldr	r1, [pc, #56]	; (80155fc <lwip_netconn_do_close_internal+0x24c>)
 80155c2:	4806      	ldr	r0, [pc, #24]	; (80155dc <lwip_netconn_do_close_internal+0x22c>)
 80155c4:	f00a fa93 	bl	801faee <iprintf>
 80155c8:	e7dd      	b.n	8015586 <lwip_netconn_do_close_internal+0x1d6>
      tcp_sent(tpcb, sent_tcp);
 80155ca:	490d      	ldr	r1, [pc, #52]	; (8015600 <lwip_netconn_do_close_internal+0x250>)
 80155cc:	4628      	mov	r0, r5
 80155ce:	f003 fce3 	bl	8018f98 <tcp_sent>
 80155d2:	e7db      	b.n	801558c <lwip_netconn_do_close_internal+0x1dc>
 80155d4:	0802198c 	.word	0x0802198c
 80155d8:	08021714 	.word	0x08021714
 80155dc:	080214f0 	.word	0x080214f0
 80155e0:	08021734 	.word	0x08021734
 80155e4:	08021588 	.word	0x08021588
 80155e8:	08021758 	.word	0x08021758
 80155ec:	080216c0 	.word	0x080216c0
 80155f0:	08015605 	.word	0x08015605
 80155f4:	08015051 	.word	0x08015051
 80155f8:	08021790 	.word	0x08021790
 80155fc:	0802176c 	.word	0x0802176c
 8015600:	08015689 	.word	0x08015689

08015604 <poll_tcp>:
{
 8015604:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015606:	4604      	mov	r4, r0
 8015608:	b1f8      	cbz	r0, 801564a <poll_tcp+0x46>
  if (conn->state == NETCONN_WRITE) {
 801560a:	7863      	ldrb	r3, [r4, #1]
 801560c:	2b01      	cmp	r3, #1
 801560e:	d024      	beq.n	801565a <poll_tcp+0x56>
  } else if (conn->state == NETCONN_CLOSE) {
 8015610:	2b04      	cmp	r3, #4
 8015612:	d027      	beq.n	8015664 <poll_tcp+0x60>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8015614:	7f23      	ldrb	r3, [r4, #28]
 8015616:	f013 0f10 	tst.w	r3, #16
 801561a:	d014      	beq.n	8015646 <poll_tcp+0x42>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801561c:	6862      	ldr	r2, [r4, #4]
 801561e:	b192      	cbz	r2, 8015646 <poll_tcp+0x42>
 8015620:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
 8015624:	f240 51a1 	movw	r1, #1441	; 0x5a1
 8015628:	4288      	cmp	r0, r1
 801562a:	d90c      	bls.n	8015646 <poll_tcp+0x42>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801562c:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015630:	2a04      	cmp	r2, #4
 8015632:	d808      	bhi.n	8015646 <poll_tcp+0x42>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8015634:	f023 0310 	bic.w	r3, r3, #16
 8015638:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801563a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801563c:	b11b      	cbz	r3, 8015646 <poll_tcp+0x42>
 801563e:	2200      	movs	r2, #0
 8015640:	2102      	movs	r1, #2
 8015642:	4620      	mov	r0, r4
 8015644:	4798      	blx	r3
}
 8015646:	2000      	movs	r0, #0
 8015648:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801564a:	4b0c      	ldr	r3, [pc, #48]	; (801567c <poll_tcp+0x78>)
 801564c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015650:	490b      	ldr	r1, [pc, #44]	; (8015680 <poll_tcp+0x7c>)
 8015652:	480c      	ldr	r0, [pc, #48]	; (8015684 <poll_tcp+0x80>)
 8015654:	f00a fa4b 	bl	801faee <iprintf>
 8015658:	e7d7      	b.n	801560a <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801565a:	2101      	movs	r1, #1
 801565c:	4620      	mov	r0, r4
 801565e:	f7ff fd97 	bl	8015190 <lwip_netconn_do_writemore>
 8015662:	e7d7      	b.n	8015614 <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8015664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015666:	b11b      	cbz	r3, 8015670 <poll_tcp+0x6c>
 8015668:	7a5a      	ldrb	r2, [r3, #9]
 801566a:	b10a      	cbz	r2, 8015670 <poll_tcp+0x6c>
      conn->current_msg->msg.sd.polls_left--;
 801566c:	3a01      	subs	r2, #1
 801566e:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8015670:	2101      	movs	r1, #1
 8015672:	4620      	mov	r0, r4
 8015674:	f7ff fe9c 	bl	80153b0 <lwip_netconn_do_close_internal>
 8015678:	e7cc      	b.n	8015614 <poll_tcp+0x10>
 801567a:	bf00      	nop
 801567c:	0802198c 	.word	0x0802198c
 8015680:	080216b0 	.word	0x080216b0
 8015684:	080214f0 	.word	0x080214f0

08015688 <sent_tcp>:
{
 8015688:	b538      	push	{r3, r4, r5, lr}
 801568a:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801568c:	4604      	mov	r4, r0
 801568e:	b1e8      	cbz	r0, 80156cc <sent_tcp+0x44>
  if (conn) {
 8015690:	b1d4      	cbz	r4, 80156c8 <sent_tcp+0x40>
    if (conn->state == NETCONN_WRITE) {
 8015692:	7863      	ldrb	r3, [r4, #1]
 8015694:	2b01      	cmp	r3, #1
 8015696:	d021      	beq.n	80156dc <sent_tcp+0x54>
    } else if (conn->state == NETCONN_CLOSE) {
 8015698:	2b04      	cmp	r3, #4
 801569a:	d024      	beq.n	80156e6 <sent_tcp+0x5e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801569c:	6863      	ldr	r3, [r4, #4]
 801569e:	b19b      	cbz	r3, 80156c8 <sent_tcp+0x40>
 80156a0:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 80156a4:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80156a8:	4291      	cmp	r1, r2
 80156aa:	d90d      	bls.n	80156c8 <sent_tcp+0x40>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80156ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80156b0:	2b04      	cmp	r3, #4
 80156b2:	d809      	bhi.n	80156c8 <sent_tcp+0x40>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80156b4:	7f23      	ldrb	r3, [r4, #28]
 80156b6:	f023 0310 	bic.w	r3, r3, #16
 80156ba:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80156bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80156be:	b11b      	cbz	r3, 80156c8 <sent_tcp+0x40>
 80156c0:	462a      	mov	r2, r5
 80156c2:	2102      	movs	r1, #2
 80156c4:	4620      	mov	r0, r4
 80156c6:	4798      	blx	r3
}
 80156c8:	2000      	movs	r0, #0
 80156ca:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80156cc:	4b08      	ldr	r3, [pc, #32]	; (80156f0 <sent_tcp+0x68>)
 80156ce:	f240 1261 	movw	r2, #353	; 0x161
 80156d2:	4908      	ldr	r1, [pc, #32]	; (80156f4 <sent_tcp+0x6c>)
 80156d4:	4808      	ldr	r0, [pc, #32]	; (80156f8 <sent_tcp+0x70>)
 80156d6:	f00a fa0a 	bl	801faee <iprintf>
 80156da:	e7d9      	b.n	8015690 <sent_tcp+0x8>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80156dc:	2101      	movs	r1, #1
 80156de:	4620      	mov	r0, r4
 80156e0:	f7ff fd56 	bl	8015190 <lwip_netconn_do_writemore>
 80156e4:	e7da      	b.n	801569c <sent_tcp+0x14>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80156e6:	2101      	movs	r1, #1
 80156e8:	4620      	mov	r0, r4
 80156ea:	f7ff fe61 	bl	80153b0 <lwip_netconn_do_close_internal>
 80156ee:	e7d5      	b.n	801569c <sent_tcp+0x14>
 80156f0:	0802198c 	.word	0x0802198c
 80156f4:	080216b0 	.word	0x080216b0
 80156f8:	080214f0 	.word	0x080214f0

080156fc <recv_tcp>:
{
 80156fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015700:	4604      	mov	r4, r0
 8015702:	4615      	mov	r5, r2
 8015704:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8015706:	460f      	mov	r7, r1
 8015708:	b1e9      	cbz	r1, 8015746 <recv_tcp+0x4a>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801570a:	b31c      	cbz	r4, 8015754 <recv_tcp+0x58>
  if (conn == NULL) {
 801570c:	2c00      	cmp	r4, #0
 801570e:	d04a      	beq.n	80157a6 <recv_tcp+0xaa>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8015710:	6863      	ldr	r3, [r4, #4]
 8015712:	429f      	cmp	r7, r3
 8015714:	d006      	beq.n	8015724 <recv_tcp+0x28>
 8015716:	4b28      	ldr	r3, [pc, #160]	; (80157b8 <recv_tcp+0xbc>)
 8015718:	f44f 7280 	mov.w	r2, #256	; 0x100
 801571c:	4927      	ldr	r1, [pc, #156]	; (80157bc <recv_tcp+0xc0>)
 801571e:	4828      	ldr	r0, [pc, #160]	; (80157c0 <recv_tcp+0xc4>)
 8015720:	f00a f9e5 	bl	801faee <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8015724:	f104 0610 	add.w	r6, r4, #16
 8015728:	4630      	mov	r0, r6
 801572a:	f007 f863 	bl	801c7f4 <sys_mbox_valid>
 801572e:	b9c0      	cbnz	r0, 8015762 <recv_tcp+0x66>
    if (p != NULL) {
 8015730:	2d00      	cmp	r5, #0
 8015732:	d03b      	beq.n	80157ac <recv_tcp+0xb0>
      tcp_recved(pcb, p->tot_len);
 8015734:	8929      	ldrh	r1, [r5, #8]
 8015736:	4638      	mov	r0, r7
 8015738:	f003 fba4 	bl	8018e84 <tcp_recved>
      pbuf_free(p);
 801573c:	4628      	mov	r0, r5
 801573e:	f002 feff 	bl	8018540 <pbuf_free>
    return ERR_OK;
 8015742:	2500      	movs	r5, #0
 8015744:	e01e      	b.n	8015784 <recv_tcp+0x88>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8015746:	4b1c      	ldr	r3, [pc, #112]	; (80157b8 <recv_tcp+0xbc>)
 8015748:	22f9      	movs	r2, #249	; 0xf9
 801574a:	491e      	ldr	r1, [pc, #120]	; (80157c4 <recv_tcp+0xc8>)
 801574c:	481c      	ldr	r0, [pc, #112]	; (80157c0 <recv_tcp+0xc4>)
 801574e:	f00a f9ce 	bl	801faee <iprintf>
 8015752:	e7da      	b.n	801570a <recv_tcp+0xe>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8015754:	4b18      	ldr	r3, [pc, #96]	; (80157b8 <recv_tcp+0xbc>)
 8015756:	22fa      	movs	r2, #250	; 0xfa
 8015758:	491b      	ldr	r1, [pc, #108]	; (80157c8 <recv_tcp+0xcc>)
 801575a:	4819      	ldr	r0, [pc, #100]	; (80157c0 <recv_tcp+0xc4>)
 801575c:	f00a f9c7 	bl	801faee <iprintf>
 8015760:	e7d4      	b.n	801570c <recv_tcp+0x10>
  if (err != ERR_OK) {
 8015762:	f1b8 0f00 	cmp.w	r8, #0
 8015766:	d110      	bne.n	801578a <recv_tcp+0x8e>
  if (p != NULL) {
 8015768:	b1dd      	cbz	r5, 80157a2 <recv_tcp+0xa6>
    len = p->tot_len;
 801576a:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 801576c:	4629      	mov	r1, r5
 801576e:	4630      	mov	r0, r6
 8015770:	f006 fff7 	bl	801c762 <sys_mbox_trypost>
 8015774:	4605      	mov	r5, r0
 8015776:	b9d8      	cbnz	r0, 80157b0 <recv_tcp+0xb4>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8015778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801577a:	b11b      	cbz	r3, 8015784 <recv_tcp+0x88>
 801577c:	463a      	mov	r2, r7
 801577e:	2100      	movs	r1, #0
 8015780:	4620      	mov	r0, r4
 8015782:	4798      	blx	r3
}
 8015784:	4628      	mov	r0, r5
 8015786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NETCONN_SET_SAFE_ERR(conn, err);
 801578a:	f007 f8c5 	bl	801c918 <sys_arch_protect>
 801578e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8015792:	f113 0f0c 	cmn.w	r3, #12
 8015796:	db01      	blt.n	801579c <recv_tcp+0xa0>
 8015798:	f884 8008 	strb.w	r8, [r4, #8]
 801579c:	f007 f8c8 	bl	801c930 <sys_arch_unprotect>
 80157a0:	e7e2      	b.n	8015768 <recv_tcp+0x6c>
    len = 0;
 80157a2:	2700      	movs	r7, #0
 80157a4:	e7e2      	b.n	801576c <recv_tcp+0x70>
    return ERR_VAL;
 80157a6:	f06f 0505 	mvn.w	r5, #5
 80157aa:	e7eb      	b.n	8015784 <recv_tcp+0x88>
    return ERR_OK;
 80157ac:	2500      	movs	r5, #0
 80157ae:	e7e9      	b.n	8015784 <recv_tcp+0x88>
    return ERR_MEM;
 80157b0:	f04f 35ff 	mov.w	r5, #4294967295
 80157b4:	e7e6      	b.n	8015784 <recv_tcp+0x88>
 80157b6:	bf00      	nop
 80157b8:	0802198c 	.word	0x0802198c
 80157bc:	08021a24 	.word	0x08021a24
 80157c0:	080214f0 	.word	0x080214f0
 80157c4:	080219e0 	.word	0x080219e0
 80157c8:	08021a04 	.word	0x08021a04

080157cc <lwip_netconn_do_newconn>:
{
 80157cc:	b510      	push	{r4, lr}
 80157ce:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 80157d0:	2300      	movs	r3, #0
 80157d2:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80157d4:	6803      	ldr	r3, [r0, #0]
 80157d6:	685b      	ldr	r3, [r3, #4]
 80157d8:	b17b      	cbz	r3, 80157fa <lwip_netconn_do_newconn+0x2e>
  TCPIP_APIMSG_ACK(msg);
 80157da:	6823      	ldr	r3, [r4, #0]
 80157dc:	b163      	cbz	r3, 80157f8 <lwip_netconn_do_newconn+0x2c>
 80157de:	f007 f89b 	bl	801c918 <sys_arch_protect>
 80157e2:	6823      	ldr	r3, [r4, #0]
 80157e4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80157e8:	f112 0f0c 	cmn.w	r2, #12
 80157ec:	db02      	blt.n	80157f4 <lwip_netconn_do_newconn+0x28>
 80157ee:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80157f2:	721a      	strb	r2, [r3, #8]
 80157f4:	f007 f89c 	bl	801c930 <sys_arch_unprotect>
 80157f8:	bd10      	pop	{r4, pc}
    pcb_new(msg);
 80157fa:	f7ff fbfd 	bl	8014ff8 <pcb_new>
 80157fe:	e7ec      	b.n	80157da <lwip_netconn_do_newconn+0xe>

08015800 <netconn_alloc>:
{
 8015800:	b570      	push	{r4, r5, r6, lr}
 8015802:	4605      	mov	r5, r0
 8015804:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8015806:	2006      	movs	r0, #6
 8015808:	f002 fc94 	bl	8018134 <memp_malloc>
  if (conn == NULL) {
 801580c:	4604      	mov	r4, r0
 801580e:	b308      	cbz	r0, 8015854 <netconn_alloc+0x54>
  conn->last_err = ERR_OK;
 8015810:	2300      	movs	r3, #0
 8015812:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8015814:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 8015816:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 8015818:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 801581c:	2d10      	cmp	r5, #16
 801581e:	d11b      	bne.n	8015858 <netconn_alloc+0x58>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8015820:	f100 0510 	add.w	r5, r0, #16
 8015824:	2106      	movs	r1, #6
 8015826:	4628      	mov	r0, r5
 8015828:	f006 ff72 	bl	801c710 <sys_mbox_new>
 801582c:	b9d8      	cbnz	r0, 8015866 <netconn_alloc+0x66>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801582e:	2100      	movs	r1, #0
 8015830:	f104 000c 	add.w	r0, r4, #12
 8015834:	f006 ffe7 	bl	801c806 <sys_sem_new>
 8015838:	b9d8      	cbnz	r0, 8015872 <netconn_alloc+0x72>
  sys_mbox_set_invalid(&conn->acceptmbox);
 801583a:	f104 0014 	add.w	r0, r4, #20
 801583e:	f006 ffdf 	bl	801c800 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8015842:	2300      	movs	r3, #0
 8015844:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8015846:	f04f 32ff 	mov.w	r2, #4294967295
 801584a:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 801584c:	62a6      	str	r6, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 801584e:	6263      	str	r3, [r4, #36]	; 0x24
  conn->write_offset = 0;
 8015850:	6223      	str	r3, [r4, #32]
  conn->flags = 0;
 8015852:	7723      	strb	r3, [r4, #28]
}
 8015854:	4620      	mov	r0, r4
 8015856:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8015858:	4b08      	ldr	r3, [pc, #32]	; (801587c <netconn_alloc+0x7c>)
 801585a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801585e:	4908      	ldr	r1, [pc, #32]	; (8015880 <netconn_alloc+0x80>)
 8015860:	4808      	ldr	r0, [pc, #32]	; (8015884 <netconn_alloc+0x84>)
 8015862:	f00a f944 	bl	801faee <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8015866:	4621      	mov	r1, r4
 8015868:	2006      	movs	r0, #6
 801586a:	f002 fc7d 	bl	8018168 <memp_free>
  return NULL;
 801586e:	2400      	movs	r4, #0
 8015870:	e7f0      	b.n	8015854 <netconn_alloc+0x54>
    sys_mbox_free(&conn->recvmbox);
 8015872:	4628      	mov	r0, r5
 8015874:	f006 ff60 	bl	801c738 <sys_mbox_free>
    goto free_and_return;
 8015878:	e7f5      	b.n	8015866 <netconn_alloc+0x66>
 801587a:	bf00      	nop
 801587c:	0802198c 	.word	0x0802198c
 8015880:	080218bc 	.word	0x080218bc
 8015884:	080214f0 	.word	0x080214f0

08015888 <netconn_free>:
{
 8015888:	b538      	push	{r3, r4, r5, lr}
 801588a:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 801588c:	6843      	ldr	r3, [r0, #4]
 801588e:	b133      	cbz	r3, 801589e <netconn_free+0x16>
 8015890:	4b16      	ldr	r3, [pc, #88]	; (80158ec <netconn_free+0x64>)
 8015892:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8015896:	4916      	ldr	r1, [pc, #88]	; (80158f0 <netconn_free+0x68>)
 8015898:	4816      	ldr	r0, [pc, #88]	; (80158f4 <netconn_free+0x6c>)
 801589a:	f00a f928 	bl	801faee <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 801589e:	f104 0010 	add.w	r0, r4, #16
 80158a2:	f006 ffa7 	bl	801c7f4 <sys_mbox_valid>
 80158a6:	b988      	cbnz	r0, 80158cc <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80158a8:	f104 0014 	add.w	r0, r4, #20
 80158ac:	f006 ffa2 	bl	801c7f4 <sys_mbox_valid>
 80158b0:	b9a0      	cbnz	r0, 80158dc <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 80158b2:	f104 050c 	add.w	r5, r4, #12
 80158b6:	4628      	mov	r0, r5
 80158b8:	f006 ffe1 	bl	801c87e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80158bc:	4628      	mov	r0, r5
 80158be:	f006 ffe9 	bl	801c894 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 80158c2:	4621      	mov	r1, r4
 80158c4:	2006      	movs	r0, #6
 80158c6:	f002 fc4f 	bl	8018168 <memp_free>
 80158ca:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80158cc:	4b07      	ldr	r3, [pc, #28]	; (80158ec <netconn_free+0x64>)
 80158ce:	f240 22e2 	movw	r2, #738	; 0x2e2
 80158d2:	4909      	ldr	r1, [pc, #36]	; (80158f8 <netconn_free+0x70>)
 80158d4:	4807      	ldr	r0, [pc, #28]	; (80158f4 <netconn_free+0x6c>)
 80158d6:	f00a f90a 	bl	801faee <iprintf>
 80158da:	e7e5      	b.n	80158a8 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80158dc:	4b03      	ldr	r3, [pc, #12]	; (80158ec <netconn_free+0x64>)
 80158de:	f240 22e5 	movw	r2, #741	; 0x2e5
 80158e2:	4906      	ldr	r1, [pc, #24]	; (80158fc <netconn_free+0x74>)
 80158e4:	4803      	ldr	r0, [pc, #12]	; (80158f4 <netconn_free+0x6c>)
 80158e6:	f00a f902 	bl	801faee <iprintf>
 80158ea:	e7e2      	b.n	80158b2 <netconn_free+0x2a>
 80158ec:	0802198c 	.word	0x0802198c
 80158f0:	080218e4 	.word	0x080218e4
 80158f4:	080214f0 	.word	0x080214f0
 80158f8:	08021914 	.word	0x08021914
 80158fc:	08021950 	.word	0x08021950

08015900 <netconn_drain>:
{
 8015900:	b570      	push	{r4, r5, r6, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	4605      	mov	r5, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8015906:	f100 0410 	add.w	r4, r0, #16
 801590a:	4620      	mov	r0, r4
 801590c:	f006 ff72 	bl	801c7f4 <sys_mbox_valid>
 8015910:	bb38      	cbnz	r0, 8015962 <netconn_drain+0x62>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8015912:	3514      	adds	r5, #20
 8015914:	4628      	mov	r0, r5
 8015916:	f006 ff6d 	bl	801c7f4 <sys_mbox_valid>
 801591a:	2800      	cmp	r0, #0
 801591c:	d03e      	beq.n	801599c <netconn_drain+0x9c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801591e:	a901      	add	r1, sp, #4
 8015920:	4628      	mov	r0, r5
 8015922:	f006 ff54 	bl	801c7ce <sys_arch_mbox_tryfetch>
 8015926:	f1b0 3fff 	cmp.w	r0, #4294967295
 801592a:	d031      	beq.n	8015990 <netconn_drain+0x90>
      if (mem != &netconn_aborted) {
 801592c:	9c01      	ldr	r4, [sp, #4]
 801592e:	4b1c      	ldr	r3, [pc, #112]	; (80159a0 <netconn_drain+0xa0>)
 8015930:	429c      	cmp	r4, r3
 8015932:	d0f4      	beq.n	801591e <netconn_drain+0x1e>
        netconn_drain(newconn);
 8015934:	4620      	mov	r0, r4
 8015936:	f7ff ffe3 	bl	8015900 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 801593a:	6860      	ldr	r0, [r4, #4]
 801593c:	b118      	cbz	r0, 8015946 <netconn_drain+0x46>
          tcp_abort(newconn->pcb.tcp);
 801593e:	f003 fff1 	bl	8019924 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8015942:	2300      	movs	r3, #0
 8015944:	6063      	str	r3, [r4, #4]
        netconn_free(newconn);
 8015946:	4620      	mov	r0, r4
 8015948:	f7ff ff9e 	bl	8015888 <netconn_free>
 801594c:	e7e7      	b.n	801591e <netconn_drain+0x1e>
        if (mem != NULL) {
 801594e:	9e01      	ldr	r6, [sp, #4]
 8015950:	b13e      	cbz	r6, 8015962 <netconn_drain+0x62>
          if (conn->pcb.tcp != NULL) {
 8015952:	6868      	ldr	r0, [r5, #4]
 8015954:	b110      	cbz	r0, 801595c <netconn_drain+0x5c>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8015956:	8931      	ldrh	r1, [r6, #8]
 8015958:	f003 fa94 	bl	8018e84 <tcp_recved>
          pbuf_free(p);
 801595c:	4630      	mov	r0, r6
 801595e:	f002 fdef 	bl	8018540 <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8015962:	a901      	add	r1, sp, #4
 8015964:	4620      	mov	r0, r4
 8015966:	f006 ff32 	bl	801c7ce <sys_arch_mbox_tryfetch>
 801596a:	f1b0 3fff 	cmp.w	r0, #4294967295
 801596e:	d008      	beq.n	8015982 <netconn_drain+0x82>
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8015970:	782b      	ldrb	r3, [r5, #0]
 8015972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015976:	2b10      	cmp	r3, #16
 8015978:	d0e9      	beq.n	801594e <netconn_drain+0x4e>
        netbuf_delete((struct netbuf *)mem);
 801597a:	9801      	ldr	r0, [sp, #4]
 801597c:	f000 fb50 	bl	8016020 <netbuf_delete>
 8015980:	e7ef      	b.n	8015962 <netconn_drain+0x62>
    sys_mbox_free(&conn->recvmbox);
 8015982:	4620      	mov	r0, r4
 8015984:	f006 fed8 	bl	801c738 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8015988:	4620      	mov	r0, r4
 801598a:	f006 ff39 	bl	801c800 <sys_mbox_set_invalid>
 801598e:	e7c0      	b.n	8015912 <netconn_drain+0x12>
    sys_mbox_free(&conn->acceptmbox);
 8015990:	4628      	mov	r0, r5
 8015992:	f006 fed1 	bl	801c738 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8015996:	4628      	mov	r0, r5
 8015998:	f006 ff32 	bl	801c800 <sys_mbox_set_invalid>
}
 801599c:	b002      	add	sp, #8
 801599e:	bd70      	pop	{r4, r5, r6, pc}
 80159a0:	20011038 	.word	0x20011038

080159a4 <accept_function>:
{
 80159a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (conn == NULL) {
 80159a8:	2800      	cmp	r0, #0
 80159aa:	d067      	beq.n	8015a7c <accept_function+0xd8>
 80159ac:	4604      	mov	r4, r0
 80159ae:	4616      	mov	r6, r2
 80159b0:	460d      	mov	r5, r1
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80159b2:	f100 0814 	add.w	r8, r0, #20
 80159b6:	4640      	mov	r0, r8
 80159b8:	f006 ff1c 	bl	801c7f4 <sys_mbox_valid>
 80159bc:	2800      	cmp	r0, #0
 80159be:	d060      	beq.n	8015a82 <accept_function+0xde>
  if (newpcb == NULL) {
 80159c0:	b1c5      	cbz	r5, 80159f4 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 80159c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80159c4:	7820      	ldrb	r0, [r4, #0]
 80159c6:	f7ff ff1b 	bl	8015800 <netconn_alloc>
  if (newconn == NULL) {
 80159ca:	4607      	mov	r7, r0
 80159cc:	b310      	cbz	r0, 8015a14 <accept_function+0x70>
  newconn->pcb.tcp = newpcb;
 80159ce:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 80159d0:	f7ff faf2 	bl	8014fb8 <setup_tcp>
  newconn->last_err = err;
 80159d4:	723e      	strb	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80159d6:	4639      	mov	r1, r7
 80159d8:	4640      	mov	r0, r8
 80159da:	f006 fec2 	bl	801c762 <sys_mbox_trypost>
 80159de:	4605      	mov	r5, r0
 80159e0:	bb30      	cbnz	r0, 8015a30 <accept_function+0x8c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80159e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80159e4:	b11b      	cbz	r3, 80159ee <accept_function+0x4a>
 80159e6:	2200      	movs	r2, #0
 80159e8:	4611      	mov	r1, r2
 80159ea:	4620      	mov	r0, r4
 80159ec:	4798      	blx	r3
}
 80159ee:	4628      	mov	r0, r5
 80159f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 80159f4:	492a      	ldr	r1, [pc, #168]	; (8015aa0 <accept_function+0xfc>)
 80159f6:	4640      	mov	r0, r8
 80159f8:	f006 feb3 	bl	801c762 <sys_mbox_trypost>
 80159fc:	2800      	cmp	r0, #0
 80159fe:	d143      	bne.n	8015a88 <accept_function+0xe4>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015a00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d043      	beq.n	8015a8e <accept_function+0xea>
 8015a06:	2200      	movs	r2, #0
 8015a08:	4611      	mov	r1, r2
 8015a0a:	4620      	mov	r0, r4
 8015a0c:	4798      	blx	r3
    return ERR_VAL;
 8015a0e:	f06f 0505 	mvn.w	r5, #5
 8015a12:	e7ec      	b.n	80159ee <accept_function+0x4a>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8015a14:	4922      	ldr	r1, [pc, #136]	; (8015aa0 <accept_function+0xfc>)
 8015a16:	4640      	mov	r0, r8
 8015a18:	f006 fea3 	bl	801c762 <sys_mbox_trypost>
 8015a1c:	bbd0      	cbnz	r0, 8015a94 <accept_function+0xf0>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015a1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015a20:	b3db      	cbz	r3, 8015a9a <accept_function+0xf6>
 8015a22:	2200      	movs	r2, #0
 8015a24:	4611      	mov	r1, r2
 8015a26:	4620      	mov	r0, r4
 8015a28:	4798      	blx	r3
    return ERR_MEM;
 8015a2a:	f04f 35ff 	mov.w	r5, #4294967295
 8015a2e:	e7de      	b.n	80159ee <accept_function+0x4a>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8015a30:	687c      	ldr	r4, [r7, #4]
    tcp_arg(pcb, NULL);
 8015a32:	2100      	movs	r1, #0
 8015a34:	4620      	mov	r0, r4
 8015a36:	f003 fa92 	bl	8018f5e <tcp_arg>
    tcp_recv(pcb, NULL);
 8015a3a:	2100      	movs	r1, #0
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	f003 fa91 	bl	8018f64 <tcp_recv>
    tcp_sent(pcb, NULL);
 8015a42:	2100      	movs	r1, #0
 8015a44:	4620      	mov	r0, r4
 8015a46:	f003 faa7 	bl	8018f98 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	4611      	mov	r1, r2
 8015a4e:	4620      	mov	r0, r4
 8015a50:	f003 fadc 	bl	801900c <tcp_poll>
    tcp_err(pcb, NULL);
 8015a54:	2100      	movs	r1, #0
 8015a56:	4620      	mov	r0, r4
 8015a58:	f003 fab6 	bl	8018fc8 <tcp_err>
    newconn->pcb.tcp = NULL;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	607b      	str	r3, [r7, #4]
    sys_mbox_free(&newconn->recvmbox);
 8015a60:	f107 0410 	add.w	r4, r7, #16
 8015a64:	4620      	mov	r0, r4
 8015a66:	f006 fe67 	bl	801c738 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	f006 fec8 	bl	801c800 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8015a70:	4638      	mov	r0, r7
 8015a72:	f7ff ff09 	bl	8015888 <netconn_free>
    return ERR_MEM;
 8015a76:	f04f 35ff 	mov.w	r5, #4294967295
 8015a7a:	e7b8      	b.n	80159ee <accept_function+0x4a>
    return ERR_VAL;
 8015a7c:	f06f 0505 	mvn.w	r5, #5
 8015a80:	e7b5      	b.n	80159ee <accept_function+0x4a>
    return ERR_VAL;
 8015a82:	f06f 0505 	mvn.w	r5, #5
 8015a86:	e7b2      	b.n	80159ee <accept_function+0x4a>
    return ERR_VAL;
 8015a88:	f06f 0505 	mvn.w	r5, #5
 8015a8c:	e7af      	b.n	80159ee <accept_function+0x4a>
 8015a8e:	f06f 0505 	mvn.w	r5, #5
 8015a92:	e7ac      	b.n	80159ee <accept_function+0x4a>
    return ERR_MEM;
 8015a94:	f04f 35ff 	mov.w	r5, #4294967295
 8015a98:	e7a9      	b.n	80159ee <accept_function+0x4a>
 8015a9a:	f04f 35ff 	mov.w	r5, #4294967295
 8015a9e:	e7a6      	b.n	80159ee <accept_function+0x4a>
 8015aa0:	20011038 	.word	0x20011038

08015aa4 <lwip_netconn_do_delconn>:
{
 8015aa4:	b538      	push	{r3, r4, r5, lr}
 8015aa6:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 8015aa8:	6803      	ldr	r3, [r0, #0]
 8015aaa:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8015aac:	b15d      	cbz	r5, 8015ac6 <lwip_netconn_do_delconn+0x22>
 8015aae:	781b      	ldrb	r3, [r3, #0]
 8015ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ab4:	2b10      	cmp	r3, #16
 8015ab6:	d006      	beq.n	8015ac6 <lwip_netconn_do_delconn+0x22>
 8015ab8:	4b4b      	ldr	r3, [pc, #300]	; (8015be8 <lwip_netconn_do_delconn+0x144>)
 8015aba:	f240 4201 	movw	r2, #1025	; 0x401
 8015abe:	494b      	ldr	r1, [pc, #300]	; (8015bec <lwip_netconn_do_delconn+0x148>)
 8015ac0:	484b      	ldr	r0, [pc, #300]	; (8015bf0 <lwip_netconn_do_delconn+0x14c>)
 8015ac2:	f00a f814 	bl	801faee <iprintf>
  if (((state != NETCONN_NONE) &&
 8015ac6:	b1d5      	cbz	r5, 8015afe <lwip_netconn_do_delconn+0x5a>
 8015ac8:	2d02      	cmp	r5, #2
 8015aca:	d018      	beq.n	8015afe <lwip_netconn_do_delconn+0x5a>
       (state != NETCONN_LISTEN) &&
 8015acc:	2d03      	cmp	r5, #3
 8015ace:	d016      	beq.n	8015afe <lwip_netconn_do_delconn+0x5a>
    msg->err = ERR_INPROGRESS;
 8015ad0:	23fb      	movs	r3, #251	; 0xfb
 8015ad2:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8015ad4:	6820      	ldr	r0, [r4, #0]
 8015ad6:	300c      	adds	r0, #12
 8015ad8:	f006 fed6 	bl	801c888 <sys_sem_valid>
 8015adc:	b170      	cbz	r0, 8015afc <lwip_netconn_do_delconn+0x58>
    TCPIP_APIMSG_ACK(msg);
 8015ade:	6823      	ldr	r3, [r4, #0]
 8015ae0:	b163      	cbz	r3, 8015afc <lwip_netconn_do_delconn+0x58>
 8015ae2:	f006 ff19 	bl	801c918 <sys_arch_protect>
 8015ae6:	6823      	ldr	r3, [r4, #0]
 8015ae8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015aec:	f112 0f0c 	cmn.w	r2, #12
 8015af0:	db02      	blt.n	8015af8 <lwip_netconn_do_delconn+0x54>
 8015af2:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015af6:	721a      	strb	r2, [r3, #8]
 8015af8:	f006 ff1a 	bl	801c930 <sys_arch_unprotect>
 8015afc:	bd38      	pop	{r3, r4, r5, pc}
       (state != NETCONN_CONNECT)) ||
 8015afe:	2d03      	cmp	r5, #3
 8015b00:	d049      	beq.n	8015b96 <lwip_netconn_do_delconn+0xf2>
    LWIP_ASSERT("blocking connect in progress",
 8015b02:	2d03      	cmp	r5, #3
 8015b04:	d04d      	beq.n	8015ba2 <lwip_netconn_do_delconn+0xfe>
    msg->err = ERR_OK;
 8015b06:	2300      	movs	r3, #0
 8015b08:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 8015b0a:	6820      	ldr	r0, [r4, #0]
 8015b0c:	f7ff fef8 	bl	8015900 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8015b10:	6823      	ldr	r3, [r4, #0]
 8015b12:	685a      	ldr	r2, [r3, #4]
 8015b14:	2a00      	cmp	r2, #0
 8015b16:	d057      	beq.n	8015bc8 <lwip_netconn_do_delconn+0x124>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015b18:	781a      	ldrb	r2, [r3, #0]
 8015b1a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8015b1e:	2a10      	cmp	r2, #16
 8015b20:	d150      	bne.n	8015bc4 <lwip_netconn_do_delconn+0x120>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015b24:	2a00      	cmp	r2, #0
 8015b26:	d049      	beq.n	8015bbc <lwip_netconn_do_delconn+0x118>
 8015b28:	4b2f      	ldr	r3, [pc, #188]	; (8015be8 <lwip_netconn_do_delconn+0x144>)
 8015b2a:	f240 4235 	movw	r2, #1077	; 0x435
 8015b2e:	4931      	ldr	r1, [pc, #196]	; (8015bf4 <lwip_netconn_do_delconn+0x150>)
 8015b30:	482f      	ldr	r0, [pc, #188]	; (8015bf0 <lwip_netconn_do_delconn+0x14c>)
 8015b32:	f009 ffdc 	bl	801faee <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8015b36:	6823      	ldr	r3, [r4, #0]
 8015b38:	2204      	movs	r2, #4
 8015b3a:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8015b3c:	2303      	movs	r3, #3
 8015b3e:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 8015b40:	6823      	ldr	r3, [r4, #0]
 8015b42:	625c      	str	r4, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8015b44:	2100      	movs	r1, #0
 8015b46:	6820      	ldr	r0, [r4, #0]
 8015b48:	f7ff fc32 	bl	80153b0 <lwip_netconn_do_close_internal>
 8015b4c:	2800      	cmp	r0, #0
 8015b4e:	d0d5      	beq.n	8015afc <lwip_netconn_do_delconn+0x58>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8015b50:	6823      	ldr	r3, [r4, #0]
 8015b52:	785b      	ldrb	r3, [r3, #1]
 8015b54:	2b04      	cmp	r3, #4
 8015b56:	d006      	beq.n	8015b66 <lwip_netconn_do_delconn+0xc2>
 8015b58:	4b23      	ldr	r3, [pc, #140]	; (8015be8 <lwip_netconn_do_delconn+0x144>)
 8015b5a:	f240 423b 	movw	r2, #1083	; 0x43b
 8015b5e:	4926      	ldr	r1, [pc, #152]	; (8015bf8 <lwip_netconn_do_delconn+0x154>)
 8015b60:	4823      	ldr	r0, [pc, #140]	; (8015bf0 <lwip_netconn_do_delconn+0x14c>)
 8015b62:	f009 ffc4 	bl	801faee <iprintf>
          UNLOCK_TCPIP_CORE();
 8015b66:	4d25      	ldr	r5, [pc, #148]	; (8015bfc <lwip_netconn_do_delconn+0x158>)
 8015b68:	4628      	mov	r0, r5
 8015b6a:	f006 febb 	bl	801c8e4 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015b6e:	6820      	ldr	r0, [r4, #0]
 8015b70:	2100      	movs	r1, #0
 8015b72:	300c      	adds	r0, #12
 8015b74:	f006 fe60 	bl	801c838 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8015b78:	4628      	mov	r0, r5
 8015b7a:	f006 feac 	bl	801c8d6 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8015b7e:	6823      	ldr	r3, [r4, #0]
 8015b80:	785b      	ldrb	r3, [r3, #1]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d0ba      	beq.n	8015afc <lwip_netconn_do_delconn+0x58>
 8015b86:	4b18      	ldr	r3, [pc, #96]	; (8015be8 <lwip_netconn_do_delconn+0x144>)
 8015b88:	f240 423f 	movw	r2, #1087	; 0x43f
 8015b8c:	491a      	ldr	r1, [pc, #104]	; (8015bf8 <lwip_netconn_do_delconn+0x154>)
 8015b8e:	4818      	ldr	r0, [pc, #96]	; (8015bf0 <lwip_netconn_do_delconn+0x14c>)
 8015b90:	f009 ffad 	bl	801faee <iprintf>
 8015b94:	bd38      	pop	{r3, r4, r5, pc}
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8015b96:	6823      	ldr	r3, [r4, #0]
 8015b98:	7f1b      	ldrb	r3, [r3, #28]
 8015b9a:	f013 0f04 	tst.w	r3, #4
 8015b9e:	d1b0      	bne.n	8015b02 <lwip_netconn_do_delconn+0x5e>
 8015ba0:	e796      	b.n	8015ad0 <lwip_netconn_do_delconn+0x2c>
    LWIP_ASSERT("blocking connect in progress",
 8015ba2:	6823      	ldr	r3, [r4, #0]
 8015ba4:	7f1b      	ldrb	r3, [r3, #28]
 8015ba6:	f013 0f04 	tst.w	r3, #4
 8015baa:	d1ac      	bne.n	8015b06 <lwip_netconn_do_delconn+0x62>
 8015bac:	4b0e      	ldr	r3, [pc, #56]	; (8015be8 <lwip_netconn_do_delconn+0x144>)
 8015bae:	f240 421f 	movw	r2, #1055	; 0x41f
 8015bb2:	4913      	ldr	r1, [pc, #76]	; (8015c00 <lwip_netconn_do_delconn+0x15c>)
 8015bb4:	480e      	ldr	r0, [pc, #56]	; (8015bf0 <lwip_netconn_do_delconn+0x14c>)
 8015bb6:	f009 ff9a 	bl	801faee <iprintf>
 8015bba:	e7a4      	b.n	8015b06 <lwip_netconn_do_delconn+0x62>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015bbc:	6a1b      	ldr	r3, [r3, #32]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d0b9      	beq.n	8015b36 <lwip_netconn_do_delconn+0x92>
 8015bc2:	e7b1      	b.n	8015b28 <lwip_netconn_do_delconn+0x84>
      msg->conn->pcb.tcp = NULL;
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8015bc8:	6820      	ldr	r0, [r4, #0]
 8015bca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015bcc:	b113      	cbz	r3, 8015bd4 <lwip_netconn_do_delconn+0x130>
 8015bce:	2200      	movs	r2, #0
 8015bd0:	4611      	mov	r1, r2
 8015bd2:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8015bd4:	6820      	ldr	r0, [r4, #0]
 8015bd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	f43f af7b 	beq.w	8015ad4 <lwip_netconn_do_delconn+0x30>
 8015bde:	2200      	movs	r2, #0
 8015be0:	2102      	movs	r1, #2
 8015be2:	4798      	blx	r3
 8015be4:	e776      	b.n	8015ad4 <lwip_netconn_do_delconn+0x30>
 8015be6:	bf00      	nop
 8015be8:	0802198c 	.word	0x0802198c
 8015bec:	080217a0 	.word	0x080217a0
 8015bf0:	080214f0 	.word	0x080214f0
 8015bf4:	080217d4 	.word	0x080217d4
 8015bf8:	080217f0 	.word	0x080217f0
 8015bfc:	2001103c 	.word	0x2001103c
 8015c00:	080217b4 	.word	0x080217b4

08015c04 <lwip_netconn_do_bind>:
{
 8015c04:	b510      	push	{r4, lr}
 8015c06:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8015c08:	6803      	ldr	r3, [r0, #0]
 8015c0a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015c0e:	f112 0f0c 	cmn.w	r2, #12
 8015c12:	da10      	bge.n	8015c36 <lwip_netconn_do_bind+0x32>
    msg->err = msg->conn->last_err;
 8015c14:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8015c16:	6823      	ldr	r3, [r4, #0]
 8015c18:	b163      	cbz	r3, 8015c34 <lwip_netconn_do_bind+0x30>
 8015c1a:	f006 fe7d 	bl	801c918 <sys_arch_protect>
 8015c1e:	6823      	ldr	r3, [r4, #0]
 8015c20:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015c24:	f112 0f0c 	cmn.w	r2, #12
 8015c28:	db02      	blt.n	8015c30 <lwip_netconn_do_bind+0x2c>
 8015c2a:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015c2e:	721a      	strb	r2, [r3, #8]
 8015c30:	f006 fe7e 	bl	801c930 <sys_arch_unprotect>
 8015c34:	bd10      	pop	{r4, pc}
    msg->err = ERR_VAL;
 8015c36:	22fa      	movs	r2, #250	; 0xfa
 8015c38:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8015c3a:	6858      	ldr	r0, [r3, #4]
 8015c3c:	2800      	cmp	r0, #0
 8015c3e:	d0ea      	beq.n	8015c16 <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015c40:	781b      	ldrb	r3, [r3, #0]
 8015c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c46:	2b10      	cmp	r3, #16
 8015c48:	d1e5      	bne.n	8015c16 <lwip_netconn_do_bind+0x12>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8015c4a:	89a2      	ldrh	r2, [r4, #12]
 8015c4c:	68a1      	ldr	r1, [r4, #8]
 8015c4e:	f003 f82b 	bl	8018ca8 <tcp_bind>
 8015c52:	7120      	strb	r0, [r4, #4]
        break;
 8015c54:	e7df      	b.n	8015c16 <lwip_netconn_do_bind+0x12>
	...

08015c58 <lwip_netconn_do_listen>:
{
 8015c58:	b530      	push	{r4, r5, lr}
 8015c5a:	b083      	sub	sp, #12
 8015c5c:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8015c5e:	6803      	ldr	r3, [r0, #0]
 8015c60:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015c64:	f112 0f0c 	cmn.w	r2, #12
 8015c68:	da11      	bge.n	8015c8e <lwip_netconn_do_listen+0x36>
    msg->err = msg->conn->last_err;
 8015c6a:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8015c6c:	6823      	ldr	r3, [r4, #0]
 8015c6e:	b163      	cbz	r3, 8015c8a <lwip_netconn_do_listen+0x32>
 8015c70:	f006 fe52 	bl	801c918 <sys_arch_protect>
 8015c74:	6823      	ldr	r3, [r4, #0]
 8015c76:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015c7a:	f112 0f0c 	cmn.w	r2, #12
 8015c7e:	db02      	blt.n	8015c86 <lwip_netconn_do_listen+0x2e>
 8015c80:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015c84:	721a      	strb	r2, [r3, #8]
 8015c86:	f006 fe53 	bl	801c930 <sys_arch_unprotect>
}
 8015c8a:	b003      	add	sp, #12
 8015c8c:	bd30      	pop	{r4, r5, pc}
    msg->err = ERR_CONN;
 8015c8e:	22f5      	movs	r2, #245	; 0xf5
 8015c90:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8015c92:	6858      	ldr	r0, [r3, #4]
 8015c94:	2800      	cmp	r0, #0
 8015c96:	d0e9      	beq.n	8015c6c <lwip_netconn_do_listen+0x14>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015c98:	781a      	ldrb	r2, [r3, #0]
 8015c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8015c9e:	2a10      	cmp	r2, #16
 8015ca0:	d002      	beq.n	8015ca8 <lwip_netconn_do_listen+0x50>
        msg->err = ERR_ARG;
 8015ca2:	23f0      	movs	r3, #240	; 0xf0
 8015ca4:	7123      	strb	r3, [r4, #4]
 8015ca6:	e7e1      	b.n	8015c6c <lwip_netconn_do_listen+0x14>
        if (msg->conn->state == NETCONN_NONE) {
 8015ca8:	785b      	ldrb	r3, [r3, #1]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d145      	bne.n	8015d3a <lwip_netconn_do_listen+0xe2>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8015cae:	7d03      	ldrb	r3, [r0, #20]
 8015cb0:	b113      	cbz	r3, 8015cb8 <lwip_netconn_do_listen+0x60>
            msg->err = ERR_VAL;
 8015cb2:	23fa      	movs	r3, #250	; 0xfa
 8015cb4:	7123      	strb	r3, [r4, #4]
 8015cb6:	e7d9      	b.n	8015c6c <lwip_netconn_do_listen+0x14>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8015cb8:	f10d 0207 	add.w	r2, sp, #7
 8015cbc:	21ff      	movs	r1, #255	; 0xff
 8015cbe:	f003 f851 	bl	8018d64 <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 8015cc2:	4605      	mov	r5, r0
 8015cc4:	b1f0      	cbz	r0, 8015d04 <lwip_netconn_do_listen+0xac>
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8015cc6:	6820      	ldr	r0, [r4, #0]
 8015cc8:	3010      	adds	r0, #16
 8015cca:	f006 fd93 	bl	801c7f4 <sys_mbox_valid>
 8015cce:	b9e8      	cbnz	r0, 8015d0c <lwip_netconn_do_listen+0xb4>
              msg->err = ERR_OK;
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8015cd4:	6820      	ldr	r0, [r4, #0]
 8015cd6:	3014      	adds	r0, #20
 8015cd8:	f006 fd8c 	bl	801c7f4 <sys_mbox_valid>
 8015cdc:	b1f8      	cbz	r0, 8015d1e <lwip_netconn_do_listen+0xc6>
              if (msg->err == ERR_OK) {
 8015cde:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8015ce2:	bb1b      	cbnz	r3, 8015d2c <lwip_netconn_do_listen+0xd4>
                msg->conn->state = NETCONN_LISTEN;
 8015ce4:	6823      	ldr	r3, [r4, #0]
 8015ce6:	2202      	movs	r2, #2
 8015ce8:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 8015cea:	6823      	ldr	r3, [r4, #0]
 8015cec:	605d      	str	r5, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8015cee:	6823      	ldr	r3, [r4, #0]
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	6858      	ldr	r0, [r3, #4]
 8015cf4:	f003 f933 	bl	8018f5e <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8015cf8:	6823      	ldr	r3, [r4, #0]
 8015cfa:	4912      	ldr	r1, [pc, #72]	; (8015d44 <lwip_netconn_do_listen+0xec>)
 8015cfc:	6858      	ldr	r0, [r3, #4]
 8015cfe:	f003 f97d 	bl	8018ffc <tcp_accept>
 8015d02:	e7b3      	b.n	8015c6c <lwip_netconn_do_listen+0x14>
              msg->err = err;
 8015d04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015d08:	7123      	strb	r3, [r4, #4]
 8015d0a:	e7af      	b.n	8015c6c <lwip_netconn_do_listen+0x14>
                sys_mbox_free(&msg->conn->recvmbox);
 8015d0c:	6820      	ldr	r0, [r4, #0]
 8015d0e:	3010      	adds	r0, #16
 8015d10:	f006 fd12 	bl	801c738 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8015d14:	6820      	ldr	r0, [r4, #0]
 8015d16:	3010      	adds	r0, #16
 8015d18:	f006 fd72 	bl	801c800 <sys_mbox_set_invalid>
 8015d1c:	e7d8      	b.n	8015cd0 <lwip_netconn_do_listen+0x78>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8015d1e:	6820      	ldr	r0, [r4, #0]
 8015d20:	2106      	movs	r1, #6
 8015d22:	3014      	adds	r0, #20
 8015d24:	f006 fcf4 	bl	801c710 <sys_mbox_new>
 8015d28:	7120      	strb	r0, [r4, #4]
 8015d2a:	e7d8      	b.n	8015cde <lwip_netconn_do_listen+0x86>
                tcp_close(lpcb);
 8015d2c:	4628      	mov	r0, r5
 8015d2e:	f003 fca9 	bl	8019684 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8015d32:	6823      	ldr	r3, [r4, #0]
 8015d34:	2200      	movs	r2, #0
 8015d36:	605a      	str	r2, [r3, #4]
 8015d38:	e798      	b.n	8015c6c <lwip_netconn_do_listen+0x14>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8015d3a:	2b02      	cmp	r3, #2
 8015d3c:	d196      	bne.n	8015c6c <lwip_netconn_do_listen+0x14>
          msg->err = ERR_OK;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	7123      	strb	r3, [r4, #4]
 8015d42:	e793      	b.n	8015c6c <lwip_netconn_do_listen+0x14>
 8015d44:	080159a5 	.word	0x080159a5

08015d48 <lwip_netconn_do_recv>:
{
 8015d48:	b570      	push	{r4, r5, r6, lr}
 8015d4a:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8015d50:	6803      	ldr	r3, [r0, #0]
 8015d52:	685a      	ldr	r2, [r3, #4]
 8015d54:	b122      	cbz	r2, 8015d60 <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015d56:	781b      	ldrb	r3, [r3, #0]
 8015d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d5c:	2b10      	cmp	r3, #16
 8015d5e:	d00f      	beq.n	8015d80 <lwip_netconn_do_recv+0x38>
  TCPIP_APIMSG_ACK(msg);
 8015d60:	6833      	ldr	r3, [r6, #0]
 8015d62:	b163      	cbz	r3, 8015d7e <lwip_netconn_do_recv+0x36>
 8015d64:	f006 fdd8 	bl	801c918 <sys_arch_protect>
 8015d68:	6833      	ldr	r3, [r6, #0]
 8015d6a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015d6e:	f112 0f0c 	cmn.w	r2, #12
 8015d72:	db02      	blt.n	8015d7a <lwip_netconn_do_recv+0x32>
 8015d74:	f996 2004 	ldrsb.w	r2, [r6, #4]
 8015d78:	721a      	strb	r2, [r3, #8]
 8015d7a:	f006 fdd9 	bl	801c930 <sys_arch_unprotect>
 8015d7e:	bd70      	pop	{r4, r5, r6, pc}
      u32_t remaining = msg->msg.r.len;
 8015d80:	6884      	ldr	r4, [r0, #8]
 8015d82:	e008      	b.n	8015d96 <lwip_netconn_do_recv+0x4e>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8015d84:	f64f 75ff 	movw	r5, #65535	; 0xffff
        tcp_recved(msg->conn->pcb.tcp, recved);
 8015d88:	6833      	ldr	r3, [r6, #0]
 8015d8a:	4629      	mov	r1, r5
 8015d8c:	6858      	ldr	r0, [r3, #4]
 8015d8e:	f003 f879 	bl	8018e84 <tcp_recved>
      } while (remaining != 0);
 8015d92:	1b64      	subs	r4, r4, r5
 8015d94:	d0e4      	beq.n	8015d60 <lwip_netconn_do_recv+0x18>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8015d96:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8015d9a:	d2f3      	bcs.n	8015d84 <lwip_netconn_do_recv+0x3c>
 8015d9c:	b2a5      	uxth	r5, r4
 8015d9e:	e7f3      	b.n	8015d88 <lwip_netconn_do_recv+0x40>

08015da0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8015da0:	b538      	push	{r3, r4, r5, lr}
 8015da2:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8015da4:	6803      	ldr	r3, [r0, #0]
 8015da6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015daa:	f112 0f0c 	cmn.w	r2, #12
 8015dae:	da0f      	bge.n	8015dd0 <lwip_netconn_do_write+0x30>
    msg->err = msg->conn->last_err;
 8015db0:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8015db2:	b163      	cbz	r3, 8015dce <lwip_netconn_do_write+0x2e>
 8015db4:	f006 fdb0 	bl	801c918 <sys_arch_protect>
 8015db8:	6823      	ldr	r3, [r4, #0]
 8015dba:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015dbe:	f112 0f0c 	cmn.w	r2, #12
 8015dc2:	db02      	blt.n	8015dca <lwip_netconn_do_write+0x2a>
 8015dc4:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015dc8:	721a      	strb	r2, [r3, #8]
 8015dca:	f006 fdb1 	bl	801c930 <sys_arch_unprotect>
 8015dce:	bd38      	pop	{r3, r4, r5, pc}
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015dd0:	781a      	ldrb	r2, [r3, #0]
 8015dd2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8015dd6:	2a10      	cmp	r2, #16
 8015dd8:	d1eb      	bne.n	8015db2 <lwip_netconn_do_write+0x12>
      if (msg->conn->state != NETCONN_NONE) {
 8015dda:	785a      	ldrb	r2, [r3, #1]
 8015ddc:	b112      	cbz	r2, 8015de4 <lwip_netconn_do_write+0x44>
        msg->err = ERR_INPROGRESS;
 8015dde:	22fb      	movs	r2, #251	; 0xfb
 8015de0:	7102      	strb	r2, [r0, #4]
 8015de2:	e7e6      	b.n	8015db2 <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 8015de4:	685a      	ldr	r2, [r3, #4]
 8015de6:	2a00      	cmp	r2, #0
 8015de8:	d048      	beq.n	8015e7c <lwip_netconn_do_write+0xdc>
        msg->conn->state = NETCONN_WRITE;
 8015dea:	2201      	movs	r2, #1
 8015dec:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015dee:	6803      	ldr	r3, [r0, #0]
 8015df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015df2:	2a00      	cmp	r2, #0
 8015df4:	d036      	beq.n	8015e64 <lwip_netconn_do_write+0xc4>
 8015df6:	4b23      	ldr	r3, [pc, #140]	; (8015e84 <lwip_netconn_do_write+0xe4>)
 8015df8:	f240 6283 	movw	r2, #1667	; 0x683
 8015dfc:	4922      	ldr	r1, [pc, #136]	; (8015e88 <lwip_netconn_do_write+0xe8>)
 8015dfe:	4823      	ldr	r0, [pc, #140]	; (8015e8c <lwip_netconn_do_write+0xec>)
 8015e00:	f009 fe75 	bl	801faee <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8015e04:	68e3      	ldr	r3, [r4, #12]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d030      	beq.n	8015e6c <lwip_netconn_do_write+0xcc>
        msg->conn->current_msg = msg;
 8015e0a:	6823      	ldr	r3, [r4, #0]
 8015e0c:	625c      	str	r4, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8015e0e:	6823      	ldr	r3, [r4, #0]
 8015e10:	2100      	movs	r1, #0
 8015e12:	6219      	str	r1, [r3, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8015e14:	6820      	ldr	r0, [r4, #0]
 8015e16:	f7ff f9bb 	bl	8015190 <lwip_netconn_do_writemore>
 8015e1a:	2800      	cmp	r0, #0
 8015e1c:	d0d7      	beq.n	8015dce <lwip_netconn_do_write+0x2e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8015e1e:	6823      	ldr	r3, [r4, #0]
 8015e20:	785b      	ldrb	r3, [r3, #1]
 8015e22:	2b01      	cmp	r3, #1
 8015e24:	d006      	beq.n	8015e34 <lwip_netconn_do_write+0x94>
 8015e26:	4b17      	ldr	r3, [pc, #92]	; (8015e84 <lwip_netconn_do_write+0xe4>)
 8015e28:	f240 6289 	movw	r2, #1673	; 0x689
 8015e2c:	4918      	ldr	r1, [pc, #96]	; (8015e90 <lwip_netconn_do_write+0xf0>)
 8015e2e:	4817      	ldr	r0, [pc, #92]	; (8015e8c <lwip_netconn_do_write+0xec>)
 8015e30:	f009 fe5d 	bl	801faee <iprintf>
          UNLOCK_TCPIP_CORE();
 8015e34:	4d17      	ldr	r5, [pc, #92]	; (8015e94 <lwip_netconn_do_write+0xf4>)
 8015e36:	4628      	mov	r0, r5
 8015e38:	f006 fd54 	bl	801c8e4 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015e3c:	6820      	ldr	r0, [r4, #0]
 8015e3e:	2100      	movs	r1, #0
 8015e40:	300c      	adds	r0, #12
 8015e42:	f006 fcf9 	bl	801c838 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8015e46:	4628      	mov	r0, r5
 8015e48:	f006 fd45 	bl	801c8d6 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8015e4c:	6823      	ldr	r3, [r4, #0]
 8015e4e:	785b      	ldrb	r3, [r3, #1]
 8015e50:	2b01      	cmp	r3, #1
 8015e52:	d1bc      	bne.n	8015dce <lwip_netconn_do_write+0x2e>
 8015e54:	4b0b      	ldr	r3, [pc, #44]	; (8015e84 <lwip_netconn_do_write+0xe4>)
 8015e56:	f240 628d 	movw	r2, #1677	; 0x68d
 8015e5a:	490d      	ldr	r1, [pc, #52]	; (8015e90 <lwip_netconn_do_write+0xf0>)
 8015e5c:	480b      	ldr	r0, [pc, #44]	; (8015e8c <lwip_netconn_do_write+0xec>)
 8015e5e:	f009 fe46 	bl	801faee <iprintf>
 8015e62:	bd38      	pop	{r3, r4, r5, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015e64:	6a1b      	ldr	r3, [r3, #32]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d0cc      	beq.n	8015e04 <lwip_netconn_do_write+0x64>
 8015e6a:	e7c4      	b.n	8015df6 <lwip_netconn_do_write+0x56>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8015e6c:	4b05      	ldr	r3, [pc, #20]	; (8015e84 <lwip_netconn_do_write+0xe4>)
 8015e6e:	f240 6284 	movw	r2, #1668	; 0x684
 8015e72:	4909      	ldr	r1, [pc, #36]	; (8015e98 <lwip_netconn_do_write+0xf8>)
 8015e74:	4805      	ldr	r0, [pc, #20]	; (8015e8c <lwip_netconn_do_write+0xec>)
 8015e76:	f009 fe3a 	bl	801faee <iprintf>
 8015e7a:	e7c6      	b.n	8015e0a <lwip_netconn_do_write+0x6a>
        msg->err = ERR_CONN;
 8015e7c:	22f5      	movs	r2, #245	; 0xf5
 8015e7e:	7102      	strb	r2, [r0, #4]
 8015e80:	e797      	b.n	8015db2 <lwip_netconn_do_write+0x12>
 8015e82:	bf00      	nop
 8015e84:	0802198c 	.word	0x0802198c
 8015e88:	080217d4 	.word	0x080217d4
 8015e8c:	080214f0 	.word	0x080214f0
 8015e90:	080217f0 	.word	0x080217f0
 8015e94:	2001103c 	.word	0x2001103c
 8015e98:	08021810 	.word	0x08021810

08015e9c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8015e9c:	b510      	push	{r4, lr}
 8015e9e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

  if (msg->conn->pcb.ip != NULL) {
 8015ea0:	6803      	ldr	r3, [r0, #0]
 8015ea2:	685b      	ldr	r3, [r3, #4]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d039      	beq.n	8015f1c <lwip_netconn_do_getaddr+0x80>
    if (msg->msg.ad.local) {
 8015ea8:	7c02      	ldrb	r2, [r0, #16]
 8015eaa:	b32a      	cbz	r2, 8015ef8 <lwip_netconn_do_getaddr+0x5c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8015eac:	6882      	ldr	r2, [r0, #8]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	6013      	str	r3, [r2, #0]
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	7123      	strb	r3, [r4, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015eb6:	6822      	ldr	r2, [r4, #0]
 8015eb8:	7813      	ldrb	r3, [r2, #0]
 8015eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ebe:	2b10      	cmp	r3, #16
 8015ec0:	d124      	bne.n	8015f0c <lwip_netconn_do_getaddr+0x70>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
 8015ec2:	7c23      	ldrb	r3, [r4, #16]
 8015ec4:	b91b      	cbnz	r3, 8015ece <lwip_netconn_do_getaddr+0x32>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8015ec6:	6851      	ldr	r1, [r2, #4]
 8015ec8:	7d09      	ldrb	r1, [r1, #20]
      if ((msg->msg.ad.local == 0) &&
 8015eca:	2901      	cmp	r1, #1
 8015ecc:	d918      	bls.n	8015f00 <lwip_netconn_do_getaddr+0x64>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8015ece:	68e1      	ldr	r1, [r4, #12]
 8015ed0:	b1cb      	cbz	r3, 8015f06 <lwip_netconn_do_getaddr+0x6a>
 8015ed2:	6853      	ldr	r3, [r2, #4]
 8015ed4:	8adb      	ldrh	r3, [r3, #22]
 8015ed6:	800b      	strh	r3, [r1, #0]
      break;
    }
  } else {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 8015ed8:	6823      	ldr	r3, [r4, #0]
 8015eda:	b163      	cbz	r3, 8015ef6 <lwip_netconn_do_getaddr+0x5a>
 8015edc:	f006 fd1c 	bl	801c918 <sys_arch_protect>
 8015ee0:	6823      	ldr	r3, [r4, #0]
 8015ee2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015ee6:	f112 0f0c 	cmn.w	r2, #12
 8015eea:	db02      	blt.n	8015ef2 <lwip_netconn_do_getaddr+0x56>
 8015eec:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015ef0:	721a      	strb	r2, [r3, #8]
 8015ef2:	f006 fd1d 	bl	801c930 <sys_arch_unprotect>
 8015ef6:	bd10      	pop	{r4, pc}
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8015ef8:	6882      	ldr	r2, [r0, #8]
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	6013      	str	r3, [r2, #0]
 8015efe:	e7d8      	b.n	8015eb2 <lwip_netconn_do_getaddr+0x16>
        msg->err = ERR_CONN;
 8015f00:	23f5      	movs	r3, #245	; 0xf5
 8015f02:	7123      	strb	r3, [r4, #4]
 8015f04:	e7e8      	b.n	8015ed8 <lwip_netconn_do_getaddr+0x3c>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8015f06:	6853      	ldr	r3, [r2, #4]
 8015f08:	8b1b      	ldrh	r3, [r3, #24]
 8015f0a:	e7e4      	b.n	8015ed6 <lwip_netconn_do_getaddr+0x3a>
      LWIP_ASSERT("invalid netconn_type", 0);
 8015f0c:	4b05      	ldr	r3, [pc, #20]	; (8015f24 <lwip_netconn_do_getaddr+0x88>)
 8015f0e:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8015f12:	4905      	ldr	r1, [pc, #20]	; (8015f28 <lwip_netconn_do_getaddr+0x8c>)
 8015f14:	4805      	ldr	r0, [pc, #20]	; (8015f2c <lwip_netconn_do_getaddr+0x90>)
 8015f16:	f009 fdea 	bl	801faee <iprintf>
      break;
 8015f1a:	e7dd      	b.n	8015ed8 <lwip_netconn_do_getaddr+0x3c>
    msg->err = ERR_CONN;
 8015f1c:	23f5      	movs	r3, #245	; 0xf5
 8015f1e:	7103      	strb	r3, [r0, #4]
 8015f20:	e7da      	b.n	8015ed8 <lwip_netconn_do_getaddr+0x3c>
 8015f22:	bf00      	nop
 8015f24:	0802198c 	.word	0x0802198c
 8015f28:	080217f8 	.word	0x080217f8
 8015f2c:	080214f0 	.word	0x080214f0

08015f30 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8015f30:	b538      	push	{r3, r4, r5, lr}
 8015f32:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8015f34:	6800      	ldr	r0, [r0, #0]
 8015f36:	7842      	ldrb	r2, [r0, #1]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8015f38:	6843      	ldr	r3, [r0, #4]
 8015f3a:	b123      	cbz	r3, 8015f46 <lwip_netconn_do_close+0x16>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8015f3c:	7803      	ldrb	r3, [r0, #0]
  if ((msg->conn->pcb.tcp != NULL) &&
 8015f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f42:	2b10      	cmp	r3, #16
 8015f44:	d010      	beq.n	8015f68 <lwip_netconn_do_close+0x38>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8015f46:	23f5      	movs	r3, #245	; 0xf5
 8015f48:	7123      	strb	r3, [r4, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8015f4a:	b160      	cbz	r0, 8015f66 <lwip_netconn_do_close+0x36>
 8015f4c:	f006 fce4 	bl	801c918 <sys_arch_protect>
 8015f50:	6823      	ldr	r3, [r4, #0]
 8015f52:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015f56:	f112 0f0c 	cmn.w	r2, #12
 8015f5a:	db02      	blt.n	8015f62 <lwip_netconn_do_close+0x32>
 8015f5c:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015f60:	721a      	strb	r2, [r3, #8]
 8015f62:	f006 fce5 	bl	801c930 <sys_arch_unprotect>
 8015f66:	bd38      	pop	{r3, r4, r5, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8015f68:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8015f6a:	2b03      	cmp	r3, #3
 8015f6c:	d001      	beq.n	8015f72 <lwip_netconn_do_close+0x42>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8015f6e:	2a02      	cmp	r2, #2
 8015f70:	d0e9      	beq.n	8015f46 <lwip_netconn_do_close+0x16>
    if (state == NETCONN_CONNECT) {
 8015f72:	2a03      	cmp	r2, #3
 8015f74:	d03d      	beq.n	8015ff2 <lwip_netconn_do_close+0xc2>
    } else if (state == NETCONN_WRITE) {
 8015f76:	2a01      	cmp	r2, #1
 8015f78:	d03e      	beq.n	8015ff8 <lwip_netconn_do_close+0xc8>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8015f7a:	f013 0f01 	tst.w	r3, #1
 8015f7e:	d13e      	bne.n	8015ffe <lwip_netconn_do_close+0xce>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015f80:	6823      	ldr	r3, [r4, #0]
 8015f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015f84:	2a00      	cmp	r2, #0
 8015f86:	d03d      	beq.n	8016004 <lwip_netconn_do_close+0xd4>
 8015f88:	4b20      	ldr	r3, [pc, #128]	; (801600c <lwip_netconn_do_close+0xdc>)
 8015f8a:	f240 721c 	movw	r2, #1820	; 0x71c
 8015f8e:	4920      	ldr	r1, [pc, #128]	; (8016010 <lwip_netconn_do_close+0xe0>)
 8015f90:	4820      	ldr	r0, [pc, #128]	; (8016014 <lwip_netconn_do_close+0xe4>)
 8015f92:	f009 fdac 	bl	801faee <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8015f96:	6823      	ldr	r3, [r4, #0]
 8015f98:	2204      	movs	r2, #4
 8015f9a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8015f9c:	6823      	ldr	r3, [r4, #0]
 8015f9e:	625c      	str	r4, [r3, #36]	; 0x24
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8015fa0:	2100      	movs	r1, #0
 8015fa2:	6820      	ldr	r0, [r4, #0]
 8015fa4:	f7ff fa04 	bl	80153b0 <lwip_netconn_do_close_internal>
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	d0dc      	beq.n	8015f66 <lwip_netconn_do_close+0x36>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8015fac:	6823      	ldr	r3, [r4, #0]
 8015fae:	785b      	ldrb	r3, [r3, #1]
 8015fb0:	2b04      	cmp	r3, #4
 8015fb2:	d006      	beq.n	8015fc2 <lwip_netconn_do_close+0x92>
 8015fb4:	4b15      	ldr	r3, [pc, #84]	; (801600c <lwip_netconn_do_close+0xdc>)
 8015fb6:	f240 7221 	movw	r2, #1825	; 0x721
 8015fba:	4917      	ldr	r1, [pc, #92]	; (8016018 <lwip_netconn_do_close+0xe8>)
 8015fbc:	4815      	ldr	r0, [pc, #84]	; (8016014 <lwip_netconn_do_close+0xe4>)
 8015fbe:	f009 fd96 	bl	801faee <iprintf>
        UNLOCK_TCPIP_CORE();
 8015fc2:	4d16      	ldr	r5, [pc, #88]	; (801601c <lwip_netconn_do_close+0xec>)
 8015fc4:	4628      	mov	r0, r5
 8015fc6:	f006 fc8d 	bl	801c8e4 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015fca:	6820      	ldr	r0, [r4, #0]
 8015fcc:	2100      	movs	r1, #0
 8015fce:	300c      	adds	r0, #12
 8015fd0:	f006 fc32 	bl	801c838 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8015fd4:	4628      	mov	r0, r5
 8015fd6:	f006 fc7e 	bl	801c8d6 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8015fda:	6823      	ldr	r3, [r4, #0]
 8015fdc:	785b      	ldrb	r3, [r3, #1]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d0c1      	beq.n	8015f66 <lwip_netconn_do_close+0x36>
 8015fe2:	4b0a      	ldr	r3, [pc, #40]	; (801600c <lwip_netconn_do_close+0xdc>)
 8015fe4:	f240 7225 	movw	r2, #1829	; 0x725
 8015fe8:	490b      	ldr	r1, [pc, #44]	; (8016018 <lwip_netconn_do_close+0xe8>)
 8015fea:	480a      	ldr	r0, [pc, #40]	; (8016014 <lwip_netconn_do_close+0xe4>)
 8015fec:	f009 fd7f 	bl	801faee <iprintf>
 8015ff0:	bd38      	pop	{r3, r4, r5, pc}
      msg->err = ERR_CONN;
 8015ff2:	23f5      	movs	r3, #245	; 0xf5
 8015ff4:	7123      	strb	r3, [r4, #4]
 8015ff6:	e7a8      	b.n	8015f4a <lwip_netconn_do_close+0x1a>
      msg->err = ERR_INPROGRESS;
 8015ff8:	23fb      	movs	r3, #251	; 0xfb
 8015ffa:	7123      	strb	r3, [r4, #4]
 8015ffc:	e7a5      	b.n	8015f4a <lwip_netconn_do_close+0x1a>
        netconn_drain(msg->conn);
 8015ffe:	f7ff fc7f 	bl	8015900 <netconn_drain>
 8016002:	e7bd      	b.n	8015f80 <lwip_netconn_do_close+0x50>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8016004:	6a1b      	ldr	r3, [r3, #32]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d0c5      	beq.n	8015f96 <lwip_netconn_do_close+0x66>
 801600a:	e7bd      	b.n	8015f88 <lwip_netconn_do_close+0x58>
 801600c:	0802198c 	.word	0x0802198c
 8016010:	080217d4 	.word	0x080217d4
 8016014:	080214f0 	.word	0x080214f0
 8016018:	080217f0 	.word	0x080217f0
 801601c:	2001103c 	.word	0x2001103c

08016020 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 8016020:	b168      	cbz	r0, 801603e <netbuf_delete+0x1e>
{
 8016022:	b510      	push	{r4, lr}
 8016024:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 8016026:	6800      	ldr	r0, [r0, #0]
 8016028:	b120      	cbz	r0, 8016034 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 801602a:	f002 fa89 	bl	8018540 <pbuf_free>
      buf->p = buf->ptr = NULL;
 801602e:	2300      	movs	r3, #0
 8016030:	6063      	str	r3, [r4, #4]
 8016032:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8016034:	4621      	mov	r1, r4
 8016036:	2005      	movs	r0, #5
 8016038:	f002 f896 	bl	8018168 <memp_free>
 801603c:	bd10      	pop	{r4, pc}
 801603e:	4770      	bx	lr

08016040 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8016040:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8016042:	b158      	cbz	r0, 801605c <netbuf_data+0x1c>
 8016044:	4603      	mov	r3, r0
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8016046:	b191      	cbz	r1, 801606e <netbuf_data+0x2e>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8016048:	b1d2      	cbz	r2, 8016080 <netbuf_data+0x40>

  if (buf->ptr == NULL) {
 801604a:	6840      	ldr	r0, [r0, #4]
 801604c:	b308      	cbz	r0, 8016092 <netbuf_data+0x52>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 801604e:	6840      	ldr	r0, [r0, #4]
 8016050:	6008      	str	r0, [r1, #0]
  *len = buf->ptr->len;
 8016052:	685b      	ldr	r3, [r3, #4]
 8016054:	895b      	ldrh	r3, [r3, #10]
 8016056:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 8016058:	2000      	movs	r0, #0
 801605a:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 801605c:	4b0e      	ldr	r3, [pc, #56]	; (8016098 <netbuf_data+0x58>)
 801605e:	22c2      	movs	r2, #194	; 0xc2
 8016060:	490e      	ldr	r1, [pc, #56]	; (801609c <netbuf_data+0x5c>)
 8016062:	480f      	ldr	r0, [pc, #60]	; (80160a0 <netbuf_data+0x60>)
 8016064:	f009 fd43 	bl	801faee <iprintf>
 8016068:	f06f 000f 	mvn.w	r0, #15
 801606c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801606e:	4b0a      	ldr	r3, [pc, #40]	; (8016098 <netbuf_data+0x58>)
 8016070:	22c3      	movs	r2, #195	; 0xc3
 8016072:	490c      	ldr	r1, [pc, #48]	; (80160a4 <netbuf_data+0x64>)
 8016074:	480a      	ldr	r0, [pc, #40]	; (80160a0 <netbuf_data+0x60>)
 8016076:	f009 fd3a 	bl	801faee <iprintf>
 801607a:	f06f 000f 	mvn.w	r0, #15
 801607e:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8016080:	4b05      	ldr	r3, [pc, #20]	; (8016098 <netbuf_data+0x58>)
 8016082:	22c4      	movs	r2, #196	; 0xc4
 8016084:	4908      	ldr	r1, [pc, #32]	; (80160a8 <netbuf_data+0x68>)
 8016086:	4806      	ldr	r0, [pc, #24]	; (80160a0 <netbuf_data+0x60>)
 8016088:	f009 fd31 	bl	801faee <iprintf>
 801608c:	f06f 000f 	mvn.w	r0, #15
 8016090:	bd08      	pop	{r3, pc}
    return ERR_BUF;
 8016092:	f06f 0001 	mvn.w	r0, #1
}
 8016096:	bd08      	pop	{r3, pc}
 8016098:	08021a44 	.word	0x08021a44
 801609c:	08021ab8 	.word	0x08021ab8
 80160a0:	080214f0 	.word	0x080214f0
 80160a4:	08021ad4 	.word	0x08021ad4
 80160a8:	08021af4 	.word	0x08021af4

080160ac <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80160ac:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80160ae:	b138      	cbz	r0, 80160c0 <netbuf_next+0x14>
  if (buf->ptr->next == NULL) {
 80160b0:	6843      	ldr	r3, [r0, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	b17b      	cbz	r3, 80160d6 <netbuf_next+0x2a>
    return -1;
  }
  buf->ptr = buf->ptr->next;
 80160b6:	6043      	str	r3, [r0, #4]
  if (buf->ptr->next == NULL) {
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	b153      	cbz	r3, 80160d2 <netbuf_next+0x26>
    return 1;
  }
  return 0;
 80160bc:	2000      	movs	r0, #0
}
 80160be:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80160c0:	4b06      	ldr	r3, [pc, #24]	; (80160dc <netbuf_next+0x30>)
 80160c2:	22dc      	movs	r2, #220	; 0xdc
 80160c4:	4906      	ldr	r1, [pc, #24]	; (80160e0 <netbuf_next+0x34>)
 80160c6:	4807      	ldr	r0, [pc, #28]	; (80160e4 <netbuf_next+0x38>)
 80160c8:	f009 fd11 	bl	801faee <iprintf>
 80160cc:	f04f 30ff 	mov.w	r0, #4294967295
 80160d0:	bd08      	pop	{r3, pc}
    return 1;
 80160d2:	2001      	movs	r0, #1
 80160d4:	bd08      	pop	{r3, pc}
    return -1;
 80160d6:	f04f 30ff 	mov.w	r0, #4294967295
 80160da:	bd08      	pop	{r3, pc}
 80160dc:	08021a44 	.word	0x08021a44
 80160e0:	08021b10 	.word	0x08021b10
 80160e4:	080214f0 	.word	0x080214f0

080160e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80160e8:	b500      	push	{lr}
 80160ea:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80160ec:	4b20      	ldr	r3, [pc, #128]	; (8016170 <tcpip_thread+0x88>)
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	b113      	cbz	r3, 80160f8 <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
 80160f2:	4a20      	ldr	r2, [pc, #128]	; (8016174 <tcpip_thread+0x8c>)
 80160f4:	6810      	ldr	r0, [r2, #0]
 80160f6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 80160f8:	481f      	ldr	r0, [pc, #124]	; (8016178 <tcpip_thread+0x90>)
 80160fa:	f006 fbec 	bl	801c8d6 <sys_mutex_lock>
 80160fe:	e00e      	b.n	801611e <tcpip_thread+0x36>
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016100:	4b1e      	ldr	r3, [pc, #120]	; (801617c <tcpip_thread+0x94>)
 8016102:	2269      	movs	r2, #105	; 0x69
 8016104:	491e      	ldr	r1, [pc, #120]	; (8016180 <tcpip_thread+0x98>)
 8016106:	481f      	ldr	r0, [pc, #124]	; (8016184 <tcpip_thread+0x9c>)
 8016108:	f009 fcf1 	bl	801faee <iprintf>
      continue;
 801610c:	e007      	b.n	801611e <tcpip_thread+0x36>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 801610e:	68da      	ldr	r2, [r3, #12]
 8016110:	6899      	ldr	r1, [r3, #8]
 8016112:	6858      	ldr	r0, [r3, #4]
 8016114:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016116:	9901      	ldr	r1, [sp, #4]
 8016118:	2008      	movs	r0, #8
 801611a:	f002 f825 	bl	8018168 <memp_free>
    UNLOCK_TCPIP_CORE();
 801611e:	4c16      	ldr	r4, [pc, #88]	; (8016178 <tcpip_thread+0x90>)
 8016120:	4620      	mov	r0, r4
 8016122:	f006 fbdf 	bl	801c8e4 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8016126:	a901      	add	r1, sp, #4
 8016128:	4817      	ldr	r0, [pc, #92]	; (8016188 <tcpip_thread+0xa0>)
 801612a:	f006 fa45 	bl	801c5b8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 801612e:	4620      	mov	r0, r4
 8016130:	f006 fbd1 	bl	801c8d6 <sys_mutex_lock>
    if (msg == NULL) {
 8016134:	9b01      	ldr	r3, [sp, #4]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d0e2      	beq.n	8016100 <tcpip_thread+0x18>
    switch (msg->type) {
 801613a:	781a      	ldrb	r2, [r3, #0]
 801613c:	2a03      	cmp	r2, #3
 801613e:	d00a      	beq.n	8016156 <tcpip_thread+0x6e>
 8016140:	2a04      	cmp	r2, #4
 8016142:	d010      	beq.n	8016166 <tcpip_thread+0x7e>
 8016144:	2a02      	cmp	r2, #2
 8016146:	d0e2      	beq.n	801610e <tcpip_thread+0x26>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016148:	4b0c      	ldr	r3, [pc, #48]	; (801617c <tcpip_thread+0x94>)
 801614a:	229b      	movs	r2, #155	; 0x9b
 801614c:	490c      	ldr	r1, [pc, #48]	; (8016180 <tcpip_thread+0x98>)
 801614e:	480d      	ldr	r0, [pc, #52]	; (8016184 <tcpip_thread+0x9c>)
 8016150:	f009 fccd 	bl	801faee <iprintf>
      break;
 8016154:	e7e3      	b.n	801611e <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016156:	685a      	ldr	r2, [r3, #4]
 8016158:	6898      	ldr	r0, [r3, #8]
 801615a:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801615c:	9901      	ldr	r1, [sp, #4]
 801615e:	2007      	movs	r0, #7
 8016160:	f002 f802 	bl	8018168 <memp_free>
      break;
 8016164:	e7db      	b.n	801611e <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016166:	685a      	ldr	r2, [r3, #4]
 8016168:	6898      	ldr	r0, [r3, #8]
 801616a:	4790      	blx	r2
      break;
 801616c:	e7d7      	b.n	801611e <tcpip_thread+0x36>
 801616e:	bf00      	nop
 8016170:	20010168 	.word	0x20010168
 8016174:	2001016c 	.word	0x2001016c
 8016178:	2001103c 	.word	0x2001103c
 801617c:	08021b94 	.word	0x08021b94
 8016180:	08021bc4 	.word	0x08021bc4
 8016184:	080214f0 	.word	0x080214f0
 8016188:	20010164 	.word	0x20010164

0801618c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801618e:	4607      	mov	r7, r0
 8016190:	460e      	mov	r6, r1
 8016192:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8016194:	4813      	ldr	r0, [pc, #76]	; (80161e4 <tcpip_inpkt+0x58>)
 8016196:	f006 fb2d 	bl	801c7f4 <sys_mbox_valid>
 801619a:	b188      	cbz	r0, 80161c0 <tcpip_inpkt+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801619c:	2008      	movs	r0, #8
 801619e:	f001 ffc9 	bl	8018134 <memp_malloc>
  if (msg == NULL) {
 80161a2:	4604      	mov	r4, r0
 80161a4:	b1d0      	cbz	r0, 80161dc <tcpip_inpkt+0x50>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80161a6:	2302      	movs	r3, #2
 80161a8:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 80161aa:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80161ac:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 80161ae:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80161b0:	4601      	mov	r1, r0
 80161b2:	480c      	ldr	r0, [pc, #48]	; (80161e4 <tcpip_inpkt+0x58>)
 80161b4:	f006 fad5 	bl	801c762 <sys_mbox_trypost>
 80161b8:	4603      	mov	r3, r0
 80161ba:	b940      	cbnz	r0, 80161ce <tcpip_inpkt+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80161bc:	4618      	mov	r0, r3
 80161be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80161c0:	4b09      	ldr	r3, [pc, #36]	; (80161e8 <tcpip_inpkt+0x5c>)
 80161c2:	22b5      	movs	r2, #181	; 0xb5
 80161c4:	4909      	ldr	r1, [pc, #36]	; (80161ec <tcpip_inpkt+0x60>)
 80161c6:	480a      	ldr	r0, [pc, #40]	; (80161f0 <tcpip_inpkt+0x64>)
 80161c8:	f009 fc91 	bl	801faee <iprintf>
 80161cc:	e7e6      	b.n	801619c <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80161ce:	4621      	mov	r1, r4
 80161d0:	2008      	movs	r0, #8
 80161d2:	f001 ffc9 	bl	8018168 <memp_free>
    return ERR_MEM;
 80161d6:	f04f 33ff 	mov.w	r3, #4294967295
 80161da:	e7ef      	b.n	80161bc <tcpip_inpkt+0x30>
    return ERR_MEM;
 80161dc:	f04f 33ff 	mov.w	r3, #4294967295
 80161e0:	e7ec      	b.n	80161bc <tcpip_inpkt+0x30>
 80161e2:	bf00      	nop
 80161e4:	20010164 	.word	0x20010164
 80161e8:	08021b94 	.word	0x08021b94
 80161ec:	08021b84 	.word	0x08021b84
 80161f0:	080214f0 	.word	0x080214f0

080161f4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80161f4:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80161f6:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 80161fa:	f013 0f18 	tst.w	r3, #24
 80161fe:	d103      	bne.n	8016208 <tcpip_input+0x14>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8016200:	4a03      	ldr	r2, [pc, #12]	; (8016210 <tcpip_input+0x1c>)
 8016202:	f7ff ffc3 	bl	801618c <tcpip_inpkt>
}
 8016206:	bd08      	pop	{r3, pc}
    return tcpip_inpkt(p, inp, ethernet_input);
 8016208:	4a02      	ldr	r2, [pc, #8]	; (8016214 <tcpip_input+0x20>)
 801620a:	f7ff ffbf 	bl	801618c <tcpip_inpkt>
 801620e:	bd08      	pop	{r3, pc}
 8016210:	08016f69 	.word	0x08016f69
 8016214:	0801c5f9 	.word	0x0801c5f9

08016218 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8016218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801621a:	4607      	mov	r7, r0
 801621c:	460e      	mov	r6, r1
 801621e:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8016220:	4816      	ldr	r0, [pc, #88]	; (801627c <tcpip_callback_with_block+0x64>)
 8016222:	f006 fae7 	bl	801c7f4 <sys_mbox_valid>
 8016226:	b188      	cbz	r0, 801624c <tcpip_callback_with_block+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8016228:	2007      	movs	r0, #7
 801622a:	f001 ff83 	bl	8018134 <memp_malloc>
  if (msg == NULL) {
 801622e:	4604      	mov	r4, r0
 8016230:	b300      	cbz	r0, 8016274 <tcpip_callback_with_block+0x5c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8016232:	2303      	movs	r3, #3
 8016234:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 8016236:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8016238:	6086      	str	r6, [r0, #8]
  if (block) {
 801623a:	b975      	cbnz	r5, 801625a <tcpip_callback_with_block+0x42>
    sys_mbox_post(&mbox, msg);
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 801623c:	4601      	mov	r1, r0
 801623e:	480f      	ldr	r0, [pc, #60]	; (801627c <tcpip_callback_with_block+0x64>)
 8016240:	f006 fa8f 	bl	801c762 <sys_mbox_trypost>
 8016244:	4603      	mov	r3, r0
 8016246:	b970      	cbnz	r0, 8016266 <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
}
 8016248:	4618      	mov	r0, r3
 801624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 801624c:	4b0c      	ldr	r3, [pc, #48]	; (8016280 <tcpip_callback_with_block+0x68>)
 801624e:	22ee      	movs	r2, #238	; 0xee
 8016250:	490c      	ldr	r1, [pc, #48]	; (8016284 <tcpip_callback_with_block+0x6c>)
 8016252:	480d      	ldr	r0, [pc, #52]	; (8016288 <tcpip_callback_with_block+0x70>)
 8016254:	f009 fc4b 	bl	801faee <iprintf>
 8016258:	e7e6      	b.n	8016228 <tcpip_callback_with_block+0x10>
    sys_mbox_post(&mbox, msg);
 801625a:	4601      	mov	r1, r0
 801625c:	4807      	ldr	r0, [pc, #28]	; (801627c <tcpip_callback_with_block+0x64>)
 801625e:	f006 fa74 	bl	801c74a <sys_mbox_post>
  return ERR_OK;
 8016262:	2300      	movs	r3, #0
 8016264:	e7f0      	b.n	8016248 <tcpip_callback_with_block+0x30>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016266:	4621      	mov	r1, r4
 8016268:	2007      	movs	r0, #7
 801626a:	f001 ff7d 	bl	8018168 <memp_free>
      return ERR_MEM;
 801626e:	f04f 33ff 	mov.w	r3, #4294967295
 8016272:	e7e9      	b.n	8016248 <tcpip_callback_with_block+0x30>
    return ERR_MEM;
 8016274:	f04f 33ff 	mov.w	r3, #4294967295
 8016278:	e7e6      	b.n	8016248 <tcpip_callback_with_block+0x30>
 801627a:	bf00      	nop
 801627c:	20010164 	.word	0x20010164
 8016280:	08021b94 	.word	0x08021b94
 8016284:	08021b84 	.word	0x08021b84
 8016288:	080214f0 	.word	0x080214f0

0801628c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 801628c:	b570      	push	{r4, r5, r6, lr}
 801628e:	4605      	mov	r5, r0
 8016290:	460e      	mov	r6, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8016292:	4c05      	ldr	r4, [pc, #20]	; (80162a8 <tcpip_send_msg_wait_sem+0x1c>)
 8016294:	4620      	mov	r0, r4
 8016296:	f006 fb1e 	bl	801c8d6 <sys_mutex_lock>
  fn(apimsg);
 801629a:	4630      	mov	r0, r6
 801629c:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 801629e:	4620      	mov	r0, r4
 80162a0:	f006 fb20 	bl	801c8e4 <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80162a4:	2000      	movs	r0, #0
 80162a6:	bd70      	pop	{r4, r5, r6, pc}
 80162a8:	2001103c 	.word	0x2001103c

080162ac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80162ac:	b530      	push	{r4, r5, lr}
 80162ae:	b083      	sub	sp, #12
 80162b0:	4605      	mov	r5, r0
 80162b2:	460c      	mov	r4, r1
  lwip_init();
 80162b4:	f000 f870 	bl	8016398 <lwip_init>

  tcpip_init_done = initfunc;
 80162b8:	4b13      	ldr	r3, [pc, #76]	; (8016308 <tcpip_init+0x5c>)
 80162ba:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 80162bc:	4b13      	ldr	r3, [pc, #76]	; (801630c <tcpip_init+0x60>)
 80162be:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80162c0:	2106      	movs	r1, #6
 80162c2:	4813      	ldr	r0, [pc, #76]	; (8016310 <tcpip_init+0x64>)
 80162c4:	f006 fa24 	bl	801c710 <sys_mbox_new>
 80162c8:	b970      	cbnz	r0, 80162e8 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80162ca:	4812      	ldr	r0, [pc, #72]	; (8016314 <tcpip_init+0x68>)
 80162cc:	f006 faf2 	bl	801c8b4 <sys_mutex_new>
 80162d0:	b990      	cbnz	r0, 80162f8 <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80162d2:	2302      	movs	r3, #2
 80162d4:	9300      	str	r3, [sp, #0]
 80162d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80162da:	2200      	movs	r2, #0
 80162dc:	490e      	ldr	r1, [pc, #56]	; (8016318 <tcpip_init+0x6c>)
 80162de:	480f      	ldr	r0, [pc, #60]	; (801631c <tcpip_init+0x70>)
 80162e0:	f006 fb05 	bl	801c8ee <sys_thread_new>
}
 80162e4:	b003      	add	sp, #12
 80162e6:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80162e8:	4b0d      	ldr	r3, [pc, #52]	; (8016320 <tcpip_init+0x74>)
 80162ea:	f240 12d5 	movw	r2, #469	; 0x1d5
 80162ee:	490d      	ldr	r1, [pc, #52]	; (8016324 <tcpip_init+0x78>)
 80162f0:	480d      	ldr	r0, [pc, #52]	; (8016328 <tcpip_init+0x7c>)
 80162f2:	f009 fbfc 	bl	801faee <iprintf>
 80162f6:	e7e8      	b.n	80162ca <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80162f8:	4b09      	ldr	r3, [pc, #36]	; (8016320 <tcpip_init+0x74>)
 80162fa:	f240 12d9 	movw	r2, #473	; 0x1d9
 80162fe:	490b      	ldr	r1, [pc, #44]	; (801632c <tcpip_init+0x80>)
 8016300:	4809      	ldr	r0, [pc, #36]	; (8016328 <tcpip_init+0x7c>)
 8016302:	f009 fbf4 	bl	801faee <iprintf>
 8016306:	e7e4      	b.n	80162d2 <tcpip_init+0x26>
 8016308:	20010168 	.word	0x20010168
 801630c:	2001016c 	.word	0x2001016c
 8016310:	20010164 	.word	0x20010164
 8016314:	2001103c 	.word	0x2001103c
 8016318:	080160e9 	.word	0x080160e9
 801631c:	08021b74 	.word	0x08021b74
 8016320:	08021b94 	.word	0x08021b94
 8016324:	08021b2c 	.word	0x08021b2c
 8016328:	080214f0 	.word	0x080214f0
 801632c:	08021b50 	.word	0x08021b50

08016330 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8016330:	b1c8      	cbz	r0, 8016366 <fs_open+0x36>
{
 8016332:	b570      	push	{r4, r5, r6, lr}
 8016334:	4606      	mov	r6, r0
  if ((file == NULL) || (name == NULL)) {
 8016336:	b1c9      	cbz	r1, 801636c <fs_open+0x3c>
 8016338:	460d      	mov	r5, r1
 801633a:	4c0e      	ldr	r4, [pc, #56]	; (8016374 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 801633c:	b184      	cbz	r4, 8016360 <fs_open+0x30>
    if (!strcmp(name, (const char *)f->name)) {
 801633e:	6861      	ldr	r1, [r4, #4]
 8016340:	4628      	mov	r0, r5
 8016342:	f7f9 fe8b 	bl	801005c <strcmp>
 8016346:	b108      	cbz	r0, 801634c <fs_open+0x1c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8016348:	6824      	ldr	r4, [r4, #0]
 801634a:	e7f7      	b.n	801633c <fs_open+0xc>
      file->data = (const char *)f->data;
 801634c:	68a3      	ldr	r3, [r4, #8]
 801634e:	6033      	str	r3, [r6, #0]
      file->len = f->len;
 8016350:	68e3      	ldr	r3, [r4, #12]
 8016352:	6073      	str	r3, [r6, #4]
      file->index = f->len;
 8016354:	68e3      	ldr	r3, [r4, #12]
 8016356:	60b3      	str	r3, [r6, #8]
      file->pextension = NULL;
 8016358:	60f0      	str	r0, [r6, #12]
      file->flags = f->flags;
 801635a:	7c23      	ldrb	r3, [r4, #16]
 801635c:	7433      	strb	r3, [r6, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 801635e:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  /* file not found */
  return ERR_VAL;
 8016360:	f06f 0005 	mvn.w	r0, #5
 8016364:	bd70      	pop	{r4, r5, r6, pc}
     return ERR_ARG;
 8016366:	f06f 000f 	mvn.w	r0, #15
 801636a:	4770      	bx	lr
 801636c:	f06f 000f 	mvn.w	r0, #15
}
 8016370:	bd70      	pop	{r4, r5, r6, pc}
 8016372:	bf00      	nop
 8016374:	08025544 	.word	0x08025544

08016378 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8016378:	4770      	bx	lr

0801637a <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 801637a:	ba40      	rev16	r0, r0
}
 801637c:	b280      	uxth	r0, r0
 801637e:	4770      	bx	lr

08016380 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 8016380:	0203      	lsls	r3, r0, #8
 8016382:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016386:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801638a:	0a02      	lsrs	r2, r0, #8
 801638c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016390:	4313      	orrs	r3, r2
}
 8016392:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8016396:	4770      	bx	lr

08016398 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8016398:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801639a:	f006 fa7f 	bl	801c89c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801639e:	f001 fc8b 	bl	8017cb8 <mem_init>
  memp_init();
 80163a2:	f001 feb7 	bl	8018114 <memp_init>
  pbuf_init();
  netif_init();
 80163a6:	f001 ff0a 	bl	80181be <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80163aa:	f002 fc7b 	bl	8018ca4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80163ae:	f006 f8dd 	bl	801c56c <sys_timeouts_init>
 80163b2:	bd08      	pop	{r3, pc}

080163b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80163b4:	b510      	push	{r4, lr}
 80163b6:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80163b8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80163bc:	00d3      	lsls	r3, r2, #3
 80163be:	4a09      	ldr	r2, [pc, #36]	; (80163e4 <etharp_free_entry+0x30>)
 80163c0:	58d0      	ldr	r0, [r2, r3]
 80163c2:	b138      	cbz	r0, 80163d4 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80163c4:	f002 f8bc 	bl	8018540 <pbuf_free>
    arp_table[i].q = NULL;
 80163c8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80163cc:	00d3      	lsls	r3, r2, #3
 80163ce:	2100      	movs	r1, #0
 80163d0:	4a04      	ldr	r2, [pc, #16]	; (80163e4 <etharp_free_entry+0x30>)
 80163d2:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80163d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80163d8:	00e2      	lsls	r2, r4, #3
 80163da:	4b02      	ldr	r3, [pc, #8]	; (80163e4 <etharp_free_entry+0x30>)
 80163dc:	4413      	add	r3, r2
 80163de:	2200      	movs	r2, #0
 80163e0:	751a      	strb	r2, [r3, #20]
 80163e2:	bd10      	pop	{r4, pc}
 80163e4:	20010170 	.word	0x20010170

080163e8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80163e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80163ec:	f04f 0e00 	mov.w	lr, #0
 80163f0:	46f3      	mov	fp, lr
 80163f2:	46f1      	mov	r9, lr
  s8_t old_queue = ARP_TABLE_SIZE;
 80163f4:	f04f 0c0a 	mov.w	ip, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80163f8:	4673      	mov	r3, lr
  s8_t empty = ARP_TABLE_SIZE;
 80163fa:	4667      	mov	r7, ip
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80163fc:	46e0      	mov	r8, ip
 80163fe:	46e2      	mov	sl, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016400:	e003      	b.n	801640a <etharp_find_entry+0x22>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016402:	b96c      	cbnz	r4, 8016420 <etharp_find_entry+0x38>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8016404:	b25f      	sxtb	r7, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016406:	3301      	adds	r3, #1
 8016408:	b2db      	uxtb	r3, r3
 801640a:	2b09      	cmp	r3, #9
 801640c:	d845      	bhi.n	801649a <etharp_find_entry+0xb2>
    u8_t state = arp_table[i].state;
 801640e:	461a      	mov	r2, r3
 8016410:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8016414:	00e5      	lsls	r5, r4, #3
 8016416:	4c59      	ldr	r4, [pc, #356]	; (801657c <etharp_find_entry+0x194>)
 8016418:	442c      	add	r4, r5
 801641a:	7d24      	ldrb	r4, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801641c:	2f0a      	cmp	r7, #10
 801641e:	d0f0      	beq.n	8016402 <etharp_find_entry+0x1a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016420:	2c00      	cmp	r4, #0
 8016422:	d0f0      	beq.n	8016406 <etharp_find_entry+0x1e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016424:	b140      	cbz	r0, 8016438 <etharp_find_entry+0x50>
 8016426:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 801642a:	00ee      	lsls	r6, r5, #3
 801642c:	4d53      	ldr	r5, [pc, #332]	; (801657c <etharp_find_entry+0x194>)
 801642e:	4435      	add	r5, r6
 8016430:	686d      	ldr	r5, [r5, #4]
 8016432:	6806      	ldr	r6, [r0, #0]
 8016434:	42ae      	cmp	r6, r5
 8016436:	d00f      	beq.n	8016458 <etharp_find_entry+0x70>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016438:	2c01      	cmp	r4, #1
 801643a:	d010      	beq.n	801645e <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801643c:	2c01      	cmp	r4, #1
 801643e:	d9e2      	bls.n	8016406 <etharp_find_entry+0x1e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016440:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016444:	00d4      	lsls	r4, r2, #3
 8016446:	4a4d      	ldr	r2, [pc, #308]	; (801657c <etharp_find_entry+0x194>)
 8016448:	4422      	add	r2, r4
 801644a:	8a52      	ldrh	r2, [r2, #18]
 801644c:	4596      	cmp	lr, r2
 801644e:	d8da      	bhi.n	8016406 <etharp_find_entry+0x1e>
            old_stable = i;
 8016450:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 8016454:	4696      	mov	lr, r2
 8016456:	e7d6      	b.n	8016406 <etharp_find_entry+0x1e>
        return i;
 8016458:	b258      	sxtb	r0, r3
 801645a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 801645e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8016462:	00ec      	lsls	r4, r5, #3
 8016464:	4d45      	ldr	r5, [pc, #276]	; (801657c <etharp_find_entry+0x194>)
 8016466:	592c      	ldr	r4, [r5, r4]
 8016468:	b15c      	cbz	r4, 8016482 <etharp_find_entry+0x9a>
          if (arp_table[i].ctime >= age_queue) {
 801646a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801646e:	00d4      	lsls	r4, r2, #3
 8016470:	462a      	mov	r2, r5
 8016472:	4422      	add	r2, r4
 8016474:	8a52      	ldrh	r2, [r2, #18]
 8016476:	4591      	cmp	r9, r2
 8016478:	d8c5      	bhi.n	8016406 <etharp_find_entry+0x1e>
            old_queue = i;
 801647a:	fa4f fc83 	sxtb.w	ip, r3
            age_queue = arp_table[i].ctime;
 801647e:	4691      	mov	r9, r2
 8016480:	e7c1      	b.n	8016406 <etharp_find_entry+0x1e>
          if (arp_table[i].ctime >= age_pending) {
 8016482:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016486:	00d4      	lsls	r4, r2, #3
 8016488:	4a3c      	ldr	r2, [pc, #240]	; (801657c <etharp_find_entry+0x194>)
 801648a:	4422      	add	r2, r4
 801648c:	8a52      	ldrh	r2, [r2, #18]
 801648e:	4593      	cmp	fp, r2
 8016490:	d8b9      	bhi.n	8016406 <etharp_find_entry+0x1e>
            old_pending = i;
 8016492:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 8016496:	4693      	mov	fp, r2
 8016498:	e7b5      	b.n	8016406 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801649a:	f011 0f02 	tst.w	r1, #2
 801649e:	d165      	bne.n	801656c <etharp_find_entry+0x184>
 80164a0:	2f0a      	cmp	r7, #10
 80164a2:	d020      	beq.n	80164e6 <etharp_find_entry+0xfe>
 80164a4:	4605      	mov	r5, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80164a6:	2f09      	cmp	r7, #9
 80164a8:	dc24      	bgt.n	80164f4 <etharp_find_entry+0x10c>
    i = empty;
 80164aa:	b2ff      	uxtb	r7, r7
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80164ac:	2f09      	cmp	r7, #9
 80164ae:	d84d      	bhi.n	801654c <etharp_find_entry+0x164>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80164b0:	463c      	mov	r4, r7
 80164b2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80164b6:	00da      	lsls	r2, r3, #3
 80164b8:	4b30      	ldr	r3, [pc, #192]	; (801657c <etharp_find_entry+0x194>)
 80164ba:	4413      	add	r3, r2
 80164bc:	7d1b      	ldrb	r3, [r3, #20]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d14c      	bne.n	801655c <etharp_find_entry+0x174>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80164c2:	b135      	cbz	r5, 80164d2 <etharp_find_entry+0xea>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80164c4:	6829      	ldr	r1, [r5, #0]
 80164c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80164ca:	00da      	lsls	r2, r3, #3
 80164cc:	4b2b      	ldr	r3, [pc, #172]	; (801657c <etharp_find_entry+0x194>)
 80164ce:	4413      	add	r3, r2
 80164d0:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80164d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80164d6:	00e2      	lsls	r2, r4, #3
 80164d8:	4b28      	ldr	r3, [pc, #160]	; (801657c <etharp_find_entry+0x194>)
 80164da:	4413      	add	r3, r2
 80164dc:	2200      	movs	r2, #0
 80164de:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80164e0:	b278      	sxtb	r0, r7
 80164e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80164e6:	f011 0f01 	tst.w	r1, #1
 80164ea:	d1db      	bne.n	80164a4 <etharp_find_entry+0xbc>
    return (s8_t)ERR_MEM;
 80164ec:	f04f 30ff 	mov.w	r0, #4294967295
 80164f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (old_stable < ARP_TABLE_SIZE) {
 80164f4:	f1b8 0f09 	cmp.w	r8, #9
 80164f8:	dc14      	bgt.n	8016524 <etharp_find_entry+0x13c>
      i = old_stable;
 80164fa:	fa5f f788 	uxtb.w	r7, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80164fe:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8016502:	00d3      	lsls	r3, r2, #3
 8016504:	4a1d      	ldr	r2, [pc, #116]	; (801657c <etharp_find_entry+0x194>)
 8016506:	58d3      	ldr	r3, [r2, r3]
 8016508:	b133      	cbz	r3, 8016518 <etharp_find_entry+0x130>
 801650a:	4b1d      	ldr	r3, [pc, #116]	; (8016580 <etharp_find_entry+0x198>)
 801650c:	f240 126f 	movw	r2, #367	; 0x16f
 8016510:	491c      	ldr	r1, [pc, #112]	; (8016584 <etharp_find_entry+0x19c>)
 8016512:	481d      	ldr	r0, [pc, #116]	; (8016588 <etharp_find_entry+0x1a0>)
 8016514:	f009 faeb 	bl	801faee <iprintf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016518:	2f09      	cmp	r7, #9
 801651a:	d80f      	bhi.n	801653c <etharp_find_entry+0x154>
    etharp_free_entry(i);
 801651c:	4638      	mov	r0, r7
 801651e:	f7ff ff49 	bl	80163b4 <etharp_free_entry>
 8016522:	e7c3      	b.n	80164ac <etharp_find_entry+0xc4>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016524:	f1ba 0f09 	cmp.w	sl, #9
 8016528:	dc02      	bgt.n	8016530 <etharp_find_entry+0x148>
      i = old_pending;
 801652a:	fa5f f78a 	uxtb.w	r7, sl
 801652e:	e7f3      	b.n	8016518 <etharp_find_entry+0x130>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016530:	f1bc 0f09 	cmp.w	ip, #9
 8016534:	dc1e      	bgt.n	8016574 <etharp_find_entry+0x18c>
      i = old_queue;
 8016536:	fa5f f78c 	uxtb.w	r7, ip
 801653a:	e7ed      	b.n	8016518 <etharp_find_entry+0x130>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801653c:	4b10      	ldr	r3, [pc, #64]	; (8016580 <etharp_find_entry+0x198>)
 801653e:	f240 1281 	movw	r2, #385	; 0x181
 8016542:	4912      	ldr	r1, [pc, #72]	; (801658c <etharp_find_entry+0x1a4>)
 8016544:	4810      	ldr	r0, [pc, #64]	; (8016588 <etharp_find_entry+0x1a0>)
 8016546:	f009 fad2 	bl	801faee <iprintf>
 801654a:	e7e7      	b.n	801651c <etharp_find_entry+0x134>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801654c:	4b0c      	ldr	r3, [pc, #48]	; (8016580 <etharp_find_entry+0x198>)
 801654e:	f240 1285 	movw	r2, #389	; 0x185
 8016552:	490e      	ldr	r1, [pc, #56]	; (801658c <etharp_find_entry+0x1a4>)
 8016554:	480c      	ldr	r0, [pc, #48]	; (8016588 <etharp_find_entry+0x1a0>)
 8016556:	f009 faca 	bl	801faee <iprintf>
 801655a:	e7a9      	b.n	80164b0 <etharp_find_entry+0xc8>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801655c:	4b08      	ldr	r3, [pc, #32]	; (8016580 <etharp_find_entry+0x198>)
 801655e:	f240 1287 	movw	r2, #391	; 0x187
 8016562:	490b      	ldr	r1, [pc, #44]	; (8016590 <etharp_find_entry+0x1a8>)
 8016564:	4808      	ldr	r0, [pc, #32]	; (8016588 <etharp_find_entry+0x1a0>)
 8016566:	f009 fac2 	bl	801faee <iprintf>
 801656a:	e7aa      	b.n	80164c2 <etharp_find_entry+0xda>
    return (s8_t)ERR_MEM;
 801656c:	f04f 30ff 	mov.w	r0, #4294967295
 8016570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (s8_t)ERR_MEM;
 8016574:	f04f 30ff 	mov.w	r0, #4294967295
}
 8016578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801657c:	20010170 	.word	0x20010170
 8016580:	08025558 	.word	0x08025558
 8016584:	08025590 	.word	0x08025590
 8016588:	080214f0 	.word	0x080214f0
 801658c:	080255a8 	.word	0x080255a8
 8016590:	080255bc 	.word	0x080255bc

08016594 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016596:	b083      	sub	sp, #12
 8016598:	4604      	mov	r4, r0
 801659a:	460d      	mov	r5, r1
 801659c:	4616      	mov	r6, r2
 801659e:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80165a0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80165a4:	2b06      	cmp	r3, #6
 80165a6:	d006      	beq.n	80165b6 <etharp_update_arp_entry+0x22>
 80165a8:	4b28      	ldr	r3, [pc, #160]	; (801664c <etharp_update_arp_entry+0xb8>)
 80165aa:	f240 12ab 	movw	r2, #427	; 0x1ab
 80165ae:	4928      	ldr	r1, [pc, #160]	; (8016650 <etharp_update_arp_entry+0xbc>)
 80165b0:	4828      	ldr	r0, [pc, #160]	; (8016654 <etharp_update_arp_entry+0xc0>)
 80165b2:	f009 fa9c 	bl	801faee <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80165b6:	2d00      	cmp	r5, #0
 80165b8:	d039      	beq.n	801662e <etharp_update_arp_entry+0x9a>
 80165ba:	6828      	ldr	r0, [r5, #0]
 80165bc:	2800      	cmp	r0, #0
 80165be:	d039      	beq.n	8016634 <etharp_update_arp_entry+0xa0>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80165c0:	4621      	mov	r1, r4
 80165c2:	f000 fe34 	bl	801722e <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80165c6:	2800      	cmp	r0, #0
 80165c8:	d137      	bne.n	801663a <etharp_update_arp_entry+0xa6>
      ip4_addr_ismulticast(ipaddr)) {
 80165ca:	682b      	ldr	r3, [r5, #0]
 80165cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80165d0:	2be0      	cmp	r3, #224	; 0xe0
 80165d2:	d035      	beq.n	8016640 <etharp_update_arp_entry+0xac>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80165d4:	4622      	mov	r2, r4
 80165d6:	4639      	mov	r1, r7
 80165d8:	4628      	mov	r0, r5
 80165da:	f7ff ff05 	bl	80163e8 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 80165de:	2800      	cmp	r0, #0
 80165e0:	db23      	blt.n	801662a <etharp_update_arp_entry+0x96>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80165e2:	4d1d      	ldr	r5, [pc, #116]	; (8016658 <etharp_update_arp_entry+0xc4>)
 80165e4:	0042      	lsls	r2, r0, #1
 80165e6:	1813      	adds	r3, r2, r0
 80165e8:	00d9      	lsls	r1, r3, #3
 80165ea:	186f      	adds	r7, r5, r1
 80165ec:	2302      	movs	r3, #2
 80165ee:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80165f0:	60bc      	str	r4, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80165f2:	460b      	mov	r3, r1
 80165f4:	3308      	adds	r3, #8
 80165f6:	442b      	add	r3, r5
 80165f8:	6832      	ldr	r2, [r6, #0]
 80165fa:	605a      	str	r2, [r3, #4]
 80165fc:	88b2      	ldrh	r2, [r6, #4]
 80165fe:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016600:	2300      	movs	r3, #0
 8016602:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016604:	586d      	ldr	r5, [r5, r1]
 8016606:	b1f5      	cbz	r5, 8016646 <etharp_update_arp_entry+0xb2>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 8016608:	2700      	movs	r7, #0
 801660a:	4a13      	ldr	r2, [pc, #76]	; (8016658 <etharp_update_arp_entry+0xc4>)
 801660c:	5057      	str	r7, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801660e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016612:	9300      	str	r3, [sp, #0]
 8016614:	4633      	mov	r3, r6
 8016616:	f104 0225 	add.w	r2, r4, #37	; 0x25
 801661a:	4629      	mov	r1, r5
 801661c:	4620      	mov	r0, r4
 801661e:	f006 f83f 	bl	801c6a0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016622:	4628      	mov	r0, r5
 8016624:	f001 ff8c 	bl	8018540 <pbuf_free>
  }
  return ERR_OK;
 8016628:	4638      	mov	r0, r7
}
 801662a:	b003      	add	sp, #12
 801662c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 801662e:	f06f 000f 	mvn.w	r0, #15
 8016632:	e7fa      	b.n	801662a <etharp_update_arp_entry+0x96>
 8016634:	f06f 000f 	mvn.w	r0, #15
 8016638:	e7f7      	b.n	801662a <etharp_update_arp_entry+0x96>
 801663a:	f06f 000f 	mvn.w	r0, #15
 801663e:	e7f4      	b.n	801662a <etharp_update_arp_entry+0x96>
 8016640:	f06f 000f 	mvn.w	r0, #15
 8016644:	e7f1      	b.n	801662a <etharp_update_arp_entry+0x96>
  return ERR_OK;
 8016646:	2000      	movs	r0, #0
 8016648:	e7ef      	b.n	801662a <etharp_update_arp_entry+0x96>
 801664a:	bf00      	nop
 801664c:	08025558 	.word	0x08025558
 8016650:	08025710 	.word	0x08025710
 8016654:	080214f0 	.word	0x080214f0
 8016658:	20010170 	.word	0x20010170

0801665c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801665c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016660:	b082      	sub	sp, #8
 8016662:	4689      	mov	r9, r1
 8016664:	4692      	mov	sl, r2
 8016666:	4698      	mov	r8, r3
 8016668:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801666a:	4607      	mov	r7, r0
 801666c:	2800      	cmp	r0, #0
 801666e:	d048      	beq.n	8016702 <etharp_raw+0xa6>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016670:	2200      	movs	r2, #0
 8016672:	211c      	movs	r1, #28
 8016674:	2002      	movs	r0, #2
 8016676:	f001 ffcf 	bl	8018618 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801667a:	4606      	mov	r6, r0
 801667c:	2800      	cmp	r0, #0
 801667e:	d050      	beq.n	8016722 <etharp_raw+0xc6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016680:	8943      	ldrh	r3, [r0, #10]
 8016682:	2b1b      	cmp	r3, #27
 8016684:	d945      	bls.n	8016712 <etharp_raw+0xb6>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016686:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016688:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801668c:	f7ff fe75 	bl	801637a <lwip_htons>
 8016690:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016692:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016696:	2b06      	cmp	r3, #6
 8016698:	d006      	beq.n	80166a8 <etharp_raw+0x4c>
 801669a:	4b23      	ldr	r3, [pc, #140]	; (8016728 <etharp_raw+0xcc>)
 801669c:	f240 426b 	movw	r2, #1131	; 0x46b
 80166a0:	4922      	ldr	r1, [pc, #136]	; (801672c <etharp_raw+0xd0>)
 80166a2:	4823      	ldr	r0, [pc, #140]	; (8016730 <etharp_raw+0xd4>)
 80166a4:	f009 fa23 	bl	801faee <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80166a8:	f8d8 3000 	ldr.w	r3, [r8]
 80166ac:	60a3      	str	r3, [r4, #8]
 80166ae:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80166b2:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80166b4:	682b      	ldr	r3, [r5, #0]
 80166b6:	f8c4 3012 	str.w	r3, [r4, #18]
 80166ba:	88ab      	ldrh	r3, [r5, #4]
 80166bc:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80166be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80166c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80166cc:	2500      	movs	r5, #0
 80166ce:	7025      	strb	r5, [r4, #0]
 80166d0:	2301      	movs	r3, #1
 80166d2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80166d4:	2308      	movs	r3, #8
 80166d6:	70a3      	strb	r3, [r4, #2]
 80166d8:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80166da:	2306      	movs	r3, #6
 80166dc:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80166de:	2304      	movs	r3, #4
 80166e0:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80166e2:	f640 0306 	movw	r3, #2054	; 0x806
 80166e6:	9300      	str	r3, [sp, #0]
 80166e8:	4653      	mov	r3, sl
 80166ea:	464a      	mov	r2, r9
 80166ec:	4631      	mov	r1, r6
 80166ee:	4638      	mov	r0, r7
 80166f0:	f005 ffd6 	bl	801c6a0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80166f4:	4630      	mov	r0, r6
 80166f6:	f001 ff23 	bl	8018540 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80166fa:	4628      	mov	r0, r5
}
 80166fc:	b002      	add	sp, #8
 80166fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016702:	4b09      	ldr	r3, [pc, #36]	; (8016728 <etharp_raw+0xcc>)
 8016704:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8016708:	490a      	ldr	r1, [pc, #40]	; (8016734 <etharp_raw+0xd8>)
 801670a:	4809      	ldr	r0, [pc, #36]	; (8016730 <etharp_raw+0xd4>)
 801670c:	f009 f9ef 	bl	801faee <iprintf>
 8016710:	e7ae      	b.n	8016670 <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016712:	4b05      	ldr	r3, [pc, #20]	; (8016728 <etharp_raw+0xcc>)
 8016714:	f240 4264 	movw	r2, #1124	; 0x464
 8016718:	4907      	ldr	r1, [pc, #28]	; (8016738 <etharp_raw+0xdc>)
 801671a:	4805      	ldr	r0, [pc, #20]	; (8016730 <etharp_raw+0xd4>)
 801671c:	f009 f9e7 	bl	801faee <iprintf>
 8016720:	e7b1      	b.n	8016686 <etharp_raw+0x2a>
    return ERR_MEM;
 8016722:	f04f 30ff 	mov.w	r0, #4294967295
 8016726:	e7e9      	b.n	80166fc <etharp_raw+0xa0>
 8016728:	08025558 	.word	0x08025558
 801672c:	080256cc 	.word	0x080256cc
 8016730:	080214f0 	.word	0x080214f0
 8016734:	08025688 	.word	0x08025688
 8016738:	08025698 	.word	0x08025698

0801673c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801673c:	b530      	push	{r4, r5, lr}
 801673e:	b085      	sub	sp, #20
 8016740:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016742:	f100 0425 	add.w	r4, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016746:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016748:	2501      	movs	r5, #1
 801674a:	9503      	str	r5, [sp, #12]
 801674c:	9102      	str	r1, [sp, #8]
 801674e:	4904      	ldr	r1, [pc, #16]	; (8016760 <etharp_request_dst+0x24>)
 8016750:	9101      	str	r1, [sp, #4]
 8016752:	9300      	str	r3, [sp, #0]
 8016754:	4623      	mov	r3, r4
 8016756:	4621      	mov	r1, r4
 8016758:	f7ff ff80 	bl	801665c <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 801675c:	b005      	add	sp, #20
 801675e:	bd30      	pop	{r4, r5, pc}
 8016760:	08026e14 	.word	0x08026e14

08016764 <etharp_cleanup_netif>:
{
 8016764:	b538      	push	{r3, r4, r5, lr}
 8016766:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016768:	2400      	movs	r4, #0
 801676a:	e001      	b.n	8016770 <etharp_cleanup_netif+0xc>
 801676c:	3401      	adds	r4, #1
 801676e:	b2e4      	uxtb	r4, r4
 8016770:	2c09      	cmp	r4, #9
 8016772:	d810      	bhi.n	8016796 <etharp_cleanup_netif+0x32>
    u8_t state = arp_table[i].state;
 8016774:	4620      	mov	r0, r4
 8016776:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801677a:	00da      	lsls	r2, r3, #3
 801677c:	4b06      	ldr	r3, [pc, #24]	; (8016798 <etharp_cleanup_netif+0x34>)
 801677e:	4413      	add	r3, r2
 8016780:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016782:	2b00      	cmp	r3, #0
 8016784:	d0f2      	beq.n	801676c <etharp_cleanup_netif+0x8>
 8016786:	4b04      	ldr	r3, [pc, #16]	; (8016798 <etharp_cleanup_netif+0x34>)
 8016788:	4413      	add	r3, r2
 801678a:	689b      	ldr	r3, [r3, #8]
 801678c:	42ab      	cmp	r3, r5
 801678e:	d1ed      	bne.n	801676c <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 8016790:	f7ff fe10 	bl	80163b4 <etharp_free_entry>
 8016794:	e7ea      	b.n	801676c <etharp_cleanup_netif+0x8>
}
 8016796:	bd38      	pop	{r3, r4, r5, pc}
 8016798:	20010170 	.word	0x20010170

0801679c <etharp_input>:
{
 801679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167a0:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80167a2:	b161      	cbz	r1, 80167be <etharp_input+0x22>
 80167a4:	4604      	mov	r4, r0
 80167a6:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 80167a8:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80167aa:	882b      	ldrh	r3, [r5, #0]
 80167ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167b0:	d00d      	beq.n	80167ce <etharp_input+0x32>
    pbuf_free(p);
 80167b2:	4620      	mov	r0, r4
 80167b4:	f001 fec4 	bl	8018540 <pbuf_free>
}
 80167b8:	b006      	add	sp, #24
 80167ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80167be:	4b20      	ldr	r3, [pc, #128]	; (8016840 <etharp_input+0xa4>)
 80167c0:	f44f 7222 	mov.w	r2, #648	; 0x288
 80167c4:	491f      	ldr	r1, [pc, #124]	; (8016844 <etharp_input+0xa8>)
 80167c6:	4820      	ldr	r0, [pc, #128]	; (8016848 <etharp_input+0xac>)
 80167c8:	f009 f991 	bl	801faee <iprintf>
 80167cc:	e7f4      	b.n	80167b8 <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80167ce:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80167d0:	2b06      	cmp	r3, #6
 80167d2:	d1ee      	bne.n	80167b2 <etharp_input+0x16>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80167d4:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80167d6:	2b04      	cmp	r3, #4
 80167d8:	d1eb      	bne.n	80167b2 <etharp_input+0x16>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80167da:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80167dc:	2b08      	cmp	r3, #8
 80167de:	d1e8      	bne.n	80167b2 <etharp_input+0x16>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80167e0:	f8d5 300e 	ldr.w	r3, [r5, #14]
 80167e4:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80167e6:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80167e8:	684b      	ldr	r3, [r1, #4]
 80167ea:	b1ab      	cbz	r3, 8016818 <etharp_input+0x7c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80167ec:	429f      	cmp	r7, r3
 80167ee:	bf14      	ite	ne
 80167f0:	2700      	movne	r7, #0
 80167f2:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80167f4:	f105 0808 	add.w	r8, r5, #8
 80167f8:	b187      	cbz	r7, 801681c <etharp_input+0x80>
 80167fa:	2301      	movs	r3, #1
 80167fc:	4642      	mov	r2, r8
 80167fe:	a905      	add	r1, sp, #20
 8016800:	4630      	mov	r0, r6
 8016802:	f7ff fec7 	bl	8016594 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 8016806:	88eb      	ldrh	r3, [r5, #6]
 8016808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801680c:	d100      	bne.n	8016810 <etharp_input+0x74>
    if (for_us) {
 801680e:	b93f      	cbnz	r7, 8016820 <etharp_input+0x84>
  pbuf_free(p);
 8016810:	4620      	mov	r0, r4
 8016812:	f001 fe95 	bl	8018540 <pbuf_free>
 8016816:	e7cf      	b.n	80167b8 <etharp_input+0x1c>
    for_us = 0;
 8016818:	2700      	movs	r7, #0
 801681a:	e7eb      	b.n	80167f4 <etharp_input+0x58>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801681c:	2302      	movs	r3, #2
 801681e:	e7ed      	b.n	80167fc <etharp_input+0x60>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016820:	f106 0125 	add.w	r1, r6, #37	; 0x25
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016824:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 8016826:	2202      	movs	r2, #2
 8016828:	9203      	str	r2, [sp, #12]
 801682a:	aa05      	add	r2, sp, #20
 801682c:	9202      	str	r2, [sp, #8]
 801682e:	f8cd 8004 	str.w	r8, [sp, #4]
 8016832:	9300      	str	r3, [sp, #0]
 8016834:	460b      	mov	r3, r1
 8016836:	4642      	mov	r2, r8
 8016838:	4630      	mov	r0, r6
 801683a:	f7ff ff0f 	bl	801665c <etharp_raw>
 801683e:	e7e7      	b.n	8016810 <etharp_input+0x74>
 8016840:	08025558 	.word	0x08025558
 8016844:	08025688 	.word	0x08025688
 8016848:	080214f0 	.word	0x080214f0

0801684c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801684c:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801684e:	4a02      	ldr	r2, [pc, #8]	; (8016858 <etharp_request+0xc>)
 8016850:	f7ff ff74 	bl	801673c <etharp_request_dst>
}
 8016854:	bd08      	pop	{r3, pc}
 8016856:	bf00      	nop
 8016858:	08026da0 	.word	0x08026da0

0801685c <etharp_tmr>:
{
 801685c:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801685e:	2400      	movs	r4, #0
 8016860:	e005      	b.n	801686e <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016862:	2b04      	cmp	r3, #4
 8016864:	d91d      	bls.n	80168a2 <etharp_tmr+0x46>
        etharp_free_entry(i);
 8016866:	f7ff fda5 	bl	80163b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801686a:	3401      	adds	r4, #1
 801686c:	b2e4      	uxtb	r4, r4
 801686e:	2c09      	cmp	r4, #9
 8016870:	d838      	bhi.n	80168e4 <etharp_tmr+0x88>
    u8_t state = arp_table[i].state;
 8016872:	4620      	mov	r0, r4
 8016874:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8016878:	00da      	lsls	r2, r3, #3
 801687a:	4b1b      	ldr	r3, [pc, #108]	; (80168e8 <etharp_tmr+0x8c>)
 801687c:	4413      	add	r3, r2
 801687e:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 8016880:	2b00      	cmp	r3, #0
 8016882:	d0f2      	beq.n	801686a <etharp_tmr+0xe>
      arp_table[i].ctime++;
 8016884:	4611      	mov	r1, r2
 8016886:	4a18      	ldr	r2, [pc, #96]	; (80168e8 <etharp_tmr+0x8c>)
 8016888:	440a      	add	r2, r1
 801688a:	8a53      	ldrh	r3, [r2, #18]
 801688c:	3301      	adds	r3, #1
 801688e:	b29b      	uxth	r3, r3
 8016890:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016892:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016896:	d2e6      	bcs.n	8016866 <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016898:	4a13      	ldr	r2, [pc, #76]	; (80168e8 <etharp_tmr+0x8c>)
 801689a:	440a      	add	r2, r1
 801689c:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801689e:	2a01      	cmp	r2, #1
 80168a0:	d0df      	beq.n	8016862 <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80168a2:	2a03      	cmp	r2, #3
 80168a4:	d00e      	beq.n	80168c4 <etharp_tmr+0x68>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80168a6:	2a04      	cmp	r2, #4
 80168a8:	d014      	beq.n	80168d4 <etharp_tmr+0x78>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80168aa:	2a01      	cmp	r2, #1
 80168ac:	d1dd      	bne.n	801686a <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80168ae:	4a0e      	ldr	r2, [pc, #56]	; (80168e8 <etharp_tmr+0x8c>)
 80168b0:	0043      	lsls	r3, r0, #1
 80168b2:	181d      	adds	r5, r3, r0
 80168b4:	00e9      	lsls	r1, r5, #3
 80168b6:	4411      	add	r1, r2
 80168b8:	460a      	mov	r2, r1
 80168ba:	3104      	adds	r1, #4
 80168bc:	6890      	ldr	r0, [r2, #8]
 80168be:	f7ff ffc5 	bl	801684c <etharp_request>
 80168c2:	e7d2      	b.n	801686a <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80168c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80168c8:	00c2      	lsls	r2, r0, #3
 80168ca:	4b07      	ldr	r3, [pc, #28]	; (80168e8 <etharp_tmr+0x8c>)
 80168cc:	4413      	add	r3, r2
 80168ce:	2204      	movs	r2, #4
 80168d0:	751a      	strb	r2, [r3, #20]
 80168d2:	e7ca      	b.n	801686a <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80168d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80168d8:	00c2      	lsls	r2, r0, #3
 80168da:	4b03      	ldr	r3, [pc, #12]	; (80168e8 <etharp_tmr+0x8c>)
 80168dc:	4413      	add	r3, r2
 80168de:	2202      	movs	r2, #2
 80168e0:	751a      	strb	r2, [r3, #20]
 80168e2:	e7c2      	b.n	801686a <etharp_tmr+0xe>
}
 80168e4:	bd38      	pop	{r3, r4, r5, pc}
 80168e6:	bf00      	nop
 80168e8:	20010170 	.word	0x20010170

080168ec <etharp_output_to_arp_index>:
{
 80168ec:	b570      	push	{r4, r5, r6, lr}
 80168ee:	b082      	sub	sp, #8
 80168f0:	4605      	mov	r5, r0
 80168f2:	460e      	mov	r6, r1
 80168f4:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80168f6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80168fa:	00da      	lsls	r2, r3, #3
 80168fc:	4b2c      	ldr	r3, [pc, #176]	; (80169b0 <etharp_output_to_arp_index+0xc4>)
 80168fe:	4413      	add	r3, r2
 8016900:	7d1b      	ldrb	r3, [r3, #20]
 8016902:	2b01      	cmp	r3, #1
 8016904:	d919      	bls.n	801693a <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016906:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801690a:	00da      	lsls	r2, r3, #3
 801690c:	4b28      	ldr	r3, [pc, #160]	; (80169b0 <etharp_output_to_arp_index+0xc4>)
 801690e:	4413      	add	r3, r2
 8016910:	7d1b      	ldrb	r3, [r3, #20]
 8016912:	2b02      	cmp	r3, #2
 8016914:	d019      	beq.n	801694a <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016916:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801691a:	00e3      	lsls	r3, r4, #3
 801691c:	3308      	adds	r3, #8
 801691e:	4a24      	ldr	r2, [pc, #144]	; (80169b0 <etharp_output_to_arp_index+0xc4>)
 8016920:	4413      	add	r3, r2
 8016922:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016926:	9200      	str	r2, [sp, #0]
 8016928:	3304      	adds	r3, #4
 801692a:	f105 0225 	add.w	r2, r5, #37	; 0x25
 801692e:	4631      	mov	r1, r6
 8016930:	4628      	mov	r0, r5
 8016932:	f005 feb5 	bl	801c6a0 <ethernet_output>
}
 8016936:	b002      	add	sp, #8
 8016938:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801693a:	4b1e      	ldr	r3, [pc, #120]	; (80169b4 <etharp_output_to_arp_index+0xc8>)
 801693c:	f240 22ed 	movw	r2, #749	; 0x2ed
 8016940:	491d      	ldr	r1, [pc, #116]	; (80169b8 <etharp_output_to_arp_index+0xcc>)
 8016942:	481e      	ldr	r0, [pc, #120]	; (80169bc <etharp_output_to_arp_index+0xd0>)
 8016944:	f009 f8d3 	bl	801faee <iprintf>
 8016948:	e7dd      	b.n	8016906 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801694a:	4b19      	ldr	r3, [pc, #100]	; (80169b0 <etharp_output_to_arp_index+0xc4>)
 801694c:	4413      	add	r3, r2
 801694e:	8a5b      	ldrh	r3, [r3, #18]
 8016950:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016954:	d819      	bhi.n	801698a <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016956:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801695a:	d3dc      	bcc.n	8016916 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801695c:	4a14      	ldr	r2, [pc, #80]	; (80169b0 <etharp_output_to_arp_index+0xc4>)
 801695e:	0063      	lsls	r3, r4, #1
 8016960:	1918      	adds	r0, r3, r4
 8016962:	00c1      	lsls	r1, r0, #3
 8016964:	4608      	mov	r0, r1
 8016966:	4411      	add	r1, r2
 8016968:	3008      	adds	r0, #8
 801696a:	4402      	add	r2, r0
 801696c:	3204      	adds	r2, #4
 801696e:	3104      	adds	r1, #4
 8016970:	4628      	mov	r0, r5
 8016972:	f7ff fee3 	bl	801673c <etharp_request_dst>
 8016976:	2800      	cmp	r0, #0
 8016978:	d1cd      	bne.n	8016916 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801697a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801697e:	00da      	lsls	r2, r3, #3
 8016980:	4b0b      	ldr	r3, [pc, #44]	; (80169b0 <etharp_output_to_arp_index+0xc4>)
 8016982:	4413      	add	r3, r2
 8016984:	2203      	movs	r2, #3
 8016986:	751a      	strb	r2, [r3, #20]
 8016988:	e7c5      	b.n	8016916 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801698a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801698e:	00d3      	lsls	r3, r2, #3
 8016990:	4907      	ldr	r1, [pc, #28]	; (80169b0 <etharp_output_to_arp_index+0xc4>)
 8016992:	4419      	add	r1, r3
 8016994:	3104      	adds	r1, #4
 8016996:	4628      	mov	r0, r5
 8016998:	f7ff ff58 	bl	801684c <etharp_request>
 801699c:	2800      	cmp	r0, #0
 801699e:	d1ba      	bne.n	8016916 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80169a0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80169a4:	00da      	lsls	r2, r3, #3
 80169a6:	4b02      	ldr	r3, [pc, #8]	; (80169b0 <etharp_output_to_arp_index+0xc4>)
 80169a8:	4413      	add	r3, r2
 80169aa:	2203      	movs	r2, #3
 80169ac:	751a      	strb	r2, [r3, #20]
 80169ae:	e7b2      	b.n	8016916 <etharp_output_to_arp_index+0x2a>
 80169b0:	20010170 	.word	0x20010170
 80169b4:	08025558 	.word	0x08025558
 80169b8:	08025608 	.word	0x08025608
 80169bc:	080214f0 	.word	0x080214f0

080169c0 <etharp_query>:
{
 80169c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80169c4:	b083      	sub	sp, #12
 80169c6:	4606      	mov	r6, r0
 80169c8:	460c      	mov	r4, r1
 80169ca:	4617      	mov	r7, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80169cc:	f100 0825 	add.w	r8, r0, #37	; 0x25
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80169d0:	4601      	mov	r1, r0
 80169d2:	6820      	ldr	r0, [r4, #0]
 80169d4:	f000 fc2b 	bl	801722e <ip4_addr_isbroadcast_u32>
 80169d8:	2800      	cmp	r0, #0
 80169da:	f040 80aa 	bne.w	8016b32 <etharp_query+0x172>
      ip4_addr_ismulticast(ipaddr) ||
 80169de:	6823      	ldr	r3, [r4, #0]
 80169e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80169e4:	2ae0      	cmp	r2, #224	; 0xe0
 80169e6:	f000 80a7 	beq.w	8016b38 <etharp_query+0x178>
      ip4_addr_ismulticast(ipaddr) ||
 80169ea:	2c00      	cmp	r4, #0
 80169ec:	f000 80a7 	beq.w	8016b3e <etharp_query+0x17e>
      ip4_addr_isany(ipaddr)) {
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	f000 80a7 	beq.w	8016b44 <etharp_query+0x184>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80169f6:	4632      	mov	r2, r6
 80169f8:	2101      	movs	r1, #1
 80169fa:	4620      	mov	r0, r4
 80169fc:	f7ff fcf4 	bl	80163e8 <etharp_find_entry>
  if (i < 0) {
 8016a00:	1e05      	subs	r5, r0, #0
 8016a02:	f2c0 80a2 	blt.w	8016b4a <etharp_query+0x18a>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016a06:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8016a0a:	00da      	lsls	r2, r3, #3
 8016a0c:	4b51      	ldr	r3, [pc, #324]	; (8016b54 <etharp_query+0x194>)
 8016a0e:	4413      	add	r3, r2
 8016a10:	7d1b      	ldrb	r3, [r3, #20]
 8016a12:	bb1b      	cbnz	r3, 8016a5c <etharp_query+0x9c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016a14:	006a      	lsls	r2, r5, #1
 8016a16:	442a      	add	r2, r5
 8016a18:	00d1      	lsls	r1, r2, #3
 8016a1a:	4b4e      	ldr	r3, [pc, #312]	; (8016b54 <etharp_query+0x194>)
 8016a1c:	440b      	add	r3, r1
 8016a1e:	f04f 0901 	mov.w	r9, #1
 8016a22:	f883 9014 	strb.w	r9, [r3, #20]
    arp_table[i].netif = netif;
 8016a26:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016a28:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8016a2c:	00da      	lsls	r2, r3, #3
 8016a2e:	4b49      	ldr	r3, [pc, #292]	; (8016b54 <etharp_query+0x194>)
 8016a30:	4413      	add	r3, r2
 8016a32:	7d1b      	ldrb	r3, [r3, #20]
 8016a34:	b1ab      	cbz	r3, 8016a62 <etharp_query+0xa2>
  if (is_new_entry || (q == NULL)) {
 8016a36:	f1b9 0f00 	cmp.w	r9, #0
 8016a3a:	d11a      	bne.n	8016a72 <etharp_query+0xb2>
 8016a3c:	b1cf      	cbz	r7, 8016a72 <etharp_query+0xb2>
  err_t result = ERR_MEM;
 8016a3e:	f04f 34ff 	mov.w	r4, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 8016a42:	b1f7      	cbz	r7, 8016a82 <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016a44:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8016a48:	00da      	lsls	r2, r3, #3
 8016a4a:	4b42      	ldr	r3, [pc, #264]	; (8016b54 <etharp_query+0x194>)
 8016a4c:	4413      	add	r3, r2
 8016a4e:	7d1b      	ldrb	r3, [r3, #20]
 8016a50:	2b01      	cmp	r3, #1
 8016a52:	d81e      	bhi.n	8016a92 <etharp_query+0xd2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016a54:	2b01      	cmp	r3, #1
 8016a56:	d12c      	bne.n	8016ab2 <etharp_query+0xf2>
 8016a58:	463c      	mov	r4, r7
 8016a5a:	e032      	b.n	8016ac2 <etharp_query+0x102>
  int is_new_entry = 0;
 8016a5c:	f04f 0900 	mov.w	r9, #0
 8016a60:	e7e2      	b.n	8016a28 <etharp_query+0x68>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016a62:	4b3d      	ldr	r3, [pc, #244]	; (8016b58 <etharp_query+0x198>)
 8016a64:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016a68:	493c      	ldr	r1, [pc, #240]	; (8016b5c <etharp_query+0x19c>)
 8016a6a:	483d      	ldr	r0, [pc, #244]	; (8016b60 <etharp_query+0x1a0>)
 8016a6c:	f009 f83f 	bl	801faee <iprintf>
 8016a70:	e7e1      	b.n	8016a36 <etharp_query+0x76>
    result = etharp_request(netif, ipaddr);
 8016a72:	4621      	mov	r1, r4
 8016a74:	4630      	mov	r0, r6
 8016a76:	f7ff fee9 	bl	801684c <etharp_request>
 8016a7a:	4604      	mov	r4, r0
    if (q == NULL) {
 8016a7c:	2f00      	cmp	r7, #0
 8016a7e:	d1e0      	bne.n	8016a42 <etharp_query+0x82>
 8016a80:	e017      	b.n	8016ab2 <etharp_query+0xf2>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016a82:	4b35      	ldr	r3, [pc, #212]	; (8016b58 <etharp_query+0x198>)
 8016a84:	f240 32db 	movw	r2, #987	; 0x3db
 8016a88:	4936      	ldr	r1, [pc, #216]	; (8016b64 <etharp_query+0x1a4>)
 8016a8a:	4835      	ldr	r0, [pc, #212]	; (8016b60 <etharp_query+0x1a0>)
 8016a8c:	f009 f82f 	bl	801faee <iprintf>
 8016a90:	e7d8      	b.n	8016a44 <etharp_query+0x84>
    ETHARP_SET_HINT(netif, i);
 8016a92:	4b35      	ldr	r3, [pc, #212]	; (8016b68 <etharp_query+0x1a8>)
 8016a94:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016a96:	4613      	mov	r3, r2
 8016a98:	3308      	adds	r3, #8
 8016a9a:	4a2e      	ldr	r2, [pc, #184]	; (8016b54 <etharp_query+0x194>)
 8016a9c:	4413      	add	r3, r2
 8016a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016aa2:	9200      	str	r2, [sp, #0]
 8016aa4:	3304      	adds	r3, #4
 8016aa6:	4642      	mov	r2, r8
 8016aa8:	4639      	mov	r1, r7
 8016aaa:	4630      	mov	r0, r6
 8016aac:	f005 fdf8 	bl	801c6a0 <ethernet_output>
 8016ab0:	4604      	mov	r4, r0
}
 8016ab2:	4620      	mov	r0, r4
 8016ab4:	b003      	add	sp, #12
 8016ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (p->type != PBUF_ROM) {
 8016aba:	7b23      	ldrb	r3, [r4, #12]
 8016abc:	2b01      	cmp	r3, #1
 8016abe:	d122      	bne.n	8016b06 <etharp_query+0x146>
      p = p->next;
 8016ac0:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8016ac2:	b174      	cbz	r4, 8016ae2 <etharp_query+0x122>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016ac4:	8962      	ldrh	r2, [r4, #10]
 8016ac6:	8923      	ldrh	r3, [r4, #8]
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d1f6      	bne.n	8016aba <etharp_query+0xfa>
 8016acc:	6823      	ldr	r3, [r4, #0]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d0f3      	beq.n	8016aba <etharp_query+0xfa>
 8016ad2:	4b21      	ldr	r3, [pc, #132]	; (8016b58 <etharp_query+0x198>)
 8016ad4:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8016ad8:	4924      	ldr	r1, [pc, #144]	; (8016b6c <etharp_query+0x1ac>)
 8016ada:	4821      	ldr	r0, [pc, #132]	; (8016b60 <etharp_query+0x1a0>)
 8016adc:	f009 f807 	bl	801faee <iprintf>
 8016ae0:	e7eb      	b.n	8016aba <etharp_query+0xfa>
    int copy_needed = 0;
 8016ae2:	2300      	movs	r3, #0
    if (copy_needed) {
 8016ae4:	b18b      	cbz	r3, 8016b0a <etharp_query+0x14a>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	8921      	ldrh	r1, [r4, #8]
 8016aea:	2002      	movs	r0, #2
 8016aec:	f001 fd94 	bl	8018618 <pbuf_alloc>
      if (p != NULL) {
 8016af0:	4604      	mov	r4, r0
 8016af2:	b170      	cbz	r0, 8016b12 <etharp_query+0x152>
        if (pbuf_copy(p, q) != ERR_OK) {
 8016af4:	4639      	mov	r1, r7
 8016af6:	f001 ff49 	bl	801898c <pbuf_copy>
 8016afa:	b150      	cbz	r0, 8016b12 <etharp_query+0x152>
          pbuf_free(p);
 8016afc:	4620      	mov	r0, r4
 8016afe:	f001 fd1f 	bl	8018540 <pbuf_free>
          p = NULL;
 8016b02:	2400      	movs	r4, #0
 8016b04:	e005      	b.n	8016b12 <etharp_query+0x152>
        copy_needed = 1;
 8016b06:	2301      	movs	r3, #1
 8016b08:	e7ec      	b.n	8016ae4 <etharp_query+0x124>
      pbuf_ref(p);
 8016b0a:	4638      	mov	r0, r7
 8016b0c:	f001 fee8 	bl	80188e0 <pbuf_ref>
      p = q;
 8016b10:	463c      	mov	r4, r7
    if (p != NULL) {
 8016b12:	b1e4      	cbz	r4, 8016b4e <etharp_query+0x18e>
      if (arp_table[i].q != NULL) {
 8016b14:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8016b18:	00d3      	lsls	r3, r2, #3
 8016b1a:	4a0e      	ldr	r2, [pc, #56]	; (8016b54 <etharp_query+0x194>)
 8016b1c:	58d0      	ldr	r0, [r2, r3]
 8016b1e:	b108      	cbz	r0, 8016b24 <etharp_query+0x164>
        pbuf_free(arp_table[i].q);
 8016b20:	f001 fd0e 	bl	8018540 <pbuf_free>
      arp_table[i].q = p;
 8016b24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b28:	00eb      	lsls	r3, r5, #3
 8016b2a:	4a0a      	ldr	r2, [pc, #40]	; (8016b54 <etharp_query+0x194>)
 8016b2c:	50d4      	str	r4, [r2, r3]
      result = ERR_OK;
 8016b2e:	2400      	movs	r4, #0
 8016b30:	e7bf      	b.n	8016ab2 <etharp_query+0xf2>
    return ERR_ARG;
 8016b32:	f06f 040f 	mvn.w	r4, #15
 8016b36:	e7bc      	b.n	8016ab2 <etharp_query+0xf2>
 8016b38:	f06f 040f 	mvn.w	r4, #15
 8016b3c:	e7b9      	b.n	8016ab2 <etharp_query+0xf2>
 8016b3e:	f06f 040f 	mvn.w	r4, #15
 8016b42:	e7b6      	b.n	8016ab2 <etharp_query+0xf2>
 8016b44:	f06f 040f 	mvn.w	r4, #15
 8016b48:	e7b3      	b.n	8016ab2 <etharp_query+0xf2>
    return (err_t)i;
 8016b4a:	462c      	mov	r4, r5
 8016b4c:	e7b1      	b.n	8016ab2 <etharp_query+0xf2>
      result = ERR_MEM;
 8016b4e:	f04f 34ff 	mov.w	r4, #4294967295
 8016b52:	e7ae      	b.n	8016ab2 <etharp_query+0xf2>
 8016b54:	20010170 	.word	0x20010170
 8016b58:	08025558 	.word	0x08025558
 8016b5c:	08025638 	.word	0x08025638
 8016b60:	080214f0 	.word	0x080214f0
 8016b64:	08025660 	.word	0x08025660
 8016b68:	20010260 	.word	0x20010260
 8016b6c:	0802566c 	.word	0x0802566c

08016b70 <etharp_output>:
{
 8016b70:	b570      	push	{r4, r5, r6, lr}
 8016b72:	b084      	sub	sp, #16
 8016b74:	460e      	mov	r6, r1
 8016b76:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016b78:	4605      	mov	r5, r0
 8016b7a:	2800      	cmp	r0, #0
 8016b7c:	d02f      	beq.n	8016bde <etharp_output+0x6e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016b7e:	2e00      	cmp	r6, #0
 8016b80:	d035      	beq.n	8016bee <etharp_output+0x7e>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016b82:	2c00      	cmp	r4, #0
 8016b84:	d03b      	beq.n	8016bfe <etharp_output+0x8e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016b86:	4629      	mov	r1, r5
 8016b88:	6820      	ldr	r0, [r4, #0]
 8016b8a:	f000 fb50 	bl	801722e <ip4_addr_isbroadcast_u32>
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	d17a      	bne.n	8016c88 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016b92:	6823      	ldr	r3, [r4, #0]
 8016b94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016b98:	2ae0      	cmp	r2, #224	; 0xe0
 8016b9a:	d038      	beq.n	8016c0e <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016b9c:	686a      	ldr	r2, [r5, #4]
 8016b9e:	68a9      	ldr	r1, [r5, #8]
 8016ba0:	405a      	eors	r2, r3
 8016ba2:	420a      	tst	r2, r1
 8016ba4:	d009      	beq.n	8016bba <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 8016ba6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016ba8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016bac:	4293      	cmp	r3, r2
 8016bae:	d004      	beq.n	8016bba <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016bb0:	68eb      	ldr	r3, [r5, #12]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d074      	beq.n	8016ca0 <etharp_output+0x130>
            dst_addr = netif_ip4_gw(netif);
 8016bb6:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016bba:	4b3b      	ldr	r3, [pc, #236]	; (8016ca8 <etharp_output+0x138>)
 8016bbc:	781a      	ldrb	r2, [r3, #0]
 8016bbe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8016bc2:	00d9      	lsls	r1, r3, #3
 8016bc4:	4b39      	ldr	r3, [pc, #228]	; (8016cac <etharp_output+0x13c>)
 8016bc6:	440b      	add	r3, r1
 8016bc8:	7d1b      	ldrb	r3, [r3, #20]
 8016bca:	2b01      	cmp	r3, #1
 8016bcc:	d954      	bls.n	8016c78 <etharp_output+0x108>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016bce:	6820      	ldr	r0, [r4, #0]
 8016bd0:	4b36      	ldr	r3, [pc, #216]	; (8016cac <etharp_output+0x13c>)
 8016bd2:	440b      	add	r3, r1
 8016bd4:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016bd6:	4298      	cmp	r0, r3
 8016bd8:	d02f      	beq.n	8016c3a <etharp_output+0xca>
 8016bda:	2200      	movs	r2, #0
 8016bdc:	e034      	b.n	8016c48 <etharp_output+0xd8>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016bde:	4b34      	ldr	r3, [pc, #208]	; (8016cb0 <etharp_output+0x140>)
 8016be0:	f240 321b 	movw	r2, #795	; 0x31b
 8016be4:	4933      	ldr	r1, [pc, #204]	; (8016cb4 <etharp_output+0x144>)
 8016be6:	4834      	ldr	r0, [pc, #208]	; (8016cb8 <etharp_output+0x148>)
 8016be8:	f008 ff81 	bl	801faee <iprintf>
 8016bec:	e7c7      	b.n	8016b7e <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016bee:	4b30      	ldr	r3, [pc, #192]	; (8016cb0 <etharp_output+0x140>)
 8016bf0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8016bf4:	4931      	ldr	r1, [pc, #196]	; (8016cbc <etharp_output+0x14c>)
 8016bf6:	4830      	ldr	r0, [pc, #192]	; (8016cb8 <etharp_output+0x148>)
 8016bf8:	f008 ff79 	bl	801faee <iprintf>
 8016bfc:	e7c1      	b.n	8016b82 <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016bfe:	4b2c      	ldr	r3, [pc, #176]	; (8016cb0 <etharp_output+0x140>)
 8016c00:	f240 321d 	movw	r2, #797	; 0x31d
 8016c04:	492e      	ldr	r1, [pc, #184]	; (8016cc0 <etharp_output+0x150>)
 8016c06:	482c      	ldr	r0, [pc, #176]	; (8016cb8 <etharp_output+0x148>)
 8016c08:	f008 ff71 	bl	801faee <iprintf>
 8016c0c:	e7bb      	b.n	8016b86 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016c0e:	2301      	movs	r3, #1
 8016c10:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016c14:	2300      	movs	r3, #0
 8016c16:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016c1a:	235e      	movs	r3, #94	; 0x5e
 8016c1c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016c20:	7863      	ldrb	r3, [r4, #1]
 8016c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c26:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016c2a:	78a3      	ldrb	r3, [r4, #2]
 8016c2c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016c30:	78e3      	ldrb	r3, [r4, #3]
 8016c32:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8016c36:	ab02      	add	r3, sp, #8
 8016c38:	e027      	b.n	8016c8a <etharp_output+0x11a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016c3a:	4631      	mov	r1, r6
 8016c3c:	4628      	mov	r0, r5
 8016c3e:	f7ff fe55 	bl	80168ec <etharp_output_to_arp_index>
 8016c42:	e02b      	b.n	8016c9c <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016c44:	3201      	adds	r2, #1
 8016c46:	b252      	sxtb	r2, r2
 8016c48:	2a09      	cmp	r2, #9
 8016c4a:	dc17      	bgt.n	8016c7c <etharp_output+0x10c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016c4c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8016c50:	00d9      	lsls	r1, r3, #3
 8016c52:	4b16      	ldr	r3, [pc, #88]	; (8016cac <etharp_output+0x13c>)
 8016c54:	440b      	add	r3, r1
 8016c56:	7d1b      	ldrb	r3, [r3, #20]
 8016c58:	2b01      	cmp	r3, #1
 8016c5a:	d9f3      	bls.n	8016c44 <etharp_output+0xd4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016c5c:	6820      	ldr	r0, [r4, #0]
 8016c5e:	4b13      	ldr	r3, [pc, #76]	; (8016cac <etharp_output+0x13c>)
 8016c60:	440b      	add	r3, r1
 8016c62:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016c64:	4298      	cmp	r0, r3
 8016c66:	d1ed      	bne.n	8016c44 <etharp_output+0xd4>
        ETHARP_SET_HINT(netif, i);
 8016c68:	b2d2      	uxtb	r2, r2
 8016c6a:	4b0f      	ldr	r3, [pc, #60]	; (8016ca8 <etharp_output+0x138>)
 8016c6c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016c6e:	4631      	mov	r1, r6
 8016c70:	4628      	mov	r0, r5
 8016c72:	f7ff fe3b 	bl	80168ec <etharp_output_to_arp_index>
 8016c76:	e011      	b.n	8016c9c <etharp_output+0x12c>
 8016c78:	2200      	movs	r2, #0
 8016c7a:	e7e5      	b.n	8016c48 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 8016c7c:	4632      	mov	r2, r6
 8016c7e:	4621      	mov	r1, r4
 8016c80:	4628      	mov	r0, r5
 8016c82:	f7ff fe9d 	bl	80169c0 <etharp_query>
 8016c86:	e009      	b.n	8016c9c <etharp_output+0x12c>
    dest = (const struct eth_addr *)&ethbroadcast;
 8016c88:	4b0e      	ldr	r3, [pc, #56]	; (8016cc4 <etharp_output+0x154>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8016c8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016c8e:	9200      	str	r2, [sp, #0]
 8016c90:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8016c94:	4631      	mov	r1, r6
 8016c96:	4628      	mov	r0, r5
 8016c98:	f005 fd02 	bl	801c6a0 <ethernet_output>
}
 8016c9c:	b004      	add	sp, #16
 8016c9e:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
 8016ca0:	f06f 0003 	mvn.w	r0, #3
 8016ca4:	e7fa      	b.n	8016c9c <etharp_output+0x12c>
 8016ca6:	bf00      	nop
 8016ca8:	20010260 	.word	0x20010260
 8016cac:	20010170 	.word	0x20010170
 8016cb0:	08025558 	.word	0x08025558
 8016cb4:	08025688 	.word	0x08025688
 8016cb8:	080214f0 	.word	0x080214f0
 8016cbc:	08025660 	.word	0x08025660
 8016cc0:	080255e8 	.word	0x080255e8
 8016cc4:	08026da0 	.word	0x08026da0

08016cc8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ccc:	b086      	sub	sp, #24
 8016cce:	4606      	mov	r6, r0
 8016cd0:	4688      	mov	r8, r1
 8016cd2:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	2124      	movs	r1, #36	; 0x24
 8016cd8:	2001      	movs	r0, #1
 8016cda:	f001 fc9d 	bl	8018618 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	d037      	beq.n	8016d52 <icmp_send_response+0x8a>
 8016ce2:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016ce4:	8943      	ldrh	r3, [r0, #10]
 8016ce6:	2b23      	cmp	r3, #35	; 0x23
 8016ce8:	d936      	bls.n	8016d58 <icmp_send_response+0x90>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016cea:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016cee:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8016cf0:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 8016cf4:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	7123      	strb	r3, [r4, #4]
 8016cfa:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8016cfc:	71a3      	strb	r3, [r4, #6]
 8016cfe:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016d00:	686f      	ldr	r7, [r5, #4]
 8016d02:	6873      	ldr	r3, [r6, #4]
 8016d04:	681e      	ldr	r6, [r3, #0]
 8016d06:	6858      	ldr	r0, [r3, #4]
 8016d08:	6899      	ldr	r1, [r3, #8]
 8016d0a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8016d0e:	60be      	str	r6, [r7, #8]
 8016d10:	60f8      	str	r0, [r7, #12]
 8016d12:	6139      	str	r1, [r7, #16]
 8016d14:	f8c7 c014 	str.w	ip, [r7, #20]
 8016d18:	691e      	ldr	r6, [r3, #16]
 8016d1a:	6958      	ldr	r0, [r3, #20]
 8016d1c:	6999      	ldr	r1, [r3, #24]
 8016d1e:	61be      	str	r6, [r7, #24]
 8016d20:	61f8      	str	r0, [r7, #28]
 8016d22:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016d24:	f8de 300c 	ldr.w	r3, [lr, #12]
 8016d28:	a806      	add	r0, sp, #24
 8016d2a:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016d2e:	f000 f8cb 	bl	8016ec8 <ip4_route>
#endif
  if (netif != NULL) {
 8016d32:	b158      	cbz	r0, 8016d4c <icmp_send_response+0x84>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016d34:	2100      	movs	r1, #0
 8016d36:	70a1      	strb	r1, [r4, #2]
 8016d38:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016d3a:	9002      	str	r0, [sp, #8]
 8016d3c:	2301      	movs	r3, #1
 8016d3e:	9301      	str	r3, [sp, #4]
 8016d40:	9100      	str	r1, [sp, #0]
 8016d42:	23ff      	movs	r3, #255	; 0xff
 8016d44:	aa05      	add	r2, sp, #20
 8016d46:	4628      	mov	r0, r5
 8016d48:	f000 fa5c 	bl	8017204 <ip4_output_if>
  }
  pbuf_free(q);
 8016d4c:	4628      	mov	r0, r5
 8016d4e:	f001 fbf7 	bl	8018540 <pbuf_free>
}
 8016d52:	b006      	add	sp, #24
 8016d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016d58:	4b03      	ldr	r3, [pc, #12]	; (8016d68 <icmp_send_response+0xa0>)
 8016d5a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8016d5e:	4903      	ldr	r1, [pc, #12]	; (8016d6c <icmp_send_response+0xa4>)
 8016d60:	4803      	ldr	r0, [pc, #12]	; (8016d70 <icmp_send_response+0xa8>)
 8016d62:	f008 fec4 	bl	801faee <iprintf>
 8016d66:	e7c0      	b.n	8016cea <icmp_send_response+0x22>
 8016d68:	080257a0 	.word	0x080257a0
 8016d6c:	080257d8 	.word	0x080257d8
 8016d70:	080214f0 	.word	0x080214f0

08016d74 <icmp_input>:
{
 8016d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d78:	b084      	sub	sp, #16
 8016d7a:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8016d7c:	4b47      	ldr	r3, [pc, #284]	; (8016e9c <icmp_input+0x128>)
 8016d7e:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8016d80:	7834      	ldrb	r4, [r6, #0]
 8016d82:	f004 040f 	and.w	r4, r4, #15
 8016d86:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8016d88:	2c13      	cmp	r4, #19
 8016d8a:	d915      	bls.n	8016db8 <icmp_input+0x44>
 8016d8c:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 8016d8e:	8943      	ldrh	r3, [r0, #10]
 8016d90:	2b03      	cmp	r3, #3
 8016d92:	d911      	bls.n	8016db8 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8016d94:	6843      	ldr	r3, [r0, #4]
 8016d96:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 8016d98:	2b08      	cmp	r3, #8
 8016d9a:	d15d      	bne.n	8016e58 <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d9c:	4b3f      	ldr	r3, [pc, #252]	; (8016e9c <icmp_input+0x128>)
 8016d9e:	6958      	ldr	r0, [r3, #20]
 8016da0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8016da4:	2be0      	cmp	r3, #224	; 0xe0
 8016da6:	d023      	beq.n	8016df0 <icmp_input+0x7c>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016da8:	4b3c      	ldr	r3, [pc, #240]	; (8016e9c <icmp_input+0x128>)
 8016daa:	6819      	ldr	r1, [r3, #0]
 8016dac:	f000 fa3f 	bl	801722e <ip4_addr_isbroadcast_u32>
 8016db0:	b9f0      	cbnz	r0, 8016df0 <icmp_input+0x7c>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016db2:	892b      	ldrh	r3, [r5, #8]
 8016db4:	2b07      	cmp	r3, #7
 8016db6:	d805      	bhi.n	8016dc4 <icmp_input+0x50>
  pbuf_free(p);
 8016db8:	4628      	mov	r0, r5
 8016dba:	f001 fbc1 	bl	8018540 <pbuf_free>
}
 8016dbe:	b004      	add	sp, #16
 8016dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016dc4:	f104 010e 	add.w	r1, r4, #14
 8016dc8:	4628      	mov	r0, r5
 8016dca:	f001 fbaf 	bl	801852c <pbuf_header>
 8016dce:	b3a8      	cbz	r0, 8016e3c <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8016dd0:	8929      	ldrh	r1, [r5, #8]
 8016dd2:	4421      	add	r1, r4
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	b289      	uxth	r1, r1
 8016dd8:	2002      	movs	r0, #2
 8016dda:	f001 fc1d 	bl	8018618 <pbuf_alloc>
      if (r == NULL) {
 8016dde:	4680      	mov	r8, r0
 8016de0:	b130      	cbz	r0, 8016df0 <icmp_input+0x7c>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016de2:	8942      	ldrh	r2, [r0, #10]
 8016de4:	f104 0308 	add.w	r3, r4, #8
 8016de8:	429a      	cmp	r2, r3
 8016dea:	d205      	bcs.n	8016df8 <icmp_input+0x84>
        pbuf_free(r);
 8016dec:	f001 fba8 	bl	8018540 <pbuf_free>
  pbuf_free(p);
 8016df0:	4628      	mov	r0, r5
 8016df2:	f001 fba5 	bl	8018540 <pbuf_free>
  return;
 8016df6:	e7e2      	b.n	8016dbe <icmp_input+0x4a>
      MEMCPY(r->payload, iphdr_in, hlen);
 8016df8:	4622      	mov	r2, r4
 8016dfa:	4631      	mov	r1, r6
 8016dfc:	6840      	ldr	r0, [r0, #4]
 8016dfe:	f009 fd7a 	bl	80208f6 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8016e02:	4261      	negs	r1, r4
 8016e04:	4640      	mov	r0, r8
 8016e06:	f001 fb91 	bl	801852c <pbuf_header>
 8016e0a:	b148      	cbz	r0, 8016e20 <icmp_input+0xac>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016e0c:	4b24      	ldr	r3, [pc, #144]	; (8016ea0 <icmp_input+0x12c>)
 8016e0e:	22af      	movs	r2, #175	; 0xaf
 8016e10:	4924      	ldr	r1, [pc, #144]	; (8016ea4 <icmp_input+0x130>)
 8016e12:	4825      	ldr	r0, [pc, #148]	; (8016ea8 <icmp_input+0x134>)
 8016e14:	f008 fe6b 	bl	801faee <iprintf>
        pbuf_free(r);
 8016e18:	4640      	mov	r0, r8
 8016e1a:	f001 fb91 	bl	8018540 <pbuf_free>
        goto icmperr;
 8016e1e:	e7e7      	b.n	8016df0 <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
 8016e20:	4629      	mov	r1, r5
 8016e22:	4640      	mov	r0, r8
 8016e24:	f001 fdb2 	bl	801898c <pbuf_copy>
 8016e28:	b118      	cbz	r0, 8016e32 <icmp_input+0xbe>
        pbuf_free(r);
 8016e2a:	4640      	mov	r0, r8
 8016e2c:	f001 fb88 	bl	8018540 <pbuf_free>
        goto icmperr;
 8016e30:	e7de      	b.n	8016df0 <icmp_input+0x7c>
      pbuf_free(p);
 8016e32:	4628      	mov	r0, r5
 8016e34:	f001 fb84 	bl	8018540 <pbuf_free>
      p = r;
 8016e38:	4645      	mov	r5, r8
 8016e3a:	e007      	b.n	8016e4c <icmp_input+0xd8>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016e3c:	f5c4 417f 	rsb	r1, r4, #65280	; 0xff00
 8016e40:	31f2      	adds	r1, #242	; 0xf2
 8016e42:	b209      	sxth	r1, r1
 8016e44:	4628      	mov	r0, r5
 8016e46:	f001 fb71 	bl	801852c <pbuf_header>
 8016e4a:	b948      	cbnz	r0, 8016e60 <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 8016e4c:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8016e4e:	4621      	mov	r1, r4
 8016e50:	4628      	mov	r0, r5
 8016e52:	f001 fb6b 	bl	801852c <pbuf_header>
 8016e56:	b150      	cbz	r0, 8016e6e <icmp_input+0xfa>
  pbuf_free(p);
 8016e58:	4628      	mov	r0, r5
 8016e5a:	f001 fb71 	bl	8018540 <pbuf_free>
  return;
 8016e5e:	e7ae      	b.n	8016dbe <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016e60:	4b0f      	ldr	r3, [pc, #60]	; (8016ea0 <icmp_input+0x12c>)
 8016e62:	22c0      	movs	r2, #192	; 0xc0
 8016e64:	4911      	ldr	r1, [pc, #68]	; (8016eac <icmp_input+0x138>)
 8016e66:	4810      	ldr	r0, [pc, #64]	; (8016ea8 <icmp_input+0x134>)
 8016e68:	f008 fe41 	bl	801faee <iprintf>
        goto icmperr;
 8016e6c:	e7c0      	b.n	8016df0 <icmp_input+0x7c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8016e6e:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 8016e70:	490a      	ldr	r1, [pc, #40]	; (8016e9c <icmp_input+0x128>)
 8016e72:	694b      	ldr	r3, [r1, #20]
 8016e74:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016e76:	690b      	ldr	r3, [r1, #16]
 8016e78:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 8016e7e:	70b2      	strb	r2, [r6, #2]
 8016e80:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8016e82:	23ff      	movs	r3, #255	; 0xff
 8016e84:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8016e86:	7282      	strb	r2, [r0, #10]
 8016e88:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016e8a:	9702      	str	r7, [sp, #8]
 8016e8c:	2001      	movs	r0, #1
 8016e8e:	9001      	str	r0, [sp, #4]
 8016e90:	9200      	str	r2, [sp, #0]
 8016e92:	3114      	adds	r1, #20
 8016e94:	4628      	mov	r0, r5
 8016e96:	f000 f9b5 	bl	8017204 <ip4_output_if>
 8016e9a:	e7dd      	b.n	8016e58 <icmp_input+0xe4>
 8016e9c:	20011040 	.word	0x20011040
 8016ea0:	080257a0 	.word	0x080257a0
 8016ea4:	08025734 	.word	0x08025734
 8016ea8:	080214f0 	.word	0x080214f0
 8016eac:	0802576c 	.word	0x0802576c

08016eb0 <icmp_dest_unreach>:
{
 8016eb0:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 8016eb2:	460a      	mov	r2, r1
 8016eb4:	2103      	movs	r1, #3
 8016eb6:	f7ff ff07 	bl	8016cc8 <icmp_send_response>
 8016eba:	bd08      	pop	{r3, pc}

08016ebc <icmp_time_exceeded>:
{
 8016ebc:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 8016ebe:	460a      	mov	r2, r1
 8016ec0:	210b      	movs	r1, #11
 8016ec2:	f7ff ff01 	bl	8016cc8 <icmp_send_response>
 8016ec6:	bd08      	pop	{r3, pc}

08016ec8 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016ec8:	4b25      	ldr	r3, [pc, #148]	; (8016f60 <ip4_route+0x98>)
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	e02b      	b.n	8016f26 <ip4_route+0x5e>
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	b1ab      	cbz	r3, 8016efe <ip4_route+0x36>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016ed2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8016ed6:	f002 0105 	and.w	r1, r2, #5
 8016eda:	2905      	cmp	r1, #5
 8016edc:	d1f7      	bne.n	8016ece <ip4_route+0x6>
 8016ede:	6859      	ldr	r1, [r3, #4]
 8016ee0:	2900      	cmp	r1, #0
 8016ee2:	d0f4      	beq.n	8016ece <ip4_route+0x6>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016ee4:	6804      	ldr	r4, [r0, #0]
 8016ee6:	689d      	ldr	r5, [r3, #8]
 8016ee8:	4061      	eors	r1, r4
 8016eea:	4229      	tst	r1, r5
 8016eec:	d016      	beq.n	8016f1c <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016eee:	f012 0f02 	tst.w	r2, #2
 8016ef2:	d1ec      	bne.n	8016ece <ip4_route+0x6>
 8016ef4:	68da      	ldr	r2, [r3, #12]
 8016ef6:	4294      	cmp	r4, r2
 8016ef8:	d1e9      	bne.n	8016ece <ip4_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
 8016efa:	4618      	mov	r0, r3
 8016efc:	e00a      	b.n	8016f14 <ip4_route+0x4c>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016efe:	4a19      	ldr	r2, [pc, #100]	; (8016f64 <ip4_route+0x9c>)
 8016f00:	6810      	ldr	r0, [r2, #0]
 8016f02:	b138      	cbz	r0, 8016f14 <ip4_route+0x4c>
 8016f04:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8016f08:	f002 0205 	and.w	r2, r2, #5
 8016f0c:	2a05      	cmp	r2, #5
 8016f0e:	d107      	bne.n	8016f20 <ip4_route+0x58>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8016f10:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016f12:	b10a      	cbz	r2, 8016f18 <ip4_route+0x50>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8016f14:	bc30      	pop	{r4, r5}
 8016f16:	4770      	bx	lr
    return NULL;
 8016f18:	4618      	mov	r0, r3
 8016f1a:	e7fb      	b.n	8016f14 <ip4_route+0x4c>
        return netif;
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	e7f9      	b.n	8016f14 <ip4_route+0x4c>
    return NULL;
 8016f20:	4618      	mov	r0, r3
 8016f22:	e7f7      	b.n	8016f14 <ip4_route+0x4c>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	b153      	cbz	r3, 8016f3e <ip4_route+0x76>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016f28:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8016f2c:	f002 0105 	and.w	r1, r2, #5
 8016f30:	2905      	cmp	r1, #5
 8016f32:	d1f7      	bne.n	8016f24 <ip4_route+0x5c>
 8016f34:	6859      	ldr	r1, [r3, #4]
 8016f36:	2900      	cmp	r1, #0
 8016f38:	d0f4      	beq.n	8016f24 <ip4_route+0x5c>
{
 8016f3a:	b430      	push	{r4, r5}
 8016f3c:	e7d2      	b.n	8016ee4 <ip4_route+0x1c>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016f3e:	4a09      	ldr	r2, [pc, #36]	; (8016f64 <ip4_route+0x9c>)
 8016f40:	6810      	ldr	r0, [r2, #0]
 8016f42:	2800      	cmp	r0, #0
 8016f44:	d0e7      	beq.n	8016f16 <ip4_route+0x4e>
 8016f46:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8016f4a:	f002 0205 	and.w	r2, r2, #5
 8016f4e:	2a05      	cmp	r2, #5
 8016f50:	d104      	bne.n	8016f5c <ip4_route+0x94>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8016f52:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016f54:	2a00      	cmp	r2, #0
 8016f56:	d1de      	bne.n	8016f16 <ip4_route+0x4e>
    return NULL;
 8016f58:	4618      	mov	r0, r3
 8016f5a:	4770      	bx	lr
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	4770      	bx	lr
 8016f60:	20015cb4 	.word	0x20015cb4
 8016f64:	20015cb8 	.word	0x20015cb8

08016f68 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f6c:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016f6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8016f72:	f898 3000 	ldrb.w	r3, [r8]
 8016f76:	091a      	lsrs	r2, r3, #4
 8016f78:	2a04      	cmp	r2, #4
 8016f7a:	d004      	beq.n	8016f86 <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016f7c:	f001 fae0 	bl	8018540 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8016f80:	2000      	movs	r0, #0
 8016f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f86:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
 8016f88:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 8016f8c:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016f8e:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8016f92:	f7ff f9f2 	bl	801637a <lwip_htons>
 8016f96:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8016f98:	892b      	ldrh	r3, [r5, #8]
 8016f9a:	4298      	cmp	r0, r3
 8016f9c:	d316      	bcc.n	8016fcc <ip4_input+0x64>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016f9e:	896b      	ldrh	r3, [r5, #10]
 8016fa0:	429e      	cmp	r6, r3
 8016fa2:	d818      	bhi.n	8016fd6 <ip4_input+0x6e>
 8016fa4:	892b      	ldrh	r3, [r5, #8]
 8016fa6:	429c      	cmp	r4, r3
 8016fa8:	d815      	bhi.n	8016fd6 <ip4_input+0x6e>
 8016faa:	2e13      	cmp	r6, #19
 8016fac:	d913      	bls.n	8016fd6 <ip4_input+0x6e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016fae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016fb2:	4a55      	ldr	r2, [pc, #340]	; (8017108 <ip4_input+0x1a0>)
 8016fb4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016fb6:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8016fba:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016fc0:	2be0      	cmp	r3, #224	; 0xe0
 8016fc2:	d00c      	beq.n	8016fde <ip4_input+0x76>
 8016fc4:	463c      	mov	r4, r7
 8016fc6:	f04f 0901 	mov.w	r9, #1
 8016fca:	e015      	b.n	8016ff8 <ip4_input+0x90>
    pbuf_realloc(p, iphdr_len);
 8016fcc:	4601      	mov	r1, r0
 8016fce:	4628      	mov	r0, r5
 8016fd0:	f001 fc0a 	bl	80187e8 <pbuf_realloc>
 8016fd4:	e7e3      	b.n	8016f9e <ip4_input+0x36>
    pbuf_free(p);
 8016fd6:	4628      	mov	r0, r5
 8016fd8:	f001 fab2 	bl	8018540 <pbuf_free>
    return ERR_OK;
 8016fdc:	e7d0      	b.n	8016f80 <ip4_input+0x18>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016fde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016fe2:	f013 0f01 	tst.w	r3, #1
 8016fe6:	d024      	beq.n	8017032 <ip4_input+0xca>
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	bb23      	cbnz	r3, 8017036 <ip4_input+0xce>
      netif = NULL;
 8016fec:	2400      	movs	r4, #0
 8016fee:	e025      	b.n	801703c <ip4_input+0xd4>
        netif = netif->next;
 8016ff0:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 8016ff2:	42bc      	cmp	r4, r7
 8016ff4:	d01b      	beq.n	801702e <ip4_input+0xc6>
    } while (netif != NULL);
 8016ff6:	b30c      	cbz	r4, 801703c <ip4_input+0xd4>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016ff8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8016ffc:	f013 0f01 	tst.w	r3, #1
 8017000:	d009      	beq.n	8017016 <ip4_input+0xae>
 8017002:	6863      	ldr	r3, [r4, #4]
 8017004:	b13b      	cbz	r3, 8017016 <ip4_input+0xae>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017006:	4a40      	ldr	r2, [pc, #256]	; (8017108 <ip4_input+0x1a0>)
 8017008:	6950      	ldr	r0, [r2, #20]
 801700a:	4283      	cmp	r3, r0
 801700c:	d016      	beq.n	801703c <ip4_input+0xd4>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801700e:	4621      	mov	r1, r4
 8017010:	f000 f90d 	bl	801722e <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017014:	b990      	cbnz	r0, 801703c <ip4_input+0xd4>
      if (first) {
 8017016:	f1b9 0f00 	cmp.w	r9, #0
 801701a:	d0e9      	beq.n	8016ff0 <ip4_input+0x88>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801701c:	4b3a      	ldr	r3, [pc, #232]	; (8017108 <ip4_input+0x1a0>)
 801701e:	7d1b      	ldrb	r3, [r3, #20]
 8017020:	2b7f      	cmp	r3, #127	; 0x7f
 8017022:	d00a      	beq.n	801703a <ip4_input+0xd2>
        netif = netif_list;
 8017024:	4b39      	ldr	r3, [pc, #228]	; (801710c <ip4_input+0x1a4>)
 8017026:	681c      	ldr	r4, [r3, #0]
        first = 0;
 8017028:	f04f 0900 	mov.w	r9, #0
 801702c:	e7e1      	b.n	8016ff2 <ip4_input+0x8a>
        netif = netif->next;
 801702e:	6824      	ldr	r4, [r4, #0]
 8017030:	e7e1      	b.n	8016ff6 <ip4_input+0x8e>
      netif = NULL;
 8017032:	2400      	movs	r4, #0
 8017034:	e002      	b.n	801703c <ip4_input+0xd4>
      netif = inp;
 8017036:	463c      	mov	r4, r7
 8017038:	e000      	b.n	801703c <ip4_input+0xd4>
          netif = NULL;
 801703a:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801703c:	4639      	mov	r1, r7
 801703e:	4b32      	ldr	r3, [pc, #200]	; (8017108 <ip4_input+0x1a0>)
 8017040:	6918      	ldr	r0, [r3, #16]
 8017042:	f000 f8f4 	bl	801722e <ip4_addr_isbroadcast_u32>
 8017046:	2800      	cmp	r0, #0
 8017048:	d137      	bne.n	80170ba <ip4_input+0x152>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801704a:	4b2f      	ldr	r3, [pc, #188]	; (8017108 <ip4_input+0x1a0>)
 801704c:	691b      	ldr	r3, [r3, #16]
 801704e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017052:	2be0      	cmp	r3, #224	; 0xe0
 8017054:	d031      	beq.n	80170ba <ip4_input+0x152>
  if (netif == NULL) {
 8017056:	2c00      	cmp	r4, #0
 8017058:	d033      	beq.n	80170c2 <ip4_input+0x15a>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801705a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801705e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8017062:	b29b      	uxth	r3, r3
 8017064:	b13b      	cbz	r3, 8017076 <ip4_input+0x10e>
    p = ip4_reass(p);
 8017066:	4628      	mov	r0, r5
 8017068:	f000 fbec 	bl	8017844 <ip4_reass>
    if (p == NULL) {
 801706c:	4605      	mov	r5, r0
 801706e:	2800      	cmp	r0, #0
 8017070:	d086      	beq.n	8016f80 <ip4_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
 8017072:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 8017076:	4a24      	ldr	r2, [pc, #144]	; (8017108 <ip4_input+0x1a0>)
 8017078:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 801707a:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801707c:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8017080:	f898 3000 	ldrb.w	r3, [r8]
 8017084:	f003 030f 	and.w	r3, r3, #15
 8017088:	009b      	lsls	r3, r3, #2
 801708a:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801708c:	4271      	negs	r1, r6
 801708e:	4628      	mov	r0, r5
 8017090:	f001 fa4c 	bl	801852c <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8017094:	f898 3009 	ldrb.w	r3, [r8, #9]
 8017098:	2b01      	cmp	r3, #1
 801709a:	d016      	beq.n	80170ca <ip4_input+0x162>
 801709c:	2b06      	cmp	r3, #6
 801709e:	d119      	bne.n	80170d4 <ip4_input+0x16c>
      tcp_input(p, inp);
 80170a0:	4639      	mov	r1, r7
 80170a2:	4628      	mov	r0, r5
 80170a4:	f003 fed6 	bl	801ae54 <tcp_input>
  ip_data.current_netif = NULL;
 80170a8:	4b17      	ldr	r3, [pc, #92]	; (8017108 <ip4_input+0x1a0>)
 80170aa:	2200      	movs	r2, #0
 80170ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80170ae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80170b0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80170b2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80170b4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80170b6:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 80170b8:	e762      	b.n	8016f80 <ip4_input+0x18>
      pbuf_free(p);
 80170ba:	4628      	mov	r0, r5
 80170bc:	f001 fa40 	bl	8018540 <pbuf_free>
      return ERR_OK;
 80170c0:	e75e      	b.n	8016f80 <ip4_input+0x18>
    pbuf_free(p);
 80170c2:	4628      	mov	r0, r5
 80170c4:	f001 fa3c 	bl	8018540 <pbuf_free>
    return ERR_OK;
 80170c8:	e75a      	b.n	8016f80 <ip4_input+0x18>
      icmp_input(p, inp);
 80170ca:	4639      	mov	r1, r7
 80170cc:	4628      	mov	r0, r5
 80170ce:	f7ff fe51 	bl	8016d74 <icmp_input>
      break;
 80170d2:	e7e9      	b.n	80170a8 <ip4_input+0x140>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80170d4:	4621      	mov	r1, r4
 80170d6:	4b0c      	ldr	r3, [pc, #48]	; (8017108 <ip4_input+0x1a0>)
 80170d8:	6958      	ldr	r0, [r3, #20]
 80170da:	f000 f8a8 	bl	801722e <ip4_addr_isbroadcast_u32>
 80170de:	b978      	cbnz	r0, 8017100 <ip4_input+0x198>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80170e0:	4b09      	ldr	r3, [pc, #36]	; (8017108 <ip4_input+0x1a0>)
 80170e2:	695b      	ldr	r3, [r3, #20]
 80170e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80170e8:	2be0      	cmp	r3, #224	; 0xe0
 80170ea:	d009      	beq.n	8017100 <ip4_input+0x198>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80170ec:	4631      	mov	r1, r6
 80170ee:	4628      	mov	r0, r5
 80170f0:	f001 fa21 	bl	8018536 <pbuf_header_force>
        p->payload = iphdr;
 80170f4:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80170f8:	2102      	movs	r1, #2
 80170fa:	4628      	mov	r0, r5
 80170fc:	f7ff fed8 	bl	8016eb0 <icmp_dest_unreach>
      pbuf_free(p);
 8017100:	4628      	mov	r0, r5
 8017102:	f001 fa1d 	bl	8018540 <pbuf_free>
 8017106:	e7cf      	b.n	80170a8 <ip4_input+0x140>
 8017108:	20011040 	.word	0x20011040
 801710c:	20015cb4 	.word	0x20015cb4

08017110 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8017110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017114:	b083      	sub	sp, #12
 8017116:	4605      	mov	r5, r0
 8017118:	4689      	mov	r9, r1
 801711a:	4616      	mov	r6, r2
 801711c:	4698      	mov	r8, r3
 801711e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017120:	89c3      	ldrh	r3, [r0, #14]
 8017122:	2b01      	cmp	r3, #1
 8017124:	d006      	beq.n	8017134 <ip4_output_if_src+0x24>
 8017126:	4b31      	ldr	r3, [pc, #196]	; (80171ec <ip4_output_if_src+0xdc>)
 8017128:	f240 3233 	movw	r2, #819	; 0x333
 801712c:	4930      	ldr	r1, [pc, #192]	; (80171f0 <ip4_output_if_src+0xe0>)
 801712e:	4831      	ldr	r0, [pc, #196]	; (80171f4 <ip4_output_if_src+0xe4>)
 8017130:	f008 fcdd 	bl	801faee <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017134:	2e00      	cmp	r6, #0
 8017136:	d04a      	beq.n	80171ce <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8017138:	2114      	movs	r1, #20
 801713a:	4628      	mov	r0, r5
 801713c:	f001 f9f6 	bl	801852c <pbuf_header>
 8017140:	2800      	cmp	r0, #0
 8017142:	d150      	bne.n	80171e6 <ip4_output_if_src+0xd6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017144:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017146:	896b      	ldrh	r3, [r5, #10]
 8017148:	2b13      	cmp	r3, #19
 801714a:	d934      	bls.n	80171b6 <ip4_output_if_src+0xa6>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801714c:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017150:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8017154:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017156:	6833      	ldr	r3, [r6, #0]
 8017158:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801715a:	2345      	movs	r3, #69	; 0x45
 801715c:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 801715e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8017162:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017164:	8928      	ldrh	r0, [r5, #8]
 8017166:	f7ff f908 	bl	801637a <lwip_htons>
 801716a:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801716c:	2300      	movs	r3, #0
 801716e:	71a3      	strb	r3, [r4, #6]
 8017170:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017172:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8017200 <ip4_output_if_src+0xf0>
 8017176:	f8b8 0000 	ldrh.w	r0, [r8]
 801717a:	f7ff f8fe 	bl	801637a <lwip_htons>
 801717e:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017180:	f8b8 3000 	ldrh.w	r3, [r8]
 8017184:	3301      	adds	r3, #1
 8017186:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 801718a:	f1b9 0f00 	cmp.w	r9, #0
 801718e:	d01a      	beq.n	80171c6 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017190:	f8d9 3000 	ldr.w	r3, [r9]
 8017194:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017196:	2300      	movs	r3, #0
 8017198:	72a3      	strb	r3, [r4, #10]
 801719a:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801719c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801719e:	b113      	cbz	r3, 80171a6 <ip4_output_if_src+0x96>
 80171a0:	892a      	ldrh	r2, [r5, #8]
 80171a2:	4293      	cmp	r3, r2
 80171a4:	d319      	bcc.n	80171da <ip4_output_if_src+0xca>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80171a6:	697b      	ldr	r3, [r7, #20]
 80171a8:	4632      	mov	r2, r6
 80171aa:	4629      	mov	r1, r5
 80171ac:	4638      	mov	r0, r7
 80171ae:	4798      	blx	r3
}
 80171b0:	b003      	add	sp, #12
 80171b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80171b6:	4b0d      	ldr	r3, [pc, #52]	; (80171ec <ip4_output_if_src+0xdc>)
 80171b8:	f240 3261 	movw	r2, #865	; 0x361
 80171bc:	490e      	ldr	r1, [pc, #56]	; (80171f8 <ip4_output_if_src+0xe8>)
 80171be:	480d      	ldr	r0, [pc, #52]	; (80171f4 <ip4_output_if_src+0xe4>)
 80171c0:	f008 fc95 	bl	801faee <iprintf>
 80171c4:	e7c2      	b.n	801714c <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80171c6:	4b0d      	ldr	r3, [pc, #52]	; (80171fc <ip4_output_if_src+0xec>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	60e3      	str	r3, [r4, #12]
 80171cc:	e7e3      	b.n	8017196 <ip4_output_if_src+0x86>
    iphdr = (struct ip_hdr *)p->payload;
 80171ce:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80171d0:	691b      	ldr	r3, [r3, #16]
 80171d2:	ae02      	add	r6, sp, #8
 80171d4:	f846 3d04 	str.w	r3, [r6, #-4]!
 80171d8:	e7e0      	b.n	801719c <ip4_output_if_src+0x8c>
    return ip4_frag(p, netif, dest);
 80171da:	4632      	mov	r2, r6
 80171dc:	4639      	mov	r1, r7
 80171de:	4628      	mov	r0, r5
 80171e0:	f000 fc04 	bl	80179ec <ip4_frag>
 80171e4:	e7e4      	b.n	80171b0 <ip4_output_if_src+0xa0>
      return ERR_BUF;
 80171e6:	f06f 0001 	mvn.w	r0, #1
 80171ea:	e7e1      	b.n	80171b0 <ip4_output_if_src+0xa0>
 80171ec:	08025804 	.word	0x08025804
 80171f0:	08025838 	.word	0x08025838
 80171f4:	080214f0 	.word	0x080214f0
 80171f8:	08025844 	.word	0x08025844
 80171fc:	080258bc 	.word	0x080258bc
 8017200:	20010262 	.word	0x20010262

08017204 <ip4_output_if>:
{
 8017204:	b530      	push	{r4, r5, lr}
 8017206:	b085      	sub	sp, #20
 8017208:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 801720a:	4615      	mov	r5, r2
 801720c:	b11a      	cbz	r2, 8017216 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 801720e:	b109      	cbz	r1, 8017214 <ip4_output_if+0x10>
 8017210:	680a      	ldr	r2, [r1, #0]
 8017212:	b902      	cbnz	r2, 8017216 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 8017214:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017216:	9402      	str	r4, [sp, #8]
 8017218:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 801721c:	9201      	str	r2, [sp, #4]
 801721e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8017222:	9200      	str	r2, [sp, #0]
 8017224:	462a      	mov	r2, r5
 8017226:	f7ff ff73 	bl	8017110 <ip4_output_if_src>
}
 801722a:	b005      	add	sp, #20
 801722c:	bd30      	pop	{r4, r5, pc}

0801722e <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801722e:	1e43      	subs	r3, r0, #1
 8017230:	f113 0f03 	cmn.w	r3, #3
 8017234:	d811      	bhi.n	801725a <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017236:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 801723a:	f013 0f02 	tst.w	r3, #2
 801723e:	d00e      	beq.n	801725e <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017240:	684b      	ldr	r3, [r1, #4]
 8017242:	4298      	cmp	r0, r3
 8017244:	d00d      	beq.n	8017262 <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017246:	688a      	ldr	r2, [r1, #8]
 8017248:	4043      	eors	r3, r0
 801724a:	4213      	tst	r3, r2
 801724c:	d10b      	bne.n	8017266 <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801724e:	43d2      	mvns	r2, r2
 8017250:	ea32 0300 	bics.w	r3, r2, r0
 8017254:	d009      	beq.n	801726a <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8017256:	2000      	movs	r0, #0
 8017258:	4770      	bx	lr
    return 1;
 801725a:	2001      	movs	r0, #1
 801725c:	4770      	bx	lr
    return 0;
 801725e:	2000      	movs	r0, #0
 8017260:	4770      	bx	lr
    return 0;
 8017262:	2000      	movs	r0, #0
 8017264:	4770      	bx	lr
    return 0;
 8017266:	2000      	movs	r0, #0
 8017268:	4770      	bx	lr
    return 1;
 801726a:	2001      	movs	r0, #1
  }
}
 801726c:	4770      	bx	lr
	...

08017270 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8017270:	b570      	push	{r4, r5, r6, lr}
 8017272:	b084      	sub	sp, #16
 8017274:	460c      	mov	r4, r1
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 8017276:	7803      	ldrb	r3, [r0, #0]
  u32_t *pp = parts;
 8017278:	466e      	mov	r6, sp
 801727a:	e03b      	b.n	80172f4 <ip4addr_aton+0x84>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
      c = *++cp;
 801727c:	1c42      	adds	r2, r0, #1
 801727e:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8017280:	2b78      	cmp	r3, #120	; 0x78
 8017282:	d004      	beq.n	801728e <ip4addr_aton+0x1e>
 8017284:	2b58      	cmp	r3, #88	; 0x58
 8017286:	d002      	beq.n	801728e <ip4addr_aton+0x1e>
      c = *++cp;
 8017288:	4610      	mov	r0, r2
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 801728a:	2108      	movs	r1, #8
 801728c:	e03a      	b.n	8017304 <ip4addr_aton+0x94>
        c = *++cp;
 801728e:	7883      	ldrb	r3, [r0, #2]
 8017290:	3002      	adds	r0, #2
        base = 16;
 8017292:	2110      	movs	r1, #16
        c = *++cp;
 8017294:	e036      	b.n	8017304 <ip4addr_aton+0x94>
    }
    for (;;) {
      if (isdigit(c)) {
        val = (val * base) + (u32_t)(c - '0');
        c = *++cp;
      } else if (base == 16 && isxdigit(c)) {
 8017296:	2910      	cmp	r1, #16
 8017298:	d123      	bne.n	80172e2 <ip4addr_aton+0x72>
 801729a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801729e:	b2d2      	uxtb	r2, r2
 80172a0:	2a05      	cmp	r2, #5
 80172a2:	d904      	bls.n	80172ae <ip4addr_aton+0x3e>
 80172a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80172a8:	b2d2      	uxtb	r2, r2
 80172aa:	2a05      	cmp	r2, #5
 80172ac:	d819      	bhi.n	80172e2 <ip4addr_aton+0x72>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 80172ae:	012d      	lsls	r5, r5, #4
 80172b0:	f103 020a 	add.w	r2, r3, #10
 80172b4:	3b61      	subs	r3, #97	; 0x61
 80172b6:	b2db      	uxtb	r3, r3
 80172b8:	2b19      	cmp	r3, #25
 80172ba:	d810      	bhi.n	80172de <ip4addr_aton+0x6e>
 80172bc:	2361      	movs	r3, #97	; 0x61
 80172be:	1ad2      	subs	r2, r2, r3
 80172c0:	4315      	orrs	r5, r2
        c = *++cp;
 80172c2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
      if (isdigit(c)) {
 80172c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80172ca:	b2d2      	uxtb	r2, r2
 80172cc:	2a09      	cmp	r2, #9
 80172ce:	d8e2      	bhi.n	8017296 <ip4addr_aton+0x26>
        val = (val * base) + (u32_t)(c - '0');
 80172d0:	fb05 3201 	mla	r2, r5, r1, r3
 80172d4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
        c = *++cp;
 80172d8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80172dc:	e7f3      	b.n	80172c6 <ip4addr_aton+0x56>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 80172de:	2341      	movs	r3, #65	; 0x41
 80172e0:	e7ed      	b.n	80172be <ip4addr_aton+0x4e>
      } else {
        break;
      }
    }
    if (c == '.') {
 80172e2:	2b2e      	cmp	r3, #46	; 0x2e
 80172e4:	d110      	bne.n	8017308 <ip4addr_aton+0x98>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80172e6:	ab03      	add	r3, sp, #12
 80172e8:	429e      	cmp	r6, r3
 80172ea:	d260      	bcs.n	80173ae <ip4addr_aton+0x13e>
        return 0;
      }
      *pp++ = val;
 80172ec:	6035      	str	r5, [r6, #0]
      c = *++cp;
 80172ee:	7843      	ldrb	r3, [r0, #1]
      *pp++ = val;
 80172f0:	3604      	adds	r6, #4
      c = *++cp;
 80172f2:	3001      	adds	r0, #1
    if (!isdigit(c)) {
 80172f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80172f8:	b2d2      	uxtb	r2, r2
 80172fa:	2a09      	cmp	r2, #9
 80172fc:	d855      	bhi.n	80173aa <ip4addr_aton+0x13a>
    if (c == '0') {
 80172fe:	2b30      	cmp	r3, #48	; 0x30
 8017300:	d0bc      	beq.n	801727c <ip4addr_aton+0xc>
    base = 10;
 8017302:	210a      	movs	r1, #10
        base = 16;
 8017304:	2500      	movs	r5, #0
 8017306:	e7de      	b.n	80172c6 <ip4addr_aton+0x56>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8017308:	b16b      	cbz	r3, 8017326 <ip4addr_aton+0xb6>
 801730a:	2b20      	cmp	r3, #32
 801730c:	d00b      	beq.n	8017326 <ip4addr_aton+0xb6>
 801730e:	2b0c      	cmp	r3, #12
 8017310:	d009      	beq.n	8017326 <ip4addr_aton+0xb6>
 8017312:	2b0a      	cmp	r3, #10
 8017314:	d007      	beq.n	8017326 <ip4addr_aton+0xb6>
 8017316:	2b0d      	cmp	r3, #13
 8017318:	d005      	beq.n	8017326 <ip4addr_aton+0xb6>
 801731a:	2b09      	cmp	r3, #9
 801731c:	d003      	beq.n	8017326 <ip4addr_aton+0xb6>
 801731e:	2b0b      	cmp	r3, #11
 8017320:	d001      	beq.n	8017326 <ip4addr_aton+0xb6>
    return 0;
 8017322:	2000      	movs	r0, #0
 8017324:	e044      	b.n	80173b0 <ip4addr_aton+0x140>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8017326:	4668      	mov	r0, sp
 8017328:	1a30      	subs	r0, r6, r0
 801732a:	1080      	asrs	r0, r0, #2
 801732c:	3001      	adds	r0, #1
 801732e:	2804      	cmp	r0, #4
 8017330:	d82d      	bhi.n	801738e <ip4addr_aton+0x11e>
 8017332:	e8df f000 	tbb	[pc, r0]
 8017336:	333d      	.short	0x333d
 8017338:	0c03      	.short	0x0c03
 801733a:	1a          	.byte	0x1a
 801733b:	00          	.byte	0x00

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 801733c:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 8017340:	d238      	bcs.n	80173b4 <ip4addr_aton+0x144>
      return 0;
    }
    if (parts[0] > 0xff) {
 8017342:	9b00      	ldr	r3, [sp, #0]
 8017344:	2bff      	cmp	r3, #255	; 0xff
 8017346:	d837      	bhi.n	80173b8 <ip4addr_aton+0x148>
      return 0;
    }
    val |= parts[0] << 24;
 8017348:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    break;
 801734c:	e026      	b.n	801739c <ip4addr_aton+0x12c>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 801734e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8017352:	d233      	bcs.n	80173bc <ip4addr_aton+0x14c>
      return 0;
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8017354:	9a00      	ldr	r2, [sp, #0]
 8017356:	2aff      	cmp	r2, #255	; 0xff
 8017358:	d832      	bhi.n	80173c0 <ip4addr_aton+0x150>
 801735a:	9b01      	ldr	r3, [sp, #4]
 801735c:	2bff      	cmp	r3, #255	; 0xff
 801735e:	d831      	bhi.n	80173c4 <ip4addr_aton+0x154>
      return 0;
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 8017360:	041b      	lsls	r3, r3, #16
 8017362:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017366:	431d      	orrs	r5, r3
    break;
 8017368:	e018      	b.n	801739c <ip4addr_aton+0x12c>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 801736a:	2dff      	cmp	r5, #255	; 0xff
 801736c:	d82c      	bhi.n	80173c8 <ip4addr_aton+0x158>
      return 0;
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801736e:	9900      	ldr	r1, [sp, #0]
 8017370:	29ff      	cmp	r1, #255	; 0xff
 8017372:	d82b      	bhi.n	80173cc <ip4addr_aton+0x15c>
 8017374:	9b01      	ldr	r3, [sp, #4]
 8017376:	2bff      	cmp	r3, #255	; 0xff
 8017378:	d82a      	bhi.n	80173d0 <ip4addr_aton+0x160>
 801737a:	9a02      	ldr	r2, [sp, #8]
 801737c:	2aff      	cmp	r2, #255	; 0xff
 801737e:	d829      	bhi.n	80173d4 <ip4addr_aton+0x164>
      return 0;
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8017380:	041b      	lsls	r3, r3, #16
 8017382:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8017386:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801738a:	431d      	orrs	r5, r3
    break;
 801738c:	e006      	b.n	801739c <ip4addr_aton+0x12c>
  default:
    LWIP_ASSERT("unhandled", 0);
 801738e:	4b13      	ldr	r3, [pc, #76]	; (80173dc <ip4addr_aton+0x16c>)
 8017390:	f240 1203 	movw	r2, #259	; 0x103
 8017394:	4912      	ldr	r1, [pc, #72]	; (80173e0 <ip4addr_aton+0x170>)
 8017396:	4813      	ldr	r0, [pc, #76]	; (80173e4 <ip4addr_aton+0x174>)
 8017398:	f008 fba9 	bl	801faee <iprintf>
    break;
  }
  if (addr) {
 801739c:	b1e4      	cbz	r4, 80173d8 <ip4addr_aton+0x168>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801739e:	4628      	mov	r0, r5
 80173a0:	f7fe ffee 	bl	8016380 <lwip_htonl>
 80173a4:	6020      	str	r0, [r4, #0]
  }
  return 1;
 80173a6:	2001      	movs	r0, #1
 80173a8:	e002      	b.n	80173b0 <ip4addr_aton+0x140>
      return 0;
 80173aa:	2000      	movs	r0, #0
 80173ac:	e000      	b.n	80173b0 <ip4addr_aton+0x140>
        return 0;
 80173ae:	2000      	movs	r0, #0
}
 80173b0:	b004      	add	sp, #16
 80173b2:	bd70      	pop	{r4, r5, r6, pc}
      return 0;
 80173b4:	2000      	movs	r0, #0
 80173b6:	e7fb      	b.n	80173b0 <ip4addr_aton+0x140>
      return 0;
 80173b8:	2000      	movs	r0, #0
 80173ba:	e7f9      	b.n	80173b0 <ip4addr_aton+0x140>
      return 0;
 80173bc:	2000      	movs	r0, #0
 80173be:	e7f7      	b.n	80173b0 <ip4addr_aton+0x140>
      return 0;
 80173c0:	2000      	movs	r0, #0
 80173c2:	e7f5      	b.n	80173b0 <ip4addr_aton+0x140>
 80173c4:	2000      	movs	r0, #0
 80173c6:	e7f3      	b.n	80173b0 <ip4addr_aton+0x140>
      return 0;
 80173c8:	2000      	movs	r0, #0
 80173ca:	e7f1      	b.n	80173b0 <ip4addr_aton+0x140>
      return 0;
 80173cc:	2000      	movs	r0, #0
 80173ce:	e7ef      	b.n	80173b0 <ip4addr_aton+0x140>
 80173d0:	2000      	movs	r0, #0
 80173d2:	e7ed      	b.n	80173b0 <ip4addr_aton+0x140>
 80173d4:	2000      	movs	r0, #0
 80173d6:	e7eb      	b.n	80173b0 <ip4addr_aton+0x140>
  return 1;
 80173d8:	2001      	movs	r0, #1
 80173da:	e7e9      	b.n	80173b0 <ip4addr_aton+0x140>
 80173dc:	08025874 	.word	0x08025874
 80173e0:	080258b0 	.word	0x080258b0
 80173e4:	080214f0 	.word	0x080214f0

080173e8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80173e8:	b538      	push	{r3, r4, r5, lr}
 80173ea:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80173ec:	4b0c      	ldr	r3, [pc, #48]	; (8017420 <ip_reass_dequeue_datagram+0x38>)
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	4283      	cmp	r3, r0
 80173f2:	d008      	beq.n	8017406 <ip_reass_dequeue_datagram+0x1e>
 80173f4:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80173f6:	b151      	cbz	r1, 801740e <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 80173f8:	6823      	ldr	r3, [r4, #0]
 80173fa:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80173fc:	4621      	mov	r1, r4
 80173fe:	2003      	movs	r0, #3
 8017400:	f000 feb2 	bl	8018168 <memp_free>
 8017404:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 8017406:	6802      	ldr	r2, [r0, #0]
 8017408:	4b05      	ldr	r3, [pc, #20]	; (8017420 <ip_reass_dequeue_datagram+0x38>)
 801740a:	601a      	str	r2, [r3, #0]
 801740c:	e7f6      	b.n	80173fc <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801740e:	4b05      	ldr	r3, [pc, #20]	; (8017424 <ip_reass_dequeue_datagram+0x3c>)
 8017410:	f240 1245 	movw	r2, #325	; 0x145
 8017414:	4904      	ldr	r1, [pc, #16]	; (8017428 <ip_reass_dequeue_datagram+0x40>)
 8017416:	4805      	ldr	r0, [pc, #20]	; (801742c <ip_reass_dequeue_datagram+0x44>)
 8017418:	f008 fb69 	bl	801faee <iprintf>
 801741c:	e7ec      	b.n	80173f8 <ip_reass_dequeue_datagram+0x10>
 801741e:	bf00      	nop
 8017420:	20010268 	.word	0x20010268
 8017424:	080259b0 	.word	0x080259b0
 8017428:	080259ec 	.word	0x080259ec
 801742c:	080214f0 	.word	0x080214f0

08017430 <ip_reass_free_complete_datagram>:
{
 8017430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017434:	4680      	mov	r8, r0
 8017436:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017438:	4281      	cmp	r1, r0
 801743a:	d015      	beq.n	8017468 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 801743c:	f1b9 0f00 	cmp.w	r9, #0
 8017440:	d009      	beq.n	8017456 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017442:	f8d9 3000 	ldr.w	r3, [r9]
 8017446:	4598      	cmp	r8, r3
 8017448:	d005      	beq.n	8017456 <ip_reass_free_complete_datagram+0x26>
 801744a:	4b35      	ldr	r3, [pc, #212]	; (8017520 <ip_reass_free_complete_datagram+0xf0>)
 801744c:	22ad      	movs	r2, #173	; 0xad
 801744e:	4935      	ldr	r1, [pc, #212]	; (8017524 <ip_reass_free_complete_datagram+0xf4>)
 8017450:	4835      	ldr	r0, [pc, #212]	; (8017528 <ip_reass_free_complete_datagram+0xf8>)
 8017452:	f008 fb4c 	bl	801faee <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017456:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801745a:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 801745c:	889a      	ldrh	r2, [r3, #4]
 801745e:	b152      	cbz	r2, 8017476 <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 8017460:	2600      	movs	r6, #0
  p = ipr->p;
 8017462:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 8017466:	e032      	b.n	80174ce <ip_reass_free_complete_datagram+0x9e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017468:	4b2d      	ldr	r3, [pc, #180]	; (8017520 <ip_reass_free_complete_datagram+0xf0>)
 801746a:	22ab      	movs	r2, #171	; 0xab
 801746c:	492f      	ldr	r1, [pc, #188]	; (801752c <ip_reass_free_complete_datagram+0xfc>)
 801746e:	482e      	ldr	r0, [pc, #184]	; (8017528 <ip_reass_free_complete_datagram+0xf8>)
 8017470:	f008 fb3d 	bl	801faee <iprintf>
 8017474:	e7e2      	b.n	801743c <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801747c:	4643      	mov	r3, r8
 801747e:	6862      	ldr	r2, [r4, #4]
 8017480:	f853 1f08 	ldr.w	r1, [r3, #8]!
 8017484:	685e      	ldr	r6, [r3, #4]
 8017486:	689d      	ldr	r5, [r3, #8]
 8017488:	68d8      	ldr	r0, [r3, #12]
 801748a:	6011      	str	r1, [r2, #0]
 801748c:	6056      	str	r6, [r2, #4]
 801748e:	6095      	str	r5, [r2, #8]
 8017490:	60d0      	str	r0, [r2, #12]
 8017492:	6919      	ldr	r1, [r3, #16]
 8017494:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017496:	2101      	movs	r1, #1
 8017498:	4620      	mov	r0, r4
 801749a:	f7ff fd0f 	bl	8016ebc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801749e:	4620      	mov	r0, r4
 80174a0:	f001 fa14 	bl	80188cc <pbuf_clen>
 80174a4:	4606      	mov	r6, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80174a6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80174aa:	da03      	bge.n	80174b4 <ip_reass_free_complete_datagram+0x84>
    pbuf_free(p);
 80174ac:	4620      	mov	r0, r4
 80174ae:	f001 f847 	bl	8018540 <pbuf_free>
 80174b2:	e7d6      	b.n	8017462 <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80174b4:	4b1a      	ldr	r3, [pc, #104]	; (8017520 <ip_reass_free_complete_datagram+0xf0>)
 80174b6:	22bc      	movs	r2, #188	; 0xbc
 80174b8:	491d      	ldr	r1, [pc, #116]	; (8017530 <ip_reass_free_complete_datagram+0x100>)
 80174ba:	481b      	ldr	r0, [pc, #108]	; (8017528 <ip_reass_free_complete_datagram+0xf8>)
 80174bc:	f008 fb17 	bl	801faee <iprintf>
 80174c0:	e7f4      	b.n	80174ac <ip_reass_free_complete_datagram+0x7c>
    pbufs_freed += clen;
 80174c2:	4435      	add	r5, r6
 80174c4:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 80174c6:	4620      	mov	r0, r4
 80174c8:	f001 f83a 	bl	8018540 <pbuf_free>
    p = iprh->next_pbuf;
 80174cc:	463c      	mov	r4, r7
  while (p != NULL) {
 80174ce:	b184      	cbz	r4, 80174f2 <ip_reass_free_complete_datagram+0xc2>
    iprh = (struct ip_reass_helper *)p->payload;
 80174d0:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 80174d2:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 80174d4:	4620      	mov	r0, r4
 80174d6:	f001 f9f9 	bl	80188cc <pbuf_clen>
 80174da:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80174dc:	1833      	adds	r3, r6, r0
 80174de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80174e2:	dbee      	blt.n	80174c2 <ip_reass_free_complete_datagram+0x92>
 80174e4:	4b0e      	ldr	r3, [pc, #56]	; (8017520 <ip_reass_free_complete_datagram+0xf0>)
 80174e6:	22cc      	movs	r2, #204	; 0xcc
 80174e8:	4911      	ldr	r1, [pc, #68]	; (8017530 <ip_reass_free_complete_datagram+0x100>)
 80174ea:	480f      	ldr	r0, [pc, #60]	; (8017528 <ip_reass_free_complete_datagram+0xf8>)
 80174ec:	f008 faff 	bl	801faee <iprintf>
 80174f0:	e7e7      	b.n	80174c2 <ip_reass_free_complete_datagram+0x92>
  ip_reass_dequeue_datagram(ipr, prev);
 80174f2:	4649      	mov	r1, r9
 80174f4:	4640      	mov	r0, r8
 80174f6:	f7ff ff77 	bl	80173e8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80174fa:	4b0e      	ldr	r3, [pc, #56]	; (8017534 <ip_reass_free_complete_datagram+0x104>)
 80174fc:	881b      	ldrh	r3, [r3, #0]
 80174fe:	429e      	cmp	r6, r3
 8017500:	d806      	bhi.n	8017510 <ip_reass_free_complete_datagram+0xe0>
  ip_reass_pbufcount -= pbufs_freed;
 8017502:	4a0c      	ldr	r2, [pc, #48]	; (8017534 <ip_reass_free_complete_datagram+0x104>)
 8017504:	8813      	ldrh	r3, [r2, #0]
 8017506:	1b9b      	subs	r3, r3, r6
 8017508:	8013      	strh	r3, [r2, #0]
}
 801750a:	4630      	mov	r0, r6
 801750c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8017510:	4b03      	ldr	r3, [pc, #12]	; (8017520 <ip_reass_free_complete_datagram+0xf0>)
 8017512:	22d2      	movs	r2, #210	; 0xd2
 8017514:	4908      	ldr	r1, [pc, #32]	; (8017538 <ip_reass_free_complete_datagram+0x108>)
 8017516:	4804      	ldr	r0, [pc, #16]	; (8017528 <ip_reass_free_complete_datagram+0xf8>)
 8017518:	f008 fae9 	bl	801faee <iprintf>
 801751c:	e7f1      	b.n	8017502 <ip_reass_free_complete_datagram+0xd2>
 801751e:	bf00      	nop
 8017520:	080259b0 	.word	0x080259b0
 8017524:	08025a14 	.word	0x08025a14
 8017528:	080214f0 	.word	0x080214f0
 801752c:	08025a08 	.word	0x08025a08
 8017530:	08025a28 	.word	0x08025a28
 8017534:	20010264 	.word	0x20010264
 8017538:	08025a48 	.word	0x08025a48

0801753c <ip_reass_remove_oldest_datagram>:
{
 801753c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017540:	4605      	mov	r5, r0
 8017542:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8017544:	2600      	movs	r6, #0
 8017546:	e02a      	b.n	801759e <ip_reass_remove_oldest_datagram+0x62>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017548:	699a      	ldr	r2, [r3, #24]
 801754a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 801754e:	4562      	cmp	r2, ip
 8017550:	d110      	bne.n	8017574 <ip_reass_remove_oldest_datagram+0x38>
 8017552:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8017556:	88aa      	ldrh	r2, [r5, #4]
 8017558:	4594      	cmp	ip, r2
 801755a:	d10b      	bne.n	8017574 <ip_reass_remove_oldest_datagram+0x38>
 801755c:	e001      	b.n	8017562 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 801755e:	4671      	mov	r1, lr
          oldest = r;
 8017560:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8017562:	681a      	ldr	r2, [r3, #0]
 8017564:	b18a      	cbz	r2, 801758a <ip_reass_remove_oldest_datagram+0x4e>
 8017566:	469e      	mov	lr, r3
 8017568:	4613      	mov	r3, r2
    while (r != NULL) {
 801756a:	b183      	cbz	r3, 801758e <ip_reass_remove_oldest_datagram+0x52>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801756c:	68ea      	ldr	r2, [r5, #12]
 801756e:	695f      	ldr	r7, [r3, #20]
 8017570:	4297      	cmp	r7, r2
 8017572:	d0e9      	beq.n	8017548 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 8017574:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8017576:	2800      	cmp	r0, #0
 8017578:	d0f1      	beq.n	801755e <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 801757a:	f893 c01f 	ldrb.w	ip, [r3, #31]
 801757e:	7fc2      	ldrb	r2, [r0, #31]
 8017580:	4594      	cmp	ip, r2
 8017582:	d8ee      	bhi.n	8017562 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 8017584:	4671      	mov	r1, lr
          oldest = r;
 8017586:	4618      	mov	r0, r3
 8017588:	e7eb      	b.n	8017562 <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 801758a:	4673      	mov	r3, lr
 801758c:	e7eb      	b.n	8017566 <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 801758e:	b110      	cbz	r0, 8017596 <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017590:	f7ff ff4e 	bl	8017430 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8017594:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017596:	4546      	cmp	r6, r8
 8017598:	da08      	bge.n	80175ac <ip_reass_remove_oldest_datagram+0x70>
 801759a:	2c01      	cmp	r4, #1
 801759c:	dd06      	ble.n	80175ac <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 801759e:	4b05      	ldr	r3, [pc, #20]	; (80175b4 <ip_reass_remove_oldest_datagram+0x78>)
 80175a0:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 80175a2:	2400      	movs	r4, #0
    oldest_prev = NULL;
 80175a4:	4621      	mov	r1, r4
    prev = NULL;
 80175a6:	46a6      	mov	lr, r4
    oldest = NULL;
 80175a8:	4620      	mov	r0, r4
    while (r != NULL) {
 80175aa:	e7de      	b.n	801756a <ip_reass_remove_oldest_datagram+0x2e>
}
 80175ac:	4630      	mov	r0, r6
 80175ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175b2:	bf00      	nop
 80175b4:	20010268 	.word	0x20010268

080175b8 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80175b8:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80175ba:	4604      	mov	r4, r0
 80175bc:	b120      	cbz	r0, 80175c8 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 80175be:	4621      	mov	r1, r4
 80175c0:	2004      	movs	r0, #4
 80175c2:	f000 fdd1 	bl	8018168 <memp_free>
 80175c6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80175c8:	4b03      	ldr	r3, [pc, #12]	; (80175d8 <ip_frag_free_pbuf_custom_ref+0x20>)
 80175ca:	f240 22ae 	movw	r2, #686	; 0x2ae
 80175ce:	4903      	ldr	r1, [pc, #12]	; (80175dc <ip_frag_free_pbuf_custom_ref+0x24>)
 80175d0:	4803      	ldr	r0, [pc, #12]	; (80175e0 <ip_frag_free_pbuf_custom_ref+0x28>)
 80175d2:	f008 fa8c 	bl	801faee <iprintf>
 80175d6:	e7f2      	b.n	80175be <ip_frag_free_pbuf_custom_ref+0x6>
 80175d8:	080259b0 	.word	0x080259b0
 80175dc:	08021850 	.word	0x08021850
 80175e0:	080214f0 	.word	0x080214f0

080175e4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80175e4:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80175e6:	4604      	mov	r4, r0
 80175e8:	b138      	cbz	r0, 80175fa <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 80175ea:	6960      	ldr	r0, [r4, #20]
 80175ec:	b108      	cbz	r0, 80175f2 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 80175ee:	f000 ffa7 	bl	8018540 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80175f2:	4620      	mov	r0, r4
 80175f4:	f7ff ffe0 	bl	80175b8 <ip_frag_free_pbuf_custom_ref>
 80175f8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80175fa:	4b04      	ldr	r3, [pc, #16]	; (801760c <ipfrag_free_pbuf_custom+0x28>)
 80175fc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8017600:	4903      	ldr	r1, [pc, #12]	; (8017610 <ipfrag_free_pbuf_custom+0x2c>)
 8017602:	4804      	ldr	r0, [pc, #16]	; (8017614 <ipfrag_free_pbuf_custom+0x30>)
 8017604:	f008 fa73 	bl	801faee <iprintf>
 8017608:	e7ef      	b.n	80175ea <ipfrag_free_pbuf_custom+0x6>
 801760a:	bf00      	nop
 801760c:	080259b0 	.word	0x080259b0
 8017610:	08025a64 	.word	0x08025a64
 8017614:	080214f0 	.word	0x080214f0

08017618 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 8017618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801761c:	4680      	mov	r8, r0
 801761e:	460f      	mov	r7, r1
 8017620:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 8017622:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8017624:	8860      	ldrh	r0, [r4, #2]
 8017626:	f7fe fea8 	bl	801637a <lwip_htons>
 801762a:	7826      	ldrb	r6, [r4, #0]
 801762c:	f006 060f 	and.w	r6, r6, #15
 8017630:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 8017634:	b2b6      	uxth	r6, r6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8017636:	88e0      	ldrh	r0, [r4, #6]
 8017638:	f7fe fe9f 	bl	801637a <lwip_htons>
 801763c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017640:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8017642:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 8017644:	2400      	movs	r4, #0
 8017646:	702c      	strb	r4, [r5, #0]
 8017648:	706c      	strb	r4, [r5, #1]
 801764a:	70ac      	strb	r4, [r5, #2]
 801764c:	70ec      	strb	r4, [r5, #3]
  iprh->start = offset;
 801764e:	80a8      	strh	r0, [r5, #4]
  iprh->end = offset + len;
 8017650:	eb06 0e00 	add.w	lr, r6, r0
 8017654:	fa1f fe8e 	uxth.w	lr, lr
 8017658:	f8a5 e006 	strh.w	lr, [r5, #6]
  for (q = ipr->p; q != NULL;) {
 801765c:	f8d8 1004 	ldr.w	r1, [r8, #4]
  int valid = 1;
 8017660:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 8017662:	e033      	b.n	80176cc <ip_reass_chain_frag_into_datagram_and_validate+0xb4>
      iprh->next_pbuf = q;
 8017664:	6029      	str	r1, [r5, #0]
      if (iprh_prev != NULL) {
 8017666:	b34c      	cbz	r4, 80176bc <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017668:	88e2      	ldrh	r2, [r4, #6]
 801766a:	4290      	cmp	r0, r2
 801766c:	d37e      	bcc.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
 801766e:	889b      	ldrh	r3, [r3, #4]
 8017670:	459e      	cmp	lr, r3
 8017672:	d87b      	bhi.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        iprh_prev->next_pbuf = new_p;
 8017674:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 8017676:	88ab      	ldrh	r3, [r5, #4]
 8017678:	429a      	cmp	r2, r3
 801767a:	d000      	beq.n	801767e <ip_reass_chain_frag_into_datagram_and_validate+0x66>
          valid = 0;
 801767c:	2600      	movs	r6, #0
  if (q == NULL) {
 801767e:	2900      	cmp	r1, #0
 8017680:	d036      	beq.n	80176f0 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017682:	f1b9 0f00 	cmp.w	r9, #0
 8017686:	d104      	bne.n	8017692 <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
 8017688:	f898 301e 	ldrb.w	r3, [r8, #30]
 801768c:	f013 0f01 	tst.w	r3, #1
 8017690:	d07a      	beq.n	8017788 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
    if (valid) {
 8017692:	2e00      	cmp	r6, #0
 8017694:	d067      	beq.n	8017766 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8017696:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d060      	beq.n	8017760 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 801769e:	6858      	ldr	r0, [r3, #4]
 80176a0:	8883      	ldrh	r3, [r0, #4]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d15e      	bne.n	8017764 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        q = iprh->next_pbuf;
 80176a6:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 80176a8:	2a00      	cmp	r2, #0
 80176aa:	d044      	beq.n	8017736 <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
          iprh = (struct ip_reass_helper*)q->payload;
 80176ac:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 80176ae:	88e9      	ldrh	r1, [r5, #6]
 80176b0:	889a      	ldrh	r2, [r3, #4]
 80176b2:	4291      	cmp	r1, r2
 80176b4:	d13d      	bne.n	8017732 <ip_reass_chain_frag_into_datagram_and_validate+0x11a>
          q = iprh->next_pbuf;
 80176b6:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 80176b8:	461d      	mov	r5, r3
 80176ba:	e7f5      	b.n	80176a8 <ip_reass_chain_frag_into_datagram_and_validate+0x90>
        if (iprh->end > iprh_tmp->start) {
 80176bc:	889b      	ldrh	r3, [r3, #4]
 80176be:	459e      	cmp	lr, r3
 80176c0:	d854      	bhi.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        ipr->p = new_p;
 80176c2:	f8c8 7004 	str.w	r7, [r8, #4]
 80176c6:	e7da      	b.n	801767e <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    q = iprh_tmp->next_pbuf;
 80176c8:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 80176ca:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 80176cc:	2900      	cmp	r1, #0
 80176ce:	d0d6      	beq.n	801767e <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80176d0:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80176d2:	889a      	ldrh	r2, [r3, #4]
 80176d4:	4290      	cmp	r0, r2
 80176d6:	d3c5      	bcc.n	8017664 <ip_reass_chain_frag_into_datagram_and_validate+0x4c>
    } else if (iprh->start == iprh_tmp->start) {
 80176d8:	4290      	cmp	r0, r2
 80176da:	d047      	beq.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start < iprh_tmp->end) {
 80176dc:	88d9      	ldrh	r1, [r3, #6]
 80176de:	4288      	cmp	r0, r1
 80176e0:	d344      	bcc.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      if (iprh_prev != NULL) {
 80176e2:	2c00      	cmp	r4, #0
 80176e4:	d0f0      	beq.n	80176c8 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
        if (iprh_prev->end != iprh_tmp->start) {
 80176e6:	88e1      	ldrh	r1, [r4, #6]
 80176e8:	428a      	cmp	r2, r1
 80176ea:	d0ed      	beq.n	80176c8 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
          valid = 0;
 80176ec:	2600      	movs	r6, #0
 80176ee:	e7eb      	b.n	80176c8 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
    if (iprh_prev != NULL) {
 80176f0:	b194      	cbz	r4, 8017718 <ip_reass_chain_frag_into_datagram_and_validate+0x100>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80176f2:	88e2      	ldrh	r2, [r4, #6]
 80176f4:	88ab      	ldrh	r3, [r5, #4]
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d806      	bhi.n	8017708 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
      iprh_prev->next_pbuf = new_p;
 80176fa:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 80176fc:	88e2      	ldrh	r2, [r4, #6]
 80176fe:	88ab      	ldrh	r3, [r5, #4]
 8017700:	429a      	cmp	r2, r3
 8017702:	d0be      	beq.n	8017682 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
        valid = 0;
 8017704:	2600      	movs	r6, #0
 8017706:	e7bc      	b.n	8017682 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017708:	4b21      	ldr	r3, [pc, #132]	; (8017790 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 801770a:	f240 12ab 	movw	r2, #427	; 0x1ab
 801770e:	4921      	ldr	r1, [pc, #132]	; (8017794 <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 8017710:	4821      	ldr	r0, [pc, #132]	; (8017798 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8017712:	f008 f9ec 	bl	801faee <iprintf>
 8017716:	e7f0      	b.n	80176fa <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017718:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801771c:	b133      	cbz	r3, 801772c <ip_reass_chain_frag_into_datagram_and_validate+0x114>
 801771e:	4b1c      	ldr	r3, [pc, #112]	; (8017790 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8017720:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8017724:	491d      	ldr	r1, [pc, #116]	; (801779c <ip_reass_chain_frag_into_datagram_and_validate+0x184>)
 8017726:	481c      	ldr	r0, [pc, #112]	; (8017798 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8017728:	f008 f9e1 	bl	801faee <iprintf>
      ipr->p = new_p;
 801772c:	f8c8 7004 	str.w	r7, [r8, #4]
 8017730:	e7a7      	b.n	8017682 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
          iprh = (struct ip_reass_helper*)q->payload;
 8017732:	461d      	mov	r5, r3
            valid = 0;
 8017734:	2600      	movs	r6, #0
        if (valid) {
 8017736:	b1b6      	cbz	r6, 8017766 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8017738:	4285      	cmp	r5, r0
 801773a:	d009      	beq.n	8017750 <ip_reass_chain_frag_into_datagram_and_validate+0x138>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801773c:	682b      	ldr	r3, [r5, #0]
 801773e:	b193      	cbz	r3, 8017766 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 8017740:	4b13      	ldr	r3, [pc, #76]	; (8017790 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8017742:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8017746:	4916      	ldr	r1, [pc, #88]	; (80177a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>)
 8017748:	4813      	ldr	r0, [pc, #76]	; (8017798 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 801774a:	f008 f9d0 	bl	801faee <iprintf>
 801774e:	e00a      	b.n	8017766 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8017750:	4b0f      	ldr	r3, [pc, #60]	; (8017790 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8017752:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017756:	4913      	ldr	r1, [pc, #76]	; (80177a4 <ip_reass_chain_frag_into_datagram_and_validate+0x18c>)
 8017758:	480f      	ldr	r0, [pc, #60]	; (8017798 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 801775a:	f008 f9c8 	bl	801faee <iprintf>
 801775e:	e7ed      	b.n	801773c <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        valid = 0;
 8017760:	2600      	movs	r6, #0
 8017762:	e000      	b.n	8017766 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 8017764:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017766:	4630      	mov	r0, r6
 8017768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801776c:	4638      	mov	r0, r7
 801776e:	f001 f8ad 	bl	80188cc <pbuf_clen>
 8017772:	4a0d      	ldr	r2, [pc, #52]	; (80177a8 <ip_reass_chain_frag_into_datagram_and_validate+0x190>)
 8017774:	8813      	ldrh	r3, [r2, #0]
 8017776:	1a18      	subs	r0, r3, r0
 8017778:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 801777a:	4638      	mov	r0, r7
 801777c:	f000 fee0 	bl	8018540 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017780:	f04f 30ff 	mov.w	r0, #4294967295
 8017784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017788:	4648      	mov	r0, r9
}
 801778a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801778e:	bf00      	nop
 8017790:	080259b0 	.word	0x080259b0
 8017794:	08025924 	.word	0x08025924
 8017798:	080214f0 	.word	0x080214f0
 801779c:	08025944 	.word	0x08025944
 80177a0:	0802598c 	.word	0x0802598c
 80177a4:	0802597c 	.word	0x0802597c
 80177a8:	20010264 	.word	0x20010264

080177ac <ip_frag_alloc_pbuf_custom_ref>:
{
 80177ac:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80177ae:	2004      	movs	r0, #4
 80177b0:	f000 fcc0 	bl	8018134 <memp_malloc>
}
 80177b4:	bd08      	pop	{r3, pc}
	...

080177b8 <ip_reass_enqueue_new_datagram>:
{
 80177b8:	b570      	push	{r4, r5, r6, lr}
 80177ba:	4605      	mov	r5, r0
 80177bc:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80177be:	2003      	movs	r0, #3
 80177c0:	f000 fcb8 	bl	8018134 <memp_malloc>
  if (ipr == NULL) {
 80177c4:	4604      	mov	r4, r0
 80177c6:	b1b0      	cbz	r0, 80177f6 <ip_reass_enqueue_new_datagram+0x3e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80177c8:	2220      	movs	r2, #32
 80177ca:	2100      	movs	r1, #0
 80177cc:	4620      	mov	r0, r4
 80177ce:	f009 f89d 	bl	802090c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80177d2:	2303      	movs	r3, #3
 80177d4:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 80177d6:	4b0f      	ldr	r3, [pc, #60]	; (8017814 <ip_reass_enqueue_new_datagram+0x5c>)
 80177d8:	681a      	ldr	r2, [r3, #0]
 80177da:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 80177dc:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80177de:	682a      	ldr	r2, [r5, #0]
 80177e0:	686e      	ldr	r6, [r5, #4]
 80177e2:	68a8      	ldr	r0, [r5, #8]
 80177e4:	68e9      	ldr	r1, [r5, #12]
 80177e6:	60a2      	str	r2, [r4, #8]
 80177e8:	60e6      	str	r6, [r4, #12]
 80177ea:	6120      	str	r0, [r4, #16]
 80177ec:	6161      	str	r1, [r4, #20]
 80177ee:	692a      	ldr	r2, [r5, #16]
 80177f0:	61a2      	str	r2, [r4, #24]
}
 80177f2:	4620      	mov	r0, r4
 80177f4:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80177f6:	4631      	mov	r1, r6
 80177f8:	4628      	mov	r0, r5
 80177fa:	f7ff fe9f 	bl	801753c <ip_reass_remove_oldest_datagram>
 80177fe:	4286      	cmp	r6, r0
 8017800:	dd02      	ble.n	8017808 <ip_reass_enqueue_new_datagram+0x50>
    if (ipr == NULL)
 8017802:	2c00      	cmp	r4, #0
 8017804:	d1e0      	bne.n	80177c8 <ip_reass_enqueue_new_datagram+0x10>
 8017806:	e7f4      	b.n	80177f2 <ip_reass_enqueue_new_datagram+0x3a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017808:	2003      	movs	r0, #3
 801780a:	f000 fc93 	bl	8018134 <memp_malloc>
 801780e:	4604      	mov	r4, r0
 8017810:	e7f7      	b.n	8017802 <ip_reass_enqueue_new_datagram+0x4a>
 8017812:	bf00      	nop
 8017814:	20010268 	.word	0x20010268

08017818 <ip_reass_tmr>:
{
 8017818:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801781a:	4b09      	ldr	r3, [pc, #36]	; (8017840 <ip_reass_tmr+0x28>)
 801781c:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 801781e:	2400      	movs	r4, #0
  while (r != NULL) {
 8017820:	e004      	b.n	801782c <ip_reass_tmr+0x14>
      r = r->next;
 8017822:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8017824:	4621      	mov	r1, r4
 8017826:	f7ff fe03 	bl	8017430 <ip_reass_free_complete_datagram>
      r = r->next;
 801782a:	4628      	mov	r0, r5
  while (r != NULL) {
 801782c:	b138      	cbz	r0, 801783e <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 801782e:	7fc3      	ldrb	r3, [r0, #31]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d0f6      	beq.n	8017822 <ip_reass_tmr+0xa>
      r->timer--;
 8017834:	3b01      	subs	r3, #1
 8017836:	77c3      	strb	r3, [r0, #31]
      prev = r;
 8017838:	4604      	mov	r4, r0
      r = r->next;
 801783a:	6800      	ldr	r0, [r0, #0]
 801783c:	e7f6      	b.n	801782c <ip_reass_tmr+0x14>
}
 801783e:	bd38      	pop	{r3, r4, r5, pc}
 8017840:	20010268 	.word	0x20010268

08017844 <ip4_reass>:
{
 8017844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017848:	4681      	mov	r9, r0
  fraghdr = (struct ip_hdr*)p->payload;
 801784a:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801784c:	782b      	ldrb	r3, [r5, #0]
 801784e:	f003 030f 	and.w	r3, r3, #15
 8017852:	2b05      	cmp	r3, #5
 8017854:	d124      	bne.n	80178a0 <ip4_reass+0x5c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8017856:	88e8      	ldrh	r0, [r5, #6]
 8017858:	f7fe fd8f 	bl	801637a <lwip_htons>
 801785c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017860:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8017862:	8868      	ldrh	r0, [r5, #2]
 8017864:	f7fe fd89 	bl	801637a <lwip_htons>
 8017868:	782e      	ldrb	r6, [r5, #0]
 801786a:	f006 060f 	and.w	r6, r6, #15
 801786e:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 8017872:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 8017874:	4648      	mov	r0, r9
 8017876:	f001 f829 	bl	80188cc <pbuf_clen>
 801787a:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801787c:	4b59      	ldr	r3, [pc, #356]	; (80179e4 <ip4_reass+0x1a0>)
 801787e:	881b      	ldrh	r3, [r3, #0]
 8017880:	4403      	add	r3, r0
 8017882:	2b0a      	cmp	r3, #10
 8017884:	dc02      	bgt.n	801788c <ip4_reass+0x48>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017886:	4b58      	ldr	r3, [pc, #352]	; (80179e8 <ip4_reass+0x1a4>)
 8017888:	681c      	ldr	r4, [r3, #0]
 801788a:	e011      	b.n	80178b0 <ip4_reass+0x6c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801788c:	4601      	mov	r1, r0
 801788e:	4628      	mov	r0, r5
 8017890:	f7ff fe54 	bl	801753c <ip_reass_remove_oldest_datagram>
 8017894:	b120      	cbz	r0, 80178a0 <ip4_reass+0x5c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017896:	4b53      	ldr	r3, [pc, #332]	; (80179e4 <ip4_reass+0x1a0>)
 8017898:	881b      	ldrh	r3, [r3, #0]
 801789a:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801789c:	2b0a      	cmp	r3, #10
 801789e:	ddf2      	ble.n	8017886 <ip4_reass+0x42>
  pbuf_free(p);
 80178a0:	4648      	mov	r0, r9
 80178a2:	f000 fe4d 	bl	8018540 <pbuf_free>
  return NULL;
 80178a6:	2700      	movs	r7, #0
}
 80178a8:	4638      	mov	r0, r7
 80178aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80178ae:	6824      	ldr	r4, [r4, #0]
 80178b0:	b15c      	cbz	r4, 80178ca <ip4_reass+0x86>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80178b2:	6962      	ldr	r2, [r4, #20]
 80178b4:	68eb      	ldr	r3, [r5, #12]
 80178b6:	429a      	cmp	r2, r3
 80178b8:	d1f9      	bne.n	80178ae <ip4_reass+0x6a>
 80178ba:	69a2      	ldr	r2, [r4, #24]
 80178bc:	692b      	ldr	r3, [r5, #16]
 80178be:	429a      	cmp	r2, r3
 80178c0:	d1f5      	bne.n	80178ae <ip4_reass+0x6a>
 80178c2:	89a2      	ldrh	r2, [r4, #12]
 80178c4:	88ab      	ldrh	r3, [r5, #4]
 80178c6:	429a      	cmp	r2, r3
 80178c8:	d1f1      	bne.n	80178ae <ip4_reass+0x6a>
  if (ipr == NULL) {
 80178ca:	2c00      	cmp	r4, #0
 80178cc:	d048      	beq.n	8017960 <ip4_reass+0x11c>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80178ce:	88e8      	ldrh	r0, [r5, #6]
 80178d0:	f7fe fd53 	bl	801637a <lwip_htons>
 80178d4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80178d8:	2800      	cmp	r0, #0
 80178da:	d049      	beq.n	8017970 <ip4_reass+0x12c>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80178dc:	88ed      	ldrh	r5, [r5, #6]
 80178de:	f005 0520 	and.w	r5, r5, #32
 80178e2:	2d00      	cmp	r5, #0
 80178e4:	bf0c      	ite	eq
 80178e6:	2201      	moveq	r2, #1
 80178e8:	2200      	movne	r2, #0
  if (is_last) {
 80178ea:	d107      	bne.n	80178fc <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 80178ec:	19bb      	adds	r3, r7, r6
 80178ee:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80178f0:	429f      	cmp	r7, r3
 80178f2:	d8d5      	bhi.n	80178a0 <ip4_reass+0x5c>
 80178f4:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 80178f8:	428b      	cmp	r3, r1
 80178fa:	d8d1      	bhi.n	80178a0 <ip4_reass+0x5c>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80178fc:	4649      	mov	r1, r9
 80178fe:	4620      	mov	r0, r4
 8017900:	f7ff fe8a 	bl	8017618 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017904:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017908:	d0ca      	beq.n	80178a0 <ip4_reass+0x5c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801790a:	4b36      	ldr	r3, [pc, #216]	; (80179e4 <ip4_reass+0x1a0>)
 801790c:	881a      	ldrh	r2, [r3, #0]
 801790e:	4490      	add	r8, r2
 8017910:	f8a3 8000 	strh.w	r8, [r3]
  if (is_last) {
 8017914:	b92d      	cbnz	r5, 8017922 <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 8017916:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 8017918:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801791a:	7fa3      	ldrb	r3, [r4, #30]
 801791c:	f043 0301 	orr.w	r3, r3, #1
 8017920:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017922:	2801      	cmp	r0, #1
 8017924:	d15b      	bne.n	80179de <ip4_reass+0x19a>
    ipr->datagram_len += IP_HLEN;
 8017926:	8ba3      	ldrh	r3, [r4, #28]
 8017928:	3314      	adds	r3, #20
 801792a:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801792c:	6863      	ldr	r3, [r4, #4]
 801792e:	685e      	ldr	r6, [r3, #4]
 8017930:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017932:	4623      	mov	r3, r4
 8017934:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8017938:	685f      	ldr	r7, [r3, #4]
 801793a:	6898      	ldr	r0, [r3, #8]
 801793c:	68d9      	ldr	r1, [r3, #12]
 801793e:	6032      	str	r2, [r6, #0]
 8017940:	6077      	str	r7, [r6, #4]
 8017942:	60b0      	str	r0, [r6, #8]
 8017944:	60f1      	str	r1, [r6, #12]
 8017946:	691a      	ldr	r2, [r3, #16]
 8017948:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801794a:	8ba0      	ldrh	r0, [r4, #28]
 801794c:	f7fe fd15 	bl	801637a <lwip_htons>
 8017950:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017952:	2300      	movs	r3, #0
 8017954:	71b3      	strb	r3, [r6, #6]
 8017956:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017958:	72b3      	strb	r3, [r6, #10]
 801795a:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 801795c:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 801795e:	e026      	b.n	80179ae <ip4_reass+0x16a>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017960:	4641      	mov	r1, r8
 8017962:	4628      	mov	r0, r5
 8017964:	f7ff ff28 	bl	80177b8 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 8017968:	4604      	mov	r4, r0
 801796a:	2800      	cmp	r0, #0
 801796c:	d1b6      	bne.n	80178dc <ip4_reass+0x98>
 801796e:	e797      	b.n	80178a0 <ip4_reass+0x5c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017970:	89e0      	ldrh	r0, [r4, #14]
 8017972:	f7fe fd02 	bl	801637a <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017976:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801797a:	2800      	cmp	r0, #0
 801797c:	d0ae      	beq.n	80178dc <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801797e:	682a      	ldr	r2, [r5, #0]
 8017980:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8017984:	68a8      	ldr	r0, [r5, #8]
 8017986:	68e9      	ldr	r1, [r5, #12]
 8017988:	60a2      	str	r2, [r4, #8]
 801798a:	f8c4 e00c 	str.w	lr, [r4, #12]
 801798e:	6120      	str	r0, [r4, #16]
 8017990:	6161      	str	r1, [r4, #20]
 8017992:	692a      	ldr	r2, [r5, #16]
 8017994:	61a2      	str	r2, [r4, #24]
 8017996:	e7a1      	b.n	80178dc <ip4_reass+0x98>
      iprh = (struct ip_reass_helper*)r->payload;
 8017998:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 801799a:	f06f 0113 	mvn.w	r1, #19
 801799e:	4628      	mov	r0, r5
 80179a0:	f000 fdc4 	bl	801852c <pbuf_header>
      pbuf_cat(p, r);
 80179a4:	4629      	mov	r1, r5
 80179a6:	4638      	mov	r0, r7
 80179a8:	f000 ffb6 	bl	8018918 <pbuf_cat>
      r = iprh->next_pbuf;
 80179ac:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 80179ae:	2d00      	cmp	r5, #0
 80179b0:	d1f2      	bne.n	8017998 <ip4_reass+0x154>
    if (ipr == reassdatagrams) {
 80179b2:	4b0d      	ldr	r3, [pc, #52]	; (80179e8 <ip4_reass+0x1a4>)
 80179b4:	6819      	ldr	r1, [r3, #0]
 80179b6:	428c      	cmp	r4, r1
 80179b8:	d005      	beq.n	80179c6 <ip4_reass+0x182>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80179ba:	b129      	cbz	r1, 80179c8 <ip4_reass+0x184>
        if (ipr_prev->next == ipr) {
 80179bc:	680b      	ldr	r3, [r1, #0]
 80179be:	429c      	cmp	r4, r3
 80179c0:	d002      	beq.n	80179c8 <ip4_reass+0x184>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80179c2:	4619      	mov	r1, r3
 80179c4:	e7f9      	b.n	80179ba <ip4_reass+0x176>
      ipr_prev = NULL;
 80179c6:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80179c8:	4620      	mov	r0, r4
 80179ca:	f7ff fd0d 	bl	80173e8 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 80179ce:	4638      	mov	r0, r7
 80179d0:	f000 ff7c 	bl	80188cc <pbuf_clen>
 80179d4:	4a03      	ldr	r2, [pc, #12]	; (80179e4 <ip4_reass+0x1a0>)
 80179d6:	8813      	ldrh	r3, [r2, #0]
 80179d8:	1a18      	subs	r0, r3, r0
 80179da:	8010      	strh	r0, [r2, #0]
    return p;
 80179dc:	e764      	b.n	80178a8 <ip4_reass+0x64>
  return NULL;
 80179de:	2700      	movs	r7, #0
 80179e0:	e762      	b.n	80178a8 <ip4_reass+0x64>
 80179e2:	bf00      	nop
 80179e4:	20010264 	.word	0x20010264
 80179e8:	20010268 	.word	0x20010268

080179ec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80179ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179f0:	b08d      	sub	sp, #52	; 0x34
 80179f2:	4605      	mov	r5, r0
 80179f4:	9107      	str	r1, [sp, #28]
 80179f6:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80179f8:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 80179fa:	3b14      	subs	r3, #20
 80179fc:	d420      	bmi.n	8017a40 <ip4_frag+0x54>
 80179fe:	10db      	asrs	r3, r3, #3
 8017a00:	9309      	str	r3, [sp, #36]	; 0x24
 8017a02:	b29b      	uxth	r3, r3
 8017a04:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017a06:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8017a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8017a0e:	f003 030f 	and.w	r3, r3, #15
 8017a12:	2b05      	cmp	r3, #5
 8017a14:	d116      	bne.n	8017a44 <ip4_frag+0x58>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017a16:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8017a1a:	f7fe fcae 	bl	801637a <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8017a1e:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8017a22:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8017a24:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8017a28:	d116      	bne.n	8017a58 <ip4_frag+0x6c>

  left = p->tot_len - IP_HLEN;
 8017a2a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8017a2e:	f1a9 0914 	sub.w	r9, r9, #20
 8017a32:	fa1f fb89 	uxth.w	fp, r9
  u16_t poff = IP_HLEN;
 8017a36:	f04f 0814 	mov.w	r8, #20
  u16_t newpbuflen = 0;
 8017a3a:	2400      	movs	r4, #0
 8017a3c:	46d9      	mov	r9, fp

  while (left) {
 8017a3e:	e08c      	b.n	8017b5a <ip4_frag+0x16e>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8017a40:	3307      	adds	r3, #7
 8017a42:	e7dc      	b.n	80179fe <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8017a44:	4b5e      	ldr	r3, [pc, #376]	; (8017bc0 <ip4_frag+0x1d4>)
 8017a46:	f240 22e1 	movw	r2, #737	; 0x2e1
 8017a4a:	495e      	ldr	r1, [pc, #376]	; (8017bc4 <ip4_frag+0x1d8>)
 8017a4c:	485e      	ldr	r0, [pc, #376]	; (8017bc8 <ip4_frag+0x1dc>)
 8017a4e:	f008 f84e 	bl	801faee <iprintf>
 8017a52:	f06f 0005 	mvn.w	r0, #5
 8017a56:	e043      	b.n	8017ae0 <ip4_frag+0xf4>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8017a58:	4b59      	ldr	r3, [pc, #356]	; (8017bc0 <ip4_frag+0x1d4>)
 8017a5a:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017a5e:	495b      	ldr	r1, [pc, #364]	; (8017bcc <ip4_frag+0x1e0>)
 8017a60:	4859      	ldr	r0, [pc, #356]	; (8017bc8 <ip4_frag+0x1dc>)
 8017a62:	f008 f844 	bl	801faee <iprintf>
 8017a66:	f06f 0005 	mvn.w	r0, #5
 8017a6a:	e039      	b.n	8017ae0 <ip4_frag+0xf4>
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017a6c:	4b54      	ldr	r3, [pc, #336]	; (8017bc0 <ip4_frag+0x1d4>)
 8017a6e:	f240 3209 	movw	r2, #777	; 0x309
 8017a72:	4957      	ldr	r1, [pc, #348]	; (8017bd0 <ip4_frag+0x1e4>)
 8017a74:	4854      	ldr	r0, [pc, #336]	; (8017bc8 <ip4_frag+0x1dc>)
 8017a76:	f008 f83a 	bl	801faee <iprintf>
 8017a7a:	e086      	b.n	8017b8a <ip4_frag+0x19e>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017a7c:	f7ff fe96 	bl	80177ac <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 8017a80:	4607      	mov	r7, r0
 8017a82:	b340      	cbz	r0, 8017ad6 <ip4_frag+0xea>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 8017a84:	686b      	ldr	r3, [r5, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017a86:	4443      	add	r3, r8
 8017a88:	9401      	str	r4, [sp, #4]
 8017a8a:	9300      	str	r3, [sp, #0]
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	2202      	movs	r2, #2
 8017a90:	4621      	mov	r1, r4
 8017a92:	2004      	movs	r0, #4
 8017a94:	f000 fd0e 	bl	80184b4 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8017a98:	9003      	str	r0, [sp, #12]
 8017a9a:	b320      	cbz	r0, 8017ae6 <ip4_frag+0xfa>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8017a9c:	4628      	mov	r0, r5
 8017a9e:	f000 ff1f 	bl	80188e0 <pbuf_ref>
      pcr->original = p;
 8017aa2:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017aa4:	4b4b      	ldr	r3, [pc, #300]	; (8017bd4 <ip4_frag+0x1e8>)
 8017aa6:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017aa8:	9903      	ldr	r1, [sp, #12]
 8017aaa:	9804      	ldr	r0, [sp, #16]
 8017aac:	f000 ff34 	bl	8018918 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8017ab0:	1b36      	subs	r6, r6, r4
 8017ab2:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 8017ab4:	b116      	cbz	r6, 8017abc <ip4_frag+0xd0>
        poff = 0;
        p = p->next;
 8017ab6:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8017ab8:	f04f 0800 	mov.w	r8, #0
    while (left_to_copy) {
 8017abc:	b1e6      	cbz	r6, 8017af8 <ip4_frag+0x10c>
      u16_t plen = p->len - poff;
 8017abe:	896c      	ldrh	r4, [r5, #10]
 8017ac0:	eba4 0408 	sub.w	r4, r4, r8
 8017ac4:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017ac6:	42b4      	cmp	r4, r6
 8017ac8:	bf28      	it	cs
 8017aca:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 8017acc:	2c00      	cmp	r4, #0
 8017ace:	d1d5      	bne.n	8017a7c <ip4_frag+0x90>
        p = p->next;
 8017ad0:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8017ad2:	46a0      	mov	r8, r4
        continue;
 8017ad4:	e7f2      	b.n	8017abc <ip4_frag+0xd0>
        pbuf_free(rambuf);
 8017ad6:	9804      	ldr	r0, [sp, #16]
 8017ad8:	f000 fd32 	bl	8018540 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017adc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017ae0:	b00d      	add	sp, #52	; 0x34
 8017ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 8017ae6:	4638      	mov	r0, r7
 8017ae8:	f7ff fd66 	bl	80175b8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017aec:	9804      	ldr	r0, [sp, #16]
 8017aee:	f000 fd27 	bl	8018540 <pbuf_free>
  return ERR_MEM;
 8017af2:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 8017af6:	e7f3      	b.n	8017ae0 <ip4_frag+0xf4>
    poff += newpbuflen;
 8017af8:	44a0      	add	r8, r4
 8017afa:	fa1f f888 	uxth.w	r8, r8
    last = (left <= netif->mtu - IP_HLEN);
 8017afe:	9b07      	ldr	r3, [sp, #28]
 8017b00:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017b02:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 8017b04:	9a06      	ldr	r2, [sp, #24]
 8017b06:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 8017b0a:	9a08      	ldr	r2, [sp, #32]
 8017b0c:	429a      	cmp	r2, r3
 8017b0e:	dd01      	ble.n	8017b14 <ip4_frag+0x128>
      tmp = tmp | IP_MF;
 8017b10:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017b14:	f7fe fc31 	bl	801637a <lwip_htons>
 8017b18:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8017b1c:	9e05      	ldr	r6, [sp, #20]
 8017b1e:	f106 0014 	add.w	r0, r6, #20
 8017b22:	b280      	uxth	r0, r0
 8017b24:	f7fe fc29 	bl	801637a <lwip_htons>
 8017b28:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	f88b 300a 	strb.w	r3, [fp, #10]
 8017b32:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8017b36:	9807      	ldr	r0, [sp, #28]
 8017b38:	6943      	ldr	r3, [r0, #20]
 8017b3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017b3c:	9f04      	ldr	r7, [sp, #16]
 8017b3e:	4639      	mov	r1, r7
 8017b40:	4798      	blx	r3
    pbuf_free(rambuf);
 8017b42:	4638      	mov	r0, r7
 8017b44:	f000 fcfc 	bl	8018540 <pbuf_free>
    left -= fragsize;
 8017b48:	eba9 0306 	sub.w	r3, r9, r6
 8017b4c:	fa1f f983 	uxth.w	r9, r3
    ofo += nfb;
 8017b50:	9b06      	ldr	r3, [sp, #24]
 8017b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b54:	4413      	add	r3, r2
 8017b56:	b29b      	uxth	r3, r3
 8017b58:	9306      	str	r3, [sp, #24]
  while (left) {
 8017b5a:	f1b9 0f00 	cmp.w	r9, #0
 8017b5e:	d029      	beq.n	8017bb4 <ip4_frag+0x1c8>
    fragsize = LWIP_MIN(left, nfb * 8);
 8017b60:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8017b64:	00db      	lsls	r3, r3, #3
 8017b66:	f8cd 9020 	str.w	r9, [sp, #32]
 8017b6a:	454b      	cmp	r3, r9
 8017b6c:	bfa8      	it	ge
 8017b6e:	464b      	movge	r3, r9
 8017b70:	b29b      	uxth	r3, r3
 8017b72:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017b74:	2200      	movs	r2, #0
 8017b76:	2114      	movs	r1, #20
 8017b78:	2002      	movs	r0, #2
 8017b7a:	f000 fd4d 	bl	8018618 <pbuf_alloc>
    if (rambuf == NULL) {
 8017b7e:	9004      	str	r0, [sp, #16]
 8017b80:	b1d0      	cbz	r0, 8017bb8 <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017b82:	896b      	ldrh	r3, [r5, #10]
 8017b84:	2b13      	cmp	r3, #19
 8017b86:	f67f af71 	bls.w	8017a6c <ip4_frag+0x80>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017b8a:	9f04      	ldr	r7, [sp, #16]
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	f8da 2000 	ldr.w	r2, [sl]
 8017b92:	f8da 6004 	ldr.w	r6, [sl, #4]
 8017b96:	f8da 0008 	ldr.w	r0, [sl, #8]
 8017b9a:	f8da 100c 	ldr.w	r1, [sl, #12]
 8017b9e:	601a      	str	r2, [r3, #0]
 8017ba0:	605e      	str	r6, [r3, #4]
 8017ba2:	6098      	str	r0, [r3, #8]
 8017ba4:	60d9      	str	r1, [r3, #12]
 8017ba6:	f8da 2010 	ldr.w	r2, [sl, #16]
 8017baa:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017bac:	f8d7 b004 	ldr.w	fp, [r7, #4]
    left_to_copy = fragsize;
 8017bb0:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 8017bb2:	e783      	b.n	8017abc <ip4_frag+0xd0>
  return ERR_OK;
 8017bb4:	2000      	movs	r0, #0
 8017bb6:	e793      	b.n	8017ae0 <ip4_frag+0xf4>
  return ERR_MEM;
 8017bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8017bbc:	e790      	b.n	8017ae0 <ip4_frag+0xf4>
 8017bbe:	bf00      	nop
 8017bc0:	080259b0 	.word	0x080259b0
 8017bc4:	080258c0 	.word	0x080258c0
 8017bc8:	080214f0 	.word	0x080214f0
 8017bcc:	080258e8 	.word	0x080258e8
 8017bd0:	08025904 	.word	0x08025904
 8017bd4:	080175e5 	.word	0x080175e5

08017bd8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8017bd8:	b510      	push	{r4, lr}
 8017bda:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017bdc:	4b2d      	ldr	r3, [pc, #180]	; (8017c94 <plug_holes+0xbc>)
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	4283      	cmp	r3, r0
 8017be2:	d831      	bhi.n	8017c48 <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017be4:	4b2c      	ldr	r3, [pc, #176]	; (8017c98 <plug_holes+0xc0>)
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	429c      	cmp	r4, r3
 8017bea:	d235      	bcs.n	8017c58 <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017bec:	7923      	ldrb	r3, [r4, #4]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d13a      	bne.n	8017c68 <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8017bf2:	8823      	ldrh	r3, [r4, #0]
 8017bf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017bf8:	d83e      	bhi.n	8017c78 <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8017bfa:	4b26      	ldr	r3, [pc, #152]	; (8017c94 <plug_holes+0xbc>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	8821      	ldrh	r1, [r4, #0]
 8017c00:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8017c02:	4294      	cmp	r4, r2
 8017c04:	d00f      	beq.n	8017c26 <plug_holes+0x4e>
 8017c06:	7910      	ldrb	r0, [r2, #4]
 8017c08:	b968      	cbnz	r0, 8017c26 <plug_holes+0x4e>
 8017c0a:	4823      	ldr	r0, [pc, #140]	; (8017c98 <plug_holes+0xc0>)
 8017c0c:	6800      	ldr	r0, [r0, #0]
 8017c0e:	4282      	cmp	r2, r0
 8017c10:	d009      	beq.n	8017c26 <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8017c12:	4822      	ldr	r0, [pc, #136]	; (8017c9c <plug_holes+0xc4>)
 8017c14:	6800      	ldr	r0, [r0, #0]
 8017c16:	4282      	cmp	r2, r0
 8017c18:	d036      	beq.n	8017c88 <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 8017c1a:	5a5a      	ldrh	r2, [r3, r1]
 8017c1c:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8017c1e:	5a5a      	ldrh	r2, [r3, r1]
 8017c20:	441a      	add	r2, r3
 8017c22:	1ae1      	subs	r1, r4, r3
 8017c24:	8051      	strh	r1, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8017c26:	8861      	ldrh	r1, [r4, #2]
 8017c28:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8017c2a:	4294      	cmp	r4, r2
 8017c2c:	d00b      	beq.n	8017c46 <plug_holes+0x6e>
 8017c2e:	7910      	ldrb	r0, [r2, #4]
 8017c30:	b948      	cbnz	r0, 8017c46 <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8017c32:	481a      	ldr	r0, [pc, #104]	; (8017c9c <plug_holes+0xc4>)
 8017c34:	6800      	ldr	r0, [r0, #0]
 8017c36:	4284      	cmp	r4, r0
 8017c38:	d029      	beq.n	8017c8e <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 8017c3a:	8820      	ldrh	r0, [r4, #0]
 8017c3c:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8017c3e:	8821      	ldrh	r1, [r4, #0]
 8017c40:	4419      	add	r1, r3
 8017c42:	1ad3      	subs	r3, r2, r3
 8017c44:	804b      	strh	r3, [r1, #2]
 8017c46:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017c48:	4b15      	ldr	r3, [pc, #84]	; (8017ca0 <plug_holes+0xc8>)
 8017c4a:	f240 125d 	movw	r2, #349	; 0x15d
 8017c4e:	4915      	ldr	r1, [pc, #84]	; (8017ca4 <plug_holes+0xcc>)
 8017c50:	4815      	ldr	r0, [pc, #84]	; (8017ca8 <plug_holes+0xd0>)
 8017c52:	f007 ff4c 	bl	801faee <iprintf>
 8017c56:	e7c5      	b.n	8017be4 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017c58:	4b11      	ldr	r3, [pc, #68]	; (8017ca0 <plug_holes+0xc8>)
 8017c5a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8017c5e:	4913      	ldr	r1, [pc, #76]	; (8017cac <plug_holes+0xd4>)
 8017c60:	4811      	ldr	r0, [pc, #68]	; (8017ca8 <plug_holes+0xd0>)
 8017c62:	f007 ff44 	bl	801faee <iprintf>
 8017c66:	e7c1      	b.n	8017bec <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017c68:	4b0d      	ldr	r3, [pc, #52]	; (8017ca0 <plug_holes+0xc8>)
 8017c6a:	f240 125f 	movw	r2, #351	; 0x15f
 8017c6e:	4910      	ldr	r1, [pc, #64]	; (8017cb0 <plug_holes+0xd8>)
 8017c70:	480d      	ldr	r0, [pc, #52]	; (8017ca8 <plug_holes+0xd0>)
 8017c72:	f007 ff3c 	bl	801faee <iprintf>
 8017c76:	e7bc      	b.n	8017bf2 <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8017c78:	4b09      	ldr	r3, [pc, #36]	; (8017ca0 <plug_holes+0xc8>)
 8017c7a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8017c7e:	490d      	ldr	r1, [pc, #52]	; (8017cb4 <plug_holes+0xdc>)
 8017c80:	4809      	ldr	r0, [pc, #36]	; (8017ca8 <plug_holes+0xd0>)
 8017c82:	f007 ff34 	bl	801faee <iprintf>
 8017c86:	e7b8      	b.n	8017bfa <plug_holes+0x22>
      lfree = mem;
 8017c88:	4a04      	ldr	r2, [pc, #16]	; (8017c9c <plug_holes+0xc4>)
 8017c8a:	6014      	str	r4, [r2, #0]
 8017c8c:	e7c5      	b.n	8017c1a <plug_holes+0x42>
      lfree = pmem;
 8017c8e:	4803      	ldr	r0, [pc, #12]	; (8017c9c <plug_holes+0xc4>)
 8017c90:	6002      	str	r2, [r0, #0]
 8017c92:	e7d2      	b.n	8017c3a <plug_holes+0x62>
 8017c94:	20010274 	.word	0x20010274
 8017c98:	20010278 	.word	0x20010278
 8017c9c:	2001026c 	.word	0x2001026c
 8017ca0:	08025bb4 	.word	0x08025bb4
 8017ca4:	08025be4 	.word	0x08025be4
 8017ca8:	080214f0 	.word	0x080214f0
 8017cac:	08025bfc 	.word	0x08025bfc
 8017cb0:	08025c18 	.word	0x08025c18
 8017cb4:	08025c34 	.word	0x08025c34

08017cb8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8017cb8:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8017cba:	4b11      	ldr	r3, [pc, #68]	; (8017d00 <mem_init+0x48>)
 8017cbc:	f023 0303 	bic.w	r3, r3, #3
 8017cc0:	4a10      	ldr	r2, [pc, #64]	; (8017d04 <mem_init+0x4c>)
 8017cc2:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8017cc4:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8017cc8:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8017cca:	2200      	movs	r2, #0
 8017ccc:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8017cce:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8017cd0:	185a      	adds	r2, r3, r1
 8017cd2:	480d      	ldr	r0, [pc, #52]	; (8017d08 <mem_init+0x50>)
 8017cd4:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 8017cd6:	2001      	movs	r0, #1
 8017cd8:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8017cda:	f8a3 1640 	strh.w	r1, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8017cde:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8017ce0:	4a0a      	ldr	r2, [pc, #40]	; (8017d0c <mem_init+0x54>)
 8017ce2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8017ce4:	480a      	ldr	r0, [pc, #40]	; (8017d10 <mem_init+0x58>)
 8017ce6:	f004 fde5 	bl	801c8b4 <sys_mutex_new>
 8017cea:	b900      	cbnz	r0, 8017cee <mem_init+0x36>
 8017cec:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8017cee:	4b09      	ldr	r3, [pc, #36]	; (8017d14 <mem_init+0x5c>)
 8017cf0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8017cf4:	4908      	ldr	r1, [pc, #32]	; (8017d18 <mem_init+0x60>)
 8017cf6:	4809      	ldr	r0, [pc, #36]	; (8017d1c <mem_init+0x64>)
 8017cf8:	f007 fef9 	bl	801faee <iprintf>
  }
}
 8017cfc:	e7f6      	b.n	8017cec <mem_init+0x34>
 8017cfe:	bf00      	nop
 8017d00:	2001105b 	.word	0x2001105b
 8017d04:	20010274 	.word	0x20010274
 8017d08:	20010278 	.word	0x20010278
 8017d0c:	2001026c 	.word	0x2001026c
 8017d10:	20010270 	.word	0x20010270
 8017d14:	08025bb4 	.word	0x08025bb4
 8017d18:	08025ac0 	.word	0x08025ac0
 8017d1c:	080214f0 	.word	0x080214f0

08017d20 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8017d20:	2800      	cmp	r0, #0
 8017d22:	d048      	beq.n	8017db6 <mem_free+0x96>
{
 8017d24:	b538      	push	{r3, r4, r5, lr}
 8017d26:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8017d28:	f010 0f03 	tst.w	r0, #3
 8017d2c:	d11b      	bne.n	8017d66 <mem_free+0x46>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017d2e:	4b22      	ldr	r3, [pc, #136]	; (8017db8 <mem_free+0x98>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	429c      	cmp	r4, r3
 8017d34:	d303      	bcc.n	8017d3e <mem_free+0x1e>
 8017d36:	4b21      	ldr	r3, [pc, #132]	; (8017dbc <mem_free+0x9c>)
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	429c      	cmp	r4, r3
 8017d3c:	d306      	bcc.n	8017d4c <mem_free+0x2c>
 8017d3e:	4b20      	ldr	r3, [pc, #128]	; (8017dc0 <mem_free+0xa0>)
 8017d40:	f240 12af 	movw	r2, #431	; 0x1af
 8017d44:	491f      	ldr	r1, [pc, #124]	; (8017dc4 <mem_free+0xa4>)
 8017d46:	4820      	ldr	r0, [pc, #128]	; (8017dc8 <mem_free+0xa8>)
 8017d48:	f007 fed1 	bl	801faee <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017d4c:	4b1a      	ldr	r3, [pc, #104]	; (8017db8 <mem_free+0x98>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	429c      	cmp	r4, r3
 8017d52:	d303      	bcc.n	8017d5c <mem_free+0x3c>
 8017d54:	4b19      	ldr	r3, [pc, #100]	; (8017dbc <mem_free+0x9c>)
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	429c      	cmp	r4, r3
 8017d5a:	d30c      	bcc.n	8017d76 <mem_free+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8017d5c:	f004 fddc 	bl	801c918 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8017d60:	f004 fde6 	bl	801c930 <sys_arch_unprotect>
    return;
 8017d64:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8017d66:	4b16      	ldr	r3, [pc, #88]	; (8017dc0 <mem_free+0xa0>)
 8017d68:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8017d6c:	4917      	ldr	r1, [pc, #92]	; (8017dcc <mem_free+0xac>)
 8017d6e:	4816      	ldr	r0, [pc, #88]	; (8017dc8 <mem_free+0xa8>)
 8017d70:	f007 febd 	bl	801faee <iprintf>
 8017d74:	e7db      	b.n	8017d2e <mem_free+0xe>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017d76:	4816      	ldr	r0, [pc, #88]	; (8017dd0 <mem_free+0xb0>)
 8017d78:	f004 fdad 	bl	801c8d6 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8017d7c:	f1a4 0508 	sub.w	r5, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8017d80:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8017d84:	b17b      	cbz	r3, 8017da6 <mem_free+0x86>
  /* ... and is now unused. */
  mem->used = 0;
 8017d86:	2300      	movs	r3, #0
 8017d88:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8017d8c:	4b11      	ldr	r3, [pc, #68]	; (8017dd4 <mem_free+0xb4>)
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	429d      	cmp	r5, r3
 8017d92:	d201      	bcs.n	8017d98 <mem_free+0x78>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8017d94:	4b0f      	ldr	r3, [pc, #60]	; (8017dd4 <mem_free+0xb4>)
 8017d96:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8017d98:	4628      	mov	r0, r5
 8017d9a:	f7ff ff1d 	bl	8017bd8 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017d9e:	480c      	ldr	r0, [pc, #48]	; (8017dd0 <mem_free+0xb0>)
 8017da0:	f004 fda0 	bl	801c8e4 <sys_mutex_unlock>
 8017da4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8017da6:	4b06      	ldr	r3, [pc, #24]	; (8017dc0 <mem_free+0xa0>)
 8017da8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8017dac:	490a      	ldr	r1, [pc, #40]	; (8017dd8 <mem_free+0xb8>)
 8017dae:	4806      	ldr	r0, [pc, #24]	; (8017dc8 <mem_free+0xa8>)
 8017db0:	f007 fe9d 	bl	801faee <iprintf>
 8017db4:	e7e7      	b.n	8017d86 <mem_free+0x66>
 8017db6:	4770      	bx	lr
 8017db8:	20010274 	.word	0x20010274
 8017dbc:	20010278 	.word	0x20010278
 8017dc0:	08025bb4 	.word	0x08025bb4
 8017dc4:	08025a94 	.word	0x08025a94
 8017dc8:	080214f0 	.word	0x080214f0
 8017dcc:	08025a70 	.word	0x08025a70
 8017dd0:	20010270 	.word	0x20010270
 8017dd4:	2001026c 	.word	0x2001026c
 8017dd8:	08025aac 	.word	0x08025aac

08017ddc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8017ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dde:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8017de0:	1ccc      	adds	r4, r1, #3
 8017de2:	b2a4      	uxth	r4, r4
 8017de4:	f024 0403 	bic.w	r4, r4, #3
 8017de8:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 8017dea:	2c0b      	cmp	r4, #11
 8017dec:	d800      	bhi.n	8017df0 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8017dee:	240c      	movs	r4, #12
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8017df0:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8017df4:	d879      	bhi.n	8017eea <mem_trim+0x10e>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017df6:	4b3f      	ldr	r3, [pc, #252]	; (8017ef4 <mem_trim+0x118>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	42ab      	cmp	r3, r5
 8017dfc:	d803      	bhi.n	8017e06 <mem_trim+0x2a>
 8017dfe:	4b3e      	ldr	r3, [pc, #248]	; (8017ef8 <mem_trim+0x11c>)
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	429d      	cmp	r5, r3
 8017e04:	d306      	bcc.n	8017e14 <mem_trim+0x38>
 8017e06:	4b3d      	ldr	r3, [pc, #244]	; (8017efc <mem_trim+0x120>)
 8017e08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8017e0c:	493c      	ldr	r1, [pc, #240]	; (8017f00 <mem_trim+0x124>)
 8017e0e:	483d      	ldr	r0, [pc, #244]	; (8017f04 <mem_trim+0x128>)
 8017e10:	f007 fe6d 	bl	801faee <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017e14:	4b37      	ldr	r3, [pc, #220]	; (8017ef4 <mem_trim+0x118>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	429d      	cmp	r5, r3
 8017e1a:	d336      	bcc.n	8017e8a <mem_trim+0xae>
 8017e1c:	4a36      	ldr	r2, [pc, #216]	; (8017ef8 <mem_trim+0x11c>)
 8017e1e:	6812      	ldr	r2, [r2, #0]
 8017e20:	4295      	cmp	r5, r2
 8017e22:	d232      	bcs.n	8017e8a <mem_trim+0xae>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8017e24:	f1a5 0708 	sub.w	r7, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8017e28:	1aff      	subs	r7, r7, r3
 8017e2a:	b2bf      	uxth	r7, r7

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8017e2c:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8017e30:	1bf6      	subs	r6, r6, r7
 8017e32:	b2b6      	uxth	r6, r6
 8017e34:	3e08      	subs	r6, #8
 8017e36:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8017e38:	42b4      	cmp	r4, r6
 8017e3a:	d82c      	bhi.n	8017e96 <mem_trim+0xba>
  if (newsize > size) {
 8017e3c:	42b4      	cmp	r4, r6
 8017e3e:	d856      	bhi.n	8017eee <mem_trim+0x112>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8017e40:	d027      	beq.n	8017e92 <mem_trim+0xb6>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017e42:	4831      	ldr	r0, [pc, #196]	; (8017f08 <mem_trim+0x12c>)
 8017e44:	f004 fd47 	bl	801c8d6 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8017e48:	4b2a      	ldr	r3, [pc, #168]	; (8017ef4 <mem_trim+0x118>)
 8017e4a:	681a      	ldr	r2, [r3, #0]
 8017e4c:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8017e50:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 8017e52:	7908      	ldrb	r0, [r1, #4]
 8017e54:	bb58      	cbnz	r0, 8017eae <mem_trim+0xd2>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8017e56:	5ad0      	ldrh	r0, [r2, r3]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8017e58:	19e3      	adds	r3, r4, r7
 8017e5a:	b29b      	uxth	r3, r3
 8017e5c:	3308      	adds	r3, #8
 8017e5e:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8017e60:	4c2a      	ldr	r4, [pc, #168]	; (8017f0c <mem_trim+0x130>)
 8017e62:	6824      	ldr	r4, [r4, #0]
 8017e64:	42a1      	cmp	r1, r4
 8017e66:	d01e      	beq.n	8017ea6 <mem_trim+0xca>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8017e68:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 8017e6a:	2400      	movs	r4, #0
 8017e6c:	710c      	strb	r4, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 8017e6e:	52d0      	strh	r0, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
 8017e70:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
 8017e72:	f825 3c08 	strh.w	r3, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017e76:	5ad1      	ldrh	r1, [r2, r3]
 8017e78:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8017e7c:	d001      	beq.n	8017e82 <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8017e7e:	440a      	add	r2, r1
 8017e80:	8053      	strh	r3, [r2, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017e82:	4821      	ldr	r0, [pc, #132]	; (8017f08 <mem_trim+0x12c>)
 8017e84:	f004 fd2e 	bl	801c8e4 <sys_mutex_unlock>
  return rmem;
 8017e88:	e003      	b.n	8017e92 <mem_trim+0xb6>
    SYS_ARCH_PROTECT(lev);
 8017e8a:	f004 fd45 	bl	801c918 <sys_arch_protect>
    SYS_ARCH_UNPROTECT(lev);
 8017e8e:	f004 fd4f 	bl	801c930 <sys_arch_unprotect>
}
 8017e92:	4628      	mov	r0, r5
 8017e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8017e96:	4b19      	ldr	r3, [pc, #100]	; (8017efc <mem_trim+0x120>)
 8017e98:	f240 2206 	movw	r2, #518	; 0x206
 8017e9c:	491c      	ldr	r1, [pc, #112]	; (8017f10 <mem_trim+0x134>)
 8017e9e:	4819      	ldr	r0, [pc, #100]	; (8017f04 <mem_trim+0x128>)
 8017ea0:	f007 fe25 	bl	801faee <iprintf>
 8017ea4:	e7ca      	b.n	8017e3c <mem_trim+0x60>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8017ea6:	18d1      	adds	r1, r2, r3
 8017ea8:	4c18      	ldr	r4, [pc, #96]	; (8017f0c <mem_trim+0x130>)
 8017eaa:	6021      	str	r1, [r4, #0]
 8017eac:	e7dc      	b.n	8017e68 <mem_trim+0x8c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017eae:	f104 0314 	add.w	r3, r4, #20
 8017eb2:	42b3      	cmp	r3, r6
 8017eb4:	d8e5      	bhi.n	8017e82 <mem_trim+0xa6>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8017eb6:	19e3      	adds	r3, r4, r7
 8017eb8:	b29b      	uxth	r3, r3
 8017eba:	3308      	adds	r3, #8
 8017ebc:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8017ebe:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 8017ec0:	4812      	ldr	r0, [pc, #72]	; (8017f0c <mem_trim+0x130>)
 8017ec2:	6800      	ldr	r0, [r0, #0]
 8017ec4:	4281      	cmp	r1, r0
 8017ec6:	d201      	bcs.n	8017ecc <mem_trim+0xf0>
      lfree = mem2;
 8017ec8:	4810      	ldr	r0, [pc, #64]	; (8017f0c <mem_trim+0x130>)
 8017eca:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 8017ecc:	2000      	movs	r0, #0
 8017ece:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8017ed0:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8017ed4:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 8017ed6:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 8017ed8:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017edc:	5ad1      	ldrh	r1, [r2, r3]
 8017ede:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8017ee2:	d0ce      	beq.n	8017e82 <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8017ee4:	440a      	add	r2, r1
 8017ee6:	8053      	strh	r3, [r2, #2]
 8017ee8:	e7cb      	b.n	8017e82 <mem_trim+0xa6>
    return NULL;
 8017eea:	2500      	movs	r5, #0
 8017eec:	e7d1      	b.n	8017e92 <mem_trim+0xb6>
    return NULL;
 8017eee:	2500      	movs	r5, #0
 8017ef0:	e7cf      	b.n	8017e92 <mem_trim+0xb6>
 8017ef2:	bf00      	nop
 8017ef4:	20010274 	.word	0x20010274
 8017ef8:	20010278 	.word	0x20010278
 8017efc:	08025bb4 	.word	0x08025bb4
 8017f00:	08025b7c 	.word	0x08025b7c
 8017f04:	080214f0 	.word	0x080214f0
 8017f08:	20010270 	.word	0x20010270
 8017f0c:	2001026c 	.word	0x2001026c
 8017f10:	08025b94 	.word	0x08025b94

08017f14 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8017f14:	2800      	cmp	r0, #0
 8017f16:	f000 808e 	beq.w	8018036 <mem_malloc+0x122>
{
 8017f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f1c:	4605      	mov	r5, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8017f1e:	3503      	adds	r5, #3
 8017f20:	b2ad      	uxth	r5, r5
 8017f22:	f025 0503 	bic.w	r5, r5, #3
 8017f26:	b2ad      	uxth	r5, r5

  if (size < MIN_SIZE_ALIGNED) {
 8017f28:	2d0b      	cmp	r5, #11
 8017f2a:	d800      	bhi.n	8017f2e <mem_malloc+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8017f2c:	250c      	movs	r5, #12
  }

  if (size > MEM_SIZE_ALIGNED) {
 8017f2e:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8017f32:	f200 8082 	bhi.w	801803a <mem_malloc+0x126>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8017f36:	4842      	ldr	r0, [pc, #264]	; (8018040 <mem_malloc+0x12c>)
 8017f38:	f004 fccd 	bl	801c8d6 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8017f3c:	4b41      	ldr	r3, [pc, #260]	; (8018044 <mem_malloc+0x130>)
 8017f3e:	6818      	ldr	r0, [r3, #0]
 8017f40:	4b41      	ldr	r3, [pc, #260]	; (8018048 <mem_malloc+0x134>)
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	1a1b      	subs	r3, r3, r0
 8017f46:	b29b      	uxth	r3, r3
 8017f48:	e049      	b.n	8017fde <mem_malloc+0xca>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8017f4a:	2301      	movs	r3, #1
 8017f4c:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8017f4e:	4b3e      	ldr	r3, [pc, #248]	; (8018048 <mem_malloc+0x134>)
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	429c      	cmp	r4, r3
 8017f54:	d014      	beq.n	8017f80 <mem_malloc+0x6c>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8017f56:	483a      	ldr	r0, [pc, #232]	; (8018040 <mem_malloc+0x12c>)
 8017f58:	f004 fcc4 	bl	801c8e4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017f5c:	4426      	add	r6, r4
 8017f5e:	3608      	adds	r6, #8
 8017f60:	4b3a      	ldr	r3, [pc, #232]	; (801804c <mem_malloc+0x138>)
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	429e      	cmp	r6, r3
 8017f66:	d821      	bhi.n	8017fac <mem_malloc+0x98>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017f68:	f014 0503 	ands.w	r5, r4, #3
 8017f6c:	d126      	bne.n	8017fbc <mem_malloc+0xa8>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017f6e:	2d00      	cmp	r5, #0
 8017f70:	d12c      	bne.n	8017fcc <mem_malloc+0xb8>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8017f72:	f104 0008 	add.w	r0, r4, #8
 8017f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cur = (struct mem *)(void *)&ram[cur->next];
 8017f78:	4a32      	ldr	r2, [pc, #200]	; (8018044 <mem_malloc+0x130>)
 8017f7a:	6812      	ldr	r2, [r2, #0]
 8017f7c:	881b      	ldrh	r3, [r3, #0]
 8017f7e:	4413      	add	r3, r2
          while (cur->used && cur != ram_end) {
 8017f80:	791a      	ldrb	r2, [r3, #4]
 8017f82:	b11a      	cbz	r2, 8017f8c <mem_malloc+0x78>
 8017f84:	4931      	ldr	r1, [pc, #196]	; (801804c <mem_malloc+0x138>)
 8017f86:	6809      	ldr	r1, [r1, #0]
 8017f88:	428b      	cmp	r3, r1
 8017f8a:	d1f5      	bne.n	8017f78 <mem_malloc+0x64>
          lfree = cur;
 8017f8c:	492e      	ldr	r1, [pc, #184]	; (8018048 <mem_malloc+0x134>)
 8017f8e:	600b      	str	r3, [r1, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8017f90:	492e      	ldr	r1, [pc, #184]	; (801804c <mem_malloc+0x138>)
 8017f92:	6809      	ldr	r1, [r1, #0]
 8017f94:	428b      	cmp	r3, r1
 8017f96:	d0de      	beq.n	8017f56 <mem_malloc+0x42>
 8017f98:	2a00      	cmp	r2, #0
 8017f9a:	d0dc      	beq.n	8017f56 <mem_malloc+0x42>
 8017f9c:	4b2c      	ldr	r3, [pc, #176]	; (8018050 <mem_malloc+0x13c>)
 8017f9e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017fa2:	492c      	ldr	r1, [pc, #176]	; (8018054 <mem_malloc+0x140>)
 8017fa4:	482c      	ldr	r0, [pc, #176]	; (8018058 <mem_malloc+0x144>)
 8017fa6:	f007 fda2 	bl	801faee <iprintf>
 8017faa:	e7d4      	b.n	8017f56 <mem_malloc+0x42>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017fac:	4b28      	ldr	r3, [pc, #160]	; (8018050 <mem_malloc+0x13c>)
 8017fae:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8017fb2:	492a      	ldr	r1, [pc, #168]	; (801805c <mem_malloc+0x148>)
 8017fb4:	4828      	ldr	r0, [pc, #160]	; (8018058 <mem_malloc+0x144>)
 8017fb6:	f007 fd9a 	bl	801faee <iprintf>
 8017fba:	e7d5      	b.n	8017f68 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017fbc:	4b24      	ldr	r3, [pc, #144]	; (8018050 <mem_malloc+0x13c>)
 8017fbe:	f240 22d6 	movw	r2, #726	; 0x2d6
 8017fc2:	4927      	ldr	r1, [pc, #156]	; (8018060 <mem_malloc+0x14c>)
 8017fc4:	4824      	ldr	r0, [pc, #144]	; (8018058 <mem_malloc+0x144>)
 8017fc6:	f007 fd92 	bl	801faee <iprintf>
 8017fca:	e7d0      	b.n	8017f6e <mem_malloc+0x5a>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017fcc:	4b20      	ldr	r3, [pc, #128]	; (8018050 <mem_malloc+0x13c>)
 8017fce:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8017fd2:	4924      	ldr	r1, [pc, #144]	; (8018064 <mem_malloc+0x150>)
 8017fd4:	4820      	ldr	r0, [pc, #128]	; (8018058 <mem_malloc+0x144>)
 8017fd6:	f007 fd8a 	bl	801faee <iprintf>
 8017fda:	e7ca      	b.n	8017f72 <mem_malloc+0x5e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8017fdc:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8017fde:	461f      	mov	r7, r3
 8017fe0:	462e      	mov	r6, r5
 8017fe2:	f5c5 61c8 	rsb	r1, r5, #1600	; 0x640
 8017fe6:	428b      	cmp	r3, r1
 8017fe8:	d220      	bcs.n	801802c <mem_malloc+0x118>
      mem = (struct mem *)(void *)&ram[ptr];
 8017fea:	18c4      	adds	r4, r0, r3
      if ((!mem->used) &&
 8017fec:	7921      	ldrb	r1, [r4, #4]
 8017fee:	2900      	cmp	r1, #0
 8017ff0:	d1f4      	bne.n	8017fdc <mem_malloc+0xc8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017ff2:	5ac2      	ldrh	r2, [r0, r3]
 8017ff4:	1bd2      	subs	r2, r2, r7
 8017ff6:	3a08      	subs	r2, #8
      if ((!mem->used) &&
 8017ff8:	4296      	cmp	r6, r2
 8017ffa:	d8ef      	bhi.n	8017fdc <mem_malloc+0xc8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017ffc:	f106 0114 	add.w	r1, r6, #20
 8018000:	428a      	cmp	r2, r1
 8018002:	d3a2      	bcc.n	8017f4a <mem_malloc+0x36>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8018004:	18ea      	adds	r2, r5, r3
 8018006:	b292      	uxth	r2, r2
 8018008:	3208      	adds	r2, #8
 801800a:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 801800c:	1881      	adds	r1, r0, r2
          mem2->used = 0;
 801800e:	2500      	movs	r5, #0
 8018010:	710d      	strb	r5, [r1, #4]
          mem2->next = mem->next;
 8018012:	8825      	ldrh	r5, [r4, #0]
 8018014:	5285      	strh	r5, [r0, r2]
          mem2->prev = ptr;
 8018016:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 8018018:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 801801a:	2301      	movs	r3, #1
 801801c:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 801801e:	5a83      	ldrh	r3, [r0, r2]
 8018020:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018024:	d093      	beq.n	8017f4e <mem_malloc+0x3a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8018026:	4418      	add	r0, r3
 8018028:	8042      	strh	r2, [r0, #2]
 801802a:	e790      	b.n	8017f4e <mem_malloc+0x3a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801802c:	4804      	ldr	r0, [pc, #16]	; (8018040 <mem_malloc+0x12c>)
 801802e:	f004 fc59 	bl	801c8e4 <sys_mutex_unlock>
  return NULL;
 8018032:	2000      	movs	r0, #0
 8018034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8018036:	2000      	movs	r0, #0
 8018038:	4770      	bx	lr
    return NULL;
 801803a:	2000      	movs	r0, #0
}
 801803c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801803e:	bf00      	nop
 8018040:	20010270 	.word	0x20010270
 8018044:	20010274 	.word	0x20010274
 8018048:	2001026c 	.word	0x2001026c
 801804c:	20010278 	.word	0x20010278
 8018050:	08025bb4 	.word	0x08025bb4
 8018054:	08025adc 	.word	0x08025adc
 8018058:	080214f0 	.word	0x080214f0
 801805c:	08025af8 	.word	0x08025af8
 8018060:	08025b28 	.word	0x08025b28
 8018064:	08025b58 	.word	0x08025b58

08018068 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8018068:	b538      	push	{r3, r4, r5, lr}
 801806a:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801806c:	f004 fc54 	bl	801c918 <sys_arch_protect>
 8018070:	4605      	mov	r5, r0

  memp = *desc->tab;
 8018072:	68a3      	ldr	r3, [r4, #8]
 8018074:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8018076:	b18c      	cbz	r4, 801809c <do_memp_malloc_pool+0x34>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8018078:	6822      	ldr	r2, [r4, #0]
 801807a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801807c:	f014 0f03 	tst.w	r4, #3
 8018080:	d104      	bne.n	801808c <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8018082:	4628      	mov	r0, r5
 8018084:	f004 fc54 	bl	801c930 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8018088:	4620      	mov	r0, r4
 801808a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801808c:	4b05      	ldr	r3, [pc, #20]	; (80180a4 <do_memp_malloc_pool+0x3c>)
 801808e:	f240 1249 	movw	r2, #329	; 0x149
 8018092:	4905      	ldr	r1, [pc, #20]	; (80180a8 <do_memp_malloc_pool+0x40>)
 8018094:	4805      	ldr	r0, [pc, #20]	; (80180ac <do_memp_malloc_pool+0x44>)
 8018096:	f007 fd2a 	bl	801faee <iprintf>
 801809a:	e7f2      	b.n	8018082 <do_memp_malloc_pool+0x1a>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 801809c:	f004 fc48 	bl	801c930 <sys_arch_unprotect>
  return NULL;
 80180a0:	2000      	movs	r0, #0
}
 80180a2:	bd38      	pop	{r3, r4, r5, pc}
 80180a4:	08025c80 	.word	0x08025c80
 80180a8:	08025cb0 	.word	0x08025cb0
 80180ac:	080214f0 	.word	0x080214f0

080180b0 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80180b0:	b538      	push	{r3, r4, r5, lr}
 80180b2:	4605      	mov	r5, r0
 80180b4:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80180b6:	f011 0f03 	tst.w	r1, #3
 80180ba:	d109      	bne.n	80180d0 <do_memp_free_pool+0x20>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 80180bc:	f004 fc2c 	bl	801c918 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80180c0:	68ab      	ldr	r3, [r5, #8]
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 80180c6:	68ab      	ldr	r3, [r5, #8]
 80180c8:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80180ca:	f004 fc31 	bl	801c930 <sys_arch_unprotect>
 80180ce:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 80180d0:	4b03      	ldr	r3, [pc, #12]	; (80180e0 <do_memp_free_pool+0x30>)
 80180d2:	f240 129d 	movw	r2, #413	; 0x19d
 80180d6:	4903      	ldr	r1, [pc, #12]	; (80180e4 <do_memp_free_pool+0x34>)
 80180d8:	4803      	ldr	r0, [pc, #12]	; (80180e8 <do_memp_free_pool+0x38>)
 80180da:	f007 fd08 	bl	801faee <iprintf>
 80180de:	e7ed      	b.n	80180bc <do_memp_free_pool+0xc>
 80180e0:	08025c80 	.word	0x08025c80
 80180e4:	08025c60 	.word	0x08025c60
 80180e8:	080214f0 	.word	0x080214f0

080180ec <memp_init_pool>:
  *desc->tab = NULL;
 80180ec:	6883      	ldr	r3, [r0, #8]
 80180ee:	2200      	movs	r2, #0
 80180f0:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80180f2:	6843      	ldr	r3, [r0, #4]
 80180f4:	3303      	adds	r3, #3
 80180f6:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 80180fa:	e007      	b.n	801810c <memp_init_pool+0x20>
    memp->next = *desc->tab;
 80180fc:	6881      	ldr	r1, [r0, #8]
 80180fe:	6809      	ldr	r1, [r1, #0]
 8018100:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8018102:	6881      	ldr	r1, [r0, #8]
 8018104:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8018106:	8801      	ldrh	r1, [r0, #0]
 8018108:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 801810a:	3201      	adds	r2, #1
 801810c:	8841      	ldrh	r1, [r0, #2]
 801810e:	428a      	cmp	r2, r1
 8018110:	dbf4      	blt.n	80180fc <memp_init_pool+0x10>
}
 8018112:	4770      	bx	lr

08018114 <memp_init>:
{
 8018114:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8018116:	2400      	movs	r4, #0
 8018118:	e006      	b.n	8018128 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 801811a:	4b05      	ldr	r3, [pc, #20]	; (8018130 <memp_init+0x1c>)
 801811c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018120:	f7ff ffe4 	bl	80180ec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8018124:	3401      	adds	r4, #1
 8018126:	b2a4      	uxth	r4, r4
 8018128:	2c0b      	cmp	r4, #11
 801812a:	d9f6      	bls.n	801811a <memp_init+0x6>
}
 801812c:	bd10      	pop	{r4, pc}
 801812e:	bf00      	nop
 8018130:	08025da0 	.word	0x08025da0

08018134 <memp_malloc>:
{
 8018134:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8018136:	280b      	cmp	r0, #11
 8018138:	d805      	bhi.n	8018146 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 801813a:	4b07      	ldr	r3, [pc, #28]	; (8018158 <memp_malloc+0x24>)
 801813c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018140:	f7ff ff92 	bl	8018068 <do_memp_malloc_pool>
}
 8018144:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8018146:	4b05      	ldr	r3, [pc, #20]	; (801815c <memp_malloc+0x28>)
 8018148:	f240 1287 	movw	r2, #391	; 0x187
 801814c:	4904      	ldr	r1, [pc, #16]	; (8018160 <memp_malloc+0x2c>)
 801814e:	4805      	ldr	r0, [pc, #20]	; (8018164 <memp_malloc+0x30>)
 8018150:	f007 fccd 	bl	801faee <iprintf>
 8018154:	2000      	movs	r0, #0
 8018156:	bd08      	pop	{r3, pc}
 8018158:	08025da0 	.word	0x08025da0
 801815c:	08025c80 	.word	0x08025c80
 8018160:	08025d80 	.word	0x08025d80
 8018164:	080214f0 	.word	0x080214f0

08018168 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8018168:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801816a:	280b      	cmp	r0, #11
 801816c:	d806      	bhi.n	801817c <memp_free+0x14>

  if (mem == NULL) {
 801816e:	b121      	cbz	r1, 801817a <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8018170:	4b06      	ldr	r3, [pc, #24]	; (801818c <memp_free+0x24>)
 8018172:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018176:	f7ff ff9b 	bl	80180b0 <do_memp_free_pool>
 801817a:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801817c:	4b04      	ldr	r3, [pc, #16]	; (8018190 <memp_free+0x28>)
 801817e:	f240 12db 	movw	r2, #475	; 0x1db
 8018182:	4904      	ldr	r1, [pc, #16]	; (8018194 <memp_free+0x2c>)
 8018184:	4804      	ldr	r0, [pc, #16]	; (8018198 <memp_free+0x30>)
 8018186:	f007 fcb2 	bl	801faee <iprintf>
 801818a:	bd08      	pop	{r3, pc}
 801818c:	08025da0 	.word	0x08025da0
 8018190:	08025c80 	.word	0x08025c80
 8018194:	08025d64 	.word	0x08025d64
 8018198:	080214f0 	.word	0x080214f0

0801819c <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801819c:	f011 0f01 	tst.w	r1, #1
 80181a0:	d00c      	beq.n	80181bc <netif_issue_reports+0x20>
{
 80181a2:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80181a4:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80181a6:	b123      	cbz	r3, 80181b2 <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80181a8:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80181ac:	f013 0f08 	tst.w	r3, #8
 80181b0:	d100      	bne.n	80181b4 <netif_issue_reports+0x18>
 80181b2:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 80181b4:	1d01      	adds	r1, r0, #4
 80181b6:	f7fe fb49 	bl	801684c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80181ba:	e7fa      	b.n	80181b2 <netif_issue_reports+0x16>
 80181bc:	4770      	bx	lr

080181be <netif_init>:
{
 80181be:	4770      	bx	lr

080181c0 <netif_set_ipaddr>:
{
 80181c0:	b530      	push	{r4, r5, lr}
 80181c2:	b083      	sub	sp, #12
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80181c4:	460d      	mov	r5, r1
 80181c6:	b199      	cbz	r1, 80181f0 <netif_set_ipaddr+0x30>
 80181c8:	680a      	ldr	r2, [r1, #0]
 80181ca:	9201      	str	r2, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80181cc:	6842      	ldr	r2, [r0, #4]
 80181ce:	9901      	ldr	r1, [sp, #4]
 80181d0:	4291      	cmp	r1, r2
 80181d2:	d00b      	beq.n	80181ec <netif_set_ipaddr+0x2c>
 80181d4:	4604      	mov	r4, r0
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80181d6:	a901      	add	r1, sp, #4
 80181d8:	3004      	adds	r0, #4
 80181da:	f001 fcaf 	bl	8019b3c <tcp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80181de:	b15d      	cbz	r5, 80181f8 <netif_set_ipaddr+0x38>
 80181e0:	682b      	ldr	r3, [r5, #0]
 80181e2:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80181e4:	2101      	movs	r1, #1
 80181e6:	4620      	mov	r0, r4
 80181e8:	f7ff ffd8 	bl	801819c <netif_issue_reports>
}
 80181ec:	b003      	add	sp, #12
 80181ee:	bd30      	pop	{r4, r5, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80181f0:	4a02      	ldr	r2, [pc, #8]	; (80181fc <netif_set_ipaddr+0x3c>)
 80181f2:	6812      	ldr	r2, [r2, #0]
 80181f4:	9201      	str	r2, [sp, #4]
 80181f6:	e7e9      	b.n	80181cc <netif_set_ipaddr+0xc>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80181f8:	2300      	movs	r3, #0
 80181fa:	e7f2      	b.n	80181e2 <netif_set_ipaddr+0x22>
 80181fc:	080258bc 	.word	0x080258bc

08018200 <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8018200:	b111      	cbz	r1, 8018208 <netif_set_gw+0x8>
 8018202:	680b      	ldr	r3, [r1, #0]
 8018204:	60c3      	str	r3, [r0, #12]
 8018206:	4770      	bx	lr
 8018208:	2300      	movs	r3, #0
 801820a:	e7fb      	b.n	8018204 <netif_set_gw+0x4>

0801820c <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801820c:	b111      	cbz	r1, 8018214 <netif_set_netmask+0x8>
 801820e:	680b      	ldr	r3, [r1, #0]
 8018210:	6083      	str	r3, [r0, #8]
 8018212:	4770      	bx	lr
 8018214:	2300      	movs	r3, #0
 8018216:	e7fb      	b.n	8018210 <netif_set_netmask+0x4>

08018218 <netif_set_addr>:
{
 8018218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801821a:	4604      	mov	r4, r0
 801821c:	4617      	mov	r7, r2
 801821e:	461e      	mov	r6, r3
  if (ip4_addr_isany(ipaddr)) {
 8018220:	460d      	mov	r5, r1
 8018222:	b109      	cbz	r1, 8018228 <netif_set_addr+0x10>
 8018224:	680b      	ldr	r3, [r1, #0]
 8018226:	b963      	cbnz	r3, 8018242 <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 8018228:	4629      	mov	r1, r5
 801822a:	4620      	mov	r0, r4
 801822c:	f7ff ffc8 	bl	80181c0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8018230:	4639      	mov	r1, r7
 8018232:	4620      	mov	r0, r4
 8018234:	f7ff ffea 	bl	801820c <netif_set_netmask>
    netif_set_gw(netif, gw);
 8018238:	4631      	mov	r1, r6
 801823a:	4620      	mov	r0, r4
 801823c:	f7ff ffe0 	bl	8018200 <netif_set_gw>
 8018240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 8018242:	4611      	mov	r1, r2
 8018244:	f7ff ffe2 	bl	801820c <netif_set_netmask>
    netif_set_gw(netif, gw);
 8018248:	4631      	mov	r1, r6
 801824a:	4620      	mov	r0, r4
 801824c:	f7ff ffd8 	bl	8018200 <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 8018250:	4629      	mov	r1, r5
 8018252:	4620      	mov	r0, r4
 8018254:	f7ff ffb4 	bl	80181c0 <netif_set_ipaddr>
 8018258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801825c <netif_add>:
{
 801825c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018260:	4604      	mov	r4, r0
 8018262:	460e      	mov	r6, r1
 8018264:	4617      	mov	r7, r2
 8018266:	4698      	mov	r8, r3
 8018268:	9d07      	ldr	r5, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 801826a:	b315      	cbz	r5, 80182b2 <netif_add+0x56>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801826c:	2300      	movs	r3, #0
 801826e:	6063      	str	r3, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8018270:	60a3      	str	r3, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8018272:	60e3      	str	r3, [r4, #12]
  netif->flags = 0;
 8018274:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8018278:	2303      	movs	r3, #3
 801827a:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 801827e:	9b06      	ldr	r3, [sp, #24]
 8018280:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8018282:	4a11      	ldr	r2, [pc, #68]	; (80182c8 <netif_add+0x6c>)
 8018284:	7813      	ldrb	r3, [r2, #0]
 8018286:	1c59      	adds	r1, r3, #1
 8018288:	7011      	strb	r1, [r2, #0]
 801828a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 801828e:	9b08      	ldr	r3, [sp, #32]
 8018290:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8018292:	4643      	mov	r3, r8
 8018294:	463a      	mov	r2, r7
 8018296:	4631      	mov	r1, r6
 8018298:	4620      	mov	r0, r4
 801829a:	f7ff ffbd 	bl	8018218 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801829e:	4620      	mov	r0, r4
 80182a0:	47a8      	blx	r5
 80182a2:	b968      	cbnz	r0, 80182c0 <netif_add+0x64>
  netif->next = netif_list;
 80182a4:	4b09      	ldr	r3, [pc, #36]	; (80182cc <netif_add+0x70>)
 80182a6:	681a      	ldr	r2, [r3, #0]
 80182a8:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80182aa:	601c      	str	r4, [r3, #0]
  return netif;
 80182ac:	4620      	mov	r0, r4
 80182ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 80182b2:	4b07      	ldr	r3, [pc, #28]	; (80182d0 <netif_add+0x74>)
 80182b4:	22fb      	movs	r2, #251	; 0xfb
 80182b6:	4907      	ldr	r1, [pc, #28]	; (80182d4 <netif_add+0x78>)
 80182b8:	4807      	ldr	r0, [pc, #28]	; (80182d8 <netif_add+0x7c>)
 80182ba:	f007 fc18 	bl	801faee <iprintf>
 80182be:	e7d5      	b.n	801826c <netif_add+0x10>
    return NULL;
 80182c0:	2000      	movs	r0, #0
}
 80182c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182c6:	bf00      	nop
 80182c8:	200102ac 	.word	0x200102ac
 80182cc:	20015cb4 	.word	0x20015cb4
 80182d0:	08025dd0 	.word	0x08025dd0
 80182d4:	08025e04 	.word	0x08025e04
 80182d8:	080214f0 	.word	0x080214f0

080182dc <netif_set_default>:
  netif_default = netif;
 80182dc:	4b01      	ldr	r3, [pc, #4]	; (80182e4 <netif_set_default+0x8>)
 80182de:	6018      	str	r0, [r3, #0]
 80182e0:	4770      	bx	lr
 80182e2:	bf00      	nop
 80182e4:	20015cb8 	.word	0x20015cb8

080182e8 <netif_set_up>:
{
 80182e8:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80182ea:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80182ee:	f013 0f01 	tst.w	r3, #1
 80182f2:	d106      	bne.n	8018302 <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 80182f4:	f043 0301 	orr.w	r3, r3, #1
 80182f8:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80182fc:	f013 0f04 	tst.w	r3, #4
 8018300:	d100      	bne.n	8018304 <netif_set_up+0x1c>
 8018302:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8018304:	2103      	movs	r1, #3
 8018306:	f7ff ff49 	bl	801819c <netif_issue_reports>
}
 801830a:	e7fa      	b.n	8018302 <netif_set_up+0x1a>

0801830c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801830c:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 801830e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8018312:	f013 0f01 	tst.w	r3, #1
 8018316:	d006      	beq.n	8018326 <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 8018318:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801831c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018320:	f013 0f08 	tst.w	r3, #8
 8018324:	d100      	bne.n	8018328 <netif_set_down+0x1c>
 8018326:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 8018328:	f7fe fa1c 	bl	8016764 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801832c:	e7fb      	b.n	8018326 <netif_set_down+0x1a>

0801832e <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801832e:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8018330:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8018334:	f013 0f04 	tst.w	r3, #4
 8018338:	d106      	bne.n	8018348 <netif_set_link_up+0x1a>
    netif->flags |= NETIF_FLAG_LINK_UP;
 801833a:	f043 0304 	orr.w	r3, r3, #4
 801833e:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8018342:	f013 0f01 	tst.w	r3, #1
 8018346:	d100      	bne.n	801834a <netif_set_link_up+0x1c>
 8018348:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 801834a:	2103      	movs	r1, #3
 801834c:	f7ff ff26 	bl	801819c <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  }
}
 8018350:	e7fa      	b.n	8018348 <netif_set_link_up+0x1a>

08018352 <netif_set_link_down>:
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8018352:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8018356:	f013 0f04 	tst.w	r3, #4
 801835a:	d003      	beq.n	8018364 <netif_set_link_down+0x12>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 801835c:	f023 0304 	bic.w	r3, r3, #4
 8018360:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
 8018364:	4770      	bx	lr
	...

08018368 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8018368:	b570      	push	{r4, r5, r6, lr}
 801836a:	460c      	mov	r4, r1
 801836c:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801836e:	4605      	mov	r5, r0
 8018370:	b1c0      	cbz	r0, 80183a4 <pbuf_header_impl+0x3c>
  if ((header_size_increment == 0) || (p == NULL)) {
 8018372:	2c00      	cmp	r4, #0
 8018374:	d04e      	beq.n	8018414 <pbuf_header_impl+0xac>
 8018376:	2d00      	cmp	r5, #0
 8018378:	d04e      	beq.n	8018418 <pbuf_header_impl+0xb0>
    return 0;
  }

  if (header_size_increment < 0) {
 801837a:	2c00      	cmp	r4, #0
 801837c:	db1a      	blt.n	80183b4 <pbuf_header_impl+0x4c>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 801837e:	b2a2      	uxth	r2, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8018380:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8018382:	6869      	ldr	r1, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8018384:	b32b      	cbz	r3, 80183d2 <pbuf_header_impl+0x6a>
 8018386:	2b03      	cmp	r3, #3
 8018388:	d023      	beq.n	80183d2 <pbuf_header_impl+0x6a>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801838a:	3b01      	subs	r3, #1
 801838c:	b29b      	uxth	r3, r3
 801838e:	2b01      	cmp	r3, #1
 8018390:	d837      	bhi.n	8018402 <pbuf_header_impl+0x9a>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8018392:	2c00      	cmp	r4, #0
 8018394:	db2f      	blt.n	80183f6 <pbuf_header_impl+0x8e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 8018396:	2c00      	cmp	r4, #0
 8018398:	dd40      	ble.n	801841c <pbuf_header_impl+0xb4>
 801839a:	2e00      	cmp	r6, #0
 801839c:	d040      	beq.n	8018420 <pbuf_header_impl+0xb8>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801839e:	1b09      	subs	r1, r1, r4
 80183a0:	6069      	str	r1, [r5, #4]
 80183a2:	e01c      	b.n	80183de <pbuf_header_impl+0x76>
  LWIP_ASSERT("p != NULL", p != NULL);
 80183a4:	4b1f      	ldr	r3, [pc, #124]	; (8018424 <pbuf_header_impl+0xbc>)
 80183a6:	f240 223f 	movw	r2, #575	; 0x23f
 80183aa:	491f      	ldr	r1, [pc, #124]	; (8018428 <pbuf_header_impl+0xc0>)
 80183ac:	481f      	ldr	r0, [pc, #124]	; (801842c <pbuf_header_impl+0xc4>)
 80183ae:	f007 fb9e 	bl	801faee <iprintf>
 80183b2:	e7de      	b.n	8018372 <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 80183b4:	b2a2      	uxth	r2, r4
 80183b6:	4252      	negs	r2, r2
 80183b8:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80183ba:	896b      	ldrh	r3, [r5, #10]
 80183bc:	429a      	cmp	r2, r3
 80183be:	d9df      	bls.n	8018380 <pbuf_header_impl+0x18>
 80183c0:	4b18      	ldr	r3, [pc, #96]	; (8018424 <pbuf_header_impl+0xbc>)
 80183c2:	f240 2247 	movw	r2, #583	; 0x247
 80183c6:	491a      	ldr	r1, [pc, #104]	; (8018430 <pbuf_header_impl+0xc8>)
 80183c8:	4818      	ldr	r0, [pc, #96]	; (801842c <pbuf_header_impl+0xc4>)
 80183ca:	f007 fb90 	bl	801faee <iprintf>
 80183ce:	2001      	movs	r0, #1
 80183d0:	bd70      	pop	{r4, r5, r6, pc}
    p->payload = (u8_t *)p->payload - header_size_increment;
 80183d2:	1b0b      	subs	r3, r1, r4
 80183d4:	606b      	str	r3, [r5, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80183d6:	f105 0210 	add.w	r2, r5, #16
 80183da:	4293      	cmp	r3, r2
 80183dc:	d308      	bcc.n	80183f0 <pbuf_header_impl+0x88>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80183de:	b2a4      	uxth	r4, r4
 80183e0:	896b      	ldrh	r3, [r5, #10]
 80183e2:	4423      	add	r3, r4
 80183e4:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 80183e6:	892b      	ldrh	r3, [r5, #8]
 80183e8:	441c      	add	r4, r3
 80183ea:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80183ec:	2000      	movs	r0, #0
 80183ee:	bd70      	pop	{r4, r5, r6, pc}
      p->payload = payload;
 80183f0:	6069      	str	r1, [r5, #4]
      return 1;
 80183f2:	2001      	movs	r0, #1
 80183f4:	bd70      	pop	{r4, r5, r6, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80183f6:	896b      	ldrh	r3, [r5, #10]
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d8cc      	bhi.n	8018396 <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80183fc:	1b09      	subs	r1, r1, r4
 80183fe:	6069      	str	r1, [r5, #4]
 8018400:	e7ed      	b.n	80183de <pbuf_header_impl+0x76>
    LWIP_ASSERT("bad pbuf type", 0);
 8018402:	4b08      	ldr	r3, [pc, #32]	; (8018424 <pbuf_header_impl+0xbc>)
 8018404:	f240 2277 	movw	r2, #631	; 0x277
 8018408:	490a      	ldr	r1, [pc, #40]	; (8018434 <pbuf_header_impl+0xcc>)
 801840a:	4808      	ldr	r0, [pc, #32]	; (801842c <pbuf_header_impl+0xc4>)
 801840c:	f007 fb6f 	bl	801faee <iprintf>
    return 1;
 8018410:	2001      	movs	r0, #1
 8018412:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8018414:	2000      	movs	r0, #0
 8018416:	bd70      	pop	{r4, r5, r6, pc}
 8018418:	2000      	movs	r0, #0
 801841a:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 801841c:	2001      	movs	r0, #1
 801841e:	bd70      	pop	{r4, r5, r6, pc}
 8018420:	2001      	movs	r0, #1
}
 8018422:	bd70      	pop	{r4, r5, r6, pc}
 8018424:	080260d4 	.word	0x080260d4
 8018428:	08021850 	.word	0x08021850
 801842c:	080214f0 	.word	0x080214f0
 8018430:	08026104 	.word	0x08026104
 8018434:	08026124 	.word	0x08026124

08018438 <pbuf_pool_is_empty>:
{
 8018438:	b510      	push	{r4, lr}
  SYS_ARCH_PROTECT(old_level);
 801843a:	f004 fa6d 	bl	801c918 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 801843e:	4b0c      	ldr	r3, [pc, #48]	; (8018470 <pbuf_pool_is_empty+0x38>)
 8018440:	781c      	ldrb	r4, [r3, #0]
 8018442:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 8018444:	2201      	movs	r2, #1
 8018446:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8018448:	f004 fa72 	bl	801c930 <sys_arch_unprotect>
  if (!queued) {
 801844c:	b104      	cbz	r4, 8018450 <pbuf_pool_is_empty+0x18>
 801844e:	bd10      	pop	{r4, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8018450:	2200      	movs	r2, #0
 8018452:	4611      	mov	r1, r2
 8018454:	4807      	ldr	r0, [pc, #28]	; (8018474 <pbuf_pool_is_empty+0x3c>)
 8018456:	f7fd fedf 	bl	8016218 <tcpip_callback_with_block>
 801845a:	2800      	cmp	r0, #0
 801845c:	d0f7      	beq.n	801844e <pbuf_pool_is_empty+0x16>
 801845e:	f004 fa5b 	bl	801c918 <sys_arch_protect>
 8018462:	2200      	movs	r2, #0
 8018464:	4b02      	ldr	r3, [pc, #8]	; (8018470 <pbuf_pool_is_empty+0x38>)
 8018466:	701a      	strb	r2, [r3, #0]
 8018468:	f004 fa62 	bl	801c930 <sys_arch_unprotect>
}
 801846c:	e7ef      	b.n	801844e <pbuf_pool_is_empty+0x16>
 801846e:	bf00      	nop
 8018470:	20015cbc 	.word	0x20015cbc
 8018474:	080184ad 	.word	0x080184ad

08018478 <pbuf_free_ooseq>:
{
 8018478:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801847a:	f004 fa4d 	bl	801c918 <sys_arch_protect>
 801847e:	2200      	movs	r2, #0
 8018480:	4b08      	ldr	r3, [pc, #32]	; (80184a4 <pbuf_free_ooseq+0x2c>)
 8018482:	701a      	strb	r2, [r3, #0]
 8018484:	f004 fa54 	bl	801c930 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018488:	4b07      	ldr	r3, [pc, #28]	; (80184a8 <pbuf_free_ooseq+0x30>)
 801848a:	681c      	ldr	r4, [r3, #0]
 801848c:	b144      	cbz	r4, 80184a0 <pbuf_free_ooseq+0x28>
    if (NULL != pcb->ooseq) {
 801848e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8018490:	b908      	cbnz	r0, 8018496 <pbuf_free_ooseq+0x1e>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018492:	68e4      	ldr	r4, [r4, #12]
 8018494:	e7fa      	b.n	801848c <pbuf_free_ooseq+0x14>
      tcp_segs_free(pcb->ooseq);
 8018496:	f000 fd44 	bl	8018f22 <tcp_segs_free>
      pcb->ooseq = NULL;
 801849a:	2300      	movs	r3, #0
 801849c:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 801849e:	bd10      	pop	{r4, pc}
 80184a0:	bd10      	pop	{r4, pc}
 80184a2:	bf00      	nop
 80184a4:	20015cbc 	.word	0x20015cbc
 80184a8:	20015cc4 	.word	0x20015cc4

080184ac <pbuf_free_ooseq_callback>:
{
 80184ac:	b508      	push	{r3, lr}
  pbuf_free_ooseq();
 80184ae:	f7ff ffe3 	bl	8018478 <pbuf_free_ooseq>
 80184b2:	bd08      	pop	{r3, pc}

080184b4 <pbuf_alloced_custom>:
{
 80184b4:	b570      	push	{r4, r5, r6, lr}
 80184b6:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 80184b8:	2804      	cmp	r0, #4
 80184ba:	d80a      	bhi.n	80184d2 <pbuf_alloced_custom+0x1e>
 80184bc:	e8df f000 	tbb	[pc, r0]
 80184c0:	05031412 	.word	0x05031412
 80184c4:	07          	.byte	0x07
 80184c5:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80184c6:	200e      	movs	r0, #14
    break;
 80184c8:	e00f      	b.n	80184ea <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80184ca:	2000      	movs	r0, #0
    break;
 80184cc:	e00d      	b.n	80184ea <pbuf_alloced_custom+0x36>
    offset = 0;
 80184ce:	2000      	movs	r0, #0
    break;
 80184d0:	e00b      	b.n	80184ea <pbuf_alloced_custom+0x36>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80184d2:	4b13      	ldr	r3, [pc, #76]	; (8018520 <pbuf_alloced_custom+0x6c>)
 80184d4:	f240 12c5 	movw	r2, #453	; 0x1c5
 80184d8:	4912      	ldr	r1, [pc, #72]	; (8018524 <pbuf_alloced_custom+0x70>)
 80184da:	4813      	ldr	r0, [pc, #76]	; (8018528 <pbuf_alloced_custom+0x74>)
 80184dc:	f007 fb07 	bl	801faee <iprintf>
    return NULL;
 80184e0:	2000      	movs	r0, #0
 80184e2:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80184e4:	2036      	movs	r0, #54	; 0x36
 80184e6:	e000      	b.n	80184ea <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80184e8:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80184ea:	3003      	adds	r0, #3
 80184ec:	f020 0003 	bic.w	r0, r0, #3
 80184f0:	180e      	adds	r6, r1, r0
 80184f2:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 80184f6:	42ae      	cmp	r6, r5
 80184f8:	d810      	bhi.n	801851c <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 80184fa:	2500      	movs	r5, #0
 80184fc:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 80184fe:	b154      	cbz	r4, 8018516 <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8018500:	4420      	add	r0, r4
 8018502:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8018504:	2002      	movs	r0, #2
 8018506:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8018508:	8119      	strh	r1, [r3, #8]
 801850a:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 801850c:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 801850e:	2201      	movs	r2, #1
 8018510:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8018512:	4618      	mov	r0, r3
 8018514:	bd70      	pop	{r4, r5, r6, pc}
    p->pbuf.payload = NULL;
 8018516:	2000      	movs	r0, #0
 8018518:	6058      	str	r0, [r3, #4]
 801851a:	e7f3      	b.n	8018504 <pbuf_alloced_custom+0x50>
    return NULL;
 801851c:	2000      	movs	r0, #0
}
 801851e:	bd70      	pop	{r4, r5, r6, pc}
 8018520:	080260d4 	.word	0x080260d4
 8018524:	08025f00 	.word	0x08025f00
 8018528:	080214f0 	.word	0x080214f0

0801852c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 801852c:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 801852e:	2200      	movs	r2, #0
 8018530:	f7ff ff1a 	bl	8018368 <pbuf_header_impl>
}
 8018534:	bd08      	pop	{r3, pc}

08018536 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8018536:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 8018538:	2201      	movs	r2, #1
 801853a:	f7ff ff15 	bl	8018368 <pbuf_header_impl>
}
 801853e:	bd08      	pop	{r3, pc}

08018540 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8018540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8018542:	b128      	cbz	r0, 8018550 <pbuf_free+0x10>
 8018544:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8018546:	7b03      	ldrb	r3, [r0, #12]
 8018548:	2b03      	cmp	r3, #3
 801854a:	d80b      	bhi.n	8018564 <pbuf_free+0x24>
{
 801854c:	2600      	movs	r6, #0
 801854e:	e01f      	b.n	8018590 <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 8018550:	4b2b      	ldr	r3, [pc, #172]	; (8018600 <pbuf_free+0xc0>)
 8018552:	f240 22d2 	movw	r2, #722	; 0x2d2
 8018556:	492b      	ldr	r1, [pc, #172]	; (8018604 <pbuf_free+0xc4>)
 8018558:	482b      	ldr	r0, [pc, #172]	; (8018608 <pbuf_free+0xc8>)
 801855a:	f007 fac8 	bl	801faee <iprintf>
    return 0;
 801855e:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8018560:	4630      	mov	r0, r6
 8018562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8018564:	4b26      	ldr	r3, [pc, #152]	; (8018600 <pbuf_free+0xc0>)
 8018566:	f240 22de 	movw	r2, #734	; 0x2de
 801856a:	4928      	ldr	r1, [pc, #160]	; (801860c <pbuf_free+0xcc>)
 801856c:	4826      	ldr	r0, [pc, #152]	; (8018608 <pbuf_free+0xc8>)
 801856e:	f007 fabe 	bl	801faee <iprintf>
 8018572:	e7eb      	b.n	801854c <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018574:	4b22      	ldr	r3, [pc, #136]	; (8018600 <pbuf_free+0xc0>)
 8018576:	f240 22eb 	movw	r2, #747	; 0x2eb
 801857a:	4925      	ldr	r1, [pc, #148]	; (8018610 <pbuf_free+0xd0>)
 801857c:	4822      	ldr	r0, [pc, #136]	; (8018608 <pbuf_free+0xc8>)
 801857e:	f007 fab6 	bl	801faee <iprintf>
 8018582:	e00d      	b.n	80185a0 <pbuf_free+0x60>
        pc->custom_free_function(p);
 8018584:	6923      	ldr	r3, [r4, #16]
 8018586:	4620      	mov	r0, r4
 8018588:	4798      	blx	r3
      count++;
 801858a:	3601      	adds	r6, #1
 801858c:	b2f6      	uxtb	r6, r6
      p = q;
 801858e:	462c      	mov	r4, r5
  while (p != NULL) {
 8018590:	2c00      	cmp	r4, #0
 8018592:	d0e5      	beq.n	8018560 <pbuf_free+0x20>
    SYS_ARCH_PROTECT(old_level);
 8018594:	f004 f9c0 	bl	801c918 <sys_arch_protect>
 8018598:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801859a:	89e3      	ldrh	r3, [r4, #14]
 801859c:	2b00      	cmp	r3, #0
 801859e:	d0e9      	beq.n	8018574 <pbuf_free+0x34>
    ref = --(p->ref);
 80185a0:	89e5      	ldrh	r5, [r4, #14]
 80185a2:	3d01      	subs	r5, #1
 80185a4:	b2ad      	uxth	r5, r5
 80185a6:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80185a8:	4638      	mov	r0, r7
 80185aa:	f004 f9c1 	bl	801c930 <sys_arch_unprotect>
    if (ref == 0) {
 80185ae:	bb25      	cbnz	r5, 80185fa <pbuf_free+0xba>
      q = p->next;
 80185b0:	6825      	ldr	r5, [r4, #0]
      type = p->type;
 80185b2:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80185b4:	7b62      	ldrb	r2, [r4, #13]
 80185b6:	f012 0f02 	tst.w	r2, #2
 80185ba:	d00a      	beq.n	80185d2 <pbuf_free+0x92>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80185bc:	6923      	ldr	r3, [r4, #16]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d1e0      	bne.n	8018584 <pbuf_free+0x44>
 80185c2:	4b0f      	ldr	r3, [pc, #60]	; (8018600 <pbuf_free+0xc0>)
 80185c4:	f240 22f9 	movw	r2, #761	; 0x2f9
 80185c8:	4912      	ldr	r1, [pc, #72]	; (8018614 <pbuf_free+0xd4>)
 80185ca:	480f      	ldr	r0, [pc, #60]	; (8018608 <pbuf_free+0xc8>)
 80185cc:	f007 fa8f 	bl	801faee <iprintf>
 80185d0:	e7d8      	b.n	8018584 <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 80185d2:	2b03      	cmp	r3, #3
 80185d4:	d007      	beq.n	80185e6 <pbuf_free+0xa6>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80185d6:	3b01      	subs	r3, #1
 80185d8:	b29b      	uxth	r3, r3
 80185da:	2b01      	cmp	r3, #1
 80185dc:	d908      	bls.n	80185f0 <pbuf_free+0xb0>
          mem_free(p);
 80185de:	4620      	mov	r0, r4
 80185e0:	f7ff fb9e 	bl	8017d20 <mem_free>
 80185e4:	e7d1      	b.n	801858a <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 80185e6:	4621      	mov	r1, r4
 80185e8:	200b      	movs	r0, #11
 80185ea:	f7ff fdbd 	bl	8018168 <memp_free>
 80185ee:	e7cc      	b.n	801858a <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 80185f0:	4621      	mov	r1, r4
 80185f2:	200a      	movs	r0, #10
 80185f4:	f7ff fdb8 	bl	8018168 <memp_free>
 80185f8:	e7c7      	b.n	801858a <pbuf_free+0x4a>
      p = NULL;
 80185fa:	2400      	movs	r4, #0
 80185fc:	e7c8      	b.n	8018590 <pbuf_free+0x50>
 80185fe:	bf00      	nop
 8018600:	080260d4 	.word	0x080260d4
 8018604:	08021850 	.word	0x08021850
 8018608:	080214f0 	.word	0x080214f0
 801860c:	08026080 	.word	0x08026080
 8018610:	08026098 	.word	0x08026098
 8018614:	080260b0 	.word	0x080260b0

08018618 <pbuf_alloc>:
{
 8018618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801861c:	460d      	mov	r5, r1
 801861e:	4617      	mov	r7, r2
  switch (layer) {
 8018620:	2804      	cmp	r0, #4
 8018622:	d80a      	bhi.n	801863a <pbuf_alloc+0x22>
 8018624:	e8df f000 	tbb	[pc, r0]
 8018628:	05031412 	.word	0x05031412
 801862c:	07          	.byte	0x07
 801862d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801862e:	240e      	movs	r4, #14
    break;
 8018630:	e00f      	b.n	8018652 <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8018632:	2400      	movs	r4, #0
    break;
 8018634:	e00d      	b.n	8018652 <pbuf_alloc+0x3a>
    offset = 0;
 8018636:	2400      	movs	r4, #0
    break;
 8018638:	e00b      	b.n	8018652 <pbuf_alloc+0x3a>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 801863a:	4b64      	ldr	r3, [pc, #400]	; (80187cc <pbuf_alloc+0x1b4>)
 801863c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8018640:	4963      	ldr	r1, [pc, #396]	; (80187d0 <pbuf_alloc+0x1b8>)
 8018642:	4864      	ldr	r0, [pc, #400]	; (80187d4 <pbuf_alloc+0x1bc>)
 8018644:	f007 fa53 	bl	801faee <iprintf>
    return NULL;
 8018648:	2600      	movs	r6, #0
 801864a:	e0b1      	b.n	80187b0 <pbuf_alloc+0x198>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801864c:	2436      	movs	r4, #54	; 0x36
 801864e:	e000      	b.n	8018652 <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8018650:	2422      	movs	r4, #34	; 0x22
  switch (type) {
 8018652:	2f03      	cmp	r7, #3
 8018654:	f200 80af 	bhi.w	80187b6 <pbuf_alloc+0x19e>
 8018658:	e8df f007 	tbb	[pc, r7]
 801865c:	029b9b7b 	.word	0x029b9b7b
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8018660:	200b      	movs	r0, #11
 8018662:	f7ff fd67 	bl	8018134 <memp_malloc>
    if (p == NULL) {
 8018666:	4606      	mov	r6, r0
 8018668:	b1f8      	cbz	r0, 80186aa <pbuf_alloc+0x92>
    p->type = type;
 801866a:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 801866c:	2300      	movs	r3, #0
 801866e:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8018670:	f104 0310 	add.w	r3, r4, #16
 8018674:	4403      	add	r3, r0
 8018676:	3303      	adds	r3, #3
 8018678:	f023 0303 	bic.w	r3, r3, #3
 801867c:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 801867e:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8018680:	1ce2      	adds	r2, r4, #3
 8018682:	f022 0203 	bic.w	r2, r2, #3
 8018686:	f5c2 7242 	rsb	r2, r2, #776	; 0x308
 801868a:	42aa      	cmp	r2, r5
 801868c:	bf28      	it	cs
 801868e:	462a      	movcs	r2, r5
 8018690:	b292      	uxth	r2, r2
 8018692:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8018694:	4413      	add	r3, r2
 8018696:	f500 7846 	add.w	r8, r0, #792	; 0x318
 801869a:	4543      	cmp	r3, r8
 801869c:	d808      	bhi.n	80186b0 <pbuf_alloc+0x98>
    p->ref = 1;
 801869e:	2301      	movs	r3, #1
 80186a0:	81f3      	strh	r3, [r6, #14]
    rem_len = length - p->len;
 80186a2:	8973      	ldrh	r3, [r6, #10]
 80186a4:	1aed      	subs	r5, r5, r3
    r = p;
 80186a6:	46b1      	mov	r9, r6
    while (rem_len > 0) {
 80186a8:	e026      	b.n	80186f8 <pbuf_alloc+0xe0>
      PBUF_POOL_IS_EMPTY();
 80186aa:	f7ff fec5 	bl	8018438 <pbuf_pool_is_empty>
      return NULL;
 80186ae:	e07f      	b.n	80187b0 <pbuf_alloc+0x198>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80186b0:	4b46      	ldr	r3, [pc, #280]	; (80187cc <pbuf_alloc+0x1b4>)
 80186b2:	f44f 7298 	mov.w	r2, #304	; 0x130
 80186b6:	4948      	ldr	r1, [pc, #288]	; (80187d8 <pbuf_alloc+0x1c0>)
 80186b8:	4846      	ldr	r0, [pc, #280]	; (80187d4 <pbuf_alloc+0x1bc>)
 80186ba:	f007 fa18 	bl	801faee <iprintf>
 80186be:	e7ee      	b.n	801869e <pbuf_alloc+0x86>
        PBUF_POOL_IS_EMPTY();
 80186c0:	f7ff feba 	bl	8018438 <pbuf_pool_is_empty>
        pbuf_free(p);
 80186c4:	4630      	mov	r0, r6
 80186c6:	f7ff ff3b 	bl	8018540 <pbuf_free>
        return NULL;
 80186ca:	4626      	mov	r6, r4
 80186cc:	e070      	b.n	80187b0 <pbuf_alloc+0x198>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80186ce:	4b3f      	ldr	r3, [pc, #252]	; (80187cc <pbuf_alloc+0x1b4>)
 80186d0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80186d4:	4941      	ldr	r1, [pc, #260]	; (80187dc <pbuf_alloc+0x1c4>)
 80186d6:	483f      	ldr	r0, [pc, #252]	; (80187d4 <pbuf_alloc+0x1bc>)
 80186d8:	f007 fa09 	bl	801faee <iprintf>
 80186dc:	e01e      	b.n	801871c <pbuf_alloc+0x104>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80186de:	4b3b      	ldr	r3, [pc, #236]	; (80187cc <pbuf_alloc+0x1b4>)
 80186e0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80186e4:	493e      	ldr	r1, [pc, #248]	; (80187e0 <pbuf_alloc+0x1c8>)
 80186e6:	483b      	ldr	r0, [pc, #236]	; (80187d4 <pbuf_alloc+0x1bc>)
 80186e8:	f007 fa01 	bl	801faee <iprintf>
 80186ec:	e024      	b.n	8018738 <pbuf_alloc+0x120>
      q->ref = 1;
 80186ee:	2301      	movs	r3, #1
 80186f0:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 80186f2:	8963      	ldrh	r3, [r4, #10]
 80186f4:	1aed      	subs	r5, r5, r3
      r = q;
 80186f6:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 80186f8:	2d00      	cmp	r5, #0
 80186fa:	dd55      	ble.n	80187a8 <pbuf_alloc+0x190>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80186fc:	200b      	movs	r0, #11
 80186fe:	f7ff fd19 	bl	8018134 <memp_malloc>
      if (q == NULL) {
 8018702:	4604      	mov	r4, r0
 8018704:	2800      	cmp	r0, #0
 8018706:	d0db      	beq.n	80186c0 <pbuf_alloc+0xa8>
      q->type = type;
 8018708:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 801870a:	2300      	movs	r3, #0
 801870c:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 801870e:	6003      	str	r3, [r0, #0]
      r->next = q;
 8018710:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8018714:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8018718:	429d      	cmp	r5, r3
 801871a:	dcd8      	bgt.n	80186ce <pbuf_alloc+0xb6>
      q->tot_len = (u16_t)rem_len;
 801871c:	b2ab      	uxth	r3, r5
 801871e:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8018720:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 8018724:	bf28      	it	cs
 8018726:	f44f 7342 	movcs.w	r3, #776	; 0x308
 801872a:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 801872c:	f104 0310 	add.w	r3, r4, #16
 8018730:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8018732:	f013 0f03 	tst.w	r3, #3
 8018736:	d1d2      	bne.n	80186de <pbuf_alloc+0xc6>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8018738:	6873      	ldr	r3, [r6, #4]
 801873a:	8972      	ldrh	r2, [r6, #10]
 801873c:	4413      	add	r3, r2
 801873e:	4598      	cmp	r8, r3
 8018740:	d2d5      	bcs.n	80186ee <pbuf_alloc+0xd6>
 8018742:	4b22      	ldr	r3, [pc, #136]	; (80187cc <pbuf_alloc+0x1b4>)
 8018744:	f240 1255 	movw	r2, #341	; 0x155
 8018748:	4923      	ldr	r1, [pc, #140]	; (80187d8 <pbuf_alloc+0x1c0>)
 801874a:	4822      	ldr	r0, [pc, #136]	; (80187d4 <pbuf_alloc+0x1bc>)
 801874c:	f007 f9cf 	bl	801faee <iprintf>
 8018750:	e7cd      	b.n	80186ee <pbuf_alloc+0xd6>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8018752:	f104 0013 	add.w	r0, r4, #19
 8018756:	f020 0003 	bic.w	r0, r0, #3
 801875a:	b283      	uxth	r3, r0
 801875c:	1cea      	adds	r2, r5, #3
 801875e:	b290      	uxth	r0, r2
 8018760:	f020 0003 	bic.w	r0, r0, #3
 8018764:	4418      	add	r0, r3
 8018766:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8018768:	f022 0203 	bic.w	r2, r2, #3
 801876c:	4290      	cmp	r0, r2
 801876e:	d32b      	bcc.n	80187c8 <pbuf_alloc+0x1b0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8018770:	f7ff fbd0 	bl	8017f14 <mem_malloc>
    if (p == NULL) {
 8018774:	4606      	mov	r6, r0
 8018776:	b1d8      	cbz	r0, 80187b0 <pbuf_alloc+0x198>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8018778:	f104 0310 	add.w	r3, r4, #16
 801877c:	4403      	add	r3, r0
 801877e:	3303      	adds	r3, #3
 8018780:	f023 0303 	bic.w	r3, r3, #3
 8018784:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8018786:	8105      	strh	r5, [r0, #8]
 8018788:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 801878a:	2300      	movs	r3, #0
 801878c:	6003      	str	r3, [r0, #0]
    p->type = type;
 801878e:	7307      	strb	r7, [r0, #12]
 8018790:	e00a      	b.n	80187a8 <pbuf_alloc+0x190>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8018792:	200a      	movs	r0, #10
 8018794:	f7ff fcce 	bl	8018134 <memp_malloc>
    if (p == NULL) {
 8018798:	4606      	mov	r6, r0
 801879a:	b148      	cbz	r0, 80187b0 <pbuf_alloc+0x198>
    p->payload = NULL;
 801879c:	2300      	movs	r3, #0
 801879e:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80187a0:	8105      	strh	r5, [r0, #8]
 80187a2:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 80187a4:	6003      	str	r3, [r0, #0]
    p->type = type;
 80187a6:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 80187a8:	2301      	movs	r3, #1
 80187aa:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
 80187ac:	2300      	movs	r3, #0
 80187ae:	7373      	strb	r3, [r6, #13]
}
 80187b0:	4630      	mov	r0, r6
 80187b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80187b6:	4b05      	ldr	r3, [pc, #20]	; (80187cc <pbuf_alloc+0x1b4>)
 80187b8:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80187bc:	4909      	ldr	r1, [pc, #36]	; (80187e4 <pbuf_alloc+0x1cc>)
 80187be:	4805      	ldr	r0, [pc, #20]	; (80187d4 <pbuf_alloc+0x1bc>)
 80187c0:	f007 f995 	bl	801faee <iprintf>
    return NULL;
 80187c4:	2600      	movs	r6, #0
 80187c6:	e7f3      	b.n	80187b0 <pbuf_alloc+0x198>
        return NULL;
 80187c8:	2600      	movs	r6, #0
 80187ca:	e7f1      	b.n	80187b0 <pbuf_alloc+0x198>
 80187cc:	080260d4 	.word	0x080260d4
 80187d0:	08025e1c 	.word	0x08025e1c
 80187d4:	080214f0 	.word	0x080214f0
 80187d8:	08025e38 	.word	0x08025e38
 80187dc:	08025ea0 	.word	0x08025ea0
 80187e0:	08025eb4 	.word	0x08025eb4
 80187e4:	08025ee4 	.word	0x08025ee4

080187e8 <pbuf_realloc>:
{
 80187e8:	b570      	push	{r4, r5, r6, lr}
 80187ea:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80187ec:	4604      	mov	r4, r0
 80187ee:	b198      	cbz	r0, 8018818 <pbuf_realloc+0x30>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80187f0:	7b23      	ldrb	r3, [r4, #12]
 80187f2:	2b03      	cmp	r3, #3
 80187f4:	d00b      	beq.n	801880e <pbuf_realloc+0x26>
 80187f6:	2b01      	cmp	r3, #1
 80187f8:	d009      	beq.n	801880e <pbuf_realloc+0x26>
 80187fa:	b143      	cbz	r3, 801880e <pbuf_realloc+0x26>
 80187fc:	2b02      	cmp	r3, #2
 80187fe:	d006      	beq.n	801880e <pbuf_realloc+0x26>
 8018800:	4b2b      	ldr	r3, [pc, #172]	; (80188b0 <pbuf_realloc+0xc8>)
 8018802:	f240 12f7 	movw	r2, #503	; 0x1f7
 8018806:	492b      	ldr	r1, [pc, #172]	; (80188b4 <pbuf_realloc+0xcc>)
 8018808:	482b      	ldr	r0, [pc, #172]	; (80188b8 <pbuf_realloc+0xd0>)
 801880a:	f007 f970 	bl	801faee <iprintf>
  if (new_len >= p->tot_len) {
 801880e:	8926      	ldrh	r6, [r4, #8]
 8018810:	42ae      	cmp	r6, r5
 8018812:	d938      	bls.n	8018886 <pbuf_realloc+0x9e>
  grow = new_len - p->tot_len;
 8018814:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 8018816:	e00d      	b.n	8018834 <pbuf_realloc+0x4c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018818:	4b25      	ldr	r3, [pc, #148]	; (80188b0 <pbuf_realloc+0xc8>)
 801881a:	f240 12f3 	movw	r2, #499	; 0x1f3
 801881e:	4927      	ldr	r1, [pc, #156]	; (80188bc <pbuf_realloc+0xd4>)
 8018820:	4825      	ldr	r0, [pc, #148]	; (80188b8 <pbuf_realloc+0xd0>)
 8018822:	f007 f964 	bl	801faee <iprintf>
 8018826:	e7e3      	b.n	80187f0 <pbuf_realloc+0x8>
    q->tot_len += (u16_t)grow;
 8018828:	8923      	ldrh	r3, [r4, #8]
 801882a:	fa13 f386 	uxtah	r3, r3, r6
 801882e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8018830:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018832:	b184      	cbz	r4, 8018856 <pbuf_realloc+0x6e>
  while (rem_len > q->len) {
 8018834:	8961      	ldrh	r1, [r4, #10]
 8018836:	428d      	cmp	r5, r1
 8018838:	d915      	bls.n	8018866 <pbuf_realloc+0x7e>
    rem_len -= q->len;
 801883a:	1a69      	subs	r1, r5, r1
 801883c:	b28d      	uxth	r5, r1
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 801883e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8018842:	429e      	cmp	r6, r3
 8018844:	ddf0      	ble.n	8018828 <pbuf_realloc+0x40>
 8018846:	4b1a      	ldr	r3, [pc, #104]	; (80188b0 <pbuf_realloc+0xc8>)
 8018848:	f240 220b 	movw	r2, #523	; 0x20b
 801884c:	491c      	ldr	r1, [pc, #112]	; (80188c0 <pbuf_realloc+0xd8>)
 801884e:	481a      	ldr	r0, [pc, #104]	; (80188b8 <pbuf_realloc+0xd0>)
 8018850:	f007 f94d 	bl	801faee <iprintf>
 8018854:	e7e8      	b.n	8018828 <pbuf_realloc+0x40>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018856:	4b16      	ldr	r3, [pc, #88]	; (80188b0 <pbuf_realloc+0xc8>)
 8018858:	f240 220f 	movw	r2, #527	; 0x20f
 801885c:	4919      	ldr	r1, [pc, #100]	; (80188c4 <pbuf_realloc+0xdc>)
 801885e:	4816      	ldr	r0, [pc, #88]	; (80188b8 <pbuf_realloc+0xd0>)
 8018860:	f007 f945 	bl	801faee <iprintf>
 8018864:	e7e6      	b.n	8018834 <pbuf_realloc+0x4c>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8018866:	7b23      	ldrb	r3, [r4, #12]
 8018868:	b92b      	cbnz	r3, 8018876 <pbuf_realloc+0x8e>
 801886a:	428d      	cmp	r5, r1
 801886c:	d003      	beq.n	8018876 <pbuf_realloc+0x8e>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801886e:	7b63      	ldrb	r3, [r4, #13]
 8018870:	f013 0f02 	tst.w	r3, #2
 8018874:	d008      	beq.n	8018888 <pbuf_realloc+0xa0>
  q->len = rem_len;
 8018876:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8018878:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 801887a:	6820      	ldr	r0, [r4, #0]
 801887c:	b108      	cbz	r0, 8018882 <pbuf_realloc+0x9a>
    pbuf_free(q->next);
 801887e:	f7ff fe5f 	bl	8018540 <pbuf_free>
  q->next = NULL;
 8018882:	2300      	movs	r3, #0
 8018884:	6023      	str	r3, [r4, #0]
 8018886:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8018888:	6863      	ldr	r3, [r4, #4]
 801888a:	1b1b      	subs	r3, r3, r4
 801888c:	fa15 f183 	uxtah	r1, r5, r3
 8018890:	b289      	uxth	r1, r1
 8018892:	4620      	mov	r0, r4
 8018894:	f7ff faa2 	bl	8017ddc <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8018898:	4604      	mov	r4, r0
 801889a:	2800      	cmp	r0, #0
 801889c:	d1eb      	bne.n	8018876 <pbuf_realloc+0x8e>
 801889e:	4b04      	ldr	r3, [pc, #16]	; (80188b0 <pbuf_realloc+0xc8>)
 80188a0:	f240 221d 	movw	r2, #541	; 0x21d
 80188a4:	4908      	ldr	r1, [pc, #32]	; (80188c8 <pbuf_realloc+0xe0>)
 80188a6:	4804      	ldr	r0, [pc, #16]	; (80188b8 <pbuf_realloc+0xd0>)
 80188a8:	f007 f921 	bl	801faee <iprintf>
 80188ac:	e7e3      	b.n	8018876 <pbuf_realloc+0x8e>
 80188ae:	bf00      	nop
 80188b0:	080260d4 	.word	0x080260d4
 80188b4:	0802614c 	.word	0x0802614c
 80188b8:	080214f0 	.word	0x080214f0
 80188bc:	08026134 	.word	0x08026134
 80188c0:	08026168 	.word	0x08026168
 80188c4:	0802617c 	.word	0x0802617c
 80188c8:	08026194 	.word	0x08026194

080188cc <pbuf_clen>:
u16_t
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
 80188cc:	2300      	movs	r3, #0
  while (p != NULL) {
 80188ce:	e002      	b.n	80188d6 <pbuf_clen+0xa>
    ++len;
 80188d0:	3301      	adds	r3, #1
 80188d2:	b29b      	uxth	r3, r3
    p = p->next;
 80188d4:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 80188d6:	2800      	cmp	r0, #0
 80188d8:	d1fa      	bne.n	80188d0 <pbuf_clen+0x4>
  }
  return len;
}
 80188da:	4618      	mov	r0, r3
 80188dc:	4770      	bx	lr
	...

080188e0 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 80188e0:	b198      	cbz	r0, 801890a <pbuf_ref+0x2a>
{
 80188e2:	b510      	push	{r4, lr}
 80188e4:	4604      	mov	r4, r0
    SYS_ARCH_INC(p->ref, 1);
 80188e6:	f004 f817 	bl	801c918 <sys_arch_protect>
 80188ea:	89e3      	ldrh	r3, [r4, #14]
 80188ec:	3301      	adds	r3, #1
 80188ee:	81e3      	strh	r3, [r4, #14]
 80188f0:	f004 f81e 	bl	801c930 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80188f4:	89e3      	ldrh	r3, [r4, #14]
 80188f6:	b103      	cbz	r3, 80188fa <pbuf_ref+0x1a>
 80188f8:	bd10      	pop	{r4, pc}
 80188fa:	4b04      	ldr	r3, [pc, #16]	; (801890c <pbuf_ref+0x2c>)
 80188fc:	f240 3239 	movw	r2, #825	; 0x339
 8018900:	4903      	ldr	r1, [pc, #12]	; (8018910 <pbuf_ref+0x30>)
 8018902:	4804      	ldr	r0, [pc, #16]	; (8018914 <pbuf_ref+0x34>)
 8018904:	f007 f8f3 	bl	801faee <iprintf>
  }
}
 8018908:	e7f6      	b.n	80188f8 <pbuf_ref+0x18>
 801890a:	4770      	bx	lr
 801890c:	080260d4 	.word	0x080260d4
 8018910:	080261b0 	.word	0x080261b0
 8018914:	080214f0 	.word	0x080214f0

08018918 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8018918:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801891a:	b110      	cbz	r0, 8018922 <pbuf_cat+0xa>
 801891c:	460d      	mov	r5, r1
 801891e:	4604      	mov	r4, r0
 8018920:	b961      	cbnz	r1, 801893c <pbuf_cat+0x24>
 8018922:	4b15      	ldr	r3, [pc, #84]	; (8018978 <pbuf_cat+0x60>)
 8018924:	f240 324d 	movw	r2, #845	; 0x34d
 8018928:	4914      	ldr	r1, [pc, #80]	; (801897c <pbuf_cat+0x64>)
 801892a:	4815      	ldr	r0, [pc, #84]	; (8018980 <pbuf_cat+0x68>)
 801892c:	f007 f8df 	bl	801faee <iprintf>
 8018930:	bd38      	pop	{r3, r4, r5, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8018932:	892b      	ldrh	r3, [r5, #8]
 8018934:	8921      	ldrh	r1, [r4, #8]
 8018936:	440b      	add	r3, r1
 8018938:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801893a:	4614      	mov	r4, r2
 801893c:	6822      	ldr	r2, [r4, #0]
 801893e:	2a00      	cmp	r2, #0
 8018940:	d1f7      	bne.n	8018932 <pbuf_cat+0x1a>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8018942:	8922      	ldrh	r2, [r4, #8]
 8018944:	8963      	ldrh	r3, [r4, #10]
 8018946:	429a      	cmp	r2, r3
 8018948:	d006      	beq.n	8018958 <pbuf_cat+0x40>
 801894a:	4b0b      	ldr	r3, [pc, #44]	; (8018978 <pbuf_cat+0x60>)
 801894c:	f240 3255 	movw	r2, #853	; 0x355
 8018950:	490c      	ldr	r1, [pc, #48]	; (8018984 <pbuf_cat+0x6c>)
 8018952:	480b      	ldr	r0, [pc, #44]	; (8018980 <pbuf_cat+0x68>)
 8018954:	f007 f8cb 	bl	801faee <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8018958:	6823      	ldr	r3, [r4, #0]
 801895a:	b133      	cbz	r3, 801896a <pbuf_cat+0x52>
 801895c:	4b06      	ldr	r3, [pc, #24]	; (8018978 <pbuf_cat+0x60>)
 801895e:	f240 3256 	movw	r2, #854	; 0x356
 8018962:	4909      	ldr	r1, [pc, #36]	; (8018988 <pbuf_cat+0x70>)
 8018964:	4806      	ldr	r0, [pc, #24]	; (8018980 <pbuf_cat+0x68>)
 8018966:	f007 f8c2 	bl	801faee <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 801896a:	892b      	ldrh	r3, [r5, #8]
 801896c:	8922      	ldrh	r2, [r4, #8]
 801896e:	4413      	add	r3, r2
 8018970:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8018972:	6025      	str	r5, [r4, #0]
 8018974:	bd38      	pop	{r3, r4, r5, pc}
 8018976:	bf00      	nop
 8018978:	080260d4 	.word	0x080260d4
 801897c:	08025f24 	.word	0x08025f24
 8018980:	080214f0 	.word	0x080214f0
 8018984:	08025f5c 	.word	0x08025f5c
 8018988:	08025f8c 	.word	0x08025f8c

0801898c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8018990:	b150      	cbz	r0, 80189a8 <pbuf_copy+0x1c>
 8018992:	460d      	mov	r5, r1
 8018994:	4607      	mov	r7, r0
 8018996:	b139      	cbz	r1, 80189a8 <pbuf_copy+0x1c>
 8018998:	8902      	ldrh	r2, [r0, #8]
 801899a:	890b      	ldrh	r3, [r1, #8]
 801899c:	429a      	cmp	r2, r3
 801899e:	d303      	bcc.n	80189a8 <pbuf_copy+0x1c>
 80189a0:	f04f 0800 	mov.w	r8, #0
 80189a4:	4646      	mov	r6, r8
 80189a6:	e02c      	b.n	8018a02 <pbuf_copy+0x76>
 80189a8:	4b3f      	ldr	r3, [pc, #252]	; (8018aa8 <pbuf_copy+0x11c>)
 80189aa:	f240 32bd 	movw	r2, #957	; 0x3bd
 80189ae:	493f      	ldr	r1, [pc, #252]	; (8018aac <pbuf_copy+0x120>)
 80189b0:	483f      	ldr	r0, [pc, #252]	; (8018ab0 <pbuf_copy+0x124>)
 80189b2:	f007 f89c 	bl	801faee <iprintf>
 80189b6:	f06f 000f 	mvn.w	r0, #15
 80189ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80189be:	1b9b      	subs	r3, r3, r6
 80189c0:	b29c      	uxth	r4, r3
 80189c2:	e026      	b.n	8018a12 <pbuf_copy+0x86>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80189c4:	4b38      	ldr	r3, [pc, #224]	; (8018aa8 <pbuf_copy+0x11c>)
 80189c6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80189ca:	493a      	ldr	r1, [pc, #232]	; (8018ab4 <pbuf_copy+0x128>)
 80189cc:	4838      	ldr	r0, [pc, #224]	; (8018ab0 <pbuf_copy+0x124>)
 80189ce:	f007 f88e 	bl	801faee <iprintf>
 80189d2:	e02d      	b.n	8018a30 <pbuf_copy+0xa4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80189d4:	4b34      	ldr	r3, [pc, #208]	; (8018aa8 <pbuf_copy+0x11c>)
 80189d6:	f240 32ce 	movw	r2, #974	; 0x3ce
 80189da:	4937      	ldr	r1, [pc, #220]	; (8018ab8 <pbuf_copy+0x12c>)
 80189dc:	4834      	ldr	r0, [pc, #208]	; (8018ab0 <pbuf_copy+0x124>)
 80189de:	f007 f886 	bl	801faee <iprintf>
 80189e2:	e028      	b.n	8018a36 <pbuf_copy+0xaa>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 80189e4:	897b      	ldrh	r3, [r7, #10]
 80189e6:	429e      	cmp	r6, r3
 80189e8:	d02c      	beq.n	8018a44 <pbuf_copy+0xb8>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80189ea:	b11d      	cbz	r5, 80189f4 <pbuf_copy+0x68>
 80189ec:	896a      	ldrh	r2, [r5, #10]
 80189ee:	892b      	ldrh	r3, [r5, #8]
 80189f0:	429a      	cmp	r2, r3
 80189f2:	d039      	beq.n	8018a68 <pbuf_copy+0xdc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80189f4:	b11f      	cbz	r7, 80189fe <pbuf_copy+0x72>
 80189f6:	897a      	ldrh	r2, [r7, #10]
 80189f8:	893b      	ldrh	r3, [r7, #8]
 80189fa:	429a      	cmp	r2, r3
 80189fc:	d042      	beq.n	8018a84 <pbuf_copy+0xf8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80189fe:	2d00      	cmp	r5, #0
 8018a00:	d04e      	beq.n	8018aa0 <pbuf_copy+0x114>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8018a02:	897b      	ldrh	r3, [r7, #10]
 8018a04:	1b99      	subs	r1, r3, r6
 8018a06:	896c      	ldrh	r4, [r5, #10]
 8018a08:	eba4 0208 	sub.w	r2, r4, r8
 8018a0c:	4291      	cmp	r1, r2
 8018a0e:	dbd6      	blt.n	80189be <pbuf_copy+0x32>
      len = p_from->len - offset_from;
 8018a10:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8018a12:	6878      	ldr	r0, [r7, #4]
 8018a14:	6869      	ldr	r1, [r5, #4]
 8018a16:	4622      	mov	r2, r4
 8018a18:	4441      	add	r1, r8
 8018a1a:	4430      	add	r0, r6
 8018a1c:	f007 ff6b 	bl	80208f6 <memcpy>
    offset_to += len;
 8018a20:	4426      	add	r6, r4
 8018a22:	b2b6      	uxth	r6, r6
    offset_from += len;
 8018a24:	4444      	add	r4, r8
 8018a26:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8018a2a:	897b      	ldrh	r3, [r7, #10]
 8018a2c:	429e      	cmp	r6, r3
 8018a2e:	d8c9      	bhi.n	80189c4 <pbuf_copy+0x38>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8018a30:	896b      	ldrh	r3, [r5, #10]
 8018a32:	4598      	cmp	r8, r3
 8018a34:	d8ce      	bhi.n	80189d4 <pbuf_copy+0x48>
    if (offset_from >= p_from->len) {
 8018a36:	896b      	ldrh	r3, [r5, #10]
 8018a38:	4598      	cmp	r8, r3
 8018a3a:	d3d3      	bcc.n	80189e4 <pbuf_copy+0x58>
      p_from = p_from->next;
 8018a3c:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 8018a3e:	f04f 0800 	mov.w	r8, #0
 8018a42:	e7cf      	b.n	80189e4 <pbuf_copy+0x58>
      p_to = p_to->next;
 8018a44:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8018a46:	b10f      	cbz	r7, 8018a4c <pbuf_copy+0xc0>
      offset_to = 0;
 8018a48:	2600      	movs	r6, #0
 8018a4a:	e7ce      	b.n	80189ea <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8018a4c:	b90d      	cbnz	r5, 8018a52 <pbuf_copy+0xc6>
      offset_to = 0;
 8018a4e:	2600      	movs	r6, #0
 8018a50:	e7cb      	b.n	80189ea <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8018a52:	4b15      	ldr	r3, [pc, #84]	; (8018aa8 <pbuf_copy+0x11c>)
 8018a54:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8018a58:	4918      	ldr	r1, [pc, #96]	; (8018abc <pbuf_copy+0x130>)
 8018a5a:	4815      	ldr	r0, [pc, #84]	; (8018ab0 <pbuf_copy+0x124>)
 8018a5c:	f007 f847 	bl	801faee <iprintf>
 8018a60:	f06f 000f 	mvn.w	r0, #15
 8018a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018a68:	682b      	ldr	r3, [r5, #0]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d0c2      	beq.n	80189f4 <pbuf_copy+0x68>
 8018a6e:	4b0e      	ldr	r3, [pc, #56]	; (8018aa8 <pbuf_copy+0x11c>)
 8018a70:	f240 32de 	movw	r2, #990	; 0x3de
 8018a74:	4912      	ldr	r1, [pc, #72]	; (8018ac0 <pbuf_copy+0x134>)
 8018a76:	480e      	ldr	r0, [pc, #56]	; (8018ab0 <pbuf_copy+0x124>)
 8018a78:	f007 f839 	bl	801faee <iprintf>
 8018a7c:	f06f 0005 	mvn.w	r0, #5
 8018a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018a84:	683b      	ldr	r3, [r7, #0]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d0b9      	beq.n	80189fe <pbuf_copy+0x72>
 8018a8a:	4b07      	ldr	r3, [pc, #28]	; (8018aa8 <pbuf_copy+0x11c>)
 8018a8c:	f240 32e3 	movw	r2, #995	; 0x3e3
 8018a90:	490b      	ldr	r1, [pc, #44]	; (8018ac0 <pbuf_copy+0x134>)
 8018a92:	4807      	ldr	r0, [pc, #28]	; (8018ab0 <pbuf_copy+0x124>)
 8018a94:	f007 f82b 	bl	801faee <iprintf>
 8018a98:	f06f 0005 	mvn.w	r0, #5
 8018a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8018aa0:	2000      	movs	r0, #0
}
 8018aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018aa6:	bf00      	nop
 8018aa8:	080260d4 	.word	0x080260d4
 8018aac:	08025f9c 	.word	0x08025f9c
 8018ab0:	080214f0 	.word	0x080214f0
 8018ab4:	08025fcc 	.word	0x08025fcc
 8018ab8:	08025fe4 	.word	0x08025fe4
 8018abc:	08026000 	.word	0x08026000
 8018ac0:	08026010 	.word	0x08026010

08018ac4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8018ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8018ac8:	b128      	cbz	r0, 8018ad6 <pbuf_copy_partial+0x12>
 8018aca:	460f      	mov	r7, r1
 8018acc:	4690      	mov	r8, r2
 8018ace:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8018ad0:	b161      	cbz	r1, 8018aec <pbuf_copy_partial+0x28>
 8018ad2:	2600      	movs	r6, #0
 8018ad4:	e027      	b.n	8018b26 <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8018ad6:	4b1a      	ldr	r3, [pc, #104]	; (8018b40 <pbuf_copy_partial+0x7c>)
 8018ad8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8018adc:	4919      	ldr	r1, [pc, #100]	; (8018b44 <pbuf_copy_partial+0x80>)
 8018ade:	481a      	ldr	r0, [pc, #104]	; (8018b48 <pbuf_copy_partial+0x84>)
 8018ae0:	f007 f805 	bl	801faee <iprintf>
 8018ae4:	2600      	movs	r6, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8018ae6:	4630      	mov	r0, r6
 8018ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8018aec:	4b14      	ldr	r3, [pc, #80]	; (8018b40 <pbuf_copy_partial+0x7c>)
 8018aee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8018af2:	4916      	ldr	r1, [pc, #88]	; (8018b4c <pbuf_copy_partial+0x88>)
 8018af4:	4814      	ldr	r0, [pc, #80]	; (8018b48 <pbuf_copy_partial+0x84>)
 8018af6:	f006 fffa 	bl	801faee <iprintf>
 8018afa:	2600      	movs	r6, #0
 8018afc:	e7f3      	b.n	8018ae6 <pbuf_copy_partial+0x22>
      buf_copy_len = p->len - offset;
 8018afe:	896a      	ldrh	r2, [r5, #10]
 8018b00:	1ad2      	subs	r2, r2, r3
 8018b02:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 8018b04:	45a0      	cmp	r8, r4
 8018b06:	d200      	bcs.n	8018b0a <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 8018b08:	4644      	mov	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8018b0a:	6869      	ldr	r1, [r5, #4]
 8018b0c:	4622      	mov	r2, r4
 8018b0e:	4419      	add	r1, r3
 8018b10:	19b8      	adds	r0, r7, r6
 8018b12:	f007 fef0 	bl	80208f6 <memcpy>
      copied_total += buf_copy_len;
 8018b16:	4426      	add	r6, r4
 8018b18:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 8018b1a:	eba8 0404 	sub.w	r4, r8, r4
 8018b1e:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8018b22:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018b24:	682d      	ldr	r5, [r5, #0]
 8018b26:	f1b8 0f00 	cmp.w	r8, #0
 8018b2a:	d0dc      	beq.n	8018ae6 <pbuf_copy_partial+0x22>
 8018b2c:	2d00      	cmp	r5, #0
 8018b2e:	d0da      	beq.n	8018ae6 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d0e4      	beq.n	8018afe <pbuf_copy_partial+0x3a>
 8018b34:	8969      	ldrh	r1, [r5, #10]
 8018b36:	428b      	cmp	r3, r1
 8018b38:	d3e1      	bcc.n	8018afe <pbuf_copy_partial+0x3a>
      offset -= p->len;
 8018b3a:	1a5b      	subs	r3, r3, r1
 8018b3c:	b29b      	uxth	r3, r3
 8018b3e:	e7f1      	b.n	8018b24 <pbuf_copy_partial+0x60>
 8018b40:	080260d4 	.word	0x080260d4
 8018b44:	0802603c 	.word	0x0802603c
 8018b48:	080214f0 	.word	0x080214f0
 8018b4c:	0802605c 	.word	0x0802605c

08018b50 <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018b50:	e000      	b.n	8018b54 <tcp_remove_listener+0x4>
 8018b52:	68c0      	ldr	r0, [r0, #12]
 8018b54:	b128      	cbz	r0, 8018b62 <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 8018b56:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8018b58:	428b      	cmp	r3, r1
 8018b5a:	d1fa      	bne.n	8018b52 <tcp_remove_listener+0x2>
         pcb->listener = NULL;
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	6783      	str	r3, [r0, #120]	; 0x78
 8018b60:	e7f7      	b.n	8018b52 <tcp_remove_listener+0x2>
      }
   }
}
 8018b62:	4770      	bx	lr

08018b64 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8018b64:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 8018b66:	2400      	movs	r4, #0
 8018b68:	e009      	b.n	8018b7e <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8018b6a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018b6e:	4b14      	ldr	r3, [pc, #80]	; (8018bc0 <tcp_new_port+0x5c>)
 8018b70:	801a      	strh	r2, [r3, #0]
 8018b72:	e00c      	b.n	8018b8e <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8018b74:	3401      	adds	r4, #1
 8018b76:	b2a4      	uxth	r4, r4
 8018b78:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8018b7c:	d21e      	bcs.n	8018bbc <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8018b7e:	4a10      	ldr	r2, [pc, #64]	; (8018bc0 <tcp_new_port+0x5c>)
 8018b80:	8813      	ldrh	r3, [r2, #0]
 8018b82:	1c59      	adds	r1, r3, #1
 8018b84:	8011      	strh	r1, [r2, #0]
 8018b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018b8a:	4293      	cmp	r3, r2
 8018b8c:	d0ed      	beq.n	8018b6a <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8018b8e:	2000      	movs	r0, #0
 8018b90:	2803      	cmp	r0, #3
 8018b92:	d80e      	bhi.n	8018bb2 <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018b94:	4b0b      	ldr	r3, [pc, #44]	; (8018bc4 <tcp_new_port+0x60>)
 8018b96:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	b133      	cbz	r3, 8018bac <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 8018b9e:	8ad9      	ldrh	r1, [r3, #22]
 8018ba0:	4a07      	ldr	r2, [pc, #28]	; (8018bc0 <tcp_new_port+0x5c>)
 8018ba2:	8812      	ldrh	r2, [r2, #0]
 8018ba4:	4291      	cmp	r1, r2
 8018ba6:	d0e5      	beq.n	8018b74 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018ba8:	68db      	ldr	r3, [r3, #12]
 8018baa:	e7f7      	b.n	8018b9c <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8018bac:	3001      	adds	r0, #1
 8018bae:	b2c0      	uxtb	r0, r0
 8018bb0:	e7ee      	b.n	8018b90 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8018bb2:	4b03      	ldr	r3, [pc, #12]	; (8018bc0 <tcp_new_port+0x5c>)
 8018bb4:	8818      	ldrh	r0, [r3, #0]
}
 8018bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018bba:	4770      	bx	lr
          return 0;
 8018bbc:	2000      	movs	r0, #0
 8018bbe:	e7fa      	b.n	8018bb6 <tcp_new_port+0x52>
 8018bc0:	2000000c 	.word	0x2000000c
 8018bc4:	080262fc 	.word	0x080262fc

08018bc8 <tcp_listen_closed>:
{
 8018bc8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018bca:	4605      	mov	r5, r0
 8018bcc:	b150      	cbz	r0, 8018be4 <tcp_listen_closed+0x1c>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8018bce:	7d2b      	ldrb	r3, [r5, #20]
 8018bd0:	2b01      	cmp	r3, #1
 8018bd2:	d005      	beq.n	8018be0 <tcp_listen_closed+0x18>
 8018bd4:	4b0c      	ldr	r3, [pc, #48]	; (8018c08 <tcp_listen_closed+0x40>)
 8018bd6:	22c1      	movs	r2, #193	; 0xc1
 8018bd8:	490c      	ldr	r1, [pc, #48]	; (8018c0c <tcp_listen_closed+0x44>)
 8018bda:	480d      	ldr	r0, [pc, #52]	; (8018c10 <tcp_listen_closed+0x48>)
 8018bdc:	f006 ff87 	bl	801faee <iprintf>
{
 8018be0:	2401      	movs	r4, #1
 8018be2:	e00e      	b.n	8018c02 <tcp_listen_closed+0x3a>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018be4:	4b08      	ldr	r3, [pc, #32]	; (8018c08 <tcp_listen_closed+0x40>)
 8018be6:	22c0      	movs	r2, #192	; 0xc0
 8018be8:	490a      	ldr	r1, [pc, #40]	; (8018c14 <tcp_listen_closed+0x4c>)
 8018bea:	4809      	ldr	r0, [pc, #36]	; (8018c10 <tcp_listen_closed+0x48>)
 8018bec:	f006 ff7f 	bl	801faee <iprintf>
 8018bf0:	e7ed      	b.n	8018bce <tcp_listen_closed+0x6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8018bf2:	4b09      	ldr	r3, [pc, #36]	; (8018c18 <tcp_listen_closed+0x50>)
 8018bf4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018bf8:	4629      	mov	r1, r5
 8018bfa:	6818      	ldr	r0, [r3, #0]
 8018bfc:	f7ff ffa8 	bl	8018b50 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018c00:	3401      	adds	r4, #1
 8018c02:	2c03      	cmp	r4, #3
 8018c04:	d9f5      	bls.n	8018bf2 <tcp_listen_closed+0x2a>
}
 8018c06:	bd38      	pop	{r3, r4, r5, pc}
 8018c08:	08026284 	.word	0x08026284
 8018c0c:	080262c0 	.word	0x080262c0
 8018c10:	080214f0 	.word	0x080214f0
 8018c14:	080262b4 	.word	0x080262b4
 8018c18:	080262fc 	.word	0x080262fc

08018c1c <tcp_close_shutdown_fin>:
{
 8018c1c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018c1e:	4604      	mov	r4, r0
 8018c20:	b140      	cbz	r0, 8018c34 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8018c22:	7d23      	ldrb	r3, [r4, #20]
 8018c24:	2b04      	cmp	r3, #4
 8018c26:	d01a      	beq.n	8018c5e <tcp_close_shutdown_fin+0x42>
 8018c28:	2b07      	cmp	r3, #7
 8018c2a:	d021      	beq.n	8018c70 <tcp_close_shutdown_fin+0x54>
 8018c2c:	2b03      	cmp	r3, #3
 8018c2e:	d009      	beq.n	8018c44 <tcp_close_shutdown_fin+0x28>
    return ERR_OK;
 8018c30:	2500      	movs	r5, #0
 8018c32:	e012      	b.n	8018c5a <tcp_close_shutdown_fin+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018c34:	4b18      	ldr	r3, [pc, #96]	; (8018c98 <tcp_close_shutdown_fin+0x7c>)
 8018c36:	f240 124d 	movw	r2, #333	; 0x14d
 8018c3a:	4918      	ldr	r1, [pc, #96]	; (8018c9c <tcp_close_shutdown_fin+0x80>)
 8018c3c:	4818      	ldr	r0, [pc, #96]	; (8018ca0 <tcp_close_shutdown_fin+0x84>)
 8018c3e:	f006 ff56 	bl	801faee <iprintf>
 8018c42:	e7ee      	b.n	8018c22 <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 8018c44:	4620      	mov	r0, r4
 8018c46:	f003 f893 	bl	801bd70 <tcp_send_fin>
    if (err == ERR_OK) {
 8018c4a:	4605      	mov	r5, r0
 8018c4c:	b908      	cbnz	r0, 8018c52 <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8018c4e:	2305      	movs	r3, #5
 8018c50:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 8018c52:	b1b5      	cbz	r5, 8018c82 <tcp_close_shutdown_fin+0x66>
  } else if (err == ERR_MEM) {
 8018c54:	f1b5 3fff 	cmp.w	r5, #4294967295
 8018c58:	d017      	beq.n	8018c8a <tcp_close_shutdown_fin+0x6e>
}
 8018c5a:	4628      	mov	r0, r5
 8018c5c:	bd38      	pop	{r3, r4, r5, pc}
    err = tcp_send_fin(pcb);
 8018c5e:	4620      	mov	r0, r4
 8018c60:	f003 f886 	bl	801bd70 <tcp_send_fin>
    if (err == ERR_OK) {
 8018c64:	4605      	mov	r5, r0
 8018c66:	2800      	cmp	r0, #0
 8018c68:	d1f3      	bne.n	8018c52 <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8018c6a:	2305      	movs	r3, #5
 8018c6c:	7523      	strb	r3, [r4, #20]
 8018c6e:	e7f0      	b.n	8018c52 <tcp_close_shutdown_fin+0x36>
    err = tcp_send_fin(pcb);
 8018c70:	4620      	mov	r0, r4
 8018c72:	f003 f87d 	bl	801bd70 <tcp_send_fin>
    if (err == ERR_OK) {
 8018c76:	4605      	mov	r5, r0
 8018c78:	2800      	cmp	r0, #0
 8018c7a:	d1ea      	bne.n	8018c52 <tcp_close_shutdown_fin+0x36>
      pcb->state = LAST_ACK;
 8018c7c:	2309      	movs	r3, #9
 8018c7e:	7523      	strb	r3, [r4, #20]
 8018c80:	e7e7      	b.n	8018c52 <tcp_close_shutdown_fin+0x36>
    tcp_output(pcb);
 8018c82:	4620      	mov	r0, r4
 8018c84:	f003 f8d0 	bl	801be28 <tcp_output>
 8018c88:	e7e7      	b.n	8018c5a <tcp_close_shutdown_fin+0x3e>
    pcb->flags |= TF_CLOSEPEND;
 8018c8a:	7ea3      	ldrb	r3, [r4, #26]
 8018c8c:	f043 0308 	orr.w	r3, r3, #8
 8018c90:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8018c92:	2500      	movs	r5, #0
 8018c94:	e7e1      	b.n	8018c5a <tcp_close_shutdown_fin+0x3e>
 8018c96:	bf00      	nop
 8018c98:	08026284 	.word	0x08026284
 8018c9c:	080262b4 	.word	0x080262b4
 8018ca0:	080214f0 	.word	0x080214f0

08018ca4 <tcp_init>:
{
 8018ca4:	4770      	bx	lr
	...

08018ca8 <tcp_bind>:
{
 8018ca8:	b570      	push	{r4, r5, r6, lr}
 8018caa:	4605      	mov	r5, r0
  if (ipaddr == NULL) {
 8018cac:	460c      	mov	r4, r1
 8018cae:	b171      	cbz	r1, 8018cce <tcp_bind+0x26>
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8018cb0:	2d00      	cmp	r5, #0
 8018cb2:	d039      	beq.n	8018d28 <tcp_bind+0x80>
 8018cb4:	2c00      	cmp	r4, #0
 8018cb6:	d03a      	beq.n	8018d2e <tcp_bind+0x86>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8018cb8:	7d2b      	ldrb	r3, [r5, #20]
 8018cba:	b953      	cbnz	r3, 8018cd2 <tcp_bind+0x2a>
  if (port == 0) {
 8018cbc:	b19a      	cbz	r2, 8018ce6 <tcp_bind+0x3e>
 8018cbe:	2600      	movs	r6, #0
    for (i = 0; i < max_pcb_list; i++) {
 8018cc0:	2e03      	cmp	r6, #3
 8018cc2:	dc14      	bgt.n	8018cee <tcp_bind+0x46>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018cc4:	4b21      	ldr	r3, [pc, #132]	; (8018d4c <tcp_bind+0xa4>)
 8018cc6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	e01c      	b.n	8018d08 <tcp_bind+0x60>
    ipaddr = IP4_ADDR_ANY;
 8018cce:	4c20      	ldr	r4, [pc, #128]	; (8018d50 <tcp_bind+0xa8>)
 8018cd0:	e7ee      	b.n	8018cb0 <tcp_bind+0x8>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8018cd2:	4b20      	ldr	r3, [pc, #128]	; (8018d54 <tcp_bind+0xac>)
 8018cd4:	f44f 7211 	mov.w	r2, #580	; 0x244
 8018cd8:	491f      	ldr	r1, [pc, #124]	; (8018d58 <tcp_bind+0xb0>)
 8018cda:	4820      	ldr	r0, [pc, #128]	; (8018d5c <tcp_bind+0xb4>)
 8018cdc:	f006 ff07 	bl	801faee <iprintf>
 8018ce0:	f06f 0005 	mvn.w	r0, #5
 8018ce4:	bd70      	pop	{r4, r5, r6, pc}
    port = tcp_new_port();
 8018ce6:	f7ff ff3d 	bl	8018b64 <tcp_new_port>
    if (port == 0) {
 8018cea:	4602      	mov	r2, r0
 8018cec:	b310      	cbz	r0, 8018d34 <tcp_bind+0x8c>
  if (!ip_addr_isany(ipaddr)) {
 8018cee:	6823      	ldr	r3, [r4, #0]
 8018cf0:	b103      	cbz	r3, 8018cf4 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8018cf2:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 8018cf4:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8018cf6:	4b1a      	ldr	r3, [pc, #104]	; (8018d60 <tcp_bind+0xb8>)
 8018cf8:	681a      	ldr	r2, [r3, #0]
 8018cfa:	60ea      	str	r2, [r5, #12]
 8018cfc:	601d      	str	r5, [r3, #0]
 8018cfe:	f003 fbfb 	bl	801c4f8 <tcp_timer_needed>
  return ERR_OK;
 8018d02:	2000      	movs	r0, #0
 8018d04:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018d06:	68db      	ldr	r3, [r3, #12]
 8018d08:	b163      	cbz	r3, 8018d24 <tcp_bind+0x7c>
        if (cpcb->local_port == port) {
 8018d0a:	8ad9      	ldrh	r1, [r3, #22]
 8018d0c:	428a      	cmp	r2, r1
 8018d0e:	d1fa      	bne.n	8018d06 <tcp_bind+0x5e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018d10:	b19b      	cbz	r3, 8018d3a <tcp_bind+0x92>
                (ip_addr_isany(&cpcb->local_ip) ||
 8018d12:	6819      	ldr	r1, [r3, #0]
 8018d14:	b1a1      	cbz	r1, 8018d40 <tcp_bind+0x98>
                ip_addr_isany(ipaddr) ||
 8018d16:	6820      	ldr	r0, [r4, #0]
 8018d18:	b1a8      	cbz	r0, 8018d46 <tcp_bind+0x9e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018d1a:	4281      	cmp	r1, r0
 8018d1c:	d1f3      	bne.n	8018d06 <tcp_bind+0x5e>
              return ERR_USE;
 8018d1e:	f06f 0007 	mvn.w	r0, #7
}
 8018d22:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8018d24:	3601      	adds	r6, #1
 8018d26:	e7cb      	b.n	8018cc0 <tcp_bind+0x18>
    return ERR_VAL;
 8018d28:	f06f 0005 	mvn.w	r0, #5
 8018d2c:	bd70      	pop	{r4, r5, r6, pc}
 8018d2e:	f06f 0005 	mvn.w	r0, #5
 8018d32:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_BUF;
 8018d34:	f06f 0001 	mvn.w	r0, #1
 8018d38:	bd70      	pop	{r4, r5, r6, pc}
              return ERR_USE;
 8018d3a:	f06f 0007 	mvn.w	r0, #7
 8018d3e:	bd70      	pop	{r4, r5, r6, pc}
 8018d40:	f06f 0007 	mvn.w	r0, #7
 8018d44:	bd70      	pop	{r4, r5, r6, pc}
 8018d46:	f06f 0007 	mvn.w	r0, #7
 8018d4a:	bd70      	pop	{r4, r5, r6, pc}
 8018d4c:	080262fc 	.word	0x080262fc
 8018d50:	080258bc 	.word	0x080258bc
 8018d54:	08026284 	.word	0x08026284
 8018d58:	08026208 	.word	0x08026208
 8018d5c:	080214f0 	.word	0x080214f0
 8018d60:	20015cd0 	.word	0x20015cd0

08018d64 <tcp_listen_with_backlog_and_err>:
{
 8018d64:	b570      	push	{r4, r5, r6, lr}
 8018d66:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018d68:	7d03      	ldrb	r3, [r0, #20]
 8018d6a:	bb23      	cbnz	r3, 8018db6 <tcp_listen_with_backlog_and_err+0x52>
 8018d6c:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 8018d6e:	2b01      	cmp	r3, #1
 8018d70:	d042      	beq.n	8018df8 <tcp_listen_with_backlog_and_err+0x94>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8018d72:	2001      	movs	r0, #1
 8018d74:	f7ff f9de 	bl	8018134 <memp_malloc>
  if (lpcb == NULL) {
 8018d78:	4605      	mov	r5, r0
 8018d7a:	2800      	cmp	r0, #0
 8018d7c:	d043      	beq.n	8018e06 <tcp_listen_with_backlog_and_err+0xa2>
  lpcb->callback_arg = pcb->callback_arg;
 8018d7e:	6923      	ldr	r3, [r4, #16]
 8018d80:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8018d82:	8ae3      	ldrh	r3, [r4, #22]
 8018d84:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8018d86:	2301      	movs	r3, #1
 8018d88:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8018d8a:	7d63      	ldrb	r3, [r4, #21]
 8018d8c:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8018d8e:	7a23      	ldrb	r3, [r4, #8]
 8018d90:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8018d92:	7aa3      	ldrb	r3, [r4, #10]
 8018d94:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
 8018d96:	7a63      	ldrb	r3, [r4, #9]
 8018d98:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018d9a:	6823      	ldr	r3, [r4, #0]
 8018d9c:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 8018d9e:	8ae3      	ldrh	r3, [r4, #22]
 8018da0:	b1e3      	cbz	r3, 8018ddc <tcp_listen_with_backlog_and_err+0x78>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018da2:	4b1a      	ldr	r3, [pc, #104]	; (8018e0c <tcp_listen_with_backlog_and_err+0xa8>)
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	429c      	cmp	r4, r3
 8018da8:	d010      	beq.n	8018dcc <tcp_listen_with_backlog_and_err+0x68>
 8018daa:	b1ab      	cbz	r3, 8018dd8 <tcp_listen_with_backlog_and_err+0x74>
 8018dac:	68da      	ldr	r2, [r3, #12]
 8018dae:	4294      	cmp	r4, r2
 8018db0:	d010      	beq.n	8018dd4 <tcp_listen_with_backlog_and_err+0x70>
 8018db2:	4613      	mov	r3, r2
 8018db4:	e7f9      	b.n	8018daa <tcp_listen_with_backlog_and_err+0x46>
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018db6:	4b16      	ldr	r3, [pc, #88]	; (8018e10 <tcp_listen_with_backlog_and_err+0xac>)
 8018db8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8018dbc:	4915      	ldr	r1, [pc, #84]	; (8018e14 <tcp_listen_with_backlog_and_err+0xb0>)
 8018dbe:	4816      	ldr	r0, [pc, #88]	; (8018e18 <tcp_listen_with_backlog_and_err+0xb4>)
 8018dc0:	f006 fe95 	bl	801faee <iprintf>
 8018dc4:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8018dc8:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018dca:	e018      	b.n	8018dfe <tcp_listen_with_backlog_and_err+0x9a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018dcc:	68da      	ldr	r2, [r3, #12]
 8018dce:	4b0f      	ldr	r3, [pc, #60]	; (8018e0c <tcp_listen_with_backlog_and_err+0xa8>)
 8018dd0:	601a      	str	r2, [r3, #0]
 8018dd2:	e001      	b.n	8018dd8 <tcp_listen_with_backlog_and_err+0x74>
 8018dd4:	68e2      	ldr	r2, [r4, #12]
 8018dd6:	60da      	str	r2, [r3, #12]
 8018dd8:	2300      	movs	r3, #0
 8018dda:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8018ddc:	4621      	mov	r1, r4
 8018dde:	2000      	movs	r0, #0
 8018de0:	f7ff f9c2 	bl	8018168 <memp_free>
  lpcb->accept = tcp_accept_null;
 8018de4:	4b0d      	ldr	r3, [pc, #52]	; (8018e1c <tcp_listen_with_backlog_and_err+0xb8>)
 8018de6:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018de8:	4b0d      	ldr	r3, [pc, #52]	; (8018e20 <tcp_listen_with_backlog_and_err+0xbc>)
 8018dea:	681a      	ldr	r2, [r3, #0]
 8018dec:	60ea      	str	r2, [r5, #12]
 8018dee:	601d      	str	r5, [r3, #0]
 8018df0:	f003 fb82 	bl	801c4f8 <tcp_timer_needed>
  res = ERR_OK;
 8018df4:	2300      	movs	r3, #0
 8018df6:	e002      	b.n	8018dfe <tcp_listen_with_backlog_and_err+0x9a>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8018df8:	4605      	mov	r5, r0
    res = ERR_ALREADY;
 8018dfa:	f06f 0308 	mvn.w	r3, #8
  if (err != NULL) {
 8018dfe:	b106      	cbz	r6, 8018e02 <tcp_listen_with_backlog_and_err+0x9e>
    *err = res;
 8018e00:	7033      	strb	r3, [r6, #0]
}
 8018e02:	4628      	mov	r0, r5
 8018e04:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 8018e06:	f04f 33ff 	mov.w	r3, #4294967295
 8018e0a:	e7f8      	b.n	8018dfe <tcp_listen_with_backlog_and_err+0x9a>
 8018e0c:	20015cd0 	.word	0x20015cd0
 8018e10:	08026284 	.word	0x08026284
 8018e14:	080262d8 	.word	0x080262d8
 8018e18:	080214f0 	.word	0x080214f0
 8018e1c:	0801992f 	.word	0x0801992f
 8018e20:	20015ccc 	.word	0x20015ccc

08018e24 <tcp_update_rcv_ann_wnd>:
{
 8018e24:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8018e26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018e28:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 8018e2a:	192a      	adds	r2, r5, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8018e2c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8018e2e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8018e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018e34:	d901      	bls.n	8018e3a <tcp_update_rcv_ann_wnd+0x16>
 8018e36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018e3a:	440b      	add	r3, r1
 8018e3c:	1ad3      	subs	r3, r2, r3
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	db02      	blt.n	8018e48 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8018e42:	8544      	strh	r4, [r0, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8018e44:	1a50      	subs	r0, r2, r1
 8018e46:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8018e48:	1a6b      	subs	r3, r5, r1
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	dd03      	ble.n	8018e56 <tcp_update_rcv_ann_wnd+0x32>
      pcb->rcv_ann_wnd = 0;
 8018e4e:	2200      	movs	r2, #0
 8018e50:	8542      	strh	r2, [r0, #42]	; 0x2a
    return 0;
 8018e52:	4610      	mov	r0, r2
 8018e54:	bd38      	pop	{r3, r4, r5, pc}
 8018e56:	4604      	mov	r4, r0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8018e58:	1b4d      	subs	r5, r1, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018e5a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8018e5e:	d202      	bcs.n	8018e66 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8018e60:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8018e62:	2000      	movs	r0, #0
}
 8018e64:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018e66:	4b04      	ldr	r3, [pc, #16]	; (8018e78 <tcp_update_rcv_ann_wnd+0x54>)
 8018e68:	f44f 7242 	mov.w	r2, #776	; 0x308
 8018e6c:	4903      	ldr	r1, [pc, #12]	; (8018e7c <tcp_update_rcv_ann_wnd+0x58>)
 8018e6e:	4804      	ldr	r0, [pc, #16]	; (8018e80 <tcp_update_rcv_ann_wnd+0x5c>)
 8018e70:	f006 fe3d 	bl	801faee <iprintf>
 8018e74:	e7f4      	b.n	8018e60 <tcp_update_rcv_ann_wnd+0x3c>
 8018e76:	bf00      	nop
 8018e78:	08026284 	.word	0x08026284
 8018e7c:	0802657c 	.word	0x0802657c
 8018e80:	080214f0 	.word	0x080214f0

08018e84 <tcp_recved>:
{
 8018e84:	b538      	push	{r3, r4, r5, lr}
 8018e86:	4605      	mov	r5, r0
 8018e88:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018e8a:	7d03      	ldrb	r3, [r0, #20]
 8018e8c:	2b01      	cmp	r3, #1
 8018e8e:	d010      	beq.n	8018eb2 <tcp_recved+0x2e>
  pcb->rcv_wnd += len;
 8018e90:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 8018e92:	4421      	add	r1, r4
 8018e94:	b289      	uxth	r1, r1
 8018e96:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8018e98:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8018e9c:	d911      	bls.n	8018ec2 <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018ea2:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8018ea4:	4628      	mov	r0, r5
 8018ea6:	f7ff ffbd 	bl	8018e24 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8018eaa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8018eae:	da1b      	bge.n	8018ee8 <tcp_recved+0x64>
 8018eb0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018eb2:	4b11      	ldr	r3, [pc, #68]	; (8018ef8 <tcp_recved+0x74>)
 8018eb4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018eb8:	4910      	ldr	r1, [pc, #64]	; (8018efc <tcp_recved+0x78>)
 8018eba:	4811      	ldr	r0, [pc, #68]	; (8018f00 <tcp_recved+0x7c>)
 8018ebc:	f006 fe17 	bl	801faee <iprintf>
 8018ec0:	e7e6      	b.n	8018e90 <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 8018ec2:	2900      	cmp	r1, #0
 8018ec4:	d1ee      	bne.n	8018ea4 <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8018ec6:	7d2b      	ldrb	r3, [r5, #20]
 8018ec8:	2b07      	cmp	r3, #7
 8018eca:	d009      	beq.n	8018ee0 <tcp_recved+0x5c>
 8018ecc:	2b09      	cmp	r3, #9
 8018ece:	d007      	beq.n	8018ee0 <tcp_recved+0x5c>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8018ed0:	4b09      	ldr	r3, [pc, #36]	; (8018ef8 <tcp_recved+0x74>)
 8018ed2:	f240 322d 	movw	r2, #813	; 0x32d
 8018ed6:	490b      	ldr	r1, [pc, #44]	; (8018f04 <tcp_recved+0x80>)
 8018ed8:	4809      	ldr	r0, [pc, #36]	; (8018f00 <tcp_recved+0x7c>)
 8018eda:	f006 fe08 	bl	801faee <iprintf>
 8018ede:	e7e1      	b.n	8018ea4 <tcp_recved+0x20>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018ee4:	852b      	strh	r3, [r5, #40]	; 0x28
 8018ee6:	e7dd      	b.n	8018ea4 <tcp_recved+0x20>
    tcp_ack_now(pcb);
 8018ee8:	7eab      	ldrb	r3, [r5, #26]
 8018eea:	f043 0302 	orr.w	r3, r3, #2
 8018eee:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 8018ef0:	4628      	mov	r0, r5
 8018ef2:	f002 ff99 	bl	801be28 <tcp_output>
}
 8018ef6:	e7db      	b.n	8018eb0 <tcp_recved+0x2c>
 8018ef8:	08026284 	.word	0x08026284
 8018efc:	080263a8 	.word	0x080263a8
 8018f00:	080214f0 	.word	0x080214f0
 8018f04:	080263d0 	.word	0x080263d0

08018f08 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8018f08:	b150      	cbz	r0, 8018f20 <tcp_seg_free+0x18>
{
 8018f0a:	b510      	push	{r4, lr}
 8018f0c:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8018f0e:	6840      	ldr	r0, [r0, #4]
 8018f10:	b108      	cbz	r0, 8018f16 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8018f12:	f7ff fb15 	bl	8018540 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8018f16:	4621      	mov	r1, r4
 8018f18:	2002      	movs	r0, #2
 8018f1a:	f7ff f925 	bl	8018168 <memp_free>
 8018f1e:	bd10      	pop	{r4, pc}
 8018f20:	4770      	bx	lr

08018f22 <tcp_segs_free>:
  while (seg != NULL) {
 8018f22:	b138      	cbz	r0, 8018f34 <tcp_segs_free+0x12>
{
 8018f24:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8018f26:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8018f28:	f7ff ffee 	bl	8018f08 <tcp_seg_free>
    seg = next;
 8018f2c:	4620      	mov	r0, r4
  while (seg != NULL) {
 8018f2e:	2c00      	cmp	r4, #0
 8018f30:	d1f9      	bne.n	8018f26 <tcp_segs_free+0x4>
}
 8018f32:	bd10      	pop	{r4, pc}
 8018f34:	4770      	bx	lr

08018f36 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8018f36:	b538      	push	{r3, r4, r5, lr}
 8018f38:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8018f3a:	2002      	movs	r0, #2
 8018f3c:	f7ff f8fa 	bl	8018134 <memp_malloc>
  if (cseg == NULL) {
 8018f40:	4604      	mov	r4, r0
 8018f42:	b150      	cbz	r0, 8018f5a <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8018f44:	6828      	ldr	r0, [r5, #0]
 8018f46:	6869      	ldr	r1, [r5, #4]
 8018f48:	68aa      	ldr	r2, [r5, #8]
 8018f4a:	68eb      	ldr	r3, [r5, #12]
 8018f4c:	6020      	str	r0, [r4, #0]
 8018f4e:	6061      	str	r1, [r4, #4]
 8018f50:	60a2      	str	r2, [r4, #8]
 8018f52:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8018f54:	6860      	ldr	r0, [r4, #4]
 8018f56:	f7ff fcc3 	bl	80188e0 <pbuf_ref>
  return cseg;
}
 8018f5a:	4620      	mov	r0, r4
 8018f5c:	bd38      	pop	{r3, r4, r5, pc}

08018f5e <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8018f5e:	b100      	cbz	r0, 8018f62 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8018f60:	6101      	str	r1, [r0, #16]
 8018f62:	4770      	bx	lr

08018f64 <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 8018f64:	b180      	cbz	r0, 8018f88 <tcp_recv+0x24>
{
 8018f66:	b538      	push	{r3, r4, r5, lr}
 8018f68:	4604      	mov	r4, r0
 8018f6a:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018f6c:	7d03      	ldrb	r3, [r0, #20]
 8018f6e:	2b01      	cmp	r3, #1
 8018f70:	d002      	beq.n	8018f78 <tcp_recv+0x14>
    pcb->recv = recv;
 8018f72:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8018f76:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018f78:	4b04      	ldr	r3, [pc, #16]	; (8018f8c <tcp_recv+0x28>)
 8018f7a:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8018f7e:	4904      	ldr	r1, [pc, #16]	; (8018f90 <tcp_recv+0x2c>)
 8018f80:	4804      	ldr	r0, [pc, #16]	; (8018f94 <tcp_recv+0x30>)
 8018f82:	f006 fdb4 	bl	801faee <iprintf>
 8018f86:	e7f4      	b.n	8018f72 <tcp_recv+0xe>
 8018f88:	4770      	bx	lr
 8018f8a:	bf00      	nop
 8018f8c:	08026284 	.word	0x08026284
 8018f90:	08026380 	.word	0x08026380
 8018f94:	080214f0 	.word	0x080214f0

08018f98 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 8018f98:	b178      	cbz	r0, 8018fba <tcp_sent+0x22>
{
 8018f9a:	b538      	push	{r3, r4, r5, lr}
 8018f9c:	4604      	mov	r4, r0
 8018f9e:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018fa0:	7d03      	ldrb	r3, [r0, #20]
 8018fa2:	2b01      	cmp	r3, #1
 8018fa4:	d001      	beq.n	8018faa <tcp_sent+0x12>
    pcb->sent = sent;
 8018fa6:	67e5      	str	r5, [r4, #124]	; 0x7c
 8018fa8:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018faa:	4b04      	ldr	r3, [pc, #16]	; (8018fbc <tcp_sent+0x24>)
 8018fac:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8018fb0:	4903      	ldr	r1, [pc, #12]	; (8018fc0 <tcp_sent+0x28>)
 8018fb2:	4804      	ldr	r0, [pc, #16]	; (8018fc4 <tcp_sent+0x2c>)
 8018fb4:	f006 fd9b 	bl	801faee <iprintf>
 8018fb8:	e7f5      	b.n	8018fa6 <tcp_sent+0xe>
 8018fba:	4770      	bx	lr
 8018fbc:	08026284 	.word	0x08026284
 8018fc0:	080263f4 	.word	0x080263f4
 8018fc4:	080214f0 	.word	0x080214f0

08018fc8 <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 8018fc8:	b180      	cbz	r0, 8018fec <tcp_err+0x24>
{
 8018fca:	b538      	push	{r3, r4, r5, lr}
 8018fcc:	4604      	mov	r4, r0
 8018fce:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8018fd0:	7d03      	ldrb	r3, [r0, #20]
 8018fd2:	2b01      	cmp	r3, #1
 8018fd4:	d002      	beq.n	8018fdc <tcp_err+0x14>
    pcb->errf = err;
 8018fd6:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8018fda:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8018fdc:	4b04      	ldr	r3, [pc, #16]	; (8018ff0 <tcp_err+0x28>)
 8018fde:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8018fe2:	4904      	ldr	r1, [pc, #16]	; (8018ff4 <tcp_err+0x2c>)
 8018fe4:	4804      	ldr	r0, [pc, #16]	; (8018ff8 <tcp_err+0x30>)
 8018fe6:	f006 fd82 	bl	801faee <iprintf>
 8018fea:	e7f4      	b.n	8018fd6 <tcp_err+0xe>
 8018fec:	4770      	bx	lr
 8018fee:	bf00      	nop
 8018ff0:	08026284 	.word	0x08026284
 8018ff4:	0802624c 	.word	0x0802624c
 8018ff8:	080214f0 	.word	0x080214f0

08018ffc <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8018ffc:	b110      	cbz	r0, 8019004 <tcp_accept+0x8>
 8018ffe:	7d02      	ldrb	r2, [r0, #20]
 8019000:	2a01      	cmp	r2, #1
 8019002:	d000      	beq.n	8019006 <tcp_accept+0xa>
 8019004:	4770      	bx	lr
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8019006:	6181      	str	r1, [r0, #24]
  }
}
 8019008:	e7fc      	b.n	8019004 <tcp_accept+0x8>
	...

0801900c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801900c:	b570      	push	{r4, r5, r6, lr}
 801900e:	4604      	mov	r4, r0
 8019010:	460e      	mov	r6, r1
 8019012:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8019014:	7d03      	ldrb	r3, [r0, #20]
 8019016:	2b01      	cmp	r3, #1
 8019018:	d003      	beq.n	8019022 <tcp_poll+0x16>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801901a:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801901e:	7725      	strb	r5, [r4, #28]
 8019020:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8019022:	4b04      	ldr	r3, [pc, #16]	; (8019034 <tcp_poll+0x28>)
 8019024:	f240 7203 	movw	r2, #1795	; 0x703
 8019028:	4903      	ldr	r1, [pc, #12]	; (8019038 <tcp_poll+0x2c>)
 801902a:	4804      	ldr	r0, [pc, #16]	; (801903c <tcp_poll+0x30>)
 801902c:	f006 fd5f 	bl	801faee <iprintf>
 8019030:	e7f3      	b.n	801901a <tcp_poll+0xe>
 8019032:	bf00      	nop
 8019034:	08026284 	.word	0x08026284
 8019038:	08026360 	.word	0x08026360
 801903c:	080214f0 	.word	0x080214f0

08019040 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8019040:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8019042:	7d03      	ldrb	r3, [r0, #20]
 8019044:	b1e3      	cbz	r3, 8019080 <tcp_pcb_purge+0x40>
 8019046:	2b0a      	cmp	r3, #10
 8019048:	d01a      	beq.n	8019080 <tcp_pcb_purge+0x40>
     pcb->state != TIME_WAIT &&
 801904a:	2b01      	cmp	r3, #1
 801904c:	d018      	beq.n	8019080 <tcp_pcb_purge+0x40>
 801904e:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8019050:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8019052:	b118      	cbz	r0, 801905c <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8019054:	f7ff fa74 	bl	8018540 <pbuf_free>
      pcb->refused_data = NULL;
 8019058:	2300      	movs	r3, #0
 801905a:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 801905c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801905e:	f7ff ff60 	bl	8018f22 <tcp_segs_free>
    pcb->ooseq = NULL;
 8019062:	2500      	movs	r5, #0
 8019064:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8019066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801906a:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801906c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 801906e:	f7ff ff58 	bl	8018f22 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8019072:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8019074:	f7ff ff55 	bl	8018f22 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8019078:	66a5      	str	r5, [r4, #104]	; 0x68
 801907a:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801907c:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8019080:	bd38      	pop	{r3, r4, r5, pc}
	...

08019084 <tcp_slowtmr>:
{
 8019084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019088:	b082      	sub	sp, #8
  ++tcp_ticks;
 801908a:	4aae      	ldr	r2, [pc, #696]	; (8019344 <tcp_slowtmr+0x2c0>)
 801908c:	6813      	ldr	r3, [r2, #0]
 801908e:	3301      	adds	r3, #1
 8019090:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8019092:	4aad      	ldr	r2, [pc, #692]	; (8019348 <tcp_slowtmr+0x2c4>)
 8019094:	7813      	ldrb	r3, [r2, #0]
 8019096:	3301      	adds	r3, #1
 8019098:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 801909a:	4bac      	ldr	r3, [pc, #688]	; (801934c <tcp_slowtmr+0x2c8>)
 801909c:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 801909e:	2600      	movs	r6, #0
  while (pcb != NULL) {
 80190a0:	e018      	b.n	80190d4 <tcp_slowtmr+0x50>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80190a2:	4bab      	ldr	r3, [pc, #684]	; (8019350 <tcp_slowtmr+0x2cc>)
 80190a4:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80190a8:	49aa      	ldr	r1, [pc, #680]	; (8019354 <tcp_slowtmr+0x2d0>)
 80190aa:	48ab      	ldr	r0, [pc, #684]	; (8019358 <tcp_slowtmr+0x2d4>)
 80190ac:	f006 fd1f 	bl	801faee <iprintf>
 80190b0:	e016      	b.n	80190e0 <tcp_slowtmr+0x5c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80190b2:	4ba7      	ldr	r3, [pc, #668]	; (8019350 <tcp_slowtmr+0x2cc>)
 80190b4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80190b8:	49a8      	ldr	r1, [pc, #672]	; (801935c <tcp_slowtmr+0x2d8>)
 80190ba:	48a7      	ldr	r0, [pc, #668]	; (8019358 <tcp_slowtmr+0x2d4>)
 80190bc:	f006 fd17 	bl	801faee <iprintf>
 80190c0:	e011      	b.n	80190e6 <tcp_slowtmr+0x62>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80190c2:	4ba3      	ldr	r3, [pc, #652]	; (8019350 <tcp_slowtmr+0x2cc>)
 80190c4:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80190c8:	49a5      	ldr	r1, [pc, #660]	; (8019360 <tcp_slowtmr+0x2dc>)
 80190ca:	48a3      	ldr	r0, [pc, #652]	; (8019358 <tcp_slowtmr+0x2d4>)
 80190cc:	f006 fd0f 	bl	801faee <iprintf>
 80190d0:	e00c      	b.n	80190ec <tcp_slowtmr+0x68>
      pcb = pcb->next;
 80190d2:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 80190d4:	2c00      	cmp	r4, #0
 80190d6:	f000 817c 	beq.w	80193d2 <tcp_slowtmr+0x34e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80190da:	7d23      	ldrb	r3, [r4, #20]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d0e0      	beq.n	80190a2 <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80190e0:	7d23      	ldrb	r3, [r4, #20]
 80190e2:	2b01      	cmp	r3, #1
 80190e4:	d0e5      	beq.n	80190b2 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80190e6:	7d23      	ldrb	r3, [r4, #20]
 80190e8:	2b0a      	cmp	r3, #10
 80190ea:	d0ea      	beq.n	80190c2 <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 80190ec:	7f62      	ldrb	r2, [r4, #29]
 80190ee:	4b96      	ldr	r3, [pc, #600]	; (8019348 <tcp_slowtmr+0x2c4>)
 80190f0:	781b      	ldrb	r3, [r3, #0]
 80190f2:	429a      	cmp	r2, r3
 80190f4:	d0ed      	beq.n	80190d2 <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 80190f6:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80190f8:	7d23      	ldrb	r3, [r4, #20]
 80190fa:	2b02      	cmp	r3, #2
 80190fc:	d016      	beq.n	801912c <tcp_slowtmr+0xa8>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80190fe:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8019102:	2a0b      	cmp	r2, #11
 8019104:	d860      	bhi.n	80191c8 <tcp_slowtmr+0x144>
      if (pcb->persist_backoff > 0) {
 8019106:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 801910a:	b335      	cbz	r5, 801915a <tcp_slowtmr+0xd6>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 801910c:	3d01      	subs	r5, #1
 801910e:	4b95      	ldr	r3, [pc, #596]	; (8019364 <tcp_slowtmr+0x2e0>)
 8019110:	5d5a      	ldrb	r2, [r3, r5]
        if (pcb->persist_cnt < backoff_cnt) {
 8019112:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8019116:	429a      	cmp	r2, r3
 8019118:	d902      	bls.n	8019120 <tcp_slowtmr+0x9c>
          pcb->persist_cnt++;
 801911a:	3301      	adds	r3, #1
 801911c:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8019120:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8019124:	429a      	cmp	r2, r3
 8019126:	d907      	bls.n	8019138 <tcp_slowtmr+0xb4>
    pcb_remove = 0;
 8019128:	2500      	movs	r5, #0
 801912a:	e04e      	b.n	80191ca <tcp_slowtmr+0x146>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801912c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8019130:	2a05      	cmp	r2, #5
 8019132:	d9e4      	bls.n	80190fe <tcp_slowtmr+0x7a>
      ++pcb_remove;
 8019134:	2501      	movs	r5, #1
 8019136:	e048      	b.n	80191ca <tcp_slowtmr+0x146>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8019138:	4620      	mov	r0, r4
 801913a:	f003 f8c2 	bl	801c2c2 <tcp_zero_window_probe>
 801913e:	2800      	cmp	r0, #0
 8019140:	d150      	bne.n	80191e4 <tcp_slowtmr+0x160>
            pcb->persist_cnt = 0;
 8019142:	2300      	movs	r3, #0
 8019144:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8019148:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 801914c:	2b06      	cmp	r3, #6
 801914e:	d84b      	bhi.n	80191e8 <tcp_slowtmr+0x164>
              pcb->persist_backoff++;
 8019150:	3301      	adds	r3, #1
 8019152:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 8019156:	2500      	movs	r5, #0
 8019158:	e037      	b.n	80191ca <tcp_slowtmr+0x146>
        if (pcb->rtime >= 0) {
 801915a:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 801915e:	2900      	cmp	r1, #0
 8019160:	db01      	blt.n	8019166 <tcp_slowtmr+0xe2>
          ++pcb->rtime;
 8019162:	3101      	adds	r1, #1
 8019164:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8019166:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8019168:	b379      	cbz	r1, 80191ca <tcp_slowtmr+0x146>
 801916a:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 801916e:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8019172:	4288      	cmp	r0, r1
 8019174:	db29      	blt.n	80191ca <tcp_slowtmr+0x146>
          if (pcb->state != SYN_SENT) {
 8019176:	2b02      	cmp	r3, #2
 8019178:	d00d      	beq.n	8019196 <tcp_slowtmr+0x112>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 801917a:	2a0c      	cmp	r2, #12
 801917c:	bf28      	it	cs
 801917e:	220c      	movcs	r2, #12
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8019180:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8019184:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8019188:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801918c:	4976      	ldr	r1, [pc, #472]	; (8019368 <tcp_slowtmr+0x2e4>)
 801918e:	5c8a      	ldrb	r2, [r1, r2]
 8019190:	4093      	lsls	r3, r2
 8019192:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8019196:	2300      	movs	r3, #0
 8019198:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801919a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 801919e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80191a2:	4293      	cmp	r3, r2
 80191a4:	bf28      	it	cs
 80191a6:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 80191a8:	085b      	lsrs	r3, r3, #1
 80191aa:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80191ae:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 80191b0:	004a      	lsls	r2, r1, #1
 80191b2:	b292      	uxth	r2, r2
 80191b4:	4293      	cmp	r3, r2
 80191b6:	d201      	bcs.n	80191bc <tcp_slowtmr+0x138>
            pcb->ssthresh = (pcb->mss << 1);
 80191b8:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 80191bc:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 80191c0:	4620      	mov	r0, r4
 80191c2:	f002 ffe1 	bl	801c188 <tcp_rexmit_rto>
 80191c6:	e000      	b.n	80191ca <tcp_slowtmr+0x146>
      ++pcb_remove;
 80191c8:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 80191ca:	7d23      	ldrb	r3, [r4, #20]
 80191cc:	2b06      	cmp	r3, #6
 80191ce:	d00d      	beq.n	80191ec <tcp_slowtmr+0x168>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80191d0:	7a22      	ldrb	r2, [r4, #8]
 80191d2:	f012 0f08 	tst.w	r2, #8
 80191d6:	d043      	beq.n	8019260 <tcp_slowtmr+0x1dc>
 80191d8:	2b04      	cmp	r3, #4
 80191da:	d014      	beq.n	8019206 <tcp_slowtmr+0x182>
       ((pcb->state == ESTABLISHED) ||
 80191dc:	2b07      	cmp	r3, #7
 80191de:	d012      	beq.n	8019206 <tcp_slowtmr+0x182>
    pcb_reset = 0;
 80191e0:	2700      	movs	r7, #0
 80191e2:	e03e      	b.n	8019262 <tcp_slowtmr+0x1de>
    pcb_remove = 0;
 80191e4:	2500      	movs	r5, #0
 80191e6:	e7f0      	b.n	80191ca <tcp_slowtmr+0x146>
 80191e8:	2500      	movs	r5, #0
 80191ea:	e7ee      	b.n	80191ca <tcp_slowtmr+0x146>
      if (pcb->flags & TF_RXCLOSED) {
 80191ec:	7ea2      	ldrb	r2, [r4, #26]
 80191ee:	f012 0f10 	tst.w	r2, #16
 80191f2:	d0ed      	beq.n	80191d0 <tcp_slowtmr+0x14c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80191f4:	6a21      	ldr	r1, [r4, #32]
 80191f6:	4a53      	ldr	r2, [pc, #332]	; (8019344 <tcp_slowtmr+0x2c0>)
 80191f8:	6812      	ldr	r2, [r2, #0]
 80191fa:	1a52      	subs	r2, r2, r1
 80191fc:	2a28      	cmp	r2, #40	; 0x28
 80191fe:	d9e7      	bls.n	80191d0 <tcp_slowtmr+0x14c>
          ++pcb_remove;
 8019200:	3501      	adds	r5, #1
 8019202:	b2ed      	uxtb	r5, r5
 8019204:	e7e4      	b.n	80191d0 <tcp_slowtmr+0x14c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019206:	4b4f      	ldr	r3, [pc, #316]	; (8019344 <tcp_slowtmr+0x2c0>)
 8019208:	681a      	ldr	r2, [r3, #0]
 801920a:	6a23      	ldr	r3, [r4, #32]
 801920c:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 801920e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8019212:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8019216:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801921a:	4854      	ldr	r0, [pc, #336]	; (801936c <tcp_slowtmr+0x2e8>)
 801921c:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019220:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8019224:	d903      	bls.n	801922e <tcp_slowtmr+0x1aa>
        ++pcb_remove;
 8019226:	3501      	adds	r5, #1
 8019228:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 801922a:	2701      	movs	r7, #1
 801922c:	e019      	b.n	8019262 <tcp_slowtmr+0x1de>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801922e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8019232:	484f      	ldr	r0, [pc, #316]	; (8019370 <tcp_slowtmr+0x2ec>)
 8019234:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 8019238:	494c      	ldr	r1, [pc, #304]	; (801936c <tcp_slowtmr+0x2e8>)
 801923a:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801923e:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8019242:	d801      	bhi.n	8019248 <tcp_slowtmr+0x1c4>
    pcb_reset = 0;
 8019244:	2700      	movs	r7, #0
 8019246:	e00c      	b.n	8019262 <tcp_slowtmr+0x1de>
        err = tcp_keepalive(pcb);
 8019248:	4620      	mov	r0, r4
 801924a:	f003 f80e 	bl	801c26a <tcp_keepalive>
        if (err == ERR_OK) {
 801924e:	2800      	cmp	r0, #0
 8019250:	d13a      	bne.n	80192c8 <tcp_slowtmr+0x244>
          pcb->keep_cnt_sent++;
 8019252:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8019256:	3301      	adds	r3, #1
 8019258:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 801925c:	2700      	movs	r7, #0
 801925e:	e000      	b.n	8019262 <tcp_slowtmr+0x1de>
 8019260:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8019262:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8019264:	b150      	cbz	r0, 801927c <tcp_slowtmr+0x1f8>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8019266:	4b37      	ldr	r3, [pc, #220]	; (8019344 <tcp_slowtmr+0x2c0>)
 8019268:	681a      	ldr	r2, [r3, #0]
 801926a:	6a23      	ldr	r3, [r4, #32]
 801926c:	1ad2      	subs	r2, r2, r3
 801926e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8019272:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019276:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 8019278:	428a      	cmp	r2, r1
 801927a:	d227      	bcs.n	80192cc <tcp_slowtmr+0x248>
    if (pcb->state == SYN_RCVD) {
 801927c:	7d23      	ldrb	r3, [r4, #20]
 801927e:	2b03      	cmp	r3, #3
 8019280:	d029      	beq.n	80192d6 <tcp_slowtmr+0x252>
    if (pcb->state == LAST_ACK) {
 8019282:	2b09      	cmp	r3, #9
 8019284:	d030      	beq.n	80192e8 <tcp_slowtmr+0x264>
    if (pcb_remove) {
 8019286:	2d00      	cmp	r5, #0
 8019288:	d137      	bne.n	80192fa <tcp_slowtmr+0x276>
      pcb = pcb->next;
 801928a:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 801928c:	7ee3      	ldrb	r3, [r4, #27]
 801928e:	3301      	adds	r3, #1
 8019290:	b2db      	uxtb	r3, r3
 8019292:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8019294:	7f22      	ldrb	r2, [r4, #28]
 8019296:	4293      	cmp	r3, r2
 8019298:	f0c0 8098 	bcc.w	80193cc <tcp_slowtmr+0x348>
        prev->polltmr = 0;
 801929c:	2300      	movs	r3, #0
 801929e:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80192a0:	4a34      	ldr	r2, [pc, #208]	; (8019374 <tcp_slowtmr+0x2f0>)
 80192a2:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 80192a4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	f000 8087 	beq.w	80193bc <tcp_slowtmr+0x338>
 80192ae:	4621      	mov	r1, r4
 80192b0:	6920      	ldr	r0, [r4, #16]
 80192b2:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80192b4:	4b2f      	ldr	r3, [pc, #188]	; (8019374 <tcp_slowtmr+0x2f0>)
 80192b6:	781b      	ldrb	r3, [r3, #0]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	f47f aeee 	bne.w	801909a <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 80192be:	2800      	cmp	r0, #0
 80192c0:	d07e      	beq.n	80193c0 <tcp_slowtmr+0x33c>
      prev = pcb;
 80192c2:	4626      	mov	r6, r4
      pcb = pcb->next;
 80192c4:	462c      	mov	r4, r5
 80192c6:	e705      	b.n	80190d4 <tcp_slowtmr+0x50>
    pcb_reset = 0;
 80192c8:	2700      	movs	r7, #0
 80192ca:	e7ca      	b.n	8019262 <tcp_slowtmr+0x1de>
      tcp_segs_free(pcb->ooseq);
 80192cc:	f7ff fe29 	bl	8018f22 <tcp_segs_free>
      pcb->ooseq = NULL;
 80192d0:	2300      	movs	r3, #0
 80192d2:	6723      	str	r3, [r4, #112]	; 0x70
 80192d4:	e7d2      	b.n	801927c <tcp_slowtmr+0x1f8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80192d6:	6a21      	ldr	r1, [r4, #32]
 80192d8:	4a1a      	ldr	r2, [pc, #104]	; (8019344 <tcp_slowtmr+0x2c0>)
 80192da:	6812      	ldr	r2, [r2, #0]
 80192dc:	1a52      	subs	r2, r2, r1
 80192de:	2a28      	cmp	r2, #40	; 0x28
 80192e0:	d9cf      	bls.n	8019282 <tcp_slowtmr+0x1fe>
        ++pcb_remove;
 80192e2:	3501      	adds	r5, #1
 80192e4:	b2ed      	uxtb	r5, r5
 80192e6:	e7cc      	b.n	8019282 <tcp_slowtmr+0x1fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80192e8:	6a22      	ldr	r2, [r4, #32]
 80192ea:	4b16      	ldr	r3, [pc, #88]	; (8019344 <tcp_slowtmr+0x2c0>)
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	1a9b      	subs	r3, r3, r2
 80192f0:	2bf0      	cmp	r3, #240	; 0xf0
 80192f2:	d9c8      	bls.n	8019286 <tcp_slowtmr+0x202>
        ++pcb_remove;
 80192f4:	3501      	adds	r5, #1
 80192f6:	b2ed      	uxtb	r5, r5
 80192f8:	e7c5      	b.n	8019286 <tcp_slowtmr+0x202>
      tcp_err_fn err_fn = pcb->errf;
 80192fa:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 80192fe:	4620      	mov	r0, r4
 8019300:	f7ff fe9e 	bl	8019040 <tcp_pcb_purge>
      if (prev != NULL) {
 8019304:	2e00      	cmp	r6, #0
 8019306:	d03f      	beq.n	8019388 <tcp_slowtmr+0x304>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019308:	4b10      	ldr	r3, [pc, #64]	; (801934c <tcp_slowtmr+0x2c8>)
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	429c      	cmp	r4, r3
 801930e:	d033      	beq.n	8019378 <tcp_slowtmr+0x2f4>
        prev->next = pcb->next;
 8019310:	68e3      	ldr	r3, [r4, #12]
 8019312:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 8019314:	2f00      	cmp	r7, #0
 8019316:	d146      	bne.n	80193a6 <tcp_slowtmr+0x322>
      err_arg = pcb->callback_arg;
 8019318:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 801931c:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 801931e:	4621      	mov	r1, r4
 8019320:	2000      	movs	r0, #0
 8019322:	f7fe ff21 	bl	8018168 <memp_free>
      tcp_active_pcbs_changed = 0;
 8019326:	2200      	movs	r2, #0
 8019328:	4b12      	ldr	r3, [pc, #72]	; (8019374 <tcp_slowtmr+0x2f0>)
 801932a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801932c:	b11d      	cbz	r5, 8019336 <tcp_slowtmr+0x2b2>
 801932e:	f06f 010c 	mvn.w	r1, #12
 8019332:	4640      	mov	r0, r8
 8019334:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8019336:	4b0f      	ldr	r3, [pc, #60]	; (8019374 <tcp_slowtmr+0x2f0>)
 8019338:	781b      	ldrb	r3, [r3, #0]
 801933a:	2b00      	cmp	r3, #0
 801933c:	f47f aead 	bne.w	801909a <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8019340:	463c      	mov	r4, r7
 8019342:	e6c7      	b.n	80190d4 <tcp_slowtmr+0x50>
 8019344:	20015cc8 	.word	0x20015cc8
 8019348:	200102ae 	.word	0x200102ae
 801934c:	20015cc4 	.word	0x20015cc4
 8019350:	08026284 	.word	0x08026284
 8019354:	0802641c 	.word	0x0802641c
 8019358:	080214f0 	.word	0x080214f0
 801935c:	08026448 	.word	0x08026448
 8019360:	08026474 	.word	0x08026474
 8019364:	08026358 	.word	0x08026358
 8019368:	080261f8 	.word	0x080261f8
 801936c:	10624dd3 	.word	0x10624dd3
 8019370:	000124f8 	.word	0x000124f8
 8019374:	20015cc0 	.word	0x20015cc0
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019378:	4b39      	ldr	r3, [pc, #228]	; (8019460 <tcp_slowtmr+0x3dc>)
 801937a:	f240 4289 	movw	r2, #1161	; 0x489
 801937e:	4939      	ldr	r1, [pc, #228]	; (8019464 <tcp_slowtmr+0x3e0>)
 8019380:	4839      	ldr	r0, [pc, #228]	; (8019468 <tcp_slowtmr+0x3e4>)
 8019382:	f006 fbb4 	bl	801faee <iprintf>
 8019386:	e7c3      	b.n	8019310 <tcp_slowtmr+0x28c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8019388:	4b38      	ldr	r3, [pc, #224]	; (801946c <tcp_slowtmr+0x3e8>)
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	429c      	cmp	r4, r3
 801938e:	d006      	beq.n	801939e <tcp_slowtmr+0x31a>
 8019390:	4b33      	ldr	r3, [pc, #204]	; (8019460 <tcp_slowtmr+0x3dc>)
 8019392:	f240 428d 	movw	r2, #1165	; 0x48d
 8019396:	4936      	ldr	r1, [pc, #216]	; (8019470 <tcp_slowtmr+0x3ec>)
 8019398:	4833      	ldr	r0, [pc, #204]	; (8019468 <tcp_slowtmr+0x3e4>)
 801939a:	f006 fba8 	bl	801faee <iprintf>
        tcp_active_pcbs = pcb->next;
 801939e:	68e2      	ldr	r2, [r4, #12]
 80193a0:	4b32      	ldr	r3, [pc, #200]	; (801946c <tcp_slowtmr+0x3e8>)
 80193a2:	601a      	str	r2, [r3, #0]
 80193a4:	e7b6      	b.n	8019314 <tcp_slowtmr+0x290>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80193a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80193a8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80193aa:	8b23      	ldrh	r3, [r4, #24]
 80193ac:	9301      	str	r3, [sp, #4]
 80193ae:	8ae3      	ldrh	r3, [r4, #22]
 80193b0:	9300      	str	r3, [sp, #0]
 80193b2:	1d23      	adds	r3, r4, #4
 80193b4:	4622      	mov	r2, r4
 80193b6:	f002 fe93 	bl	801c0e0 <tcp_rst>
 80193ba:	e7ad      	b.n	8019318 <tcp_slowtmr+0x294>
        TCP_EVENT_POLL(prev, err);
 80193bc:	2000      	movs	r0, #0
 80193be:	e779      	b.n	80192b4 <tcp_slowtmr+0x230>
          tcp_output(prev);
 80193c0:	4620      	mov	r0, r4
 80193c2:	f002 fd31 	bl	801be28 <tcp_output>
      prev = pcb;
 80193c6:	4626      	mov	r6, r4
      pcb = pcb->next;
 80193c8:	462c      	mov	r4, r5
 80193ca:	e683      	b.n	80190d4 <tcp_slowtmr+0x50>
      prev = pcb;
 80193cc:	4626      	mov	r6, r4
      pcb = pcb->next;
 80193ce:	462c      	mov	r4, r5
 80193d0:	e680      	b.n	80190d4 <tcp_slowtmr+0x50>
  pcb = tcp_tw_pcbs;
 80193d2:	4b28      	ldr	r3, [pc, #160]	; (8019474 <tcp_slowtmr+0x3f0>)
 80193d4:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 80193d6:	e003      	b.n	80193e0 <tcp_slowtmr+0x35c>
      ++pcb_remove;
 80193d8:	2301      	movs	r3, #1
    if (pcb_remove) {
 80193da:	b9ab      	cbnz	r3, 8019408 <tcp_slowtmr+0x384>
      prev = pcb;
 80193dc:	462c      	mov	r4, r5
      pcb = pcb->next;
 80193de:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 80193e0:	2d00      	cmp	r5, #0
 80193e2:	d039      	beq.n	8019458 <tcp_slowtmr+0x3d4>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80193e4:	7d2b      	ldrb	r3, [r5, #20]
 80193e6:	2b0a      	cmp	r3, #10
 80193e8:	d006      	beq.n	80193f8 <tcp_slowtmr+0x374>
 80193ea:	4b1d      	ldr	r3, [pc, #116]	; (8019460 <tcp_slowtmr+0x3dc>)
 80193ec:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80193f0:	4921      	ldr	r1, [pc, #132]	; (8019478 <tcp_slowtmr+0x3f4>)
 80193f2:	481d      	ldr	r0, [pc, #116]	; (8019468 <tcp_slowtmr+0x3e4>)
 80193f4:	f006 fb7b 	bl	801faee <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80193f8:	6a2a      	ldr	r2, [r5, #32]
 80193fa:	4b20      	ldr	r3, [pc, #128]	; (801947c <tcp_slowtmr+0x3f8>)
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	1a9b      	subs	r3, r3, r2
 8019400:	2bf0      	cmp	r3, #240	; 0xf0
 8019402:	d8e9      	bhi.n	80193d8 <tcp_slowtmr+0x354>
    pcb_remove = 0;
 8019404:	2300      	movs	r3, #0
 8019406:	e7e8      	b.n	80193da <tcp_slowtmr+0x356>
      tcp_pcb_purge(pcb);
 8019408:	4628      	mov	r0, r5
 801940a:	f7ff fe19 	bl	8019040 <tcp_pcb_purge>
      if (prev != NULL) {
 801940e:	b1a4      	cbz	r4, 801943a <tcp_slowtmr+0x3b6>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8019410:	4b18      	ldr	r3, [pc, #96]	; (8019474 <tcp_slowtmr+0x3f0>)
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	429d      	cmp	r5, r3
 8019416:	d008      	beq.n	801942a <tcp_slowtmr+0x3a6>
        prev->next = pcb->next;
 8019418:	68eb      	ldr	r3, [r5, #12]
 801941a:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 801941c:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 801941e:	4629      	mov	r1, r5
 8019420:	2000      	movs	r0, #0
 8019422:	f7fe fea1 	bl	8018168 <memp_free>
      pcb = pcb->next;
 8019426:	4635      	mov	r5, r6
 8019428:	e7da      	b.n	80193e0 <tcp_slowtmr+0x35c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801942a:	4b0d      	ldr	r3, [pc, #52]	; (8019460 <tcp_slowtmr+0x3dc>)
 801942c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8019430:	4913      	ldr	r1, [pc, #76]	; (8019480 <tcp_slowtmr+0x3fc>)
 8019432:	480d      	ldr	r0, [pc, #52]	; (8019468 <tcp_slowtmr+0x3e4>)
 8019434:	f006 fb5b 	bl	801faee <iprintf>
 8019438:	e7ee      	b.n	8019418 <tcp_slowtmr+0x394>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801943a:	4b0e      	ldr	r3, [pc, #56]	; (8019474 <tcp_slowtmr+0x3f0>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	429d      	cmp	r5, r3
 8019440:	d006      	beq.n	8019450 <tcp_slowtmr+0x3cc>
 8019442:	4b07      	ldr	r3, [pc, #28]	; (8019460 <tcp_slowtmr+0x3dc>)
 8019444:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8019448:	490e      	ldr	r1, [pc, #56]	; (8019484 <tcp_slowtmr+0x400>)
 801944a:	4807      	ldr	r0, [pc, #28]	; (8019468 <tcp_slowtmr+0x3e4>)
 801944c:	f006 fb4f 	bl	801faee <iprintf>
        tcp_tw_pcbs = pcb->next;
 8019450:	68ea      	ldr	r2, [r5, #12]
 8019452:	4b08      	ldr	r3, [pc, #32]	; (8019474 <tcp_slowtmr+0x3f0>)
 8019454:	601a      	str	r2, [r3, #0]
 8019456:	e7e1      	b.n	801941c <tcp_slowtmr+0x398>
}
 8019458:	b002      	add	sp, #8
 801945a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801945e:	bf00      	nop
 8019460:	08026284 	.word	0x08026284
 8019464:	080264a4 	.word	0x080264a4
 8019468:	080214f0 	.word	0x080214f0
 801946c:	20015cc4 	.word	0x20015cc4
 8019470:	080264d0 	.word	0x080264d0
 8019474:	20015cd4 	.word	0x20015cd4
 8019478:	080264fc 	.word	0x080264fc
 801947c:	20015cc8 	.word	0x20015cc8
 8019480:	0802652c 	.word	0x0802652c
 8019484:	08026554 	.word	0x08026554

08019488 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8019488:	b510      	push	{r4, lr}
 801948a:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 801948c:	6803      	ldr	r3, [r0, #0]
 801948e:	428b      	cmp	r3, r1
 8019490:	d005      	beq.n	801949e <tcp_pcb_remove+0x16>
 8019492:	b14b      	cbz	r3, 80194a8 <tcp_pcb_remove+0x20>
 8019494:	68da      	ldr	r2, [r3, #12]
 8019496:	4294      	cmp	r4, r2
 8019498:	d004      	beq.n	80194a4 <tcp_pcb_remove+0x1c>
 801949a:	4613      	mov	r3, r2
 801949c:	e7f9      	b.n	8019492 <tcp_pcb_remove+0xa>
 801949e:	68db      	ldr	r3, [r3, #12]
 80194a0:	6003      	str	r3, [r0, #0]
 80194a2:	e001      	b.n	80194a8 <tcp_pcb_remove+0x20>
 80194a4:	68e2      	ldr	r2, [r4, #12]
 80194a6:	60da      	str	r2, [r3, #12]
 80194a8:	2300      	movs	r3, #0
 80194aa:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 80194ac:	4620      	mov	r0, r4
 80194ae:	f7ff fdc7 	bl	8019040 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80194b2:	7d23      	ldrb	r3, [r4, #20]
 80194b4:	2b0a      	cmp	r3, #10
 80194b6:	d005      	beq.n	80194c4 <tcp_pcb_remove+0x3c>
 80194b8:	2b01      	cmp	r3, #1
 80194ba:	d003      	beq.n	80194c4 <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80194bc:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 80194be:	f013 0f01 	tst.w	r3, #1
 80194c2:	d121      	bne.n	8019508 <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 80194c4:	7d23      	ldrb	r3, [r4, #20]
 80194c6:	2b01      	cmp	r3, #1
 80194c8:	d01a      	beq.n	8019500 <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80194ca:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80194cc:	b133      	cbz	r3, 80194dc <tcp_pcb_remove+0x54>
 80194ce:	4b12      	ldr	r3, [pc, #72]	; (8019518 <tcp_pcb_remove+0x90>)
 80194d0:	f240 7253 	movw	r2, #1875	; 0x753
 80194d4:	4911      	ldr	r1, [pc, #68]	; (801951c <tcp_pcb_remove+0x94>)
 80194d6:	4812      	ldr	r0, [pc, #72]	; (8019520 <tcp_pcb_remove+0x98>)
 80194d8:	f006 fb09 	bl	801faee <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80194dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80194de:	b133      	cbz	r3, 80194ee <tcp_pcb_remove+0x66>
 80194e0:	4b0d      	ldr	r3, [pc, #52]	; (8019518 <tcp_pcb_remove+0x90>)
 80194e2:	f240 7254 	movw	r2, #1876	; 0x754
 80194e6:	490f      	ldr	r1, [pc, #60]	; (8019524 <tcp_pcb_remove+0x9c>)
 80194e8:	480d      	ldr	r0, [pc, #52]	; (8019520 <tcp_pcb_remove+0x98>)
 80194ea:	f006 fb00 	bl	801faee <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80194ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80194f0:	b133      	cbz	r3, 8019500 <tcp_pcb_remove+0x78>
 80194f2:	4b09      	ldr	r3, [pc, #36]	; (8019518 <tcp_pcb_remove+0x90>)
 80194f4:	f240 7256 	movw	r2, #1878	; 0x756
 80194f8:	490b      	ldr	r1, [pc, #44]	; (8019528 <tcp_pcb_remove+0xa0>)
 80194fa:	4809      	ldr	r0, [pc, #36]	; (8019520 <tcp_pcb_remove+0x98>)
 80194fc:	f006 faf7 	bl	801faee <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8019500:	2300      	movs	r3, #0
 8019502:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8019504:	82e3      	strh	r3, [r4, #22]
 8019506:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 8019508:	f043 0302 	orr.w	r3, r3, #2
 801950c:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 801950e:	4620      	mov	r0, r4
 8019510:	f002 fc8a 	bl	801be28 <tcp_output>
 8019514:	e7d6      	b.n	80194c4 <tcp_pcb_remove+0x3c>
 8019516:	bf00      	nop
 8019518:	08026284 	.word	0x08026284
 801951c:	0802630c 	.word	0x0802630c
 8019520:	080214f0 	.word	0x080214f0
 8019524:	08026324 	.word	0x08026324
 8019528:	08026340 	.word	0x08026340

0801952c <tcp_close_shutdown>:
{
 801952c:	b510      	push	{r4, lr}
 801952e:	b082      	sub	sp, #8
 8019530:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8019532:	b121      	cbz	r1, 801953e <tcp_close_shutdown+0x12>
 8019534:	7d03      	ldrb	r3, [r0, #20]
 8019536:	2b04      	cmp	r3, #4
 8019538:	d00c      	beq.n	8019554 <tcp_close_shutdown+0x28>
 801953a:	2b07      	cmp	r3, #7
 801953c:	d00a      	beq.n	8019554 <tcp_close_shutdown+0x28>
  switch (pcb->state) {
 801953e:	7d23      	ldrb	r3, [r4, #20]
 8019540:	2b01      	cmp	r3, #1
 8019542:	d072      	beq.n	801962a <tcp_close_shutdown+0xfe>
 8019544:	2b00      	cmp	r3, #0
 8019546:	d055      	beq.n	80195f4 <tcp_close_shutdown+0xc8>
 8019548:	2b02      	cmp	r3, #2
 801954a:	d07b      	beq.n	8019644 <tcp_close_shutdown+0x118>
    return tcp_close_shutdown_fin(pcb);
 801954c:	4620      	mov	r0, r4
 801954e:	f7ff fb65 	bl	8018c1c <tcp_close_shutdown_fin>
 8019552:	e068      	b.n	8019626 <tcp_close_shutdown+0xfa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019554:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8019556:	b1d3      	cbz	r3, 801958e <tcp_close_shutdown+0x62>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019558:	7ea3      	ldrb	r3, [r4, #26]
 801955a:	f013 0f10 	tst.w	r3, #16
 801955e:	d01b      	beq.n	8019598 <tcp_close_shutdown+0x6c>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019560:	8b23      	ldrh	r3, [r4, #24]
 8019562:	9301      	str	r3, [sp, #4]
 8019564:	8ae3      	ldrh	r3, [r4, #22]
 8019566:	9300      	str	r3, [sp, #0]
 8019568:	1d23      	adds	r3, r4, #4
 801956a:	4622      	mov	r2, r4
 801956c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801956e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8019570:	f002 fdb6 	bl	801c0e0 <tcp_rst>
      tcp_pcb_purge(pcb);
 8019574:	4620      	mov	r0, r4
 8019576:	f7ff fd63 	bl	8019040 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801957a:	4b39      	ldr	r3, [pc, #228]	; (8019660 <tcp_close_shutdown+0x134>)
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	429c      	cmp	r4, r3
 8019580:	d012      	beq.n	80195a8 <tcp_close_shutdown+0x7c>
 8019582:	b1bb      	cbz	r3, 80195b4 <tcp_close_shutdown+0x88>
 8019584:	68da      	ldr	r2, [r3, #12]
 8019586:	4294      	cmp	r4, r2
 8019588:	d012      	beq.n	80195b0 <tcp_close_shutdown+0x84>
 801958a:	4613      	mov	r3, r2
 801958c:	e7f9      	b.n	8019582 <tcp_close_shutdown+0x56>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801958e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8019590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019594:	d1e0      	bne.n	8019558 <tcp_close_shutdown+0x2c>
 8019596:	e7d2      	b.n	801953e <tcp_close_shutdown+0x12>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019598:	4b32      	ldr	r3, [pc, #200]	; (8019664 <tcp_close_shutdown+0x138>)
 801959a:	f240 120f 	movw	r2, #271	; 0x10f
 801959e:	4932      	ldr	r1, [pc, #200]	; (8019668 <tcp_close_shutdown+0x13c>)
 80195a0:	4832      	ldr	r0, [pc, #200]	; (801966c <tcp_close_shutdown+0x140>)
 80195a2:	f006 faa4 	bl	801faee <iprintf>
 80195a6:	e7db      	b.n	8019560 <tcp_close_shutdown+0x34>
      TCP_RMV_ACTIVE(pcb);
 80195a8:	68da      	ldr	r2, [r3, #12]
 80195aa:	4b2d      	ldr	r3, [pc, #180]	; (8019660 <tcp_close_shutdown+0x134>)
 80195ac:	601a      	str	r2, [r3, #0]
 80195ae:	e001      	b.n	80195b4 <tcp_close_shutdown+0x88>
 80195b0:	68e2      	ldr	r2, [r4, #12]
 80195b2:	60da      	str	r2, [r3, #12]
 80195b4:	2300      	movs	r3, #0
 80195b6:	60e3      	str	r3, [r4, #12]
 80195b8:	2201      	movs	r2, #1
 80195ba:	4b2d      	ldr	r3, [pc, #180]	; (8019670 <tcp_close_shutdown+0x144>)
 80195bc:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80195be:	7d23      	ldrb	r3, [r4, #20]
 80195c0:	2b04      	cmp	r3, #4
 80195c2:	d009      	beq.n	80195d8 <tcp_close_shutdown+0xac>
        if (tcp_input_pcb == pcb) {
 80195c4:	4b2b      	ldr	r3, [pc, #172]	; (8019674 <tcp_close_shutdown+0x148>)
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	429c      	cmp	r4, r3
 80195ca:	d00f      	beq.n	80195ec <tcp_close_shutdown+0xc0>
          memp_free(MEMP_TCP_PCB, pcb);
 80195cc:	4621      	mov	r1, r4
 80195ce:	2000      	movs	r0, #0
 80195d0:	f7fe fdca 	bl	8018168 <memp_free>
      return ERR_OK;
 80195d4:	2000      	movs	r0, #0
 80195d6:	e026      	b.n	8019626 <tcp_close_shutdown+0xfa>
        pcb->state = TIME_WAIT;
 80195d8:	230a      	movs	r3, #10
 80195da:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80195dc:	4b26      	ldr	r3, [pc, #152]	; (8019678 <tcp_close_shutdown+0x14c>)
 80195de:	681a      	ldr	r2, [r3, #0]
 80195e0:	60e2      	str	r2, [r4, #12]
 80195e2:	601c      	str	r4, [r3, #0]
 80195e4:	f002 ff88 	bl	801c4f8 <tcp_timer_needed>
      return ERR_OK;
 80195e8:	2000      	movs	r0, #0
 80195ea:	e01c      	b.n	8019626 <tcp_close_shutdown+0xfa>
          tcp_trigger_input_pcb_close();
 80195ec:	f001 fecc 	bl	801b388 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 80195f0:	2000      	movs	r0, #0
 80195f2:	e018      	b.n	8019626 <tcp_close_shutdown+0xfa>
    if (pcb->local_port != 0) {
 80195f4:	8ae3      	ldrh	r3, [r4, #22]
 80195f6:	b18b      	cbz	r3, 801961c <tcp_close_shutdown+0xf0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80195f8:	4b20      	ldr	r3, [pc, #128]	; (801967c <tcp_close_shutdown+0x150>)
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	429c      	cmp	r4, r3
 80195fe:	d005      	beq.n	801960c <tcp_close_shutdown+0xe0>
 8019600:	b153      	cbz	r3, 8019618 <tcp_close_shutdown+0xec>
 8019602:	68da      	ldr	r2, [r3, #12]
 8019604:	4294      	cmp	r4, r2
 8019606:	d005      	beq.n	8019614 <tcp_close_shutdown+0xe8>
 8019608:	4613      	mov	r3, r2
 801960a:	e7f9      	b.n	8019600 <tcp_close_shutdown+0xd4>
 801960c:	68da      	ldr	r2, [r3, #12]
 801960e:	4b1b      	ldr	r3, [pc, #108]	; (801967c <tcp_close_shutdown+0x150>)
 8019610:	601a      	str	r2, [r3, #0]
 8019612:	e001      	b.n	8019618 <tcp_close_shutdown+0xec>
 8019614:	68e2      	ldr	r2, [r4, #12]
 8019616:	60da      	str	r2, [r3, #12]
 8019618:	2300      	movs	r3, #0
 801961a:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 801961c:	4621      	mov	r1, r4
 801961e:	2000      	movs	r0, #0
 8019620:	f7fe fda2 	bl	8018168 <memp_free>
  return ERR_OK;
 8019624:	2000      	movs	r0, #0
}
 8019626:	b002      	add	sp, #8
 8019628:	bd10      	pop	{r4, pc}
    tcp_listen_closed(pcb);
 801962a:	4620      	mov	r0, r4
 801962c:	f7ff facc 	bl	8018bc8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8019630:	4621      	mov	r1, r4
 8019632:	4813      	ldr	r0, [pc, #76]	; (8019680 <tcp_close_shutdown+0x154>)
 8019634:	f7ff ff28 	bl	8019488 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8019638:	4621      	mov	r1, r4
 801963a:	2001      	movs	r0, #1
 801963c:	f7fe fd94 	bl	8018168 <memp_free>
  return ERR_OK;
 8019640:	2000      	movs	r0, #0
    break;
 8019642:	e7f0      	b.n	8019626 <tcp_close_shutdown+0xfa>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8019644:	4621      	mov	r1, r4
 8019646:	4806      	ldr	r0, [pc, #24]	; (8019660 <tcp_close_shutdown+0x134>)
 8019648:	f7ff ff1e 	bl	8019488 <tcp_pcb_remove>
 801964c:	2201      	movs	r2, #1
 801964e:	4b08      	ldr	r3, [pc, #32]	; (8019670 <tcp_close_shutdown+0x144>)
 8019650:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8019652:	4621      	mov	r1, r4
 8019654:	2000      	movs	r0, #0
 8019656:	f7fe fd87 	bl	8018168 <memp_free>
  return ERR_OK;
 801965a:	2000      	movs	r0, #0
    break;
 801965c:	e7e3      	b.n	8019626 <tcp_close_shutdown+0xfa>
 801965e:	bf00      	nop
 8019660:	20015cc4 	.word	0x20015cc4
 8019664:	08026284 	.word	0x08026284
 8019668:	08026230 	.word	0x08026230
 801966c:	080214f0 	.word	0x080214f0
 8019670:	20015cc0 	.word	0x20015cc0
 8019674:	20015cd8 	.word	0x20015cd8
 8019678:	20015cd4 	.word	0x20015cd4
 801967c:	20015cd0 	.word	0x20015cd0
 8019680:	20015ccc 	.word	0x20015ccc

08019684 <tcp_close>:
{
 8019684:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 8019686:	7d03      	ldrb	r3, [r0, #20]
 8019688:	2b01      	cmp	r3, #1
 801968a:	d003      	beq.n	8019694 <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 801968c:	7e83      	ldrb	r3, [r0, #26]
 801968e:	f043 0310 	orr.w	r3, r3, #16
 8019692:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8019694:	2101      	movs	r1, #1
 8019696:	f7ff ff49 	bl	801952c <tcp_close_shutdown>
}
 801969a:	bd08      	pop	{r3, pc}

0801969c <tcp_recv_null>:
{
 801969c:	b510      	push	{r4, lr}
 801969e:	4608      	mov	r0, r1
  if (p != NULL) {
 80196a0:	b142      	cbz	r2, 80196b4 <tcp_recv_null+0x18>
 80196a2:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 80196a4:	8911      	ldrh	r1, [r2, #8]
 80196a6:	f7ff fbed 	bl	8018e84 <tcp_recved>
    pbuf_free(p);
 80196aa:	4620      	mov	r0, r4
 80196ac:	f7fe ff48 	bl	8018540 <pbuf_free>
  return ERR_OK;
 80196b0:	2000      	movs	r0, #0
 80196b2:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80196b4:	b10b      	cbz	r3, 80196ba <tcp_recv_null+0x1e>
  return ERR_OK;
 80196b6:	2000      	movs	r0, #0
}
 80196b8:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 80196ba:	f7ff ffe3 	bl	8019684 <tcp_close>
 80196be:	bd10      	pop	{r4, pc}

080196c0 <tcp_process_refused_data>:
{
 80196c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196c2:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 80196c4:	6f46      	ldr	r6, [r0, #116]	; 0x74
 80196c6:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80196c8:	2300      	movs	r3, #0
 80196ca:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80196cc:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 80196d0:	b1dd      	cbz	r5, 801970a <tcp_process_refused_data+0x4a>
 80196d2:	4632      	mov	r2, r6
 80196d4:	4601      	mov	r1, r0
 80196d6:	6900      	ldr	r0, [r0, #16]
 80196d8:	47a8      	blx	r5
 80196da:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80196dc:	b9fd      	cbnz	r5, 801971e <tcp_process_refused_data+0x5e>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80196de:	f017 0f20 	tst.w	r7, #32
 80196e2:	d022      	beq.n	801972a <tcp_process_refused_data+0x6a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80196e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80196e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80196ea:	d001      	beq.n	80196f0 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 80196ec:	3301      	adds	r3, #1
 80196ee:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80196f0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80196f4:	b18e      	cbz	r6, 801971a <tcp_process_refused_data+0x5a>
 80196f6:	2300      	movs	r3, #0
 80196f8:	461a      	mov	r2, r3
 80196fa:	4621      	mov	r1, r4
 80196fc:	6920      	ldr	r0, [r4, #16]
 80196fe:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8019700:	f110 0f0d 	cmn.w	r0, #13
 8019704:	d111      	bne.n	801972a <tcp_process_refused_data+0x6a>
          return ERR_ABRT;
 8019706:	4605      	mov	r5, r0
 8019708:	e00f      	b.n	801972a <tcp_process_refused_data+0x6a>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801970a:	2300      	movs	r3, #0
 801970c:	4632      	mov	r2, r6
 801970e:	4601      	mov	r1, r0
 8019710:	4618      	mov	r0, r3
 8019712:	f7ff ffc3 	bl	801969c <tcp_recv_null>
 8019716:	4605      	mov	r5, r0
 8019718:	e7e0      	b.n	80196dc <tcp_process_refused_data+0x1c>
        TCP_EVENT_CLOSED(pcb, err);
 801971a:	4628      	mov	r0, r5
 801971c:	e7f0      	b.n	8019700 <tcp_process_refused_data+0x40>
    } else if (err == ERR_ABRT) {
 801971e:	f115 0f0d 	cmn.w	r5, #13
 8019722:	d002      	beq.n	801972a <tcp_process_refused_data+0x6a>
      pcb->refused_data = refused_data;
 8019724:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8019726:	f06f 0504 	mvn.w	r5, #4
}
 801972a:	4628      	mov	r0, r5
 801972c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019730 <tcp_fasttmr>:
{
 8019730:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8019732:	4a1c      	ldr	r2, [pc, #112]	; (80197a4 <tcp_fasttmr+0x74>)
 8019734:	7813      	ldrb	r3, [r2, #0]
 8019736:	3301      	adds	r3, #1
 8019738:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 801973a:	4b1b      	ldr	r3, [pc, #108]	; (80197a8 <tcp_fasttmr+0x78>)
 801973c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801973e:	e013      	b.n	8019768 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 8019740:	f043 0302 	orr.w	r3, r3, #2
 8019744:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8019746:	4620      	mov	r0, r4
 8019748:	f002 fb6e 	bl	801be28 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801974c:	7ea3      	ldrb	r3, [r4, #26]
 801974e:	f023 0303 	bic.w	r3, r3, #3
 8019752:	76a3      	strb	r3, [r4, #26]
 8019754:	e013      	b.n	801977e <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 8019756:	f023 0308 	bic.w	r3, r3, #8
 801975a:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801975c:	4620      	mov	r0, r4
 801975e:	f7ff fa5d 	bl	8018c1c <tcp_close_shutdown_fin>
 8019762:	e010      	b.n	8019786 <tcp_fasttmr+0x56>
      pcb = pcb->next;
 8019764:	68e5      	ldr	r5, [r4, #12]
{
 8019766:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8019768:	b1dc      	cbz	r4, 80197a2 <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 801976a:	7f62      	ldrb	r2, [r4, #29]
 801976c:	4b0d      	ldr	r3, [pc, #52]	; (80197a4 <tcp_fasttmr+0x74>)
 801976e:	781b      	ldrb	r3, [r3, #0]
 8019770:	429a      	cmp	r2, r3
 8019772:	d0f7      	beq.n	8019764 <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 8019774:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8019776:	7ea3      	ldrb	r3, [r4, #26]
 8019778:	f013 0f01 	tst.w	r3, #1
 801977c:	d1e0      	bne.n	8019740 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 801977e:	7ea3      	ldrb	r3, [r4, #26]
 8019780:	f013 0f08 	tst.w	r3, #8
 8019784:	d1e7      	bne.n	8019756 <tcp_fasttmr+0x26>
      next = pcb->next;
 8019786:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 8019788:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801978a:	2b00      	cmp	r3, #0
 801978c:	d0eb      	beq.n	8019766 <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 801978e:	4e07      	ldr	r6, [pc, #28]	; (80197ac <tcp_fasttmr+0x7c>)
 8019790:	2300      	movs	r3, #0
 8019792:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8019794:	4620      	mov	r0, r4
 8019796:	f7ff ff93 	bl	80196c0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801979a:	7833      	ldrb	r3, [r6, #0]
 801979c:	2b00      	cmp	r3, #0
 801979e:	d0e2      	beq.n	8019766 <tcp_fasttmr+0x36>
 80197a0:	e7cb      	b.n	801973a <tcp_fasttmr+0xa>
}
 80197a2:	bd70      	pop	{r4, r5, r6, pc}
 80197a4:	200102ae 	.word	0x200102ae
 80197a8:	20015cc4 	.word	0x20015cc4
 80197ac:	20015cc0 	.word	0x20015cc0

080197b0 <tcp_tmr>:
{
 80197b0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80197b2:	f7ff ffbd 	bl	8019730 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80197b6:	4a06      	ldr	r2, [pc, #24]	; (80197d0 <tcp_tmr+0x20>)
 80197b8:	7813      	ldrb	r3, [r2, #0]
 80197ba:	3301      	adds	r3, #1
 80197bc:	b2db      	uxtb	r3, r3
 80197be:	7013      	strb	r3, [r2, #0]
 80197c0:	f013 0f01 	tst.w	r3, #1
 80197c4:	d100      	bne.n	80197c8 <tcp_tmr+0x18>
 80197c6:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80197c8:	f7ff fc5c 	bl	8019084 <tcp_slowtmr>
}
 80197cc:	e7fb      	b.n	80197c6 <tcp_tmr+0x16>
 80197ce:	bf00      	nop
 80197d0:	200102ad 	.word	0x200102ad

080197d4 <tcp_shutdown>:
  if (pcb->state == LISTEN) {
 80197d4:	7d03      	ldrb	r3, [r0, #20]
 80197d6:	2b01      	cmp	r3, #1
 80197d8:	d020      	beq.n	801981c <tcp_shutdown+0x48>
{
 80197da:	b570      	push	{r4, r5, r6, lr}
 80197dc:	4616      	mov	r6, r2
 80197de:	460d      	mov	r5, r1
 80197e0:	4604      	mov	r4, r0
  if (shut_rx) {
 80197e2:	b151      	cbz	r1, 80197fa <tcp_shutdown+0x26>
    pcb->flags |= TF_RXCLOSED;
 80197e4:	7e83      	ldrb	r3, [r0, #26]
 80197e6:	f043 0310 	orr.w	r3, r3, #16
 80197ea:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 80197ec:	b992      	cbnz	r2, 8019814 <tcp_shutdown+0x40>
    if (pcb->refused_data != NULL) {
 80197ee:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80197f0:	b118      	cbz	r0, 80197fa <tcp_shutdown+0x26>
      pbuf_free(pcb->refused_data);
 80197f2:	f7fe fea5 	bl	8018540 <pbuf_free>
      pcb->refused_data = NULL;
 80197f6:	2300      	movs	r3, #0
 80197f8:	6763      	str	r3, [r4, #116]	; 0x74
  if (shut_tx) {
 80197fa:	b196      	cbz	r6, 8019822 <tcp_shutdown+0x4e>
    switch (pcb->state) {
 80197fc:	7d23      	ldrb	r3, [r4, #20]
 80197fe:	2b03      	cmp	r3, #3
 8019800:	d311      	bcc.n	8019826 <tcp_shutdown+0x52>
 8019802:	2b04      	cmp	r3, #4
 8019804:	d901      	bls.n	801980a <tcp_shutdown+0x36>
 8019806:	2b07      	cmp	r3, #7
 8019808:	d10d      	bne.n	8019826 <tcp_shutdown+0x52>
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801980a:	b2e9      	uxtb	r1, r5
 801980c:	4620      	mov	r0, r4
 801980e:	f7ff fe8d 	bl	801952c <tcp_close_shutdown>
 8019812:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 8019814:	2101      	movs	r1, #1
 8019816:	f7ff fe89 	bl	801952c <tcp_close_shutdown>
 801981a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_CONN;
 801981c:	f06f 000a 	mvn.w	r0, #10
 8019820:	4770      	bx	lr
  return ERR_OK;
 8019822:	2000      	movs	r0, #0
 8019824:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_CONN;
 8019826:	f06f 000a 	mvn.w	r0, #10
}
 801982a:	bd70      	pop	{r4, r5, r6, pc}

0801982c <tcp_abandon>:
{
 801982c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019830:	b082      	sub	sp, #8
 8019832:	4604      	mov	r4, r0
 8019834:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019836:	7d03      	ldrb	r3, [r0, #20]
 8019838:	2b01      	cmp	r3, #1
 801983a:	d01a      	beq.n	8019872 <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 801983c:	7d23      	ldrb	r3, [r4, #20]
 801983e:	2b0a      	cmp	r3, #10
 8019840:	d01f      	beq.n	8019882 <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 8019842:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8019846:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 801984a:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 801984e:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8019850:	2b00      	cmp	r3, #0
 8019852:	d141      	bne.n	80198d8 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 8019854:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8019858:	f1ba 0f00 	cmp.w	sl, #0
 801985c:	d046      	beq.n	80198ec <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801985e:	4b2a      	ldr	r3, [pc, #168]	; (8019908 <tcp_abandon+0xdc>)
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	429c      	cmp	r4, r3
 8019864:	d016      	beq.n	8019894 <tcp_abandon+0x68>
 8019866:	b1db      	cbz	r3, 80198a0 <tcp_abandon+0x74>
 8019868:	68da      	ldr	r2, [r3, #12]
 801986a:	4294      	cmp	r4, r2
 801986c:	d016      	beq.n	801989c <tcp_abandon+0x70>
 801986e:	4613      	mov	r3, r2
 8019870:	e7f9      	b.n	8019866 <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019872:	4b26      	ldr	r3, [pc, #152]	; (801990c <tcp_abandon+0xe0>)
 8019874:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019878:	4925      	ldr	r1, [pc, #148]	; (8019910 <tcp_abandon+0xe4>)
 801987a:	4826      	ldr	r0, [pc, #152]	; (8019914 <tcp_abandon+0xe8>)
 801987c:	f006 f937 	bl	801faee <iprintf>
 8019880:	e7dc      	b.n	801983c <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8019882:	4621      	mov	r1, r4
 8019884:	4824      	ldr	r0, [pc, #144]	; (8019918 <tcp_abandon+0xec>)
 8019886:	f7ff fdff 	bl	8019488 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 801988a:	4621      	mov	r1, r4
 801988c:	2000      	movs	r0, #0
 801988e:	f7fe fc6b 	bl	8018168 <memp_free>
 8019892:	e01e      	b.n	80198d2 <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019894:	68da      	ldr	r2, [r3, #12]
 8019896:	4b1c      	ldr	r3, [pc, #112]	; (8019908 <tcp_abandon+0xdc>)
 8019898:	601a      	str	r2, [r3, #0]
 801989a:	e001      	b.n	80198a0 <tcp_abandon+0x74>
 801989c:	68e2      	ldr	r2, [r4, #12]
 801989e:	60da      	str	r2, [r3, #12]
 80198a0:	2500      	movs	r5, #0
 80198a2:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 80198a4:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 80198a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80198a8:	b108      	cbz	r0, 80198ae <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 80198aa:	f7ff fb3a 	bl	8018f22 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80198ae:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80198b0:	b108      	cbz	r0, 80198b6 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 80198b2:	f7ff fb36 	bl	8018f22 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80198b6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80198b8:	b108      	cbz	r0, 80198be <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 80198ba:	f7ff fb32 	bl	8018f22 <tcp_segs_free>
    if (send_rst) {
 80198be:	b9bd      	cbnz	r5, 80198f0 <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 80198c0:	4621      	mov	r1, r4
 80198c2:	2000      	movs	r0, #0
 80198c4:	f7fe fc50 	bl	8018168 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80198c8:	b11e      	cbz	r6, 80198d2 <tcp_abandon+0xa6>
 80198ca:	f06f 010c 	mvn.w	r1, #12
 80198ce:	4638      	mov	r0, r7
 80198d0:	47b0      	blx	r6
}
 80198d2:	b002      	add	sp, #8
 80198d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 80198d8:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80198dc:	4621      	mov	r1, r4
 80198de:	480f      	ldr	r0, [pc, #60]	; (801991c <tcp_abandon+0xf0>)
 80198e0:	f7ff fdd2 	bl	8019488 <tcp_pcb_remove>
 80198e4:	2201      	movs	r2, #1
 80198e6:	4b0e      	ldr	r3, [pc, #56]	; (8019920 <tcp_abandon+0xf4>)
 80198e8:	701a      	strb	r2, [r3, #0]
 80198ea:	e7dc      	b.n	80198a6 <tcp_abandon+0x7a>
    int send_rst = 0;
 80198ec:	2500      	movs	r5, #0
 80198ee:	e7da      	b.n	80198a6 <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80198f0:	8b23      	ldrh	r3, [r4, #24]
 80198f2:	9301      	str	r3, [sp, #4]
 80198f4:	f8cd a000 	str.w	sl, [sp]
 80198f8:	1d23      	adds	r3, r4, #4
 80198fa:	4622      	mov	r2, r4
 80198fc:	4649      	mov	r1, r9
 80198fe:	4640      	mov	r0, r8
 8019900:	f002 fbee 	bl	801c0e0 <tcp_rst>
 8019904:	e7dc      	b.n	80198c0 <tcp_abandon+0x94>
 8019906:	bf00      	nop
 8019908:	20015cd0 	.word	0x20015cd0
 801990c:	08026284 	.word	0x08026284
 8019910:	080261c4 	.word	0x080261c4
 8019914:	080214f0 	.word	0x080214f0
 8019918:	20015cd4 	.word	0x20015cd4
 801991c:	20015cc4 	.word	0x20015cc4
 8019920:	20015cc0 	.word	0x20015cc0

08019924 <tcp_abort>:
{
 8019924:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8019926:	2101      	movs	r1, #1
 8019928:	f7ff ff80 	bl	801982c <tcp_abandon>
 801992c:	bd08      	pop	{r3, pc}

0801992e <tcp_accept_null>:
{
 801992e:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8019930:	4608      	mov	r0, r1
 8019932:	f7ff fff7 	bl	8019924 <tcp_abort>
}
 8019936:	f06f 000c 	mvn.w	r0, #12
 801993a:	bd08      	pop	{r3, pc}

0801993c <tcp_kill_timewait>:
{
 801993c:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801993e:	4b0a      	ldr	r3, [pc, #40]	; (8019968 <tcp_kill_timewait+0x2c>)
 8019940:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8019942:	2400      	movs	r4, #0
  inactive = NULL;
 8019944:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019946:	e000      	b.n	801994a <tcp_kill_timewait+0xe>
 8019948:	68db      	ldr	r3, [r3, #12]
 801994a:	b143      	cbz	r3, 801995e <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801994c:	6a19      	ldr	r1, [r3, #32]
 801994e:	4a07      	ldr	r2, [pc, #28]	; (801996c <tcp_kill_timewait+0x30>)
 8019950:	6812      	ldr	r2, [r2, #0]
 8019952:	1a52      	subs	r2, r2, r1
 8019954:	4294      	cmp	r4, r2
 8019956:	d8f7      	bhi.n	8019948 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 8019958:	4614      	mov	r4, r2
      inactive = pcb;
 801995a:	4618      	mov	r0, r3
 801995c:	e7f4      	b.n	8019948 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 801995e:	b108      	cbz	r0, 8019964 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 8019960:	f7ff ffe0 	bl	8019924 <tcp_abort>
 8019964:	bd10      	pop	{r4, pc}
 8019966:	bf00      	nop
 8019968:	20015cd4 	.word	0x20015cd4
 801996c:	20015cc8 	.word	0x20015cc8

08019970 <tcp_kill_prio>:
{
 8019970:	b570      	push	{r4, r5, r6, lr}
 8019972:	4602      	mov	r2, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8019974:	f010 0f80 	tst.w	r0, #128	; 0x80
 8019978:	d000      	beq.n	801997c <tcp_kill_prio+0xc>
 801997a:	227f      	movs	r2, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801997c:	4b0b      	ldr	r3, [pc, #44]	; (80199ac <tcp_kill_prio+0x3c>)
 801997e:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8019980:	2400      	movs	r4, #0
  inactive = NULL;
 8019982:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019984:	b91b      	cbnz	r3, 801998e <tcp_kill_prio+0x1e>
  if (inactive != NULL) {
 8019986:	b108      	cbz	r0, 801998c <tcp_kill_prio+0x1c>
    tcp_abort(inactive);
 8019988:	f7ff ffcc 	bl	8019924 <tcp_abort>
 801998c:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->prio <= mprio &&
 801998e:	7d5d      	ldrb	r5, [r3, #21]
 8019990:	42aa      	cmp	r2, r5
 8019992:	d308      	bcc.n	80199a6 <tcp_kill_prio+0x36>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019994:	6a1e      	ldr	r6, [r3, #32]
 8019996:	4906      	ldr	r1, [pc, #24]	; (80199b0 <tcp_kill_prio+0x40>)
 8019998:	6809      	ldr	r1, [r1, #0]
 801999a:	1b89      	subs	r1, r1, r6
    if (pcb->prio <= mprio &&
 801999c:	428c      	cmp	r4, r1
 801999e:	d802      	bhi.n	80199a6 <tcp_kill_prio+0x36>
      mprio = pcb->prio;
 80199a0:	462a      	mov	r2, r5
      inactivity = tcp_ticks - pcb->tmr;
 80199a2:	460c      	mov	r4, r1
      inactive = pcb;
 80199a4:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80199a6:	68db      	ldr	r3, [r3, #12]
 80199a8:	e7ec      	b.n	8019984 <tcp_kill_prio+0x14>
 80199aa:	bf00      	nop
 80199ac:	20015cc4 	.word	0x20015cc4
 80199b0:	20015cc8 	.word	0x20015cc8

080199b4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80199b4:	b538      	push	{r3, r4, r5, lr}
 80199b6:	4604      	mov	r4, r0
 80199b8:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 80199ba:	e003      	b.n	80199c4 <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80199bc:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80199be:	f7ff ffb1 	bl	8019924 <tcp_abort>
      pcb = next;
 80199c2:	4628      	mov	r0, r5
  while (pcb != NULL) {
 80199c4:	b128      	cbz	r0, 80199d2 <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80199c6:	6802      	ldr	r2, [r0, #0]
 80199c8:	6823      	ldr	r3, [r4, #0]
 80199ca:	429a      	cmp	r2, r3
 80199cc:	d0f6      	beq.n	80199bc <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 80199ce:	68c0      	ldr	r0, [r0, #12]
 80199d0:	e7f8      	b.n	80199c4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80199d2:	bd38      	pop	{r3, r4, r5, pc}

080199d4 <tcp_kill_state>:
{
 80199d4:	b538      	push	{r3, r4, r5, lr}
 80199d6:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80199d8:	f1a0 0308 	sub.w	r3, r0, #8
 80199dc:	b2db      	uxtb	r3, r3
 80199de:	2b01      	cmp	r3, #1
 80199e0:	d906      	bls.n	80199f0 <tcp_kill_state+0x1c>
 80199e2:	4b0f      	ldr	r3, [pc, #60]	; (8019a20 <tcp_kill_state+0x4c>)
 80199e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80199e8:	490e      	ldr	r1, [pc, #56]	; (8019a24 <tcp_kill_state+0x50>)
 80199ea:	480f      	ldr	r0, [pc, #60]	; (8019a28 <tcp_kill_state+0x54>)
 80199ec:	f006 f87f 	bl	801faee <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80199f0:	4b0e      	ldr	r3, [pc, #56]	; (8019a2c <tcp_kill_state+0x58>)
 80199f2:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80199f4:	2100      	movs	r1, #0
  inactive = NULL;
 80199f6:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80199f8:	e000      	b.n	80199fc <tcp_kill_state+0x28>
 80199fa:	68db      	ldr	r3, [r3, #12]
 80199fc:	b15b      	cbz	r3, 8019a16 <tcp_kill_state+0x42>
    if (pcb->state == state) {
 80199fe:	7d1a      	ldrb	r2, [r3, #20]
 8019a00:	4294      	cmp	r4, r2
 8019a02:	d1fa      	bne.n	80199fa <tcp_kill_state+0x26>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019a04:	6a1d      	ldr	r5, [r3, #32]
 8019a06:	4a0a      	ldr	r2, [pc, #40]	; (8019a30 <tcp_kill_state+0x5c>)
 8019a08:	6812      	ldr	r2, [r2, #0]
 8019a0a:	1b52      	subs	r2, r2, r5
 8019a0c:	4291      	cmp	r1, r2
 8019a0e:	d8f4      	bhi.n	80199fa <tcp_kill_state+0x26>
        inactivity = tcp_ticks - pcb->tmr;
 8019a10:	4611      	mov	r1, r2
        inactive = pcb;
 8019a12:	4618      	mov	r0, r3
 8019a14:	e7f1      	b.n	80199fa <tcp_kill_state+0x26>
  if (inactive != NULL) {
 8019a16:	b110      	cbz	r0, 8019a1e <tcp_kill_state+0x4a>
    tcp_abandon(inactive, 0);
 8019a18:	2100      	movs	r1, #0
 8019a1a:	f7ff ff07 	bl	801982c <tcp_abandon>
 8019a1e:	bd38      	pop	{r3, r4, r5, pc}
 8019a20:	08026284 	.word	0x08026284
 8019a24:	08026274 	.word	0x08026274
 8019a28:	080214f0 	.word	0x080214f0
 8019a2c:	20015cc4 	.word	0x20015cc4
 8019a30:	20015cc8 	.word	0x20015cc8

08019a34 <tcp_alloc>:
{
 8019a34:	b538      	push	{r3, r4, r5, lr}
 8019a36:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019a38:	2000      	movs	r0, #0
 8019a3a:	f7fe fb7b 	bl	8018134 <memp_malloc>
  if (pcb == NULL) {
 8019a3e:	4604      	mov	r4, r0
 8019a40:	b368      	cbz	r0, 8019a9e <tcp_alloc+0x6a>
  if (pcb != NULL) {
 8019a42:	b354      	cbz	r4, 8019a9a <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8019a44:	2298      	movs	r2, #152	; 0x98
 8019a46:	2100      	movs	r1, #0
 8019a48:	4620      	mov	r0, r4
 8019a4a:	f006 ff5f 	bl	802090c <memset>
    pcb->prio = prio;
 8019a4e:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8019a50:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8019a54:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019a5c:	8562      	strh	r2, [r4, #42]	; 0x2a
 8019a5e:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8019a60:	22ff      	movs	r2, #255	; 0xff
 8019a62:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8019a64:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019a68:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8019a6a:	2206      	movs	r2, #6
 8019a6c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8019a70:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8019a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a76:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8019a78:	2201      	movs	r2, #1
 8019a7a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8019a7e:	4a19      	ldr	r2, [pc, #100]	; (8019ae4 <tcp_alloc+0xb0>)
 8019a80:	6812      	ldr	r2, [r2, #0]
 8019a82:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8019a84:	4a18      	ldr	r2, [pc, #96]	; (8019ae8 <tcp_alloc+0xb4>)
 8019a86:	7812      	ldrb	r2, [r2, #0]
 8019a88:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 8019a8a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8019a8e:	4b17      	ldr	r3, [pc, #92]	; (8019aec <tcp_alloc+0xb8>)
 8019a90:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8019a94:	4b16      	ldr	r3, [pc, #88]	; (8019af0 <tcp_alloc+0xbc>)
 8019a96:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8019a9a:	4620      	mov	r0, r4
 8019a9c:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 8019a9e:	f7ff ff4d 	bl	801993c <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019aa2:	2000      	movs	r0, #0
 8019aa4:	f7fe fb46 	bl	8018134 <memp_malloc>
    if (pcb == NULL) {
 8019aa8:	4604      	mov	r4, r0
 8019aaa:	2800      	cmp	r0, #0
 8019aac:	d1c9      	bne.n	8019a42 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8019aae:	2009      	movs	r0, #9
 8019ab0:	f7ff ff90 	bl	80199d4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019ab4:	2000      	movs	r0, #0
 8019ab6:	f7fe fb3d 	bl	8018134 <memp_malloc>
      if (pcb == NULL) {
 8019aba:	4604      	mov	r4, r0
 8019abc:	2800      	cmp	r0, #0
 8019abe:	d1c0      	bne.n	8019a42 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8019ac0:	2008      	movs	r0, #8
 8019ac2:	f7ff ff87 	bl	80199d4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019ac6:	2000      	movs	r0, #0
 8019ac8:	f7fe fb34 	bl	8018134 <memp_malloc>
        if (pcb == NULL) {
 8019acc:	4604      	mov	r4, r0
 8019ace:	2800      	cmp	r0, #0
 8019ad0:	d1b7      	bne.n	8019a42 <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 8019ad2:	4628      	mov	r0, r5
 8019ad4:	f7ff ff4c 	bl	8019970 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019ad8:	2000      	movs	r0, #0
 8019ada:	f7fe fb2b 	bl	8018134 <memp_malloc>
 8019ade:	4604      	mov	r4, r0
 8019ae0:	e7af      	b.n	8019a42 <tcp_alloc+0xe>
 8019ae2:	bf00      	nop
 8019ae4:	20015cc8 	.word	0x20015cc8
 8019ae8:	200102ae 	.word	0x200102ae
 8019aec:	0801969d 	.word	0x0801969d
 8019af0:	006ddd00 	.word	0x006ddd00

08019af4 <tcp_new_ip_type>:
{
 8019af4:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8019af6:	2040      	movs	r0, #64	; 0x40
 8019af8:	f7ff ff9c 	bl	8019a34 <tcp_alloc>
}
 8019afc:	bd08      	pop	{r3, pc}
	...

08019b00 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8019b00:	4b03      	ldr	r3, [pc, #12]	; (8019b10 <tcp_next_iss+0x10>)
 8019b02:	6818      	ldr	r0, [r3, #0]
 8019b04:	4a03      	ldr	r2, [pc, #12]	; (8019b14 <tcp_next_iss+0x14>)
 8019b06:	6812      	ldr	r2, [r2, #0]
 8019b08:	4410      	add	r0, r2
 8019b0a:	6018      	str	r0, [r3, #0]
}
 8019b0c:	4770      	bx	lr
 8019b0e:	bf00      	nop
 8019b10:	20000008 	.word	0x20000008
 8019b14:	20015cc8 	.word	0x20015cc8

08019b18 <tcp_eff_send_mss_impl>:
{
 8019b18:	b510      	push	{r4, lr}
 8019b1a:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8019b1c:	4608      	mov	r0, r1
 8019b1e:	f7fd f9d3 	bl	8016ec8 <ip4_route>
    if (outif == NULL) {
 8019b22:	b138      	cbz	r0, 8019b34 <tcp_eff_send_mss_impl+0x1c>
    mtu = outif->mtu;
 8019b24:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8019b26:	b13b      	cbz	r3, 8019b38 <tcp_eff_send_mss_impl+0x20>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8019b28:	3b28      	subs	r3, #40	; 0x28
 8019b2a:	b298      	uxth	r0, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8019b2c:	42a0      	cmp	r0, r4
 8019b2e:	bf28      	it	cs
 8019b30:	4620      	movcs	r0, r4
 8019b32:	bd10      	pop	{r4, pc}
      return sendmss;
 8019b34:	4620      	mov	r0, r4
 8019b36:	bd10      	pop	{r4, pc}
 8019b38:	4620      	mov	r0, r4
}
 8019b3a:	bd10      	pop	{r4, pc}

08019b3c <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8019b3c:	b308      	cbz	r0, 8019b82 <tcp_netif_ip_addr_changed+0x46>
{
 8019b3e:	b570      	push	{r4, r5, r6, lr}
 8019b40:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8019b42:	6803      	ldr	r3, [r0, #0]
 8019b44:	b903      	cbnz	r3, 8019b48 <tcp_netif_ip_addr_changed+0xc>
 8019b46:	bd70      	pop	{r4, r5, r6, pc}
 8019b48:	460e      	mov	r6, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8019b4a:	4b0e      	ldr	r3, [pc, #56]	; (8019b84 <tcp_netif_ip_addr_changed+0x48>)
 8019b4c:	6819      	ldr	r1, [r3, #0]
 8019b4e:	f7ff ff31 	bl	80199b4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8019b52:	4b0d      	ldr	r3, [pc, #52]	; (8019b88 <tcp_netif_ip_addr_changed+0x4c>)
 8019b54:	6819      	ldr	r1, [r3, #0]
 8019b56:	4620      	mov	r0, r4
 8019b58:	f7ff ff2c 	bl	80199b4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8019b5c:	2e00      	cmp	r6, #0
 8019b5e:	d0f2      	beq.n	8019b46 <tcp_netif_ip_addr_changed+0xa>
 8019b60:	6833      	ldr	r3, [r6, #0]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d0ef      	beq.n	8019b46 <tcp_netif_ip_addr_changed+0xa>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8019b66:	4b09      	ldr	r3, [pc, #36]	; (8019b8c <tcp_netif_ip_addr_changed+0x50>)
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	e000      	b.n	8019b6e <tcp_netif_ip_addr_changed+0x32>
{
 8019b6c:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d0e9      	beq.n	8019b46 <tcp_netif_ip_addr_changed+0xa>
        next = lpcb->next;
 8019b72:	68da      	ldr	r2, [r3, #12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8019b74:	681d      	ldr	r5, [r3, #0]
 8019b76:	6820      	ldr	r0, [r4, #0]
 8019b78:	4285      	cmp	r5, r0
 8019b7a:	d1f7      	bne.n	8019b6c <tcp_netif_ip_addr_changed+0x30>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8019b7c:	6831      	ldr	r1, [r6, #0]
 8019b7e:	6019      	str	r1, [r3, #0]
 8019b80:	e7f4      	b.n	8019b6c <tcp_netif_ip_addr_changed+0x30>
 8019b82:	4770      	bx	lr
 8019b84:	20015cc4 	.word	0x20015cc4
 8019b88:	20015cd0 	.word	0x20015cd0
 8019b8c:	20015ccc 	.word	0x20015ccc

08019b90 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8019b90:	4b0e      	ldr	r3, [pc, #56]	; (8019bcc <tcp_getoptbyte+0x3c>)
 8019b92:	6819      	ldr	r1, [r3, #0]
 8019b94:	b189      	cbz	r1, 8019bba <tcp_getoptbyte+0x2a>
 8019b96:	4b0e      	ldr	r3, [pc, #56]	; (8019bd0 <tcp_getoptbyte+0x40>)
 8019b98:	881b      	ldrh	r3, [r3, #0]
 8019b9a:	4a0e      	ldr	r2, [pc, #56]	; (8019bd4 <tcp_getoptbyte+0x44>)
 8019b9c:	8812      	ldrh	r2, [r2, #0]
 8019b9e:	4293      	cmp	r3, r2
 8019ba0:	d30b      	bcc.n	8019bba <tcp_getoptbyte+0x2a>
{
 8019ba2:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8019ba4:	1c5c      	adds	r4, r3, #1
 8019ba6:	480a      	ldr	r0, [pc, #40]	; (8019bd0 <tcp_getoptbyte+0x40>)
 8019ba8:	8004      	strh	r4, [r0, #0]
 8019baa:	b2db      	uxtb	r3, r3
 8019bac:	b2d2      	uxtb	r2, r2
 8019bae:	1a9b      	subs	r3, r3, r2
 8019bb0:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 8019bb2:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8019bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bb8:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8019bba:	4b07      	ldr	r3, [pc, #28]	; (8019bd8 <tcp_getoptbyte+0x48>)
 8019bbc:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8019bbe:	4904      	ldr	r1, [pc, #16]	; (8019bd0 <tcp_getoptbyte+0x40>)
 8019bc0:	880a      	ldrh	r2, [r1, #0]
 8019bc2:	1c50      	adds	r0, r2, #1
 8019bc4:	8008      	strh	r0, [r1, #0]
 8019bc6:	4413      	add	r3, r2
 8019bc8:	7d18      	ldrb	r0, [r3, #20]
 8019bca:	4770      	bx	lr
 8019bcc:	200102e4 	.word	0x200102e4
 8019bd0:	200102d8 	.word	0x200102d8
 8019bd4:	200102e0 	.word	0x200102e0
 8019bd8:	200102dc 	.word	0x200102dc

08019bdc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019bdc:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019bde:	4b1f      	ldr	r3, [pc, #124]	; (8019c5c <tcp_parseopt+0x80>)
 8019be0:	881b      	ldrh	r3, [r3, #0]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d038      	beq.n	8019c58 <tcp_parseopt+0x7c>
 8019be6:	4605      	mov	r5, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019be8:	2200      	movs	r2, #0
 8019bea:	4b1d      	ldr	r3, [pc, #116]	; (8019c60 <tcp_parseopt+0x84>)
 8019bec:	801a      	strh	r2, [r3, #0]
 8019bee:	4b1c      	ldr	r3, [pc, #112]	; (8019c60 <tcp_parseopt+0x84>)
 8019bf0:	881a      	ldrh	r2, [r3, #0]
 8019bf2:	4b1a      	ldr	r3, [pc, #104]	; (8019c5c <tcp_parseopt+0x80>)
 8019bf4:	881b      	ldrh	r3, [r3, #0]
 8019bf6:	429a      	cmp	r2, r3
 8019bf8:	d22e      	bcs.n	8019c58 <tcp_parseopt+0x7c>
      u8_t opt = tcp_getoptbyte();
 8019bfa:	f7ff ffc9 	bl	8019b90 <tcp_getoptbyte>
      switch (opt) {
 8019bfe:	2801      	cmp	r0, #1
 8019c00:	d0f5      	beq.n	8019bee <tcp_parseopt+0x12>
 8019c02:	b348      	cbz	r0, 8019c58 <tcp_parseopt+0x7c>
 8019c04:	2802      	cmp	r0, #2
 8019c06:	d11d      	bne.n	8019c44 <tcp_parseopt+0x68>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019c08:	f7ff ffc2 	bl	8019b90 <tcp_getoptbyte>
 8019c0c:	2804      	cmp	r0, #4
 8019c0e:	d123      	bne.n	8019c58 <tcp_parseopt+0x7c>
 8019c10:	4b13      	ldr	r3, [pc, #76]	; (8019c60 <tcp_parseopt+0x84>)
 8019c12:	881b      	ldrh	r3, [r3, #0]
 8019c14:	3302      	adds	r3, #2
 8019c16:	4a11      	ldr	r2, [pc, #68]	; (8019c5c <tcp_parseopt+0x80>)
 8019c18:	8812      	ldrh	r2, [r2, #0]
 8019c1a:	4293      	cmp	r3, r2
 8019c1c:	dc1c      	bgt.n	8019c58 <tcp_parseopt+0x7c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8019c1e:	f7ff ffb7 	bl	8019b90 <tcp_getoptbyte>
 8019c22:	b283      	uxth	r3, r0
 8019c24:	021b      	lsls	r3, r3, #8
 8019c26:	b29c      	uxth	r4, r3
        mss |= tcp_getoptbyte();
 8019c28:	f7ff ffb2 	bl	8019b90 <tcp_getoptbyte>
 8019c2c:	b280      	uxth	r0, r0
 8019c2e:	ea44 0300 	orr.w	r3, r4, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019c32:	1e5a      	subs	r2, r3, #1
 8019c34:	b292      	uxth	r2, r2
 8019c36:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 8019c3a:	d301      	bcc.n	8019c40 <tcp_parseopt+0x64>
 8019c3c:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8019c40:	866b      	strh	r3, [r5, #50]	; 0x32
        break;
 8019c42:	e7d4      	b.n	8019bee <tcp_parseopt+0x12>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8019c44:	f7ff ffa4 	bl	8019b90 <tcp_getoptbyte>
        if (data < 2) {
 8019c48:	2801      	cmp	r0, #1
 8019c4a:	d905      	bls.n	8019c58 <tcp_parseopt+0x7c>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8019c4c:	4b04      	ldr	r3, [pc, #16]	; (8019c60 <tcp_parseopt+0x84>)
 8019c4e:	881a      	ldrh	r2, [r3, #0]
 8019c50:	4410      	add	r0, r2
 8019c52:	3802      	subs	r0, #2
 8019c54:	8018      	strh	r0, [r3, #0]
 8019c56:	e7ca      	b.n	8019bee <tcp_parseopt+0x12>
 8019c58:	bd38      	pop	{r3, r4, r5, pc}
 8019c5a:	bf00      	nop
 8019c5c:	200102e8 	.word	0x200102e8
 8019c60:	200102d8 	.word	0x200102d8

08019c64 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8019c64:	4b0e      	ldr	r3, [pc, #56]	; (8019ca0 <tcp_input_delayed_close+0x3c>)
 8019c66:	781b      	ldrb	r3, [r3, #0]
 8019c68:	f013 0f10 	tst.w	r3, #16
 8019c6c:	d016      	beq.n	8019c9c <tcp_input_delayed_close+0x38>
{
 8019c6e:	b510      	push	{r4, lr}
 8019c70:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 8019c72:	7e83      	ldrb	r3, [r0, #26]
 8019c74:	f013 0f10 	tst.w	r3, #16
 8019c78:	d106      	bne.n	8019c88 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8019c7a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8019c7e:	b11b      	cbz	r3, 8019c88 <tcp_input_delayed_close+0x24>
 8019c80:	f06f 010e 	mvn.w	r1, #14
 8019c84:	6900      	ldr	r0, [r0, #16]
 8019c86:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019c88:	4621      	mov	r1, r4
 8019c8a:	4806      	ldr	r0, [pc, #24]	; (8019ca4 <tcp_input_delayed_close+0x40>)
 8019c8c:	f7ff fbfc 	bl	8019488 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8019c90:	4621      	mov	r1, r4
 8019c92:	2000      	movs	r0, #0
 8019c94:	f7fe fa68 	bl	8018168 <memp_free>
    return 1;
 8019c98:	2001      	movs	r0, #1
 8019c9a:	bd10      	pop	{r4, pc}
  return 0;
 8019c9c:	2000      	movs	r0, #0
 8019c9e:	4770      	bx	lr
 8019ca0:	200102d0 	.word	0x200102d0
 8019ca4:	20015cc4 	.word	0x20015cc4

08019ca8 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8019ca8:	4b1c      	ldr	r3, [pc, #112]	; (8019d1c <tcp_timewait_input+0x74>)
 8019caa:	781b      	ldrb	r3, [r3, #0]
 8019cac:	f013 0f04 	tst.w	r3, #4
 8019cb0:	d132      	bne.n	8019d18 <tcp_timewait_input+0x70>
{
 8019cb2:	b510      	push	{r4, lr}
 8019cb4:	b082      	sub	sp, #8
  if (flags & TCP_SYN) {
 8019cb6:	f013 0f02 	tst.w	r3, #2
 8019cba:	d01c      	beq.n	8019cf6 <tcp_timewait_input+0x4e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8019cbc:	4b18      	ldr	r3, [pc, #96]	; (8019d20 <tcp_timewait_input+0x78>)
 8019cbe:	6819      	ldr	r1, [r3, #0]
 8019cc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019cc2:	1aca      	subs	r2, r1, r3
 8019cc4:	2a00      	cmp	r2, #0
 8019cc6:	db1c      	blt.n	8019d02 <tcp_timewait_input+0x5a>
 8019cc8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8019cca:	4413      	add	r3, r2
 8019ccc:	1acb      	subs	r3, r1, r3
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	dc17      	bgt.n	8019d02 <tcp_timewait_input+0x5a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019cd2:	4b14      	ldr	r3, [pc, #80]	; (8019d24 <tcp_timewait_input+0x7c>)
 8019cd4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8019cd6:	4a14      	ldr	r2, [pc, #80]	; (8019d28 <tcp_timewait_input+0x80>)
 8019cd8:	4814      	ldr	r0, [pc, #80]	; (8019d2c <tcp_timewait_input+0x84>)
 8019cda:	8800      	ldrh	r0, [r0, #0]
 8019cdc:	881c      	ldrh	r4, [r3, #0]
 8019cde:	9401      	str	r4, [sp, #4]
 8019ce0:	885b      	ldrh	r3, [r3, #2]
 8019ce2:	9300      	str	r3, [sp, #0]
 8019ce4:	4613      	mov	r3, r2
 8019ce6:	3204      	adds	r2, #4
 8019ce8:	4401      	add	r1, r0
 8019cea:	4811      	ldr	r0, [pc, #68]	; (8019d30 <tcp_timewait_input+0x88>)
 8019cec:	6800      	ldr	r0, [r0, #0]
 8019cee:	f002 f9f7 	bl	801c0e0 <tcp_rst>
}
 8019cf2:	b002      	add	sp, #8
 8019cf4:	bd10      	pop	{r4, pc}
  } else if (flags & TCP_FIN) {
 8019cf6:	f013 0f01 	tst.w	r3, #1
 8019cfa:	d002      	beq.n	8019d02 <tcp_timewait_input+0x5a>
    pcb->tmr = tcp_ticks;
 8019cfc:	4b0d      	ldr	r3, [pc, #52]	; (8019d34 <tcp_timewait_input+0x8c>)
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	6203      	str	r3, [r0, #32]
  if ((tcplen > 0)) {
 8019d02:	4b0a      	ldr	r3, [pc, #40]	; (8019d2c <tcp_timewait_input+0x84>)
 8019d04:	881b      	ldrh	r3, [r3, #0]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d0f3      	beq.n	8019cf2 <tcp_timewait_input+0x4a>
    pcb->flags |= TF_ACK_NOW;
 8019d0a:	7e83      	ldrb	r3, [r0, #26]
 8019d0c:	f043 0302 	orr.w	r3, r3, #2
 8019d10:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 8019d12:	f002 f889 	bl	801be28 <tcp_output>
 8019d16:	e7ec      	b.n	8019cf2 <tcp_timewait_input+0x4a>
 8019d18:	4770      	bx	lr
 8019d1a:	bf00      	nop
 8019d1c:	200102b4 	.word	0x200102b4
 8019d20:	200102d4 	.word	0x200102d4
 8019d24:	200102dc 	.word	0x200102dc
 8019d28:	20011050 	.word	0x20011050
 8019d2c:	200102ea 	.word	0x200102ea
 8019d30:	200102b0 	.word	0x200102b0
 8019d34:	20015cc8 	.word	0x20015cc8

08019d38 <tcp_listen_input>:
  if (flags & TCP_RST) {
 8019d38:	4b3c      	ldr	r3, [pc, #240]	; (8019e2c <tcp_listen_input+0xf4>)
 8019d3a:	781b      	ldrb	r3, [r3, #0]
 8019d3c:	f013 0f04 	tst.w	r3, #4
 8019d40:	d173      	bne.n	8019e2a <tcp_listen_input+0xf2>
{
 8019d42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d44:	b083      	sub	sp, #12
 8019d46:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 8019d48:	f013 0f10 	tst.w	r3, #16
 8019d4c:	d104      	bne.n	8019d58 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 8019d4e:	f013 0f02 	tst.w	r3, #2
 8019d52:	d114      	bne.n	8019d7e <tcp_listen_input+0x46>
}
 8019d54:	b003      	add	sp, #12
 8019d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019d58:	4b35      	ldr	r3, [pc, #212]	; (8019e30 <tcp_listen_input+0xf8>)
 8019d5a:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8019d5c:	4a35      	ldr	r2, [pc, #212]	; (8019e34 <tcp_listen_input+0xfc>)
 8019d5e:	4936      	ldr	r1, [pc, #216]	; (8019e38 <tcp_listen_input+0x100>)
 8019d60:	880c      	ldrh	r4, [r1, #0]
 8019d62:	4936      	ldr	r1, [pc, #216]	; (8019e3c <tcp_listen_input+0x104>)
 8019d64:	6809      	ldr	r1, [r1, #0]
 8019d66:	4836      	ldr	r0, [pc, #216]	; (8019e40 <tcp_listen_input+0x108>)
 8019d68:	6800      	ldr	r0, [r0, #0]
 8019d6a:	881d      	ldrh	r5, [r3, #0]
 8019d6c:	9501      	str	r5, [sp, #4]
 8019d6e:	885b      	ldrh	r3, [r3, #2]
 8019d70:	9300      	str	r3, [sp, #0]
 8019d72:	4613      	mov	r3, r2
 8019d74:	3204      	adds	r2, #4
 8019d76:	4421      	add	r1, r4
 8019d78:	f002 f9b2 	bl	801c0e0 <tcp_rst>
 8019d7c:	e7ea      	b.n	8019d54 <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 8019d7e:	7d40      	ldrb	r0, [r0, #21]
 8019d80:	f7ff fe58 	bl	8019a34 <tcp_alloc>
    if (npcb == NULL) {
 8019d84:	4604      	mov	r4, r0
 8019d86:	2800      	cmp	r0, #0
 8019d88:	d041      	beq.n	8019e0e <tcp_listen_input+0xd6>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8019d8a:	4b2e      	ldr	r3, [pc, #184]	; (8019e44 <tcp_listen_input+0x10c>)
 8019d8c:	695a      	ldr	r2, [r3, #20]
 8019d8e:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8019d90:	691b      	ldr	r3, [r3, #16]
 8019d92:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8019d94:	8aeb      	ldrh	r3, [r5, #22]
 8019d96:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8019d98:	4e25      	ldr	r6, [pc, #148]	; (8019e30 <tcp_listen_input+0xf8>)
 8019d9a:	6833      	ldr	r3, [r6, #0]
 8019d9c:	881b      	ldrh	r3, [r3, #0]
 8019d9e:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8019da0:	2303      	movs	r3, #3
 8019da2:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8019da4:	4f25      	ldr	r7, [pc, #148]	; (8019e3c <tcp_listen_input+0x104>)
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	3301      	adds	r3, #1
 8019daa:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8019dac:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8019dae:	f7ff fea7 	bl	8019b00 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 8019db2:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_nxt = iss;
 8019db4:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8019db6:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8019db8:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8019dba:	683b      	ldr	r3, [r7, #0]
 8019dbc:	3b01      	subs	r3, #1
 8019dbe:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8019dc0:	692b      	ldr	r3, [r5, #16]
 8019dc2:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8019dc4:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8019dc6:	7a2b      	ldrb	r3, [r5, #8]
 8019dc8:	f003 030c 	and.w	r3, r3, #12
 8019dcc:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8019dce:	4b1e      	ldr	r3, [pc, #120]	; (8019e48 <tcp_listen_input+0x110>)
 8019dd0:	681a      	ldr	r2, [r3, #0]
 8019dd2:	60e2      	str	r2, [r4, #12]
 8019dd4:	601c      	str	r4, [r3, #0]
 8019dd6:	f002 fb8f 	bl	801c4f8 <tcp_timer_needed>
 8019dda:	2201      	movs	r2, #1
 8019ddc:	4b1b      	ldr	r3, [pc, #108]	; (8019e4c <tcp_listen_input+0x114>)
 8019dde:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8019de0:	4620      	mov	r0, r4
 8019de2:	f7ff fefb 	bl	8019bdc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8019de6:	6833      	ldr	r3, [r6, #0]
 8019de8:	89db      	ldrh	r3, [r3, #14]
 8019dea:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019dee:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019df2:	1d21      	adds	r1, r4, #4
 8019df4:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8019df6:	f7ff fe8f 	bl	8019b18 <tcp_eff_send_mss_impl>
 8019dfa:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019dfc:	2112      	movs	r1, #18
 8019dfe:	4620      	mov	r0, r4
 8019e00:	f001 ff02 	bl	801bc08 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8019e04:	b960      	cbnz	r0, 8019e20 <tcp_listen_input+0xe8>
    tcp_output(npcb);
 8019e06:	4620      	mov	r0, r4
 8019e08:	f002 f80e 	bl	801be28 <tcp_output>
 8019e0c:	e7a2      	b.n	8019d54 <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019e0e:	69ab      	ldr	r3, [r5, #24]
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d09f      	beq.n	8019d54 <tcp_listen_input+0x1c>
 8019e14:	f04f 32ff 	mov.w	r2, #4294967295
 8019e18:	2100      	movs	r1, #0
 8019e1a:	6928      	ldr	r0, [r5, #16]
 8019e1c:	4798      	blx	r3
 8019e1e:	e799      	b.n	8019d54 <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 8019e20:	2100      	movs	r1, #0
 8019e22:	4620      	mov	r0, r4
 8019e24:	f7ff fd02 	bl	801982c <tcp_abandon>
      return;
 8019e28:	e794      	b.n	8019d54 <tcp_listen_input+0x1c>
 8019e2a:	4770      	bx	lr
 8019e2c:	200102b4 	.word	0x200102b4
 8019e30:	200102dc 	.word	0x200102dc
 8019e34:	20011050 	.word	0x20011050
 8019e38:	200102ea 	.word	0x200102ea
 8019e3c:	200102d4 	.word	0x200102d4
 8019e40:	200102b0 	.word	0x200102b0
 8019e44:	20011040 	.word	0x20011040
 8019e48:	20015cc4 	.word	0x20015cc4
 8019e4c:	20015cc0 	.word	0x20015cc0

08019e50 <tcp_oos_insert_segment>:
{
 8019e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e52:	4605      	mov	r5, r0
 8019e54:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019e56:	68c3      	ldr	r3, [r0, #12]
 8019e58:	8998      	ldrh	r0, [r3, #12]
 8019e5a:	f7fc fa8e 	bl	801637a <lwip_htons>
 8019e5e:	f010 0f01 	tst.w	r0, #1
 8019e62:	d009      	beq.n	8019e78 <tcp_oos_insert_segment+0x28>
    tcp_segs_free(next);
 8019e64:	4620      	mov	r0, r4
 8019e66:	f7ff f85c 	bl	8018f22 <tcp_segs_free>
    next = NULL;
 8019e6a:	2400      	movs	r4, #0
 8019e6c:	e02e      	b.n	8019ecc <tcp_oos_insert_segment+0x7c>
      next = next->next;
 8019e6e:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 8019e70:	4620      	mov	r0, r4
 8019e72:	f7ff f849 	bl	8018f08 <tcp_seg_free>
      next = next->next;
 8019e76:	4634      	mov	r4, r6
    while (next &&
 8019e78:	b1c4      	cbz	r4, 8019eac <tcp_oos_insert_segment+0x5c>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019e7a:	892b      	ldrh	r3, [r5, #8]
 8019e7c:	4a14      	ldr	r2, [pc, #80]	; (8019ed0 <tcp_oos_insert_segment+0x80>)
 8019e7e:	6812      	ldr	r2, [r2, #0]
 8019e80:	4413      	add	r3, r2
 8019e82:	68e1      	ldr	r1, [r4, #12]
 8019e84:	684a      	ldr	r2, [r1, #4]
 8019e86:	8920      	ldrh	r0, [r4, #8]
 8019e88:	4402      	add	r2, r0
 8019e8a:	1a9b      	subs	r3, r3, r2
    while (next &&
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	db0d      	blt.n	8019eac <tcp_oos_insert_segment+0x5c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019e90:	8988      	ldrh	r0, [r1, #12]
 8019e92:	f7fc fa72 	bl	801637a <lwip_htons>
 8019e96:	f010 0f01 	tst.w	r0, #1
 8019e9a:	d0e8      	beq.n	8019e6e <tcp_oos_insert_segment+0x1e>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019e9c:	68ef      	ldr	r7, [r5, #12]
 8019e9e:	89be      	ldrh	r6, [r7, #12]
 8019ea0:	2001      	movs	r0, #1
 8019ea2:	f7fc fa6a 	bl	801637a <lwip_htons>
 8019ea6:	4330      	orrs	r0, r6
 8019ea8:	81b8      	strh	r0, [r7, #12]
 8019eaa:	e7e0      	b.n	8019e6e <tcp_oos_insert_segment+0x1e>
    if (next &&
 8019eac:	b174      	cbz	r4, 8019ecc <tcp_oos_insert_segment+0x7c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019eae:	892b      	ldrh	r3, [r5, #8]
 8019eb0:	4a07      	ldr	r2, [pc, #28]	; (8019ed0 <tcp_oos_insert_segment+0x80>)
 8019eb2:	6811      	ldr	r1, [r2, #0]
 8019eb4:	440b      	add	r3, r1
 8019eb6:	68e2      	ldr	r2, [r4, #12]
 8019eb8:	6852      	ldr	r2, [r2, #4]
 8019eba:	1a9b      	subs	r3, r3, r2
    if (next &&
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	dd05      	ble.n	8019ecc <tcp_oos_insert_segment+0x7c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019ec0:	1a52      	subs	r2, r2, r1
 8019ec2:	b291      	uxth	r1, r2
 8019ec4:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019ec6:	6868      	ldr	r0, [r5, #4]
 8019ec8:	f7fe fc8e 	bl	80187e8 <pbuf_realloc>
  cseg->next = next;
 8019ecc:	602c      	str	r4, [r5, #0]
 8019ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ed0:	200102d4 	.word	0x200102d4

08019ed4 <tcp_receive>:
{
 8019ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ed8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019eda:	7d03      	ldrb	r3, [r0, #20]
 8019edc:	2b03      	cmp	r3, #3
 8019ede:	d979      	bls.n	8019fd4 <tcp_receive+0x100>
  if (flags & TCP_ACK) {
 8019ee0:	4bae      	ldr	r3, [pc, #696]	; (801a19c <tcp_receive+0x2c8>)
 8019ee2:	781b      	ldrb	r3, [r3, #0]
 8019ee4:	f013 0f10 	tst.w	r3, #16
 8019ee8:	f000 81aa 	beq.w	801a240 <tcp_receive+0x36c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019eec:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8019ef0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8019ef2:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019ef4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8019ef6:	4baa      	ldr	r3, [pc, #680]	; (801a1a0 <tcp_receive+0x2cc>)
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	1acd      	subs	r5, r1, r3
 8019efc:	2d00      	cmp	r5, #0
 8019efe:	db7c      	blt.n	8019ffa <tcp_receive+0x126>
 8019f00:	4299      	cmp	r1, r3
 8019f02:	d06f      	beq.n	8019fe4 <tcp_receive+0x110>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019f04:	49a7      	ldr	r1, [pc, #668]	; (801a1a4 <tcp_receive+0x2d0>)
 8019f06:	6809      	ldr	r1, [r1, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019f08:	428a      	cmp	r2, r1
 8019f0a:	d071      	beq.n	8019ff0 <tcp_receive+0x11c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019f0c:	4ba5      	ldr	r3, [pc, #660]	; (801a1a4 <tcp_receive+0x2d0>)
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019f12:	1a5a      	subs	r2, r3, r1
 8019f14:	2a00      	cmp	r2, #0
 8019f16:	f340 8095 	ble.w	801a044 <tcp_receive+0x170>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8019f1a:	2a01      	cmp	r2, #1
 8019f1c:	d404      	bmi.n	8019f28 <tcp_receive+0x54>
 8019f1e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019f20:	1a9a      	subs	r2, r3, r2
 8019f22:	2a00      	cmp	r2, #0
 8019f24:	f340 80cc 	ble.w	801a0c0 <tcp_receive+0x1ec>
      tcp_send_empty_ack(pcb);
 8019f28:	4620      	mov	r0, r4
 8019f2a:	f001 ff43 	bl	801bdb4 <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 8019f2e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	f000 8176 	beq.w	801a222 <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019f36:	4a9b      	ldr	r2, [pc, #620]	; (801a1a4 <tcp_receive+0x2d0>)
 8019f38:	6815      	ldr	r5, [r2, #0]
 8019f3a:	68db      	ldr	r3, [r3, #12]
 8019f3c:	6858      	ldr	r0, [r3, #4]
 8019f3e:	f7fc fa1f 	bl	8016380 <lwip_htonl>
 8019f42:	4606      	mov	r6, r0
 8019f44:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019f46:	891f      	ldrh	r7, [r3, #8]
 8019f48:	68db      	ldr	r3, [r3, #12]
 8019f4a:	8998      	ldrh	r0, [r3, #12]
 8019f4c:	f7fc fa15 	bl	801637a <lwip_htons>
 8019f50:	f010 0f03 	tst.w	r0, #3
 8019f54:	f000 8163 	beq.w	801a21e <tcp_receive+0x34a>
 8019f58:	2301      	movs	r3, #1
 8019f5a:	443b      	add	r3, r7
 8019f5c:	441e      	add	r6, r3
 8019f5e:	1bad      	subs	r5, r5, r6
    while (pcb->unsent != NULL &&
 8019f60:	2d00      	cmp	r5, #0
 8019f62:	f2c0 815e 	blt.w	801a222 <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019f66:	4b8f      	ldr	r3, [pc, #572]	; (801a1a4 <tcp_receive+0x2d0>)
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019f6c:	1a9b      	subs	r3, r3, r2
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	f300 8157 	bgt.w	801a222 <tcp_receive+0x34e>
      next = pcb->unsent;
 8019f74:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8019f76:	682b      	ldr	r3, [r5, #0]
 8019f78:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	f000 8144 	beq.w	801a208 <tcp_receive+0x334>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8019f80:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8019f84:	6868      	ldr	r0, [r5, #4]
 8019f86:	f7fe fca1 	bl	80188cc <pbuf_clen>
 8019f8a:	4286      	cmp	r6, r0
 8019f8c:	f0c0 813f 	bcc.w	801a20e <tcp_receive+0x33a>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8019f90:	6868      	ldr	r0, [r5, #4]
 8019f92:	f7fe fc9b 	bl	80188cc <pbuf_clen>
 8019f96:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019f9a:	1a18      	subs	r0, r3, r0
 8019f9c:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8019fa0:	892b      	ldrh	r3, [r5, #8]
 8019fa2:	4a81      	ldr	r2, [pc, #516]	; (801a1a8 <tcp_receive+0x2d4>)
 8019fa4:	8811      	ldrh	r1, [r2, #0]
 8019fa6:	440b      	add	r3, r1
 8019fa8:	8013      	strh	r3, [r2, #0]
      tcp_seg_free(next);
 8019faa:	4628      	mov	r0, r5
 8019fac:	f7fe ffac 	bl	8018f08 <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 8019fb0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d0ba      	beq.n	8019f2e <tcp_receive+0x5a>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8019fb8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d1b7      	bne.n	8019f2e <tcp_receive+0x5a>
 8019fbe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d1b4      	bne.n	8019f2e <tcp_receive+0x5a>
 8019fc4:	4b79      	ldr	r3, [pc, #484]	; (801a1ac <tcp_receive+0x2d8>)
 8019fc6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8019fca:	4979      	ldr	r1, [pc, #484]	; (801a1b0 <tcp_receive+0x2dc>)
 8019fcc:	4879      	ldr	r0, [pc, #484]	; (801a1b4 <tcp_receive+0x2e0>)
 8019fce:	f005 fd8e 	bl	801faee <iprintf>
 8019fd2:	e7ac      	b.n	8019f2e <tcp_receive+0x5a>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019fd4:	4b75      	ldr	r3, [pc, #468]	; (801a1ac <tcp_receive+0x2d8>)
 8019fd6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8019fda:	4977      	ldr	r1, [pc, #476]	; (801a1b8 <tcp_receive+0x2e4>)
 8019fdc:	4875      	ldr	r0, [pc, #468]	; (801a1b4 <tcp_receive+0x2e0>)
 8019fde:	f005 fd86 	bl	801faee <iprintf>
 8019fe2:	e77d      	b.n	8019ee0 <tcp_receive+0xc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019fe4:	496f      	ldr	r1, [pc, #444]	; (801a1a4 <tcp_receive+0x2d0>)
 8019fe6:	6809      	ldr	r1, [r1, #0]
 8019fe8:	1a51      	subs	r1, r2, r1
 8019fea:	2900      	cmp	r1, #0
 8019fec:	da8a      	bge.n	8019f04 <tcp_receive+0x30>
 8019fee:	e004      	b.n	8019ffa <tcp_receive+0x126>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019ff0:	4a72      	ldr	r2, [pc, #456]	; (801a1bc <tcp_receive+0x2e8>)
 8019ff2:	6812      	ldr	r2, [r2, #0]
 8019ff4:	89d2      	ldrh	r2, [r2, #14]
 8019ff6:	4290      	cmp	r0, r2
 8019ff8:	d288      	bcs.n	8019f0c <tcp_receive+0x38>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019ffa:	4a70      	ldr	r2, [pc, #448]	; (801a1bc <tcp_receive+0x2e8>)
 8019ffc:	6812      	ldr	r2, [r2, #0]
 8019ffe:	89d2      	ldrh	r2, [r2, #14]
 801a000:	b291      	uxth	r1, r2
 801a002:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801a006:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 801a00a:	4281      	cmp	r1, r0
 801a00c:	d901      	bls.n	801a012 <tcp_receive+0x13e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801a00e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 801a012:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 801a014:	4b63      	ldr	r3, [pc, #396]	; (801a1a4 <tcp_receive+0x2d0>)
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 801a01a:	b951      	cbnz	r1, 801a032 <tcp_receive+0x15e>
        if (pcb->persist_backoff == 0) {
 801a01c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 801a020:	2b00      	cmp	r3, #0
 801a022:	f47f af73 	bne.w	8019f0c <tcp_receive+0x38>
          pcb->persist_cnt = 0;
 801a026:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 801a02a:	2301      	movs	r3, #1
 801a02c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 801a030:	e76c      	b.n	8019f0c <tcp_receive+0x38>
      } else if (pcb->persist_backoff > 0) {
 801a032:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 801a036:	2b00      	cmp	r3, #0
 801a038:	f43f af68 	beq.w	8019f0c <tcp_receive+0x38>
          pcb->persist_backoff = 0;
 801a03c:	2300      	movs	r3, #0
 801a03e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 801a042:	e763      	b.n	8019f0c <tcp_receive+0x38>
      if (tcplen == 0) {
 801a044:	4a5e      	ldr	r2, [pc, #376]	; (801a1c0 <tcp_receive+0x2ec>)
 801a046:	8812      	ldrh	r2, [r2, #0]
 801a048:	bb7a      	cbnz	r2, 801a0aa <tcp_receive+0x1d6>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801a04a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801a04c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 801a050:	4402      	add	r2, r0
 801a052:	4296      	cmp	r6, r2
 801a054:	d001      	beq.n	801a05a <tcp_receive+0x186>
  int found_dupack = 0;
 801a056:	2300      	movs	r3, #0
 801a058:	e028      	b.n	801a0ac <tcp_receive+0x1d8>
          if (pcb->rtime >= 0) {
 801a05a:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801a05e:	2a00      	cmp	r2, #0
 801a060:	db2a      	blt.n	801a0b8 <tcp_receive+0x1e4>
            if (pcb->lastack == ackno) {
 801a062:	428b      	cmp	r3, r1
 801a064:	d001      	beq.n	801a06a <tcp_receive+0x196>
  int found_dupack = 0;
 801a066:	2300      	movs	r3, #0
 801a068:	e020      	b.n	801a0ac <tcp_receive+0x1d8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801a06a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a06e:	1c53      	adds	r3, r2, #1
 801a070:	b2db      	uxtb	r3, r3
 801a072:	429a      	cmp	r2, r3
 801a074:	d201      	bcs.n	801a07a <tcp_receive+0x1a6>
                ++pcb->dupacks;
 801a076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801a07a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a07e:	2b03      	cmp	r3, #3
 801a080:	d90a      	bls.n	801a098 <tcp_receive+0x1c4>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801a082:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801a086:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801a088:	4413      	add	r3, r2
 801a08a:	b29b      	uxth	r3, r3
 801a08c:	429a      	cmp	r2, r3
 801a08e:	d215      	bcs.n	801a0bc <tcp_receive+0x1e8>
                  pcb->cwnd += pcb->mss;
 801a090:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
              found_dupack = 1;
 801a094:	2301      	movs	r3, #1
 801a096:	e009      	b.n	801a0ac <tcp_receive+0x1d8>
              } else if (pcb->dupacks == 3) {
 801a098:	2b03      	cmp	r3, #3
 801a09a:	d001      	beq.n	801a0a0 <tcp_receive+0x1cc>
              found_dupack = 1;
 801a09c:	2301      	movs	r3, #1
 801a09e:	e005      	b.n	801a0ac <tcp_receive+0x1d8>
                tcp_rexmit_fast(pcb);
 801a0a0:	4620      	mov	r0, r4
 801a0a2:	f002 f8b6 	bl	801c212 <tcp_rexmit_fast>
              found_dupack = 1;
 801a0a6:	2301      	movs	r3, #1
 801a0a8:	e000      	b.n	801a0ac <tcp_receive+0x1d8>
  int found_dupack = 0;
 801a0aa:	2300      	movs	r3, #0
      if (!found_dupack) {
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	f47f af3e 	bne.w	8019f2e <tcp_receive+0x5a>
        pcb->dupacks = 0;
 801a0b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0b6:	e73a      	b.n	8019f2e <tcp_receive+0x5a>
  int found_dupack = 0;
 801a0b8:	2300      	movs	r3, #0
 801a0ba:	e7f7      	b.n	801a0ac <tcp_receive+0x1d8>
              found_dupack = 1;
 801a0bc:	2301      	movs	r3, #1
 801a0be:	e7f5      	b.n	801a0ac <tcp_receive+0x1d8>
      if (pcb->flags & TF_INFR) {
 801a0c0:	7ea2      	ldrb	r2, [r4, #26]
 801a0c2:	f012 0f04 	tst.w	r2, #4
 801a0c6:	d006      	beq.n	801a0d6 <tcp_receive+0x202>
        pcb->flags &= ~TF_INFR;
 801a0c8:	f022 0204 	bic.w	r2, r2, #4
 801a0cc:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801a0ce:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801a0d2:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 801a0d6:	2100      	movs	r1, #0
 801a0d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801a0dc:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801a0e0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801a0e2:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 801a0e6:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 801a0ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 801a0ee:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 801a0f0:	7d23      	ldrb	r3, [r4, #20]
 801a0f2:	2b03      	cmp	r3, #3
 801a0f4:	d90c      	bls.n	801a110 <tcp_receive+0x23c>
        if (pcb->cwnd < pcb->ssthresh) {
 801a0f6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801a0fa:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801a0fe:	429a      	cmp	r2, r3
 801a100:	d260      	bcs.n	801a1c4 <tcp_receive+0x2f0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801a102:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801a104:	4413      	add	r3, r2
 801a106:	b29b      	uxth	r3, r3
 801a108:	429a      	cmp	r2, r3
 801a10a:	d201      	bcs.n	801a110 <tcp_receive+0x23c>
            pcb->cwnd += pcb->mss;
 801a10c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 801a110:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a112:	2b00      	cmp	r3, #0
 801a114:	d06d      	beq.n	801a1f2 <tcp_receive+0x31e>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 801a116:	68db      	ldr	r3, [r3, #12]
 801a118:	6858      	ldr	r0, [r3, #4]
 801a11a:	f7fc f931 	bl	8016380 <lwip_htonl>
 801a11e:	4605      	mov	r5, r0
 801a120:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a122:	891e      	ldrh	r6, [r3, #8]
 801a124:	68db      	ldr	r3, [r3, #12]
 801a126:	8998      	ldrh	r0, [r3, #12]
 801a128:	f7fc f927 	bl	801637a <lwip_htons>
 801a12c:	f010 0f03 	tst.w	r0, #3
 801a130:	d05d      	beq.n	801a1ee <tcp_receive+0x31a>
 801a132:	2301      	movs	r3, #1
 801a134:	4433      	add	r3, r6
 801a136:	441d      	add	r5, r3
 801a138:	4b1a      	ldr	r3, [pc, #104]	; (801a1a4 <tcp_receive+0x2d0>)
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 801a13e:	2d00      	cmp	r5, #0
 801a140:	dc57      	bgt.n	801a1f2 <tcp_receive+0x31e>
        next = pcb->unacked;
 801a142:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 801a144:	682b      	ldr	r3, [r5, #0]
 801a146:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801a148:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 801a14c:	6868      	ldr	r0, [r5, #4]
 801a14e:	f7fe fbbd 	bl	80188cc <pbuf_clen>
 801a152:	4286      	cmp	r6, r0
 801a154:	d343      	bcc.n	801a1de <tcp_receive+0x30a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 801a156:	6868      	ldr	r0, [r5, #4]
 801a158:	f7fe fbb8 	bl	80188cc <pbuf_clen>
 801a15c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801a160:	1a18      	subs	r0, r3, r0
 801a162:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 801a166:	892b      	ldrh	r3, [r5, #8]
 801a168:	4a0f      	ldr	r2, [pc, #60]	; (801a1a8 <tcp_receive+0x2d4>)
 801a16a:	8811      	ldrh	r1, [r2, #0]
 801a16c:	440b      	add	r3, r1
 801a16e:	8013      	strh	r3, [r2, #0]
        tcp_seg_free(next);
 801a170:	4628      	mov	r0, r5
 801a172:	f7fe fec9 	bl	8018f08 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 801a176:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d0c8      	beq.n	801a110 <tcp_receive+0x23c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 801a17e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a180:	2b00      	cmp	r3, #0
 801a182:	d1c5      	bne.n	801a110 <tcp_receive+0x23c>
 801a184:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801a186:	2b00      	cmp	r3, #0
 801a188:	d1c2      	bne.n	801a110 <tcp_receive+0x23c>
 801a18a:	4b08      	ldr	r3, [pc, #32]	; (801a1ac <tcp_receive+0x2d8>)
 801a18c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 801a190:	4907      	ldr	r1, [pc, #28]	; (801a1b0 <tcp_receive+0x2dc>)
 801a192:	4808      	ldr	r0, [pc, #32]	; (801a1b4 <tcp_receive+0x2e0>)
 801a194:	f005 fcab 	bl	801faee <iprintf>
 801a198:	e7ba      	b.n	801a110 <tcp_receive+0x23c>
 801a19a:	bf00      	nop
 801a19c:	200102b4 	.word	0x200102b4
 801a1a0:	200102d4 	.word	0x200102d4
 801a1a4:	200102b0 	.word	0x200102b0
 801a1a8:	200102c8 	.word	0x200102c8
 801a1ac:	08026760 	.word	0x08026760
 801a1b0:	080267d8 	.word	0x080267d8
 801a1b4:	080214f0 	.word	0x080214f0
 801a1b8:	08026794 	.word	0x08026794
 801a1bc:	200102dc 	.word	0x200102dc
 801a1c0:	200102ea 	.word	0x200102ea
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 801a1c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801a1c6:	fb03 f303 	mul.w	r3, r3, r3
 801a1ca:	fb93 f3f2 	sdiv	r3, r3, r2
 801a1ce:	fa12 f383 	uxtah	r3, r2, r3
 801a1d2:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 801a1d4:	429a      	cmp	r2, r3
 801a1d6:	d29b      	bcs.n	801a110 <tcp_receive+0x23c>
            pcb->cwnd = new_cwnd;
 801a1d8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801a1dc:	e798      	b.n	801a110 <tcp_receive+0x23c>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801a1de:	4ba2      	ldr	r3, [pc, #648]	; (801a468 <tcp_receive+0x594>)
 801a1e0:	f240 429e 	movw	r2, #1182	; 0x49e
 801a1e4:	49a1      	ldr	r1, [pc, #644]	; (801a46c <tcp_receive+0x598>)
 801a1e6:	48a2      	ldr	r0, [pc, #648]	; (801a470 <tcp_receive+0x59c>)
 801a1e8:	f005 fc81 	bl	801faee <iprintf>
 801a1ec:	e7b3      	b.n	801a156 <tcp_receive+0x282>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	e7a0      	b.n	801a134 <tcp_receive+0x260>
      if (pcb->unacked == NULL) {
 801a1f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a1f4:	b123      	cbz	r3, 801a200 <tcp_receive+0x32c>
        pcb->rtime = 0;
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	76e3      	strb	r3, [r4, #27]
 801a1fe:	e696      	b.n	8019f2e <tcp_receive+0x5a>
        pcb->rtime = -1;
 801a200:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a204:	8623      	strh	r3, [r4, #48]	; 0x30
 801a206:	e7f8      	b.n	801a1fa <tcp_receive+0x326>
        pcb->unsent_oversize = 0;
 801a208:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 801a20c:	e6b8      	b.n	8019f80 <tcp_receive+0xac>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801a20e:	4b96      	ldr	r3, [pc, #600]	; (801a468 <tcp_receive+0x594>)
 801a210:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801a214:	4995      	ldr	r1, [pc, #596]	; (801a46c <tcp_receive+0x598>)
 801a216:	4896      	ldr	r0, [pc, #600]	; (801a470 <tcp_receive+0x59c>)
 801a218:	f005 fc69 	bl	801faee <iprintf>
 801a21c:	e6b8      	b.n	8019f90 <tcp_receive+0xbc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801a21e:	2300      	movs	r3, #0
 801a220:	e69b      	b.n	8019f5a <tcp_receive+0x86>
    pcb->snd_buf += recv_acked;
 801a222:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801a226:	4a93      	ldr	r2, [pc, #588]	; (801a474 <tcp_receive+0x5a0>)
 801a228:	8812      	ldrh	r2, [r2, #0]
 801a22a:	4413      	add	r3, r2
 801a22c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801a230:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a232:	b12b      	cbz	r3, 801a240 <tcp_receive+0x36c>
 801a234:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801a236:	4990      	ldr	r1, [pc, #576]	; (801a478 <tcp_receive+0x5a4>)
 801a238:	6809      	ldr	r1, [r1, #0]
 801a23a:	1a52      	subs	r2, r2, r1
 801a23c:	2a00      	cmp	r2, #0
 801a23e:	db29      	blt.n	801a294 <tcp_receive+0x3c0>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801a240:	4b8e      	ldr	r3, [pc, #568]	; (801a47c <tcp_receive+0x5a8>)
 801a242:	881b      	ldrh	r3, [r3, #0]
 801a244:	2b00      	cmp	r3, #0
 801a246:	f000 834b 	beq.w	801a8e0 <tcp_receive+0xa0c>
 801a24a:	7d22      	ldrb	r2, [r4, #20]
 801a24c:	2a06      	cmp	r2, #6
 801a24e:	f200 8347 	bhi.w	801a8e0 <tcp_receive+0xa0c>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a252:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a254:	4a8a      	ldr	r2, [pc, #552]	; (801a480 <tcp_receive+0x5ac>)
 801a256:	6812      	ldr	r2, [r2, #0]
 801a258:	1a8e      	subs	r6, r1, r2
 801a25a:	2e01      	cmp	r6, #1
 801a25c:	d404      	bmi.n	801a268 <tcp_receive+0x394>
 801a25e:	4413      	add	r3, r2
 801a260:	1acb      	subs	r3, r1, r3
 801a262:	3301      	adds	r3, #1
 801a264:	2b00      	cmp	r3, #0
 801a266:	dd36      	ble.n	801a2d6 <tcp_receive+0x402>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801a268:	1a52      	subs	r2, r2, r1
 801a26a:	2a00      	cmp	r2, #0
 801a26c:	f2c0 8093 	blt.w	801a396 <tcp_receive+0x4c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a270:	4b83      	ldr	r3, [pc, #524]	; (801a480 <tcp_receive+0x5ac>)
 801a272:	6819      	ldr	r1, [r3, #0]
 801a274:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a276:	1a8b      	subs	r3, r1, r2
 801a278:	2b00      	cmp	r3, #0
 801a27a:	db06      	blt.n	801a28a <tcp_receive+0x3b6>
 801a27c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a27e:	4413      	add	r3, r2
 801a280:	1acb      	subs	r3, r1, r3
 801a282:	3301      	adds	r3, #1
 801a284:	2b00      	cmp	r3, #0
 801a286:	f340 808b 	ble.w	801a3a0 <tcp_receive+0x4cc>
      tcp_send_empty_ack(pcb);
 801a28a:	4620      	mov	r0, r4
 801a28c:	f001 fd92 	bl	801bdb4 <tcp_send_empty_ack>
 801a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801a294:	4a7b      	ldr	r2, [pc, #492]	; (801a484 <tcp_receive+0x5b0>)
 801a296:	6812      	ldr	r2, [r2, #0]
 801a298:	1ad2      	subs	r2, r2, r3
 801a29a:	b292      	uxth	r2, r2
      m = m - (pcb->sa >> 3);
 801a29c:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801a2a0:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 801a2a4:	b292      	uxth	r2, r2
 801a2a6:	b213      	sxth	r3, r2
      pcb->sa += m;
 801a2a8:	4411      	add	r1, r2
 801a2aa:	b209      	sxth	r1, r1
 801a2ac:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	db0e      	blt.n	801a2d0 <tcp_receive+0x3fc>
      m = m - (pcb->sv >> 2);
 801a2b2:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 801a2b6:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv += m;
 801a2ba:	fa12 f383 	uxtah	r3, r2, r3
 801a2be:	b29b      	uxth	r3, r3
 801a2c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801a2c2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801a2c6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	6363      	str	r3, [r4, #52]	; 0x34
 801a2ce:	e7b7      	b.n	801a240 <tcp_receive+0x36c>
        m = -m;
 801a2d0:	4253      	negs	r3, r2
 801a2d2:	b21b      	sxth	r3, r3
 801a2d4:	e7ed      	b.n	801a2b2 <tcp_receive+0x3de>
      struct pbuf *p = inseg.p;
 801a2d6:	4b6c      	ldr	r3, [pc, #432]	; (801a488 <tcp_receive+0x5b4>)
 801a2d8:	685d      	ldr	r5, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 801a2da:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801a2dc:	b195      	cbz	r5, 801a304 <tcp_receive+0x430>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801a2de:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 801a2e2:	429e      	cmp	r6, r3
 801a2e4:	dc16      	bgt.n	801a314 <tcp_receive+0x440>
      if (inseg.p->len < off) {
 801a2e6:	4b68      	ldr	r3, [pc, #416]	; (801a488 <tcp_receive+0x5b4>)
 801a2e8:	6858      	ldr	r0, [r3, #4]
 801a2ea:	8943      	ldrh	r3, [r0, #10]
 801a2ec:	429e      	cmp	r6, r3
 801a2ee:	dd44      	ble.n	801a37a <tcp_receive+0x4a6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a2f0:	8903      	ldrh	r3, [r0, #8]
 801a2f2:	429e      	cmp	r6, r3
 801a2f4:	dc16      	bgt.n	801a324 <tcp_receive+0x450>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801a2f6:	4b64      	ldr	r3, [pc, #400]	; (801a488 <tcp_receive+0x5b4>)
 801a2f8:	685b      	ldr	r3, [r3, #4]
 801a2fa:	891a      	ldrh	r2, [r3, #8]
 801a2fc:	b2b6      	uxth	r6, r6
 801a2fe:	1b92      	subs	r2, r2, r6
 801a300:	b292      	uxth	r2, r2
        while (p->len < off) {
 801a302:	e01c      	b.n	801a33e <tcp_receive+0x46a>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801a304:	4b58      	ldr	r3, [pc, #352]	; (801a468 <tcp_receive+0x594>)
 801a306:	f240 523c 	movw	r2, #1340	; 0x53c
 801a30a:	4960      	ldr	r1, [pc, #384]	; (801a48c <tcp_receive+0x5b8>)
 801a30c:	4858      	ldr	r0, [pc, #352]	; (801a470 <tcp_receive+0x59c>)
 801a30e:	f005 fbee 	bl	801faee <iprintf>
 801a312:	e7e4      	b.n	801a2de <tcp_receive+0x40a>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801a314:	4b54      	ldr	r3, [pc, #336]	; (801a468 <tcp_receive+0x594>)
 801a316:	f240 523d 	movw	r2, #1341	; 0x53d
 801a31a:	495d      	ldr	r1, [pc, #372]	; (801a490 <tcp_receive+0x5bc>)
 801a31c:	4854      	ldr	r0, [pc, #336]	; (801a470 <tcp_receive+0x59c>)
 801a31e:	f005 fbe6 	bl	801faee <iprintf>
 801a322:	e7e0      	b.n	801a2e6 <tcp_receive+0x412>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a324:	4b50      	ldr	r3, [pc, #320]	; (801a468 <tcp_receive+0x594>)
 801a326:	f240 523f 	movw	r2, #1343	; 0x53f
 801a32a:	495a      	ldr	r1, [pc, #360]	; (801a494 <tcp_receive+0x5c0>)
 801a32c:	4850      	ldr	r0, [pc, #320]	; (801a470 <tcp_receive+0x59c>)
 801a32e:	f005 fbde 	bl	801faee <iprintf>
 801a332:	e7e0      	b.n	801a2f6 <tcp_receive+0x422>
          off -= p->len;
 801a334:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 801a336:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 801a338:	2300      	movs	r3, #0
 801a33a:	816b      	strh	r3, [r5, #10]
          p = p->next;
 801a33c:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 801a33e:	896b      	ldrh	r3, [r5, #10]
 801a340:	429f      	cmp	r7, r3
 801a342:	dcf7      	bgt.n	801a334 <tcp_receive+0x460>
        if (pbuf_header(p, (s16_t)-off)) {
 801a344:	4279      	negs	r1, r7
 801a346:	b209      	sxth	r1, r1
 801a348:	4628      	mov	r0, r5
 801a34a:	f7fe f8ef 	bl	801852c <pbuf_header>
 801a34e:	b960      	cbnz	r0, 801a36a <tcp_receive+0x496>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 801a350:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a352:	484b      	ldr	r0, [pc, #300]	; (801a480 <tcp_receive+0x5ac>)
 801a354:	6803      	ldr	r3, [r0, #0]
 801a356:	1a9b      	subs	r3, r3, r2
 801a358:	494b      	ldr	r1, [pc, #300]	; (801a488 <tcp_receive+0x5b4>)
 801a35a:	890d      	ldrh	r5, [r1, #8]
 801a35c:	fa15 f383 	uxtah	r3, r5, r3
 801a360:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801a362:	68cb      	ldr	r3, [r1, #12]
 801a364:	6002      	str	r2, [r0, #0]
 801a366:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a368:	e782      	b.n	801a270 <tcp_receive+0x39c>
          LWIP_ASSERT("pbuf_header failed", 0);
 801a36a:	4b3f      	ldr	r3, [pc, #252]	; (801a468 <tcp_receive+0x594>)
 801a36c:	f240 524c 	movw	r2, #1356	; 0x54c
 801a370:	4949      	ldr	r1, [pc, #292]	; (801a498 <tcp_receive+0x5c4>)
 801a372:	483f      	ldr	r0, [pc, #252]	; (801a470 <tcp_receive+0x59c>)
 801a374:	f005 fbbb 	bl	801faee <iprintf>
 801a378:	e7ea      	b.n	801a350 <tcp_receive+0x47c>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 801a37a:	4271      	negs	r1, r6
 801a37c:	b209      	sxth	r1, r1
 801a37e:	f7fe f8d5 	bl	801852c <pbuf_header>
 801a382:	2800      	cmp	r0, #0
 801a384:	d0e4      	beq.n	801a350 <tcp_receive+0x47c>
          LWIP_ASSERT("pbuf_header failed", 0);
 801a386:	4b38      	ldr	r3, [pc, #224]	; (801a468 <tcp_receive+0x594>)
 801a388:	f240 5251 	movw	r2, #1361	; 0x551
 801a38c:	4942      	ldr	r1, [pc, #264]	; (801a498 <tcp_receive+0x5c4>)
 801a38e:	4838      	ldr	r0, [pc, #224]	; (801a470 <tcp_receive+0x59c>)
 801a390:	f005 fbad 	bl	801faee <iprintf>
 801a394:	e7dc      	b.n	801a350 <tcp_receive+0x47c>
        tcp_ack_now(pcb);
 801a396:	7ea3      	ldrb	r3, [r4, #26]
 801a398:	f043 0302 	orr.w	r3, r3, #2
 801a39c:	76a3      	strb	r3, [r4, #26]
 801a39e:	e767      	b.n	801a270 <tcp_receive+0x39c>
      if (pcb->rcv_nxt == seqno) {
 801a3a0:	4291      	cmp	r1, r2
 801a3a2:	d008      	beq.n	801a3b6 <tcp_receive+0x4e2>
        tcp_send_empty_ack(pcb);
 801a3a4:	4620      	mov	r0, r4
 801a3a6:	f001 fd05 	bl	801bdb4 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 801a3aa:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801a3ac:	2d00      	cmp	r5, #0
 801a3ae:	f000 81ad 	beq.w	801a70c <tcp_receive+0x838>
 801a3b2:	2600      	movs	r6, #0
 801a3b4:	e1e4      	b.n	801a780 <tcp_receive+0x8ac>
        tcplen = TCP_TCPLEN(&inseg);
 801a3b6:	4b34      	ldr	r3, [pc, #208]	; (801a488 <tcp_receive+0x5b4>)
 801a3b8:	891d      	ldrh	r5, [r3, #8]
 801a3ba:	68db      	ldr	r3, [r3, #12]
 801a3bc:	8998      	ldrh	r0, [r3, #12]
 801a3be:	f7fb ffdc 	bl	801637a <lwip_htons>
 801a3c2:	f010 0f03 	tst.w	r0, #3
 801a3c6:	d015      	beq.n	801a3f4 <tcp_receive+0x520>
 801a3c8:	2301      	movs	r3, #1
 801a3ca:	442b      	add	r3, r5
 801a3cc:	b29b      	uxth	r3, r3
 801a3ce:	4a2b      	ldr	r2, [pc, #172]	; (801a47c <tcp_receive+0x5a8>)
 801a3d0:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 801a3d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801a3d4:	4293      	cmp	r3, r2
 801a3d6:	d80f      	bhi.n	801a3f8 <tcp_receive+0x524>
        if (pcb->ooseq != NULL) {
 801a3d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	f000 80ed 	beq.w	801a5ba <tcp_receive+0x6e6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a3e0:	4b29      	ldr	r3, [pc, #164]	; (801a488 <tcp_receive+0x5b4>)
 801a3e2:	68db      	ldr	r3, [r3, #12]
 801a3e4:	8998      	ldrh	r0, [r3, #12]
 801a3e6:	f7fb ffc8 	bl	801637a <lwip_htons>
 801a3ea:	f010 0f01 	tst.w	r0, #1
 801a3ee:	d168      	bne.n	801a4c2 <tcp_receive+0x5ee>
            next = pcb->ooseq;
 801a3f0:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 801a3f2:	e077      	b.n	801a4e4 <tcp_receive+0x610>
        tcplen = TCP_TCPLEN(&inseg);
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	e7e8      	b.n	801a3ca <tcp_receive+0x4f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a3f8:	4b23      	ldr	r3, [pc, #140]	; (801a488 <tcp_receive+0x5b4>)
 801a3fa:	68db      	ldr	r3, [r3, #12]
 801a3fc:	8998      	ldrh	r0, [r3, #12]
 801a3fe:	f7fb ffbc 	bl	801637a <lwip_htons>
 801a402:	f010 0f01 	tst.w	r0, #1
 801a406:	d14b      	bne.n	801a4a0 <tcp_receive+0x5cc>
          inseg.len = (u16_t)pcb->rcv_wnd;
 801a408:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801a40a:	4b1f      	ldr	r3, [pc, #124]	; (801a488 <tcp_receive+0x5b4>)
 801a40c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a40e:	68db      	ldr	r3, [r3, #12]
 801a410:	8998      	ldrh	r0, [r3, #12]
 801a412:	f7fb ffb2 	bl	801637a <lwip_htons>
 801a416:	f010 0f02 	tst.w	r0, #2
 801a41a:	d003      	beq.n	801a424 <tcp_receive+0x550>
            inseg.len -= 1;
 801a41c:	4a1a      	ldr	r2, [pc, #104]	; (801a488 <tcp_receive+0x5b4>)
 801a41e:	8913      	ldrh	r3, [r2, #8]
 801a420:	3b01      	subs	r3, #1
 801a422:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801a424:	4d18      	ldr	r5, [pc, #96]	; (801a488 <tcp_receive+0x5b4>)
 801a426:	8929      	ldrh	r1, [r5, #8]
 801a428:	6868      	ldr	r0, [r5, #4]
 801a42a:	f7fe f9dd 	bl	80187e8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801a42e:	892e      	ldrh	r6, [r5, #8]
 801a430:	68eb      	ldr	r3, [r5, #12]
 801a432:	8998      	ldrh	r0, [r3, #12]
 801a434:	f7fb ffa1 	bl	801637a <lwip_htons>
 801a438:	f010 0f03 	tst.w	r0, #3
 801a43c:	d03f      	beq.n	801a4be <tcp_receive+0x5ea>
 801a43e:	2301      	movs	r3, #1
 801a440:	4433      	add	r3, r6
 801a442:	b29b      	uxth	r3, r3
 801a444:	4a0d      	ldr	r2, [pc, #52]	; (801a47c <tcp_receive+0x5a8>)
 801a446:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a448:	4a0d      	ldr	r2, [pc, #52]	; (801a480 <tcp_receive+0x5ac>)
 801a44a:	6812      	ldr	r2, [r2, #0]
 801a44c:	4413      	add	r3, r2
 801a44e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a450:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a452:	440a      	add	r2, r1
 801a454:	4293      	cmp	r3, r2
 801a456:	d0bf      	beq.n	801a3d8 <tcp_receive+0x504>
 801a458:	4b03      	ldr	r3, [pc, #12]	; (801a468 <tcp_receive+0x594>)
 801a45a:	f240 527f 	movw	r2, #1407	; 0x57f
 801a45e:	490f      	ldr	r1, [pc, #60]	; (801a49c <tcp_receive+0x5c8>)
 801a460:	4803      	ldr	r0, [pc, #12]	; (801a470 <tcp_receive+0x59c>)
 801a462:	f005 fb44 	bl	801faee <iprintf>
 801a466:	e7b7      	b.n	801a3d8 <tcp_receive+0x504>
 801a468:	08026760 	.word	0x08026760
 801a46c:	080267b0 	.word	0x080267b0
 801a470:	080214f0 	.word	0x080214f0
 801a474:	200102c8 	.word	0x200102c8
 801a478:	200102b0 	.word	0x200102b0
 801a47c:	200102ea 	.word	0x200102ea
 801a480:	200102d4 	.word	0x200102d4
 801a484:	20015cc8 	.word	0x20015cc8
 801a488:	200102b8 	.word	0x200102b8
 801a48c:	080267f8 	.word	0x080267f8
 801a490:	08026808 	.word	0x08026808
 801a494:	08026818 	.word	0x08026818
 801a498:	08026828 	.word	0x08026828
 801a49c:	0802683c 	.word	0x0802683c
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801a4a0:	4ba9      	ldr	r3, [pc, #676]	; (801a748 <tcp_receive+0x874>)
 801a4a2:	68de      	ldr	r6, [r3, #12]
 801a4a4:	89b0      	ldrh	r0, [r6, #12]
 801a4a6:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 801a4aa:	b2ad      	uxth	r5, r5
 801a4ac:	f7fb ff65 	bl	801637a <lwip_htons>
 801a4b0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801a4b4:	f7fb ff61 	bl	801637a <lwip_htons>
 801a4b8:	4328      	orrs	r0, r5
 801a4ba:	81b0      	strh	r0, [r6, #12]
 801a4bc:	e7a4      	b.n	801a408 <tcp_receive+0x534>
          tcplen = TCP_TCPLEN(&inseg);
 801a4be:	2300      	movs	r3, #0
 801a4c0:	e7be      	b.n	801a440 <tcp_receive+0x56c>
            while (pcb->ooseq != NULL) {
 801a4c2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801a4c4:	2800      	cmp	r0, #0
 801a4c6:	d078      	beq.n	801a5ba <tcp_receive+0x6e6>
              pcb->ooseq = pcb->ooseq->next;
 801a4c8:	6803      	ldr	r3, [r0, #0]
 801a4ca:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 801a4cc:	f7fe fd1c 	bl	8018f08 <tcp_seg_free>
 801a4d0:	e7f7      	b.n	801a4c2 <tcp_receive+0x5ee>
                tcplen = TCP_TCPLEN(&inseg);
 801a4d2:	2300      	movs	r3, #0
 801a4d4:	443b      	add	r3, r7
 801a4d6:	4a9d      	ldr	r2, [pc, #628]	; (801a74c <tcp_receive+0x878>)
 801a4d8:	8013      	strh	r3, [r2, #0]
              next = next->next;
 801a4da:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 801a4dc:	4628      	mov	r0, r5
 801a4de:	f7fe fd13 	bl	8018f08 <tcp_seg_free>
              next = next->next;
 801a4e2:	4635      	mov	r5, r6
            while (next &&
 801a4e4:	b375      	cbz	r5, 801a544 <tcp_receive+0x670>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801a4e6:	4b99      	ldr	r3, [pc, #612]	; (801a74c <tcp_receive+0x878>)
 801a4e8:	881b      	ldrh	r3, [r3, #0]
 801a4ea:	4a99      	ldr	r2, [pc, #612]	; (801a750 <tcp_receive+0x87c>)
 801a4ec:	6812      	ldr	r2, [r2, #0]
 801a4ee:	4413      	add	r3, r2
 801a4f0:	68e9      	ldr	r1, [r5, #12]
 801a4f2:	684a      	ldr	r2, [r1, #4]
 801a4f4:	8928      	ldrh	r0, [r5, #8]
 801a4f6:	4402      	add	r2, r0
 801a4f8:	1a9b      	subs	r3, r3, r2
            while (next &&
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	db22      	blt.n	801a544 <tcp_receive+0x670>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a4fe:	8988      	ldrh	r0, [r1, #12]
 801a500:	f7fb ff3b 	bl	801637a <lwip_htons>
 801a504:	f010 0f01 	tst.w	r0, #1
 801a508:	d0e7      	beq.n	801a4da <tcp_receive+0x606>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801a50a:	4b8f      	ldr	r3, [pc, #572]	; (801a748 <tcp_receive+0x874>)
 801a50c:	68db      	ldr	r3, [r3, #12]
 801a50e:	8998      	ldrh	r0, [r3, #12]
 801a510:	f7fb ff33 	bl	801637a <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a514:	f010 0f02 	tst.w	r0, #2
 801a518:	d1df      	bne.n	801a4da <tcp_receive+0x606>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801a51a:	4e8b      	ldr	r6, [pc, #556]	; (801a748 <tcp_receive+0x874>)
 801a51c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801a520:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 801a524:	2001      	movs	r0, #1
 801a526:	f7fb ff28 	bl	801637a <lwip_htons>
 801a52a:	4338      	orrs	r0, r7
 801a52c:	f8a8 000c 	strh.w	r0, [r8, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801a530:	8937      	ldrh	r7, [r6, #8]
 801a532:	68f3      	ldr	r3, [r6, #12]
 801a534:	8998      	ldrh	r0, [r3, #12]
 801a536:	f7fb ff20 	bl	801637a <lwip_htons>
 801a53a:	f010 0f03 	tst.w	r0, #3
 801a53e:	d0c8      	beq.n	801a4d2 <tcp_receive+0x5fe>
 801a540:	2301      	movs	r3, #1
 801a542:	e7c7      	b.n	801a4d4 <tcp_receive+0x600>
            if (next &&
 801a544:	2d00      	cmp	r5, #0
 801a546:	d037      	beq.n	801a5b8 <tcp_receive+0x6e4>
                TCP_SEQ_GT(seqno + tcplen,
 801a548:	4b81      	ldr	r3, [pc, #516]	; (801a750 <tcp_receive+0x87c>)
 801a54a:	6819      	ldr	r1, [r3, #0]
 801a54c:	4b7f      	ldr	r3, [pc, #508]	; (801a74c <tcp_receive+0x878>)
 801a54e:	881b      	ldrh	r3, [r3, #0]
 801a550:	440b      	add	r3, r1
 801a552:	68ea      	ldr	r2, [r5, #12]
 801a554:	6852      	ldr	r2, [r2, #4]
 801a556:	1a9b      	subs	r3, r3, r2
            if (next &&
 801a558:	2b00      	cmp	r3, #0
 801a55a:	dd2d      	ble.n	801a5b8 <tcp_receive+0x6e4>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801a55c:	1a52      	subs	r2, r2, r1
 801a55e:	4b7a      	ldr	r3, [pc, #488]	; (801a748 <tcp_receive+0x874>)
 801a560:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a562:	68db      	ldr	r3, [r3, #12]
 801a564:	8998      	ldrh	r0, [r3, #12]
 801a566:	f7fb ff08 	bl	801637a <lwip_htons>
 801a56a:	f010 0f02 	tst.w	r0, #2
 801a56e:	d003      	beq.n	801a578 <tcp_receive+0x6a4>
                inseg.len -= 1;
 801a570:	4a75      	ldr	r2, [pc, #468]	; (801a748 <tcp_receive+0x874>)
 801a572:	8913      	ldrh	r3, [r2, #8]
 801a574:	3b01      	subs	r3, #1
 801a576:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801a578:	4e73      	ldr	r6, [pc, #460]	; (801a748 <tcp_receive+0x874>)
 801a57a:	8931      	ldrh	r1, [r6, #8]
 801a57c:	6870      	ldr	r0, [r6, #4]
 801a57e:	f7fe f933 	bl	80187e8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a582:	8937      	ldrh	r7, [r6, #8]
 801a584:	68f3      	ldr	r3, [r6, #12]
 801a586:	8998      	ldrh	r0, [r3, #12]
 801a588:	f7fb fef7 	bl	801637a <lwip_htons>
 801a58c:	f010 0f03 	tst.w	r0, #3
 801a590:	d03b      	beq.n	801a60a <tcp_receive+0x736>
 801a592:	2301      	movs	r3, #1
 801a594:	443b      	add	r3, r7
 801a596:	b29b      	uxth	r3, r3
 801a598:	4a6c      	ldr	r2, [pc, #432]	; (801a74c <tcp_receive+0x878>)
 801a59a:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a59c:	4a6c      	ldr	r2, [pc, #432]	; (801a750 <tcp_receive+0x87c>)
 801a59e:	6812      	ldr	r2, [r2, #0]
 801a5a0:	4413      	add	r3, r2
 801a5a2:	68ea      	ldr	r2, [r5, #12]
 801a5a4:	6852      	ldr	r2, [r2, #4]
 801a5a6:	4293      	cmp	r3, r2
 801a5a8:	d006      	beq.n	801a5b8 <tcp_receive+0x6e4>
 801a5aa:	4b6a      	ldr	r3, [pc, #424]	; (801a754 <tcp_receive+0x880>)
 801a5ac:	f240 52af 	movw	r2, #1455	; 0x5af
 801a5b0:	4969      	ldr	r1, [pc, #420]	; (801a758 <tcp_receive+0x884>)
 801a5b2:	486a      	ldr	r0, [pc, #424]	; (801a75c <tcp_receive+0x888>)
 801a5b4:	f005 fa9b 	bl	801faee <iprintf>
            pcb->ooseq = next;
 801a5b8:	6725      	str	r5, [r4, #112]	; 0x70
        pcb->rcv_nxt = seqno + tcplen;
 801a5ba:	4b64      	ldr	r3, [pc, #400]	; (801a74c <tcp_receive+0x878>)
 801a5bc:	881a      	ldrh	r2, [r3, #0]
 801a5be:	4b64      	ldr	r3, [pc, #400]	; (801a750 <tcp_receive+0x87c>)
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	4413      	add	r3, r2
 801a5c4:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a5c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a5c8:	429a      	cmp	r2, r3
 801a5ca:	d820      	bhi.n	801a60e <tcp_receive+0x73a>
        pcb->rcv_wnd -= tcplen;
 801a5cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a5ce:	4a5f      	ldr	r2, [pc, #380]	; (801a74c <tcp_receive+0x878>)
 801a5d0:	8812      	ldrh	r2, [r2, #0]
 801a5d2:	1a9b      	subs	r3, r3, r2
 801a5d4:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801a5d6:	4620      	mov	r0, r4
 801a5d8:	f7fe fc24 	bl	8018e24 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801a5dc:	4b5a      	ldr	r3, [pc, #360]	; (801a748 <tcp_receive+0x874>)
 801a5de:	685b      	ldr	r3, [r3, #4]
 801a5e0:	891a      	ldrh	r2, [r3, #8]
 801a5e2:	b122      	cbz	r2, 801a5ee <tcp_receive+0x71a>
          recv_data = inseg.p;
 801a5e4:	4a5e      	ldr	r2, [pc, #376]	; (801a760 <tcp_receive+0x88c>)
 801a5e6:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801a5e8:	2200      	movs	r2, #0
 801a5ea:	4b57      	ldr	r3, [pc, #348]	; (801a748 <tcp_receive+0x874>)
 801a5ec:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a5ee:	4b56      	ldr	r3, [pc, #344]	; (801a748 <tcp_receive+0x874>)
 801a5f0:	68db      	ldr	r3, [r3, #12]
 801a5f2:	8998      	ldrh	r0, [r3, #12]
 801a5f4:	f7fb fec1 	bl	801637a <lwip_htons>
 801a5f8:	f010 0f01 	tst.w	r0, #1
 801a5fc:	d035      	beq.n	801a66a <tcp_receive+0x796>
          recv_flags |= TF_GOT_FIN;
 801a5fe:	4a59      	ldr	r2, [pc, #356]	; (801a764 <tcp_receive+0x890>)
 801a600:	7813      	ldrb	r3, [r2, #0]
 801a602:	f043 0320 	orr.w	r3, r3, #32
 801a606:	7013      	strb	r3, [r2, #0]
 801a608:	e02f      	b.n	801a66a <tcp_receive+0x796>
              tcplen = TCP_TCPLEN(&inseg);
 801a60a:	2300      	movs	r3, #0
 801a60c:	e7c2      	b.n	801a594 <tcp_receive+0x6c0>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a60e:	4b51      	ldr	r3, [pc, #324]	; (801a754 <tcp_receive+0x880>)
 801a610:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a614:	4954      	ldr	r1, [pc, #336]	; (801a768 <tcp_receive+0x894>)
 801a616:	4851      	ldr	r0, [pc, #324]	; (801a75c <tcp_receive+0x888>)
 801a618:	f005 fa69 	bl	801faee <iprintf>
 801a61c:	e7d6      	b.n	801a5cc <tcp_receive+0x6f8>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a61e:	2300      	movs	r3, #0
 801a620:	e035      	b.n	801a68e <tcp_receive+0x7ba>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a622:	2300      	movs	r3, #0
 801a624:	e041      	b.n	801a6aa <tcp_receive+0x7d6>
 801a626:	4b4b      	ldr	r3, [pc, #300]	; (801a754 <tcp_receive+0x880>)
 801a628:	f240 52de 	movw	r2, #1502	; 0x5de
 801a62c:	494f      	ldr	r1, [pc, #316]	; (801a76c <tcp_receive+0x898>)
 801a62e:	484b      	ldr	r0, [pc, #300]	; (801a75c <tcp_receive+0x888>)
 801a630:	f005 fa5d 	bl	801faee <iprintf>
 801a634:	e03c      	b.n	801a6b0 <tcp_receive+0x7dc>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a636:	2300      	movs	r3, #0
 801a638:	e043      	b.n	801a6c2 <tcp_receive+0x7ee>
              recv_data = cseg->p;
 801a63a:	4b49      	ldr	r3, [pc, #292]	; (801a760 <tcp_receive+0x88c>)
 801a63c:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 801a63e:	2300      	movs	r3, #0
 801a640:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a642:	68eb      	ldr	r3, [r5, #12]
 801a644:	8998      	ldrh	r0, [r3, #12]
 801a646:	f7fb fe98 	bl	801637a <lwip_htons>
 801a64a:	f010 0f01 	tst.w	r0, #1
 801a64e:	d007      	beq.n	801a660 <tcp_receive+0x78c>
            recv_flags |= TF_GOT_FIN;
 801a650:	4a44      	ldr	r2, [pc, #272]	; (801a764 <tcp_receive+0x890>)
 801a652:	7813      	ldrb	r3, [r2, #0]
 801a654:	f043 0320 	orr.w	r3, r3, #32
 801a658:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a65a:	7d23      	ldrb	r3, [r4, #20]
 801a65c:	2b04      	cmp	r3, #4
 801a65e:	d042      	beq.n	801a6e6 <tcp_receive+0x812>
          pcb->ooseq = cseg->next;
 801a660:	682b      	ldr	r3, [r5, #0]
 801a662:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 801a664:	4628      	mov	r0, r5
 801a666:	f7fe fc4f 	bl	8018f08 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a66a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801a66c:	2d00      	cmp	r5, #0
 801a66e:	d03d      	beq.n	801a6ec <tcp_receive+0x818>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a670:	68ea      	ldr	r2, [r5, #12]
 801a672:	6853      	ldr	r3, [r2, #4]
 801a674:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a676:	428b      	cmp	r3, r1
 801a678:	d138      	bne.n	801a6ec <tcp_receive+0x818>
          seqno = pcb->ooseq->tcphdr->seqno;
 801a67a:	4935      	ldr	r1, [pc, #212]	; (801a750 <tcp_receive+0x87c>)
 801a67c:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a67e:	892e      	ldrh	r6, [r5, #8]
 801a680:	8990      	ldrh	r0, [r2, #12]
 801a682:	f7fb fe7a 	bl	801637a <lwip_htons>
 801a686:	f010 0f03 	tst.w	r0, #3
 801a68a:	d0c8      	beq.n	801a61e <tcp_receive+0x74a>
 801a68c:	2301      	movs	r3, #1
 801a68e:	199a      	adds	r2, r3, r6
 801a690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a692:	4413      	add	r3, r2
 801a694:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a696:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 801a698:	892f      	ldrh	r7, [r5, #8]
 801a69a:	68eb      	ldr	r3, [r5, #12]
 801a69c:	8998      	ldrh	r0, [r3, #12]
 801a69e:	f7fb fe6c 	bl	801637a <lwip_htons>
 801a6a2:	f010 0f03 	tst.w	r0, #3
 801a6a6:	d0bc      	beq.n	801a622 <tcp_receive+0x74e>
 801a6a8:	2301      	movs	r3, #1
 801a6aa:	443b      	add	r3, r7
 801a6ac:	429e      	cmp	r6, r3
 801a6ae:	d3ba      	bcc.n	801a626 <tcp_receive+0x752>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a6b0:	892e      	ldrh	r6, [r5, #8]
 801a6b2:	68eb      	ldr	r3, [r5, #12]
 801a6b4:	8998      	ldrh	r0, [r3, #12]
 801a6b6:	f7fb fe60 	bl	801637a <lwip_htons>
 801a6ba:	f010 0f03 	tst.w	r0, #3
 801a6be:	d0ba      	beq.n	801a636 <tcp_receive+0x762>
 801a6c0:	2301      	movs	r3, #1
 801a6c2:	199a      	adds	r2, r3, r6
 801a6c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a6c6:	1a9b      	subs	r3, r3, r2
 801a6c8:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801a6ca:	4620      	mov	r0, r4
 801a6cc:	f7fe fbaa 	bl	8018e24 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801a6d0:	6869      	ldr	r1, [r5, #4]
 801a6d2:	890b      	ldrh	r3, [r1, #8]
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d0b4      	beq.n	801a642 <tcp_receive+0x76e>
            if (recv_data) {
 801a6d8:	4b21      	ldr	r3, [pc, #132]	; (801a760 <tcp_receive+0x88c>)
 801a6da:	6818      	ldr	r0, [r3, #0]
 801a6dc:	2800      	cmp	r0, #0
 801a6de:	d0ac      	beq.n	801a63a <tcp_receive+0x766>
              pbuf_cat(recv_data, cseg->p);
 801a6e0:	f7fe f91a 	bl	8018918 <pbuf_cat>
 801a6e4:	e7ab      	b.n	801a63e <tcp_receive+0x76a>
              pcb->state = CLOSE_WAIT;
 801a6e6:	2307      	movs	r3, #7
 801a6e8:	7523      	strb	r3, [r4, #20]
 801a6ea:	e7b9      	b.n	801a660 <tcp_receive+0x78c>
        tcp_ack(pcb);
 801a6ec:	7ea3      	ldrb	r3, [r4, #26]
 801a6ee:	f013 0f01 	tst.w	r3, #1
 801a6f2:	d006      	beq.n	801a702 <tcp_receive+0x82e>
 801a6f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801a6f8:	f043 0302 	orr.w	r3, r3, #2
 801a6fc:	76a3      	strb	r3, [r4, #26]
 801a6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a702:	f043 0301 	orr.w	r3, r3, #1
 801a706:	76a3      	strb	r3, [r4, #26]
 801a708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a70c:	480e      	ldr	r0, [pc, #56]	; (801a748 <tcp_receive+0x874>)
 801a70e:	f7fe fc12 	bl	8018f36 <tcp_seg_copy>
 801a712:	6720      	str	r0, [r4, #112]	; 0x70
 801a714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              if (inseg.len > next->len) {
 801a718:	4b0b      	ldr	r3, [pc, #44]	; (801a748 <tcp_receive+0x874>)
 801a71a:	891a      	ldrh	r2, [r3, #8]
 801a71c:	892b      	ldrh	r3, [r5, #8]
 801a71e:	429a      	cmp	r2, r3
 801a720:	f240 80ee 	bls.w	801a900 <tcp_receive+0xa2c>
                cseg = tcp_seg_copy(&inseg);
 801a724:	4808      	ldr	r0, [pc, #32]	; (801a748 <tcp_receive+0x874>)
 801a726:	f7fe fc06 	bl	8018f36 <tcp_seg_copy>
                if (cseg != NULL) {
 801a72a:	4603      	mov	r3, r0
 801a72c:	2800      	cmp	r0, #0
 801a72e:	f000 80e7 	beq.w	801a900 <tcp_receive+0xa2c>
                  if (prev != NULL) {
 801a732:	b136      	cbz	r6, 801a742 <tcp_receive+0x86e>
                    prev->next = cseg;
 801a734:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 801a736:	4629      	mov	r1, r5
 801a738:	4618      	mov	r0, r3
 801a73a:	f7ff fb89 	bl	8019e50 <tcp_oos_insert_segment>
 801a73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pcb->ooseq = cseg;
 801a742:	6720      	str	r0, [r4, #112]	; 0x70
 801a744:	e7f7      	b.n	801a736 <tcp_receive+0x862>
 801a746:	bf00      	nop
 801a748:	200102b8 	.word	0x200102b8
 801a74c:	200102ea 	.word	0x200102ea
 801a750:	200102d4 	.word	0x200102d4
 801a754:	08026760 	.word	0x08026760
 801a758:	08026874 	.word	0x08026874
 801a75c:	080214f0 	.word	0x080214f0
 801a760:	200102cc 	.word	0x200102cc
 801a764:	200102d0 	.word	0x200102d0
 801a768:	080268b0 	.word	0x080268b0
 801a76c:	080268d0 	.word	0x080268d0
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a770:	1a5a      	subs	r2, r3, r1
 801a772:	2a00      	cmp	r2, #0
 801a774:	db35      	blt.n	801a7e2 <tcp_receive+0x90e>
              if (next->next == NULL &&
 801a776:	682a      	ldr	r2, [r5, #0]
 801a778:	462e      	mov	r6, r5
 801a77a:	2a00      	cmp	r2, #0
 801a77c:	d03d      	beq.n	801a7fa <tcp_receive+0x926>
 801a77e:	4615      	mov	r5, r2
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a780:	2d00      	cmp	r5, #0
 801a782:	f000 80ab 	beq.w	801a8dc <tcp_receive+0xa08>
            if (seqno == next->tcphdr->seqno) {
 801a786:	68e8      	ldr	r0, [r5, #12]
 801a788:	6841      	ldr	r1, [r0, #4]
 801a78a:	4b5e      	ldr	r3, [pc, #376]	; (801a904 <tcp_receive+0xa30>)
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	4299      	cmp	r1, r3
 801a790:	d0c2      	beq.n	801a718 <tcp_receive+0x844>
              if (prev == NULL) {
 801a792:	2e00      	cmp	r6, #0
 801a794:	d0ec      	beq.n	801a770 <tcp_receive+0x89c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 801a796:	68f2      	ldr	r2, [r6, #12]
 801a798:	6852      	ldr	r2, [r2, #4]
 801a79a:	1a9a      	subs	r2, r3, r2
 801a79c:	2a01      	cmp	r2, #1
 801a79e:	d4ea      	bmi.n	801a776 <tcp_receive+0x8a2>
 801a7a0:	1a5a      	subs	r2, r3, r1
 801a7a2:	3201      	adds	r2, #1
 801a7a4:	2a00      	cmp	r2, #0
 801a7a6:	dce6      	bgt.n	801a776 <tcp_receive+0x8a2>
                  cseg = tcp_seg_copy(&inseg);
 801a7a8:	4857      	ldr	r0, [pc, #348]	; (801a908 <tcp_receive+0xa34>)
 801a7aa:	f7fe fbc4 	bl	8018f36 <tcp_seg_copy>
                  if (cseg != NULL) {
 801a7ae:	4604      	mov	r4, r0
 801a7b0:	2800      	cmp	r0, #0
 801a7b2:	f000 80a5 	beq.w	801a900 <tcp_receive+0xa2c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a7b6:	68f3      	ldr	r3, [r6, #12]
 801a7b8:	6859      	ldr	r1, [r3, #4]
 801a7ba:	8932      	ldrh	r2, [r6, #8]
 801a7bc:	440a      	add	r2, r1
 801a7be:	4b51      	ldr	r3, [pc, #324]	; (801a904 <tcp_receive+0xa30>)
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	1ad2      	subs	r2, r2, r3
 801a7c4:	2a00      	cmp	r2, #0
 801a7c6:	dd05      	ble.n	801a7d4 <tcp_receive+0x900>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a7c8:	1a5b      	subs	r3, r3, r1
 801a7ca:	b299      	uxth	r1, r3
 801a7cc:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a7ce:	6870      	ldr	r0, [r6, #4]
 801a7d0:	f7fe f80a 	bl	80187e8 <pbuf_realloc>
                    prev->next = cseg;
 801a7d4:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a7d6:	4629      	mov	r1, r5
 801a7d8:	4620      	mov	r0, r4
 801a7da:	f7ff fb39 	bl	8019e50 <tcp_oos_insert_segment>
 801a7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  cseg = tcp_seg_copy(&inseg);
 801a7e2:	4849      	ldr	r0, [pc, #292]	; (801a908 <tcp_receive+0xa34>)
 801a7e4:	f7fe fba7 	bl	8018f36 <tcp_seg_copy>
                  if (cseg != NULL) {
 801a7e8:	2800      	cmp	r0, #0
 801a7ea:	f000 8089 	beq.w	801a900 <tcp_receive+0xa2c>
                    pcb->ooseq = cseg;
 801a7ee:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801a7f0:	4629      	mov	r1, r5
 801a7f2:	f7ff fb2d 	bl	8019e50 <tcp_oos_insert_segment>
 801a7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a7fa:	1a5b      	subs	r3, r3, r1
              if (next->next == NULL &&
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	dc01      	bgt.n	801a804 <tcp_receive+0x930>
 801a800:	4615      	mov	r5, r2
 801a802:	e7bd      	b.n	801a780 <tcp_receive+0x8ac>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a804:	8980      	ldrh	r0, [r0, #12]
 801a806:	f7fb fdb8 	bl	801637a <lwip_htons>
 801a80a:	f010 0f01 	tst.w	r0, #1
 801a80e:	d177      	bne.n	801a900 <tcp_receive+0xa2c>
                next->next = tcp_seg_copy(&inseg);
 801a810:	483d      	ldr	r0, [pc, #244]	; (801a908 <tcp_receive+0xa34>)
 801a812:	f7fe fb90 	bl	8018f36 <tcp_seg_copy>
 801a816:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801a818:	2800      	cmp	r0, #0
 801a81a:	d071      	beq.n	801a900 <tcp_receive+0xa2c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a81c:	68eb      	ldr	r3, [r5, #12]
 801a81e:	6859      	ldr	r1, [r3, #4]
 801a820:	892a      	ldrh	r2, [r5, #8]
 801a822:	440a      	add	r2, r1
 801a824:	4b37      	ldr	r3, [pc, #220]	; (801a904 <tcp_receive+0xa30>)
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	1ad2      	subs	r2, r2, r3
 801a82a:	2a00      	cmp	r2, #0
 801a82c:	dd05      	ble.n	801a83a <tcp_receive+0x966>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a82e:	1a5b      	subs	r3, r3, r1
 801a830:	b299      	uxth	r1, r3
 801a832:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801a834:	6868      	ldr	r0, [r5, #4]
 801a836:	f7fd ffd7 	bl	80187e8 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a83a:	4b34      	ldr	r3, [pc, #208]	; (801a90c <tcp_receive+0xa38>)
 801a83c:	881b      	ldrh	r3, [r3, #0]
 801a83e:	4a31      	ldr	r2, [pc, #196]	; (801a904 <tcp_receive+0xa30>)
 801a840:	6812      	ldr	r2, [r2, #0]
 801a842:	4413      	add	r3, r2
 801a844:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a846:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a848:	440a      	add	r2, r1
 801a84a:	1a9b      	subs	r3, r3, r2
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	dd57      	ble.n	801a900 <tcp_receive+0xa2c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a850:	682b      	ldr	r3, [r5, #0]
 801a852:	68db      	ldr	r3, [r3, #12]
 801a854:	8998      	ldrh	r0, [r3, #12]
 801a856:	f7fb fd90 	bl	801637a <lwip_htons>
 801a85a:	f010 0f01 	tst.w	r0, #1
 801a85e:	d12c      	bne.n	801a8ba <tcp_receive+0x9e6>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a860:	682a      	ldr	r2, [r5, #0]
 801a862:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a864:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a866:	440b      	add	r3, r1
 801a868:	b29b      	uxth	r3, r3
 801a86a:	4926      	ldr	r1, [pc, #152]	; (801a904 <tcp_receive+0xa30>)
 801a86c:	6809      	ldr	r1, [r1, #0]
 801a86e:	1a5b      	subs	r3, r3, r1
 801a870:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a872:	682b      	ldr	r3, [r5, #0]
 801a874:	8919      	ldrh	r1, [r3, #8]
 801a876:	6858      	ldr	r0, [r3, #4]
 801a878:	f7fd ffb6 	bl	80187e8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a87c:	682b      	ldr	r3, [r5, #0]
 801a87e:	891d      	ldrh	r5, [r3, #8]
 801a880:	68db      	ldr	r3, [r3, #12]
 801a882:	8998      	ldrh	r0, [r3, #12]
 801a884:	f7fb fd79 	bl	801637a <lwip_htons>
 801a888:	f010 0f03 	tst.w	r0, #3
 801a88c:	d024      	beq.n	801a8d8 <tcp_receive+0xa04>
 801a88e:	2301      	movs	r3, #1
 801a890:	442b      	add	r3, r5
 801a892:	b29b      	uxth	r3, r3
 801a894:	4a1d      	ldr	r2, [pc, #116]	; (801a90c <tcp_receive+0xa38>)
 801a896:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a898:	4a1a      	ldr	r2, [pc, #104]	; (801a904 <tcp_receive+0xa30>)
 801a89a:	6812      	ldr	r2, [r2, #0]
 801a89c:	4413      	add	r3, r2
 801a89e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a8a0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a8a2:	440a      	add	r2, r1
 801a8a4:	4293      	cmp	r3, r2
 801a8a6:	d02b      	beq.n	801a900 <tcp_receive+0xa2c>
 801a8a8:	4b19      	ldr	r3, [pc, #100]	; (801a910 <tcp_receive+0xa3c>)
 801a8aa:	f240 627b 	movw	r2, #1659	; 0x67b
 801a8ae:	4919      	ldr	r1, [pc, #100]	; (801a914 <tcp_receive+0xa40>)
 801a8b0:	4819      	ldr	r0, [pc, #100]	; (801a918 <tcp_receive+0xa44>)
 801a8b2:	f005 f91c 	bl	801faee <iprintf>
 801a8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a8ba:	682b      	ldr	r3, [r5, #0]
 801a8bc:	68df      	ldr	r7, [r3, #12]
 801a8be:	89b8      	ldrh	r0, [r7, #12]
 801a8c0:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 801a8c4:	b2b6      	uxth	r6, r6
 801a8c6:	f7fb fd58 	bl	801637a <lwip_htons>
 801a8ca:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801a8ce:	f7fb fd54 	bl	801637a <lwip_htons>
 801a8d2:	4330      	orrs	r0, r6
 801a8d4:	81b8      	strh	r0, [r7, #12]
 801a8d6:	e7c3      	b.n	801a860 <tcp_receive+0x98c>
                    tcplen = TCP_TCPLEN(next->next);
 801a8d8:	2300      	movs	r3, #0
 801a8da:	e7d9      	b.n	801a890 <tcp_receive+0x9bc>
 801a8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a8e0:	4b08      	ldr	r3, [pc, #32]	; (801a904 <tcp_receive+0xa30>)
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a8e6:	1a99      	subs	r1, r3, r2
 801a8e8:	2900      	cmp	r1, #0
 801a8ea:	db05      	blt.n	801a8f8 <tcp_receive+0xa24>
 801a8ec:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a8ee:	440a      	add	r2, r1
 801a8f0:	1a9b      	subs	r3, r3, r2
 801a8f2:	3301      	adds	r3, #1
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	dd03      	ble.n	801a900 <tcp_receive+0xa2c>
      tcp_ack_now(pcb);
 801a8f8:	7ea3      	ldrb	r3, [r4, #26]
 801a8fa:	f043 0302 	orr.w	r3, r3, #2
 801a8fe:	76a3      	strb	r3, [r4, #26]
 801a900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a904:	200102d4 	.word	0x200102d4
 801a908:	200102b8 	.word	0x200102b8
 801a90c:	200102ea 	.word	0x200102ea
 801a910:	08026760 	.word	0x08026760
 801a914:	0802683c 	.word	0x0802683c
 801a918:	080214f0 	.word	0x080214f0

0801a91c <tcp_process>:
{
 801a91c:	b570      	push	{r4, r5, r6, lr}
 801a91e:	b082      	sub	sp, #8
 801a920:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 801a922:	4ba3      	ldr	r3, [pc, #652]	; (801abb0 <tcp_process+0x294>)
 801a924:	781b      	ldrb	r3, [r3, #0]
 801a926:	f013 0f04 	tst.w	r3, #4
 801a92a:	d03d      	beq.n	801a9a8 <tcp_process+0x8c>
    if (pcb->state == SYN_SENT) {
 801a92c:	7d01      	ldrb	r1, [r0, #20]
 801a92e:	2902      	cmp	r1, #2
 801a930:	d012      	beq.n	801a958 <tcp_process+0x3c>
      if (seqno == pcb->rcv_nxt) {
 801a932:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801a934:	4b9f      	ldr	r3, [pc, #636]	; (801abb4 <tcp_process+0x298>)
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	429a      	cmp	r2, r3
 801a93a:	d01c      	beq.n	801a976 <tcp_process+0x5a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a93c:	1a98      	subs	r0, r3, r2
 801a93e:	2800      	cmp	r0, #0
 801a940:	db1b      	blt.n	801a97a <tcp_process+0x5e>
 801a942:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801a944:	4402      	add	r2, r0
 801a946:	1a9b      	subs	r3, r3, r2
 801a948:	2b00      	cmp	r3, #0
 801a94a:	dd0c      	ble.n	801a966 <tcp_process+0x4a>
  u8_t acceptable = 0;
 801a94c:	2300      	movs	r3, #0
    if (acceptable) {
 801a94e:	b9b3      	cbnz	r3, 801a97e <tcp_process+0x62>
      return ERR_OK;
 801a950:	2500      	movs	r5, #0
}
 801a952:	4628      	mov	r0, r5
 801a954:	b002      	add	sp, #8
 801a956:	bd70      	pop	{r4, r5, r6, pc}
      if (ackno == pcb->snd_nxt) {
 801a958:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801a95a:	4b97      	ldr	r3, [pc, #604]	; (801abb8 <tcp_process+0x29c>)
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	429a      	cmp	r2, r3
 801a960:	d007      	beq.n	801a972 <tcp_process+0x56>
  u8_t acceptable = 0;
 801a962:	2300      	movs	r3, #0
 801a964:	e7f3      	b.n	801a94e <tcp_process+0x32>
        tcp_ack_now(pcb);
 801a966:	7ea3      	ldrb	r3, [r4, #26]
 801a968:	f043 0302 	orr.w	r3, r3, #2
 801a96c:	76a3      	strb	r3, [r4, #26]
  u8_t acceptable = 0;
 801a96e:	2300      	movs	r3, #0
 801a970:	e7ed      	b.n	801a94e <tcp_process+0x32>
        acceptable = 1;
 801a972:	2301      	movs	r3, #1
 801a974:	e7eb      	b.n	801a94e <tcp_process+0x32>
        acceptable = 1;
 801a976:	2301      	movs	r3, #1
 801a978:	e7e9      	b.n	801a94e <tcp_process+0x32>
  u8_t acceptable = 0;
 801a97a:	2300      	movs	r3, #0
 801a97c:	e7e7      	b.n	801a94e <tcp_process+0x32>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801a97e:	b159      	cbz	r1, 801a998 <tcp_process+0x7c>
      recv_flags |= TF_RESET;
 801a980:	4a8e      	ldr	r2, [pc, #568]	; (801abbc <tcp_process+0x2a0>)
 801a982:	7813      	ldrb	r3, [r2, #0]
 801a984:	f043 0308 	orr.w	r3, r3, #8
 801a988:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801a98a:	7ea3      	ldrb	r3, [r4, #26]
 801a98c:	f023 0301 	bic.w	r3, r3, #1
 801a990:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 801a992:	f06f 050d 	mvn.w	r5, #13
 801a996:	e7dc      	b.n	801a952 <tcp_process+0x36>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801a998:	4b89      	ldr	r3, [pc, #548]	; (801abc0 <tcp_process+0x2a4>)
 801a99a:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a99e:	4989      	ldr	r1, [pc, #548]	; (801abc4 <tcp_process+0x2a8>)
 801a9a0:	4889      	ldr	r0, [pc, #548]	; (801abc8 <tcp_process+0x2ac>)
 801a9a2:	f005 f8a4 	bl	801faee <iprintf>
 801a9a6:	e7eb      	b.n	801a980 <tcp_process+0x64>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801a9a8:	f013 0f02 	tst.w	r3, #2
 801a9ac:	d00a      	beq.n	801a9c4 <tcp_process+0xa8>
 801a9ae:	7d03      	ldrb	r3, [r0, #20]
 801a9b0:	3b02      	subs	r3, #2
 801a9b2:	b2db      	uxtb	r3, r3
 801a9b4:	2b01      	cmp	r3, #1
 801a9b6:	d905      	bls.n	801a9c4 <tcp_process+0xa8>
    tcp_ack_now(pcb);
 801a9b8:	7e83      	ldrb	r3, [r0, #26]
 801a9ba:	f043 0302 	orr.w	r3, r3, #2
 801a9be:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 801a9c0:	2500      	movs	r5, #0
 801a9c2:	e7c6      	b.n	801a952 <tcp_process+0x36>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801a9c4:	7ea3      	ldrb	r3, [r4, #26]
 801a9c6:	f013 0f10 	tst.w	r3, #16
 801a9ca:	d102      	bne.n	801a9d2 <tcp_process+0xb6>
    pcb->tmr = tcp_ticks;
 801a9cc:	4b7f      	ldr	r3, [pc, #508]	; (801abcc <tcp_process+0x2b0>)
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 801a9d8:	4620      	mov	r0, r4
 801a9da:	f7ff f8ff 	bl	8019bdc <tcp_parseopt>
  switch (pcb->state) {
 801a9de:	7d23      	ldrb	r3, [r4, #20]
 801a9e0:	3b02      	subs	r3, #2
 801a9e2:	2b07      	cmp	r3, #7
 801a9e4:	f200 8219 	bhi.w	801ae1a <tcp_process+0x4fe>
 801a9e8:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a9ec:	009b0008 	.word	0x009b0008
 801a9f0:	01460135 	.word	0x01460135
 801a9f4:	0135019c 	.word	0x0135019c
 801a9f8:	01fd01ca 	.word	0x01fd01ca
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801a9fc:	4b6c      	ldr	r3, [pc, #432]	; (801abb0 <tcp_process+0x294>)
 801a9fe:	781b      	ldrb	r3, [r3, #0]
 801aa00:	f003 0212 	and.w	r2, r3, #18
 801aa04:	2a12      	cmp	r2, #18
 801aa06:	d004      	beq.n	801aa12 <tcp_process+0xf6>
    else if (flags & TCP_ACK) {
 801aa08:	f013 0f10 	tst.w	r3, #16
 801aa0c:	d16b      	bne.n	801aae6 <tcp_process+0x1ca>
  return ERR_OK;
 801aa0e:	2500      	movs	r5, #0
 801aa10:	e79f      	b.n	801a952 <tcp_process+0x36>
        && (ackno == pcb->lastack + 1)) {
 801aa12:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801aa14:	3201      	adds	r2, #1
 801aa16:	4968      	ldr	r1, [pc, #416]	; (801abb8 <tcp_process+0x29c>)
 801aa18:	6809      	ldr	r1, [r1, #0]
 801aa1a:	428a      	cmp	r2, r1
 801aa1c:	d1f4      	bne.n	801aa08 <tcp_process+0xec>
      pcb->rcv_nxt = seqno + 1;
 801aa1e:	4b65      	ldr	r3, [pc, #404]	; (801abb4 <tcp_process+0x298>)
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	1c5a      	adds	r2, r3, #1
 801aa24:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801aa26:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 801aa28:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801aa2a:	4a69      	ldr	r2, [pc, #420]	; (801abd0 <tcp_process+0x2b4>)
 801aa2c:	6812      	ldr	r2, [r2, #0]
 801aa2e:	89d2      	ldrh	r2, [r2, #14]
 801aa30:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801aa34:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801aa38:	3b01      	subs	r3, #1
 801aa3a:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 801aa3c:	2304      	movs	r3, #4
 801aa3e:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801aa40:	18e1      	adds	r1, r4, r3
 801aa42:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801aa44:	f7ff f868 	bl	8019b18 <tcp_eff_send_mss_impl>
 801aa48:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801aa4a:	0043      	lsls	r3, r0, #1
 801aa4c:	f241 121c 	movw	r2, #4380	; 0x111c
 801aa50:	4293      	cmp	r3, r2
 801aa52:	bf38      	it	cc
 801aa54:	4613      	movcc	r3, r2
 801aa56:	0080      	lsls	r0, r0, #2
 801aa58:	4283      	cmp	r3, r0
 801aa5a:	bf28      	it	cs
 801aa5c:	4603      	movcs	r3, r0
 801aa5e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801aa62:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801aa66:	b31b      	cbz	r3, 801aab0 <tcp_process+0x194>
      --pcb->snd_queuelen;
 801aa68:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801aa6c:	3b01      	subs	r3, #1
 801aa6e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 801aa72:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 801aa74:	b325      	cbz	r5, 801aac0 <tcp_process+0x1a4>
        pcb->unacked = rseg->next;
 801aa76:	682b      	ldr	r3, [r5, #0]
 801aa78:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 801aa7a:	4628      	mov	r0, r5
 801aa7c:	f7fe fa44 	bl	8018f08 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 801aa80:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801aa82:	b353      	cbz	r3, 801aada <tcp_process+0x1be>
        pcb->rtime = 0;
 801aa84:	2300      	movs	r3, #0
 801aa86:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 801aa88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801aa8c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801aa90:	b33b      	cbz	r3, 801aae2 <tcp_process+0x1c6>
 801aa92:	2200      	movs	r2, #0
 801aa94:	4621      	mov	r1, r4
 801aa96:	6920      	ldr	r0, [r4, #16]
 801aa98:	4798      	blx	r3
 801aa9a:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 801aa9c:	f115 0f0d 	cmn.w	r5, #13
 801aaa0:	f43f af57 	beq.w	801a952 <tcp_process+0x36>
      tcp_ack_now(pcb);
 801aaa4:	7ea3      	ldrb	r3, [r4, #26]
 801aaa6:	f043 0302 	orr.w	r3, r3, #2
 801aaaa:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 801aaac:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 801aaae:	e750      	b.n	801a952 <tcp_process+0x36>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801aab0:	4b43      	ldr	r3, [pc, #268]	; (801abc0 <tcp_process+0x2a4>)
 801aab2:	f240 321a 	movw	r2, #794	; 0x31a
 801aab6:	4947      	ldr	r1, [pc, #284]	; (801abd4 <tcp_process+0x2b8>)
 801aab8:	4843      	ldr	r0, [pc, #268]	; (801abc8 <tcp_process+0x2ac>)
 801aaba:	f005 f818 	bl	801faee <iprintf>
 801aabe:	e7d3      	b.n	801aa68 <tcp_process+0x14c>
        rseg = pcb->unsent;
 801aac0:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801aac2:	b115      	cbz	r5, 801aaca <tcp_process+0x1ae>
        pcb->unsent = rseg->next;
 801aac4:	682b      	ldr	r3, [r5, #0]
 801aac6:	66a3      	str	r3, [r4, #104]	; 0x68
 801aac8:	e7d7      	b.n	801aa7a <tcp_process+0x15e>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801aaca:	4b3d      	ldr	r3, [pc, #244]	; (801abc0 <tcp_process+0x2a4>)
 801aacc:	f240 3222 	movw	r2, #802	; 0x322
 801aad0:	4941      	ldr	r1, [pc, #260]	; (801abd8 <tcp_process+0x2bc>)
 801aad2:	483d      	ldr	r0, [pc, #244]	; (801abc8 <tcp_process+0x2ac>)
 801aad4:	f005 f80b 	bl	801faee <iprintf>
 801aad8:	e7f4      	b.n	801aac4 <tcp_process+0x1a8>
        pcb->rtime = -1;
 801aada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aade:	8623      	strh	r3, [r4, #48]	; 0x30
 801aae0:	e7d4      	b.n	801aa8c <tcp_process+0x170>
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801aae2:	2500      	movs	r5, #0
 801aae4:	e7da      	b.n	801aa9c <tcp_process+0x180>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aae6:	4b3a      	ldr	r3, [pc, #232]	; (801abd0 <tcp_process+0x2b4>)
 801aae8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801aaea:	4a3c      	ldr	r2, [pc, #240]	; (801abdc <tcp_process+0x2c0>)
 801aaec:	493c      	ldr	r1, [pc, #240]	; (801abe0 <tcp_process+0x2c4>)
 801aaee:	880d      	ldrh	r5, [r1, #0]
 801aaf0:	4930      	ldr	r1, [pc, #192]	; (801abb4 <tcp_process+0x298>)
 801aaf2:	6809      	ldr	r1, [r1, #0]
 801aaf4:	4830      	ldr	r0, [pc, #192]	; (801abb8 <tcp_process+0x29c>)
 801aaf6:	6800      	ldr	r0, [r0, #0]
 801aaf8:	881e      	ldrh	r6, [r3, #0]
 801aafa:	9601      	str	r6, [sp, #4]
 801aafc:	885b      	ldrh	r3, [r3, #2]
 801aafe:	9300      	str	r3, [sp, #0]
 801ab00:	4613      	mov	r3, r2
 801ab02:	3204      	adds	r2, #4
 801ab04:	4429      	add	r1, r5
 801ab06:	f001 faeb 	bl	801c0e0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 801ab0a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801ab0e:	2b05      	cmp	r3, #5
 801ab10:	d901      	bls.n	801ab16 <tcp_process+0x1fa>
  return ERR_OK;
 801ab12:	2500      	movs	r5, #0
 801ab14:	e71d      	b.n	801a952 <tcp_process+0x36>
        pcb->rtime = 0;
 801ab16:	2500      	movs	r5, #0
 801ab18:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 801ab1a:	4620      	mov	r0, r4
 801ab1c:	f001 fb34 	bl	801c188 <tcp_rexmit_rto>
 801ab20:	e717      	b.n	801a952 <tcp_process+0x36>
    if (flags & TCP_ACK) {
 801ab22:	4b23      	ldr	r3, [pc, #140]	; (801abb0 <tcp_process+0x294>)
 801ab24:	781b      	ldrb	r3, [r3, #0]
 801ab26:	f013 0f10 	tst.w	r3, #16
 801ab2a:	f000 8083 	beq.w	801ac34 <tcp_process+0x318>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801ab2e:	4b22      	ldr	r3, [pc, #136]	; (801abb8 <tcp_process+0x29c>)
 801ab30:	6818      	ldr	r0, [r3, #0]
 801ab32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801ab34:	1ac3      	subs	r3, r0, r3
 801ab36:	2b01      	cmp	r3, #1
 801ab38:	d403      	bmi.n	801ab42 <tcp_process+0x226>
 801ab3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801ab3c:	1ac3      	subs	r3, r0, r3
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	dd11      	ble.n	801ab66 <tcp_process+0x24a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ab42:	4b23      	ldr	r3, [pc, #140]	; (801abd0 <tcp_process+0x2b4>)
 801ab44:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801ab46:	4a25      	ldr	r2, [pc, #148]	; (801abdc <tcp_process+0x2c0>)
 801ab48:	4925      	ldr	r1, [pc, #148]	; (801abe0 <tcp_process+0x2c4>)
 801ab4a:	880c      	ldrh	r4, [r1, #0]
 801ab4c:	4919      	ldr	r1, [pc, #100]	; (801abb4 <tcp_process+0x298>)
 801ab4e:	6809      	ldr	r1, [r1, #0]
 801ab50:	881d      	ldrh	r5, [r3, #0]
 801ab52:	9501      	str	r5, [sp, #4]
 801ab54:	885b      	ldrh	r3, [r3, #2]
 801ab56:	9300      	str	r3, [sp, #0]
 801ab58:	4613      	mov	r3, r2
 801ab5a:	3204      	adds	r2, #4
 801ab5c:	4421      	add	r1, r4
 801ab5e:	f001 fabf 	bl	801c0e0 <tcp_rst>
  return ERR_OK;
 801ab62:	2500      	movs	r5, #0
 801ab64:	e6f5      	b.n	801a952 <tcp_process+0x36>
        pcb->state = ESTABLISHED;
 801ab66:	2304      	movs	r3, #4
 801ab68:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801ab6a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801ab6c:	b10b      	cbz	r3, 801ab72 <tcp_process+0x256>
 801ab6e:	699b      	ldr	r3, [r3, #24]
 801ab70:	b19b      	cbz	r3, 801ab9a <tcp_process+0x27e>
        if (pcb->listener == NULL) {
 801ab72:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801ab74:	b1cb      	cbz	r3, 801abaa <tcp_process+0x28e>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801ab76:	699b      	ldr	r3, [r3, #24]
 801ab78:	b3b3      	cbz	r3, 801abe8 <tcp_process+0x2cc>
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	4621      	mov	r1, r4
 801ab7e:	6920      	ldr	r0, [r4, #16]
 801ab80:	4798      	blx	r3
 801ab82:	4605      	mov	r5, r0
        if (err != ERR_OK) {
 801ab84:	b39d      	cbz	r5, 801abee <tcp_process+0x2d2>
          if (err != ERR_ABRT) {
 801ab86:	f115 0f0d 	cmn.w	r5, #13
 801ab8a:	f43f aee2 	beq.w	801a952 <tcp_process+0x36>
            tcp_abort(pcb);
 801ab8e:	4620      	mov	r0, r4
 801ab90:	f7fe fec8 	bl	8019924 <tcp_abort>
          return ERR_ABRT;
 801ab94:	f06f 050c 	mvn.w	r5, #12
 801ab98:	e6db      	b.n	801a952 <tcp_process+0x36>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801ab9a:	4b09      	ldr	r3, [pc, #36]	; (801abc0 <tcp_process+0x2a4>)
 801ab9c:	f240 3251 	movw	r2, #849	; 0x351
 801aba0:	4910      	ldr	r1, [pc, #64]	; (801abe4 <tcp_process+0x2c8>)
 801aba2:	4809      	ldr	r0, [pc, #36]	; (801abc8 <tcp_process+0x2ac>)
 801aba4:	f004 ffa3 	bl	801faee <iprintf>
 801aba8:	e7e3      	b.n	801ab72 <tcp_process+0x256>
          err = ERR_VAL;
 801abaa:	f06f 0505 	mvn.w	r5, #5
 801abae:	e7e9      	b.n	801ab84 <tcp_process+0x268>
 801abb0:	200102b4 	.word	0x200102b4
 801abb4:	200102d4 	.word	0x200102d4
 801abb8:	200102b0 	.word	0x200102b0
 801abbc:	200102d0 	.word	0x200102d0
 801abc0:	08026760 	.word	0x08026760
 801abc4:	080266f4 	.word	0x080266f4
 801abc8:	080214f0 	.word	0x080214f0
 801abcc:	20015cc8 	.word	0x20015cc8
 801abd0:	200102dc 	.word	0x200102dc
 801abd4:	08026714 	.word	0x08026714
 801abd8:	0802672c 	.word	0x0802672c
 801abdc:	20011050 	.word	0x20011050
 801abe0:	200102ea 	.word	0x200102ea
 801abe4:	08026740 	.word	0x08026740
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801abe8:	f06f 050f 	mvn.w	r5, #15
 801abec:	e7ca      	b.n	801ab84 <tcp_process+0x268>
        tcp_receive(pcb);
 801abee:	4620      	mov	r0, r4
 801abf0:	f7ff f970 	bl	8019ed4 <tcp_receive>
        if (recv_acked != 0) {
 801abf4:	4b8f      	ldr	r3, [pc, #572]	; (801ae34 <tcp_process+0x518>)
 801abf6:	881b      	ldrh	r3, [r3, #0]
 801abf8:	b113      	cbz	r3, 801ac00 <tcp_process+0x2e4>
          recv_acked--;
 801abfa:	3b01      	subs	r3, #1
 801abfc:	4a8d      	ldr	r2, [pc, #564]	; (801ae34 <tcp_process+0x518>)
 801abfe:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801ac00:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801ac02:	0053      	lsls	r3, r2, #1
 801ac04:	f241 111c 	movw	r1, #4380	; 0x111c
 801ac08:	428b      	cmp	r3, r1
 801ac0a:	bf38      	it	cc
 801ac0c:	460b      	movcc	r3, r1
 801ac0e:	0092      	lsls	r2, r2, #2
 801ac10:	4293      	cmp	r3, r2
 801ac12:	bf28      	it	cs
 801ac14:	4613      	movcs	r3, r2
 801ac16:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 801ac1a:	4b87      	ldr	r3, [pc, #540]	; (801ae38 <tcp_process+0x51c>)
 801ac1c:	781b      	ldrb	r3, [r3, #0]
 801ac1e:	f013 0f20 	tst.w	r3, #32
 801ac22:	f43f ae96 	beq.w	801a952 <tcp_process+0x36>
          tcp_ack_now(pcb);
 801ac26:	7ea3      	ldrb	r3, [r4, #26]
 801ac28:	f043 0302 	orr.w	r3, r3, #2
 801ac2c:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 801ac2e:	2307      	movs	r3, #7
 801ac30:	7523      	strb	r3, [r4, #20]
 801ac32:	e68e      	b.n	801a952 <tcp_process+0x36>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801ac34:	f013 0f02 	tst.w	r3, #2
 801ac38:	f000 80f1 	beq.w	801ae1e <tcp_process+0x502>
 801ac3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ac3e:	3b01      	subs	r3, #1
 801ac40:	4a7e      	ldr	r2, [pc, #504]	; (801ae3c <tcp_process+0x520>)
 801ac42:	6812      	ldr	r2, [r2, #0]
 801ac44:	4293      	cmp	r3, r2
 801ac46:	d001      	beq.n	801ac4c <tcp_process+0x330>
  return ERR_OK;
 801ac48:	2500      	movs	r5, #0
 801ac4a:	e682      	b.n	801a952 <tcp_process+0x36>
      tcp_rexmit(pcb);
 801ac4c:	4620      	mov	r0, r4
 801ac4e:	f001 fab6 	bl	801c1be <tcp_rexmit>
  return ERR_OK;
 801ac52:	2500      	movs	r5, #0
 801ac54:	e67d      	b.n	801a952 <tcp_process+0x36>
    tcp_receive(pcb);
 801ac56:	4620      	mov	r0, r4
 801ac58:	f7ff f93c 	bl	8019ed4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801ac5c:	4b76      	ldr	r3, [pc, #472]	; (801ae38 <tcp_process+0x51c>)
 801ac5e:	781b      	ldrb	r3, [r3, #0]
 801ac60:	f013 0f20 	tst.w	r3, #32
 801ac64:	f000 80dd 	beq.w	801ae22 <tcp_process+0x506>
      tcp_ack_now(pcb);
 801ac68:	7ea3      	ldrb	r3, [r4, #26]
 801ac6a:	f043 0302 	orr.w	r3, r3, #2
 801ac6e:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 801ac70:	2307      	movs	r3, #7
 801ac72:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801ac74:	2500      	movs	r5, #0
 801ac76:	e66c      	b.n	801a952 <tcp_process+0x36>
    tcp_receive(pcb);
 801ac78:	4620      	mov	r0, r4
 801ac7a:	f7ff f92b 	bl	8019ed4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801ac7e:	4b6e      	ldr	r3, [pc, #440]	; (801ae38 <tcp_process+0x51c>)
 801ac80:	781b      	ldrb	r3, [r3, #0]
 801ac82:	f013 0f20 	tst.w	r3, #32
 801ac86:	d038      	beq.n	801acfa <tcp_process+0x3de>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ac88:	4b6d      	ldr	r3, [pc, #436]	; (801ae40 <tcp_process+0x524>)
 801ac8a:	781b      	ldrb	r3, [r3, #0]
 801ac8c:	f013 0f10 	tst.w	r3, #16
 801ac90:	d004      	beq.n	801ac9c <tcp_process+0x380>
 801ac92:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801ac94:	4b6b      	ldr	r3, [pc, #428]	; (801ae44 <tcp_process+0x528>)
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	429a      	cmp	r2, r3
 801ac9a:	d007      	beq.n	801acac <tcp_process+0x390>
        tcp_ack_now(pcb);
 801ac9c:	7ea3      	ldrb	r3, [r4, #26]
 801ac9e:	f043 0302 	orr.w	r3, r3, #2
 801aca2:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 801aca4:	2308      	movs	r3, #8
 801aca6:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801aca8:	2500      	movs	r5, #0
 801acaa:	e652      	b.n	801a952 <tcp_process+0x36>
          pcb->unsent == NULL) {
 801acac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d1f4      	bne.n	801ac9c <tcp_process+0x380>
        tcp_ack_now(pcb);
 801acb2:	7ea3      	ldrb	r3, [r4, #26]
 801acb4:	f043 0302 	orr.w	r3, r3, #2
 801acb8:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 801acba:	4620      	mov	r0, r4
 801acbc:	f7fe f9c0 	bl	8019040 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801acc0:	4b61      	ldr	r3, [pc, #388]	; (801ae48 <tcp_process+0x52c>)
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	429c      	cmp	r4, r3
 801acc6:	d005      	beq.n	801acd4 <tcp_process+0x3b8>
 801acc8:	b153      	cbz	r3, 801ace0 <tcp_process+0x3c4>
 801acca:	68da      	ldr	r2, [r3, #12]
 801accc:	4294      	cmp	r4, r2
 801acce:	d005      	beq.n	801acdc <tcp_process+0x3c0>
 801acd0:	4613      	mov	r3, r2
 801acd2:	e7f9      	b.n	801acc8 <tcp_process+0x3ac>
 801acd4:	68da      	ldr	r2, [r3, #12]
 801acd6:	4b5c      	ldr	r3, [pc, #368]	; (801ae48 <tcp_process+0x52c>)
 801acd8:	601a      	str	r2, [r3, #0]
 801acda:	e001      	b.n	801ace0 <tcp_process+0x3c4>
 801acdc:	68e2      	ldr	r2, [r4, #12]
 801acde:	60da      	str	r2, [r3, #12]
 801ace0:	2201      	movs	r2, #1
 801ace2:	4b5a      	ldr	r3, [pc, #360]	; (801ae4c <tcp_process+0x530>)
 801ace4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801ace6:	230a      	movs	r3, #10
 801ace8:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801acea:	4b59      	ldr	r3, [pc, #356]	; (801ae50 <tcp_process+0x534>)
 801acec:	681a      	ldr	r2, [r3, #0]
 801acee:	60e2      	str	r2, [r4, #12]
 801acf0:	601c      	str	r4, [r3, #0]
 801acf2:	f001 fc01 	bl	801c4f8 <tcp_timer_needed>
  return ERR_OK;
 801acf6:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 801acf8:	e62b      	b.n	801a952 <tcp_process+0x36>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801acfa:	4b51      	ldr	r3, [pc, #324]	; (801ae40 <tcp_process+0x524>)
 801acfc:	781b      	ldrb	r3, [r3, #0]
 801acfe:	f013 0f10 	tst.w	r3, #16
 801ad02:	f000 8090 	beq.w	801ae26 <tcp_process+0x50a>
 801ad06:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801ad08:	4b4e      	ldr	r3, [pc, #312]	; (801ae44 <tcp_process+0x528>)
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	429a      	cmp	r2, r3
 801ad0e:	d001      	beq.n	801ad14 <tcp_process+0x3f8>
  return ERR_OK;
 801ad10:	2500      	movs	r5, #0
 801ad12:	e61e      	b.n	801a952 <tcp_process+0x36>
               pcb->unsent == NULL) {
 801ad14:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ad16:	b10b      	cbz	r3, 801ad1c <tcp_process+0x400>
  return ERR_OK;
 801ad18:	2500      	movs	r5, #0
 801ad1a:	e61a      	b.n	801a952 <tcp_process+0x36>
      pcb->state = FIN_WAIT_2;
 801ad1c:	2306      	movs	r3, #6
 801ad1e:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801ad20:	2500      	movs	r5, #0
 801ad22:	e616      	b.n	801a952 <tcp_process+0x36>
    tcp_receive(pcb);
 801ad24:	4620      	mov	r0, r4
 801ad26:	f7ff f8d5 	bl	8019ed4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801ad2a:	4b43      	ldr	r3, [pc, #268]	; (801ae38 <tcp_process+0x51c>)
 801ad2c:	781b      	ldrb	r3, [r3, #0]
 801ad2e:	f013 0f20 	tst.w	r3, #32
 801ad32:	d101      	bne.n	801ad38 <tcp_process+0x41c>
  return ERR_OK;
 801ad34:	2500      	movs	r5, #0
 801ad36:	e60c      	b.n	801a952 <tcp_process+0x36>
      tcp_ack_now(pcb);
 801ad38:	7ea3      	ldrb	r3, [r4, #26]
 801ad3a:	f043 0302 	orr.w	r3, r3, #2
 801ad3e:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 801ad40:	4620      	mov	r0, r4
 801ad42:	f7fe f97d 	bl	8019040 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801ad46:	4b40      	ldr	r3, [pc, #256]	; (801ae48 <tcp_process+0x52c>)
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	429c      	cmp	r4, r3
 801ad4c:	d005      	beq.n	801ad5a <tcp_process+0x43e>
 801ad4e:	b153      	cbz	r3, 801ad66 <tcp_process+0x44a>
 801ad50:	68da      	ldr	r2, [r3, #12]
 801ad52:	4294      	cmp	r4, r2
 801ad54:	d005      	beq.n	801ad62 <tcp_process+0x446>
 801ad56:	4613      	mov	r3, r2
 801ad58:	e7f9      	b.n	801ad4e <tcp_process+0x432>
 801ad5a:	68da      	ldr	r2, [r3, #12]
 801ad5c:	4b3a      	ldr	r3, [pc, #232]	; (801ae48 <tcp_process+0x52c>)
 801ad5e:	601a      	str	r2, [r3, #0]
 801ad60:	e001      	b.n	801ad66 <tcp_process+0x44a>
 801ad62:	68e2      	ldr	r2, [r4, #12]
 801ad64:	60da      	str	r2, [r3, #12]
 801ad66:	2201      	movs	r2, #1
 801ad68:	4b38      	ldr	r3, [pc, #224]	; (801ae4c <tcp_process+0x530>)
 801ad6a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801ad6c:	230a      	movs	r3, #10
 801ad6e:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801ad70:	4b37      	ldr	r3, [pc, #220]	; (801ae50 <tcp_process+0x534>)
 801ad72:	681a      	ldr	r2, [r3, #0]
 801ad74:	60e2      	str	r2, [r4, #12]
 801ad76:	601c      	str	r4, [r3, #0]
 801ad78:	f001 fbbe 	bl	801c4f8 <tcp_timer_needed>
  return ERR_OK;
 801ad7c:	2500      	movs	r5, #0
 801ad7e:	e5e8      	b.n	801a952 <tcp_process+0x36>
    tcp_receive(pcb);
 801ad80:	4620      	mov	r0, r4
 801ad82:	f7ff f8a7 	bl	8019ed4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ad86:	4b2e      	ldr	r3, [pc, #184]	; (801ae40 <tcp_process+0x524>)
 801ad88:	781b      	ldrb	r3, [r3, #0]
 801ad8a:	f013 0f10 	tst.w	r3, #16
 801ad8e:	d04c      	beq.n	801ae2a <tcp_process+0x50e>
 801ad90:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801ad92:	4b2c      	ldr	r3, [pc, #176]	; (801ae44 <tcp_process+0x528>)
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	429a      	cmp	r2, r3
 801ad98:	d001      	beq.n	801ad9e <tcp_process+0x482>
  return ERR_OK;
 801ad9a:	2500      	movs	r5, #0
 801ad9c:	e5d9      	b.n	801a952 <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ad9e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801ada0:	b10b      	cbz	r3, 801ada6 <tcp_process+0x48a>
  return ERR_OK;
 801ada2:	2500      	movs	r5, #0
 801ada4:	e5d5      	b.n	801a952 <tcp_process+0x36>
      tcp_pcb_purge(pcb);
 801ada6:	4620      	mov	r0, r4
 801ada8:	f7fe f94a 	bl	8019040 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801adac:	4b26      	ldr	r3, [pc, #152]	; (801ae48 <tcp_process+0x52c>)
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	429c      	cmp	r4, r3
 801adb2:	d005      	beq.n	801adc0 <tcp_process+0x4a4>
 801adb4:	b153      	cbz	r3, 801adcc <tcp_process+0x4b0>
 801adb6:	68da      	ldr	r2, [r3, #12]
 801adb8:	4294      	cmp	r4, r2
 801adba:	d005      	beq.n	801adc8 <tcp_process+0x4ac>
 801adbc:	4613      	mov	r3, r2
 801adbe:	e7f9      	b.n	801adb4 <tcp_process+0x498>
 801adc0:	68da      	ldr	r2, [r3, #12]
 801adc2:	4b21      	ldr	r3, [pc, #132]	; (801ae48 <tcp_process+0x52c>)
 801adc4:	601a      	str	r2, [r3, #0]
 801adc6:	e001      	b.n	801adcc <tcp_process+0x4b0>
 801adc8:	68e2      	ldr	r2, [r4, #12]
 801adca:	60da      	str	r2, [r3, #12]
 801adcc:	2201      	movs	r2, #1
 801adce:	4b1f      	ldr	r3, [pc, #124]	; (801ae4c <tcp_process+0x530>)
 801add0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801add2:	230a      	movs	r3, #10
 801add4:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801add6:	4b1e      	ldr	r3, [pc, #120]	; (801ae50 <tcp_process+0x534>)
 801add8:	681a      	ldr	r2, [r3, #0]
 801adda:	60e2      	str	r2, [r4, #12]
 801addc:	601c      	str	r4, [r3, #0]
 801adde:	f001 fb8b 	bl	801c4f8 <tcp_timer_needed>
  return ERR_OK;
 801ade2:	2500      	movs	r5, #0
 801ade4:	e5b5      	b.n	801a952 <tcp_process+0x36>
    tcp_receive(pcb);
 801ade6:	4620      	mov	r0, r4
 801ade8:	f7ff f874 	bl	8019ed4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801adec:	4b14      	ldr	r3, [pc, #80]	; (801ae40 <tcp_process+0x524>)
 801adee:	781b      	ldrb	r3, [r3, #0]
 801adf0:	f013 0f10 	tst.w	r3, #16
 801adf4:	d01b      	beq.n	801ae2e <tcp_process+0x512>
 801adf6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801adf8:	4b12      	ldr	r3, [pc, #72]	; (801ae44 <tcp_process+0x528>)
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	429a      	cmp	r2, r3
 801adfe:	d001      	beq.n	801ae04 <tcp_process+0x4e8>
  return ERR_OK;
 801ae00:	2500      	movs	r5, #0
 801ae02:	e5a6      	b.n	801a952 <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ae04:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801ae06:	b10b      	cbz	r3, 801ae0c <tcp_process+0x4f0>
  return ERR_OK;
 801ae08:	2500      	movs	r5, #0
 801ae0a:	e5a2      	b.n	801a952 <tcp_process+0x36>
      recv_flags |= TF_CLOSED;
 801ae0c:	4a0a      	ldr	r2, [pc, #40]	; (801ae38 <tcp_process+0x51c>)
 801ae0e:	7813      	ldrb	r3, [r2, #0]
 801ae10:	f043 0310 	orr.w	r3, r3, #16
 801ae14:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 801ae16:	2500      	movs	r5, #0
 801ae18:	e59b      	b.n	801a952 <tcp_process+0x36>
 801ae1a:	2500      	movs	r5, #0
 801ae1c:	e599      	b.n	801a952 <tcp_process+0x36>
 801ae1e:	2500      	movs	r5, #0
 801ae20:	e597      	b.n	801a952 <tcp_process+0x36>
 801ae22:	2500      	movs	r5, #0
 801ae24:	e595      	b.n	801a952 <tcp_process+0x36>
 801ae26:	2500      	movs	r5, #0
 801ae28:	e593      	b.n	801a952 <tcp_process+0x36>
 801ae2a:	2500      	movs	r5, #0
 801ae2c:	e591      	b.n	801a952 <tcp_process+0x36>
 801ae2e:	2500      	movs	r5, #0
 801ae30:	e58f      	b.n	801a952 <tcp_process+0x36>
 801ae32:	bf00      	nop
 801ae34:	200102c8 	.word	0x200102c8
 801ae38:	200102d0 	.word	0x200102d0
 801ae3c:	200102d4 	.word	0x200102d4
 801ae40:	200102b4 	.word	0x200102b4
 801ae44:	200102b0 	.word	0x200102b0
 801ae48:	20015cc4 	.word	0x20015cc4
 801ae4c:	20015cc0 	.word	0x20015cc0
 801ae50:	20015cd4 	.word	0x20015cd4

0801ae54 <tcp_input>:
{
 801ae54:	b570      	push	{r4, r5, r6, lr}
 801ae56:	b082      	sub	sp, #8
 801ae58:	4604      	mov	r4, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 801ae5a:	6842      	ldr	r2, [r0, #4]
 801ae5c:	4b9f      	ldr	r3, [pc, #636]	; (801b0dc <tcp_input+0x288>)
 801ae5e:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 801ae60:	8943      	ldrh	r3, [r0, #10]
 801ae62:	2b13      	cmp	r3, #19
 801ae64:	d93e      	bls.n	801aee4 <tcp_input+0x90>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ae66:	4b9e      	ldr	r3, [pc, #632]	; (801b0e0 <tcp_input+0x28c>)
 801ae68:	6819      	ldr	r1, [r3, #0]
 801ae6a:	6958      	ldr	r0, [r3, #20]
 801ae6c:	f7fc f9df 	bl	801722e <ip4_addr_isbroadcast_u32>
 801ae70:	2800      	cmp	r0, #0
 801ae72:	d137      	bne.n	801aee4 <tcp_input+0x90>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ae74:	4b9a      	ldr	r3, [pc, #616]	; (801b0e0 <tcp_input+0x28c>)
 801ae76:	695b      	ldr	r3, [r3, #20]
 801ae78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ae7c:	2be0      	cmp	r3, #224	; 0xe0
 801ae7e:	d031      	beq.n	801aee4 <tcp_input+0x90>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801ae80:	4b96      	ldr	r3, [pc, #600]	; (801b0dc <tcp_input+0x288>)
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	8998      	ldrh	r0, [r3, #12]
 801ae86:	f7fb fa78 	bl	801637a <lwip_htons>
 801ae8a:	f3c0 310f 	ubfx	r1, r0, #12, #16
 801ae8e:	0089      	lsls	r1, r1, #2
 801ae90:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ae92:	2913      	cmp	r1, #19
 801ae94:	d926      	bls.n	801aee4 <tcp_input+0x90>
 801ae96:	b289      	uxth	r1, r1
 801ae98:	8923      	ldrh	r3, [r4, #8]
 801ae9a:	4299      	cmp	r1, r3
 801ae9c:	d822      	bhi.n	801aee4 <tcp_input+0x90>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801ae9e:	f1a1 0314 	sub.w	r3, r1, #20
 801aea2:	b29b      	uxth	r3, r3
 801aea4:	4a8f      	ldr	r2, [pc, #572]	; (801b0e4 <tcp_input+0x290>)
 801aea6:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
 801aea8:	2000      	movs	r0, #0
 801aeaa:	4a8f      	ldr	r2, [pc, #572]	; (801b0e8 <tcp_input+0x294>)
 801aeac:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 801aeae:	8962      	ldrh	r2, [r4, #10]
 801aeb0:	4291      	cmp	r1, r2
 801aeb2:	d91c      	bls.n	801aeee <tcp_input+0x9a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801aeb4:	6823      	ldr	r3, [r4, #0]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d051      	beq.n	801af5e <tcp_input+0x10a>
    pbuf_header(p, -TCP_HLEN);
 801aeba:	f06f 0113 	mvn.w	r1, #19
 801aebe:	4620      	mov	r0, r4
 801aec0:	f7fd fb34 	bl	801852c <pbuf_header>
    tcphdr_opt1len = p->len;
 801aec4:	8961      	ldrh	r1, [r4, #10]
 801aec6:	4b89      	ldr	r3, [pc, #548]	; (801b0ec <tcp_input+0x298>)
 801aec8:	8019      	strh	r1, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801aeca:	4b86      	ldr	r3, [pc, #536]	; (801b0e4 <tcp_input+0x290>)
 801aecc:	881d      	ldrh	r5, [r3, #0]
 801aece:	1a6d      	subs	r5, r5, r1
 801aed0:	b2ad      	uxth	r5, r5
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801aed2:	4249      	negs	r1, r1
 801aed4:	b209      	sxth	r1, r1
 801aed6:	4620      	mov	r0, r4
 801aed8:	f7fd fb28 	bl	801852c <pbuf_header>
    if (opt2len > p->next->len) {
 801aedc:	6820      	ldr	r0, [r4, #0]
 801aede:	8943      	ldrh	r3, [r0, #10]
 801aee0:	429d      	cmp	r5, r3
 801aee2:	d943      	bls.n	801af6c <tcp_input+0x118>
  pbuf_free(p);
 801aee4:	4620      	mov	r0, r4
 801aee6:	f7fd fb2b 	bl	8018540 <pbuf_free>
}
 801aeea:	b002      	add	sp, #8
 801aeec:	bd70      	pop	{r4, r5, r6, pc}
    tcphdr_opt1len = tcphdr_optlen;
 801aeee:	4a7f      	ldr	r2, [pc, #508]	; (801b0ec <tcp_input+0x298>)
 801aef0:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 801aef2:	4249      	negs	r1, r1
 801aef4:	4620      	mov	r0, r4
 801aef6:	f7fd fb19 	bl	801852c <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801aefa:	4d78      	ldr	r5, [pc, #480]	; (801b0dc <tcp_input+0x288>)
 801aefc:	682e      	ldr	r6, [r5, #0]
 801aefe:	8830      	ldrh	r0, [r6, #0]
 801af00:	f7fb fa3b 	bl	801637a <lwip_htons>
 801af04:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801af06:	682e      	ldr	r6, [r5, #0]
 801af08:	8870      	ldrh	r0, [r6, #2]
 801af0a:	f7fb fa36 	bl	801637a <lwip_htons>
 801af0e:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801af10:	682e      	ldr	r6, [r5, #0]
 801af12:	6870      	ldr	r0, [r6, #4]
 801af14:	f7fb fa34 	bl	8016380 <lwip_htonl>
 801af18:	6070      	str	r0, [r6, #4]
 801af1a:	4b75      	ldr	r3, [pc, #468]	; (801b0f0 <tcp_input+0x29c>)
 801af1c:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801af1e:	682e      	ldr	r6, [r5, #0]
 801af20:	68b0      	ldr	r0, [r6, #8]
 801af22:	f7fb fa2d 	bl	8016380 <lwip_htonl>
 801af26:	60b0      	str	r0, [r6, #8]
 801af28:	4b72      	ldr	r3, [pc, #456]	; (801b0f4 <tcp_input+0x2a0>)
 801af2a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801af2c:	682e      	ldr	r6, [r5, #0]
 801af2e:	89f0      	ldrh	r0, [r6, #14]
 801af30:	f7fb fa23 	bl	801637a <lwip_htons>
 801af34:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 801af36:	682b      	ldr	r3, [r5, #0]
 801af38:	8998      	ldrh	r0, [r3, #12]
 801af3a:	f7fb fa1e 	bl	801637a <lwip_htons>
 801af3e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 801af42:	4a6d      	ldr	r2, [pc, #436]	; (801b0f8 <tcp_input+0x2a4>)
 801af44:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801af46:	8922      	ldrh	r2, [r4, #8]
 801af48:	f013 0303 	ands.w	r3, r3, #3
 801af4c:	bf18      	it	ne
 801af4e:	2301      	movne	r3, #1
 801af50:	4413      	add	r3, r2
 801af52:	4a6a      	ldr	r2, [pc, #424]	; (801b0fc <tcp_input+0x2a8>)
 801af54:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801af56:	4b6a      	ldr	r3, [pc, #424]	; (801b100 <tcp_input+0x2ac>)
 801af58:	681d      	ldr	r5, [r3, #0]
  prev = NULL;
 801af5a:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801af5c:	e033      	b.n	801afc6 <tcp_input+0x172>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801af5e:	4b69      	ldr	r3, [pc, #420]	; (801b104 <tcp_input+0x2b0>)
 801af60:	22b2      	movs	r2, #178	; 0xb2
 801af62:	4969      	ldr	r1, [pc, #420]	; (801b108 <tcp_input+0x2b4>)
 801af64:	4869      	ldr	r0, [pc, #420]	; (801b10c <tcp_input+0x2b8>)
 801af66:	f004 fdc2 	bl	801faee <iprintf>
 801af6a:	e7a6      	b.n	801aeba <tcp_input+0x66>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801af6c:	6842      	ldr	r2, [r0, #4]
 801af6e:	4b5e      	ldr	r3, [pc, #376]	; (801b0e8 <tcp_input+0x294>)
 801af70:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 801af72:	4269      	negs	r1, r5
 801af74:	b209      	sxth	r1, r1
 801af76:	f7fd fad9 	bl	801852c <pbuf_header>
    p->tot_len -= opt2len;
 801af7a:	8923      	ldrh	r3, [r4, #8]
 801af7c:	1b5d      	subs	r5, r3, r5
 801af7e:	8125      	strh	r5, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801af80:	8963      	ldrh	r3, [r4, #10]
 801af82:	b95b      	cbnz	r3, 801af9c <tcp_input+0x148>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801af84:	8922      	ldrh	r2, [r4, #8]
 801af86:	6823      	ldr	r3, [r4, #0]
 801af88:	891b      	ldrh	r3, [r3, #8]
 801af8a:	429a      	cmp	r2, r3
 801af8c:	d0b5      	beq.n	801aefa <tcp_input+0xa6>
 801af8e:	4b5d      	ldr	r3, [pc, #372]	; (801b104 <tcp_input+0x2b0>)
 801af90:	22d0      	movs	r2, #208	; 0xd0
 801af92:	495f      	ldr	r1, [pc, #380]	; (801b110 <tcp_input+0x2bc>)
 801af94:	485d      	ldr	r0, [pc, #372]	; (801b10c <tcp_input+0x2b8>)
 801af96:	f004 fdaa 	bl	801faee <iprintf>
 801af9a:	e7ae      	b.n	801aefa <tcp_input+0xa6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801af9c:	4b59      	ldr	r3, [pc, #356]	; (801b104 <tcp_input+0x2b0>)
 801af9e:	22cf      	movs	r2, #207	; 0xcf
 801afa0:	495c      	ldr	r1, [pc, #368]	; (801b114 <tcp_input+0x2c0>)
 801afa2:	485a      	ldr	r0, [pc, #360]	; (801b10c <tcp_input+0x2b8>)
 801afa4:	f004 fda3 	bl	801faee <iprintf>
 801afa8:	e7ec      	b.n	801af84 <tcp_input+0x130>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801afaa:	7d2b      	ldrb	r3, [r5, #20]
 801afac:	2b0a      	cmp	r3, #10
 801afae:	d016      	beq.n	801afde <tcp_input+0x18a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801afb0:	7d2b      	ldrb	r3, [r5, #20]
 801afb2:	2b01      	cmp	r3, #1
 801afb4:	d01a      	beq.n	801afec <tcp_input+0x198>
    if (pcb->remote_port == tcphdr->src &&
 801afb6:	8b29      	ldrh	r1, [r5, #24]
 801afb8:	4b48      	ldr	r3, [pc, #288]	; (801b0dc <tcp_input+0x288>)
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	881a      	ldrh	r2, [r3, #0]
 801afbe:	4291      	cmp	r1, r2
 801afc0:	d01b      	beq.n	801affa <tcp_input+0x1a6>
    prev = pcb;
 801afc2:	462e      	mov	r6, r5
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801afc4:	68ed      	ldr	r5, [r5, #12]
 801afc6:	2d00      	cmp	r5, #0
 801afc8:	d032      	beq.n	801b030 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801afca:	7d2b      	ldrb	r3, [r5, #20]
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d1ec      	bne.n	801afaa <tcp_input+0x156>
 801afd0:	4b4c      	ldr	r3, [pc, #304]	; (801b104 <tcp_input+0x2b0>)
 801afd2:	22e2      	movs	r2, #226	; 0xe2
 801afd4:	4950      	ldr	r1, [pc, #320]	; (801b118 <tcp_input+0x2c4>)
 801afd6:	484d      	ldr	r0, [pc, #308]	; (801b10c <tcp_input+0x2b8>)
 801afd8:	f004 fd89 	bl	801faee <iprintf>
 801afdc:	e7e5      	b.n	801afaa <tcp_input+0x156>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801afde:	4b49      	ldr	r3, [pc, #292]	; (801b104 <tcp_input+0x2b0>)
 801afe0:	22e3      	movs	r2, #227	; 0xe3
 801afe2:	494e      	ldr	r1, [pc, #312]	; (801b11c <tcp_input+0x2c8>)
 801afe4:	4849      	ldr	r0, [pc, #292]	; (801b10c <tcp_input+0x2b8>)
 801afe6:	f004 fd82 	bl	801faee <iprintf>
 801afea:	e7e1      	b.n	801afb0 <tcp_input+0x15c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801afec:	4b45      	ldr	r3, [pc, #276]	; (801b104 <tcp_input+0x2b0>)
 801afee:	22e4      	movs	r2, #228	; 0xe4
 801aff0:	494b      	ldr	r1, [pc, #300]	; (801b120 <tcp_input+0x2cc>)
 801aff2:	4846      	ldr	r0, [pc, #280]	; (801b10c <tcp_input+0x2b8>)
 801aff4:	f004 fd7b 	bl	801faee <iprintf>
 801aff8:	e7dd      	b.n	801afb6 <tcp_input+0x162>
        pcb->local_port == tcphdr->dest &&
 801affa:	8aea      	ldrh	r2, [r5, #22]
 801affc:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 801affe:	429a      	cmp	r2, r3
 801b000:	d1df      	bne.n	801afc2 <tcp_input+0x16e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b002:	686a      	ldr	r2, [r5, #4]
 801b004:	4b36      	ldr	r3, [pc, #216]	; (801b0e0 <tcp_input+0x28c>)
 801b006:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801b008:	429a      	cmp	r2, r3
 801b00a:	d1da      	bne.n	801afc2 <tcp_input+0x16e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b00c:	682a      	ldr	r2, [r5, #0]
 801b00e:	4b34      	ldr	r3, [pc, #208]	; (801b0e0 <tcp_input+0x28c>)
 801b010:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b012:	429a      	cmp	r2, r3
 801b014:	d1d5      	bne.n	801afc2 <tcp_input+0x16e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801b016:	68eb      	ldr	r3, [r5, #12]
 801b018:	429d      	cmp	r5, r3
 801b01a:	d04d      	beq.n	801b0b8 <tcp_input+0x264>
      if (prev != NULL) {
 801b01c:	b12e      	cbz	r6, 801b02a <tcp_input+0x1d6>
        prev->next = pcb->next;
 801b01e:	68eb      	ldr	r3, [r5, #12]
 801b020:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 801b022:	4b37      	ldr	r3, [pc, #220]	; (801b100 <tcp_input+0x2ac>)
 801b024:	681a      	ldr	r2, [r3, #0]
 801b026:	60ea      	str	r2, [r5, #12]
        tcp_active_pcbs = pcb;
 801b028:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801b02a:	68eb      	ldr	r3, [r5, #12]
 801b02c:	429d      	cmp	r5, r3
 801b02e:	d04a      	beq.n	801b0c6 <tcp_input+0x272>
  if (pcb == NULL) {
 801b030:	2d00      	cmp	r5, #0
 801b032:	d04f      	beq.n	801b0d4 <tcp_input+0x280>
  if (pcb != NULL) {
 801b034:	2d00      	cmp	r5, #0
 801b036:	f000 8168 	beq.w	801b30a <tcp_input+0x4b6>
    inseg.next = NULL;
 801b03a:	4a3a      	ldr	r2, [pc, #232]	; (801b124 <tcp_input+0x2d0>)
 801b03c:	2300      	movs	r3, #0
 801b03e:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 801b040:	8921      	ldrh	r1, [r4, #8]
 801b042:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 801b044:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 801b046:	4925      	ldr	r1, [pc, #148]	; (801b0dc <tcp_input+0x288>)
 801b048:	6809      	ldr	r1, [r1, #0]
 801b04a:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 801b04c:	4a36      	ldr	r2, [pc, #216]	; (801b128 <tcp_input+0x2d4>)
 801b04e:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 801b050:	4a36      	ldr	r2, [pc, #216]	; (801b12c <tcp_input+0x2d8>)
 801b052:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 801b054:	4a36      	ldr	r2, [pc, #216]	; (801b130 <tcp_input+0x2dc>)
 801b056:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 801b058:	4b27      	ldr	r3, [pc, #156]	; (801b0f8 <tcp_input+0x2a4>)
 801b05a:	781b      	ldrb	r3, [r3, #0]
 801b05c:	f013 0f08 	tst.w	r3, #8
 801b060:	d003      	beq.n	801b06a <tcp_input+0x216>
      p->flags |= PBUF_FLAG_PUSH;
 801b062:	7b63      	ldrb	r3, [r4, #13]
 801b064:	f043 0301 	orr.w	r3, r3, #1
 801b068:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 801b06a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	f000 80b9 	beq.w	801b1e4 <tcp_input+0x390>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b072:	4628      	mov	r0, r5
 801b074:	f7fe fb24 	bl	80196c0 <tcp_process_refused_data>
 801b078:	f110 0f0d 	cmn.w	r0, #13
 801b07c:	d008      	beq.n	801b090 <tcp_input+0x23c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b07e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b080:	2b00      	cmp	r3, #0
 801b082:	f000 80af 	beq.w	801b1e4 <tcp_input+0x390>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b086:	4b1d      	ldr	r3, [pc, #116]	; (801b0fc <tcp_input+0x2a8>)
 801b088:	881b      	ldrh	r3, [r3, #0]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	f000 80aa 	beq.w	801b1e4 <tcp_input+0x390>
        if (pcb->rcv_ann_wnd == 0) {
 801b090:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801b092:	2b00      	cmp	r3, #0
 801b094:	f000 80a2 	beq.w	801b1dc <tcp_input+0x388>
    tcp_input_pcb = NULL;
 801b098:	2300      	movs	r3, #0
 801b09a:	4a26      	ldr	r2, [pc, #152]	; (801b134 <tcp_input+0x2e0>)
 801b09c:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 801b09e:	4a22      	ldr	r2, [pc, #136]	; (801b128 <tcp_input+0x2d4>)
 801b0a0:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
 801b0a2:	4b20      	ldr	r3, [pc, #128]	; (801b124 <tcp_input+0x2d0>)
 801b0a4:	6858      	ldr	r0, [r3, #4]
 801b0a6:	2800      	cmp	r0, #0
 801b0a8:	f43f af1f 	beq.w	801aeea <tcp_input+0x96>
      pbuf_free(inseg.p);
 801b0ac:	f7fd fa48 	bl	8018540 <pbuf_free>
      inseg.p = NULL;
 801b0b0:	2200      	movs	r2, #0
 801b0b2:	4b1c      	ldr	r3, [pc, #112]	; (801b124 <tcp_input+0x2d0>)
 801b0b4:	605a      	str	r2, [r3, #4]
 801b0b6:	e718      	b.n	801aeea <tcp_input+0x96>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801b0b8:	4b12      	ldr	r3, [pc, #72]	; (801b104 <tcp_input+0x2b0>)
 801b0ba:	22ec      	movs	r2, #236	; 0xec
 801b0bc:	491e      	ldr	r1, [pc, #120]	; (801b138 <tcp_input+0x2e4>)
 801b0be:	4813      	ldr	r0, [pc, #76]	; (801b10c <tcp_input+0x2b8>)
 801b0c0:	f004 fd15 	bl	801faee <iprintf>
 801b0c4:	e7aa      	b.n	801b01c <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801b0c6:	4b0f      	ldr	r3, [pc, #60]	; (801b104 <tcp_input+0x2b0>)
 801b0c8:	22f4      	movs	r2, #244	; 0xf4
 801b0ca:	491c      	ldr	r1, [pc, #112]	; (801b13c <tcp_input+0x2e8>)
 801b0cc:	480f      	ldr	r0, [pc, #60]	; (801b10c <tcp_input+0x2b8>)
 801b0ce:	f004 fd0e 	bl	801faee <iprintf>
 801b0d2:	e7ad      	b.n	801b030 <tcp_input+0x1dc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b0d4:	4b1a      	ldr	r3, [pc, #104]	; (801b140 <tcp_input+0x2ec>)
 801b0d6:	681d      	ldr	r5, [r3, #0]
 801b0d8:	e03b      	b.n	801b152 <tcp_input+0x2fe>
 801b0da:	bf00      	nop
 801b0dc:	200102dc 	.word	0x200102dc
 801b0e0:	20011040 	.word	0x20011040
 801b0e4:	200102e8 	.word	0x200102e8
 801b0e8:	200102e4 	.word	0x200102e4
 801b0ec:	200102e0 	.word	0x200102e0
 801b0f0:	200102d4 	.word	0x200102d4
 801b0f4:	200102b0 	.word	0x200102b0
 801b0f8:	200102b4 	.word	0x200102b4
 801b0fc:	200102ea 	.word	0x200102ea
 801b100:	20015cc4 	.word	0x20015cc4
 801b104:	08026760 	.word	0x08026760
 801b108:	08026598 	.word	0x08026598
 801b10c:	080214f0 	.word	0x080214f0
 801b110:	080265b4 	.word	0x080265b4
 801b114:	080265a8 	.word	0x080265a8
 801b118:	080265d4 	.word	0x080265d4
 801b11c:	080265fc 	.word	0x080265fc
 801b120:	08026628 	.word	0x08026628
 801b124:	200102b8 	.word	0x200102b8
 801b128:	200102cc 	.word	0x200102cc
 801b12c:	200102d0 	.word	0x200102d0
 801b130:	200102c8 	.word	0x200102c8
 801b134:	20015cd8 	.word	0x20015cd8
 801b138:	08026650 	.word	0x08026650
 801b13c:	0802667c 	.word	0x0802667c
 801b140:	20015cd4 	.word	0x20015cd4
      if (pcb->remote_port == tcphdr->src &&
 801b144:	8b29      	ldrh	r1, [r5, #24]
 801b146:	4b80      	ldr	r3, [pc, #512]	; (801b348 <tcp_input+0x4f4>)
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	881a      	ldrh	r2, [r3, #0]
 801b14c:	4291      	cmp	r1, r2
 801b14e:	d00b      	beq.n	801b168 <tcp_input+0x314>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b150:	68ed      	ldr	r5, [r5, #12]
 801b152:	b1f5      	cbz	r5, 801b192 <tcp_input+0x33e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b154:	7d2b      	ldrb	r3, [r5, #20]
 801b156:	2b0a      	cmp	r3, #10
 801b158:	d0f4      	beq.n	801b144 <tcp_input+0x2f0>
 801b15a:	4b7c      	ldr	r3, [pc, #496]	; (801b34c <tcp_input+0x4f8>)
 801b15c:	22fe      	movs	r2, #254	; 0xfe
 801b15e:	497c      	ldr	r1, [pc, #496]	; (801b350 <tcp_input+0x4fc>)
 801b160:	487c      	ldr	r0, [pc, #496]	; (801b354 <tcp_input+0x500>)
 801b162:	f004 fcc4 	bl	801faee <iprintf>
 801b166:	e7ed      	b.n	801b144 <tcp_input+0x2f0>
          pcb->local_port == tcphdr->dest &&
 801b168:	8aea      	ldrh	r2, [r5, #22]
 801b16a:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 801b16c:	429a      	cmp	r2, r3
 801b16e:	d1ef      	bne.n	801b150 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b170:	686a      	ldr	r2, [r5, #4]
 801b172:	4b79      	ldr	r3, [pc, #484]	; (801b358 <tcp_input+0x504>)
 801b174:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801b176:	429a      	cmp	r2, r3
 801b178:	d1ea      	bne.n	801b150 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b17a:	682a      	ldr	r2, [r5, #0]
 801b17c:	4b76      	ldr	r3, [pc, #472]	; (801b358 <tcp_input+0x504>)
 801b17e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b180:	429a      	cmp	r2, r3
 801b182:	d1e5      	bne.n	801b150 <tcp_input+0x2fc>
        tcp_timewait_input(pcb);
 801b184:	4628      	mov	r0, r5
 801b186:	f7fe fd8f 	bl	8019ca8 <tcp_timewait_input>
        pbuf_free(p);
 801b18a:	4620      	mov	r0, r4
 801b18c:	f7fd f9d8 	bl	8018540 <pbuf_free>
        return;
 801b190:	e6ab      	b.n	801aeea <tcp_input+0x96>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b192:	4b72      	ldr	r3, [pc, #456]	; (801b35c <tcp_input+0x508>)
 801b194:	681e      	ldr	r6, [r3, #0]
 801b196:	4630      	mov	r0, r6
    prev = NULL;
 801b198:	4629      	mov	r1, r5
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b19a:	e001      	b.n	801b1a0 <tcp_input+0x34c>
      prev = (struct tcp_pcb *)lpcb;
 801b19c:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b19e:	68c0      	ldr	r0, [r0, #12]
 801b1a0:	b168      	cbz	r0, 801b1be <tcp_input+0x36a>
      if (lpcb->local_port == tcphdr->dest) {
 801b1a2:	8ac2      	ldrh	r2, [r0, #22]
 801b1a4:	4b68      	ldr	r3, [pc, #416]	; (801b348 <tcp_input+0x4f4>)
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	885b      	ldrh	r3, [r3, #2]
 801b1aa:	429a      	cmp	r2, r3
 801b1ac:	d1f6      	bne.n	801b19c <tcp_input+0x348>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b1ae:	6803      	ldr	r3, [r0, #0]
 801b1b0:	4a69      	ldr	r2, [pc, #420]	; (801b358 <tcp_input+0x504>)
 801b1b2:	6952      	ldr	r2, [r2, #20]
 801b1b4:	4293      	cmp	r3, r2
 801b1b6:	d002      	beq.n	801b1be <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b1b8:	b108      	cbz	r0, 801b1be <tcp_input+0x36a>
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d1ee      	bne.n	801b19c <tcp_input+0x348>
    if (lpcb != NULL) {
 801b1be:	2800      	cmp	r0, #0
 801b1c0:	f43f af38 	beq.w	801b034 <tcp_input+0x1e0>
      if (prev != NULL) {
 801b1c4:	b121      	cbz	r1, 801b1d0 <tcp_input+0x37c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b1c6:	68c3      	ldr	r3, [r0, #12]
 801b1c8:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b1ca:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b1cc:	4b63      	ldr	r3, [pc, #396]	; (801b35c <tcp_input+0x508>)
 801b1ce:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 801b1d0:	f7fe fdb2 	bl	8019d38 <tcp_listen_input>
      pbuf_free(p);
 801b1d4:	4620      	mov	r0, r4
 801b1d6:	f7fd f9b3 	bl	8018540 <pbuf_free>
      return;
 801b1da:	e686      	b.n	801aeea <tcp_input+0x96>
          tcp_send_empty_ack(pcb);
 801b1dc:	4628      	mov	r0, r5
 801b1de:	f000 fde9 	bl	801bdb4 <tcp_send_empty_ack>
 801b1e2:	e759      	b.n	801b098 <tcp_input+0x244>
    tcp_input_pcb = pcb;
 801b1e4:	4b5e      	ldr	r3, [pc, #376]	; (801b360 <tcp_input+0x50c>)
 801b1e6:	601d      	str	r5, [r3, #0]
    err = tcp_process(pcb);
 801b1e8:	4628      	mov	r0, r5
 801b1ea:	f7ff fb97 	bl	801a91c <tcp_process>
    if (err != ERR_ABRT) {
 801b1ee:	f110 0f0d 	cmn.w	r0, #13
 801b1f2:	f43f af51 	beq.w	801b098 <tcp_input+0x244>
      if (recv_flags & TF_RESET) {
 801b1f6:	4b5b      	ldr	r3, [pc, #364]	; (801b364 <tcp_input+0x510>)
 801b1f8:	781b      	ldrb	r3, [r3, #0]
 801b1fa:	f013 0f08 	tst.w	r3, #8
 801b1fe:	d00f      	beq.n	801b220 <tcp_input+0x3cc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b200:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 801b204:	b11b      	cbz	r3, 801b20e <tcp_input+0x3ba>
 801b206:	f06f 010d 	mvn.w	r1, #13
 801b20a:	6928      	ldr	r0, [r5, #16]
 801b20c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b20e:	4629      	mov	r1, r5
 801b210:	4855      	ldr	r0, [pc, #340]	; (801b368 <tcp_input+0x514>)
 801b212:	f7fe f939 	bl	8019488 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 801b216:	4629      	mov	r1, r5
 801b218:	2000      	movs	r0, #0
 801b21a:	f7fc ffa5 	bl	8018168 <memp_free>
 801b21e:	e73b      	b.n	801b098 <tcp_input+0x244>
        if (recv_acked > 0) {
 801b220:	4b52      	ldr	r3, [pc, #328]	; (801b36c <tcp_input+0x518>)
 801b222:	881a      	ldrh	r2, [r3, #0]
 801b224:	b162      	cbz	r2, 801b240 <tcp_input+0x3ec>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b226:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d048      	beq.n	801b2be <tcp_input+0x46a>
 801b22c:	4629      	mov	r1, r5
 801b22e:	6928      	ldr	r0, [r5, #16]
 801b230:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801b232:	f110 0f0d 	cmn.w	r0, #13
 801b236:	f43f af2f 	beq.w	801b098 <tcp_input+0x244>
          recv_acked = 0;
 801b23a:	2200      	movs	r2, #0
 801b23c:	4b4b      	ldr	r3, [pc, #300]	; (801b36c <tcp_input+0x518>)
 801b23e:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b240:	4628      	mov	r0, r5
 801b242:	f7fe fd0f 	bl	8019c64 <tcp_input_delayed_close>
 801b246:	2800      	cmp	r0, #0
 801b248:	f47f af26 	bne.w	801b098 <tcp_input+0x244>
        if (recv_data != NULL) {
 801b24c:	4b48      	ldr	r3, [pc, #288]	; (801b370 <tcp_input+0x51c>)
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	b1eb      	cbz	r3, 801b28e <tcp_input+0x43a>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b252:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801b254:	b133      	cbz	r3, 801b264 <tcp_input+0x410>
 801b256:	4b3d      	ldr	r3, [pc, #244]	; (801b34c <tcp_input+0x4f8>)
 801b258:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 801b25c:	4945      	ldr	r1, [pc, #276]	; (801b374 <tcp_input+0x520>)
 801b25e:	483d      	ldr	r0, [pc, #244]	; (801b354 <tcp_input+0x500>)
 801b260:	f004 fc45 	bl	801faee <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b264:	7eab      	ldrb	r3, [r5, #26]
 801b266:	f013 0f10 	tst.w	r3, #16
 801b26a:	d12a      	bne.n	801b2c2 <tcp_input+0x46e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b26c:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 801b270:	b37c      	cbz	r4, 801b2d2 <tcp_input+0x47e>
 801b272:	2300      	movs	r3, #0
 801b274:	4a3e      	ldr	r2, [pc, #248]	; (801b370 <tcp_input+0x51c>)
 801b276:	6812      	ldr	r2, [r2, #0]
 801b278:	4629      	mov	r1, r5
 801b27a:	6928      	ldr	r0, [r5, #16]
 801b27c:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 801b27e:	f110 0f0d 	cmn.w	r0, #13
 801b282:	f43f af09 	beq.w	801b098 <tcp_input+0x244>
          if (err != ERR_OK) {
 801b286:	b110      	cbz	r0, 801b28e <tcp_input+0x43a>
            pcb->refused_data = recv_data;
 801b288:	4b39      	ldr	r3, [pc, #228]	; (801b370 <tcp_input+0x51c>)
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 801b28e:	4b35      	ldr	r3, [pc, #212]	; (801b364 <tcp_input+0x510>)
 801b290:	781b      	ldrb	r3, [r3, #0]
 801b292:	f013 0f20 	tst.w	r3, #32
 801b296:	d005      	beq.n	801b2a4 <tcp_input+0x450>
          if (pcb->refused_data != NULL) {
 801b298:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801b29a:	b313      	cbz	r3, 801b2e2 <tcp_input+0x48e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b29c:	7b5a      	ldrb	r2, [r3, #13]
 801b29e:	f042 0220 	orr.w	r2, r2, #32
 801b2a2:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801b2a4:	2200      	movs	r2, #0
 801b2a6:	4b2e      	ldr	r3, [pc, #184]	; (801b360 <tcp_input+0x50c>)
 801b2a8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b2aa:	4628      	mov	r0, r5
 801b2ac:	f7fe fcda 	bl	8019c64 <tcp_input_delayed_close>
 801b2b0:	2800      	cmp	r0, #0
 801b2b2:	f47f aef1 	bne.w	801b098 <tcp_input+0x244>
        tcp_output(pcb);
 801b2b6:	4628      	mov	r0, r5
 801b2b8:	f000 fdb6 	bl	801be28 <tcp_output>
 801b2bc:	e6ec      	b.n	801b098 <tcp_input+0x244>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b2be:	2000      	movs	r0, #0
 801b2c0:	e7b7      	b.n	801b232 <tcp_input+0x3de>
            pbuf_free(recv_data);
 801b2c2:	4b2b      	ldr	r3, [pc, #172]	; (801b370 <tcp_input+0x51c>)
 801b2c4:	6818      	ldr	r0, [r3, #0]
 801b2c6:	f7fd f93b 	bl	8018540 <pbuf_free>
            tcp_abort(pcb);
 801b2ca:	4628      	mov	r0, r5
 801b2cc:	f7fe fb2a 	bl	8019924 <tcp_abort>
            goto aborted;
 801b2d0:	e6e2      	b.n	801b098 <tcp_input+0x244>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	4a26      	ldr	r2, [pc, #152]	; (801b370 <tcp_input+0x51c>)
 801b2d6:	6812      	ldr	r2, [r2, #0]
 801b2d8:	4629      	mov	r1, r5
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f7fe f9de 	bl	801969c <tcp_recv_null>
 801b2e0:	e7cd      	b.n	801b27e <tcp_input+0x42a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b2e2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801b2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b2e8:	d001      	beq.n	801b2ee <tcp_input+0x49a>
              pcb->rcv_wnd++;
 801b2ea:	3301      	adds	r3, #1
 801b2ec:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801b2ee:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 801b2f2:	b144      	cbz	r4, 801b306 <tcp_input+0x4b2>
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	461a      	mov	r2, r3
 801b2f8:	4629      	mov	r1, r5
 801b2fa:	6928      	ldr	r0, [r5, #16]
 801b2fc:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 801b2fe:	f110 0f0d 	cmn.w	r0, #13
 801b302:	d1cf      	bne.n	801b2a4 <tcp_input+0x450>
 801b304:	e6c8      	b.n	801b098 <tcp_input+0x244>
            TCP_EVENT_CLOSED(pcb, err);
 801b306:	2000      	movs	r0, #0
 801b308:	e7f9      	b.n	801b2fe <tcp_input+0x4aa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b30a:	4b0f      	ldr	r3, [pc, #60]	; (801b348 <tcp_input+0x4f4>)
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	8998      	ldrh	r0, [r3, #12]
 801b310:	f7fb f833 	bl	801637a <lwip_htons>
 801b314:	f010 0f04 	tst.w	r0, #4
 801b318:	d003      	beq.n	801b322 <tcp_input+0x4ce>
    pbuf_free(p);
 801b31a:	4620      	mov	r0, r4
 801b31c:	f7fd f910 	bl	8018540 <pbuf_free>
 801b320:	e5e3      	b.n	801aeea <tcp_input+0x96>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b322:	4b09      	ldr	r3, [pc, #36]	; (801b348 <tcp_input+0x4f4>)
 801b324:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801b326:	4a14      	ldr	r2, [pc, #80]	; (801b378 <tcp_input+0x524>)
 801b328:	4914      	ldr	r1, [pc, #80]	; (801b37c <tcp_input+0x528>)
 801b32a:	8808      	ldrh	r0, [r1, #0]
 801b32c:	4914      	ldr	r1, [pc, #80]	; (801b380 <tcp_input+0x52c>)
 801b32e:	6809      	ldr	r1, [r1, #0]
 801b330:	881d      	ldrh	r5, [r3, #0]
 801b332:	9501      	str	r5, [sp, #4]
 801b334:	885b      	ldrh	r3, [r3, #2]
 801b336:	9300      	str	r3, [sp, #0]
 801b338:	4613      	mov	r3, r2
 801b33a:	3204      	adds	r2, #4
 801b33c:	4401      	add	r1, r0
 801b33e:	4811      	ldr	r0, [pc, #68]	; (801b384 <tcp_input+0x530>)
 801b340:	6800      	ldr	r0, [r0, #0]
 801b342:	f000 fecd 	bl	801c0e0 <tcp_rst>
 801b346:	e7e8      	b.n	801b31a <tcp_input+0x4c6>
 801b348:	200102dc 	.word	0x200102dc
 801b34c:	08026760 	.word	0x08026760
 801b350:	080266a8 	.word	0x080266a8
 801b354:	080214f0 	.word	0x080214f0
 801b358:	20011040 	.word	0x20011040
 801b35c:	20015ccc 	.word	0x20015ccc
 801b360:	20015cd8 	.word	0x20015cd8
 801b364:	200102d0 	.word	0x200102d0
 801b368:	20015cc4 	.word	0x20015cc4
 801b36c:	200102c8 	.word	0x200102c8
 801b370:	200102cc 	.word	0x200102cc
 801b374:	080266d8 	.word	0x080266d8
 801b378:	20011050 	.word	0x20011050
 801b37c:	200102ea 	.word	0x200102ea
 801b380:	200102d4 	.word	0x200102d4
 801b384:	200102b0 	.word	0x200102b0

0801b388 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801b388:	4a02      	ldr	r2, [pc, #8]	; (801b394 <tcp_trigger_input_pcb_close+0xc>)
 801b38a:	7813      	ldrb	r3, [r2, #0]
 801b38c:	f043 0310 	orr.w	r3, r3, #16
 801b390:	7013      	strb	r3, [r2, #0]
 801b392:	4770      	bx	lr
 801b394:	200102d0 	.word	0x200102d0

0801b398 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801b398:	b508      	push	{r3, lr}
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801b39a:	7d03      	ldrb	r3, [r0, #20]
 801b39c:	2b04      	cmp	r3, #4
 801b39e:	d005      	beq.n	801b3ac <tcp_write_checks+0x14>
 801b3a0:	2b07      	cmp	r3, #7
 801b3a2:	d003      	beq.n	801b3ac <tcp_write_checks+0x14>
      (pcb->state != CLOSE_WAIT) &&
 801b3a4:	2b02      	cmp	r3, #2
 801b3a6:	d001      	beq.n	801b3ac <tcp_write_checks+0x14>
      (pcb->state != SYN_SENT) &&
 801b3a8:	2b03      	cmp	r3, #3
 801b3aa:	d139      	bne.n	801b420 <tcp_write_checks+0x88>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 801b3ac:	2900      	cmp	r1, #0
 801b3ae:	d03a      	beq.n	801b426 <tcp_write_checks+0x8e>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801b3b0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801b3b4:	4299      	cmp	r1, r3
 801b3b6:	d808      	bhi.n	801b3ca <tcp_write_checks+0x32>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801b3b8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801b3bc:	2b0a      	cmp	r3, #10
 801b3be:	d80b      	bhi.n	801b3d8 <tcp_write_checks+0x40>
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 801b3c0:	b1f3      	cbz	r3, 801b400 <tcp_write_checks+0x68>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b3c2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801b3c4:	b17b      	cbz	r3, 801b3e6 <tcp_write_checks+0x4e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801b3c6:	2000      	movs	r0, #0
 801b3c8:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 801b3ca:	7e83      	ldrb	r3, [r0, #26]
 801b3cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b3d0:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 801b3d2:	f04f 30ff 	mov.w	r0, #4294967295
 801b3d6:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 801b3d8:	7e83      	ldrb	r3, [r0, #26]
 801b3da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b3de:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 801b3e0:	f04f 30ff 	mov.w	r0, #4294967295
 801b3e4:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b3e6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801b3e8:	b10b      	cbz	r3, 801b3ee <tcp_write_checks+0x56>
  return ERR_OK;
 801b3ea:	2000      	movs	r0, #0
 801b3ec:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b3ee:	4b0f      	ldr	r3, [pc, #60]	; (801b42c <tcp_write_checks+0x94>)
 801b3f0:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801b3f4:	490e      	ldr	r1, [pc, #56]	; (801b430 <tcp_write_checks+0x98>)
 801b3f6:	480f      	ldr	r0, [pc, #60]	; (801b434 <tcp_write_checks+0x9c>)
 801b3f8:	f004 fb79 	bl	801faee <iprintf>
  return ERR_OK;
 801b3fc:	2000      	movs	r0, #0
 801b3fe:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b400:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801b402:	b143      	cbz	r3, 801b416 <tcp_write_checks+0x7e>
 801b404:	4b09      	ldr	r3, [pc, #36]	; (801b42c <tcp_write_checks+0x94>)
 801b406:	f240 1259 	movw	r2, #345	; 0x159
 801b40a:	490b      	ldr	r1, [pc, #44]	; (801b438 <tcp_write_checks+0xa0>)
 801b40c:	4809      	ldr	r0, [pc, #36]	; (801b434 <tcp_write_checks+0x9c>)
 801b40e:	f004 fb6e 	bl	801faee <iprintf>
  return ERR_OK;
 801b412:	2000      	movs	r0, #0
 801b414:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b416:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d1f3      	bne.n	801b404 <tcp_write_checks+0x6c>
  return ERR_OK;
 801b41c:	2000      	movs	r0, #0
}
 801b41e:	bd08      	pop	{r3, pc}
    return ERR_CONN;
 801b420:	f06f 000a 	mvn.w	r0, #10
 801b424:	bd08      	pop	{r3, pc}
    return ERR_OK;
 801b426:	2000      	movs	r0, #0
 801b428:	bd08      	pop	{r3, pc}
 801b42a:	bf00      	nop
 801b42c:	08026c70 	.word	0x08026c70
 801b430:	08026ca4 	.word	0x08026ca4
 801b434:	080214f0 	.word	0x080214f0
 801b438:	08026ce0 	.word	0x08026ce0

0801b43c <tcp_pbuf_prealloc>:
{
 801b43c:	b570      	push	{r4, r5, r6, lr}
 801b43e:	460c      	mov	r4, r1
 801b440:	461e      	mov	r6, r3
 801b442:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 801b446:	4291      	cmp	r1, r2
 801b448:	d215      	bcs.n	801b476 <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b44a:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801b44e:	f011 0f02 	tst.w	r1, #2
 801b452:	d108      	bne.n	801b466 <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 801b454:	9904      	ldr	r1, [sp, #16]
 801b456:	7e89      	ldrb	r1, [r1, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b458:	f011 0f40 	tst.w	r1, #64	; 0x40
 801b45c:	d126      	bne.n	801b4ac <tcp_pbuf_prealloc+0x70>
        (!(pcb->flags & TF_NODELAY) &&
 801b45e:	b113      	cbz	r3, 801b466 <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 801b460:	9b04      	ldr	r3, [sp, #16]
 801b462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 801b464:	b1e3      	cbz	r3, 801b4a0 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801b466:	f204 21d3 	addw	r1, r4, #723	; 0x2d3
 801b46a:	f021 0103 	bic.w	r1, r1, #3
 801b46e:	428a      	cmp	r2, r1
 801b470:	bf28      	it	cs
 801b472:	460a      	movcs	r2, r1
 801b474:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801b476:	2200      	movs	r2, #0
 801b478:	f7fd f8ce 	bl	8018618 <pbuf_alloc>
  if (p == NULL) {
 801b47c:	4605      	mov	r5, r0
 801b47e:	b168      	cbz	r0, 801b49c <tcp_pbuf_prealloc+0x60>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801b480:	6803      	ldr	r3, [r0, #0]
 801b482:	b133      	cbz	r3, 801b492 <tcp_pbuf_prealloc+0x56>
 801b484:	4b0a      	ldr	r3, [pc, #40]	; (801b4b0 <tcp_pbuf_prealloc+0x74>)
 801b486:	f44f 7288 	mov.w	r2, #272	; 0x110
 801b48a:	490a      	ldr	r1, [pc, #40]	; (801b4b4 <tcp_pbuf_prealloc+0x78>)
 801b48c:	480a      	ldr	r0, [pc, #40]	; (801b4b8 <tcp_pbuf_prealloc+0x7c>)
 801b48e:	f004 fb2e 	bl	801faee <iprintf>
  *oversize = p->len - length;
 801b492:	896b      	ldrh	r3, [r5, #10]
 801b494:	1b1b      	subs	r3, r3, r4
 801b496:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 801b498:	812c      	strh	r4, [r5, #8]
 801b49a:	816c      	strh	r4, [r5, #10]
}
 801b49c:	4628      	mov	r0, r5
 801b49e:	bd70      	pop	{r4, r5, r6, pc}
          pcb->unacked != NULL))) {
 801b4a0:	9b04      	ldr	r3, [sp, #16]
 801b4a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	d1de      	bne.n	801b466 <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 801b4a8:	4621      	mov	r1, r4
 801b4aa:	e7e4      	b.n	801b476 <tcp_pbuf_prealloc+0x3a>
 801b4ac:	4621      	mov	r1, r4
 801b4ae:	e7e2      	b.n	801b476 <tcp_pbuf_prealloc+0x3a>
 801b4b0:	08026c70 	.word	0x08026c70
 801b4b4:	08026a80 	.word	0x08026a80
 801b4b8:	080214f0 	.word	0x080214f0

0801b4bc <tcp_create_segment>:
{
 801b4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4c0:	4680      	mov	r8, r0
 801b4c2:	460e      	mov	r6, r1
 801b4c4:	4617      	mov	r7, r2
 801b4c6:	4699      	mov	r9, r3
 801b4c8:	f89d a020 	ldrb.w	sl, [sp, #32]
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b4cc:	f01a 0f01 	tst.w	sl, #1
 801b4d0:	d03c      	beq.n	801b54c <tcp_create_segment+0x90>
 801b4d2:	2504      	movs	r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801b4d4:	2002      	movs	r0, #2
 801b4d6:	f7fc fe2d 	bl	8018134 <memp_malloc>
 801b4da:	4604      	mov	r4, r0
 801b4dc:	2800      	cmp	r0, #0
 801b4de:	d037      	beq.n	801b550 <tcp_create_segment+0x94>
  seg->flags = optflags;
 801b4e0:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801b4e4:	2300      	movs	r3, #0
 801b4e6:	6003      	str	r3, [r0, #0]
  seg->p = p;
 801b4e8:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b4ea:	8933      	ldrh	r3, [r6, #8]
 801b4ec:	fa1f fa85 	uxth.w	sl, r5
 801b4f0:	4553      	cmp	r3, sl
 801b4f2:	d331      	bcc.n	801b558 <tcp_create_segment+0x9c>
  seg->len = p->tot_len - optlen;
 801b4f4:	8933      	ldrh	r3, [r6, #8]
 801b4f6:	eba3 030a 	sub.w	r3, r3, sl
 801b4fa:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 801b4fc:	2114      	movs	r1, #20
 801b4fe:	4630      	mov	r0, r6
 801b500:	f7fd f814 	bl	801852c <pbuf_header>
 801b504:	bb78      	cbnz	r0, 801b566 <tcp_create_segment+0xaa>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801b506:	6863      	ldr	r3, [r4, #4]
 801b508:	685e      	ldr	r6, [r3, #4]
 801b50a:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801b50c:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 801b510:	f7fa ff33 	bl	801637a <lwip_htons>
 801b514:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801b516:	68e6      	ldr	r6, [r4, #12]
 801b518:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 801b51c:	f7fa ff2d 	bl	801637a <lwip_htons>
 801b520:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801b522:	68e6      	ldr	r6, [r4, #12]
 801b524:	4648      	mov	r0, r9
 801b526:	f7fa ff2b 	bl	8016380 <lwip_htonl>
 801b52a:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801b52c:	68e6      	ldr	r6, [r4, #12]
 801b52e:	08a8      	lsrs	r0, r5, #2
 801b530:	3005      	adds	r0, #5
 801b532:	0300      	lsls	r0, r0, #12
 801b534:	b280      	uxth	r0, r0
 801b536:	4338      	orrs	r0, r7
 801b538:	f7fa ff1f 	bl	801637a <lwip_htons>
 801b53c:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 801b53e:	68e3      	ldr	r3, [r4, #12]
 801b540:	2200      	movs	r2, #0
 801b542:	749a      	strb	r2, [r3, #18]
 801b544:	74da      	strb	r2, [r3, #19]
}
 801b546:	4620      	mov	r0, r4
 801b548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b54c:	2500      	movs	r5, #0
 801b54e:	e7c1      	b.n	801b4d4 <tcp_create_segment+0x18>
    pbuf_free(p);
 801b550:	4630      	mov	r0, r6
 801b552:	f7fc fff5 	bl	8018540 <pbuf_free>
    return NULL;
 801b556:	e7f6      	b.n	801b546 <tcp_create_segment+0x8a>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b558:	4b05      	ldr	r3, [pc, #20]	; (801b570 <tcp_create_segment+0xb4>)
 801b55a:	22ba      	movs	r2, #186	; 0xba
 801b55c:	4905      	ldr	r1, [pc, #20]	; (801b574 <tcp_create_segment+0xb8>)
 801b55e:	4806      	ldr	r0, [pc, #24]	; (801b578 <tcp_create_segment+0xbc>)
 801b560:	f004 fac5 	bl	801faee <iprintf>
 801b564:	e7c6      	b.n	801b4f4 <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 801b566:	4620      	mov	r0, r4
 801b568:	f7fd fcce 	bl	8018f08 <tcp_seg_free>
    return NULL;
 801b56c:	2400      	movs	r4, #0
 801b56e:	e7ea      	b.n	801b546 <tcp_create_segment+0x8a>
 801b570:	08026c70 	.word	0x08026c70
 801b574:	080268f8 	.word	0x080268f8
 801b578:	080214f0 	.word	0x080214f0

0801b57c <tcp_output_alloc_header>:
{
 801b57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b580:	4606      	mov	r6, r0
 801b582:	460c      	mov	r4, r1
 801b584:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b586:	4411      	add	r1, r2
 801b588:	b289      	uxth	r1, r1
 801b58a:	3114      	adds	r1, #20
 801b58c:	2200      	movs	r2, #0
 801b58e:	b289      	uxth	r1, r1
 801b590:	2001      	movs	r0, #1
 801b592:	f7fd f841 	bl	8018618 <pbuf_alloc>
  if (p != NULL) {
 801b596:	4607      	mov	r7, r0
 801b598:	b348      	cbz	r0, 801b5ee <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b59a:	8942      	ldrh	r2, [r0, #10]
 801b59c:	f104 0314 	add.w	r3, r4, #20
 801b5a0:	429a      	cmp	r2, r3
 801b5a2:	db27      	blt.n	801b5f4 <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 801b5a4:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 801b5a6:	8af0      	ldrh	r0, [r6, #22]
 801b5a8:	f7fa fee7 	bl	801637a <lwip_htons>
 801b5ac:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801b5ae:	8b30      	ldrh	r0, [r6, #24]
 801b5b0:	f7fa fee3 	bl	801637a <lwip_htons>
 801b5b4:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 801b5b6:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b5ba:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801b5bc:	f7fa fee0 	bl	8016380 <lwip_htonl>
 801b5c0:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801b5c2:	08a0      	lsrs	r0, r4, #2
 801b5c4:	3005      	adds	r0, #5
 801b5c6:	0300      	lsls	r0, r0, #12
 801b5c8:	b280      	uxth	r0, r0
 801b5ca:	f040 0010 	orr.w	r0, r0, #16
 801b5ce:	f7fa fed4 	bl	801637a <lwip_htons>
 801b5d2:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b5d4:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 801b5d6:	f7fa fed0 	bl	801637a <lwip_htons>
 801b5da:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 801b5dc:	2300      	movs	r3, #0
 801b5de:	742b      	strb	r3, [r5, #16]
 801b5e0:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 801b5e2:	74ab      	strb	r3, [r5, #18]
 801b5e4:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b5e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b5e8:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
 801b5ea:	4413      	add	r3, r2
 801b5ec:	62f3      	str	r3, [r6, #44]	; 0x2c
}
 801b5ee:	4638      	mov	r0, r7
 801b5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b5f4:	4b03      	ldr	r3, [pc, #12]	; (801b604 <tcp_output_alloc_header+0x88>)
 801b5f6:	2273      	movs	r2, #115	; 0x73
 801b5f8:	4903      	ldr	r1, [pc, #12]	; (801b608 <tcp_output_alloc_header+0x8c>)
 801b5fa:	4804      	ldr	r0, [pc, #16]	; (801b60c <tcp_output_alloc_header+0x90>)
 801b5fc:	f004 fa77 	bl	801faee <iprintf>
 801b600:	e7d0      	b.n	801b5a4 <tcp_output_alloc_header+0x28>
 801b602:	bf00      	nop
 801b604:	08026c70 	.word	0x08026c70
 801b608:	08026a50 	.word	0x08026a50
 801b60c:	080214f0 	.word	0x080214f0

0801b610 <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801b610:	6843      	ldr	r3, [r0, #4]
 801b612:	89db      	ldrh	r3, [r3, #14]
 801b614:	2b01      	cmp	r3, #1
 801b616:	d001      	beq.n	801b61c <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801b618:	2000      	movs	r0, #0
 801b61a:	4770      	bx	lr
{
 801b61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b61e:	b085      	sub	sp, #20
 801b620:	4616      	mov	r6, r2
 801b622:	460d      	mov	r5, r1
 801b624:	4604      	mov	r4, r0
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b626:	68c7      	ldr	r7, [r0, #12]
 801b628:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801b62a:	f7fa fea9 	bl	8016380 <lwip_htonl>
 801b62e:	60b8      	str	r0, [r7, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b630:	68e7      	ldr	r7, [r4, #12]
 801b632:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 801b634:	f7fa fea1 	bl	801637a <lwip_htons>
 801b638:	81f8      	strh	r0, [r7, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b63a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b63c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 801b63e:	4413      	add	r3, r2
 801b640:	62eb      	str	r3, [r5, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b642:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b644:	7aa3      	ldrb	r3, [r4, #10]
 801b646:	f013 0f01 	tst.w	r3, #1
 801b64a:	d126      	bne.n	801b69a <tcp_output_segment+0x8a>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b64c:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 801b650:	2b00      	cmp	r3, #0
 801b652:	db2d      	blt.n	801b6b0 <tcp_output_segment+0xa0>
    pcb->rtime = 0;
  }

  if (pcb->rttest == 0) {
 801b654:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b656:	2b00      	cmp	r3, #0
 801b658:	d02d      	beq.n	801b6b6 <tcp_output_segment+0xa6>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b65a:	68e3      	ldr	r3, [r4, #12]
 801b65c:	6862      	ldr	r2, [r4, #4]
 801b65e:	6851      	ldr	r1, [r2, #4]
 801b660:	1a5b      	subs	r3, r3, r1
 801b662:	b29b      	uxth	r3, r3
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b664:	8951      	ldrh	r1, [r2, #10]
 801b666:	1ac9      	subs	r1, r1, r3
 801b668:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 801b66a:	6861      	ldr	r1, [r4, #4]
 801b66c:	890a      	ldrh	r2, [r1, #8]
 801b66e:	1ad3      	subs	r3, r2, r3
 801b670:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
 801b672:	6863      	ldr	r3, [r4, #4]
 801b674:	68e2      	ldr	r2, [r4, #12]
 801b676:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b678:	68e3      	ldr	r3, [r4, #12]
 801b67a:	2200      	movs	r2, #0
 801b67c:	741a      	strb	r2, [r3, #16]
 801b67e:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b680:	6860      	ldr	r0, [r4, #4]
 801b682:	7aab      	ldrb	r3, [r5, #10]
 801b684:	7a6a      	ldrb	r2, [r5, #9]
 801b686:	9602      	str	r6, [sp, #8]
 801b688:	2106      	movs	r1, #6
 801b68a:	9101      	str	r1, [sp, #4]
 801b68c:	9200      	str	r2, [sp, #0]
 801b68e:	1d2a      	adds	r2, r5, #4
 801b690:	4629      	mov	r1, r5
 801b692:	f7fb fdb7 	bl	8017204 <ip4_output_if>
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 801b696:	b005      	add	sp, #20
 801b698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801b69a:	1d29      	adds	r1, r5, #4
 801b69c:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 801b6a0:	f7fe fa3a 	bl	8019b18 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b6a4:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801b6a8:	f7fa fe6a 	bl	8016380 <lwip_htonl>
 801b6ac:	6178      	str	r0, [r7, #20]
 801b6ae:	e7cd      	b.n	801b64c <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 801b6b0:	2300      	movs	r3, #0
 801b6b2:	862b      	strh	r3, [r5, #48]	; 0x30
 801b6b4:	e7ce      	b.n	801b654 <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 801b6b6:	4b04      	ldr	r3, [pc, #16]	; (801b6c8 <tcp_output_segment+0xb8>)
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b6bc:	68e3      	ldr	r3, [r4, #12]
 801b6be:	6858      	ldr	r0, [r3, #4]
 801b6c0:	f7fa fe5e 	bl	8016380 <lwip_htonl>
 801b6c4:	63a8      	str	r0, [r5, #56]	; 0x38
 801b6c6:	e7c8      	b.n	801b65a <tcp_output_segment+0x4a>
 801b6c8:	20015cc8 	.word	0x20015cc8

0801b6cc <tcp_write>:
{
 801b6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d0:	b091      	sub	sp, #68	; 0x44
 801b6d2:	4681      	mov	r9, r0
 801b6d4:	9108      	str	r1, [sp, #32]
 801b6d6:	4692      	mov	sl, r2
 801b6d8:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 801b6da:	2300      	movs	r3, #0
 801b6dc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801b6e0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 801b6e4:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801b6e6:	9205      	str	r2, [sp, #20]
 801b6e8:	085b      	lsrs	r3, r3, #1
 801b6ea:	4293      	cmp	r3, r2
 801b6ec:	bf28      	it	cs
 801b6ee:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 801b6f0:	b103      	cbz	r3, 801b6f4 <tcp_write+0x28>
 801b6f2:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b6f4:	9b08      	ldr	r3, [sp, #32]
 801b6f6:	b1cb      	cbz	r3, 801b72c <tcp_write+0x60>
  err = tcp_write_checks(pcb, len);
 801b6f8:	4651      	mov	r1, sl
 801b6fa:	4648      	mov	r0, r9
 801b6fc:	f7ff fe4c 	bl	801b398 <tcp_write_checks>
  if (err != ERR_OK) {
 801b700:	9009      	str	r0, [sp, #36]	; 0x24
 801b702:	2800      	cmp	r0, #0
 801b704:	f040 81b2 	bne.w	801ba6c <tcp_write+0x3a0>
  queuelen = pcb->snd_queuelen;
 801b708:	f8b9 6062 	ldrh.w	r6, [r9, #98]	; 0x62
  if (pcb->unsent != NULL) {
 801b70c:	f8d9 b068 	ldr.w	fp, [r9, #104]	; 0x68
 801b710:	f1bb 0f00 	cmp.w	fp, #0
 801b714:	d116      	bne.n	801b744 <tcp_write+0x78>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b716:	f8b9 4064 	ldrh.w	r4, [r9, #100]	; 0x64
 801b71a:	2c00      	cmp	r4, #0
 801b71c:	f040 80d8 	bne.w	801b8d0 <tcp_write+0x204>
  u16_t extendlen = 0;
 801b720:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 801b722:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b724:	46d8      	mov	r8, fp
  struct pbuf *concat_p = NULL;
 801b726:	2300      	movs	r3, #0
 801b728:	930c      	str	r3, [sp, #48]	; 0x30
 801b72a:	e0e3      	b.n	801b8f4 <tcp_write+0x228>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b72c:	4bb1      	ldr	r3, [pc, #708]	; (801b9f4 <tcp_write+0x328>)
 801b72e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801b732:	49b1      	ldr	r1, [pc, #708]	; (801b9f8 <tcp_write+0x32c>)
 801b734:	48b1      	ldr	r0, [pc, #708]	; (801b9fc <tcp_write+0x330>)
 801b736:	f004 f9da 	bl	801faee <iprintf>
 801b73a:	f06f 030f 	mvn.w	r3, #15
 801b73e:	9309      	str	r3, [sp, #36]	; 0x24
 801b740:	e194      	b.n	801ba6c <tcp_write+0x3a0>
         last_unsent = last_unsent->next);
 801b742:	46bb      	mov	fp, r7
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b744:	f8db 7000 	ldr.w	r7, [fp]
 801b748:	2f00      	cmp	r7, #0
 801b74a:	d1fa      	bne.n	801b742 <tcp_write+0x76>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801b74c:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b750:	f013 0f01 	tst.w	r3, #1
 801b754:	d051      	beq.n	801b7fa <tcp_write+0x12e>
 801b756:	2404      	movs	r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b758:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b75c:	4423      	add	r3, r4
 801b75e:	9a05      	ldr	r2, [sp, #20]
 801b760:	429a      	cmp	r2, r3
 801b762:	db4c      	blt.n	801b7fe <tcp_write+0x132>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801b764:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b768:	441c      	add	r4, r3
 801b76a:	b2a4      	uxth	r4, r4
 801b76c:	9b05      	ldr	r3, [sp, #20]
 801b76e:	1b1c      	subs	r4, r3, r4
 801b770:	b2a3      	uxth	r3, r4
 801b772:	461a      	mov	r2, r3
 801b774:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 801b776:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801b77a:	930a      	str	r3, [sp, #40]	; 0x28
 801b77c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801b780:	2b00      	cmp	r3, #0
 801b782:	d04e      	beq.n	801b822 <tcp_write+0x156>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b784:	429a      	cmp	r2, r3
 801b786:	d342      	bcc.n	801b80e <tcp_write+0x142>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b788:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b78c:	459a      	cmp	sl, r3
 801b78e:	d946      	bls.n	801b81e <tcp_write+0x152>
 801b790:	461a      	mov	r2, r3
 801b792:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b794:	4282      	cmp	r2, r0
 801b796:	bfa8      	it	ge
 801b798:	4602      	movge	r2, r0
 801b79a:	b292      	uxth	r2, r2
 801b79c:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801b79e:	1a9b      	subs	r3, r3, r2
 801b7a0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 801b7a4:	1a83      	subs	r3, r0, r2
 801b7a6:	b29b      	uxth	r3, r3
 801b7a8:	930b      	str	r3, [sp, #44]	; 0x2c
      seg = last_unsent;
 801b7aa:	46d8      	mov	r8, fp
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801b7ac:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b7b0:	b14b      	cbz	r3, 801b7c6 <tcp_write+0xfa>
 801b7b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7b4:	4553      	cmp	r3, sl
 801b7b6:	d006      	beq.n	801b7c6 <tcp_write+0xfa>
 801b7b8:	4b8e      	ldr	r3, [pc, #568]	; (801b9f4 <tcp_write+0x328>)
 801b7ba:	f240 12e1 	movw	r2, #481	; 0x1e1
 801b7be:	4990      	ldr	r1, [pc, #576]	; (801ba00 <tcp_write+0x334>)
 801b7c0:	488e      	ldr	r0, [pc, #568]	; (801b9fc <tcp_write+0x330>)
 801b7c2:	f004 f994 	bl	801faee <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801b7c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b7c8:	4552      	cmp	r2, sl
 801b7ca:	f080 808f 	bcs.w	801b8ec <tcp_write+0x220>
 801b7ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b7d0:	2900      	cmp	r1, #0
 801b7d2:	f000 8094 	beq.w	801b8fe <tcp_write+0x232>
 801b7d6:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	f000 8093 	beq.w	801b906 <tcp_write+0x23a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801b7e0:	ebaa 0502 	sub.w	r5, sl, r2
 801b7e4:	428d      	cmp	r5, r1
 801b7e6:	bfa8      	it	ge
 801b7e8:	460d      	movge	r5, r1
 801b7ea:	b2ac      	uxth	r4, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b7ec:	9b06      	ldr	r3, [sp, #24]
 801b7ee:	f013 0f01 	tst.w	r3, #1
 801b7f2:	d118      	bne.n	801b826 <tcp_write+0x15a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b7f4:	f8db 3004 	ldr.w	r3, [fp, #4]
 801b7f8:	e038      	b.n	801b86c <tcp_write+0x1a0>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801b7fa:	2400      	movs	r4, #0
 801b7fc:	e7ac      	b.n	801b758 <tcp_write+0x8c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b7fe:	4b7d      	ldr	r3, [pc, #500]	; (801b9f4 <tcp_write+0x328>)
 801b800:	f240 12c7 	movw	r2, #455	; 0x1c7
 801b804:	497f      	ldr	r1, [pc, #508]	; (801ba04 <tcp_write+0x338>)
 801b806:	487d      	ldr	r0, [pc, #500]	; (801b9fc <tcp_write+0x330>)
 801b808:	f004 f971 	bl	801faee <iprintf>
 801b80c:	e7aa      	b.n	801b764 <tcp_write+0x98>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b80e:	4b79      	ldr	r3, [pc, #484]	; (801b9f4 <tcp_write+0x328>)
 801b810:	f240 12d9 	movw	r2, #473	; 0x1d9
 801b814:	497c      	ldr	r1, [pc, #496]	; (801ba08 <tcp_write+0x33c>)
 801b816:	4879      	ldr	r0, [pc, #484]	; (801b9fc <tcp_write+0x330>)
 801b818:	f004 f969 	bl	801faee <iprintf>
 801b81c:	e7b4      	b.n	801b788 <tcp_write+0xbc>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b81e:	4652      	mov	r2, sl
 801b820:	e7b7      	b.n	801b792 <tcp_write+0xc6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b822:	46b8      	mov	r8, r7
 801b824:	e7c2      	b.n	801b7ac <tcp_write+0xe0>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801b826:	2301      	movs	r3, #1
 801b828:	9302      	str	r3, [sp, #8]
 801b82a:	9b06      	ldr	r3, [sp, #24]
 801b82c:	9301      	str	r3, [sp, #4]
 801b82e:	f8cd 9000 	str.w	r9, [sp]
 801b832:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801b836:	460a      	mov	r2, r1
 801b838:	4621      	mov	r1, r4
 801b83a:	2004      	movs	r0, #4
 801b83c:	f7ff fdfe 	bl	801b43c <tcp_pbuf_prealloc>
 801b840:	4603      	mov	r3, r0
 801b842:	900c      	str	r0, [sp, #48]	; 0x30
 801b844:	2800      	cmp	r0, #0
 801b846:	f000 80f0 	beq.w	801ba2a <tcp_write+0x35e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801b84a:	4622      	mov	r2, r4
 801b84c:	9908      	ldr	r1, [sp, #32]
 801b84e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b850:	4401      	add	r1, r0
 801b852:	461d      	mov	r5, r3
 801b854:	6858      	ldr	r0, [r3, #4]
 801b856:	f005 f84e 	bl	80208f6 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801b85a:	4628      	mov	r0, r5
 801b85c:	f7fd f836 	bl	80188cc <pbuf_clen>
 801b860:	4406      	add	r6, r0
 801b862:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801b864:	2300      	movs	r3, #0
 801b866:	930b      	str	r3, [sp, #44]	; 0x2c
 801b868:	e01a      	b.n	801b8a0 <tcp_write+0x1d4>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b86a:	4613      	mov	r3, r2
 801b86c:	681a      	ldr	r2, [r3, #0]
 801b86e:	2a00      	cmp	r2, #0
 801b870:	d1fb      	bne.n	801b86a <tcp_write+0x19e>
 801b872:	920c      	str	r2, [sp, #48]	; 0x30
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b874:	7b1a      	ldrb	r2, [r3, #12]
 801b876:	2a01      	cmp	r2, #1
 801b878:	d017      	beq.n	801b8aa <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801b87a:	2201      	movs	r2, #1
 801b87c:	4621      	mov	r1, r4
 801b87e:	2004      	movs	r0, #4
 801b880:	f7fc feca 	bl	8018618 <pbuf_alloc>
 801b884:	900c      	str	r0, [sp, #48]	; 0x30
 801b886:	2800      	cmp	r0, #0
 801b888:	f000 80cf 	beq.w	801ba2a <tcp_write+0x35e>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801b88c:	9b08      	ldr	r3, [sp, #32]
 801b88e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b890:	440b      	add	r3, r1
 801b892:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801b894:	f7fd f81a 	bl	80188cc <pbuf_clen>
 801b898:	4406      	add	r6, r0
 801b89a:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801b89c:	2300      	movs	r3, #0
 801b89e:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 801b8a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8a2:	441c      	add	r4, r3
 801b8a4:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 801b8a6:	46d8      	mov	r8, fp
 801b8a8:	e024      	b.n	801b8f4 <tcp_write+0x228>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b8aa:	685a      	ldr	r2, [r3, #4]
 801b8ac:	895b      	ldrh	r3, [r3, #10]
 801b8ae:	4413      	add	r3, r2
 801b8b0:	9a08      	ldr	r2, [sp, #32]
 801b8b2:	429a      	cmp	r2, r3
 801b8b4:	d1e1      	bne.n	801b87a <tcp_write+0x1ae>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8b8:	b90b      	cbnz	r3, 801b8be <tcp_write+0x1f2>
          extendlen = seglen;
 801b8ba:	940b      	str	r4, [sp, #44]	; 0x2c
 801b8bc:	e7f0      	b.n	801b8a0 <tcp_write+0x1d4>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b8be:	4b4d      	ldr	r3, [pc, #308]	; (801b9f4 <tcp_write+0x328>)
 801b8c0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801b8c4:	4951      	ldr	r1, [pc, #324]	; (801ba0c <tcp_write+0x340>)
 801b8c6:	484d      	ldr	r0, [pc, #308]	; (801b9fc <tcp_write+0x330>)
 801b8c8:	f004 f911 	bl	801faee <iprintf>
          extendlen = seglen;
 801b8cc:	940b      	str	r4, [sp, #44]	; 0x2c
 801b8ce:	e7e7      	b.n	801b8a0 <tcp_write+0x1d4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b8d0:	4b48      	ldr	r3, [pc, #288]	; (801b9f4 <tcp_write+0x328>)
 801b8d2:	f240 2225 	movw	r2, #549	; 0x225
 801b8d6:	494e      	ldr	r1, [pc, #312]	; (801ba10 <tcp_write+0x344>)
 801b8d8:	4848      	ldr	r0, [pc, #288]	; (801b9fc <tcp_write+0x330>)
 801b8da:	f004 f908 	bl	801faee <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b8de:	46d8      	mov	r8, fp
  u16_t extendlen = 0;
 801b8e0:	2300      	movs	r3, #0
 801b8e2:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 801b8e4:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
 801b8e6:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 801b8e8:	930c      	str	r3, [sp, #48]	; 0x30
 801b8ea:	e003      	b.n	801b8f4 <tcp_write+0x228>
 801b8ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  u16_t extendlen = 0;
 801b8ee:	2300      	movs	r3, #0
 801b8f0:	930b      	str	r3, [sp, #44]	; 0x2c
  struct pbuf *concat_p = NULL;
 801b8f2:	930c      	str	r3, [sp, #48]	; 0x30
      queue = seg;
 801b8f4:	2700      	movs	r7, #0
 801b8f6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 801b8fa:	46bb      	mov	fp, r7
 801b8fc:	e060      	b.n	801b9c0 <tcp_write+0x2f4>
 801b8fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 801b900:	2300      	movs	r3, #0
 801b902:	930c      	str	r3, [sp, #48]	; 0x30
 801b904:	e7f6      	b.n	801b8f4 <tcp_write+0x228>
  u16_t extendlen = 0;
 801b906:	930b      	str	r3, [sp, #44]	; 0x2c
 801b908:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 801b90a:	2300      	movs	r3, #0
 801b90c:	930c      	str	r3, [sp, #48]	; 0x30
 801b90e:	e7f1      	b.n	801b8f4 <tcp_write+0x228>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801b910:	fab7 f387 	clz	r3, r7
 801b914:	095b      	lsrs	r3, r3, #5
 801b916:	9302      	str	r3, [sp, #8]
 801b918:	9b06      	ldr	r3, [sp, #24]
 801b91a:	9301      	str	r3, [sp, #4]
 801b91c:	f8cd 9000 	str.w	r9, [sp]
 801b920:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801b924:	9a05      	ldr	r2, [sp, #20]
 801b926:	4629      	mov	r1, r5
 801b928:	2000      	movs	r0, #0
 801b92a:	f7ff fd87 	bl	801b43c <tcp_pbuf_prealloc>
 801b92e:	4680      	mov	r8, r0
 801b930:	2800      	cmp	r0, #0
 801b932:	d07a      	beq.n	801ba2a <tcp_write+0x35e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b934:	8943      	ldrh	r3, [r0, #10]
 801b936:	429d      	cmp	r5, r3
 801b938:	d807      	bhi.n	801b94a <tcp_write+0x27e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 801b93a:	462a      	mov	r2, r5
 801b93c:	9b08      	ldr	r3, [sp, #32]
 801b93e:	1919      	adds	r1, r3, r4
 801b940:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b944:	f004 ffd7 	bl	80208f6 <memcpy>
 801b948:	e01d      	b.n	801b986 <tcp_write+0x2ba>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b94a:	4b2a      	ldr	r3, [pc, #168]	; (801b9f4 <tcp_write+0x328>)
 801b94c:	f240 2241 	movw	r2, #577	; 0x241
 801b950:	4930      	ldr	r1, [pc, #192]	; (801ba14 <tcp_write+0x348>)
 801b952:	482a      	ldr	r0, [pc, #168]	; (801b9fc <tcp_write+0x330>)
 801b954:	f004 f8cb 	bl	801faee <iprintf>
 801b958:	e7ef      	b.n	801b93a <tcp_write+0x26e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801b95a:	2201      	movs	r2, #1
 801b95c:	4629      	mov	r1, r5
 801b95e:	2000      	movs	r0, #0
 801b960:	f7fc fe5a 	bl	8018618 <pbuf_alloc>
 801b964:	9007      	str	r0, [sp, #28]
 801b966:	2800      	cmp	r0, #0
 801b968:	d05f      	beq.n	801ba2a <tcp_write+0x35e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801b96a:	9b08      	ldr	r3, [sp, #32]
 801b96c:	4423      	add	r3, r4
 801b96e:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b970:	2200      	movs	r2, #0
 801b972:	4611      	mov	r1, r2
 801b974:	4610      	mov	r0, r2
 801b976:	f7fc fe4f 	bl	8018618 <pbuf_alloc>
 801b97a:	4680      	mov	r8, r0
 801b97c:	2800      	cmp	r0, #0
 801b97e:	d04d      	beq.n	801ba1c <tcp_write+0x350>
      pbuf_cat(p/*header*/, p2/*data*/);
 801b980:	9907      	ldr	r1, [sp, #28]
 801b982:	f7fc ffc9 	bl	8018918 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801b986:	4640      	mov	r0, r8
 801b988:	f7fc ffa0 	bl	80188cc <pbuf_clen>
 801b98c:	4406      	add	r6, r0
 801b98e:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801b990:	2e0b      	cmp	r6, #11
 801b992:	d847      	bhi.n	801ba24 <tcp_write+0x358>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801b994:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 801b998:	2200      	movs	r2, #0
 801b99a:	9200      	str	r2, [sp, #0]
 801b99c:	4423      	add	r3, r4
 801b99e:	4641      	mov	r1, r8
 801b9a0:	4648      	mov	r0, r9
 801b9a2:	f7ff fd8b 	bl	801b4bc <tcp_create_segment>
 801b9a6:	4680      	mov	r8, r0
 801b9a8:	2800      	cmp	r0, #0
 801b9aa:	d03e      	beq.n	801ba2a <tcp_write+0x35e>
    if (queue == NULL) {
 801b9ac:	2f00      	cmp	r7, #0
 801b9ae:	d069      	beq.n	801ba84 <tcp_write+0x3b8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801b9b0:	f1bb 0f00 	cmp.w	fp, #0
 801b9b4:	d05e      	beq.n	801ba74 <tcp_write+0x3a8>
      prev_seg->next = seg;
 801b9b6:	f8cb 8000 	str.w	r8, [fp]
    pos += seglen;
 801b9ba:	442c      	add	r4, r5
 801b9bc:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 801b9be:	46c3      	mov	fp, r8
  while (pos < len) {
 801b9c0:	4554      	cmp	r4, sl
 801b9c2:	d261      	bcs.n	801ba88 <tcp_write+0x3bc>
    u16_t left = len - pos;
 801b9c4:	ebaa 0504 	sub.w	r5, sl, r4
 801b9c8:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 801b9ca:	9b05      	ldr	r3, [sp, #20]
 801b9cc:	429d      	cmp	r5, r3
 801b9ce:	bf28      	it	cs
 801b9d0:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b9d2:	9b06      	ldr	r3, [sp, #24]
 801b9d4:	f013 0f01 	tst.w	r3, #1
 801b9d8:	d19a      	bne.n	801b910 <tcp_write+0x244>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801b9da:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d0bb      	beq.n	801b95a <tcp_write+0x28e>
 801b9e2:	4b04      	ldr	r3, [pc, #16]	; (801b9f4 <tcp_write+0x328>)
 801b9e4:	f240 224b 	movw	r2, #587	; 0x24b
 801b9e8:	490b      	ldr	r1, [pc, #44]	; (801ba18 <tcp_write+0x34c>)
 801b9ea:	4804      	ldr	r0, [pc, #16]	; (801b9fc <tcp_write+0x330>)
 801b9ec:	f004 f87f 	bl	801faee <iprintf>
 801b9f0:	e7b3      	b.n	801b95a <tcp_write+0x28e>
 801b9f2:	bf00      	nop
 801b9f4:	08026c70 	.word	0x08026c70
 801b9f8:	08026a94 	.word	0x08026a94
 801b9fc:	080214f0 	.word	0x080214f0
 801ba00:	08026b00 	.word	0x08026b00
 801ba04:	08026ac8 	.word	0x08026ac8
 801ba08:	08026ae0 	.word	0x08026ae0
 801ba0c:	08026b20 	.word	0x08026b20
 801ba10:	08026b4c 	.word	0x08026b4c
 801ba14:	08026b7c 	.word	0x08026b7c
 801ba18:	08026bbc 	.word	0x08026bbc
        pbuf_free(p2);
 801ba1c:	9807      	ldr	r0, [sp, #28]
 801ba1e:	f7fc fd8f 	bl	8018540 <pbuf_free>
        goto memerr;
 801ba22:	e002      	b.n	801ba2a <tcp_write+0x35e>
      pbuf_free(p);
 801ba24:	4640      	mov	r0, r8
 801ba26:	f7fc fd8b 	bl	8018540 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 801ba2a:	f899 301a 	ldrb.w	r3, [r9, #26]
 801ba2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ba32:	f889 301a 	strb.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801ba36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba38:	b113      	cbz	r3, 801ba40 <tcp_write+0x374>
    pbuf_free(concat_p);
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	f7fc fd80 	bl	8018540 <pbuf_free>
  if (queue != NULL) {
 801ba40:	b117      	cbz	r7, 801ba48 <tcp_write+0x37c>
    tcp_segs_free(queue);
 801ba42:	4638      	mov	r0, r7
 801ba44:	f7fd fa6d 	bl	8018f22 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801ba48:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	f000 80c6 	beq.w	801bbde <tcp_write+0x512>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801ba52:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	f040 80c5 	bne.w	801bbe6 <tcp_write+0x51a>
 801ba5c:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	f000 80b1 	beq.w	801bbc8 <tcp_write+0x4fc>
  return ERR_MEM;
 801ba66:	f04f 33ff 	mov.w	r3, #4294967295
 801ba6a:	9309      	str	r3, [sp, #36]	; 0x24
}
 801ba6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba6e:	b011      	add	sp, #68	; 0x44
 801ba70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801ba74:	4b5e      	ldr	r3, [pc, #376]	; (801bbf0 <tcp_write+0x524>)
 801ba76:	f240 2285 	movw	r2, #645	; 0x285
 801ba7a:	495e      	ldr	r1, [pc, #376]	; (801bbf4 <tcp_write+0x528>)
 801ba7c:	485e      	ldr	r0, [pc, #376]	; (801bbf8 <tcp_write+0x52c>)
 801ba7e:	f004 f836 	bl	801faee <iprintf>
 801ba82:	e798      	b.n	801b9b6 <tcp_write+0x2ea>
      queue = seg;
 801ba84:	4607      	mov	r7, r0
 801ba86:	e798      	b.n	801b9ba <tcp_write+0x2ee>
 801ba88:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  if (oversize_used > 0) {
 801ba8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba8e:	b1e3      	cbz	r3, 801baca <tcp_write+0x3fe>
    for (p = last_unsent->p; p; p = p->next) {
 801ba90:	f8db 4004 	ldr.w	r4, [fp, #4]
 801ba94:	461d      	mov	r5, r3
 801ba96:	e000      	b.n	801ba9a <tcp_write+0x3ce>
 801ba98:	6824      	ldr	r4, [r4, #0]
 801ba9a:	b184      	cbz	r4, 801babe <tcp_write+0x3f2>
      p->tot_len += oversize_used;
 801ba9c:	8923      	ldrh	r3, [r4, #8]
 801ba9e:	442b      	add	r3, r5
 801baa0:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801baa2:	6823      	ldr	r3, [r4, #0]
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d1f7      	bne.n	801ba98 <tcp_write+0x3cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801baa8:	6860      	ldr	r0, [r4, #4]
 801baaa:	8963      	ldrh	r3, [r4, #10]
 801baac:	462a      	mov	r2, r5
 801baae:	9908      	ldr	r1, [sp, #32]
 801bab0:	4418      	add	r0, r3
 801bab2:	f004 ff20 	bl	80208f6 <memcpy>
        p->len += oversize_used;
 801bab6:	8963      	ldrh	r3, [r4, #10]
 801bab8:	442b      	add	r3, r5
 801baba:	8163      	strh	r3, [r4, #10]
 801babc:	e7ec      	b.n	801ba98 <tcp_write+0x3cc>
    last_unsent->len += oversize_used;
 801babe:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801bac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bac4:	441a      	add	r2, r3
 801bac6:	f8ab 2008 	strh.w	r2, [fp, #8]
  pcb->unsent_oversize = oversize;
 801baca:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801bace:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (concat_p != NULL) {
 801bad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	d03f      	beq.n	801bb58 <tcp_write+0x48c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801bad8:	f1bb 0f00 	cmp.w	fp, #0
 801badc:	d034      	beq.n	801bb48 <tcp_write+0x47c>
    pbuf_cat(last_unsent->p, concat_p);
 801bade:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bae0:	4621      	mov	r1, r4
 801bae2:	f8db 0004 	ldr.w	r0, [fp, #4]
 801bae6:	f7fc ff17 	bl	8018918 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801baea:	8923      	ldrh	r3, [r4, #8]
 801baec:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 801baf0:	4413      	add	r3, r2
 801baf2:	f8ab 3008 	strh.w	r3, [fp, #8]
  if (last_unsent == NULL) {
 801baf6:	f1bb 0f00 	cmp.w	fp, #0
 801bafa:	d056      	beq.n	801bbaa <tcp_write+0x4de>
    last_unsent->next = queue;
 801bafc:	f8cb 7000 	str.w	r7, [fp]
  pcb->snd_lbb += len;
 801bb00:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 801bb04:	4453      	add	r3, sl
 801bb06:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
  pcb->snd_buf -= len;
 801bb0a:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
 801bb0e:	eba3 0a0a 	sub.w	sl, r3, sl
 801bb12:	f8a9 a060 	strh.w	sl, [r9, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 801bb16:	f8a9 6062 	strh.w	r6, [r9, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 801bb1a:	b11e      	cbz	r6, 801bb24 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length",
 801bb1c:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d045      	beq.n	801bbb0 <tcp_write+0x4e4>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801bb24:	f1b8 0f00 	cmp.w	r8, #0
 801bb28:	d0a0      	beq.n	801ba6c <tcp_write+0x3a0>
 801bb2a:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801bb2e:	2c00      	cmp	r4, #0
 801bb30:	d09c      	beq.n	801ba6c <tcp_write+0x3a0>
 801bb32:	9b06      	ldr	r3, [sp, #24]
 801bb34:	f013 0f02 	tst.w	r3, #2
 801bb38:	d198      	bne.n	801ba6c <tcp_write+0x3a0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801bb3a:	89a5      	ldrh	r5, [r4, #12]
 801bb3c:	2008      	movs	r0, #8
 801bb3e:	f7fa fc1c 	bl	801637a <lwip_htons>
 801bb42:	4328      	orrs	r0, r5
 801bb44:	81a0      	strh	r0, [r4, #12]
 801bb46:	e791      	b.n	801ba6c <tcp_write+0x3a0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801bb48:	4b29      	ldr	r3, [pc, #164]	; (801bbf0 <tcp_write+0x524>)
 801bb4a:	f240 22bb 	movw	r2, #699	; 0x2bb
 801bb4e:	492b      	ldr	r1, [pc, #172]	; (801bbfc <tcp_write+0x530>)
 801bb50:	4829      	ldr	r0, [pc, #164]	; (801bbf8 <tcp_write+0x52c>)
 801bb52:	f003 ffcc 	bl	801faee <iprintf>
 801bb56:	e7c2      	b.n	801bade <tcp_write+0x412>
  } else if (extendlen > 0) {
 801bb58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d0cb      	beq.n	801baf6 <tcp_write+0x42a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801bb5e:	f1bb 0f00 	cmp.w	fp, #0
 801bb62:	d006      	beq.n	801bb72 <tcp_write+0x4a6>
 801bb64:	f8db 3004 	ldr.w	r3, [fp, #4]
 801bb68:	b11b      	cbz	r3, 801bb72 <tcp_write+0x4a6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801bb6a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801bb6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801bb70:	e00b      	b.n	801bb8a <tcp_write+0x4be>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801bb72:	4b1f      	ldr	r3, [pc, #124]	; (801bbf0 <tcp_write+0x524>)
 801bb74:	f240 22c1 	movw	r2, #705	; 0x2c1
 801bb78:	4921      	ldr	r1, [pc, #132]	; (801bc00 <tcp_write+0x534>)
 801bb7a:	481f      	ldr	r0, [pc, #124]	; (801bbf8 <tcp_write+0x52c>)
 801bb7c:	f003 ffb7 	bl	801faee <iprintf>
 801bb80:	e7f3      	b.n	801bb6a <tcp_write+0x49e>
      p->tot_len += extendlen;
 801bb82:	891a      	ldrh	r2, [r3, #8]
 801bb84:	4402      	add	r2, r0
 801bb86:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801bb88:	460b      	mov	r3, r1
 801bb8a:	6819      	ldr	r1, [r3, #0]
 801bb8c:	2900      	cmp	r1, #0
 801bb8e:	d1f8      	bne.n	801bb82 <tcp_write+0x4b6>
    p->tot_len += extendlen;
 801bb90:	891a      	ldrh	r2, [r3, #8]
 801bb92:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801bb94:	4402      	add	r2, r0
 801bb96:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801bb98:	895a      	ldrh	r2, [r3, #10]
 801bb9a:	4402      	add	r2, r0
 801bb9c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801bb9e:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801bba2:	4403      	add	r3, r0
 801bba4:	f8ab 3008 	strh.w	r3, [fp, #8]
 801bba8:	e7a5      	b.n	801baf6 <tcp_write+0x42a>
    pcb->unsent = queue;
 801bbaa:	f8c9 7068 	str.w	r7, [r9, #104]	; 0x68
 801bbae:	e7a7      	b.n	801bb00 <tcp_write+0x434>
    LWIP_ASSERT("tcp_write: valid queue length",
 801bbb0:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d1b5      	bne.n	801bb24 <tcp_write+0x458>
 801bbb8:	4b0d      	ldr	r3, [pc, #52]	; (801bbf0 <tcp_write+0x524>)
 801bbba:	f240 22ed 	movw	r2, #749	; 0x2ed
 801bbbe:	4911      	ldr	r1, [pc, #68]	; (801bc04 <tcp_write+0x538>)
 801bbc0:	480d      	ldr	r0, [pc, #52]	; (801bbf8 <tcp_write+0x52c>)
 801bbc2:	f003 ff94 	bl	801faee <iprintf>
 801bbc6:	e7ad      	b.n	801bb24 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801bbc8:	4b09      	ldr	r3, [pc, #36]	; (801bbf0 <tcp_write+0x524>)
 801bbca:	f240 3202 	movw	r2, #770	; 0x302
 801bbce:	490d      	ldr	r1, [pc, #52]	; (801bc04 <tcp_write+0x538>)
 801bbd0:	4809      	ldr	r0, [pc, #36]	; (801bbf8 <tcp_write+0x52c>)
 801bbd2:	f003 ff8c 	bl	801faee <iprintf>
  return ERR_MEM;
 801bbd6:	f04f 33ff 	mov.w	r3, #4294967295
 801bbda:	9309      	str	r3, [sp, #36]	; 0x24
 801bbdc:	e746      	b.n	801ba6c <tcp_write+0x3a0>
 801bbde:	f04f 33ff 	mov.w	r3, #4294967295
 801bbe2:	9309      	str	r3, [sp, #36]	; 0x24
 801bbe4:	e742      	b.n	801ba6c <tcp_write+0x3a0>
 801bbe6:	f04f 33ff 	mov.w	r3, #4294967295
 801bbea:	9309      	str	r3, [sp, #36]	; 0x24
 801bbec:	e73e      	b.n	801ba6c <tcp_write+0x3a0>
 801bbee:	bf00      	nop
 801bbf0:	08026c70 	.word	0x08026c70
 801bbf4:	08026bcc 	.word	0x08026bcc
 801bbf8:	080214f0 	.word	0x080214f0
 801bbfc:	08026be0 	.word	0x08026be0
 801bc00:	08026c18 	.word	0x08026c18
 801bc04:	08026c50 	.word	0x08026c50

0801bc08 <tcp_enqueue_flags>:
{
 801bc08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc0c:	b083      	sub	sp, #12
 801bc0e:	4604      	mov	r4, r0
 801bc10:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801bc12:	f011 0703 	ands.w	r7, r1, #3
 801bc16:	d030      	beq.n	801bc7a <tcp_enqueue_flags+0x72>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801bc18:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801bc1c:	2b0a      	cmp	r3, #10
 801bc1e:	d902      	bls.n	801bc26 <tcp_enqueue_flags+0x1e>
 801bc20:	f015 0f01 	tst.w	r5, #1
 801bc24:	d031      	beq.n	801bc8a <tcp_enqueue_flags+0x82>
  if (flags & TCP_SYN) {
 801bc26:	f015 0f02 	tst.w	r5, #2
 801bc2a:	d135      	bne.n	801bc98 <tcp_enqueue_flags+0x90>
  u8_t optflags = 0;
 801bc2c:	f04f 0900 	mov.w	r9, #0
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801bc30:	f1b9 0f00 	cmp.w	r9, #0
 801bc34:	d033      	beq.n	801bc9e <tcp_enqueue_flags+0x96>
 801bc36:	2604      	movs	r6, #4
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801bc38:	b2b6      	uxth	r6, r6
 801bc3a:	2200      	movs	r2, #0
 801bc3c:	4631      	mov	r1, r6
 801bc3e:	4610      	mov	r0, r2
 801bc40:	f7fc fcea 	bl	8018618 <pbuf_alloc>
 801bc44:	4680      	mov	r8, r0
 801bc46:	b360      	cbz	r0, 801bca2 <tcp_enqueue_flags+0x9a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801bc48:	8943      	ldrh	r3, [r0, #10]
 801bc4a:	429e      	cmp	r6, r3
 801bc4c:	d830      	bhi.n	801bcb0 <tcp_enqueue_flags+0xa8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801bc4e:	f8cd 9000 	str.w	r9, [sp]
 801bc52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bc54:	462a      	mov	r2, r5
 801bc56:	4641      	mov	r1, r8
 801bc58:	4620      	mov	r0, r4
 801bc5a:	f7ff fc2f 	bl	801b4bc <tcp_create_segment>
 801bc5e:	4606      	mov	r6, r0
 801bc60:	b370      	cbz	r0, 801bcc0 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801bc62:	68c3      	ldr	r3, [r0, #12]
 801bc64:	f013 0f03 	tst.w	r3, #3
 801bc68:	d131      	bne.n	801bcce <tcp_enqueue_flags+0xc6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801bc6a:	8933      	ldrh	r3, [r6, #8]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	d136      	bne.n	801bcde <tcp_enqueue_flags+0xd6>
  if (pcb->unsent == NULL) {
 801bc70:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 801bc72:	2a00      	cmp	r2, #0
 801bc74:	d13c      	bne.n	801bcf0 <tcp_enqueue_flags+0xe8>
    pcb->unsent = seg;
 801bc76:	66a6      	str	r6, [r4, #104]	; 0x68
 801bc78:	e03e      	b.n	801bcf8 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801bc7a:	4b36      	ldr	r3, [pc, #216]	; (801bd54 <tcp_enqueue_flags+0x14c>)
 801bc7c:	f240 321b 	movw	r2, #795	; 0x31b
 801bc80:	4935      	ldr	r1, [pc, #212]	; (801bd58 <tcp_enqueue_flags+0x150>)
 801bc82:	4836      	ldr	r0, [pc, #216]	; (801bd5c <tcp_enqueue_flags+0x154>)
 801bc84:	f003 ff33 	bl	801faee <iprintf>
 801bc88:	e7c6      	b.n	801bc18 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 801bc8a:	7ea3      	ldrb	r3, [r4, #26]
 801bc8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801bc90:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801bc92:	f04f 30ff 	mov.w	r0, #4294967295
 801bc96:	e04a      	b.n	801bd2e <tcp_enqueue_flags+0x126>
    optflags = TF_SEG_OPTS_MSS;
 801bc98:	f04f 0901 	mov.w	r9, #1
 801bc9c:	e7c8      	b.n	801bc30 <tcp_enqueue_flags+0x28>
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801bc9e:	2600      	movs	r6, #0
 801bca0:	e7ca      	b.n	801bc38 <tcp_enqueue_flags+0x30>
    pcb->flags |= TF_NAGLEMEMERR;
 801bca2:	7ea3      	ldrb	r3, [r4, #26]
 801bca4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801bca8:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801bcaa:	f04f 30ff 	mov.w	r0, #4294967295
 801bcae:	e03e      	b.n	801bd2e <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801bcb0:	4b28      	ldr	r3, [pc, #160]	; (801bd54 <tcp_enqueue_flags+0x14c>)
 801bcb2:	f240 3241 	movw	r2, #833	; 0x341
 801bcb6:	492a      	ldr	r1, [pc, #168]	; (801bd60 <tcp_enqueue_flags+0x158>)
 801bcb8:	4828      	ldr	r0, [pc, #160]	; (801bd5c <tcp_enqueue_flags+0x154>)
 801bcba:	f003 ff18 	bl	801faee <iprintf>
 801bcbe:	e7c6      	b.n	801bc4e <tcp_enqueue_flags+0x46>
    pcb->flags |= TF_NAGLEMEMERR;
 801bcc0:	7ea3      	ldrb	r3, [r4, #26]
 801bcc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801bcc6:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801bcc8:	f04f 30ff 	mov.w	r0, #4294967295
 801bccc:	e02f      	b.n	801bd2e <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801bcce:	4b21      	ldr	r3, [pc, #132]	; (801bd54 <tcp_enqueue_flags+0x14c>)
 801bcd0:	f240 3249 	movw	r2, #841	; 0x349
 801bcd4:	4923      	ldr	r1, [pc, #140]	; (801bd64 <tcp_enqueue_flags+0x15c>)
 801bcd6:	4821      	ldr	r0, [pc, #132]	; (801bd5c <tcp_enqueue_flags+0x154>)
 801bcd8:	f003 ff09 	bl	801faee <iprintf>
 801bcdc:	e7c5      	b.n	801bc6a <tcp_enqueue_flags+0x62>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801bcde:	4b1d      	ldr	r3, [pc, #116]	; (801bd54 <tcp_enqueue_flags+0x14c>)
 801bce0:	f240 324a 	movw	r2, #842	; 0x34a
 801bce4:	4920      	ldr	r1, [pc, #128]	; (801bd68 <tcp_enqueue_flags+0x160>)
 801bce6:	481d      	ldr	r0, [pc, #116]	; (801bd5c <tcp_enqueue_flags+0x154>)
 801bce8:	f003 ff01 	bl	801faee <iprintf>
 801bcec:	e7c0      	b.n	801bc70 <tcp_enqueue_flags+0x68>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801bcee:	461a      	mov	r2, r3
 801bcf0:	6813      	ldr	r3, [r2, #0]
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	d1fb      	bne.n	801bcee <tcp_enqueue_flags+0xe6>
    useg->next = seg;
 801bcf6:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801bcfe:	b117      	cbz	r7, 801bd06 <tcp_enqueue_flags+0xfe>
    pcb->snd_lbb++;
 801bd00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bd02:	3301      	adds	r3, #1
 801bd04:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 801bd06:	f015 0f01 	tst.w	r5, #1
 801bd0a:	d003      	beq.n	801bd14 <tcp_enqueue_flags+0x10c>
    pcb->flags |= TF_FIN;
 801bd0c:	7ea3      	ldrb	r3, [r4, #26]
 801bd0e:	f043 0320 	orr.w	r3, r3, #32
 801bd12:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801bd14:	6870      	ldr	r0, [r6, #4]
 801bd16:	f7fc fdd9 	bl	80188cc <pbuf_clen>
 801bd1a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801bd1e:	4418      	add	r0, r3
 801bd20:	b280      	uxth	r0, r0
 801bd22:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 801bd26:	b190      	cbz	r0, 801bd4e <tcp_enqueue_flags+0x146>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801bd28:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801bd2a:	b11b      	cbz	r3, 801bd34 <tcp_enqueue_flags+0x12c>
  return ERR_OK;
 801bd2c:	2000      	movs	r0, #0
}
 801bd2e:	b003      	add	sp, #12
 801bd30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801bd34:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801bd36:	b10b      	cbz	r3, 801bd3c <tcp_enqueue_flags+0x134>
  return ERR_OK;
 801bd38:	2000      	movs	r0, #0
 801bd3a:	e7f8      	b.n	801bd2e <tcp_enqueue_flags+0x126>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801bd3c:	4b05      	ldr	r3, [pc, #20]	; (801bd54 <tcp_enqueue_flags+0x14c>)
 801bd3e:	f240 326d 	movw	r2, #877	; 0x36d
 801bd42:	490a      	ldr	r1, [pc, #40]	; (801bd6c <tcp_enqueue_flags+0x164>)
 801bd44:	4805      	ldr	r0, [pc, #20]	; (801bd5c <tcp_enqueue_flags+0x154>)
 801bd46:	f003 fed2 	bl	801faee <iprintf>
  return ERR_OK;
 801bd4a:	2000      	movs	r0, #0
 801bd4c:	e7ef      	b.n	801bd2e <tcp_enqueue_flags+0x126>
 801bd4e:	2000      	movs	r0, #0
 801bd50:	e7ed      	b.n	801bd2e <tcp_enqueue_flags+0x126>
 801bd52:	bf00      	nop
 801bd54:	08026c70 	.word	0x08026c70
 801bd58:	08026910 	.word	0x08026910
 801bd5c:	080214f0 	.word	0x080214f0
 801bd60:	08026968 	.word	0x08026968
 801bd64:	080269a4 	.word	0x080269a4
 801bd68:	080269bc 	.word	0x080269bc
 801bd6c:	080269e8 	.word	0x080269e8

0801bd70 <tcp_send_fin>:
{
 801bd70:	b570      	push	{r4, r5, r6, lr}
 801bd72:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 801bd74:	6e84      	ldr	r4, [r0, #104]	; 0x68
 801bd76:	b90c      	cbnz	r4, 801bd7c <tcp_send_fin+0xc>
 801bd78:	e00a      	b.n	801bd90 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
 801bd7a:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801bd7c:	6823      	ldr	r3, [r4, #0]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d1fb      	bne.n	801bd7a <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801bd82:	68e3      	ldr	r3, [r4, #12]
 801bd84:	8998      	ldrh	r0, [r3, #12]
 801bd86:	f7fa faf8 	bl	801637a <lwip_htons>
 801bd8a:	f010 0f07 	tst.w	r0, #7
 801bd8e:	d004      	beq.n	801bd9a <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801bd90:	2101      	movs	r1, #1
 801bd92:	4628      	mov	r0, r5
 801bd94:	f7ff ff38 	bl	801bc08 <tcp_enqueue_flags>
}
 801bd98:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801bd9a:	68e6      	ldr	r6, [r4, #12]
 801bd9c:	89b4      	ldrh	r4, [r6, #12]
 801bd9e:	2001      	movs	r0, #1
 801bda0:	f7fa faeb 	bl	801637a <lwip_htons>
 801bda4:	4320      	orrs	r0, r4
 801bda6:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 801bda8:	7eab      	ldrb	r3, [r5, #26]
 801bdaa:	f043 0320 	orr.w	r3, r3, #32
 801bdae:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 801bdb0:	2000      	movs	r0, #0
 801bdb2:	bd70      	pop	{r4, r5, r6, pc}

0801bdb4 <tcp_send_empty_ack>:
{
 801bdb4:	b570      	push	{r4, r5, r6, lr}
 801bdb6:	b084      	sub	sp, #16
 801bdb8:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801bdba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801bdbc:	f7fa fae0 	bl	8016380 <lwip_htonl>
 801bdc0:	4603      	mov	r3, r0
 801bdc2:	2200      	movs	r2, #0
 801bdc4:	4611      	mov	r1, r2
 801bdc6:	4620      	mov	r0, r4
 801bdc8:	f7ff fbd8 	bl	801b57c <tcp_output_alloc_header>
  if (p == NULL) {
 801bdcc:	b1e0      	cbz	r0, 801be08 <tcp_send_empty_ack+0x54>
 801bdce:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bdd0:	1d25      	adds	r5, r4, #4
 801bdd2:	4628      	mov	r0, r5
 801bdd4:	f7fb f878 	bl	8016ec8 <ip4_route>
  if (netif == NULL) {
 801bdd8:	b1e8      	cbz	r0, 801be16 <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801bdda:	7aa3      	ldrb	r3, [r4, #10]
 801bddc:	7a61      	ldrb	r1, [r4, #9]
 801bdde:	9002      	str	r0, [sp, #8]
 801bde0:	2206      	movs	r2, #6
 801bde2:	9201      	str	r2, [sp, #4]
 801bde4:	9100      	str	r1, [sp, #0]
 801bde6:	462a      	mov	r2, r5
 801bde8:	4621      	mov	r1, r4
 801bdea:	4630      	mov	r0, r6
 801bdec:	f7fb fa0a 	bl	8017204 <ip4_output_if>
 801bdf0:	4605      	mov	r5, r0
  pbuf_free(p);
 801bdf2:	4630      	mov	r0, r6
 801bdf4:	f7fc fba4 	bl	8018540 <pbuf_free>
  if (err != ERR_OK) {
 801bdf8:	b985      	cbnz	r5, 801be1c <tcp_send_empty_ack+0x68>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801bdfa:	7ea3      	ldrb	r3, [r4, #26]
 801bdfc:	f023 0303 	bic.w	r3, r3, #3
 801be00:	76a3      	strb	r3, [r4, #26]
}
 801be02:	4628      	mov	r0, r5
 801be04:	b004      	add	sp, #16
 801be06:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801be08:	7ea3      	ldrb	r3, [r4, #26]
 801be0a:	f043 0303 	orr.w	r3, r3, #3
 801be0e:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 801be10:	f06f 0501 	mvn.w	r5, #1
 801be14:	e7f5      	b.n	801be02 <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 801be16:	f06f 0503 	mvn.w	r5, #3
 801be1a:	e7ea      	b.n	801bdf2 <tcp_send_empty_ack+0x3e>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801be1c:	7ea3      	ldrb	r3, [r4, #26]
 801be1e:	f043 0303 	orr.w	r3, r3, #3
 801be22:	76a3      	strb	r3, [r4, #26]
 801be24:	e7ed      	b.n	801be02 <tcp_send_empty_ack+0x4e>
	...

0801be28 <tcp_output>:
{
 801be28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be2c:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801be2e:	7d03      	ldrb	r3, [r0, #20]
 801be30:	2b01      	cmp	r3, #1
 801be32:	d01e      	beq.n	801be72 <tcp_output+0x4a>
  if (tcp_input_pcb == pcb) {
 801be34:	4ba5      	ldr	r3, [pc, #660]	; (801c0cc <tcp_output+0x2a4>)
 801be36:	681b      	ldr	r3, [r3, #0]
 801be38:	429d      	cmp	r5, r3
 801be3a:	f000 813e 	beq.w	801c0ba <tcp_output+0x292>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801be3e:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 801be42:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 801be46:	42bb      	cmp	r3, r7
 801be48:	d200      	bcs.n	801be4c <tcp_output+0x24>
 801be4a:	461f      	mov	r7, r3
  seg = pcb->unsent;
 801be4c:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 801be4e:	7eab      	ldrb	r3, [r5, #26]
 801be50:	f013 0f02 	tst.w	r3, #2
 801be54:	d00a      	beq.n	801be6c <tcp_output+0x44>
 801be56:	b1a4      	cbz	r4, 801be82 <tcp_output+0x5a>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801be58:	68e3      	ldr	r3, [r4, #12]
 801be5a:	6858      	ldr	r0, [r3, #4]
 801be5c:	f7fa fa90 	bl	8016380 <lwip_htonl>
 801be60:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801be62:	1ac3      	subs	r3, r0, r3
 801be64:	8920      	ldrh	r0, [r4, #8]
 801be66:	4403      	add	r3, r0
     (seg == NULL ||
 801be68:	429f      	cmp	r7, r3
 801be6a:	d30a      	bcc.n	801be82 <tcp_output+0x5a>
  useg = pcb->unacked;
 801be6c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 801be6e:	b976      	cbnz	r6, 801be8e <tcp_output+0x66>
 801be70:	e010      	b.n	801be94 <tcp_output+0x6c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801be72:	4b97      	ldr	r3, [pc, #604]	; (801c0d0 <tcp_output+0x2a8>)
 801be74:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801be78:	4996      	ldr	r1, [pc, #600]	; (801c0d4 <tcp_output+0x2ac>)
 801be7a:	4897      	ldr	r0, [pc, #604]	; (801c0d8 <tcp_output+0x2b0>)
 801be7c:	f003 fe37 	bl	801faee <iprintf>
 801be80:	e7d8      	b.n	801be34 <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 801be82:	4628      	mov	r0, r5
 801be84:	f7ff ff96 	bl	801bdb4 <tcp_send_empty_ack>
 801be88:	4603      	mov	r3, r0
 801be8a:	e03f      	b.n	801bf0c <tcp_output+0xe4>
    for (; useg->next != NULL; useg = useg->next);
 801be8c:	461e      	mov	r6, r3
 801be8e:	6833      	ldr	r3, [r6, #0]
 801be90:	2b00      	cmp	r3, #0
 801be92:	d1fb      	bne.n	801be8c <tcp_output+0x64>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801be94:	1d28      	adds	r0, r5, #4
 801be96:	f7fb f817 	bl	8016ec8 <ip4_route>
  if (netif == NULL) {
 801be9a:	4680      	mov	r8, r0
 801be9c:	2800      	cmp	r0, #0
 801be9e:	f000 810e 	beq.w	801c0be <tcp_output+0x296>
  if (ip_addr_isany(&pcb->local_ip)) {
 801bea2:	b10d      	cbz	r5, 801bea8 <tcp_output+0x80>
 801bea4:	682b      	ldr	r3, [r5, #0]
 801bea6:	b933      	cbnz	r3, 801beb6 <tcp_output+0x8e>
    if (local_ip == NULL) {
 801bea8:	f118 0f04 	cmn.w	r8, #4
 801beac:	f000 810a 	beq.w	801c0c4 <tcp_output+0x29c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801beb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801beb4:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 801beb6:	2c00      	cmp	r4, #0
 801beb8:	f000 80a2 	beq.w	801c000 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801bebc:	68e3      	ldr	r3, [r4, #12]
 801bebe:	6858      	ldr	r0, [r3, #4]
 801bec0:	f7fa fa5e 	bl	8016380 <lwip_htonl>
 801bec4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801bec6:	1ac3      	subs	r3, r0, r3
 801bec8:	8920      	ldrh	r0, [r4, #8]
 801beca:	4403      	add	r3, r0
  if (seg != NULL &&
 801becc:	429f      	cmp	r7, r3
 801bece:	f080 8097 	bcs.w	801c000 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801bed2:	2f00      	cmp	r7, #0
 801bed4:	f000 8094 	beq.w	801c000 <tcp_output+0x1d8>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801bed8:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 801bedc:	429f      	cmp	r7, r3
 801bede:	f040 808f 	bne.w	801c000 <tcp_output+0x1d8>
 801bee2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	f040 808b 	bne.w	801c000 <tcp_output+0x1d8>
    if (pcb->persist_backoff == 0) {
 801beea:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 801beee:	b923      	cbnz	r3, 801befa <tcp_output+0xd2>
      pcb->persist_cnt = 0;
 801bef0:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 801bef4:	2301      	movs	r3, #1
 801bef6:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
  if (pcb->unsent == NULL) {
 801befa:	6eab      	ldr	r3, [r5, #104]	; 0x68
 801befc:	2b00      	cmp	r3, #0
 801befe:	f000 80d9 	beq.w	801c0b4 <tcp_output+0x28c>
  pcb->flags &= ~TF_NAGLEMEMERR;
 801bf02:	7eab      	ldrb	r3, [r5, #26]
 801bf04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bf08:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 801bf0a:	2300      	movs	r3, #0
}
 801bf0c:	4618      	mov	r0, r3
 801bf0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("RST not expected here!",
 801bf12:	4b6f      	ldr	r3, [pc, #444]	; (801c0d0 <tcp_output+0x2a8>)
 801bf14:	f240 4246 	movw	r2, #1094	; 0x446
 801bf18:	4970      	ldr	r1, [pc, #448]	; (801c0dc <tcp_output+0x2b4>)
 801bf1a:	486f      	ldr	r0, [pc, #444]	; (801c0d8 <tcp_output+0x2b0>)
 801bf1c:	f003 fde7 	bl	801faee <iprintf>
 801bf20:	e084      	b.n	801c02c <tcp_output+0x204>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801bf22:	891a      	ldrh	r2, [r3, #8]
 801bf24:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801bf26:	429a      	cmp	r2, r3
 801bf28:	f080 8091 	bcs.w	801c04e <tcp_output+0x226>
 801bf2c:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	f000 808e 	beq.w	801c052 <tcp_output+0x22a>
 801bf36:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 801bf3a:	2b0a      	cmp	r3, #10
 801bf3c:	f240 808b 	bls.w	801c056 <tcp_output+0x22e>
 801bf40:	2301      	movs	r3, #1
 801bf42:	e002      	b.n	801bf4a <tcp_output+0x122>
 801bf44:	2301      	movs	r3, #1
 801bf46:	e000      	b.n	801bf4a <tcp_output+0x122>
 801bf48:	2301      	movs	r3, #1
 801bf4a:	b91b      	cbnz	r3, 801bf54 <tcp_output+0x12c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801bf4c:	7eab      	ldrb	r3, [r5, #26]
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801bf4e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801bf52:	d0d2      	beq.n	801befa <tcp_output+0xd2>
    if (pcb->state != SYN_SENT) {
 801bf54:	7d2b      	ldrb	r3, [r5, #20]
 801bf56:	2b02      	cmp	r3, #2
 801bf58:	d00a      	beq.n	801bf70 <tcp_output+0x148>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801bf5a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 801bf5e:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 801bf62:	2010      	movs	r0, #16
 801bf64:	f7fa fa09 	bl	801637a <lwip_htons>
 801bf68:	ea49 0000 	orr.w	r0, r9, r0
 801bf6c:	f8aa 000c 	strh.w	r0, [sl, #12]
    err = tcp_output_segment(seg, pcb, netif);
 801bf70:	4642      	mov	r2, r8
 801bf72:	4629      	mov	r1, r5
 801bf74:	4620      	mov	r0, r4
 801bf76:	f7ff fb4b 	bl	801b610 <tcp_output_segment>
    if (err != ERR_OK) {
 801bf7a:	4603      	mov	r3, r0
 801bf7c:	2800      	cmp	r0, #0
 801bf7e:	d16c      	bne.n	801c05a <tcp_output+0x232>
    pcb->unsent = seg->next;
 801bf80:	6823      	ldr	r3, [r4, #0]
 801bf82:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 801bf84:	7d2b      	ldrb	r3, [r5, #20]
 801bf86:	2b02      	cmp	r3, #2
 801bf88:	d003      	beq.n	801bf92 <tcp_output+0x16a>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801bf8a:	7eab      	ldrb	r3, [r5, #26]
 801bf8c:	f023 0303 	bic.w	r3, r3, #3
 801bf90:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bf92:	68e3      	ldr	r3, [r4, #12]
 801bf94:	6858      	ldr	r0, [r3, #4]
 801bf96:	f7fa f9f3 	bl	8016380 <lwip_htonl>
 801bf9a:	4681      	mov	r9, r0
 801bf9c:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 801bfa0:	68e3      	ldr	r3, [r4, #12]
 801bfa2:	8998      	ldrh	r0, [r3, #12]
 801bfa4:	f7fa f9e9 	bl	801637a <lwip_htons>
 801bfa8:	f010 0f03 	tst.w	r0, #3
 801bfac:	d05a      	beq.n	801c064 <tcp_output+0x23c>
 801bfae:	2001      	movs	r0, #1
 801bfb0:	4450      	add	r0, sl
 801bfb2:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bfb4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801bfb6:	1a1b      	subs	r3, r3, r0
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	db55      	blt.n	801c068 <tcp_output+0x240>
    if (TCP_TCPLEN(seg) > 0) {
 801bfbc:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 801bfc0:	68e3      	ldr	r3, [r4, #12]
 801bfc2:	8998      	ldrh	r0, [r3, #12]
 801bfc4:	f7fa f9d9 	bl	801637a <lwip_htons>
 801bfc8:	f010 0f03 	tst.w	r0, #3
 801bfcc:	d04e      	beq.n	801c06c <tcp_output+0x244>
 801bfce:	2301      	movs	r3, #1
 801bfd0:	eb13 0f09 	cmn.w	r3, r9
 801bfd4:	d06a      	beq.n	801c0ac <tcp_output+0x284>
      seg->next = NULL;
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 801bfda:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d047      	beq.n	801c070 <tcp_output+0x248>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801bfe0:	68e3      	ldr	r3, [r4, #12]
 801bfe2:	6858      	ldr	r0, [r3, #4]
 801bfe4:	f7fa f9cc 	bl	8016380 <lwip_htonl>
 801bfe8:	4681      	mov	r9, r0
 801bfea:	68f3      	ldr	r3, [r6, #12]
 801bfec:	6858      	ldr	r0, [r3, #4]
 801bfee:	f7fa f9c7 	bl	8016380 <lwip_htonl>
 801bff2:	eba9 0000 	sub.w	r0, r9, r0
 801bff6:	2800      	cmp	r0, #0
 801bff8:	db3d      	blt.n	801c076 <tcp_output+0x24e>
          useg->next = seg;
 801bffa:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 801bffc:	4626      	mov	r6, r4
    seg = pcb->unsent;
 801bffe:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 801c000:	2c00      	cmp	r4, #0
 801c002:	f43f af7a 	beq.w	801befa <tcp_output+0xd2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801c006:	68e3      	ldr	r3, [r4, #12]
 801c008:	6858      	ldr	r0, [r3, #4]
 801c00a:	f7fa f9b9 	bl	8016380 <lwip_htonl>
 801c00e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801c010:	1ac0      	subs	r0, r0, r3
 801c012:	8923      	ldrh	r3, [r4, #8]
 801c014:	4418      	add	r0, r3
  while (seg != NULL &&
 801c016:	4287      	cmp	r7, r0
 801c018:	f4ff af6f 	bcc.w	801befa <tcp_output+0xd2>
    LWIP_ASSERT("RST not expected here!",
 801c01c:	68e3      	ldr	r3, [r4, #12]
 801c01e:	8998      	ldrh	r0, [r3, #12]
 801c020:	f7fa f9ab 	bl	801637a <lwip_htons>
 801c024:	f010 0f04 	tst.w	r0, #4
 801c028:	f47f af73 	bne.w	801bf12 <tcp_output+0xea>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c02c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d088      	beq.n	801bf44 <tcp_output+0x11c>
 801c032:	7eab      	ldrb	r3, [r5, #26]
 801c034:	f013 0f44 	tst.w	r3, #68	; 0x44
 801c038:	d186      	bne.n	801bf48 <tcp_output+0x120>
 801c03a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	f43f af75 	beq.w	801bf2c <tcp_output+0x104>
 801c042:	681a      	ldr	r2, [r3, #0]
 801c044:	2a00      	cmp	r2, #0
 801c046:	f43f af6c 	beq.w	801bf22 <tcp_output+0xfa>
 801c04a:	2301      	movs	r3, #1
 801c04c:	e77d      	b.n	801bf4a <tcp_output+0x122>
 801c04e:	2301      	movs	r3, #1
 801c050:	e77b      	b.n	801bf4a <tcp_output+0x122>
 801c052:	2301      	movs	r3, #1
 801c054:	e779      	b.n	801bf4a <tcp_output+0x122>
 801c056:	2300      	movs	r3, #0
 801c058:	e777      	b.n	801bf4a <tcp_output+0x122>
      pcb->flags |= TF_NAGLEMEMERR;
 801c05a:	7eaa      	ldrb	r2, [r5, #26]
 801c05c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c060:	76aa      	strb	r2, [r5, #26]
      return err;
 801c062:	e753      	b.n	801bf0c <tcp_output+0xe4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c064:	2000      	movs	r0, #0
 801c066:	e7a3      	b.n	801bfb0 <tcp_output+0x188>
      pcb->snd_nxt = snd_nxt;
 801c068:	64e8      	str	r0, [r5, #76]	; 0x4c
 801c06a:	e7a7      	b.n	801bfbc <tcp_output+0x194>
    if (TCP_TCPLEN(seg) > 0) {
 801c06c:	2300      	movs	r3, #0
 801c06e:	e7af      	b.n	801bfd0 <tcp_output+0x1a8>
        pcb->unacked = seg;
 801c070:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 801c072:	4626      	mov	r6, r4
 801c074:	e7c3      	b.n	801bffe <tcp_output+0x1d6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801c076:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 801c07a:	e001      	b.n	801c080 <tcp_output+0x258>
              cur_seg = &((*cur_seg)->next );
 801c07c:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 801c080:	f8da 3000 	ldr.w	r3, [sl]
 801c084:	b163      	cbz	r3, 801c0a0 <tcp_output+0x278>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c086:	68db      	ldr	r3, [r3, #12]
 801c088:	6858      	ldr	r0, [r3, #4]
 801c08a:	f7fa f979 	bl	8016380 <lwip_htonl>
 801c08e:	4681      	mov	r9, r0
 801c090:	68e3      	ldr	r3, [r4, #12]
 801c092:	6858      	ldr	r0, [r3, #4]
 801c094:	f7fa f974 	bl	8016380 <lwip_htonl>
 801c098:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801c09c:	2800      	cmp	r0, #0
 801c09e:	dbed      	blt.n	801c07c <tcp_output+0x254>
          seg->next = (*cur_seg);
 801c0a0:	f8da 3000 	ldr.w	r3, [sl]
 801c0a4:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 801c0a6:	f8ca 4000 	str.w	r4, [sl]
 801c0aa:	e7a8      	b.n	801bffe <tcp_output+0x1d6>
      tcp_seg_free(seg);
 801c0ac:	4620      	mov	r0, r4
 801c0ae:	f7fc ff2b 	bl	8018f08 <tcp_seg_free>
 801c0b2:	e7a4      	b.n	801bffe <tcp_output+0x1d6>
    pcb->unsent_oversize = 0;
 801c0b4:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 801c0b8:	e723      	b.n	801bf02 <tcp_output+0xda>
    return ERR_OK;
 801c0ba:	2300      	movs	r3, #0
 801c0bc:	e726      	b.n	801bf0c <tcp_output+0xe4>
    return ERR_RTE;
 801c0be:	f06f 0303 	mvn.w	r3, #3
 801c0c2:	e723      	b.n	801bf0c <tcp_output+0xe4>
      return ERR_RTE;
 801c0c4:	f06f 0303 	mvn.w	r3, #3
 801c0c8:	e720      	b.n	801bf0c <tcp_output+0xe4>
 801c0ca:	bf00      	nop
 801c0cc:	20015cd8 	.word	0x20015cd8
 801c0d0:	08026c70 	.word	0x08026c70
 801c0d4:	08026a10 	.word	0x08026a10
 801c0d8:	080214f0 	.word	0x080214f0
 801c0dc:	08026a38 	.word	0x08026a38

0801c0e0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801c0e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c0e4:	b085      	sub	sp, #20
 801c0e6:	4680      	mov	r8, r0
 801c0e8:	460f      	mov	r7, r1
 801c0ea:	4691      	mov	r9, r2
 801c0ec:	461e      	mov	r6, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801c0ee:	2200      	movs	r2, #0
 801c0f0:	2114      	movs	r1, #20
 801c0f2:	2001      	movs	r0, #1
 801c0f4:	f7fc fa90 	bl	8018618 <pbuf_alloc>
  if (p == NULL) {
 801c0f8:	b3a8      	cbz	r0, 801c166 <tcp_rst+0x86>
 801c0fa:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801c0fc:	8943      	ldrh	r3, [r0, #10]
 801c0fe:	2b13      	cmp	r3, #19
 801c100:	d934      	bls.n	801c16c <tcp_rst+0x8c>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801c102:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 801c104:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801c108:	f7fa f937 	bl	801637a <lwip_htons>
 801c10c:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 801c10e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801c112:	f7fa f932 	bl	801637a <lwip_htons>
 801c116:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801c118:	4640      	mov	r0, r8
 801c11a:	f7fa f931 	bl	8016380 <lwip_htonl>
 801c11e:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801c120:	4638      	mov	r0, r7
 801c122:	f7fa f92d 	bl	8016380 <lwip_htonl>
 801c126:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801c128:	f245 0014 	movw	r0, #20500	; 0x5014
 801c12c:	f7fa f925 	bl	801637a <lwip_htons>
 801c130:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801c132:	2300      	movs	r3, #0
 801c134:	2210      	movs	r2, #16
 801c136:	73a2      	strb	r2, [r4, #14]
 801c138:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 801c13a:	7423      	strb	r3, [r4, #16]
 801c13c:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 801c13e:	74a3      	strb	r3, [r4, #18]
 801c140:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801c142:	4630      	mov	r0, r6
 801c144:	f7fa fec0 	bl	8016ec8 <ip4_route>
  if (netif != NULL) {
 801c148:	b150      	cbz	r0, 801c160 <tcp_rst+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 801c14a:	9002      	str	r0, [sp, #8]
 801c14c:	2306      	movs	r3, #6
 801c14e:	9301      	str	r3, [sp, #4]
 801c150:	2300      	movs	r3, #0
 801c152:	9300      	str	r3, [sp, #0]
 801c154:	23ff      	movs	r3, #255	; 0xff
 801c156:	4632      	mov	r2, r6
 801c158:	4649      	mov	r1, r9
 801c15a:	4628      	mov	r0, r5
 801c15c:	f7fb f852 	bl	8017204 <ip4_output_if>
  }
  pbuf_free(p);
 801c160:	4628      	mov	r0, r5
 801c162:	f7fc f9ed 	bl	8018540 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801c166:	b005      	add	sp, #20
 801c168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801c16c:	4b03      	ldr	r3, [pc, #12]	; (801c17c <tcp_rst+0x9c>)
 801c16e:	f240 524d 	movw	r2, #1357	; 0x54d
 801c172:	4903      	ldr	r1, [pc, #12]	; (801c180 <tcp_rst+0xa0>)
 801c174:	4803      	ldr	r0, [pc, #12]	; (801c184 <tcp_rst+0xa4>)
 801c176:	f003 fcba 	bl	801faee <iprintf>
 801c17a:	e7c2      	b.n	801c102 <tcp_rst+0x22>
 801c17c:	08026c70 	.word	0x08026c70
 801c180:	08026a50 	.word	0x08026a50
 801c184:	080214f0 	.word	0x080214f0

0801c188 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 801c188:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 801c18a:	b10a      	cbz	r2, 801c190 <tcp_rexmit_rto+0x8>
{
 801c18c:	b508      	push	{r3, lr}
 801c18e:	e001      	b.n	801c194 <tcp_rexmit_rto+0xc>
 801c190:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801c192:	461a      	mov	r2, r3
 801c194:	6813      	ldr	r3, [r2, #0]
 801c196:	2b00      	cmp	r3, #0
 801c198:	d1fb      	bne.n	801c192 <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801c19a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801c19c:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801c19e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801c1a0:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801c1a6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 801c1aa:	2bff      	cmp	r3, #255	; 0xff
 801c1ac:	d002      	beq.n	801c1b4 <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
 801c1ae:	3301      	adds	r3, #1
 801c1b0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 801c1b8:	f7ff fe36 	bl	801be28 <tcp_output>
 801c1bc:	bd08      	pop	{r3, pc}

0801c1be <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801c1be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801c1c0:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 801c1c2:	b316      	cbz	r6, 801c20a <tcp_rexmit+0x4c>
 801c1c4:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 801c1c6:	6833      	ldr	r3, [r6, #0]
 801c1c8:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 801c1ca:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 801c1ce:	e000      	b.n	801c1d2 <tcp_rexmit+0x14>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801c1d0:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801c1d2:	682b      	ldr	r3, [r5, #0]
 801c1d4:	b15b      	cbz	r3, 801c1ee <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c1d6:	68db      	ldr	r3, [r3, #12]
 801c1d8:	6858      	ldr	r0, [r3, #4]
 801c1da:	f7fa f8d1 	bl	8016380 <lwip_htonl>
 801c1de:	4604      	mov	r4, r0
 801c1e0:	68f3      	ldr	r3, [r6, #12]
 801c1e2:	6858      	ldr	r0, [r3, #4]
 801c1e4:	f7fa f8cc 	bl	8016380 <lwip_htonl>
 801c1e8:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 801c1ea:	2800      	cmp	r0, #0
 801c1ec:	dbf0      	blt.n	801c1d0 <tcp_rexmit+0x12>
  }
  seg->next = *cur_seg;
 801c1ee:	682b      	ldr	r3, [r5, #0]
 801c1f0:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801c1f2:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801c1f4:	6833      	ldr	r3, [r6, #0]
 801c1f6:	b14b      	cbz	r3, 801c20c <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801c1f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801c1fc:	2bff      	cmp	r3, #255	; 0xff
 801c1fe:	d002      	beq.n	801c206 <tcp_rexmit+0x48>
    ++pcb->nrtx;
 801c200:	3301      	adds	r3, #1
 801c202:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801c206:	2300      	movs	r3, #0
 801c208:	637b      	str	r3, [r7, #52]	; 0x34
 801c20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801c20c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801c210:	e7f2      	b.n	801c1f8 <tcp_rexmit+0x3a>

0801c212 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801c212:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801c214:	b11b      	cbz	r3, 801c21e <tcp_rexmit_fast+0xc>
 801c216:	7e83      	ldrb	r3, [r0, #26]
 801c218:	f013 0f04 	tst.w	r3, #4
 801c21c:	d000      	beq.n	801c220 <tcp_rexmit_fast+0xe>
 801c21e:	4770      	bx	lr
{
 801c220:	b510      	push	{r4, lr}
 801c222:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 801c224:	f7ff ffcb 	bl	801c1be <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c228:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801c22c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 801c230:	4293      	cmp	r3, r2
 801c232:	d218      	bcs.n	801c266 <tcp_rexmit_fast+0x54>
 801c234:	085a      	lsrs	r2, r3, #1
 801c236:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801c23a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801c23c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801c240:	d202      	bcs.n	801c248 <tcp_rexmit_fast+0x36>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801c242:	005a      	lsls	r2, r3, #1
 801c244:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801c248:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801c24c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c250:	fa12 f383 	uxtah	r3, r2, r3
 801c254:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801c258:	7ea3      	ldrb	r3, [r4, #26]
 801c25a:	f043 0304 	orr.w	r3, r3, #4
 801c25e:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801c260:	2300      	movs	r3, #0
 801c262:	8623      	strh	r3, [r4, #48]	; 0x30
 801c264:	bd10      	pop	{r4, pc}
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c266:	0852      	lsrs	r2, r2, #1
 801c268:	e7e5      	b.n	801c236 <tcp_rexmit_fast+0x24>

0801c26a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c26a:	b570      	push	{r4, r5, r6, lr}
 801c26c:	b084      	sub	sp, #16
 801c26e:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c270:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801c272:	3801      	subs	r0, #1
 801c274:	f7fa f884 	bl	8016380 <lwip_htonl>
 801c278:	4603      	mov	r3, r0
 801c27a:	2200      	movs	r2, #0
 801c27c:	4611      	mov	r1, r2
 801c27e:	4620      	mov	r0, r4
 801c280:	f7ff f97c 	bl	801b57c <tcp_output_alloc_header>
  if (p == NULL) {
 801c284:	b1d0      	cbz	r0, 801c2bc <tcp_keepalive+0x52>
 801c286:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801c288:	1d26      	adds	r6, r4, #4
 801c28a:	4630      	mov	r0, r6
 801c28c:	f7fa fe1c 	bl	8016ec8 <ip4_route>
  if (netif == NULL) {
 801c290:	b188      	cbz	r0, 801c2b6 <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801c292:	7aa3      	ldrb	r3, [r4, #10]
 801c294:	9002      	str	r0, [sp, #8]
 801c296:	2206      	movs	r2, #6
 801c298:	9201      	str	r2, [sp, #4]
 801c29a:	2200      	movs	r2, #0
 801c29c:	9200      	str	r2, [sp, #0]
 801c29e:	4632      	mov	r2, r6
 801c2a0:	4621      	mov	r1, r4
 801c2a2:	4628      	mov	r0, r5
 801c2a4:	f7fa ffae 	bl	8017204 <ip4_output_if>
 801c2a8:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801c2aa:	4628      	mov	r0, r5
 801c2ac:	f7fc f948 	bl	8018540 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801c2b0:	4620      	mov	r0, r4
 801c2b2:	b004      	add	sp, #16
 801c2b4:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 801c2b6:	f06f 0403 	mvn.w	r4, #3
 801c2ba:	e7f6      	b.n	801c2aa <tcp_keepalive+0x40>
    return ERR_MEM;
 801c2bc:	f04f 34ff 	mov.w	r4, #4294967295
 801c2c0:	e7f6      	b.n	801c2b0 <tcp_keepalive+0x46>

0801c2c2 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2c6:	b084      	sub	sp, #16
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801c2c8:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 801c2ca:	b175      	cbz	r5, 801c2ea <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 801c2cc:	2d00      	cmp	r5, #0
 801c2ce:	d05d      	beq.n	801c38c <tcp_zero_window_probe+0xca>
 801c2d0:	4604      	mov	r4, r0
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c2d2:	68eb      	ldr	r3, [r5, #12]
 801c2d4:	8998      	ldrh	r0, [r3, #12]
 801c2d6:	f7fa f850 	bl	801637a <lwip_htons>
 801c2da:	f010 0f01 	tst.w	r0, #1
 801c2de:	d006      	beq.n	801c2ee <tcp_zero_window_probe+0x2c>
 801c2e0:	892b      	ldrh	r3, [r5, #8]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d040      	beq.n	801c368 <tcp_zero_window_probe+0xa6>
 801c2e6:	2200      	movs	r2, #0
 801c2e8:	e002      	b.n	801c2f0 <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 801c2ea:	6e85      	ldr	r5, [r0, #104]	; 0x68
 801c2ec:	e7ee      	b.n	801c2cc <tcp_zero_window_probe+0xa>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c2ee:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801c2f0:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801c2f4:	68eb      	ldr	r3, [r5, #12]
 801c2f6:	685b      	ldr	r3, [r3, #4]
 801c2f8:	f082 0201 	eor.w	r2, r2, #1
 801c2fc:	2100      	movs	r1, #0
 801c2fe:	4620      	mov	r0, r4
 801c300:	f7ff f93c 	bl	801b57c <tcp_output_alloc_header>
  if (p == NULL) {
 801c304:	4607      	mov	r7, r0
 801c306:	2800      	cmp	r0, #0
 801c308:	d042      	beq.n	801c390 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c30a:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 801c30e:	b36e      	cbz	r6, 801c36c <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c310:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 801c314:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 801c318:	b2b6      	uxth	r6, r6
 801c31a:	2011      	movs	r0, #17
 801c31c:	f7fa f82d 	bl	801637a <lwip_htons>
 801c320:	4330      	orrs	r0, r6
 801c322:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c326:	68eb      	ldr	r3, [r5, #12]
 801c328:	6858      	ldr	r0, [r3, #4]
 801c32a:	f7fa f829 	bl	8016380 <lwip_htonl>
 801c32e:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c330:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c332:	1a1b      	subs	r3, r3, r0
 801c334:	2b00      	cmp	r3, #0
 801c336:	db24      	blt.n	801c382 <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801c338:	1d25      	adds	r5, r4, #4
 801c33a:	4628      	mov	r0, r5
 801c33c:	f7fa fdc4 	bl	8016ec8 <ip4_route>
  if (netif == NULL) {
 801c340:	b308      	cbz	r0, 801c386 <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801c342:	7aa3      	ldrb	r3, [r4, #10]
 801c344:	9002      	str	r0, [sp, #8]
 801c346:	2206      	movs	r2, #6
 801c348:	9201      	str	r2, [sp, #4]
 801c34a:	2200      	movs	r2, #0
 801c34c:	9200      	str	r2, [sp, #0]
 801c34e:	462a      	mov	r2, r5
 801c350:	4621      	mov	r1, r4
 801c352:	4638      	mov	r0, r7
 801c354:	f7fa ff56 	bl	8017204 <ip4_output_if>
 801c358:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801c35a:	4638      	mov	r0, r7
 801c35c:	f7fc f8f0 	bl	8018540 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801c360:	4620      	mov	r0, r4
 801c362:	b004      	add	sp, #16
 801c364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c368:	2201      	movs	r2, #1
 801c36a:	e7c1      	b.n	801c2f0 <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c36c:	6868      	ldr	r0, [r5, #4]
 801c36e:	8903      	ldrh	r3, [r0, #8]
 801c370:	892a      	ldrh	r2, [r5, #8]
 801c372:	1a9b      	subs	r3, r3, r2
 801c374:	b29b      	uxth	r3, r3
 801c376:	2201      	movs	r2, #1
 801c378:	f108 0114 	add.w	r1, r8, #20
 801c37c:	f7fc fba2 	bl	8018ac4 <pbuf_copy_partial>
 801c380:	e7d1      	b.n	801c326 <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 801c382:	64e0      	str	r0, [r4, #76]	; 0x4c
 801c384:	e7d8      	b.n	801c338 <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 801c386:	f06f 0403 	mvn.w	r4, #3
 801c38a:	e7e6      	b.n	801c35a <tcp_zero_window_probe+0x98>
    return ERR_OK;
 801c38c:	2400      	movs	r4, #0
 801c38e:	e7e7      	b.n	801c360 <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 801c390:	f04f 34ff 	mov.w	r4, #4294967295
 801c394:	e7e4      	b.n	801c360 <tcp_zero_window_probe+0x9e>
	...

0801c398 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 801c398:	b508      	push	{r3, lr}
  u32_t diff;
  if (next_timeout == NULL) {
 801c39a:	4b0a      	ldr	r3, [pc, #40]	; (801c3c4 <sys_timeouts_sleeptime+0x2c>)
 801c39c:	681b      	ldr	r3, [r3, #0]
 801c39e:	b15b      	cbz	r3, 801c3b8 <sys_timeouts_sleeptime+0x20>
    return 0xffffffff;
  }
  diff = sys_now() - timeouts_last_time;
 801c3a0:	f001 f916 	bl	801d5d0 <sys_now>
 801c3a4:	4b08      	ldr	r3, [pc, #32]	; (801c3c8 <sys_timeouts_sleeptime+0x30>)
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	1ac0      	subs	r0, r0, r3
  if (diff > next_timeout->time) {
 801c3aa:	4b06      	ldr	r3, [pc, #24]	; (801c3c4 <sys_timeouts_sleeptime+0x2c>)
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	685b      	ldr	r3, [r3, #4]
 801c3b0:	4298      	cmp	r0, r3
 801c3b2:	d804      	bhi.n	801c3be <sys_timeouts_sleeptime+0x26>
    return 0;
  } else {
    return next_timeout->time - diff;
 801c3b4:	1a18      	subs	r0, r3, r0
 801c3b6:	bd08      	pop	{r3, pc}
    return 0xffffffff;
 801c3b8:	f04f 30ff 	mov.w	r0, #4294967295
 801c3bc:	bd08      	pop	{r3, pc}
    return 0;
 801c3be:	2000      	movs	r0, #0
  }
}
 801c3c0:	bd08      	pop	{r3, pc}
 801c3c2:	bf00      	nop
 801c3c4:	200102ec 	.word	0x200102ec
 801c3c8:	200102f4 	.word	0x200102f4

0801c3cc <sys_check_timeouts>:
{
 801c3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (next_timeout) {
 801c3ce:	4b18      	ldr	r3, [pc, #96]	; (801c430 <sys_check_timeouts+0x64>)
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	b363      	cbz	r3, 801c42e <sys_check_timeouts+0x62>
    now = sys_now();
 801c3d4:	f001 f8fc 	bl	801d5d0 <sys_now>
    diff = now - timeouts_last_time;
 801c3d8:	4b16      	ldr	r3, [pc, #88]	; (801c434 <sys_check_timeouts+0x68>)
 801c3da:	681c      	ldr	r4, [r3, #0]
 801c3dc:	1b04      	subs	r4, r0, r4
 801c3de:	e005      	b.n	801c3ec <sys_check_timeouts+0x20>
      had_one = 0;
 801c3e0:	2300      	movs	r3, #0
 801c3e2:	e002      	b.n	801c3ea <sys_check_timeouts+0x1e>
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	e000      	b.n	801c3ea <sys_check_timeouts+0x1e>
        had_one = 1;
 801c3e8:	2301      	movs	r3, #1
    } while (had_one);
 801c3ea:	b303      	cbz	r3, 801c42e <sys_check_timeouts+0x62>
      tmptimeout = next_timeout;
 801c3ec:	4b10      	ldr	r3, [pc, #64]	; (801c430 <sys_check_timeouts+0x64>)
 801c3ee:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801c3f0:	2900      	cmp	r1, #0
 801c3f2:	d0f5      	beq.n	801c3e0 <sys_check_timeouts+0x14>
 801c3f4:	684b      	ldr	r3, [r1, #4]
 801c3f6:	429c      	cmp	r4, r3
 801c3f8:	d3f4      	bcc.n	801c3e4 <sys_check_timeouts+0x18>
        timeouts_last_time += tmptimeout->time;
 801c3fa:	480e      	ldr	r0, [pc, #56]	; (801c434 <sys_check_timeouts+0x68>)
 801c3fc:	6802      	ldr	r2, [r0, #0]
 801c3fe:	441a      	add	r2, r3
 801c400:	6002      	str	r2, [r0, #0]
        diff -= tmptimeout->time;
 801c402:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
 801c404:	680a      	ldr	r2, [r1, #0]
 801c406:	4b0a      	ldr	r3, [pc, #40]	; (801c430 <sys_check_timeouts+0x64>)
 801c408:	601a      	str	r2, [r3, #0]
        handler = tmptimeout->h;
 801c40a:	688d      	ldr	r5, [r1, #8]
        arg = tmptimeout->arg;
 801c40c:	68cf      	ldr	r7, [r1, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c40e:	2009      	movs	r0, #9
 801c410:	f7fb feaa 	bl	8018168 <memp_free>
        if (handler != NULL) {
 801c414:	2d00      	cmp	r5, #0
 801c416:	d0e7      	beq.n	801c3e8 <sys_check_timeouts+0x1c>
          LOCK_TCPIP_CORE();
 801c418:	4e07      	ldr	r6, [pc, #28]	; (801c438 <sys_check_timeouts+0x6c>)
 801c41a:	4630      	mov	r0, r6
 801c41c:	f000 fa5b 	bl	801c8d6 <sys_mutex_lock>
          handler(arg);
 801c420:	4638      	mov	r0, r7
 801c422:	47a8      	blx	r5
          UNLOCK_TCPIP_CORE();
 801c424:	4630      	mov	r0, r6
 801c426:	f000 fa5d 	bl	801c8e4 <sys_mutex_unlock>
        had_one = 1;
 801c42a:	2301      	movs	r3, #1
 801c42c:	e7dd      	b.n	801c3ea <sys_check_timeouts+0x1e>
 801c42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c430:	200102ec 	.word	0x200102ec
 801c434:	200102f4 	.word	0x200102f4
 801c438:	2001103c 	.word	0x2001103c

0801c43c <sys_timeout>:
{
 801c43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c440:	4605      	mov	r5, r0
 801c442:	4688      	mov	r8, r1
 801c444:	4617      	mov	r7, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c446:	2009      	movs	r0, #9
 801c448:	f7fb fe74 	bl	8018134 <memp_malloc>
  if (timeout == NULL) {
 801c44c:	b308      	cbz	r0, 801c492 <sys_timeout+0x56>
 801c44e:	4604      	mov	r4, r0
  now = sys_now();
 801c450:	f001 f8be 	bl	801d5d0 <sys_now>
  if (next_timeout == NULL) {
 801c454:	4b23      	ldr	r3, [pc, #140]	; (801c4e4 <sys_timeout+0xa8>)
 801c456:	681e      	ldr	r6, [r3, #0]
 801c458:	b31e      	cbz	r6, 801c4a2 <sys_timeout+0x66>
    diff = now - timeouts_last_time;
 801c45a:	4b23      	ldr	r3, [pc, #140]	; (801c4e8 <sys_timeout+0xac>)
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	1ac0      	subs	r0, r0, r3
  timeout->next = NULL;
 801c460:	2300      	movs	r3, #0
 801c462:	6023      	str	r3, [r4, #0]
  timeout->h = handler;
 801c464:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 801c468:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 801c46a:	4428      	add	r0, r5
 801c46c:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 801c46e:	b1e6      	cbz	r6, 801c4aa <sys_timeout+0x6e>
  if (next_timeout->time > msecs) {
 801c470:	6873      	ldr	r3, [r6, #4]
 801c472:	429d      	cmp	r5, r3
 801c474:	d31d      	bcc.n	801c4b2 <sys_timeout+0x76>
 801c476:	4632      	mov	r2, r6
    for (t = next_timeout; t != NULL; t = t->next) {
 801c478:	2a00      	cmp	r2, #0
 801c47a:	d030      	beq.n	801c4de <sys_timeout+0xa2>
      timeout->time -= t->time;
 801c47c:	6851      	ldr	r1, [r2, #4]
 801c47e:	6863      	ldr	r3, [r4, #4]
 801c480:	1a5b      	subs	r3, r3, r1
 801c482:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801c484:	6811      	ldr	r1, [r2, #0]
 801c486:	b1d9      	cbz	r1, 801c4c0 <sys_timeout+0x84>
 801c488:	6848      	ldr	r0, [r1, #4]
 801c48a:	4283      	cmp	r3, r0
 801c48c:	d318      	bcc.n	801c4c0 <sys_timeout+0x84>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c48e:	460a      	mov	r2, r1
 801c490:	e7f2      	b.n	801c478 <sys_timeout+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c492:	4b16      	ldr	r3, [pc, #88]	; (801c4ec <sys_timeout+0xb0>)
 801c494:	22d4      	movs	r2, #212	; 0xd4
 801c496:	4916      	ldr	r1, [pc, #88]	; (801c4f0 <sys_timeout+0xb4>)
 801c498:	4816      	ldr	r0, [pc, #88]	; (801c4f4 <sys_timeout+0xb8>)
 801c49a:	f003 fb28 	bl	801faee <iprintf>
 801c49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeouts_last_time = now;
 801c4a2:	4b11      	ldr	r3, [pc, #68]	; (801c4e8 <sys_timeout+0xac>)
 801c4a4:	6018      	str	r0, [r3, #0]
    diff = 0;
 801c4a6:	2000      	movs	r0, #0
 801c4a8:	e7da      	b.n	801c460 <sys_timeout+0x24>
    next_timeout = timeout;
 801c4aa:	4b0e      	ldr	r3, [pc, #56]	; (801c4e4 <sys_timeout+0xa8>)
 801c4ac:	601c      	str	r4, [r3, #0]
    return;
 801c4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
 801c4b2:	1b5d      	subs	r5, r3, r5
 801c4b4:	6075      	str	r5, [r6, #4]
    timeout->next = next_timeout;
 801c4b6:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 801c4b8:	4b0a      	ldr	r3, [pc, #40]	; (801c4e4 <sys_timeout+0xa8>)
 801c4ba:	601c      	str	r4, [r3, #0]
 801c4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (t->next != NULL) {
 801c4c0:	b139      	cbz	r1, 801c4d2 <sys_timeout+0x96>
          t->next->time -= timeout->time;
 801c4c2:	6848      	ldr	r0, [r1, #4]
 801c4c4:	1ac3      	subs	r3, r0, r3
 801c4c6:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 801c4c8:	6813      	ldr	r3, [r2, #0]
 801c4ca:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 801c4cc:	6014      	str	r4, [r2, #0]
        break;
 801c4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if (timeout->time > msecs) {
 801c4d2:	429d      	cmp	r5, r3
 801c4d4:	d2f8      	bcs.n	801c4c8 <sys_timeout+0x8c>
          timeout->time = msecs + next_timeout->time;
 801c4d6:	6873      	ldr	r3, [r6, #4]
 801c4d8:	441d      	add	r5, r3
 801c4da:	6065      	str	r5, [r4, #4]
 801c4dc:	e7f4      	b.n	801c4c8 <sys_timeout+0x8c>
 801c4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4e2:	bf00      	nop
 801c4e4:	200102ec 	.word	0x200102ec
 801c4e8:	200102f4 	.word	0x200102f4
 801c4ec:	08026d2c 	.word	0x08026d2c
 801c4f0:	08026d60 	.word	0x08026d60
 801c4f4:	080214f0 	.word	0x080214f0

0801c4f8 <tcp_timer_needed>:
{
 801c4f8:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c4fa:	4b0a      	ldr	r3, [pc, #40]	; (801c524 <tcp_timer_needed+0x2c>)
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	b953      	cbnz	r3, 801c516 <tcp_timer_needed+0x1e>
 801c500:	4b09      	ldr	r3, [pc, #36]	; (801c528 <tcp_timer_needed+0x30>)
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	b143      	cbz	r3, 801c518 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 801c506:	2201      	movs	r2, #1
 801c508:	4b06      	ldr	r3, [pc, #24]	; (801c524 <tcp_timer_needed+0x2c>)
 801c50a:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c50c:	2200      	movs	r2, #0
 801c50e:	4907      	ldr	r1, [pc, #28]	; (801c52c <tcp_timer_needed+0x34>)
 801c510:	20fa      	movs	r0, #250	; 0xfa
 801c512:	f7ff ff93 	bl	801c43c <sys_timeout>
 801c516:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c518:	4b05      	ldr	r3, [pc, #20]	; (801c530 <tcp_timer_needed+0x38>)
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d1f2      	bne.n	801c506 <tcp_timer_needed+0xe>
 801c520:	e7f9      	b.n	801c516 <tcp_timer_needed+0x1e>
 801c522:	bf00      	nop
 801c524:	200102f0 	.word	0x200102f0
 801c528:	20015cc4 	.word	0x20015cc4
 801c52c:	0801c535 	.word	0x0801c535
 801c530:	20015cd4 	.word	0x20015cd4

0801c534 <tcpip_tcp_timer>:
{
 801c534:	b508      	push	{r3, lr}
  tcp_tmr();
 801c536:	f7fd f93b 	bl	80197b0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c53a:	4b08      	ldr	r3, [pc, #32]	; (801c55c <tcpip_tcp_timer+0x28>)
 801c53c:	681b      	ldr	r3, [r3, #0]
 801c53e:	b12b      	cbz	r3, 801c54c <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c540:	2200      	movs	r2, #0
 801c542:	4907      	ldr	r1, [pc, #28]	; (801c560 <tcpip_tcp_timer+0x2c>)
 801c544:	20fa      	movs	r0, #250	; 0xfa
 801c546:	f7ff ff79 	bl	801c43c <sys_timeout>
 801c54a:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c54c:	4b05      	ldr	r3, [pc, #20]	; (801c564 <tcpip_tcp_timer+0x30>)
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	2b00      	cmp	r3, #0
 801c552:	d1f5      	bne.n	801c540 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801c554:	2200      	movs	r2, #0
 801c556:	4b04      	ldr	r3, [pc, #16]	; (801c568 <tcpip_tcp_timer+0x34>)
 801c558:	601a      	str	r2, [r3, #0]
 801c55a:	bd08      	pop	{r3, pc}
 801c55c:	20015cc4 	.word	0x20015cc4
 801c560:	0801c535 	.word	0x0801c535
 801c564:	20015cd4 	.word	0x20015cd4
 801c568:	200102f0 	.word	0x200102f0

0801c56c <sys_timeouts_init>:
{
 801c56c:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c56e:	2401      	movs	r4, #1
 801c570:	e008      	b.n	801c584 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 801c572:	4b08      	ldr	r3, [pc, #32]	; (801c594 <sys_timeouts_init+0x28>)
 801c574:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 801c578:	4907      	ldr	r1, [pc, #28]	; (801c598 <sys_timeouts_init+0x2c>)
 801c57a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 801c57e:	f7ff ff5d 	bl	801c43c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c582:	3401      	adds	r4, #1
 801c584:	2c02      	cmp	r4, #2
 801c586:	d9f4      	bls.n	801c572 <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 801c588:	f001 f822 	bl	801d5d0 <sys_now>
 801c58c:	4b03      	ldr	r3, [pc, #12]	; (801c59c <sys_timeouts_init+0x30>)
 801c58e:	6018      	str	r0, [r3, #0]
 801c590:	bd10      	pop	{r4, pc}
 801c592:	bf00      	nop
 801c594:	08026d14 	.word	0x08026d14
 801c598:	0801c5a1 	.word	0x0801c5a1
 801c59c:	200102f4 	.word	0x200102f4

0801c5a0 <cyclic_timer>:
{
 801c5a0:	b510      	push	{r4, lr}
 801c5a2:	4604      	mov	r4, r0
  cyclic->handler();
 801c5a4:	6843      	ldr	r3, [r0, #4]
 801c5a6:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801c5a8:	4622      	mov	r2, r4
 801c5aa:	4902      	ldr	r1, [pc, #8]	; (801c5b4 <cyclic_timer+0x14>)
 801c5ac:	6820      	ldr	r0, [r4, #0]
 801c5ae:	f7ff ff45 	bl	801c43c <sys_timeout>
 801c5b2:	bd10      	pop	{r4, pc}
 801c5b4:	0801c5a1 	.word	0x0801c5a1

0801c5b8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801c5b8:	b538      	push	{r3, r4, r5, lr}
 801c5ba:	4604      	mov	r4, r0
 801c5bc:	460d      	mov	r5, r1
 801c5be:	e007      	b.n	801c5d0 <sys_timeouts_mbox_fetch+0x18>
  u32_t sleeptime;

again:
  if (!next_timeout) {
    sys_arch_mbox_fetch(mbox, msg, 0);
 801c5c0:	2200      	movs	r2, #0
 801c5c2:	4629      	mov	r1, r5
 801c5c4:	4620      	mov	r0, r4
 801c5c6:	f000 f8d6 	bl	801c776 <sys_arch_mbox_fetch>
    return;
 801c5ca:	bd38      	pop	{r3, r4, r5, pc}

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801c5cc:	f7ff fefe 	bl	801c3cc <sys_check_timeouts>
  if (!next_timeout) {
 801c5d0:	4b08      	ldr	r3, [pc, #32]	; (801c5f4 <sys_timeouts_mbox_fetch+0x3c>)
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d0f3      	beq.n	801c5c0 <sys_timeouts_mbox_fetch+0x8>
  sleeptime = sys_timeouts_sleeptime();
 801c5d8:	f7ff fede 	bl	801c398 <sys_timeouts_sleeptime>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801c5dc:	4602      	mov	r2, r0
 801c5de:	2800      	cmp	r0, #0
 801c5e0:	d0f4      	beq.n	801c5cc <sys_timeouts_mbox_fetch+0x14>
 801c5e2:	4629      	mov	r1, r5
 801c5e4:	4620      	mov	r0, r4
 801c5e6:	f000 f8c6 	bl	801c776 <sys_arch_mbox_fetch>
 801c5ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 801c5ee:	d0ed      	beq.n	801c5cc <sys_timeouts_mbox_fetch+0x14>
 801c5f0:	bd38      	pop	{r3, r4, r5, pc}
 801c5f2:	bf00      	nop
 801c5f4:	200102ec 	.word	0x200102ec

0801c5f8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5fa:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801c5fc:	8945      	ldrh	r5, [r0, #10]
 801c5fe:	2d0e      	cmp	r5, #14
 801c600:	d916      	bls.n	801c630 <ethernet_input+0x38>
 801c602:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c604:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c606:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c608:	7803      	ldrb	r3, [r0, #0]
 801c60a:	f013 0f01 	tst.w	r3, #1
 801c60e:	d00a      	beq.n	801c626 <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c610:	2b01      	cmp	r3, #1
 801c612:	d012      	beq.n	801c63a <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c614:	2206      	movs	r2, #6
 801c616:	4921      	ldr	r1, [pc, #132]	; (801c69c <ethernet_input+0xa4>)
 801c618:	f004 f95e 	bl	80208d8 <memcmp>
 801c61c:	b918      	cbnz	r0, 801c626 <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c61e:	7b63      	ldrb	r3, [r4, #13]
 801c620:	f043 0308 	orr.w	r3, r3, #8
 801c624:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801c626:	2e08      	cmp	r6, #8
 801c628:	d012      	beq.n	801c650 <ethernet_input+0x58>
 801c62a:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801c62e:	d022      	beq.n	801c676 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801c630:	4620      	mov	r0, r4
 801c632:	f7fb ff85 	bl	8018540 <pbuf_free>
  return ERR_OK;
}
 801c636:	2000      	movs	r0, #0
 801c638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c63a:	7843      	ldrb	r3, [r0, #1]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d1f2      	bne.n	801c626 <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c640:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c642:	2b5e      	cmp	r3, #94	; 0x5e
 801c644:	d1ef      	bne.n	801c626 <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 801c646:	7b63      	ldrb	r3, [r4, #13]
 801c648:	f043 0310 	orr.w	r3, r3, #16
 801c64c:	7363      	strb	r3, [r4, #13]
 801c64e:	e7ea      	b.n	801c626 <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c650:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c654:	f013 0f08 	tst.w	r3, #8
 801c658:	d0ea      	beq.n	801c630 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801c65a:	2d0d      	cmp	r5, #13
 801c65c:	dde8      	ble.n	801c630 <ethernet_input+0x38>
 801c65e:	f06f 010d 	mvn.w	r1, #13
 801c662:	4620      	mov	r0, r4
 801c664:	f7fb ff62 	bl	801852c <pbuf_header>
 801c668:	2800      	cmp	r0, #0
 801c66a:	d1e1      	bne.n	801c630 <ethernet_input+0x38>
        ip4_input(p, netif);
 801c66c:	4639      	mov	r1, r7
 801c66e:	4620      	mov	r0, r4
 801c670:	f7fa fc7a 	bl	8016f68 <ip4_input>
      break;
 801c674:	e7df      	b.n	801c636 <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c67a:	f013 0f08 	tst.w	r3, #8
 801c67e:	d0d7      	beq.n	801c630 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801c680:	2d0d      	cmp	r5, #13
 801c682:	ddd5      	ble.n	801c630 <ethernet_input+0x38>
 801c684:	f06f 010d 	mvn.w	r1, #13
 801c688:	4620      	mov	r0, r4
 801c68a:	f7fb ff4f 	bl	801852c <pbuf_header>
 801c68e:	2800      	cmp	r0, #0
 801c690:	d1ce      	bne.n	801c630 <ethernet_input+0x38>
        etharp_input(p, netif);
 801c692:	4639      	mov	r1, r7
 801c694:	4620      	mov	r0, r4
 801c696:	f7fa f881 	bl	801679c <etharp_input>
      break;
 801c69a:	e7cc      	b.n	801c636 <ethernet_input+0x3e>
 801c69c:	08026da0 	.word	0x08026da0

0801c6a0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801c6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6a4:	4605      	mov	r5, r0
 801c6a6:	460c      	mov	r4, r1
 801c6a8:	4616      	mov	r6, r2
 801c6aa:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c6ac:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801c6b0:	f7f9 fe63 	bl	801637a <lwip_htons>
 801c6b4:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801c6b6:	210e      	movs	r1, #14
 801c6b8:	4620      	mov	r0, r4
 801c6ba:	f7fb ff37 	bl	801852c <pbuf_header>
 801c6be:	b9e0      	cbnz	r0, 801c6fa <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801c6c0:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 801c6c2:	f8a3 800c 	strh.w	r8, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801c6c6:	683a      	ldr	r2, [r7, #0]
 801c6c8:	601a      	str	r2, [r3, #0]
 801c6ca:	88ba      	ldrh	r2, [r7, #4]
 801c6cc:	809a      	strh	r2, [r3, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 801c6ce:	6832      	ldr	r2, [r6, #0]
 801c6d0:	f8c3 2006 	str.w	r2, [r3, #6]
 801c6d4:	88b2      	ldrh	r2, [r6, #4]
 801c6d6:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c6d8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 801c6dc:	2b06      	cmp	r3, #6
 801c6de:	d006      	beq.n	801c6ee <ethernet_output+0x4e>
 801c6e0:	4b08      	ldr	r3, [pc, #32]	; (801c704 <ethernet_output+0x64>)
 801c6e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801c6e6:	4908      	ldr	r1, [pc, #32]	; (801c708 <ethernet_output+0x68>)
 801c6e8:	4808      	ldr	r0, [pc, #32]	; (801c70c <ethernet_output+0x6c>)
 801c6ea:	f003 fa00 	bl	801faee <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c6ee:	69ab      	ldr	r3, [r5, #24]
 801c6f0:	4621      	mov	r1, r4
 801c6f2:	4628      	mov	r0, r5
 801c6f4:	4798      	blx	r3
 801c6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c6fa:	f06f 0001 	mvn.w	r0, #1
}
 801c6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c702:	bf00      	nop
 801c704:	08026da8 	.word	0x08026da8
 801c708:	08026de0 	.word	0x08026de0
 801c70c:	080214f0 	.word	0x080214f0

0801c710 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c710:	b510      	push	{r4, lr}
 801c712:	b084      	sub	sp, #16
 801c714:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 801c716:	9100      	str	r1, [sp, #0]
 801c718:	2304      	movs	r3, #4
 801c71a:	9301      	str	r3, [sp, #4]
 801c71c:	2100      	movs	r1, #0
 801c71e:	9102      	str	r1, [sp, #8]
 801c720:	9103      	str	r1, [sp, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c722:	4668      	mov	r0, sp
 801c724:	f7f6 fb62 	bl	8012dec <osMessageCreate>
 801c728:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801c72a:	b110      	cbz	r0, 801c732 <sys_mbox_new+0x22>
  return ERR_MEM;
 
 return ERR_OK;
 801c72c:	2000      	movs	r0, #0
}
 801c72e:	b004      	add	sp, #16
 801c730:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 801c732:	f04f 30ff 	mov.w	r0, #4294967295
 801c736:	e7fa      	b.n	801c72e <sys_mbox_new+0x1e>

0801c738 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c738:	b510      	push	{r4, lr}
 801c73a:	4604      	mov	r4, r0
	if( osMessageWaiting(*mbox) )
 801c73c:	6800      	ldr	r0, [r0, #0]
 801c73e:	f7f6 fbed 	bl	8012f1c <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 801c742:	6820      	ldr	r0, [r4, #0]
 801c744:	f7f6 fbf7 	bl	8012f36 <osMessageDelete>
 801c748:	bd10      	pop	{r4, pc}

0801c74a <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801c74a:	b538      	push	{r3, r4, r5, lr}
 801c74c:	4605      	mov	r5, r0
 801c74e:	460c      	mov	r4, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801c750:	f04f 32ff 	mov.w	r2, #4294967295
 801c754:	4621      	mov	r1, r4
 801c756:	6828      	ldr	r0, [r5, #0]
 801c758:	f7f6 fb5c 	bl	8012e14 <osMessagePut>
 801c75c:	2800      	cmp	r0, #0
 801c75e:	d1f7      	bne.n	801c750 <sys_mbox_post+0x6>
}
 801c760:	bd38      	pop	{r3, r4, r5, pc}

0801c762 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c762:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c764:	2200      	movs	r2, #0
 801c766:	6800      	ldr	r0, [r0, #0]
 801c768:	f7f6 fb54 	bl	8012e14 <osMessagePut>
 801c76c:	b900      	cbnz	r0, 801c770 <sys_mbox_trypost+0xe>
#endif /* SYS_STATS */
			
   }

   return result;
}
 801c76e:	bd08      	pop	{r3, pc}
      result = ERR_MEM;
 801c770:	f04f 30ff 	mov.w	r0, #4294967295
 801c774:	e7fb      	b.n	801c76e <sys_mbox_trypost+0xc>

0801c776 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c776:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c778:	b089      	sub	sp, #36	; 0x24
 801c77a:	4606      	mov	r6, r0
 801c77c:	460f      	mov	r7, r1
 801c77e:	4615      	mov	r5, r2
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801c780:	f7f6 f9df 	bl	8012b42 <osKernelSysTick>
 801c784:	4604      	mov	r4, r0
  
  if(timeout != 0)
 801c786:	b185      	cbz	r5, 801c7aa <sys_arch_mbox_fetch+0x34>
  { 
    event = osMessageGet (*mbox, timeout);
 801c788:	462a      	mov	r2, r5
 801c78a:	6831      	ldr	r1, [r6, #0]
 801c78c:	a805      	add	r0, sp, #20
 801c78e:	f7f6 fb75 	bl	8012e7c <osMessageGet>
    
    if(event.status == osEventMessage)
 801c792:	9b05      	ldr	r3, [sp, #20]
 801c794:	2b10      	cmp	r3, #16
 801c796:	d002      	beq.n	801c79e <sys_arch_mbox_fetch+0x28>
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c798:	f04f 30ff 	mov.w	r0, #4294967295
 801c79c:	e015      	b.n	801c7ca <sys_arch_mbox_fetch+0x54>
      *msg = (void *)event.value.v;
 801c79e:	9b06      	ldr	r3, [sp, #24]
 801c7a0:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 801c7a2:	f7f6 f9ce 	bl	8012b42 <osKernelSysTick>
 801c7a6:	1b00      	subs	r0, r0, r4
 801c7a8:	e00f      	b.n	801c7ca <sys_arch_mbox_fetch+0x54>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801c7aa:	f04f 32ff 	mov.w	r2, #4294967295
 801c7ae:	6831      	ldr	r1, [r6, #0]
 801c7b0:	4668      	mov	r0, sp
 801c7b2:	f7f6 fb63 	bl	8012e7c <osMessageGet>
 801c7b6:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 801c7ba:	ab08      	add	r3, sp, #32
 801c7bc:	e903 0007 	stmdb	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c7c0:	9b06      	ldr	r3, [sp, #24]
 801c7c2:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 801c7c4:	f7f6 f9bd 	bl	8012b42 <osKernelSysTick>
 801c7c8:	1b00      	subs	r0, r0, r4
  }
}
 801c7ca:	b009      	add	sp, #36	; 0x24
 801c7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c7ce <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c7ce:	b510      	push	{r4, lr}
 801c7d0:	b084      	sub	sp, #16
 801c7d2:	460c      	mov	r4, r1
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 801c7d4:	2200      	movs	r2, #0
 801c7d6:	6801      	ldr	r1, [r0, #0]
 801c7d8:	a801      	add	r0, sp, #4
 801c7da:	f7f6 fb4f 	bl	8012e7c <osMessageGet>
  
  if(event.status == osEventMessage)
 801c7de:	9b01      	ldr	r3, [sp, #4]
 801c7e0:	2b10      	cmp	r3, #16
 801c7e2:	d003      	beq.n	801c7ec <sys_arch_mbox_tryfetch+0x1e>
    *msg = (void *)event.value.v;
    return ERR_OK;
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c7e4:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 801c7e8:	b004      	add	sp, #16
 801c7ea:	bd10      	pop	{r4, pc}
    *msg = (void *)event.value.v;
 801c7ec:	9b02      	ldr	r3, [sp, #8]
 801c7ee:	6023      	str	r3, [r4, #0]
    return ERR_OK;
 801c7f0:	2000      	movs	r0, #0
 801c7f2:	e7f9      	b.n	801c7e8 <sys_arch_mbox_tryfetch+0x1a>

0801c7f4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
  if (*mbox == SYS_MBOX_NULL) 
 801c7f4:	6803      	ldr	r3, [r0, #0]
 801c7f6:	b10b      	cbz	r3, 801c7fc <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 801c7f8:	2001      	movs	r0, #1
}                                             
 801c7fa:	4770      	bx	lr
    return 0;
 801c7fc:	2000      	movs	r0, #0
 801c7fe:	4770      	bx	lr

0801c800 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
  *mbox = SYS_MBOX_NULL;                      
 801c800:	2300      	movs	r3, #0
 801c802:	6003      	str	r3, [r0, #0]
 801c804:	4770      	bx	lr

0801c806 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c806:	b530      	push	{r4, r5, lr}
 801c808:	b083      	sub	sp, #12
 801c80a:	4604      	mov	r4, r0
 801c80c:	460d      	mov	r5, r1
  osSemaphoreDef(SEM);
 801c80e:	2300      	movs	r3, #0
 801c810:	9300      	str	r3, [sp, #0]
 801c812:	9301      	str	r3, [sp, #4]

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c814:	2101      	movs	r1, #1
 801c816:	4668      	mov	r0, sp
 801c818:	f7f6 fa4e 	bl	8012cb8 <osSemaphoreCreate>
 801c81c:	6020      	str	r0, [r4, #0]
	
  if(*sem == NULL)
 801c81e:	b140      	cbz	r0, 801c832 <sys_sem_new+0x2c>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
  }
	
  if(count == 0)	// Means it can't be taken
 801c820:	b115      	cbz	r5, 801c828 <sys_sem_new+0x22>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 801c822:	2000      	movs	r0, #0
}
 801c824:	b003      	add	sp, #12
 801c826:	bd30      	pop	{r4, r5, pc}
    osSemaphoreWait(*sem,0);
 801c828:	2100      	movs	r1, #0
 801c82a:	f7f6 fa6b 	bl	8012d04 <osSemaphoreWait>
	return ERR_OK;
 801c82e:	2000      	movs	r0, #0
 801c830:	e7f8      	b.n	801c824 <sys_sem_new+0x1e>
		return ERR_MEM;
 801c832:	f04f 30ff 	mov.w	r0, #4294967295
 801c836:	e7f5      	b.n	801c824 <sys_sem_new+0x1e>

0801c838 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c838:	b570      	push	{r4, r5, r6, lr}
 801c83a:	4604      	mov	r4, r0
 801c83c:	460e      	mov	r6, r1
  uint32_t starttime = osKernelSysTick();
 801c83e:	f7f6 f980 	bl	8012b42 <osKernelSysTick>
 801c842:	4605      	mov	r5, r0
  
  if(timeout != 0)
 801c844:	b956      	cbnz	r6, 801c85c <sys_arch_sem_wait+0x24>
      return SYS_ARCH_TIMEOUT;
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c846:	f04f 31ff 	mov.w	r1, #4294967295
 801c84a:	6820      	ldr	r0, [r4, #0]
 801c84c:	f7f6 fa5a 	bl	8012d04 <osSemaphoreWait>
 801c850:	2800      	cmp	r0, #0
 801c852:	d1f8      	bne.n	801c846 <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 801c854:	f7f6 f975 	bl	8012b42 <osKernelSysTick>
 801c858:	1b40      	subs	r0, r0, r5
 801c85a:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c85c:	4631      	mov	r1, r6
 801c85e:	6820      	ldr	r0, [r4, #0]
 801c860:	f7f6 fa50 	bl	8012d04 <osSemaphoreWait>
 801c864:	b110      	cbz	r0, 801c86c <sys_arch_sem_wait+0x34>
      return SYS_ARCH_TIMEOUT;
 801c866:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 801c86a:	bd70      	pop	{r4, r5, r6, pc}
      return (osKernelSysTick() - starttime);
 801c86c:	f7f6 f969 	bl	8012b42 <osKernelSysTick>
 801c870:	1b40      	subs	r0, r0, r5
 801c872:	bd70      	pop	{r4, r5, r6, pc}

0801c874 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c874:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 801c876:	6800      	ldr	r0, [r0, #0]
 801c878:	f7f6 fa7e 	bl	8012d78 <osSemaphoreRelease>
 801c87c:	bd08      	pop	{r3, pc}

0801c87e <sys_sem_free>:
}

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c87e:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 801c880:	6800      	ldr	r0, [r0, #0]
 801c882:	f7f6 faa7 	bl	8012dd4 <osSemaphoreDelete>
 801c886:	bd08      	pop	{r3, pc}

0801c888 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
  if (*sem == SYS_SEM_NULL)
 801c888:	6803      	ldr	r3, [r0, #0]
 801c88a:	b10b      	cbz	r3, 801c890 <sys_sem_valid+0x8>
    return 0;
  else
    return 1;                                       
 801c88c:	2001      	movs	r0, #1
}
 801c88e:	4770      	bx	lr
    return 0;
 801c890:	2000      	movs	r0, #0
 801c892:	4770      	bx	lr

0801c894 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 801c894:	2300      	movs	r3, #0
 801c896:	6003      	str	r3, [r0, #0]
 801c898:	4770      	bx	lr
	...

0801c89c <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801c89c:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c89e:	4803      	ldr	r0, [pc, #12]	; (801c8ac <sys_init+0x10>)
 801c8a0:	f7f6 f997 	bl	8012bd2 <osMutexCreate>
 801c8a4:	4b02      	ldr	r3, [pc, #8]	; (801c8b0 <sys_init+0x14>)
 801c8a6:	6018      	str	r0, [r3, #0]
 801c8a8:	bd08      	pop	{r3, pc}
 801c8aa:	bf00      	nop
 801c8ac:	08026e1c 	.word	0x08026e1c
 801c8b0:	20015ce0 	.word	0x20015ce0

0801c8b4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c8b4:	b510      	push	{r4, lr}
 801c8b6:	b082      	sub	sp, #8
 801c8b8:	4604      	mov	r4, r0
  
  osMutexDef(MUTEX);
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	9300      	str	r3, [sp, #0]
 801c8be:	9301      	str	r3, [sp, #4]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c8c0:	4668      	mov	r0, sp
 801c8c2:	f7f6 f986 	bl	8012bd2 <osMutexCreate>
 801c8c6:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801c8c8:	b110      	cbz	r0, 801c8d0 <sys_mutex_new+0x1c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c8ca:	2000      	movs	r0, #0
}
 801c8cc:	b002      	add	sp, #8
 801c8ce:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 801c8d0:	f04f 30ff 	mov.w	r0, #4294967295
 801c8d4:	e7fa      	b.n	801c8cc <sys_mutex_new+0x18>

0801c8d6 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c8d6:	b508      	push	{r3, lr}
  osMutexWait (*mutex, osWaitForever);
 801c8d8:	f04f 31ff 	mov.w	r1, #4294967295
 801c8dc:	6800      	ldr	r0, [r0, #0]
 801c8de:	f7f6 f983 	bl	8012be8 <osMutexWait>
 801c8e2:	bd08      	pop	{r3, pc}

0801c8e4 <sys_mutex_unlock>:
}

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c8e4:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 801c8e6:	6800      	ldr	r0, [r0, #0]
 801c8e8:	f7f6 f9b8 	bl	8012c5c <osMutexRelease>
 801c8ec:	bd08      	pop	{r3, pc}

0801c8ee <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c8ee:	b510      	push	{r4, lr}
 801c8f0:	b088      	sub	sp, #32
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c8f2:	2400      	movs	r4, #0
 801c8f4:	9403      	str	r4, [sp, #12]
 801c8f6:	9404      	str	r4, [sp, #16]
 801c8f8:	9406      	str	r4, [sp, #24]
 801c8fa:	9407      	str	r4, [sp, #28]
 801c8fc:	9001      	str	r0, [sp, #4]
 801c8fe:	9102      	str	r1, [sp, #8]
 801c900:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c904:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c908:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 801c90a:	4611      	mov	r1, r2
 801c90c:	a801      	add	r0, sp, #4
 801c90e:	f7f6 f922 	bl	8012b56 <osThreadCreate>
}
 801c912:	b008      	add	sp, #32
 801c914:	bd10      	pop	{r4, pc}
	...

0801c918 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c918:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c91a:	f04f 31ff 	mov.w	r1, #4294967295
 801c91e:	4b03      	ldr	r3, [pc, #12]	; (801c92c <sys_arch_protect+0x14>)
 801c920:	6818      	ldr	r0, [r3, #0]
 801c922:	f7f6 f961 	bl	8012be8 <osMutexWait>
  return (sys_prot_t)1;
}
 801c926:	2001      	movs	r0, #1
 801c928:	bd08      	pop	{r3, pc}
 801c92a:	bf00      	nop
 801c92c:	20015ce0 	.word	0x20015ce0

0801c930 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c930:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c932:	4b02      	ldr	r3, [pc, #8]	; (801c93c <sys_arch_unprotect+0xc>)
 801c934:	6818      	ldr	r0, [r3, #0]
 801c936:	f7f6 f991 	bl	8012c5c <osMutexRelease>
 801c93a:	bd08      	pop	{r3, pc}
 801c93c:	20015ce0 	.word	0x20015ce0

0801c940 <is_exp_of_2>:

/*Checks if argument is power of 2 --------------------------------------- */

static uint8_t is_exp_of_2(uint32_t n)
{
    return ( n & (n - 1) ) == 0;
 801c940:	1e43      	subs	r3, r0, #1
 801c942:	4218      	tst	r0, r3
}
 801c944:	bf0c      	ite	eq
 801c946:	2001      	moveq	r0, #1
 801c948:	2000      	movne	r0, #0
 801c94a:	4770      	bx	lr

0801c94c <CB_Init>:

/* Circular buffer initiation function ----------------------------------- */

error_t CB_Init(circbuff *cb, uint32_t buf_size) {
 801c94c:	b538      	push	{r3, r4, r5, lr}
 801c94e:	4605      	mov	r5, r0
 801c950:	460c      	mov	r4, r1
	if (!is_exp_of_2(buf_size)) return SIZE_ERR;
 801c952:	4608      	mov	r0, r1
 801c954:	f7ff fff4 	bl	801c940 <is_exp_of_2>
 801c958:	b908      	cbnz	r0, 801c95e <CB_Init+0x12>
 801c95a:	2004      	movs	r0, #4
 801c95c:	bd38      	pop	{r3, r4, r5, pc}
						/* return error if buffer size is not power of 2 */
	cb->size = buf_size;
 801c95e:	606c      	str	r4, [r5, #4]
	cb->read_pos = 0;
 801c960:	2300      	movs	r3, #0
 801c962:	60ab      	str	r3, [r5, #8]
	cb->write_pos = 0;
 801c964:	60eb      	str	r3, [r5, #12]
	cb->buf = (uint8_t*) pvPortMalloc(buf_size * sizeof(uint8_t));
 801c966:	4620      	mov	r0, r4
 801c968:	f7f6 fd34 	bl	80133d4 <pvPortMalloc>
 801c96c:	6028      	str	r0, [r5, #0]
	if (cb->buf == NULL) {
 801c96e:	b108      	cbz	r0, 801c974 <CB_Init+0x28>
		return MEM_ERR;
	}
	return NO_ERR;
 801c970:	2000      	movs	r0, #0
}
 801c972:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ERR;
 801c974:	2001      	movs	r0, #1
 801c976:	bd38      	pop	{r3, r4, r5, pc}

0801c978 <CB_Data_Length>:

/* Returns length of data in buffer ---------------------------------------*/

uint32_t CB_Data_Length(circbuff *cb) {
	return ((cb->write_pos - cb->read_pos) & (cb->size - 1));
 801c978:	68c3      	ldr	r3, [r0, #12]
 801c97a:	6882      	ldr	r2, [r0, #8]
 801c97c:	1a9a      	subs	r2, r3, r2
 801c97e:	6843      	ldr	r3, [r0, #4]
 801c980:	3b01      	subs	r3, #1
}
 801c982:	ea02 0003 	and.w	r0, r2, r3
 801c986:	4770      	bx	lr

0801c988 <CB_Write>:

/* Write new element to buffer --------------------------------------------*/

error_t CB_Write(circbuff *cb, uint8_t item){
 801c988:	b538      	push	{r3, r4, r5, lr}
 801c98a:	4604      	mov	r4, r0
 801c98c:	460d      	mov	r5, r1
	if (CB_Data_Length(cb) >= (cb->size - 1)){
 801c98e:	f7ff fff3 	bl	801c978 <CB_Data_Length>
 801c992:	6863      	ldr	r3, [r4, #4]
 801c994:	3b01      	subs	r3, #1
 801c996:	4298      	cmp	r0, r3
 801c998:	d301      	bcc.n	801c99e <CB_Write+0x16>
		return FULL_ERR;
 801c99a:	2003      	movs	r0, #3
	}
	cb->buf[cb->write_pos] = item;
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
	return NO_ERR;
}
 801c99c:	bd38      	pop	{r3, r4, r5, pc}
	cb->buf[cb->write_pos] = item;
 801c99e:	6822      	ldr	r2, [r4, #0]
 801c9a0:	68e3      	ldr	r3, [r4, #12]
 801c9a2:	54d5      	strb	r5, [r2, r3]
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
 801c9a4:	68e3      	ldr	r3, [r4, #12]
 801c9a6:	3301      	adds	r3, #1
 801c9a8:	6862      	ldr	r2, [r4, #4]
 801c9aa:	3a01      	subs	r2, #1
 801c9ac:	4013      	ands	r3, r2
 801c9ae:	60e3      	str	r3, [r4, #12]
	return NO_ERR;
 801c9b0:	2000      	movs	r0, #0
 801c9b2:	bd38      	pop	{r3, r4, r5, pc}

0801c9b4 <CB_Read>:

/* Read element from buffer -----------------------------------------------*/

error_t CB_Read(circbuff *cb, uint8_t * item){
 801c9b4:	b538      	push	{r3, r4, r5, lr}
 801c9b6:	4604      	mov	r4, r0
 801c9b8:	460d      	mov	r5, r1
	if (CB_Data_Length(cb) == 0){
 801c9ba:	f7ff ffdd 	bl	801c978 <CB_Data_Length>
 801c9be:	b908      	cbnz	r0, 801c9c4 <CB_Read+0x10>
		return EMPTY_ERR;
 801c9c0:	2002      	movs	r0, #2
	}
	*item = cb->buf[cb->read_pos];
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
	return NO_ERR;
}
 801c9c2:	bd38      	pop	{r3, r4, r5, pc}
	*item = cb->buf[cb->read_pos];
 801c9c4:	6822      	ldr	r2, [r4, #0]
 801c9c6:	68a3      	ldr	r3, [r4, #8]
 801c9c8:	5cd3      	ldrb	r3, [r2, r3]
 801c9ca:	702b      	strb	r3, [r5, #0]
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
 801c9cc:	68a3      	ldr	r3, [r4, #8]
 801c9ce:	3301      	adds	r3, #1
 801c9d0:	6862      	ldr	r2, [r4, #4]
 801c9d2:	3a01      	subs	r2, #1
 801c9d4:	4013      	ands	r3, r2
 801c9d6:	60a3      	str	r3, [r4, #8]
	return NO_ERR;
 801c9d8:	2000      	movs	r0, #0
 801c9da:	bd38      	pop	{r3, r4, r5, pc}

0801c9dc <FlashInit>:
SN_LS_ADDR,
MAC_02_01_ADDR,
MAC_04_03_ADDR,
MAC_06_05_ADDR };

void FlashInit() {
 801c9dc:	b510      	push	{r4, lr}
 801c9de:	b082      	sub	sp, #8

	uint16_t mem_key;
	EE_ReadVariable(MEM_KEY_ADDR, &mem_key); /* Memory key reading */
 801c9e0:	f10d 0106 	add.w	r1, sp, #6
 801c9e4:	2000      	movs	r0, #0
 801c9e6:	f000 fa2d 	bl	801ce44 <EE_ReadVariable>
	if (mem_key != MEMORY_KEY) { /* First launching of device */
 801c9ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801c9ee:	f64f 63ed 	movw	r3, #65261	; 0xfeed
 801c9f2:	429a      	cmp	r2, r3
 801c9f4:	d04d      	beq.n	801ca92 <FlashInit+0xb6>
		/* Default FLASH initialization --------------------- */
		EE_WriteVariable(MEM_KEY_ADDR, MEMORY_KEY);
 801c9f6:	4619      	mov	r1, r3
 801c9f8:	2000      	movs	r0, #0
 801c9fa:	f000 fbdf 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(IP_02_01_ADDR, DEFAULT_IP_02_01);
 801c9fe:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 801ca02:	2001      	movs	r0, #1
 801ca04:	f000 fbda 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(IP_04_03_ADDR, DEFAULT_IP_04_03);
 801ca08:	f64f 5104 	movw	r1, #64772	; 0xfd04
 801ca0c:	2002      	movs	r0, #2
 801ca0e:	f000 fbd5 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(BR_MS_ADDR, DEFAULT_BR_MS);
 801ca12:	2102      	movs	r1, #2
 801ca14:	2003      	movs	r0, #3
 801ca16:	f000 fbd1 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(BR_LS_ADDR, DEFAULT_BR_LS);
 801ca1a:	f64d 416c 	movw	r1, #56428	; 0xdc6c
 801ca1e:	2004      	movs	r0, #4
 801ca20:	f000 fbcc 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(MPI_ADRR_ADDR, DEFAULT_MPI_ADDR);
 801ca24:	2100      	movs	r1, #0
 801ca26:	2005      	movs	r0, #5
 801ca28:	f000 fbc8 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(PORT_ADRR, DEFAULT_PORT);
 801ca2c:	2166      	movs	r1, #102	; 0x66
 801ca2e:	2006      	movs	r0, #6
 801ca30:	f000 fbc4 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(MASK_02_01_ADDR, DEFAULT_MASK_02_01);
 801ca34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ca38:	2007      	movs	r0, #7
 801ca3a:	f000 fbbf 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(MASK_04_03_ADDR, DEFAULT_MASK_04_03);
 801ca3e:	21ff      	movs	r1, #255	; 0xff
 801ca40:	2008      	movs	r0, #8
 801ca42:	f000 fbbb 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(GATE_02_01_ADDR, DEFAULT_GATE_02_01);
 801ca46:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 801ca4a:	2009      	movs	r0, #9
 801ca4c:	f000 fbb6 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(GATE_04_03_ADDR, DEFAULT_GATE_04_03);
 801ca50:	f44f 7182 	mov.w	r1, #260	; 0x104
 801ca54:	200a      	movs	r0, #10
 801ca56:	f000 fbb1 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(SN_MS_ADDR, DEFAULT_SN_MS);
 801ca5a:	2100      	movs	r1, #0
 801ca5c:	200b      	movs	r0, #11
 801ca5e:	f000 fbad 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(SN_LS_ADDR, DEFAULT_SN_LS);
 801ca62:	2100      	movs	r1, #0
 801ca64:	200c      	movs	r0, #12
 801ca66:	f000 fba9 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(MAC_02_01_ADDR, DEFAULT_MAC_02_01);
 801ca6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ca6e:	2010      	movs	r0, #16
 801ca70:	f000 fba4 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(MAC_04_03_ADDR, DEFAULT_MAC_04_03);
 801ca74:	f244 21a2 	movw	r1, #17058	; 0x42a2
 801ca78:	2011      	movs	r0, #17
 801ca7a:	f000 fb9f 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(MAC_06_05_ADDR, DEFAULT_MAC_06_05);
 801ca7e:	f24e 4150 	movw	r1, #58448	; 0xe450
 801ca82:	2012      	movs	r0, #18
 801ca84:	f000 fb9a 	bl	801d1bc <EE_WriteVariable>
		EE_WriteVariable(WEB_PORT_ADRR, DEFAULT_WEB_PORT);
 801ca88:	f64b 7167 	movw	r1, #48999	; 0xbf67
 801ca8c:	2013      	movs	r0, #19
 801ca8e:	f000 fb95 	bl	801d1bc <EE_WriteVariable>
		uint16_t ui16[2];
		uint8_t ui8[4];
	} tmp_u;

	/*baud rate */
	EE_ReadVariable(BR_MS_ADDR, &tmp_u.ui16[1]);
 801ca92:	f10d 0102 	add.w	r1, sp, #2
 801ca96:	2003      	movs	r0, #3
 801ca98:	f000 f9d4 	bl	801ce44 <EE_ReadVariable>
	EE_ReadVariable(BR_LS_ADDR, &tmp_u.ui16[0]);
 801ca9c:	4669      	mov	r1, sp
 801ca9e:	2004      	movs	r0, #4
 801caa0:	f000 f9d0 	bl	801ce44 <EE_ReadVariable>
	hflash.speed = tmp_u.ui32;
 801caa4:	4c42      	ldr	r4, [pc, #264]	; (801cbb0 <FlashInit+0x1d4>)
 801caa6:	9b00      	ldr	r3, [sp, #0]
 801caa8:	6023      	str	r3, [r4, #0]
	/* IP-address */
	EE_ReadVariable(IP_02_01_ADDR, &tmp_u.ui16[0]);
 801caaa:	4669      	mov	r1, sp
 801caac:	2001      	movs	r0, #1
 801caae:	f000 f9c9 	bl	801ce44 <EE_ReadVariable>
	EE_ReadVariable(IP_04_03_ADDR, &tmp_u.ui16[1]);
 801cab2:	f10d 0102 	add.w	r1, sp, #2
 801cab6:	2002      	movs	r0, #2
 801cab8:	f000 f9c4 	bl	801ce44 <EE_ReadVariable>
	hflash.IP_addr[0] = tmp_u.ui8[0];
 801cabc:	f89d 3000 	ldrb.w	r3, [sp]
 801cac0:	71a3      	strb	r3, [r4, #6]
	hflash.IP_addr[1] = tmp_u.ui8[1];
 801cac2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801cac6:	71e3      	strb	r3, [r4, #7]
	hflash.IP_addr[2] = tmp_u.ui8[2];
 801cac8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801cacc:	7223      	strb	r3, [r4, #8]
	hflash.IP_addr[3] = tmp_u.ui8[3];
 801cace:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801cad2:	7263      	strb	r3, [r4, #9]
	/* MPI/Profibus address */
	EE_ReadVariable(MPI_ADRR_ADDR, &hflash.own_addr);
 801cad4:	1d21      	adds	r1, r4, #4
 801cad6:	2005      	movs	r0, #5
 801cad8:	f000 f9b4 	bl	801ce44 <EE_ReadVariable>
	/* Subnet mask */
	EE_ReadVariable(MASK_02_01_ADDR, &tmp_u.ui16[0]);
 801cadc:	4669      	mov	r1, sp
 801cade:	2007      	movs	r0, #7
 801cae0:	f000 f9b0 	bl	801ce44 <EE_ReadVariable>
	EE_ReadVariable(MASK_04_03_ADDR, &tmp_u.ui16[1]);
 801cae4:	f10d 0102 	add.w	r1, sp, #2
 801cae8:	2008      	movs	r0, #8
 801caea:	f000 f9ab 	bl	801ce44 <EE_ReadVariable>
	hflash.mask[0] = tmp_u.ui8[0];
 801caee:	f89d 3000 	ldrb.w	r3, [sp]
 801caf2:	72a3      	strb	r3, [r4, #10]
	hflash.mask[1] = tmp_u.ui8[1];
 801caf4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801caf8:	72e3      	strb	r3, [r4, #11]
	hflash.mask[2] = tmp_u.ui8[2];
 801cafa:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801cafe:	7323      	strb	r3, [r4, #12]
	hflash.mask[3] = tmp_u.ui8[3];
 801cb00:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801cb04:	7363      	strb	r3, [r4, #13]
	/* Gateway */
	EE_ReadVariable(GATE_02_01_ADDR, &tmp_u.ui16[0]);
 801cb06:	4669      	mov	r1, sp
 801cb08:	2009      	movs	r0, #9
 801cb0a:	f000 f99b 	bl	801ce44 <EE_ReadVariable>
	EE_ReadVariable(GATE_04_03_ADDR, &tmp_u.ui16[1]);
 801cb0e:	f10d 0102 	add.w	r1, sp, #2
 801cb12:	200a      	movs	r0, #10
 801cb14:	f000 f996 	bl	801ce44 <EE_ReadVariable>
	hflash.gate[0] = tmp_u.ui8[0];
 801cb18:	f89d 3000 	ldrb.w	r3, [sp]
 801cb1c:	73a3      	strb	r3, [r4, #14]
	hflash.gate[1] = tmp_u.ui8[1];
 801cb1e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801cb22:	73e3      	strb	r3, [r4, #15]
	hflash.gate[2] = tmp_u.ui8[2];
 801cb24:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801cb28:	7423      	strb	r3, [r4, #16]
	hflash.gate[3] = tmp_u.ui8[3];
 801cb2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801cb2e:	7463      	strb	r3, [r4, #17]
	/* Port number */
	EE_ReadVariable(PORT_ADRR, &hflash.port);
 801cb30:	f104 0112 	add.w	r1, r4, #18
 801cb34:	2006      	movs	r0, #6
 801cb36:	f000 f985 	bl	801ce44 <EE_ReadVariable>
	/* Web port number */
	EE_ReadVariable(WEB_PORT_ADRR, &hflash.web_port);
 801cb3a:	f104 0124 	add.w	r1, r4, #36	; 0x24
 801cb3e:	2013      	movs	r0, #19
 801cb40:	f000 f980 	bl	801ce44 <EE_ReadVariable>
	/* Serial number */
	EE_ReadVariable(SN_MS_ADDR, &tmp_u.ui16[1]);
 801cb44:	f10d 0102 	add.w	r1, sp, #2
 801cb48:	200b      	movs	r0, #11
 801cb4a:	f000 f97b 	bl	801ce44 <EE_ReadVariable>
	EE_ReadVariable(SN_LS_ADDR, &tmp_u.ui16[0]);
 801cb4e:	4669      	mov	r1, sp
 801cb50:	200c      	movs	r0, #12
 801cb52:	f000 f977 	bl	801ce44 <EE_ReadVariable>
	hflash.serial_num = tmp_u.ui32;
 801cb56:	9b00      	ldr	r3, [sp, #0]
 801cb58:	6163      	str	r3, [r4, #20]
	/* MAC address */
	EE_ReadVariable(MAC_02_01_ADDR, &tmp_u.ui16[0]);
 801cb5a:	4669      	mov	r1, sp
 801cb5c:	2010      	movs	r0, #16
 801cb5e:	f000 f971 	bl	801ce44 <EE_ReadVariable>
	EE_ReadVariable(MAC_04_03_ADDR, &tmp_u.ui16[1]);
 801cb62:	f10d 0102 	add.w	r1, sp, #2
 801cb66:	2011      	movs	r0, #17
 801cb68:	f000 f96c 	bl	801ce44 <EE_ReadVariable>
	hflash.mac_addr[0] = tmp_u.ui8[0];
 801cb6c:	f89d 3000 	ldrb.w	r3, [sp]
 801cb70:	77a3      	strb	r3, [r4, #30]
	hflash.mac_addr[1] = tmp_u.ui8[1];
 801cb72:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801cb76:	77e3      	strb	r3, [r4, #31]
	hflash.mac_addr[2] = tmp_u.ui8[2];
 801cb78:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801cb7c:	f884 3020 	strb.w	r3, [r4, #32]
	hflash.mac_addr[3] = tmp_u.ui8[3];
 801cb80:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801cb84:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	EE_ReadVariable(MAC_06_05_ADDR, &tmp_u.ui16[0]);
 801cb88:	4669      	mov	r1, sp
 801cb8a:	2012      	movs	r0, #18
 801cb8c:	f000 f95a 	bl	801ce44 <EE_ReadVariable>
	hflash.mac_addr[4] = tmp_u.ui8[0];
 801cb90:	f89d 3000 	ldrb.w	r3, [sp]
 801cb94:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	hflash.mac_addr[5] = tmp_u.ui8[1];
 801cb98:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801cb9c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

	hflash.ver[0] = VER1;
 801cba0:	2301      	movs	r3, #1
 801cba2:	8323      	strh	r3, [r4, #24]
	hflash.ver[1] = VER2;
 801cba4:	8363      	strh	r3, [r4, #26]
	hflash.ver[2] = VER3;
 801cba6:	2300      	movs	r3, #0
 801cba8:	83a3      	strh	r3, [r4, #28]
	/* ------------------------------------------------------- */
}
 801cbaa:	b002      	add	sp, #8
 801cbac:	bd10      	pop	{r4, pc}
 801cbae:	bf00      	nop
 801cbb0:	20015ce4 	.word	0x20015ce4

0801cbb4 <SaveFash>:

void SaveFash(void) {
 801cbb4:	b570      	push	{r4, r5, r6, lr}
		uint8_t ui8[4];
	} tmp_u;

	/*baud rate */

	tmp_u.ui32 = hflash.speed ;
 801cbb6:	4d40      	ldr	r5, [pc, #256]	; (801ccb8 <SaveFash+0x104>)
 801cbb8:	682e      	ldr	r6, [r5, #0]
 801cbba:	4634      	mov	r4, r6
	EE_WriteVariable(BR_MS_ADDR, tmp_u.ui16[1]);
 801cbbc:	0c31      	lsrs	r1, r6, #16
 801cbbe:	2003      	movs	r0, #3
 801cbc0:	f000 fafc 	bl	801d1bc <EE_WriteVariable>
	EE_WriteVariable(BR_LS_ADDR, tmp_u.ui16[0]);
 801cbc4:	b2b1      	uxth	r1, r6
 801cbc6:	2004      	movs	r0, #4
 801cbc8:	f000 faf8 	bl	801d1bc <EE_WriteVariable>
	/* IP-address */
	tmp_u.ui8[0] = hflash.IP_addr[0];
 801cbcc:	79ab      	ldrb	r3, [r5, #6]
 801cbce:	f363 0407 	bfi	r4, r3, #0, #8
	tmp_u.ui8[1] = hflash.IP_addr[1];
 801cbd2:	79eb      	ldrb	r3, [r5, #7]
 801cbd4:	f363 240f 	bfi	r4, r3, #8, #8
	tmp_u.ui8[2] = hflash.IP_addr[2];
 801cbd8:	7a2b      	ldrb	r3, [r5, #8]
 801cbda:	f363 4417 	bfi	r4, r3, #16, #8
	tmp_u.ui8[3] = hflash.IP_addr[3];
 801cbde:	7a6b      	ldrb	r3, [r5, #9]
 801cbe0:	f363 641f 	bfi	r4, r3, #24, #8
	EE_WriteVariable(IP_02_01_ADDR, tmp_u.ui16[0]);
 801cbe4:	b2a1      	uxth	r1, r4
 801cbe6:	2001      	movs	r0, #1
 801cbe8:	f000 fae8 	bl	801d1bc <EE_WriteVariable>
	EE_WriteVariable(IP_04_03_ADDR, tmp_u.ui16[1]);
 801cbec:	0c21      	lsrs	r1, r4, #16
 801cbee:	2002      	movs	r0, #2
 801cbf0:	f000 fae4 	bl	801d1bc <EE_WriteVariable>
	/* MPI/Profibus address */
	EE_WriteVariable(MPI_ADRR_ADDR, hflash.own_addr);
 801cbf4:	88a9      	ldrh	r1, [r5, #4]
 801cbf6:	2005      	movs	r0, #5
 801cbf8:	f000 fae0 	bl	801d1bc <EE_WriteVariable>
	/* Subnet mask */
	tmp_u.ui8[0] = hflash.mask[0];
 801cbfc:	7aab      	ldrb	r3, [r5, #10]
 801cbfe:	f363 0407 	bfi	r4, r3, #0, #8
	tmp_u.ui8[1] = hflash.mask[1];
 801cc02:	7aeb      	ldrb	r3, [r5, #11]
 801cc04:	f363 240f 	bfi	r4, r3, #8, #8
	tmp_u.ui8[2] = hflash.mask[2];
 801cc08:	7b2b      	ldrb	r3, [r5, #12]
 801cc0a:	f363 4417 	bfi	r4, r3, #16, #8
	tmp_u.ui8[3] = hflash.mask[3];
 801cc0e:	7b6b      	ldrb	r3, [r5, #13]
 801cc10:	f363 641f 	bfi	r4, r3, #24, #8
	EE_WriteVariable(MASK_02_01_ADDR, tmp_u.ui16[0]);
 801cc14:	b2a1      	uxth	r1, r4
 801cc16:	2007      	movs	r0, #7
 801cc18:	f000 fad0 	bl	801d1bc <EE_WriteVariable>
	EE_WriteVariable(MASK_04_03_ADDR, tmp_u.ui16[1]);
 801cc1c:	0c21      	lsrs	r1, r4, #16
 801cc1e:	2008      	movs	r0, #8
 801cc20:	f000 facc 	bl	801d1bc <EE_WriteVariable>
	/* Gateway */
	tmp_u.ui8[0] = hflash.gate[0];
 801cc24:	7bab      	ldrb	r3, [r5, #14]
 801cc26:	f363 0407 	bfi	r4, r3, #0, #8
	tmp_u.ui8[1] = hflash.gate[1];
 801cc2a:	7beb      	ldrb	r3, [r5, #15]
 801cc2c:	f363 240f 	bfi	r4, r3, #8, #8
	tmp_u.ui8[2] = hflash.gate[2];
 801cc30:	7c2b      	ldrb	r3, [r5, #16]
 801cc32:	f363 4417 	bfi	r4, r3, #16, #8
	tmp_u.ui8[3] = hflash.gate[3];
 801cc36:	7c6b      	ldrb	r3, [r5, #17]
 801cc38:	f363 641f 	bfi	r4, r3, #24, #8
	EE_WriteVariable(GATE_02_01_ADDR, tmp_u.ui16[0]);
 801cc3c:	b2a1      	uxth	r1, r4
 801cc3e:	2009      	movs	r0, #9
 801cc40:	f000 fabc 	bl	801d1bc <EE_WriteVariable>
	EE_WriteVariable(GATE_04_03_ADDR, tmp_u.ui16[1]);
 801cc44:	0c21      	lsrs	r1, r4, #16
 801cc46:	200a      	movs	r0, #10
 801cc48:	f000 fab8 	bl	801d1bc <EE_WriteVariable>
	/* Port number */
	EE_WriteVariable(PORT_ADRR, hflash.port);
 801cc4c:	8a69      	ldrh	r1, [r5, #18]
 801cc4e:	2006      	movs	r0, #6
 801cc50:	f000 fab4 	bl	801d1bc <EE_WriteVariable>
	/* Web-port number */
	EE_WriteVariable(WEB_PORT_ADRR, hflash.web_port);
 801cc54:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 801cc56:	2013      	movs	r0, #19
 801cc58:	f000 fab0 	bl	801d1bc <EE_WriteVariable>
	/* Serial number */
	tmp_u.ui32 = hflash.serial_num;
 801cc5c:	696e      	ldr	r6, [r5, #20]
 801cc5e:	4634      	mov	r4, r6
	EE_WriteVariable(SN_MS_ADDR, tmp_u.ui16[1]);
 801cc60:	0c31      	lsrs	r1, r6, #16
 801cc62:	200b      	movs	r0, #11
 801cc64:	f000 faaa 	bl	801d1bc <EE_WriteVariable>
	EE_WriteVariable(SN_LS_ADDR, tmp_u.ui16[0]);
 801cc68:	b2b1      	uxth	r1, r6
 801cc6a:	200c      	movs	r0, #12
 801cc6c:	f000 faa6 	bl	801d1bc <EE_WriteVariable>
	/* MAC address */
	tmp_u.ui8[0] = hflash.mac_addr[0];
 801cc70:	7fab      	ldrb	r3, [r5, #30]
 801cc72:	f363 0407 	bfi	r4, r3, #0, #8
	tmp_u.ui8[1] = hflash.mac_addr[1];
 801cc76:	7feb      	ldrb	r3, [r5, #31]
 801cc78:	f363 240f 	bfi	r4, r3, #8, #8
	tmp_u.ui8[2] = hflash.mac_addr[2];
 801cc7c:	f895 3020 	ldrb.w	r3, [r5, #32]
 801cc80:	f363 4417 	bfi	r4, r3, #16, #8
	tmp_u.ui8[3] = hflash.mac_addr[3];
 801cc84:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 801cc88:	f363 641f 	bfi	r4, r3, #24, #8
	EE_WriteVariable(MAC_02_01_ADDR, tmp_u.ui16[0]);
 801cc8c:	b2a1      	uxth	r1, r4
 801cc8e:	2010      	movs	r0, #16
 801cc90:	f000 fa94 	bl	801d1bc <EE_WriteVariable>
	EE_WriteVariable(MAC_04_03_ADDR, tmp_u.ui16[1]);
 801cc94:	0c21      	lsrs	r1, r4, #16
 801cc96:	2011      	movs	r0, #17
 801cc98:	f000 fa90 	bl	801d1bc <EE_WriteVariable>
	tmp_u.ui8[0] = hflash.mac_addr[4];
 801cc9c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 801cca0:	f363 0407 	bfi	r4, r3, #0, #8
	tmp_u.ui8[1] = hflash.mac_addr[5];
 801cca4:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801cca8:	f363 240f 	bfi	r4, r3, #8, #8
	EE_WriteVariable(MAC_06_05_ADDR, tmp_u.ui16[0]);
 801ccac:	b2a1      	uxth	r1, r4
 801ccae:	2012      	movs	r0, #18
 801ccb0:	f000 fa84 	bl	801d1bc <EE_WriteVariable>
 801ccb4:	bd70      	pop	{r4, r5, r6, pc}
 801ccb6:	bf00      	nop
 801ccb8:	20015ce4 	.word	0x20015ce4

0801ccbc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 801ccbc:	b510      	push	{r4, lr}
 801ccbe:	b082      	sub	sp, #8
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801ccc0:	2400      	movs	r4, #0
 801ccc2:	9400      	str	r4, [sp, #0]
 801ccc4:	4b12      	ldr	r3, [pc, #72]	; (801cd10 <MX_DMA_Init+0x54>)
 801ccc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ccc8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801cccc:	631a      	str	r2, [r3, #48]	; 0x30
 801ccce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ccd0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 801ccd4:	9200      	str	r2, [sp, #0]
 801ccd6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 801ccd8:	9401      	str	r4, [sp, #4]
 801ccda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ccdc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 801cce0:	631a      	str	r2, [r3, #48]	; 0x30
 801cce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801cce8:	9301      	str	r3, [sp, #4]
 801ccea:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 801ccec:	4622      	mov	r2, r4
 801ccee:	2105      	movs	r1, #5
 801ccf0:	202f      	movs	r0, #47	; 0x2f
 801ccf2:	f7f3 fb9f 	bl	8010434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 801ccf6:	202f      	movs	r0, #47	; 0x2f
 801ccf8:	f7f3 fbce 	bl	8010498 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 801ccfc:	4622      	mov	r2, r4
 801ccfe:	2105      	movs	r1, #5
 801cd00:	2046      	movs	r0, #70	; 0x46
 801cd02:	f7f3 fb97 	bl	8010434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 801cd06:	2046      	movs	r0, #70	; 0x46
 801cd08:	f7f3 fbc6 	bl	8010498 <HAL_NVIC_EnableIRQ>

}
 801cd0c:	b002      	add	sp, #8
 801cd0e:	bd10      	pop	{r4, pc}
 801cd10:	40023800 	.word	0x40023800

0801cd14 <EE_VerifyPageFullyErased>:
{
  uint32_t ReadStatus = 1;
  uint16_t AddressValue = 0x5555;
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 801cd14:	4b07      	ldr	r3, [pc, #28]	; (801cd34 <EE_VerifyPageFullyErased+0x20>)
 801cd16:	4298      	cmp	r0, r3
 801cd18:	d807      	bhi.n	801cd2a <EE_VerifyPageFullyErased+0x16>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 801cd1a:	8803      	ldrh	r3, [r0, #0]
 801cd1c:	b29b      	uxth	r3, r3

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 801cd1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cd22:	4293      	cmp	r3, r2
 801cd24:	d103      	bne.n	801cd2e <EE_VerifyPageFullyErased+0x1a>
      ReadStatus = 0;

      break;
    }
    /* Next address location */
    Address = Address + 4;
 801cd26:	3004      	adds	r0, #4
 801cd28:	e7f4      	b.n	801cd14 <EE_VerifyPageFullyErased>
  uint32_t ReadStatus = 1;
 801cd2a:	2001      	movs	r0, #1
 801cd2c:	4770      	bx	lr
      ReadStatus = 0;
 801cd2e:	2000      	movs	r0, #0
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
}
 801cd30:	4770      	bx	lr
 801cd32:	bf00      	nop
 801cd34:	0800bfff 	.word	0x0800bfff

0801cd38 <EE_FindValidPage>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801cd38:	4b11      	ldr	r3, [pc, #68]	; (801cd80 <EE_FindValidPage+0x48>)
 801cd3a:	881b      	ldrh	r3, [r3, #0]
 801cd3c:	b29b      	uxth	r3, r3

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801cd3e:	4a11      	ldr	r2, [pc, #68]	; (801cd84 <EE_FindValidPage+0x4c>)
 801cd40:	8812      	ldrh	r2, [r2, #0]
 801cd42:	b292      	uxth	r2, r2

  /* Write or read operation */
  switch (Operation)
 801cd44:	b198      	cbz	r0, 801cd6e <EE_FindValidPage+0x36>
 801cd46:	2801      	cmp	r0, #1
 801cd48:	d117      	bne.n	801cd7a <EE_FindValidPage+0x42>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 801cd4a:	b93a      	cbnz	r2, 801cd5c <EE_FindValidPage+0x24>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 801cd4c:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 801cd50:	428b      	cmp	r3, r1
 801cd52:	d001      	beq.n	801cd58 <EE_FindValidPage+0x20>
        {
          return PAGE0;         /* Page0 valid */
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 801cd54:	2301      	movs	r3, #1
 801cd56:	e011      	b.n	801cd7c <EE_FindValidPage+0x44>
          return PAGE0;         /* Page0 valid */
 801cd58:	4613      	mov	r3, r2
 801cd5a:	e00f      	b.n	801cd7c <EE_FindValidPage+0x44>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 801cd5c:	b10b      	cbz	r3, 801cd62 <EE_FindValidPage+0x2a>
          return PAGE0;         /* Page0 valid */
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 801cd5e:	23ab      	movs	r3, #171	; 0xab
 801cd60:	e00c      	b.n	801cd7c <EE_FindValidPage+0x44>
        if (PageStatus1 == RECEIVE_DATA)
 801cd62:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 801cd66:	428a      	cmp	r2, r1
 801cd68:	d108      	bne.n	801cd7c <EE_FindValidPage+0x44>
          return PAGE1;         /* Page1 valid */
 801cd6a:	2301      	movs	r3, #1
 801cd6c:	e006      	b.n	801cd7c <EE_FindValidPage+0x44>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 801cd6e:	b12b      	cbz	r3, 801cd7c <EE_FindValidPage+0x44>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (PageStatus1 == VALID_PAGE)
 801cd70:	b10a      	cbz	r2, 801cd76 <EE_FindValidPage+0x3e>
      {
        return PAGE1;           /* Page1 valid */
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 801cd72:	23ab      	movs	r3, #171	; 0xab
 801cd74:	e002      	b.n	801cd7c <EE_FindValidPage+0x44>
        return PAGE1;           /* Page1 valid */
 801cd76:	2301      	movs	r3, #1
 801cd78:	e000      	b.n	801cd7c <EE_FindValidPage+0x44>
      }

    default:
      return PAGE0;             /* Page0 valid */
 801cd7a:	2300      	movs	r3, #0
  }
}
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	4770      	bx	lr
 801cd80:	08008000 	.word	0x08008000
 801cd84:	0800c000 	.word	0x0800c000

0801cd88 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 801cd88:	b570      	push	{r4, r5, r6, lr}
 801cd8a:	4605      	mov	r5, r0
 801cd8c:	460e      	mov	r6, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGE0;
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 801cd8e:	2001      	movs	r0, #1
 801cd90:	f7ff ffd2 	bl	801cd38 <EE_FindValidPage>
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 801cd94:	28ab      	cmp	r0, #171	; 0xab
 801cd96:	d021      	beq.n	801cddc <EE_VerifyPageFullWriteVariable+0x54>
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801cd98:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
 801cd9c:	3402      	adds	r4, #2
 801cd9e:	03a4      	lsls	r4, r4, #14

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 801cda0:	1c43      	adds	r3, r0, #1
 801cda2:	480f      	ldr	r0, [pc, #60]	; (801cde0 <EE_VerifyPageFullWriteVariable+0x58>)
 801cda4:	eb00 3083 	add.w	r0, r0, r3, lsl #14

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 801cda8:	4284      	cmp	r4, r0
 801cdaa:	d216      	bcs.n	801cdda <EE_VerifyPageFullWriteVariable+0x52>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 801cdac:	6823      	ldr	r3, [r4, #0]
 801cdae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cdb2:	d001      	beq.n	801cdb8 <EE_VerifyPageFullWriteVariable+0x30>
      return FlashStatus;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 801cdb4:	3404      	adds	r4, #4
 801cdb6:	e7f7      	b.n	801cda8 <EE_VerifyPageFullWriteVariable+0x20>
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 801cdb8:	b2b2      	uxth	r2, r6
 801cdba:	2300      	movs	r3, #0
 801cdbc:	4621      	mov	r1, r4
 801cdbe:	2001      	movs	r0, #1
 801cdc0:	f7f4 fad6 	bl	8011370 <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 801cdc4:	b108      	cbz	r0, 801cdca <EE_VerifyPageFullWriteVariable+0x42>
        return FlashStatus;
 801cdc6:	b280      	uxth	r0, r0
 801cdc8:	bd70      	pop	{r4, r5, r6, pc}
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 801cdca:	b2aa      	uxth	r2, r5
 801cdcc:	2300      	movs	r3, #0
 801cdce:	1ca1      	adds	r1, r4, #2
 801cdd0:	2001      	movs	r0, #1
 801cdd2:	f7f4 facd 	bl	8011370 <HAL_FLASH_Program>
      return FlashStatus;
 801cdd6:	b280      	uxth	r0, r0
 801cdd8:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 801cdda:	2080      	movs	r0, #128	; 0x80
}
 801cddc:	bd70      	pop	{r4, r5, r6, pc}
 801cdde:	bf00      	nop
 801cde0:	08007fff 	.word	0x08007fff

0801cde4 <EE_Format>:
{
 801cde4:	b510      	push	{r4, lr}
 801cde6:	b086      	sub	sp, #24
  uint32_t SectorError = 0;
 801cde8:	2300      	movs	r3, #0
 801cdea:	9305      	str	r3, [sp, #20]
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 801cdec:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = PAGE0_ID;
 801cdee:	2302      	movs	r3, #2
 801cdf0:	9302      	str	r3, [sp, #8]
  pEraseInit.NbSectors = 1;
 801cdf2:	2201      	movs	r2, #1
 801cdf4:	9203      	str	r2, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cdf6:	9304      	str	r3, [sp, #16]
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801cdf8:	4810      	ldr	r0, [pc, #64]	; (801ce3c <EE_Format+0x58>)
 801cdfa:	f7ff ff8b 	bl	801cd14 <EE_VerifyPageFullyErased>
 801cdfe:	b928      	cbnz	r0, 801ce0c <EE_Format+0x28>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 801ce00:	a905      	add	r1, sp, #20
 801ce02:	4668      	mov	r0, sp
 801ce04:	f7f4 fb60 	bl	80114c8 <HAL_FLASHEx_Erase>
    if (FlashStatus != HAL_OK)
 801ce08:	4604      	mov	r4, r0
 801ce0a:	b938      	cbnz	r0, 801ce1c <EE_Format+0x38>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 801ce0c:	2200      	movs	r2, #0
 801ce0e:	2300      	movs	r3, #0
 801ce10:	490a      	ldr	r1, [pc, #40]	; (801ce3c <EE_Format+0x58>)
 801ce12:	2001      	movs	r0, #1
 801ce14:	f7f4 faac 	bl	8011370 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801ce18:	4604      	mov	r4, r0
 801ce1a:	b110      	cbz	r0, 801ce22 <EE_Format+0x3e>
}
 801ce1c:	4620      	mov	r0, r4
 801ce1e:	b006      	add	sp, #24
 801ce20:	bd10      	pop	{r4, pc}
  pEraseInit.Sector = PAGE1_ID;
 801ce22:	2303      	movs	r3, #3
 801ce24:	9302      	str	r3, [sp, #8]
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801ce26:	4806      	ldr	r0, [pc, #24]	; (801ce40 <EE_Format+0x5c>)
 801ce28:	f7ff ff74 	bl	801cd14 <EE_VerifyPageFullyErased>
 801ce2c:	2800      	cmp	r0, #0
 801ce2e:	d1f5      	bne.n	801ce1c <EE_Format+0x38>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 801ce30:	a905      	add	r1, sp, #20
 801ce32:	4668      	mov	r0, sp
 801ce34:	f7f4 fb48 	bl	80114c8 <HAL_FLASHEx_Erase>
 801ce38:	4604      	mov	r4, r0
 801ce3a:	e7ef      	b.n	801ce1c <EE_Format+0x38>
 801ce3c:	08008000 	.word	0x08008000
 801ce40:	0800c000 	.word	0x0800c000

0801ce44 <EE_ReadVariable>:
{
 801ce44:	b538      	push	{r3, r4, r5, lr}
 801ce46:	4604      	mov	r4, r0
 801ce48:	460d      	mov	r5, r1
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801ce4a:	2000      	movs	r0, #0
 801ce4c:	f7ff ff74 	bl	801cd38 <EE_FindValidPage>
  if (ValidPage == NO_VALID_PAGE)
 801ce50:	28ab      	cmp	r0, #171	; 0xab
 801ce52:	d016      	beq.n	801ce82 <EE_ReadVariable+0x3e>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801ce54:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 801ce58:	3202      	adds	r2, #2
 801ce5a:	0392      	lsls	r2, r2, #14
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801ce5c:	1c43      	adds	r3, r0, #1
 801ce5e:	4809      	ldr	r0, [pc, #36]	; (801ce84 <EE_ReadVariable+0x40>)
 801ce60:	eb00 3083 	add.w	r0, r0, r3, lsl #14
  while (Address > (PageStartAddress + 2))
 801ce64:	1c93      	adds	r3, r2, #2
 801ce66:	4298      	cmp	r0, r3
 801ce68:	d90a      	bls.n	801ce80 <EE_ReadVariable+0x3c>
    AddressValue = (*(__IO uint16_t*)Address);
 801ce6a:	8803      	ldrh	r3, [r0, #0]
 801ce6c:	b29b      	uxth	r3, r3
    if (AddressValue == VirtAddress)
 801ce6e:	42a3      	cmp	r3, r4
 801ce70:	d001      	beq.n	801ce76 <EE_ReadVariable+0x32>
      Address = Address - 4;
 801ce72:	3804      	subs	r0, #4
 801ce74:	e7f6      	b.n	801ce64 <EE_ReadVariable+0x20>
      *Data = (*(__IO uint16_t*)(Address - 2));
 801ce76:	f830 3c02 	ldrh.w	r3, [r0, #-2]
 801ce7a:	802b      	strh	r3, [r5, #0]
      ReadStatus = 0;
 801ce7c:	2000      	movs	r0, #0
      break;
 801ce7e:	bd38      	pop	{r3, r4, r5, pc}
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 801ce80:	2001      	movs	r0, #1
}
 801ce82:	bd38      	pop	{r3, r4, r5, pc}
 801ce84:	08007ffe 	.word	0x08007ffe

0801ce88 <EE_Init>:
{
 801ce88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce8a:	b087      	sub	sp, #28
  uint32_t SectorError = 0;
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	9305      	str	r3, [sp, #20]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801ce90:	4a92      	ldr	r2, [pc, #584]	; (801d0dc <EE_Init+0x254>)
 801ce92:	8816      	ldrh	r6, [r2, #0]
 801ce94:	b2b6      	uxth	r6, r6
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801ce96:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 801ce9a:	8815      	ldrh	r5, [r2, #0]
 801ce9c:	b2ad      	uxth	r5, r5
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801ce9e:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = PAGE0_ID;
 801cea0:	2302      	movs	r3, #2
 801cea2:	9302      	str	r3, [sp, #8]
  pEraseInit.NbSectors = 1;
 801cea4:	2201      	movs	r2, #1
 801cea6:	9203      	str	r2, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cea8:	9304      	str	r3, [sp, #16]
  switch (PageStatus0)
 801ceaa:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 801ceae:	429e      	cmp	r6, r3
 801ceb0:	d040      	beq.n	801cf34 <EE_Init+0xac>
 801ceb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ceb6:	429e      	cmp	r6, r3
 801ceb8:	d00b      	beq.n	801ced2 <EE_Init+0x4a>
 801ceba:	2e00      	cmp	r6, #0
 801cebc:	f000 809f 	beq.w	801cffe <EE_Init+0x176>
      FlashStatus = EE_Format();
 801cec0:	f7ff ff90 	bl	801cde4 <EE_Format>
      if (FlashStatus != HAL_OK)
 801cec4:	2800      	cmp	r0, #0
 801cec6:	f000 8107 	beq.w	801d0d8 <EE_Init+0x250>
        return FlashStatus;
 801ceca:	b285      	uxth	r5, r0
}
 801cecc:	4628      	mov	r0, r5
 801cece:	b007      	add	sp, #28
 801ced0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 801ced2:	b155      	cbz	r5, 801ceea <EE_Init+0x62>
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 801ced4:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 801ced8:	429d      	cmp	r5, r3
 801ceda:	d015      	beq.n	801cf08 <EE_Init+0x80>
        FlashStatus = EE_Format();
 801cedc:	f7ff ff82 	bl	801cde4 <EE_Format>
        if (FlashStatus != HAL_OK)
 801cee0:	2800      	cmp	r0, #0
 801cee2:	f000 80f1 	beq.w	801d0c8 <EE_Init+0x240>
          return FlashStatus;
 801cee6:	b285      	uxth	r5, r0
 801cee8:	e7f0      	b.n	801cecc <EE_Init+0x44>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801ceea:	487c      	ldr	r0, [pc, #496]	; (801d0dc <EE_Init+0x254>)
 801ceec:	f7ff ff12 	bl	801cd14 <EE_VerifyPageFullyErased>
 801cef0:	4604      	mov	r4, r0
 801cef2:	2800      	cmp	r0, #0
 801cef4:	d1ea      	bne.n	801cecc <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cef6:	a905      	add	r1, sp, #20
 801cef8:	4668      	mov	r0, sp
 801cefa:	f7f4 fae5 	bl	80114c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cefe:	2800      	cmp	r0, #0
 801cf00:	f000 80de 	beq.w	801d0c0 <EE_Init+0x238>
            return FlashStatus;
 801cf04:	b285      	uxth	r5, r0
 801cf06:	e7e1      	b.n	801cecc <EE_Init+0x44>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801cf08:	4874      	ldr	r0, [pc, #464]	; (801d0dc <EE_Init+0x254>)
 801cf0a:	f7ff ff03 	bl	801cd14 <EE_VerifyPageFullyErased>
 801cf0e:	b920      	cbnz	r0, 801cf1a <EE_Init+0x92>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cf10:	a905      	add	r1, sp, #20
 801cf12:	4668      	mov	r0, sp
 801cf14:	f7f4 fad8 	bl	80114c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cf18:	b950      	cbnz	r0, 801cf30 <EE_Init+0xa8>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 801cf1a:	2200      	movs	r2, #0
 801cf1c:	2300      	movs	r3, #0
 801cf1e:	4970      	ldr	r1, [pc, #448]	; (801d0e0 <EE_Init+0x258>)
 801cf20:	2001      	movs	r0, #1
 801cf22:	f7f4 fa25 	bl	8011370 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801cf26:	2800      	cmp	r0, #0
 801cf28:	f000 80cc 	beq.w	801d0c4 <EE_Init+0x23c>
          return FlashStatus;
 801cf2c:	b285      	uxth	r5, r0
 801cf2e:	e7cd      	b.n	801cecc <EE_Init+0x44>
            return FlashStatus;
 801cf30:	b285      	uxth	r5, r0
 801cf32:	e7cb      	b.n	801cecc <EE_Init+0x44>
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 801cf34:	b35d      	cbz	r5, 801cf8e <EE_Init+0x106>
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 801cf36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cf3a:	429d      	cmp	r5, r3
 801cf3c:	d048      	beq.n	801cfd0 <EE_Init+0x148>
        FlashStatus = EE_Format();
 801cf3e:	f7ff ff51 	bl	801cde4 <EE_Format>
        if (FlashStatus != HAL_OK)
 801cf42:	2800      	cmp	r0, #0
 801cf44:	f000 80c6 	beq.w	801d0d4 <EE_Init+0x24c>
          return FlashStatus;
 801cf48:	b285      	uxth	r5, r0
 801cf4a:	e7bf      	b.n	801cecc <EE_Init+0x44>
            x = VarIdx;
 801cf4c:	b227      	sxth	r7, r4
 801cf4e:	e00c      	b.n	801cf6a <EE_Init+0xe2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801cf50:	3401      	adds	r4, #1
 801cf52:	b2a4      	uxth	r4, r4
 801cf54:	2c13      	cmp	r4, #19
 801cf56:	d81e      	bhi.n	801cf96 <EE_Init+0x10e>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801cf58:	4b62      	ldr	r3, [pc, #392]	; (801d0e4 <EE_Init+0x25c>)
 801cf5a:	881b      	ldrh	r3, [r3, #0]
 801cf5c:	b29b      	uxth	r3, r3
 801cf5e:	4626      	mov	r6, r4
 801cf60:	4a61      	ldr	r2, [pc, #388]	; (801d0e8 <EE_Init+0x260>)
 801cf62:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801cf66:	4283      	cmp	r3, r0
 801cf68:	d0f0      	beq.n	801cf4c <EE_Init+0xc4>
          if (VarIdx != x)
 801cf6a:	42be      	cmp	r6, r7
 801cf6c:	d0f0      	beq.n	801cf50 <EE_Init+0xc8>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801cf6e:	495f      	ldr	r1, [pc, #380]	; (801d0ec <EE_Init+0x264>)
 801cf70:	f7ff ff68 	bl	801ce44 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 801cf74:	2801      	cmp	r0, #1
 801cf76:	d0eb      	beq.n	801cf50 <EE_Init+0xc8>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801cf78:	4b5c      	ldr	r3, [pc, #368]	; (801d0ec <EE_Init+0x264>)
 801cf7a:	8819      	ldrh	r1, [r3, #0]
 801cf7c:	4b5a      	ldr	r3, [pc, #360]	; (801d0e8 <EE_Init+0x260>)
 801cf7e:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 801cf82:	f7ff ff01 	bl	801cd88 <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 801cf86:	2800      	cmp	r0, #0
 801cf88:	d0e2      	beq.n	801cf50 <EE_Init+0xc8>
                return EepromStatus;
 801cf8a:	4605      	mov	r5, r0
 801cf8c:	e79e      	b.n	801cecc <EE_Init+0x44>
 801cf8e:	462c      	mov	r4, r5
 801cf90:	f04f 37ff 	mov.w	r7, #4294967295
 801cf94:	e7de      	b.n	801cf54 <EE_Init+0xcc>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 801cf96:	2200      	movs	r2, #0
 801cf98:	2300      	movs	r3, #0
 801cf9a:	4950      	ldr	r1, [pc, #320]	; (801d0dc <EE_Init+0x254>)
 801cf9c:	2001      	movs	r0, #1
 801cf9e:	f7f4 f9e7 	bl	8011370 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801cfa2:	b108      	cbz	r0, 801cfa8 <EE_Init+0x120>
          return FlashStatus;
 801cfa4:	b285      	uxth	r5, r0
 801cfa6:	e791      	b.n	801cecc <EE_Init+0x44>
        pEraseInit.Sector = PAGE1_ID;
 801cfa8:	2303      	movs	r3, #3
 801cfaa:	9302      	str	r3, [sp, #8]
        pEraseInit.NbSectors = 1;
 801cfac:	2301      	movs	r3, #1
 801cfae:	9303      	str	r3, [sp, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cfb0:	2302      	movs	r3, #2
 801cfb2:	9304      	str	r3, [sp, #16]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801cfb4:	484a      	ldr	r0, [pc, #296]	; (801d0e0 <EE_Init+0x258>)
 801cfb6:	f7ff fead 	bl	801cd14 <EE_VerifyPageFullyErased>
 801cfba:	4604      	mov	r4, r0
 801cfbc:	2800      	cmp	r0, #0
 801cfbe:	d185      	bne.n	801cecc <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cfc0:	a905      	add	r1, sp, #20
 801cfc2:	4668      	mov	r0, sp
 801cfc4:	f7f4 fa80 	bl	80114c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cfc8:	2800      	cmp	r0, #0
 801cfca:	d07f      	beq.n	801d0cc <EE_Init+0x244>
            return FlashStatus;
 801cfcc:	b285      	uxth	r5, r0
 801cfce:	e77d      	b.n	801cecc <EE_Init+0x44>
        pEraseInit.Sector = PAGE1_ID;
 801cfd0:	2303      	movs	r3, #3
 801cfd2:	9302      	str	r3, [sp, #8]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801cfd4:	4842      	ldr	r0, [pc, #264]	; (801d0e0 <EE_Init+0x258>)
 801cfd6:	f7ff fe9d 	bl	801cd14 <EE_VerifyPageFullyErased>
 801cfda:	b920      	cbnz	r0, 801cfe6 <EE_Init+0x15e>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cfdc:	a905      	add	r1, sp, #20
 801cfde:	4668      	mov	r0, sp
 801cfe0:	f7f4 fa72 	bl	80114c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cfe4:	b948      	cbnz	r0, 801cffa <EE_Init+0x172>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 801cfe6:	2200      	movs	r2, #0
 801cfe8:	2300      	movs	r3, #0
 801cfea:	493c      	ldr	r1, [pc, #240]	; (801d0dc <EE_Init+0x254>)
 801cfec:	2001      	movs	r0, #1
 801cfee:	f7f4 f9bf 	bl	8011370 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801cff2:	2800      	cmp	r0, #0
 801cff4:	d06c      	beq.n	801d0d0 <EE_Init+0x248>
          return FlashStatus;
 801cff6:	b285      	uxth	r5, r0
 801cff8:	e768      	b.n	801cecc <EE_Init+0x44>
            return FlashStatus;
 801cffa:	b285      	uxth	r5, r0
 801cffc:	e766      	b.n	801cecc <EE_Init+0x44>
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801cffe:	b13d      	cbz	r5, 801d010 <EE_Init+0x188>
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 801d000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d004:	429d      	cmp	r5, r3
 801d006:	d00a      	beq.n	801d01e <EE_Init+0x196>
 801d008:	4634      	mov	r4, r6
 801d00a:	f04f 37ff 	mov.w	r7, #4294967295
 801d00e:	e01c      	b.n	801d04a <EE_Init+0x1c2>
        FlashStatus = EE_Format();
 801d010:	f7ff fee8 	bl	801cde4 <EE_Format>
        if (FlashStatus != HAL_OK)
 801d014:	2800      	cmp	r0, #0
 801d016:	f43f af59 	beq.w	801cecc <EE_Init+0x44>
          return FlashStatus;
 801d01a:	b285      	uxth	r5, r0
 801d01c:	e756      	b.n	801cecc <EE_Init+0x44>
        pEraseInit.Sector = PAGE1_ID;
 801d01e:	2303      	movs	r3, #3
 801d020:	9302      	str	r3, [sp, #8]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801d022:	482f      	ldr	r0, [pc, #188]	; (801d0e0 <EE_Init+0x258>)
 801d024:	f7ff fe76 	bl	801cd14 <EE_VerifyPageFullyErased>
 801d028:	4605      	mov	r5, r0
 801d02a:	b108      	cbz	r0, 801d030 <EE_Init+0x1a8>
  return HAL_OK;
 801d02c:	4635      	mov	r5, r6
 801d02e:	e74d      	b.n	801cecc <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801d030:	a905      	add	r1, sp, #20
 801d032:	4668      	mov	r0, sp
 801d034:	f7f4 fa48 	bl	80114c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801d038:	2800      	cmp	r0, #0
 801d03a:	f43f af47 	beq.w	801cecc <EE_Init+0x44>
            return FlashStatus;
 801d03e:	b285      	uxth	r5, r0
 801d040:	e744      	b.n	801cecc <EE_Init+0x44>
            x = VarIdx;
 801d042:	b227      	sxth	r7, r4
 801d044:	e00c      	b.n	801d060 <EE_Init+0x1d8>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801d046:	3401      	adds	r4, #1
 801d048:	b2a4      	uxth	r4, r4
 801d04a:	2c13      	cmp	r4, #19
 801d04c:	d81a      	bhi.n	801d084 <EE_Init+0x1fc>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801d04e:	4b28      	ldr	r3, [pc, #160]	; (801d0f0 <EE_Init+0x268>)
 801d050:	881b      	ldrh	r3, [r3, #0]
 801d052:	b29b      	uxth	r3, r3
 801d054:	4625      	mov	r5, r4
 801d056:	4a24      	ldr	r2, [pc, #144]	; (801d0e8 <EE_Init+0x260>)
 801d058:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801d05c:	4283      	cmp	r3, r0
 801d05e:	d0f0      	beq.n	801d042 <EE_Init+0x1ba>
          if (VarIdx != x)
 801d060:	42bd      	cmp	r5, r7
 801d062:	d0f0      	beq.n	801d046 <EE_Init+0x1be>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801d064:	4921      	ldr	r1, [pc, #132]	; (801d0ec <EE_Init+0x264>)
 801d066:	f7ff feed 	bl	801ce44 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 801d06a:	2801      	cmp	r0, #1
 801d06c:	d0eb      	beq.n	801d046 <EE_Init+0x1be>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801d06e:	4b1f      	ldr	r3, [pc, #124]	; (801d0ec <EE_Init+0x264>)
 801d070:	8819      	ldrh	r1, [r3, #0]
 801d072:	4b1d      	ldr	r3, [pc, #116]	; (801d0e8 <EE_Init+0x260>)
 801d074:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 801d078:	f7ff fe86 	bl	801cd88 <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 801d07c:	4605      	mov	r5, r0
 801d07e:	2800      	cmp	r0, #0
 801d080:	d0e1      	beq.n	801d046 <EE_Init+0x1be>
 801d082:	e723      	b.n	801cecc <EE_Init+0x44>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 801d084:	2200      	movs	r2, #0
 801d086:	2300      	movs	r3, #0
 801d088:	4915      	ldr	r1, [pc, #84]	; (801d0e0 <EE_Init+0x258>)
 801d08a:	2001      	movs	r0, #1
 801d08c:	f7f4 f970 	bl	8011370 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801d090:	b108      	cbz	r0, 801d096 <EE_Init+0x20e>
          return FlashStatus;
 801d092:	b285      	uxth	r5, r0
 801d094:	e71a      	b.n	801cecc <EE_Init+0x44>
        pEraseInit.Sector = PAGE0_ID;
 801d096:	2302      	movs	r3, #2
 801d098:	9302      	str	r3, [sp, #8]
        pEraseInit.NbSectors = 1;
 801d09a:	2201      	movs	r2, #1
 801d09c:	9203      	str	r2, [sp, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801d09e:	9304      	str	r3, [sp, #16]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801d0a0:	480e      	ldr	r0, [pc, #56]	; (801d0dc <EE_Init+0x254>)
 801d0a2:	f7ff fe37 	bl	801cd14 <EE_VerifyPageFullyErased>
 801d0a6:	4605      	mov	r5, r0
 801d0a8:	b108      	cbz	r0, 801d0ae <EE_Init+0x226>
  return HAL_OK;
 801d0aa:	4635      	mov	r5, r6
 801d0ac:	e70e      	b.n	801cecc <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801d0ae:	a905      	add	r1, sp, #20
 801d0b0:	4668      	mov	r0, sp
 801d0b2:	f7f4 fa09 	bl	80114c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801d0b6:	2800      	cmp	r0, #0
 801d0b8:	f43f af08 	beq.w	801cecc <EE_Init+0x44>
            return FlashStatus;
 801d0bc:	b285      	uxth	r5, r0
 801d0be:	e705      	b.n	801cecc <EE_Init+0x44>
  return HAL_OK;
 801d0c0:	4625      	mov	r5, r4
 801d0c2:	e703      	b.n	801cecc <EE_Init+0x44>
 801d0c4:	2500      	movs	r5, #0
 801d0c6:	e701      	b.n	801cecc <EE_Init+0x44>
 801d0c8:	2500      	movs	r5, #0
 801d0ca:	e6ff      	b.n	801cecc <EE_Init+0x44>
 801d0cc:	4625      	mov	r5, r4
 801d0ce:	e6fd      	b.n	801cecc <EE_Init+0x44>
 801d0d0:	2500      	movs	r5, #0
 801d0d2:	e6fb      	b.n	801cecc <EE_Init+0x44>
 801d0d4:	2500      	movs	r5, #0
 801d0d6:	e6f9      	b.n	801cecc <EE_Init+0x44>
 801d0d8:	2500      	movs	r5, #0
 801d0da:	e6f7      	b.n	801cecc <EE_Init+0x44>
 801d0dc:	08008000 	.word	0x08008000
 801d0e0:	0800c000 	.word	0x0800c000
 801d0e4:	08008006 	.word	0x08008006
 801d0e8:	20000010 	.word	0x20000010
 801d0ec:	200102f8 	.word	0x200102f8
 801d0f0:	0800c006 	.word	0x0800c006

0801d0f4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 801d0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0f8:	b086      	sub	sp, #24
 801d0fa:	4605      	mov	r5, r0
 801d0fc:	460e      	mov	r6, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
  uint16_t OldPageId=0;
  uint16_t ValidPage = PAGE0, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
  uint32_t SectorError = 0;
 801d0fe:	2000      	movs	r0, #0
 801d100:	9005      	str	r0, [sp, #20]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801d102:	f7ff fe19 	bl	801cd38 <EE_FindValidPage>

  if (ValidPage == PAGE1)       /* Page1 valid */
 801d106:	2801      	cmp	r0, #1
 801d108:	d012      	beq.n	801d130 <EE_PageTransfer+0x3c>
    NewPageAddress = PAGE0_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 801d10a:	b120      	cbz	r0, 801d116 <EE_PageTransfer+0x22>
    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 801d10c:	24ab      	movs	r4, #171	; 0xab
    return FlashStatus;
  }

  /* Return last operation flash status */
  return FlashStatus;
}
 801d10e:	4620      	mov	r0, r4
 801d110:	b006      	add	sp, #24
 801d112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    OldPageId = PAGE0_ID;
 801d116:	f04f 0802 	mov.w	r8, #2
    NewPageAddress = PAGE1_BASE_ADDRESS;
 801d11a:	4f24      	ldr	r7, [pc, #144]	; (801d1ac <EE_PageTransfer+0xb8>)
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 801d11c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801d120:	2300      	movs	r3, #0
 801d122:	4639      	mov	r1, r7
 801d124:	2001      	movs	r0, #1
 801d126:	f7f4 f923 	bl	8011370 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801d12a:	b128      	cbz	r0, 801d138 <EE_PageTransfer+0x44>
    return FlashStatus;
 801d12c:	b284      	uxth	r4, r0
 801d12e:	e7ee      	b.n	801d10e <EE_PageTransfer+0x1a>
    OldPageId = PAGE1_ID;
 801d130:	f04f 0803 	mov.w	r8, #3
    NewPageAddress = PAGE0_BASE_ADDRESS;
 801d134:	4f1e      	ldr	r7, [pc, #120]	; (801d1b0 <EE_PageTransfer+0xbc>)
 801d136:	e7f1      	b.n	801d11c <EE_PageTransfer+0x28>
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801d138:	4631      	mov	r1, r6
 801d13a:	4628      	mov	r0, r5
 801d13c:	f7ff fe24 	bl	801cd88 <EE_VerifyPageFullWriteVariable>
  if (EepromStatus != HAL_OK)
 801d140:	4604      	mov	r4, r0
 801d142:	b110      	cbz	r0, 801d14a <EE_PageTransfer+0x56>
 801d144:	e7e3      	b.n	801d10e <EE_PageTransfer+0x1a>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801d146:	3401      	adds	r4, #1
 801d148:	b2a4      	uxth	r4, r4
 801d14a:	2c13      	cmp	r4, #19
 801d14c:	d814      	bhi.n	801d178 <EE_PageTransfer+0x84>
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 801d14e:	4b19      	ldr	r3, [pc, #100]	; (801d1b4 <EE_PageTransfer+0xc0>)
 801d150:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 801d154:	4285      	cmp	r5, r0
 801d156:	d0f6      	beq.n	801d146 <EE_PageTransfer+0x52>
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801d158:	4917      	ldr	r1, [pc, #92]	; (801d1b8 <EE_PageTransfer+0xc4>)
 801d15a:	f7ff fe73 	bl	801ce44 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 801d15e:	2801      	cmp	r0, #1
 801d160:	d0f1      	beq.n	801d146 <EE_PageTransfer+0x52>
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801d162:	4b15      	ldr	r3, [pc, #84]	; (801d1b8 <EE_PageTransfer+0xc4>)
 801d164:	8819      	ldrh	r1, [r3, #0]
 801d166:	4b13      	ldr	r3, [pc, #76]	; (801d1b4 <EE_PageTransfer+0xc0>)
 801d168:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 801d16c:	f7ff fe0c 	bl	801cd88 <EE_VerifyPageFullWriteVariable>
        if (EepromStatus != HAL_OK)
 801d170:	2800      	cmp	r0, #0
 801d172:	d0e8      	beq.n	801d146 <EE_PageTransfer+0x52>
          return EepromStatus;
 801d174:	4604      	mov	r4, r0
 801d176:	e7ca      	b.n	801d10e <EE_PageTransfer+0x1a>
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801d178:	2300      	movs	r3, #0
 801d17a:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = OldPageId;
 801d17c:	f8cd 8008 	str.w	r8, [sp, #8]
  pEraseInit.NbSectors = 1;
 801d180:	2301      	movs	r3, #1
 801d182:	9303      	str	r3, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801d184:	2302      	movs	r3, #2
 801d186:	9304      	str	r3, [sp, #16]
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 801d188:	a905      	add	r1, sp, #20
 801d18a:	4668      	mov	r0, sp
 801d18c:	f7f4 f99c 	bl	80114c8 <HAL_FLASHEx_Erase>
  if (FlashStatus != HAL_OK)
 801d190:	b108      	cbz	r0, 801d196 <EE_PageTransfer+0xa2>
    return FlashStatus;
 801d192:	b284      	uxth	r4, r0
 801d194:	e7bb      	b.n	801d10e <EE_PageTransfer+0x1a>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 801d196:	2200      	movs	r2, #0
 801d198:	2300      	movs	r3, #0
 801d19a:	4639      	mov	r1, r7
 801d19c:	2001      	movs	r0, #1
 801d19e:	f7f4 f8e7 	bl	8011370 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801d1a2:	b908      	cbnz	r0, 801d1a8 <EE_PageTransfer+0xb4>
  return FlashStatus;
 801d1a4:	b284      	uxth	r4, r0
 801d1a6:	e7b2      	b.n	801d10e <EE_PageTransfer+0x1a>
    return FlashStatus;
 801d1a8:	b284      	uxth	r4, r0
 801d1aa:	e7b0      	b.n	801d10e <EE_PageTransfer+0x1a>
 801d1ac:	0800c000 	.word	0x0800c000
 801d1b0:	08008000 	.word	0x08008000
 801d1b4:	20000010 	.word	0x20000010
 801d1b8:	200102f8 	.word	0x200102f8

0801d1bc <EE_WriteVariable>:
{
 801d1bc:	b538      	push	{r3, r4, r5, lr}
 801d1be:	4604      	mov	r4, r0
 801d1c0:	460d      	mov	r5, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801d1c2:	f7ff fde1 	bl	801cd88 <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 801d1c6:	2880      	cmp	r0, #128	; 0x80
 801d1c8:	d000      	beq.n	801d1cc <EE_WriteVariable+0x10>
}
 801d1ca:	bd38      	pop	{r3, r4, r5, pc}
    Status = EE_PageTransfer(VirtAddress, Data);
 801d1cc:	4629      	mov	r1, r5
 801d1ce:	4620      	mov	r0, r4
 801d1d0:	f7ff ff90 	bl	801d0f4 <EE_PageTransfer>
 801d1d4:	e7f9      	b.n	801d1ca <EE_WriteVariable+0xe>
	...

0801d1d8 <low_level_input>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(struct netif *netif) {
 801d1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t payloadoffset = 0;
	uint32_t byteslefttocopy = 0;
	uint32_t i = 0;

	/* get received frame */
	if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 801d1dc:	4834      	ldr	r0, [pc, #208]	; (801d2b0 <low_level_input+0xd8>)
 801d1de:	f7f3 fd95 	bl	8010d0c <HAL_ETH_GetReceivedFrame_IT>
 801d1e2:	2800      	cmp	r0, #0
 801d1e4:	d160      	bne.n	801d2a8 <low_level_input+0xd0>
		return NULL;

	/* Obtain the size of the packet and put it into the "len" variable. */
	len = heth.RxFrameInfos.length;
 801d1e6:	4b32      	ldr	r3, [pc, #200]	; (801d2b0 <low_level_input+0xd8>)
 801d1e8:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
	buffer = (uint8_t *) heth.RxFrameInfos.buffer;
 801d1ea:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40

	if (len > 0) {
 801d1ee:	b949      	cbnz	r1, 801d204 <low_level_input+0x2c>
	struct pbuf *p = NULL;
 801d1f0:	f04f 0a00 	mov.w	sl, #0
		/* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
		p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
	}

	if (p != NULL) {
 801d1f4:	f1ba 0f00 	cmp.w	sl, #0
 801d1f8:	d033      	beq.n	801d262 <low_level_input+0x8a>
		dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801d1fa:	4b2d      	ldr	r3, [pc, #180]	; (801d2b0 <low_level_input+0xd8>)
 801d1fc:	6b1f      	ldr	r7, [r3, #48]	; 0x30
		bufferoffset = 0;
		for (q = p; q != NULL; q = q->next) {
 801d1fe:	46d1      	mov	r9, sl
		bufferoffset = 0;
 801d200:	2400      	movs	r4, #0
		for (q = p; q != NULL; q = q->next) {
 801d202:	e027      	b.n	801d254 <low_level_input+0x7c>
		p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801d204:	2203      	movs	r2, #3
 801d206:	2004      	movs	r0, #4
 801d208:	f7fb fa06 	bl	8018618 <pbuf_alloc>
 801d20c:	4682      	mov	sl, r0
 801d20e:	e7f1      	b.n	801d1f4 <low_level_input+0x1c>
			payloadoffset = 0;

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 801d210:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d214:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 801d218:	3204      	adds	r2, #4
 801d21a:	eb08 0104 	add.w	r1, r8, r4
 801d21e:	4430      	add	r0, r6
 801d220:	f003 fb69 	bl	80208f6 <memcpy>
						(uint8_t*) ((uint8_t*) buffer + bufferoffset),
						(ETH_RX_BUF_SIZE - bufferoffset));

				/* Point to next descriptor */
				dmarxdesc =
						(ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
 801d224:	68ff      	ldr	r7, [r7, #12]
				buffer = (uint8_t *) (dmarxdesc->Buffer1Addr);
 801d226:	f8d7 8008 	ldr.w	r8, [r7, #8]

				byteslefttocopy = byteslefttocopy
 801d22a:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
						- (ETH_RX_BUF_SIZE - bufferoffset);
				payloadoffset = payloadoffset
						+ (ETH_RX_BUF_SIZE - bufferoffset);
 801d22e:	1b36      	subs	r6, r6, r4
				payloadoffset = payloadoffset
 801d230:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
				bufferoffset = 0;
 801d234:	2400      	movs	r4, #0
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
 801d236:	18a5      	adds	r5, r4, r2
 801d238:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801d23c:	429d      	cmp	r5, r3
 801d23e:	d8e7      	bhi.n	801d210 <low_level_input+0x38>
			}
			/* Copy remaining data in pbuf */
			memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 801d240:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d244:	eb08 0104 	add.w	r1, r8, r4
 801d248:	4430      	add	r0, r6
 801d24a:	f003 fb54 	bl	80208f6 <memcpy>
		for (q = p; q != NULL; q = q->next) {
 801d24e:	f8d9 9000 	ldr.w	r9, [r9]
					(uint8_t*) ((uint8_t*) buffer + bufferoffset),
					byteslefttocopy);
			bufferoffset = bufferoffset + byteslefttocopy;
 801d252:	462c      	mov	r4, r5
		for (q = p; q != NULL; q = q->next) {
 801d254:	f1b9 0f00 	cmp.w	r9, #0
 801d258:	d003      	beq.n	801d262 <low_level_input+0x8a>
			byteslefttocopy = q->len;
 801d25a:	f8b9 200a 	ldrh.w	r2, [r9, #10]
			payloadoffset = 0;
 801d25e:	2600      	movs	r6, #0
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
 801d260:	e7e9      	b.n	801d236 <low_level_input+0x5e>
		}
	}

	/* Release descriptors to DMA */
	/* Point to first descriptor */
	dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801d262:	4b13      	ldr	r3, [pc, #76]	; (801d2b0 <low_level_input+0xd8>)
 801d264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	/* Set Own bit in Rx descriptors: gives the buffers back to DMA */
	for (i = 0; i < heth.RxFrameInfos.SegCount; i++) {
 801d266:	2100      	movs	r1, #0
 801d268:	e005      	b.n	801d276 <low_level_input+0x9e>
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801d26a:	681a      	ldr	r2, [r3, #0]
 801d26c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801d270:	601a      	str	r2, [r3, #0]
		dmarxdesc = (ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
 801d272:	68db      	ldr	r3, [r3, #12]
	for (i = 0; i < heth.RxFrameInfos.SegCount; i++) {
 801d274:	3101      	adds	r1, #1
 801d276:	4a0e      	ldr	r2, [pc, #56]	; (801d2b0 <low_level_input+0xd8>)
 801d278:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801d27a:	4291      	cmp	r1, r2
 801d27c:	d3f5      	bcc.n	801d26a <low_level_input+0x92>
	}

	/* Clear Segment_Count */
	heth.RxFrameInfos.SegCount = 0;
 801d27e:	4b0c      	ldr	r3, [pc, #48]	; (801d2b0 <low_level_input+0xd8>)
 801d280:	2200      	movs	r2, #0
 801d282:	639a      	str	r2, [r3, #56]	; 0x38

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET) {
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	f241 0214 	movw	r2, #4116	; 0x1014
 801d28a:	589a      	ldr	r2, [r3, r2]
 801d28c:	f012 0f80 	tst.w	r2, #128	; 0x80
 801d290:	d007      	beq.n	801d2a2 <low_level_input+0xca>
		/* Clear RBUS ETHERNET DMA flag */
		heth.Instance->DMASR = ETH_DMASR_RBUS;
 801d292:	2180      	movs	r1, #128	; 0x80
 801d294:	f241 0214 	movw	r2, #4116	; 0x1014
 801d298:	5099      	str	r1, [r3, r2]
		/* Resume DMA reception */
		heth.Instance->DMARPDR = 0;
 801d29a:	2100      	movs	r1, #0
 801d29c:	f241 0208 	movw	r2, #4104	; 0x1008
 801d2a0:	5099      	str	r1, [r3, r2]
	}
	return p;
}
 801d2a2:	4650      	mov	r0, sl
 801d2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
 801d2a8:	f04f 0a00 	mov.w	sl, #0
 801d2ac:	e7f9      	b.n	801d2a2 <low_level_input+0xca>
 801d2ae:	bf00      	nop
 801d2b0:	200175dc 	.word	0x200175dc

0801d2b4 <ethernetif_input>:
 * interface. Then the type of the received packet is determined and
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument) {
 801d2b4:	b538      	push	{r3, r4, r5, lr}
 801d2b6:	4605      	mov	r5, r0
	struct pbuf *p;
	struct netif *netif = (struct netif *) argument;

	for (;;) {
		if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK) {
 801d2b8:	f04f 31ff 	mov.w	r1, #4294967295
 801d2bc:	4b0b      	ldr	r3, [pc, #44]	; (801d2ec <ethernetif_input+0x38>)
 801d2be:	6818      	ldr	r0, [r3, #0]
 801d2c0:	f7f5 fd20 	bl	8012d04 <osSemaphoreWait>
 801d2c4:	2800      	cmp	r0, #0
 801d2c6:	d1f7      	bne.n	801d2b8 <ethernetif_input+0x4>
 801d2c8:	e001      	b.n	801d2ce <ethernetif_input+0x1a>
				if (p != NULL) {
					if (netif->input(p, netif) != ERR_OK) {
						pbuf_free(p);
					}
				}
			} while (p != NULL);
 801d2ca:	2c00      	cmp	r4, #0
 801d2cc:	d0f4      	beq.n	801d2b8 <ethernetif_input+0x4>
				p = low_level_input(netif);
 801d2ce:	4628      	mov	r0, r5
 801d2d0:	f7ff ff82 	bl	801d1d8 <low_level_input>
				if (p != NULL) {
 801d2d4:	4604      	mov	r4, r0
 801d2d6:	2800      	cmp	r0, #0
 801d2d8:	d0f7      	beq.n	801d2ca <ethernetif_input+0x16>
					if (netif->input(p, netif) != ERR_OK) {
 801d2da:	692b      	ldr	r3, [r5, #16]
 801d2dc:	4629      	mov	r1, r5
 801d2de:	4798      	blx	r3
 801d2e0:	2800      	cmp	r0, #0
 801d2e2:	d0f2      	beq.n	801d2ca <ethernetif_input+0x16>
						pbuf_free(p);
 801d2e4:	4620      	mov	r0, r4
 801d2e6:	f7fb f92b 	bl	8018540 <pbuf_free>
 801d2ea:	e7ee      	b.n	801d2ca <ethernetif_input+0x16>
 801d2ec:	200102fc 	.word	0x200102fc

0801d2f0 <low_level_output>:
static err_t low_level_output(struct netif *netif, struct pbuf *p) {
 801d2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2f4:	468b      	mov	fp, r1
	uint8_t *buffer = (uint8_t *) (heth.TxDesc->Buffer1Addr);
 801d2f6:	4b2c      	ldr	r3, [pc, #176]	; (801d3a8 <low_level_output+0xb8>)
 801d2f8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801d2fa:	f8d6 a008 	ldr.w	sl, [r6, #8]
	bufferoffset = 0;
 801d2fe:	2400      	movs	r4, #0
	uint32_t framelength = 0;
 801d300:	4627      	mov	r7, r4
	for (q = p; q != NULL; q = q->next) {
 801d302:	f1bb 0f00 	cmp.w	fp, #0
 801d306:	d032      	beq.n	801d36e <low_level_output+0x7e>
		if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET) {
 801d308:	6833      	ldr	r3, [r6, #0]
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	db35      	blt.n	801d37a <low_level_output+0x8a>
		byteslefttocopy = q->len;
 801d30e:	f8bb 900a 	ldrh.w	r9, [fp, #10]
		payloadoffset = 0;
 801d312:	2500      	movs	r5, #0
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
 801d314:	eb04 0809 	add.w	r8, r4, r9
 801d318:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801d31c:	4598      	cmp	r8, r3
 801d31e:	d919      	bls.n	801d354 <low_level_output+0x64>
					(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 801d320:	f8db 1004 	ldr.w	r1, [fp, #4]
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 801d324:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 801d328:	3204      	adds	r2, #4
 801d32a:	4429      	add	r1, r5
 801d32c:	eb0a 0004 	add.w	r0, sl, r4
 801d330:	f003 fae1 	bl	80208f6 <memcpy>
			DmaTxDesc = (ETH_DMADescTypeDef *) (DmaTxDesc->Buffer2NextDescAddr);
 801d334:	68f6      	ldr	r6, [r6, #12]
			if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET) {
 801d336:	6833      	ldr	r3, [r6, #0]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	db21      	blt.n	801d380 <low_level_output+0x90>
			buffer = (uint8_t *) (DmaTxDesc->Buffer1Addr);
 801d33c:	f8d6 a008 	ldr.w	sl, [r6, #8]
			byteslefttocopy = byteslefttocopy
 801d340:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801d344:	1b2d      	subs	r5, r5, r4
 801d346:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
			framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801d34a:	1b3f      	subs	r7, r7, r4
 801d34c:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
			bufferoffset = 0;
 801d350:	2400      	movs	r4, #0
 801d352:	e7df      	b.n	801d314 <low_level_output+0x24>
				(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 801d354:	f8db 1004 	ldr.w	r1, [fp, #4]
		memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 801d358:	464a      	mov	r2, r9
 801d35a:	4429      	add	r1, r5
 801d35c:	eb0a 0004 	add.w	r0, sl, r4
 801d360:	f003 fac9 	bl	80208f6 <memcpy>
		framelength = framelength + byteslefttocopy;
 801d364:	444f      	add	r7, r9
	for (q = p; q != NULL; q = q->next) {
 801d366:	f8db b000 	ldr.w	fp, [fp]
		bufferoffset = bufferoffset + byteslefttocopy;
 801d36a:	4644      	mov	r4, r8
 801d36c:	e7c9      	b.n	801d302 <low_level_output+0x12>
	HAL_ETH_TransmitFrame(&heth, framelength);
 801d36e:	4639      	mov	r1, r7
 801d370:	480d      	ldr	r0, [pc, #52]	; (801d3a8 <low_level_output+0xb8>)
 801d372:	f7f3 fc39 	bl	8010be8 <HAL_ETH_TransmitFrame>
	errval = ERR_OK;
 801d376:	2000      	movs	r0, #0
 801d378:	e004      	b.n	801d384 <low_level_output+0x94>
			errval = ERR_USE;
 801d37a:	f06f 0007 	mvn.w	r0, #7
 801d37e:	e001      	b.n	801d384 <low_level_output+0x94>
				errval = ERR_USE;
 801d380:	f06f 0007 	mvn.w	r0, #7
	if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t) RESET) {
 801d384:	4b08      	ldr	r3, [pc, #32]	; (801d3a8 <low_level_output+0xb8>)
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	f241 0214 	movw	r2, #4116	; 0x1014
 801d38c:	589a      	ldr	r2, [r3, r2]
 801d38e:	f012 0f20 	tst.w	r2, #32
 801d392:	d007      	beq.n	801d3a4 <low_level_output+0xb4>
		heth.Instance->DMASR = ETH_DMASR_TUS;
 801d394:	2120      	movs	r1, #32
 801d396:	f241 0214 	movw	r2, #4116	; 0x1014
 801d39a:	5099      	str	r1, [r3, r2]
		heth.Instance->DMATPDR = 0;
 801d39c:	2100      	movs	r1, #0
 801d39e:	f241 0204 	movw	r2, #4100	; 0x1004
 801d3a2:	5099      	str	r1, [r3, r2]
}
 801d3a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3a8:	200175dc 	.word	0x200175dc

0801d3ac <low_level_init>:
static void low_level_init(struct netif *netif) {
 801d3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3ae:	b08d      	sub	sp, #52	; 0x34
 801d3b0:	4604      	mov	r4, r0
	heth.Instance = ETH;
 801d3b2:	483a      	ldr	r0, [pc, #232]	; (801d49c <low_level_init+0xf0>)
 801d3b4:	4b3a      	ldr	r3, [pc, #232]	; (801d4a0 <low_level_init+0xf4>)
 801d3b6:	6003      	str	r3, [r0, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801d3b8:	2201      	movs	r2, #1
 801d3ba:	6042      	str	r2, [r0, #4]
	heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 801d3bc:	8202      	strh	r2, [r0, #16]
	MACAddr[0] = hflash.mac_addr[0];
 801d3be:	4b39      	ldr	r3, [pc, #228]	; (801d4a4 <low_level_init+0xf8>)
 801d3c0:	7f99      	ldrb	r1, [r3, #30]
 801d3c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
	MACAddr[1] = hflash.mac_addr[1];
 801d3c6:	7fd9      	ldrb	r1, [r3, #31]
 801d3c8:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
	MACAddr[2] = hflash.mac_addr[2];
 801d3cc:	f893 1020 	ldrb.w	r1, [r3, #32]
 801d3d0:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
	MACAddr[3] = hflash.mac_addr[3];
 801d3d4:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 801d3d8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
	MACAddr[4] = hflash.mac_addr[4];
 801d3dc:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 801d3e0:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
	MACAddr[5] = hflash.mac_addr[5];
 801d3e4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d3e8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	heth.Init.MACAddr = &MACAddr[0];
 801d3ec:	ab0a      	add	r3, sp, #40	; 0x28
 801d3ee:	6143      	str	r3, [r0, #20]
	heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 801d3f0:	6182      	str	r2, [r0, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 801d3f2:	2300      	movs	r3, #0
 801d3f4:	61c3      	str	r3, [r0, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801d3f6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801d3fa:	6203      	str	r3, [r0, #32]
	hal_eth_init_status = HAL_ETH_Init(&heth);
 801d3fc:	f7f3 fd90 	bl	8010f20 <HAL_ETH_Init>
	if (hal_eth_init_status == HAL_OK) {
 801d400:	b928      	cbnz	r0, 801d40e <low_level_init+0x62>
		netif->flags |= NETIF_FLAG_LINK_UP;
 801d402:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801d406:	f043 0304 	orr.w	r3, r3, #4
 801d40a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 801d40e:	4f23      	ldr	r7, [pc, #140]	; (801d49c <low_level_init+0xf0>)
 801d410:	2304      	movs	r3, #4
 801d412:	4a25      	ldr	r2, [pc, #148]	; (801d4a8 <low_level_init+0xfc>)
 801d414:	4925      	ldr	r1, [pc, #148]	; (801d4ac <low_level_init+0x100>)
 801d416:	4638      	mov	r0, r7
 801d418:	f7f3 fb76 	bl	8010b08 <HAL_ETH_DMATxDescListInit>
	HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 801d41c:	2304      	movs	r3, #4
 801d41e:	4a24      	ldr	r2, [pc, #144]	; (801d4b0 <low_level_init+0x104>)
 801d420:	4924      	ldr	r1, [pc, #144]	; (801d4b4 <low_level_init+0x108>)
 801d422:	4638      	mov	r0, r7
 801d424:	f7f3 fba9 	bl	8010b7a <HAL_ETH_DMARxDescListInit>
	netif->hwaddr_len = ETH_HWADDR_LEN;
 801d428:	2306      	movs	r3, #6
 801d42a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	netif->hwaddr[0] = heth.Init.MACAddr[0];
 801d42e:	697b      	ldr	r3, [r7, #20]
 801d430:	781a      	ldrb	r2, [r3, #0]
 801d432:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	netif->hwaddr[1] = heth.Init.MACAddr[1];
 801d436:	785a      	ldrb	r2, [r3, #1]
 801d438:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	netif->hwaddr[2] = heth.Init.MACAddr[2];
 801d43c:	789a      	ldrb	r2, [r3, #2]
 801d43e:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
	netif->hwaddr[3] = heth.Init.MACAddr[3];
 801d442:	78da      	ldrb	r2, [r3, #3]
 801d444:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	netif->hwaddr[4] = heth.Init.MACAddr[4];
 801d448:	791a      	ldrb	r2, [r3, #4]
 801d44a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
	netif->hwaddr[5] = heth.Init.MACAddr[5];
 801d44e:	795b      	ldrb	r3, [r3, #5]
 801d450:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	netif->mtu = 1500;
 801d454:	f240 53dc 	movw	r3, #1500	; 0x5dc
 801d458:	8463      	strh	r3, [r4, #34]	; 0x22
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801d45a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801d45e:	f043 030a 	orr.w	r3, r3, #10
 801d462:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	osSemaphoreDef(SEM);
 801d466:	2300      	movs	r3, #0
 801d468:	9308      	str	r3, [sp, #32]
 801d46a:	9309      	str	r3, [sp, #36]	; 0x24
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801d46c:	2101      	movs	r1, #1
 801d46e:	a808      	add	r0, sp, #32
 801d470:	f7f5 fc22 	bl	8012cb8 <osSemaphoreCreate>
 801d474:	4b10      	ldr	r3, [pc, #64]	; (801d4b8 <low_level_init+0x10c>)
 801d476:	6018      	str	r0, [r3, #0]
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 801d478:	ad01      	add	r5, sp, #4
 801d47a:	4e10      	ldr	r6, [pc, #64]	; (801d4bc <low_level_init+0x110>)
 801d47c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d47e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d480:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801d484:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	osThreadCreate(osThread(EthIf), netif);
 801d488:	4621      	mov	r1, r4
 801d48a:	a801      	add	r0, sp, #4
 801d48c:	f7f5 fb63 	bl	8012b56 <osThreadCreate>
	HAL_ETH_Start(&heth);
 801d490:	4638      	mov	r0, r7
 801d492:	f7f3 fe71 	bl	8011178 <HAL_ETH_Start>
}
 801d496:	b00d      	add	sp, #52	; 0x34
 801d498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d49a:	bf00      	nop
 801d49c:	200175dc 	.word	0x200175dc
 801d4a0:	40028000 	.word	0x40028000
 801d4a4:	20015ce4 	.word	0x20015ce4
 801d4a8:	20017624 	.word	0x20017624
 801d4ac:	20015d0c 	.word	0x20015d0c
 801d4b0:	20015d8c 	.word	0x20015d8c
 801d4b4:	2001755c 	.word	0x2001755c
 801d4b8:	200102fc 	.word	0x200102fc
 801d4bc:	0802136c 	.word	0x0802136c

0801d4c0 <HAL_ETH_MspInit>:
	if (ethHandle->Instance == ETH) {
 801d4c0:	6802      	ldr	r2, [r0, #0]
 801d4c2:	4b29      	ldr	r3, [pc, #164]	; (801d568 <HAL_ETH_MspInit+0xa8>)
 801d4c4:	429a      	cmp	r2, r3
 801d4c6:	d000      	beq.n	801d4ca <HAL_ETH_MspInit+0xa>
 801d4c8:	4770      	bx	lr
void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle) {
 801d4ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4cc:	b089      	sub	sp, #36	; 0x24
		__HAL_RCC_ETH_CLK_ENABLE()
 801d4ce:	2400      	movs	r4, #0
 801d4d0:	9400      	str	r4, [sp, #0]
 801d4d2:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 801d4d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d4d8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 801d4dc:	631a      	str	r2, [r3, #48]	; 0x30
 801d4de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d4e0:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 801d4e4:	9200      	str	r2, [sp, #0]
 801d4e6:	9a00      	ldr	r2, [sp, #0]
 801d4e8:	9401      	str	r4, [sp, #4]
 801d4ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d4ec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801d4f0:	631a      	str	r2, [r3, #48]	; 0x30
 801d4f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d4f4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801d4f8:	9201      	str	r2, [sp, #4]
 801d4fa:	9a01      	ldr	r2, [sp, #4]
 801d4fc:	9402      	str	r4, [sp, #8]
 801d4fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d500:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801d504:	631a      	str	r2, [r3, #48]	; 0x30
 801d506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d50c:	9302      	str	r3, [sp, #8]
 801d50e:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 801d510:	2332      	movs	r3, #50	; 0x32
 801d512:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d514:	2702      	movs	r7, #2
 801d516:	9704      	str	r7, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d518:	9405      	str	r4, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d51a:	2603      	movs	r6, #3
 801d51c:	9606      	str	r6, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d51e:	250b      	movs	r5, #11
 801d520:	9507      	str	r5, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d522:	a903      	add	r1, sp, #12
 801d524:	4811      	ldr	r0, [pc, #68]	; (801d56c <HAL_ETH_MspInit+0xac>)
 801d526:	f7f4 f819 	bl	801155c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 801d52a:	2386      	movs	r3, #134	; 0x86
 801d52c:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d52e:	9704      	str	r7, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d530:	9405      	str	r4, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d532:	9606      	str	r6, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d534:	9507      	str	r5, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d536:	a903      	add	r1, sp, #12
 801d538:	480d      	ldr	r0, [pc, #52]	; (801d570 <HAL_ETH_MspInit+0xb0>)
 801d53a:	f7f4 f80f 	bl	801155c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 801d53e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801d542:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d544:	9704      	str	r7, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d546:	9405      	str	r4, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d548:	9606      	str	r6, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d54a:	9507      	str	r5, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801d54c:	a903      	add	r1, sp, #12
 801d54e:	4809      	ldr	r0, [pc, #36]	; (801d574 <HAL_ETH_MspInit+0xb4>)
 801d550:	f7f4 f804 	bl	801155c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 801d554:	4622      	mov	r2, r4
 801d556:	2105      	movs	r1, #5
 801d558:	203d      	movs	r0, #61	; 0x3d
 801d55a:	f7f2 ff6b 	bl	8010434 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ETH_IRQn);
 801d55e:	203d      	movs	r0, #61	; 0x3d
 801d560:	f7f2 ff9a 	bl	8010498 <HAL_NVIC_EnableIRQ>
}
 801d564:	b009      	add	sp, #36	; 0x24
 801d566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d568:	40028000 	.word	0x40028000
 801d56c:	40020800 	.word	0x40020800
 801d570:	40020000 	.word	0x40020000
 801d574:	40020400 	.word	0x40020400

0801d578 <HAL_ETH_RxCpltCallback>:
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth) {
 801d578:	b508      	push	{r3, lr}
	osSemaphoreRelease(s_xSemaphore);
 801d57a:	4b02      	ldr	r3, [pc, #8]	; (801d584 <HAL_ETH_RxCpltCallback+0xc>)
 801d57c:	6818      	ldr	r0, [r3, #0]
 801d57e:	f7f5 fbfb 	bl	8012d78 <osSemaphoreRelease>
 801d582:	bd08      	pop	{r3, pc}
 801d584:	200102fc 	.word	0x200102fc

0801d588 <ethernetif_init>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif) {
 801d588:	b510      	push	{r4, lr}
	LWIP_ASSERT("netif != NULL", (netif != NULL));
 801d58a:	4604      	mov	r4, r0
 801d58c:	b170      	cbz	r0, 801d5ac <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

	netif->name[0] = IFNAME0;
 801d58e:	2373      	movs	r3, #115	; 0x73
 801d590:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	netif->name[1] = IFNAME1;
 801d594:	2374      	movs	r3, #116	; 0x74
 801d596:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	 * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
	netif->output = etharp_output;
 801d59a:	4b08      	ldr	r3, [pc, #32]	; (801d5bc <ethernetif_init+0x34>)
 801d59c:	6163      	str	r3, [r4, #20]

#if LWIP_IPV6
	netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

	netif->linkoutput = low_level_output;
 801d59e:	4b08      	ldr	r3, [pc, #32]	; (801d5c0 <ethernetif_init+0x38>)
 801d5a0:	61a3      	str	r3, [r4, #24]

	/* initialize the hardware */
	low_level_init(netif);
 801d5a2:	4620      	mov	r0, r4
 801d5a4:	f7ff ff02 	bl	801d3ac <low_level_init>

	return ERR_OK;
}
 801d5a8:	2000      	movs	r0, #0
 801d5aa:	bd10      	pop	{r4, pc}
	LWIP_ASSERT("netif != NULL", (netif != NULL));
 801d5ac:	4b05      	ldr	r3, [pc, #20]	; (801d5c4 <ethernetif_init+0x3c>)
 801d5ae:	f240 2229 	movw	r2, #553	; 0x229
 801d5b2:	4905      	ldr	r1, [pc, #20]	; (801d5c8 <ethernetif_init+0x40>)
 801d5b4:	4805      	ldr	r0, [pc, #20]	; (801d5cc <ethernetif_init+0x44>)
 801d5b6:	f002 fa9a 	bl	801faee <iprintf>
 801d5ba:	e7e8      	b.n	801d58e <ethernetif_init+0x6>
 801d5bc:	08016b71 	.word	0x08016b71
 801d5c0:	0801d2f1 	.word	0x0801d2f1
 801d5c4:	08026e24 	.word	0x08026e24
 801d5c8:	08025688 	.word	0x08025688
 801d5cc:	080214f0 	.word	0x080214f0

0801d5d0 <sys_now>:
 * @brief  Returns the current time in milliseconds
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Time
 */
u32_t sys_now(void) {
 801d5d0:	b508      	push	{r3, lr}
	return HAL_GetTick();
 801d5d2:	f7f2 ff03 	bl	80103dc <HAL_GetTick>
}
 801d5d6:	bd08      	pop	{r3, pc}

0801d5d8 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 801d5d8:	b510      	push	{r4, lr}
 801d5da:	b084      	sub	sp, #16
	/* init code for LWIP */

	MX_LWIP_Init();
 801d5dc:	f001 f804 	bl	801e5e8 <MX_LWIP_Init>
	/* USER CODE BEGIN StartDefaultTask */

	struct netconn *conn_port80;
	err_t err;
	uint32_t reg;
	conn_port80 = netconn_new(NETCONN_TCP);
 801d5e0:	2200      	movs	r2, #0
 801d5e2:	4611      	mov	r1, r2
 801d5e4:	2010      	movs	r0, #16
 801d5e6:	f7f7 faed 	bl	8014bc4 <netconn_new_with_proto_and_callback>
	if (conn_port80 != NULL) {
 801d5ea:	b198      	cbz	r0, 801d614 <StartDefaultTask+0x3c>
 801d5ec:	4604      	mov	r4, r0
		err = netconn_bind(conn_port80, IP_ADDR_ANY, hflash.web_port);
 801d5ee:	4b1d      	ldr	r3, [pc, #116]	; (801d664 <StartDefaultTask+0x8c>)
 801d5f0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 801d5f2:	491d      	ldr	r1, [pc, #116]	; (801d668 <StartDefaultTask+0x90>)
 801d5f4:	f7f7 fb94 	bl	8014d20 <netconn_bind>
		if (err == ERR_OK) {
 801d5f8:	b998      	cbnz	r0, 801d622 <StartDefaultTask+0x4a>
			netconn_listen(conn_port80);
 801d5fa:	21ff      	movs	r1, #255	; 0xff
 801d5fc:	4620      	mov	r0, r4
 801d5fe:	f7f7 fbb5 	bl	8014d6c <netconn_listen_with_backlog>
			sys_thread_new("web_thread", Web_thread, (void*) conn_port80,
 801d602:	2300      	movs	r3, #0
 801d604:	9300      	str	r3, [sp, #0]
 801d606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d60a:	4622      	mov	r2, r4
 801d60c:	4917      	ldr	r1, [pc, #92]	; (801d66c <StartDefaultTask+0x94>)
 801d60e:	4818      	ldr	r0, [pc, #96]	; (801d670 <StartDefaultTask+0x98>)
 801d610:	f7ff f96d 	bl	801c8ee <sys_thread_new>
		} else {
			netconn_delete(conn_port80);
		}
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 801d614:	2201      	movs	r2, #1
 801d616:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d61a:	4816      	ldr	r0, [pc, #88]	; (801d674 <StartDefaultTask+0x9c>)
 801d61c:	f7f4 f884 	bl	8011728 <HAL_GPIO_WritePin>
 801d620:	e009      	b.n	801d636 <StartDefaultTask+0x5e>
			netconn_delete(conn_port80);
 801d622:	4620      	mov	r0, r4
 801d624:	f7f7 fb2a 	bl	8014c7c <netconn_delete>
 801d628:	e7f4      	b.n	801d614 <StartDefaultTask+0x3c>
	for (;;) {
		osDelay(300);
		HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &reg);
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
		if (reboot_flag || !(reg & PHY_LINKED_STATUS)) {
			osDelay(30);
 801d62a:	201e      	movs	r0, #30
 801d62c:	f7f5 fac8 	bl	8012bc0 <osDelay>
			SCB->AIRCR = 0x05FA0004; /* Software reset */
 801d630:	4a11      	ldr	r2, [pc, #68]	; (801d678 <StartDefaultTask+0xa0>)
 801d632:	4b12      	ldr	r3, [pc, #72]	; (801d67c <StartDefaultTask+0xa4>)
 801d634:	60da      	str	r2, [r3, #12]
		osDelay(300);
 801d636:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801d63a:	f7f5 fac1 	bl	8012bc0 <osDelay>
		HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &reg);
 801d63e:	aa03      	add	r2, sp, #12
 801d640:	2101      	movs	r1, #1
 801d642:	480f      	ldr	r0, [pc, #60]	; (801d680 <StartDefaultTask+0xa8>)
 801d644:	f7f3 fbf6 	bl	8010e34 <HAL_ETH_ReadPHYRegister>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 801d648:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d64c:	4809      	ldr	r0, [pc, #36]	; (801d674 <StartDefaultTask+0x9c>)
 801d64e:	f7f4 f871 	bl	8011734 <HAL_GPIO_TogglePin>
		if (reboot_flag || !(reg & PHY_LINKED_STATUS)) {
 801d652:	4b0c      	ldr	r3, [pc, #48]	; (801d684 <StartDefaultTask+0xac>)
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	2b00      	cmp	r3, #0
 801d658:	d1e7      	bne.n	801d62a <StartDefaultTask+0x52>
 801d65a:	9b03      	ldr	r3, [sp, #12]
 801d65c:	f013 0f04 	tst.w	r3, #4
 801d660:	d1e9      	bne.n	801d636 <StartDefaultTask+0x5e>
 801d662:	e7e2      	b.n	801d62a <StartDefaultTask+0x52>
 801d664:	20015ce4 	.word	0x20015ce4
 801d668:	080258bc 	.word	0x080258bc
 801d66c:	080203b9 	.word	0x080203b9
 801d670:	08026f9c 	.word	0x08026f9c
 801d674:	40021000 	.word	0x40021000
 801d678:	05fa0004 	.word	0x05fa0004
 801d67c:	e000ed00 	.word	0xe000ed00
 801d680:	200175dc 	.word	0x200175dc
 801d684:	20010f88 	.word	0x20010f88

0801d688 <StartCreatorTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void StartCreatorTask(void const * argument) {
 801d688:	b570      	push	{r4, r5, r6, lr}
 801d68a:	b084      	sub	sp, #16
	struct netconn *conn_port102;
	err_t accept_err, err;
	uint8_t state = 0, run = 1;
	conn_port102 = netconn_new(NETCONN_TCP); /* Create a new TCP connection handle */
 801d68c:	2200      	movs	r2, #0
 801d68e:	4611      	mov	r1, r2
 801d690:	2010      	movs	r0, #16
 801d692:	f7f7 fa97 	bl	8014bc4 <netconn_new_with_proto_and_callback>
	if (conn_port102 != NULL) {
 801d696:	4605      	mov	r5, r0
 801d698:	b138      	cbz	r0, 801d6aa <StartCreatorTask+0x22>
		state++;
		LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_INFO,
 801d69a:	4b40      	ldr	r3, [pc, #256]	; (801d79c <StartCreatorTask+0x114>)
 801d69c:	2203      	movs	r2, #3
 801d69e:	4611      	mov	r1, r2
 801d6a0:	2001      	movs	r0, #1
 801d6a2:	f000 fef9 	bl	801e498 <LogText__>
		state++;
 801d6a6:	2401      	movs	r4, #1
 801d6a8:	e03f      	b.n	801d72a <StartCreatorTask+0xa2>
	uint8_t state = 0, run = 1;
 801d6aa:	2400      	movs	r4, #0
 801d6ac:	e03d      	b.n	801d72a <StartCreatorTask+0xa2>
	}
	for (;;) {
		while (run) {
			switch (state) {
			case 0: {
				conn_port102 = netconn_new(NETCONN_TCP); /* Create a new TCP connection handle */
 801d6ae:	2200      	movs	r2, #0
 801d6b0:	4611      	mov	r1, r2
 801d6b2:	2010      	movs	r0, #16
 801d6b4:	f7f7 fa86 	bl	8014bc4 <netconn_new_with_proto_and_callback>
				if (conn_port102 != NULL) {
 801d6b8:	4605      	mov	r5, r0
 801d6ba:	b140      	cbz	r0, 801d6ce <StartCreatorTask+0x46>
					state++;
 801d6bc:	3401      	adds	r4, #1
 801d6be:	b2e4      	uxtb	r4, r4
					LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_INFO,
 801d6c0:	4b36      	ldr	r3, [pc, #216]	; (801d79c <StartCreatorTask+0x114>)
 801d6c2:	2203      	movs	r2, #3
 801d6c4:	4611      	mov	r1, r2
 801d6c6:	2001      	movs	r0, #1
 801d6c8:	f000 fee6 	bl	801e498 <LogText__>
 801d6cc:	e02d      	b.n	801d72a <StartCreatorTask+0xa2>
							"New TCP connection on port 102 created.\r\n");
				} else {
					LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_ERR,
 801d6ce:	4b34      	ldr	r3, [pc, #208]	; (801d7a0 <StartCreatorTask+0x118>)
 801d6d0:	2201      	movs	r2, #1
 801d6d2:	2103      	movs	r1, #3
 801d6d4:	4610      	mov	r0, r2
 801d6d6:	f000 fedf 	bl	801e498 <LogText__>
 801d6da:	e026      	b.n	801d72a <StartCreatorTask+0xa2>
							"Can not create TCP connection on port 102.\r\n");
				}
				break;
			}
			case 1: {
				err = netconn_bind(conn_port102, IP_ADDR_ANY, hflash.port); /* Bind to port with default IP address */
 801d6dc:	4b31      	ldr	r3, [pc, #196]	; (801d7a4 <StartCreatorTask+0x11c>)
 801d6de:	8a5a      	ldrh	r2, [r3, #18]
 801d6e0:	4931      	ldr	r1, [pc, #196]	; (801d7a8 <StartCreatorTask+0x120>)
 801d6e2:	4628      	mov	r0, r5
 801d6e4:	f7f7 fb1c 	bl	8014d20 <netconn_bind>
				if (err == ERR_OK) {
 801d6e8:	b940      	cbnz	r0, 801d6fc <StartCreatorTask+0x74>
					state++;
 801d6ea:	3401      	adds	r4, #1
 801d6ec:	b2e4      	uxtb	r4, r4
					LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_INFO,
 801d6ee:	4b2f      	ldr	r3, [pc, #188]	; (801d7ac <StartCreatorTask+0x124>)
 801d6f0:	2203      	movs	r2, #3
 801d6f2:	4611      	mov	r1, r2
 801d6f4:	2001      	movs	r0, #1
 801d6f6:	f000 fecf 	bl	801e498 <LogText__>
 801d6fa:	e016      	b.n	801d72a <StartCreatorTask+0xa2>
							"Binded successfully to port 102.\r\n");
				} else {
					netconn_delete(conn_port102);
 801d6fc:	4628      	mov	r0, r5
 801d6fe:	f7f7 fabd 	bl	8014c7c <netconn_delete>
					LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_ERR,
 801d702:	4b2b      	ldr	r3, [pc, #172]	; (801d7b0 <StartCreatorTask+0x128>)
 801d704:	2201      	movs	r2, #1
 801d706:	2103      	movs	r1, #3
 801d708:	4610      	mov	r0, r2
 801d70a:	f000 fec5 	bl	801e498 <LogText__>
							"Error while binding, connection deleted.\r\n");
					state = 0;
 801d70e:	2400      	movs	r4, #0
 801d710:	e00b      	b.n	801d72a <StartCreatorTask+0xa2>
				}
				break;
			}
			case 2: {
				state++;
 801d712:	3401      	adds	r4, #1
 801d714:	b2e4      	uxtb	r4, r4
				netconn_listen(conn_port102); /* Start port listening*/
 801d716:	21ff      	movs	r1, #255	; 0xff
 801d718:	4628      	mov	r0, r5
 801d71a:	f7f7 fb27 	bl	8014d6c <netconn_listen_with_backlog>
				LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_INFO,
 801d71e:	4b25      	ldr	r3, [pc, #148]	; (801d7b4 <StartCreatorTask+0x12c>)
 801d720:	2203      	movs	r2, #3
 801d722:	4611      	mov	r1, r2
 801d724:	2001      	movs	r0, #1
 801d726:	f000 feb7 	bl	801e498 <LogText__>
			switch (state) {
 801d72a:	2c03      	cmp	r4, #3
 801d72c:	d8fd      	bhi.n	801d72a <StartCreatorTask+0xa2>
 801d72e:	a301      	add	r3, pc, #4	; (adr r3, 801d734 <StartCreatorTask+0xac>)
 801d730:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 801d734:	0801d6af 	.word	0x0801d6af
 801d738:	0801d6dd 	.word	0x0801d6dd
 801d73c:	0801d713 	.word	0x0801d713
 801d740:	0801d745 	.word	0x0801d745
						"Started port 102 listening.\r\n");
				break;
			}
			case 3: {
				struct netconn *arg_conn;
				accept_err = netconn_accept(conn_port102, &arg_conn); /* Waiting for new connection */
 801d744:	a903      	add	r1, sp, #12
 801d746:	4628      	mov	r0, r5
 801d748:	f7f7 fb2e 	bl	8014da8 <netconn_accept>
				if (accept_err == ERR_OK) {
 801d74c:	4606      	mov	r6, r0
 801d74e:	b978      	cbnz	r0, 801d770 <StartCreatorTask+0xe8>
					LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_INFO,
 801d750:	4b19      	ldr	r3, [pc, #100]	; (801d7b8 <StartCreatorTask+0x130>)
 801d752:	2203      	movs	r2, #3
 801d754:	4611      	mov	r1, r2
 801d756:	2001      	movs	r0, #1
 801d758:	f000 fe9e 	bl	801e498 <LogText__>
							"Create new task.\r\n");
					sys_thread_new("tcp_serv_thread", Client_thread,
 801d75c:	2301      	movs	r3, #1
 801d75e:	9300      	str	r3, [sp, #0]
 801d760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d764:	9a03      	ldr	r2, [sp, #12]
 801d766:	4915      	ldr	r1, [pc, #84]	; (801d7bc <StartCreatorTask+0x134>)
 801d768:	4815      	ldr	r0, [pc, #84]	; (801d7c0 <StartCreatorTask+0x138>)
 801d76a:	f7ff f8c0 	bl	801c8ee <sys_thread_new>
 801d76e:	e7dc      	b.n	801d72a <StartCreatorTask+0xa2>
							(void*) arg_conn,
							DEFAULT_THREAD_STACKSIZE/2, osPriorityAboveNormal);
				} else {
					LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_ERR,
 801d770:	4b14      	ldr	r3, [pc, #80]	; (801d7c4 <StartCreatorTask+0x13c>)
 801d772:	2201      	movs	r2, #1
 801d774:	2103      	movs	r1, #3
 801d776:	4610      	mov	r0, r2
 801d778:	f000 fe8e 	bl	801e498 <LogText__>
							"Error while accepting. Error number: ");
					LogNum(INFO_HIDE, SUB_SYS_TCP, LOG_LEV_ERR, accept_err, 10);
 801d77c:	230a      	movs	r3, #10
 801d77e:	9300      	str	r3, [sp, #0]
 801d780:	4633      	mov	r3, r6
 801d782:	2201      	movs	r2, #1
 801d784:	2103      	movs	r1, #3
 801d786:	2000      	movs	r0, #0
 801d788:	f000 feda 	bl	801e540 <LogNum__>
					LogText(INFO_HIDE, SUB_SYS_TCP, LOG_LEV_ERR, ".\r\n");
 801d78c:	4b0e      	ldr	r3, [pc, #56]	; (801d7c8 <StartCreatorTask+0x140>)
 801d78e:	2201      	movs	r2, #1
 801d790:	2103      	movs	r1, #3
 801d792:	2000      	movs	r0, #0
 801d794:	f000 fe80 	bl	801e498 <LogText__>
 801d798:	e7c7      	b.n	801d72a <StartCreatorTask+0xa2>
 801d79a:	bf00      	nop
 801d79c:	08026e84 	.word	0x08026e84
 801d7a0:	08026eb0 	.word	0x08026eb0
 801d7a4:	20015ce4 	.word	0x20015ce4
 801d7a8:	080258bc 	.word	0x080258bc
 801d7ac:	08026ee0 	.word	0x08026ee0
 801d7b0:	08026f04 	.word	0x08026f04
 801d7b4:	08026f30 	.word	0x08026f30
 801d7b8:	08026f50 	.word	0x08026f50
 801d7bc:	0801f489 	.word	0x0801f489
 801d7c0:	08026f64 	.word	0x08026f64
 801d7c4:	08026f74 	.word	0x08026f74
 801d7c8:	0802713c 	.word	0x0802713c

0801d7cc <StartHeapCleanerTask>:
		}
	}
}

//---------------------------------------------------------------
void StartHeapCleanerTask(void const * argument) {
 801d7cc:	b500      	push	{lr}
 801d7ce:	b083      	sub	sp, #12
	uint8_t * heap_ptr;
	for (;;) {
		xQueueReceive(cleaner_queue, &heap_ptr, portMAX_DELAY);
 801d7d0:	2300      	movs	r3, #0
 801d7d2:	f04f 32ff 	mov.w	r2, #4294967295
 801d7d6:	a901      	add	r1, sp, #4
 801d7d8:	4804      	ldr	r0, [pc, #16]	; (801d7ec <StartHeapCleanerTask+0x20>)
 801d7da:	6800      	ldr	r0, [r0, #0]
 801d7dc:	f7f6 f9dc 	bl	8013b98 <xQueueGenericReceive>
		vPortFree((uint8_t *) heap_ptr);
 801d7e0:	9801      	ldr	r0, [sp, #4]
 801d7e2:	f7f5 fe7b 	bl	80134dc <vPortFree>
		heap_ptr = NULL;
 801d7e6:	2300      	movs	r3, #0
 801d7e8:	9301      	str	r3, [sp, #4]
 801d7ea:	e7f1      	b.n	801d7d0 <StartHeapCleanerTask+0x4>
 801d7ec:	20018e08 	.word	0x20018e08

0801d7f0 <configureTimerForRunTimeStats>:
__weak void configureTimerForRunTimeStats(void) {
 801d7f0:	b508      	push	{r3, lr}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801d7f2:	4b06      	ldr	r3, [pc, #24]	; (801d80c <configureTimerForRunTimeStats+0x1c>)
 801d7f4:	2200      	movs	r2, #0
 801d7f6:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801d7fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801d7fe:	605a      	str	r2, [r3, #4]
	MX_TIM7_Init();
 801d800:	f001 fffa 	bl	801f7f8 <MX_TIM7_Init>
	HAL_TIM_Base_Start_IT(&htim7);
 801d804:	4802      	ldr	r0, [pc, #8]	; (801d810 <configureTimerForRunTimeStats+0x20>)
 801d806:	f7f4 fae8 	bl	8011dda <HAL_TIM_Base_Start_IT>
 801d80a:	bd08      	pop	{r3, pc}
 801d80c:	e000e100 	.word	0xe000e100
 801d810:	20018f80 	.word	0x20018f80

0801d814 <getRunTimeCounterValue>:
	return ulHighFrequencyTimerTicks;
 801d814:	4b01      	ldr	r3, [pc, #4]	; (801d81c <getRunTimeCounterValue+0x8>)
 801d816:	6818      	ldr	r0, [r3, #0]
}
 801d818:	4770      	bx	lr
 801d81a:	bf00      	nop
 801d81c:	20010300 	.word	0x20010300

0801d820 <vApplicationGetIdleTaskMemory>:
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 801d820:	4b03      	ldr	r3, [pc, #12]	; (801d830 <vApplicationGetIdleTaskMemory+0x10>)
 801d822:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 801d824:	4b03      	ldr	r3, [pc, #12]	; (801d834 <vApplicationGetIdleTaskMemory+0x14>)
 801d826:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 801d828:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d82c:	6013      	str	r3, [r2, #0]
 801d82e:	4770      	bx	lr
 801d830:	20010b04 	.word	0x20010b04
 801d834:	20010304 	.word	0x20010304

0801d838 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 801d838:	b570      	push	{r4, r5, r6, lr}
 801d83a:	b09c      	sub	sp, #112	; 0x70
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 801d83c:	4c32      	ldr	r4, [pc, #200]	; (801d908 <MX_FREERTOS_Init+0xd0>)
 801d83e:	ad15      	add	r5, sp, #84	; 0x54
 801d840:	4626      	mov	r6, r4
 801d842:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d846:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801d84a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801d84e:	2100      	movs	r1, #0
 801d850:	a815      	add	r0, sp, #84	; 0x54
 801d852:	f7f5 f980 	bl	8012b56 <osThreadCreate>
 801d856:	4b2d      	ldr	r3, [pc, #180]	; (801d90c <MX_FREERTOS_Init+0xd4>)
 801d858:	6018      	str	r0, [r3, #0]
	osThreadDef(processTask, StartProcessTask, osPriorityRealtime, 0, 1024);
 801d85a:	ad0e      	add	r5, sp, #56	; 0x38
 801d85c:	f104 061c 	add.w	r6, r4, #28
 801d860:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d864:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801d868:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	processTaskHandle = osThreadCreate(osThread(processTask), NULL);
 801d86c:	2100      	movs	r1, #0
 801d86e:	a80e      	add	r0, sp, #56	; 0x38
 801d870:	f7f5 f971 	bl	8012b56 <osThreadCreate>
 801d874:	4b26      	ldr	r3, [pc, #152]	; (801d910 <MX_FREERTOS_Init+0xd8>)
 801d876:	6018      	str	r0, [r3, #0]
	osThreadDef(conn_creatorTask, StartCreatorTask, osPriorityNormal, 0, 1024);
 801d878:	ad07      	add	r5, sp, #28
 801d87a:	f104 0638 	add.w	r6, r4, #56	; 0x38
 801d87e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d882:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801d886:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	conn_creatorHandle = osThreadCreate(osThread(conn_creatorTask), NULL);
 801d88a:	2100      	movs	r1, #0
 801d88c:	a807      	add	r0, sp, #28
 801d88e:	f7f5 f962 	bl	8012b56 <osThreadCreate>
 801d892:	4b20      	ldr	r3, [pc, #128]	; (801d914 <MX_FREERTOS_Init+0xdc>)
 801d894:	6018      	str	r0, [r3, #0]
	osThreadDef(cleanerTask, StartHeapCleanerTask, osPriorityAboveNormal, 0,
 801d896:	466d      	mov	r5, sp
 801d898:	3454      	adds	r4, #84	; 0x54
 801d89a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d89c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d89e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d8a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	heapCleanerHandle = osThreadCreate(osThread(cleanerTask), NULL);
 801d8a6:	2100      	movs	r1, #0
 801d8a8:	4668      	mov	r0, sp
 801d8aa:	f7f5 f954 	bl	8012b56 <osThreadCreate>
 801d8ae:	4b1a      	ldr	r3, [pc, #104]	; (801d918 <MX_FREERTOS_Init+0xe0>)
 801d8b0:	6018      	str	r0, [r3, #0]
	frames_queue = xQueueCreate(16, sizeof(uint16_t));
 801d8b2:	2200      	movs	r2, #0
 801d8b4:	2102      	movs	r1, #2
 801d8b6:	2010      	movs	r0, #16
 801d8b8:	f7f5 ff8f 	bl	80137da <xQueueGenericCreate>
 801d8bc:	4b17      	ldr	r3, [pc, #92]	; (801d91c <MX_FREERTOS_Init+0xe4>)
 801d8be:	6018      	str	r0, [r3, #0]
	vQueueAddToRegistry(frames_queue, "frames_queue");
 801d8c0:	4917      	ldr	r1, [pc, #92]	; (801d920 <MX_FREERTOS_Init+0xe8>)
 801d8c2:	f7f6 fabb 	bl	8013e3c <vQueueAddToRegistry>
	cleaner_queue = xQueueCreate(16, sizeof(uint8_t*));
 801d8c6:	2200      	movs	r2, #0
 801d8c8:	2104      	movs	r1, #4
 801d8ca:	2010      	movs	r0, #16
 801d8cc:	f7f5 ff85 	bl	80137da <xQueueGenericCreate>
 801d8d0:	4b14      	ldr	r3, [pc, #80]	; (801d924 <MX_FREERTOS_Init+0xec>)
 801d8d2:	6018      	str	r0, [r3, #0]
	vQueueAddToRegistry(cleaner_queue, "cleaner_queue");
 801d8d4:	4914      	ldr	r1, [pc, #80]	; (801d928 <MX_FREERTOS_Init+0xf0>)
 801d8d6:	f7f6 fab1 	bl	8013e3c <vQueueAddToRegistry>
	tcp_client_queue = xQueueCreate(8, sizeof(parcel_t));
 801d8da:	2200      	movs	r2, #0
 801d8dc:	2108      	movs	r1, #8
 801d8de:	4608      	mov	r0, r1
 801d8e0:	f7f5 ff7b 	bl	80137da <xQueueGenericCreate>
 801d8e4:	4b11      	ldr	r3, [pc, #68]	; (801d92c <MX_FREERTOS_Init+0xf4>)
 801d8e6:	6018      	str	r0, [r3, #0]
	vQueueAddToRegistry(tcp_client_queue, "tcp_client_queue");
 801d8e8:	4911      	ldr	r1, [pc, #68]	; (801d930 <MX_FREERTOS_Init+0xf8>)
 801d8ea:	f7f6 faa7 	bl	8013e3c <vQueueAddToRegistry>
	protocol_queue = xQueueCreate(8, sizeof(parcel_t));
 801d8ee:	2200      	movs	r2, #0
 801d8f0:	2108      	movs	r1, #8
 801d8f2:	4608      	mov	r0, r1
 801d8f4:	f7f5 ff71 	bl	80137da <xQueueGenericCreate>
 801d8f8:	4b0e      	ldr	r3, [pc, #56]	; (801d934 <MX_FREERTOS_Init+0xfc>)
 801d8fa:	6018      	str	r0, [r3, #0]
	vQueueAddToRegistry(protocol_queue, "protocol_queue");
 801d8fc:	490e      	ldr	r1, [pc, #56]	; (801d938 <MX_FREERTOS_Init+0x100>)
 801d8fe:	f7f6 fa9d 	bl	8013e3c <vQueueAddToRegistry>
}
 801d902:	b01c      	add	sp, #112	; 0x70
 801d904:	bd70      	pop	{r4, r5, r6, pc}
 801d906:	bf00      	nop
 801d908:	08021388 	.word	0x08021388
 801d90c:	20018df4 	.word	0x20018df4
 801d910:	20018e04 	.word	0x20018e04
 801d914:	20018e0c 	.word	0x20018e0c
 801d918:	20018dfc 	.word	0x20018dfc
 801d91c:	20018df8 	.word	0x20018df8
 801d920:	08026e40 	.word	0x08026e40
 801d924:	20018e08 	.word	0x20018e08
 801d928:	08026e50 	.word	0x08026e50
 801d92c:	20018f40 	.word	0x20018f40
 801d930:	08026e60 	.word	0x08026e60
 801d934:	20018f00 	.word	0x20018f00
 801d938:	08026e74 	.word	0x08026e74

0801d93c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 801d93c:	b530      	push	{r4, r5, lr}
 801d93e:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d940:	2400      	movs	r4, #0
 801d942:	9407      	str	r4, [sp, #28]
 801d944:	9408      	str	r4, [sp, #32]
 801d946:	9409      	str	r4, [sp, #36]	; 0x24
 801d948:	940a      	str	r4, [sp, #40]	; 0x28
 801d94a:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801d94c:	9401      	str	r4, [sp, #4]
 801d94e:	4b28      	ldr	r3, [pc, #160]	; (801d9f0 <MX_GPIO_Init+0xb4>)
 801d950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d952:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801d956:	631a      	str	r2, [r3, #48]	; 0x30
 801d958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d95a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801d95e:	9201      	str	r2, [sp, #4]
 801d960:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801d962:	9402      	str	r4, [sp, #8]
 801d964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d966:	f042 0204 	orr.w	r2, r2, #4
 801d96a:	631a      	str	r2, [r3, #48]	; 0x30
 801d96c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d96e:	f002 0204 	and.w	r2, r2, #4
 801d972:	9202      	str	r2, [sp, #8]
 801d974:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801d976:	9403      	str	r4, [sp, #12]
 801d978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d97a:	f042 0201 	orr.w	r2, r2, #1
 801d97e:	631a      	str	r2, [r3, #48]	; 0x30
 801d980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d982:	f002 0201 	and.w	r2, r2, #1
 801d986:	9203      	str	r2, [sp, #12]
 801d988:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801d98a:	9404      	str	r4, [sp, #16]
 801d98c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d98e:	f042 0210 	orr.w	r2, r2, #16
 801d992:	631a      	str	r2, [r3, #48]	; 0x30
 801d994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d996:	f002 0210 	and.w	r2, r2, #16
 801d99a:	9204      	str	r2, [sp, #16]
 801d99c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801d99e:	9405      	str	r4, [sp, #20]
 801d9a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d9a2:	f042 0202 	orr.w	r2, r2, #2
 801d9a6:	631a      	str	r2, [r3, #48]	; 0x30
 801d9a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d9aa:	f002 0202 	and.w	r2, r2, #2
 801d9ae:	9205      	str	r2, [sp, #20]
 801d9b0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801d9b2:	9406      	str	r4, [sp, #24]
 801d9b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d9b6:	f042 0208 	orr.w	r2, r2, #8
 801d9ba:	631a      	str	r2, [r3, #48]	; 0x30
 801d9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d9be:	f003 0308 	and.w	r3, r3, #8
 801d9c2:	9306      	str	r3, [sp, #24]
 801d9c4:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin, GPIO_PIN_RESET);
 801d9c6:	4d0b      	ldr	r5, [pc, #44]	; (801d9f4 <MX_GPIO_Init+0xb8>)
 801d9c8:	4622      	mov	r2, r4
 801d9ca:	f240 6101 	movw	r1, #1537	; 0x601
 801d9ce:	4628      	mov	r0, r5
 801d9d0:	f7f3 feaa 	bl	8011728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin;
 801d9d4:	f240 6301 	movw	r3, #1537	; 0x601
 801d9d8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d9da:	2301      	movs	r3, #1
 801d9dc:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d9de:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d9e0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801d9e2:	a907      	add	r1, sp, #28
 801d9e4:	4628      	mov	r0, r5
 801d9e6:	f7f3 fdb9 	bl	801155c <HAL_GPIO_Init>

}
 801d9ea:	b00d      	add	sp, #52	; 0x34
 801d9ec:	bd30      	pop	{r4, r5, pc}
 801d9ee:	bf00      	nop
 801d9f0:	40023800 	.word	0x40023800
 801d9f4:	40021000 	.word	0x40021000

0801d9f8 <MX_IWDG_Init>:
IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
  hiwdg.Instance = IWDG;
 801d9f8:	4b04      	ldr	r3, [pc, #16]	; (801da0c <MX_IWDG_Init+0x14>)
 801d9fa:	4a05      	ldr	r2, [pc, #20]	; (801da10 <MX_IWDG_Init+0x18>)
 801d9fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 801d9fe:	2200      	movs	r2, #0
 801da00:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 400;
 801da02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801da06:	609a      	str	r2, [r3, #8]
 801da08:	4770      	bx	lr
 801da0a:	bf00      	nop
 801da0c:	20018e10 	.word	0x20018e10
 801da10:	40003000 	.word	0x40003000

0801da14 <jsmn_alloc_token>:
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
 801da14:	6843      	ldr	r3, [r0, #4]
 801da16:	4293      	cmp	r3, r2
 801da18:	d20a      	bcs.n	801da30 <jsmn_alloc_token+0x1c>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 801da1a:	1c5a      	adds	r2, r3, #1
 801da1c:	6042      	str	r2, [r0, #4]
 801da1e:	eb01 1003 	add.w	r0, r1, r3, lsl #4
	tok->start = tok->end = -1;
 801da22:	f04f 33ff 	mov.w	r3, #4294967295
 801da26:	6083      	str	r3, [r0, #8]
 801da28:	6043      	str	r3, [r0, #4]
	tok->size = 0;
 801da2a:	2300      	movs	r3, #0
 801da2c:	60c3      	str	r3, [r0, #12]
#ifdef JSMN_PARENT_LINKS
	tok->parent = -1;
#endif
	return tok;
 801da2e:	4770      	bx	lr
		return NULL;
 801da30:	2000      	movs	r0, #0
}
 801da32:	4770      	bx	lr

0801da34 <jsmn_fill_token>:
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
 801da34:	7001      	strb	r1, [r0, #0]
	token->start = start;
 801da36:	6042      	str	r2, [r0, #4]
	token->end = end;
 801da38:	6083      	str	r3, [r0, #8]
	token->size = 0;
 801da3a:	2300      	movs	r3, #0
 801da3c:	60c3      	str	r3, [r0, #12]
 801da3e:	4770      	bx	lr

0801da40 <jsmn_parse_primitive>:

/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
 801da40:	b570      	push	{r4, r5, r6, lr}
	jsmntok_t *token;
	int start;

	start = parser->pos;
 801da42:	6806      	ldr	r6, [r0, #0]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801da44:	e00b      	b.n	801da5e <jsmn_parse_primitive+0x1e>
		switch (js[parser->pos]) {
 801da46:	2c09      	cmp	r4, #9
 801da48:	d303      	bcc.n	801da52 <jsmn_parse_primitive+0x12>
 801da4a:	2c0a      	cmp	r4, #10
 801da4c:	d919      	bls.n	801da82 <jsmn_parse_primitive+0x42>
 801da4e:	2c0d      	cmp	r4, #13
 801da50:	d017      	beq.n	801da82 <jsmn_parse_primitive+0x42>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 801da52:	3c20      	subs	r4, #32
 801da54:	b2e4      	uxtb	r4, r4
 801da56:	2c5e      	cmp	r4, #94	; 0x5e
 801da58:	d824      	bhi.n	801daa4 <jsmn_parse_primitive+0x64>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801da5a:	3501      	adds	r5, #1
 801da5c:	6005      	str	r5, [r0, #0]
 801da5e:	6805      	ldr	r5, [r0, #0]
 801da60:	4295      	cmp	r5, r2
 801da62:	d20e      	bcs.n	801da82 <jsmn_parse_primitive+0x42>
 801da64:	5d4c      	ldrb	r4, [r1, r5]
 801da66:	b164      	cbz	r4, 801da82 <jsmn_parse_primitive+0x42>
		switch (js[parser->pos]) {
 801da68:	2c20      	cmp	r4, #32
 801da6a:	d00a      	beq.n	801da82 <jsmn_parse_primitive+0x42>
 801da6c:	d9eb      	bls.n	801da46 <jsmn_parse_primitive+0x6>
 801da6e:	2c3a      	cmp	r4, #58	; 0x3a
 801da70:	d007      	beq.n	801da82 <jsmn_parse_primitive+0x42>
 801da72:	d904      	bls.n	801da7e <jsmn_parse_primitive+0x3e>
 801da74:	2c5d      	cmp	r4, #93	; 0x5d
 801da76:	d004      	beq.n	801da82 <jsmn_parse_primitive+0x42>
 801da78:	2c7d      	cmp	r4, #125	; 0x7d
 801da7a:	d1ea      	bne.n	801da52 <jsmn_parse_primitive+0x12>
 801da7c:	e001      	b.n	801da82 <jsmn_parse_primitive+0x42>
 801da7e:	2c2c      	cmp	r4, #44	; 0x2c
 801da80:	d1e7      	bne.n	801da52 <jsmn_parse_primitive+0x12>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
 801da82:	b19b      	cbz	r3, 801daac <jsmn_parse_primitive+0x6c>
 801da84:	4619      	mov	r1, r3
 801da86:	4604      	mov	r4, r0
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
 801da88:	9a04      	ldr	r2, [sp, #16]
 801da8a:	f7ff ffc3 	bl	801da14 <jsmn_alloc_token>
	if (token == NULL) {
 801da8e:	b188      	cbz	r0, 801dab4 <jsmn_parse_primitive+0x74>
		parser->pos = start;
		return JSMN_ERROR_NOMEM;
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 801da90:	6823      	ldr	r3, [r4, #0]
 801da92:	4632      	mov	r2, r6
 801da94:	2104      	movs	r1, #4
 801da96:	f7ff ffcd 	bl	801da34 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
 801da9a:	6823      	ldr	r3, [r4, #0]
 801da9c:	3b01      	subs	r3, #1
 801da9e:	6023      	str	r3, [r4, #0]
	return 0;
 801daa0:	2000      	movs	r0, #0
}
 801daa2:	bd70      	pop	{r4, r5, r6, pc}
			parser->pos = start;
 801daa4:	6006      	str	r6, [r0, #0]
			return JSMN_ERROR_INVAL;
 801daa6:	f06f 0001 	mvn.w	r0, #1
 801daaa:	bd70      	pop	{r4, r5, r6, pc}
		parser->pos--;
 801daac:	3d01      	subs	r5, #1
 801daae:	6005      	str	r5, [r0, #0]
		return 0;
 801dab0:	2000      	movs	r0, #0
 801dab2:	bd70      	pop	{r4, r5, r6, pc}
		parser->pos = start;
 801dab4:	6026      	str	r6, [r4, #0]
		return JSMN_ERROR_NOMEM;
 801dab6:	f04f 30ff 	mov.w	r0, #4294967295
 801daba:	bd70      	pop	{r4, r5, r6, pc}

0801dabc <jsmn_parse_string>:

/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
 801dabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	jsmntok_t *token;

	int start = parser->pos;
 801dabe:	6806      	ldr	r6, [r0, #0]

	parser->pos++;
 801dac0:	1c74      	adds	r4, r6, #1
 801dac2:	6004      	str	r4, [r0, #0]

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801dac4:	e03c      	b.n	801db40 <jsmn_parse_string+0x84>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
			if (tokens == NULL) {
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	f000 8102 	beq.w	801dcd0 <jsmn_parse_string+0x214>
 801dacc:	4619      	mov	r1, r3
 801dace:	4604      	mov	r4, r0
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
 801dad0:	9a06      	ldr	r2, [sp, #24]
 801dad2:	f7ff ff9f 	bl	801da14 <jsmn_alloc_token>
			if (token == NULL) {
 801dad6:	b130      	cbz	r0, 801dae6 <jsmn_parse_string+0x2a>
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 801dad8:	6823      	ldr	r3, [r4, #0]
 801dada:	1c72      	adds	r2, r6, #1
 801dadc:	2103      	movs	r1, #3
 801dade:	f7ff ffa9 	bl	801da34 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
			token->parent = parser->toksuper;
#endif
			return 0;
 801dae2:	2000      	movs	r0, #0
 801dae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				parser->pos = start;
 801dae6:	6026      	str	r6, [r4, #0]
				return JSMN_ERROR_NOMEM;
 801dae8:	f04f 30ff 	mov.w	r0, #4294967295
 801daec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
 801daee:	3401      	adds	r4, #1
 801daf0:	6004      	str	r4, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 801daf2:	f04f 0e00 	mov.w	lr, #0
 801daf6:	e003      	b.n	801db00 <jsmn_parse_string+0x44>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
 801daf8:	3401      	adds	r4, #1
 801dafa:	6004      	str	r4, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 801dafc:	f10e 0e01 	add.w	lr, lr, #1
 801db00:	f1be 0f03 	cmp.w	lr, #3
 801db04:	dc16      	bgt.n	801db34 <jsmn_parse_string+0x78>
 801db06:	6804      	ldr	r4, [r0, #0]
 801db08:	42a2      	cmp	r2, r4
 801db0a:	d913      	bls.n	801db34 <jsmn_parse_string+0x78>
 801db0c:	5d0d      	ldrb	r5, [r1, r4]
 801db0e:	b18d      	cbz	r5, 801db34 <jsmn_parse_string+0x78>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 801db10:	f1a5 0730 	sub.w	r7, r5, #48	; 0x30
 801db14:	b2ff      	uxtb	r7, r7
 801db16:	2f09      	cmp	r7, #9
 801db18:	d9ee      	bls.n	801daf8 <jsmn_parse_string+0x3c>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
 801db1a:	f1a5 0741 	sub.w	r7, r5, #65	; 0x41
 801db1e:	b2ff      	uxtb	r7, r7
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 801db20:	2f05      	cmp	r7, #5
 801db22:	d9e9      	bls.n	801daf8 <jsmn_parse_string+0x3c>
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 801db24:	3d61      	subs	r5, #97	; 0x61
 801db26:	b2ed      	uxtb	r5, r5
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 801db28:	2d05      	cmp	r5, #5
 801db2a:	d9e5      	bls.n	801daf8 <jsmn_parse_string+0x3c>
							parser->pos = start;
 801db2c:	6006      	str	r6, [r0, #0]
							return JSMN_ERROR_INVAL;
 801db2e:	f06f 0001 	mvn.w	r0, #1
 801db32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					}
					parser->pos--;
 801db34:	6804      	ldr	r4, [r0, #0]
 801db36:	3c01      	subs	r4, #1
 801db38:	6004      	str	r4, [r0, #0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801db3a:	6804      	ldr	r4, [r0, #0]
 801db3c:	3401      	adds	r4, #1
 801db3e:	6004      	str	r4, [r0, #0]
 801db40:	6804      	ldr	r4, [r0, #0]
 801db42:	4294      	cmp	r4, r2
 801db44:	f080 80c0 	bcs.w	801dcc8 <jsmn_parse_string+0x20c>
 801db48:	5d0d      	ldrb	r5, [r1, r4]
 801db4a:	2d00      	cmp	r5, #0
 801db4c:	f000 80bc 	beq.w	801dcc8 <jsmn_parse_string+0x20c>
		if (c == '\"') {
 801db50:	2d22      	cmp	r5, #34	; 0x22
 801db52:	d0b8      	beq.n	801dac6 <jsmn_parse_string+0xa>
		if (c == '\\' && parser->pos + 1 < len) {
 801db54:	2d5c      	cmp	r5, #92	; 0x5c
 801db56:	d1f0      	bne.n	801db3a <jsmn_parse_string+0x7e>
 801db58:	3401      	adds	r4, #1
 801db5a:	42a2      	cmp	r2, r4
 801db5c:	d9ed      	bls.n	801db3a <jsmn_parse_string+0x7e>
			parser->pos++;
 801db5e:	6004      	str	r4, [r0, #0]
			switch (js[parser->pos]) {
 801db60:	5d0d      	ldrb	r5, [r1, r4]
 801db62:	3d22      	subs	r5, #34	; 0x22
 801db64:	2d53      	cmp	r5, #83	; 0x53
 801db66:	f200 80ab 	bhi.w	801dcc0 <jsmn_parse_string+0x204>
 801db6a:	a701      	add	r7, pc, #4	; (adr r7, 801db70 <jsmn_parse_string+0xb4>)
 801db6c:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
 801db70:	0801db3b 	.word	0x0801db3b
 801db74:	0801dcc1 	.word	0x0801dcc1
 801db78:	0801dcc1 	.word	0x0801dcc1
 801db7c:	0801dcc1 	.word	0x0801dcc1
 801db80:	0801dcc1 	.word	0x0801dcc1
 801db84:	0801dcc1 	.word	0x0801dcc1
 801db88:	0801dcc1 	.word	0x0801dcc1
 801db8c:	0801dcc1 	.word	0x0801dcc1
 801db90:	0801dcc1 	.word	0x0801dcc1
 801db94:	0801dcc1 	.word	0x0801dcc1
 801db98:	0801dcc1 	.word	0x0801dcc1
 801db9c:	0801dcc1 	.word	0x0801dcc1
 801dba0:	0801dcc1 	.word	0x0801dcc1
 801dba4:	0801db3b 	.word	0x0801db3b
 801dba8:	0801dcc1 	.word	0x0801dcc1
 801dbac:	0801dcc1 	.word	0x0801dcc1
 801dbb0:	0801dcc1 	.word	0x0801dcc1
 801dbb4:	0801dcc1 	.word	0x0801dcc1
 801dbb8:	0801dcc1 	.word	0x0801dcc1
 801dbbc:	0801dcc1 	.word	0x0801dcc1
 801dbc0:	0801dcc1 	.word	0x0801dcc1
 801dbc4:	0801dcc1 	.word	0x0801dcc1
 801dbc8:	0801dcc1 	.word	0x0801dcc1
 801dbcc:	0801dcc1 	.word	0x0801dcc1
 801dbd0:	0801dcc1 	.word	0x0801dcc1
 801dbd4:	0801dcc1 	.word	0x0801dcc1
 801dbd8:	0801dcc1 	.word	0x0801dcc1
 801dbdc:	0801dcc1 	.word	0x0801dcc1
 801dbe0:	0801dcc1 	.word	0x0801dcc1
 801dbe4:	0801dcc1 	.word	0x0801dcc1
 801dbe8:	0801dcc1 	.word	0x0801dcc1
 801dbec:	0801dcc1 	.word	0x0801dcc1
 801dbf0:	0801dcc1 	.word	0x0801dcc1
 801dbf4:	0801dcc1 	.word	0x0801dcc1
 801dbf8:	0801dcc1 	.word	0x0801dcc1
 801dbfc:	0801dcc1 	.word	0x0801dcc1
 801dc00:	0801dcc1 	.word	0x0801dcc1
 801dc04:	0801dcc1 	.word	0x0801dcc1
 801dc08:	0801dcc1 	.word	0x0801dcc1
 801dc0c:	0801dcc1 	.word	0x0801dcc1
 801dc10:	0801dcc1 	.word	0x0801dcc1
 801dc14:	0801dcc1 	.word	0x0801dcc1
 801dc18:	0801dcc1 	.word	0x0801dcc1
 801dc1c:	0801dcc1 	.word	0x0801dcc1
 801dc20:	0801dcc1 	.word	0x0801dcc1
 801dc24:	0801dcc1 	.word	0x0801dcc1
 801dc28:	0801dcc1 	.word	0x0801dcc1
 801dc2c:	0801dcc1 	.word	0x0801dcc1
 801dc30:	0801dcc1 	.word	0x0801dcc1
 801dc34:	0801dcc1 	.word	0x0801dcc1
 801dc38:	0801dcc1 	.word	0x0801dcc1
 801dc3c:	0801dcc1 	.word	0x0801dcc1
 801dc40:	0801dcc1 	.word	0x0801dcc1
 801dc44:	0801dcc1 	.word	0x0801dcc1
 801dc48:	0801dcc1 	.word	0x0801dcc1
 801dc4c:	0801dcc1 	.word	0x0801dcc1
 801dc50:	0801dcc1 	.word	0x0801dcc1
 801dc54:	0801dcc1 	.word	0x0801dcc1
 801dc58:	0801db3b 	.word	0x0801db3b
 801dc5c:	0801dcc1 	.word	0x0801dcc1
 801dc60:	0801dcc1 	.word	0x0801dcc1
 801dc64:	0801dcc1 	.word	0x0801dcc1
 801dc68:	0801dcc1 	.word	0x0801dcc1
 801dc6c:	0801dcc1 	.word	0x0801dcc1
 801dc70:	0801db3b 	.word	0x0801db3b
 801dc74:	0801dcc1 	.word	0x0801dcc1
 801dc78:	0801dcc1 	.word	0x0801dcc1
 801dc7c:	0801dcc1 	.word	0x0801dcc1
 801dc80:	0801db3b 	.word	0x0801db3b
 801dc84:	0801dcc1 	.word	0x0801dcc1
 801dc88:	0801dcc1 	.word	0x0801dcc1
 801dc8c:	0801dcc1 	.word	0x0801dcc1
 801dc90:	0801dcc1 	.word	0x0801dcc1
 801dc94:	0801dcc1 	.word	0x0801dcc1
 801dc98:	0801dcc1 	.word	0x0801dcc1
 801dc9c:	0801dcc1 	.word	0x0801dcc1
 801dca0:	0801db3b 	.word	0x0801db3b
 801dca4:	0801dcc1 	.word	0x0801dcc1
 801dca8:	0801dcc1 	.word	0x0801dcc1
 801dcac:	0801dcc1 	.word	0x0801dcc1
 801dcb0:	0801db3b 	.word	0x0801db3b
 801dcb4:	0801dcc1 	.word	0x0801dcc1
 801dcb8:	0801db3b 	.word	0x0801db3b
 801dcbc:	0801daef 	.word	0x0801daef
					break;
				/* Unexpected symbol */
				default:
					parser->pos = start;
 801dcc0:	6006      	str	r6, [r0, #0]
					return JSMN_ERROR_INVAL;
 801dcc2:	f06f 0001 	mvn.w	r0, #1
 801dcc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
	}
	parser->pos = start;
 801dcc8:	6006      	str	r6, [r0, #0]
	return JSMN_ERROR_PART;
 801dcca:	f06f 0002 	mvn.w	r0, #2
 801dcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return 0;
 801dcd0:	2000      	movs	r0, #0
}
 801dcd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801dcd4 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 801dcd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dcd8:	b082      	sub	sp, #8
 801dcda:	4606      	mov	r6, r0
 801dcdc:	4688      	mov	r8, r1
 801dcde:	4617      	mov	r7, r2
 801dce0:	461d      	mov	r5, r3
 801dce2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 801dce6:	f8d0 9004 	ldr.w	r9, [r0, #4]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801dcea:	e05d      	b.n	801dda8 <jsmn_parse+0xd4>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 801dcec:	2c0d      	cmp	r4, #13
 801dcee:	d058      	beq.n	801dda2 <jsmn_parse+0xce>
 801dcf0:	d91c      	bls.n	801dd2c <jsmn_parse+0x58>
 801dcf2:	2c20      	cmp	r4, #32
 801dcf4:	d055      	beq.n	801dda2 <jsmn_parse+0xce>
 801dcf6:	2c22      	cmp	r4, #34	; 0x22
 801dcf8:	d11b      	bne.n	801dd32 <jsmn_parse+0x5e>
					}
				}
#endif
				break;
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 801dcfa:	f8cd a000 	str.w	sl, [sp]
 801dcfe:	462b      	mov	r3, r5
 801dd00:	463a      	mov	r2, r7
 801dd02:	4641      	mov	r1, r8
 801dd04:	4630      	mov	r0, r6
 801dd06:	f7ff fed9 	bl	801dabc <jsmn_parse_string>
				if (r < 0) return r;
 801dd0a:	2800      	cmp	r0, #0
 801dd0c:	f2c0 80d9 	blt.w	801dec2 <jsmn_parse+0x1ee>
				count++;
 801dd10:	f109 0901 	add.w	r9, r9, #1
				if (parser->toksuper != -1 && tokens != NULL)
 801dd14:	68b3      	ldr	r3, [r6, #8]
 801dd16:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd1a:	d042      	beq.n	801dda2 <jsmn_parse+0xce>
 801dd1c:	2d00      	cmp	r5, #0
 801dd1e:	d040      	beq.n	801dda2 <jsmn_parse+0xce>
					tokens[parser->toksuper].size++;
 801dd20:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801dd24:	68da      	ldr	r2, [r3, #12]
 801dd26:	3201      	adds	r2, #1
 801dd28:	60da      	str	r2, [r3, #12]
 801dd2a:	e03a      	b.n	801dda2 <jsmn_parse+0xce>
		switch (c) {
 801dd2c:	3c09      	subs	r4, #9
 801dd2e:	2c01      	cmp	r4, #1
 801dd30:	d937      	bls.n	801dda2 <jsmn_parse+0xce>
				}
#else
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 801dd32:	f8cd a000 	str.w	sl, [sp]
 801dd36:	462b      	mov	r3, r5
 801dd38:	463a      	mov	r2, r7
 801dd3a:	4641      	mov	r1, r8
 801dd3c:	4630      	mov	r0, r6
 801dd3e:	f7ff fe7f 	bl	801da40 <jsmn_parse_primitive>
				if (r < 0) return r;
 801dd42:	2800      	cmp	r0, #0
 801dd44:	f2c0 80bf 	blt.w	801dec6 <jsmn_parse+0x1f2>
				count++;
 801dd48:	f109 0901 	add.w	r9, r9, #1
				if (parser->toksuper != -1 && tokens != NULL)
 801dd4c:	68b3      	ldr	r3, [r6, #8]
 801dd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd52:	d026      	beq.n	801dda2 <jsmn_parse+0xce>
 801dd54:	b32d      	cbz	r5, 801dda2 <jsmn_parse+0xce>
					tokens[parser->toksuper].size++;
 801dd56:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801dd5a:	68da      	ldr	r2, [r3, #12]
 801dd5c:	3201      	adds	r2, #1
 801dd5e:	60da      	str	r2, [r3, #12]
 801dd60:	e01f      	b.n	801dda2 <jsmn_parse+0xce>
		switch (c) {
 801dd62:	2c5b      	cmp	r4, #91	; 0x5b
 801dd64:	d1e5      	bne.n	801dd32 <jsmn_parse+0x5e>
				count++;
 801dd66:	f109 0901 	add.w	r9, r9, #1
				if (tokens == NULL) {
 801dd6a:	b1d5      	cbz	r5, 801dda2 <jsmn_parse+0xce>
				token = jsmn_alloc_token(parser, tokens, num_tokens);
 801dd6c:	4652      	mov	r2, sl
 801dd6e:	4629      	mov	r1, r5
 801dd70:	4630      	mov	r0, r6
 801dd72:	f7ff fe4f 	bl	801da14 <jsmn_alloc_token>
				if (token == NULL)
 801dd76:	4601      	mov	r1, r0
 801dd78:	2800      	cmp	r0, #0
 801dd7a:	f000 809c 	beq.w	801deb6 <jsmn_parse+0x1e2>
				if (parser->toksuper != -1) {
 801dd7e:	68b3      	ldr	r3, [r6, #8]
 801dd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd84:	d004      	beq.n	801dd90 <jsmn_parse+0xbc>
					tokens[parser->toksuper].size++;
 801dd86:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801dd8a:	68da      	ldr	r2, [r3, #12]
 801dd8c:	3201      	adds	r2, #1
 801dd8e:	60da      	str	r2, [r3, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 801dd90:	2c7b      	cmp	r4, #123	; 0x7b
 801dd92:	d028      	beq.n	801dde6 <jsmn_parse+0x112>
 801dd94:	2302      	movs	r3, #2
 801dd96:	700b      	strb	r3, [r1, #0]
				token->start = parser->pos;
 801dd98:	6833      	ldr	r3, [r6, #0]
 801dd9a:	604b      	str	r3, [r1, #4]
				parser->toksuper = parser->toknext - 1;
 801dd9c:	6873      	ldr	r3, [r6, #4]
 801dd9e:	3b01      	subs	r3, #1
 801dda0:	60b3      	str	r3, [r6, #8]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801dda2:	6833      	ldr	r3, [r6, #0]
 801dda4:	3301      	adds	r3, #1
 801dda6:	6033      	str	r3, [r6, #0]
 801dda8:	6831      	ldr	r1, [r6, #0]
 801ddaa:	42b9      	cmp	r1, r7
 801ddac:	d26c      	bcs.n	801de88 <jsmn_parse+0x1b4>
 801ddae:	f818 4001 	ldrb.w	r4, [r8, r1]
 801ddb2:	2c00      	cmp	r4, #0
 801ddb4:	d068      	beq.n	801de88 <jsmn_parse+0x1b4>
		switch (c) {
 801ddb6:	2c2c      	cmp	r4, #44	; 0x2c
 801ddb8:	d043      	beq.n	801de42 <jsmn_parse+0x16e>
 801ddba:	d997      	bls.n	801dcec <jsmn_parse+0x18>
 801ddbc:	2c5d      	cmp	r4, #93	; 0x5d
 801ddbe:	d00a      	beq.n	801ddd6 <jsmn_parse+0x102>
 801ddc0:	d805      	bhi.n	801ddce <jsmn_parse+0xfa>
 801ddc2:	2c3a      	cmp	r4, #58	; 0x3a
 801ddc4:	d1cd      	bne.n	801dd62 <jsmn_parse+0x8e>
				parser->toksuper = parser->toknext - 1;
 801ddc6:	6873      	ldr	r3, [r6, #4]
 801ddc8:	3b01      	subs	r3, #1
 801ddca:	60b3      	str	r3, [r6, #8]
				break;
 801ddcc:	e7e9      	b.n	801dda2 <jsmn_parse+0xce>
		switch (c) {
 801ddce:	2c7b      	cmp	r4, #123	; 0x7b
 801ddd0:	d0c9      	beq.n	801dd66 <jsmn_parse+0x92>
 801ddd2:	2c7d      	cmp	r4, #125	; 0x7d
 801ddd4:	d1ad      	bne.n	801dd32 <jsmn_parse+0x5e>
				if (tokens == NULL)
 801ddd6:	2d00      	cmp	r5, #0
 801ddd8:	d0e3      	beq.n	801dda2 <jsmn_parse+0xce>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 801ddda:	2c7d      	cmp	r4, #125	; 0x7d
 801dddc:	d005      	beq.n	801ddea <jsmn_parse+0x116>
 801ddde:	2402      	movs	r4, #2
				for (i = parser->toknext - 1; i >= 0; i--) {
 801dde0:	6873      	ldr	r3, [r6, #4]
 801dde2:	3b01      	subs	r3, #1
 801dde4:	e004      	b.n	801ddf0 <jsmn_parse+0x11c>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 801dde6:	2301      	movs	r3, #1
 801dde8:	e7d5      	b.n	801dd96 <jsmn_parse+0xc2>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 801ddea:	2401      	movs	r4, #1
 801ddec:	e7f8      	b.n	801dde0 <jsmn_parse+0x10c>
				for (i = parser->toknext - 1; i >= 0; i--) {
 801ddee:	3b01      	subs	r3, #1
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	db11      	blt.n	801de18 <jsmn_parse+0x144>
					token = &tokens[i];
 801ddf4:	eb05 1203 	add.w	r2, r5, r3, lsl #4
					if (token->start != -1 && token->end == -1) {
 801ddf8:	6850      	ldr	r0, [r2, #4]
 801ddfa:	f1b0 3fff 	cmp.w	r0, #4294967295
 801ddfe:	d0f6      	beq.n	801ddee <jsmn_parse+0x11a>
 801de00:	6890      	ldr	r0, [r2, #8]
 801de02:	f1b0 3fff 	cmp.w	r0, #4294967295
 801de06:	d1f2      	bne.n	801ddee <jsmn_parse+0x11a>
						if (token->type != type) {
 801de08:	7810      	ldrb	r0, [r2, #0]
 801de0a:	4284      	cmp	r4, r0
 801de0c:	d156      	bne.n	801debc <jsmn_parse+0x1e8>
						parser->toksuper = -1;
 801de0e:	f04f 30ff 	mov.w	r0, #4294967295
 801de12:	60b0      	str	r0, [r6, #8]
						token->end = parser->pos + 1;
 801de14:	3101      	adds	r1, #1
 801de16:	6091      	str	r1, [r2, #8]
				if (i == -1) return JSMN_ERROR_INVAL;
 801de18:	f1b3 3fff 	cmp.w	r3, #4294967295
 801de1c:	d103      	bne.n	801de26 <jsmn_parse+0x152>
 801de1e:	f06f 0901 	mvn.w	r9, #1
 801de22:	e044      	b.n	801deae <jsmn_parse+0x1da>
				for (; i >= 0; i--) {
 801de24:	3b01      	subs	r3, #1
 801de26:	2b00      	cmp	r3, #0
 801de28:	dbbb      	blt.n	801dda2 <jsmn_parse+0xce>
					token = &tokens[i];
 801de2a:	eb05 1203 	add.w	r2, r5, r3, lsl #4
					if (token->start != -1 && token->end == -1) {
 801de2e:	6851      	ldr	r1, [r2, #4]
 801de30:	f1b1 3fff 	cmp.w	r1, #4294967295
 801de34:	d0f6      	beq.n	801de24 <jsmn_parse+0x150>
 801de36:	6892      	ldr	r2, [r2, #8]
 801de38:	f1b2 3fff 	cmp.w	r2, #4294967295
 801de3c:	d1f2      	bne.n	801de24 <jsmn_parse+0x150>
						parser->toksuper = i;
 801de3e:	60b3      	str	r3, [r6, #8]
						break;
 801de40:	e7af      	b.n	801dda2 <jsmn_parse+0xce>
				if (tokens != NULL && parser->toksuper != -1 &&
 801de42:	2d00      	cmp	r5, #0
 801de44:	d0ad      	beq.n	801dda2 <jsmn_parse+0xce>
 801de46:	68b3      	ldr	r3, [r6, #8]
 801de48:	f1b3 3fff 	cmp.w	r3, #4294967295
 801de4c:	d0a9      	beq.n	801dda2 <jsmn_parse+0xce>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 801de4e:	011b      	lsls	r3, r3, #4
 801de50:	5ceb      	ldrb	r3, [r5, r3]
				if (tokens != NULL && parser->toksuper != -1 &&
 801de52:	2b02      	cmp	r3, #2
 801de54:	d0a5      	beq.n	801dda2 <jsmn_parse+0xce>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 801de56:	2b01      	cmp	r3, #1
 801de58:	d0a3      	beq.n	801dda2 <jsmn_parse+0xce>
					for (i = parser->toknext - 1; i >= 0; i--) {
 801de5a:	6872      	ldr	r2, [r6, #4]
 801de5c:	3a01      	subs	r2, #1
 801de5e:	e000      	b.n	801de62 <jsmn_parse+0x18e>
 801de60:	3a01      	subs	r2, #1
 801de62:	2a00      	cmp	r2, #0
 801de64:	db9d      	blt.n	801dda2 <jsmn_parse+0xce>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 801de66:	0113      	lsls	r3, r2, #4
 801de68:	18e9      	adds	r1, r5, r3
 801de6a:	5ceb      	ldrb	r3, [r5, r3]
 801de6c:	3b01      	subs	r3, #1
 801de6e:	b2db      	uxtb	r3, r3
 801de70:	2b01      	cmp	r3, #1
 801de72:	d8f5      	bhi.n	801de60 <jsmn_parse+0x18c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 801de74:	684b      	ldr	r3, [r1, #4]
 801de76:	f1b3 3fff 	cmp.w	r3, #4294967295
 801de7a:	d0f1      	beq.n	801de60 <jsmn_parse+0x18c>
 801de7c:	688b      	ldr	r3, [r1, #8]
 801de7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801de82:	d1ed      	bne.n	801de60 <jsmn_parse+0x18c>
								parser->toksuper = i;
 801de84:	60b2      	str	r2, [r6, #8]
								break;
 801de86:	e78c      	b.n	801dda2 <jsmn_parse+0xce>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
 801de88:	b18d      	cbz	r5, 801deae <jsmn_parse+0x1da>
		for (i = parser->toknext - 1; i >= 0; i--) {
 801de8a:	6873      	ldr	r3, [r6, #4]
 801de8c:	3b01      	subs	r3, #1
 801de8e:	e000      	b.n	801de92 <jsmn_parse+0x1be>
 801de90:	3b01      	subs	r3, #1
 801de92:	2b00      	cmp	r3, #0
 801de94:	db0b      	blt.n	801deae <jsmn_parse+0x1da>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 801de96:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 801de9a:	6851      	ldr	r1, [r2, #4]
 801de9c:	f1b1 3fff 	cmp.w	r1, #4294967295
 801dea0:	d0f6      	beq.n	801de90 <jsmn_parse+0x1bc>
 801dea2:	6892      	ldr	r2, [r2, #8]
 801dea4:	f1b2 3fff 	cmp.w	r2, #4294967295
 801dea8:	d1f2      	bne.n	801de90 <jsmn_parse+0x1bc>
				return JSMN_ERROR_PART;
 801deaa:	f06f 0902 	mvn.w	r9, #2
			}
		}
	}

	return count;
}
 801deae:	4648      	mov	r0, r9
 801deb0:	b002      	add	sp, #8
 801deb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					return JSMN_ERROR_NOMEM;
 801deb6:	f04f 39ff 	mov.w	r9, #4294967295
 801deba:	e7f8      	b.n	801deae <jsmn_parse+0x1da>
							return JSMN_ERROR_INVAL;
 801debc:	f06f 0901 	mvn.w	r9, #1
 801dec0:	e7f5      	b.n	801deae <jsmn_parse+0x1da>
				if (r < 0) return r;
 801dec2:	4681      	mov	r9, r0
 801dec4:	e7f3      	b.n	801deae <jsmn_parse+0x1da>
				if (r < 0) return r;
 801dec6:	4681      	mov	r9, r0
 801dec8:	e7f1      	b.n	801deae <jsmn_parse+0x1da>

0801deca <jsmn_init>:
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 801deca:	2300      	movs	r3, #0
 801decc:	6003      	str	r3, [r0, #0]
	parser->toknext = 0;
 801dece:	6043      	str	r3, [r0, #4]
	parser->toksuper = -1;
 801ded0:	f04f 33ff 	mov.w	r3, #4294967295
 801ded4:	6083      	str	r3, [r0, #8]
 801ded6:	4770      	bx	lr

0801ded8 <GetJSONData>:
/* ------------------- */

/* ---------- FUNCTIONS ------------ */
/* -------||--||--||--||--||-------- */
/* -------\/--\/--\/--\/--\/-------- */
uint GetJSONData(uint8_t *pstr) {
 801ded8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dedc:	4605      	mov	r5, r0
	uint size = 0;
	memcpy(pstr, "{\"addr_IP\":\"", 12);
 801dede:	4b65      	ldr	r3, [pc, #404]	; (801e074 <GetJSONData+0x19c>)
 801dee0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801dee2:	6028      	str	r0, [r5, #0]
 801dee4:	6069      	str	r1, [r5, #4]
 801dee6:	60aa      	str	r2, [r5, #8]
	size += 12;
	uint8_t tmp = strlen((const char *) hjsondata.ip_addr);
 801dee8:	4e63      	ldr	r6, [pc, #396]	; (801e078 <GetJSONData+0x1a0>)
 801deea:	4630      	mov	r0, r6
 801deec:	f7f2 f8c0 	bl	8010070 <strlen>
 801def0:	b2c4      	uxtb	r4, r0
	memcpy(pstr + size, hjsondata.ip_addr, tmp);
 801def2:	4622      	mov	r2, r4
 801def4:	4631      	mov	r1, r6
 801def6:	f105 000c 	add.w	r0, r5, #12
 801defa:	f002 fcfc 	bl	80208f6 <memcpy>
	size += tmp;
 801defe:	f104 070c 	add.w	r7, r4, #12
	memcpy(pstr + size, "\",\"mask\":\"", 10);
 801df02:	19ea      	adds	r2, r5, r7
 801df04:	4b5d      	ldr	r3, [pc, #372]	; (801e07c <GetJSONData+0x1a4>)
 801df06:	cb03      	ldmia	r3!, {r0, r1}
 801df08:	51e8      	str	r0, [r5, r7]
 801df0a:	6051      	str	r1, [r2, #4]
 801df0c:	881b      	ldrh	r3, [r3, #0]
 801df0e:	8113      	strh	r3, [r2, #8]
	size += 10;
 801df10:	3416      	adds	r4, #22
	tmp = strlen((const char *) hjsondata.mask);
 801df12:	f106 0810 	add.w	r8, r6, #16
 801df16:	4640      	mov	r0, r8
 801df18:	f7f2 f8aa 	bl	8010070 <strlen>
 801df1c:	b2c7      	uxtb	r7, r0
	memcpy(pstr + size, hjsondata.mask, tmp);
 801df1e:	463a      	mov	r2, r7
 801df20:	4641      	mov	r1, r8
 801df22:	1928      	adds	r0, r5, r4
 801df24:	f002 fce7 	bl	80208f6 <memcpy>
	size += tmp;
 801df28:	19e3      	adds	r3, r4, r7
	memcpy(pstr + size, "\",\"gate\":\"", 10);
 801df2a:	18ec      	adds	r4, r5, r3
 801df2c:	4a54      	ldr	r2, [pc, #336]	; (801e080 <GetJSONData+0x1a8>)
 801df2e:	ca03      	ldmia	r2!, {r0, r1}
 801df30:	50e8      	str	r0, [r5, r3]
 801df32:	6061      	str	r1, [r4, #4]
 801df34:	8812      	ldrh	r2, [r2, #0]
 801df36:	8122      	strh	r2, [r4, #8]
	size += 10;
 801df38:	f103 040a 	add.w	r4, r3, #10
	tmp = strlen((const char *) hjsondata.gate);
 801df3c:	f106 0820 	add.w	r8, r6, #32
 801df40:	4640      	mov	r0, r8
 801df42:	f7f2 f895 	bl	8010070 <strlen>
 801df46:	b2c7      	uxtb	r7, r0
	memcpy(pstr + size, hjsondata.gate, tmp);
 801df48:	463a      	mov	r2, r7
 801df4a:	4641      	mov	r1, r8
 801df4c:	1928      	adds	r0, r5, r4
 801df4e:	f002 fcd2 	bl	80208f6 <memcpy>
	size += tmp;
 801df52:	19e3      	adds	r3, r4, r7
	memcpy(pstr + size, "\",\"port\":", 9);
 801df54:	18ec      	adds	r4, r5, r3
 801df56:	4a4b      	ldr	r2, [pc, #300]	; (801e084 <GetJSONData+0x1ac>)
 801df58:	ca03      	ldmia	r2!, {r0, r1}
 801df5a:	50e8      	str	r0, [r5, r3]
 801df5c:	6061      	str	r1, [r4, #4]
 801df5e:	7812      	ldrb	r2, [r2, #0]
 801df60:	7222      	strb	r2, [r4, #8]
	size += 9;
 801df62:	f103 0409 	add.w	r4, r3, #9
	itoa(hjsondata.port, (char *) pstr + size, 10);
 801df66:	192f      	adds	r7, r5, r4
 801df68:	220a      	movs	r2, #10
 801df6a:	4639      	mov	r1, r7
 801df6c:	8e30      	ldrh	r0, [r6, #48]	; 0x30
 801df6e:	f002 fcb1 	bl	80208d4 <itoa>
	size += strlen((const char *) pstr + size);
 801df72:	4638      	mov	r0, r7
 801df74:	f7f2 f87c 	bl	8010070 <strlen>
 801df78:	1823      	adds	r3, r4, r0
	memcpy(pstr + size, ",\"speed\":", 9);
 801df7a:	18ec      	adds	r4, r5, r3
 801df7c:	4a42      	ldr	r2, [pc, #264]	; (801e088 <GetJSONData+0x1b0>)
 801df7e:	ca03      	ldmia	r2!, {r0, r1}
 801df80:	50e8      	str	r0, [r5, r3]
 801df82:	6061      	str	r1, [r4, #4]
 801df84:	7812      	ldrb	r2, [r2, #0]
 801df86:	7222      	strb	r2, [r4, #8]
	size += 9;
 801df88:	f103 0409 	add.w	r4, r3, #9
	itoa(hjsondata.speed, ((char *) pstr + size), 10);
 801df8c:	192f      	adds	r7, r5, r4
 801df8e:	220a      	movs	r2, #10
 801df90:	4639      	mov	r1, r7
 801df92:	6b70      	ldr	r0, [r6, #52]	; 0x34
 801df94:	f002 fc9e 	bl	80208d4 <itoa>
	size += strlen((const char *) pstr + size);
 801df98:	4638      	mov	r0, r7
 801df9a:	f7f2 f869 	bl	8010070 <strlen>
 801df9e:	1823      	adds	r3, r4, r0
	memcpy(pstr + size, ",\"addr_own\":", 12);
 801dfa0:	18ef      	adds	r7, r5, r3
 801dfa2:	4c3a      	ldr	r4, [pc, #232]	; (801e08c <GetJSONData+0x1b4>)
 801dfa4:	cc07      	ldmia	r4!, {r0, r1, r2}
 801dfa6:	50e8      	str	r0, [r5, r3]
 801dfa8:	6079      	str	r1, [r7, #4]
 801dfaa:	60ba      	str	r2, [r7, #8]
	size += 12;
 801dfac:	f103 040c 	add.w	r4, r3, #12
	itoa(hjsondata.own_addr, (char *) pstr + size, 10);
 801dfb0:	192f      	adds	r7, r5, r4
 801dfb2:	220a      	movs	r2, #10
 801dfb4:	4639      	mov	r1, r7
 801dfb6:	f896 0038 	ldrb.w	r0, [r6, #56]	; 0x38
 801dfba:	f002 fc8b 	bl	80208d4 <itoa>
	size += strlen((const char *) pstr + size);
 801dfbe:	4638      	mov	r0, r7
 801dfc0:	f7f2 f856 	bl	8010070 <strlen>
 801dfc4:	1823      	adds	r3, r4, r0
	memcpy(pstr + size, ",\"ver\":\"", 8);
 801dfc6:	18ec      	adds	r4, r5, r3
 801dfc8:	4a31      	ldr	r2, [pc, #196]	; (801e090 <GetJSONData+0x1b8>)
 801dfca:	ca03      	ldmia	r2!, {r0, r1}
 801dfcc:	50e8      	str	r0, [r5, r3]
 801dfce:	6061      	str	r1, [r4, #4]
	size += 8;
 801dfd0:	f103 0408 	add.w	r4, r3, #8
	tmp = strlen((const char *) hjsondata.ver);
 801dfd4:	f106 0839 	add.w	r8, r6, #57	; 0x39
 801dfd8:	4640      	mov	r0, r8
 801dfda:	f7f2 f849 	bl	8010070 <strlen>
 801dfde:	b2c7      	uxtb	r7, r0
	memcpy(pstr + size, (const char *) hjsondata.ver, tmp);
 801dfe0:	463a      	mov	r2, r7
 801dfe2:	4641      	mov	r1, r8
 801dfe4:	1928      	adds	r0, r5, r4
 801dfe6:	f002 fc86 	bl	80208f6 <memcpy>
	size += tmp;
 801dfea:	19e3      	adds	r3, r4, r7
	memcpy(pstr + size, "\",\"sn\":", 7);
 801dfec:	18e9      	adds	r1, r5, r3
 801dfee:	4a29      	ldr	r2, [pc, #164]	; (801e094 <GetJSONData+0x1bc>)
 801dff0:	6810      	ldr	r0, [r2, #0]
 801dff2:	50e8      	str	r0, [r5, r3]
 801dff4:	8890      	ldrh	r0, [r2, #4]
 801dff6:	7992      	ldrb	r2, [r2, #6]
 801dff8:	8088      	strh	r0, [r1, #4]
 801dffa:	718a      	strb	r2, [r1, #6]
	size += 7;
 801dffc:	1ddc      	adds	r4, r3, #7
	itoa(hjsondata.serial_num, (char *) (pstr + size), 10);
 801dffe:	192f      	adds	r7, r5, r4
 801e000:	220a      	movs	r2, #10
 801e002:	4639      	mov	r1, r7
 801e004:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 801e006:	f002 fc65 	bl	80208d4 <itoa>
	size += strlen((const char *) pstr + size);
 801e00a:	4638      	mov	r0, r7
 801e00c:	f7f2 f830 	bl	8010070 <strlen>
 801e010:	1823      	adds	r3, r4, r0
	memcpy(pstr + size, ",\"addr_MAC\":\"", 13);
 801e012:	18ef      	adds	r7, r5, r3
 801e014:	4c20      	ldr	r4, [pc, #128]	; (801e098 <GetJSONData+0x1c0>)
 801e016:	cc07      	ldmia	r4!, {r0, r1, r2}
 801e018:	50e8      	str	r0, [r5, r3]
 801e01a:	6079      	str	r1, [r7, #4]
 801e01c:	60ba      	str	r2, [r7, #8]
 801e01e:	7822      	ldrb	r2, [r4, #0]
 801e020:	733a      	strb	r2, [r7, #12]
	size += 13;
 801e022:	f103 040d 	add.w	r4, r3, #13
	tmp = strlen((const char *) hjsondata.mac_addr);
 801e026:	f106 084c 	add.w	r8, r6, #76	; 0x4c
 801e02a:	4640      	mov	r0, r8
 801e02c:	f7f2 f820 	bl	8010070 <strlen>
 801e030:	b2c7      	uxtb	r7, r0
	memcpy(pstr + size, hjsondata.mac_addr, tmp);
 801e032:	463a      	mov	r2, r7
 801e034:	4641      	mov	r1, r8
 801e036:	1928      	adds	r0, r5, r4
 801e038:	f002 fc5d 	bl	80208f6 <memcpy>
	size += tmp;
 801e03c:	19e3      	adds	r3, r4, r7
	memcpy(pstr + size, "\",\"web_port\":", 13);
 801e03e:	18ef      	adds	r7, r5, r3
 801e040:	4c16      	ldr	r4, [pc, #88]	; (801e09c <GetJSONData+0x1c4>)
 801e042:	cc07      	ldmia	r4!, {r0, r1, r2}
 801e044:	50e8      	str	r0, [r5, r3]
 801e046:	6079      	str	r1, [r7, #4]
 801e048:	60ba      	str	r2, [r7, #8]
 801e04a:	7822      	ldrb	r2, [r4, #0]
 801e04c:	733a      	strb	r2, [r7, #12]
	size += 13;
 801e04e:	f103 040d 	add.w	r4, r3, #13
	itoa(hjsondata.web_port, (char *) pstr + size, 10);
 801e052:	192f      	adds	r7, r5, r4
 801e054:	220a      	movs	r2, #10
 801e056:	4639      	mov	r1, r7
 801e058:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
 801e05c:	f002 fc3a 	bl	80208d4 <itoa>
	size += strlen((const char *) pstr + size);
 801e060:	4638      	mov	r0, r7
 801e062:	f7f2 f805 	bl	8010070 <strlen>
 801e066:	4420      	add	r0, r4
	memcpy(pstr + size, "}\0", 2);
 801e068:	4b0d      	ldr	r3, [pc, #52]	; (801e0a0 <GetJSONData+0x1c8>)
 801e06a:	881b      	ldrh	r3, [r3, #0]
 801e06c:	522b      	strh	r3, [r5, r0]
	size += 2;
	return size;
}
 801e06e:	3002      	adds	r0, #2
 801e070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e074:	08026fe0 	.word	0x08026fe0
 801e078:	20018e1c 	.word	0x20018e1c
 801e07c:	08026ff0 	.word	0x08026ff0
 801e080:	08026ffc 	.word	0x08026ffc
 801e084:	08027008 	.word	0x08027008
 801e088:	08027014 	.word	0x08027014
 801e08c:	08027020 	.word	0x08027020
 801e090:	08027030 	.word	0x08027030
 801e094:	0802703c 	.word	0x0802703c
 801e098:	08027044 	.word	0x08027044
 801e09c:	08027054 	.word	0x08027054
 801e0a0:	080213f8 	.word	0x080213f8

0801e0a4 <FlashToJSON>:

void FlashToJSON(json_data_t *js, flash_data_t *fs) {
 801e0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0a8:	4604      	mov	r4, r0
 801e0aa:	460f      	mov	r7, r1

	js->speed = fs->speed;
 801e0ac:	680b      	ldr	r3, [r1, #0]
 801e0ae:	6343      	str	r3, [r0, #52]	; 0x34
	js->port = fs->port;
 801e0b0:	8a4b      	ldrh	r3, [r1, #18]
 801e0b2:	8603      	strh	r3, [r0, #48]	; 0x30
	js->web_port = fs->web_port;
 801e0b4:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 801e0b6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	js->own_addr = fs->own_addr;
 801e0ba:	888b      	ldrh	r3, [r1, #4]
 801e0bc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	js->serial_num = fs->serial_num;
 801e0c0:	694b      	ldr	r3, [r1, #20]
 801e0c2:	6483      	str	r3, [r0, #72]	; 0x48
	uint len = 0;

	for (int i = 0; i < 4; i++) {
 801e0c4:	2600      	movs	r6, #0
	uint len = 0;
 801e0c6:	4635      	mov	r5, r6
	for (int i = 0; i < 4; i++) {
 801e0c8:	e00f      	b.n	801e0ea <FlashToJSON+0x46>
		itoa(fs->IP_addr[i], (char*) &js->ip_addr[len], 10);
 801e0ca:	19bb      	adds	r3, r7, r6
 801e0cc:	eb04 0805 	add.w	r8, r4, r5
 801e0d0:	220a      	movs	r2, #10
 801e0d2:	4641      	mov	r1, r8
 801e0d4:	7998      	ldrb	r0, [r3, #6]
 801e0d6:	f002 fbfd 	bl	80208d4 <itoa>
		len += strlen((char*) &js->ip_addr[len]);
 801e0da:	4640      	mov	r0, r8
 801e0dc:	f7f1 ffc8 	bl	8010070 <strlen>
 801e0e0:	4405      	add	r5, r0
		js->ip_addr[len] = '.';
 801e0e2:	232e      	movs	r3, #46	; 0x2e
 801e0e4:	5563      	strb	r3, [r4, r5]
		len++;
 801e0e6:	3501      	adds	r5, #1
	for (int i = 0; i < 4; i++) {
 801e0e8:	3601      	adds	r6, #1
 801e0ea:	2e03      	cmp	r6, #3
 801e0ec:	dded      	ble.n	801e0ca <FlashToJSON+0x26>
	}
	js->ip_addr[--len] = '\0';
 801e0ee:	1960      	adds	r0, r4, r5
 801e0f0:	2500      	movs	r5, #0
 801e0f2:	f800 5c01 	strb.w	r5, [r0, #-1]

	len = 0;
	for (int i = 0; i < 4; i++) {
 801e0f6:	46a8      	mov	r8, r5
 801e0f8:	e014      	b.n	801e124 <FlashToJSON+0x80>
		itoa(fs->gate[i], (char*) &js->gate[len], 10);
 801e0fa:	eb07 0308 	add.w	r3, r7, r8
 801e0fe:	f105 0620 	add.w	r6, r5, #32
 801e102:	4426      	add	r6, r4
 801e104:	220a      	movs	r2, #10
 801e106:	4631      	mov	r1, r6
 801e108:	7b98      	ldrb	r0, [r3, #14]
 801e10a:	f002 fbe3 	bl	80208d4 <itoa>
		len += strlen((char*) &js->gate[len]);
 801e10e:	4630      	mov	r0, r6
 801e110:	f7f1 ffae 	bl	8010070 <strlen>
 801e114:	4405      	add	r5, r0
		js->gate[len] = '.';
 801e116:	1963      	adds	r3, r4, r5
 801e118:	222e      	movs	r2, #46	; 0x2e
 801e11a:	f883 2020 	strb.w	r2, [r3, #32]
		len++;
 801e11e:	3501      	adds	r5, #1
	for (int i = 0; i < 4; i++) {
 801e120:	f108 0801 	add.w	r8, r8, #1
 801e124:	f1b8 0f03 	cmp.w	r8, #3
 801e128:	dde7      	ble.n	801e0fa <FlashToJSON+0x56>
	}
	js->gate[--len] = '\0';
 801e12a:	1960      	adds	r0, r4, r5
 801e12c:	2500      	movs	r5, #0
 801e12e:	77c5      	strb	r5, [r0, #31]

	len = 0;
	for (int i = 0; i < 4; i++) {
 801e130:	46a8      	mov	r8, r5
 801e132:	e013      	b.n	801e15c <FlashToJSON+0xb8>
		itoa(fs->mask[i], (char*) &js->mask[len], 10);
 801e134:	eb07 0308 	add.w	r3, r7, r8
 801e138:	f105 0610 	add.w	r6, r5, #16
 801e13c:	4426      	add	r6, r4
 801e13e:	220a      	movs	r2, #10
 801e140:	4631      	mov	r1, r6
 801e142:	7a98      	ldrb	r0, [r3, #10]
 801e144:	f002 fbc6 	bl	80208d4 <itoa>
		len += strlen((char*) &js->mask[len]);
 801e148:	4630      	mov	r0, r6
 801e14a:	f7f1 ff91 	bl	8010070 <strlen>
 801e14e:	4405      	add	r5, r0
		js->mask[len] = '.';
 801e150:	1963      	adds	r3, r4, r5
 801e152:	222e      	movs	r2, #46	; 0x2e
 801e154:	741a      	strb	r2, [r3, #16]
		len++;
 801e156:	3501      	adds	r5, #1
	for (int i = 0; i < 4; i++) {
 801e158:	f108 0801 	add.w	r8, r8, #1
 801e15c:	f1b8 0f03 	cmp.w	r8, #3
 801e160:	dde8      	ble.n	801e134 <FlashToJSON+0x90>
	}
	js->mask[--len] = '\0';
 801e162:	1960      	adds	r0, r4, r5
 801e164:	2500      	movs	r5, #0
 801e166:	73c5      	strb	r5, [r0, #15]

	len = 0;
	for (int i = 0; i < 6; i++) {
 801e168:	46a8      	mov	r8, r5
 801e16a:	e015      	b.n	801e198 <FlashToJSON+0xf4>
		itoa(fs->mac_addr[i], (char*) &js->mac_addr[len], 16);
 801e16c:	eb07 0308 	add.w	r3, r7, r8
 801e170:	f105 0648 	add.w	r6, r5, #72	; 0x48
 801e174:	4426      	add	r6, r4
 801e176:	3604      	adds	r6, #4
 801e178:	2210      	movs	r2, #16
 801e17a:	4631      	mov	r1, r6
 801e17c:	7f98      	ldrb	r0, [r3, #30]
 801e17e:	f002 fba9 	bl	80208d4 <itoa>
		len += strlen((char*) &js->mac_addr[len]);
 801e182:	4630      	mov	r0, r6
 801e184:	f7f1 ff74 	bl	8010070 <strlen>
 801e188:	4405      	add	r5, r0
		js->mac_addr[len] = '-';
 801e18a:	1963      	adds	r3, r4, r5
 801e18c:	222d      	movs	r2, #45	; 0x2d
 801e18e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		len++;
 801e192:	3501      	adds	r5, #1
	for (int i = 0; i < 6; i++) {
 801e194:	f108 0801 	add.w	r8, r8, #1
 801e198:	f1b8 0f05 	cmp.w	r8, #5
 801e19c:	dde6      	ble.n	801e16c <FlashToJSON+0xc8>
	}
	js->mac_addr[--len] = '\0';
 801e19e:	4425      	add	r5, r4
 801e1a0:	2000      	movs	r0, #0
 801e1a2:	f885 004b 	strb.w	r0, [r5, #75]	; 0x4b

	len = 0;
	for (int i = 0; i < 3; i++) {
 801e1a6:	4680      	mov	r8, r0
	len = 0;
 801e1a8:	4605      	mov	r5, r0
	for (int i = 0; i < 3; i++) {
 801e1aa:	e016      	b.n	801e1da <FlashToJSON+0x136>
		itoa(fs->ver[i], (char*) &js->ver[len], 10);
 801e1ac:	f108 030c 	add.w	r3, r8, #12
 801e1b0:	f105 0638 	add.w	r6, r5, #56	; 0x38
 801e1b4:	4426      	add	r6, r4
 801e1b6:	3601      	adds	r6, #1
 801e1b8:	220a      	movs	r2, #10
 801e1ba:	4631      	mov	r1, r6
 801e1bc:	f837 0013 	ldrh.w	r0, [r7, r3, lsl #1]
 801e1c0:	f002 fb88 	bl	80208d4 <itoa>
		len += strlen((char*) &js->ver[len]);
 801e1c4:	4630      	mov	r0, r6
 801e1c6:	f7f1 ff53 	bl	8010070 <strlen>
 801e1ca:	4405      	add	r5, r0
		js->ver[len] = '.';
 801e1cc:	1963      	adds	r3, r4, r5
 801e1ce:	222e      	movs	r2, #46	; 0x2e
 801e1d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		len++;
 801e1d4:	3501      	adds	r5, #1
	for (int i = 0; i < 3; i++) {
 801e1d6:	f108 0801 	add.w	r8, r8, #1
 801e1da:	f1b8 0f02 	cmp.w	r8, #2
 801e1de:	dde5      	ble.n	801e1ac <FlashToJSON+0x108>
	}
	js->ver[--len] = '\0';
 801e1e0:	442c      	add	r4, r5
 801e1e2:	2300      	movs	r3, #0
 801e1e4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801e1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e1ec <DecodeURL>:
}

void DecodeURL(uint8_t *buf, uint8_t *result) {
	while (*buf != '\r') {
 801e1ec:	e00a      	b.n	801e204 <DecodeURL+0x18>
		if (*buf == '%') {
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'B')) {
 801e1ee:	7843      	ldrb	r3, [r0, #1]
 801e1f0:	2b37      	cmp	r3, #55	; 0x37
 801e1f2:	d00e      	beq.n	801e212 <DecodeURL+0x26>
				*result = '{';
				buf += 2;
			}
			if ((*(buf + 1) == '2') && (*(buf + 2) == '2')) {
 801e1f4:	7843      	ldrb	r3, [r0, #1]
 801e1f6:	2b32      	cmp	r3, #50	; 0x32
 801e1f8:	d012      	beq.n	801e220 <DecodeURL+0x34>
				*result = '\"';
				buf += 2;
			}
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'D')) {
 801e1fa:	7843      	ldrb	r3, [r0, #1]
 801e1fc:	2b37      	cmp	r3, #55	; 0x37
 801e1fe:	d016      	beq.n	801e22e <DecodeURL+0x42>
				break;
			}
		} else {
			*result = *buf;
		}
		buf++;
 801e200:	3001      	adds	r0, #1
		result++;
 801e202:	3101      	adds	r1, #1
	while (*buf != '\r') {
 801e204:	7803      	ldrb	r3, [r0, #0]
 801e206:	2b0d      	cmp	r3, #13
 801e208:	d019      	beq.n	801e23e <DecodeURL+0x52>
		if (*buf == '%') {
 801e20a:	2b25      	cmp	r3, #37	; 0x25
 801e20c:	d0ef      	beq.n	801e1ee <DecodeURL+0x2>
			*result = *buf;
 801e20e:	700b      	strb	r3, [r1, #0]
 801e210:	e7f6      	b.n	801e200 <DecodeURL+0x14>
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'B')) {
 801e212:	7883      	ldrb	r3, [r0, #2]
 801e214:	2b42      	cmp	r3, #66	; 0x42
 801e216:	d1ed      	bne.n	801e1f4 <DecodeURL+0x8>
				*result = '{';
 801e218:	237b      	movs	r3, #123	; 0x7b
 801e21a:	700b      	strb	r3, [r1, #0]
				buf += 2;
 801e21c:	3002      	adds	r0, #2
 801e21e:	e7e9      	b.n	801e1f4 <DecodeURL+0x8>
			if ((*(buf + 1) == '2') && (*(buf + 2) == '2')) {
 801e220:	7883      	ldrb	r3, [r0, #2]
 801e222:	2b32      	cmp	r3, #50	; 0x32
 801e224:	d1e9      	bne.n	801e1fa <DecodeURL+0xe>
				*result = '\"';
 801e226:	2322      	movs	r3, #34	; 0x22
 801e228:	700b      	strb	r3, [r1, #0]
				buf += 2;
 801e22a:	3002      	adds	r0, #2
 801e22c:	e7e5      	b.n	801e1fa <DecodeURL+0xe>
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'D')) {
 801e22e:	7883      	ldrb	r3, [r0, #2]
 801e230:	2b44      	cmp	r3, #68	; 0x44
 801e232:	d1e5      	bne.n	801e200 <DecodeURL+0x14>
				*result = '}';
 801e234:	237d      	movs	r3, #125	; 0x7d
 801e236:	700b      	strb	r3, [r1, #0]
				*(result + 1) = '\0';
 801e238:	2300      	movs	r3, #0
 801e23a:	704b      	strb	r3, [r1, #1]
				break;
 801e23c:	4770      	bx	lr
 801e23e:	4770      	bx	lr

0801e240 <ParseJSON>:
	}
}

void ParseJSON(json_data_t *js, uint8_t *json_str) {
 801e240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e244:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801e248:	4680      	mov	r8, r0
 801e24a:	460f      	mov	r7, r1
	int resultCode;
	jsmn_parser p;
	jsmntok_t tokens[MAXNUMBER_OF_TOKENS];
	jsmn_init(&p);
 801e24c:	a895      	add	r0, sp, #596	; 0x254
 801e24e:	f7ff fe3c 	bl	801deca <jsmn_init>
	resultCode = jsmn_parse(&p, (char*) json_str, strlen((char*) json_str),
 801e252:	4638      	mov	r0, r7
 801e254:	f7f1 ff0c 	bl	8010070 <strlen>
 801e258:	2320      	movs	r3, #32
 801e25a:	9300      	str	r3, [sp, #0]
 801e25c:	ab15      	add	r3, sp, #84	; 0x54
 801e25e:	4602      	mov	r2, r0
 801e260:	4639      	mov	r1, r7
 801e262:	a895      	add	r0, sp, #596	; 0x254
 801e264:	f7ff fd36 	bl	801dcd4 <jsmn_parse>
			tokens, sizeof(tokens) / sizeof(tokens[0]));

	if (resultCode > 0) {
 801e268:	1e06      	subs	r6, r0, #0
 801e26a:	f340 8088 	ble.w	801e37e <ParseJSON+0x13e>
 801e26e:	2501      	movs	r5, #1
 801e270:	e008      	b.n	801e284 <ParseJSON+0x44>
				/*
				 {\"addr_IP\":\"192.168.4.255\",\"mask\":\"255.255.255.000\",\"gate\":\"192.168.4.1\",\"port\":102,\"speed\":187500,
				 \"addr_own\":1,\"ver\":\"0.0.0\",\"sn\":0,\"addr_MAC\":\"AA-BB-CC-DD-EE-FF\"}
				 */
				if (strcmp((char*) Prev_keyString, "addr_IP") == 0) {
					strcpy((char*) js->ip_addr, (char*) keyString);
 801e272:	a907      	add	r1, sp, #28
 801e274:	4640      	mov	r0, r8
 801e276:	f002 fb51 	bl	802091c <strcpy>
				} else if (strcmp((char*) Prev_keyString, "addr_MAC") == 0) {
					strcpy((char*) js->mac_addr, (char*) keyString);
				} else if (strcmp((char*) Prev_keyString, "web_port") == 0) {
					js->web_port = (uint16_t) atoi((char*) keyString);
				}
				strcpy((char*) Prev_keyString, (char*) keyString);
 801e27a:	a907      	add	r1, sp, #28
 801e27c:	a80e      	add	r0, sp, #56	; 0x38
 801e27e:	f002 fb4d 	bl	802091c <strcpy>
		for (int i = 1; i <= resultCode - 1; i++) // resultCode == 0 => whole json string
 801e282:	3501      	adds	r5, #1
 801e284:	1e73      	subs	r3, r6, #1
 801e286:	429d      	cmp	r5, r3
 801e288:	dc79      	bgt.n	801e37e <ParseJSON+0x13e>
			jsmntok_t key = tokens[i];
 801e28a:	ac03      	add	r4, sp, #12
 801e28c:	ab15      	add	r3, sp, #84	; 0x54
 801e28e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 801e292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			uint16_t length = key.end - key.start;
 801e298:	b292      	uxth	r2, r2
 801e29a:	b28c      	uxth	r4, r1
 801e29c:	1b12      	subs	r2, r2, r4
 801e29e:	b294      	uxth	r4, r2
			if (length < MAX_TOKEN_LENGTH) {
 801e2a0:	2c18      	cmp	r4, #24
 801e2a2:	d8ee      	bhi.n	801e282 <ParseJSON+0x42>
				memcpy(keyString, &json_str[key.start], length);
 801e2a4:	f10d 091c 	add.w	r9, sp, #28
 801e2a8:	4622      	mov	r2, r4
 801e2aa:	4439      	add	r1, r7
 801e2ac:	4648      	mov	r0, r9
 801e2ae:	f002 fb22 	bl	80208f6 <memcpy>
				keyString[length] = '\0';
 801e2b2:	2300      	movs	r3, #0
 801e2b4:	f809 3004 	strb.w	r3, [r9, r4]
				if (strcmp((char*) Prev_keyString, "addr_IP") == 0) {
 801e2b8:	4933      	ldr	r1, [pc, #204]	; (801e388 <ParseJSON+0x148>)
 801e2ba:	a80e      	add	r0, sp, #56	; 0x38
 801e2bc:	f7f1 fece 	bl	801005c <strcmp>
 801e2c0:	2800      	cmp	r0, #0
 801e2c2:	d0d6      	beq.n	801e272 <ParseJSON+0x32>
				} else if (strcmp((char*) Prev_keyString, "mask") == 0) {
 801e2c4:	4931      	ldr	r1, [pc, #196]	; (801e38c <ParseJSON+0x14c>)
 801e2c6:	a80e      	add	r0, sp, #56	; 0x38
 801e2c8:	f7f1 fec8 	bl	801005c <strcmp>
 801e2cc:	b310      	cbz	r0, 801e314 <ParseJSON+0xd4>
				} else if (strcmp((char*) Prev_keyString, "gate") == 0) {
 801e2ce:	4930      	ldr	r1, [pc, #192]	; (801e390 <ParseJSON+0x150>)
 801e2d0:	a80e      	add	r0, sp, #56	; 0x38
 801e2d2:	f7f1 fec3 	bl	801005c <strcmp>
 801e2d6:	b318      	cbz	r0, 801e320 <ParseJSON+0xe0>
				} else if (strcmp((char*) Prev_keyString, "port") == 0) {
 801e2d8:	492e      	ldr	r1, [pc, #184]	; (801e394 <ParseJSON+0x154>)
 801e2da:	a80e      	add	r0, sp, #56	; 0x38
 801e2dc:	f7f1 febe 	bl	801005c <strcmp>
 801e2e0:	b320      	cbz	r0, 801e32c <ParseJSON+0xec>
				} else if (strcmp((char*) Prev_keyString, "speed") == 0) {
 801e2e2:	492d      	ldr	r1, [pc, #180]	; (801e398 <ParseJSON+0x158>)
 801e2e4:	a80e      	add	r0, sp, #56	; 0x38
 801e2e6:	f7f1 feb9 	bl	801005c <strcmp>
 801e2ea:	b328      	cbz	r0, 801e338 <ParseJSON+0xf8>
				} else if (strcmp((char*) Prev_keyString, "addr_own") == 0) {
 801e2ec:	492b      	ldr	r1, [pc, #172]	; (801e39c <ParseJSON+0x15c>)
 801e2ee:	a80e      	add	r0, sp, #56	; 0x38
 801e2f0:	f7f1 feb4 	bl	801005c <strcmp>
 801e2f4:	b330      	cbz	r0, 801e344 <ParseJSON+0x104>
				} else if (strcmp((char*) Prev_keyString, "sn") == 0) {
 801e2f6:	492a      	ldr	r1, [pc, #168]	; (801e3a0 <ParseJSON+0x160>)
 801e2f8:	a80e      	add	r0, sp, #56	; 0x38
 801e2fa:	f7f1 feaf 	bl	801005c <strcmp>
 801e2fe:	bb38      	cbnz	r0, 801e350 <ParseJSON+0x110>
					if (js->serial_num
 801e300:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 801e304:	2b00      	cmp	r3, #0
 801e306:	d1b8      	bne.n	801e27a <ParseJSON+0x3a>
						js->serial_num = (uint32_t) atoi((char*) keyString);
 801e308:	a807      	add	r0, sp, #28
 801e30a:	f002 faa3 	bl	8020854 <atoi>
 801e30e:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
 801e312:	e7b2      	b.n	801e27a <ParseJSON+0x3a>
					strcpy((char*) js->mask, (char*) keyString);
 801e314:	a907      	add	r1, sp, #28
 801e316:	f108 0010 	add.w	r0, r8, #16
 801e31a:	f002 faff 	bl	802091c <strcpy>
 801e31e:	e7ac      	b.n	801e27a <ParseJSON+0x3a>
					strcpy((char*) js->gate, (char*) keyString);
 801e320:	a907      	add	r1, sp, #28
 801e322:	f108 0020 	add.w	r0, r8, #32
 801e326:	f002 faf9 	bl	802091c <strcpy>
 801e32a:	e7a6      	b.n	801e27a <ParseJSON+0x3a>
					js->port = (uint16_t) atoi((char*) keyString);
 801e32c:	a807      	add	r0, sp, #28
 801e32e:	f002 fa91 	bl	8020854 <atoi>
 801e332:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
 801e336:	e7a0      	b.n	801e27a <ParseJSON+0x3a>
					js->speed = (uint32_t) atoi((char*) keyString);
 801e338:	a807      	add	r0, sp, #28
 801e33a:	f002 fa8b 	bl	8020854 <atoi>
 801e33e:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 801e342:	e79a      	b.n	801e27a <ParseJSON+0x3a>
					js->own_addr = (uint8_t) atoi((char*) keyString);
 801e344:	a807      	add	r0, sp, #28
 801e346:	f002 fa85 	bl	8020854 <atoi>
 801e34a:	f888 0038 	strb.w	r0, [r8, #56]	; 0x38
 801e34e:	e794      	b.n	801e27a <ParseJSON+0x3a>
				} else if (strcmp((char*) Prev_keyString, "addr_MAC") == 0) {
 801e350:	4914      	ldr	r1, [pc, #80]	; (801e3a4 <ParseJSON+0x164>)
 801e352:	a80e      	add	r0, sp, #56	; 0x38
 801e354:	f7f1 fe82 	bl	801005c <strcmp>
 801e358:	b158      	cbz	r0, 801e372 <ParseJSON+0x132>
				} else if (strcmp((char*) Prev_keyString, "web_port") == 0) {
 801e35a:	4913      	ldr	r1, [pc, #76]	; (801e3a8 <ParseJSON+0x168>)
 801e35c:	a80e      	add	r0, sp, #56	; 0x38
 801e35e:	f7f1 fe7d 	bl	801005c <strcmp>
 801e362:	2800      	cmp	r0, #0
 801e364:	d189      	bne.n	801e27a <ParseJSON+0x3a>
					js->web_port = (uint16_t) atoi((char*) keyString);
 801e366:	a807      	add	r0, sp, #28
 801e368:	f002 fa74 	bl	8020854 <atoi>
 801e36c:	f8a8 005e 	strh.w	r0, [r8, #94]	; 0x5e
 801e370:	e783      	b.n	801e27a <ParseJSON+0x3a>
					strcpy((char*) js->mac_addr, (char*) keyString);
 801e372:	a907      	add	r1, sp, #28
 801e374:	f108 004c 	add.w	r0, r8, #76	; 0x4c
 801e378:	f002 fad0 	bl	802091c <strcpy>
 801e37c:	e77d      	b.n	801e27a <ParseJSON+0x3a>
			}
		}
	}

}
 801e37e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801e382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e386:	bf00      	nop
 801e388:	08027064 	.word	0x08027064
 801e38c:	0802706c 	.word	0x0802706c
 801e390:	08027074 	.word	0x08027074
 801e394:	080270a4 	.word	0x080270a4
 801e398:	0802707c 	.word	0x0802707c
 801e39c:	08027084 	.word	0x08027084
 801e3a0:	08027090 	.word	0x08027090
 801e3a4:	08027094 	.word	0x08027094
 801e3a8:	080270a0 	.word	0x080270a0

0801e3ac <JSONToFlash>:

void JSONToFlash(json_data_t *js, flash_data_t *fs) {
 801e3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e3ae:	b083      	sub	sp, #12
 801e3b0:	4607      	mov	r7, r0
 801e3b2:	460e      	mov	r6, r1
	union {
		uint32_t ui32;
		uint8_t ui8[4];
	} tmp_u;

	ipaddr_aton((char* )js->ip_addr, &new_ip);
 801e3b4:	a901      	add	r1, sp, #4
 801e3b6:	f7f8 ff5b 	bl	8017270 <ip4addr_aton>
	tmp_u.ui32 = new_ip.addr;
 801e3ba:	9b01      	ldr	r3, [sp, #4]
	fs->IP_addr[0] = tmp_u.ui8[0];
 801e3bc:	71b3      	strb	r3, [r6, #6]
	fs->IP_addr[1] = tmp_u.ui8[1];
 801e3be:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801e3c2:	71f2      	strb	r2, [r6, #7]
	fs->IP_addr[2] = tmp_u.ui8[2];
 801e3c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801e3c8:	7232      	strb	r2, [r6, #8]
	fs->IP_addr[3] = tmp_u.ui8[3];
 801e3ca:	f3c3 6307 	ubfx	r3, r3, #24, #8
 801e3ce:	7273      	strb	r3, [r6, #9]

	ipaddr_aton((char* )js->gate, &new_ip);
 801e3d0:	a901      	add	r1, sp, #4
 801e3d2:	f107 0020 	add.w	r0, r7, #32
 801e3d6:	f7f8 ff4b 	bl	8017270 <ip4addr_aton>
	tmp_u.ui32 = new_ip.addr;
 801e3da:	9b01      	ldr	r3, [sp, #4]
	fs->gate[0] = tmp_u.ui8[0];
 801e3dc:	73b3      	strb	r3, [r6, #14]
	fs->gate[1] = tmp_u.ui8[1];
 801e3de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801e3e2:	73f2      	strb	r2, [r6, #15]
	fs->gate[2] = tmp_u.ui8[2];
 801e3e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801e3e8:	7432      	strb	r2, [r6, #16]
	fs->gate[3] = tmp_u.ui8[3];
 801e3ea:	f3c3 6307 	ubfx	r3, r3, #24, #8
 801e3ee:	7473      	strb	r3, [r6, #17]

	ipaddr_aton((char* )js->mask, &new_ip);
 801e3f0:	a901      	add	r1, sp, #4
 801e3f2:	f107 0010 	add.w	r0, r7, #16
 801e3f6:	f7f8 ff3b 	bl	8017270 <ip4addr_aton>
	tmp_u.ui32 = new_ip.addr;
 801e3fa:	9b01      	ldr	r3, [sp, #4]
	fs->mask[0] = tmp_u.ui8[0];
 801e3fc:	72b3      	strb	r3, [r6, #10]
	fs->mask[1] = tmp_u.ui8[1];
 801e3fe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801e402:	72f2      	strb	r2, [r6, #11]
	fs->mask[2] = tmp_u.ui8[2];
 801e404:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801e408:	7332      	strb	r2, [r6, #12]
	fs->mask[3] = tmp_u.ui8[3];
 801e40a:	f3c3 6307 	ubfx	r3, r3, #24, #8
 801e40e:	7373      	strb	r3, [r6, #13]
	uint8_t *ptr = js->mac_addr;
 801e410:	f107 044c 	add.w	r4, r7, #76	; 0x4c
	for (int i = 0; i < 6; i++) {
 801e414:	2500      	movs	r5, #0
 801e416:	e019      	b.n	801e44c <JSONToFlash+0xa0>
		uint8_t tok[3];
		int j = 0;
		while (j < 2 && *ptr != '-' && *ptr != ':') {
			tok[j++] = *ptr++;
 801e418:	3401      	adds	r4, #1
 801e41a:	a902      	add	r1, sp, #8
 801e41c:	4419      	add	r1, r3
 801e41e:	f801 2c08 	strb.w	r2, [r1, #-8]
 801e422:	3301      	adds	r3, #1
		while (j < 2 && *ptr != '-' && *ptr != ':') {
 801e424:	2b01      	cmp	r3, #1
 801e426:	dc04      	bgt.n	801e432 <JSONToFlash+0x86>
 801e428:	7822      	ldrb	r2, [r4, #0]
 801e42a:	2a2d      	cmp	r2, #45	; 0x2d
 801e42c:	d001      	beq.n	801e432 <JSONToFlash+0x86>
 801e42e:	2a3a      	cmp	r2, #58	; 0x3a
 801e430:	d1f2      	bne.n	801e418 <JSONToFlash+0x6c>
		}
		ptr++;
 801e432:	3401      	adds	r4, #1
		tok[j] = '\0';
 801e434:	aa02      	add	r2, sp, #8
 801e436:	4413      	add	r3, r2
 801e438:	2100      	movs	r1, #0
 801e43a:	f803 1c08 	strb.w	r1, [r3, #-8]
		fs->mac_addr[i] = strtol((char*) tok, NULL, 16);
 801e43e:	2210      	movs	r2, #16
 801e440:	4668      	mov	r0, sp
 801e442:	f002 fb05 	bl	8020a50 <strtol>
 801e446:	1973      	adds	r3, r6, r5
 801e448:	7798      	strb	r0, [r3, #30]
	for (int i = 0; i < 6; i++) {
 801e44a:	3501      	adds	r5, #1
 801e44c:	2d05      	cmp	r5, #5
 801e44e:	dc01      	bgt.n	801e454 <JSONToFlash+0xa8>
 801e450:	2300      	movs	r3, #0
 801e452:	e7e7      	b.n	801e424 <JSONToFlash+0x78>
	}
	fs->own_addr = js->own_addr;
 801e454:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801e458:	80b3      	strh	r3, [r6, #4]
	fs->port = js->port;
 801e45a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801e45c:	8273      	strh	r3, [r6, #18]
	fs->web_port = js->web_port;
 801e45e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801e462:	84b3      	strh	r3, [r6, #36]	; 0x24
	fs->serial_num = js->serial_num;
 801e464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e466:	6173      	str	r3, [r6, #20]
	fs->speed = js->speed;
 801e468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e46a:	6033      	str	r3, [r6, #0]
}
 801e46c:	b003      	add	sp, #12
 801e46e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e470 <LogInit>:

static char* txt_lev[NUM_LOG_LEV - 1] = { "OFF", "ERR", "WAR", "INF", };

static char* txt_sys[NUM_OF_SUB_SYS] = { "MEM", "WEB", "458", "TCP", "LOG" };

void LogInit(UART_HandleTypeDef * log_if) {
 801e470:	b508      	push	{r3, lr}
	hlog.interface = log_if;
 801e472:	4b08      	ldr	r3, [pc, #32]	; (801e494 <LogInit+0x24>)
 801e474:	6018      	str	r0, [r3, #0]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 801e476:	2300      	movs	r3, #0
 801e478:	e004      	b.n	801e484 <LogInit+0x14>
		hlog.levels[i] = LOG_LEV_ALL;
 801e47a:	4a06      	ldr	r2, [pc, #24]	; (801e494 <LogInit+0x24>)
 801e47c:	441a      	add	r2, r3
 801e47e:	2104      	movs	r1, #4
 801e480:	7111      	strb	r1, [r2, #4]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 801e482:	3301      	adds	r3, #1
 801e484:	2b04      	cmp	r3, #4
 801e486:	ddf8      	ble.n	801e47a <LogInit+0xa>
	}
	hlog.mutex = xSemaphoreCreateMutex();
 801e488:	2001      	movs	r0, #1
 801e48a:	f7f5 fa9d 	bl	80139c8 <xQueueCreateMutex>
 801e48e:	4b01      	ldr	r3, [pc, #4]	; (801e494 <LogInit+0x24>)
 801e490:	60d8      	str	r0, [r3, #12]
 801e492:	bd08      	pop	{r3, pc}
 801e494:	20018e7c 	.word	0x20018e7c

0801e498 <LogText__>:
}

void LogText__(info_presence info, log_sub_sys sys, log_level level,
		uint8_t *msg) {
 801e498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e49a:	b083      	sub	sp, #12
	if (level <= hlog.levels[sys]) {
 801e49c:	4c23      	ldr	r4, [pc, #140]	; (801e52c <LogText__+0x94>)
 801e49e:	440c      	add	r4, r1
 801e4a0:	7924      	ldrb	r4, [r4, #4]
 801e4a2:	4294      	cmp	r4, r2
 801e4a4:	d323      	bcc.n	801e4ee <LogText__+0x56>
 801e4a6:	461c      	mov	r4, r3
 801e4a8:	2500      	movs	r5, #0
 801e4aa:	e001      	b.n	801e4b0 <LogText__+0x18>
		uint8_t info_buf[8];
		uint len = 0;
		uint8_t * ptr = msg;
		while (*ptr++) {
			len++;
 801e4ac:	3501      	adds	r5, #1
		while (*ptr++) {
 801e4ae:	4634      	mov	r4, r6
 801e4b0:	1c66      	adds	r6, r4, #1
 801e4b2:	7824      	ldrb	r4, [r4, #0]
 801e4b4:	2c00      	cmp	r4, #0
 801e4b6:	d1f9      	bne.n	801e4ac <LogText__+0x14>
 801e4b8:	461e      	mov	r6, r3
 801e4ba:	4614      	mov	r4, r2
 801e4bc:	4607      	mov	r7, r0
		}
		if (info == INFO_SHOW) {
 801e4be:	2801      	cmp	r0, #1
 801e4c0:	d017      	beq.n	801e4f2 <LogText__+0x5a>
			strcpy((char*) info_buf, txt_sys[sys]);
			strcpy((char*) info_buf + 3, "_");
			strcpy((char*) info_buf + 4, txt_lev[level]);
			strcpy((char*) info_buf + 7, ":");
		}
		xSemaphoreTake(hlog.mutex, LOG_TIMEOUT*3);
 801e4c2:	2300      	movs	r3, #0
 801e4c4:	223c      	movs	r2, #60	; 0x3c
 801e4c6:	4619      	mov	r1, r3
 801e4c8:	4818      	ldr	r0, [pc, #96]	; (801e52c <LogText__+0x94>)
 801e4ca:	68c0      	ldr	r0, [r0, #12]
 801e4cc:	f7f5 fb64 	bl	8013b98 <xQueueGenericReceive>
		{
			if (info == INFO_SHOW) {
 801e4d0:	2f01      	cmp	r7, #1
 801e4d2:	d023      	beq.n	801e51c <LogText__+0x84>
				HAL_UART_Transmit(hlog.interface, info_buf, 8, LOG_TIMEOUT);
			}
			HAL_UART_Transmit(hlog.interface, msg, len, LOG_TIMEOUT);
 801e4d4:	4c15      	ldr	r4, [pc, #84]	; (801e52c <LogText__+0x94>)
 801e4d6:	2314      	movs	r3, #20
 801e4d8:	b2aa      	uxth	r2, r5
 801e4da:	4631      	mov	r1, r6
 801e4dc:	6820      	ldr	r0, [r4, #0]
 801e4de:	f7f4 f904 	bl	80126ea <HAL_UART_Transmit>
		}
		xSemaphoreGive(hlog.mutex);
 801e4e2:	2300      	movs	r3, #0
 801e4e4:	461a      	mov	r2, r3
 801e4e6:	4619      	mov	r1, r3
 801e4e8:	68e0      	ldr	r0, [r4, #12]
 801e4ea:	f7f5 f99d 	bl	8013828 <xQueueGenericSend>
	}
}
 801e4ee:	b003      	add	sp, #12
 801e4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy((char*) info_buf, txt_sys[sys]);
 801e4f2:	4b0f      	ldr	r3, [pc, #60]	; (801e530 <LogText__+0x98>)
 801e4f4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801e4f8:	4668      	mov	r0, sp
 801e4fa:	f002 fa0f 	bl	802091c <strcpy>
			strcpy((char*) info_buf + 3, "_");
 801e4fe:	4b0d      	ldr	r3, [pc, #52]	; (801e534 <LogText__+0x9c>)
 801e500:	881b      	ldrh	r3, [r3, #0]
 801e502:	f8ad 3003 	strh.w	r3, [sp, #3]
			strcpy((char*) info_buf + 4, txt_lev[level]);
 801e506:	4b0c      	ldr	r3, [pc, #48]	; (801e538 <LogText__+0xa0>)
 801e508:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 801e50c:	a801      	add	r0, sp, #4
 801e50e:	f002 fa05 	bl	802091c <strcpy>
			strcpy((char*) info_buf + 7, ":");
 801e512:	4b0a      	ldr	r3, [pc, #40]	; (801e53c <LogText__+0xa4>)
 801e514:	881b      	ldrh	r3, [r3, #0]
 801e516:	f8ad 3007 	strh.w	r3, [sp, #7]
 801e51a:	e7d2      	b.n	801e4c2 <LogText__+0x2a>
				HAL_UART_Transmit(hlog.interface, info_buf, 8, LOG_TIMEOUT);
 801e51c:	2314      	movs	r3, #20
 801e51e:	2208      	movs	r2, #8
 801e520:	4669      	mov	r1, sp
 801e522:	4802      	ldr	r0, [pc, #8]	; (801e52c <LogText__+0x94>)
 801e524:	6800      	ldr	r0, [r0, #0]
 801e526:	f7f4 f8e0 	bl	80126ea <HAL_UART_Transmit>
 801e52a:	e7d3      	b.n	801e4d4 <LogText__+0x3c>
 801e52c:	20018e7c 	.word	0x20018e7c
 801e530:	080270e4 	.word	0x080270e4
 801e534:	080270ac 	.word	0x080270ac
 801e538:	080270d4 	.word	0x080270d4
 801e53c:	0802701c 	.word	0x0802701c

0801e540 <LogNum__>:

void LogNum__(info_presence info, log_sub_sys sys, log_level level, int number,
		uint8_t base) {
 801e540:	b570      	push	{r4, r5, r6, lr}
 801e542:	b08c      	sub	sp, #48	; 0x30
	if (level <= hlog.levels[sys]) {
 801e544:	4c23      	ldr	r4, [pc, #140]	; (801e5d4 <LogNum__+0x94>)
 801e546:	440c      	add	r4, r1
 801e548:	7925      	ldrb	r5, [r4, #4]
 801e54a:	4295      	cmp	r5, r2
 801e54c:	d323      	bcc.n	801e596 <LogNum__+0x56>
 801e54e:	461e      	mov	r6, r3
 801e550:	4615      	mov	r5, r2
 801e552:	4604      	mov	r4, r0
		uint8_t info_buf[8];
		uint8_t str_num[33];
		if (info == INFO_SHOW) {
 801e554:	2801      	cmp	r0, #1
 801e556:	d020      	beq.n	801e59a <LogNum__+0x5a>
			strcpy((char*) info_buf, txt_sys[sys]);
			strcpy((char*) info_buf + 3, "_");
			strcpy((char*) info_buf + 4, txt_lev[level]);
			strcpy((char*) info_buf + 7, ":");
		}
		itoa(number, (char*) str_num, base);
 801e558:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 801e55c:	a903      	add	r1, sp, #12
 801e55e:	4630      	mov	r0, r6
 801e560:	f002 f9b8 	bl	80208d4 <itoa>
		xSemaphoreTake(hlog.mutex, LOG_TIMEOUT*3);
 801e564:	2300      	movs	r3, #0
 801e566:	223c      	movs	r2, #60	; 0x3c
 801e568:	4619      	mov	r1, r3
 801e56a:	481a      	ldr	r0, [pc, #104]	; (801e5d4 <LogNum__+0x94>)
 801e56c:	68c0      	ldr	r0, [r0, #12]
 801e56e:	f7f5 fb13 	bl	8013b98 <xQueueGenericReceive>
		{
			if (info == INFO_SHOW) {
 801e572:	2c01      	cmp	r4, #1
 801e574:	d026      	beq.n	801e5c4 <LogNum__+0x84>
				HAL_UART_Transmit(hlog.interface, info_buf, 8, LOG_TIMEOUT);
			}
			HAL_UART_Transmit(hlog.interface, (uint8_t*) str_num, strlen((char*)str_num),LOG_TIMEOUT);
 801e576:	a803      	add	r0, sp, #12
 801e578:	f7f1 fd7a 	bl	8010070 <strlen>
 801e57c:	4c15      	ldr	r4, [pc, #84]	; (801e5d4 <LogNum__+0x94>)
 801e57e:	2314      	movs	r3, #20
 801e580:	b282      	uxth	r2, r0
 801e582:	a903      	add	r1, sp, #12
 801e584:	6820      	ldr	r0, [r4, #0]
 801e586:	f7f4 f8b0 	bl	80126ea <HAL_UART_Transmit>
		}
		xSemaphoreGive(hlog.mutex);
 801e58a:	2300      	movs	r3, #0
 801e58c:	461a      	mov	r2, r3
 801e58e:	4619      	mov	r1, r3
 801e590:	68e0      	ldr	r0, [r4, #12]
 801e592:	f7f5 f949 	bl	8013828 <xQueueGenericSend>
	}
}
 801e596:	b00c      	add	sp, #48	; 0x30
 801e598:	bd70      	pop	{r4, r5, r6, pc}
			strcpy((char*) info_buf, txt_sys[sys]);
 801e59a:	4b0f      	ldr	r3, [pc, #60]	; (801e5d8 <LogNum__+0x98>)
 801e59c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801e5a0:	a801      	add	r0, sp, #4
 801e5a2:	f002 f9bb 	bl	802091c <strcpy>
			strcpy((char*) info_buf + 3, "_");
 801e5a6:	4b0d      	ldr	r3, [pc, #52]	; (801e5dc <LogNum__+0x9c>)
 801e5a8:	881b      	ldrh	r3, [r3, #0]
 801e5aa:	f8ad 3007 	strh.w	r3, [sp, #7]
			strcpy((char*) info_buf + 4, txt_lev[level]);
 801e5ae:	4b0c      	ldr	r3, [pc, #48]	; (801e5e0 <LogNum__+0xa0>)
 801e5b0:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 801e5b4:	a802      	add	r0, sp, #8
 801e5b6:	f002 f9b1 	bl	802091c <strcpy>
			strcpy((char*) info_buf + 7, ":");
 801e5ba:	4b0a      	ldr	r3, [pc, #40]	; (801e5e4 <LogNum__+0xa4>)
 801e5bc:	881b      	ldrh	r3, [r3, #0]
 801e5be:	f8ad 300b 	strh.w	r3, [sp, #11]
 801e5c2:	e7c9      	b.n	801e558 <LogNum__+0x18>
				HAL_UART_Transmit(hlog.interface, info_buf, 8, LOG_TIMEOUT);
 801e5c4:	2314      	movs	r3, #20
 801e5c6:	2208      	movs	r2, #8
 801e5c8:	a901      	add	r1, sp, #4
 801e5ca:	4802      	ldr	r0, [pc, #8]	; (801e5d4 <LogNum__+0x94>)
 801e5cc:	6800      	ldr	r0, [r0, #0]
 801e5ce:	f7f4 f88c 	bl	80126ea <HAL_UART_Transmit>
 801e5d2:	e7d0      	b.n	801e576 <LogNum__+0x36>
 801e5d4:	20018e7c 	.word	0x20018e7c
 801e5d8:	080270e4 	.word	0x080270e4
 801e5dc:	080270ac 	.word	0x080270ac
 801e5e0:	080270d4 	.word	0x080270d4
 801e5e4:	0802701c 	.word	0x0802701c

0801e5e8 <MX_LWIP_Init>:
/* USER CODE END 2 */

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void) {
 801e5e8:	b570      	push	{r4, r5, r6, lr}
 801e5ea:	b086      	sub	sp, #24
	/* IP addresses initialization */
	IP_ADDRESS[0] = hflash.IP_addr[0];
 801e5ec:	4b4c      	ldr	r3, [pc, #304]	; (801e720 <MX_LWIP_Init+0x138>)
 801e5ee:	799a      	ldrb	r2, [r3, #6]
 801e5f0:	4e4c      	ldr	r6, [pc, #304]	; (801e724 <MX_LWIP_Init+0x13c>)
 801e5f2:	7032      	strb	r2, [r6, #0]
	IP_ADDRESS[1] = hflash.IP_addr[1];
 801e5f4:	79da      	ldrb	r2, [r3, #7]
 801e5f6:	7072      	strb	r2, [r6, #1]
	IP_ADDRESS[2] = hflash.IP_addr[2];
 801e5f8:	7a1a      	ldrb	r2, [r3, #8]
 801e5fa:	70b2      	strb	r2, [r6, #2]
	IP_ADDRESS[3] = hflash.IP_addr[3];
 801e5fc:	7a5a      	ldrb	r2, [r3, #9]
 801e5fe:	70f2      	strb	r2, [r6, #3]
	NETMASK_ADDRESS[0] = hflash.mask[0];
 801e600:	7a9a      	ldrb	r2, [r3, #10]
 801e602:	4d49      	ldr	r5, [pc, #292]	; (801e728 <MX_LWIP_Init+0x140>)
 801e604:	702a      	strb	r2, [r5, #0]
	NETMASK_ADDRESS[1] = hflash.mask[1];
 801e606:	7ada      	ldrb	r2, [r3, #11]
 801e608:	706a      	strb	r2, [r5, #1]
	NETMASK_ADDRESS[2] = hflash.mask[2];
 801e60a:	7b1a      	ldrb	r2, [r3, #12]
 801e60c:	70aa      	strb	r2, [r5, #2]
	NETMASK_ADDRESS[3] = hflash.mask[3];
 801e60e:	7b5a      	ldrb	r2, [r3, #13]
 801e610:	70ea      	strb	r2, [r5, #3]
	GATEWAY_ADDRESS[0] = hflash.gate[0];
 801e612:	7b9a      	ldrb	r2, [r3, #14]
 801e614:	4c45      	ldr	r4, [pc, #276]	; (801e72c <MX_LWIP_Init+0x144>)
 801e616:	7022      	strb	r2, [r4, #0]
	GATEWAY_ADDRESS[1] = hflash.gate[1];
 801e618:	7bda      	ldrb	r2, [r3, #15]
 801e61a:	7062      	strb	r2, [r4, #1]
	GATEWAY_ADDRESS[2] = hflash.gate[2];
 801e61c:	7c1a      	ldrb	r2, [r3, #16]
 801e61e:	70a2      	strb	r2, [r4, #2]
	GATEWAY_ADDRESS[3] = hflash.gate[3];
 801e620:	7c5b      	ldrb	r3, [r3, #17]
 801e622:	70e3      	strb	r3, [r4, #3]

	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);
 801e624:	2100      	movs	r1, #0
 801e626:	4608      	mov	r0, r1
 801e628:	f7f7 fe40 	bl	80162ac <tcpip_init>

	/* IP addresses initialization without DHCP (IPv4) */
	IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2],
 801e62c:	7832      	ldrb	r2, [r6, #0]
 801e62e:	7873      	ldrb	r3, [r6, #1]
 801e630:	041b      	lsls	r3, r3, #16
 801e632:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801e636:	78b2      	ldrb	r2, [r6, #2]
 801e638:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e63c:	78f2      	ldrb	r2, [r6, #3]
 801e63e:	4313      	orrs	r3, r2
 801e640:	021a      	lsls	r2, r3, #8
 801e642:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801e646:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 801e64a:	0a19      	lsrs	r1, r3, #8
 801e64c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e650:	430a      	orrs	r2, r1
 801e652:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 801e656:	4936      	ldr	r1, [pc, #216]	; (801e730 <MX_LWIP_Init+0x148>)
 801e658:	600b      	str	r3, [r1, #0]
			IP_ADDRESS[3]);
	IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1],
 801e65a:	782a      	ldrb	r2, [r5, #0]
 801e65c:	786b      	ldrb	r3, [r5, #1]
 801e65e:	041b      	lsls	r3, r3, #16
 801e660:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801e664:	78aa      	ldrb	r2, [r5, #2]
 801e666:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e66a:	78ea      	ldrb	r2, [r5, #3]
 801e66c:	4313      	orrs	r3, r2
 801e66e:	021a      	lsls	r2, r3, #8
 801e670:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801e674:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 801e678:	0a18      	lsrs	r0, r3, #8
 801e67a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e67e:	4302      	orrs	r2, r0
 801e680:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 801e684:	4a2b      	ldr	r2, [pc, #172]	; (801e734 <MX_LWIP_Init+0x14c>)
 801e686:	6013      	str	r3, [r2, #0]
			NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
	IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2],
 801e688:	7820      	ldrb	r0, [r4, #0]
 801e68a:	7863      	ldrb	r3, [r4, #1]
 801e68c:	041b      	lsls	r3, r3, #16
 801e68e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801e692:	78a0      	ldrb	r0, [r4, #2]
 801e694:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 801e698:	78e0      	ldrb	r0, [r4, #3]
 801e69a:	4303      	orrs	r3, r0
 801e69c:	0218      	lsls	r0, r3, #8
 801e69e:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 801e6a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801e6a6:	0a1c      	lsrs	r4, r3, #8
 801e6a8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e6ac:	4320      	orrs	r0, r4
 801e6ae:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
 801e6b2:	4b21      	ldr	r3, [pc, #132]	; (801e738 <MX_LWIP_Init+0x150>)
 801e6b4:	6018      	str	r0, [r3, #0]
			GATEWAY_ADDRESS[3]);

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 801e6b6:	4821      	ldr	r0, [pc, #132]	; (801e73c <MX_LWIP_Init+0x154>)
 801e6b8:	9002      	str	r0, [sp, #8]
 801e6ba:	4821      	ldr	r0, [pc, #132]	; (801e740 <MX_LWIP_Init+0x158>)
 801e6bc:	9001      	str	r0, [sp, #4]
 801e6be:	2000      	movs	r0, #0
 801e6c0:	9000      	str	r0, [sp, #0]
 801e6c2:	4820      	ldr	r0, [pc, #128]	; (801e744 <MX_LWIP_Init+0x15c>)
 801e6c4:	f7f9 fdca 	bl	801825c <netif_add>
 801e6c8:	e00a      	b.n	801e6e0 <MX_LWIP_Init+0xf8>
		HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &reg);
		{
			if (reg & PHY_LINKED_STATUS) {
				netif_set_link_up(&gnetif);
			} else {
				netif_set_link_down(&gnetif);
 801e6ca:	481e      	ldr	r0, [pc, #120]	; (801e744 <MX_LWIP_Init+0x15c>)
 801e6cc:	f7f9 fe41 	bl	8018352 <netif_set_link_down>
			}
		}
		osDelay(1000);
 801e6d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e6d4:	f7f4 fa74 	bl	8012bc0 <osDelay>
	} while (!(reg & PHY_LINKED_STATUS));
 801e6d8:	9b05      	ldr	r3, [sp, #20]
 801e6da:	f013 0f04 	tst.w	r3, #4
 801e6de:	d10c      	bne.n	801e6fa <MX_LWIP_Init+0x112>
		HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &reg);
 801e6e0:	aa05      	add	r2, sp, #20
 801e6e2:	2101      	movs	r1, #1
 801e6e4:	4818      	ldr	r0, [pc, #96]	; (801e748 <MX_LWIP_Init+0x160>)
 801e6e6:	f7f2 fba5 	bl	8010e34 <HAL_ETH_ReadPHYRegister>
			if (reg & PHY_LINKED_STATUS) {
 801e6ea:	9b05      	ldr	r3, [sp, #20]
 801e6ec:	f013 0f04 	tst.w	r3, #4
 801e6f0:	d0eb      	beq.n	801e6ca <MX_LWIP_Init+0xe2>
				netif_set_link_up(&gnetif);
 801e6f2:	4814      	ldr	r0, [pc, #80]	; (801e744 <MX_LWIP_Init+0x15c>)
 801e6f4:	f7f9 fe1b 	bl	801832e <netif_set_link_up>
 801e6f8:	e7ea      	b.n	801e6d0 <MX_LWIP_Init+0xe8>

	/* Registers the default network interface */
	netif_set_default(&gnetif);
 801e6fa:	4c12      	ldr	r4, [pc, #72]	; (801e744 <MX_LWIP_Init+0x15c>)
 801e6fc:	4620      	mov	r0, r4
 801e6fe:	f7f9 fded 	bl	80182dc <netif_set_default>

	if (netif_is_link_up(&gnetif)) {
 801e702:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801e706:	f013 0f04 	tst.w	r3, #4
 801e70a:	d104      	bne.n	801e716 <MX_LWIP_Init+0x12e>
		/* When the netif is fully configured this function must be called */
		netif_set_up(&gnetif);
	} else {
		/* When the netif link is down this function must be called */
		netif_set_down(&gnetif);
 801e70c:	480d      	ldr	r0, [pc, #52]	; (801e744 <MX_LWIP_Init+0x15c>)
 801e70e:	f7f9 fdfd 	bl	801830c <netif_set_down>
	}

	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 801e712:	b006      	add	sp, #24
 801e714:	bd70      	pop	{r4, r5, r6, pc}
		netif_set_up(&gnetif);
 801e716:	4620      	mov	r0, r4
 801e718:	f7f9 fde6 	bl	80182e8 <netif_set_up>
 801e71c:	e7f9      	b.n	801e712 <MX_LWIP_Init+0x12a>
 801e71e:	bf00      	nop
 801e720:	20015ce4 	.word	0x20015ce4
 801e724:	20018ec8 	.word	0x20018ec8
 801e728:	20018ec4 	.word	0x20018ec4
 801e72c:	20018e8c 	.word	0x20018e8c
 801e730:	20018ec0 	.word	0x20018ec0
 801e734:	20018ecc 	.word	0x20018ecc
 801e738:	20018ed0 	.word	0x20018ed0
 801e73c:	080161f5 	.word	0x080161f5
 801e740:	0801d589 	.word	0x0801d589
 801e744:	20018e90 	.word	0x20018e90
 801e748:	200175dc 	.word	0x200175dc

0801e74c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 801e74c:	b510      	push	{r4, lr}
 801e74e:	4604      	mov	r4, r0
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 801e750:	6802      	ldr	r2, [r0, #0]
 801e752:	4b0e      	ldr	r3, [pc, #56]	; (801e78c <HAL_TIM_PeriodElapsedCallback+0x40>)
 801e754:	429a      	cmp	r2, r3
 801e756:	d008      	beq.n	801e76a <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM8) {
 801e758:	6822      	ldr	r2, [r4, #0]
 801e75a:	4b0d      	ldr	r3, [pc, #52]	; (801e790 <HAL_TIM_PeriodElapsedCallback+0x44>)
 801e75c:	429a      	cmp	r2, r3
 801e75e:	d007      	beq.n	801e770 <HAL_TIM_PeriodElapsedCallback+0x24>
		CommandProcess();
	}
	if (htim->Instance == TIM7) {
 801e760:	6822      	ldr	r2, [r4, #0]
 801e762:	4b0c      	ldr	r3, [pc, #48]	; (801e794 <HAL_TIM_PeriodElapsedCallback+0x48>)
 801e764:	429a      	cmp	r2, r3
 801e766:	d006      	beq.n	801e776 <HAL_TIM_PeriodElapsedCallback+0x2a>
 801e768:	bd10      	pop	{r4, pc}
		HAL_IncTick();
 801e76a:	f7f1 fe2b 	bl	80103c4 <HAL_IncTick>
 801e76e:	e7f3      	b.n	801e758 <HAL_TIM_PeriodElapsedCallback+0xc>
		CommandProcess();
 801e770:	f000 f89a 	bl	801e8a8 <CommandProcess>
 801e774:	e7f4      	b.n	801e760 <HAL_TIM_PeriodElapsedCallback+0x14>
		__HAL_TIM_SET_COUNTER(&htim7, 0x00U);
 801e776:	4808      	ldr	r0, [pc, #32]	; (801e798 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 801e778:	6803      	ldr	r3, [r0, #0]
 801e77a:	2200      	movs	r2, #0
 801e77c:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim7);
 801e77e:	f7f3 fb2c 	bl	8011dda <HAL_TIM_Base_Start_IT>
		ulHighFrequencyTimerTicks++;
 801e782:	4a06      	ldr	r2, [pc, #24]	; (801e79c <HAL_TIM_PeriodElapsedCallback+0x50>)
 801e784:	6813      	ldr	r3, [r2, #0]
 801e786:	3301      	adds	r3, #1
 801e788:	6013      	str	r3, [r2, #0]
	}
	/* USER CODE END Callback 1 */
}
 801e78a:	e7ed      	b.n	801e768 <HAL_TIM_PeriodElapsedCallback+0x1c>
 801e78c:	40010000 	.word	0x40010000
 801e790:	40010400 	.word	0x40010400
 801e794:	40001400 	.word	0x40001400
 801e798:	20018f80 	.word	0x20018f80
 801e79c:	20010300 	.word	0x20010300

0801e7a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 801e7a0:	e7fe      	b.n	801e7a0 <Error_Handler>
	...

0801e7a4 <SystemClock_Config>:
void SystemClock_Config(void) {
 801e7a4:	b500      	push	{lr}
 801e7a6:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 801e7a8:	2230      	movs	r2, #48	; 0x30
 801e7aa:	2100      	movs	r1, #0
 801e7ac:	a808      	add	r0, sp, #32
 801e7ae:	f002 f8ad 	bl	802090c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 801e7b2:	2300      	movs	r3, #0
 801e7b4:	9303      	str	r3, [sp, #12]
 801e7b6:	9304      	str	r3, [sp, #16]
 801e7b8:	9305      	str	r3, [sp, #20]
 801e7ba:	9306      	str	r3, [sp, #24]
 801e7bc:	9307      	str	r3, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE()
 801e7be:	9301      	str	r3, [sp, #4]
 801e7c0:	4a22      	ldr	r2, [pc, #136]	; (801e84c <SystemClock_Config+0xa8>)
 801e7c2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801e7c4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 801e7c8:	6411      	str	r1, [r2, #64]	; 0x40
 801e7ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801e7cc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 801e7d0:	9201      	str	r2, [sp, #4]
 801e7d2:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801e7d4:	9302      	str	r3, [sp, #8]
 801e7d6:	4b1e      	ldr	r3, [pc, #120]	; (801e850 <SystemClock_Config+0xac>)
 801e7d8:	681a      	ldr	r2, [r3, #0]
 801e7da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801e7de:	601a      	str	r2, [r3, #0]
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801e7e6:	9302      	str	r3, [sp, #8]
 801e7e8:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 801e7ea:	2309      	movs	r3, #9
 801e7ec:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801e7ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801e7f2:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801e7f4:	2301      	movs	r3, #1
 801e7f6:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801e7f8:	2302      	movs	r3, #2
 801e7fa:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801e7fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 801e800:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 801e802:	2219      	movs	r2, #25
 801e804:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 801e806:	f44f 72a8 	mov.w	r2, #336	; 0x150
 801e80a:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801e80c:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 801e80e:	2305      	movs	r3, #5
 801e810:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 801e812:	a808      	add	r0, sp, #32
 801e814:	f7f2 ff98 	bl	8011748 <HAL_RCC_OscConfig>
 801e818:	b998      	cbnz	r0, 801e842 <SystemClock_Config+0x9e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 801e81a:	230f      	movs	r3, #15
 801e81c:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801e81e:	2302      	movs	r3, #2
 801e820:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801e822:	2300      	movs	r3, #0
 801e824:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801e826:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801e82a:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801e82c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801e830:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 801e832:	2105      	movs	r1, #5
 801e834:	a803      	add	r0, sp, #12
 801e836:	f7f3 f9a5 	bl	8011b84 <HAL_RCC_ClockConfig>
 801e83a:	b920      	cbnz	r0, 801e846 <SystemClock_Config+0xa2>
}
 801e83c:	b015      	add	sp, #84	; 0x54
 801e83e:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 801e842:	f7ff ffad 	bl	801e7a0 <Error_Handler>
		Error_Handler();
 801e846:	f7ff ffab 	bl	801e7a0 <Error_Handler>
 801e84a:	bf00      	nop
 801e84c:	40023800 	.word	0x40023800
 801e850:	40007000 	.word	0x40007000

0801e854 <main>:
int main(void) {
 801e854:	b508      	push	{r3, lr}
	HAL_Init();
 801e856:	f7f1 fd9b 	bl	8010390 <HAL_Init>
	SystemClock_Config();
 801e85a:	f7ff ffa3 	bl	801e7a4 <SystemClock_Config>
	HAL_FLASH_Unlock();
 801e85e:	f7f2 fd3d 	bl	80112dc <HAL_FLASH_Unlock>
	EE_Init();
 801e862:	f7fe fb11 	bl	801ce88 <EE_Init>
	FlashInit();
 801e866:	f7fe f8b9 	bl	801c9dc <FlashInit>
	ProtocolSettingsInit(&hprot);
 801e86a:	480d      	ldr	r0, [pc, #52]	; (801e8a0 <main+0x4c>)
 801e86c:	f000 faba 	bl	801ede4 <ProtocolSettingsInit>
	MX_GPIO_Init();
 801e870:	f7ff f864 	bl	801d93c <MX_GPIO_Init>
	MX_DMA_Init();
 801e874:	f7fe fa22 	bl	801ccbc <MX_DMA_Init>
	MX_UART5_Init();
 801e878:	f001 fc90 	bl	802019c <MX_UART5_Init>
	MX_TIM8_Init();
 801e87c:	f000 ffe2 	bl	801f844 <MX_TIM8_Init>
	MX_TIM7_Init();
 801e880:	f000 ffba 	bl	801f7f8 <MX_TIM7_Init>
	MX_USART1_UART_Init();
 801e884:	f001 fcaa 	bl	80201dc <MX_USART1_UART_Init>
	MX_IWDG_Init();
 801e888:	f7ff f8b6 	bl	801d9f8 <MX_IWDG_Init>
	LogInit(&huart1);
 801e88c:	4805      	ldr	r0, [pc, #20]	; (801e8a4 <main+0x50>)
 801e88e:	f7ff fdef 	bl	801e470 <LogInit>
	RunAllTests();
 801e892:	f001 ffbb 	bl	802080c <RunAllTests>
	MX_FREERTOS_Init();
 801e896:	f7fe ffcf 	bl	801d838 <MX_FREERTOS_Init>
	osKernelStart();
 801e89a:	f7f4 f94d 	bl	8012b38 <osKernelStart>
 801e89e:	e7fe      	b.n	801e89e <main+0x4a>
 801e8a0:	20018ee8 	.word	0x20018ee8
 801e8a4:	200190e0 	.word	0x200190e0

0801e8a8 <CommandProcess>:
extern xQueueHandle frames_queue;
extern xQueueHandle cleaner_queue;

profibus_MPI_t hprot;

inline void CommandProcess() {
 801e8a8:	b530      	push	{r4, r5, lr}
 801e8aa:	b083      	sub	sp, #12
	static portBASE_TYPE xHigherPriorityTaskWoken;
	uint32_t len;
	xHigherPriorityTaskWoken = pdFALSE;
 801e8ac:	4c10      	ldr	r4, [pc, #64]	; (801e8f0 <CommandProcess+0x48>)
 801e8ae:	2500      	movs	r5, #0
 801e8b0:	6025      	str	r5, [r4, #0]
	HAL_TIM_Base_Stop_IT(&htim8);
 801e8b2:	4810      	ldr	r0, [pc, #64]	; (801e8f4 <CommandProcess+0x4c>)
 801e8b4:	f7f3 fa9d 	bl	8011df2 <HAL_TIM_Base_Stop_IT>
	len = CB_Data_Length(&inbuf_UART);
 801e8b8:	480f      	ldr	r0, [pc, #60]	; (801e8f8 <CommandProcess+0x50>)
 801e8ba:	f7fe f85d 	bl	801c978 <CB_Data_Length>
 801e8be:	a902      	add	r1, sp, #8
 801e8c0:	f841 0d04 	str.w	r0, [r1, #-4]!
	xQueueSendFromISR(frames_queue, &len, &xHigherPriorityTaskWoken);
 801e8c4:	462b      	mov	r3, r5
 801e8c6:	4622      	mov	r2, r4
 801e8c8:	480c      	ldr	r0, [pc, #48]	; (801e8fc <CommandProcess+0x54>)
 801e8ca:	6800      	ldr	r0, [r0, #0]
 801e8cc:	f7f5 f896 	bl	80139fc <xQueueGenericSendFromISR>
	if (xHigherPriorityTaskWoken == pdTRUE) {
 801e8d0:	6823      	ldr	r3, [r4, #0]
 801e8d2:	2b01      	cmp	r3, #1
 801e8d4:	d001      	beq.n	801e8da <CommandProcess+0x32>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
}
 801e8d6:	b003      	add	sp, #12
 801e8d8:	bd30      	pop	{r4, r5, pc}
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801e8da:	2b00      	cmp	r3, #0
 801e8dc:	d0fb      	beq.n	801e8d6 <CommandProcess+0x2e>
 801e8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e8e2:	4b07      	ldr	r3, [pc, #28]	; (801e900 <CommandProcess+0x58>)
 801e8e4:	601a      	str	r2, [r3, #0]
 801e8e6:	f3bf 8f4f 	dsb	sy
 801e8ea:	f3bf 8f6f 	isb	sy
}
 801e8ee:	e7f2      	b.n	801e8d6 <CommandProcess+0x2e>
 801e8f0:	20010c64 	.word	0x20010c64
 801e8f4:	20018f44 	.word	0x20018f44
 801e8f8:	20018ed8 	.word	0x20018ed8
 801e8fc:	20018df8 	.word	0x20018df8
 801e900:	e000ed04 	.word	0xe000ed04

0801e904 <SendAckMsg>:

void SendAckMsg(void) {
 801e904:	b510      	push	{r4, lr}
	uint8_t * temp;
	temp = (uint8_t*) pvPortMalloc(1);
 801e906:	2001      	movs	r0, #1
 801e908:	f7f4 fd64 	bl	80133d4 <pvPortMalloc>
 801e90c:	4604      	mov	r4, r0
	*temp = 0xE5;
 801e90e:	23e5      	movs	r3, #229	; 0xe5
 801e910:	7003      	strb	r3, [r0, #0]
	TRANS_ON();
 801e912:	2201      	movs	r2, #1
 801e914:	4611      	mov	r1, r2
 801e916:	4804      	ldr	r0, [pc, #16]	; (801e928 <SendAckMsg+0x24>)
 801e918:	f7f2 ff06 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, temp, 1);
 801e91c:	2201      	movs	r2, #1
 801e91e:	4621      	mov	r1, r4
 801e920:	4802      	ldr	r0, [pc, #8]	; (801e92c <SendAckMsg+0x28>)
 801e922:	f7f3 ff7d 	bl	8012820 <HAL_UART_Transmit_DMA>
 801e926:	bd10      	pop	{r4, pc}
 801e928:	40021000 	.word	0x40021000
 801e92c:	200190a0 	.word	0x200190a0

0801e930 <SendClosemMsg>:
}

void SendClosemMsg(uint8_t to, uint8_t from) {
 801e930:	b570      	push	{r4, r5, r6, lr}
 801e932:	4606      	mov	r6, r0
 801e934:	460d      	mov	r5, r1
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = 12;
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 801e936:	200c      	movs	r0, #12
 801e938:	f7f4 fd4c 	bl	80133d4 <pvPortMalloc>
	if (msg_ptr == NULL) {
 801e93c:	4604      	mov	r4, r0
 801e93e:	b338      	cbz	r0, 801e990 <SendClosemMsg+0x60>
		LogText(INFO_SHOW, SUB_SYS_MEMORY, LOG_LEV_ERR,
				"Request buffer allocation error.\r\n");
		Error_Handler();
	}
	tmp_ptr = msg_ptr;
	*tmp_ptr++ = 0x68;
 801e940:	2368      	movs	r3, #104	; 0x68
 801e942:	7023      	strb	r3, [r4, #0]
	*tmp_ptr++ = 0x06;
 801e944:	2106      	movs	r1, #6
 801e946:	7061      	strb	r1, [r4, #1]
	*tmp_ptr++ = 0x06;
 801e948:	70a1      	strb	r1, [r4, #2]
	*tmp_ptr++ = 0x68;
 801e94a:	70e3      	strb	r3, [r4, #3]
	*tmp_ptr++ = to | 0x80;
 801e94c:	f066 067f 	orn	r6, r6, #127	; 0x7f
 801e950:	7126      	strb	r6, [r4, #4]
	*tmp_ptr++ = from | 0x80;
 801e952:	f065 057f 	orn	r5, r5, #127	; 0x7f
 801e956:	7165      	strb	r5, [r4, #5]
	*tmp_ptr++ = 0x5C;
 801e958:	235c      	movs	r3, #92	; 0x5c
 801e95a:	71a3      	strb	r3, [r4, #6]
	*tmp_ptr++ = hprot.master_SAP;
 801e95c:	4d11      	ldr	r5, [pc, #68]	; (801e9a4 <SendClosemMsg+0x74>)
 801e95e:	7c6b      	ldrb	r3, [r5, #17]
 801e960:	71e3      	strb	r3, [r4, #7]
	*tmp_ptr++ = 0x1F;
 801e962:	231f      	movs	r3, #31
 801e964:	7223      	strb	r3, [r4, #8]
	*tmp_ptr++ = 0x80;
 801e966:	2380      	movs	r3, #128	; 0x80
 801e968:	7263      	strb	r3, [r4, #9]
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, 6);
 801e96a:	1d20      	adds	r0, r4, #4
 801e96c:	f000 fa50 	bl	801ee10 <CalculateFCS>
 801e970:	72a0      	strb	r0, [r4, #10]
	*tmp_ptr = 0x16;
 801e972:	2316      	movs	r3, #22
 801e974:	72e3      	strb	r3, [r4, #11]
	TRANS_ON();
 801e976:	2201      	movs	r2, #1
 801e978:	4611      	mov	r1, r2
 801e97a:	480b      	ldr	r0, [pc, #44]	; (801e9a8 <SendClosemMsg+0x78>)
 801e97c:	f7f2 fed4 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 801e980:	220c      	movs	r2, #12
 801e982:	4621      	mov	r1, r4
 801e984:	4809      	ldr	r0, [pc, #36]	; (801e9ac <SendClosemMsg+0x7c>)
 801e986:	f7f3 ff4b 	bl	8012820 <HAL_UART_Transmit_DMA>
	hprot.conn_stat = CONN_CLOSED;
 801e98a:	2305      	movs	r3, #5
 801e98c:	70eb      	strb	r3, [r5, #3]
 801e98e:	bd70      	pop	{r4, r5, r6, pc}
		LogText(INFO_SHOW, SUB_SYS_MEMORY, LOG_LEV_ERR,
 801e990:	4b07      	ldr	r3, [pc, #28]	; (801e9b0 <SendClosemMsg+0x80>)
 801e992:	2201      	movs	r2, #1
 801e994:	2100      	movs	r1, #0
 801e996:	4610      	mov	r0, r2
 801e998:	f7ff fd7e 	bl	801e498 <LogText__>
		Error_Handler();
 801e99c:	f7ff ff00 	bl	801e7a0 <Error_Handler>
 801e9a0:	e7ce      	b.n	801e940 <SendClosemMsg+0x10>
 801e9a2:	bf00      	nop
 801e9a4:	20018ee8 	.word	0x20018ee8
 801e9a8:	40021000 	.word	0x40021000
 801e9ac:	200190a0 	.word	0x200190a0
 801e9b0:	080270f8 	.word	0x080270f8

0801e9b4 <SendConfirmMsg>:
}

void SendConfirmMsg(uint8_t to, uint8_t from, uint8_t size, uint8_t func) {
 801e9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9b8:	4680      	mov	r8, r0
 801e9ba:	460f      	mov	r7, r1
 801e9bc:	4615      	mov	r5, r2
 801e9be:	4699      	mov	r9, r3
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = size + 6;
 801e9c0:	1d96      	adds	r6, r2, #6
 801e9c2:	b2f6      	uxtb	r6, r6
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 801e9c4:	4630      	mov	r0, r6
 801e9c6:	f7f4 fd05 	bl	80133d4 <pvPortMalloc>
	if (msg_ptr == NULL) {
 801e9ca:	4604      	mov	r4, r0
 801e9cc:	2800      	cmp	r0, #0
 801e9ce:	d03a      	beq.n	801ea46 <SendConfirmMsg+0x92>
		LogText(INFO_SHOW, SUB_SYS_MEMORY, LOG_LEV_ERR,
				"Request buffer allocation error.\r\n");
		Error_Handler();
	}
	tmp_ptr = msg_ptr;
	*tmp_ptr++ = 0x68;
 801e9d0:	2368      	movs	r3, #104	; 0x68
 801e9d2:	7023      	strb	r3, [r4, #0]
	*tmp_ptr++ = size;
 801e9d4:	7065      	strb	r5, [r4, #1]
	*tmp_ptr++ = size;
 801e9d6:	70a5      	strb	r5, [r4, #2]
	*tmp_ptr++ = 0x68;
 801e9d8:	70e3      	strb	r3, [r4, #3]
	*tmp_ptr++ = to | 0x80;
 801e9da:	f068 087f 	orn	r8, r8, #127	; 0x7f
 801e9de:	f884 8004 	strb.w	r8, [r4, #4]
	*tmp_ptr++ = from | 0x80;
 801e9e2:	f067 077f 	orn	r7, r7, #127	; 0x7f
 801e9e6:	7167      	strb	r7, [r4, #5]
	*tmp_ptr++ = func;
 801e9e8:	f884 9006 	strb.w	r9, [r4, #6]
	*tmp_ptr++ = hprot.master_SAP;
 801e9ec:	4b1e      	ldr	r3, [pc, #120]	; (801ea68 <SendConfirmMsg+0xb4>)
 801e9ee:	7c5b      	ldrb	r3, [r3, #17]
 801e9f0:	71e3      	strb	r3, [r4, #7]
	*tmp_ptr++ = 0x1F;
 801e9f2:	231f      	movs	r3, #31
 801e9f4:	7223      	strb	r3, [r4, #8]
	if (size == 0x07) {
 801e9f6:	2d07      	cmp	r5, #7
 801e9f8:	d02e      	beq.n	801ea58 <SendConfirmMsg+0xa4>
		*tmp_ptr++ = 0x05;
		*tmp_ptr++ = 0x07;
	} else {
		*tmp_ptr++ = 0xB0;
 801e9fa:	23b0      	movs	r3, #176	; 0xb0
 801e9fc:	7263      	strb	r3, [r4, #9]
		*tmp_ptr++ = 0x07;
 801e9fe:	2307      	movs	r3, #7
 801ea00:	72a3      	strb	r3, [r4, #10]
		*tmp_ptr++ = hprot.req_num++;
 801ea02:	f104 070c 	add.w	r7, r4, #12
 801ea06:	4b18      	ldr	r3, [pc, #96]	; (801ea68 <SendConfirmMsg+0xb4>)
 801ea08:	7cda      	ldrb	r2, [r3, #19]
 801ea0a:	1c51      	adds	r1, r2, #1
 801ea0c:	74d9      	strb	r1, [r3, #19]
 801ea0e:	72e2      	strb	r2, [r4, #11]
		if (hprot.req_num == 0) {
 801ea10:	7cdb      	ldrb	r3, [r3, #19]
 801ea12:	b913      	cbnz	r3, 801ea1a <SendConfirmMsg+0x66>
			hprot.req_num++;
 801ea14:	3301      	adds	r3, #1
 801ea16:	4a14      	ldr	r2, [pc, #80]	; (801ea68 <SendConfirmMsg+0xb4>)
 801ea18:	74d3      	strb	r3, [r2, #19]
		}
	}
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, size);
 801ea1a:	4629      	mov	r1, r5
 801ea1c:	1d20      	adds	r0, r4, #4
 801ea1e:	f000 f9f7 	bl	801ee10 <CalculateFCS>
 801ea22:	7038      	strb	r0, [r7, #0]
	*tmp_ptr = 0x16;
 801ea24:	2316      	movs	r3, #22
 801ea26:	707b      	strb	r3, [r7, #1]
	hprot.confirm_status = CONF_SENT;
 801ea28:	2202      	movs	r2, #2
 801ea2a:	4b0f      	ldr	r3, [pc, #60]	; (801ea68 <SendConfirmMsg+0xb4>)
 801ea2c:	709a      	strb	r2, [r3, #2]
	TRANS_ON();
 801ea2e:	2201      	movs	r2, #1
 801ea30:	4611      	mov	r1, r2
 801ea32:	480e      	ldr	r0, [pc, #56]	; (801ea6c <SendConfirmMsg+0xb8>)
 801ea34:	f7f2 fe78 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 801ea38:	4632      	mov	r2, r6
 801ea3a:	4621      	mov	r1, r4
 801ea3c:	480c      	ldr	r0, [pc, #48]	; (801ea70 <SendConfirmMsg+0xbc>)
 801ea3e:	f7f3 feef 	bl	8012820 <HAL_UART_Transmit_DMA>
 801ea42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LogText(INFO_SHOW, SUB_SYS_MEMORY, LOG_LEV_ERR,
 801ea46:	4b0b      	ldr	r3, [pc, #44]	; (801ea74 <SendConfirmMsg+0xc0>)
 801ea48:	2201      	movs	r2, #1
 801ea4a:	2100      	movs	r1, #0
 801ea4c:	4610      	mov	r0, r2
 801ea4e:	f7ff fd23 	bl	801e498 <LogText__>
		Error_Handler();
 801ea52:	f7ff fea5 	bl	801e7a0 <Error_Handler>
 801ea56:	e7bb      	b.n	801e9d0 <SendConfirmMsg+0x1c>
		*tmp_ptr++ = 0x05;
 801ea58:	2305      	movs	r3, #5
 801ea5a:	7263      	strb	r3, [r4, #9]
		*tmp_ptr++ = 0x07;
 801ea5c:	f104 070b 	add.w	r7, r4, #11
 801ea60:	2307      	movs	r3, #7
 801ea62:	72a3      	strb	r3, [r4, #10]
 801ea64:	e7d9      	b.n	801ea1a <SendConfirmMsg+0x66>
 801ea66:	bf00      	nop
 801ea68:	20018ee8 	.word	0x20018ee8
 801ea6c:	40021000 	.word	0x40021000
 801ea70:	200190a0 	.word	0x200190a0
 801ea74:	080270f8 	.word	0x080270f8

0801ea78 <SendTokenMsg>:
}

void SendTokenMsg(uint8_t to, uint8_t from) {
 801ea78:	b570      	push	{r4, r5, r6, lr}
 801ea7a:	4606      	mov	r6, r0
 801ea7c:	460d      	mov	r5, r1
	uint8_t * temp;
	static int cnt = 100;
	temp = (uint8_t*) pvPortMalloc(3);
 801ea7e:	2003      	movs	r0, #3
 801ea80:	f7f4 fca8 	bl	80133d4 <pvPortMalloc>
	if (temp == NULL) {
 801ea84:	4604      	mov	r4, r0
 801ea86:	b1c0      	cbz	r0, 801eaba <SendTokenMsg+0x42>
		Error_Handler();
	}
	temp[0] = 0xDC;
 801ea88:	23dc      	movs	r3, #220	; 0xdc
 801ea8a:	7023      	strb	r3, [r4, #0]
	temp[1] = to;
 801ea8c:	7066      	strb	r6, [r4, #1]
	temp[2] = from;
 801ea8e:	70a5      	strb	r5, [r4, #2]
	cnt--;
 801ea90:	4a14      	ldr	r2, [pc, #80]	; (801eae4 <SendTokenMsg+0x6c>)
 801ea92:	6813      	ldr	r3, [r2, #0]
 801ea94:	3b01      	subs	r3, #1
 801ea96:	6013      	str	r3, [r2, #0]
	if (cnt == 0) {
 801ea98:	b193      	cbz	r3, 801eac0 <SendTokenMsg+0x48>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
		cnt = 100;
	}
	TRANS_ON();
 801ea9a:	2201      	movs	r2, #1
 801ea9c:	4611      	mov	r1, r2
 801ea9e:	4812      	ldr	r0, [pc, #72]	; (801eae8 <SendTokenMsg+0x70>)
 801eaa0:	f7f2 fe42 	bl	8011728 <HAL_GPIO_WritePin>
	if (HAL_UART_Transmit_DMA(&huart5, temp, 3) == HAL_BUSY) {
 801eaa4:	2203      	movs	r2, #3
 801eaa6:	4621      	mov	r1, r4
 801eaa8:	4810      	ldr	r0, [pc, #64]	; (801eaec <SendTokenMsg+0x74>)
 801eaaa:	f7f3 feb9 	bl	8012820 <HAL_UART_Transmit_DMA>
 801eaae:	2802      	cmp	r0, #2
 801eab0:	d00f      	beq.n	801ead2 <SendTokenMsg+0x5a>
		TRANS_OFF();
		vPortFree(temp);
	}
	HAL_IWDG_Refresh(&hiwdg);
 801eab2:	480f      	ldr	r0, [pc, #60]	; (801eaf0 <SendTokenMsg+0x78>)
 801eab4:	f7f2 fe42 	bl	801173c <HAL_IWDG_Refresh>
 801eab8:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 801eaba:	f7ff fe71 	bl	801e7a0 <Error_Handler>
 801eabe:	e7e3      	b.n	801ea88 <SendTokenMsg+0x10>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 801eac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801eac4:	4808      	ldr	r0, [pc, #32]	; (801eae8 <SendTokenMsg+0x70>)
 801eac6:	f7f2 fe35 	bl	8011734 <HAL_GPIO_TogglePin>
		cnt = 100;
 801eaca:	2264      	movs	r2, #100	; 0x64
 801eacc:	4b05      	ldr	r3, [pc, #20]	; (801eae4 <SendTokenMsg+0x6c>)
 801eace:	601a      	str	r2, [r3, #0]
 801ead0:	e7e3      	b.n	801ea9a <SendTokenMsg+0x22>
		TRANS_OFF();
 801ead2:	2200      	movs	r2, #0
 801ead4:	2101      	movs	r1, #1
 801ead6:	4804      	ldr	r0, [pc, #16]	; (801eae8 <SendTokenMsg+0x70>)
 801ead8:	f7f2 fe26 	bl	8011728 <HAL_GPIO_WritePin>
		vPortFree(temp);
 801eadc:	4620      	mov	r0, r4
 801eade:	f7f4 fcfd 	bl	80134dc <vPortFree>
 801eae2:	e7e6      	b.n	801eab2 <SendTokenMsg+0x3a>
 801eae4:	20000038 	.word	0x20000038
 801eae8:	40021000 	.word	0x40021000
 801eaec:	200190a0 	.word	0x200190a0
 801eaf0:	20018e10 	.word	0x20018e10

0801eaf4 <SendNoDataMsg>:
}

void SendNoDataMsg(uint8_t to, uint8_t from, uint8_t fc) {
 801eaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eaf6:	4605      	mov	r5, r0
 801eaf8:	460f      	mov	r7, r1
 801eafa:	4616      	mov	r6, r2
	uint8_t * temp;
	temp = (uint8_t*) pvPortMalloc(6);
 801eafc:	2006      	movs	r0, #6
 801eafe:	f7f4 fc69 	bl	80133d4 <pvPortMalloc>
	if (temp == NULL) {
 801eb02:	4604      	mov	r4, r0
 801eb04:	b1a8      	cbz	r0, 801eb32 <SendNoDataMsg+0x3e>
		Error_Handler();
	}
	temp[0] = 0x10;
 801eb06:	2310      	movs	r3, #16
 801eb08:	7023      	strb	r3, [r4, #0]
	temp[1] = to;
 801eb0a:	7065      	strb	r5, [r4, #1]
	temp[2] = from;
 801eb0c:	70a7      	strb	r7, [r4, #2]
	temp[3] = fc;
 801eb0e:	70e6      	strb	r6, [r4, #3]
	temp[4] = to + from + fc;
 801eb10:	443d      	add	r5, r7
 801eb12:	fa56 f585 	uxtab	r5, r6, r5
 801eb16:	7125      	strb	r5, [r4, #4]
	temp[5] = 0x16;
 801eb18:	2316      	movs	r3, #22
 801eb1a:	7163      	strb	r3, [r4, #5]
	TRANS_ON();
 801eb1c:	2201      	movs	r2, #1
 801eb1e:	4611      	mov	r1, r2
 801eb20:	4805      	ldr	r0, [pc, #20]	; (801eb38 <SendNoDataMsg+0x44>)
 801eb22:	f7f2 fe01 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, temp, 6);
 801eb26:	2206      	movs	r2, #6
 801eb28:	4621      	mov	r1, r4
 801eb2a:	4804      	ldr	r0, [pc, #16]	; (801eb3c <SendNoDataMsg+0x48>)
 801eb2c:	f7f3 fe78 	bl	8012820 <HAL_UART_Transmit_DMA>
 801eb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Error_Handler();
 801eb32:	f7ff fe35 	bl	801e7a0 <Error_Handler>
 801eb36:	e7e6      	b.n	801eb06 <SendNoDataMsg+0x12>
 801eb38:	40021000 	.word	0x40021000
 801eb3c:	200190a0 	.word	0x200190a0

0801eb40 <SendRequestMsg>:
}

void SendRequestMsg(uint8_t to, uint8_t from, uint8_t* data, uint8_t data_len) {
 801eb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb44:	4682      	mov	sl, r0
 801eb46:	4688      	mov	r8, r1
 801eb48:	4691      	mov	r9, r2
 801eb4a:	461d      	mov	r5, r3
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = data_len + 13;
 801eb4c:	f103 070d 	add.w	r7, r3, #13
 801eb50:	b2ff      	uxtb	r7, r7
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 801eb52:	4638      	mov	r0, r7
 801eb54:	f7f4 fc3e 	bl	80133d4 <pvPortMalloc>
	if (msg_ptr == NULL) {
 801eb58:	4604      	mov	r4, r0
 801eb5a:	b3b8      	cbz	r0, 801ebcc <SendRequestMsg+0x8c>
		LogText(INFO_SHOW, SUB_SYS_MEMORY, LOG_LEV_ERR,
				"Request buffer allocation error.\r\n");
		Error_Handler();
	}
	tmp_ptr = msg_ptr;
	*tmp_ptr++ = 0x68;
 801eb5c:	2368      	movs	r3, #104	; 0x68
 801eb5e:	7023      	strb	r3, [r4, #0]
	*tmp_ptr++ = data_len + 7;
 801eb60:	1dee      	adds	r6, r5, #7
 801eb62:	b2f6      	uxtb	r6, r6
 801eb64:	7066      	strb	r6, [r4, #1]
	*tmp_ptr++ = data_len + 7;
 801eb66:	70a6      	strb	r6, [r4, #2]
	*tmp_ptr++ = 0x68;
 801eb68:	70e3      	strb	r3, [r4, #3]
	*tmp_ptr++ = to | 0x80;
 801eb6a:	f06a 0a7f 	orn	sl, sl, #127	; 0x7f
 801eb6e:	f884 a004 	strb.w	sl, [r4, #4]
	*tmp_ptr++ = from | 0x80;
 801eb72:	f068 087f 	orn	r8, r8, #127	; 0x7f
 801eb76:	f884 8005 	strb.w	r8, [r4, #5]
	*tmp_ptr++ = 0x7C;
 801eb7a:	237c      	movs	r3, #124	; 0x7c
 801eb7c:	71a3      	strb	r3, [r4, #6]
	*tmp_ptr++ = hprot.master_SAP;
 801eb7e:	4b18      	ldr	r3, [pc, #96]	; (801ebe0 <SendRequestMsg+0xa0>)
 801eb80:	7c5a      	ldrb	r2, [r3, #17]
 801eb82:	71e2      	strb	r2, [r4, #7]
	*tmp_ptr++ = 0x1F;
 801eb84:	221f      	movs	r2, #31
 801eb86:	7222      	strb	r2, [r4, #8]
	*tmp_ptr++ = 0xF1;
 801eb88:	22f1      	movs	r2, #241	; 0xf1
 801eb8a:	7262      	strb	r2, [r4, #9]
	*tmp_ptr++ = hprot.req_num;
 801eb8c:	f104 080b 	add.w	r8, r4, #11
 801eb90:	7cdb      	ldrb	r3, [r3, #19]
 801eb92:	72a3      	strb	r3, [r4, #10]
	memcpy(tmp_ptr, data, data_len);
 801eb94:	462a      	mov	r2, r5
 801eb96:	4649      	mov	r1, r9
 801eb98:	4640      	mov	r0, r8
 801eb9a:	f001 feac 	bl	80208f6 <memcpy>
	tmp_ptr += data_len;
 801eb9e:	eb08 0905 	add.w	r9, r8, r5
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, data_len + 7);
 801eba2:	4631      	mov	r1, r6
 801eba4:	1d20      	adds	r0, r4, #4
 801eba6:	f000 f933 	bl	801ee10 <CalculateFCS>
 801ebaa:	f808 0005 	strb.w	r0, [r8, r5]
	*tmp_ptr = 0x16;
 801ebae:	2316      	movs	r3, #22
 801ebb0:	f889 3001 	strb.w	r3, [r9, #1]
	TRANS_ON();
 801ebb4:	2201      	movs	r2, #1
 801ebb6:	4611      	mov	r1, r2
 801ebb8:	480a      	ldr	r0, [pc, #40]	; (801ebe4 <SendRequestMsg+0xa4>)
 801ebba:	f7f2 fdb5 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 801ebbe:	463a      	mov	r2, r7
 801ebc0:	4621      	mov	r1, r4
 801ebc2:	4809      	ldr	r0, [pc, #36]	; (801ebe8 <SendRequestMsg+0xa8>)
 801ebc4:	f7f3 fe2c 	bl	8012820 <HAL_UART_Transmit_DMA>
 801ebc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LogText(INFO_SHOW, SUB_SYS_MEMORY, LOG_LEV_ERR,
 801ebcc:	4b07      	ldr	r3, [pc, #28]	; (801ebec <SendRequestMsg+0xac>)
 801ebce:	2201      	movs	r2, #1
 801ebd0:	2100      	movs	r1, #0
 801ebd2:	4610      	mov	r0, r2
 801ebd4:	f7ff fc60 	bl	801e498 <LogText__>
		Error_Handler();
 801ebd8:	f7ff fde2 	bl	801e7a0 <Error_Handler>
 801ebdc:	e7be      	b.n	801eb5c <SendRequestMsg+0x1c>
 801ebde:	bf00      	nop
 801ebe0:	20018ee8 	.word	0x20018ee8
 801ebe4:	40021000 	.word	0x40021000
 801ebe8:	200190a0 	.word	0x200190a0
 801ebec:	080270f8 	.word	0x080270f8

0801ebf0 <SendConnectMsg>:
}

void SendConnectMsg(uint8_t to, uint8_t from, uint8_t fc) {
 801ebf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ebf2:	b085      	sub	sp, #20
 801ebf4:	4606      	mov	r6, r0
 801ebf6:	460d      	mov	r5, r1
 801ebf8:	4617      	mov	r7, r2
	uint8_t data[] = { 0x80, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00 };
 801ebfa:	4a22      	ldr	r2, [pc, #136]	; (801ec84 <SendConnectMsg+0x94>)
 801ebfc:	ab01      	add	r3, sp, #4
 801ebfe:	ca07      	ldmia	r2, {r0, r1, r2}
 801ec00:	c303      	stmia	r3!, {r0, r1}
 801ec02:	701a      	strb	r2, [r3, #0]
	uint8_t data_len = sizeof(data);
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = data_len + 14;
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 801ec04:	2017      	movs	r0, #23
 801ec06:	f7f4 fbe5 	bl	80133d4 <pvPortMalloc>
	if (msg_ptr == NULL) {
 801ec0a:	4604      	mov	r4, r0
 801ec0c:	b388      	cbz	r0, 801ec72 <SendConnectMsg+0x82>
		LogText(INFO_SHOW, SUB_SYS_MEMORY, LOG_LEV_ERR,
				"Request buffer allocation error.\r\n");
		Error_Handler();
	}
	tmp_ptr = msg_ptr;
	*tmp_ptr++ = 0x68;
 801ec0e:	2368      	movs	r3, #104	; 0x68
 801ec10:	7023      	strb	r3, [r4, #0]
	*tmp_ptr++ = data_len + 8;
 801ec12:	2211      	movs	r2, #17
 801ec14:	7062      	strb	r2, [r4, #1]
	*tmp_ptr++ = data_len + 8;
 801ec16:	70a2      	strb	r2, [r4, #2]
	*tmp_ptr++ = 0x68;
 801ec18:	70e3      	strb	r3, [r4, #3]
	*tmp_ptr++ = to | 0x80;
 801ec1a:	f066 067f 	orn	r6, r6, #127	; 0x7f
 801ec1e:	7126      	strb	r6, [r4, #4]
	*tmp_ptr++ = from | 0x80;
 801ec20:	f065 057f 	orn	r5, r5, #127	; 0x7f
 801ec24:	7165      	strb	r5, [r4, #5]
	*tmp_ptr++ = fc;
 801ec26:	71a7      	strb	r7, [r4, #6]
	*tmp_ptr++ = 0x00;
 801ec28:	2300      	movs	r3, #0
 801ec2a:	71e3      	strb	r3, [r4, #7]
	*tmp_ptr++ = 0x1F;
 801ec2c:	231f      	movs	r3, #31
 801ec2e:	7223      	strb	r3, [r4, #8]
	*tmp_ptr++ = 0xE0;
 801ec30:	23e0      	movs	r3, #224	; 0xe0
 801ec32:	7263      	strb	r3, [r4, #9]
	*tmp_ptr++ = 0x04;
 801ec34:	2304      	movs	r3, #4
 801ec36:	72a3      	strb	r3, [r4, #10]
	*tmp_ptr++ = hprot.req_num;
 801ec38:	4d13      	ldr	r5, [pc, #76]	; (801ec88 <SendConnectMsg+0x98>)
 801ec3a:	7ceb      	ldrb	r3, [r5, #19]
 801ec3c:	72e3      	strb	r3, [r4, #11]
	memcpy(tmp_ptr, data, data_len);
 801ec3e:	ab01      	add	r3, sp, #4
 801ec40:	cb03      	ldmia	r3!, {r0, r1}
 801ec42:	60e0      	str	r0, [r4, #12]
 801ec44:	6121      	str	r1, [r4, #16]
 801ec46:	781b      	ldrb	r3, [r3, #0]
 801ec48:	7523      	strb	r3, [r4, #20]
	tmp_ptr += data_len;
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, data_len + 8);
 801ec4a:	4611      	mov	r1, r2
 801ec4c:	1d20      	adds	r0, r4, #4
 801ec4e:	f000 f8df 	bl	801ee10 <CalculateFCS>
 801ec52:	7560      	strb	r0, [r4, #21]
	*tmp_ptr = 0x16;
 801ec54:	2316      	movs	r3, #22
 801ec56:	75a3      	strb	r3, [r4, #22]
	hprot.conn_stat = CONN_REQ_SENT;
 801ec58:	2101      	movs	r1, #1
 801ec5a:	70e9      	strb	r1, [r5, #3]
	TRANS_ON();
 801ec5c:	460a      	mov	r2, r1
 801ec5e:	480b      	ldr	r0, [pc, #44]	; (801ec8c <SendConnectMsg+0x9c>)
 801ec60:	f7f2 fd62 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 801ec64:	2217      	movs	r2, #23
 801ec66:	4621      	mov	r1, r4
 801ec68:	4809      	ldr	r0, [pc, #36]	; (801ec90 <SendConnectMsg+0xa0>)
 801ec6a:	f7f3 fdd9 	bl	8012820 <HAL_UART_Transmit_DMA>
}
 801ec6e:	b005      	add	sp, #20
 801ec70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LogText(INFO_SHOW, SUB_SYS_MEMORY, LOG_LEV_ERR,
 801ec72:	4b08      	ldr	r3, [pc, #32]	; (801ec94 <SendConnectMsg+0xa4>)
 801ec74:	2201      	movs	r2, #1
 801ec76:	2100      	movs	r1, #0
 801ec78:	4610      	mov	r0, r2
 801ec7a:	f7ff fc0d 	bl	801e498 <LogText__>
		Error_Handler();
 801ec7e:	f7ff fd8f 	bl	801e7a0 <Error_Handler>
 801ec82:	e7c4      	b.n	801ec0e <SendConnectMsg+0x1e>
 801ec84:	080213fc 	.word	0x080213fc
 801ec88:	20018ee8 	.word	0x20018ee8
 801ec8c:	40021000 	.word	0x40021000
 801ec90:	200190a0 	.word	0x200190a0
 801ec94:	080270f8 	.word	0x080270f8

0801ec98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == &huart5) {
 801ec98:	4b0a      	ldr	r3, [pc, #40]	; (801ecc4 <HAL_UART_RxCpltCallback+0x2c>)
 801ec9a:	4283      	cmp	r3, r0
 801ec9c:	d000      	beq.n	801eca0 <HAL_UART_RxCpltCallback+0x8>
 801ec9e:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801eca0:	b510      	push	{r4, lr}
		HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 801eca2:	4c09      	ldr	r4, [pc, #36]	; (801ecc8 <HAL_UART_RxCpltCallback+0x30>)
 801eca4:	2201      	movs	r2, #1
 801eca6:	4621      	mov	r1, r4
 801eca8:	4618      	mov	r0, r3
 801ecaa:	f7f3 fd8f 	bl	80127cc <HAL_UART_Receive_IT>
		CB_Write(&inbuf_UART, received_byte);
 801ecae:	7821      	ldrb	r1, [r4, #0]
 801ecb0:	4806      	ldr	r0, [pc, #24]	; (801eccc <HAL_UART_RxCpltCallback+0x34>)
 801ecb2:	f7fd fe69 	bl	801c988 <CB_Write>
		__HAL_TIM_SET_COUNTER(&htim8, 0x00U);
 801ecb6:	4806      	ldr	r0, [pc, #24]	; (801ecd0 <HAL_UART_RxCpltCallback+0x38>)
 801ecb8:	6803      	ldr	r3, [r0, #0]
 801ecba:	2200      	movs	r2, #0
 801ecbc:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim8);
 801ecbe:	f7f3 f88c 	bl	8011dda <HAL_TIM_Base_Start_IT>
 801ecc2:	bd10      	pop	{r4, pc}
 801ecc4:	200190a0 	.word	0x200190a0
 801ecc8:	20018ed4 	.word	0x20018ed4
 801eccc:	20018ed8 	.word	0x20018ed8
 801ecd0:	20018f44 	.word	0x20018f44

0801ecd4 <HAL_UART_TxCpltCallback>:
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 801ecd4:	2200      	movs	r2, #0
 801ecd6:	4b11      	ldr	r3, [pc, #68]	; (801ed1c <HAL_UART_TxCpltCallback+0x48>)
 801ecd8:	601a      	str	r2, [r3, #0]
	if (huart == &huart5) {
 801ecda:	4b11      	ldr	r3, [pc, #68]	; (801ed20 <HAL_UART_TxCpltCallback+0x4c>)
 801ecdc:	4283      	cmp	r3, r0
 801ecde:	d000      	beq.n	801ece2 <HAL_UART_TxCpltCallback+0xe>
 801ece0:	4770      	bx	lr
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 801ece2:	b510      	push	{r4, lr}
		TRANS_OFF();
 801ece4:	2101      	movs	r1, #1
 801ece6:	480f      	ldr	r0, [pc, #60]	; (801ed24 <HAL_UART_TxCpltCallback+0x50>)
 801ece8:	f7f2 fd1e 	bl	8011728 <HAL_GPIO_WritePin>
		xQueueSendFromISR(cleaner_queue, &(huart5.pTxBuffPtr),
 801ecec:	4c0b      	ldr	r4, [pc, #44]	; (801ed1c <HAL_UART_TxCpltCallback+0x48>)
 801ecee:	2300      	movs	r3, #0
 801ecf0:	4622      	mov	r2, r4
 801ecf2:	490d      	ldr	r1, [pc, #52]	; (801ed28 <HAL_UART_TxCpltCallback+0x54>)
 801ecf4:	480d      	ldr	r0, [pc, #52]	; (801ed2c <HAL_UART_TxCpltCallback+0x58>)
 801ecf6:	6800      	ldr	r0, [r0, #0]
 801ecf8:	f7f4 fe80 	bl	80139fc <xQueueGenericSendFromISR>
				&xHigherPriorityTaskWoken);
		if (xHigherPriorityTaskWoken == pdTRUE) {
 801ecfc:	6823      	ldr	r3, [r4, #0]
 801ecfe:	2b01      	cmp	r3, #1
 801ed00:	d000      	beq.n	801ed04 <HAL_UART_TxCpltCallback+0x30>
 801ed02:	bd10      	pop	{r4, pc}
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801ed04:	2b00      	cmp	r3, #0
 801ed06:	d0fc      	beq.n	801ed02 <HAL_UART_TxCpltCallback+0x2e>
 801ed08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ed0c:	4b08      	ldr	r3, [pc, #32]	; (801ed30 <HAL_UART_TxCpltCallback+0x5c>)
 801ed0e:	601a      	str	r2, [r3, #0]
 801ed10:	f3bf 8f4f 	dsb	sy
 801ed14:	f3bf 8f6f 	isb	sy
		}
	}
}
 801ed18:	e7f3      	b.n	801ed02 <HAL_UART_TxCpltCallback+0x2e>
 801ed1a:	bf00      	nop
 801ed1c:	20010c68 	.word	0x20010c68
 801ed20:	200190a0 	.word	0x200190a0
 801ed24:	40021000 	.word	0x40021000
 801ed28:	200190c0 	.word	0x200190c0
 801ed2c:	20018e08 	.word	0x20018e08
 801ed30:	e000ed04 	.word	0xe000ed04

0801ed34 <StartProcessTask>:

void StartProcessTask(void const * argument) {
 801ed34:	b510      	push	{r4, lr}
 801ed36:	b082      	sub	sp, #8
	uint8_t len;
	static uint8_t cmd_data_buf[SIZE_OF_CMD_BUF];

	error_t err = NO_ERR;
	err = CB_Init(&inbuf_UART, UART_BUFF_SIZE);
 801ed38:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ed3c:	4821      	ldr	r0, [pc, #132]	; (801edc4 <StartProcessTask+0x90>)
 801ed3e:	f7fd fe05 	bl	801c94c <CB_Init>
	if (err != NO_ERR) {
 801ed42:	b128      	cbz	r0, 801ed50 <StartProcessTask+0x1c>
		LogText(INFO_SHOW, SUB_SYS_MEMORY, LOG_LEV_ERR,
 801ed44:	4b20      	ldr	r3, [pc, #128]	; (801edc8 <StartProcessTask+0x94>)
 801ed46:	2201      	movs	r2, #1
 801ed48:	2100      	movs	r1, #0
 801ed4a:	4610      	mov	r0, r2
 801ed4c:	f7ff fba4 	bl	801e498 <LogText__>
				"Circular buffer allocation error.\r\n");
	}
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 801ed50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ed54:	481d      	ldr	r0, [pc, #116]	; (801edcc <StartProcessTask+0x98>)
 801ed56:	f7f2 fced 	bl	8011734 <HAL_GPIO_TogglePin>
	osDelay(7000 + hprot.own_address*100);            /* ver 0.6.3 */
 801ed5a:	4b1d      	ldr	r3, [pc, #116]	; (801edd0 <StartProcessTask+0x9c>)
 801ed5c:	781a      	ldrb	r2, [r3, #0]
 801ed5e:	f641 3358 	movw	r3, #7000	; 0x1b58
 801ed62:	2064      	movs	r0, #100	; 0x64
 801ed64:	fb00 3002 	mla	r0, r0, r2, r3
 801ed68:	f7f3 ff2a 	bl	8012bc0 <osDelay>
	HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 801ed6c:	2201      	movs	r2, #1
 801ed6e:	4919      	ldr	r1, [pc, #100]	; (801edd4 <StartProcessTask+0xa0>)
 801ed70:	4819      	ldr	r0, [pc, #100]	; (801edd8 <StartProcessTask+0xa4>)
 801ed72:	f7f3 fd2b 	bl	80127cc <HAL_UART_Receive_IT>
 801ed76:	e015      	b.n	801eda4 <StartProcessTask+0x70>
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
		cmd_data_buf[SIZE_OF_CMD_BUF - 1] = len;
		uint pos = 0;
		while (len) {
			uint8_t ch;
			CB_Read(&inbuf_UART, &ch);
 801ed78:	f10d 0106 	add.w	r1, sp, #6
 801ed7c:	4811      	ldr	r0, [pc, #68]	; (801edc4 <StartProcessTask+0x90>)
 801ed7e:	f7fd fe19 	bl	801c9b4 <CB_Read>
			--len;
 801ed82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ed86:	3b01      	subs	r3, #1
 801ed88:	f88d 3007 	strb.w	r3, [sp, #7]
			cmd_data_buf[pos++] = ch;
 801ed8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801ed90:	4b12      	ldr	r3, [pc, #72]	; (801eddc <StartProcessTask+0xa8>)
 801ed92:	551a      	strb	r2, [r3, r4]
 801ed94:	3401      	adds	r4, #1
		while (len) {
 801ed96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ed9a:	2b00      	cmp	r3, #0
 801ed9c:	d1ec      	bne.n	801ed78 <StartProcessTask+0x44>
		}
		CommandParser(cmd_data_buf);
 801ed9e:	480f      	ldr	r0, [pc, #60]	; (801eddc <StartProcessTask+0xa8>)
 801eda0:	f000 f85a 	bl	801ee58 <CommandParser>
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
 801eda4:	2300      	movs	r3, #0
 801eda6:	f04f 32ff 	mov.w	r2, #4294967295
 801edaa:	f10d 0107 	add.w	r1, sp, #7
 801edae:	480c      	ldr	r0, [pc, #48]	; (801ede0 <StartProcessTask+0xac>)
 801edb0:	6800      	ldr	r0, [r0, #0]
 801edb2:	f7f4 fef1 	bl	8013b98 <xQueueGenericReceive>
		cmd_data_buf[SIZE_OF_CMD_BUF - 1] = len;
 801edb6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801edba:	4b08      	ldr	r3, [pc, #32]	; (801eddc <StartProcessTask+0xa8>)
 801edbc:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		uint pos = 0;
 801edc0:	2400      	movs	r4, #0
		while (len) {
 801edc2:	e7e8      	b.n	801ed96 <StartProcessTask+0x62>
 801edc4:	20018ed8 	.word	0x20018ed8
 801edc8:	0802711c 	.word	0x0802711c
 801edcc:	40021000 	.word	0x40021000
 801edd0:	20018ee8 	.word	0x20018ee8
 801edd4:	20018ed4 	.word	0x20018ed4
 801edd8:	200190a0 	.word	0x200190a0
 801eddc:	20010b64 	.word	0x20010b64
 801ede0:	20018df8 	.word	0x20018df8

0801ede4 <ProtocolSettingsInit>:
/* ---------- FUNCTIONS ------------ */
/* -------||--||--||--||--||-------- */
/* -------\/--\/--\/--\/--\/-------- */

void ProtocolSettingsInit(profibus_MPI_t* hp) {
	hp->own_address = hflash.own_addr;
 801ede4:	4b09      	ldr	r3, [pc, #36]	; (801ee0c <ProtocolSettingsInit+0x28>)
 801ede6:	7919      	ldrb	r1, [r3, #4]
 801ede8:	7001      	strb	r1, [r0, #0]
	hp->speed = hflash.speed;
 801edea:	681b      	ldr	r3, [r3, #0]
 801edec:	6083      	str	r3, [r0, #8]
	hp->token_possession = 0U;
 801edee:	2300      	movs	r3, #0
 801edf0:	7043      	strb	r3, [r0, #1]
	hp->confirm_status = CONF_OK;
 801edf2:	2203      	movs	r2, #3
 801edf4:	7082      	strb	r2, [r0, #2]
	hp->conn_stat = CONN_NO;
 801edf6:	70c3      	strb	r3, [r0, #3]
	hp->wait_for_answer = 0U;
 801edf8:	7103      	strb	r3, [r0, #4]
	hp->data_ptr = NULL;
 801edfa:	60c3      	str	r3, [r0, #12]
	hp->data_len = 0U;
 801edfc:	7403      	strb	r3, [r0, #16]
	hp->bus_masters = 0x00U;
 801edfe:	6143      	str	r3, [r0, #20]
	}
	return NO_ERR;
}

static inline void AddMaster(profibus_MPI_t *prot, uint8_t new_master) {
	prot->bus_masters |= (0x01U << new_master);
 801ee00:	6943      	ldr	r3, [r0, #20]
 801ee02:	2201      	movs	r2, #1
 801ee04:	408a      	lsls	r2, r1
 801ee06:	4313      	orrs	r3, r2
 801ee08:	6143      	str	r3, [r0, #20]
 801ee0a:	4770      	bx	lr
 801ee0c:	20015ce4 	.word	0x20015ce4

0801ee10 <CalculateFCS>:
	uint8_t result = 0;
 801ee10:	2200      	movs	r2, #0
	while (len--) {
 801ee12:	e004      	b.n	801ee1e <CalculateFCS+0xe>
		result += *buf++;
 801ee14:	7801      	ldrb	r1, [r0, #0]
 801ee16:	440a      	add	r2, r1
 801ee18:	b2d2      	uxtb	r2, r2
	while (len--) {
 801ee1a:	4619      	mov	r1, r3
		result += *buf++;
 801ee1c:	3001      	adds	r0, #1
	while (len--) {
 801ee1e:	1e4b      	subs	r3, r1, #1
 801ee20:	b2db      	uxtb	r3, r3
 801ee22:	2900      	cmp	r1, #0
 801ee24:	d1f6      	bne.n	801ee14 <CalculateFCS+0x4>
}
 801ee26:	4610      	mov	r0, r2
 801ee28:	4770      	bx	lr

0801ee2a <GetNextMaster>:
}

uint8_t GetNextMaster(profibus_MPI_t *prot) {
 801ee2a:	b430      	push	{r4, r5}
	uint8_t pos = prot->own_address;
 801ee2c:	7805      	ldrb	r5, [r0, #0]
 801ee2e:	462b      	mov	r3, r5

	for (int i = 0; i < 32; i++) {
 801ee30:	2100      	movs	r1, #0
 801ee32:	e005      	b.n	801ee40 <GetNextMaster+0x16>
		pos++;
		if (pos == 32) {
			pos = 0;
		}
		if (((0x01U << pos) & prot->bus_masters) != 0x00) {
 801ee34:	2201      	movs	r2, #1
 801ee36:	409a      	lsls	r2, r3
 801ee38:	6944      	ldr	r4, [r0, #20]
 801ee3a:	4222      	tst	r2, r4
 801ee3c:	d109      	bne.n	801ee52 <GetNextMaster+0x28>
	for (int i = 0; i < 32; i++) {
 801ee3e:	3101      	adds	r1, #1
 801ee40:	291f      	cmp	r1, #31
 801ee42:	dc05      	bgt.n	801ee50 <GetNextMaster+0x26>
		pos++;
 801ee44:	3301      	adds	r3, #1
 801ee46:	b2db      	uxtb	r3, r3
		if (pos == 32) {
 801ee48:	2b20      	cmp	r3, #32
 801ee4a:	d1f3      	bne.n	801ee34 <GetNextMaster+0xa>
			pos = 0;
 801ee4c:	2300      	movs	r3, #0
 801ee4e:	e7f1      	b.n	801ee34 <GetNextMaster+0xa>
			return pos;
		}
	}
	return prot->own_address;
 801ee50:	462b      	mov	r3, r5
}
 801ee52:	4618      	mov	r0, r3
 801ee54:	bc30      	pop	{r4, r5}
 801ee56:	4770      	bx	lr

0801ee58 <CommandParser>:
	uint8_t size = buf[SIZE_OF_CMD_BUF - 1];
 801ee58:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
	htel.SD = *buf++;
 801ee5c:	7803      	ldrb	r3, [r0, #0]
 801ee5e:	4aa7      	ldr	r2, [pc, #668]	; (801f0fc <CommandParser+0x2a4>)
 801ee60:	7013      	strb	r3, [r2, #0]
	switch (htel.SD) {
 801ee62:	2ba2      	cmp	r3, #162	; 0xa2
 801ee64:	f000 81ce 	beq.w	801f204 <CommandParser+0x3ac>
error_t CommandParser(uint8_t *buf) {
 801ee68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee6a:	b083      	sub	sp, #12
 801ee6c:	f100 0501 	add.w	r5, r0, #1
 801ee70:	4604      	mov	r4, r0
	switch (htel.SD) {
 801ee72:	d80f      	bhi.n	801ee94 <CommandParser+0x3c>
 801ee74:	2b10      	cmp	r3, #16
 801ee76:	f000 80b9 	beq.w	801efec <CommandParser+0x194>
 801ee7a:	2b68      	cmp	r3, #104	; 0x68
 801ee7c:	d116      	bne.n	801eeac <CommandParser+0x54>
		htel.LE = *buf++;
 801ee7e:	7845      	ldrb	r5, [r0, #1]
 801ee80:	4a9e      	ldr	r2, [pc, #632]	; (801f0fc <CommandParser+0x2a4>)
 801ee82:	7055      	strb	r5, [r2, #1]
		htel.LEr = *buf++;
 801ee84:	7883      	ldrb	r3, [r0, #2]
 801ee86:	7093      	strb	r3, [r2, #2]
		buf++;
 801ee88:	1d06      	adds	r6, r0, #4
		if (htel.LE != htel.LEr) {
 801ee8a:	429d      	cmp	r5, r3
 801ee8c:	f000 80e2 	beq.w	801f054 <CommandParser+0x1fc>
			return FRAME_ERR;
 801ee90:	2006      	movs	r0, #6
 801ee92:	e00c      	b.n	801eeae <CommandParser+0x56>
	switch (htel.SD) {
 801ee94:	2bdc      	cmp	r3, #220	; 0xdc
 801ee96:	d00c      	beq.n	801eeb2 <CommandParser+0x5a>
 801ee98:	2be5      	cmp	r3, #229	; 0xe5
 801ee9a:	d107      	bne.n	801eeac <CommandParser+0x54>
		if (hprot.token_possession == 1U) {
 801ee9c:	4b98      	ldr	r3, [pc, #608]	; (801f100 <CommandParser+0x2a8>)
 801ee9e:	785b      	ldrb	r3, [r3, #1]
 801eea0:	b2db      	uxtb	r3, r3
 801eea2:	2b01      	cmp	r3, #1
 801eea4:	f000 81a4 	beq.w	801f1f0 <CommandParser+0x398>
		return NO_ERR;
 801eea8:	2000      	movs	r0, #0
 801eeaa:	e000      	b.n	801eeae <CommandParser+0x56>
		return UNKNOWN_SD_ERR;
 801eeac:	2005      	movs	r0, #5
}
 801eeae:	b003      	add	sp, #12
 801eeb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (size != 3) {
 801eeb2:	2903      	cmp	r1, #3
 801eeb4:	d001      	beq.n	801eeba <CommandParser+0x62>
			return SIZE_ERR;
 801eeb6:	2004      	movs	r0, #4
 801eeb8:	e7f9      	b.n	801eeae <CommandParser+0x56>
		htel.DA = *buf++;
 801eeba:	7843      	ldrb	r3, [r0, #1]
 801eebc:	4a8f      	ldr	r2, [pc, #572]	; (801f0fc <CommandParser+0x2a4>)
 801eebe:	70d3      	strb	r3, [r2, #3]
		htel.SA = *buf;
 801eec0:	7881      	ldrb	r1, [r0, #2]
 801eec2:	7111      	strb	r1, [r2, #4]
	prot->bus_masters |= (0x01U << new_master);
 801eec4:	4a8e      	ldr	r2, [pc, #568]	; (801f100 <CommandParser+0x2a8>)
 801eec6:	6951      	ldr	r1, [r2, #20]
 801eec8:	2001      	movs	r0, #1
 801eeca:	4098      	lsls	r0, r3
 801eecc:	4301      	orrs	r1, r0
 801eece:	6151      	str	r1, [r2, #20]
		if (htel.DA != hprot.own_address) {
 801eed0:	7812      	ldrb	r2, [r2, #0]
 801eed2:	4293      	cmp	r3, r2
 801eed4:	d001      	beq.n	801eeda <CommandParser+0x82>
			return NO_ERR;
 801eed6:	2000      	movs	r0, #0
 801eed8:	e7e9      	b.n	801eeae <CommandParser+0x56>
	hprot.token_possession = 1U;
 801eeda:	4b89      	ldr	r3, [pc, #548]	; (801f100 <CommandParser+0x2a8>)
 801eedc:	2201      	movs	r2, #1
 801eede:	705a      	strb	r2, [r3, #1]
	if ((hprot.conn_stat == CONN_CLOSE)
 801eee0:	78db      	ldrb	r3, [r3, #3]
 801eee2:	b2db      	uxtb	r3, r3
 801eee4:	2b04      	cmp	r3, #4
 801eee6:	d02e      	beq.n	801ef46 <CommandParser+0xee>
	} else if (hprot.confirm_status == CONF_NEED07) {
 801eee8:	4b85      	ldr	r3, [pc, #532]	; (801f100 <CommandParser+0x2a8>)
 801eeea:	789b      	ldrb	r3, [r3, #2]
 801eeec:	2b00      	cmp	r3, #0
 801eeee:	d035      	beq.n	801ef5c <CommandParser+0x104>
	} else if (hprot.confirm_status == CONF_NEED08) {
 801eef0:	4b83      	ldr	r3, [pc, #524]	; (801f100 <CommandParser+0x2a8>)
 801eef2:	789b      	ldrb	r3, [r3, #2]
 801eef4:	b2db      	uxtb	r3, r3
 801eef6:	2b01      	cmp	r3, #1
 801eef8:	d038      	beq.n	801ef6c <CommandParser+0x114>
	} else if (hprot.confirm_status == CONF_NEED07_AGAIN) {
 801eefa:	4b81      	ldr	r3, [pc, #516]	; (801f100 <CommandParser+0x2a8>)
 801eefc:	789b      	ldrb	r3, [r3, #2]
 801eefe:	b2db      	uxtb	r3, r3
 801ef00:	2b04      	cmp	r3, #4
 801ef02:	d03b      	beq.n	801ef7c <CommandParser+0x124>
		if (xQueuePeek(tcp_client_queue,&parc,0) != pdPASS) {
 801ef04:	2301      	movs	r3, #1
 801ef06:	2200      	movs	r2, #0
 801ef08:	4669      	mov	r1, sp
 801ef0a:	487e      	ldr	r0, [pc, #504]	; (801f104 <CommandParser+0x2ac>)
 801ef0c:	6800      	ldr	r0, [r0, #0]
 801ef0e:	f7f4 fe43 	bl	8013b98 <xQueueGenericReceive>
 801ef12:	2801      	cmp	r0, #1
 801ef14:	d13a      	bne.n	801ef8c <CommandParser+0x134>
			if (hprot.conn_stat == CONN_OK) {
 801ef16:	4b7a      	ldr	r3, [pc, #488]	; (801f100 <CommandParser+0x2a8>)
 801ef18:	78db      	ldrb	r3, [r3, #3]
 801ef1a:	b2db      	uxtb	r3, r3
 801ef1c:	2b02      	cmp	r3, #2
 801ef1e:	d040      	beq.n	801efa2 <CommandParser+0x14a>
			} else if (hprot.conn_stat == CONN_NO) {
 801ef20:	4b77      	ldr	r3, [pc, #476]	; (801f100 <CommandParser+0x2a8>)
 801ef22:	78db      	ldrb	r3, [r3, #3]
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	d053      	beq.n	801efd0 <CommandParser+0x178>
			} else if (hprot.conn_stat == CONN_AGAIN) {
 801ef28:	4b75      	ldr	r3, [pc, #468]	; (801f100 <CommandParser+0x2a8>)
 801ef2a:	78db      	ldrb	r3, [r3, #3]
 801ef2c:	b2db      	uxtb	r3, r3
 801ef2e:	2b03      	cmp	r3, #3
 801ef30:	d055      	beq.n	801efde <CommandParser+0x186>
				SendTokenMsg(GetNextMaster(&hprot), hprot.own_address);
 801ef32:	4c73      	ldr	r4, [pc, #460]	; (801f100 <CommandParser+0x2a8>)
 801ef34:	4620      	mov	r0, r4
 801ef36:	f7ff ff78 	bl	801ee2a <GetNextMaster>
 801ef3a:	7821      	ldrb	r1, [r4, #0]
 801ef3c:	f7ff fd9c 	bl	801ea78 <SendTokenMsg>
				hprot.token_possession = 0U;
 801ef40:	2300      	movs	r3, #0
 801ef42:	7063      	strb	r3, [r4, #1]
 801ef44:	e02b      	b.n	801ef9e <CommandParser+0x146>
			&& (hprot.confirm_status != CONF_NEED08)) {
 801ef46:	4b6e      	ldr	r3, [pc, #440]	; (801f100 <CommandParser+0x2a8>)
 801ef48:	789b      	ldrb	r3, [r3, #2]
 801ef4a:	b2db      	uxtb	r3, r3
 801ef4c:	4293      	cmp	r3, r2
 801ef4e:	d0cb      	beq.n	801eee8 <CommandParser+0x90>
		SendClosemMsg(hprot.master_address, hprot.own_address);
 801ef50:	4b6b      	ldr	r3, [pc, #428]	; (801f100 <CommandParser+0x2a8>)
 801ef52:	7c98      	ldrb	r0, [r3, #18]
 801ef54:	7819      	ldrb	r1, [r3, #0]
 801ef56:	f7ff fceb 	bl	801e930 <SendClosemMsg>
 801ef5a:	e020      	b.n	801ef9e <CommandParser+0x146>
		SendConfirmMsg(hprot.master_address, hprot.own_address, 0x07, 0x5C);
 801ef5c:	4968      	ldr	r1, [pc, #416]	; (801f100 <CommandParser+0x2a8>)
 801ef5e:	7c88      	ldrb	r0, [r1, #18]
 801ef60:	235c      	movs	r3, #92	; 0x5c
 801ef62:	2207      	movs	r2, #7
 801ef64:	7809      	ldrb	r1, [r1, #0]
 801ef66:	f7ff fd25 	bl	801e9b4 <SendConfirmMsg>
 801ef6a:	e018      	b.n	801ef9e <CommandParser+0x146>
		SendConfirmMsg(hprot.master_address, hprot.own_address, 0x08, 0x5C);
 801ef6c:	4964      	ldr	r1, [pc, #400]	; (801f100 <CommandParser+0x2a8>)
 801ef6e:	7c88      	ldrb	r0, [r1, #18]
 801ef70:	235c      	movs	r3, #92	; 0x5c
 801ef72:	2208      	movs	r2, #8
 801ef74:	7809      	ldrb	r1, [r1, #0]
 801ef76:	f7ff fd1d 	bl	801e9b4 <SendConfirmMsg>
 801ef7a:	e010      	b.n	801ef9e <CommandParser+0x146>
		SendConfirmMsg(hprot.master_address, hprot.own_address, 0x07, 0x7C);
 801ef7c:	4960      	ldr	r1, [pc, #384]	; (801f100 <CommandParser+0x2a8>)
 801ef7e:	7c88      	ldrb	r0, [r1, #18]
 801ef80:	237c      	movs	r3, #124	; 0x7c
 801ef82:	2207      	movs	r2, #7
 801ef84:	7809      	ldrb	r1, [r1, #0]
 801ef86:	f7ff fd15 	bl	801e9b4 <SendConfirmMsg>
 801ef8a:	e008      	b.n	801ef9e <CommandParser+0x146>
			SendTokenMsg(GetNextMaster(&hprot), hprot.own_address);
 801ef8c:	4c5c      	ldr	r4, [pc, #368]	; (801f100 <CommandParser+0x2a8>)
 801ef8e:	4620      	mov	r0, r4
 801ef90:	f7ff ff4b 	bl	801ee2a <GetNextMaster>
 801ef94:	7821      	ldrb	r1, [r4, #0]
 801ef96:	f7ff fd6f 	bl	801ea78 <SendTokenMsg>
			hprot.token_possession = 0U;
 801ef9a:	2300      	movs	r3, #0
 801ef9c:	7063      	strb	r3, [r4, #1]
		return TokenCmdProcessing(&htel);
 801ef9e:	2000      	movs	r0, #0
 801efa0:	e785      	b.n	801eeae <CommandParser+0x56>
				parc.data = NULL;
 801efa2:	2200      	movs	r2, #0
 801efa4:	a902      	add	r1, sp, #8
 801efa6:	f841 2d08 	str.w	r2, [r1, #-8]!
				xQueueReceive(tcp_client_queue, &parc, 0);
 801efaa:	4613      	mov	r3, r2
 801efac:	4855      	ldr	r0, [pc, #340]	; (801f104 <CommandParser+0x2ac>)
 801efae:	6800      	ldr	r0, [r0, #0]
 801efb0:	f7f4 fdf2 	bl	8013b98 <xQueueGenericReceive>
				SendRequestMsg(hprot.master_address, hprot.own_address,
 801efb4:	4952      	ldr	r1, [pc, #328]	; (801f100 <CommandParser+0x2a8>)
 801efb6:	7c88      	ldrb	r0, [r1, #18]
 801efb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801efbc:	9a00      	ldr	r2, [sp, #0]
 801efbe:	7809      	ldrb	r1, [r1, #0]
 801efc0:	f7ff fdbe 	bl	801eb40 <SendRequestMsg>
				if (parc.data != NULL) {
 801efc4:	9800      	ldr	r0, [sp, #0]
 801efc6:	2800      	cmp	r0, #0
 801efc8:	d0e9      	beq.n	801ef9e <CommandParser+0x146>
					vPortFree(parc.data);
 801efca:	f7f4 fa87 	bl	80134dc <vPortFree>
 801efce:	e7e6      	b.n	801ef9e <CommandParser+0x146>
				SendConnectMsg(hprot.master_address, hprot.own_address, 0x6D);
 801efd0:	4b4b      	ldr	r3, [pc, #300]	; (801f100 <CommandParser+0x2a8>)
 801efd2:	7c98      	ldrb	r0, [r3, #18]
 801efd4:	226d      	movs	r2, #109	; 0x6d
 801efd6:	7819      	ldrb	r1, [r3, #0]
 801efd8:	f7ff fe0a 	bl	801ebf0 <SendConnectMsg>
 801efdc:	e7df      	b.n	801ef9e <CommandParser+0x146>
				SendConnectMsg(hprot.master_address, hprot.own_address, 0x5D);
 801efde:	4b48      	ldr	r3, [pc, #288]	; (801f100 <CommandParser+0x2a8>)
 801efe0:	7c98      	ldrb	r0, [r3, #18]
 801efe2:	225d      	movs	r2, #93	; 0x5d
 801efe4:	7819      	ldrb	r1, [r3, #0]
 801efe6:	f7ff fe03 	bl	801ebf0 <SendConnectMsg>
 801efea:	e7d8      	b.n	801ef9e <CommandParser+0x146>
		if (CalculateFCS(buf, 3) != *(buf + 3)) {
 801efec:	2103      	movs	r1, #3
 801efee:	4628      	mov	r0, r5
 801eff0:	f7ff ff0e 	bl	801ee10 <CalculateFCS>
 801eff4:	7923      	ldrb	r3, [r4, #4]
 801eff6:	4298      	cmp	r0, r3
 801eff8:	d001      	beq.n	801effe <CommandParser+0x1a6>
			return FCS_ERR;
 801effa:	2007      	movs	r0, #7
 801effc:	e757      	b.n	801eeae <CommandParser+0x56>
		htel.DA = *buf++;
 801effe:	7861      	ldrb	r1, [r4, #1]
 801f000:	4b3e      	ldr	r3, [pc, #248]	; (801f0fc <CommandParser+0x2a4>)
 801f002:	70d9      	strb	r1, [r3, #3]
		htel.SA = *buf++;
 801f004:	78a0      	ldrb	r0, [r4, #2]
 801f006:	7118      	strb	r0, [r3, #4]
		htel.FC = *buf++;
 801f008:	78e2      	ldrb	r2, [r4, #3]
 801f00a:	715a      	strb	r2, [r3, #5]
		if (htel.FC == 0x20){
 801f00c:	2a20      	cmp	r2, #32
 801f00e:	d005      	beq.n	801f01c <CommandParser+0x1c4>
		if (htel.DA != hprot.own_address) {
 801f010:	4b3b      	ldr	r3, [pc, #236]	; (801f100 <CommandParser+0x2a8>)
 801f012:	781b      	ldrb	r3, [r3, #0]
 801f014:	4299      	cmp	r1, r3
 801f016:	d008      	beq.n	801f02a <CommandParser+0x1d2>
			return NO_ERR;
 801f018:	2000      	movs	r0, #0
 801f01a:	e748      	b.n	801eeae <CommandParser+0x56>
	prot->bus_masters |= (0x01U << new_master);
 801f01c:	4e38      	ldr	r6, [pc, #224]	; (801f100 <CommandParser+0x2a8>)
 801f01e:	6973      	ldr	r3, [r6, #20]
 801f020:	2501      	movs	r5, #1
 801f022:	4085      	lsls	r5, r0
 801f024:	432b      	orrs	r3, r5
 801f026:	6173      	str	r3, [r6, #20]
 801f028:	e7f2      	b.n	801f010 <CommandParser+0x1b8>
		htel.FCS = *buf++;
 801f02a:	7925      	ldrb	r5, [r4, #4]
 801f02c:	4b33      	ldr	r3, [pc, #204]	; (801f0fc <CommandParser+0x2a4>)
 801f02e:	741d      	strb	r5, [r3, #16]
		htel.ED = *buf;
 801f030:	7964      	ldrb	r4, [r4, #5]
 801f032:	745c      	strb	r4, [r3, #17]
		if (skip_first) {
 801f034:	4b34      	ldr	r3, [pc, #208]	; (801f108 <CommandParser+0x2b0>)
 801f036:	781b      	ldrb	r3, [r3, #0]
 801f038:	b91b      	cbnz	r3, 801f042 <CommandParser+0x1ea>
	if (tel->FC == 0x49) {
 801f03a:	2a49      	cmp	r2, #73	; 0x49
 801f03c:	d005      	beq.n	801f04a <CommandParser+0x1f2>
			return NoDataCmdProcessing(&htel);
 801f03e:	2000      	movs	r0, #0
 801f040:	e735      	b.n	801eeae <CommandParser+0x56>
			skip_first = 0;
 801f042:	2000      	movs	r0, #0
 801f044:	4b30      	ldr	r3, [pc, #192]	; (801f108 <CommandParser+0x2b0>)
 801f046:	7018      	strb	r0, [r3, #0]
			return NO_ERR;
 801f048:	e731      	b.n	801eeae <CommandParser+0x56>
		SendNoDataMsg(tel->SA, tel->DA, 0x20);
 801f04a:	2220      	movs	r2, #32
 801f04c:	f7ff fd52 	bl	801eaf4 <SendNoDataMsg>
			return NoDataCmdProcessing(&htel);
 801f050:	2000      	movs	r0, #0
 801f052:	e72c      	b.n	801eeae <CommandParser+0x56>
		if (CalculateFCS(buf, htel.LE) != *(buf + htel.LE)) {
 801f054:	4629      	mov	r1, r5
 801f056:	4630      	mov	r0, r6
 801f058:	f7ff feda 	bl	801ee10 <CalculateFCS>
 801f05c:	5d73      	ldrb	r3, [r6, r5]
 801f05e:	4298      	cmp	r0, r3
 801f060:	d001      	beq.n	801f066 <CommandParser+0x20e>
			return FCS_ERR;
 801f062:	2007      	movs	r0, #7
 801f064:	e723      	b.n	801eeae <CommandParser+0x56>
		htel.DA = *buf++;
 801f066:	7923      	ldrb	r3, [r4, #4]
 801f068:	4a24      	ldr	r2, [pc, #144]	; (801f0fc <CommandParser+0x2a4>)
 801f06a:	70d3      	strb	r3, [r2, #3]
		if ((htel.DA & 0x7F) != hprot.own_address) { /* Broadcast message */
 801f06c:	4a24      	ldr	r2, [pc, #144]	; (801f100 <CommandParser+0x2a8>)
 801f06e:	7812      	ldrb	r2, [r2, #0]
 801f070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801f074:	4293      	cmp	r3, r2
 801f076:	d001      	beq.n	801f07c <CommandParser+0x224>
			return NO_ERR;
 801f078:	2000      	movs	r0, #0
 801f07a:	e718      	b.n	801eeae <CommandParser+0x56>
		htel.SA = *buf++;
 801f07c:	7963      	ldrb	r3, [r4, #5]
 801f07e:	4a1f      	ldr	r2, [pc, #124]	; (801f0fc <CommandParser+0x2a4>)
 801f080:	7113      	strb	r3, [r2, #4]
		htel.FC = *buf++;
 801f082:	79a3      	ldrb	r3, [r4, #6]
 801f084:	7153      	strb	r3, [r2, #5]
		htel.DSAP = *buf++;
 801f086:	79e3      	ldrb	r3, [r4, #7]
 801f088:	7193      	strb	r3, [r2, #6]
		htel.SSAP = *buf++;
 801f08a:	7a23      	ldrb	r3, [r4, #8]
 801f08c:	71d3      	strb	r3, [r2, #7]
		htel.UK1 = *buf++;
 801f08e:	7a63      	ldrb	r3, [r4, #9]
 801f090:	7213      	strb	r3, [r2, #8]
		if (htel.UK1 == 0xC0) {
 801f092:	2bc0      	cmp	r3, #192	; 0xc0
 801f094:	d019      	beq.n	801f0ca <CommandParser+0x272>
		} else if (htel.UK1 == 0xB0) {
 801f096:	2bb0      	cmp	r3, #176	; 0xb0
 801f098:	d038      	beq.n	801f10c <CommandParser+0x2b4>
		} else if (htel.UK1 == 0xD0) {
 801f09a:	2bd0      	cmp	r3, #208	; 0xd0
 801f09c:	d040      	beq.n	801f120 <CommandParser+0x2c8>
		} else if (htel.UK1 == 0x05) {
 801f09e:	2b05      	cmp	r3, #5
 801f0a0:	d054      	beq.n	801f14c <CommandParser+0x2f4>
			htel.RN = *buf++;
 801f0a2:	f104 060b 	add.w	r6, r4, #11
 801f0a6:	7aa3      	ldrb	r3, [r4, #10]
 801f0a8:	4c14      	ldr	r4, [pc, #80]	; (801f0fc <CommandParser+0x2a4>)
 801f0aa:	72a3      	strb	r3, [r4, #10]
			uint pdu_size = htel.LE - 7;
 801f0ac:	3d07      	subs	r5, #7
			htel.PDU = (uint8_t*) pvPortMalloc(pdu_size);
 801f0ae:	4628      	mov	r0, r5
 801f0b0:	f7f4 f990 	bl	80133d4 <pvPortMalloc>
 801f0b4:	60e0      	str	r0, [r4, #12]
			memcpy(htel.PDU, buf, pdu_size);
 801f0b6:	462a      	mov	r2, r5
 801f0b8:	4631      	mov	r1, r6
 801f0ba:	f001 fc1c 	bl	80208f6 <memcpy>
			buf += pdu_size;
 801f0be:	1973      	adds	r3, r6, r5
			htel.FCS = *buf++;
 801f0c0:	5d72      	ldrb	r2, [r6, r5]
 801f0c2:	7422      	strb	r2, [r4, #16]
			htel.ED = *buf;
 801f0c4:	785b      	ldrb	r3, [r3, #1]
 801f0c6:	7463      	strb	r3, [r4, #17]
 801f0c8:	e004      	b.n	801f0d4 <CommandParser+0x27c>
			htel.FCS = *buf++;
 801f0ca:	7aa2      	ldrb	r2, [r4, #10]
 801f0cc:	4b0b      	ldr	r3, [pc, #44]	; (801f0fc <CommandParser+0x2a4>)
 801f0ce:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 801f0d0:	7ae2      	ldrb	r2, [r4, #11]
 801f0d2:	745a      	strb	r2, [r3, #17]
	if (tel->UK1 == 0xD0) {
 801f0d4:	4b09      	ldr	r3, [pc, #36]	; (801f0fc <CommandParser+0x2a4>)
 801f0d6:	7a1b      	ldrb	r3, [r3, #8]
 801f0d8:	2bd0      	cmp	r3, #208	; 0xd0
 801f0da:	d03f      	beq.n	801f15c <CommandParser+0x304>
	} else if (tel->UK1 == 0x05) {
 801f0dc:	2b05      	cmp	r3, #5
 801f0de:	d061      	beq.n	801f1a4 <CommandParser+0x34c>
	} else if (tel->UK1 == 0xB0) {
 801f0e0:	2bb0      	cmp	r3, #176	; 0xb0
 801f0e2:	d067      	beq.n	801f1b4 <CommandParser+0x35c>
	} else if (tel->UK1 == 0xC0) {
 801f0e4:	2bc0      	cmp	r3, #192	; 0xc0
 801f0e6:	d041      	beq.n	801f16c <CommandParser+0x314>
	} else if ((tel->FC == 0x7C) || (tel->FC == 0x5C)) {
 801f0e8:	4b04      	ldr	r3, [pc, #16]	; (801f0fc <CommandParser+0x2a4>)
 801f0ea:	795b      	ldrb	r3, [r3, #5]
 801f0ec:	2b7c      	cmp	r3, #124	; 0x7c
 801f0ee:	d064      	beq.n	801f1ba <CommandParser+0x362>
 801f0f0:	2b5c      	cmp	r3, #92	; 0x5c
 801f0f2:	d062      	beq.n	801f1ba <CommandParser+0x362>
		SendAckMsg();
 801f0f4:	f7ff fc06 	bl	801e904 <SendAckMsg>
 801f0f8:	e038      	b.n	801f16c <CommandParser+0x314>
 801f0fa:	bf00      	nop
 801f0fc:	20010c6c 	.word	0x20010c6c
 801f100:	20018ee8 	.word	0x20018ee8
 801f104:	20018f40 	.word	0x20018f40
 801f108:	2000003c 	.word	0x2000003c
			htel.UK2 = *buf++;
 801f10c:	7aa2      	ldrb	r2, [r4, #10]
 801f10e:	4b3e      	ldr	r3, [pc, #248]	; (801f208 <CommandParser+0x3b0>)
 801f110:	725a      	strb	r2, [r3, #9]
			htel.RN = *buf++;
 801f112:	7ae2      	ldrb	r2, [r4, #11]
 801f114:	729a      	strb	r2, [r3, #10]
			htel.FCS = *buf++;
 801f116:	7b22      	ldrb	r2, [r4, #12]
 801f118:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 801f11a:	7b62      	ldrb	r2, [r4, #13]
 801f11c:	745a      	strb	r2, [r3, #17]
 801f11e:	e7d9      	b.n	801f0d4 <CommandParser+0x27c>
			htel.UK2 = *buf++;
 801f120:	7aa3      	ldrb	r3, [r4, #10]
 801f122:	4e39      	ldr	r6, [pc, #228]	; (801f208 <CommandParser+0x3b0>)
 801f124:	7273      	strb	r3, [r6, #9]
			htel.RN = *buf++;
 801f126:	f104 070c 	add.w	r7, r4, #12
 801f12a:	7ae3      	ldrb	r3, [r4, #11]
 801f12c:	72b3      	strb	r3, [r6, #10]
			uint pdu_size = htel.LE - 8;
 801f12e:	3d08      	subs	r5, #8
			htel.PDU = (uint8_t*) pvPortMalloc(pdu_size);
 801f130:	4628      	mov	r0, r5
 801f132:	f7f4 f94f 	bl	80133d4 <pvPortMalloc>
 801f136:	60f0      	str	r0, [r6, #12]
			memcpy(htel.PDU, buf, pdu_size);
 801f138:	462a      	mov	r2, r5
 801f13a:	4639      	mov	r1, r7
 801f13c:	f001 fbdb 	bl	80208f6 <memcpy>
			buf += pdu_size;
 801f140:	197b      	adds	r3, r7, r5
			htel.FCS = *buf++;
 801f142:	5d7a      	ldrb	r2, [r7, r5]
 801f144:	7432      	strb	r2, [r6, #16]
			htel.ED = *buf;
 801f146:	785b      	ldrb	r3, [r3, #1]
 801f148:	7473      	strb	r3, [r6, #17]
 801f14a:	e7c3      	b.n	801f0d4 <CommandParser+0x27c>
			htel.UK2 = *buf++;
 801f14c:	7aa2      	ldrb	r2, [r4, #10]
 801f14e:	4b2e      	ldr	r3, [pc, #184]	; (801f208 <CommandParser+0x3b0>)
 801f150:	725a      	strb	r2, [r3, #9]
			htel.FCS = *buf++;
 801f152:	7ae2      	ldrb	r2, [r4, #11]
 801f154:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 801f156:	7b22      	ldrb	r2, [r4, #12]
 801f158:	745a      	strb	r2, [r3, #17]
 801f15a:	e7bb      	b.n	801f0d4 <CommandParser+0x27c>
		if (tel->FC == 0x6C) {
 801f15c:	4b2a      	ldr	r3, [pc, #168]	; (801f208 <CommandParser+0x3b0>)
 801f15e:	795b      	ldrb	r3, [r3, #5]
 801f160:	2b6c      	cmp	r3, #108	; 0x6c
 801f162:	d00d      	beq.n	801f180 <CommandParser+0x328>
		if (tel->FC == 0x5C) {
 801f164:	4b28      	ldr	r3, [pc, #160]	; (801f208 <CommandParser+0x3b0>)
 801f166:	795b      	ldrb	r3, [r3, #5]
 801f168:	2b5c      	cmp	r3, #92	; 0x5c
 801f16a:	d012      	beq.n	801f192 <CommandParser+0x33a>
	if (tel->PDU != NULL) {
 801f16c:	4b26      	ldr	r3, [pc, #152]	; (801f208 <CommandParser+0x3b0>)
 801f16e:	68d8      	ldr	r0, [r3, #12]
 801f170:	b120      	cbz	r0, 801f17c <CommandParser+0x324>
		vPortFree(tel->PDU);
 801f172:	f7f4 f9b3 	bl	80134dc <vPortFree>
		tel->PDU = NULL;
 801f176:	2200      	movs	r2, #0
 801f178:	4b23      	ldr	r3, [pc, #140]	; (801f208 <CommandParser+0x3b0>)
 801f17a:	60da      	str	r2, [r3, #12]
		return VarDataCmdProcessing(&htel);
 801f17c:	2000      	movs	r0, #0
 801f17e:	e696      	b.n	801eeae <CommandParser+0x56>
			hprot.confirm_status = CONF_NEED07;
 801f180:	4b22      	ldr	r3, [pc, #136]	; (801f20c <CommandParser+0x3b4>)
 801f182:	2200      	movs	r2, #0
 801f184:	709a      	strb	r2, [r3, #2]
			hprot.master_SAP = tel->SSAP;
 801f186:	4a20      	ldr	r2, [pc, #128]	; (801f208 <CommandParser+0x3b0>)
 801f188:	79d2      	ldrb	r2, [r2, #7]
 801f18a:	745a      	strb	r2, [r3, #17]
			SendAckMsg();
 801f18c:	f7ff fbba 	bl	801e904 <SendAckMsg>
 801f190:	e7e8      	b.n	801f164 <CommandParser+0x30c>
			hprot.confirm_status = CONF_NEED07_AGAIN;
 801f192:	4b1e      	ldr	r3, [pc, #120]	; (801f20c <CommandParser+0x3b4>)
 801f194:	2204      	movs	r2, #4
 801f196:	709a      	strb	r2, [r3, #2]
			hprot.master_SAP = tel->SSAP;
 801f198:	4a1b      	ldr	r2, [pc, #108]	; (801f208 <CommandParser+0x3b0>)
 801f19a:	79d2      	ldrb	r2, [r2, #7]
 801f19c:	745a      	strb	r2, [r3, #17]
			SendAckMsg();
 801f19e:	f7ff fbb1 	bl	801e904 <SendAckMsg>
 801f1a2:	e7e3      	b.n	801f16c <CommandParser+0x314>
		hprot.confirm_status = CONF_OK;
 801f1a4:	4b19      	ldr	r3, [pc, #100]	; (801f20c <CommandParser+0x3b4>)
 801f1a6:	2203      	movs	r2, #3
 801f1a8:	709a      	strb	r2, [r3, #2]
		hprot.conn_stat = CONN_OK;
 801f1aa:	2202      	movs	r2, #2
 801f1ac:	70da      	strb	r2, [r3, #3]
		SendAckMsg();
 801f1ae:	f7ff fba9 	bl	801e904 <SendAckMsg>
 801f1b2:	e7db      	b.n	801f16c <CommandParser+0x314>
		SendAckMsg();
 801f1b4:	f7ff fba6 	bl	801e904 <SendAckMsg>
 801f1b8:	e7d8      	b.n	801f16c <CommandParser+0x314>
		parc.len = tel->LE - 7;
 801f1ba:	4c13      	ldr	r4, [pc, #76]	; (801f208 <CommandParser+0x3b0>)
 801f1bc:	7860      	ldrb	r0, [r4, #1]
 801f1be:	3807      	subs	r0, #7
 801f1c0:	b280      	uxth	r0, r0
 801f1c2:	f8ad 0004 	strh.w	r0, [sp, #4]
		parc.data = pvPortMalloc(parc.len);
 801f1c6:	f7f4 f905 	bl	80133d4 <pvPortMalloc>
 801f1ca:	9000      	str	r0, [sp, #0]
		memcpy(parc.data, tel->PDU, parc.len);
 801f1cc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801f1d0:	68e1      	ldr	r1, [r4, #12]
 801f1d2:	f001 fb90 	bl	80208f6 <memcpy>
		xQueueSend(protocol_queue, &parc, 0);
 801f1d6:	2300      	movs	r3, #0
 801f1d8:	461a      	mov	r2, r3
 801f1da:	4669      	mov	r1, sp
 801f1dc:	480c      	ldr	r0, [pc, #48]	; (801f210 <CommandParser+0x3b8>)
 801f1de:	6800      	ldr	r0, [r0, #0]
 801f1e0:	f7f4 fb22 	bl	8013828 <xQueueGenericSend>
		hprot.confirm_status = CONF_NEED08;
 801f1e4:	2201      	movs	r2, #1
 801f1e6:	4b09      	ldr	r3, [pc, #36]	; (801f20c <CommandParser+0x3b4>)
 801f1e8:	709a      	strb	r2, [r3, #2]
		SendAckMsg();
 801f1ea:	f7ff fb8b 	bl	801e904 <SendAckMsg>
 801f1ee:	e7bd      	b.n	801f16c <CommandParser+0x314>
			SendTokenMsg(GetNextMaster(&hprot), hprot.own_address);
 801f1f0:	4c06      	ldr	r4, [pc, #24]	; (801f20c <CommandParser+0x3b4>)
 801f1f2:	4620      	mov	r0, r4
 801f1f4:	f7ff fe19 	bl	801ee2a <GetNextMaster>
 801f1f8:	7821      	ldrb	r1, [r4, #0]
 801f1fa:	f7ff fc3d 	bl	801ea78 <SendTokenMsg>
			hprot.token_possession = 0U;
 801f1fe:	2000      	movs	r0, #0
 801f200:	7060      	strb	r0, [r4, #1]
 801f202:	e654      	b.n	801eeae <CommandParser+0x56>
	return NO_ERR;
 801f204:	2000      	movs	r0, #0
 801f206:	4770      	bx	lr
 801f208:	20010c6c 	.word	0x20010c6c
 801f20c:	20018ee8 	.word	0x20018ee8
 801f210:	20018f00 	.word	0x20018f00

0801f214 <CheckMaster>:

uint8_t CheckMaster(profibus_MPI_t *prot, uint8_t master) {
	if (master == prot->own_address) {
 801f214:	7803      	ldrb	r3, [r0, #0]
 801f216:	428b      	cmp	r3, r1
 801f218:	d009      	beq.n	801f22e <CheckMaster+0x1a>
		return 0U;
	}
	if (((0x01U << master) & prot->bus_masters) != 0x00) {
 801f21a:	2301      	movs	r3, #1
 801f21c:	fa03 f101 	lsl.w	r1, r3, r1
 801f220:	6943      	ldr	r3, [r0, #20]
 801f222:	4219      	tst	r1, r3
 801f224:	d101      	bne.n	801f22a <CheckMaster+0x16>
		return 1U;
	} else {
		return 0U;
 801f226:	2000      	movs	r0, #0
	}
}
 801f228:	4770      	bx	lr
		return 1U;
 801f22a:	2001      	movs	r0, #1
 801f22c:	4770      	bx	lr
		return 0U;
 801f22e:	2000      	movs	r0, #0
 801f230:	4770      	bx	lr
	...

0801f234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801f234:	b500      	push	{lr}
 801f236:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801f238:	2200      	movs	r2, #0
 801f23a:	9200      	str	r2, [sp, #0]
 801f23c:	4b0d      	ldr	r3, [pc, #52]	; (801f274 <HAL_MspInit+0x40>)
 801f23e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801f240:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 801f244:	6459      	str	r1, [r3, #68]	; 0x44
 801f246:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801f248:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 801f24c:	9100      	str	r1, [sp, #0]
 801f24e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801f250:	9201      	str	r2, [sp, #4]
 801f252:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801f254:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 801f258:	6419      	str	r1, [r3, #64]	; 0x40
 801f25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f25c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f260:	9301      	str	r3, [sp, #4]
 801f262:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801f264:	210f      	movs	r1, #15
 801f266:	f06f 0001 	mvn.w	r0, #1
 801f26a:	f7f1 f8e3 	bl	8010434 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801f26e:	b003      	add	sp, #12
 801f270:	f85d fb04 	ldr.w	pc, [sp], #4
 801f274:	40023800 	.word	0x40023800

0801f278 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801f278:	b510      	push	{r4, lr}
 801f27a:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 801f27c:	2200      	movs	r2, #0
 801f27e:	4601      	mov	r1, r0
 801f280:	2019      	movs	r0, #25
 801f282:	f7f1 f8d7 	bl	8010434 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 801f286:	2019      	movs	r0, #25
 801f288:	f7f1 f906 	bl	8010498 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 801f28c:	2400      	movs	r4, #0
 801f28e:	9401      	str	r4, [sp, #4]
 801f290:	4b14      	ldr	r3, [pc, #80]	; (801f2e4 <HAL_InitTick+0x6c>)
 801f292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f294:	f042 0201 	orr.w	r2, r2, #1
 801f298:	645a      	str	r2, [r3, #68]	; 0x44
 801f29a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f29c:	f003 0301 	and.w	r3, r3, #1
 801f2a0:	9301      	str	r3, [sp, #4]
 801f2a2:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801f2a4:	a902      	add	r1, sp, #8
 801f2a6:	a803      	add	r0, sp, #12
 801f2a8:	f7f2 fd3e 	bl	8011d28 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 801f2ac:	f7f2 fd2c 	bl	8011d08 <HAL_RCC_GetPCLK2Freq>
 801f2b0:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801f2b2:	480d      	ldr	r0, [pc, #52]	; (801f2e8 <HAL_InitTick+0x70>)
 801f2b4:	fba0 2303 	umull	r2, r3, r0, r3
 801f2b8:	0c9b      	lsrs	r3, r3, #18
 801f2ba:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 801f2bc:	480b      	ldr	r0, [pc, #44]	; (801f2ec <HAL_InitTick+0x74>)
 801f2be:	4a0c      	ldr	r2, [pc, #48]	; (801f2f0 <HAL_InitTick+0x78>)
 801f2c0:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 801f2c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 801f2c6:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801f2c8:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 801f2ca:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801f2cc:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 801f2ce:	f7f2 ff79 	bl	80121c4 <HAL_TIM_Base_Init>
 801f2d2:	b110      	cbz	r0, 801f2da <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 801f2d4:	2001      	movs	r0, #1
}
 801f2d6:	b008      	add	sp, #32
 801f2d8:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 801f2da:	4804      	ldr	r0, [pc, #16]	; (801f2ec <HAL_InitTick+0x74>)
 801f2dc:	f7f2 fd7d 	bl	8011dda <HAL_TIM_Base_Start_IT>
 801f2e0:	e7f9      	b.n	801f2d6 <HAL_InitTick+0x5e>
 801f2e2:	bf00      	nop
 801f2e4:	40023800 	.word	0x40023800
 801f2e8:	431bde83 	.word	0x431bde83
 801f2ec:	20018f04 	.word	0x20018f04
 801f2f0:	40010000 	.word	0x40010000

0801f2f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801f2f4:	4770      	bx	lr

0801f2f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801f2f6:	e7fe      	b.n	801f2f6 <HardFault_Handler>

0801f2f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801f2f8:	e7fe      	b.n	801f2f8 <MemManage_Handler>

0801f2fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801f2fa:	e7fe      	b.n	801f2fa <BusFault_Handler>

0801f2fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801f2fc:	e7fe      	b.n	801f2fc <UsageFault_Handler>

0801f2fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801f2fe:	4770      	bx	lr

0801f300 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 801f300:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 801f302:	4802      	ldr	r0, [pc, #8]	; (801f30c <TIM1_UP_TIM10_IRQHandler+0xc>)
 801f304:	f7f2 fe13 	bl	8011f2e <HAL_TIM_IRQHandler>
 801f308:	bd08      	pop	{r3, pc}
 801f30a:	bf00      	nop
 801f30c:	20018f04 	.word	0x20018f04

0801f310 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 801f310:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801f312:	4802      	ldr	r0, [pc, #8]	; (801f31c <USART1_IRQHandler+0xc>)
 801f314:	f7f3 fb6c 	bl	80129f0 <HAL_UART_IRQHandler>
 801f318:	bd08      	pop	{r3, pc}
 801f31a:	bf00      	nop
 801f31c:	200190e0 	.word	0x200190e0

0801f320 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 801f320:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 801f322:	4802      	ldr	r0, [pc, #8]	; (801f32c <TIM8_UP_TIM13_IRQHandler+0xc>)
 801f324:	f7f2 fe03 	bl	8011f2e <HAL_TIM_IRQHandler>
 801f328:	bd08      	pop	{r3, pc}
 801f32a:	bf00      	nop
 801f32c:	20018f44 	.word	0x20018f44

0801f330 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 801f330:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 801f332:	4802      	ldr	r0, [pc, #8]	; (801f33c <DMA1_Stream7_IRQHandler+0xc>)
 801f334:	f7f1 f9ee 	bl	8010714 <HAL_DMA_IRQHandler>
 801f338:	bd08      	pop	{r3, pc}
 801f33a:	bf00      	nop
 801f33c:	20019120 	.word	0x20019120

0801f340 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 801f340:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 801f342:	4802      	ldr	r0, [pc, #8]	; (801f34c <UART5_IRQHandler+0xc>)
 801f344:	f7f3 fb54 	bl	80129f0 <HAL_UART_IRQHandler>
 801f348:	bd08      	pop	{r3, pc}
 801f34a:	bf00      	nop
 801f34c:	200190a0 	.word	0x200190a0

0801f350 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 801f350:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 801f352:	4802      	ldr	r0, [pc, #8]	; (801f35c <TIM7_IRQHandler+0xc>)
 801f354:	f7f2 fdeb 	bl	8011f2e <HAL_TIM_IRQHandler>
 801f358:	bd08      	pop	{r3, pc}
 801f35a:	bf00      	nop
 801f35c:	20018f80 	.word	0x20018f80

0801f360 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 801f360:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 801f362:	4802      	ldr	r0, [pc, #8]	; (801f36c <ETH_IRQHandler+0xc>)
 801f364:	f7f1 fd20 	bl	8010da8 <HAL_ETH_IRQHandler>
 801f368:	bd08      	pop	{r3, pc}
 801f36a:	bf00      	nop
 801f36c:	200175dc 	.word	0x200175dc

0801f370 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 801f370:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 801f372:	4802      	ldr	r0, [pc, #8]	; (801f37c <DMA2_Stream7_IRQHandler+0xc>)
 801f374:	f7f1 f9ce 	bl	8010714 <HAL_DMA_IRQHandler>
 801f378:	bd08      	pop	{r3, pc}
 801f37a:	bf00      	nop
 801f37c:	20019040 	.word	0x20019040

0801f380 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

int _read(int file, char *ptr, int len) {
 801f380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f382:	460d      	mov	r5, r1
 801f384:	4617      	mov	r7, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801f386:	2400      	movs	r4, #0
 801f388:	e005      	b.n	801f396 <_read+0x16>
		*ptr++ = __io_getchar();
 801f38a:	1c6e      	adds	r6, r5, #1
 801f38c:	f3af 8000 	nop.w
 801f390:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801f392:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 801f394:	4635      	mov	r5, r6
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801f396:	42bc      	cmp	r4, r7
 801f398:	dbf7      	blt.n	801f38a <_read+0xa>
	}

	return len;
}
 801f39a:	4638      	mov	r0, r7
 801f39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f39e <_write>:

int _write(int file, char *ptr, int len) {
 801f39e:	b430      	push	{r4, r5}
	int i = 0;
	for (i = 0; i < len; i++)
 801f3a0:	2400      	movs	r4, #0
 801f3a2:	e00a      	b.n	801f3ba <_write+0x1c>
  __ASM volatile ("nop");
 801f3a4:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 801f3a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801f3aa:	681b      	ldr	r3, [r3, #0]
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	d0f9      	beq.n	801f3a4 <_write+0x6>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 801f3b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801f3b4:	7019      	strb	r1, [r3, #0]
 801f3b6:	3401      	adds	r4, #1
		ITM_SendChar((*ptr++));
 801f3b8:	4629      	mov	r1, r5
	for (i = 0; i < len; i++)
 801f3ba:	4294      	cmp	r4, r2
 801f3bc:	da10      	bge.n	801f3e0 <_write+0x42>
		ITM_SendChar((*ptr++));
 801f3be:	1c4d      	adds	r5, r1, #1
 801f3c0:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801f3c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801f3c6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 801f3ca:	f013 0f01 	tst.w	r3, #1
 801f3ce:	d0f2      	beq.n	801f3b6 <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 801f3d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801f3d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801f3d8:	f013 0f01 	tst.w	r3, #1
 801f3dc:	d1e3      	bne.n	801f3a6 <_write+0x8>
 801f3de:	e7ea      	b.n	801f3b6 <_write+0x18>
	return len;
}
 801f3e0:	4610      	mov	r0, r2
 801f3e2:	bc30      	pop	{r4, r5}
 801f3e4:	4770      	bx	lr
	...

0801f3e8 <_sbrk>:

caddr_t _sbrk(int incr) {
 801f3e8:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801f3ea:	4a0b      	ldr	r2, [pc, #44]	; (801f418 <_sbrk+0x30>)
 801f3ec:	6812      	ldr	r2, [r2, #0]
 801f3ee:	b142      	cbz	r2, 801f402 <_sbrk+0x1a>
		heap_end = &end;

	prev_heap_end = heap_end;
 801f3f0:	4a09      	ldr	r2, [pc, #36]	; (801f418 <_sbrk+0x30>)
 801f3f2:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr) {
 801f3f4:	4403      	add	r3, r0
 801f3f6:	466a      	mov	r2, sp
 801f3f8:	4293      	cmp	r3, r2
 801f3fa:	d806      	bhi.n	801f40a <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 801f3fc:	4a06      	ldr	r2, [pc, #24]	; (801f418 <_sbrk+0x30>)
 801f3fe:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 801f400:	4770      	bx	lr
		heap_end = &end;
 801f402:	4906      	ldr	r1, [pc, #24]	; (801f41c <_sbrk+0x34>)
 801f404:	4a04      	ldr	r2, [pc, #16]	; (801f418 <_sbrk+0x30>)
 801f406:	6011      	str	r1, [r2, #0]
 801f408:	e7f2      	b.n	801f3f0 <_sbrk+0x8>
		errno = ENOMEM;
 801f40a:	220c      	movs	r2, #12
 801f40c:	4b04      	ldr	r3, [pc, #16]	; (801f420 <_sbrk+0x38>)
 801f40e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 801f410:	f04f 30ff 	mov.w	r0, #4294967295
 801f414:	4770      	bx	lr
 801f416:	bf00      	nop
 801f418:	20010c80 	.word	0x20010c80
 801f41c:	20019180 	.word	0x20019180
 801f420:	20015cdc 	.word	0x20015cdc

0801f424 <_close>:

int _close(int file) {
	return -1;
}
 801f424:	f04f 30ff 	mov.w	r0, #4294967295
 801f428:	4770      	bx	lr

0801f42a <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 801f42a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801f42e:	604b      	str	r3, [r1, #4]
	return 0;
}
 801f430:	2000      	movs	r0, #0
 801f432:	4770      	bx	lr

0801f434 <_isatty>:

int _isatty(int file) {
	return 1;
}
 801f434:	2001      	movs	r0, #1
 801f436:	4770      	bx	lr

0801f438 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 801f438:	2000      	movs	r0, #0
 801f43a:	4770      	bx	lr

0801f43c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801f43c:	490f      	ldr	r1, [pc, #60]	; (801f47c <SystemInit+0x40>)
 801f43e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 801f442:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801f446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801f44a:	4b0d      	ldr	r3, [pc, #52]	; (801f480 <SystemInit+0x44>)
 801f44c:	681a      	ldr	r2, [r3, #0]
 801f44e:	f042 0201 	orr.w	r2, r2, #1
 801f452:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801f454:	2000      	movs	r0, #0
 801f456:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801f458:	681a      	ldr	r2, [r3, #0]
 801f45a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 801f45e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801f462:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801f464:	4a07      	ldr	r2, [pc, #28]	; (801f484 <SystemInit+0x48>)
 801f466:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801f468:	681a      	ldr	r2, [r3, #0]
 801f46a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801f46e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801f470:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801f472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801f476:	608b      	str	r3, [r1, #8]
 801f478:	4770      	bx	lr
 801f47a:	bf00      	nop
 801f47c:	e000ed00 	.word	0xe000ed00
 801f480:	40023800 	.word	0x40023800
 801f484:	24003010 	.word	0x24003010

0801f488 <Client_thread>:
#include "tcp_client.h"

xQueueHandle tcp_client_queue;
extern volatile int reboot_flag;

void Client_thread(void *arg) {
 801f488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f48c:	b094      	sub	sp, #80	; 0x50
 801f48e:	4605      	mov	r5, r0
	struct netconn *newconn;
	newconn = (struct netconn *) arg;
	u16_t buflen;
	char *buf;
	struct ip4_addr ClientAddr;
	uint8_t data_COTP[] = { 0x03, 0x00, 0x00, 0x16, 0x11, 0xD0, 0x00, 0x01,
 801f490:	4cca      	ldr	r4, [pc, #808]	; (801f7bc <Client_thread+0x334>)
 801f492:	ae0a      	add	r6, sp, #40	; 0x28
 801f494:	4627      	mov	r7, r4
 801f496:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801f498:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801f49a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f49e:	f846 0b04 	str.w	r0, [r6], #4
 801f4a2:	8031      	strh	r1, [r6, #0]
			0x00, 0x01, 0x00, 0xC1, 0x02, 0x01, 0x00, 0xC2, 0x02, 0x01, 0x02,
			0xC0, 0x01, 0x0A };
	uint8_t data_Connect[] = { 0x32, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x08,
 801f4a4:	ae05      	add	r6, sp, #20
 801f4a6:	3418      	adds	r4, #24
 801f4a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f4aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801f4ac:	6823      	ldr	r3, [r4, #0]
 801f4ae:	6033      	str	r3, [r6, #0]
			0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
			0xF0 };

	ClientAddr.addr = 0;
 801f4b0:	2600      	movs	r6, #0
 801f4b2:	9610      	str	r6, [sp, #64]	; 0x40
	uint16_t ClientPort = 0;
 801f4b4:	aa14      	add	r2, sp, #80	; 0x50
 801f4b6:	f822 6d3e 	strh.w	r6, [r2, #-62]!
	netconn_getaddr(newconn, &ClientAddr, &ClientPort, 0);
 801f4ba:	4633      	mov	r3, r6
 801f4bc:	a910      	add	r1, sp, #64	; 0x40
 801f4be:	4628      	mov	r0, r5
 801f4c0:	f7f5 fbf6 	bl	8014cb0 <netconn_getaddr>
	task_num++;
 801f4c4:	4fbe      	ldr	r7, [pc, #760]	; (801f7c0 <Client_thread+0x338>)
 801f4c6:	783c      	ldrb	r4, [r7, #0]
 801f4c8:	3401      	adds	r4, #1
 801f4ca:	b2e4      	uxtb	r4, r4
 801f4cc:	703c      	strb	r4, [r7, #0]
	inst_num = task_num;

	LogText(INFO_HIDE, SUB_SYS_TCP, LOG_LEV_INFO, "\r\n");
 801f4ce:	4bbd      	ldr	r3, [pc, #756]	; (801f7c4 <Client_thread+0x33c>)
 801f4d0:	2203      	movs	r2, #3
 801f4d2:	4611      	mov	r1, r2
 801f4d4:	4630      	mov	r0, r6
 801f4d6:	f7fe ffdf 	bl	801e498 <LogText__>
	LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_INFO, "New TCP-server created on port ");
 801f4da:	4bbb      	ldr	r3, [pc, #748]	; (801f7c8 <Client_thread+0x340>)
 801f4dc:	2203      	movs	r2, #3
 801f4de:	4611      	mov	r1, r2
 801f4e0:	2001      	movs	r0, #1
 801f4e2:	f7fe ffd9 	bl	801e498 <LogText__>
	LogNum(INFO_HIDE, SUB_SYS_TCP, LOG_LEV_INFO, ClientPort, 10);
 801f4e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f4ea:	f04f 090a 	mov.w	r9, #10
 801f4ee:	f8cd 9000 	str.w	r9, [sp]
 801f4f2:	2203      	movs	r2, #3
 801f4f4:	4611      	mov	r1, r2
 801f4f6:	4630      	mov	r0, r6
 801f4f8:	f7ff f822 	bl	801e540 <LogNum__>
	LogText(INFO_HIDE, SUB_SYS_TCP, LOG_LEV_INFO, ".\r\n");
 801f4fc:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 801f7f4 <Client_thread+0x36c>
 801f500:	4643      	mov	r3, r8
 801f502:	2203      	movs	r2, #3
 801f504:	4611      	mov	r1, r2
 801f506:	4630      	mov	r0, r6
 801f508:	f7fe ffc6 	bl	801e498 <LogText__>
	LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_INFO, "Number of task: ");
 801f50c:	4baf      	ldr	r3, [pc, #700]	; (801f7cc <Client_thread+0x344>)
 801f50e:	2203      	movs	r2, #3
 801f510:	4611      	mov	r1, r2
 801f512:	2001      	movs	r0, #1
 801f514:	f7fe ffc0 	bl	801e498 <LogText__>
	LogNum(INFO_HIDE, SUB_SYS_TCP, LOG_LEV_INFO, task_num, 10);
 801f518:	783b      	ldrb	r3, [r7, #0]
 801f51a:	f8cd 9000 	str.w	r9, [sp]
 801f51e:	2203      	movs	r2, #3
 801f520:	4611      	mov	r1, r2
 801f522:	4630      	mov	r0, r6
 801f524:	f7ff f80c 	bl	801e540 <LogNum__>
	LogText(INFO_HIDE, SUB_SYS_TCP, LOG_LEV_INFO, ".\r\n");
 801f528:	4643      	mov	r3, r8
 801f52a:	2203      	movs	r2, #3
 801f52c:	4611      	mov	r1, r2
 801f52e:	4630      	mov	r0, r6
 801f530:	f7fe ffb2 	bl	801e498 <LogText__>

	osDelay(1);
 801f534:	2001      	movs	r0, #1
 801f536:	f7f3 fb43 	bl	8012bc0 <osDelay>
	uint8_t conn_flag = 0;
 801f53a:	46b2      	mov	sl, r6
 801f53c:	e124      	b.n	801f788 <Client_thread+0x300>
	for (;;) {
		err = netconn_recv(newconn, &inbuf);
		while (err == ERR_OK) {
			do {
				netbuf_data(inbuf, (void**) &buf, &buflen);
				if (inst_num != 1 && buf[17] == 0x04) reboot_flag = 1;
 801f53e:	2201      	movs	r2, #1
 801f540:	4ba3      	ldr	r3, [pc, #652]	; (801f7d0 <Client_thread+0x348>)
 801f542:	601a      	str	r2, [r3, #0]
 801f544:	e092      	b.n	801f66c <Client_thread+0x1e4>
				if (buf[7] == 0x32 && inst_num == 1) {
 801f546:	2c01      	cmp	r4, #1
 801f548:	f040 8095 	bne.w	801f676 <Client_thread+0x1ee>
					parcel_t parc;
					parc.len = buflen - 7;
 801f54c:	f8bd 004a 	ldrh.w	r0, [sp, #74]	; 0x4a
 801f550:	3807      	subs	r0, #7
 801f552:	b280      	uxth	r0, r0
 801f554:	f8ad 000c 	strh.w	r0, [sp, #12]
					parc.data = pvPortMalloc(parc.len);
 801f558:	f7f3 ff3c 	bl	80133d4 <pvPortMalloc>
 801f55c:	9002      	str	r0, [sp, #8]
					memcpy(parc.data, buf + 7, parc.len);
 801f55e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801f562:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f564:	3107      	adds	r1, #7
 801f566:	f001 f9c6 	bl	80208f6 <memcpy>
					xQueueSend(tcp_client_queue, &parc, 0);
 801f56a:	2300      	movs	r3, #0
 801f56c:	461a      	mov	r2, r3
 801f56e:	a902      	add	r1, sp, #8
 801f570:	4898      	ldr	r0, [pc, #608]	; (801f7d4 <Client_thread+0x34c>)
 801f572:	6800      	ldr	r0, [r0, #0]
 801f574:	f7f4 f958 	bl	8013828 <xQueueGenericSend>
					xQueueReceive(protocol_queue, &parc, portMAX_DELAY);
 801f578:	2300      	movs	r3, #0
 801f57a:	f04f 32ff 	mov.w	r2, #4294967295
 801f57e:	a902      	add	r1, sp, #8
 801f580:	4895      	ldr	r0, [pc, #596]	; (801f7d8 <Client_thread+0x350>)
 801f582:	6800      	ldr	r0, [r0, #0]
 801f584:	f7f4 fb08 	bl	8013b98 <xQueueGenericReceive>
					conn_flag = 1;
					uint8_t * answer;
					answer = (uint8_t*) pvPortMalloc(parc.len + 7);
 801f588:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 801f58c:	3007      	adds	r0, #7
 801f58e:	f7f3 ff21 	bl	80133d4 <pvPortMalloc>
 801f592:	4606      	mov	r6, r0
					answer[0] = 0x03;
 801f594:	2303      	movs	r3, #3
 801f596:	7003      	strb	r3, [r0, #0]
					answer[1] = 0x00;
 801f598:	2700      	movs	r7, #0
 801f59a:	7047      	strb	r7, [r0, #1]
					answer[2] = 0x00;
 801f59c:	7087      	strb	r7, [r0, #2]
					answer[3] = parc.len + 7;
 801f59e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801f5a2:	3307      	adds	r3, #7
 801f5a4:	70c3      	strb	r3, [r0, #3]
					answer[4] = 0x02;
 801f5a6:	2302      	movs	r3, #2
 801f5a8:	7103      	strb	r3, [r0, #4]
					answer[5] = 0xF0;
 801f5aa:	23f0      	movs	r3, #240	; 0xf0
 801f5ac:	7143      	strb	r3, [r0, #5]
					answer[6] = 0x80;
 801f5ae:	2380      	movs	r3, #128	; 0x80
 801f5b0:	7183      	strb	r3, [r0, #6]
					memcpy(answer + 7, parc.data, parc.len);
 801f5b2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801f5b6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801f5ba:	4641      	mov	r1, r8
 801f5bc:	3007      	adds	r0, #7
 801f5be:	f001 f99a 	bl	80208f6 <memcpy>
					vPortFree(parc.data);
 801f5c2:	4640      	mov	r0, r8
 801f5c4:	f7f3 ff8a 	bl	80134dc <vPortFree>
					netconn_write(newconn, (const unsigned char* )(answer),
 801f5c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801f5cc:	9700      	str	r7, [sp, #0]
 801f5ce:	2301      	movs	r3, #1
 801f5d0:	3207      	adds	r2, #7
 801f5d2:	4631      	mov	r1, r6
 801f5d4:	4628      	mov	r0, r5
 801f5d6:	f7f5 fc95 	bl	8014f04 <netconn_write_partly>
							parc.len + 7, NETCONN_COPY);
					vPortFree(answer);
 801f5da:	4630      	mov	r0, r6
 801f5dc:	f7f3 ff7e 	bl	80134dc <vPortFree>
					conn_flag = 1;
 801f5e0:	46a2      	mov	sl, r4
				if (buf[7] == 0x32 && inst_num == 1) {
 801f5e2:	e031      	b.n	801f648 <Client_thread+0x1c0>
				} else if (buf[7] == 0x32 && buf[17] == 0xF0 && inst_num != 1 ) {
 801f5e4:	7c5a      	ldrb	r2, [r3, #17]
 801f5e6:	2af0      	cmp	r2, #240	; 0xf0
 801f5e8:	d147      	bne.n	801f67a <Client_thread+0x1f2>
 801f5ea:	2c01      	cmp	r4, #1
 801f5ec:	d045      	beq.n	801f67a <Client_thread+0x1f2>
					uint8_t * answer;
					size_t data_size = sizeof(data_Connect);
					answer = (uint8_t*) pvPortMalloc(data_size + 7);
 801f5ee:	201b      	movs	r0, #27
 801f5f0:	f7f3 fef0 	bl	80133d4 <pvPortMalloc>
 801f5f4:	4607      	mov	r7, r0
					answer[0] = 0x03;
 801f5f6:	2303      	movs	r3, #3
 801f5f8:	7003      	strb	r3, [r0, #0]
					answer[1] = 0x00;
 801f5fa:	2600      	movs	r6, #0
 801f5fc:	7046      	strb	r6, [r0, #1]
					answer[2] = 0x00;
 801f5fe:	7086      	strb	r6, [r0, #2]
					answer[3] = data_size + 7;
 801f600:	f04f 091b 	mov.w	r9, #27
 801f604:	f880 9003 	strb.w	r9, [r0, #3]
					answer[4] = 0x02;
 801f608:	2302      	movs	r3, #2
 801f60a:	7103      	strb	r3, [r0, #4]
					answer[5] = 0xF0;
 801f60c:	23f0      	movs	r3, #240	; 0xf0
 801f60e:	7143      	strb	r3, [r0, #5]
					answer[6] = 0x80;
 801f610:	2380      	movs	r3, #128	; 0x80
 801f612:	7183      	strb	r3, [r0, #6]
					memcpy(answer + 7, data_Connect, data_size);
 801f614:	f10d 0e14 	add.w	lr, sp, #20
 801f618:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801f61c:	f8c7 0007 	str.w	r0, [r7, #7]
 801f620:	f8c7 100b 	str.w	r1, [r7, #11]
 801f624:	f8c7 200f 	str.w	r2, [r7, #15]
 801f628:	f8c7 3013 	str.w	r3, [r7, #19]
 801f62c:	f8de 0000 	ldr.w	r0, [lr]
 801f630:	f8c7 0017 	str.w	r0, [r7, #23]
					netconn_write(newconn, (const unsigned char* )(answer),
 801f634:	9600      	str	r6, [sp, #0]
 801f636:	2301      	movs	r3, #1
 801f638:	464a      	mov	r2, r9
 801f63a:	4639      	mov	r1, r7
 801f63c:	4628      	mov	r0, r5
 801f63e:	f7f5 fc61 	bl	8014f04 <netconn_write_partly>
							data_size + 7, NETCONN_COPY);
					vPortFree(answer);
 801f642:	4638      	mov	r0, r7
 801f644:	f7f3 ff4a 	bl	80134dc <vPortFree>
					if (hprot.conn_stat == CONN_CLOSED) {
						hprot.conn_stat = CONN_AGAIN;
					}
					if (inst_num == 1) hprot.req_num = 0;
				}
			} while (netbuf_next(inbuf) >= 0);
 801f648:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f64a:	f7f6 fd2f 	bl	80160ac <netbuf_next>
 801f64e:	2800      	cmp	r0, #0
 801f650:	db40      	blt.n	801f6d4 <Client_thread+0x24c>
				netbuf_data(inbuf, (void**) &buf, &buflen);
 801f652:	f10d 024a 	add.w	r2, sp, #74	; 0x4a
 801f656:	a911      	add	r1, sp, #68	; 0x44
 801f658:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f65a:	f7f6 fcf1 	bl	8016040 <netbuf_data>
				if (inst_num != 1 && buf[17] == 0x04) reboot_flag = 1;
 801f65e:	2c01      	cmp	r4, #1
 801f660:	d004      	beq.n	801f66c <Client_thread+0x1e4>
 801f662:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f664:	7c5b      	ldrb	r3, [r3, #17]
 801f666:	2b04      	cmp	r3, #4
 801f668:	f43f af69 	beq.w	801f53e <Client_thread+0xb6>
				if (buf[7] == 0x32 && inst_num == 1) {
 801f66c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f66e:	79da      	ldrb	r2, [r3, #7]
 801f670:	2a32      	cmp	r2, #50	; 0x32
 801f672:	f43f af68 	beq.w	801f546 <Client_thread+0xbe>
				} else if (buf[7] == 0x32 && buf[17] == 0xF0 && inst_num != 1 ) {
 801f676:	2a32      	cmp	r2, #50	; 0x32
 801f678:	d0b4      	beq.n	801f5e4 <Client_thread+0x15c>
				} else if ((buf[0] == 0x03) && (buf[1] == 0x00)
 801f67a:	781a      	ldrb	r2, [r3, #0]
 801f67c:	2a03      	cmp	r2, #3
 801f67e:	d1e3      	bne.n	801f648 <Client_thread+0x1c0>
 801f680:	785a      	ldrb	r2, [r3, #1]
 801f682:	2a00      	cmp	r2, #0
 801f684:	d1e0      	bne.n	801f648 <Client_thread+0x1c0>
						&& (buf[2] == 0x00) && (buf[3] == 0x16)
 801f686:	789a      	ldrb	r2, [r3, #2]
 801f688:	2a00      	cmp	r2, #0
 801f68a:	d1dd      	bne.n	801f648 <Client_thread+0x1c0>
 801f68c:	78da      	ldrb	r2, [r3, #3]
 801f68e:	2a16      	cmp	r2, #22
 801f690:	d1da      	bne.n	801f648 <Client_thread+0x1c0>
						&& (CheckMaster(&hprot, buf[21]))) {
 801f692:	7d59      	ldrb	r1, [r3, #21]
 801f694:	4851      	ldr	r0, [pc, #324]	; (801f7dc <Client_thread+0x354>)
 801f696:	f7ff fdbd 	bl	801f214 <CheckMaster>
 801f69a:	2800      	cmp	r0, #0
 801f69c:	d0d4      	beq.n	801f648 <Client_thread+0x1c0>
					data_COTP[18] = buf[21];
 801f69e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f6a0:	7d5b      	ldrb	r3, [r3, #21]
 801f6a2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
					hprot.master_address = buf[21];
 801f6a6:	4f4d      	ldr	r7, [pc, #308]	; (801f7dc <Client_thread+0x354>)
 801f6a8:	74bb      	strb	r3, [r7, #18]
					netconn_write(newconn, (const unsigned char* )(data_COTP),
 801f6aa:	2300      	movs	r3, #0
 801f6ac:	9300      	str	r3, [sp, #0]
 801f6ae:	2301      	movs	r3, #1
 801f6b0:	2216      	movs	r2, #22
 801f6b2:	a90a      	add	r1, sp, #40	; 0x28
 801f6b4:	4628      	mov	r0, r5
 801f6b6:	f7f5 fc25 	bl	8014f04 <netconn_write_partly>
					if (hprot.conn_stat == CONN_CLOSED) {
 801f6ba:	78fb      	ldrb	r3, [r7, #3]
 801f6bc:	b2db      	uxtb	r3, r3
 801f6be:	2b05      	cmp	r3, #5
 801f6c0:	d005      	beq.n	801f6ce <Client_thread+0x246>
					if (inst_num == 1) hprot.req_num = 0;
 801f6c2:	2c01      	cmp	r4, #1
 801f6c4:	d1c0      	bne.n	801f648 <Client_thread+0x1c0>
 801f6c6:	2200      	movs	r2, #0
 801f6c8:	4b44      	ldr	r3, [pc, #272]	; (801f7dc <Client_thread+0x354>)
 801f6ca:	74da      	strb	r2, [r3, #19]
 801f6cc:	e7bc      	b.n	801f648 <Client_thread+0x1c0>
						hprot.conn_stat = CONN_AGAIN;
 801f6ce:	2203      	movs	r2, #3
 801f6d0:	70fa      	strb	r2, [r7, #3]
 801f6d2:	e7f6      	b.n	801f6c2 <Client_thread+0x23a>
			netbuf_delete(inbuf);
 801f6d4:	af14      	add	r7, sp, #80	; 0x50
 801f6d6:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 801f6da:	f7f6 fca1 	bl	8016020 <netbuf_delete>
			err = netconn_recv(newconn, &inbuf);
 801f6de:	4639      	mov	r1, r7
 801f6e0:	4628      	mov	r0, r5
 801f6e2:	f7f5 fbbd 	bl	8014e60 <netconn_recv>
		while (err == ERR_OK) {
 801f6e6:	2800      	cmp	r0, #0
 801f6e8:	d0b3      	beq.n	801f652 <Client_thread+0x1ca>
		} /* while (err == ERR_OK) */
		if (err == ERR_CLSD) {
 801f6ea:	f110 0f0f 	cmn.w	r0, #15
 801f6ee:	d050      	beq.n	801f792 <Client_thread+0x30a>
				conn_flag = 0;
			}
			LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_INFO,
					"Connection closed by client.\r\n");
		}
		task_num--;
 801f6f0:	4a33      	ldr	r2, [pc, #204]	; (801f7c0 <Client_thread+0x338>)
 801f6f2:	7813      	ldrb	r3, [r2, #0]
 801f6f4:	3b01      	subs	r3, #1
 801f6f6:	7013      	strb	r3, [r2, #0]
		netconn_close(newconn);
 801f6f8:	4628      	mov	r0, r5
 801f6fa:	f7f5 fc57 	bl	8014fac <netconn_close>
		LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_INFO,
 801f6fe:	4b38      	ldr	r3, [pc, #224]	; (801f7e0 <Client_thread+0x358>)
 801f700:	2203      	movs	r2, #3
 801f702:	4611      	mov	r1, r2
 801f704:	2001      	movs	r0, #1
 801f706:	f7fe fec7 	bl	801e498 <LogText__>
				"Connection deleted on port: ");
		LogNum(INFO_HIDE, SUB_SYS_TCP, LOG_LEV_INFO, ClientPort, 10);
 801f70a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f70e:	270a      	movs	r7, #10
 801f710:	9700      	str	r7, [sp, #0]
 801f712:	2203      	movs	r2, #3
 801f714:	4611      	mov	r1, r2
 801f716:	2000      	movs	r0, #0
 801f718:	f7fe ff12 	bl	801e540 <LogNum__>
		LogText(INFO_HIDE, SUB_SYS_TCP, LOG_LEV_INFO, ".\r\n");
 801f71c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 801f7f4 <Client_thread+0x36c>
 801f720:	4643      	mov	r3, r8
 801f722:	2203      	movs	r2, #3
 801f724:	4611      	mov	r1, r2
 801f726:	2000      	movs	r0, #0
 801f728:	f7fe feb6 	bl	801e498 <LogText__>
		netconn_delete(newconn);
 801f72c:	4628      	mov	r0, r5
 801f72e:	f7f5 faa5 	bl	8014c7c <netconn_delete>
		LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_INFO,
 801f732:	4b2c      	ldr	r3, [pc, #176]	; (801f7e4 <Client_thread+0x35c>)
 801f734:	2203      	movs	r2, #3
 801f736:	4611      	mov	r1, r2
 801f738:	2001      	movs	r0, #1
 801f73a:	f7fe fead 	bl	801e498 <LogText__>
				"TCP-server task deleted. Task number: ");
		LogNum(INFO_HIDE, SUB_SYS_TCP, LOG_LEV_INFO, inst_num, 10);
 801f73e:	9700      	str	r7, [sp, #0]
 801f740:	4623      	mov	r3, r4
 801f742:	2203      	movs	r2, #3
 801f744:	4611      	mov	r1, r2
 801f746:	2000      	movs	r0, #0
 801f748:	f7fe fefa 	bl	801e540 <LogNum__>
		LogText(INFO_HIDE, SUB_SYS_TCP, LOG_LEV_INFO, ".\r\n");
 801f74c:	4643      	mov	r3, r8
 801f74e:	2203      	movs	r2, #3
 801f750:	4611      	mov	r1, r2
 801f752:	2000      	movs	r0, #0
 801f754:	f7fe fea0 	bl	801e498 <LogText__>
		LogText(INFO_SHOW, SUB_SYS_MEMORY, LOG_LEV_INFO, "Free heap size: ");
 801f758:	4b23      	ldr	r3, [pc, #140]	; (801f7e8 <Client_thread+0x360>)
 801f75a:	2203      	movs	r2, #3
 801f75c:	2100      	movs	r1, #0
 801f75e:	2001      	movs	r0, #1
 801f760:	f7fe fe9a 	bl	801e498 <LogText__>
		LogNum(INFO_HIDE, SUB_SYS_MEMORY, LOG_LEV_INFO, xPortGetFreeHeapSize(),
 801f764:	f7f3 fef2 	bl	801354c <xPortGetFreeHeapSize>
 801f768:	9700      	str	r7, [sp, #0]
 801f76a:	4603      	mov	r3, r0
 801f76c:	2203      	movs	r2, #3
 801f76e:	2100      	movs	r1, #0
 801f770:	4608      	mov	r0, r1
 801f772:	f7fe fee5 	bl	801e540 <LogNum__>
				10);
		LogText(INFO_HIDE, SUB_SYS_MEMORY, LOG_LEV_INFO, " bytes.\r\n");
 801f776:	4b1d      	ldr	r3, [pc, #116]	; (801f7ec <Client_thread+0x364>)
 801f778:	2203      	movs	r2, #3
 801f77a:	2100      	movs	r1, #0
 801f77c:	4608      	mov	r0, r1
 801f77e:	f7fe fe8b 	bl	801e498 <LogText__>
		vTaskDelete(NULL);
 801f782:	2000      	movs	r0, #0
 801f784:	f7f4 fd50 	bl	8014228 <vTaskDelete>
		err = netconn_recv(newconn, &inbuf);
 801f788:	a913      	add	r1, sp, #76	; 0x4c
 801f78a:	4628      	mov	r0, r5
 801f78c:	f7f5 fb68 	bl	8014e60 <netconn_recv>
		while (err == ERR_OK) {
 801f790:	e7a9      	b.n	801f6e6 <Client_thread+0x25e>
			if ((hprot.conn_stat == CONN_OK) && (conn_flag == 1)) {
 801f792:	4b12      	ldr	r3, [pc, #72]	; (801f7dc <Client_thread+0x354>)
 801f794:	78db      	ldrb	r3, [r3, #3]
 801f796:	b2db      	uxtb	r3, r3
 801f798:	2b02      	cmp	r3, #2
 801f79a:	d006      	beq.n	801f7aa <Client_thread+0x322>
			LogText(INFO_SHOW, SUB_SYS_TCP, LOG_LEV_INFO,
 801f79c:	4b14      	ldr	r3, [pc, #80]	; (801f7f0 <Client_thread+0x368>)
 801f79e:	2203      	movs	r2, #3
 801f7a0:	4611      	mov	r1, r2
 801f7a2:	2001      	movs	r0, #1
 801f7a4:	f7fe fe78 	bl	801e498 <LogText__>
 801f7a8:	e7a2      	b.n	801f6f0 <Client_thread+0x268>
			if ((hprot.conn_stat == CONN_OK) && (conn_flag == 1)) {
 801f7aa:	f1ba 0f01 	cmp.w	sl, #1
 801f7ae:	d1f5      	bne.n	801f79c <Client_thread+0x314>
				hprot.conn_stat = CONN_CLOSE;
 801f7b0:	2204      	movs	r2, #4
 801f7b2:	4b0a      	ldr	r3, [pc, #40]	; (801f7dc <Client_thread+0x354>)
 801f7b4:	70da      	strb	r2, [r3, #3]
				conn_flag = 0;
 801f7b6:	f04f 0a00 	mov.w	sl, #0
 801f7ba:	e7ef      	b.n	801f79c <Client_thread+0x314>
 801f7bc:	08021408 	.word	0x08021408
 801f7c0:	20010c84 	.word	0x20010c84
 801f7c4:	08026f00 	.word	0x08026f00
 801f7c8:	08027158 	.word	0x08027158
 801f7cc:	08027178 	.word	0x08027178
 801f7d0:	20010f88 	.word	0x20010f88
 801f7d4:	20018f40 	.word	0x20018f40
 801f7d8:	20018f00 	.word	0x20018f00
 801f7dc:	20018ee8 	.word	0x20018ee8
 801f7e0:	080271ac 	.word	0x080271ac
 801f7e4:	080271cc 	.word	0x080271cc
 801f7e8:	080271f4 	.word	0x080271f4
 801f7ec:	08027208 	.word	0x08027208
 801f7f0:	0802718c 	.word	0x0802718c
 801f7f4:	0802713c 	.word	0x0802713c

0801f7f8 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 801f7f8:	b500      	push	{lr}
 801f7fa:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801f7fc:	2300      	movs	r3, #0
 801f7fe:	9300      	str	r3, [sp, #0]
 801f800:	9301      	str	r3, [sp, #4]

  htim7.Instance = TIM7;
 801f802:	480e      	ldr	r0, [pc, #56]	; (801f83c <MX_TIM7_Init+0x44>)
 801f804:	4a0e      	ldr	r2, [pc, #56]	; (801f840 <MX_TIM7_Init+0x48>)
 801f806:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 801f808:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801f80a:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 840;
 801f80c:	f44f 7352 	mov.w	r3, #840	; 0x348
 801f810:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801f812:	f7f2 fcd7 	bl	80121c4 <HAL_TIM_Base_Init>
 801f816:	b950      	cbnz	r0, 801f82e <MX_TIM7_Init+0x36>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801f818:	2300      	movs	r3, #0
 801f81a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801f81c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801f81e:	4669      	mov	r1, sp
 801f820:	4806      	ldr	r0, [pc, #24]	; (801f83c <MX_TIM7_Init+0x44>)
 801f822:	f7f2 fce8 	bl	80121f6 <HAL_TIMEx_MasterConfigSynchronization>
 801f826:	b928      	cbnz	r0, 801f834 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
  }

}
 801f828:	b003      	add	sp, #12
 801f82a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801f82e:	f7fe ffb7 	bl	801e7a0 <Error_Handler>
 801f832:	e7f1      	b.n	801f818 <MX_TIM7_Init+0x20>
    Error_Handler();
 801f834:	f7fe ffb4 	bl	801e7a0 <Error_Handler>
}
 801f838:	e7f6      	b.n	801f828 <MX_TIM7_Init+0x30>
 801f83a:	bf00      	nop
 801f83c:	20018f80 	.word	0x20018f80
 801f840:	40001400 	.word	0x40001400

0801f844 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 801f844:	b500      	push	{lr}
 801f846:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801f848:	2300      	movs	r3, #0
 801f84a:	9302      	str	r3, [sp, #8]
 801f84c:	9303      	str	r3, [sp, #12]
 801f84e:	9304      	str	r3, [sp, #16]
 801f850:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801f852:	9300      	str	r3, [sp, #0]
 801f854:	9301      	str	r3, [sp, #4]

  htim8.Instance = TIM8;
 801f856:	4815      	ldr	r0, [pc, #84]	; (801f8ac <MX_TIM8_Init+0x68>)
 801f858:	4a15      	ldr	r2, [pc, #84]	; (801f8b0 <MX_TIM8_Init+0x6c>)
 801f85a:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 0;
 801f85c:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801f85e:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 27720;
 801f860:	f646 4248 	movw	r2, #27720	; 0x6c48
 801f864:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801f866:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 801f868:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801f86a:	f7f2 fcab 	bl	80121c4 <HAL_TIM_Base_Init>
 801f86e:	b998      	cbnz	r0, 801f898 <MX_TIM8_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801f870:	a906      	add	r1, sp, #24
 801f872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801f876:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801f87a:	480c      	ldr	r0, [pc, #48]	; (801f8ac <MX_TIM8_Init+0x68>)
 801f87c:	f7f2 facf 	bl	8011e1e <HAL_TIM_ConfigClockSource>
 801f880:	b968      	cbnz	r0, 801f89e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801f882:	2300      	movs	r3, #0
 801f884:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801f886:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801f888:	4669      	mov	r1, sp
 801f88a:	4808      	ldr	r0, [pc, #32]	; (801f8ac <MX_TIM8_Init+0x68>)
 801f88c:	f7f2 fcb3 	bl	80121f6 <HAL_TIMEx_MasterConfigSynchronization>
 801f890:	b940      	cbnz	r0, 801f8a4 <MX_TIM8_Init+0x60>
  {
    Error_Handler();
  }

}
 801f892:	b007      	add	sp, #28
 801f894:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801f898:	f7fe ff82 	bl	801e7a0 <Error_Handler>
 801f89c:	e7e8      	b.n	801f870 <MX_TIM8_Init+0x2c>
    Error_Handler();
 801f89e:	f7fe ff7f 	bl	801e7a0 <Error_Handler>
 801f8a2:	e7ee      	b.n	801f882 <MX_TIM8_Init+0x3e>
    Error_Handler();
 801f8a4:	f7fe ff7c 	bl	801e7a0 <Error_Handler>
}
 801f8a8:	e7f3      	b.n	801f892 <MX_TIM8_Init+0x4e>
 801f8aa:	bf00      	nop
 801f8ac:	20018f44 	.word	0x20018f44
 801f8b0:	40010400 	.word	0x40010400

0801f8b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801f8b4:	b500      	push	{lr}
 801f8b6:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM7)
 801f8b8:	6803      	ldr	r3, [r0, #0]
 801f8ba:	4a18      	ldr	r2, [pc, #96]	; (801f91c <HAL_TIM_Base_MspInit+0x68>)
 801f8bc:	4293      	cmp	r3, r2
 801f8be:	d005      	beq.n	801f8cc <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 801f8c0:	4a17      	ldr	r2, [pc, #92]	; (801f920 <HAL_TIM_Base_MspInit+0x6c>)
 801f8c2:	4293      	cmp	r3, r2
 801f8c4:	d016      	beq.n	801f8f4 <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 801f8c6:	b003      	add	sp, #12
 801f8c8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM7_CLK_ENABLE();
 801f8cc:	2200      	movs	r2, #0
 801f8ce:	9200      	str	r2, [sp, #0]
 801f8d0:	4b14      	ldr	r3, [pc, #80]	; (801f924 <HAL_TIM_Base_MspInit+0x70>)
 801f8d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801f8d4:	f041 0120 	orr.w	r1, r1, #32
 801f8d8:	6419      	str	r1, [r3, #64]	; 0x40
 801f8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8dc:	f003 0320 	and.w	r3, r3, #32
 801f8e0:	9300      	str	r3, [sp, #0]
 801f8e2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 801f8e4:	2105      	movs	r1, #5
 801f8e6:	2037      	movs	r0, #55	; 0x37
 801f8e8:	f7f0 fda4 	bl	8010434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801f8ec:	2037      	movs	r0, #55	; 0x37
 801f8ee:	f7f0 fdd3 	bl	8010498 <HAL_NVIC_EnableIRQ>
 801f8f2:	e7e8      	b.n	801f8c6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801f8f4:	2200      	movs	r2, #0
 801f8f6:	9201      	str	r2, [sp, #4]
 801f8f8:	4b0a      	ldr	r3, [pc, #40]	; (801f924 <HAL_TIM_Base_MspInit+0x70>)
 801f8fa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801f8fc:	f041 0102 	orr.w	r1, r1, #2
 801f900:	6459      	str	r1, [r3, #68]	; 0x44
 801f902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f904:	f003 0302 	and.w	r3, r3, #2
 801f908:	9301      	str	r3, [sp, #4]
 801f90a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 801f90c:	2105      	movs	r1, #5
 801f90e:	202c      	movs	r0, #44	; 0x2c
 801f910:	f7f0 fd90 	bl	8010434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 801f914:	202c      	movs	r0, #44	; 0x2c
 801f916:	f7f0 fdbf 	bl	8010498 <HAL_NVIC_EnableIRQ>
}
 801f91a:	e7d4      	b.n	801f8c6 <HAL_TIM_Base_MspInit+0x12>
 801f91c:	40001400 	.word	0x40001400
 801f920:	40010400 	.word	0x40010400
 801f924:	40023800 	.word	0x40023800

0801f928 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 801f928:	b470      	push	{r4, r5, r6}
	int div = 1;
 801f92a:	2301      	movs	r3, #1
	while (d/div >= base)
 801f92c:	e001      	b.n	801f932 <ts_itoa+0xa>
		div *= base;
 801f92e:	fb02 f303 	mul.w	r3, r2, r3
	while (d/div >= base)
 801f932:	fbb1 f4f3 	udiv	r4, r1, r3
 801f936:	4294      	cmp	r4, r2
 801f938:	d2f9      	bcs.n	801f92e <ts_itoa+0x6>
 801f93a:	e004      	b.n	801f946 <ts_itoa+0x1e>
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 801f93c:	6805      	ldr	r5, [r0, #0]
 801f93e:	1c6e      	adds	r6, r5, #1
 801f940:	6006      	str	r6, [r0, #0]
 801f942:	3430      	adds	r4, #48	; 0x30
 801f944:	702c      	strb	r4, [r5, #0]
	while (div != 0)
 801f946:	b16b      	cbz	r3, 801f964 <ts_itoa+0x3c>
		int num = d/div;
 801f948:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 801f94c:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 801f950:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 801f954:	2c09      	cmp	r4, #9
 801f956:	ddf1      	ble.n	801f93c <ts_itoa+0x14>
			*((*buf)++) = (num-10) + 'A';
 801f958:	6805      	ldr	r5, [r0, #0]
 801f95a:	1c6e      	adds	r6, r5, #1
 801f95c:	6006      	str	r6, [r0, #0]
 801f95e:	3437      	adds	r4, #55	; 0x37
 801f960:	702c      	strb	r4, [r5, #0]
 801f962:	e7f0      	b.n	801f946 <ts_itoa+0x1e>
	}
}
 801f964:	bc70      	pop	{r4, r5, r6}
 801f966:	4770      	bx	lr

0801f968 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 801f968:	b530      	push	{r4, r5, lr}
 801f96a:	b083      	sub	sp, #12
 801f96c:	9001      	str	r0, [sp, #4]
 801f96e:	460c      	mov	r4, r1
 801f970:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 801f972:	4605      	mov	r5, r0
	while(*fmt)
 801f974:	e03e      	b.n	801f9f4 <ts_formatstring+0x8c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 801f976:	7863      	ldrb	r3, [r4, #1]
 801f978:	2b64      	cmp	r3, #100	; 0x64
 801f97a:	d01c      	beq.n	801f9b6 <ts_formatstring+0x4e>
 801f97c:	d90d      	bls.n	801f99a <ts_formatstring+0x32>
 801f97e:	2b73      	cmp	r3, #115	; 0x73
 801f980:	d04a      	beq.n	801fa18 <ts_formatstring+0xb0>
 801f982:	d916      	bls.n	801f9b2 <ts_formatstring+0x4a>
 801f984:	2b75      	cmp	r3, #117	; 0x75
 801f986:	d121      	bne.n	801f9cc <ts_formatstring+0x64>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 801f988:	9b00      	ldr	r3, [sp, #0]
 801f98a:	1d1a      	adds	r2, r3, #4
 801f98c:	9200      	str	r2, [sp, #0]
 801f98e:	220a      	movs	r2, #10
 801f990:	6819      	ldr	r1, [r3, #0]
 801f992:	a801      	add	r0, sp, #4
 801f994:	f7ff ffc8 	bl	801f928 <ts_itoa>
				break;
 801f998:	e02b      	b.n	801f9f2 <ts_formatstring+0x8a>
			switch (*(++fmt))
 801f99a:	2b58      	cmp	r3, #88	; 0x58
 801f99c:	d018      	beq.n	801f9d0 <ts_formatstring+0x68>
 801f99e:	2b63      	cmp	r3, #99	; 0x63
 801f9a0:	d01f      	beq.n	801f9e2 <ts_formatstring+0x7a>
 801f9a2:	2b25      	cmp	r3, #37	; 0x25
 801f9a4:	d125      	bne.n	801f9f2 <ts_formatstring+0x8a>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 801f9a6:	9b01      	ldr	r3, [sp, #4]
 801f9a8:	1c5a      	adds	r2, r3, #1
 801f9aa:	9201      	str	r2, [sp, #4]
 801f9ac:	2225      	movs	r2, #37	; 0x25
 801f9ae:	701a      	strb	r2, [r3, #0]
				  break;
 801f9b0:	e01f      	b.n	801f9f2 <ts_formatstring+0x8a>
			switch (*(++fmt))
 801f9b2:	2b69      	cmp	r3, #105	; 0x69
 801f9b4:	d11d      	bne.n	801f9f2 <ts_formatstring+0x8a>
					signed int val = va_arg(va, signed int);
 801f9b6:	9b00      	ldr	r3, [sp, #0]
 801f9b8:	1d1a      	adds	r2, r3, #4
 801f9ba:	9200      	str	r2, [sp, #0]
 801f9bc:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 801f9be:	2900      	cmp	r1, #0
 801f9c0:	db23      	blt.n	801fa0a <ts_formatstring+0xa2>
					ts_itoa(&buf, val, 10);
 801f9c2:	220a      	movs	r2, #10
 801f9c4:	a801      	add	r0, sp, #4
 801f9c6:	f7ff ffaf 	bl	801f928 <ts_itoa>
				break;
 801f9ca:	e012      	b.n	801f9f2 <ts_formatstring+0x8a>
			switch (*(++fmt))
 801f9cc:	2b78      	cmp	r3, #120	; 0x78
 801f9ce:	d110      	bne.n	801f9f2 <ts_formatstring+0x8a>
					ts_itoa(&buf, va_arg(va, int), 16);
 801f9d0:	9b00      	ldr	r3, [sp, #0]
 801f9d2:	1d1a      	adds	r2, r3, #4
 801f9d4:	9200      	str	r2, [sp, #0]
 801f9d6:	2210      	movs	r2, #16
 801f9d8:	6819      	ldr	r1, [r3, #0]
 801f9da:	a801      	add	r0, sp, #4
 801f9dc:	f7ff ffa4 	bl	801f928 <ts_itoa>
				break;
 801f9e0:	e007      	b.n	801f9f2 <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 801f9e2:	9b01      	ldr	r3, [sp, #4]
 801f9e4:	1c5a      	adds	r2, r3, #1
 801f9e6:	9201      	str	r2, [sp, #4]
 801f9e8:	9a00      	ldr	r2, [sp, #0]
 801f9ea:	1d11      	adds	r1, r2, #4
 801f9ec:	9100      	str	r1, [sp, #0]
 801f9ee:	6812      	ldr	r2, [r2, #0]
 801f9f0:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 801f9f2:	3402      	adds	r4, #2
	while(*fmt)
 801f9f4:	7823      	ldrb	r3, [r4, #0]
 801f9f6:	b1f3      	cbz	r3, 801fa36 <ts_formatstring+0xce>
		if (*fmt == '%')
 801f9f8:	2b25      	cmp	r3, #37	; 0x25
 801f9fa:	d0bc      	beq.n	801f976 <ts_formatstring+0xe>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 801f9fc:	9b01      	ldr	r3, [sp, #4]
 801f9fe:	1c5a      	adds	r2, r3, #1
 801fa00:	9201      	str	r2, [sp, #4]
 801fa02:	7822      	ldrb	r2, [r4, #0]
 801fa04:	701a      	strb	r2, [r3, #0]
 801fa06:	3401      	adds	r4, #1
 801fa08:	e7f4      	b.n	801f9f4 <ts_formatstring+0x8c>
						val *= -1;
 801fa0a:	4249      	negs	r1, r1
						*buf++ = '-';
 801fa0c:	9b01      	ldr	r3, [sp, #4]
 801fa0e:	1c5a      	adds	r2, r3, #1
 801fa10:	9201      	str	r2, [sp, #4]
 801fa12:	222d      	movs	r2, #45	; 0x2d
 801fa14:	701a      	strb	r2, [r3, #0]
 801fa16:	e7d4      	b.n	801f9c2 <ts_formatstring+0x5a>
					char * arg = va_arg(va, char *);
 801fa18:	9b00      	ldr	r3, [sp, #0]
 801fa1a:	1d1a      	adds	r2, r3, #4
 801fa1c:	9200      	str	r2, [sp, #0]
 801fa1e:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 801fa20:	e005      	b.n	801fa2e <ts_formatstring+0xc6>
						*buf++ = *arg++;
 801fa22:	9a01      	ldr	r2, [sp, #4]
 801fa24:	1c51      	adds	r1, r2, #1
 801fa26:	9101      	str	r1, [sp, #4]
 801fa28:	7819      	ldrb	r1, [r3, #0]
 801fa2a:	7011      	strb	r1, [r2, #0]
 801fa2c:	3301      	adds	r3, #1
					while (*arg)
 801fa2e:	781a      	ldrb	r2, [r3, #0]
 801fa30:	2a00      	cmp	r2, #0
 801fa32:	d1f6      	bne.n	801fa22 <ts_formatstring+0xba>
 801fa34:	e7dd      	b.n	801f9f2 <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 801fa36:	2200      	movs	r2, #0
 801fa38:	9b01      	ldr	r3, [sp, #4]
 801fa3a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 801fa3c:	9801      	ldr	r0, [sp, #4]
 801fa3e:	1b40      	subs	r0, r0, r5
 801fa40:	b003      	add	sp, #12
 801fa42:	bd30      	pop	{r4, r5, pc}

0801fa44 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 801fa44:	b082      	sub	sp, #8
 801fa46:	4603      	mov	r3, r0
 801fa48:	9101      	str	r1, [sp, #4]
	int length = 0;
 801fa4a:	2000      	movs	r0, #0
	while (*fmt)
 801fa4c:	e01d      	b.n	801fa8a <ts_formatlength+0x46>
	{
		if (*fmt == '%')
		{
			++fmt;
 801fa4e:	1c59      	adds	r1, r3, #1
			switch (*fmt)
 801fa50:	785b      	ldrb	r3, [r3, #1]
 801fa52:	3b58      	subs	r3, #88	; 0x58
 801fa54:	2b20      	cmp	r3, #32
 801fa56:	d837      	bhi.n	801fac8 <ts_formatlength+0x84>
 801fa58:	e8df f003 	tbb	[pc, r3]
 801fa5c:	36363630 	.word	0x36363630
 801fa60:	36363636 	.word	0x36363636
 801fa64:	11363636 	.word	0x11363636
 801fa68:	3636361d 	.word	0x3636361d
 801fa6c:	36361d36 	.word	0x36361d36
 801fa70:	36363636 	.word	0x36363636
 801fa74:	23363636 	.word	0x23363636
 801fa78:	36361d36 	.word	0x36361d36
 801fa7c:	30          	.byte	0x30
 801fa7d:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 801fa7e:	9b01      	ldr	r3, [sp, #4]
 801fa80:	3304      	adds	r3, #4
 801fa82:	9301      	str	r3, [sp, #4]
				  ++length;
 801fa84:	3001      	adds	r0, #1
			++fmt;
 801fa86:	460b      	mov	r3, r1
		}
		else
		{
			++length;
		}
		++fmt;
 801fa88:	3301      	adds	r3, #1
	while (*fmt)
 801fa8a:	781a      	ldrb	r2, [r3, #0]
 801fa8c:	b1fa      	cbz	r2, 801face <ts_formatlength+0x8a>
		if (*fmt == '%')
 801fa8e:	2a25      	cmp	r2, #37	; 0x25
 801fa90:	d0dd      	beq.n	801fa4e <ts_formatlength+0xa>
			++length;
 801fa92:	3001      	adds	r0, #1
 801fa94:	e7f8      	b.n	801fa88 <ts_formatlength+0x44>
				  length += 11;
 801fa96:	300b      	adds	r0, #11
				  va_arg(va, int);
 801fa98:	9b01      	ldr	r3, [sp, #4]
 801fa9a:	3304      	adds	r3, #4
 801fa9c:	9301      	str	r3, [sp, #4]
			++fmt;
 801fa9e:	460b      	mov	r3, r1
 801faa0:	e7f2      	b.n	801fa88 <ts_formatlength+0x44>
			  		  char * str = va_arg(va, char *);
 801faa2:	9b01      	ldr	r3, [sp, #4]
 801faa4:	1d1a      	adds	r2, r3, #4
 801faa6:	9201      	str	r2, [sp, #4]
 801faa8:	681b      	ldr	r3, [r3, #0]
			  		  while (*str++)
 801faaa:	e001      	b.n	801fab0 <ts_formatlength+0x6c>
			  			  ++length;
 801faac:	3001      	adds	r0, #1
			  		  while (*str++)
 801faae:	4613      	mov	r3, r2
 801fab0:	1c5a      	adds	r2, r3, #1
 801fab2:	781b      	ldrb	r3, [r3, #0]
 801fab4:	2b00      	cmp	r3, #0
 801fab6:	d1f9      	bne.n	801faac <ts_formatlength+0x68>
			++fmt;
 801fab8:	460b      	mov	r3, r1
 801faba:	e7e5      	b.n	801fa88 <ts_formatlength+0x44>
				  length += 8;
 801fabc:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 801fabe:	9b01      	ldr	r3, [sp, #4]
 801fac0:	3304      	adds	r3, #4
 801fac2:	9301      	str	r3, [sp, #4]
			++fmt;
 801fac4:	460b      	mov	r3, r1
 801fac6:	e7df      	b.n	801fa88 <ts_formatlength+0x44>
				  ++length;
 801fac8:	3001      	adds	r0, #1
			++fmt;
 801faca:	460b      	mov	r3, r1
				  break;
 801facc:	e7dc      	b.n	801fa88 <ts_formatlength+0x44>
	}
	return length;
}
 801face:	b002      	add	sp, #8
 801fad0:	4770      	bx	lr

0801fad2 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 801fad2:	b40e      	push	{r1, r2, r3}
 801fad4:	b500      	push	{lr}
 801fad6:	b082      	sub	sp, #8
 801fad8:	aa03      	add	r2, sp, #12
 801fada:	f852 1b04 	ldr.w	r1, [r2], #4
	int length;
	va_list va;
	va_start(va, fmt);
 801fade:	9201      	str	r2, [sp, #4]
	length = ts_formatstring(buf, fmt, va);
 801fae0:	f7ff ff42 	bl	801f968 <ts_formatstring>
	va_end(va);
	return length;
}
 801fae4:	b002      	add	sp, #8
 801fae6:	f85d eb04 	ldr.w	lr, [sp], #4
 801faea:	b003      	add	sp, #12
 801faec:	4770      	bx	lr

0801faee <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 801faee:	b40f      	push	{r0, r1, r2, r3}
 801faf0:	b5b0      	push	{r4, r5, r7, lr}
 801faf2:	b082      	sub	sp, #8
 801faf4:	af00      	add	r7, sp, #0
 801faf6:	f107 0418 	add.w	r4, r7, #24
 801fafa:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 801fafe:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 801fb00:	4621      	mov	r1, r4
 801fb02:	4628      	mov	r0, r5
 801fb04:	f7ff ff9e 	bl	801fa44 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 801fb08:	3007      	adds	r0, #7
 801fb0a:	f020 0007 	bic.w	r0, r0, #7
 801fb0e:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
 801fb12:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 801fb14:	4622      	mov	r2, r4
 801fb16:	4629      	mov	r1, r5
 801fb18:	4668      	mov	r0, sp
 801fb1a:	f7ff ff25 	bl	801f968 <ts_formatstring>
		length = _write(1, buf, length);
 801fb1e:	4602      	mov	r2, r0
 801fb20:	4669      	mov	r1, sp
 801fb22:	2001      	movs	r0, #1
 801fb24:	f7ff fc3b 	bl	801f39e <_write>
		va_end(va);
	}
	return length;
}
 801fb28:	3708      	adds	r7, #8
 801fb2a:	46bd      	mov	sp, r7
 801fb2c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801fb30:	b004      	add	sp, #16
 801fb32:	4770      	bx	lr

0801fb34 <setUp>:
 * some platforms (MinGW for example), weak function implementations need
 * to be in the same translation unit they are called from.  This can be
 * achieved by defining UNITY_INCLUDE_SETUP_STUBS before including unity.h. */
#ifdef UNITY_INCLUDE_SETUP_STUBS
  #ifdef UNITY_WEAK_ATTRIBUTE
    UNITY_WEAK_ATTRIBUTE void setUp(void) { }
 801fb34:	4770      	bx	lr

0801fb36 <tearDown>:
    UNITY_WEAK_ATTRIBUTE void tearDown(void) { }
 801fb36:	4770      	bx	lr

0801fb38 <UnityPrintNumberUnsigned>:
}

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 801fb38:	b570      	push	{r4, r5, r6, lr}
 801fb3a:	4605      	mov	r5, r0
    UNITY_UINT divisor = 1;
 801fb3c:	2401      	movs	r4, #1

    /* figure out initial divisor */
    while (number / divisor > 9)
 801fb3e:	e002      	b.n	801fb46 <UnityPrintNumberUnsigned+0xe>
    {
        divisor *= 10;
 801fb40:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801fb44:	005c      	lsls	r4, r3, #1
    while (number / divisor > 9)
 801fb46:	fbb5 f3f4 	udiv	r3, r5, r4
 801fb4a:	2b09      	cmp	r3, #9
 801fb4c:	d8f8      	bhi.n	801fb40 <UnityPrintNumberUnsigned+0x8>
 801fb4e:	e008      	b.n	801fb62 <UnityPrintNumberUnsigned+0x2a>
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
		return (*_p->_p++ = _c);
 801fb50:	6813      	ldr	r3, [r2, #0]
 801fb52:	1c58      	adds	r0, r3, #1
 801fb54:	6010      	str	r0, [r2, #0]
 801fb56:	7019      	strb	r1, [r3, #0]

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
        divisor /= 10;
 801fb58:	4b10      	ldr	r3, [pc, #64]	; (801fb9c <UnityPrintNumberUnsigned+0x64>)
 801fb5a:	fba3 3404 	umull	r3, r4, r3, r4
    } while (divisor > 0);
 801fb5e:	08e4      	lsrs	r4, r4, #3
 801fb60:	d01b      	beq.n	801fb9a <UnityPrintNumberUnsigned+0x62>
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 801fb62:	4b0f      	ldr	r3, [pc, #60]	; (801fba0 <UnityPrintNumberUnsigned+0x68>)
 801fb64:	6818      	ldr	r0, [r3, #0]
 801fb66:	fbb5 f2f4 	udiv	r2, r5, r4
 801fb6a:	490c      	ldr	r1, [pc, #48]	; (801fb9c <UnityPrintNumberUnsigned+0x64>)
 801fb6c:	fba1 3102 	umull	r3, r1, r1, r2
 801fb70:	08c9      	lsrs	r1, r1, #3
 801fb72:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801fb76:	004b      	lsls	r3, r1, #1
 801fb78:	1ad1      	subs	r1, r2, r3
 801fb7a:	3130      	adds	r1, #48	; 0x30
 801fb7c:	b2c9      	uxtb	r1, r1
 801fb7e:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fb80:	6893      	ldr	r3, [r2, #8]
 801fb82:	3b01      	subs	r3, #1
 801fb84:	6093      	str	r3, [r2, #8]
 801fb86:	2b00      	cmp	r3, #0
 801fb88:	dae2      	bge.n	801fb50 <UnityPrintNumberUnsigned+0x18>
 801fb8a:	6996      	ldr	r6, [r2, #24]
 801fb8c:	42b3      	cmp	r3, r6
 801fb8e:	db01      	blt.n	801fb94 <UnityPrintNumberUnsigned+0x5c>
 801fb90:	290a      	cmp	r1, #10
 801fb92:	d1dd      	bne.n	801fb50 <UnityPrintNumberUnsigned+0x18>
	else
		return (__swbuf_r(_ptr, _c, _p));
 801fb94:	f000 ffb2 	bl	8020afc <__swbuf_r>
 801fb98:	e7de      	b.n	801fb58 <UnityPrintNumberUnsigned+0x20>
}
 801fb9a:	bd70      	pop	{r4, r5, r6, pc}
 801fb9c:	cccccccd 	.word	0xcccccccd
 801fba0:	20000044 	.word	0x20000044

0801fba4 <UnityPrintNumber>:
{
 801fba4:	b510      	push	{r4, lr}
    if (number_to_print < 0)
 801fba6:	1e04      	subs	r4, r0, #0
 801fba8:	db03      	blt.n	801fbb2 <UnityPrintNumber+0xe>
    UnityPrintNumberUnsigned(number);
 801fbaa:	4620      	mov	r0, r4
 801fbac:	f7ff ffc4 	bl	801fb38 <UnityPrintNumberUnsigned>
 801fbb0:	bd10      	pop	{r4, pc}
        UNITY_OUTPUT_CHAR('-');
 801fbb2:	4b0b      	ldr	r3, [pc, #44]	; (801fbe0 <UnityPrintNumber+0x3c>)
 801fbb4:	6818      	ldr	r0, [r3, #0]
 801fbb6:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fbb8:	6893      	ldr	r3, [r2, #8]
 801fbba:	3b01      	subs	r3, #1
 801fbbc:	6093      	str	r3, [r2, #8]
 801fbbe:	2b00      	cmp	r3, #0
 801fbc0:	db06      	blt.n	801fbd0 <UnityPrintNumber+0x2c>
		return (*_p->_p++ = _c);
 801fbc2:	6813      	ldr	r3, [r2, #0]
 801fbc4:	1c59      	adds	r1, r3, #1
 801fbc6:	6011      	str	r1, [r2, #0]
 801fbc8:	222d      	movs	r2, #45	; 0x2d
 801fbca:	701a      	strb	r2, [r3, #0]
        number = -number;
 801fbcc:	4264      	negs	r4, r4
 801fbce:	e7ec      	b.n	801fbaa <UnityPrintNumber+0x6>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fbd0:	6991      	ldr	r1, [r2, #24]
 801fbd2:	428b      	cmp	r3, r1
 801fbd4:	daf5      	bge.n	801fbc2 <UnityPrintNumber+0x1e>
		return (__swbuf_r(_ptr, _c, _p));
 801fbd6:	212d      	movs	r1, #45	; 0x2d
 801fbd8:	f000 ff90 	bl	8020afc <__swbuf_r>
 801fbdc:	e7f6      	b.n	801fbcc <UnityPrintNumber+0x28>
 801fbde:	bf00      	nop
 801fbe0:	20000044 	.word	0x20000044

0801fbe4 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 801fbe4:	b570      	push	{r4, r5, r6, lr}
 801fbe6:	4605      	mov	r5, r0
    int nibble;
    char nibbles = nibbles_to_print;
    if ((unsigned)nibbles > (2 * sizeof(number)))
 801fbe8:	2908      	cmp	r1, #8
 801fbea:	d801      	bhi.n	801fbf0 <UnityPrintNumberHex+0xc>
    char nibbles = nibbles_to_print;
 801fbec:	460c      	mov	r4, r1
 801fbee:	e005      	b.n	801fbfc <UnityPrintNumberHex+0x18>
    {
        nibbles = 2 * sizeof(number);
 801fbf0:	2408      	movs	r4, #8
 801fbf2:	e003      	b.n	801fbfc <UnityPrintNumberHex+0x18>
		return (*_p->_p++ = _c);
 801fbf4:	6813      	ldr	r3, [r2, #0]
 801fbf6:	1c58      	adds	r0, r3, #1
 801fbf8:	6010      	str	r0, [r2, #0]
 801fbfa:	7019      	strb	r1, [r3, #0]
    }

    while (nibbles > 0)
 801fbfc:	b37c      	cbz	r4, 801fc5e <UnityPrintNumberHex+0x7a>
    {
        nibbles--;
 801fbfe:	3c01      	subs	r4, #1
 801fc00:	b2e4      	uxtb	r4, r4
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 801fc02:	00a1      	lsls	r1, r4, #2
 801fc04:	fa25 f101 	lsr.w	r1, r5, r1
 801fc08:	f001 010f 	and.w	r1, r1, #15
        if (nibble <= 9)
 801fc0c:	2909      	cmp	r1, #9
 801fc0e:	dc10      	bgt.n	801fc32 <UnityPrintNumberHex+0x4e>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 801fc10:	4b13      	ldr	r3, [pc, #76]	; (801fc60 <UnityPrintNumberHex+0x7c>)
 801fc12:	6818      	ldr	r0, [r3, #0]
 801fc14:	3130      	adds	r1, #48	; 0x30
 801fc16:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fc18:	6893      	ldr	r3, [r2, #8]
 801fc1a:	3b01      	subs	r3, #1
 801fc1c:	6093      	str	r3, [r2, #8]
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	dae8      	bge.n	801fbf4 <UnityPrintNumberHex+0x10>
 801fc22:	6996      	ldr	r6, [r2, #24]
 801fc24:	42b3      	cmp	r3, r6
 801fc26:	db01      	blt.n	801fc2c <UnityPrintNumberHex+0x48>
 801fc28:	290a      	cmp	r1, #10
 801fc2a:	d1e3      	bne.n	801fbf4 <UnityPrintNumberHex+0x10>
		return (__swbuf_r(_ptr, _c, _p));
 801fc2c:	f000 ff66 	bl	8020afc <__swbuf_r>
 801fc30:	e7e4      	b.n	801fbfc <UnityPrintNumberHex+0x18>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 801fc32:	4b0b      	ldr	r3, [pc, #44]	; (801fc60 <UnityPrintNumberHex+0x7c>)
 801fc34:	6818      	ldr	r0, [r3, #0]
 801fc36:	3137      	adds	r1, #55	; 0x37
 801fc38:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fc3a:	6893      	ldr	r3, [r2, #8]
 801fc3c:	3b01      	subs	r3, #1
 801fc3e:	6093      	str	r3, [r2, #8]
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	db04      	blt.n	801fc4e <UnityPrintNumberHex+0x6a>
		return (*_p->_p++ = _c);
 801fc44:	6813      	ldr	r3, [r2, #0]
 801fc46:	1c58      	adds	r0, r3, #1
 801fc48:	6010      	str	r0, [r2, #0]
 801fc4a:	7019      	strb	r1, [r3, #0]
 801fc4c:	e7d6      	b.n	801fbfc <UnityPrintNumberHex+0x18>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fc4e:	6996      	ldr	r6, [r2, #24]
 801fc50:	42b3      	cmp	r3, r6
 801fc52:	db01      	blt.n	801fc58 <UnityPrintNumberHex+0x74>
 801fc54:	290a      	cmp	r1, #10
 801fc56:	d1f5      	bne.n	801fc44 <UnityPrintNumberHex+0x60>
		return (__swbuf_r(_ptr, _c, _p));
 801fc58:	f000 ff50 	bl	8020afc <__swbuf_r>
 801fc5c:	e7ce      	b.n	801fbfc <UnityPrintNumberHex+0x18>
        }
    }
}
 801fc5e:	bd70      	pop	{r4, r5, r6, pc}
 801fc60:	20000044 	.word	0x20000044

0801fc64 <UnityPrintChar>:
{
 801fc64:	b510      	push	{r4, lr}
    if ((*pch <= 126) && (*pch >= 32))
 801fc66:	7801      	ldrb	r1, [r0, #0]
 801fc68:	f1a1 0320 	sub.w	r3, r1, #32
 801fc6c:	b2db      	uxtb	r3, r3
 801fc6e:	2b5e      	cmp	r3, #94	; 0x5e
 801fc70:	d923      	bls.n	801fcba <UnityPrintChar+0x56>
 801fc72:	4604      	mov	r4, r0
    else if (*pch == 13)
 801fc74:	290d      	cmp	r1, #13
 801fc76:	d035      	beq.n	801fce4 <UnityPrintChar+0x80>
    else if (*pch == 10)
 801fc78:	290a      	cmp	r1, #10
 801fc7a:	d05c      	beq.n	801fd36 <UnityPrintChar+0xd2>
        UNITY_OUTPUT_CHAR('\\');
 801fc7c:	4b4a      	ldr	r3, [pc, #296]	; (801fda8 <UnityPrintChar+0x144>)
 801fc7e:	6818      	ldr	r0, [r3, #0]
 801fc80:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fc82:	6893      	ldr	r3, [r2, #8]
 801fc84:	3b01      	subs	r3, #1
 801fc86:	6093      	str	r3, [r2, #8]
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	db7d      	blt.n	801fd88 <UnityPrintChar+0x124>
		return (*_p->_p++ = _c);
 801fc8c:	6813      	ldr	r3, [r2, #0]
 801fc8e:	1c59      	adds	r1, r3, #1
 801fc90:	6011      	str	r1, [r2, #0]
 801fc92:	225c      	movs	r2, #92	; 0x5c
 801fc94:	701a      	strb	r2, [r3, #0]
        UNITY_OUTPUT_CHAR('x');
 801fc96:	4b44      	ldr	r3, [pc, #272]	; (801fda8 <UnityPrintChar+0x144>)
 801fc98:	6818      	ldr	r0, [r3, #0]
 801fc9a:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fc9c:	6893      	ldr	r3, [r2, #8]
 801fc9e:	3b01      	subs	r3, #1
 801fca0:	6093      	str	r3, [r2, #8]
 801fca2:	2b00      	cmp	r3, #0
 801fca4:	db78      	blt.n	801fd98 <UnityPrintChar+0x134>
		return (*_p->_p++ = _c);
 801fca6:	6813      	ldr	r3, [r2, #0]
 801fca8:	1c59      	adds	r1, r3, #1
 801fcaa:	6011      	str	r1, [r2, #0]
 801fcac:	2278      	movs	r2, #120	; 0x78
 801fcae:	701a      	strb	r2, [r3, #0]
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 801fcb0:	2102      	movs	r1, #2
 801fcb2:	7820      	ldrb	r0, [r4, #0]
 801fcb4:	f7ff ff96 	bl	801fbe4 <UnityPrintNumberHex>
 801fcb8:	bd10      	pop	{r4, pc}
        UNITY_OUTPUT_CHAR(*pch);
 801fcba:	4b3b      	ldr	r3, [pc, #236]	; (801fda8 <UnityPrintChar+0x144>)
 801fcbc:	6818      	ldr	r0, [r3, #0]
 801fcbe:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fcc0:	6893      	ldr	r3, [r2, #8]
 801fcc2:	3b01      	subs	r3, #1
 801fcc4:	6093      	str	r3, [r2, #8]
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	db04      	blt.n	801fcd4 <UnityPrintChar+0x70>
		return (*_p->_p++ = _c);
 801fcca:	6813      	ldr	r3, [r2, #0]
 801fccc:	1c58      	adds	r0, r3, #1
 801fcce:	6010      	str	r0, [r2, #0]
 801fcd0:	7019      	strb	r1, [r3, #0]
 801fcd2:	bd10      	pop	{r4, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fcd4:	6994      	ldr	r4, [r2, #24]
 801fcd6:	42a3      	cmp	r3, r4
 801fcd8:	db01      	blt.n	801fcde <UnityPrintChar+0x7a>
 801fcda:	290a      	cmp	r1, #10
 801fcdc:	d1f5      	bne.n	801fcca <UnityPrintChar+0x66>
		return (__swbuf_r(_ptr, _c, _p));
 801fcde:	f000 ff0d 	bl	8020afc <__swbuf_r>
 801fce2:	bd10      	pop	{r4, pc}
        UNITY_OUTPUT_CHAR('\\');
 801fce4:	4b30      	ldr	r3, [pc, #192]	; (801fda8 <UnityPrintChar+0x144>)
 801fce6:	6818      	ldr	r0, [r3, #0]
 801fce8:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fcea:	6893      	ldr	r3, [r2, #8]
 801fcec:	3b01      	subs	r3, #1
 801fcee:	6093      	str	r3, [r2, #8]
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	db12      	blt.n	801fd1a <UnityPrintChar+0xb6>
		return (*_p->_p++ = _c);
 801fcf4:	6813      	ldr	r3, [r2, #0]
 801fcf6:	1c59      	adds	r1, r3, #1
 801fcf8:	6011      	str	r1, [r2, #0]
 801fcfa:	225c      	movs	r2, #92	; 0x5c
 801fcfc:	701a      	strb	r2, [r3, #0]
        UNITY_OUTPUT_CHAR('r');
 801fcfe:	4b2a      	ldr	r3, [pc, #168]	; (801fda8 <UnityPrintChar+0x144>)
 801fd00:	6818      	ldr	r0, [r3, #0]
 801fd02:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fd04:	6893      	ldr	r3, [r2, #8]
 801fd06:	3b01      	subs	r3, #1
 801fd08:	6093      	str	r3, [r2, #8]
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	db0c      	blt.n	801fd28 <UnityPrintChar+0xc4>
		return (*_p->_p++ = _c);
 801fd0e:	6813      	ldr	r3, [r2, #0]
 801fd10:	1c59      	adds	r1, r3, #1
 801fd12:	6011      	str	r1, [r2, #0]
 801fd14:	2272      	movs	r2, #114	; 0x72
 801fd16:	701a      	strb	r2, [r3, #0]
 801fd18:	bd10      	pop	{r4, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fd1a:	6991      	ldr	r1, [r2, #24]
 801fd1c:	428b      	cmp	r3, r1
 801fd1e:	dae9      	bge.n	801fcf4 <UnityPrintChar+0x90>
		return (__swbuf_r(_ptr, _c, _p));
 801fd20:	215c      	movs	r1, #92	; 0x5c
 801fd22:	f000 feeb 	bl	8020afc <__swbuf_r>
 801fd26:	e7ea      	b.n	801fcfe <UnityPrintChar+0x9a>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fd28:	6991      	ldr	r1, [r2, #24]
 801fd2a:	428b      	cmp	r3, r1
 801fd2c:	daef      	bge.n	801fd0e <UnityPrintChar+0xaa>
		return (__swbuf_r(_ptr, _c, _p));
 801fd2e:	2172      	movs	r1, #114	; 0x72
 801fd30:	f000 fee4 	bl	8020afc <__swbuf_r>
 801fd34:	bd10      	pop	{r4, pc}
        UNITY_OUTPUT_CHAR('\\');
 801fd36:	4b1c      	ldr	r3, [pc, #112]	; (801fda8 <UnityPrintChar+0x144>)
 801fd38:	6818      	ldr	r0, [r3, #0]
 801fd3a:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fd3c:	6893      	ldr	r3, [r2, #8]
 801fd3e:	3b01      	subs	r3, #1
 801fd40:	6093      	str	r3, [r2, #8]
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	db12      	blt.n	801fd6c <UnityPrintChar+0x108>
		return (*_p->_p++ = _c);
 801fd46:	6813      	ldr	r3, [r2, #0]
 801fd48:	1c59      	adds	r1, r3, #1
 801fd4a:	6011      	str	r1, [r2, #0]
 801fd4c:	225c      	movs	r2, #92	; 0x5c
 801fd4e:	701a      	strb	r2, [r3, #0]
        UNITY_OUTPUT_CHAR('n');
 801fd50:	4b15      	ldr	r3, [pc, #84]	; (801fda8 <UnityPrintChar+0x144>)
 801fd52:	6818      	ldr	r0, [r3, #0]
 801fd54:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fd56:	6893      	ldr	r3, [r2, #8]
 801fd58:	3b01      	subs	r3, #1
 801fd5a:	6093      	str	r3, [r2, #8]
 801fd5c:	2b00      	cmp	r3, #0
 801fd5e:	db0c      	blt.n	801fd7a <UnityPrintChar+0x116>
		return (*_p->_p++ = _c);
 801fd60:	6813      	ldr	r3, [r2, #0]
 801fd62:	1c59      	adds	r1, r3, #1
 801fd64:	6011      	str	r1, [r2, #0]
 801fd66:	226e      	movs	r2, #110	; 0x6e
 801fd68:	701a      	strb	r2, [r3, #0]
 801fd6a:	bd10      	pop	{r4, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fd6c:	6991      	ldr	r1, [r2, #24]
 801fd6e:	428b      	cmp	r3, r1
 801fd70:	dae9      	bge.n	801fd46 <UnityPrintChar+0xe2>
		return (__swbuf_r(_ptr, _c, _p));
 801fd72:	215c      	movs	r1, #92	; 0x5c
 801fd74:	f000 fec2 	bl	8020afc <__swbuf_r>
 801fd78:	e7ea      	b.n	801fd50 <UnityPrintChar+0xec>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fd7a:	6991      	ldr	r1, [r2, #24]
 801fd7c:	428b      	cmp	r3, r1
 801fd7e:	daef      	bge.n	801fd60 <UnityPrintChar+0xfc>
		return (__swbuf_r(_ptr, _c, _p));
 801fd80:	216e      	movs	r1, #110	; 0x6e
 801fd82:	f000 febb 	bl	8020afc <__swbuf_r>
 801fd86:	bd10      	pop	{r4, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fd88:	6991      	ldr	r1, [r2, #24]
 801fd8a:	428b      	cmp	r3, r1
 801fd8c:	f6bf af7e 	bge.w	801fc8c <UnityPrintChar+0x28>
		return (__swbuf_r(_ptr, _c, _p));
 801fd90:	215c      	movs	r1, #92	; 0x5c
 801fd92:	f000 feb3 	bl	8020afc <__swbuf_r>
 801fd96:	e77e      	b.n	801fc96 <UnityPrintChar+0x32>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fd98:	6991      	ldr	r1, [r2, #24]
 801fd9a:	428b      	cmp	r3, r1
 801fd9c:	da83      	bge.n	801fca6 <UnityPrintChar+0x42>
		return (__swbuf_r(_ptr, _c, _p));
 801fd9e:	2178      	movs	r1, #120	; 0x78
 801fda0:	f000 feac 	bl	8020afc <__swbuf_r>
 801fda4:	e784      	b.n	801fcb0 <UnityPrintChar+0x4c>
 801fda6:	bf00      	nop
 801fda8:	20000044 	.word	0x20000044

0801fdac <UnityPrint>:
{
 801fdac:	b510      	push	{r4, lr}
    if (pch != NULL)
 801fdae:	4604      	mov	r4, r0
 801fdb0:	b920      	cbnz	r0, 801fdbc <UnityPrint+0x10>
 801fdb2:	bd10      	pop	{r4, pc}
            UnityPrintChar(pch);
 801fdb4:	4620      	mov	r0, r4
 801fdb6:	f7ff ff55 	bl	801fc64 <UnityPrintChar>
            pch++;
 801fdba:	3401      	adds	r4, #1
        while (*pch)
 801fdbc:	7823      	ldrb	r3, [r4, #0]
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	d1f8      	bne.n	801fdb4 <UnityPrint+0x8>
 801fdc2:	bd10      	pop	{r4, pc}

0801fdc4 <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 801fdc4:	b510      	push	{r4, lr}
 801fdc6:	460c      	mov	r4, r1
    UnityPrint(file);
 801fdc8:	f7ff fff0 	bl	801fdac <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 801fdcc:	4b21      	ldr	r3, [pc, #132]	; (801fe54 <UnityTestResultsBegin+0x90>)
 801fdce:	6818      	ldr	r0, [r3, #0]
 801fdd0:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fdd2:	6893      	ldr	r3, [r2, #8]
 801fdd4:	3b01      	subs	r3, #1
 801fdd6:	6093      	str	r3, [r2, #8]
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	db26      	blt.n	801fe2a <UnityTestResultsBegin+0x66>
		return (*_p->_p++ = _c);
 801fddc:	6813      	ldr	r3, [r2, #0]
 801fdde:	1c59      	adds	r1, r3, #1
 801fde0:	6011      	str	r1, [r2, #0]
 801fde2:	223a      	movs	r2, #58	; 0x3a
 801fde4:	701a      	strb	r2, [r3, #0]
    UnityPrintNumber((UNITY_INT)line);
 801fde6:	4620      	mov	r0, r4
 801fde8:	f7ff fedc 	bl	801fba4 <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 801fdec:	4b19      	ldr	r3, [pc, #100]	; (801fe54 <UnityTestResultsBegin+0x90>)
 801fdee:	6818      	ldr	r0, [r3, #0]
 801fdf0:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fdf2:	6893      	ldr	r3, [r2, #8]
 801fdf4:	3b01      	subs	r3, #1
 801fdf6:	6093      	str	r3, [r2, #8]
 801fdf8:	2b00      	cmp	r3, #0
 801fdfa:	db1d      	blt.n	801fe38 <UnityTestResultsBegin+0x74>
		return (*_p->_p++ = _c);
 801fdfc:	6813      	ldr	r3, [r2, #0]
 801fdfe:	1c59      	adds	r1, r3, #1
 801fe00:	6011      	str	r1, [r2, #0]
 801fe02:	223a      	movs	r2, #58	; 0x3a
 801fe04:	701a      	strb	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
 801fe06:	4b14      	ldr	r3, [pc, #80]	; (801fe58 <UnityTestResultsBegin+0x94>)
 801fe08:	6858      	ldr	r0, [r3, #4]
 801fe0a:	f7ff ffcf 	bl	801fdac <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 801fe0e:	4b11      	ldr	r3, [pc, #68]	; (801fe54 <UnityTestResultsBegin+0x90>)
 801fe10:	6818      	ldr	r0, [r3, #0]
 801fe12:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fe14:	6893      	ldr	r3, [r2, #8]
 801fe16:	3b01      	subs	r3, #1
 801fe18:	6093      	str	r3, [r2, #8]
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	db13      	blt.n	801fe46 <UnityTestResultsBegin+0x82>
		return (*_p->_p++ = _c);
 801fe1e:	6813      	ldr	r3, [r2, #0]
 801fe20:	1c59      	adds	r1, r3, #1
 801fe22:	6011      	str	r1, [r2, #0]
 801fe24:	223a      	movs	r2, #58	; 0x3a
 801fe26:	701a      	strb	r2, [r3, #0]
 801fe28:	bd10      	pop	{r4, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fe2a:	6991      	ldr	r1, [r2, #24]
 801fe2c:	428b      	cmp	r3, r1
 801fe2e:	dad5      	bge.n	801fddc <UnityTestResultsBegin+0x18>
		return (__swbuf_r(_ptr, _c, _p));
 801fe30:	213a      	movs	r1, #58	; 0x3a
 801fe32:	f000 fe63 	bl	8020afc <__swbuf_r>
 801fe36:	e7d6      	b.n	801fde6 <UnityTestResultsBegin+0x22>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fe38:	6991      	ldr	r1, [r2, #24]
 801fe3a:	428b      	cmp	r3, r1
 801fe3c:	dade      	bge.n	801fdfc <UnityTestResultsBegin+0x38>
		return (__swbuf_r(_ptr, _c, _p));
 801fe3e:	213a      	movs	r1, #58	; 0x3a
 801fe40:	f000 fe5c 	bl	8020afc <__swbuf_r>
 801fe44:	e7df      	b.n	801fe06 <UnityTestResultsBegin+0x42>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fe46:	6991      	ldr	r1, [r2, #24]
 801fe48:	428b      	cmp	r3, r1
 801fe4a:	dae8      	bge.n	801fe1e <UnityTestResultsBegin+0x5a>
		return (__swbuf_r(_ptr, _c, _p));
 801fe4c:	213a      	movs	r1, #58	; 0x3a
 801fe4e:	f000 fe55 	bl	8020afc <__swbuf_r>
 801fe52:	bd10      	pop	{r4, pc}
 801fe54:	20000044 	.word	0x20000044
 801fe58:	20018fbc 	.word	0x20018fbc

0801fe5c <UnityTestResultsFailBegin>:
}

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 801fe5c:	b508      	push	{r3, lr}
    UnityTestResultsBegin(Unity.TestFile, line);
 801fe5e:	4601      	mov	r1, r0
 801fe60:	4b0d      	ldr	r3, [pc, #52]	; (801fe98 <UnityTestResultsFailBegin+0x3c>)
 801fe62:	6818      	ldr	r0, [r3, #0]
 801fe64:	f7ff ffae 	bl	801fdc4 <UnityTestResultsBegin>
    UnityPrint(UnityStrFail);
 801fe68:	480c      	ldr	r0, [pc, #48]	; (801fe9c <UnityTestResultsFailBegin+0x40>)
 801fe6a:	f7ff ff9f 	bl	801fdac <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 801fe6e:	4b0c      	ldr	r3, [pc, #48]	; (801fea0 <UnityTestResultsFailBegin+0x44>)
 801fe70:	6818      	ldr	r0, [r3, #0]
 801fe72:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fe74:	6893      	ldr	r3, [r2, #8]
 801fe76:	3b01      	subs	r3, #1
 801fe78:	6093      	str	r3, [r2, #8]
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	db05      	blt.n	801fe8a <UnityTestResultsFailBegin+0x2e>
		return (*_p->_p++ = _c);
 801fe7e:	6813      	ldr	r3, [r2, #0]
 801fe80:	1c59      	adds	r1, r3, #1
 801fe82:	6011      	str	r1, [r2, #0]
 801fe84:	223a      	movs	r2, #58	; 0x3a
 801fe86:	701a      	strb	r2, [r3, #0]
 801fe88:	bd08      	pop	{r3, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801fe8a:	6991      	ldr	r1, [r2, #24]
 801fe8c:	428b      	cmp	r3, r1
 801fe8e:	daf6      	bge.n	801fe7e <UnityTestResultsFailBegin+0x22>
		return (__swbuf_r(_ptr, _c, _p));
 801fe90:	213a      	movs	r1, #58	; 0x3a
 801fe92:	f000 fe33 	bl	8020afc <__swbuf_r>
 801fe96:	bd08      	pop	{r3, pc}
 801fe98:	20018fbc 	.word	0x20018fbc
 801fe9c:	08027250 	.word	0x08027250
 801fea0:	20000044 	.word	0x20000044

0801fea4 <UnityAddMsgIfSpecified>:
}

/*-----------------------------------------------*/
static void UnityAddMsgIfSpecified(const char* msg)
{
    if (msg)
 801fea4:	b1e8      	cbz	r0, 801fee2 <UnityAddMsgIfSpecified+0x3e>
{
 801fea6:	b538      	push	{r3, r4, r5, lr}
 801fea8:	4604      	mov	r4, r0
    {
        UnityPrint(UnityStrSpacer);
 801feaa:	480e      	ldr	r0, [pc, #56]	; (801fee4 <UnityAddMsgIfSpecified+0x40>)
 801feac:	f7ff ff7e 	bl	801fdac <UnityPrint>
#ifndef UNITY_EXCLUDE_DETAILS
        if (Unity.CurrentDetail1)
 801feb0:	4b0d      	ldr	r3, [pc, #52]	; (801fee8 <UnityAddMsgIfSpecified+0x44>)
 801feb2:	689b      	ldr	r3, [r3, #8]
 801feb4:	b18b      	cbz	r3, 801feda <UnityAddMsgIfSpecified+0x36>
        {
            UnityPrint(UnityStrDetail1Name);
 801feb6:	480d      	ldr	r0, [pc, #52]	; (801feec <UnityAddMsgIfSpecified+0x48>)
 801feb8:	f7ff ff78 	bl	801fdac <UnityPrint>
            UnityPrint(Unity.CurrentDetail1);
 801febc:	4d0a      	ldr	r5, [pc, #40]	; (801fee8 <UnityAddMsgIfSpecified+0x44>)
 801febe:	68a8      	ldr	r0, [r5, #8]
 801fec0:	f7ff ff74 	bl	801fdac <UnityPrint>
            if (Unity.CurrentDetail2)
 801fec4:	68eb      	ldr	r3, [r5, #12]
 801fec6:	b12b      	cbz	r3, 801fed4 <UnityAddMsgIfSpecified+0x30>
            {
                UnityPrint(UnityStrDetail2Name);
 801fec8:	4809      	ldr	r0, [pc, #36]	; (801fef0 <UnityAddMsgIfSpecified+0x4c>)
 801feca:	f7ff ff6f 	bl	801fdac <UnityPrint>
                UnityPrint(Unity.CurrentDetail2);
 801fece:	68e8      	ldr	r0, [r5, #12]
 801fed0:	f7ff ff6c 	bl	801fdac <UnityPrint>
            }
            UnityPrint(UnityStrSpacer);
 801fed4:	4803      	ldr	r0, [pc, #12]	; (801fee4 <UnityAddMsgIfSpecified+0x40>)
 801fed6:	f7ff ff69 	bl	801fdac <UnityPrint>
        }
#endif
        UnityPrint(msg);
 801feda:	4620      	mov	r0, r4
 801fedc:	f7ff ff66 	bl	801fdac <UnityPrint>
 801fee0:	bd38      	pop	{r3, r4, r5, pc}
 801fee2:	4770      	bx	lr
 801fee4:	08027284 	.word	0x08027284
 801fee8:	20018fbc 	.word	0x20018fbc
 801feec:	0802722c 	.word	0x0802722c
 801fef0:	08027238 	.word	0x08027238

0801fef4 <UnityPrintNumberByStyle>:
{
 801fef4:	b538      	push	{r3, r4, r5, lr}
 801fef6:	4605      	mov	r5, r0
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 801fef8:	f011 0f10 	tst.w	r1, #16
 801fefc:	d124      	bne.n	801ff48 <UnityPrintNumberByStyle+0x54>
 801fefe:	460c      	mov	r4, r1
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
 801ff00:	f011 0f20 	tst.w	r1, #32
 801ff04:	d123      	bne.n	801ff4e <UnityPrintNumberByStyle+0x5a>
        UNITY_OUTPUT_CHAR('0');
 801ff06:	4b1a      	ldr	r3, [pc, #104]	; (801ff70 <UnityPrintNumberByStyle+0x7c>)
 801ff08:	6818      	ldr	r0, [r3, #0]
 801ff0a:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801ff0c:	6893      	ldr	r3, [r2, #8]
 801ff0e:	3b01      	subs	r3, #1
 801ff10:	6093      	str	r3, [r2, #8]
 801ff12:	2b00      	cmp	r3, #0
 801ff14:	db1e      	blt.n	801ff54 <UnityPrintNumberByStyle+0x60>
		return (*_p->_p++ = _c);
 801ff16:	6813      	ldr	r3, [r2, #0]
 801ff18:	1c59      	adds	r1, r3, #1
 801ff1a:	6011      	str	r1, [r2, #0]
 801ff1c:	2230      	movs	r2, #48	; 0x30
 801ff1e:	701a      	strb	r2, [r3, #0]
        UNITY_OUTPUT_CHAR('x');
 801ff20:	4b13      	ldr	r3, [pc, #76]	; (801ff70 <UnityPrintNumberByStyle+0x7c>)
 801ff22:	6818      	ldr	r0, [r3, #0]
 801ff24:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801ff26:	6893      	ldr	r3, [r2, #8]
 801ff28:	3b01      	subs	r3, #1
 801ff2a:	6093      	str	r3, [r2, #8]
 801ff2c:	2b00      	cmp	r3, #0
 801ff2e:	db18      	blt.n	801ff62 <UnityPrintNumberByStyle+0x6e>
		return (*_p->_p++ = _c);
 801ff30:	6813      	ldr	r3, [r2, #0]
 801ff32:	1c59      	adds	r1, r3, #1
 801ff34:	6011      	str	r1, [r2, #0]
 801ff36:	2278      	movs	r2, #120	; 0x78
 801ff38:	701a      	strb	r2, [r3, #0]
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
 801ff3a:	f004 010f 	and.w	r1, r4, #15
 801ff3e:	0049      	lsls	r1, r1, #1
 801ff40:	4628      	mov	r0, r5
 801ff42:	f7ff fe4f 	bl	801fbe4 <UnityPrintNumberHex>
 801ff46:	bd38      	pop	{r3, r4, r5, pc}
        UnityPrintNumber(number);
 801ff48:	f7ff fe2c 	bl	801fba4 <UnityPrintNumber>
 801ff4c:	bd38      	pop	{r3, r4, r5, pc}
        UnityPrintNumberUnsigned((UNITY_UINT)number);
 801ff4e:	f7ff fdf3 	bl	801fb38 <UnityPrintNumberUnsigned>
 801ff52:	bd38      	pop	{r3, r4, r5, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801ff54:	6991      	ldr	r1, [r2, #24]
 801ff56:	428b      	cmp	r3, r1
 801ff58:	dadd      	bge.n	801ff16 <UnityPrintNumberByStyle+0x22>
		return (__swbuf_r(_ptr, _c, _p));
 801ff5a:	2130      	movs	r1, #48	; 0x30
 801ff5c:	f000 fdce 	bl	8020afc <__swbuf_r>
 801ff60:	e7de      	b.n	801ff20 <UnityPrintNumberByStyle+0x2c>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801ff62:	6991      	ldr	r1, [r2, #24]
 801ff64:	428b      	cmp	r3, r1
 801ff66:	dae3      	bge.n	801ff30 <UnityPrintNumberByStyle+0x3c>
		return (__swbuf_r(_ptr, _c, _p));
 801ff68:	2178      	movs	r1, #120	; 0x78
 801ff6a:	f000 fdc7 	bl	8020afc <__swbuf_r>
 801ff6e:	e7e4      	b.n	801ff3a <UnityPrintNumberByStyle+0x46>
 801ff70:	20000044 	.word	0x20000044

0801ff74 <UnityConcludeTest>:
{
 801ff74:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
 801ff76:	4b17      	ldr	r3, [pc, #92]	; (801ffd4 <UnityConcludeTest+0x60>)
 801ff78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff7a:	b9c3      	cbnz	r3, 801ffae <UnityConcludeTest+0x3a>
    else if (!Unity.CurrentTestFailed)
 801ff7c:	4b15      	ldr	r3, [pc, #84]	; (801ffd4 <UnityConcludeTest+0x60>)
 801ff7e:	6a1b      	ldr	r3, [r3, #32]
 801ff80:	b1d3      	cbz	r3, 801ffb8 <UnityConcludeTest+0x44>
        Unity.TestFailures++;
 801ff82:	4a14      	ldr	r2, [pc, #80]	; (801ffd4 <UnityConcludeTest+0x60>)
 801ff84:	6993      	ldr	r3, [r2, #24]
 801ff86:	3301      	adds	r3, #1
 801ff88:	6193      	str	r3, [r2, #24]
    Unity.CurrentTestFailed = 0;
 801ff8a:	4b12      	ldr	r3, [pc, #72]	; (801ffd4 <UnityConcludeTest+0x60>)
 801ff8c:	2200      	movs	r2, #0
 801ff8e:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 801ff90:	625a      	str	r2, [r3, #36]	; 0x24
    UNITY_PRINT_EOL();
 801ff92:	4b11      	ldr	r3, [pc, #68]	; (801ffd8 <UnityConcludeTest+0x64>)
 801ff94:	6818      	ldr	r0, [r3, #0]
 801ff96:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801ff98:	6893      	ldr	r3, [r2, #8]
 801ff9a:	3b01      	subs	r3, #1
 801ff9c:	6093      	str	r3, [r2, #8]
 801ff9e:	2b00      	cmp	r3, #0
 801ffa0:	db13      	blt.n	801ffca <UnityConcludeTest+0x56>
		return (*_p->_p++ = _c);
 801ffa2:	6813      	ldr	r3, [r2, #0]
 801ffa4:	1c59      	adds	r1, r3, #1
 801ffa6:	6011      	str	r1, [r2, #0]
 801ffa8:	220a      	movs	r2, #10
 801ffaa:	701a      	strb	r2, [r3, #0]
 801ffac:	bd08      	pop	{r3, pc}
        Unity.TestIgnores++;
 801ffae:	4a09      	ldr	r2, [pc, #36]	; (801ffd4 <UnityConcludeTest+0x60>)
 801ffb0:	69d3      	ldr	r3, [r2, #28]
 801ffb2:	3301      	adds	r3, #1
 801ffb4:	61d3      	str	r3, [r2, #28]
 801ffb6:	e7e8      	b.n	801ff8a <UnityConcludeTest+0x16>
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 801ffb8:	4b06      	ldr	r3, [pc, #24]	; (801ffd4 <UnityConcludeTest+0x60>)
 801ffba:	6919      	ldr	r1, [r3, #16]
 801ffbc:	6818      	ldr	r0, [r3, #0]
 801ffbe:	f7ff ff01 	bl	801fdc4 <UnityTestResultsBegin>
        UnityPrint(UnityStrPass);
 801ffc2:	4806      	ldr	r0, [pc, #24]	; (801ffdc <UnityConcludeTest+0x68>)
 801ffc4:	f7ff fef2 	bl	801fdac <UnityPrint>
 801ffc8:	e7df      	b.n	801ff8a <UnityConcludeTest+0x16>
		return (__swbuf_r(_ptr, _c, _p));
 801ffca:	210a      	movs	r1, #10
 801ffcc:	f000 fd96 	bl	8020afc <__swbuf_r>
 801ffd0:	bd08      	pop	{r3, pc}
 801ffd2:	bf00      	nop
 801ffd4:	20018fbc 	.word	0x20018fbc
 801ffd8:	20000044 	.word	0x20000044
 801ffdc:	0802725c 	.word	0x0802725c

0801ffe0 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const UNITY_INT expected,
                            const UNITY_INT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
 801ffe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffe2:	f89d 6018 	ldrb.w	r6, [sp, #24]
    RETURN_IF_FAIL_OR_IGNORE;
 801ffe6:	4c13      	ldr	r4, [pc, #76]	; (8020034 <UnityAssertEqualNumber+0x54>)
 801ffe8:	6a24      	ldr	r4, [r4, #32]
 801ffea:	b924      	cbnz	r4, 801fff6 <UnityAssertEqualNumber+0x16>
 801ffec:	4c11      	ldr	r4, [pc, #68]	; (8020034 <UnityAssertEqualNumber+0x54>)
 801ffee:	6a64      	ldr	r4, [r4, #36]	; 0x24
 801fff0:	b90c      	cbnz	r4, 801fff6 <UnityAssertEqualNumber+0x16>

    if (expected != actual)
 801fff2:	4288      	cmp	r0, r1
 801fff4:	d100      	bne.n	801fff8 <UnityAssertEqualNumber+0x18>
 801fff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fff8:	4617      	mov	r7, r2
 801fffa:	460c      	mov	r4, r1
 801fffc:	4605      	mov	r5, r0
    {
        UnityTestResultsFailBegin(lineNumber);
 801fffe:	4618      	mov	r0, r3
 8020000:	f7ff ff2c 	bl	801fe5c <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
 8020004:	480c      	ldr	r0, [pc, #48]	; (8020038 <UnityAssertEqualNumber+0x58>)
 8020006:	f7ff fed1 	bl	801fdac <UnityPrint>
        UnityPrintNumberByStyle(expected, style);
 802000a:	4631      	mov	r1, r6
 802000c:	4628      	mov	r0, r5
 802000e:	f7ff ff71 	bl	801fef4 <UnityPrintNumberByStyle>
        UnityPrint(UnityStrWas);
 8020012:	480a      	ldr	r0, [pc, #40]	; (802003c <UnityAssertEqualNumber+0x5c>)
 8020014:	f7ff feca 	bl	801fdac <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
 8020018:	4631      	mov	r1, r6
 802001a:	4620      	mov	r0, r4
 802001c:	f7ff ff6a 	bl	801fef4 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
 8020020:	4638      	mov	r0, r7
 8020022:	f7ff ff3f 	bl	801fea4 <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 8020026:	4803      	ldr	r0, [pc, #12]	; (8020034 <UnityAssertEqualNumber+0x54>)
 8020028:	2101      	movs	r1, #1
 802002a:	6201      	str	r1, [r0, #32]
 802002c:	3028      	adds	r0, #40	; 0x28
 802002e:	f7f0 f80d 	bl	801004c <longjmp>
 8020032:	bf00      	nop
 8020034:	20018fbc 	.word	0x20018fbc
 8020038:	08027244 	.word	0x08027244
 802003c:	08027288 	.word	0x08027288

08020040 <UnityDefaultTestRun>:
    UNITY_IGNORE_AND_BAIL;
}

/*-----------------------------------------------*/
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 8020040:	b500      	push	{lr}
 8020042:	b083      	sub	sp, #12
 8020044:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
 8020046:	480f      	ldr	r0, [pc, #60]	; (8020084 <UnityDefaultTestRun+0x44>)
 8020048:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 802004a:	6102      	str	r2, [r0, #16]
    Unity.NumberOfTests++;
 802004c:	6943      	ldr	r3, [r0, #20]
 802004e:	3301      	adds	r3, #1
 8020050:	6143      	str	r3, [r0, #20]
    UNITY_CLR_DETAILS();
 8020052:	2300      	movs	r3, #0
 8020054:	6083      	str	r3, [r0, #8]
 8020056:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
 8020058:	3028      	adds	r0, #40	; 0x28
 802005a:	f7ef fff1 	bl	8010040 <setjmp>
 802005e:	b140      	cbz	r0, 8020072 <UnityDefaultTestRun+0x32>
    {
        setUp();
        Func();
    }
    if (TEST_PROTECT())
 8020060:	4809      	ldr	r0, [pc, #36]	; (8020088 <UnityDefaultTestRun+0x48>)
 8020062:	f7ef ffed 	bl	8010040 <setjmp>
 8020066:	b148      	cbz	r0, 802007c <UnityDefaultTestRun+0x3c>
    {
        tearDown();
    }
    UnityConcludeTest();
 8020068:	f7ff ff84 	bl	801ff74 <UnityConcludeTest>
}
 802006c:	b003      	add	sp, #12
 802006e:	f85d fb04 	ldr.w	pc, [sp], #4
        setUp();
 8020072:	f7ff fd5f 	bl	801fb34 <setUp>
        Func();
 8020076:	9b01      	ldr	r3, [sp, #4]
 8020078:	4798      	blx	r3
 802007a:	e7f1      	b.n	8020060 <UnityDefaultTestRun+0x20>
        tearDown();
 802007c:	f7ff fd5b 	bl	801fb36 <tearDown>
 8020080:	e7f2      	b.n	8020068 <UnityDefaultTestRun+0x28>
 8020082:	bf00      	nop
 8020084:	20018fbc 	.word	0x20018fbc
 8020088:	20018fe4 	.word	0x20018fe4

0802008c <UnityBegin>:

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
 802008c:	4b06      	ldr	r3, [pc, #24]	; (80200a8 <UnityBegin+0x1c>)
 802008e:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
 8020090:	2200      	movs	r2, #0
 8020092:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 8020094:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 8020096:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 8020098:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 802009a:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 802009c:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 802009e:	625a      	str	r2, [r3, #36]	; 0x24
    UNITY_EXEC_TIME_RESET();

    UNITY_CLR_DETAILS();
 80200a0:	609a      	str	r2, [r3, #8]
 80200a2:	60da      	str	r2, [r3, #12]
 80200a4:	4770      	bx	lr
 80200a6:	bf00      	nop
 80200a8:	20018fbc 	.word	0x20018fbc

080200ac <UnityEnd>:
    UNITY_OUTPUT_START();
}

/*-----------------------------------------------*/
int UnityEnd(void)
{
 80200ac:	b510      	push	{r4, lr}
    UNITY_PRINT_EOL();
 80200ae:	4b33      	ldr	r3, [pc, #204]	; (802017c <UnityEnd+0xd0>)
 80200b0:	6818      	ldr	r0, [r3, #0]
 80200b2:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 80200b4:	6893      	ldr	r3, [r2, #8]
 80200b6:	3b01      	subs	r3, #1
 80200b8:	6093      	str	r3, [r2, #8]
 80200ba:	2b00      	cmp	r3, #0
 80200bc:	db4a      	blt.n	8020154 <UnityEnd+0xa8>
		return (*_p->_p++ = _c);
 80200be:	6813      	ldr	r3, [r2, #0]
 80200c0:	1c59      	adds	r1, r3, #1
 80200c2:	6011      	str	r1, [r2, #0]
 80200c4:	220a      	movs	r2, #10
 80200c6:	701a      	strb	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
 80200c8:	482d      	ldr	r0, [pc, #180]	; (8020180 <UnityEnd+0xd4>)
 80200ca:	f7ff fe6f 	bl	801fdac <UnityPrint>
    UNITY_PRINT_EOL();
 80200ce:	4b2b      	ldr	r3, [pc, #172]	; (802017c <UnityEnd+0xd0>)
 80200d0:	6818      	ldr	r0, [r3, #0]
 80200d2:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 80200d4:	6893      	ldr	r3, [r2, #8]
 80200d6:	3b01      	subs	r3, #1
 80200d8:	6093      	str	r3, [r2, #8]
 80200da:	2b00      	cmp	r3, #0
 80200dc:	db3e      	blt.n	802015c <UnityEnd+0xb0>
		return (*_p->_p++ = _c);
 80200de:	6813      	ldr	r3, [r2, #0]
 80200e0:	1c59      	adds	r1, r3, #1
 80200e2:	6011      	str	r1, [r2, #0]
 80200e4:	220a      	movs	r2, #10
 80200e6:	701a      	strb	r2, [r3, #0]
    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));
 80200e8:	4c26      	ldr	r4, [pc, #152]	; (8020184 <UnityEnd+0xd8>)
 80200ea:	6960      	ldr	r0, [r4, #20]
 80200ec:	f7ff fd5a 	bl	801fba4 <UnityPrintNumber>
    UnityPrint(UnityStrResultsTests);
 80200f0:	4825      	ldr	r0, [pc, #148]	; (8020188 <UnityEnd+0xdc>)
 80200f2:	f7ff fe5b 	bl	801fdac <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestFailures));
 80200f6:	69a0      	ldr	r0, [r4, #24]
 80200f8:	f7ff fd54 	bl	801fba4 <UnityPrintNumber>
    UnityPrint(UnityStrResultsFailures);
 80200fc:	4823      	ldr	r0, [pc, #140]	; (802018c <UnityEnd+0xe0>)
 80200fe:	f7ff fe55 	bl	801fdac <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestIgnores));
 8020102:	69e0      	ldr	r0, [r4, #28]
 8020104:	f7ff fd4e 	bl	801fba4 <UnityPrintNumber>
    UnityPrint(UnityStrResultsIgnored);
 8020108:	4821      	ldr	r0, [pc, #132]	; (8020190 <UnityEnd+0xe4>)
 802010a:	f7ff fe4f 	bl	801fdac <UnityPrint>
    UNITY_PRINT_EOL();
 802010e:	4b1b      	ldr	r3, [pc, #108]	; (802017c <UnityEnd+0xd0>)
 8020110:	6818      	ldr	r0, [r3, #0]
 8020112:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 8020114:	6893      	ldr	r3, [r2, #8]
 8020116:	3b01      	subs	r3, #1
 8020118:	6093      	str	r3, [r2, #8]
 802011a:	2b00      	cmp	r3, #0
 802011c:	db22      	blt.n	8020164 <UnityEnd+0xb8>
		return (*_p->_p++ = _c);
 802011e:	6813      	ldr	r3, [r2, #0]
 8020120:	1c59      	adds	r1, r3, #1
 8020122:	6011      	str	r1, [r2, #0]
 8020124:	220a      	movs	r2, #10
 8020126:	701a      	strb	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
 8020128:	4b16      	ldr	r3, [pc, #88]	; (8020184 <UnityEnd+0xd8>)
 802012a:	699b      	ldr	r3, [r3, #24]
 802012c:	b1f3      	cbz	r3, 802016c <UnityEnd+0xc0>
    {
        UnityPrint(UnityStrOk);
    }
    else
    {
        UnityPrint(UnityStrFail);
 802012e:	4819      	ldr	r0, [pc, #100]	; (8020194 <UnityEnd+0xe8>)
 8020130:	f7ff fe3c 	bl	801fdac <UnityPrint>
#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');
#endif
    }
    UNITY_PRINT_EOL();
 8020134:	4b11      	ldr	r3, [pc, #68]	; (802017c <UnityEnd+0xd0>)
 8020136:	6818      	ldr	r0, [r3, #0]
 8020138:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 802013a:	6893      	ldr	r3, [r2, #8]
 802013c:	3b01      	subs	r3, #1
 802013e:	6093      	str	r3, [r2, #8]
 8020140:	2b00      	cmp	r3, #0
 8020142:	db17      	blt.n	8020174 <UnityEnd+0xc8>
		return (*_p->_p++ = _c);
 8020144:	6813      	ldr	r3, [r2, #0]
 8020146:	1c59      	adds	r1, r3, #1
 8020148:	6011      	str	r1, [r2, #0]
 802014a:	220a      	movs	r2, #10
 802014c:	701a      	strb	r2, [r3, #0]
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
 802014e:	4b0d      	ldr	r3, [pc, #52]	; (8020184 <UnityEnd+0xd8>)
 8020150:	6998      	ldr	r0, [r3, #24]
 8020152:	bd10      	pop	{r4, pc}
		return (__swbuf_r(_ptr, _c, _p));
 8020154:	210a      	movs	r1, #10
 8020156:	f000 fcd1 	bl	8020afc <__swbuf_r>
 802015a:	e7b5      	b.n	80200c8 <UnityEnd+0x1c>
 802015c:	210a      	movs	r1, #10
 802015e:	f000 fccd 	bl	8020afc <__swbuf_r>
 8020162:	e7c1      	b.n	80200e8 <UnityEnd+0x3c>
 8020164:	210a      	movs	r1, #10
 8020166:	f000 fcc9 	bl	8020afc <__swbuf_r>
 802016a:	e7dd      	b.n	8020128 <UnityEnd+0x7c>
        UnityPrint(UnityStrOk);
 802016c:	480a      	ldr	r0, [pc, #40]	; (8020198 <UnityEnd+0xec>)
 802016e:	f7ff fe1d 	bl	801fdac <UnityPrint>
 8020172:	e7df      	b.n	8020134 <UnityEnd+0x88>
 8020174:	210a      	movs	r1, #10
 8020176:	f000 fcc1 	bl	8020afc <__swbuf_r>
 802017a:	e7e8      	b.n	802014e <UnityEnd+0xa2>
 802017c:	20000044 	.word	0x20000044
 8020180:	08027214 	.word	0x08027214
 8020184:	20018fbc 	.word	0x20018fbc
 8020188:	0802727c 	.word	0x0802727c
 802018c:	08027264 	.word	0x08027264
 8020190:	08027270 	.word	0x08027270
 8020194:	08027250 	.word	0x08027250
 8020198:	08027258 	.word	0x08027258

0802019c <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 802019c:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 802019e:	480c      	ldr	r0, [pc, #48]	; (80201d0 <MX_UART5_Init+0x34>)
 80201a0:	4b0c      	ldr	r3, [pc, #48]	; (80201d4 <MX_UART5_Init+0x38>)
 80201a2:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = hflash.speed;
 80201a4:	4b0c      	ldr	r3, [pc, #48]	; (80201d8 <MX_UART5_Init+0x3c>)
 80201a6:	681b      	ldr	r3, [r3, #0]
 80201a8:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 80201aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80201ae:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80201b0:	2300      	movs	r3, #0
 80201b2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 80201b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80201b8:	6102      	str	r2, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80201ba:	220c      	movs	r2, #12
 80201bc:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80201be:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80201c0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80201c2:	f7f2 fa63 	bl	801268c <HAL_UART_Init>
 80201c6:	b900      	cbnz	r0, 80201ca <MX_UART5_Init+0x2e>
 80201c8:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 80201ca:	f7fe fae9 	bl	801e7a0 <Error_Handler>
  }

}
 80201ce:	e7fb      	b.n	80201c8 <MX_UART5_Init+0x2c>
 80201d0:	200190a0 	.word	0x200190a0
 80201d4:	40005000 	.word	0x40005000
 80201d8:	20015ce4 	.word	0x20015ce4

080201dc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80201dc:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 80201de:	480a      	ldr	r0, [pc, #40]	; (8020208 <MX_USART1_UART_Init+0x2c>)
 80201e0:	4b0a      	ldr	r3, [pc, #40]	; (802020c <MX_USART1_UART_Init+0x30>)
 80201e2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 460800;
 80201e4:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 80201e8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80201ea:	2300      	movs	r3, #0
 80201ec:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80201ee:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80201f0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80201f2:	2208      	movs	r2, #8
 80201f4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80201f6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80201f8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80201fa:	f7f2 fa47 	bl	801268c <HAL_UART_Init>
 80201fe:	b900      	cbnz	r0, 8020202 <MX_USART1_UART_Init+0x26>
 8020200:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 8020202:	f7fe facd 	bl	801e7a0 <Error_Handler>
  }

}
 8020206:	e7fb      	b.n	8020200 <MX_USART1_UART_Init+0x24>
 8020208:	200190e0 	.word	0x200190e0
 802020c:	40011000 	.word	0x40011000

08020210 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8020210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020214:	b08b      	sub	sp, #44	; 0x2c
 8020216:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020218:	2300      	movs	r3, #0
 802021a:	9305      	str	r3, [sp, #20]
 802021c:	9306      	str	r3, [sp, #24]
 802021e:	9307      	str	r3, [sp, #28]
 8020220:	9308      	str	r3, [sp, #32]
 8020222:	9309      	str	r3, [sp, #36]	; 0x24
  if(uartHandle->Instance==UART5)
 8020224:	6803      	ldr	r3, [r0, #0]
 8020226:	4a5a      	ldr	r2, [pc, #360]	; (8020390 <HAL_UART_MspInit+0x180>)
 8020228:	4293      	cmp	r3, r2
 802022a:	d005      	beq.n	8020238 <HAL_UART_MspInit+0x28>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 802022c:	4a59      	ldr	r2, [pc, #356]	; (8020394 <HAL_UART_MspInit+0x184>)
 802022e:	4293      	cmp	r3, r2
 8020230:	d064      	beq.n	80202fc <HAL_UART_MspInit+0xec>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8020232:	b00b      	add	sp, #44	; 0x2c
 8020234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 8020238:	2500      	movs	r5, #0
 802023a:	9500      	str	r5, [sp, #0]
 802023c:	4b56      	ldr	r3, [pc, #344]	; (8020398 <HAL_UART_MspInit+0x188>)
 802023e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8020240:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8020244:	641a      	str	r2, [r3, #64]	; 0x40
 8020246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8020248:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 802024c:	9200      	str	r2, [sp, #0]
 802024e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020250:	9501      	str	r5, [sp, #4]
 8020252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020254:	f042 0204 	orr.w	r2, r2, #4
 8020258:	631a      	str	r2, [r3, #48]	; 0x30
 802025a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802025c:	f002 0204 	and.w	r2, r2, #4
 8020260:	9201      	str	r2, [sp, #4]
 8020262:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8020264:	9502      	str	r5, [sp, #8]
 8020266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020268:	f042 0208 	orr.w	r2, r2, #8
 802026c:	631a      	str	r2, [r3, #48]	; 0x30
 802026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020270:	f003 0308 	and.w	r3, r3, #8
 8020274:	9302      	str	r3, [sp, #8]
 8020276:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8020278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802027c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802027e:	f04f 0902 	mov.w	r9, #2
 8020282:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8020286:	f04f 0801 	mov.w	r8, #1
 802028a:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802028e:	2703      	movs	r7, #3
 8020290:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8020292:	2608      	movs	r6, #8
 8020294:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020296:	a905      	add	r1, sp, #20
 8020298:	4840      	ldr	r0, [pc, #256]	; (802039c <HAL_UART_MspInit+0x18c>)
 802029a:	f7f1 f95f 	bl	801155c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 802029e:	2304      	movs	r3, #4
 80202a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80202a2:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80202a6:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80202aa:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80202ac:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80202ae:	a905      	add	r1, sp, #20
 80202b0:	483b      	ldr	r0, [pc, #236]	; (80203a0 <HAL_UART_MspInit+0x190>)
 80202b2:	f7f1 f953 	bl	801155c <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80202b6:	483b      	ldr	r0, [pc, #236]	; (80203a4 <HAL_UART_MspInit+0x194>)
 80202b8:	4b3b      	ldr	r3, [pc, #236]	; (80203a8 <HAL_UART_MspInit+0x198>)
 80202ba:	6003      	str	r3, [r0, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80202bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80202c0:	6043      	str	r3, [r0, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80202c2:	2340      	movs	r3, #64	; 0x40
 80202c4:	6083      	str	r3, [r0, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80202c6:	60c5      	str	r5, [r0, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80202c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80202cc:	6103      	str	r3, [r0, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80202ce:	6145      	str	r5, [r0, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80202d0:	6185      	str	r5, [r0, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80202d2:	61c5      	str	r5, [r0, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80202d4:	6205      	str	r5, [r0, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80202d6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80202d8:	f7f0 f966 	bl	80105a8 <HAL_DMA_Init>
 80202dc:	b958      	cbnz	r0, 80202f6 <HAL_UART_MspInit+0xe6>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80202de:	4b31      	ldr	r3, [pc, #196]	; (80203a4 <HAL_UART_MspInit+0x194>)
 80202e0:	6323      	str	r3, [r4, #48]	; 0x30
 80202e2:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80202e4:	2200      	movs	r2, #0
 80202e6:	2105      	movs	r1, #5
 80202e8:	2035      	movs	r0, #53	; 0x35
 80202ea:	f7f0 f8a3 	bl	8010434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80202ee:	2035      	movs	r0, #53	; 0x35
 80202f0:	f7f0 f8d2 	bl	8010498 <HAL_NVIC_EnableIRQ>
 80202f4:	e79d      	b.n	8020232 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80202f6:	f7fe fa53 	bl	801e7a0 <Error_Handler>
 80202fa:	e7f0      	b.n	80202de <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART1_CLK_ENABLE();
 80202fc:	2500      	movs	r5, #0
 80202fe:	9503      	str	r5, [sp, #12]
 8020300:	4b25      	ldr	r3, [pc, #148]	; (8020398 <HAL_UART_MspInit+0x188>)
 8020302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020304:	f042 0210 	orr.w	r2, r2, #16
 8020308:	645a      	str	r2, [r3, #68]	; 0x44
 802030a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802030c:	f002 0210 	and.w	r2, r2, #16
 8020310:	9203      	str	r2, [sp, #12]
 8020312:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020314:	9504      	str	r5, [sp, #16]
 8020316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020318:	f042 0201 	orr.w	r2, r2, #1
 802031c:	631a      	str	r2, [r3, #48]	; 0x30
 802031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020320:	f003 0301 	and.w	r3, r3, #1
 8020324:	9304      	str	r3, [sp, #16]
 8020326:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8020328:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802032c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802032e:	2302      	movs	r3, #2
 8020330:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8020332:	2301      	movs	r3, #1
 8020334:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020336:	2303      	movs	r3, #3
 8020338:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 802033a:	2307      	movs	r3, #7
 802033c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802033e:	a905      	add	r1, sp, #20
 8020340:	481a      	ldr	r0, [pc, #104]	; (80203ac <HAL_UART_MspInit+0x19c>)
 8020342:	f7f1 f90b 	bl	801155c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8020346:	481a      	ldr	r0, [pc, #104]	; (80203b0 <HAL_UART_MspInit+0x1a0>)
 8020348:	4b1a      	ldr	r3, [pc, #104]	; (80203b4 <HAL_UART_MspInit+0x1a4>)
 802034a:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 802034c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8020350:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8020352:	2340      	movs	r3, #64	; 0x40
 8020354:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8020356:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8020358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802035c:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802035e:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8020360:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8020362:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8020364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020368:	6203      	str	r3, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802036a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 802036c:	f7f0 f91c 	bl	80105a8 <HAL_DMA_Init>
 8020370:	b958      	cbnz	r0, 802038a <HAL_UART_MspInit+0x17a>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8020372:	4b0f      	ldr	r3, [pc, #60]	; (80203b0 <HAL_UART_MspInit+0x1a0>)
 8020374:	6323      	str	r3, [r4, #48]	; 0x30
 8020376:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8020378:	2200      	movs	r2, #0
 802037a:	2105      	movs	r1, #5
 802037c:	2025      	movs	r0, #37	; 0x25
 802037e:	f7f0 f859 	bl	8010434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8020382:	2025      	movs	r0, #37	; 0x25
 8020384:	f7f0 f888 	bl	8010498 <HAL_NVIC_EnableIRQ>
}
 8020388:	e753      	b.n	8020232 <HAL_UART_MspInit+0x22>
      Error_Handler();
 802038a:	f7fe fa09 	bl	801e7a0 <Error_Handler>
 802038e:	e7f0      	b.n	8020372 <HAL_UART_MspInit+0x162>
 8020390:	40005000 	.word	0x40005000
 8020394:	40011000 	.word	0x40011000
 8020398:	40023800 	.word	0x40023800
 802039c:	40020800 	.word	0x40020800
 80203a0:	40020c00 	.word	0x40020c00
 80203a4:	20019120 	.word	0x20019120
 80203a8:	400260b8 	.word	0x400260b8
 80203ac:	40020000 	.word	0x40020000
 80203b0:	20019040 	.word	0x20019040
 80203b4:	400264b8 	.word	0x400264b8

080203b8 <Web_thread>:

static portCHAR PAGE_BODY[768];
extern struct netif gnetif;
extern UART_HandleTypeDef huart5;

void Web_thread(void *arg) {
 80203b8:	b570      	push	{r4, r5, r6, lr}
 80203ba:	b08c      	sub	sp, #48	; 0x30
 80203bc:	4604      	mov	r4, r0
	struct netconn *arg_conn;
	arg_conn = (struct netconn *) arg;
	u16_t buflen;
	char* buf;
	struct fs_file file;
	FlashToJSON(&hjsondata, &hflash);
 80203be:	498a      	ldr	r1, [pc, #552]	; (80205e8 <Web_thread+0x230>)
 80203c0:	488a      	ldr	r0, [pc, #552]	; (80205ec <Web_thread+0x234>)
 80203c2:	f7fd fe6f 	bl	801e0a4 <FlashToJSON>

	osDelay(1);
 80203c6:	2001      	movs	r0, #1
 80203c8:	f7f2 fbfa 	bl	8012bc0 <osDelay>
 80203cc:	e016      	b.n	80203fc <Web_thread+0x44>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
						buf += 5;
						if ((strncmp((char const *) buf, " ", 1) == 0)
								|| (strncmp((char const *) buf, "index.shtml",
										11) == 0)) {
							fs_open(&file, "/index.shtml");
 80203ce:	4988      	ldr	r1, [pc, #544]	; (80205f0 <Web_thread+0x238>)
 80203d0:	a803      	add	r0, sp, #12
 80203d2:	f7f5 ffad 	bl	8016330 <fs_open>
							netconn_write(newconn,
 80203d6:	2300      	movs	r3, #0
 80203d8:	9300      	str	r3, [sp, #0]
 80203da:	9a04      	ldr	r2, [sp, #16]
 80203dc:	9903      	ldr	r1, [sp, #12]
 80203de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80203e0:	f7f4 fd90 	bl	8014f04 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 80203e4:	a803      	add	r0, sp, #12
 80203e6:	f7f5 ffc7 	bl	8016378 <fs_close>
							osDelay(1);
						}
					}
				}
			}
			netconn_close(newconn);
 80203ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80203ec:	f7f4 fdde 	bl	8014fac <netconn_close>
			netbuf_delete(inbuf);
 80203f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80203f2:	f7f5 fe15 	bl	8016020 <netbuf_delete>
			netconn_delete(newconn);
 80203f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80203f8:	f7f4 fc40 	bl	8014c7c <netconn_delete>
		err = netconn_accept(arg_conn, &newconn);
 80203fc:	a90a      	add	r1, sp, #40	; 0x28
 80203fe:	4620      	mov	r0, r4
 8020400:	f7f4 fcd2 	bl	8014da8 <netconn_accept>
		if (err == ERR_OK) {
 8020404:	2800      	cmp	r0, #0
 8020406:	d1f9      	bne.n	80203fc <Web_thread+0x44>
			recv_err = netconn_recv(newconn, &inbuf);
 8020408:	a90b      	add	r1, sp, #44	; 0x2c
 802040a:	980a      	ldr	r0, [sp, #40]	; 0x28
 802040c:	f7f4 fd28 	bl	8014e60 <netconn_recv>
			if (recv_err == ERR_OK) {
 8020410:	2800      	cmp	r0, #0
 8020412:	d1ea      	bne.n	80203ea <Web_thread+0x32>
				if (netconn_err(newconn) == ERR_OK) {
 8020414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020416:	f993 3008 	ldrsb.w	r3, [r3, #8]
 802041a:	2b00      	cmp	r3, #0
 802041c:	d1e5      	bne.n	80203ea <Web_thread+0x32>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 802041e:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8020422:	a908      	add	r1, sp, #32
 8020424:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020426:	f7f5 fe0b 	bl	8016040 <netbuf_data>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
 802042a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 802042e:	2b04      	cmp	r3, #4
 8020430:	d9db      	bls.n	80203ea <Web_thread+0x32>
 8020432:	9d08      	ldr	r5, [sp, #32]
 8020434:	2205      	movs	r2, #5
 8020436:	496f      	ldr	r1, [pc, #444]	; (80205f4 <Web_thread+0x23c>)
 8020438:	4628      	mov	r0, r5
 802043a:	f000 fa77 	bl	802092c <strncmp>
 802043e:	2800      	cmp	r0, #0
 8020440:	d1d3      	bne.n	80203ea <Web_thread+0x32>
						buf += 5;
 8020442:	1d6e      	adds	r6, r5, #5
 8020444:	9608      	str	r6, [sp, #32]
						if ((strncmp((char const *) buf, " ", 1) == 0)
 8020446:	796b      	ldrb	r3, [r5, #5]
 8020448:	2b20      	cmp	r3, #32
 802044a:	d0c0      	beq.n	80203ce <Web_thread+0x16>
								|| (strncmp((char const *) buf, "index.shtml",
 802044c:	220b      	movs	r2, #11
 802044e:	496a      	ldr	r1, [pc, #424]	; (80205f8 <Web_thread+0x240>)
 8020450:	4630      	mov	r0, r6
 8020452:	f000 fa6b 	bl	802092c <strncmp>
 8020456:	2800      	cmp	r0, #0
 8020458:	d0b9      	beq.n	80203ce <Web_thread+0x16>
						} else if (strncmp((char const *) buf, "img/logo.png",
 802045a:	220c      	movs	r2, #12
 802045c:	4967      	ldr	r1, [pc, #412]	; (80205fc <Web_thread+0x244>)
 802045e:	4630      	mov	r0, r6
 8020460:	f000 fa64 	bl	802092c <strncmp>
 8020464:	2800      	cmp	r0, #0
 8020466:	d039      	beq.n	80204dc <Web_thread+0x124>
						} else if (strncmp((char const *) buf, "img/icon.png",
 8020468:	220c      	movs	r2, #12
 802046a:	4965      	ldr	r1, [pc, #404]	; (8020600 <Web_thread+0x248>)
 802046c:	4630      	mov	r0, r6
 802046e:	f000 fa5d 	bl	802092c <strncmp>
 8020472:	2800      	cmp	r0, #0
 8020474:	d041      	beq.n	80204fa <Web_thread+0x142>
						} else if (strncmp((char const *) buf, "style.css", 9)
 8020476:	2209      	movs	r2, #9
 8020478:	4962      	ldr	r1, [pc, #392]	; (8020604 <Web_thread+0x24c>)
 802047a:	4630      	mov	r0, r6
 802047c:	f000 fa56 	bl	802092c <strncmp>
 8020480:	2800      	cmp	r0, #0
 8020482:	d049      	beq.n	8020518 <Web_thread+0x160>
						} else if (strncmp((char const *) buf, "AI.data?=", 9)
 8020484:	2209      	movs	r2, #9
 8020486:	4960      	ldr	r1, [pc, #384]	; (8020608 <Web_thread+0x250>)
 8020488:	4630      	mov	r0, r6
 802048a:	f000 fa4f 	bl	802092c <strncmp>
 802048e:	2800      	cmp	r0, #0
 8020490:	d051      	beq.n	8020536 <Web_thread+0x17e>
						} else if (strncmp((char const *) buf, "json=", 5)
 8020492:	2205      	movs	r2, #5
 8020494:	495d      	ldr	r1, [pc, #372]	; (802060c <Web_thread+0x254>)
 8020496:	4630      	mov	r0, r6
 8020498:	f000 fa48 	bl	802092c <strncmp>
 802049c:	2800      	cmp	r0, #0
 802049e:	d069      	beq.n	8020574 <Web_thread+0x1bc>
						} else if (strncmp((char const *) buf, "cmd.reboot=1",
 80204a0:	220c      	movs	r2, #12
 80204a2:	495b      	ldr	r1, [pc, #364]	; (8020610 <Web_thread+0x258>)
 80204a4:	4630      	mov	r0, r6
 80204a6:	f000 fa41 	bl	802092c <strncmp>
 80204aa:	2800      	cmp	r0, #0
 80204ac:	f040 8089 	bne.w	80205c2 <Web_thread+0x20a>
							netconn_write(newconn, PAGE_HEADER,
 80204b0:	4d58      	ldr	r5, [pc, #352]	; (8020614 <Web_thread+0x25c>)
 80204b2:	4628      	mov	r0, r5
 80204b4:	f7ef fddc 	bl	8010070 <strlen>
 80204b8:	2300      	movs	r3, #0
 80204ba:	9300      	str	r3, [sp, #0]
 80204bc:	2301      	movs	r3, #1
 80204be:	4602      	mov	r2, r0
 80204c0:	4629      	mov	r1, r5
 80204c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80204c4:	f7f4 fd1e 	bl	8014f04 <netconn_write_partly>
							LogText(INFO_SHOW, SUB_SYS_WEB, LOG_LEV_INFO, "Reboot by command from web-client.\r\n");
 80204c8:	4b53      	ldr	r3, [pc, #332]	; (8020618 <Web_thread+0x260>)
 80204ca:	2203      	movs	r2, #3
 80204cc:	2101      	movs	r1, #1
 80204ce:	4608      	mov	r0, r1
 80204d0:	f7fd ffe2 	bl	801e498 <LogText__>
							reboot_flag = 1;
 80204d4:	2201      	movs	r2, #1
 80204d6:	4b51      	ldr	r3, [pc, #324]	; (802061c <Web_thread+0x264>)
 80204d8:	601a      	str	r2, [r3, #0]
 80204da:	e786      	b.n	80203ea <Web_thread+0x32>
							fs_open(&file, "/img/logo.png");
 80204dc:	4950      	ldr	r1, [pc, #320]	; (8020620 <Web_thread+0x268>)
 80204de:	a803      	add	r0, sp, #12
 80204e0:	f7f5 ff26 	bl	8016330 <fs_open>
							netconn_write(newconn,
 80204e4:	2300      	movs	r3, #0
 80204e6:	9300      	str	r3, [sp, #0]
 80204e8:	9a04      	ldr	r2, [sp, #16]
 80204ea:	9903      	ldr	r1, [sp, #12]
 80204ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80204ee:	f7f4 fd09 	bl	8014f04 <netconn_write_partly>
							fs_close(&file);
 80204f2:	a803      	add	r0, sp, #12
 80204f4:	f7f5 ff40 	bl	8016378 <fs_close>
 80204f8:	e777      	b.n	80203ea <Web_thread+0x32>
							fs_open(&file, "/img/icon.png");
 80204fa:	494a      	ldr	r1, [pc, #296]	; (8020624 <Web_thread+0x26c>)
 80204fc:	a803      	add	r0, sp, #12
 80204fe:	f7f5 ff17 	bl	8016330 <fs_open>
							netconn_write(newconn,
 8020502:	2300      	movs	r3, #0
 8020504:	9300      	str	r3, [sp, #0]
 8020506:	9a04      	ldr	r2, [sp, #16]
 8020508:	9903      	ldr	r1, [sp, #12]
 802050a:	980a      	ldr	r0, [sp, #40]	; 0x28
 802050c:	f7f4 fcfa 	bl	8014f04 <netconn_write_partly>
							fs_close(&file);
 8020510:	a803      	add	r0, sp, #12
 8020512:	f7f5 ff31 	bl	8016378 <fs_close>
 8020516:	e768      	b.n	80203ea <Web_thread+0x32>
							fs_open(&file, "/style.css");
 8020518:	4943      	ldr	r1, [pc, #268]	; (8020628 <Web_thread+0x270>)
 802051a:	a803      	add	r0, sp, #12
 802051c:	f7f5 ff08 	bl	8016330 <fs_open>
							netconn_write(newconn,
 8020520:	2300      	movs	r3, #0
 8020522:	9300      	str	r3, [sp, #0]
 8020524:	9a04      	ldr	r2, [sp, #16]
 8020526:	9903      	ldr	r1, [sp, #12]
 8020528:	980a      	ldr	r0, [sp, #40]	; 0x28
 802052a:	f7f4 fceb 	bl	8014f04 <netconn_write_partly>
							fs_close(&file);
 802052e:	a803      	add	r0, sp, #12
 8020530:	f7f5 ff22 	bl	8016378 <fs_close>
 8020534:	e759      	b.n	80203ea <Web_thread+0x32>
							json = (uint8_t*) pvPortMalloc(250);
 8020536:	20fa      	movs	r0, #250	; 0xfa
 8020538:	f7f2 ff4c 	bl	80133d4 <pvPortMalloc>
							if (json != NULL) {
 802053c:	4605      	mov	r5, r0
 802053e:	2800      	cmp	r0, #0
 8020540:	f43f af53 	beq.w	80203ea <Web_thread+0x32>
								GetJSONData(json);
 8020544:	f7fd fcc8 	bl	801ded8 <GetJSONData>
								sprintf(PAGE_BODY, "%s%s", PAGE_HEADER, json);
 8020548:	4e38      	ldr	r6, [pc, #224]	; (802062c <Web_thread+0x274>)
 802054a:	462b      	mov	r3, r5
 802054c:	4a31      	ldr	r2, [pc, #196]	; (8020614 <Web_thread+0x25c>)
 802054e:	4938      	ldr	r1, [pc, #224]	; (8020630 <Web_thread+0x278>)
 8020550:	4630      	mov	r0, r6
 8020552:	f7ff fabe 	bl	801fad2 <siprintf>
								netconn_write(newconn, PAGE_BODY,
 8020556:	4630      	mov	r0, r6
 8020558:	f7ef fd8a 	bl	8010070 <strlen>
 802055c:	2300      	movs	r3, #0
 802055e:	9300      	str	r3, [sp, #0]
 8020560:	2301      	movs	r3, #1
 8020562:	4602      	mov	r2, r0
 8020564:	4631      	mov	r1, r6
 8020566:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020568:	f7f4 fccc 	bl	8014f04 <netconn_write_partly>
								vPortFree(json);
 802056c:	4628      	mov	r0, r5
 802056e:	f7f2 ffb5 	bl	80134dc <vPortFree>
 8020572:	e73a      	b.n	80203ea <Web_thread+0x32>
							json_str = (uint8_t*) pvPortMalloc(250);
 8020574:	20fa      	movs	r0, #250	; 0xfa
 8020576:	f7f2 ff2d 	bl	80133d4 <pvPortMalloc>
							if (json_str != NULL) {
 802057a:	4605      	mov	r5, r0
 802057c:	2800      	cmp	r0, #0
 802057e:	f43f af34 	beq.w	80203ea <Web_thread+0x32>
								DecodeURL((uint8_t*) buf + 5, json_str);
 8020582:	4601      	mov	r1, r0
 8020584:	9808      	ldr	r0, [sp, #32]
 8020586:	3005      	adds	r0, #5
 8020588:	f7fd fe30 	bl	801e1ec <DecodeURL>
								ParseJSON(&hjsondata, json_str);
 802058c:	4e17      	ldr	r6, [pc, #92]	; (80205ec <Web_thread+0x234>)
 802058e:	4629      	mov	r1, r5
 8020590:	4630      	mov	r0, r6
 8020592:	f7fd fe55 	bl	801e240 <ParseJSON>
								JSONToFlash(&hjsondata, &hflash);
 8020596:	4914      	ldr	r1, [pc, #80]	; (80205e8 <Web_thread+0x230>)
 8020598:	4630      	mov	r0, r6
 802059a:	f7fd ff07 	bl	801e3ac <JSONToFlash>
								SaveFash();
 802059e:	f7fc fb09 	bl	801cbb4 <SaveFash>
								netconn_write(newconn, PAGE_HEADER,
 80205a2:	4e1c      	ldr	r6, [pc, #112]	; (8020614 <Web_thread+0x25c>)
 80205a4:	4630      	mov	r0, r6
 80205a6:	f7ef fd63 	bl	8010070 <strlen>
 80205aa:	2300      	movs	r3, #0
 80205ac:	9300      	str	r3, [sp, #0]
 80205ae:	2301      	movs	r3, #1
 80205b0:	4602      	mov	r2, r0
 80205b2:	4631      	mov	r1, r6
 80205b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80205b6:	f7f4 fca5 	bl	8014f04 <netconn_write_partly>
								vPortFree(json_str);
 80205ba:	4628      	mov	r0, r5
 80205bc:	f7f2 ff8e 	bl	80134dc <vPortFree>
 80205c0:	e713      	b.n	80203ea <Web_thread+0x32>
							fs_open(&file, "/404.html");
 80205c2:	491c      	ldr	r1, [pc, #112]	; (8020634 <Web_thread+0x27c>)
 80205c4:	a803      	add	r0, sp, #12
 80205c6:	f7f5 feb3 	bl	8016330 <fs_open>
							netconn_write(newconn,
 80205ca:	2300      	movs	r3, #0
 80205cc:	9300      	str	r3, [sp, #0]
 80205ce:	9a04      	ldr	r2, [sp, #16]
 80205d0:	9903      	ldr	r1, [sp, #12]
 80205d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80205d4:	f7f4 fc96 	bl	8014f04 <netconn_write_partly>
							fs_close(&file);
 80205d8:	a803      	add	r0, sp, #12
 80205da:	f7f5 fecd 	bl	8016378 <fs_close>
							osDelay(1);
 80205de:	2001      	movs	r0, #1
 80205e0:	f7f2 faee 	bl	8012bc0 <osDelay>
 80205e4:	e701      	b.n	80203ea <Web_thread+0x32>
 80205e6:	bf00      	nop
 80205e8:	20015ce4 	.word	0x20015ce4
 80205ec:	20018e1c 	.word	0x20018e1c
 80205f0:	08027310 	.word	0x08027310
 80205f4:	080272fc 	.word	0x080272fc
 80205f8:	08027304 	.word	0x08027304
 80205fc:	08027320 	.word	0x08027320
 8020600:	08027340 	.word	0x08027340
 8020604:	08027360 	.word	0x08027360
 8020608:	08027378 	.word	0x08027378
 802060c:	0802738c 	.word	0x0802738c
 8020610:	08027394 	.word	0x08027394
 8020614:	08027290 	.word	0x08027290
 8020618:	080273a4 	.word	0x080273a4
 802061c:	20010f88 	.word	0x20010f88
 8020620:	08027330 	.word	0x08027330
 8020624:	08027350 	.word	0x08027350
 8020628:	0802736c 	.word	0x0802736c
 802062c:	20010c88 	.word	0x20010c88
 8020630:	08027384 	.word	0x08027384
 8020634:	080273cc 	.word	0x080273cc

08020638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8020638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020670 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 802063c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 802063e:	e003      	b.n	8020648 <LoopCopyDataInit>

08020640 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8020640:	4b0c      	ldr	r3, [pc, #48]	; (8020674 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8020642:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8020644:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8020646:	3104      	adds	r1, #4

08020648 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8020648:	480b      	ldr	r0, [pc, #44]	; (8020678 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 802064a:	4b0c      	ldr	r3, [pc, #48]	; (802067c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 802064c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 802064e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8020650:	d3f6      	bcc.n	8020640 <CopyDataInit>
  ldr  r2, =_sbss
 8020652:	4a0b      	ldr	r2, [pc, #44]	; (8020680 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8020654:	e002      	b.n	802065c <LoopFillZerobss>

08020656 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8020656:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8020658:	f842 3b04 	str.w	r3, [r2], #4

0802065c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 802065c:	4b09      	ldr	r3, [pc, #36]	; (8020684 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 802065e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8020660:	d3f9      	bcc.n	8020656 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8020662:	f7fe feeb 	bl	801f43c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020666:	f000 f8f9 	bl	802085c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802066a:	f7fe f8f3 	bl	801e854 <main>
  bx  lr    
 802066e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8020670:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8020674:	080275d0 	.word	0x080275d0
  ldr  r0, =_sdata
 8020678:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 802067c:	20000214 	.word	0x20000214
  ldr  r2, =_sbss
 8020680:	20000214 	.word	0x20000214
  ldr  r3, = _ebss
 8020684:	20019180 	.word	0x20019180

08020688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020688:	e7fe      	b.n	8020688 <ADC_IRQHandler>

0802068a <TestCalculateFCS>:

/* Includes */
#include "test_protocol.h"
/* -------- */

void TestCalculateFCS() {
 802068a:	b530      	push	{r4, r5, lr}
 802068c:	b085      	sub	sp, #20
	uint8_t buf[3];
	memset(buf, 0x00, sizeof(buf));
 802068e:	2400      	movs	r4, #0
	buf[0] = 0x01;
 8020690:	2301      	movs	r3, #1
 8020692:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = 0x01;
 8020696:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = 0x01;
 802069a:	f88d 300e 	strb.w	r3, [sp, #14]
	TEST_ASSERT_EQUAL_HEX8(0x03, CalculateFCS(buf, 3));
 802069e:	2103      	movs	r1, #3
 80206a0:	a803      	add	r0, sp, #12
 80206a2:	f7fe fbb5 	bl	801ee10 <CalculateFCS>
 80206a6:	2541      	movs	r5, #65	; 0x41
 80206a8:	9500      	str	r5, [sp, #0]
 80206aa:	2312      	movs	r3, #18
 80206ac:	4622      	mov	r2, r4
 80206ae:	b241      	sxtb	r1, r0
 80206b0:	2003      	movs	r0, #3
 80206b2:	f7ff fc95 	bl	801ffe0 <UnityAssertEqualNumber>

	memset(buf, 0x00, sizeof(buf));
	buf[0] = 0xAA;
 80206b6:	23aa      	movs	r3, #170	; 0xaa
 80206b8:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = 0x0F;
 80206bc:	230f      	movs	r3, #15
 80206be:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = 0xCD;
 80206c2:	23cd      	movs	r3, #205	; 0xcd
 80206c4:	f88d 300e 	strb.w	r3, [sp, #14]
	TEST_ASSERT_EQUAL_HEX8(0x86, CalculateFCS(buf, 3));
 80206c8:	2103      	movs	r1, #3
 80206ca:	a803      	add	r0, sp, #12
 80206cc:	f7fe fba0 	bl	801ee10 <CalculateFCS>
 80206d0:	9500      	str	r5, [sp, #0]
 80206d2:	2318      	movs	r3, #24
 80206d4:	4622      	mov	r2, r4
 80206d6:	b241      	sxtb	r1, r0
 80206d8:	f06f 0079 	mvn.w	r0, #121	; 0x79
 80206dc:	f7ff fc80 	bl	801ffe0 <UnityAssertEqualNumber>
}
 80206e0:	b005      	add	sp, #20
 80206e2:	bd30      	pop	{r4, r5, pc}

080206e4 <TestGetNextMaster>:

void TestGetNextMaster() {
 80206e4:	b530      	push	{r4, r5, lr}
 80206e6:	b089      	sub	sp, #36	; 0x24
	profibus_MPI_t test_prot;
	test_prot.own_address = 0x03U;
 80206e8:	2303      	movs	r3, #3
 80206ea:	f88d 3008 	strb.w	r3, [sp, #8]
	test_prot.bus_masters = 0x00;
 80206ee:	2400      	movs	r4, #0
 80206f0:	9407      	str	r4, [sp, #28]
	SET_BIT(test_prot.bus_masters, (0x01U << 0x05U));
 80206f2:	9b07      	ldr	r3, [sp, #28]
 80206f4:	f043 0320 	orr.w	r3, r3, #32
 80206f8:	9307      	str	r3, [sp, #28]
	SET_BIT(test_prot.bus_masters, (0x01U << 0x09U));
 80206fa:	9b07      	ldr	r3, [sp, #28]
 80206fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020700:	9307      	str	r3, [sp, #28]
	SET_BIT(test_prot.bus_masters, (0x01U << 0x0FU));
 8020702:	9b07      	ldr	r3, [sp, #28]
 8020704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8020708:	9307      	str	r3, [sp, #28]
	TEST_ASSERT_EQUAL_HEX8(0x05, GetNextMaster(&test_prot));
 802070a:	a802      	add	r0, sp, #8
 802070c:	f7fe fb8d 	bl	801ee2a <GetNextMaster>
 8020710:	2541      	movs	r5, #65	; 0x41
 8020712:	9500      	str	r5, [sp, #0]
 8020714:	2322      	movs	r3, #34	; 0x22
 8020716:	4622      	mov	r2, r4
 8020718:	b241      	sxtb	r1, r0
 802071a:	2005      	movs	r0, #5
 802071c:	f7ff fc60 	bl	801ffe0 <UnityAssertEqualNumber>

	test_prot.own_address = 0x06U;
 8020720:	2306      	movs	r3, #6
 8020722:	f88d 3008 	strb.w	r3, [sp, #8]
	TEST_ASSERT_EQUAL_HEX8(0x09, GetNextMaster(&test_prot));
 8020726:	a802      	add	r0, sp, #8
 8020728:	f7fe fb7f 	bl	801ee2a <GetNextMaster>
 802072c:	9500      	str	r5, [sp, #0]
 802072e:	2325      	movs	r3, #37	; 0x25
 8020730:	4622      	mov	r2, r4
 8020732:	b241      	sxtb	r1, r0
 8020734:	2009      	movs	r0, #9
 8020736:	f7ff fc53 	bl	801ffe0 <UnityAssertEqualNumber>

	test_prot.own_address = 0x0DU;
 802073a:	230d      	movs	r3, #13
 802073c:	f88d 3008 	strb.w	r3, [sp, #8]
	TEST_ASSERT_EQUAL_HEX8(0x0F, GetNextMaster(&test_prot));
 8020740:	a802      	add	r0, sp, #8
 8020742:	f7fe fb72 	bl	801ee2a <GetNextMaster>
 8020746:	9500      	str	r5, [sp, #0]
 8020748:	2328      	movs	r3, #40	; 0x28
 802074a:	4622      	mov	r2, r4
 802074c:	b241      	sxtb	r1, r0
 802074e:	200f      	movs	r0, #15
 8020750:	f7ff fc46 	bl	801ffe0 <UnityAssertEqualNumber>

	test_prot.own_address = 0x12U;
 8020754:	2312      	movs	r3, #18
 8020756:	f88d 3008 	strb.w	r3, [sp, #8]
	TEST_ASSERT_EQUAL_HEX8(0x05, GetNextMaster(&test_prot));
 802075a:	a802      	add	r0, sp, #8
 802075c:	f7fe fb65 	bl	801ee2a <GetNextMaster>
 8020760:	9500      	str	r5, [sp, #0]
 8020762:	232b      	movs	r3, #43	; 0x2b
 8020764:	4622      	mov	r2, r4
 8020766:	b241      	sxtb	r1, r0
 8020768:	2005      	movs	r0, #5
 802076a:	f7ff fc39 	bl	801ffe0 <UnityAssertEqualNumber>
}
 802076e:	b009      	add	sp, #36	; 0x24
 8020770:	bd30      	pop	{r4, r5, pc}

08020772 <TestCheckMaster>:

void TestCheckMaster() {
 8020772:	b530      	push	{r4, r5, lr}
 8020774:	b089      	sub	sp, #36	; 0x24
	profibus_MPI_t test_prot;
	test_prot.own_address = 0x03U;
 8020776:	2303      	movs	r3, #3
 8020778:	f88d 3008 	strb.w	r3, [sp, #8]
	test_prot.bus_masters = 0x00;
 802077c:	2400      	movs	r4, #0
 802077e:	9407      	str	r4, [sp, #28]
	SET_BIT(test_prot.bus_masters, (0x01U << 0x05U));
 8020780:	9b07      	ldr	r3, [sp, #28]
 8020782:	f043 0320 	orr.w	r3, r3, #32
 8020786:	9307      	str	r3, [sp, #28]
	SET_BIT(test_prot.bus_masters, (0x01U << 0x09U));
 8020788:	9b07      	ldr	r3, [sp, #28]
 802078a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802078e:	9307      	str	r3, [sp, #28]
	SET_BIT(test_prot.bus_masters, (0x01U << 0x0FU));
 8020790:	9b07      	ldr	r3, [sp, #28]
 8020792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8020796:	9307      	str	r3, [sp, #28]

	TEST_ASSERT_EQUAL_HEX8(0U, CheckMaster(&test_prot,0x00));
 8020798:	4621      	mov	r1, r4
 802079a:	a802      	add	r0, sp, #8
 802079c:	f7fe fd3a 	bl	801f214 <CheckMaster>
 80207a0:	2541      	movs	r5, #65	; 0x41
 80207a2:	9500      	str	r5, [sp, #0]
 80207a4:	2336      	movs	r3, #54	; 0x36
 80207a6:	4622      	mov	r2, r4
 80207a8:	b241      	sxtb	r1, r0
 80207aa:	4620      	mov	r0, r4
 80207ac:	f7ff fc18 	bl	801ffe0 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_HEX8(0U, CheckMaster(&test_prot,0x04));
 80207b0:	2104      	movs	r1, #4
 80207b2:	a802      	add	r0, sp, #8
 80207b4:	f7fe fd2e 	bl	801f214 <CheckMaster>
 80207b8:	9500      	str	r5, [sp, #0]
 80207ba:	2337      	movs	r3, #55	; 0x37
 80207bc:	4622      	mov	r2, r4
 80207be:	b241      	sxtb	r1, r0
 80207c0:	4620      	mov	r0, r4
 80207c2:	f7ff fc0d 	bl	801ffe0 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_HEX8(1U, CheckMaster(&test_prot,0x05));
 80207c6:	2105      	movs	r1, #5
 80207c8:	a802      	add	r0, sp, #8
 80207ca:	f7fe fd23 	bl	801f214 <CheckMaster>
 80207ce:	9500      	str	r5, [sp, #0]
 80207d0:	2338      	movs	r3, #56	; 0x38
 80207d2:	4622      	mov	r2, r4
 80207d4:	b241      	sxtb	r1, r0
 80207d6:	2001      	movs	r0, #1
 80207d8:	f7ff fc02 	bl	801ffe0 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_HEX8(1U, CheckMaster(&test_prot,0x09));
 80207dc:	2109      	movs	r1, #9
 80207de:	a802      	add	r0, sp, #8
 80207e0:	f7fe fd18 	bl	801f214 <CheckMaster>
 80207e4:	9500      	str	r5, [sp, #0]
 80207e6:	2339      	movs	r3, #57	; 0x39
 80207e8:	4622      	mov	r2, r4
 80207ea:	b241      	sxtb	r1, r0
 80207ec:	2001      	movs	r0, #1
 80207ee:	f7ff fbf7 	bl	801ffe0 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_HEX8(1U, CheckMaster(&test_prot,0x0F));
 80207f2:	210f      	movs	r1, #15
 80207f4:	a802      	add	r0, sp, #8
 80207f6:	f7fe fd0d 	bl	801f214 <CheckMaster>
 80207fa:	9500      	str	r5, [sp, #0]
 80207fc:	233a      	movs	r3, #58	; 0x3a
 80207fe:	4622      	mov	r2, r4
 8020800:	b241      	sxtb	r1, r0
 8020802:	2001      	movs	r0, #1
 8020804:	f7ff fbec 	bl	801ffe0 <UnityAssertEqualNumber>

}
 8020808:	b009      	add	sp, #36	; 0x24
 802080a:	bd30      	pop	{r4, r5, pc}

0802080c <RunAllTests>:

/* Includes */
#include "test_runner.h"
/* -------- */

void RunAllTests(void) {
 802080c:	b508      	push	{r3, lr}
	UNITY_BEGIN();
 802080e:	480a      	ldr	r0, [pc, #40]	; (8020838 <RunAllTests+0x2c>)
 8020810:	f7ff fc3c 	bl	802008c <UnityBegin>
	RUN_TEST(TestCalculateFCS);
 8020814:	220e      	movs	r2, #14
 8020816:	4909      	ldr	r1, [pc, #36]	; (802083c <RunAllTests+0x30>)
 8020818:	4809      	ldr	r0, [pc, #36]	; (8020840 <RunAllTests+0x34>)
 802081a:	f7ff fc11 	bl	8020040 <UnityDefaultTestRun>
	RUN_TEST(TestGetNextMaster);
 802081e:	220f      	movs	r2, #15
 8020820:	4908      	ldr	r1, [pc, #32]	; (8020844 <RunAllTests+0x38>)
 8020822:	4809      	ldr	r0, [pc, #36]	; (8020848 <RunAllTests+0x3c>)
 8020824:	f7ff fc0c 	bl	8020040 <UnityDefaultTestRun>
	RUN_TEST(TestCheckMaster);
 8020828:	2210      	movs	r2, #16
 802082a:	4908      	ldr	r1, [pc, #32]	; (802084c <RunAllTests+0x40>)
 802082c:	4808      	ldr	r0, [pc, #32]	; (8020850 <RunAllTests+0x44>)
 802082e:	f7ff fc07 	bl	8020040 <UnityDefaultTestRun>
	UNITY_END();
 8020832:	f7ff fc3b 	bl	80200ac <UnityEnd>
 8020836:	bd08      	pop	{r3, pc}
 8020838:	080273d8 	.word	0x080273d8
 802083c:	080273f0 	.word	0x080273f0
 8020840:	0802068b 	.word	0x0802068b
 8020844:	08027404 	.word	0x08027404
 8020848:	080206e5 	.word	0x080206e5
 802084c:	08027418 	.word	0x08027418
 8020850:	08020773 	.word	0x08020773

08020854 <atoi>:
 8020854:	220a      	movs	r2, #10
 8020856:	2100      	movs	r1, #0
 8020858:	f000 b8fa 	b.w	8020a50 <strtol>

0802085c <__libc_init_array>:
 802085c:	b570      	push	{r4, r5, r6, lr}
 802085e:	4e0d      	ldr	r6, [pc, #52]	; (8020894 <__libc_init_array+0x38>)
 8020860:	4c0d      	ldr	r4, [pc, #52]	; (8020898 <__libc_init_array+0x3c>)
 8020862:	1ba4      	subs	r4, r4, r6
 8020864:	10a4      	asrs	r4, r4, #2
 8020866:	2500      	movs	r5, #0
 8020868:	42a5      	cmp	r5, r4
 802086a:	d109      	bne.n	8020880 <__libc_init_array+0x24>
 802086c:	4e0b      	ldr	r6, [pc, #44]	; (802089c <__libc_init_array+0x40>)
 802086e:	4c0c      	ldr	r4, [pc, #48]	; (80208a0 <__libc_init_array+0x44>)
 8020870:	f000 fd70 	bl	8021354 <_init>
 8020874:	1ba4      	subs	r4, r4, r6
 8020876:	10a4      	asrs	r4, r4, #2
 8020878:	2500      	movs	r5, #0
 802087a:	42a5      	cmp	r5, r4
 802087c:	d105      	bne.n	802088a <__libc_init_array+0x2e>
 802087e:	bd70      	pop	{r4, r5, r6, pc}
 8020880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8020884:	4798      	blx	r3
 8020886:	3501      	adds	r5, #1
 8020888:	e7ee      	b.n	8020868 <__libc_init_array+0xc>
 802088a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802088e:	4798      	blx	r3
 8020890:	3501      	adds	r5, #1
 8020892:	e7f2      	b.n	802087a <__libc_init_array+0x1e>
 8020894:	080275c8 	.word	0x080275c8
 8020898:	080275c8 	.word	0x080275c8
 802089c:	080275c8 	.word	0x080275c8
 80208a0:	080275cc 	.word	0x080275cc

080208a4 <__itoa>:
 80208a4:	1e93      	subs	r3, r2, #2
 80208a6:	2b22      	cmp	r3, #34	; 0x22
 80208a8:	b510      	push	{r4, lr}
 80208aa:	460c      	mov	r4, r1
 80208ac:	d904      	bls.n	80208b8 <__itoa+0x14>
 80208ae:	2300      	movs	r3, #0
 80208b0:	700b      	strb	r3, [r1, #0]
 80208b2:	461c      	mov	r4, r3
 80208b4:	4620      	mov	r0, r4
 80208b6:	bd10      	pop	{r4, pc}
 80208b8:	2a0a      	cmp	r2, #10
 80208ba:	d109      	bne.n	80208d0 <__itoa+0x2c>
 80208bc:	2800      	cmp	r0, #0
 80208be:	da07      	bge.n	80208d0 <__itoa+0x2c>
 80208c0:	232d      	movs	r3, #45	; 0x2d
 80208c2:	700b      	strb	r3, [r1, #0]
 80208c4:	4240      	negs	r0, r0
 80208c6:	2101      	movs	r1, #1
 80208c8:	4421      	add	r1, r4
 80208ca:	f000 f8d7 	bl	8020a7c <__utoa>
 80208ce:	e7f1      	b.n	80208b4 <__itoa+0x10>
 80208d0:	2100      	movs	r1, #0
 80208d2:	e7f9      	b.n	80208c8 <__itoa+0x24>

080208d4 <itoa>:
 80208d4:	f7ff bfe6 	b.w	80208a4 <__itoa>

080208d8 <memcmp>:
 80208d8:	b510      	push	{r4, lr}
 80208da:	3901      	subs	r1, #1
 80208dc:	4402      	add	r2, r0
 80208de:	4290      	cmp	r0, r2
 80208e0:	d101      	bne.n	80208e6 <memcmp+0xe>
 80208e2:	2000      	movs	r0, #0
 80208e4:	bd10      	pop	{r4, pc}
 80208e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80208ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80208ee:	42a3      	cmp	r3, r4
 80208f0:	d0f5      	beq.n	80208de <memcmp+0x6>
 80208f2:	1b18      	subs	r0, r3, r4
 80208f4:	bd10      	pop	{r4, pc}

080208f6 <memcpy>:
 80208f6:	b510      	push	{r4, lr}
 80208f8:	1e43      	subs	r3, r0, #1
 80208fa:	440a      	add	r2, r1
 80208fc:	4291      	cmp	r1, r2
 80208fe:	d100      	bne.n	8020902 <memcpy+0xc>
 8020900:	bd10      	pop	{r4, pc}
 8020902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020906:	f803 4f01 	strb.w	r4, [r3, #1]!
 802090a:	e7f7      	b.n	80208fc <memcpy+0x6>

0802090c <memset>:
 802090c:	4402      	add	r2, r0
 802090e:	4603      	mov	r3, r0
 8020910:	4293      	cmp	r3, r2
 8020912:	d100      	bne.n	8020916 <memset+0xa>
 8020914:	4770      	bx	lr
 8020916:	f803 1b01 	strb.w	r1, [r3], #1
 802091a:	e7f9      	b.n	8020910 <memset+0x4>

0802091c <strcpy>:
 802091c:	4603      	mov	r3, r0
 802091e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020922:	f803 2b01 	strb.w	r2, [r3], #1
 8020926:	2a00      	cmp	r2, #0
 8020928:	d1f9      	bne.n	802091e <strcpy+0x2>
 802092a:	4770      	bx	lr

0802092c <strncmp>:
 802092c:	b510      	push	{r4, lr}
 802092e:	b16a      	cbz	r2, 802094c <strncmp+0x20>
 8020930:	3901      	subs	r1, #1
 8020932:	1884      	adds	r4, r0, r2
 8020934:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020938:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802093c:	4293      	cmp	r3, r2
 802093e:	d103      	bne.n	8020948 <strncmp+0x1c>
 8020940:	42a0      	cmp	r0, r4
 8020942:	d001      	beq.n	8020948 <strncmp+0x1c>
 8020944:	2b00      	cmp	r3, #0
 8020946:	d1f5      	bne.n	8020934 <strncmp+0x8>
 8020948:	1a98      	subs	r0, r3, r2
 802094a:	bd10      	pop	{r4, pc}
 802094c:	4610      	mov	r0, r2
 802094e:	bd10      	pop	{r4, pc}

08020950 <_strtol_l.isra.0>:
 8020950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020954:	4680      	mov	r8, r0
 8020956:	4689      	mov	r9, r1
 8020958:	4692      	mov	sl, r2
 802095a:	461f      	mov	r7, r3
 802095c:	468b      	mov	fp, r1
 802095e:	465d      	mov	r5, fp
 8020960:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020962:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020966:	f000 fb05 	bl	8020f74 <__locale_ctype_ptr_l>
 802096a:	4420      	add	r0, r4
 802096c:	7846      	ldrb	r6, [r0, #1]
 802096e:	f016 0608 	ands.w	r6, r6, #8
 8020972:	d10b      	bne.n	802098c <_strtol_l.isra.0+0x3c>
 8020974:	2c2d      	cmp	r4, #45	; 0x2d
 8020976:	d10b      	bne.n	8020990 <_strtol_l.isra.0+0x40>
 8020978:	782c      	ldrb	r4, [r5, #0]
 802097a:	2601      	movs	r6, #1
 802097c:	f10b 0502 	add.w	r5, fp, #2
 8020980:	b167      	cbz	r7, 802099c <_strtol_l.isra.0+0x4c>
 8020982:	2f10      	cmp	r7, #16
 8020984:	d114      	bne.n	80209b0 <_strtol_l.isra.0+0x60>
 8020986:	2c30      	cmp	r4, #48	; 0x30
 8020988:	d00a      	beq.n	80209a0 <_strtol_l.isra.0+0x50>
 802098a:	e011      	b.n	80209b0 <_strtol_l.isra.0+0x60>
 802098c:	46ab      	mov	fp, r5
 802098e:	e7e6      	b.n	802095e <_strtol_l.isra.0+0xe>
 8020990:	2c2b      	cmp	r4, #43	; 0x2b
 8020992:	bf04      	itt	eq
 8020994:	782c      	ldrbeq	r4, [r5, #0]
 8020996:	f10b 0502 	addeq.w	r5, fp, #2
 802099a:	e7f1      	b.n	8020980 <_strtol_l.isra.0+0x30>
 802099c:	2c30      	cmp	r4, #48	; 0x30
 802099e:	d127      	bne.n	80209f0 <_strtol_l.isra.0+0xa0>
 80209a0:	782b      	ldrb	r3, [r5, #0]
 80209a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80209a6:	2b58      	cmp	r3, #88	; 0x58
 80209a8:	d14b      	bne.n	8020a42 <_strtol_l.isra.0+0xf2>
 80209aa:	786c      	ldrb	r4, [r5, #1]
 80209ac:	2710      	movs	r7, #16
 80209ae:	3502      	adds	r5, #2
 80209b0:	2e00      	cmp	r6, #0
 80209b2:	bf0c      	ite	eq
 80209b4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80209b8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80209bc:	2200      	movs	r2, #0
 80209be:	fbb1 fef7 	udiv	lr, r1, r7
 80209c2:	4610      	mov	r0, r2
 80209c4:	fb07 1c1e 	mls	ip, r7, lr, r1
 80209c8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80209cc:	2b09      	cmp	r3, #9
 80209ce:	d811      	bhi.n	80209f4 <_strtol_l.isra.0+0xa4>
 80209d0:	461c      	mov	r4, r3
 80209d2:	42a7      	cmp	r7, r4
 80209d4:	dd1d      	ble.n	8020a12 <_strtol_l.isra.0+0xc2>
 80209d6:	1c53      	adds	r3, r2, #1
 80209d8:	d007      	beq.n	80209ea <_strtol_l.isra.0+0x9a>
 80209da:	4586      	cmp	lr, r0
 80209dc:	d316      	bcc.n	8020a0c <_strtol_l.isra.0+0xbc>
 80209de:	d101      	bne.n	80209e4 <_strtol_l.isra.0+0x94>
 80209e0:	45a4      	cmp	ip, r4
 80209e2:	db13      	blt.n	8020a0c <_strtol_l.isra.0+0xbc>
 80209e4:	fb00 4007 	mla	r0, r0, r7, r4
 80209e8:	2201      	movs	r2, #1
 80209ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80209ee:	e7eb      	b.n	80209c8 <_strtol_l.isra.0+0x78>
 80209f0:	270a      	movs	r7, #10
 80209f2:	e7dd      	b.n	80209b0 <_strtol_l.isra.0+0x60>
 80209f4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80209f8:	2b19      	cmp	r3, #25
 80209fa:	d801      	bhi.n	8020a00 <_strtol_l.isra.0+0xb0>
 80209fc:	3c37      	subs	r4, #55	; 0x37
 80209fe:	e7e8      	b.n	80209d2 <_strtol_l.isra.0+0x82>
 8020a00:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8020a04:	2b19      	cmp	r3, #25
 8020a06:	d804      	bhi.n	8020a12 <_strtol_l.isra.0+0xc2>
 8020a08:	3c57      	subs	r4, #87	; 0x57
 8020a0a:	e7e2      	b.n	80209d2 <_strtol_l.isra.0+0x82>
 8020a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8020a10:	e7eb      	b.n	80209ea <_strtol_l.isra.0+0x9a>
 8020a12:	1c53      	adds	r3, r2, #1
 8020a14:	d108      	bne.n	8020a28 <_strtol_l.isra.0+0xd8>
 8020a16:	2322      	movs	r3, #34	; 0x22
 8020a18:	f8c8 3000 	str.w	r3, [r8]
 8020a1c:	4608      	mov	r0, r1
 8020a1e:	f1ba 0f00 	cmp.w	sl, #0
 8020a22:	d107      	bne.n	8020a34 <_strtol_l.isra.0+0xe4>
 8020a24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a28:	b106      	cbz	r6, 8020a2c <_strtol_l.isra.0+0xdc>
 8020a2a:	4240      	negs	r0, r0
 8020a2c:	f1ba 0f00 	cmp.w	sl, #0
 8020a30:	d00c      	beq.n	8020a4c <_strtol_l.isra.0+0xfc>
 8020a32:	b122      	cbz	r2, 8020a3e <_strtol_l.isra.0+0xee>
 8020a34:	3d01      	subs	r5, #1
 8020a36:	f8ca 5000 	str.w	r5, [sl]
 8020a3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a3e:	464d      	mov	r5, r9
 8020a40:	e7f9      	b.n	8020a36 <_strtol_l.isra.0+0xe6>
 8020a42:	2430      	movs	r4, #48	; 0x30
 8020a44:	2f00      	cmp	r7, #0
 8020a46:	d1b3      	bne.n	80209b0 <_strtol_l.isra.0+0x60>
 8020a48:	2708      	movs	r7, #8
 8020a4a:	e7b1      	b.n	80209b0 <_strtol_l.isra.0+0x60>
 8020a4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020a50 <strtol>:
 8020a50:	4b08      	ldr	r3, [pc, #32]	; (8020a74 <strtol+0x24>)
 8020a52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020a54:	681c      	ldr	r4, [r3, #0]
 8020a56:	4d08      	ldr	r5, [pc, #32]	; (8020a78 <strtol+0x28>)
 8020a58:	6a23      	ldr	r3, [r4, #32]
 8020a5a:	2b00      	cmp	r3, #0
 8020a5c:	bf08      	it	eq
 8020a5e:	462b      	moveq	r3, r5
 8020a60:	9300      	str	r3, [sp, #0]
 8020a62:	4613      	mov	r3, r2
 8020a64:	460a      	mov	r2, r1
 8020a66:	4601      	mov	r1, r0
 8020a68:	4620      	mov	r0, r4
 8020a6a:	f7ff ff71 	bl	8020950 <_strtol_l.isra.0>
 8020a6e:	b003      	add	sp, #12
 8020a70:	bd30      	pop	{r4, r5, pc}
 8020a72:	bf00      	nop
 8020a74:	20000044 	.word	0x20000044
 8020a78:	200000a8 	.word	0x200000a8

08020a7c <__utoa>:
 8020a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a7e:	4c1e      	ldr	r4, [pc, #120]	; (8020af8 <__utoa+0x7c>)
 8020a80:	b08b      	sub	sp, #44	; 0x2c
 8020a82:	4603      	mov	r3, r0
 8020a84:	460f      	mov	r7, r1
 8020a86:	466d      	mov	r5, sp
 8020a88:	f104 0e20 	add.w	lr, r4, #32
 8020a8c:	6820      	ldr	r0, [r4, #0]
 8020a8e:	6861      	ldr	r1, [r4, #4]
 8020a90:	462e      	mov	r6, r5
 8020a92:	c603      	stmia	r6!, {r0, r1}
 8020a94:	3408      	adds	r4, #8
 8020a96:	4574      	cmp	r4, lr
 8020a98:	4635      	mov	r5, r6
 8020a9a:	d1f7      	bne.n	8020a8c <__utoa+0x10>
 8020a9c:	7921      	ldrb	r1, [r4, #4]
 8020a9e:	7131      	strb	r1, [r6, #4]
 8020aa0:	1e91      	subs	r1, r2, #2
 8020aa2:	6820      	ldr	r0, [r4, #0]
 8020aa4:	6030      	str	r0, [r6, #0]
 8020aa6:	2922      	cmp	r1, #34	; 0x22
 8020aa8:	f04f 0100 	mov.w	r1, #0
 8020aac:	d904      	bls.n	8020ab8 <__utoa+0x3c>
 8020aae:	7039      	strb	r1, [r7, #0]
 8020ab0:	460f      	mov	r7, r1
 8020ab2:	4638      	mov	r0, r7
 8020ab4:	b00b      	add	sp, #44	; 0x2c
 8020ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ab8:	1e78      	subs	r0, r7, #1
 8020aba:	4606      	mov	r6, r0
 8020abc:	fbb3 f5f2 	udiv	r5, r3, r2
 8020ac0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8020ac4:	fb02 3315 	mls	r3, r2, r5, r3
 8020ac8:	4473      	add	r3, lr
 8020aca:	1c4c      	adds	r4, r1, #1
 8020acc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8020ad0:	f806 3f01 	strb.w	r3, [r6, #1]!
 8020ad4:	462b      	mov	r3, r5
 8020ad6:	b965      	cbnz	r5, 8020af2 <__utoa+0x76>
 8020ad8:	553d      	strb	r5, [r7, r4]
 8020ada:	187a      	adds	r2, r7, r1
 8020adc:	1acc      	subs	r4, r1, r3
 8020ade:	42a3      	cmp	r3, r4
 8020ae0:	dae7      	bge.n	8020ab2 <__utoa+0x36>
 8020ae2:	7844      	ldrb	r4, [r0, #1]
 8020ae4:	7815      	ldrb	r5, [r2, #0]
 8020ae6:	f800 5f01 	strb.w	r5, [r0, #1]!
 8020aea:	3301      	adds	r3, #1
 8020aec:	f802 4901 	strb.w	r4, [r2], #-1
 8020af0:	e7f4      	b.n	8020adc <__utoa+0x60>
 8020af2:	4621      	mov	r1, r4
 8020af4:	e7e2      	b.n	8020abc <__utoa+0x40>
 8020af6:	bf00      	nop
 8020af8:	0802742c 	.word	0x0802742c

08020afc <__swbuf_r>:
 8020afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020afe:	460e      	mov	r6, r1
 8020b00:	4614      	mov	r4, r2
 8020b02:	4605      	mov	r5, r0
 8020b04:	b118      	cbz	r0, 8020b0e <__swbuf_r+0x12>
 8020b06:	6983      	ldr	r3, [r0, #24]
 8020b08:	b90b      	cbnz	r3, 8020b0e <__swbuf_r+0x12>
 8020b0a:	f000 f9a9 	bl	8020e60 <__sinit>
 8020b0e:	4b21      	ldr	r3, [pc, #132]	; (8020b94 <__swbuf_r+0x98>)
 8020b10:	429c      	cmp	r4, r3
 8020b12:	d12a      	bne.n	8020b6a <__swbuf_r+0x6e>
 8020b14:	686c      	ldr	r4, [r5, #4]
 8020b16:	69a3      	ldr	r3, [r4, #24]
 8020b18:	60a3      	str	r3, [r4, #8]
 8020b1a:	89a3      	ldrh	r3, [r4, #12]
 8020b1c:	071a      	lsls	r2, r3, #28
 8020b1e:	d52e      	bpl.n	8020b7e <__swbuf_r+0x82>
 8020b20:	6923      	ldr	r3, [r4, #16]
 8020b22:	b363      	cbz	r3, 8020b7e <__swbuf_r+0x82>
 8020b24:	6923      	ldr	r3, [r4, #16]
 8020b26:	6820      	ldr	r0, [r4, #0]
 8020b28:	1ac0      	subs	r0, r0, r3
 8020b2a:	6963      	ldr	r3, [r4, #20]
 8020b2c:	b2f6      	uxtb	r6, r6
 8020b2e:	4298      	cmp	r0, r3
 8020b30:	4637      	mov	r7, r6
 8020b32:	db04      	blt.n	8020b3e <__swbuf_r+0x42>
 8020b34:	4621      	mov	r1, r4
 8020b36:	4628      	mov	r0, r5
 8020b38:	f000 f928 	bl	8020d8c <_fflush_r>
 8020b3c:	bb28      	cbnz	r0, 8020b8a <__swbuf_r+0x8e>
 8020b3e:	68a3      	ldr	r3, [r4, #8]
 8020b40:	3b01      	subs	r3, #1
 8020b42:	60a3      	str	r3, [r4, #8]
 8020b44:	6823      	ldr	r3, [r4, #0]
 8020b46:	1c5a      	adds	r2, r3, #1
 8020b48:	6022      	str	r2, [r4, #0]
 8020b4a:	701e      	strb	r6, [r3, #0]
 8020b4c:	6963      	ldr	r3, [r4, #20]
 8020b4e:	3001      	adds	r0, #1
 8020b50:	4298      	cmp	r0, r3
 8020b52:	d004      	beq.n	8020b5e <__swbuf_r+0x62>
 8020b54:	89a3      	ldrh	r3, [r4, #12]
 8020b56:	07db      	lsls	r3, r3, #31
 8020b58:	d519      	bpl.n	8020b8e <__swbuf_r+0x92>
 8020b5a:	2e0a      	cmp	r6, #10
 8020b5c:	d117      	bne.n	8020b8e <__swbuf_r+0x92>
 8020b5e:	4621      	mov	r1, r4
 8020b60:	4628      	mov	r0, r5
 8020b62:	f000 f913 	bl	8020d8c <_fflush_r>
 8020b66:	b190      	cbz	r0, 8020b8e <__swbuf_r+0x92>
 8020b68:	e00f      	b.n	8020b8a <__swbuf_r+0x8e>
 8020b6a:	4b0b      	ldr	r3, [pc, #44]	; (8020b98 <__swbuf_r+0x9c>)
 8020b6c:	429c      	cmp	r4, r3
 8020b6e:	d101      	bne.n	8020b74 <__swbuf_r+0x78>
 8020b70:	68ac      	ldr	r4, [r5, #8]
 8020b72:	e7d0      	b.n	8020b16 <__swbuf_r+0x1a>
 8020b74:	4b09      	ldr	r3, [pc, #36]	; (8020b9c <__swbuf_r+0xa0>)
 8020b76:	429c      	cmp	r4, r3
 8020b78:	bf08      	it	eq
 8020b7a:	68ec      	ldreq	r4, [r5, #12]
 8020b7c:	e7cb      	b.n	8020b16 <__swbuf_r+0x1a>
 8020b7e:	4621      	mov	r1, r4
 8020b80:	4628      	mov	r0, r5
 8020b82:	f000 f80d 	bl	8020ba0 <__swsetup_r>
 8020b86:	2800      	cmp	r0, #0
 8020b88:	d0cc      	beq.n	8020b24 <__swbuf_r+0x28>
 8020b8a:	f04f 37ff 	mov.w	r7, #4294967295
 8020b8e:	4638      	mov	r0, r7
 8020b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b92:	bf00      	nop
 8020b94:	08027474 	.word	0x08027474
 8020b98:	08027494 	.word	0x08027494
 8020b9c:	08027454 	.word	0x08027454

08020ba0 <__swsetup_r>:
 8020ba0:	4b32      	ldr	r3, [pc, #200]	; (8020c6c <__swsetup_r+0xcc>)
 8020ba2:	b570      	push	{r4, r5, r6, lr}
 8020ba4:	681d      	ldr	r5, [r3, #0]
 8020ba6:	4606      	mov	r6, r0
 8020ba8:	460c      	mov	r4, r1
 8020baa:	b125      	cbz	r5, 8020bb6 <__swsetup_r+0x16>
 8020bac:	69ab      	ldr	r3, [r5, #24]
 8020bae:	b913      	cbnz	r3, 8020bb6 <__swsetup_r+0x16>
 8020bb0:	4628      	mov	r0, r5
 8020bb2:	f000 f955 	bl	8020e60 <__sinit>
 8020bb6:	4b2e      	ldr	r3, [pc, #184]	; (8020c70 <__swsetup_r+0xd0>)
 8020bb8:	429c      	cmp	r4, r3
 8020bba:	d10f      	bne.n	8020bdc <__swsetup_r+0x3c>
 8020bbc:	686c      	ldr	r4, [r5, #4]
 8020bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020bc2:	b29a      	uxth	r2, r3
 8020bc4:	0715      	lsls	r5, r2, #28
 8020bc6:	d42c      	bmi.n	8020c22 <__swsetup_r+0x82>
 8020bc8:	06d0      	lsls	r0, r2, #27
 8020bca:	d411      	bmi.n	8020bf0 <__swsetup_r+0x50>
 8020bcc:	2209      	movs	r2, #9
 8020bce:	6032      	str	r2, [r6, #0]
 8020bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020bd4:	81a3      	strh	r3, [r4, #12]
 8020bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8020bda:	bd70      	pop	{r4, r5, r6, pc}
 8020bdc:	4b25      	ldr	r3, [pc, #148]	; (8020c74 <__swsetup_r+0xd4>)
 8020bde:	429c      	cmp	r4, r3
 8020be0:	d101      	bne.n	8020be6 <__swsetup_r+0x46>
 8020be2:	68ac      	ldr	r4, [r5, #8]
 8020be4:	e7eb      	b.n	8020bbe <__swsetup_r+0x1e>
 8020be6:	4b24      	ldr	r3, [pc, #144]	; (8020c78 <__swsetup_r+0xd8>)
 8020be8:	429c      	cmp	r4, r3
 8020bea:	bf08      	it	eq
 8020bec:	68ec      	ldreq	r4, [r5, #12]
 8020bee:	e7e6      	b.n	8020bbe <__swsetup_r+0x1e>
 8020bf0:	0751      	lsls	r1, r2, #29
 8020bf2:	d512      	bpl.n	8020c1a <__swsetup_r+0x7a>
 8020bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020bf6:	b141      	cbz	r1, 8020c0a <__swsetup_r+0x6a>
 8020bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020bfc:	4299      	cmp	r1, r3
 8020bfe:	d002      	beq.n	8020c06 <__swsetup_r+0x66>
 8020c00:	4630      	mov	r0, r6
 8020c02:	f000 fa31 	bl	8021068 <_free_r>
 8020c06:	2300      	movs	r3, #0
 8020c08:	6363      	str	r3, [r4, #52]	; 0x34
 8020c0a:	89a3      	ldrh	r3, [r4, #12]
 8020c0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020c10:	81a3      	strh	r3, [r4, #12]
 8020c12:	2300      	movs	r3, #0
 8020c14:	6063      	str	r3, [r4, #4]
 8020c16:	6923      	ldr	r3, [r4, #16]
 8020c18:	6023      	str	r3, [r4, #0]
 8020c1a:	89a3      	ldrh	r3, [r4, #12]
 8020c1c:	f043 0308 	orr.w	r3, r3, #8
 8020c20:	81a3      	strh	r3, [r4, #12]
 8020c22:	6923      	ldr	r3, [r4, #16]
 8020c24:	b94b      	cbnz	r3, 8020c3a <__swsetup_r+0x9a>
 8020c26:	89a3      	ldrh	r3, [r4, #12]
 8020c28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020c30:	d003      	beq.n	8020c3a <__swsetup_r+0x9a>
 8020c32:	4621      	mov	r1, r4
 8020c34:	4630      	mov	r0, r6
 8020c36:	f000 f9c5 	bl	8020fc4 <__smakebuf_r>
 8020c3a:	89a2      	ldrh	r2, [r4, #12]
 8020c3c:	f012 0301 	ands.w	r3, r2, #1
 8020c40:	d00c      	beq.n	8020c5c <__swsetup_r+0xbc>
 8020c42:	2300      	movs	r3, #0
 8020c44:	60a3      	str	r3, [r4, #8]
 8020c46:	6963      	ldr	r3, [r4, #20]
 8020c48:	425b      	negs	r3, r3
 8020c4a:	61a3      	str	r3, [r4, #24]
 8020c4c:	6923      	ldr	r3, [r4, #16]
 8020c4e:	b953      	cbnz	r3, 8020c66 <__swsetup_r+0xc6>
 8020c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c54:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8020c58:	d1ba      	bne.n	8020bd0 <__swsetup_r+0x30>
 8020c5a:	bd70      	pop	{r4, r5, r6, pc}
 8020c5c:	0792      	lsls	r2, r2, #30
 8020c5e:	bf58      	it	pl
 8020c60:	6963      	ldrpl	r3, [r4, #20]
 8020c62:	60a3      	str	r3, [r4, #8]
 8020c64:	e7f2      	b.n	8020c4c <__swsetup_r+0xac>
 8020c66:	2000      	movs	r0, #0
 8020c68:	e7f7      	b.n	8020c5a <__swsetup_r+0xba>
 8020c6a:	bf00      	nop
 8020c6c:	20000044 	.word	0x20000044
 8020c70:	08027474 	.word	0x08027474
 8020c74:	08027494 	.word	0x08027494
 8020c78:	08027454 	.word	0x08027454

08020c7c <__sflush_r>:
 8020c7c:	898a      	ldrh	r2, [r1, #12]
 8020c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c82:	4605      	mov	r5, r0
 8020c84:	0710      	lsls	r0, r2, #28
 8020c86:	460c      	mov	r4, r1
 8020c88:	d45a      	bmi.n	8020d40 <__sflush_r+0xc4>
 8020c8a:	684b      	ldr	r3, [r1, #4]
 8020c8c:	2b00      	cmp	r3, #0
 8020c8e:	dc05      	bgt.n	8020c9c <__sflush_r+0x20>
 8020c90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020c92:	2b00      	cmp	r3, #0
 8020c94:	dc02      	bgt.n	8020c9c <__sflush_r+0x20>
 8020c96:	2000      	movs	r0, #0
 8020c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020c9e:	2e00      	cmp	r6, #0
 8020ca0:	d0f9      	beq.n	8020c96 <__sflush_r+0x1a>
 8020ca2:	2300      	movs	r3, #0
 8020ca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020ca8:	682f      	ldr	r7, [r5, #0]
 8020caa:	602b      	str	r3, [r5, #0]
 8020cac:	d033      	beq.n	8020d16 <__sflush_r+0x9a>
 8020cae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020cb0:	89a3      	ldrh	r3, [r4, #12]
 8020cb2:	075a      	lsls	r2, r3, #29
 8020cb4:	d505      	bpl.n	8020cc2 <__sflush_r+0x46>
 8020cb6:	6863      	ldr	r3, [r4, #4]
 8020cb8:	1ac0      	subs	r0, r0, r3
 8020cba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020cbc:	b10b      	cbz	r3, 8020cc2 <__sflush_r+0x46>
 8020cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020cc0:	1ac0      	subs	r0, r0, r3
 8020cc2:	2300      	movs	r3, #0
 8020cc4:	4602      	mov	r2, r0
 8020cc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020cc8:	6a21      	ldr	r1, [r4, #32]
 8020cca:	4628      	mov	r0, r5
 8020ccc:	47b0      	blx	r6
 8020cce:	1c43      	adds	r3, r0, #1
 8020cd0:	89a3      	ldrh	r3, [r4, #12]
 8020cd2:	d106      	bne.n	8020ce2 <__sflush_r+0x66>
 8020cd4:	6829      	ldr	r1, [r5, #0]
 8020cd6:	291d      	cmp	r1, #29
 8020cd8:	d84b      	bhi.n	8020d72 <__sflush_r+0xf6>
 8020cda:	4a2b      	ldr	r2, [pc, #172]	; (8020d88 <__sflush_r+0x10c>)
 8020cdc:	40ca      	lsrs	r2, r1
 8020cde:	07d6      	lsls	r6, r2, #31
 8020ce0:	d547      	bpl.n	8020d72 <__sflush_r+0xf6>
 8020ce2:	2200      	movs	r2, #0
 8020ce4:	6062      	str	r2, [r4, #4]
 8020ce6:	04d9      	lsls	r1, r3, #19
 8020ce8:	6922      	ldr	r2, [r4, #16]
 8020cea:	6022      	str	r2, [r4, #0]
 8020cec:	d504      	bpl.n	8020cf8 <__sflush_r+0x7c>
 8020cee:	1c42      	adds	r2, r0, #1
 8020cf0:	d101      	bne.n	8020cf6 <__sflush_r+0x7a>
 8020cf2:	682b      	ldr	r3, [r5, #0]
 8020cf4:	b903      	cbnz	r3, 8020cf8 <__sflush_r+0x7c>
 8020cf6:	6560      	str	r0, [r4, #84]	; 0x54
 8020cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020cfa:	602f      	str	r7, [r5, #0]
 8020cfc:	2900      	cmp	r1, #0
 8020cfe:	d0ca      	beq.n	8020c96 <__sflush_r+0x1a>
 8020d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020d04:	4299      	cmp	r1, r3
 8020d06:	d002      	beq.n	8020d0e <__sflush_r+0x92>
 8020d08:	4628      	mov	r0, r5
 8020d0a:	f000 f9ad 	bl	8021068 <_free_r>
 8020d0e:	2000      	movs	r0, #0
 8020d10:	6360      	str	r0, [r4, #52]	; 0x34
 8020d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d16:	6a21      	ldr	r1, [r4, #32]
 8020d18:	2301      	movs	r3, #1
 8020d1a:	4628      	mov	r0, r5
 8020d1c:	47b0      	blx	r6
 8020d1e:	1c41      	adds	r1, r0, #1
 8020d20:	d1c6      	bne.n	8020cb0 <__sflush_r+0x34>
 8020d22:	682b      	ldr	r3, [r5, #0]
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d0c3      	beq.n	8020cb0 <__sflush_r+0x34>
 8020d28:	2b1d      	cmp	r3, #29
 8020d2a:	d001      	beq.n	8020d30 <__sflush_r+0xb4>
 8020d2c:	2b16      	cmp	r3, #22
 8020d2e:	d101      	bne.n	8020d34 <__sflush_r+0xb8>
 8020d30:	602f      	str	r7, [r5, #0]
 8020d32:	e7b0      	b.n	8020c96 <__sflush_r+0x1a>
 8020d34:	89a3      	ldrh	r3, [r4, #12]
 8020d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d3a:	81a3      	strh	r3, [r4, #12]
 8020d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d40:	690f      	ldr	r7, [r1, #16]
 8020d42:	2f00      	cmp	r7, #0
 8020d44:	d0a7      	beq.n	8020c96 <__sflush_r+0x1a>
 8020d46:	0793      	lsls	r3, r2, #30
 8020d48:	680e      	ldr	r6, [r1, #0]
 8020d4a:	bf08      	it	eq
 8020d4c:	694b      	ldreq	r3, [r1, #20]
 8020d4e:	600f      	str	r7, [r1, #0]
 8020d50:	bf18      	it	ne
 8020d52:	2300      	movne	r3, #0
 8020d54:	eba6 0807 	sub.w	r8, r6, r7
 8020d58:	608b      	str	r3, [r1, #8]
 8020d5a:	f1b8 0f00 	cmp.w	r8, #0
 8020d5e:	dd9a      	ble.n	8020c96 <__sflush_r+0x1a>
 8020d60:	4643      	mov	r3, r8
 8020d62:	463a      	mov	r2, r7
 8020d64:	6a21      	ldr	r1, [r4, #32]
 8020d66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020d68:	4628      	mov	r0, r5
 8020d6a:	47b0      	blx	r6
 8020d6c:	2800      	cmp	r0, #0
 8020d6e:	dc07      	bgt.n	8020d80 <__sflush_r+0x104>
 8020d70:	89a3      	ldrh	r3, [r4, #12]
 8020d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d76:	81a3      	strh	r3, [r4, #12]
 8020d78:	f04f 30ff 	mov.w	r0, #4294967295
 8020d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d80:	4407      	add	r7, r0
 8020d82:	eba8 0800 	sub.w	r8, r8, r0
 8020d86:	e7e8      	b.n	8020d5a <__sflush_r+0xde>
 8020d88:	20400001 	.word	0x20400001

08020d8c <_fflush_r>:
 8020d8c:	b538      	push	{r3, r4, r5, lr}
 8020d8e:	690b      	ldr	r3, [r1, #16]
 8020d90:	4605      	mov	r5, r0
 8020d92:	460c      	mov	r4, r1
 8020d94:	b1db      	cbz	r3, 8020dce <_fflush_r+0x42>
 8020d96:	b118      	cbz	r0, 8020da0 <_fflush_r+0x14>
 8020d98:	6983      	ldr	r3, [r0, #24]
 8020d9a:	b90b      	cbnz	r3, 8020da0 <_fflush_r+0x14>
 8020d9c:	f000 f860 	bl	8020e60 <__sinit>
 8020da0:	4b0c      	ldr	r3, [pc, #48]	; (8020dd4 <_fflush_r+0x48>)
 8020da2:	429c      	cmp	r4, r3
 8020da4:	d109      	bne.n	8020dba <_fflush_r+0x2e>
 8020da6:	686c      	ldr	r4, [r5, #4]
 8020da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020dac:	b17b      	cbz	r3, 8020dce <_fflush_r+0x42>
 8020dae:	4621      	mov	r1, r4
 8020db0:	4628      	mov	r0, r5
 8020db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020db6:	f7ff bf61 	b.w	8020c7c <__sflush_r>
 8020dba:	4b07      	ldr	r3, [pc, #28]	; (8020dd8 <_fflush_r+0x4c>)
 8020dbc:	429c      	cmp	r4, r3
 8020dbe:	d101      	bne.n	8020dc4 <_fflush_r+0x38>
 8020dc0:	68ac      	ldr	r4, [r5, #8]
 8020dc2:	e7f1      	b.n	8020da8 <_fflush_r+0x1c>
 8020dc4:	4b05      	ldr	r3, [pc, #20]	; (8020ddc <_fflush_r+0x50>)
 8020dc6:	429c      	cmp	r4, r3
 8020dc8:	bf08      	it	eq
 8020dca:	68ec      	ldreq	r4, [r5, #12]
 8020dcc:	e7ec      	b.n	8020da8 <_fflush_r+0x1c>
 8020dce:	2000      	movs	r0, #0
 8020dd0:	bd38      	pop	{r3, r4, r5, pc}
 8020dd2:	bf00      	nop
 8020dd4:	08027474 	.word	0x08027474
 8020dd8:	08027494 	.word	0x08027494
 8020ddc:	08027454 	.word	0x08027454

08020de0 <_cleanup_r>:
 8020de0:	4901      	ldr	r1, [pc, #4]	; (8020de8 <_cleanup_r+0x8>)
 8020de2:	f000 b8a9 	b.w	8020f38 <_fwalk_reent>
 8020de6:	bf00      	nop
 8020de8:	08020d8d 	.word	0x08020d8d

08020dec <std.isra.0>:
 8020dec:	2300      	movs	r3, #0
 8020dee:	b510      	push	{r4, lr}
 8020df0:	4604      	mov	r4, r0
 8020df2:	6003      	str	r3, [r0, #0]
 8020df4:	6043      	str	r3, [r0, #4]
 8020df6:	6083      	str	r3, [r0, #8]
 8020df8:	8181      	strh	r1, [r0, #12]
 8020dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8020dfc:	81c2      	strh	r2, [r0, #14]
 8020dfe:	6103      	str	r3, [r0, #16]
 8020e00:	6143      	str	r3, [r0, #20]
 8020e02:	6183      	str	r3, [r0, #24]
 8020e04:	4619      	mov	r1, r3
 8020e06:	2208      	movs	r2, #8
 8020e08:	305c      	adds	r0, #92	; 0x5c
 8020e0a:	f7ff fd7f 	bl	802090c <memset>
 8020e0e:	4b05      	ldr	r3, [pc, #20]	; (8020e24 <std.isra.0+0x38>)
 8020e10:	6263      	str	r3, [r4, #36]	; 0x24
 8020e12:	4b05      	ldr	r3, [pc, #20]	; (8020e28 <std.isra.0+0x3c>)
 8020e14:	62a3      	str	r3, [r4, #40]	; 0x28
 8020e16:	4b05      	ldr	r3, [pc, #20]	; (8020e2c <std.isra.0+0x40>)
 8020e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020e1a:	4b05      	ldr	r3, [pc, #20]	; (8020e30 <std.isra.0+0x44>)
 8020e1c:	6224      	str	r4, [r4, #32]
 8020e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8020e20:	bd10      	pop	{r4, pc}
 8020e22:	bf00      	nop
 8020e24:	080211e1 	.word	0x080211e1
 8020e28:	08021203 	.word	0x08021203
 8020e2c:	0802123b 	.word	0x0802123b
 8020e30:	0802125f 	.word	0x0802125f

08020e34 <__sfmoreglue>:
 8020e34:	b570      	push	{r4, r5, r6, lr}
 8020e36:	1e4a      	subs	r2, r1, #1
 8020e38:	2568      	movs	r5, #104	; 0x68
 8020e3a:	4355      	muls	r5, r2
 8020e3c:	460e      	mov	r6, r1
 8020e3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020e42:	f000 f95f 	bl	8021104 <_malloc_r>
 8020e46:	4604      	mov	r4, r0
 8020e48:	b140      	cbz	r0, 8020e5c <__sfmoreglue+0x28>
 8020e4a:	2100      	movs	r1, #0
 8020e4c:	e880 0042 	stmia.w	r0, {r1, r6}
 8020e50:	300c      	adds	r0, #12
 8020e52:	60a0      	str	r0, [r4, #8]
 8020e54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020e58:	f7ff fd58 	bl	802090c <memset>
 8020e5c:	4620      	mov	r0, r4
 8020e5e:	bd70      	pop	{r4, r5, r6, pc}

08020e60 <__sinit>:
 8020e60:	6983      	ldr	r3, [r0, #24]
 8020e62:	b510      	push	{r4, lr}
 8020e64:	4604      	mov	r4, r0
 8020e66:	bb33      	cbnz	r3, 8020eb6 <__sinit+0x56>
 8020e68:	6483      	str	r3, [r0, #72]	; 0x48
 8020e6a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8020e6c:	6503      	str	r3, [r0, #80]	; 0x50
 8020e6e:	4b12      	ldr	r3, [pc, #72]	; (8020eb8 <__sinit+0x58>)
 8020e70:	4a12      	ldr	r2, [pc, #72]	; (8020ebc <__sinit+0x5c>)
 8020e72:	681b      	ldr	r3, [r3, #0]
 8020e74:	6282      	str	r2, [r0, #40]	; 0x28
 8020e76:	4298      	cmp	r0, r3
 8020e78:	bf04      	itt	eq
 8020e7a:	2301      	moveq	r3, #1
 8020e7c:	6183      	streq	r3, [r0, #24]
 8020e7e:	f000 f81f 	bl	8020ec0 <__sfp>
 8020e82:	6060      	str	r0, [r4, #4]
 8020e84:	4620      	mov	r0, r4
 8020e86:	f000 f81b 	bl	8020ec0 <__sfp>
 8020e8a:	60a0      	str	r0, [r4, #8]
 8020e8c:	4620      	mov	r0, r4
 8020e8e:	f000 f817 	bl	8020ec0 <__sfp>
 8020e92:	2200      	movs	r2, #0
 8020e94:	60e0      	str	r0, [r4, #12]
 8020e96:	2104      	movs	r1, #4
 8020e98:	6860      	ldr	r0, [r4, #4]
 8020e9a:	f7ff ffa7 	bl	8020dec <std.isra.0>
 8020e9e:	2201      	movs	r2, #1
 8020ea0:	2109      	movs	r1, #9
 8020ea2:	68a0      	ldr	r0, [r4, #8]
 8020ea4:	f7ff ffa2 	bl	8020dec <std.isra.0>
 8020ea8:	2202      	movs	r2, #2
 8020eaa:	2112      	movs	r1, #18
 8020eac:	68e0      	ldr	r0, [r4, #12]
 8020eae:	f7ff ff9d 	bl	8020dec <std.isra.0>
 8020eb2:	2301      	movs	r3, #1
 8020eb4:	61a3      	str	r3, [r4, #24]
 8020eb6:	bd10      	pop	{r4, pc}
 8020eb8:	08027428 	.word	0x08027428
 8020ebc:	08020de1 	.word	0x08020de1

08020ec0 <__sfp>:
 8020ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ec2:	4b1c      	ldr	r3, [pc, #112]	; (8020f34 <__sfp+0x74>)
 8020ec4:	681e      	ldr	r6, [r3, #0]
 8020ec6:	69b3      	ldr	r3, [r6, #24]
 8020ec8:	4607      	mov	r7, r0
 8020eca:	b913      	cbnz	r3, 8020ed2 <__sfp+0x12>
 8020ecc:	4630      	mov	r0, r6
 8020ece:	f7ff ffc7 	bl	8020e60 <__sinit>
 8020ed2:	3648      	adds	r6, #72	; 0x48
 8020ed4:	68b4      	ldr	r4, [r6, #8]
 8020ed6:	6873      	ldr	r3, [r6, #4]
 8020ed8:	3b01      	subs	r3, #1
 8020eda:	d503      	bpl.n	8020ee4 <__sfp+0x24>
 8020edc:	6833      	ldr	r3, [r6, #0]
 8020ede:	b133      	cbz	r3, 8020eee <__sfp+0x2e>
 8020ee0:	6836      	ldr	r6, [r6, #0]
 8020ee2:	e7f7      	b.n	8020ed4 <__sfp+0x14>
 8020ee4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020ee8:	b16d      	cbz	r5, 8020f06 <__sfp+0x46>
 8020eea:	3468      	adds	r4, #104	; 0x68
 8020eec:	e7f4      	b.n	8020ed8 <__sfp+0x18>
 8020eee:	2104      	movs	r1, #4
 8020ef0:	4638      	mov	r0, r7
 8020ef2:	f7ff ff9f 	bl	8020e34 <__sfmoreglue>
 8020ef6:	6030      	str	r0, [r6, #0]
 8020ef8:	2800      	cmp	r0, #0
 8020efa:	d1f1      	bne.n	8020ee0 <__sfp+0x20>
 8020efc:	230c      	movs	r3, #12
 8020efe:	603b      	str	r3, [r7, #0]
 8020f00:	4604      	mov	r4, r0
 8020f02:	4620      	mov	r0, r4
 8020f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020f0a:	81e3      	strh	r3, [r4, #14]
 8020f0c:	2301      	movs	r3, #1
 8020f0e:	81a3      	strh	r3, [r4, #12]
 8020f10:	6665      	str	r5, [r4, #100]	; 0x64
 8020f12:	6025      	str	r5, [r4, #0]
 8020f14:	60a5      	str	r5, [r4, #8]
 8020f16:	6065      	str	r5, [r4, #4]
 8020f18:	6125      	str	r5, [r4, #16]
 8020f1a:	6165      	str	r5, [r4, #20]
 8020f1c:	61a5      	str	r5, [r4, #24]
 8020f1e:	2208      	movs	r2, #8
 8020f20:	4629      	mov	r1, r5
 8020f22:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020f26:	f7ff fcf1 	bl	802090c <memset>
 8020f2a:	6365      	str	r5, [r4, #52]	; 0x34
 8020f2c:	63a5      	str	r5, [r4, #56]	; 0x38
 8020f2e:	64a5      	str	r5, [r4, #72]	; 0x48
 8020f30:	64e5      	str	r5, [r4, #76]	; 0x4c
 8020f32:	e7e6      	b.n	8020f02 <__sfp+0x42>
 8020f34:	08027428 	.word	0x08027428

08020f38 <_fwalk_reent>:
 8020f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020f3c:	4680      	mov	r8, r0
 8020f3e:	4689      	mov	r9, r1
 8020f40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020f44:	2600      	movs	r6, #0
 8020f46:	b914      	cbnz	r4, 8020f4e <_fwalk_reent+0x16>
 8020f48:	4630      	mov	r0, r6
 8020f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f4e:	68a5      	ldr	r5, [r4, #8]
 8020f50:	6867      	ldr	r7, [r4, #4]
 8020f52:	3f01      	subs	r7, #1
 8020f54:	d501      	bpl.n	8020f5a <_fwalk_reent+0x22>
 8020f56:	6824      	ldr	r4, [r4, #0]
 8020f58:	e7f5      	b.n	8020f46 <_fwalk_reent+0xe>
 8020f5a:	89ab      	ldrh	r3, [r5, #12]
 8020f5c:	2b01      	cmp	r3, #1
 8020f5e:	d907      	bls.n	8020f70 <_fwalk_reent+0x38>
 8020f60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020f64:	3301      	adds	r3, #1
 8020f66:	d003      	beq.n	8020f70 <_fwalk_reent+0x38>
 8020f68:	4629      	mov	r1, r5
 8020f6a:	4640      	mov	r0, r8
 8020f6c:	47c8      	blx	r9
 8020f6e:	4306      	orrs	r6, r0
 8020f70:	3568      	adds	r5, #104	; 0x68
 8020f72:	e7ee      	b.n	8020f52 <_fwalk_reent+0x1a>

08020f74 <__locale_ctype_ptr_l>:
 8020f74:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8020f78:	4770      	bx	lr

08020f7a <__swhatbuf_r>:
 8020f7a:	b570      	push	{r4, r5, r6, lr}
 8020f7c:	460e      	mov	r6, r1
 8020f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f82:	2900      	cmp	r1, #0
 8020f84:	b090      	sub	sp, #64	; 0x40
 8020f86:	4614      	mov	r4, r2
 8020f88:	461d      	mov	r5, r3
 8020f8a:	da07      	bge.n	8020f9c <__swhatbuf_r+0x22>
 8020f8c:	2300      	movs	r3, #0
 8020f8e:	602b      	str	r3, [r5, #0]
 8020f90:	89b3      	ldrh	r3, [r6, #12]
 8020f92:	061a      	lsls	r2, r3, #24
 8020f94:	d410      	bmi.n	8020fb8 <__swhatbuf_r+0x3e>
 8020f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020f9a:	e00e      	b.n	8020fba <__swhatbuf_r+0x40>
 8020f9c:	aa01      	add	r2, sp, #4
 8020f9e:	f000 f991 	bl	80212c4 <_fstat_r>
 8020fa2:	2800      	cmp	r0, #0
 8020fa4:	dbf2      	blt.n	8020f8c <__swhatbuf_r+0x12>
 8020fa6:	9a02      	ldr	r2, [sp, #8]
 8020fa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020fac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020fb0:	425a      	negs	r2, r3
 8020fb2:	415a      	adcs	r2, r3
 8020fb4:	602a      	str	r2, [r5, #0]
 8020fb6:	e7ee      	b.n	8020f96 <__swhatbuf_r+0x1c>
 8020fb8:	2340      	movs	r3, #64	; 0x40
 8020fba:	2000      	movs	r0, #0
 8020fbc:	6023      	str	r3, [r4, #0]
 8020fbe:	b010      	add	sp, #64	; 0x40
 8020fc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08020fc4 <__smakebuf_r>:
 8020fc4:	898b      	ldrh	r3, [r1, #12]
 8020fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020fc8:	079d      	lsls	r5, r3, #30
 8020fca:	4606      	mov	r6, r0
 8020fcc:	460c      	mov	r4, r1
 8020fce:	d507      	bpl.n	8020fe0 <__smakebuf_r+0x1c>
 8020fd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020fd4:	6023      	str	r3, [r4, #0]
 8020fd6:	6123      	str	r3, [r4, #16]
 8020fd8:	2301      	movs	r3, #1
 8020fda:	6163      	str	r3, [r4, #20]
 8020fdc:	b002      	add	sp, #8
 8020fde:	bd70      	pop	{r4, r5, r6, pc}
 8020fe0:	ab01      	add	r3, sp, #4
 8020fe2:	466a      	mov	r2, sp
 8020fe4:	f7ff ffc9 	bl	8020f7a <__swhatbuf_r>
 8020fe8:	9900      	ldr	r1, [sp, #0]
 8020fea:	4605      	mov	r5, r0
 8020fec:	4630      	mov	r0, r6
 8020fee:	f000 f889 	bl	8021104 <_malloc_r>
 8020ff2:	b948      	cbnz	r0, 8021008 <__smakebuf_r+0x44>
 8020ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020ff8:	059a      	lsls	r2, r3, #22
 8020ffa:	d4ef      	bmi.n	8020fdc <__smakebuf_r+0x18>
 8020ffc:	f023 0303 	bic.w	r3, r3, #3
 8021000:	f043 0302 	orr.w	r3, r3, #2
 8021004:	81a3      	strh	r3, [r4, #12]
 8021006:	e7e3      	b.n	8020fd0 <__smakebuf_r+0xc>
 8021008:	4b0d      	ldr	r3, [pc, #52]	; (8021040 <__smakebuf_r+0x7c>)
 802100a:	62b3      	str	r3, [r6, #40]	; 0x28
 802100c:	89a3      	ldrh	r3, [r4, #12]
 802100e:	6020      	str	r0, [r4, #0]
 8021010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021014:	81a3      	strh	r3, [r4, #12]
 8021016:	9b00      	ldr	r3, [sp, #0]
 8021018:	6163      	str	r3, [r4, #20]
 802101a:	9b01      	ldr	r3, [sp, #4]
 802101c:	6120      	str	r0, [r4, #16]
 802101e:	b15b      	cbz	r3, 8021038 <__smakebuf_r+0x74>
 8021020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021024:	4630      	mov	r0, r6
 8021026:	f000 f95f 	bl	80212e8 <_isatty_r>
 802102a:	b128      	cbz	r0, 8021038 <__smakebuf_r+0x74>
 802102c:	89a3      	ldrh	r3, [r4, #12]
 802102e:	f023 0303 	bic.w	r3, r3, #3
 8021032:	f043 0301 	orr.w	r3, r3, #1
 8021036:	81a3      	strh	r3, [r4, #12]
 8021038:	89a3      	ldrh	r3, [r4, #12]
 802103a:	431d      	orrs	r5, r3
 802103c:	81a5      	strh	r5, [r4, #12]
 802103e:	e7cd      	b.n	8020fdc <__smakebuf_r+0x18>
 8021040:	08020de1 	.word	0x08020de1

08021044 <__ascii_mbtowc>:
 8021044:	b082      	sub	sp, #8
 8021046:	b901      	cbnz	r1, 802104a <__ascii_mbtowc+0x6>
 8021048:	a901      	add	r1, sp, #4
 802104a:	b142      	cbz	r2, 802105e <__ascii_mbtowc+0x1a>
 802104c:	b14b      	cbz	r3, 8021062 <__ascii_mbtowc+0x1e>
 802104e:	7813      	ldrb	r3, [r2, #0]
 8021050:	600b      	str	r3, [r1, #0]
 8021052:	7812      	ldrb	r2, [r2, #0]
 8021054:	1c10      	adds	r0, r2, #0
 8021056:	bf18      	it	ne
 8021058:	2001      	movne	r0, #1
 802105a:	b002      	add	sp, #8
 802105c:	4770      	bx	lr
 802105e:	4610      	mov	r0, r2
 8021060:	e7fb      	b.n	802105a <__ascii_mbtowc+0x16>
 8021062:	f06f 0001 	mvn.w	r0, #1
 8021066:	e7f8      	b.n	802105a <__ascii_mbtowc+0x16>

08021068 <_free_r>:
 8021068:	b538      	push	{r3, r4, r5, lr}
 802106a:	4605      	mov	r5, r0
 802106c:	2900      	cmp	r1, #0
 802106e:	d045      	beq.n	80210fc <_free_r+0x94>
 8021070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021074:	1f0c      	subs	r4, r1, #4
 8021076:	2b00      	cmp	r3, #0
 8021078:	bfb8      	it	lt
 802107a:	18e4      	addlt	r4, r4, r3
 802107c:	f000 f956 	bl	802132c <__malloc_lock>
 8021080:	4a1f      	ldr	r2, [pc, #124]	; (8021100 <_free_r+0x98>)
 8021082:	6813      	ldr	r3, [r2, #0]
 8021084:	4610      	mov	r0, r2
 8021086:	b933      	cbnz	r3, 8021096 <_free_r+0x2e>
 8021088:	6063      	str	r3, [r4, #4]
 802108a:	6014      	str	r4, [r2, #0]
 802108c:	4628      	mov	r0, r5
 802108e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021092:	f000 b94c 	b.w	802132e <__malloc_unlock>
 8021096:	42a3      	cmp	r3, r4
 8021098:	d90c      	bls.n	80210b4 <_free_r+0x4c>
 802109a:	6821      	ldr	r1, [r4, #0]
 802109c:	1862      	adds	r2, r4, r1
 802109e:	4293      	cmp	r3, r2
 80210a0:	bf04      	itt	eq
 80210a2:	681a      	ldreq	r2, [r3, #0]
 80210a4:	685b      	ldreq	r3, [r3, #4]
 80210a6:	6063      	str	r3, [r4, #4]
 80210a8:	bf04      	itt	eq
 80210aa:	1852      	addeq	r2, r2, r1
 80210ac:	6022      	streq	r2, [r4, #0]
 80210ae:	6004      	str	r4, [r0, #0]
 80210b0:	e7ec      	b.n	802108c <_free_r+0x24>
 80210b2:	4613      	mov	r3, r2
 80210b4:	685a      	ldr	r2, [r3, #4]
 80210b6:	b10a      	cbz	r2, 80210bc <_free_r+0x54>
 80210b8:	42a2      	cmp	r2, r4
 80210ba:	d9fa      	bls.n	80210b2 <_free_r+0x4a>
 80210bc:	6819      	ldr	r1, [r3, #0]
 80210be:	1858      	adds	r0, r3, r1
 80210c0:	42a0      	cmp	r0, r4
 80210c2:	d10b      	bne.n	80210dc <_free_r+0x74>
 80210c4:	6820      	ldr	r0, [r4, #0]
 80210c6:	4401      	add	r1, r0
 80210c8:	1858      	adds	r0, r3, r1
 80210ca:	4282      	cmp	r2, r0
 80210cc:	6019      	str	r1, [r3, #0]
 80210ce:	d1dd      	bne.n	802108c <_free_r+0x24>
 80210d0:	6810      	ldr	r0, [r2, #0]
 80210d2:	6852      	ldr	r2, [r2, #4]
 80210d4:	605a      	str	r2, [r3, #4]
 80210d6:	4401      	add	r1, r0
 80210d8:	6019      	str	r1, [r3, #0]
 80210da:	e7d7      	b.n	802108c <_free_r+0x24>
 80210dc:	d902      	bls.n	80210e4 <_free_r+0x7c>
 80210de:	230c      	movs	r3, #12
 80210e0:	602b      	str	r3, [r5, #0]
 80210e2:	e7d3      	b.n	802108c <_free_r+0x24>
 80210e4:	6820      	ldr	r0, [r4, #0]
 80210e6:	1821      	adds	r1, r4, r0
 80210e8:	428a      	cmp	r2, r1
 80210ea:	bf04      	itt	eq
 80210ec:	6811      	ldreq	r1, [r2, #0]
 80210ee:	6852      	ldreq	r2, [r2, #4]
 80210f0:	6062      	str	r2, [r4, #4]
 80210f2:	bf04      	itt	eq
 80210f4:	1809      	addeq	r1, r1, r0
 80210f6:	6021      	streq	r1, [r4, #0]
 80210f8:	605c      	str	r4, [r3, #4]
 80210fa:	e7c7      	b.n	802108c <_free_r+0x24>
 80210fc:	bd38      	pop	{r3, r4, r5, pc}
 80210fe:	bf00      	nop
 8021100:	20010f8c 	.word	0x20010f8c

08021104 <_malloc_r>:
 8021104:	b570      	push	{r4, r5, r6, lr}
 8021106:	1ccd      	adds	r5, r1, #3
 8021108:	f025 0503 	bic.w	r5, r5, #3
 802110c:	3508      	adds	r5, #8
 802110e:	2d0c      	cmp	r5, #12
 8021110:	bf38      	it	cc
 8021112:	250c      	movcc	r5, #12
 8021114:	2d00      	cmp	r5, #0
 8021116:	4606      	mov	r6, r0
 8021118:	db01      	blt.n	802111e <_malloc_r+0x1a>
 802111a:	42a9      	cmp	r1, r5
 802111c:	d903      	bls.n	8021126 <_malloc_r+0x22>
 802111e:	230c      	movs	r3, #12
 8021120:	6033      	str	r3, [r6, #0]
 8021122:	2000      	movs	r0, #0
 8021124:	bd70      	pop	{r4, r5, r6, pc}
 8021126:	f000 f901 	bl	802132c <__malloc_lock>
 802112a:	4a23      	ldr	r2, [pc, #140]	; (80211b8 <_malloc_r+0xb4>)
 802112c:	6814      	ldr	r4, [r2, #0]
 802112e:	4621      	mov	r1, r4
 8021130:	b991      	cbnz	r1, 8021158 <_malloc_r+0x54>
 8021132:	4c22      	ldr	r4, [pc, #136]	; (80211bc <_malloc_r+0xb8>)
 8021134:	6823      	ldr	r3, [r4, #0]
 8021136:	b91b      	cbnz	r3, 8021140 <_malloc_r+0x3c>
 8021138:	4630      	mov	r0, r6
 802113a:	f000 f841 	bl	80211c0 <_sbrk_r>
 802113e:	6020      	str	r0, [r4, #0]
 8021140:	4629      	mov	r1, r5
 8021142:	4630      	mov	r0, r6
 8021144:	f000 f83c 	bl	80211c0 <_sbrk_r>
 8021148:	1c43      	adds	r3, r0, #1
 802114a:	d126      	bne.n	802119a <_malloc_r+0x96>
 802114c:	230c      	movs	r3, #12
 802114e:	6033      	str	r3, [r6, #0]
 8021150:	4630      	mov	r0, r6
 8021152:	f000 f8ec 	bl	802132e <__malloc_unlock>
 8021156:	e7e4      	b.n	8021122 <_malloc_r+0x1e>
 8021158:	680b      	ldr	r3, [r1, #0]
 802115a:	1b5b      	subs	r3, r3, r5
 802115c:	d41a      	bmi.n	8021194 <_malloc_r+0x90>
 802115e:	2b0b      	cmp	r3, #11
 8021160:	d90f      	bls.n	8021182 <_malloc_r+0x7e>
 8021162:	600b      	str	r3, [r1, #0]
 8021164:	50cd      	str	r5, [r1, r3]
 8021166:	18cc      	adds	r4, r1, r3
 8021168:	4630      	mov	r0, r6
 802116a:	f000 f8e0 	bl	802132e <__malloc_unlock>
 802116e:	f104 000b 	add.w	r0, r4, #11
 8021172:	1d23      	adds	r3, r4, #4
 8021174:	f020 0007 	bic.w	r0, r0, #7
 8021178:	1ac3      	subs	r3, r0, r3
 802117a:	d01b      	beq.n	80211b4 <_malloc_r+0xb0>
 802117c:	425a      	negs	r2, r3
 802117e:	50e2      	str	r2, [r4, r3]
 8021180:	bd70      	pop	{r4, r5, r6, pc}
 8021182:	428c      	cmp	r4, r1
 8021184:	bf0d      	iteet	eq
 8021186:	6863      	ldreq	r3, [r4, #4]
 8021188:	684b      	ldrne	r3, [r1, #4]
 802118a:	6063      	strne	r3, [r4, #4]
 802118c:	6013      	streq	r3, [r2, #0]
 802118e:	bf18      	it	ne
 8021190:	460c      	movne	r4, r1
 8021192:	e7e9      	b.n	8021168 <_malloc_r+0x64>
 8021194:	460c      	mov	r4, r1
 8021196:	6849      	ldr	r1, [r1, #4]
 8021198:	e7ca      	b.n	8021130 <_malloc_r+0x2c>
 802119a:	1cc4      	adds	r4, r0, #3
 802119c:	f024 0403 	bic.w	r4, r4, #3
 80211a0:	42a0      	cmp	r0, r4
 80211a2:	d005      	beq.n	80211b0 <_malloc_r+0xac>
 80211a4:	1a21      	subs	r1, r4, r0
 80211a6:	4630      	mov	r0, r6
 80211a8:	f000 f80a 	bl	80211c0 <_sbrk_r>
 80211ac:	3001      	adds	r0, #1
 80211ae:	d0cd      	beq.n	802114c <_malloc_r+0x48>
 80211b0:	6025      	str	r5, [r4, #0]
 80211b2:	e7d9      	b.n	8021168 <_malloc_r+0x64>
 80211b4:	bd70      	pop	{r4, r5, r6, pc}
 80211b6:	bf00      	nop
 80211b8:	20010f8c 	.word	0x20010f8c
 80211bc:	20010f90 	.word	0x20010f90

080211c0 <_sbrk_r>:
 80211c0:	b538      	push	{r3, r4, r5, lr}
 80211c2:	4c06      	ldr	r4, [pc, #24]	; (80211dc <_sbrk_r+0x1c>)
 80211c4:	2300      	movs	r3, #0
 80211c6:	4605      	mov	r5, r0
 80211c8:	4608      	mov	r0, r1
 80211ca:	6023      	str	r3, [r4, #0]
 80211cc:	f7fe f90c 	bl	801f3e8 <_sbrk>
 80211d0:	1c43      	adds	r3, r0, #1
 80211d2:	d102      	bne.n	80211da <_sbrk_r+0x1a>
 80211d4:	6823      	ldr	r3, [r4, #0]
 80211d6:	b103      	cbz	r3, 80211da <_sbrk_r+0x1a>
 80211d8:	602b      	str	r3, [r5, #0]
 80211da:	bd38      	pop	{r3, r4, r5, pc}
 80211dc:	20015cdc 	.word	0x20015cdc

080211e0 <__sread>:
 80211e0:	b510      	push	{r4, lr}
 80211e2:	460c      	mov	r4, r1
 80211e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80211e8:	f000 f8a2 	bl	8021330 <_read_r>
 80211ec:	2800      	cmp	r0, #0
 80211ee:	bfab      	itete	ge
 80211f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80211f2:	89a3      	ldrhlt	r3, [r4, #12]
 80211f4:	181b      	addge	r3, r3, r0
 80211f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80211fa:	bfac      	ite	ge
 80211fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80211fe:	81a3      	strhlt	r3, [r4, #12]
 8021200:	bd10      	pop	{r4, pc}

08021202 <__swrite>:
 8021202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021206:	461f      	mov	r7, r3
 8021208:	898b      	ldrh	r3, [r1, #12]
 802120a:	05db      	lsls	r3, r3, #23
 802120c:	4605      	mov	r5, r0
 802120e:	460c      	mov	r4, r1
 8021210:	4616      	mov	r6, r2
 8021212:	d505      	bpl.n	8021220 <__swrite+0x1e>
 8021214:	2302      	movs	r3, #2
 8021216:	2200      	movs	r2, #0
 8021218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802121c:	f000 f874 	bl	8021308 <_lseek_r>
 8021220:	89a3      	ldrh	r3, [r4, #12]
 8021222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802122a:	81a3      	strh	r3, [r4, #12]
 802122c:	4632      	mov	r2, r6
 802122e:	463b      	mov	r3, r7
 8021230:	4628      	mov	r0, r5
 8021232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021236:	f000 b823 	b.w	8021280 <_write_r>

0802123a <__sseek>:
 802123a:	b510      	push	{r4, lr}
 802123c:	460c      	mov	r4, r1
 802123e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021242:	f000 f861 	bl	8021308 <_lseek_r>
 8021246:	1c43      	adds	r3, r0, #1
 8021248:	89a3      	ldrh	r3, [r4, #12]
 802124a:	bf15      	itete	ne
 802124c:	6560      	strne	r0, [r4, #84]	; 0x54
 802124e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021256:	81a3      	strheq	r3, [r4, #12]
 8021258:	bf18      	it	ne
 802125a:	81a3      	strhne	r3, [r4, #12]
 802125c:	bd10      	pop	{r4, pc}

0802125e <__sclose>:
 802125e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021262:	f000 b81f 	b.w	80212a4 <_close_r>

08021266 <__ascii_wctomb>:
 8021266:	b149      	cbz	r1, 802127c <__ascii_wctomb+0x16>
 8021268:	2aff      	cmp	r2, #255	; 0xff
 802126a:	bf85      	ittet	hi
 802126c:	238a      	movhi	r3, #138	; 0x8a
 802126e:	6003      	strhi	r3, [r0, #0]
 8021270:	700a      	strbls	r2, [r1, #0]
 8021272:	f04f 30ff 	movhi.w	r0, #4294967295
 8021276:	bf98      	it	ls
 8021278:	2001      	movls	r0, #1
 802127a:	4770      	bx	lr
 802127c:	4608      	mov	r0, r1
 802127e:	4770      	bx	lr

08021280 <_write_r>:
 8021280:	b538      	push	{r3, r4, r5, lr}
 8021282:	4c07      	ldr	r4, [pc, #28]	; (80212a0 <_write_r+0x20>)
 8021284:	4605      	mov	r5, r0
 8021286:	4608      	mov	r0, r1
 8021288:	4611      	mov	r1, r2
 802128a:	2200      	movs	r2, #0
 802128c:	6022      	str	r2, [r4, #0]
 802128e:	461a      	mov	r2, r3
 8021290:	f7fe f885 	bl	801f39e <_write>
 8021294:	1c43      	adds	r3, r0, #1
 8021296:	d102      	bne.n	802129e <_write_r+0x1e>
 8021298:	6823      	ldr	r3, [r4, #0]
 802129a:	b103      	cbz	r3, 802129e <_write_r+0x1e>
 802129c:	602b      	str	r3, [r5, #0]
 802129e:	bd38      	pop	{r3, r4, r5, pc}
 80212a0:	20015cdc 	.word	0x20015cdc

080212a4 <_close_r>:
 80212a4:	b538      	push	{r3, r4, r5, lr}
 80212a6:	4c06      	ldr	r4, [pc, #24]	; (80212c0 <_close_r+0x1c>)
 80212a8:	2300      	movs	r3, #0
 80212aa:	4605      	mov	r5, r0
 80212ac:	4608      	mov	r0, r1
 80212ae:	6023      	str	r3, [r4, #0]
 80212b0:	f7fe f8b8 	bl	801f424 <_close>
 80212b4:	1c43      	adds	r3, r0, #1
 80212b6:	d102      	bne.n	80212be <_close_r+0x1a>
 80212b8:	6823      	ldr	r3, [r4, #0]
 80212ba:	b103      	cbz	r3, 80212be <_close_r+0x1a>
 80212bc:	602b      	str	r3, [r5, #0]
 80212be:	bd38      	pop	{r3, r4, r5, pc}
 80212c0:	20015cdc 	.word	0x20015cdc

080212c4 <_fstat_r>:
 80212c4:	b538      	push	{r3, r4, r5, lr}
 80212c6:	4c07      	ldr	r4, [pc, #28]	; (80212e4 <_fstat_r+0x20>)
 80212c8:	2300      	movs	r3, #0
 80212ca:	4605      	mov	r5, r0
 80212cc:	4608      	mov	r0, r1
 80212ce:	4611      	mov	r1, r2
 80212d0:	6023      	str	r3, [r4, #0]
 80212d2:	f7fe f8aa 	bl	801f42a <_fstat>
 80212d6:	1c43      	adds	r3, r0, #1
 80212d8:	d102      	bne.n	80212e0 <_fstat_r+0x1c>
 80212da:	6823      	ldr	r3, [r4, #0]
 80212dc:	b103      	cbz	r3, 80212e0 <_fstat_r+0x1c>
 80212de:	602b      	str	r3, [r5, #0]
 80212e0:	bd38      	pop	{r3, r4, r5, pc}
 80212e2:	bf00      	nop
 80212e4:	20015cdc 	.word	0x20015cdc

080212e8 <_isatty_r>:
 80212e8:	b538      	push	{r3, r4, r5, lr}
 80212ea:	4c06      	ldr	r4, [pc, #24]	; (8021304 <_isatty_r+0x1c>)
 80212ec:	2300      	movs	r3, #0
 80212ee:	4605      	mov	r5, r0
 80212f0:	4608      	mov	r0, r1
 80212f2:	6023      	str	r3, [r4, #0]
 80212f4:	f7fe f89e 	bl	801f434 <_isatty>
 80212f8:	1c43      	adds	r3, r0, #1
 80212fa:	d102      	bne.n	8021302 <_isatty_r+0x1a>
 80212fc:	6823      	ldr	r3, [r4, #0]
 80212fe:	b103      	cbz	r3, 8021302 <_isatty_r+0x1a>
 8021300:	602b      	str	r3, [r5, #0]
 8021302:	bd38      	pop	{r3, r4, r5, pc}
 8021304:	20015cdc 	.word	0x20015cdc

08021308 <_lseek_r>:
 8021308:	b538      	push	{r3, r4, r5, lr}
 802130a:	4c07      	ldr	r4, [pc, #28]	; (8021328 <_lseek_r+0x20>)
 802130c:	4605      	mov	r5, r0
 802130e:	4608      	mov	r0, r1
 8021310:	4611      	mov	r1, r2
 8021312:	2200      	movs	r2, #0
 8021314:	6022      	str	r2, [r4, #0]
 8021316:	461a      	mov	r2, r3
 8021318:	f7fe f88e 	bl	801f438 <_lseek>
 802131c:	1c43      	adds	r3, r0, #1
 802131e:	d102      	bne.n	8021326 <_lseek_r+0x1e>
 8021320:	6823      	ldr	r3, [r4, #0]
 8021322:	b103      	cbz	r3, 8021326 <_lseek_r+0x1e>
 8021324:	602b      	str	r3, [r5, #0]
 8021326:	bd38      	pop	{r3, r4, r5, pc}
 8021328:	20015cdc 	.word	0x20015cdc

0802132c <__malloc_lock>:
 802132c:	4770      	bx	lr

0802132e <__malloc_unlock>:
 802132e:	4770      	bx	lr

08021330 <_read_r>:
 8021330:	b538      	push	{r3, r4, r5, lr}
 8021332:	4c07      	ldr	r4, [pc, #28]	; (8021350 <_read_r+0x20>)
 8021334:	4605      	mov	r5, r0
 8021336:	4608      	mov	r0, r1
 8021338:	4611      	mov	r1, r2
 802133a:	2200      	movs	r2, #0
 802133c:	6022      	str	r2, [r4, #0]
 802133e:	461a      	mov	r2, r3
 8021340:	f7fe f81e 	bl	801f380 <_read>
 8021344:	1c43      	adds	r3, r0, #1
 8021346:	d102      	bne.n	802134e <_read_r+0x1e>
 8021348:	6823      	ldr	r3, [r4, #0]
 802134a:	b103      	cbz	r3, 802134e <_read_r+0x1e>
 802134c:	602b      	str	r3, [r5, #0]
 802134e:	bd38      	pop	{r3, r4, r5, pc}
 8021350:	20015cdc 	.word	0x20015cdc

08021354 <_init>:
 8021354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021356:	bf00      	nop
 8021358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802135a:	bc08      	pop	{r3}
 802135c:	469e      	mov	lr, r3
 802135e:	4770      	bx	lr

08021360 <_fini>:
 8021360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021362:	bf00      	nop
 8021364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021366:	bc08      	pop	{r3}
 8021368:	469e      	mov	lr, r3
 802136a:	4770      	bx	lr
