
AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .eeprom_emul  00000000  08008000  08008000  00040238  2**0
                  CONTENTS
  2 .text         00018ee4  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00005a48  08028ee4  08028ee4  00038ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0802e92c  0802e92c  0003e92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0802e934  0802e934  0003e934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0802e938  0802e938  0003e938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000238  20000000  0802e93c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00040238  2**0
                  CONTENTS
  9 .bss          00011f54  20000238  20000238  00040238  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2001218c  2001218c  00040238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005f019  00000000  00000000  00040268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a916  00000000  00000000  0009f281  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002568  00000000  00000000  000a9b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002200  00000000  00000000  000ac100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001ad1a  00000000  00000000  000ae300  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b7d4  00000000  00000000  000c901a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000d47ee  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009a30  00000000  00000000  000d486c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000238 	.word	0x20000238
 801001c:	00000000 	.word	0x00000000
 8010020:	08028ecc 	.word	0x08028ecc

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	2000023c 	.word	0x2000023c
 801003c:	08028ecc 	.word	0x08028ecc

08010040 <setjmp>:
 8010040:	46ec      	mov	ip, sp
 8010042:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8010046:	f04f 0000 	mov.w	r0, #0
 801004a:	4770      	bx	lr

0801004c <longjmp>:
 801004c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8010050:	46e5      	mov	sp, ip
 8010052:	0008      	movs	r0, r1
 8010054:	bf08      	it	eq
 8010056:	2001      	moveq	r0, #1
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop

0801005c <strcmp>:
 801005c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010064:	2a01      	cmp	r2, #1
 8010066:	bf28      	it	cs
 8010068:	429a      	cmpcs	r2, r3
 801006a:	d0f7      	beq.n	801005c <strcmp>
 801006c:	1ad0      	subs	r0, r2, r3
 801006e:	4770      	bx	lr

08010070 <strlen>:
 8010070:	4603      	mov	r3, r0
 8010072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010076:	2a00      	cmp	r2, #0
 8010078:	d1fb      	bne.n	8010072 <strlen+0x2>
 801007a:	1a18      	subs	r0, r3, r0
 801007c:	3801      	subs	r0, #1
 801007e:	4770      	bx	lr

08010080 <__aeabi_uldivmod>:
 8010080:	b953      	cbnz	r3, 8010098 <__aeabi_uldivmod+0x18>
 8010082:	b94a      	cbnz	r2, 8010098 <__aeabi_uldivmod+0x18>
 8010084:	2900      	cmp	r1, #0
 8010086:	bf08      	it	eq
 8010088:	2800      	cmpeq	r0, #0
 801008a:	bf1c      	itt	ne
 801008c:	f04f 31ff 	movne.w	r1, #4294967295
 8010090:	f04f 30ff 	movne.w	r0, #4294967295
 8010094:	f000 b97a 	b.w	801038c <__aeabi_idiv0>
 8010098:	f1ad 0c08 	sub.w	ip, sp, #8
 801009c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80100a0:	f000 f806 	bl	80100b0 <__udivmoddi4>
 80100a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80100a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100ac:	b004      	add	sp, #16
 80100ae:	4770      	bx	lr

080100b0 <__udivmoddi4>:
 80100b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100b4:	468c      	mov	ip, r1
 80100b6:	460d      	mov	r5, r1
 80100b8:	4604      	mov	r4, r0
 80100ba:	9e08      	ldr	r6, [sp, #32]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d151      	bne.n	8010164 <__udivmoddi4+0xb4>
 80100c0:	428a      	cmp	r2, r1
 80100c2:	4617      	mov	r7, r2
 80100c4:	d96d      	bls.n	80101a2 <__udivmoddi4+0xf2>
 80100c6:	fab2 fe82 	clz	lr, r2
 80100ca:	f1be 0f00 	cmp.w	lr, #0
 80100ce:	d00b      	beq.n	80100e8 <__udivmoddi4+0x38>
 80100d0:	f1ce 0c20 	rsb	ip, lr, #32
 80100d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80100d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80100dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80100e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80100e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80100e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80100ec:	0c25      	lsrs	r5, r4, #16
 80100ee:	fbbc f8fa 	udiv	r8, ip, sl
 80100f2:	fa1f f987 	uxth.w	r9, r7
 80100f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80100fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80100fe:	fb08 f309 	mul.w	r3, r8, r9
 8010102:	42ab      	cmp	r3, r5
 8010104:	d90a      	bls.n	801011c <__udivmoddi4+0x6c>
 8010106:	19ed      	adds	r5, r5, r7
 8010108:	f108 32ff 	add.w	r2, r8, #4294967295
 801010c:	f080 8123 	bcs.w	8010356 <__udivmoddi4+0x2a6>
 8010110:	42ab      	cmp	r3, r5
 8010112:	f240 8120 	bls.w	8010356 <__udivmoddi4+0x2a6>
 8010116:	f1a8 0802 	sub.w	r8, r8, #2
 801011a:	443d      	add	r5, r7
 801011c:	1aed      	subs	r5, r5, r3
 801011e:	b2a4      	uxth	r4, r4
 8010120:	fbb5 f0fa 	udiv	r0, r5, sl
 8010124:	fb0a 5510 	mls	r5, sl, r0, r5
 8010128:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801012c:	fb00 f909 	mul.w	r9, r0, r9
 8010130:	45a1      	cmp	r9, r4
 8010132:	d909      	bls.n	8010148 <__udivmoddi4+0x98>
 8010134:	19e4      	adds	r4, r4, r7
 8010136:	f100 33ff 	add.w	r3, r0, #4294967295
 801013a:	f080 810a 	bcs.w	8010352 <__udivmoddi4+0x2a2>
 801013e:	45a1      	cmp	r9, r4
 8010140:	f240 8107 	bls.w	8010352 <__udivmoddi4+0x2a2>
 8010144:	3802      	subs	r0, #2
 8010146:	443c      	add	r4, r7
 8010148:	eba4 0409 	sub.w	r4, r4, r9
 801014c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010150:	2100      	movs	r1, #0
 8010152:	2e00      	cmp	r6, #0
 8010154:	d061      	beq.n	801021a <__udivmoddi4+0x16a>
 8010156:	fa24 f40e 	lsr.w	r4, r4, lr
 801015a:	2300      	movs	r3, #0
 801015c:	6034      	str	r4, [r6, #0]
 801015e:	6073      	str	r3, [r6, #4]
 8010160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010164:	428b      	cmp	r3, r1
 8010166:	d907      	bls.n	8010178 <__udivmoddi4+0xc8>
 8010168:	2e00      	cmp	r6, #0
 801016a:	d054      	beq.n	8010216 <__udivmoddi4+0x166>
 801016c:	2100      	movs	r1, #0
 801016e:	e886 0021 	stmia.w	r6, {r0, r5}
 8010172:	4608      	mov	r0, r1
 8010174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010178:	fab3 f183 	clz	r1, r3
 801017c:	2900      	cmp	r1, #0
 801017e:	f040 808e 	bne.w	801029e <__udivmoddi4+0x1ee>
 8010182:	42ab      	cmp	r3, r5
 8010184:	d302      	bcc.n	801018c <__udivmoddi4+0xdc>
 8010186:	4282      	cmp	r2, r0
 8010188:	f200 80fa 	bhi.w	8010380 <__udivmoddi4+0x2d0>
 801018c:	1a84      	subs	r4, r0, r2
 801018e:	eb65 0503 	sbc.w	r5, r5, r3
 8010192:	2001      	movs	r0, #1
 8010194:	46ac      	mov	ip, r5
 8010196:	2e00      	cmp	r6, #0
 8010198:	d03f      	beq.n	801021a <__udivmoddi4+0x16a>
 801019a:	e886 1010 	stmia.w	r6, {r4, ip}
 801019e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101a2:	b912      	cbnz	r2, 80101aa <__udivmoddi4+0xfa>
 80101a4:	2701      	movs	r7, #1
 80101a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80101aa:	fab7 fe87 	clz	lr, r7
 80101ae:	f1be 0f00 	cmp.w	lr, #0
 80101b2:	d134      	bne.n	801021e <__udivmoddi4+0x16e>
 80101b4:	1beb      	subs	r3, r5, r7
 80101b6:	0c3a      	lsrs	r2, r7, #16
 80101b8:	fa1f fc87 	uxth.w	ip, r7
 80101bc:	2101      	movs	r1, #1
 80101be:	fbb3 f8f2 	udiv	r8, r3, r2
 80101c2:	0c25      	lsrs	r5, r4, #16
 80101c4:	fb02 3318 	mls	r3, r2, r8, r3
 80101c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80101cc:	fb0c f308 	mul.w	r3, ip, r8
 80101d0:	42ab      	cmp	r3, r5
 80101d2:	d907      	bls.n	80101e4 <__udivmoddi4+0x134>
 80101d4:	19ed      	adds	r5, r5, r7
 80101d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80101da:	d202      	bcs.n	80101e2 <__udivmoddi4+0x132>
 80101dc:	42ab      	cmp	r3, r5
 80101de:	f200 80d1 	bhi.w	8010384 <__udivmoddi4+0x2d4>
 80101e2:	4680      	mov	r8, r0
 80101e4:	1aed      	subs	r5, r5, r3
 80101e6:	b2a3      	uxth	r3, r4
 80101e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80101ec:	fb02 5510 	mls	r5, r2, r0, r5
 80101f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80101f4:	fb0c fc00 	mul.w	ip, ip, r0
 80101f8:	45a4      	cmp	ip, r4
 80101fa:	d907      	bls.n	801020c <__udivmoddi4+0x15c>
 80101fc:	19e4      	adds	r4, r4, r7
 80101fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8010202:	d202      	bcs.n	801020a <__udivmoddi4+0x15a>
 8010204:	45a4      	cmp	ip, r4
 8010206:	f200 80b8 	bhi.w	801037a <__udivmoddi4+0x2ca>
 801020a:	4618      	mov	r0, r3
 801020c:	eba4 040c 	sub.w	r4, r4, ip
 8010210:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010214:	e79d      	b.n	8010152 <__udivmoddi4+0xa2>
 8010216:	4631      	mov	r1, r6
 8010218:	4630      	mov	r0, r6
 801021a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801021e:	f1ce 0420 	rsb	r4, lr, #32
 8010222:	fa05 f30e 	lsl.w	r3, r5, lr
 8010226:	fa07 f70e 	lsl.w	r7, r7, lr
 801022a:	fa20 f804 	lsr.w	r8, r0, r4
 801022e:	0c3a      	lsrs	r2, r7, #16
 8010230:	fa25 f404 	lsr.w	r4, r5, r4
 8010234:	ea48 0803 	orr.w	r8, r8, r3
 8010238:	fbb4 f1f2 	udiv	r1, r4, r2
 801023c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8010240:	fb02 4411 	mls	r4, r2, r1, r4
 8010244:	fa1f fc87 	uxth.w	ip, r7
 8010248:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 801024c:	fb01 f30c 	mul.w	r3, r1, ip
 8010250:	42ab      	cmp	r3, r5
 8010252:	fa00 f40e 	lsl.w	r4, r0, lr
 8010256:	d909      	bls.n	801026c <__udivmoddi4+0x1bc>
 8010258:	19ed      	adds	r5, r5, r7
 801025a:	f101 30ff 	add.w	r0, r1, #4294967295
 801025e:	f080 808a 	bcs.w	8010376 <__udivmoddi4+0x2c6>
 8010262:	42ab      	cmp	r3, r5
 8010264:	f240 8087 	bls.w	8010376 <__udivmoddi4+0x2c6>
 8010268:	3902      	subs	r1, #2
 801026a:	443d      	add	r5, r7
 801026c:	1aeb      	subs	r3, r5, r3
 801026e:	fa1f f588 	uxth.w	r5, r8
 8010272:	fbb3 f0f2 	udiv	r0, r3, r2
 8010276:	fb02 3310 	mls	r3, r2, r0, r3
 801027a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 801027e:	fb00 f30c 	mul.w	r3, r0, ip
 8010282:	42ab      	cmp	r3, r5
 8010284:	d907      	bls.n	8010296 <__udivmoddi4+0x1e6>
 8010286:	19ed      	adds	r5, r5, r7
 8010288:	f100 38ff 	add.w	r8, r0, #4294967295
 801028c:	d26f      	bcs.n	801036e <__udivmoddi4+0x2be>
 801028e:	42ab      	cmp	r3, r5
 8010290:	d96d      	bls.n	801036e <__udivmoddi4+0x2be>
 8010292:	3802      	subs	r0, #2
 8010294:	443d      	add	r5, r7
 8010296:	1aeb      	subs	r3, r5, r3
 8010298:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801029c:	e78f      	b.n	80101be <__udivmoddi4+0x10e>
 801029e:	f1c1 0720 	rsb	r7, r1, #32
 80102a2:	fa22 f807 	lsr.w	r8, r2, r7
 80102a6:	408b      	lsls	r3, r1
 80102a8:	fa05 f401 	lsl.w	r4, r5, r1
 80102ac:	ea48 0303 	orr.w	r3, r8, r3
 80102b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80102b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80102b8:	40fd      	lsrs	r5, r7
 80102ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80102be:	fbb5 f9fc 	udiv	r9, r5, ip
 80102c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80102c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80102ca:	fa1f f883 	uxth.w	r8, r3
 80102ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80102d2:	fb09 f408 	mul.w	r4, r9, r8
 80102d6:	42ac      	cmp	r4, r5
 80102d8:	fa02 f201 	lsl.w	r2, r2, r1
 80102dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80102e0:	d908      	bls.n	80102f4 <__udivmoddi4+0x244>
 80102e2:	18ed      	adds	r5, r5, r3
 80102e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80102e8:	d243      	bcs.n	8010372 <__udivmoddi4+0x2c2>
 80102ea:	42ac      	cmp	r4, r5
 80102ec:	d941      	bls.n	8010372 <__udivmoddi4+0x2c2>
 80102ee:	f1a9 0902 	sub.w	r9, r9, #2
 80102f2:	441d      	add	r5, r3
 80102f4:	1b2d      	subs	r5, r5, r4
 80102f6:	fa1f fe8e 	uxth.w	lr, lr
 80102fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80102fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8010302:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8010306:	fb00 f808 	mul.w	r8, r0, r8
 801030a:	45a0      	cmp	r8, r4
 801030c:	d907      	bls.n	801031e <__udivmoddi4+0x26e>
 801030e:	18e4      	adds	r4, r4, r3
 8010310:	f100 35ff 	add.w	r5, r0, #4294967295
 8010314:	d229      	bcs.n	801036a <__udivmoddi4+0x2ba>
 8010316:	45a0      	cmp	r8, r4
 8010318:	d927      	bls.n	801036a <__udivmoddi4+0x2ba>
 801031a:	3802      	subs	r0, #2
 801031c:	441c      	add	r4, r3
 801031e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010322:	eba4 0408 	sub.w	r4, r4, r8
 8010326:	fba0 8902 	umull	r8, r9, r0, r2
 801032a:	454c      	cmp	r4, r9
 801032c:	46c6      	mov	lr, r8
 801032e:	464d      	mov	r5, r9
 8010330:	d315      	bcc.n	801035e <__udivmoddi4+0x2ae>
 8010332:	d012      	beq.n	801035a <__udivmoddi4+0x2aa>
 8010334:	b156      	cbz	r6, 801034c <__udivmoddi4+0x29c>
 8010336:	ebba 030e 	subs.w	r3, sl, lr
 801033a:	eb64 0405 	sbc.w	r4, r4, r5
 801033e:	fa04 f707 	lsl.w	r7, r4, r7
 8010342:	40cb      	lsrs	r3, r1
 8010344:	431f      	orrs	r7, r3
 8010346:	40cc      	lsrs	r4, r1
 8010348:	6037      	str	r7, [r6, #0]
 801034a:	6074      	str	r4, [r6, #4]
 801034c:	2100      	movs	r1, #0
 801034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010352:	4618      	mov	r0, r3
 8010354:	e6f8      	b.n	8010148 <__udivmoddi4+0x98>
 8010356:	4690      	mov	r8, r2
 8010358:	e6e0      	b.n	801011c <__udivmoddi4+0x6c>
 801035a:	45c2      	cmp	sl, r8
 801035c:	d2ea      	bcs.n	8010334 <__udivmoddi4+0x284>
 801035e:	ebb8 0e02 	subs.w	lr, r8, r2
 8010362:	eb69 0503 	sbc.w	r5, r9, r3
 8010366:	3801      	subs	r0, #1
 8010368:	e7e4      	b.n	8010334 <__udivmoddi4+0x284>
 801036a:	4628      	mov	r0, r5
 801036c:	e7d7      	b.n	801031e <__udivmoddi4+0x26e>
 801036e:	4640      	mov	r0, r8
 8010370:	e791      	b.n	8010296 <__udivmoddi4+0x1e6>
 8010372:	4681      	mov	r9, r0
 8010374:	e7be      	b.n	80102f4 <__udivmoddi4+0x244>
 8010376:	4601      	mov	r1, r0
 8010378:	e778      	b.n	801026c <__udivmoddi4+0x1bc>
 801037a:	3802      	subs	r0, #2
 801037c:	443c      	add	r4, r7
 801037e:	e745      	b.n	801020c <__udivmoddi4+0x15c>
 8010380:	4608      	mov	r0, r1
 8010382:	e708      	b.n	8010196 <__udivmoddi4+0xe6>
 8010384:	f1a8 0802 	sub.w	r8, r8, #2
 8010388:	443d      	add	r5, r7
 801038a:	e72b      	b.n	80101e4 <__udivmoddi4+0x134>

0801038c <__aeabi_idiv0>:
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop

08010390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010394:	4a0e      	ldr	r2, [pc, #56]	; (80103d0 <HAL_Init+0x40>)
 8010396:	4b0e      	ldr	r3, [pc, #56]	; (80103d0 <HAL_Init+0x40>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801039e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80103a0:	4a0b      	ldr	r2, [pc, #44]	; (80103d0 <HAL_Init+0x40>)
 80103a2:	4b0b      	ldr	r3, [pc, #44]	; (80103d0 <HAL_Init+0x40>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80103aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80103ac:	4a08      	ldr	r2, [pc, #32]	; (80103d0 <HAL_Init+0x40>)
 80103ae:	4b08      	ldr	r3, [pc, #32]	; (80103d0 <HAL_Init+0x40>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80103b8:	2003      	movs	r0, #3
 80103ba:	f000 f8f4 	bl	80105a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80103be:	2000      	movs	r0, #0
 80103c0:	f016 fb18 	bl	80269f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80103c4:	f016 faea 	bl	802699c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop
 80103d0:	40023c00 	.word	0x40023c00

080103d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80103d4:	b480      	push	{r7}
 80103d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80103d8:	4b06      	ldr	r3, [pc, #24]	; (80103f4 <HAL_IncTick+0x20>)
 80103da:	781b      	ldrb	r3, [r3, #0]
 80103dc:	461a      	mov	r2, r3
 80103de:	4b06      	ldr	r3, [pc, #24]	; (80103f8 <HAL_IncTick+0x24>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	4413      	add	r3, r2
 80103e4:	4a04      	ldr	r2, [pc, #16]	; (80103f8 <HAL_IncTick+0x24>)
 80103e6:	6013      	str	r3, [r2, #0]
}
 80103e8:	bf00      	nop
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	20000000 	.word	0x20000000
 80103f8:	2000a1cc 	.word	0x2000a1cc

080103fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80103fc:	b480      	push	{r7}
 80103fe:	af00      	add	r7, sp, #0
  return uwTick;
 8010400:	4b03      	ldr	r3, [pc, #12]	; (8010410 <HAL_GetTick+0x14>)
 8010402:	681b      	ldr	r3, [r3, #0]
}
 8010404:	4618      	mov	r0, r3
 8010406:	46bd      	mov	sp, r7
 8010408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040c:	4770      	bx	lr
 801040e:	bf00      	nop
 8010410:	2000a1cc 	.word	0x2000a1cc

08010414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b084      	sub	sp, #16
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801041c:	f7ff ffee 	bl	80103fc <HAL_GetTick>
 8010420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	f1b3 3fff 	cmp.w	r3, #4294967295
 801042c:	d005      	beq.n	801043a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801042e:	4b09      	ldr	r3, [pc, #36]	; (8010454 <HAL_Delay+0x40>)
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	461a      	mov	r2, r3
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	4413      	add	r3, r2
 8010438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801043a:	bf00      	nop
 801043c:	f7ff ffde 	bl	80103fc <HAL_GetTick>
 8010440:	4602      	mov	r2, r0
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	1ad2      	subs	r2, r2, r3
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	429a      	cmp	r2, r3
 801044a:	d3f7      	bcc.n	801043c <HAL_Delay+0x28>
  {
  }
}
 801044c:	bf00      	nop
 801044e:	3710      	adds	r7, #16
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}
 8010454:	20000000 	.word	0x20000000

08010458 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010458:	b480      	push	{r7}
 801045a:	b085      	sub	sp, #20
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f003 0307 	and.w	r3, r3, #7
 8010466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010468:	4b0c      	ldr	r3, [pc, #48]	; (801049c <NVIC_SetPriorityGrouping+0x44>)
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801046e:	68ba      	ldr	r2, [r7, #8]
 8010470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010474:	4013      	ands	r3, r2
 8010476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801048a:	4a04      	ldr	r2, [pc, #16]	; (801049c <NVIC_SetPriorityGrouping+0x44>)
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	60d3      	str	r3, [r2, #12]
}
 8010490:	bf00      	nop
 8010492:	3714      	adds	r7, #20
 8010494:	46bd      	mov	sp, r7
 8010496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049a:	4770      	bx	lr
 801049c:	e000ed00 	.word	0xe000ed00

080104a0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80104a0:	b480      	push	{r7}
 80104a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80104a4:	4b04      	ldr	r3, [pc, #16]	; (80104b8 <NVIC_GetPriorityGrouping+0x18>)
 80104a6:	68db      	ldr	r3, [r3, #12]
 80104a8:	0a1b      	lsrs	r3, r3, #8
 80104aa:	f003 0307 	and.w	r3, r3, #7
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr
 80104b8:	e000ed00 	.word	0xe000ed00

080104bc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	4603      	mov	r3, r0
 80104c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80104c6:	4909      	ldr	r1, [pc, #36]	; (80104ec <NVIC_EnableIRQ+0x30>)
 80104c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104cc:	095b      	lsrs	r3, r3, #5
 80104ce:	79fa      	ldrb	r2, [r7, #7]
 80104d0:	f002 021f 	and.w	r2, r2, #31
 80104d4:	2001      	movs	r0, #1
 80104d6:	fa00 f202 	lsl.w	r2, r0, r2
 80104da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80104de:	bf00      	nop
 80104e0:	370c      	adds	r7, #12
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	e000e100 	.word	0xe000e100

080104f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b083      	sub	sp, #12
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	4603      	mov	r3, r0
 80104f8:	6039      	str	r1, [r7, #0]
 80104fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80104fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010500:	2b00      	cmp	r3, #0
 8010502:	da0b      	bge.n	801051c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010504:	490d      	ldr	r1, [pc, #52]	; (801053c <NVIC_SetPriority+0x4c>)
 8010506:	79fb      	ldrb	r3, [r7, #7]
 8010508:	f003 030f 	and.w	r3, r3, #15
 801050c:	3b04      	subs	r3, #4
 801050e:	683a      	ldr	r2, [r7, #0]
 8010510:	b2d2      	uxtb	r2, r2
 8010512:	0112      	lsls	r2, r2, #4
 8010514:	b2d2      	uxtb	r2, r2
 8010516:	440b      	add	r3, r1
 8010518:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801051a:	e009      	b.n	8010530 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801051c:	4908      	ldr	r1, [pc, #32]	; (8010540 <NVIC_SetPriority+0x50>)
 801051e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010522:	683a      	ldr	r2, [r7, #0]
 8010524:	b2d2      	uxtb	r2, r2
 8010526:	0112      	lsls	r2, r2, #4
 8010528:	b2d2      	uxtb	r2, r2
 801052a:	440b      	add	r3, r1
 801052c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010530:	bf00      	nop
 8010532:	370c      	adds	r7, #12
 8010534:	46bd      	mov	sp, r7
 8010536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053a:	4770      	bx	lr
 801053c:	e000ed00 	.word	0xe000ed00
 8010540:	e000e100 	.word	0xe000e100

08010544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010544:	b480      	push	{r7}
 8010546:	b089      	sub	sp, #36	; 0x24
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f003 0307 	and.w	r3, r3, #7
 8010556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	f1c3 0307 	rsb	r3, r3, #7
 801055e:	2b04      	cmp	r3, #4
 8010560:	bf28      	it	cs
 8010562:	2304      	movcs	r3, #4
 8010564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	3304      	adds	r3, #4
 801056a:	2b06      	cmp	r3, #6
 801056c:	d902      	bls.n	8010574 <NVIC_EncodePriority+0x30>
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	3b03      	subs	r3, #3
 8010572:	e000      	b.n	8010576 <NVIC_EncodePriority+0x32>
 8010574:	2300      	movs	r3, #0
 8010576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010578:	2201      	movs	r2, #1
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	fa02 f303 	lsl.w	r3, r2, r3
 8010580:	1e5a      	subs	r2, r3, #1
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	401a      	ands	r2, r3
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801058a:	2101      	movs	r1, #1
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	fa01 f303 	lsl.w	r3, r1, r3
 8010592:	1e59      	subs	r1, r3, #1
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010598:	4313      	orrs	r3, r2
         );
}
 801059a:	4618      	mov	r0, r3
 801059c:	3724      	adds	r7, #36	; 0x24
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr

080105a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80105a6:	b580      	push	{r7, lr}
 80105a8:	b082      	sub	sp, #8
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f7ff ff52 	bl	8010458 <NVIC_SetPriorityGrouping>
}
 80105b4:	bf00      	nop
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80105bc:	b580      	push	{r7, lr}
 80105be:	b086      	sub	sp, #24
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	4603      	mov	r3, r0
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	607a      	str	r2, [r7, #4]
 80105c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80105ca:	2300      	movs	r3, #0
 80105cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80105ce:	f7ff ff67 	bl	80104a0 <NVIC_GetPriorityGrouping>
 80105d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	68b9      	ldr	r1, [r7, #8]
 80105d8:	6978      	ldr	r0, [r7, #20]
 80105da:	f7ff ffb3 	bl	8010544 <NVIC_EncodePriority>
 80105de:	4602      	mov	r2, r0
 80105e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105e4:	4611      	mov	r1, r2
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7ff ff82 	bl	80104f0 <NVIC_SetPriority>
}
 80105ec:	bf00      	nop
 80105ee:	3718      	adds	r7, #24
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	4603      	mov	r3, r0
 80105fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80105fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010602:	4618      	mov	r0, r3
 8010604:	f7ff ff5a 	bl	80104bc <NVIC_EnableIRQ>
}
 8010608:	bf00      	nop
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b086      	sub	sp, #24
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8010618:	2300      	movs	r3, #0
 801061a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801061c:	f7ff feee 	bl	80103fc <HAL_GetTick>
 8010620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d101      	bne.n	801062c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8010628:	2301      	movs	r3, #1
 801062a:	e099      	b.n	8010760 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2200      	movs	r2, #0
 8010630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2202      	movs	r2, #2
 8010638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	6812      	ldr	r2, [r2, #0]
 8010644:	6812      	ldr	r2, [r2, #0]
 8010646:	f022 0201 	bic.w	r2, r2, #1
 801064a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801064c:	e00f      	b.n	801066e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801064e:	f7ff fed5 	bl	80103fc <HAL_GetTick>
 8010652:	4602      	mov	r2, r0
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	1ad3      	subs	r3, r2, r3
 8010658:	2b05      	cmp	r3, #5
 801065a:	d908      	bls.n	801066e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2220      	movs	r2, #32
 8010660:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2203      	movs	r2, #3
 8010666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801066a:	2303      	movs	r3, #3
 801066c:	e078      	b.n	8010760 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	f003 0301 	and.w	r3, r3, #1
 8010678:	2b00      	cmp	r3, #0
 801067a:	d1e8      	bne.n	801064e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8010684:	697a      	ldr	r2, [r7, #20]
 8010686:	4b38      	ldr	r3, [pc, #224]	; (8010768 <HAL_DMA_Init+0x158>)
 8010688:	4013      	ands	r3, r2
 801068a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	685a      	ldr	r2, [r3, #4]
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	689b      	ldr	r3, [r3, #8]
 8010694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801069a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	691b      	ldr	r3, [r3, #16]
 80106a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80106a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	699b      	ldr	r3, [r3, #24]
 80106ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80106b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6a1b      	ldr	r3, [r3, #32]
 80106b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80106ba:	697a      	ldr	r2, [r7, #20]
 80106bc:	4313      	orrs	r3, r2
 80106be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106c4:	2b04      	cmp	r3, #4
 80106c6:	d107      	bne.n	80106d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106d0:	4313      	orrs	r3, r2
 80106d2:	697a      	ldr	r2, [r7, #20]
 80106d4:	4313      	orrs	r3, r2
 80106d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	697a      	ldr	r2, [r7, #20]
 80106de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	695b      	ldr	r3, [r3, #20]
 80106e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	f023 0307 	bic.w	r3, r3, #7
 80106ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f4:	697a      	ldr	r2, [r7, #20]
 80106f6:	4313      	orrs	r3, r2
 80106f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106fe:	2b04      	cmp	r3, #4
 8010700:	d117      	bne.n	8010732 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	4313      	orrs	r3, r2
 801070a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010710:	2b00      	cmp	r3, #0
 8010712:	d00e      	beq.n	8010732 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f000 fa99 	bl	8010c4c <DMA_CheckFifoParam>
 801071a:	4603      	mov	r3, r0
 801071c:	2b00      	cmp	r3, #0
 801071e:	d008      	beq.n	8010732 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2240      	movs	r2, #64	; 0x40
 8010724:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2201      	movs	r2, #1
 801072a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801072e:	2301      	movs	r3, #1
 8010730:	e016      	b.n	8010760 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	697a      	ldr	r2, [r7, #20]
 8010738:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f000 fa50 	bl	8010be0 <DMA_CalcBaseAndBitshift>
 8010740:	4603      	mov	r3, r0
 8010742:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010748:	223f      	movs	r2, #63	; 0x3f
 801074a:	409a      	lsls	r2, r3
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2200      	movs	r2, #0
 8010754:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2201      	movs	r2, #1
 801075a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801075e:	2300      	movs	r3, #0
}
 8010760:	4618      	mov	r0, r3
 8010762:	3718      	adds	r7, #24
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	f010803f 	.word	0xf010803f

0801076c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b086      	sub	sp, #24
 8010770:	af00      	add	r7, sp, #0
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	607a      	str	r2, [r7, #4]
 8010778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801077a:	2300      	movs	r3, #0
 801077c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010782:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801078a:	2b01      	cmp	r3, #1
 801078c:	d101      	bne.n	8010792 <HAL_DMA_Start_IT+0x26>
 801078e:	2302      	movs	r3, #2
 8010790:	e048      	b.n	8010824 <HAL_DMA_Start_IT+0xb8>
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	2201      	movs	r2, #1
 8010796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d137      	bne.n	8010816 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	2202      	movs	r2, #2
 80107aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2200      	movs	r2, #0
 80107b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	68b9      	ldr	r1, [r7, #8]
 80107ba:	68f8      	ldr	r0, [r7, #12]
 80107bc:	f000 f9e2 	bl	8010b84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80107c4:	223f      	movs	r2, #63	; 0x3f
 80107c6:	409a      	lsls	r2, r3
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	68fa      	ldr	r2, [r7, #12]
 80107d2:	6812      	ldr	r2, [r2, #0]
 80107d4:	6812      	ldr	r2, [r2, #0]
 80107d6:	f042 0216 	orr.w	r2, r2, #22
 80107da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	68fa      	ldr	r2, [r7, #12]
 80107e2:	6812      	ldr	r2, [r2, #0]
 80107e4:	6952      	ldr	r2, [r2, #20]
 80107e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80107ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d007      	beq.n	8010804 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	68fa      	ldr	r2, [r7, #12]
 80107fa:	6812      	ldr	r2, [r2, #0]
 80107fc:	6812      	ldr	r2, [r2, #0]
 80107fe:	f042 0208 	orr.w	r2, r2, #8
 8010802:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	68fa      	ldr	r2, [r7, #12]
 801080a:	6812      	ldr	r2, [r2, #0]
 801080c:	6812      	ldr	r2, [r2, #0]
 801080e:	f042 0201 	orr.w	r2, r2, #1
 8010812:	601a      	str	r2, [r3, #0]
 8010814:	e005      	b.n	8010822 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2200      	movs	r2, #0
 801081a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801081e:	2302      	movs	r3, #2
 8010820:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8010822:	7dfb      	ldrb	r3, [r7, #23]
}
 8010824:	4618      	mov	r0, r3
 8010826:	3718      	adds	r7, #24
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801083a:	b2db      	uxtb	r3, r3
 801083c:	2b02      	cmp	r3, #2
 801083e:	d004      	beq.n	801084a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2280      	movs	r2, #128	; 0x80
 8010844:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8010846:	2301      	movs	r3, #1
 8010848:	e00c      	b.n	8010864 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2205      	movs	r2, #5
 801084e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	6812      	ldr	r2, [r2, #0]
 801085a:	6812      	ldr	r2, [r2, #0]
 801085c:	f022 0201 	bic.w	r2, r2, #1
 8010860:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8010862:	2300      	movs	r3, #0
}
 8010864:	4618      	mov	r0, r3
 8010866:	370c      	adds	r7, #12
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr

08010870 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b086      	sub	sp, #24
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8010878:	2300      	movs	r3, #0
 801087a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801087c:	4b92      	ldr	r3, [pc, #584]	; (8010ac8 <HAL_DMA_IRQHandler+0x258>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	4a92      	ldr	r2, [pc, #584]	; (8010acc <HAL_DMA_IRQHandler+0x25c>)
 8010882:	fba2 2303 	umull	r2, r3, r2, r3
 8010886:	0a9b      	lsrs	r3, r3, #10
 8010888:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801088e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801089a:	2208      	movs	r2, #8
 801089c:	409a      	lsls	r2, r3
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	4013      	ands	r3, r2
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d01a      	beq.n	80108dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	f003 0304 	and.w	r3, r3, #4
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d013      	beq.n	80108dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	6812      	ldr	r2, [r2, #0]
 80108bc:	6812      	ldr	r2, [r2, #0]
 80108be:	f022 0204 	bic.w	r2, r2, #4
 80108c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108c8:	2208      	movs	r2, #8
 80108ca:	409a      	lsls	r2, r3
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108d4:	f043 0201 	orr.w	r2, r3, #1
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108e0:	2201      	movs	r2, #1
 80108e2:	409a      	lsls	r2, r3
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	4013      	ands	r3, r2
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d012      	beq.n	8010912 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	695b      	ldr	r3, [r3, #20]
 80108f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d00b      	beq.n	8010912 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108fe:	2201      	movs	r2, #1
 8010900:	409a      	lsls	r2, r3
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801090a:	f043 0202 	orr.w	r2, r3, #2
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010916:	2204      	movs	r2, #4
 8010918:	409a      	lsls	r2, r3
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	4013      	ands	r3, r2
 801091e:	2b00      	cmp	r3, #0
 8010920:	d012      	beq.n	8010948 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f003 0302 	and.w	r3, r3, #2
 801092c:	2b00      	cmp	r3, #0
 801092e:	d00b      	beq.n	8010948 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010934:	2204      	movs	r2, #4
 8010936:	409a      	lsls	r2, r3
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010940:	f043 0204 	orr.w	r2, r3, #4
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801094c:	2210      	movs	r2, #16
 801094e:	409a      	lsls	r2, r3
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	4013      	ands	r3, r2
 8010954:	2b00      	cmp	r3, #0
 8010956:	d043      	beq.n	80109e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f003 0308 	and.w	r3, r3, #8
 8010962:	2b00      	cmp	r3, #0
 8010964:	d03c      	beq.n	80109e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801096a:	2210      	movs	r2, #16
 801096c:	409a      	lsls	r2, r3
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801097c:	2b00      	cmp	r3, #0
 801097e:	d018      	beq.n	80109b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801098a:	2b00      	cmp	r3, #0
 801098c:	d108      	bne.n	80109a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010992:	2b00      	cmp	r3, #0
 8010994:	d024      	beq.n	80109e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	4798      	blx	r3
 801099e:	e01f      	b.n	80109e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d01b      	beq.n	80109e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	4798      	blx	r3
 80109b0:	e016      	b.n	80109e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d107      	bne.n	80109d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	687a      	ldr	r2, [r7, #4]
 80109c6:	6812      	ldr	r2, [r2, #0]
 80109c8:	6812      	ldr	r2, [r2, #0]
 80109ca:	f022 0208 	bic.w	r2, r2, #8
 80109ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d003      	beq.n	80109e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109e4:	2220      	movs	r2, #32
 80109e6:	409a      	lsls	r2, r3
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	4013      	ands	r3, r2
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f000 808e 	beq.w	8010b0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f003 0310 	and.w	r3, r3, #16
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	f000 8086 	beq.w	8010b0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a06:	2220      	movs	r2, #32
 8010a08:	409a      	lsls	r2, r3
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010a14:	b2db      	uxtb	r3, r3
 8010a16:	2b05      	cmp	r3, #5
 8010a18:	d136      	bne.n	8010a88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	687a      	ldr	r2, [r7, #4]
 8010a20:	6812      	ldr	r2, [r2, #0]
 8010a22:	6812      	ldr	r2, [r2, #0]
 8010a24:	f022 0216 	bic.w	r2, r2, #22
 8010a28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	6812      	ldr	r2, [r2, #0]
 8010a32:	6952      	ldr	r2, [r2, #20]
 8010a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010a38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d103      	bne.n	8010a4a <HAL_DMA_IRQHandler+0x1da>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d007      	beq.n	8010a5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	6812      	ldr	r2, [r2, #0]
 8010a52:	6812      	ldr	r2, [r2, #0]
 8010a54:	f022 0208 	bic.w	r2, r2, #8
 8010a58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a5e:	223f      	movs	r2, #63	; 0x3f
 8010a60:	409a      	lsls	r2, r3
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2201      	movs	r2, #1
 8010a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d07d      	beq.n	8010b7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	4798      	blx	r3
        }
        return;
 8010a86:	e078      	b.n	8010b7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d01c      	beq.n	8010ad0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d108      	bne.n	8010ab6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d030      	beq.n	8010b0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	4798      	blx	r3
 8010ab4:	e02b      	b.n	8010b0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d027      	beq.n	8010b0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	4798      	blx	r3
 8010ac6:	e022      	b.n	8010b0e <HAL_DMA_IRQHandler+0x29e>
 8010ac8:	20000064 	.word	0x20000064
 8010acc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d10f      	bne.n	8010afe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	687a      	ldr	r2, [r7, #4]
 8010ae4:	6812      	ldr	r2, [r2, #0]
 8010ae6:	6812      	ldr	r2, [r2, #0]
 8010ae8:	f022 0210 	bic.w	r2, r2, #16
 8010aec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2200      	movs	r2, #0
 8010af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2201      	movs	r2, #1
 8010afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d003      	beq.n	8010b0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d032      	beq.n	8010b7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b1a:	f003 0301 	and.w	r3, r3, #1
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d022      	beq.n	8010b68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2205      	movs	r2, #5
 8010b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	6812      	ldr	r2, [r2, #0]
 8010b32:	6812      	ldr	r2, [r2, #0]
 8010b34:	f022 0201 	bic.w	r2, r2, #1
 8010b38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	60bb      	str	r3, [r7, #8]
 8010b40:	697a      	ldr	r2, [r7, #20]
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d807      	bhi.n	8010b56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f003 0301 	and.w	r3, r3, #1
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d1f2      	bne.n	8010b3a <HAL_DMA_IRQHandler+0x2ca>
 8010b54:	e000      	b.n	8010b58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8010b56:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2201      	movs	r2, #1
 8010b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d005      	beq.n	8010b7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	4798      	blx	r3
 8010b78:	e000      	b.n	8010b7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8010b7a:	bf00      	nop
    }
  }
}
 8010b7c:	3718      	adds	r7, #24
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop

08010b84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010b84:	b480      	push	{r7}
 8010b86:	b085      	sub	sp, #20
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	60f8      	str	r0, [r7, #12]
 8010b8c:	60b9      	str	r1, [r7, #8]
 8010b8e:	607a      	str	r2, [r7, #4]
 8010b90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	68fa      	ldr	r2, [r7, #12]
 8010b98:	6812      	ldr	r2, [r2, #0]
 8010b9a:	6812      	ldr	r2, [r2, #0]
 8010b9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010ba0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	683a      	ldr	r2, [r7, #0]
 8010ba8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	2b40      	cmp	r3, #64	; 0x40
 8010bb0:	d108      	bne.n	8010bc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	687a      	ldr	r2, [r7, #4]
 8010bb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	68ba      	ldr	r2, [r7, #8]
 8010bc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8010bc2:	e007      	b.n	8010bd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	68ba      	ldr	r2, [r7, #8]
 8010bca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	60da      	str	r2, [r3, #12]
}
 8010bd4:	bf00      	nop
 8010bd6:	3714      	adds	r7, #20
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bde:	4770      	bx	lr

08010be0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b085      	sub	sp, #20
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	3b10      	subs	r3, #16
 8010bf0:	4a14      	ldr	r2, [pc, #80]	; (8010c44 <DMA_CalcBaseAndBitshift+0x64>)
 8010bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8010bf6:	091b      	lsrs	r3, r3, #4
 8010bf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8010bfa:	4a13      	ldr	r2, [pc, #76]	; (8010c48 <DMA_CalcBaseAndBitshift+0x68>)
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	4413      	add	r3, r2
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	461a      	mov	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2b03      	cmp	r3, #3
 8010c0c:	d909      	bls.n	8010c22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010c16:	f023 0303 	bic.w	r3, r3, #3
 8010c1a:	1d1a      	adds	r2, r3, #4
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	659a      	str	r2, [r3, #88]	; 0x58
 8010c20:	e007      	b.n	8010c32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010c2a:	f023 0303 	bic.w	r3, r3, #3
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3714      	adds	r7, #20
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr
 8010c42:	bf00      	nop
 8010c44:	aaaaaaab 	.word	0xaaaaaaab
 8010c48:	0802b8c0 	.word	0x0802b8c0

08010c4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b085      	sub	sp, #20
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c54:	2300      	movs	r3, #0
 8010c56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	699b      	ldr	r3, [r3, #24]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d11f      	bne.n	8010ca6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	2b03      	cmp	r3, #3
 8010c6a:	d855      	bhi.n	8010d18 <DMA_CheckFifoParam+0xcc>
 8010c6c:	a201      	add	r2, pc, #4	; (adr r2, 8010c74 <DMA_CheckFifoParam+0x28>)
 8010c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c72:	bf00      	nop
 8010c74:	08010c85 	.word	0x08010c85
 8010c78:	08010c97 	.word	0x08010c97
 8010c7c:	08010c85 	.word	0x08010c85
 8010c80:	08010d19 	.word	0x08010d19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d045      	beq.n	8010d1c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8010c90:	2301      	movs	r3, #1
 8010c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010c94:	e042      	b.n	8010d1c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010c9e:	d13f      	bne.n	8010d20 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010ca4:	e03c      	b.n	8010d20 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	699b      	ldr	r3, [r3, #24]
 8010caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010cae:	d121      	bne.n	8010cf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	2b03      	cmp	r3, #3
 8010cb4:	d836      	bhi.n	8010d24 <DMA_CheckFifoParam+0xd8>
 8010cb6:	a201      	add	r2, pc, #4	; (adr r2, 8010cbc <DMA_CheckFifoParam+0x70>)
 8010cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cbc:	08010ccd 	.word	0x08010ccd
 8010cc0:	08010cd3 	.word	0x08010cd3
 8010cc4:	08010ccd 	.word	0x08010ccd
 8010cc8:	08010ce5 	.word	0x08010ce5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8010ccc:	2301      	movs	r3, #1
 8010cce:	73fb      	strb	r3, [r7, #15]
      break;
 8010cd0:	e02f      	b.n	8010d32 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d024      	beq.n	8010d28 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8010cde:	2301      	movs	r3, #1
 8010ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010ce2:	e021      	b.n	8010d28 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ce8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010cec:	d11e      	bne.n	8010d2c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8010cee:	2301      	movs	r3, #1
 8010cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8010cf2:	e01b      	b.n	8010d2c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	2b02      	cmp	r3, #2
 8010cf8:	d902      	bls.n	8010d00 <DMA_CheckFifoParam+0xb4>
 8010cfa:	2b03      	cmp	r3, #3
 8010cfc:	d003      	beq.n	8010d06 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8010cfe:	e018      	b.n	8010d32 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8010d00:	2301      	movs	r3, #1
 8010d02:	73fb      	strb	r3, [r7, #15]
      break;
 8010d04:	e015      	b.n	8010d32 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d00e      	beq.n	8010d30 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8010d12:	2301      	movs	r3, #1
 8010d14:	73fb      	strb	r3, [r7, #15]
      break;
 8010d16:	e00b      	b.n	8010d30 <DMA_CheckFifoParam+0xe4>
      break;
 8010d18:	bf00      	nop
 8010d1a:	e00a      	b.n	8010d32 <DMA_CheckFifoParam+0xe6>
      break;
 8010d1c:	bf00      	nop
 8010d1e:	e008      	b.n	8010d32 <DMA_CheckFifoParam+0xe6>
      break;
 8010d20:	bf00      	nop
 8010d22:	e006      	b.n	8010d32 <DMA_CheckFifoParam+0xe6>
      break;
 8010d24:	bf00      	nop
 8010d26:	e004      	b.n	8010d32 <DMA_CheckFifoParam+0xe6>
      break;
 8010d28:	bf00      	nop
 8010d2a:	e002      	b.n	8010d32 <DMA_CheckFifoParam+0xe6>
      break;   
 8010d2c:	bf00      	nop
 8010d2e:	e000      	b.n	8010d32 <DMA_CheckFifoParam+0xe6>
      break;
 8010d30:	bf00      	nop
    }
  } 
  
  return status; 
 8010d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3714      	adds	r7, #20
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b088      	sub	sp, #32
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	61fb      	str	r3, [r7, #28]
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8010d50:	4baa      	ldr	r3, [pc, #680]	; (8010ffc <HAL_ETH_Init+0x2bc>)
 8010d52:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8010d54:	2300      	movs	r3, #0
 8010d56:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d101      	bne.n	8010d66 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8010d62:	2301      	movs	r3, #1
 8010d64:	e185      	b.n	8011072 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d106      	bne.n	8010d80 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2200      	movs	r2, #0
 8010d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f012 fdf6 	bl	802396c <HAL_ETH_MspInit>
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d80:	2300      	movs	r3, #0
 8010d82:	60bb      	str	r3, [r7, #8]
 8010d84:	4a9e      	ldr	r2, [pc, #632]	; (8011000 <HAL_ETH_Init+0x2c0>)
 8010d86:	4b9e      	ldr	r3, [pc, #632]	; (8011000 <HAL_ETH_Init+0x2c0>)
 8010d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8010d90:	4b9b      	ldr	r3, [pc, #620]	; (8011000 <HAL_ETH_Init+0x2c0>)
 8010d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d98:	60bb      	str	r3, [r7, #8]
 8010d9a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8010d9c:	4a99      	ldr	r2, [pc, #612]	; (8011004 <HAL_ETH_Init+0x2c4>)
 8010d9e:	4b99      	ldr	r3, [pc, #612]	; (8011004 <HAL_ETH_Init+0x2c4>)
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010da6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8010da8:	4996      	ldr	r1, [pc, #600]	; (8011004 <HAL_ETH_Init+0x2c4>)
 8010daa:	4b96      	ldr	r3, [pc, #600]	; (8011004 <HAL_ETH_Init+0x2c4>)
 8010dac:	685a      	ldr	r2, [r3, #4]
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6a1b      	ldr	r3, [r3, #32]
 8010db2:	4313      	orrs	r3, r2
 8010db4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	687a      	ldr	r2, [r7, #4]
 8010dbc:	6812      	ldr	r2, [r2, #0]
 8010dbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010dc2:	6812      	ldr	r2, [r2, #0]
 8010dc4:	f042 0201 	orr.w	r2, r2, #1
 8010dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010dcc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8010dce:	f7ff fb15 	bl	80103fc <HAL_GetTick>
 8010dd2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010dd4:	e011      	b.n	8010dfa <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8010dd6:	f7ff fb11 	bl	80103fc <HAL_GetTick>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	1ad3      	subs	r3, r2, r3
 8010de0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010de4:	d909      	bls.n	8010dfa <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2203      	movs	r2, #3
 8010dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2200      	movs	r2, #0
 8010df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8010df6:	2303      	movs	r3, #3
 8010df8:	e13b      	b.n	8011072 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	f003 0301 	and.w	r3, r3, #1
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d1e4      	bne.n	8010dd6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	691b      	ldr	r3, [r3, #16]
 8010e12:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	f023 031c 	bic.w	r3, r3, #28
 8010e1a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8010e1c:	f002 f812 	bl	8012e44 <HAL_RCC_GetHCLKFreq>
 8010e20:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8010e22:	69bb      	ldr	r3, [r7, #24]
 8010e24:	4a78      	ldr	r2, [pc, #480]	; (8011008 <HAL_ETH_Init+0x2c8>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d908      	bls.n	8010e3c <HAL_ETH_Init+0xfc>
 8010e2a:	69bb      	ldr	r3, [r7, #24]
 8010e2c:	4a77      	ldr	r2, [pc, #476]	; (801100c <HAL_ETH_Init+0x2cc>)
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d804      	bhi.n	8010e3c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	f043 0308 	orr.w	r3, r3, #8
 8010e38:	61fb      	str	r3, [r7, #28]
 8010e3a:	e027      	b.n	8010e8c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8010e3c:	69bb      	ldr	r3, [r7, #24]
 8010e3e:	4a73      	ldr	r2, [pc, #460]	; (801100c <HAL_ETH_Init+0x2cc>)
 8010e40:	4293      	cmp	r3, r2
 8010e42:	d908      	bls.n	8010e56 <HAL_ETH_Init+0x116>
 8010e44:	69bb      	ldr	r3, [r7, #24]
 8010e46:	4a72      	ldr	r2, [pc, #456]	; (8011010 <HAL_ETH_Init+0x2d0>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d804      	bhi.n	8010e56 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	f043 030c 	orr.w	r3, r3, #12
 8010e52:	61fb      	str	r3, [r7, #28]
 8010e54:	e01a      	b.n	8010e8c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	4a6d      	ldr	r2, [pc, #436]	; (8011010 <HAL_ETH_Init+0x2d0>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d903      	bls.n	8010e66 <HAL_ETH_Init+0x126>
 8010e5e:	69bb      	ldr	r3, [r7, #24]
 8010e60:	4a6c      	ldr	r2, [pc, #432]	; (8011014 <HAL_ETH_Init+0x2d4>)
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d911      	bls.n	8010e8a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8010e66:	69bb      	ldr	r3, [r7, #24]
 8010e68:	4a6a      	ldr	r2, [pc, #424]	; (8011014 <HAL_ETH_Init+0x2d4>)
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	d908      	bls.n	8010e80 <HAL_ETH_Init+0x140>
 8010e6e:	69bb      	ldr	r3, [r7, #24]
 8010e70:	4a69      	ldr	r2, [pc, #420]	; (8011018 <HAL_ETH_Init+0x2d8>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d804      	bhi.n	8010e80 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	f043 0304 	orr.w	r3, r3, #4
 8010e7c:	61fb      	str	r3, [r7, #28]
 8010e7e:	e005      	b.n	8010e8c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	f043 0310 	orr.w	r3, r3, #16
 8010e86:	61fb      	str	r3, [r7, #28]
 8010e88:	e000      	b.n	8010e8c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8010e8a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	69fa      	ldr	r2, [r7, #28]
 8010e92:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8010e94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010e98:	2100      	movs	r1, #0
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f000 fc19 	bl	80116d2 <HAL_ETH_WritePHYRegister>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d00b      	beq.n	8010ebe <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8010eaa:	6939      	ldr	r1, [r7, #16]
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f000 fca5 	bl	80117fc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8010eba:	2301      	movs	r3, #1
 8010ebc:	e0d9      	b.n	8011072 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8010ebe:	20ff      	movs	r0, #255	; 0xff
 8010ec0:	f7ff faa8 	bl	8010414 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	f000 80a7 	beq.w	801101c <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8010ece:	f7ff fa95 	bl	80103fc <HAL_GetTick>
 8010ed2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8010ed4:	f107 030c 	add.w	r3, r7, #12
 8010ed8:	461a      	mov	r2, r3
 8010eda:	2101      	movs	r1, #1
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	f000 fb90 	bl	8011602 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8010ee2:	f7ff fa8b 	bl	80103fc <HAL_GetTick>
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	1ad3      	subs	r3, r2, r3
 8010eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d90f      	bls.n	8010f14 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8010ef8:	6939      	ldr	r1, [r7, #16]
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f000 fc7e 	bl	80117fc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2201      	movs	r2, #1
 8010f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8010f10:	2303      	movs	r3, #3
 8010f12:	e0ae      	b.n	8011072 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f003 0304 	and.w	r3, r3, #4
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d0da      	beq.n	8010ed4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8010f1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010f22:	2100      	movs	r1, #0
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f000 fbd4 	bl	80116d2 <HAL_ETH_WritePHYRegister>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00b      	beq.n	8010f48 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8010f30:	2301      	movs	r3, #1
 8010f32:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8010f34:	6939      	ldr	r1, [r7, #16]
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f000 fc60 	bl	80117fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2201      	movs	r2, #1
 8010f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8010f44:	2301      	movs	r3, #1
 8010f46:	e094      	b.n	8011072 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8010f48:	f7ff fa58 	bl	80103fc <HAL_GetTick>
 8010f4c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8010f4e:	f107 030c 	add.w	r3, r7, #12
 8010f52:	461a      	mov	r2, r3
 8010f54:	2101      	movs	r1, #1
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 fb53 	bl	8011602 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8010f5c:	f7ff fa4e 	bl	80103fc <HAL_GetTick>
 8010f60:	4602      	mov	r2, r0
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	1ad3      	subs	r3, r2, r3
 8010f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	d90f      	bls.n	8010f8e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8010f6e:	2301      	movs	r3, #1
 8010f70:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8010f72:	6939      	ldr	r1, [r7, #16]
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f000 fc41 	bl	80117fc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2201      	movs	r2, #1
 8010f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2200      	movs	r2, #0
 8010f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8010f8a:	2303      	movs	r3, #3
 8010f8c:	e071      	b.n	8011072 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	f003 0320 	and.w	r3, r3, #32
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d0da      	beq.n	8010f4e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8010f98:	f107 030c 	add.w	r3, r7, #12
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	2110      	movs	r1, #16
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f000 fb2e 	bl	8011602 <HAL_ETH_ReadPHYRegister>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d00b      	beq.n	8010fc4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8010fac:	2301      	movs	r3, #1
 8010fae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8010fb0:	6939      	ldr	r1, [r7, #16]
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 fc22 	bl	80117fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2201      	movs	r2, #1
 8010fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	e056      	b.n	8011072 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f003 0304 	and.w	r3, r3, #4
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d004      	beq.n	8010fd8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010fd4:	60da      	str	r2, [r3, #12]
 8010fd6:	e002      	b.n	8010fde <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f003 0302 	and.w	r3, r3, #2
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d003      	beq.n	8010ff0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2200      	movs	r2, #0
 8010fec:	609a      	str	r2, [r3, #8]
 8010fee:	e037      	b.n	8011060 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010ff6:	609a      	str	r2, [r3, #8]
 8010ff8:	e032      	b.n	8011060 <HAL_ETH_Init+0x320>
 8010ffa:	bf00      	nop
 8010ffc:	03938700 	.word	0x03938700
 8011000:	40023800 	.word	0x40023800
 8011004:	40013800 	.word	0x40013800
 8011008:	01312cff 	.word	0x01312cff
 801100c:	02160ebf 	.word	0x02160ebf
 8011010:	039386ff 	.word	0x039386ff
 8011014:	05f5e0ff 	.word	0x05f5e0ff
 8011018:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	08db      	lsrs	r3, r3, #3
 8011022:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	689b      	ldr	r3, [r3, #8]
 8011028:	085b      	lsrs	r3, r3, #1
 801102a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 801102c:	4313      	orrs	r3, r2
 801102e:	b29b      	uxth	r3, r3
 8011030:	461a      	mov	r2, r3
 8011032:	2100      	movs	r1, #0
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 fb4c 	bl	80116d2 <HAL_ETH_WritePHYRegister>
 801103a:	4603      	mov	r3, r0
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00b      	beq.n	8011058 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8011040:	2301      	movs	r3, #1
 8011042:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8011044:	6939      	ldr	r1, [r7, #16]
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f000 fbd8 	bl	80117fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2201      	movs	r2, #1
 8011050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8011054:	2301      	movs	r3, #1
 8011056:	e00c      	b.n	8011072 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8011058:	f640 70ff 	movw	r0, #4095	; 0xfff
 801105c:	f7ff f9da 	bl	8010414 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8011060:	6939      	ldr	r1, [r7, #16]
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f000 fbca 	bl	80117fc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2201      	movs	r2, #1
 801106c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8011070:	2300      	movs	r3, #0
}
 8011072:	4618      	mov	r0, r3
 8011074:	3720      	adds	r7, #32
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop

0801107c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 801107c:	b480      	push	{r7}
 801107e:	b087      	sub	sp, #28
 8011080:	af00      	add	r7, sp, #0
 8011082:	60f8      	str	r0, [r7, #12]
 8011084:	60b9      	str	r1, [r7, #8]
 8011086:	607a      	str	r2, [r7, #4]
 8011088:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 801108a:	2300      	movs	r3, #0
 801108c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011094:	2b01      	cmp	r3, #1
 8011096:	d101      	bne.n	801109c <HAL_ETH_DMATxDescListInit+0x20>
 8011098:	2302      	movs	r3, #2
 801109a:	e052      	b.n	8011142 <HAL_ETH_DMATxDescListInit+0xc6>
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2201      	movs	r2, #1
 80110a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2202      	movs	r2, #2
 80110a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	68ba      	ldr	r2, [r7, #8]
 80110b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80110b2:	2300      	movs	r3, #0
 80110b4:	617b      	str	r3, [r7, #20]
 80110b6:	e030      	b.n	801111a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	015b      	lsls	r3, r3, #5
 80110bc:	68ba      	ldr	r2, [r7, #8]
 80110be:	4413      	add	r3, r2
 80110c0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80110c8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80110d0:	fb02 f303 	mul.w	r3, r2, r3
 80110d4:	687a      	ldr	r2, [r7, #4]
 80110d6:	4413      	add	r3, r2
 80110d8:	461a      	mov	r2, r3
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	69db      	ldr	r3, [r3, #28]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d105      	bne.n	80110f2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	1e5a      	subs	r2, r3, #1
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d908      	bls.n	801110e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	3301      	adds	r3, #1
 8011100:	015b      	lsls	r3, r3, #5
 8011102:	68ba      	ldr	r2, [r7, #8]
 8011104:	4413      	add	r3, r2
 8011106:	461a      	mov	r2, r3
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	60da      	str	r2, [r3, #12]
 801110c:	e002      	b.n	8011114 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 801110e:	68ba      	ldr	r2, [r7, #8]
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	3301      	adds	r3, #1
 8011118:	617b      	str	r3, [r7, #20]
 801111a:	697a      	ldr	r2, [r7, #20]
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	429a      	cmp	r2, r3
 8011120:	d3ca      	bcc.n	80110b8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	68ba      	ldr	r2, [r7, #8]
 8011128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801112c:	3310      	adds	r3, #16
 801112e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2201      	movs	r2, #1
 8011134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2200      	movs	r2, #0
 801113c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8011140:	2300      	movs	r3, #0
}
 8011142:	4618      	mov	r0, r3
 8011144:	371c      	adds	r7, #28
 8011146:	46bd      	mov	sp, r7
 8011148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114c:	4770      	bx	lr

0801114e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 801114e:	b480      	push	{r7}
 8011150:	b087      	sub	sp, #28
 8011152:	af00      	add	r7, sp, #0
 8011154:	60f8      	str	r0, [r7, #12]
 8011156:	60b9      	str	r1, [r7, #8]
 8011158:	607a      	str	r2, [r7, #4]
 801115a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 801115c:	2300      	movs	r3, #0
 801115e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011166:	2b01      	cmp	r3, #1
 8011168:	d101      	bne.n	801116e <HAL_ETH_DMARxDescListInit+0x20>
 801116a:	2302      	movs	r3, #2
 801116c:	e056      	b.n	801121c <HAL_ETH_DMARxDescListInit+0xce>
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2201      	movs	r2, #1
 8011172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	2202      	movs	r2, #2
 801117a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	68ba      	ldr	r2, [r7, #8]
 8011182:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8011184:	2300      	movs	r3, #0
 8011186:	617b      	str	r3, [r7, #20]
 8011188:	e034      	b.n	80111f4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 801118a:	697b      	ldr	r3, [r7, #20]
 801118c:	015b      	lsls	r3, r3, #5
 801118e:	68ba      	ldr	r2, [r7, #8]
 8011190:	4413      	add	r3, r2
 8011192:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801119a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80111a2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80111aa:	fb02 f303 	mul.w	r3, r2, r3
 80111ae:	687a      	ldr	r2, [r7, #4]
 80111b0:	4413      	add	r3, r2
 80111b2:	461a      	mov	r2, r3
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	699b      	ldr	r3, [r3, #24]
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d105      	bne.n	80111cc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	1e5a      	subs	r2, r3, #1
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d908      	bls.n	80111e8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	3301      	adds	r3, #1
 80111da:	015b      	lsls	r3, r3, #5
 80111dc:	68ba      	ldr	r2, [r7, #8]
 80111de:	4413      	add	r3, r2
 80111e0:	461a      	mov	r2, r3
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	60da      	str	r2, [r3, #12]
 80111e6:	e002      	b.n	80111ee <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80111e8:	68ba      	ldr	r2, [r7, #8]
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	3301      	adds	r3, #1
 80111f2:	617b      	str	r3, [r7, #20]
 80111f4:	697a      	ldr	r2, [r7, #20]
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d3c6      	bcc.n	801118a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	68ba      	ldr	r2, [r7, #8]
 8011202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011206:	330c      	adds	r3, #12
 8011208:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2201      	movs	r2, #1
 801120e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2200      	movs	r2, #0
 8011216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 801121a:	2300      	movs	r3, #0
}
 801121c:	4618      	mov	r0, r3
 801121e:	371c      	adds	r7, #28
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr

08011228 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8011228:	b480      	push	{r7}
 801122a:	b087      	sub	sp, #28
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8011232:	2300      	movs	r3, #0
 8011234:	617b      	str	r3, [r7, #20]
 8011236:	2300      	movs	r3, #0
 8011238:	60fb      	str	r3, [r7, #12]
 801123a:	2300      	movs	r3, #0
 801123c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011244:	2b01      	cmp	r3, #1
 8011246:	d101      	bne.n	801124c <HAL_ETH_TransmitFrame+0x24>
 8011248:	2302      	movs	r3, #2
 801124a:	e0cd      	b.n	80113e8 <HAL_ETH_TransmitFrame+0x1c0>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2201      	movs	r2, #1
 8011250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2202      	movs	r2, #2
 8011258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d109      	bne.n	8011276 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2201      	movs	r2, #1
 8011266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2200      	movs	r2, #0
 801126e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8011272:	2301      	movs	r3, #1
 8011274:	e0b8      	b.n	80113e8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	da09      	bge.n	8011294 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2212      	movs	r2, #18
 8011284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2200      	movs	r2, #0
 801128c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8011290:	2301      	movs	r3, #1
 8011292:	e0a9      	b.n	80113e8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801129a:	4293      	cmp	r3, r2
 801129c:	d915      	bls.n	80112ca <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	4a54      	ldr	r2, [pc, #336]	; (80113f4 <HAL_ETH_TransmitFrame+0x1cc>)
 80112a2:	fba2 2303 	umull	r2, r3, r2, r3
 80112a6:	0a9b      	lsrs	r3, r3, #10
 80112a8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80112aa:	683a      	ldr	r2, [r7, #0]
 80112ac:	4b51      	ldr	r3, [pc, #324]	; (80113f4 <HAL_ETH_TransmitFrame+0x1cc>)
 80112ae:	fba3 1302 	umull	r1, r3, r3, r2
 80112b2:	0a9b      	lsrs	r3, r3, #10
 80112b4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80112b8:	fb01 f303 	mul.w	r3, r1, r3
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d005      	beq.n	80112ce <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	3301      	adds	r3, #1
 80112c6:	617b      	str	r3, [r7, #20]
 80112c8:	e001      	b.n	80112ce <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80112ca:	2301      	movs	r3, #1
 80112cc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d11c      	bne.n	801130e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d8:	687a      	ldr	r2, [r7, #4]
 80112da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80112dc:	6812      	ldr	r2, [r2, #0]
 80112de:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80112e2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e8:	683a      	ldr	r2, [r7, #0]
 80112ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80112ee:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112f4:	687a      	ldr	r2, [r7, #4]
 80112f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80112f8:	6812      	ldr	r2, [r2, #0]
 80112fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80112fe:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011304:	68db      	ldr	r3, [r3, #12]
 8011306:	461a      	mov	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	62da      	str	r2, [r3, #44]	; 0x2c
 801130c:	e04b      	b.n	80113a6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 801130e:	2300      	movs	r3, #0
 8011310:	613b      	str	r3, [r7, #16]
 8011312:	e044      	b.n	801139e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011318:	687a      	ldr	r2, [r7, #4]
 801131a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801131c:	6812      	ldr	r2, [r2, #0]
 801131e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011322:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8011324:	693b      	ldr	r3, [r7, #16]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d107      	bne.n	801133a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801132e:	687a      	ldr	r2, [r7, #4]
 8011330:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011332:	6812      	ldr	r2, [r2, #0]
 8011334:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011338:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801133e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011342:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	1e5a      	subs	r2, r3, #1
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	429a      	cmp	r2, r3
 801134c:	d116      	bne.n	801137c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011352:	687a      	ldr	r2, [r7, #4]
 8011354:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011356:	6812      	ldr	r2, [r2, #0]
 8011358:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 801135c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	4a25      	ldr	r2, [pc, #148]	; (80113f8 <HAL_ETH_TransmitFrame+0x1d0>)
 8011362:	fb02 f203 	mul.w	r2, r2, r3
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	4413      	add	r3, r2
 801136a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801136e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011374:	68fa      	ldr	r2, [r7, #12]
 8011376:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801137a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011384:	6812      	ldr	r2, [r2, #0]
 8011386:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801138a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	461a      	mov	r2, r3
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	3301      	adds	r3, #1
 801139c:	613b      	str	r3, [r7, #16]
 801139e:	693a      	ldr	r2, [r7, #16]
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d3b6      	bcc.n	8011314 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80113ae:	3314      	adds	r3, #20
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	f003 0304 	and.w	r3, r3, #4
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d00d      	beq.n	80113d6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80113c2:	3314      	adds	r3, #20
 80113c4:	2204      	movs	r2, #4
 80113c6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80113d0:	3304      	adds	r3, #4
 80113d2:	2200      	movs	r2, #0
 80113d4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2201      	movs	r2, #1
 80113da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	2200      	movs	r2, #0
 80113e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80113e6:	2300      	movs	r3, #0
}
 80113e8:	4618      	mov	r0, r3
 80113ea:	371c      	adds	r7, #28
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr
 80113f4:	ac02b00b 	.word	0xac02b00b
 80113f8:	fffffa0c 	.word	0xfffffa0c

080113fc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80113fc:	b480      	push	{r7}
 80113fe:	b085      	sub	sp, #20
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8011404:	2300      	movs	r3, #0
 8011406:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801140e:	2b01      	cmp	r3, #1
 8011410:	d101      	bne.n	8011416 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8011412:	2302      	movs	r3, #2
 8011414:	e074      	b.n	8011500 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2201      	movs	r2, #1
 801141a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2202      	movs	r2, #2
 8011422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8011426:	e05a      	b.n	80114de <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	3301      	adds	r3, #1
 801142c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801143c:	d10d      	bne.n	801145a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2201      	movs	r2, #1
 801144a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	461a      	mov	r2, r3
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	629a      	str	r2, [r3, #40]	; 0x28
 8011458:	e041      	b.n	80114de <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011464:	2b00      	cmp	r3, #0
 8011466:	d10b      	bne.n	8011480 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801146c:	1c5a      	adds	r2, r3, #1
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	461a      	mov	r2, r3
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	629a      	str	r2, [r3, #40]	; 0x28
 801147e:	e02e      	b.n	80114de <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801148c:	1c5a      	adds	r2, r3, #1
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011496:	2b01      	cmp	r3, #1
 8011498:	d103      	bne.n	80114a2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	0c1b      	lsrs	r3, r3, #16
 80114aa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80114ae:	1f1a      	subs	r2, r3, #4
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114b8:	689a      	ldr	r2, [r3, #8]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114c2:	68db      	ldr	r3, [r3, #12]
 80114c4:	461a      	mov	r2, r3
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2201      	movs	r2, #1
 80114ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2200      	movs	r2, #0
 80114d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80114da:	2300      	movs	r3, #0
 80114dc:	e010      	b.n	8011500 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	db02      	blt.n	80114ee <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2b03      	cmp	r3, #3
 80114ec:	d99c      	bls.n	8011428 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2201      	movs	r2, #1
 80114f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2200      	movs	r2, #0
 80114fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80114fe:	2301      	movs	r3, #1
}
 8011500:	4618      	mov	r0, r3
 8011502:	3714      	adds	r7, #20
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr

0801150c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801151c:	3314      	adds	r3, #20
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011524:	2b40      	cmp	r3, #64	; 0x40
 8011526:	d112      	bne.n	801154e <HAL_ETH_IRQHandler+0x42>
  {
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f012 fa99 	bl	8023a60 <HAL_ETH_RxCpltCallback>
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011536:	3314      	adds	r3, #20
 8011538:	2240      	movs	r2, #64	; 0x40
 801153a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2201      	movs	r2, #1
 8011540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2200      	movs	r2, #0
 8011548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801154c:	e01b      	b.n	8011586 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011556:	3314      	adds	r3, #20
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	f003 0301 	and.w	r3, r3, #1
 801155e:	2b01      	cmp	r3, #1
 8011560:	d111      	bne.n	8011586 <HAL_ETH_IRQHandler+0x7a>
  {
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f000 f839 	bl	80115da <HAL_ETH_TxCpltCallback>
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011570:	3314      	adds	r3, #20
 8011572:	2201      	movs	r2, #1
 8011574:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2201      	movs	r2, #1
 801157a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2200      	movs	r2, #0
 8011582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801158e:	3314      	adds	r3, #20
 8011590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011594:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801159e:	3314      	adds	r3, #20
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80115a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115aa:	d112      	bne.n	80115d2 <HAL_ETH_IRQHandler+0xc6>
  {
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f000 f81e 	bl	80115ee <HAL_ETH_ErrorCallback>

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80115ba:	3314      	adds	r3, #20
 80115bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80115c0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2201      	movs	r2, #1
 80115c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	2200      	movs	r2, #0
 80115ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80115d2:	bf00      	nop
 80115d4:	3708      	adds	r7, #8
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}

080115da <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80115da:	b480      	push	{r7}
 80115dc:	b083      	sub	sp, #12
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80115e2:	bf00      	nop
 80115e4:	370c      	adds	r7, #12
 80115e6:	46bd      	mov	sp, r7
 80115e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ec:	4770      	bx	lr

080115ee <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80115ee:	b480      	push	{r7}
 80115f0:	b083      	sub	sp, #12
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80115f6:	bf00      	nop
 80115f8:	370c      	adds	r7, #12
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr

08011602 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8011602:	b580      	push	{r7, lr}
 8011604:	b086      	sub	sp, #24
 8011606:	af00      	add	r7, sp, #0
 8011608:	60f8      	str	r0, [r7, #12]
 801160a:	460b      	mov	r3, r1
 801160c:	607a      	str	r2, [r7, #4]
 801160e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8011610:	2300      	movs	r3, #0
 8011612:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8011614:	2300      	movs	r3, #0
 8011616:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801161e:	b2db      	uxtb	r3, r3
 8011620:	2b82      	cmp	r3, #130	; 0x82
 8011622:	d101      	bne.n	8011628 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8011624:	2302      	movs	r3, #2
 8011626:	e050      	b.n	80116ca <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	2282      	movs	r2, #130	; 0x82
 801162c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	691b      	ldr	r3, [r3, #16]
 8011636:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	f003 031c 	and.w	r3, r3, #28
 801163e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	8a1b      	ldrh	r3, [r3, #16]
 8011644:	02db      	lsls	r3, r3, #11
 8011646:	b29b      	uxth	r3, r3
 8011648:	697a      	ldr	r2, [r7, #20]
 801164a:	4313      	orrs	r3, r2
 801164c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 801164e:	897b      	ldrh	r3, [r7, #10]
 8011650:	019b      	lsls	r3, r3, #6
 8011652:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8011656:	697a      	ldr	r2, [r7, #20]
 8011658:	4313      	orrs	r3, r2
 801165a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	f023 0302 	bic.w	r3, r3, #2
 8011662:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	f043 0301 	orr.w	r3, r3, #1
 801166a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	697a      	ldr	r2, [r7, #20]
 8011672:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8011674:	f7fe fec2 	bl	80103fc <HAL_GetTick>
 8011678:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801167a:	e015      	b.n	80116a8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 801167c:	f7fe febe 	bl	80103fc <HAL_GetTick>
 8011680:	4602      	mov	r2, r0
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	1ad3      	subs	r3, r2, r3
 8011686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801168a:	d309      	bcc.n	80116a0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	2201      	movs	r2, #1
 8011690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	2200      	movs	r2, #0
 8011698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 801169c:	2303      	movs	r3, #3
 801169e:	e014      	b.n	80116ca <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	691b      	ldr	r3, [r3, #16]
 80116a6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	f003 0301 	and.w	r3, r3, #1
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d1e4      	bne.n	801167c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	695b      	ldr	r3, [r3, #20]
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	461a      	mov	r2, r3
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	2201      	movs	r2, #1
 80116c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80116c8:	2300      	movs	r3, #0
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3718      	adds	r7, #24
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}

080116d2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80116d2:	b580      	push	{r7, lr}
 80116d4:	b086      	sub	sp, #24
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	60f8      	str	r0, [r7, #12]
 80116da:	460b      	mov	r3, r1
 80116dc:	607a      	str	r2, [r7, #4]
 80116de:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80116e0:	2300      	movs	r3, #0
 80116e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80116e4:	2300      	movs	r3, #0
 80116e6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	2b42      	cmp	r3, #66	; 0x42
 80116f2:	d101      	bne.n	80116f8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80116f4:	2302      	movs	r3, #2
 80116f6:	e04e      	b.n	8011796 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2242      	movs	r2, #66	; 0x42
 80116fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	691b      	ldr	r3, [r3, #16]
 8011706:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	f003 031c 	and.w	r3, r3, #28
 801170e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	8a1b      	ldrh	r3, [r3, #16]
 8011714:	02db      	lsls	r3, r3, #11
 8011716:	b29b      	uxth	r3, r3
 8011718:	697a      	ldr	r2, [r7, #20]
 801171a:	4313      	orrs	r3, r2
 801171c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 801171e:	897b      	ldrh	r3, [r7, #10]
 8011720:	019b      	lsls	r3, r3, #6
 8011722:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8011726:	697a      	ldr	r2, [r7, #20]
 8011728:	4313      	orrs	r3, r2
 801172a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	f043 0302 	orr.w	r3, r3, #2
 8011732:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	f043 0301 	orr.w	r3, r3, #1
 801173a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	b292      	uxth	r2, r2
 8011744:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	697a      	ldr	r2, [r7, #20]
 801174c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 801174e:	f7fe fe55 	bl	80103fc <HAL_GetTick>
 8011752:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011754:	e015      	b.n	8011782 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8011756:	f7fe fe51 	bl	80103fc <HAL_GetTick>
 801175a:	4602      	mov	r2, r0
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011764:	d309      	bcc.n	801177a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2201      	movs	r2, #1
 801176a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	2200      	movs	r2, #0
 8011772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8011776:	2303      	movs	r3, #3
 8011778:	e00d      	b.n	8011796 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	691b      	ldr	r3, [r3, #16]
 8011780:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	f003 0301 	and.w	r3, r3, #1
 8011788:	2b00      	cmp	r3, #0
 801178a:	d1e4      	bne.n	8011756 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2201      	movs	r2, #1
 8011790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8011794:	2300      	movs	r3, #0
}
 8011796:	4618      	mov	r0, r3
 8011798:	3718      	adds	r7, #24
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 801179e:	b580      	push	{r7, lr}
 80117a0:	b082      	sub	sp, #8
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d101      	bne.n	80117b4 <HAL_ETH_Start+0x16>
 80117b0:	2302      	movs	r3, #2
 80117b2:	e01f      	b.n	80117f4 <HAL_ETH_Start+0x56>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2201      	movs	r2, #1
 80117b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2202      	movs	r2, #2
 80117c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f000 fa19 	bl	8011bfc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f000 fa33 	bl	8011c36 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f000 fa7d 	bl	8011cd0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f000 fa4a 	bl	8011c70 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f000 fa5f 	bl	8011ca0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2201      	movs	r2, #1
 80117e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2200      	movs	r2, #0
 80117ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80117f2:	2300      	movs	r3, #0
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3708      	adds	r7, #8
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b0b0      	sub	sp, #192	; 0xc0
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
 8011804:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8011806:	2300      	movs	r3, #0
 8011808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d007      	beq.n	8011822 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011818:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011820:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8011822:	2300      	movs	r3, #0
 8011824:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8011826:	2300      	movs	r3, #0
 8011828:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 801182a:	2300      	movs	r3, #0
 801182c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 801182e:	2300      	movs	r3, #0
 8011830:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8011832:	2300      	movs	r3, #0
 8011834:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8011836:	2300      	movs	r3, #0
 8011838:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	69db      	ldr	r3, [r3, #28]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d103      	bne.n	801184a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8011842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011846:	663b      	str	r3, [r7, #96]	; 0x60
 8011848:	e001      	b.n	801184e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 801184a:	2300      	movs	r3, #0
 801184c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 801184e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011852:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8011854:	2300      	movs	r3, #0
 8011856:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8011858:	2300      	movs	r3, #0
 801185a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 801185c:	2300      	movs	r3, #0
 801185e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8011860:	2300      	movs	r3, #0
 8011862:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8011864:	2300      	movs	r3, #0
 8011866:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8011868:	2340      	movs	r3, #64	; 0x40
 801186a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 801186c:	2300      	movs	r3, #0
 801186e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8011872:	2300      	movs	r3, #0
 8011874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8011878:	2300      	movs	r3, #0
 801187a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 801187e:	2300      	movs	r3, #0
 8011880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8011884:	2300      	movs	r3, #0
 8011886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 801188a:	2300      	movs	r3, #0
 801188c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8011890:	2300      	movs	r3, #0
 8011892:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8011896:	2300      	movs	r3, #0
 8011898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 801189c:	2380      	movs	r3, #128	; 0x80
 801189e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80118a2:	2300      	movs	r3, #0
 80118a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80118a8:	2300      	movs	r3, #0
 80118aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80118ae:	2300      	movs	r3, #0
 80118b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80118b4:	2300      	movs	r3, #0
 80118b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80118ba:	2300      	movs	r3, #0
 80118bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80118c0:	2300      	movs	r3, #0
 80118c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80118d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80118d4:	4bab      	ldr	r3, [pc, #684]	; (8011b84 <ETH_MACDMAConfig+0x388>)
 80118d6:	4013      	ands	r3, r2
 80118d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80118dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80118de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80118e0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80118e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80118e4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80118e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80118e8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80118ee:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80118f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80118f2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80118f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80118f6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80118fc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80118fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8011900:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8011902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8011904:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8011906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8011908:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 801190a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 801190c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 801190e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8011910:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8011912:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011916:	4313      	orrs	r3, r2
 8011918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011924:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8011930:	2001      	movs	r0, #1
 8011932:	f7fe fd6f 	bl	8010414 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801193e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8011946:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8011948:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 801194a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 801194c:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 801194e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8011952:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 8011954:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8011958:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 801195a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 801195e:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8011960:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8011964:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 8011966:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 801196a:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 801196c:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	685b      	ldr	r3, [r3, #4]
 8011974:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8011978:	2001      	movs	r0, #1
 801197a:	f7fe fd4b 	bl	8010414 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011986:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011990:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801199a:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	699b      	ldr	r3, [r3, #24]
 80119a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80119a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80119ae:	4013      	ands	r3, r2
 80119b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80119b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80119b8:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80119ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80119be:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80119c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80119c4:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80119c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80119ca:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80119cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80119d0:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80119d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80119d6:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80119d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119dc:	4313      	orrs	r3, r2
 80119de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119ea:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	699b      	ldr	r3, [r3, #24]
 80119f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80119f6:	2001      	movs	r0, #1
 80119f8:	f7fe fd0c 	bl	8010414 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011a04:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8011a0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8011a12:	430a      	orrs	r2, r1
 8011a14:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	69db      	ldr	r3, [r3, #28]
 8011a1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8011a20:	2001      	movs	r0, #1
 8011a22:	f7fe fcf7 	bl	8010414 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011a2e:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8011a30:	2300      	movs	r3, #0
 8011a32:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8011a34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011a38:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8011a3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011a42:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8011a44:	2300      	movs	r3, #0
 8011a46:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8011a50:	2300      	movs	r3, #0
 8011a52:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8011a54:	2304      	movs	r3, #4
 8011a56:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8011a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8011a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011a62:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8011a64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011a68:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8011a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011a6e:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8011a70:	2380      	movs	r3, #128	; 0x80
 8011a72:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8011a74:	2300      	movs	r3, #0
 8011a76:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a84:	3318      	adds	r3, #24
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8011a8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011a90:	4b3d      	ldr	r3, [pc, #244]	; (8011b88 <ETH_MACDMAConfig+0x38c>)
 8011a92:	4013      	ands	r3, r2
 8011a94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8011a98:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8011a9a:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8011a9c:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8011a9e:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8011aa0:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8011aa2:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8011aa4:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8011aa6:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8011aa8:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8011aaa:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8011aac:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8011aae:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8011ab0:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8011ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8011ab4:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8011ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8011ab8:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8011aba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011abe:	4313      	orrs	r3, r2
 8011ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011acc:	3318      	adds	r3, #24
 8011ace:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011ad2:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011adc:	3318      	adds	r3, #24
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8011ae4:	2001      	movs	r0, #1
 8011ae6:	f7fe fc95 	bl	8010414 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011af2:	3318      	adds	r3, #24
 8011af4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011af8:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8011b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8011b02:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8011b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8011b06:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 8011b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8011b0a:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 8011b0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8011b0e:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2U) |
 8011b10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b12:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 8011b14:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 8011b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8011b18:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8011b1a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8011b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b22:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8011b32:	2001      	movs	r0, #1
 8011b34:	f7fe fc6e 	bl	8010414 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011b44:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	699b      	ldr	r3, [r3, #24]
 8011b4a:	2b01      	cmp	r3, #1
 8011b4c:	d10f      	bne.n	8011b6e <ETH_MACDMAConfig+0x372>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6819      	ldr	r1, [r3, #0]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b5a:	331c      	adds	r3, #28
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011b66:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011b6a:	331c      	adds	r3, #28
 8011b6c:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	695b      	ldr	r3, [r3, #20]
 8011b72:	461a      	mov	r2, r3
 8011b74:	2100      	movs	r1, #0
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f000 f808 	bl	8011b8c <ETH_MACAddressConfig>
}
 8011b7c:	bf00      	nop
 8011b7e:	37c0      	adds	r7, #192	; 0xc0
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}
 8011b84:	ff20810f 	.word	0xff20810f
 8011b88:	f8de3f23 	.word	0xf8de3f23

08011b8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b087      	sub	sp, #28
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	60f8      	str	r0, [r7, #12]
 8011b94:	60b9      	str	r1, [r7, #8]
 8011b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	3305      	adds	r3, #5
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	021b      	lsls	r3, r3, #8
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	3204      	adds	r2, #4
 8011ba4:	7812      	ldrb	r2, [r2, #0]
 8011ba6:	4313      	orrs	r3, r2
 8011ba8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8011baa:	68ba      	ldr	r2, [r7, #8]
 8011bac:	4b11      	ldr	r3, [pc, #68]	; (8011bf4 <ETH_MACAddressConfig+0x68>)
 8011bae:	4413      	add	r3, r2
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	3303      	adds	r3, #3
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	061a      	lsls	r2, r3, #24
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	3302      	adds	r3, #2
 8011bc2:	781b      	ldrb	r3, [r3, #0]
 8011bc4:	041b      	lsls	r3, r3, #16
 8011bc6:	431a      	orrs	r2, r3
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	3301      	adds	r3, #1
 8011bcc:	781b      	ldrb	r3, [r3, #0]
 8011bce:	021b      	lsls	r3, r3, #8
 8011bd0:	4313      	orrs	r3, r2
 8011bd2:	687a      	ldr	r2, [r7, #4]
 8011bd4:	7812      	ldrb	r2, [r2, #0]
 8011bd6:	4313      	orrs	r3, r2
 8011bd8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8011bda:	68ba      	ldr	r2, [r7, #8]
 8011bdc:	4b06      	ldr	r3, [pc, #24]	; (8011bf8 <ETH_MACAddressConfig+0x6c>)
 8011bde:	4413      	add	r3, r2
 8011be0:	461a      	mov	r2, r3
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	6013      	str	r3, [r2, #0]
}
 8011be6:	bf00      	nop
 8011be8:	371c      	adds	r7, #28
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop
 8011bf4:	40028040 	.word	0x40028040
 8011bf8:	40028044 	.word	0x40028044

08011bfc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8011c04:	2300      	movs	r3, #0
 8011c06:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	687a      	ldr	r2, [r7, #4]
 8011c0e:	6812      	ldr	r2, [r2, #0]
 8011c10:	6812      	ldr	r2, [r2, #0]
 8011c12:	f042 0208 	orr.w	r2, r2, #8
 8011c16:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8011c20:	2001      	movs	r0, #1
 8011c22:	f000 f87f 	bl	8011d24 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	68fa      	ldr	r2, [r7, #12]
 8011c2c:	601a      	str	r2, [r3, #0]
}
 8011c2e:	bf00      	nop
 8011c30:	3710      	adds	r7, #16
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}

08011c36 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8011c36:	b580      	push	{r7, lr}
 8011c38:	b084      	sub	sp, #16
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	687a      	ldr	r2, [r7, #4]
 8011c48:	6812      	ldr	r2, [r2, #0]
 8011c4a:	6812      	ldr	r2, [r2, #0]
 8011c4c:	f042 0204 	orr.w	r2, r2, #4
 8011c50:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8011c5a:	2001      	movs	r0, #1
 8011c5c:	f000 f862 	bl	8011d24 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	68fa      	ldr	r2, [r7, #12]
 8011c66:	601a      	str	r2, [r3, #0]
}
 8011c68:	bf00      	nop
 8011c6a:	3710      	adds	r7, #16
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}

08011c70 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8011c70:	b480      	push	{r7}
 8011c72:	b083      	sub	sp, #12
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6819      	ldr	r1, [r3, #0]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c84:	3318      	adds	r3, #24
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8011c8c:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011c90:	3318      	adds	r3, #24
 8011c92:	601a      	str	r2, [r3, #0]
}
 8011c94:	bf00      	nop
 8011c96:	370c      	adds	r7, #12
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9e:	4770      	bx	lr

08011ca0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8011ca0:	b480      	push	{r7}
 8011ca2:	b083      	sub	sp, #12
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6819      	ldr	r1, [r3, #0]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011cb4:	3318      	adds	r3, #24
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f043 0202 	orr.w	r2, r3, #2
 8011cbc:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011cc0:	3318      	adds	r3, #24
 8011cc2:	601a      	str	r2, [r3, #0]
}
 8011cc4:	bf00      	nop
 8011cc6:	370c      	adds	r7, #12
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cce:	4770      	bx	lr

08011cd0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b084      	sub	sp, #16
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6819      	ldr	r1, [r3, #0]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ce8:	3318      	adds	r3, #24
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011cf0:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011cf4:	3318      	adds	r3, #24
 8011cf6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d00:	3318      	adds	r3, #24
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8011d06:	2001      	movs	r0, #1
 8011d08:	f000 f80c 	bl	8011d24 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	68fa      	ldr	r2, [r7, #12]
 8011d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d16:	3318      	adds	r3, #24
 8011d18:	601a      	str	r2, [r3, #0]
}
 8011d1a:	bf00      	nop
 8011d1c:	3710      	adds	r7, #16
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
	...

08011d24 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8011d24:	b480      	push	{r7}
 8011d26:	b085      	sub	sp, #20
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8011d2c:	4b0a      	ldr	r3, [pc, #40]	; (8011d58 <ETH_Delay+0x34>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	4a0a      	ldr	r2, [pc, #40]	; (8011d5c <ETH_Delay+0x38>)
 8011d32:	fba2 2303 	umull	r2, r3, r2, r3
 8011d36:	0a5b      	lsrs	r3, r3, #9
 8011d38:	687a      	ldr	r2, [r7, #4]
 8011d3a:	fb02 f303 	mul.w	r3, r2, r3
 8011d3e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8011d40:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	1e5a      	subs	r2, r3, #1
 8011d46:	60fa      	str	r2, [r7, #12]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d1f9      	bne.n	8011d40 <ETH_Delay+0x1c>
}
 8011d4c:	bf00      	nop
 8011d4e:	3714      	adds	r7, #20
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr
 8011d58:	20000064 	.word	0x20000064
 8011d5c:	10624dd3 	.word	0x10624dd3

08011d60 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b086      	sub	sp, #24
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	60b9      	str	r1, [r7, #8]
 8011d6a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011d6e:	2301      	movs	r3, #1
 8011d70:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011d72:	4b23      	ldr	r3, [pc, #140]	; (8011e00 <HAL_FLASH_Program+0xa0>)
 8011d74:	7e1b      	ldrb	r3, [r3, #24]
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d101      	bne.n	8011d7e <HAL_FLASH_Program+0x1e>
 8011d7a:	2302      	movs	r3, #2
 8011d7c:	e03b      	b.n	8011df6 <HAL_FLASH_Program+0x96>
 8011d7e:	4b20      	ldr	r3, [pc, #128]	; (8011e00 <HAL_FLASH_Program+0xa0>)
 8011d80:	2201      	movs	r2, #1
 8011d82:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011d84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011d88:	f000 f860 	bl	8011e4c <FLASH_WaitForLastOperation>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8011d90:	7dfb      	ldrb	r3, [r7, #23]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d12b      	bne.n	8011dee <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d105      	bne.n	8011da8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8011d9c:	783b      	ldrb	r3, [r7, #0]
 8011d9e:	4619      	mov	r1, r3
 8011da0:	68b8      	ldr	r0, [r7, #8]
 8011da2:	f000 f905 	bl	8011fb0 <FLASH_Program_Byte>
 8011da6:	e016      	b.n	8011dd6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	2b01      	cmp	r3, #1
 8011dac:	d105      	bne.n	8011dba <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8011dae:	883b      	ldrh	r3, [r7, #0]
 8011db0:	4619      	mov	r1, r3
 8011db2:	68b8      	ldr	r0, [r7, #8]
 8011db4:	f000 f8d8 	bl	8011f68 <FLASH_Program_HalfWord>
 8011db8:	e00d      	b.n	8011dd6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2b02      	cmp	r3, #2
 8011dbe:	d105      	bne.n	8011dcc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	68b8      	ldr	r0, [r7, #8]
 8011dc6:	f000 f8ad 	bl	8011f24 <FLASH_Program_Word>
 8011dca:	e004      	b.n	8011dd6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8011dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011dd0:	68b8      	ldr	r0, [r7, #8]
 8011dd2:	f000 f87b 	bl	8011ecc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011dd6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011dda:	f000 f837 	bl	8011e4c <FLASH_WaitForLastOperation>
 8011dde:	4603      	mov	r3, r0
 8011de0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8011de2:	4a08      	ldr	r2, [pc, #32]	; (8011e04 <HAL_FLASH_Program+0xa4>)
 8011de4:	4b07      	ldr	r3, [pc, #28]	; (8011e04 <HAL_FLASH_Program+0xa4>)
 8011de6:	691b      	ldr	r3, [r3, #16]
 8011de8:	f023 0301 	bic.w	r3, r3, #1
 8011dec:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8011dee:	4b04      	ldr	r3, [pc, #16]	; (8011e00 <HAL_FLASH_Program+0xa0>)
 8011df0:	2200      	movs	r2, #0
 8011df2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8011df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3718      	adds	r7, #24
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	2000a1d0 	.word	0x2000a1d0
 8011e04:	40023c00 	.word	0x40023c00

08011e08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b083      	sub	sp, #12
 8011e0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011e12:	4b0b      	ldr	r3, [pc, #44]	; (8011e40 <HAL_FLASH_Unlock+0x38>)
 8011e14:	691b      	ldr	r3, [r3, #16]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	da0b      	bge.n	8011e32 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011e1a:	4b09      	ldr	r3, [pc, #36]	; (8011e40 <HAL_FLASH_Unlock+0x38>)
 8011e1c:	4a09      	ldr	r2, [pc, #36]	; (8011e44 <HAL_FLASH_Unlock+0x3c>)
 8011e1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011e20:	4b07      	ldr	r3, [pc, #28]	; (8011e40 <HAL_FLASH_Unlock+0x38>)
 8011e22:	4a09      	ldr	r2, [pc, #36]	; (8011e48 <HAL_FLASH_Unlock+0x40>)
 8011e24:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011e26:	4b06      	ldr	r3, [pc, #24]	; (8011e40 <HAL_FLASH_Unlock+0x38>)
 8011e28:	691b      	ldr	r3, [r3, #16]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	da01      	bge.n	8011e32 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8011e2e:	2301      	movs	r3, #1
 8011e30:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8011e32:	79fb      	ldrb	r3, [r7, #7]
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	370c      	adds	r7, #12
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3e:	4770      	bx	lr
 8011e40:	40023c00 	.word	0x40023c00
 8011e44:	45670123 	.word	0x45670123
 8011e48:	cdef89ab 	.word	0xcdef89ab

08011e4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011e54:	2300      	movs	r3, #0
 8011e56:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011e58:	4b1a      	ldr	r3, [pc, #104]	; (8011ec4 <FLASH_WaitForLastOperation+0x78>)
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8011e5e:	f7fe facd 	bl	80103fc <HAL_GetTick>
 8011e62:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011e64:	e010      	b.n	8011e88 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e6c:	d00c      	beq.n	8011e88 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d007      	beq.n	8011e84 <FLASH_WaitForLastOperation+0x38>
 8011e74:	f7fe fac2 	bl	80103fc <HAL_GetTick>
 8011e78:	4602      	mov	r2, r0
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	1ad2      	subs	r2, r2, r3
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d901      	bls.n	8011e88 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8011e84:	2303      	movs	r3, #3
 8011e86:	e019      	b.n	8011ebc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011e88:	4b0f      	ldr	r3, [pc, #60]	; (8011ec8 <FLASH_WaitForLastOperation+0x7c>)
 8011e8a:	68db      	ldr	r3, [r3, #12]
 8011e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d1e8      	bne.n	8011e66 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011e94:	4b0c      	ldr	r3, [pc, #48]	; (8011ec8 <FLASH_WaitForLastOperation+0x7c>)
 8011e96:	68db      	ldr	r3, [r3, #12]
 8011e98:	f003 0301 	and.w	r3, r3, #1
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d002      	beq.n	8011ea6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011ea0:	4b09      	ldr	r3, [pc, #36]	; (8011ec8 <FLASH_WaitForLastOperation+0x7c>)
 8011ea2:	2201      	movs	r2, #1
 8011ea4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8011ea6:	4b08      	ldr	r3, [pc, #32]	; (8011ec8 <FLASH_WaitForLastOperation+0x7c>)
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d003      	beq.n	8011eba <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8011eb2:	f000 f89f 	bl	8011ff4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	e000      	b.n	8011ebc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8011eba:	2300      	movs	r3, #0
  
}  
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3710      	adds	r7, #16
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}
 8011ec4:	2000a1d0 	.word	0x2000a1d0
 8011ec8:	40023c00 	.word	0x40023c00

08011ecc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8011ecc:	b4f0      	push	{r4, r5, r6, r7}
 8011ece:	b084      	sub	sp, #16
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	60f8      	str	r0, [r7, #12]
 8011ed4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011ed8:	4a11      	ldr	r2, [pc, #68]	; (8011f20 <FLASH_Program_DoubleWord+0x54>)
 8011eda:	4b11      	ldr	r3, [pc, #68]	; (8011f20 <FLASH_Program_DoubleWord+0x54>)
 8011edc:	691b      	ldr	r3, [r3, #16]
 8011ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011ee2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8011ee4:	4a0e      	ldr	r2, [pc, #56]	; (8011f20 <FLASH_Program_DoubleWord+0x54>)
 8011ee6:	4b0e      	ldr	r3, [pc, #56]	; (8011f20 <FLASH_Program_DoubleWord+0x54>)
 8011ee8:	691b      	ldr	r3, [r3, #16]
 8011eea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011eee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011ef0:	4a0b      	ldr	r2, [pc, #44]	; (8011f20 <FLASH_Program_DoubleWord+0x54>)
 8011ef2:	4b0b      	ldr	r3, [pc, #44]	; (8011f20 <FLASH_Program_DoubleWord+0x54>)
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	f043 0301 	orr.w	r3, r3, #1
 8011efa:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	683a      	ldr	r2, [r7, #0]
 8011f00:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	3304      	adds	r3, #4
 8011f06:	461a      	mov	r2, r3
 8011f08:	e897 0018 	ldmia.w	r7, {r3, r4}
 8011f0c:	0025      	movs	r5, r4
 8011f0e:	2600      	movs	r6, #0
 8011f10:	462b      	mov	r3, r5
 8011f12:	6013      	str	r3, [r2, #0]
}
 8011f14:	bf00      	nop
 8011f16:	3710      	adds	r7, #16
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bcf0      	pop	{r4, r5, r6, r7}
 8011f1c:	4770      	bx	lr
 8011f1e:	bf00      	nop
 8011f20:	40023c00 	.word	0x40023c00

08011f24 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8011f24:	b480      	push	{r7}
 8011f26:	b083      	sub	sp, #12
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011f2e:	4a0d      	ldr	r2, [pc, #52]	; (8011f64 <FLASH_Program_Word+0x40>)
 8011f30:	4b0c      	ldr	r3, [pc, #48]	; (8011f64 <FLASH_Program_Word+0x40>)
 8011f32:	691b      	ldr	r3, [r3, #16]
 8011f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8011f3a:	4a0a      	ldr	r2, [pc, #40]	; (8011f64 <FLASH_Program_Word+0x40>)
 8011f3c:	4b09      	ldr	r3, [pc, #36]	; (8011f64 <FLASH_Program_Word+0x40>)
 8011f3e:	691b      	ldr	r3, [r3, #16]
 8011f40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011f44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011f46:	4a07      	ldr	r2, [pc, #28]	; (8011f64 <FLASH_Program_Word+0x40>)
 8011f48:	4b06      	ldr	r3, [pc, #24]	; (8011f64 <FLASH_Program_Word+0x40>)
 8011f4a:	691b      	ldr	r3, [r3, #16]
 8011f4c:	f043 0301 	orr.w	r3, r3, #1
 8011f50:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	683a      	ldr	r2, [r7, #0]
 8011f56:	601a      	str	r2, [r3, #0]
}
 8011f58:	bf00      	nop
 8011f5a:	370c      	adds	r7, #12
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr
 8011f64:	40023c00 	.word	0x40023c00

08011f68 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	460b      	mov	r3, r1
 8011f72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011f74:	4a0d      	ldr	r2, [pc, #52]	; (8011fac <FLASH_Program_HalfWord+0x44>)
 8011f76:	4b0d      	ldr	r3, [pc, #52]	; (8011fac <FLASH_Program_HalfWord+0x44>)
 8011f78:	691b      	ldr	r3, [r3, #16]
 8011f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8011f80:	4a0a      	ldr	r2, [pc, #40]	; (8011fac <FLASH_Program_HalfWord+0x44>)
 8011f82:	4b0a      	ldr	r3, [pc, #40]	; (8011fac <FLASH_Program_HalfWord+0x44>)
 8011f84:	691b      	ldr	r3, [r3, #16]
 8011f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011f8c:	4a07      	ldr	r2, [pc, #28]	; (8011fac <FLASH_Program_HalfWord+0x44>)
 8011f8e:	4b07      	ldr	r3, [pc, #28]	; (8011fac <FLASH_Program_HalfWord+0x44>)
 8011f90:	691b      	ldr	r3, [r3, #16]
 8011f92:	f043 0301 	orr.w	r3, r3, #1
 8011f96:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	887a      	ldrh	r2, [r7, #2]
 8011f9c:	801a      	strh	r2, [r3, #0]
}
 8011f9e:	bf00      	nop
 8011fa0:	370c      	adds	r7, #12
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr
 8011faa:	bf00      	nop
 8011fac:	40023c00 	.word	0x40023c00

08011fb0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8011fb0:	b480      	push	{r7}
 8011fb2:	b083      	sub	sp, #12
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	460b      	mov	r3, r1
 8011fba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011fbc:	4a0c      	ldr	r2, [pc, #48]	; (8011ff0 <FLASH_Program_Byte+0x40>)
 8011fbe:	4b0c      	ldr	r3, [pc, #48]	; (8011ff0 <FLASH_Program_Byte+0x40>)
 8011fc0:	691b      	ldr	r3, [r3, #16]
 8011fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011fc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8011fc8:	4a09      	ldr	r2, [pc, #36]	; (8011ff0 <FLASH_Program_Byte+0x40>)
 8011fca:	4b09      	ldr	r3, [pc, #36]	; (8011ff0 <FLASH_Program_Byte+0x40>)
 8011fcc:	691b      	ldr	r3, [r3, #16]
 8011fce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011fd0:	4a07      	ldr	r2, [pc, #28]	; (8011ff0 <FLASH_Program_Byte+0x40>)
 8011fd2:	4b07      	ldr	r3, [pc, #28]	; (8011ff0 <FLASH_Program_Byte+0x40>)
 8011fd4:	691b      	ldr	r3, [r3, #16]
 8011fd6:	f043 0301 	orr.w	r3, r3, #1
 8011fda:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	78fa      	ldrb	r2, [r7, #3]
 8011fe0:	701a      	strb	r2, [r3, #0]
}
 8011fe2:	bf00      	nop
 8011fe4:	370c      	adds	r7, #12
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fec:	4770      	bx	lr
 8011fee:	bf00      	nop
 8011ff0:	40023c00 	.word	0x40023c00

08011ff4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8011ff4:	b480      	push	{r7}
 8011ff6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8011ff8:	4b27      	ldr	r3, [pc, #156]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8011ffa:	68db      	ldr	r3, [r3, #12]
 8011ffc:	f003 0310 	and.w	r3, r3, #16
 8012000:	2b00      	cmp	r3, #0
 8012002:	d008      	beq.n	8012016 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8012004:	4b25      	ldr	r3, [pc, #148]	; (801209c <FLASH_SetErrorCode+0xa8>)
 8012006:	69db      	ldr	r3, [r3, #28]
 8012008:	f043 0310 	orr.w	r3, r3, #16
 801200c:	4a23      	ldr	r2, [pc, #140]	; (801209c <FLASH_SetErrorCode+0xa8>)
 801200e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8012010:	4b21      	ldr	r3, [pc, #132]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8012012:	2210      	movs	r2, #16
 8012014:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8012016:	4b20      	ldr	r3, [pc, #128]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8012018:	68db      	ldr	r3, [r3, #12]
 801201a:	f003 0320 	and.w	r3, r3, #32
 801201e:	2b00      	cmp	r3, #0
 8012020:	d008      	beq.n	8012034 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8012022:	4b1e      	ldr	r3, [pc, #120]	; (801209c <FLASH_SetErrorCode+0xa8>)
 8012024:	69db      	ldr	r3, [r3, #28]
 8012026:	f043 0308 	orr.w	r3, r3, #8
 801202a:	4a1c      	ldr	r2, [pc, #112]	; (801209c <FLASH_SetErrorCode+0xa8>)
 801202c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801202e:	4b1a      	ldr	r3, [pc, #104]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8012030:	2220      	movs	r2, #32
 8012032:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8012034:	4b18      	ldr	r3, [pc, #96]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801203c:	2b00      	cmp	r3, #0
 801203e:	d008      	beq.n	8012052 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8012040:	4b16      	ldr	r3, [pc, #88]	; (801209c <FLASH_SetErrorCode+0xa8>)
 8012042:	69db      	ldr	r3, [r3, #28]
 8012044:	f043 0304 	orr.w	r3, r3, #4
 8012048:	4a14      	ldr	r2, [pc, #80]	; (801209c <FLASH_SetErrorCode+0xa8>)
 801204a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 801204c:	4b12      	ldr	r3, [pc, #72]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 801204e:	2240      	movs	r2, #64	; 0x40
 8012050:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8012052:	4b11      	ldr	r3, [pc, #68]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8012054:	68db      	ldr	r3, [r3, #12]
 8012056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801205a:	2b00      	cmp	r3, #0
 801205c:	d008      	beq.n	8012070 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801205e:	4b0f      	ldr	r3, [pc, #60]	; (801209c <FLASH_SetErrorCode+0xa8>)
 8012060:	69db      	ldr	r3, [r3, #28]
 8012062:	f043 0302 	orr.w	r3, r3, #2
 8012066:	4a0d      	ldr	r2, [pc, #52]	; (801209c <FLASH_SetErrorCode+0xa8>)
 8012068:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801206a:	4b0b      	ldr	r3, [pc, #44]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 801206c:	2280      	movs	r2, #128	; 0x80
 801206e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8012070:	4b09      	ldr	r3, [pc, #36]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8012072:	68db      	ldr	r3, [r3, #12]
 8012074:	f003 0302 	and.w	r3, r3, #2
 8012078:	2b00      	cmp	r3, #0
 801207a:	d008      	beq.n	801208e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801207c:	4b07      	ldr	r3, [pc, #28]	; (801209c <FLASH_SetErrorCode+0xa8>)
 801207e:	69db      	ldr	r3, [r3, #28]
 8012080:	f043 0320 	orr.w	r3, r3, #32
 8012084:	4a05      	ldr	r2, [pc, #20]	; (801209c <FLASH_SetErrorCode+0xa8>)
 8012086:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012088:	4b03      	ldr	r3, [pc, #12]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 801208a:	2202      	movs	r2, #2
 801208c:	60da      	str	r2, [r3, #12]
  }
}
 801208e:	bf00      	nop
 8012090:	46bd      	mov	sp, r7
 8012092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012096:	4770      	bx	lr
 8012098:	40023c00 	.word	0x40023c00
 801209c:	2000a1d0 	.word	0x2000a1d0

080120a0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80120aa:	2301      	movs	r3, #1
 80120ac:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80120ae:	2300      	movs	r3, #0
 80120b0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80120b2:	4b31      	ldr	r3, [pc, #196]	; (8012178 <HAL_FLASHEx_Erase+0xd8>)
 80120b4:	7e1b      	ldrb	r3, [r3, #24]
 80120b6:	2b01      	cmp	r3, #1
 80120b8:	d101      	bne.n	80120be <HAL_FLASHEx_Erase+0x1e>
 80120ba:	2302      	movs	r3, #2
 80120bc:	e058      	b.n	8012170 <HAL_FLASHEx_Erase+0xd0>
 80120be:	4b2e      	ldr	r3, [pc, #184]	; (8012178 <HAL_FLASHEx_Erase+0xd8>)
 80120c0:	2201      	movs	r2, #1
 80120c2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80120c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80120c8:	f7ff fec0 	bl	8011e4c <FLASH_WaitForLastOperation>
 80120cc:	4603      	mov	r3, r0
 80120ce:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80120d0:	7bfb      	ldrb	r3, [r7, #15]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d148      	bne.n	8012168 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	f04f 32ff 	mov.w	r2, #4294967295
 80120dc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2b01      	cmp	r3, #1
 80120e4:	d115      	bne.n	8012112 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	691b      	ldr	r3, [r3, #16]
 80120ea:	b2da      	uxtb	r2, r3
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	4619      	mov	r1, r3
 80120f2:	4610      	mov	r0, r2
 80120f4:	f000 f844 	bl	8012180 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80120f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80120fc:	f7ff fea6 	bl	8011e4c <FLASH_WaitForLastOperation>
 8012100:	4603      	mov	r3, r0
 8012102:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8012104:	4a1d      	ldr	r2, [pc, #116]	; (801217c <HAL_FLASHEx_Erase+0xdc>)
 8012106:	4b1d      	ldr	r3, [pc, #116]	; (801217c <HAL_FLASHEx_Erase+0xdc>)
 8012108:	691b      	ldr	r3, [r3, #16]
 801210a:	f023 0304 	bic.w	r3, r3, #4
 801210e:	6113      	str	r3, [r2, #16]
 8012110:	e028      	b.n	8012164 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	689b      	ldr	r3, [r3, #8]
 8012116:	60bb      	str	r3, [r7, #8]
 8012118:	e01c      	b.n	8012154 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	691b      	ldr	r3, [r3, #16]
 801211e:	b2db      	uxtb	r3, r3
 8012120:	4619      	mov	r1, r3
 8012122:	68b8      	ldr	r0, [r7, #8]
 8012124:	f000 f850 	bl	80121c8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012128:	f24c 3050 	movw	r0, #50000	; 0xc350
 801212c:	f7ff fe8e 	bl	8011e4c <FLASH_WaitForLastOperation>
 8012130:	4603      	mov	r3, r0
 8012132:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8012134:	4a11      	ldr	r2, [pc, #68]	; (801217c <HAL_FLASHEx_Erase+0xdc>)
 8012136:	4b11      	ldr	r3, [pc, #68]	; (801217c <HAL_FLASHEx_Erase+0xdc>)
 8012138:	691b      	ldr	r3, [r3, #16]
 801213a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801213e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8012140:	7bfb      	ldrb	r3, [r7, #15]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d003      	beq.n	801214e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	601a      	str	r2, [r3, #0]
          break;
 801214c:	e00a      	b.n	8012164 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	3301      	adds	r3, #1
 8012152:	60bb      	str	r3, [r7, #8]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	68da      	ldr	r2, [r3, #12]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	689b      	ldr	r3, [r3, #8]
 801215c:	441a      	add	r2, r3
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	429a      	cmp	r2, r3
 8012162:	d8da      	bhi.n	801211a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8012164:	f000 f878 	bl	8012258 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012168:	4b03      	ldr	r3, [pc, #12]	; (8012178 <HAL_FLASHEx_Erase+0xd8>)
 801216a:	2200      	movs	r2, #0
 801216c:	761a      	strb	r2, [r3, #24]

  return status;
 801216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012170:	4618      	mov	r0, r3
 8012172:	3710      	adds	r7, #16
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	2000a1d0 	.word	0x2000a1d0
 801217c:	40023c00 	.word	0x40023c00

08012180 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8012180:	b480      	push	{r7}
 8012182:	b083      	sub	sp, #12
 8012184:	af00      	add	r7, sp, #0
 8012186:	4603      	mov	r3, r0
 8012188:	6039      	str	r1, [r7, #0]
 801218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801218c:	4a0d      	ldr	r2, [pc, #52]	; (80121c4 <FLASH_MassErase+0x44>)
 801218e:	4b0d      	ldr	r3, [pc, #52]	; (80121c4 <FLASH_MassErase+0x44>)
 8012190:	691b      	ldr	r3, [r3, #16]
 8012192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012196:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8012198:	4a0a      	ldr	r2, [pc, #40]	; (80121c4 <FLASH_MassErase+0x44>)
 801219a:	4b0a      	ldr	r3, [pc, #40]	; (80121c4 <FLASH_MassErase+0x44>)
 801219c:	691b      	ldr	r3, [r3, #16]
 801219e:	f043 0304 	orr.w	r3, r3, #4
 80121a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80121a4:	4907      	ldr	r1, [pc, #28]	; (80121c4 <FLASH_MassErase+0x44>)
 80121a6:	4b07      	ldr	r3, [pc, #28]	; (80121c4 <FLASH_MassErase+0x44>)
 80121a8:	691a      	ldr	r2, [r3, #16]
 80121aa:	79fb      	ldrb	r3, [r7, #7]
 80121ac:	021b      	lsls	r3, r3, #8
 80121ae:	4313      	orrs	r3, r2
 80121b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80121b4:	610b      	str	r3, [r1, #16]
}
 80121b6:	bf00      	nop
 80121b8:	370c      	adds	r7, #12
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop
 80121c4:	40023c00 	.word	0x40023c00

080121c8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80121c8:	b480      	push	{r7}
 80121ca:	b085      	sub	sp, #20
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	460b      	mov	r3, r1
 80121d2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80121d4:	2300      	movs	r3, #0
 80121d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80121d8:	78fb      	ldrb	r3, [r7, #3]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d102      	bne.n	80121e4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80121de:	2300      	movs	r3, #0
 80121e0:	60fb      	str	r3, [r7, #12]
 80121e2:	e010      	b.n	8012206 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80121e4:	78fb      	ldrb	r3, [r7, #3]
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	d103      	bne.n	80121f2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80121ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121ee:	60fb      	str	r3, [r7, #12]
 80121f0:	e009      	b.n	8012206 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80121f2:	78fb      	ldrb	r3, [r7, #3]
 80121f4:	2b02      	cmp	r3, #2
 80121f6:	d103      	bne.n	8012200 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80121f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80121fc:	60fb      	str	r3, [r7, #12]
 80121fe:	e002      	b.n	8012206 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8012200:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012204:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012206:	4a13      	ldr	r2, [pc, #76]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012208:	4b12      	ldr	r3, [pc, #72]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 801220a:	691b      	ldr	r3, [r3, #16]
 801220c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012210:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8012212:	4910      	ldr	r1, [pc, #64]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012214:	4b0f      	ldr	r3, [pc, #60]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012216:	691a      	ldr	r2, [r3, #16]
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	4313      	orrs	r3, r2
 801221c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801221e:	4a0d      	ldr	r2, [pc, #52]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012220:	4b0c      	ldr	r3, [pc, #48]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012222:	691b      	ldr	r3, [r3, #16]
 8012224:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8012228:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801222a:	490a      	ldr	r1, [pc, #40]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 801222c:	4b09      	ldr	r3, [pc, #36]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 801222e:	691a      	ldr	r2, [r3, #16]
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	00db      	lsls	r3, r3, #3
 8012234:	4313      	orrs	r3, r2
 8012236:	f043 0302 	orr.w	r3, r3, #2
 801223a:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801223c:	4a05      	ldr	r2, [pc, #20]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 801223e:	4b05      	ldr	r3, [pc, #20]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012240:	691b      	ldr	r3, [r3, #16]
 8012242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012246:	6113      	str	r3, [r2, #16]
}
 8012248:	bf00      	nop
 801224a:	3714      	adds	r7, #20
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr
 8012254:	40023c00 	.word	0x40023c00

08012258 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8012258:	b480      	push	{r7}
 801225a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 801225c:	4b20      	ldr	r3, [pc, #128]	; (80122e0 <FLASH_FlushCaches+0x88>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012264:	2b00      	cmp	r3, #0
 8012266:	d017      	beq.n	8012298 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012268:	4a1d      	ldr	r2, [pc, #116]	; (80122e0 <FLASH_FlushCaches+0x88>)
 801226a:	4b1d      	ldr	r3, [pc, #116]	; (80122e0 <FLASH_FlushCaches+0x88>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012272:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8012274:	4a1a      	ldr	r2, [pc, #104]	; (80122e0 <FLASH_FlushCaches+0x88>)
 8012276:	4b1a      	ldr	r3, [pc, #104]	; (80122e0 <FLASH_FlushCaches+0x88>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801227e:	6013      	str	r3, [r2, #0]
 8012280:	4a17      	ldr	r2, [pc, #92]	; (80122e0 <FLASH_FlushCaches+0x88>)
 8012282:	4b17      	ldr	r3, [pc, #92]	; (80122e0 <FLASH_FlushCaches+0x88>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801228a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801228c:	4a14      	ldr	r2, [pc, #80]	; (80122e0 <FLASH_FlushCaches+0x88>)
 801228e:	4b14      	ldr	r3, [pc, #80]	; (80122e0 <FLASH_FlushCaches+0x88>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012296:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8012298:	4b11      	ldr	r3, [pc, #68]	; (80122e0 <FLASH_FlushCaches+0x88>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d017      	beq.n	80122d4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80122a4:	4a0e      	ldr	r2, [pc, #56]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122a6:	4b0e      	ldr	r3, [pc, #56]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80122ae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80122b0:	4a0b      	ldr	r2, [pc, #44]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122b2:	4b0b      	ldr	r3, [pc, #44]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80122ba:	6013      	str	r3, [r2, #0]
 80122bc:	4a08      	ldr	r2, [pc, #32]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122be:	4b08      	ldr	r3, [pc, #32]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80122c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80122c8:	4a05      	ldr	r2, [pc, #20]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122ca:	4b05      	ldr	r3, [pc, #20]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80122d2:	6013      	str	r3, [r2, #0]
  }
}
 80122d4:	bf00      	nop
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr
 80122de:	bf00      	nop
 80122e0:	40023c00 	.word	0x40023c00

080122e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b089      	sub	sp, #36	; 0x24
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80122ee:	2300      	movs	r3, #0
 80122f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80122f2:	2300      	movs	r3, #0
 80122f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80122f6:	2300      	movs	r3, #0
 80122f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80122fa:	2300      	movs	r3, #0
 80122fc:	61fb      	str	r3, [r7, #28]
 80122fe:	e16b      	b.n	80125d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012300:	2201      	movs	r2, #1
 8012302:	69fb      	ldr	r3, [r7, #28]
 8012304:	fa02 f303 	lsl.w	r3, r2, r3
 8012308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	4013      	ands	r3, r2
 8012312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012314:	693a      	ldr	r2, [r7, #16]
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	429a      	cmp	r2, r3
 801231a:	f040 815a 	bne.w	80125d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	2b02      	cmp	r3, #2
 8012324:	d003      	beq.n	801232e <HAL_GPIO_Init+0x4a>
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	685b      	ldr	r3, [r3, #4]
 801232a:	2b12      	cmp	r3, #18
 801232c:	d123      	bne.n	8012376 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801232e:	69fb      	ldr	r3, [r7, #28]
 8012330:	08da      	lsrs	r2, r3, #3
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	3208      	adds	r2, #8
 8012336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	f003 0307 	and.w	r3, r3, #7
 8012342:	009b      	lsls	r3, r3, #2
 8012344:	220f      	movs	r2, #15
 8012346:	fa02 f303 	lsl.w	r3, r2, r3
 801234a:	43db      	mvns	r3, r3
 801234c:	69ba      	ldr	r2, [r7, #24]
 801234e:	4013      	ands	r3, r2
 8012350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	691a      	ldr	r2, [r3, #16]
 8012356:	69fb      	ldr	r3, [r7, #28]
 8012358:	f003 0307 	and.w	r3, r3, #7
 801235c:	009b      	lsls	r3, r3, #2
 801235e:	fa02 f303 	lsl.w	r3, r2, r3
 8012362:	69ba      	ldr	r2, [r7, #24]
 8012364:	4313      	orrs	r3, r2
 8012366:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	08da      	lsrs	r2, r3, #3
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	3208      	adds	r2, #8
 8012370:	69b9      	ldr	r1, [r7, #24]
 8012372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801237c:	69fb      	ldr	r3, [r7, #28]
 801237e:	005b      	lsls	r3, r3, #1
 8012380:	2203      	movs	r2, #3
 8012382:	fa02 f303 	lsl.w	r3, r2, r3
 8012386:	43db      	mvns	r3, r3
 8012388:	69ba      	ldr	r2, [r7, #24]
 801238a:	4013      	ands	r3, r2
 801238c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	685b      	ldr	r3, [r3, #4]
 8012392:	f003 0203 	and.w	r2, r3, #3
 8012396:	69fb      	ldr	r3, [r7, #28]
 8012398:	005b      	lsls	r3, r3, #1
 801239a:	fa02 f303 	lsl.w	r3, r2, r3
 801239e:	69ba      	ldr	r2, [r7, #24]
 80123a0:	4313      	orrs	r3, r2
 80123a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	69ba      	ldr	r2, [r7, #24]
 80123a8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	2b01      	cmp	r3, #1
 80123b0:	d00b      	beq.n	80123ca <HAL_GPIO_Init+0xe6>
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	685b      	ldr	r3, [r3, #4]
 80123b6:	2b02      	cmp	r3, #2
 80123b8:	d007      	beq.n	80123ca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80123be:	2b11      	cmp	r3, #17
 80123c0:	d003      	beq.n	80123ca <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	2b12      	cmp	r3, #18
 80123c8:	d130      	bne.n	801242c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	689b      	ldr	r3, [r3, #8]
 80123ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80123d0:	69fb      	ldr	r3, [r7, #28]
 80123d2:	005b      	lsls	r3, r3, #1
 80123d4:	2203      	movs	r2, #3
 80123d6:	fa02 f303 	lsl.w	r3, r2, r3
 80123da:	43db      	mvns	r3, r3
 80123dc:	69ba      	ldr	r2, [r7, #24]
 80123de:	4013      	ands	r3, r2
 80123e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	68da      	ldr	r2, [r3, #12]
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	005b      	lsls	r3, r3, #1
 80123ea:	fa02 f303 	lsl.w	r3, r2, r3
 80123ee:	69ba      	ldr	r2, [r7, #24]
 80123f0:	4313      	orrs	r3, r2
 80123f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	69ba      	ldr	r2, [r7, #24]
 80123f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012400:	2201      	movs	r2, #1
 8012402:	69fb      	ldr	r3, [r7, #28]
 8012404:	fa02 f303 	lsl.w	r3, r2, r3
 8012408:	43db      	mvns	r3, r3
 801240a:	69ba      	ldr	r2, [r7, #24]
 801240c:	4013      	ands	r3, r2
 801240e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	685b      	ldr	r3, [r3, #4]
 8012414:	091b      	lsrs	r3, r3, #4
 8012416:	f003 0201 	and.w	r2, r3, #1
 801241a:	69fb      	ldr	r3, [r7, #28]
 801241c:	fa02 f303 	lsl.w	r3, r2, r3
 8012420:	69ba      	ldr	r2, [r7, #24]
 8012422:	4313      	orrs	r3, r2
 8012424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	69ba      	ldr	r2, [r7, #24]
 801242a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	68db      	ldr	r3, [r3, #12]
 8012430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012432:	69fb      	ldr	r3, [r7, #28]
 8012434:	005b      	lsls	r3, r3, #1
 8012436:	2203      	movs	r2, #3
 8012438:	fa02 f303 	lsl.w	r3, r2, r3
 801243c:	43db      	mvns	r3, r3
 801243e:	69ba      	ldr	r2, [r7, #24]
 8012440:	4013      	ands	r3, r2
 8012442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	689a      	ldr	r2, [r3, #8]
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	005b      	lsls	r3, r3, #1
 801244c:	fa02 f303 	lsl.w	r3, r2, r3
 8012450:	69ba      	ldr	r2, [r7, #24]
 8012452:	4313      	orrs	r3, r2
 8012454:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	69ba      	ldr	r2, [r7, #24]
 801245a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012464:	2b00      	cmp	r3, #0
 8012466:	f000 80b4 	beq.w	80125d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801246a:	2300      	movs	r3, #0
 801246c:	60fb      	str	r3, [r7, #12]
 801246e:	4a5f      	ldr	r2, [pc, #380]	; (80125ec <HAL_GPIO_Init+0x308>)
 8012470:	4b5e      	ldr	r3, [pc, #376]	; (80125ec <HAL_GPIO_Init+0x308>)
 8012472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012478:	6453      	str	r3, [r2, #68]	; 0x44
 801247a:	4b5c      	ldr	r3, [pc, #368]	; (80125ec <HAL_GPIO_Init+0x308>)
 801247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012482:	60fb      	str	r3, [r7, #12]
 8012484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012486:	4a5a      	ldr	r2, [pc, #360]	; (80125f0 <HAL_GPIO_Init+0x30c>)
 8012488:	69fb      	ldr	r3, [r7, #28]
 801248a:	089b      	lsrs	r3, r3, #2
 801248c:	3302      	adds	r3, #2
 801248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	f003 0303 	and.w	r3, r3, #3
 801249a:	009b      	lsls	r3, r3, #2
 801249c:	220f      	movs	r2, #15
 801249e:	fa02 f303 	lsl.w	r3, r2, r3
 80124a2:	43db      	mvns	r3, r3
 80124a4:	69ba      	ldr	r2, [r7, #24]
 80124a6:	4013      	ands	r3, r2
 80124a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4a51      	ldr	r2, [pc, #324]	; (80125f4 <HAL_GPIO_Init+0x310>)
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d02b      	beq.n	801250a <HAL_GPIO_Init+0x226>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4a50      	ldr	r2, [pc, #320]	; (80125f8 <HAL_GPIO_Init+0x314>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d025      	beq.n	8012506 <HAL_GPIO_Init+0x222>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	4a4f      	ldr	r2, [pc, #316]	; (80125fc <HAL_GPIO_Init+0x318>)
 80124be:	4293      	cmp	r3, r2
 80124c0:	d01f      	beq.n	8012502 <HAL_GPIO_Init+0x21e>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	4a4e      	ldr	r2, [pc, #312]	; (8012600 <HAL_GPIO_Init+0x31c>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d019      	beq.n	80124fe <HAL_GPIO_Init+0x21a>
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	4a4d      	ldr	r2, [pc, #308]	; (8012604 <HAL_GPIO_Init+0x320>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d013      	beq.n	80124fa <HAL_GPIO_Init+0x216>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	4a4c      	ldr	r2, [pc, #304]	; (8012608 <HAL_GPIO_Init+0x324>)
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d00d      	beq.n	80124f6 <HAL_GPIO_Init+0x212>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4a4b      	ldr	r2, [pc, #300]	; (801260c <HAL_GPIO_Init+0x328>)
 80124de:	4293      	cmp	r3, r2
 80124e0:	d007      	beq.n	80124f2 <HAL_GPIO_Init+0x20e>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	4a4a      	ldr	r2, [pc, #296]	; (8012610 <HAL_GPIO_Init+0x32c>)
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d101      	bne.n	80124ee <HAL_GPIO_Init+0x20a>
 80124ea:	2307      	movs	r3, #7
 80124ec:	e00e      	b.n	801250c <HAL_GPIO_Init+0x228>
 80124ee:	2308      	movs	r3, #8
 80124f0:	e00c      	b.n	801250c <HAL_GPIO_Init+0x228>
 80124f2:	2306      	movs	r3, #6
 80124f4:	e00a      	b.n	801250c <HAL_GPIO_Init+0x228>
 80124f6:	2305      	movs	r3, #5
 80124f8:	e008      	b.n	801250c <HAL_GPIO_Init+0x228>
 80124fa:	2304      	movs	r3, #4
 80124fc:	e006      	b.n	801250c <HAL_GPIO_Init+0x228>
 80124fe:	2303      	movs	r3, #3
 8012500:	e004      	b.n	801250c <HAL_GPIO_Init+0x228>
 8012502:	2302      	movs	r3, #2
 8012504:	e002      	b.n	801250c <HAL_GPIO_Init+0x228>
 8012506:	2301      	movs	r3, #1
 8012508:	e000      	b.n	801250c <HAL_GPIO_Init+0x228>
 801250a:	2300      	movs	r3, #0
 801250c:	69fa      	ldr	r2, [r7, #28]
 801250e:	f002 0203 	and.w	r2, r2, #3
 8012512:	0092      	lsls	r2, r2, #2
 8012514:	4093      	lsls	r3, r2
 8012516:	69ba      	ldr	r2, [r7, #24]
 8012518:	4313      	orrs	r3, r2
 801251a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801251c:	4934      	ldr	r1, [pc, #208]	; (80125f0 <HAL_GPIO_Init+0x30c>)
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	089b      	lsrs	r3, r3, #2
 8012522:	3302      	adds	r3, #2
 8012524:	69ba      	ldr	r2, [r7, #24]
 8012526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801252a:	4b3a      	ldr	r3, [pc, #232]	; (8012614 <HAL_GPIO_Init+0x330>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	43db      	mvns	r3, r3
 8012534:	69ba      	ldr	r2, [r7, #24]
 8012536:	4013      	ands	r3, r2
 8012538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012542:	2b00      	cmp	r3, #0
 8012544:	d003      	beq.n	801254e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012546:	69ba      	ldr	r2, [r7, #24]
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	4313      	orrs	r3, r2
 801254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801254e:	4a31      	ldr	r2, [pc, #196]	; (8012614 <HAL_GPIO_Init+0x330>)
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012554:	4b2f      	ldr	r3, [pc, #188]	; (8012614 <HAL_GPIO_Init+0x330>)
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	43db      	mvns	r3, r3
 801255e:	69ba      	ldr	r2, [r7, #24]
 8012560:	4013      	ands	r3, r2
 8012562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801256c:	2b00      	cmp	r3, #0
 801256e:	d003      	beq.n	8012578 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012570:	69ba      	ldr	r2, [r7, #24]
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	4313      	orrs	r3, r2
 8012576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012578:	4a26      	ldr	r2, [pc, #152]	; (8012614 <HAL_GPIO_Init+0x330>)
 801257a:	69bb      	ldr	r3, [r7, #24]
 801257c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801257e:	4b25      	ldr	r3, [pc, #148]	; (8012614 <HAL_GPIO_Init+0x330>)
 8012580:	689b      	ldr	r3, [r3, #8]
 8012582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	43db      	mvns	r3, r3
 8012588:	69ba      	ldr	r2, [r7, #24]
 801258a:	4013      	ands	r3, r2
 801258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012596:	2b00      	cmp	r3, #0
 8012598:	d003      	beq.n	80125a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 801259a:	69ba      	ldr	r2, [r7, #24]
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	4313      	orrs	r3, r2
 80125a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80125a2:	4a1c      	ldr	r2, [pc, #112]	; (8012614 <HAL_GPIO_Init+0x330>)
 80125a4:	69bb      	ldr	r3, [r7, #24]
 80125a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80125a8:	4b1a      	ldr	r3, [pc, #104]	; (8012614 <HAL_GPIO_Init+0x330>)
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	43db      	mvns	r3, r3
 80125b2:	69ba      	ldr	r2, [r7, #24]
 80125b4:	4013      	ands	r3, r2
 80125b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d003      	beq.n	80125cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80125c4:	69ba      	ldr	r2, [r7, #24]
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	4313      	orrs	r3, r2
 80125ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80125cc:	4a11      	ldr	r2, [pc, #68]	; (8012614 <HAL_GPIO_Init+0x330>)
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80125d2:	69fb      	ldr	r3, [r7, #28]
 80125d4:	3301      	adds	r3, #1
 80125d6:	61fb      	str	r3, [r7, #28]
 80125d8:	69fb      	ldr	r3, [r7, #28]
 80125da:	2b0f      	cmp	r3, #15
 80125dc:	f67f ae90 	bls.w	8012300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80125e0:	bf00      	nop
 80125e2:	3724      	adds	r7, #36	; 0x24
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr
 80125ec:	40023800 	.word	0x40023800
 80125f0:	40013800 	.word	0x40013800
 80125f4:	40020000 	.word	0x40020000
 80125f8:	40020400 	.word	0x40020400
 80125fc:	40020800 	.word	0x40020800
 8012600:	40020c00 	.word	0x40020c00
 8012604:	40021000 	.word	0x40021000
 8012608:	40021400 	.word	0x40021400
 801260c:	40021800 	.word	0x40021800
 8012610:	40021c00 	.word	0x40021c00
 8012614:	40013c00 	.word	0x40013c00

08012618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012618:	b480      	push	{r7}
 801261a:	b083      	sub	sp, #12
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
 8012620:	460b      	mov	r3, r1
 8012622:	807b      	strh	r3, [r7, #2]
 8012624:	4613      	mov	r3, r2
 8012626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012628:	787b      	ldrb	r3, [r7, #1]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d003      	beq.n	8012636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801262e:	887a      	ldrh	r2, [r7, #2]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012634:	e003      	b.n	801263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012636:	887b      	ldrh	r3, [r7, #2]
 8012638:	041a      	lsls	r2, r3, #16
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	619a      	str	r2, [r3, #24]
}
 801263e:	bf00      	nop
 8012640:	370c      	adds	r7, #12
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr

0801264a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801264a:	b480      	push	{r7}
 801264c:	b083      	sub	sp, #12
 801264e:	af00      	add	r7, sp, #0
 8012650:	6078      	str	r0, [r7, #4]
 8012652:	460b      	mov	r3, r1
 8012654:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	695a      	ldr	r2, [r3, #20]
 801265a:	887b      	ldrh	r3, [r7, #2]
 801265c:	405a      	eors	r2, r3
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	615a      	str	r2, [r3, #20]
}
 8012662:	bf00      	nop
 8012664:	370c      	adds	r7, #12
 8012666:	46bd      	mov	sp, r7
 8012668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266c:	4770      	bx	lr

0801266e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801266e:	b480      	push	{r7}
 8012670:	b083      	sub	sp, #12
 8012672:	af00      	add	r7, sp, #0
 8012674:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801267e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012680:	2300      	movs	r3, #0
}
 8012682:	4618      	mov	r0, r3
 8012684:	370c      	adds	r7, #12
 8012686:	46bd      	mov	sp, r7
 8012688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268c:	4770      	bx	lr
	...

08012690 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b086      	sub	sp, #24
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d101      	bne.n	80126a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801269e:	2301      	movs	r3, #1
 80126a0:	e22d      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f003 0301 	and.w	r3, r3, #1
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d075      	beq.n	801279a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80126ae:	4ba3      	ldr	r3, [pc, #652]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80126b0:	689b      	ldr	r3, [r3, #8]
 80126b2:	f003 030c 	and.w	r3, r3, #12
 80126b6:	2b04      	cmp	r3, #4
 80126b8:	d00c      	beq.n	80126d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80126ba:	4ba0      	ldr	r3, [pc, #640]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80126bc:	689b      	ldr	r3, [r3, #8]
 80126be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80126c2:	2b08      	cmp	r3, #8
 80126c4:	d112      	bne.n	80126ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80126c6:	4b9d      	ldr	r3, [pc, #628]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80126ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80126d2:	d10b      	bne.n	80126ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80126d4:	4b99      	ldr	r3, [pc, #612]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d05b      	beq.n	8012798 <HAL_RCC_OscConfig+0x108>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d157      	bne.n	8012798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80126e8:	2301      	movs	r3, #1
 80126ea:	e208      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	685b      	ldr	r3, [r3, #4]
 80126f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126f4:	d106      	bne.n	8012704 <HAL_RCC_OscConfig+0x74>
 80126f6:	4a91      	ldr	r2, [pc, #580]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80126f8:	4b90      	ldr	r3, [pc, #576]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012700:	6013      	str	r3, [r2, #0]
 8012702:	e01d      	b.n	8012740 <HAL_RCC_OscConfig+0xb0>
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801270c:	d10c      	bne.n	8012728 <HAL_RCC_OscConfig+0x98>
 801270e:	4a8b      	ldr	r2, [pc, #556]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 8012710:	4b8a      	ldr	r3, [pc, #552]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012718:	6013      	str	r3, [r2, #0]
 801271a:	4a88      	ldr	r2, [pc, #544]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 801271c:	4b87      	ldr	r3, [pc, #540]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012724:	6013      	str	r3, [r2, #0]
 8012726:	e00b      	b.n	8012740 <HAL_RCC_OscConfig+0xb0>
 8012728:	4a84      	ldr	r2, [pc, #528]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 801272a:	4b84      	ldr	r3, [pc, #528]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012732:	6013      	str	r3, [r2, #0]
 8012734:	4a81      	ldr	r2, [pc, #516]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 8012736:	4b81      	ldr	r3, [pc, #516]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801273e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d013      	beq.n	8012770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012748:	f7fd fe58 	bl	80103fc <HAL_GetTick>
 801274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801274e:	e008      	b.n	8012762 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012750:	f7fd fe54 	bl	80103fc <HAL_GetTick>
 8012754:	4602      	mov	r2, r0
 8012756:	693b      	ldr	r3, [r7, #16]
 8012758:	1ad3      	subs	r3, r2, r3
 801275a:	2b64      	cmp	r3, #100	; 0x64
 801275c:	d901      	bls.n	8012762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801275e:	2303      	movs	r3, #3
 8012760:	e1cd      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012762:	4b76      	ldr	r3, [pc, #472]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801276a:	2b00      	cmp	r3, #0
 801276c:	d0f0      	beq.n	8012750 <HAL_RCC_OscConfig+0xc0>
 801276e:	e014      	b.n	801279a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012770:	f7fd fe44 	bl	80103fc <HAL_GetTick>
 8012774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012776:	e008      	b.n	801278a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012778:	f7fd fe40 	bl	80103fc <HAL_GetTick>
 801277c:	4602      	mov	r2, r0
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	1ad3      	subs	r3, r2, r3
 8012782:	2b64      	cmp	r3, #100	; 0x64
 8012784:	d901      	bls.n	801278a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012786:	2303      	movs	r3, #3
 8012788:	e1b9      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801278a:	4b6c      	ldr	r3, [pc, #432]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012792:	2b00      	cmp	r3, #0
 8012794:	d1f0      	bne.n	8012778 <HAL_RCC_OscConfig+0xe8>
 8012796:	e000      	b.n	801279a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	f003 0302 	and.w	r3, r3, #2
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d063      	beq.n	801286e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80127a6:	4b65      	ldr	r3, [pc, #404]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80127a8:	689b      	ldr	r3, [r3, #8]
 80127aa:	f003 030c 	and.w	r3, r3, #12
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d00b      	beq.n	80127ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80127b2:	4b62      	ldr	r3, [pc, #392]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80127b4:	689b      	ldr	r3, [r3, #8]
 80127b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80127ba:	2b08      	cmp	r3, #8
 80127bc:	d11c      	bne.n	80127f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80127be:	4b5f      	ldr	r3, [pc, #380]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d116      	bne.n	80127f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80127ca:	4b5c      	ldr	r3, [pc, #368]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	f003 0302 	and.w	r3, r3, #2
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d005      	beq.n	80127e2 <HAL_RCC_OscConfig+0x152>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	68db      	ldr	r3, [r3, #12]
 80127da:	2b01      	cmp	r3, #1
 80127dc:	d001      	beq.n	80127e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80127de:	2301      	movs	r3, #1
 80127e0:	e18d      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80127e2:	4956      	ldr	r1, [pc, #344]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80127e4:	4b55      	ldr	r3, [pc, #340]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	691b      	ldr	r3, [r3, #16]
 80127f0:	00db      	lsls	r3, r3, #3
 80127f2:	4313      	orrs	r3, r2
 80127f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80127f6:	e03a      	b.n	801286e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	68db      	ldr	r3, [r3, #12]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d020      	beq.n	8012842 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012800:	4b4f      	ldr	r3, [pc, #316]	; (8012940 <HAL_RCC_OscConfig+0x2b0>)
 8012802:	2201      	movs	r2, #1
 8012804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012806:	f7fd fdf9 	bl	80103fc <HAL_GetTick>
 801280a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801280c:	e008      	b.n	8012820 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801280e:	f7fd fdf5 	bl	80103fc <HAL_GetTick>
 8012812:	4602      	mov	r2, r0
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	1ad3      	subs	r3, r2, r3
 8012818:	2b02      	cmp	r3, #2
 801281a:	d901      	bls.n	8012820 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801281c:	2303      	movs	r3, #3
 801281e:	e16e      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012820:	4b46      	ldr	r3, [pc, #280]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	f003 0302 	and.w	r3, r3, #2
 8012828:	2b00      	cmp	r3, #0
 801282a:	d0f0      	beq.n	801280e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801282c:	4943      	ldr	r1, [pc, #268]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 801282e:	4b43      	ldr	r3, [pc, #268]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	691b      	ldr	r3, [r3, #16]
 801283a:	00db      	lsls	r3, r3, #3
 801283c:	4313      	orrs	r3, r2
 801283e:	600b      	str	r3, [r1, #0]
 8012840:	e015      	b.n	801286e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012842:	4b3f      	ldr	r3, [pc, #252]	; (8012940 <HAL_RCC_OscConfig+0x2b0>)
 8012844:	2200      	movs	r2, #0
 8012846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012848:	f7fd fdd8 	bl	80103fc <HAL_GetTick>
 801284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801284e:	e008      	b.n	8012862 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012850:	f7fd fdd4 	bl	80103fc <HAL_GetTick>
 8012854:	4602      	mov	r2, r0
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	1ad3      	subs	r3, r2, r3
 801285a:	2b02      	cmp	r3, #2
 801285c:	d901      	bls.n	8012862 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801285e:	2303      	movs	r3, #3
 8012860:	e14d      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012862:	4b36      	ldr	r3, [pc, #216]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	f003 0302 	and.w	r3, r3, #2
 801286a:	2b00      	cmp	r3, #0
 801286c:	d1f0      	bne.n	8012850 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	f003 0308 	and.w	r3, r3, #8
 8012876:	2b00      	cmp	r3, #0
 8012878:	d030      	beq.n	80128dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	695b      	ldr	r3, [r3, #20]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d016      	beq.n	80128b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012882:	4b30      	ldr	r3, [pc, #192]	; (8012944 <HAL_RCC_OscConfig+0x2b4>)
 8012884:	2201      	movs	r2, #1
 8012886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012888:	f7fd fdb8 	bl	80103fc <HAL_GetTick>
 801288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801288e:	e008      	b.n	80128a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012890:	f7fd fdb4 	bl	80103fc <HAL_GetTick>
 8012894:	4602      	mov	r2, r0
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	1ad3      	subs	r3, r2, r3
 801289a:	2b02      	cmp	r3, #2
 801289c:	d901      	bls.n	80128a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801289e:	2303      	movs	r3, #3
 80128a0:	e12d      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80128a2:	4b26      	ldr	r3, [pc, #152]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80128a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128a6:	f003 0302 	and.w	r3, r3, #2
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d0f0      	beq.n	8012890 <HAL_RCC_OscConfig+0x200>
 80128ae:	e015      	b.n	80128dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80128b0:	4b24      	ldr	r3, [pc, #144]	; (8012944 <HAL_RCC_OscConfig+0x2b4>)
 80128b2:	2200      	movs	r2, #0
 80128b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80128b6:	f7fd fda1 	bl	80103fc <HAL_GetTick>
 80128ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80128bc:	e008      	b.n	80128d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80128be:	f7fd fd9d 	bl	80103fc <HAL_GetTick>
 80128c2:	4602      	mov	r2, r0
 80128c4:	693b      	ldr	r3, [r7, #16]
 80128c6:	1ad3      	subs	r3, r2, r3
 80128c8:	2b02      	cmp	r3, #2
 80128ca:	d901      	bls.n	80128d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80128cc:	2303      	movs	r3, #3
 80128ce:	e116      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80128d0:	4b1a      	ldr	r3, [pc, #104]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80128d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128d4:	f003 0302 	and.w	r3, r3, #2
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d1f0      	bne.n	80128be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	f003 0304 	and.w	r3, r3, #4
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	f000 80a0 	beq.w	8012a2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80128ea:	2300      	movs	r3, #0
 80128ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80128ee:	4b13      	ldr	r3, [pc, #76]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 80128f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d10f      	bne.n	801291a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80128fa:	2300      	movs	r3, #0
 80128fc:	60fb      	str	r3, [r7, #12]
 80128fe:	4a0f      	ldr	r2, [pc, #60]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 8012900:	4b0e      	ldr	r3, [pc, #56]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 8012902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012908:	6413      	str	r3, [r2, #64]	; 0x40
 801290a:	4b0c      	ldr	r3, [pc, #48]	; (801293c <HAL_RCC_OscConfig+0x2ac>)
 801290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012912:	60fb      	str	r3, [r7, #12]
 8012914:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8012916:	2301      	movs	r3, #1
 8012918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801291a:	4b0b      	ldr	r3, [pc, #44]	; (8012948 <HAL_RCC_OscConfig+0x2b8>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012922:	2b00      	cmp	r3, #0
 8012924:	d121      	bne.n	801296a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012926:	4a08      	ldr	r2, [pc, #32]	; (8012948 <HAL_RCC_OscConfig+0x2b8>)
 8012928:	4b07      	ldr	r3, [pc, #28]	; (8012948 <HAL_RCC_OscConfig+0x2b8>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012932:	f7fd fd63 	bl	80103fc <HAL_GetTick>
 8012936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012938:	e011      	b.n	801295e <HAL_RCC_OscConfig+0x2ce>
 801293a:	bf00      	nop
 801293c:	40023800 	.word	0x40023800
 8012940:	42470000 	.word	0x42470000
 8012944:	42470e80 	.word	0x42470e80
 8012948:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801294c:	f7fd fd56 	bl	80103fc <HAL_GetTick>
 8012950:	4602      	mov	r2, r0
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	1ad3      	subs	r3, r2, r3
 8012956:	2b02      	cmp	r3, #2
 8012958:	d901      	bls.n	801295e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801295a:	2303      	movs	r3, #3
 801295c:	e0cf      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801295e:	4b6a      	ldr	r3, [pc, #424]	; (8012b08 <HAL_RCC_OscConfig+0x478>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012966:	2b00      	cmp	r3, #0
 8012968:	d0f0      	beq.n	801294c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	689b      	ldr	r3, [r3, #8]
 801296e:	2b01      	cmp	r3, #1
 8012970:	d106      	bne.n	8012980 <HAL_RCC_OscConfig+0x2f0>
 8012972:	4a66      	ldr	r2, [pc, #408]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 8012974:	4b65      	ldr	r3, [pc, #404]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 8012976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012978:	f043 0301 	orr.w	r3, r3, #1
 801297c:	6713      	str	r3, [r2, #112]	; 0x70
 801297e:	e01c      	b.n	80129ba <HAL_RCC_OscConfig+0x32a>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	689b      	ldr	r3, [r3, #8]
 8012984:	2b05      	cmp	r3, #5
 8012986:	d10c      	bne.n	80129a2 <HAL_RCC_OscConfig+0x312>
 8012988:	4a60      	ldr	r2, [pc, #384]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 801298a:	4b60      	ldr	r3, [pc, #384]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 801298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801298e:	f043 0304 	orr.w	r3, r3, #4
 8012992:	6713      	str	r3, [r2, #112]	; 0x70
 8012994:	4a5d      	ldr	r2, [pc, #372]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 8012996:	4b5d      	ldr	r3, [pc, #372]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 8012998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801299a:	f043 0301 	orr.w	r3, r3, #1
 801299e:	6713      	str	r3, [r2, #112]	; 0x70
 80129a0:	e00b      	b.n	80129ba <HAL_RCC_OscConfig+0x32a>
 80129a2:	4a5a      	ldr	r2, [pc, #360]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 80129a4:	4b59      	ldr	r3, [pc, #356]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 80129a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129a8:	f023 0301 	bic.w	r3, r3, #1
 80129ac:	6713      	str	r3, [r2, #112]	; 0x70
 80129ae:	4a57      	ldr	r2, [pc, #348]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 80129b0:	4b56      	ldr	r3, [pc, #344]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 80129b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129b4:	f023 0304 	bic.w	r3, r3, #4
 80129b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	689b      	ldr	r3, [r3, #8]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d015      	beq.n	80129ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80129c2:	f7fd fd1b 	bl	80103fc <HAL_GetTick>
 80129c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80129c8:	e00a      	b.n	80129e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80129ca:	f7fd fd17 	bl	80103fc <HAL_GetTick>
 80129ce:	4602      	mov	r2, r0
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	1ad3      	subs	r3, r2, r3
 80129d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80129d8:	4293      	cmp	r3, r2
 80129da:	d901      	bls.n	80129e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80129dc:	2303      	movs	r3, #3
 80129de:	e08e      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80129e0:	4b4a      	ldr	r3, [pc, #296]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 80129e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129e4:	f003 0302 	and.w	r3, r3, #2
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d0ee      	beq.n	80129ca <HAL_RCC_OscConfig+0x33a>
 80129ec:	e014      	b.n	8012a18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80129ee:	f7fd fd05 	bl	80103fc <HAL_GetTick>
 80129f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80129f4:	e00a      	b.n	8012a0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80129f6:	f7fd fd01 	bl	80103fc <HAL_GetTick>
 80129fa:	4602      	mov	r2, r0
 80129fc:	693b      	ldr	r3, [r7, #16]
 80129fe:	1ad3      	subs	r3, r2, r3
 8012a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d901      	bls.n	8012a0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012a08:	2303      	movs	r3, #3
 8012a0a:	e078      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012a0c:	4b3f      	ldr	r3, [pc, #252]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 8012a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a10:	f003 0302 	and.w	r3, r3, #2
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d1ee      	bne.n	80129f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012a18:	7dfb      	ldrb	r3, [r7, #23]
 8012a1a:	2b01      	cmp	r3, #1
 8012a1c:	d105      	bne.n	8012a2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012a1e:	4a3b      	ldr	r2, [pc, #236]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 8012a20:	4b3a      	ldr	r3, [pc, #232]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 8012a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012a28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	699b      	ldr	r3, [r3, #24]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d064      	beq.n	8012afc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012a32:	4b36      	ldr	r3, [pc, #216]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 8012a34:	689b      	ldr	r3, [r3, #8]
 8012a36:	f003 030c 	and.w	r3, r3, #12
 8012a3a:	2b08      	cmp	r3, #8
 8012a3c:	d05c      	beq.n	8012af8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	699b      	ldr	r3, [r3, #24]
 8012a42:	2b02      	cmp	r3, #2
 8012a44:	d141      	bne.n	8012aca <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012a46:	4b32      	ldr	r3, [pc, #200]	; (8012b10 <HAL_RCC_OscConfig+0x480>)
 8012a48:	2200      	movs	r2, #0
 8012a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012a4c:	f7fd fcd6 	bl	80103fc <HAL_GetTick>
 8012a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012a52:	e008      	b.n	8012a66 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012a54:	f7fd fcd2 	bl	80103fc <HAL_GetTick>
 8012a58:	4602      	mov	r2, r0
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	1ad3      	subs	r3, r2, r3
 8012a5e:	2b02      	cmp	r3, #2
 8012a60:	d901      	bls.n	8012a66 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8012a62:	2303      	movs	r3, #3
 8012a64:	e04b      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012a66:	4b29      	ldr	r3, [pc, #164]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d1f0      	bne.n	8012a54 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012a72:	4926      	ldr	r1, [pc, #152]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	69da      	ldr	r2, [r3, #28]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	6a1b      	ldr	r3, [r3, #32]
 8012a7c:	431a      	orrs	r2, r3
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a82:	019b      	lsls	r3, r3, #6
 8012a84:	431a      	orrs	r2, r3
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a8a:	085b      	lsrs	r3, r3, #1
 8012a8c:	3b01      	subs	r3, #1
 8012a8e:	041b      	lsls	r3, r3, #16
 8012a90:	431a      	orrs	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a96:	061b      	lsls	r3, r3, #24
 8012a98:	4313      	orrs	r3, r2
 8012a9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012a9c:	4b1c      	ldr	r3, [pc, #112]	; (8012b10 <HAL_RCC_OscConfig+0x480>)
 8012a9e:	2201      	movs	r2, #1
 8012aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012aa2:	f7fd fcab 	bl	80103fc <HAL_GetTick>
 8012aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012aa8:	e008      	b.n	8012abc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012aaa:	f7fd fca7 	bl	80103fc <HAL_GetTick>
 8012aae:	4602      	mov	r2, r0
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	1ad3      	subs	r3, r2, r3
 8012ab4:	2b02      	cmp	r3, #2
 8012ab6:	d901      	bls.n	8012abc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8012ab8:	2303      	movs	r3, #3
 8012aba:	e020      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012abc:	4b13      	ldr	r3, [pc, #76]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d0f0      	beq.n	8012aaa <HAL_RCC_OscConfig+0x41a>
 8012ac8:	e018      	b.n	8012afc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012aca:	4b11      	ldr	r3, [pc, #68]	; (8012b10 <HAL_RCC_OscConfig+0x480>)
 8012acc:	2200      	movs	r2, #0
 8012ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012ad0:	f7fd fc94 	bl	80103fc <HAL_GetTick>
 8012ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012ad6:	e008      	b.n	8012aea <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012ad8:	f7fd fc90 	bl	80103fc <HAL_GetTick>
 8012adc:	4602      	mov	r2, r0
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	1ad3      	subs	r3, r2, r3
 8012ae2:	2b02      	cmp	r3, #2
 8012ae4:	d901      	bls.n	8012aea <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8012ae6:	2303      	movs	r3, #3
 8012ae8:	e009      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012aea:	4b08      	ldr	r3, [pc, #32]	; (8012b0c <HAL_RCC_OscConfig+0x47c>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d1f0      	bne.n	8012ad8 <HAL_RCC_OscConfig+0x448>
 8012af6:	e001      	b.n	8012afc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8012af8:	2301      	movs	r3, #1
 8012afa:	e000      	b.n	8012afe <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8012afc:	2300      	movs	r3, #0
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	3718      	adds	r7, #24
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	bf00      	nop
 8012b08:	40007000 	.word	0x40007000
 8012b0c:	40023800 	.word	0x40023800
 8012b10:	42470060 	.word	0x42470060

08012b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b084      	sub	sp, #16
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d101      	bne.n	8012b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012b24:	2301      	movs	r3, #1
 8012b26:	e0ca      	b.n	8012cbe <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012b28:	4b67      	ldr	r3, [pc, #412]	; (8012cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	f003 020f 	and.w	r2, r3, #15
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d20c      	bcs.n	8012b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012b36:	4b64      	ldr	r3, [pc, #400]	; (8012cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8012b38:	683a      	ldr	r2, [r7, #0]
 8012b3a:	b2d2      	uxtb	r2, r2
 8012b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012b3e:	4b62      	ldr	r3, [pc, #392]	; (8012cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f003 020f 	and.w	r2, r3, #15
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d001      	beq.n	8012b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	e0b6      	b.n	8012cbe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	f003 0302 	and.w	r3, r3, #2
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d020      	beq.n	8012b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	f003 0304 	and.w	r3, r3, #4
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d005      	beq.n	8012b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012b68:	4a58      	ldr	r2, [pc, #352]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012b6a:	4b58      	ldr	r3, [pc, #352]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012b6c:	689b      	ldr	r3, [r3, #8]
 8012b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	f003 0308 	and.w	r3, r3, #8
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d005      	beq.n	8012b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012b80:	4a52      	ldr	r2, [pc, #328]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012b82:	4b52      	ldr	r3, [pc, #328]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012b84:	689b      	ldr	r3, [r3, #8]
 8012b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012b8c:	494f      	ldr	r1, [pc, #316]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012b8e:	4b4f      	ldr	r3, [pc, #316]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012b90:	689b      	ldr	r3, [r3, #8]
 8012b92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	689b      	ldr	r3, [r3, #8]
 8012b9a:	4313      	orrs	r3, r2
 8012b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	f003 0301 	and.w	r3, r3, #1
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d044      	beq.n	8012c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	2b01      	cmp	r3, #1
 8012bb0:	d107      	bne.n	8012bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012bb2:	4b46      	ldr	r3, [pc, #280]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d119      	bne.n	8012bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	e07d      	b.n	8012cbe <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	2b02      	cmp	r3, #2
 8012bc8:	d003      	beq.n	8012bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012bce:	2b03      	cmp	r3, #3
 8012bd0:	d107      	bne.n	8012be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012bd2:	4b3e      	ldr	r3, [pc, #248]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d109      	bne.n	8012bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012bde:	2301      	movs	r3, #1
 8012be0:	e06d      	b.n	8012cbe <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012be2:	4b3a      	ldr	r3, [pc, #232]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	f003 0302 	and.w	r3, r3, #2
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d101      	bne.n	8012bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012bee:	2301      	movs	r3, #1
 8012bf0:	e065      	b.n	8012cbe <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012bf2:	4936      	ldr	r1, [pc, #216]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012bf4:	4b35      	ldr	r3, [pc, #212]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012bf6:	689b      	ldr	r3, [r3, #8]
 8012bf8:	f023 0203 	bic.w	r2, r3, #3
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	4313      	orrs	r3, r2
 8012c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012c04:	f7fd fbfa 	bl	80103fc <HAL_GetTick>
 8012c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012c0a:	e00a      	b.n	8012c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012c0c:	f7fd fbf6 	bl	80103fc <HAL_GetTick>
 8012c10:	4602      	mov	r2, r0
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	1ad3      	subs	r3, r2, r3
 8012c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	d901      	bls.n	8012c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012c1e:	2303      	movs	r3, #3
 8012c20:	e04d      	b.n	8012cbe <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012c22:	4b2a      	ldr	r3, [pc, #168]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012c24:	689b      	ldr	r3, [r3, #8]
 8012c26:	f003 020c 	and.w	r2, r3, #12
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	009b      	lsls	r3, r3, #2
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d1eb      	bne.n	8012c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012c34:	4b24      	ldr	r3, [pc, #144]	; (8012cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	f003 020f 	and.w	r2, r3, #15
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d90c      	bls.n	8012c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012c42:	4b21      	ldr	r3, [pc, #132]	; (8012cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8012c44:	683a      	ldr	r2, [r7, #0]
 8012c46:	b2d2      	uxtb	r2, r2
 8012c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012c4a:	4b1f      	ldr	r3, [pc, #124]	; (8012cc8 <HAL_RCC_ClockConfig+0x1b4>)
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	f003 020f 	and.w	r2, r3, #15
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d001      	beq.n	8012c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012c58:	2301      	movs	r3, #1
 8012c5a:	e030      	b.n	8012cbe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	f003 0304 	and.w	r3, r3, #4
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d008      	beq.n	8012c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012c68:	4918      	ldr	r1, [pc, #96]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012c6a:	4b18      	ldr	r3, [pc, #96]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012c6c:	689b      	ldr	r3, [r3, #8]
 8012c6e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	68db      	ldr	r3, [r3, #12]
 8012c76:	4313      	orrs	r3, r2
 8012c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	f003 0308 	and.w	r3, r3, #8
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d009      	beq.n	8012c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012c86:	4911      	ldr	r1, [pc, #68]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012c88:	4b10      	ldr	r3, [pc, #64]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012c8a:	689b      	ldr	r3, [r3, #8]
 8012c8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	691b      	ldr	r3, [r3, #16]
 8012c94:	00db      	lsls	r3, r3, #3
 8012c96:	4313      	orrs	r3, r2
 8012c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012c9a:	f000 f81d 	bl	8012cd8 <HAL_RCC_GetSysClockFreq>
 8012c9e:	4601      	mov	r1, r0
 8012ca0:	4b0a      	ldr	r3, [pc, #40]	; (8012ccc <HAL_RCC_ClockConfig+0x1b8>)
 8012ca2:	689b      	ldr	r3, [r3, #8]
 8012ca4:	091b      	lsrs	r3, r3, #4
 8012ca6:	f003 030f 	and.w	r3, r3, #15
 8012caa:	4a09      	ldr	r2, [pc, #36]	; (8012cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8012cac:	5cd3      	ldrb	r3, [r2, r3]
 8012cae:	fa21 f303 	lsr.w	r3, r1, r3
 8012cb2:	4a08      	ldr	r2, [pc, #32]	; (8012cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8012cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	f013 fe9c 	bl	80269f4 <HAL_InitTick>

  return HAL_OK;
 8012cbc:	2300      	movs	r3, #0
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3710      	adds	r7, #16
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	40023c00 	.word	0x40023c00
 8012ccc:	40023800 	.word	0x40023800
 8012cd0:	0802e694 	.word	0x0802e694
 8012cd4:	20000064 	.word	0x20000064

08012cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cdc:	b087      	sub	sp, #28
 8012cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	60fa      	str	r2, [r7, #12]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	617a      	str	r2, [r7, #20]
 8012ce8:	2200      	movs	r2, #0
 8012cea:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8012cec:	2200      	movs	r2, #0
 8012cee:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012cf0:	4a51      	ldr	r2, [pc, #324]	; (8012e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8012cf2:	6892      	ldr	r2, [r2, #8]
 8012cf4:	f002 020c 	and.w	r2, r2, #12
 8012cf8:	2a04      	cmp	r2, #4
 8012cfa:	d007      	beq.n	8012d0c <HAL_RCC_GetSysClockFreq+0x34>
 8012cfc:	2a08      	cmp	r2, #8
 8012cfe:	d008      	beq.n	8012d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8012d00:	2a00      	cmp	r2, #0
 8012d02:	f040 8090 	bne.w	8012e26 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012d06:	4b4d      	ldr	r3, [pc, #308]	; (8012e3c <HAL_RCC_GetSysClockFreq+0x164>)
 8012d08:	613b      	str	r3, [r7, #16]
       break;
 8012d0a:	e08f      	b.n	8012e2c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012d0c:	4b4c      	ldr	r3, [pc, #304]	; (8012e40 <HAL_RCC_GetSysClockFreq+0x168>)
 8012d0e:	613b      	str	r3, [r7, #16]
      break;
 8012d10:	e08c      	b.n	8012e2c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012d12:	4a49      	ldr	r2, [pc, #292]	; (8012e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8012d14:	6852      	ldr	r2, [r2, #4]
 8012d16:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012d1a:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012d1c:	4a46      	ldr	r2, [pc, #280]	; (8012e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8012d1e:	6852      	ldr	r2, [r2, #4]
 8012d20:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8012d24:	2a00      	cmp	r2, #0
 8012d26:	d023      	beq.n	8012d70 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012d28:	4b43      	ldr	r3, [pc, #268]	; (8012e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8012d2a:	685b      	ldr	r3, [r3, #4]
 8012d2c:	099b      	lsrs	r3, r3, #6
 8012d2e:	f04f 0400 	mov.w	r4, #0
 8012d32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012d36:	f04f 0200 	mov.w	r2, #0
 8012d3a:	ea03 0301 	and.w	r3, r3, r1
 8012d3e:	ea04 0402 	and.w	r4, r4, r2
 8012d42:	4a3f      	ldr	r2, [pc, #252]	; (8012e40 <HAL_RCC_GetSysClockFreq+0x168>)
 8012d44:	fb02 f104 	mul.w	r1, r2, r4
 8012d48:	2200      	movs	r2, #0
 8012d4a:	fb02 f203 	mul.w	r2, r2, r3
 8012d4e:	440a      	add	r2, r1
 8012d50:	493b      	ldr	r1, [pc, #236]	; (8012e40 <HAL_RCC_GetSysClockFreq+0x168>)
 8012d52:	fba3 0101 	umull	r0, r1, r3, r1
 8012d56:	1853      	adds	r3, r2, r1
 8012d58:	4619      	mov	r1, r3
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	f04f 0400 	mov.w	r4, #0
 8012d60:	461a      	mov	r2, r3
 8012d62:	4623      	mov	r3, r4
 8012d64:	f7fd f98c 	bl	8010080 <__aeabi_uldivmod>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	460c      	mov	r4, r1
 8012d6c:	617b      	str	r3, [r7, #20]
 8012d6e:	e04c      	b.n	8012e0a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012d70:	4a31      	ldr	r2, [pc, #196]	; (8012e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8012d72:	6852      	ldr	r2, [r2, #4]
 8012d74:	0992      	lsrs	r2, r2, #6
 8012d76:	4611      	mov	r1, r2
 8012d78:	f04f 0200 	mov.w	r2, #0
 8012d7c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8012d80:	f04f 0600 	mov.w	r6, #0
 8012d84:	ea05 0501 	and.w	r5, r5, r1
 8012d88:	ea06 0602 	and.w	r6, r6, r2
 8012d8c:	4629      	mov	r1, r5
 8012d8e:	4632      	mov	r2, r6
 8012d90:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8012d94:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8012d98:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8012d9c:	4651      	mov	r1, sl
 8012d9e:	465a      	mov	r2, fp
 8012da0:	46aa      	mov	sl, r5
 8012da2:	46b3      	mov	fp, r6
 8012da4:	4655      	mov	r5, sl
 8012da6:	465e      	mov	r6, fp
 8012da8:	1b4d      	subs	r5, r1, r5
 8012daa:	eb62 0606 	sbc.w	r6, r2, r6
 8012dae:	4629      	mov	r1, r5
 8012db0:	4632      	mov	r2, r6
 8012db2:	0194      	lsls	r4, r2, #6
 8012db4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8012db8:	018b      	lsls	r3, r1, #6
 8012dba:	1a5b      	subs	r3, r3, r1
 8012dbc:	eb64 0402 	sbc.w	r4, r4, r2
 8012dc0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8012dc4:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8012dc8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8012dcc:	4643      	mov	r3, r8
 8012dce:	464c      	mov	r4, r9
 8012dd0:	4655      	mov	r5, sl
 8012dd2:	465e      	mov	r6, fp
 8012dd4:	18ed      	adds	r5, r5, r3
 8012dd6:	eb46 0604 	adc.w	r6, r6, r4
 8012dda:	462b      	mov	r3, r5
 8012ddc:	4634      	mov	r4, r6
 8012dde:	02a2      	lsls	r2, r4, #10
 8012de0:	607a      	str	r2, [r7, #4]
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8012de8:	607a      	str	r2, [r7, #4]
 8012dea:	029b      	lsls	r3, r3, #10
 8012dec:	603b      	str	r3, [r7, #0]
 8012dee:	e897 0018 	ldmia.w	r7, {r3, r4}
 8012df2:	4618      	mov	r0, r3
 8012df4:	4621      	mov	r1, r4
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	f04f 0400 	mov.w	r4, #0
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	4623      	mov	r3, r4
 8012e00:	f7fd f93e 	bl	8010080 <__aeabi_uldivmod>
 8012e04:	4603      	mov	r3, r0
 8012e06:	460c      	mov	r4, r1
 8012e08:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012e0a:	4b0b      	ldr	r3, [pc, #44]	; (8012e38 <HAL_RCC_GetSysClockFreq+0x160>)
 8012e0c:	685b      	ldr	r3, [r3, #4]
 8012e0e:	0c1b      	lsrs	r3, r3, #16
 8012e10:	f003 0303 	and.w	r3, r3, #3
 8012e14:	3301      	adds	r3, #1
 8012e16:	005b      	lsls	r3, r3, #1
 8012e18:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8012e1a:	697a      	ldr	r2, [r7, #20]
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e22:	613b      	str	r3, [r7, #16]
      break;
 8012e24:	e002      	b.n	8012e2c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012e26:	4b05      	ldr	r3, [pc, #20]	; (8012e3c <HAL_RCC_GetSysClockFreq+0x164>)
 8012e28:	613b      	str	r3, [r7, #16]
      break;
 8012e2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012e2c:	693b      	ldr	r3, [r7, #16]
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	371c      	adds	r7, #28
 8012e32:	46bd      	mov	sp, r7
 8012e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e38:	40023800 	.word	0x40023800
 8012e3c:	00f42400 	.word	0x00f42400
 8012e40:	017d7840 	.word	0x017d7840

08012e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012e44:	b480      	push	{r7}
 8012e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012e48:	4b03      	ldr	r3, [pc, #12]	; (8012e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e54:	4770      	bx	lr
 8012e56:	bf00      	nop
 8012e58:	20000064 	.word	0x20000064

08012e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012e60:	f7ff fff0 	bl	8012e44 <HAL_RCC_GetHCLKFreq>
 8012e64:	4601      	mov	r1, r0
 8012e66:	4b05      	ldr	r3, [pc, #20]	; (8012e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8012e68:	689b      	ldr	r3, [r3, #8]
 8012e6a:	0a9b      	lsrs	r3, r3, #10
 8012e6c:	f003 0307 	and.w	r3, r3, #7
 8012e70:	4a03      	ldr	r2, [pc, #12]	; (8012e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012e72:	5cd3      	ldrb	r3, [r2, r3]
 8012e74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	bd80      	pop	{r7, pc}
 8012e7c:	40023800 	.word	0x40023800
 8012e80:	0802e6a4 	.word	0x0802e6a4

08012e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012e88:	f7ff ffdc 	bl	8012e44 <HAL_RCC_GetHCLKFreq>
 8012e8c:	4601      	mov	r1, r0
 8012e8e:	4b05      	ldr	r3, [pc, #20]	; (8012ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8012e90:	689b      	ldr	r3, [r3, #8]
 8012e92:	0b5b      	lsrs	r3, r3, #13
 8012e94:	f003 0307 	and.w	r3, r3, #7
 8012e98:	4a03      	ldr	r2, [pc, #12]	; (8012ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012e9a:	5cd3      	ldrb	r3, [r2, r3]
 8012e9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	40023800 	.word	0x40023800
 8012ea8:	0802e6a4 	.word	0x0802e6a4

08012eac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	220f      	movs	r2, #15
 8012eba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012ebc:	4b12      	ldr	r3, [pc, #72]	; (8012f08 <HAL_RCC_GetClockConfig+0x5c>)
 8012ebe:	689b      	ldr	r3, [r3, #8]
 8012ec0:	f003 0203 	and.w	r2, r3, #3
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8012ec8:	4b0f      	ldr	r3, [pc, #60]	; (8012f08 <HAL_RCC_GetClockConfig+0x5c>)
 8012eca:	689b      	ldr	r3, [r3, #8]
 8012ecc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012ed4:	4b0c      	ldr	r3, [pc, #48]	; (8012f08 <HAL_RCC_GetClockConfig+0x5c>)
 8012ed6:	689b      	ldr	r3, [r3, #8]
 8012ed8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012ee0:	4b09      	ldr	r3, [pc, #36]	; (8012f08 <HAL_RCC_GetClockConfig+0x5c>)
 8012ee2:	689b      	ldr	r3, [r3, #8]
 8012ee4:	08db      	lsrs	r3, r3, #3
 8012ee6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012eee:	4b07      	ldr	r3, [pc, #28]	; (8012f0c <HAL_RCC_GetClockConfig+0x60>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	f003 020f 	and.w	r2, r3, #15
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	601a      	str	r2, [r3, #0]
}
 8012efa:	bf00      	nop
 8012efc:	370c      	adds	r7, #12
 8012efe:	46bd      	mov	sp, r7
 8012f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f04:	4770      	bx	lr
 8012f06:	bf00      	nop
 8012f08:	40023800 	.word	0x40023800
 8012f0c:	40023c00 	.word	0x40023c00

08012f10 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b082      	sub	sp, #8
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d101      	bne.n	8012f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012f1e:	2301      	movs	r3, #1
 8012f20:	e01d      	b.n	8012f5e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012f28:	b2db      	uxtb	r3, r3
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d106      	bne.n	8012f3c <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2200      	movs	r2, #0
 8012f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f014 f8a8 	bl	802708c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2202      	movs	r2, #2
 8012f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681a      	ldr	r2, [r3, #0]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	3304      	adds	r3, #4
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	4610      	mov	r0, r2
 8012f50:	f000 fa5a 	bl	8013408 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2201      	movs	r2, #1
 8012f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8012f5c:	2300      	movs	r3, #0
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3708      	adds	r7, #8
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}

08012f66 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012f66:	b480      	push	{r7}
 8012f68:	b083      	sub	sp, #12
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	6812      	ldr	r2, [r2, #0]
 8012f76:	68d2      	ldr	r2, [r2, #12]
 8012f78:	f042 0201 	orr.w	r2, r2, #1
 8012f7c:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	687a      	ldr	r2, [r7, #4]
 8012f84:	6812      	ldr	r2, [r2, #0]
 8012f86:	6812      	ldr	r2, [r2, #0]
 8012f88:	f042 0201 	orr.w	r2, r2, #1
 8012f8c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8012f8e:	2300      	movs	r3, #0
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	370c      	adds	r7, #12
 8012f94:	46bd      	mov	sp, r7
 8012f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9a:	4770      	bx	lr

08012f9c <HAL_TIM_Base_Stop_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b083      	sub	sp, #12
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	6812      	ldr	r2, [r2, #0]
 8012fac:	68d2      	ldr	r2, [r2, #12]
 8012fae:	f022 0201 	bic.w	r2, r2, #1
 8012fb2:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	6a1a      	ldr	r2, [r3, #32]
 8012fba:	f241 1311 	movw	r3, #4369	; 0x1111
 8012fbe:	4013      	ands	r3, r2
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d10f      	bne.n	8012fe4 <HAL_TIM_Base_Stop_IT+0x48>
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	6a1a      	ldr	r2, [r3, #32]
 8012fca:	f240 4344 	movw	r3, #1092	; 0x444
 8012fce:	4013      	ands	r3, r2
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d107      	bne.n	8012fe4 <HAL_TIM_Base_Stop_IT+0x48>
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	687a      	ldr	r2, [r7, #4]
 8012fda:	6812      	ldr	r2, [r2, #0]
 8012fdc:	6812      	ldr	r2, [r2, #0]
 8012fde:	f022 0201 	bic.w	r2, r2, #1
 8012fe2:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
 8012fe4:	2300      	movs	r3, #0
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	370c      	adds	r7, #12
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr

08012ff2 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012ff2:	b580      	push	{r7, lr}
 8012ff4:	b082      	sub	sp, #8
 8012ff6:	af00      	add	r7, sp, #0
 8012ff8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	691b      	ldr	r3, [r3, #16]
 8013000:	f003 0302 	and.w	r3, r3, #2
 8013004:	2b02      	cmp	r3, #2
 8013006:	d122      	bne.n	801304e <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	68db      	ldr	r3, [r3, #12]
 801300e:	f003 0302 	and.w	r3, r3, #2
 8013012:	2b02      	cmp	r3, #2
 8013014:	d11b      	bne.n	801304e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	f06f 0202 	mvn.w	r2, #2
 801301e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2201      	movs	r2, #1
 8013024:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	699b      	ldr	r3, [r3, #24]
 801302c:	f003 0303 	and.w	r3, r3, #3
 8013030:	2b00      	cmp	r3, #0
 8013032:	d003      	beq.n	801303c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f000 f9c9 	bl	80133cc <HAL_TIM_IC_CaptureCallback>
 801303a:	e005      	b.n	8013048 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f000 f9bb 	bl	80133b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013042:	6878      	ldr	r0, [r7, #4]
 8013044:	f000 f9cc 	bl	80133e0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2200      	movs	r2, #0
 801304c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	691b      	ldr	r3, [r3, #16]
 8013054:	f003 0304 	and.w	r3, r3, #4
 8013058:	2b04      	cmp	r3, #4
 801305a:	d122      	bne.n	80130a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	68db      	ldr	r3, [r3, #12]
 8013062:	f003 0304 	and.w	r3, r3, #4
 8013066:	2b04      	cmp	r3, #4
 8013068:	d11b      	bne.n	80130a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	f06f 0204 	mvn.w	r2, #4
 8013072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2202      	movs	r2, #2
 8013078:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	699b      	ldr	r3, [r3, #24]
 8013080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013084:	2b00      	cmp	r3, #0
 8013086:	d003      	beq.n	8013090 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f000 f99f 	bl	80133cc <HAL_TIM_IC_CaptureCallback>
 801308e:	e005      	b.n	801309c <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f000 f991 	bl	80133b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f000 f9a2 	bl	80133e0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2200      	movs	r2, #0
 80130a0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	691b      	ldr	r3, [r3, #16]
 80130a8:	f003 0308 	and.w	r3, r3, #8
 80130ac:	2b08      	cmp	r3, #8
 80130ae:	d122      	bne.n	80130f6 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	68db      	ldr	r3, [r3, #12]
 80130b6:	f003 0308 	and.w	r3, r3, #8
 80130ba:	2b08      	cmp	r3, #8
 80130bc:	d11b      	bne.n	80130f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	f06f 0208 	mvn.w	r2, #8
 80130c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2204      	movs	r2, #4
 80130cc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	69db      	ldr	r3, [r3, #28]
 80130d4:	f003 0303 	and.w	r3, r3, #3
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d003      	beq.n	80130e4 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f000 f975 	bl	80133cc <HAL_TIM_IC_CaptureCallback>
 80130e2:	e005      	b.n	80130f0 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f000 f967 	bl	80133b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f000 f978 	bl	80133e0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2200      	movs	r2, #0
 80130f4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	691b      	ldr	r3, [r3, #16]
 80130fc:	f003 0310 	and.w	r3, r3, #16
 8013100:	2b10      	cmp	r3, #16
 8013102:	d122      	bne.n	801314a <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	68db      	ldr	r3, [r3, #12]
 801310a:	f003 0310 	and.w	r3, r3, #16
 801310e:	2b10      	cmp	r3, #16
 8013110:	d11b      	bne.n	801314a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f06f 0210 	mvn.w	r2, #16
 801311a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	2208      	movs	r2, #8
 8013120:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	69db      	ldr	r3, [r3, #28]
 8013128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801312c:	2b00      	cmp	r3, #0
 801312e:	d003      	beq.n	8013138 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f000 f94b 	bl	80133cc <HAL_TIM_IC_CaptureCallback>
 8013136:	e005      	b.n	8013144 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f000 f93d 	bl	80133b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f000 f94e 	bl	80133e0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2200      	movs	r2, #0
 8013148:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	691b      	ldr	r3, [r3, #16]
 8013150:	f003 0301 	and.w	r3, r3, #1
 8013154:	2b01      	cmp	r3, #1
 8013156:	d10e      	bne.n	8013176 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	68db      	ldr	r3, [r3, #12]
 801315e:	f003 0301 	and.w	r3, r3, #1
 8013162:	2b01      	cmp	r3, #1
 8013164:	d107      	bne.n	8013176 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f06f 0201 	mvn.w	r2, #1
 801316e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f012 fc29 	bl	80259c8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	691b      	ldr	r3, [r3, #16]
 801317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013180:	2b80      	cmp	r3, #128	; 0x80
 8013182:	d10e      	bne.n	80131a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	68db      	ldr	r3, [r3, #12]
 801318a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801318e:	2b80      	cmp	r3, #128	; 0x80
 8013190:	d107      	bne.n	80131a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801319a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f000 fad5 	bl	801374c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	691b      	ldr	r3, [r3, #16]
 80131a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131ac:	2b40      	cmp	r3, #64	; 0x40
 80131ae:	d10e      	bne.n	80131ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	68db      	ldr	r3, [r3, #12]
 80131b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131ba:	2b40      	cmp	r3, #64	; 0x40
 80131bc:	d107      	bne.n	80131ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80131c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f000 f913 	bl	80133f4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	691b      	ldr	r3, [r3, #16]
 80131d4:	f003 0320 	and.w	r3, r3, #32
 80131d8:	2b20      	cmp	r3, #32
 80131da:	d10e      	bne.n	80131fa <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	68db      	ldr	r3, [r3, #12]
 80131e2:	f003 0320 	and.w	r3, r3, #32
 80131e6:	2b20      	cmp	r3, #32
 80131e8:	d107      	bne.n	80131fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	f06f 0220 	mvn.w	r2, #32
 80131f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80131f4:	6878      	ldr	r0, [r7, #4]
 80131f6:	f000 fa9f 	bl	8013738 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80131fa:	bf00      	nop
 80131fc:	3708      	adds	r7, #8
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd80      	pop	{r7, pc}

08013202 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8013202:	b580      	push	{r7, lr}
 8013204:	b084      	sub	sp, #16
 8013206:	af00      	add	r7, sp, #0
 8013208:	6078      	str	r0, [r7, #4]
 801320a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 801320c:	2300      	movs	r3, #0
 801320e:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013216:	2b01      	cmp	r3, #1
 8013218:	d101      	bne.n	801321e <HAL_TIM_ConfigClockSource+0x1c>
 801321a:	2302      	movs	r3, #2
 801321c:	e0c8      	b.n	80133b0 <HAL_TIM_ConfigClockSource+0x1ae>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2201      	movs	r2, #1
 8013222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2202      	movs	r2, #2
 801322a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	689b      	ldr	r3, [r3, #8]
 8013234:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801323c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013244:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	68fa      	ldr	r2, [r7, #12]
 801324c:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	2b40      	cmp	r3, #64	; 0x40
 8013254:	d077      	beq.n	8013346 <HAL_TIM_ConfigClockSource+0x144>
 8013256:	2b40      	cmp	r3, #64	; 0x40
 8013258:	d80e      	bhi.n	8013278 <HAL_TIM_ConfigClockSource+0x76>
 801325a:	2b10      	cmp	r3, #16
 801325c:	f000 808a 	beq.w	8013374 <HAL_TIM_ConfigClockSource+0x172>
 8013260:	2b10      	cmp	r3, #16
 8013262:	d802      	bhi.n	801326a <HAL_TIM_ConfigClockSource+0x68>
 8013264:	2b00      	cmp	r3, #0
 8013266:	d07e      	beq.n	8013366 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8013268:	e099      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 801326a:	2b20      	cmp	r3, #32
 801326c:	f000 8089 	beq.w	8013382 <HAL_TIM_ConfigClockSource+0x180>
 8013270:	2b30      	cmp	r3, #48	; 0x30
 8013272:	f000 808d 	beq.w	8013390 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 8013276:	e092      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8013278:	2b70      	cmp	r3, #112	; 0x70
 801327a:	d016      	beq.n	80132aa <HAL_TIM_ConfigClockSource+0xa8>
 801327c:	2b70      	cmp	r3, #112	; 0x70
 801327e:	d804      	bhi.n	801328a <HAL_TIM_ConfigClockSource+0x88>
 8013280:	2b50      	cmp	r3, #80	; 0x50
 8013282:	d040      	beq.n	8013306 <HAL_TIM_ConfigClockSource+0x104>
 8013284:	2b60      	cmp	r3, #96	; 0x60
 8013286:	d04e      	beq.n	8013326 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8013288:	e089      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 801328a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801328e:	d003      	beq.n	8013298 <HAL_TIM_ConfigClockSource+0x96>
 8013290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013294:	d024      	beq.n	80132e0 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8013296:	e082      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	687a      	ldr	r2, [r7, #4]
 801329e:	6812      	ldr	r2, [r2, #0]
 80132a0:	6892      	ldr	r2, [r2, #8]
 80132a2:	f022 0207 	bic.w	r2, r2, #7
 80132a6:	609a      	str	r2, [r3, #8]
    break;
 80132a8:	e079      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6818      	ldr	r0, [r3, #0]
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	6899      	ldr	r1, [r3, #8]
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	685a      	ldr	r2, [r3, #4]
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	68db      	ldr	r3, [r3, #12]
 80132ba:	f000 f9d6 	bl	801366a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	689b      	ldr	r3, [r3, #8]
 80132c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80132cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80132d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	68fa      	ldr	r2, [r7, #12]
 80132dc:	609a      	str	r2, [r3, #8]
    break;
 80132de:	e05e      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6818      	ldr	r0, [r3, #0]
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	6899      	ldr	r1, [r3, #8]
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	685a      	ldr	r2, [r3, #4]
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	68db      	ldr	r3, [r3, #12]
 80132f0:	f000 f9bb 	bl	801366a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	687a      	ldr	r2, [r7, #4]
 80132fa:	6812      	ldr	r2, [r2, #0]
 80132fc:	6892      	ldr	r2, [r2, #8]
 80132fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013302:	609a      	str	r2, [r3, #8]
    break;
 8013304:	e04b      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	6818      	ldr	r0, [r3, #0]
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	6859      	ldr	r1, [r3, #4]
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	68db      	ldr	r3, [r3, #12]
 8013312:	461a      	mov	r2, r3
 8013314:	f000 f922 	bl	801355c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	2150      	movs	r1, #80	; 0x50
 801331e:	4618      	mov	r0, r3
 8013320:	f000 f983 	bl	801362a <TIM_ITRx_SetConfig>
    break;
 8013324:	e03b      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	6818      	ldr	r0, [r3, #0]
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	6859      	ldr	r1, [r3, #4]
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	68db      	ldr	r3, [r3, #12]
 8013332:	461a      	mov	r2, r3
 8013334:	f000 f945 	bl	80135c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	2160      	movs	r1, #96	; 0x60
 801333e:	4618      	mov	r0, r3
 8013340:	f000 f973 	bl	801362a <TIM_ITRx_SetConfig>
    break;
 8013344:	e02b      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	6818      	ldr	r0, [r3, #0]
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	6859      	ldr	r1, [r3, #4]
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	68db      	ldr	r3, [r3, #12]
 8013352:	461a      	mov	r2, r3
 8013354:	f000 f902 	bl	801355c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	2140      	movs	r1, #64	; 0x40
 801335e:	4618      	mov	r0, r3
 8013360:	f000 f963 	bl	801362a <TIM_ITRx_SetConfig>
    break;
 8013364:	e01b      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	2100      	movs	r1, #0
 801336c:	4618      	mov	r0, r3
 801336e:	f000 f95c 	bl	801362a <TIM_ITRx_SetConfig>
    break;
 8013372:	e014      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	2110      	movs	r1, #16
 801337a:	4618      	mov	r0, r3
 801337c:	f000 f955 	bl	801362a <TIM_ITRx_SetConfig>
    break;
 8013380:	e00d      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	2120      	movs	r1, #32
 8013388:	4618      	mov	r0, r3
 801338a:	f000 f94e 	bl	801362a <TIM_ITRx_SetConfig>
    break;
 801338e:	e006      	b.n	801339e <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	2130      	movs	r1, #48	; 0x30
 8013396:	4618      	mov	r0, r3
 8013398:	f000 f947 	bl	801362a <TIM_ITRx_SetConfig>
    break;
 801339c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	2201      	movs	r2, #1
 80133a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2200      	movs	r2, #0
 80133aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80133ae:	2300      	movs	r3, #0
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	3710      	adds	r7, #16
 80133b4:	46bd      	mov	sp, r7
 80133b6:	bd80      	pop	{r7, pc}

080133b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80133b8:	b480      	push	{r7}
 80133ba:	b083      	sub	sp, #12
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80133c0:	bf00      	nop
 80133c2:	370c      	adds	r7, #12
 80133c4:	46bd      	mov	sp, r7
 80133c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ca:	4770      	bx	lr

080133cc <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80133cc:	b480      	push	{r7}
 80133ce:	b083      	sub	sp, #12
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80133d4:	bf00      	nop
 80133d6:	370c      	adds	r7, #12
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr

080133e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80133e0:	b480      	push	{r7}
 80133e2:	b083      	sub	sp, #12
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80133e8:	bf00      	nop
 80133ea:	370c      	adds	r7, #12
 80133ec:	46bd      	mov	sp, r7
 80133ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f2:	4770      	bx	lr

080133f4 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80133f4:	b480      	push	{r7}
 80133f6:	b083      	sub	sp, #12
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80133fc:	bf00      	nop
 80133fe:	370c      	adds	r7, #12
 8013400:	46bd      	mov	sp, r7
 8013402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013406:	4770      	bx	lr

08013408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013408:	b480      	push	{r7}
 801340a:	b085      	sub	sp, #20
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8013412:	2300      	movs	r3, #0
 8013414:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	4a44      	ldr	r2, [pc, #272]	; (8013530 <TIM_Base_SetConfig+0x128>)
 8013420:	4293      	cmp	r3, r2
 8013422:	d013      	beq.n	801344c <TIM_Base_SetConfig+0x44>
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801342a:	d00f      	beq.n	801344c <TIM_Base_SetConfig+0x44>
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	4a41      	ldr	r2, [pc, #260]	; (8013534 <TIM_Base_SetConfig+0x12c>)
 8013430:	4293      	cmp	r3, r2
 8013432:	d00b      	beq.n	801344c <TIM_Base_SetConfig+0x44>
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	4a40      	ldr	r2, [pc, #256]	; (8013538 <TIM_Base_SetConfig+0x130>)
 8013438:	4293      	cmp	r3, r2
 801343a:	d007      	beq.n	801344c <TIM_Base_SetConfig+0x44>
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	4a3f      	ldr	r2, [pc, #252]	; (801353c <TIM_Base_SetConfig+0x134>)
 8013440:	4293      	cmp	r3, r2
 8013442:	d003      	beq.n	801344c <TIM_Base_SetConfig+0x44>
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	4a3e      	ldr	r2, [pc, #248]	; (8013540 <TIM_Base_SetConfig+0x138>)
 8013448:	4293      	cmp	r3, r2
 801344a:	d101      	bne.n	8013450 <TIM_Base_SetConfig+0x48>
 801344c:	2301      	movs	r3, #1
 801344e:	e000      	b.n	8013452 <TIM_Base_SetConfig+0x4a>
 8013450:	2300      	movs	r3, #0
 8013452:	2b00      	cmp	r3, #0
 8013454:	d008      	beq.n	8013468 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801345c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	685b      	ldr	r3, [r3, #4]
 8013462:	68fa      	ldr	r2, [r7, #12]
 8013464:	4313      	orrs	r3, r2
 8013466:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	4a31      	ldr	r2, [pc, #196]	; (8013530 <TIM_Base_SetConfig+0x128>)
 801346c:	4293      	cmp	r3, r2
 801346e:	d02b      	beq.n	80134c8 <TIM_Base_SetConfig+0xc0>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013476:	d027      	beq.n	80134c8 <TIM_Base_SetConfig+0xc0>
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	4a2e      	ldr	r2, [pc, #184]	; (8013534 <TIM_Base_SetConfig+0x12c>)
 801347c:	4293      	cmp	r3, r2
 801347e:	d023      	beq.n	80134c8 <TIM_Base_SetConfig+0xc0>
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	4a2d      	ldr	r2, [pc, #180]	; (8013538 <TIM_Base_SetConfig+0x130>)
 8013484:	4293      	cmp	r3, r2
 8013486:	d01f      	beq.n	80134c8 <TIM_Base_SetConfig+0xc0>
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	4a2c      	ldr	r2, [pc, #176]	; (801353c <TIM_Base_SetConfig+0x134>)
 801348c:	4293      	cmp	r3, r2
 801348e:	d01b      	beq.n	80134c8 <TIM_Base_SetConfig+0xc0>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	4a2b      	ldr	r2, [pc, #172]	; (8013540 <TIM_Base_SetConfig+0x138>)
 8013494:	4293      	cmp	r3, r2
 8013496:	d017      	beq.n	80134c8 <TIM_Base_SetConfig+0xc0>
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	4a2a      	ldr	r2, [pc, #168]	; (8013544 <TIM_Base_SetConfig+0x13c>)
 801349c:	4293      	cmp	r3, r2
 801349e:	d013      	beq.n	80134c8 <TIM_Base_SetConfig+0xc0>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	4a29      	ldr	r2, [pc, #164]	; (8013548 <TIM_Base_SetConfig+0x140>)
 80134a4:	4293      	cmp	r3, r2
 80134a6:	d00f      	beq.n	80134c8 <TIM_Base_SetConfig+0xc0>
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	4a28      	ldr	r2, [pc, #160]	; (801354c <TIM_Base_SetConfig+0x144>)
 80134ac:	4293      	cmp	r3, r2
 80134ae:	d00b      	beq.n	80134c8 <TIM_Base_SetConfig+0xc0>
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	4a27      	ldr	r2, [pc, #156]	; (8013550 <TIM_Base_SetConfig+0x148>)
 80134b4:	4293      	cmp	r3, r2
 80134b6:	d007      	beq.n	80134c8 <TIM_Base_SetConfig+0xc0>
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	4a26      	ldr	r2, [pc, #152]	; (8013554 <TIM_Base_SetConfig+0x14c>)
 80134bc:	4293      	cmp	r3, r2
 80134be:	d003      	beq.n	80134c8 <TIM_Base_SetConfig+0xc0>
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	4a25      	ldr	r2, [pc, #148]	; (8013558 <TIM_Base_SetConfig+0x150>)
 80134c4:	4293      	cmp	r3, r2
 80134c6:	d101      	bne.n	80134cc <TIM_Base_SetConfig+0xc4>
 80134c8:	2301      	movs	r3, #1
 80134ca:	e000      	b.n	80134ce <TIM_Base_SetConfig+0xc6>
 80134cc:	2300      	movs	r3, #0
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d008      	beq.n	80134e4 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80134d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	68db      	ldr	r3, [r3, #12]
 80134de:	68fa      	ldr	r2, [r7, #12]
 80134e0:	4313      	orrs	r3, r2
 80134e2:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	68fa      	ldr	r2, [r7, #12]
 80134e8:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	689a      	ldr	r2, [r3, #8]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	681a      	ldr	r2, [r3, #0]
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	4a0c      	ldr	r2, [pc, #48]	; (8013530 <TIM_Base_SetConfig+0x128>)
 80134fe:	4293      	cmp	r3, r2
 8013500:	d003      	beq.n	801350a <TIM_Base_SetConfig+0x102>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	4a0e      	ldr	r2, [pc, #56]	; (8013540 <TIM_Base_SetConfig+0x138>)
 8013506:	4293      	cmp	r3, r2
 8013508:	d101      	bne.n	801350e <TIM_Base_SetConfig+0x106>
 801350a:	2301      	movs	r3, #1
 801350c:	e000      	b.n	8013510 <TIM_Base_SetConfig+0x108>
 801350e:	2300      	movs	r3, #0
 8013510:	2b00      	cmp	r3, #0
 8013512:	d003      	beq.n	801351c <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	691a      	ldr	r2, [r3, #16]
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2201      	movs	r2, #1
 8013520:	615a      	str	r2, [r3, #20]
}
 8013522:	bf00      	nop
 8013524:	3714      	adds	r7, #20
 8013526:	46bd      	mov	sp, r7
 8013528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352c:	4770      	bx	lr
 801352e:	bf00      	nop
 8013530:	40010000 	.word	0x40010000
 8013534:	40000400 	.word	0x40000400
 8013538:	40000800 	.word	0x40000800
 801353c:	40000c00 	.word	0x40000c00
 8013540:	40010400 	.word	0x40010400
 8013544:	40014000 	.word	0x40014000
 8013548:	40014400 	.word	0x40014400
 801354c:	40014800 	.word	0x40014800
 8013550:	40001800 	.word	0x40001800
 8013554:	40001c00 	.word	0x40001c00
 8013558:	40002000 	.word	0x40002000

0801355c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801355c:	b480      	push	{r7}
 801355e:	b087      	sub	sp, #28
 8013560:	af00      	add	r7, sp, #0
 8013562:	60f8      	str	r0, [r7, #12]
 8013564:	60b9      	str	r1, [r7, #8]
 8013566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8013568:	2300      	movs	r3, #0
 801356a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 801356c:	2300      	movs	r3, #0
 801356e:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	6a1b      	ldr	r3, [r3, #32]
 8013574:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	6a1b      	ldr	r3, [r3, #32]
 801357a:	f023 0201 	bic.w	r2, r3, #1
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	699b      	ldr	r3, [r3, #24]
 8013586:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801358e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	011b      	lsls	r3, r3, #4
 8013594:	697a      	ldr	r2, [r7, #20]
 8013596:	4313      	orrs	r3, r2
 8013598:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	f023 030a 	bic.w	r3, r3, #10
 80135a0:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80135a2:	693a      	ldr	r2, [r7, #16]
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	4313      	orrs	r3, r2
 80135a8:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	697a      	ldr	r2, [r7, #20]
 80135ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	693a      	ldr	r2, [r7, #16]
 80135b4:	621a      	str	r2, [r3, #32]
}
 80135b6:	bf00      	nop
 80135b8:	371c      	adds	r7, #28
 80135ba:	46bd      	mov	sp, r7
 80135bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c0:	4770      	bx	lr

080135c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80135c2:	b480      	push	{r7}
 80135c4:	b087      	sub	sp, #28
 80135c6:	af00      	add	r7, sp, #0
 80135c8:	60f8      	str	r0, [r7, #12]
 80135ca:	60b9      	str	r1, [r7, #8]
 80135cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80135ce:	2300      	movs	r3, #0
 80135d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80135d2:	2300      	movs	r3, #0
 80135d4:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	6a1b      	ldr	r3, [r3, #32]
 80135da:	f023 0210 	bic.w	r2, r3, #16
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	699b      	ldr	r3, [r3, #24]
 80135e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	6a1b      	ldr	r3, [r3, #32]
 80135ec:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80135f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	031b      	lsls	r3, r3, #12
 80135fa:	697a      	ldr	r2, [r7, #20]
 80135fc:	4313      	orrs	r3, r2
 80135fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013606:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	011b      	lsls	r3, r3, #4
 801360c:	693a      	ldr	r2, [r7, #16]
 801360e:	4313      	orrs	r3, r2
 8013610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	697a      	ldr	r2, [r7, #20]
 8013616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	693a      	ldr	r2, [r7, #16]
 801361c:	621a      	str	r2, [r3, #32]
}
 801361e:	bf00      	nop
 8013620:	371c      	adds	r7, #28
 8013622:	46bd      	mov	sp, r7
 8013624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013628:	4770      	bx	lr

0801362a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 801362a:	b480      	push	{r7}
 801362c:	b085      	sub	sp, #20
 801362e:	af00      	add	r7, sp, #0
 8013630:	6078      	str	r0, [r7, #4]
 8013632:	460b      	mov	r3, r1
 8013634:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8013636:	2300      	movs	r3, #0
 8013638:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013646:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8013648:	887b      	ldrh	r3, [r7, #2]
 801364a:	f043 0307 	orr.w	r3, r3, #7
 801364e:	b29b      	uxth	r3, r3
 8013650:	461a      	mov	r2, r3
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	4313      	orrs	r3, r2
 8013656:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	68fa      	ldr	r2, [r7, #12]
 801365c:	609a      	str	r2, [r3, #8]
}
 801365e:	bf00      	nop
 8013660:	3714      	adds	r7, #20
 8013662:	46bd      	mov	sp, r7
 8013664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013668:	4770      	bx	lr

0801366a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801366a:	b480      	push	{r7}
 801366c:	b087      	sub	sp, #28
 801366e:	af00      	add	r7, sp, #0
 8013670:	60f8      	str	r0, [r7, #12]
 8013672:	60b9      	str	r1, [r7, #8]
 8013674:	607a      	str	r2, [r7, #4]
 8013676:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8013678:	2300      	movs	r3, #0
 801367a:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	689b      	ldr	r3, [r3, #8]
 8013680:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013682:	697b      	ldr	r3, [r7, #20]
 8013684:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013688:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	021a      	lsls	r2, r3, #8
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	431a      	orrs	r2, r3
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	4313      	orrs	r3, r2
 8013696:	697a      	ldr	r2, [r7, #20]
 8013698:	4313      	orrs	r3, r2
 801369a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	697a      	ldr	r2, [r7, #20]
 80136a0:	609a      	str	r2, [r3, #8]
} 
 80136a2:	bf00      	nop
 80136a4:	371c      	adds	r7, #28
 80136a6:	46bd      	mov	sp, r7
 80136a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ac:	4770      	bx	lr

080136ae <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80136ae:	b480      	push	{r7}
 80136b0:	b083      	sub	sp, #12
 80136b2:	af00      	add	r7, sp, #0
 80136b4:	6078      	str	r0, [r7, #4]
 80136b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80136be:	2b01      	cmp	r3, #1
 80136c0:	d101      	bne.n	80136c6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80136c2:	2302      	movs	r3, #2
 80136c4:	e032      	b.n	801372c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2201      	movs	r2, #1
 80136ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2202      	movs	r2, #2
 80136d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	687a      	ldr	r2, [r7, #4]
 80136dc:	6812      	ldr	r2, [r2, #0]
 80136de:	6852      	ldr	r2, [r2, #4]
 80136e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80136e4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	687a      	ldr	r2, [r7, #4]
 80136ec:	6812      	ldr	r2, [r2, #0]
 80136ee:	6851      	ldr	r1, [r2, #4]
 80136f0:	683a      	ldr	r2, [r7, #0]
 80136f2:	6812      	ldr	r2, [r2, #0]
 80136f4:	430a      	orrs	r2, r1
 80136f6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	687a      	ldr	r2, [r7, #4]
 80136fe:	6812      	ldr	r2, [r2, #0]
 8013700:	6892      	ldr	r2, [r2, #8]
 8013702:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013706:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	687a      	ldr	r2, [r7, #4]
 801370e:	6812      	ldr	r2, [r2, #0]
 8013710:	6891      	ldr	r1, [r2, #8]
 8013712:	683a      	ldr	r2, [r7, #0]
 8013714:	6852      	ldr	r2, [r2, #4]
 8013716:	430a      	orrs	r2, r1
 8013718:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	2201      	movs	r2, #1
 801371e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2200      	movs	r2, #0
 8013726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 801372a:	2300      	movs	r3, #0
} 
 801372c:	4618      	mov	r0, r3
 801372e:	370c      	adds	r7, #12
 8013730:	46bd      	mov	sp, r7
 8013732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013736:	4770      	bx	lr

08013738 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8013738:	b480      	push	{r7}
 801373a:	b083      	sub	sp, #12
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8013740:	bf00      	nop
 8013742:	370c      	adds	r7, #12
 8013744:	46bd      	mov	sp, r7
 8013746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374a:	4770      	bx	lr

0801374c <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801374c:	b480      	push	{r7}
 801374e:	b083      	sub	sp, #12
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013754:	bf00      	nop
 8013756:	370c      	adds	r7, #12
 8013758:	46bd      	mov	sp, r7
 801375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375e:	4770      	bx	lr

08013760 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b082      	sub	sp, #8
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d101      	bne.n	8013772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801376e:	2301      	movs	r3, #1
 8013770:	e03f      	b.n	80137f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013778:	b2db      	uxtb	r3, r3
 801377a:	2b00      	cmp	r3, #0
 801377c:	d106      	bne.n	801378c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2200      	movs	r2, #0
 8013782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f014 fa3a 	bl	8027c00 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2224      	movs	r2, #36	; 0x24
 8013790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	687a      	ldr	r2, [r7, #4]
 801379a:	6812      	ldr	r2, [r2, #0]
 801379c:	68d2      	ldr	r2, [r2, #12]
 801379e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80137a2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f000 fba1 	bl	8013eec <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	6812      	ldr	r2, [r2, #0]
 80137b2:	6912      	ldr	r2, [r2, #16]
 80137b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80137b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	6812      	ldr	r2, [r2, #0]
 80137c2:	6952      	ldr	r2, [r2, #20]
 80137c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80137c8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	687a      	ldr	r2, [r7, #4]
 80137d0:	6812      	ldr	r2, [r2, #0]
 80137d2:	68d2      	ldr	r2, [r2, #12]
 80137d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80137d8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2200      	movs	r2, #0
 80137de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2220      	movs	r2, #32
 80137e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2220      	movs	r2, #32
 80137ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80137f0:	2300      	movs	r3, #0
}
 80137f2:	4618      	mov	r0, r3
 80137f4:	3708      	adds	r7, #8
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}

080137fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80137fa:	b480      	push	{r7}
 80137fc:	b085      	sub	sp, #20
 80137fe:	af00      	add	r7, sp, #0
 8013800:	60f8      	str	r0, [r7, #12]
 8013802:	60b9      	str	r1, [r7, #8]
 8013804:	4613      	mov	r3, r2
 8013806:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801380e:	b2db      	uxtb	r3, r3
 8013810:	2b20      	cmp	r3, #32
 8013812:	d138      	bne.n	8013886 <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d002      	beq.n	8013820 <HAL_UART_Receive_IT+0x26>
 801381a:	88fb      	ldrh	r3, [r7, #6]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d101      	bne.n	8013824 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8013820:	2301      	movs	r3, #1
 8013822:	e031      	b.n	8013888 <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801382a:	2b01      	cmp	r3, #1
 801382c:	d101      	bne.n	8013832 <HAL_UART_Receive_IT+0x38>
 801382e:	2302      	movs	r3, #2
 8013830:	e02a      	b.n	8013888 <HAL_UART_Receive_IT+0x8e>
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	2201      	movs	r2, #1
 8013836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	68ba      	ldr	r2, [r7, #8]
 801383e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	88fa      	ldrh	r2, [r7, #6]
 8013844:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	88fa      	ldrh	r2, [r7, #6]
 801384a:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	2200      	movs	r2, #0
 8013850:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	2222      	movs	r2, #34	; 0x22
 8013856:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	2200      	movs	r2, #0
 801385e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	68fa      	ldr	r2, [r7, #12]
 8013868:	6812      	ldr	r2, [r2, #0]
 801386a:	6952      	ldr	r2, [r2, #20]
 801386c:	f042 0201 	orr.w	r2, r2, #1
 8013870:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	68fa      	ldr	r2, [r7, #12]
 8013878:	6812      	ldr	r2, [r2, #0]
 801387a:	68d2      	ldr	r2, [r2, #12]
 801387c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8013880:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8013882:	2300      	movs	r3, #0
 8013884:	e000      	b.n	8013888 <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 8013886:	2302      	movs	r3, #2
  }
}
 8013888:	4618      	mov	r0, r3
 801388a:	3714      	adds	r7, #20
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr

08013894 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b086      	sub	sp, #24
 8013898:	af00      	add	r7, sp, #0
 801389a:	60f8      	str	r0, [r7, #12]
 801389c:	60b9      	str	r1, [r7, #8]
 801389e:	4613      	mov	r3, r2
 80138a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80138a8:	b2db      	uxtb	r3, r3
 80138aa:	2b20      	cmp	r3, #32
 80138ac:	d153      	bne.n	8013956 <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d002      	beq.n	80138ba <HAL_UART_Transmit_DMA+0x26>
 80138b4:	88fb      	ldrh	r3, [r7, #6]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d101      	bne.n	80138be <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80138ba:	2301      	movs	r3, #1
 80138bc:	e04c      	b.n	8013958 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d101      	bne.n	80138cc <HAL_UART_Transmit_DMA+0x38>
 80138c8:	2302      	movs	r3, #2
 80138ca:	e045      	b.n	8013958 <HAL_UART_Transmit_DMA+0xc4>
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	2201      	movs	r2, #1
 80138d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80138d4:	68ba      	ldr	r2, [r7, #8]
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	88fa      	ldrh	r2, [r7, #6]
 80138de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	88fa      	ldrh	r2, [r7, #6]
 80138e4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	2200      	movs	r2, #0
 80138ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	2221      	movs	r2, #33	; 0x21
 80138f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138f8:	4a19      	ldr	r2, [pc, #100]	; (8013960 <HAL_UART_Transmit_DMA+0xcc>)
 80138fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013900:	4a18      	ldr	r2, [pc, #96]	; (8013964 <HAL_UART_Transmit_DMA+0xd0>)
 8013902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013908:	4a17      	ldr	r2, [pc, #92]	; (8013968 <HAL_UART_Transmit_DMA+0xd4>)
 801390a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013910:	2200      	movs	r2, #0
 8013912:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 8013914:	f107 0308 	add.w	r3, r7, #8
 8013918:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	6819      	ldr	r1, [r3, #0]
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	3304      	adds	r3, #4
 8013928:	461a      	mov	r2, r3
 801392a:	88fb      	ldrh	r3, [r7, #6]
 801392c:	f7fc ff1e 	bl	801076c <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013938:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	2200      	movs	r2, #0
 801393e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	68fa      	ldr	r2, [r7, #12]
 8013948:	6812      	ldr	r2, [r2, #0]
 801394a:	6952      	ldr	r2, [r2, #20]
 801394c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013950:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8013952:	2300      	movs	r3, #0
 8013954:	e000      	b.n	8013958 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8013956:	2302      	movs	r3, #2
  }
}
 8013958:	4618      	mov	r0, r3
 801395a:	3718      	adds	r7, #24
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}
 8013960:	08013b8d 	.word	0x08013b8d
 8013964:	08013bdf 	.word	0x08013bdf
 8013968:	08013bfb 	.word	0x08013bfb

0801396c <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b088      	sub	sp, #32
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	695b      	ldr	r3, [r3, #20]
 801398a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 801398c:	2300      	movs	r3, #0
 801398e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8013990:	2300      	movs	r3, #0
 8013992:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	f003 030f 	and.w	r3, r3, #15
 801399a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d10d      	bne.n	80139be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80139a2:	69fb      	ldr	r3, [r7, #28]
 80139a4:	f003 0320 	and.w	r3, r3, #32
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d008      	beq.n	80139be <HAL_UART_IRQHandler+0x52>
 80139ac:	69bb      	ldr	r3, [r7, #24]
 80139ae:	f003 0320 	and.w	r3, r3, #32
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d003      	beq.n	80139be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f000 fa1e 	bl	8013df8 <UART_Receive_IT>
      return;
 80139bc:	e0cc      	b.n	8013b58 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	f000 80ab 	beq.w	8013b1c <HAL_UART_IRQHandler+0x1b0>
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	f003 0301 	and.w	r3, r3, #1
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d105      	bne.n	80139dc <HAL_UART_IRQHandler+0x70>
 80139d0:	69bb      	ldr	r3, [r7, #24]
 80139d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	f000 80a0 	beq.w	8013b1c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80139dc:	69fb      	ldr	r3, [r7, #28]
 80139de:	f003 0301 	and.w	r3, r3, #1
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d00a      	beq.n	80139fc <HAL_UART_IRQHandler+0x90>
 80139e6:	69bb      	ldr	r3, [r7, #24]
 80139e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d005      	beq.n	80139fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139f4:	f043 0201 	orr.w	r2, r3, #1
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	f003 0304 	and.w	r3, r3, #4
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d00a      	beq.n	8013a1c <HAL_UART_IRQHandler+0xb0>
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	f003 0301 	and.w	r3, r3, #1
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d005      	beq.n	8013a1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a14:	f043 0202 	orr.w	r2, r3, #2
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013a1c:	69fb      	ldr	r3, [r7, #28]
 8013a1e:	f003 0302 	and.w	r3, r3, #2
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d00a      	beq.n	8013a3c <HAL_UART_IRQHandler+0xd0>
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	f003 0301 	and.w	r3, r3, #1
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d005      	beq.n	8013a3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a34:	f043 0204 	orr.w	r2, r3, #4
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	f003 0308 	and.w	r3, r3, #8
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d00a      	beq.n	8013a5c <HAL_UART_IRQHandler+0xf0>
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	f003 0301 	and.w	r3, r3, #1
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d005      	beq.n	8013a5c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a54:	f043 0208 	orr.w	r2, r3, #8
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d078      	beq.n	8013b56 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013a64:	69fb      	ldr	r3, [r7, #28]
 8013a66:	f003 0320 	and.w	r3, r3, #32
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d007      	beq.n	8013a7e <HAL_UART_IRQHandler+0x112>
 8013a6e:	69bb      	ldr	r3, [r7, #24]
 8013a70:	f003 0320 	and.w	r3, r3, #32
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d002      	beq.n	8013a7e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f000 f9bd 	bl	8013df8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	695b      	ldr	r3, [r3, #20]
 8013a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	bf14      	ite	ne
 8013a8c:	2301      	movne	r3, #1
 8013a8e:	2300      	moveq	r3, #0
 8013a90:	b2db      	uxtb	r3, r3
 8013a92:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a98:	f003 0308 	and.w	r3, r3, #8
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d102      	bne.n	8013aa6 <HAL_UART_IRQHandler+0x13a>
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d031      	beq.n	8013b0a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f000 f907 	bl	8013cba <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	695b      	ldr	r3, [r3, #20]
 8013ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d023      	beq.n	8013b02 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	687a      	ldr	r2, [r7, #4]
 8013ac0:	6812      	ldr	r2, [r2, #0]
 8013ac2:	6952      	ldr	r2, [r2, #20]
 8013ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013ac8:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d013      	beq.n	8013afa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ad6:	4a22      	ldr	r2, [pc, #136]	; (8013b60 <HAL_UART_IRQHandler+0x1f4>)
 8013ad8:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7fc fea4 	bl	801082c <HAL_DMA_Abort_IT>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d016      	beq.n	8013b18 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013af4:	4610      	mov	r0, r2
 8013af6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013af8:	e00e      	b.n	8013b18 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f000 f83c 	bl	8013b78 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013b00:	e00a      	b.n	8013b18 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f000 f838 	bl	8013b78 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013b08:	e006      	b.n	8013b18 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8013b0a:	6878      	ldr	r0, [r7, #4]
 8013b0c:	f000 f834 	bl	8013b78 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	2200      	movs	r2, #0
 8013b14:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8013b16:	e01e      	b.n	8013b56 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013b18:	bf00      	nop
    return;
 8013b1a:	e01c      	b.n	8013b56 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8013b1c:	69fb      	ldr	r3, [r7, #28]
 8013b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d008      	beq.n	8013b38 <HAL_UART_IRQHandler+0x1cc>
 8013b26:	69bb      	ldr	r3, [r7, #24]
 8013b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d003      	beq.n	8013b38 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f000 f8f4 	bl	8013d1e <UART_Transmit_IT>
    return;
 8013b36:	e00f      	b.n	8013b58 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8013b38:	69fb      	ldr	r3, [r7, #28]
 8013b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d00a      	beq.n	8013b58 <HAL_UART_IRQHandler+0x1ec>
 8013b42:	69bb      	ldr	r3, [r7, #24]
 8013b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d005      	beq.n	8013b58 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f000 f93b 	bl	8013dc8 <UART_EndTransmit_IT>
    return;
 8013b52:	bf00      	nop
 8013b54:	e000      	b.n	8013b58 <HAL_UART_IRQHandler+0x1ec>
    return;
 8013b56:	bf00      	nop
  }
}
 8013b58:	3720      	adds	r7, #32
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}
 8013b5e:	bf00      	nop
 8013b60:	08013cf7 	.word	0x08013cf7

08013b64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013b64:	b480      	push	{r7}
 8013b66:	b083      	sub	sp, #12
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8013b6c:	bf00      	nop
 8013b6e:	370c      	adds	r7, #12
 8013b70:	46bd      	mov	sp, r7
 8013b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b76:	4770      	bx	lr

08013b78 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013b78:	b480      	push	{r7}
 8013b7a:	b083      	sub	sp, #12
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8013b80:	bf00      	nop
 8013b82:	370c      	adds	r7, #12
 8013b84:	46bd      	mov	sp, r7
 8013b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8a:	4770      	bx	lr

08013b8c <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b084      	sub	sp, #16
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b98:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d113      	bne.n	8013bd0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	2200      	movs	r2, #0
 8013bac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	68fa      	ldr	r2, [r7, #12]
 8013bb4:	6812      	ldr	r2, [r2, #0]
 8013bb6:	6952      	ldr	r2, [r2, #20]
 8013bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013bbc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	68fa      	ldr	r2, [r7, #12]
 8013bc4:	6812      	ldr	r2, [r2, #0]
 8013bc6:	68d2      	ldr	r2, [r2, #12]
 8013bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013bcc:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 8013bce:	e002      	b.n	8013bd6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8013bd0:	68f8      	ldr	r0, [r7, #12]
 8013bd2:	f012 faa1 	bl	8026118 <HAL_UART_TxCpltCallback>
}
 8013bd6:	bf00      	nop
 8013bd8:	3710      	adds	r7, #16
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}

08013bde <UART_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013bde:	b580      	push	{r7, lr}
 8013be0:	b084      	sub	sp, #16
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bea:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8013bec:	68f8      	ldr	r0, [r7, #12]
 8013bee:	f7ff ffb9 	bl	8013b64 <HAL_UART_TxHalfCpltCallback>
}
 8013bf2:	bf00      	nop
 8013bf4:	3710      	adds	r7, #16
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}

08013bfa <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013bfa:	b580      	push	{r7, lr}
 8013bfc:	b084      	sub	sp, #16
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8013c02:	2300      	movs	r3, #0
 8013c04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	695b      	ldr	r3, [r3, #20]
 8013c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	bf14      	ite	ne
 8013c1a:	2301      	movne	r3, #1
 8013c1c:	2300      	moveq	r3, #0
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013c28:	b2db      	uxtb	r3, r3
 8013c2a:	2b21      	cmp	r3, #33	; 0x21
 8013c2c:	d108      	bne.n	8013c40 <UART_DMAError+0x46>
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d005      	beq.n	8013c40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	2200      	movs	r2, #0
 8013c38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8013c3a:	68b8      	ldr	r0, [r7, #8]
 8013c3c:	f000 f827 	bl	8013c8e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	695b      	ldr	r3, [r3, #20]
 8013c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	bf14      	ite	ne
 8013c4e:	2301      	movne	r3, #1
 8013c50:	2300      	moveq	r3, #0
 8013c52:	b2db      	uxtb	r3, r3
 8013c54:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	2b22      	cmp	r3, #34	; 0x22
 8013c60:	d108      	bne.n	8013c74 <UART_DMAError+0x7a>
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d005      	beq.n	8013c74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8013c6e:	68b8      	ldr	r0, [r7, #8]
 8013c70:	f000 f823 	bl	8013cba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c78:	f043 0210 	orr.w	r2, r3, #16
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8013c80:	68b8      	ldr	r0, [r7, #8]
 8013c82:	f7ff ff79 	bl	8013b78 <HAL_UART_ErrorCallback>
}
 8013c86:	bf00      	nop
 8013c88:	3710      	adds	r7, #16
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}

08013c8e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013c8e:	b480      	push	{r7}
 8013c90:	b083      	sub	sp, #12
 8013c92:	af00      	add	r7, sp, #0
 8013c94:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	687a      	ldr	r2, [r7, #4]
 8013c9c:	6812      	ldr	r2, [r2, #0]
 8013c9e:	68d2      	ldr	r2, [r2, #12]
 8013ca0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8013ca4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2220      	movs	r2, #32
 8013caa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8013cae:	bf00      	nop
 8013cb0:	370c      	adds	r7, #12
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb8:	4770      	bx	lr

08013cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013cba:	b480      	push	{r7}
 8013cbc:	b083      	sub	sp, #12
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	687a      	ldr	r2, [r7, #4]
 8013cc8:	6812      	ldr	r2, [r2, #0]
 8013cca:	68d2      	ldr	r2, [r2, #12]
 8013ccc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013cd0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	687a      	ldr	r2, [r7, #4]
 8013cd8:	6812      	ldr	r2, [r2, #0]
 8013cda:	6952      	ldr	r2, [r2, #20]
 8013cdc:	f022 0201 	bic.w	r2, r2, #1
 8013ce0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2220      	movs	r2, #32
 8013ce6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8013cea:	bf00      	nop
 8013cec:	370c      	adds	r7, #12
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf4:	4770      	bx	lr

08013cf6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013cf6:	b580      	push	{r7, lr}
 8013cf8:	b084      	sub	sp, #16
 8013cfa:	af00      	add	r7, sp, #0
 8013cfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	2200      	movs	r2, #0
 8013d08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8013d10:	68f8      	ldr	r0, [r7, #12]
 8013d12:	f7ff ff31 	bl	8013b78 <HAL_UART_ErrorCallback>
}
 8013d16:	bf00      	nop
 8013d18:	3710      	adds	r7, #16
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}

08013d1e <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8013d1e:	b480      	push	{r7}
 8013d20:	b085      	sub	sp, #20
 8013d22:	af00      	add	r7, sp, #0
 8013d24:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013d2c:	b2db      	uxtb	r3, r3
 8013d2e:	2b21      	cmp	r3, #33	; 0x21
 8013d30:	d143      	bne.n	8013dba <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	689b      	ldr	r3, [r3, #8]
 8013d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013d3a:	d119      	bne.n	8013d70 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6a1b      	ldr	r3, [r3, #32]
 8013d40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	68fa      	ldr	r2, [r7, #12]
 8013d48:	8812      	ldrh	r2, [r2, #0]
 8013d4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013d4e:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	691b      	ldr	r3, [r3, #16]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d105      	bne.n	8013d64 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6a1b      	ldr	r3, [r3, #32]
 8013d5c:	1c9a      	adds	r2, r3, #2
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	621a      	str	r2, [r3, #32]
 8013d62:	e00e      	b.n	8013d82 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6a1b      	ldr	r3, [r3, #32]
 8013d68:	1c5a      	adds	r2, r3, #1
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	621a      	str	r2, [r3, #32]
 8013d6e:	e008      	b.n	8013d82 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	6a1b      	ldr	r3, [r3, #32]
 8013d78:	1c58      	adds	r0, r3, #1
 8013d7a:	6879      	ldr	r1, [r7, #4]
 8013d7c:	6208      	str	r0, [r1, #32]
 8013d7e:	781b      	ldrb	r3, [r3, #0]
 8013d80:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013d86:	b29b      	uxth	r3, r3
 8013d88:	3b01      	subs	r3, #1
 8013d8a:	b29b      	uxth	r3, r3
 8013d8c:	687a      	ldr	r2, [r7, #4]
 8013d8e:	4619      	mov	r1, r3
 8013d90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d10f      	bne.n	8013db6 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	687a      	ldr	r2, [r7, #4]
 8013d9c:	6812      	ldr	r2, [r2, #0]
 8013d9e:	68d2      	ldr	r2, [r2, #12]
 8013da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013da4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	687a      	ldr	r2, [r7, #4]
 8013dac:	6812      	ldr	r2, [r2, #0]
 8013dae:	68d2      	ldr	r2, [r2, #12]
 8013db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013db4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8013db6:	2300      	movs	r3, #0
 8013db8:	e000      	b.n	8013dbc <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8013dba:	2302      	movs	r3, #2
  }
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3714      	adds	r7, #20
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc6:	4770      	bx	lr

08013dc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b082      	sub	sp, #8
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	687a      	ldr	r2, [r7, #4]
 8013dd6:	6812      	ldr	r2, [r2, #0]
 8013dd8:	68d2      	ldr	r2, [r2, #12]
 8013dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013dde:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2220      	movs	r2, #32
 8013de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f012 f995 	bl	8026118 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8013dee:	2300      	movs	r3, #0
}
 8013df0:	4618      	mov	r0, r3
 8013df2:	3708      	adds	r7, #8
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b084      	sub	sp, #16
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013e06:	b2db      	uxtb	r3, r3
 8013e08:	2b22      	cmp	r3, #34	; 0x22
 8013e0a:	d169      	bne.n	8013ee0 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	689b      	ldr	r3, [r3, #8]
 8013e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e14:	d123      	bne.n	8013e5e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e1a:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	691b      	ldr	r3, [r3, #16]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d10e      	bne.n	8013e42 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e30:	b29a      	uxth	r2, r3
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e3a:	1c9a      	adds	r2, r3, #2
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8013e40:	e029      	b.n	8013e96 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	685b      	ldr	r3, [r3, #4]
 8013e48:	b29b      	uxth	r3, r3
 8013e4a:	b2db      	uxtb	r3, r3
 8013e4c:	b29a      	uxth	r2, r3
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e56:	1c5a      	adds	r2, r3, #1
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8013e5c:	e01b      	b.n	8013e96 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	691b      	ldr	r3, [r3, #16]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d10a      	bne.n	8013e7c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e6a:	1c59      	adds	r1, r3, #1
 8013e6c:	687a      	ldr	r2, [r7, #4]
 8013e6e:	6291      	str	r1, [r2, #40]	; 0x28
 8013e70:	687a      	ldr	r2, [r7, #4]
 8013e72:	6812      	ldr	r2, [r2, #0]
 8013e74:	6852      	ldr	r2, [r2, #4]
 8013e76:	b2d2      	uxtb	r2, r2
 8013e78:	701a      	strb	r2, [r3, #0]
 8013e7a:	e00c      	b.n	8013e96 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e80:	1c59      	adds	r1, r3, #1
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	6291      	str	r1, [r2, #40]	; 0x28
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	6812      	ldr	r2, [r2, #0]
 8013e8a:	6852      	ldr	r2, [r2, #4]
 8013e8c:	b2d2      	uxtb	r2, r2
 8013e8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013e92:	b2d2      	uxtb	r2, r2
 8013e94:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	3b01      	subs	r3, #1
 8013e9e:	b29b      	uxth	r3, r3
 8013ea0:	687a      	ldr	r2, [r7, #4]
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d118      	bne.n	8013edc <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	687a      	ldr	r2, [r7, #4]
 8013eb0:	6812      	ldr	r2, [r2, #0]
 8013eb2:	68d2      	ldr	r2, [r2, #12]
 8013eb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013eb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	687a      	ldr	r2, [r7, #4]
 8013ec0:	6812      	ldr	r2, [r2, #0]
 8013ec2:	6952      	ldr	r2, [r2, #20]
 8013ec4:	f022 0201 	bic.w	r2, r2, #1
 8013ec8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2220      	movs	r2, #32
 8013ece:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f012 f8fa 	bl	80260cc <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	e002      	b.n	8013ee2 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8013edc:	2300      	movs	r3, #0
 8013ede:	e000      	b.n	8013ee2 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8013ee0:	2302      	movs	r3, #2
  }
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3710      	adds	r7, #16
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}
	...

08013eec <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013eee:	b085      	sub	sp, #20
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	691b      	ldr	r3, [r3, #16]
 8013efe:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8013f06:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	68fa      	ldr	r2, [r7, #12]
 8013f0e:	4313      	orrs	r3, r2
 8013f10:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	68fa      	ldr	r2, [r7, #12]
 8013f18:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	68db      	ldr	r3, [r3, #12]
 8013f20:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8013f28:	f023 030c 	bic.w	r3, r3, #12
 8013f2c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	689a      	ldr	r2, [r3, #8]
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	691b      	ldr	r3, [r3, #16]
 8013f36:	431a      	orrs	r2, r3
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	695b      	ldr	r3, [r3, #20]
 8013f3c:	431a      	orrs	r2, r3
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	69db      	ldr	r3, [r3, #28]
 8013f42:	4313      	orrs	r3, r2
 8013f44:	68fa      	ldr	r2, [r7, #12]
 8013f46:	4313      	orrs	r3, r2
 8013f48:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	68fa      	ldr	r2, [r7, #12]
 8013f50:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	695b      	ldr	r3, [r3, #20]
 8013f58:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013f60:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	699b      	ldr	r3, [r3, #24]
 8013f66:	68fa      	ldr	r2, [r7, #12]
 8013f68:	4313      	orrs	r3, r2
 8013f6a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	68fa      	ldr	r2, [r7, #12]
 8013f72:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	69db      	ldr	r3, [r3, #28]
 8013f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013f7c:	f040 80e4 	bne.w	8014148 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	4aab      	ldr	r2, [pc, #684]	; (8014234 <UART_SetConfig+0x348>)
 8013f86:	4293      	cmp	r3, r2
 8013f88:	d004      	beq.n	8013f94 <UART_SetConfig+0xa8>
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	4aaa      	ldr	r2, [pc, #680]	; (8014238 <UART_SetConfig+0x34c>)
 8013f90:	4293      	cmp	r3, r2
 8013f92:	d16c      	bne.n	801406e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681c      	ldr	r4, [r3, #0]
 8013f98:	f7fe ff74 	bl	8012e84 <HAL_RCC_GetPCLK2Freq>
 8013f9c:	4602      	mov	r2, r0
 8013f9e:	4613      	mov	r3, r2
 8013fa0:	009b      	lsls	r3, r3, #2
 8013fa2:	4413      	add	r3, r2
 8013fa4:	009a      	lsls	r2, r3, #2
 8013fa6:	441a      	add	r2, r3
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	685b      	ldr	r3, [r3, #4]
 8013fac:	005b      	lsls	r3, r3, #1
 8013fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8013fb2:	4aa2      	ldr	r2, [pc, #648]	; (801423c <UART_SetConfig+0x350>)
 8013fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8013fb8:	095b      	lsrs	r3, r3, #5
 8013fba:	011d      	lsls	r5, r3, #4
 8013fbc:	f7fe ff62 	bl	8012e84 <HAL_RCC_GetPCLK2Freq>
 8013fc0:	4602      	mov	r2, r0
 8013fc2:	4613      	mov	r3, r2
 8013fc4:	009b      	lsls	r3, r3, #2
 8013fc6:	4413      	add	r3, r2
 8013fc8:	009a      	lsls	r2, r3, #2
 8013fca:	441a      	add	r2, r3
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	685b      	ldr	r3, [r3, #4]
 8013fd0:	005b      	lsls	r3, r3, #1
 8013fd2:	fbb2 f6f3 	udiv	r6, r2, r3
 8013fd6:	f7fe ff55 	bl	8012e84 <HAL_RCC_GetPCLK2Freq>
 8013fda:	4602      	mov	r2, r0
 8013fdc:	4613      	mov	r3, r2
 8013fde:	009b      	lsls	r3, r3, #2
 8013fe0:	4413      	add	r3, r2
 8013fe2:	009a      	lsls	r2, r3, #2
 8013fe4:	441a      	add	r2, r3
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	685b      	ldr	r3, [r3, #4]
 8013fea:	005b      	lsls	r3, r3, #1
 8013fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ff0:	4a92      	ldr	r2, [pc, #584]	; (801423c <UART_SetConfig+0x350>)
 8013ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8013ff6:	095b      	lsrs	r3, r3, #5
 8013ff8:	2264      	movs	r2, #100	; 0x64
 8013ffa:	fb02 f303 	mul.w	r3, r2, r3
 8013ffe:	1af3      	subs	r3, r6, r3
 8014000:	00db      	lsls	r3, r3, #3
 8014002:	3332      	adds	r3, #50	; 0x32
 8014004:	4a8d      	ldr	r2, [pc, #564]	; (801423c <UART_SetConfig+0x350>)
 8014006:	fba2 2303 	umull	r2, r3, r2, r3
 801400a:	095b      	lsrs	r3, r3, #5
 801400c:	005b      	lsls	r3, r3, #1
 801400e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014012:	441d      	add	r5, r3
 8014014:	f7fe ff36 	bl	8012e84 <HAL_RCC_GetPCLK2Freq>
 8014018:	4602      	mov	r2, r0
 801401a:	4613      	mov	r3, r2
 801401c:	009b      	lsls	r3, r3, #2
 801401e:	4413      	add	r3, r2
 8014020:	009a      	lsls	r2, r3, #2
 8014022:	441a      	add	r2, r3
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	005b      	lsls	r3, r3, #1
 801402a:	fbb2 f6f3 	udiv	r6, r2, r3
 801402e:	f7fe ff29 	bl	8012e84 <HAL_RCC_GetPCLK2Freq>
 8014032:	4602      	mov	r2, r0
 8014034:	4613      	mov	r3, r2
 8014036:	009b      	lsls	r3, r3, #2
 8014038:	4413      	add	r3, r2
 801403a:	009a      	lsls	r2, r3, #2
 801403c:	441a      	add	r2, r3
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	685b      	ldr	r3, [r3, #4]
 8014042:	005b      	lsls	r3, r3, #1
 8014044:	fbb2 f3f3 	udiv	r3, r2, r3
 8014048:	4a7c      	ldr	r2, [pc, #496]	; (801423c <UART_SetConfig+0x350>)
 801404a:	fba2 2303 	umull	r2, r3, r2, r3
 801404e:	095b      	lsrs	r3, r3, #5
 8014050:	2264      	movs	r2, #100	; 0x64
 8014052:	fb02 f303 	mul.w	r3, r2, r3
 8014056:	1af3      	subs	r3, r6, r3
 8014058:	00db      	lsls	r3, r3, #3
 801405a:	3332      	adds	r3, #50	; 0x32
 801405c:	4a77      	ldr	r2, [pc, #476]	; (801423c <UART_SetConfig+0x350>)
 801405e:	fba2 2303 	umull	r2, r3, r2, r3
 8014062:	095b      	lsrs	r3, r3, #5
 8014064:	f003 0307 	and.w	r3, r3, #7
 8014068:	442b      	add	r3, r5
 801406a:	60a3      	str	r3, [r4, #8]
 801406c:	e154      	b.n	8014318 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681c      	ldr	r4, [r3, #0]
 8014072:	f7fe fef3 	bl	8012e5c <HAL_RCC_GetPCLK1Freq>
 8014076:	4602      	mov	r2, r0
 8014078:	4613      	mov	r3, r2
 801407a:	009b      	lsls	r3, r3, #2
 801407c:	4413      	add	r3, r2
 801407e:	009a      	lsls	r2, r3, #2
 8014080:	441a      	add	r2, r3
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	685b      	ldr	r3, [r3, #4]
 8014086:	005b      	lsls	r3, r3, #1
 8014088:	fbb2 f3f3 	udiv	r3, r2, r3
 801408c:	4a6b      	ldr	r2, [pc, #428]	; (801423c <UART_SetConfig+0x350>)
 801408e:	fba2 2303 	umull	r2, r3, r2, r3
 8014092:	095b      	lsrs	r3, r3, #5
 8014094:	011d      	lsls	r5, r3, #4
 8014096:	f7fe fee1 	bl	8012e5c <HAL_RCC_GetPCLK1Freq>
 801409a:	4602      	mov	r2, r0
 801409c:	4613      	mov	r3, r2
 801409e:	009b      	lsls	r3, r3, #2
 80140a0:	4413      	add	r3, r2
 80140a2:	009a      	lsls	r2, r3, #2
 80140a4:	441a      	add	r2, r3
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	685b      	ldr	r3, [r3, #4]
 80140aa:	005b      	lsls	r3, r3, #1
 80140ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80140b0:	f7fe fed4 	bl	8012e5c <HAL_RCC_GetPCLK1Freq>
 80140b4:	4602      	mov	r2, r0
 80140b6:	4613      	mov	r3, r2
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	4413      	add	r3, r2
 80140bc:	009a      	lsls	r2, r3, #2
 80140be:	441a      	add	r2, r3
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	005b      	lsls	r3, r3, #1
 80140c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80140ca:	4a5c      	ldr	r2, [pc, #368]	; (801423c <UART_SetConfig+0x350>)
 80140cc:	fba2 2303 	umull	r2, r3, r2, r3
 80140d0:	095b      	lsrs	r3, r3, #5
 80140d2:	2264      	movs	r2, #100	; 0x64
 80140d4:	fb02 f303 	mul.w	r3, r2, r3
 80140d8:	1af3      	subs	r3, r6, r3
 80140da:	00db      	lsls	r3, r3, #3
 80140dc:	3332      	adds	r3, #50	; 0x32
 80140de:	4a57      	ldr	r2, [pc, #348]	; (801423c <UART_SetConfig+0x350>)
 80140e0:	fba2 2303 	umull	r2, r3, r2, r3
 80140e4:	095b      	lsrs	r3, r3, #5
 80140e6:	005b      	lsls	r3, r3, #1
 80140e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80140ec:	441d      	add	r5, r3
 80140ee:	f7fe feb5 	bl	8012e5c <HAL_RCC_GetPCLK1Freq>
 80140f2:	4602      	mov	r2, r0
 80140f4:	4613      	mov	r3, r2
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	4413      	add	r3, r2
 80140fa:	009a      	lsls	r2, r3, #2
 80140fc:	441a      	add	r2, r3
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	685b      	ldr	r3, [r3, #4]
 8014102:	005b      	lsls	r3, r3, #1
 8014104:	fbb2 f6f3 	udiv	r6, r2, r3
 8014108:	f7fe fea8 	bl	8012e5c <HAL_RCC_GetPCLK1Freq>
 801410c:	4602      	mov	r2, r0
 801410e:	4613      	mov	r3, r2
 8014110:	009b      	lsls	r3, r3, #2
 8014112:	4413      	add	r3, r2
 8014114:	009a      	lsls	r2, r3, #2
 8014116:	441a      	add	r2, r3
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	005b      	lsls	r3, r3, #1
 801411e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014122:	4a46      	ldr	r2, [pc, #280]	; (801423c <UART_SetConfig+0x350>)
 8014124:	fba2 2303 	umull	r2, r3, r2, r3
 8014128:	095b      	lsrs	r3, r3, #5
 801412a:	2264      	movs	r2, #100	; 0x64
 801412c:	fb02 f303 	mul.w	r3, r2, r3
 8014130:	1af3      	subs	r3, r6, r3
 8014132:	00db      	lsls	r3, r3, #3
 8014134:	3332      	adds	r3, #50	; 0x32
 8014136:	4a41      	ldr	r2, [pc, #260]	; (801423c <UART_SetConfig+0x350>)
 8014138:	fba2 2303 	umull	r2, r3, r2, r3
 801413c:	095b      	lsrs	r3, r3, #5
 801413e:	f003 0307 	and.w	r3, r3, #7
 8014142:	442b      	add	r3, r5
 8014144:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8014146:	e0e7      	b.n	8014318 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	4a39      	ldr	r2, [pc, #228]	; (8014234 <UART_SetConfig+0x348>)
 801414e:	4293      	cmp	r3, r2
 8014150:	d004      	beq.n	801415c <UART_SetConfig+0x270>
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	4a38      	ldr	r2, [pc, #224]	; (8014238 <UART_SetConfig+0x34c>)
 8014158:	4293      	cmp	r3, r2
 801415a:	d171      	bne.n	8014240 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681c      	ldr	r4, [r3, #0]
 8014160:	f7fe fe90 	bl	8012e84 <HAL_RCC_GetPCLK2Freq>
 8014164:	4602      	mov	r2, r0
 8014166:	4613      	mov	r3, r2
 8014168:	009b      	lsls	r3, r3, #2
 801416a:	4413      	add	r3, r2
 801416c:	009a      	lsls	r2, r3, #2
 801416e:	441a      	add	r2, r3
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	009b      	lsls	r3, r3, #2
 8014176:	fbb2 f3f3 	udiv	r3, r2, r3
 801417a:	4a30      	ldr	r2, [pc, #192]	; (801423c <UART_SetConfig+0x350>)
 801417c:	fba2 2303 	umull	r2, r3, r2, r3
 8014180:	095b      	lsrs	r3, r3, #5
 8014182:	011d      	lsls	r5, r3, #4
 8014184:	f7fe fe7e 	bl	8012e84 <HAL_RCC_GetPCLK2Freq>
 8014188:	4602      	mov	r2, r0
 801418a:	4613      	mov	r3, r2
 801418c:	009b      	lsls	r3, r3, #2
 801418e:	4413      	add	r3, r2
 8014190:	009a      	lsls	r2, r3, #2
 8014192:	441a      	add	r2, r3
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	685b      	ldr	r3, [r3, #4]
 8014198:	009b      	lsls	r3, r3, #2
 801419a:	fbb2 f6f3 	udiv	r6, r2, r3
 801419e:	f7fe fe71 	bl	8012e84 <HAL_RCC_GetPCLK2Freq>
 80141a2:	4602      	mov	r2, r0
 80141a4:	4613      	mov	r3, r2
 80141a6:	009b      	lsls	r3, r3, #2
 80141a8:	4413      	add	r3, r2
 80141aa:	009a      	lsls	r2, r3, #2
 80141ac:	441a      	add	r2, r3
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	009b      	lsls	r3, r3, #2
 80141b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80141b8:	4a20      	ldr	r2, [pc, #128]	; (801423c <UART_SetConfig+0x350>)
 80141ba:	fba2 2303 	umull	r2, r3, r2, r3
 80141be:	095b      	lsrs	r3, r3, #5
 80141c0:	2264      	movs	r2, #100	; 0x64
 80141c2:	fb02 f303 	mul.w	r3, r2, r3
 80141c6:	1af3      	subs	r3, r6, r3
 80141c8:	011b      	lsls	r3, r3, #4
 80141ca:	3332      	adds	r3, #50	; 0x32
 80141cc:	4a1b      	ldr	r2, [pc, #108]	; (801423c <UART_SetConfig+0x350>)
 80141ce:	fba2 2303 	umull	r2, r3, r2, r3
 80141d2:	095b      	lsrs	r3, r3, #5
 80141d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80141d8:	441d      	add	r5, r3
 80141da:	f7fe fe53 	bl	8012e84 <HAL_RCC_GetPCLK2Freq>
 80141de:	4602      	mov	r2, r0
 80141e0:	4613      	mov	r3, r2
 80141e2:	009b      	lsls	r3, r3, #2
 80141e4:	4413      	add	r3, r2
 80141e6:	009a      	lsls	r2, r3, #2
 80141e8:	441a      	add	r2, r3
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	685b      	ldr	r3, [r3, #4]
 80141ee:	009b      	lsls	r3, r3, #2
 80141f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80141f4:	f7fe fe46 	bl	8012e84 <HAL_RCC_GetPCLK2Freq>
 80141f8:	4602      	mov	r2, r0
 80141fa:	4613      	mov	r3, r2
 80141fc:	009b      	lsls	r3, r3, #2
 80141fe:	4413      	add	r3, r2
 8014200:	009a      	lsls	r2, r3, #2
 8014202:	441a      	add	r2, r3
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	685b      	ldr	r3, [r3, #4]
 8014208:	009b      	lsls	r3, r3, #2
 801420a:	fbb2 f3f3 	udiv	r3, r2, r3
 801420e:	4a0b      	ldr	r2, [pc, #44]	; (801423c <UART_SetConfig+0x350>)
 8014210:	fba2 2303 	umull	r2, r3, r2, r3
 8014214:	095b      	lsrs	r3, r3, #5
 8014216:	2264      	movs	r2, #100	; 0x64
 8014218:	fb02 f303 	mul.w	r3, r2, r3
 801421c:	1af3      	subs	r3, r6, r3
 801421e:	011b      	lsls	r3, r3, #4
 8014220:	3332      	adds	r3, #50	; 0x32
 8014222:	4a06      	ldr	r2, [pc, #24]	; (801423c <UART_SetConfig+0x350>)
 8014224:	fba2 2303 	umull	r2, r3, r2, r3
 8014228:	095b      	lsrs	r3, r3, #5
 801422a:	f003 030f 	and.w	r3, r3, #15
 801422e:	442b      	add	r3, r5
 8014230:	60a3      	str	r3, [r4, #8]
 8014232:	e071      	b.n	8014318 <UART_SetConfig+0x42c>
 8014234:	40011000 	.word	0x40011000
 8014238:	40011400 	.word	0x40011400
 801423c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681c      	ldr	r4, [r3, #0]
 8014244:	f7fe fe0a 	bl	8012e5c <HAL_RCC_GetPCLK1Freq>
 8014248:	4602      	mov	r2, r0
 801424a:	4613      	mov	r3, r2
 801424c:	009b      	lsls	r3, r3, #2
 801424e:	4413      	add	r3, r2
 8014250:	009a      	lsls	r2, r3, #2
 8014252:	441a      	add	r2, r3
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	685b      	ldr	r3, [r3, #4]
 8014258:	009b      	lsls	r3, r3, #2
 801425a:	fbb2 f3f3 	udiv	r3, r2, r3
 801425e:	4a30      	ldr	r2, [pc, #192]	; (8014320 <UART_SetConfig+0x434>)
 8014260:	fba2 2303 	umull	r2, r3, r2, r3
 8014264:	095b      	lsrs	r3, r3, #5
 8014266:	011d      	lsls	r5, r3, #4
 8014268:	f7fe fdf8 	bl	8012e5c <HAL_RCC_GetPCLK1Freq>
 801426c:	4602      	mov	r2, r0
 801426e:	4613      	mov	r3, r2
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	4413      	add	r3, r2
 8014274:	009a      	lsls	r2, r3, #2
 8014276:	441a      	add	r2, r3
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	685b      	ldr	r3, [r3, #4]
 801427c:	009b      	lsls	r3, r3, #2
 801427e:	fbb2 f6f3 	udiv	r6, r2, r3
 8014282:	f7fe fdeb 	bl	8012e5c <HAL_RCC_GetPCLK1Freq>
 8014286:	4602      	mov	r2, r0
 8014288:	4613      	mov	r3, r2
 801428a:	009b      	lsls	r3, r3, #2
 801428c:	4413      	add	r3, r2
 801428e:	009a      	lsls	r2, r3, #2
 8014290:	441a      	add	r2, r3
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	685b      	ldr	r3, [r3, #4]
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	fbb2 f3f3 	udiv	r3, r2, r3
 801429c:	4a20      	ldr	r2, [pc, #128]	; (8014320 <UART_SetConfig+0x434>)
 801429e:	fba2 2303 	umull	r2, r3, r2, r3
 80142a2:	095b      	lsrs	r3, r3, #5
 80142a4:	2264      	movs	r2, #100	; 0x64
 80142a6:	fb02 f303 	mul.w	r3, r2, r3
 80142aa:	1af3      	subs	r3, r6, r3
 80142ac:	011b      	lsls	r3, r3, #4
 80142ae:	3332      	adds	r3, #50	; 0x32
 80142b0:	4a1b      	ldr	r2, [pc, #108]	; (8014320 <UART_SetConfig+0x434>)
 80142b2:	fba2 2303 	umull	r2, r3, r2, r3
 80142b6:	095b      	lsrs	r3, r3, #5
 80142b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80142bc:	441d      	add	r5, r3
 80142be:	f7fe fdcd 	bl	8012e5c <HAL_RCC_GetPCLK1Freq>
 80142c2:	4602      	mov	r2, r0
 80142c4:	4613      	mov	r3, r2
 80142c6:	009b      	lsls	r3, r3, #2
 80142c8:	4413      	add	r3, r2
 80142ca:	009a      	lsls	r2, r3, #2
 80142cc:	441a      	add	r2, r3
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	685b      	ldr	r3, [r3, #4]
 80142d2:	009b      	lsls	r3, r3, #2
 80142d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80142d8:	f7fe fdc0 	bl	8012e5c <HAL_RCC_GetPCLK1Freq>
 80142dc:	4602      	mov	r2, r0
 80142de:	4613      	mov	r3, r2
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	4413      	add	r3, r2
 80142e4:	009a      	lsls	r2, r3, #2
 80142e6:	441a      	add	r2, r3
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	685b      	ldr	r3, [r3, #4]
 80142ec:	009b      	lsls	r3, r3, #2
 80142ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80142f2:	4a0b      	ldr	r2, [pc, #44]	; (8014320 <UART_SetConfig+0x434>)
 80142f4:	fba2 2303 	umull	r2, r3, r2, r3
 80142f8:	095b      	lsrs	r3, r3, #5
 80142fa:	2264      	movs	r2, #100	; 0x64
 80142fc:	fb02 f303 	mul.w	r3, r2, r3
 8014300:	1af3      	subs	r3, r6, r3
 8014302:	011b      	lsls	r3, r3, #4
 8014304:	3332      	adds	r3, #50	; 0x32
 8014306:	4a06      	ldr	r2, [pc, #24]	; (8014320 <UART_SetConfig+0x434>)
 8014308:	fba2 2303 	umull	r2, r3, r2, r3
 801430c:	095b      	lsrs	r3, r3, #5
 801430e:	f003 030f 	and.w	r3, r3, #15
 8014312:	442b      	add	r3, r5
 8014314:	60a3      	str	r3, [r4, #8]
}
 8014316:	e7ff      	b.n	8014318 <UART_SetConfig+0x42c>
 8014318:	bf00      	nop
 801431a:	3714      	adds	r7, #20
 801431c:	46bd      	mov	sp, r7
 801431e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014320:	51eb851f 	.word	0x51eb851f

08014324 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014324:	b480      	push	{r7}
 8014326:	b085      	sub	sp, #20
 8014328:	af00      	add	r7, sp, #0
 801432a:	4603      	mov	r3, r0
 801432c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801432e:	2300      	movs	r3, #0
 8014330:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014336:	2b84      	cmp	r3, #132	; 0x84
 8014338:	d005      	beq.n	8014346 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801433a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	4413      	add	r3, r2
 8014342:	3303      	adds	r3, #3
 8014344:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014346:	68fb      	ldr	r3, [r7, #12]
}
 8014348:	4618      	mov	r0, r3
 801434a:	3714      	adds	r7, #20
 801434c:	46bd      	mov	sp, r7
 801434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014352:	4770      	bx	lr

08014354 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014354:	b480      	push	{r7}
 8014356:	b083      	sub	sp, #12
 8014358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801435a:	f3ef 8305 	mrs	r3, IPSR
 801435e:	607b      	str	r3, [r7, #4]
  return(result);
 8014360:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014362:	2b00      	cmp	r3, #0
 8014364:	bf14      	ite	ne
 8014366:	2301      	movne	r3, #1
 8014368:	2300      	moveq	r3, #0
 801436a:	b2db      	uxtb	r3, r3
}
 801436c:	4618      	mov	r0, r3
 801436e:	370c      	adds	r7, #12
 8014370:	46bd      	mov	sp, r7
 8014372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014376:	4770      	bx	lr

08014378 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801437c:	f002 f838 	bl	80163f0 <vTaskStartScheduler>
  
  return osOK;
 8014380:	2300      	movs	r3, #0
}
 8014382:	4618      	mov	r0, r3
 8014384:	bd80      	pop	{r7, pc}

08014386 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014386:	b580      	push	{r7, lr}
 8014388:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801438a:	f7ff ffe3 	bl	8014354 <inHandlerMode>
 801438e:	4603      	mov	r3, r0
 8014390:	2b00      	cmp	r3, #0
 8014392:	d003      	beq.n	801439c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014394:	f002 f946 	bl	8016624 <xTaskGetTickCountFromISR>
 8014398:	4603      	mov	r3, r0
 801439a:	e002      	b.n	80143a2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801439c:	f002 f932 	bl	8016604 <xTaskGetTickCount>
 80143a0:	4603      	mov	r3, r0
  }
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	bd80      	pop	{r7, pc}

080143a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80143a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143a8:	b089      	sub	sp, #36	; 0x24
 80143aa:	af04      	add	r7, sp, #16
 80143ac:	6078      	str	r0, [r7, #4]
 80143ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	695b      	ldr	r3, [r3, #20]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d020      	beq.n	80143fa <osThreadCreate+0x54>
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	699b      	ldr	r3, [r3, #24]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d01c      	beq.n	80143fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	685c      	ldr	r4, [r3, #4]
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	681d      	ldr	r5, [r3, #0]
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	691e      	ldr	r6, [r3, #16]
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7ff ffa6 	bl	8014324 <makeFreeRtosPriority>
 80143d8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	695b      	ldr	r3, [r3, #20]
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143e2:	9202      	str	r2, [sp, #8]
 80143e4:	9301      	str	r3, [sp, #4]
 80143e6:	9100      	str	r1, [sp, #0]
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	4632      	mov	r2, r6
 80143ec:	4629      	mov	r1, r5
 80143ee:	4620      	mov	r0, r4
 80143f0:	f001 fe44 	bl	801607c <xTaskCreateStatic>
 80143f4:	4603      	mov	r3, r0
 80143f6:	60fb      	str	r3, [r7, #12]
 80143f8:	e01c      	b.n	8014434 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	685c      	ldr	r4, [r3, #4]
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014406:	b29e      	uxth	r6, r3
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801440e:	4618      	mov	r0, r3
 8014410:	f7ff ff88 	bl	8014324 <makeFreeRtosPriority>
 8014414:	4602      	mov	r2, r0
 8014416:	f107 030c 	add.w	r3, r7, #12
 801441a:	9301      	str	r3, [sp, #4]
 801441c:	9200      	str	r2, [sp, #0]
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	4632      	mov	r2, r6
 8014422:	4629      	mov	r1, r5
 8014424:	4620      	mov	r0, r4
 8014426:	f001 fe73 	bl	8016110 <xTaskCreate>
 801442a:	4603      	mov	r3, r0
 801442c:	2b01      	cmp	r3, #1
 801442e:	d001      	beq.n	8014434 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014430:	2300      	movs	r3, #0
 8014432:	e000      	b.n	8014436 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014434:	68fb      	ldr	r3, [r7, #12]
}
 8014436:	4618      	mov	r0, r3
 8014438:	3714      	adds	r7, #20
 801443a:	46bd      	mov	sp, r7
 801443c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801443e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801443e:	b580      	push	{r7, lr}
 8014440:	b084      	sub	sp, #16
 8014442:	af00      	add	r7, sp, #0
 8014444:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d001      	beq.n	8014454 <osDelay+0x16>
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	e000      	b.n	8014456 <osDelay+0x18>
 8014454:	2301      	movs	r3, #1
 8014456:	4618      	mov	r0, r3
 8014458:	f001 ff96 	bl	8016388 <vTaskDelay>
  
  return osOK;
 801445c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801445e:	4618      	mov	r0, r3
 8014460:	3710      	adds	r7, #16
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}

08014466 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8014466:	b580      	push	{r7, lr}
 8014468:	b082      	sub	sp, #8
 801446a:	af00      	add	r7, sp, #0
 801446c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d007      	beq.n	8014486 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	685b      	ldr	r3, [r3, #4]
 801447a:	4619      	mov	r1, r3
 801447c:	2001      	movs	r0, #1
 801447e:	f001 f87d 	bl	801557c <xQueueCreateMutexStatic>
 8014482:	4603      	mov	r3, r0
 8014484:	e003      	b.n	801448e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8014486:	2001      	movs	r0, #1
 8014488:	f001 f860 	bl	801554c <xQueueCreateMutex>
 801448c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 801448e:	4618      	mov	r0, r3
 8014490:	3708      	adds	r7, #8
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}
	...

08014498 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b084      	sub	sp, #16
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80144a2:	2300      	movs	r3, #0
 80144a4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d101      	bne.n	80144b0 <osMutexWait+0x18>
    return osErrorParameter;
 80144ac:	2380      	movs	r3, #128	; 0x80
 80144ae:	e03c      	b.n	801452a <osMutexWait+0x92>
  }
  
  ticks = 0;
 80144b0:	2300      	movs	r3, #0
 80144b2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80144b4:	683b      	ldr	r3, [r7, #0]
 80144b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144ba:	d103      	bne.n	80144c4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80144bc:	f04f 33ff 	mov.w	r3, #4294967295
 80144c0:	60fb      	str	r3, [r7, #12]
 80144c2:	e009      	b.n	80144d8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80144c4:	683b      	ldr	r3, [r7, #0]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d006      	beq.n	80144d8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d101      	bne.n	80144d8 <osMutexWait+0x40>
      ticks = 1;
 80144d4:	2301      	movs	r3, #1
 80144d6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80144d8:	f7ff ff3c 	bl	8014354 <inHandlerMode>
 80144dc:	4603      	mov	r3, r0
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d017      	beq.n	8014512 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80144e2:	f107 0308 	add.w	r3, r7, #8
 80144e6:	461a      	mov	r2, r3
 80144e8:	2100      	movs	r1, #0
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f001 fb8c 	bl	8015c08 <xQueueReceiveFromISR>
 80144f0:	4603      	mov	r3, r0
 80144f2:	2b01      	cmp	r3, #1
 80144f4:	d001      	beq.n	80144fa <osMutexWait+0x62>
      return osErrorOS;
 80144f6:	23ff      	movs	r3, #255	; 0xff
 80144f8:	e017      	b.n	801452a <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d013      	beq.n	8014528 <osMutexWait+0x90>
 8014500:	4b0c      	ldr	r3, [pc, #48]	; (8014534 <osMutexWait+0x9c>)
 8014502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014506:	601a      	str	r2, [r3, #0]
 8014508:	f3bf 8f4f 	dsb	sy
 801450c:	f3bf 8f6f 	isb	sy
 8014510:	e00a      	b.n	8014528 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8014512:	2300      	movs	r3, #0
 8014514:	68fa      	ldr	r2, [r7, #12]
 8014516:	2100      	movs	r1, #0
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f001 fa63 	bl	80159e4 <xQueueGenericReceive>
 801451e:	4603      	mov	r3, r0
 8014520:	2b01      	cmp	r3, #1
 8014522:	d001      	beq.n	8014528 <osMutexWait+0x90>
    return osErrorOS;
 8014524:	23ff      	movs	r3, #255	; 0xff
 8014526:	e000      	b.n	801452a <osMutexWait+0x92>
  }
  
  return osOK;
 8014528:	2300      	movs	r3, #0
}
 801452a:	4618      	mov	r0, r3
 801452c:	3710      	adds	r7, #16
 801452e:	46bd      	mov	sp, r7
 8014530:	bd80      	pop	{r7, pc}
 8014532:	bf00      	nop
 8014534:	e000ed04 	.word	0xe000ed04

08014538 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b084      	sub	sp, #16
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014540:	2300      	movs	r3, #0
 8014542:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014544:	2300      	movs	r3, #0
 8014546:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8014548:	f7ff ff04 	bl	8014354 <inHandlerMode>
 801454c:	4603      	mov	r3, r0
 801454e:	2b00      	cmp	r3, #0
 8014550:	d016      	beq.n	8014580 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8014552:	f107 0308 	add.w	r3, r7, #8
 8014556:	4619      	mov	r1, r3
 8014558:	6878      	ldr	r0, [r7, #4]
 801455a:	f001 f9b9 	bl	80158d0 <xQueueGiveFromISR>
 801455e:	4603      	mov	r3, r0
 8014560:	2b01      	cmp	r3, #1
 8014562:	d001      	beq.n	8014568 <osMutexRelease+0x30>
      return osErrorOS;
 8014564:	23ff      	movs	r3, #255	; 0xff
 8014566:	e017      	b.n	8014598 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d013      	beq.n	8014596 <osMutexRelease+0x5e>
 801456e:	4b0c      	ldr	r3, [pc, #48]	; (80145a0 <osMutexRelease+0x68>)
 8014570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014574:	601a      	str	r2, [r3, #0]
 8014576:	f3bf 8f4f 	dsb	sy
 801457a:	f3bf 8f6f 	isb	sy
 801457e:	e00a      	b.n	8014596 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8014580:	2300      	movs	r3, #0
 8014582:	2200      	movs	r2, #0
 8014584:	2100      	movs	r1, #0
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f001 f814 	bl	80155b4 <xQueueGenericSend>
 801458c:	4603      	mov	r3, r0
 801458e:	2b01      	cmp	r3, #1
 8014590:	d001      	beq.n	8014596 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8014592:	23ff      	movs	r3, #255	; 0xff
 8014594:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8014596:	68fb      	ldr	r3, [r7, #12]
}
 8014598:	4618      	mov	r0, r3
 801459a:	3710      	adds	r7, #16
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}
 80145a0:	e000ed04 	.word	0xe000ed04

080145a4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b086      	sub	sp, #24
 80145a8:	af02      	add	r7, sp, #8
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	685b      	ldr	r3, [r3, #4]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d010      	beq.n	80145d8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	2b01      	cmp	r3, #1
 80145ba:	d10b      	bne.n	80145d4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	685a      	ldr	r2, [r3, #4]
 80145c0:	2303      	movs	r3, #3
 80145c2:	9300      	str	r3, [sp, #0]
 80145c4:	4613      	mov	r3, r2
 80145c6:	2200      	movs	r2, #0
 80145c8:	2100      	movs	r1, #0
 80145ca:	2001      	movs	r0, #1
 80145cc:	f000 fed2 	bl	8015374 <xQueueGenericCreateStatic>
 80145d0:	4603      	mov	r3, r0
 80145d2:	e016      	b.n	8014602 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80145d4:	2300      	movs	r3, #0
 80145d6:	e014      	b.n	8014602 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	2b01      	cmp	r3, #1
 80145dc:	d110      	bne.n	8014600 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80145de:	2203      	movs	r2, #3
 80145e0:	2100      	movs	r1, #0
 80145e2:	2001      	movs	r0, #1
 80145e4:	f000 ff38 	bl	8015458 <xQueueGenericCreate>
 80145e8:	60f8      	str	r0, [r7, #12]
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d005      	beq.n	80145fc <osSemaphoreCreate+0x58>
 80145f0:	2300      	movs	r3, #0
 80145f2:	2200      	movs	r2, #0
 80145f4:	2100      	movs	r1, #0
 80145f6:	68f8      	ldr	r0, [r7, #12]
 80145f8:	f000 ffdc 	bl	80155b4 <xQueueGenericSend>
      return sema;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	e000      	b.n	8014602 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8014600:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8014602:	4618      	mov	r0, r3
 8014604:	3710      	adds	r7, #16
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
	...

0801460c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b084      	sub	sp, #16
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
 8014614:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014616:	2300      	movs	r3, #0
 8014618:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d101      	bne.n	8014624 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8014620:	2380      	movs	r3, #128	; 0x80
 8014622:	e03c      	b.n	801469e <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 8014624:	2300      	movs	r3, #0
 8014626:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801462e:	d103      	bne.n	8014638 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8014630:	f04f 33ff 	mov.w	r3, #4294967295
 8014634:	60fb      	str	r3, [r7, #12]
 8014636:	e009      	b.n	801464c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d006      	beq.n	801464c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d101      	bne.n	801464c <osSemaphoreWait+0x40>
      ticks = 1;
 8014648:	2301      	movs	r3, #1
 801464a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801464c:	f7ff fe82 	bl	8014354 <inHandlerMode>
 8014650:	4603      	mov	r3, r0
 8014652:	2b00      	cmp	r3, #0
 8014654:	d017      	beq.n	8014686 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014656:	f107 0308 	add.w	r3, r7, #8
 801465a:	461a      	mov	r2, r3
 801465c:	2100      	movs	r1, #0
 801465e:	6878      	ldr	r0, [r7, #4]
 8014660:	f001 fad2 	bl	8015c08 <xQueueReceiveFromISR>
 8014664:	4603      	mov	r3, r0
 8014666:	2b01      	cmp	r3, #1
 8014668:	d001      	beq.n	801466e <osSemaphoreWait+0x62>
      return osErrorOS;
 801466a:	23ff      	movs	r3, #255	; 0xff
 801466c:	e017      	b.n	801469e <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d013      	beq.n	801469c <osSemaphoreWait+0x90>
 8014674:	4b0c      	ldr	r3, [pc, #48]	; (80146a8 <osSemaphoreWait+0x9c>)
 8014676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801467a:	601a      	str	r2, [r3, #0]
 801467c:	f3bf 8f4f 	dsb	sy
 8014680:	f3bf 8f6f 	isb	sy
 8014684:	e00a      	b.n	801469c <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014686:	2300      	movs	r3, #0
 8014688:	68fa      	ldr	r2, [r7, #12]
 801468a:	2100      	movs	r1, #0
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f001 f9a9 	bl	80159e4 <xQueueGenericReceive>
 8014692:	4603      	mov	r3, r0
 8014694:	2b01      	cmp	r3, #1
 8014696:	d001      	beq.n	801469c <osSemaphoreWait+0x90>
    return osErrorOS;
 8014698:	23ff      	movs	r3, #255	; 0xff
 801469a:	e000      	b.n	801469e <osSemaphoreWait+0x92>
  }
  
  return osOK;
 801469c:	2300      	movs	r3, #0
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3710      	adds	r7, #16
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	e000ed04 	.word	0xe000ed04

080146ac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b084      	sub	sp, #16
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80146b4:	2300      	movs	r3, #0
 80146b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80146b8:	2300      	movs	r3, #0
 80146ba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80146bc:	f7ff fe4a 	bl	8014354 <inHandlerMode>
 80146c0:	4603      	mov	r3, r0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d016      	beq.n	80146f4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80146c6:	f107 0308 	add.w	r3, r7, #8
 80146ca:	4619      	mov	r1, r3
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f001 f8ff 	bl	80158d0 <xQueueGiveFromISR>
 80146d2:	4603      	mov	r3, r0
 80146d4:	2b01      	cmp	r3, #1
 80146d6:	d001      	beq.n	80146dc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80146d8:	23ff      	movs	r3, #255	; 0xff
 80146da:	e017      	b.n	801470c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d013      	beq.n	801470a <osSemaphoreRelease+0x5e>
 80146e2:	4b0c      	ldr	r3, [pc, #48]	; (8014714 <osSemaphoreRelease+0x68>)
 80146e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146e8:	601a      	str	r2, [r3, #0]
 80146ea:	f3bf 8f4f 	dsb	sy
 80146ee:	f3bf 8f6f 	isb	sy
 80146f2:	e00a      	b.n	801470a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80146f4:	2300      	movs	r3, #0
 80146f6:	2200      	movs	r2, #0
 80146f8:	2100      	movs	r1, #0
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 ff5a 	bl	80155b4 <xQueueGenericSend>
 8014700:	4603      	mov	r3, r0
 8014702:	2b01      	cmp	r3, #1
 8014704:	d001      	beq.n	801470a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014706:	23ff      	movs	r3, #255	; 0xff
 8014708:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801470a:	68fb      	ldr	r3, [r7, #12]
}
 801470c:	4618      	mov	r0, r3
 801470e:	3710      	adds	r7, #16
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}
 8014714:	e000ed04 	.word	0xe000ed04

08014718 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b082      	sub	sp, #8
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014720:	f7ff fe18 	bl	8014354 <inHandlerMode>
 8014724:	4603      	mov	r3, r0
 8014726:	2b00      	cmp	r3, #0
 8014728:	d001      	beq.n	801472e <osSemaphoreDelete+0x16>
    return osErrorISR;
 801472a:	2382      	movs	r3, #130	; 0x82
 801472c:	e003      	b.n	8014736 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f001 fb1f 	bl	8015d72 <vQueueDelete>

  return osOK; 
 8014734:	2300      	movs	r3, #0
}
 8014736:	4618      	mov	r0, r3
 8014738:	3708      	adds	r7, #8
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}

0801473e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801473e:	b590      	push	{r4, r7, lr}
 8014740:	b085      	sub	sp, #20
 8014742:	af02      	add	r7, sp, #8
 8014744:	6078      	str	r0, [r7, #4]
 8014746:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	689b      	ldr	r3, [r3, #8]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d012      	beq.n	8014776 <osMessageCreate+0x38>
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	68db      	ldr	r3, [r3, #12]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d00e      	beq.n	8014776 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	6818      	ldr	r0, [r3, #0]
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6859      	ldr	r1, [r3, #4]
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	689a      	ldr	r2, [r3, #8]
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	68dc      	ldr	r4, [r3, #12]
 8014768:	2300      	movs	r3, #0
 801476a:	9300      	str	r3, [sp, #0]
 801476c:	4623      	mov	r3, r4
 801476e:	f000 fe01 	bl	8015374 <xQueueGenericCreateStatic>
 8014772:	4603      	mov	r3, r0
 8014774:	e008      	b.n	8014788 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	6818      	ldr	r0, [r3, #0]
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	685b      	ldr	r3, [r3, #4]
 801477e:	2200      	movs	r2, #0
 8014780:	4619      	mov	r1, r3
 8014782:	f000 fe69 	bl	8015458 <xQueueGenericCreate>
 8014786:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014788:	4618      	mov	r0, r3
 801478a:	370c      	adds	r7, #12
 801478c:	46bd      	mov	sp, r7
 801478e:	bd90      	pop	{r4, r7, pc}

08014790 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b086      	sub	sp, #24
 8014794:	af00      	add	r7, sp, #0
 8014796:	60f8      	str	r0, [r7, #12]
 8014798:	60b9      	str	r1, [r7, #8]
 801479a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801479c:	2300      	movs	r3, #0
 801479e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d101      	bne.n	80147ae <osMessagePut+0x1e>
    ticks = 1;
 80147aa:	2301      	movs	r3, #1
 80147ac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80147ae:	f7ff fdd1 	bl	8014354 <inHandlerMode>
 80147b2:	4603      	mov	r3, r0
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d018      	beq.n	80147ea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80147b8:	f107 0210 	add.w	r2, r7, #16
 80147bc:	f107 0108 	add.w	r1, r7, #8
 80147c0:	2300      	movs	r3, #0
 80147c2:	68f8      	ldr	r0, [r7, #12]
 80147c4:	f000 fff0 	bl	80157a8 <xQueueGenericSendFromISR>
 80147c8:	4603      	mov	r3, r0
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	d001      	beq.n	80147d2 <osMessagePut+0x42>
      return osErrorOS;
 80147ce:	23ff      	movs	r3, #255	; 0xff
 80147d0:	e018      	b.n	8014804 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d014      	beq.n	8014802 <osMessagePut+0x72>
 80147d8:	4b0c      	ldr	r3, [pc, #48]	; (801480c <osMessagePut+0x7c>)
 80147da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147de:	601a      	str	r2, [r3, #0]
 80147e0:	f3bf 8f4f 	dsb	sy
 80147e4:	f3bf 8f6f 	isb	sy
 80147e8:	e00b      	b.n	8014802 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80147ea:	f107 0108 	add.w	r1, r7, #8
 80147ee:	2300      	movs	r3, #0
 80147f0:	697a      	ldr	r2, [r7, #20]
 80147f2:	68f8      	ldr	r0, [r7, #12]
 80147f4:	f000 fede 	bl	80155b4 <xQueueGenericSend>
 80147f8:	4603      	mov	r3, r0
 80147fa:	2b01      	cmp	r3, #1
 80147fc:	d001      	beq.n	8014802 <osMessagePut+0x72>
      return osErrorOS;
 80147fe:	23ff      	movs	r3, #255	; 0xff
 8014800:	e000      	b.n	8014804 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014802:	2300      	movs	r3, #0
}
 8014804:	4618      	mov	r0, r3
 8014806:	3718      	adds	r7, #24
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}
 801480c:	e000ed04 	.word	0xe000ed04

08014810 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014810:	b590      	push	{r4, r7, lr}
 8014812:	b08b      	sub	sp, #44	; 0x2c
 8014814:	af00      	add	r7, sp, #0
 8014816:	60f8      	str	r0, [r7, #12]
 8014818:	60b9      	str	r1, [r7, #8]
 801481a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014820:	2300      	movs	r3, #0
 8014822:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d10a      	bne.n	8014840 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801482a:	2380      	movs	r3, #128	; 0x80
 801482c:	617b      	str	r3, [r7, #20]
    return event;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	461c      	mov	r4, r3
 8014832:	f107 0314 	add.w	r3, r7, #20
 8014836:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801483a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801483e:	e054      	b.n	80148ea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014840:	2300      	movs	r3, #0
 8014842:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014844:	2300      	movs	r3, #0
 8014846:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801484e:	d103      	bne.n	8014858 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014850:	f04f 33ff 	mov.w	r3, #4294967295
 8014854:	627b      	str	r3, [r7, #36]	; 0x24
 8014856:	e009      	b.n	801486c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d006      	beq.n	801486c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8014862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014864:	2b00      	cmp	r3, #0
 8014866:	d101      	bne.n	801486c <osMessageGet+0x5c>
      ticks = 1;
 8014868:	2301      	movs	r3, #1
 801486a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801486c:	f7ff fd72 	bl	8014354 <inHandlerMode>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d01c      	beq.n	80148b0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014876:	f107 0220 	add.w	r2, r7, #32
 801487a:	f107 0314 	add.w	r3, r7, #20
 801487e:	3304      	adds	r3, #4
 8014880:	4619      	mov	r1, r3
 8014882:	68b8      	ldr	r0, [r7, #8]
 8014884:	f001 f9c0 	bl	8015c08 <xQueueReceiveFromISR>
 8014888:	4603      	mov	r3, r0
 801488a:	2b01      	cmp	r3, #1
 801488c:	d102      	bne.n	8014894 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801488e:	2310      	movs	r3, #16
 8014890:	617b      	str	r3, [r7, #20]
 8014892:	e001      	b.n	8014898 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014894:	2300      	movs	r3, #0
 8014896:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014898:	6a3b      	ldr	r3, [r7, #32]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d01d      	beq.n	80148da <osMessageGet+0xca>
 801489e:	4b15      	ldr	r3, [pc, #84]	; (80148f4 <osMessageGet+0xe4>)
 80148a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148a4:	601a      	str	r2, [r3, #0]
 80148a6:	f3bf 8f4f 	dsb	sy
 80148aa:	f3bf 8f6f 	isb	sy
 80148ae:	e014      	b.n	80148da <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80148b0:	f107 0314 	add.w	r3, r7, #20
 80148b4:	1d19      	adds	r1, r3, #4
 80148b6:	2300      	movs	r3, #0
 80148b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148ba:	68b8      	ldr	r0, [r7, #8]
 80148bc:	f001 f892 	bl	80159e4 <xQueueGenericReceive>
 80148c0:	4603      	mov	r3, r0
 80148c2:	2b01      	cmp	r3, #1
 80148c4:	d102      	bne.n	80148cc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80148c6:	2310      	movs	r3, #16
 80148c8:	617b      	str	r3, [r7, #20]
 80148ca:	e006      	b.n	80148da <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80148cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d101      	bne.n	80148d6 <osMessageGet+0xc6>
 80148d2:	2300      	movs	r3, #0
 80148d4:	e000      	b.n	80148d8 <osMessageGet+0xc8>
 80148d6:	2340      	movs	r3, #64	; 0x40
 80148d8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	461c      	mov	r4, r3
 80148de:	f107 0314 	add.w	r3, r7, #20
 80148e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80148e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80148ea:	68f8      	ldr	r0, [r7, #12]
 80148ec:	372c      	adds	r7, #44	; 0x2c
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd90      	pop	{r4, r7, pc}
 80148f2:	bf00      	nop
 80148f4:	e000ed04 	.word	0xe000ed04

080148f8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b082      	sub	sp, #8
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014900:	f7ff fd28 	bl	8014354 <inHandlerMode>
 8014904:	4603      	mov	r3, r0
 8014906:	2b00      	cmp	r3, #0
 8014908:	d004      	beq.n	8014914 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f001 fa16 	bl	8015d3c <uxQueueMessagesWaitingFromISR>
 8014910:	4603      	mov	r3, r0
 8014912:	e003      	b.n	801491c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f001 f9f4 	bl	8015d02 <uxQueueMessagesWaiting>
 801491a:	4603      	mov	r3, r0
  }
}
 801491c:	4618      	mov	r0, r3
 801491e:	3708      	adds	r7, #8
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}

08014924 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b082      	sub	sp, #8
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 801492c:	f7ff fd12 	bl	8014354 <inHandlerMode>
 8014930:	4603      	mov	r3, r0
 8014932:	2b00      	cmp	r3, #0
 8014934:	d001      	beq.n	801493a <osMessageDelete+0x16>
    return osErrorISR;
 8014936:	2382      	movs	r3, #130	; 0x82
 8014938:	e003      	b.n	8014942 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f001 fa19 	bl	8015d72 <vQueueDelete>

  return osOK; 
 8014940:	2300      	movs	r3, #0
}
 8014942:	4618      	mov	r0, r3
 8014944:	3708      	adds	r7, #8
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}

0801494a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801494a:	b480      	push	{r7}
 801494c:	b083      	sub	sp, #12
 801494e:	af00      	add	r7, sp, #0
 8014950:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	f103 0208 	add.w	r2, r3, #8
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f04f 32ff 	mov.w	r2, #4294967295
 8014962:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f103 0208 	add.w	r2, r3, #8
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	f103 0208 	add.w	r2, r3, #8
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2200      	movs	r2, #0
 801497c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801497e:	bf00      	nop
 8014980:	370c      	adds	r7, #12
 8014982:	46bd      	mov	sp, r7
 8014984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014988:	4770      	bx	lr

0801498a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801498a:	b480      	push	{r7}
 801498c:	b083      	sub	sp, #12
 801498e:	af00      	add	r7, sp, #0
 8014990:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	2200      	movs	r2, #0
 8014996:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014998:	bf00      	nop
 801499a:	370c      	adds	r7, #12
 801499c:	46bd      	mov	sp, r7
 801499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a2:	4770      	bx	lr

080149a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80149a4:	b480      	push	{r7}
 80149a6:	b085      	sub	sp, #20
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	685b      	ldr	r3, [r3, #4]
 80149b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	68fa      	ldr	r2, [r7, #12]
 80149b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	689a      	ldr	r2, [r3, #8]
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	689b      	ldr	r3, [r3, #8]
 80149c6:	683a      	ldr	r2, [r7, #0]
 80149c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	683a      	ldr	r2, [r7, #0]
 80149ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	1c5a      	adds	r2, r3, #1
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	601a      	str	r2, [r3, #0]
}
 80149e0:	bf00      	nop
 80149e2:	3714      	adds	r7, #20
 80149e4:	46bd      	mov	sp, r7
 80149e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ea:	4770      	bx	lr

080149ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80149ec:	b480      	push	{r7}
 80149ee:	b085      	sub	sp, #20
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
 80149f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a02:	d103      	bne.n	8014a0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	691b      	ldr	r3, [r3, #16]
 8014a08:	60fb      	str	r3, [r7, #12]
 8014a0a:	e00c      	b.n	8014a26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	3308      	adds	r3, #8
 8014a10:	60fb      	str	r3, [r7, #12]
 8014a12:	e002      	b.n	8014a1a <vListInsert+0x2e>
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	685b      	ldr	r3, [r3, #4]
 8014a18:	60fb      	str	r3, [r7, #12]
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	685b      	ldr	r3, [r3, #4]
 8014a1e:	681a      	ldr	r2, [r3, #0]
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	429a      	cmp	r2, r3
 8014a24:	d9f6      	bls.n	8014a14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	685a      	ldr	r2, [r3, #4]
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	685b      	ldr	r3, [r3, #4]
 8014a32:	683a      	ldr	r2, [r7, #0]
 8014a34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	68fa      	ldr	r2, [r7, #12]
 8014a3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	683a      	ldr	r2, [r7, #0]
 8014a40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014a42:	683b      	ldr	r3, [r7, #0]
 8014a44:	687a      	ldr	r2, [r7, #4]
 8014a46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	1c5a      	adds	r2, r3, #1
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	601a      	str	r2, [r3, #0]
}
 8014a52:	bf00      	nop
 8014a54:	3714      	adds	r7, #20
 8014a56:	46bd      	mov	sp, r7
 8014a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5c:	4770      	bx	lr

08014a5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014a5e:	b480      	push	{r7}
 8014a60:	b085      	sub	sp, #20
 8014a62:	af00      	add	r7, sp, #0
 8014a64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	691b      	ldr	r3, [r3, #16]
 8014a6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	685b      	ldr	r3, [r3, #4]
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	6892      	ldr	r2, [r2, #8]
 8014a74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	689b      	ldr	r3, [r3, #8]
 8014a7a:	687a      	ldr	r2, [r7, #4]
 8014a7c:	6852      	ldr	r2, [r2, #4]
 8014a7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	685a      	ldr	r2, [r3, #4]
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d103      	bne.n	8014a92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	689a      	ldr	r2, [r3, #8]
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2200      	movs	r2, #0
 8014a96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	1e5a      	subs	r2, r3, #1
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	681b      	ldr	r3, [r3, #0]
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3714      	adds	r7, #20
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab0:	4770      	bx	lr
	...

08014ab4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014ab4:	b480      	push	{r7}
 8014ab6:	b085      	sub	sp, #20
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	3b04      	subs	r3, #4
 8014ac4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	3b04      	subs	r3, #4
 8014ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	f023 0201 	bic.w	r2, r3, #1
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	3b04      	subs	r3, #4
 8014ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014ae4:	4a0c      	ldr	r2, [pc, #48]	; (8014b18 <pxPortInitialiseStack+0x64>)
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	3b14      	subs	r3, #20
 8014aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	3b04      	subs	r3, #4
 8014afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	f06f 0202 	mvn.w	r2, #2
 8014b02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	3b20      	subs	r3, #32
 8014b08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3714      	adds	r7, #20
 8014b10:	46bd      	mov	sp, r7
 8014b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b16:	4770      	bx	lr
 8014b18:	08014b1d 	.word	0x08014b1d

08014b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014b1c:	b480      	push	{r7}
 8014b1e:	b083      	sub	sp, #12
 8014b20:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014b22:	4b0c      	ldr	r3, [pc, #48]	; (8014b54 <prvTaskExitError+0x38>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b2a:	d009      	beq.n	8014b40 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b30:	f383 8811 	msr	BASEPRI, r3
 8014b34:	f3bf 8f6f 	isb	sy
 8014b38:	f3bf 8f4f 	dsb	sy
 8014b3c:	607b      	str	r3, [r7, #4]
 8014b3e:	e7fe      	b.n	8014b3e <prvTaskExitError+0x22>
 8014b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b44:	f383 8811 	msr	BASEPRI, r3
 8014b48:	f3bf 8f6f 	isb	sy
 8014b4c:	f3bf 8f4f 	dsb	sy
 8014b50:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8014b52:	e7fe      	b.n	8014b52 <prvTaskExitError+0x36>
 8014b54:	20000004 	.word	0x20000004
	...

08014b60 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014b60:	4b07      	ldr	r3, [pc, #28]	; (8014b80 <pxCurrentTCBConst2>)
 8014b62:	6819      	ldr	r1, [r3, #0]
 8014b64:	6808      	ldr	r0, [r1, #0]
 8014b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b6a:	f380 8809 	msr	PSP, r0
 8014b6e:	f3bf 8f6f 	isb	sy
 8014b72:	f04f 0000 	mov.w	r0, #0
 8014b76:	f380 8811 	msr	BASEPRI, r0
 8014b7a:	4770      	bx	lr
 8014b7c:	f3af 8000 	nop.w

08014b80 <pxCurrentTCBConst2>:
 8014b80:	20009274 	.word	0x20009274
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014b84:	bf00      	nop
 8014b86:	bf00      	nop

08014b88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8014b88:	4806      	ldr	r0, [pc, #24]	; (8014ba4 <prvPortStartFirstTask+0x1c>)
 8014b8a:	6800      	ldr	r0, [r0, #0]
 8014b8c:	6800      	ldr	r0, [r0, #0]
 8014b8e:	f380 8808 	msr	MSP, r0
 8014b92:	b662      	cpsie	i
 8014b94:	b661      	cpsie	f
 8014b96:	f3bf 8f4f 	dsb	sy
 8014b9a:	f3bf 8f6f 	isb	sy
 8014b9e:	df00      	svc	0
 8014ba0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014ba2:	bf00      	nop
 8014ba4:	e000ed08 	.word	0xe000ed08

08014ba8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b086      	sub	sp, #24
 8014bac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014bae:	4b3b      	ldr	r3, [pc, #236]	; (8014c9c <xPortStartScheduler+0xf4>)
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	4a3b      	ldr	r2, [pc, #236]	; (8014ca0 <xPortStartScheduler+0xf8>)
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	d109      	bne.n	8014bcc <xPortStartScheduler+0x24>
 8014bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bbc:	f383 8811 	msr	BASEPRI, r3
 8014bc0:	f3bf 8f6f 	isb	sy
 8014bc4:	f3bf 8f4f 	dsb	sy
 8014bc8:	613b      	str	r3, [r7, #16]
 8014bca:	e7fe      	b.n	8014bca <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014bcc:	4b33      	ldr	r3, [pc, #204]	; (8014c9c <xPortStartScheduler+0xf4>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	4a34      	ldr	r2, [pc, #208]	; (8014ca4 <xPortStartScheduler+0xfc>)
 8014bd2:	4293      	cmp	r3, r2
 8014bd4:	d109      	bne.n	8014bea <xPortStartScheduler+0x42>
 8014bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bda:	f383 8811 	msr	BASEPRI, r3
 8014bde:	f3bf 8f6f 	isb	sy
 8014be2:	f3bf 8f4f 	dsb	sy
 8014be6:	60fb      	str	r3, [r7, #12]
 8014be8:	e7fe      	b.n	8014be8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014bea:	4b2f      	ldr	r3, [pc, #188]	; (8014ca8 <xPortStartScheduler+0x100>)
 8014bec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	781b      	ldrb	r3, [r3, #0]
 8014bf2:	b2db      	uxtb	r3, r3
 8014bf4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	22ff      	movs	r2, #255	; 0xff
 8014bfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	781b      	ldrb	r3, [r3, #0]
 8014c00:	b2db      	uxtb	r3, r3
 8014c02:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014c04:	79fb      	ldrb	r3, [r7, #7]
 8014c06:	b2db      	uxtb	r3, r3
 8014c08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014c0c:	b2da      	uxtb	r2, r3
 8014c0e:	4b27      	ldr	r3, [pc, #156]	; (8014cac <xPortStartScheduler+0x104>)
 8014c10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014c12:	4b27      	ldr	r3, [pc, #156]	; (8014cb0 <xPortStartScheduler+0x108>)
 8014c14:	2207      	movs	r2, #7
 8014c16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c18:	e009      	b.n	8014c2e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014c1a:	4b25      	ldr	r3, [pc, #148]	; (8014cb0 <xPortStartScheduler+0x108>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	3b01      	subs	r3, #1
 8014c20:	4a23      	ldr	r2, [pc, #140]	; (8014cb0 <xPortStartScheduler+0x108>)
 8014c22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014c24:	79fb      	ldrb	r3, [r7, #7]
 8014c26:	b2db      	uxtb	r3, r3
 8014c28:	005b      	lsls	r3, r3, #1
 8014c2a:	b2db      	uxtb	r3, r3
 8014c2c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c2e:	79fb      	ldrb	r3, [r7, #7]
 8014c30:	b2db      	uxtb	r3, r3
 8014c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c36:	2b80      	cmp	r3, #128	; 0x80
 8014c38:	d0ef      	beq.n	8014c1a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014c3a:	4b1d      	ldr	r3, [pc, #116]	; (8014cb0 <xPortStartScheduler+0x108>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	021b      	lsls	r3, r3, #8
 8014c40:	4a1b      	ldr	r2, [pc, #108]	; (8014cb0 <xPortStartScheduler+0x108>)
 8014c42:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014c44:	4b1a      	ldr	r3, [pc, #104]	; (8014cb0 <xPortStartScheduler+0x108>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014c4c:	4a18      	ldr	r2, [pc, #96]	; (8014cb0 <xPortStartScheduler+0x108>)
 8014c4e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014c50:	68bb      	ldr	r3, [r7, #8]
 8014c52:	b2da      	uxtb	r2, r3
 8014c54:	697b      	ldr	r3, [r7, #20]
 8014c56:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014c58:	4a16      	ldr	r2, [pc, #88]	; (8014cb4 <xPortStartScheduler+0x10c>)
 8014c5a:	4b16      	ldr	r3, [pc, #88]	; (8014cb4 <xPortStartScheduler+0x10c>)
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014c62:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014c64:	4a13      	ldr	r2, [pc, #76]	; (8014cb4 <xPortStartScheduler+0x10c>)
 8014c66:	4b13      	ldr	r3, [pc, #76]	; (8014cb4 <xPortStartScheduler+0x10c>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014c6e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014c70:	f000 f8d2 	bl	8014e18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014c74:	4b10      	ldr	r3, [pc, #64]	; (8014cb8 <xPortStartScheduler+0x110>)
 8014c76:	2200      	movs	r2, #0
 8014c78:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014c7a:	f000 f8e9 	bl	8014e50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014c7e:	4a0f      	ldr	r2, [pc, #60]	; (8014cbc <xPortStartScheduler+0x114>)
 8014c80:	4b0e      	ldr	r3, [pc, #56]	; (8014cbc <xPortStartScheduler+0x114>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014c88:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014c8a:	f7ff ff7d 	bl	8014b88 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8014c8e:	f7ff ff45 	bl	8014b1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014c92:	2300      	movs	r3, #0
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3718      	adds	r7, #24
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}
 8014c9c:	e000ed00 	.word	0xe000ed00
 8014ca0:	410fc271 	.word	0x410fc271
 8014ca4:	410fc270 	.word	0x410fc270
 8014ca8:	e000e400 	.word	0xe000e400
 8014cac:	20000254 	.word	0x20000254
 8014cb0:	20000258 	.word	0x20000258
 8014cb4:	e000ed20 	.word	0xe000ed20
 8014cb8:	20000004 	.word	0x20000004
 8014cbc:	e000ef34 	.word	0xe000ef34

08014cc0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014cc0:	b480      	push	{r7}
 8014cc2:	b083      	sub	sp, #12
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cca:	f383 8811 	msr	BASEPRI, r3
 8014cce:	f3bf 8f6f 	isb	sy
 8014cd2:	f3bf 8f4f 	dsb	sy
 8014cd6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014cd8:	4b0e      	ldr	r3, [pc, #56]	; (8014d14 <vPortEnterCritical+0x54>)
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	3301      	adds	r3, #1
 8014cde:	4a0d      	ldr	r2, [pc, #52]	; (8014d14 <vPortEnterCritical+0x54>)
 8014ce0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014ce2:	4b0c      	ldr	r3, [pc, #48]	; (8014d14 <vPortEnterCritical+0x54>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	2b01      	cmp	r3, #1
 8014ce8:	d10e      	bne.n	8014d08 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014cea:	4b0b      	ldr	r3, [pc, #44]	; (8014d18 <vPortEnterCritical+0x58>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	b2db      	uxtb	r3, r3
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d009      	beq.n	8014d08 <vPortEnterCritical+0x48>
 8014cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cf8:	f383 8811 	msr	BASEPRI, r3
 8014cfc:	f3bf 8f6f 	isb	sy
 8014d00:	f3bf 8f4f 	dsb	sy
 8014d04:	603b      	str	r3, [r7, #0]
 8014d06:	e7fe      	b.n	8014d06 <vPortEnterCritical+0x46>
	}
}
 8014d08:	bf00      	nop
 8014d0a:	370c      	adds	r7, #12
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d12:	4770      	bx	lr
 8014d14:	20000004 	.word	0x20000004
 8014d18:	e000ed04 	.word	0xe000ed04

08014d1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014d1c:	b480      	push	{r7}
 8014d1e:	b083      	sub	sp, #12
 8014d20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014d22:	4b11      	ldr	r3, [pc, #68]	; (8014d68 <vPortExitCritical+0x4c>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d109      	bne.n	8014d3e <vPortExitCritical+0x22>
 8014d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d2e:	f383 8811 	msr	BASEPRI, r3
 8014d32:	f3bf 8f6f 	isb	sy
 8014d36:	f3bf 8f4f 	dsb	sy
 8014d3a:	607b      	str	r3, [r7, #4]
 8014d3c:	e7fe      	b.n	8014d3c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014d3e:	4b0a      	ldr	r3, [pc, #40]	; (8014d68 <vPortExitCritical+0x4c>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	3b01      	subs	r3, #1
 8014d44:	4a08      	ldr	r2, [pc, #32]	; (8014d68 <vPortExitCritical+0x4c>)
 8014d46:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014d48:	4b07      	ldr	r3, [pc, #28]	; (8014d68 <vPortExitCritical+0x4c>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d104      	bne.n	8014d5a <vPortExitCritical+0x3e>
 8014d50:	2300      	movs	r3, #0
 8014d52:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014d5a:	bf00      	nop
 8014d5c:	370c      	adds	r7, #12
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d64:	4770      	bx	lr
 8014d66:	bf00      	nop
 8014d68:	20000004 	.word	0x20000004
 8014d6c:	00000000 	.word	0x00000000

08014d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014d70:	f3ef 8009 	mrs	r0, PSP
 8014d74:	f3bf 8f6f 	isb	sy
 8014d78:	4b15      	ldr	r3, [pc, #84]	; (8014dd0 <pxCurrentTCBConst>)
 8014d7a:	681a      	ldr	r2, [r3, #0]
 8014d7c:	f01e 0f10 	tst.w	lr, #16
 8014d80:	bf08      	it	eq
 8014d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d8a:	6010      	str	r0, [r2, #0]
 8014d8c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8014d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014d94:	f380 8811 	msr	BASEPRI, r0
 8014d98:	f3bf 8f4f 	dsb	sy
 8014d9c:	f3bf 8f6f 	isb	sy
 8014da0:	f001 fd0e 	bl	80167c0 <vTaskSwitchContext>
 8014da4:	f04f 0000 	mov.w	r0, #0
 8014da8:	f380 8811 	msr	BASEPRI, r0
 8014dac:	bc08      	pop	{r3}
 8014dae:	6819      	ldr	r1, [r3, #0]
 8014db0:	6808      	ldr	r0, [r1, #0]
 8014db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014db6:	f01e 0f10 	tst.w	lr, #16
 8014dba:	bf08      	it	eq
 8014dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014dc0:	f380 8809 	msr	PSP, r0
 8014dc4:	f3bf 8f6f 	isb	sy
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop
 8014dcc:	f3af 8000 	nop.w

08014dd0 <pxCurrentTCBConst>:
 8014dd0:	20009274 	.word	0x20009274
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014dd4:	bf00      	nop
 8014dd6:	bf00      	nop

08014dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8014dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014de2:	f383 8811 	msr	BASEPRI, r3
 8014de6:	f3bf 8f6f 	isb	sy
 8014dea:	f3bf 8f4f 	dsb	sy
 8014dee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014df0:	f001 fc2a 	bl	8016648 <xTaskIncrementTick>
 8014df4:	4603      	mov	r3, r0
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d003      	beq.n	8014e02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014dfa:	4b06      	ldr	r3, [pc, #24]	; (8014e14 <SysTick_Handler+0x3c>)
 8014dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e00:	601a      	str	r2, [r3, #0]
 8014e02:	2300      	movs	r3, #0
 8014e04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e0c:	bf00      	nop
 8014e0e:	3708      	adds	r7, #8
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}
 8014e14:	e000ed04 	.word	0xe000ed04

08014e18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014e18:	b480      	push	{r7}
 8014e1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014e1c:	4a08      	ldr	r2, [pc, #32]	; (8014e40 <vPortSetupTimerInterrupt+0x28>)
 8014e1e:	4b09      	ldr	r3, [pc, #36]	; (8014e44 <vPortSetupTimerInterrupt+0x2c>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	4909      	ldr	r1, [pc, #36]	; (8014e48 <vPortSetupTimerInterrupt+0x30>)
 8014e24:	fba1 1303 	umull	r1, r3, r1, r3
 8014e28:	099b      	lsrs	r3, r3, #6
 8014e2a:	3b01      	subs	r3, #1
 8014e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014e2e:	4b07      	ldr	r3, [pc, #28]	; (8014e4c <vPortSetupTimerInterrupt+0x34>)
 8014e30:	2207      	movs	r2, #7
 8014e32:	601a      	str	r2, [r3, #0]
}
 8014e34:	bf00      	nop
 8014e36:	46bd      	mov	sp, r7
 8014e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3c:	4770      	bx	lr
 8014e3e:	bf00      	nop
 8014e40:	e000e014 	.word	0xe000e014
 8014e44:	20000064 	.word	0x20000064
 8014e48:	10624dd3 	.word	0x10624dd3
 8014e4c:	e000e010 	.word	0xe000e010

08014e50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014e50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014e60 <vPortEnableVFP+0x10>
 8014e54:	6801      	ldr	r1, [r0, #0]
 8014e56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014e5a:	6001      	str	r1, [r0, #0]
 8014e5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014e5e:	bf00      	nop
 8014e60:	e000ed88 	.word	0xe000ed88

08014e64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014e64:	b480      	push	{r7}
 8014e66:	b085      	sub	sp, #20
 8014e68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8014e6a:	f3ef 8305 	mrs	r3, IPSR
 8014e6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	2b0f      	cmp	r3, #15
 8014e74:	d913      	bls.n	8014e9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014e76:	4a16      	ldr	r2, [pc, #88]	; (8014ed0 <vPortValidateInterruptPriority+0x6c>)
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	4413      	add	r3, r2
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014e80:	4b14      	ldr	r3, [pc, #80]	; (8014ed4 <vPortValidateInterruptPriority+0x70>)
 8014e82:	781b      	ldrb	r3, [r3, #0]
 8014e84:	7afa      	ldrb	r2, [r7, #11]
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d209      	bcs.n	8014e9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8014e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e8e:	f383 8811 	msr	BASEPRI, r3
 8014e92:	f3bf 8f6f 	isb	sy
 8014e96:	f3bf 8f4f 	dsb	sy
 8014e9a:	607b      	str	r3, [r7, #4]
 8014e9c:	e7fe      	b.n	8014e9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014e9e:	4b0e      	ldr	r3, [pc, #56]	; (8014ed8 <vPortValidateInterruptPriority+0x74>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014ea6:	4b0d      	ldr	r3, [pc, #52]	; (8014edc <vPortValidateInterruptPriority+0x78>)
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d909      	bls.n	8014ec2 <vPortValidateInterruptPriority+0x5e>
 8014eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eb2:	f383 8811 	msr	BASEPRI, r3
 8014eb6:	f3bf 8f6f 	isb	sy
 8014eba:	f3bf 8f4f 	dsb	sy
 8014ebe:	603b      	str	r3, [r7, #0]
 8014ec0:	e7fe      	b.n	8014ec0 <vPortValidateInterruptPriority+0x5c>
	}
 8014ec2:	bf00      	nop
 8014ec4:	3714      	adds	r7, #20
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr
 8014ece:	bf00      	nop
 8014ed0:	e000e3f0 	.word	0xe000e3f0
 8014ed4:	20000254 	.word	0x20000254
 8014ed8:	e000ed0c 	.word	0xe000ed0c
 8014edc:	20000258 	.word	0x20000258

08014ee0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b08a      	sub	sp, #40	; 0x28
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014ee8:	2300      	movs	r3, #0
 8014eea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014eec:	f001 fae0 	bl	80164b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014ef0:	4b57      	ldr	r3, [pc, #348]	; (8015050 <pvPortMalloc+0x170>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d101      	bne.n	8014efc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014ef8:	f000 f918 	bl	801512c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014efc:	4b55      	ldr	r3, [pc, #340]	; (8015054 <pvPortMalloc+0x174>)
 8014efe:	681a      	ldr	r2, [r3, #0]
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	4013      	ands	r3, r2
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	f040 808c 	bne.w	8015022 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d01c      	beq.n	8014f4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014f10:	2208      	movs	r2, #8
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	4413      	add	r3, r2
 8014f16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f003 0307 	and.w	r3, r3, #7
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d013      	beq.n	8014f4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	f023 0307 	bic.w	r3, r3, #7
 8014f28:	3308      	adds	r3, #8
 8014f2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f003 0307 	and.w	r3, r3, #7
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d009      	beq.n	8014f4a <pvPortMalloc+0x6a>
 8014f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f3a:	f383 8811 	msr	BASEPRI, r3
 8014f3e:	f3bf 8f6f 	isb	sy
 8014f42:	f3bf 8f4f 	dsb	sy
 8014f46:	617b      	str	r3, [r7, #20]
 8014f48:	e7fe      	b.n	8014f48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d068      	beq.n	8015022 <pvPortMalloc+0x142>
 8014f50:	4b41      	ldr	r3, [pc, #260]	; (8015058 <pvPortMalloc+0x178>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	687a      	ldr	r2, [r7, #4]
 8014f56:	429a      	cmp	r2, r3
 8014f58:	d863      	bhi.n	8015022 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014f5a:	4b40      	ldr	r3, [pc, #256]	; (801505c <pvPortMalloc+0x17c>)
 8014f5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014f5e:	4b3f      	ldr	r3, [pc, #252]	; (801505c <pvPortMalloc+0x17c>)
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f64:	e004      	b.n	8014f70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f72:	685a      	ldr	r2, [r3, #4]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	429a      	cmp	r2, r3
 8014f78:	d203      	bcs.n	8014f82 <pvPortMalloc+0xa2>
 8014f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d1f1      	bne.n	8014f66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014f82:	4b33      	ldr	r3, [pc, #204]	; (8015050 <pvPortMalloc+0x170>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	d04a      	beq.n	8015022 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014f8c:	6a3b      	ldr	r3, [r7, #32]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	2208      	movs	r2, #8
 8014f92:	4413      	add	r3, r2
 8014f94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f98:	681a      	ldr	r2, [r3, #0]
 8014f9a:	6a3b      	ldr	r3, [r7, #32]
 8014f9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa0:	685a      	ldr	r2, [r3, #4]
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	1ad2      	subs	r2, r2, r3
 8014fa6:	2308      	movs	r3, #8
 8014fa8:	005b      	lsls	r3, r3, #1
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d91e      	bls.n	8014fec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	4413      	add	r3, r2
 8014fb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fb6:	69bb      	ldr	r3, [r7, #24]
 8014fb8:	f003 0307 	and.w	r3, r3, #7
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d009      	beq.n	8014fd4 <pvPortMalloc+0xf4>
 8014fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fc4:	f383 8811 	msr	BASEPRI, r3
 8014fc8:	f3bf 8f6f 	isb	sy
 8014fcc:	f3bf 8f4f 	dsb	sy
 8014fd0:	613b      	str	r3, [r7, #16]
 8014fd2:	e7fe      	b.n	8014fd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd6:	685a      	ldr	r2, [r3, #4]
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	1ad2      	subs	r2, r2, r3
 8014fdc:	69bb      	ldr	r3, [r7, #24]
 8014fde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe2:	687a      	ldr	r2, [r7, #4]
 8014fe4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014fe6:	69b8      	ldr	r0, [r7, #24]
 8014fe8:	f000 f902 	bl	80151f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014fec:	4b1a      	ldr	r3, [pc, #104]	; (8015058 <pvPortMalloc+0x178>)
 8014fee:	681a      	ldr	r2, [r3, #0]
 8014ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff2:	685b      	ldr	r3, [r3, #4]
 8014ff4:	1ad3      	subs	r3, r2, r3
 8014ff6:	4a18      	ldr	r2, [pc, #96]	; (8015058 <pvPortMalloc+0x178>)
 8014ff8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014ffa:	4b17      	ldr	r3, [pc, #92]	; (8015058 <pvPortMalloc+0x178>)
 8014ffc:	681a      	ldr	r2, [r3, #0]
 8014ffe:	4b18      	ldr	r3, [pc, #96]	; (8015060 <pvPortMalloc+0x180>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	429a      	cmp	r2, r3
 8015004:	d203      	bcs.n	801500e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015006:	4b14      	ldr	r3, [pc, #80]	; (8015058 <pvPortMalloc+0x178>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	4a15      	ldr	r2, [pc, #84]	; (8015060 <pvPortMalloc+0x180>)
 801500c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015010:	685a      	ldr	r2, [r3, #4]
 8015012:	4b10      	ldr	r3, [pc, #64]	; (8015054 <pvPortMalloc+0x174>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	431a      	orrs	r2, r3
 8015018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501e:	2200      	movs	r2, #0
 8015020:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015022:	f001 fa53 	bl	80164cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015026:	69fb      	ldr	r3, [r7, #28]
 8015028:	f003 0307 	and.w	r3, r3, #7
 801502c:	2b00      	cmp	r3, #0
 801502e:	d009      	beq.n	8015044 <pvPortMalloc+0x164>
 8015030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015034:	f383 8811 	msr	BASEPRI, r3
 8015038:	f3bf 8f6f 	isb	sy
 801503c:	f3bf 8f4f 	dsb	sy
 8015040:	60fb      	str	r3, [r7, #12]
 8015042:	e7fe      	b.n	8015042 <pvPortMalloc+0x162>
	return pvReturn;
 8015044:	69fb      	ldr	r3, [r7, #28]
}
 8015046:	4618      	mov	r0, r3
 8015048:	3728      	adds	r7, #40	; 0x28
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}
 801504e:	bf00      	nop
 8015050:	20009264 	.word	0x20009264
 8015054:	20009270 	.word	0x20009270
 8015058:	20009268 	.word	0x20009268
 801505c:	2000925c 	.word	0x2000925c
 8015060:	2000926c 	.word	0x2000926c

08015064 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b086      	sub	sp, #24
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d046      	beq.n	8015104 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015076:	2308      	movs	r3, #8
 8015078:	425b      	negs	r3, r3
 801507a:	697a      	ldr	r2, [r7, #20]
 801507c:	4413      	add	r3, r2
 801507e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015080:	697b      	ldr	r3, [r7, #20]
 8015082:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015084:	693b      	ldr	r3, [r7, #16]
 8015086:	685a      	ldr	r2, [r3, #4]
 8015088:	4b20      	ldr	r3, [pc, #128]	; (801510c <vPortFree+0xa8>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	4013      	ands	r3, r2
 801508e:	2b00      	cmp	r3, #0
 8015090:	d109      	bne.n	80150a6 <vPortFree+0x42>
 8015092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015096:	f383 8811 	msr	BASEPRI, r3
 801509a:	f3bf 8f6f 	isb	sy
 801509e:	f3bf 8f4f 	dsb	sy
 80150a2:	60fb      	str	r3, [r7, #12]
 80150a4:	e7fe      	b.n	80150a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80150a6:	693b      	ldr	r3, [r7, #16]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d009      	beq.n	80150c2 <vPortFree+0x5e>
 80150ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150b2:	f383 8811 	msr	BASEPRI, r3
 80150b6:	f3bf 8f6f 	isb	sy
 80150ba:	f3bf 8f4f 	dsb	sy
 80150be:	60bb      	str	r3, [r7, #8]
 80150c0:	e7fe      	b.n	80150c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80150c2:	693b      	ldr	r3, [r7, #16]
 80150c4:	685a      	ldr	r2, [r3, #4]
 80150c6:	4b11      	ldr	r3, [pc, #68]	; (801510c <vPortFree+0xa8>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	4013      	ands	r3, r2
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d019      	beq.n	8015104 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80150d0:	693b      	ldr	r3, [r7, #16]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d115      	bne.n	8015104 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80150d8:	693b      	ldr	r3, [r7, #16]
 80150da:	685a      	ldr	r2, [r3, #4]
 80150dc:	4b0b      	ldr	r3, [pc, #44]	; (801510c <vPortFree+0xa8>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	43db      	mvns	r3, r3
 80150e2:	401a      	ands	r2, r3
 80150e4:	693b      	ldr	r3, [r7, #16]
 80150e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80150e8:	f001 f9e2 	bl	80164b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	685a      	ldr	r2, [r3, #4]
 80150f0:	4b07      	ldr	r3, [pc, #28]	; (8015110 <vPortFree+0xac>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	4413      	add	r3, r2
 80150f6:	4a06      	ldr	r2, [pc, #24]	; (8015110 <vPortFree+0xac>)
 80150f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80150fa:	6938      	ldr	r0, [r7, #16]
 80150fc:	f000 f878 	bl	80151f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015100:	f001 f9e4 	bl	80164cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015104:	bf00      	nop
 8015106:	3718      	adds	r7, #24
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}
 801510c:	20009270 	.word	0x20009270
 8015110:	20009268 	.word	0x20009268

08015114 <xPortGetMinimumEverFreeHeapSize>:
	return xFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8015114:	b480      	push	{r7}
 8015116:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8015118:	4b03      	ldr	r3, [pc, #12]	; (8015128 <xPortGetMinimumEverFreeHeapSize+0x14>)
 801511a:	681b      	ldr	r3, [r3, #0]
}
 801511c:	4618      	mov	r0, r3
 801511e:	46bd      	mov	sp, r7
 8015120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015124:	4770      	bx	lr
 8015126:	bf00      	nop
 8015128:	2000926c 	.word	0x2000926c

0801512c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801512c:	b480      	push	{r7}
 801512e:	b085      	sub	sp, #20
 8015130:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015132:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8015136:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015138:	4b27      	ldr	r3, [pc, #156]	; (80151d8 <prvHeapInit+0xac>)
 801513a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	f003 0307 	and.w	r3, r3, #7
 8015142:	2b00      	cmp	r3, #0
 8015144:	d00c      	beq.n	8015160 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	3307      	adds	r3, #7
 801514a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	f023 0307 	bic.w	r3, r3, #7
 8015152:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015154:	68ba      	ldr	r2, [r7, #8]
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	1ad3      	subs	r3, r2, r3
 801515a:	4a1f      	ldr	r2, [pc, #124]	; (80151d8 <prvHeapInit+0xac>)
 801515c:	4413      	add	r3, r2
 801515e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015164:	4a1d      	ldr	r2, [pc, #116]	; (80151dc <prvHeapInit+0xb0>)
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801516a:	4b1c      	ldr	r3, [pc, #112]	; (80151dc <prvHeapInit+0xb0>)
 801516c:	2200      	movs	r2, #0
 801516e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015170:	687a      	ldr	r2, [r7, #4]
 8015172:	68bb      	ldr	r3, [r7, #8]
 8015174:	4413      	add	r3, r2
 8015176:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015178:	2208      	movs	r2, #8
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	1a9b      	subs	r3, r3, r2
 801517e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	f023 0307 	bic.w	r3, r3, #7
 8015186:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	4a15      	ldr	r2, [pc, #84]	; (80151e0 <prvHeapInit+0xb4>)
 801518c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801518e:	4b14      	ldr	r3, [pc, #80]	; (80151e0 <prvHeapInit+0xb4>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	2200      	movs	r2, #0
 8015194:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015196:	4b12      	ldr	r3, [pc, #72]	; (80151e0 <prvHeapInit+0xb4>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	2200      	movs	r2, #0
 801519c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80151a2:	683b      	ldr	r3, [r7, #0]
 80151a4:	68fa      	ldr	r2, [r7, #12]
 80151a6:	1ad2      	subs	r2, r2, r3
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80151ac:	4b0c      	ldr	r3, [pc, #48]	; (80151e0 <prvHeapInit+0xb4>)
 80151ae:	681a      	ldr	r2, [r3, #0]
 80151b0:	683b      	ldr	r3, [r7, #0]
 80151b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	685b      	ldr	r3, [r3, #4]
 80151b8:	4a0a      	ldr	r2, [pc, #40]	; (80151e4 <prvHeapInit+0xb8>)
 80151ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	685b      	ldr	r3, [r3, #4]
 80151c0:	4a09      	ldr	r2, [pc, #36]	; (80151e8 <prvHeapInit+0xbc>)
 80151c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80151c4:	4b09      	ldr	r3, [pc, #36]	; (80151ec <prvHeapInit+0xc0>)
 80151c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80151ca:	601a      	str	r2, [r3, #0]
}
 80151cc:	bf00      	nop
 80151ce:	3714      	adds	r7, #20
 80151d0:	46bd      	mov	sp, r7
 80151d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d6:	4770      	bx	lr
 80151d8:	2000025c 	.word	0x2000025c
 80151dc:	2000925c 	.word	0x2000925c
 80151e0:	20009264 	.word	0x20009264
 80151e4:	2000926c 	.word	0x2000926c
 80151e8:	20009268 	.word	0x20009268
 80151ec:	20009270 	.word	0x20009270

080151f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80151f0:	b480      	push	{r7}
 80151f2:	b085      	sub	sp, #20
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80151f8:	4b28      	ldr	r3, [pc, #160]	; (801529c <prvInsertBlockIntoFreeList+0xac>)
 80151fa:	60fb      	str	r3, [r7, #12]
 80151fc:	e002      	b.n	8015204 <prvInsertBlockIntoFreeList+0x14>
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	60fb      	str	r3, [r7, #12]
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	681a      	ldr	r2, [r3, #0]
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	429a      	cmp	r2, r3
 801520c:	d3f7      	bcc.n	80151fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	685b      	ldr	r3, [r3, #4]
 8015216:	68ba      	ldr	r2, [r7, #8]
 8015218:	441a      	add	r2, r3
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	429a      	cmp	r2, r3
 801521e:	d108      	bne.n	8015232 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	685a      	ldr	r2, [r3, #4]
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	685b      	ldr	r3, [r3, #4]
 8015228:	441a      	add	r2, r3
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	685b      	ldr	r3, [r3, #4]
 801523a:	68ba      	ldr	r2, [r7, #8]
 801523c:	441a      	add	r2, r3
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	429a      	cmp	r2, r3
 8015244:	d118      	bne.n	8015278 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	681a      	ldr	r2, [r3, #0]
 801524a:	4b15      	ldr	r3, [pc, #84]	; (80152a0 <prvInsertBlockIntoFreeList+0xb0>)
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	429a      	cmp	r2, r3
 8015250:	d00d      	beq.n	801526e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	685a      	ldr	r2, [r3, #4]
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	685b      	ldr	r3, [r3, #4]
 801525c:	441a      	add	r2, r3
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	681a      	ldr	r2, [r3, #0]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	601a      	str	r2, [r3, #0]
 801526c:	e008      	b.n	8015280 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801526e:	4b0c      	ldr	r3, [pc, #48]	; (80152a0 <prvInsertBlockIntoFreeList+0xb0>)
 8015270:	681a      	ldr	r2, [r3, #0]
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	601a      	str	r2, [r3, #0]
 8015276:	e003      	b.n	8015280 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	681a      	ldr	r2, [r3, #0]
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015280:	68fa      	ldr	r2, [r7, #12]
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	429a      	cmp	r2, r3
 8015286:	d002      	beq.n	801528e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	687a      	ldr	r2, [r7, #4]
 801528c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801528e:	bf00      	nop
 8015290:	3714      	adds	r7, #20
 8015292:	46bd      	mov	sp, r7
 8015294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015298:	4770      	bx	lr
 801529a:	bf00      	nop
 801529c:	2000925c 	.word	0x2000925c
 80152a0:	20009264 	.word	0x20009264

080152a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b084      	sub	sp, #16
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d109      	bne.n	80152cc <xQueueGenericReset+0x28>
 80152b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152bc:	f383 8811 	msr	BASEPRI, r3
 80152c0:	f3bf 8f6f 	isb	sy
 80152c4:	f3bf 8f4f 	dsb	sy
 80152c8:	60bb      	str	r3, [r7, #8]
 80152ca:	e7fe      	b.n	80152ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80152cc:	f7ff fcf8 	bl	8014cc0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	681a      	ldr	r2, [r3, #0]
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80152d8:	68f9      	ldr	r1, [r7, #12]
 80152da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80152dc:	fb01 f303 	mul.w	r3, r1, r3
 80152e0:	441a      	add	r2, r3
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	2200      	movs	r2, #0
 80152ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	681a      	ldr	r2, [r3, #0]
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	681a      	ldr	r2, [r3, #0]
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80152fc:	3b01      	subs	r3, #1
 80152fe:	68f9      	ldr	r1, [r7, #12]
 8015300:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015302:	fb01 f303 	mul.w	r3, r1, r3
 8015306:	441a      	add	r2, r3
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	22ff      	movs	r2, #255	; 0xff
 8015310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	22ff      	movs	r2, #255	; 0xff
 8015318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d114      	bne.n	801534c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	691b      	ldr	r3, [r3, #16]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d01a      	beq.n	8015360 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	3310      	adds	r3, #16
 801532e:	4618      	mov	r0, r3
 8015330:	f001 fae0 	bl	80168f4 <xTaskRemoveFromEventList>
 8015334:	4603      	mov	r3, r0
 8015336:	2b00      	cmp	r3, #0
 8015338:	d012      	beq.n	8015360 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801533a:	4b0d      	ldr	r3, [pc, #52]	; (8015370 <xQueueGenericReset+0xcc>)
 801533c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015340:	601a      	str	r2, [r3, #0]
 8015342:	f3bf 8f4f 	dsb	sy
 8015346:	f3bf 8f6f 	isb	sy
 801534a:	e009      	b.n	8015360 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	3310      	adds	r3, #16
 8015350:	4618      	mov	r0, r3
 8015352:	f7ff fafa 	bl	801494a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	3324      	adds	r3, #36	; 0x24
 801535a:	4618      	mov	r0, r3
 801535c:	f7ff faf5 	bl	801494a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015360:	f7ff fcdc 	bl	8014d1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015364:	2301      	movs	r3, #1
}
 8015366:	4618      	mov	r0, r3
 8015368:	3710      	adds	r7, #16
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}
 801536e:	bf00      	nop
 8015370:	e000ed04 	.word	0xe000ed04

08015374 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015374:	b580      	push	{r7, lr}
 8015376:	b08e      	sub	sp, #56	; 0x38
 8015378:	af02      	add	r7, sp, #8
 801537a:	60f8      	str	r0, [r7, #12]
 801537c:	60b9      	str	r1, [r7, #8]
 801537e:	607a      	str	r2, [r7, #4]
 8015380:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d109      	bne.n	801539c <xQueueGenericCreateStatic+0x28>
 8015388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801538c:	f383 8811 	msr	BASEPRI, r3
 8015390:	f3bf 8f6f 	isb	sy
 8015394:	f3bf 8f4f 	dsb	sy
 8015398:	62bb      	str	r3, [r7, #40]	; 0x28
 801539a:	e7fe      	b.n	801539a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d109      	bne.n	80153b6 <xQueueGenericCreateStatic+0x42>
 80153a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a6:	f383 8811 	msr	BASEPRI, r3
 80153aa:	f3bf 8f6f 	isb	sy
 80153ae:	f3bf 8f4f 	dsb	sy
 80153b2:	627b      	str	r3, [r7, #36]	; 0x24
 80153b4:	e7fe      	b.n	80153b4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d002      	beq.n	80153c2 <xQueueGenericCreateStatic+0x4e>
 80153bc:	68bb      	ldr	r3, [r7, #8]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d001      	beq.n	80153c6 <xQueueGenericCreateStatic+0x52>
 80153c2:	2301      	movs	r3, #1
 80153c4:	e000      	b.n	80153c8 <xQueueGenericCreateStatic+0x54>
 80153c6:	2300      	movs	r3, #0
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d109      	bne.n	80153e0 <xQueueGenericCreateStatic+0x6c>
 80153cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d0:	f383 8811 	msr	BASEPRI, r3
 80153d4:	f3bf 8f6f 	isb	sy
 80153d8:	f3bf 8f4f 	dsb	sy
 80153dc:	623b      	str	r3, [r7, #32]
 80153de:	e7fe      	b.n	80153de <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d102      	bne.n	80153ec <xQueueGenericCreateStatic+0x78>
 80153e6:	68bb      	ldr	r3, [r7, #8]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d101      	bne.n	80153f0 <xQueueGenericCreateStatic+0x7c>
 80153ec:	2301      	movs	r3, #1
 80153ee:	e000      	b.n	80153f2 <xQueueGenericCreateStatic+0x7e>
 80153f0:	2300      	movs	r3, #0
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d109      	bne.n	801540a <xQueueGenericCreateStatic+0x96>
 80153f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153fa:	f383 8811 	msr	BASEPRI, r3
 80153fe:	f3bf 8f6f 	isb	sy
 8015402:	f3bf 8f4f 	dsb	sy
 8015406:	61fb      	str	r3, [r7, #28]
 8015408:	e7fe      	b.n	8015408 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801540a:	2350      	movs	r3, #80	; 0x50
 801540c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	2b50      	cmp	r3, #80	; 0x50
 8015412:	d009      	beq.n	8015428 <xQueueGenericCreateStatic+0xb4>
 8015414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015418:	f383 8811 	msr	BASEPRI, r3
 801541c:	f3bf 8f6f 	isb	sy
 8015420:	f3bf 8f4f 	dsb	sy
 8015424:	61bb      	str	r3, [r7, #24]
 8015426:	e7fe      	b.n	8015426 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801542e:	2b00      	cmp	r3, #0
 8015430:	d00d      	beq.n	801544e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015434:	2201      	movs	r2, #1
 8015436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801543a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015440:	9300      	str	r3, [sp, #0]
 8015442:	4613      	mov	r3, r2
 8015444:	687a      	ldr	r2, [r7, #4]
 8015446:	68b9      	ldr	r1, [r7, #8]
 8015448:	68f8      	ldr	r0, [r7, #12]
 801544a:	f000 f842 	bl	80154d2 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 801544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015450:	4618      	mov	r0, r3
 8015452:	3730      	adds	r7, #48	; 0x30
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}

08015458 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015458:	b580      	push	{r7, lr}
 801545a:	b08a      	sub	sp, #40	; 0x28
 801545c:	af02      	add	r7, sp, #8
 801545e:	60f8      	str	r0, [r7, #12]
 8015460:	60b9      	str	r1, [r7, #8]
 8015462:	4613      	mov	r3, r2
 8015464:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d109      	bne.n	8015480 <xQueueGenericCreate+0x28>
 801546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015470:	f383 8811 	msr	BASEPRI, r3
 8015474:	f3bf 8f6f 	isb	sy
 8015478:	f3bf 8f4f 	dsb	sy
 801547c:	613b      	str	r3, [r7, #16]
 801547e:	e7fe      	b.n	801547e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d102      	bne.n	801548c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8015486:	2300      	movs	r3, #0
 8015488:	61fb      	str	r3, [r7, #28]
 801548a:	e004      	b.n	8015496 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	68ba      	ldr	r2, [r7, #8]
 8015490:	fb02 f303 	mul.w	r3, r2, r3
 8015494:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8015496:	69fb      	ldr	r3, [r7, #28]
 8015498:	3350      	adds	r3, #80	; 0x50
 801549a:	4618      	mov	r0, r3
 801549c:	f7ff fd20 	bl	8014ee0 <pvPortMalloc>
 80154a0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80154a2:	69bb      	ldr	r3, [r7, #24]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d00f      	beq.n	80154c8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80154a8:	69bb      	ldr	r3, [r7, #24]
 80154aa:	3350      	adds	r3, #80	; 0x50
 80154ac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80154ae:	69bb      	ldr	r3, [r7, #24]
 80154b0:	2200      	movs	r2, #0
 80154b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80154b6:	79fa      	ldrb	r2, [r7, #7]
 80154b8:	69bb      	ldr	r3, [r7, #24]
 80154ba:	9300      	str	r3, [sp, #0]
 80154bc:	4613      	mov	r3, r2
 80154be:	697a      	ldr	r2, [r7, #20]
 80154c0:	68b9      	ldr	r1, [r7, #8]
 80154c2:	68f8      	ldr	r0, [r7, #12]
 80154c4:	f000 f805 	bl	80154d2 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80154c8:	69bb      	ldr	r3, [r7, #24]
	}
 80154ca:	4618      	mov	r0, r3
 80154cc:	3720      	adds	r7, #32
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}

080154d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80154d2:	b580      	push	{r7, lr}
 80154d4:	b084      	sub	sp, #16
 80154d6:	af00      	add	r7, sp, #0
 80154d8:	60f8      	str	r0, [r7, #12]
 80154da:	60b9      	str	r1, [r7, #8]
 80154dc:	607a      	str	r2, [r7, #4]
 80154de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d103      	bne.n	80154ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80154e6:	69bb      	ldr	r3, [r7, #24]
 80154e8:	69ba      	ldr	r2, [r7, #24]
 80154ea:	601a      	str	r2, [r3, #0]
 80154ec:	e002      	b.n	80154f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80154ee:	69bb      	ldr	r3, [r7, #24]
 80154f0:	687a      	ldr	r2, [r7, #4]
 80154f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80154f4:	69bb      	ldr	r3, [r7, #24]
 80154f6:	68fa      	ldr	r2, [r7, #12]
 80154f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80154fa:	69bb      	ldr	r3, [r7, #24]
 80154fc:	68ba      	ldr	r2, [r7, #8]
 80154fe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015500:	2101      	movs	r1, #1
 8015502:	69b8      	ldr	r0, [r7, #24]
 8015504:	f7ff fece 	bl	80152a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015508:	69bb      	ldr	r3, [r7, #24]
 801550a:	78fa      	ldrb	r2, [r7, #3]
 801550c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015510:	bf00      	nop
 8015512:	3710      	adds	r7, #16
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}

08015518 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d00e      	beq.n	8015544 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2200      	movs	r2, #0
 801552a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2200      	movs	r2, #0
 8015530:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2200      	movs	r2, #0
 8015536:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015538:	2300      	movs	r3, #0
 801553a:	2200      	movs	r2, #0
 801553c:	2100      	movs	r1, #0
 801553e:	6878      	ldr	r0, [r7, #4]
 8015540:	f000 f838 	bl	80155b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8015544:	bf00      	nop
 8015546:	3708      	adds	r7, #8
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}

0801554c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801554c:	b580      	push	{r7, lr}
 801554e:	b086      	sub	sp, #24
 8015550:	af00      	add	r7, sp, #0
 8015552:	4603      	mov	r3, r0
 8015554:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015556:	2301      	movs	r3, #1
 8015558:	617b      	str	r3, [r7, #20]
 801555a:	2300      	movs	r3, #0
 801555c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801555e:	79fb      	ldrb	r3, [r7, #7]
 8015560:	461a      	mov	r2, r3
 8015562:	6939      	ldr	r1, [r7, #16]
 8015564:	6978      	ldr	r0, [r7, #20]
 8015566:	f7ff ff77 	bl	8015458 <xQueueGenericCreate>
 801556a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 801556c:	68f8      	ldr	r0, [r7, #12]
 801556e:	f7ff ffd3 	bl	8015518 <prvInitialiseMutex>

		return pxNewQueue;
 8015572:	68fb      	ldr	r3, [r7, #12]
	}
 8015574:	4618      	mov	r0, r3
 8015576:	3718      	adds	r7, #24
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}

0801557c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801557c:	b580      	push	{r7, lr}
 801557e:	b088      	sub	sp, #32
 8015580:	af02      	add	r7, sp, #8
 8015582:	4603      	mov	r3, r0
 8015584:	6039      	str	r1, [r7, #0]
 8015586:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015588:	2301      	movs	r3, #1
 801558a:	617b      	str	r3, [r7, #20]
 801558c:	2300      	movs	r3, #0
 801558e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015590:	79fb      	ldrb	r3, [r7, #7]
 8015592:	9300      	str	r3, [sp, #0]
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	2200      	movs	r2, #0
 8015598:	6939      	ldr	r1, [r7, #16]
 801559a:	6978      	ldr	r0, [r7, #20]
 801559c:	f7ff feea 	bl	8015374 <xQueueGenericCreateStatic>
 80155a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80155a2:	68f8      	ldr	r0, [r7, #12]
 80155a4:	f7ff ffb8 	bl	8015518 <prvInitialiseMutex>

		return pxNewQueue;
 80155a8:	68fb      	ldr	r3, [r7, #12]
	}
 80155aa:	4618      	mov	r0, r3
 80155ac:	3718      	adds	r7, #24
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}
	...

080155b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b08e      	sub	sp, #56	; 0x38
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	60f8      	str	r0, [r7, #12]
 80155bc:	60b9      	str	r1, [r7, #8]
 80155be:	607a      	str	r2, [r7, #4]
 80155c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80155c2:	2300      	movs	r3, #0
 80155c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80155ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d109      	bne.n	80155e4 <xQueueGenericSend+0x30>
 80155d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155d4:	f383 8811 	msr	BASEPRI, r3
 80155d8:	f3bf 8f6f 	isb	sy
 80155dc:	f3bf 8f4f 	dsb	sy
 80155e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80155e2:	e7fe      	b.n	80155e2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d103      	bne.n	80155f2 <xQueueGenericSend+0x3e>
 80155ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d101      	bne.n	80155f6 <xQueueGenericSend+0x42>
 80155f2:	2301      	movs	r3, #1
 80155f4:	e000      	b.n	80155f8 <xQueueGenericSend+0x44>
 80155f6:	2300      	movs	r3, #0
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d109      	bne.n	8015610 <xQueueGenericSend+0x5c>
 80155fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015600:	f383 8811 	msr	BASEPRI, r3
 8015604:	f3bf 8f6f 	isb	sy
 8015608:	f3bf 8f4f 	dsb	sy
 801560c:	627b      	str	r3, [r7, #36]	; 0x24
 801560e:	e7fe      	b.n	801560e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	2b02      	cmp	r3, #2
 8015614:	d103      	bne.n	801561e <xQueueGenericSend+0x6a>
 8015616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801561a:	2b01      	cmp	r3, #1
 801561c:	d101      	bne.n	8015622 <xQueueGenericSend+0x6e>
 801561e:	2301      	movs	r3, #1
 8015620:	e000      	b.n	8015624 <xQueueGenericSend+0x70>
 8015622:	2300      	movs	r3, #0
 8015624:	2b00      	cmp	r3, #0
 8015626:	d109      	bne.n	801563c <xQueueGenericSend+0x88>
 8015628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801562c:	f383 8811 	msr	BASEPRI, r3
 8015630:	f3bf 8f6f 	isb	sy
 8015634:	f3bf 8f4f 	dsb	sy
 8015638:	623b      	str	r3, [r7, #32]
 801563a:	e7fe      	b.n	801563a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801563c:	f001 fb32 	bl	8016ca4 <xTaskGetSchedulerState>
 8015640:	4603      	mov	r3, r0
 8015642:	2b00      	cmp	r3, #0
 8015644:	d102      	bne.n	801564c <xQueueGenericSend+0x98>
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d101      	bne.n	8015650 <xQueueGenericSend+0x9c>
 801564c:	2301      	movs	r3, #1
 801564e:	e000      	b.n	8015652 <xQueueGenericSend+0x9e>
 8015650:	2300      	movs	r3, #0
 8015652:	2b00      	cmp	r3, #0
 8015654:	d109      	bne.n	801566a <xQueueGenericSend+0xb6>
 8015656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801565a:	f383 8811 	msr	BASEPRI, r3
 801565e:	f3bf 8f6f 	isb	sy
 8015662:	f3bf 8f4f 	dsb	sy
 8015666:	61fb      	str	r3, [r7, #28]
 8015668:	e7fe      	b.n	8015668 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801566a:	f7ff fb29 	bl	8014cc0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015676:	429a      	cmp	r2, r3
 8015678:	d302      	bcc.n	8015680 <xQueueGenericSend+0xcc>
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	2b02      	cmp	r3, #2
 801567e:	d129      	bne.n	80156d4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015680:	683a      	ldr	r2, [r7, #0]
 8015682:	68b9      	ldr	r1, [r7, #8]
 8015684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015686:	f000 fb96 	bl	8015db6 <prvCopyDataToQueue>
 801568a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015690:	2b00      	cmp	r3, #0
 8015692:	d010      	beq.n	80156b6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015696:	3324      	adds	r3, #36	; 0x24
 8015698:	4618      	mov	r0, r3
 801569a:	f001 f92b 	bl	80168f4 <xTaskRemoveFromEventList>
 801569e:	4603      	mov	r3, r0
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d013      	beq.n	80156cc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80156a4:	4b3f      	ldr	r3, [pc, #252]	; (80157a4 <xQueueGenericSend+0x1f0>)
 80156a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156aa:	601a      	str	r2, [r3, #0]
 80156ac:	f3bf 8f4f 	dsb	sy
 80156b0:	f3bf 8f6f 	isb	sy
 80156b4:	e00a      	b.n	80156cc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80156b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d007      	beq.n	80156cc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80156bc:	4b39      	ldr	r3, [pc, #228]	; (80157a4 <xQueueGenericSend+0x1f0>)
 80156be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156c2:	601a      	str	r2, [r3, #0]
 80156c4:	f3bf 8f4f 	dsb	sy
 80156c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80156cc:	f7ff fb26 	bl	8014d1c <vPortExitCritical>
				return pdPASS;
 80156d0:	2301      	movs	r3, #1
 80156d2:	e063      	b.n	801579c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d103      	bne.n	80156e2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80156da:	f7ff fb1f 	bl	8014d1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80156de:	2300      	movs	r3, #0
 80156e0:	e05c      	b.n	801579c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80156e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d106      	bne.n	80156f6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80156e8:	f107 0314 	add.w	r3, r7, #20
 80156ec:	4618      	mov	r0, r3
 80156ee:	f001 f963 	bl	80169b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80156f2:	2301      	movs	r3, #1
 80156f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80156f6:	f7ff fb11 	bl	8014d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80156fa:	f000 fed9 	bl	80164b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80156fe:	f7ff fadf 	bl	8014cc0 <vPortEnterCritical>
 8015702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015708:	b25b      	sxtb	r3, r3
 801570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801570e:	d103      	bne.n	8015718 <xQueueGenericSend+0x164>
 8015710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015712:	2200      	movs	r2, #0
 8015714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801571a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801571e:	b25b      	sxtb	r3, r3
 8015720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015724:	d103      	bne.n	801572e <xQueueGenericSend+0x17a>
 8015726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015728:	2200      	movs	r2, #0
 801572a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801572e:	f7ff faf5 	bl	8014d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015732:	1d3a      	adds	r2, r7, #4
 8015734:	f107 0314 	add.w	r3, r7, #20
 8015738:	4611      	mov	r1, r2
 801573a:	4618      	mov	r0, r3
 801573c:	f001 f960 	bl	8016a00 <xTaskCheckForTimeOut>
 8015740:	4603      	mov	r3, r0
 8015742:	2b00      	cmp	r3, #0
 8015744:	d124      	bne.n	8015790 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015748:	f000 fc2d 	bl	8015fa6 <prvIsQueueFull>
 801574c:	4603      	mov	r3, r0
 801574e:	2b00      	cmp	r3, #0
 8015750:	d018      	beq.n	8015784 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015754:	3310      	adds	r3, #16
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	4611      	mov	r1, r2
 801575a:	4618      	mov	r0, r3
 801575c:	f001 f8a6 	bl	80168ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015762:	f000 fbb8 	bl	8015ed6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015766:	f000 feb1 	bl	80164cc <xTaskResumeAll>
 801576a:	4603      	mov	r3, r0
 801576c:	2b00      	cmp	r3, #0
 801576e:	f47f af7c 	bne.w	801566a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8015772:	4b0c      	ldr	r3, [pc, #48]	; (80157a4 <xQueueGenericSend+0x1f0>)
 8015774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015778:	601a      	str	r2, [r3, #0]
 801577a:	f3bf 8f4f 	dsb	sy
 801577e:	f3bf 8f6f 	isb	sy
 8015782:	e772      	b.n	801566a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015786:	f000 fba6 	bl	8015ed6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801578a:	f000 fe9f 	bl	80164cc <xTaskResumeAll>
 801578e:	e76c      	b.n	801566a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015792:	f000 fba0 	bl	8015ed6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015796:	f000 fe99 	bl	80164cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801579a:	2300      	movs	r3, #0
		}
	}
}
 801579c:	4618      	mov	r0, r3
 801579e:	3738      	adds	r7, #56	; 0x38
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}
 80157a4:	e000ed04 	.word	0xe000ed04

080157a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b08e      	sub	sp, #56	; 0x38
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	60f8      	str	r0, [r7, #12]
 80157b0:	60b9      	str	r1, [r7, #8]
 80157b2:	607a      	str	r2, [r7, #4]
 80157b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80157ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d109      	bne.n	80157d4 <xQueueGenericSendFromISR+0x2c>
 80157c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157c4:	f383 8811 	msr	BASEPRI, r3
 80157c8:	f3bf 8f6f 	isb	sy
 80157cc:	f3bf 8f4f 	dsb	sy
 80157d0:	627b      	str	r3, [r7, #36]	; 0x24
 80157d2:	e7fe      	b.n	80157d2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80157d4:	68bb      	ldr	r3, [r7, #8]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d103      	bne.n	80157e2 <xQueueGenericSendFromISR+0x3a>
 80157da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d101      	bne.n	80157e6 <xQueueGenericSendFromISR+0x3e>
 80157e2:	2301      	movs	r3, #1
 80157e4:	e000      	b.n	80157e8 <xQueueGenericSendFromISR+0x40>
 80157e6:	2300      	movs	r3, #0
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d109      	bne.n	8015800 <xQueueGenericSendFromISR+0x58>
 80157ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157f0:	f383 8811 	msr	BASEPRI, r3
 80157f4:	f3bf 8f6f 	isb	sy
 80157f8:	f3bf 8f4f 	dsb	sy
 80157fc:	623b      	str	r3, [r7, #32]
 80157fe:	e7fe      	b.n	80157fe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015800:	683b      	ldr	r3, [r7, #0]
 8015802:	2b02      	cmp	r3, #2
 8015804:	d103      	bne.n	801580e <xQueueGenericSendFromISR+0x66>
 8015806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801580a:	2b01      	cmp	r3, #1
 801580c:	d101      	bne.n	8015812 <xQueueGenericSendFromISR+0x6a>
 801580e:	2301      	movs	r3, #1
 8015810:	e000      	b.n	8015814 <xQueueGenericSendFromISR+0x6c>
 8015812:	2300      	movs	r3, #0
 8015814:	2b00      	cmp	r3, #0
 8015816:	d109      	bne.n	801582c <xQueueGenericSendFromISR+0x84>
 8015818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801581c:	f383 8811 	msr	BASEPRI, r3
 8015820:	f3bf 8f6f 	isb	sy
 8015824:	f3bf 8f4f 	dsb	sy
 8015828:	61fb      	str	r3, [r7, #28]
 801582a:	e7fe      	b.n	801582a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801582c:	f7ff fb1a 	bl	8014e64 <vPortValidateInterruptPriority>
	__asm volatile
 8015830:	f3ef 8211 	mrs	r2, BASEPRI
 8015834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015838:	f383 8811 	msr	BASEPRI, r3
 801583c:	f3bf 8f6f 	isb	sy
 8015840:	f3bf 8f4f 	dsb	sy
 8015844:	61ba      	str	r2, [r7, #24]
 8015846:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015848:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801584a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801584e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015854:	429a      	cmp	r2, r3
 8015856:	d302      	bcc.n	801585e <xQueueGenericSendFromISR+0xb6>
 8015858:	683b      	ldr	r3, [r7, #0]
 801585a:	2b02      	cmp	r3, #2
 801585c:	d12c      	bne.n	80158b8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015868:	683a      	ldr	r2, [r7, #0]
 801586a:	68b9      	ldr	r1, [r7, #8]
 801586c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801586e:	f000 faa2 	bl	8015db6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015872:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015876:	f1b3 3fff 	cmp.w	r3, #4294967295
 801587a:	d112      	bne.n	80158a2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015880:	2b00      	cmp	r3, #0
 8015882:	d016      	beq.n	80158b2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015886:	3324      	adds	r3, #36	; 0x24
 8015888:	4618      	mov	r0, r3
 801588a:	f001 f833 	bl	80168f4 <xTaskRemoveFromEventList>
 801588e:	4603      	mov	r3, r0
 8015890:	2b00      	cmp	r3, #0
 8015892:	d00e      	beq.n	80158b2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d00b      	beq.n	80158b2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	2201      	movs	r2, #1
 801589e:	601a      	str	r2, [r3, #0]
 80158a0:	e007      	b.n	80158b2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80158a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80158a6:	3301      	adds	r3, #1
 80158a8:	b2db      	uxtb	r3, r3
 80158aa:	b25a      	sxtb	r2, r3
 80158ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80158b2:	2301      	movs	r3, #1
 80158b4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80158b6:	e001      	b.n	80158bc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80158b8:	2300      	movs	r3, #0
 80158ba:	637b      	str	r3, [r7, #52]	; 0x34
 80158bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158be:	613b      	str	r3, [r7, #16]
	__asm volatile
 80158c0:	693b      	ldr	r3, [r7, #16]
 80158c2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80158c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80158c8:	4618      	mov	r0, r3
 80158ca:	3738      	adds	r7, #56	; 0x38
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bd80      	pop	{r7, pc}

080158d0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b08e      	sub	sp, #56	; 0x38
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
 80158d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80158de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d109      	bne.n	80158f8 <xQueueGiveFromISR+0x28>
	__asm volatile
 80158e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e8:	f383 8811 	msr	BASEPRI, r3
 80158ec:	f3bf 8f6f 	isb	sy
 80158f0:	f3bf 8f4f 	dsb	sy
 80158f4:	623b      	str	r3, [r7, #32]
 80158f6:	e7fe      	b.n	80158f6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80158f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d009      	beq.n	8015914 <xQueueGiveFromISR+0x44>
 8015900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015904:	f383 8811 	msr	BASEPRI, r3
 8015908:	f3bf 8f6f 	isb	sy
 801590c:	f3bf 8f4f 	dsb	sy
 8015910:	61fb      	str	r3, [r7, #28]
 8015912:	e7fe      	b.n	8015912 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8015914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d103      	bne.n	8015924 <xQueueGiveFromISR+0x54>
 801591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801591e:	685b      	ldr	r3, [r3, #4]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d101      	bne.n	8015928 <xQueueGiveFromISR+0x58>
 8015924:	2301      	movs	r3, #1
 8015926:	e000      	b.n	801592a <xQueueGiveFromISR+0x5a>
 8015928:	2300      	movs	r3, #0
 801592a:	2b00      	cmp	r3, #0
 801592c:	d109      	bne.n	8015942 <xQueueGiveFromISR+0x72>
 801592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015932:	f383 8811 	msr	BASEPRI, r3
 8015936:	f3bf 8f6f 	isb	sy
 801593a:	f3bf 8f4f 	dsb	sy
 801593e:	61bb      	str	r3, [r7, #24]
 8015940:	e7fe      	b.n	8015940 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015942:	f7ff fa8f 	bl	8014e64 <vPortValidateInterruptPriority>
	__asm volatile
 8015946:	f3ef 8211 	mrs	r2, BASEPRI
 801594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801594e:	f383 8811 	msr	BASEPRI, r3
 8015952:	f3bf 8f6f 	isb	sy
 8015956:	f3bf 8f4f 	dsb	sy
 801595a:	617a      	str	r2, [r7, #20]
 801595c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801595e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015960:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015966:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801596a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596e:	429a      	cmp	r2, r3
 8015970:	d92b      	bls.n	80159ca <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 801597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801597e:	1c5a      	adds	r2, r3, #1
 8015980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015982:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015984:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801598c:	d112      	bne.n	80159b4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015992:	2b00      	cmp	r3, #0
 8015994:	d016      	beq.n	80159c4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015998:	3324      	adds	r3, #36	; 0x24
 801599a:	4618      	mov	r0, r3
 801599c:	f000 ffaa 	bl	80168f4 <xTaskRemoveFromEventList>
 80159a0:	4603      	mov	r3, r0
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d00e      	beq.n	80159c4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d00b      	beq.n	80159c4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	2201      	movs	r2, #1
 80159b0:	601a      	str	r2, [r3, #0]
 80159b2:	e007      	b.n	80159c4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80159b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159b8:	3301      	adds	r3, #1
 80159ba:	b2db      	uxtb	r3, r3
 80159bc:	b25a      	sxtb	r2, r3
 80159be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80159c4:	2301      	movs	r3, #1
 80159c6:	637b      	str	r3, [r7, #52]	; 0x34
 80159c8:	e001      	b.n	80159ce <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80159ca:	2300      	movs	r3, #0
 80159cc:	637b      	str	r3, [r7, #52]	; 0x34
 80159ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80159d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80159da:	4618      	mov	r0, r3
 80159dc:	3738      	adds	r7, #56	; 0x38
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}
	...

080159e4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b08e      	sub	sp, #56	; 0x38
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	60f8      	str	r0, [r7, #12]
 80159ec:	60b9      	str	r1, [r7, #8]
 80159ee:	607a      	str	r2, [r7, #4]
 80159f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80159f2:	2300      	movs	r3, #0
 80159f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80159fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d109      	bne.n	8015a14 <xQueueGenericReceive+0x30>
	__asm volatile
 8015a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a04:	f383 8811 	msr	BASEPRI, r3
 8015a08:	f3bf 8f6f 	isb	sy
 8015a0c:	f3bf 8f4f 	dsb	sy
 8015a10:	627b      	str	r3, [r7, #36]	; 0x24
 8015a12:	e7fe      	b.n	8015a12 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015a14:	68bb      	ldr	r3, [r7, #8]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d103      	bne.n	8015a22 <xQueueGenericReceive+0x3e>
 8015a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d101      	bne.n	8015a26 <xQueueGenericReceive+0x42>
 8015a22:	2301      	movs	r3, #1
 8015a24:	e000      	b.n	8015a28 <xQueueGenericReceive+0x44>
 8015a26:	2300      	movs	r3, #0
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d109      	bne.n	8015a40 <xQueueGenericReceive+0x5c>
 8015a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a30:	f383 8811 	msr	BASEPRI, r3
 8015a34:	f3bf 8f6f 	isb	sy
 8015a38:	f3bf 8f4f 	dsb	sy
 8015a3c:	623b      	str	r3, [r7, #32]
 8015a3e:	e7fe      	b.n	8015a3e <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015a40:	f001 f930 	bl	8016ca4 <xTaskGetSchedulerState>
 8015a44:	4603      	mov	r3, r0
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d102      	bne.n	8015a50 <xQueueGenericReceive+0x6c>
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d101      	bne.n	8015a54 <xQueueGenericReceive+0x70>
 8015a50:	2301      	movs	r3, #1
 8015a52:	e000      	b.n	8015a56 <xQueueGenericReceive+0x72>
 8015a54:	2300      	movs	r3, #0
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d109      	bne.n	8015a6e <xQueueGenericReceive+0x8a>
 8015a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a5e:	f383 8811 	msr	BASEPRI, r3
 8015a62:	f3bf 8f6f 	isb	sy
 8015a66:	f3bf 8f4f 	dsb	sy
 8015a6a:	61fb      	str	r3, [r7, #28]
 8015a6c:	e7fe      	b.n	8015a6c <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8015a6e:	f7ff f927 	bl	8014cc0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a76:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d046      	beq.n	8015b0c <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8015a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a80:	68db      	ldr	r3, [r3, #12]
 8015a82:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015a84:	68b9      	ldr	r1, [r7, #8]
 8015a86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a88:	f000 f9ff 	bl	8015e8a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d121      	bne.n	8015ad6 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8015a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a94:	1e5a      	subs	r2, r3, #1
 8015a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a98:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d104      	bne.n	8015aac <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8015aa2:	f001 fa17 	bl	8016ed4 <pvTaskIncrementMutexHeldCount>
 8015aa6:	4602      	mov	r2, r0
 8015aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aaa:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aae:	691b      	ldr	r3, [r3, #16]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d027      	beq.n	8015b04 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ab6:	3310      	adds	r3, #16
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f000 ff1b 	bl	80168f4 <xTaskRemoveFromEventList>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d01f      	beq.n	8015b04 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8015ac4:	4b4f      	ldr	r3, [pc, #316]	; (8015c04 <xQueueGenericReceive+0x220>)
 8015ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015aca:	601a      	str	r2, [r3, #0]
 8015acc:	f3bf 8f4f 	dsb	sy
 8015ad0:	f3bf 8f6f 	isb	sy
 8015ad4:	e016      	b.n	8015b04 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8015ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ada:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d00f      	beq.n	8015b04 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae6:	3324      	adds	r3, #36	; 0x24
 8015ae8:	4618      	mov	r0, r3
 8015aea:	f000 ff03 	bl	80168f4 <xTaskRemoveFromEventList>
 8015aee:	4603      	mov	r3, r0
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d007      	beq.n	8015b04 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8015af4:	4b43      	ldr	r3, [pc, #268]	; (8015c04 <xQueueGenericReceive+0x220>)
 8015af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015afa:	601a      	str	r2, [r3, #0]
 8015afc:	f3bf 8f4f 	dsb	sy
 8015b00:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8015b04:	f7ff f90a 	bl	8014d1c <vPortExitCritical>
				return pdPASS;
 8015b08:	2301      	movs	r3, #1
 8015b0a:	e077      	b.n	8015bfc <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d103      	bne.n	8015b1a <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015b12:	f7ff f903 	bl	8014d1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015b16:	2300      	movs	r3, #0
 8015b18:	e070      	b.n	8015bfc <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d106      	bne.n	8015b2e <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8015b20:	f107 0314 	add.w	r3, r7, #20
 8015b24:	4618      	mov	r0, r3
 8015b26:	f000 ff47 	bl	80169b8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015b2e:	f7ff f8f5 	bl	8014d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015b32:	f000 fcbd 	bl	80164b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b36:	f7ff f8c3 	bl	8014cc0 <vPortEnterCritical>
 8015b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b40:	b25b      	sxtb	r3, r3
 8015b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b46:	d103      	bne.n	8015b50 <xQueueGenericReceive+0x16c>
 8015b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b56:	b25b      	sxtb	r3, r3
 8015b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b5c:	d103      	bne.n	8015b66 <xQueueGenericReceive+0x182>
 8015b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b60:	2200      	movs	r2, #0
 8015b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015b66:	f7ff f8d9 	bl	8014d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b6a:	1d3a      	adds	r2, r7, #4
 8015b6c:	f107 0314 	add.w	r3, r7, #20
 8015b70:	4611      	mov	r1, r2
 8015b72:	4618      	mov	r0, r3
 8015b74:	f000 ff44 	bl	8016a00 <xTaskCheckForTimeOut>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d131      	bne.n	8015be2 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015b7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b80:	f000 f9fb 	bl	8015f7a <prvIsQueueEmpty>
 8015b84:	4603      	mov	r3, r0
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d025      	beq.n	8015bd6 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d108      	bne.n	8015ba4 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8015b92:	f7ff f895 	bl	8014cc0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8015b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b98:	685b      	ldr	r3, [r3, #4]
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f001 f8a0 	bl	8016ce0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8015ba0:	f7ff f8bc 	bl	8014d1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba6:	3324      	adds	r3, #36	; 0x24
 8015ba8:	687a      	ldr	r2, [r7, #4]
 8015baa:	4611      	mov	r1, r2
 8015bac:	4618      	mov	r0, r3
 8015bae:	f000 fe7d 	bl	80168ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bb4:	f000 f98f 	bl	8015ed6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015bb8:	f000 fc88 	bl	80164cc <xTaskResumeAll>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	f47f af55 	bne.w	8015a6e <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8015bc4:	4b0f      	ldr	r3, [pc, #60]	; (8015c04 <xQueueGenericReceive+0x220>)
 8015bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bca:	601a      	str	r2, [r3, #0]
 8015bcc:	f3bf 8f4f 	dsb	sy
 8015bd0:	f3bf 8f6f 	isb	sy
 8015bd4:	e74b      	b.n	8015a6e <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bd8:	f000 f97d 	bl	8015ed6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015bdc:	f000 fc76 	bl	80164cc <xTaskResumeAll>
 8015be0:	e745      	b.n	8015a6e <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8015be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015be4:	f000 f977 	bl	8015ed6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015be8:	f000 fc70 	bl	80164cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bee:	f000 f9c4 	bl	8015f7a <prvIsQueueEmpty>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	f43f af3a 	beq.w	8015a6e <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015bfa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	3738      	adds	r7, #56	; 0x38
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}
 8015c04:	e000ed04 	.word	0xe000ed04

08015c08 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b08e      	sub	sp, #56	; 0x38
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	60f8      	str	r0, [r7, #12]
 8015c10:	60b9      	str	r1, [r7, #8]
 8015c12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d109      	bne.n	8015c32 <xQueueReceiveFromISR+0x2a>
 8015c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c22:	f383 8811 	msr	BASEPRI, r3
 8015c26:	f3bf 8f6f 	isb	sy
 8015c2a:	f3bf 8f4f 	dsb	sy
 8015c2e:	623b      	str	r3, [r7, #32]
 8015c30:	e7fe      	b.n	8015c30 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c32:	68bb      	ldr	r3, [r7, #8]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d103      	bne.n	8015c40 <xQueueReceiveFromISR+0x38>
 8015c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d101      	bne.n	8015c44 <xQueueReceiveFromISR+0x3c>
 8015c40:	2301      	movs	r3, #1
 8015c42:	e000      	b.n	8015c46 <xQueueReceiveFromISR+0x3e>
 8015c44:	2300      	movs	r3, #0
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d109      	bne.n	8015c5e <xQueueReceiveFromISR+0x56>
 8015c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c4e:	f383 8811 	msr	BASEPRI, r3
 8015c52:	f3bf 8f6f 	isb	sy
 8015c56:	f3bf 8f4f 	dsb	sy
 8015c5a:	61fb      	str	r3, [r7, #28]
 8015c5c:	e7fe      	b.n	8015c5c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015c5e:	f7ff f901 	bl	8014e64 <vPortValidateInterruptPriority>
	__asm volatile
 8015c62:	f3ef 8211 	mrs	r2, BASEPRI
 8015c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c6a:	f383 8811 	msr	BASEPRI, r3
 8015c6e:	f3bf 8f6f 	isb	sy
 8015c72:	f3bf 8f4f 	dsb	sy
 8015c76:	61ba      	str	r2, [r7, #24]
 8015c78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015c7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d02f      	beq.n	8015cea <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015c94:	68b9      	ldr	r1, [r7, #8]
 8015c96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c98:	f000 f8f7 	bl	8015e8a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8015c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c9e:	1e5a      	subs	r2, r3, #1
 8015ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015ca4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cac:	d112      	bne.n	8015cd4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb0:	691b      	ldr	r3, [r3, #16]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d016      	beq.n	8015ce4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb8:	3310      	adds	r3, #16
 8015cba:	4618      	mov	r0, r3
 8015cbc:	f000 fe1a 	bl	80168f4 <xTaskRemoveFromEventList>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d00e      	beq.n	8015ce4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d00b      	beq.n	8015ce4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2201      	movs	r2, #1
 8015cd0:	601a      	str	r2, [r3, #0]
 8015cd2:	e007      	b.n	8015ce4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cd8:	3301      	adds	r3, #1
 8015cda:	b2db      	uxtb	r3, r3
 8015cdc:	b25a      	sxtb	r2, r3
 8015cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8015ce8:	e001      	b.n	8015cee <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8015cea:	2300      	movs	r3, #0
 8015cec:	637b      	str	r3, [r7, #52]	; 0x34
 8015cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015cf2:	693b      	ldr	r3, [r7, #16]
 8015cf4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	3738      	adds	r7, #56	; 0x38
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}

08015d02 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015d02:	b580      	push	{r7, lr}
 8015d04:	b084      	sub	sp, #16
 8015d06:	af00      	add	r7, sp, #0
 8015d08:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d109      	bne.n	8015d24 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8015d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d14:	f383 8811 	msr	BASEPRI, r3
 8015d18:	f3bf 8f6f 	isb	sy
 8015d1c:	f3bf 8f4f 	dsb	sy
 8015d20:	60bb      	str	r3, [r7, #8]
 8015d22:	e7fe      	b.n	8015d22 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8015d24:	f7fe ffcc 	bl	8014cc0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d2c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015d2e:	f7fe fff5 	bl	8014d1c <vPortExitCritical>

	return uxReturn;
 8015d32:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015d34:	4618      	mov	r0, r3
 8015d36:	3710      	adds	r7, #16
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}

08015d3c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8015d3c:	b480      	push	{r7}
 8015d3e:	b085      	sub	sp, #20
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d109      	bne.n	8015d5e <uxQueueMessagesWaitingFromISR+0x22>
 8015d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d4e:	f383 8811 	msr	BASEPRI, r3
 8015d52:	f3bf 8f6f 	isb	sy
 8015d56:	f3bf 8f4f 	dsb	sy
 8015d5a:	60bb      	str	r3, [r7, #8]
 8015d5c:	e7fe      	b.n	8015d5c <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d62:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8015d64:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015d66:	4618      	mov	r0, r3
 8015d68:	3714      	adds	r7, #20
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d70:	4770      	bx	lr

08015d72 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015d72:	b580      	push	{r7, lr}
 8015d74:	b084      	sub	sp, #16
 8015d76:	af00      	add	r7, sp, #0
 8015d78:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d109      	bne.n	8015d98 <vQueueDelete+0x26>
 8015d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d88:	f383 8811 	msr	BASEPRI, r3
 8015d8c:	f3bf 8f6f 	isb	sy
 8015d90:	f3bf 8f4f 	dsb	sy
 8015d94:	60bb      	str	r3, [r7, #8]
 8015d96:	e7fe      	b.n	8015d96 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015d98:	68f8      	ldr	r0, [r7, #12]
 8015d9a:	f000 f945 	bl	8016028 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d102      	bne.n	8015dae <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8015da8:	68f8      	ldr	r0, [r7, #12]
 8015daa:	f7ff f95b 	bl	8015064 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015dae:	bf00      	nop
 8015db0:	3710      	adds	r7, #16
 8015db2:	46bd      	mov	sp, r7
 8015db4:	bd80      	pop	{r7, pc}

08015db6 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015db6:	b580      	push	{r7, lr}
 8015db8:	b086      	sub	sp, #24
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	60f8      	str	r0, [r7, #12]
 8015dbe:	60b9      	str	r1, [r7, #8]
 8015dc0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015dca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d10d      	bne.n	8015df0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d14d      	bne.n	8015e78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	685b      	ldr	r3, [r3, #4]
 8015de0:	4618      	mov	r0, r3
 8015de2:	f000 fff3 	bl	8016dcc <xTaskPriorityDisinherit>
 8015de6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	2200      	movs	r2, #0
 8015dec:	605a      	str	r2, [r3, #4]
 8015dee:	e043      	b.n	8015e78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d119      	bne.n	8015e2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	6898      	ldr	r0, [r3, #8]
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dfe:	461a      	mov	r2, r3
 8015e00:	68b9      	ldr	r1, [r7, #8]
 8015e02:	f012 fb34 	bl	802846e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	689a      	ldr	r2, [r3, #8]
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e0e:	441a      	add	r2, r3
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	689a      	ldr	r2, [r3, #8]
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	685b      	ldr	r3, [r3, #4]
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	d32b      	bcc.n	8015e78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	681a      	ldr	r2, [r3, #0]
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	609a      	str	r2, [r3, #8]
 8015e28:	e026      	b.n	8015e78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	68d8      	ldr	r0, [r3, #12]
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e32:	461a      	mov	r2, r3
 8015e34:	68b9      	ldr	r1, [r7, #8]
 8015e36:	f012 fb1a 	bl	802846e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	68da      	ldr	r2, [r3, #12]
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e42:	425b      	negs	r3, r3
 8015e44:	441a      	add	r2, r3
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	68da      	ldr	r2, [r3, #12]
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	429a      	cmp	r2, r3
 8015e54:	d207      	bcs.n	8015e66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	685a      	ldr	r2, [r3, #4]
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e5e:	425b      	negs	r3, r3
 8015e60:	441a      	add	r2, r3
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	2b02      	cmp	r3, #2
 8015e6a:	d105      	bne.n	8015e78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015e6c:	693b      	ldr	r3, [r7, #16]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d002      	beq.n	8015e78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015e72:	693b      	ldr	r3, [r7, #16]
 8015e74:	3b01      	subs	r3, #1
 8015e76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8015e78:	693b      	ldr	r3, [r7, #16]
 8015e7a:	1c5a      	adds	r2, r3, #1
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015e80:	697b      	ldr	r3, [r7, #20]
}
 8015e82:	4618      	mov	r0, r3
 8015e84:	3718      	adds	r7, #24
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bd80      	pop	{r7, pc}

08015e8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015e8a:	b580      	push	{r7, lr}
 8015e8c:	b082      	sub	sp, #8
 8015e8e:	af00      	add	r7, sp, #0
 8015e90:	6078      	str	r0, [r7, #4]
 8015e92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d018      	beq.n	8015ece <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	68da      	ldr	r2, [r3, #12]
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ea4:	441a      	add	r2, r3
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	68da      	ldr	r2, [r3, #12]
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d303      	bcc.n	8015ebe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	68d9      	ldr	r1, [r3, #12]
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ec6:	461a      	mov	r2, r3
 8015ec8:	6838      	ldr	r0, [r7, #0]
 8015eca:	f012 fad0 	bl	802846e <memcpy>
	}
}
 8015ece:	bf00      	nop
 8015ed0:	3708      	adds	r7, #8
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}

08015ed6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015ed6:	b580      	push	{r7, lr}
 8015ed8:	b084      	sub	sp, #16
 8015eda:	af00      	add	r7, sp, #0
 8015edc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015ede:	f7fe feef 	bl	8014cc0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015ee8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015eea:	e011      	b.n	8015f10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d012      	beq.n	8015f1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	3324      	adds	r3, #36	; 0x24
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f000 fcfb 	bl	80168f4 <xTaskRemoveFromEventList>
 8015efe:	4603      	mov	r3, r0
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d001      	beq.n	8015f08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015f04:	f000 fdda 	bl	8016abc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015f08:	7bfb      	ldrb	r3, [r7, #15]
 8015f0a:	3b01      	subs	r3, #1
 8015f0c:	b2db      	uxtb	r3, r3
 8015f0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	dce9      	bgt.n	8015eec <prvUnlockQueue+0x16>
 8015f18:	e000      	b.n	8015f1c <prvUnlockQueue+0x46>
					break;
 8015f1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	22ff      	movs	r2, #255	; 0xff
 8015f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015f24:	f7fe fefa 	bl	8014d1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015f28:	f7fe feca 	bl	8014cc0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015f32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015f34:	e011      	b.n	8015f5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	691b      	ldr	r3, [r3, #16]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d012      	beq.n	8015f64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	3310      	adds	r3, #16
 8015f42:	4618      	mov	r0, r3
 8015f44:	f000 fcd6 	bl	80168f4 <xTaskRemoveFromEventList>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d001      	beq.n	8015f52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015f4e:	f000 fdb5 	bl	8016abc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015f52:	7bbb      	ldrb	r3, [r7, #14]
 8015f54:	3b01      	subs	r3, #1
 8015f56:	b2db      	uxtb	r3, r3
 8015f58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015f5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	dce9      	bgt.n	8015f36 <prvUnlockQueue+0x60>
 8015f62:	e000      	b.n	8015f66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015f64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	22ff      	movs	r2, #255	; 0xff
 8015f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015f6e:	f7fe fed5 	bl	8014d1c <vPortExitCritical>
}
 8015f72:	bf00      	nop
 8015f74:	3710      	adds	r7, #16
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}

08015f7a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015f7a:	b580      	push	{r7, lr}
 8015f7c:	b084      	sub	sp, #16
 8015f7e:	af00      	add	r7, sp, #0
 8015f80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015f82:	f7fe fe9d 	bl	8014cc0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d102      	bne.n	8015f94 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015f8e:	2301      	movs	r3, #1
 8015f90:	60fb      	str	r3, [r7, #12]
 8015f92:	e001      	b.n	8015f98 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015f94:	2300      	movs	r3, #0
 8015f96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015f98:	f7fe fec0 	bl	8014d1c <vPortExitCritical>

	return xReturn;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	3710      	adds	r7, #16
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd80      	pop	{r7, pc}

08015fa6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015fa6:	b580      	push	{r7, lr}
 8015fa8:	b084      	sub	sp, #16
 8015faa:	af00      	add	r7, sp, #0
 8015fac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015fae:	f7fe fe87 	bl	8014cc0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d102      	bne.n	8015fc4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015fbe:	2301      	movs	r3, #1
 8015fc0:	60fb      	str	r3, [r7, #12]
 8015fc2:	e001      	b.n	8015fc8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015fc8:	f7fe fea8 	bl	8014d1c <vPortExitCritical>

	return xReturn;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3710      	adds	r7, #16
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
	...

08015fd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015fd8:	b480      	push	{r7}
 8015fda:	b085      	sub	sp, #20
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
 8015fe0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	60fb      	str	r3, [r7, #12]
 8015fe6:	e014      	b.n	8016012 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015fe8:	4a0e      	ldr	r2, [pc, #56]	; (8016024 <vQueueAddToRegistry+0x4c>)
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d10b      	bne.n	801600c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015ff4:	490b      	ldr	r1, [pc, #44]	; (8016024 <vQueueAddToRegistry+0x4c>)
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	683a      	ldr	r2, [r7, #0]
 8015ffa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015ffe:	4a09      	ldr	r2, [pc, #36]	; (8016024 <vQueueAddToRegistry+0x4c>)
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	00db      	lsls	r3, r3, #3
 8016004:	4413      	add	r3, r2
 8016006:	687a      	ldr	r2, [r7, #4]
 8016008:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801600a:	e005      	b.n	8016018 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	3301      	adds	r3, #1
 8016010:	60fb      	str	r3, [r7, #12]
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	2b0f      	cmp	r3, #15
 8016016:	d9e7      	bls.n	8015fe8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016018:	bf00      	nop
 801601a:	3714      	adds	r7, #20
 801601c:	46bd      	mov	sp, r7
 801601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016022:	4770      	bx	lr
 8016024:	2000a1f0 	.word	0x2000a1f0

08016028 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016028:	b480      	push	{r7}
 801602a:	b085      	sub	sp, #20
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016030:	2300      	movs	r3, #0
 8016032:	60fb      	str	r3, [r7, #12]
 8016034:	e016      	b.n	8016064 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016036:	4a10      	ldr	r2, [pc, #64]	; (8016078 <vQueueUnregisterQueue+0x50>)
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	00db      	lsls	r3, r3, #3
 801603c:	4413      	add	r3, r2
 801603e:	685a      	ldr	r2, [r3, #4]
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	429a      	cmp	r2, r3
 8016044:	d10b      	bne.n	801605e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016046:	4a0c      	ldr	r2, [pc, #48]	; (8016078 <vQueueUnregisterQueue+0x50>)
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2100      	movs	r1, #0
 801604c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016050:	4a09      	ldr	r2, [pc, #36]	; (8016078 <vQueueUnregisterQueue+0x50>)
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	00db      	lsls	r3, r3, #3
 8016056:	4413      	add	r3, r2
 8016058:	2200      	movs	r2, #0
 801605a:	605a      	str	r2, [r3, #4]
				break;
 801605c:	e005      	b.n	801606a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	3301      	adds	r3, #1
 8016062:	60fb      	str	r3, [r7, #12]
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	2b0f      	cmp	r3, #15
 8016068:	d9e5      	bls.n	8016036 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801606a:	bf00      	nop
 801606c:	3714      	adds	r7, #20
 801606e:	46bd      	mov	sp, r7
 8016070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016074:	4770      	bx	lr
 8016076:	bf00      	nop
 8016078:	2000a1f0 	.word	0x2000a1f0

0801607c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801607c:	b580      	push	{r7, lr}
 801607e:	b08c      	sub	sp, #48	; 0x30
 8016080:	af04      	add	r7, sp, #16
 8016082:	60f8      	str	r0, [r7, #12]
 8016084:	60b9      	str	r1, [r7, #8]
 8016086:	607a      	str	r2, [r7, #4]
 8016088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801608c:	2b00      	cmp	r3, #0
 801608e:	d109      	bne.n	80160a4 <xTaskCreateStatic+0x28>
 8016090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016094:	f383 8811 	msr	BASEPRI, r3
 8016098:	f3bf 8f6f 	isb	sy
 801609c:	f3bf 8f4f 	dsb	sy
 80160a0:	61bb      	str	r3, [r7, #24]
 80160a2:	e7fe      	b.n	80160a2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80160a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d109      	bne.n	80160be <xTaskCreateStatic+0x42>
 80160aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ae:	f383 8811 	msr	BASEPRI, r3
 80160b2:	f3bf 8f6f 	isb	sy
 80160b6:	f3bf 8f4f 	dsb	sy
 80160ba:	617b      	str	r3, [r7, #20]
 80160bc:	e7fe      	b.n	80160bc <xTaskCreateStatic+0x40>

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80160be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d01e      	beq.n	8016102 <xTaskCreateStatic+0x86>
 80160c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d01b      	beq.n	8016102 <xTaskCreateStatic+0x86>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80160ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160cc:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80160ce:	69fb      	ldr	r3, [r7, #28]
 80160d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80160d4:	69fb      	ldr	r3, [r7, #28]
 80160d6:	2202      	movs	r2, #2
 80160d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80160dc:	2300      	movs	r3, #0
 80160de:	9303      	str	r3, [sp, #12]
 80160e0:	69fb      	ldr	r3, [r7, #28]
 80160e2:	9302      	str	r3, [sp, #8]
 80160e4:	f107 0310 	add.w	r3, r7, #16
 80160e8:	9301      	str	r3, [sp, #4]
 80160ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ec:	9300      	str	r3, [sp, #0]
 80160ee:	683b      	ldr	r3, [r7, #0]
 80160f0:	687a      	ldr	r2, [r7, #4]
 80160f2:	68b9      	ldr	r1, [r7, #8]
 80160f4:	68f8      	ldr	r0, [r7, #12]
 80160f6:	f000 f850 	bl	801619a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80160fa:	69f8      	ldr	r0, [r7, #28]
 80160fc:	f000 f8d6 	bl	80162ac <prvAddNewTaskToReadyList>
 8016100:	e001      	b.n	8016106 <xTaskCreateStatic+0x8a>
		}
		else
		{
			xReturn = NULL;
 8016102:	2300      	movs	r3, #0
 8016104:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 8016106:	693b      	ldr	r3, [r7, #16]
	}
 8016108:	4618      	mov	r0, r3
 801610a:	3720      	adds	r7, #32
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}

08016110 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016110:	b580      	push	{r7, lr}
 8016112:	b08c      	sub	sp, #48	; 0x30
 8016114:	af04      	add	r7, sp, #16
 8016116:	60f8      	str	r0, [r7, #12]
 8016118:	60b9      	str	r1, [r7, #8]
 801611a:	603b      	str	r3, [r7, #0]
 801611c:	4613      	mov	r3, r2
 801611e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016120:	88fb      	ldrh	r3, [r7, #6]
 8016122:	009b      	lsls	r3, r3, #2
 8016124:	4618      	mov	r0, r3
 8016126:	f7fe fedb 	bl	8014ee0 <pvPortMalloc>
 801612a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801612c:	697b      	ldr	r3, [r7, #20]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d00e      	beq.n	8016150 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8016132:	2060      	movs	r0, #96	; 0x60
 8016134:	f7fe fed4 	bl	8014ee0 <pvPortMalloc>
 8016138:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801613a:	69fb      	ldr	r3, [r7, #28]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d003      	beq.n	8016148 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016140:	69fb      	ldr	r3, [r7, #28]
 8016142:	697a      	ldr	r2, [r7, #20]
 8016144:	631a      	str	r2, [r3, #48]	; 0x30
 8016146:	e005      	b.n	8016154 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016148:	6978      	ldr	r0, [r7, #20]
 801614a:	f7fe ff8b 	bl	8015064 <vPortFree>
 801614e:	e001      	b.n	8016154 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016150:	2300      	movs	r3, #0
 8016152:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016154:	69fb      	ldr	r3, [r7, #28]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d017      	beq.n	801618a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801615a:	69fb      	ldr	r3, [r7, #28]
 801615c:	2200      	movs	r2, #0
 801615e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016162:	88fa      	ldrh	r2, [r7, #6]
 8016164:	2300      	movs	r3, #0
 8016166:	9303      	str	r3, [sp, #12]
 8016168:	69fb      	ldr	r3, [r7, #28]
 801616a:	9302      	str	r3, [sp, #8]
 801616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801616e:	9301      	str	r3, [sp, #4]
 8016170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016172:	9300      	str	r3, [sp, #0]
 8016174:	683b      	ldr	r3, [r7, #0]
 8016176:	68b9      	ldr	r1, [r7, #8]
 8016178:	68f8      	ldr	r0, [r7, #12]
 801617a:	f000 f80e 	bl	801619a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801617e:	69f8      	ldr	r0, [r7, #28]
 8016180:	f000 f894 	bl	80162ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016184:	2301      	movs	r3, #1
 8016186:	61bb      	str	r3, [r7, #24]
 8016188:	e002      	b.n	8016190 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801618a:	f04f 33ff 	mov.w	r3, #4294967295
 801618e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016190:	69bb      	ldr	r3, [r7, #24]
	}
 8016192:	4618      	mov	r0, r3
 8016194:	3720      	adds	r7, #32
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}

0801619a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 801619a:	b580      	push	{r7, lr}
 801619c:	b088      	sub	sp, #32
 801619e:	af00      	add	r7, sp, #0
 80161a0:	60f8      	str	r0, [r7, #12]
 80161a2:	60b9      	str	r1, [r7, #8]
 80161a4:	607a      	str	r2, [r7, #4]
 80161a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80161a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	009b      	lsls	r3, r3, #2
 80161b0:	461a      	mov	r2, r3
 80161b2:	21a5      	movs	r1, #165	; 0xa5
 80161b4:	f012 f966 	bl	8028484 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80161b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80161c2:	3b01      	subs	r3, #1
 80161c4:	009b      	lsls	r3, r3, #2
 80161c6:	4413      	add	r3, r2
 80161c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80161ca:	69bb      	ldr	r3, [r7, #24]
 80161cc:	f023 0307 	bic.w	r3, r3, #7
 80161d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80161d2:	69bb      	ldr	r3, [r7, #24]
 80161d4:	f003 0307 	and.w	r3, r3, #7
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d009      	beq.n	80161f0 <prvInitialiseNewTask+0x56>
 80161dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161e0:	f383 8811 	msr	BASEPRI, r3
 80161e4:	f3bf 8f6f 	isb	sy
 80161e8:	f3bf 8f4f 	dsb	sy
 80161ec:	617b      	str	r3, [r7, #20]
 80161ee:	e7fe      	b.n	80161ee <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80161f0:	2300      	movs	r3, #0
 80161f2:	61fb      	str	r3, [r7, #28]
 80161f4:	e012      	b.n	801621c <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80161f6:	68ba      	ldr	r2, [r7, #8]
 80161f8:	69fb      	ldr	r3, [r7, #28]
 80161fa:	4413      	add	r3, r2
 80161fc:	7819      	ldrb	r1, [r3, #0]
 80161fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016200:	69fb      	ldr	r3, [r7, #28]
 8016202:	4413      	add	r3, r2
 8016204:	3334      	adds	r3, #52	; 0x34
 8016206:	460a      	mov	r2, r1
 8016208:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 801620a:	68ba      	ldr	r2, [r7, #8]
 801620c:	69fb      	ldr	r3, [r7, #28]
 801620e:	4413      	add	r3, r2
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d006      	beq.n	8016224 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016216:	69fb      	ldr	r3, [r7, #28]
 8016218:	3301      	adds	r3, #1
 801621a:	61fb      	str	r3, [r7, #28]
 801621c:	69fb      	ldr	r3, [r7, #28]
 801621e:	2b0f      	cmp	r3, #15
 8016220:	d9e9      	bls.n	80161f6 <prvInitialiseNewTask+0x5c>
 8016222:	e000      	b.n	8016226 <prvInitialiseNewTask+0x8c>
		{
			break;
 8016224:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016228:	2200      	movs	r2, #0
 801622a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016230:	2b06      	cmp	r3, #6
 8016232:	d901      	bls.n	8016238 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016234:	2306      	movs	r3, #6
 8016236:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801623a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801623c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016242:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016246:	2200      	movs	r2, #0
 8016248:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801624c:	3304      	adds	r3, #4
 801624e:	4618      	mov	r0, r3
 8016250:	f7fe fb9b 	bl	801498a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016256:	3318      	adds	r3, #24
 8016258:	4618      	mov	r0, r3
 801625a:	f7fe fb96 	bl	801498a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016262:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016266:	f1c3 0207 	rsb	r2, r3, #7
 801626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801626c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016272:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8016274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016276:	2200      	movs	r2, #0
 8016278:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801627c:	2200      	movs	r2, #0
 801627e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016282:	2200      	movs	r2, #0
 8016284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016288:	683a      	ldr	r2, [r7, #0]
 801628a:	68f9      	ldr	r1, [r7, #12]
 801628c:	69b8      	ldr	r0, [r7, #24]
 801628e:	f7fe fc11 	bl	8014ab4 <pxPortInitialiseStack>
 8016292:	4602      	mov	r2, r0
 8016294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016296:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8016298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801629a:	2b00      	cmp	r3, #0
 801629c:	d002      	beq.n	80162a4 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80162a4:	bf00      	nop
 80162a6:	3720      	adds	r7, #32
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bd80      	pop	{r7, pc}

080162ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80162b4:	f7fe fd04 	bl	8014cc0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80162b8:	4b2c      	ldr	r3, [pc, #176]	; (801636c <prvAddNewTaskToReadyList+0xc0>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	3301      	adds	r3, #1
 80162be:	4a2b      	ldr	r2, [pc, #172]	; (801636c <prvAddNewTaskToReadyList+0xc0>)
 80162c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80162c2:	4b2b      	ldr	r3, [pc, #172]	; (8016370 <prvAddNewTaskToReadyList+0xc4>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d109      	bne.n	80162de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80162ca:	4a29      	ldr	r2, [pc, #164]	; (8016370 <prvAddNewTaskToReadyList+0xc4>)
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80162d0:	4b26      	ldr	r3, [pc, #152]	; (801636c <prvAddNewTaskToReadyList+0xc0>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	2b01      	cmp	r3, #1
 80162d6:	d110      	bne.n	80162fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80162d8:	f000 fc14 	bl	8016b04 <prvInitialiseTaskLists>
 80162dc:	e00d      	b.n	80162fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80162de:	4b25      	ldr	r3, [pc, #148]	; (8016374 <prvAddNewTaskToReadyList+0xc8>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d109      	bne.n	80162fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80162e6:	4b22      	ldr	r3, [pc, #136]	; (8016370 <prvAddNewTaskToReadyList+0xc4>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162f0:	429a      	cmp	r2, r3
 80162f2:	d802      	bhi.n	80162fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80162f4:	4a1e      	ldr	r2, [pc, #120]	; (8016370 <prvAddNewTaskToReadyList+0xc4>)
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80162fa:	4b1f      	ldr	r3, [pc, #124]	; (8016378 <prvAddNewTaskToReadyList+0xcc>)
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	3301      	adds	r3, #1
 8016300:	4a1d      	ldr	r2, [pc, #116]	; (8016378 <prvAddNewTaskToReadyList+0xcc>)
 8016302:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016304:	4b1c      	ldr	r3, [pc, #112]	; (8016378 <prvAddNewTaskToReadyList+0xcc>)
 8016306:	681a      	ldr	r2, [r3, #0]
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016310:	2201      	movs	r2, #1
 8016312:	409a      	lsls	r2, r3
 8016314:	4b19      	ldr	r3, [pc, #100]	; (801637c <prvAddNewTaskToReadyList+0xd0>)
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	4313      	orrs	r3, r2
 801631a:	4a18      	ldr	r2, [pc, #96]	; (801637c <prvAddNewTaskToReadyList+0xd0>)
 801631c:	6013      	str	r3, [r2, #0]
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016322:	4613      	mov	r3, r2
 8016324:	009b      	lsls	r3, r3, #2
 8016326:	4413      	add	r3, r2
 8016328:	009b      	lsls	r3, r3, #2
 801632a:	4a15      	ldr	r2, [pc, #84]	; (8016380 <prvAddNewTaskToReadyList+0xd4>)
 801632c:	441a      	add	r2, r3
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	3304      	adds	r3, #4
 8016332:	4619      	mov	r1, r3
 8016334:	4610      	mov	r0, r2
 8016336:	f7fe fb35 	bl	80149a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801633a:	f7fe fcef 	bl	8014d1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801633e:	4b0d      	ldr	r3, [pc, #52]	; (8016374 <prvAddNewTaskToReadyList+0xc8>)
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d00e      	beq.n	8016364 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016346:	4b0a      	ldr	r3, [pc, #40]	; (8016370 <prvAddNewTaskToReadyList+0xc4>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016350:	429a      	cmp	r2, r3
 8016352:	d207      	bcs.n	8016364 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016354:	4b0b      	ldr	r3, [pc, #44]	; (8016384 <prvAddNewTaskToReadyList+0xd8>)
 8016356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801635a:	601a      	str	r2, [r3, #0]
 801635c:	f3bf 8f4f 	dsb	sy
 8016360:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016364:	bf00      	nop
 8016366:	3708      	adds	r7, #8
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	20009374 	.word	0x20009374
 8016370:	20009274 	.word	0x20009274
 8016374:	20009380 	.word	0x20009380
 8016378:	20009390 	.word	0x20009390
 801637c:	2000937c 	.word	0x2000937c
 8016380:	20009278 	.word	0x20009278
 8016384:	e000ed04 	.word	0xe000ed04

08016388 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016388:	b580      	push	{r7, lr}
 801638a:	b084      	sub	sp, #16
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016390:	2300      	movs	r3, #0
 8016392:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d016      	beq.n	80163c8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801639a:	4b13      	ldr	r3, [pc, #76]	; (80163e8 <vTaskDelay+0x60>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d009      	beq.n	80163b6 <vTaskDelay+0x2e>
 80163a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a6:	f383 8811 	msr	BASEPRI, r3
 80163aa:	f3bf 8f6f 	isb	sy
 80163ae:	f3bf 8f4f 	dsb	sy
 80163b2:	60bb      	str	r3, [r7, #8]
 80163b4:	e7fe      	b.n	80163b4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80163b6:	f000 f87b 	bl	80164b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80163ba:	2100      	movs	r1, #0
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f000 fd9d 	bl	8016efc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80163c2:	f000 f883 	bl	80164cc <xTaskResumeAll>
 80163c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d107      	bne.n	80163de <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80163ce:	4b07      	ldr	r3, [pc, #28]	; (80163ec <vTaskDelay+0x64>)
 80163d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163d4:	601a      	str	r2, [r3, #0]
 80163d6:	f3bf 8f4f 	dsb	sy
 80163da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80163de:	bf00      	nop
 80163e0:	3710      	adds	r7, #16
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}
 80163e6:	bf00      	nop
 80163e8:	2000939c 	.word	0x2000939c
 80163ec:	e000ed04 	.word	0xe000ed04

080163f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b08a      	sub	sp, #40	; 0x28
 80163f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80163f6:	2300      	movs	r3, #0
 80163f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80163fa:	2300      	movs	r3, #0
 80163fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80163fe:	463a      	mov	r2, r7
 8016400:	1d39      	adds	r1, r7, #4
 8016402:	f107 0308 	add.w	r3, r7, #8
 8016406:	4618      	mov	r0, r3
 8016408:	f00d fe0c 	bl	8024024 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801640c:	6839      	ldr	r1, [r7, #0]
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	68ba      	ldr	r2, [r7, #8]
 8016412:	9202      	str	r2, [sp, #8]
 8016414:	9301      	str	r3, [sp, #4]
 8016416:	2300      	movs	r3, #0
 8016418:	9300      	str	r3, [sp, #0]
 801641a:	2300      	movs	r3, #0
 801641c:	460a      	mov	r2, r1
 801641e:	491e      	ldr	r1, [pc, #120]	; (8016498 <vTaskStartScheduler+0xa8>)
 8016420:	481e      	ldr	r0, [pc, #120]	; (801649c <vTaskStartScheduler+0xac>)
 8016422:	f7ff fe2b 	bl	801607c <xTaskCreateStatic>
 8016426:	4602      	mov	r2, r0
 8016428:	4b1d      	ldr	r3, [pc, #116]	; (80164a0 <vTaskStartScheduler+0xb0>)
 801642a:	601a      	str	r2, [r3, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801642c:	4b1c      	ldr	r3, [pc, #112]	; (80164a0 <vTaskStartScheduler+0xb0>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d002      	beq.n	801643a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016434:	2301      	movs	r3, #1
 8016436:	617b      	str	r3, [r7, #20]
 8016438:	e001      	b.n	801643e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801643a:	2300      	movs	r3, #0
 801643c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801643e:	697b      	ldr	r3, [r7, #20]
 8016440:	2b01      	cmp	r3, #1
 8016442:	d117      	bne.n	8016474 <vTaskStartScheduler+0x84>
 8016444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016448:	f383 8811 	msr	BASEPRI, r3
 801644c:	f3bf 8f6f 	isb	sy
 8016450:	f3bf 8f4f 	dsb	sy
 8016454:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016456:	4b13      	ldr	r3, [pc, #76]	; (80164a4 <vTaskStartScheduler+0xb4>)
 8016458:	f04f 32ff 	mov.w	r2, #4294967295
 801645c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801645e:	4b12      	ldr	r3, [pc, #72]	; (80164a8 <vTaskStartScheduler+0xb8>)
 8016460:	2201      	movs	r2, #1
 8016462:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8016464:	4b11      	ldr	r3, [pc, #68]	; (80164ac <vTaskStartScheduler+0xbc>)
 8016466:	2200      	movs	r2, #0
 8016468:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801646a:	f00d fdbd 	bl	8023fe8 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801646e:	f7fe fb9b 	bl	8014ba8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016472:	e00d      	b.n	8016490 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016474:	697b      	ldr	r3, [r7, #20]
 8016476:	f1b3 3fff 	cmp.w	r3, #4294967295
 801647a:	d109      	bne.n	8016490 <vTaskStartScheduler+0xa0>
 801647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016480:	f383 8811 	msr	BASEPRI, r3
 8016484:	f3bf 8f6f 	isb	sy
 8016488:	f3bf 8f4f 	dsb	sy
 801648c:	60fb      	str	r3, [r7, #12]
 801648e:	e7fe      	b.n	801648e <vTaskStartScheduler+0x9e>
}
 8016490:	bf00      	nop
 8016492:	3718      	adds	r7, #24
 8016494:	46bd      	mov	sp, r7
 8016496:	bd80      	pop	{r7, pc}
 8016498:	08028ee4 	.word	0x08028ee4
 801649c:	08016ad5 	.word	0x08016ad5
 80164a0:	20009398 	.word	0x20009398
 80164a4:	20009394 	.word	0x20009394
 80164a8:	20009380 	.word	0x20009380
 80164ac:	20009378 	.word	0x20009378

080164b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80164b0:	b480      	push	{r7}
 80164b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80164b4:	4b04      	ldr	r3, [pc, #16]	; (80164c8 <vTaskSuspendAll+0x18>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	3301      	adds	r3, #1
 80164ba:	4a03      	ldr	r2, [pc, #12]	; (80164c8 <vTaskSuspendAll+0x18>)
 80164bc:	6013      	str	r3, [r2, #0]
}
 80164be:	bf00      	nop
 80164c0:	46bd      	mov	sp, r7
 80164c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c6:	4770      	bx	lr
 80164c8:	2000939c 	.word	0x2000939c

080164cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b084      	sub	sp, #16
 80164d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80164d2:	2300      	movs	r3, #0
 80164d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80164d6:	2300      	movs	r3, #0
 80164d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80164da:	4b41      	ldr	r3, [pc, #260]	; (80165e0 <xTaskResumeAll+0x114>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d109      	bne.n	80164f6 <xTaskResumeAll+0x2a>
 80164e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164e6:	f383 8811 	msr	BASEPRI, r3
 80164ea:	f3bf 8f6f 	isb	sy
 80164ee:	f3bf 8f4f 	dsb	sy
 80164f2:	603b      	str	r3, [r7, #0]
 80164f4:	e7fe      	b.n	80164f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80164f6:	f7fe fbe3 	bl	8014cc0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80164fa:	4b39      	ldr	r3, [pc, #228]	; (80165e0 <xTaskResumeAll+0x114>)
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	3b01      	subs	r3, #1
 8016500:	4a37      	ldr	r2, [pc, #220]	; (80165e0 <xTaskResumeAll+0x114>)
 8016502:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016504:	4b36      	ldr	r3, [pc, #216]	; (80165e0 <xTaskResumeAll+0x114>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d161      	bne.n	80165d0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801650c:	4b35      	ldr	r3, [pc, #212]	; (80165e4 <xTaskResumeAll+0x118>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d05d      	beq.n	80165d0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016514:	e02e      	b.n	8016574 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8016516:	4b34      	ldr	r3, [pc, #208]	; (80165e8 <xTaskResumeAll+0x11c>)
 8016518:	68db      	ldr	r3, [r3, #12]
 801651a:	68db      	ldr	r3, [r3, #12]
 801651c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	3318      	adds	r3, #24
 8016522:	4618      	mov	r0, r3
 8016524:	f7fe fa9b 	bl	8014a5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	3304      	adds	r3, #4
 801652c:	4618      	mov	r0, r3
 801652e:	f7fe fa96 	bl	8014a5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016536:	2201      	movs	r2, #1
 8016538:	409a      	lsls	r2, r3
 801653a:	4b2c      	ldr	r3, [pc, #176]	; (80165ec <xTaskResumeAll+0x120>)
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	4313      	orrs	r3, r2
 8016540:	4a2a      	ldr	r2, [pc, #168]	; (80165ec <xTaskResumeAll+0x120>)
 8016542:	6013      	str	r3, [r2, #0]
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016548:	4613      	mov	r3, r2
 801654a:	009b      	lsls	r3, r3, #2
 801654c:	4413      	add	r3, r2
 801654e:	009b      	lsls	r3, r3, #2
 8016550:	4a27      	ldr	r2, [pc, #156]	; (80165f0 <xTaskResumeAll+0x124>)
 8016552:	441a      	add	r2, r3
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	3304      	adds	r3, #4
 8016558:	4619      	mov	r1, r3
 801655a:	4610      	mov	r0, r2
 801655c:	f7fe fa22 	bl	80149a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016564:	4b23      	ldr	r3, [pc, #140]	; (80165f4 <xTaskResumeAll+0x128>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801656a:	429a      	cmp	r2, r3
 801656c:	d302      	bcc.n	8016574 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 801656e:	4b22      	ldr	r3, [pc, #136]	; (80165f8 <xTaskResumeAll+0x12c>)
 8016570:	2201      	movs	r2, #1
 8016572:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016574:	4b1c      	ldr	r3, [pc, #112]	; (80165e8 <xTaskResumeAll+0x11c>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d1cc      	bne.n	8016516 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d001      	beq.n	8016586 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016582:	f000 fb69 	bl	8016c58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016586:	4b1d      	ldr	r3, [pc, #116]	; (80165fc <xTaskResumeAll+0x130>)
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d010      	beq.n	80165b4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016592:	f000 f859 	bl	8016648 <xTaskIncrementTick>
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	d002      	beq.n	80165a2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 801659c:	4b16      	ldr	r3, [pc, #88]	; (80165f8 <xTaskResumeAll+0x12c>)
 801659e:	2201      	movs	r2, #1
 80165a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	3b01      	subs	r3, #1
 80165a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d1f1      	bne.n	8016592 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80165ae:	4b13      	ldr	r3, [pc, #76]	; (80165fc <xTaskResumeAll+0x130>)
 80165b0:	2200      	movs	r2, #0
 80165b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80165b4:	4b10      	ldr	r3, [pc, #64]	; (80165f8 <xTaskResumeAll+0x12c>)
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d009      	beq.n	80165d0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80165bc:	2301      	movs	r3, #1
 80165be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80165c0:	4b0f      	ldr	r3, [pc, #60]	; (8016600 <xTaskResumeAll+0x134>)
 80165c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165c6:	601a      	str	r2, [r3, #0]
 80165c8:	f3bf 8f4f 	dsb	sy
 80165cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80165d0:	f7fe fba4 	bl	8014d1c <vPortExitCritical>

	return xAlreadyYielded;
 80165d4:	68bb      	ldr	r3, [r7, #8]
}
 80165d6:	4618      	mov	r0, r3
 80165d8:	3710      	adds	r7, #16
 80165da:	46bd      	mov	sp, r7
 80165dc:	bd80      	pop	{r7, pc}
 80165de:	bf00      	nop
 80165e0:	2000939c 	.word	0x2000939c
 80165e4:	20009374 	.word	0x20009374
 80165e8:	20009334 	.word	0x20009334
 80165ec:	2000937c 	.word	0x2000937c
 80165f0:	20009278 	.word	0x20009278
 80165f4:	20009274 	.word	0x20009274
 80165f8:	20009388 	.word	0x20009388
 80165fc:	20009384 	.word	0x20009384
 8016600:	e000ed04 	.word	0xe000ed04

08016604 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016604:	b480      	push	{r7}
 8016606:	b083      	sub	sp, #12
 8016608:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801660a:	4b05      	ldr	r3, [pc, #20]	; (8016620 <xTaskGetTickCount+0x1c>)
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016610:	687b      	ldr	r3, [r7, #4]
}
 8016612:	4618      	mov	r0, r3
 8016614:	370c      	adds	r7, #12
 8016616:	46bd      	mov	sp, r7
 8016618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801661c:	4770      	bx	lr
 801661e:	bf00      	nop
 8016620:	20009378 	.word	0x20009378

08016624 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b082      	sub	sp, #8
 8016628:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801662a:	f7fe fc1b 	bl	8014e64 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801662e:	2300      	movs	r3, #0
 8016630:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016632:	4b04      	ldr	r3, [pc, #16]	; (8016644 <xTaskGetTickCountFromISR+0x20>)
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016638:	683b      	ldr	r3, [r7, #0]
}
 801663a:	4618      	mov	r0, r3
 801663c:	3708      	adds	r7, #8
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}
 8016642:	bf00      	nop
 8016644:	20009378 	.word	0x20009378

08016648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b086      	sub	sp, #24
 801664c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801664e:	2300      	movs	r3, #0
 8016650:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016652:	4b50      	ldr	r3, [pc, #320]	; (8016794 <xTaskIncrementTick+0x14c>)
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	2b00      	cmp	r3, #0
 8016658:	f040 808c 	bne.w	8016774 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 801665c:	4b4e      	ldr	r3, [pc, #312]	; (8016798 <xTaskIncrementTick+0x150>)
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	3301      	adds	r3, #1
 8016662:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016664:	4a4c      	ldr	r2, [pc, #304]	; (8016798 <xTaskIncrementTick+0x150>)
 8016666:	693b      	ldr	r3, [r7, #16]
 8016668:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 801666a:	693b      	ldr	r3, [r7, #16]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d11f      	bne.n	80166b0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8016670:	4b4a      	ldr	r3, [pc, #296]	; (801679c <xTaskIncrementTick+0x154>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d009      	beq.n	801668e <xTaskIncrementTick+0x46>
 801667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667e:	f383 8811 	msr	BASEPRI, r3
 8016682:	f3bf 8f6f 	isb	sy
 8016686:	f3bf 8f4f 	dsb	sy
 801668a:	603b      	str	r3, [r7, #0]
 801668c:	e7fe      	b.n	801668c <xTaskIncrementTick+0x44>
 801668e:	4b43      	ldr	r3, [pc, #268]	; (801679c <xTaskIncrementTick+0x154>)
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	60fb      	str	r3, [r7, #12]
 8016694:	4b42      	ldr	r3, [pc, #264]	; (80167a0 <xTaskIncrementTick+0x158>)
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	4a40      	ldr	r2, [pc, #256]	; (801679c <xTaskIncrementTick+0x154>)
 801669a:	6013      	str	r3, [r2, #0]
 801669c:	4a40      	ldr	r2, [pc, #256]	; (80167a0 <xTaskIncrementTick+0x158>)
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	6013      	str	r3, [r2, #0]
 80166a2:	4b40      	ldr	r3, [pc, #256]	; (80167a4 <xTaskIncrementTick+0x15c>)
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	3301      	adds	r3, #1
 80166a8:	4a3e      	ldr	r2, [pc, #248]	; (80167a4 <xTaskIncrementTick+0x15c>)
 80166aa:	6013      	str	r3, [r2, #0]
 80166ac:	f000 fad4 	bl	8016c58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80166b0:	4b3d      	ldr	r3, [pc, #244]	; (80167a8 <xTaskIncrementTick+0x160>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	693a      	ldr	r2, [r7, #16]
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d34d      	bcc.n	8016756 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80166ba:	4b38      	ldr	r3, [pc, #224]	; (801679c <xTaskIncrementTick+0x154>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d101      	bne.n	80166c8 <xTaskIncrementTick+0x80>
 80166c4:	2301      	movs	r3, #1
 80166c6:	e000      	b.n	80166ca <xTaskIncrementTick+0x82>
 80166c8:	2300      	movs	r3, #0
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d004      	beq.n	80166d8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80166ce:	4b36      	ldr	r3, [pc, #216]	; (80167a8 <xTaskIncrementTick+0x160>)
 80166d0:	f04f 32ff 	mov.w	r2, #4294967295
 80166d4:	601a      	str	r2, [r3, #0]
					break;
 80166d6:	e03e      	b.n	8016756 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80166d8:	4b30      	ldr	r3, [pc, #192]	; (801679c <xTaskIncrementTick+0x154>)
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	68db      	ldr	r3, [r3, #12]
 80166de:	68db      	ldr	r3, [r3, #12]
 80166e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80166e2:	68bb      	ldr	r3, [r7, #8]
 80166e4:	685b      	ldr	r3, [r3, #4]
 80166e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80166e8:	693a      	ldr	r2, [r7, #16]
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	429a      	cmp	r2, r3
 80166ee:	d203      	bcs.n	80166f8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80166f0:	4a2d      	ldr	r2, [pc, #180]	; (80167a8 <xTaskIncrementTick+0x160>)
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	6013      	str	r3, [r2, #0]
						break;
 80166f6:	e02e      	b.n	8016756 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80166f8:	68bb      	ldr	r3, [r7, #8]
 80166fa:	3304      	adds	r3, #4
 80166fc:	4618      	mov	r0, r3
 80166fe:	f7fe f9ae 	bl	8014a5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016706:	2b00      	cmp	r3, #0
 8016708:	d004      	beq.n	8016714 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801670a:	68bb      	ldr	r3, [r7, #8]
 801670c:	3318      	adds	r3, #24
 801670e:	4618      	mov	r0, r3
 8016710:	f7fe f9a5 	bl	8014a5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016718:	2201      	movs	r2, #1
 801671a:	409a      	lsls	r2, r3
 801671c:	4b23      	ldr	r3, [pc, #140]	; (80167ac <xTaskIncrementTick+0x164>)
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	4313      	orrs	r3, r2
 8016722:	4a22      	ldr	r2, [pc, #136]	; (80167ac <xTaskIncrementTick+0x164>)
 8016724:	6013      	str	r3, [r2, #0]
 8016726:	68bb      	ldr	r3, [r7, #8]
 8016728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801672a:	4613      	mov	r3, r2
 801672c:	009b      	lsls	r3, r3, #2
 801672e:	4413      	add	r3, r2
 8016730:	009b      	lsls	r3, r3, #2
 8016732:	4a1f      	ldr	r2, [pc, #124]	; (80167b0 <xTaskIncrementTick+0x168>)
 8016734:	441a      	add	r2, r3
 8016736:	68bb      	ldr	r3, [r7, #8]
 8016738:	3304      	adds	r3, #4
 801673a:	4619      	mov	r1, r3
 801673c:	4610      	mov	r0, r2
 801673e:	f7fe f931 	bl	80149a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016746:	4b1b      	ldr	r3, [pc, #108]	; (80167b4 <xTaskIncrementTick+0x16c>)
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801674c:	429a      	cmp	r2, r3
 801674e:	d3b4      	bcc.n	80166ba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8016750:	2301      	movs	r3, #1
 8016752:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016754:	e7b1      	b.n	80166ba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016756:	4b17      	ldr	r3, [pc, #92]	; (80167b4 <xTaskIncrementTick+0x16c>)
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801675c:	4914      	ldr	r1, [pc, #80]	; (80167b0 <xTaskIncrementTick+0x168>)
 801675e:	4613      	mov	r3, r2
 8016760:	009b      	lsls	r3, r3, #2
 8016762:	4413      	add	r3, r2
 8016764:	009b      	lsls	r3, r3, #2
 8016766:	440b      	add	r3, r1
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	2b01      	cmp	r3, #1
 801676c:	d907      	bls.n	801677e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 801676e:	2301      	movs	r3, #1
 8016770:	617b      	str	r3, [r7, #20]
 8016772:	e004      	b.n	801677e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016774:	4b10      	ldr	r3, [pc, #64]	; (80167b8 <xTaskIncrementTick+0x170>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	3301      	adds	r3, #1
 801677a:	4a0f      	ldr	r2, [pc, #60]	; (80167b8 <xTaskIncrementTick+0x170>)
 801677c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801677e:	4b0f      	ldr	r3, [pc, #60]	; (80167bc <xTaskIncrementTick+0x174>)
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d001      	beq.n	801678a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8016786:	2301      	movs	r3, #1
 8016788:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801678a:	697b      	ldr	r3, [r7, #20]
}
 801678c:	4618      	mov	r0, r3
 801678e:	3718      	adds	r7, #24
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}
 8016794:	2000939c 	.word	0x2000939c
 8016798:	20009378 	.word	0x20009378
 801679c:	2000932c 	.word	0x2000932c
 80167a0:	20009330 	.word	0x20009330
 80167a4:	2000938c 	.word	0x2000938c
 80167a8:	20009394 	.word	0x20009394
 80167ac:	2000937c 	.word	0x2000937c
 80167b0:	20009278 	.word	0x20009278
 80167b4:	20009274 	.word	0x20009274
 80167b8:	20009384 	.word	0x20009384
 80167bc:	20009388 	.word	0x20009388

080167c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b086      	sub	sp, #24
 80167c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80167c6:	4b32      	ldr	r3, [pc, #200]	; (8016890 <vTaskSwitchContext+0xd0>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d003      	beq.n	80167d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80167ce:	4b31      	ldr	r3, [pc, #196]	; (8016894 <vTaskSwitchContext+0xd4>)
 80167d0:	2201      	movs	r2, #1
 80167d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80167d4:	e057      	b.n	8016886 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 80167d6:	4b2f      	ldr	r3, [pc, #188]	; (8016894 <vTaskSwitchContext+0xd4>)
 80167d8:	2200      	movs	r2, #0
 80167da:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80167dc:	f00d fc16 	bl	802400c <getRunTimeCounterValue>
 80167e0:	4602      	mov	r2, r0
 80167e2:	4b2d      	ldr	r3, [pc, #180]	; (8016898 <vTaskSwitchContext+0xd8>)
 80167e4:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80167e6:	4b2c      	ldr	r3, [pc, #176]	; (8016898 <vTaskSwitchContext+0xd8>)
 80167e8:	681a      	ldr	r2, [r3, #0]
 80167ea:	4b2c      	ldr	r3, [pc, #176]	; (801689c <vTaskSwitchContext+0xdc>)
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	429a      	cmp	r2, r3
 80167f0:	d909      	bls.n	8016806 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80167f2:	4b2b      	ldr	r3, [pc, #172]	; (80168a0 <vTaskSwitchContext+0xe0>)
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80167f8:	4a27      	ldr	r2, [pc, #156]	; (8016898 <vTaskSwitchContext+0xd8>)
 80167fa:	6810      	ldr	r0, [r2, #0]
 80167fc:	4a27      	ldr	r2, [pc, #156]	; (801689c <vTaskSwitchContext+0xdc>)
 80167fe:	6812      	ldr	r2, [r2, #0]
 8016800:	1a82      	subs	r2, r0, r2
 8016802:	440a      	add	r2, r1
 8016804:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8016806:	4b24      	ldr	r3, [pc, #144]	; (8016898 <vTaskSwitchContext+0xd8>)
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	4a24      	ldr	r2, [pc, #144]	; (801689c <vTaskSwitchContext+0xdc>)
 801680c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801680e:	4b25      	ldr	r3, [pc, #148]	; (80168a4 <vTaskSwitchContext+0xe4>)
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	fab3 f383 	clz	r3, r3
 801681a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801681c:	7afb      	ldrb	r3, [r7, #11]
 801681e:	f1c3 031f 	rsb	r3, r3, #31
 8016822:	617b      	str	r3, [r7, #20]
 8016824:	4920      	ldr	r1, [pc, #128]	; (80168a8 <vTaskSwitchContext+0xe8>)
 8016826:	697a      	ldr	r2, [r7, #20]
 8016828:	4613      	mov	r3, r2
 801682a:	009b      	lsls	r3, r3, #2
 801682c:	4413      	add	r3, r2
 801682e:	009b      	lsls	r3, r3, #2
 8016830:	440b      	add	r3, r1
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d109      	bne.n	801684c <vTaskSwitchContext+0x8c>
	__asm volatile
 8016838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801683c:	f383 8811 	msr	BASEPRI, r3
 8016840:	f3bf 8f6f 	isb	sy
 8016844:	f3bf 8f4f 	dsb	sy
 8016848:	607b      	str	r3, [r7, #4]
 801684a:	e7fe      	b.n	801684a <vTaskSwitchContext+0x8a>
 801684c:	697a      	ldr	r2, [r7, #20]
 801684e:	4613      	mov	r3, r2
 8016850:	009b      	lsls	r3, r3, #2
 8016852:	4413      	add	r3, r2
 8016854:	009b      	lsls	r3, r3, #2
 8016856:	4a14      	ldr	r2, [pc, #80]	; (80168a8 <vTaskSwitchContext+0xe8>)
 8016858:	4413      	add	r3, r2
 801685a:	613b      	str	r3, [r7, #16]
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	685b      	ldr	r3, [r3, #4]
 8016860:	685a      	ldr	r2, [r3, #4]
 8016862:	693b      	ldr	r3, [r7, #16]
 8016864:	605a      	str	r2, [r3, #4]
 8016866:	693b      	ldr	r3, [r7, #16]
 8016868:	685a      	ldr	r2, [r3, #4]
 801686a:	693b      	ldr	r3, [r7, #16]
 801686c:	3308      	adds	r3, #8
 801686e:	429a      	cmp	r2, r3
 8016870:	d104      	bne.n	801687c <vTaskSwitchContext+0xbc>
 8016872:	693b      	ldr	r3, [r7, #16]
 8016874:	685b      	ldr	r3, [r3, #4]
 8016876:	685a      	ldr	r2, [r3, #4]
 8016878:	693b      	ldr	r3, [r7, #16]
 801687a:	605a      	str	r2, [r3, #4]
 801687c:	693b      	ldr	r3, [r7, #16]
 801687e:	685b      	ldr	r3, [r3, #4]
 8016880:	68db      	ldr	r3, [r3, #12]
 8016882:	4a07      	ldr	r2, [pc, #28]	; (80168a0 <vTaskSwitchContext+0xe0>)
 8016884:	6013      	str	r3, [r2, #0]
}
 8016886:	bf00      	nop
 8016888:	3718      	adds	r7, #24
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}
 801688e:	bf00      	nop
 8016890:	2000939c 	.word	0x2000939c
 8016894:	20009388 	.word	0x20009388
 8016898:	200093a4 	.word	0x200093a4
 801689c:	200093a0 	.word	0x200093a0
 80168a0:	20009274 	.word	0x20009274
 80168a4:	2000937c 	.word	0x2000937c
 80168a8:	20009278 	.word	0x20009278

080168ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b084      	sub	sp, #16
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
 80168b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d109      	bne.n	80168d0 <vTaskPlaceOnEventList+0x24>
 80168bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c0:	f383 8811 	msr	BASEPRI, r3
 80168c4:	f3bf 8f6f 	isb	sy
 80168c8:	f3bf 8f4f 	dsb	sy
 80168cc:	60fb      	str	r3, [r7, #12]
 80168ce:	e7fe      	b.n	80168ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80168d0:	4b07      	ldr	r3, [pc, #28]	; (80168f0 <vTaskPlaceOnEventList+0x44>)
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	3318      	adds	r3, #24
 80168d6:	4619      	mov	r1, r3
 80168d8:	6878      	ldr	r0, [r7, #4]
 80168da:	f7fe f887 	bl	80149ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80168de:	2101      	movs	r1, #1
 80168e0:	6838      	ldr	r0, [r7, #0]
 80168e2:	f000 fb0b 	bl	8016efc <prvAddCurrentTaskToDelayedList>
}
 80168e6:	bf00      	nop
 80168e8:	3710      	adds	r7, #16
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd80      	pop	{r7, pc}
 80168ee:	bf00      	nop
 80168f0:	20009274 	.word	0x20009274

080168f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b086      	sub	sp, #24
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	68db      	ldr	r3, [r3, #12]
 8016900:	68db      	ldr	r3, [r3, #12]
 8016902:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016904:	693b      	ldr	r3, [r7, #16]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d109      	bne.n	801691e <xTaskRemoveFromEventList+0x2a>
 801690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801690e:	f383 8811 	msr	BASEPRI, r3
 8016912:	f3bf 8f6f 	isb	sy
 8016916:	f3bf 8f4f 	dsb	sy
 801691a:	60fb      	str	r3, [r7, #12]
 801691c:	e7fe      	b.n	801691c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	3318      	adds	r3, #24
 8016922:	4618      	mov	r0, r3
 8016924:	f7fe f89b 	bl	8014a5e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016928:	4b1d      	ldr	r3, [pc, #116]	; (80169a0 <xTaskRemoveFromEventList+0xac>)
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d11c      	bne.n	801696a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016930:	693b      	ldr	r3, [r7, #16]
 8016932:	3304      	adds	r3, #4
 8016934:	4618      	mov	r0, r3
 8016936:	f7fe f892 	bl	8014a5e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801693a:	693b      	ldr	r3, [r7, #16]
 801693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801693e:	2201      	movs	r2, #1
 8016940:	409a      	lsls	r2, r3
 8016942:	4b18      	ldr	r3, [pc, #96]	; (80169a4 <xTaskRemoveFromEventList+0xb0>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	4313      	orrs	r3, r2
 8016948:	4a16      	ldr	r2, [pc, #88]	; (80169a4 <xTaskRemoveFromEventList+0xb0>)
 801694a:	6013      	str	r3, [r2, #0]
 801694c:	693b      	ldr	r3, [r7, #16]
 801694e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016950:	4613      	mov	r3, r2
 8016952:	009b      	lsls	r3, r3, #2
 8016954:	4413      	add	r3, r2
 8016956:	009b      	lsls	r3, r3, #2
 8016958:	4a13      	ldr	r2, [pc, #76]	; (80169a8 <xTaskRemoveFromEventList+0xb4>)
 801695a:	441a      	add	r2, r3
 801695c:	693b      	ldr	r3, [r7, #16]
 801695e:	3304      	adds	r3, #4
 8016960:	4619      	mov	r1, r3
 8016962:	4610      	mov	r0, r2
 8016964:	f7fe f81e 	bl	80149a4 <vListInsertEnd>
 8016968:	e005      	b.n	8016976 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801696a:	693b      	ldr	r3, [r7, #16]
 801696c:	3318      	adds	r3, #24
 801696e:	4619      	mov	r1, r3
 8016970:	480e      	ldr	r0, [pc, #56]	; (80169ac <xTaskRemoveFromEventList+0xb8>)
 8016972:	f7fe f817 	bl	80149a4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016976:	693b      	ldr	r3, [r7, #16]
 8016978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801697a:	4b0d      	ldr	r3, [pc, #52]	; (80169b0 <xTaskRemoveFromEventList+0xbc>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016980:	429a      	cmp	r2, r3
 8016982:	d905      	bls.n	8016990 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016984:	2301      	movs	r3, #1
 8016986:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016988:	4b0a      	ldr	r3, [pc, #40]	; (80169b4 <xTaskRemoveFromEventList+0xc0>)
 801698a:	2201      	movs	r2, #1
 801698c:	601a      	str	r2, [r3, #0]
 801698e:	e001      	b.n	8016994 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8016990:	2300      	movs	r3, #0
 8016992:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8016994:	697b      	ldr	r3, [r7, #20]
}
 8016996:	4618      	mov	r0, r3
 8016998:	3718      	adds	r7, #24
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
 801699e:	bf00      	nop
 80169a0:	2000939c 	.word	0x2000939c
 80169a4:	2000937c 	.word	0x2000937c
 80169a8:	20009278 	.word	0x20009278
 80169ac:	20009334 	.word	0x20009334
 80169b0:	20009274 	.word	0x20009274
 80169b4:	20009388 	.word	0x20009388

080169b8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80169b8:	b480      	push	{r7}
 80169ba:	b085      	sub	sp, #20
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d109      	bne.n	80169da <vTaskSetTimeOutState+0x22>
 80169c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ca:	f383 8811 	msr	BASEPRI, r3
 80169ce:	f3bf 8f6f 	isb	sy
 80169d2:	f3bf 8f4f 	dsb	sy
 80169d6:	60fb      	str	r3, [r7, #12]
 80169d8:	e7fe      	b.n	80169d8 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80169da:	4b07      	ldr	r3, [pc, #28]	; (80169f8 <vTaskSetTimeOutState+0x40>)
 80169dc:	681a      	ldr	r2, [r3, #0]
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80169e2:	4b06      	ldr	r3, [pc, #24]	; (80169fc <vTaskSetTimeOutState+0x44>)
 80169e4:	681a      	ldr	r2, [r3, #0]
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	605a      	str	r2, [r3, #4]
}
 80169ea:	bf00      	nop
 80169ec:	3714      	adds	r7, #20
 80169ee:	46bd      	mov	sp, r7
 80169f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f4:	4770      	bx	lr
 80169f6:	bf00      	nop
 80169f8:	2000938c 	.word	0x2000938c
 80169fc:	20009378 	.word	0x20009378

08016a00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b086      	sub	sp, #24
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
 8016a08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d109      	bne.n	8016a24 <xTaskCheckForTimeOut+0x24>
 8016a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a14:	f383 8811 	msr	BASEPRI, r3
 8016a18:	f3bf 8f6f 	isb	sy
 8016a1c:	f3bf 8f4f 	dsb	sy
 8016a20:	60fb      	str	r3, [r7, #12]
 8016a22:	e7fe      	b.n	8016a22 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d109      	bne.n	8016a3e <xTaskCheckForTimeOut+0x3e>
 8016a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a2e:	f383 8811 	msr	BASEPRI, r3
 8016a32:	f3bf 8f6f 	isb	sy
 8016a36:	f3bf 8f4f 	dsb	sy
 8016a3a:	60bb      	str	r3, [r7, #8]
 8016a3c:	e7fe      	b.n	8016a3c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8016a3e:	f7fe f93f 	bl	8014cc0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016a42:	4b1c      	ldr	r3, [pc, #112]	; (8016ab4 <xTaskCheckForTimeOut+0xb4>)
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016a48:	683b      	ldr	r3, [r7, #0]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a50:	d102      	bne.n	8016a58 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016a52:	2300      	movs	r3, #0
 8016a54:	617b      	str	r3, [r7, #20]
 8016a56:	e026      	b.n	8016aa6 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	681a      	ldr	r2, [r3, #0]
 8016a5c:	4b16      	ldr	r3, [pc, #88]	; (8016ab8 <xTaskCheckForTimeOut+0xb8>)
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	429a      	cmp	r2, r3
 8016a62:	d007      	beq.n	8016a74 <xTaskCheckForTimeOut+0x74>
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	685a      	ldr	r2, [r3, #4]
 8016a68:	693b      	ldr	r3, [r7, #16]
 8016a6a:	429a      	cmp	r2, r3
 8016a6c:	d802      	bhi.n	8016a74 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016a6e:	2301      	movs	r3, #1
 8016a70:	617b      	str	r3, [r7, #20]
 8016a72:	e018      	b.n	8016aa6 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	685b      	ldr	r3, [r3, #4]
 8016a78:	693a      	ldr	r2, [r7, #16]
 8016a7a:	1ad2      	subs	r2, r2, r3
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d20e      	bcs.n	8016aa2 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8016a84:	683b      	ldr	r3, [r7, #0]
 8016a86:	681a      	ldr	r2, [r3, #0]
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6859      	ldr	r1, [r3, #4]
 8016a8c:	693b      	ldr	r3, [r7, #16]
 8016a8e:	1acb      	subs	r3, r1, r3
 8016a90:	441a      	add	r2, r3
 8016a92:	683b      	ldr	r3, [r7, #0]
 8016a94:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8016a96:	6878      	ldr	r0, [r7, #4]
 8016a98:	f7ff ff8e 	bl	80169b8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	617b      	str	r3, [r7, #20]
 8016aa0:	e001      	b.n	8016aa6 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8016aa6:	f7fe f939 	bl	8014d1c <vPortExitCritical>

	return xReturn;
 8016aaa:	697b      	ldr	r3, [r7, #20]
}
 8016aac:	4618      	mov	r0, r3
 8016aae:	3718      	adds	r7, #24
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	bd80      	pop	{r7, pc}
 8016ab4:	20009378 	.word	0x20009378
 8016ab8:	2000938c 	.word	0x2000938c

08016abc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016abc:	b480      	push	{r7}
 8016abe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016ac0:	4b03      	ldr	r3, [pc, #12]	; (8016ad0 <vTaskMissedYield+0x14>)
 8016ac2:	2201      	movs	r2, #1
 8016ac4:	601a      	str	r2, [r3, #0]
}
 8016ac6:	bf00      	nop
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ace:	4770      	bx	lr
 8016ad0:	20009388 	.word	0x20009388

08016ad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b082      	sub	sp, #8
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016adc:	f000 f852 	bl	8016b84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016ae0:	4b06      	ldr	r3, [pc, #24]	; (8016afc <prvIdleTask+0x28>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	2b01      	cmp	r3, #1
 8016ae6:	d9f9      	bls.n	8016adc <prvIdleTask+0x8>
			{
				taskYIELD();
 8016ae8:	4b05      	ldr	r3, [pc, #20]	; (8016b00 <prvIdleTask+0x2c>)
 8016aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016aee:	601a      	str	r2, [r3, #0]
 8016af0:	f3bf 8f4f 	dsb	sy
 8016af4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016af8:	e7f0      	b.n	8016adc <prvIdleTask+0x8>
 8016afa:	bf00      	nop
 8016afc:	20009278 	.word	0x20009278
 8016b00:	e000ed04 	.word	0xe000ed04

08016b04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b082      	sub	sp, #8
 8016b08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	607b      	str	r3, [r7, #4]
 8016b0e:	e00c      	b.n	8016b2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016b10:	687a      	ldr	r2, [r7, #4]
 8016b12:	4613      	mov	r3, r2
 8016b14:	009b      	lsls	r3, r3, #2
 8016b16:	4413      	add	r3, r2
 8016b18:	009b      	lsls	r3, r3, #2
 8016b1a:	4a12      	ldr	r2, [pc, #72]	; (8016b64 <prvInitialiseTaskLists+0x60>)
 8016b1c:	4413      	add	r3, r2
 8016b1e:	4618      	mov	r0, r3
 8016b20:	f7fd ff13 	bl	801494a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	3301      	adds	r3, #1
 8016b28:	607b      	str	r3, [r7, #4]
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	2b06      	cmp	r3, #6
 8016b2e:	d9ef      	bls.n	8016b10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016b30:	480d      	ldr	r0, [pc, #52]	; (8016b68 <prvInitialiseTaskLists+0x64>)
 8016b32:	f7fd ff0a 	bl	801494a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016b36:	480d      	ldr	r0, [pc, #52]	; (8016b6c <prvInitialiseTaskLists+0x68>)
 8016b38:	f7fd ff07 	bl	801494a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016b3c:	480c      	ldr	r0, [pc, #48]	; (8016b70 <prvInitialiseTaskLists+0x6c>)
 8016b3e:	f7fd ff04 	bl	801494a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016b42:	480c      	ldr	r0, [pc, #48]	; (8016b74 <prvInitialiseTaskLists+0x70>)
 8016b44:	f7fd ff01 	bl	801494a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016b48:	480b      	ldr	r0, [pc, #44]	; (8016b78 <prvInitialiseTaskLists+0x74>)
 8016b4a:	f7fd fefe 	bl	801494a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016b4e:	4b0b      	ldr	r3, [pc, #44]	; (8016b7c <prvInitialiseTaskLists+0x78>)
 8016b50:	4a05      	ldr	r2, [pc, #20]	; (8016b68 <prvInitialiseTaskLists+0x64>)
 8016b52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016b54:	4b0a      	ldr	r3, [pc, #40]	; (8016b80 <prvInitialiseTaskLists+0x7c>)
 8016b56:	4a05      	ldr	r2, [pc, #20]	; (8016b6c <prvInitialiseTaskLists+0x68>)
 8016b58:	601a      	str	r2, [r3, #0]
}
 8016b5a:	bf00      	nop
 8016b5c:	3708      	adds	r7, #8
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bd80      	pop	{r7, pc}
 8016b62:	bf00      	nop
 8016b64:	20009278 	.word	0x20009278
 8016b68:	20009304 	.word	0x20009304
 8016b6c:	20009318 	.word	0x20009318
 8016b70:	20009334 	.word	0x20009334
 8016b74:	20009348 	.word	0x20009348
 8016b78:	20009360 	.word	0x20009360
 8016b7c:	2000932c 	.word	0x2000932c
 8016b80:	20009330 	.word	0x20009330

08016b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b082      	sub	sp, #8
 8016b88:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016b8a:	e028      	b.n	8016bde <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8016b8c:	f7ff fc90 	bl	80164b0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8016b90:	4b17      	ldr	r3, [pc, #92]	; (8016bf0 <prvCheckTasksWaitingTermination+0x6c>)
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	bf0c      	ite	eq
 8016b98:	2301      	moveq	r3, #1
 8016b9a:	2300      	movne	r3, #0
 8016b9c:	b2db      	uxtb	r3, r3
 8016b9e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8016ba0:	f7ff fc94 	bl	80164cc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d119      	bne.n	8016bde <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8016baa:	f7fe f889 	bl	8014cc0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8016bae:	4b10      	ldr	r3, [pc, #64]	; (8016bf0 <prvCheckTasksWaitingTermination+0x6c>)
 8016bb0:	68db      	ldr	r3, [r3, #12]
 8016bb2:	68db      	ldr	r3, [r3, #12]
 8016bb4:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016bb6:	683b      	ldr	r3, [r7, #0]
 8016bb8:	3304      	adds	r3, #4
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7fd ff4f 	bl	8014a5e <uxListRemove>
					--uxCurrentNumberOfTasks;
 8016bc0:	4b0c      	ldr	r3, [pc, #48]	; (8016bf4 <prvCheckTasksWaitingTermination+0x70>)
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	3b01      	subs	r3, #1
 8016bc6:	4a0b      	ldr	r2, [pc, #44]	; (8016bf4 <prvCheckTasksWaitingTermination+0x70>)
 8016bc8:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8016bca:	4b0b      	ldr	r3, [pc, #44]	; (8016bf8 <prvCheckTasksWaitingTermination+0x74>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	3b01      	subs	r3, #1
 8016bd0:	4a09      	ldr	r2, [pc, #36]	; (8016bf8 <prvCheckTasksWaitingTermination+0x74>)
 8016bd2:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8016bd4:	f7fe f8a2 	bl	8014d1c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8016bd8:	6838      	ldr	r0, [r7, #0]
 8016bda:	f000 f80f 	bl	8016bfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016bde:	4b06      	ldr	r3, [pc, #24]	; (8016bf8 <prvCheckTasksWaitingTermination+0x74>)
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d1d2      	bne.n	8016b8c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016be6:	bf00      	nop
 8016be8:	3708      	adds	r7, #8
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}
 8016bee:	bf00      	nop
 8016bf0:	20009348 	.word	0x20009348
 8016bf4:	20009374 	.word	0x20009374
 8016bf8:	2000935c 	.word	0x2000935c

08016bfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b084      	sub	sp, #16
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d108      	bne.n	8016c20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7fe fa26 	bl	8015064 <vPortFree>
				vPortFree( pxTCB );
 8016c18:	6878      	ldr	r0, [r7, #4]
 8016c1a:	f7fe fa23 	bl	8015064 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016c1e:	e017      	b.n	8016c50 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8016c26:	2b01      	cmp	r3, #1
 8016c28:	d103      	bne.n	8016c32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016c2a:	6878      	ldr	r0, [r7, #4]
 8016c2c:	f7fe fa1a 	bl	8015064 <vPortFree>
	}
 8016c30:	e00e      	b.n	8016c50 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8016c38:	2b02      	cmp	r3, #2
 8016c3a:	d009      	beq.n	8016c50 <prvDeleteTCB+0x54>
 8016c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c40:	f383 8811 	msr	BASEPRI, r3
 8016c44:	f3bf 8f6f 	isb	sy
 8016c48:	f3bf 8f4f 	dsb	sy
 8016c4c:	60fb      	str	r3, [r7, #12]
 8016c4e:	e7fe      	b.n	8016c4e <prvDeleteTCB+0x52>
	}
 8016c50:	bf00      	nop
 8016c52:	3710      	adds	r7, #16
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}

08016c58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016c58:	b480      	push	{r7}
 8016c5a:	b083      	sub	sp, #12
 8016c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016c5e:	4b0f      	ldr	r3, [pc, #60]	; (8016c9c <prvResetNextTaskUnblockTime+0x44>)
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d101      	bne.n	8016c6c <prvResetNextTaskUnblockTime+0x14>
 8016c68:	2301      	movs	r3, #1
 8016c6a:	e000      	b.n	8016c6e <prvResetNextTaskUnblockTime+0x16>
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d004      	beq.n	8016c7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016c72:	4b0b      	ldr	r3, [pc, #44]	; (8016ca0 <prvResetNextTaskUnblockTime+0x48>)
 8016c74:	f04f 32ff 	mov.w	r2, #4294967295
 8016c78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016c7a:	e008      	b.n	8016c8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8016c7c:	4b07      	ldr	r3, [pc, #28]	; (8016c9c <prvResetNextTaskUnblockTime+0x44>)
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	68db      	ldr	r3, [r3, #12]
 8016c82:	68db      	ldr	r3, [r3, #12]
 8016c84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	685b      	ldr	r3, [r3, #4]
 8016c8a:	4a05      	ldr	r2, [pc, #20]	; (8016ca0 <prvResetNextTaskUnblockTime+0x48>)
 8016c8c:	6013      	str	r3, [r2, #0]
}
 8016c8e:	bf00      	nop
 8016c90:	370c      	adds	r7, #12
 8016c92:	46bd      	mov	sp, r7
 8016c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c98:	4770      	bx	lr
 8016c9a:	bf00      	nop
 8016c9c:	2000932c 	.word	0x2000932c
 8016ca0:	20009394 	.word	0x20009394

08016ca4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016ca4:	b480      	push	{r7}
 8016ca6:	b083      	sub	sp, #12
 8016ca8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016caa:	4b0b      	ldr	r3, [pc, #44]	; (8016cd8 <xTaskGetSchedulerState+0x34>)
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d102      	bne.n	8016cb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	607b      	str	r3, [r7, #4]
 8016cb6:	e008      	b.n	8016cca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016cb8:	4b08      	ldr	r3, [pc, #32]	; (8016cdc <xTaskGetSchedulerState+0x38>)
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d102      	bne.n	8016cc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016cc0:	2302      	movs	r3, #2
 8016cc2:	607b      	str	r3, [r7, #4]
 8016cc4:	e001      	b.n	8016cca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016cca:	687b      	ldr	r3, [r7, #4]
	}
 8016ccc:	4618      	mov	r0, r3
 8016cce:	370c      	adds	r7, #12
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd6:	4770      	bx	lr
 8016cd8:	20009380 	.word	0x20009380
 8016cdc:	2000939c 	.word	0x2000939c

08016ce0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b084      	sub	sp, #16
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d062      	beq.n	8016db8 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cf6:	4b32      	ldr	r3, [pc, #200]	; (8016dc0 <vTaskPriorityInherit+0xe0>)
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cfc:	429a      	cmp	r2, r3
 8016cfe:	d25b      	bcs.n	8016db8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	699b      	ldr	r3, [r3, #24]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	db06      	blt.n	8016d16 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d08:	4b2d      	ldr	r3, [pc, #180]	; (8016dc0 <vTaskPriorityInherit+0xe0>)
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d0e:	f1c3 0207 	rsb	r2, r3, #7
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	6959      	ldr	r1, [r3, #20]
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d1e:	4613      	mov	r3, r2
 8016d20:	009b      	lsls	r3, r3, #2
 8016d22:	4413      	add	r3, r2
 8016d24:	009b      	lsls	r3, r3, #2
 8016d26:	4a27      	ldr	r2, [pc, #156]	; (8016dc4 <vTaskPriorityInherit+0xe4>)
 8016d28:	4413      	add	r3, r2
 8016d2a:	4299      	cmp	r1, r3
 8016d2c:	d101      	bne.n	8016d32 <vTaskPriorityInherit+0x52>
 8016d2e:	2301      	movs	r3, #1
 8016d30:	e000      	b.n	8016d34 <vTaskPriorityInherit+0x54>
 8016d32:	2300      	movs	r3, #0
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d03a      	beq.n	8016dae <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	3304      	adds	r3, #4
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f7fd fe8e 	bl	8014a5e <uxListRemove>
 8016d42:	4603      	mov	r3, r0
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d115      	bne.n	8016d74 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d4c:	491d      	ldr	r1, [pc, #116]	; (8016dc4 <vTaskPriorityInherit+0xe4>)
 8016d4e:	4613      	mov	r3, r2
 8016d50:	009b      	lsls	r3, r3, #2
 8016d52:	4413      	add	r3, r2
 8016d54:	009b      	lsls	r3, r3, #2
 8016d56:	440b      	add	r3, r1
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d10a      	bne.n	8016d74 <vTaskPriorityInherit+0x94>
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d62:	2201      	movs	r2, #1
 8016d64:	fa02 f303 	lsl.w	r3, r2, r3
 8016d68:	43da      	mvns	r2, r3
 8016d6a:	4b17      	ldr	r3, [pc, #92]	; (8016dc8 <vTaskPriorityInherit+0xe8>)
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	4013      	ands	r3, r2
 8016d70:	4a15      	ldr	r2, [pc, #84]	; (8016dc8 <vTaskPriorityInherit+0xe8>)
 8016d72:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016d74:	4b12      	ldr	r3, [pc, #72]	; (8016dc0 <vTaskPriorityInherit+0xe0>)
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d82:	2201      	movs	r2, #1
 8016d84:	409a      	lsls	r2, r3
 8016d86:	4b10      	ldr	r3, [pc, #64]	; (8016dc8 <vTaskPriorityInherit+0xe8>)
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	4313      	orrs	r3, r2
 8016d8c:	4a0e      	ldr	r2, [pc, #56]	; (8016dc8 <vTaskPriorityInherit+0xe8>)
 8016d8e:	6013      	str	r3, [r2, #0]
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d94:	4613      	mov	r3, r2
 8016d96:	009b      	lsls	r3, r3, #2
 8016d98:	4413      	add	r3, r2
 8016d9a:	009b      	lsls	r3, r3, #2
 8016d9c:	4a09      	ldr	r2, [pc, #36]	; (8016dc4 <vTaskPriorityInherit+0xe4>)
 8016d9e:	441a      	add	r2, r3
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	3304      	adds	r3, #4
 8016da4:	4619      	mov	r1, r3
 8016da6:	4610      	mov	r0, r2
 8016da8:	f7fd fdfc 	bl	80149a4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016dac:	e004      	b.n	8016db8 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016dae:	4b04      	ldr	r3, [pc, #16]	; (8016dc0 <vTaskPriorityInherit+0xe0>)
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8016db8:	bf00      	nop
 8016dba:	3710      	adds	r7, #16
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	bd80      	pop	{r7, pc}
 8016dc0:	20009274 	.word	0x20009274
 8016dc4:	20009278 	.word	0x20009278
 8016dc8:	2000937c 	.word	0x2000937c

08016dcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b086      	sub	sp, #24
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d06c      	beq.n	8016ebc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016de2:	4b39      	ldr	r3, [pc, #228]	; (8016ec8 <xTaskPriorityDisinherit+0xfc>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	693a      	ldr	r2, [r7, #16]
 8016de8:	429a      	cmp	r2, r3
 8016dea:	d009      	beq.n	8016e00 <xTaskPriorityDisinherit+0x34>
 8016dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016df0:	f383 8811 	msr	BASEPRI, r3
 8016df4:	f3bf 8f6f 	isb	sy
 8016df8:	f3bf 8f4f 	dsb	sy
 8016dfc:	60fb      	str	r3, [r7, #12]
 8016dfe:	e7fe      	b.n	8016dfe <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8016e00:	693b      	ldr	r3, [r7, #16]
 8016e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d109      	bne.n	8016e1c <xTaskPriorityDisinherit+0x50>
 8016e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e0c:	f383 8811 	msr	BASEPRI, r3
 8016e10:	f3bf 8f6f 	isb	sy
 8016e14:	f3bf 8f4f 	dsb	sy
 8016e18:	60bb      	str	r3, [r7, #8]
 8016e1a:	e7fe      	b.n	8016e1a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8016e1c:	693b      	ldr	r3, [r7, #16]
 8016e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e20:	1e5a      	subs	r2, r3, #1
 8016e22:	693b      	ldr	r3, [r7, #16]
 8016e24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016e26:	693b      	ldr	r3, [r7, #16]
 8016e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e2a:	693b      	ldr	r3, [r7, #16]
 8016e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016e2e:	429a      	cmp	r2, r3
 8016e30:	d044      	beq.n	8016ebc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016e32:	693b      	ldr	r3, [r7, #16]
 8016e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d140      	bne.n	8016ebc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016e3a:	693b      	ldr	r3, [r7, #16]
 8016e3c:	3304      	adds	r3, #4
 8016e3e:	4618      	mov	r0, r3
 8016e40:	f7fd fe0d 	bl	8014a5e <uxListRemove>
 8016e44:	4603      	mov	r3, r0
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d115      	bne.n	8016e76 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016e4a:	693b      	ldr	r3, [r7, #16]
 8016e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e4e:	491f      	ldr	r1, [pc, #124]	; (8016ecc <xTaskPriorityDisinherit+0x100>)
 8016e50:	4613      	mov	r3, r2
 8016e52:	009b      	lsls	r3, r3, #2
 8016e54:	4413      	add	r3, r2
 8016e56:	009b      	lsls	r3, r3, #2
 8016e58:	440b      	add	r3, r1
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d10a      	bne.n	8016e76 <xTaskPriorityDisinherit+0xaa>
 8016e60:	693b      	ldr	r3, [r7, #16]
 8016e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e64:	2201      	movs	r2, #1
 8016e66:	fa02 f303 	lsl.w	r3, r2, r3
 8016e6a:	43da      	mvns	r2, r3
 8016e6c:	4b18      	ldr	r3, [pc, #96]	; (8016ed0 <xTaskPriorityDisinherit+0x104>)
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	4013      	ands	r3, r2
 8016e72:	4a17      	ldr	r2, [pc, #92]	; (8016ed0 <xTaskPriorityDisinherit+0x104>)
 8016e74:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016e76:	693b      	ldr	r3, [r7, #16]
 8016e78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016e7a:	693b      	ldr	r3, [r7, #16]
 8016e7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e7e:	693b      	ldr	r3, [r7, #16]
 8016e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e82:	f1c3 0207 	rsb	r2, r3, #7
 8016e86:	693b      	ldr	r3, [r7, #16]
 8016e88:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016e8a:	693b      	ldr	r3, [r7, #16]
 8016e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e8e:	2201      	movs	r2, #1
 8016e90:	409a      	lsls	r2, r3
 8016e92:	4b0f      	ldr	r3, [pc, #60]	; (8016ed0 <xTaskPriorityDisinherit+0x104>)
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	4313      	orrs	r3, r2
 8016e98:	4a0d      	ldr	r2, [pc, #52]	; (8016ed0 <xTaskPriorityDisinherit+0x104>)
 8016e9a:	6013      	str	r3, [r2, #0]
 8016e9c:	693b      	ldr	r3, [r7, #16]
 8016e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ea0:	4613      	mov	r3, r2
 8016ea2:	009b      	lsls	r3, r3, #2
 8016ea4:	4413      	add	r3, r2
 8016ea6:	009b      	lsls	r3, r3, #2
 8016ea8:	4a08      	ldr	r2, [pc, #32]	; (8016ecc <xTaskPriorityDisinherit+0x100>)
 8016eaa:	441a      	add	r2, r3
 8016eac:	693b      	ldr	r3, [r7, #16]
 8016eae:	3304      	adds	r3, #4
 8016eb0:	4619      	mov	r1, r3
 8016eb2:	4610      	mov	r0, r2
 8016eb4:	f7fd fd76 	bl	80149a4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016eb8:	2301      	movs	r3, #1
 8016eba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016ebc:	697b      	ldr	r3, [r7, #20]
	}
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	3718      	adds	r7, #24
 8016ec2:	46bd      	mov	sp, r7
 8016ec4:	bd80      	pop	{r7, pc}
 8016ec6:	bf00      	nop
 8016ec8:	20009274 	.word	0x20009274
 8016ecc:	20009278 	.word	0x20009278
 8016ed0:	2000937c 	.word	0x2000937c

08016ed4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8016ed4:	b480      	push	{r7}
 8016ed6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016ed8:	4b07      	ldr	r3, [pc, #28]	; (8016ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d004      	beq.n	8016eea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016ee0:	4b05      	ldr	r3, [pc, #20]	; (8016ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016ee6:	3201      	adds	r2, #1
 8016ee8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8016eea:	4b03      	ldr	r3, [pc, #12]	; (8016ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8016eec:	681b      	ldr	r3, [r3, #0]
	}
 8016eee:	4618      	mov	r0, r3
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef6:	4770      	bx	lr
 8016ef8:	20009274 	.word	0x20009274

08016efc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b084      	sub	sp, #16
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
 8016f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016f06:	4b29      	ldr	r3, [pc, #164]	; (8016fac <prvAddCurrentTaskToDelayedList+0xb0>)
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016f0c:	4b28      	ldr	r3, [pc, #160]	; (8016fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	3304      	adds	r3, #4
 8016f12:	4618      	mov	r0, r3
 8016f14:	f7fd fda3 	bl	8014a5e <uxListRemove>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d10b      	bne.n	8016f36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8016f1e:	4b24      	ldr	r3, [pc, #144]	; (8016fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f24:	2201      	movs	r2, #1
 8016f26:	fa02 f303 	lsl.w	r3, r2, r3
 8016f2a:	43da      	mvns	r2, r3
 8016f2c:	4b21      	ldr	r3, [pc, #132]	; (8016fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	4013      	ands	r3, r2
 8016f32:	4a20      	ldr	r2, [pc, #128]	; (8016fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016f34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f3c:	d10a      	bne.n	8016f54 <prvAddCurrentTaskToDelayedList+0x58>
 8016f3e:	683b      	ldr	r3, [r7, #0]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d007      	beq.n	8016f54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016f44:	4b1a      	ldr	r3, [pc, #104]	; (8016fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	3304      	adds	r3, #4
 8016f4a:	4619      	mov	r1, r3
 8016f4c:	481a      	ldr	r0, [pc, #104]	; (8016fb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016f4e:	f7fd fd29 	bl	80149a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016f52:	e026      	b.n	8016fa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016f54:	68fa      	ldr	r2, [r7, #12]
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	4413      	add	r3, r2
 8016f5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016f5c:	4b14      	ldr	r3, [pc, #80]	; (8016fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	68ba      	ldr	r2, [r7, #8]
 8016f62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016f64:	68ba      	ldr	r2, [r7, #8]
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	429a      	cmp	r2, r3
 8016f6a:	d209      	bcs.n	8016f80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016f6c:	4b13      	ldr	r3, [pc, #76]	; (8016fbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8016f6e:	681a      	ldr	r2, [r3, #0]
 8016f70:	4b0f      	ldr	r3, [pc, #60]	; (8016fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	3304      	adds	r3, #4
 8016f76:	4619      	mov	r1, r3
 8016f78:	4610      	mov	r0, r2
 8016f7a:	f7fd fd37 	bl	80149ec <vListInsert>
}
 8016f7e:	e010      	b.n	8016fa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016f80:	4b0f      	ldr	r3, [pc, #60]	; (8016fc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016f82:	681a      	ldr	r2, [r3, #0]
 8016f84:	4b0a      	ldr	r3, [pc, #40]	; (8016fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	3304      	adds	r3, #4
 8016f8a:	4619      	mov	r1, r3
 8016f8c:	4610      	mov	r0, r2
 8016f8e:	f7fd fd2d 	bl	80149ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016f92:	4b0c      	ldr	r3, [pc, #48]	; (8016fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	68ba      	ldr	r2, [r7, #8]
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d202      	bcs.n	8016fa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016f9c:	4a09      	ldr	r2, [pc, #36]	; (8016fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016f9e:	68bb      	ldr	r3, [r7, #8]
 8016fa0:	6013      	str	r3, [r2, #0]
}
 8016fa2:	bf00      	nop
 8016fa4:	3710      	adds	r7, #16
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}
 8016faa:	bf00      	nop
 8016fac:	20009378 	.word	0x20009378
 8016fb0:	20009274 	.word	0x20009274
 8016fb4:	2000937c 	.word	0x2000937c
 8016fb8:	20009360 	.word	0x20009360
 8016fbc:	20009330 	.word	0x20009330
 8016fc0:	2000932c 	.word	0x2000932c
 8016fc4:	20009394 	.word	0x20009394

08016fc8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b084      	sub	sp, #16
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
 8016fd0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	330c      	adds	r3, #12
 8016fd8:	461a      	mov	r2, r3
 8016fda:	6839      	ldr	r1, [r7, #0]
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f002 f87b 	bl	80190d8 <tcpip_send_msg_wait_sem>
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8016fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d103      	bne.n	8016ff6 <netconn_apimsg+0x2e>
    return apimsg->err;
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016ff4:	e001      	b.n	8016ffa <netconn_apimsg+0x32>
  }
  return err;
 8016ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	3710      	adds	r7, #16
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bd80      	pop	{r7, pc}
	...

08017004 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b08a      	sub	sp, #40	; 0x28
 8017008:	af00      	add	r7, sp, #0
 801700a:	4603      	mov	r3, r0
 801700c:	603a      	str	r2, [r7, #0]
 801700e:	71fb      	strb	r3, [r7, #7]
 8017010:	460b      	mov	r3, r1
 8017012:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8017014:	79fb      	ldrb	r3, [r7, #7]
 8017016:	6839      	ldr	r1, [r7, #0]
 8017018:	4618      	mov	r0, r3
 801701a:	f000 feb7 	bl	8017d8c <netconn_alloc>
 801701e:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8017020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017022:	2b00      	cmp	r3, #0
 8017024:	d054      	beq.n	80170d0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8017026:	79bb      	ldrb	r3, [r7, #6]
 8017028:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 801702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801702c:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801702e:	f107 030c 	add.w	r3, r7, #12
 8017032:	4619      	mov	r1, r3
 8017034:	4829      	ldr	r0, [pc, #164]	; (80170dc <netconn_new_with_proto_and_callback+0xd8>)
 8017036:	f7ff ffc7 	bl	8016fc8 <netconn_apimsg>
 801703a:	4603      	mov	r3, r0
 801703c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8017040:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017044:	2b00      	cmp	r3, #0
 8017046:	d043      	beq.n	80170d0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8017048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801704a:	685b      	ldr	r3, [r3, #4]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d005      	beq.n	801705c <netconn_new_with_proto_and_callback+0x58>
 8017050:	4b23      	ldr	r3, [pc, #140]	; (80170e0 <netconn_new_with_proto_and_callback+0xdc>)
 8017052:	2289      	movs	r2, #137	; 0x89
 8017054:	4923      	ldr	r1, [pc, #140]	; (80170e4 <netconn_new_with_proto_and_callback+0xe0>)
 8017056:	4824      	ldr	r0, [pc, #144]	; (80170e8 <netconn_new_with_proto_and_callback+0xe4>)
 8017058:	f010 f9ea 	bl	8027430 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 801705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801705e:	3310      	adds	r3, #16
 8017060:	4618      	mov	r0, r3
 8017062:	f00b fccd 	bl	8022a00 <sys_mbox_valid>
 8017066:	4603      	mov	r3, r0
 8017068:	2b00      	cmp	r3, #0
 801706a:	d105      	bne.n	8017078 <netconn_new_with_proto_and_callback+0x74>
 801706c:	4b1c      	ldr	r3, [pc, #112]	; (80170e0 <netconn_new_with_proto_and_callback+0xdc>)
 801706e:	228a      	movs	r2, #138	; 0x8a
 8017070:	491e      	ldr	r1, [pc, #120]	; (80170ec <netconn_new_with_proto_and_callback+0xe8>)
 8017072:	481d      	ldr	r0, [pc, #116]	; (80170e8 <netconn_new_with_proto_and_callback+0xe4>)
 8017074:	f010 f9dc 	bl	8027430 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8017078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801707a:	3314      	adds	r3, #20
 801707c:	4618      	mov	r0, r3
 801707e:	f00b fcbf 	bl	8022a00 <sys_mbox_valid>
 8017082:	4603      	mov	r3, r0
 8017084:	2b00      	cmp	r3, #0
 8017086:	d005      	beq.n	8017094 <netconn_new_with_proto_and_callback+0x90>
 8017088:	4b15      	ldr	r3, [pc, #84]	; (80170e0 <netconn_new_with_proto_and_callback+0xdc>)
 801708a:	228c      	movs	r2, #140	; 0x8c
 801708c:	4918      	ldr	r1, [pc, #96]	; (80170f0 <netconn_new_with_proto_and_callback+0xec>)
 801708e:	4816      	ldr	r0, [pc, #88]	; (80170e8 <netconn_new_with_proto_and_callback+0xe4>)
 8017090:	f010 f9ce 	bl	8027430 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8017094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017096:	330c      	adds	r3, #12
 8017098:	4618      	mov	r0, r3
 801709a:	f00b fd42 	bl	8022b22 <sys_sem_valid>
 801709e:	4603      	mov	r3, r0
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d105      	bne.n	80170b0 <netconn_new_with_proto_and_callback+0xac>
 80170a4:	4b0e      	ldr	r3, [pc, #56]	; (80170e0 <netconn_new_with_proto_and_callback+0xdc>)
 80170a6:	228f      	movs	r2, #143	; 0x8f
 80170a8:	4912      	ldr	r1, [pc, #72]	; (80170f4 <netconn_new_with_proto_and_callback+0xf0>)
 80170aa:	480f      	ldr	r0, [pc, #60]	; (80170e8 <netconn_new_with_proto_and_callback+0xe4>)
 80170ac:	f010 f9c0 	bl	8027430 <iprintf>
      sys_sem_free(&conn->op_completed);
 80170b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b2:	330c      	adds	r3, #12
 80170b4:	4618      	mov	r0, r3
 80170b6:	f00b fd27 	bl	8022b08 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80170ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170bc:	3310      	adds	r3, #16
 80170be:	4618      	mov	r0, r3
 80170c0:	f00b fc02 	bl	80228c8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80170c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80170c6:	2006      	movs	r0, #6
 80170c8:	f004 ff48 	bl	801bf5c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80170cc:	2300      	movs	r3, #0
 80170ce:	e000      	b.n	80170d2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80170d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80170d2:	4618      	mov	r0, r3
 80170d4:	3728      	adds	r7, #40	; 0x28
 80170d6:	46bd      	mov	sp, r7
 80170d8:	bd80      	pop	{r7, pc}
 80170da:	bf00      	nop
 80170dc:	08017d35 	.word	0x08017d35
 80170e0:	08028eec 	.word	0x08028eec
 80170e4:	08028f20 	.word	0x08028f20
 80170e8:	08028f44 	.word	0x08028f44
 80170ec:	08028f6c 	.word	0x08028f6c
 80170f0:	08028f84 	.word	0x08028f84
 80170f4:	08028fa8 	.word	0x08028fa8

080170f8 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b088      	sub	sp, #32
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d101      	bne.n	801710a <netconn_delete+0x12>
    return ERR_OK;
 8017106:	2300      	movs	r3, #0
 8017108:	e016      	b.n	8017138 <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801710e:	2329      	movs	r3, #41	; 0x29
 8017110:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8017112:	f107 0308 	add.w	r3, r7, #8
 8017116:	4619      	mov	r1, r3
 8017118:	4809      	ldr	r0, [pc, #36]	; (8017140 <netconn_delete+0x48>)
 801711a:	f7ff ff55 	bl	8016fc8 <netconn_apimsg>
 801711e:	4603      	mov	r3, r0
 8017120:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8017122:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d002      	beq.n	8017130 <netconn_delete+0x38>
    return err;
 801712a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801712e:	e003      	b.n	8017138 <netconn_delete+0x40>
  }

  netconn_free(conn);
 8017130:	6878      	ldr	r0, [r7, #4]
 8017132:	f000 fe95 	bl	8017e60 <netconn_free>

  return ERR_OK;
 8017136:	2300      	movs	r3, #0
}
 8017138:	4618      	mov	r0, r3
 801713a:	3720      	adds	r7, #32
 801713c:	46bd      	mov	sp, r7
 801713e:	bd80      	pop	{r7, pc}
 8017140:	080182e5 	.word	0x080182e5

08017144 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b08a      	sub	sp, #40	; 0x28
 8017148:	af00      	add	r7, sp, #0
 801714a:	60f8      	str	r0, [r7, #12]
 801714c:	60b9      	str	r1, [r7, #8]
 801714e:	4613      	mov	r3, r2
 8017150:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d108      	bne.n	801716a <netconn_bind+0x26>
 8017158:	4b11      	ldr	r3, [pc, #68]	; (80171a0 <netconn_bind+0x5c>)
 801715a:	22ff      	movs	r2, #255	; 0xff
 801715c:	4911      	ldr	r1, [pc, #68]	; (80171a4 <netconn_bind+0x60>)
 801715e:	4812      	ldr	r0, [pc, #72]	; (80171a8 <netconn_bind+0x64>)
 8017160:	f010 f966 	bl	8027430 <iprintf>
 8017164:	f06f 030f 	mvn.w	r3, #15
 8017168:	e015      	b.n	8017196 <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 801716a:	68bb      	ldr	r3, [r7, #8]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d101      	bne.n	8017174 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8017170:	4b0e      	ldr	r3, [pc, #56]	; (80171ac <netconn_bind+0x68>)
 8017172:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 801717c:	88fb      	ldrh	r3, [r7, #6]
 801717e:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8017180:	f107 0310 	add.w	r3, r7, #16
 8017184:	4619      	mov	r1, r3
 8017186:	480a      	ldr	r0, [pc, #40]	; (80171b0 <netconn_bind+0x6c>)
 8017188:	f7ff ff1e 	bl	8016fc8 <netconn_apimsg>
 801718c:	4603      	mov	r3, r0
 801718e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8017192:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017196:	4618      	mov	r0, r3
 8017198:	3728      	adds	r7, #40	; 0x28
 801719a:	46bd      	mov	sp, r7
 801719c:	bd80      	pop	{r7, pc}
 801719e:	bf00      	nop
 80171a0:	08028eec 	.word	0x08028eec
 80171a4:	08029024 	.word	0x08029024
 80171a8:	08028f44 	.word	0x08028f44
 80171ac:	0802e578 	.word	0x0802e578
 80171b0:	080184d1 	.word	0x080184d1

080171b4 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b088      	sub	sp, #32
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
 80171bc:	460b      	mov	r3, r1
 80171be:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d109      	bne.n	80171da <netconn_listen_with_backlog+0x26>
 80171c6:	4b0d      	ldr	r3, [pc, #52]	; (80171fc <netconn_listen_with_backlog+0x48>)
 80171c8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80171cc:	490c      	ldr	r1, [pc, #48]	; (8017200 <netconn_listen_with_backlog+0x4c>)
 80171ce:	480d      	ldr	r0, [pc, #52]	; (8017204 <netconn_listen_with_backlog+0x50>)
 80171d0:	f010 f92e 	bl	8027430 <iprintf>
 80171d4:	f06f 030f 	mvn.w	r3, #15
 80171d8:	e00b      	b.n	80171f2 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80171de:	f107 0308 	add.w	r3, r7, #8
 80171e2:	4619      	mov	r1, r3
 80171e4:	4808      	ldr	r0, [pc, #32]	; (8017208 <netconn_listen_with_backlog+0x54>)
 80171e6:	f7ff feef 	bl	8016fc8 <netconn_apimsg>
 80171ea:	4603      	mov	r3, r0
 80171ec:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 80171ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80171f2:	4618      	mov	r0, r3
 80171f4:	3720      	adds	r7, #32
 80171f6:	46bd      	mov	sp, r7
 80171f8:	bd80      	pop	{r7, pc}
 80171fa:	bf00      	nop
 80171fc:	08028eec 	.word	0x08028eec
 8017200:	08029084 	.word	0x08029084
 8017204:	08028f44 	.word	0x08028f44
 8017208:	0801856d 	.word	0x0801856d

0801720c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b086      	sub	sp, #24
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
 8017214:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8017216:	683b      	ldr	r3, [r7, #0]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d109      	bne.n	8017230 <netconn_accept+0x24>
 801721c:	4b34      	ldr	r3, [pc, #208]	; (80172f0 <netconn_accept+0xe4>)
 801721e:	f240 128d 	movw	r2, #397	; 0x18d
 8017222:	4934      	ldr	r1, [pc, #208]	; (80172f4 <netconn_accept+0xe8>)
 8017224:	4834      	ldr	r0, [pc, #208]	; (80172f8 <netconn_accept+0xec>)
 8017226:	f010 f903 	bl	8027430 <iprintf>
 801722a:	f06f 030f 	mvn.w	r3, #15
 801722e:	e05b      	b.n	80172e8 <netconn_accept+0xdc>
  *new_conn = NULL;
 8017230:	683b      	ldr	r3, [r7, #0]
 8017232:	2200      	movs	r2, #0
 8017234:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d109      	bne.n	8017250 <netconn_accept+0x44>
 801723c:	4b2c      	ldr	r3, [pc, #176]	; (80172f0 <netconn_accept+0xe4>)
 801723e:	f240 128f 	movw	r2, #399	; 0x18f
 8017242:	492e      	ldr	r1, [pc, #184]	; (80172fc <netconn_accept+0xf0>)
 8017244:	482c      	ldr	r0, [pc, #176]	; (80172f8 <netconn_accept+0xec>)
 8017246:	f010 f8f3 	bl	8027430 <iprintf>
 801724a:	f06f 030f 	mvn.w	r3, #15
 801724e:	e04b      	b.n	80172e8 <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017256:	f113 0f0c 	cmn.w	r3, #12
 801725a:	da03      	bge.n	8017264 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017262:	e041      	b.n	80172e8 <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	3314      	adds	r3, #20
 8017268:	4618      	mov	r0, r3
 801726a:	f00b fbc9 	bl	8022a00 <sys_mbox_valid>
 801726e:	4603      	mov	r3, r0
 8017270:	2b00      	cmp	r3, #0
 8017272:	d102      	bne.n	801727a <netconn_accept+0x6e>
    return ERR_CLSD;
 8017274:	f06f 030e 	mvn.w	r3, #14
 8017278:	e036      	b.n	80172e8 <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	3314      	adds	r3, #20
 801727e:	f107 010c 	add.w	r1, r7, #12
 8017282:	2200      	movs	r2, #0
 8017284:	4618      	mov	r0, r3
 8017286:	f00b fb60 	bl	802294a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017292:	2b00      	cmp	r3, #0
 8017294:	d005      	beq.n	80172a2 <netconn_accept+0x96>
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801729a:	2200      	movs	r2, #0
 801729c:	2101      	movs	r1, #1
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	4a16      	ldr	r2, [pc, #88]	; (8017300 <netconn_accept+0xf4>)
 80172a6:	4293      	cmp	r3, r2
 80172a8:	d102      	bne.n	80172b0 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 80172aa:	f06f 030c 	mvn.w	r3, #12
 80172ae:	e01b      	b.n	80172e8 <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 80172b0:	697b      	ldr	r3, [r7, #20]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d114      	bne.n	80172e0 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d00e      	beq.n	80172da <netconn_accept+0xce>
 80172bc:	f00b fcbc 	bl	8022c38 <sys_arch_protect>
 80172c0:	6138      	str	r0, [r7, #16]
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80172c8:	f113 0f0c 	cmn.w	r3, #12
 80172cc:	db02      	blt.n	80172d4 <netconn_accept+0xc8>
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	22f1      	movs	r2, #241	; 0xf1
 80172d2:	721a      	strb	r2, [r3, #8]
 80172d4:	6938      	ldr	r0, [r7, #16]
 80172d6:	f00b fcbd 	bl	8022c54 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 80172da:	f06f 030e 	mvn.w	r3, #14
 80172de:	e003      	b.n	80172e8 <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80172e0:	683b      	ldr	r3, [r7, #0]
 80172e2:	697a      	ldr	r2, [r7, #20]
 80172e4:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80172e6:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80172e8:	4618      	mov	r0, r3
 80172ea:	3718      	adds	r7, #24
 80172ec:	46bd      	mov	sp, r7
 80172ee:	bd80      	pop	{r7, pc}
 80172f0:	08028eec 	.word	0x08028eec
 80172f4:	080290a4 	.word	0x080290a4
 80172f8:	08028f44 	.word	0x08028f44
 80172fc:	080290c4 	.word	0x080290c4
 8017300:	2000a270 	.word	0x2000a270

08017304 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b08a      	sub	sp, #40	; 0x28
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
 801730c:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 801730e:	2300      	movs	r3, #0
 8017310:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8017312:	683b      	ldr	r3, [r7, #0]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d109      	bne.n	801732c <netconn_recv_data+0x28>
 8017318:	4b4e      	ldr	r3, [pc, #312]	; (8017454 <netconn_recv_data+0x150>)
 801731a:	f240 12e7 	movw	r2, #487	; 0x1e7
 801731e:	494e      	ldr	r1, [pc, #312]	; (8017458 <netconn_recv_data+0x154>)
 8017320:	484e      	ldr	r0, [pc, #312]	; (801745c <netconn_recv_data+0x158>)
 8017322:	f010 f885 	bl	8027430 <iprintf>
 8017326:	f06f 030f 	mvn.w	r3, #15
 801732a:	e08f      	b.n	801744c <netconn_recv_data+0x148>
  *new_buf = NULL;
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	2200      	movs	r2, #0
 8017330:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	2b00      	cmp	r3, #0
 8017336:	d109      	bne.n	801734c <netconn_recv_data+0x48>
 8017338:	4b46      	ldr	r3, [pc, #280]	; (8017454 <netconn_recv_data+0x150>)
 801733a:	f240 12e9 	movw	r2, #489	; 0x1e9
 801733e:	4948      	ldr	r1, [pc, #288]	; (8017460 <netconn_recv_data+0x15c>)
 8017340:	4846      	ldr	r0, [pc, #280]	; (801745c <netconn_recv_data+0x158>)
 8017342:	f010 f875 	bl	8027430 <iprintf>
 8017346:	f06f 030f 	mvn.w	r3, #15
 801734a:	e07f      	b.n	801744c <netconn_recv_data+0x148>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	3310      	adds	r3, #16
 8017350:	4618      	mov	r0, r3
 8017352:	f00b fb55 	bl	8022a00 <sys_mbox_valid>
 8017356:	4603      	mov	r3, r0
 8017358:	2b00      	cmp	r3, #0
 801735a:	d10d      	bne.n	8017378 <netconn_recv_data+0x74>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	3314      	adds	r3, #20
 8017360:	4618      	mov	r0, r3
 8017362:	f00b fb4d 	bl	8022a00 <sys_mbox_valid>
 8017366:	4603      	mov	r3, r0
 8017368:	2b00      	cmp	r3, #0
 801736a:	d002      	beq.n	8017372 <netconn_recv_data+0x6e>
 801736c:	f06f 030a 	mvn.w	r3, #10
 8017370:	e06c      	b.n	801744c <netconn_recv_data+0x148>
 8017372:	f06f 030e 	mvn.w	r3, #14
 8017376:	e069      	b.n	801744c <netconn_recv_data+0x148>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	3310      	adds	r3, #16
 801737c:	4618      	mov	r0, r3
 801737e:	f00b fb3f 	bl	8022a00 <sys_mbox_valid>
 8017382:	4603      	mov	r3, r0
 8017384:	2b00      	cmp	r3, #0
 8017386:	d109      	bne.n	801739c <netconn_recv_data+0x98>
 8017388:	4b32      	ldr	r3, [pc, #200]	; (8017454 <netconn_recv_data+0x150>)
 801738a:	f240 12f5 	movw	r2, #501	; 0x1f5
 801738e:	4935      	ldr	r1, [pc, #212]	; (8017464 <netconn_recv_data+0x160>)
 8017390:	4832      	ldr	r0, [pc, #200]	; (801745c <netconn_recv_data+0x158>)
 8017392:	f010 f84d 	bl	8027430 <iprintf>
 8017396:	f06f 030a 	mvn.w	r3, #10
 801739a:	e057      	b.n	801744c <netconn_recv_data+0x148>

  if (ERR_IS_FATAL(conn->last_err)) {
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80173a2:	f113 0f0c 	cmn.w	r3, #12
 80173a6:	da03      	bge.n	80173b0 <netconn_recv_data+0xac>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80173ae:	e04d      	b.n	801744c <netconn_recv_data+0x148>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	3310      	adds	r3, #16
 80173b4:	f107 0120 	add.w	r1, r7, #32
 80173b8:	2200      	movs	r2, #0
 80173ba:	4618      	mov	r0, r3
 80173bc:	f00b fac5 	bl	802294a <sys_arch_mbox_fetch>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 80173c4:	6a3b      	ldr	r3, [r7, #32]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d003      	beq.n	80173d2 <netconn_recv_data+0xce>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 80173ca:	6a3b      	ldr	r3, [r7, #32]
 80173cc:	891b      	ldrh	r3, [r3, #8]
 80173ce:	617b      	str	r3, [r7, #20]
 80173d0:	e001      	b.n	80173d6 <netconn_recv_data+0xd2>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 80173d2:	2301      	movs	r3, #1
 80173d4:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 80173d6:	f107 030c 	add.w	r3, r7, #12
 80173da:	4619      	mov	r1, r3
 80173dc:	4822      	ldr	r0, [pc, #136]	; (8017468 <netconn_recv_data+0x164>)
 80173de:	f7ff fdf3 	bl	8016fc8 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 80173e2:	6a3b      	ldr	r3, [r7, #32]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d120      	bne.n	801742a <netconn_recv_data+0x126>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d005      	beq.n	80173fc <netconn_recv_data+0xf8>
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173f4:	2200      	movs	r2, #0
 80173f6:	2101      	movs	r1, #1
 80173f8:	6878      	ldr	r0, [r7, #4]
 80173fa:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	685b      	ldr	r3, [r3, #4]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d10b      	bne.n	801741c <netconn_recv_data+0x118>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d003      	beq.n	8017416 <netconn_recv_data+0x112>
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017414:	e01a      	b.n	801744c <netconn_recv_data+0x148>
 8017416:	f06f 030d 	mvn.w	r3, #13
 801741a:	e017      	b.n	801744c <netconn_recv_data+0x148>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 801741c:	2101      	movs	r1, #1
 801741e:	6878      	ldr	r0, [r7, #4]
 8017420:	f000 f908 	bl	8017634 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8017424:	f06f 030e 	mvn.w	r3, #14
 8017428:	e010      	b.n	801744c <netconn_recv_data+0x148>
    }
    len = ((struct pbuf *)buf)->tot_len;
 801742a:	6a3b      	ldr	r3, [r7, #32]
 801742c:	891b      	ldrh	r3, [r3, #8]
 801742e:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017434:	2b00      	cmp	r3, #0
 8017436:	d005      	beq.n	8017444 <netconn_recv_data+0x140>
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801743c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801743e:	2101      	movs	r1, #1
 8017440:	6878      	ldr	r0, [r7, #4]
 8017442:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8017444:	6a3a      	ldr	r2, [r7, #32]
 8017446:	683b      	ldr	r3, [r7, #0]
 8017448:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801744a:	2300      	movs	r3, #0
}
 801744c:	4618      	mov	r0, r3
 801744e:	3728      	adds	r7, #40	; 0x28
 8017450:	46bd      	mov	sp, r7
 8017452:	bd80      	pop	{r7, pc}
 8017454:	08028eec 	.word	0x08028eec
 8017458:	080290e4 	.word	0x080290e4
 801745c:	08028f44 	.word	0x08028f44
 8017460:	08029104 	.word	0x08029104
 8017464:	08029120 	.word	0x08029120
 8017468:	080186f1 	.word	0x080186f1

0801746c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 801746c:	b580      	push	{r7, lr}
 801746e:	b086      	sub	sp, #24
 8017470:	af00      	add	r7, sp, #0
 8017472:	6078      	str	r0, [r7, #4]
 8017474:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8017476:	2300      	movs	r3, #0
 8017478:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801747a:	683b      	ldr	r3, [r7, #0]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d109      	bne.n	8017494 <netconn_recv+0x28>
 8017480:	4b2b      	ldr	r3, [pc, #172]	; (8017530 <netconn_recv+0xc4>)
 8017482:	f44f 721d 	mov.w	r2, #628	; 0x274
 8017486:	492b      	ldr	r1, [pc, #172]	; (8017534 <netconn_recv+0xc8>)
 8017488:	482b      	ldr	r0, [pc, #172]	; (8017538 <netconn_recv+0xcc>)
 801748a:	f00f ffd1 	bl	8027430 <iprintf>
 801748e:	f06f 030f 	mvn.w	r3, #15
 8017492:	e048      	b.n	8017526 <netconn_recv+0xba>
  *new_buf = NULL;
 8017494:	683b      	ldr	r3, [r7, #0]
 8017496:	2200      	movs	r2, #0
 8017498:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d109      	bne.n	80174b4 <netconn_recv+0x48>
 80174a0:	4b23      	ldr	r3, [pc, #140]	; (8017530 <netconn_recv+0xc4>)
 80174a2:	f240 2276 	movw	r2, #630	; 0x276
 80174a6:	4925      	ldr	r1, [pc, #148]	; (801753c <netconn_recv+0xd0>)
 80174a8:	4823      	ldr	r0, [pc, #140]	; (8017538 <netconn_recv+0xcc>)
 80174aa:	f00f ffc1 	bl	8027430 <iprintf>
 80174ae:	f06f 030f 	mvn.w	r3, #15
 80174b2:	e038      	b.n	8017526 <netconn_recv+0xba>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80174b4:	2300      	movs	r3, #0
 80174b6:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80174b8:	2005      	movs	r0, #5
 80174ba:	f004 fcfd 	bl	801beb8 <memp_malloc>
 80174be:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80174c0:	697b      	ldr	r3, [r7, #20]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d102      	bne.n	80174cc <netconn_recv+0x60>
      return ERR_MEM;
 80174c6:	f04f 33ff 	mov.w	r3, #4294967295
 80174ca:	e02c      	b.n	8017526 <netconn_recv+0xba>
    }

    err = netconn_recv_data(conn, (void **)&p);
 80174cc:	f107 030c 	add.w	r3, r7, #12
 80174d0:	4619      	mov	r1, r3
 80174d2:	6878      	ldr	r0, [r7, #4]
 80174d4:	f7ff ff16 	bl	8017304 <netconn_recv_data>
 80174d8:	4603      	mov	r3, r0
 80174da:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80174dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d006      	beq.n	80174f2 <netconn_recv+0x86>
      memp_free(MEMP_NETBUF, buf);
 80174e4:	6979      	ldr	r1, [r7, #20]
 80174e6:	2005      	movs	r0, #5
 80174e8:	f004 fd38 	bl	801bf5c <memp_free>
      return err;
 80174ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80174f0:	e019      	b.n	8017526 <netconn_recv+0xba>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d106      	bne.n	8017506 <netconn_recv+0x9a>
 80174f8:	4b0d      	ldr	r3, [pc, #52]	; (8017530 <netconn_recv+0xc4>)
 80174fa:	f240 228a 	movw	r2, #650	; 0x28a
 80174fe:	4910      	ldr	r1, [pc, #64]	; (8017540 <netconn_recv+0xd4>)
 8017500:	480d      	ldr	r0, [pc, #52]	; (8017538 <netconn_recv+0xcc>)
 8017502:	f00f ff95 	bl	8027430 <iprintf>

    buf->p = p;
 8017506:	68fa      	ldr	r2, [r7, #12]
 8017508:	697b      	ldr	r3, [r7, #20]
 801750a:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801750c:	68fa      	ldr	r2, [r7, #12]
 801750e:	697b      	ldr	r3, [r7, #20]
 8017510:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8017512:	697b      	ldr	r3, [r7, #20]
 8017514:	2200      	movs	r2, #0
 8017516:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8017518:	697b      	ldr	r3, [r7, #20]
 801751a:	2200      	movs	r2, #0
 801751c:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 801751e:	683b      	ldr	r3, [r7, #0]
 8017520:	697a      	ldr	r2, [r7, #20]
 8017522:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8017524:	2300      	movs	r3, #0
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8017526:	4618      	mov	r0, r3
 8017528:	3718      	adds	r7, #24
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}
 801752e:	bf00      	nop
 8017530:	08028eec 	.word	0x08028eec
 8017534:	080290e4 	.word	0x080290e4
 8017538:	08028f44 	.word	0x08028f44
 801753c:	08029104 	.word	0x08029104
 8017540:	08029140 	.word	0x08029140

08017544 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b08a      	sub	sp, #40	; 0x28
 8017548:	af00      	add	r7, sp, #0
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	60b9      	str	r1, [r7, #8]
 801754e:	607a      	str	r2, [r7, #4]
 8017550:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d109      	bne.n	801756c <netconn_write_partly+0x28>
 8017558:	4b31      	ldr	r3, [pc, #196]	; (8017620 <netconn_write_partly+0xdc>)
 801755a:	f240 22e6 	movw	r2, #742	; 0x2e6
 801755e:	4931      	ldr	r1, [pc, #196]	; (8017624 <netconn_write_partly+0xe0>)
 8017560:	4831      	ldr	r0, [pc, #196]	; (8017628 <netconn_write_partly+0xe4>)
 8017562:	f00f ff65 	bl	8027430 <iprintf>
 8017566:	f06f 030f 	mvn.w	r3, #15
 801756a:	e054      	b.n	8017616 <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	781b      	ldrb	r3, [r3, #0]
 8017570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017574:	2b10      	cmp	r3, #16
 8017576:	d009      	beq.n	801758c <netconn_write_partly+0x48>
 8017578:	4b29      	ldr	r3, [pc, #164]	; (8017620 <netconn_write_partly+0xdc>)
 801757a:	f240 22e7 	movw	r2, #743	; 0x2e7
 801757e:	492b      	ldr	r1, [pc, #172]	; (801762c <netconn_write_partly+0xe8>)
 8017580:	4829      	ldr	r0, [pc, #164]	; (8017628 <netconn_write_partly+0xe4>)
 8017582:	f00f ff55 	bl	8027430 <iprintf>
 8017586:	f06f 0305 	mvn.w	r3, #5
 801758a:	e044      	b.n	8017616 <netconn_write_partly+0xd2>
  if (size == 0) {
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d101      	bne.n	8017596 <netconn_write_partly+0x52>
    return ERR_OK;
 8017592:	2300      	movs	r3, #0
 8017594:	e03f      	b.n	8017616 <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	7f1b      	ldrb	r3, [r3, #28]
 801759a:	f003 0302 	and.w	r3, r3, #2
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d104      	bne.n	80175ac <netconn_write_partly+0x68>
 80175a2:	78fb      	ldrb	r3, [r7, #3]
 80175a4:	f003 0304 	and.w	r3, r3, #4
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d001      	beq.n	80175b0 <netconn_write_partly+0x6c>
 80175ac:	2301      	movs	r3, #1
 80175ae:	e000      	b.n	80175b2 <netconn_write_partly+0x6e>
 80175b0:	2300      	movs	r3, #0
 80175b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80175b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d005      	beq.n	80175ca <netconn_write_partly+0x86>
 80175be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d102      	bne.n	80175ca <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80175c4:	f06f 0305 	mvn.w	r3, #5
 80175c8:	e025      	b.n	8017616 <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 80175ce:	68bb      	ldr	r3, [r7, #8]
 80175d0:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80175d2:	78fb      	ldrb	r3, [r7, #3]
 80175d4:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80175dc:	f107 0310 	add.w	r3, r7, #16
 80175e0:	4619      	mov	r1, r3
 80175e2:	4813      	ldr	r0, [pc, #76]	; (8017630 <netconn_write_partly+0xec>)
 80175e4:	f7ff fcf0 	bl	8016fc8 <netconn_apimsg>
 80175e8:	4603      	mov	r3, r0
 80175ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 80175ee:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d10d      	bne.n	8017612 <netconn_write_partly+0xce>
 80175f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d00a      	beq.n	8017612 <netconn_write_partly+0xce>
    if (dontblock) {
 80175fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017600:	2b00      	cmp	r3, #0
 8017602:	d003      	beq.n	801760c <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8017604:	69fa      	ldr	r2, [r7, #28]
 8017606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017608:	601a      	str	r2, [r3, #0]
 801760a:	e002      	b.n	8017612 <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 801760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801760e:	687a      	ldr	r2, [r7, #4]
 8017610:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8017612:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8017616:	4618      	mov	r0, r3
 8017618:	3728      	adds	r7, #40	; 0x28
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}
 801761e:	bf00      	nop
 8017620:	08028eec 	.word	0x08028eec
 8017624:	08029168 	.word	0x08029168
 8017628:	08028f44 	.word	0x08028f44
 801762c:	08029184 	.word	0x08029184
 8017630:	08018ad1 	.word	0x08018ad1

08017634 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b088      	sub	sp, #32
 8017638:	af00      	add	r7, sp, #0
 801763a:	6078      	str	r0, [r7, #4]
 801763c:	460b      	mov	r3, r1
 801763e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d109      	bne.n	801765a <netconn_close_shutdown+0x26>
 8017646:	4b0f      	ldr	r3, [pc, #60]	; (8017684 <netconn_close_shutdown+0x50>)
 8017648:	f44f 724a 	mov.w	r2, #808	; 0x328
 801764c:	490e      	ldr	r1, [pc, #56]	; (8017688 <netconn_close_shutdown+0x54>)
 801764e:	480f      	ldr	r0, [pc, #60]	; (801768c <netconn_close_shutdown+0x58>)
 8017650:	f00f feee 	bl	8027430 <iprintf>
 8017654:	f06f 030f 	mvn.w	r3, #15
 8017658:	e00f      	b.n	801767a <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 801765e:	78fb      	ldrb	r3, [r7, #3]
 8017660:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8017662:	2329      	movs	r3, #41	; 0x29
 8017664:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8017666:	f107 0308 	add.w	r3, r7, #8
 801766a:	4619      	mov	r1, r3
 801766c:	4808      	ldr	r0, [pc, #32]	; (8017690 <netconn_close_shutdown+0x5c>)
 801766e:	f7ff fcab 	bl	8016fc8 <netconn_apimsg>
 8017672:	4603      	mov	r3, r0
 8017674:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8017676:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801767a:	4618      	mov	r0, r3
 801767c:	3720      	adds	r7, #32
 801767e:	46bd      	mov	sp, r7
 8017680:	bd80      	pop	{r7, pc}
 8017682:	bf00      	nop
 8017684:	08028eec 	.word	0x08028eec
 8017688:	080291a8 	.word	0x080291a8
 801768c:	08028f44 	.word	0x08028f44
 8017690:	08018c29 	.word	0x08018c29

08017694 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b082      	sub	sp, #8
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 801769c:	2103      	movs	r1, #3
 801769e:	6878      	ldr	r0, [r7, #4]
 80176a0:	f7ff ffc8 	bl	8017634 <netconn_close_shutdown>
 80176a4:	4603      	mov	r3, r0
}
 80176a6:	4618      	mov	r0, r3
 80176a8:	3708      	adds	r7, #8
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}
	...

080176b0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b088      	sub	sp, #32
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	60f8      	str	r0, [r7, #12]
 80176b8:	60b9      	str	r1, [r7, #8]
 80176ba:	607a      	str	r2, [r7, #4]
 80176bc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80176be:	68bb      	ldr	r3, [r7, #8]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d105      	bne.n	80176d0 <recv_tcp+0x20>
 80176c4:	4b39      	ldr	r3, [pc, #228]	; (80177ac <recv_tcp+0xfc>)
 80176c6:	22f9      	movs	r2, #249	; 0xf9
 80176c8:	4939      	ldr	r1, [pc, #228]	; (80177b0 <recv_tcp+0x100>)
 80176ca:	483a      	ldr	r0, [pc, #232]	; (80177b4 <recv_tcp+0x104>)
 80176cc:	f00f feb0 	bl	8027430 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d105      	bne.n	80176e2 <recv_tcp+0x32>
 80176d6:	4b35      	ldr	r3, [pc, #212]	; (80177ac <recv_tcp+0xfc>)
 80176d8:	22fa      	movs	r2, #250	; 0xfa
 80176da:	4937      	ldr	r1, [pc, #220]	; (80177b8 <recv_tcp+0x108>)
 80176dc:	4835      	ldr	r0, [pc, #212]	; (80177b4 <recv_tcp+0x104>)
 80176de:	f00f fea7 	bl	8027430 <iprintf>
  conn = (struct netconn *)arg;
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80176e6:	69bb      	ldr	r3, [r7, #24]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d102      	bne.n	80176f2 <recv_tcp+0x42>
    return ERR_VAL;
 80176ec:	f06f 0305 	mvn.w	r3, #5
 80176f0:	e057      	b.n	80177a2 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80176f2:	69bb      	ldr	r3, [r7, #24]
 80176f4:	685a      	ldr	r2, [r3, #4]
 80176f6:	68bb      	ldr	r3, [r7, #8]
 80176f8:	429a      	cmp	r2, r3
 80176fa:	d006      	beq.n	801770a <recv_tcp+0x5a>
 80176fc:	4b2b      	ldr	r3, [pc, #172]	; (80177ac <recv_tcp+0xfc>)
 80176fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017702:	492e      	ldr	r1, [pc, #184]	; (80177bc <recv_tcp+0x10c>)
 8017704:	482b      	ldr	r0, [pc, #172]	; (80177b4 <recv_tcp+0x104>)
 8017706:	f00f fe93 	bl	8027430 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 801770a:	69bb      	ldr	r3, [r7, #24]
 801770c:	3310      	adds	r3, #16
 801770e:	4618      	mov	r0, r3
 8017710:	f00b f976 	bl	8022a00 <sys_mbox_valid>
 8017714:	4603      	mov	r3, r0
 8017716:	2b00      	cmp	r3, #0
 8017718:	d10d      	bne.n	8017736 <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d008      	beq.n	8017732 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	891b      	ldrh	r3, [r3, #8]
 8017724:	4619      	mov	r1, r3
 8017726:	68b8      	ldr	r0, [r7, #8]
 8017728:	f006 f884 	bl	801d834 <tcp_recved>
      pbuf_free(p);
 801772c:	6878      	ldr	r0, [r7, #4]
 801772e:	f005 f9a5 	bl	801ca7c <pbuf_free>
    }
    return ERR_OK;
 8017732:	2300      	movs	r3, #0
 8017734:	e035      	b.n	80177a2 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 8017736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d011      	beq.n	8017762 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 801773e:	69bb      	ldr	r3, [r7, #24]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d00e      	beq.n	8017762 <recv_tcp+0xb2>
 8017744:	f00b fa78 	bl	8022c38 <sys_arch_protect>
 8017748:	6178      	str	r0, [r7, #20]
 801774a:	69bb      	ldr	r3, [r7, #24]
 801774c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017750:	f113 0f0c 	cmn.w	r3, #12
 8017754:	db02      	blt.n	801775c <recv_tcp+0xac>
 8017756:	69bb      	ldr	r3, [r7, #24]
 8017758:	78fa      	ldrb	r2, [r7, #3]
 801775a:	721a      	strb	r2, [r3, #8]
 801775c:	6978      	ldr	r0, [r7, #20]
 801775e:	f00b fa79 	bl	8022c54 <sys_arch_unprotect>
  }

  if (p != NULL) {
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d003      	beq.n	8017770 <recv_tcp+0xc0>
    len = p->tot_len;
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	891b      	ldrh	r3, [r3, #8]
 801776c:	83fb      	strh	r3, [r7, #30]
 801776e:	e001      	b.n	8017774 <recv_tcp+0xc4>
  } else {
    len = 0;
 8017770:	2300      	movs	r3, #0
 8017772:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8017774:	69bb      	ldr	r3, [r7, #24]
 8017776:	3310      	adds	r3, #16
 8017778:	6879      	ldr	r1, [r7, #4]
 801777a:	4618      	mov	r0, r3
 801777c:	f00b f8cb 	bl	8022916 <sys_mbox_trypost>
 8017780:	4603      	mov	r3, r0
 8017782:	2b00      	cmp	r3, #0
 8017784:	d002      	beq.n	801778c <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8017786:	f04f 33ff 	mov.w	r3, #4294967295
 801778a:	e00a      	b.n	80177a2 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801778c:	69bb      	ldr	r3, [r7, #24]
 801778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017790:	2b00      	cmp	r3, #0
 8017792:	d005      	beq.n	80177a0 <recv_tcp+0xf0>
 8017794:	69bb      	ldr	r3, [r7, #24]
 8017796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017798:	8bfa      	ldrh	r2, [r7, #30]
 801779a:	2100      	movs	r1, #0
 801779c:	69b8      	ldr	r0, [r7, #24]
 801779e:	4798      	blx	r3
  }

  return ERR_OK;
 80177a0:	2300      	movs	r3, #0
}
 80177a2:	4618      	mov	r0, r3
 80177a4:	3720      	adds	r7, #32
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bd80      	pop	{r7, pc}
 80177aa:	bf00      	nop
 80177ac:	080291c4 	.word	0x080291c4
 80177b0:	080291f8 	.word	0x080291f8
 80177b4:	0802921c 	.word	0x0802921c
 80177b8:	08029244 	.word	0x08029244
 80177bc:	08029264 	.word	0x08029264

080177c0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b084      	sub	sp, #16
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
 80177c8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d106      	bne.n	80177e2 <poll_tcp+0x22>
 80177d4:	4b2a      	ldr	r3, [pc, #168]	; (8017880 <poll_tcp+0xc0>)
 80177d6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80177da:	492a      	ldr	r1, [pc, #168]	; (8017884 <poll_tcp+0xc4>)
 80177dc:	482a      	ldr	r0, [pc, #168]	; (8017888 <poll_tcp+0xc8>)
 80177de:	f00f fe27 	bl	8027430 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	785b      	ldrb	r3, [r3, #1]
 80177e6:	2b01      	cmp	r3, #1
 80177e8:	d104      	bne.n	80177f4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80177ea:	2101      	movs	r1, #1
 80177ec:	68f8      	ldr	r0, [r7, #12]
 80177ee:	f000 ffcb 	bl	8018788 <lwip_netconn_do_writemore>
 80177f2:	e016      	b.n	8017822 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	785b      	ldrb	r3, [r3, #1]
 80177f8:	2b04      	cmp	r3, #4
 80177fa:	d112      	bne.n	8017822 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017800:	2b00      	cmp	r3, #0
 8017802:	d00a      	beq.n	801781a <poll_tcp+0x5a>
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017808:	7a5b      	ldrb	r3, [r3, #9]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d005      	beq.n	801781a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017812:	7a5a      	ldrb	r2, [r3, #9]
 8017814:	3a01      	subs	r2, #1
 8017816:	b2d2      	uxtb	r2, r2
 8017818:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801781a:	2101      	movs	r1, #1
 801781c:	68f8      	ldr	r0, [r7, #12]
 801781e:	f000 fbe9 	bl	8017ff4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	7f1b      	ldrb	r3, [r3, #28]
 8017826:	f003 0310 	and.w	r3, r3, #16
 801782a:	2b00      	cmp	r3, #0
 801782c:	d022      	beq.n	8017874 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	685b      	ldr	r3, [r3, #4]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d01e      	beq.n	8017874 <poll_tcp+0xb4>
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	685b      	ldr	r3, [r3, #4]
 801783a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801783e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8017842:	4293      	cmp	r3, r2
 8017844:	d916      	bls.n	8017874 <poll_tcp+0xb4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	685b      	ldr	r3, [r3, #4]
 801784a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801784e:	2b04      	cmp	r3, #4
 8017850:	d810      	bhi.n	8017874 <poll_tcp+0xb4>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	7f1b      	ldrb	r3, [r3, #28]
 8017856:	f023 0310 	bic.w	r3, r3, #16
 801785a:	b2da      	uxtb	r2, r3
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017864:	2b00      	cmp	r3, #0
 8017866:	d005      	beq.n	8017874 <poll_tcp+0xb4>
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801786c:	2200      	movs	r2, #0
 801786e:	2102      	movs	r1, #2
 8017870:	68f8      	ldr	r0, [r7, #12]
 8017872:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8017874:	2300      	movs	r3, #0
}
 8017876:	4618      	mov	r0, r3
 8017878:	3710      	adds	r7, #16
 801787a:	46bd      	mov	sp, r7
 801787c:	bd80      	pop	{r7, pc}
 801787e:	bf00      	nop
 8017880:	080291c4 	.word	0x080291c4
 8017884:	08029284 	.word	0x08029284
 8017888:	0802921c 	.word	0x0802921c

0801788c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b086      	sub	sp, #24
 8017890:	af00      	add	r7, sp, #0
 8017892:	60f8      	str	r0, [r7, #12]
 8017894:	60b9      	str	r1, [r7, #8]
 8017896:	4613      	mov	r3, r2
 8017898:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801789e:	697b      	ldr	r3, [r7, #20]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d106      	bne.n	80178b2 <sent_tcp+0x26>
 80178a4:	4b21      	ldr	r3, [pc, #132]	; (801792c <sent_tcp+0xa0>)
 80178a6:	f240 1261 	movw	r2, #353	; 0x161
 80178aa:	4921      	ldr	r1, [pc, #132]	; (8017930 <sent_tcp+0xa4>)
 80178ac:	4821      	ldr	r0, [pc, #132]	; (8017934 <sent_tcp+0xa8>)
 80178ae:	f00f fdbf 	bl	8027430 <iprintf>

  if (conn) {
 80178b2:	697b      	ldr	r3, [r7, #20]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d033      	beq.n	8017920 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 80178b8:	697b      	ldr	r3, [r7, #20]
 80178ba:	785b      	ldrb	r3, [r3, #1]
 80178bc:	2b01      	cmp	r3, #1
 80178be:	d104      	bne.n	80178ca <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80178c0:	2101      	movs	r1, #1
 80178c2:	6978      	ldr	r0, [r7, #20]
 80178c4:	f000 ff60 	bl	8018788 <lwip_netconn_do_writemore>
 80178c8:	e007      	b.n	80178da <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80178ca:	697b      	ldr	r3, [r7, #20]
 80178cc:	785b      	ldrb	r3, [r3, #1]
 80178ce:	2b04      	cmp	r3, #4
 80178d0:	d103      	bne.n	80178da <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80178d2:	2101      	movs	r1, #1
 80178d4:	6978      	ldr	r0, [r7, #20]
 80178d6:	f000 fb8d 	bl	8017ff4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80178da:	697b      	ldr	r3, [r7, #20]
 80178dc:	685b      	ldr	r3, [r3, #4]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d01e      	beq.n	8017920 <sent_tcp+0x94>
 80178e2:	697b      	ldr	r3, [r7, #20]
 80178e4:	685b      	ldr	r3, [r3, #4]
 80178e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80178ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80178ee:	4293      	cmp	r3, r2
 80178f0:	d916      	bls.n	8017920 <sent_tcp+0x94>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80178f2:	697b      	ldr	r3, [r7, #20]
 80178f4:	685b      	ldr	r3, [r3, #4]
 80178f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80178fa:	2b04      	cmp	r3, #4
 80178fc:	d810      	bhi.n	8017920 <sent_tcp+0x94>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80178fe:	697b      	ldr	r3, [r7, #20]
 8017900:	7f1b      	ldrb	r3, [r3, #28]
 8017902:	f023 0310 	bic.w	r3, r3, #16
 8017906:	b2da      	uxtb	r2, r3
 8017908:	697b      	ldr	r3, [r7, #20]
 801790a:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801790c:	697b      	ldr	r3, [r7, #20]
 801790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017910:	2b00      	cmp	r3, #0
 8017912:	d005      	beq.n	8017920 <sent_tcp+0x94>
 8017914:	697b      	ldr	r3, [r7, #20]
 8017916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017918:	88fa      	ldrh	r2, [r7, #6]
 801791a:	2102      	movs	r1, #2
 801791c:	6978      	ldr	r0, [r7, #20]
 801791e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8017920:	2300      	movs	r3, #0
}
 8017922:	4618      	mov	r0, r3
 8017924:	3718      	adds	r7, #24
 8017926:	46bd      	mov	sp, r7
 8017928:	bd80      	pop	{r7, pc}
 801792a:	bf00      	nop
 801792c:	080291c4 	.word	0x080291c4
 8017930:	08029284 	.word	0x08029284
 8017934:	0802921c 	.word	0x0802921c

08017938 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b08a      	sub	sp, #40	; 0x28
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
 8017940:	460b      	mov	r3, r1
 8017942:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8017948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801794a:	2b00      	cmp	r3, #0
 801794c:	d106      	bne.n	801795c <err_tcp+0x24>
 801794e:	4b6c      	ldr	r3, [pc, #432]	; (8017b00 <err_tcp+0x1c8>)
 8017950:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017954:	496b      	ldr	r1, [pc, #428]	; (8017b04 <err_tcp+0x1cc>)
 8017956:	486c      	ldr	r0, [pc, #432]	; (8017b08 <err_tcp+0x1d0>)
 8017958:	f00f fd6a 	bl	8027430 <iprintf>

  conn->pcb.tcp = NULL;
 801795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801795e:	2200      	movs	r2, #0
 8017960:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8017962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017964:	785b      	ldrb	r3, [r3, #1]
 8017966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 801796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796c:	2200      	movs	r2, #0
 801796e:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8017970:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017974:	2b04      	cmp	r3, #4
 8017976:	d114      	bne.n	80179a2 <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8017978:	2300      	movs	r3, #0
 801797a:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 801797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801797e:	2b00      	cmp	r3, #0
 8017980:	d018      	beq.n	80179b4 <err_tcp+0x7c>
 8017982:	f00b f959 	bl	8022c38 <sys_arch_protect>
 8017986:	61f8      	str	r0, [r7, #28]
 8017988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801798a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801798e:	f113 0f0c 	cmn.w	r3, #12
 8017992:	db02      	blt.n	801799a <err_tcp+0x62>
 8017994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017996:	2200      	movs	r2, #0
 8017998:	721a      	strb	r2, [r3, #8]
 801799a:	69f8      	ldr	r0, [r7, #28]
 801799c:	f00b f95a 	bl	8022c54 <sys_arch_unprotect>
 80179a0:	e008      	b.n	80179b4 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 80179a2:	f00b f949 	bl	8022c38 <sys_arch_protect>
 80179a6:	61b8      	str	r0, [r7, #24]
 80179a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179aa:	78fa      	ldrb	r2, [r7, #3]
 80179ac:	721a      	strb	r2, [r3, #8]
 80179ae:	69b8      	ldr	r0, [r7, #24]
 80179b0:	f00b f950 	bl	8022c54 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80179b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d005      	beq.n	80179c8 <err_tcp+0x90>
 80179bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179c0:	2200      	movs	r2, #0
 80179c2:	2104      	movs	r1, #4
 80179c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80179c6:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80179c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d005      	beq.n	80179dc <err_tcp+0xa4>
 80179d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179d4:	2200      	movs	r2, #0
 80179d6:	2100      	movs	r1, #0
 80179d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80179da:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80179dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d005      	beq.n	80179f0 <err_tcp+0xb8>
 80179e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179e8:	2200      	movs	r2, #0
 80179ea:	2102      	movs	r1, #2
 80179ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80179ee:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80179f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179f2:	3310      	adds	r3, #16
 80179f4:	4618      	mov	r0, r3
 80179f6:	f00b f803 	bl	8022a00 <sys_mbox_valid>
 80179fa:	4603      	mov	r3, r0
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d005      	beq.n	8017a0c <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8017a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a02:	3310      	adds	r3, #16
 8017a04:	2100      	movs	r1, #0
 8017a06:	4618      	mov	r0, r3
 8017a08:	f00a ff85 	bl	8022916 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8017a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a0e:	3314      	adds	r3, #20
 8017a10:	4618      	mov	r0, r3
 8017a12:	f00a fff5 	bl	8022a00 <sys_mbox_valid>
 8017a16:	4603      	mov	r3, r0
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d005      	beq.n	8017a28 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8017a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a1e:	3314      	adds	r3, #20
 8017a20:	2100      	movs	r1, #0
 8017a22:	4618      	mov	r0, r3
 8017a24:	f00a ff77 	bl	8022916 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8017a28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a2c:	2b01      	cmp	r3, #1
 8017a2e:	d007      	beq.n	8017a40 <err_tcp+0x108>
 8017a30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a34:	2b04      	cmp	r3, #4
 8017a36:	d003      	beq.n	8017a40 <err_tcp+0x108>
 8017a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a3c:	2b03      	cmp	r3, #3
 8017a3e:	d14d      	bne.n	8017adc <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8017a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a42:	7f1b      	ldrb	r3, [r3, #28]
 8017a44:	f003 0304 	and.w	r3, r3, #4
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	bf14      	ite	ne
 8017a4c:	2301      	movne	r3, #1
 8017a4e:	2300      	moveq	r3, #0
 8017a50:	b2db      	uxtb	r3, r3
 8017a52:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8017a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a56:	7f1b      	ldrb	r3, [r3, #28]
 8017a58:	f023 0304 	bic.w	r3, r3, #4
 8017a5c:	b2da      	uxtb	r2, r3
 8017a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a60:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8017a62:	697b      	ldr	r3, [r7, #20]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d145      	bne.n	8017af4 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8017a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d106      	bne.n	8017a7e <err_tcp+0x146>
 8017a70:	4b23      	ldr	r3, [pc, #140]	; (8017b00 <err_tcp+0x1c8>)
 8017a72:	f240 12b3 	movw	r2, #435	; 0x1b3
 8017a76:	4925      	ldr	r1, [pc, #148]	; (8017b0c <err_tcp+0x1d4>)
 8017a78:	4823      	ldr	r0, [pc, #140]	; (8017b08 <err_tcp+0x1d0>)
 8017a7a:	f00f fcd9 	bl	8027430 <iprintf>
      conn->current_msg->err = err;
 8017a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a82:	78fa      	ldrb	r2, [r7, #3]
 8017a84:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8017a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	330c      	adds	r3, #12
 8017a8e:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8017a90:	6938      	ldr	r0, [r7, #16]
 8017a92:	f00b f846 	bl	8022b22 <sys_sem_valid>
 8017a96:	4603      	mov	r3, r0
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d106      	bne.n	8017aaa <err_tcp+0x172>
 8017a9c:	4b18      	ldr	r3, [pc, #96]	; (8017b00 <err_tcp+0x1c8>)
 8017a9e:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017aa2:	491b      	ldr	r1, [pc, #108]	; (8017b10 <err_tcp+0x1d8>)
 8017aa4:	4818      	ldr	r0, [pc, #96]	; (8017b08 <err_tcp+0x1d0>)
 8017aa6:	f00f fcc3 	bl	8027430 <iprintf>
      conn->current_msg = NULL;
 8017aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aac:	2200      	movs	r2, #0
 8017aae:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8017ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d00e      	beq.n	8017ad4 <err_tcp+0x19c>
 8017ab6:	f00b f8bf 	bl	8022c38 <sys_arch_protect>
 8017aba:	60f8      	str	r0, [r7, #12]
 8017abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017abe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017ac2:	f113 0f0c 	cmn.w	r3, #12
 8017ac6:	db02      	blt.n	8017ace <err_tcp+0x196>
 8017ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aca:	78fa      	ldrb	r2, [r7, #3]
 8017acc:	721a      	strb	r2, [r3, #8]
 8017ace:	68f8      	ldr	r0, [r7, #12]
 8017ad0:	f00b f8c0 	bl	8022c54 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8017ad4:	6938      	ldr	r0, [r7, #16]
 8017ad6:	f00b f80a 	bl	8022aee <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8017ada:	e00b      	b.n	8017af4 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8017adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d008      	beq.n	8017af6 <err_tcp+0x1be>
 8017ae4:	4b06      	ldr	r3, [pc, #24]	; (8017b00 <err_tcp+0x1c8>)
 8017ae6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8017aea:	490a      	ldr	r1, [pc, #40]	; (8017b14 <err_tcp+0x1dc>)
 8017aec:	4806      	ldr	r0, [pc, #24]	; (8017b08 <err_tcp+0x1d0>)
 8017aee:	f00f fc9f 	bl	8027430 <iprintf>
  }
}
 8017af2:	e000      	b.n	8017af6 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8017af4:	bf00      	nop
}
 8017af6:	bf00      	nop
 8017af8:	3728      	adds	r7, #40	; 0x28
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd80      	pop	{r7, pc}
 8017afe:	bf00      	nop
 8017b00:	080291c4 	.word	0x080291c4
 8017b04:	08029284 	.word	0x08029284
 8017b08:	0802921c 	.word	0x0802921c
 8017b0c:	08029294 	.word	0x08029294
 8017b10:	080292b0 	.word	0x080292b0
 8017b14:	080292cc 	.word	0x080292cc

08017b18 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b084      	sub	sp, #16
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	685b      	ldr	r3, [r3, #4]
 8017b24:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8017b26:	6879      	ldr	r1, [r7, #4]
 8017b28:	68f8      	ldr	r0, [r7, #12]
 8017b2a:	f006 fc65 	bl	801e3f8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8017b2e:	490a      	ldr	r1, [pc, #40]	; (8017b58 <setup_tcp+0x40>)
 8017b30:	68f8      	ldr	r0, [r7, #12]
 8017b32:	f006 fc73 	bl	801e41c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8017b36:	4909      	ldr	r1, [pc, #36]	; (8017b5c <setup_tcp+0x44>)
 8017b38:	68f8      	ldr	r0, [r7, #12]
 8017b3a:	f006 fc91 	bl	801e460 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8017b3e:	2202      	movs	r2, #2
 8017b40:	4907      	ldr	r1, [pc, #28]	; (8017b60 <setup_tcp+0x48>)
 8017b42:	68f8      	ldr	r0, [r7, #12]
 8017b44:	f006 fce6 	bl	801e514 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8017b48:	4906      	ldr	r1, [pc, #24]	; (8017b64 <setup_tcp+0x4c>)
 8017b4a:	68f8      	ldr	r0, [r7, #12]
 8017b4c:	f006 fca8 	bl	801e4a0 <tcp_err>
}
 8017b50:	bf00      	nop
 8017b52:	3710      	adds	r7, #16
 8017b54:	46bd      	mov	sp, r7
 8017b56:	bd80      	pop	{r7, pc}
 8017b58:	080176b1 	.word	0x080176b1
 8017b5c:	0801788d 	.word	0x0801788d
 8017b60:	080177c1 	.word	0x080177c1
 8017b64:	08017939 	.word	0x08017939

08017b68 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b088      	sub	sp, #32
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	60f8      	str	r0, [r7, #12]
 8017b70:	60b9      	str	r1, [r7, #8]
 8017b72:	4613      	mov	r3, r2
 8017b74:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8017b7a:	69fb      	ldr	r3, [r7, #28]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d102      	bne.n	8017b86 <accept_function+0x1e>
    return ERR_VAL;
 8017b80:	f06f 0305 	mvn.w	r3, #5
 8017b84:	e08d      	b.n	8017ca2 <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8017b86:	69fb      	ldr	r3, [r7, #28]
 8017b88:	3314      	adds	r3, #20
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	f00a ff38 	bl	8022a00 <sys_mbox_valid>
 8017b90:	4603      	mov	r3, r0
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d102      	bne.n	8017b9c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8017b96:	f06f 0305 	mvn.w	r3, #5
 8017b9a:	e082      	b.n	8017ca2 <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8017b9c:	68bb      	ldr	r3, [r7, #8]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d115      	bne.n	8017bce <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8017ba2:	69fb      	ldr	r3, [r7, #28]
 8017ba4:	3314      	adds	r3, #20
 8017ba6:	4941      	ldr	r1, [pc, #260]	; (8017cac <accept_function+0x144>)
 8017ba8:	4618      	mov	r0, r3
 8017baa:	f00a feb4 	bl	8022916 <sys_mbox_trypost>
 8017bae:	4603      	mov	r3, r0
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d109      	bne.n	8017bc8 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017bb4:	69fb      	ldr	r3, [r7, #28]
 8017bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d005      	beq.n	8017bc8 <accept_function+0x60>
 8017bbc:	69fb      	ldr	r3, [r7, #28]
 8017bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	2100      	movs	r1, #0
 8017bc4:	69f8      	ldr	r0, [r7, #28]
 8017bc6:	4798      	blx	r3
    }
    return ERR_VAL;
 8017bc8:	f06f 0305 	mvn.w	r3, #5
 8017bcc:	e069      	b.n	8017ca2 <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8017bce:	69fb      	ldr	r3, [r7, #28]
 8017bd0:	781a      	ldrb	r2, [r3, #0]
 8017bd2:	69fb      	ldr	r3, [r7, #28]
 8017bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017bd6:	4619      	mov	r1, r3
 8017bd8:	4610      	mov	r0, r2
 8017bda:	f000 f8d7 	bl	8017d8c <netconn_alloc>
 8017bde:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8017be0:	69bb      	ldr	r3, [r7, #24]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d115      	bne.n	8017c12 <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8017be6:	69fb      	ldr	r3, [r7, #28]
 8017be8:	3314      	adds	r3, #20
 8017bea:	4930      	ldr	r1, [pc, #192]	; (8017cac <accept_function+0x144>)
 8017bec:	4618      	mov	r0, r3
 8017bee:	f00a fe92 	bl	8022916 <sys_mbox_trypost>
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d109      	bne.n	8017c0c <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017bf8:	69fb      	ldr	r3, [r7, #28]
 8017bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d005      	beq.n	8017c0c <accept_function+0xa4>
 8017c00:	69fb      	ldr	r3, [r7, #28]
 8017c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c04:	2200      	movs	r2, #0
 8017c06:	2100      	movs	r1, #0
 8017c08:	69f8      	ldr	r0, [r7, #28]
 8017c0a:	4798      	blx	r3
    }
    return ERR_MEM;
 8017c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8017c10:	e047      	b.n	8017ca2 <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 8017c12:	69bb      	ldr	r3, [r7, #24]
 8017c14:	68ba      	ldr	r2, [r7, #8]
 8017c16:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8017c18:	69b8      	ldr	r0, [r7, #24]
 8017c1a:	f7ff ff7d 	bl	8017b18 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 8017c1e:	69bb      	ldr	r3, [r7, #24]
 8017c20:	79fa      	ldrb	r2, [r7, #7]
 8017c22:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8017c24:	69fb      	ldr	r3, [r7, #28]
 8017c26:	3314      	adds	r3, #20
 8017c28:	69b9      	ldr	r1, [r7, #24]
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f00a fe73 	bl	8022916 <sys_mbox_trypost>
 8017c30:	4603      	mov	r3, r0
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d02a      	beq.n	8017c8c <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8017c36:	69bb      	ldr	r3, [r7, #24]
 8017c38:	685b      	ldr	r3, [r3, #4]
 8017c3a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8017c3c:	2100      	movs	r1, #0
 8017c3e:	6978      	ldr	r0, [r7, #20]
 8017c40:	f006 fbda 	bl	801e3f8 <tcp_arg>
    tcp_recv(pcb, NULL);
 8017c44:	2100      	movs	r1, #0
 8017c46:	6978      	ldr	r0, [r7, #20]
 8017c48:	f006 fbe8 	bl	801e41c <tcp_recv>
    tcp_sent(pcb, NULL);
 8017c4c:	2100      	movs	r1, #0
 8017c4e:	6978      	ldr	r0, [r7, #20]
 8017c50:	f006 fc06 	bl	801e460 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8017c54:	2200      	movs	r2, #0
 8017c56:	2100      	movs	r1, #0
 8017c58:	6978      	ldr	r0, [r7, #20]
 8017c5a:	f006 fc5b 	bl	801e514 <tcp_poll>
    tcp_err(pcb, NULL);
 8017c5e:	2100      	movs	r1, #0
 8017c60:	6978      	ldr	r0, [r7, #20]
 8017c62:	f006 fc1d 	bl	801e4a0 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8017c66:	69bb      	ldr	r3, [r7, #24]
 8017c68:	2200      	movs	r2, #0
 8017c6a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8017c6c:	69bb      	ldr	r3, [r7, #24]
 8017c6e:	3310      	adds	r3, #16
 8017c70:	4618      	mov	r0, r3
 8017c72:	f00a fe29 	bl	80228c8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8017c76:	69bb      	ldr	r3, [r7, #24]
 8017c78:	3310      	adds	r3, #16
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	f00a fed1 	bl	8022a22 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8017c80:	69b8      	ldr	r0, [r7, #24]
 8017c82:	f000 f8ed 	bl	8017e60 <netconn_free>
    return ERR_MEM;
 8017c86:	f04f 33ff 	mov.w	r3, #4294967295
 8017c8a:	e00a      	b.n	8017ca2 <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017c8c:	69fb      	ldr	r3, [r7, #28]
 8017c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d005      	beq.n	8017ca0 <accept_function+0x138>
 8017c94:	69fb      	ldr	r3, [r7, #28]
 8017c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c98:	2200      	movs	r2, #0
 8017c9a:	2100      	movs	r1, #0
 8017c9c:	69f8      	ldr	r0, [r7, #28]
 8017c9e:	4798      	blx	r3
  }

  return ERR_OK;
 8017ca0:	2300      	movs	r3, #0
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3720      	adds	r7, #32
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}
 8017caa:	bf00      	nop
 8017cac:	2000a270 	.word	0x2000a270

08017cb0 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8017cb0:	b590      	push	{r4, r7, lr}
 8017cb2:	b085      	sub	sp, #20
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8017cb8:	2300      	movs	r3, #0
 8017cba:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	685b      	ldr	r3, [r3, #4]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d006      	beq.n	8017cd4 <pcb_new+0x24>
 8017cc6:	4b18      	ldr	r3, [pc, #96]	; (8017d28 <pcb_new+0x78>)
 8017cc8:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8017ccc:	4917      	ldr	r1, [pc, #92]	; (8017d2c <pcb_new+0x7c>)
 8017cce:	4818      	ldr	r0, [pc, #96]	; (8017d30 <pcb_new+0x80>)
 8017cd0:	f00f fbae 	bl	8027430 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	781b      	ldrb	r3, [r3, #0]
 8017cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017cde:	2b10      	cmp	r3, #16
 8017ce0:	d112      	bne.n	8017d08 <pcb_new+0x58>
    }
    break;
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	681c      	ldr	r4, [r3, #0]
 8017ce6:	7bfb      	ldrb	r3, [r7, #15]
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f006 fb77 	bl	801e3dc <tcp_new_ip_type>
 8017cee:	4603      	mov	r3, r0
 8017cf0:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	685b      	ldr	r3, [r3, #4]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d009      	beq.n	8017d10 <pcb_new+0x60>
      setup_tcp(msg->conn);
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	4618      	mov	r0, r3
 8017d02:	f7ff ff09 	bl	8017b18 <setup_tcp>
    }
    break;
 8017d06:	e003      	b.n	8017d10 <pcb_new+0x60>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	22fa      	movs	r2, #250	; 0xfa
 8017d0c:	711a      	strb	r2, [r3, #4]
    return;
 8017d0e:	e008      	b.n	8017d22 <pcb_new+0x72>
    break;
 8017d10:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	685b      	ldr	r3, [r3, #4]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d102      	bne.n	8017d22 <pcb_new+0x72>
    msg->err = ERR_MEM;
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	22ff      	movs	r2, #255	; 0xff
 8017d20:	711a      	strb	r2, [r3, #4]
  }
}
 8017d22:	3714      	adds	r7, #20
 8017d24:	46bd      	mov	sp, r7
 8017d26:	bd90      	pop	{r4, r7, pc}
 8017d28:	080291c4 	.word	0x080291c4
 8017d2c:	080292e8 	.word	0x080292e8
 8017d30:	0802921c 	.word	0x0802921c

08017d34 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b084      	sub	sp, #16
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	2200      	movs	r2, #0
 8017d44:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	685b      	ldr	r3, [r3, #4]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d102      	bne.n	8017d56 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8017d50:	68f8      	ldr	r0, [r7, #12]
 8017d52:	f7ff ffad 	bl	8017cb0 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d012      	beq.n	8017d84 <lwip_netconn_do_newconn+0x50>
 8017d5e:	f00a ff6b 	bl	8022c38 <sys_arch_protect>
 8017d62:	60b8      	str	r0, [r7, #8]
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017d6c:	f113 0f0c 	cmn.w	r3, #12
 8017d70:	db05      	blt.n	8017d7e <lwip_netconn_do_newconn+0x4a>
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	68fa      	ldr	r2, [r7, #12]
 8017d78:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8017d7c:	721a      	strb	r2, [r3, #8]
 8017d7e:	68b8      	ldr	r0, [r7, #8]
 8017d80:	f00a ff68 	bl	8022c54 <sys_arch_unprotect>
}
 8017d84:	bf00      	nop
 8017d86:	3710      	adds	r7, #16
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}

08017d8c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b084      	sub	sp, #16
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	4603      	mov	r3, r0
 8017d94:	6039      	str	r1, [r7, #0]
 8017d96:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8017d98:	2006      	movs	r0, #6
 8017d9a:	f004 f88d 	bl	801beb8 <memp_malloc>
 8017d9e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d101      	bne.n	8017daa <netconn_alloc+0x1e>
    return NULL;
 8017da6:	2300      	movs	r3, #0
 8017da8:	e050      	b.n	8017e4c <netconn_alloc+0xc0>
  }

  conn->last_err = ERR_OK;
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	2200      	movs	r2, #0
 8017dae:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	79fa      	ldrb	r2, [r7, #7]
 8017db4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	2200      	movs	r2, #0
 8017dba:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8017dbc:	79fb      	ldrb	r3, [r7, #7]
 8017dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017dc2:	2b10      	cmp	r3, #16
 8017dc4:	d10c      	bne.n	8017de0 <netconn_alloc+0x54>
    size = DEFAULT_UDP_RECVMBOX_SIZE;
    break;
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8017dc6:	2306      	movs	r3, #6
 8017dc8:	60bb      	str	r3, [r7, #8]
    break;
 8017dca:	bf00      	nop
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
    goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	3310      	adds	r3, #16
 8017dd0:	68b9      	ldr	r1, [r7, #8]
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	f00a fd56 	bl	8022884 <sys_mbox_new>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d008      	beq.n	8017df0 <netconn_alloc+0x64>
    goto free_and_return;
 8017dde:	e030      	b.n	8017e42 <netconn_alloc+0xb6>
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8017de0:	4b1c      	ldr	r3, [pc, #112]	; (8017e54 <netconn_alloc+0xc8>)
 8017de2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017de6:	491c      	ldr	r1, [pc, #112]	; (8017e58 <netconn_alloc+0xcc>)
 8017de8:	481c      	ldr	r0, [pc, #112]	; (8017e5c <netconn_alloc+0xd0>)
 8017dea:	f00f fb21 	bl	8027430 <iprintf>
    goto free_and_return;
 8017dee:	e028      	b.n	8017e42 <netconn_alloc+0xb6>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	330c      	adds	r3, #12
 8017df4:	2100      	movs	r1, #0
 8017df6:	4618      	mov	r0, r3
 8017df8:	f00a fe20 	bl	8022a3c <sys_sem_new>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d005      	beq.n	8017e0e <netconn_alloc+0x82>
    sys_mbox_free(&conn->recvmbox);
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	3310      	adds	r3, #16
 8017e06:	4618      	mov	r0, r3
 8017e08:	f00a fd5e 	bl	80228c8 <sys_mbox_free>
    goto free_and_return;
 8017e0c:	e019      	b.n	8017e42 <netconn_alloc+0xb6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	3314      	adds	r3, #20
 8017e12:	4618      	mov	r0, r3
 8017e14:	f00a fe05 	bl	8022a22 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	f04f 32ff 	mov.w	r2, #4294967295
 8017e24:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	683a      	ldr	r2, [r7, #0]
 8017e2a:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	2200      	movs	r2, #0
 8017e36:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	771a      	strb	r2, [r3, #28]
  return conn;
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	e004      	b.n	8017e4c <netconn_alloc+0xc0>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8017e42:	68f9      	ldr	r1, [r7, #12]
 8017e44:	2006      	movs	r0, #6
 8017e46:	f004 f889 	bl	801bf5c <memp_free>
  return NULL;
 8017e4a:	2300      	movs	r3, #0
}
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	3710      	adds	r7, #16
 8017e50:	46bd      	mov	sp, r7
 8017e52:	bd80      	pop	{r7, pc}
 8017e54:	080291c4 	.word	0x080291c4
 8017e58:	08029308 	.word	0x08029308
 8017e5c:	0802921c 	.word	0x0802921c

08017e60 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b082      	sub	sp, #8
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	685b      	ldr	r3, [r3, #4]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d006      	beq.n	8017e7e <netconn_free+0x1e>
 8017e70:	4b1b      	ldr	r3, [pc, #108]	; (8017ee0 <netconn_free+0x80>)
 8017e72:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017e76:	491b      	ldr	r1, [pc, #108]	; (8017ee4 <netconn_free+0x84>)
 8017e78:	481b      	ldr	r0, [pc, #108]	; (8017ee8 <netconn_free+0x88>)
 8017e7a:	f00f fad9 	bl	8027430 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	3310      	adds	r3, #16
 8017e82:	4618      	mov	r0, r3
 8017e84:	f00a fdbc 	bl	8022a00 <sys_mbox_valid>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d006      	beq.n	8017e9c <netconn_free+0x3c>
 8017e8e:	4b14      	ldr	r3, [pc, #80]	; (8017ee0 <netconn_free+0x80>)
 8017e90:	f240 22e2 	movw	r2, #738	; 0x2e2
 8017e94:	4915      	ldr	r1, [pc, #84]	; (8017eec <netconn_free+0x8c>)
 8017e96:	4814      	ldr	r0, [pc, #80]	; (8017ee8 <netconn_free+0x88>)
 8017e98:	f00f faca 	bl	8027430 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	3314      	adds	r3, #20
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f00a fdad 	bl	8022a00 <sys_mbox_valid>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d006      	beq.n	8017eba <netconn_free+0x5a>
 8017eac:	4b0c      	ldr	r3, [pc, #48]	; (8017ee0 <netconn_free+0x80>)
 8017eae:	f240 22e5 	movw	r2, #741	; 0x2e5
 8017eb2:	490f      	ldr	r1, [pc, #60]	; (8017ef0 <netconn_free+0x90>)
 8017eb4:	480c      	ldr	r0, [pc, #48]	; (8017ee8 <netconn_free+0x88>)
 8017eb6:	f00f fabb 	bl	8027430 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	330c      	adds	r3, #12
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f00a fe22 	bl	8022b08 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	330c      	adds	r3, #12
 8017ec8:	4618      	mov	r0, r3
 8017eca:	f00a fe3b 	bl	8022b44 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8017ece:	6879      	ldr	r1, [r7, #4]
 8017ed0:	2006      	movs	r0, #6
 8017ed2:	f004 f843 	bl	801bf5c <memp_free>
}
 8017ed6:	bf00      	nop
 8017ed8:	3708      	adds	r7, #8
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bd80      	pop	{r7, pc}
 8017ede:	bf00      	nop
 8017ee0:	080291c4 	.word	0x080291c4
 8017ee4:	08029330 	.word	0x08029330
 8017ee8:	0802921c 	.word	0x0802921c
 8017eec:	08029360 	.word	0x08029360
 8017ef0:	0802939c 	.word	0x0802939c

08017ef4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8017ef4:	b580      	push	{r7, lr}
 8017ef6:	b086      	sub	sp, #24
 8017ef8:	af00      	add	r7, sp, #0
 8017efa:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	3310      	adds	r3, #16
 8017f00:	4618      	mov	r0, r3
 8017f02:	f00a fd7d 	bl	8022a00 <sys_mbox_valid>
 8017f06:	4603      	mov	r3, r0
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d035      	beq.n	8017f78 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8017f0c:	e01e      	b.n	8017f4c <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	781b      	ldrb	r3, [r3, #0]
 8017f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017f16:	2b10      	cmp	r3, #16
 8017f18:	d114      	bne.n	8017f44 <netconn_drain+0x50>
        if (mem != NULL) {
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d015      	beq.n	8017f4c <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	685b      	ldr	r3, [r3, #4]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d007      	beq.n	8017f3c <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	685a      	ldr	r2, [r3, #4]
 8017f30:	697b      	ldr	r3, [r7, #20]
 8017f32:	891b      	ldrh	r3, [r3, #8]
 8017f34:	4619      	mov	r1, r3
 8017f36:	4610      	mov	r0, r2
 8017f38:	f005 fc7c 	bl	801d834 <tcp_recved>
          }
          pbuf_free(p);
 8017f3c:	6978      	ldr	r0, [r7, #20]
 8017f3e:	f004 fd9d 	bl	801ca7c <pbuf_free>
 8017f42:	e003      	b.n	8017f4c <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	4618      	mov	r0, r3
 8017f48:	f000 ff16 	bl	8018d78 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	3310      	adds	r3, #16
 8017f50:	f107 020c 	add.w	r2, r7, #12
 8017f54:	4611      	mov	r1, r2
 8017f56:	4618      	mov	r0, r3
 8017f58:	f00a fd36 	bl	80229c8 <sys_arch_mbox_tryfetch>
 8017f5c:	4603      	mov	r3, r0
 8017f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f62:	d1d4      	bne.n	8017f0e <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	3310      	adds	r3, #16
 8017f68:	4618      	mov	r0, r3
 8017f6a:	f00a fcad 	bl	80228c8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	3310      	adds	r3, #16
 8017f72:	4618      	mov	r0, r3
 8017f74:	f00a fd55 	bl	8022a22 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	3314      	adds	r3, #20
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f00a fd3f 	bl	8022a00 <sys_mbox_valid>
 8017f82:	4603      	mov	r3, r0
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d02e      	beq.n	8017fe6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8017f88:	e017      	b.n	8017fba <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	4a18      	ldr	r2, [pc, #96]	; (8017ff0 <netconn_drain+0xfc>)
 8017f8e:	4293      	cmp	r3, r2
 8017f90:	d013      	beq.n	8017fba <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 8017f96:	6938      	ldr	r0, [r7, #16]
 8017f98:	f7ff ffac 	bl	8017ef4 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8017f9c:	693b      	ldr	r3, [r7, #16]
 8017f9e:	685b      	ldr	r3, [r3, #4]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d007      	beq.n	8017fb4 <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8017fa4:	693b      	ldr	r3, [r7, #16]
 8017fa6:	685b      	ldr	r3, [r3, #4]
 8017fa8:	4618      	mov	r0, r3
 8017faa:	f005 faad 	bl	801d508 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8017fae:	693b      	ldr	r3, [r7, #16]
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8017fb4:	6938      	ldr	r0, [r7, #16]
 8017fb6:	f7ff ff53 	bl	8017e60 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	3314      	adds	r3, #20
 8017fbe:	f107 020c 	add.w	r2, r7, #12
 8017fc2:	4611      	mov	r1, r2
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	f00a fcff 	bl	80229c8 <sys_arch_mbox_tryfetch>
 8017fca:	4603      	mov	r3, r0
 8017fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fd0:	d1db      	bne.n	8017f8a <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	3314      	adds	r3, #20
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	f00a fc76 	bl	80228c8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	3314      	adds	r3, #20
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f00a fd1e 	bl	8022a22 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8017fe6:	bf00      	nop
 8017fe8:	3718      	adds	r7, #24
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bd80      	pop	{r7, pc}
 8017fee:	bf00      	nop
 8017ff0:	2000a270 	.word	0x2000a270

08017ff4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b088      	sub	sp, #32
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
 8017ffc:	460b      	mov	r3, r1
 8017ffe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8018000:	2300      	movs	r3, #0
 8018002:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d106      	bne.n	8018018 <lwip_netconn_do_close_internal+0x24>
 801800a:	4baa      	ldr	r3, [pc, #680]	; (80182b4 <lwip_netconn_do_close_internal+0x2c0>)
 801800c:	f240 3243 	movw	r2, #835	; 0x343
 8018010:	49a9      	ldr	r1, [pc, #676]	; (80182b8 <lwip_netconn_do_close_internal+0x2c4>)
 8018012:	48aa      	ldr	r0, [pc, #680]	; (80182bc <lwip_netconn_do_close_internal+0x2c8>)
 8018014:	f00f fa0c 	bl	8027430 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	781b      	ldrb	r3, [r3, #0]
 801801c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018020:	2b10      	cmp	r3, #16
 8018022:	d006      	beq.n	8018032 <lwip_netconn_do_close_internal+0x3e>
 8018024:	4ba3      	ldr	r3, [pc, #652]	; (80182b4 <lwip_netconn_do_close_internal+0x2c0>)
 8018026:	f44f 7251 	mov.w	r2, #836	; 0x344
 801802a:	49a5      	ldr	r1, [pc, #660]	; (80182c0 <lwip_netconn_do_close_internal+0x2cc>)
 801802c:	48a3      	ldr	r0, [pc, #652]	; (80182bc <lwip_netconn_do_close_internal+0x2c8>)
 801802e:	f00f f9ff 	bl	8027430 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	785b      	ldrb	r3, [r3, #1]
 8018036:	2b04      	cmp	r3, #4
 8018038:	d006      	beq.n	8018048 <lwip_netconn_do_close_internal+0x54>
 801803a:	4b9e      	ldr	r3, [pc, #632]	; (80182b4 <lwip_netconn_do_close_internal+0x2c0>)
 801803c:	f240 3245 	movw	r2, #837	; 0x345
 8018040:	49a0      	ldr	r1, [pc, #640]	; (80182c4 <lwip_netconn_do_close_internal+0x2d0>)
 8018042:	489e      	ldr	r0, [pc, #632]	; (80182bc <lwip_netconn_do_close_internal+0x2c8>)
 8018044:	f00f f9f4 	bl	8027430 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	685b      	ldr	r3, [r3, #4]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d106      	bne.n	801805e <lwip_netconn_do_close_internal+0x6a>
 8018050:	4b98      	ldr	r3, [pc, #608]	; (80182b4 <lwip_netconn_do_close_internal+0x2c0>)
 8018052:	f240 3246 	movw	r2, #838	; 0x346
 8018056:	499c      	ldr	r1, [pc, #624]	; (80182c8 <lwip_netconn_do_close_internal+0x2d4>)
 8018058:	4898      	ldr	r0, [pc, #608]	; (80182bc <lwip_netconn_do_close_internal+0x2c8>)
 801805a:	f00f f9e9 	bl	8027430 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018062:	2b00      	cmp	r3, #0
 8018064:	d106      	bne.n	8018074 <lwip_netconn_do_close_internal+0x80>
 8018066:	4b93      	ldr	r3, [pc, #588]	; (80182b4 <lwip_netconn_do_close_internal+0x2c0>)
 8018068:	f240 3247 	movw	r2, #839	; 0x347
 801806c:	4997      	ldr	r1, [pc, #604]	; (80182cc <lwip_netconn_do_close_internal+0x2d8>)
 801806e:	4893      	ldr	r0, [pc, #588]	; (80182bc <lwip_netconn_do_close_internal+0x2c8>)
 8018070:	f00f f9de 	bl	8027430 <iprintf>

  tpcb = conn->pcb.tcp;
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	685b      	ldr	r3, [r3, #4]
 8018078:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801807e:	7a1b      	ldrb	r3, [r3, #8]
 8018080:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8018082:	7dfb      	ldrb	r3, [r7, #23]
 8018084:	f003 0301 	and.w	r3, r3, #1
 8018088:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 801808a:	7dfb      	ldrb	r3, [r7, #23]
 801808c:	f003 0302 	and.w	r3, r3, #2
 8018090:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8018092:	7dfb      	ldrb	r3, [r7, #23]
 8018094:	2b03      	cmp	r3, #3
 8018096:	d102      	bne.n	801809e <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8018098:	2301      	movs	r3, #1
 801809a:	77bb      	strb	r3, [r7, #30]
 801809c:	e01f      	b.n	80180de <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 801809e:	7dbb      	ldrb	r3, [r7, #22]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d00e      	beq.n	80180c2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80180a4:	69bb      	ldr	r3, [r7, #24]
 80180a6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80180a8:	2b05      	cmp	r3, #5
 80180aa:	d007      	beq.n	80180bc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80180ac:	69bb      	ldr	r3, [r7, #24]
 80180ae:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80180b0:	2b06      	cmp	r3, #6
 80180b2:	d003      	beq.n	80180bc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80180b4:	69bb      	ldr	r3, [r7, #24]
 80180b6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80180b8:	2b08      	cmp	r3, #8
 80180ba:	d102      	bne.n	80180c2 <lwip_netconn_do_close_internal+0xce>
    close = 1;
 80180bc:	2301      	movs	r3, #1
 80180be:	77bb      	strb	r3, [r7, #30]
 80180c0:	e00d      	b.n	80180de <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80180c2:	7d7b      	ldrb	r3, [r7, #21]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d008      	beq.n	80180da <lwip_netconn_do_close_internal+0xe6>
 80180c8:	69bb      	ldr	r3, [r7, #24]
 80180ca:	7e9b      	ldrb	r3, [r3, #26]
 80180cc:	f003 0310 	and.w	r3, r3, #16
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d002      	beq.n	80180da <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 80180d4:	2301      	movs	r3, #1
 80180d6:	77bb      	strb	r3, [r7, #30]
 80180d8:	e001      	b.n	80180de <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 80180da:	2300      	movs	r3, #0
 80180dc:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 80180de:	7fbb      	ldrb	r3, [r7, #30]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d003      	beq.n	80180ec <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80180e4:	2100      	movs	r1, #0
 80180e6:	69b8      	ldr	r0, [r7, #24]
 80180e8:	f006 f986 	bl	801e3f8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80180ec:	69bb      	ldr	r3, [r7, #24]
 80180ee:	7d1b      	ldrb	r3, [r3, #20]
 80180f0:	2b01      	cmp	r3, #1
 80180f2:	d104      	bne.n	80180fe <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80180f4:	2100      	movs	r1, #0
 80180f6:	69b8      	ldr	r0, [r7, #24]
 80180f8:	f006 f9f4 	bl	801e4e4 <tcp_accept>
 80180fc:	e01d      	b.n	801813a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80180fe:	7dbb      	ldrb	r3, [r7, #22]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d007      	beq.n	8018114 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8018104:	2100      	movs	r1, #0
 8018106:	69b8      	ldr	r0, [r7, #24]
 8018108:	f006 f988 	bl	801e41c <tcp_recv>
      tcp_accept(tpcb, NULL);
 801810c:	2100      	movs	r1, #0
 801810e:	69b8      	ldr	r0, [r7, #24]
 8018110:	f006 f9e8 	bl	801e4e4 <tcp_accept>
    }
    if (shut_tx) {
 8018114:	7d7b      	ldrb	r3, [r7, #21]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d003      	beq.n	8018122 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801811a:	2100      	movs	r1, #0
 801811c:	69b8      	ldr	r0, [r7, #24]
 801811e:	f006 f99f 	bl	801e460 <tcp_sent>
    }
    if (close) {
 8018122:	7fbb      	ldrb	r3, [r7, #30]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d008      	beq.n	801813a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8018128:	2200      	movs	r2, #0
 801812a:	2100      	movs	r1, #0
 801812c:	69b8      	ldr	r0, [r7, #24]
 801812e:	f006 f9f1 	bl	801e514 <tcp_poll>
      tcp_err(tpcb, NULL);
 8018132:	2100      	movs	r1, #0
 8018134:	69b8      	ldr	r0, [r7, #24]
 8018136:	f006 f9b3 	bl	801e4a0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 801813a:	7fbb      	ldrb	r3, [r7, #30]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d005      	beq.n	801814c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8018140:	69b8      	ldr	r0, [r7, #24]
 8018142:	f005 f8cf 	bl	801d2e4 <tcp_close>
 8018146:	4603      	mov	r3, r0
 8018148:	77fb      	strb	r3, [r7, #31]
 801814a:	e007      	b.n	801815c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 801814c:	7dbb      	ldrb	r3, [r7, #22]
 801814e:	7d7a      	ldrb	r2, [r7, #21]
 8018150:	4619      	mov	r1, r3
 8018152:	69b8      	ldr	r0, [r7, #24]
 8018154:	f005 f8de 	bl	801d314 <tcp_shutdown>
 8018158:	4603      	mov	r3, r0
 801815a:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 801815c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d102      	bne.n	801816a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8018164:	2301      	movs	r3, #1
 8018166:	777b      	strb	r3, [r7, #29]
 8018168:	e016      	b.n	8018198 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801816a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801816e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018172:	d10f      	bne.n	8018194 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018178:	7a5b      	ldrb	r3, [r3, #9]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d10c      	bne.n	8018198 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 801817e:	2301      	movs	r3, #1
 8018180:	777b      	strb	r3, [r7, #29]
        if (close) {
 8018182:	7fbb      	ldrb	r3, [r7, #30]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d007      	beq.n	8018198 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8018188:	69b8      	ldr	r0, [r7, #24]
 801818a:	f005 f9bd 	bl	801d508 <tcp_abort>
          err = ERR_OK;
 801818e:	2300      	movs	r3, #0
 8018190:	77fb      	strb	r3, [r7, #31]
 8018192:	e001      	b.n	8018198 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8018194:	2301      	movs	r3, #1
 8018196:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8018198:	7f7b      	ldrb	r3, [r7, #29]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d056      	beq.n	801824c <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	330c      	adds	r3, #12
 80181a6:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181ac:	7ffa      	ldrb	r2, [r7, #31]
 80181ae:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	2200      	movs	r2, #0
 80181b4:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	2200      	movs	r2, #0
 80181ba:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80181bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d129      	bne.n	8018218 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 80181c4:	7fbb      	ldrb	r3, [r7, #30]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d00c      	beq.n	80181e4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	2200      	movs	r2, #0
 80181ce:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d005      	beq.n	80181e4 <lwip_netconn_do_close_internal+0x1f0>
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181dc:	2200      	movs	r2, #0
 80181de:	2104      	movs	r1, #4
 80181e0:	6878      	ldr	r0, [r7, #4]
 80181e2:	4798      	blx	r3
      }
      if (shut_rx) {
 80181e4:	7dbb      	ldrb	r3, [r7, #22]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d009      	beq.n	80181fe <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d005      	beq.n	80181fe <lwip_netconn_do_close_internal+0x20a>
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181f6:	2200      	movs	r2, #0
 80181f8:	2100      	movs	r1, #0
 80181fa:	6878      	ldr	r0, [r7, #4]
 80181fc:	4798      	blx	r3
      }
      if (shut_tx) {
 80181fe:	7d7b      	ldrb	r3, [r7, #21]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d009      	beq.n	8018218 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018208:	2b00      	cmp	r3, #0
 801820a:	d005      	beq.n	8018218 <lwip_netconn_do_close_internal+0x224>
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018210:	2200      	movs	r2, #0
 8018212:	2102      	movs	r1, #2
 8018214:	6878      	ldr	r0, [r7, #4]
 8018216:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d00e      	beq.n	801823c <lwip_netconn_do_close_internal+0x248>
 801821e:	f00a fd0b 	bl	8022c38 <sys_arch_protect>
 8018222:	60f8      	str	r0, [r7, #12]
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801822a:	f113 0f0c 	cmn.w	r3, #12
 801822e:	db02      	blt.n	8018236 <lwip_netconn_do_close_internal+0x242>
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	7ffa      	ldrb	r2, [r7, #31]
 8018234:	721a      	strb	r2, [r3, #8]
 8018236:	68f8      	ldr	r0, [r7, #12]
 8018238:	f00a fd0c 	bl	8022c54 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801823c:	78fb      	ldrb	r3, [r7, #3]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d002      	beq.n	8018248 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8018242:	6938      	ldr	r0, [r7, #16]
 8018244:	f00a fc53 	bl	8022aee <sys_sem_signal>
    }
    return ERR_OK;
 8018248:	2300      	movs	r3, #0
 801824a:	e02e      	b.n	80182aa <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 801824c:	7f7b      	ldrb	r3, [r7, #29]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d11e      	bne.n	8018290 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8018252:	69bb      	ldr	r3, [r7, #24]
 8018254:	7d1b      	ldrb	r3, [r3, #20]
 8018256:	2b01      	cmp	r3, #1
 8018258:	d106      	bne.n	8018268 <lwip_netconn_do_close_internal+0x274>
 801825a:	4b16      	ldr	r3, [pc, #88]	; (80182b4 <lwip_netconn_do_close_internal+0x2c0>)
 801825c:	f240 32e3 	movw	r2, #995	; 0x3e3
 8018260:	491b      	ldr	r1, [pc, #108]	; (80182d0 <lwip_netconn_do_close_internal+0x2dc>)
 8018262:	4816      	ldr	r0, [pc, #88]	; (80182bc <lwip_netconn_do_close_internal+0x2c8>)
 8018264:	f00f f8e4 	bl	8027430 <iprintf>
    if (shut_tx) {
 8018268:	7d7b      	ldrb	r3, [r7, #21]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d003      	beq.n	8018276 <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 801826e:	4919      	ldr	r1, [pc, #100]	; (80182d4 <lwip_netconn_do_close_internal+0x2e0>)
 8018270:	69b8      	ldr	r0, [r7, #24]
 8018272:	f006 f8f5 	bl	801e460 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8018276:	2201      	movs	r2, #1
 8018278:	4917      	ldr	r1, [pc, #92]	; (80182d8 <lwip_netconn_do_close_internal+0x2e4>)
 801827a:	69b8      	ldr	r0, [r7, #24]
 801827c:	f006 f94a 	bl	801e514 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8018280:	4916      	ldr	r1, [pc, #88]	; (80182dc <lwip_netconn_do_close_internal+0x2e8>)
 8018282:	69b8      	ldr	r0, [r7, #24]
 8018284:	f006 f90c 	bl	801e4a0 <tcp_err>
    tcp_arg(tpcb, conn);
 8018288:	6879      	ldr	r1, [r7, #4]
 801828a:	69b8      	ldr	r0, [r7, #24]
 801828c:	f006 f8b4 	bl	801e3f8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8018290:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d106      	bne.n	80182a6 <lwip_netconn_do_close_internal+0x2b2>
 8018298:	4b06      	ldr	r3, [pc, #24]	; (80182b4 <lwip_netconn_do_close_internal+0x2c0>)
 801829a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801829e:	4910      	ldr	r1, [pc, #64]	; (80182e0 <lwip_netconn_do_close_internal+0x2ec>)
 80182a0:	4806      	ldr	r0, [pc, #24]	; (80182bc <lwip_netconn_do_close_internal+0x2c8>)
 80182a2:	f00f f8c5 	bl	8027430 <iprintf>
  return err;
 80182a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80182aa:	4618      	mov	r0, r3
 80182ac:	3720      	adds	r7, #32
 80182ae:	46bd      	mov	sp, r7
 80182b0:	bd80      	pop	{r7, pc}
 80182b2:	bf00      	nop
 80182b4:	080291c4 	.word	0x080291c4
 80182b8:	080293d8 	.word	0x080293d8
 80182bc:	0802921c 	.word	0x0802921c
 80182c0:	080293e8 	.word	0x080293e8
 80182c4:	08029408 	.word	0x08029408
 80182c8:	0802942c 	.word	0x0802942c
 80182cc:	08029294 	.word	0x08029294
 80182d0:	08029440 	.word	0x08029440
 80182d4:	0801788d 	.word	0x0801788d
 80182d8:	080177c1 	.word	0x080177c1
 80182dc:	08017939 	.word	0x08017939
 80182e0:	08029464 	.word	0x08029464

080182e4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b086      	sub	sp, #24
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 80182f0:	697b      	ldr	r3, [r7, #20]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	785b      	ldrb	r3, [r3, #1]
 80182f6:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80182f8:	7cfb      	ldrb	r3, [r7, #19]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d00d      	beq.n	801831a <lwip_netconn_do_delconn+0x36>
 80182fe:	697b      	ldr	r3, [r7, #20]
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	781b      	ldrb	r3, [r3, #0]
 8018304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018308:	2b10      	cmp	r3, #16
 801830a:	d006      	beq.n	801831a <lwip_netconn_do_delconn+0x36>
 801830c:	4b69      	ldr	r3, [pc, #420]	; (80184b4 <lwip_netconn_do_delconn+0x1d0>)
 801830e:	f240 4201 	movw	r2, #1025	; 0x401
 8018312:	4969      	ldr	r1, [pc, #420]	; (80184b8 <lwip_netconn_do_delconn+0x1d4>)
 8018314:	4869      	ldr	r0, [pc, #420]	; (80184bc <lwip_netconn_do_delconn+0x1d8>)
 8018316:	f00f f88b 	bl	8027430 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801831a:	7cfb      	ldrb	r3, [r7, #19]
 801831c:	2b00      	cmp	r3, #0
 801831e:	d005      	beq.n	801832c <lwip_netconn_do_delconn+0x48>
 8018320:	7cfb      	ldrb	r3, [r7, #19]
 8018322:	2b02      	cmp	r3, #2
 8018324:	d002      	beq.n	801832c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8018326:	7cfb      	ldrb	r3, [r7, #19]
 8018328:	2b03      	cmp	r3, #3
 801832a:	d109      	bne.n	8018340 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 801832c:	7cfb      	ldrb	r3, [r7, #19]
 801832e:	2b03      	cmp	r3, #3
 8018330:	d10a      	bne.n	8018348 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8018332:	697b      	ldr	r3, [r7, #20]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	7f1b      	ldrb	r3, [r3, #28]
 8018338:	f003 0304 	and.w	r3, r3, #4
 801833c:	2b00      	cmp	r3, #0
 801833e:	d103      	bne.n	8018348 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8018340:	697b      	ldr	r3, [r7, #20]
 8018342:	22fb      	movs	r2, #251	; 0xfb
 8018344:	711a      	strb	r2, [r3, #4]
 8018346:	e08f      	b.n	8018468 <lwip_netconn_do_delconn+0x184>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8018348:	7cfb      	ldrb	r3, [r7, #19]
 801834a:	2b03      	cmp	r3, #3
 801834c:	d10d      	bne.n	801836a <lwip_netconn_do_delconn+0x86>
 801834e:	697b      	ldr	r3, [r7, #20]
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	7f1b      	ldrb	r3, [r3, #28]
 8018354:	f003 0304 	and.w	r3, r3, #4
 8018358:	2b00      	cmp	r3, #0
 801835a:	d106      	bne.n	801836a <lwip_netconn_do_delconn+0x86>
 801835c:	4b55      	ldr	r3, [pc, #340]	; (80184b4 <lwip_netconn_do_delconn+0x1d0>)
 801835e:	f240 421f 	movw	r2, #1055	; 0x41f
 8018362:	4957      	ldr	r1, [pc, #348]	; (80184c0 <lwip_netconn_do_delconn+0x1dc>)
 8018364:	4855      	ldr	r0, [pc, #340]	; (80184bc <lwip_netconn_do_delconn+0x1d8>)
 8018366:	f00f f863 	bl	8027430 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801836a:	697b      	ldr	r3, [r7, #20]
 801836c:	2200      	movs	r2, #0
 801836e:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 8018370:	697b      	ldr	r3, [r7, #20]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	4618      	mov	r0, r3
 8018376:	f7ff fdbd 	bl	8017ef4 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 801837a:	697b      	ldr	r3, [r7, #20]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	685b      	ldr	r3, [r3, #4]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d057      	beq.n	8018434 <lwip_netconn_do_delconn+0x150>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8018384:	697b      	ldr	r3, [r7, #20]
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	781b      	ldrb	r3, [r3, #0]
 801838a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801838e:	2b10      	cmp	r3, #16
 8018390:	d005      	beq.n	801839e <lwip_netconn_do_delconn+0xba>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 8018392:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8018394:	697b      	ldr	r3, [r7, #20]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	2200      	movs	r2, #0
 801839a:	605a      	str	r2, [r3, #4]
 801839c:	e04a      	b.n	8018434 <lwip_netconn_do_delconn+0x150>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 801839e:	697b      	ldr	r3, [r7, #20]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d104      	bne.n	80183b2 <lwip_netconn_do_delconn+0xce>
 80183a8:	697b      	ldr	r3, [r7, #20]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	6a1b      	ldr	r3, [r3, #32]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d006      	beq.n	80183c0 <lwip_netconn_do_delconn+0xdc>
 80183b2:	4b40      	ldr	r3, [pc, #256]	; (80184b4 <lwip_netconn_do_delconn+0x1d0>)
 80183b4:	f240 4235 	movw	r2, #1077	; 0x435
 80183b8:	4942      	ldr	r1, [pc, #264]	; (80184c4 <lwip_netconn_do_delconn+0x1e0>)
 80183ba:	4840      	ldr	r0, [pc, #256]	; (80184bc <lwip_netconn_do_delconn+0x1d8>)
 80183bc:	f00f f838 	bl	8027430 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 80183c0:	697b      	ldr	r3, [r7, #20]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	2204      	movs	r2, #4
 80183c6:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80183c8:	697b      	ldr	r3, [r7, #20]
 80183ca:	2203      	movs	r2, #3
 80183cc:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 80183ce:	697b      	ldr	r3, [r7, #20]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	697a      	ldr	r2, [r7, #20]
 80183d4:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80183d6:	697b      	ldr	r3, [r7, #20]
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	2100      	movs	r1, #0
 80183dc:	4618      	mov	r0, r3
 80183de:	f7ff fe09 	bl	8017ff4 <lwip_netconn_do_close_internal>
 80183e2:	4603      	mov	r3, r0
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d060      	beq.n	80184aa <lwip_netconn_do_delconn+0x1c6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80183e8:	697b      	ldr	r3, [r7, #20]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	785b      	ldrb	r3, [r3, #1]
 80183ee:	2b04      	cmp	r3, #4
 80183f0:	d006      	beq.n	8018400 <lwip_netconn_do_delconn+0x11c>
 80183f2:	4b30      	ldr	r3, [pc, #192]	; (80184b4 <lwip_netconn_do_delconn+0x1d0>)
 80183f4:	f240 423b 	movw	r2, #1083	; 0x43b
 80183f8:	4933      	ldr	r1, [pc, #204]	; (80184c8 <lwip_netconn_do_delconn+0x1e4>)
 80183fa:	4830      	ldr	r0, [pc, #192]	; (80184bc <lwip_netconn_do_delconn+0x1d8>)
 80183fc:	f00f f818 	bl	8027430 <iprintf>
          UNLOCK_TCPIP_CORE();
 8018400:	4832      	ldr	r0, [pc, #200]	; (80184cc <lwip_netconn_do_delconn+0x1e8>)
 8018402:	f00a fbe6 	bl	8022bd2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8018406:	697b      	ldr	r3, [r7, #20]
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	330c      	adds	r3, #12
 801840c:	2100      	movs	r1, #0
 801840e:	4618      	mov	r0, r3
 8018410:	f00a fb3c 	bl	8022a8c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8018414:	482d      	ldr	r0, [pc, #180]	; (80184cc <lwip_netconn_do_delconn+0x1e8>)
 8018416:	f00a fbcd 	bl	8022bb4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801841a:	697b      	ldr	r3, [r7, #20]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	785b      	ldrb	r3, [r3, #1]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d042      	beq.n	80184aa <lwip_netconn_do_delconn+0x1c6>
 8018424:	4b23      	ldr	r3, [pc, #140]	; (80184b4 <lwip_netconn_do_delconn+0x1d0>)
 8018426:	f240 423f 	movw	r2, #1087	; 0x43f
 801842a:	4927      	ldr	r1, [pc, #156]	; (80184c8 <lwip_netconn_do_delconn+0x1e4>)
 801842c:	4823      	ldr	r0, [pc, #140]	; (80184bc <lwip_netconn_do_delconn+0x1d8>)
 801842e:	f00e ffff 	bl	8027430 <iprintf>
        return;
 8018432:	e03a      	b.n	80184aa <lwip_netconn_do_delconn+0x1c6>
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8018434:	697b      	ldr	r3, [r7, #20]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801843a:	2b00      	cmp	r3, #0
 801843c:	d007      	beq.n	801844e <lwip_netconn_do_delconn+0x16a>
 801843e:	697b      	ldr	r3, [r7, #20]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018444:	697a      	ldr	r2, [r7, #20]
 8018446:	6810      	ldr	r0, [r2, #0]
 8018448:	2200      	movs	r2, #0
 801844a:	2100      	movs	r1, #0
 801844c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 801844e:	697b      	ldr	r3, [r7, #20]
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018454:	2b00      	cmp	r3, #0
 8018456:	d007      	beq.n	8018468 <lwip_netconn_do_delconn+0x184>
 8018458:	697b      	ldr	r3, [r7, #20]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801845e:	697a      	ldr	r2, [r7, #20]
 8018460:	6810      	ldr	r0, [r2, #0]
 8018462:	2200      	movs	r2, #0
 8018464:	2102      	movs	r1, #2
 8018466:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8018468:	697b      	ldr	r3, [r7, #20]
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	330c      	adds	r3, #12
 801846e:	4618      	mov	r0, r3
 8018470:	f00a fb57 	bl	8022b22 <sys_sem_valid>
 8018474:	4603      	mov	r3, r0
 8018476:	2b00      	cmp	r3, #0
 8018478:	d018      	beq.n	80184ac <lwip_netconn_do_delconn+0x1c8>
    TCPIP_APIMSG_ACK(msg);
 801847a:	697b      	ldr	r3, [r7, #20]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d014      	beq.n	80184ac <lwip_netconn_do_delconn+0x1c8>
 8018482:	f00a fbd9 	bl	8022c38 <sys_arch_protect>
 8018486:	60f8      	str	r0, [r7, #12]
 8018488:	697b      	ldr	r3, [r7, #20]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018490:	f113 0f0c 	cmn.w	r3, #12
 8018494:	db05      	blt.n	80184a2 <lwip_netconn_do_delconn+0x1be>
 8018496:	697b      	ldr	r3, [r7, #20]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	697a      	ldr	r2, [r7, #20]
 801849c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80184a0:	721a      	strb	r2, [r3, #8]
 80184a2:	68f8      	ldr	r0, [r7, #12]
 80184a4:	f00a fbd6 	bl	8022c54 <sys_arch_unprotect>
 80184a8:	e000      	b.n	80184ac <lwip_netconn_do_delconn+0x1c8>
        return;
 80184aa:	bf00      	nop
  }
}
 80184ac:	3718      	adds	r7, #24
 80184ae:	46bd      	mov	sp, r7
 80184b0:	bd80      	pop	{r7, pc}
 80184b2:	bf00      	nop
 80184b4:	080291c4 	.word	0x080291c4
 80184b8:	08029474 	.word	0x08029474
 80184bc:	0802921c 	.word	0x0802921c
 80184c0:	08029488 	.word	0x08029488
 80184c4:	080294a8 	.word	0x080294a8
 80184c8:	080294c4 	.word	0x080294c4
 80184cc:	2000a274 	.word	0x2000a274

080184d0 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80184d0:	b580      	push	{r7, lr}
 80184d2:	b084      	sub	sp, #16
 80184d4:	af00      	add	r7, sp, #0
 80184d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80184e4:	f113 0f0c 	cmn.w	r3, #12
 80184e8:	da06      	bge.n	80184f8 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	711a      	strb	r2, [r3, #4]
 80184f6:	e01e      	b.n	8018536 <lwip_netconn_do_bind+0x66>
  } else {
    msg->err = ERR_VAL;
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	22fa      	movs	r2, #250	; 0xfa
 80184fc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	685b      	ldr	r3, [r3, #4]
 8018504:	2b00      	cmp	r3, #0
 8018506:	d016      	beq.n	8018536 <lwip_netconn_do_bind+0x66>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	781b      	ldrb	r3, [r3, #0]
 801850e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018512:	2b10      	cmp	r3, #16
 8018514:	d000      	beq.n	8018518 <lwip_netconn_do_bind+0x48>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 8018516:	e00e      	b.n	8018536 <lwip_netconn_do_bind+0x66>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	6858      	ldr	r0, [r3, #4]
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	6899      	ldr	r1, [r3, #8]
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	899b      	ldrh	r3, [r3, #12]
 8018526:	461a      	mov	r2, r3
 8018528:	f004 fffa 	bl	801d520 <tcp_bind>
 801852c:	4603      	mov	r3, r0
 801852e:	461a      	mov	r2, r3
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	711a      	strb	r2, [r3, #4]
        break;
 8018534:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	2b00      	cmp	r3, #0
 801853c:	d012      	beq.n	8018564 <lwip_netconn_do_bind+0x94>
 801853e:	f00a fb7b 	bl	8022c38 <sys_arch_protect>
 8018542:	60b8      	str	r0, [r7, #8]
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801854c:	f113 0f0c 	cmn.w	r3, #12
 8018550:	db05      	blt.n	801855e <lwip_netconn_do_bind+0x8e>
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	68fa      	ldr	r2, [r7, #12]
 8018558:	f992 2004 	ldrsb.w	r2, [r2, #4]
 801855c:	721a      	strb	r2, [r3, #8]
 801855e:	68b8      	ldr	r0, [r7, #8]
 8018560:	f00a fb78 	bl	8022c54 <sys_arch_unprotect>
}
 8018564:	bf00      	nop
 8018566:	3710      	adds	r7, #16
 8018568:	46bd      	mov	sp, r7
 801856a:	bd80      	pop	{r7, pc}

0801856c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b088      	sub	sp, #32
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8018578:	69fb      	ldr	r3, [r7, #28]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018580:	f113 0f0c 	cmn.w	r3, #12
 8018584:	da06      	bge.n	8018594 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 8018586:	69fb      	ldr	r3, [r7, #28]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801858e:	69fb      	ldr	r3, [r7, #28]
 8018590:	711a      	strb	r2, [r3, #4]
 8018592:	e090      	b.n	80186b6 <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 8018594:	69fb      	ldr	r3, [r7, #28]
 8018596:	22f5      	movs	r2, #245	; 0xf5
 8018598:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 801859a:	69fb      	ldr	r3, [r7, #28]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	685b      	ldr	r3, [r3, #4]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	f000 8088 	beq.w	80186b6 <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80185a6:	69fb      	ldr	r3, [r7, #28]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	781b      	ldrb	r3, [r3, #0]
 80185ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80185b0:	2b10      	cmp	r3, #16
 80185b2:	d17d      	bne.n	80186b0 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 80185b4:	69fb      	ldr	r3, [r7, #28]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	785b      	ldrb	r3, [r3, #1]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d16f      	bne.n	801869e <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 80185be:	69fb      	ldr	r3, [r7, #28]
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	685b      	ldr	r3, [r3, #4]
 80185c4:	7d1b      	ldrb	r3, [r3, #20]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d003      	beq.n	80185d2 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 80185ca:	69fb      	ldr	r3, [r7, #28]
 80185cc:	22fa      	movs	r2, #250	; 0xfa
 80185ce:	711a      	strb	r2, [r3, #4]
 80185d0:	e071      	b.n	80186b6 <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80185d2:	23ff      	movs	r3, #255	; 0xff
 80185d4:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80185d6:	69fb      	ldr	r3, [r7, #28]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	685b      	ldr	r3, [r3, #4]
 80185dc:	f107 020f 	add.w	r2, r7, #15
 80185e0:	7ef9      	ldrb	r1, [r7, #27]
 80185e2:	4618      	mov	r0, r3
 80185e4:	f005 f83e 	bl	801d664 <tcp_listen_with_backlog_and_err>
 80185e8:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 80185ea:	697b      	ldr	r3, [r7, #20]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d104      	bne.n	80185fa <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 80185f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80185f4:	69fb      	ldr	r3, [r7, #28]
 80185f6:	711a      	strb	r2, [r3, #4]
 80185f8:	e05d      	b.n	80186b6 <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80185fa:	69fb      	ldr	r3, [r7, #28]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	3310      	adds	r3, #16
 8018600:	4618      	mov	r0, r3
 8018602:	f00a f9fd 	bl	8022a00 <sys_mbox_valid>
 8018606:	4603      	mov	r3, r0
 8018608:	2b00      	cmp	r3, #0
 801860a:	d00b      	beq.n	8018624 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 801860c:	69fb      	ldr	r3, [r7, #28]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	3310      	adds	r3, #16
 8018612:	4618      	mov	r0, r3
 8018614:	f00a f958 	bl	80228c8 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8018618:	69fb      	ldr	r3, [r7, #28]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	3310      	adds	r3, #16
 801861e:	4618      	mov	r0, r3
 8018620:	f00a f9ff 	bl	8022a22 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 8018624:	69fb      	ldr	r3, [r7, #28]
 8018626:	2200      	movs	r2, #0
 8018628:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 801862a:	69fb      	ldr	r3, [r7, #28]
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	3314      	adds	r3, #20
 8018630:	4618      	mov	r0, r3
 8018632:	f00a f9e5 	bl	8022a00 <sys_mbox_valid>
 8018636:	4603      	mov	r3, r0
 8018638:	2b00      	cmp	r3, #0
 801863a:	d10a      	bne.n	8018652 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 801863c:	69fb      	ldr	r3, [r7, #28]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	3314      	adds	r3, #20
 8018642:	2106      	movs	r1, #6
 8018644:	4618      	mov	r0, r3
 8018646:	f00a f91d 	bl	8022884 <sys_mbox_new>
 801864a:	4603      	mov	r3, r0
 801864c:	461a      	mov	r2, r3
 801864e:	69fb      	ldr	r3, [r7, #28]
 8018650:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 8018652:	69fb      	ldr	r3, [r7, #28]
 8018654:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d118      	bne.n	801868e <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 801865c:	69fb      	ldr	r3, [r7, #28]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	2202      	movs	r2, #2
 8018662:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 8018664:	69fb      	ldr	r3, [r7, #28]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	697a      	ldr	r2, [r7, #20]
 801866a:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801866c:	69fb      	ldr	r3, [r7, #28]
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	685a      	ldr	r2, [r3, #4]
 8018672:	69fb      	ldr	r3, [r7, #28]
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	4619      	mov	r1, r3
 8018678:	4610      	mov	r0, r2
 801867a:	f005 febd 	bl	801e3f8 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 801867e:	69fb      	ldr	r3, [r7, #28]
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	685b      	ldr	r3, [r3, #4]
 8018684:	4919      	ldr	r1, [pc, #100]	; (80186ec <lwip_netconn_do_listen+0x180>)
 8018686:	4618      	mov	r0, r3
 8018688:	f005 ff2c 	bl	801e4e4 <tcp_accept>
 801868c:	e013      	b.n	80186b6 <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 801868e:	6978      	ldr	r0, [r7, #20]
 8018690:	f004 fe28 	bl	801d2e4 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8018694:	69fb      	ldr	r3, [r7, #28]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	2200      	movs	r2, #0
 801869a:	605a      	str	r2, [r3, #4]
 801869c:	e00b      	b.n	80186b6 <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 801869e:	69fb      	ldr	r3, [r7, #28]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	785b      	ldrb	r3, [r3, #1]
 80186a4:	2b02      	cmp	r3, #2
 80186a6:	d106      	bne.n	80186b6 <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 80186a8:	69fb      	ldr	r3, [r7, #28]
 80186aa:	2200      	movs	r2, #0
 80186ac:	711a      	strb	r2, [r3, #4]
 80186ae:	e002      	b.n	80186b6 <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 80186b0:	69fb      	ldr	r3, [r7, #28]
 80186b2:	22f0      	movs	r2, #240	; 0xf0
 80186b4:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80186b6:	69fb      	ldr	r3, [r7, #28]
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d012      	beq.n	80186e4 <lwip_netconn_do_listen+0x178>
 80186be:	f00a fabb 	bl	8022c38 <sys_arch_protect>
 80186c2:	6138      	str	r0, [r7, #16]
 80186c4:	69fb      	ldr	r3, [r7, #28]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80186cc:	f113 0f0c 	cmn.w	r3, #12
 80186d0:	db05      	blt.n	80186de <lwip_netconn_do_listen+0x172>
 80186d2:	69fb      	ldr	r3, [r7, #28]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	69fa      	ldr	r2, [r7, #28]
 80186d8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80186dc:	721a      	strb	r2, [r3, #8]
 80186de:	6938      	ldr	r0, [r7, #16]
 80186e0:	f00a fab8 	bl	8022c54 <sys_arch_unprotect>
}
 80186e4:	bf00      	nop
 80186e6:	3720      	adds	r7, #32
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bd80      	pop	{r7, pc}
 80186ec:	08017b69 	.word	0x08017b69

080186f0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b086      	sub	sp, #24
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80186fc:	693b      	ldr	r3, [r7, #16]
 80186fe:	2200      	movs	r2, #0
 8018700:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8018702:	693b      	ldr	r3, [r7, #16]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	685b      	ldr	r3, [r3, #4]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d022      	beq.n	8018752 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801870c:	693b      	ldr	r3, [r7, #16]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018716:	2b10      	cmp	r3, #16
 8018718:	d11b      	bne.n	8018752 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 801871a:	693b      	ldr	r3, [r7, #16]
 801871c:	689b      	ldr	r3, [r3, #8]
 801871e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8018720:	697b      	ldr	r3, [r7, #20]
 8018722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018726:	d202      	bcs.n	801872e <lwip_netconn_do_recv+0x3e>
 8018728:	697b      	ldr	r3, [r7, #20]
 801872a:	b29b      	uxth	r3, r3
 801872c:	e001      	b.n	8018732 <lwip_netconn_do_recv+0x42>
 801872e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018732:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8018734:	693b      	ldr	r3, [r7, #16]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	685b      	ldr	r3, [r3, #4]
 801873a:	89fa      	ldrh	r2, [r7, #14]
 801873c:	4611      	mov	r1, r2
 801873e:	4618      	mov	r0, r3
 8018740:	f005 f878 	bl	801d834 <tcp_recved>
        remaining -= recved;
 8018744:	89fb      	ldrh	r3, [r7, #14]
 8018746:	697a      	ldr	r2, [r7, #20]
 8018748:	1ad3      	subs	r3, r2, r3
 801874a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 801874c:	697b      	ldr	r3, [r7, #20]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d1e6      	bne.n	8018720 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8018752:	693b      	ldr	r3, [r7, #16]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d012      	beq.n	8018780 <lwip_netconn_do_recv+0x90>
 801875a:	f00a fa6d 	bl	8022c38 <sys_arch_protect>
 801875e:	60b8      	str	r0, [r7, #8]
 8018760:	693b      	ldr	r3, [r7, #16]
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018768:	f113 0f0c 	cmn.w	r3, #12
 801876c:	db05      	blt.n	801877a <lwip_netconn_do_recv+0x8a>
 801876e:	693b      	ldr	r3, [r7, #16]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	693a      	ldr	r2, [r7, #16]
 8018774:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018778:	721a      	strb	r2, [r3, #8]
 801877a:	68b8      	ldr	r0, [r7, #8]
 801877c:	f00a fa6a 	bl	8022c54 <sys_arch_unprotect>
}
 8018780:	bf00      	nop
 8018782:	3718      	adds	r7, #24
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}

08018788 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8018788:	b580      	push	{r7, lr}
 801878a:	b08a      	sub	sp, #40	; 0x28
 801878c:	af00      	add	r7, sp, #0
 801878e:	6078      	str	r0, [r7, #4]
 8018790:	460b      	mov	r3, r1
 8018792:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8018794:	2300      	movs	r3, #0
 8018796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d106      	bne.n	80187ae <lwip_netconn_do_writemore+0x26>
 80187a0:	4ba3      	ldr	r3, [pc, #652]	; (8018a30 <lwip_netconn_do_writemore+0x2a8>)
 80187a2:	f240 52e3 	movw	r2, #1507	; 0x5e3
 80187a6:	49a3      	ldr	r1, [pc, #652]	; (8018a34 <lwip_netconn_do_writemore+0x2ac>)
 80187a8:	48a3      	ldr	r0, [pc, #652]	; (8018a38 <lwip_netconn_do_writemore+0x2b0>)
 80187aa:	f00e fe41 	bl	8027430 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	785b      	ldrb	r3, [r3, #1]
 80187b2:	2b01      	cmp	r3, #1
 80187b4:	d006      	beq.n	80187c4 <lwip_netconn_do_writemore+0x3c>
 80187b6:	4b9e      	ldr	r3, [pc, #632]	; (8018a30 <lwip_netconn_do_writemore+0x2a8>)
 80187b8:	f240 52e4 	movw	r2, #1508	; 0x5e4
 80187bc:	499f      	ldr	r1, [pc, #636]	; (8018a3c <lwip_netconn_do_writemore+0x2b4>)
 80187be:	489e      	ldr	r0, [pc, #632]	; (8018a38 <lwip_netconn_do_writemore+0x2b0>)
 80187c0:	f00e fe36 	bl	8027430 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d106      	bne.n	80187da <lwip_netconn_do_writemore+0x52>
 80187cc:	4b98      	ldr	r3, [pc, #608]	; (8018a30 <lwip_netconn_do_writemore+0x2a8>)
 80187ce:	f240 52e5 	movw	r2, #1509	; 0x5e5
 80187d2:	499b      	ldr	r1, [pc, #620]	; (8018a40 <lwip_netconn_do_writemore+0x2b8>)
 80187d4:	4898      	ldr	r0, [pc, #608]	; (8018a38 <lwip_netconn_do_writemore+0x2b0>)
 80187d6:	f00e fe2b 	bl	8027430 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	685b      	ldr	r3, [r3, #4]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d106      	bne.n	80187f0 <lwip_netconn_do_writemore+0x68>
 80187e2:	4b93      	ldr	r3, [pc, #588]	; (8018a30 <lwip_netconn_do_writemore+0x2a8>)
 80187e4:	f240 52e6 	movw	r2, #1510	; 0x5e6
 80187e8:	4996      	ldr	r1, [pc, #600]	; (8018a44 <lwip_netconn_do_writemore+0x2bc>)
 80187ea:	4893      	ldr	r0, [pc, #588]	; (8018a38 <lwip_netconn_do_writemore+0x2b0>)
 80187ec:	f00e fe20 	bl	8027430 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	6a1a      	ldr	r2, [r3, #32]
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187f8:	68db      	ldr	r3, [r3, #12]
 80187fa:	429a      	cmp	r2, r3
 80187fc:	d306      	bcc.n	801880c <lwip_netconn_do_writemore+0x84>
 80187fe:	4b8c      	ldr	r3, [pc, #560]	; (8018a30 <lwip_netconn_do_writemore+0x2a8>)
 8018800:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8018804:	4990      	ldr	r1, [pc, #576]	; (8018a48 <lwip_netconn_do_writemore+0x2c0>)
 8018806:	488c      	ldr	r0, [pc, #560]	; (8018a38 <lwip_netconn_do_writemore+0x2b0>)
 8018808:	f00e fe12 	bl	8027430 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018810:	7c1b      	ldrb	r3, [r3, #16]
 8018812:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	7f1b      	ldrb	r3, [r3, #28]
 801881a:	f003 0302 	and.w	r3, r3, #2
 801881e:	2b00      	cmp	r3, #0
 8018820:	d105      	bne.n	801882e <lwip_netconn_do_writemore+0xa6>
 8018822:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018826:	f003 0304 	and.w	r3, r3, #4
 801882a:	2b00      	cmp	r3, #0
 801882c:	d001      	beq.n	8018832 <lwip_netconn_do_writemore+0xaa>
 801882e:	2301      	movs	r3, #1
 8018830:	e000      	b.n	8018834 <lwip_netconn_do_writemore+0xac>
 8018832:	2300      	movs	r3, #0
 8018834:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801883c:	689a      	ldr	r2, [r3, #8]
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	6a1b      	ldr	r3, [r3, #32]
 8018842:	4413      	add	r3, r2
 8018844:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801884a:	68da      	ldr	r2, [r3, #12]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	6a1b      	ldr	r3, [r3, #32]
 8018850:	1ad3      	subs	r3, r2, r3
 8018852:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8018854:	69bb      	ldr	r3, [r7, #24]
 8018856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801885a:	d309      	bcc.n	8018870 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 801885c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018860:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 8018862:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018866:	f043 0302 	orr.w	r3, r3, #2
 801886a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801886e:	e001      	b.n	8018874 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 8018870:	69bb      	ldr	r3, [r7, #24]
 8018872:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	685b      	ldr	r3, [r3, #4]
 8018878:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801887c:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 801887e:	8afa      	ldrh	r2, [r7, #22]
 8018880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018882:	429a      	cmp	r2, r3
 8018884:	d212      	bcs.n	80188ac <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 8018886:	8afb      	ldrh	r3, [r7, #22]
 8018888:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 801888a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801888e:	2b00      	cmp	r3, #0
 8018890:	d006      	beq.n	80188a0 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 8018892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018894:	2b00      	cmp	r3, #0
 8018896:	d109      	bne.n	80188ac <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 8018898:	23f9      	movs	r3, #249	; 0xf9
 801889a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 801889e:	e029      	b.n	80188f4 <lwip_netconn_do_writemore+0x16c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 80188a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80188a4:	f043 0302 	orr.w	r3, r3, #2
 80188a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	6a1a      	ldr	r2, [r3, #32]
 80188b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188b2:	441a      	add	r2, r3
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188b8:	68db      	ldr	r3, [r3, #12]
 80188ba:	429a      	cmp	r2, r3
 80188bc:	d906      	bls.n	80188cc <lwip_netconn_do_writemore+0x144>
 80188be:	4b5c      	ldr	r3, [pc, #368]	; (8018a30 <lwip_netconn_do_writemore+0x2a8>)
 80188c0:	f240 6213 	movw	r2, #1555	; 0x613
 80188c4:	4961      	ldr	r1, [pc, #388]	; (8018a4c <lwip_netconn_do_writemore+0x2c4>)
 80188c6:	485c      	ldr	r0, [pc, #368]	; (8018a38 <lwip_netconn_do_writemore+0x2b0>)
 80188c8:	f00e fdb2 	bl	8027430 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	6858      	ldr	r0, [r3, #4]
 80188d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80188d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80188d6:	69f9      	ldr	r1, [r7, #28]
 80188d8:	f008 fbce 	bl	8021078 <tcp_write>
 80188dc:	4603      	mov	r3, r0
 80188de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80188e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d004      	beq.n	80188f4 <lwip_netconn_do_writemore+0x16c>
 80188ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80188ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188f2:	d133      	bne.n	801895c <lwip_netconn_do_writemore+0x1d4>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 80188f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d017      	beq.n	801892c <lwip_netconn_do_writemore+0x1a4>
 80188fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018902:	68db      	ldr	r3, [r3, #12]
 8018904:	429a      	cmp	r2, r3
 8018906:	d211      	bcs.n	801892c <lwip_netconn_do_writemore+0x1a4>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801890c:	2b00      	cmp	r3, #0
 801890e:	d005      	beq.n	801891c <lwip_netconn_do_writemore+0x194>
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018914:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018916:	2103      	movs	r1, #3
 8018918:	6878      	ldr	r0, [r7, #4]
 801891a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	7f1b      	ldrb	r3, [r3, #28]
 8018920:	f043 0310 	orr.w	r3, r3, #16
 8018924:	b2da      	uxtb	r2, r3
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	771a      	strb	r2, [r3, #28]
 801892a:	e017      	b.n	801895c <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	685b      	ldr	r3, [r3, #4]
 8018930:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018934:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8018938:	4293      	cmp	r3, r2
 801893a:	d905      	bls.n	8018948 <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	685b      	ldr	r3, [r3, #4]
 8018940:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8018944:	2b04      	cmp	r3, #4
 8018946:	d909      	bls.n	801895c <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801894c:	2b00      	cmp	r3, #0
 801894e:	d005      	beq.n	801895c <lwip_netconn_do_writemore+0x1d4>
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018956:	2103      	movs	r1, #3
 8018958:	6878      	ldr	r0, [r7, #4]
 801895a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801895c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018960:	2b00      	cmp	r3, #0
 8018962:	d134      	bne.n	80189ce <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	6a1a      	ldr	r2, [r3, #32]
 8018968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801896a:	441a      	add	r2, r3
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	6a1a      	ldr	r2, [r3, #32]
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018978:	68db      	ldr	r3, [r3, #12]
 801897a:	429a      	cmp	r2, r3
 801897c:	d003      	beq.n	8018986 <lwip_netconn_do_writemore+0x1fe>
 801897e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018982:	2b00      	cmp	r3, #0
 8018984:	d007      	beq.n	8018996 <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801898a:	687a      	ldr	r2, [r7, #4]
 801898c:	6a12      	ldr	r2, [r2, #32]
 801898e:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8018990:	2301      	movs	r3, #1
 8018992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	685b      	ldr	r3, [r3, #4]
 801899a:	4618      	mov	r0, r3
 801899c:	f009 f822 	bl	80219e4 <tcp_output>
 80189a0:	4603      	mov	r3, r0
 80189a2:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80189a4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80189a8:	f113 0f0c 	cmn.w	r3, #12
 80189ac:	db04      	blt.n	80189b8 <lwip_netconn_do_writemore+0x230>
 80189ae:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80189b2:	f113 0f04 	cmn.w	r3, #4
 80189b6:	d152      	bne.n	8018a5e <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80189b8:	7d7b      	ldrb	r3, [r7, #21]
 80189ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 80189be:	2301      	movs	r3, #1
 80189c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c8:	2200      	movs	r2, #0
 80189ca:	60da      	str	r2, [r3, #12]
 80189cc:	e047      	b.n	8018a5e <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 80189ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80189d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189d6:	d13b      	bne.n	8018a50 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	685b      	ldr	r3, [r3, #4]
 80189dc:	4618      	mov	r0, r3
 80189de:	f009 f801 	bl	80219e4 <tcp_output>
 80189e2:	4603      	mov	r3, r0
 80189e4:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80189e6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80189ea:	f113 0f0c 	cmn.w	r3, #12
 80189ee:	db04      	blt.n	80189fa <lwip_netconn_do_writemore+0x272>
 80189f0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80189f4:	f113 0f04 	cmn.w	r3, #4
 80189f8:	d10a      	bne.n	8018a10 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80189fa:	7d3b      	ldrb	r3, [r7, #20]
 80189fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8018a00:	2301      	movs	r3, #1
 8018a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	60da      	str	r2, [r3, #12]
 8018a0e:	e026      	b.n	8018a5e <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 8018a10:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d022      	beq.n	8018a5e <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8018a18:	23f9      	movs	r3, #249	; 0xf9
 8018a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8018a1e:	2301      	movs	r3, #1
 8018a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a28:	2200      	movs	r2, #0
 8018a2a:	60da      	str	r2, [r3, #12]
 8018a2c:	e017      	b.n	8018a5e <lwip_netconn_do_writemore+0x2d6>
 8018a2e:	bf00      	nop
 8018a30:	080291c4 	.word	0x080291c4
 8018a34:	08029284 	.word	0x08029284
 8018a38:	0802921c 	.word	0x0802921c
 8018a3c:	08029564 	.word	0x08029564
 8018a40:	08029294 	.word	0x08029294
 8018a44:	08029584 	.word	0x08029584
 8018a48:	0802959c 	.word	0x0802959c
 8018a4c:	080295d0 	.word	0x080295d0
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8018a50:	2301      	movs	r3, #1
 8018a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 8018a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d02c      	beq.n	8018ac0 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	330c      	adds	r3, #12
 8018a6e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018a78:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	2200      	movs	r2, #0
 8018a7e:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	2200      	movs	r2, #0
 8018a84:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	2200      	movs	r2, #0
 8018a8a:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d00f      	beq.n	8018ab2 <lwip_netconn_do_writemore+0x32a>
 8018a92:	f00a f8d1 	bl	8022c38 <sys_arch_protect>
 8018a96:	60f8      	str	r0, [r7, #12]
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018a9e:	f113 0f0c 	cmn.w	r3, #12
 8018aa2:	db03      	blt.n	8018aac <lwip_netconn_do_writemore+0x324>
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018aaa:	721a      	strb	r2, [r3, #8]
 8018aac:	68f8      	ldr	r0, [r7, #12]
 8018aae:	f00a f8d1 	bl	8022c54 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8018ab2:	78fb      	ldrb	r3, [r7, #3]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d006      	beq.n	8018ac6 <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8018ab8:	6938      	ldr	r0, [r7, #16]
 8018aba:	f00a f818 	bl	8022aee <sys_sem_signal>
 8018abe:	e002      	b.n	8018ac6 <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8018ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ac4:	e000      	b.n	8018ac8 <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 8018ac6:	2300      	movs	r3, #0
}
 8018ac8:	4618      	mov	r0, r3
 8018aca:	3728      	adds	r7, #40	; 0x28
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd80      	pop	{r7, pc}

08018ad0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b084      	sub	sp, #16
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018ae4:	f113 0f0c 	cmn.w	r3, #12
 8018ae8:	da06      	bge.n	8018af8 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8018aea:	68fb      	ldr	r3, [r7, #12]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	711a      	strb	r2, [r3, #4]
 8018af6:	e06e      	b.n	8018bd6 <lwip_netconn_do_write+0x106>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	781b      	ldrb	r3, [r3, #0]
 8018afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018b02:	2b10      	cmp	r3, #16
 8018b04:	d167      	bne.n	8018bd6 <lwip_netconn_do_write+0x106>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	785b      	ldrb	r3, [r3, #1]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d003      	beq.n	8018b18 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	22fb      	movs	r2, #251	; 0xfb
 8018b14:	711a      	strb	r2, [r3, #4]
 8018b16:	e05e      	b.n	8018bd6 <lwip_netconn_do_write+0x106>
      } else if (msg->conn->pcb.tcp != NULL) {
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	685b      	ldr	r3, [r3, #4]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d056      	beq.n	8018bd0 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	2201      	movs	r2, #1
 8018b28:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d104      	bne.n	8018b3e <lwip_netconn_do_write+0x6e>
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	6a1b      	ldr	r3, [r3, #32]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d006      	beq.n	8018b4c <lwip_netconn_do_write+0x7c>
 8018b3e:	4b34      	ldr	r3, [pc, #208]	; (8018c10 <lwip_netconn_do_write+0x140>)
 8018b40:	f240 6283 	movw	r2, #1667	; 0x683
 8018b44:	4933      	ldr	r1, [pc, #204]	; (8018c14 <lwip_netconn_do_write+0x144>)
 8018b46:	4834      	ldr	r0, [pc, #208]	; (8018c18 <lwip_netconn_do_write+0x148>)
 8018b48:	f00e fc72 	bl	8027430 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	68db      	ldr	r3, [r3, #12]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d106      	bne.n	8018b62 <lwip_netconn_do_write+0x92>
 8018b54:	4b2e      	ldr	r3, [pc, #184]	; (8018c10 <lwip_netconn_do_write+0x140>)
 8018b56:	f240 6284 	movw	r2, #1668	; 0x684
 8018b5a:	4930      	ldr	r1, [pc, #192]	; (8018c1c <lwip_netconn_do_write+0x14c>)
 8018b5c:	482e      	ldr	r0, [pc, #184]	; (8018c18 <lwip_netconn_do_write+0x148>)
 8018b5e:	f00e fc67 	bl	8027430 <iprintf>
        msg->conn->current_msg = msg;
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	68fa      	ldr	r2, [r7, #12]
 8018b68:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	2200      	movs	r2, #0
 8018b70:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	2100      	movs	r1, #0
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f7ff fe05 	bl	8018788 <lwip_netconn_do_writemore>
 8018b7e:	4603      	mov	r3, r0
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d040      	beq.n	8018c06 <lwip_netconn_do_write+0x136>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	785b      	ldrb	r3, [r3, #1]
 8018b8a:	2b01      	cmp	r3, #1
 8018b8c:	d006      	beq.n	8018b9c <lwip_netconn_do_write+0xcc>
 8018b8e:	4b20      	ldr	r3, [pc, #128]	; (8018c10 <lwip_netconn_do_write+0x140>)
 8018b90:	f240 6289 	movw	r2, #1673	; 0x689
 8018b94:	4922      	ldr	r1, [pc, #136]	; (8018c20 <lwip_netconn_do_write+0x150>)
 8018b96:	4820      	ldr	r0, [pc, #128]	; (8018c18 <lwip_netconn_do_write+0x148>)
 8018b98:	f00e fc4a 	bl	8027430 <iprintf>
          UNLOCK_TCPIP_CORE();
 8018b9c:	4821      	ldr	r0, [pc, #132]	; (8018c24 <lwip_netconn_do_write+0x154>)
 8018b9e:	f00a f818 	bl	8022bd2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	330c      	adds	r3, #12
 8018ba8:	2100      	movs	r1, #0
 8018baa:	4618      	mov	r0, r3
 8018bac:	f009 ff6e 	bl	8022a8c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8018bb0:	481c      	ldr	r0, [pc, #112]	; (8018c24 <lwip_netconn_do_write+0x154>)
 8018bb2:	f009 ffff 	bl	8022bb4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	785b      	ldrb	r3, [r3, #1]
 8018bbc:	2b01      	cmp	r3, #1
 8018bbe:	d122      	bne.n	8018c06 <lwip_netconn_do_write+0x136>
 8018bc0:	4b13      	ldr	r3, [pc, #76]	; (8018c10 <lwip_netconn_do_write+0x140>)
 8018bc2:	f240 628d 	movw	r2, #1677	; 0x68d
 8018bc6:	4916      	ldr	r1, [pc, #88]	; (8018c20 <lwip_netconn_do_write+0x150>)
 8018bc8:	4813      	ldr	r0, [pc, #76]	; (8018c18 <lwip_netconn_do_write+0x148>)
 8018bca:	f00e fc31 	bl	8027430 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8018bce:	e01a      	b.n	8018c06 <lwip_netconn_do_write+0x136>
      } else {
        msg->err = ERR_CONN;
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	22f5      	movs	r2, #245	; 0xf5
 8018bd4:	711a      	strb	r2, [r3, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d014      	beq.n	8018c08 <lwip_netconn_do_write+0x138>
 8018bde:	f00a f82b 	bl	8022c38 <sys_arch_protect>
 8018be2:	60b8      	str	r0, [r7, #8]
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018bec:	f113 0f0c 	cmn.w	r3, #12
 8018bf0:	db05      	blt.n	8018bfe <lwip_netconn_do_write+0x12e>
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	68fa      	ldr	r2, [r7, #12]
 8018bf8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018bfc:	721a      	strb	r2, [r3, #8]
 8018bfe:	68b8      	ldr	r0, [r7, #8]
 8018c00:	f00a f828 	bl	8022c54 <sys_arch_unprotect>
 8018c04:	e000      	b.n	8018c08 <lwip_netconn_do_write+0x138>
        return;
 8018c06:	bf00      	nop
}
 8018c08:	3710      	adds	r7, #16
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}
 8018c0e:	bf00      	nop
 8018c10:	080291c4 	.word	0x080291c4
 8018c14:	080294a8 	.word	0x080294a8
 8018c18:	0802921c 	.word	0x0802921c
 8018c1c:	080295fc 	.word	0x080295fc
 8018c20:	080294c4 	.word	0x080294c4
 8018c24:	2000a274 	.word	0x2000a274

08018c28 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b086      	sub	sp, #24
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8018c34:	697b      	ldr	r3, [r7, #20]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	785b      	ldrb	r3, [r3, #1]
 8018c3a:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8018c3c:	697b      	ldr	r3, [r7, #20]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	685b      	ldr	r3, [r3, #4]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d06e      	beq.n	8018d24 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8018c46:	697b      	ldr	r3, [r7, #20]
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	781b      	ldrb	r3, [r3, #0]
 8018c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8018c50:	2b10      	cmp	r3, #16
 8018c52:	d167      	bne.n	8018d24 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8018c54:	697b      	ldr	r3, [r7, #20]
 8018c56:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8018c58:	2b03      	cmp	r3, #3
 8018c5a:	d002      	beq.n	8018c62 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8018c5c:	7cfb      	ldrb	r3, [r7, #19]
 8018c5e:	2b02      	cmp	r3, #2
 8018c60:	d060      	beq.n	8018d24 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8018c62:	7cfb      	ldrb	r3, [r7, #19]
 8018c64:	2b03      	cmp	r3, #3
 8018c66:	d103      	bne.n	8018c70 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8018c68:	697b      	ldr	r3, [r7, #20]
 8018c6a:	22f5      	movs	r2, #245	; 0xf5
 8018c6c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8018c6e:	e05c      	b.n	8018d2a <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 8018c70:	7cfb      	ldrb	r3, [r7, #19]
 8018c72:	2b01      	cmp	r3, #1
 8018c74:	d103      	bne.n	8018c7e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8018c76:	697b      	ldr	r3, [r7, #20]
 8018c78:	22fb      	movs	r2, #251	; 0xfb
 8018c7a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8018c7c:	e055      	b.n	8018d2a <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8018c7e:	697b      	ldr	r3, [r7, #20]
 8018c80:	7a1b      	ldrb	r3, [r3, #8]
 8018c82:	f003 0301 	and.w	r3, r3, #1
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d004      	beq.n	8018c94 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8018c8a:	697b      	ldr	r3, [r7, #20]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	4618      	mov	r0, r3
 8018c90:	f7ff f930 	bl	8017ef4 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8018c94:	697b      	ldr	r3, [r7, #20]
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d104      	bne.n	8018ca8 <lwip_netconn_do_close+0x80>
 8018c9e:	697b      	ldr	r3, [r7, #20]
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	6a1b      	ldr	r3, [r3, #32]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d006      	beq.n	8018cb6 <lwip_netconn_do_close+0x8e>
 8018ca8:	4b2e      	ldr	r3, [pc, #184]	; (8018d64 <lwip_netconn_do_close+0x13c>)
 8018caa:	f240 721c 	movw	r2, #1820	; 0x71c
 8018cae:	492e      	ldr	r1, [pc, #184]	; (8018d68 <lwip_netconn_do_close+0x140>)
 8018cb0:	482e      	ldr	r0, [pc, #184]	; (8018d6c <lwip_netconn_do_close+0x144>)
 8018cb2:	f00e fbbd 	bl	8027430 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8018cb6:	697b      	ldr	r3, [r7, #20]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	2204      	movs	r2, #4
 8018cbc:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8018cbe:	697b      	ldr	r3, [r7, #20]
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	697a      	ldr	r2, [r7, #20]
 8018cc4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8018cc6:	697b      	ldr	r3, [r7, #20]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	2100      	movs	r1, #0
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f7ff f991 	bl	8017ff4 <lwip_netconn_do_close_internal>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d040      	beq.n	8018d5a <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8018cd8:	697b      	ldr	r3, [r7, #20]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	785b      	ldrb	r3, [r3, #1]
 8018cde:	2b04      	cmp	r3, #4
 8018ce0:	d006      	beq.n	8018cf0 <lwip_netconn_do_close+0xc8>
 8018ce2:	4b20      	ldr	r3, [pc, #128]	; (8018d64 <lwip_netconn_do_close+0x13c>)
 8018ce4:	f240 7221 	movw	r2, #1825	; 0x721
 8018ce8:	4921      	ldr	r1, [pc, #132]	; (8018d70 <lwip_netconn_do_close+0x148>)
 8018cea:	4820      	ldr	r0, [pc, #128]	; (8018d6c <lwip_netconn_do_close+0x144>)
 8018cec:	f00e fba0 	bl	8027430 <iprintf>
        UNLOCK_TCPIP_CORE();
 8018cf0:	4820      	ldr	r0, [pc, #128]	; (8018d74 <lwip_netconn_do_close+0x14c>)
 8018cf2:	f009 ff6e 	bl	8022bd2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8018cf6:	697b      	ldr	r3, [r7, #20]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	330c      	adds	r3, #12
 8018cfc:	2100      	movs	r1, #0
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f009 fec4 	bl	8022a8c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8018d04:	481b      	ldr	r0, [pc, #108]	; (8018d74 <lwip_netconn_do_close+0x14c>)
 8018d06:	f009 ff55 	bl	8022bb4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8018d0a:	697b      	ldr	r3, [r7, #20]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	785b      	ldrb	r3, [r3, #1]
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d022      	beq.n	8018d5a <lwip_netconn_do_close+0x132>
 8018d14:	4b13      	ldr	r3, [pc, #76]	; (8018d64 <lwip_netconn_do_close+0x13c>)
 8018d16:	f240 7225 	movw	r2, #1829	; 0x725
 8018d1a:	4915      	ldr	r1, [pc, #84]	; (8018d70 <lwip_netconn_do_close+0x148>)
 8018d1c:	4813      	ldr	r0, [pc, #76]	; (8018d6c <lwip_netconn_do_close+0x144>)
 8018d1e:	f00e fb87 	bl	8027430 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8018d22:	e01a      	b.n	8018d5a <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8018d24:	697b      	ldr	r3, [r7, #20]
 8018d26:	22f5      	movs	r2, #245	; 0xf5
 8018d28:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8018d2a:	697b      	ldr	r3, [r7, #20]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d014      	beq.n	8018d5c <lwip_netconn_do_close+0x134>
 8018d32:	f009 ff81 	bl	8022c38 <sys_arch_protect>
 8018d36:	60f8      	str	r0, [r7, #12]
 8018d38:	697b      	ldr	r3, [r7, #20]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018d40:	f113 0f0c 	cmn.w	r3, #12
 8018d44:	db05      	blt.n	8018d52 <lwip_netconn_do_close+0x12a>
 8018d46:	697b      	ldr	r3, [r7, #20]
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	697a      	ldr	r2, [r7, #20]
 8018d4c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018d50:	721a      	strb	r2, [r3, #8]
 8018d52:	68f8      	ldr	r0, [r7, #12]
 8018d54:	f009 ff7e 	bl	8022c54 <sys_arch_unprotect>
 8018d58:	e000      	b.n	8018d5c <lwip_netconn_do_close+0x134>
      return;
 8018d5a:	bf00      	nop
}
 8018d5c:	3718      	adds	r7, #24
 8018d5e:	46bd      	mov	sp, r7
 8018d60:	bd80      	pop	{r7, pc}
 8018d62:	bf00      	nop
 8018d64:	080291c4 	.word	0x080291c4
 8018d68:	080294a8 	.word	0x080294a8
 8018d6c:	0802921c 	.word	0x0802921c
 8018d70:	080294c4 	.word	0x080294c4
 8018d74:	2000a274 	.word	0x2000a274

08018d78 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b082      	sub	sp, #8
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d013      	beq.n	8018dae <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d00b      	beq.n	8018da6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	4618      	mov	r0, r3
 8018d94:	f003 fe72 	bl	801ca7c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	605a      	str	r2, [r3, #4]
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	685a      	ldr	r2, [r3, #4]
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8018da6:	6879      	ldr	r1, [r7, #4]
 8018da8:	2005      	movs	r0, #5
 8018daa:	f003 f8d7 	bl	801bf5c <memp_free>
  }
}
 8018dae:	bf00      	nop
 8018db0:	3708      	adds	r7, #8
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
	...

08018db8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b084      	sub	sp, #16
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	60f8      	str	r0, [r7, #12]
 8018dc0:	60b9      	str	r1, [r7, #8]
 8018dc2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d108      	bne.n	8018ddc <netbuf_data+0x24>
 8018dca:	4b1b      	ldr	r3, [pc, #108]	; (8018e38 <netbuf_data+0x80>)
 8018dcc:	22c2      	movs	r2, #194	; 0xc2
 8018dce:	491b      	ldr	r1, [pc, #108]	; (8018e3c <netbuf_data+0x84>)
 8018dd0:	481b      	ldr	r0, [pc, #108]	; (8018e40 <netbuf_data+0x88>)
 8018dd2:	f00e fb2d 	bl	8027430 <iprintf>
 8018dd6:	f06f 030f 	mvn.w	r3, #15
 8018dda:	e029      	b.n	8018e30 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d108      	bne.n	8018df4 <netbuf_data+0x3c>
 8018de2:	4b15      	ldr	r3, [pc, #84]	; (8018e38 <netbuf_data+0x80>)
 8018de4:	22c3      	movs	r2, #195	; 0xc3
 8018de6:	4917      	ldr	r1, [pc, #92]	; (8018e44 <netbuf_data+0x8c>)
 8018de8:	4815      	ldr	r0, [pc, #84]	; (8018e40 <netbuf_data+0x88>)
 8018dea:	f00e fb21 	bl	8027430 <iprintf>
 8018dee:	f06f 030f 	mvn.w	r3, #15
 8018df2:	e01d      	b.n	8018e30 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d108      	bne.n	8018e0c <netbuf_data+0x54>
 8018dfa:	4b0f      	ldr	r3, [pc, #60]	; (8018e38 <netbuf_data+0x80>)
 8018dfc:	22c4      	movs	r2, #196	; 0xc4
 8018dfe:	4912      	ldr	r1, [pc, #72]	; (8018e48 <netbuf_data+0x90>)
 8018e00:	480f      	ldr	r0, [pc, #60]	; (8018e40 <netbuf_data+0x88>)
 8018e02:	f00e fb15 	bl	8027430 <iprintf>
 8018e06:	f06f 030f 	mvn.w	r3, #15
 8018e0a:	e011      	b.n	8018e30 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	685b      	ldr	r3, [r3, #4]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d102      	bne.n	8018e1a <netbuf_data+0x62>
    return ERR_BUF;
 8018e14:	f06f 0301 	mvn.w	r3, #1
 8018e18:	e00a      	b.n	8018e30 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	685b      	ldr	r3, [r3, #4]
 8018e1e:	685a      	ldr	r2, [r3, #4]
 8018e20:	68bb      	ldr	r3, [r7, #8]
 8018e22:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	685b      	ldr	r3, [r3, #4]
 8018e28:	895a      	ldrh	r2, [r3, #10]
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8018e2e:	2300      	movs	r3, #0
}
 8018e30:	4618      	mov	r0, r3
 8018e32:	3710      	adds	r7, #16
 8018e34:	46bd      	mov	sp, r7
 8018e36:	bd80      	pop	{r7, pc}
 8018e38:	08029628 	.word	0x08029628
 8018e3c:	08029730 	.word	0x08029730
 8018e40:	08029678 	.word	0x08029678
 8018e44:	0802974c 	.word	0x0802974c
 8018e48:	0802976c 	.word	0x0802976c

08018e4c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b082      	sub	sp, #8
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d108      	bne.n	8018e6c <netbuf_next+0x20>
 8018e5a:	4b11      	ldr	r3, [pc, #68]	; (8018ea0 <netbuf_next+0x54>)
 8018e5c:	22dc      	movs	r2, #220	; 0xdc
 8018e5e:	4911      	ldr	r1, [pc, #68]	; (8018ea4 <netbuf_next+0x58>)
 8018e60:	4811      	ldr	r0, [pc, #68]	; (8018ea8 <netbuf_next+0x5c>)
 8018e62:	f00e fae5 	bl	8027430 <iprintf>
 8018e66:	f04f 33ff 	mov.w	r3, #4294967295
 8018e6a:	e014      	b.n	8018e96 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	685b      	ldr	r3, [r3, #4]
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d102      	bne.n	8018e7c <netbuf_next+0x30>
    return -1;
 8018e76:	f04f 33ff 	mov.w	r3, #4294967295
 8018e7a:	e00c      	b.n	8018e96 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	685b      	ldr	r3, [r3, #4]
 8018e80:	681a      	ldr	r2, [r3, #0]
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	685b      	ldr	r3, [r3, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d101      	bne.n	8018e94 <netbuf_next+0x48>
    return 1;
 8018e90:	2301      	movs	r3, #1
 8018e92:	e000      	b.n	8018e96 <netbuf_next+0x4a>
  }
  return 0;
 8018e94:	2300      	movs	r3, #0
}
 8018e96:	4618      	mov	r0, r3
 8018e98:	3708      	adds	r7, #8
 8018e9a:	46bd      	mov	sp, r7
 8018e9c:	bd80      	pop	{r7, pc}
 8018e9e:	bf00      	nop
 8018ea0:	08029628 	.word	0x08029628
 8018ea4:	08029788 	.word	0x08029788
 8018ea8:	08029678 	.word	0x08029678

08018eac <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b084      	sub	sp, #16
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8018eb4:	4b29      	ldr	r3, [pc, #164]	; (8018f5c <tcpip_thread+0xb0>)
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d005      	beq.n	8018ec8 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8018ebc:	4b27      	ldr	r3, [pc, #156]	; (8018f5c <tcpip_thread+0xb0>)
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	4a27      	ldr	r2, [pc, #156]	; (8018f60 <tcpip_thread+0xb4>)
 8018ec2:	6812      	ldr	r2, [r2, #0]
 8018ec4:	4610      	mov	r0, r2
 8018ec6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8018ec8:	4826      	ldr	r0, [pc, #152]	; (8018f64 <tcpip_thread+0xb8>)
 8018eca:	f009 fe73 	bl	8022bb4 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8018ece:	4825      	ldr	r0, [pc, #148]	; (8018f64 <tcpip_thread+0xb8>)
 8018ed0:	f009 fe7f 	bl	8022bd2 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8018ed4:	f107 030c 	add.w	r3, r7, #12
 8018ed8:	4619      	mov	r1, r3
 8018eda:	4823      	ldr	r0, [pc, #140]	; (8018f68 <tcpip_thread+0xbc>)
 8018edc:	f009 fbd2 	bl	8022684 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8018ee0:	4820      	ldr	r0, [pc, #128]	; (8018f64 <tcpip_thread+0xb8>)
 8018ee2:	f009 fe67 	bl	8022bb4 <sys_mutex_lock>
    if (msg == NULL) {
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d106      	bne.n	8018efa <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018eec:	4b1f      	ldr	r3, [pc, #124]	; (8018f6c <tcpip_thread+0xc0>)
 8018eee:	2269      	movs	r2, #105	; 0x69
 8018ef0:	491f      	ldr	r1, [pc, #124]	; (8018f70 <tcpip_thread+0xc4>)
 8018ef2:	4820      	ldr	r0, [pc, #128]	; (8018f74 <tcpip_thread+0xc8>)
 8018ef4:	f00e fa9c 	bl	8027430 <iprintf>
      continue;
 8018ef8:	e02f      	b.n	8018f5a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	781b      	ldrb	r3, [r3, #0]
 8018efe:	2b03      	cmp	r3, #3
 8018f00:	d011      	beq.n	8018f26 <tcpip_thread+0x7a>
 8018f02:	2b04      	cmp	r3, #4
 8018f04:	d01b      	beq.n	8018f3e <tcpip_thread+0x92>
 8018f06:	2b02      	cmp	r3, #2
 8018f08:	d120      	bne.n	8018f4c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	68db      	ldr	r3, [r3, #12]
 8018f0e:	68fa      	ldr	r2, [r7, #12]
 8018f10:	6850      	ldr	r0, [r2, #4]
 8018f12:	68fa      	ldr	r2, [r7, #12]
 8018f14:	6892      	ldr	r2, [r2, #8]
 8018f16:	4611      	mov	r1, r2
 8018f18:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	2008      	movs	r0, #8
 8018f20:	f003 f81c 	bl	801bf5c <memp_free>
      break;
 8018f24:	e019      	b.n	8018f5a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	685b      	ldr	r3, [r3, #4]
 8018f2a:	68fa      	ldr	r2, [r7, #12]
 8018f2c:	6892      	ldr	r2, [r2, #8]
 8018f2e:	4610      	mov	r0, r2
 8018f30:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	4619      	mov	r1, r3
 8018f36:	2007      	movs	r0, #7
 8018f38:	f003 f810 	bl	801bf5c <memp_free>
      break;
 8018f3c:	e00d      	b.n	8018f5a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	685b      	ldr	r3, [r3, #4]
 8018f42:	68fa      	ldr	r2, [r7, #12]
 8018f44:	6892      	ldr	r2, [r2, #8]
 8018f46:	4610      	mov	r0, r2
 8018f48:	4798      	blx	r3
      break;
 8018f4a:	e006      	b.n	8018f5a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8018f4c:	4b07      	ldr	r3, [pc, #28]	; (8018f6c <tcpip_thread+0xc0>)
 8018f4e:	229b      	movs	r2, #155	; 0x9b
 8018f50:	4907      	ldr	r1, [pc, #28]	; (8018f70 <tcpip_thread+0xc4>)
 8018f52:	4808      	ldr	r0, [pc, #32]	; (8018f74 <tcpip_thread+0xc8>)
 8018f54:	f00e fa6c 	bl	8027430 <iprintf>
      break;
 8018f58:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8018f5a:	e7b8      	b.n	8018ece <tcpip_thread+0x22>
 8018f5c:	200093a8 	.word	0x200093a8
 8018f60:	200093ac 	.word	0x200093ac
 8018f64:	2000a274 	.word	0x2000a274
 8018f68:	200093b0 	.word	0x200093b0
 8018f6c:	080297c0 	.word	0x080297c0
 8018f70:	080297f0 	.word	0x080297f0
 8018f74:	08029810 	.word	0x08029810

08018f78 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8018f78:	b580      	push	{r7, lr}
 8018f7a:	b086      	sub	sp, #24
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	60f8      	str	r0, [r7, #12]
 8018f80:	60b9      	str	r1, [r7, #8]
 8018f82:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8018f84:	481a      	ldr	r0, [pc, #104]	; (8018ff0 <tcpip_inpkt+0x78>)
 8018f86:	f009 fd3b 	bl	8022a00 <sys_mbox_valid>
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d105      	bne.n	8018f9c <tcpip_inpkt+0x24>
 8018f90:	4b18      	ldr	r3, [pc, #96]	; (8018ff4 <tcpip_inpkt+0x7c>)
 8018f92:	22b5      	movs	r2, #181	; 0xb5
 8018f94:	4918      	ldr	r1, [pc, #96]	; (8018ff8 <tcpip_inpkt+0x80>)
 8018f96:	4819      	ldr	r0, [pc, #100]	; (8018ffc <tcpip_inpkt+0x84>)
 8018f98:	f00e fa4a 	bl	8027430 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8018f9c:	2008      	movs	r0, #8
 8018f9e:	f002 ff8b 	bl	801beb8 <memp_malloc>
 8018fa2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d102      	bne.n	8018fb0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8018faa:	f04f 33ff 	mov.w	r3, #4294967295
 8018fae:	e01a      	b.n	8018fe6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8018fb0:	697b      	ldr	r3, [r7, #20]
 8018fb2:	2202      	movs	r2, #2
 8018fb4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8018fb6:	697b      	ldr	r3, [r7, #20]
 8018fb8:	68fa      	ldr	r2, [r7, #12]
 8018fba:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8018fbc:	697b      	ldr	r3, [r7, #20]
 8018fbe:	68ba      	ldr	r2, [r7, #8]
 8018fc0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8018fc2:	697b      	ldr	r3, [r7, #20]
 8018fc4:	687a      	ldr	r2, [r7, #4]
 8018fc6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8018fc8:	6979      	ldr	r1, [r7, #20]
 8018fca:	4809      	ldr	r0, [pc, #36]	; (8018ff0 <tcpip_inpkt+0x78>)
 8018fcc:	f009 fca3 	bl	8022916 <sys_mbox_trypost>
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d006      	beq.n	8018fe4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8018fd6:	6979      	ldr	r1, [r7, #20]
 8018fd8:	2008      	movs	r0, #8
 8018fda:	f002 ffbf 	bl	801bf5c <memp_free>
    return ERR_MEM;
 8018fde:	f04f 33ff 	mov.w	r3, #4294967295
 8018fe2:	e000      	b.n	8018fe6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8018fe4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	3718      	adds	r7, #24
 8018fea:	46bd      	mov	sp, r7
 8018fec:	bd80      	pop	{r7, pc}
 8018fee:	bf00      	nop
 8018ff0:	200093b0 	.word	0x200093b0
 8018ff4:	080297c0 	.word	0x080297c0
 8018ff8:	08029838 	.word	0x08029838
 8018ffc:	08029810 	.word	0x08029810

08019000 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8019000:	b580      	push	{r7, lr}
 8019002:	b082      	sub	sp, #8
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
 8019008:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801900a:	683b      	ldr	r3, [r7, #0]
 801900c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8019010:	f003 0318 	and.w	r3, r3, #24
 8019014:	2b00      	cmp	r3, #0
 8019016:	d006      	beq.n	8019026 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8019018:	4a08      	ldr	r2, [pc, #32]	; (801903c <tcpip_input+0x3c>)
 801901a:	6839      	ldr	r1, [r7, #0]
 801901c:	6878      	ldr	r0, [r7, #4]
 801901e:	f7ff ffab 	bl	8018f78 <tcpip_inpkt>
 8019022:	4603      	mov	r3, r0
 8019024:	e005      	b.n	8019032 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8019026:	4a06      	ldr	r2, [pc, #24]	; (8019040 <tcpip_input+0x40>)
 8019028:	6839      	ldr	r1, [r7, #0]
 801902a:	6878      	ldr	r0, [r7, #4]
 801902c:	f7ff ffa4 	bl	8018f78 <tcpip_inpkt>
 8019030:	4603      	mov	r3, r0
}
 8019032:	4618      	mov	r0, r3
 8019034:	3708      	adds	r7, #8
 8019036:	46bd      	mov	sp, r7
 8019038:	bd80      	pop	{r7, pc}
 801903a:	bf00      	nop
 801903c:	080226d1 	.word	0x080226d1
 8019040:	0801a4b9 	.word	0x0801a4b9

08019044 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8019044:	b580      	push	{r7, lr}
 8019046:	b086      	sub	sp, #24
 8019048:	af00      	add	r7, sp, #0
 801904a:	60f8      	str	r0, [r7, #12]
 801904c:	60b9      	str	r1, [r7, #8]
 801904e:	4613      	mov	r3, r2
 8019050:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8019052:	481d      	ldr	r0, [pc, #116]	; (80190c8 <tcpip_callback_with_block+0x84>)
 8019054:	f009 fcd4 	bl	8022a00 <sys_mbox_valid>
 8019058:	4603      	mov	r3, r0
 801905a:	2b00      	cmp	r3, #0
 801905c:	d105      	bne.n	801906a <tcpip_callback_with_block+0x26>
 801905e:	4b1b      	ldr	r3, [pc, #108]	; (80190cc <tcpip_callback_with_block+0x88>)
 8019060:	22ee      	movs	r2, #238	; 0xee
 8019062:	491b      	ldr	r1, [pc, #108]	; (80190d0 <tcpip_callback_with_block+0x8c>)
 8019064:	481b      	ldr	r0, [pc, #108]	; (80190d4 <tcpip_callback_with_block+0x90>)
 8019066:	f00e f9e3 	bl	8027430 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801906a:	2007      	movs	r0, #7
 801906c:	f002 ff24 	bl	801beb8 <memp_malloc>
 8019070:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8019072:	697b      	ldr	r3, [r7, #20]
 8019074:	2b00      	cmp	r3, #0
 8019076:	d102      	bne.n	801907e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8019078:	f04f 33ff 	mov.w	r3, #4294967295
 801907c:	e01f      	b.n	80190be <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801907e:	697b      	ldr	r3, [r7, #20]
 8019080:	2203      	movs	r2, #3
 8019082:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8019084:	697b      	ldr	r3, [r7, #20]
 8019086:	68fa      	ldr	r2, [r7, #12]
 8019088:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801908a:	697b      	ldr	r3, [r7, #20]
 801908c:	68ba      	ldr	r2, [r7, #8]
 801908e:	609a      	str	r2, [r3, #8]
  if (block) {
 8019090:	79fb      	ldrb	r3, [r7, #7]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d004      	beq.n	80190a0 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8019096:	6979      	ldr	r1, [r7, #20]
 8019098:	480b      	ldr	r0, [pc, #44]	; (80190c8 <tcpip_callback_with_block+0x84>)
 801909a:	f009 fc27 	bl	80228ec <sys_mbox_post>
 801909e:	e00d      	b.n	80190bc <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80190a0:	6979      	ldr	r1, [r7, #20]
 80190a2:	4809      	ldr	r0, [pc, #36]	; (80190c8 <tcpip_callback_with_block+0x84>)
 80190a4:	f009 fc37 	bl	8022916 <sys_mbox_trypost>
 80190a8:	4603      	mov	r3, r0
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d006      	beq.n	80190bc <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80190ae:	6979      	ldr	r1, [r7, #20]
 80190b0:	2007      	movs	r0, #7
 80190b2:	f002 ff53 	bl	801bf5c <memp_free>
      return ERR_MEM;
 80190b6:	f04f 33ff 	mov.w	r3, #4294967295
 80190ba:	e000      	b.n	80190be <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 80190bc:	2300      	movs	r3, #0
}
 80190be:	4618      	mov	r0, r3
 80190c0:	3718      	adds	r7, #24
 80190c2:	46bd      	mov	sp, r7
 80190c4:	bd80      	pop	{r7, pc}
 80190c6:	bf00      	nop
 80190c8:	200093b0 	.word	0x200093b0
 80190cc:	080297c0 	.word	0x080297c0
 80190d0:	08029838 	.word	0x08029838
 80190d4:	08029810 	.word	0x08029810

080190d8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 80190d8:	b580      	push	{r7, lr}
 80190da:	b084      	sub	sp, #16
 80190dc:	af00      	add	r7, sp, #0
 80190de:	60f8      	str	r0, [r7, #12]
 80190e0:	60b9      	str	r1, [r7, #8]
 80190e2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80190e4:	4806      	ldr	r0, [pc, #24]	; (8019100 <tcpip_send_msg_wait_sem+0x28>)
 80190e6:	f009 fd65 	bl	8022bb4 <sys_mutex_lock>
  fn(apimsg);
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	68b8      	ldr	r0, [r7, #8]
 80190ee:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80190f0:	4803      	ldr	r0, [pc, #12]	; (8019100 <tcpip_send_msg_wait_sem+0x28>)
 80190f2:	f009 fd6e 	bl	8022bd2 <sys_mutex_unlock>
  return ERR_OK;
 80190f6:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80190f8:	4618      	mov	r0, r3
 80190fa:	3710      	adds	r7, #16
 80190fc:	46bd      	mov	sp, r7
 80190fe:	bd80      	pop	{r7, pc}
 8019100:	2000a274 	.word	0x2000a274

08019104 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8019104:	b580      	push	{r7, lr}
 8019106:	b084      	sub	sp, #16
 8019108:	af02      	add	r7, sp, #8
 801910a:	6078      	str	r0, [r7, #4]
 801910c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801910e:	f000 f8b2 	bl	8019276 <lwip_init>

  tcpip_init_done = initfunc;
 8019112:	4a17      	ldr	r2, [pc, #92]	; (8019170 <tcpip_init+0x6c>)
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8019118:	4a16      	ldr	r2, [pc, #88]	; (8019174 <tcpip_init+0x70>)
 801911a:	683b      	ldr	r3, [r7, #0]
 801911c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801911e:	2106      	movs	r1, #6
 8019120:	4815      	ldr	r0, [pc, #84]	; (8019178 <tcpip_init+0x74>)
 8019122:	f009 fbaf 	bl	8022884 <sys_mbox_new>
 8019126:	4603      	mov	r3, r0
 8019128:	2b00      	cmp	r3, #0
 801912a:	d006      	beq.n	801913a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801912c:	4b13      	ldr	r3, [pc, #76]	; (801917c <tcpip_init+0x78>)
 801912e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8019132:	4913      	ldr	r1, [pc, #76]	; (8019180 <tcpip_init+0x7c>)
 8019134:	4813      	ldr	r0, [pc, #76]	; (8019184 <tcpip_init+0x80>)
 8019136:	f00e f97b 	bl	8027430 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801913a:	4813      	ldr	r0, [pc, #76]	; (8019188 <tcpip_init+0x84>)
 801913c:	f009 fd1e 	bl	8022b7c <sys_mutex_new>
 8019140:	4603      	mov	r3, r0
 8019142:	2b00      	cmp	r3, #0
 8019144:	d006      	beq.n	8019154 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8019146:	4b0d      	ldr	r3, [pc, #52]	; (801917c <tcpip_init+0x78>)
 8019148:	f240 12d9 	movw	r2, #473	; 0x1d9
 801914c:	490f      	ldr	r1, [pc, #60]	; (801918c <tcpip_init+0x88>)
 801914e:	480d      	ldr	r0, [pc, #52]	; (8019184 <tcpip_init+0x80>)
 8019150:	f00e f96e 	bl	8027430 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8019154:	2302      	movs	r3, #2
 8019156:	9300      	str	r3, [sp, #0]
 8019158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801915c:	2200      	movs	r2, #0
 801915e:	490c      	ldr	r1, [pc, #48]	; (8019190 <tcpip_init+0x8c>)
 8019160:	480c      	ldr	r0, [pc, #48]	; (8019194 <tcpip_init+0x90>)
 8019162:	f009 fd43 	bl	8022bec <sys_thread_new>
}
 8019166:	bf00      	nop
 8019168:	3708      	adds	r7, #8
 801916a:	46bd      	mov	sp, r7
 801916c:	bd80      	pop	{r7, pc}
 801916e:	bf00      	nop
 8019170:	200093a8 	.word	0x200093a8
 8019174:	200093ac 	.word	0x200093ac
 8019178:	200093b0 	.word	0x200093b0
 801917c:	080297c0 	.word	0x080297c0
 8019180:	08029848 	.word	0x08029848
 8019184:	08029810 	.word	0x08029810
 8019188:	2000a274 	.word	0x2000a274
 801918c:	0802986c 	.word	0x0802986c
 8019190:	08018ead 	.word	0x08018ead
 8019194:	08029890 	.word	0x08029890

08019198 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b084      	sub	sp, #16
 801919c:	af00      	add	r7, sp, #0
 801919e:	6078      	str	r0, [r7, #4]
 80191a0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d002      	beq.n	80191ae <fs_open+0x16>
 80191a8:	683b      	ldr	r3, [r7, #0]
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d102      	bne.n	80191b4 <fs_open+0x1c>
     return ERR_ARG;
 80191ae:	f06f 030f 	mvn.w	r3, #15
 80191b2:	e028      	b.n	8019206 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80191b4:	4b16      	ldr	r3, [pc, #88]	; (8019210 <fs_open+0x78>)
 80191b6:	60fb      	str	r3, [r7, #12]
 80191b8:	e020      	b.n	80191fc <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	685b      	ldr	r3, [r3, #4]
 80191be:	4619      	mov	r1, r3
 80191c0:	6838      	ldr	r0, [r7, #0]
 80191c2:	f7f6 ff4b 	bl	801005c <strcmp>
 80191c6:	4603      	mov	r3, r0
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d114      	bne.n	80191f6 <fs_open+0x5e>
      file->data = (const char *)f->data;
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	689a      	ldr	r2, [r3, #8]
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	68da      	ldr	r2, [r3, #12]
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	68da      	ldr	r2, [r3, #12]
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	2200      	movs	r2, #0
 80191e8:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	7c1a      	ldrb	r2, [r3, #16]
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80191f2:	2300      	movs	r3, #0
 80191f4:	e007      	b.n	8019206 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	60fb      	str	r3, [r7, #12]
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d1db      	bne.n	80191ba <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8019202:	f06f 0305 	mvn.w	r3, #5
}
 8019206:	4618      	mov	r0, r3
 8019208:	3710      	adds	r7, #16
 801920a:	46bd      	mov	sp, r7
 801920c:	bd80      	pop	{r7, pc}
 801920e:	bf00      	nop
 8019210:	0802e564 	.word	0x0802e564

08019214 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8019214:	b480      	push	{r7}
 8019216:	b083      	sub	sp, #12
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 801921c:	bf00      	nop
 801921e:	370c      	adds	r7, #12
 8019220:	46bd      	mov	sp, r7
 8019222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019226:	4770      	bx	lr

08019228 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8019228:	b480      	push	{r7}
 801922a:	b083      	sub	sp, #12
 801922c:	af00      	add	r7, sp, #0
 801922e:	4603      	mov	r3, r0
 8019230:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8019232:	88fb      	ldrh	r3, [r7, #6]
 8019234:	ba5b      	rev16	r3, r3
 8019236:	b29b      	uxth	r3, r3
}
 8019238:	4618      	mov	r0, r3
 801923a:	370c      	adds	r7, #12
 801923c:	46bd      	mov	sp, r7
 801923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019242:	4770      	bx	lr

08019244 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8019244:	b480      	push	{r7}
 8019246:	b083      	sub	sp, #12
 8019248:	af00      	add	r7, sp, #0
 801924a:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	061a      	lsls	r2, r3, #24
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	021b      	lsls	r3, r3, #8
 8019254:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8019258:	431a      	orrs	r2, r3
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	0a1b      	lsrs	r3, r3, #8
 801925e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019262:	431a      	orrs	r2, r3
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	0e1b      	lsrs	r3, r3, #24
 8019268:	4313      	orrs	r3, r2
}
 801926a:	4618      	mov	r0, r3
 801926c:	370c      	adds	r7, #12
 801926e:	46bd      	mov	sp, r7
 8019270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019274:	4770      	bx	lr

08019276 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8019276:	b580      	push	{r7, lr}
 8019278:	b082      	sub	sp, #8
 801927a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801927c:	2300      	movs	r3, #0
 801927e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8019280:	f009 fc6e 	bl	8022b60 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8019284:	f002 fb00 	bl	801b888 <mem_init>
  memp_init();
 8019288:	f002 fdca 	bl	801be20 <memp_init>
  pbuf_init();
  netif_init();
 801928c:	f002 fe90 	bl	801bfb0 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8019290:	f003 fe6a 	bl	801cf68 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8019294:	f009 f8b2 	bl	80223fc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8019298:	bf00      	nop
 801929a:	3708      	adds	r7, #8
 801929c:	46bd      	mov	sp, r7
 801929e:	bd80      	pop	{r7, pc}

080192a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b082      	sub	sp, #8
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80192a8:	4915      	ldr	r1, [pc, #84]	; (8019300 <etharp_free_entry+0x60>)
 80192aa:	687a      	ldr	r2, [r7, #4]
 80192ac:	4613      	mov	r3, r2
 80192ae:	005b      	lsls	r3, r3, #1
 80192b0:	4413      	add	r3, r2
 80192b2:	00db      	lsls	r3, r3, #3
 80192b4:	440b      	add	r3, r1
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d013      	beq.n	80192e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80192bc:	4910      	ldr	r1, [pc, #64]	; (8019300 <etharp_free_entry+0x60>)
 80192be:	687a      	ldr	r2, [r7, #4]
 80192c0:	4613      	mov	r3, r2
 80192c2:	005b      	lsls	r3, r3, #1
 80192c4:	4413      	add	r3, r2
 80192c6:	00db      	lsls	r3, r3, #3
 80192c8:	440b      	add	r3, r1
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	4618      	mov	r0, r3
 80192ce:	f003 fbd5 	bl	801ca7c <pbuf_free>
    arp_table[i].q = NULL;
 80192d2:	490b      	ldr	r1, [pc, #44]	; (8019300 <etharp_free_entry+0x60>)
 80192d4:	687a      	ldr	r2, [r7, #4]
 80192d6:	4613      	mov	r3, r2
 80192d8:	005b      	lsls	r3, r3, #1
 80192da:	4413      	add	r3, r2
 80192dc:	00db      	lsls	r3, r3, #3
 80192de:	440b      	add	r3, r1
 80192e0:	2200      	movs	r2, #0
 80192e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80192e4:	4906      	ldr	r1, [pc, #24]	; (8019300 <etharp_free_entry+0x60>)
 80192e6:	687a      	ldr	r2, [r7, #4]
 80192e8:	4613      	mov	r3, r2
 80192ea:	005b      	lsls	r3, r3, #1
 80192ec:	4413      	add	r3, r2
 80192ee:	00db      	lsls	r3, r3, #3
 80192f0:	440b      	add	r3, r1
 80192f2:	3314      	adds	r3, #20
 80192f4:	2200      	movs	r2, #0
 80192f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80192f8:	bf00      	nop
 80192fa:	3708      	adds	r7, #8
 80192fc:	46bd      	mov	sp, r7
 80192fe:	bd80      	pop	{r7, pc}
 8019300:	200093b4 	.word	0x200093b4

08019304 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b082      	sub	sp, #8
 8019308:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801930a:	2300      	movs	r3, #0
 801930c:	71fb      	strb	r3, [r7, #7]
 801930e:	e096      	b.n	801943e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019310:	79fa      	ldrb	r2, [r7, #7]
 8019312:	494f      	ldr	r1, [pc, #316]	; (8019450 <etharp_tmr+0x14c>)
 8019314:	4613      	mov	r3, r2
 8019316:	005b      	lsls	r3, r3, #1
 8019318:	4413      	add	r3, r2
 801931a:	00db      	lsls	r3, r3, #3
 801931c:	440b      	add	r3, r1
 801931e:	3314      	adds	r3, #20
 8019320:	781b      	ldrb	r3, [r3, #0]
 8019322:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8019324:	79bb      	ldrb	r3, [r7, #6]
 8019326:	2b00      	cmp	r3, #0
 8019328:	f000 8086 	beq.w	8019438 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 801932c:	79fa      	ldrb	r2, [r7, #7]
 801932e:	4948      	ldr	r1, [pc, #288]	; (8019450 <etharp_tmr+0x14c>)
 8019330:	4613      	mov	r3, r2
 8019332:	005b      	lsls	r3, r3, #1
 8019334:	4413      	add	r3, r2
 8019336:	00db      	lsls	r3, r3, #3
 8019338:	440b      	add	r3, r1
 801933a:	3312      	adds	r3, #18
 801933c:	881b      	ldrh	r3, [r3, #0]
 801933e:	3301      	adds	r3, #1
 8019340:	b298      	uxth	r0, r3
 8019342:	4943      	ldr	r1, [pc, #268]	; (8019450 <etharp_tmr+0x14c>)
 8019344:	4613      	mov	r3, r2
 8019346:	005b      	lsls	r3, r3, #1
 8019348:	4413      	add	r3, r2
 801934a:	00db      	lsls	r3, r3, #3
 801934c:	440b      	add	r3, r1
 801934e:	3312      	adds	r3, #18
 8019350:	4602      	mov	r2, r0
 8019352:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019354:	79fa      	ldrb	r2, [r7, #7]
 8019356:	493e      	ldr	r1, [pc, #248]	; (8019450 <etharp_tmr+0x14c>)
 8019358:	4613      	mov	r3, r2
 801935a:	005b      	lsls	r3, r3, #1
 801935c:	4413      	add	r3, r2
 801935e:	00db      	lsls	r3, r3, #3
 8019360:	440b      	add	r3, r1
 8019362:	3312      	adds	r3, #18
 8019364:	881b      	ldrh	r3, [r3, #0]
 8019366:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801936a:	d215      	bcs.n	8019398 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801936c:	79fa      	ldrb	r2, [r7, #7]
 801936e:	4938      	ldr	r1, [pc, #224]	; (8019450 <etharp_tmr+0x14c>)
 8019370:	4613      	mov	r3, r2
 8019372:	005b      	lsls	r3, r3, #1
 8019374:	4413      	add	r3, r2
 8019376:	00db      	lsls	r3, r3, #3
 8019378:	440b      	add	r3, r1
 801937a:	3314      	adds	r3, #20
 801937c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801937e:	2b01      	cmp	r3, #1
 8019380:	d10f      	bne.n	80193a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019382:	79fa      	ldrb	r2, [r7, #7]
 8019384:	4932      	ldr	r1, [pc, #200]	; (8019450 <etharp_tmr+0x14c>)
 8019386:	4613      	mov	r3, r2
 8019388:	005b      	lsls	r3, r3, #1
 801938a:	4413      	add	r3, r2
 801938c:	00db      	lsls	r3, r3, #3
 801938e:	440b      	add	r3, r1
 8019390:	3312      	adds	r3, #18
 8019392:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019394:	2b04      	cmp	r3, #4
 8019396:	d904      	bls.n	80193a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019398:	79fb      	ldrb	r3, [r7, #7]
 801939a:	4618      	mov	r0, r3
 801939c:	f7ff ff80 	bl	80192a0 <etharp_free_entry>
 80193a0:	e04a      	b.n	8019438 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80193a2:	79fa      	ldrb	r2, [r7, #7]
 80193a4:	492a      	ldr	r1, [pc, #168]	; (8019450 <etharp_tmr+0x14c>)
 80193a6:	4613      	mov	r3, r2
 80193a8:	005b      	lsls	r3, r3, #1
 80193aa:	4413      	add	r3, r2
 80193ac:	00db      	lsls	r3, r3, #3
 80193ae:	440b      	add	r3, r1
 80193b0:	3314      	adds	r3, #20
 80193b2:	781b      	ldrb	r3, [r3, #0]
 80193b4:	2b03      	cmp	r3, #3
 80193b6:	d10a      	bne.n	80193ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80193b8:	79fa      	ldrb	r2, [r7, #7]
 80193ba:	4925      	ldr	r1, [pc, #148]	; (8019450 <etharp_tmr+0x14c>)
 80193bc:	4613      	mov	r3, r2
 80193be:	005b      	lsls	r3, r3, #1
 80193c0:	4413      	add	r3, r2
 80193c2:	00db      	lsls	r3, r3, #3
 80193c4:	440b      	add	r3, r1
 80193c6:	3314      	adds	r3, #20
 80193c8:	2204      	movs	r2, #4
 80193ca:	701a      	strb	r2, [r3, #0]
 80193cc:	e034      	b.n	8019438 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80193ce:	79fa      	ldrb	r2, [r7, #7]
 80193d0:	491f      	ldr	r1, [pc, #124]	; (8019450 <etharp_tmr+0x14c>)
 80193d2:	4613      	mov	r3, r2
 80193d4:	005b      	lsls	r3, r3, #1
 80193d6:	4413      	add	r3, r2
 80193d8:	00db      	lsls	r3, r3, #3
 80193da:	440b      	add	r3, r1
 80193dc:	3314      	adds	r3, #20
 80193de:	781b      	ldrb	r3, [r3, #0]
 80193e0:	2b04      	cmp	r3, #4
 80193e2:	d10a      	bne.n	80193fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80193e4:	79fa      	ldrb	r2, [r7, #7]
 80193e6:	491a      	ldr	r1, [pc, #104]	; (8019450 <etharp_tmr+0x14c>)
 80193e8:	4613      	mov	r3, r2
 80193ea:	005b      	lsls	r3, r3, #1
 80193ec:	4413      	add	r3, r2
 80193ee:	00db      	lsls	r3, r3, #3
 80193f0:	440b      	add	r3, r1
 80193f2:	3314      	adds	r3, #20
 80193f4:	2202      	movs	r2, #2
 80193f6:	701a      	strb	r2, [r3, #0]
 80193f8:	e01e      	b.n	8019438 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80193fa:	79fa      	ldrb	r2, [r7, #7]
 80193fc:	4914      	ldr	r1, [pc, #80]	; (8019450 <etharp_tmr+0x14c>)
 80193fe:	4613      	mov	r3, r2
 8019400:	005b      	lsls	r3, r3, #1
 8019402:	4413      	add	r3, r2
 8019404:	00db      	lsls	r3, r3, #3
 8019406:	440b      	add	r3, r1
 8019408:	3314      	adds	r3, #20
 801940a:	781b      	ldrb	r3, [r3, #0]
 801940c:	2b01      	cmp	r3, #1
 801940e:	d113      	bne.n	8019438 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019410:	79fa      	ldrb	r2, [r7, #7]
 8019412:	490f      	ldr	r1, [pc, #60]	; (8019450 <etharp_tmr+0x14c>)
 8019414:	4613      	mov	r3, r2
 8019416:	005b      	lsls	r3, r3, #1
 8019418:	4413      	add	r3, r2
 801941a:	00db      	lsls	r3, r3, #3
 801941c:	440b      	add	r3, r1
 801941e:	3308      	adds	r3, #8
 8019420:	6818      	ldr	r0, [r3, #0]
 8019422:	79fa      	ldrb	r2, [r7, #7]
 8019424:	4613      	mov	r3, r2
 8019426:	005b      	lsls	r3, r3, #1
 8019428:	4413      	add	r3, r2
 801942a:	00db      	lsls	r3, r3, #3
 801942c:	4a08      	ldr	r2, [pc, #32]	; (8019450 <etharp_tmr+0x14c>)
 801942e:	4413      	add	r3, r2
 8019430:	3304      	adds	r3, #4
 8019432:	4619      	mov	r1, r3
 8019434:	f000 fe38 	bl	801a0a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019438:	79fb      	ldrb	r3, [r7, #7]
 801943a:	3301      	adds	r3, #1
 801943c:	71fb      	strb	r3, [r7, #7]
 801943e:	79fb      	ldrb	r3, [r7, #7]
 8019440:	2b09      	cmp	r3, #9
 8019442:	f67f af65 	bls.w	8019310 <etharp_tmr+0xc>
      }
    }
  }
}
 8019446:	bf00      	nop
 8019448:	3708      	adds	r7, #8
 801944a:	46bd      	mov	sp, r7
 801944c:	bd80      	pop	{r7, pc}
 801944e:	bf00      	nop
 8019450:	200093b4 	.word	0x200093b4

08019454 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b088      	sub	sp, #32
 8019458:	af00      	add	r7, sp, #0
 801945a:	60f8      	str	r0, [r7, #12]
 801945c:	460b      	mov	r3, r1
 801945e:	607a      	str	r2, [r7, #4]
 8019460:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019462:	230a      	movs	r3, #10
 8019464:	77fb      	strb	r3, [r7, #31]
 8019466:	230a      	movs	r3, #10
 8019468:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801946a:	230a      	movs	r3, #10
 801946c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 801946e:	2300      	movs	r3, #0
 8019470:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8019472:	230a      	movs	r3, #10
 8019474:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8019476:	2300      	movs	r3, #0
 8019478:	833b      	strh	r3, [r7, #24]
 801947a:	2300      	movs	r3, #0
 801947c:	82fb      	strh	r3, [r7, #22]
 801947e:	2300      	movs	r3, #0
 8019480:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019482:	2300      	movs	r3, #0
 8019484:	773b      	strb	r3, [r7, #28]
 8019486:	e093      	b.n	80195b0 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8019488:	7f3a      	ldrb	r2, [r7, #28]
 801948a:	4990      	ldr	r1, [pc, #576]	; (80196cc <etharp_find_entry+0x278>)
 801948c:	4613      	mov	r3, r2
 801948e:	005b      	lsls	r3, r3, #1
 8019490:	4413      	add	r3, r2
 8019492:	00db      	lsls	r3, r3, #3
 8019494:	440b      	add	r3, r1
 8019496:	3314      	adds	r3, #20
 8019498:	781b      	ldrb	r3, [r3, #0]
 801949a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801949c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80194a0:	2b0a      	cmp	r3, #10
 80194a2:	d105      	bne.n	80194b0 <etharp_find_entry+0x5c>
 80194a4:	7cfb      	ldrb	r3, [r7, #19]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d102      	bne.n	80194b0 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80194aa:	7f3b      	ldrb	r3, [r7, #28]
 80194ac:	777b      	strb	r3, [r7, #29]
 80194ae:	e07c      	b.n	80195aa <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80194b0:	7cfb      	ldrb	r3, [r7, #19]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d079      	beq.n	80195aa <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80194b6:	7cfb      	ldrb	r3, [r7, #19]
 80194b8:	2b01      	cmp	r3, #1
 80194ba:	d009      	beq.n	80194d0 <etharp_find_entry+0x7c>
 80194bc:	7cfb      	ldrb	r3, [r7, #19]
 80194be:	2b01      	cmp	r3, #1
 80194c0:	d806      	bhi.n	80194d0 <etharp_find_entry+0x7c>
 80194c2:	4b83      	ldr	r3, [pc, #524]	; (80196d0 <etharp_find_entry+0x27c>)
 80194c4:	f44f 7293 	mov.w	r2, #294	; 0x126
 80194c8:	4982      	ldr	r1, [pc, #520]	; (80196d4 <etharp_find_entry+0x280>)
 80194ca:	4883      	ldr	r0, [pc, #524]	; (80196d8 <etharp_find_entry+0x284>)
 80194cc:	f00d ffb0 	bl	8027430 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d00f      	beq.n	80194f6 <etharp_find_entry+0xa2>
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	6819      	ldr	r1, [r3, #0]
 80194da:	7f3a      	ldrb	r2, [r7, #28]
 80194dc:	487b      	ldr	r0, [pc, #492]	; (80196cc <etharp_find_entry+0x278>)
 80194de:	4613      	mov	r3, r2
 80194e0:	005b      	lsls	r3, r3, #1
 80194e2:	4413      	add	r3, r2
 80194e4:	00db      	lsls	r3, r3, #3
 80194e6:	4403      	add	r3, r0
 80194e8:	3304      	adds	r3, #4
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	4299      	cmp	r1, r3
 80194ee:	d102      	bne.n	80194f6 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80194f0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80194f4:	e0e5      	b.n	80196c2 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80194f6:	7cfb      	ldrb	r3, [r7, #19]
 80194f8:	2b01      	cmp	r3, #1
 80194fa:	d13b      	bne.n	8019574 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80194fc:	7f3a      	ldrb	r2, [r7, #28]
 80194fe:	4973      	ldr	r1, [pc, #460]	; (80196cc <etharp_find_entry+0x278>)
 8019500:	4613      	mov	r3, r2
 8019502:	005b      	lsls	r3, r3, #1
 8019504:	4413      	add	r3, r2
 8019506:	00db      	lsls	r3, r3, #3
 8019508:	440b      	add	r3, r1
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	2b00      	cmp	r3, #0
 801950e:	d018      	beq.n	8019542 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8019510:	7f3a      	ldrb	r2, [r7, #28]
 8019512:	496e      	ldr	r1, [pc, #440]	; (80196cc <etharp_find_entry+0x278>)
 8019514:	4613      	mov	r3, r2
 8019516:	005b      	lsls	r3, r3, #1
 8019518:	4413      	add	r3, r2
 801951a:	00db      	lsls	r3, r3, #3
 801951c:	440b      	add	r3, r1
 801951e:	3312      	adds	r3, #18
 8019520:	881b      	ldrh	r3, [r3, #0]
 8019522:	8b3a      	ldrh	r2, [r7, #24]
 8019524:	429a      	cmp	r2, r3
 8019526:	d840      	bhi.n	80195aa <etharp_find_entry+0x156>
            old_queue = i;
 8019528:	7f3b      	ldrb	r3, [r7, #28]
 801952a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 801952c:	7f3a      	ldrb	r2, [r7, #28]
 801952e:	4967      	ldr	r1, [pc, #412]	; (80196cc <etharp_find_entry+0x278>)
 8019530:	4613      	mov	r3, r2
 8019532:	005b      	lsls	r3, r3, #1
 8019534:	4413      	add	r3, r2
 8019536:	00db      	lsls	r3, r3, #3
 8019538:	440b      	add	r3, r1
 801953a:	3312      	adds	r3, #18
 801953c:	881b      	ldrh	r3, [r3, #0]
 801953e:	833b      	strh	r3, [r7, #24]
 8019540:	e033      	b.n	80195aa <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019542:	7f3a      	ldrb	r2, [r7, #28]
 8019544:	4961      	ldr	r1, [pc, #388]	; (80196cc <etharp_find_entry+0x278>)
 8019546:	4613      	mov	r3, r2
 8019548:	005b      	lsls	r3, r3, #1
 801954a:	4413      	add	r3, r2
 801954c:	00db      	lsls	r3, r3, #3
 801954e:	440b      	add	r3, r1
 8019550:	3312      	adds	r3, #18
 8019552:	881b      	ldrh	r3, [r3, #0]
 8019554:	8afa      	ldrh	r2, [r7, #22]
 8019556:	429a      	cmp	r2, r3
 8019558:	d827      	bhi.n	80195aa <etharp_find_entry+0x156>
            old_pending = i;
 801955a:	7f3b      	ldrb	r3, [r7, #28]
 801955c:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801955e:	7f3a      	ldrb	r2, [r7, #28]
 8019560:	495a      	ldr	r1, [pc, #360]	; (80196cc <etharp_find_entry+0x278>)
 8019562:	4613      	mov	r3, r2
 8019564:	005b      	lsls	r3, r3, #1
 8019566:	4413      	add	r3, r2
 8019568:	00db      	lsls	r3, r3, #3
 801956a:	440b      	add	r3, r1
 801956c:	3312      	adds	r3, #18
 801956e:	881b      	ldrh	r3, [r3, #0]
 8019570:	82fb      	strh	r3, [r7, #22]
 8019572:	e01a      	b.n	80195aa <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019574:	7cfb      	ldrb	r3, [r7, #19]
 8019576:	2b01      	cmp	r3, #1
 8019578:	d917      	bls.n	80195aa <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801957a:	7f3a      	ldrb	r2, [r7, #28]
 801957c:	4953      	ldr	r1, [pc, #332]	; (80196cc <etharp_find_entry+0x278>)
 801957e:	4613      	mov	r3, r2
 8019580:	005b      	lsls	r3, r3, #1
 8019582:	4413      	add	r3, r2
 8019584:	00db      	lsls	r3, r3, #3
 8019586:	440b      	add	r3, r1
 8019588:	3312      	adds	r3, #18
 801958a:	881b      	ldrh	r3, [r3, #0]
 801958c:	8aba      	ldrh	r2, [r7, #20]
 801958e:	429a      	cmp	r2, r3
 8019590:	d80b      	bhi.n	80195aa <etharp_find_entry+0x156>
            old_stable = i;
 8019592:	7f3b      	ldrb	r3, [r7, #28]
 8019594:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8019596:	7f3a      	ldrb	r2, [r7, #28]
 8019598:	494c      	ldr	r1, [pc, #304]	; (80196cc <etharp_find_entry+0x278>)
 801959a:	4613      	mov	r3, r2
 801959c:	005b      	lsls	r3, r3, #1
 801959e:	4413      	add	r3, r2
 80195a0:	00db      	lsls	r3, r3, #3
 80195a2:	440b      	add	r3, r1
 80195a4:	3312      	adds	r3, #18
 80195a6:	881b      	ldrh	r3, [r3, #0]
 80195a8:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80195aa:	7f3b      	ldrb	r3, [r7, #28]
 80195ac:	3301      	adds	r3, #1
 80195ae:	773b      	strb	r3, [r7, #28]
 80195b0:	7f3b      	ldrb	r3, [r7, #28]
 80195b2:	2b09      	cmp	r3, #9
 80195b4:	f67f af68 	bls.w	8019488 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80195b8:	7afb      	ldrb	r3, [r7, #11]
 80195ba:	f003 0302 	and.w	r3, r3, #2
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d108      	bne.n	80195d4 <etharp_find_entry+0x180>
 80195c2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80195c6:	2b0a      	cmp	r3, #10
 80195c8:	d107      	bne.n	80195da <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80195ca:	7afb      	ldrb	r3, [r7, #11]
 80195cc:	f003 0301 	and.w	r3, r3, #1
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d102      	bne.n	80195da <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80195d4:	f04f 33ff 	mov.w	r3, #4294967295
 80195d8:	e073      	b.n	80196c2 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80195da:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80195de:	2b09      	cmp	r3, #9
 80195e0:	dc02      	bgt.n	80195e8 <etharp_find_entry+0x194>
    i = empty;
 80195e2:	7f7b      	ldrb	r3, [r7, #29]
 80195e4:	773b      	strb	r3, [r7, #28]
 80195e6:	e036      	b.n	8019656 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80195e8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80195ec:	2b09      	cmp	r3, #9
 80195ee:	dc13      	bgt.n	8019618 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80195f0:	7fbb      	ldrb	r3, [r7, #30]
 80195f2:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80195f4:	7f3a      	ldrb	r2, [r7, #28]
 80195f6:	4935      	ldr	r1, [pc, #212]	; (80196cc <etharp_find_entry+0x278>)
 80195f8:	4613      	mov	r3, r2
 80195fa:	005b      	lsls	r3, r3, #1
 80195fc:	4413      	add	r3, r2
 80195fe:	00db      	lsls	r3, r3, #3
 8019600:	440b      	add	r3, r1
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d018      	beq.n	801963a <etharp_find_entry+0x1e6>
 8019608:	4b31      	ldr	r3, [pc, #196]	; (80196d0 <etharp_find_entry+0x27c>)
 801960a:	f240 126f 	movw	r2, #367	; 0x16f
 801960e:	4933      	ldr	r1, [pc, #204]	; (80196dc <etharp_find_entry+0x288>)
 8019610:	4831      	ldr	r0, [pc, #196]	; (80196d8 <etharp_find_entry+0x284>)
 8019612:	f00d ff0d 	bl	8027430 <iprintf>
 8019616:	e010      	b.n	801963a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8019618:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801961c:	2b09      	cmp	r3, #9
 801961e:	dc02      	bgt.n	8019626 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8019620:	7ffb      	ldrb	r3, [r7, #31]
 8019622:	773b      	strb	r3, [r7, #28]
 8019624:	e009      	b.n	801963a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8019626:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801962a:	2b09      	cmp	r3, #9
 801962c:	dc02      	bgt.n	8019634 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801962e:	7efb      	ldrb	r3, [r7, #27]
 8019630:	773b      	strb	r3, [r7, #28]
 8019632:	e002      	b.n	801963a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8019634:	f04f 33ff 	mov.w	r3, #4294967295
 8019638:	e043      	b.n	80196c2 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801963a:	7f3b      	ldrb	r3, [r7, #28]
 801963c:	2b09      	cmp	r3, #9
 801963e:	d906      	bls.n	801964e <etharp_find_entry+0x1fa>
 8019640:	4b23      	ldr	r3, [pc, #140]	; (80196d0 <etharp_find_entry+0x27c>)
 8019642:	f240 1281 	movw	r2, #385	; 0x181
 8019646:	4926      	ldr	r1, [pc, #152]	; (80196e0 <etharp_find_entry+0x28c>)
 8019648:	4823      	ldr	r0, [pc, #140]	; (80196d8 <etharp_find_entry+0x284>)
 801964a:	f00d fef1 	bl	8027430 <iprintf>
    etharp_free_entry(i);
 801964e:	7f3b      	ldrb	r3, [r7, #28]
 8019650:	4618      	mov	r0, r3
 8019652:	f7ff fe25 	bl	80192a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019656:	7f3b      	ldrb	r3, [r7, #28]
 8019658:	2b09      	cmp	r3, #9
 801965a:	d906      	bls.n	801966a <etharp_find_entry+0x216>
 801965c:	4b1c      	ldr	r3, [pc, #112]	; (80196d0 <etharp_find_entry+0x27c>)
 801965e:	f240 1285 	movw	r2, #389	; 0x185
 8019662:	491f      	ldr	r1, [pc, #124]	; (80196e0 <etharp_find_entry+0x28c>)
 8019664:	481c      	ldr	r0, [pc, #112]	; (80196d8 <etharp_find_entry+0x284>)
 8019666:	f00d fee3 	bl	8027430 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801966a:	7f3a      	ldrb	r2, [r7, #28]
 801966c:	4917      	ldr	r1, [pc, #92]	; (80196cc <etharp_find_entry+0x278>)
 801966e:	4613      	mov	r3, r2
 8019670:	005b      	lsls	r3, r3, #1
 8019672:	4413      	add	r3, r2
 8019674:	00db      	lsls	r3, r3, #3
 8019676:	440b      	add	r3, r1
 8019678:	3314      	adds	r3, #20
 801967a:	781b      	ldrb	r3, [r3, #0]
 801967c:	2b00      	cmp	r3, #0
 801967e:	d006      	beq.n	801968e <etharp_find_entry+0x23a>
 8019680:	4b13      	ldr	r3, [pc, #76]	; (80196d0 <etharp_find_entry+0x27c>)
 8019682:	f240 1287 	movw	r2, #391	; 0x187
 8019686:	4917      	ldr	r1, [pc, #92]	; (80196e4 <etharp_find_entry+0x290>)
 8019688:	4813      	ldr	r0, [pc, #76]	; (80196d8 <etharp_find_entry+0x284>)
 801968a:	f00d fed1 	bl	8027430 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d00a      	beq.n	80196aa <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8019694:	7f3a      	ldrb	r2, [r7, #28]
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	6819      	ldr	r1, [r3, #0]
 801969a:	480c      	ldr	r0, [pc, #48]	; (80196cc <etharp_find_entry+0x278>)
 801969c:	4613      	mov	r3, r2
 801969e:	005b      	lsls	r3, r3, #1
 80196a0:	4413      	add	r3, r2
 80196a2:	00db      	lsls	r3, r3, #3
 80196a4:	4403      	add	r3, r0
 80196a6:	3304      	adds	r3, #4
 80196a8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80196aa:	7f3a      	ldrb	r2, [r7, #28]
 80196ac:	4907      	ldr	r1, [pc, #28]	; (80196cc <etharp_find_entry+0x278>)
 80196ae:	4613      	mov	r3, r2
 80196b0:	005b      	lsls	r3, r3, #1
 80196b2:	4413      	add	r3, r2
 80196b4:	00db      	lsls	r3, r3, #3
 80196b6:	440b      	add	r3, r1
 80196b8:	3312      	adds	r3, #18
 80196ba:	2200      	movs	r2, #0
 80196bc:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80196be:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80196c2:	4618      	mov	r0, r3
 80196c4:	3720      	adds	r7, #32
 80196c6:	46bd      	mov	sp, r7
 80196c8:	bd80      	pop	{r7, pc}
 80196ca:	bf00      	nop
 80196cc:	200093b4 	.word	0x200093b4
 80196d0:	080298a0 	.word	0x080298a0
 80196d4:	080298d8 	.word	0x080298d8
 80196d8:	08029918 	.word	0x08029918
 80196dc:	08029940 	.word	0x08029940
 80196e0:	08029958 	.word	0x08029958
 80196e4:	0802996c 	.word	0x0802996c

080196e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80196e8:	b580      	push	{r7, lr}
 80196ea:	b088      	sub	sp, #32
 80196ec:	af02      	add	r7, sp, #8
 80196ee:	60f8      	str	r0, [r7, #12]
 80196f0:	60b9      	str	r1, [r7, #8]
 80196f2:	607a      	str	r2, [r7, #4]
 80196f4:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80196fc:	2b06      	cmp	r3, #6
 80196fe:	d006      	beq.n	801970e <etharp_update_arp_entry+0x26>
 8019700:	4b48      	ldr	r3, [pc, #288]	; (8019824 <etharp_update_arp_entry+0x13c>)
 8019702:	f240 12ab 	movw	r2, #427	; 0x1ab
 8019706:	4948      	ldr	r1, [pc, #288]	; (8019828 <etharp_update_arp_entry+0x140>)
 8019708:	4848      	ldr	r0, [pc, #288]	; (801982c <etharp_update_arp_entry+0x144>)
 801970a:	f00d fe91 	bl	8027430 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801970e:	68bb      	ldr	r3, [r7, #8]
 8019710:	2b00      	cmp	r3, #0
 8019712:	d012      	beq.n	801973a <etharp_update_arp_entry+0x52>
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d00e      	beq.n	801973a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801971c:	68bb      	ldr	r3, [r7, #8]
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	68f9      	ldr	r1, [r7, #12]
 8019722:	4618      	mov	r0, r3
 8019724:	f001 f8ce 	bl	801a8c4 <ip4_addr_isbroadcast_u32>
 8019728:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801972a:	2b00      	cmp	r3, #0
 801972c:	d105      	bne.n	801973a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801972e:	68bb      	ldr	r3, [r7, #8]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019736:	2be0      	cmp	r3, #224	; 0xe0
 8019738:	d102      	bne.n	8019740 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801973a:	f06f 030f 	mvn.w	r3, #15
 801973e:	e06c      	b.n	801981a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019740:	78fb      	ldrb	r3, [r7, #3]
 8019742:	68fa      	ldr	r2, [r7, #12]
 8019744:	4619      	mov	r1, r3
 8019746:	68b8      	ldr	r0, [r7, #8]
 8019748:	f7ff fe84 	bl	8019454 <etharp_find_entry>
 801974c:	4603      	mov	r3, r0
 801974e:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019750:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019754:	2b00      	cmp	r3, #0
 8019756:	da02      	bge.n	801975e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8019758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801975c:	e05d      	b.n	801981a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801975e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019762:	4933      	ldr	r1, [pc, #204]	; (8019830 <etharp_update_arp_entry+0x148>)
 8019764:	4613      	mov	r3, r2
 8019766:	005b      	lsls	r3, r3, #1
 8019768:	4413      	add	r3, r2
 801976a:	00db      	lsls	r3, r3, #3
 801976c:	440b      	add	r3, r1
 801976e:	3314      	adds	r3, #20
 8019770:	2202      	movs	r2, #2
 8019772:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019774:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019778:	492d      	ldr	r1, [pc, #180]	; (8019830 <etharp_update_arp_entry+0x148>)
 801977a:	4613      	mov	r3, r2
 801977c:	005b      	lsls	r3, r3, #1
 801977e:	4413      	add	r3, r2
 8019780:	00db      	lsls	r3, r3, #3
 8019782:	440b      	add	r3, r1
 8019784:	3308      	adds	r3, #8
 8019786:	68fa      	ldr	r2, [r7, #12]
 8019788:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801978a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801978e:	4613      	mov	r3, r2
 8019790:	005b      	lsls	r3, r3, #1
 8019792:	4413      	add	r3, r2
 8019794:	00db      	lsls	r3, r3, #3
 8019796:	3308      	adds	r3, #8
 8019798:	4a25      	ldr	r2, [pc, #148]	; (8019830 <etharp_update_arp_entry+0x148>)
 801979a:	4413      	add	r3, r2
 801979c:	3304      	adds	r3, #4
 801979e:	2206      	movs	r2, #6
 80197a0:	6879      	ldr	r1, [r7, #4]
 80197a2:	4618      	mov	r0, r3
 80197a4:	f00e fe63 	bl	802846e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80197a8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80197ac:	4920      	ldr	r1, [pc, #128]	; (8019830 <etharp_update_arp_entry+0x148>)
 80197ae:	4613      	mov	r3, r2
 80197b0:	005b      	lsls	r3, r3, #1
 80197b2:	4413      	add	r3, r2
 80197b4:	00db      	lsls	r3, r3, #3
 80197b6:	440b      	add	r3, r1
 80197b8:	3312      	adds	r3, #18
 80197ba:	2200      	movs	r2, #0
 80197bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80197be:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80197c2:	491b      	ldr	r1, [pc, #108]	; (8019830 <etharp_update_arp_entry+0x148>)
 80197c4:	4613      	mov	r3, r2
 80197c6:	005b      	lsls	r3, r3, #1
 80197c8:	4413      	add	r3, r2
 80197ca:	00db      	lsls	r3, r3, #3
 80197cc:	440b      	add	r3, r1
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d021      	beq.n	8019818 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80197d4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80197d8:	4915      	ldr	r1, [pc, #84]	; (8019830 <etharp_update_arp_entry+0x148>)
 80197da:	4613      	mov	r3, r2
 80197dc:	005b      	lsls	r3, r3, #1
 80197de:	4413      	add	r3, r2
 80197e0:	00db      	lsls	r3, r3, #3
 80197e2:	440b      	add	r3, r1
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80197e8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80197ec:	4910      	ldr	r1, [pc, #64]	; (8019830 <etharp_update_arp_entry+0x148>)
 80197ee:	4613      	mov	r3, r2
 80197f0:	005b      	lsls	r3, r3, #1
 80197f2:	4413      	add	r3, r2
 80197f4:	00db      	lsls	r3, r3, #3
 80197f6:	440b      	add	r3, r1
 80197f8:	2200      	movs	r2, #0
 80197fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8019802:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019806:	9300      	str	r3, [sp, #0]
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	6939      	ldr	r1, [r7, #16]
 801980c:	68f8      	ldr	r0, [r7, #12]
 801980e:	f008 fff1 	bl	80227f4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019812:	6938      	ldr	r0, [r7, #16]
 8019814:	f003 f932 	bl	801ca7c <pbuf_free>
  }
  return ERR_OK;
 8019818:	2300      	movs	r3, #0
}
 801981a:	4618      	mov	r0, r3
 801981c:	3718      	adds	r7, #24
 801981e:	46bd      	mov	sp, r7
 8019820:	bd80      	pop	{r7, pc}
 8019822:	bf00      	nop
 8019824:	080298a0 	.word	0x080298a0
 8019828:	08029998 	.word	0x08029998
 801982c:	08029918 	.word	0x08029918
 8019830:	200093b4 	.word	0x200093b4

08019834 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b084      	sub	sp, #16
 8019838:	af00      	add	r7, sp, #0
 801983a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801983c:	2300      	movs	r3, #0
 801983e:	73fb      	strb	r3, [r7, #15]
 8019840:	e01f      	b.n	8019882 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8019842:	7bfa      	ldrb	r2, [r7, #15]
 8019844:	4912      	ldr	r1, [pc, #72]	; (8019890 <etharp_cleanup_netif+0x5c>)
 8019846:	4613      	mov	r3, r2
 8019848:	005b      	lsls	r3, r3, #1
 801984a:	4413      	add	r3, r2
 801984c:	00db      	lsls	r3, r3, #3
 801984e:	440b      	add	r3, r1
 8019850:	3314      	adds	r3, #20
 8019852:	781b      	ldrb	r3, [r3, #0]
 8019854:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8019856:	7bbb      	ldrb	r3, [r7, #14]
 8019858:	2b00      	cmp	r3, #0
 801985a:	d00f      	beq.n	801987c <etharp_cleanup_netif+0x48>
 801985c:	7bfa      	ldrb	r2, [r7, #15]
 801985e:	490c      	ldr	r1, [pc, #48]	; (8019890 <etharp_cleanup_netif+0x5c>)
 8019860:	4613      	mov	r3, r2
 8019862:	005b      	lsls	r3, r3, #1
 8019864:	4413      	add	r3, r2
 8019866:	00db      	lsls	r3, r3, #3
 8019868:	440b      	add	r3, r1
 801986a:	3308      	adds	r3, #8
 801986c:	681a      	ldr	r2, [r3, #0]
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	429a      	cmp	r2, r3
 8019872:	d103      	bne.n	801987c <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8019874:	7bfb      	ldrb	r3, [r7, #15]
 8019876:	4618      	mov	r0, r3
 8019878:	f7ff fd12 	bl	80192a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801987c:	7bfb      	ldrb	r3, [r7, #15]
 801987e:	3301      	adds	r3, #1
 8019880:	73fb      	strb	r3, [r7, #15]
 8019882:	7bfb      	ldrb	r3, [r7, #15]
 8019884:	2b09      	cmp	r3, #9
 8019886:	d9dc      	bls.n	8019842 <etharp_cleanup_netif+0xe>
    }
  }
}
 8019888:	bf00      	nop
 801988a:	3710      	adds	r7, #16
 801988c:	46bd      	mov	sp, r7
 801988e:	bd80      	pop	{r7, pc}
 8019890:	200093b4 	.word	0x200093b4

08019894 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019894:	b5b0      	push	{r4, r5, r7, lr}
 8019896:	b08a      	sub	sp, #40	; 0x28
 8019898:	af04      	add	r7, sp, #16
 801989a:	6078      	str	r0, [r7, #4]
 801989c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d107      	bne.n	80198b4 <etharp_input+0x20>
 80198a4:	4b3d      	ldr	r3, [pc, #244]	; (801999c <etharp_input+0x108>)
 80198a6:	f44f 7222 	mov.w	r2, #648	; 0x288
 80198aa:	493d      	ldr	r1, [pc, #244]	; (80199a0 <etharp_input+0x10c>)
 80198ac:	483d      	ldr	r0, [pc, #244]	; (80199a4 <etharp_input+0x110>)
 80198ae:	f00d fdbf 	bl	8027430 <iprintf>
 80198b2:	e06f      	b.n	8019994 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	685b      	ldr	r3, [r3, #4]
 80198b8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80198ba:	693b      	ldr	r3, [r7, #16]
 80198bc:	881b      	ldrh	r3, [r3, #0]
 80198be:	b29b      	uxth	r3, r3
 80198c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80198c4:	d10c      	bne.n	80198e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80198c6:	693b      	ldr	r3, [r7, #16]
 80198c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80198ca:	2b06      	cmp	r3, #6
 80198cc:	d108      	bne.n	80198e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80198ce:	693b      	ldr	r3, [r7, #16]
 80198d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80198d2:	2b04      	cmp	r3, #4
 80198d4:	d104      	bne.n	80198e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80198d6:	693b      	ldr	r3, [r7, #16]
 80198d8:	885b      	ldrh	r3, [r3, #2]
 80198da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80198dc:	2b08      	cmp	r3, #8
 80198de:	d003      	beq.n	80198e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80198e0:	6878      	ldr	r0, [r7, #4]
 80198e2:	f003 f8cb 	bl	801ca7c <pbuf_free>
    return;
 80198e6:	e055      	b.n	8019994 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80198e8:	693b      	ldr	r3, [r7, #16]
 80198ea:	330e      	adds	r3, #14
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80198f0:	693b      	ldr	r3, [r7, #16]
 80198f2:	3318      	adds	r3, #24
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80198f8:	683b      	ldr	r3, [r7, #0]
 80198fa:	3304      	adds	r3, #4
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d102      	bne.n	8019908 <etharp_input+0x74>
    for_us = 0;
 8019902:	2300      	movs	r3, #0
 8019904:	75fb      	strb	r3, [r7, #23]
 8019906:	e009      	b.n	801991c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019908:	68ba      	ldr	r2, [r7, #8]
 801990a:	683b      	ldr	r3, [r7, #0]
 801990c:	3304      	adds	r3, #4
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	429a      	cmp	r2, r3
 8019912:	bf0c      	ite	eq
 8019914:	2301      	moveq	r3, #1
 8019916:	2300      	movne	r3, #0
 8019918:	b2db      	uxtb	r3, r3
 801991a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801991c:	693b      	ldr	r3, [r7, #16]
 801991e:	f103 0208 	add.w	r2, r3, #8
 8019922:	7dfb      	ldrb	r3, [r7, #23]
 8019924:	2b00      	cmp	r3, #0
 8019926:	d001      	beq.n	801992c <etharp_input+0x98>
 8019928:	2301      	movs	r3, #1
 801992a:	e000      	b.n	801992e <etharp_input+0x9a>
 801992c:	2302      	movs	r3, #2
 801992e:	f107 010c 	add.w	r1, r7, #12
 8019932:	6838      	ldr	r0, [r7, #0]
 8019934:	f7ff fed8 	bl	80196e8 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019938:	693b      	ldr	r3, [r7, #16]
 801993a:	88db      	ldrh	r3, [r3, #6]
 801993c:	b29b      	uxth	r3, r3
 801993e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019942:	d003      	beq.n	801994c <etharp_input+0xb8>
 8019944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019948:	d01e      	beq.n	8019988 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 801994a:	e020      	b.n	801998e <etharp_input+0xfa>
    if (for_us) {
 801994c:	7dfb      	ldrb	r3, [r7, #23]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d01c      	beq.n	801998c <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019952:	683b      	ldr	r3, [r7, #0]
 8019954:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8019958:	693b      	ldr	r3, [r7, #16]
 801995a:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801995e:	683b      	ldr	r3, [r7, #0]
 8019960:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8019964:	683b      	ldr	r3, [r7, #0]
 8019966:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8019968:	693a      	ldr	r2, [r7, #16]
 801996a:	3208      	adds	r2, #8
      etharp_raw(netif,
 801996c:	2102      	movs	r1, #2
 801996e:	9103      	str	r1, [sp, #12]
 8019970:	f107 010c 	add.w	r1, r7, #12
 8019974:	9102      	str	r1, [sp, #8]
 8019976:	9201      	str	r2, [sp, #4]
 8019978:	9300      	str	r3, [sp, #0]
 801997a:	462b      	mov	r3, r5
 801997c:	4622      	mov	r2, r4
 801997e:	4601      	mov	r1, r0
 8019980:	6838      	ldr	r0, [r7, #0]
 8019982:	f000 fae3 	bl	8019f4c <etharp_raw>
    break;
 8019986:	e001      	b.n	801998c <etharp_input+0xf8>
    break;
 8019988:	bf00      	nop
 801998a:	e000      	b.n	801998e <etharp_input+0xfa>
    break;
 801998c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801998e:	6878      	ldr	r0, [r7, #4]
 8019990:	f003 f874 	bl	801ca7c <pbuf_free>
}
 8019994:	3718      	adds	r7, #24
 8019996:	46bd      	mov	sp, r7
 8019998:	bdb0      	pop	{r4, r5, r7, pc}
 801999a:	bf00      	nop
 801999c:	080298a0 	.word	0x080298a0
 80199a0:	080299f0 	.word	0x080299f0
 80199a4:	08029918 	.word	0x08029918

080199a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b086      	sub	sp, #24
 80199ac:	af02      	add	r7, sp, #8
 80199ae:	60f8      	str	r0, [r7, #12]
 80199b0:	60b9      	str	r1, [r7, #8]
 80199b2:	4613      	mov	r3, r2
 80199b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80199b6:	79fa      	ldrb	r2, [r7, #7]
 80199b8:	4944      	ldr	r1, [pc, #272]	; (8019acc <etharp_output_to_arp_index+0x124>)
 80199ba:	4613      	mov	r3, r2
 80199bc:	005b      	lsls	r3, r3, #1
 80199be:	4413      	add	r3, r2
 80199c0:	00db      	lsls	r3, r3, #3
 80199c2:	440b      	add	r3, r1
 80199c4:	3314      	adds	r3, #20
 80199c6:	781b      	ldrb	r3, [r3, #0]
 80199c8:	2b01      	cmp	r3, #1
 80199ca:	d806      	bhi.n	80199da <etharp_output_to_arp_index+0x32>
 80199cc:	4b40      	ldr	r3, [pc, #256]	; (8019ad0 <etharp_output_to_arp_index+0x128>)
 80199ce:	f240 22ed 	movw	r2, #749	; 0x2ed
 80199d2:	4940      	ldr	r1, [pc, #256]	; (8019ad4 <etharp_output_to_arp_index+0x12c>)
 80199d4:	4840      	ldr	r0, [pc, #256]	; (8019ad8 <etharp_output_to_arp_index+0x130>)
 80199d6:	f00d fd2b 	bl	8027430 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80199da:	79fa      	ldrb	r2, [r7, #7]
 80199dc:	493b      	ldr	r1, [pc, #236]	; (8019acc <etharp_output_to_arp_index+0x124>)
 80199de:	4613      	mov	r3, r2
 80199e0:	005b      	lsls	r3, r3, #1
 80199e2:	4413      	add	r3, r2
 80199e4:	00db      	lsls	r3, r3, #3
 80199e6:	440b      	add	r3, r1
 80199e8:	3314      	adds	r3, #20
 80199ea:	781b      	ldrb	r3, [r3, #0]
 80199ec:	2b02      	cmp	r3, #2
 80199ee:	d153      	bne.n	8019a98 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80199f0:	79fa      	ldrb	r2, [r7, #7]
 80199f2:	4936      	ldr	r1, [pc, #216]	; (8019acc <etharp_output_to_arp_index+0x124>)
 80199f4:	4613      	mov	r3, r2
 80199f6:	005b      	lsls	r3, r3, #1
 80199f8:	4413      	add	r3, r2
 80199fa:	00db      	lsls	r3, r3, #3
 80199fc:	440b      	add	r3, r1
 80199fe:	3312      	adds	r3, #18
 8019a00:	881b      	ldrh	r3, [r3, #0]
 8019a02:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8019a06:	d919      	bls.n	8019a3c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019a08:	79fa      	ldrb	r2, [r7, #7]
 8019a0a:	4613      	mov	r3, r2
 8019a0c:	005b      	lsls	r3, r3, #1
 8019a0e:	4413      	add	r3, r2
 8019a10:	00db      	lsls	r3, r3, #3
 8019a12:	4a2e      	ldr	r2, [pc, #184]	; (8019acc <etharp_output_to_arp_index+0x124>)
 8019a14:	4413      	add	r3, r2
 8019a16:	3304      	adds	r3, #4
 8019a18:	4619      	mov	r1, r3
 8019a1a:	68f8      	ldr	r0, [r7, #12]
 8019a1c:	f000 fb44 	bl	801a0a8 <etharp_request>
 8019a20:	4603      	mov	r3, r0
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d138      	bne.n	8019a98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019a26:	79fa      	ldrb	r2, [r7, #7]
 8019a28:	4928      	ldr	r1, [pc, #160]	; (8019acc <etharp_output_to_arp_index+0x124>)
 8019a2a:	4613      	mov	r3, r2
 8019a2c:	005b      	lsls	r3, r3, #1
 8019a2e:	4413      	add	r3, r2
 8019a30:	00db      	lsls	r3, r3, #3
 8019a32:	440b      	add	r3, r1
 8019a34:	3314      	adds	r3, #20
 8019a36:	2203      	movs	r2, #3
 8019a38:	701a      	strb	r2, [r3, #0]
 8019a3a:	e02d      	b.n	8019a98 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019a3c:	79fa      	ldrb	r2, [r7, #7]
 8019a3e:	4923      	ldr	r1, [pc, #140]	; (8019acc <etharp_output_to_arp_index+0x124>)
 8019a40:	4613      	mov	r3, r2
 8019a42:	005b      	lsls	r3, r3, #1
 8019a44:	4413      	add	r3, r2
 8019a46:	00db      	lsls	r3, r3, #3
 8019a48:	440b      	add	r3, r1
 8019a4a:	3312      	adds	r3, #18
 8019a4c:	881b      	ldrh	r3, [r3, #0]
 8019a4e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8019a52:	d321      	bcc.n	8019a98 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019a54:	79fa      	ldrb	r2, [r7, #7]
 8019a56:	4613      	mov	r3, r2
 8019a58:	005b      	lsls	r3, r3, #1
 8019a5a:	4413      	add	r3, r2
 8019a5c:	00db      	lsls	r3, r3, #3
 8019a5e:	4a1b      	ldr	r2, [pc, #108]	; (8019acc <etharp_output_to_arp_index+0x124>)
 8019a60:	4413      	add	r3, r2
 8019a62:	1d19      	adds	r1, r3, #4
 8019a64:	79fa      	ldrb	r2, [r7, #7]
 8019a66:	4613      	mov	r3, r2
 8019a68:	005b      	lsls	r3, r3, #1
 8019a6a:	4413      	add	r3, r2
 8019a6c:	00db      	lsls	r3, r3, #3
 8019a6e:	3308      	adds	r3, #8
 8019a70:	4a16      	ldr	r2, [pc, #88]	; (8019acc <etharp_output_to_arp_index+0x124>)
 8019a72:	4413      	add	r3, r2
 8019a74:	3304      	adds	r3, #4
 8019a76:	461a      	mov	r2, r3
 8019a78:	68f8      	ldr	r0, [r7, #12]
 8019a7a:	f000 faf3 	bl	801a064 <etharp_request_dst>
 8019a7e:	4603      	mov	r3, r0
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d109      	bne.n	8019a98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019a84:	79fa      	ldrb	r2, [r7, #7]
 8019a86:	4911      	ldr	r1, [pc, #68]	; (8019acc <etharp_output_to_arp_index+0x124>)
 8019a88:	4613      	mov	r3, r2
 8019a8a:	005b      	lsls	r3, r3, #1
 8019a8c:	4413      	add	r3, r2
 8019a8e:	00db      	lsls	r3, r3, #3
 8019a90:	440b      	add	r3, r1
 8019a92:	3314      	adds	r3, #20
 8019a94:	2203      	movs	r2, #3
 8019a96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8019a9e:	79fa      	ldrb	r2, [r7, #7]
 8019aa0:	4613      	mov	r3, r2
 8019aa2:	005b      	lsls	r3, r3, #1
 8019aa4:	4413      	add	r3, r2
 8019aa6:	00db      	lsls	r3, r3, #3
 8019aa8:	3308      	adds	r3, #8
 8019aaa:	4a08      	ldr	r2, [pc, #32]	; (8019acc <etharp_output_to_arp_index+0x124>)
 8019aac:	4413      	add	r3, r2
 8019aae:	1d1a      	adds	r2, r3, #4
 8019ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019ab4:	9300      	str	r3, [sp, #0]
 8019ab6:	4613      	mov	r3, r2
 8019ab8:	460a      	mov	r2, r1
 8019aba:	68b9      	ldr	r1, [r7, #8]
 8019abc:	68f8      	ldr	r0, [r7, #12]
 8019abe:	f008 fe99 	bl	80227f4 <ethernet_output>
 8019ac2:	4603      	mov	r3, r0
}
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	3710      	adds	r7, #16
 8019ac8:	46bd      	mov	sp, r7
 8019aca:	bd80      	pop	{r7, pc}
 8019acc:	200093b4 	.word	0x200093b4
 8019ad0:	080298a0 	.word	0x080298a0
 8019ad4:	08029a10 	.word	0x08029a10
 8019ad8:	08029918 	.word	0x08029918

08019adc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019adc:	b580      	push	{r7, lr}
 8019ade:	b08a      	sub	sp, #40	; 0x28
 8019ae0:	af02      	add	r7, sp, #8
 8019ae2:	60f8      	str	r0, [r7, #12]
 8019ae4:	60b9      	str	r1, [r7, #8]
 8019ae6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d106      	bne.n	8019b00 <etharp_output+0x24>
 8019af2:	4b69      	ldr	r3, [pc, #420]	; (8019c98 <etharp_output+0x1bc>)
 8019af4:	f240 321b 	movw	r2, #795	; 0x31b
 8019af8:	4968      	ldr	r1, [pc, #416]	; (8019c9c <etharp_output+0x1c0>)
 8019afa:	4869      	ldr	r0, [pc, #420]	; (8019ca0 <etharp_output+0x1c4>)
 8019afc:	f00d fc98 	bl	8027430 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019b00:	68bb      	ldr	r3, [r7, #8]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d106      	bne.n	8019b14 <etharp_output+0x38>
 8019b06:	4b64      	ldr	r3, [pc, #400]	; (8019c98 <etharp_output+0x1bc>)
 8019b08:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8019b0c:	4965      	ldr	r1, [pc, #404]	; (8019ca4 <etharp_output+0x1c8>)
 8019b0e:	4864      	ldr	r0, [pc, #400]	; (8019ca0 <etharp_output+0x1c4>)
 8019b10:	f00d fc8e 	bl	8027430 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d106      	bne.n	8019b28 <etharp_output+0x4c>
 8019b1a:	4b5f      	ldr	r3, [pc, #380]	; (8019c98 <etharp_output+0x1bc>)
 8019b1c:	f240 321d 	movw	r2, #797	; 0x31d
 8019b20:	4961      	ldr	r1, [pc, #388]	; (8019ca8 <etharp_output+0x1cc>)
 8019b22:	485f      	ldr	r0, [pc, #380]	; (8019ca0 <etharp_output+0x1c4>)
 8019b24:	f00d fc84 	bl	8027430 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	68f9      	ldr	r1, [r7, #12]
 8019b2e:	4618      	mov	r0, r3
 8019b30:	f000 fec8 	bl	801a8c4 <ip4_addr_isbroadcast_u32>
 8019b34:	4603      	mov	r3, r0
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d002      	beq.n	8019b40 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019b3a:	4b5c      	ldr	r3, [pc, #368]	; (8019cac <etharp_output+0x1d0>)
 8019b3c:	61fb      	str	r3, [r7, #28]
 8019b3e:	e09b      	b.n	8019c78 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019b48:	2be0      	cmp	r3, #224	; 0xe0
 8019b4a:	d118      	bne.n	8019b7e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019b4c:	2301      	movs	r3, #1
 8019b4e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019b50:	2300      	movs	r3, #0
 8019b52:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019b54:	235e      	movs	r3, #94	; 0x5e
 8019b56:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	3301      	adds	r3, #1
 8019b5c:	781b      	ldrb	r3, [r3, #0]
 8019b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019b62:	b2db      	uxtb	r3, r3
 8019b64:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	3302      	adds	r3, #2
 8019b6a:	781b      	ldrb	r3, [r3, #0]
 8019b6c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	3303      	adds	r3, #3
 8019b72:	781b      	ldrb	r3, [r3, #0]
 8019b74:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8019b76:	f107 0310 	add.w	r3, r7, #16
 8019b7a:	61fb      	str	r3, [r7, #28]
 8019b7c:	e07c      	b.n	8019c78 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	681a      	ldr	r2, [r3, #0]
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	3304      	adds	r3, #4
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	405a      	eors	r2, r3
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	3308      	adds	r3, #8
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	4013      	ands	r3, r2
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d012      	beq.n	8019bbc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019b9c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019ba0:	4293      	cmp	r3, r2
 8019ba2:	d00b      	beq.n	8019bbc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	330c      	adds	r3, #12
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d003      	beq.n	8019bb6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	330c      	adds	r3, #12
 8019bb2:	61bb      	str	r3, [r7, #24]
 8019bb4:	e002      	b.n	8019bbc <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019bb6:	f06f 0303 	mvn.w	r3, #3
 8019bba:	e069      	b.n	8019c90 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019bbc:	4b3c      	ldr	r3, [pc, #240]	; (8019cb0 <etharp_output+0x1d4>)
 8019bbe:	781b      	ldrb	r3, [r3, #0]
 8019bc0:	4619      	mov	r1, r3
 8019bc2:	4a3c      	ldr	r2, [pc, #240]	; (8019cb4 <etharp_output+0x1d8>)
 8019bc4:	460b      	mov	r3, r1
 8019bc6:	005b      	lsls	r3, r3, #1
 8019bc8:	440b      	add	r3, r1
 8019bca:	00db      	lsls	r3, r3, #3
 8019bcc:	4413      	add	r3, r2
 8019bce:	3314      	adds	r3, #20
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	2b01      	cmp	r3, #1
 8019bd4:	d917      	bls.n	8019c06 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019bd6:	69bb      	ldr	r3, [r7, #24]
 8019bd8:	681a      	ldr	r2, [r3, #0]
 8019bda:	4b35      	ldr	r3, [pc, #212]	; (8019cb0 <etharp_output+0x1d4>)
 8019bdc:	781b      	ldrb	r3, [r3, #0]
 8019bde:	4618      	mov	r0, r3
 8019be0:	4934      	ldr	r1, [pc, #208]	; (8019cb4 <etharp_output+0x1d8>)
 8019be2:	4603      	mov	r3, r0
 8019be4:	005b      	lsls	r3, r3, #1
 8019be6:	4403      	add	r3, r0
 8019be8:	00db      	lsls	r3, r3, #3
 8019bea:	440b      	add	r3, r1
 8019bec:	3304      	adds	r3, #4
 8019bee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019bf0:	429a      	cmp	r2, r3
 8019bf2:	d108      	bne.n	8019c06 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019bf4:	4b2e      	ldr	r3, [pc, #184]	; (8019cb0 <etharp_output+0x1d4>)
 8019bf6:	781b      	ldrb	r3, [r3, #0]
 8019bf8:	461a      	mov	r2, r3
 8019bfa:	68b9      	ldr	r1, [r7, #8]
 8019bfc:	68f8      	ldr	r0, [r7, #12]
 8019bfe:	f7ff fed3 	bl	80199a8 <etharp_output_to_arp_index>
 8019c02:	4603      	mov	r3, r0
 8019c04:	e044      	b.n	8019c90 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019c06:	2300      	movs	r3, #0
 8019c08:	75fb      	strb	r3, [r7, #23]
 8019c0a:	e02a      	b.n	8019c62 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019c0c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019c10:	4928      	ldr	r1, [pc, #160]	; (8019cb4 <etharp_output+0x1d8>)
 8019c12:	4613      	mov	r3, r2
 8019c14:	005b      	lsls	r3, r3, #1
 8019c16:	4413      	add	r3, r2
 8019c18:	00db      	lsls	r3, r3, #3
 8019c1a:	440b      	add	r3, r1
 8019c1c:	3314      	adds	r3, #20
 8019c1e:	781b      	ldrb	r3, [r3, #0]
 8019c20:	2b01      	cmp	r3, #1
 8019c22:	d918      	bls.n	8019c56 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019c24:	69bb      	ldr	r3, [r7, #24]
 8019c26:	6819      	ldr	r1, [r3, #0]
 8019c28:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019c2c:	4821      	ldr	r0, [pc, #132]	; (8019cb4 <etharp_output+0x1d8>)
 8019c2e:	4613      	mov	r3, r2
 8019c30:	005b      	lsls	r3, r3, #1
 8019c32:	4413      	add	r3, r2
 8019c34:	00db      	lsls	r3, r3, #3
 8019c36:	4403      	add	r3, r0
 8019c38:	3304      	adds	r3, #4
 8019c3a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019c3c:	4299      	cmp	r1, r3
 8019c3e:	d10a      	bne.n	8019c56 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8019c40:	7dfa      	ldrb	r2, [r7, #23]
 8019c42:	4b1b      	ldr	r3, [pc, #108]	; (8019cb0 <etharp_output+0x1d4>)
 8019c44:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019c46:	7dfb      	ldrb	r3, [r7, #23]
 8019c48:	461a      	mov	r2, r3
 8019c4a:	68b9      	ldr	r1, [r7, #8]
 8019c4c:	68f8      	ldr	r0, [r7, #12]
 8019c4e:	f7ff feab 	bl	80199a8 <etharp_output_to_arp_index>
 8019c52:	4603      	mov	r3, r0
 8019c54:	e01c      	b.n	8019c90 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019c5a:	b2db      	uxtb	r3, r3
 8019c5c:	3301      	adds	r3, #1
 8019c5e:	b2db      	uxtb	r3, r3
 8019c60:	75fb      	strb	r3, [r7, #23]
 8019c62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019c66:	2b09      	cmp	r3, #9
 8019c68:	ddd0      	ble.n	8019c0c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019c6a:	68ba      	ldr	r2, [r7, #8]
 8019c6c:	69b9      	ldr	r1, [r7, #24]
 8019c6e:	68f8      	ldr	r0, [r7, #12]
 8019c70:	f000 f822 	bl	8019cb8 <etharp_query>
 8019c74:	4603      	mov	r3, r0
 8019c76:	e00b      	b.n	8019c90 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8019c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019c82:	9300      	str	r3, [sp, #0]
 8019c84:	69fb      	ldr	r3, [r7, #28]
 8019c86:	68b9      	ldr	r1, [r7, #8]
 8019c88:	68f8      	ldr	r0, [r7, #12]
 8019c8a:	f008 fdb3 	bl	80227f4 <ethernet_output>
 8019c8e:	4603      	mov	r3, r0
}
 8019c90:	4618      	mov	r0, r3
 8019c92:	3720      	adds	r7, #32
 8019c94:	46bd      	mov	sp, r7
 8019c96:	bd80      	pop	{r7, pc}
 8019c98:	080298a0 	.word	0x080298a0
 8019c9c:	080299f0 	.word	0x080299f0
 8019ca0:	08029918 	.word	0x08029918
 8019ca4:	08029a40 	.word	0x08029a40
 8019ca8:	080299e0 	.word	0x080299e0
 8019cac:	0802e67c 	.word	0x0802e67c
 8019cb0:	200094a4 	.word	0x200094a4
 8019cb4:	200093b4 	.word	0x200093b4

08019cb8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019cb8:	b580      	push	{r7, lr}
 8019cba:	b08c      	sub	sp, #48	; 0x30
 8019cbc:	af02      	add	r7, sp, #8
 8019cbe:	60f8      	str	r0, [r7, #12]
 8019cc0:	60b9      	str	r1, [r7, #8]
 8019cc2:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	3325      	adds	r3, #37	; 0x25
 8019cc8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019cca:	23ff      	movs	r3, #255	; 0xff
 8019ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019cd0:	2300      	movs	r3, #0
 8019cd2:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019cd4:	68bb      	ldr	r3, [r7, #8]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	68f9      	ldr	r1, [r7, #12]
 8019cda:	4618      	mov	r0, r3
 8019cdc:	f000 fdf2 	bl	801a8c4 <ip4_addr_isbroadcast_u32>
 8019ce0:	4603      	mov	r3, r0
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d10c      	bne.n	8019d00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019ce6:	68bb      	ldr	r3, [r7, #8]
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019cee:	2be0      	cmp	r3, #224	; 0xe0
 8019cf0:	d006      	beq.n	8019d00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019cf2:	68bb      	ldr	r3, [r7, #8]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d003      	beq.n	8019d00 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019cf8:	68bb      	ldr	r3, [r7, #8]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d102      	bne.n	8019d06 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019d00:	f06f 030f 	mvn.w	r3, #15
 8019d04:	e10f      	b.n	8019f26 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019d06:	68fa      	ldr	r2, [r7, #12]
 8019d08:	2101      	movs	r1, #1
 8019d0a:	68b8      	ldr	r0, [r7, #8]
 8019d0c:	f7ff fba2 	bl	8019454 <etharp_find_entry>
 8019d10:	4603      	mov	r3, r0
 8019d12:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8019d14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	da02      	bge.n	8019d22 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8019d1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019d20:	e101      	b.n	8019f26 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019d22:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019d26:	4982      	ldr	r1, [pc, #520]	; (8019f30 <etharp_query+0x278>)
 8019d28:	4613      	mov	r3, r2
 8019d2a:	005b      	lsls	r3, r3, #1
 8019d2c:	4413      	add	r3, r2
 8019d2e:	00db      	lsls	r3, r3, #3
 8019d30:	440b      	add	r3, r1
 8019d32:	3314      	adds	r3, #20
 8019d34:	781b      	ldrb	r3, [r3, #0]
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d117      	bne.n	8019d6a <etharp_query+0xb2>
    is_new_entry = 1;
 8019d3a:	2301      	movs	r3, #1
 8019d3c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019d3e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019d42:	497b      	ldr	r1, [pc, #492]	; (8019f30 <etharp_query+0x278>)
 8019d44:	4613      	mov	r3, r2
 8019d46:	005b      	lsls	r3, r3, #1
 8019d48:	4413      	add	r3, r2
 8019d4a:	00db      	lsls	r3, r3, #3
 8019d4c:	440b      	add	r3, r1
 8019d4e:	3314      	adds	r3, #20
 8019d50:	2201      	movs	r2, #1
 8019d52:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019d54:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019d58:	4975      	ldr	r1, [pc, #468]	; (8019f30 <etharp_query+0x278>)
 8019d5a:	4613      	mov	r3, r2
 8019d5c:	005b      	lsls	r3, r3, #1
 8019d5e:	4413      	add	r3, r2
 8019d60:	00db      	lsls	r3, r3, #3
 8019d62:	440b      	add	r3, r1
 8019d64:	3308      	adds	r3, #8
 8019d66:	68fa      	ldr	r2, [r7, #12]
 8019d68:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019d6a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019d6e:	4970      	ldr	r1, [pc, #448]	; (8019f30 <etharp_query+0x278>)
 8019d70:	4613      	mov	r3, r2
 8019d72:	005b      	lsls	r3, r3, #1
 8019d74:	4413      	add	r3, r2
 8019d76:	00db      	lsls	r3, r3, #3
 8019d78:	440b      	add	r3, r1
 8019d7a:	3314      	adds	r3, #20
 8019d7c:	781b      	ldrb	r3, [r3, #0]
 8019d7e:	2b01      	cmp	r3, #1
 8019d80:	d012      	beq.n	8019da8 <etharp_query+0xf0>
 8019d82:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019d86:	496a      	ldr	r1, [pc, #424]	; (8019f30 <etharp_query+0x278>)
 8019d88:	4613      	mov	r3, r2
 8019d8a:	005b      	lsls	r3, r3, #1
 8019d8c:	4413      	add	r3, r2
 8019d8e:	00db      	lsls	r3, r3, #3
 8019d90:	440b      	add	r3, r1
 8019d92:	3314      	adds	r3, #20
 8019d94:	781b      	ldrb	r3, [r3, #0]
 8019d96:	2b01      	cmp	r3, #1
 8019d98:	d806      	bhi.n	8019da8 <etharp_query+0xf0>
 8019d9a:	4b66      	ldr	r3, [pc, #408]	; (8019f34 <etharp_query+0x27c>)
 8019d9c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8019da0:	4965      	ldr	r1, [pc, #404]	; (8019f38 <etharp_query+0x280>)
 8019da2:	4866      	ldr	r0, [pc, #408]	; (8019f3c <etharp_query+0x284>)
 8019da4:	f00d fb44 	bl	8027430 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019da8:	6a3b      	ldr	r3, [r7, #32]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d102      	bne.n	8019db4 <etharp_query+0xfc>
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d10c      	bne.n	8019dce <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019db4:	68b9      	ldr	r1, [r7, #8]
 8019db6:	68f8      	ldr	r0, [r7, #12]
 8019db8:	f000 f976 	bl	801a0a8 <etharp_request>
 8019dbc:	4603      	mov	r3, r0
 8019dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d102      	bne.n	8019dce <etharp_query+0x116>
      return result;
 8019dc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019dcc:	e0ab      	b.n	8019f26 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d106      	bne.n	8019de2 <etharp_query+0x12a>
 8019dd4:	4b57      	ldr	r3, [pc, #348]	; (8019f34 <etharp_query+0x27c>)
 8019dd6:	f240 32db 	movw	r2, #987	; 0x3db
 8019dda:	4959      	ldr	r1, [pc, #356]	; (8019f40 <etharp_query+0x288>)
 8019ddc:	4857      	ldr	r0, [pc, #348]	; (8019f3c <etharp_query+0x284>)
 8019dde:	f00d fb27 	bl	8027430 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019de2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019de6:	4952      	ldr	r1, [pc, #328]	; (8019f30 <etharp_query+0x278>)
 8019de8:	4613      	mov	r3, r2
 8019dea:	005b      	lsls	r3, r3, #1
 8019dec:	4413      	add	r3, r2
 8019dee:	00db      	lsls	r3, r3, #3
 8019df0:	440b      	add	r3, r1
 8019df2:	3314      	adds	r3, #20
 8019df4:	781b      	ldrb	r3, [r3, #0]
 8019df6:	2b01      	cmp	r3, #1
 8019df8:	d919      	bls.n	8019e2e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8019dfa:	7cfa      	ldrb	r2, [r7, #19]
 8019dfc:	4b51      	ldr	r3, [pc, #324]	; (8019f44 <etharp_query+0x28c>)
 8019dfe:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019e00:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019e04:	4613      	mov	r3, r2
 8019e06:	005b      	lsls	r3, r3, #1
 8019e08:	4413      	add	r3, r2
 8019e0a:	00db      	lsls	r3, r3, #3
 8019e0c:	3308      	adds	r3, #8
 8019e0e:	4a48      	ldr	r2, [pc, #288]	; (8019f30 <etharp_query+0x278>)
 8019e10:	4413      	add	r3, r2
 8019e12:	1d1a      	adds	r2, r3, #4
 8019e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019e18:	9300      	str	r3, [sp, #0]
 8019e1a:	4613      	mov	r3, r2
 8019e1c:	697a      	ldr	r2, [r7, #20]
 8019e1e:	6879      	ldr	r1, [r7, #4]
 8019e20:	68f8      	ldr	r0, [r7, #12]
 8019e22:	f008 fce7 	bl	80227f4 <ethernet_output>
 8019e26:	4603      	mov	r3, r0
 8019e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019e2c:	e079      	b.n	8019f22 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019e2e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019e32:	493f      	ldr	r1, [pc, #252]	; (8019f30 <etharp_query+0x278>)
 8019e34:	4613      	mov	r3, r2
 8019e36:	005b      	lsls	r3, r3, #1
 8019e38:	4413      	add	r3, r2
 8019e3a:	00db      	lsls	r3, r3, #3
 8019e3c:	440b      	add	r3, r1
 8019e3e:	3314      	adds	r3, #20
 8019e40:	781b      	ldrb	r3, [r3, #0]
 8019e42:	2b01      	cmp	r3, #1
 8019e44:	d16d      	bne.n	8019f22 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019e46:	2300      	movs	r3, #0
 8019e48:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019e4e:	e01a      	b.n	8019e86 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019e50:	69fb      	ldr	r3, [r7, #28]
 8019e52:	895a      	ldrh	r2, [r3, #10]
 8019e54:	69fb      	ldr	r3, [r7, #28]
 8019e56:	891b      	ldrh	r3, [r3, #8]
 8019e58:	429a      	cmp	r2, r3
 8019e5a:	d10a      	bne.n	8019e72 <etharp_query+0x1ba>
 8019e5c:	69fb      	ldr	r3, [r7, #28]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d006      	beq.n	8019e72 <etharp_query+0x1ba>
 8019e64:	4b33      	ldr	r3, [pc, #204]	; (8019f34 <etharp_query+0x27c>)
 8019e66:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8019e6a:	4937      	ldr	r1, [pc, #220]	; (8019f48 <etharp_query+0x290>)
 8019e6c:	4833      	ldr	r0, [pc, #204]	; (8019f3c <etharp_query+0x284>)
 8019e6e:	f00d fadf 	bl	8027430 <iprintf>
      if (p->type != PBUF_ROM) {
 8019e72:	69fb      	ldr	r3, [r7, #28]
 8019e74:	7b1b      	ldrb	r3, [r3, #12]
 8019e76:	2b01      	cmp	r3, #1
 8019e78:	d002      	beq.n	8019e80 <etharp_query+0x1c8>
        copy_needed = 1;
 8019e7a:	2301      	movs	r3, #1
 8019e7c:	61bb      	str	r3, [r7, #24]
        break;
 8019e7e:	e005      	b.n	8019e8c <etharp_query+0x1d4>
      }
      p = p->next;
 8019e80:	69fb      	ldr	r3, [r7, #28]
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019e86:	69fb      	ldr	r3, [r7, #28]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d1e1      	bne.n	8019e50 <etharp_query+0x198>
    }
    if (copy_needed) {
 8019e8c:	69bb      	ldr	r3, [r7, #24]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d017      	beq.n	8019ec2 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8019e92:	69fb      	ldr	r3, [r7, #28]
 8019e94:	891b      	ldrh	r3, [r3, #8]
 8019e96:	2200      	movs	r2, #0
 8019e98:	4619      	mov	r1, r3
 8019e9a:	2002      	movs	r0, #2
 8019e9c:	f002 fa7c 	bl	801c398 <pbuf_alloc>
 8019ea0:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8019ea2:	69fb      	ldr	r3, [r7, #28]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d011      	beq.n	8019ecc <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8019ea8:	6879      	ldr	r1, [r7, #4]
 8019eaa:	69f8      	ldr	r0, [r7, #28]
 8019eac:	f002 ff16 	bl	801ccdc <pbuf_copy>
 8019eb0:	4603      	mov	r3, r0
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d00a      	beq.n	8019ecc <etharp_query+0x214>
          pbuf_free(p);
 8019eb6:	69f8      	ldr	r0, [r7, #28]
 8019eb8:	f002 fde0 	bl	801ca7c <pbuf_free>
          p = NULL;
 8019ebc:	2300      	movs	r3, #0
 8019ebe:	61fb      	str	r3, [r7, #28]
 8019ec0:	e004      	b.n	8019ecc <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019ec6:	69f8      	ldr	r0, [r7, #28]
 8019ec8:	f002 fe8a 	bl	801cbe0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019ecc:	69fb      	ldr	r3, [r7, #28]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d024      	beq.n	8019f1c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019ed2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019ed6:	4916      	ldr	r1, [pc, #88]	; (8019f30 <etharp_query+0x278>)
 8019ed8:	4613      	mov	r3, r2
 8019eda:	005b      	lsls	r3, r3, #1
 8019edc:	4413      	add	r3, r2
 8019ede:	00db      	lsls	r3, r3, #3
 8019ee0:	440b      	add	r3, r1
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d00b      	beq.n	8019f00 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8019ee8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019eec:	4910      	ldr	r1, [pc, #64]	; (8019f30 <etharp_query+0x278>)
 8019eee:	4613      	mov	r3, r2
 8019ef0:	005b      	lsls	r3, r3, #1
 8019ef2:	4413      	add	r3, r2
 8019ef4:	00db      	lsls	r3, r3, #3
 8019ef6:	440b      	add	r3, r1
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	4618      	mov	r0, r3
 8019efc:	f002 fdbe 	bl	801ca7c <pbuf_free>
      }
      arp_table[i].q = p;
 8019f00:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019f04:	490a      	ldr	r1, [pc, #40]	; (8019f30 <etharp_query+0x278>)
 8019f06:	4613      	mov	r3, r2
 8019f08:	005b      	lsls	r3, r3, #1
 8019f0a:	4413      	add	r3, r2
 8019f0c:	00db      	lsls	r3, r3, #3
 8019f0e:	440b      	add	r3, r1
 8019f10:	69fa      	ldr	r2, [r7, #28]
 8019f12:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019f14:	2300      	movs	r3, #0
 8019f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019f1a:	e002      	b.n	8019f22 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019f1c:	23ff      	movs	r3, #255	; 0xff
 8019f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019f22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019f26:	4618      	mov	r0, r3
 8019f28:	3728      	adds	r7, #40	; 0x28
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	bd80      	pop	{r7, pc}
 8019f2e:	bf00      	nop
 8019f30:	200093b4 	.word	0x200093b4
 8019f34:	080298a0 	.word	0x080298a0
 8019f38:	08029a4c 	.word	0x08029a4c
 8019f3c:	08029918 	.word	0x08029918
 8019f40:	08029a40 	.word	0x08029a40
 8019f44:	200094a4 	.word	0x200094a4
 8019f48:	08029a74 	.word	0x08029a74

08019f4c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019f4c:	b580      	push	{r7, lr}
 8019f4e:	b08a      	sub	sp, #40	; 0x28
 8019f50:	af02      	add	r7, sp, #8
 8019f52:	60f8      	str	r0, [r7, #12]
 8019f54:	60b9      	str	r1, [r7, #8]
 8019f56:	607a      	str	r2, [r7, #4]
 8019f58:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d106      	bne.n	8019f72 <etharp_raw+0x26>
 8019f64:	4b3a      	ldr	r3, [pc, #232]	; (801a050 <etharp_raw+0x104>)
 8019f66:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8019f6a:	493a      	ldr	r1, [pc, #232]	; (801a054 <etharp_raw+0x108>)
 8019f6c:	483a      	ldr	r0, [pc, #232]	; (801a058 <etharp_raw+0x10c>)
 8019f6e:	f00d fa5f 	bl	8027430 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019f72:	2200      	movs	r2, #0
 8019f74:	211c      	movs	r1, #28
 8019f76:	2002      	movs	r0, #2
 8019f78:	f002 fa0e 	bl	801c398 <pbuf_alloc>
 8019f7c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019f7e:	69bb      	ldr	r3, [r7, #24]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d102      	bne.n	8019f8a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019f84:	f04f 33ff 	mov.w	r3, #4294967295
 8019f88:	e05d      	b.n	801a046 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019f8a:	69bb      	ldr	r3, [r7, #24]
 8019f8c:	895b      	ldrh	r3, [r3, #10]
 8019f8e:	2b1b      	cmp	r3, #27
 8019f90:	d806      	bhi.n	8019fa0 <etharp_raw+0x54>
 8019f92:	4b2f      	ldr	r3, [pc, #188]	; (801a050 <etharp_raw+0x104>)
 8019f94:	f240 4264 	movw	r2, #1124	; 0x464
 8019f98:	4930      	ldr	r1, [pc, #192]	; (801a05c <etharp_raw+0x110>)
 8019f9a:	482f      	ldr	r0, [pc, #188]	; (801a058 <etharp_raw+0x10c>)
 8019f9c:	f00d fa48 	bl	8027430 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019fa0:	69bb      	ldr	r3, [r7, #24]
 8019fa2:	685b      	ldr	r3, [r3, #4]
 8019fa4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019fa6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f7ff f93d 	bl	8019228 <lwip_htons>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	461a      	mov	r2, r3
 8019fb2:	697b      	ldr	r3, [r7, #20]
 8019fb4:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019fbc:	2b06      	cmp	r3, #6
 8019fbe:	d006      	beq.n	8019fce <etharp_raw+0x82>
 8019fc0:	4b23      	ldr	r3, [pc, #140]	; (801a050 <etharp_raw+0x104>)
 8019fc2:	f240 426b 	movw	r2, #1131	; 0x46b
 8019fc6:	4926      	ldr	r1, [pc, #152]	; (801a060 <etharp_raw+0x114>)
 8019fc8:	4823      	ldr	r0, [pc, #140]	; (801a058 <etharp_raw+0x10c>)
 8019fca:	f00d fa31 	bl	8027430 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8019fce:	697b      	ldr	r3, [r7, #20]
 8019fd0:	3308      	adds	r3, #8
 8019fd2:	2206      	movs	r2, #6
 8019fd4:	6839      	ldr	r1, [r7, #0]
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f00e fa49 	bl	802846e <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8019fdc:	697b      	ldr	r3, [r7, #20]
 8019fde:	3312      	adds	r3, #18
 8019fe0:	2206      	movs	r2, #6
 8019fe2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	f00e fa42 	bl	802846e <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8019fea:	697b      	ldr	r3, [r7, #20]
 8019fec:	330e      	adds	r3, #14
 8019fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ff0:	6812      	ldr	r2, [r2, #0]
 8019ff2:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8019ff4:	697b      	ldr	r3, [r7, #20]
 8019ff6:	3318      	adds	r3, #24
 8019ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019ffa:	6812      	ldr	r2, [r2, #0]
 8019ffc:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8019ffe:	697b      	ldr	r3, [r7, #20]
 801a000:	2200      	movs	r2, #0
 801a002:	701a      	strb	r2, [r3, #0]
 801a004:	2200      	movs	r2, #0
 801a006:	f042 0201 	orr.w	r2, r2, #1
 801a00a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a00c:	697b      	ldr	r3, [r7, #20]
 801a00e:	2200      	movs	r2, #0
 801a010:	f042 0208 	orr.w	r2, r2, #8
 801a014:	709a      	strb	r2, [r3, #2]
 801a016:	2200      	movs	r2, #0
 801a018:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a01a:	697b      	ldr	r3, [r7, #20]
 801a01c:	2206      	movs	r2, #6
 801a01e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a020:	697b      	ldr	r3, [r7, #20]
 801a022:	2204      	movs	r2, #4
 801a024:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a026:	f640 0306 	movw	r3, #2054	; 0x806
 801a02a:	9300      	str	r3, [sp, #0]
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	68ba      	ldr	r2, [r7, #8]
 801a030:	69b9      	ldr	r1, [r7, #24]
 801a032:	68f8      	ldr	r0, [r7, #12]
 801a034:	f008 fbde 	bl	80227f4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a038:	69b8      	ldr	r0, [r7, #24]
 801a03a:	f002 fd1f 	bl	801ca7c <pbuf_free>
  p = NULL;
 801a03e:	2300      	movs	r3, #0
 801a040:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a042:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a046:	4618      	mov	r0, r3
 801a048:	3720      	adds	r7, #32
 801a04a:	46bd      	mov	sp, r7
 801a04c:	bd80      	pop	{r7, pc}
 801a04e:	bf00      	nop
 801a050:	080298a0 	.word	0x080298a0
 801a054:	080299f0 	.word	0x080299f0
 801a058:	08029918 	.word	0x08029918
 801a05c:	08029a90 	.word	0x08029a90
 801a060:	08029ac4 	.word	0x08029ac4

0801a064 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801a064:	b580      	push	{r7, lr}
 801a066:	b088      	sub	sp, #32
 801a068:	af04      	add	r7, sp, #16
 801a06a:	60f8      	str	r0, [r7, #12]
 801a06c:	60b9      	str	r1, [r7, #8]
 801a06e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	f103 0025 	add.w	r0, r3, #37	; 0x25
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a080:	2201      	movs	r2, #1
 801a082:	9203      	str	r2, [sp, #12]
 801a084:	68ba      	ldr	r2, [r7, #8]
 801a086:	9202      	str	r2, [sp, #8]
 801a088:	4a06      	ldr	r2, [pc, #24]	; (801a0a4 <etharp_request_dst+0x40>)
 801a08a:	9201      	str	r2, [sp, #4]
 801a08c:	9300      	str	r3, [sp, #0]
 801a08e:	4603      	mov	r3, r0
 801a090:	687a      	ldr	r2, [r7, #4]
 801a092:	68f8      	ldr	r0, [r7, #12]
 801a094:	f7ff ff5a 	bl	8019f4c <etharp_raw>
 801a098:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a09a:	4618      	mov	r0, r3
 801a09c:	3710      	adds	r7, #16
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	bd80      	pop	{r7, pc}
 801a0a2:	bf00      	nop
 801a0a4:	0802e684 	.word	0x0802e684

0801a0a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a0a8:	b580      	push	{r7, lr}
 801a0aa:	b082      	sub	sp, #8
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	6078      	str	r0, [r7, #4]
 801a0b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a0b2:	4a05      	ldr	r2, [pc, #20]	; (801a0c8 <etharp_request+0x20>)
 801a0b4:	6839      	ldr	r1, [r7, #0]
 801a0b6:	6878      	ldr	r0, [r7, #4]
 801a0b8:	f7ff ffd4 	bl	801a064 <etharp_request_dst>
 801a0bc:	4603      	mov	r3, r0
}
 801a0be:	4618      	mov	r0, r3
 801a0c0:	3708      	adds	r7, #8
 801a0c2:	46bd      	mov	sp, r7
 801a0c4:	bd80      	pop	{r7, pc}
 801a0c6:	bf00      	nop
 801a0c8:	0802e67c 	.word	0x0802e67c

0801a0cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b08e      	sub	sp, #56	; 0x38
 801a0d0:	af04      	add	r7, sp, #16
 801a0d2:	6078      	str	r0, [r7, #4]
 801a0d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a0d6:	4b7a      	ldr	r3, [pc, #488]	; (801a2c0 <icmp_input+0x1f4>)
 801a0d8:	689b      	ldr	r3, [r3, #8]
 801a0da:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0de:	781b      	ldrb	r3, [r3, #0]
 801a0e0:	b29b      	uxth	r3, r3
 801a0e2:	f003 030f 	and.w	r3, r3, #15
 801a0e6:	b29b      	uxth	r3, r3
 801a0e8:	009b      	lsls	r3, r3, #2
 801a0ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801a0ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a0ee:	2b13      	cmp	r3, #19
 801a0f0:	f240 80d1 	bls.w	801a296 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	895b      	ldrh	r3, [r3, #10]
 801a0f8:	2b03      	cmp	r3, #3
 801a0fa:	f240 80ce 	bls.w	801a29a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	685b      	ldr	r3, [r3, #4]
 801a102:	781b      	ldrb	r3, [r3, #0]
 801a104:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a108:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	f000 80bb 	beq.w	801a288 <icmp_input+0x1bc>
 801a112:	2b08      	cmp	r3, #8
 801a114:	f040 80bb 	bne.w	801a28e <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801a118:	4b6a      	ldr	r3, [pc, #424]	; (801a2c4 <icmp_input+0x1f8>)
 801a11a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a11c:	4b68      	ldr	r3, [pc, #416]	; (801a2c0 <icmp_input+0x1f4>)
 801a11e:	695b      	ldr	r3, [r3, #20]
 801a120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a124:	2be0      	cmp	r3, #224	; 0xe0
 801a126:	f000 80bf 	beq.w	801a2a8 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a12a:	4b65      	ldr	r3, [pc, #404]	; (801a2c0 <icmp_input+0x1f4>)
 801a12c:	695a      	ldr	r2, [r3, #20]
 801a12e:	4b64      	ldr	r3, [pc, #400]	; (801a2c0 <icmp_input+0x1f4>)
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	4619      	mov	r1, r3
 801a134:	4610      	mov	r0, r2
 801a136:	f000 fbc5 	bl	801a8c4 <ip4_addr_isbroadcast_u32>
 801a13a:	4603      	mov	r3, r0
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	f040 80b5 	bne.w	801a2ac <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	891b      	ldrh	r3, [r3, #8]
 801a146:	2b07      	cmp	r3, #7
 801a148:	f240 80a9 	bls.w	801a29e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801a14c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a14e:	330e      	adds	r3, #14
 801a150:	b29b      	uxth	r3, r3
 801a152:	b21b      	sxth	r3, r3
 801a154:	4619      	mov	r1, r3
 801a156:	6878      	ldr	r0, [r7, #4]
 801a158:	f002 fc6c 	bl	801ca34 <pbuf_header>
 801a15c:	4603      	mov	r3, r0
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d046      	beq.n	801a1f0 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	891a      	ldrh	r2, [r3, #8]
 801a166:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a168:	4413      	add	r3, r2
 801a16a:	b29b      	uxth	r3, r3
 801a16c:	2200      	movs	r2, #0
 801a16e:	4619      	mov	r1, r3
 801a170:	2002      	movs	r0, #2
 801a172:	f002 f911 	bl	801c398 <pbuf_alloc>
 801a176:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801a178:	69bb      	ldr	r3, [r7, #24]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	f000 8098 	beq.w	801a2b0 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a180:	69bb      	ldr	r3, [r7, #24]
 801a182:	895b      	ldrh	r3, [r3, #10]
 801a184:	461a      	mov	r2, r3
 801a186:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a188:	3308      	adds	r3, #8
 801a18a:	429a      	cmp	r2, r3
 801a18c:	d203      	bcs.n	801a196 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801a18e:	69b8      	ldr	r0, [r7, #24]
 801a190:	f002 fc74 	bl	801ca7c <pbuf_free>
        goto icmperr;
 801a194:	e08d      	b.n	801a2b2 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801a196:	69bb      	ldr	r3, [r7, #24]
 801a198:	685b      	ldr	r3, [r3, #4]
 801a19a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a19c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a19e:	4618      	mov	r0, r3
 801a1a0:	f00e f965 	bl	802846e <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801a1a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a1a6:	425b      	negs	r3, r3
 801a1a8:	b29b      	uxth	r3, r3
 801a1aa:	b21b      	sxth	r3, r3
 801a1ac:	4619      	mov	r1, r3
 801a1ae:	69b8      	ldr	r0, [r7, #24]
 801a1b0:	f002 fc40 	bl	801ca34 <pbuf_header>
 801a1b4:	4603      	mov	r3, r0
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d009      	beq.n	801a1ce <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a1ba:	4b43      	ldr	r3, [pc, #268]	; (801a2c8 <icmp_input+0x1fc>)
 801a1bc:	22af      	movs	r2, #175	; 0xaf
 801a1be:	4943      	ldr	r1, [pc, #268]	; (801a2cc <icmp_input+0x200>)
 801a1c0:	4843      	ldr	r0, [pc, #268]	; (801a2d0 <icmp_input+0x204>)
 801a1c2:	f00d f935 	bl	8027430 <iprintf>
        pbuf_free(r);
 801a1c6:	69b8      	ldr	r0, [r7, #24]
 801a1c8:	f002 fc58 	bl	801ca7c <pbuf_free>
        goto icmperr;
 801a1cc:	e071      	b.n	801a2b2 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801a1ce:	6879      	ldr	r1, [r7, #4]
 801a1d0:	69b8      	ldr	r0, [r7, #24]
 801a1d2:	f002 fd83 	bl	801ccdc <pbuf_copy>
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d003      	beq.n	801a1e4 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801a1dc:	69b8      	ldr	r0, [r7, #24]
 801a1de:	f002 fc4d 	bl	801ca7c <pbuf_free>
        goto icmperr;
 801a1e2:	e066      	b.n	801a2b2 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 801a1e4:	6878      	ldr	r0, [r7, #4]
 801a1e6:	f002 fc49 	bl	801ca7c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801a1ea:	69bb      	ldr	r3, [r7, #24]
 801a1ec:	607b      	str	r3, [r7, #4]
 801a1ee:	e015      	b.n	801a21c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801a1f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a1f2:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801a1f6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801a1fa:	33f2      	adds	r3, #242	; 0xf2
 801a1fc:	b29b      	uxth	r3, r3
 801a1fe:	b21b      	sxth	r3, r3
 801a200:	4619      	mov	r1, r3
 801a202:	6878      	ldr	r0, [r7, #4]
 801a204:	f002 fc16 	bl	801ca34 <pbuf_header>
 801a208:	4603      	mov	r3, r0
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d006      	beq.n	801a21c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a20e:	4b2e      	ldr	r3, [pc, #184]	; (801a2c8 <icmp_input+0x1fc>)
 801a210:	22c0      	movs	r2, #192	; 0xc0
 801a212:	4930      	ldr	r1, [pc, #192]	; (801a2d4 <icmp_input+0x208>)
 801a214:	482e      	ldr	r0, [pc, #184]	; (801a2d0 <icmp_input+0x204>)
 801a216:	f00d f90b 	bl	8027430 <iprintf>
        goto icmperr;
 801a21a:	e04a      	b.n	801a2b2 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	685b      	ldr	r3, [r3, #4]
 801a220:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801a222:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a226:	4619      	mov	r1, r3
 801a228:	6878      	ldr	r0, [r7, #4]
 801a22a:	f002 fc03 	bl	801ca34 <pbuf_header>
 801a22e:	4603      	mov	r3, r0
 801a230:	2b00      	cmp	r3, #0
 801a232:	d12b      	bne.n	801a28c <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	685b      	ldr	r3, [r3, #4]
 801a238:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801a23a:	69fb      	ldr	r3, [r7, #28]
 801a23c:	681a      	ldr	r2, [r3, #0]
 801a23e:	693b      	ldr	r3, [r7, #16]
 801a240:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a242:	4b1f      	ldr	r3, [pc, #124]	; (801a2c0 <icmp_input+0x1f4>)
 801a244:	691a      	ldr	r2, [r3, #16]
 801a246:	693b      	ldr	r3, [r7, #16]
 801a248:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a24a:	697b      	ldr	r3, [r7, #20]
 801a24c:	2200      	movs	r2, #0
 801a24e:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 801a250:	697b      	ldr	r3, [r7, #20]
 801a252:	2200      	movs	r2, #0
 801a254:	709a      	strb	r2, [r3, #2]
 801a256:	2200      	movs	r2, #0
 801a258:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801a25a:	693b      	ldr	r3, [r7, #16]
 801a25c:	22ff      	movs	r2, #255	; 0xff
 801a25e:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 801a260:	693b      	ldr	r3, [r7, #16]
 801a262:	2200      	movs	r2, #0
 801a264:	729a      	strb	r2, [r3, #10]
 801a266:	2200      	movs	r2, #0
 801a268:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a26a:	683b      	ldr	r3, [r7, #0]
 801a26c:	9302      	str	r3, [sp, #8]
 801a26e:	2301      	movs	r3, #1
 801a270:	9301      	str	r3, [sp, #4]
 801a272:	2300      	movs	r3, #0
 801a274:	9300      	str	r3, [sp, #0]
 801a276:	23ff      	movs	r3, #255	; 0xff
 801a278:	2200      	movs	r2, #0
 801a27a:	69f9      	ldr	r1, [r7, #28]
 801a27c:	6878      	ldr	r0, [r7, #4]
 801a27e:	f000 fa4f 	bl	801a720 <ip4_output_if>
 801a282:	4603      	mov	r3, r0
 801a284:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801a286:	e001      	b.n	801a28c <icmp_input+0x1c0>
    break;
 801a288:	bf00      	nop
 801a28a:	e000      	b.n	801a28e <icmp_input+0x1c2>
    break;
 801a28c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a28e:	6878      	ldr	r0, [r7, #4]
 801a290:	f002 fbf4 	bl	801ca7c <pbuf_free>
  return;
 801a294:	e011      	b.n	801a2ba <icmp_input+0x1ee>
    goto lenerr;
 801a296:	bf00      	nop
 801a298:	e002      	b.n	801a2a0 <icmp_input+0x1d4>
    goto lenerr;
 801a29a:	bf00      	nop
 801a29c:	e000      	b.n	801a2a0 <icmp_input+0x1d4>
      goto lenerr;
 801a29e:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a2a0:	6878      	ldr	r0, [r7, #4]
 801a2a2:	f002 fbeb 	bl	801ca7c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a2a6:	e008      	b.n	801a2ba <icmp_input+0x1ee>
      goto icmperr;
 801a2a8:	bf00      	nop
 801a2aa:	e002      	b.n	801a2b2 <icmp_input+0x1e6>
      goto icmperr;
 801a2ac:	bf00      	nop
 801a2ae:	e000      	b.n	801a2b2 <icmp_input+0x1e6>
        goto icmperr;
 801a2b0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f002 fbe2 	bl	801ca7c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a2b8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a2ba:	3728      	adds	r7, #40	; 0x28
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	bd80      	pop	{r7, pc}
 801a2c0:	2000a278 	.word	0x2000a278
 801a2c4:	2000a28c 	.word	0x2000a28c
 801a2c8:	08029b08 	.word	0x08029b08
 801a2cc:	08029b40 	.word	0x08029b40
 801a2d0:	08029b78 	.word	0x08029b78
 801a2d4:	08029ba0 	.word	0x08029ba0

0801a2d8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b082      	sub	sp, #8
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]
 801a2e0:	460b      	mov	r3, r1
 801a2e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a2e4:	78fb      	ldrb	r3, [r7, #3]
 801a2e6:	461a      	mov	r2, r3
 801a2e8:	2103      	movs	r1, #3
 801a2ea:	6878      	ldr	r0, [r7, #4]
 801a2ec:	f000 f814 	bl	801a318 <icmp_send_response>
}
 801a2f0:	bf00      	nop
 801a2f2:	3708      	adds	r7, #8
 801a2f4:	46bd      	mov	sp, r7
 801a2f6:	bd80      	pop	{r7, pc}

0801a2f8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b082      	sub	sp, #8
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
 801a300:	460b      	mov	r3, r1
 801a302:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a304:	78fb      	ldrb	r3, [r7, #3]
 801a306:	461a      	mov	r2, r3
 801a308:	210b      	movs	r1, #11
 801a30a:	6878      	ldr	r0, [r7, #4]
 801a30c:	f000 f804 	bl	801a318 <icmp_send_response>
}
 801a310:	bf00      	nop
 801a312:	3708      	adds	r7, #8
 801a314:	46bd      	mov	sp, r7
 801a316:	bd80      	pop	{r7, pc}

0801a318 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a318:	b580      	push	{r7, lr}
 801a31a:	b08c      	sub	sp, #48	; 0x30
 801a31c:	af04      	add	r7, sp, #16
 801a31e:	6078      	str	r0, [r7, #4]
 801a320:	460b      	mov	r3, r1
 801a322:	70fb      	strb	r3, [r7, #3]
 801a324:	4613      	mov	r3, r2
 801a326:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a328:	2200      	movs	r2, #0
 801a32a:	2124      	movs	r1, #36	; 0x24
 801a32c:	2001      	movs	r0, #1
 801a32e:	f002 f833 	bl	801c398 <pbuf_alloc>
 801a332:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a334:	69fb      	ldr	r3, [r7, #28]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d04c      	beq.n	801a3d4 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a33a:	69fb      	ldr	r3, [r7, #28]
 801a33c:	895b      	ldrh	r3, [r3, #10]
 801a33e:	2b23      	cmp	r3, #35	; 0x23
 801a340:	d806      	bhi.n	801a350 <icmp_send_response+0x38>
 801a342:	4b26      	ldr	r3, [pc, #152]	; (801a3dc <icmp_send_response+0xc4>)
 801a344:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801a348:	4925      	ldr	r1, [pc, #148]	; (801a3e0 <icmp_send_response+0xc8>)
 801a34a:	4826      	ldr	r0, [pc, #152]	; (801a3e4 <icmp_send_response+0xcc>)
 801a34c:	f00d f870 	bl	8027430 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	685b      	ldr	r3, [r3, #4]
 801a354:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a356:	69fb      	ldr	r3, [r7, #28]
 801a358:	685b      	ldr	r3, [r3, #4]
 801a35a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a35c:	697b      	ldr	r3, [r7, #20]
 801a35e:	78fa      	ldrb	r2, [r7, #3]
 801a360:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a362:	697b      	ldr	r3, [r7, #20]
 801a364:	78ba      	ldrb	r2, [r7, #2]
 801a366:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a368:	697b      	ldr	r3, [r7, #20]
 801a36a:	2200      	movs	r2, #0
 801a36c:	711a      	strb	r2, [r3, #4]
 801a36e:	2200      	movs	r2, #0
 801a370:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a372:	697b      	ldr	r3, [r7, #20]
 801a374:	2200      	movs	r2, #0
 801a376:	719a      	strb	r2, [r3, #6]
 801a378:	2200      	movs	r2, #0
 801a37a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a37c:	69fb      	ldr	r3, [r7, #28]
 801a37e:	685b      	ldr	r3, [r3, #4]
 801a380:	f103 0008 	add.w	r0, r3, #8
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	685b      	ldr	r3, [r3, #4]
 801a388:	221c      	movs	r2, #28
 801a38a:	4619      	mov	r1, r3
 801a38c:	f00e f86f 	bl	802846e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a390:	69bb      	ldr	r3, [r7, #24]
 801a392:	68db      	ldr	r3, [r3, #12]
 801a394:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a396:	f107 030c 	add.w	r3, r7, #12
 801a39a:	4618      	mov	r0, r3
 801a39c:	f000 f824 	bl	801a3e8 <ip4_route>
 801a3a0:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801a3a2:	693b      	ldr	r3, [r7, #16]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d011      	beq.n	801a3cc <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a3a8:	697b      	ldr	r3, [r7, #20]
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	709a      	strb	r2, [r3, #2]
 801a3ae:	2200      	movs	r2, #0
 801a3b0:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a3b2:	f107 020c 	add.w	r2, r7, #12
 801a3b6:	693b      	ldr	r3, [r7, #16]
 801a3b8:	9302      	str	r3, [sp, #8]
 801a3ba:	2301      	movs	r3, #1
 801a3bc:	9301      	str	r3, [sp, #4]
 801a3be:	2300      	movs	r3, #0
 801a3c0:	9300      	str	r3, [sp, #0]
 801a3c2:	23ff      	movs	r3, #255	; 0xff
 801a3c4:	2100      	movs	r1, #0
 801a3c6:	69f8      	ldr	r0, [r7, #28]
 801a3c8:	f000 f9aa 	bl	801a720 <ip4_output_if>
  }
  pbuf_free(q);
 801a3cc:	69f8      	ldr	r0, [r7, #28]
 801a3ce:	f002 fb55 	bl	801ca7c <pbuf_free>
 801a3d2:	e000      	b.n	801a3d6 <icmp_send_response+0xbe>
    return;
 801a3d4:	bf00      	nop
}
 801a3d6:	3720      	adds	r7, #32
 801a3d8:	46bd      	mov	sp, r7
 801a3da:	bd80      	pop	{r7, pc}
 801a3dc:	08029b08 	.word	0x08029b08
 801a3e0:	08029bd4 	.word	0x08029bd4
 801a3e4:	08029b78 	.word	0x08029b78

0801a3e8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a3e8:	b480      	push	{r7}
 801a3ea:	b085      	sub	sp, #20
 801a3ec:	af00      	add	r7, sp, #0
 801a3ee:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801a3f0:	4b2f      	ldr	r3, [pc, #188]	; (801a4b0 <ip4_route+0xc8>)
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	60fb      	str	r3, [r7, #12]
 801a3f6:	e033      	b.n	801a460 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a3fe:	f003 0301 	and.w	r3, r3, #1
 801a402:	2b00      	cmp	r3, #0
 801a404:	d029      	beq.n	801a45a <ip4_route+0x72>
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a40c:	f003 0304 	and.w	r3, r3, #4
 801a410:	2b00      	cmp	r3, #0
 801a412:	d022      	beq.n	801a45a <ip4_route+0x72>
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	3304      	adds	r3, #4
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d01d      	beq.n	801a45a <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	681a      	ldr	r2, [r3, #0]
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	3304      	adds	r3, #4
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	405a      	eors	r2, r3
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	3308      	adds	r3, #8
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	4013      	ands	r3, r2
 801a432:	2b00      	cmp	r3, #0
 801a434:	d101      	bne.n	801a43a <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	e033      	b.n	801a4a2 <ip4_route+0xba>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a440:	f003 0302 	and.w	r3, r3, #2
 801a444:	2b00      	cmp	r3, #0
 801a446:	d108      	bne.n	801a45a <ip4_route+0x72>
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	681a      	ldr	r2, [r3, #0]
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	330c      	adds	r3, #12
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	429a      	cmp	r2, r3
 801a454:	d101      	bne.n	801a45a <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	e023      	b.n	801a4a2 <ip4_route+0xba>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801a45a:	68fb      	ldr	r3, [r7, #12]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	60fb      	str	r3, [r7, #12]
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d1c8      	bne.n	801a3f8 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a466:	4b13      	ldr	r3, [pc, #76]	; (801a4b4 <ip4_route+0xcc>)
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d015      	beq.n	801a49a <ip4_route+0xb2>
 801a46e:	4b11      	ldr	r3, [pc, #68]	; (801a4b4 <ip4_route+0xcc>)
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a476:	f003 0301 	and.w	r3, r3, #1
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d00d      	beq.n	801a49a <ip4_route+0xb2>
 801a47e:	4b0d      	ldr	r3, [pc, #52]	; (801a4b4 <ip4_route+0xcc>)
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a486:	f003 0304 	and.w	r3, r3, #4
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d005      	beq.n	801a49a <ip4_route+0xb2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801a48e:	4b09      	ldr	r3, [pc, #36]	; (801a4b4 <ip4_route+0xcc>)
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	3304      	adds	r3, #4
 801a494:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a496:	2b00      	cmp	r3, #0
 801a498:	d101      	bne.n	801a49e <ip4_route+0xb6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a49a:	2300      	movs	r3, #0
 801a49c:	e001      	b.n	801a4a2 <ip4_route+0xba>
  }

  return netif_default;
 801a49e:	4b05      	ldr	r3, [pc, #20]	; (801a4b4 <ip4_route+0xcc>)
 801a4a0:	681b      	ldr	r3, [r3, #0]
}
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	3714      	adds	r7, #20
 801a4a6:	46bd      	mov	sp, r7
 801a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ac:	4770      	bx	lr
 801a4ae:	bf00      	nop
 801a4b0:	2000eccc 	.word	0x2000eccc
 801a4b4:	2000ecd0 	.word	0x2000ecd0

0801a4b8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b086      	sub	sp, #24
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
 801a4c0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	685b      	ldr	r3, [r3, #4]
 801a4c6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801a4c8:	697b      	ldr	r3, [r7, #20]
 801a4ca:	781b      	ldrb	r3, [r3, #0]
 801a4cc:	091b      	lsrs	r3, r3, #4
 801a4ce:	b2db      	uxtb	r3, r3
 801a4d0:	2b04      	cmp	r3, #4
 801a4d2:	d004      	beq.n	801a4de <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a4d4:	6878      	ldr	r0, [r7, #4]
 801a4d6:	f002 fad1 	bl	801ca7c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a4da:	2300      	movs	r3, #0
 801a4dc:	e118      	b.n	801a710 <ip4_input+0x258>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801a4de:	697b      	ldr	r3, [r7, #20]
 801a4e0:	781b      	ldrb	r3, [r3, #0]
 801a4e2:	b29b      	uxth	r3, r3
 801a4e4:	f003 030f 	and.w	r3, r3, #15
 801a4e8:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801a4ea:	897b      	ldrh	r3, [r7, #10]
 801a4ec:	009b      	lsls	r3, r3, #2
 801a4ee:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a4f0:	697b      	ldr	r3, [r7, #20]
 801a4f2:	885b      	ldrh	r3, [r3, #2]
 801a4f4:	b29b      	uxth	r3, r3
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	f7fe fe96 	bl	8019228 <lwip_htons>
 801a4fc:	4603      	mov	r3, r0
 801a4fe:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	891b      	ldrh	r3, [r3, #8]
 801a504:	893a      	ldrh	r2, [r7, #8]
 801a506:	429a      	cmp	r2, r3
 801a508:	d204      	bcs.n	801a514 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 801a50a:	893b      	ldrh	r3, [r7, #8]
 801a50c:	4619      	mov	r1, r3
 801a50e:	6878      	ldr	r0, [r7, #4]
 801a510:	f002 f940 	bl	801c794 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	895b      	ldrh	r3, [r3, #10]
 801a518:	897a      	ldrh	r2, [r7, #10]
 801a51a:	429a      	cmp	r2, r3
 801a51c:	d807      	bhi.n	801a52e <ip4_input+0x76>
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	891b      	ldrh	r3, [r3, #8]
 801a522:	893a      	ldrh	r2, [r7, #8]
 801a524:	429a      	cmp	r2, r3
 801a526:	d802      	bhi.n	801a52e <ip4_input+0x76>
 801a528:	897b      	ldrh	r3, [r7, #10]
 801a52a:	2b13      	cmp	r3, #19
 801a52c:	d804      	bhi.n	801a538 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a52e:	6878      	ldr	r0, [r7, #4]
 801a530:	f002 faa4 	bl	801ca7c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a534:	2300      	movs	r3, #0
 801a536:	e0eb      	b.n	801a710 <ip4_input+0x258>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a538:	697b      	ldr	r3, [r7, #20]
 801a53a:	691b      	ldr	r3, [r3, #16]
 801a53c:	4a76      	ldr	r2, [pc, #472]	; (801a718 <ip4_input+0x260>)
 801a53e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a540:	697b      	ldr	r3, [r7, #20]
 801a542:	68db      	ldr	r3, [r3, #12]
 801a544:	4a74      	ldr	r2, [pc, #464]	; (801a718 <ip4_input+0x260>)
 801a546:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a548:	4b73      	ldr	r3, [pc, #460]	; (801a718 <ip4_input+0x260>)
 801a54a:	695b      	ldr	r3, [r3, #20]
 801a54c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a550:	2be0      	cmp	r3, #224	; 0xe0
 801a552:	d111      	bne.n	801a578 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a554:	683b      	ldr	r3, [r7, #0]
 801a556:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a55a:	f003 0301 	and.w	r3, r3, #1
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d007      	beq.n	801a572 <ip4_input+0xba>
 801a562:	683b      	ldr	r3, [r7, #0]
 801a564:	3304      	adds	r3, #4
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d002      	beq.n	801a572 <ip4_input+0xba>
      netif = inp;
 801a56c:	683b      	ldr	r3, [r7, #0]
 801a56e:	613b      	str	r3, [r7, #16]
 801a570:	e040      	b.n	801a5f4 <ip4_input+0x13c>
    } else {
      netif = NULL;
 801a572:	2300      	movs	r3, #0
 801a574:	613b      	str	r3, [r7, #16]
 801a576:	e03d      	b.n	801a5f4 <ip4_input+0x13c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801a578:	2301      	movs	r3, #1
 801a57a:	60fb      	str	r3, [r7, #12]
    netif = inp;
 801a57c:	683b      	ldr	r3, [r7, #0]
 801a57e:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a580:	693b      	ldr	r3, [r7, #16]
 801a582:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a586:	f003 0301 	and.w	r3, r3, #1
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d014      	beq.n	801a5b8 <ip4_input+0x100>
 801a58e:	693b      	ldr	r3, [r7, #16]
 801a590:	3304      	adds	r3, #4
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	2b00      	cmp	r3, #0
 801a596:	d00f      	beq.n	801a5b8 <ip4_input+0x100>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a598:	4b5f      	ldr	r3, [pc, #380]	; (801a718 <ip4_input+0x260>)
 801a59a:	695a      	ldr	r2, [r3, #20]
 801a59c:	693b      	ldr	r3, [r7, #16]
 801a59e:	3304      	adds	r3, #4
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	429a      	cmp	r2, r3
 801a5a4:	d026      	beq.n	801a5f4 <ip4_input+0x13c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a5a6:	4b5c      	ldr	r3, [pc, #368]	; (801a718 <ip4_input+0x260>)
 801a5a8:	695b      	ldr	r3, [r3, #20]
 801a5aa:	6939      	ldr	r1, [r7, #16]
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	f000 f989 	bl	801a8c4 <ip4_addr_isbroadcast_u32>
 801a5b2:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d11d      	bne.n	801a5f4 <ip4_input+0x13c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d00d      	beq.n	801a5da <ip4_input+0x122>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801a5be:	4b56      	ldr	r3, [pc, #344]	; (801a718 <ip4_input+0x260>)
 801a5c0:	695b      	ldr	r3, [r3, #20]
 801a5c2:	b2db      	uxtb	r3, r3
 801a5c4:	2b7f      	cmp	r3, #127	; 0x7f
 801a5c6:	d102      	bne.n	801a5ce <ip4_input+0x116>
          netif = NULL;
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	613b      	str	r3, [r7, #16]
          break;
 801a5cc:	e012      	b.n	801a5f4 <ip4_input+0x13c>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 801a5d2:	4b52      	ldr	r3, [pc, #328]	; (801a71c <ip4_input+0x264>)
 801a5d4:	681b      	ldr	r3, [r3, #0]
 801a5d6:	613b      	str	r3, [r7, #16]
 801a5d8:	e002      	b.n	801a5e0 <ip4_input+0x128>
      } else {
        netif = netif->next;
 801a5da:	693b      	ldr	r3, [r7, #16]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 801a5e0:	693a      	ldr	r2, [r7, #16]
 801a5e2:	683b      	ldr	r3, [r7, #0]
 801a5e4:	429a      	cmp	r2, r3
 801a5e6:	d102      	bne.n	801a5ee <ip4_input+0x136>
        netif = netif->next;
 801a5e8:	693b      	ldr	r3, [r7, #16]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 801a5ee:	693b      	ldr	r3, [r7, #16]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d1c5      	bne.n	801a580 <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a5f4:	4b48      	ldr	r3, [pc, #288]	; (801a718 <ip4_input+0x260>)
 801a5f6:	691b      	ldr	r3, [r3, #16]
 801a5f8:	6839      	ldr	r1, [r7, #0]
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	f000 f962 	bl	801a8c4 <ip4_addr_isbroadcast_u32>
 801a600:	4603      	mov	r3, r0
 801a602:	2b00      	cmp	r3, #0
 801a604:	d105      	bne.n	801a612 <ip4_input+0x15a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a606:	4b44      	ldr	r3, [pc, #272]	; (801a718 <ip4_input+0x260>)
 801a608:	691b      	ldr	r3, [r3, #16]
 801a60a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a60e:	2be0      	cmp	r3, #224	; 0xe0
 801a610:	d104      	bne.n	801a61c <ip4_input+0x164>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a612:	6878      	ldr	r0, [r7, #4]
 801a614:	f002 fa32 	bl	801ca7c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a618:	2300      	movs	r3, #0
 801a61a:	e079      	b.n	801a710 <ip4_input+0x258>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a61c:	693b      	ldr	r3, [r7, #16]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d104      	bne.n	801a62c <ip4_input+0x174>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a622:	6878      	ldr	r0, [r7, #4]
 801a624:	f002 fa2a 	bl	801ca7c <pbuf_free>
    return ERR_OK;
 801a628:	2300      	movs	r3, #0
 801a62a:	e071      	b.n	801a710 <ip4_input+0x258>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a62c:	697b      	ldr	r3, [r7, #20]
 801a62e:	88db      	ldrh	r3, [r3, #6]
 801a630:	b29b      	uxth	r3, r3
 801a632:	461a      	mov	r2, r3
 801a634:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a638:	4013      	ands	r3, r2
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d00b      	beq.n	801a656 <ip4_input+0x19e>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a63e:	6878      	ldr	r0, [r7, #4]
 801a640:	f000 fdc4 	bl	801b1cc <ip4_reass>
 801a644:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d101      	bne.n	801a650 <ip4_input+0x198>
      return ERR_OK;
 801a64c:	2300      	movs	r3, #0
 801a64e:	e05f      	b.n	801a710 <ip4_input+0x258>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	685b      	ldr	r3, [r3, #4]
 801a654:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a656:	4a30      	ldr	r2, [pc, #192]	; (801a718 <ip4_input+0x260>)
 801a658:	693b      	ldr	r3, [r7, #16]
 801a65a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a65c:	4a2e      	ldr	r2, [pc, #184]	; (801a718 <ip4_input+0x260>)
 801a65e:	683b      	ldr	r3, [r7, #0]
 801a660:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a662:	4a2d      	ldr	r2, [pc, #180]	; (801a718 <ip4_input+0x260>)
 801a664:	697b      	ldr	r3, [r7, #20]
 801a666:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801a668:	697b      	ldr	r3, [r7, #20]
 801a66a:	781b      	ldrb	r3, [r3, #0]
 801a66c:	b29b      	uxth	r3, r3
 801a66e:	f003 030f 	and.w	r3, r3, #15
 801a672:	b29b      	uxth	r3, r3
 801a674:	009b      	lsls	r3, r3, #2
 801a676:	b29a      	uxth	r2, r3
 801a678:	4b27      	ldr	r3, [pc, #156]	; (801a718 <ip4_input+0x260>)
 801a67a:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801a67c:	897b      	ldrh	r3, [r7, #10]
 801a67e:	425b      	negs	r3, r3
 801a680:	b29b      	uxth	r3, r3
 801a682:	b21b      	sxth	r3, r3
 801a684:	4619      	mov	r1, r3
 801a686:	6878      	ldr	r0, [r7, #4]
 801a688:	f002 f9d4 	bl	801ca34 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 801a68c:	697b      	ldr	r3, [r7, #20]
 801a68e:	7a5b      	ldrb	r3, [r3, #9]
 801a690:	2b01      	cmp	r3, #1
 801a692:	d006      	beq.n	801a6a2 <ip4_input+0x1ea>
 801a694:	2b06      	cmp	r3, #6
 801a696:	d109      	bne.n	801a6ac <ip4_input+0x1f4>
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 801a698:	6839      	ldr	r1, [r7, #0]
 801a69a:	6878      	ldr	r0, [r7, #4]
 801a69c:	f004 f8ba 	bl	801e814 <tcp_input>
      break;
 801a6a0:	e023      	b.n	801a6ea <ip4_input+0x232>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801a6a2:	6839      	ldr	r1, [r7, #0]
 801a6a4:	6878      	ldr	r0, [r7, #4]
 801a6a6:	f7ff fd11 	bl	801a0cc <icmp_input>
      break;
 801a6aa:	e01e      	b.n	801a6ea <ip4_input+0x232>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a6ac:	4b1a      	ldr	r3, [pc, #104]	; (801a718 <ip4_input+0x260>)
 801a6ae:	695b      	ldr	r3, [r3, #20]
 801a6b0:	6939      	ldr	r1, [r7, #16]
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	f000 f906 	bl	801a8c4 <ip4_addr_isbroadcast_u32>
 801a6b8:	4603      	mov	r3, r0
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d112      	bne.n	801a6e4 <ip4_input+0x22c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a6be:	4b16      	ldr	r3, [pc, #88]	; (801a718 <ip4_input+0x260>)
 801a6c0:	695b      	ldr	r3, [r3, #20]
 801a6c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a6c6:	2be0      	cmp	r3, #224	; 0xe0
 801a6c8:	d00c      	beq.n	801a6e4 <ip4_input+0x22c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801a6ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801a6ce:	4619      	mov	r1, r3
 801a6d0:	6878      	ldr	r0, [r7, #4]
 801a6d2:	f002 f9c1 	bl	801ca58 <pbuf_header_force>
        p->payload = iphdr;
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	697a      	ldr	r2, [r7, #20]
 801a6da:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a6dc:	2102      	movs	r1, #2
 801a6de:	6878      	ldr	r0, [r7, #4]
 801a6e0:	f7ff fdfa 	bl	801a2d8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801a6e4:	6878      	ldr	r0, [r7, #4]
 801a6e6:	f002 f9c9 	bl	801ca7c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a6ea:	4b0b      	ldr	r3, [pc, #44]	; (801a718 <ip4_input+0x260>)
 801a6ec:	2200      	movs	r2, #0
 801a6ee:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a6f0:	4b09      	ldr	r3, [pc, #36]	; (801a718 <ip4_input+0x260>)
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a6f6:	4b08      	ldr	r3, [pc, #32]	; (801a718 <ip4_input+0x260>)
 801a6f8:	2200      	movs	r2, #0
 801a6fa:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a6fc:	4b06      	ldr	r3, [pc, #24]	; (801a718 <ip4_input+0x260>)
 801a6fe:	2200      	movs	r2, #0
 801a700:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a702:	4b05      	ldr	r3, [pc, #20]	; (801a718 <ip4_input+0x260>)
 801a704:	2200      	movs	r2, #0
 801a706:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a708:	4b03      	ldr	r3, [pc, #12]	; (801a718 <ip4_input+0x260>)
 801a70a:	2200      	movs	r2, #0
 801a70c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a70e:	2300      	movs	r3, #0
}
 801a710:	4618      	mov	r0, r3
 801a712:	3718      	adds	r7, #24
 801a714:	46bd      	mov	sp, r7
 801a716:	bd80      	pop	{r7, pc}
 801a718:	2000a278 	.word	0x2000a278
 801a71c:	2000eccc 	.word	0x2000eccc

0801a720 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801a720:	b580      	push	{r7, lr}
 801a722:	b08a      	sub	sp, #40	; 0x28
 801a724:	af04      	add	r7, sp, #16
 801a726:	60f8      	str	r0, [r7, #12]
 801a728:	60b9      	str	r1, [r7, #8]
 801a72a:	607a      	str	r2, [r7, #4]
 801a72c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a72e:	68bb      	ldr	r3, [r7, #8]
 801a730:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d009      	beq.n	801a74c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a738:	68bb      	ldr	r3, [r7, #8]
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d003      	beq.n	801a746 <ip4_output_if+0x26>
 801a73e:	68bb      	ldr	r3, [r7, #8]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	2b00      	cmp	r3, #0
 801a744:	d102      	bne.n	801a74c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a748:	3304      	adds	r3, #4
 801a74a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a74c:	78fa      	ldrb	r2, [r7, #3]
 801a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a750:	9302      	str	r3, [sp, #8]
 801a752:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a756:	9301      	str	r3, [sp, #4]
 801a758:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a75c:	9300      	str	r3, [sp, #0]
 801a75e:	4613      	mov	r3, r2
 801a760:	687a      	ldr	r2, [r7, #4]
 801a762:	6979      	ldr	r1, [r7, #20]
 801a764:	68f8      	ldr	r0, [r7, #12]
 801a766:	f000 f805 	bl	801a774 <ip4_output_if_src>
 801a76a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a76c:	4618      	mov	r0, r3
 801a76e:	3718      	adds	r7, #24
 801a770:	46bd      	mov	sp, r7
 801a772:	bd80      	pop	{r7, pc}

0801a774 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801a774:	b580      	push	{r7, lr}
 801a776:	b088      	sub	sp, #32
 801a778:	af00      	add	r7, sp, #0
 801a77a:	60f8      	str	r0, [r7, #12]
 801a77c:	60b9      	str	r1, [r7, #8]
 801a77e:	607a      	str	r2, [r7, #4]
 801a780:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	89db      	ldrh	r3, [r3, #14]
 801a786:	2b01      	cmp	r3, #1
 801a788:	d006      	beq.n	801a798 <ip4_output_if_src+0x24>
 801a78a:	4b48      	ldr	r3, [pc, #288]	; (801a8ac <ip4_output_if_src+0x138>)
 801a78c:	f240 3233 	movw	r2, #819	; 0x333
 801a790:	4947      	ldr	r1, [pc, #284]	; (801a8b0 <ip4_output_if_src+0x13c>)
 801a792:	4848      	ldr	r0, [pc, #288]	; (801a8b4 <ip4_output_if_src+0x140>)
 801a794:	f00c fe4c 	bl	8027430 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d060      	beq.n	801a860 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a79e:	2314      	movs	r3, #20
 801a7a0:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801a7a2:	2114      	movs	r1, #20
 801a7a4:	68f8      	ldr	r0, [r7, #12]
 801a7a6:	f002 f945 	bl	801ca34 <pbuf_header>
 801a7aa:	4603      	mov	r3, r0
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d002      	beq.n	801a7b6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a7b0:	f06f 0301 	mvn.w	r3, #1
 801a7b4:	e075      	b.n	801a8a2 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	685b      	ldr	r3, [r3, #4]
 801a7ba:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	895b      	ldrh	r3, [r3, #10]
 801a7c0:	2b13      	cmp	r3, #19
 801a7c2:	d806      	bhi.n	801a7d2 <ip4_output_if_src+0x5e>
 801a7c4:	4b39      	ldr	r3, [pc, #228]	; (801a8ac <ip4_output_if_src+0x138>)
 801a7c6:	f240 3261 	movw	r2, #865	; 0x361
 801a7ca:	493b      	ldr	r1, [pc, #236]	; (801a8b8 <ip4_output_if_src+0x144>)
 801a7cc:	4839      	ldr	r0, [pc, #228]	; (801a8b4 <ip4_output_if_src+0x140>)
 801a7ce:	f00c fe2f 	bl	8027430 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a7d2:	69bb      	ldr	r3, [r7, #24]
 801a7d4:	78fa      	ldrb	r2, [r7, #3]
 801a7d6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a7d8:	69bb      	ldr	r3, [r7, #24]
 801a7da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a7de:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	681a      	ldr	r2, [r3, #0]
 801a7e4:	69bb      	ldr	r3, [r7, #24]
 801a7e6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a7e8:	8bfb      	ldrh	r3, [r7, #30]
 801a7ea:	089b      	lsrs	r3, r3, #2
 801a7ec:	b29b      	uxth	r3, r3
 801a7ee:	b2db      	uxtb	r3, r3
 801a7f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a7f4:	b2da      	uxtb	r2, r3
 801a7f6:	69bb      	ldr	r3, [r7, #24]
 801a7f8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a7fa:	69bb      	ldr	r3, [r7, #24]
 801a7fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a800:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	891b      	ldrh	r3, [r3, #8]
 801a806:	4618      	mov	r0, r3
 801a808:	f7fe fd0e 	bl	8019228 <lwip_htons>
 801a80c:	4603      	mov	r3, r0
 801a80e:	461a      	mov	r2, r3
 801a810:	69bb      	ldr	r3, [r7, #24]
 801a812:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a814:	69bb      	ldr	r3, [r7, #24]
 801a816:	2200      	movs	r2, #0
 801a818:	719a      	strb	r2, [r3, #6]
 801a81a:	2200      	movs	r2, #0
 801a81c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a81e:	4b27      	ldr	r3, [pc, #156]	; (801a8bc <ip4_output_if_src+0x148>)
 801a820:	881b      	ldrh	r3, [r3, #0]
 801a822:	4618      	mov	r0, r3
 801a824:	f7fe fd00 	bl	8019228 <lwip_htons>
 801a828:	4603      	mov	r3, r0
 801a82a:	461a      	mov	r2, r3
 801a82c:	69bb      	ldr	r3, [r7, #24]
 801a82e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a830:	4b22      	ldr	r3, [pc, #136]	; (801a8bc <ip4_output_if_src+0x148>)
 801a832:	881b      	ldrh	r3, [r3, #0]
 801a834:	3301      	adds	r3, #1
 801a836:	b29a      	uxth	r2, r3
 801a838:	4b20      	ldr	r3, [pc, #128]	; (801a8bc <ip4_output_if_src+0x148>)
 801a83a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a83c:	68bb      	ldr	r3, [r7, #8]
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d104      	bne.n	801a84c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a842:	4b1f      	ldr	r3, [pc, #124]	; (801a8c0 <ip4_output_if_src+0x14c>)
 801a844:	681a      	ldr	r2, [r3, #0]
 801a846:	69bb      	ldr	r3, [r7, #24]
 801a848:	60da      	str	r2, [r3, #12]
 801a84a:	e003      	b.n	801a854 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a84c:	68bb      	ldr	r3, [r7, #8]
 801a84e:	681a      	ldr	r2, [r3, #0]
 801a850:	69bb      	ldr	r3, [r7, #24]
 801a852:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a854:	69bb      	ldr	r3, [r7, #24]
 801a856:	2200      	movs	r2, #0
 801a858:	729a      	strb	r2, [r3, #10]
 801a85a:	2200      	movs	r2, #0
 801a85c:	72da      	strb	r2, [r3, #11]
 801a85e:	e008      	b.n	801a872 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	685b      	ldr	r3, [r3, #4]
 801a864:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a866:	69bb      	ldr	r3, [r7, #24]
 801a868:	691b      	ldr	r3, [r3, #16]
 801a86a:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a86c:	f107 0314 	add.w	r3, r7, #20
 801a870:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a874:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a876:	2b00      	cmp	r3, #0
 801a878:	d00c      	beq.n	801a894 <ip4_output_if_src+0x120>
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	891a      	ldrh	r2, [r3, #8]
 801a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a880:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a882:	429a      	cmp	r2, r3
 801a884:	d906      	bls.n	801a894 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801a886:	687a      	ldr	r2, [r7, #4]
 801a888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a88a:	68f8      	ldr	r0, [r7, #12]
 801a88c:	f000 fe46 	bl	801b51c <ip4_frag>
 801a890:	4603      	mov	r3, r0
 801a892:	e006      	b.n	801a8a2 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a896:	695b      	ldr	r3, [r3, #20]
 801a898:	687a      	ldr	r2, [r7, #4]
 801a89a:	68f9      	ldr	r1, [r7, #12]
 801a89c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a89e:	4798      	blx	r3
 801a8a0:	4603      	mov	r3, r0
}
 801a8a2:	4618      	mov	r0, r3
 801a8a4:	3720      	adds	r7, #32
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	bd80      	pop	{r7, pc}
 801a8aa:	bf00      	nop
 801a8ac:	08029c00 	.word	0x08029c00
 801a8b0:	08029c34 	.word	0x08029c34
 801a8b4:	08029c40 	.word	0x08029c40
 801a8b8:	08029c68 	.word	0x08029c68
 801a8bc:	200094a6 	.word	0x200094a6
 801a8c0:	0802e578 	.word	0x0802e578

0801a8c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a8c4:	b480      	push	{r7}
 801a8c6:	b085      	sub	sp, #20
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	6078      	str	r0, [r7, #4]
 801a8cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a8d8:	d002      	beq.n	801a8e0 <ip4_addr_isbroadcast_u32+0x1c>
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d101      	bne.n	801a8e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a8e0:	2301      	movs	r3, #1
 801a8e2:	e02a      	b.n	801a93a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a8e4:	683b      	ldr	r3, [r7, #0]
 801a8e6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a8ea:	f003 0302 	and.w	r3, r3, #2
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d101      	bne.n	801a8f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	e021      	b.n	801a93a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a8f6:	683b      	ldr	r3, [r7, #0]
 801a8f8:	3304      	adds	r3, #4
 801a8fa:	681a      	ldr	r2, [r3, #0]
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	429a      	cmp	r2, r3
 801a900:	d101      	bne.n	801a906 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a902:	2300      	movs	r3, #0
 801a904:	e019      	b.n	801a93a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a906:	68fa      	ldr	r2, [r7, #12]
 801a908:	683b      	ldr	r3, [r7, #0]
 801a90a:	3304      	adds	r3, #4
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	405a      	eors	r2, r3
 801a910:	683b      	ldr	r3, [r7, #0]
 801a912:	3308      	adds	r3, #8
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	4013      	ands	r3, r2
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d10d      	bne.n	801a938 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a91c:	683b      	ldr	r3, [r7, #0]
 801a91e:	3308      	adds	r3, #8
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	43da      	mvns	r2, r3
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a928:	683b      	ldr	r3, [r7, #0]
 801a92a:	3308      	adds	r3, #8
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a930:	429a      	cmp	r2, r3
 801a932:	d101      	bne.n	801a938 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a934:	2301      	movs	r3, #1
 801a936:	e000      	b.n	801a93a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a938:	2300      	movs	r3, #0
  }
}
 801a93a:	4618      	mov	r0, r3
 801a93c:	3714      	adds	r7, #20
 801a93e:	46bd      	mov	sp, r7
 801a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a944:	4770      	bx	lr
	...

0801a948 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b08a      	sub	sp, #40	; 0x28
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
 801a950:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801a952:	f107 030c 	add.w	r3, r7, #12
 801a956:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	781b      	ldrb	r3, [r3, #0]
 801a95c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 801a960:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a964:	2b2f      	cmp	r3, #47	; 0x2f
 801a966:	d903      	bls.n	801a970 <ip4addr_aton+0x28>
 801a968:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a96c:	2b39      	cmp	r3, #57	; 0x39
 801a96e:	d901      	bls.n	801a974 <ip4addr_aton+0x2c>
      return 0;
 801a970:	2300      	movs	r3, #0
 801a972:	e11e      	b.n	801abb2 <ip4addr_aton+0x26a>
    }
    val = 0;
 801a974:	2300      	movs	r3, #0
 801a976:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801a978:	230a      	movs	r3, #10
 801a97a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801a97e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a982:	2b30      	cmp	r3, #48	; 0x30
 801a984:	d11c      	bne.n	801a9c0 <ip4addr_aton+0x78>
      c = *++cp;
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	3301      	adds	r3, #1
 801a98a:	607b      	str	r3, [r7, #4]
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	781b      	ldrb	r3, [r3, #0]
 801a990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801a994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a998:	2b78      	cmp	r3, #120	; 0x78
 801a99a:	d003      	beq.n	801a9a4 <ip4addr_aton+0x5c>
 801a99c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a9a0:	2b58      	cmp	r3, #88	; 0x58
 801a9a2:	d10a      	bne.n	801a9ba <ip4addr_aton+0x72>
        base = 16;
 801a9a4:	2310      	movs	r3, #16
 801a9a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	3301      	adds	r3, #1
 801a9ae:	607b      	str	r3, [r7, #4]
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	781b      	ldrb	r3, [r3, #0]
 801a9b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a9b8:	e002      	b.n	801a9c0 <ip4addr_aton+0x78>
      } else {
        base = 8;
 801a9ba:	2308      	movs	r3, #8
 801a9bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 801a9c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a9c4:	2b2f      	cmp	r3, #47	; 0x2f
 801a9c6:	d915      	bls.n	801a9f4 <ip4addr_aton+0xac>
 801a9c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a9cc:	2b39      	cmp	r3, #57	; 0x39
 801a9ce:	d811      	bhi.n	801a9f4 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 801a9d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a9d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a9d6:	fb02 f203 	mul.w	r2, r2, r3
 801a9da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a9de:	4413      	add	r3, r2
 801a9e0:	3b30      	subs	r3, #48	; 0x30
 801a9e2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	3301      	adds	r3, #1
 801a9e8:	607b      	str	r3, [r7, #4]
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	781b      	ldrb	r3, [r3, #0]
 801a9ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a9f2:	e036      	b.n	801aa62 <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 801a9f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a9f8:	2b10      	cmp	r3, #16
 801a9fa:	d133      	bne.n	801aa64 <ip4addr_aton+0x11c>
 801a9fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aa00:	2b2f      	cmp	r3, #47	; 0x2f
 801aa02:	d903      	bls.n	801aa0c <ip4addr_aton+0xc4>
 801aa04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aa08:	2b39      	cmp	r3, #57	; 0x39
 801aa0a:	d90f      	bls.n	801aa2c <ip4addr_aton+0xe4>
 801aa0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aa10:	2b60      	cmp	r3, #96	; 0x60
 801aa12:	d903      	bls.n	801aa1c <ip4addr_aton+0xd4>
 801aa14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aa18:	2b66      	cmp	r3, #102	; 0x66
 801aa1a:	d907      	bls.n	801aa2c <ip4addr_aton+0xe4>
 801aa1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aa20:	2b40      	cmp	r3, #64	; 0x40
 801aa22:	d91f      	bls.n	801aa64 <ip4addr_aton+0x11c>
 801aa24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aa28:	2b46      	cmp	r3, #70	; 0x46
 801aa2a:	d81b      	bhi.n	801aa64 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa2e:	011b      	lsls	r3, r3, #4
 801aa30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801aa34:	f102 010a 	add.w	r1, r2, #10
 801aa38:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801aa3c:	2a60      	cmp	r2, #96	; 0x60
 801aa3e:	d905      	bls.n	801aa4c <ip4addr_aton+0x104>
 801aa40:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801aa44:	2a7a      	cmp	r2, #122	; 0x7a
 801aa46:	d801      	bhi.n	801aa4c <ip4addr_aton+0x104>
 801aa48:	2261      	movs	r2, #97	; 0x61
 801aa4a:	e000      	b.n	801aa4e <ip4addr_aton+0x106>
 801aa4c:	2241      	movs	r2, #65	; 0x41
 801aa4e:	1a8a      	subs	r2, r1, r2
 801aa50:	4313      	orrs	r3, r2
 801aa52:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	3301      	adds	r3, #1
 801aa58:	607b      	str	r3, [r7, #4]
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	781b      	ldrb	r3, [r3, #0]
 801aa5e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (isdigit(c)) {
 801aa62:	e7ad      	b.n	801a9c0 <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 801aa64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aa68:	2b2e      	cmp	r3, #46	; 0x2e
 801aa6a:	d114      	bne.n	801aa96 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801aa6c:	f107 030c 	add.w	r3, r7, #12
 801aa70:	330c      	adds	r3, #12
 801aa72:	69fa      	ldr	r2, [r7, #28]
 801aa74:	4293      	cmp	r3, r2
 801aa76:	d801      	bhi.n	801aa7c <ip4addr_aton+0x134>
        return 0;
 801aa78:	2300      	movs	r3, #0
 801aa7a:	e09a      	b.n	801abb2 <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 801aa7c:	69fb      	ldr	r3, [r7, #28]
 801aa7e:	1d1a      	adds	r2, r3, #4
 801aa80:	61fa      	str	r2, [r7, #28]
 801aa82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aa84:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	3301      	adds	r3, #1
 801aa8a:	607b      	str	r3, [r7, #4]
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	781b      	ldrb	r3, [r3, #0]
 801aa90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!isdigit(c)) {
 801aa94:	e764      	b.n	801a960 <ip4addr_aton+0x18>
    } else {
      break;
 801aa96:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 801aa98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d019      	beq.n	801aad4 <ip4addr_aton+0x18c>
 801aaa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aaa4:	2b20      	cmp	r3, #32
 801aaa6:	d015      	beq.n	801aad4 <ip4addr_aton+0x18c>
 801aaa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aaac:	2b0c      	cmp	r3, #12
 801aaae:	d011      	beq.n	801aad4 <ip4addr_aton+0x18c>
 801aab0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aab4:	2b0a      	cmp	r3, #10
 801aab6:	d00d      	beq.n	801aad4 <ip4addr_aton+0x18c>
 801aab8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aabc:	2b0d      	cmp	r3, #13
 801aabe:	d009      	beq.n	801aad4 <ip4addr_aton+0x18c>
 801aac0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aac4:	2b09      	cmp	r3, #9
 801aac6:	d005      	beq.n	801aad4 <ip4addr_aton+0x18c>
 801aac8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aacc:	2b0b      	cmp	r3, #11
 801aace:	d001      	beq.n	801aad4 <ip4addr_aton+0x18c>
    return 0;
 801aad0:	2300      	movs	r3, #0
 801aad2:	e06e      	b.n	801abb2 <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801aad4:	69fa      	ldr	r2, [r7, #28]
 801aad6:	f107 030c 	add.w	r3, r7, #12
 801aada:	1ad3      	subs	r3, r2, r3
 801aadc:	109b      	asrs	r3, r3, #2
 801aade:	3301      	adds	r3, #1
 801aae0:	2b04      	cmp	r3, #4
 801aae2:	d853      	bhi.n	801ab8c <ip4addr_aton+0x244>
 801aae4:	a201      	add	r2, pc, #4	; (adr r2, 801aaec <ip4addr_aton+0x1a4>)
 801aae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aaea:	bf00      	nop
 801aaec:	0801ab01 	.word	0x0801ab01
 801aaf0:	0801ab9d 	.word	0x0801ab9d
 801aaf4:	0801ab05 	.word	0x0801ab05
 801aaf8:	0801ab27 	.word	0x0801ab27
 801aafc:	0801ab55 	.word	0x0801ab55

  case 0:
    return 0;       /* initial nondigit */
 801ab00:	2300      	movs	r3, #0
 801ab02:	e056      	b.n	801abb2 <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 801ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ab0a:	d301      	bcc.n	801ab10 <ip4addr_aton+0x1c8>
      return 0;
 801ab0c:	2300      	movs	r3, #0
 801ab0e:	e050      	b.n	801abb2 <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	2bff      	cmp	r3, #255	; 0xff
 801ab14:	d901      	bls.n	801ab1a <ip4addr_aton+0x1d2>
      return 0;
 801ab16:	2300      	movs	r3, #0
 801ab18:	e04b      	b.n	801abb2 <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	061b      	lsls	r3, r3, #24
 801ab1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab20:	4313      	orrs	r3, r2
 801ab22:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801ab24:	e03b      	b.n	801ab9e <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 801ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ab2c:	d301      	bcc.n	801ab32 <ip4addr_aton+0x1ea>
      return 0;
 801ab2e:	2300      	movs	r3, #0
 801ab30:	e03f      	b.n	801abb2 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801ab32:	68fb      	ldr	r3, [r7, #12]
 801ab34:	2bff      	cmp	r3, #255	; 0xff
 801ab36:	d802      	bhi.n	801ab3e <ip4addr_aton+0x1f6>
 801ab38:	693b      	ldr	r3, [r7, #16]
 801ab3a:	2bff      	cmp	r3, #255	; 0xff
 801ab3c:	d901      	bls.n	801ab42 <ip4addr_aton+0x1fa>
      return 0;
 801ab3e:	2300      	movs	r3, #0
 801ab40:	e037      	b.n	801abb2 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	061a      	lsls	r2, r3, #24
 801ab46:	693b      	ldr	r3, [r7, #16]
 801ab48:	041b      	lsls	r3, r3, #16
 801ab4a:	4313      	orrs	r3, r2
 801ab4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab4e:	4313      	orrs	r3, r2
 801ab50:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801ab52:	e024      	b.n	801ab9e <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 801ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab56:	2bff      	cmp	r3, #255	; 0xff
 801ab58:	d901      	bls.n	801ab5e <ip4addr_aton+0x216>
      return 0;
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	e029      	b.n	801abb2 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	2bff      	cmp	r3, #255	; 0xff
 801ab62:	d805      	bhi.n	801ab70 <ip4addr_aton+0x228>
 801ab64:	693b      	ldr	r3, [r7, #16]
 801ab66:	2bff      	cmp	r3, #255	; 0xff
 801ab68:	d802      	bhi.n	801ab70 <ip4addr_aton+0x228>
 801ab6a:	697b      	ldr	r3, [r7, #20]
 801ab6c:	2bff      	cmp	r3, #255	; 0xff
 801ab6e:	d901      	bls.n	801ab74 <ip4addr_aton+0x22c>
      return 0;
 801ab70:	2300      	movs	r3, #0
 801ab72:	e01e      	b.n	801abb2 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	061a      	lsls	r2, r3, #24
 801ab78:	693b      	ldr	r3, [r7, #16]
 801ab7a:	041b      	lsls	r3, r3, #16
 801ab7c:	431a      	orrs	r2, r3
 801ab7e:	697b      	ldr	r3, [r7, #20]
 801ab80:	021b      	lsls	r3, r3, #8
 801ab82:	4313      	orrs	r3, r2
 801ab84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab86:	4313      	orrs	r3, r2
 801ab88:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801ab8a:	e008      	b.n	801ab9e <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 801ab8c:	4b0b      	ldr	r3, [pc, #44]	; (801abbc <ip4addr_aton+0x274>)
 801ab8e:	f240 1203 	movw	r2, #259	; 0x103
 801ab92:	490b      	ldr	r1, [pc, #44]	; (801abc0 <ip4addr_aton+0x278>)
 801ab94:	480b      	ldr	r0, [pc, #44]	; (801abc4 <ip4addr_aton+0x27c>)
 801ab96:	f00c fc4b 	bl	8027430 <iprintf>
    break;
 801ab9a:	e000      	b.n	801ab9e <ip4addr_aton+0x256>
    break;
 801ab9c:	bf00      	nop
  }
  if (addr) {
 801ab9e:	683b      	ldr	r3, [r7, #0]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d005      	beq.n	801abb0 <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801aba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aba6:	f7fe fb4d 	bl	8019244 <lwip_htonl>
 801abaa:	4602      	mov	r2, r0
 801abac:	683b      	ldr	r3, [r7, #0]
 801abae:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801abb0:	2301      	movs	r3, #1
}
 801abb2:	4618      	mov	r0, r3
 801abb4:	3728      	adds	r7, #40	; 0x28
 801abb6:	46bd      	mov	sp, r7
 801abb8:	bd80      	pop	{r7, pc}
 801abba:	bf00      	nop
 801abbc:	08029c98 	.word	0x08029c98
 801abc0:	08029cd4 	.word	0x08029cd4
 801abc4:	08029ce0 	.word	0x08029ce0

0801abc8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801abc8:	b580      	push	{r7, lr}
 801abca:	b084      	sub	sp, #16
 801abcc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801abce:	2300      	movs	r3, #0
 801abd0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801abd2:	4b12      	ldr	r3, [pc, #72]	; (801ac1c <ip_reass_tmr+0x54>)
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801abd8:	e018      	b.n	801ac0c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	7fdb      	ldrb	r3, [r3, #31]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d00b      	beq.n	801abfa <ip_reass_tmr+0x32>
      r->timer--;
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	7fdb      	ldrb	r3, [r3, #31]
 801abe6:	3b01      	subs	r3, #1
 801abe8:	b2da      	uxtb	r2, r3
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	60fb      	str	r3, [r7, #12]
 801abf8:	e008      	b.n	801ac0c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ac04:	68b9      	ldr	r1, [r7, #8]
 801ac06:	6878      	ldr	r0, [r7, #4]
 801ac08:	f000 f80a 	bl	801ac20 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d1e3      	bne.n	801abda <ip_reass_tmr+0x12>
     }
   }
}
 801ac12:	bf00      	nop
 801ac14:	3710      	adds	r7, #16
 801ac16:	46bd      	mov	sp, r7
 801ac18:	bd80      	pop	{r7, pc}
 801ac1a:	bf00      	nop
 801ac1c:	200094a8 	.word	0x200094a8

0801ac20 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b088      	sub	sp, #32
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
 801ac28:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ac2e:	683a      	ldr	r2, [r7, #0]
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	429a      	cmp	r2, r3
 801ac34:	d105      	bne.n	801ac42 <ip_reass_free_complete_datagram+0x22>
 801ac36:	4b45      	ldr	r3, [pc, #276]	; (801ad4c <ip_reass_free_complete_datagram+0x12c>)
 801ac38:	22ab      	movs	r2, #171	; 0xab
 801ac3a:	4945      	ldr	r1, [pc, #276]	; (801ad50 <ip_reass_free_complete_datagram+0x130>)
 801ac3c:	4845      	ldr	r0, [pc, #276]	; (801ad54 <ip_reass_free_complete_datagram+0x134>)
 801ac3e:	f00c fbf7 	bl	8027430 <iprintf>
  if (prev != NULL) {
 801ac42:	683b      	ldr	r3, [r7, #0]
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d00a      	beq.n	801ac5e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ac48:	683b      	ldr	r3, [r7, #0]
 801ac4a:	681a      	ldr	r2, [r3, #0]
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	429a      	cmp	r2, r3
 801ac50:	d005      	beq.n	801ac5e <ip_reass_free_complete_datagram+0x3e>
 801ac52:	4b3e      	ldr	r3, [pc, #248]	; (801ad4c <ip_reass_free_complete_datagram+0x12c>)
 801ac54:	22ad      	movs	r2, #173	; 0xad
 801ac56:	4940      	ldr	r1, [pc, #256]	; (801ad58 <ip_reass_free_complete_datagram+0x138>)
 801ac58:	483e      	ldr	r0, [pc, #248]	; (801ad54 <ip_reass_free_complete_datagram+0x134>)
 801ac5a:	f00c fbe9 	bl	8027430 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	685b      	ldr	r3, [r3, #4]
 801ac62:	685b      	ldr	r3, [r3, #4]
 801ac64:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ac66:	697b      	ldr	r3, [r7, #20]
 801ac68:	889b      	ldrh	r3, [r3, #4]
 801ac6a:	b29b      	uxth	r3, r3
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d12a      	bne.n	801acc6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	685b      	ldr	r3, [r3, #4]
 801ac74:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ac76:	697b      	ldr	r3, [r7, #20]
 801ac78:	681a      	ldr	r2, [r3, #0]
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ac7e:	69bb      	ldr	r3, [r7, #24]
 801ac80:	6858      	ldr	r0, [r3, #4]
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	3308      	adds	r3, #8
 801ac86:	2214      	movs	r2, #20
 801ac88:	4619      	mov	r1, r3
 801ac8a:	f00d fbf0 	bl	802846e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ac8e:	2101      	movs	r1, #1
 801ac90:	69b8      	ldr	r0, [r7, #24]
 801ac92:	f7ff fb31 	bl	801a2f8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ac96:	69b8      	ldr	r0, [r7, #24]
 801ac98:	f001 ff8a 	bl	801cbb0 <pbuf_clen>
 801ac9c:	4603      	mov	r3, r0
 801ac9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801aca0:	8bfa      	ldrh	r2, [r7, #30]
 801aca2:	8a7b      	ldrh	r3, [r7, #18]
 801aca4:	4413      	add	r3, r2
 801aca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801acaa:	db05      	blt.n	801acb8 <ip_reass_free_complete_datagram+0x98>
 801acac:	4b27      	ldr	r3, [pc, #156]	; (801ad4c <ip_reass_free_complete_datagram+0x12c>)
 801acae:	22bc      	movs	r2, #188	; 0xbc
 801acb0:	492a      	ldr	r1, [pc, #168]	; (801ad5c <ip_reass_free_complete_datagram+0x13c>)
 801acb2:	4828      	ldr	r0, [pc, #160]	; (801ad54 <ip_reass_free_complete_datagram+0x134>)
 801acb4:	f00c fbbc 	bl	8027430 <iprintf>
    pbufs_freed += clen;
 801acb8:	8bfa      	ldrh	r2, [r7, #30]
 801acba:	8a7b      	ldrh	r3, [r7, #18]
 801acbc:	4413      	add	r3, r2
 801acbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801acc0:	69b8      	ldr	r0, [r7, #24]
 801acc2:	f001 fedb 	bl	801ca7c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	685b      	ldr	r3, [r3, #4]
 801acca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801accc:	e01f      	b.n	801ad0e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801acce:	69bb      	ldr	r3, [r7, #24]
 801acd0:	685b      	ldr	r3, [r3, #4]
 801acd2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801acd4:	69bb      	ldr	r3, [r7, #24]
 801acd6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801acd8:	697b      	ldr	r3, [r7, #20]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801acde:	68f8      	ldr	r0, [r7, #12]
 801ace0:	f001 ff66 	bl	801cbb0 <pbuf_clen>
 801ace4:	4603      	mov	r3, r0
 801ace6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ace8:	8bfa      	ldrh	r2, [r7, #30]
 801acea:	8a7b      	ldrh	r3, [r7, #18]
 801acec:	4413      	add	r3, r2
 801acee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801acf2:	db05      	blt.n	801ad00 <ip_reass_free_complete_datagram+0xe0>
 801acf4:	4b15      	ldr	r3, [pc, #84]	; (801ad4c <ip_reass_free_complete_datagram+0x12c>)
 801acf6:	22cc      	movs	r2, #204	; 0xcc
 801acf8:	4918      	ldr	r1, [pc, #96]	; (801ad5c <ip_reass_free_complete_datagram+0x13c>)
 801acfa:	4816      	ldr	r0, [pc, #88]	; (801ad54 <ip_reass_free_complete_datagram+0x134>)
 801acfc:	f00c fb98 	bl	8027430 <iprintf>
    pbufs_freed += clen;
 801ad00:	8bfa      	ldrh	r2, [r7, #30]
 801ad02:	8a7b      	ldrh	r3, [r7, #18]
 801ad04:	4413      	add	r3, r2
 801ad06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801ad08:	68f8      	ldr	r0, [r7, #12]
 801ad0a:	f001 feb7 	bl	801ca7c <pbuf_free>
  while (p != NULL) {
 801ad0e:	69bb      	ldr	r3, [r7, #24]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d1dc      	bne.n	801acce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801ad14:	6839      	ldr	r1, [r7, #0]
 801ad16:	6878      	ldr	r0, [r7, #4]
 801ad18:	f000 f8c2 	bl	801aea0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 801ad1c:	4b10      	ldr	r3, [pc, #64]	; (801ad60 <ip_reass_free_complete_datagram+0x140>)
 801ad1e:	881b      	ldrh	r3, [r3, #0]
 801ad20:	8bfa      	ldrh	r2, [r7, #30]
 801ad22:	429a      	cmp	r2, r3
 801ad24:	d905      	bls.n	801ad32 <ip_reass_free_complete_datagram+0x112>
 801ad26:	4b09      	ldr	r3, [pc, #36]	; (801ad4c <ip_reass_free_complete_datagram+0x12c>)
 801ad28:	22d2      	movs	r2, #210	; 0xd2
 801ad2a:	490e      	ldr	r1, [pc, #56]	; (801ad64 <ip_reass_free_complete_datagram+0x144>)
 801ad2c:	4809      	ldr	r0, [pc, #36]	; (801ad54 <ip_reass_free_complete_datagram+0x134>)
 801ad2e:	f00c fb7f 	bl	8027430 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801ad32:	4b0b      	ldr	r3, [pc, #44]	; (801ad60 <ip_reass_free_complete_datagram+0x140>)
 801ad34:	881a      	ldrh	r2, [r3, #0]
 801ad36:	8bfb      	ldrh	r3, [r7, #30]
 801ad38:	1ad3      	subs	r3, r2, r3
 801ad3a:	b29a      	uxth	r2, r3
 801ad3c:	4b08      	ldr	r3, [pc, #32]	; (801ad60 <ip_reass_free_complete_datagram+0x140>)
 801ad3e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801ad40:	8bfb      	ldrh	r3, [r7, #30]
}
 801ad42:	4618      	mov	r0, r3
 801ad44:	3720      	adds	r7, #32
 801ad46:	46bd      	mov	sp, r7
 801ad48:	bd80      	pop	{r7, pc}
 801ad4a:	bf00      	nop
 801ad4c:	08029d08 	.word	0x08029d08
 801ad50:	08029d44 	.word	0x08029d44
 801ad54:	08029d50 	.word	0x08029d50
 801ad58:	08029d78 	.word	0x08029d78
 801ad5c:	08029d8c 	.word	0x08029d8c
 801ad60:	200094ac 	.word	0x200094ac
 801ad64:	08029dac 	.word	0x08029dac

0801ad68 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b08a      	sub	sp, #40	; 0x28
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	6078      	str	r0, [r7, #4]
 801ad70:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ad72:	2300      	movs	r3, #0
 801ad74:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ad76:	2300      	movs	r3, #0
 801ad78:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ad7a:	2300      	movs	r3, #0
 801ad7c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ad7e:	2300      	movs	r3, #0
 801ad80:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ad82:	2300      	movs	r3, #0
 801ad84:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ad86:	4b28      	ldr	r3, [pc, #160]	; (801ae28 <ip_reass_remove_oldest_datagram+0xc0>)
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ad8c:	e030      	b.n	801adf0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad90:	695a      	ldr	r2, [r3, #20]
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	68db      	ldr	r3, [r3, #12]
 801ad96:	429a      	cmp	r2, r3
 801ad98:	d10c      	bne.n	801adb4 <ip_reass_remove_oldest_datagram+0x4c>
 801ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad9c:	699a      	ldr	r2, [r3, #24]
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	691b      	ldr	r3, [r3, #16]
 801ada2:	429a      	cmp	r2, r3
 801ada4:	d106      	bne.n	801adb4 <ip_reass_remove_oldest_datagram+0x4c>
 801ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ada8:	899a      	ldrh	r2, [r3, #12]
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	889b      	ldrh	r3, [r3, #4]
 801adae:	b29b      	uxth	r3, r3
 801adb0:	429a      	cmp	r2, r3
 801adb2:	d014      	beq.n	801adde <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801adb4:	693b      	ldr	r3, [r7, #16]
 801adb6:	3301      	adds	r3, #1
 801adb8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801adba:	6a3b      	ldr	r3, [r7, #32]
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	d104      	bne.n	801adca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801adc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adc2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801adc4:	69fb      	ldr	r3, [r7, #28]
 801adc6:	61bb      	str	r3, [r7, #24]
 801adc8:	e009      	b.n	801adde <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adcc:	7fda      	ldrb	r2, [r3, #31]
 801adce:	6a3b      	ldr	r3, [r7, #32]
 801add0:	7fdb      	ldrb	r3, [r3, #31]
 801add2:	429a      	cmp	r2, r3
 801add4:	d803      	bhi.n	801adde <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801add8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801adda:	69fb      	ldr	r3, [r7, #28]
 801addc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d001      	beq.n	801adea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ade8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d1cb      	bne.n	801ad8e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801adf6:	6a3b      	ldr	r3, [r7, #32]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d008      	beq.n	801ae0e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801adfc:	69b9      	ldr	r1, [r7, #24]
 801adfe:	6a38      	ldr	r0, [r7, #32]
 801ae00:	f7ff ff0e 	bl	801ac20 <ip_reass_free_complete_datagram>
 801ae04:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ae06:	697a      	ldr	r2, [r7, #20]
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	4413      	add	r3, r2
 801ae0c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ae0e:	697a      	ldr	r2, [r7, #20]
 801ae10:	683b      	ldr	r3, [r7, #0]
 801ae12:	429a      	cmp	r2, r3
 801ae14:	da02      	bge.n	801ae1c <ip_reass_remove_oldest_datagram+0xb4>
 801ae16:	693b      	ldr	r3, [r7, #16]
 801ae18:	2b01      	cmp	r3, #1
 801ae1a:	dcac      	bgt.n	801ad76 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801ae1c:	697b      	ldr	r3, [r7, #20]
}
 801ae1e:	4618      	mov	r0, r3
 801ae20:	3728      	adds	r7, #40	; 0x28
 801ae22:	46bd      	mov	sp, r7
 801ae24:	bd80      	pop	{r7, pc}
 801ae26:	bf00      	nop
 801ae28:	200094a8 	.word	0x200094a8

0801ae2c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ae2c:	b580      	push	{r7, lr}
 801ae2e:	b084      	sub	sp, #16
 801ae30:	af00      	add	r7, sp, #0
 801ae32:	6078      	str	r0, [r7, #4]
 801ae34:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ae36:	2003      	movs	r0, #3
 801ae38:	f001 f83e 	bl	801beb8 <memp_malloc>
 801ae3c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ae3e:	68fb      	ldr	r3, [r7, #12]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d110      	bne.n	801ae66 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ae44:	6839      	ldr	r1, [r7, #0]
 801ae46:	6878      	ldr	r0, [r7, #4]
 801ae48:	f7ff ff8e 	bl	801ad68 <ip_reass_remove_oldest_datagram>
 801ae4c:	4602      	mov	r2, r0
 801ae4e:	683b      	ldr	r3, [r7, #0]
 801ae50:	429a      	cmp	r2, r3
 801ae52:	db03      	blt.n	801ae5c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ae54:	2003      	movs	r0, #3
 801ae56:	f001 f82f 	bl	801beb8 <memp_malloc>
 801ae5a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d101      	bne.n	801ae66 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801ae62:	2300      	movs	r3, #0
 801ae64:	e016      	b.n	801ae94 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ae66:	2220      	movs	r2, #32
 801ae68:	2100      	movs	r1, #0
 801ae6a:	68f8      	ldr	r0, [r7, #12]
 801ae6c:	f00d fb0a 	bl	8028484 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	2203      	movs	r2, #3
 801ae74:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ae76:	4b09      	ldr	r3, [pc, #36]	; (801ae9c <ip_reass_enqueue_new_datagram+0x70>)
 801ae78:	681a      	ldr	r2, [r3, #0]
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ae7e:	4a07      	ldr	r2, [pc, #28]	; (801ae9c <ip_reass_enqueue_new_datagram+0x70>)
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ae84:	68fb      	ldr	r3, [r7, #12]
 801ae86:	3308      	adds	r3, #8
 801ae88:	2214      	movs	r2, #20
 801ae8a:	6879      	ldr	r1, [r7, #4]
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	f00d faee 	bl	802846e <memcpy>
  return ipr;
 801ae92:	68fb      	ldr	r3, [r7, #12]
}
 801ae94:	4618      	mov	r0, r3
 801ae96:	3710      	adds	r7, #16
 801ae98:	46bd      	mov	sp, r7
 801ae9a:	bd80      	pop	{r7, pc}
 801ae9c:	200094a8 	.word	0x200094a8

0801aea0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801aea0:	b580      	push	{r7, lr}
 801aea2:	b082      	sub	sp, #8
 801aea4:	af00      	add	r7, sp, #0
 801aea6:	6078      	str	r0, [r7, #4]
 801aea8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801aeaa:	4b10      	ldr	r3, [pc, #64]	; (801aeec <ip_reass_dequeue_datagram+0x4c>)
 801aeac:	681a      	ldr	r2, [r3, #0]
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	429a      	cmp	r2, r3
 801aeb2:	d104      	bne.n	801aebe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	4a0c      	ldr	r2, [pc, #48]	; (801aeec <ip_reass_dequeue_datagram+0x4c>)
 801aeba:	6013      	str	r3, [r2, #0]
 801aebc:	e00d      	b.n	801aeda <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801aebe:	683b      	ldr	r3, [r7, #0]
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d106      	bne.n	801aed2 <ip_reass_dequeue_datagram+0x32>
 801aec4:	4b0a      	ldr	r3, [pc, #40]	; (801aef0 <ip_reass_dequeue_datagram+0x50>)
 801aec6:	f240 1245 	movw	r2, #325	; 0x145
 801aeca:	490a      	ldr	r1, [pc, #40]	; (801aef4 <ip_reass_dequeue_datagram+0x54>)
 801aecc:	480a      	ldr	r0, [pc, #40]	; (801aef8 <ip_reass_dequeue_datagram+0x58>)
 801aece:	f00c faaf 	bl	8027430 <iprintf>
    prev->next = ipr->next;
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	681a      	ldr	r2, [r3, #0]
 801aed6:	683b      	ldr	r3, [r7, #0]
 801aed8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801aeda:	6879      	ldr	r1, [r7, #4]
 801aedc:	2003      	movs	r0, #3
 801aede:	f001 f83d 	bl	801bf5c <memp_free>
}
 801aee2:	bf00      	nop
 801aee4:	3708      	adds	r7, #8
 801aee6:	46bd      	mov	sp, r7
 801aee8:	bd80      	pop	{r7, pc}
 801aeea:	bf00      	nop
 801aeec:	200094a8 	.word	0x200094a8
 801aef0:	08029d08 	.word	0x08029d08
 801aef4:	08029dc8 	.word	0x08029dc8
 801aef8:	08029d50 	.word	0x08029d50

0801aefc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b08c      	sub	sp, #48	; 0x30
 801af00:	af00      	add	r7, sp, #0
 801af02:	60f8      	str	r0, [r7, #12]
 801af04:	60b9      	str	r1, [r7, #8]
 801af06:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 801af08:	2300      	movs	r3, #0
 801af0a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801af0c:	2301      	movs	r3, #1
 801af0e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 801af10:	68bb      	ldr	r3, [r7, #8]
 801af12:	685b      	ldr	r3, [r3, #4]
 801af14:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801af16:	69fb      	ldr	r3, [r7, #28]
 801af18:	885b      	ldrh	r3, [r3, #2]
 801af1a:	b29b      	uxth	r3, r3
 801af1c:	4618      	mov	r0, r3
 801af1e:	f7fe f983 	bl	8019228 <lwip_htons>
 801af22:	4603      	mov	r3, r0
 801af24:	461a      	mov	r2, r3
 801af26:	69fb      	ldr	r3, [r7, #28]
 801af28:	781b      	ldrb	r3, [r3, #0]
 801af2a:	b29b      	uxth	r3, r3
 801af2c:	f003 030f 	and.w	r3, r3, #15
 801af30:	b29b      	uxth	r3, r3
 801af32:	009b      	lsls	r3, r3, #2
 801af34:	b29b      	uxth	r3, r3
 801af36:	1ad3      	subs	r3, r2, r3
 801af38:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801af3a:	69fb      	ldr	r3, [r7, #28]
 801af3c:	88db      	ldrh	r3, [r3, #6]
 801af3e:	b29b      	uxth	r3, r3
 801af40:	4618      	mov	r0, r3
 801af42:	f7fe f971 	bl	8019228 <lwip_htons>
 801af46:	4603      	mov	r3, r0
 801af48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801af4c:	b29b      	uxth	r3, r3
 801af4e:	00db      	lsls	r3, r3, #3
 801af50:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801af52:	68bb      	ldr	r3, [r7, #8]
 801af54:	685b      	ldr	r3, [r3, #4]
 801af56:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801af58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af5a:	2200      	movs	r2, #0
 801af5c:	701a      	strb	r2, [r3, #0]
 801af5e:	2200      	movs	r2, #0
 801af60:	705a      	strb	r2, [r3, #1]
 801af62:	2200      	movs	r2, #0
 801af64:	709a      	strb	r2, [r3, #2]
 801af66:	2200      	movs	r2, #0
 801af68:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801af6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af6c:	8b3a      	ldrh	r2, [r7, #24]
 801af6e:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 801af70:	8b3a      	ldrh	r2, [r7, #24]
 801af72:	8b7b      	ldrh	r3, [r7, #26]
 801af74:	4413      	add	r3, r2
 801af76:	b29a      	uxth	r2, r3
 801af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af7a:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	685b      	ldr	r3, [r3, #4]
 801af80:	627b      	str	r3, [r7, #36]	; 0x24
 801af82:	e061      	b.n	801b048 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801af84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af86:	685b      	ldr	r3, [r3, #4]
 801af88:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 801af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af8c:	889b      	ldrh	r3, [r3, #4]
 801af8e:	b29a      	uxth	r2, r3
 801af90:	697b      	ldr	r3, [r7, #20]
 801af92:	889b      	ldrh	r3, [r3, #4]
 801af94:	b29b      	uxth	r3, r3
 801af96:	429a      	cmp	r2, r3
 801af98:	d232      	bcs.n	801b000 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801af9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af9e:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d01f      	beq.n	801afe6 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801afa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afa8:	889b      	ldrh	r3, [r3, #4]
 801afaa:	b29a      	uxth	r2, r3
 801afac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afae:	88db      	ldrh	r3, [r3, #6]
 801afb0:	b29b      	uxth	r3, r3
 801afb2:	429a      	cmp	r2, r3
 801afb4:	f0c0 80e8 	bcc.w	801b188 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
 801afb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afba:	88db      	ldrh	r3, [r3, #6]
 801afbc:	b29a      	uxth	r2, r3
 801afbe:	697b      	ldr	r3, [r7, #20]
 801afc0:	889b      	ldrh	r3, [r3, #4]
 801afc2:	b29b      	uxth	r3, r3
 801afc4:	429a      	cmp	r2, r3
 801afc6:	f200 80df 	bhi.w	801b188 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801afca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afcc:	68ba      	ldr	r2, [r7, #8]
 801afce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801afd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afd2:	88db      	ldrh	r3, [r3, #6]
 801afd4:	b29a      	uxth	r2, r3
 801afd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afd8:	889b      	ldrh	r3, [r3, #4]
 801afda:	b29b      	uxth	r3, r3
 801afdc:	429a      	cmp	r2, r3
 801afde:	d037      	beq.n	801b050 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801afe0:	2300      	movs	r3, #0
 801afe2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801afe4:	e034      	b.n	801b050 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 801afe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afe8:	88db      	ldrh	r3, [r3, #6]
 801afea:	b29a      	uxth	r2, r3
 801afec:	697b      	ldr	r3, [r7, #20]
 801afee:	889b      	ldrh	r3, [r3, #4]
 801aff0:	b29b      	uxth	r3, r3
 801aff2:	429a      	cmp	r2, r3
 801aff4:	f200 80c3 	bhi.w	801b17e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
        ipr->p = new_p;
 801aff8:	68fb      	ldr	r3, [r7, #12]
 801affa:	68ba      	ldr	r2, [r7, #8]
 801affc:	605a      	str	r2, [r3, #4]
      break;
 801affe:	e027      	b.n	801b050 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 801b000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b002:	889b      	ldrh	r3, [r3, #4]
 801b004:	b29a      	uxth	r2, r3
 801b006:	697b      	ldr	r3, [r7, #20]
 801b008:	889b      	ldrh	r3, [r3, #4]
 801b00a:	b29b      	uxth	r3, r3
 801b00c:	429a      	cmp	r2, r3
 801b00e:	f000 80b8 	beq.w	801b182 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b014:	889b      	ldrh	r3, [r3, #4]
 801b016:	b29a      	uxth	r2, r3
 801b018:	697b      	ldr	r3, [r7, #20]
 801b01a:	88db      	ldrh	r3, [r3, #6]
 801b01c:	b29b      	uxth	r3, r3
 801b01e:	429a      	cmp	r2, r3
 801b020:	f0c0 80b1 	bcc.w	801b186 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b026:	2b00      	cmp	r3, #0
 801b028:	d009      	beq.n	801b03e <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 801b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b02c:	88db      	ldrh	r3, [r3, #6]
 801b02e:	b29a      	uxth	r2, r3
 801b030:	697b      	ldr	r3, [r7, #20]
 801b032:	889b      	ldrh	r3, [r3, #4]
 801b034:	b29b      	uxth	r3, r3
 801b036:	429a      	cmp	r2, r3
 801b038:	d001      	beq.n	801b03e <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b03a:	2300      	movs	r3, #0
 801b03c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b03e:	697b      	ldr	r3, [r7, #20]
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801b044:	697b      	ldr	r3, [r7, #20]
 801b046:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d19a      	bne.n	801af84 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801b04e:	e000      	b.n	801b052 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 801b050:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b054:	2b00      	cmp	r3, #0
 801b056:	d12d      	bne.n	801b0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 801b058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d01c      	beq.n	801b098 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b060:	88db      	ldrh	r3, [r3, #6]
 801b062:	b29a      	uxth	r2, r3
 801b064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b066:	889b      	ldrh	r3, [r3, #4]
 801b068:	b29b      	uxth	r3, r3
 801b06a:	429a      	cmp	r2, r3
 801b06c:	d906      	bls.n	801b07c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801b06e:	4b50      	ldr	r3, [pc, #320]	; (801b1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b070:	f240 12ab 	movw	r2, #427	; 0x1ab
 801b074:	494f      	ldr	r1, [pc, #316]	; (801b1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801b076:	4850      	ldr	r0, [pc, #320]	; (801b1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b078:	f00c f9da 	bl	8027430 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b07e:	68ba      	ldr	r2, [r7, #8]
 801b080:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b084:	88db      	ldrh	r3, [r3, #6]
 801b086:	b29a      	uxth	r2, r3
 801b088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b08a:	889b      	ldrh	r3, [r3, #4]
 801b08c:	b29b      	uxth	r3, r3
 801b08e:	429a      	cmp	r2, r3
 801b090:	d010      	beq.n	801b0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801b092:	2300      	movs	r3, #0
 801b094:	623b      	str	r3, [r7, #32]
 801b096:	e00d      	b.n	801b0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	685b      	ldr	r3, [r3, #4]
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d006      	beq.n	801b0ae <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 801b0a0:	4b43      	ldr	r3, [pc, #268]	; (801b1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b0a2:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 801b0a6:	4945      	ldr	r1, [pc, #276]	; (801b1bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b0a8:	4843      	ldr	r0, [pc, #268]	; (801b1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b0aa:	f00c f9c1 	bl	8027430 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	68ba      	ldr	r2, [r7, #8]
 801b0b2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d105      	bne.n	801b0c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	7f9b      	ldrb	r3, [r3, #30]
 801b0be:	f003 0301 	and.w	r3, r3, #1
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d059      	beq.n	801b17a <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 801b0c6:	6a3b      	ldr	r3, [r7, #32]
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d04f      	beq.n	801b16c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	685b      	ldr	r3, [r3, #4]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d006      	beq.n	801b0e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	685b      	ldr	r3, [r3, #4]
 801b0d8:	685b      	ldr	r3, [r3, #4]
 801b0da:	889b      	ldrh	r3, [r3, #4]
 801b0dc:	b29b      	uxth	r3, r3
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d002      	beq.n	801b0e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	623b      	str	r3, [r7, #32]
 801b0e6:	e041      	b.n	801b16c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0ea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801b0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b0f2:	e012      	b.n	801b11a <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 801b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0f6:	685b      	ldr	r3, [r3, #4]
 801b0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0fc:	88db      	ldrh	r3, [r3, #6]
 801b0fe:	b29a      	uxth	r2, r3
 801b100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b102:	889b      	ldrh	r3, [r3, #4]
 801b104:	b29b      	uxth	r3, r3
 801b106:	429a      	cmp	r2, r3
 801b108:	d002      	beq.n	801b110 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 801b10a:	2300      	movs	r3, #0
 801b10c:	623b      	str	r3, [r7, #32]
            break;
 801b10e:	e007      	b.n	801b120 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 801b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b112:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801b114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d1e9      	bne.n	801b0f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b120:	6a3b      	ldr	r3, [r7, #32]
 801b122:	2b00      	cmp	r3, #0
 801b124:	d022      	beq.n	801b16c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b126:	68fb      	ldr	r3, [r7, #12]
 801b128:	685b      	ldr	r3, [r3, #4]
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d106      	bne.n	801b13c <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801b12e:	4b20      	ldr	r3, [pc, #128]	; (801b1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b130:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801b134:	4922      	ldr	r1, [pc, #136]	; (801b1c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b136:	4820      	ldr	r0, [pc, #128]	; (801b1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b138:	f00c f97a 	bl	8027430 <iprintf>
          LWIP_ASSERT("sanity check",
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	685b      	ldr	r3, [r3, #4]
 801b140:	685a      	ldr	r2, [r3, #4]
 801b142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b144:	429a      	cmp	r2, r3
 801b146:	d106      	bne.n	801b156 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 801b148:	4b19      	ldr	r3, [pc, #100]	; (801b1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b14a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801b14e:	491c      	ldr	r1, [pc, #112]	; (801b1c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b150:	4819      	ldr	r0, [pc, #100]	; (801b1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b152:	f00c f96d 	bl	8027430 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d006      	beq.n	801b16c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 801b15e:	4b14      	ldr	r3, [pc, #80]	; (801b1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b160:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801b164:	4917      	ldr	r1, [pc, #92]	; (801b1c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b166:	4814      	ldr	r0, [pc, #80]	; (801b1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b168:	f00c f962 	bl	8027430 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b16c:	6a3b      	ldr	r3, [r7, #32]
 801b16e:	2b00      	cmp	r3, #0
 801b170:	bf14      	ite	ne
 801b172:	2301      	movne	r3, #1
 801b174:	2300      	moveq	r3, #0
 801b176:	b2db      	uxtb	r3, r3
 801b178:	e016      	b.n	801b1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b17a:	2300      	movs	r3, #0
 801b17c:	e014      	b.n	801b1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
          goto freepbuf;
 801b17e:	bf00      	nop
 801b180:	e002      	b.n	801b188 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 801b182:	bf00      	nop
 801b184:	e000      	b.n	801b188 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 801b186:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801b188:	68b8      	ldr	r0, [r7, #8]
 801b18a:	f001 fd11 	bl	801cbb0 <pbuf_clen>
 801b18e:	4603      	mov	r3, r0
 801b190:	461a      	mov	r2, r3
 801b192:	4b0d      	ldr	r3, [pc, #52]	; (801b1c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b194:	881b      	ldrh	r3, [r3, #0]
 801b196:	1a9b      	subs	r3, r3, r2
 801b198:	b29a      	uxth	r2, r3
 801b19a:	4b0b      	ldr	r3, [pc, #44]	; (801b1c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b19c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801b19e:	68b8      	ldr	r0, [r7, #8]
 801b1a0:	f001 fc6c 	bl	801ca7c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b1a4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	3730      	adds	r7, #48	; 0x30
 801b1ac:	46bd      	mov	sp, r7
 801b1ae:	bd80      	pop	{r7, pc}
 801b1b0:	08029d08 	.word	0x08029d08
 801b1b4:	08029de4 	.word	0x08029de4
 801b1b8:	08029d50 	.word	0x08029d50
 801b1bc:	08029e04 	.word	0x08029e04
 801b1c0:	08029e3c 	.word	0x08029e3c
 801b1c4:	08029e4c 	.word	0x08029e4c
 801b1c8:	200094ac 	.word	0x200094ac

0801b1cc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b1cc:	b580      	push	{r7, lr}
 801b1ce:	b08e      	sub	sp, #56	; 0x38
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	685b      	ldr	r3, [r3, #4]
 801b1d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801b1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1dc:	781b      	ldrb	r3, [r3, #0]
 801b1de:	f003 030f 	and.w	r3, r3, #15
 801b1e2:	009b      	lsls	r3, r3, #2
 801b1e4:	2b14      	cmp	r3, #20
 801b1e6:	f040 8131 	bne.w	801b44c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801b1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1ec:	88db      	ldrh	r3, [r3, #6]
 801b1ee:	b29b      	uxth	r3, r3
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	f7fe f819 	bl	8019228 <lwip_htons>
 801b1f6:	4603      	mov	r3, r0
 801b1f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b1fc:	b29b      	uxth	r3, r3
 801b1fe:	00db      	lsls	r3, r3, #3
 801b200:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b204:	885b      	ldrh	r3, [r3, #2]
 801b206:	b29b      	uxth	r3, r3
 801b208:	4618      	mov	r0, r3
 801b20a:	f7fe f80d 	bl	8019228 <lwip_htons>
 801b20e:	4603      	mov	r3, r0
 801b210:	461a      	mov	r2, r3
 801b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b214:	781b      	ldrb	r3, [r3, #0]
 801b216:	b29b      	uxth	r3, r3
 801b218:	f003 030f 	and.w	r3, r3, #15
 801b21c:	b29b      	uxth	r3, r3
 801b21e:	009b      	lsls	r3, r3, #2
 801b220:	b29b      	uxth	r3, r3
 801b222:	1ad3      	subs	r3, r2, r3
 801b224:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b226:	6878      	ldr	r0, [r7, #4]
 801b228:	f001 fcc2 	bl	801cbb0 <pbuf_clen>
 801b22c:	4603      	mov	r3, r0
 801b22e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b230:	4b8c      	ldr	r3, [pc, #560]	; (801b464 <ip4_reass+0x298>)
 801b232:	881b      	ldrh	r3, [r3, #0]
 801b234:	461a      	mov	r2, r3
 801b236:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b238:	4413      	add	r3, r2
 801b23a:	2b0a      	cmp	r3, #10
 801b23c:	dd10      	ble.n	801b260 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b23e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b240:	4619      	mov	r1, r3
 801b242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b244:	f7ff fd90 	bl	801ad68 <ip_reass_remove_oldest_datagram>
 801b248:	4603      	mov	r3, r0
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	f000 8101 	beq.w	801b452 <ip4_reass+0x286>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b250:	4b84      	ldr	r3, [pc, #528]	; (801b464 <ip4_reass+0x298>)
 801b252:	881b      	ldrh	r3, [r3, #0]
 801b254:	461a      	mov	r2, r3
 801b256:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b258:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b25a:	2b0a      	cmp	r3, #10
 801b25c:	f300 80f9 	bgt.w	801b452 <ip4_reass+0x286>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b260:	4b81      	ldr	r3, [pc, #516]	; (801b468 <ip4_reass+0x29c>)
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	633b      	str	r3, [r7, #48]	; 0x30
 801b266:	e015      	b.n	801b294 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b26a:	695a      	ldr	r2, [r3, #20]
 801b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b26e:	68db      	ldr	r3, [r3, #12]
 801b270:	429a      	cmp	r2, r3
 801b272:	d10c      	bne.n	801b28e <ip4_reass+0xc2>
 801b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b276:	699a      	ldr	r2, [r3, #24]
 801b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b27a:	691b      	ldr	r3, [r3, #16]
 801b27c:	429a      	cmp	r2, r3
 801b27e:	d106      	bne.n	801b28e <ip4_reass+0xc2>
 801b280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b282:	899a      	ldrh	r2, [r3, #12]
 801b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b286:	889b      	ldrh	r3, [r3, #4]
 801b288:	b29b      	uxth	r3, r3
 801b28a:	429a      	cmp	r2, r3
 801b28c:	d006      	beq.n	801b29c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	633b      	str	r3, [r7, #48]	; 0x30
 801b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b296:	2b00      	cmp	r3, #0
 801b298:	d1e6      	bne.n	801b268 <ip4_reass+0x9c>
 801b29a:	e000      	b.n	801b29e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b29c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d109      	bne.n	801b2b8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b2a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b2a6:	4619      	mov	r1, r3
 801b2a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b2aa:	f7ff fdbf 	bl	801ae2c <ip_reass_enqueue_new_datagram>
 801b2ae:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d11c      	bne.n	801b2f0 <ip4_reass+0x124>
      goto nullreturn;
 801b2b6:	e0cc      	b.n	801b452 <ip4_reass+0x286>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2ba:	88db      	ldrh	r3, [r3, #6]
 801b2bc:	b29b      	uxth	r3, r3
 801b2be:	4618      	mov	r0, r3
 801b2c0:	f7fd ffb2 	bl	8019228 <lwip_htons>
 801b2c4:	4603      	mov	r3, r0
 801b2c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d110      	bne.n	801b2f0 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2d0:	89db      	ldrh	r3, [r3, #14]
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	f7fd ffa8 	bl	8019228 <lwip_htons>
 801b2d8:	4603      	mov	r3, r0
 801b2da:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d006      	beq.n	801b2f0 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2e4:	3308      	adds	r3, #8
 801b2e6:	2214      	movs	r2, #20
 801b2e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b2ea:	4618      	mov	r0, r3
 801b2ec:	f00d f8bf 	bl	802846e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2f2:	88db      	ldrh	r3, [r3, #6]
 801b2f4:	b29b      	uxth	r3, r3
 801b2f6:	f003 0320 	and.w	r3, r3, #32
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	bf0c      	ite	eq
 801b2fe:	2301      	moveq	r3, #1
 801b300:	2300      	movne	r3, #0
 801b302:	b2db      	uxtb	r3, r3
 801b304:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b306:	69fb      	ldr	r3, [r7, #28]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d00e      	beq.n	801b32a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 801b30c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b30e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b310:	4413      	add	r3, r2
 801b312:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b314:	8b7a      	ldrh	r2, [r7, #26]
 801b316:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b318:	429a      	cmp	r2, r3
 801b31a:	f0c0 809a 	bcc.w	801b452 <ip4_reass+0x286>
 801b31e:	8b7b      	ldrh	r3, [r7, #26]
 801b320:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b324:	4293      	cmp	r3, r2
 801b326:	f200 8094 	bhi.w	801b452 <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b32a:	69fa      	ldr	r2, [r7, #28]
 801b32c:	6879      	ldr	r1, [r7, #4]
 801b32e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b330:	f7ff fde4 	bl	801aefc <ip_reass_chain_frag_into_datagram_and_validate>
 801b334:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b336:	697b      	ldr	r3, [r7, #20]
 801b338:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b33c:	f000 8088 	beq.w	801b450 <ip4_reass+0x284>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b340:	4b48      	ldr	r3, [pc, #288]	; (801b464 <ip4_reass+0x298>)
 801b342:	881a      	ldrh	r2, [r3, #0]
 801b344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b346:	4413      	add	r3, r2
 801b348:	b29a      	uxth	r2, r3
 801b34a:	4b46      	ldr	r3, [pc, #280]	; (801b464 <ip4_reass+0x298>)
 801b34c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b34e:	69fb      	ldr	r3, [r7, #28]
 801b350:	2b00      	cmp	r3, #0
 801b352:	d00d      	beq.n	801b370 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 801b354:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b358:	4413      	add	r3, r2
 801b35a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b35e:	8a7a      	ldrh	r2, [r7, #18]
 801b360:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b364:	7f9b      	ldrb	r3, [r3, #30]
 801b366:	f043 0301 	orr.w	r3, r3, #1
 801b36a:	b2da      	uxtb	r2, r3
 801b36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b36e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b370:	697b      	ldr	r3, [r7, #20]
 801b372:	2b01      	cmp	r3, #1
 801b374:	d168      	bne.n	801b448 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 801b376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b378:	8b9b      	ldrh	r3, [r3, #28]
 801b37a:	3314      	adds	r3, #20
 801b37c:	b29a      	uxth	r2, r3
 801b37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b380:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b384:	685b      	ldr	r3, [r3, #4]
 801b386:	685b      	ldr	r3, [r3, #4]
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b38e:	685b      	ldr	r3, [r3, #4]
 801b390:	685b      	ldr	r3, [r3, #4]
 801b392:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b396:	3308      	adds	r3, #8
 801b398:	2214      	movs	r2, #20
 801b39a:	4619      	mov	r1, r3
 801b39c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b39e:	f00d f866 	bl	802846e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801b3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3a4:	8b9b      	ldrh	r3, [r3, #28]
 801b3a6:	4618      	mov	r0, r3
 801b3a8:	f7fd ff3e 	bl	8019228 <lwip_htons>
 801b3ac:	4603      	mov	r3, r0
 801b3ae:	461a      	mov	r2, r3
 801b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3b2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3b6:	2200      	movs	r2, #0
 801b3b8:	719a      	strb	r2, [r3, #6]
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3c0:	2200      	movs	r2, #0
 801b3c2:	729a      	strb	r2, [r3, #10]
 801b3c4:	2200      	movs	r2, #0
 801b3c6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3ca:	685b      	ldr	r3, [r3, #4]
 801b3cc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b3ce:	e00e      	b.n	801b3ee <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 801b3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3d2:	685b      	ldr	r3, [r3, #4]
 801b3d4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801b3d6:	f06f 0113 	mvn.w	r1, #19
 801b3da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b3dc:	f001 fb2a 	bl	801ca34 <pbuf_header>
      pbuf_cat(p, r);
 801b3e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b3e2:	6878      	ldr	r0, [r7, #4]
 801b3e4:	f001 fc24 	bl	801cc30 <pbuf_cat>
      r = iprh->next_pbuf;
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d1ed      	bne.n	801b3d0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b3f4:	4b1c      	ldr	r3, [pc, #112]	; (801b468 <ip4_reass+0x29c>)
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b3fa:	429a      	cmp	r2, r3
 801b3fc:	d102      	bne.n	801b404 <ip4_reass+0x238>
      ipr_prev = NULL;
 801b3fe:	2300      	movs	r3, #0
 801b400:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b402:	e010      	b.n	801b426 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b404:	4b18      	ldr	r3, [pc, #96]	; (801b468 <ip4_reass+0x29c>)
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b40a:	e007      	b.n	801b41c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801b40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b40e:	681a      	ldr	r2, [r3, #0]
 801b410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b412:	429a      	cmp	r2, r3
 801b414:	d006      	beq.n	801b424 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b418:	681b      	ldr	r3, [r3, #0]
 801b41a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d1f4      	bne.n	801b40c <ip4_reass+0x240>
 801b422:	e000      	b.n	801b426 <ip4_reass+0x25a>
          break;
 801b424:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b42a:	f7ff fd39 	bl	801aea0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801b42e:	6878      	ldr	r0, [r7, #4]
 801b430:	f001 fbbe 	bl	801cbb0 <pbuf_clen>
 801b434:	4603      	mov	r3, r0
 801b436:	461a      	mov	r2, r3
 801b438:	4b0a      	ldr	r3, [pc, #40]	; (801b464 <ip4_reass+0x298>)
 801b43a:	881b      	ldrh	r3, [r3, #0]
 801b43c:	1a9b      	subs	r3, r3, r2
 801b43e:	b29a      	uxth	r2, r3
 801b440:	4b08      	ldr	r3, [pc, #32]	; (801b464 <ip4_reass+0x298>)
 801b442:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	e008      	b.n	801b45a <ip4_reass+0x28e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b448:	2300      	movs	r3, #0
 801b44a:	e006      	b.n	801b45a <ip4_reass+0x28e>
    goto nullreturn;
 801b44c:	bf00      	nop
 801b44e:	e000      	b.n	801b452 <ip4_reass+0x286>
    goto nullreturn;
 801b450:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b452:	6878      	ldr	r0, [r7, #4]
 801b454:	f001 fb12 	bl	801ca7c <pbuf_free>
  return NULL;
 801b458:	2300      	movs	r3, #0
}
 801b45a:	4618      	mov	r0, r3
 801b45c:	3738      	adds	r7, #56	; 0x38
 801b45e:	46bd      	mov	sp, r7
 801b460:	bd80      	pop	{r7, pc}
 801b462:	bf00      	nop
 801b464:	200094ac 	.word	0x200094ac
 801b468:	200094a8 	.word	0x200094a8

0801b46c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b46c:	b580      	push	{r7, lr}
 801b46e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801b470:	2004      	movs	r0, #4
 801b472:	f000 fd21 	bl	801beb8 <memp_malloc>
 801b476:	4603      	mov	r3, r0
}
 801b478:	4618      	mov	r0, r3
 801b47a:	bd80      	pop	{r7, pc}

0801b47c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801b47c:	b580      	push	{r7, lr}
 801b47e:	b082      	sub	sp, #8
 801b480:	af00      	add	r7, sp, #0
 801b482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d106      	bne.n	801b498 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b48a:	4b07      	ldr	r3, [pc, #28]	; (801b4a8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b48c:	f240 22ae 	movw	r2, #686	; 0x2ae
 801b490:	4906      	ldr	r1, [pc, #24]	; (801b4ac <ip_frag_free_pbuf_custom_ref+0x30>)
 801b492:	4807      	ldr	r0, [pc, #28]	; (801b4b0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b494:	f00b ffcc 	bl	8027430 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b498:	6879      	ldr	r1, [r7, #4]
 801b49a:	2004      	movs	r0, #4
 801b49c:	f000 fd5e 	bl	801bf5c <memp_free>
}
 801b4a0:	bf00      	nop
 801b4a2:	3708      	adds	r7, #8
 801b4a4:	46bd      	mov	sp, r7
 801b4a6:	bd80      	pop	{r7, pc}
 801b4a8:	08029d08 	.word	0x08029d08
 801b4ac:	08029e70 	.word	0x08029e70
 801b4b0:	08029d50 	.word	0x08029d50

0801b4b4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b084      	sub	sp, #16
 801b4b8:	af00      	add	r7, sp, #0
 801b4ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d106      	bne.n	801b4d4 <ipfrag_free_pbuf_custom+0x20>
 801b4c6:	4b11      	ldr	r3, [pc, #68]	; (801b50c <ipfrag_free_pbuf_custom+0x58>)
 801b4c8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 801b4cc:	4910      	ldr	r1, [pc, #64]	; (801b510 <ipfrag_free_pbuf_custom+0x5c>)
 801b4ce:	4811      	ldr	r0, [pc, #68]	; (801b514 <ipfrag_free_pbuf_custom+0x60>)
 801b4d0:	f00b ffae 	bl	8027430 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 801b4d4:	68fa      	ldr	r2, [r7, #12]
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	429a      	cmp	r2, r3
 801b4da:	d006      	beq.n	801b4ea <ipfrag_free_pbuf_custom+0x36>
 801b4dc:	4b0b      	ldr	r3, [pc, #44]	; (801b50c <ipfrag_free_pbuf_custom+0x58>)
 801b4de:	f240 22b9 	movw	r2, #697	; 0x2b9
 801b4e2:	490d      	ldr	r1, [pc, #52]	; (801b518 <ipfrag_free_pbuf_custom+0x64>)
 801b4e4:	480b      	ldr	r0, [pc, #44]	; (801b514 <ipfrag_free_pbuf_custom+0x60>)
 801b4e6:	f00b ffa3 	bl	8027430 <iprintf>
  if (pcr->original != NULL) {
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	695b      	ldr	r3, [r3, #20]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d004      	beq.n	801b4fc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	695b      	ldr	r3, [r3, #20]
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	f001 fac0 	bl	801ca7c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b4fc:	68f8      	ldr	r0, [r7, #12]
 801b4fe:	f7ff ffbd 	bl	801b47c <ip_frag_free_pbuf_custom_ref>
}
 801b502:	bf00      	nop
 801b504:	3710      	adds	r7, #16
 801b506:	46bd      	mov	sp, r7
 801b508:	bd80      	pop	{r7, pc}
 801b50a:	bf00      	nop
 801b50c:	08029d08 	.word	0x08029d08
 801b510:	08029e7c 	.word	0x08029e7c
 801b514:	08029d50 	.word	0x08029d50
 801b518:	08029e88 	.word	0x08029e88

0801b51c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b51c:	b580      	push	{r7, lr}
 801b51e:	b092      	sub	sp, #72	; 0x48
 801b520:	af02      	add	r7, sp, #8
 801b522:	60f8      	str	r0, [r7, #12]
 801b524:	60b9      	str	r1, [r7, #8]
 801b526:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b528:	2300      	movs	r3, #0
 801b52a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801b52c:	68bb      	ldr	r3, [r7, #8]
 801b52e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b530:	3b14      	subs	r3, #20
 801b532:	2b00      	cmp	r3, #0
 801b534:	da00      	bge.n	801b538 <ip4_frag+0x1c>
 801b536:	3307      	adds	r3, #7
 801b538:	10db      	asrs	r3, r3, #3
 801b53a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b53c:	2314      	movs	r3, #20
 801b53e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	685b      	ldr	r3, [r3, #4]
 801b544:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801b546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b548:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b54c:	781b      	ldrb	r3, [r3, #0]
 801b54e:	f003 030f 	and.w	r3, r3, #15
 801b552:	009b      	lsls	r3, r3, #2
 801b554:	2b14      	cmp	r3, #20
 801b556:	d009      	beq.n	801b56c <ip4_frag+0x50>
 801b558:	4b79      	ldr	r3, [pc, #484]	; (801b740 <ip4_frag+0x224>)
 801b55a:	f240 22e1 	movw	r2, #737	; 0x2e1
 801b55e:	4979      	ldr	r1, [pc, #484]	; (801b744 <ip4_frag+0x228>)
 801b560:	4879      	ldr	r0, [pc, #484]	; (801b748 <ip4_frag+0x22c>)
 801b562:	f00b ff65 	bl	8027430 <iprintf>
 801b566:	f06f 0305 	mvn.w	r3, #5
 801b56a:	e0e5      	b.n	801b738 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b56e:	88db      	ldrh	r3, [r3, #6]
 801b570:	b29b      	uxth	r3, r3
 801b572:	4618      	mov	r0, r3
 801b574:	f7fd fe58 	bl	8019228 <lwip_htons>
 801b578:	4603      	mov	r3, r0
 801b57a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 801b57c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b57e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b582:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801b584:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d009      	beq.n	801b5a2 <ip4_frag+0x86>
 801b58e:	4b6c      	ldr	r3, [pc, #432]	; (801b740 <ip4_frag+0x224>)
 801b590:	f240 22e6 	movw	r2, #742	; 0x2e6
 801b594:	496d      	ldr	r1, [pc, #436]	; (801b74c <ip4_frag+0x230>)
 801b596:	486c      	ldr	r0, [pc, #432]	; (801b748 <ip4_frag+0x22c>)
 801b598:	f00b ff4a 	bl	8027430 <iprintf>
 801b59c:	f06f 0305 	mvn.w	r3, #5
 801b5a0:	e0ca      	b.n	801b738 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	891b      	ldrh	r3, [r3, #8]
 801b5a6:	3b14      	subs	r3, #20
 801b5a8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801b5aa:	e0bc      	b.n	801b726 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801b5ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b5ae:	00da      	lsls	r2, r3, #3
 801b5b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b5b2:	4293      	cmp	r3, r2
 801b5b4:	bfa8      	it	ge
 801b5b6:	4613      	movge	r3, r2
 801b5b8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b5ba:	2200      	movs	r2, #0
 801b5bc:	2114      	movs	r1, #20
 801b5be:	2002      	movs	r0, #2
 801b5c0:	f000 feea 	bl	801c398 <pbuf_alloc>
 801b5c4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801b5c6:	6a3b      	ldr	r3, [r7, #32]
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	f000 80b2 	beq.w	801b732 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b5ce:	68fb      	ldr	r3, [r7, #12]
 801b5d0:	895b      	ldrh	r3, [r3, #10]
 801b5d2:	2b13      	cmp	r3, #19
 801b5d4:	d806      	bhi.n	801b5e4 <ip4_frag+0xc8>
 801b5d6:	4b5a      	ldr	r3, [pc, #360]	; (801b740 <ip4_frag+0x224>)
 801b5d8:	f240 3209 	movw	r2, #777	; 0x309
 801b5dc:	495c      	ldr	r1, [pc, #368]	; (801b750 <ip4_frag+0x234>)
 801b5de:	485a      	ldr	r0, [pc, #360]	; (801b748 <ip4_frag+0x22c>)
 801b5e0:	f00b ff26 	bl	8027430 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b5e4:	6a3b      	ldr	r3, [r7, #32]
 801b5e6:	685b      	ldr	r3, [r3, #4]
 801b5e8:	2214      	movs	r2, #20
 801b5ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	f00c ff3e 	bl	802846e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b5f2:	6a3b      	ldr	r3, [r7, #32]
 801b5f4:	685b      	ldr	r3, [r3, #4]
 801b5f6:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801b5f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b5fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801b5fc:	e04f      	b.n	801b69e <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	895a      	ldrh	r2, [r3, #10]
 801b602:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b604:	1ad3      	subs	r3, r2, r3
 801b606:	83fb      	strh	r3, [r7, #30]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b608:	8bfa      	ldrh	r2, [r7, #30]
 801b60a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b60c:	4293      	cmp	r3, r2
 801b60e:	bf28      	it	cs
 801b610:	4613      	movcs	r3, r2
 801b612:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b614:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b616:	2b00      	cmp	r3, #0
 801b618:	d105      	bne.n	801b626 <ip4_frag+0x10a>
        poff = 0;
 801b61a:	2300      	movs	r3, #0
 801b61c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801b61e:	68fb      	ldr	r3, [r7, #12]
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	60fb      	str	r3, [r7, #12]
        continue;
 801b624:	e03b      	b.n	801b69e <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b626:	f7ff ff21 	bl	801b46c <ip_frag_alloc_pbuf_custom_ref>
 801b62a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b62c:	69bb      	ldr	r3, [r7, #24]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d103      	bne.n	801b63a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 801b632:	6a38      	ldr	r0, [r7, #32]
 801b634:	f001 fa22 	bl	801ca7c <pbuf_free>
        goto memerr;
 801b638:	e07c      	b.n	801b734 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b63a:	69b8      	ldr	r0, [r7, #24]
        (u8_t*)p->payload + poff, newpbuflen);
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b640:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b642:	4413      	add	r3, r2
 801b644:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801b646:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b648:	9201      	str	r2, [sp, #4]
 801b64a:	9300      	str	r3, [sp, #0]
 801b64c:	4603      	mov	r3, r0
 801b64e:	2202      	movs	r2, #2
 801b650:	2004      	movs	r0, #4
 801b652:	f001 f835 	bl	801c6c0 <pbuf_alloced_custom>
 801b656:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b658:	697b      	ldr	r3, [r7, #20]
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	d106      	bne.n	801b66c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b65e:	69b8      	ldr	r0, [r7, #24]
 801b660:	f7ff ff0c 	bl	801b47c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b664:	6a38      	ldr	r0, [r7, #32]
 801b666:	f001 fa09 	bl	801ca7c <pbuf_free>
        goto memerr;
 801b66a:	e063      	b.n	801b734 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 801b66c:	68f8      	ldr	r0, [r7, #12]
 801b66e:	f001 fab7 	bl	801cbe0 <pbuf_ref>
      pcr->original = p;
 801b672:	69bb      	ldr	r3, [r7, #24]
 801b674:	68fa      	ldr	r2, [r7, #12]
 801b676:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b678:	69bb      	ldr	r3, [r7, #24]
 801b67a:	4a36      	ldr	r2, [pc, #216]	; (801b754 <ip4_frag+0x238>)
 801b67c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b67e:	6979      	ldr	r1, [r7, #20]
 801b680:	6a38      	ldr	r0, [r7, #32]
 801b682:	f001 fad5 	bl	801cc30 <pbuf_cat>
      left_to_copy -= newpbuflen;
 801b686:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801b688:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b68a:	1ad3      	subs	r3, r2, r3
 801b68c:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801b68e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b690:	2b00      	cmp	r3, #0
 801b692:	d004      	beq.n	801b69e <ip4_frag+0x182>
        poff = 0;
 801b694:	2300      	movs	r3, #0
 801b696:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b69e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d1ac      	bne.n	801b5fe <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 801b6a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b6a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b6a8:	4413      	add	r3, r2
 801b6aa:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b6ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b6ae:	68bb      	ldr	r3, [r7, #8]
 801b6b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b6b2:	3b14      	subs	r3, #20
 801b6b4:	429a      	cmp	r2, r3
 801b6b6:	bfd4      	ite	le
 801b6b8:	2301      	movle	r3, #1
 801b6ba:	2300      	movgt	r3, #0
 801b6bc:	b2db      	uxtb	r3, r3
 801b6be:	613b      	str	r3, [r7, #16]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b6c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b6c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b6c6:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 801b6c8:	693b      	ldr	r3, [r7, #16]
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	d103      	bne.n	801b6d6 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 801b6ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b6d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b6d4:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b6d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b6d8:	4618      	mov	r0, r3
 801b6da:	f7fd fda5 	bl	8019228 <lwip_htons>
 801b6de:	4603      	mov	r3, r0
 801b6e0:	461a      	mov	r2, r3
 801b6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6e4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801b6e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b6e8:	3314      	adds	r3, #20
 801b6ea:	b29b      	uxth	r3, r3
 801b6ec:	4618      	mov	r0, r3
 801b6ee:	f7fd fd9b 	bl	8019228 <lwip_htons>
 801b6f2:	4603      	mov	r3, r0
 801b6f4:	461a      	mov	r2, r3
 801b6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6f8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6fc:	2200      	movs	r2, #0
 801b6fe:	729a      	strb	r2, [r3, #10]
 801b700:	2200      	movs	r2, #0
 801b702:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b704:	68bb      	ldr	r3, [r7, #8]
 801b706:	695b      	ldr	r3, [r3, #20]
 801b708:	687a      	ldr	r2, [r7, #4]
 801b70a:	6a39      	ldr	r1, [r7, #32]
 801b70c:	68b8      	ldr	r0, [r7, #8]
 801b70e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b710:	6a38      	ldr	r0, [r7, #32]
 801b712:	f001 f9b3 	bl	801ca7c <pbuf_free>
    left -= fragsize;
 801b716:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b718:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b71a:	1ad3      	subs	r3, r2, r3
 801b71c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801b71e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801b720:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b722:	4413      	add	r3, r2
 801b724:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801b726:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b728:	2b00      	cmp	r3, #0
 801b72a:	f47f af3f 	bne.w	801b5ac <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b72e:	2300      	movs	r3, #0
 801b730:	e002      	b.n	801b738 <ip4_frag+0x21c>
      goto memerr;
 801b732:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b734:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b738:	4618      	mov	r0, r3
 801b73a:	3740      	adds	r7, #64	; 0x40
 801b73c:	46bd      	mov	sp, r7
 801b73e:	bd80      	pop	{r7, pc}
 801b740:	08029d08 	.word	0x08029d08
 801b744:	08029e94 	.word	0x08029e94
 801b748:	08029d50 	.word	0x08029d50
 801b74c:	08029ebc 	.word	0x08029ebc
 801b750:	08029ed8 	.word	0x08029ed8
 801b754:	0801b4b5 	.word	0x0801b4b5

0801b758 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b084      	sub	sp, #16
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b760:	4b40      	ldr	r3, [pc, #256]	; (801b864 <plug_holes+0x10c>)
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	687a      	ldr	r2, [r7, #4]
 801b766:	429a      	cmp	r2, r3
 801b768:	d206      	bcs.n	801b778 <plug_holes+0x20>
 801b76a:	4b3f      	ldr	r3, [pc, #252]	; (801b868 <plug_holes+0x110>)
 801b76c:	f240 125d 	movw	r2, #349	; 0x15d
 801b770:	493e      	ldr	r1, [pc, #248]	; (801b86c <plug_holes+0x114>)
 801b772:	483f      	ldr	r0, [pc, #252]	; (801b870 <plug_holes+0x118>)
 801b774:	f00b fe5c 	bl	8027430 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b778:	4b3e      	ldr	r3, [pc, #248]	; (801b874 <plug_holes+0x11c>)
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	687a      	ldr	r2, [r7, #4]
 801b77e:	429a      	cmp	r2, r3
 801b780:	d306      	bcc.n	801b790 <plug_holes+0x38>
 801b782:	4b39      	ldr	r3, [pc, #228]	; (801b868 <plug_holes+0x110>)
 801b784:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801b788:	493b      	ldr	r1, [pc, #236]	; (801b878 <plug_holes+0x120>)
 801b78a:	4839      	ldr	r0, [pc, #228]	; (801b870 <plug_holes+0x118>)
 801b78c:	f00b fe50 	bl	8027430 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	791b      	ldrb	r3, [r3, #4]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d006      	beq.n	801b7a6 <plug_holes+0x4e>
 801b798:	4b33      	ldr	r3, [pc, #204]	; (801b868 <plug_holes+0x110>)
 801b79a:	f240 125f 	movw	r2, #351	; 0x15f
 801b79e:	4937      	ldr	r1, [pc, #220]	; (801b87c <plug_holes+0x124>)
 801b7a0:	4833      	ldr	r0, [pc, #204]	; (801b870 <plug_holes+0x118>)
 801b7a2:	f00b fe45 	bl	8027430 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	881b      	ldrh	r3, [r3, #0]
 801b7aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b7ae:	d906      	bls.n	801b7be <plug_holes+0x66>
 801b7b0:	4b2d      	ldr	r3, [pc, #180]	; (801b868 <plug_holes+0x110>)
 801b7b2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801b7b6:	4932      	ldr	r1, [pc, #200]	; (801b880 <plug_holes+0x128>)
 801b7b8:	482d      	ldr	r0, [pc, #180]	; (801b870 <plug_holes+0x118>)
 801b7ba:	f00b fe39 	bl	8027430 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 801b7be:	4b29      	ldr	r3, [pc, #164]	; (801b864 <plug_holes+0x10c>)
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	687a      	ldr	r2, [r7, #4]
 801b7c4:	8812      	ldrh	r2, [r2, #0]
 801b7c6:	4413      	add	r3, r2
 801b7c8:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801b7ca:	687a      	ldr	r2, [r7, #4]
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	429a      	cmp	r2, r3
 801b7d0:	d01f      	beq.n	801b812 <plug_holes+0xba>
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	791b      	ldrb	r3, [r3, #4]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d11b      	bne.n	801b812 <plug_holes+0xba>
 801b7da:	4b26      	ldr	r3, [pc, #152]	; (801b874 <plug_holes+0x11c>)
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	68fa      	ldr	r2, [r7, #12]
 801b7e0:	429a      	cmp	r2, r3
 801b7e2:	d016      	beq.n	801b812 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801b7e4:	4b27      	ldr	r3, [pc, #156]	; (801b884 <plug_holes+0x12c>)
 801b7e6:	681a      	ldr	r2, [r3, #0]
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	429a      	cmp	r2, r3
 801b7ec:	d102      	bne.n	801b7f4 <plug_holes+0x9c>
      lfree = mem;
 801b7ee:	4a25      	ldr	r2, [pc, #148]	; (801b884 <plug_holes+0x12c>)
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	881a      	ldrh	r2, [r3, #0]
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 801b7fc:	4b19      	ldr	r3, [pc, #100]	; (801b864 <plug_holes+0x10c>)
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	68fa      	ldr	r2, [r7, #12]
 801b802:	8812      	ldrh	r2, [r2, #0]
 801b804:	4413      	add	r3, r2
 801b806:	687a      	ldr	r2, [r7, #4]
 801b808:	4916      	ldr	r1, [pc, #88]	; (801b864 <plug_holes+0x10c>)
 801b80a:	6809      	ldr	r1, [r1, #0]
 801b80c:	1a52      	subs	r2, r2, r1
 801b80e:	b292      	uxth	r2, r2
 801b810:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 801b812:	4b14      	ldr	r3, [pc, #80]	; (801b864 <plug_holes+0x10c>)
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	687a      	ldr	r2, [r7, #4]
 801b818:	8852      	ldrh	r2, [r2, #2]
 801b81a:	4413      	add	r3, r2
 801b81c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801b81e:	68ba      	ldr	r2, [r7, #8]
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	429a      	cmp	r2, r3
 801b824:	d01a      	beq.n	801b85c <plug_holes+0x104>
 801b826:	68bb      	ldr	r3, [r7, #8]
 801b828:	791b      	ldrb	r3, [r3, #4]
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d116      	bne.n	801b85c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801b82e:	4b15      	ldr	r3, [pc, #84]	; (801b884 <plug_holes+0x12c>)
 801b830:	681a      	ldr	r2, [r3, #0]
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	429a      	cmp	r2, r3
 801b836:	d102      	bne.n	801b83e <plug_holes+0xe6>
      lfree = pmem;
 801b838:	4a12      	ldr	r2, [pc, #72]	; (801b884 <plug_holes+0x12c>)
 801b83a:	68bb      	ldr	r3, [r7, #8]
 801b83c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	881a      	ldrh	r2, [r3, #0]
 801b842:	68bb      	ldr	r3, [r7, #8]
 801b844:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 801b846:	4b07      	ldr	r3, [pc, #28]	; (801b864 <plug_holes+0x10c>)
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	687a      	ldr	r2, [r7, #4]
 801b84c:	8812      	ldrh	r2, [r2, #0]
 801b84e:	4413      	add	r3, r2
 801b850:	68ba      	ldr	r2, [r7, #8]
 801b852:	4904      	ldr	r1, [pc, #16]	; (801b864 <plug_holes+0x10c>)
 801b854:	6809      	ldr	r1, [r1, #0]
 801b856:	1a52      	subs	r2, r2, r1
 801b858:	b292      	uxth	r2, r2
 801b85a:	805a      	strh	r2, [r3, #2]
  }
}
 801b85c:	bf00      	nop
 801b85e:	3710      	adds	r7, #16
 801b860:	46bd      	mov	sp, r7
 801b862:	bd80      	pop	{r7, pc}
 801b864:	200094b0 	.word	0x200094b0
 801b868:	08029ef8 	.word	0x08029ef8
 801b86c:	08029f28 	.word	0x08029f28
 801b870:	08029f40 	.word	0x08029f40
 801b874:	200094b4 	.word	0x200094b4
 801b878:	08029f68 	.word	0x08029f68
 801b87c:	08029f84 	.word	0x08029f84
 801b880:	08029fa0 	.word	0x08029fa0
 801b884:	200094b8 	.word	0x200094b8

0801b888 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801b888:	b580      	push	{r7, lr}
 801b88a:	b082      	sub	sp, #8
 801b88c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b88e:	4b1e      	ldr	r3, [pc, #120]	; (801b908 <mem_init+0x80>)
 801b890:	3303      	adds	r3, #3
 801b892:	f023 0303 	bic.w	r3, r3, #3
 801b896:	461a      	mov	r2, r3
 801b898:	4b1c      	ldr	r3, [pc, #112]	; (801b90c <mem_init+0x84>)
 801b89a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801b89c:	4b1b      	ldr	r3, [pc, #108]	; (801b90c <mem_init+0x84>)
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801b8a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	2200      	movs	r2, #0
 801b8ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	2200      	movs	r2, #0
 801b8b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 801b8b6:	4b15      	ldr	r3, [pc, #84]	; (801b90c <mem_init+0x84>)
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801b8be:	4a14      	ldr	r2, [pc, #80]	; (801b910 <mem_init+0x88>)
 801b8c0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801b8c2:	4b13      	ldr	r3, [pc, #76]	; (801b910 <mem_init+0x88>)
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	2201      	movs	r2, #1
 801b8c8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801b8ca:	4b11      	ldr	r3, [pc, #68]	; (801b910 <mem_init+0x88>)
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801b8d2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801b8d4:	4b0e      	ldr	r3, [pc, #56]	; (801b910 <mem_init+0x88>)
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801b8dc:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801b8de:	4b0b      	ldr	r3, [pc, #44]	; (801b90c <mem_init+0x84>)
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	4a0c      	ldr	r2, [pc, #48]	; (801b914 <mem_init+0x8c>)
 801b8e4:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801b8e6:	480c      	ldr	r0, [pc, #48]	; (801b918 <mem_init+0x90>)
 801b8e8:	f007 f948 	bl	8022b7c <sys_mutex_new>
 801b8ec:	4603      	mov	r3, r0
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d006      	beq.n	801b900 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801b8f2:	4b0a      	ldr	r3, [pc, #40]	; (801b91c <mem_init+0x94>)
 801b8f4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801b8f8:	4909      	ldr	r1, [pc, #36]	; (801b920 <mem_init+0x98>)
 801b8fa:	480a      	ldr	r0, [pc, #40]	; (801b924 <mem_init+0x9c>)
 801b8fc:	f00b fd98 	bl	8027430 <iprintf>
  }
}
 801b900:	bf00      	nop
 801b902:	3708      	adds	r7, #8
 801b904:	46bd      	mov	sp, r7
 801b906:	bd80      	pop	{r7, pc}
 801b908:	2000a290 	.word	0x2000a290
 801b90c:	200094b0 	.word	0x200094b0
 801b910:	200094b4 	.word	0x200094b4
 801b914:	200094b8 	.word	0x200094b8
 801b918:	200094bc 	.word	0x200094bc
 801b91c:	08029ef8 	.word	0x08029ef8
 801b920:	08029fcc 	.word	0x08029fcc
 801b924:	08029f40 	.word	0x08029f40

0801b928 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801b928:	b580      	push	{r7, lr}
 801b92a:	b084      	sub	sp, #16
 801b92c:	af00      	add	r7, sp, #0
 801b92e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	2b00      	cmp	r3, #0
 801b934:	d050      	beq.n	801b9d8 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	f003 0303 	and.w	r3, r3, #3
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d006      	beq.n	801b94e <mem_free+0x26>
 801b940:	4b27      	ldr	r3, [pc, #156]	; (801b9e0 <mem_free+0xb8>)
 801b942:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 801b946:	4927      	ldr	r1, [pc, #156]	; (801b9e4 <mem_free+0xbc>)
 801b948:	4827      	ldr	r0, [pc, #156]	; (801b9e8 <mem_free+0xc0>)
 801b94a:	f00b fd71 	bl	8027430 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801b94e:	4b27      	ldr	r3, [pc, #156]	; (801b9ec <mem_free+0xc4>)
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	687a      	ldr	r2, [r7, #4]
 801b954:	429a      	cmp	r2, r3
 801b956:	d304      	bcc.n	801b962 <mem_free+0x3a>
 801b958:	4b25      	ldr	r3, [pc, #148]	; (801b9f0 <mem_free+0xc8>)
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	687a      	ldr	r2, [r7, #4]
 801b95e:	429a      	cmp	r2, r3
 801b960:	d306      	bcc.n	801b970 <mem_free+0x48>
 801b962:	4b1f      	ldr	r3, [pc, #124]	; (801b9e0 <mem_free+0xb8>)
 801b964:	f240 12af 	movw	r2, #431	; 0x1af
 801b968:	4922      	ldr	r1, [pc, #136]	; (801b9f4 <mem_free+0xcc>)
 801b96a:	481f      	ldr	r0, [pc, #124]	; (801b9e8 <mem_free+0xc0>)
 801b96c:	f00b fd60 	bl	8027430 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801b970:	4b1e      	ldr	r3, [pc, #120]	; (801b9ec <mem_free+0xc4>)
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	687a      	ldr	r2, [r7, #4]
 801b976:	429a      	cmp	r2, r3
 801b978:	d304      	bcc.n	801b984 <mem_free+0x5c>
 801b97a:	4b1d      	ldr	r3, [pc, #116]	; (801b9f0 <mem_free+0xc8>)
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	687a      	ldr	r2, [r7, #4]
 801b980:	429a      	cmp	r2, r3
 801b982:	d306      	bcc.n	801b992 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 801b984:	f007 f958 	bl	8022c38 <sys_arch_protect>
 801b988:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 801b98a:	68b8      	ldr	r0, [r7, #8]
 801b98c:	f007 f962 	bl	8022c54 <sys_arch_unprotect>
    return;
 801b990:	e023      	b.n	801b9da <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801b992:	4819      	ldr	r0, [pc, #100]	; (801b9f8 <mem_free+0xd0>)
 801b994:	f007 f90e 	bl	8022bb4 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	3b08      	subs	r3, #8
 801b99c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	791b      	ldrb	r3, [r3, #4]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d106      	bne.n	801b9b4 <mem_free+0x8c>
 801b9a6:	4b0e      	ldr	r3, [pc, #56]	; (801b9e0 <mem_free+0xb8>)
 801b9a8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 801b9ac:	4913      	ldr	r1, [pc, #76]	; (801b9fc <mem_free+0xd4>)
 801b9ae:	480e      	ldr	r0, [pc, #56]	; (801b9e8 <mem_free+0xc0>)
 801b9b0:	f00b fd3e 	bl	8027430 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 801b9b4:	68fb      	ldr	r3, [r7, #12]
 801b9b6:	2200      	movs	r2, #0
 801b9b8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801b9ba:	4b11      	ldr	r3, [pc, #68]	; (801ba00 <mem_free+0xd8>)
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	68fa      	ldr	r2, [r7, #12]
 801b9c0:	429a      	cmp	r2, r3
 801b9c2:	d202      	bcs.n	801b9ca <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801b9c4:	4a0e      	ldr	r2, [pc, #56]	; (801ba00 <mem_free+0xd8>)
 801b9c6:	68fb      	ldr	r3, [r7, #12]
 801b9c8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801b9ca:	68f8      	ldr	r0, [r7, #12]
 801b9cc:	f7ff fec4 	bl	801b758 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801b9d0:	4809      	ldr	r0, [pc, #36]	; (801b9f8 <mem_free+0xd0>)
 801b9d2:	f007 f8fe 	bl	8022bd2 <sys_mutex_unlock>
 801b9d6:	e000      	b.n	801b9da <mem_free+0xb2>
    return;
 801b9d8:	bf00      	nop
}
 801b9da:	3710      	adds	r7, #16
 801b9dc:	46bd      	mov	sp, r7
 801b9de:	bd80      	pop	{r7, pc}
 801b9e0:	08029ef8 	.word	0x08029ef8
 801b9e4:	08029fe8 	.word	0x08029fe8
 801b9e8:	08029f40 	.word	0x08029f40
 801b9ec:	200094b0 	.word	0x200094b0
 801b9f0:	200094b4 	.word	0x200094b4
 801b9f4:	0802a00c 	.word	0x0802a00c
 801b9f8:	200094bc 	.word	0x200094bc
 801b9fc:	0802a024 	.word	0x0802a024
 801ba00:	200094b8 	.word	0x200094b8

0801ba04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b088      	sub	sp, #32
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	6078      	str	r0, [r7, #4]
 801ba0c:	460b      	mov	r3, r1
 801ba0e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 801ba10:	887b      	ldrh	r3, [r7, #2]
 801ba12:	3303      	adds	r3, #3
 801ba14:	b29b      	uxth	r3, r3
 801ba16:	f023 0303 	bic.w	r3, r3, #3
 801ba1a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 801ba1c:	887b      	ldrh	r3, [r7, #2]
 801ba1e:	2b0b      	cmp	r3, #11
 801ba20:	d801      	bhi.n	801ba26 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801ba22:	230c      	movs	r3, #12
 801ba24:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 801ba26:	887b      	ldrh	r3, [r7, #2]
 801ba28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801ba2c:	d901      	bls.n	801ba32 <mem_trim+0x2e>
    return NULL;
 801ba2e:	2300      	movs	r3, #0
 801ba30:	e0bd      	b.n	801bbae <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801ba32:	4b61      	ldr	r3, [pc, #388]	; (801bbb8 <mem_trim+0x1b4>)
 801ba34:	681b      	ldr	r3, [r3, #0]
 801ba36:	687a      	ldr	r2, [r7, #4]
 801ba38:	429a      	cmp	r2, r3
 801ba3a:	d304      	bcc.n	801ba46 <mem_trim+0x42>
 801ba3c:	4b5f      	ldr	r3, [pc, #380]	; (801bbbc <mem_trim+0x1b8>)
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	687a      	ldr	r2, [r7, #4]
 801ba42:	429a      	cmp	r2, r3
 801ba44:	d306      	bcc.n	801ba54 <mem_trim+0x50>
 801ba46:	4b5e      	ldr	r3, [pc, #376]	; (801bbc0 <mem_trim+0x1bc>)
 801ba48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801ba4c:	495d      	ldr	r1, [pc, #372]	; (801bbc4 <mem_trim+0x1c0>)
 801ba4e:	485e      	ldr	r0, [pc, #376]	; (801bbc8 <mem_trim+0x1c4>)
 801ba50:	f00b fcee 	bl	8027430 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801ba54:	4b58      	ldr	r3, [pc, #352]	; (801bbb8 <mem_trim+0x1b4>)
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	687a      	ldr	r2, [r7, #4]
 801ba5a:	429a      	cmp	r2, r3
 801ba5c:	d304      	bcc.n	801ba68 <mem_trim+0x64>
 801ba5e:	4b57      	ldr	r3, [pc, #348]	; (801bbbc <mem_trim+0x1b8>)
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	687a      	ldr	r2, [r7, #4]
 801ba64:	429a      	cmp	r2, r3
 801ba66:	d307      	bcc.n	801ba78 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 801ba68:	f007 f8e6 	bl	8022c38 <sys_arch_protect>
 801ba6c:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 801ba6e:	68f8      	ldr	r0, [r7, #12]
 801ba70:	f007 f8f0 	bl	8022c54 <sys_arch_unprotect>
    return rmem;
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	e09a      	b.n	801bbae <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	3b08      	subs	r3, #8
 801ba7c:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 801ba7e:	69fb      	ldr	r3, [r7, #28]
 801ba80:	4a4d      	ldr	r2, [pc, #308]	; (801bbb8 <mem_trim+0x1b4>)
 801ba82:	6812      	ldr	r2, [r2, #0]
 801ba84:	1a9b      	subs	r3, r3, r2
 801ba86:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 801ba88:	69fb      	ldr	r3, [r7, #28]
 801ba8a:	881a      	ldrh	r2, [r3, #0]
 801ba8c:	8b7b      	ldrh	r3, [r7, #26]
 801ba8e:	1ad3      	subs	r3, r2, r3
 801ba90:	b29b      	uxth	r3, r3
 801ba92:	3b08      	subs	r3, #8
 801ba94:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801ba96:	887a      	ldrh	r2, [r7, #2]
 801ba98:	8b3b      	ldrh	r3, [r7, #24]
 801ba9a:	429a      	cmp	r2, r3
 801ba9c:	d906      	bls.n	801baac <mem_trim+0xa8>
 801ba9e:	4b48      	ldr	r3, [pc, #288]	; (801bbc0 <mem_trim+0x1bc>)
 801baa0:	f240 2206 	movw	r2, #518	; 0x206
 801baa4:	4949      	ldr	r1, [pc, #292]	; (801bbcc <mem_trim+0x1c8>)
 801baa6:	4848      	ldr	r0, [pc, #288]	; (801bbc8 <mem_trim+0x1c4>)
 801baa8:	f00b fcc2 	bl	8027430 <iprintf>
  if (newsize > size) {
 801baac:	887a      	ldrh	r2, [r7, #2]
 801baae:	8b3b      	ldrh	r3, [r7, #24]
 801bab0:	429a      	cmp	r2, r3
 801bab2:	d901      	bls.n	801bab8 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 801bab4:	2300      	movs	r3, #0
 801bab6:	e07a      	b.n	801bbae <mem_trim+0x1aa>
  }
  if (newsize == size) {
 801bab8:	887a      	ldrh	r2, [r7, #2]
 801baba:	8b3b      	ldrh	r3, [r7, #24]
 801babc:	429a      	cmp	r2, r3
 801babe:	d101      	bne.n	801bac4 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	e074      	b.n	801bbae <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801bac4:	4842      	ldr	r0, [pc, #264]	; (801bbd0 <mem_trim+0x1cc>)
 801bac6:	f007 f875 	bl	8022bb4 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 801baca:	4b3b      	ldr	r3, [pc, #236]	; (801bbb8 <mem_trim+0x1b4>)
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	69fa      	ldr	r2, [r7, #28]
 801bad0:	8812      	ldrh	r2, [r2, #0]
 801bad2:	4413      	add	r3, r2
 801bad4:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 801bad6:	697b      	ldr	r3, [r7, #20]
 801bad8:	791b      	ldrb	r3, [r3, #4]
 801bada:	2b00      	cmp	r3, #0
 801badc:	d131      	bne.n	801bb42 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 801bade:	697b      	ldr	r3, [r7, #20]
 801bae0:	881b      	ldrh	r3, [r3, #0]
 801bae2:	827b      	strh	r3, [r7, #18]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801bae4:	8b7a      	ldrh	r2, [r7, #26]
 801bae6:	887b      	ldrh	r3, [r7, #2]
 801bae8:	4413      	add	r3, r2
 801baea:	b29b      	uxth	r3, r3
 801baec:	3308      	adds	r3, #8
 801baee:	823b      	strh	r3, [r7, #16]
    if (lfree == mem2) {
 801baf0:	4b38      	ldr	r3, [pc, #224]	; (801bbd4 <mem_trim+0x1d0>)
 801baf2:	681a      	ldr	r2, [r3, #0]
 801baf4:	697b      	ldr	r3, [r7, #20]
 801baf6:	429a      	cmp	r2, r3
 801baf8:	d105      	bne.n	801bb06 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 801bafa:	4b2f      	ldr	r3, [pc, #188]	; (801bbb8 <mem_trim+0x1b4>)
 801bafc:	681a      	ldr	r2, [r3, #0]
 801bafe:	8a3b      	ldrh	r3, [r7, #16]
 801bb00:	4413      	add	r3, r2
 801bb02:	4a34      	ldr	r2, [pc, #208]	; (801bbd4 <mem_trim+0x1d0>)
 801bb04:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 801bb06:	4b2c      	ldr	r3, [pc, #176]	; (801bbb8 <mem_trim+0x1b4>)
 801bb08:	681a      	ldr	r2, [r3, #0]
 801bb0a:	8a3b      	ldrh	r3, [r7, #16]
 801bb0c:	4413      	add	r3, r2
 801bb0e:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 801bb10:	697b      	ldr	r3, [r7, #20]
 801bb12:	2200      	movs	r2, #0
 801bb14:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801bb16:	697b      	ldr	r3, [r7, #20]
 801bb18:	8a7a      	ldrh	r2, [r7, #18]
 801bb1a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801bb1c:	697b      	ldr	r3, [r7, #20]
 801bb1e:	8b7a      	ldrh	r2, [r7, #26]
 801bb20:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801bb22:	69fb      	ldr	r3, [r7, #28]
 801bb24:	8a3a      	ldrh	r2, [r7, #16]
 801bb26:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801bb28:	697b      	ldr	r3, [r7, #20]
 801bb2a:	881b      	ldrh	r3, [r3, #0]
 801bb2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bb30:	d039      	beq.n	801bba6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801bb32:	4b21      	ldr	r3, [pc, #132]	; (801bbb8 <mem_trim+0x1b4>)
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	697a      	ldr	r2, [r7, #20]
 801bb38:	8812      	ldrh	r2, [r2, #0]
 801bb3a:	4413      	add	r3, r2
 801bb3c:	8a3a      	ldrh	r2, [r7, #16]
 801bb3e:	805a      	strh	r2, [r3, #2]
 801bb40:	e031      	b.n	801bba6 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801bb42:	887b      	ldrh	r3, [r7, #2]
 801bb44:	f103 0214 	add.w	r2, r3, #20
 801bb48:	8b3b      	ldrh	r3, [r7, #24]
 801bb4a:	429a      	cmp	r2, r3
 801bb4c:	d82b      	bhi.n	801bba6 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801bb4e:	8b7a      	ldrh	r2, [r7, #26]
 801bb50:	887b      	ldrh	r3, [r7, #2]
 801bb52:	4413      	add	r3, r2
 801bb54:	b29b      	uxth	r3, r3
 801bb56:	3308      	adds	r3, #8
 801bb58:	823b      	strh	r3, [r7, #16]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 801bb5a:	4b17      	ldr	r3, [pc, #92]	; (801bbb8 <mem_trim+0x1b4>)
 801bb5c:	681a      	ldr	r2, [r3, #0]
 801bb5e:	8a3b      	ldrh	r3, [r7, #16]
 801bb60:	4413      	add	r3, r2
 801bb62:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 801bb64:	4b1b      	ldr	r3, [pc, #108]	; (801bbd4 <mem_trim+0x1d0>)
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	697a      	ldr	r2, [r7, #20]
 801bb6a:	429a      	cmp	r2, r3
 801bb6c:	d202      	bcs.n	801bb74 <mem_trim+0x170>
      lfree = mem2;
 801bb6e:	4a19      	ldr	r2, [pc, #100]	; (801bbd4 <mem_trim+0x1d0>)
 801bb70:	697b      	ldr	r3, [r7, #20]
 801bb72:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801bb74:	697b      	ldr	r3, [r7, #20]
 801bb76:	2200      	movs	r2, #0
 801bb78:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801bb7a:	69fb      	ldr	r3, [r7, #28]
 801bb7c:	881a      	ldrh	r2, [r3, #0]
 801bb7e:	697b      	ldr	r3, [r7, #20]
 801bb80:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801bb82:	697b      	ldr	r3, [r7, #20]
 801bb84:	8b7a      	ldrh	r2, [r7, #26]
 801bb86:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801bb88:	69fb      	ldr	r3, [r7, #28]
 801bb8a:	8a3a      	ldrh	r2, [r7, #16]
 801bb8c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801bb8e:	697b      	ldr	r3, [r7, #20]
 801bb90:	881b      	ldrh	r3, [r3, #0]
 801bb92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bb96:	d006      	beq.n	801bba6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801bb98:	4b07      	ldr	r3, [pc, #28]	; (801bbb8 <mem_trim+0x1b4>)
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	697a      	ldr	r2, [r7, #20]
 801bb9e:	8812      	ldrh	r2, [r2, #0]
 801bba0:	4413      	add	r3, r2
 801bba2:	8a3a      	ldrh	r2, [r7, #16]
 801bba4:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801bba6:	480a      	ldr	r0, [pc, #40]	; (801bbd0 <mem_trim+0x1cc>)
 801bba8:	f007 f813 	bl	8022bd2 <sys_mutex_unlock>
  return rmem;
 801bbac:	687b      	ldr	r3, [r7, #4]
}
 801bbae:	4618      	mov	r0, r3
 801bbb0:	3720      	adds	r7, #32
 801bbb2:	46bd      	mov	sp, r7
 801bbb4:	bd80      	pop	{r7, pc}
 801bbb6:	bf00      	nop
 801bbb8:	200094b0 	.word	0x200094b0
 801bbbc:	200094b4 	.word	0x200094b4
 801bbc0:	08029ef8 	.word	0x08029ef8
 801bbc4:	0802a038 	.word	0x0802a038
 801bbc8:	08029f40 	.word	0x08029f40
 801bbcc:	0802a050 	.word	0x0802a050
 801bbd0:	200094bc 	.word	0x200094bc
 801bbd4:	200094b8 	.word	0x200094b8

0801bbd8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 801bbd8:	b580      	push	{r7, lr}
 801bbda:	b088      	sub	sp, #32
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	4603      	mov	r3, r0
 801bbe0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 801bbe2:	88fb      	ldrh	r3, [r7, #6]
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d101      	bne.n	801bbec <mem_malloc+0x14>
    return NULL;
 801bbe8:	2300      	movs	r3, #0
 801bbea:	e0d1      	b.n	801bd90 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 801bbec:	88fb      	ldrh	r3, [r7, #6]
 801bbee:	3303      	adds	r3, #3
 801bbf0:	b29b      	uxth	r3, r3
 801bbf2:	f023 0303 	bic.w	r3, r3, #3
 801bbf6:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 801bbf8:	88fb      	ldrh	r3, [r7, #6]
 801bbfa:	2b0b      	cmp	r3, #11
 801bbfc:	d801      	bhi.n	801bc02 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801bbfe:	230c      	movs	r3, #12
 801bc00:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 801bc02:	88fb      	ldrh	r3, [r7, #6]
 801bc04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bc08:	d901      	bls.n	801bc0e <mem_malloc+0x36>
    return NULL;
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	e0c0      	b.n	801bd90 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801bc0e:	4862      	ldr	r0, [pc, #392]	; (801bd98 <mem_malloc+0x1c0>)
 801bc10:	f006 ffd0 	bl	8022bb4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801bc14:	4b61      	ldr	r3, [pc, #388]	; (801bd9c <mem_malloc+0x1c4>)
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	461a      	mov	r2, r3
 801bc1a:	4b61      	ldr	r3, [pc, #388]	; (801bda0 <mem_malloc+0x1c8>)
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	1ad3      	subs	r3, r2, r3
 801bc20:	83fb      	strh	r3, [r7, #30]
 801bc22:	e0aa      	b.n	801bd7a <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 801bc24:	4b5e      	ldr	r3, [pc, #376]	; (801bda0 <mem_malloc+0x1c8>)
 801bc26:	681a      	ldr	r2, [r3, #0]
 801bc28:	8bfb      	ldrh	r3, [r7, #30]
 801bc2a:	4413      	add	r3, r2
 801bc2c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801bc2e:	697b      	ldr	r3, [r7, #20]
 801bc30:	791b      	ldrb	r3, [r3, #4]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	f040 809b 	bne.w	801bd6e <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801bc38:	697b      	ldr	r3, [r7, #20]
 801bc3a:	881b      	ldrh	r3, [r3, #0]
 801bc3c:	461a      	mov	r2, r3
 801bc3e:	8bfb      	ldrh	r3, [r7, #30]
 801bc40:	1ad3      	subs	r3, r2, r3
 801bc42:	f1a3 0208 	sub.w	r2, r3, #8
 801bc46:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 801bc48:	429a      	cmp	r2, r3
 801bc4a:	f0c0 8090 	bcc.w	801bd6e <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801bc4e:	697b      	ldr	r3, [r7, #20]
 801bc50:	881b      	ldrh	r3, [r3, #0]
 801bc52:	461a      	mov	r2, r3
 801bc54:	8bfb      	ldrh	r3, [r7, #30]
 801bc56:	1ad3      	subs	r3, r2, r3
 801bc58:	f1a3 0208 	sub.w	r2, r3, #8
 801bc5c:	88fb      	ldrh	r3, [r7, #6]
 801bc5e:	3314      	adds	r3, #20
 801bc60:	429a      	cmp	r2, r3
 801bc62:	d327      	bcc.n	801bcb4 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 801bc64:	8bfa      	ldrh	r2, [r7, #30]
 801bc66:	88fb      	ldrh	r3, [r7, #6]
 801bc68:	4413      	add	r3, r2
 801bc6a:	b29b      	uxth	r3, r3
 801bc6c:	3308      	adds	r3, #8
 801bc6e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 801bc70:	4b4b      	ldr	r3, [pc, #300]	; (801bda0 <mem_malloc+0x1c8>)
 801bc72:	681a      	ldr	r2, [r3, #0]
 801bc74:	8a7b      	ldrh	r3, [r7, #18]
 801bc76:	4413      	add	r3, r2
 801bc78:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	2200      	movs	r2, #0
 801bc7e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801bc80:	697b      	ldr	r3, [r7, #20]
 801bc82:	881a      	ldrh	r2, [r3, #0]
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801bc88:	68fb      	ldr	r3, [r7, #12]
 801bc8a:	8bfa      	ldrh	r2, [r7, #30]
 801bc8c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801bc8e:	697b      	ldr	r3, [r7, #20]
 801bc90:	8a7a      	ldrh	r2, [r7, #18]
 801bc92:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801bc94:	697b      	ldr	r3, [r7, #20]
 801bc96:	2201      	movs	r2, #1
 801bc98:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	881b      	ldrh	r3, [r3, #0]
 801bc9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bca2:	d00a      	beq.n	801bcba <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801bca4:	4b3e      	ldr	r3, [pc, #248]	; (801bda0 <mem_malloc+0x1c8>)
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	68fa      	ldr	r2, [r7, #12]
 801bcaa:	8812      	ldrh	r2, [r2, #0]
 801bcac:	4413      	add	r3, r2
 801bcae:	8a7a      	ldrh	r2, [r7, #18]
 801bcb0:	805a      	strh	r2, [r3, #2]
 801bcb2:	e002      	b.n	801bcba <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801bcb4:	697b      	ldr	r3, [r7, #20]
 801bcb6:	2201      	movs	r2, #1
 801bcb8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801bcba:	4b38      	ldr	r3, [pc, #224]	; (801bd9c <mem_malloc+0x1c4>)
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	697a      	ldr	r2, [r7, #20]
 801bcc0:	429a      	cmp	r2, r3
 801bcc2:	d127      	bne.n	801bd14 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 801bcc4:	4b35      	ldr	r3, [pc, #212]	; (801bd9c <mem_malloc+0x1c4>)
 801bcc6:	681b      	ldr	r3, [r3, #0]
 801bcc8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801bcca:	e005      	b.n	801bcd8 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 801bccc:	4b34      	ldr	r3, [pc, #208]	; (801bda0 <mem_malloc+0x1c8>)
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	69ba      	ldr	r2, [r7, #24]
 801bcd2:	8812      	ldrh	r2, [r2, #0]
 801bcd4:	4413      	add	r3, r2
 801bcd6:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 801bcd8:	69bb      	ldr	r3, [r7, #24]
 801bcda:	791b      	ldrb	r3, [r3, #4]
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d004      	beq.n	801bcea <mem_malloc+0x112>
 801bce0:	4b30      	ldr	r3, [pc, #192]	; (801bda4 <mem_malloc+0x1cc>)
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	69ba      	ldr	r2, [r7, #24]
 801bce6:	429a      	cmp	r2, r3
 801bce8:	d1f0      	bne.n	801bccc <mem_malloc+0xf4>
          }
          lfree = cur;
 801bcea:	4a2c      	ldr	r2, [pc, #176]	; (801bd9c <mem_malloc+0x1c4>)
 801bcec:	69bb      	ldr	r3, [r7, #24]
 801bcee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801bcf0:	4b2a      	ldr	r3, [pc, #168]	; (801bd9c <mem_malloc+0x1c4>)
 801bcf2:	681a      	ldr	r2, [r3, #0]
 801bcf4:	4b2b      	ldr	r3, [pc, #172]	; (801bda4 <mem_malloc+0x1cc>)
 801bcf6:	681b      	ldr	r3, [r3, #0]
 801bcf8:	429a      	cmp	r2, r3
 801bcfa:	d00b      	beq.n	801bd14 <mem_malloc+0x13c>
 801bcfc:	4b27      	ldr	r3, [pc, #156]	; (801bd9c <mem_malloc+0x1c4>)
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	791b      	ldrb	r3, [r3, #4]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d006      	beq.n	801bd14 <mem_malloc+0x13c>
 801bd06:	4b28      	ldr	r3, [pc, #160]	; (801bda8 <mem_malloc+0x1d0>)
 801bd08:	f240 22cf 	movw	r2, #719	; 0x2cf
 801bd0c:	4927      	ldr	r1, [pc, #156]	; (801bdac <mem_malloc+0x1d4>)
 801bd0e:	4828      	ldr	r0, [pc, #160]	; (801bdb0 <mem_malloc+0x1d8>)
 801bd10:	f00b fb8e 	bl	8027430 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801bd14:	4820      	ldr	r0, [pc, #128]	; (801bd98 <mem_malloc+0x1c0>)
 801bd16:	f006 ff5c 	bl	8022bd2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801bd1a:	88fa      	ldrh	r2, [r7, #6]
 801bd1c:	697b      	ldr	r3, [r7, #20]
 801bd1e:	4413      	add	r3, r2
 801bd20:	3308      	adds	r3, #8
 801bd22:	4a20      	ldr	r2, [pc, #128]	; (801bda4 <mem_malloc+0x1cc>)
 801bd24:	6812      	ldr	r2, [r2, #0]
 801bd26:	4293      	cmp	r3, r2
 801bd28:	d906      	bls.n	801bd38 <mem_malloc+0x160>
 801bd2a:	4b1f      	ldr	r3, [pc, #124]	; (801bda8 <mem_malloc+0x1d0>)
 801bd2c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801bd30:	4920      	ldr	r1, [pc, #128]	; (801bdb4 <mem_malloc+0x1dc>)
 801bd32:	481f      	ldr	r0, [pc, #124]	; (801bdb0 <mem_malloc+0x1d8>)
 801bd34:	f00b fb7c 	bl	8027430 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801bd38:	697b      	ldr	r3, [r7, #20]
 801bd3a:	f003 0303 	and.w	r3, r3, #3
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d006      	beq.n	801bd50 <mem_malloc+0x178>
 801bd42:	4b19      	ldr	r3, [pc, #100]	; (801bda8 <mem_malloc+0x1d0>)
 801bd44:	f240 22d6 	movw	r2, #726	; 0x2d6
 801bd48:	491b      	ldr	r1, [pc, #108]	; (801bdb8 <mem_malloc+0x1e0>)
 801bd4a:	4819      	ldr	r0, [pc, #100]	; (801bdb0 <mem_malloc+0x1d8>)
 801bd4c:	f00b fb70 	bl	8027430 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801bd50:	697b      	ldr	r3, [r7, #20]
 801bd52:	f003 0303 	and.w	r3, r3, #3
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d006      	beq.n	801bd68 <mem_malloc+0x190>
 801bd5a:	4b13      	ldr	r3, [pc, #76]	; (801bda8 <mem_malloc+0x1d0>)
 801bd5c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 801bd60:	4916      	ldr	r1, [pc, #88]	; (801bdbc <mem_malloc+0x1e4>)
 801bd62:	4813      	ldr	r0, [pc, #76]	; (801bdb0 <mem_malloc+0x1d8>)
 801bd64:	f00b fb64 	bl	8027430 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 801bd68:	697b      	ldr	r3, [r7, #20]
 801bd6a:	3308      	adds	r3, #8
 801bd6c:	e010      	b.n	801bd90 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 801bd6e:	4b0c      	ldr	r3, [pc, #48]	; (801bda0 <mem_malloc+0x1c8>)
 801bd70:	681a      	ldr	r2, [r3, #0]
 801bd72:	8bfb      	ldrh	r3, [r7, #30]
 801bd74:	4413      	add	r3, r2
 801bd76:	881b      	ldrh	r3, [r3, #0]
 801bd78:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801bd7a:	8bfa      	ldrh	r2, [r7, #30]
 801bd7c:	88fb      	ldrh	r3, [r7, #6]
 801bd7e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801bd82:	429a      	cmp	r2, r3
 801bd84:	f4ff af4e 	bcc.w	801bc24 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801bd88:	4803      	ldr	r0, [pc, #12]	; (801bd98 <mem_malloc+0x1c0>)
 801bd8a:	f006 ff22 	bl	8022bd2 <sys_mutex_unlock>
  return NULL;
 801bd8e:	2300      	movs	r3, #0
}
 801bd90:	4618      	mov	r0, r3
 801bd92:	3720      	adds	r7, #32
 801bd94:	46bd      	mov	sp, r7
 801bd96:	bd80      	pop	{r7, pc}
 801bd98:	200094bc 	.word	0x200094bc
 801bd9c:	200094b8 	.word	0x200094b8
 801bda0:	200094b0 	.word	0x200094b0
 801bda4:	200094b4 	.word	0x200094b4
 801bda8:	08029ef8 	.word	0x08029ef8
 801bdac:	0802a070 	.word	0x0802a070
 801bdb0:	08029f40 	.word	0x08029f40
 801bdb4:	0802a08c 	.word	0x0802a08c
 801bdb8:	0802a0bc 	.word	0x0802a0bc
 801bdbc:	0802a0ec 	.word	0x0802a0ec

0801bdc0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801bdc0:	b480      	push	{r7}
 801bdc2:	b085      	sub	sp, #20
 801bdc4:	af00      	add	r7, sp, #0
 801bdc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	689b      	ldr	r3, [r3, #8]
 801bdcc:	2200      	movs	r2, #0
 801bdce:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	685b      	ldr	r3, [r3, #4]
 801bdd4:	3303      	adds	r3, #3
 801bdd6:	f023 0303 	bic.w	r3, r3, #3
 801bdda:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801bddc:	2300      	movs	r3, #0
 801bdde:	60fb      	str	r3, [r7, #12]
 801bde0:	e011      	b.n	801be06 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	689b      	ldr	r3, [r3, #8]
 801bde6:	681a      	ldr	r2, [r3, #0]
 801bde8:	68bb      	ldr	r3, [r7, #8]
 801bdea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	689b      	ldr	r3, [r3, #8]
 801bdf0:	68ba      	ldr	r2, [r7, #8]
 801bdf2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	881b      	ldrh	r3, [r3, #0]
 801bdf8:	461a      	mov	r2, r3
 801bdfa:	68bb      	ldr	r3, [r7, #8]
 801bdfc:	4413      	add	r3, r2
 801bdfe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801be00:	68fb      	ldr	r3, [r7, #12]
 801be02:	3301      	adds	r3, #1
 801be04:	60fb      	str	r3, [r7, #12]
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	885b      	ldrh	r3, [r3, #2]
 801be0a:	461a      	mov	r2, r3
 801be0c:	68fb      	ldr	r3, [r7, #12]
 801be0e:	429a      	cmp	r2, r3
 801be10:	dce7      	bgt.n	801bde2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801be12:	bf00      	nop
 801be14:	3714      	adds	r7, #20
 801be16:	46bd      	mov	sp, r7
 801be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be1c:	4770      	bx	lr
	...

0801be20 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801be20:	b580      	push	{r7, lr}
 801be22:	b082      	sub	sp, #8
 801be24:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801be26:	2300      	movs	r3, #0
 801be28:	80fb      	strh	r3, [r7, #6]
 801be2a:	e009      	b.n	801be40 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801be2c:	88fb      	ldrh	r3, [r7, #6]
 801be2e:	4a08      	ldr	r2, [pc, #32]	; (801be50 <memp_init+0x30>)
 801be30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801be34:	4618      	mov	r0, r3
 801be36:	f7ff ffc3 	bl	801bdc0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801be3a:	88fb      	ldrh	r3, [r7, #6]
 801be3c:	3301      	adds	r3, #1
 801be3e:	80fb      	strh	r3, [r7, #6]
 801be40:	88fb      	ldrh	r3, [r7, #6]
 801be42:	2b0b      	cmp	r3, #11
 801be44:	d9f2      	bls.n	801be2c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801be46:	bf00      	nop
 801be48:	3708      	adds	r7, #8
 801be4a:	46bd      	mov	sp, r7
 801be4c:	bd80      	pop	{r7, pc}
 801be4e:	bf00      	nop
 801be50:	0802e60c 	.word	0x0802e60c

0801be54 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 801be54:	b580      	push	{r7, lr}
 801be56:	b084      	sub	sp, #16
 801be58:	af00      	add	r7, sp, #0
 801be5a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801be5c:	f006 feec 	bl	8022c38 <sys_arch_protect>
 801be60:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	689b      	ldr	r3, [r3, #8]
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801be6a:	68bb      	ldr	r3, [r7, #8]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d015      	beq.n	801be9c <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	689b      	ldr	r3, [r3, #8]
 801be74:	68ba      	ldr	r2, [r7, #8]
 801be76:	6812      	ldr	r2, [r2, #0]
 801be78:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801be7a:	68bb      	ldr	r3, [r7, #8]
 801be7c:	f003 0303 	and.w	r3, r3, #3
 801be80:	2b00      	cmp	r3, #0
 801be82:	d006      	beq.n	801be92 <do_memp_malloc_pool+0x3e>
 801be84:	4b09      	ldr	r3, [pc, #36]	; (801beac <do_memp_malloc_pool+0x58>)
 801be86:	f240 1249 	movw	r2, #329	; 0x149
 801be8a:	4909      	ldr	r1, [pc, #36]	; (801beb0 <do_memp_malloc_pool+0x5c>)
 801be8c:	4809      	ldr	r0, [pc, #36]	; (801beb4 <do_memp_malloc_pool+0x60>)
 801be8e:	f00b facf 	bl	8027430 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801be92:	68f8      	ldr	r0, [r7, #12]
 801be94:	f006 fede 	bl	8022c54 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 801be98:	68bb      	ldr	r3, [r7, #8]
 801be9a:	e003      	b.n	801bea4 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 801be9c:	68f8      	ldr	r0, [r7, #12]
 801be9e:	f006 fed9 	bl	8022c54 <sys_arch_unprotect>
  return NULL;
 801bea2:	2300      	movs	r3, #0
}
 801bea4:	4618      	mov	r0, r3
 801bea6:	3710      	adds	r7, #16
 801bea8:	46bd      	mov	sp, r7
 801beaa:	bd80      	pop	{r7, pc}
 801beac:	0802a110 	.word	0x0802a110
 801beb0:	0802a140 	.word	0x0802a140
 801beb4:	0802a164 	.word	0x0802a164

0801beb8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 801beb8:	b580      	push	{r7, lr}
 801beba:	b084      	sub	sp, #16
 801bebc:	af00      	add	r7, sp, #0
 801bebe:	4603      	mov	r3, r0
 801bec0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801bec2:	79fb      	ldrb	r3, [r7, #7]
 801bec4:	2b0b      	cmp	r3, #11
 801bec6:	d908      	bls.n	801beda <memp_malloc+0x22>
 801bec8:	4b0a      	ldr	r3, [pc, #40]	; (801bef4 <memp_malloc+0x3c>)
 801beca:	f240 1287 	movw	r2, #391	; 0x187
 801bece:	490a      	ldr	r1, [pc, #40]	; (801bef8 <memp_malloc+0x40>)
 801bed0:	480a      	ldr	r0, [pc, #40]	; (801befc <memp_malloc+0x44>)
 801bed2:	f00b faad 	bl	8027430 <iprintf>
 801bed6:	2300      	movs	r3, #0
 801bed8:	e008      	b.n	801beec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801beda:	79fb      	ldrb	r3, [r7, #7]
 801bedc:	4a08      	ldr	r2, [pc, #32]	; (801bf00 <memp_malloc+0x48>)
 801bede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bee2:	4618      	mov	r0, r3
 801bee4:	f7ff ffb6 	bl	801be54 <do_memp_malloc_pool>
 801bee8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801beea:	68fb      	ldr	r3, [r7, #12]
}
 801beec:	4618      	mov	r0, r3
 801beee:	3710      	adds	r7, #16
 801bef0:	46bd      	mov	sp, r7
 801bef2:	bd80      	pop	{r7, pc}
 801bef4:	0802a110 	.word	0x0802a110
 801bef8:	0802a1a0 	.word	0x0802a1a0
 801befc:	0802a164 	.word	0x0802a164
 801bf00:	0802e60c 	.word	0x0802e60c

0801bf04 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b084      	sub	sp, #16
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	6078      	str	r0, [r7, #4]
 801bf0c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801bf0e:	683b      	ldr	r3, [r7, #0]
 801bf10:	f003 0303 	and.w	r3, r3, #3
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d006      	beq.n	801bf26 <do_memp_free_pool+0x22>
 801bf18:	4b0d      	ldr	r3, [pc, #52]	; (801bf50 <do_memp_free_pool+0x4c>)
 801bf1a:	f240 129d 	movw	r2, #413	; 0x19d
 801bf1e:	490d      	ldr	r1, [pc, #52]	; (801bf54 <do_memp_free_pool+0x50>)
 801bf20:	480d      	ldr	r0, [pc, #52]	; (801bf58 <do_memp_free_pool+0x54>)
 801bf22:	f00b fa85 	bl	8027430 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 801bf26:	683b      	ldr	r3, [r7, #0]
 801bf28:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801bf2a:	f006 fe85 	bl	8022c38 <sys_arch_protect>
 801bf2e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	689b      	ldr	r3, [r3, #8]
 801bf34:	681a      	ldr	r2, [r3, #0]
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	689b      	ldr	r3, [r3, #8]
 801bf3e:	68fa      	ldr	r2, [r7, #12]
 801bf40:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801bf42:	68b8      	ldr	r0, [r7, #8]
 801bf44:	f006 fe86 	bl	8022c54 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801bf48:	bf00      	nop
 801bf4a:	3710      	adds	r7, #16
 801bf4c:	46bd      	mov	sp, r7
 801bf4e:	bd80      	pop	{r7, pc}
 801bf50:	0802a110 	.word	0x0802a110
 801bf54:	0802a1c0 	.word	0x0802a1c0
 801bf58:	0802a164 	.word	0x0802a164

0801bf5c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801bf5c:	b580      	push	{r7, lr}
 801bf5e:	b082      	sub	sp, #8
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	4603      	mov	r3, r0
 801bf64:	6039      	str	r1, [r7, #0]
 801bf66:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801bf68:	79fb      	ldrb	r3, [r7, #7]
 801bf6a:	2b0b      	cmp	r3, #11
 801bf6c:	d907      	bls.n	801bf7e <memp_free+0x22>
 801bf6e:	4b0c      	ldr	r3, [pc, #48]	; (801bfa0 <memp_free+0x44>)
 801bf70:	f240 12db 	movw	r2, #475	; 0x1db
 801bf74:	490b      	ldr	r1, [pc, #44]	; (801bfa4 <memp_free+0x48>)
 801bf76:	480c      	ldr	r0, [pc, #48]	; (801bfa8 <memp_free+0x4c>)
 801bf78:	f00b fa5a 	bl	8027430 <iprintf>
 801bf7c:	e00c      	b.n	801bf98 <memp_free+0x3c>

  if (mem == NULL) {
 801bf7e:	683b      	ldr	r3, [r7, #0]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d008      	beq.n	801bf96 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801bf84:	79fb      	ldrb	r3, [r7, #7]
 801bf86:	4a09      	ldr	r2, [pc, #36]	; (801bfac <memp_free+0x50>)
 801bf88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bf8c:	6839      	ldr	r1, [r7, #0]
 801bf8e:	4618      	mov	r0, r3
 801bf90:	f7ff ffb8 	bl	801bf04 <do_memp_free_pool>
 801bf94:	e000      	b.n	801bf98 <memp_free+0x3c>
    return;
 801bf96:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801bf98:	3708      	adds	r7, #8
 801bf9a:	46bd      	mov	sp, r7
 801bf9c:	bd80      	pop	{r7, pc}
 801bf9e:	bf00      	nop
 801bfa0:	0802a110 	.word	0x0802a110
 801bfa4:	0802a1e0 	.word	0x0802a1e0
 801bfa8:	0802a164 	.word	0x0802a164
 801bfac:	0802e60c 	.word	0x0802e60c

0801bfb0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801bfb0:	b480      	push	{r7}
 801bfb2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801bfb4:	bf00      	nop
 801bfb6:	46bd      	mov	sp, r7
 801bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfbc:	4770      	bx	lr
	...

0801bfc0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801bfc0:	b580      	push	{r7, lr}
 801bfc2:	b084      	sub	sp, #16
 801bfc4:	af00      	add	r7, sp, #0
 801bfc6:	60f8      	str	r0, [r7, #12]
 801bfc8:	60b9      	str	r1, [r7, #8]
 801bfca:	607a      	str	r2, [r7, #4]
 801bfcc:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 801bfce:	69fb      	ldr	r3, [r7, #28]
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d105      	bne.n	801bfe0 <netif_add+0x20>
 801bfd4:	4b1f      	ldr	r3, [pc, #124]	; (801c054 <netif_add+0x94>)
 801bfd6:	22fb      	movs	r2, #251	; 0xfb
 801bfd8:	491f      	ldr	r1, [pc, #124]	; (801c058 <netif_add+0x98>)
 801bfda:	4820      	ldr	r0, [pc, #128]	; (801c05c <netif_add+0x9c>)
 801bfdc:	f00b fa28 	bl	8027430 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801bfe0:	68fb      	ldr	r3, [r7, #12]
 801bfe2:	2200      	movs	r2, #0
 801bfe4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801bfe6:	68fb      	ldr	r3, [r7, #12]
 801bfe8:	2200      	movs	r2, #0
 801bfea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	2200      	movs	r2, #0
 801bff0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	2200      	movs	r2, #0
 801bff6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	2203      	movs	r2, #3
 801bffe:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	69ba      	ldr	r2, [r7, #24]
 801c006:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 801c008:	4b15      	ldr	r3, [pc, #84]	; (801c060 <netif_add+0xa0>)
 801c00a:	781b      	ldrb	r3, [r3, #0]
 801c00c:	1c5a      	adds	r2, r3, #1
 801c00e:	b2d1      	uxtb	r1, r2
 801c010:	4a13      	ldr	r2, [pc, #76]	; (801c060 <netif_add+0xa0>)
 801c012:	7011      	strb	r1, [r2, #0]
 801c014:	68fa      	ldr	r2, [r7, #12]
 801c016:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	6a3a      	ldr	r2, [r7, #32]
 801c01e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801c020:	683b      	ldr	r3, [r7, #0]
 801c022:	687a      	ldr	r2, [r7, #4]
 801c024:	68b9      	ldr	r1, [r7, #8]
 801c026:	68f8      	ldr	r0, [r7, #12]
 801c028:	f000 f81e 	bl	801c068 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801c02c:	69fb      	ldr	r3, [r7, #28]
 801c02e:	68f8      	ldr	r0, [r7, #12]
 801c030:	4798      	blx	r3
 801c032:	4603      	mov	r3, r0
 801c034:	2b00      	cmp	r3, #0
 801c036:	d001      	beq.n	801c03c <netif_add+0x7c>
    return NULL;
 801c038:	2300      	movs	r3, #0
 801c03a:	e007      	b.n	801c04c <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801c03c:	4b09      	ldr	r3, [pc, #36]	; (801c064 <netif_add+0xa4>)
 801c03e:	681a      	ldr	r2, [r3, #0]
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801c044:	4a07      	ldr	r2, [pc, #28]	; (801c064 <netif_add+0xa4>)
 801c046:	68fb      	ldr	r3, [r7, #12]
 801c048:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 801c04a:	68fb      	ldr	r3, [r7, #12]
}
 801c04c:	4618      	mov	r0, r3
 801c04e:	3710      	adds	r7, #16
 801c050:	46bd      	mov	sp, r7
 801c052:	bd80      	pop	{r7, pc}
 801c054:	0802a1fc 	.word	0x0802a1fc
 801c058:	0802a230 	.word	0x0802a230
 801c05c:	0802a248 	.word	0x0802a248
 801c060:	200094f0 	.word	0x200094f0
 801c064:	2000eccc 	.word	0x2000eccc

0801c068 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 801c068:	b580      	push	{r7, lr}
 801c06a:	b084      	sub	sp, #16
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	60f8      	str	r0, [r7, #12]
 801c070:	60b9      	str	r1, [r7, #8]
 801c072:	607a      	str	r2, [r7, #4]
 801c074:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 801c076:	68bb      	ldr	r3, [r7, #8]
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d003      	beq.n	801c084 <netif_set_addr+0x1c>
 801c07c:	68bb      	ldr	r3, [r7, #8]
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	2b00      	cmp	r3, #0
 801c082:	d10c      	bne.n	801c09e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 801c084:	68b9      	ldr	r1, [r7, #8]
 801c086:	68f8      	ldr	r0, [r7, #12]
 801c088:	f000 f81a 	bl	801c0c0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 801c08c:	6879      	ldr	r1, [r7, #4]
 801c08e:	68f8      	ldr	r0, [r7, #12]
 801c090:	f000 f85a 	bl	801c148 <netif_set_netmask>
    netif_set_gw(netif, gw);
 801c094:	6839      	ldr	r1, [r7, #0]
 801c096:	68f8      	ldr	r0, [r7, #12]
 801c098:	f000 f842 	bl	801c120 <netif_set_gw>
 801c09c:	e00b      	b.n	801c0b6 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 801c09e:	6879      	ldr	r1, [r7, #4]
 801c0a0:	68f8      	ldr	r0, [r7, #12]
 801c0a2:	f000 f851 	bl	801c148 <netif_set_netmask>
    netif_set_gw(netif, gw);
 801c0a6:	6839      	ldr	r1, [r7, #0]
 801c0a8:	68f8      	ldr	r0, [r7, #12]
 801c0aa:	f000 f839 	bl	801c120 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 801c0ae:	68b9      	ldr	r1, [r7, #8]
 801c0b0:	68f8      	ldr	r0, [r7, #12]
 801c0b2:	f000 f805 	bl	801c0c0 <netif_set_ipaddr>
  }
}
 801c0b6:	bf00      	nop
 801c0b8:	3710      	adds	r7, #16
 801c0ba:	46bd      	mov	sp, r7
 801c0bc:	bd80      	pop	{r7, pc}
	...

0801c0c0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b084      	sub	sp, #16
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	6078      	str	r0, [r7, #4]
 801c0c8:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 801c0ca:	683b      	ldr	r3, [r7, #0]
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d003      	beq.n	801c0d8 <netif_set_ipaddr+0x18>
 801c0d0:	683b      	ldr	r3, [r7, #0]
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	60fb      	str	r3, [r7, #12]
 801c0d6:	e002      	b.n	801c0de <netif_set_ipaddr+0x1e>
 801c0d8:	4b10      	ldr	r3, [pc, #64]	; (801c11c <netif_set_ipaddr+0x5c>)
 801c0da:	681b      	ldr	r3, [r3, #0]
 801c0dc:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 801c0de:	68fa      	ldr	r2, [r7, #12]
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	3304      	adds	r3, #4
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	429a      	cmp	r2, r3
 801c0e8:	d014      	beq.n	801c114 <netif_set_ipaddr+0x54>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	3304      	adds	r3, #4
 801c0ee:	f107 020c 	add.w	r2, r7, #12
 801c0f2:	4611      	mov	r1, r2
 801c0f4:	4618      	mov	r0, r3
 801c0f6:	f002 fb4d 	bl	801e794 <tcp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801c0fa:	683b      	ldr	r3, [r7, #0]
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d002      	beq.n	801c106 <netif_set_ipaddr+0x46>
 801c100:	683b      	ldr	r3, [r7, #0]
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	e000      	b.n	801c108 <netif_set_ipaddr+0x48>
 801c106:	2300      	movs	r3, #0
 801c108:	687a      	ldr	r2, [r7, #4]
 801c10a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801c10c:	2101      	movs	r1, #1
 801c10e:	6878      	ldr	r0, [r7, #4]
 801c110:	f000 f861 	bl	801c1d6 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 801c114:	bf00      	nop
 801c116:	3710      	adds	r7, #16
 801c118:	46bd      	mov	sp, r7
 801c11a:	bd80      	pop	{r7, pc}
 801c11c:	0802e578 	.word	0x0802e578

0801c120 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 801c120:	b480      	push	{r7}
 801c122:	b083      	sub	sp, #12
 801c124:	af00      	add	r7, sp, #0
 801c126:	6078      	str	r0, [r7, #4]
 801c128:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801c12a:	683b      	ldr	r3, [r7, #0]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d002      	beq.n	801c136 <netif_set_gw+0x16>
 801c130:	683b      	ldr	r3, [r7, #0]
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	e000      	b.n	801c138 <netif_set_gw+0x18>
 801c136:	2300      	movs	r3, #0
 801c138:	687a      	ldr	r2, [r7, #4]
 801c13a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 801c13c:	bf00      	nop
 801c13e:	370c      	adds	r7, #12
 801c140:	46bd      	mov	sp, r7
 801c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c146:	4770      	bx	lr

0801c148 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 801c148:	b480      	push	{r7}
 801c14a:	b083      	sub	sp, #12
 801c14c:	af00      	add	r7, sp, #0
 801c14e:	6078      	str	r0, [r7, #4]
 801c150:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801c152:	683b      	ldr	r3, [r7, #0]
 801c154:	2b00      	cmp	r3, #0
 801c156:	d002      	beq.n	801c15e <netif_set_netmask+0x16>
 801c158:	683b      	ldr	r3, [r7, #0]
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	e000      	b.n	801c160 <netif_set_netmask+0x18>
 801c15e:	2300      	movs	r3, #0
 801c160:	687a      	ldr	r2, [r7, #4]
 801c162:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 801c164:	bf00      	nop
 801c166:	370c      	adds	r7, #12
 801c168:	46bd      	mov	sp, r7
 801c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c16e:	4770      	bx	lr

0801c170 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801c170:	b480      	push	{r7}
 801c172:	b083      	sub	sp, #12
 801c174:	af00      	add	r7, sp, #0
 801c176:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801c178:	4a04      	ldr	r2, [pc, #16]	; (801c18c <netif_set_default+0x1c>)
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801c17e:	bf00      	nop
 801c180:	370c      	adds	r7, #12
 801c182:	46bd      	mov	sp, r7
 801c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c188:	4770      	bx	lr
 801c18a:	bf00      	nop
 801c18c:	2000ecd0 	.word	0x2000ecd0

0801c190 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801c190:	b580      	push	{r7, lr}
 801c192:	b082      	sub	sp, #8
 801c194:	af00      	add	r7, sp, #0
 801c196:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c19e:	f003 0301 	and.w	r3, r3, #1
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d113      	bne.n	801c1ce <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c1ac:	f043 0301 	orr.w	r3, r3, #1
 801c1b0:	b2da      	uxtb	r2, r3
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c1be:	f003 0304 	and.w	r3, r3, #4
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d003      	beq.n	801c1ce <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 801c1c6:	2103      	movs	r1, #3
 801c1c8:	6878      	ldr	r0, [r7, #4]
 801c1ca:	f000 f804 	bl	801c1d6 <netif_issue_reports>
    }
  }
}
 801c1ce:	bf00      	nop
 801c1d0:	3708      	adds	r7, #8
 801c1d2:	46bd      	mov	sp, r7
 801c1d4:	bd80      	pop	{r7, pc}

0801c1d6 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 801c1d6:	b580      	push	{r7, lr}
 801c1d8:	b082      	sub	sp, #8
 801c1da:	af00      	add	r7, sp, #0
 801c1dc:	6078      	str	r0, [r7, #4]
 801c1de:	460b      	mov	r3, r1
 801c1e0:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801c1e2:	78fb      	ldrb	r3, [r7, #3]
 801c1e4:	f003 0301 	and.w	r3, r3, #1
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d011      	beq.n	801c210 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	3304      	adds	r3, #4
 801c1f0:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d00c      	beq.n	801c210 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c1fc:	f003 0308 	and.w	r3, r3, #8
 801c200:	2b00      	cmp	r3, #0
 801c202:	d005      	beq.n	801c210 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	3304      	adds	r3, #4
 801c208:	4619      	mov	r1, r3
 801c20a:	6878      	ldr	r0, [r7, #4]
 801c20c:	f7fd ff4c 	bl	801a0a8 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 801c210:	bf00      	nop
 801c212:	3708      	adds	r7, #8
 801c214:	46bd      	mov	sp, r7
 801c216:	bd80      	pop	{r7, pc}

0801c218 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801c218:	b580      	push	{r7, lr}
 801c21a:	b082      	sub	sp, #8
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c226:	f003 0301 	and.w	r3, r3, #1
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d012      	beq.n	801c254 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c234:	f023 0301 	bic.w	r3, r3, #1
 801c238:	b2da      	uxtb	r2, r3
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c246:	f003 0308 	and.w	r3, r3, #8
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d002      	beq.n	801c254 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 801c24e:	6878      	ldr	r0, [r7, #4]
 801c250:	f7fd faf0 	bl	8019834 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801c254:	bf00      	nop
 801c256:	3708      	adds	r7, #8
 801c258:	46bd      	mov	sp, r7
 801c25a:	bd80      	pop	{r7, pc}

0801c25c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801c25c:	b580      	push	{r7, lr}
 801c25e:	b082      	sub	sp, #8
 801c260:	af00      	add	r7, sp, #0
 801c262:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c26a:	f003 0304 	and.w	r3, r3, #4
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d113      	bne.n	801c29a <netif_set_link_up+0x3e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c278:	f043 0304 	orr.w	r3, r3, #4
 801c27c:	b2da      	uxtb	r2, r3
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c28a:	f003 0301 	and.w	r3, r3, #1
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d003      	beq.n	801c29a <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 801c292:	2103      	movs	r1, #3
 801c294:	6878      	ldr	r0, [r7, #4]
 801c296:	f7ff ff9e 	bl	801c1d6 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  }
}
 801c29a:	bf00      	nop
 801c29c:	3708      	adds	r7, #8
 801c29e:	46bd      	mov	sp, r7
 801c2a0:	bd80      	pop	{r7, pc}

0801c2a2 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 801c2a2:	b480      	push	{r7}
 801c2a4:	b083      	sub	sp, #12
 801c2a6:	af00      	add	r7, sp, #0
 801c2a8:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c2b0:	f003 0304 	and.w	r3, r3, #4
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d008      	beq.n	801c2ca <netif_set_link_down+0x28>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c2be:	f023 0304 	bic.w	r3, r3, #4
 801c2c2:	b2da      	uxtb	r2, r3
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    NETIF_LINK_CALLBACK(netif);
  }
}
 801c2ca:	bf00      	nop
 801c2cc:	370c      	adds	r7, #12
 801c2ce:	46bd      	mov	sp, r7
 801c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2d4:	4770      	bx	lr
	...

0801c2d8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801c2d8:	b580      	push	{r7, lr}
 801c2da:	b082      	sub	sp, #8
 801c2dc:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801c2de:	f006 fcab 	bl	8022c38 <sys_arch_protect>
 801c2e2:	6038      	str	r0, [r7, #0]
 801c2e4:	4b0f      	ldr	r3, [pc, #60]	; (801c324 <pbuf_free_ooseq+0x4c>)
 801c2e6:	2200      	movs	r2, #0
 801c2e8:	701a      	strb	r2, [r3, #0]
 801c2ea:	6838      	ldr	r0, [r7, #0]
 801c2ec:	f006 fcb2 	bl	8022c54 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801c2f0:	4b0d      	ldr	r3, [pc, #52]	; (801c328 <pbuf_free_ooseq+0x50>)
 801c2f2:	681b      	ldr	r3, [r3, #0]
 801c2f4:	607b      	str	r3, [r7, #4]
 801c2f6:	e00f      	b.n	801c318 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 801c2f8:	687b      	ldr	r3, [r7, #4]
 801c2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d008      	beq.n	801c312 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c304:	4618      	mov	r0, r3
 801c306:	f001 fec0 	bl	801e08a <tcp_segs_free>
      pcb->ooseq = NULL;
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	2200      	movs	r2, #0
 801c30e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 801c310:	e005      	b.n	801c31e <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	68db      	ldr	r3, [r3, #12]
 801c316:	607b      	str	r3, [r7, #4]
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d1ec      	bne.n	801c2f8 <pbuf_free_ooseq+0x20>
    }
  }
}
 801c31e:	3708      	adds	r7, #8
 801c320:	46bd      	mov	sp, r7
 801c322:	bd80      	pop	{r7, pc}
 801c324:	2000ecd4 	.word	0x2000ecd4
 801c328:	2000ecdc 	.word	0x2000ecdc

0801c32c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801c32c:	b580      	push	{r7, lr}
 801c32e:	b082      	sub	sp, #8
 801c330:	af00      	add	r7, sp, #0
 801c332:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801c334:	f7ff ffd0 	bl	801c2d8 <pbuf_free_ooseq>
}
 801c338:	bf00      	nop
 801c33a:	3708      	adds	r7, #8
 801c33c:	46bd      	mov	sp, r7
 801c33e:	bd80      	pop	{r7, pc}

0801c340 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801c340:	b580      	push	{r7, lr}
 801c342:	b082      	sub	sp, #8
 801c344:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801c346:	f006 fc77 	bl	8022c38 <sys_arch_protect>
 801c34a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801c34c:	4b10      	ldr	r3, [pc, #64]	; (801c390 <pbuf_pool_is_empty+0x50>)
 801c34e:	781b      	ldrb	r3, [r3, #0]
 801c350:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801c352:	4b0f      	ldr	r3, [pc, #60]	; (801c390 <pbuf_pool_is_empty+0x50>)
 801c354:	2201      	movs	r2, #1
 801c356:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801c358:	6878      	ldr	r0, [r7, #4]
 801c35a:	f006 fc7b 	bl	8022c54 <sys_arch_unprotect>

  if (!queued) {
 801c35e:	78fb      	ldrb	r3, [r7, #3]
 801c360:	2b00      	cmp	r3, #0
 801c362:	d110      	bne.n	801c386 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801c364:	2200      	movs	r2, #0
 801c366:	2100      	movs	r1, #0
 801c368:	480a      	ldr	r0, [pc, #40]	; (801c394 <pbuf_pool_is_empty+0x54>)
 801c36a:	f7fc fe6b 	bl	8019044 <tcpip_callback_with_block>
 801c36e:	4603      	mov	r3, r0
 801c370:	2b00      	cmp	r3, #0
 801c372:	d008      	beq.n	801c386 <pbuf_pool_is_empty+0x46>
 801c374:	f006 fc60 	bl	8022c38 <sys_arch_protect>
 801c378:	6078      	str	r0, [r7, #4]
 801c37a:	4b05      	ldr	r3, [pc, #20]	; (801c390 <pbuf_pool_is_empty+0x50>)
 801c37c:	2200      	movs	r2, #0
 801c37e:	701a      	strb	r2, [r3, #0]
 801c380:	6878      	ldr	r0, [r7, #4]
 801c382:	f006 fc67 	bl	8022c54 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801c386:	bf00      	nop
 801c388:	3708      	adds	r7, #8
 801c38a:	46bd      	mov	sp, r7
 801c38c:	bd80      	pop	{r7, pc}
 801c38e:	bf00      	nop
 801c390:	2000ecd4 	.word	0x2000ecd4
 801c394:	0801c32d 	.word	0x0801c32d

0801c398 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801c398:	b580      	push	{r7, lr}
 801c39a:	b088      	sub	sp, #32
 801c39c:	af00      	add	r7, sp, #0
 801c39e:	4603      	mov	r3, r0
 801c3a0:	71fb      	strb	r3, [r7, #7]
 801c3a2:	460b      	mov	r3, r1
 801c3a4:	80bb      	strh	r3, [r7, #4]
 801c3a6:	4613      	mov	r3, r2
 801c3a8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 801c3aa:	79fb      	ldrb	r3, [r7, #7]
 801c3ac:	2b04      	cmp	r3, #4
 801c3ae:	d81c      	bhi.n	801c3ea <pbuf_alloc+0x52>
 801c3b0:	a201      	add	r2, pc, #4	; (adr r2, 801c3b8 <pbuf_alloc+0x20>)
 801c3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c3b6:	bf00      	nop
 801c3b8:	0801c3cd 	.word	0x0801c3cd
 801c3bc:	0801c3d3 	.word	0x0801c3d3
 801c3c0:	0801c3d9 	.word	0x0801c3d9
 801c3c4:	0801c3df 	.word	0x0801c3df
 801c3c8:	0801c3e5 	.word	0x0801c3e5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801c3cc:	2336      	movs	r3, #54	; 0x36
 801c3ce:	82fb      	strh	r3, [r7, #22]
    break;
 801c3d0:	e014      	b.n	801c3fc <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801c3d2:	2322      	movs	r3, #34	; 0x22
 801c3d4:	82fb      	strh	r3, [r7, #22]
    break;
 801c3d6:	e011      	b.n	801c3fc <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801c3d8:	230e      	movs	r3, #14
 801c3da:	82fb      	strh	r3, [r7, #22]
    break;
 801c3dc:	e00e      	b.n	801c3fc <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801c3de:	2300      	movs	r3, #0
 801c3e0:	82fb      	strh	r3, [r7, #22]
    break;
 801c3e2:	e00b      	b.n	801c3fc <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	82fb      	strh	r3, [r7, #22]
    break;
 801c3e8:	e008      	b.n	801c3fc <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 801c3ea:	4ba5      	ldr	r3, [pc, #660]	; (801c680 <pbuf_alloc+0x2e8>)
 801c3ec:	f44f 728b 	mov.w	r2, #278	; 0x116
 801c3f0:	49a4      	ldr	r1, [pc, #656]	; (801c684 <pbuf_alloc+0x2ec>)
 801c3f2:	48a5      	ldr	r0, [pc, #660]	; (801c688 <pbuf_alloc+0x2f0>)
 801c3f4:	f00b f81c 	bl	8027430 <iprintf>
    return NULL;
 801c3f8:	2300      	movs	r3, #0
 801c3fa:	e15d      	b.n	801c6b8 <pbuf_alloc+0x320>
  }

  switch (type) {
 801c3fc:	79bb      	ldrb	r3, [r7, #6]
 801c3fe:	2b03      	cmp	r3, #3
 801c400:	f200 8134 	bhi.w	801c66c <pbuf_alloc+0x2d4>
 801c404:	a201      	add	r2, pc, #4	; (adr r2, 801c40c <pbuf_alloc+0x74>)
 801c406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c40a:	bf00      	nop
 801c40c:	0801c5ad 	.word	0x0801c5ad
 801c410:	0801c639 	.word	0x0801c639
 801c414:	0801c639 	.word	0x0801c639
 801c418:	0801c41d 	.word	0x0801c41d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c41c:	200b      	movs	r0, #11
 801c41e:	f7ff fd4b 	bl	801beb8 <memp_malloc>
 801c422:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 801c424:	69fb      	ldr	r3, [r7, #28]
 801c426:	2b00      	cmp	r3, #0
 801c428:	d103      	bne.n	801c432 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 801c42a:	f7ff ff89 	bl	801c340 <pbuf_pool_is_empty>
      return NULL;
 801c42e:	2300      	movs	r3, #0
 801c430:	e142      	b.n	801c6b8 <pbuf_alloc+0x320>
    }
    p->type = type;
 801c432:	69fb      	ldr	r3, [r7, #28]
 801c434:	79ba      	ldrb	r2, [r7, #6]
 801c436:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 801c438:	69fb      	ldr	r3, [r7, #28]
 801c43a:	2200      	movs	r2, #0
 801c43c:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 801c43e:	8afb      	ldrh	r3, [r7, #22]
 801c440:	3310      	adds	r3, #16
 801c442:	69fa      	ldr	r2, [r7, #28]
 801c444:	4413      	add	r3, r2
 801c446:	3303      	adds	r3, #3
 801c448:	f023 0303 	bic.w	r3, r3, #3
 801c44c:	461a      	mov	r2, r3
 801c44e:	69fb      	ldr	r3, [r7, #28]
 801c450:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 801c452:	69fb      	ldr	r3, [r7, #28]
 801c454:	685b      	ldr	r3, [r3, #4]
 801c456:	f003 0303 	and.w	r3, r3, #3
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	d006      	beq.n	801c46c <pbuf_alloc+0xd4>
 801c45e:	4b88      	ldr	r3, [pc, #544]	; (801c680 <pbuf_alloc+0x2e8>)
 801c460:	f240 1229 	movw	r2, #297	; 0x129
 801c464:	4989      	ldr	r1, [pc, #548]	; (801c68c <pbuf_alloc+0x2f4>)
 801c466:	4888      	ldr	r0, [pc, #544]	; (801c688 <pbuf_alloc+0x2f0>)
 801c468:	f00a ffe2 	bl	8027430 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 801c46c:	69fb      	ldr	r3, [r7, #28]
 801c46e:	88ba      	ldrh	r2, [r7, #4]
 801c470:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 801c472:	8afb      	ldrh	r3, [r7, #22]
 801c474:	3303      	adds	r3, #3
 801c476:	f023 0303 	bic.w	r3, r3, #3
 801c47a:	f5c3 7242 	rsb	r2, r3, #776	; 0x308
 801c47e:	88bb      	ldrh	r3, [r7, #4]
 801c480:	4293      	cmp	r3, r2
 801c482:	bf28      	it	cs
 801c484:	4613      	movcs	r3, r2
 801c486:	b29a      	uxth	r2, r3
 801c488:	69fb      	ldr	r3, [r7, #28]
 801c48a:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801c48c:	69fb      	ldr	r3, [r7, #28]
 801c48e:	685b      	ldr	r3, [r3, #4]
 801c490:	69fa      	ldr	r2, [r7, #28]
 801c492:	8952      	ldrh	r2, [r2, #10]
 801c494:	441a      	add	r2, r3
 801c496:	69fb      	ldr	r3, [r7, #28]
 801c498:	f503 7346 	add.w	r3, r3, #792	; 0x318
 801c49c:	429a      	cmp	r2, r3
 801c49e:	d906      	bls.n	801c4ae <pbuf_alloc+0x116>
 801c4a0:	4b77      	ldr	r3, [pc, #476]	; (801c680 <pbuf_alloc+0x2e8>)
 801c4a2:	f44f 7298 	mov.w	r2, #304	; 0x130
 801c4a6:	497a      	ldr	r1, [pc, #488]	; (801c690 <pbuf_alloc+0x2f8>)
 801c4a8:	4877      	ldr	r0, [pc, #476]	; (801c688 <pbuf_alloc+0x2f0>)
 801c4aa:	f00a ffc1 	bl	8027430 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801c4ae:	8afb      	ldrh	r3, [r7, #22]
 801c4b0:	3303      	adds	r3, #3
 801c4b2:	f023 0303 	bic.w	r3, r3, #3
 801c4b6:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 801c4ba:	d106      	bne.n	801c4ca <pbuf_alloc+0x132>
 801c4bc:	4b70      	ldr	r3, [pc, #448]	; (801c680 <pbuf_alloc+0x2e8>)
 801c4be:	f44f 7299 	mov.w	r2, #306	; 0x132
 801c4c2:	4974      	ldr	r1, [pc, #464]	; (801c694 <pbuf_alloc+0x2fc>)
 801c4c4:	4870      	ldr	r0, [pc, #448]	; (801c688 <pbuf_alloc+0x2f0>)
 801c4c6:	f00a ffb3 	bl	8027430 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 801c4ca:	69fb      	ldr	r3, [r7, #28]
 801c4cc:	2201      	movs	r2, #1
 801c4ce:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 801c4d0:	69fb      	ldr	r3, [r7, #28]
 801c4d2:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 801c4d4:	88bb      	ldrh	r3, [r7, #4]
 801c4d6:	69fa      	ldr	r2, [r7, #28]
 801c4d8:	8952      	ldrh	r2, [r2, #10]
 801c4da:	1a9b      	subs	r3, r3, r2
 801c4dc:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 801c4de:	e061      	b.n	801c5a4 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c4e0:	200b      	movs	r0, #11
 801c4e2:	f7ff fce9 	bl	801beb8 <memp_malloc>
 801c4e6:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d106      	bne.n	801c4fc <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 801c4ee:	f7ff ff27 	bl	801c340 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 801c4f2:	69f8      	ldr	r0, [r7, #28]
 801c4f4:	f000 fac2 	bl	801ca7c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 801c4f8:	2300      	movs	r3, #0
 801c4fa:	e0dd      	b.n	801c6b8 <pbuf_alloc+0x320>
      }
      q->type = type;
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	79ba      	ldrb	r2, [r7, #6]
 801c500:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	2200      	movs	r2, #0
 801c506:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	2200      	movs	r2, #0
 801c50c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 801c50e:	69bb      	ldr	r3, [r7, #24]
 801c510:	68fa      	ldr	r2, [r7, #12]
 801c512:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 801c514:	693b      	ldr	r3, [r7, #16]
 801c516:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c51a:	4293      	cmp	r3, r2
 801c51c:	dd06      	ble.n	801c52c <pbuf_alloc+0x194>
 801c51e:	4b58      	ldr	r3, [pc, #352]	; (801c680 <pbuf_alloc+0x2e8>)
 801c520:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801c524:	495c      	ldr	r1, [pc, #368]	; (801c698 <pbuf_alloc+0x300>)
 801c526:	4858      	ldr	r0, [pc, #352]	; (801c688 <pbuf_alloc+0x2f0>)
 801c528:	f00a ff82 	bl	8027430 <iprintf>
      q->tot_len = (u16_t)rem_len;
 801c52c:	693b      	ldr	r3, [r7, #16]
 801c52e:	b29a      	uxth	r2, r3
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 801c534:	693b      	ldr	r3, [r7, #16]
 801c536:	b29b      	uxth	r3, r3
 801c538:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 801c53c:	bf28      	it	cs
 801c53e:	f44f 7342 	movcs.w	r3, #776	; 0x308
 801c542:	b29a      	uxth	r2, r3
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	f103 0210 	add.w	r2, r3, #16
 801c54e:	68fb      	ldr	r3, [r7, #12]
 801c550:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	685b      	ldr	r3, [r3, #4]
 801c556:	f003 0303 	and.w	r3, r3, #3
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d006      	beq.n	801c56c <pbuf_alloc+0x1d4>
 801c55e:	4b48      	ldr	r3, [pc, #288]	; (801c680 <pbuf_alloc+0x2e8>)
 801c560:	f44f 72a9 	mov.w	r2, #338	; 0x152
 801c564:	494d      	ldr	r1, [pc, #308]	; (801c69c <pbuf_alloc+0x304>)
 801c566:	4848      	ldr	r0, [pc, #288]	; (801c688 <pbuf_alloc+0x2f0>)
 801c568:	f00a ff62 	bl	8027430 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801c56c:	69fb      	ldr	r3, [r7, #28]
 801c56e:	685b      	ldr	r3, [r3, #4]
 801c570:	69fa      	ldr	r2, [r7, #28]
 801c572:	8952      	ldrh	r2, [r2, #10]
 801c574:	441a      	add	r2, r3
 801c576:	69fb      	ldr	r3, [r7, #28]
 801c578:	f503 7346 	add.w	r3, r3, #792	; 0x318
 801c57c:	429a      	cmp	r2, r3
 801c57e:	d906      	bls.n	801c58e <pbuf_alloc+0x1f6>
 801c580:	4b3f      	ldr	r3, [pc, #252]	; (801c680 <pbuf_alloc+0x2e8>)
 801c582:	f240 1255 	movw	r2, #341	; 0x155
 801c586:	4942      	ldr	r1, [pc, #264]	; (801c690 <pbuf_alloc+0x2f8>)
 801c588:	483f      	ldr	r0, [pc, #252]	; (801c688 <pbuf_alloc+0x2f0>)
 801c58a:	f00a ff51 	bl	8027430 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 801c58e:	68fb      	ldr	r3, [r7, #12]
 801c590:	2201      	movs	r2, #1
 801c592:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	895b      	ldrh	r3, [r3, #10]
 801c598:	461a      	mov	r2, r3
 801c59a:	693b      	ldr	r3, [r7, #16]
 801c59c:	1a9b      	subs	r3, r3, r2
 801c59e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 801c5a4:	693b      	ldr	r3, [r7, #16]
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	dc9a      	bgt.n	801c4e0 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 801c5aa:	e07e      	b.n	801c6aa <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 801c5ac:	8afb      	ldrh	r3, [r7, #22]
 801c5ae:	3313      	adds	r3, #19
 801c5b0:	b29b      	uxth	r3, r3
 801c5b2:	f023 0303 	bic.w	r3, r3, #3
 801c5b6:	b29a      	uxth	r2, r3
 801c5b8:	88bb      	ldrh	r3, [r7, #4]
 801c5ba:	3303      	adds	r3, #3
 801c5bc:	b29b      	uxth	r3, r3
 801c5be:	f023 0303 	bic.w	r3, r3, #3
 801c5c2:	b29b      	uxth	r3, r3
 801c5c4:	4413      	add	r3, r2
 801c5c6:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 801c5c8:	897a      	ldrh	r2, [r7, #10]
 801c5ca:	88bb      	ldrh	r3, [r7, #4]
 801c5cc:	3303      	adds	r3, #3
 801c5ce:	f023 0303 	bic.w	r3, r3, #3
 801c5d2:	429a      	cmp	r2, r3
 801c5d4:	d201      	bcs.n	801c5da <pbuf_alloc+0x242>
        return NULL;
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	e06e      	b.n	801c6b8 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 801c5da:	897b      	ldrh	r3, [r7, #10]
 801c5dc:	4618      	mov	r0, r3
 801c5de:	f7ff fafb 	bl	801bbd8 <mem_malloc>
 801c5e2:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 801c5e4:	69fb      	ldr	r3, [r7, #28]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d101      	bne.n	801c5ee <pbuf_alloc+0x256>
      return NULL;
 801c5ea:	2300      	movs	r3, #0
 801c5ec:	e064      	b.n	801c6b8 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 801c5ee:	8afb      	ldrh	r3, [r7, #22]
 801c5f0:	3310      	adds	r3, #16
 801c5f2:	69fa      	ldr	r2, [r7, #28]
 801c5f4:	4413      	add	r3, r2
 801c5f6:	3303      	adds	r3, #3
 801c5f8:	f023 0303 	bic.w	r3, r3, #3
 801c5fc:	461a      	mov	r2, r3
 801c5fe:	69fb      	ldr	r3, [r7, #28]
 801c600:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801c602:	69fb      	ldr	r3, [r7, #28]
 801c604:	88ba      	ldrh	r2, [r7, #4]
 801c606:	811a      	strh	r2, [r3, #8]
 801c608:	69fb      	ldr	r3, [r7, #28]
 801c60a:	891a      	ldrh	r2, [r3, #8]
 801c60c:	69fb      	ldr	r3, [r7, #28]
 801c60e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801c610:	69fb      	ldr	r3, [r7, #28]
 801c612:	2200      	movs	r2, #0
 801c614:	601a      	str	r2, [r3, #0]
    p->type = type;
 801c616:	69fb      	ldr	r3, [r7, #28]
 801c618:	79ba      	ldrb	r2, [r7, #6]
 801c61a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801c61c:	69fb      	ldr	r3, [r7, #28]
 801c61e:	685b      	ldr	r3, [r3, #4]
 801c620:	f003 0303 	and.w	r3, r3, #3
 801c624:	2b00      	cmp	r3, #0
 801c626:	d03f      	beq.n	801c6a8 <pbuf_alloc+0x310>
 801c628:	4b15      	ldr	r3, [pc, #84]	; (801c680 <pbuf_alloc+0x2e8>)
 801c62a:	f240 1277 	movw	r2, #375	; 0x177
 801c62e:	491c      	ldr	r1, [pc, #112]	; (801c6a0 <pbuf_alloc+0x308>)
 801c630:	4815      	ldr	r0, [pc, #84]	; (801c688 <pbuf_alloc+0x2f0>)
 801c632:	f00a fefd 	bl	8027430 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 801c636:	e037      	b.n	801c6a8 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801c638:	200a      	movs	r0, #10
 801c63a:	f7ff fc3d 	bl	801beb8 <memp_malloc>
 801c63e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 801c640:	69fb      	ldr	r3, [r7, #28]
 801c642:	2b00      	cmp	r3, #0
 801c644:	d101      	bne.n	801c64a <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 801c646:	2300      	movs	r3, #0
 801c648:	e036      	b.n	801c6b8 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 801c64a:	69fb      	ldr	r3, [r7, #28]
 801c64c:	2200      	movs	r2, #0
 801c64e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801c650:	69fb      	ldr	r3, [r7, #28]
 801c652:	88ba      	ldrh	r2, [r7, #4]
 801c654:	811a      	strh	r2, [r3, #8]
 801c656:	69fb      	ldr	r3, [r7, #28]
 801c658:	891a      	ldrh	r2, [r3, #8]
 801c65a:	69fb      	ldr	r3, [r7, #28]
 801c65c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801c65e:	69fb      	ldr	r3, [r7, #28]
 801c660:	2200      	movs	r2, #0
 801c662:	601a      	str	r2, [r3, #0]
    p->type = type;
 801c664:	69fb      	ldr	r3, [r7, #28]
 801c666:	79ba      	ldrb	r2, [r7, #6]
 801c668:	731a      	strb	r2, [r3, #12]
    break;
 801c66a:	e01e      	b.n	801c6aa <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801c66c:	4b04      	ldr	r3, [pc, #16]	; (801c680 <pbuf_alloc+0x2e8>)
 801c66e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 801c672:	490c      	ldr	r1, [pc, #48]	; (801c6a4 <pbuf_alloc+0x30c>)
 801c674:	4804      	ldr	r0, [pc, #16]	; (801c688 <pbuf_alloc+0x2f0>)
 801c676:	f00a fedb 	bl	8027430 <iprintf>
    return NULL;
 801c67a:	2300      	movs	r3, #0
 801c67c:	e01c      	b.n	801c6b8 <pbuf_alloc+0x320>
 801c67e:	bf00      	nop
 801c680:	0802a270 	.word	0x0802a270
 801c684:	0802a2a0 	.word	0x0802a2a0
 801c688:	0802a2bc 	.word	0x0802a2bc
 801c68c:	0802a2e4 	.word	0x0802a2e4
 801c690:	0802a314 	.word	0x0802a314
 801c694:	0802a348 	.word	0x0802a348
 801c698:	0802a37c 	.word	0x0802a37c
 801c69c:	0802a390 	.word	0x0802a390
 801c6a0:	0802a3c0 	.word	0x0802a3c0
 801c6a4:	0802a3ec 	.word	0x0802a3ec
    break;
 801c6a8:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 801c6aa:	69fb      	ldr	r3, [r7, #28]
 801c6ac:	2201      	movs	r2, #1
 801c6ae:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 801c6b0:	69fb      	ldr	r3, [r7, #28]
 801c6b2:	2200      	movs	r2, #0
 801c6b4:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801c6b6:	69fb      	ldr	r3, [r7, #28]
}
 801c6b8:	4618      	mov	r0, r3
 801c6ba:	3720      	adds	r7, #32
 801c6bc:	46bd      	mov	sp, r7
 801c6be:	bd80      	pop	{r7, pc}

0801c6c0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801c6c0:	b580      	push	{r7, lr}
 801c6c2:	b084      	sub	sp, #16
 801c6c4:	af00      	add	r7, sp, #0
 801c6c6:	603b      	str	r3, [r7, #0]
 801c6c8:	4603      	mov	r3, r0
 801c6ca:	71fb      	strb	r3, [r7, #7]
 801c6cc:	460b      	mov	r3, r1
 801c6ce:	80bb      	strh	r3, [r7, #4]
 801c6d0:	4613      	mov	r3, r2
 801c6d2:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 801c6d4:	79fb      	ldrb	r3, [r7, #7]
 801c6d6:	2b04      	cmp	r3, #4
 801c6d8:	d81b      	bhi.n	801c712 <pbuf_alloced_custom+0x52>
 801c6da:	a201      	add	r2, pc, #4	; (adr r2, 801c6e0 <pbuf_alloced_custom+0x20>)
 801c6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6e0:	0801c6f5 	.word	0x0801c6f5
 801c6e4:	0801c6fb 	.word	0x0801c6fb
 801c6e8:	0801c701 	.word	0x0801c701
 801c6ec:	0801c707 	.word	0x0801c707
 801c6f0:	0801c70d 	.word	0x0801c70d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801c6f4:	2336      	movs	r3, #54	; 0x36
 801c6f6:	81fb      	strh	r3, [r7, #14]
    break;
 801c6f8:	e014      	b.n	801c724 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801c6fa:	2322      	movs	r3, #34	; 0x22
 801c6fc:	81fb      	strh	r3, [r7, #14]
    break;
 801c6fe:	e011      	b.n	801c724 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801c700:	230e      	movs	r3, #14
 801c702:	81fb      	strh	r3, [r7, #14]
    break;
 801c704:	e00e      	b.n	801c724 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801c706:	2300      	movs	r3, #0
 801c708:	81fb      	strh	r3, [r7, #14]
    break;
 801c70a:	e00b      	b.n	801c724 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 801c70c:	2300      	movs	r3, #0
 801c70e:	81fb      	strh	r3, [r7, #14]
    break;
 801c710:	e008      	b.n	801c724 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 801c712:	4b1d      	ldr	r3, [pc, #116]	; (801c788 <pbuf_alloced_custom+0xc8>)
 801c714:	f240 12c5 	movw	r2, #453	; 0x1c5
 801c718:	491c      	ldr	r1, [pc, #112]	; (801c78c <pbuf_alloced_custom+0xcc>)
 801c71a:	481d      	ldr	r0, [pc, #116]	; (801c790 <pbuf_alloced_custom+0xd0>)
 801c71c:	f00a fe88 	bl	8027430 <iprintf>
    return NULL;
 801c720:	2300      	movs	r3, #0
 801c722:	e02d      	b.n	801c780 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c724:	89fb      	ldrh	r3, [r7, #14]
 801c726:	3303      	adds	r3, #3
 801c728:	f023 0203 	bic.w	r2, r3, #3
 801c72c:	88bb      	ldrh	r3, [r7, #4]
 801c72e:	441a      	add	r2, r3
 801c730:	8bbb      	ldrh	r3, [r7, #28]
 801c732:	429a      	cmp	r2, r3
 801c734:	d901      	bls.n	801c73a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801c736:	2300      	movs	r3, #0
 801c738:	e022      	b.n	801c780 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 801c73a:	683b      	ldr	r3, [r7, #0]
 801c73c:	2200      	movs	r2, #0
 801c73e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 801c740:	69bb      	ldr	r3, [r7, #24]
 801c742:	2b00      	cmp	r3, #0
 801c744:	d008      	beq.n	801c758 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801c746:	89fb      	ldrh	r3, [r7, #14]
 801c748:	3303      	adds	r3, #3
 801c74a:	f023 0303 	bic.w	r3, r3, #3
 801c74e:	69ba      	ldr	r2, [r7, #24]
 801c750:	441a      	add	r2, r3
 801c752:	683b      	ldr	r3, [r7, #0]
 801c754:	605a      	str	r2, [r3, #4]
 801c756:	e002      	b.n	801c75e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 801c758:	683b      	ldr	r3, [r7, #0]
 801c75a:	2200      	movs	r2, #0
 801c75c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 801c75e:	683b      	ldr	r3, [r7, #0]
 801c760:	2202      	movs	r2, #2
 801c762:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 801c764:	683b      	ldr	r3, [r7, #0]
 801c766:	88ba      	ldrh	r2, [r7, #4]
 801c768:	811a      	strh	r2, [r3, #8]
 801c76a:	683b      	ldr	r3, [r7, #0]
 801c76c:	891a      	ldrh	r2, [r3, #8]
 801c76e:	683b      	ldr	r3, [r7, #0]
 801c770:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 801c772:	683b      	ldr	r3, [r7, #0]
 801c774:	79ba      	ldrb	r2, [r7, #6]
 801c776:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 801c778:	683b      	ldr	r3, [r7, #0]
 801c77a:	2201      	movs	r2, #1
 801c77c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 801c77e:	683b      	ldr	r3, [r7, #0]
}
 801c780:	4618      	mov	r0, r3
 801c782:	3710      	adds	r7, #16
 801c784:	46bd      	mov	sp, r7
 801c786:	bd80      	pop	{r7, pc}
 801c788:	0802a270 	.word	0x0802a270
 801c78c:	0802a408 	.word	0x0802a408
 801c790:	0802a2bc 	.word	0x0802a2bc

0801c794 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801c794:	b580      	push	{r7, lr}
 801c796:	b086      	sub	sp, #24
 801c798:	af00      	add	r7, sp, #0
 801c79a:	6078      	str	r0, [r7, #4]
 801c79c:	460b      	mov	r3, r1
 801c79e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d106      	bne.n	801c7b4 <pbuf_realloc+0x20>
 801c7a6:	4b4b      	ldr	r3, [pc, #300]	; (801c8d4 <pbuf_realloc+0x140>)
 801c7a8:	f240 12f3 	movw	r2, #499	; 0x1f3
 801c7ac:	494a      	ldr	r1, [pc, #296]	; (801c8d8 <pbuf_realloc+0x144>)
 801c7ae:	484b      	ldr	r0, [pc, #300]	; (801c8dc <pbuf_realloc+0x148>)
 801c7b0:	f00a fe3e 	bl	8027430 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	7b1b      	ldrb	r3, [r3, #12]
 801c7b8:	2b03      	cmp	r3, #3
 801c7ba:	d012      	beq.n	801c7e2 <pbuf_realloc+0x4e>
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	7b1b      	ldrb	r3, [r3, #12]
 801c7c0:	2b01      	cmp	r3, #1
 801c7c2:	d00e      	beq.n	801c7e2 <pbuf_realloc+0x4e>
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	7b1b      	ldrb	r3, [r3, #12]
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d00a      	beq.n	801c7e2 <pbuf_realloc+0x4e>
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	7b1b      	ldrb	r3, [r3, #12]
 801c7d0:	2b02      	cmp	r3, #2
 801c7d2:	d006      	beq.n	801c7e2 <pbuf_realloc+0x4e>
 801c7d4:	4b3f      	ldr	r3, [pc, #252]	; (801c8d4 <pbuf_realloc+0x140>)
 801c7d6:	f240 12f7 	movw	r2, #503	; 0x1f7
 801c7da:	4941      	ldr	r1, [pc, #260]	; (801c8e0 <pbuf_realloc+0x14c>)
 801c7dc:	483f      	ldr	r0, [pc, #252]	; (801c8dc <pbuf_realloc+0x148>)
 801c7de:	f00a fe27 	bl	8027430 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	891b      	ldrh	r3, [r3, #8]
 801c7e6:	887a      	ldrh	r2, [r7, #2]
 801c7e8:	429a      	cmp	r2, r3
 801c7ea:	d26f      	bcs.n	801c8cc <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 801c7ec:	887b      	ldrh	r3, [r7, #2]
 801c7ee:	687a      	ldr	r2, [r7, #4]
 801c7f0:	8912      	ldrh	r2, [r2, #8]
 801c7f2:	1a9b      	subs	r3, r3, r2
 801c7f4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801c7f6:	887b      	ldrh	r3, [r7, #2]
 801c7f8:	827b      	strh	r3, [r7, #18]
  q = p;
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801c7fe:	e025      	b.n	801c84c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 801c800:	697b      	ldr	r3, [r7, #20]
 801c802:	895b      	ldrh	r3, [r3, #10]
 801c804:	8a7a      	ldrh	r2, [r7, #18]
 801c806:	1ad3      	subs	r3, r2, r3
 801c808:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c810:	4293      	cmp	r3, r2
 801c812:	dd06      	ble.n	801c822 <pbuf_realloc+0x8e>
 801c814:	4b2f      	ldr	r3, [pc, #188]	; (801c8d4 <pbuf_realloc+0x140>)
 801c816:	f240 220b 	movw	r2, #523	; 0x20b
 801c81a:	4932      	ldr	r1, [pc, #200]	; (801c8e4 <pbuf_realloc+0x150>)
 801c81c:	482f      	ldr	r0, [pc, #188]	; (801c8dc <pbuf_realloc+0x148>)
 801c81e:	f00a fe07 	bl	8027430 <iprintf>
    q->tot_len += (u16_t)grow;
 801c822:	697b      	ldr	r3, [r7, #20]
 801c824:	891a      	ldrh	r2, [r3, #8]
 801c826:	68fb      	ldr	r3, [r7, #12]
 801c828:	b29b      	uxth	r3, r3
 801c82a:	4413      	add	r3, r2
 801c82c:	b29a      	uxth	r2, r3
 801c82e:	697b      	ldr	r3, [r7, #20]
 801c830:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801c832:	697b      	ldr	r3, [r7, #20]
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801c838:	697b      	ldr	r3, [r7, #20]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d106      	bne.n	801c84c <pbuf_realloc+0xb8>
 801c83e:	4b25      	ldr	r3, [pc, #148]	; (801c8d4 <pbuf_realloc+0x140>)
 801c840:	f240 220f 	movw	r2, #527	; 0x20f
 801c844:	4928      	ldr	r1, [pc, #160]	; (801c8e8 <pbuf_realloc+0x154>)
 801c846:	4825      	ldr	r0, [pc, #148]	; (801c8dc <pbuf_realloc+0x148>)
 801c848:	f00a fdf2 	bl	8027430 <iprintf>
  while (rem_len > q->len) {
 801c84c:	697b      	ldr	r3, [r7, #20]
 801c84e:	895b      	ldrh	r3, [r3, #10]
 801c850:	8a7a      	ldrh	r2, [r7, #18]
 801c852:	429a      	cmp	r2, r3
 801c854:	d8d4      	bhi.n	801c800 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 801c856:	697b      	ldr	r3, [r7, #20]
 801c858:	7b1b      	ldrb	r3, [r3, #12]
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	d122      	bne.n	801c8a4 <pbuf_realloc+0x110>
 801c85e:	697b      	ldr	r3, [r7, #20]
 801c860:	895b      	ldrh	r3, [r3, #10]
 801c862:	8a7a      	ldrh	r2, [r7, #18]
 801c864:	429a      	cmp	r2, r3
 801c866:	d01d      	beq.n	801c8a4 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801c868:	697b      	ldr	r3, [r7, #20]
 801c86a:	7b5b      	ldrb	r3, [r3, #13]
 801c86c:	f003 0302 	and.w	r3, r3, #2
 801c870:	2b00      	cmp	r3, #0
 801c872:	d117      	bne.n	801c8a4 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 801c874:	697b      	ldr	r3, [r7, #20]
 801c876:	685b      	ldr	r3, [r3, #4]
 801c878:	461a      	mov	r2, r3
 801c87a:	697b      	ldr	r3, [r7, #20]
 801c87c:	1ad3      	subs	r3, r2, r3
 801c87e:	b29a      	uxth	r2, r3
 801c880:	8a7b      	ldrh	r3, [r7, #18]
 801c882:	4413      	add	r3, r2
 801c884:	b29b      	uxth	r3, r3
 801c886:	4619      	mov	r1, r3
 801c888:	6978      	ldr	r0, [r7, #20]
 801c88a:	f7ff f8bb 	bl	801ba04 <mem_trim>
 801c88e:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801c890:	697b      	ldr	r3, [r7, #20]
 801c892:	2b00      	cmp	r3, #0
 801c894:	d106      	bne.n	801c8a4 <pbuf_realloc+0x110>
 801c896:	4b0f      	ldr	r3, [pc, #60]	; (801c8d4 <pbuf_realloc+0x140>)
 801c898:	f240 221d 	movw	r2, #541	; 0x21d
 801c89c:	4913      	ldr	r1, [pc, #76]	; (801c8ec <pbuf_realloc+0x158>)
 801c89e:	480f      	ldr	r0, [pc, #60]	; (801c8dc <pbuf_realloc+0x148>)
 801c8a0:	f00a fdc6 	bl	8027430 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801c8a4:	697b      	ldr	r3, [r7, #20]
 801c8a6:	8a7a      	ldrh	r2, [r7, #18]
 801c8a8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801c8aa:	697b      	ldr	r3, [r7, #20]
 801c8ac:	895a      	ldrh	r2, [r3, #10]
 801c8ae:	697b      	ldr	r3, [r7, #20]
 801c8b0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801c8b2:	697b      	ldr	r3, [r7, #20]
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d004      	beq.n	801c8c4 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801c8ba:	697b      	ldr	r3, [r7, #20]
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	4618      	mov	r0, r3
 801c8c0:	f000 f8dc 	bl	801ca7c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801c8c4:	697b      	ldr	r3, [r7, #20]
 801c8c6:	2200      	movs	r2, #0
 801c8c8:	601a      	str	r2, [r3, #0]
 801c8ca:	e000      	b.n	801c8ce <pbuf_realloc+0x13a>
    return;
 801c8cc:	bf00      	nop

}
 801c8ce:	3718      	adds	r7, #24
 801c8d0:	46bd      	mov	sp, r7
 801c8d2:	bd80      	pop	{r7, pc}
 801c8d4:	0802a270 	.word	0x0802a270
 801c8d8:	0802a42c 	.word	0x0802a42c
 801c8dc:	0802a2bc 	.word	0x0802a2bc
 801c8e0:	0802a444 	.word	0x0802a444
 801c8e4:	0802a460 	.word	0x0802a460
 801c8e8:	0802a474 	.word	0x0802a474
 801c8ec:	0802a48c 	.word	0x0802a48c

0801c8f0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801c8f0:	b580      	push	{r7, lr}
 801c8f2:	b084      	sub	sp, #16
 801c8f4:	af00      	add	r7, sp, #0
 801c8f6:	6078      	str	r0, [r7, #4]
 801c8f8:	460b      	mov	r3, r1
 801c8fa:	807b      	strh	r3, [r7, #2]
 801c8fc:	4613      	mov	r3, r2
 801c8fe:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	2b00      	cmp	r3, #0
 801c904:	d106      	bne.n	801c914 <pbuf_header_impl+0x24>
 801c906:	4b46      	ldr	r3, [pc, #280]	; (801ca20 <pbuf_header_impl+0x130>)
 801c908:	f240 223f 	movw	r2, #575	; 0x23f
 801c90c:	4945      	ldr	r1, [pc, #276]	; (801ca24 <pbuf_header_impl+0x134>)
 801c90e:	4846      	ldr	r0, [pc, #280]	; (801ca28 <pbuf_header_impl+0x138>)
 801c910:	f00a fd8e 	bl	8027430 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 801c914:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d002      	beq.n	801c922 <pbuf_header_impl+0x32>
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d101      	bne.n	801c926 <pbuf_header_impl+0x36>
    return 0;
 801c922:	2300      	movs	r3, #0
 801c924:	e078      	b.n	801ca18 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 801c926:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	da10      	bge.n	801c950 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 801c92e:	887b      	ldrh	r3, [r7, #2]
 801c930:	425b      	negs	r3, r3
 801c932:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	895b      	ldrh	r3, [r3, #10]
 801c938:	89fa      	ldrh	r2, [r7, #14]
 801c93a:	429a      	cmp	r2, r3
 801c93c:	d90a      	bls.n	801c954 <pbuf_header_impl+0x64>
 801c93e:	4b38      	ldr	r3, [pc, #224]	; (801ca20 <pbuf_header_impl+0x130>)
 801c940:	f240 2247 	movw	r2, #583	; 0x247
 801c944:	4939      	ldr	r1, [pc, #228]	; (801ca2c <pbuf_header_impl+0x13c>)
 801c946:	4838      	ldr	r0, [pc, #224]	; (801ca28 <pbuf_header_impl+0x138>)
 801c948:	f00a fd72 	bl	8027430 <iprintf>
 801c94c:	2301      	movs	r3, #1
 801c94e:	e063      	b.n	801ca18 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 801c950:	887b      	ldrh	r3, [r7, #2]
 801c952:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	7b1b      	ldrb	r3, [r3, #12]
 801c958:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	685b      	ldr	r3, [r3, #4]
 801c95e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 801c960:	89bb      	ldrh	r3, [r7, #12]
 801c962:	2b00      	cmp	r3, #0
 801c964:	d002      	beq.n	801c96c <pbuf_header_impl+0x7c>
 801c966:	89bb      	ldrh	r3, [r7, #12]
 801c968:	2b03      	cmp	r3, #3
 801c96a:	d112      	bne.n	801c992 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	685a      	ldr	r2, [r3, #4]
 801c970:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c974:	425b      	negs	r3, r3
 801c976:	441a      	add	r2, r3
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	685a      	ldr	r2, [r3, #4]
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	3310      	adds	r3, #16
 801c984:	429a      	cmp	r2, r3
 801c986:	d238      	bcs.n	801c9fa <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	68ba      	ldr	r2, [r7, #8]
 801c98c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 801c98e:	2301      	movs	r3, #1
 801c990:	e042      	b.n	801ca18 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801c992:	89bb      	ldrh	r3, [r7, #12]
 801c994:	2b02      	cmp	r3, #2
 801c996:	d002      	beq.n	801c99e <pbuf_header_impl+0xae>
 801c998:	89bb      	ldrh	r3, [r7, #12]
 801c99a:	2b01      	cmp	r3, #1
 801c99c:	d124      	bne.n	801c9e8 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801c99e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	da0d      	bge.n	801c9c2 <pbuf_header_impl+0xd2>
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	895b      	ldrh	r3, [r3, #10]
 801c9aa:	89fa      	ldrh	r2, [r7, #14]
 801c9ac:	429a      	cmp	r2, r3
 801c9ae:	d808      	bhi.n	801c9c2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	685a      	ldr	r2, [r3, #4]
 801c9b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c9b8:	425b      	negs	r3, r3
 801c9ba:	441a      	add	r2, r3
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	605a      	str	r2, [r3, #4]
 801c9c0:	e011      	b.n	801c9e6 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 801c9c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	dd0b      	ble.n	801c9e2 <pbuf_header_impl+0xf2>
 801c9ca:	787b      	ldrb	r3, [r7, #1]
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	d008      	beq.n	801c9e2 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	685a      	ldr	r2, [r3, #4]
 801c9d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c9d8:	425b      	negs	r3, r3
 801c9da:	441a      	add	r2, r3
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	605a      	str	r2, [r3, #4]
 801c9e0:	e001      	b.n	801c9e6 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801c9e2:	2301      	movs	r3, #1
 801c9e4:	e018      	b.n	801ca18 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801c9e6:	e008      	b.n	801c9fa <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 801c9e8:	4b0d      	ldr	r3, [pc, #52]	; (801ca20 <pbuf_header_impl+0x130>)
 801c9ea:	f240 2277 	movw	r2, #631	; 0x277
 801c9ee:	4910      	ldr	r1, [pc, #64]	; (801ca30 <pbuf_header_impl+0x140>)
 801c9f0:	480d      	ldr	r0, [pc, #52]	; (801ca28 <pbuf_header_impl+0x138>)
 801c9f2:	f00a fd1d 	bl	8027430 <iprintf>
    return 1;
 801c9f6:	2301      	movs	r3, #1
 801c9f8:	e00e      	b.n	801ca18 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	895a      	ldrh	r2, [r3, #10]
 801c9fe:	887b      	ldrh	r3, [r7, #2]
 801ca00:	4413      	add	r3, r2
 801ca02:	b29a      	uxth	r2, r3
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	891a      	ldrh	r2, [r3, #8]
 801ca0c:	887b      	ldrh	r3, [r7, #2]
 801ca0e:	4413      	add	r3, r2
 801ca10:	b29a      	uxth	r2, r3
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 801ca16:	2300      	movs	r3, #0
}
 801ca18:	4618      	mov	r0, r3
 801ca1a:	3710      	adds	r7, #16
 801ca1c:	46bd      	mov	sp, r7
 801ca1e:	bd80      	pop	{r7, pc}
 801ca20:	0802a270 	.word	0x0802a270
 801ca24:	0802a4a8 	.word	0x0802a4a8
 801ca28:	0802a2bc 	.word	0x0802a2bc
 801ca2c:	0802a4b4 	.word	0x0802a4b4
 801ca30:	0802a4d4 	.word	0x0802a4d4

0801ca34 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 801ca34:	b580      	push	{r7, lr}
 801ca36:	b082      	sub	sp, #8
 801ca38:	af00      	add	r7, sp, #0
 801ca3a:	6078      	str	r0, [r7, #4]
 801ca3c:	460b      	mov	r3, r1
 801ca3e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 801ca40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ca44:	2200      	movs	r2, #0
 801ca46:	4619      	mov	r1, r3
 801ca48:	6878      	ldr	r0, [r7, #4]
 801ca4a:	f7ff ff51 	bl	801c8f0 <pbuf_header_impl>
 801ca4e:	4603      	mov	r3, r0
}
 801ca50:	4618      	mov	r0, r3
 801ca52:	3708      	adds	r7, #8
 801ca54:	46bd      	mov	sp, r7
 801ca56:	bd80      	pop	{r7, pc}

0801ca58 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801ca58:	b580      	push	{r7, lr}
 801ca5a:	b082      	sub	sp, #8
 801ca5c:	af00      	add	r7, sp, #0
 801ca5e:	6078      	str	r0, [r7, #4]
 801ca60:	460b      	mov	r3, r1
 801ca62:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 801ca64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ca68:	2201      	movs	r2, #1
 801ca6a:	4619      	mov	r1, r3
 801ca6c:	6878      	ldr	r0, [r7, #4]
 801ca6e:	f7ff ff3f 	bl	801c8f0 <pbuf_header_impl>
 801ca72:	4603      	mov	r3, r0
}
 801ca74:	4618      	mov	r0, r3
 801ca76:	3708      	adds	r7, #8
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	bd80      	pop	{r7, pc}

0801ca7c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801ca7c:	b580      	push	{r7, lr}
 801ca7e:	b088      	sub	sp, #32
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d10b      	bne.n	801caa2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d106      	bne.n	801ca9e <pbuf_free+0x22>
 801ca90:	4b41      	ldr	r3, [pc, #260]	; (801cb98 <pbuf_free+0x11c>)
 801ca92:	f240 22d2 	movw	r2, #722	; 0x2d2
 801ca96:	4941      	ldr	r1, [pc, #260]	; (801cb9c <pbuf_free+0x120>)
 801ca98:	4841      	ldr	r0, [pc, #260]	; (801cba0 <pbuf_free+0x124>)
 801ca9a:	f00a fcc9 	bl	8027430 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801ca9e:	2300      	movs	r3, #0
 801caa0:	e076      	b.n	801cb90 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	7b1b      	ldrb	r3, [r3, #12]
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d012      	beq.n	801cad0 <pbuf_free+0x54>
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	7b1b      	ldrb	r3, [r3, #12]
 801caae:	2b01      	cmp	r3, #1
 801cab0:	d00e      	beq.n	801cad0 <pbuf_free+0x54>
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	7b1b      	ldrb	r3, [r3, #12]
 801cab6:	2b02      	cmp	r3, #2
 801cab8:	d00a      	beq.n	801cad0 <pbuf_free+0x54>
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	7b1b      	ldrb	r3, [r3, #12]
 801cabe:	2b03      	cmp	r3, #3
 801cac0:	d006      	beq.n	801cad0 <pbuf_free+0x54>
 801cac2:	4b35      	ldr	r3, [pc, #212]	; (801cb98 <pbuf_free+0x11c>)
 801cac4:	f240 22de 	movw	r2, #734	; 0x2de
 801cac8:	4936      	ldr	r1, [pc, #216]	; (801cba4 <pbuf_free+0x128>)
 801caca:	4835      	ldr	r0, [pc, #212]	; (801cba0 <pbuf_free+0x124>)
 801cacc:	f00a fcb0 	bl	8027430 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 801cad0:	2300      	movs	r3, #0
 801cad2:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801cad4:	e058      	b.n	801cb88 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801cad6:	f006 f8af 	bl	8022c38 <sys_arch_protect>
 801cada:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	89db      	ldrh	r3, [r3, #14]
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d106      	bne.n	801caf2 <pbuf_free+0x76>
 801cae4:	4b2c      	ldr	r3, [pc, #176]	; (801cb98 <pbuf_free+0x11c>)
 801cae6:	f240 22eb 	movw	r2, #747	; 0x2eb
 801caea:	492f      	ldr	r1, [pc, #188]	; (801cba8 <pbuf_free+0x12c>)
 801caec:	482c      	ldr	r0, [pc, #176]	; (801cba0 <pbuf_free+0x124>)
 801caee:	f00a fc9f 	bl	8027430 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	89db      	ldrh	r3, [r3, #14]
 801caf6:	3b01      	subs	r3, #1
 801caf8:	b29a      	uxth	r2, r3
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	81da      	strh	r2, [r3, #14]
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	89db      	ldrh	r3, [r3, #14]
 801cb02:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 801cb04:	69b8      	ldr	r0, [r7, #24]
 801cb06:	f006 f8a5 	bl	8022c54 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801cb0a:	8afb      	ldrh	r3, [r7, #22]
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	d139      	bne.n	801cb84 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	7b1b      	ldrb	r3, [r3, #12]
 801cb1a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	7b5b      	ldrb	r3, [r3, #13]
 801cb20:	f003 0302 	and.w	r3, r3, #2
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d011      	beq.n	801cb4c <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801cb2c:	68bb      	ldr	r3, [r7, #8]
 801cb2e:	691b      	ldr	r3, [r3, #16]
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	d106      	bne.n	801cb42 <pbuf_free+0xc6>
 801cb34:	4b18      	ldr	r3, [pc, #96]	; (801cb98 <pbuf_free+0x11c>)
 801cb36:	f240 22f9 	movw	r2, #761	; 0x2f9
 801cb3a:	491c      	ldr	r1, [pc, #112]	; (801cbac <pbuf_free+0x130>)
 801cb3c:	4818      	ldr	r0, [pc, #96]	; (801cba0 <pbuf_free+0x124>)
 801cb3e:	f00a fc77 	bl	8027430 <iprintf>
        pc->custom_free_function(p);
 801cb42:	68bb      	ldr	r3, [r7, #8]
 801cb44:	691b      	ldr	r3, [r3, #16]
 801cb46:	6878      	ldr	r0, [r7, #4]
 801cb48:	4798      	blx	r3
 801cb4a:	e015      	b.n	801cb78 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 801cb4c:	89fb      	ldrh	r3, [r7, #14]
 801cb4e:	2b03      	cmp	r3, #3
 801cb50:	d104      	bne.n	801cb5c <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 801cb52:	6879      	ldr	r1, [r7, #4]
 801cb54:	200b      	movs	r0, #11
 801cb56:	f7ff fa01 	bl	801bf5c <memp_free>
 801cb5a:	e00d      	b.n	801cb78 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 801cb5c:	89fb      	ldrh	r3, [r7, #14]
 801cb5e:	2b01      	cmp	r3, #1
 801cb60:	d002      	beq.n	801cb68 <pbuf_free+0xec>
 801cb62:	89fb      	ldrh	r3, [r7, #14]
 801cb64:	2b02      	cmp	r3, #2
 801cb66:	d104      	bne.n	801cb72 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 801cb68:	6879      	ldr	r1, [r7, #4]
 801cb6a:	200a      	movs	r0, #10
 801cb6c:	f7ff f9f6 	bl	801bf5c <memp_free>
 801cb70:	e002      	b.n	801cb78 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 801cb72:	6878      	ldr	r0, [r7, #4]
 801cb74:	f7fe fed8 	bl	801b928 <mem_free>
        }
      }
      count++;
 801cb78:	7ffb      	ldrb	r3, [r7, #31]
 801cb7a:	3301      	adds	r3, #1
 801cb7c:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801cb7e:	693b      	ldr	r3, [r7, #16]
 801cb80:	607b      	str	r3, [r7, #4]
 801cb82:	e001      	b.n	801cb88 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 801cb84:	2300      	movs	r3, #0
 801cb86:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d1a3      	bne.n	801cad6 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801cb8e:	7ffb      	ldrb	r3, [r7, #31]
}
 801cb90:	4618      	mov	r0, r3
 801cb92:	3720      	adds	r7, #32
 801cb94:	46bd      	mov	sp, r7
 801cb96:	bd80      	pop	{r7, pc}
 801cb98:	0802a270 	.word	0x0802a270
 801cb9c:	0802a4a8 	.word	0x0802a4a8
 801cba0:	0802a2bc 	.word	0x0802a2bc
 801cba4:	0802a4e4 	.word	0x0802a4e4
 801cba8:	0802a4fc 	.word	0x0802a4fc
 801cbac:	0802a514 	.word	0x0802a514

0801cbb0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801cbb0:	b480      	push	{r7}
 801cbb2:	b085      	sub	sp, #20
 801cbb4:	af00      	add	r7, sp, #0
 801cbb6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801cbb8:	2300      	movs	r3, #0
 801cbba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801cbbc:	e005      	b.n	801cbca <pbuf_clen+0x1a>
    ++len;
 801cbbe:	89fb      	ldrh	r3, [r7, #14]
 801cbc0:	3301      	adds	r3, #1
 801cbc2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d1f6      	bne.n	801cbbe <pbuf_clen+0xe>
  }
  return len;
 801cbd0:	89fb      	ldrh	r3, [r7, #14]
}
 801cbd2:	4618      	mov	r0, r3
 801cbd4:	3714      	adds	r7, #20
 801cbd6:	46bd      	mov	sp, r7
 801cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbdc:	4770      	bx	lr
	...

0801cbe0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801cbe0:	b580      	push	{r7, lr}
 801cbe2:	b084      	sub	sp, #16
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d016      	beq.n	801cc1c <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 801cbee:	f006 f823 	bl	8022c38 <sys_arch_protect>
 801cbf2:	60f8      	str	r0, [r7, #12]
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	89db      	ldrh	r3, [r3, #14]
 801cbf8:	3301      	adds	r3, #1
 801cbfa:	b29a      	uxth	r2, r3
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	81da      	strh	r2, [r3, #14]
 801cc00:	68f8      	ldr	r0, [r7, #12]
 801cc02:	f006 f827 	bl	8022c54 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	89db      	ldrh	r3, [r3, #14]
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d106      	bne.n	801cc1c <pbuf_ref+0x3c>
 801cc0e:	4b05      	ldr	r3, [pc, #20]	; (801cc24 <pbuf_ref+0x44>)
 801cc10:	f240 3239 	movw	r2, #825	; 0x339
 801cc14:	4904      	ldr	r1, [pc, #16]	; (801cc28 <pbuf_ref+0x48>)
 801cc16:	4805      	ldr	r0, [pc, #20]	; (801cc2c <pbuf_ref+0x4c>)
 801cc18:	f00a fc0a 	bl	8027430 <iprintf>
  }
}
 801cc1c:	bf00      	nop
 801cc1e:	3710      	adds	r7, #16
 801cc20:	46bd      	mov	sp, r7
 801cc22:	bd80      	pop	{r7, pc}
 801cc24:	0802a270 	.word	0x0802a270
 801cc28:	0802a538 	.word	0x0802a538
 801cc2c:	0802a2bc 	.word	0x0802a2bc

0801cc30 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801cc30:	b580      	push	{r7, lr}
 801cc32:	b084      	sub	sp, #16
 801cc34:	af00      	add	r7, sp, #0
 801cc36:	6078      	str	r0, [r7, #4]
 801cc38:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	d002      	beq.n	801cc46 <pbuf_cat+0x16>
 801cc40:	683b      	ldr	r3, [r7, #0]
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d107      	bne.n	801cc56 <pbuf_cat+0x26>
 801cc46:	4b20      	ldr	r3, [pc, #128]	; (801ccc8 <pbuf_cat+0x98>)
 801cc48:	f240 324d 	movw	r2, #845	; 0x34d
 801cc4c:	491f      	ldr	r1, [pc, #124]	; (801cccc <pbuf_cat+0x9c>)
 801cc4e:	4820      	ldr	r0, [pc, #128]	; (801ccd0 <pbuf_cat+0xa0>)
 801cc50:	f00a fbee 	bl	8027430 <iprintf>
 801cc54:	e034      	b.n	801ccc0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	60fb      	str	r3, [r7, #12]
 801cc5a:	e00a      	b.n	801cc72 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	891a      	ldrh	r2, [r3, #8]
 801cc60:	683b      	ldr	r3, [r7, #0]
 801cc62:	891b      	ldrh	r3, [r3, #8]
 801cc64:	4413      	add	r3, r2
 801cc66:	b29a      	uxth	r2, r3
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	60fb      	str	r3, [r7, #12]
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	d1f0      	bne.n	801cc5c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801cc7a:	68fb      	ldr	r3, [r7, #12]
 801cc7c:	891a      	ldrh	r2, [r3, #8]
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	895b      	ldrh	r3, [r3, #10]
 801cc82:	429a      	cmp	r2, r3
 801cc84:	d006      	beq.n	801cc94 <pbuf_cat+0x64>
 801cc86:	4b10      	ldr	r3, [pc, #64]	; (801ccc8 <pbuf_cat+0x98>)
 801cc88:	f240 3255 	movw	r2, #853	; 0x355
 801cc8c:	4911      	ldr	r1, [pc, #68]	; (801ccd4 <pbuf_cat+0xa4>)
 801cc8e:	4810      	ldr	r0, [pc, #64]	; (801ccd0 <pbuf_cat+0xa0>)
 801cc90:	f00a fbce 	bl	8027430 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801cc94:	68fb      	ldr	r3, [r7, #12]
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d006      	beq.n	801ccaa <pbuf_cat+0x7a>
 801cc9c:	4b0a      	ldr	r3, [pc, #40]	; (801ccc8 <pbuf_cat+0x98>)
 801cc9e:	f240 3256 	movw	r2, #854	; 0x356
 801cca2:	490d      	ldr	r1, [pc, #52]	; (801ccd8 <pbuf_cat+0xa8>)
 801cca4:	480a      	ldr	r0, [pc, #40]	; (801ccd0 <pbuf_cat+0xa0>)
 801cca6:	f00a fbc3 	bl	8027430 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 801ccaa:	68fb      	ldr	r3, [r7, #12]
 801ccac:	891a      	ldrh	r2, [r3, #8]
 801ccae:	683b      	ldr	r3, [r7, #0]
 801ccb0:	891b      	ldrh	r3, [r3, #8]
 801ccb2:	4413      	add	r3, r2
 801ccb4:	b29a      	uxth	r2, r3
 801ccb6:	68fb      	ldr	r3, [r7, #12]
 801ccb8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	683a      	ldr	r2, [r7, #0]
 801ccbe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801ccc0:	3710      	adds	r7, #16
 801ccc2:	46bd      	mov	sp, r7
 801ccc4:	bd80      	pop	{r7, pc}
 801ccc6:	bf00      	nop
 801ccc8:	0802a270 	.word	0x0802a270
 801cccc:	0802a54c 	.word	0x0802a54c
 801ccd0:	0802a2bc 	.word	0x0802a2bc
 801ccd4:	0802a584 	.word	0x0802a584
 801ccd8:	0802a5b4 	.word	0x0802a5b4

0801ccdc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801ccdc:	b580      	push	{r7, lr}
 801ccde:	b084      	sub	sp, #16
 801cce0:	af00      	add	r7, sp, #0
 801cce2:	6078      	str	r0, [r7, #4]
 801cce4:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 801cce6:	2300      	movs	r3, #0
 801cce8:	81fb      	strh	r3, [r7, #14]
 801ccea:	2300      	movs	r3, #0
 801ccec:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d008      	beq.n	801cd06 <pbuf_copy+0x2a>
 801ccf4:	683b      	ldr	r3, [r7, #0]
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d005      	beq.n	801cd06 <pbuf_copy+0x2a>
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	891a      	ldrh	r2, [r3, #8]
 801ccfe:	683b      	ldr	r3, [r7, #0]
 801cd00:	891b      	ldrh	r3, [r3, #8]
 801cd02:	429a      	cmp	r2, r3
 801cd04:	d209      	bcs.n	801cd1a <pbuf_copy+0x3e>
 801cd06:	4b54      	ldr	r3, [pc, #336]	; (801ce58 <pbuf_copy+0x17c>)
 801cd08:	f240 32bd 	movw	r2, #957	; 0x3bd
 801cd0c:	4953      	ldr	r1, [pc, #332]	; (801ce5c <pbuf_copy+0x180>)
 801cd0e:	4854      	ldr	r0, [pc, #336]	; (801ce60 <pbuf_copy+0x184>)
 801cd10:	f00a fb8e 	bl	8027430 <iprintf>
 801cd14:	f06f 030f 	mvn.w	r3, #15
 801cd18:	e099      	b.n	801ce4e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	895b      	ldrh	r3, [r3, #10]
 801cd1e:	461a      	mov	r2, r3
 801cd20:	89fb      	ldrh	r3, [r7, #14]
 801cd22:	1ad2      	subs	r2, r2, r3
 801cd24:	683b      	ldr	r3, [r7, #0]
 801cd26:	895b      	ldrh	r3, [r3, #10]
 801cd28:	4619      	mov	r1, r3
 801cd2a:	89bb      	ldrh	r3, [r7, #12]
 801cd2c:	1acb      	subs	r3, r1, r3
 801cd2e:	429a      	cmp	r2, r3
 801cd30:	db05      	blt.n	801cd3e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801cd32:	683b      	ldr	r3, [r7, #0]
 801cd34:	895a      	ldrh	r2, [r3, #10]
 801cd36:	89bb      	ldrh	r3, [r7, #12]
 801cd38:	1ad3      	subs	r3, r2, r3
 801cd3a:	817b      	strh	r3, [r7, #10]
 801cd3c:	e004      	b.n	801cd48 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	895a      	ldrh	r2, [r3, #10]
 801cd42:	89fb      	ldrh	r3, [r7, #14]
 801cd44:	1ad3      	subs	r3, r2, r3
 801cd46:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	685a      	ldr	r2, [r3, #4]
 801cd4c:	89fb      	ldrh	r3, [r7, #14]
 801cd4e:	18d0      	adds	r0, r2, r3
 801cd50:	683b      	ldr	r3, [r7, #0]
 801cd52:	685a      	ldr	r2, [r3, #4]
 801cd54:	89bb      	ldrh	r3, [r7, #12]
 801cd56:	4413      	add	r3, r2
 801cd58:	897a      	ldrh	r2, [r7, #10]
 801cd5a:	4619      	mov	r1, r3
 801cd5c:	f00b fb87 	bl	802846e <memcpy>
    offset_to += len;
 801cd60:	89fa      	ldrh	r2, [r7, #14]
 801cd62:	897b      	ldrh	r3, [r7, #10]
 801cd64:	4413      	add	r3, r2
 801cd66:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 801cd68:	89ba      	ldrh	r2, [r7, #12]
 801cd6a:	897b      	ldrh	r3, [r7, #10]
 801cd6c:	4413      	add	r3, r2
 801cd6e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	895b      	ldrh	r3, [r3, #10]
 801cd74:	89fa      	ldrh	r2, [r7, #14]
 801cd76:	429a      	cmp	r2, r3
 801cd78:	d906      	bls.n	801cd88 <pbuf_copy+0xac>
 801cd7a:	4b37      	ldr	r3, [pc, #220]	; (801ce58 <pbuf_copy+0x17c>)
 801cd7c:	f240 32cd 	movw	r2, #973	; 0x3cd
 801cd80:	4938      	ldr	r1, [pc, #224]	; (801ce64 <pbuf_copy+0x188>)
 801cd82:	4837      	ldr	r0, [pc, #220]	; (801ce60 <pbuf_copy+0x184>)
 801cd84:	f00a fb54 	bl	8027430 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801cd88:	683b      	ldr	r3, [r7, #0]
 801cd8a:	895b      	ldrh	r3, [r3, #10]
 801cd8c:	89ba      	ldrh	r2, [r7, #12]
 801cd8e:	429a      	cmp	r2, r3
 801cd90:	d906      	bls.n	801cda0 <pbuf_copy+0xc4>
 801cd92:	4b31      	ldr	r3, [pc, #196]	; (801ce58 <pbuf_copy+0x17c>)
 801cd94:	f240 32ce 	movw	r2, #974	; 0x3ce
 801cd98:	4933      	ldr	r1, [pc, #204]	; (801ce68 <pbuf_copy+0x18c>)
 801cd9a:	4831      	ldr	r0, [pc, #196]	; (801ce60 <pbuf_copy+0x184>)
 801cd9c:	f00a fb48 	bl	8027430 <iprintf>
    if (offset_from >= p_from->len) {
 801cda0:	683b      	ldr	r3, [r7, #0]
 801cda2:	895b      	ldrh	r3, [r3, #10]
 801cda4:	89ba      	ldrh	r2, [r7, #12]
 801cda6:	429a      	cmp	r2, r3
 801cda8:	d304      	bcc.n	801cdb4 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 801cdaa:	2300      	movs	r3, #0
 801cdac:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 801cdae:	683b      	ldr	r3, [r7, #0]
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	895b      	ldrh	r3, [r3, #10]
 801cdb8:	89fa      	ldrh	r2, [r7, #14]
 801cdba:	429a      	cmp	r2, r3
 801cdbc:	d114      	bne.n	801cde8 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 801cdbe:	2300      	movs	r3, #0
 801cdc0:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	681b      	ldr	r3, [r3, #0]
 801cdc6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d10c      	bne.n	801cde8 <pbuf_copy+0x10c>
 801cdce:	683b      	ldr	r3, [r7, #0]
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d009      	beq.n	801cde8 <pbuf_copy+0x10c>
 801cdd4:	4b20      	ldr	r3, [pc, #128]	; (801ce58 <pbuf_copy+0x17c>)
 801cdd6:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801cdda:	4924      	ldr	r1, [pc, #144]	; (801ce6c <pbuf_copy+0x190>)
 801cddc:	4820      	ldr	r0, [pc, #128]	; (801ce60 <pbuf_copy+0x184>)
 801cdde:	f00a fb27 	bl	8027430 <iprintf>
 801cde2:	f06f 030f 	mvn.w	r3, #15
 801cde6:	e032      	b.n	801ce4e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801cde8:	683b      	ldr	r3, [r7, #0]
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d013      	beq.n	801ce16 <pbuf_copy+0x13a>
 801cdee:	683b      	ldr	r3, [r7, #0]
 801cdf0:	895a      	ldrh	r2, [r3, #10]
 801cdf2:	683b      	ldr	r3, [r7, #0]
 801cdf4:	891b      	ldrh	r3, [r3, #8]
 801cdf6:	429a      	cmp	r2, r3
 801cdf8:	d10d      	bne.n	801ce16 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801cdfa:	683b      	ldr	r3, [r7, #0]
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d009      	beq.n	801ce16 <pbuf_copy+0x13a>
 801ce02:	4b15      	ldr	r3, [pc, #84]	; (801ce58 <pbuf_copy+0x17c>)
 801ce04:	f240 32de 	movw	r2, #990	; 0x3de
 801ce08:	4919      	ldr	r1, [pc, #100]	; (801ce70 <pbuf_copy+0x194>)
 801ce0a:	4815      	ldr	r0, [pc, #84]	; (801ce60 <pbuf_copy+0x184>)
 801ce0c:	f00a fb10 	bl	8027430 <iprintf>
 801ce10:	f06f 0305 	mvn.w	r3, #5
 801ce14:	e01b      	b.n	801ce4e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d013      	beq.n	801ce44 <pbuf_copy+0x168>
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	895a      	ldrh	r2, [r3, #10]
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	891b      	ldrh	r3, [r3, #8]
 801ce24:	429a      	cmp	r2, r3
 801ce26:	d10d      	bne.n	801ce44 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d009      	beq.n	801ce44 <pbuf_copy+0x168>
 801ce30:	4b09      	ldr	r3, [pc, #36]	; (801ce58 <pbuf_copy+0x17c>)
 801ce32:	f240 32e3 	movw	r2, #995	; 0x3e3
 801ce36:	490e      	ldr	r1, [pc, #56]	; (801ce70 <pbuf_copy+0x194>)
 801ce38:	4809      	ldr	r0, [pc, #36]	; (801ce60 <pbuf_copy+0x184>)
 801ce3a:	f00a faf9 	bl	8027430 <iprintf>
 801ce3e:	f06f 0305 	mvn.w	r3, #5
 801ce42:	e004      	b.n	801ce4e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801ce44:	683b      	ldr	r3, [r7, #0]
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	f47f af67 	bne.w	801cd1a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801ce4c:	2300      	movs	r3, #0
}
 801ce4e:	4618      	mov	r0, r3
 801ce50:	3710      	adds	r7, #16
 801ce52:	46bd      	mov	sp, r7
 801ce54:	bd80      	pop	{r7, pc}
 801ce56:	bf00      	nop
 801ce58:	0802a270 	.word	0x0802a270
 801ce5c:	0802a600 	.word	0x0802a600
 801ce60:	0802a2bc 	.word	0x0802a2bc
 801ce64:	0802a630 	.word	0x0802a630
 801ce68:	0802a648 	.word	0x0802a648
 801ce6c:	0802a664 	.word	0x0802a664
 801ce70:	0802a674 	.word	0x0802a674

0801ce74 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801ce74:	b580      	push	{r7, lr}
 801ce76:	b088      	sub	sp, #32
 801ce78:	af00      	add	r7, sp, #0
 801ce7a:	60f8      	str	r0, [r7, #12]
 801ce7c:	60b9      	str	r1, [r7, #8]
 801ce7e:	4611      	mov	r1, r2
 801ce80:	461a      	mov	r2, r3
 801ce82:	460b      	mov	r3, r1
 801ce84:	80fb      	strh	r3, [r7, #6]
 801ce86:	4613      	mov	r3, r2
 801ce88:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801ce8a:	2300      	movs	r3, #0
 801ce8c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801ce8e:	68fb      	ldr	r3, [r7, #12]
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d108      	bne.n	801cea6 <pbuf_copy_partial+0x32>
 801ce94:	4b30      	ldr	r3, [pc, #192]	; (801cf58 <pbuf_copy_partial+0xe4>)
 801ce96:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801ce9a:	4930      	ldr	r1, [pc, #192]	; (801cf5c <pbuf_copy_partial+0xe8>)
 801ce9c:	4830      	ldr	r0, [pc, #192]	; (801cf60 <pbuf_copy_partial+0xec>)
 801ce9e:	f00a fac7 	bl	8027430 <iprintf>
 801cea2:	2300      	movs	r3, #0
 801cea4:	e054      	b.n	801cf50 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801cea6:	68bb      	ldr	r3, [r7, #8]
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	d108      	bne.n	801cebe <pbuf_copy_partial+0x4a>
 801ceac:	4b2a      	ldr	r3, [pc, #168]	; (801cf58 <pbuf_copy_partial+0xe4>)
 801ceae:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801ceb2:	492c      	ldr	r1, [pc, #176]	; (801cf64 <pbuf_copy_partial+0xf0>)
 801ceb4:	482a      	ldr	r0, [pc, #168]	; (801cf60 <pbuf_copy_partial+0xec>)
 801ceb6:	f00a fabb 	bl	8027430 <iprintf>
 801ceba:	2300      	movs	r3, #0
 801cebc:	e048      	b.n	801cf50 <pbuf_copy_partial+0xdc>

  left = 0;
 801cebe:	2300      	movs	r3, #0
 801cec0:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 801cec2:	68fb      	ldr	r3, [r7, #12]
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d002      	beq.n	801cece <pbuf_copy_partial+0x5a>
 801cec8:	68bb      	ldr	r3, [r7, #8]
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	d101      	bne.n	801ced2 <pbuf_copy_partial+0x5e>
    return 0;
 801cece:	2300      	movs	r3, #0
 801ced0:	e03e      	b.n	801cf50 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	61fb      	str	r3, [r7, #28]
 801ced6:	e034      	b.n	801cf42 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 801ced8:	88bb      	ldrh	r3, [r7, #4]
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d00a      	beq.n	801cef4 <pbuf_copy_partial+0x80>
 801cede:	69fb      	ldr	r3, [r7, #28]
 801cee0:	895b      	ldrh	r3, [r3, #10]
 801cee2:	88ba      	ldrh	r2, [r7, #4]
 801cee4:	429a      	cmp	r2, r3
 801cee6:	d305      	bcc.n	801cef4 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 801cee8:	69fb      	ldr	r3, [r7, #28]
 801ceea:	895b      	ldrh	r3, [r3, #10]
 801ceec:	88ba      	ldrh	r2, [r7, #4]
 801ceee:	1ad3      	subs	r3, r2, r3
 801cef0:	80bb      	strh	r3, [r7, #4]
 801cef2:	e023      	b.n	801cf3c <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 801cef4:	69fb      	ldr	r3, [r7, #28]
 801cef6:	895a      	ldrh	r2, [r3, #10]
 801cef8:	88bb      	ldrh	r3, [r7, #4]
 801cefa:	1ad3      	subs	r3, r2, r3
 801cefc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801cefe:	8b3a      	ldrh	r2, [r7, #24]
 801cf00:	88fb      	ldrh	r3, [r7, #6]
 801cf02:	429a      	cmp	r2, r3
 801cf04:	d901      	bls.n	801cf0a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 801cf06:	88fb      	ldrh	r3, [r7, #6]
 801cf08:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 801cf0a:	8b7b      	ldrh	r3, [r7, #26]
 801cf0c:	68ba      	ldr	r2, [r7, #8]
 801cf0e:	18d0      	adds	r0, r2, r3
 801cf10:	69fb      	ldr	r3, [r7, #28]
 801cf12:	685a      	ldr	r2, [r3, #4]
 801cf14:	88bb      	ldrh	r3, [r7, #4]
 801cf16:	4413      	add	r3, r2
 801cf18:	8b3a      	ldrh	r2, [r7, #24]
 801cf1a:	4619      	mov	r1, r3
 801cf1c:	f00b faa7 	bl	802846e <memcpy>
      copied_total += buf_copy_len;
 801cf20:	8afa      	ldrh	r2, [r7, #22]
 801cf22:	8b3b      	ldrh	r3, [r7, #24]
 801cf24:	4413      	add	r3, r2
 801cf26:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 801cf28:	8b7a      	ldrh	r2, [r7, #26]
 801cf2a:	8b3b      	ldrh	r3, [r7, #24]
 801cf2c:	4413      	add	r3, r2
 801cf2e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 801cf30:	88fa      	ldrh	r2, [r7, #6]
 801cf32:	8b3b      	ldrh	r3, [r7, #24]
 801cf34:	1ad3      	subs	r3, r2, r3
 801cf36:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801cf38:	2300      	movs	r3, #0
 801cf3a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801cf3c:	69fb      	ldr	r3, [r7, #28]
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	61fb      	str	r3, [r7, #28]
 801cf42:	88fb      	ldrh	r3, [r7, #6]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d002      	beq.n	801cf4e <pbuf_copy_partial+0xda>
 801cf48:	69fb      	ldr	r3, [r7, #28]
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	d1c4      	bne.n	801ced8 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 801cf4e:	8afb      	ldrh	r3, [r7, #22]
}
 801cf50:	4618      	mov	r0, r3
 801cf52:	3720      	adds	r7, #32
 801cf54:	46bd      	mov	sp, r7
 801cf56:	bd80      	pop	{r7, pc}
 801cf58:	0802a270 	.word	0x0802a270
 801cf5c:	0802a6a0 	.word	0x0802a6a0
 801cf60:	0802a2bc 	.word	0x0802a2bc
 801cf64:	0802a6c0 	.word	0x0802a6c0

0801cf68 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801cf68:	b480      	push	{r7}
 801cf6a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801cf6c:	bf00      	nop
 801cf6e:	46bd      	mov	sp, r7
 801cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf74:	4770      	bx	lr
	...

0801cf78 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801cf78:	b580      	push	{r7, lr}
 801cf7a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801cf7c:	f000 ffb8 	bl	801def0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801cf80:	4b07      	ldr	r3, [pc, #28]	; (801cfa0 <tcp_tmr+0x28>)
 801cf82:	781b      	ldrb	r3, [r3, #0]
 801cf84:	3301      	adds	r3, #1
 801cf86:	b2da      	uxtb	r2, r3
 801cf88:	4b05      	ldr	r3, [pc, #20]	; (801cfa0 <tcp_tmr+0x28>)
 801cf8a:	701a      	strb	r2, [r3, #0]
 801cf8c:	4b04      	ldr	r3, [pc, #16]	; (801cfa0 <tcp_tmr+0x28>)
 801cf8e:	781b      	ldrb	r3, [r3, #0]
 801cf90:	f003 0301 	and.w	r3, r3, #1
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d001      	beq.n	801cf9c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801cf98:	f000 fcea 	bl	801d970 <tcp_slowtmr>
  }
}
 801cf9c:	bf00      	nop
 801cf9e:	bd80      	pop	{r7, pc}
 801cfa0:	200094f1 	.word	0x200094f1

0801cfa4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801cfa4:	b480      	push	{r7}
 801cfa6:	b085      	sub	sp, #20
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	6078      	str	r0, [r7, #4]
 801cfac:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	60fb      	str	r3, [r7, #12]
 801cfb2:	e00a      	b.n	801cfca <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801cfb8:	683b      	ldr	r3, [r7, #0]
 801cfba:	429a      	cmp	r2, r3
 801cfbc:	d102      	bne.n	801cfc4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 801cfbe:	68fb      	ldr	r3, [r7, #12]
 801cfc0:	2200      	movs	r2, #0
 801cfc2:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801cfc4:	68fb      	ldr	r3, [r7, #12]
 801cfc6:	68db      	ldr	r3, [r3, #12]
 801cfc8:	60fb      	str	r3, [r7, #12]
 801cfca:	68fb      	ldr	r3, [r7, #12]
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	d1f1      	bne.n	801cfb4 <tcp_remove_listener+0x10>
      }
   }
}
 801cfd0:	bf00      	nop
 801cfd2:	3714      	adds	r7, #20
 801cfd4:	46bd      	mov	sp, r7
 801cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfda:	4770      	bx	lr

0801cfdc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801cfdc:	b580      	push	{r7, lr}
 801cfde:	b084      	sub	sp, #16
 801cfe0:	af00      	add	r7, sp, #0
 801cfe2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d105      	bne.n	801cff6 <tcp_listen_closed+0x1a>
 801cfea:	4b13      	ldr	r3, [pc, #76]	; (801d038 <tcp_listen_closed+0x5c>)
 801cfec:	22c0      	movs	r2, #192	; 0xc0
 801cfee:	4913      	ldr	r1, [pc, #76]	; (801d03c <tcp_listen_closed+0x60>)
 801cff0:	4813      	ldr	r0, [pc, #76]	; (801d040 <tcp_listen_closed+0x64>)
 801cff2:	f00a fa1d 	bl	8027430 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	7d1b      	ldrb	r3, [r3, #20]
 801cffa:	2b01      	cmp	r3, #1
 801cffc:	d005      	beq.n	801d00a <tcp_listen_closed+0x2e>
 801cffe:	4b0e      	ldr	r3, [pc, #56]	; (801d038 <tcp_listen_closed+0x5c>)
 801d000:	22c1      	movs	r2, #193	; 0xc1
 801d002:	4910      	ldr	r1, [pc, #64]	; (801d044 <tcp_listen_closed+0x68>)
 801d004:	480e      	ldr	r0, [pc, #56]	; (801d040 <tcp_listen_closed+0x64>)
 801d006:	f00a fa13 	bl	8027430 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801d00a:	2301      	movs	r3, #1
 801d00c:	60fb      	str	r3, [r7, #12]
 801d00e:	e00b      	b.n	801d028 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 801d010:	4a0d      	ldr	r2, [pc, #52]	; (801d048 <tcp_listen_closed+0x6c>)
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	6879      	ldr	r1, [r7, #4]
 801d01c:	4618      	mov	r0, r3
 801d01e:	f7ff ffc1 	bl	801cfa4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	3301      	adds	r3, #1
 801d026:	60fb      	str	r3, [r7, #12]
 801d028:	68fb      	ldr	r3, [r7, #12]
 801d02a:	2b03      	cmp	r3, #3
 801d02c:	d9f0      	bls.n	801d010 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801d02e:	bf00      	nop
 801d030:	3710      	adds	r7, #16
 801d032:	46bd      	mov	sp, r7
 801d034:	bd80      	pop	{r7, pc}
 801d036:	bf00      	nop
 801d038:	0802a7f4 	.word	0x0802a7f4
 801d03c:	0802a824 	.word	0x0802a824
 801d040:	0802a830 	.word	0x0802a830
 801d044:	0802a858 	.word	0x0802a858
 801d048:	0802e654 	.word	0x0802e654

0801d04c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801d04c:	b5b0      	push	{r4, r5, r7, lr}
 801d04e:	b086      	sub	sp, #24
 801d050:	af02      	add	r7, sp, #8
 801d052:	6078      	str	r0, [r7, #4]
 801d054:	460b      	mov	r3, r1
 801d056:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801d058:	78fb      	ldrb	r3, [r7, #3]
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	d075      	beq.n	801d14a <tcp_close_shutdown+0xfe>
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	7d1b      	ldrb	r3, [r3, #20]
 801d062:	2b04      	cmp	r3, #4
 801d064:	d003      	beq.n	801d06e <tcp_close_shutdown+0x22>
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	7d1b      	ldrb	r3, [r3, #20]
 801d06a:	2b07      	cmp	r3, #7
 801d06c:	d16d      	bne.n	801d14a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d072:	2b00      	cmp	r3, #0
 801d074:	d104      	bne.n	801d080 <tcp_close_shutdown+0x34>
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d07a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d07e:	d064      	beq.n	801d14a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	7e9b      	ldrb	r3, [r3, #26]
 801d084:	f003 0310 	and.w	r3, r3, #16
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d106      	bne.n	801d09a <tcp_close_shutdown+0x4e>
 801d08c:	4b59      	ldr	r3, [pc, #356]	; (801d1f4 <tcp_close_shutdown+0x1a8>)
 801d08e:	f240 120f 	movw	r2, #271	; 0x10f
 801d092:	4959      	ldr	r1, [pc, #356]	; (801d1f8 <tcp_close_shutdown+0x1ac>)
 801d094:	4859      	ldr	r0, [pc, #356]	; (801d1fc <tcp_close_shutdown+0x1b0>)
 801d096:	f00a f9cb 	bl	8027430 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801d0a2:	687c      	ldr	r4, [r7, #4]
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	1d1d      	adds	r5, r3, #4
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	8adb      	ldrh	r3, [r3, #22]
 801d0ac:	687a      	ldr	r2, [r7, #4]
 801d0ae:	8b12      	ldrh	r2, [r2, #24]
 801d0b0:	9201      	str	r2, [sp, #4]
 801d0b2:	9300      	str	r3, [sp, #0]
 801d0b4:	462b      	mov	r3, r5
 801d0b6:	4622      	mov	r2, r4
 801d0b8:	f004 ff1c 	bl	8021ef4 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801d0bc:	6878      	ldr	r0, [r7, #4]
 801d0be:	f001 fa4d 	bl	801e55c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801d0c2:	4b4f      	ldr	r3, [pc, #316]	; (801d200 <tcp_close_shutdown+0x1b4>)
 801d0c4:	681a      	ldr	r2, [r3, #0]
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	429a      	cmp	r2, r3
 801d0ca:	d105      	bne.n	801d0d8 <tcp_close_shutdown+0x8c>
 801d0cc:	4b4c      	ldr	r3, [pc, #304]	; (801d200 <tcp_close_shutdown+0x1b4>)
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	68db      	ldr	r3, [r3, #12]
 801d0d2:	4a4b      	ldr	r2, [pc, #300]	; (801d200 <tcp_close_shutdown+0x1b4>)
 801d0d4:	6013      	str	r3, [r2, #0]
 801d0d6:	e013      	b.n	801d100 <tcp_close_shutdown+0xb4>
 801d0d8:	4b49      	ldr	r3, [pc, #292]	; (801d200 <tcp_close_shutdown+0x1b4>)
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	60fb      	str	r3, [r7, #12]
 801d0de:	e00c      	b.n	801d0fa <tcp_close_shutdown+0xae>
 801d0e0:	68fb      	ldr	r3, [r7, #12]
 801d0e2:	68da      	ldr	r2, [r3, #12]
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	429a      	cmp	r2, r3
 801d0e8:	d104      	bne.n	801d0f4 <tcp_close_shutdown+0xa8>
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	68da      	ldr	r2, [r3, #12]
 801d0ee:	68fb      	ldr	r3, [r7, #12]
 801d0f0:	60da      	str	r2, [r3, #12]
 801d0f2:	e005      	b.n	801d100 <tcp_close_shutdown+0xb4>
 801d0f4:	68fb      	ldr	r3, [r7, #12]
 801d0f6:	68db      	ldr	r3, [r3, #12]
 801d0f8:	60fb      	str	r3, [r7, #12]
 801d0fa:	68fb      	ldr	r3, [r7, #12]
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	d1ef      	bne.n	801d0e0 <tcp_close_shutdown+0x94>
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	2200      	movs	r2, #0
 801d104:	60da      	str	r2, [r3, #12]
 801d106:	4b3f      	ldr	r3, [pc, #252]	; (801d204 <tcp_close_shutdown+0x1b8>)
 801d108:	2201      	movs	r2, #1
 801d10a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	7d1b      	ldrb	r3, [r3, #20]
 801d110:	2b04      	cmp	r3, #4
 801d112:	d10c      	bne.n	801d12e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	220a      	movs	r2, #10
 801d118:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d11a:	4b3b      	ldr	r3, [pc, #236]	; (801d208 <tcp_close_shutdown+0x1bc>)
 801d11c:	681a      	ldr	r2, [r3, #0]
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	60da      	str	r2, [r3, #12]
 801d122:	4a39      	ldr	r2, [pc, #228]	; (801d208 <tcp_close_shutdown+0x1bc>)
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	6013      	str	r3, [r2, #0]
 801d128:	f005 f932 	bl	8022390 <tcp_timer_needed>
 801d12c:	e00b      	b.n	801d146 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 801d12e:	4b37      	ldr	r3, [pc, #220]	; (801d20c <tcp_close_shutdown+0x1c0>)
 801d130:	681a      	ldr	r2, [r3, #0]
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	429a      	cmp	r2, r3
 801d136:	d102      	bne.n	801d13e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 801d138:	f003 fd72 	bl	8020c20 <tcp_trigger_input_pcb_close>
 801d13c:	e003      	b.n	801d146 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 801d13e:	6879      	ldr	r1, [r7, #4]
 801d140:	2000      	movs	r0, #0
 801d142:	f7fe ff0b 	bl	801bf5c <memp_free>
        }
      }
      return ERR_OK;
 801d146:	2300      	movs	r3, #0
 801d148:	e050      	b.n	801d1ec <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	7d1b      	ldrb	r3, [r3, #20]
 801d14e:	2b01      	cmp	r3, #1
 801d150:	d02e      	beq.n	801d1b0 <tcp_close_shutdown+0x164>
 801d152:	2b02      	cmp	r3, #2
 801d154:	d038      	beq.n	801d1c8 <tcp_close_shutdown+0x17c>
 801d156:	2b00      	cmp	r3, #0
 801d158:	d142      	bne.n	801d1e0 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	8adb      	ldrh	r3, [r3, #22]
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d021      	beq.n	801d1a6 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801d162:	4b2b      	ldr	r3, [pc, #172]	; (801d210 <tcp_close_shutdown+0x1c4>)
 801d164:	681a      	ldr	r2, [r3, #0]
 801d166:	687b      	ldr	r3, [r7, #4]
 801d168:	429a      	cmp	r2, r3
 801d16a:	d105      	bne.n	801d178 <tcp_close_shutdown+0x12c>
 801d16c:	4b28      	ldr	r3, [pc, #160]	; (801d210 <tcp_close_shutdown+0x1c4>)
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	68db      	ldr	r3, [r3, #12]
 801d172:	4a27      	ldr	r2, [pc, #156]	; (801d210 <tcp_close_shutdown+0x1c4>)
 801d174:	6013      	str	r3, [r2, #0]
 801d176:	e013      	b.n	801d1a0 <tcp_close_shutdown+0x154>
 801d178:	4b25      	ldr	r3, [pc, #148]	; (801d210 <tcp_close_shutdown+0x1c4>)
 801d17a:	681b      	ldr	r3, [r3, #0]
 801d17c:	60bb      	str	r3, [r7, #8]
 801d17e:	e00c      	b.n	801d19a <tcp_close_shutdown+0x14e>
 801d180:	68bb      	ldr	r3, [r7, #8]
 801d182:	68da      	ldr	r2, [r3, #12]
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	429a      	cmp	r2, r3
 801d188:	d104      	bne.n	801d194 <tcp_close_shutdown+0x148>
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	68da      	ldr	r2, [r3, #12]
 801d18e:	68bb      	ldr	r3, [r7, #8]
 801d190:	60da      	str	r2, [r3, #12]
 801d192:	e005      	b.n	801d1a0 <tcp_close_shutdown+0x154>
 801d194:	68bb      	ldr	r3, [r7, #8]
 801d196:	68db      	ldr	r3, [r3, #12]
 801d198:	60bb      	str	r3, [r7, #8]
 801d19a:	68bb      	ldr	r3, [r7, #8]
 801d19c:	2b00      	cmp	r3, #0
 801d19e:	d1ef      	bne.n	801d180 <tcp_close_shutdown+0x134>
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	2200      	movs	r2, #0
 801d1a4:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 801d1a6:	6879      	ldr	r1, [r7, #4]
 801d1a8:	2000      	movs	r0, #0
 801d1aa:	f7fe fed7 	bl	801bf5c <memp_free>
    break;
 801d1ae:	e01c      	b.n	801d1ea <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 801d1b0:	6878      	ldr	r0, [r7, #4]
 801d1b2:	f7ff ff13 	bl	801cfdc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801d1b6:	6879      	ldr	r1, [r7, #4]
 801d1b8:	4816      	ldr	r0, [pc, #88]	; (801d214 <tcp_close_shutdown+0x1c8>)
 801d1ba:	f001 fa11 	bl	801e5e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801d1be:	6879      	ldr	r1, [r7, #4]
 801d1c0:	2001      	movs	r0, #1
 801d1c2:	f7fe fecb 	bl	801bf5c <memp_free>
    break;
 801d1c6:	e010      	b.n	801d1ea <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 801d1c8:	6879      	ldr	r1, [r7, #4]
 801d1ca:	480d      	ldr	r0, [pc, #52]	; (801d200 <tcp_close_shutdown+0x1b4>)
 801d1cc:	f001 fa08 	bl	801e5e0 <tcp_pcb_remove>
 801d1d0:	4b0c      	ldr	r3, [pc, #48]	; (801d204 <tcp_close_shutdown+0x1b8>)
 801d1d2:	2201      	movs	r2, #1
 801d1d4:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 801d1d6:	6879      	ldr	r1, [r7, #4]
 801d1d8:	2000      	movs	r0, #0
 801d1da:	f7fe febf 	bl	801bf5c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 801d1de:	e004      	b.n	801d1ea <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 801d1e0:	6878      	ldr	r0, [r7, #4]
 801d1e2:	f000 f819 	bl	801d218 <tcp_close_shutdown_fin>
 801d1e6:	4603      	mov	r3, r0
 801d1e8:	e000      	b.n	801d1ec <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 801d1ea:	2300      	movs	r3, #0
}
 801d1ec:	4618      	mov	r0, r3
 801d1ee:	3710      	adds	r7, #16
 801d1f0:	46bd      	mov	sp, r7
 801d1f2:	bdb0      	pop	{r4, r5, r7, pc}
 801d1f4:	0802a7f4 	.word	0x0802a7f4
 801d1f8:	0802a870 	.word	0x0802a870
 801d1fc:	0802a830 	.word	0x0802a830
 801d200:	2000ecdc 	.word	0x2000ecdc
 801d204:	2000ecd8 	.word	0x2000ecd8
 801d208:	2000ecec 	.word	0x2000ecec
 801d20c:	2000ecf0 	.word	0x2000ecf0
 801d210:	2000ece8 	.word	0x2000ece8
 801d214:	2000ece4 	.word	0x2000ece4

0801d218 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801d218:	b580      	push	{r7, lr}
 801d21a:	b084      	sub	sp, #16
 801d21c:	af00      	add	r7, sp, #0
 801d21e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	2b00      	cmp	r3, #0
 801d224:	d106      	bne.n	801d234 <tcp_close_shutdown_fin+0x1c>
 801d226:	4b2c      	ldr	r3, [pc, #176]	; (801d2d8 <tcp_close_shutdown_fin+0xc0>)
 801d228:	f240 124d 	movw	r2, #333	; 0x14d
 801d22c:	492b      	ldr	r1, [pc, #172]	; (801d2dc <tcp_close_shutdown_fin+0xc4>)
 801d22e:	482c      	ldr	r0, [pc, #176]	; (801d2e0 <tcp_close_shutdown_fin+0xc8>)
 801d230:	f00a f8fe 	bl	8027430 <iprintf>

  switch (pcb->state) {
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	7d1b      	ldrb	r3, [r3, #20]
 801d238:	2b04      	cmp	r3, #4
 801d23a:	d010      	beq.n	801d25e <tcp_close_shutdown_fin+0x46>
 801d23c:	2b07      	cmp	r3, #7
 801d23e:	d01b      	beq.n	801d278 <tcp_close_shutdown_fin+0x60>
 801d240:	2b03      	cmp	r3, #3
 801d242:	d126      	bne.n	801d292 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 801d244:	6878      	ldr	r0, [r7, #4]
 801d246:	f003 fd77 	bl	8020d38 <tcp_send_fin>
 801d24a:	4603      	mov	r3, r0
 801d24c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801d24e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d252:	2b00      	cmp	r3, #0
 801d254:	d11f      	bne.n	801d296 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	2205      	movs	r2, #5
 801d25a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801d25c:	e01b      	b.n	801d296 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 801d25e:	6878      	ldr	r0, [r7, #4]
 801d260:	f003 fd6a 	bl	8020d38 <tcp_send_fin>
 801d264:	4603      	mov	r3, r0
 801d266:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801d268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d26c:	2b00      	cmp	r3, #0
 801d26e:	d114      	bne.n	801d29a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	2205      	movs	r2, #5
 801d274:	751a      	strb	r2, [r3, #20]
    }
    break;
 801d276:	e010      	b.n	801d29a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 801d278:	6878      	ldr	r0, [r7, #4]
 801d27a:	f003 fd5d 	bl	8020d38 <tcp_send_fin>
 801d27e:	4603      	mov	r3, r0
 801d280:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801d282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d286:	2b00      	cmp	r3, #0
 801d288:	d109      	bne.n	801d29e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	2209      	movs	r2, #9
 801d28e:	751a      	strb	r2, [r3, #20]
    }
    break;
 801d290:	e005      	b.n	801d29e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 801d292:	2300      	movs	r3, #0
 801d294:	e01c      	b.n	801d2d0 <tcp_close_shutdown_fin+0xb8>
    break;
 801d296:	bf00      	nop
 801d298:	e002      	b.n	801d2a0 <tcp_close_shutdown_fin+0x88>
    break;
 801d29a:	bf00      	nop
 801d29c:	e000      	b.n	801d2a0 <tcp_close_shutdown_fin+0x88>
    break;
 801d29e:	bf00      	nop
  }

  if (err == ERR_OK) {
 801d2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	d103      	bne.n	801d2b0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801d2a8:	6878      	ldr	r0, [r7, #4]
 801d2aa:	f004 fb9b 	bl	80219e4 <tcp_output>
 801d2ae:	e00d      	b.n	801d2cc <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 801d2b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d2b8:	d108      	bne.n	801d2cc <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	7e9b      	ldrb	r3, [r3, #26]
 801d2be:	f043 0308 	orr.w	r3, r3, #8
 801d2c2:	b2da      	uxtb	r2, r3
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801d2c8:	2300      	movs	r3, #0
 801d2ca:	e001      	b.n	801d2d0 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 801d2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	3710      	adds	r7, #16
 801d2d4:	46bd      	mov	sp, r7
 801d2d6:	bd80      	pop	{r7, pc}
 801d2d8:	0802a7f4 	.word	0x0802a7f4
 801d2dc:	0802a824 	.word	0x0802a824
 801d2e0:	0802a830 	.word	0x0802a830

0801d2e4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801d2e4:	b580      	push	{r7, lr}
 801d2e6:	b082      	sub	sp, #8
 801d2e8:	af00      	add	r7, sp, #0
 801d2ea:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	7d1b      	ldrb	r3, [r3, #20]
 801d2f0:	2b01      	cmp	r3, #1
 801d2f2:	d006      	beq.n	801d302 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	7e9b      	ldrb	r3, [r3, #26]
 801d2f8:	f043 0310 	orr.w	r3, r3, #16
 801d2fc:	b2da      	uxtb	r2, r3
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801d302:	2101      	movs	r1, #1
 801d304:	6878      	ldr	r0, [r7, #4]
 801d306:	f7ff fea1 	bl	801d04c <tcp_close_shutdown>
 801d30a:	4603      	mov	r3, r0
}
 801d30c:	4618      	mov	r0, r3
 801d30e:	3708      	adds	r7, #8
 801d310:	46bd      	mov	sp, r7
 801d312:	bd80      	pop	{r7, pc}

0801d314 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801d314:	b580      	push	{r7, lr}
 801d316:	b084      	sub	sp, #16
 801d318:	af00      	add	r7, sp, #0
 801d31a:	60f8      	str	r0, [r7, #12]
 801d31c:	60b9      	str	r1, [r7, #8]
 801d31e:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 801d320:	68fb      	ldr	r3, [r7, #12]
 801d322:	7d1b      	ldrb	r3, [r3, #20]
 801d324:	2b01      	cmp	r3, #1
 801d326:	d102      	bne.n	801d32e <tcp_shutdown+0x1a>
    return ERR_CONN;
 801d328:	f06f 030a 	mvn.w	r3, #10
 801d32c:	e035      	b.n	801d39a <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 801d32e:	68bb      	ldr	r3, [r7, #8]
 801d330:	2b00      	cmp	r3, #0
 801d332:	d01b      	beq.n	801d36c <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 801d334:	68fb      	ldr	r3, [r7, #12]
 801d336:	7e9b      	ldrb	r3, [r3, #26]
 801d338:	f043 0310 	orr.w	r3, r3, #16
 801d33c:	b2da      	uxtb	r2, r3
 801d33e:	68fb      	ldr	r3, [r7, #12]
 801d340:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	2b00      	cmp	r3, #0
 801d346:	d005      	beq.n	801d354 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801d348:	2101      	movs	r1, #1
 801d34a:	68f8      	ldr	r0, [r7, #12]
 801d34c:	f7ff fe7e 	bl	801d04c <tcp_close_shutdown>
 801d350:	4603      	mov	r3, r0
 801d352:	e022      	b.n	801d39a <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d007      	beq.n	801d36c <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 801d35c:	68fb      	ldr	r3, [r7, #12]
 801d35e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d360:	4618      	mov	r0, r3
 801d362:	f7ff fb8b 	bl	801ca7c <pbuf_free>
      pcb->refused_data = NULL;
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	2200      	movs	r2, #0
 801d36a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 801d36c:	687b      	ldr	r3, [r7, #4]
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d012      	beq.n	801d398 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801d372:	68fb      	ldr	r3, [r7, #12]
 801d374:	7d1b      	ldrb	r3, [r3, #20]
 801d376:	2b03      	cmp	r3, #3
 801d378:	db0b      	blt.n	801d392 <tcp_shutdown+0x7e>
 801d37a:	2b04      	cmp	r3, #4
 801d37c:	dd01      	ble.n	801d382 <tcp_shutdown+0x6e>
 801d37e:	2b07      	cmp	r3, #7
 801d380:	d107      	bne.n	801d392 <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801d382:	68bb      	ldr	r3, [r7, #8]
 801d384:	b2db      	uxtb	r3, r3
 801d386:	4619      	mov	r1, r3
 801d388:	68f8      	ldr	r0, [r7, #12]
 801d38a:	f7ff fe5f 	bl	801d04c <tcp_close_shutdown>
 801d38e:	4603      	mov	r3, r0
 801d390:	e003      	b.n	801d39a <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 801d392:	f06f 030a 	mvn.w	r3, #10
 801d396:	e000      	b.n	801d39a <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 801d398:	2300      	movs	r3, #0
}
 801d39a:	4618      	mov	r0, r3
 801d39c:	3710      	adds	r7, #16
 801d39e:	46bd      	mov	sp, r7
 801d3a0:	bd80      	pop	{r7, pc}
	...

0801d3a4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801d3a4:	b580      	push	{r7, lr}
 801d3a6:	b08c      	sub	sp, #48	; 0x30
 801d3a8:	af02      	add	r7, sp, #8
 801d3aa:	6078      	str	r0, [r7, #4]
 801d3ac:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	7d1b      	ldrb	r3, [r3, #20]
 801d3b2:	2b01      	cmp	r3, #1
 801d3b4:	d106      	bne.n	801d3c4 <tcp_abandon+0x20>
 801d3b6:	4b4d      	ldr	r3, [pc, #308]	; (801d4ec <tcp_abandon+0x148>)
 801d3b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d3bc:	494c      	ldr	r1, [pc, #304]	; (801d4f0 <tcp_abandon+0x14c>)
 801d3be:	484d      	ldr	r0, [pc, #308]	; (801d4f4 <tcp_abandon+0x150>)
 801d3c0:	f00a f836 	bl	8027430 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	7d1b      	ldrb	r3, [r3, #20]
 801d3c8:	2b0a      	cmp	r3, #10
 801d3ca:	d108      	bne.n	801d3de <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801d3cc:	6879      	ldr	r1, [r7, #4]
 801d3ce:	484a      	ldr	r0, [pc, #296]	; (801d4f8 <tcp_abandon+0x154>)
 801d3d0:	f001 f906 	bl	801e5e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 801d3d4:	6879      	ldr	r1, [r7, #4]
 801d3d6:	2000      	movs	r0, #0
 801d3d8:	f7fe fdc0 	bl	801bf5c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 801d3dc:	e081      	b.n	801d4e2 <tcp_abandon+0x13e>
    int send_rst = 0;
 801d3de:	2300      	movs	r3, #0
 801d3e0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801d3e2:	2300      	movs	r3, #0
 801d3e4:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d3ea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3f0:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d3f8:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	691b      	ldr	r3, [r3, #16]
 801d3fe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	7d1b      	ldrb	r3, [r3, #20]
 801d404:	2b00      	cmp	r3, #0
 801d406:	d126      	bne.n	801d456 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	8adb      	ldrh	r3, [r3, #22]
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	d02e      	beq.n	801d46e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d410:	4b3a      	ldr	r3, [pc, #232]	; (801d4fc <tcp_abandon+0x158>)
 801d412:	681a      	ldr	r2, [r3, #0]
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	429a      	cmp	r2, r3
 801d418:	d105      	bne.n	801d426 <tcp_abandon+0x82>
 801d41a:	4b38      	ldr	r3, [pc, #224]	; (801d4fc <tcp_abandon+0x158>)
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	68db      	ldr	r3, [r3, #12]
 801d420:	4a36      	ldr	r2, [pc, #216]	; (801d4fc <tcp_abandon+0x158>)
 801d422:	6013      	str	r3, [r2, #0]
 801d424:	e013      	b.n	801d44e <tcp_abandon+0xaa>
 801d426:	4b35      	ldr	r3, [pc, #212]	; (801d4fc <tcp_abandon+0x158>)
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	61fb      	str	r3, [r7, #28]
 801d42c:	e00c      	b.n	801d448 <tcp_abandon+0xa4>
 801d42e:	69fb      	ldr	r3, [r7, #28]
 801d430:	68da      	ldr	r2, [r3, #12]
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	429a      	cmp	r2, r3
 801d436:	d104      	bne.n	801d442 <tcp_abandon+0x9e>
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	68da      	ldr	r2, [r3, #12]
 801d43c:	69fb      	ldr	r3, [r7, #28]
 801d43e:	60da      	str	r2, [r3, #12]
 801d440:	e005      	b.n	801d44e <tcp_abandon+0xaa>
 801d442:	69fb      	ldr	r3, [r7, #28]
 801d444:	68db      	ldr	r3, [r3, #12]
 801d446:	61fb      	str	r3, [r7, #28]
 801d448:	69fb      	ldr	r3, [r7, #28]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d1ef      	bne.n	801d42e <tcp_abandon+0x8a>
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	2200      	movs	r2, #0
 801d452:	60da      	str	r2, [r3, #12]
 801d454:	e00b      	b.n	801d46e <tcp_abandon+0xca>
      send_rst = reset;
 801d456:	683b      	ldr	r3, [r7, #0]
 801d458:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	8adb      	ldrh	r3, [r3, #22]
 801d45e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d460:	6879      	ldr	r1, [r7, #4]
 801d462:	4827      	ldr	r0, [pc, #156]	; (801d500 <tcp_abandon+0x15c>)
 801d464:	f001 f8bc 	bl	801e5e0 <tcp_pcb_remove>
 801d468:	4b26      	ldr	r3, [pc, #152]	; (801d504 <tcp_abandon+0x160>)
 801d46a:	2201      	movs	r2, #1
 801d46c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d472:	2b00      	cmp	r3, #0
 801d474:	d004      	beq.n	801d480 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d47a:	4618      	mov	r0, r3
 801d47c:	f000 fe05 	bl	801e08a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d484:	2b00      	cmp	r3, #0
 801d486:	d004      	beq.n	801d492 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d48c:	4618      	mov	r0, r3
 801d48e:	f000 fdfc 	bl	801e08a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d496:	2b00      	cmp	r3, #0
 801d498:	d004      	beq.n	801d4a4 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d49e:	4618      	mov	r0, r3
 801d4a0:	f000 fdf3 	bl	801e08a <tcp_segs_free>
    if (send_rst) {
 801d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d00c      	beq.n	801d4c4 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801d4aa:	687a      	ldr	r2, [r7, #4]
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	1d19      	adds	r1, r3, #4
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	8b1b      	ldrh	r3, [r3, #24]
 801d4b4:	9301      	str	r3, [sp, #4]
 801d4b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d4b8:	9300      	str	r3, [sp, #0]
 801d4ba:	460b      	mov	r3, r1
 801d4bc:	6979      	ldr	r1, [r7, #20]
 801d4be:	69b8      	ldr	r0, [r7, #24]
 801d4c0:	f004 fd18 	bl	8021ef4 <tcp_rst>
    last_state = pcb->state;
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	7d1b      	ldrb	r3, [r3, #20]
 801d4c8:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 801d4ca:	6879      	ldr	r1, [r7, #4]
 801d4cc:	2000      	movs	r0, #0
 801d4ce:	f7fe fd45 	bl	801bf5c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d4d2:	693b      	ldr	r3, [r7, #16]
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	d004      	beq.n	801d4e2 <tcp_abandon+0x13e>
 801d4d8:	693b      	ldr	r3, [r7, #16]
 801d4da:	f06f 010c 	mvn.w	r1, #12
 801d4de:	68f8      	ldr	r0, [r7, #12]
 801d4e0:	4798      	blx	r3
}
 801d4e2:	bf00      	nop
 801d4e4:	3728      	adds	r7, #40	; 0x28
 801d4e6:	46bd      	mov	sp, r7
 801d4e8:	bd80      	pop	{r7, pc}
 801d4ea:	bf00      	nop
 801d4ec:	0802a7f4 	.word	0x0802a7f4
 801d4f0:	0802a88c 	.word	0x0802a88c
 801d4f4:	0802a830 	.word	0x0802a830
 801d4f8:	2000ecec 	.word	0x2000ecec
 801d4fc:	2000ece8 	.word	0x2000ece8
 801d500:	2000ecdc 	.word	0x2000ecdc
 801d504:	2000ecd8 	.word	0x2000ecd8

0801d508 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801d508:	b580      	push	{r7, lr}
 801d50a:	b082      	sub	sp, #8
 801d50c:	af00      	add	r7, sp, #0
 801d50e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801d510:	2101      	movs	r1, #1
 801d512:	6878      	ldr	r0, [r7, #4]
 801d514:	f7ff ff46 	bl	801d3a4 <tcp_abandon>
}
 801d518:	bf00      	nop
 801d51a:	3708      	adds	r7, #8
 801d51c:	46bd      	mov	sp, r7
 801d51e:	bd80      	pop	{r7, pc}

0801d520 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d520:	b580      	push	{r7, lr}
 801d522:	b088      	sub	sp, #32
 801d524:	af00      	add	r7, sp, #0
 801d526:	60f8      	str	r0, [r7, #12]
 801d528:	60b9      	str	r1, [r7, #8]
 801d52a:	4613      	mov	r3, r2
 801d52c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801d52e:	2304      	movs	r3, #4
 801d530:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801d532:	68bb      	ldr	r3, [r7, #8]
 801d534:	2b00      	cmp	r3, #0
 801d536:	d101      	bne.n	801d53c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801d538:	4b3c      	ldr	r3, [pc, #240]	; (801d62c <tcp_bind+0x10c>)
 801d53a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801d53c:	68fb      	ldr	r3, [r7, #12]
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d002      	beq.n	801d548 <tcp_bind+0x28>
 801d542:	68bb      	ldr	r3, [r7, #8]
 801d544:	2b00      	cmp	r3, #0
 801d546:	d102      	bne.n	801d54e <tcp_bind+0x2e>
    return ERR_VAL;
 801d548:	f06f 0305 	mvn.w	r3, #5
 801d54c:	e06a      	b.n	801d624 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	7d1b      	ldrb	r3, [r3, #20]
 801d552:	2b00      	cmp	r3, #0
 801d554:	d009      	beq.n	801d56a <tcp_bind+0x4a>
 801d556:	4b36      	ldr	r3, [pc, #216]	; (801d630 <tcp_bind+0x110>)
 801d558:	f44f 7211 	mov.w	r2, #580	; 0x244
 801d55c:	4935      	ldr	r1, [pc, #212]	; (801d634 <tcp_bind+0x114>)
 801d55e:	4836      	ldr	r0, [pc, #216]	; (801d638 <tcp_bind+0x118>)
 801d560:	f009 ff66 	bl	8027430 <iprintf>
 801d564:	f06f 0305 	mvn.w	r3, #5
 801d568:	e05c      	b.n	801d624 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 801d56a:	88fb      	ldrh	r3, [r7, #6]
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d109      	bne.n	801d584 <tcp_bind+0x64>
    port = tcp_new_port();
 801d570:	f000 f9ba 	bl	801d8e8 <tcp_new_port>
 801d574:	4603      	mov	r3, r0
 801d576:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801d578:	88fb      	ldrh	r3, [r7, #6]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d135      	bne.n	801d5ea <tcp_bind+0xca>
      return ERR_BUF;
 801d57e:	f06f 0301 	mvn.w	r3, #1
 801d582:	e04f      	b.n	801d624 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801d584:	2300      	movs	r3, #0
 801d586:	61fb      	str	r3, [r7, #28]
 801d588:	e02b      	b.n	801d5e2 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801d58a:	4a2c      	ldr	r2, [pc, #176]	; (801d63c <tcp_bind+0x11c>)
 801d58c:	69fb      	ldr	r3, [r7, #28]
 801d58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	61bb      	str	r3, [r7, #24]
 801d596:	e01e      	b.n	801d5d6 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 801d598:	69bb      	ldr	r3, [r7, #24]
 801d59a:	8adb      	ldrh	r3, [r3, #22]
 801d59c:	88fa      	ldrh	r2, [r7, #6]
 801d59e:	429a      	cmp	r2, r3
 801d5a0:	d116      	bne.n	801d5d0 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801d5a2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d010      	beq.n	801d5ca <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 801d5a8:	69bb      	ldr	r3, [r7, #24]
 801d5aa:	681b      	ldr	r3, [r3, #0]
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	d00c      	beq.n	801d5ca <tcp_bind+0xaa>
 801d5b0:	68bb      	ldr	r3, [r7, #8]
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d009      	beq.n	801d5ca <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 801d5b6:	68bb      	ldr	r3, [r7, #8]
 801d5b8:	681b      	ldr	r3, [r3, #0]
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d005      	beq.n	801d5ca <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801d5be:	69bb      	ldr	r3, [r7, #24]
 801d5c0:	681a      	ldr	r2, [r3, #0]
 801d5c2:	68bb      	ldr	r3, [r7, #8]
 801d5c4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801d5c6:	429a      	cmp	r2, r3
 801d5c8:	d102      	bne.n	801d5d0 <tcp_bind+0xb0>
              return ERR_USE;
 801d5ca:	f06f 0307 	mvn.w	r3, #7
 801d5ce:	e029      	b.n	801d624 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801d5d0:	69bb      	ldr	r3, [r7, #24]
 801d5d2:	68db      	ldr	r3, [r3, #12]
 801d5d4:	61bb      	str	r3, [r7, #24]
 801d5d6:	69bb      	ldr	r3, [r7, #24]
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d1dd      	bne.n	801d598 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 801d5dc:	69fb      	ldr	r3, [r7, #28]
 801d5de:	3301      	adds	r3, #1
 801d5e0:	61fb      	str	r3, [r7, #28]
 801d5e2:	69fa      	ldr	r2, [r7, #28]
 801d5e4:	697b      	ldr	r3, [r7, #20]
 801d5e6:	429a      	cmp	r2, r3
 801d5e8:	dbcf      	blt.n	801d58a <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 801d5ea:	68bb      	ldr	r3, [r7, #8]
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	d00c      	beq.n	801d60a <tcp_bind+0xea>
 801d5f0:	68bb      	ldr	r3, [r7, #8]
 801d5f2:	681b      	ldr	r3, [r3, #0]
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d008      	beq.n	801d60a <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801d5f8:	68bb      	ldr	r3, [r7, #8]
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	d002      	beq.n	801d604 <tcp_bind+0xe4>
 801d5fe:	68bb      	ldr	r3, [r7, #8]
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	e000      	b.n	801d606 <tcp_bind+0xe6>
 801d604:	2300      	movs	r3, #0
 801d606:	68fa      	ldr	r2, [r7, #12]
 801d608:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	88fa      	ldrh	r2, [r7, #6]
 801d60e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801d610:	4b0b      	ldr	r3, [pc, #44]	; (801d640 <tcp_bind+0x120>)
 801d612:	681a      	ldr	r2, [r3, #0]
 801d614:	68fb      	ldr	r3, [r7, #12]
 801d616:	60da      	str	r2, [r3, #12]
 801d618:	4a09      	ldr	r2, [pc, #36]	; (801d640 <tcp_bind+0x120>)
 801d61a:	68fb      	ldr	r3, [r7, #12]
 801d61c:	6013      	str	r3, [r2, #0]
 801d61e:	f004 feb7 	bl	8022390 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801d622:	2300      	movs	r3, #0
}
 801d624:	4618      	mov	r0, r3
 801d626:	3720      	adds	r7, #32
 801d628:	46bd      	mov	sp, r7
 801d62a:	bd80      	pop	{r7, pc}
 801d62c:	0802e578 	.word	0x0802e578
 801d630:	0802a7f4 	.word	0x0802a7f4
 801d634:	0802a8c0 	.word	0x0802a8c0
 801d638:	0802a830 	.word	0x0802a830
 801d63c:	0802e654 	.word	0x0802e654
 801d640:	2000ece8 	.word	0x2000ece8

0801d644 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801d644:	b580      	push	{r7, lr}
 801d646:	b084      	sub	sp, #16
 801d648:	af00      	add	r7, sp, #0
 801d64a:	60f8      	str	r0, [r7, #12]
 801d64c:	60b9      	str	r1, [r7, #8]
 801d64e:	4613      	mov	r3, r2
 801d650:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 801d652:	68b8      	ldr	r0, [r7, #8]
 801d654:	f7ff ff58 	bl	801d508 <tcp_abort>

  return ERR_ABRT;
 801d658:	f06f 030c 	mvn.w	r3, #12
}
 801d65c:	4618      	mov	r0, r3
 801d65e:	3710      	adds	r7, #16
 801d660:	46bd      	mov	sp, r7
 801d662:	bd80      	pop	{r7, pc}

0801d664 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801d664:	b580      	push	{r7, lr}
 801d666:	b088      	sub	sp, #32
 801d668:	af00      	add	r7, sp, #0
 801d66a:	60f8      	str	r0, [r7, #12]
 801d66c:	460b      	mov	r3, r1
 801d66e:	607a      	str	r2, [r7, #4]
 801d670:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801d672:	2300      	movs	r3, #0
 801d674:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	7d1b      	ldrb	r3, [r3, #20]
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d009      	beq.n	801d692 <tcp_listen_with_backlog_and_err+0x2e>
 801d67e:	4b3f      	ldr	r3, [pc, #252]	; (801d77c <tcp_listen_with_backlog_and_err+0x118>)
 801d680:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 801d684:	493e      	ldr	r1, [pc, #248]	; (801d780 <tcp_listen_with_backlog_and_err+0x11c>)
 801d686:	483f      	ldr	r0, [pc, #252]	; (801d784 <tcp_listen_with_backlog_and_err+0x120>)
 801d688:	f009 fed2 	bl	8027430 <iprintf>
 801d68c:	23f1      	movs	r3, #241	; 0xf1
 801d68e:	76fb      	strb	r3, [r7, #27]
 801d690:	e069      	b.n	801d766 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	7d1b      	ldrb	r3, [r3, #20]
 801d696:	2b01      	cmp	r3, #1
 801d698:	d104      	bne.n	801d6a4 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 801d69a:	68fb      	ldr	r3, [r7, #12]
 801d69c:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801d69e:	23f7      	movs	r3, #247	; 0xf7
 801d6a0:	76fb      	strb	r3, [r7, #27]
    goto done;
 801d6a2:	e060      	b.n	801d766 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801d6a4:	2001      	movs	r0, #1
 801d6a6:	f7fe fc07 	bl	801beb8 <memp_malloc>
 801d6aa:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801d6ac:	69fb      	ldr	r3, [r7, #28]
 801d6ae:	2b00      	cmp	r3, #0
 801d6b0:	d102      	bne.n	801d6b8 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 801d6b2:	23ff      	movs	r3, #255	; 0xff
 801d6b4:	76fb      	strb	r3, [r7, #27]
    goto done;
 801d6b6:	e056      	b.n	801d766 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801d6b8:	68fb      	ldr	r3, [r7, #12]
 801d6ba:	691a      	ldr	r2, [r3, #16]
 801d6bc:	69fb      	ldr	r3, [r7, #28]
 801d6be:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801d6c0:	68fb      	ldr	r3, [r7, #12]
 801d6c2:	8ada      	ldrh	r2, [r3, #22]
 801d6c4:	69fb      	ldr	r3, [r7, #28]
 801d6c6:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801d6c8:	69fb      	ldr	r3, [r7, #28]
 801d6ca:	2201      	movs	r2, #1
 801d6cc:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	7d5a      	ldrb	r2, [r3, #21]
 801d6d2:	69fb      	ldr	r3, [r7, #28]
 801d6d4:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801d6d6:	68fb      	ldr	r3, [r7, #12]
 801d6d8:	7a1a      	ldrb	r2, [r3, #8]
 801d6da:	69fb      	ldr	r3, [r7, #28]
 801d6dc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	7a9a      	ldrb	r2, [r3, #10]
 801d6e2:	69fb      	ldr	r3, [r7, #28]
 801d6e4:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	7a5a      	ldrb	r2, [r3, #9]
 801d6ea:	69fb      	ldr	r3, [r7, #28]
 801d6ec:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	681a      	ldr	r2, [r3, #0]
 801d6f2:	69fb      	ldr	r3, [r7, #28]
 801d6f4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	8adb      	ldrh	r3, [r3, #22]
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	d021      	beq.n	801d742 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801d6fe:	4b22      	ldr	r3, [pc, #136]	; (801d788 <tcp_listen_with_backlog_and_err+0x124>)
 801d700:	681a      	ldr	r2, [r3, #0]
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	429a      	cmp	r2, r3
 801d706:	d105      	bne.n	801d714 <tcp_listen_with_backlog_and_err+0xb0>
 801d708:	4b1f      	ldr	r3, [pc, #124]	; (801d788 <tcp_listen_with_backlog_and_err+0x124>)
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	68db      	ldr	r3, [r3, #12]
 801d70e:	4a1e      	ldr	r2, [pc, #120]	; (801d788 <tcp_listen_with_backlog_and_err+0x124>)
 801d710:	6013      	str	r3, [r2, #0]
 801d712:	e013      	b.n	801d73c <tcp_listen_with_backlog_and_err+0xd8>
 801d714:	4b1c      	ldr	r3, [pc, #112]	; (801d788 <tcp_listen_with_backlog_and_err+0x124>)
 801d716:	681b      	ldr	r3, [r3, #0]
 801d718:	617b      	str	r3, [r7, #20]
 801d71a:	e00c      	b.n	801d736 <tcp_listen_with_backlog_and_err+0xd2>
 801d71c:	697b      	ldr	r3, [r7, #20]
 801d71e:	68da      	ldr	r2, [r3, #12]
 801d720:	68fb      	ldr	r3, [r7, #12]
 801d722:	429a      	cmp	r2, r3
 801d724:	d104      	bne.n	801d730 <tcp_listen_with_backlog_and_err+0xcc>
 801d726:	68fb      	ldr	r3, [r7, #12]
 801d728:	68da      	ldr	r2, [r3, #12]
 801d72a:	697b      	ldr	r3, [r7, #20]
 801d72c:	60da      	str	r2, [r3, #12]
 801d72e:	e005      	b.n	801d73c <tcp_listen_with_backlog_and_err+0xd8>
 801d730:	697b      	ldr	r3, [r7, #20]
 801d732:	68db      	ldr	r3, [r3, #12]
 801d734:	617b      	str	r3, [r7, #20]
 801d736:	697b      	ldr	r3, [r7, #20]
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d1ef      	bne.n	801d71c <tcp_listen_with_backlog_and_err+0xb8>
 801d73c:	68fb      	ldr	r3, [r7, #12]
 801d73e:	2200      	movs	r2, #0
 801d740:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 801d742:	68f9      	ldr	r1, [r7, #12]
 801d744:	2000      	movs	r0, #0
 801d746:	f7fe fc09 	bl	801bf5c <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801d74a:	69fb      	ldr	r3, [r7, #28]
 801d74c:	4a0f      	ldr	r2, [pc, #60]	; (801d78c <tcp_listen_with_backlog_and_err+0x128>)
 801d74e:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801d750:	4b0f      	ldr	r3, [pc, #60]	; (801d790 <tcp_listen_with_backlog_and_err+0x12c>)
 801d752:	681a      	ldr	r2, [r3, #0]
 801d754:	69fb      	ldr	r3, [r7, #28]
 801d756:	60da      	str	r2, [r3, #12]
 801d758:	4a0d      	ldr	r2, [pc, #52]	; (801d790 <tcp_listen_with_backlog_and_err+0x12c>)
 801d75a:	69fb      	ldr	r3, [r7, #28]
 801d75c:	6013      	str	r3, [r2, #0]
 801d75e:	f004 fe17 	bl	8022390 <tcp_timer_needed>
  res = ERR_OK;
 801d762:	2300      	movs	r3, #0
 801d764:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	2b00      	cmp	r3, #0
 801d76a:	d002      	beq.n	801d772 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	7efa      	ldrb	r2, [r7, #27]
 801d770:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801d772:	69fb      	ldr	r3, [r7, #28]
}
 801d774:	4618      	mov	r0, r3
 801d776:	3720      	adds	r7, #32
 801d778:	46bd      	mov	sp, r7
 801d77a:	bd80      	pop	{r7, pc}
 801d77c:	0802a7f4 	.word	0x0802a7f4
 801d780:	0802a8e8 	.word	0x0802a8e8
 801d784:	0802a830 	.word	0x0802a830
 801d788:	2000ece8 	.word	0x2000ece8
 801d78c:	0801d645 	.word	0x0801d645
 801d790:	2000ece4 	.word	0x2000ece4

0801d794 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801d794:	b580      	push	{r7, lr}
 801d796:	b084      	sub	sp, #16
 801d798:	af00      	add	r7, sp, #0
 801d79a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7a0:	687a      	ldr	r2, [r7, #4]
 801d7a2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801d7a4:	4413      	add	r3, r2
 801d7a6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7ac:	687a      	ldr	r2, [r7, #4]
 801d7ae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801d7b0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801d7b4:	d802      	bhi.n	801d7bc <tcp_update_rcv_ann_wnd+0x28>
 801d7b6:	687a      	ldr	r2, [r7, #4]
 801d7b8:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801d7ba:	e001      	b.n	801d7c0 <tcp_update_rcv_ann_wnd+0x2c>
 801d7bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d7c0:	4413      	add	r3, r2
 801d7c2:	68fa      	ldr	r2, [r7, #12]
 801d7c4:	1ad3      	subs	r3, r2, r3
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	db08      	blt.n	801d7dc <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801d7ca:	687b      	ldr	r3, [r7, #4]
 801d7cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7d6:	68fa      	ldr	r2, [r7, #12]
 801d7d8:	1ad3      	subs	r3, r2, r3
 801d7da:	e020      	b.n	801d81e <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7e4:	1ad3      	subs	r3, r2, r3
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	dd03      	ble.n	801d7f2 <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	2200      	movs	r2, #0
 801d7ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 801d7f0:	e014      	b.n	801d81c <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7fa:	1ad3      	subs	r3, r2, r3
 801d7fc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801d7fe:	68bb      	ldr	r3, [r7, #8]
 801d800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d804:	d306      	bcc.n	801d814 <tcp_update_rcv_ann_wnd+0x80>
 801d806:	4b08      	ldr	r3, [pc, #32]	; (801d828 <tcp_update_rcv_ann_wnd+0x94>)
 801d808:	f44f 7242 	mov.w	r2, #776	; 0x308
 801d80c:	4907      	ldr	r1, [pc, #28]	; (801d82c <tcp_update_rcv_ann_wnd+0x98>)
 801d80e:	4808      	ldr	r0, [pc, #32]	; (801d830 <tcp_update_rcv_ann_wnd+0x9c>)
 801d810:	f009 fe0e 	bl	8027430 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801d814:	68bb      	ldr	r3, [r7, #8]
 801d816:	b29a      	uxth	r2, r3
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801d81c:	2300      	movs	r3, #0
  }
}
 801d81e:	4618      	mov	r0, r3
 801d820:	3710      	adds	r7, #16
 801d822:	46bd      	mov	sp, r7
 801d824:	bd80      	pop	{r7, pc}
 801d826:	bf00      	nop
 801d828:	0802a7f4 	.word	0x0802a7f4
 801d82c:	0802a90c 	.word	0x0802a90c
 801d830:	0802a830 	.word	0x0802a830

0801d834 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801d834:	b580      	push	{r7, lr}
 801d836:	b084      	sub	sp, #16
 801d838:	af00      	add	r7, sp, #0
 801d83a:	6078      	str	r0, [r7, #4]
 801d83c:	460b      	mov	r3, r1
 801d83e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	7d1b      	ldrb	r3, [r3, #20]
 801d844:	2b01      	cmp	r3, #1
 801d846:	d106      	bne.n	801d856 <tcp_recved+0x22>
 801d848:	4b23      	ldr	r3, [pc, #140]	; (801d8d8 <tcp_recved+0xa4>)
 801d84a:	f44f 7248 	mov.w	r2, #800	; 0x320
 801d84e:	4923      	ldr	r1, [pc, #140]	; (801d8dc <tcp_recved+0xa8>)
 801d850:	4823      	ldr	r0, [pc, #140]	; (801d8e0 <tcp_recved+0xac>)
 801d852:	f009 fded 	bl	8027430 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d85a:	887b      	ldrh	r3, [r7, #2]
 801d85c:	4413      	add	r3, r2
 801d85e:	b29a      	uxth	r2, r3
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d86c:	d904      	bls.n	801d878 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d874:	851a      	strh	r2, [r3, #40]	; 0x28
 801d876:	e017      	b.n	801d8a8 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	d113      	bne.n	801d8a8 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	7d1b      	ldrb	r3, [r3, #20]
 801d884:	2b07      	cmp	r3, #7
 801d886:	d003      	beq.n	801d890 <tcp_recved+0x5c>
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	7d1b      	ldrb	r3, [r3, #20]
 801d88c:	2b09      	cmp	r3, #9
 801d88e:	d104      	bne.n	801d89a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d896:	851a      	strh	r2, [r3, #40]	; 0x28
 801d898:	e006      	b.n	801d8a8 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 801d89a:	4b0f      	ldr	r3, [pc, #60]	; (801d8d8 <tcp_recved+0xa4>)
 801d89c:	f240 322d 	movw	r2, #813	; 0x32d
 801d8a0:	4910      	ldr	r1, [pc, #64]	; (801d8e4 <tcp_recved+0xb0>)
 801d8a2:	480f      	ldr	r0, [pc, #60]	; (801d8e0 <tcp_recved+0xac>)
 801d8a4:	f009 fdc4 	bl	8027430 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801d8a8:	6878      	ldr	r0, [r7, #4]
 801d8aa:	f7ff ff73 	bl	801d794 <tcp_update_rcv_ann_wnd>
 801d8ae:	4603      	mov	r3, r0
 801d8b0:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801d8b2:	68fb      	ldr	r3, [r7, #12]
 801d8b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d8b8:	db09      	blt.n	801d8ce <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	7e9b      	ldrb	r3, [r3, #26]
 801d8be:	f043 0302 	orr.w	r3, r3, #2
 801d8c2:	b2da      	uxtb	r2, r3
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801d8c8:	6878      	ldr	r0, [r7, #4]
 801d8ca:	f004 f88b 	bl	80219e4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801d8ce:	bf00      	nop
 801d8d0:	3710      	adds	r7, #16
 801d8d2:	46bd      	mov	sp, r7
 801d8d4:	bd80      	pop	{r7, pc}
 801d8d6:	bf00      	nop
 801d8d8:	0802a7f4 	.word	0x0802a7f4
 801d8dc:	0802a928 	.word	0x0802a928
 801d8e0:	0802a830 	.word	0x0802a830
 801d8e4:	0802a950 	.word	0x0802a950

0801d8e8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801d8e8:	b480      	push	{r7}
 801d8ea:	b083      	sub	sp, #12
 801d8ec:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801d8ee:	2300      	movs	r3, #0
 801d8f0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801d8f2:	4b1d      	ldr	r3, [pc, #116]	; (801d968 <tcp_new_port+0x80>)
 801d8f4:	881b      	ldrh	r3, [r3, #0]
 801d8f6:	1c5a      	adds	r2, r3, #1
 801d8f8:	b291      	uxth	r1, r2
 801d8fa:	4a1b      	ldr	r2, [pc, #108]	; (801d968 <tcp_new_port+0x80>)
 801d8fc:	8011      	strh	r1, [r2, #0]
 801d8fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d902:	4293      	cmp	r3, r2
 801d904:	d103      	bne.n	801d90e <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801d906:	4b18      	ldr	r3, [pc, #96]	; (801d968 <tcp_new_port+0x80>)
 801d908:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801d90c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801d90e:	2300      	movs	r3, #0
 801d910:	71fb      	strb	r3, [r7, #7]
 801d912:	e01e      	b.n	801d952 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801d914:	79fb      	ldrb	r3, [r7, #7]
 801d916:	4a15      	ldr	r2, [pc, #84]	; (801d96c <tcp_new_port+0x84>)
 801d918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d91c:	681b      	ldr	r3, [r3, #0]
 801d91e:	603b      	str	r3, [r7, #0]
 801d920:	e011      	b.n	801d946 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 801d922:	683b      	ldr	r3, [r7, #0]
 801d924:	8ada      	ldrh	r2, [r3, #22]
 801d926:	4b10      	ldr	r3, [pc, #64]	; (801d968 <tcp_new_port+0x80>)
 801d928:	881b      	ldrh	r3, [r3, #0]
 801d92a:	429a      	cmp	r2, r3
 801d92c:	d108      	bne.n	801d940 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801d92e:	88bb      	ldrh	r3, [r7, #4]
 801d930:	3301      	adds	r3, #1
 801d932:	80bb      	strh	r3, [r7, #4]
 801d934:	88bb      	ldrh	r3, [r7, #4]
 801d936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d93a:	d3da      	bcc.n	801d8f2 <tcp_new_port+0xa>
          return 0;
 801d93c:	2300      	movs	r3, #0
 801d93e:	e00d      	b.n	801d95c <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801d940:	683b      	ldr	r3, [r7, #0]
 801d942:	68db      	ldr	r3, [r3, #12]
 801d944:	603b      	str	r3, [r7, #0]
 801d946:	683b      	ldr	r3, [r7, #0]
 801d948:	2b00      	cmp	r3, #0
 801d94a:	d1ea      	bne.n	801d922 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801d94c:	79fb      	ldrb	r3, [r7, #7]
 801d94e:	3301      	adds	r3, #1
 801d950:	71fb      	strb	r3, [r7, #7]
 801d952:	79fb      	ldrb	r3, [r7, #7]
 801d954:	2b03      	cmp	r3, #3
 801d956:	d9dd      	bls.n	801d914 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801d958:	4b03      	ldr	r3, [pc, #12]	; (801d968 <tcp_new_port+0x80>)
 801d95a:	881b      	ldrh	r3, [r3, #0]
}
 801d95c:	4618      	mov	r0, r3
 801d95e:	370c      	adds	r7, #12
 801d960:	46bd      	mov	sp, r7
 801d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d966:	4770      	bx	lr
 801d968:	20000008 	.word	0x20000008
 801d96c:	0802e654 	.word	0x0802e654

0801d970 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801d970:	b5b0      	push	{r4, r5, r7, lr}
 801d972:	b08c      	sub	sp, #48	; 0x30
 801d974:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801d976:	2300      	movs	r3, #0
 801d978:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 801d97a:	4b97      	ldr	r3, [pc, #604]	; (801dbd8 <tcp_slowtmr+0x268>)
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	3301      	adds	r3, #1
 801d980:	4a95      	ldr	r2, [pc, #596]	; (801dbd8 <tcp_slowtmr+0x268>)
 801d982:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801d984:	4b95      	ldr	r3, [pc, #596]	; (801dbdc <tcp_slowtmr+0x26c>)
 801d986:	781b      	ldrb	r3, [r3, #0]
 801d988:	3301      	adds	r3, #1
 801d98a:	b2da      	uxtb	r2, r3
 801d98c:	4b93      	ldr	r3, [pc, #588]	; (801dbdc <tcp_slowtmr+0x26c>)
 801d98e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801d990:	2300      	movs	r3, #0
 801d992:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 801d994:	4b92      	ldr	r3, [pc, #584]	; (801dbe0 <tcp_slowtmr+0x270>)
 801d996:	681b      	ldr	r3, [r3, #0]
 801d998:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801d99a:	e227      	b.n	801ddec <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801d99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d99e:	7d1b      	ldrb	r3, [r3, #20]
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	d106      	bne.n	801d9b2 <tcp_slowtmr+0x42>
 801d9a4:	4b8f      	ldr	r3, [pc, #572]	; (801dbe4 <tcp_slowtmr+0x274>)
 801d9a6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 801d9aa:	498f      	ldr	r1, [pc, #572]	; (801dbe8 <tcp_slowtmr+0x278>)
 801d9ac:	488f      	ldr	r0, [pc, #572]	; (801dbec <tcp_slowtmr+0x27c>)
 801d9ae:	f009 fd3f 	bl	8027430 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801d9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9b4:	7d1b      	ldrb	r3, [r3, #20]
 801d9b6:	2b01      	cmp	r3, #1
 801d9b8:	d106      	bne.n	801d9c8 <tcp_slowtmr+0x58>
 801d9ba:	4b8a      	ldr	r3, [pc, #552]	; (801dbe4 <tcp_slowtmr+0x274>)
 801d9bc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801d9c0:	498b      	ldr	r1, [pc, #556]	; (801dbf0 <tcp_slowtmr+0x280>)
 801d9c2:	488a      	ldr	r0, [pc, #552]	; (801dbec <tcp_slowtmr+0x27c>)
 801d9c4:	f009 fd34 	bl	8027430 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9ca:	7d1b      	ldrb	r3, [r3, #20]
 801d9cc:	2b0a      	cmp	r3, #10
 801d9ce:	d106      	bne.n	801d9de <tcp_slowtmr+0x6e>
 801d9d0:	4b84      	ldr	r3, [pc, #528]	; (801dbe4 <tcp_slowtmr+0x274>)
 801d9d2:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801d9d6:	4987      	ldr	r1, [pc, #540]	; (801dbf4 <tcp_slowtmr+0x284>)
 801d9d8:	4884      	ldr	r0, [pc, #528]	; (801dbec <tcp_slowtmr+0x27c>)
 801d9da:	f009 fd29 	bl	8027430 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9e0:	7f5a      	ldrb	r2, [r3, #29]
 801d9e2:	4b7e      	ldr	r3, [pc, #504]	; (801dbdc <tcp_slowtmr+0x26c>)
 801d9e4:	781b      	ldrb	r3, [r3, #0]
 801d9e6:	429a      	cmp	r2, r3
 801d9e8:	d103      	bne.n	801d9f2 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 801d9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9ec:	68db      	ldr	r3, [r3, #12]
 801d9ee:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 801d9f0:	e1fc      	b.n	801ddec <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 801d9f2:	4b7a      	ldr	r3, [pc, #488]	; (801dbdc <tcp_slowtmr+0x26c>)
 801d9f4:	781a      	ldrb	r2, [r3, #0]
 801d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9f8:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 801d9fa:	2300      	movs	r3, #0
 801d9fc:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 801d9fe:	2300      	movs	r3, #0
 801da00:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801da02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da04:	7d1b      	ldrb	r3, [r3, #20]
 801da06:	2b02      	cmp	r3, #2
 801da08:	d108      	bne.n	801da1c <tcp_slowtmr+0xac>
 801da0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801da10:	2b05      	cmp	r3, #5
 801da12:	d903      	bls.n	801da1c <tcp_slowtmr+0xac>
      ++pcb_remove;
 801da14:	7ffb      	ldrb	r3, [r7, #31]
 801da16:	3301      	adds	r3, #1
 801da18:	77fb      	strb	r3, [r7, #31]
 801da1a:	e0a2      	b.n	801db62 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 801da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801da22:	2b0b      	cmp	r3, #11
 801da24:	d903      	bls.n	801da2e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801da26:	7ffb      	ldrb	r3, [r7, #31]
 801da28:	3301      	adds	r3, #1
 801da2a:	77fb      	strb	r3, [r7, #31]
 801da2c:	e099      	b.n	801db62 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da30:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801da34:	2b00      	cmp	r3, #0
 801da36:	d032      	beq.n	801da9e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 801da38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da3a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801da3e:	3b01      	subs	r3, #1
 801da40:	4a6d      	ldr	r2, [pc, #436]	; (801dbf8 <tcp_slowtmr+0x288>)
 801da42:	5cd3      	ldrb	r3, [r2, r3]
 801da44:	773b      	strb	r3, [r7, #28]
        if (pcb->persist_cnt < backoff_cnt) {
 801da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da48:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801da4c:	7f3a      	ldrb	r2, [r7, #28]
 801da4e:	429a      	cmp	r2, r3
 801da50:	d907      	bls.n	801da62 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 801da52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da54:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801da58:	3301      	adds	r3, #1
 801da5a:	b2da      	uxtb	r2, r3
 801da5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da5e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 801da62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da64:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801da68:	7f3a      	ldrb	r2, [r7, #28]
 801da6a:	429a      	cmp	r2, r3
 801da6c:	d879      	bhi.n	801db62 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 801da6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801da70:	f004 fbce 	bl	8022210 <tcp_zero_window_probe>
 801da74:	4603      	mov	r3, r0
 801da76:	2b00      	cmp	r3, #0
 801da78:	d173      	bne.n	801db62 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 801da7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da7c:	2200      	movs	r2, #0
 801da7e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801da82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da84:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801da88:	2b06      	cmp	r3, #6
 801da8a:	d86a      	bhi.n	801db62 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 801da8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da8e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801da92:	3301      	adds	r3, #1
 801da94:	b2da      	uxtb	r2, r3
 801da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da98:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 801da9c:	e061      	b.n	801db62 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 801da9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daa0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801daa4:	2b00      	cmp	r3, #0
 801daa6:	db08      	blt.n	801daba <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 801daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daaa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801daae:	b29b      	uxth	r3, r3
 801dab0:	3301      	adds	r3, #1
 801dab2:	b29b      	uxth	r3, r3
 801dab4:	b21a      	sxth	r2, r3
 801dab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dab8:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 801daba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dabc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	d04f      	beq.n	801db62 <tcp_slowtmr+0x1f2>
 801dac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dac4:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801dace:	429a      	cmp	r2, r3
 801dad0:	db47      	blt.n	801db62 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 801dad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dad4:	7d1b      	ldrb	r3, [r3, #20]
 801dad6:	2b02      	cmp	r3, #2
 801dad8:	d018      	beq.n	801db0c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 801dada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dadc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dae0:	2b0c      	cmp	r3, #12
 801dae2:	bf28      	it	cs
 801dae4:	230c      	movcs	r3, #12
 801dae6:	76fb      	strb	r3, [r7, #27]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801daee:	10db      	asrs	r3, r3, #3
 801daf0:	b21b      	sxth	r3, r3
 801daf2:	461a      	mov	r2, r3
 801daf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daf6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801dafa:	4413      	add	r3, r2
 801dafc:	7efa      	ldrb	r2, [r7, #27]
 801dafe:	493f      	ldr	r1, [pc, #252]	; (801dbfc <tcp_slowtmr+0x28c>)
 801db00:	5c8a      	ldrb	r2, [r1, r2]
 801db02:	4093      	lsls	r3, r2
 801db04:	b21a      	sxth	r2, r3
 801db06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 801db0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db0e:	2200      	movs	r2, #0
 801db10:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801db12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db14:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801db18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801db1e:	4293      	cmp	r3, r2
 801db20:	bf28      	it	cs
 801db22:	4613      	movcs	r3, r2
 801db24:	833b      	strh	r3, [r7, #24]
          pcb->ssthresh = eff_wnd >> 1;
 801db26:	8b3b      	ldrh	r3, [r7, #24]
 801db28:	085b      	lsrs	r3, r3, #1
 801db2a:	b29a      	uxth	r2, r3
 801db2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db2e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801db32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db34:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801db3c:	005b      	lsls	r3, r3, #1
 801db3e:	b29b      	uxth	r3, r3
 801db40:	429a      	cmp	r2, r3
 801db42:	d206      	bcs.n	801db52 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 801db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801db48:	005b      	lsls	r3, r3, #1
 801db4a:	b29a      	uxth	r2, r3
 801db4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db4e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 801db52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db54:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801db56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 801db5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db5e:	f004 fa3d 	bl	8021fdc <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801db62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db64:	7d1b      	ldrb	r3, [r3, #20]
 801db66:	2b06      	cmp	r3, #6
 801db68:	d10f      	bne.n	801db8a <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801db6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db6c:	7e9b      	ldrb	r3, [r3, #26]
 801db6e:	f003 0310 	and.w	r3, r3, #16
 801db72:	2b00      	cmp	r3, #0
 801db74:	d009      	beq.n	801db8a <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801db76:	4b18      	ldr	r3, [pc, #96]	; (801dbd8 <tcp_slowtmr+0x268>)
 801db78:	681a      	ldr	r2, [r3, #0]
 801db7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db7c:	6a1b      	ldr	r3, [r3, #32]
 801db7e:	1ad3      	subs	r3, r2, r3
 801db80:	2b28      	cmp	r3, #40	; 0x28
 801db82:	d902      	bls.n	801db8a <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801db84:	7ffb      	ldrb	r3, [r7, #31]
 801db86:	3301      	adds	r3, #1
 801db88:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db8c:	7a1b      	ldrb	r3, [r3, #8]
 801db8e:	f003 0308 	and.w	r3, r3, #8
 801db92:	2b00      	cmp	r3, #0
 801db94:	d05d      	beq.n	801dc52 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 801db96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db98:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801db9a:	2b04      	cmp	r3, #4
 801db9c:	d003      	beq.n	801dba6 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 801db9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dba0:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 801dba2:	2b07      	cmp	r3, #7
 801dba4:	d155      	bne.n	801dc52 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801dba6:	4b0c      	ldr	r3, [pc, #48]	; (801dbd8 <tcp_slowtmr+0x268>)
 801dba8:	681a      	ldr	r2, [r3, #0]
 801dbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbac:	6a1b      	ldr	r3, [r3, #32]
 801dbae:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 801dbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dbb6:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801dbba:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801dbbe:	4910      	ldr	r1, [pc, #64]	; (801dc00 <tcp_slowtmr+0x290>)
 801dbc0:	fba1 1303 	umull	r1, r3, r1, r3
 801dbc4:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801dbc6:	429a      	cmp	r2, r3
 801dbc8:	d91c      	bls.n	801dc04 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801dbca:	7ffb      	ldrb	r3, [r7, #31]
 801dbcc:	3301      	adds	r3, #1
 801dbce:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 801dbd0:	7fbb      	ldrb	r3, [r7, #30]
 801dbd2:	3301      	adds	r3, #1
 801dbd4:	77bb      	strb	r3, [r7, #30]
 801dbd6:	e03c      	b.n	801dc52 <tcp_slowtmr+0x2e2>
 801dbd8:	2000ece0 	.word	0x2000ece0
 801dbdc:	200094f2 	.word	0x200094f2
 801dbe0:	2000ecdc 	.word	0x2000ecdc
 801dbe4:	0802a7f4 	.word	0x0802a7f4
 801dbe8:	0802a9a4 	.word	0x0802a9a4
 801dbec:	0802a830 	.word	0x0802a830
 801dbf0:	0802a9d0 	.word	0x0802a9d0
 801dbf4:	0802a9fc 	.word	0x0802a9fc
 801dbf8:	0802e64c 	.word	0x0802e64c
 801dbfc:	0802e63c 	.word	0x0802e63c
 801dc00:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801dc04:	4b97      	ldr	r3, [pc, #604]	; (801de64 <tcp_slowtmr+0x4f4>)
 801dc06:	681a      	ldr	r2, [r3, #0]
 801dc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc0a:	6a1b      	ldr	r3, [r3, #32]
 801dc0c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801dc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc10:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801dc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc16:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801dc1a:	4618      	mov	r0, r3
 801dc1c:	4b92      	ldr	r3, [pc, #584]	; (801de68 <tcp_slowtmr+0x4f8>)
 801dc1e:	fb03 f300 	mul.w	r3, r3, r0
 801dc22:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 801dc24:	4991      	ldr	r1, [pc, #580]	; (801de6c <tcp_slowtmr+0x4fc>)
 801dc26:	fba1 1303 	umull	r1, r3, r1, r3
 801dc2a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801dc2c:	429a      	cmp	r2, r3
 801dc2e:	d910      	bls.n	801dc52 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 801dc30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dc32:	f004 fab0 	bl	8022196 <tcp_keepalive>
 801dc36:	4603      	mov	r3, r0
 801dc38:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 801dc3a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	d107      	bne.n	801dc52 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 801dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc44:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801dc48:	3301      	adds	r3, #1
 801dc4a:	b2da      	uxtb	r2, r3
 801dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc4e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	d016      	beq.n	801dc88 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 801dc5a:	4b82      	ldr	r3, [pc, #520]	; (801de64 <tcp_slowtmr+0x4f4>)
 801dc5c:	681a      	ldr	r2, [r3, #0]
 801dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc60:	6a1b      	ldr	r3, [r3, #32]
 801dc62:	1ad2      	subs	r2, r2, r3
 801dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc66:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801dc6a:	4619      	mov	r1, r3
 801dc6c:	460b      	mov	r3, r1
 801dc6e:	005b      	lsls	r3, r3, #1
 801dc70:	440b      	add	r3, r1
 801dc72:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801dc74:	429a      	cmp	r2, r3
 801dc76:	d307      	bcc.n	801dc88 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 801dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dc7c:	4618      	mov	r0, r3
 801dc7e:	f000 fa04 	bl	801e08a <tcp_segs_free>
      pcb->ooseq = NULL;
 801dc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc84:	2200      	movs	r2, #0
 801dc86:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc8a:	7d1b      	ldrb	r3, [r3, #20]
 801dc8c:	2b03      	cmp	r3, #3
 801dc8e:	d109      	bne.n	801dca4 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801dc90:	4b74      	ldr	r3, [pc, #464]	; (801de64 <tcp_slowtmr+0x4f4>)
 801dc92:	681a      	ldr	r2, [r3, #0]
 801dc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc96:	6a1b      	ldr	r3, [r3, #32]
 801dc98:	1ad3      	subs	r3, r2, r3
 801dc9a:	2b28      	cmp	r3, #40	; 0x28
 801dc9c:	d902      	bls.n	801dca4 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801dc9e:	7ffb      	ldrb	r3, [r7, #31]
 801dca0:	3301      	adds	r3, #1
 801dca2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dca6:	7d1b      	ldrb	r3, [r3, #20]
 801dca8:	2b09      	cmp	r3, #9
 801dcaa:	d109      	bne.n	801dcc0 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801dcac:	4b6d      	ldr	r3, [pc, #436]	; (801de64 <tcp_slowtmr+0x4f4>)
 801dcae:	681a      	ldr	r2, [r3, #0]
 801dcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcb2:	6a1b      	ldr	r3, [r3, #32]
 801dcb4:	1ad3      	subs	r3, r2, r3
 801dcb6:	2bf0      	cmp	r3, #240	; 0xf0
 801dcb8:	d902      	bls.n	801dcc0 <tcp_slowtmr+0x350>
        ++pcb_remove;
 801dcba:	7ffb      	ldrb	r3, [r7, #31]
 801dcbc:	3301      	adds	r3, #1
 801dcbe:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801dcc0:	7ffb      	ldrb	r3, [r7, #31]
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d05d      	beq.n	801dd82 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dccc:	617b      	str	r3, [r7, #20]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801dcce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dcd0:	f000 fc44 	bl	801e55c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801dcd4:	6a3b      	ldr	r3, [r7, #32]
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	d010      	beq.n	801dcfc <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801dcda:	4b65      	ldr	r3, [pc, #404]	; (801de70 <tcp_slowtmr+0x500>)
 801dcdc:	681b      	ldr	r3, [r3, #0]
 801dcde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dce0:	429a      	cmp	r2, r3
 801dce2:	d106      	bne.n	801dcf2 <tcp_slowtmr+0x382>
 801dce4:	4b63      	ldr	r3, [pc, #396]	; (801de74 <tcp_slowtmr+0x504>)
 801dce6:	f240 4289 	movw	r2, #1161	; 0x489
 801dcea:	4963      	ldr	r1, [pc, #396]	; (801de78 <tcp_slowtmr+0x508>)
 801dcec:	4863      	ldr	r0, [pc, #396]	; (801de7c <tcp_slowtmr+0x50c>)
 801dcee:	f009 fb9f 	bl	8027430 <iprintf>
        prev->next = pcb->next;
 801dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcf4:	68da      	ldr	r2, [r3, #12]
 801dcf6:	6a3b      	ldr	r3, [r7, #32]
 801dcf8:	60da      	str	r2, [r3, #12]
 801dcfa:	e00f      	b.n	801dd1c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801dcfc:	4b5c      	ldr	r3, [pc, #368]	; (801de70 <tcp_slowtmr+0x500>)
 801dcfe:	681a      	ldr	r2, [r3, #0]
 801dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd02:	429a      	cmp	r2, r3
 801dd04:	d006      	beq.n	801dd14 <tcp_slowtmr+0x3a4>
 801dd06:	4b5b      	ldr	r3, [pc, #364]	; (801de74 <tcp_slowtmr+0x504>)
 801dd08:	f240 428d 	movw	r2, #1165	; 0x48d
 801dd0c:	495c      	ldr	r1, [pc, #368]	; (801de80 <tcp_slowtmr+0x510>)
 801dd0e:	485b      	ldr	r0, [pc, #364]	; (801de7c <tcp_slowtmr+0x50c>)
 801dd10:	f009 fb8e 	bl	8027430 <iprintf>
        tcp_active_pcbs = pcb->next;
 801dd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd16:	68db      	ldr	r3, [r3, #12]
 801dd18:	4a55      	ldr	r2, [pc, #340]	; (801de70 <tcp_slowtmr+0x500>)
 801dd1a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801dd1c:	7fbb      	ldrb	r3, [r7, #30]
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d010      	beq.n	801dd44 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801dd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801dd2a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd2e:	1d1d      	adds	r5, r3, #4
 801dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd32:	8adb      	ldrh	r3, [r3, #22]
 801dd34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dd36:	8b12      	ldrh	r2, [r2, #24]
 801dd38:	9201      	str	r2, [sp, #4]
 801dd3a:	9300      	str	r3, [sp, #0]
 801dd3c:	462b      	mov	r3, r5
 801dd3e:	4622      	mov	r2, r4
 801dd40:	f004 f8d8 	bl	8021ef4 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801dd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd46:	691b      	ldr	r3, [r3, #16]
 801dd48:	613b      	str	r3, [r7, #16]
      last_state = pcb->state;
 801dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd4c:	7d1b      	ldrb	r3, [r3, #20]
 801dd4e:	73fb      	strb	r3, [r7, #15]
      pcb2 = pcb;
 801dd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd52:	60bb      	str	r3, [r7, #8]
      pcb = pcb->next;
 801dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd56:	68db      	ldr	r3, [r3, #12]
 801dd58:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801dd5a:	68b9      	ldr	r1, [r7, #8]
 801dd5c:	2000      	movs	r0, #0
 801dd5e:	f7fe f8fd 	bl	801bf5c <memp_free>

      tcp_active_pcbs_changed = 0;
 801dd62:	4b48      	ldr	r3, [pc, #288]	; (801de84 <tcp_slowtmr+0x514>)
 801dd64:	2200      	movs	r2, #0
 801dd66:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801dd68:	697b      	ldr	r3, [r7, #20]
 801dd6a:	2b00      	cmp	r3, #0
 801dd6c:	d004      	beq.n	801dd78 <tcp_slowtmr+0x408>
 801dd6e:	697b      	ldr	r3, [r7, #20]
 801dd70:	f06f 010c 	mvn.w	r1, #12
 801dd74:	6938      	ldr	r0, [r7, #16]
 801dd76:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801dd78:	4b42      	ldr	r3, [pc, #264]	; (801de84 <tcp_slowtmr+0x514>)
 801dd7a:	781b      	ldrb	r3, [r3, #0]
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	d035      	beq.n	801ddec <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 801dd80:	e606      	b.n	801d990 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd84:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd88:	68db      	ldr	r3, [r3, #12]
 801dd8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801dd8c:	6a3b      	ldr	r3, [r7, #32]
 801dd8e:	7edb      	ldrb	r3, [r3, #27]
 801dd90:	3301      	adds	r3, #1
 801dd92:	b2da      	uxtb	r2, r3
 801dd94:	6a3b      	ldr	r3, [r7, #32]
 801dd96:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 801dd98:	6a3b      	ldr	r3, [r7, #32]
 801dd9a:	7eda      	ldrb	r2, [r3, #27]
 801dd9c:	6a3b      	ldr	r3, [r7, #32]
 801dd9e:	7f1b      	ldrb	r3, [r3, #28]
 801dda0:	429a      	cmp	r2, r3
 801dda2:	d323      	bcc.n	801ddec <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 801dda4:	6a3b      	ldr	r3, [r7, #32]
 801dda6:	2200      	movs	r2, #0
 801dda8:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801ddaa:	4b36      	ldr	r3, [pc, #216]	; (801de84 <tcp_slowtmr+0x514>)
 801ddac:	2200      	movs	r2, #0
 801ddae:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801ddb0:	6a3b      	ldr	r3, [r7, #32]
 801ddb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d00a      	beq.n	801ddd0 <tcp_slowtmr+0x460>
 801ddba:	6a3b      	ldr	r3, [r7, #32]
 801ddbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ddc0:	6a3a      	ldr	r2, [r7, #32]
 801ddc2:	6912      	ldr	r2, [r2, #16]
 801ddc4:	6a39      	ldr	r1, [r7, #32]
 801ddc6:	4610      	mov	r0, r2
 801ddc8:	4798      	blx	r3
 801ddca:	4603      	mov	r3, r0
 801ddcc:	777b      	strb	r3, [r7, #29]
 801ddce:	e001      	b.n	801ddd4 <tcp_slowtmr+0x464>
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 801ddd4:	4b2b      	ldr	r3, [pc, #172]	; (801de84 <tcp_slowtmr+0x514>)
 801ddd6:	781b      	ldrb	r3, [r3, #0]
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d000      	beq.n	801ddde <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 801dddc:	e5d8      	b.n	801d990 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801ddde:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	d102      	bne.n	801ddec <tcp_slowtmr+0x47c>
          tcp_output(prev);
 801dde6:	6a38      	ldr	r0, [r7, #32]
 801dde8:	f003 fdfc 	bl	80219e4 <tcp_output>
  while (pcb != NULL) {
 801ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	f47f add4 	bne.w	801d99c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801ddf4:	2300      	movs	r3, #0
 801ddf6:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 801ddf8:	4b23      	ldr	r3, [pc, #140]	; (801de88 <tcp_slowtmr+0x518>)
 801ddfa:	681b      	ldr	r3, [r3, #0]
 801ddfc:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801ddfe:	e068      	b.n	801ded2 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801de00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de02:	7d1b      	ldrb	r3, [r3, #20]
 801de04:	2b0a      	cmp	r3, #10
 801de06:	d006      	beq.n	801de16 <tcp_slowtmr+0x4a6>
 801de08:	4b1a      	ldr	r3, [pc, #104]	; (801de74 <tcp_slowtmr+0x504>)
 801de0a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801de0e:	491f      	ldr	r1, [pc, #124]	; (801de8c <tcp_slowtmr+0x51c>)
 801de10:	481a      	ldr	r0, [pc, #104]	; (801de7c <tcp_slowtmr+0x50c>)
 801de12:	f009 fb0d 	bl	8027430 <iprintf>
    pcb_remove = 0;
 801de16:	2300      	movs	r3, #0
 801de18:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801de1a:	4b12      	ldr	r3, [pc, #72]	; (801de64 <tcp_slowtmr+0x4f4>)
 801de1c:	681a      	ldr	r2, [r3, #0]
 801de1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de20:	6a1b      	ldr	r3, [r3, #32]
 801de22:	1ad3      	subs	r3, r2, r3
 801de24:	2bf0      	cmp	r3, #240	; 0xf0
 801de26:	d902      	bls.n	801de2e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 801de28:	7ffb      	ldrb	r3, [r7, #31]
 801de2a:	3301      	adds	r3, #1
 801de2c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801de2e:	7ffb      	ldrb	r3, [r7, #31]
 801de30:	2b00      	cmp	r3, #0
 801de32:	d049      	beq.n	801dec8 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801de34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de36:	f000 fb91 	bl	801e55c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801de3a:	6a3b      	ldr	r3, [r7, #32]
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d029      	beq.n	801de94 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801de40:	4b11      	ldr	r3, [pc, #68]	; (801de88 <tcp_slowtmr+0x518>)
 801de42:	681b      	ldr	r3, [r3, #0]
 801de44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801de46:	429a      	cmp	r2, r3
 801de48:	d106      	bne.n	801de58 <tcp_slowtmr+0x4e8>
 801de4a:	4b0a      	ldr	r3, [pc, #40]	; (801de74 <tcp_slowtmr+0x504>)
 801de4c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 801de50:	490f      	ldr	r1, [pc, #60]	; (801de90 <tcp_slowtmr+0x520>)
 801de52:	480a      	ldr	r0, [pc, #40]	; (801de7c <tcp_slowtmr+0x50c>)
 801de54:	f009 faec 	bl	8027430 <iprintf>
        prev->next = pcb->next;
 801de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de5a:	68da      	ldr	r2, [r3, #12]
 801de5c:	6a3b      	ldr	r3, [r7, #32]
 801de5e:	60da      	str	r2, [r3, #12]
 801de60:	e028      	b.n	801deb4 <tcp_slowtmr+0x544>
 801de62:	bf00      	nop
 801de64:	2000ece0 	.word	0x2000ece0
 801de68:	000124f8 	.word	0x000124f8
 801de6c:	10624dd3 	.word	0x10624dd3
 801de70:	2000ecdc 	.word	0x2000ecdc
 801de74:	0802a7f4 	.word	0x0802a7f4
 801de78:	0802aa2c 	.word	0x0802aa2c
 801de7c:	0802a830 	.word	0x0802a830
 801de80:	0802aa58 	.word	0x0802aa58
 801de84:	2000ecd8 	.word	0x2000ecd8
 801de88:	2000ecec 	.word	0x2000ecec
 801de8c:	0802aa84 	.word	0x0802aa84
 801de90:	0802aab4 	.word	0x0802aab4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801de94:	4b12      	ldr	r3, [pc, #72]	; (801dee0 <tcp_slowtmr+0x570>)
 801de96:	681a      	ldr	r2, [r3, #0]
 801de98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de9a:	429a      	cmp	r2, r3
 801de9c:	d006      	beq.n	801deac <tcp_slowtmr+0x53c>
 801de9e:	4b11      	ldr	r3, [pc, #68]	; (801dee4 <tcp_slowtmr+0x574>)
 801dea0:	f240 42cf 	movw	r2, #1231	; 0x4cf
 801dea4:	4910      	ldr	r1, [pc, #64]	; (801dee8 <tcp_slowtmr+0x578>)
 801dea6:	4811      	ldr	r0, [pc, #68]	; (801deec <tcp_slowtmr+0x57c>)
 801dea8:	f009 fac2 	bl	8027430 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801deac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deae:	68db      	ldr	r3, [r3, #12]
 801deb0:	4a0b      	ldr	r2, [pc, #44]	; (801dee0 <tcp_slowtmr+0x570>)
 801deb2:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801deb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deb6:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 801deb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deba:	68db      	ldr	r3, [r3, #12]
 801debc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801debe:	6879      	ldr	r1, [r7, #4]
 801dec0:	2000      	movs	r0, #0
 801dec2:	f7fe f84b 	bl	801bf5c <memp_free>
 801dec6:	e004      	b.n	801ded2 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 801dec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deca:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801decc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dece:	68db      	ldr	r3, [r3, #12]
 801ded0:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801ded2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	d193      	bne.n	801de00 <tcp_slowtmr+0x490>
    }
  }
}
 801ded8:	bf00      	nop
 801deda:	3728      	adds	r7, #40	; 0x28
 801dedc:	46bd      	mov	sp, r7
 801dede:	bdb0      	pop	{r4, r5, r7, pc}
 801dee0:	2000ecec 	.word	0x2000ecec
 801dee4:	0802a7f4 	.word	0x0802a7f4
 801dee8:	0802aadc 	.word	0x0802aadc
 801deec:	0802a830 	.word	0x0802a830

0801def0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801def0:	b580      	push	{r7, lr}
 801def2:	b082      	sub	sp, #8
 801def4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801def6:	4b2d      	ldr	r3, [pc, #180]	; (801dfac <tcp_fasttmr+0xbc>)
 801def8:	781b      	ldrb	r3, [r3, #0]
 801defa:	3301      	adds	r3, #1
 801defc:	b2da      	uxtb	r2, r3
 801defe:	4b2b      	ldr	r3, [pc, #172]	; (801dfac <tcp_fasttmr+0xbc>)
 801df00:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801df02:	4b2b      	ldr	r3, [pc, #172]	; (801dfb0 <tcp_fasttmr+0xc0>)
 801df04:	681b      	ldr	r3, [r3, #0]
 801df06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801df08:	e048      	b.n	801df9c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	7f5a      	ldrb	r2, [r3, #29]
 801df0e:	4b27      	ldr	r3, [pc, #156]	; (801dfac <tcp_fasttmr+0xbc>)
 801df10:	781b      	ldrb	r3, [r3, #0]
 801df12:	429a      	cmp	r2, r3
 801df14:	d03f      	beq.n	801df96 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801df16:	4b25      	ldr	r3, [pc, #148]	; (801dfac <tcp_fasttmr+0xbc>)
 801df18:	781a      	ldrb	r2, [r3, #0]
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	7e9b      	ldrb	r3, [r3, #26]
 801df22:	f003 0301 	and.w	r3, r3, #1
 801df26:	2b00      	cmp	r3, #0
 801df28:	d010      	beq.n	801df4c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801df2a:	687b      	ldr	r3, [r7, #4]
 801df2c:	7e9b      	ldrb	r3, [r3, #26]
 801df2e:	f043 0302 	orr.w	r3, r3, #2
 801df32:	b2da      	uxtb	r2, r3
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 801df38:	6878      	ldr	r0, [r7, #4]
 801df3a:	f003 fd53 	bl	80219e4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	7e9b      	ldrb	r3, [r3, #26]
 801df42:	f023 0303 	bic.w	r3, r3, #3
 801df46:	b2da      	uxtb	r2, r3
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	7e9b      	ldrb	r3, [r3, #26]
 801df50:	f003 0308 	and.w	r3, r3, #8
 801df54:	2b00      	cmp	r3, #0
 801df56:	d009      	beq.n	801df6c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	7e9b      	ldrb	r3, [r3, #26]
 801df5c:	f023 0308 	bic.w	r3, r3, #8
 801df60:	b2da      	uxtb	r2, r3
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801df66:	6878      	ldr	r0, [r7, #4]
 801df68:	f7ff f956 	bl	801d218 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	68db      	ldr	r3, [r3, #12]
 801df70:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801df76:	2b00      	cmp	r3, #0
 801df78:	d00a      	beq.n	801df90 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801df7a:	4b0e      	ldr	r3, [pc, #56]	; (801dfb4 <tcp_fasttmr+0xc4>)
 801df7c:	2200      	movs	r2, #0
 801df7e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801df80:	6878      	ldr	r0, [r7, #4]
 801df82:	f000 f819 	bl	801dfb8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801df86:	4b0b      	ldr	r3, [pc, #44]	; (801dfb4 <tcp_fasttmr+0xc4>)
 801df88:	781b      	ldrb	r3, [r3, #0]
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d000      	beq.n	801df90 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801df8e:	e7b8      	b.n	801df02 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801df90:	683b      	ldr	r3, [r7, #0]
 801df92:	607b      	str	r3, [r7, #4]
 801df94:	e002      	b.n	801df9c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801df96:	687b      	ldr	r3, [r7, #4]
 801df98:	68db      	ldr	r3, [r3, #12]
 801df9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d1b3      	bne.n	801df0a <tcp_fasttmr+0x1a>
    }
  }
}
 801dfa2:	bf00      	nop
 801dfa4:	3708      	adds	r7, #8
 801dfa6:	46bd      	mov	sp, r7
 801dfa8:	bd80      	pop	{r7, pc}
 801dfaa:	bf00      	nop
 801dfac:	200094f2 	.word	0x200094f2
 801dfb0:	2000ecdc 	.word	0x2000ecdc
 801dfb4:	2000ecd8 	.word	0x2000ecd8

0801dfb8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801dfb8:	b590      	push	{r4, r7, lr}
 801dfba:	b085      	sub	sp, #20
 801dfbc:	af00      	add	r7, sp, #0
 801dfbe:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801dfc4:	7b5b      	ldrb	r3, [r3, #13]
 801dfc6:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801dfcc:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	2200      	movs	r2, #0
 801dfd2:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d00b      	beq.n	801dff6 <tcp_process_refused_data+0x3e>
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	6918      	ldr	r0, [r3, #16]
 801dfe8:	2300      	movs	r3, #0
 801dfea:	68ba      	ldr	r2, [r7, #8]
 801dfec:	6879      	ldr	r1, [r7, #4]
 801dfee:	47a0      	blx	r4
 801dff0:	4603      	mov	r3, r0
 801dff2:	73fb      	strb	r3, [r7, #15]
 801dff4:	e007      	b.n	801e006 <tcp_process_refused_data+0x4e>
 801dff6:	2300      	movs	r3, #0
 801dff8:	68ba      	ldr	r2, [r7, #8]
 801dffa:	6879      	ldr	r1, [r7, #4]
 801dffc:	2000      	movs	r0, #0
 801dffe:	f000 f88c 	bl	801e11a <tcp_recv_null>
 801e002:	4603      	mov	r3, r0
 801e004:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801e006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d12a      	bne.n	801e064 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 801e00e:	7bbb      	ldrb	r3, [r7, #14]
 801e010:	f003 0320 	and.w	r3, r3, #32
 801e014:	2b00      	cmp	r3, #0
 801e016:	d033      	beq.n	801e080 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e01c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e020:	d005      	beq.n	801e02e <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e026:	3301      	adds	r3, #1
 801e028:	b29a      	uxth	r2, r3
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e034:	2b00      	cmp	r3, #0
 801e036:	d00b      	beq.n	801e050 <tcp_process_refused_data+0x98>
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	6918      	ldr	r0, [r3, #16]
 801e042:	2300      	movs	r3, #0
 801e044:	2200      	movs	r2, #0
 801e046:	6879      	ldr	r1, [r7, #4]
 801e048:	47a0      	blx	r4
 801e04a:	4603      	mov	r3, r0
 801e04c:	73fb      	strb	r3, [r7, #15]
 801e04e:	e001      	b.n	801e054 <tcp_process_refused_data+0x9c>
 801e050:	2300      	movs	r3, #0
 801e052:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801e054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e058:	f113 0f0d 	cmn.w	r3, #13
 801e05c:	d110      	bne.n	801e080 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 801e05e:	f06f 030c 	mvn.w	r3, #12
 801e062:	e00e      	b.n	801e082 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 801e064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e068:	f113 0f0d 	cmn.w	r3, #13
 801e06c:	d102      	bne.n	801e074 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801e06e:	f06f 030c 	mvn.w	r3, #12
 801e072:	e006      	b.n	801e082 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	68ba      	ldr	r2, [r7, #8]
 801e078:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 801e07a:	f06f 0304 	mvn.w	r3, #4
 801e07e:	e000      	b.n	801e082 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 801e080:	2300      	movs	r3, #0
}
 801e082:	4618      	mov	r0, r3
 801e084:	3714      	adds	r7, #20
 801e086:	46bd      	mov	sp, r7
 801e088:	bd90      	pop	{r4, r7, pc}

0801e08a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801e08a:	b580      	push	{r7, lr}
 801e08c:	b084      	sub	sp, #16
 801e08e:	af00      	add	r7, sp, #0
 801e090:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801e092:	e007      	b.n	801e0a4 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	681b      	ldr	r3, [r3, #0]
 801e098:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801e09a:	6878      	ldr	r0, [r7, #4]
 801e09c:	f000 f809 	bl	801e0b2 <tcp_seg_free>
    seg = next;
 801e0a0:	68fb      	ldr	r3, [r7, #12]
 801e0a2:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d1f4      	bne.n	801e094 <tcp_segs_free+0xa>
  }
}
 801e0aa:	bf00      	nop
 801e0ac:	3710      	adds	r7, #16
 801e0ae:	46bd      	mov	sp, r7
 801e0b0:	bd80      	pop	{r7, pc}

0801e0b2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801e0b2:	b580      	push	{r7, lr}
 801e0b4:	b082      	sub	sp, #8
 801e0b6:	af00      	add	r7, sp, #0
 801e0b8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801e0ba:	687b      	ldr	r3, [r7, #4]
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	d00c      	beq.n	801e0da <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	685b      	ldr	r3, [r3, #4]
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d004      	beq.n	801e0d2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	685b      	ldr	r3, [r3, #4]
 801e0cc:	4618      	mov	r0, r3
 801e0ce:	f7fe fcd5 	bl	801ca7c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801e0d2:	6879      	ldr	r1, [r7, #4]
 801e0d4:	2002      	movs	r0, #2
 801e0d6:	f7fd ff41 	bl	801bf5c <memp_free>
  }
}
 801e0da:	bf00      	nop
 801e0dc:	3708      	adds	r7, #8
 801e0de:	46bd      	mov	sp, r7
 801e0e0:	bd80      	pop	{r7, pc}

0801e0e2 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801e0e2:	b580      	push	{r7, lr}
 801e0e4:	b084      	sub	sp, #16
 801e0e6:	af00      	add	r7, sp, #0
 801e0e8:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801e0ea:	2002      	movs	r0, #2
 801e0ec:	f7fd fee4 	bl	801beb8 <memp_malloc>
 801e0f0:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801e0f2:	68fb      	ldr	r3, [r7, #12]
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	d101      	bne.n	801e0fc <tcp_seg_copy+0x1a>
    return NULL;
 801e0f8:	2300      	movs	r3, #0
 801e0fa:	e00a      	b.n	801e112 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801e0fc:	2210      	movs	r2, #16
 801e0fe:	6879      	ldr	r1, [r7, #4]
 801e100:	68f8      	ldr	r0, [r7, #12]
 801e102:	f00a f9b4 	bl	802846e <memcpy>
  pbuf_ref(cseg->p);
 801e106:	68fb      	ldr	r3, [r7, #12]
 801e108:	685b      	ldr	r3, [r3, #4]
 801e10a:	4618      	mov	r0, r3
 801e10c:	f7fe fd68 	bl	801cbe0 <pbuf_ref>
  return cseg;
 801e110:	68fb      	ldr	r3, [r7, #12]
}
 801e112:	4618      	mov	r0, r3
 801e114:	3710      	adds	r7, #16
 801e116:	46bd      	mov	sp, r7
 801e118:	bd80      	pop	{r7, pc}

0801e11a <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801e11a:	b580      	push	{r7, lr}
 801e11c:	b084      	sub	sp, #16
 801e11e:	af00      	add	r7, sp, #0
 801e120:	60f8      	str	r0, [r7, #12]
 801e122:	60b9      	str	r1, [r7, #8]
 801e124:	607a      	str	r2, [r7, #4]
 801e126:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	d009      	beq.n	801e142 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	891b      	ldrh	r3, [r3, #8]
 801e132:	4619      	mov	r1, r3
 801e134:	68b8      	ldr	r0, [r7, #8]
 801e136:	f7ff fb7d 	bl	801d834 <tcp_recved>
    pbuf_free(p);
 801e13a:	6878      	ldr	r0, [r7, #4]
 801e13c:	f7fe fc9e 	bl	801ca7c <pbuf_free>
 801e140:	e008      	b.n	801e154 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 801e142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e146:	2b00      	cmp	r3, #0
 801e148:	d104      	bne.n	801e154 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 801e14a:	68b8      	ldr	r0, [r7, #8]
 801e14c:	f7ff f8ca 	bl	801d2e4 <tcp_close>
 801e150:	4603      	mov	r3, r0
 801e152:	e000      	b.n	801e156 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 801e154:	2300      	movs	r3, #0
}
 801e156:	4618      	mov	r0, r3
 801e158:	3710      	adds	r7, #16
 801e15a:	46bd      	mov	sp, r7
 801e15c:	bd80      	pop	{r7, pc}
	...

0801e160 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801e160:	b580      	push	{r7, lr}
 801e162:	b086      	sub	sp, #24
 801e164:	af00      	add	r7, sp, #0
 801e166:	4603      	mov	r3, r0
 801e168:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801e16a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e16e:	2b00      	cmp	r3, #0
 801e170:	db01      	blt.n	801e176 <tcp_kill_prio+0x16>
 801e172:	79fb      	ldrb	r3, [r7, #7]
 801e174:	e000      	b.n	801e178 <tcp_kill_prio+0x18>
 801e176:	237f      	movs	r3, #127	; 0x7f
 801e178:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 801e17a:	2300      	movs	r3, #0
 801e17c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801e17e:	2300      	movs	r3, #0
 801e180:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e182:	4b16      	ldr	r3, [pc, #88]	; (801e1dc <tcp_kill_prio+0x7c>)
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	617b      	str	r3, [r7, #20]
 801e188:	e01a      	b.n	801e1c0 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 801e18a:	697b      	ldr	r3, [r7, #20]
 801e18c:	7d5b      	ldrb	r3, [r3, #21]
 801e18e:	7afa      	ldrb	r2, [r7, #11]
 801e190:	429a      	cmp	r2, r3
 801e192:	d312      	bcc.n	801e1ba <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e194:	4b12      	ldr	r3, [pc, #72]	; (801e1e0 <tcp_kill_prio+0x80>)
 801e196:	681a      	ldr	r2, [r3, #0]
 801e198:	697b      	ldr	r3, [r7, #20]
 801e19a:	6a1b      	ldr	r3, [r3, #32]
 801e19c:	1ad2      	subs	r2, r2, r3
    if (pcb->prio <= mprio &&
 801e19e:	68fb      	ldr	r3, [r7, #12]
 801e1a0:	429a      	cmp	r2, r3
 801e1a2:	d30a      	bcc.n	801e1ba <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 801e1a4:	4b0e      	ldr	r3, [pc, #56]	; (801e1e0 <tcp_kill_prio+0x80>)
 801e1a6:	681a      	ldr	r2, [r3, #0]
 801e1a8:	697b      	ldr	r3, [r7, #20]
 801e1aa:	6a1b      	ldr	r3, [r3, #32]
 801e1ac:	1ad3      	subs	r3, r2, r3
 801e1ae:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 801e1b0:	697b      	ldr	r3, [r7, #20]
 801e1b2:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 801e1b4:	697b      	ldr	r3, [r7, #20]
 801e1b6:	7d5b      	ldrb	r3, [r3, #21]
 801e1b8:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e1ba:	697b      	ldr	r3, [r7, #20]
 801e1bc:	68db      	ldr	r3, [r3, #12]
 801e1be:	617b      	str	r3, [r7, #20]
 801e1c0:	697b      	ldr	r3, [r7, #20]
 801e1c2:	2b00      	cmp	r3, #0
 801e1c4:	d1e1      	bne.n	801e18a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 801e1c6:	693b      	ldr	r3, [r7, #16]
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d002      	beq.n	801e1d2 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 801e1cc:	6938      	ldr	r0, [r7, #16]
 801e1ce:	f7ff f99b 	bl	801d508 <tcp_abort>
  }
}
 801e1d2:	bf00      	nop
 801e1d4:	3718      	adds	r7, #24
 801e1d6:	46bd      	mov	sp, r7
 801e1d8:	bd80      	pop	{r7, pc}
 801e1da:	bf00      	nop
 801e1dc:	2000ecdc 	.word	0x2000ecdc
 801e1e0:	2000ece0 	.word	0x2000ece0

0801e1e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801e1e4:	b580      	push	{r7, lr}
 801e1e6:	b086      	sub	sp, #24
 801e1e8:	af00      	add	r7, sp, #0
 801e1ea:	4603      	mov	r3, r0
 801e1ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801e1ee:	79fb      	ldrb	r3, [r7, #7]
 801e1f0:	2b08      	cmp	r3, #8
 801e1f2:	d009      	beq.n	801e208 <tcp_kill_state+0x24>
 801e1f4:	79fb      	ldrb	r3, [r7, #7]
 801e1f6:	2b09      	cmp	r3, #9
 801e1f8:	d006      	beq.n	801e208 <tcp_kill_state+0x24>
 801e1fa:	4b1a      	ldr	r3, [pc, #104]	; (801e264 <tcp_kill_state+0x80>)
 801e1fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801e200:	4919      	ldr	r1, [pc, #100]	; (801e268 <tcp_kill_state+0x84>)
 801e202:	481a      	ldr	r0, [pc, #104]	; (801e26c <tcp_kill_state+0x88>)
 801e204:	f009 f914 	bl	8027430 <iprintf>

  inactivity = 0;
 801e208:	2300      	movs	r3, #0
 801e20a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801e20c:	2300      	movs	r3, #0
 801e20e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e210:	4b17      	ldr	r3, [pc, #92]	; (801e270 <tcp_kill_state+0x8c>)
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	617b      	str	r3, [r7, #20]
 801e216:	e017      	b.n	801e248 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801e218:	697b      	ldr	r3, [r7, #20]
 801e21a:	7d1b      	ldrb	r3, [r3, #20]
 801e21c:	79fa      	ldrb	r2, [r7, #7]
 801e21e:	429a      	cmp	r2, r3
 801e220:	d10f      	bne.n	801e242 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e222:	4b14      	ldr	r3, [pc, #80]	; (801e274 <tcp_kill_state+0x90>)
 801e224:	681a      	ldr	r2, [r3, #0]
 801e226:	697b      	ldr	r3, [r7, #20]
 801e228:	6a1b      	ldr	r3, [r3, #32]
 801e22a:	1ad2      	subs	r2, r2, r3
 801e22c:	68fb      	ldr	r3, [r7, #12]
 801e22e:	429a      	cmp	r2, r3
 801e230:	d307      	bcc.n	801e242 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801e232:	4b10      	ldr	r3, [pc, #64]	; (801e274 <tcp_kill_state+0x90>)
 801e234:	681a      	ldr	r2, [r3, #0]
 801e236:	697b      	ldr	r3, [r7, #20]
 801e238:	6a1b      	ldr	r3, [r3, #32]
 801e23a:	1ad3      	subs	r3, r2, r3
 801e23c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801e23e:	697b      	ldr	r3, [r7, #20]
 801e240:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e242:	697b      	ldr	r3, [r7, #20]
 801e244:	68db      	ldr	r3, [r3, #12]
 801e246:	617b      	str	r3, [r7, #20]
 801e248:	697b      	ldr	r3, [r7, #20]
 801e24a:	2b00      	cmp	r3, #0
 801e24c:	d1e4      	bne.n	801e218 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801e24e:	693b      	ldr	r3, [r7, #16]
 801e250:	2b00      	cmp	r3, #0
 801e252:	d003      	beq.n	801e25c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801e254:	2100      	movs	r1, #0
 801e256:	6938      	ldr	r0, [r7, #16]
 801e258:	f7ff f8a4 	bl	801d3a4 <tcp_abandon>
  }
}
 801e25c:	bf00      	nop
 801e25e:	3718      	adds	r7, #24
 801e260:	46bd      	mov	sp, r7
 801e262:	bd80      	pop	{r7, pc}
 801e264:	0802a7f4 	.word	0x0802a7f4
 801e268:	0802ab04 	.word	0x0802ab04
 801e26c:	0802a830 	.word	0x0802a830
 801e270:	2000ecdc 	.word	0x2000ecdc
 801e274:	2000ece0 	.word	0x2000ece0

0801e278 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801e278:	b580      	push	{r7, lr}
 801e27a:	b084      	sub	sp, #16
 801e27c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801e27e:	2300      	movs	r3, #0
 801e280:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801e282:	2300      	movs	r3, #0
 801e284:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e286:	4b12      	ldr	r3, [pc, #72]	; (801e2d0 <tcp_kill_timewait+0x58>)
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	60fb      	str	r3, [r7, #12]
 801e28c:	e012      	b.n	801e2b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e28e:	4b11      	ldr	r3, [pc, #68]	; (801e2d4 <tcp_kill_timewait+0x5c>)
 801e290:	681a      	ldr	r2, [r3, #0]
 801e292:	68fb      	ldr	r3, [r7, #12]
 801e294:	6a1b      	ldr	r3, [r3, #32]
 801e296:	1ad2      	subs	r2, r2, r3
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	429a      	cmp	r2, r3
 801e29c:	d307      	bcc.n	801e2ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801e29e:	4b0d      	ldr	r3, [pc, #52]	; (801e2d4 <tcp_kill_timewait+0x5c>)
 801e2a0:	681a      	ldr	r2, [r3, #0]
 801e2a2:	68fb      	ldr	r3, [r7, #12]
 801e2a4:	6a1b      	ldr	r3, [r3, #32]
 801e2a6:	1ad3      	subs	r3, r2, r3
 801e2a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801e2aa:	68fb      	ldr	r3, [r7, #12]
 801e2ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e2ae:	68fb      	ldr	r3, [r7, #12]
 801e2b0:	68db      	ldr	r3, [r3, #12]
 801e2b2:	60fb      	str	r3, [r7, #12]
 801e2b4:	68fb      	ldr	r3, [r7, #12]
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	d1e9      	bne.n	801e28e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801e2ba:	68bb      	ldr	r3, [r7, #8]
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d002      	beq.n	801e2c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 801e2c0:	68b8      	ldr	r0, [r7, #8]
 801e2c2:	f7ff f921 	bl	801d508 <tcp_abort>
  }
}
 801e2c6:	bf00      	nop
 801e2c8:	3710      	adds	r7, #16
 801e2ca:	46bd      	mov	sp, r7
 801e2cc:	bd80      	pop	{r7, pc}
 801e2ce:	bf00      	nop
 801e2d0:	2000ecec 	.word	0x2000ecec
 801e2d4:	2000ece0 	.word	0x2000ece0

0801e2d8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801e2d8:	b580      	push	{r7, lr}
 801e2da:	b084      	sub	sp, #16
 801e2dc:	af00      	add	r7, sp, #0
 801e2de:	4603      	mov	r3, r0
 801e2e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e2e2:	2000      	movs	r0, #0
 801e2e4:	f7fd fde8 	bl	801beb8 <memp_malloc>
 801e2e8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801e2ea:	68fb      	ldr	r3, [r7, #12]
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d124      	bne.n	801e33a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801e2f0:	f7ff ffc2 	bl	801e278 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e2f4:	2000      	movs	r0, #0
 801e2f6:	f7fd fddf 	bl	801beb8 <memp_malloc>
 801e2fa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801e2fc:	68fb      	ldr	r3, [r7, #12]
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d11b      	bne.n	801e33a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801e302:	2009      	movs	r0, #9
 801e304:	f7ff ff6e 	bl	801e1e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e308:	2000      	movs	r0, #0
 801e30a:	f7fd fdd5 	bl	801beb8 <memp_malloc>
 801e30e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801e310:	68fb      	ldr	r3, [r7, #12]
 801e312:	2b00      	cmp	r3, #0
 801e314:	d111      	bne.n	801e33a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801e316:	2008      	movs	r0, #8
 801e318:	f7ff ff64 	bl	801e1e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e31c:	2000      	movs	r0, #0
 801e31e:	f7fd fdcb 	bl	801beb8 <memp_malloc>
 801e322:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	2b00      	cmp	r3, #0
 801e328:	d107      	bne.n	801e33a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801e32a:	79fb      	ldrb	r3, [r7, #7]
 801e32c:	4618      	mov	r0, r3
 801e32e:	f7ff ff17 	bl	801e160 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e332:	2000      	movs	r0, #0
 801e334:	f7fd fdc0 	bl	801beb8 <memp_malloc>
 801e338:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801e33a:	68fb      	ldr	r3, [r7, #12]
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	d03f      	beq.n	801e3c0 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801e340:	2298      	movs	r2, #152	; 0x98
 801e342:	2100      	movs	r1, #0
 801e344:	68f8      	ldr	r0, [r7, #12]
 801e346:	f00a f89d 	bl	8028484 <memset>
    pcb->prio = prio;
 801e34a:	68fb      	ldr	r3, [r7, #12]
 801e34c:	79fa      	ldrb	r2, [r7, #7]
 801e34e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 801e356:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801e35a:	68fb      	ldr	r3, [r7, #12]
 801e35c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801e360:	855a      	strh	r2, [r3, #42]	; 0x2a
 801e362:	68fb      	ldr	r3, [r7, #12]
 801e364:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801e366:	68fb      	ldr	r3, [r7, #12]
 801e368:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801e36a:	68fb      	ldr	r3, [r7, #12]
 801e36c:	22ff      	movs	r2, #255	; 0xff
 801e36e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	f44f 7206 	mov.w	r2, #536	; 0x218
 801e376:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801e378:	68fb      	ldr	r3, [r7, #12]
 801e37a:	2206      	movs	r2, #6
 801e37c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	2206      	movs	r2, #6
 801e384:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801e386:	68fb      	ldr	r3, [r7, #12]
 801e388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e38c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	2201      	movs	r2, #1
 801e392:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801e396:	4b0d      	ldr	r3, [pc, #52]	; (801e3cc <tcp_alloc+0xf4>)
 801e398:	681a      	ldr	r2, [r3, #0]
 801e39a:	68fb      	ldr	r3, [r7, #12]
 801e39c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801e39e:	4b0c      	ldr	r3, [pc, #48]	; (801e3d0 <tcp_alloc+0xf8>)
 801e3a0:	781a      	ldrb	r2, [r3, #0]
 801e3a2:	68fb      	ldr	r3, [r7, #12]
 801e3a4:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801e3a6:	68fb      	ldr	r3, [r7, #12]
 801e3a8:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 801e3ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801e3b0:	68fb      	ldr	r3, [r7, #12]
 801e3b2:	4a08      	ldr	r2, [pc, #32]	; (801e3d4 <tcp_alloc+0xfc>)
 801e3b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	4a07      	ldr	r2, [pc, #28]	; (801e3d8 <tcp_alloc+0x100>)
 801e3bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801e3c0:	68fb      	ldr	r3, [r7, #12]
}
 801e3c2:	4618      	mov	r0, r3
 801e3c4:	3710      	adds	r7, #16
 801e3c6:	46bd      	mov	sp, r7
 801e3c8:	bd80      	pop	{r7, pc}
 801e3ca:	bf00      	nop
 801e3cc:	2000ece0 	.word	0x2000ece0
 801e3d0:	200094f2 	.word	0x200094f2
 801e3d4:	0801e11b 	.word	0x0801e11b
 801e3d8:	006ddd00 	.word	0x006ddd00

0801e3dc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801e3dc:	b580      	push	{r7, lr}
 801e3de:	b084      	sub	sp, #16
 801e3e0:	af00      	add	r7, sp, #0
 801e3e2:	4603      	mov	r3, r0
 801e3e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801e3e6:	2040      	movs	r0, #64	; 0x40
 801e3e8:	f7ff ff76 	bl	801e2d8 <tcp_alloc>
 801e3ec:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801e3ee:	68fb      	ldr	r3, [r7, #12]
}
 801e3f0:	4618      	mov	r0, r3
 801e3f2:	3710      	adds	r7, #16
 801e3f4:	46bd      	mov	sp, r7
 801e3f6:	bd80      	pop	{r7, pc}

0801e3f8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801e3f8:	b480      	push	{r7}
 801e3fa:	b083      	sub	sp, #12
 801e3fc:	af00      	add	r7, sp, #0
 801e3fe:	6078      	str	r0, [r7, #4]
 801e400:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	2b00      	cmp	r3, #0
 801e406:	d002      	beq.n	801e40e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	683a      	ldr	r2, [r7, #0]
 801e40c:	611a      	str	r2, [r3, #16]
  }
}
 801e40e:	bf00      	nop
 801e410:	370c      	adds	r7, #12
 801e412:	46bd      	mov	sp, r7
 801e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e418:	4770      	bx	lr
	...

0801e41c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801e41c:	b580      	push	{r7, lr}
 801e41e:	b082      	sub	sp, #8
 801e420:	af00      	add	r7, sp, #0
 801e422:	6078      	str	r0, [r7, #4]
 801e424:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	2b00      	cmp	r3, #0
 801e42a:	d00e      	beq.n	801e44a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801e42c:	687b      	ldr	r3, [r7, #4]
 801e42e:	7d1b      	ldrb	r3, [r3, #20]
 801e430:	2b01      	cmp	r3, #1
 801e432:	d106      	bne.n	801e442 <tcp_recv+0x26>
 801e434:	4b07      	ldr	r3, [pc, #28]	; (801e454 <tcp_recv+0x38>)
 801e436:	f240 62bb 	movw	r2, #1723	; 0x6bb
 801e43a:	4907      	ldr	r1, [pc, #28]	; (801e458 <tcp_recv+0x3c>)
 801e43c:	4807      	ldr	r0, [pc, #28]	; (801e45c <tcp_recv+0x40>)
 801e43e:	f008 fff7 	bl	8027430 <iprintf>
    pcb->recv = recv;
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	683a      	ldr	r2, [r7, #0]
 801e446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801e44a:	bf00      	nop
 801e44c:	3708      	adds	r7, #8
 801e44e:	46bd      	mov	sp, r7
 801e450:	bd80      	pop	{r7, pc}
 801e452:	bf00      	nop
 801e454:	0802a7f4 	.word	0x0802a7f4
 801e458:	0802ab14 	.word	0x0802ab14
 801e45c:	0802a830 	.word	0x0802a830

0801e460 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801e460:	b580      	push	{r7, lr}
 801e462:	b082      	sub	sp, #8
 801e464:	af00      	add	r7, sp, #0
 801e466:	6078      	str	r0, [r7, #4]
 801e468:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d00d      	beq.n	801e48c <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	7d1b      	ldrb	r3, [r3, #20]
 801e474:	2b01      	cmp	r3, #1
 801e476:	d106      	bne.n	801e486 <tcp_sent+0x26>
 801e478:	4b06      	ldr	r3, [pc, #24]	; (801e494 <tcp_sent+0x34>)
 801e47a:	f240 62cc 	movw	r2, #1740	; 0x6cc
 801e47e:	4906      	ldr	r1, [pc, #24]	; (801e498 <tcp_sent+0x38>)
 801e480:	4806      	ldr	r0, [pc, #24]	; (801e49c <tcp_sent+0x3c>)
 801e482:	f008 ffd5 	bl	8027430 <iprintf>
    pcb->sent = sent;
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	683a      	ldr	r2, [r7, #0]
 801e48a:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 801e48c:	bf00      	nop
 801e48e:	3708      	adds	r7, #8
 801e490:	46bd      	mov	sp, r7
 801e492:	bd80      	pop	{r7, pc}
 801e494:	0802a7f4 	.word	0x0802a7f4
 801e498:	0802ab3c 	.word	0x0802ab3c
 801e49c:	0802a830 	.word	0x0802a830

0801e4a0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801e4a0:	b580      	push	{r7, lr}
 801e4a2:	b082      	sub	sp, #8
 801e4a4:	af00      	add	r7, sp, #0
 801e4a6:	6078      	str	r0, [r7, #4]
 801e4a8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	2b00      	cmp	r3, #0
 801e4ae:	d00e      	beq.n	801e4ce <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	7d1b      	ldrb	r3, [r3, #20]
 801e4b4:	2b01      	cmp	r3, #1
 801e4b6:	d106      	bne.n	801e4c6 <tcp_err+0x26>
 801e4b8:	4b07      	ldr	r3, [pc, #28]	; (801e4d8 <tcp_err+0x38>)
 801e4ba:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 801e4be:	4907      	ldr	r1, [pc, #28]	; (801e4dc <tcp_err+0x3c>)
 801e4c0:	4807      	ldr	r0, [pc, #28]	; (801e4e0 <tcp_err+0x40>)
 801e4c2:	f008 ffb5 	bl	8027430 <iprintf>
    pcb->errf = err;
 801e4c6:	687b      	ldr	r3, [r7, #4]
 801e4c8:	683a      	ldr	r2, [r7, #0]
 801e4ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 801e4ce:	bf00      	nop
 801e4d0:	3708      	adds	r7, #8
 801e4d2:	46bd      	mov	sp, r7
 801e4d4:	bd80      	pop	{r7, pc}
 801e4d6:	bf00      	nop
 801e4d8:	0802a7f4 	.word	0x0802a7f4
 801e4dc:	0802ab64 	.word	0x0802ab64
 801e4e0:	0802a830 	.word	0x0802a830

0801e4e4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801e4e4:	b480      	push	{r7}
 801e4e6:	b085      	sub	sp, #20
 801e4e8:	af00      	add	r7, sp, #0
 801e4ea:	6078      	str	r0, [r7, #4]
 801e4ec:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	d008      	beq.n	801e506 <tcp_accept+0x22>
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	7d1b      	ldrb	r3, [r3, #20]
 801e4f8:	2b01      	cmp	r3, #1
 801e4fa:	d104      	bne.n	801e506 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 801e4fc:	687b      	ldr	r3, [r7, #4]
 801e4fe:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801e500:	68fb      	ldr	r3, [r7, #12]
 801e502:	683a      	ldr	r2, [r7, #0]
 801e504:	619a      	str	r2, [r3, #24]
  }
}
 801e506:	bf00      	nop
 801e508:	3714      	adds	r7, #20
 801e50a:	46bd      	mov	sp, r7
 801e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e510:	4770      	bx	lr
	...

0801e514 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801e514:	b580      	push	{r7, lr}
 801e516:	b084      	sub	sp, #16
 801e518:	af00      	add	r7, sp, #0
 801e51a:	60f8      	str	r0, [r7, #12]
 801e51c:	60b9      	str	r1, [r7, #8]
 801e51e:	4613      	mov	r3, r2
 801e520:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801e522:	68fb      	ldr	r3, [r7, #12]
 801e524:	7d1b      	ldrb	r3, [r3, #20]
 801e526:	2b01      	cmp	r3, #1
 801e528:	d106      	bne.n	801e538 <tcp_poll+0x24>
 801e52a:	4b09      	ldr	r3, [pc, #36]	; (801e550 <tcp_poll+0x3c>)
 801e52c:	f240 7203 	movw	r2, #1795	; 0x703
 801e530:	4908      	ldr	r1, [pc, #32]	; (801e554 <tcp_poll+0x40>)
 801e532:	4809      	ldr	r0, [pc, #36]	; (801e558 <tcp_poll+0x44>)
 801e534:	f008 ff7c 	bl	8027430 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801e538:	68fb      	ldr	r3, [r7, #12]
 801e53a:	68ba      	ldr	r2, [r7, #8]
 801e53c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801e540:	68fb      	ldr	r3, [r7, #12]
 801e542:	79fa      	ldrb	r2, [r7, #7]
 801e544:	771a      	strb	r2, [r3, #28]
}
 801e546:	bf00      	nop
 801e548:	3710      	adds	r7, #16
 801e54a:	46bd      	mov	sp, r7
 801e54c:	bd80      	pop	{r7, pc}
 801e54e:	bf00      	nop
 801e550:	0802a7f4 	.word	0x0802a7f4
 801e554:	0802ab8c 	.word	0x0802ab8c
 801e558:	0802a830 	.word	0x0802a830

0801e55c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801e55c:	b580      	push	{r7, lr}
 801e55e:	b082      	sub	sp, #8
 801e560:	af00      	add	r7, sp, #0
 801e562:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	7d1b      	ldrb	r3, [r3, #20]
 801e568:	2b00      	cmp	r3, #0
 801e56a:	d034      	beq.n	801e5d6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801e570:	2b0a      	cmp	r3, #10
 801e572:	d030      	beq.n	801e5d6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 801e578:	2b01      	cmp	r3, #1
 801e57a:	d02c      	beq.n	801e5d6 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e580:	2b00      	cmp	r3, #0
 801e582:	d007      	beq.n	801e594 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801e584:	687b      	ldr	r3, [r7, #4]
 801e586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e588:	4618      	mov	r0, r3
 801e58a:	f7fe fa77 	bl	801ca7c <pbuf_free>
      pcb->refused_data = NULL;
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	2200      	movs	r2, #0
 801e592:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e598:	4618      	mov	r0, r3
 801e59a:	f7ff fd76 	bl	801e08a <tcp_segs_free>
    pcb->ooseq = NULL;
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	2200      	movs	r2, #0
 801e5a2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e5aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e5b0:	4618      	mov	r0, r3
 801e5b2:	f7ff fd6a 	bl	801e08a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e5ba:	4618      	mov	r0, r3
 801e5bc:	f7ff fd65 	bl	801e08a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	2200      	movs	r2, #0
 801e5c4:	669a      	str	r2, [r3, #104]	; 0x68
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801e5ce:	687b      	ldr	r3, [r7, #4]
 801e5d0:	2200      	movs	r2, #0
 801e5d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 801e5d6:	bf00      	nop
 801e5d8:	3708      	adds	r7, #8
 801e5da:	46bd      	mov	sp, r7
 801e5dc:	bd80      	pop	{r7, pc}
	...

0801e5e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801e5e0:	b580      	push	{r7, lr}
 801e5e2:	b084      	sub	sp, #16
 801e5e4:	af00      	add	r7, sp, #0
 801e5e6:	6078      	str	r0, [r7, #4]
 801e5e8:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	681a      	ldr	r2, [r3, #0]
 801e5ee:	683b      	ldr	r3, [r7, #0]
 801e5f0:	429a      	cmp	r2, r3
 801e5f2:	d105      	bne.n	801e600 <tcp_pcb_remove+0x20>
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	681b      	ldr	r3, [r3, #0]
 801e5f8:	68da      	ldr	r2, [r3, #12]
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	601a      	str	r2, [r3, #0]
 801e5fe:	e013      	b.n	801e628 <tcp_pcb_remove+0x48>
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	60fb      	str	r3, [r7, #12]
 801e606:	e00c      	b.n	801e622 <tcp_pcb_remove+0x42>
 801e608:	68fb      	ldr	r3, [r7, #12]
 801e60a:	68da      	ldr	r2, [r3, #12]
 801e60c:	683b      	ldr	r3, [r7, #0]
 801e60e:	429a      	cmp	r2, r3
 801e610:	d104      	bne.n	801e61c <tcp_pcb_remove+0x3c>
 801e612:	683b      	ldr	r3, [r7, #0]
 801e614:	68da      	ldr	r2, [r3, #12]
 801e616:	68fb      	ldr	r3, [r7, #12]
 801e618:	60da      	str	r2, [r3, #12]
 801e61a:	e005      	b.n	801e628 <tcp_pcb_remove+0x48>
 801e61c:	68fb      	ldr	r3, [r7, #12]
 801e61e:	68db      	ldr	r3, [r3, #12]
 801e620:	60fb      	str	r3, [r7, #12]
 801e622:	68fb      	ldr	r3, [r7, #12]
 801e624:	2b00      	cmp	r3, #0
 801e626:	d1ef      	bne.n	801e608 <tcp_pcb_remove+0x28>
 801e628:	683b      	ldr	r3, [r7, #0]
 801e62a:	2200      	movs	r2, #0
 801e62c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801e62e:	6838      	ldr	r0, [r7, #0]
 801e630:	f7ff ff94 	bl	801e55c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 801e634:	683b      	ldr	r3, [r7, #0]
 801e636:	7d1b      	ldrb	r3, [r3, #20]
 801e638:	2b0a      	cmp	r3, #10
 801e63a:	d013      	beq.n	801e664 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 801e63c:	683b      	ldr	r3, [r7, #0]
 801e63e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 801e640:	2b01      	cmp	r3, #1
 801e642:	d00f      	beq.n	801e664 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 801e644:	683b      	ldr	r3, [r7, #0]
 801e646:	7e9b      	ldrb	r3, [r3, #26]
 801e648:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	d009      	beq.n	801e664 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 801e650:	683b      	ldr	r3, [r7, #0]
 801e652:	7e9b      	ldrb	r3, [r3, #26]
 801e654:	f043 0302 	orr.w	r3, r3, #2
 801e658:	b2da      	uxtb	r2, r3
 801e65a:	683b      	ldr	r3, [r7, #0]
 801e65c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801e65e:	6838      	ldr	r0, [r7, #0]
 801e660:	f003 f9c0 	bl	80219e4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801e664:	683b      	ldr	r3, [r7, #0]
 801e666:	7d1b      	ldrb	r3, [r3, #20]
 801e668:	2b01      	cmp	r3, #1
 801e66a:	d020      	beq.n	801e6ae <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801e66c:	683b      	ldr	r3, [r7, #0]
 801e66e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e670:	2b00      	cmp	r3, #0
 801e672:	d006      	beq.n	801e682 <tcp_pcb_remove+0xa2>
 801e674:	4b13      	ldr	r3, [pc, #76]	; (801e6c4 <tcp_pcb_remove+0xe4>)
 801e676:	f240 7253 	movw	r2, #1875	; 0x753
 801e67a:	4913      	ldr	r1, [pc, #76]	; (801e6c8 <tcp_pcb_remove+0xe8>)
 801e67c:	4813      	ldr	r0, [pc, #76]	; (801e6cc <tcp_pcb_remove+0xec>)
 801e67e:	f008 fed7 	bl	8027430 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801e682:	683b      	ldr	r3, [r7, #0]
 801e684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e686:	2b00      	cmp	r3, #0
 801e688:	d006      	beq.n	801e698 <tcp_pcb_remove+0xb8>
 801e68a:	4b0e      	ldr	r3, [pc, #56]	; (801e6c4 <tcp_pcb_remove+0xe4>)
 801e68c:	f240 7254 	movw	r2, #1876	; 0x754
 801e690:	490f      	ldr	r1, [pc, #60]	; (801e6d0 <tcp_pcb_remove+0xf0>)
 801e692:	480e      	ldr	r0, [pc, #56]	; (801e6cc <tcp_pcb_remove+0xec>)
 801e694:	f008 fecc 	bl	8027430 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801e698:	683b      	ldr	r3, [r7, #0]
 801e69a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	d006      	beq.n	801e6ae <tcp_pcb_remove+0xce>
 801e6a0:	4b08      	ldr	r3, [pc, #32]	; (801e6c4 <tcp_pcb_remove+0xe4>)
 801e6a2:	f240 7256 	movw	r2, #1878	; 0x756
 801e6a6:	490b      	ldr	r1, [pc, #44]	; (801e6d4 <tcp_pcb_remove+0xf4>)
 801e6a8:	4808      	ldr	r0, [pc, #32]	; (801e6cc <tcp_pcb_remove+0xec>)
 801e6aa:	f008 fec1 	bl	8027430 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801e6ae:	683b      	ldr	r3, [r7, #0]
 801e6b0:	2200      	movs	r2, #0
 801e6b2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801e6b4:	683b      	ldr	r3, [r7, #0]
 801e6b6:	2200      	movs	r2, #0
 801e6b8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801e6ba:	bf00      	nop
 801e6bc:	3710      	adds	r7, #16
 801e6be:	46bd      	mov	sp, r7
 801e6c0:	bd80      	pop	{r7, pc}
 801e6c2:	bf00      	nop
 801e6c4:	0802a7f4 	.word	0x0802a7f4
 801e6c8:	0802abac 	.word	0x0802abac
 801e6cc:	0802a830 	.word	0x0802a830
 801e6d0:	0802abc4 	.word	0x0802abc4
 801e6d4:	0802abe0 	.word	0x0802abe0

0801e6d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801e6d8:	b480      	push	{r7}
 801e6da:	b083      	sub	sp, #12
 801e6dc:	af00      	add	r7, sp, #0
 801e6de:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801e6e0:	4b07      	ldr	r3, [pc, #28]	; (801e700 <tcp_next_iss+0x28>)
 801e6e2:	681a      	ldr	r2, [r3, #0]
 801e6e4:	4b07      	ldr	r3, [pc, #28]	; (801e704 <tcp_next_iss+0x2c>)
 801e6e6:	681b      	ldr	r3, [r3, #0]
 801e6e8:	4413      	add	r3, r2
 801e6ea:	4a05      	ldr	r2, [pc, #20]	; (801e700 <tcp_next_iss+0x28>)
 801e6ec:	6013      	str	r3, [r2, #0]
  return iss;
 801e6ee:	4b04      	ldr	r3, [pc, #16]	; (801e700 <tcp_next_iss+0x28>)
 801e6f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801e6f2:	4618      	mov	r0, r3
 801e6f4:	370c      	adds	r7, #12
 801e6f6:	46bd      	mov	sp, r7
 801e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6fc:	4770      	bx	lr
 801e6fe:	bf00      	nop
 801e700:	2000000c 	.word	0x2000000c
 801e704:	2000ece0 	.word	0x2000ece0

0801e708 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 801e708:	b580      	push	{r7, lr}
 801e70a:	b084      	sub	sp, #16
 801e70c:	af00      	add	r7, sp, #0
 801e70e:	4603      	mov	r3, r0
 801e710:	6039      	str	r1, [r7, #0]
 801e712:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 801e714:	6838      	ldr	r0, [r7, #0]
 801e716:	f7fb fe67 	bl	801a3e8 <ip4_route>
 801e71a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801e71c:	68fb      	ldr	r3, [r7, #12]
 801e71e:	2b00      	cmp	r3, #0
 801e720:	d101      	bne.n	801e726 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 801e722:	88fb      	ldrh	r3, [r7, #6]
 801e724:	e010      	b.n	801e748 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 801e726:	68fb      	ldr	r3, [r7, #12]
 801e728:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e72a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801e72c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801e730:	2b00      	cmp	r3, #0
 801e732:	d008      	beq.n	801e746 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 801e734:	897b      	ldrh	r3, [r7, #10]
 801e736:	3b28      	subs	r3, #40	; 0x28
 801e738:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801e73a:	893a      	ldrh	r2, [r7, #8]
 801e73c:	88fb      	ldrh	r3, [r7, #6]
 801e73e:	4293      	cmp	r3, r2
 801e740:	bf28      	it	cs
 801e742:	4613      	movcs	r3, r2
 801e744:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 801e746:	88fb      	ldrh	r3, [r7, #6]
}
 801e748:	4618      	mov	r0, r3
 801e74a:	3710      	adds	r7, #16
 801e74c:	46bd      	mov	sp, r7
 801e74e:	bd80      	pop	{r7, pc}

0801e750 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 801e750:	b580      	push	{r7, lr}
 801e752:	b084      	sub	sp, #16
 801e754:	af00      	add	r7, sp, #0
 801e756:	6078      	str	r0, [r7, #4]
 801e758:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801e75a:	683b      	ldr	r3, [r7, #0]
 801e75c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801e75e:	e011      	b.n	801e784 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801e760:	68fb      	ldr	r3, [r7, #12]
 801e762:	681a      	ldr	r2, [r3, #0]
 801e764:	687b      	ldr	r3, [r7, #4]
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	429a      	cmp	r2, r3
 801e76a:	d108      	bne.n	801e77e <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801e76c:	68fb      	ldr	r3, [r7, #12]
 801e76e:	68db      	ldr	r3, [r3, #12]
 801e770:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801e772:	68f8      	ldr	r0, [r7, #12]
 801e774:	f7fe fec8 	bl	801d508 <tcp_abort>
      pcb = next;
 801e778:	68bb      	ldr	r3, [r7, #8]
 801e77a:	60fb      	str	r3, [r7, #12]
 801e77c:	e002      	b.n	801e784 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 801e77e:	68fb      	ldr	r3, [r7, #12]
 801e780:	68db      	ldr	r3, [r3, #12]
 801e782:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801e784:	68fb      	ldr	r3, [r7, #12]
 801e786:	2b00      	cmp	r3, #0
 801e788:	d1ea      	bne.n	801e760 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 801e78a:	bf00      	nop
 801e78c:	3710      	adds	r7, #16
 801e78e:	46bd      	mov	sp, r7
 801e790:	bd80      	pop	{r7, pc}
	...

0801e794 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801e794:	b580      	push	{r7, lr}
 801e796:	b084      	sub	sp, #16
 801e798:	af00      	add	r7, sp, #0
 801e79a:	6078      	str	r0, [r7, #4]
 801e79c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	d02c      	beq.n	801e7fe <tcp_netif_ip_addr_changed+0x6a>
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	d028      	beq.n	801e7fe <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801e7ac:	4b16      	ldr	r3, [pc, #88]	; (801e808 <tcp_netif_ip_addr_changed+0x74>)
 801e7ae:	681b      	ldr	r3, [r3, #0]
 801e7b0:	4619      	mov	r1, r3
 801e7b2:	6878      	ldr	r0, [r7, #4]
 801e7b4:	f7ff ffcc 	bl	801e750 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801e7b8:	4b14      	ldr	r3, [pc, #80]	; (801e80c <tcp_netif_ip_addr_changed+0x78>)
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	4619      	mov	r1, r3
 801e7be:	6878      	ldr	r0, [r7, #4]
 801e7c0:	f7ff ffc6 	bl	801e750 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801e7c4:	683b      	ldr	r3, [r7, #0]
 801e7c6:	2b00      	cmp	r3, #0
 801e7c8:	d019      	beq.n	801e7fe <tcp_netif_ip_addr_changed+0x6a>
 801e7ca:	683b      	ldr	r3, [r7, #0]
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d015      	beq.n	801e7fe <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801e7d2:	4b0f      	ldr	r3, [pc, #60]	; (801e810 <tcp_netif_ip_addr_changed+0x7c>)
 801e7d4:	681b      	ldr	r3, [r3, #0]
 801e7d6:	60fb      	str	r3, [r7, #12]
 801e7d8:	e00e      	b.n	801e7f8 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	68db      	ldr	r3, [r3, #12]
 801e7de:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	681a      	ldr	r2, [r3, #0]
 801e7e4:	687b      	ldr	r3, [r7, #4]
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	429a      	cmp	r2, r3
 801e7ea:	d103      	bne.n	801e7f4 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801e7ec:	683b      	ldr	r3, [r7, #0]
 801e7ee:	681a      	ldr	r2, [r3, #0]
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801e7f4:	68bb      	ldr	r3, [r7, #8]
 801e7f6:	60fb      	str	r3, [r7, #12]
 801e7f8:	68fb      	ldr	r3, [r7, #12]
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d1ed      	bne.n	801e7da <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801e7fe:	bf00      	nop
 801e800:	3710      	adds	r7, #16
 801e802:	46bd      	mov	sp, r7
 801e804:	bd80      	pop	{r7, pc}
 801e806:	bf00      	nop
 801e808:	2000ecdc 	.word	0x2000ecdc
 801e80c:	2000ece8 	.word	0x2000ece8
 801e810:	2000ece4 	.word	0x2000ece4

0801e814 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801e814:	b590      	push	{r4, r7, lr}
 801e816:	b08b      	sub	sp, #44	; 0x2c
 801e818:	af02      	add	r7, sp, #8
 801e81a:	6078      	str	r0, [r7, #4]
 801e81c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	685b      	ldr	r3, [r3, #4]
 801e822:	4a82      	ldr	r2, [pc, #520]	; (801ea2c <tcp_input+0x218>)
 801e824:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801e826:	687b      	ldr	r3, [r7, #4]
 801e828:	895b      	ldrh	r3, [r3, #10]
 801e82a:	2b13      	cmp	r3, #19
 801e82c:	f240 8388 	bls.w	801ef40 <tcp_input+0x72c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801e830:	4b7f      	ldr	r3, [pc, #508]	; (801ea30 <tcp_input+0x21c>)
 801e832:	695a      	ldr	r2, [r3, #20]
 801e834:	4b7e      	ldr	r3, [pc, #504]	; (801ea30 <tcp_input+0x21c>)
 801e836:	681b      	ldr	r3, [r3, #0]
 801e838:	4619      	mov	r1, r3
 801e83a:	4610      	mov	r0, r2
 801e83c:	f7fc f842 	bl	801a8c4 <ip4_addr_isbroadcast_u32>
 801e840:	4603      	mov	r3, r0
 801e842:	2b00      	cmp	r3, #0
 801e844:	f040 837f 	bne.w	801ef46 <tcp_input+0x732>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801e848:	4b79      	ldr	r3, [pc, #484]	; (801ea30 <tcp_input+0x21c>)
 801e84a:	695b      	ldr	r3, [r3, #20]
 801e84c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801e850:	2be0      	cmp	r3, #224	; 0xe0
 801e852:	f000 8378 	beq.w	801ef46 <tcp_input+0x732>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801e856:	4b75      	ldr	r3, [pc, #468]	; (801ea2c <tcp_input+0x218>)
 801e858:	681b      	ldr	r3, [r3, #0]
 801e85a:	899b      	ldrh	r3, [r3, #12]
 801e85c:	b29b      	uxth	r3, r3
 801e85e:	4618      	mov	r0, r3
 801e860:	f7fa fce2 	bl	8019228 <lwip_htons>
 801e864:	4603      	mov	r3, r0
 801e866:	0b1b      	lsrs	r3, r3, #12
 801e868:	b29b      	uxth	r3, r3
 801e86a:	b2db      	uxtb	r3, r3
 801e86c:	009b      	lsls	r3, r3, #2
 801e86e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801e870:	7cbb      	ldrb	r3, [r7, #18]
 801e872:	2b13      	cmp	r3, #19
 801e874:	f240 8367 	bls.w	801ef46 <tcp_input+0x732>
 801e878:	7cbb      	ldrb	r3, [r7, #18]
 801e87a:	b29a      	uxth	r2, r3
 801e87c:	687b      	ldr	r3, [r7, #4]
 801e87e:	891b      	ldrh	r3, [r3, #8]
 801e880:	429a      	cmp	r2, r3
 801e882:	f200 8360 	bhi.w	801ef46 <tcp_input+0x732>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801e886:	7cbb      	ldrb	r3, [r7, #18]
 801e888:	b29b      	uxth	r3, r3
 801e88a:	3b14      	subs	r3, #20
 801e88c:	b29a      	uxth	r2, r3
 801e88e:	4b69      	ldr	r3, [pc, #420]	; (801ea34 <tcp_input+0x220>)
 801e890:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801e892:	4b69      	ldr	r3, [pc, #420]	; (801ea38 <tcp_input+0x224>)
 801e894:	2200      	movs	r2, #0
 801e896:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801e898:	687b      	ldr	r3, [r7, #4]
 801e89a:	895a      	ldrh	r2, [r3, #10]
 801e89c:	7cbb      	ldrb	r3, [r7, #18]
 801e89e:	b29b      	uxth	r3, r3
 801e8a0:	429a      	cmp	r2, r3
 801e8a2:	d30d      	bcc.n	801e8c0 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801e8a4:	4b63      	ldr	r3, [pc, #396]	; (801ea34 <tcp_input+0x220>)
 801e8a6:	881a      	ldrh	r2, [r3, #0]
 801e8a8:	4b64      	ldr	r3, [pc, #400]	; (801ea3c <tcp_input+0x228>)
 801e8aa:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 801e8ac:	7cbb      	ldrb	r3, [r7, #18]
 801e8ae:	b29b      	uxth	r3, r3
 801e8b0:	425b      	negs	r3, r3
 801e8b2:	b29b      	uxth	r3, r3
 801e8b4:	b21b      	sxth	r3, r3
 801e8b6:	4619      	mov	r1, r3
 801e8b8:	6878      	ldr	r0, [r7, #4]
 801e8ba:	f7fe f8bb 	bl	801ca34 <pbuf_header>
 801e8be:	e055      	b.n	801e96c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801e8c0:	687b      	ldr	r3, [r7, #4]
 801e8c2:	681b      	ldr	r3, [r3, #0]
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	d105      	bne.n	801e8d4 <tcp_input+0xc0>
 801e8c8:	4b5d      	ldr	r3, [pc, #372]	; (801ea40 <tcp_input+0x22c>)
 801e8ca:	22b2      	movs	r2, #178	; 0xb2
 801e8cc:	495d      	ldr	r1, [pc, #372]	; (801ea44 <tcp_input+0x230>)
 801e8ce:	485e      	ldr	r0, [pc, #376]	; (801ea48 <tcp_input+0x234>)
 801e8d0:	f008 fdae 	bl	8027430 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801e8d4:	f06f 0113 	mvn.w	r1, #19
 801e8d8:	6878      	ldr	r0, [r7, #4]
 801e8da:	f7fe f8ab 	bl	801ca34 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801e8de:	687b      	ldr	r3, [r7, #4]
 801e8e0:	895a      	ldrh	r2, [r3, #10]
 801e8e2:	4b56      	ldr	r3, [pc, #344]	; (801ea3c <tcp_input+0x228>)
 801e8e4:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801e8e6:	4b53      	ldr	r3, [pc, #332]	; (801ea34 <tcp_input+0x220>)
 801e8e8:	881a      	ldrh	r2, [r3, #0]
 801e8ea:	4b54      	ldr	r3, [pc, #336]	; (801ea3c <tcp_input+0x228>)
 801e8ec:	881b      	ldrh	r3, [r3, #0]
 801e8ee:	1ad3      	subs	r3, r2, r3
 801e8f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801e8f2:	4b52      	ldr	r3, [pc, #328]	; (801ea3c <tcp_input+0x228>)
 801e8f4:	881b      	ldrh	r3, [r3, #0]
 801e8f6:	425b      	negs	r3, r3
 801e8f8:	b29b      	uxth	r3, r3
 801e8fa:	b21b      	sxth	r3, r3
 801e8fc:	4619      	mov	r1, r3
 801e8fe:	6878      	ldr	r0, [r7, #4]
 801e900:	f7fe f898 	bl	801ca34 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	895b      	ldrh	r3, [r3, #10]
 801e90a:	8a3a      	ldrh	r2, [r7, #16]
 801e90c:	429a      	cmp	r2, r3
 801e90e:	f200 8319 	bhi.w	801ef44 <tcp_input+0x730>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	681b      	ldr	r3, [r3, #0]
 801e916:	685b      	ldr	r3, [r3, #4]
 801e918:	4a47      	ldr	r2, [pc, #284]	; (801ea38 <tcp_input+0x224>)
 801e91a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	681a      	ldr	r2, [r3, #0]
 801e920:	8a3b      	ldrh	r3, [r7, #16]
 801e922:	425b      	negs	r3, r3
 801e924:	b29b      	uxth	r3, r3
 801e926:	b21b      	sxth	r3, r3
 801e928:	4619      	mov	r1, r3
 801e92a:	4610      	mov	r0, r2
 801e92c:	f7fe f882 	bl	801ca34 <pbuf_header>
    p->tot_len -= opt2len;
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	891a      	ldrh	r2, [r3, #8]
 801e934:	8a3b      	ldrh	r3, [r7, #16]
 801e936:	1ad3      	subs	r3, r2, r3
 801e938:	b29a      	uxth	r2, r3
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801e93e:	687b      	ldr	r3, [r7, #4]
 801e940:	895b      	ldrh	r3, [r3, #10]
 801e942:	2b00      	cmp	r3, #0
 801e944:	d005      	beq.n	801e952 <tcp_input+0x13e>
 801e946:	4b3e      	ldr	r3, [pc, #248]	; (801ea40 <tcp_input+0x22c>)
 801e948:	22cf      	movs	r2, #207	; 0xcf
 801e94a:	4940      	ldr	r1, [pc, #256]	; (801ea4c <tcp_input+0x238>)
 801e94c:	483e      	ldr	r0, [pc, #248]	; (801ea48 <tcp_input+0x234>)
 801e94e:	f008 fd6f 	bl	8027430 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	891a      	ldrh	r2, [r3, #8]
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	681b      	ldr	r3, [r3, #0]
 801e95a:	891b      	ldrh	r3, [r3, #8]
 801e95c:	429a      	cmp	r2, r3
 801e95e:	d005      	beq.n	801e96c <tcp_input+0x158>
 801e960:	4b37      	ldr	r3, [pc, #220]	; (801ea40 <tcp_input+0x22c>)
 801e962:	22d0      	movs	r2, #208	; 0xd0
 801e964:	493a      	ldr	r1, [pc, #232]	; (801ea50 <tcp_input+0x23c>)
 801e966:	4838      	ldr	r0, [pc, #224]	; (801ea48 <tcp_input+0x234>)
 801e968:	f008 fd62 	bl	8027430 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801e96c:	4b2f      	ldr	r3, [pc, #188]	; (801ea2c <tcp_input+0x218>)
 801e96e:	681c      	ldr	r4, [r3, #0]
 801e970:	4b2e      	ldr	r3, [pc, #184]	; (801ea2c <tcp_input+0x218>)
 801e972:	681b      	ldr	r3, [r3, #0]
 801e974:	881b      	ldrh	r3, [r3, #0]
 801e976:	b29b      	uxth	r3, r3
 801e978:	4618      	mov	r0, r3
 801e97a:	f7fa fc55 	bl	8019228 <lwip_htons>
 801e97e:	4603      	mov	r3, r0
 801e980:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801e982:	4b2a      	ldr	r3, [pc, #168]	; (801ea2c <tcp_input+0x218>)
 801e984:	681c      	ldr	r4, [r3, #0]
 801e986:	4b29      	ldr	r3, [pc, #164]	; (801ea2c <tcp_input+0x218>)
 801e988:	681b      	ldr	r3, [r3, #0]
 801e98a:	885b      	ldrh	r3, [r3, #2]
 801e98c:	b29b      	uxth	r3, r3
 801e98e:	4618      	mov	r0, r3
 801e990:	f7fa fc4a 	bl	8019228 <lwip_htons>
 801e994:	4603      	mov	r3, r0
 801e996:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801e998:	4b24      	ldr	r3, [pc, #144]	; (801ea2c <tcp_input+0x218>)
 801e99a:	681c      	ldr	r4, [r3, #0]
 801e99c:	4b23      	ldr	r3, [pc, #140]	; (801ea2c <tcp_input+0x218>)
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	685b      	ldr	r3, [r3, #4]
 801e9a2:	4618      	mov	r0, r3
 801e9a4:	f7fa fc4e 	bl	8019244 <lwip_htonl>
 801e9a8:	4603      	mov	r3, r0
 801e9aa:	6063      	str	r3, [r4, #4]
 801e9ac:	6863      	ldr	r3, [r4, #4]
 801e9ae:	4a29      	ldr	r2, [pc, #164]	; (801ea54 <tcp_input+0x240>)
 801e9b0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801e9b2:	4b1e      	ldr	r3, [pc, #120]	; (801ea2c <tcp_input+0x218>)
 801e9b4:	681c      	ldr	r4, [r3, #0]
 801e9b6:	4b1d      	ldr	r3, [pc, #116]	; (801ea2c <tcp_input+0x218>)
 801e9b8:	681b      	ldr	r3, [r3, #0]
 801e9ba:	689b      	ldr	r3, [r3, #8]
 801e9bc:	4618      	mov	r0, r3
 801e9be:	f7fa fc41 	bl	8019244 <lwip_htonl>
 801e9c2:	4603      	mov	r3, r0
 801e9c4:	60a3      	str	r3, [r4, #8]
 801e9c6:	68a3      	ldr	r3, [r4, #8]
 801e9c8:	4a23      	ldr	r2, [pc, #140]	; (801ea58 <tcp_input+0x244>)
 801e9ca:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801e9cc:	4b17      	ldr	r3, [pc, #92]	; (801ea2c <tcp_input+0x218>)
 801e9ce:	681c      	ldr	r4, [r3, #0]
 801e9d0:	4b16      	ldr	r3, [pc, #88]	; (801ea2c <tcp_input+0x218>)
 801e9d2:	681b      	ldr	r3, [r3, #0]
 801e9d4:	89db      	ldrh	r3, [r3, #14]
 801e9d6:	b29b      	uxth	r3, r3
 801e9d8:	4618      	mov	r0, r3
 801e9da:	f7fa fc25 	bl	8019228 <lwip_htons>
 801e9de:	4603      	mov	r3, r0
 801e9e0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801e9e2:	4b12      	ldr	r3, [pc, #72]	; (801ea2c <tcp_input+0x218>)
 801e9e4:	681b      	ldr	r3, [r3, #0]
 801e9e6:	899b      	ldrh	r3, [r3, #12]
 801e9e8:	b29b      	uxth	r3, r3
 801e9ea:	4618      	mov	r0, r3
 801e9ec:	f7fa fc1c 	bl	8019228 <lwip_htons>
 801e9f0:	4603      	mov	r3, r0
 801e9f2:	b2db      	uxtb	r3, r3
 801e9f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e9f8:	b2da      	uxtb	r2, r3
 801e9fa:	4b18      	ldr	r3, [pc, #96]	; (801ea5c <tcp_input+0x248>)
 801e9fc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	891a      	ldrh	r2, [r3, #8]
 801ea02:	4b16      	ldr	r3, [pc, #88]	; (801ea5c <tcp_input+0x248>)
 801ea04:	781b      	ldrb	r3, [r3, #0]
 801ea06:	f003 0303 	and.w	r3, r3, #3
 801ea0a:	2b00      	cmp	r3, #0
 801ea0c:	bf14      	ite	ne
 801ea0e:	2301      	movne	r3, #1
 801ea10:	2300      	moveq	r3, #0
 801ea12:	b2db      	uxtb	r3, r3
 801ea14:	b29b      	uxth	r3, r3
 801ea16:	4413      	add	r3, r2
 801ea18:	b29a      	uxth	r2, r3
 801ea1a:	4b11      	ldr	r3, [pc, #68]	; (801ea60 <tcp_input+0x24c>)
 801ea1c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801ea1e:	2300      	movs	r3, #0
 801ea20:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ea22:	4b10      	ldr	r3, [pc, #64]	; (801ea64 <tcp_input+0x250>)
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	61fb      	str	r3, [r7, #28]
 801ea28:	e082      	b.n	801eb30 <tcp_input+0x31c>
 801ea2a:	bf00      	nop
 801ea2c:	20009504 	.word	0x20009504
 801ea30:	2000a278 	.word	0x2000a278
 801ea34:	20009508 	.word	0x20009508
 801ea38:	2000950c 	.word	0x2000950c
 801ea3c:	2000950a 	.word	0x2000950a
 801ea40:	0802abf8 	.word	0x0802abf8
 801ea44:	0802ac2c 	.word	0x0802ac2c
 801ea48:	0802ac3c 	.word	0x0802ac3c
 801ea4c:	0802ac64 	.word	0x0802ac64
 801ea50:	0802ac70 	.word	0x0802ac70
 801ea54:	20009514 	.word	0x20009514
 801ea58:	20009518 	.word	0x20009518
 801ea5c:	20009520 	.word	0x20009520
 801ea60:	2000951e 	.word	0x2000951e
 801ea64:	2000ecdc 	.word	0x2000ecdc
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ea68:	69fb      	ldr	r3, [r7, #28]
 801ea6a:	7d1b      	ldrb	r3, [r3, #20]
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d105      	bne.n	801ea7c <tcp_input+0x268>
 801ea70:	4b8f      	ldr	r3, [pc, #572]	; (801ecb0 <tcp_input+0x49c>)
 801ea72:	22e2      	movs	r2, #226	; 0xe2
 801ea74:	498f      	ldr	r1, [pc, #572]	; (801ecb4 <tcp_input+0x4a0>)
 801ea76:	4890      	ldr	r0, [pc, #576]	; (801ecb8 <tcp_input+0x4a4>)
 801ea78:	f008 fcda 	bl	8027430 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ea7c:	69fb      	ldr	r3, [r7, #28]
 801ea7e:	7d1b      	ldrb	r3, [r3, #20]
 801ea80:	2b0a      	cmp	r3, #10
 801ea82:	d105      	bne.n	801ea90 <tcp_input+0x27c>
 801ea84:	4b8a      	ldr	r3, [pc, #552]	; (801ecb0 <tcp_input+0x49c>)
 801ea86:	22e3      	movs	r2, #227	; 0xe3
 801ea88:	498c      	ldr	r1, [pc, #560]	; (801ecbc <tcp_input+0x4a8>)
 801ea8a:	488b      	ldr	r0, [pc, #556]	; (801ecb8 <tcp_input+0x4a4>)
 801ea8c:	f008 fcd0 	bl	8027430 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801ea90:	69fb      	ldr	r3, [r7, #28]
 801ea92:	7d1b      	ldrb	r3, [r3, #20]
 801ea94:	2b01      	cmp	r3, #1
 801ea96:	d105      	bne.n	801eaa4 <tcp_input+0x290>
 801ea98:	4b85      	ldr	r3, [pc, #532]	; (801ecb0 <tcp_input+0x49c>)
 801ea9a:	22e4      	movs	r2, #228	; 0xe4
 801ea9c:	4988      	ldr	r1, [pc, #544]	; (801ecc0 <tcp_input+0x4ac>)
 801ea9e:	4886      	ldr	r0, [pc, #536]	; (801ecb8 <tcp_input+0x4a4>)
 801eaa0:	f008 fcc6 	bl	8027430 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 801eaa4:	69fb      	ldr	r3, [r7, #28]
 801eaa6:	8b1a      	ldrh	r2, [r3, #24]
 801eaa8:	4b86      	ldr	r3, [pc, #536]	; (801ecc4 <tcp_input+0x4b0>)
 801eaaa:	681b      	ldr	r3, [r3, #0]
 801eaac:	881b      	ldrh	r3, [r3, #0]
 801eaae:	b29b      	uxth	r3, r3
 801eab0:	429a      	cmp	r2, r3
 801eab2:	d138      	bne.n	801eb26 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 801eab4:	69fb      	ldr	r3, [r7, #28]
 801eab6:	8ada      	ldrh	r2, [r3, #22]
 801eab8:	4b82      	ldr	r3, [pc, #520]	; (801ecc4 <tcp_input+0x4b0>)
 801eaba:	681b      	ldr	r3, [r3, #0]
 801eabc:	885b      	ldrh	r3, [r3, #2]
 801eabe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801eac0:	429a      	cmp	r2, r3
 801eac2:	d130      	bne.n	801eb26 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801eac4:	69fb      	ldr	r3, [r7, #28]
 801eac6:	685a      	ldr	r2, [r3, #4]
 801eac8:	4b7f      	ldr	r3, [pc, #508]	; (801ecc8 <tcp_input+0x4b4>)
 801eaca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801eacc:	429a      	cmp	r2, r3
 801eace:	d12a      	bne.n	801eb26 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ead0:	69fb      	ldr	r3, [r7, #28]
 801ead2:	681a      	ldr	r2, [r3, #0]
 801ead4:	4b7c      	ldr	r3, [pc, #496]	; (801ecc8 <tcp_input+0x4b4>)
 801ead6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ead8:	429a      	cmp	r2, r3
 801eada:	d124      	bne.n	801eb26 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801eadc:	69fb      	ldr	r3, [r7, #28]
 801eade:	68da      	ldr	r2, [r3, #12]
 801eae0:	69fb      	ldr	r3, [r7, #28]
 801eae2:	429a      	cmp	r2, r3
 801eae4:	d105      	bne.n	801eaf2 <tcp_input+0x2de>
 801eae6:	4b72      	ldr	r3, [pc, #456]	; (801ecb0 <tcp_input+0x49c>)
 801eae8:	22ec      	movs	r2, #236	; 0xec
 801eaea:	4978      	ldr	r1, [pc, #480]	; (801eccc <tcp_input+0x4b8>)
 801eaec:	4872      	ldr	r0, [pc, #456]	; (801ecb8 <tcp_input+0x4a4>)
 801eaee:	f008 fc9f 	bl	8027430 <iprintf>
      if (prev != NULL) {
 801eaf2:	69bb      	ldr	r3, [r7, #24]
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	d00a      	beq.n	801eb0e <tcp_input+0x2fa>
        prev->next = pcb->next;
 801eaf8:	69fb      	ldr	r3, [r7, #28]
 801eafa:	68da      	ldr	r2, [r3, #12]
 801eafc:	69bb      	ldr	r3, [r7, #24]
 801eafe:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801eb00:	4b73      	ldr	r3, [pc, #460]	; (801ecd0 <tcp_input+0x4bc>)
 801eb02:	681a      	ldr	r2, [r3, #0]
 801eb04:	69fb      	ldr	r3, [r7, #28]
 801eb06:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801eb08:	4a71      	ldr	r2, [pc, #452]	; (801ecd0 <tcp_input+0x4bc>)
 801eb0a:	69fb      	ldr	r3, [r7, #28]
 801eb0c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801eb0e:	69fb      	ldr	r3, [r7, #28]
 801eb10:	68da      	ldr	r2, [r3, #12]
 801eb12:	69fb      	ldr	r3, [r7, #28]
 801eb14:	429a      	cmp	r2, r3
 801eb16:	d10f      	bne.n	801eb38 <tcp_input+0x324>
 801eb18:	4b65      	ldr	r3, [pc, #404]	; (801ecb0 <tcp_input+0x49c>)
 801eb1a:	22f4      	movs	r2, #244	; 0xf4
 801eb1c:	496d      	ldr	r1, [pc, #436]	; (801ecd4 <tcp_input+0x4c0>)
 801eb1e:	4866      	ldr	r0, [pc, #408]	; (801ecb8 <tcp_input+0x4a4>)
 801eb20:	f008 fc86 	bl	8027430 <iprintf>
      break;
 801eb24:	e008      	b.n	801eb38 <tcp_input+0x324>
    }
    prev = pcb;
 801eb26:	69fb      	ldr	r3, [r7, #28]
 801eb28:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801eb2a:	69fb      	ldr	r3, [r7, #28]
 801eb2c:	68db      	ldr	r3, [r3, #12]
 801eb2e:	61fb      	str	r3, [r7, #28]
 801eb30:	69fb      	ldr	r3, [r7, #28]
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	d198      	bne.n	801ea68 <tcp_input+0x254>
 801eb36:	e000      	b.n	801eb3a <tcp_input+0x326>
      break;
 801eb38:	bf00      	nop
  }

  if (pcb == NULL) {
 801eb3a:	69fb      	ldr	r3, [r7, #28]
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	d173      	bne.n	801ec28 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801eb40:	4b65      	ldr	r3, [pc, #404]	; (801ecd8 <tcp_input+0x4c4>)
 801eb42:	681b      	ldr	r3, [r3, #0]
 801eb44:	61fb      	str	r3, [r7, #28]
 801eb46:	e02f      	b.n	801eba8 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801eb48:	69fb      	ldr	r3, [r7, #28]
 801eb4a:	7d1b      	ldrb	r3, [r3, #20]
 801eb4c:	2b0a      	cmp	r3, #10
 801eb4e:	d005      	beq.n	801eb5c <tcp_input+0x348>
 801eb50:	4b57      	ldr	r3, [pc, #348]	; (801ecb0 <tcp_input+0x49c>)
 801eb52:	22fe      	movs	r2, #254	; 0xfe
 801eb54:	4961      	ldr	r1, [pc, #388]	; (801ecdc <tcp_input+0x4c8>)
 801eb56:	4858      	ldr	r0, [pc, #352]	; (801ecb8 <tcp_input+0x4a4>)
 801eb58:	f008 fc6a 	bl	8027430 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 801eb5c:	69fb      	ldr	r3, [r7, #28]
 801eb5e:	8b1a      	ldrh	r2, [r3, #24]
 801eb60:	4b58      	ldr	r3, [pc, #352]	; (801ecc4 <tcp_input+0x4b0>)
 801eb62:	681b      	ldr	r3, [r3, #0]
 801eb64:	881b      	ldrh	r3, [r3, #0]
 801eb66:	b29b      	uxth	r3, r3
 801eb68:	429a      	cmp	r2, r3
 801eb6a:	d11a      	bne.n	801eba2 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 801eb6c:	69fb      	ldr	r3, [r7, #28]
 801eb6e:	8ada      	ldrh	r2, [r3, #22]
 801eb70:	4b54      	ldr	r3, [pc, #336]	; (801ecc4 <tcp_input+0x4b0>)
 801eb72:	681b      	ldr	r3, [r3, #0]
 801eb74:	885b      	ldrh	r3, [r3, #2]
 801eb76:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801eb78:	429a      	cmp	r2, r3
 801eb7a:	d112      	bne.n	801eba2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801eb7c:	69fb      	ldr	r3, [r7, #28]
 801eb7e:	685a      	ldr	r2, [r3, #4]
 801eb80:	4b51      	ldr	r3, [pc, #324]	; (801ecc8 <tcp_input+0x4b4>)
 801eb82:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801eb84:	429a      	cmp	r2, r3
 801eb86:	d10c      	bne.n	801eba2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801eb88:	69fb      	ldr	r3, [r7, #28]
 801eb8a:	681a      	ldr	r2, [r3, #0]
 801eb8c:	4b4e      	ldr	r3, [pc, #312]	; (801ecc8 <tcp_input+0x4b4>)
 801eb8e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801eb90:	429a      	cmp	r2, r3
 801eb92:	d106      	bne.n	801eba2 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 801eb94:	69f8      	ldr	r0, [r7, #28]
 801eb96:	f000 fb11 	bl	801f1bc <tcp_timewait_input>
        pbuf_free(p);
 801eb9a:	6878      	ldr	r0, [r7, #4]
 801eb9c:	f7fd ff6e 	bl	801ca7c <pbuf_free>
        return;
 801eba0:	e1d6      	b.n	801ef50 <tcp_input+0x73c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801eba2:	69fb      	ldr	r3, [r7, #28]
 801eba4:	68db      	ldr	r3, [r3, #12]
 801eba6:	61fb      	str	r3, [r7, #28]
 801eba8:	69fb      	ldr	r3, [r7, #28]
 801ebaa:	2b00      	cmp	r3, #0
 801ebac:	d1cc      	bne.n	801eb48 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801ebae:	2300      	movs	r3, #0
 801ebb0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ebb2:	4b4b      	ldr	r3, [pc, #300]	; (801ece0 <tcp_input+0x4cc>)
 801ebb4:	681b      	ldr	r3, [r3, #0]
 801ebb6:	617b      	str	r3, [r7, #20]
 801ebb8:	e019      	b.n	801ebee <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 801ebba:	697b      	ldr	r3, [r7, #20]
 801ebbc:	8ada      	ldrh	r2, [r3, #22]
 801ebbe:	4b41      	ldr	r3, [pc, #260]	; (801ecc4 <tcp_input+0x4b0>)
 801ebc0:	681b      	ldr	r3, [r3, #0]
 801ebc2:	885b      	ldrh	r3, [r3, #2]
 801ebc4:	b29b      	uxth	r3, r3
 801ebc6:	429a      	cmp	r2, r3
 801ebc8:	d10c      	bne.n	801ebe4 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801ebca:	697b      	ldr	r3, [r7, #20]
 801ebcc:	681a      	ldr	r2, [r3, #0]
 801ebce:	4b3e      	ldr	r3, [pc, #248]	; (801ecc8 <tcp_input+0x4b4>)
 801ebd0:	695b      	ldr	r3, [r3, #20]
 801ebd2:	429a      	cmp	r2, r3
 801ebd4:	d00f      	beq.n	801ebf6 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801ebd6:	697b      	ldr	r3, [r7, #20]
 801ebd8:	2b00      	cmp	r3, #0
 801ebda:	d00d      	beq.n	801ebf8 <tcp_input+0x3e4>
 801ebdc:	697b      	ldr	r3, [r7, #20]
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d009      	beq.n	801ebf8 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801ebe4:	697b      	ldr	r3, [r7, #20]
 801ebe6:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ebe8:	697b      	ldr	r3, [r7, #20]
 801ebea:	68db      	ldr	r3, [r3, #12]
 801ebec:	617b      	str	r3, [r7, #20]
 801ebee:	697b      	ldr	r3, [r7, #20]
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d1e2      	bne.n	801ebba <tcp_input+0x3a6>
 801ebf4:	e000      	b.n	801ebf8 <tcp_input+0x3e4>
            break;
 801ebf6:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801ebf8:	697b      	ldr	r3, [r7, #20]
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d014      	beq.n	801ec28 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801ebfe:	69bb      	ldr	r3, [r7, #24]
 801ec00:	2b00      	cmp	r3, #0
 801ec02:	d00a      	beq.n	801ec1a <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801ec04:	697b      	ldr	r3, [r7, #20]
 801ec06:	68da      	ldr	r2, [r3, #12]
 801ec08:	69bb      	ldr	r3, [r7, #24]
 801ec0a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801ec0c:	4b34      	ldr	r3, [pc, #208]	; (801ece0 <tcp_input+0x4cc>)
 801ec0e:	681a      	ldr	r2, [r3, #0]
 801ec10:	697b      	ldr	r3, [r7, #20]
 801ec12:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801ec14:	4a32      	ldr	r2, [pc, #200]	; (801ece0 <tcp_input+0x4cc>)
 801ec16:	697b      	ldr	r3, [r7, #20]
 801ec18:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 801ec1a:	6978      	ldr	r0, [r7, #20]
 801ec1c:	f000 f9ec 	bl	801eff8 <tcp_listen_input>
      pbuf_free(p);
 801ec20:	6878      	ldr	r0, [r7, #4]
 801ec22:	f7fd ff2b 	bl	801ca7c <pbuf_free>
      return;
 801ec26:	e193      	b.n	801ef50 <tcp_input+0x73c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 801ec28:	69fb      	ldr	r3, [r7, #28]
 801ec2a:	2b00      	cmp	r3, #0
 801ec2c:	f000 8162 	beq.w	801eef4 <tcp_input+0x6e0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801ec30:	4b2c      	ldr	r3, [pc, #176]	; (801ece4 <tcp_input+0x4d0>)
 801ec32:	2200      	movs	r2, #0
 801ec34:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801ec36:	687b      	ldr	r3, [r7, #4]
 801ec38:	891a      	ldrh	r2, [r3, #8]
 801ec3a:	4b2a      	ldr	r3, [pc, #168]	; (801ece4 <tcp_input+0x4d0>)
 801ec3c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801ec3e:	4a29      	ldr	r2, [pc, #164]	; (801ece4 <tcp_input+0x4d0>)
 801ec40:	687b      	ldr	r3, [r7, #4]
 801ec42:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801ec44:	4b1f      	ldr	r3, [pc, #124]	; (801ecc4 <tcp_input+0x4b0>)
 801ec46:	681b      	ldr	r3, [r3, #0]
 801ec48:	4a26      	ldr	r2, [pc, #152]	; (801ece4 <tcp_input+0x4d0>)
 801ec4a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801ec4c:	4b26      	ldr	r3, [pc, #152]	; (801ece8 <tcp_input+0x4d4>)
 801ec4e:	2200      	movs	r2, #0
 801ec50:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801ec52:	4b26      	ldr	r3, [pc, #152]	; (801ecec <tcp_input+0x4d8>)
 801ec54:	2200      	movs	r2, #0
 801ec56:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801ec58:	4b25      	ldr	r3, [pc, #148]	; (801ecf0 <tcp_input+0x4dc>)
 801ec5a:	2200      	movs	r2, #0
 801ec5c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801ec5e:	4b25      	ldr	r3, [pc, #148]	; (801ecf4 <tcp_input+0x4e0>)
 801ec60:	781b      	ldrb	r3, [r3, #0]
 801ec62:	f003 0308 	and.w	r3, r3, #8
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d006      	beq.n	801ec78 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	7b5b      	ldrb	r3, [r3, #13]
 801ec6e:	f043 0301 	orr.w	r3, r3, #1
 801ec72:	b2da      	uxtb	r2, r3
 801ec74:	687b      	ldr	r3, [r7, #4]
 801ec76:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801ec78:	69fb      	ldr	r3, [r7, #28]
 801ec7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ec7c:	2b00      	cmp	r3, #0
 801ec7e:	d03d      	beq.n	801ecfc <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ec80:	69f8      	ldr	r0, [r7, #28]
 801ec82:	f7ff f999 	bl	801dfb8 <tcp_process_refused_data>
 801ec86:	4603      	mov	r3, r0
 801ec88:	f113 0f0d 	cmn.w	r3, #13
 801ec8c:	d007      	beq.n	801ec9e <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ec8e:	69fb      	ldr	r3, [r7, #28]
 801ec90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d032      	beq.n	801ecfc <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ec96:	4b18      	ldr	r3, [pc, #96]	; (801ecf8 <tcp_input+0x4e4>)
 801ec98:	881b      	ldrh	r3, [r3, #0]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d02e      	beq.n	801ecfc <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801ec9e:	69fb      	ldr	r3, [r7, #28]
 801eca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eca2:	2b00      	cmp	r3, #0
 801eca4:	f040 8108 	bne.w	801eeb8 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801eca8:	69f8      	ldr	r0, [r7, #28]
 801ecaa:	f002 fe3f 	bl	802192c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801ecae:	e103      	b.n	801eeb8 <tcp_input+0x6a4>
 801ecb0:	0802abf8 	.word	0x0802abf8
 801ecb4:	0802ac90 	.word	0x0802ac90
 801ecb8:	0802ac3c 	.word	0x0802ac3c
 801ecbc:	0802acb8 	.word	0x0802acb8
 801ecc0:	0802ace4 	.word	0x0802ace4
 801ecc4:	20009504 	.word	0x20009504
 801ecc8:	2000a278 	.word	0x2000a278
 801eccc:	0802ad0c 	.word	0x0802ad0c
 801ecd0:	2000ecdc 	.word	0x2000ecdc
 801ecd4:	0802ad38 	.word	0x0802ad38
 801ecd8:	2000ecec 	.word	0x2000ecec
 801ecdc:	0802ad64 	.word	0x0802ad64
 801ece0:	2000ece4 	.word	0x2000ece4
 801ece4:	200094f4 	.word	0x200094f4
 801ece8:	20009524 	.word	0x20009524
 801ecec:	20009521 	.word	0x20009521
 801ecf0:	2000951c 	.word	0x2000951c
 801ecf4:	20009520 	.word	0x20009520
 801ecf8:	2000951e 	.word	0x2000951e
      }
    }
    tcp_input_pcb = pcb;
 801ecfc:	4a96      	ldr	r2, [pc, #600]	; (801ef58 <tcp_input+0x744>)
 801ecfe:	69fb      	ldr	r3, [r7, #28]
 801ed00:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801ed02:	69f8      	ldr	r0, [r7, #28]
 801ed04:	f000 fac2 	bl	801f28c <tcp_process>
 801ed08:	4603      	mov	r3, r0
 801ed0a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801ed0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ed10:	f113 0f0d 	cmn.w	r3, #13
 801ed14:	f000 80db 	beq.w	801eece <tcp_input+0x6ba>
      if (recv_flags & TF_RESET) {
 801ed18:	4b90      	ldr	r3, [pc, #576]	; (801ef5c <tcp_input+0x748>)
 801ed1a:	781b      	ldrb	r3, [r3, #0]
 801ed1c:	f003 0308 	and.w	r3, r3, #8
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	d016      	beq.n	801ed52 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801ed24:	69fb      	ldr	r3, [r7, #28]
 801ed26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	d008      	beq.n	801ed40 <tcp_input+0x52c>
 801ed2e:	69fb      	ldr	r3, [r7, #28]
 801ed30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ed34:	69fa      	ldr	r2, [r7, #28]
 801ed36:	6912      	ldr	r2, [r2, #16]
 801ed38:	f06f 010d 	mvn.w	r1, #13
 801ed3c:	4610      	mov	r0, r2
 801ed3e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ed40:	69f9      	ldr	r1, [r7, #28]
 801ed42:	4887      	ldr	r0, [pc, #540]	; (801ef60 <tcp_input+0x74c>)
 801ed44:	f7ff fc4c 	bl	801e5e0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 801ed48:	69f9      	ldr	r1, [r7, #28]
 801ed4a:	2000      	movs	r0, #0
 801ed4c:	f7fd f906 	bl	801bf5c <memp_free>
 801ed50:	e0bd      	b.n	801eece <tcp_input+0x6ba>
      } else {
        err = ERR_OK;
 801ed52:	2300      	movs	r3, #0
 801ed54:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801ed56:	4b83      	ldr	r3, [pc, #524]	; (801ef64 <tcp_input+0x750>)
 801ed58:	881b      	ldrh	r3, [r3, #0]
 801ed5a:	2b00      	cmp	r3, #0
 801ed5c:	d01b      	beq.n	801ed96 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801ed5e:	4b81      	ldr	r3, [pc, #516]	; (801ef64 <tcp_input+0x750>)
 801ed60:	881b      	ldrh	r3, [r3, #0]
 801ed62:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801ed64:	69fb      	ldr	r3, [r7, #28]
 801ed66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ed68:	2b00      	cmp	r3, #0
 801ed6a:	d009      	beq.n	801ed80 <tcp_input+0x56c>
 801ed6c:	69fb      	ldr	r3, [r7, #28]
 801ed6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ed70:	69fa      	ldr	r2, [r7, #28]
 801ed72:	6910      	ldr	r0, [r2, #16]
 801ed74:	89fa      	ldrh	r2, [r7, #14]
 801ed76:	69f9      	ldr	r1, [r7, #28]
 801ed78:	4798      	blx	r3
 801ed7a:	4603      	mov	r3, r0
 801ed7c:	74fb      	strb	r3, [r7, #19]
 801ed7e:	e001      	b.n	801ed84 <tcp_input+0x570>
 801ed80:	2300      	movs	r3, #0
 801ed82:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ed84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ed88:	f113 0f0d 	cmn.w	r3, #13
 801ed8c:	f000 8096 	beq.w	801eebc <tcp_input+0x6a8>
              goto aborted;
            }
          }
          recv_acked = 0;
 801ed90:	4b74      	ldr	r3, [pc, #464]	; (801ef64 <tcp_input+0x750>)
 801ed92:	2200      	movs	r2, #0
 801ed94:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801ed96:	69f8      	ldr	r0, [r7, #28]
 801ed98:	f000 f8fc 	bl	801ef94 <tcp_input_delayed_close>
 801ed9c:	4603      	mov	r3, r0
 801ed9e:	2b00      	cmp	r3, #0
 801eda0:	f040 808e 	bne.w	801eec0 <tcp_input+0x6ac>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801eda4:	4b70      	ldr	r3, [pc, #448]	; (801ef68 <tcp_input+0x754>)
 801eda6:	681b      	ldr	r3, [r3, #0]
 801eda8:	2b00      	cmp	r3, #0
 801edaa:	d041      	beq.n	801ee30 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801edac:	69fb      	ldr	r3, [r7, #28]
 801edae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d006      	beq.n	801edc2 <tcp_input+0x5ae>
 801edb4:	4b6d      	ldr	r3, [pc, #436]	; (801ef6c <tcp_input+0x758>)
 801edb6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 801edba:	496d      	ldr	r1, [pc, #436]	; (801ef70 <tcp_input+0x75c>)
 801edbc:	486d      	ldr	r0, [pc, #436]	; (801ef74 <tcp_input+0x760>)
 801edbe:	f008 fb37 	bl	8027430 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801edc2:	69fb      	ldr	r3, [r7, #28]
 801edc4:	7e9b      	ldrb	r3, [r3, #26]
 801edc6:	f003 0310 	and.w	r3, r3, #16
 801edca:	2b00      	cmp	r3, #0
 801edcc:	d008      	beq.n	801ede0 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801edce:	4b66      	ldr	r3, [pc, #408]	; (801ef68 <tcp_input+0x754>)
 801edd0:	681b      	ldr	r3, [r3, #0]
 801edd2:	4618      	mov	r0, r3
 801edd4:	f7fd fe52 	bl	801ca7c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801edd8:	69f8      	ldr	r0, [r7, #28]
 801edda:	f7fe fb95 	bl	801d508 <tcp_abort>
            goto aborted;
 801edde:	e076      	b.n	801eece <tcp_input+0x6ba>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801ede0:	69fb      	ldr	r3, [r7, #28]
 801ede2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	d00c      	beq.n	801ee04 <tcp_input+0x5f0>
 801edea:	69fb      	ldr	r3, [r7, #28]
 801edec:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801edf0:	69fb      	ldr	r3, [r7, #28]
 801edf2:	6918      	ldr	r0, [r3, #16]
 801edf4:	4b5c      	ldr	r3, [pc, #368]	; (801ef68 <tcp_input+0x754>)
 801edf6:	681a      	ldr	r2, [r3, #0]
 801edf8:	2300      	movs	r3, #0
 801edfa:	69f9      	ldr	r1, [r7, #28]
 801edfc:	47a0      	blx	r4
 801edfe:	4603      	mov	r3, r0
 801ee00:	74fb      	strb	r3, [r7, #19]
 801ee02:	e008      	b.n	801ee16 <tcp_input+0x602>
 801ee04:	4b58      	ldr	r3, [pc, #352]	; (801ef68 <tcp_input+0x754>)
 801ee06:	681a      	ldr	r2, [r3, #0]
 801ee08:	2300      	movs	r3, #0
 801ee0a:	69f9      	ldr	r1, [r7, #28]
 801ee0c:	2000      	movs	r0, #0
 801ee0e:	f7ff f984 	bl	801e11a <tcp_recv_null>
 801ee12:	4603      	mov	r3, r0
 801ee14:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801ee16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ee1a:	f113 0f0d 	cmn.w	r3, #13
 801ee1e:	d051      	beq.n	801eec4 <tcp_input+0x6b0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801ee20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d003      	beq.n	801ee30 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801ee28:	4b4f      	ldr	r3, [pc, #316]	; (801ef68 <tcp_input+0x754>)
 801ee2a:	681a      	ldr	r2, [r3, #0]
 801ee2c:	69fb      	ldr	r3, [r7, #28]
 801ee2e:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801ee30:	4b4a      	ldr	r3, [pc, #296]	; (801ef5c <tcp_input+0x748>)
 801ee32:	781b      	ldrb	r3, [r3, #0]
 801ee34:	f003 0320 	and.w	r3, r3, #32
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	d030      	beq.n	801ee9e <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 801ee3c:	69fb      	ldr	r3, [r7, #28]
 801ee3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	d009      	beq.n	801ee58 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801ee44:	69fb      	ldr	r3, [r7, #28]
 801ee46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ee48:	69fa      	ldr	r2, [r7, #28]
 801ee4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801ee4c:	7b52      	ldrb	r2, [r2, #13]
 801ee4e:	f042 0220 	orr.w	r2, r2, #32
 801ee52:	b2d2      	uxtb	r2, r2
 801ee54:	735a      	strb	r2, [r3, #13]
 801ee56:	e022      	b.n	801ee9e <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801ee58:	69fb      	ldr	r3, [r7, #28]
 801ee5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ee5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ee60:	d005      	beq.n	801ee6e <tcp_input+0x65a>
              pcb->rcv_wnd++;
 801ee62:	69fb      	ldr	r3, [r7, #28]
 801ee64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ee66:	3301      	adds	r3, #1
 801ee68:	b29a      	uxth	r2, r3
 801ee6a:	69fb      	ldr	r3, [r7, #28]
 801ee6c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801ee6e:	69fb      	ldr	r3, [r7, #28]
 801ee70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ee74:	2b00      	cmp	r3, #0
 801ee76:	d00b      	beq.n	801ee90 <tcp_input+0x67c>
 801ee78:	69fb      	ldr	r3, [r7, #28]
 801ee7a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801ee7e:	69fb      	ldr	r3, [r7, #28]
 801ee80:	6918      	ldr	r0, [r3, #16]
 801ee82:	2300      	movs	r3, #0
 801ee84:	2200      	movs	r2, #0
 801ee86:	69f9      	ldr	r1, [r7, #28]
 801ee88:	47a0      	blx	r4
 801ee8a:	4603      	mov	r3, r0
 801ee8c:	74fb      	strb	r3, [r7, #19]
 801ee8e:	e001      	b.n	801ee94 <tcp_input+0x680>
 801ee90:	2300      	movs	r3, #0
 801ee92:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ee94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ee98:	f113 0f0d 	cmn.w	r3, #13
 801ee9c:	d014      	beq.n	801eec8 <tcp_input+0x6b4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801ee9e:	4b2e      	ldr	r3, [pc, #184]	; (801ef58 <tcp_input+0x744>)
 801eea0:	2200      	movs	r2, #0
 801eea2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801eea4:	69f8      	ldr	r0, [r7, #28]
 801eea6:	f000 f875 	bl	801ef94 <tcp_input_delayed_close>
 801eeaa:	4603      	mov	r3, r0
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	d10d      	bne.n	801eecc <tcp_input+0x6b8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801eeb0:	69f8      	ldr	r0, [r7, #28]
 801eeb2:	f002 fd97 	bl	80219e4 <tcp_output>
 801eeb6:	e00a      	b.n	801eece <tcp_input+0x6ba>
        goto aborted;
 801eeb8:	bf00      	nop
 801eeba:	e008      	b.n	801eece <tcp_input+0x6ba>
              goto aborted;
 801eebc:	bf00      	nop
 801eebe:	e006      	b.n	801eece <tcp_input+0x6ba>
          goto aborted;
 801eec0:	bf00      	nop
 801eec2:	e004      	b.n	801eece <tcp_input+0x6ba>
            goto aborted;
 801eec4:	bf00      	nop
 801eec6:	e002      	b.n	801eece <tcp_input+0x6ba>
              goto aborted;
 801eec8:	bf00      	nop
 801eeca:	e000      	b.n	801eece <tcp_input+0x6ba>
          goto aborted;
 801eecc:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 801eece:	4b22      	ldr	r3, [pc, #136]	; (801ef58 <tcp_input+0x744>)
 801eed0:	2200      	movs	r2, #0
 801eed2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801eed4:	4b24      	ldr	r3, [pc, #144]	; (801ef68 <tcp_input+0x754>)
 801eed6:	2200      	movs	r2, #0
 801eed8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 801eeda:	4b27      	ldr	r3, [pc, #156]	; (801ef78 <tcp_input+0x764>)
 801eedc:	685b      	ldr	r3, [r3, #4]
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d035      	beq.n	801ef4e <tcp_input+0x73a>
    {
      pbuf_free(inseg.p);
 801eee2:	4b25      	ldr	r3, [pc, #148]	; (801ef78 <tcp_input+0x764>)
 801eee4:	685b      	ldr	r3, [r3, #4]
 801eee6:	4618      	mov	r0, r3
 801eee8:	f7fd fdc8 	bl	801ca7c <pbuf_free>
      inseg.p = NULL;
 801eeec:	4b22      	ldr	r3, [pc, #136]	; (801ef78 <tcp_input+0x764>)
 801eeee:	2200      	movs	r2, #0
 801eef0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801eef2:	e02c      	b.n	801ef4e <tcp_input+0x73a>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801eef4:	4b21      	ldr	r3, [pc, #132]	; (801ef7c <tcp_input+0x768>)
 801eef6:	681b      	ldr	r3, [r3, #0]
 801eef8:	899b      	ldrh	r3, [r3, #12]
 801eefa:	b29b      	uxth	r3, r3
 801eefc:	4618      	mov	r0, r3
 801eefe:	f7fa f993 	bl	8019228 <lwip_htons>
 801ef02:	4603      	mov	r3, r0
 801ef04:	f003 0304 	and.w	r3, r3, #4
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d115      	bne.n	801ef38 <tcp_input+0x724>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801ef0c:	4b1c      	ldr	r3, [pc, #112]	; (801ef80 <tcp_input+0x76c>)
 801ef0e:	6818      	ldr	r0, [r3, #0]
 801ef10:	4b1c      	ldr	r3, [pc, #112]	; (801ef84 <tcp_input+0x770>)
 801ef12:	881b      	ldrh	r3, [r3, #0]
 801ef14:	461a      	mov	r2, r3
 801ef16:	4b1c      	ldr	r3, [pc, #112]	; (801ef88 <tcp_input+0x774>)
 801ef18:	681b      	ldr	r3, [r3, #0]
 801ef1a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ef1c:	4b17      	ldr	r3, [pc, #92]	; (801ef7c <tcp_input+0x768>)
 801ef1e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801ef20:	885b      	ldrh	r3, [r3, #2]
 801ef22:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ef24:	4a15      	ldr	r2, [pc, #84]	; (801ef7c <tcp_input+0x768>)
 801ef26:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801ef28:	8812      	ldrh	r2, [r2, #0]
 801ef2a:	b292      	uxth	r2, r2
 801ef2c:	9201      	str	r2, [sp, #4]
 801ef2e:	9300      	str	r3, [sp, #0]
 801ef30:	4b16      	ldr	r3, [pc, #88]	; (801ef8c <tcp_input+0x778>)
 801ef32:	4a17      	ldr	r2, [pc, #92]	; (801ef90 <tcp_input+0x77c>)
 801ef34:	f002 ffde 	bl	8021ef4 <tcp_rst>
    pbuf_free(p);
 801ef38:	6878      	ldr	r0, [r7, #4]
 801ef3a:	f7fd fd9f 	bl	801ca7c <pbuf_free>
  return;
 801ef3e:	e006      	b.n	801ef4e <tcp_input+0x73a>
    goto dropped;
 801ef40:	bf00      	nop
 801ef42:	e000      	b.n	801ef46 <tcp_input+0x732>
      goto dropped;
 801ef44:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801ef46:	6878      	ldr	r0, [r7, #4]
 801ef48:	f7fd fd98 	bl	801ca7c <pbuf_free>
 801ef4c:	e000      	b.n	801ef50 <tcp_input+0x73c>
  return;
 801ef4e:	bf00      	nop
}
 801ef50:	3724      	adds	r7, #36	; 0x24
 801ef52:	46bd      	mov	sp, r7
 801ef54:	bd90      	pop	{r4, r7, pc}
 801ef56:	bf00      	nop
 801ef58:	2000ecf0 	.word	0x2000ecf0
 801ef5c:	20009521 	.word	0x20009521
 801ef60:	2000ecdc 	.word	0x2000ecdc
 801ef64:	2000951c 	.word	0x2000951c
 801ef68:	20009524 	.word	0x20009524
 801ef6c:	0802abf8 	.word	0x0802abf8
 801ef70:	0802ad94 	.word	0x0802ad94
 801ef74:	0802ac3c 	.word	0x0802ac3c
 801ef78:	200094f4 	.word	0x200094f4
 801ef7c:	20009504 	.word	0x20009504
 801ef80:	20009518 	.word	0x20009518
 801ef84:	2000951e 	.word	0x2000951e
 801ef88:	20009514 	.word	0x20009514
 801ef8c:	2000a288 	.word	0x2000a288
 801ef90:	2000a28c 	.word	0x2000a28c

0801ef94 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801ef94:	b580      	push	{r7, lr}
 801ef96:	b082      	sub	sp, #8
 801ef98:	af00      	add	r7, sp, #0
 801ef9a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 801ef9c:	4b14      	ldr	r3, [pc, #80]	; (801eff0 <tcp_input_delayed_close+0x5c>)
 801ef9e:	781b      	ldrb	r3, [r3, #0]
 801efa0:	f003 0310 	and.w	r3, r3, #16
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d01d      	beq.n	801efe4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	7e9b      	ldrb	r3, [r3, #26]
 801efac:	f003 0310 	and.w	r3, r3, #16
 801efb0:	2b00      	cmp	r3, #0
 801efb2:	d10d      	bne.n	801efd0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801efba:	2b00      	cmp	r3, #0
 801efbc:	d008      	beq.n	801efd0 <tcp_input_delayed_close+0x3c>
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801efc4:	687a      	ldr	r2, [r7, #4]
 801efc6:	6912      	ldr	r2, [r2, #16]
 801efc8:	f06f 010e 	mvn.w	r1, #14
 801efcc:	4610      	mov	r0, r2
 801efce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801efd0:	6879      	ldr	r1, [r7, #4]
 801efd2:	4808      	ldr	r0, [pc, #32]	; (801eff4 <tcp_input_delayed_close+0x60>)
 801efd4:	f7ff fb04 	bl	801e5e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 801efd8:	6879      	ldr	r1, [r7, #4]
 801efda:	2000      	movs	r0, #0
 801efdc:	f7fc ffbe 	bl	801bf5c <memp_free>
    return 1;
 801efe0:	2301      	movs	r3, #1
 801efe2:	e000      	b.n	801efe6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 801efe4:	2300      	movs	r3, #0
}
 801efe6:	4618      	mov	r0, r3
 801efe8:	3708      	adds	r7, #8
 801efea:	46bd      	mov	sp, r7
 801efec:	bd80      	pop	{r7, pc}
 801efee:	bf00      	nop
 801eff0:	20009521 	.word	0x20009521
 801eff4:	2000ecdc 	.word	0x2000ecdc

0801eff8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801eff8:	b580      	push	{r7, lr}
 801effa:	b088      	sub	sp, #32
 801effc:	af02      	add	r7, sp, #8
 801effe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801f000:	4b64      	ldr	r3, [pc, #400]	; (801f194 <tcp_listen_input+0x19c>)
 801f002:	781b      	ldrb	r3, [r3, #0]
 801f004:	f003 0304 	and.w	r3, r3, #4
 801f008:	2b00      	cmp	r3, #0
 801f00a:	f040 80bc 	bne.w	801f186 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801f00e:	4b61      	ldr	r3, [pc, #388]	; (801f194 <tcp_listen_input+0x19c>)
 801f010:	781b      	ldrb	r3, [r3, #0]
 801f012:	f003 0310 	and.w	r3, r3, #16
 801f016:	2b00      	cmp	r3, #0
 801f018:	d016      	beq.n	801f048 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f01a:	4b5f      	ldr	r3, [pc, #380]	; (801f198 <tcp_listen_input+0x1a0>)
 801f01c:	6818      	ldr	r0, [r3, #0]
 801f01e:	4b5f      	ldr	r3, [pc, #380]	; (801f19c <tcp_listen_input+0x1a4>)
 801f020:	881b      	ldrh	r3, [r3, #0]
 801f022:	461a      	mov	r2, r3
 801f024:	4b5e      	ldr	r3, [pc, #376]	; (801f1a0 <tcp_listen_input+0x1a8>)
 801f026:	681b      	ldr	r3, [r3, #0]
 801f028:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f02a:	4b5e      	ldr	r3, [pc, #376]	; (801f1a4 <tcp_listen_input+0x1ac>)
 801f02c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f02e:	885b      	ldrh	r3, [r3, #2]
 801f030:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f032:	4a5c      	ldr	r2, [pc, #368]	; (801f1a4 <tcp_listen_input+0x1ac>)
 801f034:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f036:	8812      	ldrh	r2, [r2, #0]
 801f038:	b292      	uxth	r2, r2
 801f03a:	9201      	str	r2, [sp, #4]
 801f03c:	9300      	str	r3, [sp, #0]
 801f03e:	4b5a      	ldr	r3, [pc, #360]	; (801f1a8 <tcp_listen_input+0x1b0>)
 801f040:	4a5a      	ldr	r2, [pc, #360]	; (801f1ac <tcp_listen_input+0x1b4>)
 801f042:	f002 ff57 	bl	8021ef4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801f046:	e0a0      	b.n	801f18a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 801f048:	4b52      	ldr	r3, [pc, #328]	; (801f194 <tcp_listen_input+0x19c>)
 801f04a:	781b      	ldrb	r3, [r3, #0]
 801f04c:	f003 0302 	and.w	r3, r3, #2
 801f050:	2b00      	cmp	r3, #0
 801f052:	f000 809a 	beq.w	801f18a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	7d5b      	ldrb	r3, [r3, #21]
 801f05a:	4618      	mov	r0, r3
 801f05c:	f7ff f93c 	bl	801e2d8 <tcp_alloc>
 801f060:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801f062:	697b      	ldr	r3, [r7, #20]
 801f064:	2b00      	cmp	r3, #0
 801f066:	d111      	bne.n	801f08c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	699b      	ldr	r3, [r3, #24]
 801f06c:	2b00      	cmp	r3, #0
 801f06e:	d00a      	beq.n	801f086 <tcp_listen_input+0x8e>
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	699b      	ldr	r3, [r3, #24]
 801f074:	687a      	ldr	r2, [r7, #4]
 801f076:	6910      	ldr	r0, [r2, #16]
 801f078:	f04f 32ff 	mov.w	r2, #4294967295
 801f07c:	2100      	movs	r1, #0
 801f07e:	4798      	blx	r3
 801f080:	4603      	mov	r3, r0
 801f082:	74fb      	strb	r3, [r7, #19]
      return;
 801f084:	e082      	b.n	801f18c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f086:	23f0      	movs	r3, #240	; 0xf0
 801f088:	74fb      	strb	r3, [r7, #19]
      return;
 801f08a:	e07f      	b.n	801f18c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801f08c:	4b48      	ldr	r3, [pc, #288]	; (801f1b0 <tcp_listen_input+0x1b8>)
 801f08e:	695a      	ldr	r2, [r3, #20]
 801f090:	697b      	ldr	r3, [r7, #20]
 801f092:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801f094:	4b46      	ldr	r3, [pc, #280]	; (801f1b0 <tcp_listen_input+0x1b8>)
 801f096:	691a      	ldr	r2, [r3, #16]
 801f098:	697b      	ldr	r3, [r7, #20]
 801f09a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	8ada      	ldrh	r2, [r3, #22]
 801f0a0:	697b      	ldr	r3, [r7, #20]
 801f0a2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801f0a4:	4b3f      	ldr	r3, [pc, #252]	; (801f1a4 <tcp_listen_input+0x1ac>)
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	881b      	ldrh	r3, [r3, #0]
 801f0aa:	b29a      	uxth	r2, r3
 801f0ac:	697b      	ldr	r3, [r7, #20]
 801f0ae:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801f0b0:	697b      	ldr	r3, [r7, #20]
 801f0b2:	2203      	movs	r2, #3
 801f0b4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801f0b6:	4b3a      	ldr	r3, [pc, #232]	; (801f1a0 <tcp_listen_input+0x1a8>)
 801f0b8:	681b      	ldr	r3, [r3, #0]
 801f0ba:	1c5a      	adds	r2, r3, #1
 801f0bc:	697b      	ldr	r3, [r7, #20]
 801f0be:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801f0c0:	697b      	ldr	r3, [r7, #20]
 801f0c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f0c4:	697b      	ldr	r3, [r7, #20]
 801f0c6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801f0c8:	6978      	ldr	r0, [r7, #20]
 801f0ca:	f7ff fb05 	bl	801e6d8 <tcp_next_iss>
 801f0ce:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 801f0d0:	697b      	ldr	r3, [r7, #20]
 801f0d2:	68fa      	ldr	r2, [r7, #12]
 801f0d4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 801f0d6:	697b      	ldr	r3, [r7, #20]
 801f0d8:	68fa      	ldr	r2, [r7, #12]
 801f0da:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 801f0dc:	697b      	ldr	r3, [r7, #20]
 801f0de:	68fa      	ldr	r2, [r7, #12]
 801f0e0:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801f0e2:	697b      	ldr	r3, [r7, #20]
 801f0e4:	68fa      	ldr	r2, [r7, #12]
 801f0e6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f0e8:	4b2d      	ldr	r3, [pc, #180]	; (801f1a0 <tcp_listen_input+0x1a8>)
 801f0ea:	681b      	ldr	r3, [r3, #0]
 801f0ec:	1e5a      	subs	r2, r3, #1
 801f0ee:	697b      	ldr	r3, [r7, #20]
 801f0f0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 801f0f2:	687b      	ldr	r3, [r7, #4]
 801f0f4:	691a      	ldr	r2, [r3, #16]
 801f0f6:	697b      	ldr	r3, [r7, #20]
 801f0f8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801f0fa:	697b      	ldr	r3, [r7, #20]
 801f0fc:	687a      	ldr	r2, [r7, #4]
 801f0fe:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801f100:	687b      	ldr	r3, [r7, #4]
 801f102:	7a1b      	ldrb	r3, [r3, #8]
 801f104:	f003 030c 	and.w	r3, r3, #12
 801f108:	b2da      	uxtb	r2, r3
 801f10a:	697b      	ldr	r3, [r7, #20]
 801f10c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801f10e:	4b29      	ldr	r3, [pc, #164]	; (801f1b4 <tcp_listen_input+0x1bc>)
 801f110:	681a      	ldr	r2, [r3, #0]
 801f112:	697b      	ldr	r3, [r7, #20]
 801f114:	60da      	str	r2, [r3, #12]
 801f116:	4a27      	ldr	r2, [pc, #156]	; (801f1b4 <tcp_listen_input+0x1bc>)
 801f118:	697b      	ldr	r3, [r7, #20]
 801f11a:	6013      	str	r3, [r2, #0]
 801f11c:	f003 f938 	bl	8022390 <tcp_timer_needed>
 801f120:	4b25      	ldr	r3, [pc, #148]	; (801f1b8 <tcp_listen_input+0x1c0>)
 801f122:	2201      	movs	r2, #1
 801f124:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801f126:	6978      	ldr	r0, [r7, #20]
 801f128:	f001 fd16 	bl	8020b58 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801f12c:	4b1d      	ldr	r3, [pc, #116]	; (801f1a4 <tcp_listen_input+0x1ac>)
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	89db      	ldrh	r3, [r3, #14]
 801f132:	b29a      	uxth	r2, r3
 801f134:	697b      	ldr	r3, [r7, #20]
 801f136:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 801f13a:	697b      	ldr	r3, [r7, #20]
 801f13c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801f140:	697b      	ldr	r3, [r7, #20]
 801f142:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f146:	697b      	ldr	r3, [r7, #20]
 801f148:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801f14a:	697b      	ldr	r3, [r7, #20]
 801f14c:	3304      	adds	r3, #4
 801f14e:	4619      	mov	r1, r3
 801f150:	4610      	mov	r0, r2
 801f152:	f7ff fad9 	bl	801e708 <tcp_eff_send_mss_impl>
 801f156:	4603      	mov	r3, r0
 801f158:	461a      	mov	r2, r3
 801f15a:	697b      	ldr	r3, [r7, #20]
 801f15c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801f15e:	2112      	movs	r1, #18
 801f160:	6978      	ldr	r0, [r7, #20]
 801f162:	f002 fae5 	bl	8021730 <tcp_enqueue_flags>
 801f166:	4603      	mov	r3, r0
 801f168:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 801f16a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d004      	beq.n	801f17c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 801f172:	2100      	movs	r1, #0
 801f174:	6978      	ldr	r0, [r7, #20]
 801f176:	f7fe f915 	bl	801d3a4 <tcp_abandon>
      return;
 801f17a:	e007      	b.n	801f18c <tcp_listen_input+0x194>
    tcp_output(npcb);
 801f17c:	6978      	ldr	r0, [r7, #20]
 801f17e:	f002 fc31 	bl	80219e4 <tcp_output>
  return;
 801f182:	bf00      	nop
 801f184:	e001      	b.n	801f18a <tcp_listen_input+0x192>
    return;
 801f186:	bf00      	nop
 801f188:	e000      	b.n	801f18c <tcp_listen_input+0x194>
  return;
 801f18a:	bf00      	nop
}
 801f18c:	3718      	adds	r7, #24
 801f18e:	46bd      	mov	sp, r7
 801f190:	bd80      	pop	{r7, pc}
 801f192:	bf00      	nop
 801f194:	20009520 	.word	0x20009520
 801f198:	20009518 	.word	0x20009518
 801f19c:	2000951e 	.word	0x2000951e
 801f1a0:	20009514 	.word	0x20009514
 801f1a4:	20009504 	.word	0x20009504
 801f1a8:	2000a288 	.word	0x2000a288
 801f1ac:	2000a28c 	.word	0x2000a28c
 801f1b0:	2000a278 	.word	0x2000a278
 801f1b4:	2000ecdc 	.word	0x2000ecdc
 801f1b8:	2000ecd8 	.word	0x2000ecd8

0801f1bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801f1bc:	b580      	push	{r7, lr}
 801f1be:	b084      	sub	sp, #16
 801f1c0:	af02      	add	r7, sp, #8
 801f1c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801f1c4:	4b29      	ldr	r3, [pc, #164]	; (801f26c <tcp_timewait_input+0xb0>)
 801f1c6:	781b      	ldrb	r3, [r3, #0]
 801f1c8:	f003 0304 	and.w	r3, r3, #4
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	d147      	bne.n	801f260 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801f1d0:	4b26      	ldr	r3, [pc, #152]	; (801f26c <tcp_timewait_input+0xb0>)
 801f1d2:	781b      	ldrb	r3, [r3, #0]
 801f1d4:	f003 0302 	and.w	r3, r3, #2
 801f1d8:	2b00      	cmp	r3, #0
 801f1da:	d027      	beq.n	801f22c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801f1dc:	4b24      	ldr	r3, [pc, #144]	; (801f270 <tcp_timewait_input+0xb4>)
 801f1de:	681a      	ldr	r2, [r3, #0]
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f1e4:	1ad3      	subs	r3, r2, r3
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	db2a      	blt.n	801f240 <tcp_timewait_input+0x84>
 801f1ea:	4b21      	ldr	r3, [pc, #132]	; (801f270 <tcp_timewait_input+0xb4>)
 801f1ec:	681a      	ldr	r2, [r3, #0]
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f1f2:	6879      	ldr	r1, [r7, #4]
 801f1f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f1f6:	440b      	add	r3, r1
 801f1f8:	1ad3      	subs	r3, r2, r3
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	dc20      	bgt.n	801f240 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f1fe:	4b1d      	ldr	r3, [pc, #116]	; (801f274 <tcp_timewait_input+0xb8>)
 801f200:	6818      	ldr	r0, [r3, #0]
 801f202:	4b1d      	ldr	r3, [pc, #116]	; (801f278 <tcp_timewait_input+0xbc>)
 801f204:	881b      	ldrh	r3, [r3, #0]
 801f206:	461a      	mov	r2, r3
 801f208:	4b19      	ldr	r3, [pc, #100]	; (801f270 <tcp_timewait_input+0xb4>)
 801f20a:	681b      	ldr	r3, [r3, #0]
 801f20c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f20e:	4b1b      	ldr	r3, [pc, #108]	; (801f27c <tcp_timewait_input+0xc0>)
 801f210:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f212:	885b      	ldrh	r3, [r3, #2]
 801f214:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f216:	4a19      	ldr	r2, [pc, #100]	; (801f27c <tcp_timewait_input+0xc0>)
 801f218:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f21a:	8812      	ldrh	r2, [r2, #0]
 801f21c:	b292      	uxth	r2, r2
 801f21e:	9201      	str	r2, [sp, #4]
 801f220:	9300      	str	r3, [sp, #0]
 801f222:	4b17      	ldr	r3, [pc, #92]	; (801f280 <tcp_timewait_input+0xc4>)
 801f224:	4a17      	ldr	r2, [pc, #92]	; (801f284 <tcp_timewait_input+0xc8>)
 801f226:	f002 fe65 	bl	8021ef4 <tcp_rst>
      return;
 801f22a:	e01c      	b.n	801f266 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 801f22c:	4b0f      	ldr	r3, [pc, #60]	; (801f26c <tcp_timewait_input+0xb0>)
 801f22e:	781b      	ldrb	r3, [r3, #0]
 801f230:	f003 0301 	and.w	r3, r3, #1
 801f234:	2b00      	cmp	r3, #0
 801f236:	d003      	beq.n	801f240 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801f238:	4b13      	ldr	r3, [pc, #76]	; (801f288 <tcp_timewait_input+0xcc>)
 801f23a:	681a      	ldr	r2, [r3, #0]
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801f240:	4b0d      	ldr	r3, [pc, #52]	; (801f278 <tcp_timewait_input+0xbc>)
 801f242:	881b      	ldrh	r3, [r3, #0]
 801f244:	2b00      	cmp	r3, #0
 801f246:	d00d      	beq.n	801f264 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	7e9b      	ldrb	r3, [r3, #26]
 801f24c:	f043 0302 	orr.w	r3, r3, #2
 801f250:	b2da      	uxtb	r2, r3
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801f256:	6878      	ldr	r0, [r7, #4]
 801f258:	f002 fbc4 	bl	80219e4 <tcp_output>
  }
  return;
 801f25c:	bf00      	nop
 801f25e:	e001      	b.n	801f264 <tcp_timewait_input+0xa8>
    return;
 801f260:	bf00      	nop
 801f262:	e000      	b.n	801f266 <tcp_timewait_input+0xaa>
  return;
 801f264:	bf00      	nop
}
 801f266:	3708      	adds	r7, #8
 801f268:	46bd      	mov	sp, r7
 801f26a:	bd80      	pop	{r7, pc}
 801f26c:	20009520 	.word	0x20009520
 801f270:	20009514 	.word	0x20009514
 801f274:	20009518 	.word	0x20009518
 801f278:	2000951e 	.word	0x2000951e
 801f27c:	20009504 	.word	0x20009504
 801f280:	2000a288 	.word	0x2000a288
 801f284:	2000a28c 	.word	0x2000a28c
 801f288:	2000ece0 	.word	0x2000ece0

0801f28c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801f28c:	b580      	push	{r7, lr}
 801f28e:	b08a      	sub	sp, #40	; 0x28
 801f290:	af02      	add	r7, sp, #8
 801f292:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801f294:	2300      	movs	r3, #0
 801f296:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801f298:	2300      	movs	r3, #0
 801f29a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801f29c:	4ba4      	ldr	r3, [pc, #656]	; (801f530 <tcp_process+0x2a4>)
 801f29e:	781b      	ldrb	r3, [r3, #0]
 801f2a0:	f003 0304 	and.w	r3, r3, #4
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	d04e      	beq.n	801f346 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801f2a8:	687b      	ldr	r3, [r7, #4]
 801f2aa:	7d1b      	ldrb	r3, [r3, #20]
 801f2ac:	2b02      	cmp	r3, #2
 801f2ae:	d108      	bne.n	801f2c2 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f2b4:	4b9f      	ldr	r3, [pc, #636]	; (801f534 <tcp_process+0x2a8>)
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	429a      	cmp	r2, r3
 801f2ba:	d123      	bne.n	801f304 <tcp_process+0x78>
        acceptable = 1;
 801f2bc:	2301      	movs	r3, #1
 801f2be:	76fb      	strb	r3, [r7, #27]
 801f2c0:	e020      	b.n	801f304 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801f2c2:	687b      	ldr	r3, [r7, #4]
 801f2c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f2c6:	4b9c      	ldr	r3, [pc, #624]	; (801f538 <tcp_process+0x2ac>)
 801f2c8:	681b      	ldr	r3, [r3, #0]
 801f2ca:	429a      	cmp	r2, r3
 801f2cc:	d102      	bne.n	801f2d4 <tcp_process+0x48>
        acceptable = 1;
 801f2ce:	2301      	movs	r3, #1
 801f2d0:	76fb      	strb	r3, [r7, #27]
 801f2d2:	e017      	b.n	801f304 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f2d4:	4b98      	ldr	r3, [pc, #608]	; (801f538 <tcp_process+0x2ac>)
 801f2d6:	681a      	ldr	r2, [r3, #0]
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2dc:	1ad3      	subs	r3, r2, r3
 801f2de:	2b00      	cmp	r3, #0
 801f2e0:	db10      	blt.n	801f304 <tcp_process+0x78>
 801f2e2:	4b95      	ldr	r3, [pc, #596]	; (801f538 <tcp_process+0x2ac>)
 801f2e4:	681a      	ldr	r2, [r3, #0]
 801f2e6:	687b      	ldr	r3, [r7, #4]
 801f2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2ea:	6879      	ldr	r1, [r7, #4]
 801f2ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f2ee:	440b      	add	r3, r1
 801f2f0:	1ad3      	subs	r3, r2, r3
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	dc06      	bgt.n	801f304 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 801f2f6:	687b      	ldr	r3, [r7, #4]
 801f2f8:	7e9b      	ldrb	r3, [r3, #26]
 801f2fa:	f043 0302 	orr.w	r3, r3, #2
 801f2fe:	b2da      	uxtb	r2, r3
 801f300:	687b      	ldr	r3, [r7, #4]
 801f302:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801f304:	7efb      	ldrb	r3, [r7, #27]
 801f306:	2b00      	cmp	r3, #0
 801f308:	d01b      	beq.n	801f342 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801f30a:	687b      	ldr	r3, [r7, #4]
 801f30c:	7d1b      	ldrb	r3, [r3, #20]
 801f30e:	2b00      	cmp	r3, #0
 801f310:	d106      	bne.n	801f320 <tcp_process+0x94>
 801f312:	4b8a      	ldr	r3, [pc, #552]	; (801f53c <tcp_process+0x2b0>)
 801f314:	f240 22e7 	movw	r2, #743	; 0x2e7
 801f318:	4989      	ldr	r1, [pc, #548]	; (801f540 <tcp_process+0x2b4>)
 801f31a:	488a      	ldr	r0, [pc, #552]	; (801f544 <tcp_process+0x2b8>)
 801f31c:	f008 f888 	bl	8027430 <iprintf>
      recv_flags |= TF_RESET;
 801f320:	4b89      	ldr	r3, [pc, #548]	; (801f548 <tcp_process+0x2bc>)
 801f322:	781b      	ldrb	r3, [r3, #0]
 801f324:	f043 0308 	orr.w	r3, r3, #8
 801f328:	b2da      	uxtb	r2, r3
 801f32a:	4b87      	ldr	r3, [pc, #540]	; (801f548 <tcp_process+0x2bc>)
 801f32c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	7e9b      	ldrb	r3, [r3, #26]
 801f332:	f023 0301 	bic.w	r3, r3, #1
 801f336:	b2da      	uxtb	r2, r3
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 801f33c:	f06f 030d 	mvn.w	r3, #13
 801f340:	e34d      	b.n	801f9de <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 801f342:	2300      	movs	r3, #0
 801f344:	e34b      	b.n	801f9de <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801f346:	4b7a      	ldr	r3, [pc, #488]	; (801f530 <tcp_process+0x2a4>)
 801f348:	781b      	ldrb	r3, [r3, #0]
 801f34a:	f003 0302 	and.w	r3, r3, #2
 801f34e:	2b00      	cmp	r3, #0
 801f350:	d010      	beq.n	801f374 <tcp_process+0xe8>
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	7d1b      	ldrb	r3, [r3, #20]
 801f356:	2b02      	cmp	r3, #2
 801f358:	d00c      	beq.n	801f374 <tcp_process+0xe8>
 801f35a:	687b      	ldr	r3, [r7, #4]
 801f35c:	7d1b      	ldrb	r3, [r3, #20]
 801f35e:	2b03      	cmp	r3, #3
 801f360:	d008      	beq.n	801f374 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801f362:	687b      	ldr	r3, [r7, #4]
 801f364:	7e9b      	ldrb	r3, [r3, #26]
 801f366:	f043 0302 	orr.w	r3, r3, #2
 801f36a:	b2da      	uxtb	r2, r3
 801f36c:	687b      	ldr	r3, [r7, #4]
 801f36e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 801f370:	2300      	movs	r3, #0
 801f372:	e334      	b.n	801f9de <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801f374:	687b      	ldr	r3, [r7, #4]
 801f376:	7e9b      	ldrb	r3, [r3, #26]
 801f378:	f003 0310 	and.w	r3, r3, #16
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	d103      	bne.n	801f388 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801f380:	4b72      	ldr	r3, [pc, #456]	; (801f54c <tcp_process+0x2c0>)
 801f382:	681a      	ldr	r2, [r3, #0]
 801f384:	687b      	ldr	r3, [r7, #4]
 801f386:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	2200      	movs	r2, #0
 801f38c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 801f390:	6878      	ldr	r0, [r7, #4]
 801f392:	f001 fbe1 	bl	8020b58 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801f396:	687b      	ldr	r3, [r7, #4]
 801f398:	7d1b      	ldrb	r3, [r3, #20]
 801f39a:	3b02      	subs	r3, #2
 801f39c:	2b07      	cmp	r3, #7
 801f39e:	f200 830e 	bhi.w	801f9be <tcp_process+0x732>
 801f3a2:	a201      	add	r2, pc, #4	; (adr r2, 801f3a8 <tcp_process+0x11c>)
 801f3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3a8:	0801f3c9 	.word	0x0801f3c9
 801f3ac:	0801f5c1 	.word	0x0801f5c1
 801f3b0:	0801f719 	.word	0x0801f719
 801f3b4:	0801f743 	.word	0x0801f743
 801f3b8:	0801f86d 	.word	0x0801f86d
 801f3bc:	0801f719 	.word	0x0801f719
 801f3c0:	0801f8f9 	.word	0x0801f8f9
 801f3c4:	0801f989 	.word	0x0801f989
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801f3c8:	4b59      	ldr	r3, [pc, #356]	; (801f530 <tcp_process+0x2a4>)
 801f3ca:	781b      	ldrb	r3, [r3, #0]
 801f3cc:	f003 0310 	and.w	r3, r3, #16
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	f000 80cb 	beq.w	801f56c <tcp_process+0x2e0>
 801f3d6:	4b56      	ldr	r3, [pc, #344]	; (801f530 <tcp_process+0x2a4>)
 801f3d8:	781b      	ldrb	r3, [r3, #0]
 801f3da:	f003 0302 	and.w	r3, r3, #2
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	f000 80c4 	beq.w	801f56c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f3e8:	1c5a      	adds	r2, r3, #1
 801f3ea:	4b52      	ldr	r3, [pc, #328]	; (801f534 <tcp_process+0x2a8>)
 801f3ec:	681b      	ldr	r3, [r3, #0]
 801f3ee:	429a      	cmp	r2, r3
 801f3f0:	f040 80bc 	bne.w	801f56c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 801f3f4:	4b50      	ldr	r3, [pc, #320]	; (801f538 <tcp_process+0x2ac>)
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	1c5a      	adds	r2, r3, #1
 801f3fa:	687b      	ldr	r3, [r7, #4]
 801f3fc:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f402:	687b      	ldr	r3, [r7, #4]
 801f404:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 801f406:	4b4b      	ldr	r3, [pc, #300]	; (801f534 <tcp_process+0x2a8>)
 801f408:	681a      	ldr	r2, [r3, #0]
 801f40a:	687b      	ldr	r3, [r7, #4]
 801f40c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801f40e:	4b50      	ldr	r3, [pc, #320]	; (801f550 <tcp_process+0x2c4>)
 801f410:	681b      	ldr	r3, [r3, #0]
 801f412:	89db      	ldrh	r3, [r3, #14]
 801f414:	b29a      	uxth	r2, r3
 801f416:	687b      	ldr	r3, [r7, #4]
 801f418:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f428:	4b43      	ldr	r3, [pc, #268]	; (801f538 <tcp_process+0x2ac>)
 801f42a:	681b      	ldr	r3, [r3, #0]
 801f42c:	1e5a      	subs	r2, r3, #1
 801f42e:	687b      	ldr	r3, [r7, #4]
 801f430:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 801f432:	687b      	ldr	r3, [r7, #4]
 801f434:	2204      	movs	r2, #4
 801f436:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801f43c:	687b      	ldr	r3, [r7, #4]
 801f43e:	3304      	adds	r3, #4
 801f440:	4619      	mov	r1, r3
 801f442:	4610      	mov	r0, r2
 801f444:	f7ff f960 	bl	801e708 <tcp_eff_send_mss_impl>
 801f448:	4603      	mov	r3, r0
 801f44a:	461a      	mov	r2, r3
 801f44c:	687b      	ldr	r3, [r7, #4]
 801f44e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f454:	005b      	lsls	r3, r3, #1
 801f456:	f241 121c 	movw	r2, #4380	; 0x111c
 801f45a:	429a      	cmp	r2, r3
 801f45c:	bf38      	it	cc
 801f45e:	461a      	movcc	r2, r3
 801f460:	687b      	ldr	r3, [r7, #4]
 801f462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f464:	009b      	lsls	r3, r3, #2
 801f466:	4293      	cmp	r3, r2
 801f468:	bf28      	it	cs
 801f46a:	4613      	movcs	r3, r2
 801f46c:	b29a      	uxth	r2, r3
 801f46e:	687b      	ldr	r3, [r7, #4]
 801f470:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f474:	687b      	ldr	r3, [r7, #4]
 801f476:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d106      	bne.n	801f48c <tcp_process+0x200>
 801f47e:	4b2f      	ldr	r3, [pc, #188]	; (801f53c <tcp_process+0x2b0>)
 801f480:	f240 321a 	movw	r2, #794	; 0x31a
 801f484:	4933      	ldr	r1, [pc, #204]	; (801f554 <tcp_process+0x2c8>)
 801f486:	482f      	ldr	r0, [pc, #188]	; (801f544 <tcp_process+0x2b8>)
 801f488:	f007 ffd2 	bl	8027430 <iprintf>
      --pcb->snd_queuelen;
 801f48c:	687b      	ldr	r3, [r7, #4]
 801f48e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f492:	3b01      	subs	r3, #1
 801f494:	b29a      	uxth	r2, r3
 801f496:	687b      	ldr	r3, [r7, #4]
 801f498:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f4a0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 801f4a2:	69fb      	ldr	r3, [r7, #28]
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	d111      	bne.n	801f4cc <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f4ac:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801f4ae:	69fb      	ldr	r3, [r7, #28]
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	d106      	bne.n	801f4c2 <tcp_process+0x236>
 801f4b4:	4b21      	ldr	r3, [pc, #132]	; (801f53c <tcp_process+0x2b0>)
 801f4b6:	f240 3222 	movw	r2, #802	; 0x322
 801f4ba:	4927      	ldr	r1, [pc, #156]	; (801f558 <tcp_process+0x2cc>)
 801f4bc:	4821      	ldr	r0, [pc, #132]	; (801f544 <tcp_process+0x2b8>)
 801f4be:	f007 ffb7 	bl	8027430 <iprintf>
        pcb->unsent = rseg->next;
 801f4c2:	69fb      	ldr	r3, [r7, #28]
 801f4c4:	681a      	ldr	r2, [r3, #0]
 801f4c6:	687b      	ldr	r3, [r7, #4]
 801f4c8:	669a      	str	r2, [r3, #104]	; 0x68
 801f4ca:	e003      	b.n	801f4d4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 801f4cc:	69fb      	ldr	r3, [r7, #28]
 801f4ce:	681a      	ldr	r2, [r3, #0]
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 801f4d4:	69f8      	ldr	r0, [r7, #28]
 801f4d6:	f7fe fdec 	bl	801e0b2 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801f4da:	687b      	ldr	r3, [r7, #4]
 801f4dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	d104      	bne.n	801f4ec <tcp_process+0x260>
        pcb->rtime = -1;
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f4e8:	861a      	strh	r2, [r3, #48]	; 0x30
 801f4ea:	e006      	b.n	801f4fa <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	2200      	movs	r2, #0
 801f4f0:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	2200      	movs	r2, #0
 801f4f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801f4fa:	687b      	ldr	r3, [r7, #4]
 801f4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f500:	2b00      	cmp	r3, #0
 801f502:	d00a      	beq.n	801f51a <tcp_process+0x28e>
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f50a:	687a      	ldr	r2, [r7, #4]
 801f50c:	6910      	ldr	r0, [r2, #16]
 801f50e:	2200      	movs	r2, #0
 801f510:	6879      	ldr	r1, [r7, #4]
 801f512:	4798      	blx	r3
 801f514:	4603      	mov	r3, r0
 801f516:	76bb      	strb	r3, [r7, #26]
 801f518:	e001      	b.n	801f51e <tcp_process+0x292>
 801f51a:	2300      	movs	r3, #0
 801f51c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 801f51e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f522:	f113 0f0d 	cmn.w	r3, #13
 801f526:	d119      	bne.n	801f55c <tcp_process+0x2d0>
        return ERR_ABRT;
 801f528:	f06f 030c 	mvn.w	r3, #12
 801f52c:	e257      	b.n	801f9de <tcp_process+0x752>
 801f52e:	bf00      	nop
 801f530:	20009520 	.word	0x20009520
 801f534:	20009518 	.word	0x20009518
 801f538:	20009514 	.word	0x20009514
 801f53c:	0802abf8 	.word	0x0802abf8
 801f540:	0802adb0 	.word	0x0802adb0
 801f544:	0802ac3c 	.word	0x0802ac3c
 801f548:	20009521 	.word	0x20009521
 801f54c:	2000ece0 	.word	0x2000ece0
 801f550:	20009504 	.word	0x20009504
 801f554:	0802add0 	.word	0x0802add0
 801f558:	0802ade8 	.word	0x0802ade8
      }
      tcp_ack_now(pcb);
 801f55c:	687b      	ldr	r3, [r7, #4]
 801f55e:	7e9b      	ldrb	r3, [r3, #26]
 801f560:	f043 0302 	orr.w	r3, r3, #2
 801f564:	b2da      	uxtb	r2, r3
 801f566:	687b      	ldr	r3, [r7, #4]
 801f568:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 801f56a:	e22a      	b.n	801f9c2 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 801f56c:	4b9f      	ldr	r3, [pc, #636]	; (801f7ec <tcp_process+0x560>)
 801f56e:	781b      	ldrb	r3, [r3, #0]
 801f570:	f003 0310 	and.w	r3, r3, #16
 801f574:	2b00      	cmp	r3, #0
 801f576:	f000 8224 	beq.w	801f9c2 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f57a:	4b9d      	ldr	r3, [pc, #628]	; (801f7f0 <tcp_process+0x564>)
 801f57c:	6818      	ldr	r0, [r3, #0]
 801f57e:	4b9d      	ldr	r3, [pc, #628]	; (801f7f4 <tcp_process+0x568>)
 801f580:	881b      	ldrh	r3, [r3, #0]
 801f582:	461a      	mov	r2, r3
 801f584:	4b9c      	ldr	r3, [pc, #624]	; (801f7f8 <tcp_process+0x56c>)
 801f586:	681b      	ldr	r3, [r3, #0]
 801f588:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f58a:	4b9c      	ldr	r3, [pc, #624]	; (801f7fc <tcp_process+0x570>)
 801f58c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f58e:	885b      	ldrh	r3, [r3, #2]
 801f590:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f592:	4a9a      	ldr	r2, [pc, #616]	; (801f7fc <tcp_process+0x570>)
 801f594:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f596:	8812      	ldrh	r2, [r2, #0]
 801f598:	b292      	uxth	r2, r2
 801f59a:	9201      	str	r2, [sp, #4]
 801f59c:	9300      	str	r3, [sp, #0]
 801f59e:	4b98      	ldr	r3, [pc, #608]	; (801f800 <tcp_process+0x574>)
 801f5a0:	4a98      	ldr	r2, [pc, #608]	; (801f804 <tcp_process+0x578>)
 801f5a2:	f002 fca7 	bl	8021ef4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f5ac:	2b05      	cmp	r3, #5
 801f5ae:	f200 8208 	bhi.w	801f9c2 <tcp_process+0x736>
        pcb->rtime = 0;
 801f5b2:	687b      	ldr	r3, [r7, #4]
 801f5b4:	2200      	movs	r2, #0
 801f5b6:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 801f5b8:	6878      	ldr	r0, [r7, #4]
 801f5ba:	f002 fd0f 	bl	8021fdc <tcp_rexmit_rto>
    break;
 801f5be:	e200      	b.n	801f9c2 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 801f5c0:	4b8a      	ldr	r3, [pc, #552]	; (801f7ec <tcp_process+0x560>)
 801f5c2:	781b      	ldrb	r3, [r3, #0]
 801f5c4:	f003 0310 	and.w	r3, r3, #16
 801f5c8:	2b00      	cmp	r3, #0
 801f5ca:	f000 8091 	beq.w	801f6f0 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801f5ce:	4b88      	ldr	r3, [pc, #544]	; (801f7f0 <tcp_process+0x564>)
 801f5d0:	681a      	ldr	r2, [r3, #0]
 801f5d2:	687b      	ldr	r3, [r7, #4]
 801f5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f5d6:	1ad3      	subs	r3, r2, r3
 801f5d8:	3b01      	subs	r3, #1
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	db71      	blt.n	801f6c2 <tcp_process+0x436>
 801f5de:	4b84      	ldr	r3, [pc, #528]	; (801f7f0 <tcp_process+0x564>)
 801f5e0:	681a      	ldr	r2, [r3, #0]
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f5e6:	1ad3      	subs	r3, r2, r3
 801f5e8:	2b00      	cmp	r3, #0
 801f5ea:	dc6a      	bgt.n	801f6c2 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	2204      	movs	r2, #4
 801f5f0:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d00b      	beq.n	801f612 <tcp_process+0x386>
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f5fe:	699b      	ldr	r3, [r3, #24]
 801f600:	2b00      	cmp	r3, #0
 801f602:	d106      	bne.n	801f612 <tcp_process+0x386>
 801f604:	4b80      	ldr	r3, [pc, #512]	; (801f808 <tcp_process+0x57c>)
 801f606:	f240 3251 	movw	r2, #849	; 0x351
 801f60a:	4980      	ldr	r1, [pc, #512]	; (801f80c <tcp_process+0x580>)
 801f60c:	4880      	ldr	r0, [pc, #512]	; (801f810 <tcp_process+0x584>)
 801f60e:	f007 ff0f 	bl	8027430 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 801f612:	687b      	ldr	r3, [r7, #4]
 801f614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f616:	2b00      	cmp	r3, #0
 801f618:	d102      	bne.n	801f620 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 801f61a:	23fa      	movs	r3, #250	; 0xfa
 801f61c:	76bb      	strb	r3, [r7, #26]
 801f61e:	e011      	b.n	801f644 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f620:	687b      	ldr	r3, [r7, #4]
 801f622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f624:	699b      	ldr	r3, [r3, #24]
 801f626:	2b00      	cmp	r3, #0
 801f628:	d00a      	beq.n	801f640 <tcp_process+0x3b4>
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f62e:	699b      	ldr	r3, [r3, #24]
 801f630:	687a      	ldr	r2, [r7, #4]
 801f632:	6910      	ldr	r0, [r2, #16]
 801f634:	2200      	movs	r2, #0
 801f636:	6879      	ldr	r1, [r7, #4]
 801f638:	4798      	blx	r3
 801f63a:	4603      	mov	r3, r0
 801f63c:	76bb      	strb	r3, [r7, #26]
 801f63e:	e001      	b.n	801f644 <tcp_process+0x3b8>
 801f640:	23f0      	movs	r3, #240	; 0xf0
 801f642:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 801f644:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f648:	2b00      	cmp	r3, #0
 801f64a:	d00a      	beq.n	801f662 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 801f64c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f650:	f113 0f0d 	cmn.w	r3, #13
 801f654:	d002      	beq.n	801f65c <tcp_process+0x3d0>
            tcp_abort(pcb);
 801f656:	6878      	ldr	r0, [r7, #4]
 801f658:	f7fd ff56 	bl	801d508 <tcp_abort>
          }
          return ERR_ABRT;
 801f65c:	f06f 030c 	mvn.w	r3, #12
 801f660:	e1bd      	b.n	801f9de <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 801f662:	6878      	ldr	r0, [r7, #4]
 801f664:	f000 fa42 	bl	801faec <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 801f668:	4b6a      	ldr	r3, [pc, #424]	; (801f814 <tcp_process+0x588>)
 801f66a:	881b      	ldrh	r3, [r3, #0]
 801f66c:	2b00      	cmp	r3, #0
 801f66e:	d005      	beq.n	801f67c <tcp_process+0x3f0>
          recv_acked--;
 801f670:	4b68      	ldr	r3, [pc, #416]	; (801f814 <tcp_process+0x588>)
 801f672:	881b      	ldrh	r3, [r3, #0]
 801f674:	3b01      	subs	r3, #1
 801f676:	b29a      	uxth	r2, r3
 801f678:	4b66      	ldr	r3, [pc, #408]	; (801f814 <tcp_process+0x588>)
 801f67a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f680:	005b      	lsls	r3, r3, #1
 801f682:	f241 121c 	movw	r2, #4380	; 0x111c
 801f686:	429a      	cmp	r2, r3
 801f688:	bf38      	it	cc
 801f68a:	461a      	movcc	r2, r3
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f690:	009b      	lsls	r3, r3, #2
 801f692:	4293      	cmp	r3, r2
 801f694:	bf28      	it	cs
 801f696:	4613      	movcs	r3, r2
 801f698:	b29a      	uxth	r2, r3
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 801f6a0:	4b5d      	ldr	r3, [pc, #372]	; (801f818 <tcp_process+0x58c>)
 801f6a2:	781b      	ldrb	r3, [r3, #0]
 801f6a4:	f003 0320 	and.w	r3, r3, #32
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d034      	beq.n	801f716 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 801f6ac:	687b      	ldr	r3, [r7, #4]
 801f6ae:	7e9b      	ldrb	r3, [r3, #26]
 801f6b0:	f043 0302 	orr.w	r3, r3, #2
 801f6b4:	b2da      	uxtb	r2, r3
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	2207      	movs	r2, #7
 801f6be:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 801f6c0:	e029      	b.n	801f716 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f6c2:	4b4b      	ldr	r3, [pc, #300]	; (801f7f0 <tcp_process+0x564>)
 801f6c4:	6818      	ldr	r0, [r3, #0]
 801f6c6:	4b4b      	ldr	r3, [pc, #300]	; (801f7f4 <tcp_process+0x568>)
 801f6c8:	881b      	ldrh	r3, [r3, #0]
 801f6ca:	461a      	mov	r2, r3
 801f6cc:	4b4a      	ldr	r3, [pc, #296]	; (801f7f8 <tcp_process+0x56c>)
 801f6ce:	681b      	ldr	r3, [r3, #0]
 801f6d0:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f6d2:	4b4a      	ldr	r3, [pc, #296]	; (801f7fc <tcp_process+0x570>)
 801f6d4:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f6d6:	885b      	ldrh	r3, [r3, #2]
 801f6d8:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f6da:	4a48      	ldr	r2, [pc, #288]	; (801f7fc <tcp_process+0x570>)
 801f6dc:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f6de:	8812      	ldrh	r2, [r2, #0]
 801f6e0:	b292      	uxth	r2, r2
 801f6e2:	9201      	str	r2, [sp, #4]
 801f6e4:	9300      	str	r3, [sp, #0]
 801f6e6:	4b46      	ldr	r3, [pc, #280]	; (801f800 <tcp_process+0x574>)
 801f6e8:	4a46      	ldr	r2, [pc, #280]	; (801f804 <tcp_process+0x578>)
 801f6ea:	f002 fc03 	bl	8021ef4 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801f6ee:	e16a      	b.n	801f9c6 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801f6f0:	4b3e      	ldr	r3, [pc, #248]	; (801f7ec <tcp_process+0x560>)
 801f6f2:	781b      	ldrb	r3, [r3, #0]
 801f6f4:	f003 0302 	and.w	r3, r3, #2
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	f000 8164 	beq.w	801f9c6 <tcp_process+0x73a>
 801f6fe:	687b      	ldr	r3, [r7, #4]
 801f700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f702:	1e5a      	subs	r2, r3, #1
 801f704:	4b3c      	ldr	r3, [pc, #240]	; (801f7f8 <tcp_process+0x56c>)
 801f706:	681b      	ldr	r3, [r3, #0]
 801f708:	429a      	cmp	r2, r3
 801f70a:	f040 815c 	bne.w	801f9c6 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 801f70e:	6878      	ldr	r0, [r7, #4]
 801f710:	f002 fc9a 	bl	8022048 <tcp_rexmit>
    break;
 801f714:	e157      	b.n	801f9c6 <tcp_process+0x73a>
 801f716:	e156      	b.n	801f9c6 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 801f718:	6878      	ldr	r0, [r7, #4]
 801f71a:	f000 f9e7 	bl	801faec <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801f71e:	4b3e      	ldr	r3, [pc, #248]	; (801f818 <tcp_process+0x58c>)
 801f720:	781b      	ldrb	r3, [r3, #0]
 801f722:	f003 0320 	and.w	r3, r3, #32
 801f726:	2b00      	cmp	r3, #0
 801f728:	f000 814f 	beq.w	801f9ca <tcp_process+0x73e>
      tcp_ack_now(pcb);
 801f72c:	687b      	ldr	r3, [r7, #4]
 801f72e:	7e9b      	ldrb	r3, [r3, #26]
 801f730:	f043 0302 	orr.w	r3, r3, #2
 801f734:	b2da      	uxtb	r2, r3
 801f736:	687b      	ldr	r3, [r7, #4]
 801f738:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 801f73a:	687b      	ldr	r3, [r7, #4]
 801f73c:	2207      	movs	r2, #7
 801f73e:	751a      	strb	r2, [r3, #20]
    }
    break;
 801f740:	e143      	b.n	801f9ca <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 801f742:	6878      	ldr	r0, [r7, #4]
 801f744:	f000 f9d2 	bl	801faec <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801f748:	4b33      	ldr	r3, [pc, #204]	; (801f818 <tcp_process+0x58c>)
 801f74a:	781b      	ldrb	r3, [r3, #0]
 801f74c:	f003 0320 	and.w	r3, r3, #32
 801f750:	2b00      	cmp	r3, #0
 801f752:	d074      	beq.n	801f83e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f754:	4b25      	ldr	r3, [pc, #148]	; (801f7ec <tcp_process+0x560>)
 801f756:	781b      	ldrb	r3, [r3, #0]
 801f758:	f003 0310 	and.w	r3, r3, #16
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	d063      	beq.n	801f828 <tcp_process+0x59c>
 801f760:	687b      	ldr	r3, [r7, #4]
 801f762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f764:	4b22      	ldr	r3, [pc, #136]	; (801f7f0 <tcp_process+0x564>)
 801f766:	681b      	ldr	r3, [r3, #0]
 801f768:	429a      	cmp	r2, r3
 801f76a:	d15d      	bne.n	801f828 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f770:	2b00      	cmp	r3, #0
 801f772:	d159      	bne.n	801f828 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	7e9b      	ldrb	r3, [r3, #26]
 801f778:	f043 0302 	orr.w	r3, r3, #2
 801f77c:	b2da      	uxtb	r2, r3
 801f77e:	687b      	ldr	r3, [r7, #4]
 801f780:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801f782:	6878      	ldr	r0, [r7, #4]
 801f784:	f7fe feea 	bl	801e55c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f788:	4b24      	ldr	r3, [pc, #144]	; (801f81c <tcp_process+0x590>)
 801f78a:	681a      	ldr	r2, [r3, #0]
 801f78c:	687b      	ldr	r3, [r7, #4]
 801f78e:	429a      	cmp	r2, r3
 801f790:	d105      	bne.n	801f79e <tcp_process+0x512>
 801f792:	4b22      	ldr	r3, [pc, #136]	; (801f81c <tcp_process+0x590>)
 801f794:	681b      	ldr	r3, [r3, #0]
 801f796:	68db      	ldr	r3, [r3, #12]
 801f798:	4a20      	ldr	r2, [pc, #128]	; (801f81c <tcp_process+0x590>)
 801f79a:	6013      	str	r3, [r2, #0]
 801f79c:	e013      	b.n	801f7c6 <tcp_process+0x53a>
 801f79e:	4b1f      	ldr	r3, [pc, #124]	; (801f81c <tcp_process+0x590>)
 801f7a0:	681b      	ldr	r3, [r3, #0]
 801f7a2:	617b      	str	r3, [r7, #20]
 801f7a4:	e00c      	b.n	801f7c0 <tcp_process+0x534>
 801f7a6:	697b      	ldr	r3, [r7, #20]
 801f7a8:	68da      	ldr	r2, [r3, #12]
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	429a      	cmp	r2, r3
 801f7ae:	d104      	bne.n	801f7ba <tcp_process+0x52e>
 801f7b0:	687b      	ldr	r3, [r7, #4]
 801f7b2:	68da      	ldr	r2, [r3, #12]
 801f7b4:	697b      	ldr	r3, [r7, #20]
 801f7b6:	60da      	str	r2, [r3, #12]
 801f7b8:	e005      	b.n	801f7c6 <tcp_process+0x53a>
 801f7ba:	697b      	ldr	r3, [r7, #20]
 801f7bc:	68db      	ldr	r3, [r3, #12]
 801f7be:	617b      	str	r3, [r7, #20]
 801f7c0:	697b      	ldr	r3, [r7, #20]
 801f7c2:	2b00      	cmp	r3, #0
 801f7c4:	d1ef      	bne.n	801f7a6 <tcp_process+0x51a>
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	2200      	movs	r2, #0
 801f7ca:	60da      	str	r2, [r3, #12]
 801f7cc:	4b14      	ldr	r3, [pc, #80]	; (801f820 <tcp_process+0x594>)
 801f7ce:	2201      	movs	r2, #1
 801f7d0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	220a      	movs	r2, #10
 801f7d6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f7d8:	4b12      	ldr	r3, [pc, #72]	; (801f824 <tcp_process+0x598>)
 801f7da:	681a      	ldr	r2, [r3, #0]
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	60da      	str	r2, [r3, #12]
 801f7e0:	4a10      	ldr	r2, [pc, #64]	; (801f824 <tcp_process+0x598>)
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	6013      	str	r3, [r2, #0]
 801f7e6:	f002 fdd3 	bl	8022390 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801f7ea:	e0f0      	b.n	801f9ce <tcp_process+0x742>
 801f7ec:	20009520 	.word	0x20009520
 801f7f0:	20009518 	.word	0x20009518
 801f7f4:	2000951e 	.word	0x2000951e
 801f7f8:	20009514 	.word	0x20009514
 801f7fc:	20009504 	.word	0x20009504
 801f800:	2000a288 	.word	0x2000a288
 801f804:	2000a28c 	.word	0x2000a28c
 801f808:	0802abf8 	.word	0x0802abf8
 801f80c:	0802adfc 	.word	0x0802adfc
 801f810:	0802ac3c 	.word	0x0802ac3c
 801f814:	2000951c 	.word	0x2000951c
 801f818:	20009521 	.word	0x20009521
 801f81c:	2000ecdc 	.word	0x2000ecdc
 801f820:	2000ecd8 	.word	0x2000ecd8
 801f824:	2000ecec 	.word	0x2000ecec
        tcp_ack_now(pcb);
 801f828:	687b      	ldr	r3, [r7, #4]
 801f82a:	7e9b      	ldrb	r3, [r3, #26]
 801f82c:	f043 0302 	orr.w	r3, r3, #2
 801f830:	b2da      	uxtb	r2, r3
 801f832:	687b      	ldr	r3, [r7, #4]
 801f834:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	2208      	movs	r2, #8
 801f83a:	751a      	strb	r2, [r3, #20]
    break;
 801f83c:	e0c7      	b.n	801f9ce <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f83e:	4b6a      	ldr	r3, [pc, #424]	; (801f9e8 <tcp_process+0x75c>)
 801f840:	781b      	ldrb	r3, [r3, #0]
 801f842:	f003 0310 	and.w	r3, r3, #16
 801f846:	2b00      	cmp	r3, #0
 801f848:	f000 80c1 	beq.w	801f9ce <tcp_process+0x742>
 801f84c:	687b      	ldr	r3, [r7, #4]
 801f84e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f850:	4b66      	ldr	r3, [pc, #408]	; (801f9ec <tcp_process+0x760>)
 801f852:	681b      	ldr	r3, [r3, #0]
 801f854:	429a      	cmp	r2, r3
 801f856:	f040 80ba 	bne.w	801f9ce <tcp_process+0x742>
               pcb->unsent == NULL) {
 801f85a:	687b      	ldr	r3, [r7, #4]
 801f85c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f85e:	2b00      	cmp	r3, #0
 801f860:	f040 80b5 	bne.w	801f9ce <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 801f864:	687b      	ldr	r3, [r7, #4]
 801f866:	2206      	movs	r2, #6
 801f868:	751a      	strb	r2, [r3, #20]
    break;
 801f86a:	e0b0      	b.n	801f9ce <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801f86c:	6878      	ldr	r0, [r7, #4]
 801f86e:	f000 f93d 	bl	801faec <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801f872:	4b5f      	ldr	r3, [pc, #380]	; (801f9f0 <tcp_process+0x764>)
 801f874:	781b      	ldrb	r3, [r3, #0]
 801f876:	f003 0320 	and.w	r3, r3, #32
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	f000 80a9 	beq.w	801f9d2 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 801f880:	687b      	ldr	r3, [r7, #4]
 801f882:	7e9b      	ldrb	r3, [r3, #26]
 801f884:	f043 0302 	orr.w	r3, r3, #2
 801f888:	b2da      	uxtb	r2, r3
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801f88e:	6878      	ldr	r0, [r7, #4]
 801f890:	f7fe fe64 	bl	801e55c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801f894:	4b57      	ldr	r3, [pc, #348]	; (801f9f4 <tcp_process+0x768>)
 801f896:	681a      	ldr	r2, [r3, #0]
 801f898:	687b      	ldr	r3, [r7, #4]
 801f89a:	429a      	cmp	r2, r3
 801f89c:	d105      	bne.n	801f8aa <tcp_process+0x61e>
 801f89e:	4b55      	ldr	r3, [pc, #340]	; (801f9f4 <tcp_process+0x768>)
 801f8a0:	681b      	ldr	r3, [r3, #0]
 801f8a2:	68db      	ldr	r3, [r3, #12]
 801f8a4:	4a53      	ldr	r2, [pc, #332]	; (801f9f4 <tcp_process+0x768>)
 801f8a6:	6013      	str	r3, [r2, #0]
 801f8a8:	e013      	b.n	801f8d2 <tcp_process+0x646>
 801f8aa:	4b52      	ldr	r3, [pc, #328]	; (801f9f4 <tcp_process+0x768>)
 801f8ac:	681b      	ldr	r3, [r3, #0]
 801f8ae:	613b      	str	r3, [r7, #16]
 801f8b0:	e00c      	b.n	801f8cc <tcp_process+0x640>
 801f8b2:	693b      	ldr	r3, [r7, #16]
 801f8b4:	68da      	ldr	r2, [r3, #12]
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	429a      	cmp	r2, r3
 801f8ba:	d104      	bne.n	801f8c6 <tcp_process+0x63a>
 801f8bc:	687b      	ldr	r3, [r7, #4]
 801f8be:	68da      	ldr	r2, [r3, #12]
 801f8c0:	693b      	ldr	r3, [r7, #16]
 801f8c2:	60da      	str	r2, [r3, #12]
 801f8c4:	e005      	b.n	801f8d2 <tcp_process+0x646>
 801f8c6:	693b      	ldr	r3, [r7, #16]
 801f8c8:	68db      	ldr	r3, [r3, #12]
 801f8ca:	613b      	str	r3, [r7, #16]
 801f8cc:	693b      	ldr	r3, [r7, #16]
 801f8ce:	2b00      	cmp	r3, #0
 801f8d0:	d1ef      	bne.n	801f8b2 <tcp_process+0x626>
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	2200      	movs	r2, #0
 801f8d6:	60da      	str	r2, [r3, #12]
 801f8d8:	4b47      	ldr	r3, [pc, #284]	; (801f9f8 <tcp_process+0x76c>)
 801f8da:	2201      	movs	r2, #1
 801f8dc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	220a      	movs	r2, #10
 801f8e2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801f8e4:	4b45      	ldr	r3, [pc, #276]	; (801f9fc <tcp_process+0x770>)
 801f8e6:	681a      	ldr	r2, [r3, #0]
 801f8e8:	687b      	ldr	r3, [r7, #4]
 801f8ea:	60da      	str	r2, [r3, #12]
 801f8ec:	4a43      	ldr	r2, [pc, #268]	; (801f9fc <tcp_process+0x770>)
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	6013      	str	r3, [r2, #0]
 801f8f2:	f002 fd4d 	bl	8022390 <tcp_timer_needed>
    }
    break;
 801f8f6:	e06c      	b.n	801f9d2 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 801f8f8:	6878      	ldr	r0, [r7, #4]
 801f8fa:	f000 f8f7 	bl	801faec <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801f8fe:	4b3a      	ldr	r3, [pc, #232]	; (801f9e8 <tcp_process+0x75c>)
 801f900:	781b      	ldrb	r3, [r3, #0]
 801f902:	f003 0310 	and.w	r3, r3, #16
 801f906:	2b00      	cmp	r3, #0
 801f908:	d065      	beq.n	801f9d6 <tcp_process+0x74a>
 801f90a:	687b      	ldr	r3, [r7, #4]
 801f90c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f90e:	4b37      	ldr	r3, [pc, #220]	; (801f9ec <tcp_process+0x760>)
 801f910:	681b      	ldr	r3, [r3, #0]
 801f912:	429a      	cmp	r2, r3
 801f914:	d15f      	bne.n	801f9d6 <tcp_process+0x74a>
 801f916:	687b      	ldr	r3, [r7, #4]
 801f918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f91a:	2b00      	cmp	r3, #0
 801f91c:	d15b      	bne.n	801f9d6 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801f91e:	6878      	ldr	r0, [r7, #4]
 801f920:	f7fe fe1c 	bl	801e55c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801f924:	4b33      	ldr	r3, [pc, #204]	; (801f9f4 <tcp_process+0x768>)
 801f926:	681a      	ldr	r2, [r3, #0]
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	429a      	cmp	r2, r3
 801f92c:	d105      	bne.n	801f93a <tcp_process+0x6ae>
 801f92e:	4b31      	ldr	r3, [pc, #196]	; (801f9f4 <tcp_process+0x768>)
 801f930:	681b      	ldr	r3, [r3, #0]
 801f932:	68db      	ldr	r3, [r3, #12]
 801f934:	4a2f      	ldr	r2, [pc, #188]	; (801f9f4 <tcp_process+0x768>)
 801f936:	6013      	str	r3, [r2, #0]
 801f938:	e013      	b.n	801f962 <tcp_process+0x6d6>
 801f93a:	4b2e      	ldr	r3, [pc, #184]	; (801f9f4 <tcp_process+0x768>)
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	60fb      	str	r3, [r7, #12]
 801f940:	e00c      	b.n	801f95c <tcp_process+0x6d0>
 801f942:	68fb      	ldr	r3, [r7, #12]
 801f944:	68da      	ldr	r2, [r3, #12]
 801f946:	687b      	ldr	r3, [r7, #4]
 801f948:	429a      	cmp	r2, r3
 801f94a:	d104      	bne.n	801f956 <tcp_process+0x6ca>
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	68da      	ldr	r2, [r3, #12]
 801f950:	68fb      	ldr	r3, [r7, #12]
 801f952:	60da      	str	r2, [r3, #12]
 801f954:	e005      	b.n	801f962 <tcp_process+0x6d6>
 801f956:	68fb      	ldr	r3, [r7, #12]
 801f958:	68db      	ldr	r3, [r3, #12]
 801f95a:	60fb      	str	r3, [r7, #12]
 801f95c:	68fb      	ldr	r3, [r7, #12]
 801f95e:	2b00      	cmp	r3, #0
 801f960:	d1ef      	bne.n	801f942 <tcp_process+0x6b6>
 801f962:	687b      	ldr	r3, [r7, #4]
 801f964:	2200      	movs	r2, #0
 801f966:	60da      	str	r2, [r3, #12]
 801f968:	4b23      	ldr	r3, [pc, #140]	; (801f9f8 <tcp_process+0x76c>)
 801f96a:	2201      	movs	r2, #1
 801f96c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801f96e:	687b      	ldr	r3, [r7, #4]
 801f970:	220a      	movs	r2, #10
 801f972:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801f974:	4b21      	ldr	r3, [pc, #132]	; (801f9fc <tcp_process+0x770>)
 801f976:	681a      	ldr	r2, [r3, #0]
 801f978:	687b      	ldr	r3, [r7, #4]
 801f97a:	60da      	str	r2, [r3, #12]
 801f97c:	4a1f      	ldr	r2, [pc, #124]	; (801f9fc <tcp_process+0x770>)
 801f97e:	687b      	ldr	r3, [r7, #4]
 801f980:	6013      	str	r3, [r2, #0]
 801f982:	f002 fd05 	bl	8022390 <tcp_timer_needed>
    }
    break;
 801f986:	e026      	b.n	801f9d6 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 801f988:	6878      	ldr	r0, [r7, #4]
 801f98a:	f000 f8af 	bl	801faec <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801f98e:	4b16      	ldr	r3, [pc, #88]	; (801f9e8 <tcp_process+0x75c>)
 801f990:	781b      	ldrb	r3, [r3, #0]
 801f992:	f003 0310 	and.w	r3, r3, #16
 801f996:	2b00      	cmp	r3, #0
 801f998:	d01f      	beq.n	801f9da <tcp_process+0x74e>
 801f99a:	687b      	ldr	r3, [r7, #4]
 801f99c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f99e:	4b13      	ldr	r3, [pc, #76]	; (801f9ec <tcp_process+0x760>)
 801f9a0:	681b      	ldr	r3, [r3, #0]
 801f9a2:	429a      	cmp	r2, r3
 801f9a4:	d119      	bne.n	801f9da <tcp_process+0x74e>
 801f9a6:	687b      	ldr	r3, [r7, #4]
 801f9a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f9aa:	2b00      	cmp	r3, #0
 801f9ac:	d115      	bne.n	801f9da <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 801f9ae:	4b10      	ldr	r3, [pc, #64]	; (801f9f0 <tcp_process+0x764>)
 801f9b0:	781b      	ldrb	r3, [r3, #0]
 801f9b2:	f043 0310 	orr.w	r3, r3, #16
 801f9b6:	b2da      	uxtb	r2, r3
 801f9b8:	4b0d      	ldr	r3, [pc, #52]	; (801f9f0 <tcp_process+0x764>)
 801f9ba:	701a      	strb	r2, [r3, #0]
    }
    break;
 801f9bc:	e00d      	b.n	801f9da <tcp_process+0x74e>
  default:
    break;
 801f9be:	bf00      	nop
 801f9c0:	e00c      	b.n	801f9dc <tcp_process+0x750>
    break;
 801f9c2:	bf00      	nop
 801f9c4:	e00a      	b.n	801f9dc <tcp_process+0x750>
    break;
 801f9c6:	bf00      	nop
 801f9c8:	e008      	b.n	801f9dc <tcp_process+0x750>
    break;
 801f9ca:	bf00      	nop
 801f9cc:	e006      	b.n	801f9dc <tcp_process+0x750>
    break;
 801f9ce:	bf00      	nop
 801f9d0:	e004      	b.n	801f9dc <tcp_process+0x750>
    break;
 801f9d2:	bf00      	nop
 801f9d4:	e002      	b.n	801f9dc <tcp_process+0x750>
    break;
 801f9d6:	bf00      	nop
 801f9d8:	e000      	b.n	801f9dc <tcp_process+0x750>
    break;
 801f9da:	bf00      	nop
  }
  return ERR_OK;
 801f9dc:	2300      	movs	r3, #0
}
 801f9de:	4618      	mov	r0, r3
 801f9e0:	3720      	adds	r7, #32
 801f9e2:	46bd      	mov	sp, r7
 801f9e4:	bd80      	pop	{r7, pc}
 801f9e6:	bf00      	nop
 801f9e8:	20009520 	.word	0x20009520
 801f9ec:	20009518 	.word	0x20009518
 801f9f0:	20009521 	.word	0x20009521
 801f9f4:	2000ecdc 	.word	0x2000ecdc
 801f9f8:	2000ecd8 	.word	0x2000ecd8
 801f9fc:	2000ecec 	.word	0x2000ecec

0801fa00 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801fa00:	b5b0      	push	{r4, r5, r7, lr}
 801fa02:	b084      	sub	sp, #16
 801fa04:	af00      	add	r7, sp, #0
 801fa06:	6078      	str	r0, [r7, #4]
 801fa08:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801fa0a:	687b      	ldr	r3, [r7, #4]
 801fa0c:	68db      	ldr	r3, [r3, #12]
 801fa0e:	899b      	ldrh	r3, [r3, #12]
 801fa10:	b29b      	uxth	r3, r3
 801fa12:	4618      	mov	r0, r3
 801fa14:	f7f9 fc08 	bl	8019228 <lwip_htons>
 801fa18:	4603      	mov	r3, r0
 801fa1a:	f003 0301 	and.w	r3, r3, #1
 801fa1e:	2b00      	cmp	r3, #0
 801fa20:	d026      	beq.n	801fa70 <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801fa22:	6838      	ldr	r0, [r7, #0]
 801fa24:	f7fe fb31 	bl	801e08a <tcp_segs_free>
    next = NULL;
 801fa28:	2300      	movs	r3, #0
 801fa2a:	603b      	str	r3, [r7, #0]
 801fa2c:	e054      	b.n	801fad8 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801fa2e:	683b      	ldr	r3, [r7, #0]
 801fa30:	68db      	ldr	r3, [r3, #12]
 801fa32:	899b      	ldrh	r3, [r3, #12]
 801fa34:	b29b      	uxth	r3, r3
 801fa36:	4618      	mov	r0, r3
 801fa38:	f7f9 fbf6 	bl	8019228 <lwip_htons>
 801fa3c:	4603      	mov	r3, r0
 801fa3e:	f003 0301 	and.w	r3, r3, #1
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	d00c      	beq.n	801fa60 <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	68dc      	ldr	r4, [r3, #12]
 801fa4a:	687b      	ldr	r3, [r7, #4]
 801fa4c:	68db      	ldr	r3, [r3, #12]
 801fa4e:	899b      	ldrh	r3, [r3, #12]
 801fa50:	b29d      	uxth	r5, r3
 801fa52:	2001      	movs	r0, #1
 801fa54:	f7f9 fbe8 	bl	8019228 <lwip_htons>
 801fa58:	4603      	mov	r3, r0
 801fa5a:	432b      	orrs	r3, r5
 801fa5c:	b29b      	uxth	r3, r3
 801fa5e:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 801fa60:	683b      	ldr	r3, [r7, #0]
 801fa62:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801fa64:	683b      	ldr	r3, [r7, #0]
 801fa66:	681b      	ldr	r3, [r3, #0]
 801fa68:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801fa6a:	68f8      	ldr	r0, [r7, #12]
 801fa6c:	f7fe fb21 	bl	801e0b2 <tcp_seg_free>
    while (next &&
 801fa70:	683b      	ldr	r3, [r7, #0]
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	d00e      	beq.n	801fa94 <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	891b      	ldrh	r3, [r3, #8]
 801fa7a:	461a      	mov	r2, r3
 801fa7c:	4b1a      	ldr	r3, [pc, #104]	; (801fae8 <tcp_oos_insert_segment+0xe8>)
 801fa7e:	681b      	ldr	r3, [r3, #0]
 801fa80:	441a      	add	r2, r3
 801fa82:	683b      	ldr	r3, [r7, #0]
 801fa84:	68db      	ldr	r3, [r3, #12]
 801fa86:	685b      	ldr	r3, [r3, #4]
 801fa88:	6839      	ldr	r1, [r7, #0]
 801fa8a:	8909      	ldrh	r1, [r1, #8]
 801fa8c:	440b      	add	r3, r1
 801fa8e:	1ad3      	subs	r3, r2, r3
    while (next &&
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	dacc      	bge.n	801fa2e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 801fa94:	683b      	ldr	r3, [r7, #0]
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	d01e      	beq.n	801fad8 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	891b      	ldrh	r3, [r3, #8]
 801fa9e:	461a      	mov	r2, r3
 801faa0:	4b11      	ldr	r3, [pc, #68]	; (801fae8 <tcp_oos_insert_segment+0xe8>)
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	441a      	add	r2, r3
 801faa6:	683b      	ldr	r3, [r7, #0]
 801faa8:	68db      	ldr	r3, [r3, #12]
 801faaa:	685b      	ldr	r3, [r3, #4]
 801faac:	1ad3      	subs	r3, r2, r3
    if (next &&
 801faae:	2b00      	cmp	r3, #0
 801fab0:	dd12      	ble.n	801fad8 <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801fab2:	683b      	ldr	r3, [r7, #0]
 801fab4:	68db      	ldr	r3, [r3, #12]
 801fab6:	685b      	ldr	r3, [r3, #4]
 801fab8:	b29a      	uxth	r2, r3
 801faba:	4b0b      	ldr	r3, [pc, #44]	; (801fae8 <tcp_oos_insert_segment+0xe8>)
 801fabc:	681b      	ldr	r3, [r3, #0]
 801fabe:	b29b      	uxth	r3, r3
 801fac0:	1ad3      	subs	r3, r2, r3
 801fac2:	b29a      	uxth	r2, r3
 801fac4:	687b      	ldr	r3, [r7, #4]
 801fac6:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801fac8:	687b      	ldr	r3, [r7, #4]
 801faca:	685a      	ldr	r2, [r3, #4]
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	891b      	ldrh	r3, [r3, #8]
 801fad0:	4619      	mov	r1, r3
 801fad2:	4610      	mov	r0, r2
 801fad4:	f7fc fe5e 	bl	801c794 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801fad8:	687b      	ldr	r3, [r7, #4]
 801fada:	683a      	ldr	r2, [r7, #0]
 801fadc:	601a      	str	r2, [r3, #0]
}
 801fade:	bf00      	nop
 801fae0:	3710      	adds	r7, #16
 801fae2:	46bd      	mov	sp, r7
 801fae4:	bdb0      	pop	{r4, r5, r7, pc}
 801fae6:	bf00      	nop
 801fae8:	20009514 	.word	0x20009514

0801faec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801faec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801faee:	b08d      	sub	sp, #52	; 0x34
 801faf0:	af00      	add	r7, sp, #0
 801faf2:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 801faf4:	2300      	movs	r3, #0
 801faf6:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	7d1b      	ldrb	r3, [r3, #20]
 801fafc:	2b03      	cmp	r3, #3
 801fafe:	d806      	bhi.n	801fb0e <tcp_receive+0x22>
 801fb00:	4b9a      	ldr	r3, [pc, #616]	; (801fd6c <tcp_receive+0x280>)
 801fb02:	f44f 6281 	mov.w	r2, #1032	; 0x408
 801fb06:	499a      	ldr	r1, [pc, #616]	; (801fd70 <tcp_receive+0x284>)
 801fb08:	489a      	ldr	r0, [pc, #616]	; (801fd74 <tcp_receive+0x288>)
 801fb0a:	f007 fc91 	bl	8027430 <iprintf>

  if (flags & TCP_ACK) {
 801fb0e:	4b9a      	ldr	r3, [pc, #616]	; (801fd78 <tcp_receive+0x28c>)
 801fb10:	781b      	ldrb	r3, [r3, #0]
 801fb12:	f003 0310 	and.w	r3, r3, #16
 801fb16:	2b00      	cmp	r3, #0
 801fb18:	f000 82c5 	beq.w	80200a6 <tcp_receive+0x5ba>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801fb1c:	687b      	ldr	r3, [r7, #4]
 801fb1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fb22:	461a      	mov	r2, r3
 801fb24:	687b      	ldr	r3, [r7, #4]
 801fb26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fb28:	4413      	add	r3, r2
 801fb2a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801fb2c:	687b      	ldr	r3, [r7, #4]
 801fb2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fb30:	4b92      	ldr	r3, [pc, #584]	; (801fd7c <tcp_receive+0x290>)
 801fb32:	681b      	ldr	r3, [r3, #0]
 801fb34:	1ad3      	subs	r3, r2, r3
 801fb36:	2b00      	cmp	r3, #0
 801fb38:	db1b      	blt.n	801fb72 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fb3a:	687b      	ldr	r3, [r7, #4]
 801fb3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fb3e:	4b8f      	ldr	r3, [pc, #572]	; (801fd7c <tcp_receive+0x290>)
 801fb40:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801fb42:	429a      	cmp	r2, r3
 801fb44:	d106      	bne.n	801fb54 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fb46:	687b      	ldr	r3, [r7, #4]
 801fb48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fb4a:	4b8d      	ldr	r3, [pc, #564]	; (801fd80 <tcp_receive+0x294>)
 801fb4c:	681b      	ldr	r3, [r3, #0]
 801fb4e:	1ad3      	subs	r3, r2, r3
 801fb50:	2b00      	cmp	r3, #0
 801fb52:	db0e      	blt.n	801fb72 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801fb54:	687b      	ldr	r3, [r7, #4]
 801fb56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fb58:	4b89      	ldr	r3, [pc, #548]	; (801fd80 <tcp_receive+0x294>)
 801fb5a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fb5c:	429a      	cmp	r2, r3
 801fb5e:	d141      	bne.n	801fbe4 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801fb60:	4b88      	ldr	r3, [pc, #544]	; (801fd84 <tcp_receive+0x298>)
 801fb62:	681b      	ldr	r3, [r3, #0]
 801fb64:	89db      	ldrh	r3, [r3, #14]
 801fb66:	b29a      	uxth	r2, r3
 801fb68:	687b      	ldr	r3, [r7, #4]
 801fb6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fb6e:	429a      	cmp	r2, r3
 801fb70:	d938      	bls.n	801fbe4 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801fb72:	4b84      	ldr	r3, [pc, #528]	; (801fd84 <tcp_receive+0x298>)
 801fb74:	681b      	ldr	r3, [r3, #0]
 801fb76:	89db      	ldrh	r3, [r3, #14]
 801fb78:	b29a      	uxth	r2, r3
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801fb80:	687b      	ldr	r3, [r7, #4]
 801fb82:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fb8c:	429a      	cmp	r2, r3
 801fb8e:	d205      	bcs.n	801fb9c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801fb90:	687b      	ldr	r3, [r7, #4]
 801fb92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801fb96:	687b      	ldr	r3, [r7, #4]
 801fb98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 801fb9c:	4b77      	ldr	r3, [pc, #476]	; (801fd7c <tcp_receive+0x290>)
 801fb9e:	681a      	ldr	r2, [r3, #0]
 801fba0:	687b      	ldr	r3, [r7, #4]
 801fba2:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 801fba4:	4b76      	ldr	r3, [pc, #472]	; (801fd80 <tcp_receive+0x294>)
 801fba6:	681a      	ldr	r2, [r3, #0]
 801fba8:	687b      	ldr	r3, [r7, #4]
 801fbaa:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 801fbac:	687b      	ldr	r3, [r7, #4]
 801fbae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fbb2:	2b00      	cmp	r3, #0
 801fbb4:	d10d      	bne.n	801fbd2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 801fbb6:	687b      	ldr	r3, [r7, #4]
 801fbb8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801fbbc:	2b00      	cmp	r3, #0
 801fbbe:	d111      	bne.n	801fbe4 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 801fbc0:	687b      	ldr	r3, [r7, #4]
 801fbc2:	2200      	movs	r2, #0
 801fbc4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 801fbc8:	687b      	ldr	r3, [r7, #4]
 801fbca:	2201      	movs	r2, #1
 801fbcc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 801fbd0:	e008      	b.n	801fbe4 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 801fbd2:	687b      	ldr	r3, [r7, #4]
 801fbd4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801fbd8:	2b00      	cmp	r3, #0
 801fbda:	d003      	beq.n	801fbe4 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801fbdc:	687b      	ldr	r3, [r7, #4]
 801fbde:	2200      	movs	r2, #0
 801fbe0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801fbe4:	4b66      	ldr	r3, [pc, #408]	; (801fd80 <tcp_receive+0x294>)
 801fbe6:	681a      	ldr	r2, [r3, #0]
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fbec:	1ad3      	subs	r3, r2, r3
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	dc58      	bgt.n	801fca4 <tcp_receive+0x1b8>
      /* Clause 2 */
      if (tcplen == 0) {
 801fbf2:	4b65      	ldr	r3, [pc, #404]	; (801fd88 <tcp_receive+0x29c>)
 801fbf4:	881b      	ldrh	r3, [r3, #0]
 801fbf6:	2b00      	cmp	r3, #0
 801fbf8:	d14b      	bne.n	801fc92 <tcp_receive+0x1a6>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801fbfa:	687b      	ldr	r3, [r7, #4]
 801fbfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fbfe:	687a      	ldr	r2, [r7, #4]
 801fc00:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 801fc04:	441a      	add	r2, r3
 801fc06:	697b      	ldr	r3, [r7, #20]
 801fc08:	429a      	cmp	r2, r3
 801fc0a:	d142      	bne.n	801fc92 <tcp_receive+0x1a6>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801fc0c:	687b      	ldr	r3, [r7, #4]
 801fc0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	db3d      	blt.n	801fc92 <tcp_receive+0x1a6>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801fc16:	687b      	ldr	r3, [r7, #4]
 801fc18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fc1a:	4b59      	ldr	r3, [pc, #356]	; (801fd80 <tcp_receive+0x294>)
 801fc1c:	681b      	ldr	r3, [r3, #0]
 801fc1e:	429a      	cmp	r2, r3
 801fc20:	d137      	bne.n	801fc92 <tcp_receive+0x1a6>
              found_dupack = 1;
 801fc22:	2301      	movs	r3, #1
 801fc24:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801fc26:	687b      	ldr	r3, [r7, #4]
 801fc28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fc2c:	3301      	adds	r3, #1
 801fc2e:	b2da      	uxtb	r2, r3
 801fc30:	687b      	ldr	r3, [r7, #4]
 801fc32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fc36:	429a      	cmp	r2, r3
 801fc38:	d907      	bls.n	801fc4a <tcp_receive+0x15e>
                ++pcb->dupacks;
 801fc3a:	687b      	ldr	r3, [r7, #4]
 801fc3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fc40:	3301      	adds	r3, #1
 801fc42:	b2da      	uxtb	r2, r3
 801fc44:	687b      	ldr	r3, [r7, #4]
 801fc46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801fc4a:	687b      	ldr	r3, [r7, #4]
 801fc4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fc50:	2b03      	cmp	r3, #3
 801fc52:	d916      	bls.n	801fc82 <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801fc5a:	687b      	ldr	r3, [r7, #4]
 801fc5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801fc5e:	4413      	add	r3, r2
 801fc60:	b29a      	uxth	r2, r3
 801fc62:	687b      	ldr	r3, [r7, #4]
 801fc64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801fc68:	429a      	cmp	r2, r3
 801fc6a:	d912      	bls.n	801fc92 <tcp_receive+0x1a6>
                  pcb->cwnd += pcb->mss;
 801fc6c:	687b      	ldr	r3, [r7, #4]
 801fc6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801fc72:	687b      	ldr	r3, [r7, #4]
 801fc74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801fc76:	4413      	add	r3, r2
 801fc78:	b29a      	uxth	r2, r3
 801fc7a:	687b      	ldr	r3, [r7, #4]
 801fc7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801fc80:	e007      	b.n	801fc92 <tcp_receive+0x1a6>
                }
              } else if (pcb->dupacks == 3) {
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fc88:	2b03      	cmp	r3, #3
 801fc8a:	d102      	bne.n	801fc92 <tcp_receive+0x1a6>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 801fc8c:	6878      	ldr	r0, [r7, #4]
 801fc8e:	f002 fa2b 	bl	80220e8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801fc92:	69fb      	ldr	r3, [r7, #28]
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	f040 8169 	bne.w	801ff6c <tcp_receive+0x480>
        pcb->dupacks = 0;
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	2200      	movs	r2, #0
 801fc9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fca2:	e163      	b.n	801ff6c <tcp_receive+0x480>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801fca4:	4b36      	ldr	r3, [pc, #216]	; (801fd80 <tcp_receive+0x294>)
 801fca6:	681a      	ldr	r2, [r3, #0]
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fcac:	1ad3      	subs	r3, r2, r3
 801fcae:	3b01      	subs	r3, #1
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	f2c0 8107 	blt.w	801fec4 <tcp_receive+0x3d8>
 801fcb6:	4b32      	ldr	r3, [pc, #200]	; (801fd80 <tcp_receive+0x294>)
 801fcb8:	681a      	ldr	r2, [r3, #0]
 801fcba:	687b      	ldr	r3, [r7, #4]
 801fcbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fcbe:	1ad3      	subs	r3, r2, r3
 801fcc0:	2b00      	cmp	r3, #0
 801fcc2:	f300 80ff 	bgt.w	801fec4 <tcp_receive+0x3d8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	7e9b      	ldrb	r3, [r3, #26]
 801fcca:	f003 0304 	and.w	r3, r3, #4
 801fcce:	2b00      	cmp	r3, #0
 801fcd0:	d00c      	beq.n	801fcec <tcp_receive+0x200>
        pcb->flags &= ~TF_INFR;
 801fcd2:	687b      	ldr	r3, [r7, #4]
 801fcd4:	7e9b      	ldrb	r3, [r3, #26]
 801fcd6:	f023 0304 	bic.w	r3, r3, #4
 801fcda:	b2da      	uxtb	r2, r3
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801fce6:	687b      	ldr	r3, [r7, #4]
 801fce8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801fcec:	687b      	ldr	r3, [r7, #4]
 801fcee:	2200      	movs	r2, #0
 801fcf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801fcfa:	10db      	asrs	r3, r3, #3
 801fcfc:	b21b      	sxth	r3, r3
 801fcfe:	b29a      	uxth	r2, r3
 801fd00:	687b      	ldr	r3, [r7, #4]
 801fd02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801fd06:	b29b      	uxth	r3, r3
 801fd08:	4413      	add	r3, r2
 801fd0a:	b29b      	uxth	r3, r3
 801fd0c:	b21a      	sxth	r2, r3
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	2200      	movs	r2, #0
 801fd18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801fd1c:	4b18      	ldr	r3, [pc, #96]	; (801fd80 <tcp_receive+0x294>)
 801fd1e:	681a      	ldr	r2, [r3, #0]
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801fd24:	687b      	ldr	r3, [r7, #4]
 801fd26:	7d1b      	ldrb	r3, [r3, #20]
 801fd28:	2b03      	cmp	r3, #3
 801fd2a:	f240 8094 	bls.w	801fe56 <tcp_receive+0x36a>
        if (pcb->cwnd < pcb->ssthresh) {
 801fd2e:	687b      	ldr	r3, [r7, #4]
 801fd30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801fd34:	687b      	ldr	r3, [r7, #4]
 801fd36:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801fd3a:	429a      	cmp	r2, r3
 801fd3c:	d226      	bcs.n	801fd8c <tcp_receive+0x2a0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801fd3e:	687b      	ldr	r3, [r7, #4]
 801fd40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801fd44:	687b      	ldr	r3, [r7, #4]
 801fd46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801fd48:	4413      	add	r3, r2
 801fd4a:	b29a      	uxth	r2, r3
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801fd52:	429a      	cmp	r2, r3
 801fd54:	d97f      	bls.n	801fe56 <tcp_receive+0x36a>
            pcb->cwnd += pcb->mss;
 801fd56:	687b      	ldr	r3, [r7, #4]
 801fd58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801fd5c:	687b      	ldr	r3, [r7, #4]
 801fd5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801fd60:	4413      	add	r3, r2
 801fd62:	b29a      	uxth	r2, r3
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801fd6a:	e074      	b.n	801fe56 <tcp_receive+0x36a>
 801fd6c:	0802abf8 	.word	0x0802abf8
 801fd70:	0802ae1c 	.word	0x0802ae1c
 801fd74:	0802ac3c 	.word	0x0802ac3c
 801fd78:	20009520 	.word	0x20009520
 801fd7c:	20009514 	.word	0x20009514
 801fd80:	20009518 	.word	0x20009518
 801fd84:	20009504 	.word	0x20009504
 801fd88:	2000951e 	.word	0x2000951e
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801fd92:	687b      	ldr	r3, [r7, #4]
 801fd94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801fd96:	4619      	mov	r1, r3
 801fd98:	687b      	ldr	r3, [r7, #4]
 801fd9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801fd9c:	fb03 f301 	mul.w	r3, r3, r1
 801fda0:	6879      	ldr	r1, [r7, #4]
 801fda2:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 801fda6:	fb93 f3f1 	sdiv	r3, r3, r1
 801fdaa:	b29b      	uxth	r3, r3
 801fdac:	4413      	add	r3, r2
 801fdae:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 801fdb0:	687b      	ldr	r3, [r7, #4]
 801fdb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801fdb6:	8a7a      	ldrh	r2, [r7, #18]
 801fdb8:	429a      	cmp	r2, r3
 801fdba:	d94c      	bls.n	801fe56 <tcp_receive+0x36a>
            pcb->cwnd = new_cwnd;
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	8a7a      	ldrh	r2, [r7, #18]
 801fdc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 801fdc4:	e047      	b.n	801fe56 <tcp_receive+0x36a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 801fdc6:	687b      	ldr	r3, [r7, #4]
 801fdc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fdca:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 801fdcc:	687b      	ldr	r3, [r7, #4]
 801fdce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fdd0:	681a      	ldr	r2, [r3, #0]
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801fdd6:	687b      	ldr	r3, [r7, #4]
 801fdd8:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 801fddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdde:	685b      	ldr	r3, [r3, #4]
 801fde0:	4618      	mov	r0, r3
 801fde2:	f7fc fee5 	bl	801cbb0 <pbuf_clen>
 801fde6:	4603      	mov	r3, r0
 801fde8:	429c      	cmp	r4, r3
 801fdea:	d206      	bcs.n	801fdfa <tcp_receive+0x30e>
 801fdec:	4b70      	ldr	r3, [pc, #448]	; (801ffb0 <tcp_receive+0x4c4>)
 801fdee:	f240 429e 	movw	r2, #1182	; 0x49e
 801fdf2:	4970      	ldr	r1, [pc, #448]	; (801ffb4 <tcp_receive+0x4c8>)
 801fdf4:	4870      	ldr	r0, [pc, #448]	; (801ffb8 <tcp_receive+0x4cc>)
 801fdf6:	f007 fb1b 	bl	8027430 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 801fdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdfc:	685b      	ldr	r3, [r3, #4]
 801fdfe:	4618      	mov	r0, r3
 801fe00:	f7fc fed6 	bl	801cbb0 <pbuf_clen>
 801fe04:	4603      	mov	r3, r0
 801fe06:	461a      	mov	r2, r3
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801fe0e:	1a9b      	subs	r3, r3, r2
 801fe10:	b29a      	uxth	r2, r3
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 801fe18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe1a:	891a      	ldrh	r2, [r3, #8]
 801fe1c:	4b67      	ldr	r3, [pc, #412]	; (801ffbc <tcp_receive+0x4d0>)
 801fe1e:	881b      	ldrh	r3, [r3, #0]
 801fe20:	4413      	add	r3, r2
 801fe22:	b29a      	uxth	r2, r3
 801fe24:	4b65      	ldr	r3, [pc, #404]	; (801ffbc <tcp_receive+0x4d0>)
 801fe26:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 801fe28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801fe2a:	f7fe f942 	bl	801e0b2 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801fe34:	2b00      	cmp	r3, #0
 801fe36:	d00e      	beq.n	801fe56 <tcp_receive+0x36a>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	d10a      	bne.n	801fe56 <tcp_receive+0x36a>
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	d106      	bne.n	801fe56 <tcp_receive+0x36a>
 801fe48:	4b59      	ldr	r3, [pc, #356]	; (801ffb0 <tcp_receive+0x4c4>)
 801fe4a:	f240 42a7 	movw	r2, #1191	; 0x4a7
 801fe4e:	495c      	ldr	r1, [pc, #368]	; (801ffc0 <tcp_receive+0x4d4>)
 801fe50:	4859      	ldr	r0, [pc, #356]	; (801ffb8 <tcp_receive+0x4cc>)
 801fe52:	f007 faed 	bl	8027430 <iprintf>
      while (pcb->unacked != NULL &&
 801fe56:	687b      	ldr	r3, [r7, #4]
 801fe58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fe5a:	2b00      	cmp	r3, #0
 801fe5c:	d022      	beq.n	801fea4 <tcp_receive+0x3b8>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fe62:	68db      	ldr	r3, [r3, #12]
 801fe64:	685b      	ldr	r3, [r3, #4]
 801fe66:	4618      	mov	r0, r3
 801fe68:	f7f9 f9ec 	bl	8019244 <lwip_htonl>
 801fe6c:	4604      	mov	r4, r0
 801fe6e:	687b      	ldr	r3, [r7, #4]
 801fe70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fe72:	891b      	ldrh	r3, [r3, #8]
 801fe74:	461d      	mov	r5, r3
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fe7a:	68db      	ldr	r3, [r3, #12]
 801fe7c:	899b      	ldrh	r3, [r3, #12]
 801fe7e:	b29b      	uxth	r3, r3
 801fe80:	4618      	mov	r0, r3
 801fe82:	f7f9 f9d1 	bl	8019228 <lwip_htons>
 801fe86:	4603      	mov	r3, r0
 801fe88:	f003 0303 	and.w	r3, r3, #3
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	d001      	beq.n	801fe94 <tcp_receive+0x3a8>
 801fe90:	2301      	movs	r3, #1
 801fe92:	e000      	b.n	801fe96 <tcp_receive+0x3aa>
 801fe94:	2300      	movs	r3, #0
 801fe96:	442b      	add	r3, r5
 801fe98:	18e2      	adds	r2, r4, r3
 801fe9a:	4b4a      	ldr	r3, [pc, #296]	; (801ffc4 <tcp_receive+0x4d8>)
 801fe9c:	681b      	ldr	r3, [r3, #0]
 801fe9e:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 801fea0:	2b00      	cmp	r3, #0
 801fea2:	dd90      	ble.n	801fdc6 <tcp_receive+0x2da>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801fea4:	687b      	ldr	r3, [r7, #4]
 801fea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fea8:	2b00      	cmp	r3, #0
 801feaa:	d104      	bne.n	801feb6 <tcp_receive+0x3ca>
        pcb->rtime = -1;
 801feac:	687b      	ldr	r3, [r7, #4]
 801feae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801feb2:	861a      	strh	r2, [r3, #48]	; 0x30
 801feb4:	e002      	b.n	801febc <tcp_receive+0x3d0>
      } else {
        pcb->rtime = 0;
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	2200      	movs	r2, #0
 801feba:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	2200      	movs	r2, #0
 801fec0:	76da      	strb	r2, [r3, #27]
 801fec2:	e002      	b.n	801feca <tcp_receive+0x3de>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801fec4:	6878      	ldr	r0, [r7, #4]
 801fec6:	f001 fd31 	bl	802192c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 801feca:	e04f      	b.n	801ff6c <tcp_receive+0x480>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 801fecc:	687b      	ldr	r3, [r7, #4]
 801fece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801fed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 801fed2:	687b      	ldr	r3, [r7, #4]
 801fed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801fed6:	681a      	ldr	r2, [r3, #0]
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801fedc:	687b      	ldr	r3, [r7, #4]
 801fede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801fee0:	2b00      	cmp	r3, #0
 801fee2:	d103      	bne.n	801feec <tcp_receive+0x400>
        pcb->unsent_oversize = 0;
 801fee4:	687b      	ldr	r3, [r7, #4]
 801fee6:	2200      	movs	r2, #0
 801fee8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801feec:	687b      	ldr	r3, [r7, #4]
 801feee:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 801fef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fef4:	685b      	ldr	r3, [r3, #4]
 801fef6:	4618      	mov	r0, r3
 801fef8:	f7fc fe5a 	bl	801cbb0 <pbuf_clen>
 801fefc:	4603      	mov	r3, r0
 801fefe:	429c      	cmp	r4, r3
 801ff00:	d206      	bcs.n	801ff10 <tcp_receive+0x424>
 801ff02:	4b2b      	ldr	r3, [pc, #172]	; (801ffb0 <tcp_receive+0x4c4>)
 801ff04:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801ff08:	492a      	ldr	r1, [pc, #168]	; (801ffb4 <tcp_receive+0x4c8>)
 801ff0a:	482b      	ldr	r0, [pc, #172]	; (801ffb8 <tcp_receive+0x4cc>)
 801ff0c:	f007 fa90 	bl	8027430 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 801ff10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff12:	685b      	ldr	r3, [r3, #4]
 801ff14:	4618      	mov	r0, r3
 801ff16:	f7fc fe4b 	bl	801cbb0 <pbuf_clen>
 801ff1a:	4603      	mov	r3, r0
 801ff1c:	461a      	mov	r2, r3
 801ff1e:	687b      	ldr	r3, [r7, #4]
 801ff20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801ff24:	1a9b      	subs	r3, r3, r2
 801ff26:	b29a      	uxth	r2, r3
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 801ff2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff30:	891a      	ldrh	r2, [r3, #8]
 801ff32:	4b22      	ldr	r3, [pc, #136]	; (801ffbc <tcp_receive+0x4d0>)
 801ff34:	881b      	ldrh	r3, [r3, #0]
 801ff36:	4413      	add	r3, r2
 801ff38:	b29a      	uxth	r2, r3
 801ff3a:	4b20      	ldr	r3, [pc, #128]	; (801ffbc <tcp_receive+0x4d0>)
 801ff3c:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 801ff3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ff40:	f7fe f8b7 	bl	801e0b2 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 801ff44:	687b      	ldr	r3, [r7, #4]
 801ff46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801ff4a:	2b00      	cmp	r3, #0
 801ff4c:	d00e      	beq.n	801ff6c <tcp_receive+0x480>
        LWIP_ASSERT("tcp_receive: valid queue length",
 801ff4e:	687b      	ldr	r3, [r7, #4]
 801ff50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ff52:	2b00      	cmp	r3, #0
 801ff54:	d10a      	bne.n	801ff6c <tcp_receive+0x480>
 801ff56:	687b      	ldr	r3, [r7, #4]
 801ff58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ff5a:	2b00      	cmp	r3, #0
 801ff5c:	d106      	bne.n	801ff6c <tcp_receive+0x480>
 801ff5e:	4b14      	ldr	r3, [pc, #80]	; (801ffb0 <tcp_receive+0x4c4>)
 801ff60:	f240 42dd 	movw	r2, #1245	; 0x4dd
 801ff64:	4916      	ldr	r1, [pc, #88]	; (801ffc0 <tcp_receive+0x4d4>)
 801ff66:	4814      	ldr	r0, [pc, #80]	; (801ffb8 <tcp_receive+0x4cc>)
 801ff68:	f007 fa62 	bl	8027430 <iprintf>
    while (pcb->unsent != NULL &&
 801ff6c:	687b      	ldr	r3, [r7, #4]
 801ff6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ff70:	2b00      	cmp	r3, #0
 801ff72:	d037      	beq.n	801ffe4 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801ff74:	4b13      	ldr	r3, [pc, #76]	; (801ffc4 <tcp_receive+0x4d8>)
 801ff76:	681c      	ldr	r4, [r3, #0]
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ff7c:	68db      	ldr	r3, [r3, #12]
 801ff7e:	685b      	ldr	r3, [r3, #4]
 801ff80:	4618      	mov	r0, r3
 801ff82:	f7f9 f95f 	bl	8019244 <lwip_htonl>
 801ff86:	4605      	mov	r5, r0
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ff8c:	891b      	ldrh	r3, [r3, #8]
 801ff8e:	461e      	mov	r6, r3
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ff94:	68db      	ldr	r3, [r3, #12]
 801ff96:	899b      	ldrh	r3, [r3, #12]
 801ff98:	b29b      	uxth	r3, r3
 801ff9a:	4618      	mov	r0, r3
 801ff9c:	f7f9 f944 	bl	8019228 <lwip_htons>
 801ffa0:	4603      	mov	r3, r0
 801ffa2:	f003 0303 	and.w	r3, r3, #3
 801ffa6:	2b00      	cmp	r3, #0
 801ffa8:	d00e      	beq.n	801ffc8 <tcp_receive+0x4dc>
 801ffaa:	2301      	movs	r3, #1
 801ffac:	e00d      	b.n	801ffca <tcp_receive+0x4de>
 801ffae:	bf00      	nop
 801ffb0:	0802abf8 	.word	0x0802abf8
 801ffb4:	0802ae38 	.word	0x0802ae38
 801ffb8:	0802ac3c 	.word	0x0802ac3c
 801ffbc:	2000951c 	.word	0x2000951c
 801ffc0:	0802ae60 	.word	0x0802ae60
 801ffc4:	20009518 	.word	0x20009518
 801ffc8:	2300      	movs	r3, #0
 801ffca:	4433      	add	r3, r6
 801ffcc:	442b      	add	r3, r5
 801ffce:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	db07      	blt.n	801ffe4 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801ffd4:	4b8d      	ldr	r3, [pc, #564]	; (802020c <tcp_receive+0x720>)
 801ffd6:	681a      	ldr	r2, [r3, #0]
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ffdc:	1ad3      	subs	r3, r2, r3
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	f77f af74 	ble.w	801fecc <tcp_receive+0x3e0>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 801ffe4:	687b      	ldr	r3, [r7, #4]
 801ffe6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801ffea:	4b89      	ldr	r3, [pc, #548]	; (8020210 <tcp_receive+0x724>)
 801ffec:	881b      	ldrh	r3, [r3, #0]
 801ffee:	4413      	add	r3, r2
 801fff0:	b29a      	uxth	r2, r3
 801fff2:	687b      	ldr	r3, [r7, #4]
 801fff4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fffc:	2b00      	cmp	r3, #0
 801fffe:	d052      	beq.n	80200a6 <tcp_receive+0x5ba>
 8020000:	687b      	ldr	r3, [r7, #4]
 8020002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020004:	4b81      	ldr	r3, [pc, #516]	; (802020c <tcp_receive+0x720>)
 8020006:	681b      	ldr	r3, [r3, #0]
 8020008:	1ad3      	subs	r3, r2, r3
 802000a:	2b00      	cmp	r3, #0
 802000c:	da4b      	bge.n	80200a6 <tcp_receive+0x5ba>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 802000e:	4b81      	ldr	r3, [pc, #516]	; (8020214 <tcp_receive+0x728>)
 8020010:	681b      	ldr	r3, [r3, #0]
 8020012:	b29a      	uxth	r2, r3
 8020014:	687b      	ldr	r3, [r7, #4]
 8020016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020018:	b29b      	uxth	r3, r3
 802001a:	1ad3      	subs	r3, r2, r3
 802001c:	b29b      	uxth	r3, r3
 802001e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8020020:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8020022:	687b      	ldr	r3, [r7, #4]
 8020024:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8020028:	10db      	asrs	r3, r3, #3
 802002a:	b21b      	sxth	r3, r3
 802002c:	b29b      	uxth	r3, r3
 802002e:	1ad3      	subs	r3, r2, r3
 8020030:	b29b      	uxth	r3, r3
 8020032:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802003a:	b29a      	uxth	r2, r3
 802003c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802003e:	4413      	add	r3, r2
 8020040:	b29b      	uxth	r3, r3
 8020042:	b21a      	sxth	r2, r3
 8020044:	687b      	ldr	r3, [r7, #4]
 8020046:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8020048:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802004c:	2b00      	cmp	r3, #0
 802004e:	da03      	bge.n	8020058 <tcp_receive+0x56c>
        m = -m;
 8020050:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020052:	425b      	negs	r3, r3
 8020054:	b29b      	uxth	r3, r3
 8020056:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8020058:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802005a:	687b      	ldr	r3, [r7, #4]
 802005c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8020060:	109b      	asrs	r3, r3, #2
 8020062:	b21b      	sxth	r3, r3
 8020064:	b29b      	uxth	r3, r3
 8020066:	1ad3      	subs	r3, r2, r3
 8020068:	b29b      	uxth	r3, r3
 802006a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 802006c:	687b      	ldr	r3, [r7, #4]
 802006e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8020072:	b29a      	uxth	r2, r3
 8020074:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020076:	4413      	add	r3, r2
 8020078:	b29b      	uxth	r3, r3
 802007a:	b21a      	sxth	r2, r3
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8020086:	10db      	asrs	r3, r3, #3
 8020088:	b21b      	sxth	r3, r3
 802008a:	b29a      	uxth	r2, r3
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8020092:	b29b      	uxth	r3, r3
 8020094:	4413      	add	r3, r2
 8020096:	b29b      	uxth	r3, r3
 8020098:	b21a      	sxth	r2, r3
 802009a:	687b      	ldr	r3, [r7, #4]
 802009c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80200a0:	687b      	ldr	r3, [r7, #4]
 80200a2:	2200      	movs	r2, #0
 80200a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80200a6:	4b5c      	ldr	r3, [pc, #368]	; (8020218 <tcp_receive+0x72c>)
 80200a8:	881b      	ldrh	r3, [r3, #0]
 80200aa:	2b00      	cmp	r3, #0
 80200ac:	f000 84ee 	beq.w	8020a8c <tcp_receive+0xfa0>
 80200b0:	687b      	ldr	r3, [r7, #4]
 80200b2:	7d1b      	ldrb	r3, [r3, #20]
 80200b4:	2b06      	cmp	r3, #6
 80200b6:	f200 84e9 	bhi.w	8020a8c <tcp_receive+0xfa0>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80200ba:	687b      	ldr	r3, [r7, #4]
 80200bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80200be:	4b57      	ldr	r3, [pc, #348]	; (802021c <tcp_receive+0x730>)
 80200c0:	681b      	ldr	r3, [r3, #0]
 80200c2:	1ad3      	subs	r3, r2, r3
 80200c4:	3b01      	subs	r3, #1
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	f2c0 80b8 	blt.w	802023c <tcp_receive+0x750>
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80200d0:	4b51      	ldr	r3, [pc, #324]	; (8020218 <tcp_receive+0x72c>)
 80200d2:	881b      	ldrh	r3, [r3, #0]
 80200d4:	4619      	mov	r1, r3
 80200d6:	4b51      	ldr	r3, [pc, #324]	; (802021c <tcp_receive+0x730>)
 80200d8:	681b      	ldr	r3, [r3, #0]
 80200da:	440b      	add	r3, r1
 80200dc:	1ad3      	subs	r3, r2, r3
 80200de:	3301      	adds	r3, #1
 80200e0:	2b00      	cmp	r3, #0
 80200e2:	f300 80ab 	bgt.w	802023c <tcp_receive+0x750>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80200e6:	4b4e      	ldr	r3, [pc, #312]	; (8020220 <tcp_receive+0x734>)
 80200e8:	685b      	ldr	r3, [r3, #4]
 80200ea:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80200f0:	4b4a      	ldr	r3, [pc, #296]	; (802021c <tcp_receive+0x730>)
 80200f2:	681b      	ldr	r3, [r3, #0]
 80200f4:	1ad3      	subs	r3, r2, r3
 80200f6:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80200f8:	4b49      	ldr	r3, [pc, #292]	; (8020220 <tcp_receive+0x734>)
 80200fa:	685b      	ldr	r3, [r3, #4]
 80200fc:	2b00      	cmp	r3, #0
 80200fe:	d106      	bne.n	802010e <tcp_receive+0x622>
 8020100:	4b48      	ldr	r3, [pc, #288]	; (8020224 <tcp_receive+0x738>)
 8020102:	f240 523c 	movw	r2, #1340	; 0x53c
 8020106:	4948      	ldr	r1, [pc, #288]	; (8020228 <tcp_receive+0x73c>)
 8020108:	4848      	ldr	r0, [pc, #288]	; (802022c <tcp_receive+0x740>)
 802010a:	f007 f991 	bl	8027430 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 802010e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020110:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8020114:	4293      	cmp	r3, r2
 8020116:	dd06      	ble.n	8020126 <tcp_receive+0x63a>
 8020118:	4b42      	ldr	r3, [pc, #264]	; (8020224 <tcp_receive+0x738>)
 802011a:	f240 523d 	movw	r2, #1341	; 0x53d
 802011e:	4944      	ldr	r1, [pc, #272]	; (8020230 <tcp_receive+0x744>)
 8020120:	4842      	ldr	r0, [pc, #264]	; (802022c <tcp_receive+0x740>)
 8020122:	f007 f985 	bl	8027430 <iprintf>
      if (inseg.p->len < off) {
 8020126:	4b3e      	ldr	r3, [pc, #248]	; (8020220 <tcp_receive+0x734>)
 8020128:	685b      	ldr	r3, [r3, #4]
 802012a:	895b      	ldrh	r3, [r3, #10]
 802012c:	461a      	mov	r2, r3
 802012e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020130:	429a      	cmp	r2, r3
 8020132:	da3e      	bge.n	80201b2 <tcp_receive+0x6c6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8020134:	4b3a      	ldr	r3, [pc, #232]	; (8020220 <tcp_receive+0x734>)
 8020136:	685b      	ldr	r3, [r3, #4]
 8020138:	891b      	ldrh	r3, [r3, #8]
 802013a:	461a      	mov	r2, r3
 802013c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802013e:	429a      	cmp	r2, r3
 8020140:	da06      	bge.n	8020150 <tcp_receive+0x664>
 8020142:	4b38      	ldr	r3, [pc, #224]	; (8020224 <tcp_receive+0x738>)
 8020144:	f240 523f 	movw	r2, #1343	; 0x53f
 8020148:	493a      	ldr	r1, [pc, #232]	; (8020234 <tcp_receive+0x748>)
 802014a:	4838      	ldr	r0, [pc, #224]	; (802022c <tcp_receive+0x740>)
 802014c:	f007 f970 	bl	8027430 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8020150:	4b33      	ldr	r3, [pc, #204]	; (8020220 <tcp_receive+0x734>)
 8020152:	685b      	ldr	r3, [r3, #4]
 8020154:	891a      	ldrh	r2, [r3, #8]
 8020156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020158:	b29b      	uxth	r3, r3
 802015a:	1ad3      	subs	r3, r2, r3
 802015c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 802015e:	e00e      	b.n	802017e <tcp_receive+0x692>
          off -= p->len;
 8020160:	69bb      	ldr	r3, [r7, #24]
 8020162:	895b      	ldrh	r3, [r3, #10]
 8020164:	461a      	mov	r2, r3
 8020166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020168:	1a9b      	subs	r3, r3, r2
 802016a:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 802016c:	69bb      	ldr	r3, [r7, #24]
 802016e:	8a3a      	ldrh	r2, [r7, #16]
 8020170:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8020172:	69bb      	ldr	r3, [r7, #24]
 8020174:	2200      	movs	r2, #0
 8020176:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8020178:	69bb      	ldr	r3, [r7, #24]
 802017a:	681b      	ldr	r3, [r3, #0]
 802017c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 802017e:	69bb      	ldr	r3, [r7, #24]
 8020180:	895b      	ldrh	r3, [r3, #10]
 8020182:	461a      	mov	r2, r3
 8020184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020186:	429a      	cmp	r2, r3
 8020188:	dbea      	blt.n	8020160 <tcp_receive+0x674>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 802018a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802018c:	b29b      	uxth	r3, r3
 802018e:	425b      	negs	r3, r3
 8020190:	b29b      	uxth	r3, r3
 8020192:	b21b      	sxth	r3, r3
 8020194:	4619      	mov	r1, r3
 8020196:	69b8      	ldr	r0, [r7, #24]
 8020198:	f7fc fc4c 	bl	801ca34 <pbuf_header>
 802019c:	4603      	mov	r3, r0
 802019e:	2b00      	cmp	r3, #0
 80201a0:	d01c      	beq.n	80201dc <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80201a2:	4b20      	ldr	r3, [pc, #128]	; (8020224 <tcp_receive+0x738>)
 80201a4:	f240 524c 	movw	r2, #1356	; 0x54c
 80201a8:	4923      	ldr	r1, [pc, #140]	; (8020238 <tcp_receive+0x74c>)
 80201aa:	4820      	ldr	r0, [pc, #128]	; (802022c <tcp_receive+0x740>)
 80201ac:	f007 f940 	bl	8027430 <iprintf>
 80201b0:	e014      	b.n	80201dc <tcp_receive+0x6f0>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80201b2:	4b1b      	ldr	r3, [pc, #108]	; (8020220 <tcp_receive+0x734>)
 80201b4:	685b      	ldr	r3, [r3, #4]
 80201b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80201b8:	b292      	uxth	r2, r2
 80201ba:	4252      	negs	r2, r2
 80201bc:	b292      	uxth	r2, r2
 80201be:	b212      	sxth	r2, r2
 80201c0:	4611      	mov	r1, r2
 80201c2:	4618      	mov	r0, r3
 80201c4:	f7fc fc36 	bl	801ca34 <pbuf_header>
 80201c8:	4603      	mov	r3, r0
 80201ca:	2b00      	cmp	r3, #0
 80201cc:	d006      	beq.n	80201dc <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80201ce:	4b15      	ldr	r3, [pc, #84]	; (8020224 <tcp_receive+0x738>)
 80201d0:	f240 5251 	movw	r2, #1361	; 0x551
 80201d4:	4918      	ldr	r1, [pc, #96]	; (8020238 <tcp_receive+0x74c>)
 80201d6:	4815      	ldr	r0, [pc, #84]	; (802022c <tcp_receive+0x740>)
 80201d8:	f007 f92a 	bl	8027430 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80201dc:	4b10      	ldr	r3, [pc, #64]	; (8020220 <tcp_receive+0x734>)
 80201de:	891a      	ldrh	r2, [r3, #8]
 80201e0:	4b0e      	ldr	r3, [pc, #56]	; (802021c <tcp_receive+0x730>)
 80201e2:	681b      	ldr	r3, [r3, #0]
 80201e4:	b299      	uxth	r1, r3
 80201e6:	687b      	ldr	r3, [r7, #4]
 80201e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80201ea:	b29b      	uxth	r3, r3
 80201ec:	1acb      	subs	r3, r1, r3
 80201ee:	b29b      	uxth	r3, r3
 80201f0:	4413      	add	r3, r2
 80201f2:	b29a      	uxth	r2, r3
 80201f4:	4b0a      	ldr	r3, [pc, #40]	; (8020220 <tcp_receive+0x734>)
 80201f6:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80201f8:	4b09      	ldr	r3, [pc, #36]	; (8020220 <tcp_receive+0x734>)
 80201fa:	68db      	ldr	r3, [r3, #12]
 80201fc:	687a      	ldr	r2, [r7, #4]
 80201fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8020200:	4906      	ldr	r1, [pc, #24]	; (802021c <tcp_receive+0x730>)
 8020202:	600a      	str	r2, [r1, #0]
 8020204:	4a05      	ldr	r2, [pc, #20]	; (802021c <tcp_receive+0x730>)
 8020206:	6812      	ldr	r2, [r2, #0]
 8020208:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 802020a:	e025      	b.n	8020258 <tcp_receive+0x76c>
 802020c:	20009518 	.word	0x20009518
 8020210:	2000951c 	.word	0x2000951c
 8020214:	2000ece0 	.word	0x2000ece0
 8020218:	2000951e 	.word	0x2000951e
 802021c:	20009514 	.word	0x20009514
 8020220:	200094f4 	.word	0x200094f4
 8020224:	0802abf8 	.word	0x0802abf8
 8020228:	0802ae80 	.word	0x0802ae80
 802022c:	0802ac3c 	.word	0x0802ac3c
 8020230:	0802ae90 	.word	0x0802ae90
 8020234:	0802aea0 	.word	0x0802aea0
 8020238:	0802aeb0 	.word	0x0802aeb0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 802023c:	4b86      	ldr	r3, [pc, #536]	; (8020458 <tcp_receive+0x96c>)
 802023e:	681a      	ldr	r2, [r3, #0]
 8020240:	687b      	ldr	r3, [r7, #4]
 8020242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020244:	1ad3      	subs	r3, r2, r3
 8020246:	2b00      	cmp	r3, #0
 8020248:	da06      	bge.n	8020258 <tcp_receive+0x76c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 802024a:	687b      	ldr	r3, [r7, #4]
 802024c:	7e9b      	ldrb	r3, [r3, #26]
 802024e:	f043 0302 	orr.w	r3, r3, #2
 8020252:	b2da      	uxtb	r2, r3
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8020258:	4b7f      	ldr	r3, [pc, #508]	; (8020458 <tcp_receive+0x96c>)
 802025a:	681a      	ldr	r2, [r3, #0]
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020260:	1ad3      	subs	r3, r2, r3
 8020262:	2b00      	cmp	r3, #0
 8020264:	f2c0 840d 	blt.w	8020a82 <tcp_receive+0xf96>
 8020268:	4b7b      	ldr	r3, [pc, #492]	; (8020458 <tcp_receive+0x96c>)
 802026a:	681a      	ldr	r2, [r3, #0]
 802026c:	687b      	ldr	r3, [r7, #4]
 802026e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020270:	6879      	ldr	r1, [r7, #4]
 8020272:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020274:	440b      	add	r3, r1
 8020276:	1ad3      	subs	r3, r2, r3
 8020278:	3301      	adds	r3, #1
 802027a:	2b00      	cmp	r3, #0
 802027c:	f300 8401 	bgt.w	8020a82 <tcp_receive+0xf96>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020284:	4b74      	ldr	r3, [pc, #464]	; (8020458 <tcp_receive+0x96c>)
 8020286:	681b      	ldr	r3, [r3, #0]
 8020288:	429a      	cmp	r2, r3
 802028a:	f040 8285 	bne.w	8020798 <tcp_receive+0xcac>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 802028e:	4b73      	ldr	r3, [pc, #460]	; (802045c <tcp_receive+0x970>)
 8020290:	891c      	ldrh	r4, [r3, #8]
 8020292:	4b72      	ldr	r3, [pc, #456]	; (802045c <tcp_receive+0x970>)
 8020294:	68db      	ldr	r3, [r3, #12]
 8020296:	899b      	ldrh	r3, [r3, #12]
 8020298:	b29b      	uxth	r3, r3
 802029a:	4618      	mov	r0, r3
 802029c:	f7f8 ffc4 	bl	8019228 <lwip_htons>
 80202a0:	4603      	mov	r3, r0
 80202a2:	f003 0303 	and.w	r3, r3, #3
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	d001      	beq.n	80202ae <tcp_receive+0x7c2>
 80202aa:	2301      	movs	r3, #1
 80202ac:	e000      	b.n	80202b0 <tcp_receive+0x7c4>
 80202ae:	2300      	movs	r3, #0
 80202b0:	4423      	add	r3, r4
 80202b2:	b29a      	uxth	r2, r3
 80202b4:	4b6a      	ldr	r3, [pc, #424]	; (8020460 <tcp_receive+0x974>)
 80202b6:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80202bc:	4b68      	ldr	r3, [pc, #416]	; (8020460 <tcp_receive+0x974>)
 80202be:	881b      	ldrh	r3, [r3, #0]
 80202c0:	429a      	cmp	r2, r3
 80202c2:	d26d      	bcs.n	80203a0 <tcp_receive+0x8b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80202c4:	4b65      	ldr	r3, [pc, #404]	; (802045c <tcp_receive+0x970>)
 80202c6:	68db      	ldr	r3, [r3, #12]
 80202c8:	899b      	ldrh	r3, [r3, #12]
 80202ca:	b29b      	uxth	r3, r3
 80202cc:	4618      	mov	r0, r3
 80202ce:	f7f8 ffab 	bl	8019228 <lwip_htons>
 80202d2:	4603      	mov	r3, r0
 80202d4:	f003 0301 	and.w	r3, r3, #1
 80202d8:	2b00      	cmp	r3, #0
 80202da:	d01a      	beq.n	8020312 <tcp_receive+0x826>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80202dc:	4b5f      	ldr	r3, [pc, #380]	; (802045c <tcp_receive+0x970>)
 80202de:	68dc      	ldr	r4, [r3, #12]
 80202e0:	4b5e      	ldr	r3, [pc, #376]	; (802045c <tcp_receive+0x970>)
 80202e2:	68db      	ldr	r3, [r3, #12]
 80202e4:	899b      	ldrh	r3, [r3, #12]
 80202e6:	b29b      	uxth	r3, r3
 80202e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80202ec:	b29d      	uxth	r5, r3
 80202ee:	4b5b      	ldr	r3, [pc, #364]	; (802045c <tcp_receive+0x970>)
 80202f0:	68db      	ldr	r3, [r3, #12]
 80202f2:	899b      	ldrh	r3, [r3, #12]
 80202f4:	b29b      	uxth	r3, r3
 80202f6:	4618      	mov	r0, r3
 80202f8:	f7f8 ff96 	bl	8019228 <lwip_htons>
 80202fc:	4603      	mov	r3, r0
 80202fe:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8020302:	b29b      	uxth	r3, r3
 8020304:	4618      	mov	r0, r3
 8020306:	f7f8 ff8f 	bl	8019228 <lwip_htons>
 802030a:	4603      	mov	r3, r0
 802030c:	432b      	orrs	r3, r5
 802030e:	b29b      	uxth	r3, r3
 8020310:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8020312:	687b      	ldr	r3, [r7, #4]
 8020314:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020316:	4b51      	ldr	r3, [pc, #324]	; (802045c <tcp_receive+0x970>)
 8020318:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 802031a:	4b50      	ldr	r3, [pc, #320]	; (802045c <tcp_receive+0x970>)
 802031c:	68db      	ldr	r3, [r3, #12]
 802031e:	899b      	ldrh	r3, [r3, #12]
 8020320:	b29b      	uxth	r3, r3
 8020322:	4618      	mov	r0, r3
 8020324:	f7f8 ff80 	bl	8019228 <lwip_htons>
 8020328:	4603      	mov	r3, r0
 802032a:	f003 0302 	and.w	r3, r3, #2
 802032e:	2b00      	cmp	r3, #0
 8020330:	d005      	beq.n	802033e <tcp_receive+0x852>
            inseg.len -= 1;
 8020332:	4b4a      	ldr	r3, [pc, #296]	; (802045c <tcp_receive+0x970>)
 8020334:	891b      	ldrh	r3, [r3, #8]
 8020336:	3b01      	subs	r3, #1
 8020338:	b29a      	uxth	r2, r3
 802033a:	4b48      	ldr	r3, [pc, #288]	; (802045c <tcp_receive+0x970>)
 802033c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 802033e:	4b47      	ldr	r3, [pc, #284]	; (802045c <tcp_receive+0x970>)
 8020340:	685a      	ldr	r2, [r3, #4]
 8020342:	4b46      	ldr	r3, [pc, #280]	; (802045c <tcp_receive+0x970>)
 8020344:	891b      	ldrh	r3, [r3, #8]
 8020346:	4619      	mov	r1, r3
 8020348:	4610      	mov	r0, r2
 802034a:	f7fc fa23 	bl	801c794 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 802034e:	4b43      	ldr	r3, [pc, #268]	; (802045c <tcp_receive+0x970>)
 8020350:	891c      	ldrh	r4, [r3, #8]
 8020352:	4b42      	ldr	r3, [pc, #264]	; (802045c <tcp_receive+0x970>)
 8020354:	68db      	ldr	r3, [r3, #12]
 8020356:	899b      	ldrh	r3, [r3, #12]
 8020358:	b29b      	uxth	r3, r3
 802035a:	4618      	mov	r0, r3
 802035c:	f7f8 ff64 	bl	8019228 <lwip_htons>
 8020360:	4603      	mov	r3, r0
 8020362:	f003 0303 	and.w	r3, r3, #3
 8020366:	2b00      	cmp	r3, #0
 8020368:	d001      	beq.n	802036e <tcp_receive+0x882>
 802036a:	2301      	movs	r3, #1
 802036c:	e000      	b.n	8020370 <tcp_receive+0x884>
 802036e:	2300      	movs	r3, #0
 8020370:	4423      	add	r3, r4
 8020372:	b29a      	uxth	r2, r3
 8020374:	4b3a      	ldr	r3, [pc, #232]	; (8020460 <tcp_receive+0x974>)
 8020376:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8020378:	4b39      	ldr	r3, [pc, #228]	; (8020460 <tcp_receive+0x974>)
 802037a:	881b      	ldrh	r3, [r3, #0]
 802037c:	461a      	mov	r2, r3
 802037e:	4b36      	ldr	r3, [pc, #216]	; (8020458 <tcp_receive+0x96c>)
 8020380:	681b      	ldr	r3, [r3, #0]
 8020382:	441a      	add	r2, r3
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020388:	6879      	ldr	r1, [r7, #4]
 802038a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802038c:	440b      	add	r3, r1
 802038e:	429a      	cmp	r2, r3
 8020390:	d006      	beq.n	80203a0 <tcp_receive+0x8b4>
 8020392:	4b34      	ldr	r3, [pc, #208]	; (8020464 <tcp_receive+0x978>)
 8020394:	f240 527f 	movw	r2, #1407	; 0x57f
 8020398:	4933      	ldr	r1, [pc, #204]	; (8020468 <tcp_receive+0x97c>)
 802039a:	4834      	ldr	r0, [pc, #208]	; (802046c <tcp_receive+0x980>)
 802039c:	f007 f848 	bl	8027430 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80203a0:	687b      	ldr	r3, [r7, #4]
 80203a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	f000 80e0 	beq.w	802056a <tcp_receive+0xa7e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80203aa:	4b2c      	ldr	r3, [pc, #176]	; (802045c <tcp_receive+0x970>)
 80203ac:	68db      	ldr	r3, [r3, #12]
 80203ae:	899b      	ldrh	r3, [r3, #12]
 80203b0:	b29b      	uxth	r3, r3
 80203b2:	4618      	mov	r0, r3
 80203b4:	f7f8 ff38 	bl	8019228 <lwip_htons>
 80203b8:	4603      	mov	r3, r0
 80203ba:	f003 0301 	and.w	r3, r3, #1
 80203be:	2b00      	cmp	r3, #0
 80203c0:	d010      	beq.n	80203e4 <tcp_receive+0x8f8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80203c2:	e00a      	b.n	80203da <tcp_receive+0x8ee>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80203c8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80203ce:	681a      	ldr	r2, [r3, #0]
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80203d4:	68f8      	ldr	r0, [r7, #12]
 80203d6:	f7fd fe6c 	bl	801e0b2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80203de:	2b00      	cmp	r3, #0
 80203e0:	d1f0      	bne.n	80203c4 <tcp_receive+0x8d8>
 80203e2:	e0c2      	b.n	802056a <tcp_receive+0xa7e>
            }
          } else {
            next = pcb->ooseq;
 80203e4:	687b      	ldr	r3, [r7, #4]
 80203e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80203e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80203ea:	e04e      	b.n	802048a <tcp_receive+0x99e>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80203ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203ee:	68db      	ldr	r3, [r3, #12]
 80203f0:	899b      	ldrh	r3, [r3, #12]
 80203f2:	b29b      	uxth	r3, r3
 80203f4:	4618      	mov	r0, r3
 80203f6:	f7f8 ff17 	bl	8019228 <lwip_htons>
 80203fa:	4603      	mov	r3, r0
 80203fc:	f003 0301 	and.w	r3, r3, #1
 8020400:	2b00      	cmp	r3, #0
 8020402:	d03a      	beq.n	802047a <tcp_receive+0x98e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8020404:	4b15      	ldr	r3, [pc, #84]	; (802045c <tcp_receive+0x970>)
 8020406:	68db      	ldr	r3, [r3, #12]
 8020408:	899b      	ldrh	r3, [r3, #12]
 802040a:	b29b      	uxth	r3, r3
 802040c:	4618      	mov	r0, r3
 802040e:	f7f8 ff0b 	bl	8019228 <lwip_htons>
 8020412:	4603      	mov	r3, r0
 8020414:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8020418:	2b00      	cmp	r3, #0
 802041a:	d12e      	bne.n	802047a <tcp_receive+0x98e>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 802041c:	4b0f      	ldr	r3, [pc, #60]	; (802045c <tcp_receive+0x970>)
 802041e:	68dc      	ldr	r4, [r3, #12]
 8020420:	4b0e      	ldr	r3, [pc, #56]	; (802045c <tcp_receive+0x970>)
 8020422:	68db      	ldr	r3, [r3, #12]
 8020424:	899b      	ldrh	r3, [r3, #12]
 8020426:	b29d      	uxth	r5, r3
 8020428:	2001      	movs	r0, #1
 802042a:	f7f8 fefd 	bl	8019228 <lwip_htons>
 802042e:	4603      	mov	r3, r0
 8020430:	432b      	orrs	r3, r5
 8020432:	b29b      	uxth	r3, r3
 8020434:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8020436:	4b09      	ldr	r3, [pc, #36]	; (802045c <tcp_receive+0x970>)
 8020438:	891c      	ldrh	r4, [r3, #8]
 802043a:	4b08      	ldr	r3, [pc, #32]	; (802045c <tcp_receive+0x970>)
 802043c:	68db      	ldr	r3, [r3, #12]
 802043e:	899b      	ldrh	r3, [r3, #12]
 8020440:	b29b      	uxth	r3, r3
 8020442:	4618      	mov	r0, r3
 8020444:	f7f8 fef0 	bl	8019228 <lwip_htons>
 8020448:	4603      	mov	r3, r0
 802044a:	f003 0303 	and.w	r3, r3, #3
 802044e:	2b00      	cmp	r3, #0
 8020450:	d00e      	beq.n	8020470 <tcp_receive+0x984>
 8020452:	2301      	movs	r3, #1
 8020454:	e00d      	b.n	8020472 <tcp_receive+0x986>
 8020456:	bf00      	nop
 8020458:	20009514 	.word	0x20009514
 802045c:	200094f4 	.word	0x200094f4
 8020460:	2000951e 	.word	0x2000951e
 8020464:	0802abf8 	.word	0x0802abf8
 8020468:	0802aec4 	.word	0x0802aec4
 802046c:	0802ac3c 	.word	0x0802ac3c
 8020470:	2300      	movs	r3, #0
 8020472:	4423      	add	r3, r4
 8020474:	b29a      	uxth	r2, r3
 8020476:	4b95      	ldr	r3, [pc, #596]	; (80206cc <tcp_receive+0xbe0>)
 8020478:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 802047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802047c:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 802047e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020480:	681b      	ldr	r3, [r3, #0]
 8020482:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8020484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020486:	f7fd fe14 	bl	801e0b2 <tcp_seg_free>
            while (next &&
 802048a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802048c:	2b00      	cmp	r3, #0
 802048e:	d00e      	beq.n	80204ae <tcp_receive+0x9c2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8020490:	4b8e      	ldr	r3, [pc, #568]	; (80206cc <tcp_receive+0xbe0>)
 8020492:	881b      	ldrh	r3, [r3, #0]
 8020494:	461a      	mov	r2, r3
 8020496:	4b8e      	ldr	r3, [pc, #568]	; (80206d0 <tcp_receive+0xbe4>)
 8020498:	681b      	ldr	r3, [r3, #0]
 802049a:	441a      	add	r2, r3
 802049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802049e:	68db      	ldr	r3, [r3, #12]
 80204a0:	685b      	ldr	r3, [r3, #4]
 80204a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80204a4:	8909      	ldrh	r1, [r1, #8]
 80204a6:	440b      	add	r3, r1
 80204a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80204aa:	2b00      	cmp	r3, #0
 80204ac:	da9e      	bge.n	80203ec <tcp_receive+0x900>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80204ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204b0:	2b00      	cmp	r3, #0
 80204b2:	d057      	beq.n	8020564 <tcp_receive+0xa78>
                TCP_SEQ_GT(seqno + tcplen,
 80204b4:	4b85      	ldr	r3, [pc, #532]	; (80206cc <tcp_receive+0xbe0>)
 80204b6:	881b      	ldrh	r3, [r3, #0]
 80204b8:	461a      	mov	r2, r3
 80204ba:	4b85      	ldr	r3, [pc, #532]	; (80206d0 <tcp_receive+0xbe4>)
 80204bc:	681b      	ldr	r3, [r3, #0]
 80204be:	441a      	add	r2, r3
 80204c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204c2:	68db      	ldr	r3, [r3, #12]
 80204c4:	685b      	ldr	r3, [r3, #4]
 80204c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80204c8:	2b00      	cmp	r3, #0
 80204ca:	dd4b      	ble.n	8020564 <tcp_receive+0xa78>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80204cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204ce:	68db      	ldr	r3, [r3, #12]
 80204d0:	685b      	ldr	r3, [r3, #4]
 80204d2:	b29a      	uxth	r2, r3
 80204d4:	4b7e      	ldr	r3, [pc, #504]	; (80206d0 <tcp_receive+0xbe4>)
 80204d6:	681b      	ldr	r3, [r3, #0]
 80204d8:	b29b      	uxth	r3, r3
 80204da:	1ad3      	subs	r3, r2, r3
 80204dc:	b29a      	uxth	r2, r3
 80204de:	4b7d      	ldr	r3, [pc, #500]	; (80206d4 <tcp_receive+0xbe8>)
 80204e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80204e2:	4b7c      	ldr	r3, [pc, #496]	; (80206d4 <tcp_receive+0xbe8>)
 80204e4:	68db      	ldr	r3, [r3, #12]
 80204e6:	899b      	ldrh	r3, [r3, #12]
 80204e8:	b29b      	uxth	r3, r3
 80204ea:	4618      	mov	r0, r3
 80204ec:	f7f8 fe9c 	bl	8019228 <lwip_htons>
 80204f0:	4603      	mov	r3, r0
 80204f2:	f003 0302 	and.w	r3, r3, #2
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d005      	beq.n	8020506 <tcp_receive+0xa1a>
                inseg.len -= 1;
 80204fa:	4b76      	ldr	r3, [pc, #472]	; (80206d4 <tcp_receive+0xbe8>)
 80204fc:	891b      	ldrh	r3, [r3, #8]
 80204fe:	3b01      	subs	r3, #1
 8020500:	b29a      	uxth	r2, r3
 8020502:	4b74      	ldr	r3, [pc, #464]	; (80206d4 <tcp_receive+0xbe8>)
 8020504:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8020506:	4b73      	ldr	r3, [pc, #460]	; (80206d4 <tcp_receive+0xbe8>)
 8020508:	685a      	ldr	r2, [r3, #4]
 802050a:	4b72      	ldr	r3, [pc, #456]	; (80206d4 <tcp_receive+0xbe8>)
 802050c:	891b      	ldrh	r3, [r3, #8]
 802050e:	4619      	mov	r1, r3
 8020510:	4610      	mov	r0, r2
 8020512:	f7fc f93f 	bl	801c794 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8020516:	4b6f      	ldr	r3, [pc, #444]	; (80206d4 <tcp_receive+0xbe8>)
 8020518:	891c      	ldrh	r4, [r3, #8]
 802051a:	4b6e      	ldr	r3, [pc, #440]	; (80206d4 <tcp_receive+0xbe8>)
 802051c:	68db      	ldr	r3, [r3, #12]
 802051e:	899b      	ldrh	r3, [r3, #12]
 8020520:	b29b      	uxth	r3, r3
 8020522:	4618      	mov	r0, r3
 8020524:	f7f8 fe80 	bl	8019228 <lwip_htons>
 8020528:	4603      	mov	r3, r0
 802052a:	f003 0303 	and.w	r3, r3, #3
 802052e:	2b00      	cmp	r3, #0
 8020530:	d001      	beq.n	8020536 <tcp_receive+0xa4a>
 8020532:	2301      	movs	r3, #1
 8020534:	e000      	b.n	8020538 <tcp_receive+0xa4c>
 8020536:	2300      	movs	r3, #0
 8020538:	4423      	add	r3, r4
 802053a:	b29a      	uxth	r2, r3
 802053c:	4b63      	ldr	r3, [pc, #396]	; (80206cc <tcp_receive+0xbe0>)
 802053e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8020540:	4b62      	ldr	r3, [pc, #392]	; (80206cc <tcp_receive+0xbe0>)
 8020542:	881b      	ldrh	r3, [r3, #0]
 8020544:	461a      	mov	r2, r3
 8020546:	4b62      	ldr	r3, [pc, #392]	; (80206d0 <tcp_receive+0xbe4>)
 8020548:	681b      	ldr	r3, [r3, #0]
 802054a:	441a      	add	r2, r3
 802054c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802054e:	68db      	ldr	r3, [r3, #12]
 8020550:	685b      	ldr	r3, [r3, #4]
 8020552:	429a      	cmp	r2, r3
 8020554:	d006      	beq.n	8020564 <tcp_receive+0xa78>
 8020556:	4b60      	ldr	r3, [pc, #384]	; (80206d8 <tcp_receive+0xbec>)
 8020558:	f240 52af 	movw	r2, #1455	; 0x5af
 802055c:	495f      	ldr	r1, [pc, #380]	; (80206dc <tcp_receive+0xbf0>)
 802055e:	4860      	ldr	r0, [pc, #384]	; (80206e0 <tcp_receive+0xbf4>)
 8020560:	f006 ff66 	bl	8027430 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8020564:	687b      	ldr	r3, [r7, #4]
 8020566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020568:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 802056a:	4b58      	ldr	r3, [pc, #352]	; (80206cc <tcp_receive+0xbe0>)
 802056c:	881b      	ldrh	r3, [r3, #0]
 802056e:	461a      	mov	r2, r3
 8020570:	4b57      	ldr	r3, [pc, #348]	; (80206d0 <tcp_receive+0xbe4>)
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	441a      	add	r2, r3
 8020576:	687b      	ldr	r3, [r7, #4]
 8020578:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802057e:	4b53      	ldr	r3, [pc, #332]	; (80206cc <tcp_receive+0xbe0>)
 8020580:	881b      	ldrh	r3, [r3, #0]
 8020582:	429a      	cmp	r2, r3
 8020584:	d206      	bcs.n	8020594 <tcp_receive+0xaa8>
 8020586:	4b54      	ldr	r3, [pc, #336]	; (80206d8 <tcp_receive+0xbec>)
 8020588:	f240 52b9 	movw	r2, #1465	; 0x5b9
 802058c:	4955      	ldr	r1, [pc, #340]	; (80206e4 <tcp_receive+0xbf8>)
 802058e:	4854      	ldr	r0, [pc, #336]	; (80206e0 <tcp_receive+0xbf4>)
 8020590:	f006 ff4e 	bl	8027430 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8020594:	687b      	ldr	r3, [r7, #4]
 8020596:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020598:	4b4c      	ldr	r3, [pc, #304]	; (80206cc <tcp_receive+0xbe0>)
 802059a:	881b      	ldrh	r3, [r3, #0]
 802059c:	1ad3      	subs	r3, r2, r3
 802059e:	b29a      	uxth	r2, r3
 80205a0:	687b      	ldr	r3, [r7, #4]
 80205a2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80205a4:	6878      	ldr	r0, [r7, #4]
 80205a6:	f7fd f8f5 	bl	801d794 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80205aa:	4b4a      	ldr	r3, [pc, #296]	; (80206d4 <tcp_receive+0xbe8>)
 80205ac:	685b      	ldr	r3, [r3, #4]
 80205ae:	891b      	ldrh	r3, [r3, #8]
 80205b0:	2b00      	cmp	r3, #0
 80205b2:	d006      	beq.n	80205c2 <tcp_receive+0xad6>
          recv_data = inseg.p;
 80205b4:	4b47      	ldr	r3, [pc, #284]	; (80206d4 <tcp_receive+0xbe8>)
 80205b6:	685b      	ldr	r3, [r3, #4]
 80205b8:	4a4b      	ldr	r2, [pc, #300]	; (80206e8 <tcp_receive+0xbfc>)
 80205ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80205bc:	4b45      	ldr	r3, [pc, #276]	; (80206d4 <tcp_receive+0xbe8>)
 80205be:	2200      	movs	r2, #0
 80205c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80205c2:	4b44      	ldr	r3, [pc, #272]	; (80206d4 <tcp_receive+0xbe8>)
 80205c4:	68db      	ldr	r3, [r3, #12]
 80205c6:	899b      	ldrh	r3, [r3, #12]
 80205c8:	b29b      	uxth	r3, r3
 80205ca:	4618      	mov	r0, r3
 80205cc:	f7f8 fe2c 	bl	8019228 <lwip_htons>
 80205d0:	4603      	mov	r3, r0
 80205d2:	f003 0301 	and.w	r3, r3, #1
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	f000 80b4 	beq.w	8020744 <tcp_receive+0xc58>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80205dc:	4b43      	ldr	r3, [pc, #268]	; (80206ec <tcp_receive+0xc00>)
 80205de:	781b      	ldrb	r3, [r3, #0]
 80205e0:	f043 0320 	orr.w	r3, r3, #32
 80205e4:	b2da      	uxtb	r2, r3
 80205e6:	4b41      	ldr	r3, [pc, #260]	; (80206ec <tcp_receive+0xc00>)
 80205e8:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80205ea:	e0ab      	b.n	8020744 <tcp_receive+0xc58>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80205ec:	687b      	ldr	r3, [r7, #4]
 80205ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205f0:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80205f2:	687b      	ldr	r3, [r7, #4]
 80205f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205f6:	68db      	ldr	r3, [r3, #12]
 80205f8:	685b      	ldr	r3, [r3, #4]
 80205fa:	4a35      	ldr	r2, [pc, #212]	; (80206d0 <tcp_receive+0xbe4>)
 80205fc:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80205fe:	68bb      	ldr	r3, [r7, #8]
 8020600:	891b      	ldrh	r3, [r3, #8]
 8020602:	461c      	mov	r4, r3
 8020604:	68bb      	ldr	r3, [r7, #8]
 8020606:	68db      	ldr	r3, [r3, #12]
 8020608:	899b      	ldrh	r3, [r3, #12]
 802060a:	b29b      	uxth	r3, r3
 802060c:	4618      	mov	r0, r3
 802060e:	f7f8 fe0b 	bl	8019228 <lwip_htons>
 8020612:	4603      	mov	r3, r0
 8020614:	f003 0303 	and.w	r3, r3, #3
 8020618:	2b00      	cmp	r3, #0
 802061a:	d001      	beq.n	8020620 <tcp_receive+0xb34>
 802061c:	2301      	movs	r3, #1
 802061e:	e000      	b.n	8020622 <tcp_receive+0xb36>
 8020620:	2300      	movs	r3, #0
 8020622:	4423      	add	r3, r4
 8020624:	687a      	ldr	r2, [r7, #4]
 8020626:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8020628:	441a      	add	r2, r3
 802062a:	687b      	ldr	r3, [r7, #4]
 802062c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 802062e:	687b      	ldr	r3, [r7, #4]
 8020630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020632:	461c      	mov	r4, r3
 8020634:	68bb      	ldr	r3, [r7, #8]
 8020636:	891b      	ldrh	r3, [r3, #8]
 8020638:	461d      	mov	r5, r3
 802063a:	68bb      	ldr	r3, [r7, #8]
 802063c:	68db      	ldr	r3, [r3, #12]
 802063e:	899b      	ldrh	r3, [r3, #12]
 8020640:	b29b      	uxth	r3, r3
 8020642:	4618      	mov	r0, r3
 8020644:	f7f8 fdf0 	bl	8019228 <lwip_htons>
 8020648:	4603      	mov	r3, r0
 802064a:	f003 0303 	and.w	r3, r3, #3
 802064e:	2b00      	cmp	r3, #0
 8020650:	d001      	beq.n	8020656 <tcp_receive+0xb6a>
 8020652:	2301      	movs	r3, #1
 8020654:	e000      	b.n	8020658 <tcp_receive+0xb6c>
 8020656:	2300      	movs	r3, #0
 8020658:	442b      	add	r3, r5
 802065a:	429c      	cmp	r4, r3
 802065c:	d206      	bcs.n	802066c <tcp_receive+0xb80>
 802065e:	4b1e      	ldr	r3, [pc, #120]	; (80206d8 <tcp_receive+0xbec>)
 8020660:	f240 52de 	movw	r2, #1502	; 0x5de
 8020664:	4922      	ldr	r1, [pc, #136]	; (80206f0 <tcp_receive+0xc04>)
 8020666:	481e      	ldr	r0, [pc, #120]	; (80206e0 <tcp_receive+0xbf4>)
 8020668:	f006 fee2 	bl	8027430 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 802066c:	68bb      	ldr	r3, [r7, #8]
 802066e:	891b      	ldrh	r3, [r3, #8]
 8020670:	461c      	mov	r4, r3
 8020672:	68bb      	ldr	r3, [r7, #8]
 8020674:	68db      	ldr	r3, [r3, #12]
 8020676:	899b      	ldrh	r3, [r3, #12]
 8020678:	b29b      	uxth	r3, r3
 802067a:	4618      	mov	r0, r3
 802067c:	f7f8 fdd4 	bl	8019228 <lwip_htons>
 8020680:	4603      	mov	r3, r0
 8020682:	f003 0303 	and.w	r3, r3, #3
 8020686:	2b00      	cmp	r3, #0
 8020688:	d001      	beq.n	802068e <tcp_receive+0xba2>
 802068a:	2301      	movs	r3, #1
 802068c:	e000      	b.n	8020690 <tcp_receive+0xba4>
 802068e:	2300      	movs	r3, #0
 8020690:	18e1      	adds	r1, r4, r3
 8020692:	687b      	ldr	r3, [r7, #4]
 8020694:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020696:	b28b      	uxth	r3, r1
 8020698:	1ad3      	subs	r3, r2, r3
 802069a:	b29a      	uxth	r2, r3
 802069c:	687b      	ldr	r3, [r7, #4]
 802069e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80206a0:	6878      	ldr	r0, [r7, #4]
 80206a2:	f7fd f877 	bl	801d794 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80206a6:	68bb      	ldr	r3, [r7, #8]
 80206a8:	685b      	ldr	r3, [r3, #4]
 80206aa:	891b      	ldrh	r3, [r3, #8]
 80206ac:	2b00      	cmp	r3, #0
 80206ae:	d028      	beq.n	8020702 <tcp_receive+0xc16>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80206b0:	4b0d      	ldr	r3, [pc, #52]	; (80206e8 <tcp_receive+0xbfc>)
 80206b2:	681b      	ldr	r3, [r3, #0]
 80206b4:	2b00      	cmp	r3, #0
 80206b6:	d01d      	beq.n	80206f4 <tcp_receive+0xc08>
              pbuf_cat(recv_data, cseg->p);
 80206b8:	4b0b      	ldr	r3, [pc, #44]	; (80206e8 <tcp_receive+0xbfc>)
 80206ba:	681a      	ldr	r2, [r3, #0]
 80206bc:	68bb      	ldr	r3, [r7, #8]
 80206be:	685b      	ldr	r3, [r3, #4]
 80206c0:	4619      	mov	r1, r3
 80206c2:	4610      	mov	r0, r2
 80206c4:	f7fc fab4 	bl	801cc30 <pbuf_cat>
 80206c8:	e018      	b.n	80206fc <tcp_receive+0xc10>
 80206ca:	bf00      	nop
 80206cc:	2000951e 	.word	0x2000951e
 80206d0:	20009514 	.word	0x20009514
 80206d4:	200094f4 	.word	0x200094f4
 80206d8:	0802abf8 	.word	0x0802abf8
 80206dc:	0802aefc 	.word	0x0802aefc
 80206e0:	0802ac3c 	.word	0x0802ac3c
 80206e4:	0802af38 	.word	0x0802af38
 80206e8:	20009524 	.word	0x20009524
 80206ec:	20009521 	.word	0x20009521
 80206f0:	0802af58 	.word	0x0802af58
            } else {
              recv_data = cseg->p;
 80206f4:	68bb      	ldr	r3, [r7, #8]
 80206f6:	685b      	ldr	r3, [r3, #4]
 80206f8:	4a71      	ldr	r2, [pc, #452]	; (80208c0 <tcp_receive+0xdd4>)
 80206fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80206fc:	68bb      	ldr	r3, [r7, #8]
 80206fe:	2200      	movs	r2, #0
 8020700:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8020702:	68bb      	ldr	r3, [r7, #8]
 8020704:	68db      	ldr	r3, [r3, #12]
 8020706:	899b      	ldrh	r3, [r3, #12]
 8020708:	b29b      	uxth	r3, r3
 802070a:	4618      	mov	r0, r3
 802070c:	f7f8 fd8c 	bl	8019228 <lwip_htons>
 8020710:	4603      	mov	r3, r0
 8020712:	f003 0301 	and.w	r3, r3, #1
 8020716:	2b00      	cmp	r3, #0
 8020718:	d00d      	beq.n	8020736 <tcp_receive+0xc4a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 802071a:	4b6a      	ldr	r3, [pc, #424]	; (80208c4 <tcp_receive+0xdd8>)
 802071c:	781b      	ldrb	r3, [r3, #0]
 802071e:	f043 0320 	orr.w	r3, r3, #32
 8020722:	b2da      	uxtb	r2, r3
 8020724:	4b67      	ldr	r3, [pc, #412]	; (80208c4 <tcp_receive+0xdd8>)
 8020726:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8020728:	687b      	ldr	r3, [r7, #4]
 802072a:	7d1b      	ldrb	r3, [r3, #20]
 802072c:	2b04      	cmp	r3, #4
 802072e:	d102      	bne.n	8020736 <tcp_receive+0xc4a>
              pcb->state = CLOSE_WAIT;
 8020730:	687b      	ldr	r3, [r7, #4]
 8020732:	2207      	movs	r2, #7
 8020734:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8020736:	68bb      	ldr	r3, [r7, #8]
 8020738:	681a      	ldr	r2, [r3, #0]
 802073a:	687b      	ldr	r3, [r7, #4]
 802073c:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 802073e:	68b8      	ldr	r0, [r7, #8]
 8020740:	f7fd fcb7 	bl	801e0b2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8020744:	687b      	ldr	r3, [r7, #4]
 8020746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020748:	2b00      	cmp	r3, #0
 802074a:	d008      	beq.n	802075e <tcp_receive+0xc72>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 802074c:	687b      	ldr	r3, [r7, #4]
 802074e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020750:	68db      	ldr	r3, [r3, #12]
 8020752:	685a      	ldr	r2, [r3, #4]
 8020754:	687b      	ldr	r3, [r7, #4]
 8020756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8020758:	429a      	cmp	r2, r3
 802075a:	f43f af47 	beq.w	80205ec <tcp_receive+0xb00>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 802075e:	687b      	ldr	r3, [r7, #4]
 8020760:	7e9b      	ldrb	r3, [r3, #26]
 8020762:	f003 0301 	and.w	r3, r3, #1
 8020766:	2b00      	cmp	r3, #0
 8020768:	d00e      	beq.n	8020788 <tcp_receive+0xc9c>
 802076a:	687b      	ldr	r3, [r7, #4]
 802076c:	7e9b      	ldrb	r3, [r3, #26]
 802076e:	f023 0301 	bic.w	r3, r3, #1
 8020772:	b2da      	uxtb	r2, r3
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	769a      	strb	r2, [r3, #26]
 8020778:	687b      	ldr	r3, [r7, #4]
 802077a:	7e9b      	ldrb	r3, [r3, #26]
 802077c:	f043 0302 	orr.w	r3, r3, #2
 8020780:	b2da      	uxtb	r2, r3
 8020782:	687b      	ldr	r3, [r7, #4]
 8020784:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8020786:	e180      	b.n	8020a8a <tcp_receive+0xf9e>
        tcp_ack(pcb);
 8020788:	687b      	ldr	r3, [r7, #4]
 802078a:	7e9b      	ldrb	r3, [r3, #26]
 802078c:	f043 0301 	orr.w	r3, r3, #1
 8020790:	b2da      	uxtb	r2, r3
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8020796:	e178      	b.n	8020a8a <tcp_receive+0xf9e>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8020798:	6878      	ldr	r0, [r7, #4]
 802079a:	f001 f8c7 	bl	802192c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 802079e:	687b      	ldr	r3, [r7, #4]
 80207a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	d106      	bne.n	80207b4 <tcp_receive+0xcc8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80207a6:	4848      	ldr	r0, [pc, #288]	; (80208c8 <tcp_receive+0xddc>)
 80207a8:	f7fd fc9b 	bl	801e0e2 <tcp_seg_copy>
 80207ac:	4602      	mov	r2, r0
 80207ae:	687b      	ldr	r3, [r7, #4]
 80207b0:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80207b2:	e16a      	b.n	8020a8a <tcp_receive+0xf9e>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80207b4:	2300      	movs	r3, #0
 80207b6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80207b8:	687b      	ldr	r3, [r7, #4]
 80207ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80207bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80207be:	e14f      	b.n	8020a60 <tcp_receive+0xf74>
            if (seqno == next->tcphdr->seqno) {
 80207c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207c2:	68db      	ldr	r3, [r3, #12]
 80207c4:	685a      	ldr	r2, [r3, #4]
 80207c6:	4b41      	ldr	r3, [pc, #260]	; (80208cc <tcp_receive+0xde0>)
 80207c8:	681b      	ldr	r3, [r3, #0]
 80207ca:	429a      	cmp	r2, r3
 80207cc:	d11d      	bne.n	802080a <tcp_receive+0xd1e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80207ce:	4b3e      	ldr	r3, [pc, #248]	; (80208c8 <tcp_receive+0xddc>)
 80207d0:	891a      	ldrh	r2, [r3, #8]
 80207d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207d4:	891b      	ldrh	r3, [r3, #8]
 80207d6:	429a      	cmp	r2, r3
 80207d8:	f240 8147 	bls.w	8020a6a <tcp_receive+0xf7e>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80207dc:	483a      	ldr	r0, [pc, #232]	; (80208c8 <tcp_receive+0xddc>)
 80207de:	f7fd fc80 	bl	801e0e2 <tcp_seg_copy>
 80207e2:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 80207e4:	68bb      	ldr	r3, [r7, #8]
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	f000 8141 	beq.w	8020a6e <tcp_receive+0xf82>
                  if (prev != NULL) {
 80207ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207ee:	2b00      	cmp	r3, #0
 80207f0:	d003      	beq.n	80207fa <tcp_receive+0xd0e>
                    prev->next = cseg;
 80207f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207f4:	68ba      	ldr	r2, [r7, #8]
 80207f6:	601a      	str	r2, [r3, #0]
 80207f8:	e002      	b.n	8020800 <tcp_receive+0xd14>
                  } else {
                    pcb->ooseq = cseg;
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	68ba      	ldr	r2, [r7, #8]
 80207fe:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8020800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020802:	68b8      	ldr	r0, [r7, #8]
 8020804:	f7ff f8fc 	bl	801fa00 <tcp_oos_insert_segment>
                }
                break;
 8020808:	e131      	b.n	8020a6e <tcp_receive+0xf82>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 802080a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802080c:	2b00      	cmp	r3, #0
 802080e:	d117      	bne.n	8020840 <tcp_receive+0xd54>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8020810:	4b2e      	ldr	r3, [pc, #184]	; (80208cc <tcp_receive+0xde0>)
 8020812:	681a      	ldr	r2, [r3, #0]
 8020814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020816:	68db      	ldr	r3, [r3, #12]
 8020818:	685b      	ldr	r3, [r3, #4]
 802081a:	1ad3      	subs	r3, r2, r3
 802081c:	2b00      	cmp	r3, #0
 802081e:	da57      	bge.n	80208d0 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8020820:	4829      	ldr	r0, [pc, #164]	; (80208c8 <tcp_receive+0xddc>)
 8020822:	f7fd fc5e 	bl	801e0e2 <tcp_seg_copy>
 8020826:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8020828:	68bb      	ldr	r3, [r7, #8]
 802082a:	2b00      	cmp	r3, #0
 802082c:	f000 8121 	beq.w	8020a72 <tcp_receive+0xf86>
                    pcb->ooseq = cseg;
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	68ba      	ldr	r2, [r7, #8]
 8020834:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8020836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020838:	68b8      	ldr	r0, [r7, #8]
 802083a:	f7ff f8e1 	bl	801fa00 <tcp_oos_insert_segment>
                  }
                  break;
 802083e:	e118      	b.n	8020a72 <tcp_receive+0xf86>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8020840:	4b22      	ldr	r3, [pc, #136]	; (80208cc <tcp_receive+0xde0>)
 8020842:	681a      	ldr	r2, [r3, #0]
 8020844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020846:	68db      	ldr	r3, [r3, #12]
 8020848:	685b      	ldr	r3, [r3, #4]
 802084a:	1ad3      	subs	r3, r2, r3
 802084c:	3b01      	subs	r3, #1
 802084e:	2b00      	cmp	r3, #0
 8020850:	db3e      	blt.n	80208d0 <tcp_receive+0xde4>
 8020852:	4b1e      	ldr	r3, [pc, #120]	; (80208cc <tcp_receive+0xde0>)
 8020854:	681a      	ldr	r2, [r3, #0]
 8020856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020858:	68db      	ldr	r3, [r3, #12]
 802085a:	685b      	ldr	r3, [r3, #4]
 802085c:	1ad3      	subs	r3, r2, r3
 802085e:	3301      	adds	r3, #1
 8020860:	2b00      	cmp	r3, #0
 8020862:	dc35      	bgt.n	80208d0 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8020864:	4818      	ldr	r0, [pc, #96]	; (80208c8 <tcp_receive+0xddc>)
 8020866:	f7fd fc3c 	bl	801e0e2 <tcp_seg_copy>
 802086a:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 802086c:	68bb      	ldr	r3, [r7, #8]
 802086e:	2b00      	cmp	r3, #0
 8020870:	f000 8101 	beq.w	8020a76 <tcp_receive+0xf8a>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8020874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020876:	68db      	ldr	r3, [r3, #12]
 8020878:	685b      	ldr	r3, [r3, #4]
 802087a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802087c:	8912      	ldrh	r2, [r2, #8]
 802087e:	441a      	add	r2, r3
 8020880:	4b12      	ldr	r3, [pc, #72]	; (80208cc <tcp_receive+0xde0>)
 8020882:	681b      	ldr	r3, [r3, #0]
 8020884:	1ad3      	subs	r3, r2, r3
 8020886:	2b00      	cmp	r3, #0
 8020888:	dd12      	ble.n	80208b0 <tcp_receive+0xdc4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 802088a:	4b10      	ldr	r3, [pc, #64]	; (80208cc <tcp_receive+0xde0>)
 802088c:	681b      	ldr	r3, [r3, #0]
 802088e:	b29a      	uxth	r2, r3
 8020890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020892:	68db      	ldr	r3, [r3, #12]
 8020894:	685b      	ldr	r3, [r3, #4]
 8020896:	b29b      	uxth	r3, r3
 8020898:	1ad3      	subs	r3, r2, r3
 802089a:	b29a      	uxth	r2, r3
 802089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802089e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80208a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208a2:	685a      	ldr	r2, [r3, #4]
 80208a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208a6:	891b      	ldrh	r3, [r3, #8]
 80208a8:	4619      	mov	r1, r3
 80208aa:	4610      	mov	r0, r2
 80208ac:	f7fb ff72 	bl	801c794 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80208b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208b2:	68ba      	ldr	r2, [r7, #8]
 80208b4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80208b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80208b8:	68b8      	ldr	r0, [r7, #8]
 80208ba:	f7ff f8a1 	bl	801fa00 <tcp_oos_insert_segment>
                  }
                  break;
 80208be:	e0da      	b.n	8020a76 <tcp_receive+0xf8a>
 80208c0:	20009524 	.word	0x20009524
 80208c4:	20009521 	.word	0x20009521
 80208c8:	200094f4 	.word	0x200094f4
 80208cc:	20009514 	.word	0x20009514
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80208d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208d2:	681b      	ldr	r3, [r3, #0]
 80208d4:	2b00      	cmp	r3, #0
 80208d6:	f040 80be 	bne.w	8020a56 <tcp_receive+0xf6a>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80208da:	4b7b      	ldr	r3, [pc, #492]	; (8020ac8 <tcp_receive+0xfdc>)
 80208dc:	681a      	ldr	r2, [r3, #0]
 80208de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208e0:	68db      	ldr	r3, [r3, #12]
 80208e2:	685b      	ldr	r3, [r3, #4]
 80208e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	f340 80b5 	ble.w	8020a56 <tcp_receive+0xf6a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80208ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208ee:	68db      	ldr	r3, [r3, #12]
 80208f0:	899b      	ldrh	r3, [r3, #12]
 80208f2:	b29b      	uxth	r3, r3
 80208f4:	4618      	mov	r0, r3
 80208f6:	f7f8 fc97 	bl	8019228 <lwip_htons>
 80208fa:	4603      	mov	r3, r0
 80208fc:	f003 0301 	and.w	r3, r3, #1
 8020900:	2b00      	cmp	r3, #0
 8020902:	f040 80ba 	bne.w	8020a7a <tcp_receive+0xf8e>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8020906:	4871      	ldr	r0, [pc, #452]	; (8020acc <tcp_receive+0xfe0>)
 8020908:	f7fd fbeb 	bl	801e0e2 <tcp_seg_copy>
 802090c:	4602      	mov	r2, r0
 802090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020910:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8020912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020914:	681b      	ldr	r3, [r3, #0]
 8020916:	2b00      	cmp	r3, #0
 8020918:	f000 80b1 	beq.w	8020a7e <tcp_receive+0xf92>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 802091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802091e:	68db      	ldr	r3, [r3, #12]
 8020920:	685b      	ldr	r3, [r3, #4]
 8020922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020924:	8912      	ldrh	r2, [r2, #8]
 8020926:	441a      	add	r2, r3
 8020928:	4b67      	ldr	r3, [pc, #412]	; (8020ac8 <tcp_receive+0xfdc>)
 802092a:	681b      	ldr	r3, [r3, #0]
 802092c:	1ad3      	subs	r3, r2, r3
 802092e:	2b00      	cmp	r3, #0
 8020930:	dd12      	ble.n	8020958 <tcp_receive+0xe6c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8020932:	4b65      	ldr	r3, [pc, #404]	; (8020ac8 <tcp_receive+0xfdc>)
 8020934:	681b      	ldr	r3, [r3, #0]
 8020936:	b29a      	uxth	r2, r3
 8020938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802093a:	68db      	ldr	r3, [r3, #12]
 802093c:	685b      	ldr	r3, [r3, #4]
 802093e:	b29b      	uxth	r3, r3
 8020940:	1ad3      	subs	r3, r2, r3
 8020942:	b29a      	uxth	r2, r3
 8020944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020946:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8020948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802094a:	685a      	ldr	r2, [r3, #4]
 802094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802094e:	891b      	ldrh	r3, [r3, #8]
 8020950:	4619      	mov	r1, r3
 8020952:	4610      	mov	r0, r2
 8020954:	f7fb ff1e 	bl	801c794 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8020958:	4b5d      	ldr	r3, [pc, #372]	; (8020ad0 <tcp_receive+0xfe4>)
 802095a:	881b      	ldrh	r3, [r3, #0]
 802095c:	461a      	mov	r2, r3
 802095e:	4b5a      	ldr	r3, [pc, #360]	; (8020ac8 <tcp_receive+0xfdc>)
 8020960:	681b      	ldr	r3, [r3, #0]
 8020962:	441a      	add	r2, r3
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020968:	6879      	ldr	r1, [r7, #4]
 802096a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 802096c:	440b      	add	r3, r1
 802096e:	1ad3      	subs	r3, r2, r3
 8020970:	2b00      	cmp	r3, #0
 8020972:	f340 8084 	ble.w	8020a7e <tcp_receive+0xf92>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8020976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020978:	681b      	ldr	r3, [r3, #0]
 802097a:	68db      	ldr	r3, [r3, #12]
 802097c:	899b      	ldrh	r3, [r3, #12]
 802097e:	b29b      	uxth	r3, r3
 8020980:	4618      	mov	r0, r3
 8020982:	f7f8 fc51 	bl	8019228 <lwip_htons>
 8020986:	4603      	mov	r3, r0
 8020988:	f003 0301 	and.w	r3, r3, #1
 802098c:	2b00      	cmp	r3, #0
 802098e:	d01d      	beq.n	80209cc <tcp_receive+0xee0>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8020990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020992:	681b      	ldr	r3, [r3, #0]
 8020994:	68dc      	ldr	r4, [r3, #12]
 8020996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020998:	681b      	ldr	r3, [r3, #0]
 802099a:	68db      	ldr	r3, [r3, #12]
 802099c:	899b      	ldrh	r3, [r3, #12]
 802099e:	b29b      	uxth	r3, r3
 80209a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80209a4:	b29d      	uxth	r5, r3
 80209a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209a8:	681b      	ldr	r3, [r3, #0]
 80209aa:	68db      	ldr	r3, [r3, #12]
 80209ac:	899b      	ldrh	r3, [r3, #12]
 80209ae:	b29b      	uxth	r3, r3
 80209b0:	4618      	mov	r0, r3
 80209b2:	f7f8 fc39 	bl	8019228 <lwip_htons>
 80209b6:	4603      	mov	r3, r0
 80209b8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80209bc:	b29b      	uxth	r3, r3
 80209be:	4618      	mov	r0, r3
 80209c0:	f7f8 fc32 	bl	8019228 <lwip_htons>
 80209c4:	4603      	mov	r3, r0
 80209c6:	432b      	orrs	r3, r5
 80209c8:	b29b      	uxth	r3, r3
 80209ca:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80209cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209ce:	681b      	ldr	r3, [r3, #0]
 80209d0:	687a      	ldr	r2, [r7, #4]
 80209d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80209d4:	b291      	uxth	r1, r2
 80209d6:	687a      	ldr	r2, [r7, #4]
 80209d8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80209da:	440a      	add	r2, r1
 80209dc:	b291      	uxth	r1, r2
 80209de:	4a3a      	ldr	r2, [pc, #232]	; (8020ac8 <tcp_receive+0xfdc>)
 80209e0:	6812      	ldr	r2, [r2, #0]
 80209e2:	b292      	uxth	r2, r2
 80209e4:	1a8a      	subs	r2, r1, r2
 80209e6:	b292      	uxth	r2, r2
 80209e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80209ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209ec:	681b      	ldr	r3, [r3, #0]
 80209ee:	685a      	ldr	r2, [r3, #4]
 80209f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	891b      	ldrh	r3, [r3, #8]
 80209f6:	4619      	mov	r1, r3
 80209f8:	4610      	mov	r0, r2
 80209fa:	f7fb fecb 	bl	801c794 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80209fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a00:	681b      	ldr	r3, [r3, #0]
 8020a02:	891c      	ldrh	r4, [r3, #8]
 8020a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a06:	681b      	ldr	r3, [r3, #0]
 8020a08:	68db      	ldr	r3, [r3, #12]
 8020a0a:	899b      	ldrh	r3, [r3, #12]
 8020a0c:	b29b      	uxth	r3, r3
 8020a0e:	4618      	mov	r0, r3
 8020a10:	f7f8 fc0a 	bl	8019228 <lwip_htons>
 8020a14:	4603      	mov	r3, r0
 8020a16:	f003 0303 	and.w	r3, r3, #3
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d001      	beq.n	8020a22 <tcp_receive+0xf36>
 8020a1e:	2301      	movs	r3, #1
 8020a20:	e000      	b.n	8020a24 <tcp_receive+0xf38>
 8020a22:	2300      	movs	r3, #0
 8020a24:	4423      	add	r3, r4
 8020a26:	b29a      	uxth	r2, r3
 8020a28:	4b29      	ldr	r3, [pc, #164]	; (8020ad0 <tcp_receive+0xfe4>)
 8020a2a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8020a2c:	4b28      	ldr	r3, [pc, #160]	; (8020ad0 <tcp_receive+0xfe4>)
 8020a2e:	881b      	ldrh	r3, [r3, #0]
 8020a30:	461a      	mov	r2, r3
 8020a32:	4b25      	ldr	r3, [pc, #148]	; (8020ac8 <tcp_receive+0xfdc>)
 8020a34:	681b      	ldr	r3, [r3, #0]
 8020a36:	441a      	add	r2, r3
 8020a38:	687b      	ldr	r3, [r7, #4]
 8020a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a3c:	6879      	ldr	r1, [r7, #4]
 8020a3e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020a40:	440b      	add	r3, r1
 8020a42:	429a      	cmp	r2, r3
 8020a44:	d01b      	beq.n	8020a7e <tcp_receive+0xf92>
 8020a46:	4b23      	ldr	r3, [pc, #140]	; (8020ad4 <tcp_receive+0xfe8>)
 8020a48:	f240 627b 	movw	r2, #1659	; 0x67b
 8020a4c:	4922      	ldr	r1, [pc, #136]	; (8020ad8 <tcp_receive+0xfec>)
 8020a4e:	4823      	ldr	r0, [pc, #140]	; (8020adc <tcp_receive+0xff0>)
 8020a50:	f006 fcee 	bl	8027430 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8020a54:	e013      	b.n	8020a7e <tcp_receive+0xf92>
              }
            }
            prev = next;
 8020a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a58:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8020a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a5c:	681b      	ldr	r3, [r3, #0]
 8020a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a62:	2b00      	cmp	r3, #0
 8020a64:	f47f aeac 	bne.w	80207c0 <tcp_receive+0xcd4>
      if (pcb->rcv_nxt == seqno) {
 8020a68:	e00f      	b.n	8020a8a <tcp_receive+0xf9e>
                break;
 8020a6a:	bf00      	nop
 8020a6c:	e00d      	b.n	8020a8a <tcp_receive+0xf9e>
                break;
 8020a6e:	bf00      	nop
 8020a70:	e00b      	b.n	8020a8a <tcp_receive+0xf9e>
                  break;
 8020a72:	bf00      	nop
 8020a74:	e009      	b.n	8020a8a <tcp_receive+0xf9e>
                  break;
 8020a76:	bf00      	nop
 8020a78:	e007      	b.n	8020a8a <tcp_receive+0xf9e>
                  break;
 8020a7a:	bf00      	nop
 8020a7c:	e005      	b.n	8020a8a <tcp_receive+0xf9e>
                break;
 8020a7e:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8020a80:	e003      	b.n	8020a8a <tcp_receive+0xf9e>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8020a82:	6878      	ldr	r0, [r7, #4]
 8020a84:	f000 ff52 	bl	802192c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8020a88:	e01a      	b.n	8020ac0 <tcp_receive+0xfd4>
 8020a8a:	e019      	b.n	8020ac0 <tcp_receive+0xfd4>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8020a8c:	4b0e      	ldr	r3, [pc, #56]	; (8020ac8 <tcp_receive+0xfdc>)
 8020a8e:	681a      	ldr	r2, [r3, #0]
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a94:	1ad3      	subs	r3, r2, r3
 8020a96:	2b00      	cmp	r3, #0
 8020a98:	db0a      	blt.n	8020ab0 <tcp_receive+0xfc4>
 8020a9a:	4b0b      	ldr	r3, [pc, #44]	; (8020ac8 <tcp_receive+0xfdc>)
 8020a9c:	681a      	ldr	r2, [r3, #0]
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020aa2:	6879      	ldr	r1, [r7, #4]
 8020aa4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020aa6:	440b      	add	r3, r1
 8020aa8:	1ad3      	subs	r3, r2, r3
 8020aaa:	3301      	adds	r3, #1
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	dd07      	ble.n	8020ac0 <tcp_receive+0xfd4>
      tcp_ack_now(pcb);
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	7e9b      	ldrb	r3, [r3, #26]
 8020ab4:	f043 0302 	orr.w	r3, r3, #2
 8020ab8:	b2da      	uxtb	r2, r3
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8020abe:	e7ff      	b.n	8020ac0 <tcp_receive+0xfd4>
 8020ac0:	bf00      	nop
 8020ac2:	3734      	adds	r7, #52	; 0x34
 8020ac4:	46bd      	mov	sp, r7
 8020ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ac8:	20009514 	.word	0x20009514
 8020acc:	200094f4 	.word	0x200094f4
 8020ad0:	2000951e 	.word	0x2000951e
 8020ad4:	0802abf8 	.word	0x0802abf8
 8020ad8:	0802aec4 	.word	0x0802aec4
 8020adc:	0802ac3c 	.word	0x0802ac3c

08020ae0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8020ae0:	b480      	push	{r7}
 8020ae2:	b083      	sub	sp, #12
 8020ae4:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8020ae6:	4b18      	ldr	r3, [pc, #96]	; (8020b48 <tcp_getoptbyte+0x68>)
 8020ae8:	681b      	ldr	r3, [r3, #0]
 8020aea:	2b00      	cmp	r3, #0
 8020aec:	d005      	beq.n	8020afa <tcp_getoptbyte+0x1a>
 8020aee:	4b17      	ldr	r3, [pc, #92]	; (8020b4c <tcp_getoptbyte+0x6c>)
 8020af0:	881a      	ldrh	r2, [r3, #0]
 8020af2:	4b17      	ldr	r3, [pc, #92]	; (8020b50 <tcp_getoptbyte+0x70>)
 8020af4:	881b      	ldrh	r3, [r3, #0]
 8020af6:	429a      	cmp	r2, r3
 8020af8:	d20e      	bcs.n	8020b18 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8020afa:	4b16      	ldr	r3, [pc, #88]	; (8020b54 <tcp_getoptbyte+0x74>)
 8020afc:	681b      	ldr	r3, [r3, #0]
 8020afe:	3314      	adds	r3, #20
 8020b00:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8020b02:	4b12      	ldr	r3, [pc, #72]	; (8020b4c <tcp_getoptbyte+0x6c>)
 8020b04:	881b      	ldrh	r3, [r3, #0]
 8020b06:	1c5a      	adds	r2, r3, #1
 8020b08:	b291      	uxth	r1, r2
 8020b0a:	4a10      	ldr	r2, [pc, #64]	; (8020b4c <tcp_getoptbyte+0x6c>)
 8020b0c:	8011      	strh	r1, [r2, #0]
 8020b0e:	461a      	mov	r2, r3
 8020b10:	683b      	ldr	r3, [r7, #0]
 8020b12:	4413      	add	r3, r2
 8020b14:	781b      	ldrb	r3, [r3, #0]
 8020b16:	e010      	b.n	8020b3a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8020b18:	4b0c      	ldr	r3, [pc, #48]	; (8020b4c <tcp_getoptbyte+0x6c>)
 8020b1a:	881b      	ldrh	r3, [r3, #0]
 8020b1c:	1c5a      	adds	r2, r3, #1
 8020b1e:	b291      	uxth	r1, r2
 8020b20:	4a0a      	ldr	r2, [pc, #40]	; (8020b4c <tcp_getoptbyte+0x6c>)
 8020b22:	8011      	strh	r1, [r2, #0]
 8020b24:	b2da      	uxtb	r2, r3
 8020b26:	4b0a      	ldr	r3, [pc, #40]	; (8020b50 <tcp_getoptbyte+0x70>)
 8020b28:	881b      	ldrh	r3, [r3, #0]
 8020b2a:	b2db      	uxtb	r3, r3
 8020b2c:	1ad3      	subs	r3, r2, r3
 8020b2e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8020b30:	4b05      	ldr	r3, [pc, #20]	; (8020b48 <tcp_getoptbyte+0x68>)
 8020b32:	681a      	ldr	r2, [r3, #0]
 8020b34:	79fb      	ldrb	r3, [r7, #7]
 8020b36:	4413      	add	r3, r2
 8020b38:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020b3a:	4618      	mov	r0, r3
 8020b3c:	370c      	adds	r7, #12
 8020b3e:	46bd      	mov	sp, r7
 8020b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b44:	4770      	bx	lr
 8020b46:	bf00      	nop
 8020b48:	2000950c 	.word	0x2000950c
 8020b4c:	20009510 	.word	0x20009510
 8020b50:	2000950a 	.word	0x2000950a
 8020b54:	20009504 	.word	0x20009504

08020b58 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8020b58:	b580      	push	{r7, lr}
 8020b5a:	b084      	sub	sp, #16
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8020b60:	4b2d      	ldr	r3, [pc, #180]	; (8020c18 <tcp_parseopt+0xc0>)
 8020b62:	881b      	ldrh	r3, [r3, #0]
 8020b64:	2b00      	cmp	r3, #0
 8020b66:	d053      	beq.n	8020c10 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8020b68:	4b2c      	ldr	r3, [pc, #176]	; (8020c1c <tcp_parseopt+0xc4>)
 8020b6a:	2200      	movs	r2, #0
 8020b6c:	801a      	strh	r2, [r3, #0]
 8020b6e:	e043      	b.n	8020bf8 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8020b70:	f7ff ffb6 	bl	8020ae0 <tcp_getoptbyte>
 8020b74:	4603      	mov	r3, r0
 8020b76:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8020b78:	7bfb      	ldrb	r3, [r7, #15]
 8020b7a:	2b01      	cmp	r3, #1
 8020b7c:	d03c      	beq.n	8020bf8 <tcp_parseopt+0xa0>
 8020b7e:	2b02      	cmp	r3, #2
 8020b80:	d002      	beq.n	8020b88 <tcp_parseopt+0x30>
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	d03f      	beq.n	8020c06 <tcp_parseopt+0xae>
 8020b86:	e026      	b.n	8020bd6 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8020b88:	f7ff ffaa 	bl	8020ae0 <tcp_getoptbyte>
 8020b8c:	4603      	mov	r3, r0
 8020b8e:	2b04      	cmp	r3, #4
 8020b90:	d13b      	bne.n	8020c0a <tcp_parseopt+0xb2>
 8020b92:	4b22      	ldr	r3, [pc, #136]	; (8020c1c <tcp_parseopt+0xc4>)
 8020b94:	881b      	ldrh	r3, [r3, #0]
 8020b96:	3302      	adds	r3, #2
 8020b98:	4a1f      	ldr	r2, [pc, #124]	; (8020c18 <tcp_parseopt+0xc0>)
 8020b9a:	8812      	ldrh	r2, [r2, #0]
 8020b9c:	4293      	cmp	r3, r2
 8020b9e:	dc34      	bgt.n	8020c0a <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8020ba0:	f7ff ff9e 	bl	8020ae0 <tcp_getoptbyte>
 8020ba4:	4603      	mov	r3, r0
 8020ba6:	b29b      	uxth	r3, r3
 8020ba8:	021b      	lsls	r3, r3, #8
 8020baa:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8020bac:	f7ff ff98 	bl	8020ae0 <tcp_getoptbyte>
 8020bb0:	4603      	mov	r3, r0
 8020bb2:	b29a      	uxth	r2, r3
 8020bb4:	89bb      	ldrh	r3, [r7, #12]
 8020bb6:	4313      	orrs	r3, r2
 8020bb8:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8020bba:	89bb      	ldrh	r3, [r7, #12]
 8020bbc:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8020bc0:	d804      	bhi.n	8020bcc <tcp_parseopt+0x74>
 8020bc2:	89bb      	ldrh	r3, [r7, #12]
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	d001      	beq.n	8020bcc <tcp_parseopt+0x74>
 8020bc8:	89ba      	ldrh	r2, [r7, #12]
 8020bca:	e001      	b.n	8020bd0 <tcp_parseopt+0x78>
 8020bcc:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8020bd0:	687b      	ldr	r3, [r7, #4]
 8020bd2:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8020bd4:	e010      	b.n	8020bf8 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8020bd6:	f7ff ff83 	bl	8020ae0 <tcp_getoptbyte>
 8020bda:	4603      	mov	r3, r0
 8020bdc:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8020bde:	7afb      	ldrb	r3, [r7, #11]
 8020be0:	2b01      	cmp	r3, #1
 8020be2:	d914      	bls.n	8020c0e <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8020be4:	7afb      	ldrb	r3, [r7, #11]
 8020be6:	b29a      	uxth	r2, r3
 8020be8:	4b0c      	ldr	r3, [pc, #48]	; (8020c1c <tcp_parseopt+0xc4>)
 8020bea:	881b      	ldrh	r3, [r3, #0]
 8020bec:	4413      	add	r3, r2
 8020bee:	b29b      	uxth	r3, r3
 8020bf0:	3b02      	subs	r3, #2
 8020bf2:	b29a      	uxth	r2, r3
 8020bf4:	4b09      	ldr	r3, [pc, #36]	; (8020c1c <tcp_parseopt+0xc4>)
 8020bf6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8020bf8:	4b08      	ldr	r3, [pc, #32]	; (8020c1c <tcp_parseopt+0xc4>)
 8020bfa:	881a      	ldrh	r2, [r3, #0]
 8020bfc:	4b06      	ldr	r3, [pc, #24]	; (8020c18 <tcp_parseopt+0xc0>)
 8020bfe:	881b      	ldrh	r3, [r3, #0]
 8020c00:	429a      	cmp	r2, r3
 8020c02:	d3b5      	bcc.n	8020b70 <tcp_parseopt+0x18>
 8020c04:	e004      	b.n	8020c10 <tcp_parseopt+0xb8>
        return;
 8020c06:	bf00      	nop
 8020c08:	e002      	b.n	8020c10 <tcp_parseopt+0xb8>
          return;
 8020c0a:	bf00      	nop
 8020c0c:	e000      	b.n	8020c10 <tcp_parseopt+0xb8>
          return;
 8020c0e:	bf00      	nop
      }
    }
  }
}
 8020c10:	3710      	adds	r7, #16
 8020c12:	46bd      	mov	sp, r7
 8020c14:	bd80      	pop	{r7, pc}
 8020c16:	bf00      	nop
 8020c18:	20009508 	.word	0x20009508
 8020c1c:	20009510 	.word	0x20009510

08020c20 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8020c20:	b480      	push	{r7}
 8020c22:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8020c24:	4b05      	ldr	r3, [pc, #20]	; (8020c3c <tcp_trigger_input_pcb_close+0x1c>)
 8020c26:	781b      	ldrb	r3, [r3, #0]
 8020c28:	f043 0310 	orr.w	r3, r3, #16
 8020c2c:	b2da      	uxtb	r2, r3
 8020c2e:	4b03      	ldr	r3, [pc, #12]	; (8020c3c <tcp_trigger_input_pcb_close+0x1c>)
 8020c30:	701a      	strb	r2, [r3, #0]
}
 8020c32:	bf00      	nop
 8020c34:	46bd      	mov	sp, r7
 8020c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c3a:	4770      	bx	lr
 8020c3c:	20009521 	.word	0x20009521

08020c40 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8020c40:	b580      	push	{r7, lr}
 8020c42:	b086      	sub	sp, #24
 8020c44:	af00      	add	r7, sp, #0
 8020c46:	60f8      	str	r0, [r7, #12]
 8020c48:	607b      	str	r3, [r7, #4]
 8020c4a:	460b      	mov	r3, r1
 8020c4c:	817b      	strh	r3, [r7, #10]
 8020c4e:	4613      	mov	r3, r2
 8020c50:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8020c52:	897a      	ldrh	r2, [r7, #10]
 8020c54:	893b      	ldrh	r3, [r7, #8]
 8020c56:	4413      	add	r3, r2
 8020c58:	b29b      	uxth	r3, r3
 8020c5a:	3314      	adds	r3, #20
 8020c5c:	b29b      	uxth	r3, r3
 8020c5e:	2200      	movs	r2, #0
 8020c60:	4619      	mov	r1, r3
 8020c62:	2001      	movs	r0, #1
 8020c64:	f7fb fb98 	bl	801c398 <pbuf_alloc>
 8020c68:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8020c6a:	697b      	ldr	r3, [r7, #20]
 8020c6c:	2b00      	cmp	r3, #0
 8020c6e:	d057      	beq.n	8020d20 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8020c70:	697b      	ldr	r3, [r7, #20]
 8020c72:	895b      	ldrh	r3, [r3, #10]
 8020c74:	461a      	mov	r2, r3
 8020c76:	897b      	ldrh	r3, [r7, #10]
 8020c78:	3314      	adds	r3, #20
 8020c7a:	429a      	cmp	r2, r3
 8020c7c:	da05      	bge.n	8020c8a <tcp_output_alloc_header+0x4a>
 8020c7e:	4b2b      	ldr	r3, [pc, #172]	; (8020d2c <tcp_output_alloc_header+0xec>)
 8020c80:	2273      	movs	r2, #115	; 0x73
 8020c82:	492b      	ldr	r1, [pc, #172]	; (8020d30 <tcp_output_alloc_header+0xf0>)
 8020c84:	482b      	ldr	r0, [pc, #172]	; (8020d34 <tcp_output_alloc_header+0xf4>)
 8020c86:	f006 fbd3 	bl	8027430 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8020c8a:	697b      	ldr	r3, [r7, #20]
 8020c8c:	685b      	ldr	r3, [r3, #4]
 8020c8e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8020c90:	68fb      	ldr	r3, [r7, #12]
 8020c92:	8adb      	ldrh	r3, [r3, #22]
 8020c94:	4618      	mov	r0, r3
 8020c96:	f7f8 fac7 	bl	8019228 <lwip_htons>
 8020c9a:	4603      	mov	r3, r0
 8020c9c:	461a      	mov	r2, r3
 8020c9e:	693b      	ldr	r3, [r7, #16]
 8020ca0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8020ca2:	68fb      	ldr	r3, [r7, #12]
 8020ca4:	8b1b      	ldrh	r3, [r3, #24]
 8020ca6:	4618      	mov	r0, r3
 8020ca8:	f7f8 fabe 	bl	8019228 <lwip_htons>
 8020cac:	4603      	mov	r3, r0
 8020cae:	461a      	mov	r2, r3
 8020cb0:	693b      	ldr	r3, [r7, #16]
 8020cb2:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8020cb4:	693b      	ldr	r3, [r7, #16]
 8020cb6:	687a      	ldr	r2, [r7, #4]
 8020cb8:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8020cba:	68fb      	ldr	r3, [r7, #12]
 8020cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020cbe:	4618      	mov	r0, r3
 8020cc0:	f7f8 fac0 	bl	8019244 <lwip_htonl>
 8020cc4:	4602      	mov	r2, r0
 8020cc6:	693b      	ldr	r3, [r7, #16]
 8020cc8:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8020cca:	897b      	ldrh	r3, [r7, #10]
 8020ccc:	089b      	lsrs	r3, r3, #2
 8020cce:	b29b      	uxth	r3, r3
 8020cd0:	3305      	adds	r3, #5
 8020cd2:	b29b      	uxth	r3, r3
 8020cd4:	031b      	lsls	r3, r3, #12
 8020cd6:	b29b      	uxth	r3, r3
 8020cd8:	f043 0310 	orr.w	r3, r3, #16
 8020cdc:	b29b      	uxth	r3, r3
 8020cde:	4618      	mov	r0, r3
 8020ce0:	f7f8 faa2 	bl	8019228 <lwip_htons>
 8020ce4:	4603      	mov	r3, r0
 8020ce6:	461a      	mov	r2, r3
 8020ce8:	693b      	ldr	r3, [r7, #16]
 8020cea:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8020cec:	68fb      	ldr	r3, [r7, #12]
 8020cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020cf0:	4618      	mov	r0, r3
 8020cf2:	f7f8 fa99 	bl	8019228 <lwip_htons>
 8020cf6:	4603      	mov	r3, r0
 8020cf8:	461a      	mov	r2, r3
 8020cfa:	693b      	ldr	r3, [r7, #16]
 8020cfc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8020cfe:	693b      	ldr	r3, [r7, #16]
 8020d00:	2200      	movs	r2, #0
 8020d02:	741a      	strb	r2, [r3, #16]
 8020d04:	2200      	movs	r2, #0
 8020d06:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8020d08:	693b      	ldr	r3, [r7, #16]
 8020d0a:	2200      	movs	r2, #0
 8020d0c:	749a      	strb	r2, [r3, #18]
 8020d0e:	2200      	movs	r2, #0
 8020d10:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020d12:	68fb      	ldr	r3, [r7, #12]
 8020d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d16:	68fa      	ldr	r2, [r7, #12]
 8020d18:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8020d1a:	441a      	add	r2, r3
 8020d1c:	68fb      	ldr	r3, [r7, #12]
 8020d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8020d20:	697b      	ldr	r3, [r7, #20]
}
 8020d22:	4618      	mov	r0, r3
 8020d24:	3718      	adds	r7, #24
 8020d26:	46bd      	mov	sp, r7
 8020d28:	bd80      	pop	{r7, pc}
 8020d2a:	bf00      	nop
 8020d2c:	0802af80 	.word	0x0802af80
 8020d30:	0802afb4 	.word	0x0802afb4
 8020d34:	0802afe4 	.word	0x0802afe4

08020d38 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8020d38:	b5b0      	push	{r4, r5, r7, lr}
 8020d3a:	b084      	sub	sp, #16
 8020d3c:	af00      	add	r7, sp, #0
 8020d3e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020d44:	2b00      	cmp	r3, #0
 8020d46:	d02c      	beq.n	8020da2 <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8020d48:	687b      	ldr	r3, [r7, #4]
 8020d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020d4c:	60fb      	str	r3, [r7, #12]
 8020d4e:	e002      	b.n	8020d56 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8020d50:	68fb      	ldr	r3, [r7, #12]
 8020d52:	681b      	ldr	r3, [r3, #0]
 8020d54:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8020d56:	68fb      	ldr	r3, [r7, #12]
 8020d58:	681b      	ldr	r3, [r3, #0]
 8020d5a:	2b00      	cmp	r3, #0
 8020d5c:	d1f8      	bne.n	8020d50 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8020d5e:	68fb      	ldr	r3, [r7, #12]
 8020d60:	68db      	ldr	r3, [r3, #12]
 8020d62:	899b      	ldrh	r3, [r3, #12]
 8020d64:	b29b      	uxth	r3, r3
 8020d66:	4618      	mov	r0, r3
 8020d68:	f7f8 fa5e 	bl	8019228 <lwip_htons>
 8020d6c:	4603      	mov	r3, r0
 8020d6e:	f003 0307 	and.w	r3, r3, #7
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	d115      	bne.n	8020da2 <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8020d76:	68fb      	ldr	r3, [r7, #12]
 8020d78:	68dc      	ldr	r4, [r3, #12]
 8020d7a:	68fb      	ldr	r3, [r7, #12]
 8020d7c:	68db      	ldr	r3, [r3, #12]
 8020d7e:	899b      	ldrh	r3, [r3, #12]
 8020d80:	b29d      	uxth	r5, r3
 8020d82:	2001      	movs	r0, #1
 8020d84:	f7f8 fa50 	bl	8019228 <lwip_htons>
 8020d88:	4603      	mov	r3, r0
 8020d8a:	432b      	orrs	r3, r5
 8020d8c:	b29b      	uxth	r3, r3
 8020d8e:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
 8020d90:	687b      	ldr	r3, [r7, #4]
 8020d92:	7e9b      	ldrb	r3, [r3, #26]
 8020d94:	f043 0320 	orr.w	r3, r3, #32
 8020d98:	b2da      	uxtb	r2, r3
 8020d9a:	687b      	ldr	r3, [r7, #4]
 8020d9c:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8020d9e:	2300      	movs	r3, #0
 8020da0:	e004      	b.n	8020dac <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8020da2:	2101      	movs	r1, #1
 8020da4:	6878      	ldr	r0, [r7, #4]
 8020da6:	f000 fcc3 	bl	8021730 <tcp_enqueue_flags>
 8020daa:	4603      	mov	r3, r0
}
 8020dac:	4618      	mov	r0, r3
 8020dae:	3710      	adds	r7, #16
 8020db0:	46bd      	mov	sp, r7
 8020db2:	bdb0      	pop	{r4, r5, r7, pc}

08020db4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8020db4:	b590      	push	{r4, r7, lr}
 8020db6:	b087      	sub	sp, #28
 8020db8:	af00      	add	r7, sp, #0
 8020dba:	60f8      	str	r0, [r7, #12]
 8020dbc:	60b9      	str	r1, [r7, #8]
 8020dbe:	603b      	str	r3, [r7, #0]
 8020dc0:	4613      	mov	r3, r2
 8020dc2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8020dc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8020dc8:	f003 0301 	and.w	r3, r3, #1
 8020dcc:	2b00      	cmp	r3, #0
 8020dce:	d001      	beq.n	8020dd4 <tcp_create_segment+0x20>
 8020dd0:	2304      	movs	r3, #4
 8020dd2:	e000      	b.n	8020dd6 <tcp_create_segment+0x22>
 8020dd4:	2300      	movs	r3, #0
 8020dd6:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8020dd8:	2002      	movs	r0, #2
 8020dda:	f7fb f86d 	bl	801beb8 <memp_malloc>
 8020dde:	6138      	str	r0, [r7, #16]
 8020de0:	693b      	ldr	r3, [r7, #16]
 8020de2:	2b00      	cmp	r3, #0
 8020de4:	d104      	bne.n	8020df0 <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8020de6:	68b8      	ldr	r0, [r7, #8]
 8020de8:	f7fb fe48 	bl	801ca7c <pbuf_free>
    return NULL;
 8020dec:	2300      	movs	r3, #0
 8020dee:	e061      	b.n	8020eb4 <tcp_create_segment+0x100>
  }
  seg->flags = optflags;
 8020df0:	693b      	ldr	r3, [r7, #16]
 8020df2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8020df6:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8020df8:	693b      	ldr	r3, [r7, #16]
 8020dfa:	2200      	movs	r2, #0
 8020dfc:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8020dfe:	693b      	ldr	r3, [r7, #16]
 8020e00:	68ba      	ldr	r2, [r7, #8]
 8020e02:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8020e04:	68bb      	ldr	r3, [r7, #8]
 8020e06:	891a      	ldrh	r2, [r3, #8]
 8020e08:	7dfb      	ldrb	r3, [r7, #23]
 8020e0a:	b29b      	uxth	r3, r3
 8020e0c:	429a      	cmp	r2, r3
 8020e0e:	d205      	bcs.n	8020e1c <tcp_create_segment+0x68>
 8020e10:	4b2a      	ldr	r3, [pc, #168]	; (8020ebc <tcp_create_segment+0x108>)
 8020e12:	22ba      	movs	r2, #186	; 0xba
 8020e14:	492a      	ldr	r1, [pc, #168]	; (8020ec0 <tcp_create_segment+0x10c>)
 8020e16:	482b      	ldr	r0, [pc, #172]	; (8020ec4 <tcp_create_segment+0x110>)
 8020e18:	f006 fb0a 	bl	8027430 <iprintf>
  seg->len = p->tot_len - optlen;
 8020e1c:	68bb      	ldr	r3, [r7, #8]
 8020e1e:	891a      	ldrh	r2, [r3, #8]
 8020e20:	7dfb      	ldrb	r3, [r7, #23]
 8020e22:	b29b      	uxth	r3, r3
 8020e24:	1ad3      	subs	r3, r2, r3
 8020e26:	b29a      	uxth	r2, r3
 8020e28:	693b      	ldr	r3, [r7, #16]
 8020e2a:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8020e2c:	2114      	movs	r1, #20
 8020e2e:	68b8      	ldr	r0, [r7, #8]
 8020e30:	f7fb fe00 	bl	801ca34 <pbuf_header>
 8020e34:	4603      	mov	r3, r0
 8020e36:	2b00      	cmp	r3, #0
 8020e38:	d004      	beq.n	8020e44 <tcp_create_segment+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8020e3a:	6938      	ldr	r0, [r7, #16]
 8020e3c:	f7fd f939 	bl	801e0b2 <tcp_seg_free>
    return NULL;
 8020e40:	2300      	movs	r3, #0
 8020e42:	e037      	b.n	8020eb4 <tcp_create_segment+0x100>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8020e44:	693b      	ldr	r3, [r7, #16]
 8020e46:	685b      	ldr	r3, [r3, #4]
 8020e48:	685a      	ldr	r2, [r3, #4]
 8020e4a:	693b      	ldr	r3, [r7, #16]
 8020e4c:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8020e4e:	693b      	ldr	r3, [r7, #16]
 8020e50:	68dc      	ldr	r4, [r3, #12]
 8020e52:	68fb      	ldr	r3, [r7, #12]
 8020e54:	8adb      	ldrh	r3, [r3, #22]
 8020e56:	4618      	mov	r0, r3
 8020e58:	f7f8 f9e6 	bl	8019228 <lwip_htons>
 8020e5c:	4603      	mov	r3, r0
 8020e5e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8020e60:	693b      	ldr	r3, [r7, #16]
 8020e62:	68dc      	ldr	r4, [r3, #12]
 8020e64:	68fb      	ldr	r3, [r7, #12]
 8020e66:	8b1b      	ldrh	r3, [r3, #24]
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f7f8 f9dd 	bl	8019228 <lwip_htons>
 8020e6e:	4603      	mov	r3, r0
 8020e70:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8020e72:	693b      	ldr	r3, [r7, #16]
 8020e74:	68dc      	ldr	r4, [r3, #12]
 8020e76:	6838      	ldr	r0, [r7, #0]
 8020e78:	f7f8 f9e4 	bl	8019244 <lwip_htonl>
 8020e7c:	4603      	mov	r3, r0
 8020e7e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8020e80:	693b      	ldr	r3, [r7, #16]
 8020e82:	68dc      	ldr	r4, [r3, #12]
 8020e84:	7dfb      	ldrb	r3, [r7, #23]
 8020e86:	089b      	lsrs	r3, r3, #2
 8020e88:	b2db      	uxtb	r3, r3
 8020e8a:	b29b      	uxth	r3, r3
 8020e8c:	3305      	adds	r3, #5
 8020e8e:	b29b      	uxth	r3, r3
 8020e90:	031b      	lsls	r3, r3, #12
 8020e92:	b29a      	uxth	r2, r3
 8020e94:	79fb      	ldrb	r3, [r7, #7]
 8020e96:	b29b      	uxth	r3, r3
 8020e98:	4313      	orrs	r3, r2
 8020e9a:	b29b      	uxth	r3, r3
 8020e9c:	4618      	mov	r0, r3
 8020e9e:	f7f8 f9c3 	bl	8019228 <lwip_htons>
 8020ea2:	4603      	mov	r3, r0
 8020ea4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8020ea6:	693b      	ldr	r3, [r7, #16]
 8020ea8:	68db      	ldr	r3, [r3, #12]
 8020eaa:	2200      	movs	r2, #0
 8020eac:	749a      	strb	r2, [r3, #18]
 8020eae:	2200      	movs	r2, #0
 8020eb0:	74da      	strb	r2, [r3, #19]
  return seg;
 8020eb2:	693b      	ldr	r3, [r7, #16]
}
 8020eb4:	4618      	mov	r0, r3
 8020eb6:	371c      	adds	r7, #28
 8020eb8:	46bd      	mov	sp, r7
 8020eba:	bd90      	pop	{r4, r7, pc}
 8020ebc:	0802af80 	.word	0x0802af80
 8020ec0:	0802b00c 	.word	0x0802b00c
 8020ec4:	0802afe4 	.word	0x0802afe4

08020ec8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8020ec8:	b580      	push	{r7, lr}
 8020eca:	b086      	sub	sp, #24
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	607b      	str	r3, [r7, #4]
 8020ed0:	4603      	mov	r3, r0
 8020ed2:	73fb      	strb	r3, [r7, #15]
 8020ed4:	460b      	mov	r3, r1
 8020ed6:	81bb      	strh	r3, [r7, #12]
 8020ed8:	4613      	mov	r3, r2
 8020eda:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8020edc:	89bb      	ldrh	r3, [r7, #12]
 8020ede:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8020ee0:	89ba      	ldrh	r2, [r7, #12]
 8020ee2:	897b      	ldrh	r3, [r7, #10]
 8020ee4:	429a      	cmp	r2, r3
 8020ee6:	d221      	bcs.n	8020f2c <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8020ee8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8020eec:	f003 0302 	and.w	r3, r3, #2
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	d111      	bne.n	8020f18 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8020ef4:	6a3b      	ldr	r3, [r7, #32]
 8020ef6:	7e9b      	ldrb	r3, [r3, #26]
 8020ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8020efc:	2b00      	cmp	r3, #0
 8020efe:	d115      	bne.n	8020f2c <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8020f00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8020f04:	2b00      	cmp	r3, #0
 8020f06:	d007      	beq.n	8020f18 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8020f08:	6a3b      	ldr	r3, [r7, #32]
 8020f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	d103      	bne.n	8020f18 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8020f10:	6a3b      	ldr	r3, [r7, #32]
 8020f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d009      	beq.n	8020f2c <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8020f18:	89bb      	ldrh	r3, [r7, #12]
 8020f1a:	f203 23d3 	addw	r3, r3, #723	; 0x2d3
 8020f1e:	f023 0203 	bic.w	r2, r3, #3
 8020f22:	897b      	ldrh	r3, [r7, #10]
 8020f24:	4293      	cmp	r3, r2
 8020f26:	bf28      	it	cs
 8020f28:	4613      	movcs	r3, r2
 8020f2a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8020f2c:	8af9      	ldrh	r1, [r7, #22]
 8020f2e:	7bfb      	ldrb	r3, [r7, #15]
 8020f30:	2200      	movs	r2, #0
 8020f32:	4618      	mov	r0, r3
 8020f34:	f7fb fa30 	bl	801c398 <pbuf_alloc>
 8020f38:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8020f3a:	693b      	ldr	r3, [r7, #16]
 8020f3c:	2b00      	cmp	r3, #0
 8020f3e:	d101      	bne.n	8020f44 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8020f40:	2300      	movs	r3, #0
 8020f42:	e019      	b.n	8020f78 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8020f44:	693b      	ldr	r3, [r7, #16]
 8020f46:	681b      	ldr	r3, [r3, #0]
 8020f48:	2b00      	cmp	r3, #0
 8020f4a:	d006      	beq.n	8020f5a <tcp_pbuf_prealloc+0x92>
 8020f4c:	4b0c      	ldr	r3, [pc, #48]	; (8020f80 <tcp_pbuf_prealloc+0xb8>)
 8020f4e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8020f52:	490c      	ldr	r1, [pc, #48]	; (8020f84 <tcp_pbuf_prealloc+0xbc>)
 8020f54:	480c      	ldr	r0, [pc, #48]	; (8020f88 <tcp_pbuf_prealloc+0xc0>)
 8020f56:	f006 fa6b 	bl	8027430 <iprintf>
  *oversize = p->len - length;
 8020f5a:	693b      	ldr	r3, [r7, #16]
 8020f5c:	895a      	ldrh	r2, [r3, #10]
 8020f5e:	89bb      	ldrh	r3, [r7, #12]
 8020f60:	1ad3      	subs	r3, r2, r3
 8020f62:	b29a      	uxth	r2, r3
 8020f64:	687b      	ldr	r3, [r7, #4]
 8020f66:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8020f68:	693b      	ldr	r3, [r7, #16]
 8020f6a:	89ba      	ldrh	r2, [r7, #12]
 8020f6c:	811a      	strh	r2, [r3, #8]
 8020f6e:	693b      	ldr	r3, [r7, #16]
 8020f70:	891a      	ldrh	r2, [r3, #8]
 8020f72:	693b      	ldr	r3, [r7, #16]
 8020f74:	815a      	strh	r2, [r3, #10]
  return p;
 8020f76:	693b      	ldr	r3, [r7, #16]
}
 8020f78:	4618      	mov	r0, r3
 8020f7a:	3718      	adds	r7, #24
 8020f7c:	46bd      	mov	sp, r7
 8020f7e:	bd80      	pop	{r7, pc}
 8020f80:	0802af80 	.word	0x0802af80
 8020f84:	0802b024 	.word	0x0802b024
 8020f88:	0802afe4 	.word	0x0802afe4

08020f8c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8020f8c:	b580      	push	{r7, lr}
 8020f8e:	b082      	sub	sp, #8
 8020f90:	af00      	add	r7, sp, #0
 8020f92:	6078      	str	r0, [r7, #4]
 8020f94:	460b      	mov	r3, r1
 8020f96:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8020f98:	687b      	ldr	r3, [r7, #4]
 8020f9a:	7d1b      	ldrb	r3, [r3, #20]
 8020f9c:	2b04      	cmp	r3, #4
 8020f9e:	d00e      	beq.n	8020fbe <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8020fa0:	687b      	ldr	r3, [r7, #4]
 8020fa2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8020fa4:	2b07      	cmp	r3, #7
 8020fa6:	d00a      	beq.n	8020fbe <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8020fa8:	687b      	ldr	r3, [r7, #4]
 8020faa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8020fac:	2b02      	cmp	r3, #2
 8020fae:	d006      	beq.n	8020fbe <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8020fb4:	2b03      	cmp	r3, #3
 8020fb6:	d002      	beq.n	8020fbe <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8020fb8:	f06f 030a 	mvn.w	r3, #10
 8020fbc:	e04f      	b.n	802105e <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8020fbe:	887b      	ldrh	r3, [r7, #2]
 8020fc0:	2b00      	cmp	r3, #0
 8020fc2:	d101      	bne.n	8020fc8 <tcp_write_checks+0x3c>
    return ERR_OK;
 8020fc4:	2300      	movs	r3, #0
 8020fc6:	e04a      	b.n	802105e <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8020fce:	887a      	ldrh	r2, [r7, #2]
 8020fd0:	429a      	cmp	r2, r3
 8020fd2:	d909      	bls.n	8020fe8 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	7e9b      	ldrb	r3, [r3, #26]
 8020fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8020fdc:	b2da      	uxtb	r2, r3
 8020fde:	687b      	ldr	r3, [r7, #4]
 8020fe0:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8020fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8020fe6:	e03a      	b.n	802105e <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8020fe8:	687b      	ldr	r3, [r7, #4]
 8020fea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8020fee:	2b0a      	cmp	r3, #10
 8020ff0:	d806      	bhi.n	8021000 <tcp_write_checks+0x74>
 8020ff2:	687b      	ldr	r3, [r7, #4]
 8020ff4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8020ff8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8020ffc:	4293      	cmp	r3, r2
 8020ffe:	d909      	bls.n	8021014 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8021000:	687b      	ldr	r3, [r7, #4]
 8021002:	7e9b      	ldrb	r3, [r3, #26]
 8021004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021008:	b2da      	uxtb	r2, r3
 802100a:	687b      	ldr	r3, [r7, #4]
 802100c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 802100e:	f04f 33ff 	mov.w	r3, #4294967295
 8021012:	e024      	b.n	802105e <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802101a:	2b00      	cmp	r3, #0
 802101c:	d00f      	beq.n	802103e <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 802101e:	687b      	ldr	r3, [r7, #4]
 8021020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021022:	2b00      	cmp	r3, #0
 8021024:	d11a      	bne.n	802105c <tcp_write_checks+0xd0>
 8021026:	687b      	ldr	r3, [r7, #4]
 8021028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802102a:	2b00      	cmp	r3, #0
 802102c:	d116      	bne.n	802105c <tcp_write_checks+0xd0>
 802102e:	4b0e      	ldr	r3, [pc, #56]	; (8021068 <tcp_write_checks+0xdc>)
 8021030:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8021034:	490d      	ldr	r1, [pc, #52]	; (802106c <tcp_write_checks+0xe0>)
 8021036:	480e      	ldr	r0, [pc, #56]	; (8021070 <tcp_write_checks+0xe4>)
 8021038:	f006 f9fa 	bl	8027430 <iprintf>
 802103c:	e00e      	b.n	802105c <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 802103e:	687b      	ldr	r3, [r7, #4]
 8021040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021042:	2b00      	cmp	r3, #0
 8021044:	d103      	bne.n	802104e <tcp_write_checks+0xc2>
 8021046:	687b      	ldr	r3, [r7, #4]
 8021048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802104a:	2b00      	cmp	r3, #0
 802104c:	d006      	beq.n	802105c <tcp_write_checks+0xd0>
 802104e:	4b06      	ldr	r3, [pc, #24]	; (8021068 <tcp_write_checks+0xdc>)
 8021050:	f240 1259 	movw	r2, #345	; 0x159
 8021054:	4907      	ldr	r1, [pc, #28]	; (8021074 <tcp_write_checks+0xe8>)
 8021056:	4806      	ldr	r0, [pc, #24]	; (8021070 <tcp_write_checks+0xe4>)
 8021058:	f006 f9ea 	bl	8027430 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 802105c:	2300      	movs	r3, #0
}
 802105e:	4618      	mov	r0, r3
 8021060:	3708      	adds	r7, #8
 8021062:	46bd      	mov	sp, r7
 8021064:	bd80      	pop	{r7, pc}
 8021066:	bf00      	nop
 8021068:	0802af80 	.word	0x0802af80
 802106c:	0802b038 	.word	0x0802b038
 8021070:	0802afe4 	.word	0x0802afe4
 8021074:	0802b074 	.word	0x0802b074

08021078 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8021078:	b5b0      	push	{r4, r5, r7, lr}
 802107a:	b09a      	sub	sp, #104	; 0x68
 802107c:	af04      	add	r7, sp, #16
 802107e:	60f8      	str	r0, [r7, #12]
 8021080:	60b9      	str	r1, [r7, #8]
 8021082:	4611      	mov	r1, r2
 8021084:	461a      	mov	r2, r3
 8021086:	460b      	mov	r3, r1
 8021088:	80fb      	strh	r3, [r7, #6]
 802108a:	4613      	mov	r3, r2
 802108c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 802108e:	2300      	movs	r3, #0
 8021090:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8021092:	2300      	movs	r3, #0
 8021094:	653b      	str	r3, [r7, #80]	; 0x50
 8021096:	2300      	movs	r3, #0
 8021098:	64fb      	str	r3, [r7, #76]	; 0x4c
 802109a:	2300      	movs	r3, #0
 802109c:	64bb      	str	r3, [r7, #72]	; 0x48
 802109e:	2300      	movs	r3, #0
 80210a0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80210a2:	2300      	movs	r3, #0
 80210a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 80210a8:	2300      	movs	r3, #0
 80210aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 80210ae:	2300      	movs	r3, #0
 80210b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80210b4:	2300      	movs	r3, #0
 80210b6:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80210b8:	2300      	movs	r3, #0
 80210ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80210bc:	2300      	movs	r3, #0
 80210be:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80210c0:	68fb      	ldr	r3, [r7, #12]
 80210c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80210c6:	085b      	lsrs	r3, r3, #1
 80210c8:	b29a      	uxth	r2, r3
 80210ca:	68fb      	ldr	r3, [r7, #12]
 80210cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80210ce:	4293      	cmp	r3, r2
 80210d0:	bf28      	it	cs
 80210d2:	4613      	movcs	r3, r2
 80210d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80210d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80210d8:	2b00      	cmp	r3, #0
 80210da:	d102      	bne.n	80210e2 <tcp_write+0x6a>
 80210dc:	68fb      	ldr	r3, [r7, #12]
 80210de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80210e0:	e000      	b.n	80210e4 <tcp_write+0x6c>
 80210e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80210e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80210e6:	68bb      	ldr	r3, [r7, #8]
 80210e8:	2b00      	cmp	r3, #0
 80210ea:	d109      	bne.n	8021100 <tcp_write+0x88>
 80210ec:	4b94      	ldr	r3, [pc, #592]	; (8021340 <tcp_write+0x2c8>)
 80210ee:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80210f2:	4994      	ldr	r1, [pc, #592]	; (8021344 <tcp_write+0x2cc>)
 80210f4:	4894      	ldr	r0, [pc, #592]	; (8021348 <tcp_write+0x2d0>)
 80210f6:	f006 f99b 	bl	8027430 <iprintf>
 80210fa:	f06f 030f 	mvn.w	r3, #15
 80210fe:	e30d      	b.n	802171c <tcp_write+0x6a4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8021100:	88fb      	ldrh	r3, [r7, #6]
 8021102:	4619      	mov	r1, r3
 8021104:	68f8      	ldr	r0, [r7, #12]
 8021106:	f7ff ff41 	bl	8020f8c <tcp_write_checks>
 802110a:	4603      	mov	r3, r0
 802110c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8021110:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8021114:	2b00      	cmp	r3, #0
 8021116:	d002      	beq.n	802111e <tcp_write+0xa6>
    return err;
 8021118:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 802111c:	e2fe      	b.n	802171c <tcp_write+0x6a4>
  }
  queuelen = pcb->snd_queuelen;
 802111e:	68fb      	ldr	r3, [r7, #12]
 8021120:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021124:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8021128:	68fb      	ldr	r3, [r7, #12]
 802112a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802112c:	2b00      	cmp	r3, #0
 802112e:	f000 80f8 	beq.w	8021322 <tcp_write+0x2aa>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8021132:	68fb      	ldr	r3, [r7, #12]
 8021134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021136:	653b      	str	r3, [r7, #80]	; 0x50
 8021138:	e002      	b.n	8021140 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 802113a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8021140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021142:	681b      	ldr	r3, [r3, #0]
 8021144:	2b00      	cmp	r3, #0
 8021146:	d1f8      	bne.n	802113a <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8021148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802114a:	7a9b      	ldrb	r3, [r3, #10]
 802114c:	f003 0301 	and.w	r3, r3, #1
 8021150:	2b00      	cmp	r3, #0
 8021152:	d001      	beq.n	8021158 <tcp_write+0xe0>
 8021154:	2304      	movs	r3, #4
 8021156:	e000      	b.n	802115a <tcp_write+0xe2>
 8021158:	2300      	movs	r3, #0
 802115a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 802115c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802115e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021160:	891b      	ldrh	r3, [r3, #8]
 8021162:	4619      	mov	r1, r3
 8021164:	8c3b      	ldrh	r3, [r7, #32]
 8021166:	440b      	add	r3, r1
 8021168:	429a      	cmp	r2, r3
 802116a:	da06      	bge.n	802117a <tcp_write+0x102>
 802116c:	4b74      	ldr	r3, [pc, #464]	; (8021340 <tcp_write+0x2c8>)
 802116e:	f240 12c7 	movw	r2, #455	; 0x1c7
 8021172:	4976      	ldr	r1, [pc, #472]	; (802134c <tcp_write+0x2d4>)
 8021174:	4874      	ldr	r0, [pc, #464]	; (8021348 <tcp_write+0x2d0>)
 8021176:	f006 f95b 	bl	8027430 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 802117a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802117c:	891a      	ldrh	r2, [r3, #8]
 802117e:	8c3b      	ldrh	r3, [r7, #32]
 8021180:	4413      	add	r3, r2
 8021182:	b29b      	uxth	r3, r3
 8021184:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021186:	1ad3      	subs	r3, r2, r3
 8021188:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 802118a:	68fb      	ldr	r3, [r7, #12]
 802118c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8021190:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8021192:	8a7b      	ldrh	r3, [r7, #18]
 8021194:	2b00      	cmp	r3, #0
 8021196:	d027      	beq.n	80211e8 <tcp_write+0x170>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8021198:	8a7b      	ldrh	r3, [r7, #18]
 802119a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802119c:	429a      	cmp	r2, r3
 802119e:	d206      	bcs.n	80211ae <tcp_write+0x136>
 80211a0:	4b67      	ldr	r3, [pc, #412]	; (8021340 <tcp_write+0x2c8>)
 80211a2:	f240 12d9 	movw	r2, #473	; 0x1d9
 80211a6:	496a      	ldr	r1, [pc, #424]	; (8021350 <tcp_write+0x2d8>)
 80211a8:	4867      	ldr	r0, [pc, #412]	; (8021348 <tcp_write+0x2d0>)
 80211aa:	f006 f941 	bl	8027430 <iprintf>
      seg = last_unsent;
 80211ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80211b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80211b2:	8a7b      	ldrh	r3, [r7, #18]
 80211b4:	88fa      	ldrh	r2, [r7, #6]
 80211b6:	429a      	cmp	r2, r3
 80211b8:	d901      	bls.n	80211be <tcp_write+0x146>
 80211ba:	8a7b      	ldrh	r3, [r7, #18]
 80211bc:	e000      	b.n	80211c0 <tcp_write+0x148>
 80211be:	88fb      	ldrh	r3, [r7, #6]
 80211c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80211c2:	4293      	cmp	r3, r2
 80211c4:	bfa8      	it	ge
 80211c6:	4613      	movge	r3, r2
 80211c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80211ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80211ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80211d0:	4413      	add	r3, r2
 80211d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80211d6:	8a7a      	ldrh	r2, [r7, #18]
 80211d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80211da:	1ad3      	subs	r3, r2, r3
 80211dc:	b29b      	uxth	r3, r3
 80211de:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80211e0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80211e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80211e4:	1ad3      	subs	r3, r2, r3
 80211e6:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80211e8:	8a7b      	ldrh	r3, [r7, #18]
 80211ea:	2b00      	cmp	r3, #0
 80211ec:	d00b      	beq.n	8021206 <tcp_write+0x18e>
 80211ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80211f2:	88fb      	ldrh	r3, [r7, #6]
 80211f4:	429a      	cmp	r2, r3
 80211f6:	d006      	beq.n	8021206 <tcp_write+0x18e>
 80211f8:	4b51      	ldr	r3, [pc, #324]	; (8021340 <tcp_write+0x2c8>)
 80211fa:	f240 12e1 	movw	r2, #481	; 0x1e1
 80211fe:	4955      	ldr	r1, [pc, #340]	; (8021354 <tcp_write+0x2dc>)
 8021200:	4851      	ldr	r0, [pc, #324]	; (8021348 <tcp_write+0x2d0>)
 8021202:	f006 f915 	bl	8027430 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8021206:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802120a:	88fb      	ldrh	r3, [r7, #6]
 802120c:	429a      	cmp	r2, r3
 802120e:	f080 8169 	bcs.w	80214e4 <tcp_write+0x46c>
 8021212:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021214:	2b00      	cmp	r3, #0
 8021216:	f000 8165 	beq.w	80214e4 <tcp_write+0x46c>
 802121a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802121c:	891b      	ldrh	r3, [r3, #8]
 802121e:	2b00      	cmp	r3, #0
 8021220:	f000 8160 	beq.w	80214e4 <tcp_write+0x46c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8021224:	88fa      	ldrh	r2, [r7, #6]
 8021226:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802122a:	1ad2      	subs	r2, r2, r3
 802122c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802122e:	4293      	cmp	r3, r2
 8021230:	bfa8      	it	ge
 8021232:	4613      	movge	r3, r2
 8021234:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8021236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021238:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 802123a:	797b      	ldrb	r3, [r7, #5]
 802123c:	f003 0301 	and.w	r3, r3, #1
 8021240:	2b00      	cmp	r3, #0
 8021242:	d027      	beq.n	8021294 <tcp_write+0x21c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8021244:	f107 0012 	add.w	r0, r7, #18
 8021248:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802124a:	8bf9      	ldrh	r1, [r7, #30]
 802124c:	2301      	movs	r3, #1
 802124e:	9302      	str	r3, [sp, #8]
 8021250:	797b      	ldrb	r3, [r7, #5]
 8021252:	9301      	str	r3, [sp, #4]
 8021254:	68fb      	ldr	r3, [r7, #12]
 8021256:	9300      	str	r3, [sp, #0]
 8021258:	4603      	mov	r3, r0
 802125a:	2004      	movs	r0, #4
 802125c:	f7ff fe34 	bl	8020ec8 <tcp_pbuf_prealloc>
 8021260:	6578      	str	r0, [r7, #84]	; 0x54
 8021262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021264:	2b00      	cmp	r3, #0
 8021266:	f000 8227 	beq.w	80216b8 <tcp_write+0x640>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 802126a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802126c:	6858      	ldr	r0, [r3, #4]
 802126e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021272:	68ba      	ldr	r2, [r7, #8]
 8021274:	4413      	add	r3, r2
 8021276:	8bfa      	ldrh	r2, [r7, #30]
 8021278:	4619      	mov	r1, r3
 802127a:	f007 f8f8 	bl	802846e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 802127e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8021280:	f7fb fc96 	bl	801cbb0 <pbuf_clen>
 8021284:	4603      	mov	r3, r0
 8021286:	461a      	mov	r2, r3
 8021288:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802128c:	4413      	add	r3, r2
 802128e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8021292:	e03f      	b.n	8021314 <tcp_write+0x29c>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8021294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021296:	685b      	ldr	r3, [r3, #4]
 8021298:	637b      	str	r3, [r7, #52]	; 0x34
 802129a:	e002      	b.n	80212a2 <tcp_write+0x22a>
 802129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802129e:	681b      	ldr	r3, [r3, #0]
 80212a0:	637b      	str	r3, [r7, #52]	; 0x34
 80212a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80212a4:	681b      	ldr	r3, [r3, #0]
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d1f8      	bne.n	802129c <tcp_write+0x224>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80212aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80212ac:	7b1b      	ldrb	r3, [r3, #12]
 80212ae:	2b01      	cmp	r3, #1
 80212b0:	d115      	bne.n	80212de <tcp_write+0x266>
 80212b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80212b4:	685b      	ldr	r3, [r3, #4]
 80212b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80212b8:	8952      	ldrh	r2, [r2, #10]
 80212ba:	441a      	add	r2, r3
 80212bc:	68bb      	ldr	r3, [r7, #8]
 80212be:	429a      	cmp	r2, r3
 80212c0:	d10d      	bne.n	80212de <tcp_write+0x266>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80212c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	d006      	beq.n	80212d8 <tcp_write+0x260>
 80212ca:	4b1d      	ldr	r3, [pc, #116]	; (8021340 <tcp_write+0x2c8>)
 80212cc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80212d0:	4921      	ldr	r1, [pc, #132]	; (8021358 <tcp_write+0x2e0>)
 80212d2:	481d      	ldr	r0, [pc, #116]	; (8021348 <tcp_write+0x2d0>)
 80212d4:	f006 f8ac 	bl	8027430 <iprintf>
          extendlen = seglen;
 80212d8:	8bfb      	ldrh	r3, [r7, #30]
 80212da:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80212dc:	e01a      	b.n	8021314 <tcp_write+0x29c>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80212de:	8bfb      	ldrh	r3, [r7, #30]
 80212e0:	2201      	movs	r2, #1
 80212e2:	4619      	mov	r1, r3
 80212e4:	2004      	movs	r0, #4
 80212e6:	f7fb f857 	bl	801c398 <pbuf_alloc>
 80212ea:	6578      	str	r0, [r7, #84]	; 0x54
 80212ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80212ee:	2b00      	cmp	r3, #0
 80212f0:	f000 81e4 	beq.w	80216bc <tcp_write+0x644>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 80212f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80212f8:	68ba      	ldr	r2, [r7, #8]
 80212fa:	441a      	add	r2, r3
 80212fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80212fe:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8021300:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8021302:	f7fb fc55 	bl	801cbb0 <pbuf_clen>
 8021306:	4603      	mov	r3, r0
 8021308:	461a      	mov	r2, r3
 802130a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802130e:	4413      	add	r3, r2
 8021310:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8021314:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021318:	8bfb      	ldrh	r3, [r7, #30]
 802131a:	4413      	add	r3, r2
 802131c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8021320:	e0e0      	b.n	80214e4 <tcp_write+0x46c>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8021322:	68fb      	ldr	r3, [r7, #12]
 8021324:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8021328:	2b00      	cmp	r3, #0
 802132a:	f000 80db 	beq.w	80214e4 <tcp_write+0x46c>
 802132e:	4b04      	ldr	r3, [pc, #16]	; (8021340 <tcp_write+0x2c8>)
 8021330:	f240 2225 	movw	r2, #549	; 0x225
 8021334:	4909      	ldr	r1, [pc, #36]	; (802135c <tcp_write+0x2e4>)
 8021336:	4804      	ldr	r0, [pc, #16]	; (8021348 <tcp_write+0x2d0>)
 8021338:	f006 f87a 	bl	8027430 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 802133c:	e0d2      	b.n	80214e4 <tcp_write+0x46c>
 802133e:	bf00      	nop
 8021340:	0802af80 	.word	0x0802af80
 8021344:	0802b0a8 	.word	0x0802b0a8
 8021348:	0802afe4 	.word	0x0802afe4
 802134c:	0802b0dc 	.word	0x0802b0dc
 8021350:	0802b0f4 	.word	0x0802b0f4
 8021354:	0802b114 	.word	0x0802b114
 8021358:	0802b134 	.word	0x0802b134
 802135c:	0802b160 	.word	0x0802b160
    struct pbuf *p;
    u16_t left = len - pos;
 8021360:	88fa      	ldrh	r2, [r7, #6]
 8021362:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021366:	1ad3      	subs	r3, r2, r3
 8021368:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 802136a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802136e:	b29b      	uxth	r3, r3
 8021370:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021372:	1ad3      	subs	r3, r2, r3
 8021374:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8021376:	8b7a      	ldrh	r2, [r7, #26]
 8021378:	8bbb      	ldrh	r3, [r7, #28]
 802137a:	4293      	cmp	r3, r2
 802137c:	bf28      	it	cs
 802137e:	4613      	movcs	r3, r2
 8021380:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8021382:	797b      	ldrb	r3, [r7, #5]
 8021384:	f003 0301 	and.w	r3, r3, #1
 8021388:	2b00      	cmp	r3, #0
 802138a:	d036      	beq.n	80213fa <tcp_write+0x382>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 802138c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021390:	b29a      	uxth	r2, r3
 8021392:	8b3b      	ldrh	r3, [r7, #24]
 8021394:	4413      	add	r3, r2
 8021396:	b299      	uxth	r1, r3
 8021398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802139a:	2b00      	cmp	r3, #0
 802139c:	bf0c      	ite	eq
 802139e:	2301      	moveq	r3, #1
 80213a0:	2300      	movne	r3, #0
 80213a2:	b2db      	uxtb	r3, r3
 80213a4:	f107 0012 	add.w	r0, r7, #18
 80213a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80213aa:	9302      	str	r3, [sp, #8]
 80213ac:	797b      	ldrb	r3, [r7, #5]
 80213ae:	9301      	str	r3, [sp, #4]
 80213b0:	68fb      	ldr	r3, [r7, #12]
 80213b2:	9300      	str	r3, [sp, #0]
 80213b4:	4603      	mov	r3, r0
 80213b6:	2000      	movs	r0, #0
 80213b8:	f7ff fd86 	bl	8020ec8 <tcp_pbuf_prealloc>
 80213bc:	6338      	str	r0, [r7, #48]	; 0x30
 80213be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213c0:	2b00      	cmp	r3, #0
 80213c2:	f000 817d 	beq.w	80216c0 <tcp_write+0x648>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80213c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213c8:	895b      	ldrh	r3, [r3, #10]
 80213ca:	8b3a      	ldrh	r2, [r7, #24]
 80213cc:	429a      	cmp	r2, r3
 80213ce:	d906      	bls.n	80213de <tcp_write+0x366>
 80213d0:	4b8f      	ldr	r3, [pc, #572]	; (8021610 <tcp_write+0x598>)
 80213d2:	f240 2241 	movw	r2, #577	; 0x241
 80213d6:	498f      	ldr	r1, [pc, #572]	; (8021614 <tcp_write+0x59c>)
 80213d8:	488f      	ldr	r0, [pc, #572]	; (8021618 <tcp_write+0x5a0>)
 80213da:	f006 f829 	bl	8027430 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80213de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213e0:	685a      	ldr	r2, [r3, #4]
 80213e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80213e6:	18d0      	adds	r0, r2, r3
 80213e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80213ec:	68ba      	ldr	r2, [r7, #8]
 80213ee:	4413      	add	r3, r2
 80213f0:	8b3a      	ldrh	r2, [r7, #24]
 80213f2:	4619      	mov	r1, r3
 80213f4:	f007 f83b 	bl	802846e <memcpy>
 80213f8:	e02e      	b.n	8021458 <tcp_write+0x3e0>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80213fa:	8a7b      	ldrh	r3, [r7, #18]
 80213fc:	2b00      	cmp	r3, #0
 80213fe:	d006      	beq.n	802140e <tcp_write+0x396>
 8021400:	4b83      	ldr	r3, [pc, #524]	; (8021610 <tcp_write+0x598>)
 8021402:	f240 224b 	movw	r2, #587	; 0x24b
 8021406:	4985      	ldr	r1, [pc, #532]	; (802161c <tcp_write+0x5a4>)
 8021408:	4883      	ldr	r0, [pc, #524]	; (8021618 <tcp_write+0x5a0>)
 802140a:	f006 f811 	bl	8027430 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 802140e:	8b3b      	ldrh	r3, [r7, #24]
 8021410:	2201      	movs	r2, #1
 8021412:	4619      	mov	r1, r3
 8021414:	2000      	movs	r0, #0
 8021416:	f7fa ffbf 	bl	801c398 <pbuf_alloc>
 802141a:	6178      	str	r0, [r7, #20]
 802141c:	697b      	ldr	r3, [r7, #20]
 802141e:	2b00      	cmp	r3, #0
 8021420:	f000 8150 	beq.w	80216c4 <tcp_write+0x64c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8021424:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021428:	68ba      	ldr	r2, [r7, #8]
 802142a:	441a      	add	r2, r3
 802142c:	697b      	ldr	r3, [r7, #20]
 802142e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8021430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021434:	b29b      	uxth	r3, r3
 8021436:	2200      	movs	r2, #0
 8021438:	4619      	mov	r1, r3
 802143a:	2000      	movs	r0, #0
 802143c:	f7fa ffac 	bl	801c398 <pbuf_alloc>
 8021440:	6338      	str	r0, [r7, #48]	; 0x30
 8021442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021444:	2b00      	cmp	r3, #0
 8021446:	d103      	bne.n	8021450 <tcp_write+0x3d8>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8021448:	6978      	ldr	r0, [r7, #20]
 802144a:	f7fb fb17 	bl	801ca7c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 802144e:	e13c      	b.n	80216ca <tcp_write+0x652>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8021450:	6979      	ldr	r1, [r7, #20]
 8021452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021454:	f7fb fbec 	bl	801cc30 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8021458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802145a:	f7fb fba9 	bl	801cbb0 <pbuf_clen>
 802145e:	4603      	mov	r3, r0
 8021460:	461a      	mov	r2, r3
 8021462:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021466:	4413      	add	r3, r2
 8021468:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 802146c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021470:	2b0b      	cmp	r3, #11
 8021472:	d805      	bhi.n	8021480 <tcp_write+0x408>
 8021474:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021478:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 802147c:	4293      	cmp	r3, r2
 802147e:	d903      	bls.n	8021488 <tcp_write+0x410>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8021480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021482:	f7fb fafb 	bl	801ca7c <pbuf_free>
      goto memerr;
 8021486:	e120      	b.n	80216ca <tcp_write+0x652>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8021488:	68fb      	ldr	r3, [r7, #12]
 802148a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802148c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021490:	441a      	add	r2, r3
 8021492:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021496:	9300      	str	r3, [sp, #0]
 8021498:	4613      	mov	r3, r2
 802149a:	2200      	movs	r2, #0
 802149c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802149e:	68f8      	ldr	r0, [r7, #12]
 80214a0:	f7ff fc88 	bl	8020db4 <tcp_create_segment>
 80214a4:	64f8      	str	r0, [r7, #76]	; 0x4c
 80214a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	f000 810d 	beq.w	80216c8 <tcp_write+0x650>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80214ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80214b0:	2b00      	cmp	r3, #0
 80214b2:	d102      	bne.n	80214ba <tcp_write+0x442>
      queue = seg;
 80214b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80214b6:	647b      	str	r3, [r7, #68]	; 0x44
 80214b8:	e00c      	b.n	80214d4 <tcp_write+0x45c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80214ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80214bc:	2b00      	cmp	r3, #0
 80214be:	d106      	bne.n	80214ce <tcp_write+0x456>
 80214c0:	4b53      	ldr	r3, [pc, #332]	; (8021610 <tcp_write+0x598>)
 80214c2:	f240 2285 	movw	r2, #645	; 0x285
 80214c6:	4956      	ldr	r1, [pc, #344]	; (8021620 <tcp_write+0x5a8>)
 80214c8:	4853      	ldr	r0, [pc, #332]	; (8021618 <tcp_write+0x5a0>)
 80214ca:	f005 ffb1 	bl	8027430 <iprintf>
      prev_seg->next = seg;
 80214ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80214d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80214d2:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80214d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80214d6:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80214d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80214dc:	8b3b      	ldrh	r3, [r7, #24]
 80214de:	4413      	add	r3, r2
 80214e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80214e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80214e8:	88fb      	ldrh	r3, [r7, #6]
 80214ea:	429a      	cmp	r2, r3
 80214ec:	f4ff af38 	bcc.w	8021360 <tcp_write+0x2e8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80214f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80214f2:	2b00      	cmp	r3, #0
 80214f4:	d02c      	beq.n	8021550 <tcp_write+0x4d8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80214f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80214f8:	685b      	ldr	r3, [r3, #4]
 80214fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80214fc:	e01e      	b.n	802153c <tcp_write+0x4c4>
      p->tot_len += oversize_used;
 80214fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021500:	891a      	ldrh	r2, [r3, #8]
 8021502:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021504:	4413      	add	r3, r2
 8021506:	b29a      	uxth	r2, r3
 8021508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802150a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 802150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802150e:	681b      	ldr	r3, [r3, #0]
 8021510:	2b00      	cmp	r3, #0
 8021512:	d110      	bne.n	8021536 <tcp_write+0x4be>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8021514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021516:	685b      	ldr	r3, [r3, #4]
 8021518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802151a:	8952      	ldrh	r2, [r2, #10]
 802151c:	4413      	add	r3, r2
 802151e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8021520:	68b9      	ldr	r1, [r7, #8]
 8021522:	4618      	mov	r0, r3
 8021524:	f006 ffa3 	bl	802846e <memcpy>
        p->len += oversize_used;
 8021528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802152a:	895a      	ldrh	r2, [r3, #10]
 802152c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802152e:	4413      	add	r3, r2
 8021530:	b29a      	uxth	r2, r3
 8021532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021534:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8021536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021538:	681b      	ldr	r3, [r3, #0]
 802153a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802153e:	2b00      	cmp	r3, #0
 8021540:	d1dd      	bne.n	80214fe <tcp_write+0x486>
      }
    }
    last_unsent->len += oversize_used;
 8021542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021544:	891a      	ldrh	r2, [r3, #8]
 8021546:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021548:	4413      	add	r3, r2
 802154a:	b29a      	uxth	r2, r3
 802154c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802154e:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8021550:	8a7a      	ldrh	r2, [r7, #18]
 8021552:	68fb      	ldr	r3, [r7, #12]
 8021554:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8021558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802155a:	2b00      	cmp	r3, #0
 802155c:	d018      	beq.n	8021590 <tcp_write+0x518>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 802155e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021560:	2b00      	cmp	r3, #0
 8021562:	d106      	bne.n	8021572 <tcp_write+0x4fa>
 8021564:	4b2a      	ldr	r3, [pc, #168]	; (8021610 <tcp_write+0x598>)
 8021566:	f240 22bb 	movw	r2, #699	; 0x2bb
 802156a:	492e      	ldr	r1, [pc, #184]	; (8021624 <tcp_write+0x5ac>)
 802156c:	482a      	ldr	r0, [pc, #168]	; (8021618 <tcp_write+0x5a0>)
 802156e:	f005 ff5f 	bl	8027430 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8021572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021574:	685b      	ldr	r3, [r3, #4]
 8021576:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8021578:	4618      	mov	r0, r3
 802157a:	f7fb fb59 	bl	801cc30 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 802157e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021580:	891a      	ldrh	r2, [r3, #8]
 8021582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021584:	891b      	ldrh	r3, [r3, #8]
 8021586:	4413      	add	r3, r2
 8021588:	b29a      	uxth	r2, r3
 802158a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802158c:	811a      	strh	r2, [r3, #8]
 802158e:	e037      	b.n	8021600 <tcp_write+0x588>
  } else if (extendlen > 0) {
 8021590:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021592:	2b00      	cmp	r3, #0
 8021594:	d034      	beq.n	8021600 <tcp_write+0x588>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8021596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021598:	2b00      	cmp	r3, #0
 802159a:	d003      	beq.n	80215a4 <tcp_write+0x52c>
 802159c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802159e:	685b      	ldr	r3, [r3, #4]
 80215a0:	2b00      	cmp	r3, #0
 80215a2:	d106      	bne.n	80215b2 <tcp_write+0x53a>
 80215a4:	4b1a      	ldr	r3, [pc, #104]	; (8021610 <tcp_write+0x598>)
 80215a6:	f240 22c1 	movw	r2, #705	; 0x2c1
 80215aa:	491f      	ldr	r1, [pc, #124]	; (8021628 <tcp_write+0x5b0>)
 80215ac:	481a      	ldr	r0, [pc, #104]	; (8021618 <tcp_write+0x5a0>)
 80215ae:	f005 ff3f 	bl	8027430 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80215b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80215b4:	685b      	ldr	r3, [r3, #4]
 80215b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80215b8:	e009      	b.n	80215ce <tcp_write+0x556>
      p->tot_len += extendlen;
 80215ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215bc:	891a      	ldrh	r2, [r3, #8]
 80215be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80215c0:	4413      	add	r3, r2
 80215c2:	b29a      	uxth	r2, r3
 80215c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215c6:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80215c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215ca:	681b      	ldr	r3, [r3, #0]
 80215cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80215ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	d1f1      	bne.n	80215ba <tcp_write+0x542>
    }
    p->tot_len += extendlen;
 80215d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215d8:	891a      	ldrh	r2, [r3, #8]
 80215da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80215dc:	4413      	add	r3, r2
 80215de:	b29a      	uxth	r2, r3
 80215e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215e2:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80215e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215e6:	895a      	ldrh	r2, [r3, #10]
 80215e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80215ea:	4413      	add	r3, r2
 80215ec:	b29a      	uxth	r2, r3
 80215ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215f0:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80215f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80215f4:	891a      	ldrh	r2, [r3, #8]
 80215f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80215f8:	4413      	add	r3, r2
 80215fa:	b29a      	uxth	r2, r3
 80215fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80215fe:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8021600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021602:	2b00      	cmp	r3, #0
 8021604:	d112      	bne.n	802162c <tcp_write+0x5b4>
    pcb->unsent = queue;
 8021606:	68fb      	ldr	r3, [r7, #12]
 8021608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802160a:	669a      	str	r2, [r3, #104]	; 0x68
 802160c:	e011      	b.n	8021632 <tcp_write+0x5ba>
 802160e:	bf00      	nop
 8021610:	0802af80 	.word	0x0802af80
 8021614:	0802b190 	.word	0x0802b190
 8021618:	0802afe4 	.word	0x0802afe4
 802161c:	0802b1d0 	.word	0x0802b1d0
 8021620:	0802b1e0 	.word	0x0802b1e0
 8021624:	0802b1f4 	.word	0x0802b1f4
 8021628:	0802b22c 	.word	0x0802b22c
  } else {
    last_unsent->next = queue;
 802162c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802162e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021630:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8021632:	68fb      	ldr	r3, [r7, #12]
 8021634:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021636:	88fb      	ldrh	r3, [r7, #6]
 8021638:	441a      	add	r2, r3
 802163a:	68fb      	ldr	r3, [r7, #12]
 802163c:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 802163e:	68fb      	ldr	r3, [r7, #12]
 8021640:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8021644:	88fb      	ldrh	r3, [r7, #6]
 8021646:	1ad3      	subs	r3, r2, r3
 8021648:	b29a      	uxth	r2, r3
 802164a:	68fb      	ldr	r3, [r7, #12]
 802164c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8021650:	68fb      	ldr	r3, [r7, #12]
 8021652:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8021656:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 802165a:	68fb      	ldr	r3, [r7, #12]
 802165c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021660:	2b00      	cmp	r3, #0
 8021662:	d00e      	beq.n	8021682 <tcp_write+0x60a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8021664:	68fb      	ldr	r3, [r7, #12]
 8021666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021668:	2b00      	cmp	r3, #0
 802166a:	d10a      	bne.n	8021682 <tcp_write+0x60a>
 802166c:	68fb      	ldr	r3, [r7, #12]
 802166e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021670:	2b00      	cmp	r3, #0
 8021672:	d106      	bne.n	8021682 <tcp_write+0x60a>
 8021674:	4b2b      	ldr	r3, [pc, #172]	; (8021724 <tcp_write+0x6ac>)
 8021676:	f240 22ed 	movw	r2, #749	; 0x2ed
 802167a:	492b      	ldr	r1, [pc, #172]	; (8021728 <tcp_write+0x6b0>)
 802167c:	482b      	ldr	r0, [pc, #172]	; (802172c <tcp_write+0x6b4>)
 802167e:	f005 fed7 	bl	8027430 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8021682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021684:	2b00      	cmp	r3, #0
 8021686:	d015      	beq.n	80216b4 <tcp_write+0x63c>
 8021688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802168a:	68db      	ldr	r3, [r3, #12]
 802168c:	2b00      	cmp	r3, #0
 802168e:	d011      	beq.n	80216b4 <tcp_write+0x63c>
 8021690:	797b      	ldrb	r3, [r7, #5]
 8021692:	f003 0302 	and.w	r3, r3, #2
 8021696:	2b00      	cmp	r3, #0
 8021698:	d10c      	bne.n	80216b4 <tcp_write+0x63c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 802169a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802169c:	68dc      	ldr	r4, [r3, #12]
 802169e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80216a0:	68db      	ldr	r3, [r3, #12]
 80216a2:	899b      	ldrh	r3, [r3, #12]
 80216a4:	b29d      	uxth	r5, r3
 80216a6:	2008      	movs	r0, #8
 80216a8:	f7f7 fdbe 	bl	8019228 <lwip_htons>
 80216ac:	4603      	mov	r3, r0
 80216ae:	432b      	orrs	r3, r5
 80216b0:	b29b      	uxth	r3, r3
 80216b2:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 80216b4:	2300      	movs	r3, #0
 80216b6:	e031      	b.n	802171c <tcp_write+0x6a4>
          goto memerr;
 80216b8:	bf00      	nop
 80216ba:	e006      	b.n	80216ca <tcp_write+0x652>
            goto memerr;
 80216bc:	bf00      	nop
 80216be:	e004      	b.n	80216ca <tcp_write+0x652>
        goto memerr;
 80216c0:	bf00      	nop
 80216c2:	e002      	b.n	80216ca <tcp_write+0x652>
        goto memerr;
 80216c4:	bf00      	nop
 80216c6:	e000      	b.n	80216ca <tcp_write+0x652>
      goto memerr;
 80216c8:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 80216ca:	68fb      	ldr	r3, [r7, #12]
 80216cc:	7e9b      	ldrb	r3, [r3, #26]
 80216ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80216d2:	b2da      	uxtb	r2, r3
 80216d4:	68fb      	ldr	r3, [r7, #12]
 80216d6:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80216d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80216da:	2b00      	cmp	r3, #0
 80216dc:	d002      	beq.n	80216e4 <tcp_write+0x66c>
    pbuf_free(concat_p);
 80216de:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80216e0:	f7fb f9cc 	bl	801ca7c <pbuf_free>
  }
  if (queue != NULL) {
 80216e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80216e6:	2b00      	cmp	r3, #0
 80216e8:	d002      	beq.n	80216f0 <tcp_write+0x678>
    tcp_segs_free(queue);
 80216ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80216ec:	f7fc fccd 	bl	801e08a <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80216f0:	68fb      	ldr	r3, [r7, #12]
 80216f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80216f6:	2b00      	cmp	r3, #0
 80216f8:	d00e      	beq.n	8021718 <tcp_write+0x6a0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80216fa:	68fb      	ldr	r3, [r7, #12]
 80216fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80216fe:	2b00      	cmp	r3, #0
 8021700:	d10a      	bne.n	8021718 <tcp_write+0x6a0>
 8021702:	68fb      	ldr	r3, [r7, #12]
 8021704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021706:	2b00      	cmp	r3, #0
 8021708:	d106      	bne.n	8021718 <tcp_write+0x6a0>
 802170a:	4b06      	ldr	r3, [pc, #24]	; (8021724 <tcp_write+0x6ac>)
 802170c:	f240 3202 	movw	r2, #770	; 0x302
 8021710:	4905      	ldr	r1, [pc, #20]	; (8021728 <tcp_write+0x6b0>)
 8021712:	4806      	ldr	r0, [pc, #24]	; (802172c <tcp_write+0x6b4>)
 8021714:	f005 fe8c 	bl	8027430 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8021718:	f04f 33ff 	mov.w	r3, #4294967295
}
 802171c:	4618      	mov	r0, r3
 802171e:	3758      	adds	r7, #88	; 0x58
 8021720:	46bd      	mov	sp, r7
 8021722:	bdb0      	pop	{r4, r5, r7, pc}
 8021724:	0802af80 	.word	0x0802af80
 8021728:	0802b264 	.word	0x0802b264
 802172c:	0802afe4 	.word	0x0802afe4

08021730 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8021730:	b580      	push	{r7, lr}
 8021732:	b08a      	sub	sp, #40	; 0x28
 8021734:	af02      	add	r7, sp, #8
 8021736:	6078      	str	r0, [r7, #4]
 8021738:	460b      	mov	r3, r1
 802173a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 802173c:	2300      	movs	r3, #0
 802173e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8021740:	2300      	movs	r3, #0
 8021742:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8021744:	78fb      	ldrb	r3, [r7, #3]
 8021746:	f003 0303 	and.w	r3, r3, #3
 802174a:	2b00      	cmp	r3, #0
 802174c:	d106      	bne.n	802175c <tcp_enqueue_flags+0x2c>
 802174e:	4b70      	ldr	r3, [pc, #448]	; (8021910 <tcp_enqueue_flags+0x1e0>)
 8021750:	f240 321b 	movw	r2, #795	; 0x31b
 8021754:	496f      	ldr	r1, [pc, #444]	; (8021914 <tcp_enqueue_flags+0x1e4>)
 8021756:	4870      	ldr	r0, [pc, #448]	; (8021918 <tcp_enqueue_flags+0x1e8>)
 8021758:	f005 fe6a 	bl	8027430 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 802175c:	687b      	ldr	r3, [r7, #4]
 802175e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021762:	2b0a      	cmp	r3, #10
 8021764:	d806      	bhi.n	8021774 <tcp_enqueue_flags+0x44>
 8021766:	687b      	ldr	r3, [r7, #4]
 8021768:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802176c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8021770:	4293      	cmp	r3, r2
 8021772:	d90e      	bls.n	8021792 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8021774:	78fb      	ldrb	r3, [r7, #3]
 8021776:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 802177a:	2b00      	cmp	r3, #0
 802177c:	d109      	bne.n	8021792 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 802177e:	687b      	ldr	r3, [r7, #4]
 8021780:	7e9b      	ldrb	r3, [r3, #26]
 8021782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021786:	b2da      	uxtb	r2, r3
 8021788:	687b      	ldr	r3, [r7, #4]
 802178a:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 802178c:	f04f 33ff 	mov.w	r3, #4294967295
 8021790:	e0ba      	b.n	8021908 <tcp_enqueue_flags+0x1d8>
  }

  if (flags & TCP_SYN) {
 8021792:	78fb      	ldrb	r3, [r7, #3]
 8021794:	f003 0302 	and.w	r3, r3, #2
 8021798:	2b00      	cmp	r3, #0
 802179a:	d001      	beq.n	80217a0 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 802179c:	2301      	movs	r3, #1
 802179e:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80217a0:	7ffb      	ldrb	r3, [r7, #31]
 80217a2:	f003 0301 	and.w	r3, r3, #1
 80217a6:	2b00      	cmp	r3, #0
 80217a8:	d001      	beq.n	80217ae <tcp_enqueue_flags+0x7e>
 80217aa:	2304      	movs	r3, #4
 80217ac:	e000      	b.n	80217b0 <tcp_enqueue_flags+0x80>
 80217ae:	2300      	movs	r3, #0
 80217b0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80217b2:	7dfb      	ldrb	r3, [r7, #23]
 80217b4:	b29b      	uxth	r3, r3
 80217b6:	2200      	movs	r2, #0
 80217b8:	4619      	mov	r1, r3
 80217ba:	2000      	movs	r0, #0
 80217bc:	f7fa fdec 	bl	801c398 <pbuf_alloc>
 80217c0:	6138      	str	r0, [r7, #16]
 80217c2:	693b      	ldr	r3, [r7, #16]
 80217c4:	2b00      	cmp	r3, #0
 80217c6:	d109      	bne.n	80217dc <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
 80217c8:	687b      	ldr	r3, [r7, #4]
 80217ca:	7e9b      	ldrb	r3, [r3, #26]
 80217cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80217d0:	b2da      	uxtb	r2, r3
 80217d2:	687b      	ldr	r3, [r7, #4]
 80217d4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80217d6:	f04f 33ff 	mov.w	r3, #4294967295
 80217da:	e095      	b.n	8021908 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80217dc:	693b      	ldr	r3, [r7, #16]
 80217de:	895a      	ldrh	r2, [r3, #10]
 80217e0:	7dfb      	ldrb	r3, [r7, #23]
 80217e2:	b29b      	uxth	r3, r3
 80217e4:	429a      	cmp	r2, r3
 80217e6:	d206      	bcs.n	80217f6 <tcp_enqueue_flags+0xc6>
 80217e8:	4b49      	ldr	r3, [pc, #292]	; (8021910 <tcp_enqueue_flags+0x1e0>)
 80217ea:	f240 3241 	movw	r2, #833	; 0x341
 80217ee:	494b      	ldr	r1, [pc, #300]	; (802191c <tcp_enqueue_flags+0x1ec>)
 80217f0:	4849      	ldr	r0, [pc, #292]	; (8021918 <tcp_enqueue_flags+0x1e8>)
 80217f2:	f005 fe1d 	bl	8027430 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80217f6:	687b      	ldr	r3, [r7, #4]
 80217f8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80217fa:	78fa      	ldrb	r2, [r7, #3]
 80217fc:	7ffb      	ldrb	r3, [r7, #31]
 80217fe:	9300      	str	r3, [sp, #0]
 8021800:	460b      	mov	r3, r1
 8021802:	6939      	ldr	r1, [r7, #16]
 8021804:	6878      	ldr	r0, [r7, #4]
 8021806:	f7ff fad5 	bl	8020db4 <tcp_create_segment>
 802180a:	60f8      	str	r0, [r7, #12]
 802180c:	68fb      	ldr	r3, [r7, #12]
 802180e:	2b00      	cmp	r3, #0
 8021810:	d109      	bne.n	8021826 <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 8021812:	687b      	ldr	r3, [r7, #4]
 8021814:	7e9b      	ldrb	r3, [r3, #26]
 8021816:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802181a:	b2da      	uxtb	r2, r3
 802181c:	687b      	ldr	r3, [r7, #4]
 802181e:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8021820:	f04f 33ff 	mov.w	r3, #4294967295
 8021824:	e070      	b.n	8021908 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8021826:	68fb      	ldr	r3, [r7, #12]
 8021828:	68db      	ldr	r3, [r3, #12]
 802182a:	f003 0303 	and.w	r3, r3, #3
 802182e:	2b00      	cmp	r3, #0
 8021830:	d006      	beq.n	8021840 <tcp_enqueue_flags+0x110>
 8021832:	4b37      	ldr	r3, [pc, #220]	; (8021910 <tcp_enqueue_flags+0x1e0>)
 8021834:	f240 3249 	movw	r2, #841	; 0x349
 8021838:	4939      	ldr	r1, [pc, #228]	; (8021920 <tcp_enqueue_flags+0x1f0>)
 802183a:	4837      	ldr	r0, [pc, #220]	; (8021918 <tcp_enqueue_flags+0x1e8>)
 802183c:	f005 fdf8 	bl	8027430 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8021840:	68fb      	ldr	r3, [r7, #12]
 8021842:	891b      	ldrh	r3, [r3, #8]
 8021844:	2b00      	cmp	r3, #0
 8021846:	d006      	beq.n	8021856 <tcp_enqueue_flags+0x126>
 8021848:	4b31      	ldr	r3, [pc, #196]	; (8021910 <tcp_enqueue_flags+0x1e0>)
 802184a:	f240 324a 	movw	r2, #842	; 0x34a
 802184e:	4935      	ldr	r1, [pc, #212]	; (8021924 <tcp_enqueue_flags+0x1f4>)
 8021850:	4831      	ldr	r0, [pc, #196]	; (8021918 <tcp_enqueue_flags+0x1e8>)
 8021852:	f005 fded 	bl	8027430 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8021856:	687b      	ldr	r3, [r7, #4]
 8021858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802185a:	2b00      	cmp	r3, #0
 802185c:	d103      	bne.n	8021866 <tcp_enqueue_flags+0x136>
    pcb->unsent = seg;
 802185e:	687b      	ldr	r3, [r7, #4]
 8021860:	68fa      	ldr	r2, [r7, #12]
 8021862:	669a      	str	r2, [r3, #104]	; 0x68
 8021864:	e00d      	b.n	8021882 <tcp_enqueue_flags+0x152>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8021866:	687b      	ldr	r3, [r7, #4]
 8021868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802186a:	61bb      	str	r3, [r7, #24]
 802186c:	e002      	b.n	8021874 <tcp_enqueue_flags+0x144>
 802186e:	69bb      	ldr	r3, [r7, #24]
 8021870:	681b      	ldr	r3, [r3, #0]
 8021872:	61bb      	str	r3, [r7, #24]
 8021874:	69bb      	ldr	r3, [r7, #24]
 8021876:	681b      	ldr	r3, [r3, #0]
 8021878:	2b00      	cmp	r3, #0
 802187a:	d1f8      	bne.n	802186e <tcp_enqueue_flags+0x13e>
    useg->next = seg;
 802187c:	69bb      	ldr	r3, [r7, #24]
 802187e:	68fa      	ldr	r2, [r7, #12]
 8021880:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8021882:	687b      	ldr	r3, [r7, #4]
 8021884:	2200      	movs	r2, #0
 8021886:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 802188a:	78fb      	ldrb	r3, [r7, #3]
 802188c:	f003 0302 	and.w	r3, r3, #2
 8021890:	2b00      	cmp	r3, #0
 8021892:	d104      	bne.n	802189e <tcp_enqueue_flags+0x16e>
 8021894:	78fb      	ldrb	r3, [r7, #3]
 8021896:	f003 0301 	and.w	r3, r3, #1
 802189a:	2b00      	cmp	r3, #0
 802189c:	d004      	beq.n	80218a8 <tcp_enqueue_flags+0x178>
    pcb->snd_lbb++;
 802189e:	687b      	ldr	r3, [r7, #4]
 80218a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80218a2:	1c5a      	adds	r2, r3, #1
 80218a4:	687b      	ldr	r3, [r7, #4]
 80218a6:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80218a8:	78fb      	ldrb	r3, [r7, #3]
 80218aa:	f003 0301 	and.w	r3, r3, #1
 80218ae:	2b00      	cmp	r3, #0
 80218b0:	d006      	beq.n	80218c0 <tcp_enqueue_flags+0x190>
    pcb->flags |= TF_FIN;
 80218b2:	687b      	ldr	r3, [r7, #4]
 80218b4:	7e9b      	ldrb	r3, [r3, #26]
 80218b6:	f043 0320 	orr.w	r3, r3, #32
 80218ba:	b2da      	uxtb	r2, r3
 80218bc:	687b      	ldr	r3, [r7, #4]
 80218be:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80218c0:	68fb      	ldr	r3, [r7, #12]
 80218c2:	685b      	ldr	r3, [r3, #4]
 80218c4:	4618      	mov	r0, r3
 80218c6:	f7fb f973 	bl	801cbb0 <pbuf_clen>
 80218ca:	4603      	mov	r3, r0
 80218cc:	461a      	mov	r2, r3
 80218ce:	687b      	ldr	r3, [r7, #4]
 80218d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80218d4:	4413      	add	r3, r2
 80218d6:	b29a      	uxth	r2, r3
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80218de:	687b      	ldr	r3, [r7, #4]
 80218e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80218e4:	2b00      	cmp	r3, #0
 80218e6:	d00e      	beq.n	8021906 <tcp_enqueue_flags+0x1d6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80218e8:	687b      	ldr	r3, [r7, #4]
 80218ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80218ec:	2b00      	cmp	r3, #0
 80218ee:	d10a      	bne.n	8021906 <tcp_enqueue_flags+0x1d6>
 80218f0:	687b      	ldr	r3, [r7, #4]
 80218f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80218f4:	2b00      	cmp	r3, #0
 80218f6:	d106      	bne.n	8021906 <tcp_enqueue_flags+0x1d6>
 80218f8:	4b05      	ldr	r3, [pc, #20]	; (8021910 <tcp_enqueue_flags+0x1e0>)
 80218fa:	f240 326d 	movw	r2, #877	; 0x36d
 80218fe:	490a      	ldr	r1, [pc, #40]	; (8021928 <tcp_enqueue_flags+0x1f8>)
 8021900:	4805      	ldr	r0, [pc, #20]	; (8021918 <tcp_enqueue_flags+0x1e8>)
 8021902:	f005 fd95 	bl	8027430 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8021906:	2300      	movs	r3, #0
}
 8021908:	4618      	mov	r0, r3
 802190a:	3720      	adds	r7, #32
 802190c:	46bd      	mov	sp, r7
 802190e:	bd80      	pop	{r7, pc}
 8021910:	0802af80 	.word	0x0802af80
 8021914:	0802b284 	.word	0x0802b284
 8021918:	0802afe4 	.word	0x0802afe4
 802191c:	0802b2dc 	.word	0x0802b2dc
 8021920:	0802b318 	.word	0x0802b318
 8021924:	0802b330 	.word	0x0802b330
 8021928:	0802b35c 	.word	0x0802b35c

0802192c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 802192c:	b590      	push	{r4, r7, lr}
 802192e:	b08b      	sub	sp, #44	; 0x2c
 8021930:	af04      	add	r7, sp, #16
 8021932:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8021934:	2300      	movs	r3, #0
 8021936:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8021938:	7dbb      	ldrb	r3, [r7, #22]
 802193a:	b29c      	uxth	r4, r3
 802193c:	687b      	ldr	r3, [r7, #4]
 802193e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021940:	4618      	mov	r0, r3
 8021942:	f7f7 fc7f 	bl	8019244 <lwip_htonl>
 8021946:	4603      	mov	r3, r0
 8021948:	2200      	movs	r2, #0
 802194a:	4621      	mov	r1, r4
 802194c:	6878      	ldr	r0, [r7, #4]
 802194e:	f7ff f977 	bl	8020c40 <tcp_output_alloc_header>
 8021952:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021954:	693b      	ldr	r3, [r7, #16]
 8021956:	2b00      	cmp	r3, #0
 8021958:	d109      	bne.n	802196e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	7e9b      	ldrb	r3, [r3, #26]
 802195e:	f043 0303 	orr.w	r3, r3, #3
 8021962:	b2da      	uxtb	r2, r3
 8021964:	687b      	ldr	r3, [r7, #4]
 8021966:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8021968:	f06f 0301 	mvn.w	r3, #1
 802196c:	e036      	b.n	80219dc <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 802196e:	687b      	ldr	r3, [r7, #4]
 8021970:	3304      	adds	r3, #4
 8021972:	4618      	mov	r0, r3
 8021974:	f7f8 fd38 	bl	801a3e8 <ip4_route>
 8021978:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 802197a:	68fb      	ldr	r3, [r7, #12]
 802197c:	2b00      	cmp	r3, #0
 802197e:	d102      	bne.n	8021986 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8021980:	23fc      	movs	r3, #252	; 0xfc
 8021982:	75fb      	strb	r3, [r7, #23]
 8021984:	e012      	b.n	80219ac <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8021986:	6879      	ldr	r1, [r7, #4]
 8021988:	687b      	ldr	r3, [r7, #4]
 802198a:	1d18      	adds	r0, r3, #4
 802198c:	687b      	ldr	r3, [r7, #4]
 802198e:	7a9c      	ldrb	r4, [r3, #10]
 8021990:	687b      	ldr	r3, [r7, #4]
 8021992:	7a5b      	ldrb	r3, [r3, #9]
 8021994:	68fa      	ldr	r2, [r7, #12]
 8021996:	9202      	str	r2, [sp, #8]
 8021998:	2206      	movs	r2, #6
 802199a:	9201      	str	r2, [sp, #4]
 802199c:	9300      	str	r3, [sp, #0]
 802199e:	4623      	mov	r3, r4
 80219a0:	4602      	mov	r2, r0
 80219a2:	6938      	ldr	r0, [r7, #16]
 80219a4:	f7f8 febc 	bl	801a720 <ip4_output_if>
 80219a8:	4603      	mov	r3, r0
 80219aa:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80219ac:	6938      	ldr	r0, [r7, #16]
 80219ae:	f7fb f865 	bl	801ca7c <pbuf_free>

  if (err != ERR_OK) {
 80219b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80219b6:	2b00      	cmp	r3, #0
 80219b8:	d007      	beq.n	80219ca <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80219ba:	687b      	ldr	r3, [r7, #4]
 80219bc:	7e9b      	ldrb	r3, [r3, #26]
 80219be:	f043 0303 	orr.w	r3, r3, #3
 80219c2:	b2da      	uxtb	r2, r3
 80219c4:	687b      	ldr	r3, [r7, #4]
 80219c6:	769a      	strb	r2, [r3, #26]
 80219c8:	e006      	b.n	80219d8 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80219ca:	687b      	ldr	r3, [r7, #4]
 80219cc:	7e9b      	ldrb	r3, [r3, #26]
 80219ce:	f023 0303 	bic.w	r3, r3, #3
 80219d2:	b2da      	uxtb	r2, r3
 80219d4:	687b      	ldr	r3, [r7, #4]
 80219d6:	769a      	strb	r2, [r3, #26]
  }

  return err;
 80219d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80219dc:	4618      	mov	r0, r3
 80219de:	371c      	adds	r7, #28
 80219e0:	46bd      	mov	sp, r7
 80219e2:	bd90      	pop	{r4, r7, pc}

080219e4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80219e4:	b5b0      	push	{r4, r5, r7, lr}
 80219e6:	b08a      	sub	sp, #40	; 0x28
 80219e8:	af00      	add	r7, sp, #0
 80219ea:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80219ec:	687b      	ldr	r3, [r7, #4]
 80219ee:	7d1b      	ldrb	r3, [r3, #20]
 80219f0:	2b01      	cmp	r3, #1
 80219f2:	d106      	bne.n	8021a02 <tcp_output+0x1e>
 80219f4:	4b9b      	ldr	r3, [pc, #620]	; (8021c64 <tcp_output+0x280>)
 80219f6:	f240 32ed 	movw	r2, #1005	; 0x3ed
 80219fa:	499b      	ldr	r1, [pc, #620]	; (8021c68 <tcp_output+0x284>)
 80219fc:	489b      	ldr	r0, [pc, #620]	; (8021c6c <tcp_output+0x288>)
 80219fe:	f005 fd17 	bl	8027430 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8021a02:	4b9b      	ldr	r3, [pc, #620]	; (8021c70 <tcp_output+0x28c>)
 8021a04:	681a      	ldr	r2, [r3, #0]
 8021a06:	687b      	ldr	r3, [r7, #4]
 8021a08:	429a      	cmp	r2, r3
 8021a0a:	d101      	bne.n	8021a10 <tcp_output+0x2c>
    return ERR_OK;
 8021a0c:	2300      	movs	r3, #0
 8021a0e:	e1cd      	b.n	8021dac <tcp_output+0x3c8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8021a10:	687b      	ldr	r3, [r7, #4]
 8021a12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8021a16:	687b      	ldr	r3, [r7, #4]
 8021a18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8021a1c:	429a      	cmp	r2, r3
 8021a1e:	d203      	bcs.n	8021a28 <tcp_output+0x44>
 8021a20:	687b      	ldr	r3, [r7, #4]
 8021a22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8021a26:	e002      	b.n	8021a2e <tcp_output+0x4a>
 8021a28:	687b      	ldr	r3, [r7, #4]
 8021a2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8021a2e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8021a30:	687b      	ldr	r3, [r7, #4]
 8021a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021a34:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8021a36:	687b      	ldr	r3, [r7, #4]
 8021a38:	7e9b      	ldrb	r3, [r3, #26]
 8021a3a:	f003 0302 	and.w	r3, r3, #2
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	d017      	beq.n	8021a72 <tcp_output+0x8e>
 8021a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a44:	2b00      	cmp	r3, #0
 8021a46:	d00f      	beq.n	8021a68 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8021a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a4a:	68db      	ldr	r3, [r3, #12]
 8021a4c:	685b      	ldr	r3, [r3, #4]
 8021a4e:	4618      	mov	r0, r3
 8021a50:	f7f7 fbf8 	bl	8019244 <lwip_htonl>
 8021a54:	4602      	mov	r2, r0
 8021a56:	687b      	ldr	r3, [r7, #4]
 8021a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021a5a:	1ad3      	subs	r3, r2, r3
 8021a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021a5e:	8912      	ldrh	r2, [r2, #8]
 8021a60:	441a      	add	r2, r3
     (seg == NULL ||
 8021a62:	69bb      	ldr	r3, [r7, #24]
 8021a64:	429a      	cmp	r2, r3
 8021a66:	d904      	bls.n	8021a72 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8021a68:	6878      	ldr	r0, [r7, #4]
 8021a6a:	f7ff ff5f 	bl	802192c <tcp_send_empty_ack>
 8021a6e:	4603      	mov	r3, r0
 8021a70:	e19c      	b.n	8021dac <tcp_output+0x3c8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8021a72:	687b      	ldr	r3, [r7, #4]
 8021a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021a76:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8021a78:	6a3b      	ldr	r3, [r7, #32]
 8021a7a:	2b00      	cmp	r3, #0
 8021a7c:	d007      	beq.n	8021a8e <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8021a7e:	e002      	b.n	8021a86 <tcp_output+0xa2>
 8021a80:	6a3b      	ldr	r3, [r7, #32]
 8021a82:	681b      	ldr	r3, [r3, #0]
 8021a84:	623b      	str	r3, [r7, #32]
 8021a86:	6a3b      	ldr	r3, [r7, #32]
 8021a88:	681b      	ldr	r3, [r3, #0]
 8021a8a:	2b00      	cmp	r3, #0
 8021a8c:	d1f8      	bne.n	8021a80 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	3304      	adds	r3, #4
 8021a92:	4618      	mov	r0, r3
 8021a94:	f7f8 fca8 	bl	801a3e8 <ip4_route>
 8021a98:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8021a9a:	697b      	ldr	r3, [r7, #20]
 8021a9c:	2b00      	cmp	r3, #0
 8021a9e:	d102      	bne.n	8021aa6 <tcp_output+0xc2>
    return ERR_RTE;
 8021aa0:	f06f 0303 	mvn.w	r3, #3
 8021aa4:	e182      	b.n	8021dac <tcp_output+0x3c8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8021aa6:	687b      	ldr	r3, [r7, #4]
 8021aa8:	2b00      	cmp	r3, #0
 8021aaa:	d003      	beq.n	8021ab4 <tcp_output+0xd0>
 8021aac:	687b      	ldr	r3, [r7, #4]
 8021aae:	681b      	ldr	r3, [r3, #0]
 8021ab0:	2b00      	cmp	r3, #0
 8021ab2:	d111      	bne.n	8021ad8 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8021ab4:	697b      	ldr	r3, [r7, #20]
 8021ab6:	2b00      	cmp	r3, #0
 8021ab8:	d002      	beq.n	8021ac0 <tcp_output+0xdc>
 8021aba:	697b      	ldr	r3, [r7, #20]
 8021abc:	3304      	adds	r3, #4
 8021abe:	e000      	b.n	8021ac2 <tcp_output+0xde>
 8021ac0:	2300      	movs	r3, #0
 8021ac2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8021ac4:	693b      	ldr	r3, [r7, #16]
 8021ac6:	2b00      	cmp	r3, #0
 8021ac8:	d102      	bne.n	8021ad0 <tcp_output+0xec>
      return ERR_RTE;
 8021aca:	f06f 0303 	mvn.w	r3, #3
 8021ace:	e16d      	b.n	8021dac <tcp_output+0x3c8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8021ad0:	693b      	ldr	r3, [r7, #16]
 8021ad2:	681a      	ldr	r2, [r3, #0]
 8021ad4:	687b      	ldr	r3, [r7, #4]
 8021ad6:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8021ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ada:	2b00      	cmp	r3, #0
 8021adc:	f000 813e 	beq.w	8021d5c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8021ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ae2:	68db      	ldr	r3, [r3, #12]
 8021ae4:	685b      	ldr	r3, [r3, #4]
 8021ae6:	4618      	mov	r0, r3
 8021ae8:	f7f7 fbac 	bl	8019244 <lwip_htonl>
 8021aec:	4602      	mov	r2, r0
 8021aee:	687b      	ldr	r3, [r7, #4]
 8021af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021af2:	1ad3      	subs	r3, r2, r3
 8021af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021af6:	8912      	ldrh	r2, [r2, #8]
 8021af8:	441a      	add	r2, r3
  if (seg != NULL &&
 8021afa:	69bb      	ldr	r3, [r7, #24]
 8021afc:	429a      	cmp	r2, r3
 8021afe:	f240 812d 	bls.w	8021d5c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8021b02:	69bb      	ldr	r3, [r7, #24]
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	f000 8129 	beq.w	8021d5c <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8021b0a:	687b      	ldr	r3, [r7, #4]
 8021b0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8021b10:	461a      	mov	r2, r3
 8021b12:	69bb      	ldr	r3, [r7, #24]
 8021b14:	429a      	cmp	r2, r3
 8021b16:	f040 8121 	bne.w	8021d5c <tcp_output+0x378>
 8021b1a:	687b      	ldr	r3, [r7, #4]
 8021b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	f040 811c 	bne.w	8021d5c <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8021b2a:	2b00      	cmp	r3, #0
 8021b2c:	f040 812b 	bne.w	8021d86 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8021b30:	687b      	ldr	r3, [r7, #4]
 8021b32:	2200      	movs	r2, #0
 8021b34:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8021b38:	687b      	ldr	r3, [r7, #4]
 8021b3a:	2201      	movs	r2, #1
 8021b3c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8021b40:	e121      	b.n	8021d86 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8021b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b44:	68db      	ldr	r3, [r3, #12]
 8021b46:	899b      	ldrh	r3, [r3, #12]
 8021b48:	b29b      	uxth	r3, r3
 8021b4a:	4618      	mov	r0, r3
 8021b4c:	f7f7 fb6c 	bl	8019228 <lwip_htons>
 8021b50:	4603      	mov	r3, r0
 8021b52:	f003 0304 	and.w	r3, r3, #4
 8021b56:	2b00      	cmp	r3, #0
 8021b58:	d006      	beq.n	8021b68 <tcp_output+0x184>
 8021b5a:	4b42      	ldr	r3, [pc, #264]	; (8021c64 <tcp_output+0x280>)
 8021b5c:	f240 4246 	movw	r2, #1094	; 0x446
 8021b60:	4944      	ldr	r1, [pc, #272]	; (8021c74 <tcp_output+0x290>)
 8021b62:	4842      	ldr	r0, [pc, #264]	; (8021c6c <tcp_output+0x288>)
 8021b64:	f005 fc64 	bl	8027430 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8021b68:	687b      	ldr	r3, [r7, #4]
 8021b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	d01f      	beq.n	8021bb0 <tcp_output+0x1cc>
 8021b70:	687b      	ldr	r3, [r7, #4]
 8021b72:	7e9b      	ldrb	r3, [r3, #26]
 8021b74:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	d119      	bne.n	8021bb0 <tcp_output+0x1cc>
 8021b7c:	687b      	ldr	r3, [r7, #4]
 8021b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021b80:	2b00      	cmp	r3, #0
 8021b82:	d00b      	beq.n	8021b9c <tcp_output+0x1b8>
 8021b84:	687b      	ldr	r3, [r7, #4]
 8021b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021b88:	681b      	ldr	r3, [r3, #0]
 8021b8a:	2b00      	cmp	r3, #0
 8021b8c:	d110      	bne.n	8021bb0 <tcp_output+0x1cc>
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021b92:	891a      	ldrh	r2, [r3, #8]
 8021b94:	687b      	ldr	r3, [r7, #4]
 8021b96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8021b98:	429a      	cmp	r2, r3
 8021b9a:	d209      	bcs.n	8021bb0 <tcp_output+0x1cc>
 8021b9c:	687b      	ldr	r3, [r7, #4]
 8021b9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8021ba2:	2b00      	cmp	r3, #0
 8021ba4:	d004      	beq.n	8021bb0 <tcp_output+0x1cc>
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021bac:	2b0a      	cmp	r3, #10
 8021bae:	d901      	bls.n	8021bb4 <tcp_output+0x1d0>
 8021bb0:	2301      	movs	r3, #1
 8021bb2:	e000      	b.n	8021bb6 <tcp_output+0x1d2>
 8021bb4:	2300      	movs	r3, #0
 8021bb6:	2b00      	cmp	r3, #0
 8021bb8:	d106      	bne.n	8021bc8 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8021bba:	687b      	ldr	r3, [r7, #4]
 8021bbc:	7e9b      	ldrb	r3, [r3, #26]
 8021bbe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8021bc2:	2b00      	cmp	r3, #0
 8021bc4:	f000 80e1 	beq.w	8021d8a <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8021bc8:	687b      	ldr	r3, [r7, #4]
 8021bca:	7d1b      	ldrb	r3, [r3, #20]
 8021bcc:	2b02      	cmp	r3, #2
 8021bce:	d00c      	beq.n	8021bea <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8021bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021bd2:	68dc      	ldr	r4, [r3, #12]
 8021bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021bd6:	68db      	ldr	r3, [r3, #12]
 8021bd8:	899b      	ldrh	r3, [r3, #12]
 8021bda:	b29d      	uxth	r5, r3
 8021bdc:	2010      	movs	r0, #16
 8021bde:	f7f7 fb23 	bl	8019228 <lwip_htons>
 8021be2:	4603      	mov	r3, r0
 8021be4:	432b      	orrs	r3, r5
 8021be6:	b29b      	uxth	r3, r3
 8021be8:	81a3      	strh	r3, [r4, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8021bea:	697a      	ldr	r2, [r7, #20]
 8021bec:	6879      	ldr	r1, [r7, #4]
 8021bee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021bf0:	f000 f8e0 	bl	8021db4 <tcp_output_segment>
 8021bf4:	4603      	mov	r3, r0
 8021bf6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8021bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021bfc:	2b00      	cmp	r3, #0
 8021bfe:	d009      	beq.n	8021c14 <tcp_output+0x230>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	7e9b      	ldrb	r3, [r3, #26]
 8021c04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021c08:	b2da      	uxtb	r2, r3
 8021c0a:	687b      	ldr	r3, [r7, #4]
 8021c0c:	769a      	strb	r2, [r3, #26]
      return err;
 8021c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021c12:	e0cb      	b.n	8021dac <tcp_output+0x3c8>
    }
    pcb->unsent = seg->next;
 8021c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c16:	681a      	ldr	r2, [r3, #0]
 8021c18:	687b      	ldr	r3, [r7, #4]
 8021c1a:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8021c1c:	687b      	ldr	r3, [r7, #4]
 8021c1e:	7d1b      	ldrb	r3, [r3, #20]
 8021c20:	2b02      	cmp	r3, #2
 8021c22:	d006      	beq.n	8021c32 <tcp_output+0x24e>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	7e9b      	ldrb	r3, [r3, #26]
 8021c28:	f023 0303 	bic.w	r3, r3, #3
 8021c2c:	b2da      	uxtb	r2, r3
 8021c2e:	687b      	ldr	r3, [r7, #4]
 8021c30:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8021c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c34:	68db      	ldr	r3, [r3, #12]
 8021c36:	685b      	ldr	r3, [r3, #4]
 8021c38:	4618      	mov	r0, r3
 8021c3a:	f7f7 fb03 	bl	8019244 <lwip_htonl>
 8021c3e:	4604      	mov	r4, r0
 8021c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c42:	891b      	ldrh	r3, [r3, #8]
 8021c44:	461d      	mov	r5, r3
 8021c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c48:	68db      	ldr	r3, [r3, #12]
 8021c4a:	899b      	ldrh	r3, [r3, #12]
 8021c4c:	b29b      	uxth	r3, r3
 8021c4e:	4618      	mov	r0, r3
 8021c50:	f7f7 faea 	bl	8019228 <lwip_htons>
 8021c54:	4603      	mov	r3, r0
 8021c56:	f003 0303 	and.w	r3, r3, #3
 8021c5a:	2b00      	cmp	r3, #0
 8021c5c:	d00c      	beq.n	8021c78 <tcp_output+0x294>
 8021c5e:	2301      	movs	r3, #1
 8021c60:	e00b      	b.n	8021c7a <tcp_output+0x296>
 8021c62:	bf00      	nop
 8021c64:	0802af80 	.word	0x0802af80
 8021c68:	0802b384 	.word	0x0802b384
 8021c6c:	0802afe4 	.word	0x0802afe4
 8021c70:	2000ecf0 	.word	0x2000ecf0
 8021c74:	0802b3ac 	.word	0x0802b3ac
 8021c78:	2300      	movs	r3, #0
 8021c7a:	442b      	add	r3, r5
 8021c7c:	4423      	add	r3, r4
 8021c7e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8021c80:	687b      	ldr	r3, [r7, #4]
 8021c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021c84:	68bb      	ldr	r3, [r7, #8]
 8021c86:	1ad3      	subs	r3, r2, r3
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	da02      	bge.n	8021c92 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8021c8c:	687b      	ldr	r3, [r7, #4]
 8021c8e:	68ba      	ldr	r2, [r7, #8]
 8021c90:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8021c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c94:	891b      	ldrh	r3, [r3, #8]
 8021c96:	461c      	mov	r4, r3
 8021c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c9a:	68db      	ldr	r3, [r3, #12]
 8021c9c:	899b      	ldrh	r3, [r3, #12]
 8021c9e:	b29b      	uxth	r3, r3
 8021ca0:	4618      	mov	r0, r3
 8021ca2:	f7f7 fac1 	bl	8019228 <lwip_htons>
 8021ca6:	4603      	mov	r3, r0
 8021ca8:	f003 0303 	and.w	r3, r3, #3
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d001      	beq.n	8021cb4 <tcp_output+0x2d0>
 8021cb0:	2301      	movs	r3, #1
 8021cb2:	e000      	b.n	8021cb6 <tcp_output+0x2d2>
 8021cb4:	2300      	movs	r3, #0
 8021cb6:	4423      	add	r3, r4
 8021cb8:	2b00      	cmp	r3, #0
 8021cba:	d049      	beq.n	8021d50 <tcp_output+0x36c>
      seg->next = NULL;
 8021cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cbe:	2200      	movs	r2, #0
 8021cc0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8021cc2:	687b      	ldr	r3, [r7, #4]
 8021cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021cc6:	2b00      	cmp	r3, #0
 8021cc8:	d105      	bne.n	8021cd6 <tcp_output+0x2f2>
        pcb->unacked = seg;
 8021cca:	687b      	ldr	r3, [r7, #4]
 8021ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021cce:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8021cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cd2:	623b      	str	r3, [r7, #32]
 8021cd4:	e03f      	b.n	8021d56 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8021cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cd8:	68db      	ldr	r3, [r3, #12]
 8021cda:	685b      	ldr	r3, [r3, #4]
 8021cdc:	4618      	mov	r0, r3
 8021cde:	f7f7 fab1 	bl	8019244 <lwip_htonl>
 8021ce2:	4604      	mov	r4, r0
 8021ce4:	6a3b      	ldr	r3, [r7, #32]
 8021ce6:	68db      	ldr	r3, [r3, #12]
 8021ce8:	685b      	ldr	r3, [r3, #4]
 8021cea:	4618      	mov	r0, r3
 8021cec:	f7f7 faaa 	bl	8019244 <lwip_htonl>
 8021cf0:	4603      	mov	r3, r0
 8021cf2:	1ae3      	subs	r3, r4, r3
 8021cf4:	2b00      	cmp	r3, #0
 8021cf6:	da24      	bge.n	8021d42 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8021cf8:	687b      	ldr	r3, [r7, #4]
 8021cfa:	336c      	adds	r3, #108	; 0x6c
 8021cfc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8021cfe:	e002      	b.n	8021d06 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8021d00:	69fb      	ldr	r3, [r7, #28]
 8021d02:	681b      	ldr	r3, [r3, #0]
 8021d04:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8021d06:	69fb      	ldr	r3, [r7, #28]
 8021d08:	681b      	ldr	r3, [r3, #0]
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	d011      	beq.n	8021d32 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8021d0e:	69fb      	ldr	r3, [r7, #28]
 8021d10:	681b      	ldr	r3, [r3, #0]
 8021d12:	68db      	ldr	r3, [r3, #12]
 8021d14:	685b      	ldr	r3, [r3, #4]
 8021d16:	4618      	mov	r0, r3
 8021d18:	f7f7 fa94 	bl	8019244 <lwip_htonl>
 8021d1c:	4604      	mov	r4, r0
 8021d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d20:	68db      	ldr	r3, [r3, #12]
 8021d22:	685b      	ldr	r3, [r3, #4]
 8021d24:	4618      	mov	r0, r3
 8021d26:	f7f7 fa8d 	bl	8019244 <lwip_htonl>
 8021d2a:	4603      	mov	r3, r0
 8021d2c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	dbe6      	blt.n	8021d00 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8021d32:	69fb      	ldr	r3, [r7, #28]
 8021d34:	681a      	ldr	r2, [r3, #0]
 8021d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d38:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8021d3a:	69fb      	ldr	r3, [r7, #28]
 8021d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021d3e:	601a      	str	r2, [r3, #0]
 8021d40:	e009      	b.n	8021d56 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8021d42:	6a3b      	ldr	r3, [r7, #32]
 8021d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021d46:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8021d48:	6a3b      	ldr	r3, [r7, #32]
 8021d4a:	681b      	ldr	r3, [r3, #0]
 8021d4c:	623b      	str	r3, [r7, #32]
 8021d4e:	e002      	b.n	8021d56 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8021d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021d52:	f7fc f9ae 	bl	801e0b2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8021d56:	687b      	ldr	r3, [r7, #4]
 8021d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021d5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8021d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	d014      	beq.n	8021d8c <tcp_output+0x3a8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8021d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d64:	68db      	ldr	r3, [r3, #12]
 8021d66:	685b      	ldr	r3, [r3, #4]
 8021d68:	4618      	mov	r0, r3
 8021d6a:	f7f7 fa6b 	bl	8019244 <lwip_htonl>
 8021d6e:	4602      	mov	r2, r0
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d74:	1ad3      	subs	r3, r2, r3
 8021d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021d78:	8912      	ldrh	r2, [r2, #8]
 8021d7a:	441a      	add	r2, r3
  while (seg != NULL &&
 8021d7c:	69bb      	ldr	r3, [r7, #24]
 8021d7e:	429a      	cmp	r2, r3
 8021d80:	f67f aedf 	bls.w	8021b42 <tcp_output+0x15e>
 8021d84:	e002      	b.n	8021d8c <tcp_output+0x3a8>
    goto output_done;
 8021d86:	bf00      	nop
 8021d88:	e000      	b.n	8021d8c <tcp_output+0x3a8>
      break;
 8021d8a:	bf00      	nop
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8021d8c:	687b      	ldr	r3, [r7, #4]
 8021d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021d90:	2b00      	cmp	r3, #0
 8021d92:	d103      	bne.n	8021d9c <tcp_output+0x3b8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	2200      	movs	r2, #0
 8021d98:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8021d9c:	687b      	ldr	r3, [r7, #4]
 8021d9e:	7e9b      	ldrb	r3, [r3, #26]
 8021da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021da4:	b2da      	uxtb	r2, r3
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8021daa:	2300      	movs	r3, #0
}
 8021dac:	4618      	mov	r0, r3
 8021dae:	3728      	adds	r7, #40	; 0x28
 8021db0:	46bd      	mov	sp, r7
 8021db2:	bdb0      	pop	{r4, r5, r7, pc}

08021db4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8021db4:	b5b0      	push	{r4, r5, r7, lr}
 8021db6:	b08c      	sub	sp, #48	; 0x30
 8021db8:	af04      	add	r7, sp, #16
 8021dba:	60f8      	str	r0, [r7, #12]
 8021dbc:	60b9      	str	r1, [r7, #8]
 8021dbe:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8021dc0:	68fb      	ldr	r3, [r7, #12]
 8021dc2:	685b      	ldr	r3, [r3, #4]
 8021dc4:	89db      	ldrh	r3, [r3, #14]
 8021dc6:	2b01      	cmp	r3, #1
 8021dc8:	d001      	beq.n	8021dce <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8021dca:	2300      	movs	r3, #0
 8021dcc:	e08b      	b.n	8021ee6 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8021dce:	68fb      	ldr	r3, [r7, #12]
 8021dd0:	68dc      	ldr	r4, [r3, #12]
 8021dd2:	68bb      	ldr	r3, [r7, #8]
 8021dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021dd6:	4618      	mov	r0, r3
 8021dd8:	f7f7 fa34 	bl	8019244 <lwip_htonl>
 8021ddc:	4603      	mov	r3, r0
 8021dde:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8021de0:	68fb      	ldr	r3, [r7, #12]
 8021de2:	68dc      	ldr	r4, [r3, #12]
 8021de4:	68bb      	ldr	r3, [r7, #8]
 8021de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021de8:	4618      	mov	r0, r3
 8021dea:	f7f7 fa1d 	bl	8019228 <lwip_htons>
 8021dee:	4603      	mov	r3, r0
 8021df0:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8021df2:	68bb      	ldr	r3, [r7, #8]
 8021df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021df6:	68ba      	ldr	r2, [r7, #8]
 8021df8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8021dfa:	441a      	add	r2, r3
 8021dfc:	68bb      	ldr	r3, [r7, #8]
 8021dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8021e00:	68fb      	ldr	r3, [r7, #12]
 8021e02:	68db      	ldr	r3, [r3, #12]
 8021e04:	3314      	adds	r3, #20
 8021e06:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8021e08:	68fb      	ldr	r3, [r7, #12]
 8021e0a:	7a9b      	ldrb	r3, [r3, #10]
 8021e0c:	f003 0301 	and.w	r3, r3, #1
 8021e10:	2b00      	cmp	r3, #0
 8021e12:	d014      	beq.n	8021e3e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8021e14:	68bb      	ldr	r3, [r7, #8]
 8021e16:	3304      	adds	r3, #4
 8021e18:	4619      	mov	r1, r3
 8021e1a:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8021e1e:	f7fc fc73 	bl	801e708 <tcp_eff_send_mss_impl>
 8021e22:	4603      	mov	r3, r0
 8021e24:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8021e26:	8b7b      	ldrh	r3, [r7, #26]
 8021e28:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8021e2c:	4618      	mov	r0, r3
 8021e2e:	f7f7 fa09 	bl	8019244 <lwip_htonl>
 8021e32:	4602      	mov	r2, r0
 8021e34:	69fb      	ldr	r3, [r7, #28]
 8021e36:	601a      	str	r2, [r3, #0]
    opts += 1;
 8021e38:	69fb      	ldr	r3, [r7, #28]
 8021e3a:	3304      	adds	r3, #4
 8021e3c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8021e3e:	68bb      	ldr	r3, [r7, #8]
 8021e40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8021e44:	2b00      	cmp	r3, #0
 8021e46:	da02      	bge.n	8021e4e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8021e48:	68bb      	ldr	r3, [r7, #8]
 8021e4a:	2200      	movs	r2, #0
 8021e4c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8021e4e:	68bb      	ldr	r3, [r7, #8]
 8021e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021e52:	2b00      	cmp	r3, #0
 8021e54:	d10c      	bne.n	8021e70 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8021e56:	4b26      	ldr	r3, [pc, #152]	; (8021ef0 <tcp_output_segment+0x13c>)
 8021e58:	681a      	ldr	r2, [r3, #0]
 8021e5a:	68bb      	ldr	r3, [r7, #8]
 8021e5c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8021e5e:	68fb      	ldr	r3, [r7, #12]
 8021e60:	68db      	ldr	r3, [r3, #12]
 8021e62:	685b      	ldr	r3, [r3, #4]
 8021e64:	4618      	mov	r0, r3
 8021e66:	f7f7 f9ed 	bl	8019244 <lwip_htonl>
 8021e6a:	4602      	mov	r2, r0
 8021e6c:	68bb      	ldr	r3, [r7, #8]
 8021e6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8021e70:	68fb      	ldr	r3, [r7, #12]
 8021e72:	68db      	ldr	r3, [r3, #12]
 8021e74:	461a      	mov	r2, r3
 8021e76:	68fb      	ldr	r3, [r7, #12]
 8021e78:	685b      	ldr	r3, [r3, #4]
 8021e7a:	685b      	ldr	r3, [r3, #4]
 8021e7c:	1ad3      	subs	r3, r2, r3
 8021e7e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8021e80:	68fb      	ldr	r3, [r7, #12]
 8021e82:	685b      	ldr	r3, [r3, #4]
 8021e84:	68fa      	ldr	r2, [r7, #12]
 8021e86:	6852      	ldr	r2, [r2, #4]
 8021e88:	8951      	ldrh	r1, [r2, #10]
 8021e8a:	8b3a      	ldrh	r2, [r7, #24]
 8021e8c:	1a8a      	subs	r2, r1, r2
 8021e8e:	b292      	uxth	r2, r2
 8021e90:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8021e92:	68fb      	ldr	r3, [r7, #12]
 8021e94:	685b      	ldr	r3, [r3, #4]
 8021e96:	68fa      	ldr	r2, [r7, #12]
 8021e98:	6852      	ldr	r2, [r2, #4]
 8021e9a:	8911      	ldrh	r1, [r2, #8]
 8021e9c:	8b3a      	ldrh	r2, [r7, #24]
 8021e9e:	1a8a      	subs	r2, r1, r2
 8021ea0:	b292      	uxth	r2, r2
 8021ea2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8021ea4:	68fb      	ldr	r3, [r7, #12]
 8021ea6:	685b      	ldr	r3, [r3, #4]
 8021ea8:	68fa      	ldr	r2, [r7, #12]
 8021eaa:	68d2      	ldr	r2, [r2, #12]
 8021eac:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8021eae:	68fb      	ldr	r3, [r7, #12]
 8021eb0:	68db      	ldr	r3, [r3, #12]
 8021eb2:	2200      	movs	r2, #0
 8021eb4:	741a      	strb	r2, [r3, #16]
 8021eb6:	2200      	movs	r2, #0
 8021eb8:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8021eba:	68fb      	ldr	r3, [r7, #12]
 8021ebc:	6858      	ldr	r0, [r3, #4]
 8021ebe:	68b9      	ldr	r1, [r7, #8]
 8021ec0:	68bb      	ldr	r3, [r7, #8]
 8021ec2:	1d1c      	adds	r4, r3, #4
 8021ec4:	68bb      	ldr	r3, [r7, #8]
 8021ec6:	7a9d      	ldrb	r5, [r3, #10]
 8021ec8:	68bb      	ldr	r3, [r7, #8]
 8021eca:	7a5b      	ldrb	r3, [r3, #9]
 8021ecc:	687a      	ldr	r2, [r7, #4]
 8021ece:	9202      	str	r2, [sp, #8]
 8021ed0:	2206      	movs	r2, #6
 8021ed2:	9201      	str	r2, [sp, #4]
 8021ed4:	9300      	str	r3, [sp, #0]
 8021ed6:	462b      	mov	r3, r5
 8021ed8:	4622      	mov	r2, r4
 8021eda:	f7f8 fc21 	bl	801a720 <ip4_output_if>
 8021ede:	4603      	mov	r3, r0
 8021ee0:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8021ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8021ee6:	4618      	mov	r0, r3
 8021ee8:	3720      	adds	r7, #32
 8021eea:	46bd      	mov	sp, r7
 8021eec:	bdb0      	pop	{r4, r5, r7, pc}
 8021eee:	bf00      	nop
 8021ef0:	2000ece0 	.word	0x2000ece0

08021ef4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8021ef4:	b580      	push	{r7, lr}
 8021ef6:	b08c      	sub	sp, #48	; 0x30
 8021ef8:	af04      	add	r7, sp, #16
 8021efa:	60f8      	str	r0, [r7, #12]
 8021efc:	60b9      	str	r1, [r7, #8]
 8021efe:	607a      	str	r2, [r7, #4]
 8021f00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8021f02:	2200      	movs	r2, #0
 8021f04:	2114      	movs	r1, #20
 8021f06:	2001      	movs	r0, #1
 8021f08:	f7fa fa46 	bl	801c398 <pbuf_alloc>
 8021f0c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8021f0e:	69fb      	ldr	r3, [r7, #28]
 8021f10:	2b00      	cmp	r3, #0
 8021f12:	d059      	beq.n	8021fc8 <tcp_rst+0xd4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8021f14:	69fb      	ldr	r3, [r7, #28]
 8021f16:	895b      	ldrh	r3, [r3, #10]
 8021f18:	2b13      	cmp	r3, #19
 8021f1a:	d806      	bhi.n	8021f2a <tcp_rst+0x36>
 8021f1c:	4b2c      	ldr	r3, [pc, #176]	; (8021fd0 <tcp_rst+0xdc>)
 8021f1e:	f240 524d 	movw	r2, #1357	; 0x54d
 8021f22:	492c      	ldr	r1, [pc, #176]	; (8021fd4 <tcp_rst+0xe0>)
 8021f24:	482c      	ldr	r0, [pc, #176]	; (8021fd8 <tcp_rst+0xe4>)
 8021f26:	f005 fa83 	bl	8027430 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8021f2a:	69fb      	ldr	r3, [r7, #28]
 8021f2c:	685b      	ldr	r3, [r3, #4]
 8021f2e:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8021f30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021f32:	4618      	mov	r0, r3
 8021f34:	f7f7 f978 	bl	8019228 <lwip_htons>
 8021f38:	4603      	mov	r3, r0
 8021f3a:	461a      	mov	r2, r3
 8021f3c:	69bb      	ldr	r3, [r7, #24]
 8021f3e:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8021f40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8021f42:	4618      	mov	r0, r3
 8021f44:	f7f7 f970 	bl	8019228 <lwip_htons>
 8021f48:	4603      	mov	r3, r0
 8021f4a:	461a      	mov	r2, r3
 8021f4c:	69bb      	ldr	r3, [r7, #24]
 8021f4e:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8021f50:	68f8      	ldr	r0, [r7, #12]
 8021f52:	f7f7 f977 	bl	8019244 <lwip_htonl>
 8021f56:	4602      	mov	r2, r0
 8021f58:	69bb      	ldr	r3, [r7, #24]
 8021f5a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8021f5c:	68b8      	ldr	r0, [r7, #8]
 8021f5e:	f7f7 f971 	bl	8019244 <lwip_htonl>
 8021f62:	4602      	mov	r2, r0
 8021f64:	69bb      	ldr	r3, [r7, #24]
 8021f66:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8021f68:	f245 0014 	movw	r0, #20500	; 0x5014
 8021f6c:	f7f7 f95c 	bl	8019228 <lwip_htons>
 8021f70:	4603      	mov	r3, r0
 8021f72:	461a      	mov	r2, r3
 8021f74:	69bb      	ldr	r3, [r7, #24]
 8021f76:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8021f78:	69bb      	ldr	r3, [r7, #24]
 8021f7a:	2200      	movs	r2, #0
 8021f7c:	f042 0210 	orr.w	r2, r2, #16
 8021f80:	739a      	strb	r2, [r3, #14]
 8021f82:	2200      	movs	r2, #0
 8021f84:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8021f86:	69bb      	ldr	r3, [r7, #24]
 8021f88:	2200      	movs	r2, #0
 8021f8a:	741a      	strb	r2, [r3, #16]
 8021f8c:	2200      	movs	r2, #0
 8021f8e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8021f90:	69bb      	ldr	r3, [r7, #24]
 8021f92:	2200      	movs	r2, #0
 8021f94:	749a      	strb	r2, [r3, #18]
 8021f96:	2200      	movs	r2, #0
 8021f98:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8021f9a:	6838      	ldr	r0, [r7, #0]
 8021f9c:	f7f8 fa24 	bl	801a3e8 <ip4_route>
 8021fa0:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8021fa2:	697b      	ldr	r3, [r7, #20]
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	d00b      	beq.n	8021fc0 <tcp_rst+0xcc>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8021fa8:	697b      	ldr	r3, [r7, #20]
 8021faa:	9302      	str	r3, [sp, #8]
 8021fac:	2306      	movs	r3, #6
 8021fae:	9301      	str	r3, [sp, #4]
 8021fb0:	2300      	movs	r3, #0
 8021fb2:	9300      	str	r3, [sp, #0]
 8021fb4:	23ff      	movs	r3, #255	; 0xff
 8021fb6:	683a      	ldr	r2, [r7, #0]
 8021fb8:	6879      	ldr	r1, [r7, #4]
 8021fba:	69f8      	ldr	r0, [r7, #28]
 8021fbc:	f7f8 fbb0 	bl	801a720 <ip4_output_if>
  }
  pbuf_free(p);
 8021fc0:	69f8      	ldr	r0, [r7, #28]
 8021fc2:	f7fa fd5b 	bl	801ca7c <pbuf_free>
 8021fc6:	e000      	b.n	8021fca <tcp_rst+0xd6>
    return;
 8021fc8:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8021fca:	3720      	adds	r7, #32
 8021fcc:	46bd      	mov	sp, r7
 8021fce:	bd80      	pop	{r7, pc}
 8021fd0:	0802af80 	.word	0x0802af80
 8021fd4:	0802afb4 	.word	0x0802afb4
 8021fd8:	0802afe4 	.word	0x0802afe4

08021fdc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8021fdc:	b580      	push	{r7, lr}
 8021fde:	b084      	sub	sp, #16
 8021fe0:	af00      	add	r7, sp, #0
 8021fe2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8021fe4:	687b      	ldr	r3, [r7, #4]
 8021fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021fe8:	2b00      	cmp	r3, #0
 8021fea:	d029      	beq.n	8022040 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8021fec:	687b      	ldr	r3, [r7, #4]
 8021fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021ff0:	60fb      	str	r3, [r7, #12]
 8021ff2:	e002      	b.n	8021ffa <tcp_rexmit_rto+0x1e>
 8021ff4:	68fb      	ldr	r3, [r7, #12]
 8021ff6:	681b      	ldr	r3, [r3, #0]
 8021ff8:	60fb      	str	r3, [r7, #12]
 8021ffa:	68fb      	ldr	r3, [r7, #12]
 8021ffc:	681b      	ldr	r3, [r3, #0]
 8021ffe:	2b00      	cmp	r3, #0
 8022000:	d1f8      	bne.n	8021ff4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8022002:	687b      	ldr	r3, [r7, #4]
 8022004:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8022006:	68fb      	ldr	r3, [r7, #12]
 8022008:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 802200a:	687b      	ldr	r3, [r7, #4]
 802200c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 802200e:	687b      	ldr	r3, [r7, #4]
 8022010:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8022012:	687b      	ldr	r3, [r7, #4]
 8022014:	2200      	movs	r2, #0
 8022016:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8022018:	687b      	ldr	r3, [r7, #4]
 802201a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802201e:	2bff      	cmp	r3, #255	; 0xff
 8022020:	d007      	beq.n	8022032 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8022022:	687b      	ldr	r3, [r7, #4]
 8022024:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022028:	3301      	adds	r3, #1
 802202a:	b2da      	uxtb	r2, r3
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8022032:	687b      	ldr	r3, [r7, #4]
 8022034:	2200      	movs	r2, #0
 8022036:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8022038:	6878      	ldr	r0, [r7, #4]
 802203a:	f7ff fcd3 	bl	80219e4 <tcp_output>
 802203e:	e000      	b.n	8022042 <tcp_rexmit_rto+0x66>
    return;
 8022040:	bf00      	nop
}
 8022042:	3710      	adds	r7, #16
 8022044:	46bd      	mov	sp, r7
 8022046:	bd80      	pop	{r7, pc}

08022048 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8022048:	b590      	push	{r4, r7, lr}
 802204a:	b085      	sub	sp, #20
 802204c:	af00      	add	r7, sp, #0
 802204e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8022050:	687b      	ldr	r3, [r7, #4]
 8022052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022054:	2b00      	cmp	r3, #0
 8022056:	d043      	beq.n	80220e0 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8022058:	687b      	ldr	r3, [r7, #4]
 802205a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802205c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 802205e:	68bb      	ldr	r3, [r7, #8]
 8022060:	681a      	ldr	r2, [r3, #0]
 8022062:	687b      	ldr	r3, [r7, #4]
 8022064:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	3368      	adds	r3, #104	; 0x68
 802206a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 802206c:	e002      	b.n	8022074 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 802206e:	68fb      	ldr	r3, [r7, #12]
 8022070:	681b      	ldr	r3, [r3, #0]
 8022072:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8022074:	68fb      	ldr	r3, [r7, #12]
 8022076:	681b      	ldr	r3, [r3, #0]
 8022078:	2b00      	cmp	r3, #0
 802207a:	d011      	beq.n	80220a0 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802207c:	68fb      	ldr	r3, [r7, #12]
 802207e:	681b      	ldr	r3, [r3, #0]
 8022080:	68db      	ldr	r3, [r3, #12]
 8022082:	685b      	ldr	r3, [r3, #4]
 8022084:	4618      	mov	r0, r3
 8022086:	f7f7 f8dd 	bl	8019244 <lwip_htonl>
 802208a:	4604      	mov	r4, r0
 802208c:	68bb      	ldr	r3, [r7, #8]
 802208e:	68db      	ldr	r3, [r3, #12]
 8022090:	685b      	ldr	r3, [r3, #4]
 8022092:	4618      	mov	r0, r3
 8022094:	f7f7 f8d6 	bl	8019244 <lwip_htonl>
 8022098:	4603      	mov	r3, r0
 802209a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 802209c:	2b00      	cmp	r3, #0
 802209e:	dbe6      	blt.n	802206e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80220a0:	68fb      	ldr	r3, [r7, #12]
 80220a2:	681a      	ldr	r2, [r3, #0]
 80220a4:	68bb      	ldr	r3, [r7, #8]
 80220a6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80220a8:	68fb      	ldr	r3, [r7, #12]
 80220aa:	68ba      	ldr	r2, [r7, #8]
 80220ac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80220ae:	68bb      	ldr	r3, [r7, #8]
 80220b0:	681b      	ldr	r3, [r3, #0]
 80220b2:	2b00      	cmp	r3, #0
 80220b4:	d103      	bne.n	80220be <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80220b6:	687b      	ldr	r3, [r7, #4]
 80220b8:	2200      	movs	r2, #0
 80220ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80220be:	687b      	ldr	r3, [r7, #4]
 80220c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80220c4:	2bff      	cmp	r3, #255	; 0xff
 80220c6:	d007      	beq.n	80220d8 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80220c8:	687b      	ldr	r3, [r7, #4]
 80220ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80220ce:	3301      	adds	r3, #1
 80220d0:	b2da      	uxtb	r2, r3
 80220d2:	687b      	ldr	r3, [r7, #4]
 80220d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	2200      	movs	r2, #0
 80220dc:	635a      	str	r2, [r3, #52]	; 0x34
 80220de:	e000      	b.n	80220e2 <tcp_rexmit+0x9a>
    return;
 80220e0:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80220e2:	3714      	adds	r7, #20
 80220e4:	46bd      	mov	sp, r7
 80220e6:	bd90      	pop	{r4, r7, pc}

080220e8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80220e8:	b580      	push	{r7, lr}
 80220ea:	b082      	sub	sp, #8
 80220ec:	af00      	add	r7, sp, #0
 80220ee:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80220f0:	687b      	ldr	r3, [r7, #4]
 80220f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	d04a      	beq.n	802218e <tcp_rexmit_fast+0xa6>
 80220f8:	687b      	ldr	r3, [r7, #4]
 80220fa:	7e9b      	ldrb	r3, [r3, #26]
 80220fc:	f003 0304 	and.w	r3, r3, #4
 8022100:	2b00      	cmp	r3, #0
 8022102:	d144      	bne.n	802218e <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8022104:	6878      	ldr	r0, [r7, #4]
 8022106:	f7ff ff9f 	bl	8022048 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 802210a:	687b      	ldr	r3, [r7, #4]
 802210c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8022110:	687b      	ldr	r3, [r7, #4]
 8022112:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8022116:	429a      	cmp	r2, r3
 8022118:	d207      	bcs.n	802212a <tcp_rexmit_fast+0x42>
 802211a:	687b      	ldr	r3, [r7, #4]
 802211c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8022120:	0fda      	lsrs	r2, r3, #31
 8022122:	4413      	add	r3, r2
 8022124:	105b      	asrs	r3, r3, #1
 8022126:	b29b      	uxth	r3, r3
 8022128:	e006      	b.n	8022138 <tcp_rexmit_fast+0x50>
 802212a:	687b      	ldr	r3, [r7, #4]
 802212c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8022130:	0fda      	lsrs	r2, r3, #31
 8022132:	4413      	add	r3, r2
 8022134:	105b      	asrs	r3, r3, #1
 8022136:	b29b      	uxth	r3, r3
 8022138:	687a      	ldr	r2, [r7, #4]
 802213a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8022144:	461a      	mov	r2, r3
 8022146:	687b      	ldr	r3, [r7, #4]
 8022148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802214a:	005b      	lsls	r3, r3, #1
 802214c:	429a      	cmp	r2, r3
 802214e:	d206      	bcs.n	802215e <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8022150:	687b      	ldr	r3, [r7, #4]
 8022152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022154:	005b      	lsls	r3, r3, #1
 8022156:	b29a      	uxth	r2, r3
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 802215e:	687b      	ldr	r3, [r7, #4]
 8022160:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022168:	4619      	mov	r1, r3
 802216a:	0049      	lsls	r1, r1, #1
 802216c:	440b      	add	r3, r1
 802216e:	b29b      	uxth	r3, r3
 8022170:	4413      	add	r3, r2
 8022172:	b29a      	uxth	r2, r3
 8022174:	687b      	ldr	r3, [r7, #4]
 8022176:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	7e9b      	ldrb	r3, [r3, #26]
 802217e:	f043 0304 	orr.w	r3, r3, #4
 8022182:	b2da      	uxtb	r2, r3
 8022184:	687b      	ldr	r3, [r7, #4]
 8022186:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8022188:	687b      	ldr	r3, [r7, #4]
 802218a:	2200      	movs	r2, #0
 802218c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 802218e:	bf00      	nop
 8022190:	3708      	adds	r7, #8
 8022192:	46bd      	mov	sp, r7
 8022194:	bd80      	pop	{r7, pc}

08022196 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8022196:	b580      	push	{r7, lr}
 8022198:	b08a      	sub	sp, #40	; 0x28
 802219a:	af04      	add	r7, sp, #16
 802219c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80221a2:	3b01      	subs	r3, #1
 80221a4:	4618      	mov	r0, r3
 80221a6:	f7f7 f84d 	bl	8019244 <lwip_htonl>
 80221aa:	4603      	mov	r3, r0
 80221ac:	2200      	movs	r2, #0
 80221ae:	2100      	movs	r1, #0
 80221b0:	6878      	ldr	r0, [r7, #4]
 80221b2:	f7fe fd45 	bl	8020c40 <tcp_output_alloc_header>
 80221b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80221b8:	693b      	ldr	r3, [r7, #16]
 80221ba:	2b00      	cmp	r3, #0
 80221bc:	d102      	bne.n	80221c4 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80221be:	f04f 33ff 	mov.w	r3, #4294967295
 80221c2:	e021      	b.n	8022208 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80221c4:	687b      	ldr	r3, [r7, #4]
 80221c6:	3304      	adds	r3, #4
 80221c8:	4618      	mov	r0, r3
 80221ca:	f7f8 f90d 	bl	801a3e8 <ip4_route>
 80221ce:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80221d0:	68fb      	ldr	r3, [r7, #12]
 80221d2:	2b00      	cmp	r3, #0
 80221d4:	d102      	bne.n	80221dc <tcp_keepalive+0x46>
    err = ERR_RTE;
 80221d6:	23fc      	movs	r3, #252	; 0xfc
 80221d8:	75fb      	strb	r3, [r7, #23]
 80221da:	e010      	b.n	80221fe <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80221dc:	6879      	ldr	r1, [r7, #4]
 80221de:	687b      	ldr	r3, [r7, #4]
 80221e0:	1d1a      	adds	r2, r3, #4
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	7a98      	ldrb	r0, [r3, #10]
 80221e6:	68fb      	ldr	r3, [r7, #12]
 80221e8:	9302      	str	r3, [sp, #8]
 80221ea:	2306      	movs	r3, #6
 80221ec:	9301      	str	r3, [sp, #4]
 80221ee:	2300      	movs	r3, #0
 80221f0:	9300      	str	r3, [sp, #0]
 80221f2:	4603      	mov	r3, r0
 80221f4:	6938      	ldr	r0, [r7, #16]
 80221f6:	f7f8 fa93 	bl	801a720 <ip4_output_if>
 80221fa:	4603      	mov	r3, r0
 80221fc:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80221fe:	6938      	ldr	r0, [r7, #16]
 8022200:	f7fa fc3c 	bl	801ca7c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8022204:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8022208:	4618      	mov	r0, r3
 802220a:	3718      	adds	r7, #24
 802220c:	46bd      	mov	sp, r7
 802220e:	bd80      	pop	{r7, pc}

08022210 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8022210:	b590      	push	{r4, r7, lr}
 8022212:	b08f      	sub	sp, #60	; 0x3c
 8022214:	af04      	add	r7, sp, #16
 8022216:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8022218:	687b      	ldr	r3, [r7, #4]
 802221a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802221c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 802221e:	6a3b      	ldr	r3, [r7, #32]
 8022220:	2b00      	cmp	r3, #0
 8022222:	d102      	bne.n	802222a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8022224:	687b      	ldr	r3, [r7, #4]
 8022226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8022228:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 802222a:	6a3b      	ldr	r3, [r7, #32]
 802222c:	2b00      	cmp	r3, #0
 802222e:	d101      	bne.n	8022234 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8022230:	2300      	movs	r3, #0
 8022232:	e085      	b.n	8022340 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8022234:	6a3b      	ldr	r3, [r7, #32]
 8022236:	68db      	ldr	r3, [r3, #12]
 8022238:	899b      	ldrh	r3, [r3, #12]
 802223a:	b29b      	uxth	r3, r3
 802223c:	4618      	mov	r0, r3
 802223e:	f7f6 fff3 	bl	8019228 <lwip_htons>
 8022242:	4603      	mov	r3, r0
 8022244:	f003 0301 	and.w	r3, r3, #1
 8022248:	2b00      	cmp	r3, #0
 802224a:	d005      	beq.n	8022258 <tcp_zero_window_probe+0x48>
 802224c:	6a3b      	ldr	r3, [r7, #32]
 802224e:	891b      	ldrh	r3, [r3, #8]
 8022250:	2b00      	cmp	r3, #0
 8022252:	d101      	bne.n	8022258 <tcp_zero_window_probe+0x48>
 8022254:	2301      	movs	r3, #1
 8022256:	e000      	b.n	802225a <tcp_zero_window_probe+0x4a>
 8022258:	2300      	movs	r3, #0
 802225a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 802225c:	7ffb      	ldrb	r3, [r7, #31]
 802225e:	2b00      	cmp	r3, #0
 8022260:	bf0c      	ite	eq
 8022262:	2301      	moveq	r3, #1
 8022264:	2300      	movne	r3, #0
 8022266:	b2db      	uxtb	r3, r3
 8022268:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 802226a:	6a3b      	ldr	r3, [r7, #32]
 802226c:	68db      	ldr	r3, [r3, #12]
 802226e:	685b      	ldr	r3, [r3, #4]
 8022270:	8bba      	ldrh	r2, [r7, #28]
 8022272:	2100      	movs	r1, #0
 8022274:	6878      	ldr	r0, [r7, #4]
 8022276:	f7fe fce3 	bl	8020c40 <tcp_output_alloc_header>
 802227a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 802227c:	69bb      	ldr	r3, [r7, #24]
 802227e:	2b00      	cmp	r3, #0
 8022280:	d102      	bne.n	8022288 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8022282:	f04f 33ff 	mov.w	r3, #4294967295
 8022286:	e05b      	b.n	8022340 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8022288:	69bb      	ldr	r3, [r7, #24]
 802228a:	685b      	ldr	r3, [r3, #4]
 802228c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 802228e:	7ffb      	ldrb	r3, [r7, #31]
 8022290:	2b00      	cmp	r3, #0
 8022292:	d00e      	beq.n	80222b2 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8022294:	697b      	ldr	r3, [r7, #20]
 8022296:	899b      	ldrh	r3, [r3, #12]
 8022298:	b29b      	uxth	r3, r3
 802229a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802229e:	b29c      	uxth	r4, r3
 80222a0:	2011      	movs	r0, #17
 80222a2:	f7f6 ffc1 	bl	8019228 <lwip_htons>
 80222a6:	4603      	mov	r3, r0
 80222a8:	4323      	orrs	r3, r4
 80222aa:	b29a      	uxth	r2, r3
 80222ac:	697b      	ldr	r3, [r7, #20]
 80222ae:	819a      	strh	r2, [r3, #12]
 80222b0:	e010      	b.n	80222d4 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80222b2:	69bb      	ldr	r3, [r7, #24]
 80222b4:	685b      	ldr	r3, [r3, #4]
 80222b6:	3314      	adds	r3, #20
 80222b8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80222ba:	6a3b      	ldr	r3, [r7, #32]
 80222bc:	6858      	ldr	r0, [r3, #4]
 80222be:	6a3b      	ldr	r3, [r7, #32]
 80222c0:	685b      	ldr	r3, [r3, #4]
 80222c2:	891a      	ldrh	r2, [r3, #8]
 80222c4:	6a3b      	ldr	r3, [r7, #32]
 80222c6:	891b      	ldrh	r3, [r3, #8]
 80222c8:	1ad3      	subs	r3, r2, r3
 80222ca:	b29b      	uxth	r3, r3
 80222cc:	2201      	movs	r2, #1
 80222ce:	6939      	ldr	r1, [r7, #16]
 80222d0:	f7fa fdd0 	bl	801ce74 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80222d4:	6a3b      	ldr	r3, [r7, #32]
 80222d6:	68db      	ldr	r3, [r3, #12]
 80222d8:	685b      	ldr	r3, [r3, #4]
 80222da:	4618      	mov	r0, r3
 80222dc:	f7f6 ffb2 	bl	8019244 <lwip_htonl>
 80222e0:	4603      	mov	r3, r0
 80222e2:	3301      	adds	r3, #1
 80222e4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80222e6:	687b      	ldr	r3, [r7, #4]
 80222e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80222ea:	68fb      	ldr	r3, [r7, #12]
 80222ec:	1ad3      	subs	r3, r2, r3
 80222ee:	2b00      	cmp	r3, #0
 80222f0:	da02      	bge.n	80222f8 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	68fa      	ldr	r2, [r7, #12]
 80222f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80222f8:	687b      	ldr	r3, [r7, #4]
 80222fa:	3304      	adds	r3, #4
 80222fc:	4618      	mov	r0, r3
 80222fe:	f7f8 f873 	bl	801a3e8 <ip4_route>
 8022302:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8022304:	68bb      	ldr	r3, [r7, #8]
 8022306:	2b00      	cmp	r3, #0
 8022308:	d103      	bne.n	8022312 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 802230a:	23fc      	movs	r3, #252	; 0xfc
 802230c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022310:	e011      	b.n	8022336 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8022312:	6879      	ldr	r1, [r7, #4]
 8022314:	687b      	ldr	r3, [r7, #4]
 8022316:	1d1a      	adds	r2, r3, #4
 8022318:	687b      	ldr	r3, [r7, #4]
 802231a:	7a98      	ldrb	r0, [r3, #10]
 802231c:	68bb      	ldr	r3, [r7, #8]
 802231e:	9302      	str	r3, [sp, #8]
 8022320:	2306      	movs	r3, #6
 8022322:	9301      	str	r3, [sp, #4]
 8022324:	2300      	movs	r3, #0
 8022326:	9300      	str	r3, [sp, #0]
 8022328:	4603      	mov	r3, r0
 802232a:	69b8      	ldr	r0, [r7, #24]
 802232c:	f7f8 f9f8 	bl	801a720 <ip4_output_if>
 8022330:	4603      	mov	r3, r0
 8022332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8022336:	69b8      	ldr	r0, [r7, #24]
 8022338:	f7fa fba0 	bl	801ca7c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 802233c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8022340:	4618      	mov	r0, r3
 8022342:	372c      	adds	r7, #44	; 0x2c
 8022344:	46bd      	mov	sp, r7
 8022346:	bd90      	pop	{r4, r7, pc}

08022348 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8022348:	b580      	push	{r7, lr}
 802234a:	b082      	sub	sp, #8
 802234c:	af00      	add	r7, sp, #0
 802234e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8022350:	f7fa fe12 	bl	801cf78 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8022354:	4b0a      	ldr	r3, [pc, #40]	; (8022380 <tcpip_tcp_timer+0x38>)
 8022356:	681b      	ldr	r3, [r3, #0]
 8022358:	2b00      	cmp	r3, #0
 802235a:	d103      	bne.n	8022364 <tcpip_tcp_timer+0x1c>
 802235c:	4b09      	ldr	r3, [pc, #36]	; (8022384 <tcpip_tcp_timer+0x3c>)
 802235e:	681b      	ldr	r3, [r3, #0]
 8022360:	2b00      	cmp	r3, #0
 8022362:	d005      	beq.n	8022370 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8022364:	2200      	movs	r2, #0
 8022366:	4908      	ldr	r1, [pc, #32]	; (8022388 <tcpip_tcp_timer+0x40>)
 8022368:	20fa      	movs	r0, #250	; 0xfa
 802236a:	f000 f86f 	bl	802244c <sys_timeout>
 802236e:	e002      	b.n	8022376 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8022370:	4b06      	ldr	r3, [pc, #24]	; (802238c <tcpip_tcp_timer+0x44>)
 8022372:	2200      	movs	r2, #0
 8022374:	601a      	str	r2, [r3, #0]
  }
}
 8022376:	bf00      	nop
 8022378:	3708      	adds	r7, #8
 802237a:	46bd      	mov	sp, r7
 802237c:	bd80      	pop	{r7, pc}
 802237e:	bf00      	nop
 8022380:	2000ecdc 	.word	0x2000ecdc
 8022384:	2000ecec 	.word	0x2000ecec
 8022388:	08022349 	.word	0x08022349
 802238c:	20009530 	.word	0x20009530

08022390 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8022390:	b580      	push	{r7, lr}
 8022392:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8022394:	4b0a      	ldr	r3, [pc, #40]	; (80223c0 <tcp_timer_needed+0x30>)
 8022396:	681b      	ldr	r3, [r3, #0]
 8022398:	2b00      	cmp	r3, #0
 802239a:	d10f      	bne.n	80223bc <tcp_timer_needed+0x2c>
 802239c:	4b09      	ldr	r3, [pc, #36]	; (80223c4 <tcp_timer_needed+0x34>)
 802239e:	681b      	ldr	r3, [r3, #0]
 80223a0:	2b00      	cmp	r3, #0
 80223a2:	d103      	bne.n	80223ac <tcp_timer_needed+0x1c>
 80223a4:	4b08      	ldr	r3, [pc, #32]	; (80223c8 <tcp_timer_needed+0x38>)
 80223a6:	681b      	ldr	r3, [r3, #0]
 80223a8:	2b00      	cmp	r3, #0
 80223aa:	d007      	beq.n	80223bc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80223ac:	4b04      	ldr	r3, [pc, #16]	; (80223c0 <tcp_timer_needed+0x30>)
 80223ae:	2201      	movs	r2, #1
 80223b0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80223b2:	2200      	movs	r2, #0
 80223b4:	4905      	ldr	r1, [pc, #20]	; (80223cc <tcp_timer_needed+0x3c>)
 80223b6:	20fa      	movs	r0, #250	; 0xfa
 80223b8:	f000 f848 	bl	802244c <sys_timeout>
  }
}
 80223bc:	bf00      	nop
 80223be:	bd80      	pop	{r7, pc}
 80223c0:	20009530 	.word	0x20009530
 80223c4:	2000ecdc 	.word	0x2000ecdc
 80223c8:	2000ecec 	.word	0x2000ecec
 80223cc:	08022349 	.word	0x08022349

080223d0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80223d0:	b580      	push	{r7, lr}
 80223d2:	b084      	sub	sp, #16
 80223d4:	af00      	add	r7, sp, #0
 80223d6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80223d8:	687b      	ldr	r3, [r7, #4]
 80223da:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80223dc:	68fb      	ldr	r3, [r7, #12]
 80223de:	685b      	ldr	r3, [r3, #4]
 80223e0:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80223e2:	68fb      	ldr	r3, [r7, #12]
 80223e4:	681b      	ldr	r3, [r3, #0]
 80223e6:	687a      	ldr	r2, [r7, #4]
 80223e8:	4903      	ldr	r1, [pc, #12]	; (80223f8 <cyclic_timer+0x28>)
 80223ea:	4618      	mov	r0, r3
 80223ec:	f000 f82e 	bl	802244c <sys_timeout>
}
 80223f0:	bf00      	nop
 80223f2:	3710      	adds	r7, #16
 80223f4:	46bd      	mov	sp, r7
 80223f6:	bd80      	pop	{r7, pc}
 80223f8:	080223d1 	.word	0x080223d1

080223fc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80223fc:	b580      	push	{r7, lr}
 80223fe:	b082      	sub	sp, #8
 8022400:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8022402:	2301      	movs	r3, #1
 8022404:	607b      	str	r3, [r7, #4]
 8022406:	e00e      	b.n	8022426 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8022408:	4a0d      	ldr	r2, [pc, #52]	; (8022440 <sys_timeouts_init+0x44>)
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	00db      	lsls	r3, r3, #3
 8022414:	4a0a      	ldr	r2, [pc, #40]	; (8022440 <sys_timeouts_init+0x44>)
 8022416:	4413      	add	r3, r2
 8022418:	461a      	mov	r2, r3
 802241a:	490a      	ldr	r1, [pc, #40]	; (8022444 <sys_timeouts_init+0x48>)
 802241c:	f000 f816 	bl	802244c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	3301      	adds	r3, #1
 8022424:	607b      	str	r3, [r7, #4]
 8022426:	687b      	ldr	r3, [r7, #4]
 8022428:	2b02      	cmp	r3, #2
 802242a:	d9ed      	bls.n	8022408 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 802242c:	f001 fd90 	bl	8023f50 <sys_now>
 8022430:	4602      	mov	r2, r0
 8022432:	4b05      	ldr	r3, [pc, #20]	; (8022448 <sys_timeouts_init+0x4c>)
 8022434:	601a      	str	r2, [r3, #0]
}
 8022436:	bf00      	nop
 8022438:	3708      	adds	r7, #8
 802243a:	46bd      	mov	sp, r7
 802243c:	bd80      	pop	{r7, pc}
 802243e:	bf00      	nop
 8022440:	0802e664 	.word	0x0802e664
 8022444:	080223d1 	.word	0x080223d1
 8022448:	2000952c 	.word	0x2000952c

0802244c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 802244c:	b580      	push	{r7, lr}
 802244e:	b088      	sub	sp, #32
 8022450:	af00      	add	r7, sp, #0
 8022452:	60f8      	str	r0, [r7, #12]
 8022454:	60b9      	str	r1, [r7, #8]
 8022456:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8022458:	2009      	movs	r0, #9
 802245a:	f7f9 fd2d 	bl	801beb8 <memp_malloc>
 802245e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8022460:	697b      	ldr	r3, [r7, #20]
 8022462:	2b00      	cmp	r3, #0
 8022464:	d10a      	bne.n	802247c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8022466:	697b      	ldr	r3, [r7, #20]
 8022468:	2b00      	cmp	r3, #0
 802246a:	f040 8084 	bne.w	8022576 <sys_timeout+0x12a>
 802246e:	4b44      	ldr	r3, [pc, #272]	; (8022580 <sys_timeout+0x134>)
 8022470:	22d4      	movs	r2, #212	; 0xd4
 8022472:	4944      	ldr	r1, [pc, #272]	; (8022584 <sys_timeout+0x138>)
 8022474:	4844      	ldr	r0, [pc, #272]	; (8022588 <sys_timeout+0x13c>)
 8022476:	f004 ffdb 	bl	8027430 <iprintf>
    return;
 802247a:	e07c      	b.n	8022576 <sys_timeout+0x12a>
  }

  now = sys_now();
 802247c:	f001 fd68 	bl	8023f50 <sys_now>
 8022480:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8022482:	4b42      	ldr	r3, [pc, #264]	; (802258c <sys_timeout+0x140>)
 8022484:	681b      	ldr	r3, [r3, #0]
 8022486:	2b00      	cmp	r3, #0
 8022488:	d105      	bne.n	8022496 <sys_timeout+0x4a>
    diff = 0;
 802248a:	2300      	movs	r3, #0
 802248c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 802248e:	4a40      	ldr	r2, [pc, #256]	; (8022590 <sys_timeout+0x144>)
 8022490:	693b      	ldr	r3, [r7, #16]
 8022492:	6013      	str	r3, [r2, #0]
 8022494:	e004      	b.n	80224a0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8022496:	4b3e      	ldr	r3, [pc, #248]	; (8022590 <sys_timeout+0x144>)
 8022498:	681b      	ldr	r3, [r3, #0]
 802249a:	693a      	ldr	r2, [r7, #16]
 802249c:	1ad3      	subs	r3, r2, r3
 802249e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 80224a0:	697b      	ldr	r3, [r7, #20]
 80224a2:	2200      	movs	r2, #0
 80224a4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80224a6:	697b      	ldr	r3, [r7, #20]
 80224a8:	68ba      	ldr	r2, [r7, #8]
 80224aa:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80224ac:	697b      	ldr	r3, [r7, #20]
 80224ae:	687a      	ldr	r2, [r7, #4]
 80224b0:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80224b2:	68fa      	ldr	r2, [r7, #12]
 80224b4:	69bb      	ldr	r3, [r7, #24]
 80224b6:	441a      	add	r2, r3
 80224b8:	697b      	ldr	r3, [r7, #20]
 80224ba:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80224bc:	4b33      	ldr	r3, [pc, #204]	; (802258c <sys_timeout+0x140>)
 80224be:	681b      	ldr	r3, [r3, #0]
 80224c0:	2b00      	cmp	r3, #0
 80224c2:	d103      	bne.n	80224cc <sys_timeout+0x80>
    next_timeout = timeout;
 80224c4:	4a31      	ldr	r2, [pc, #196]	; (802258c <sys_timeout+0x140>)
 80224c6:	697b      	ldr	r3, [r7, #20]
 80224c8:	6013      	str	r3, [r2, #0]
    return;
 80224ca:	e055      	b.n	8022578 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80224cc:	4b2f      	ldr	r3, [pc, #188]	; (802258c <sys_timeout+0x140>)
 80224ce:	681b      	ldr	r3, [r3, #0]
 80224d0:	685a      	ldr	r2, [r3, #4]
 80224d2:	68fb      	ldr	r3, [r7, #12]
 80224d4:	429a      	cmp	r2, r3
 80224d6:	d90f      	bls.n	80224f8 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80224d8:	4b2c      	ldr	r3, [pc, #176]	; (802258c <sys_timeout+0x140>)
 80224da:	681b      	ldr	r3, [r3, #0]
 80224dc:	4a2b      	ldr	r2, [pc, #172]	; (802258c <sys_timeout+0x140>)
 80224de:	6812      	ldr	r2, [r2, #0]
 80224e0:	6851      	ldr	r1, [r2, #4]
 80224e2:	68fa      	ldr	r2, [r7, #12]
 80224e4:	1a8a      	subs	r2, r1, r2
 80224e6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80224e8:	4b28      	ldr	r3, [pc, #160]	; (802258c <sys_timeout+0x140>)
 80224ea:	681a      	ldr	r2, [r3, #0]
 80224ec:	697b      	ldr	r3, [r7, #20]
 80224ee:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80224f0:	4a26      	ldr	r2, [pc, #152]	; (802258c <sys_timeout+0x140>)
 80224f2:	697b      	ldr	r3, [r7, #20]
 80224f4:	6013      	str	r3, [r2, #0]
 80224f6:	e03f      	b.n	8022578 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80224f8:	4b24      	ldr	r3, [pc, #144]	; (802258c <sys_timeout+0x140>)
 80224fa:	681b      	ldr	r3, [r3, #0]
 80224fc:	61fb      	str	r3, [r7, #28]
 80224fe:	e036      	b.n	802256e <sys_timeout+0x122>
      timeout->time -= t->time;
 8022500:	697b      	ldr	r3, [r7, #20]
 8022502:	685a      	ldr	r2, [r3, #4]
 8022504:	69fb      	ldr	r3, [r7, #28]
 8022506:	685b      	ldr	r3, [r3, #4]
 8022508:	1ad2      	subs	r2, r2, r3
 802250a:	697b      	ldr	r3, [r7, #20]
 802250c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 802250e:	69fb      	ldr	r3, [r7, #28]
 8022510:	681b      	ldr	r3, [r3, #0]
 8022512:	2b00      	cmp	r3, #0
 8022514:	d006      	beq.n	8022524 <sys_timeout+0xd8>
 8022516:	69fb      	ldr	r3, [r7, #28]
 8022518:	681b      	ldr	r3, [r3, #0]
 802251a:	685a      	ldr	r2, [r3, #4]
 802251c:	697b      	ldr	r3, [r7, #20]
 802251e:	685b      	ldr	r3, [r3, #4]
 8022520:	429a      	cmp	r2, r3
 8022522:	d921      	bls.n	8022568 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8022524:	69fb      	ldr	r3, [r7, #28]
 8022526:	681b      	ldr	r3, [r3, #0]
 8022528:	2b00      	cmp	r3, #0
 802252a:	d009      	beq.n	8022540 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 802252c:	69fb      	ldr	r3, [r7, #28]
 802252e:	681b      	ldr	r3, [r3, #0]
 8022530:	69fa      	ldr	r2, [r7, #28]
 8022532:	6812      	ldr	r2, [r2, #0]
 8022534:	6851      	ldr	r1, [r2, #4]
 8022536:	697a      	ldr	r2, [r7, #20]
 8022538:	6852      	ldr	r2, [r2, #4]
 802253a:	1a8a      	subs	r2, r1, r2
 802253c:	605a      	str	r2, [r3, #4]
 802253e:	e00b      	b.n	8022558 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8022540:	697b      	ldr	r3, [r7, #20]
 8022542:	685a      	ldr	r2, [r3, #4]
 8022544:	68fb      	ldr	r3, [r7, #12]
 8022546:	429a      	cmp	r2, r3
 8022548:	d906      	bls.n	8022558 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 802254a:	4b10      	ldr	r3, [pc, #64]	; (802258c <sys_timeout+0x140>)
 802254c:	681b      	ldr	r3, [r3, #0]
 802254e:	685a      	ldr	r2, [r3, #4]
 8022550:	68fb      	ldr	r3, [r7, #12]
 8022552:	441a      	add	r2, r3
 8022554:	697b      	ldr	r3, [r7, #20]
 8022556:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8022558:	69fb      	ldr	r3, [r7, #28]
 802255a:	681a      	ldr	r2, [r3, #0]
 802255c:	697b      	ldr	r3, [r7, #20]
 802255e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8022560:	69fb      	ldr	r3, [r7, #28]
 8022562:	697a      	ldr	r2, [r7, #20]
 8022564:	601a      	str	r2, [r3, #0]
        break;
 8022566:	e007      	b.n	8022578 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8022568:	69fb      	ldr	r3, [r7, #28]
 802256a:	681b      	ldr	r3, [r3, #0]
 802256c:	61fb      	str	r3, [r7, #28]
 802256e:	69fb      	ldr	r3, [r7, #28]
 8022570:	2b00      	cmp	r3, #0
 8022572:	d1c5      	bne.n	8022500 <sys_timeout+0xb4>
 8022574:	e000      	b.n	8022578 <sys_timeout+0x12c>
    return;
 8022576:	bf00      	nop
      }
    }
  }
}
 8022578:	3720      	adds	r7, #32
 802257a:	46bd      	mov	sp, r7
 802257c:	bd80      	pop	{r7, pc}
 802257e:	bf00      	nop
 8022580:	0802b3c4 	.word	0x0802b3c4
 8022584:	0802b3f8 	.word	0x0802b3f8
 8022588:	0802b438 	.word	0x0802b438
 802258c:	20009528 	.word	0x20009528
 8022590:	2000952c 	.word	0x2000952c

08022594 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8022594:	b580      	push	{r7, lr}
 8022596:	b086      	sub	sp, #24
 8022598:	af00      	add	r7, sp, #0
  if (next_timeout) {
 802259a:	4b24      	ldr	r3, [pc, #144]	; (802262c <sys_check_timeouts+0x98>)
 802259c:	681b      	ldr	r3, [r3, #0]
 802259e:	2b00      	cmp	r3, #0
 80225a0:	d03f      	beq.n	8022622 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 80225a2:	f001 fcd5 	bl	8023f50 <sys_now>
 80225a6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 80225a8:	4b21      	ldr	r3, [pc, #132]	; (8022630 <sys_check_timeouts+0x9c>)
 80225aa:	681b      	ldr	r3, [r3, #0]
 80225ac:	68fa      	ldr	r2, [r7, #12]
 80225ae:	1ad3      	subs	r3, r2, r3
 80225b0:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 80225b2:	2300      	movs	r3, #0
 80225b4:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80225b6:	4b1d      	ldr	r3, [pc, #116]	; (802262c <sys_check_timeouts+0x98>)
 80225b8:	681b      	ldr	r3, [r3, #0]
 80225ba:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80225bc:	68bb      	ldr	r3, [r7, #8]
 80225be:	2b00      	cmp	r3, #0
 80225c0:	d02c      	beq.n	802261c <sys_check_timeouts+0x88>
 80225c2:	68bb      	ldr	r3, [r7, #8]
 80225c4:	685a      	ldr	r2, [r3, #4]
 80225c6:	697b      	ldr	r3, [r7, #20]
 80225c8:	429a      	cmp	r2, r3
 80225ca:	d827      	bhi.n	802261c <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 80225cc:	2301      	movs	r3, #1
 80225ce:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80225d0:	68bb      	ldr	r3, [r7, #8]
 80225d2:	685a      	ldr	r2, [r3, #4]
 80225d4:	4b16      	ldr	r3, [pc, #88]	; (8022630 <sys_check_timeouts+0x9c>)
 80225d6:	681b      	ldr	r3, [r3, #0]
 80225d8:	4413      	add	r3, r2
 80225da:	4a15      	ldr	r2, [pc, #84]	; (8022630 <sys_check_timeouts+0x9c>)
 80225dc:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 80225de:	68bb      	ldr	r3, [r7, #8]
 80225e0:	685b      	ldr	r3, [r3, #4]
 80225e2:	697a      	ldr	r2, [r7, #20]
 80225e4:	1ad3      	subs	r3, r2, r3
 80225e6:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 80225e8:	68bb      	ldr	r3, [r7, #8]
 80225ea:	681b      	ldr	r3, [r3, #0]
 80225ec:	4a0f      	ldr	r2, [pc, #60]	; (802262c <sys_check_timeouts+0x98>)
 80225ee:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 80225f0:	68bb      	ldr	r3, [r7, #8]
 80225f2:	689b      	ldr	r3, [r3, #8]
 80225f4:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 80225f6:	68bb      	ldr	r3, [r7, #8]
 80225f8:	68db      	ldr	r3, [r3, #12]
 80225fa:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80225fc:	68b9      	ldr	r1, [r7, #8]
 80225fe:	2009      	movs	r0, #9
 8022600:	f7f9 fcac 	bl	801bf5c <memp_free>
        if (handler != NULL) {
 8022604:	687b      	ldr	r3, [r7, #4]
 8022606:	2b00      	cmp	r3, #0
 8022608:	d008      	beq.n	802261c <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 802260a:	480a      	ldr	r0, [pc, #40]	; (8022634 <sys_check_timeouts+0xa0>)
 802260c:	f000 fad2 	bl	8022bb4 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	6838      	ldr	r0, [r7, #0]
 8022614:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8022616:	4807      	ldr	r0, [pc, #28]	; (8022634 <sys_check_timeouts+0xa0>)
 8022618:	f000 fadb 	bl	8022bd2 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 802261c:	7cfb      	ldrb	r3, [r7, #19]
 802261e:	2b00      	cmp	r3, #0
 8022620:	d1c7      	bne.n	80225b2 <sys_check_timeouts+0x1e>
  }
}
 8022622:	bf00      	nop
 8022624:	3718      	adds	r7, #24
 8022626:	46bd      	mov	sp, r7
 8022628:	bd80      	pop	{r7, pc}
 802262a:	bf00      	nop
 802262c:	20009528 	.word	0x20009528
 8022630:	2000952c 	.word	0x2000952c
 8022634:	2000a274 	.word	0x2000a274

08022638 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8022638:	b580      	push	{r7, lr}
 802263a:	b082      	sub	sp, #8
 802263c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 802263e:	4b0f      	ldr	r3, [pc, #60]	; (802267c <sys_timeouts_sleeptime+0x44>)
 8022640:	681b      	ldr	r3, [r3, #0]
 8022642:	2b00      	cmp	r3, #0
 8022644:	d102      	bne.n	802264c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8022646:	f04f 33ff 	mov.w	r3, #4294967295
 802264a:	e013      	b.n	8022674 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 802264c:	f001 fc80 	bl	8023f50 <sys_now>
 8022650:	4602      	mov	r2, r0
 8022652:	4b0b      	ldr	r3, [pc, #44]	; (8022680 <sys_timeouts_sleeptime+0x48>)
 8022654:	681b      	ldr	r3, [r3, #0]
 8022656:	1ad3      	subs	r3, r2, r3
 8022658:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 802265a:	4b08      	ldr	r3, [pc, #32]	; (802267c <sys_timeouts_sleeptime+0x44>)
 802265c:	681b      	ldr	r3, [r3, #0]
 802265e:	685a      	ldr	r2, [r3, #4]
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	429a      	cmp	r2, r3
 8022664:	d201      	bcs.n	802266a <sys_timeouts_sleeptime+0x32>
    return 0;
 8022666:	2300      	movs	r3, #0
 8022668:	e004      	b.n	8022674 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 802266a:	4b04      	ldr	r3, [pc, #16]	; (802267c <sys_timeouts_sleeptime+0x44>)
 802266c:	681b      	ldr	r3, [r3, #0]
 802266e:	685a      	ldr	r2, [r3, #4]
 8022670:	687b      	ldr	r3, [r7, #4]
 8022672:	1ad3      	subs	r3, r2, r3
  }
}
 8022674:	4618      	mov	r0, r3
 8022676:	3708      	adds	r7, #8
 8022678:	46bd      	mov	sp, r7
 802267a:	bd80      	pop	{r7, pc}
 802267c:	20009528 	.word	0x20009528
 8022680:	2000952c 	.word	0x2000952c

08022684 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8022684:	b580      	push	{r7, lr}
 8022686:	b084      	sub	sp, #16
 8022688:	af00      	add	r7, sp, #0
 802268a:	6078      	str	r0, [r7, #4]
 802268c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 802268e:	4b0f      	ldr	r3, [pc, #60]	; (80226cc <sys_timeouts_mbox_fetch+0x48>)
 8022690:	681b      	ldr	r3, [r3, #0]
 8022692:	2b00      	cmp	r3, #0
 8022694:	d105      	bne.n	80226a2 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8022696:	2200      	movs	r2, #0
 8022698:	6839      	ldr	r1, [r7, #0]
 802269a:	6878      	ldr	r0, [r7, #4]
 802269c:	f000 f955 	bl	802294a <sys_arch_mbox_fetch>
    return;
 80226a0:	e011      	b.n	80226c6 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 80226a2:	f7ff ffc9 	bl	8022638 <sys_timeouts_sleeptime>
 80226a6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80226a8:	68fb      	ldr	r3, [r7, #12]
 80226aa:	2b00      	cmp	r3, #0
 80226ac:	d008      	beq.n	80226c0 <sys_timeouts_mbox_fetch+0x3c>
 80226ae:	68fa      	ldr	r2, [r7, #12]
 80226b0:	6839      	ldr	r1, [r7, #0]
 80226b2:	6878      	ldr	r0, [r7, #4]
 80226b4:	f000 f949 	bl	802294a <sys_arch_mbox_fetch>
 80226b8:	4603      	mov	r3, r0
 80226ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80226be:	d102      	bne.n	80226c6 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80226c0:	f7ff ff68 	bl	8022594 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80226c4:	e7e3      	b.n	802268e <sys_timeouts_mbox_fetch+0xa>
  }
}
 80226c6:	3710      	adds	r7, #16
 80226c8:	46bd      	mov	sp, r7
 80226ca:	bd80      	pop	{r7, pc}
 80226cc:	20009528 	.word	0x20009528

080226d0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80226d0:	b580      	push	{r7, lr}
 80226d2:	b086      	sub	sp, #24
 80226d4:	af00      	add	r7, sp, #0
 80226d6:	6078      	str	r0, [r7, #4]
 80226d8:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80226da:	230e      	movs	r3, #14
 80226dc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	895b      	ldrh	r3, [r3, #10]
 80226e2:	2b0e      	cmp	r3, #14
 80226e4:	d977      	bls.n	80227d6 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80226e6:	687b      	ldr	r3, [r7, #4]
 80226e8:	685b      	ldr	r3, [r3, #4]
 80226ea:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80226ec:	693b      	ldr	r3, [r7, #16]
 80226ee:	7b1a      	ldrb	r2, [r3, #12]
 80226f0:	7b5b      	ldrb	r3, [r3, #13]
 80226f2:	021b      	lsls	r3, r3, #8
 80226f4:	4313      	orrs	r3, r2
 80226f6:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80226f8:	693b      	ldr	r3, [r7, #16]
 80226fa:	781b      	ldrb	r3, [r3, #0]
 80226fc:	f003 0301 	and.w	r3, r3, #1
 8022700:	2b00      	cmp	r3, #0
 8022702:	d023      	beq.n	802274c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8022704:	693b      	ldr	r3, [r7, #16]
 8022706:	781b      	ldrb	r3, [r3, #0]
 8022708:	2b01      	cmp	r3, #1
 802270a:	d10f      	bne.n	802272c <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802270c:	693b      	ldr	r3, [r7, #16]
 802270e:	785b      	ldrb	r3, [r3, #1]
 8022710:	2b00      	cmp	r3, #0
 8022712:	d11b      	bne.n	802274c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8022714:	693b      	ldr	r3, [r7, #16]
 8022716:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022718:	2b5e      	cmp	r3, #94	; 0x5e
 802271a:	d117      	bne.n	802274c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 802271c:	687b      	ldr	r3, [r7, #4]
 802271e:	7b5b      	ldrb	r3, [r3, #13]
 8022720:	f043 0310 	orr.w	r3, r3, #16
 8022724:	b2da      	uxtb	r2, r3
 8022726:	687b      	ldr	r3, [r7, #4]
 8022728:	735a      	strb	r2, [r3, #13]
 802272a:	e00f      	b.n	802274c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 802272c:	693b      	ldr	r3, [r7, #16]
 802272e:	2206      	movs	r2, #6
 8022730:	492f      	ldr	r1, [pc, #188]	; (80227f0 <ethernet_input+0x120>)
 8022732:	4618      	mov	r0, r3
 8022734:	f005 fe8c 	bl	8028450 <memcmp>
 8022738:	4603      	mov	r3, r0
 802273a:	2b00      	cmp	r3, #0
 802273c:	d106      	bne.n	802274c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	7b5b      	ldrb	r3, [r3, #13]
 8022742:	f043 0308 	orr.w	r3, r3, #8
 8022746:	b2da      	uxtb	r2, r3
 8022748:	687b      	ldr	r3, [r7, #4]
 802274a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 802274c:	89fb      	ldrh	r3, [r7, #14]
 802274e:	2b08      	cmp	r3, #8
 8022750:	d003      	beq.n	802275a <ethernet_input+0x8a>
 8022752:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8022756:	d01e      	beq.n	8022796 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8022758:	e042      	b.n	80227e0 <ethernet_input+0x110>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 802275a:	683b      	ldr	r3, [r7, #0]
 802275c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8022760:	f003 0308 	and.w	r3, r3, #8
 8022764:	2b00      	cmp	r3, #0
 8022766:	d038      	beq.n	80227da <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8022768:	687b      	ldr	r3, [r7, #4]
 802276a:	895b      	ldrh	r3, [r3, #10]
 802276c:	461a      	mov	r2, r3
 802276e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022772:	429a      	cmp	r2, r3
 8022774:	db34      	blt.n	80227e0 <ethernet_input+0x110>
 8022776:	8afb      	ldrh	r3, [r7, #22]
 8022778:	425b      	negs	r3, r3
 802277a:	b29b      	uxth	r3, r3
 802277c:	b21b      	sxth	r3, r3
 802277e:	4619      	mov	r1, r3
 8022780:	6878      	ldr	r0, [r7, #4]
 8022782:	f7fa f957 	bl	801ca34 <pbuf_header>
 8022786:	4603      	mov	r3, r0
 8022788:	2b00      	cmp	r3, #0
 802278a:	d129      	bne.n	80227e0 <ethernet_input+0x110>
        ip4_input(p, netif);
 802278c:	6839      	ldr	r1, [r7, #0]
 802278e:	6878      	ldr	r0, [r7, #4]
 8022790:	f7f7 fe92 	bl	801a4b8 <ip4_input>
      break;
 8022794:	e01d      	b.n	80227d2 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022796:	683b      	ldr	r3, [r7, #0]
 8022798:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 802279c:	f003 0308 	and.w	r3, r3, #8
 80227a0:	2b00      	cmp	r3, #0
 80227a2:	d01c      	beq.n	80227de <ethernet_input+0x10e>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	895b      	ldrh	r3, [r3, #10]
 80227a8:	461a      	mov	r2, r3
 80227aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80227ae:	429a      	cmp	r2, r3
 80227b0:	db16      	blt.n	80227e0 <ethernet_input+0x110>
 80227b2:	8afb      	ldrh	r3, [r7, #22]
 80227b4:	425b      	negs	r3, r3
 80227b6:	b29b      	uxth	r3, r3
 80227b8:	b21b      	sxth	r3, r3
 80227ba:	4619      	mov	r1, r3
 80227bc:	6878      	ldr	r0, [r7, #4]
 80227be:	f7fa f939 	bl	801ca34 <pbuf_header>
 80227c2:	4603      	mov	r3, r0
 80227c4:	2b00      	cmp	r3, #0
 80227c6:	d10b      	bne.n	80227e0 <ethernet_input+0x110>
        etharp_input(p, netif);
 80227c8:	6839      	ldr	r1, [r7, #0]
 80227ca:	6878      	ldr	r0, [r7, #4]
 80227cc:	f7f7 f862 	bl	8019894 <etharp_input>
      break;
 80227d0:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80227d2:	2300      	movs	r3, #0
 80227d4:	e008      	b.n	80227e8 <ethernet_input+0x118>
    goto free_and_return;
 80227d6:	bf00      	nop
 80227d8:	e002      	b.n	80227e0 <ethernet_input+0x110>
        goto free_and_return;
 80227da:	bf00      	nop
 80227dc:	e000      	b.n	80227e0 <ethernet_input+0x110>
        goto free_and_return;
 80227de:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80227e0:	6878      	ldr	r0, [r7, #4]
 80227e2:	f7fa f94b 	bl	801ca7c <pbuf_free>
  return ERR_OK;
 80227e6:	2300      	movs	r3, #0
}
 80227e8:	4618      	mov	r0, r3
 80227ea:	3718      	adds	r7, #24
 80227ec:	46bd      	mov	sp, r7
 80227ee:	bd80      	pop	{r7, pc}
 80227f0:	0802e67c 	.word	0x0802e67c

080227f4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80227f4:	b580      	push	{r7, lr}
 80227f6:	b086      	sub	sp, #24
 80227f8:	af00      	add	r7, sp, #0
 80227fa:	60f8      	str	r0, [r7, #12]
 80227fc:	60b9      	str	r1, [r7, #8]
 80227fe:	607a      	str	r2, [r7, #4]
 8022800:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8022802:	8c3b      	ldrh	r3, [r7, #32]
 8022804:	4618      	mov	r0, r3
 8022806:	f7f6 fd0f 	bl	8019228 <lwip_htons>
 802280a:	4603      	mov	r3, r0
 802280c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 802280e:	210e      	movs	r1, #14
 8022810:	68b8      	ldr	r0, [r7, #8]
 8022812:	f7fa f90f 	bl	801ca34 <pbuf_header>
 8022816:	4603      	mov	r3, r0
 8022818:	2b00      	cmp	r3, #0
 802281a:	d125      	bne.n	8022868 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 802281c:	68bb      	ldr	r3, [r7, #8]
 802281e:	685b      	ldr	r3, [r3, #4]
 8022820:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8022822:	693b      	ldr	r3, [r7, #16]
 8022824:	8afa      	ldrh	r2, [r7, #22]
 8022826:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8022828:	693b      	ldr	r3, [r7, #16]
 802282a:	2206      	movs	r2, #6
 802282c:	6839      	ldr	r1, [r7, #0]
 802282e:	4618      	mov	r0, r3
 8022830:	f005 fe1d 	bl	802846e <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8022834:	693b      	ldr	r3, [r7, #16]
 8022836:	3306      	adds	r3, #6
 8022838:	2206      	movs	r2, #6
 802283a:	6879      	ldr	r1, [r7, #4]
 802283c:	4618      	mov	r0, r3
 802283e:	f005 fe16 	bl	802846e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8022842:	68fb      	ldr	r3, [r7, #12]
 8022844:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8022848:	2b06      	cmp	r3, #6
 802284a:	d006      	beq.n	802285a <ethernet_output+0x66>
 802284c:	4b0a      	ldr	r3, [pc, #40]	; (8022878 <ethernet_output+0x84>)
 802284e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8022852:	490a      	ldr	r1, [pc, #40]	; (802287c <ethernet_output+0x88>)
 8022854:	480a      	ldr	r0, [pc, #40]	; (8022880 <ethernet_output+0x8c>)
 8022856:	f004 fdeb 	bl	8027430 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802285a:	68fb      	ldr	r3, [r7, #12]
 802285c:	699b      	ldr	r3, [r3, #24]
 802285e:	68b9      	ldr	r1, [r7, #8]
 8022860:	68f8      	ldr	r0, [r7, #12]
 8022862:	4798      	blx	r3
 8022864:	4603      	mov	r3, r0
 8022866:	e002      	b.n	802286e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8022868:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 802286a:	f06f 0301 	mvn.w	r3, #1
}
 802286e:	4618      	mov	r0, r3
 8022870:	3718      	adds	r7, #24
 8022872:	46bd      	mov	sp, r7
 8022874:	bd80      	pop	{r7, pc}
 8022876:	bf00      	nop
 8022878:	0802b460 	.word	0x0802b460
 802287c:	0802b498 	.word	0x0802b498
 8022880:	0802b4cc 	.word	0x0802b4cc

08022884 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8022884:	b580      	push	{r7, lr}
 8022886:	b086      	sub	sp, #24
 8022888:	af00      	add	r7, sp, #0
 802288a:	6078      	str	r0, [r7, #4]
 802288c:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 802288e:	683b      	ldr	r3, [r7, #0]
 8022890:	60bb      	str	r3, [r7, #8]
 8022892:	2304      	movs	r3, #4
 8022894:	60fb      	str	r3, [r7, #12]
 8022896:	2300      	movs	r3, #0
 8022898:	613b      	str	r3, [r7, #16]
 802289a:	2300      	movs	r3, #0
 802289c:	617b      	str	r3, [r7, #20]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802289e:	f107 0308 	add.w	r3, r7, #8
 80228a2:	2100      	movs	r1, #0
 80228a4:	4618      	mov	r0, r3
 80228a6:	f7f1 ff4a 	bl	801473e <osMessageCreate>
 80228aa:	4602      	mov	r2, r0
 80228ac:	687b      	ldr	r3, [r7, #4]
 80228ae:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 80228b0:	687b      	ldr	r3, [r7, #4]
 80228b2:	681b      	ldr	r3, [r3, #0]
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	d102      	bne.n	80228be <sys_mbox_new+0x3a>
  return ERR_MEM;
 80228b8:	f04f 33ff 	mov.w	r3, #4294967295
 80228bc:	e000      	b.n	80228c0 <sys_mbox_new+0x3c>
 
 return ERR_OK;
 80228be:	2300      	movs	r3, #0
}
 80228c0:	4618      	mov	r0, r3
 80228c2:	3718      	adds	r7, #24
 80228c4:	46bd      	mov	sp, r7
 80228c6:	bd80      	pop	{r7, pc}

080228c8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80228c8:	b580      	push	{r7, lr}
 80228ca:	b082      	sub	sp, #8
 80228cc:	af00      	add	r7, sp, #0
 80228ce:	6078      	str	r0, [r7, #4]
	if( osMessageWaiting(*mbox) )
 80228d0:	687b      	ldr	r3, [r7, #4]
 80228d2:	681b      	ldr	r3, [r3, #0]
 80228d4:	4618      	mov	r0, r3
 80228d6:	f7f2 f80f 	bl	80148f8 <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 80228da:	687b      	ldr	r3, [r7, #4]
 80228dc:	681b      	ldr	r3, [r3, #0]
 80228de:	4618      	mov	r0, r3
 80228e0:	f7f2 f820 	bl	8014924 <osMessageDelete>

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80228e4:	bf00      	nop
 80228e6:	3708      	adds	r7, #8
 80228e8:	46bd      	mov	sp, r7
 80228ea:	bd80      	pop	{r7, pc}

080228ec <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80228ec:	b580      	push	{r7, lr}
 80228ee:	b082      	sub	sp, #8
 80228f0:	af00      	add	r7, sp, #0
 80228f2:	6078      	str	r0, [r7, #4]
 80228f4:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 80228f6:	bf00      	nop
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	681b      	ldr	r3, [r3, #0]
 80228fc:	6839      	ldr	r1, [r7, #0]
 80228fe:	f04f 32ff 	mov.w	r2, #4294967295
 8022902:	4618      	mov	r0, r3
 8022904:	f7f1 ff44 	bl	8014790 <osMessagePut>
 8022908:	4603      	mov	r3, r0
 802290a:	2b00      	cmp	r3, #0
 802290c:	d1f4      	bne.n	80228f8 <sys_mbox_post+0xc>
}
 802290e:	bf00      	nop
 8022910:	3708      	adds	r7, #8
 8022912:	46bd      	mov	sp, r7
 8022914:	bd80      	pop	{r7, pc}

08022916 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022916:	b580      	push	{r7, lr}
 8022918:	b084      	sub	sp, #16
 802291a:	af00      	add	r7, sp, #0
 802291c:	6078      	str	r0, [r7, #4]
 802291e:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	681b      	ldr	r3, [r3, #0]
 8022924:	6839      	ldr	r1, [r7, #0]
 8022926:	2200      	movs	r2, #0
 8022928:	4618      	mov	r0, r3
 802292a:	f7f1 ff31 	bl	8014790 <osMessagePut>
 802292e:	4603      	mov	r3, r0
 8022930:	2b00      	cmp	r3, #0
 8022932:	d102      	bne.n	802293a <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 8022934:	2300      	movs	r3, #0
 8022936:	73fb      	strb	r3, [r7, #15]
 8022938:	e001      	b.n	802293e <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 802293a:	23ff      	movs	r3, #255	; 0xff
 802293c:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 802293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8022942:	4618      	mov	r0, r3
 8022944:	3710      	adds	r7, #16
 8022946:	46bd      	mov	sp, r7
 8022948:	bd80      	pop	{r7, pc}

0802294a <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 802294a:	b580      	push	{r7, lr}
 802294c:	b08c      	sub	sp, #48	; 0x30
 802294e:	af00      	add	r7, sp, #0
 8022950:	61f8      	str	r0, [r7, #28]
 8022952:	61b9      	str	r1, [r7, #24]
 8022954:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 8022956:	f7f1 fd16 	bl	8014386 <osKernelSysTick>
 802295a:	62f8      	str	r0, [r7, #44]	; 0x2c
  
  if(timeout != 0)
 802295c:	697b      	ldr	r3, [r7, #20]
 802295e:	2b00      	cmp	r3, #0
 8022960:	d017      	beq.n	8022992 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 8022962:	69fb      	ldr	r3, [r7, #28]
 8022964:	6819      	ldr	r1, [r3, #0]
 8022966:	f107 0320 	add.w	r3, r7, #32
 802296a:	697a      	ldr	r2, [r7, #20]
 802296c:	4618      	mov	r0, r3
 802296e:	f7f1 ff4f 	bl	8014810 <osMessageGet>
    
    if(event.status == osEventMessage)
 8022972:	6a3b      	ldr	r3, [r7, #32]
 8022974:	2b10      	cmp	r3, #16
 8022976:	d109      	bne.n	802298c <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8022978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802297a:	461a      	mov	r2, r3
 802297c:	69bb      	ldr	r3, [r7, #24]
 802297e:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8022980:	f7f1 fd01 	bl	8014386 <osKernelSysTick>
 8022984:	4602      	mov	r2, r0
 8022986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022988:	1ad3      	subs	r3, r2, r3
 802298a:	e019      	b.n	80229c0 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 802298c:	f04f 33ff 	mov.w	r3, #4294967295
 8022990:	e016      	b.n	80229c0 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 8022992:	69fb      	ldr	r3, [r7, #28]
 8022994:	6819      	ldr	r1, [r3, #0]
 8022996:	463b      	mov	r3, r7
 8022998:	f04f 32ff 	mov.w	r2, #4294967295
 802299c:	4618      	mov	r0, r3
 802299e:	f7f1 ff37 	bl	8014810 <osMessageGet>
 80229a2:	f107 0320 	add.w	r3, r7, #32
 80229a6:	463a      	mov	r2, r7
 80229a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80229aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80229ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229b0:	461a      	mov	r2, r3
 80229b2:	69bb      	ldr	r3, [r7, #24]
 80229b4:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80229b6:	f7f1 fce6 	bl	8014386 <osKernelSysTick>
 80229ba:	4602      	mov	r2, r0
 80229bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80229be:	1ad3      	subs	r3, r2, r3
  }
}
 80229c0:	4618      	mov	r0, r3
 80229c2:	3730      	adds	r7, #48	; 0x30
 80229c4:	46bd      	mov	sp, r7
 80229c6:	bd80      	pop	{r7, pc}

080229c8 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80229c8:	b580      	push	{r7, lr}
 80229ca:	b086      	sub	sp, #24
 80229cc:	af00      	add	r7, sp, #0
 80229ce:	6078      	str	r0, [r7, #4]
 80229d0:	6039      	str	r1, [r7, #0]
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 80229d2:	687b      	ldr	r3, [r7, #4]
 80229d4:	6819      	ldr	r1, [r3, #0]
 80229d6:	f107 030c 	add.w	r3, r7, #12
 80229da:	2200      	movs	r2, #0
 80229dc:	4618      	mov	r0, r3
 80229de:	f7f1 ff17 	bl	8014810 <osMessageGet>
  
  if(event.status == osEventMessage)
 80229e2:	68fb      	ldr	r3, [r7, #12]
 80229e4:	2b10      	cmp	r3, #16
 80229e6:	d105      	bne.n	80229f4 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80229e8:	693b      	ldr	r3, [r7, #16]
 80229ea:	461a      	mov	r2, r3
 80229ec:	683b      	ldr	r3, [r7, #0]
 80229ee:	601a      	str	r2, [r3, #0]
    return ERR_OK;
 80229f0:	2300      	movs	r3, #0
 80229f2:	e001      	b.n	80229f8 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80229f4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80229f8:	4618      	mov	r0, r3
 80229fa:	3718      	adds	r7, #24
 80229fc:	46bd      	mov	sp, r7
 80229fe:	bd80      	pop	{r7, pc}

08022a00 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 8022a00:	b480      	push	{r7}
 8022a02:	b083      	sub	sp, #12
 8022a04:	af00      	add	r7, sp, #0
 8022a06:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 8022a08:	687b      	ldr	r3, [r7, #4]
 8022a0a:	681b      	ldr	r3, [r3, #0]
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	d101      	bne.n	8022a14 <sys_mbox_valid+0x14>
    return 0;
 8022a10:	2300      	movs	r3, #0
 8022a12:	e000      	b.n	8022a16 <sys_mbox_valid+0x16>
  else
    return 1;
 8022a14:	2301      	movs	r3, #1
}                                             
 8022a16:	4618      	mov	r0, r3
 8022a18:	370c      	adds	r7, #12
 8022a1a:	46bd      	mov	sp, r7
 8022a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a20:	4770      	bx	lr

08022a22 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
 8022a22:	b480      	push	{r7}
 8022a24:	b083      	sub	sp, #12
 8022a26:	af00      	add	r7, sp, #0
 8022a28:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;                      
 8022a2a:	687b      	ldr	r3, [r7, #4]
 8022a2c:	2200      	movs	r2, #0
 8022a2e:	601a      	str	r2, [r3, #0]
}                                             
 8022a30:	bf00      	nop
 8022a32:	370c      	adds	r7, #12
 8022a34:	46bd      	mov	sp, r7
 8022a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a3a:	4770      	bx	lr

08022a3c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8022a3c:	b580      	push	{r7, lr}
 8022a3e:	b084      	sub	sp, #16
 8022a40:	af00      	add	r7, sp, #0
 8022a42:	6078      	str	r0, [r7, #4]
 8022a44:	460b      	mov	r3, r1
 8022a46:	70fb      	strb	r3, [r7, #3]
  osSemaphoreDef(SEM);
 8022a48:	2300      	movs	r3, #0
 8022a4a:	60bb      	str	r3, [r7, #8]
 8022a4c:	2300      	movs	r3, #0
 8022a4e:	60fb      	str	r3, [r7, #12]

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8022a50:	f107 0308 	add.w	r3, r7, #8
 8022a54:	2101      	movs	r1, #1
 8022a56:	4618      	mov	r0, r3
 8022a58:	f7f1 fda4 	bl	80145a4 <osSemaphoreCreate>
 8022a5c:	4602      	mov	r2, r0
 8022a5e:	687b      	ldr	r3, [r7, #4]
 8022a60:	601a      	str	r2, [r3, #0]
	
  if(*sem == NULL)
 8022a62:	687b      	ldr	r3, [r7, #4]
 8022a64:	681b      	ldr	r3, [r3, #0]
 8022a66:	2b00      	cmp	r3, #0
 8022a68:	d102      	bne.n	8022a70 <sys_sem_new+0x34>
  {
#if SYS_STATS
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
 8022a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8022a6e:	e009      	b.n	8022a84 <sys_sem_new+0x48>
  }
	
  if(count == 0)	// Means it can't be taken
 8022a70:	78fb      	ldrb	r3, [r7, #3]
 8022a72:	2b00      	cmp	r3, #0
 8022a74:	d105      	bne.n	8022a82 <sys_sem_new+0x46>
  {
    osSemaphoreWait(*sem,0);
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	681b      	ldr	r3, [r3, #0]
 8022a7a:	2100      	movs	r1, #0
 8022a7c:	4618      	mov	r0, r3
 8022a7e:	f7f1 fdc5 	bl	801460c <osSemaphoreWait>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 8022a82:	2300      	movs	r3, #0
}
 8022a84:	4618      	mov	r0, r3
 8022a86:	3710      	adds	r7, #16
 8022a88:	46bd      	mov	sp, r7
 8022a8a:	bd80      	pop	{r7, pc}

08022a8c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8022a8c:	b580      	push	{r7, lr}
 8022a8e:	b084      	sub	sp, #16
 8022a90:	af00      	add	r7, sp, #0
 8022a92:	6078      	str	r0, [r7, #4]
 8022a94:	6039      	str	r1, [r7, #0]
  uint32_t starttime = osKernelSysTick();
 8022a96:	f7f1 fc76 	bl	8014386 <osKernelSysTick>
 8022a9a:	60f8      	str	r0, [r7, #12]
  
  if(timeout != 0)
 8022a9c:	683b      	ldr	r3, [r7, #0]
 8022a9e:	2b00      	cmp	r3, #0
 8022aa0:	d011      	beq.n	8022ac6 <sys_arch_sem_wait+0x3a>
  {    
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8022aa2:	687b      	ldr	r3, [r7, #4]
 8022aa4:	681b      	ldr	r3, [r3, #0]
 8022aa6:	6839      	ldr	r1, [r7, #0]
 8022aa8:	4618      	mov	r0, r3
 8022aaa:	f7f1 fdaf 	bl	801460c <osSemaphoreWait>
 8022aae:	4603      	mov	r3, r0
 8022ab0:	2b00      	cmp	r3, #0
 8022ab2:	d105      	bne.n	8022ac0 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8022ab4:	f7f1 fc67 	bl	8014386 <osKernelSysTick>
 8022ab8:	4602      	mov	r2, r0
 8022aba:	68fb      	ldr	r3, [r7, #12]
 8022abc:	1ad3      	subs	r3, r2, r3
 8022abe:	e012      	b.n	8022ae6 <sys_arch_sem_wait+0x5a>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8022ac4:	e00f      	b.n	8022ae6 <sys_arch_sem_wait+0x5a>
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8022ac6:	bf00      	nop
 8022ac8:	687b      	ldr	r3, [r7, #4]
 8022aca:	681b      	ldr	r3, [r3, #0]
 8022acc:	f04f 31ff 	mov.w	r1, #4294967295
 8022ad0:	4618      	mov	r0, r3
 8022ad2:	f7f1 fd9b 	bl	801460c <osSemaphoreWait>
 8022ad6:	4603      	mov	r3, r0
 8022ad8:	2b00      	cmp	r3, #0
 8022ada:	d1f5      	bne.n	8022ac8 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8022adc:	f7f1 fc53 	bl	8014386 <osKernelSysTick>
 8022ae0:	4602      	mov	r2, r0
 8022ae2:	68fb      	ldr	r3, [r7, #12]
 8022ae4:	1ad3      	subs	r3, r2, r3
  }
}
 8022ae6:	4618      	mov	r0, r3
 8022ae8:	3710      	adds	r7, #16
 8022aea:	46bd      	mov	sp, r7
 8022aec:	bd80      	pop	{r7, pc}

08022aee <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8022aee:	b580      	push	{r7, lr}
 8022af0:	b082      	sub	sp, #8
 8022af2:	af00      	add	r7, sp, #0
 8022af4:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8022af6:	687b      	ldr	r3, [r7, #4]
 8022af8:	681b      	ldr	r3, [r3, #0]
 8022afa:	4618      	mov	r0, r3
 8022afc:	f7f1 fdd6 	bl	80146ac <osSemaphoreRelease>
}
 8022b00:	bf00      	nop
 8022b02:	3708      	adds	r7, #8
 8022b04:	46bd      	mov	sp, r7
 8022b06:	bd80      	pop	{r7, pc}

08022b08 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8022b08:	b580      	push	{r7, lr}
 8022b0a:	b082      	sub	sp, #8
 8022b0c:	af00      	add	r7, sp, #0
 8022b0e:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	681b      	ldr	r3, [r3, #0]
 8022b14:	4618      	mov	r0, r3
 8022b16:	f7f1 fdff 	bl	8014718 <osSemaphoreDelete>
}
 8022b1a:	bf00      	nop
 8022b1c:	3708      	adds	r7, #8
 8022b1e:	46bd      	mov	sp, r7
 8022b20:	bd80      	pop	{r7, pc}

08022b22 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
 8022b22:	b480      	push	{r7}
 8022b24:	b083      	sub	sp, #12
 8022b26:	af00      	add	r7, sp, #0
 8022b28:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8022b2a:	687b      	ldr	r3, [r7, #4]
 8022b2c:	681b      	ldr	r3, [r3, #0]
 8022b2e:	2b00      	cmp	r3, #0
 8022b30:	d101      	bne.n	8022b36 <sys_sem_valid+0x14>
    return 0;
 8022b32:	2300      	movs	r3, #0
 8022b34:	e000      	b.n	8022b38 <sys_sem_valid+0x16>
  else
    return 1;                                       
 8022b36:	2301      	movs	r3, #1
}
 8022b38:	4618      	mov	r0, r3
 8022b3a:	370c      	adds	r7, #12
 8022b3c:	46bd      	mov	sp, r7
 8022b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b42:	4770      	bx	lr

08022b44 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
 8022b44:	b480      	push	{r7}
 8022b46:	b083      	sub	sp, #12
 8022b48:	af00      	add	r7, sp, #0
 8022b4a:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;                                                          
 8022b4c:	687b      	ldr	r3, [r7, #4]
 8022b4e:	2200      	movs	r2, #0
 8022b50:	601a      	str	r2, [r3, #0]
} 
 8022b52:	bf00      	nop
 8022b54:	370c      	adds	r7, #12
 8022b56:	46bd      	mov	sp, r7
 8022b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b5c:	4770      	bx	lr
	...

08022b60 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 8022b60:	b580      	push	{r7, lr}
 8022b62:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8022b64:	4803      	ldr	r0, [pc, #12]	; (8022b74 <sys_init+0x14>)
 8022b66:	f7f1 fc7e 	bl	8014466 <osMutexCreate>
 8022b6a:	4602      	mov	r2, r0
 8022b6c:	4b02      	ldr	r3, [pc, #8]	; (8022b78 <sys_init+0x18>)
 8022b6e:	601a      	str	r2, [r3, #0]
}
 8022b70:	bf00      	nop
 8022b72:	bd80      	pop	{r7, pc}
 8022b74:	0802e68c 	.word	0x0802e68c
 8022b78:	2000ecf8 	.word	0x2000ecf8

08022b7c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8022b7c:	b580      	push	{r7, lr}
 8022b7e:	b084      	sub	sp, #16
 8022b80:	af00      	add	r7, sp, #0
 8022b82:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 8022b84:	2300      	movs	r3, #0
 8022b86:	60bb      	str	r3, [r7, #8]
 8022b88:	2300      	movs	r3, #0
 8022b8a:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 8022b8c:	f107 0308 	add.w	r3, r7, #8
 8022b90:	4618      	mov	r0, r3
 8022b92:	f7f1 fc68 	bl	8014466 <osMutexCreate>
 8022b96:	4602      	mov	r2, r0
 8022b98:	687b      	ldr	r3, [r7, #4]
 8022b9a:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 8022b9c:	687b      	ldr	r3, [r7, #4]
 8022b9e:	681b      	ldr	r3, [r3, #0]
 8022ba0:	2b00      	cmp	r3, #0
 8022ba2:	d102      	bne.n	8022baa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 8022ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8022ba8:	e000      	b.n	8022bac <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8022baa:	2300      	movs	r3, #0
}
 8022bac:	4618      	mov	r0, r3
 8022bae:	3710      	adds	r7, #16
 8022bb0:	46bd      	mov	sp, r7
 8022bb2:	bd80      	pop	{r7, pc}

08022bb4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8022bb4:	b580      	push	{r7, lr}
 8022bb6:	b082      	sub	sp, #8
 8022bb8:	af00      	add	r7, sp, #0
 8022bba:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 8022bbc:	687b      	ldr	r3, [r7, #4]
 8022bbe:	681b      	ldr	r3, [r3, #0]
 8022bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8022bc4:	4618      	mov	r0, r3
 8022bc6:	f7f1 fc67 	bl	8014498 <osMutexWait>
}
 8022bca:	bf00      	nop
 8022bcc:	3708      	adds	r7, #8
 8022bce:	46bd      	mov	sp, r7
 8022bd0:	bd80      	pop	{r7, pc}

08022bd2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8022bd2:	b580      	push	{r7, lr}
 8022bd4:	b082      	sub	sp, #8
 8022bd6:	af00      	add	r7, sp, #0
 8022bd8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8022bda:	687b      	ldr	r3, [r7, #4]
 8022bdc:	681b      	ldr	r3, [r3, #0]
 8022bde:	4618      	mov	r0, r3
 8022be0:	f7f1 fcaa 	bl	8014538 <osMutexRelease>
}
 8022be4:	bf00      	nop
 8022be6:	3708      	adds	r7, #8
 8022be8:	46bd      	mov	sp, r7
 8022bea:	bd80      	pop	{r7, pc}

08022bec <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8022bec:	b580      	push	{r7, lr}
 8022bee:	b08c      	sub	sp, #48	; 0x30
 8022bf0:	af00      	add	r7, sp, #0
 8022bf2:	60f8      	str	r0, [r7, #12]
 8022bf4:	60b9      	str	r1, [r7, #8]
 8022bf6:	607a      	str	r2, [r7, #4]
 8022bf8:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8022bfa:	f107 0314 	add.w	r3, r7, #20
 8022bfe:	2200      	movs	r2, #0
 8022c00:	601a      	str	r2, [r3, #0]
 8022c02:	605a      	str	r2, [r3, #4]
 8022c04:	609a      	str	r2, [r3, #8]
 8022c06:	60da      	str	r2, [r3, #12]
 8022c08:	611a      	str	r2, [r3, #16]
 8022c0a:	615a      	str	r2, [r3, #20]
 8022c0c:	619a      	str	r2, [r3, #24]
 8022c0e:	68fb      	ldr	r3, [r7, #12]
 8022c10:	617b      	str	r3, [r7, #20]
 8022c12:	68bb      	ldr	r3, [r7, #8]
 8022c14:	61bb      	str	r3, [r7, #24]
 8022c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022c18:	b21b      	sxth	r3, r3
 8022c1a:	83bb      	strh	r3, [r7, #28]
 8022c1c:	683b      	ldr	r3, [r7, #0]
 8022c1e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8022c20:	f107 0314 	add.w	r3, r7, #20
 8022c24:	6879      	ldr	r1, [r7, #4]
 8022c26:	4618      	mov	r0, r3
 8022c28:	f7f1 fbbd 	bl	80143a6 <osThreadCreate>
 8022c2c:	4603      	mov	r3, r0
}
 8022c2e:	4618      	mov	r0, r3
 8022c30:	3730      	adds	r7, #48	; 0x30
 8022c32:	46bd      	mov	sp, r7
 8022c34:	bd80      	pop	{r7, pc}
	...

08022c38 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8022c38:	b580      	push	{r7, lr}
 8022c3a:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8022c3c:	4b04      	ldr	r3, [pc, #16]	; (8022c50 <sys_arch_protect+0x18>)
 8022c3e:	681b      	ldr	r3, [r3, #0]
 8022c40:	f04f 31ff 	mov.w	r1, #4294967295
 8022c44:	4618      	mov	r0, r3
 8022c46:	f7f1 fc27 	bl	8014498 <osMutexWait>
  return (sys_prot_t)1;
 8022c4a:	2301      	movs	r3, #1
}
 8022c4c:	4618      	mov	r0, r3
 8022c4e:	bd80      	pop	{r7, pc}
 8022c50:	2000ecf8 	.word	0x2000ecf8

08022c54 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8022c54:	b580      	push	{r7, lr}
 8022c56:	b082      	sub	sp, #8
 8022c58:	af00      	add	r7, sp, #0
 8022c5a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8022c5c:	4b04      	ldr	r3, [pc, #16]	; (8022c70 <sys_arch_unprotect+0x1c>)
 8022c5e:	681b      	ldr	r3, [r3, #0]
 8022c60:	4618      	mov	r0, r3
 8022c62:	f7f1 fc69 	bl	8014538 <osMutexRelease>
}
 8022c66:	bf00      	nop
 8022c68:	3708      	adds	r7, #8
 8022c6a:	46bd      	mov	sp, r7
 8022c6c:	bd80      	pop	{r7, pc}
 8022c6e:	bf00      	nop
 8022c70:	2000ecf8 	.word	0x2000ecf8

08022c74 <is_exp_of_2>:
#include "circbuff.h"

/*Checks if argument is power of 2 --------------------------------------- */

static uint8_t is_exp_of_2(uint32_t n)
{
 8022c74:	b480      	push	{r7}
 8022c76:	b083      	sub	sp, #12
 8022c78:	af00      	add	r7, sp, #0
 8022c7a:	6078      	str	r0, [r7, #4]
    return ( n & (n - 1) ) == 0;
 8022c7c:	687b      	ldr	r3, [r7, #4]
 8022c7e:	1e5a      	subs	r2, r3, #1
 8022c80:	687b      	ldr	r3, [r7, #4]
 8022c82:	4013      	ands	r3, r2
 8022c84:	2b00      	cmp	r3, #0
 8022c86:	bf0c      	ite	eq
 8022c88:	2301      	moveq	r3, #1
 8022c8a:	2300      	movne	r3, #0
 8022c8c:	b2db      	uxtb	r3, r3
}
 8022c8e:	4618      	mov	r0, r3
 8022c90:	370c      	adds	r7, #12
 8022c92:	46bd      	mov	sp, r7
 8022c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c98:	4770      	bx	lr

08022c9a <CB_Init>:

/* Circular buffer initiation function ----------------------------------- */

error_t CB_Init(circbuff *cb, uint32_t buf_size) {
 8022c9a:	b580      	push	{r7, lr}
 8022c9c:	b082      	sub	sp, #8
 8022c9e:	af00      	add	r7, sp, #0
 8022ca0:	6078      	str	r0, [r7, #4]
 8022ca2:	6039      	str	r1, [r7, #0]
	if (!is_exp_of_2(buf_size)) return SIZE_ERR;
 8022ca4:	6838      	ldr	r0, [r7, #0]
 8022ca6:	f7ff ffe5 	bl	8022c74 <is_exp_of_2>
 8022caa:	4603      	mov	r3, r0
 8022cac:	2b00      	cmp	r3, #0
 8022cae:	d101      	bne.n	8022cb4 <CB_Init+0x1a>
 8022cb0:	2304      	movs	r3, #4
 8022cb2:	e015      	b.n	8022ce0 <CB_Init+0x46>
						/* return error if buffer size is not power of 2 */
	cb->size = buf_size;
 8022cb4:	687b      	ldr	r3, [r7, #4]
 8022cb6:	683a      	ldr	r2, [r7, #0]
 8022cb8:	605a      	str	r2, [r3, #4]
	cb->read_pos = 0;
 8022cba:	687b      	ldr	r3, [r7, #4]
 8022cbc:	2200      	movs	r2, #0
 8022cbe:	609a      	str	r2, [r3, #8]
	cb->write_pos = 0;
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	2200      	movs	r2, #0
 8022cc4:	60da      	str	r2, [r3, #12]
	cb->buf = (uint8_t*) pvPortMalloc(buf_size * sizeof(uint8_t));
 8022cc6:	6838      	ldr	r0, [r7, #0]
 8022cc8:	f7f2 f90a 	bl	8014ee0 <pvPortMalloc>
 8022ccc:	4602      	mov	r2, r0
 8022cce:	687b      	ldr	r3, [r7, #4]
 8022cd0:	601a      	str	r2, [r3, #0]
	if (cb->buf == NULL) {
 8022cd2:	687b      	ldr	r3, [r7, #4]
 8022cd4:	681b      	ldr	r3, [r3, #0]
 8022cd6:	2b00      	cmp	r3, #0
 8022cd8:	d101      	bne.n	8022cde <CB_Init+0x44>
		return MEM_ERR;
 8022cda:	2301      	movs	r3, #1
 8022cdc:	e000      	b.n	8022ce0 <CB_Init+0x46>
	}
	return NO_ERR;
 8022cde:	2300      	movs	r3, #0
}
 8022ce0:	4618      	mov	r0, r3
 8022ce2:	3708      	adds	r7, #8
 8022ce4:	46bd      	mov	sp, r7
 8022ce6:	bd80      	pop	{r7, pc}

08022ce8 <CB_Data_Length>:

/* Returns length of data in buffer ---------------------------------------*/

uint32_t CB_Data_Length(circbuff *cb) {
 8022ce8:	b480      	push	{r7}
 8022cea:	b083      	sub	sp, #12
 8022cec:	af00      	add	r7, sp, #0
 8022cee:	6078      	str	r0, [r7, #4]
	return ((cb->write_pos - cb->read_pos) & (cb->size - 1));
 8022cf0:	687b      	ldr	r3, [r7, #4]
 8022cf2:	68da      	ldr	r2, [r3, #12]
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	689b      	ldr	r3, [r3, #8]
 8022cf8:	1ad2      	subs	r2, r2, r3
 8022cfa:	687b      	ldr	r3, [r7, #4]
 8022cfc:	685b      	ldr	r3, [r3, #4]
 8022cfe:	3b01      	subs	r3, #1
 8022d00:	4013      	ands	r3, r2
}
 8022d02:	4618      	mov	r0, r3
 8022d04:	370c      	adds	r7, #12
 8022d06:	46bd      	mov	sp, r7
 8022d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d0c:	4770      	bx	lr

08022d0e <CB_Write>:

/* Write new element to buffer --------------------------------------------*/

error_t CB_Write(circbuff *cb, uint8_t item){
 8022d0e:	b580      	push	{r7, lr}
 8022d10:	b082      	sub	sp, #8
 8022d12:	af00      	add	r7, sp, #0
 8022d14:	6078      	str	r0, [r7, #4]
 8022d16:	460b      	mov	r3, r1
 8022d18:	70fb      	strb	r3, [r7, #3]
	if (CB_Data_Length(cb) >= (cb->size - 1)){
 8022d1a:	6878      	ldr	r0, [r7, #4]
 8022d1c:	f7ff ffe4 	bl	8022ce8 <CB_Data_Length>
 8022d20:	4602      	mov	r2, r0
 8022d22:	687b      	ldr	r3, [r7, #4]
 8022d24:	685b      	ldr	r3, [r3, #4]
 8022d26:	3b01      	subs	r3, #1
 8022d28:	429a      	cmp	r2, r3
 8022d2a:	d301      	bcc.n	8022d30 <CB_Write+0x22>
		return FULL_ERR;
 8022d2c:	2303      	movs	r3, #3
 8022d2e:	e010      	b.n	8022d52 <CB_Write+0x44>
	}
	cb->buf[cb->write_pos] = item;
 8022d30:	687b      	ldr	r3, [r7, #4]
 8022d32:	681a      	ldr	r2, [r3, #0]
 8022d34:	687b      	ldr	r3, [r7, #4]
 8022d36:	68db      	ldr	r3, [r3, #12]
 8022d38:	4413      	add	r3, r2
 8022d3a:	78fa      	ldrb	r2, [r7, #3]
 8022d3c:	701a      	strb	r2, [r3, #0]
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
 8022d3e:	687b      	ldr	r3, [r7, #4]
 8022d40:	68db      	ldr	r3, [r3, #12]
 8022d42:	1c5a      	adds	r2, r3, #1
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	685b      	ldr	r3, [r3, #4]
 8022d48:	3b01      	subs	r3, #1
 8022d4a:	401a      	ands	r2, r3
 8022d4c:	687b      	ldr	r3, [r7, #4]
 8022d4e:	60da      	str	r2, [r3, #12]
	return NO_ERR;
 8022d50:	2300      	movs	r3, #0
}
 8022d52:	4618      	mov	r0, r3
 8022d54:	3708      	adds	r7, #8
 8022d56:	46bd      	mov	sp, r7
 8022d58:	bd80      	pop	{r7, pc}

08022d5a <CB_Read>:

/* Read element from buffer -----------------------------------------------*/

error_t CB_Read(circbuff *cb, uint8_t * item){
 8022d5a:	b580      	push	{r7, lr}
 8022d5c:	b082      	sub	sp, #8
 8022d5e:	af00      	add	r7, sp, #0
 8022d60:	6078      	str	r0, [r7, #4]
 8022d62:	6039      	str	r1, [r7, #0]
	if (CB_Data_Length(cb) == 0){
 8022d64:	6878      	ldr	r0, [r7, #4]
 8022d66:	f7ff ffbf 	bl	8022ce8 <CB_Data_Length>
 8022d6a:	4603      	mov	r3, r0
 8022d6c:	2b00      	cmp	r3, #0
 8022d6e:	d101      	bne.n	8022d74 <CB_Read+0x1a>
		return EMPTY_ERR;
 8022d70:	2302      	movs	r3, #2
 8022d72:	e011      	b.n	8022d98 <CB_Read+0x3e>
	}
	*item = cb->buf[cb->read_pos];
 8022d74:	687b      	ldr	r3, [r7, #4]
 8022d76:	681a      	ldr	r2, [r3, #0]
 8022d78:	687b      	ldr	r3, [r7, #4]
 8022d7a:	689b      	ldr	r3, [r3, #8]
 8022d7c:	4413      	add	r3, r2
 8022d7e:	781a      	ldrb	r2, [r3, #0]
 8022d80:	683b      	ldr	r3, [r7, #0]
 8022d82:	701a      	strb	r2, [r3, #0]
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
 8022d84:	687b      	ldr	r3, [r7, #4]
 8022d86:	689b      	ldr	r3, [r3, #8]
 8022d88:	1c5a      	adds	r2, r3, #1
 8022d8a:	687b      	ldr	r3, [r7, #4]
 8022d8c:	685b      	ldr	r3, [r3, #4]
 8022d8e:	3b01      	subs	r3, #1
 8022d90:	401a      	ands	r2, r3
 8022d92:	687b      	ldr	r3, [r7, #4]
 8022d94:	609a      	str	r2, [r3, #8]
	return NO_ERR;
 8022d96:	2300      	movs	r3, #0
}
 8022d98:	4618      	mov	r0, r3
 8022d9a:	3708      	adds	r7, #8
 8022d9c:	46bd      	mov	sp, r7
 8022d9e:	bd80      	pop	{r7, pc}

08022da0 <FlashInit>:
SN_LS_ADDR,
MAC_02_01_ADDR,
MAC_04_03_ADDR,
MAC_06_05_ADDR };

void FlashInit() {
 8022da0:	b580      	push	{r7, lr}
 8022da2:	b082      	sub	sp, #8
 8022da4:	af00      	add	r7, sp, #0

	uint16_t mem_key;
	EE_ReadVariable(MEM_KEY_ADDR, &mem_key); /* Memory key reading */
 8022da6:	1dbb      	adds	r3, r7, #6
 8022da8:	4619      	mov	r1, r3
 8022daa:	2000      	movs	r0, #0
 8022dac:	f000 fbc0 	bl	8023530 <EE_ReadVariable>
	if (mem_key != MEMORY_KEY) { /* First launching of device */
 8022db0:	88fb      	ldrh	r3, [r7, #6]
 8022db2:	f64b 62af 	movw	r2, #48815	; 0xbeaf
 8022db6:	4293      	cmp	r3, r2
 8022db8:	d049      	beq.n	8022e4e <FlashInit+0xae>
		/* Default FLASH initialization --------------------- */
		EE_WriteVariable(MEM_KEY_ADDR, MEMORY_KEY);
 8022dba:	f64b 61af 	movw	r1, #48815	; 0xbeaf
 8022dbe:	2000      	movs	r0, #0
 8022dc0:	f000 fc00 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(IP_02_01_ADDR, DEFAULT_IP_02_01);
 8022dc4:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 8022dc8:	2001      	movs	r0, #1
 8022dca:	f000 fbfb 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(IP_04_03_ADDR, DEFAULT_IP_04_03);
 8022dce:	f64f 5104 	movw	r1, #64772	; 0xfd04
 8022dd2:	2002      	movs	r0, #2
 8022dd4:	f000 fbf6 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(BR_MS_ADDR, DEFAULT_BR_MS);
 8022dd8:	2102      	movs	r1, #2
 8022dda:	2003      	movs	r0, #3
 8022ddc:	f000 fbf2 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(BR_LS_ADDR, DEFAULT_BR_LS);
 8022de0:	f64d 416c 	movw	r1, #56428	; 0xdc6c
 8022de4:	2004      	movs	r0, #4
 8022de6:	f000 fbed 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(MPI_ADRR_ADDR, DEFAULT_MPI_ADDR);
 8022dea:	2100      	movs	r1, #0
 8022dec:	2005      	movs	r0, #5
 8022dee:	f000 fbe9 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(PORT_ADRR, DEFAULT_PORT);
 8022df2:	2166      	movs	r1, #102	; 0x66
 8022df4:	2006      	movs	r0, #6
 8022df6:	f000 fbe5 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(MASK_02_01_ADDR, DEFAULT_MASK_02_01);
 8022dfa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8022dfe:	2007      	movs	r0, #7
 8022e00:	f000 fbe0 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(MASK_04_03_ADDR, DEFAULT_MASK_04_03);
 8022e04:	21ff      	movs	r1, #255	; 0xff
 8022e06:	2008      	movs	r0, #8
 8022e08:	f000 fbdc 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(GATE_02_01_ADDR, DEFAULT_GATE_02_01);
 8022e0c:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 8022e10:	2009      	movs	r0, #9
 8022e12:	f000 fbd7 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(GATE_04_03_ADDR, DEFAULT_GATE_04_03);
 8022e16:	f44f 7182 	mov.w	r1, #260	; 0x104
 8022e1a:	200a      	movs	r0, #10
 8022e1c:	f000 fbd2 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(SN_MS_ADDR, DEFAULT_SN_MS);
 8022e20:	2100      	movs	r1, #0
 8022e22:	200b      	movs	r0, #11
 8022e24:	f000 fbce 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(SN_LS_ADDR, DEFAULT_SN_LS);
 8022e28:	2100      	movs	r1, #0
 8022e2a:	200c      	movs	r0, #12
 8022e2c:	f000 fbca 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(MAC_02_01_ADDR, DEFAULT_MAC_02_01);
 8022e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8022e34:	2010      	movs	r0, #16
 8022e36:	f000 fbc5 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(MAC_04_03_ADDR, DEFAULT_MAC_04_03);
 8022e3a:	f244 21a2 	movw	r1, #17058	; 0x42a2
 8022e3e:	2011      	movs	r0, #17
 8022e40:	f000 fbc0 	bl	80235c4 <EE_WriteVariable>
		EE_WriteVariable(MAC_06_05_ADDR, DEFAULT_MAC_06_05);
 8022e44:	f24e 4150 	movw	r1, #58448	; 0xe450
 8022e48:	2012      	movs	r0, #18
 8022e4a:	f000 fbbb 	bl	80235c4 <EE_WriteVariable>
		uint16_t ui16[2];
		uint8_t ui8[4];
	} tmp_u;

	/*baud rate */
	EE_ReadVariable(BR_MS_ADDR, &tmp_u.ui16[1]);
 8022e4e:	463b      	mov	r3, r7
 8022e50:	3302      	adds	r3, #2
 8022e52:	4619      	mov	r1, r3
 8022e54:	2003      	movs	r0, #3
 8022e56:	f000 fb6b 	bl	8023530 <EE_ReadVariable>
	EE_ReadVariable(BR_LS_ADDR, &tmp_u.ui16[0]);
 8022e5a:	463b      	mov	r3, r7
 8022e5c:	4619      	mov	r1, r3
 8022e5e:	2004      	movs	r0, #4
 8022e60:	f000 fb66 	bl	8023530 <EE_ReadVariable>
	hflash.speed = tmp_u.ui32;
 8022e64:	683b      	ldr	r3, [r7, #0]
 8022e66:	4a48      	ldr	r2, [pc, #288]	; (8022f88 <FlashInit+0x1e8>)
 8022e68:	6013      	str	r3, [r2, #0]
	/* IP-address */
	EE_ReadVariable(IP_02_01_ADDR, &tmp_u.ui16[0]);
 8022e6a:	463b      	mov	r3, r7
 8022e6c:	4619      	mov	r1, r3
 8022e6e:	2001      	movs	r0, #1
 8022e70:	f000 fb5e 	bl	8023530 <EE_ReadVariable>
	EE_ReadVariable(IP_04_03_ADDR, &tmp_u.ui16[1]);
 8022e74:	463b      	mov	r3, r7
 8022e76:	3302      	adds	r3, #2
 8022e78:	4619      	mov	r1, r3
 8022e7a:	2002      	movs	r0, #2
 8022e7c:	f000 fb58 	bl	8023530 <EE_ReadVariable>
	hflash.IP_addr[0] = tmp_u.ui8[0];
 8022e80:	783a      	ldrb	r2, [r7, #0]
 8022e82:	4b41      	ldr	r3, [pc, #260]	; (8022f88 <FlashInit+0x1e8>)
 8022e84:	719a      	strb	r2, [r3, #6]
	hflash.IP_addr[1] = tmp_u.ui8[1];
 8022e86:	787a      	ldrb	r2, [r7, #1]
 8022e88:	4b3f      	ldr	r3, [pc, #252]	; (8022f88 <FlashInit+0x1e8>)
 8022e8a:	71da      	strb	r2, [r3, #7]
	hflash.IP_addr[2] = tmp_u.ui8[2];
 8022e8c:	78ba      	ldrb	r2, [r7, #2]
 8022e8e:	4b3e      	ldr	r3, [pc, #248]	; (8022f88 <FlashInit+0x1e8>)
 8022e90:	721a      	strb	r2, [r3, #8]
	hflash.IP_addr[3] = tmp_u.ui8[3];
 8022e92:	78fa      	ldrb	r2, [r7, #3]
 8022e94:	4b3c      	ldr	r3, [pc, #240]	; (8022f88 <FlashInit+0x1e8>)
 8022e96:	725a      	strb	r2, [r3, #9]
	/* MPI/Profibus address */
	EE_ReadVariable(MPI_ADRR_ADDR, &hflash.own_addr);
 8022e98:	493c      	ldr	r1, [pc, #240]	; (8022f8c <FlashInit+0x1ec>)
 8022e9a:	2005      	movs	r0, #5
 8022e9c:	f000 fb48 	bl	8023530 <EE_ReadVariable>
	/* Subnet mask */
	EE_ReadVariable(MASK_02_01_ADDR, &tmp_u.ui16[0]);
 8022ea0:	463b      	mov	r3, r7
 8022ea2:	4619      	mov	r1, r3
 8022ea4:	2007      	movs	r0, #7
 8022ea6:	f000 fb43 	bl	8023530 <EE_ReadVariable>
	EE_ReadVariable(MASK_04_03_ADDR, &tmp_u.ui16[1]);
 8022eaa:	463b      	mov	r3, r7
 8022eac:	3302      	adds	r3, #2
 8022eae:	4619      	mov	r1, r3
 8022eb0:	2008      	movs	r0, #8
 8022eb2:	f000 fb3d 	bl	8023530 <EE_ReadVariable>
	hflash.mask[0] = tmp_u.ui8[0];
 8022eb6:	783a      	ldrb	r2, [r7, #0]
 8022eb8:	4b33      	ldr	r3, [pc, #204]	; (8022f88 <FlashInit+0x1e8>)
 8022eba:	729a      	strb	r2, [r3, #10]
	hflash.mask[1] = tmp_u.ui8[1];
 8022ebc:	787a      	ldrb	r2, [r7, #1]
 8022ebe:	4b32      	ldr	r3, [pc, #200]	; (8022f88 <FlashInit+0x1e8>)
 8022ec0:	72da      	strb	r2, [r3, #11]
	hflash.mask[2] = tmp_u.ui8[2];
 8022ec2:	78ba      	ldrb	r2, [r7, #2]
 8022ec4:	4b30      	ldr	r3, [pc, #192]	; (8022f88 <FlashInit+0x1e8>)
 8022ec6:	731a      	strb	r2, [r3, #12]
	hflash.mask[3] = tmp_u.ui8[3];
 8022ec8:	78fa      	ldrb	r2, [r7, #3]
 8022eca:	4b2f      	ldr	r3, [pc, #188]	; (8022f88 <FlashInit+0x1e8>)
 8022ecc:	735a      	strb	r2, [r3, #13]
	/* Gateway */
	EE_ReadVariable(GATE_02_01_ADDR, &tmp_u.ui16[0]);
 8022ece:	463b      	mov	r3, r7
 8022ed0:	4619      	mov	r1, r3
 8022ed2:	2009      	movs	r0, #9
 8022ed4:	f000 fb2c 	bl	8023530 <EE_ReadVariable>
	EE_ReadVariable(GATE_04_03_ADDR, &tmp_u.ui16[1]);
 8022ed8:	463b      	mov	r3, r7
 8022eda:	3302      	adds	r3, #2
 8022edc:	4619      	mov	r1, r3
 8022ede:	200a      	movs	r0, #10
 8022ee0:	f000 fb26 	bl	8023530 <EE_ReadVariable>
	hflash.gate[0] = tmp_u.ui8[0];
 8022ee4:	783a      	ldrb	r2, [r7, #0]
 8022ee6:	4b28      	ldr	r3, [pc, #160]	; (8022f88 <FlashInit+0x1e8>)
 8022ee8:	739a      	strb	r2, [r3, #14]
	hflash.gate[1] = tmp_u.ui8[1];
 8022eea:	787a      	ldrb	r2, [r7, #1]
 8022eec:	4b26      	ldr	r3, [pc, #152]	; (8022f88 <FlashInit+0x1e8>)
 8022eee:	73da      	strb	r2, [r3, #15]
	hflash.gate[2] = tmp_u.ui8[2];
 8022ef0:	78ba      	ldrb	r2, [r7, #2]
 8022ef2:	4b25      	ldr	r3, [pc, #148]	; (8022f88 <FlashInit+0x1e8>)
 8022ef4:	741a      	strb	r2, [r3, #16]
	hflash.gate[3] = tmp_u.ui8[3];
 8022ef6:	78fa      	ldrb	r2, [r7, #3]
 8022ef8:	4b23      	ldr	r3, [pc, #140]	; (8022f88 <FlashInit+0x1e8>)
 8022efa:	745a      	strb	r2, [r3, #17]
	/* Port number */
	EE_ReadVariable(PORT_ADRR, &hflash.port);
 8022efc:	4924      	ldr	r1, [pc, #144]	; (8022f90 <FlashInit+0x1f0>)
 8022efe:	2006      	movs	r0, #6
 8022f00:	f000 fb16 	bl	8023530 <EE_ReadVariable>
	/* Serial number */
	EE_ReadVariable(SN_MS_ADDR, &tmp_u.ui16[1]);
 8022f04:	463b      	mov	r3, r7
 8022f06:	3302      	adds	r3, #2
 8022f08:	4619      	mov	r1, r3
 8022f0a:	200b      	movs	r0, #11
 8022f0c:	f000 fb10 	bl	8023530 <EE_ReadVariable>
	EE_ReadVariable(SN_LS_ADDR, &tmp_u.ui16[0]);
 8022f10:	463b      	mov	r3, r7
 8022f12:	4619      	mov	r1, r3
 8022f14:	200c      	movs	r0, #12
 8022f16:	f000 fb0b 	bl	8023530 <EE_ReadVariable>
	hflash.serial_num = tmp_u.ui32;
 8022f1a:	683b      	ldr	r3, [r7, #0]
 8022f1c:	4a1a      	ldr	r2, [pc, #104]	; (8022f88 <FlashInit+0x1e8>)
 8022f1e:	6153      	str	r3, [r2, #20]
	/* MAC address */
	EE_ReadVariable(MAC_02_01_ADDR, &tmp_u.ui16[0]);
 8022f20:	463b      	mov	r3, r7
 8022f22:	4619      	mov	r1, r3
 8022f24:	2010      	movs	r0, #16
 8022f26:	f000 fb03 	bl	8023530 <EE_ReadVariable>
	EE_ReadVariable(MAC_04_03_ADDR, &tmp_u.ui16[1]);
 8022f2a:	463b      	mov	r3, r7
 8022f2c:	3302      	adds	r3, #2
 8022f2e:	4619      	mov	r1, r3
 8022f30:	2011      	movs	r0, #17
 8022f32:	f000 fafd 	bl	8023530 <EE_ReadVariable>
	hflash.mac_addr[0] = tmp_u.ui8[0];
 8022f36:	783a      	ldrb	r2, [r7, #0]
 8022f38:	4b13      	ldr	r3, [pc, #76]	; (8022f88 <FlashInit+0x1e8>)
 8022f3a:	779a      	strb	r2, [r3, #30]
	hflash.mac_addr[1] = tmp_u.ui8[1];
 8022f3c:	787a      	ldrb	r2, [r7, #1]
 8022f3e:	4b12      	ldr	r3, [pc, #72]	; (8022f88 <FlashInit+0x1e8>)
 8022f40:	77da      	strb	r2, [r3, #31]
	hflash.mac_addr[2] = tmp_u.ui8[2];
 8022f42:	78ba      	ldrb	r2, [r7, #2]
 8022f44:	4b10      	ldr	r3, [pc, #64]	; (8022f88 <FlashInit+0x1e8>)
 8022f46:	f883 2020 	strb.w	r2, [r3, #32]
	hflash.mac_addr[3] = tmp_u.ui8[3];
 8022f4a:	78fa      	ldrb	r2, [r7, #3]
 8022f4c:	4b0e      	ldr	r3, [pc, #56]	; (8022f88 <FlashInit+0x1e8>)
 8022f4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	EE_ReadVariable(MAC_06_05_ADDR, &tmp_u.ui16[0]);
 8022f52:	463b      	mov	r3, r7
 8022f54:	4619      	mov	r1, r3
 8022f56:	2012      	movs	r0, #18
 8022f58:	f000 faea 	bl	8023530 <EE_ReadVariable>
	hflash.mac_addr[4] = tmp_u.ui8[0];
 8022f5c:	783a      	ldrb	r2, [r7, #0]
 8022f5e:	4b0a      	ldr	r3, [pc, #40]	; (8022f88 <FlashInit+0x1e8>)
 8022f60:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	hflash.mac_addr[5] = tmp_u.ui8[1];
 8022f64:	787a      	ldrb	r2, [r7, #1]
 8022f66:	4b08      	ldr	r3, [pc, #32]	; (8022f88 <FlashInit+0x1e8>)
 8022f68:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	hflash.ver[0] = VER1;
 8022f6c:	4b06      	ldr	r3, [pc, #24]	; (8022f88 <FlashInit+0x1e8>)
 8022f6e:	2200      	movs	r2, #0
 8022f70:	831a      	strh	r2, [r3, #24]
	hflash.ver[1] = VER2;
 8022f72:	4b05      	ldr	r3, [pc, #20]	; (8022f88 <FlashInit+0x1e8>)
 8022f74:	2205      	movs	r2, #5
 8022f76:	835a      	strh	r2, [r3, #26]
	hflash.ver[2] = VER3;
 8022f78:	4b03      	ldr	r3, [pc, #12]	; (8022f88 <FlashInit+0x1e8>)
 8022f7a:	2200      	movs	r2, #0
 8022f7c:	839a      	strh	r2, [r3, #28]
	/* ------------------------------------------------------- */
}
 8022f7e:	bf00      	nop
 8022f80:	3708      	adds	r7, #8
 8022f82:	46bd      	mov	sp, r7
 8022f84:	bd80      	pop	{r7, pc}
 8022f86:	bf00      	nop
 8022f88:	2000ecfc 	.word	0x2000ecfc
 8022f8c:	2000ed00 	.word	0x2000ed00
 8022f90:	2000ed0e 	.word	0x2000ed0e

08022f94 <SaveFash>:

void SaveFash(void) {
 8022f94:	b580      	push	{r7, lr}
 8022f96:	b082      	sub	sp, #8
 8022f98:	af00      	add	r7, sp, #0
		uint8_t ui8[4];
	} tmp_u;

	/*baud rate */

	tmp_u.ui32 = hflash.speed ;
 8022f9a:	4b48      	ldr	r3, [pc, #288]	; (80230bc <SaveFash+0x128>)
 8022f9c:	681b      	ldr	r3, [r3, #0]
 8022f9e:	607b      	str	r3, [r7, #4]
	EE_WriteVariable(BR_MS_ADDR, tmp_u.ui16[1]);
 8022fa0:	88fb      	ldrh	r3, [r7, #6]
 8022fa2:	4619      	mov	r1, r3
 8022fa4:	2003      	movs	r0, #3
 8022fa6:	f000 fb0d 	bl	80235c4 <EE_WriteVariable>
	EE_WriteVariable(BR_LS_ADDR, tmp_u.ui16[0]);
 8022faa:	88bb      	ldrh	r3, [r7, #4]
 8022fac:	4619      	mov	r1, r3
 8022fae:	2004      	movs	r0, #4
 8022fb0:	f000 fb08 	bl	80235c4 <EE_WriteVariable>
	/* IP-address */
	tmp_u.ui8[0] = hflash.IP_addr[0];
 8022fb4:	4b41      	ldr	r3, [pc, #260]	; (80230bc <SaveFash+0x128>)
 8022fb6:	799b      	ldrb	r3, [r3, #6]
 8022fb8:	713b      	strb	r3, [r7, #4]
	tmp_u.ui8[1] = hflash.IP_addr[1];
 8022fba:	4b40      	ldr	r3, [pc, #256]	; (80230bc <SaveFash+0x128>)
 8022fbc:	79db      	ldrb	r3, [r3, #7]
 8022fbe:	717b      	strb	r3, [r7, #5]
	tmp_u.ui8[2] = hflash.IP_addr[2];
 8022fc0:	4b3e      	ldr	r3, [pc, #248]	; (80230bc <SaveFash+0x128>)
 8022fc2:	7a1b      	ldrb	r3, [r3, #8]
 8022fc4:	71bb      	strb	r3, [r7, #6]
	tmp_u.ui8[3] = hflash.IP_addr[3];
 8022fc6:	4b3d      	ldr	r3, [pc, #244]	; (80230bc <SaveFash+0x128>)
 8022fc8:	7a5b      	ldrb	r3, [r3, #9]
 8022fca:	71fb      	strb	r3, [r7, #7]
	EE_WriteVariable(IP_02_01_ADDR, tmp_u.ui16[0]);
 8022fcc:	88bb      	ldrh	r3, [r7, #4]
 8022fce:	4619      	mov	r1, r3
 8022fd0:	2001      	movs	r0, #1
 8022fd2:	f000 faf7 	bl	80235c4 <EE_WriteVariable>
	EE_WriteVariable(IP_04_03_ADDR, tmp_u.ui16[1]);
 8022fd6:	88fb      	ldrh	r3, [r7, #6]
 8022fd8:	4619      	mov	r1, r3
 8022fda:	2002      	movs	r0, #2
 8022fdc:	f000 faf2 	bl	80235c4 <EE_WriteVariable>
	/* MPI/Profibus address */
	EE_WriteVariable(MPI_ADRR_ADDR, hflash.own_addr);
 8022fe0:	4b36      	ldr	r3, [pc, #216]	; (80230bc <SaveFash+0x128>)
 8022fe2:	889b      	ldrh	r3, [r3, #4]
 8022fe4:	4619      	mov	r1, r3
 8022fe6:	2005      	movs	r0, #5
 8022fe8:	f000 faec 	bl	80235c4 <EE_WriteVariable>
	/* Subnet mask */
	tmp_u.ui8[0] = hflash.mask[0];
 8022fec:	4b33      	ldr	r3, [pc, #204]	; (80230bc <SaveFash+0x128>)
 8022fee:	7a9b      	ldrb	r3, [r3, #10]
 8022ff0:	713b      	strb	r3, [r7, #4]
	tmp_u.ui8[1] = hflash.mask[1];
 8022ff2:	4b32      	ldr	r3, [pc, #200]	; (80230bc <SaveFash+0x128>)
 8022ff4:	7adb      	ldrb	r3, [r3, #11]
 8022ff6:	717b      	strb	r3, [r7, #5]
	tmp_u.ui8[2] = hflash.mask[2];
 8022ff8:	4b30      	ldr	r3, [pc, #192]	; (80230bc <SaveFash+0x128>)
 8022ffa:	7b1b      	ldrb	r3, [r3, #12]
 8022ffc:	71bb      	strb	r3, [r7, #6]
	tmp_u.ui8[3] = hflash.mask[3];
 8022ffe:	4b2f      	ldr	r3, [pc, #188]	; (80230bc <SaveFash+0x128>)
 8023000:	7b5b      	ldrb	r3, [r3, #13]
 8023002:	71fb      	strb	r3, [r7, #7]
	EE_WriteVariable(MASK_02_01_ADDR, tmp_u.ui16[0]);
 8023004:	88bb      	ldrh	r3, [r7, #4]
 8023006:	4619      	mov	r1, r3
 8023008:	2007      	movs	r0, #7
 802300a:	f000 fadb 	bl	80235c4 <EE_WriteVariable>
	EE_WriteVariable(MASK_04_03_ADDR, tmp_u.ui16[1]);
 802300e:	88fb      	ldrh	r3, [r7, #6]
 8023010:	4619      	mov	r1, r3
 8023012:	2008      	movs	r0, #8
 8023014:	f000 fad6 	bl	80235c4 <EE_WriteVariable>
	/* Gateway */
	tmp_u.ui8[0] = hflash.gate[0];
 8023018:	4b28      	ldr	r3, [pc, #160]	; (80230bc <SaveFash+0x128>)
 802301a:	7b9b      	ldrb	r3, [r3, #14]
 802301c:	713b      	strb	r3, [r7, #4]
	tmp_u.ui8[1] = hflash.gate[1];
 802301e:	4b27      	ldr	r3, [pc, #156]	; (80230bc <SaveFash+0x128>)
 8023020:	7bdb      	ldrb	r3, [r3, #15]
 8023022:	717b      	strb	r3, [r7, #5]
	tmp_u.ui8[2] = hflash.gate[2];
 8023024:	4b25      	ldr	r3, [pc, #148]	; (80230bc <SaveFash+0x128>)
 8023026:	7c1b      	ldrb	r3, [r3, #16]
 8023028:	71bb      	strb	r3, [r7, #6]
	tmp_u.ui8[3] = hflash.gate[3];
 802302a:	4b24      	ldr	r3, [pc, #144]	; (80230bc <SaveFash+0x128>)
 802302c:	7c5b      	ldrb	r3, [r3, #17]
 802302e:	71fb      	strb	r3, [r7, #7]
	EE_WriteVariable(GATE_02_01_ADDR, tmp_u.ui16[0]);
 8023030:	88bb      	ldrh	r3, [r7, #4]
 8023032:	4619      	mov	r1, r3
 8023034:	2009      	movs	r0, #9
 8023036:	f000 fac5 	bl	80235c4 <EE_WriteVariable>
	EE_WriteVariable(GATE_04_03_ADDR, tmp_u.ui16[1]);
 802303a:	88fb      	ldrh	r3, [r7, #6]
 802303c:	4619      	mov	r1, r3
 802303e:	200a      	movs	r0, #10
 8023040:	f000 fac0 	bl	80235c4 <EE_WriteVariable>
	/* Port number */
	EE_WriteVariable(PORT_ADRR, hflash.port);
 8023044:	4b1d      	ldr	r3, [pc, #116]	; (80230bc <SaveFash+0x128>)
 8023046:	8a5b      	ldrh	r3, [r3, #18]
 8023048:	4619      	mov	r1, r3
 802304a:	2006      	movs	r0, #6
 802304c:	f000 faba 	bl	80235c4 <EE_WriteVariable>
	/* Serial number */
	tmp_u.ui32 = hflash.serial_num;
 8023050:	4b1a      	ldr	r3, [pc, #104]	; (80230bc <SaveFash+0x128>)
 8023052:	695b      	ldr	r3, [r3, #20]
 8023054:	607b      	str	r3, [r7, #4]
	EE_WriteVariable(SN_MS_ADDR, tmp_u.ui16[1]);
 8023056:	88fb      	ldrh	r3, [r7, #6]
 8023058:	4619      	mov	r1, r3
 802305a:	200b      	movs	r0, #11
 802305c:	f000 fab2 	bl	80235c4 <EE_WriteVariable>
	EE_WriteVariable(SN_LS_ADDR, tmp_u.ui16[0]);
 8023060:	88bb      	ldrh	r3, [r7, #4]
 8023062:	4619      	mov	r1, r3
 8023064:	200c      	movs	r0, #12
 8023066:	f000 faad 	bl	80235c4 <EE_WriteVariable>
	/* MAC address */
	tmp_u.ui8[0] = hflash.mac_addr[0];
 802306a:	4b14      	ldr	r3, [pc, #80]	; (80230bc <SaveFash+0x128>)
 802306c:	7f9b      	ldrb	r3, [r3, #30]
 802306e:	713b      	strb	r3, [r7, #4]
	tmp_u.ui8[1] = hflash.mac_addr[1];
 8023070:	4b12      	ldr	r3, [pc, #72]	; (80230bc <SaveFash+0x128>)
 8023072:	7fdb      	ldrb	r3, [r3, #31]
 8023074:	717b      	strb	r3, [r7, #5]
	tmp_u.ui8[2] = hflash.mac_addr[2];
 8023076:	4b11      	ldr	r3, [pc, #68]	; (80230bc <SaveFash+0x128>)
 8023078:	f893 3020 	ldrb.w	r3, [r3, #32]
 802307c:	71bb      	strb	r3, [r7, #6]
	tmp_u.ui8[3] = hflash.mac_addr[3];
 802307e:	4b0f      	ldr	r3, [pc, #60]	; (80230bc <SaveFash+0x128>)
 8023080:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8023084:	71fb      	strb	r3, [r7, #7]
	EE_WriteVariable(MAC_02_01_ADDR, tmp_u.ui16[0]);
 8023086:	88bb      	ldrh	r3, [r7, #4]
 8023088:	4619      	mov	r1, r3
 802308a:	2010      	movs	r0, #16
 802308c:	f000 fa9a 	bl	80235c4 <EE_WriteVariable>
	EE_WriteVariable(MAC_04_03_ADDR, tmp_u.ui16[1]);
 8023090:	88fb      	ldrh	r3, [r7, #6]
 8023092:	4619      	mov	r1, r3
 8023094:	2011      	movs	r0, #17
 8023096:	f000 fa95 	bl	80235c4 <EE_WriteVariable>
	tmp_u.ui8[0] = hflash.mac_addr[4];
 802309a:	4b08      	ldr	r3, [pc, #32]	; (80230bc <SaveFash+0x128>)
 802309c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80230a0:	713b      	strb	r3, [r7, #4]
	tmp_u.ui8[1] = hflash.mac_addr[5];
 80230a2:	4b06      	ldr	r3, [pc, #24]	; (80230bc <SaveFash+0x128>)
 80230a4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80230a8:	717b      	strb	r3, [r7, #5]
	EE_WriteVariable(MAC_06_05_ADDR, tmp_u.ui16[0]);
 80230aa:	88bb      	ldrh	r3, [r7, #4]
 80230ac:	4619      	mov	r1, r3
 80230ae:	2012      	movs	r0, #18
 80230b0:	f000 fa88 	bl	80235c4 <EE_WriteVariable>
}
 80230b4:	bf00      	nop
 80230b6:	3708      	adds	r7, #8
 80230b8:	46bd      	mov	sp, r7
 80230ba:	bd80      	pop	{r7, pc}
 80230bc:	2000ecfc 	.word	0x2000ecfc

080230c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80230c0:	b580      	push	{r7, lr}
 80230c2:	b082      	sub	sp, #8
 80230c4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80230c6:	2300      	movs	r3, #0
 80230c8:	607b      	str	r3, [r7, #4]
 80230ca:	4a17      	ldr	r2, [pc, #92]	; (8023128 <MX_DMA_Init+0x68>)
 80230cc:	4b16      	ldr	r3, [pc, #88]	; (8023128 <MX_DMA_Init+0x68>)
 80230ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80230d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80230d4:	6313      	str	r3, [r2, #48]	; 0x30
 80230d6:	4b14      	ldr	r3, [pc, #80]	; (8023128 <MX_DMA_Init+0x68>)
 80230d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80230da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80230de:	607b      	str	r3, [r7, #4]
 80230e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80230e2:	2300      	movs	r3, #0
 80230e4:	603b      	str	r3, [r7, #0]
 80230e6:	4a10      	ldr	r2, [pc, #64]	; (8023128 <MX_DMA_Init+0x68>)
 80230e8:	4b0f      	ldr	r3, [pc, #60]	; (8023128 <MX_DMA_Init+0x68>)
 80230ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80230ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80230f0:	6313      	str	r3, [r2, #48]	; 0x30
 80230f2:	4b0d      	ldr	r3, [pc, #52]	; (8023128 <MX_DMA_Init+0x68>)
 80230f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80230f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80230fa:	603b      	str	r3, [r7, #0]
 80230fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80230fe:	2200      	movs	r2, #0
 8023100:	2105      	movs	r1, #5
 8023102:	202f      	movs	r0, #47	; 0x2f
 8023104:	f7ed fa5a 	bl	80105bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8023108:	202f      	movs	r0, #47	; 0x2f
 802310a:	f7ed fa73 	bl	80105f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 802310e:	2200      	movs	r2, #0
 8023110:	2105      	movs	r1, #5
 8023112:	2046      	movs	r0, #70	; 0x46
 8023114:	f7ed fa52 	bl	80105bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8023118:	2046      	movs	r0, #70	; 0x46
 802311a:	f7ed fa6b 	bl	80105f4 <HAL_NVIC_EnableIRQ>

}
 802311e:	bf00      	nop
 8023120:	3708      	adds	r7, #8
 8023122:	46bd      	mov	sp, r7
 8023124:	bd80      	pop	{r7, pc}
 8023126:	bf00      	nop
 8023128:	40023800 	.word	0x40023800

0802312c <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 802312c:	b580      	push	{r7, lr}
 802312e:	b08a      	sub	sp, #40	; 0x28
 8023130:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8023132:	2306      	movs	r3, #6
 8023134:	847b      	strh	r3, [r7, #34]	; 0x22
 8023136:	2306      	movs	r3, #6
 8023138:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 802313a:	2300      	movs	r3, #0
 802313c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 802313e:	2300      	movs	r3, #0
 8023140:	83fb      	strh	r3, [r7, #30]
 8023142:	2300      	movs	r3, #0
 8023144:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8023146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802314a:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 802314c:	2300      	movs	r3, #0
 802314e:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8023150:	4b9f      	ldr	r3, [pc, #636]	; (80233d0 <EE_Init+0x2a4>)
 8023152:	881b      	ldrh	r3, [r3, #0]
 8023154:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8023156:	4b9f      	ldr	r3, [pc, #636]	; (80233d4 <EE_Init+0x2a8>)
 8023158:	881b      	ldrh	r3, [r3, #0]
 802315a:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 802315c:	2300      	movs	r3, #0
 802315e:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8023160:	2302      	movs	r3, #2
 8023162:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8023164:	2301      	movs	r3, #1
 8023166:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023168:	2302      	movs	r3, #2
 802316a:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 802316c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802316e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023172:	4293      	cmp	r3, r2
 8023174:	d057      	beq.n	8023226 <EE_Init+0xfa>
 8023176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802317a:	4293      	cmp	r3, r2
 802317c:	d003      	beq.n	8023186 <EE_Init+0x5a>
 802317e:	2b00      	cmp	r3, #0
 8023180:	f000 80f4 	beq.w	802336c <EE_Init+0x240>
 8023184:	e18d      	b.n	80234a2 <EE_Init+0x376>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8023186:	8c3b      	ldrh	r3, [r7, #32]
 8023188:	2b00      	cmp	r3, #0
 802318a:	d116      	bne.n	80231ba <EE_Init+0x8e>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 802318c:	4890      	ldr	r0, [pc, #576]	; (80233d0 <EE_Init+0x2a4>)
 802318e:	f000 f9a9 	bl	80234e4 <EE_VerifyPageFullyErased>
 8023192:	4603      	mov	r3, r0
 8023194:	2b00      	cmp	r3, #0
 8023196:	f040 818e 	bne.w	80234b6 <EE_Init+0x38a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 802319a:	f107 0214 	add.w	r2, r7, #20
 802319e:	463b      	mov	r3, r7
 80231a0:	4611      	mov	r1, r2
 80231a2:	4618      	mov	r0, r3
 80231a4:	f7ee ff7c 	bl	80120a0 <HAL_FLASHEx_Erase>
 80231a8:	4603      	mov	r3, r0
 80231aa:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80231ac:	7efb      	ldrb	r3, [r7, #27]
 80231ae:	2b00      	cmp	r3, #0
 80231b0:	f000 8181 	beq.w	80234b6 <EE_Init+0x38a>
          {
            return FlashStatus;
 80231b4:	7efb      	ldrb	r3, [r7, #27]
 80231b6:	b29b      	uxth	r3, r3
 80231b8:	e185      	b.n	80234c6 <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80231ba:	8c3b      	ldrh	r3, [r7, #32]
 80231bc:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80231c0:	4293      	cmp	r3, r2
 80231c2:	d125      	bne.n	8023210 <EE_Init+0xe4>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80231c4:	4882      	ldr	r0, [pc, #520]	; (80233d0 <EE_Init+0x2a4>)
 80231c6:	f000 f98d 	bl	80234e4 <EE_VerifyPageFullyErased>
 80231ca:	4603      	mov	r3, r0
 80231cc:	2b00      	cmp	r3, #0
 80231ce:	d10e      	bne.n	80231ee <EE_Init+0xc2>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80231d0:	f107 0214 	add.w	r2, r7, #20
 80231d4:	463b      	mov	r3, r7
 80231d6:	4611      	mov	r1, r2
 80231d8:	4618      	mov	r0, r3
 80231da:	f7ee ff61 	bl	80120a0 <HAL_FLASHEx_Erase>
 80231de:	4603      	mov	r3, r0
 80231e0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80231e2:	7efb      	ldrb	r3, [r7, #27]
 80231e4:	2b00      	cmp	r3, #0
 80231e6:	d002      	beq.n	80231ee <EE_Init+0xc2>
          {
            return FlashStatus;
 80231e8:	7efb      	ldrb	r3, [r7, #27]
 80231ea:	b29b      	uxth	r3, r3
 80231ec:	e16b      	b.n	80234c6 <EE_Init+0x39a>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 80231ee:	f04f 0200 	mov.w	r2, #0
 80231f2:	f04f 0300 	mov.w	r3, #0
 80231f6:	4977      	ldr	r1, [pc, #476]	; (80233d4 <EE_Init+0x2a8>)
 80231f8:	2001      	movs	r0, #1
 80231fa:	f7ee fdb1 	bl	8011d60 <HAL_FLASH_Program>
 80231fe:	4603      	mov	r3, r0
 8023200:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8023202:	7efb      	ldrb	r3, [r7, #27]
 8023204:	2b00      	cmp	r3, #0
 8023206:	f000 8156 	beq.w	80234b6 <EE_Init+0x38a>
        {
          return FlashStatus;
 802320a:	7efb      	ldrb	r3, [r7, #27]
 802320c:	b29b      	uxth	r3, r3
 802320e:	e15a      	b.n	80234c6 <EE_Init+0x39a>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8023210:	f000 f9fa 	bl	8023608 <EE_Format>
 8023214:	4603      	mov	r3, r0
 8023216:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8023218:	7efb      	ldrb	r3, [r7, #27]
 802321a:	2b00      	cmp	r3, #0
 802321c:	f000 814b 	beq.w	80234b6 <EE_Init+0x38a>
        {
          return FlashStatus;
 8023220:	7efb      	ldrb	r3, [r7, #27]
 8023222:	b29b      	uxth	r3, r3
 8023224:	e14f      	b.n	80234c6 <EE_Init+0x39a>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8023226:	8c3b      	ldrh	r3, [r7, #32]
 8023228:	2b00      	cmp	r3, #0
 802322a:	d163      	bne.n	80232f4 <EE_Init+0x1c8>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 802322c:	2300      	movs	r3, #0
 802322e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023230:	e030      	b.n	8023294 <EE_Init+0x168>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8023232:	4b69      	ldr	r3, [pc, #420]	; (80233d8 <EE_Init+0x2ac>)
 8023234:	881b      	ldrh	r3, [r3, #0]
 8023236:	b29a      	uxth	r2, r3
 8023238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802323a:	4968      	ldr	r1, [pc, #416]	; (80233dc <EE_Init+0x2b0>)
 802323c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023240:	429a      	cmp	r2, r3
 8023242:	d101      	bne.n	8023248 <EE_Init+0x11c>
          {
            x = VarIdx;
 8023244:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023246:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8023248:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802324a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 802324e:	429a      	cmp	r2, r3
 8023250:	d01d      	beq.n	802328e <EE_Init+0x162>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8023252:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023254:	4a61      	ldr	r2, [pc, #388]	; (80233dc <EE_Init+0x2b0>)
 8023256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802325a:	4961      	ldr	r1, [pc, #388]	; (80233e0 <EE_Init+0x2b4>)
 802325c:	4618      	mov	r0, r3
 802325e:	f000 f967 	bl	8023530 <EE_ReadVariable>
 8023262:	4603      	mov	r3, r0
 8023264:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8023266:	8bbb      	ldrh	r3, [r7, #28]
 8023268:	2b01      	cmp	r3, #1
 802326a:	d010      	beq.n	802328e <EE_Init+0x162>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 802326c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802326e:	4a5b      	ldr	r2, [pc, #364]	; (80233dc <EE_Init+0x2b0>)
 8023270:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8023274:	4b5a      	ldr	r3, [pc, #360]	; (80233e0 <EE_Init+0x2b4>)
 8023276:	881b      	ldrh	r3, [r3, #0]
 8023278:	4619      	mov	r1, r3
 802327a:	4610      	mov	r0, r2
 802327c:	f000 fa5c 	bl	8023738 <EE_VerifyPageFullWriteVariable>
 8023280:	4603      	mov	r3, r0
 8023282:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8023284:	8bfb      	ldrh	r3, [r7, #30]
 8023286:	2b00      	cmp	r3, #0
 8023288:	d001      	beq.n	802328e <EE_Init+0x162>
              {
                return EepromStatus;
 802328a:	8bfb      	ldrh	r3, [r7, #30]
 802328c:	e11b      	b.n	80234c6 <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 802328e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023290:	3301      	adds	r3, #1
 8023292:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023294:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023296:	2b12      	cmp	r3, #18
 8023298:	d9cb      	bls.n	8023232 <EE_Init+0x106>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 802329a:	f04f 0200 	mov.w	r2, #0
 802329e:	f04f 0300 	mov.w	r3, #0
 80232a2:	494b      	ldr	r1, [pc, #300]	; (80233d0 <EE_Init+0x2a4>)
 80232a4:	2001      	movs	r0, #1
 80232a6:	f7ee fd5b 	bl	8011d60 <HAL_FLASH_Program>
 80232aa:	4603      	mov	r3, r0
 80232ac:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80232ae:	7efb      	ldrb	r3, [r7, #27]
 80232b0:	2b00      	cmp	r3, #0
 80232b2:	d002      	beq.n	80232ba <EE_Init+0x18e>
        {
          return FlashStatus;
 80232b4:	7efb      	ldrb	r3, [r7, #27]
 80232b6:	b29b      	uxth	r3, r3
 80232b8:	e105      	b.n	80234c6 <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE1_ID;
 80232ba:	2303      	movs	r3, #3
 80232bc:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80232be:	2301      	movs	r3, #1
 80232c0:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80232c2:	2302      	movs	r3, #2
 80232c4:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80232c6:	4843      	ldr	r0, [pc, #268]	; (80233d4 <EE_Init+0x2a8>)
 80232c8:	f000 f90c 	bl	80234e4 <EE_VerifyPageFullyErased>
 80232cc:	4603      	mov	r3, r0
 80232ce:	2b00      	cmp	r3, #0
 80232d0:	f040 80f3 	bne.w	80234ba <EE_Init+0x38e>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80232d4:	f107 0214 	add.w	r2, r7, #20
 80232d8:	463b      	mov	r3, r7
 80232da:	4611      	mov	r1, r2
 80232dc:	4618      	mov	r0, r3
 80232de:	f7ee fedf 	bl	80120a0 <HAL_FLASHEx_Erase>
 80232e2:	4603      	mov	r3, r0
 80232e4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80232e6:	7efb      	ldrb	r3, [r7, #27]
 80232e8:	2b00      	cmp	r3, #0
 80232ea:	f000 80e6 	beq.w	80234ba <EE_Init+0x38e>
          {
            return FlashStatus;
 80232ee:	7efb      	ldrb	r3, [r7, #27]
 80232f0:	b29b      	uxth	r3, r3
 80232f2:	e0e8      	b.n	80234c6 <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 80232f4:	8c3b      	ldrh	r3, [r7, #32]
 80232f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80232fa:	4293      	cmp	r3, r2
 80232fc:	d12b      	bne.n	8023356 <EE_Init+0x22a>
      {
        pEraseInit.Sector = PAGE1_ID;
 80232fe:	2303      	movs	r3, #3
 8023300:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8023302:	2301      	movs	r3, #1
 8023304:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023306:	2302      	movs	r3, #2
 8023308:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 802330a:	4832      	ldr	r0, [pc, #200]	; (80233d4 <EE_Init+0x2a8>)
 802330c:	f000 f8ea 	bl	80234e4 <EE_VerifyPageFullyErased>
 8023310:	4603      	mov	r3, r0
 8023312:	2b00      	cmp	r3, #0
 8023314:	d10e      	bne.n	8023334 <EE_Init+0x208>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8023316:	f107 0214 	add.w	r2, r7, #20
 802331a:	463b      	mov	r3, r7
 802331c:	4611      	mov	r1, r2
 802331e:	4618      	mov	r0, r3
 8023320:	f7ee febe 	bl	80120a0 <HAL_FLASHEx_Erase>
 8023324:	4603      	mov	r3, r0
 8023326:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8023328:	7efb      	ldrb	r3, [r7, #27]
 802332a:	2b00      	cmp	r3, #0
 802332c:	d002      	beq.n	8023334 <EE_Init+0x208>
          {
            return FlashStatus;
 802332e:	7efb      	ldrb	r3, [r7, #27]
 8023330:	b29b      	uxth	r3, r3
 8023332:	e0c8      	b.n	80234c6 <EE_Init+0x39a>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8023334:	f04f 0200 	mov.w	r2, #0
 8023338:	f04f 0300 	mov.w	r3, #0
 802333c:	4924      	ldr	r1, [pc, #144]	; (80233d0 <EE_Init+0x2a4>)
 802333e:	2001      	movs	r0, #1
 8023340:	f7ee fd0e 	bl	8011d60 <HAL_FLASH_Program>
 8023344:	4603      	mov	r3, r0
 8023346:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8023348:	7efb      	ldrb	r3, [r7, #27]
 802334a:	2b00      	cmp	r3, #0
 802334c:	f000 80b5 	beq.w	80234ba <EE_Init+0x38e>
        {
          return FlashStatus;
 8023350:	7efb      	ldrb	r3, [r7, #27]
 8023352:	b29b      	uxth	r3, r3
 8023354:	e0b7      	b.n	80234c6 <EE_Init+0x39a>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8023356:	f000 f957 	bl	8023608 <EE_Format>
 802335a:	4603      	mov	r3, r0
 802335c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 802335e:	7efb      	ldrb	r3, [r7, #27]
 8023360:	2b00      	cmp	r3, #0
 8023362:	f000 80aa 	beq.w	80234ba <EE_Init+0x38e>
        {
          return FlashStatus;
 8023366:	7efb      	ldrb	r3, [r7, #27]
 8023368:	b29b      	uxth	r3, r3
 802336a:	e0ac      	b.n	80234c6 <EE_Init+0x39a>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 802336c:	8c3b      	ldrh	r3, [r7, #32]
 802336e:	2b00      	cmp	r3, #0
 8023370:	d10a      	bne.n	8023388 <EE_Init+0x25c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8023372:	f000 f949 	bl	8023608 <EE_Format>
 8023376:	4603      	mov	r3, r0
 8023378:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 802337a:	7efb      	ldrb	r3, [r7, #27]
 802337c:	2b00      	cmp	r3, #0
 802337e:	f000 809e 	beq.w	80234be <EE_Init+0x392>
        {
          return FlashStatus;
 8023382:	7efb      	ldrb	r3, [r7, #27]
 8023384:	b29b      	uxth	r3, r3
 8023386:	e09e      	b.n	80234c6 <EE_Init+0x39a>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8023388:	8c3b      	ldrh	r3, [r7, #32]
 802338a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802338e:	4293      	cmp	r3, r2
 8023390:	d11b      	bne.n	80233ca <EE_Init+0x29e>
      {
        pEraseInit.Sector = PAGE1_ID;
 8023392:	2303      	movs	r3, #3
 8023394:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8023396:	2301      	movs	r3, #1
 8023398:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 802339a:	2302      	movs	r3, #2
 802339c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 802339e:	480d      	ldr	r0, [pc, #52]	; (80233d4 <EE_Init+0x2a8>)
 80233a0:	f000 f8a0 	bl	80234e4 <EE_VerifyPageFullyErased>
 80233a4:	4603      	mov	r3, r0
 80233a6:	2b00      	cmp	r3, #0
 80233a8:	f040 8089 	bne.w	80234be <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80233ac:	f107 0214 	add.w	r2, r7, #20
 80233b0:	463b      	mov	r3, r7
 80233b2:	4611      	mov	r1, r2
 80233b4:	4618      	mov	r0, r3
 80233b6:	f7ee fe73 	bl	80120a0 <HAL_FLASHEx_Erase>
 80233ba:	4603      	mov	r3, r0
 80233bc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80233be:	7efb      	ldrb	r3, [r7, #27]
 80233c0:	2b00      	cmp	r3, #0
 80233c2:	d07c      	beq.n	80234be <EE_Init+0x392>
          {
            return FlashStatus;
 80233c4:	7efb      	ldrb	r3, [r7, #27]
 80233c6:	b29b      	uxth	r3, r3
 80233c8:	e07d      	b.n	80234c6 <EE_Init+0x39a>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80233ca:	2300      	movs	r3, #0
 80233cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80233ce:	e03a      	b.n	8023446 <EE_Init+0x31a>
 80233d0:	08008000 	.word	0x08008000
 80233d4:	0800c000 	.word	0x0800c000
 80233d8:	08008006 	.word	0x08008006
 80233dc:	20000010 	.word	0x20000010
 80233e0:	20009534 	.word	0x20009534
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80233e4:	4b3a      	ldr	r3, [pc, #232]	; (80234d0 <EE_Init+0x3a4>)
 80233e6:	881b      	ldrh	r3, [r3, #0]
 80233e8:	b29a      	uxth	r2, r3
 80233ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80233ec:	4939      	ldr	r1, [pc, #228]	; (80234d4 <EE_Init+0x3a8>)
 80233ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80233f2:	429a      	cmp	r2, r3
 80233f4:	d101      	bne.n	80233fa <EE_Init+0x2ce>
          {
            x = VarIdx;
 80233f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80233f8:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80233fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80233fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8023400:	429a      	cmp	r2, r3
 8023402:	d01d      	beq.n	8023440 <EE_Init+0x314>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8023404:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023406:	4a33      	ldr	r2, [pc, #204]	; (80234d4 <EE_Init+0x3a8>)
 8023408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802340c:	4932      	ldr	r1, [pc, #200]	; (80234d8 <EE_Init+0x3ac>)
 802340e:	4618      	mov	r0, r3
 8023410:	f000 f88e 	bl	8023530 <EE_ReadVariable>
 8023414:	4603      	mov	r3, r0
 8023416:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8023418:	8bbb      	ldrh	r3, [r7, #28]
 802341a:	2b01      	cmp	r3, #1
 802341c:	d010      	beq.n	8023440 <EE_Init+0x314>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 802341e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023420:	4a2c      	ldr	r2, [pc, #176]	; (80234d4 <EE_Init+0x3a8>)
 8023422:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8023426:	4b2c      	ldr	r3, [pc, #176]	; (80234d8 <EE_Init+0x3ac>)
 8023428:	881b      	ldrh	r3, [r3, #0]
 802342a:	4619      	mov	r1, r3
 802342c:	4610      	mov	r0, r2
 802342e:	f000 f983 	bl	8023738 <EE_VerifyPageFullWriteVariable>
 8023432:	4603      	mov	r3, r0
 8023434:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8023436:	8bfb      	ldrh	r3, [r7, #30]
 8023438:	2b00      	cmp	r3, #0
 802343a:	d001      	beq.n	8023440 <EE_Init+0x314>
              {
                return EepromStatus;
 802343c:	8bfb      	ldrh	r3, [r7, #30]
 802343e:	e042      	b.n	80234c6 <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8023440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023442:	3301      	adds	r3, #1
 8023444:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023446:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023448:	2b12      	cmp	r3, #18
 802344a:	d9cb      	bls.n	80233e4 <EE_Init+0x2b8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 802344c:	f04f 0200 	mov.w	r2, #0
 8023450:	f04f 0300 	mov.w	r3, #0
 8023454:	4921      	ldr	r1, [pc, #132]	; (80234dc <EE_Init+0x3b0>)
 8023456:	2001      	movs	r0, #1
 8023458:	f7ee fc82 	bl	8011d60 <HAL_FLASH_Program>
 802345c:	4603      	mov	r3, r0
 802345e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8023460:	7efb      	ldrb	r3, [r7, #27]
 8023462:	2b00      	cmp	r3, #0
 8023464:	d002      	beq.n	802346c <EE_Init+0x340>
        {
          return FlashStatus;
 8023466:	7efb      	ldrb	r3, [r7, #27]
 8023468:	b29b      	uxth	r3, r3
 802346a:	e02c      	b.n	80234c6 <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE0_ID;
 802346c:	2302      	movs	r3, #2
 802346e:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8023470:	2301      	movs	r3, #1
 8023472:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023474:	2302      	movs	r3, #2
 8023476:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8023478:	4819      	ldr	r0, [pc, #100]	; (80234e0 <EE_Init+0x3b4>)
 802347a:	f000 f833 	bl	80234e4 <EE_VerifyPageFullyErased>
 802347e:	4603      	mov	r3, r0
 8023480:	2b00      	cmp	r3, #0
 8023482:	d11c      	bne.n	80234be <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8023484:	f107 0214 	add.w	r2, r7, #20
 8023488:	463b      	mov	r3, r7
 802348a:	4611      	mov	r1, r2
 802348c:	4618      	mov	r0, r3
 802348e:	f7ee fe07 	bl	80120a0 <HAL_FLASHEx_Erase>
 8023492:	4603      	mov	r3, r0
 8023494:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8023496:	7efb      	ldrb	r3, [r7, #27]
 8023498:	2b00      	cmp	r3, #0
 802349a:	d010      	beq.n	80234be <EE_Init+0x392>
          {
            return FlashStatus;
 802349c:	7efb      	ldrb	r3, [r7, #27]
 802349e:	b29b      	uxth	r3, r3
 80234a0:	e011      	b.n	80234c6 <EE_Init+0x39a>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80234a2:	f000 f8b1 	bl	8023608 <EE_Format>
 80234a6:	4603      	mov	r3, r0
 80234a8:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80234aa:	7efb      	ldrb	r3, [r7, #27]
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	d008      	beq.n	80234c2 <EE_Init+0x396>
      {
        return FlashStatus;
 80234b0:	7efb      	ldrb	r3, [r7, #27]
 80234b2:	b29b      	uxth	r3, r3
 80234b4:	e007      	b.n	80234c6 <EE_Init+0x39a>
      break;
 80234b6:	bf00      	nop
 80234b8:	e004      	b.n	80234c4 <EE_Init+0x398>
      break;
 80234ba:	bf00      	nop
 80234bc:	e002      	b.n	80234c4 <EE_Init+0x398>
      break;
 80234be:	bf00      	nop
 80234c0:	e000      	b.n	80234c4 <EE_Init+0x398>
      }
      break;
 80234c2:	bf00      	nop
  }

  return HAL_OK;
 80234c4:	2300      	movs	r3, #0
}
 80234c6:	4618      	mov	r0, r3
 80234c8:	3728      	adds	r7, #40	; 0x28
 80234ca:	46bd      	mov	sp, r7
 80234cc:	bd80      	pop	{r7, pc}
 80234ce:	bf00      	nop
 80234d0:	0800c006 	.word	0x0800c006
 80234d4:	20000010 	.word	0x20000010
 80234d8:	20009534 	.word	0x20009534
 80234dc:	0800c000 	.word	0x0800c000
 80234e0:	08008000 	.word	0x08008000

080234e4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80234e4:	b480      	push	{r7}
 80234e6:	b085      	sub	sp, #20
 80234e8:	af00      	add	r7, sp, #0
 80234ea:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 80234ec:	2301      	movs	r3, #1
 80234ee:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 80234f0:	f245 5355 	movw	r3, #21845	; 0x5555
 80234f4:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 80234f6:	e00d      	b.n	8023514 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80234f8:	687b      	ldr	r3, [r7, #4]
 80234fa:	881b      	ldrh	r3, [r3, #0]
 80234fc:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80234fe:	897b      	ldrh	r3, [r7, #10]
 8023500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023504:	4293      	cmp	r3, r2
 8023506:	d002      	beq.n	802350e <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8023508:	2300      	movs	r3, #0
 802350a:	60fb      	str	r3, [r7, #12]

      break;
 802350c:	e006      	b.n	802351c <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 802350e:	687b      	ldr	r3, [r7, #4]
 8023510:	3304      	adds	r3, #4
 8023512:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8023514:	687b      	ldr	r3, [r7, #4]
 8023516:	4a05      	ldr	r2, [pc, #20]	; (802352c <EE_VerifyPageFullyErased+0x48>)
 8023518:	4293      	cmp	r3, r2
 802351a:	d9ed      	bls.n	80234f8 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 802351c:	68fb      	ldr	r3, [r7, #12]
 802351e:	b29b      	uxth	r3, r3
}
 8023520:	4618      	mov	r0, r3
 8023522:	3714      	adds	r7, #20
 8023524:	46bd      	mov	sp, r7
 8023526:	f85d 7b04 	ldr.w	r7, [sp], #4
 802352a:	4770      	bx	lr
 802352c:	0800bfff 	.word	0x0800bfff

08023530 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8023530:	b580      	push	{r7, lr}
 8023532:	b086      	sub	sp, #24
 8023534:	af00      	add	r7, sp, #0
 8023536:	4603      	mov	r3, r0
 8023538:	6039      	str	r1, [r7, #0]
 802353a:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 802353c:	2300      	movs	r3, #0
 802353e:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8023540:	f245 5355 	movw	r3, #21845	; 0x5555
 8023544:	81bb      	strh	r3, [r7, #12]
 8023546:	2301      	movs	r3, #1
 8023548:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 802354a:	4b1c      	ldr	r3, [pc, #112]	; (80235bc <EE_ReadVariable+0x8c>)
 802354c:	613b      	str	r3, [r7, #16]
 802354e:	4b1b      	ldr	r3, [pc, #108]	; (80235bc <EE_ReadVariable+0x8c>)
 8023550:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8023552:	2000      	movs	r0, #0
 8023554:	f000 f8aa 	bl	80236ac <EE_FindValidPage>
 8023558:	4603      	mov	r3, r0
 802355a:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 802355c:	89fb      	ldrh	r3, [r7, #14]
 802355e:	2bab      	cmp	r3, #171	; 0xab
 8023560:	d101      	bne.n	8023566 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8023562:	23ab      	movs	r3, #171	; 0xab
 8023564:	e025      	b.n	80235b2 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8023566:	89fb      	ldrh	r3, [r7, #14]
 8023568:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802356c:	3302      	adds	r3, #2
 802356e:	039b      	lsls	r3, r3, #14
 8023570:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8023572:	89fb      	ldrh	r3, [r7, #14]
 8023574:	3301      	adds	r3, #1
 8023576:	039a      	lsls	r2, r3, #14
 8023578:	4b11      	ldr	r3, [pc, #68]	; (80235c0 <EE_ReadVariable+0x90>)
 802357a:	4413      	add	r3, r2
 802357c:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 802357e:	e012      	b.n	80235a6 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8023580:	693b      	ldr	r3, [r7, #16]
 8023582:	881b      	ldrh	r3, [r3, #0]
 8023584:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8023586:	89ba      	ldrh	r2, [r7, #12]
 8023588:	88fb      	ldrh	r3, [r7, #6]
 802358a:	429a      	cmp	r2, r3
 802358c:	d108      	bne.n	80235a0 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 802358e:	693b      	ldr	r3, [r7, #16]
 8023590:	3b02      	subs	r3, #2
 8023592:	881b      	ldrh	r3, [r3, #0]
 8023594:	b29a      	uxth	r2, r3
 8023596:	683b      	ldr	r3, [r7, #0]
 8023598:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 802359a:	2300      	movs	r3, #0
 802359c:	82fb      	strh	r3, [r7, #22]

      break;
 802359e:	e007      	b.n	80235b0 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 80235a0:	693b      	ldr	r3, [r7, #16]
 80235a2:	3b04      	subs	r3, #4
 80235a4:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80235a6:	68bb      	ldr	r3, [r7, #8]
 80235a8:	1c9a      	adds	r2, r3, #2
 80235aa:	693b      	ldr	r3, [r7, #16]
 80235ac:	429a      	cmp	r2, r3
 80235ae:	d3e7      	bcc.n	8023580 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80235b0:	8afb      	ldrh	r3, [r7, #22]
}
 80235b2:	4618      	mov	r0, r3
 80235b4:	3718      	adds	r7, #24
 80235b6:	46bd      	mov	sp, r7
 80235b8:	bd80      	pop	{r7, pc}
 80235ba:	bf00      	nop
 80235bc:	08008000 	.word	0x08008000
 80235c0:	08007ffe 	.word	0x08007ffe

080235c4 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80235c4:	b580      	push	{r7, lr}
 80235c6:	b084      	sub	sp, #16
 80235c8:	af00      	add	r7, sp, #0
 80235ca:	4603      	mov	r3, r0
 80235cc:	460a      	mov	r2, r1
 80235ce:	80fb      	strh	r3, [r7, #6]
 80235d0:	4613      	mov	r3, r2
 80235d2:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80235d4:	2300      	movs	r3, #0
 80235d6:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80235d8:	88ba      	ldrh	r2, [r7, #4]
 80235da:	88fb      	ldrh	r3, [r7, #6]
 80235dc:	4611      	mov	r1, r2
 80235de:	4618      	mov	r0, r3
 80235e0:	f000 f8aa 	bl	8023738 <EE_VerifyPageFullWriteVariable>
 80235e4:	4603      	mov	r3, r0
 80235e6:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80235e8:	89fb      	ldrh	r3, [r7, #14]
 80235ea:	2b80      	cmp	r3, #128	; 0x80
 80235ec:	d107      	bne.n	80235fe <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80235ee:	88ba      	ldrh	r2, [r7, #4]
 80235f0:	88fb      	ldrh	r3, [r7, #6]
 80235f2:	4611      	mov	r1, r2
 80235f4:	4618      	mov	r0, r3
 80235f6:	f000 f8fd 	bl	80237f4 <EE_PageTransfer>
 80235fa:	4603      	mov	r3, r0
 80235fc:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80235fe:	89fb      	ldrh	r3, [r7, #14]
}
 8023600:	4618      	mov	r0, r3
 8023602:	3710      	adds	r7, #16
 8023604:	46bd      	mov	sp, r7
 8023606:	bd80      	pop	{r7, pc}

08023608 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8023608:	b580      	push	{r7, lr}
 802360a:	b088      	sub	sp, #32
 802360c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 802360e:	2300      	movs	r3, #0
 8023610:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8023612:	2300      	movs	r3, #0
 8023614:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8023616:	2300      	movs	r3, #0
 8023618:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 802361a:	2302      	movs	r3, #2
 802361c:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 802361e:	2301      	movs	r3, #1
 8023620:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023622:	2302      	movs	r3, #2
 8023624:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8023626:	481f      	ldr	r0, [pc, #124]	; (80236a4 <EE_Format+0x9c>)
 8023628:	f7ff ff5c 	bl	80234e4 <EE_VerifyPageFullyErased>
 802362c:	4603      	mov	r3, r0
 802362e:	2b00      	cmp	r3, #0
 8023630:	d10d      	bne.n	802364e <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8023632:	f107 0218 	add.w	r2, r7, #24
 8023636:	1d3b      	adds	r3, r7, #4
 8023638:	4611      	mov	r1, r2
 802363a:	4618      	mov	r0, r3
 802363c:	f7ee fd30 	bl	80120a0 <HAL_FLASHEx_Erase>
 8023640:	4603      	mov	r3, r0
 8023642:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8023644:	7ffb      	ldrb	r3, [r7, #31]
 8023646:	2b00      	cmp	r3, #0
 8023648:	d001      	beq.n	802364e <EE_Format+0x46>
    {
      return FlashStatus;
 802364a:	7ffb      	ldrb	r3, [r7, #31]
 802364c:	e025      	b.n	802369a <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 802364e:	f04f 0200 	mov.w	r2, #0
 8023652:	f04f 0300 	mov.w	r3, #0
 8023656:	4913      	ldr	r1, [pc, #76]	; (80236a4 <EE_Format+0x9c>)
 8023658:	2001      	movs	r0, #1
 802365a:	f7ee fb81 	bl	8011d60 <HAL_FLASH_Program>
 802365e:	4603      	mov	r3, r0
 8023660:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8023662:	7ffb      	ldrb	r3, [r7, #31]
 8023664:	2b00      	cmp	r3, #0
 8023666:	d001      	beq.n	802366c <EE_Format+0x64>
  {
    return FlashStatus;
 8023668:	7ffb      	ldrb	r3, [r7, #31]
 802366a:	e016      	b.n	802369a <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 802366c:	2303      	movs	r3, #3
 802366e:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8023670:	480d      	ldr	r0, [pc, #52]	; (80236a8 <EE_Format+0xa0>)
 8023672:	f7ff ff37 	bl	80234e4 <EE_VerifyPageFullyErased>
 8023676:	4603      	mov	r3, r0
 8023678:	2b00      	cmp	r3, #0
 802367a:	d10d      	bne.n	8023698 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 802367c:	f107 0218 	add.w	r2, r7, #24
 8023680:	1d3b      	adds	r3, r7, #4
 8023682:	4611      	mov	r1, r2
 8023684:	4618      	mov	r0, r3
 8023686:	f7ee fd0b 	bl	80120a0 <HAL_FLASHEx_Erase>
 802368a:	4603      	mov	r3, r0
 802368c:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 802368e:	7ffb      	ldrb	r3, [r7, #31]
 8023690:	2b00      	cmp	r3, #0
 8023692:	d001      	beq.n	8023698 <EE_Format+0x90>
    {
      return FlashStatus;
 8023694:	7ffb      	ldrb	r3, [r7, #31]
 8023696:	e000      	b.n	802369a <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8023698:	2300      	movs	r3, #0
}
 802369a:	4618      	mov	r0, r3
 802369c:	3720      	adds	r7, #32
 802369e:	46bd      	mov	sp, r7
 80236a0:	bd80      	pop	{r7, pc}
 80236a2:	bf00      	nop
 80236a4:	08008000 	.word	0x08008000
 80236a8:	0800c000 	.word	0x0800c000

080236ac <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80236ac:	b480      	push	{r7}
 80236ae:	b085      	sub	sp, #20
 80236b0:	af00      	add	r7, sp, #0
 80236b2:	4603      	mov	r3, r0
 80236b4:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80236b6:	2306      	movs	r3, #6
 80236b8:	81fb      	strh	r3, [r7, #14]
 80236ba:	2306      	movs	r3, #6
 80236bc:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80236be:	4b1c      	ldr	r3, [pc, #112]	; (8023730 <EE_FindValidPage+0x84>)
 80236c0:	881b      	ldrh	r3, [r3, #0]
 80236c2:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80236c4:	4b1b      	ldr	r3, [pc, #108]	; (8023734 <EE_FindValidPage+0x88>)
 80236c6:	881b      	ldrh	r3, [r3, #0]
 80236c8:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80236ca:	79fb      	ldrb	r3, [r7, #7]
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	d01b      	beq.n	8023708 <EE_FindValidPage+0x5c>
 80236d0:	2b01      	cmp	r3, #1
 80236d2:	d125      	bne.n	8023720 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 80236d4:	89bb      	ldrh	r3, [r7, #12]
 80236d6:	2b00      	cmp	r3, #0
 80236d8:	d108      	bne.n	80236ec <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 80236da:	89fb      	ldrh	r3, [r7, #14]
 80236dc:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80236e0:	4293      	cmp	r3, r2
 80236e2:	d101      	bne.n	80236e8 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80236e4:	2300      	movs	r3, #0
 80236e6:	e01c      	b.n	8023722 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80236e8:	2301      	movs	r3, #1
 80236ea:	e01a      	b.n	8023722 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 80236ec:	89fb      	ldrh	r3, [r7, #14]
 80236ee:	2b00      	cmp	r3, #0
 80236f0:	d108      	bne.n	8023704 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 80236f2:	89bb      	ldrh	r3, [r7, #12]
 80236f4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80236f8:	4293      	cmp	r3, r2
 80236fa:	d101      	bne.n	8023700 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 80236fc:	2301      	movs	r3, #1
 80236fe:	e010      	b.n	8023722 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8023700:	2300      	movs	r3, #0
 8023702:	e00e      	b.n	8023722 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8023704:	23ab      	movs	r3, #171	; 0xab
 8023706:	e00c      	b.n	8023722 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8023708:	89fb      	ldrh	r3, [r7, #14]
 802370a:	2b00      	cmp	r3, #0
 802370c:	d101      	bne.n	8023712 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 802370e:	2300      	movs	r3, #0
 8023710:	e007      	b.n	8023722 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8023712:	89bb      	ldrh	r3, [r7, #12]
 8023714:	2b00      	cmp	r3, #0
 8023716:	d101      	bne.n	802371c <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8023718:	2301      	movs	r3, #1
 802371a:	e002      	b.n	8023722 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 802371c:	23ab      	movs	r3, #171	; 0xab
 802371e:	e000      	b.n	8023722 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8023720:	2300      	movs	r3, #0
  }
}
 8023722:	4618      	mov	r0, r3
 8023724:	3714      	adds	r7, #20
 8023726:	46bd      	mov	sp, r7
 8023728:	f85d 7b04 	ldr.w	r7, [sp], #4
 802372c:	4770      	bx	lr
 802372e:	bf00      	nop
 8023730:	08008000 	.word	0x08008000
 8023734:	0800c000 	.word	0x0800c000

08023738 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8023738:	b590      	push	{r4, r7, lr}
 802373a:	b087      	sub	sp, #28
 802373c:	af00      	add	r7, sp, #0
 802373e:	4603      	mov	r3, r0
 8023740:	460a      	mov	r2, r1
 8023742:	80fb      	strh	r3, [r7, #6]
 8023744:	4613      	mov	r3, r2
 8023746:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8023748:	2300      	movs	r3, #0
 802374a:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 802374c:	2300      	movs	r3, #0
 802374e:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8023750:	4b25      	ldr	r3, [pc, #148]	; (80237e8 <EE_VerifyPageFullWriteVariable+0xb0>)
 8023752:	617b      	str	r3, [r7, #20]
 8023754:	4b25      	ldr	r3, [pc, #148]	; (80237ec <EE_VerifyPageFullWriteVariable+0xb4>)
 8023756:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8023758:	2001      	movs	r0, #1
 802375a:	f7ff ffa7 	bl	80236ac <EE_FindValidPage>
 802375e:	4603      	mov	r3, r0
 8023760:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8023762:	8a3b      	ldrh	r3, [r7, #16]
 8023764:	2bab      	cmp	r3, #171	; 0xab
 8023766:	d101      	bne.n	802376c <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8023768:	23ab      	movs	r3, #171	; 0xab
 802376a:	e039      	b.n	80237e0 <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 802376c:	8a3b      	ldrh	r3, [r7, #16]
 802376e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023772:	3302      	adds	r3, #2
 8023774:	039b      	lsls	r3, r3, #14
 8023776:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8023778:	8a3b      	ldrh	r3, [r7, #16]
 802377a:	3301      	adds	r3, #1
 802377c:	039a      	lsls	r2, r3, #14
 802377e:	4b1c      	ldr	r3, [pc, #112]	; (80237f0 <EE_VerifyPageFullWriteVariable+0xb8>)
 8023780:	4413      	add	r3, r2
 8023782:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8023784:	e027      	b.n	80237d6 <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8023786:	697b      	ldr	r3, [r7, #20]
 8023788:	681b      	ldr	r3, [r3, #0]
 802378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802378e:	d11f      	bne.n	80237d0 <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8023790:	88bb      	ldrh	r3, [r7, #4]
 8023792:	f04f 0400 	mov.w	r4, #0
 8023796:	461a      	mov	r2, r3
 8023798:	4623      	mov	r3, r4
 802379a:	6979      	ldr	r1, [r7, #20]
 802379c:	2001      	movs	r0, #1
 802379e:	f7ee fadf 	bl	8011d60 <HAL_FLASH_Program>
 80237a2:	4603      	mov	r3, r0
 80237a4:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80237a6:	7cfb      	ldrb	r3, [r7, #19]
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	d002      	beq.n	80237b2 <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return FlashStatus;
 80237ac:	7cfb      	ldrb	r3, [r7, #19]
 80237ae:	b29b      	uxth	r3, r3
 80237b0:	e016      	b.n	80237e0 <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 80237b2:	697b      	ldr	r3, [r7, #20]
 80237b4:	1c99      	adds	r1, r3, #2
 80237b6:	88fb      	ldrh	r3, [r7, #6]
 80237b8:	f04f 0400 	mov.w	r4, #0
 80237bc:	461a      	mov	r2, r3
 80237be:	4623      	mov	r3, r4
 80237c0:	2001      	movs	r0, #1
 80237c2:	f7ee facd 	bl	8011d60 <HAL_FLASH_Program>
 80237c6:	4603      	mov	r3, r0
 80237c8:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 80237ca:	7cfb      	ldrb	r3, [r7, #19]
 80237cc:	b29b      	uxth	r3, r3
 80237ce:	e007      	b.n	80237e0 <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80237d0:	697b      	ldr	r3, [r7, #20]
 80237d2:	3304      	adds	r3, #4
 80237d4:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 80237d6:	697a      	ldr	r2, [r7, #20]
 80237d8:	68fb      	ldr	r3, [r7, #12]
 80237da:	429a      	cmp	r2, r3
 80237dc:	d3d3      	bcc.n	8023786 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80237de:	2380      	movs	r3, #128	; 0x80
}
 80237e0:	4618      	mov	r0, r3
 80237e2:	371c      	adds	r7, #28
 80237e4:	46bd      	mov	sp, r7
 80237e6:	bd90      	pop	{r4, r7, pc}
 80237e8:	08008000 	.word	0x08008000
 80237ec:	0800c000 	.word	0x0800c000
 80237f0:	08007fff 	.word	0x08007fff

080237f4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 80237f4:	b580      	push	{r7, lr}
 80237f6:	b08c      	sub	sp, #48	; 0x30
 80237f8:	af00      	add	r7, sp, #0
 80237fa:	4603      	mov	r3, r0
 80237fc:	460a      	mov	r2, r1
 80237fe:	80fb      	strh	r3, [r7, #6]
 8023800:	4613      	mov	r3, r2
 8023802:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8023804:	2300      	movs	r3, #0
 8023806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 802380a:	4b54      	ldr	r3, [pc, #336]	; (802395c <EE_PageTransfer+0x168>)
 802380c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 802380e:	2300      	movs	r3, #0
 8023810:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8023812:	2300      	movs	r3, #0
 8023814:	84bb      	strh	r3, [r7, #36]	; 0x24
 8023816:	2300      	movs	r3, #0
 8023818:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 802381a:	2300      	movs	r3, #0
 802381c:	847b      	strh	r3, [r7, #34]	; 0x22
 802381e:	2300      	movs	r3, #0
 8023820:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8023822:	2300      	movs	r3, #0
 8023824:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8023826:	2000      	movs	r0, #0
 8023828:	f7ff ff40 	bl	80236ac <EE_FindValidPage>
 802382c:	4603      	mov	r3, r0
 802382e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8023830:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023832:	2b01      	cmp	r3, #1
 8023834:	d104      	bne.n	8023840 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8023836:	4b49      	ldr	r3, [pc, #292]	; (802395c <EE_PageTransfer+0x168>)
 8023838:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 802383a:	2303      	movs	r3, #3
 802383c:	857b      	strh	r3, [r7, #42]	; 0x2a
 802383e:	e009      	b.n	8023854 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8023840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023842:	2b00      	cmp	r3, #0
 8023844:	d104      	bne.n	8023850 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8023846:	4b46      	ldr	r3, [pc, #280]	; (8023960 <EE_PageTransfer+0x16c>)
 8023848:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 802384a:	2302      	movs	r3, #2
 802384c:	857b      	strh	r3, [r7, #42]	; 0x2a
 802384e:	e001      	b.n	8023854 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8023850:	23ab      	movs	r3, #171	; 0xab
 8023852:	e07e      	b.n	8023952 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8023854:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023858:	f04f 0300 	mov.w	r3, #0
 802385c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802385e:	2001      	movs	r0, #1
 8023860:	f7ee fa7e 	bl	8011d60 <HAL_FLASH_Program>
 8023864:	4603      	mov	r3, r0
 8023866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 802386a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802386e:	2b00      	cmp	r3, #0
 8023870:	d003      	beq.n	802387a <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8023872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023876:	b29b      	uxth	r3, r3
 8023878:	e06b      	b.n	8023952 <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 802387a:	88ba      	ldrh	r2, [r7, #4]
 802387c:	88fb      	ldrh	r3, [r7, #6]
 802387e:	4611      	mov	r1, r2
 8023880:	4618      	mov	r0, r3
 8023882:	f7ff ff59 	bl	8023738 <EE_VerifyPageFullWriteVariable>
 8023886:	4603      	mov	r3, r0
 8023888:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 802388a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802388c:	2b00      	cmp	r3, #0
 802388e:	d001      	beq.n	8023894 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8023890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023892:	e05e      	b.n	8023952 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8023894:	2300      	movs	r3, #0
 8023896:	853b      	strh	r3, [r7, #40]	; 0x28
 8023898:	e027      	b.n	80238ea <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 802389a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802389c:	4a31      	ldr	r2, [pc, #196]	; (8023964 <EE_PageTransfer+0x170>)
 802389e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80238a2:	88fa      	ldrh	r2, [r7, #6]
 80238a4:	429a      	cmp	r2, r3
 80238a6:	d01d      	beq.n	80238e4 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80238a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80238aa:	4a2e      	ldr	r2, [pc, #184]	; (8023964 <EE_PageTransfer+0x170>)
 80238ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80238b0:	492d      	ldr	r1, [pc, #180]	; (8023968 <EE_PageTransfer+0x174>)
 80238b2:	4618      	mov	r0, r3
 80238b4:	f7ff fe3c 	bl	8023530 <EE_ReadVariable>
 80238b8:	4603      	mov	r3, r0
 80238ba:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80238bc:	8c3b      	ldrh	r3, [r7, #32]
 80238be:	2b01      	cmp	r3, #1
 80238c0:	d010      	beq.n	80238e4 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80238c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80238c4:	4a27      	ldr	r2, [pc, #156]	; (8023964 <EE_PageTransfer+0x170>)
 80238c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80238ca:	4b27      	ldr	r3, [pc, #156]	; (8023968 <EE_PageTransfer+0x174>)
 80238cc:	881b      	ldrh	r3, [r3, #0]
 80238ce:	4619      	mov	r1, r3
 80238d0:	4610      	mov	r0, r2
 80238d2:	f7ff ff31 	bl	8023738 <EE_VerifyPageFullWriteVariable>
 80238d6:	4603      	mov	r3, r0
 80238d8:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80238da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80238dc:	2b00      	cmp	r3, #0
 80238de:	d001      	beq.n	80238e4 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 80238e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80238e2:	e036      	b.n	8023952 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80238e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80238e6:	3301      	adds	r3, #1
 80238e8:	853b      	strh	r3, [r7, #40]	; 0x28
 80238ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80238ec:	2b12      	cmp	r3, #18
 80238ee:	d9d4      	bls.n	802389a <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80238f0:	2300      	movs	r3, #0
 80238f2:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 80238f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80238f6:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 80238f8:	2301      	movs	r3, #1
 80238fa:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80238fc:	2302      	movs	r3, #2
 80238fe:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8023900:	f107 021c 	add.w	r2, r7, #28
 8023904:	f107 0308 	add.w	r3, r7, #8
 8023908:	4611      	mov	r1, r2
 802390a:	4618      	mov	r0, r3
 802390c:	f7ee fbc8 	bl	80120a0 <HAL_FLASHEx_Erase>
 8023910:	4603      	mov	r3, r0
 8023912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8023916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802391a:	2b00      	cmp	r3, #0
 802391c:	d003      	beq.n	8023926 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 802391e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023922:	b29b      	uxth	r3, r3
 8023924:	e015      	b.n	8023952 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8023926:	f04f 0200 	mov.w	r2, #0
 802392a:	f04f 0300 	mov.w	r3, #0
 802392e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023930:	2001      	movs	r0, #1
 8023932:	f7ee fa15 	bl	8011d60 <HAL_FLASH_Program>
 8023936:	4603      	mov	r3, r0
 8023938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 802393c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023940:	2b00      	cmp	r3, #0
 8023942:	d003      	beq.n	802394c <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8023944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023948:	b29b      	uxth	r3, r3
 802394a:	e002      	b.n	8023952 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 802394c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023950:	b29b      	uxth	r3, r3
}
 8023952:	4618      	mov	r0, r3
 8023954:	3730      	adds	r7, #48	; 0x30
 8023956:	46bd      	mov	sp, r7
 8023958:	bd80      	pop	{r7, pc}
 802395a:	bf00      	nop
 802395c:	08008000 	.word	0x08008000
 8023960:	0800c000 	.word	0x0800c000
 8023964:	20000010 	.word	0x20000010
 8023968:	20009534 	.word	0x20009534

0802396c <HAL_ETH_MspInit>:

/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle) {
 802396c:	b580      	push	{r7, lr}
 802396e:	b08a      	sub	sp, #40	; 0x28
 8023970:	af00      	add	r7, sp, #0
 8023972:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	if (ethHandle->Instance == ETH) {
 8023974:	687b      	ldr	r3, [r7, #4]
 8023976:	681b      	ldr	r3, [r3, #0]
 8023978:	4a34      	ldr	r2, [pc, #208]	; (8023a4c <HAL_ETH_MspInit+0xe0>)
 802397a:	4293      	cmp	r3, r2
 802397c:	d162      	bne.n	8023a44 <HAL_ETH_MspInit+0xd8>
		/* USER CODE BEGIN ETH_MspInit 0 */

		/* USER CODE END ETH_MspInit 0 */
		/* Enable Peripheral clock */
		__HAL_RCC_ETH_CLK_ENABLE()
 802397e:	2300      	movs	r3, #0
 8023980:	613b      	str	r3, [r7, #16]
 8023982:	4a33      	ldr	r2, [pc, #204]	; (8023a50 <HAL_ETH_MspInit+0xe4>)
 8023984:	4b32      	ldr	r3, [pc, #200]	; (8023a50 <HAL_ETH_MspInit+0xe4>)
 8023986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023988:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 802398c:	6313      	str	r3, [r2, #48]	; 0x30
 802398e:	4b30      	ldr	r3, [pc, #192]	; (8023a50 <HAL_ETH_MspInit+0xe4>)
 8023990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023996:	613b      	str	r3, [r7, #16]
 8023998:	693b      	ldr	r3, [r7, #16]
 802399a:	2300      	movs	r3, #0
 802399c:	60fb      	str	r3, [r7, #12]
 802399e:	4a2c      	ldr	r2, [pc, #176]	; (8023a50 <HAL_ETH_MspInit+0xe4>)
 80239a0:	4b2b      	ldr	r3, [pc, #172]	; (8023a50 <HAL_ETH_MspInit+0xe4>)
 80239a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80239a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80239a8:	6313      	str	r3, [r2, #48]	; 0x30
 80239aa:	4b29      	ldr	r3, [pc, #164]	; (8023a50 <HAL_ETH_MspInit+0xe4>)
 80239ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80239ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80239b2:	60fb      	str	r3, [r7, #12]
 80239b4:	68fb      	ldr	r3, [r7, #12]
 80239b6:	2300      	movs	r3, #0
 80239b8:	60bb      	str	r3, [r7, #8]
 80239ba:	4a25      	ldr	r2, [pc, #148]	; (8023a50 <HAL_ETH_MspInit+0xe4>)
 80239bc:	4b24      	ldr	r3, [pc, #144]	; (8023a50 <HAL_ETH_MspInit+0xe4>)
 80239be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80239c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80239c4:	6313      	str	r3, [r2, #48]	; 0x30
 80239c6:	4b22      	ldr	r3, [pc, #136]	; (8023a50 <HAL_ETH_MspInit+0xe4>)
 80239c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80239ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80239ce:	60bb      	str	r3, [r7, #8]
 80239d0:	68bb      	ldr	r3, [r7, #8]
		 PB10     ------> ETH_RX_ER
		 PB11     ------> ETH_TX_EN
		 PB12     ------> ETH_TXD0
		 PB13     ------> ETH_TXD1
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 80239d2:	2332      	movs	r3, #50	; 0x32
 80239d4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80239d6:	2302      	movs	r3, #2
 80239d8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80239da:	2300      	movs	r3, #0
 80239dc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80239de:	2303      	movs	r3, #3
 80239e0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80239e2:	230b      	movs	r3, #11
 80239e4:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80239e6:	f107 0314 	add.w	r3, r7, #20
 80239ea:	4619      	mov	r1, r3
 80239ec:	4819      	ldr	r0, [pc, #100]	; (8023a54 <HAL_ETH_MspInit+0xe8>)
 80239ee:	f7ee fc79 	bl	80122e4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 80239f2:	2386      	movs	r3, #134	; 0x86
 80239f4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80239f6:	2302      	movs	r3, #2
 80239f8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80239fa:	2300      	movs	r3, #0
 80239fc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80239fe:	2303      	movs	r3, #3
 8023a00:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8023a02:	230b      	movs	r3, #11
 8023a04:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023a06:	f107 0314 	add.w	r3, r7, #20
 8023a0a:	4619      	mov	r1, r3
 8023a0c:	4812      	ldr	r0, [pc, #72]	; (8023a58 <HAL_ETH_MspInit+0xec>)
 8023a0e:	f7ee fc69 	bl	80122e4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 8023a12:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8023a16:	617b      	str	r3, [r7, #20]
				| GPIO_PIN_13;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023a18:	2302      	movs	r3, #2
 8023a1a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023a1c:	2300      	movs	r3, #0
 8023a1e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023a20:	2303      	movs	r3, #3
 8023a22:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8023a24:	230b      	movs	r3, #11
 8023a26:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023a28:	f107 0314 	add.w	r3, r7, #20
 8023a2c:	4619      	mov	r1, r3
 8023a2e:	480b      	ldr	r0, [pc, #44]	; (8023a5c <HAL_ETH_MspInit+0xf0>)
 8023a30:	f7ee fc58 	bl	80122e4 <HAL_GPIO_Init>

		/* Peripheral interrupt init */
		HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8023a34:	2200      	movs	r2, #0
 8023a36:	2105      	movs	r1, #5
 8023a38:	203d      	movs	r0, #61	; 0x3d
 8023a3a:	f7ec fdbf 	bl	80105bc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ETH_IRQn);
 8023a3e:	203d      	movs	r0, #61	; 0x3d
 8023a40:	f7ec fdd8 	bl	80105f4 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN ETH_MspInit 1 */

		/* USER CODE END ETH_MspInit 1 */
	}
}
 8023a44:	bf00      	nop
 8023a46:	3728      	adds	r7, #40	; 0x28
 8023a48:	46bd      	mov	sp, r7
 8023a4a:	bd80      	pop	{r7, pc}
 8023a4c:	40028000 	.word	0x40028000
 8023a50:	40023800 	.word	0x40023800
 8023a54:	40020800 	.word	0x40020800
 8023a58:	40020000 	.word	0x40020000
 8023a5c:	40020400 	.word	0x40020400

08023a60 <HAL_ETH_RxCpltCallback>:
/**
 * @brief  Ethernet Rx Transfer completed callback
 * @param  heth: ETH handle
 * @retval None
 */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth) {
 8023a60:	b580      	push	{r7, lr}
 8023a62:	b082      	sub	sp, #8
 8023a64:	af00      	add	r7, sp, #0
 8023a66:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(s_xSemaphore);
 8023a68:	4b04      	ldr	r3, [pc, #16]	; (8023a7c <HAL_ETH_RxCpltCallback+0x1c>)
 8023a6a:	681b      	ldr	r3, [r3, #0]
 8023a6c:	4618      	mov	r0, r3
 8023a6e:	f7f0 fe1d 	bl	80146ac <osSemaphoreRelease>
}
 8023a72:	bf00      	nop
 8023a74:	3708      	adds	r7, #8
 8023a76:	46bd      	mov	sp, r7
 8023a78:	bd80      	pop	{r7, pc}
 8023a7a:	bf00      	nop
 8023a7c:	20009538 	.word	0x20009538

08023a80 <low_level_init>:
 * Called from ethernetif_init().
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif) {
 8023a80:	b5b0      	push	{r4, r5, r7, lr}
 8023a82:	b08e      	sub	sp, #56	; 0x38
 8023a84:	af00      	add	r7, sp, #0
 8023a86:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_eth_init_status;

	/* Init ETH */

	uint8_t MACAddr[6];
	heth.Instance = ETH;
 8023a88:	4b55      	ldr	r3, [pc, #340]	; (8023be0 <low_level_init+0x160>)
 8023a8a:	4a56      	ldr	r2, [pc, #344]	; (8023be4 <low_level_init+0x164>)
 8023a8c:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8023a8e:	4b54      	ldr	r3, [pc, #336]	; (8023be0 <low_level_init+0x160>)
 8023a90:	2201      	movs	r2, #1
 8023a92:	605a      	str	r2, [r3, #4]
	heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8023a94:	4b52      	ldr	r3, [pc, #328]	; (8023be0 <low_level_init+0x160>)
 8023a96:	2201      	movs	r2, #1
 8023a98:	821a      	strh	r2, [r3, #16]
	MACAddr[0] = hflash.mac_addr[0];
 8023a9a:	4b53      	ldr	r3, [pc, #332]	; (8023be8 <low_level_init+0x168>)
 8023a9c:	7f9b      	ldrb	r3, [r3, #30]
 8023a9e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	MACAddr[1] = hflash.mac_addr[1];
 8023aa2:	4b51      	ldr	r3, [pc, #324]	; (8023be8 <low_level_init+0x168>)
 8023aa4:	7fdb      	ldrb	r3, [r3, #31]
 8023aa6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	MACAddr[2] = hflash.mac_addr[2];
 8023aaa:	4b4f      	ldr	r3, [pc, #316]	; (8023be8 <low_level_init+0x168>)
 8023aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023ab0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	MACAddr[3] = hflash.mac_addr[3];
 8023ab4:	4b4c      	ldr	r3, [pc, #304]	; (8023be8 <low_level_init+0x168>)
 8023ab6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8023aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	MACAddr[4] = hflash.mac_addr[4];
 8023abe:	4b4a      	ldr	r3, [pc, #296]	; (8023be8 <low_level_init+0x168>)
 8023ac0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8023ac4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	MACAddr[5] = hflash.mac_addr[5];
 8023ac8:	4b47      	ldr	r3, [pc, #284]	; (8023be8 <low_level_init+0x168>)
 8023aca:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8023ace:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	heth.Init.MACAddr = &MACAddr[0];
 8023ad2:	4a43      	ldr	r2, [pc, #268]	; (8023be0 <low_level_init+0x160>)
 8023ad4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8023ad8:	6153      	str	r3, [r2, #20]
	heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8023ada:	4b41      	ldr	r3, [pc, #260]	; (8023be0 <low_level_init+0x160>)
 8023adc:	2201      	movs	r2, #1
 8023ade:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8023ae0:	4b3f      	ldr	r3, [pc, #252]	; (8023be0 <low_level_init+0x160>)
 8023ae2:	2200      	movs	r2, #0
 8023ae4:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8023ae6:	4b3e      	ldr	r3, [pc, #248]	; (8023be0 <low_level_init+0x160>)
 8023ae8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8023aec:	621a      	str	r2, [r3, #32]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	hal_eth_init_status = HAL_ETH_Init(&heth);
 8023aee:	483c      	ldr	r0, [pc, #240]	; (8023be0 <low_level_init+0x160>)
 8023af0:	f7ed f926 	bl	8010d40 <HAL_ETH_Init>
 8023af4:	4603      	mov	r3, r0
 8023af6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if (hal_eth_init_status == HAL_OK) {
 8023afa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8023afe:	2b00      	cmp	r3, #0
 8023b00:	d108      	bne.n	8023b14 <low_level_init+0x94>
		/* Set netif link flag */
		netif->flags |= NETIF_FLAG_LINK_UP;
 8023b02:	687b      	ldr	r3, [r7, #4]
 8023b04:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8023b08:	f043 0304 	orr.w	r3, r3, #4
 8023b0c:	b2da      	uxtb	r2, r3
 8023b0e:	687b      	ldr	r3, [r7, #4]
 8023b10:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}
	/* Initialize Tx Descriptors list: Chain Mode */
	HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8023b14:	2304      	movs	r3, #4
 8023b16:	4a35      	ldr	r2, [pc, #212]	; (8023bec <low_level_init+0x16c>)
 8023b18:	4935      	ldr	r1, [pc, #212]	; (8023bf0 <low_level_init+0x170>)
 8023b1a:	4831      	ldr	r0, [pc, #196]	; (8023be0 <low_level_init+0x160>)
 8023b1c:	f7ed faae 	bl	801107c <HAL_ETH_DMATxDescListInit>

	/* Initialize Rx Descriptors list: Chain Mode  */
	HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8023b20:	2304      	movs	r3, #4
 8023b22:	4a34      	ldr	r2, [pc, #208]	; (8023bf4 <low_level_init+0x174>)
 8023b24:	4934      	ldr	r1, [pc, #208]	; (8023bf8 <low_level_init+0x178>)
 8023b26:	482e      	ldr	r0, [pc, #184]	; (8023be0 <low_level_init+0x160>)
 8023b28:	f7ed fb11 	bl	801114e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET 

	/* set MAC hardware address length */
	netif->hwaddr_len = ETH_HWADDR_LEN;
 8023b2c:	687b      	ldr	r3, [r7, #4]
 8023b2e:	2206      	movs	r2, #6
 8023b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	/* set MAC hardware address */
	netif->hwaddr[0] = heth.Init.MACAddr[0];
 8023b34:	4b2a      	ldr	r3, [pc, #168]	; (8023be0 <low_level_init+0x160>)
 8023b36:	695b      	ldr	r3, [r3, #20]
 8023b38:	781a      	ldrb	r2, [r3, #0]
 8023b3a:	687b      	ldr	r3, [r7, #4]
 8023b3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	netif->hwaddr[1] = heth.Init.MACAddr[1];
 8023b40:	4b27      	ldr	r3, [pc, #156]	; (8023be0 <low_level_init+0x160>)
 8023b42:	695b      	ldr	r3, [r3, #20]
 8023b44:	785a      	ldrb	r2, [r3, #1]
 8023b46:	687b      	ldr	r3, [r7, #4]
 8023b48:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	netif->hwaddr[2] = heth.Init.MACAddr[2];
 8023b4c:	4b24      	ldr	r3, [pc, #144]	; (8023be0 <low_level_init+0x160>)
 8023b4e:	695b      	ldr	r3, [r3, #20]
 8023b50:	789a      	ldrb	r2, [r3, #2]
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	netif->hwaddr[3] = heth.Init.MACAddr[3];
 8023b58:	4b21      	ldr	r3, [pc, #132]	; (8023be0 <low_level_init+0x160>)
 8023b5a:	695b      	ldr	r3, [r3, #20]
 8023b5c:	78da      	ldrb	r2, [r3, #3]
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	netif->hwaddr[4] = heth.Init.MACAddr[4];
 8023b64:	4b1e      	ldr	r3, [pc, #120]	; (8023be0 <low_level_init+0x160>)
 8023b66:	695b      	ldr	r3, [r3, #20]
 8023b68:	791a      	ldrb	r2, [r3, #4]
 8023b6a:	687b      	ldr	r3, [r7, #4]
 8023b6c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	netif->hwaddr[5] = heth.Init.MACAddr[5];
 8023b70:	4b1b      	ldr	r3, [pc, #108]	; (8023be0 <low_level_init+0x160>)
 8023b72:	695b      	ldr	r3, [r3, #20]
 8023b74:	795a      	ldrb	r2, [r3, #5]
 8023b76:	687b      	ldr	r3, [r7, #4]
 8023b78:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	/* maximum transfer unit */
	netif->mtu = 1500;
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8023b82:	845a      	strh	r2, [r3, #34]	; 0x22

	/* Accept broadcast address and ARP traffic */
	/* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
#if LWIP_ARP
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8023b84:	687b      	ldr	r3, [r7, #4]
 8023b86:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8023b8a:	f043 030a 	orr.w	r3, r3, #10
 8023b8e:	b2da      	uxtb	r2, r3
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#else
	netif->flags |= NETIF_FLAG_BROADCAST;
#endif /* LWIP_ARP */

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
 8023b96:	2300      	movs	r3, #0
 8023b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8023b9a:	2300      	movs	r3, #0
 8023b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8023b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023ba2:	2101      	movs	r1, #1
 8023ba4:	4618      	mov	r0, r3
 8023ba6:	f7f0 fcfd 	bl	80145a4 <osSemaphoreCreate>
 8023baa:	4602      	mov	r2, r0
 8023bac:	4b13      	ldr	r3, [pc, #76]	; (8023bfc <low_level_init+0x17c>)
 8023bae:	601a      	str	r2, [r3, #0]

	/* create the task that handles the ETH_MAC */
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 8023bb0:	4b13      	ldr	r3, [pc, #76]	; (8023c00 <low_level_init+0x180>)
 8023bb2:	f107 040c 	add.w	r4, r7, #12
 8023bb6:	461d      	mov	r5, r3
 8023bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023bbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8023bc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			INTERFACE_THREAD_STACK_SIZE);
	osThreadCreate(osThread(EthIf), netif);
 8023bc4:	f107 030c 	add.w	r3, r7, #12
 8023bc8:	6879      	ldr	r1, [r7, #4]
 8023bca:	4618      	mov	r0, r3
 8023bcc:	f7f0 fbeb 	bl	80143a6 <osThreadCreate>
	/* Enable MAC and DMA transmission and reception */
	HAL_ETH_Start(&heth);
 8023bd0:	4803      	ldr	r0, [pc, #12]	; (8023be0 <low_level_init+0x160>)
 8023bd2:	f7ed fde4 	bl	801179e <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

	/* USER CODE BEGIN LOW_LEVEL_INIT */

	/* USER CODE END LOW_LEVEL_INIT */
}
 8023bd6:	bf00      	nop
 8023bd8:	3738      	adds	r7, #56	; 0x38
 8023bda:	46bd      	mov	sp, r7
 8023bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8023bde:	bf00      	nop
 8023be0:	200105f0 	.word	0x200105f0
 8023be4:	40028000 	.word	0x40028000
 8023be8:	2000ecfc 	.word	0x2000ecfc
 8023bec:	20010638 	.word	0x20010638
 8023bf0:	2000ed20 	.word	0x2000ed20
 8023bf4:	2000eda0 	.word	0x2000eda0
 8023bf8:	20010570 	.word	0x20010570
 8023bfc:	20009538 	.word	0x20009538
 8023c00:	0802b4fc 	.word	0x0802b4fc

08023c04 <low_level_output>:
 *       strange results. You might consider waiting for space in the DMA queue
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p) {
 8023c04:	b580      	push	{r7, lr}
 8023c06:	b08a      	sub	sp, #40	; 0x28
 8023c08:	af00      	add	r7, sp, #0
 8023c0a:	6078      	str	r0, [r7, #4]
 8023c0c:	6039      	str	r1, [r7, #0]
	err_t errval;
	struct pbuf *q;
	uint8_t *buffer = (uint8_t *) (heth.TxDesc->Buffer1Addr);
 8023c0e:	4b4b      	ldr	r3, [pc, #300]	; (8023d3c <low_level_output+0x138>)
 8023c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c12:	689b      	ldr	r3, [r3, #8]
 8023c14:	61fb      	str	r3, [r7, #28]
	__IO ETH_DMADescTypeDef *DmaTxDesc;
	uint32_t framelength = 0;
 8023c16:	2300      	movs	r3, #0
 8023c18:	617b      	str	r3, [r7, #20]
	uint32_t bufferoffset = 0;
 8023c1a:	2300      	movs	r3, #0
 8023c1c:	613b      	str	r3, [r7, #16]
	uint32_t byteslefttocopy = 0;
 8023c1e:	2300      	movs	r3, #0
 8023c20:	60fb      	str	r3, [r7, #12]
	uint32_t payloadoffset = 0;
 8023c22:	2300      	movs	r3, #0
 8023c24:	60bb      	str	r3, [r7, #8]
	DmaTxDesc = heth.TxDesc;
 8023c26:	4b45      	ldr	r3, [pc, #276]	; (8023d3c <low_level_output+0x138>)
 8023c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c2a:	61bb      	str	r3, [r7, #24]
	bufferoffset = 0;
 8023c2c:	2300      	movs	r3, #0
 8023c2e:	613b      	str	r3, [r7, #16]

	/* copy frame from pbufs to driver buffers */
	for (q = p; q != NULL; q = q->next) {
 8023c30:	683b      	ldr	r3, [r7, #0]
 8023c32:	623b      	str	r3, [r7, #32]
 8023c34:	e05a      	b.n	8023cec <low_level_output+0xe8>
		/* Is this buffer available? If not, goto error */
		if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET) {
 8023c36:	69bb      	ldr	r3, [r7, #24]
 8023c38:	681b      	ldr	r3, [r3, #0]
 8023c3a:	2b00      	cmp	r3, #0
 8023c3c:	da03      	bge.n	8023c46 <low_level_output+0x42>
			errval = ERR_USE;
 8023c3e:	23f8      	movs	r3, #248	; 0xf8
 8023c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			goto error;
 8023c44:	e05c      	b.n	8023d00 <low_level_output+0xfc>
		}

		/* Get bytes in current lwIP buffer */
		byteslefttocopy = q->len;
 8023c46:	6a3b      	ldr	r3, [r7, #32]
 8023c48:	895b      	ldrh	r3, [r3, #10]
 8023c4a:	60fb      	str	r3, [r7, #12]
		payloadoffset = 0;
 8023c4c:	2300      	movs	r3, #0
 8023c4e:	60bb      	str	r3, [r7, #8]

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
 8023c50:	e02f      	b.n	8023cb2 <low_level_output+0xae>
			/* Copy data to Tx buffer*/
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8023c52:	69fa      	ldr	r2, [r7, #28]
 8023c54:	693b      	ldr	r3, [r7, #16]
 8023c56:	18d0      	adds	r0, r2, r3
					(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8023c58:	6a3b      	ldr	r3, [r7, #32]
 8023c5a:	685a      	ldr	r2, [r3, #4]
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8023c5c:	68bb      	ldr	r3, [r7, #8]
 8023c5e:	18d1      	adds	r1, r2, r3
					(ETH_TX_BUF_SIZE - bufferoffset));
 8023c60:	693b      	ldr	r3, [r7, #16]
 8023c62:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8023c66:	3304      	adds	r3, #4
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8023c68:	461a      	mov	r2, r3
 8023c6a:	f004 fc00 	bl	802846e <memcpy>

			/* Point to next descriptor */
			DmaTxDesc = (ETH_DMADescTypeDef *) (DmaTxDesc->Buffer2NextDescAddr);
 8023c6e:	69bb      	ldr	r3, [r7, #24]
 8023c70:	68db      	ldr	r3, [r3, #12]
 8023c72:	61bb      	str	r3, [r7, #24]

			/* Check if the buffer is available */
			if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET) {
 8023c74:	69bb      	ldr	r3, [r7, #24]
 8023c76:	681b      	ldr	r3, [r3, #0]
 8023c78:	2b00      	cmp	r3, #0
 8023c7a:	da03      	bge.n	8023c84 <low_level_output+0x80>
				errval = ERR_USE;
 8023c7c:	23f8      	movs	r3, #248	; 0xf8
 8023c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				goto error;
 8023c82:	e03d      	b.n	8023d00 <low_level_output+0xfc>
			}

			buffer = (uint8_t *) (DmaTxDesc->Buffer1Addr);
 8023c84:	69bb      	ldr	r3, [r7, #24]
 8023c86:	689b      	ldr	r3, [r3, #8]
 8023c88:	61fb      	str	r3, [r7, #28]

			byteslefttocopy = byteslefttocopy
					- (ETH_TX_BUF_SIZE - bufferoffset);
 8023c8a:	693a      	ldr	r2, [r7, #16]
 8023c8c:	68fb      	ldr	r3, [r7, #12]
 8023c8e:	4413      	add	r3, r2
			byteslefttocopy = byteslefttocopy
 8023c90:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8023c94:	60fb      	str	r3, [r7, #12]
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8023c96:	68ba      	ldr	r2, [r7, #8]
 8023c98:	693b      	ldr	r3, [r7, #16]
 8023c9a:	1ad3      	subs	r3, r2, r3
 8023c9c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8023ca0:	60bb      	str	r3, [r7, #8]
			framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8023ca2:	697a      	ldr	r2, [r7, #20]
 8023ca4:	693b      	ldr	r3, [r7, #16]
 8023ca6:	1ad3      	subs	r3, r2, r3
 8023ca8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8023cac:	617b      	str	r3, [r7, #20]
			bufferoffset = 0;
 8023cae:	2300      	movs	r3, #0
 8023cb0:	613b      	str	r3, [r7, #16]
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
 8023cb2:	68fa      	ldr	r2, [r7, #12]
 8023cb4:	693b      	ldr	r3, [r7, #16]
 8023cb6:	4413      	add	r3, r2
 8023cb8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8023cbc:	4293      	cmp	r3, r2
 8023cbe:	d8c8      	bhi.n	8023c52 <low_level_output+0x4e>
		}

		/* Copy the remaining bytes */
		memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8023cc0:	69fa      	ldr	r2, [r7, #28]
 8023cc2:	693b      	ldr	r3, [r7, #16]
 8023cc4:	18d0      	adds	r0, r2, r3
				(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8023cc6:	6a3b      	ldr	r3, [r7, #32]
 8023cc8:	685a      	ldr	r2, [r3, #4]
		memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8023cca:	68bb      	ldr	r3, [r7, #8]
 8023ccc:	4413      	add	r3, r2
 8023cce:	68fa      	ldr	r2, [r7, #12]
 8023cd0:	4619      	mov	r1, r3
 8023cd2:	f004 fbcc 	bl	802846e <memcpy>
				byteslefttocopy);
		bufferoffset = bufferoffset + byteslefttocopy;
 8023cd6:	693a      	ldr	r2, [r7, #16]
 8023cd8:	68fb      	ldr	r3, [r7, #12]
 8023cda:	4413      	add	r3, r2
 8023cdc:	613b      	str	r3, [r7, #16]
		framelength = framelength + byteslefttocopy;
 8023cde:	697a      	ldr	r2, [r7, #20]
 8023ce0:	68fb      	ldr	r3, [r7, #12]
 8023ce2:	4413      	add	r3, r2
 8023ce4:	617b      	str	r3, [r7, #20]
	for (q = p; q != NULL; q = q->next) {
 8023ce6:	6a3b      	ldr	r3, [r7, #32]
 8023ce8:	681b      	ldr	r3, [r3, #0]
 8023cea:	623b      	str	r3, [r7, #32]
 8023cec:	6a3b      	ldr	r3, [r7, #32]
 8023cee:	2b00      	cmp	r3, #0
 8023cf0:	d1a1      	bne.n	8023c36 <low_level_output+0x32>
	}

	/* Prepare transmit descriptors to give to DMA */
	HAL_ETH_TransmitFrame(&heth, framelength);
 8023cf2:	6979      	ldr	r1, [r7, #20]
 8023cf4:	4811      	ldr	r0, [pc, #68]	; (8023d3c <low_level_output+0x138>)
 8023cf6:	f7ed fa97 	bl	8011228 <HAL_ETH_TransmitFrame>

	errval = ERR_OK;
 8023cfa:	2300      	movs	r3, #0
 8023cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	error:

	/* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
	if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t) RESET) {
 8023d00:	4b0e      	ldr	r3, [pc, #56]	; (8023d3c <low_level_output+0x138>)
 8023d02:	681b      	ldr	r3, [r3, #0]
 8023d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023d08:	3314      	adds	r3, #20
 8023d0a:	681b      	ldr	r3, [r3, #0]
 8023d0c:	f003 0320 	and.w	r3, r3, #32
 8023d10:	2b00      	cmp	r3, #0
 8023d12:	d00d      	beq.n	8023d30 <low_level_output+0x12c>
		/* Clear TUS ETHERNET DMA flag */
		heth.Instance->DMASR = ETH_DMASR_TUS;
 8023d14:	4b09      	ldr	r3, [pc, #36]	; (8023d3c <low_level_output+0x138>)
 8023d16:	681b      	ldr	r3, [r3, #0]
 8023d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023d1c:	3314      	adds	r3, #20
 8023d1e:	2220      	movs	r2, #32
 8023d20:	601a      	str	r2, [r3, #0]

		/* Resume DMA transmission*/
		heth.Instance->DMATPDR = 0;
 8023d22:	4b06      	ldr	r3, [pc, #24]	; (8023d3c <low_level_output+0x138>)
 8023d24:	681b      	ldr	r3, [r3, #0]
 8023d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023d2a:	3304      	adds	r3, #4
 8023d2c:	2200      	movs	r2, #0
 8023d2e:	601a      	str	r2, [r3, #0]
	}
	return errval;
 8023d30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8023d34:	4618      	mov	r0, r3
 8023d36:	3728      	adds	r7, #40	; 0x28
 8023d38:	46bd      	mov	sp, r7
 8023d3a:	bd80      	pop	{r7, pc}
 8023d3c:	200105f0 	.word	0x200105f0

08023d40 <low_level_input>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(struct netif *netif) {
 8023d40:	b580      	push	{r7, lr}
 8023d42:	b08c      	sub	sp, #48	; 0x30
 8023d44:	af00      	add	r7, sp, #0
 8023d46:	6078      	str	r0, [r7, #4]
	struct pbuf *p = NULL;
 8023d48:	2300      	movs	r3, #0
 8023d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct pbuf *q = NULL;
 8023d4c:	2300      	movs	r3, #0
 8023d4e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t len = 0;
 8023d50:	2300      	movs	r3, #0
 8023d52:	81fb      	strh	r3, [r7, #14]
	uint8_t *buffer;
	__IO ETH_DMADescTypeDef *dmarxdesc;
	uint32_t bufferoffset = 0;
 8023d54:	2300      	movs	r3, #0
 8023d56:	61fb      	str	r3, [r7, #28]
	uint32_t payloadoffset = 0;
 8023d58:	2300      	movs	r3, #0
 8023d5a:	61bb      	str	r3, [r7, #24]
	uint32_t byteslefttocopy = 0;
 8023d5c:	2300      	movs	r3, #0
 8023d5e:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 8023d60:	2300      	movs	r3, #0
 8023d62:	613b      	str	r3, [r7, #16]

	/* get received frame */
	if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8023d64:	484e      	ldr	r0, [pc, #312]	; (8023ea0 <low_level_input+0x160>)
 8023d66:	f7ed fb49 	bl	80113fc <HAL_ETH_GetReceivedFrame_IT>
 8023d6a:	4603      	mov	r3, r0
 8023d6c:	2b00      	cmp	r3, #0
 8023d6e:	d001      	beq.n	8023d74 <low_level_input+0x34>
		return NULL;
 8023d70:	2300      	movs	r3, #0
 8023d72:	e091      	b.n	8023e98 <low_level_input+0x158>

	/* Obtain the size of the packet and put it into the "len" variable. */
	len = heth.RxFrameInfos.length;
 8023d74:	4b4a      	ldr	r3, [pc, #296]	; (8023ea0 <low_level_input+0x160>)
 8023d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023d78:	81fb      	strh	r3, [r7, #14]
	buffer = (uint8_t *) heth.RxFrameInfos.buffer;
 8023d7a:	4b49      	ldr	r3, [pc, #292]	; (8023ea0 <low_level_input+0x160>)
 8023d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d7e:	627b      	str	r3, [r7, #36]	; 0x24

	if (len > 0) {
 8023d80:	89fb      	ldrh	r3, [r7, #14]
 8023d82:	2b00      	cmp	r3, #0
 8023d84:	d006      	beq.n	8023d94 <low_level_input+0x54>
		/* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
		p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8023d86:	89fb      	ldrh	r3, [r7, #14]
 8023d88:	2203      	movs	r2, #3
 8023d8a:	4619      	mov	r1, r3
 8023d8c:	2004      	movs	r0, #4
 8023d8e:	f7f8 fb03 	bl	801c398 <pbuf_alloc>
 8023d92:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	if (p != NULL) {
 8023d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d96:	2b00      	cmp	r3, #0
 8023d98:	d04b      	beq.n	8023e32 <low_level_input+0xf2>
		dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8023d9a:	4b41      	ldr	r3, [pc, #260]	; (8023ea0 <low_level_input+0x160>)
 8023d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023d9e:	623b      	str	r3, [r7, #32]
		bufferoffset = 0;
 8023da0:	2300      	movs	r3, #0
 8023da2:	61fb      	str	r3, [r7, #28]
		for (q = p; q != NULL; q = q->next) {
 8023da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8023da8:	e040      	b.n	8023e2c <low_level_input+0xec>
			byteslefttocopy = q->len;
 8023daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023dac:	895b      	ldrh	r3, [r3, #10]
 8023dae:	617b      	str	r3, [r7, #20]
			payloadoffset = 0;
 8023db0:	2300      	movs	r3, #0
 8023db2:	61bb      	str	r3, [r7, #24]

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
 8023db4:	e021      	b.n	8023dfa <low_level_input+0xba>
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8023db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023db8:	685a      	ldr	r2, [r3, #4]
 8023dba:	69bb      	ldr	r3, [r7, #24]
 8023dbc:	18d0      	adds	r0, r2, r3
						(uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8023dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023dc0:	69fb      	ldr	r3, [r7, #28]
 8023dc2:	18d1      	adds	r1, r2, r3
						(ETH_RX_BUF_SIZE - bufferoffset));
 8023dc4:	69fb      	ldr	r3, [r7, #28]
 8023dc6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8023dca:	3304      	adds	r3, #4
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8023dcc:	461a      	mov	r2, r3
 8023dce:	f004 fb4e 	bl	802846e <memcpy>

				/* Point to next descriptor */
				dmarxdesc =
						(ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
 8023dd2:	6a3b      	ldr	r3, [r7, #32]
 8023dd4:	68db      	ldr	r3, [r3, #12]
				dmarxdesc =
 8023dd6:	623b      	str	r3, [r7, #32]
				buffer = (uint8_t *) (dmarxdesc->Buffer1Addr);
 8023dd8:	6a3b      	ldr	r3, [r7, #32]
 8023dda:	689b      	ldr	r3, [r3, #8]
 8023ddc:	627b      	str	r3, [r7, #36]	; 0x24

				byteslefttocopy = byteslefttocopy
						- (ETH_RX_BUF_SIZE - bufferoffset);
 8023dde:	69fa      	ldr	r2, [r7, #28]
 8023de0:	697b      	ldr	r3, [r7, #20]
 8023de2:	4413      	add	r3, r2
				byteslefttocopy = byteslefttocopy
 8023de4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8023de8:	617b      	str	r3, [r7, #20]
				payloadoffset = payloadoffset
						+ (ETH_RX_BUF_SIZE - bufferoffset);
 8023dea:	69ba      	ldr	r2, [r7, #24]
 8023dec:	69fb      	ldr	r3, [r7, #28]
 8023dee:	1ad3      	subs	r3, r2, r3
				payloadoffset = payloadoffset
 8023df0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8023df4:	61bb      	str	r3, [r7, #24]
				bufferoffset = 0;
 8023df6:	2300      	movs	r3, #0
 8023df8:	61fb      	str	r3, [r7, #28]
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
 8023dfa:	697a      	ldr	r2, [r7, #20]
 8023dfc:	69fb      	ldr	r3, [r7, #28]
 8023dfe:	4413      	add	r3, r2
 8023e00:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8023e04:	4293      	cmp	r3, r2
 8023e06:	d8d6      	bhi.n	8023db6 <low_level_input+0x76>
			}
			/* Copy remaining data in pbuf */
			memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8023e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e0a:	685a      	ldr	r2, [r3, #4]
 8023e0c:	69bb      	ldr	r3, [r7, #24]
 8023e0e:	18d0      	adds	r0, r2, r3
					(uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8023e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023e12:	69fb      	ldr	r3, [r7, #28]
 8023e14:	4413      	add	r3, r2
			memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8023e16:	697a      	ldr	r2, [r7, #20]
 8023e18:	4619      	mov	r1, r3
 8023e1a:	f004 fb28 	bl	802846e <memcpy>
					byteslefttocopy);
			bufferoffset = bufferoffset + byteslefttocopy;
 8023e1e:	69fa      	ldr	r2, [r7, #28]
 8023e20:	697b      	ldr	r3, [r7, #20]
 8023e22:	4413      	add	r3, r2
 8023e24:	61fb      	str	r3, [r7, #28]
		for (q = p; q != NULL; q = q->next) {
 8023e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e28:	681b      	ldr	r3, [r3, #0]
 8023e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8023e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e2e:	2b00      	cmp	r3, #0
 8023e30:	d1bb      	bne.n	8023daa <low_level_input+0x6a>
		}
	}

	/* Release descriptors to DMA */
	/* Point to first descriptor */
	dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8023e32:	4b1b      	ldr	r3, [pc, #108]	; (8023ea0 <low_level_input+0x160>)
 8023e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e36:	623b      	str	r3, [r7, #32]
	/* Set Own bit in Rx descriptors: gives the buffers back to DMA */
	for (i = 0; i < heth.RxFrameInfos.SegCount; i++) {
 8023e38:	2300      	movs	r3, #0
 8023e3a:	613b      	str	r3, [r7, #16]
 8023e3c:	e00b      	b.n	8023e56 <low_level_input+0x116>
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8023e3e:	6a3b      	ldr	r3, [r7, #32]
 8023e40:	681b      	ldr	r3, [r3, #0]
 8023e42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8023e46:	6a3b      	ldr	r3, [r7, #32]
 8023e48:	601a      	str	r2, [r3, #0]
		dmarxdesc = (ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
 8023e4a:	6a3b      	ldr	r3, [r7, #32]
 8023e4c:	68db      	ldr	r3, [r3, #12]
 8023e4e:	623b      	str	r3, [r7, #32]
	for (i = 0; i < heth.RxFrameInfos.SegCount; i++) {
 8023e50:	693b      	ldr	r3, [r7, #16]
 8023e52:	3301      	adds	r3, #1
 8023e54:	613b      	str	r3, [r7, #16]
 8023e56:	4b12      	ldr	r3, [pc, #72]	; (8023ea0 <low_level_input+0x160>)
 8023e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8023e5a:	693b      	ldr	r3, [r7, #16]
 8023e5c:	429a      	cmp	r2, r3
 8023e5e:	d8ee      	bhi.n	8023e3e <low_level_input+0xfe>
	}

	/* Clear Segment_Count */
	heth.RxFrameInfos.SegCount = 0;
 8023e60:	4b0f      	ldr	r3, [pc, #60]	; (8023ea0 <low_level_input+0x160>)
 8023e62:	2200      	movs	r2, #0
 8023e64:	639a      	str	r2, [r3, #56]	; 0x38

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET) {
 8023e66:	4b0e      	ldr	r3, [pc, #56]	; (8023ea0 <low_level_input+0x160>)
 8023e68:	681b      	ldr	r3, [r3, #0]
 8023e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023e6e:	3314      	adds	r3, #20
 8023e70:	681b      	ldr	r3, [r3, #0]
 8023e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023e76:	2b00      	cmp	r3, #0
 8023e78:	d00d      	beq.n	8023e96 <low_level_input+0x156>
		/* Clear RBUS ETHERNET DMA flag */
		heth.Instance->DMASR = ETH_DMASR_RBUS;
 8023e7a:	4b09      	ldr	r3, [pc, #36]	; (8023ea0 <low_level_input+0x160>)
 8023e7c:	681b      	ldr	r3, [r3, #0]
 8023e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023e82:	3314      	adds	r3, #20
 8023e84:	2280      	movs	r2, #128	; 0x80
 8023e86:	601a      	str	r2, [r3, #0]
		/* Resume DMA reception */
		heth.Instance->DMARPDR = 0;
 8023e88:	4b05      	ldr	r3, [pc, #20]	; (8023ea0 <low_level_input+0x160>)
 8023e8a:	681b      	ldr	r3, [r3, #0]
 8023e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023e90:	3308      	adds	r3, #8
 8023e92:	2200      	movs	r2, #0
 8023e94:	601a      	str	r2, [r3, #0]
	}
	return p;
 8023e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8023e98:	4618      	mov	r0, r3
 8023e9a:	3730      	adds	r7, #48	; 0x30
 8023e9c:	46bd      	mov	sp, r7
 8023e9e:	bd80      	pop	{r7, pc}
 8023ea0:	200105f0 	.word	0x200105f0

08023ea4 <ethernetif_input>:
 * interface. Then the type of the received packet is determined and
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument) {
 8023ea4:	b580      	push	{r7, lr}
 8023ea6:	b084      	sub	sp, #16
 8023ea8:	af00      	add	r7, sp, #0
 8023eaa:	6078      	str	r0, [r7, #4]
	struct pbuf *p;
	struct netif *netif = (struct netif *) argument;
 8023eac:	687b      	ldr	r3, [r7, #4]
 8023eae:	60fb      	str	r3, [r7, #12]

	for (;;) {
		if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK) {
 8023eb0:	4b0f      	ldr	r3, [pc, #60]	; (8023ef0 <ethernetif_input+0x4c>)
 8023eb2:	681b      	ldr	r3, [r3, #0]
 8023eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8023eb8:	4618      	mov	r0, r3
 8023eba:	f7f0 fba7 	bl	801460c <osSemaphoreWait>
 8023ebe:	4603      	mov	r3, r0
 8023ec0:	2b00      	cmp	r3, #0
 8023ec2:	d1f5      	bne.n	8023eb0 <ethernetif_input+0xc>
			do {
				p = low_level_input(netif);
 8023ec4:	68f8      	ldr	r0, [r7, #12]
 8023ec6:	f7ff ff3b 	bl	8023d40 <low_level_input>
 8023eca:	60b8      	str	r0, [r7, #8]
				if (p != NULL) {
 8023ecc:	68bb      	ldr	r3, [r7, #8]
 8023ece:	2b00      	cmp	r3, #0
 8023ed0:	d00a      	beq.n	8023ee8 <ethernetif_input+0x44>
					if (netif->input(p, netif) != ERR_OK) {
 8023ed2:	68fb      	ldr	r3, [r7, #12]
 8023ed4:	691b      	ldr	r3, [r3, #16]
 8023ed6:	68f9      	ldr	r1, [r7, #12]
 8023ed8:	68b8      	ldr	r0, [r7, #8]
 8023eda:	4798      	blx	r3
 8023edc:	4603      	mov	r3, r0
 8023ede:	2b00      	cmp	r3, #0
 8023ee0:	d002      	beq.n	8023ee8 <ethernetif_input+0x44>
						pbuf_free(p);
 8023ee2:	68b8      	ldr	r0, [r7, #8]
 8023ee4:	f7f8 fdca 	bl	801ca7c <pbuf_free>
					}
				}
			} while (p != NULL);
 8023ee8:	68bb      	ldr	r3, [r7, #8]
 8023eea:	2b00      	cmp	r3, #0
 8023eec:	d1ea      	bne.n	8023ec4 <ethernetif_input+0x20>
		if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK) {
 8023eee:	e7df      	b.n	8023eb0 <ethernetif_input+0xc>
 8023ef0:	20009538 	.word	0x20009538

08023ef4 <ethernetif_init>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif) {
 8023ef4:	b580      	push	{r7, lr}
 8023ef6:	b082      	sub	sp, #8
 8023ef8:	af00      	add	r7, sp, #0
 8023efa:	6078      	str	r0, [r7, #4]
	LWIP_ASSERT("netif != NULL", (netif != NULL));
 8023efc:	687b      	ldr	r3, [r7, #4]
 8023efe:	2b00      	cmp	r3, #0
 8023f00:	d106      	bne.n	8023f10 <ethernetif_init+0x1c>
 8023f02:	4b0e      	ldr	r3, [pc, #56]	; (8023f3c <ethernetif_init+0x48>)
 8023f04:	f240 2229 	movw	r2, #553	; 0x229
 8023f08:	490d      	ldr	r1, [pc, #52]	; (8023f40 <ethernetif_init+0x4c>)
 8023f0a:	480e      	ldr	r0, [pc, #56]	; (8023f44 <ethernetif_init+0x50>)
 8023f0c:	f003 fa90 	bl	8027430 <iprintf>
#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

	netif->name[0] = IFNAME0;
 8023f10:	687b      	ldr	r3, [r7, #4]
 8023f12:	2273      	movs	r2, #115	; 0x73
 8023f14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	netif->name[1] = IFNAME1;
 8023f18:	687b      	ldr	r3, [r7, #4]
 8023f1a:	2274      	movs	r2, #116	; 0x74
 8023f1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	 * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
	netif->output = etharp_output;
 8023f20:	687b      	ldr	r3, [r7, #4]
 8023f22:	4a09      	ldr	r2, [pc, #36]	; (8023f48 <ethernetif_init+0x54>)
 8023f24:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
	netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

	netif->linkoutput = low_level_output;
 8023f26:	687b      	ldr	r3, [r7, #4]
 8023f28:	4a08      	ldr	r2, [pc, #32]	; (8023f4c <ethernetif_init+0x58>)
 8023f2a:	619a      	str	r2, [r3, #24]

	/* initialize the hardware */
	low_level_init(netif);
 8023f2c:	6878      	ldr	r0, [r7, #4]
 8023f2e:	f7ff fda7 	bl	8023a80 <low_level_init>

	return ERR_OK;
 8023f32:	2300      	movs	r3, #0
}
 8023f34:	4618      	mov	r0, r3
 8023f36:	3708      	adds	r7, #8
 8023f38:	46bd      	mov	sp, r7
 8023f3a:	bd80      	pop	{r7, pc}
 8023f3c:	0802b518 	.word	0x0802b518
 8023f40:	0802b52c 	.word	0x0802b52c
 8023f44:	0802b53c 	.word	0x0802b53c
 8023f48:	08019add 	.word	0x08019add
 8023f4c:	08023c05 	.word	0x08023c05

08023f50 <sys_now>:
 * @brief  Returns the current time in milliseconds
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Time
 */
u32_t sys_now(void) {
 8023f50:	b580      	push	{r7, lr}
 8023f52:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8023f54:	f7ec fa52 	bl	80103fc <HAL_GetTick>
 8023f58:	4603      	mov	r3, r0
}
 8023f5a:	4618      	mov	r0, r3
 8023f5c:	bd80      	pop	{r7, pc}
	...

08023f60 <NVIC_EnableIRQ>:
{
 8023f60:	b480      	push	{r7}
 8023f62:	b083      	sub	sp, #12
 8023f64:	af00      	add	r7, sp, #0
 8023f66:	4603      	mov	r3, r0
 8023f68:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8023f6a:	4909      	ldr	r1, [pc, #36]	; (8023f90 <NVIC_EnableIRQ+0x30>)
 8023f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023f70:	095b      	lsrs	r3, r3, #5
 8023f72:	79fa      	ldrb	r2, [r7, #7]
 8023f74:	f002 021f 	and.w	r2, r2, #31
 8023f78:	2001      	movs	r0, #1
 8023f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8023f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8023f82:	bf00      	nop
 8023f84:	370c      	adds	r7, #12
 8023f86:	46bd      	mov	sp, r7
 8023f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f8c:	4770      	bx	lr
 8023f8e:	bf00      	nop
 8023f90:	e000e100 	.word	0xe000e100

08023f94 <NVIC_SetPriority>:
{
 8023f94:	b480      	push	{r7}
 8023f96:	b083      	sub	sp, #12
 8023f98:	af00      	add	r7, sp, #0
 8023f9a:	4603      	mov	r3, r0
 8023f9c:	6039      	str	r1, [r7, #0]
 8023f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8023fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023fa4:	2b00      	cmp	r3, #0
 8023fa6:	da0b      	bge.n	8023fc0 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023fa8:	490d      	ldr	r1, [pc, #52]	; (8023fe0 <NVIC_SetPriority+0x4c>)
 8023faa:	79fb      	ldrb	r3, [r7, #7]
 8023fac:	f003 030f 	and.w	r3, r3, #15
 8023fb0:	3b04      	subs	r3, #4
 8023fb2:	683a      	ldr	r2, [r7, #0]
 8023fb4:	b2d2      	uxtb	r2, r2
 8023fb6:	0112      	lsls	r2, r2, #4
 8023fb8:	b2d2      	uxtb	r2, r2
 8023fba:	440b      	add	r3, r1
 8023fbc:	761a      	strb	r2, [r3, #24]
}
 8023fbe:	e009      	b.n	8023fd4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023fc0:	4908      	ldr	r1, [pc, #32]	; (8023fe4 <NVIC_SetPriority+0x50>)
 8023fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023fc6:	683a      	ldr	r2, [r7, #0]
 8023fc8:	b2d2      	uxtb	r2, r2
 8023fca:	0112      	lsls	r2, r2, #4
 8023fcc:	b2d2      	uxtb	r2, r2
 8023fce:	440b      	add	r3, r1
 8023fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8023fd4:	bf00      	nop
 8023fd6:	370c      	adds	r7, #12
 8023fd8:	46bd      	mov	sp, r7
 8023fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fde:	4770      	bx	lr
 8023fe0:	e000ed00 	.word	0xe000ed00
 8023fe4:	e000e100 	.word	0xe000e100

08023fe8 <configureTimerForRunTimeStats>:
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8023fe8:	b580      	push	{r7, lr}
 8023fea:	af00      	add	r7, sp, #0
	NVIC_SetPriority(TIM7_IRQn, 0);
 8023fec:	2100      	movs	r1, #0
 8023fee:	2037      	movs	r0, #55	; 0x37
 8023ff0:	f7ff ffd0 	bl	8023f94 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM7_IRQn);
 8023ff4:	2037      	movs	r0, #55	; 0x37
 8023ff6:	f7ff ffb3 	bl	8023f60 <NVIC_EnableIRQ>
	MX_TIM7_Init();
 8023ffa:	f002 ffc7 	bl	8026f8c <MX_TIM7_Init>
	HAL_TIM_Base_Start_IT(&htim7);
 8023ffe:	4802      	ldr	r0, [pc, #8]	; (8024008 <configureTimerForRunTimeStats+0x20>)
 8024000:	f7ee ffb1 	bl	8012f66 <HAL_TIM_Base_Start_IT>
}
 8024004:	bf00      	nop
 8024006:	bd80      	pop	{r7, pc}
 8024008:	20011f8c 	.word	0x20011f8c

0802400c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 802400c:	b480      	push	{r7}
 802400e:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8024010:	4b03      	ldr	r3, [pc, #12]	; (8024020 <getRunTimeCounterValue+0x14>)
 8024012:	681b      	ldr	r3, [r3, #0]
}
 8024014:	4618      	mov	r0, r3
 8024016:	46bd      	mov	sp, r7
 8024018:	f85d 7b04 	ldr.w	r7, [sp], #4
 802401c:	4770      	bx	lr
 802401e:	bf00      	nop
 8024020:	2000953c 	.word	0x2000953c

08024024 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8024024:	b480      	push	{r7}
 8024026:	b085      	sub	sp, #20
 8024028:	af00      	add	r7, sp, #0
 802402a:	60f8      	str	r0, [r7, #12]
 802402c:	60b9      	str	r1, [r7, #8]
 802402e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8024030:	68fb      	ldr	r3, [r7, #12]
 8024032:	4a07      	ldr	r2, [pc, #28]	; (8024050 <vApplicationGetIdleTaskMemory+0x2c>)
 8024034:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8024036:	68bb      	ldr	r3, [r7, #8]
 8024038:	4a06      	ldr	r2, [pc, #24]	; (8024054 <vApplicationGetIdleTaskMemory+0x30>)
 802403a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 802403c:	687b      	ldr	r3, [r7, #4]
 802403e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024042:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8024044:	bf00      	nop
 8024046:	3714      	adds	r7, #20
 8024048:	46bd      	mov	sp, r7
 802404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802404e:	4770      	bx	lr
 8024050:	20009540 	.word	0x20009540
 8024054:	200095a0 	.word	0x200095a0

08024058 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8024058:	b5b0      	push	{r4, r5, r7, lr}
 802405a:	b096      	sub	sp, #88	; 0x58
 802405c:	af00      	add	r7, sp, #0

	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	osThreadDef(processTask, StartProcessTask, osPriorityRealtime, 0, 1024);
 802405e:	4b39      	ldr	r3, [pc, #228]	; (8024144 <MX_FREERTOS_Init+0xec>)
 8024060:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8024064:	461d      	mov	r5, r3
 8024066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802406a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802406e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	processTaskHandle = osThreadCreate(osThread(processTask), NULL);
 8024072:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8024076:	2100      	movs	r1, #0
 8024078:	4618      	mov	r0, r3
 802407a:	f7f0 f994 	bl	80143a6 <osThreadCreate>
 802407e:	4602      	mov	r2, r0
 8024080:	4b31      	ldr	r3, [pc, #196]	; (8024148 <MX_FREERTOS_Init+0xf0>)
 8024082:	601a      	str	r2, [r3, #0]

	osThreadDef(cleanerTask, StartHeapCleanerTask, osPriorityAboveNormal, 0,
 8024084:	4b31      	ldr	r3, [pc, #196]	; (802414c <MX_FREERTOS_Init+0xf4>)
 8024086:	f107 0420 	add.w	r4, r7, #32
 802408a:	461d      	mov	r5, r3
 802408c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802408e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024090:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8024094:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			256);
	heapCleanerHandle = osThreadCreate(osThread(cleanerTask), NULL);
 8024098:	f107 0320 	add.w	r3, r7, #32
 802409c:	2100      	movs	r1, #0
 802409e:	4618      	mov	r0, r3
 80240a0:	f7f0 f981 	bl	80143a6 <osThreadCreate>
 80240a4:	4602      	mov	r2, r0
 80240a6:	4b2a      	ldr	r3, [pc, #168]	; (8024150 <MX_FREERTOS_Init+0xf8>)
 80240a8:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_TIMERS */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80240aa:	4b2a      	ldr	r3, [pc, #168]	; (8024154 <MX_FREERTOS_Init+0xfc>)
 80240ac:	1d3c      	adds	r4, r7, #4
 80240ae:	461d      	mov	r5, r3
 80240b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80240b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80240b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80240b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80240bc:	1d3b      	adds	r3, r7, #4
 80240be:	2100      	movs	r1, #0
 80240c0:	4618      	mov	r0, r3
 80240c2:	f7f0 f970 	bl	80143a6 <osThreadCreate>
 80240c6:	4602      	mov	r2, r0
 80240c8:	4b23      	ldr	r3, [pc, #140]	; (8024158 <MX_FREERTOS_Init+0x100>)
 80240ca:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */

	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_QUEUES */
	frames_queue = xQueueCreate(16, sizeof(uint16_t));
 80240cc:	2200      	movs	r2, #0
 80240ce:	2102      	movs	r1, #2
 80240d0:	2010      	movs	r0, #16
 80240d2:	f7f1 f9c1 	bl	8015458 <xQueueGenericCreate>
 80240d6:	4602      	mov	r2, r0
 80240d8:	4b20      	ldr	r3, [pc, #128]	; (802415c <MX_FREERTOS_Init+0x104>)
 80240da:	601a      	str	r2, [r3, #0]
	vQueueAddToRegistry(frames_queue, "frames_queue");
 80240dc:	4b1f      	ldr	r3, [pc, #124]	; (802415c <MX_FREERTOS_Init+0x104>)
 80240de:	681b      	ldr	r3, [r3, #0]
 80240e0:	491f      	ldr	r1, [pc, #124]	; (8024160 <MX_FREERTOS_Init+0x108>)
 80240e2:	4618      	mov	r0, r3
 80240e4:	f7f1 ff78 	bl	8015fd8 <vQueueAddToRegistry>
	cleaner_queue = xQueueCreate(16, sizeof(uint8_t*));
 80240e8:	2200      	movs	r2, #0
 80240ea:	2104      	movs	r1, #4
 80240ec:	2010      	movs	r0, #16
 80240ee:	f7f1 f9b3 	bl	8015458 <xQueueGenericCreate>
 80240f2:	4602      	mov	r2, r0
 80240f4:	4b1b      	ldr	r3, [pc, #108]	; (8024164 <MX_FREERTOS_Init+0x10c>)
 80240f6:	601a      	str	r2, [r3, #0]
	vQueueAddToRegistry(cleaner_queue, "cleaner_queue");
 80240f8:	4b1a      	ldr	r3, [pc, #104]	; (8024164 <MX_FREERTOS_Init+0x10c>)
 80240fa:	681b      	ldr	r3, [r3, #0]
 80240fc:	491a      	ldr	r1, [pc, #104]	; (8024168 <MX_FREERTOS_Init+0x110>)
 80240fe:	4618      	mov	r0, r3
 8024100:	f7f1 ff6a 	bl	8015fd8 <vQueueAddToRegistry>
	tcp_client_queue = xQueueCreate(8, sizeof(parcel_t));
 8024104:	2200      	movs	r2, #0
 8024106:	2108      	movs	r1, #8
 8024108:	2008      	movs	r0, #8
 802410a:	f7f1 f9a5 	bl	8015458 <xQueueGenericCreate>
 802410e:	4602      	mov	r2, r0
 8024110:	4b16      	ldr	r3, [pc, #88]	; (802416c <MX_FREERTOS_Init+0x114>)
 8024112:	601a      	str	r2, [r3, #0]
	vQueueAddToRegistry(tcp_client_queue, "tcp_client_queue");
 8024114:	4b15      	ldr	r3, [pc, #84]	; (802416c <MX_FREERTOS_Init+0x114>)
 8024116:	681b      	ldr	r3, [r3, #0]
 8024118:	4915      	ldr	r1, [pc, #84]	; (8024170 <MX_FREERTOS_Init+0x118>)
 802411a:	4618      	mov	r0, r3
 802411c:	f7f1 ff5c 	bl	8015fd8 <vQueueAddToRegistry>
	protocol_queue = xQueueCreate(8, sizeof(parcel_t));
 8024120:	2200      	movs	r2, #0
 8024122:	2108      	movs	r1, #8
 8024124:	2008      	movs	r0, #8
 8024126:	f7f1 f997 	bl	8015458 <xQueueGenericCreate>
 802412a:	4602      	mov	r2, r0
 802412c:	4b11      	ldr	r3, [pc, #68]	; (8024174 <MX_FREERTOS_Init+0x11c>)
 802412e:	601a      	str	r2, [r3, #0]
	vQueueAddToRegistry(protocol_queue, "protocol_queue");
 8024130:	4b10      	ldr	r3, [pc, #64]	; (8024174 <MX_FREERTOS_Init+0x11c>)
 8024132:	681b      	ldr	r3, [r3, #0]
 8024134:	4910      	ldr	r1, [pc, #64]	; (8024178 <MX_FREERTOS_Init+0x120>)
 8024136:	4618      	mov	r0, r3
 8024138:	f7f1 ff4e 	bl	8015fd8 <vQueueAddToRegistry>
	/* USER CODE END RTOS_QUEUES */
}
 802413c:	bf00      	nop
 802413e:	3758      	adds	r7, #88	; 0x58
 8024140:	46bd      	mov	sp, r7
 8024142:	bdb0      	pop	{r4, r5, r7, pc}
 8024144:	0802b5b4 	.word	0x0802b5b4
 8024148:	20011e18 	.word	0x20011e18
 802414c:	0802b5dc 	.word	0x0802b5dc
 8024150:	20011e10 	.word	0x20011e10
 8024154:	0802b604 	.word	0x0802b604
 8024158:	20011e08 	.word	0x20011e08
 802415c:	20011e0c 	.word	0x20011e0c
 8024160:	0802b564 	.word	0x0802b564
 8024164:	20011e1c 	.word	0x20011e1c
 8024168:	0802b574 	.word	0x0802b574
 802416c:	20011f4c 	.word	0x20011f4c
 8024170:	0802b584 	.word	0x0802b584
 8024174:	20011f0c 	.word	0x20011f0c
 8024178:	0802b598 	.word	0x0802b598

0802417c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 802417c:	b580      	push	{r7, lr}
 802417e:	b08c      	sub	sp, #48	; 0x30
 8024180:	af02      	add	r7, sp, #8
 8024182:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */

	MX_LWIP_Init();
 8024184:	f001 fa30 	bl	80255e8 <MX_LWIP_Init>
	/* USER CODE BEGIN StartDefaultTask */

	struct netconn *conn_port80;
	err_t err;
	uint32_t reg;
	conn_port80 = netconn_new(NETCONN_TCP);
 8024188:	2200      	movs	r2, #0
 802418a:	2100      	movs	r1, #0
 802418c:	2010      	movs	r0, #16
 802418e:	f7f2 ff39 	bl	8017004 <netconn_new_with_proto_and_callback>
 8024192:	6278      	str	r0, [r7, #36]	; 0x24
	if (conn_port80 != NULL) {
 8024194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024196:	2b00      	cmp	r3, #0
 8024198:	d01c      	beq.n	80241d4 <StartDefaultTask+0x58>
		err = netconn_bind(conn_port80, IP_ADDR_ANY, 80);
 802419a:	2250      	movs	r2, #80	; 0x50
 802419c:	4947      	ldr	r1, [pc, #284]	; (80242bc <StartDefaultTask+0x140>)
 802419e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80241a0:	f7f2 ffd0 	bl	8017144 <netconn_bind>
 80241a4:	4603      	mov	r3, r0
 80241a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (err == ERR_OK) {
 80241aa:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80241ae:	2b00      	cmp	r3, #0
 80241b0:	d10d      	bne.n	80241ce <StartDefaultTask+0x52>
			netconn_listen(conn_port80);
 80241b2:	21ff      	movs	r1, #255	; 0xff
 80241b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80241b6:	f7f2 fffd 	bl	80171b4 <netconn_listen_with_backlog>
			sys_thread_new("web_thread", Web_thread, (void*) conn_port80,
 80241ba:	2300      	movs	r3, #0
 80241bc:	9300      	str	r3, [sp, #0]
 80241be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80241c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80241c4:	493e      	ldr	r1, [pc, #248]	; (80242c0 <StartDefaultTask+0x144>)
 80241c6:	483f      	ldr	r0, [pc, #252]	; (80242c4 <StartDefaultTask+0x148>)
 80241c8:	f7fe fd10 	bl	8022bec <sys_thread_new>
 80241cc:	e002      	b.n	80241d4 <StartDefaultTask+0x58>
			DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
		} else {
			netconn_delete(conn_port80);
 80241ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80241d0:	f7f2 ff92 	bl	80170f8 <netconn_delete>
		}
	}

	struct netconn *conn_port102;
	conn_port102 = netconn_new(NETCONN_TCP);
 80241d4:	2200      	movs	r2, #0
 80241d6:	2100      	movs	r1, #0
 80241d8:	2010      	movs	r0, #16
 80241da:	f7f2 ff13 	bl	8017004 <netconn_new_with_proto_and_callback>
 80241de:	61f8      	str	r0, [r7, #28]
	if (conn_port102 != NULL) {
 80241e0:	69fb      	ldr	r3, [r7, #28]
 80241e2:	2b00      	cmp	r3, #0
 80241e4:	d01e      	beq.n	8024224 <StartDefaultTask+0xa8>
		err = netconn_bind(conn_port102, IP_ADDR_ANY, hflash.port);
 80241e6:	4b38      	ldr	r3, [pc, #224]	; (80242c8 <StartDefaultTask+0x14c>)
 80241e8:	8a5b      	ldrh	r3, [r3, #18]
 80241ea:	461a      	mov	r2, r3
 80241ec:	4933      	ldr	r1, [pc, #204]	; (80242bc <StartDefaultTask+0x140>)
 80241ee:	69f8      	ldr	r0, [r7, #28]
 80241f0:	f7f2 ffa8 	bl	8017144 <netconn_bind>
 80241f4:	4603      	mov	r3, r0
 80241f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (err == ERR_OK) {
 80241fa:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80241fe:	2b00      	cmp	r3, #0
 8024200:	d10d      	bne.n	802421e <StartDefaultTask+0xa2>
			netconn_listen(conn_port102);
 8024202:	21ff      	movs	r1, #255	; 0xff
 8024204:	69f8      	ldr	r0, [r7, #28]
 8024206:	f7f2 ffd5 	bl	80171b4 <netconn_listen_with_backlog>
			sys_thread_new("tcp_serv_thread", Client_thread,
 802420a:	2301      	movs	r3, #1
 802420c:	9300      	str	r3, [sp, #0]
 802420e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8024212:	69fa      	ldr	r2, [r7, #28]
 8024214:	492d      	ldr	r1, [pc, #180]	; (80242cc <StartDefaultTask+0x150>)
 8024216:	482e      	ldr	r0, [pc, #184]	; (80242d0 <StartDefaultTask+0x154>)
 8024218:	f7fe fce8 	bl	8022bec <sys_thread_new>
 802421c:	e002      	b.n	8024224 <StartDefaultTask+0xa8>
					(void*) conn_port102,
					DEFAULT_THREAD_STACKSIZE, osPriorityAboveNormal);
		} else {
			netconn_delete(conn_port102);
 802421e:	69f8      	ldr	r0, [r7, #28]
 8024220:	f7f2 ff6a 	bl	80170f8 <netconn_delete>
		}
	}

	uint8_t data_conn1[] = { 0x80, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01,
 8024224:	4a2b      	ldr	r2, [pc, #172]	; (80242d4 <StartDefaultTask+0x158>)
 8024226:	f107 0308 	add.w	r3, r7, #8
 802422a:	ca07      	ldmia	r2, {r0, r1, r2}
 802422c:	c303      	stmia	r3!, {r0, r1}
 802422e:	701a      	strb	r2, [r3, #0]
			0x00 };
	uint8_t * request_data;
	request_data = (uint8_t*) pvPortMalloc(sizeof(data_conn1));
 8024230:	2009      	movs	r0, #9
 8024232:	f7f0 fe55 	bl	8014ee0 <pvPortMalloc>
 8024236:	61b8      	str	r0, [r7, #24]
	memcpy(request_data, data_conn1, sizeof(data_conn1));
 8024238:	69bb      	ldr	r3, [r7, #24]
 802423a:	461a      	mov	r2, r3
 802423c:	f107 0308 	add.w	r3, r7, #8
 8024240:	cb03      	ldmia	r3!, {r0, r1}
 8024242:	6010      	str	r0, [r2, #0]
 8024244:	6051      	str	r1, [r2, #4]
 8024246:	781b      	ldrb	r3, [r3, #0]
 8024248:	7213      	strb	r3, [r2, #8]
	hprot.data_len = sizeof(data_conn1);
 802424a:	4b23      	ldr	r3, [pc, #140]	; (80242d8 <StartDefaultTask+0x15c>)
 802424c:	2209      	movs	r2, #9
 802424e:	741a      	strb	r2, [r3, #16]
	hprot.data_ptr = request_data;
 8024250:	4a21      	ldr	r2, [pc, #132]	; (80242d8 <StartDefaultTask+0x15c>)
 8024252:	69bb      	ldr	r3, [r7, #24]
 8024254:	60d3      	str	r3, [r2, #12]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8024256:	2201      	movs	r2, #1
 8024258:	f44f 7100 	mov.w	r1, #512	; 0x200
 802425c:	481f      	ldr	r0, [pc, #124]	; (80242dc <StartDefaultTask+0x160>)
 802425e:	f7ee f9db 	bl	8012618 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8024262:	2200      	movs	r2, #0
 8024264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024268:	481c      	ldr	r0, [pc, #112]	; (80242dc <StartDefaultTask+0x160>)
 802426a:	f7ee f9d5 	bl	8012618 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for (;;) {

#ifdef DEBUG_ON
		printf("Free heap: %d\r\n", xPortGetMinimumEverFreeHeapSize());
 802426e:	f7f0 ff51 	bl	8015114 <xPortGetMinimumEverFreeHeapSize>
 8024272:	4603      	mov	r3, r0
 8024274:	4619      	mov	r1, r3
 8024276:	481a      	ldr	r0, [pc, #104]	; (80242e0 <StartDefaultTask+0x164>)
 8024278:	f003 f8da 	bl	8027430 <iprintf>
#endif /* #ifdef DEBUG_ON */

		osDelay(300);
 802427c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8024280:	f7f0 f8dd 	bl	801443e <osDelay>
		HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &reg);
 8024284:	f107 0314 	add.w	r3, r7, #20
 8024288:	461a      	mov	r2, r3
 802428a:	2101      	movs	r1, #1
 802428c:	4815      	ldr	r0, [pc, #84]	; (80242e4 <StartDefaultTask+0x168>)
 802428e:	f7ed f9b8 	bl	8011602 <HAL_ETH_ReadPHYRegister>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8024292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8024296:	4811      	ldr	r0, [pc, #68]	; (80242dc <StartDefaultTask+0x160>)
 8024298:	f7ee f9d7 	bl	801264a <HAL_GPIO_TogglePin>
		if (reboot_flag || !(reg & PHY_LINKED_STATUS)) {
 802429c:	4b12      	ldr	r3, [pc, #72]	; (80242e8 <StartDefaultTask+0x16c>)
 802429e:	681b      	ldr	r3, [r3, #0]
 80242a0:	2b00      	cmp	r3, #0
 80242a2:	d104      	bne.n	80242ae <StartDefaultTask+0x132>
 80242a4:	697b      	ldr	r3, [r7, #20]
 80242a6:	f003 0304 	and.w	r3, r3, #4
 80242aa:	2b00      	cmp	r3, #0
 80242ac:	d1df      	bne.n	802426e <StartDefaultTask+0xf2>
			osDelay(30);
 80242ae:	201e      	movs	r0, #30
 80242b0:	f7f0 f8c5 	bl	801443e <osDelay>
			SCB->AIRCR = 0x05FA0004; /* Software reset */
 80242b4:	4b0d      	ldr	r3, [pc, #52]	; (80242ec <StartDefaultTask+0x170>)
 80242b6:	4a0e      	ldr	r2, [pc, #56]	; (80242f0 <StartDefaultTask+0x174>)
 80242b8:	60da      	str	r2, [r3, #12]
		printf("Free heap: %d\r\n", xPortGetMinimumEverFreeHeapSize());
 80242ba:	e7d8      	b.n	802426e <StartDefaultTask+0xf2>
 80242bc:	0802e578 	.word	0x0802e578
 80242c0:	08027e2d 	.word	0x08027e2d
 80242c4:	0802b620 	.word	0x0802b620
 80242c8:	2000ecfc 	.word	0x2000ecfc
 80242cc:	08026d71 	.word	0x08026d71
 80242d0:	0802b62c 	.word	0x0802b62c
 80242d4:	0802b64c 	.word	0x0802b64c
 80242d8:	20011ef4 	.word	0x20011ef4
 80242dc:	40021000 	.word	0x40021000
 80242e0:	0802b63c 	.word	0x0802b63c
 80242e4:	200105f0 	.word	0x200105f0
 80242e8:	20009ec0 	.word	0x20009ec0
 80242ec:	e000ed00 	.word	0xe000ed00
 80242f0:	05fa0004 	.word	0x05fa0004

080242f4 <StartHeapCleanerTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
//---------------------------------------------------------------
void StartHeapCleanerTask(void const * argument) {
 80242f4:	b580      	push	{r7, lr}
 80242f6:	b084      	sub	sp, #16
 80242f8:	af00      	add	r7, sp, #0
 80242fa:	6078      	str	r0, [r7, #4]
	uint8_t * heap_ptr;
	for (;;) {
		xQueueReceive(cleaner_queue, &heap_ptr, portMAX_DELAY);
 80242fc:	4b07      	ldr	r3, [pc, #28]	; (802431c <StartHeapCleanerTask+0x28>)
 80242fe:	6818      	ldr	r0, [r3, #0]
 8024300:	f107 010c 	add.w	r1, r7, #12
 8024304:	2300      	movs	r3, #0
 8024306:	f04f 32ff 	mov.w	r2, #4294967295
 802430a:	f7f1 fb6b 	bl	80159e4 <xQueueGenericReceive>
		vPortFree((uint8_t *) heap_ptr);
 802430e:	68fb      	ldr	r3, [r7, #12]
 8024310:	4618      	mov	r0, r3
 8024312:	f7f0 fea7 	bl	8015064 <vPortFree>
		heap_ptr = NULL;
 8024316:	2300      	movs	r3, #0
 8024318:	60fb      	str	r3, [r7, #12]
		xQueueReceive(cleaner_queue, &heap_ptr, portMAX_DELAY);
 802431a:	e7ef      	b.n	80242fc <StartHeapCleanerTask+0x8>
 802431c:	20011e1c 	.word	0x20011e1c

08024320 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8024320:	b580      	push	{r7, lr}
 8024322:	b08c      	sub	sp, #48	; 0x30
 8024324:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024326:	f107 031c 	add.w	r3, r7, #28
 802432a:	2200      	movs	r2, #0
 802432c:	601a      	str	r2, [r3, #0]
 802432e:	605a      	str	r2, [r3, #4]
 8024330:	609a      	str	r2, [r3, #8]
 8024332:	60da      	str	r2, [r3, #12]
 8024334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8024336:	2300      	movs	r3, #0
 8024338:	61bb      	str	r3, [r7, #24]
 802433a:	4a35      	ldr	r2, [pc, #212]	; (8024410 <MX_GPIO_Init+0xf0>)
 802433c:	4b34      	ldr	r3, [pc, #208]	; (8024410 <MX_GPIO_Init+0xf0>)
 802433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024344:	6313      	str	r3, [r2, #48]	; 0x30
 8024346:	4b32      	ldr	r3, [pc, #200]	; (8024410 <MX_GPIO_Init+0xf0>)
 8024348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802434a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802434e:	61bb      	str	r3, [r7, #24]
 8024350:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8024352:	2300      	movs	r3, #0
 8024354:	617b      	str	r3, [r7, #20]
 8024356:	4a2e      	ldr	r2, [pc, #184]	; (8024410 <MX_GPIO_Init+0xf0>)
 8024358:	4b2d      	ldr	r3, [pc, #180]	; (8024410 <MX_GPIO_Init+0xf0>)
 802435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802435c:	f043 0304 	orr.w	r3, r3, #4
 8024360:	6313      	str	r3, [r2, #48]	; 0x30
 8024362:	4b2b      	ldr	r3, [pc, #172]	; (8024410 <MX_GPIO_Init+0xf0>)
 8024364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024366:	f003 0304 	and.w	r3, r3, #4
 802436a:	617b      	str	r3, [r7, #20]
 802436c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802436e:	2300      	movs	r3, #0
 8024370:	613b      	str	r3, [r7, #16]
 8024372:	4a27      	ldr	r2, [pc, #156]	; (8024410 <MX_GPIO_Init+0xf0>)
 8024374:	4b26      	ldr	r3, [pc, #152]	; (8024410 <MX_GPIO_Init+0xf0>)
 8024376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024378:	f043 0301 	orr.w	r3, r3, #1
 802437c:	6313      	str	r3, [r2, #48]	; 0x30
 802437e:	4b24      	ldr	r3, [pc, #144]	; (8024410 <MX_GPIO_Init+0xf0>)
 8024380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024382:	f003 0301 	and.w	r3, r3, #1
 8024386:	613b      	str	r3, [r7, #16]
 8024388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802438a:	2300      	movs	r3, #0
 802438c:	60fb      	str	r3, [r7, #12]
 802438e:	4a20      	ldr	r2, [pc, #128]	; (8024410 <MX_GPIO_Init+0xf0>)
 8024390:	4b1f      	ldr	r3, [pc, #124]	; (8024410 <MX_GPIO_Init+0xf0>)
 8024392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024394:	f043 0310 	orr.w	r3, r3, #16
 8024398:	6313      	str	r3, [r2, #48]	; 0x30
 802439a:	4b1d      	ldr	r3, [pc, #116]	; (8024410 <MX_GPIO_Init+0xf0>)
 802439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802439e:	f003 0310 	and.w	r3, r3, #16
 80243a2:	60fb      	str	r3, [r7, #12]
 80243a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80243a6:	2300      	movs	r3, #0
 80243a8:	60bb      	str	r3, [r7, #8]
 80243aa:	4a19      	ldr	r2, [pc, #100]	; (8024410 <MX_GPIO_Init+0xf0>)
 80243ac:	4b18      	ldr	r3, [pc, #96]	; (8024410 <MX_GPIO_Init+0xf0>)
 80243ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243b0:	f043 0302 	orr.w	r3, r3, #2
 80243b4:	6313      	str	r3, [r2, #48]	; 0x30
 80243b6:	4b16      	ldr	r3, [pc, #88]	; (8024410 <MX_GPIO_Init+0xf0>)
 80243b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243ba:	f003 0302 	and.w	r3, r3, #2
 80243be:	60bb      	str	r3, [r7, #8]
 80243c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80243c2:	2300      	movs	r3, #0
 80243c4:	607b      	str	r3, [r7, #4]
 80243c6:	4a12      	ldr	r2, [pc, #72]	; (8024410 <MX_GPIO_Init+0xf0>)
 80243c8:	4b11      	ldr	r3, [pc, #68]	; (8024410 <MX_GPIO_Init+0xf0>)
 80243ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243cc:	f043 0308 	orr.w	r3, r3, #8
 80243d0:	6313      	str	r3, [r2, #48]	; 0x30
 80243d2:	4b0f      	ldr	r3, [pc, #60]	; (8024410 <MX_GPIO_Init+0xf0>)
 80243d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243d6:	f003 0308 	and.w	r3, r3, #8
 80243da:	607b      	str	r3, [r7, #4]
 80243dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin, GPIO_PIN_RESET);
 80243de:	2200      	movs	r2, #0
 80243e0:	f240 6101 	movw	r1, #1537	; 0x601
 80243e4:	480b      	ldr	r0, [pc, #44]	; (8024414 <MX_GPIO_Init+0xf4>)
 80243e6:	f7ee f917 	bl	8012618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin;
 80243ea:	f240 6301 	movw	r3, #1537	; 0x601
 80243ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80243f0:	2301      	movs	r3, #1
 80243f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80243f4:	2300      	movs	r3, #0
 80243f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80243f8:	2300      	movs	r3, #0
 80243fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80243fc:	f107 031c 	add.w	r3, r7, #28
 8024400:	4619      	mov	r1, r3
 8024402:	4804      	ldr	r0, [pc, #16]	; (8024414 <MX_GPIO_Init+0xf4>)
 8024404:	f7ed ff6e 	bl	80122e4 <HAL_GPIO_Init>

}
 8024408:	bf00      	nop
 802440a:	3730      	adds	r7, #48	; 0x30
 802440c:	46bd      	mov	sp, r7
 802440e:	bd80      	pop	{r7, pc}
 8024410:	40023800 	.word	0x40023800
 8024414:	40021000 	.word	0x40021000

08024418 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8024418:	b480      	push	{r7}
 802441a:	af00      	add	r7, sp, #0
  hiwdg.Instance = IWDG;
 802441c:	4b07      	ldr	r3, [pc, #28]	; (802443c <MX_IWDG_Init+0x24>)
 802441e:	4a08      	ldr	r2, [pc, #32]	; (8024440 <MX_IWDG_Init+0x28>)
 8024420:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8024422:	4b06      	ldr	r3, [pc, #24]	; (802443c <MX_IWDG_Init+0x24>)
 8024424:	2200      	movs	r2, #0
 8024426:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 400;
 8024428:	4b04      	ldr	r3, [pc, #16]	; (802443c <MX_IWDG_Init+0x24>)
 802442a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802442e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
  {
    Error_Handler();
  }
*/
}
 8024430:	bf00      	nop
 8024432:	46bd      	mov	sp, r7
 8024434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024438:	4770      	bx	lr
 802443a:	bf00      	nop
 802443c:	20011e20 	.word	0x20011e20
 8024440:	40003000 	.word	0x40003000

08024444 <jsmn_alloc_token>:

/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
 8024444:	b480      	push	{r7}
 8024446:	b087      	sub	sp, #28
 8024448:	af00      	add	r7, sp, #0
 802444a:	60f8      	str	r0, [r7, #12]
 802444c:	60b9      	str	r1, [r7, #8]
 802444e:	607a      	str	r2, [r7, #4]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
 8024450:	68fb      	ldr	r3, [r7, #12]
 8024452:	685a      	ldr	r2, [r3, #4]
 8024454:	687b      	ldr	r3, [r7, #4]
 8024456:	429a      	cmp	r2, r3
 8024458:	d301      	bcc.n	802445e <jsmn_alloc_token+0x1a>
		return NULL;
 802445a:	2300      	movs	r3, #0
 802445c:	e014      	b.n	8024488 <jsmn_alloc_token+0x44>
	}
	tok = &tokens[parser->toknext++];
 802445e:	68fb      	ldr	r3, [r7, #12]
 8024460:	685b      	ldr	r3, [r3, #4]
 8024462:	1c59      	adds	r1, r3, #1
 8024464:	68fa      	ldr	r2, [r7, #12]
 8024466:	6051      	str	r1, [r2, #4]
 8024468:	011b      	lsls	r3, r3, #4
 802446a:	68ba      	ldr	r2, [r7, #8]
 802446c:	4413      	add	r3, r2
 802446e:	617b      	str	r3, [r7, #20]
	tok->start = tok->end = -1;
 8024470:	697b      	ldr	r3, [r7, #20]
 8024472:	f04f 32ff 	mov.w	r2, #4294967295
 8024476:	609a      	str	r2, [r3, #8]
 8024478:	697b      	ldr	r3, [r7, #20]
 802447a:	689a      	ldr	r2, [r3, #8]
 802447c:	697b      	ldr	r3, [r7, #20]
 802447e:	605a      	str	r2, [r3, #4]
	tok->size = 0;
 8024480:	697b      	ldr	r3, [r7, #20]
 8024482:	2200      	movs	r2, #0
 8024484:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
	tok->parent = -1;
#endif
	return tok;
 8024486:	697b      	ldr	r3, [r7, #20]
}
 8024488:	4618      	mov	r0, r3
 802448a:	371c      	adds	r7, #28
 802448c:	46bd      	mov	sp, r7
 802448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024492:	4770      	bx	lr

08024494 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
 8024494:	b480      	push	{r7}
 8024496:	b085      	sub	sp, #20
 8024498:	af00      	add	r7, sp, #0
 802449a:	60f8      	str	r0, [r7, #12]
 802449c:	607a      	str	r2, [r7, #4]
 802449e:	603b      	str	r3, [r7, #0]
 80244a0:	460b      	mov	r3, r1
 80244a2:	72fb      	strb	r3, [r7, #11]
	token->type = type;
 80244a4:	68fb      	ldr	r3, [r7, #12]
 80244a6:	7afa      	ldrb	r2, [r7, #11]
 80244a8:	701a      	strb	r2, [r3, #0]
	token->start = start;
 80244aa:	68fb      	ldr	r3, [r7, #12]
 80244ac:	687a      	ldr	r2, [r7, #4]
 80244ae:	605a      	str	r2, [r3, #4]
	token->end = end;
 80244b0:	68fb      	ldr	r3, [r7, #12]
 80244b2:	683a      	ldr	r2, [r7, #0]
 80244b4:	609a      	str	r2, [r3, #8]
	token->size = 0;
 80244b6:	68fb      	ldr	r3, [r7, #12]
 80244b8:	2200      	movs	r2, #0
 80244ba:	60da      	str	r2, [r3, #12]
}
 80244bc:	bf00      	nop
 80244be:	3714      	adds	r7, #20
 80244c0:	46bd      	mov	sp, r7
 80244c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244c6:	4770      	bx	lr

080244c8 <jsmn_parse_primitive>:

/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
 80244c8:	b580      	push	{r7, lr}
 80244ca:	b086      	sub	sp, #24
 80244cc:	af00      	add	r7, sp, #0
 80244ce:	60f8      	str	r0, [r7, #12]
 80244d0:	60b9      	str	r1, [r7, #8]
 80244d2:	607a      	str	r2, [r7, #4]
 80244d4:	603b      	str	r3, [r7, #0]
	jsmntok_t *token;
	int start;

	start = parser->pos;
 80244d6:	68fb      	ldr	r3, [r7, #12]
 80244d8:	681b      	ldr	r3, [r3, #0]
 80244da:	617b      	str	r3, [r7, #20]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80244dc:	e033      	b.n	8024546 <jsmn_parse_primitive+0x7e>
		switch (js[parser->pos]) {
 80244de:	68fb      	ldr	r3, [r7, #12]
 80244e0:	681b      	ldr	r3, [r3, #0]
 80244e2:	68ba      	ldr	r2, [r7, #8]
 80244e4:	4413      	add	r3, r2
 80244e6:	781b      	ldrb	r3, [r3, #0]
 80244e8:	2b20      	cmp	r3, #32
 80244ea:	d039      	beq.n	8024560 <jsmn_parse_primitive+0x98>
 80244ec:	2b20      	cmp	r3, #32
 80244ee:	dc06      	bgt.n	80244fe <jsmn_parse_primitive+0x36>
 80244f0:	2b09      	cmp	r3, #9
 80244f2:	db0f      	blt.n	8024514 <jsmn_parse_primitive+0x4c>
 80244f4:	2b0a      	cmp	r3, #10
 80244f6:	dd33      	ble.n	8024560 <jsmn_parse_primitive+0x98>
 80244f8:	2b0d      	cmp	r3, #13
 80244fa:	d031      	beq.n	8024560 <jsmn_parse_primitive+0x98>
 80244fc:	e00a      	b.n	8024514 <jsmn_parse_primitive+0x4c>
 80244fe:	2b3a      	cmp	r3, #58	; 0x3a
 8024500:	d02e      	beq.n	8024560 <jsmn_parse_primitive+0x98>
 8024502:	2b3a      	cmp	r3, #58	; 0x3a
 8024504:	dc02      	bgt.n	802450c <jsmn_parse_primitive+0x44>
 8024506:	2b2c      	cmp	r3, #44	; 0x2c
 8024508:	d02a      	beq.n	8024560 <jsmn_parse_primitive+0x98>
 802450a:	e003      	b.n	8024514 <jsmn_parse_primitive+0x4c>
 802450c:	2b5d      	cmp	r3, #93	; 0x5d
 802450e:	d027      	beq.n	8024560 <jsmn_parse_primitive+0x98>
 8024510:	2b7d      	cmp	r3, #125	; 0x7d
 8024512:	d025      	beq.n	8024560 <jsmn_parse_primitive+0x98>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8024514:	68fb      	ldr	r3, [r7, #12]
 8024516:	681b      	ldr	r3, [r3, #0]
 8024518:	68ba      	ldr	r2, [r7, #8]
 802451a:	4413      	add	r3, r2
 802451c:	781b      	ldrb	r3, [r3, #0]
 802451e:	2b1f      	cmp	r3, #31
 8024520:	d906      	bls.n	8024530 <jsmn_parse_primitive+0x68>
 8024522:	68fb      	ldr	r3, [r7, #12]
 8024524:	681b      	ldr	r3, [r3, #0]
 8024526:	68ba      	ldr	r2, [r7, #8]
 8024528:	4413      	add	r3, r2
 802452a:	781b      	ldrb	r3, [r3, #0]
 802452c:	2b7e      	cmp	r3, #126	; 0x7e
 802452e:	d905      	bls.n	802453c <jsmn_parse_primitive+0x74>
			parser->pos = start;
 8024530:	697a      	ldr	r2, [r7, #20]
 8024532:	68fb      	ldr	r3, [r7, #12]
 8024534:	601a      	str	r2, [r3, #0]
			return JSMN_ERROR_INVAL;
 8024536:	f06f 0301 	mvn.w	r3, #1
 802453a:	e038      	b.n	80245ae <jsmn_parse_primitive+0xe6>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 802453c:	68fb      	ldr	r3, [r7, #12]
 802453e:	681b      	ldr	r3, [r3, #0]
 8024540:	1c5a      	adds	r2, r3, #1
 8024542:	68fb      	ldr	r3, [r7, #12]
 8024544:	601a      	str	r2, [r3, #0]
 8024546:	68fb      	ldr	r3, [r7, #12]
 8024548:	681a      	ldr	r2, [r3, #0]
 802454a:	687b      	ldr	r3, [r7, #4]
 802454c:	429a      	cmp	r2, r3
 802454e:	d208      	bcs.n	8024562 <jsmn_parse_primitive+0x9a>
 8024550:	68fb      	ldr	r3, [r7, #12]
 8024552:	681b      	ldr	r3, [r3, #0]
 8024554:	68ba      	ldr	r2, [r7, #8]
 8024556:	4413      	add	r3, r2
 8024558:	781b      	ldrb	r3, [r3, #0]
 802455a:	2b00      	cmp	r3, #0
 802455c:	d1bf      	bne.n	80244de <jsmn_parse_primitive+0x16>
 802455e:	e000      	b.n	8024562 <jsmn_parse_primitive+0x9a>
				goto found;
 8024560:	bf00      	nop
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
 8024562:	683b      	ldr	r3, [r7, #0]
 8024564:	2b00      	cmp	r3, #0
 8024566:	d106      	bne.n	8024576 <jsmn_parse_primitive+0xae>
		parser->pos--;
 8024568:	68fb      	ldr	r3, [r7, #12]
 802456a:	681b      	ldr	r3, [r3, #0]
 802456c:	1e5a      	subs	r2, r3, #1
 802456e:	68fb      	ldr	r3, [r7, #12]
 8024570:	601a      	str	r2, [r3, #0]
		return 0;
 8024572:	2300      	movs	r3, #0
 8024574:	e01b      	b.n	80245ae <jsmn_parse_primitive+0xe6>
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
 8024576:	6a3a      	ldr	r2, [r7, #32]
 8024578:	6839      	ldr	r1, [r7, #0]
 802457a:	68f8      	ldr	r0, [r7, #12]
 802457c:	f7ff ff62 	bl	8024444 <jsmn_alloc_token>
 8024580:	6138      	str	r0, [r7, #16]
	if (token == NULL) {
 8024582:	693b      	ldr	r3, [r7, #16]
 8024584:	2b00      	cmp	r3, #0
 8024586:	d105      	bne.n	8024594 <jsmn_parse_primitive+0xcc>
		parser->pos = start;
 8024588:	697a      	ldr	r2, [r7, #20]
 802458a:	68fb      	ldr	r3, [r7, #12]
 802458c:	601a      	str	r2, [r3, #0]
		return JSMN_ERROR_NOMEM;
 802458e:	f04f 33ff 	mov.w	r3, #4294967295
 8024592:	e00c      	b.n	80245ae <jsmn_parse_primitive+0xe6>
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8024594:	68fb      	ldr	r3, [r7, #12]
 8024596:	681b      	ldr	r3, [r3, #0]
 8024598:	697a      	ldr	r2, [r7, #20]
 802459a:	2104      	movs	r1, #4
 802459c:	6938      	ldr	r0, [r7, #16]
 802459e:	f7ff ff79 	bl	8024494 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
 80245a2:	68fb      	ldr	r3, [r7, #12]
 80245a4:	681b      	ldr	r3, [r3, #0]
 80245a6:	1e5a      	subs	r2, r3, #1
 80245a8:	68fb      	ldr	r3, [r7, #12]
 80245aa:	601a      	str	r2, [r3, #0]
	return 0;
 80245ac:	2300      	movs	r3, #0
}
 80245ae:	4618      	mov	r0, r3
 80245b0:	3718      	adds	r7, #24
 80245b2:	46bd      	mov	sp, r7
 80245b4:	bd80      	pop	{r7, pc}
	...

080245b8 <jsmn_parse_string>:

/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
 80245b8:	b580      	push	{r7, lr}
 80245ba:	b088      	sub	sp, #32
 80245bc:	af00      	add	r7, sp, #0
 80245be:	60f8      	str	r0, [r7, #12]
 80245c0:	60b9      	str	r1, [r7, #8]
 80245c2:	607a      	str	r2, [r7, #4]
 80245c4:	603b      	str	r3, [r7, #0]
	jsmntok_t *token;

	int start = parser->pos;
 80245c6:	68fb      	ldr	r3, [r7, #12]
 80245c8:	681b      	ldr	r3, [r3, #0]
 80245ca:	61bb      	str	r3, [r7, #24]

	parser->pos++;
 80245cc:	68fb      	ldr	r3, [r7, #12]
 80245ce:	681b      	ldr	r3, [r3, #0]
 80245d0:	1c5a      	adds	r2, r3, #1
 80245d2:	68fb      	ldr	r3, [r7, #12]
 80245d4:	601a      	str	r2, [r3, #0]

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80245d6:	e14c      	b.n	8024872 <jsmn_parse_string+0x2ba>
		char c = js[parser->pos];
 80245d8:	68fb      	ldr	r3, [r7, #12]
 80245da:	681b      	ldr	r3, [r3, #0]
 80245dc:	68ba      	ldr	r2, [r7, #8]
 80245de:	4413      	add	r3, r2
 80245e0:	781b      	ldrb	r3, [r3, #0]
 80245e2:	75fb      	strb	r3, [r7, #23]

		/* Quote: end of string */
		if (c == '\"') {
 80245e4:	7dfb      	ldrb	r3, [r7, #23]
 80245e6:	2b22      	cmp	r3, #34	; 0x22
 80245e8:	d11d      	bne.n	8024626 <jsmn_parse_string+0x6e>
			if (tokens == NULL) {
 80245ea:	683b      	ldr	r3, [r7, #0]
 80245ec:	2b00      	cmp	r3, #0
 80245ee:	d101      	bne.n	80245f4 <jsmn_parse_string+0x3c>
				return 0;
 80245f0:	2300      	movs	r3, #0
 80245f2:	e150      	b.n	8024896 <jsmn_parse_string+0x2de>
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
 80245f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80245f6:	6839      	ldr	r1, [r7, #0]
 80245f8:	68f8      	ldr	r0, [r7, #12]
 80245fa:	f7ff ff23 	bl	8024444 <jsmn_alloc_token>
 80245fe:	6138      	str	r0, [r7, #16]
			if (token == NULL) {
 8024600:	693b      	ldr	r3, [r7, #16]
 8024602:	2b00      	cmp	r3, #0
 8024604:	d105      	bne.n	8024612 <jsmn_parse_string+0x5a>
				parser->pos = start;
 8024606:	69ba      	ldr	r2, [r7, #24]
 8024608:	68fb      	ldr	r3, [r7, #12]
 802460a:	601a      	str	r2, [r3, #0]
				return JSMN_ERROR_NOMEM;
 802460c:	f04f 33ff 	mov.w	r3, #4294967295
 8024610:	e141      	b.n	8024896 <jsmn_parse_string+0x2de>
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 8024612:	69bb      	ldr	r3, [r7, #24]
 8024614:	1c5a      	adds	r2, r3, #1
 8024616:	68fb      	ldr	r3, [r7, #12]
 8024618:	681b      	ldr	r3, [r3, #0]
 802461a:	2103      	movs	r1, #3
 802461c:	6938      	ldr	r0, [r7, #16]
 802461e:	f7ff ff39 	bl	8024494 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
			token->parent = parser->toksuper;
#endif
			return 0;
 8024622:	2300      	movs	r3, #0
 8024624:	e137      	b.n	8024896 <jsmn_parse_string+0x2de>
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
 8024626:	7dfb      	ldrb	r3, [r7, #23]
 8024628:	2b5c      	cmp	r3, #92	; 0x5c
 802462a:	f040 811d 	bne.w	8024868 <jsmn_parse_string+0x2b0>
 802462e:	68fb      	ldr	r3, [r7, #12]
 8024630:	681b      	ldr	r3, [r3, #0]
 8024632:	1c5a      	adds	r2, r3, #1
 8024634:	687b      	ldr	r3, [r7, #4]
 8024636:	429a      	cmp	r2, r3
 8024638:	f080 8116 	bcs.w	8024868 <jsmn_parse_string+0x2b0>
			int i;
			parser->pos++;
 802463c:	68fb      	ldr	r3, [r7, #12]
 802463e:	681b      	ldr	r3, [r3, #0]
 8024640:	1c5a      	adds	r2, r3, #1
 8024642:	68fb      	ldr	r3, [r7, #12]
 8024644:	601a      	str	r2, [r3, #0]
			switch (js[parser->pos]) {
 8024646:	68fb      	ldr	r3, [r7, #12]
 8024648:	681b      	ldr	r3, [r3, #0]
 802464a:	68ba      	ldr	r2, [r7, #8]
 802464c:	4413      	add	r3, r2
 802464e:	781b      	ldrb	r3, [r3, #0]
 8024650:	3b22      	subs	r3, #34	; 0x22
 8024652:	2b53      	cmp	r3, #83	; 0x53
 8024654:	f200 8101 	bhi.w	802485a <jsmn_parse_string+0x2a2>
 8024658:	a201      	add	r2, pc, #4	; (adr r2, 8024660 <jsmn_parse_string+0xa8>)
 802465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802465e:	bf00      	nop
 8024660:	08024867 	.word	0x08024867
 8024664:	0802485b 	.word	0x0802485b
 8024668:	0802485b 	.word	0x0802485b
 802466c:	0802485b 	.word	0x0802485b
 8024670:	0802485b 	.word	0x0802485b
 8024674:	0802485b 	.word	0x0802485b
 8024678:	0802485b 	.word	0x0802485b
 802467c:	0802485b 	.word	0x0802485b
 8024680:	0802485b 	.word	0x0802485b
 8024684:	0802485b 	.word	0x0802485b
 8024688:	0802485b 	.word	0x0802485b
 802468c:	0802485b 	.word	0x0802485b
 8024690:	0802485b 	.word	0x0802485b
 8024694:	08024867 	.word	0x08024867
 8024698:	0802485b 	.word	0x0802485b
 802469c:	0802485b 	.word	0x0802485b
 80246a0:	0802485b 	.word	0x0802485b
 80246a4:	0802485b 	.word	0x0802485b
 80246a8:	0802485b 	.word	0x0802485b
 80246ac:	0802485b 	.word	0x0802485b
 80246b0:	0802485b 	.word	0x0802485b
 80246b4:	0802485b 	.word	0x0802485b
 80246b8:	0802485b 	.word	0x0802485b
 80246bc:	0802485b 	.word	0x0802485b
 80246c0:	0802485b 	.word	0x0802485b
 80246c4:	0802485b 	.word	0x0802485b
 80246c8:	0802485b 	.word	0x0802485b
 80246cc:	0802485b 	.word	0x0802485b
 80246d0:	0802485b 	.word	0x0802485b
 80246d4:	0802485b 	.word	0x0802485b
 80246d8:	0802485b 	.word	0x0802485b
 80246dc:	0802485b 	.word	0x0802485b
 80246e0:	0802485b 	.word	0x0802485b
 80246e4:	0802485b 	.word	0x0802485b
 80246e8:	0802485b 	.word	0x0802485b
 80246ec:	0802485b 	.word	0x0802485b
 80246f0:	0802485b 	.word	0x0802485b
 80246f4:	0802485b 	.word	0x0802485b
 80246f8:	0802485b 	.word	0x0802485b
 80246fc:	0802485b 	.word	0x0802485b
 8024700:	0802485b 	.word	0x0802485b
 8024704:	0802485b 	.word	0x0802485b
 8024708:	0802485b 	.word	0x0802485b
 802470c:	0802485b 	.word	0x0802485b
 8024710:	0802485b 	.word	0x0802485b
 8024714:	0802485b 	.word	0x0802485b
 8024718:	0802485b 	.word	0x0802485b
 802471c:	0802485b 	.word	0x0802485b
 8024720:	0802485b 	.word	0x0802485b
 8024724:	0802485b 	.word	0x0802485b
 8024728:	0802485b 	.word	0x0802485b
 802472c:	0802485b 	.word	0x0802485b
 8024730:	0802485b 	.word	0x0802485b
 8024734:	0802485b 	.word	0x0802485b
 8024738:	0802485b 	.word	0x0802485b
 802473c:	0802485b 	.word	0x0802485b
 8024740:	0802485b 	.word	0x0802485b
 8024744:	0802485b 	.word	0x0802485b
 8024748:	08024867 	.word	0x08024867
 802474c:	0802485b 	.word	0x0802485b
 8024750:	0802485b 	.word	0x0802485b
 8024754:	0802485b 	.word	0x0802485b
 8024758:	0802485b 	.word	0x0802485b
 802475c:	0802485b 	.word	0x0802485b
 8024760:	08024867 	.word	0x08024867
 8024764:	0802485b 	.word	0x0802485b
 8024768:	0802485b 	.word	0x0802485b
 802476c:	0802485b 	.word	0x0802485b
 8024770:	08024867 	.word	0x08024867
 8024774:	0802485b 	.word	0x0802485b
 8024778:	0802485b 	.word	0x0802485b
 802477c:	0802485b 	.word	0x0802485b
 8024780:	0802485b 	.word	0x0802485b
 8024784:	0802485b 	.word	0x0802485b
 8024788:	0802485b 	.word	0x0802485b
 802478c:	0802485b 	.word	0x0802485b
 8024790:	08024867 	.word	0x08024867
 8024794:	0802485b 	.word	0x0802485b
 8024798:	0802485b 	.word	0x0802485b
 802479c:	0802485b 	.word	0x0802485b
 80247a0:	08024867 	.word	0x08024867
 80247a4:	0802485b 	.word	0x0802485b
 80247a8:	08024867 	.word	0x08024867
 80247ac:	080247b1 	.word	0x080247b1
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
 80247b0:	68fb      	ldr	r3, [r7, #12]
 80247b2:	681b      	ldr	r3, [r3, #0]
 80247b4:	1c5a      	adds	r2, r3, #1
 80247b6:	68fb      	ldr	r3, [r7, #12]
 80247b8:	601a      	str	r2, [r3, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80247ba:	2300      	movs	r3, #0
 80247bc:	61fb      	str	r3, [r7, #28]
 80247be:	e037      	b.n	8024830 <jsmn_parse_string+0x278>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 80247c0:	68fb      	ldr	r3, [r7, #12]
 80247c2:	681b      	ldr	r3, [r3, #0]
 80247c4:	68ba      	ldr	r2, [r7, #8]
 80247c6:	4413      	add	r3, r2
 80247c8:	781b      	ldrb	r3, [r3, #0]
 80247ca:	2b2f      	cmp	r3, #47	; 0x2f
 80247cc:	d906      	bls.n	80247dc <jsmn_parse_string+0x224>
 80247ce:	68fb      	ldr	r3, [r7, #12]
 80247d0:	681b      	ldr	r3, [r3, #0]
 80247d2:	68ba      	ldr	r2, [r7, #8]
 80247d4:	4413      	add	r3, r2
 80247d6:	781b      	ldrb	r3, [r3, #0]
 80247d8:	2b39      	cmp	r3, #57	; 0x39
 80247da:	d921      	bls.n	8024820 <jsmn_parse_string+0x268>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
 80247dc:	68fb      	ldr	r3, [r7, #12]
 80247de:	681b      	ldr	r3, [r3, #0]
 80247e0:	68ba      	ldr	r2, [r7, #8]
 80247e2:	4413      	add	r3, r2
 80247e4:	781b      	ldrb	r3, [r3, #0]
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 80247e6:	2b40      	cmp	r3, #64	; 0x40
 80247e8:	d906      	bls.n	80247f8 <jsmn_parse_string+0x240>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
 80247ea:	68fb      	ldr	r3, [r7, #12]
 80247ec:	681b      	ldr	r3, [r3, #0]
 80247ee:	68ba      	ldr	r2, [r7, #8]
 80247f0:	4413      	add	r3, r2
 80247f2:	781b      	ldrb	r3, [r3, #0]
 80247f4:	2b46      	cmp	r3, #70	; 0x46
 80247f6:	d913      	bls.n	8024820 <jsmn_parse_string+0x268>
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 80247f8:	68fb      	ldr	r3, [r7, #12]
 80247fa:	681b      	ldr	r3, [r3, #0]
 80247fc:	68ba      	ldr	r2, [r7, #8]
 80247fe:	4413      	add	r3, r2
 8024800:	781b      	ldrb	r3, [r3, #0]
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 8024802:	2b60      	cmp	r3, #96	; 0x60
 8024804:	d906      	bls.n	8024814 <jsmn_parse_string+0x25c>
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8024806:	68fb      	ldr	r3, [r7, #12]
 8024808:	681b      	ldr	r3, [r3, #0]
 802480a:	68ba      	ldr	r2, [r7, #8]
 802480c:	4413      	add	r3, r2
 802480e:	781b      	ldrb	r3, [r3, #0]
 8024810:	2b66      	cmp	r3, #102	; 0x66
 8024812:	d905      	bls.n	8024820 <jsmn_parse_string+0x268>
							parser->pos = start;
 8024814:	69ba      	ldr	r2, [r7, #24]
 8024816:	68fb      	ldr	r3, [r7, #12]
 8024818:	601a      	str	r2, [r3, #0]
							return JSMN_ERROR_INVAL;
 802481a:	f06f 0301 	mvn.w	r3, #1
 802481e:	e03a      	b.n	8024896 <jsmn_parse_string+0x2de>
						}
						parser->pos++;
 8024820:	68fb      	ldr	r3, [r7, #12]
 8024822:	681b      	ldr	r3, [r3, #0]
 8024824:	1c5a      	adds	r2, r3, #1
 8024826:	68fb      	ldr	r3, [r7, #12]
 8024828:	601a      	str	r2, [r3, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 802482a:	69fb      	ldr	r3, [r7, #28]
 802482c:	3301      	adds	r3, #1
 802482e:	61fb      	str	r3, [r7, #28]
 8024830:	69fb      	ldr	r3, [r7, #28]
 8024832:	2b03      	cmp	r3, #3
 8024834:	dc0b      	bgt.n	802484e <jsmn_parse_string+0x296>
 8024836:	68fb      	ldr	r3, [r7, #12]
 8024838:	681a      	ldr	r2, [r3, #0]
 802483a:	687b      	ldr	r3, [r7, #4]
 802483c:	429a      	cmp	r2, r3
 802483e:	d206      	bcs.n	802484e <jsmn_parse_string+0x296>
 8024840:	68fb      	ldr	r3, [r7, #12]
 8024842:	681b      	ldr	r3, [r3, #0]
 8024844:	68ba      	ldr	r2, [r7, #8]
 8024846:	4413      	add	r3, r2
 8024848:	781b      	ldrb	r3, [r3, #0]
 802484a:	2b00      	cmp	r3, #0
 802484c:	d1b8      	bne.n	80247c0 <jsmn_parse_string+0x208>
					}
					parser->pos--;
 802484e:	68fb      	ldr	r3, [r7, #12]
 8024850:	681b      	ldr	r3, [r3, #0]
 8024852:	1e5a      	subs	r2, r3, #1
 8024854:	68fb      	ldr	r3, [r7, #12]
 8024856:	601a      	str	r2, [r3, #0]
					break;
 8024858:	e006      	b.n	8024868 <jsmn_parse_string+0x2b0>
				/* Unexpected symbol */
				default:
					parser->pos = start;
 802485a:	69ba      	ldr	r2, [r7, #24]
 802485c:	68fb      	ldr	r3, [r7, #12]
 802485e:	601a      	str	r2, [r3, #0]
					return JSMN_ERROR_INVAL;
 8024860:	f06f 0301 	mvn.w	r3, #1
 8024864:	e017      	b.n	8024896 <jsmn_parse_string+0x2de>
					break;
 8024866:	bf00      	nop
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8024868:	68fb      	ldr	r3, [r7, #12]
 802486a:	681b      	ldr	r3, [r3, #0]
 802486c:	1c5a      	adds	r2, r3, #1
 802486e:	68fb      	ldr	r3, [r7, #12]
 8024870:	601a      	str	r2, [r3, #0]
 8024872:	68fb      	ldr	r3, [r7, #12]
 8024874:	681a      	ldr	r2, [r3, #0]
 8024876:	687b      	ldr	r3, [r7, #4]
 8024878:	429a      	cmp	r2, r3
 802487a:	d207      	bcs.n	802488c <jsmn_parse_string+0x2d4>
 802487c:	68fb      	ldr	r3, [r7, #12]
 802487e:	681b      	ldr	r3, [r3, #0]
 8024880:	68ba      	ldr	r2, [r7, #8]
 8024882:	4413      	add	r3, r2
 8024884:	781b      	ldrb	r3, [r3, #0]
 8024886:	2b00      	cmp	r3, #0
 8024888:	f47f aea6 	bne.w	80245d8 <jsmn_parse_string+0x20>
			}
		}
	}
	parser->pos = start;
 802488c:	69ba      	ldr	r2, [r7, #24]
 802488e:	68fb      	ldr	r3, [r7, #12]
 8024890:	601a      	str	r2, [r3, #0]
	return JSMN_ERROR_PART;
 8024892:	f06f 0302 	mvn.w	r3, #2
}
 8024896:	4618      	mov	r0, r3
 8024898:	3720      	adds	r7, #32
 802489a:	46bd      	mov	sp, r7
 802489c:	bd80      	pop	{r7, pc}
 802489e:	bf00      	nop

080248a0 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 80248a0:	b580      	push	{r7, lr}
 80248a2:	b08c      	sub	sp, #48	; 0x30
 80248a4:	af02      	add	r7, sp, #8
 80248a6:	60f8      	str	r0, [r7, #12]
 80248a8:	60b9      	str	r1, [r7, #8]
 80248aa:	607a      	str	r2, [r7, #4]
 80248ac:	603b      	str	r3, [r7, #0]
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 80248ae:	68fb      	ldr	r3, [r7, #12]
 80248b0:	685b      	ldr	r3, [r3, #4]
 80248b2:	623b      	str	r3, [r7, #32]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80248b4:	e15c      	b.n	8024b70 <jsmn_parse+0x2d0>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
 80248b6:	68fb      	ldr	r3, [r7, #12]
 80248b8:	681b      	ldr	r3, [r3, #0]
 80248ba:	68ba      	ldr	r2, [r7, #8]
 80248bc:	4413      	add	r3, r2
 80248be:	781b      	ldrb	r3, [r3, #0]
 80248c0:	77fb      	strb	r3, [r7, #31]
		switch (c) {
 80248c2:	7ffb      	ldrb	r3, [r7, #31]
 80248c4:	2b2c      	cmp	r3, #44	; 0x2c
 80248c6:	f000 80da 	beq.w	8024a7e <jsmn_parse+0x1de>
 80248ca:	2b2c      	cmp	r3, #44	; 0x2c
 80248cc:	dc10      	bgt.n	80248f0 <jsmn_parse+0x50>
 80248ce:	2b0d      	cmp	r3, #13
 80248d0:	f000 813e 	beq.w	8024b50 <jsmn_parse+0x2b0>
 80248d4:	2b0d      	cmp	r3, #13
 80248d6:	dc04      	bgt.n	80248e2 <jsmn_parse+0x42>
 80248d8:	3b09      	subs	r3, #9
 80248da:	2b01      	cmp	r3, #1
 80248dc:	f200 8116 	bhi.w	8024b0c <jsmn_parse+0x26c>
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
 80248e0:	e136      	b.n	8024b50 <jsmn_parse+0x2b0>
		switch (c) {
 80248e2:	2b20      	cmp	r3, #32
 80248e4:	f000 8134 	beq.w	8024b50 <jsmn_parse+0x2b0>
 80248e8:	2b22      	cmp	r3, #34	; 0x22
 80248ea:	f000 809e 	beq.w	8024a2a <jsmn_parse+0x18a>
 80248ee:	e10d      	b.n	8024b0c <jsmn_parse+0x26c>
 80248f0:	2b5d      	cmp	r3, #93	; 0x5d
 80248f2:	d040      	beq.n	8024976 <jsmn_parse+0xd6>
 80248f4:	2b5d      	cmp	r3, #93	; 0x5d
 80248f6:	dc05      	bgt.n	8024904 <jsmn_parse+0x64>
 80248f8:	2b3a      	cmp	r3, #58	; 0x3a
 80248fa:	f000 80b9 	beq.w	8024a70 <jsmn_parse+0x1d0>
 80248fe:	2b5b      	cmp	r3, #91	; 0x5b
 8024900:	d005      	beq.n	802490e <jsmn_parse+0x6e>
 8024902:	e103      	b.n	8024b0c <jsmn_parse+0x26c>
 8024904:	2b7b      	cmp	r3, #123	; 0x7b
 8024906:	d002      	beq.n	802490e <jsmn_parse+0x6e>
 8024908:	2b7d      	cmp	r3, #125	; 0x7d
 802490a:	d034      	beq.n	8024976 <jsmn_parse+0xd6>
 802490c:	e0fe      	b.n	8024b0c <jsmn_parse+0x26c>
				count++;
 802490e:	6a3b      	ldr	r3, [r7, #32]
 8024910:	3301      	adds	r3, #1
 8024912:	623b      	str	r3, [r7, #32]
				if (tokens == NULL) {
 8024914:	683b      	ldr	r3, [r7, #0]
 8024916:	2b00      	cmp	r3, #0
 8024918:	f000 811c 	beq.w	8024b54 <jsmn_parse+0x2b4>
				token = jsmn_alloc_token(parser, tokens, num_tokens);
 802491c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802491e:	6839      	ldr	r1, [r7, #0]
 8024920:	68f8      	ldr	r0, [r7, #12]
 8024922:	f7ff fd8f 	bl	8024444 <jsmn_alloc_token>
 8024926:	61b8      	str	r0, [r7, #24]
				if (token == NULL)
 8024928:	69bb      	ldr	r3, [r7, #24]
 802492a:	2b00      	cmp	r3, #0
 802492c:	d102      	bne.n	8024934 <jsmn_parse+0x94>
					return JSMN_ERROR_NOMEM;
 802492e:	f04f 33ff 	mov.w	r3, #4294967295
 8024932:	e14c      	b.n	8024bce <jsmn_parse+0x32e>
				if (parser->toksuper != -1) {
 8024934:	68fb      	ldr	r3, [r7, #12]
 8024936:	689b      	ldr	r3, [r3, #8]
 8024938:	f1b3 3fff 	cmp.w	r3, #4294967295
 802493c:	d007      	beq.n	802494e <jsmn_parse+0xae>
					tokens[parser->toksuper].size++;
 802493e:	68fb      	ldr	r3, [r7, #12]
 8024940:	689b      	ldr	r3, [r3, #8]
 8024942:	011b      	lsls	r3, r3, #4
 8024944:	683a      	ldr	r2, [r7, #0]
 8024946:	4413      	add	r3, r2
 8024948:	68da      	ldr	r2, [r3, #12]
 802494a:	3201      	adds	r2, #1
 802494c:	60da      	str	r2, [r3, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 802494e:	7ffb      	ldrb	r3, [r7, #31]
 8024950:	2b7b      	cmp	r3, #123	; 0x7b
 8024952:	d101      	bne.n	8024958 <jsmn_parse+0xb8>
 8024954:	2201      	movs	r2, #1
 8024956:	e000      	b.n	802495a <jsmn_parse+0xba>
 8024958:	2202      	movs	r2, #2
 802495a:	69bb      	ldr	r3, [r7, #24]
 802495c:	701a      	strb	r2, [r3, #0]
				token->start = parser->pos;
 802495e:	68fb      	ldr	r3, [r7, #12]
 8024960:	681b      	ldr	r3, [r3, #0]
 8024962:	461a      	mov	r2, r3
 8024964:	69bb      	ldr	r3, [r7, #24]
 8024966:	605a      	str	r2, [r3, #4]
				parser->toksuper = parser->toknext - 1;
 8024968:	68fb      	ldr	r3, [r7, #12]
 802496a:	685b      	ldr	r3, [r3, #4]
 802496c:	3b01      	subs	r3, #1
 802496e:	461a      	mov	r2, r3
 8024970:	68fb      	ldr	r3, [r7, #12]
 8024972:	609a      	str	r2, [r3, #8]
				break;
 8024974:	e0f7      	b.n	8024b66 <jsmn_parse+0x2c6>
				if (tokens == NULL)
 8024976:	683b      	ldr	r3, [r7, #0]
 8024978:	2b00      	cmp	r3, #0
 802497a:	f000 80ed 	beq.w	8024b58 <jsmn_parse+0x2b8>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 802497e:	7ffb      	ldrb	r3, [r7, #31]
 8024980:	2b7d      	cmp	r3, #125	; 0x7d
 8024982:	d101      	bne.n	8024988 <jsmn_parse+0xe8>
 8024984:	2301      	movs	r3, #1
 8024986:	e000      	b.n	802498a <jsmn_parse+0xea>
 8024988:	2302      	movs	r3, #2
 802498a:	77bb      	strb	r3, [r7, #30]
				for (i = parser->toknext - 1; i >= 0; i--) {
 802498c:	68fb      	ldr	r3, [r7, #12]
 802498e:	685b      	ldr	r3, [r3, #4]
 8024990:	3b01      	subs	r3, #1
 8024992:	627b      	str	r3, [r7, #36]	; 0x24
 8024994:	e024      	b.n	80249e0 <jsmn_parse+0x140>
					token = &tokens[i];
 8024996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024998:	011b      	lsls	r3, r3, #4
 802499a:	683a      	ldr	r2, [r7, #0]
 802499c:	4413      	add	r3, r2
 802499e:	61bb      	str	r3, [r7, #24]
					if (token->start != -1 && token->end == -1) {
 80249a0:	69bb      	ldr	r3, [r7, #24]
 80249a2:	685b      	ldr	r3, [r3, #4]
 80249a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80249a8:	d017      	beq.n	80249da <jsmn_parse+0x13a>
 80249aa:	69bb      	ldr	r3, [r7, #24]
 80249ac:	689b      	ldr	r3, [r3, #8]
 80249ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80249b2:	d112      	bne.n	80249da <jsmn_parse+0x13a>
						if (token->type != type) {
 80249b4:	69bb      	ldr	r3, [r7, #24]
 80249b6:	781b      	ldrb	r3, [r3, #0]
 80249b8:	7fba      	ldrb	r2, [r7, #30]
 80249ba:	429a      	cmp	r2, r3
 80249bc:	d002      	beq.n	80249c4 <jsmn_parse+0x124>
							return JSMN_ERROR_INVAL;
 80249be:	f06f 0301 	mvn.w	r3, #1
 80249c2:	e104      	b.n	8024bce <jsmn_parse+0x32e>
						parser->toksuper = -1;
 80249c4:	68fb      	ldr	r3, [r7, #12]
 80249c6:	f04f 32ff 	mov.w	r2, #4294967295
 80249ca:	609a      	str	r2, [r3, #8]
						token->end = parser->pos + 1;
 80249cc:	68fb      	ldr	r3, [r7, #12]
 80249ce:	681b      	ldr	r3, [r3, #0]
 80249d0:	3301      	adds	r3, #1
 80249d2:	461a      	mov	r2, r3
 80249d4:	69bb      	ldr	r3, [r7, #24]
 80249d6:	609a      	str	r2, [r3, #8]
						break;
 80249d8:	e005      	b.n	80249e6 <jsmn_parse+0x146>
				for (i = parser->toknext - 1; i >= 0; i--) {
 80249da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80249dc:	3b01      	subs	r3, #1
 80249de:	627b      	str	r3, [r7, #36]	; 0x24
 80249e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80249e2:	2b00      	cmp	r3, #0
 80249e4:	dad7      	bge.n	8024996 <jsmn_parse+0xf6>
				if (i == -1) return JSMN_ERROR_INVAL;
 80249e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80249e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80249ec:	d119      	bne.n	8024a22 <jsmn_parse+0x182>
 80249ee:	f06f 0301 	mvn.w	r3, #1
 80249f2:	e0ec      	b.n	8024bce <jsmn_parse+0x32e>
					token = &tokens[i];
 80249f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80249f6:	011b      	lsls	r3, r3, #4
 80249f8:	683a      	ldr	r2, [r7, #0]
 80249fa:	4413      	add	r3, r2
 80249fc:	61bb      	str	r3, [r7, #24]
					if (token->start != -1 && token->end == -1) {
 80249fe:	69bb      	ldr	r3, [r7, #24]
 8024a00:	685b      	ldr	r3, [r3, #4]
 8024a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024a06:	d009      	beq.n	8024a1c <jsmn_parse+0x17c>
 8024a08:	69bb      	ldr	r3, [r7, #24]
 8024a0a:	689b      	ldr	r3, [r3, #8]
 8024a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024a10:	d104      	bne.n	8024a1c <jsmn_parse+0x17c>
						parser->toksuper = i;
 8024a12:	68fb      	ldr	r3, [r7, #12]
 8024a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024a16:	609a      	str	r2, [r3, #8]
						break;
 8024a18:	bf00      	nop
				break;
 8024a1a:	e0a4      	b.n	8024b66 <jsmn_parse+0x2c6>
				for (; i >= 0; i--) {
 8024a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024a1e:	3b01      	subs	r3, #1
 8024a20:	627b      	str	r3, [r7, #36]	; 0x24
 8024a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024a24:	2b00      	cmp	r3, #0
 8024a26:	dae5      	bge.n	80249f4 <jsmn_parse+0x154>
				break;
 8024a28:	e09d      	b.n	8024b66 <jsmn_parse+0x2c6>
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8024a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024a2c:	9300      	str	r3, [sp, #0]
 8024a2e:	683b      	ldr	r3, [r7, #0]
 8024a30:	687a      	ldr	r2, [r7, #4]
 8024a32:	68b9      	ldr	r1, [r7, #8]
 8024a34:	68f8      	ldr	r0, [r7, #12]
 8024a36:	f7ff fdbf 	bl	80245b8 <jsmn_parse_string>
 8024a3a:	6178      	str	r0, [r7, #20]
				if (r < 0) return r;
 8024a3c:	697b      	ldr	r3, [r7, #20]
 8024a3e:	2b00      	cmp	r3, #0
 8024a40:	da01      	bge.n	8024a46 <jsmn_parse+0x1a6>
 8024a42:	697b      	ldr	r3, [r7, #20]
 8024a44:	e0c3      	b.n	8024bce <jsmn_parse+0x32e>
				count++;
 8024a46:	6a3b      	ldr	r3, [r7, #32]
 8024a48:	3301      	adds	r3, #1
 8024a4a:	623b      	str	r3, [r7, #32]
				if (parser->toksuper != -1 && tokens != NULL)
 8024a4c:	68fb      	ldr	r3, [r7, #12]
 8024a4e:	689b      	ldr	r3, [r3, #8]
 8024a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024a54:	f000 8082 	beq.w	8024b5c <jsmn_parse+0x2bc>
 8024a58:	683b      	ldr	r3, [r7, #0]
 8024a5a:	2b00      	cmp	r3, #0
 8024a5c:	d07e      	beq.n	8024b5c <jsmn_parse+0x2bc>
					tokens[parser->toksuper].size++;
 8024a5e:	68fb      	ldr	r3, [r7, #12]
 8024a60:	689b      	ldr	r3, [r3, #8]
 8024a62:	011b      	lsls	r3, r3, #4
 8024a64:	683a      	ldr	r2, [r7, #0]
 8024a66:	4413      	add	r3, r2
 8024a68:	68da      	ldr	r2, [r3, #12]
 8024a6a:	3201      	adds	r2, #1
 8024a6c:	60da      	str	r2, [r3, #12]
				break;
 8024a6e:	e075      	b.n	8024b5c <jsmn_parse+0x2bc>
			case ':':
				parser->toksuper = parser->toknext - 1;
 8024a70:	68fb      	ldr	r3, [r7, #12]
 8024a72:	685b      	ldr	r3, [r3, #4]
 8024a74:	3b01      	subs	r3, #1
 8024a76:	461a      	mov	r2, r3
 8024a78:	68fb      	ldr	r3, [r7, #12]
 8024a7a:	609a      	str	r2, [r3, #8]
				break;
 8024a7c:	e073      	b.n	8024b66 <jsmn_parse+0x2c6>
			case ',':
				if (tokens != NULL && parser->toksuper != -1 &&
 8024a7e:	683b      	ldr	r3, [r7, #0]
 8024a80:	2b00      	cmp	r3, #0
 8024a82:	d06d      	beq.n	8024b60 <jsmn_parse+0x2c0>
 8024a84:	68fb      	ldr	r3, [r7, #12]
 8024a86:	689b      	ldr	r3, [r3, #8]
 8024a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024a8c:	d068      	beq.n	8024b60 <jsmn_parse+0x2c0>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 8024a8e:	68fb      	ldr	r3, [r7, #12]
 8024a90:	689b      	ldr	r3, [r3, #8]
 8024a92:	011b      	lsls	r3, r3, #4
 8024a94:	683a      	ldr	r2, [r7, #0]
 8024a96:	4413      	add	r3, r2
 8024a98:	781b      	ldrb	r3, [r3, #0]
				if (tokens != NULL && parser->toksuper != -1 &&
 8024a9a:	2b02      	cmp	r3, #2
 8024a9c:	d060      	beq.n	8024b60 <jsmn_parse+0x2c0>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
 8024a9e:	68fb      	ldr	r3, [r7, #12]
 8024aa0:	689b      	ldr	r3, [r3, #8]
 8024aa2:	011b      	lsls	r3, r3, #4
 8024aa4:	683a      	ldr	r2, [r7, #0]
 8024aa6:	4413      	add	r3, r2
 8024aa8:	781b      	ldrb	r3, [r3, #0]
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 8024aaa:	2b01      	cmp	r3, #1
 8024aac:	d058      	beq.n	8024b60 <jsmn_parse+0x2c0>
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
 8024aae:	68fb      	ldr	r3, [r7, #12]
 8024ab0:	685b      	ldr	r3, [r3, #4]
 8024ab2:	3b01      	subs	r3, #1
 8024ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8024ab6:	e025      	b.n	8024b04 <jsmn_parse+0x264>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8024ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024aba:	011b      	lsls	r3, r3, #4
 8024abc:	683a      	ldr	r2, [r7, #0]
 8024abe:	4413      	add	r3, r2
 8024ac0:	781b      	ldrb	r3, [r3, #0]
 8024ac2:	2b02      	cmp	r3, #2
 8024ac4:	d006      	beq.n	8024ad4 <jsmn_parse+0x234>
 8024ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ac8:	011b      	lsls	r3, r3, #4
 8024aca:	683a      	ldr	r2, [r7, #0]
 8024acc:	4413      	add	r3, r2
 8024ace:	781b      	ldrb	r3, [r3, #0]
 8024ad0:	2b01      	cmp	r3, #1
 8024ad2:	d114      	bne.n	8024afe <jsmn_parse+0x25e>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 8024ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ad6:	011b      	lsls	r3, r3, #4
 8024ad8:	683a      	ldr	r2, [r7, #0]
 8024ada:	4413      	add	r3, r2
 8024adc:	685b      	ldr	r3, [r3, #4]
 8024ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024ae2:	d00c      	beq.n	8024afe <jsmn_parse+0x25e>
 8024ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ae6:	011b      	lsls	r3, r3, #4
 8024ae8:	683a      	ldr	r2, [r7, #0]
 8024aea:	4413      	add	r3, r2
 8024aec:	689b      	ldr	r3, [r3, #8]
 8024aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024af2:	d104      	bne.n	8024afe <jsmn_parse+0x25e>
								parser->toksuper = i;
 8024af4:	68fb      	ldr	r3, [r7, #12]
 8024af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024af8:	609a      	str	r2, [r3, #8]
								break;
 8024afa:	bf00      	nop
							}
						}
					}
#endif
				}
				break;
 8024afc:	e030      	b.n	8024b60 <jsmn_parse+0x2c0>
					for (i = parser->toknext - 1; i >= 0; i--) {
 8024afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b00:	3b01      	subs	r3, #1
 8024b02:	627b      	str	r3, [r7, #36]	; 0x24
 8024b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b06:	2b00      	cmp	r3, #0
 8024b08:	dad6      	bge.n	8024ab8 <jsmn_parse+0x218>
				break;
 8024b0a:	e029      	b.n	8024b60 <jsmn_parse+0x2c0>
				}
#else
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8024b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b0e:	9300      	str	r3, [sp, #0]
 8024b10:	683b      	ldr	r3, [r7, #0]
 8024b12:	687a      	ldr	r2, [r7, #4]
 8024b14:	68b9      	ldr	r1, [r7, #8]
 8024b16:	68f8      	ldr	r0, [r7, #12]
 8024b18:	f7ff fcd6 	bl	80244c8 <jsmn_parse_primitive>
 8024b1c:	6178      	str	r0, [r7, #20]
				if (r < 0) return r;
 8024b1e:	697b      	ldr	r3, [r7, #20]
 8024b20:	2b00      	cmp	r3, #0
 8024b22:	da01      	bge.n	8024b28 <jsmn_parse+0x288>
 8024b24:	697b      	ldr	r3, [r7, #20]
 8024b26:	e052      	b.n	8024bce <jsmn_parse+0x32e>
				count++;
 8024b28:	6a3b      	ldr	r3, [r7, #32]
 8024b2a:	3301      	adds	r3, #1
 8024b2c:	623b      	str	r3, [r7, #32]
				if (parser->toksuper != -1 && tokens != NULL)
 8024b2e:	68fb      	ldr	r3, [r7, #12]
 8024b30:	689b      	ldr	r3, [r3, #8]
 8024b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024b36:	d015      	beq.n	8024b64 <jsmn_parse+0x2c4>
 8024b38:	683b      	ldr	r3, [r7, #0]
 8024b3a:	2b00      	cmp	r3, #0
 8024b3c:	d012      	beq.n	8024b64 <jsmn_parse+0x2c4>
					tokens[parser->toksuper].size++;
 8024b3e:	68fb      	ldr	r3, [r7, #12]
 8024b40:	689b      	ldr	r3, [r3, #8]
 8024b42:	011b      	lsls	r3, r3, #4
 8024b44:	683a      	ldr	r2, [r7, #0]
 8024b46:	4413      	add	r3, r2
 8024b48:	68da      	ldr	r2, [r3, #12]
 8024b4a:	3201      	adds	r2, #1
 8024b4c:	60da      	str	r2, [r3, #12]
				break;
 8024b4e:	e009      	b.n	8024b64 <jsmn_parse+0x2c4>
				break;
 8024b50:	bf00      	nop
 8024b52:	e008      	b.n	8024b66 <jsmn_parse+0x2c6>
					break;
 8024b54:	bf00      	nop
 8024b56:	e006      	b.n	8024b66 <jsmn_parse+0x2c6>
					break;
 8024b58:	bf00      	nop
 8024b5a:	e004      	b.n	8024b66 <jsmn_parse+0x2c6>
				break;
 8024b5c:	bf00      	nop
 8024b5e:	e002      	b.n	8024b66 <jsmn_parse+0x2c6>
				break;
 8024b60:	bf00      	nop
 8024b62:	e000      	b.n	8024b66 <jsmn_parse+0x2c6>
				break;
 8024b64:	bf00      	nop
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8024b66:	68fb      	ldr	r3, [r7, #12]
 8024b68:	681b      	ldr	r3, [r3, #0]
 8024b6a:	1c5a      	adds	r2, r3, #1
 8024b6c:	68fb      	ldr	r3, [r7, #12]
 8024b6e:	601a      	str	r2, [r3, #0]
 8024b70:	68fb      	ldr	r3, [r7, #12]
 8024b72:	681a      	ldr	r2, [r3, #0]
 8024b74:	687b      	ldr	r3, [r7, #4]
 8024b76:	429a      	cmp	r2, r3
 8024b78:	d207      	bcs.n	8024b8a <jsmn_parse+0x2ea>
 8024b7a:	68fb      	ldr	r3, [r7, #12]
 8024b7c:	681b      	ldr	r3, [r3, #0]
 8024b7e:	68ba      	ldr	r2, [r7, #8]
 8024b80:	4413      	add	r3, r2
 8024b82:	781b      	ldrb	r3, [r3, #0]
 8024b84:	2b00      	cmp	r3, #0
 8024b86:	f47f ae96 	bne.w	80248b6 <jsmn_parse+0x16>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
 8024b8a:	683b      	ldr	r3, [r7, #0]
 8024b8c:	2b00      	cmp	r3, #0
 8024b8e:	d01d      	beq.n	8024bcc <jsmn_parse+0x32c>
		for (i = parser->toknext - 1; i >= 0; i--) {
 8024b90:	68fb      	ldr	r3, [r7, #12]
 8024b92:	685b      	ldr	r3, [r3, #4]
 8024b94:	3b01      	subs	r3, #1
 8024b96:	627b      	str	r3, [r7, #36]	; 0x24
 8024b98:	e015      	b.n	8024bc6 <jsmn_parse+0x326>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 8024b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b9c:	011b      	lsls	r3, r3, #4
 8024b9e:	683a      	ldr	r2, [r7, #0]
 8024ba0:	4413      	add	r3, r2
 8024ba2:	685b      	ldr	r3, [r3, #4]
 8024ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024ba8:	d00a      	beq.n	8024bc0 <jsmn_parse+0x320>
 8024baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024bac:	011b      	lsls	r3, r3, #4
 8024bae:	683a      	ldr	r2, [r7, #0]
 8024bb0:	4413      	add	r3, r2
 8024bb2:	689b      	ldr	r3, [r3, #8]
 8024bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024bb8:	d102      	bne.n	8024bc0 <jsmn_parse+0x320>
				return JSMN_ERROR_PART;
 8024bba:	f06f 0302 	mvn.w	r3, #2
 8024bbe:	e006      	b.n	8024bce <jsmn_parse+0x32e>
		for (i = parser->toknext - 1; i >= 0; i--) {
 8024bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024bc2:	3b01      	subs	r3, #1
 8024bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8024bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024bc8:	2b00      	cmp	r3, #0
 8024bca:	dae6      	bge.n	8024b9a <jsmn_parse+0x2fa>
			}
		}
	}

	return count;
 8024bcc:	6a3b      	ldr	r3, [r7, #32]
}
 8024bce:	4618      	mov	r0, r3
 8024bd0:	3728      	adds	r7, #40	; 0x28
 8024bd2:	46bd      	mov	sp, r7
 8024bd4:	bd80      	pop	{r7, pc}

08024bd6 <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
 8024bd6:	b480      	push	{r7}
 8024bd8:	b083      	sub	sp, #12
 8024bda:	af00      	add	r7, sp, #0
 8024bdc:	6078      	str	r0, [r7, #4]
	parser->pos = 0;
 8024bde:	687b      	ldr	r3, [r7, #4]
 8024be0:	2200      	movs	r2, #0
 8024be2:	601a      	str	r2, [r3, #0]
	parser->toknext = 0;
 8024be4:	687b      	ldr	r3, [r7, #4]
 8024be6:	2200      	movs	r2, #0
 8024be8:	605a      	str	r2, [r3, #4]
	parser->toksuper = -1;
 8024bea:	687b      	ldr	r3, [r7, #4]
 8024bec:	f04f 32ff 	mov.w	r2, #4294967295
 8024bf0:	609a      	str	r2, [r3, #8]
}
 8024bf2:	bf00      	nop
 8024bf4:	370c      	adds	r7, #12
 8024bf6:	46bd      	mov	sp, r7
 8024bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bfc:	4770      	bx	lr
	...

08024c00 <GetJSONData>:
/* ------------------- */

/* ---------- FUNCTIONS ------------ */
/* -------||--||--||--||--||-------- */
/* -------\/--\/--\/--\/--\/-------- */
uint GetJSONData(uint8_t *pstr) {
 8024c00:	b580      	push	{r7, lr}
 8024c02:	b084      	sub	sp, #16
 8024c04:	af00      	add	r7, sp, #0
 8024c06:	6078      	str	r0, [r7, #4]
	uint size = 0;
 8024c08:	2300      	movs	r3, #0
 8024c0a:	60fb      	str	r3, [r7, #12]
	memcpy(pstr, "{\"addr_IP\":\"", 12);
 8024c0c:	220c      	movs	r2, #12
 8024c0e:	498a      	ldr	r1, [pc, #552]	; (8024e38 <GetJSONData+0x238>)
 8024c10:	6878      	ldr	r0, [r7, #4]
 8024c12:	f003 fc2c 	bl	802846e <memcpy>
	size += 12;
 8024c16:	68fb      	ldr	r3, [r7, #12]
 8024c18:	330c      	adds	r3, #12
 8024c1a:	60fb      	str	r3, [r7, #12]
	uint8_t tmp = strlen((const char *) hjsondata.ip_addr);
 8024c1c:	4887      	ldr	r0, [pc, #540]	; (8024e3c <GetJSONData+0x23c>)
 8024c1e:	f7eb fa27 	bl	8010070 <strlen>
 8024c22:	4603      	mov	r3, r0
 8024c24:	72fb      	strb	r3, [r7, #11]
	memcpy(pstr + size, hjsondata.ip_addr, tmp);
 8024c26:	687a      	ldr	r2, [r7, #4]
 8024c28:	68fb      	ldr	r3, [r7, #12]
 8024c2a:	4413      	add	r3, r2
 8024c2c:	7afa      	ldrb	r2, [r7, #11]
 8024c2e:	4983      	ldr	r1, [pc, #524]	; (8024e3c <GetJSONData+0x23c>)
 8024c30:	4618      	mov	r0, r3
 8024c32:	f003 fc1c 	bl	802846e <memcpy>
	size += tmp;
 8024c36:	7afb      	ldrb	r3, [r7, #11]
 8024c38:	68fa      	ldr	r2, [r7, #12]
 8024c3a:	4413      	add	r3, r2
 8024c3c:	60fb      	str	r3, [r7, #12]
	memcpy(pstr + size, "\",\"mask\":\"", 10);
 8024c3e:	687a      	ldr	r2, [r7, #4]
 8024c40:	68fb      	ldr	r3, [r7, #12]
 8024c42:	4413      	add	r3, r2
 8024c44:	220a      	movs	r2, #10
 8024c46:	497e      	ldr	r1, [pc, #504]	; (8024e40 <GetJSONData+0x240>)
 8024c48:	4618      	mov	r0, r3
 8024c4a:	f003 fc10 	bl	802846e <memcpy>
	size += 10;
 8024c4e:	68fb      	ldr	r3, [r7, #12]
 8024c50:	330a      	adds	r3, #10
 8024c52:	60fb      	str	r3, [r7, #12]
	tmp = strlen((const char *) hjsondata.mask);
 8024c54:	487b      	ldr	r0, [pc, #492]	; (8024e44 <GetJSONData+0x244>)
 8024c56:	f7eb fa0b 	bl	8010070 <strlen>
 8024c5a:	4603      	mov	r3, r0
 8024c5c:	72fb      	strb	r3, [r7, #11]
	memcpy(pstr + size, hjsondata.mask, tmp);
 8024c5e:	687a      	ldr	r2, [r7, #4]
 8024c60:	68fb      	ldr	r3, [r7, #12]
 8024c62:	4413      	add	r3, r2
 8024c64:	7afa      	ldrb	r2, [r7, #11]
 8024c66:	4977      	ldr	r1, [pc, #476]	; (8024e44 <GetJSONData+0x244>)
 8024c68:	4618      	mov	r0, r3
 8024c6a:	f003 fc00 	bl	802846e <memcpy>
	size += tmp;
 8024c6e:	7afb      	ldrb	r3, [r7, #11]
 8024c70:	68fa      	ldr	r2, [r7, #12]
 8024c72:	4413      	add	r3, r2
 8024c74:	60fb      	str	r3, [r7, #12]
	memcpy(pstr + size, "\",\"gate\":\"", 10);
 8024c76:	687a      	ldr	r2, [r7, #4]
 8024c78:	68fb      	ldr	r3, [r7, #12]
 8024c7a:	4413      	add	r3, r2
 8024c7c:	220a      	movs	r2, #10
 8024c7e:	4972      	ldr	r1, [pc, #456]	; (8024e48 <GetJSONData+0x248>)
 8024c80:	4618      	mov	r0, r3
 8024c82:	f003 fbf4 	bl	802846e <memcpy>
	size += 10;
 8024c86:	68fb      	ldr	r3, [r7, #12]
 8024c88:	330a      	adds	r3, #10
 8024c8a:	60fb      	str	r3, [r7, #12]
	tmp = strlen((const char *) hjsondata.gate);
 8024c8c:	486f      	ldr	r0, [pc, #444]	; (8024e4c <GetJSONData+0x24c>)
 8024c8e:	f7eb f9ef 	bl	8010070 <strlen>
 8024c92:	4603      	mov	r3, r0
 8024c94:	72fb      	strb	r3, [r7, #11]
	memcpy(pstr + size, hjsondata.gate, tmp);
 8024c96:	687a      	ldr	r2, [r7, #4]
 8024c98:	68fb      	ldr	r3, [r7, #12]
 8024c9a:	4413      	add	r3, r2
 8024c9c:	7afa      	ldrb	r2, [r7, #11]
 8024c9e:	496b      	ldr	r1, [pc, #428]	; (8024e4c <GetJSONData+0x24c>)
 8024ca0:	4618      	mov	r0, r3
 8024ca2:	f003 fbe4 	bl	802846e <memcpy>
	size += tmp;
 8024ca6:	7afb      	ldrb	r3, [r7, #11]
 8024ca8:	68fa      	ldr	r2, [r7, #12]
 8024caa:	4413      	add	r3, r2
 8024cac:	60fb      	str	r3, [r7, #12]
	memcpy(pstr + size, "\",\"port\":", 9);
 8024cae:	687a      	ldr	r2, [r7, #4]
 8024cb0:	68fb      	ldr	r3, [r7, #12]
 8024cb2:	4413      	add	r3, r2
 8024cb4:	2209      	movs	r2, #9
 8024cb6:	4966      	ldr	r1, [pc, #408]	; (8024e50 <GetJSONData+0x250>)
 8024cb8:	4618      	mov	r0, r3
 8024cba:	f003 fbd8 	bl	802846e <memcpy>
	size += 9;
 8024cbe:	68fb      	ldr	r3, [r7, #12]
 8024cc0:	3309      	adds	r3, #9
 8024cc2:	60fb      	str	r3, [r7, #12]
	itoa(hjsondata.port, (char *) pstr + size, 10);
 8024cc4:	4b5d      	ldr	r3, [pc, #372]	; (8024e3c <GetJSONData+0x23c>)
 8024cc6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8024cc8:	4618      	mov	r0, r3
 8024cca:	687a      	ldr	r2, [r7, #4]
 8024ccc:	68fb      	ldr	r3, [r7, #12]
 8024cce:	4413      	add	r3, r2
 8024cd0:	220a      	movs	r2, #10
 8024cd2:	4619      	mov	r1, r3
 8024cd4:	f003 fbba 	bl	802844c <itoa>
	size += strlen((const char *) pstr + size);
 8024cd8:	687a      	ldr	r2, [r7, #4]
 8024cda:	68fb      	ldr	r3, [r7, #12]
 8024cdc:	4413      	add	r3, r2
 8024cde:	4618      	mov	r0, r3
 8024ce0:	f7eb f9c6 	bl	8010070 <strlen>
 8024ce4:	4602      	mov	r2, r0
 8024ce6:	68fb      	ldr	r3, [r7, #12]
 8024ce8:	4413      	add	r3, r2
 8024cea:	60fb      	str	r3, [r7, #12]
	memcpy(pstr + size, ",\"speed\":", 9);
 8024cec:	687a      	ldr	r2, [r7, #4]
 8024cee:	68fb      	ldr	r3, [r7, #12]
 8024cf0:	4413      	add	r3, r2
 8024cf2:	2209      	movs	r2, #9
 8024cf4:	4957      	ldr	r1, [pc, #348]	; (8024e54 <GetJSONData+0x254>)
 8024cf6:	4618      	mov	r0, r3
 8024cf8:	f003 fbb9 	bl	802846e <memcpy>
	size += 9;
 8024cfc:	68fb      	ldr	r3, [r7, #12]
 8024cfe:	3309      	adds	r3, #9
 8024d00:	60fb      	str	r3, [r7, #12]
	itoa(hjsondata.speed, ((char *) pstr + size), 10);
 8024d02:	4b4e      	ldr	r3, [pc, #312]	; (8024e3c <GetJSONData+0x23c>)
 8024d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024d06:	4618      	mov	r0, r3
 8024d08:	687a      	ldr	r2, [r7, #4]
 8024d0a:	68fb      	ldr	r3, [r7, #12]
 8024d0c:	4413      	add	r3, r2
 8024d0e:	220a      	movs	r2, #10
 8024d10:	4619      	mov	r1, r3
 8024d12:	f003 fb9b 	bl	802844c <itoa>
	size += strlen((const char *) pstr + size);
 8024d16:	687a      	ldr	r2, [r7, #4]
 8024d18:	68fb      	ldr	r3, [r7, #12]
 8024d1a:	4413      	add	r3, r2
 8024d1c:	4618      	mov	r0, r3
 8024d1e:	f7eb f9a7 	bl	8010070 <strlen>
 8024d22:	4602      	mov	r2, r0
 8024d24:	68fb      	ldr	r3, [r7, #12]
 8024d26:	4413      	add	r3, r2
 8024d28:	60fb      	str	r3, [r7, #12]
	memcpy(pstr + size, ",\"addr_own\":", 12);
 8024d2a:	687a      	ldr	r2, [r7, #4]
 8024d2c:	68fb      	ldr	r3, [r7, #12]
 8024d2e:	4413      	add	r3, r2
 8024d30:	220c      	movs	r2, #12
 8024d32:	4949      	ldr	r1, [pc, #292]	; (8024e58 <GetJSONData+0x258>)
 8024d34:	4618      	mov	r0, r3
 8024d36:	f003 fb9a 	bl	802846e <memcpy>
	size += 12;
 8024d3a:	68fb      	ldr	r3, [r7, #12]
 8024d3c:	330c      	adds	r3, #12
 8024d3e:	60fb      	str	r3, [r7, #12]
	itoa(hjsondata.own_addr, (char *) pstr + size, 10);
 8024d40:	4b3e      	ldr	r3, [pc, #248]	; (8024e3c <GetJSONData+0x23c>)
 8024d42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8024d46:	4618      	mov	r0, r3
 8024d48:	687a      	ldr	r2, [r7, #4]
 8024d4a:	68fb      	ldr	r3, [r7, #12]
 8024d4c:	4413      	add	r3, r2
 8024d4e:	220a      	movs	r2, #10
 8024d50:	4619      	mov	r1, r3
 8024d52:	f003 fb7b 	bl	802844c <itoa>
	size += strlen((const char *) pstr + size);
 8024d56:	687a      	ldr	r2, [r7, #4]
 8024d58:	68fb      	ldr	r3, [r7, #12]
 8024d5a:	4413      	add	r3, r2
 8024d5c:	4618      	mov	r0, r3
 8024d5e:	f7eb f987 	bl	8010070 <strlen>
 8024d62:	4602      	mov	r2, r0
 8024d64:	68fb      	ldr	r3, [r7, #12]
 8024d66:	4413      	add	r3, r2
 8024d68:	60fb      	str	r3, [r7, #12]
	memcpy(pstr + size, ",\"ver\":\"", 8);
 8024d6a:	687a      	ldr	r2, [r7, #4]
 8024d6c:	68fb      	ldr	r3, [r7, #12]
 8024d6e:	4413      	add	r3, r2
 8024d70:	2208      	movs	r2, #8
 8024d72:	493a      	ldr	r1, [pc, #232]	; (8024e5c <GetJSONData+0x25c>)
 8024d74:	4618      	mov	r0, r3
 8024d76:	f003 fb7a 	bl	802846e <memcpy>
	size += 8;
 8024d7a:	68fb      	ldr	r3, [r7, #12]
 8024d7c:	3308      	adds	r3, #8
 8024d7e:	60fb      	str	r3, [r7, #12]
	tmp = strlen((const char *) hjsondata.ver);
 8024d80:	4837      	ldr	r0, [pc, #220]	; (8024e60 <GetJSONData+0x260>)
 8024d82:	f7eb f975 	bl	8010070 <strlen>
 8024d86:	4603      	mov	r3, r0
 8024d88:	72fb      	strb	r3, [r7, #11]
	memcpy(pstr + size, (const char *) hjsondata.ver, tmp);
 8024d8a:	687a      	ldr	r2, [r7, #4]
 8024d8c:	68fb      	ldr	r3, [r7, #12]
 8024d8e:	4413      	add	r3, r2
 8024d90:	7afa      	ldrb	r2, [r7, #11]
 8024d92:	4933      	ldr	r1, [pc, #204]	; (8024e60 <GetJSONData+0x260>)
 8024d94:	4618      	mov	r0, r3
 8024d96:	f003 fb6a 	bl	802846e <memcpy>
	size += tmp;
 8024d9a:	7afb      	ldrb	r3, [r7, #11]
 8024d9c:	68fa      	ldr	r2, [r7, #12]
 8024d9e:	4413      	add	r3, r2
 8024da0:	60fb      	str	r3, [r7, #12]
	memcpy(pstr + size, "\",\"sn\":", 7);
 8024da2:	687a      	ldr	r2, [r7, #4]
 8024da4:	68fb      	ldr	r3, [r7, #12]
 8024da6:	4413      	add	r3, r2
 8024da8:	2207      	movs	r2, #7
 8024daa:	492e      	ldr	r1, [pc, #184]	; (8024e64 <GetJSONData+0x264>)
 8024dac:	4618      	mov	r0, r3
 8024dae:	f003 fb5e 	bl	802846e <memcpy>
	size += 7;
 8024db2:	68fb      	ldr	r3, [r7, #12]
 8024db4:	3307      	adds	r3, #7
 8024db6:	60fb      	str	r3, [r7, #12]
	itoa(hjsondata.serial_num, (char *) (pstr + size), 10);
 8024db8:	4b20      	ldr	r3, [pc, #128]	; (8024e3c <GetJSONData+0x23c>)
 8024dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8024dbc:	4618      	mov	r0, r3
 8024dbe:	687a      	ldr	r2, [r7, #4]
 8024dc0:	68fb      	ldr	r3, [r7, #12]
 8024dc2:	4413      	add	r3, r2
 8024dc4:	220a      	movs	r2, #10
 8024dc6:	4619      	mov	r1, r3
 8024dc8:	f003 fb40 	bl	802844c <itoa>
	size += strlen((const char *) pstr + size);
 8024dcc:	687a      	ldr	r2, [r7, #4]
 8024dce:	68fb      	ldr	r3, [r7, #12]
 8024dd0:	4413      	add	r3, r2
 8024dd2:	4618      	mov	r0, r3
 8024dd4:	f7eb f94c 	bl	8010070 <strlen>
 8024dd8:	4602      	mov	r2, r0
 8024dda:	68fb      	ldr	r3, [r7, #12]
 8024ddc:	4413      	add	r3, r2
 8024dde:	60fb      	str	r3, [r7, #12]
	memcpy(pstr + size, ",\"addr_MAC\":\"", 13);
 8024de0:	687a      	ldr	r2, [r7, #4]
 8024de2:	68fb      	ldr	r3, [r7, #12]
 8024de4:	4413      	add	r3, r2
 8024de6:	220d      	movs	r2, #13
 8024de8:	491f      	ldr	r1, [pc, #124]	; (8024e68 <GetJSONData+0x268>)
 8024dea:	4618      	mov	r0, r3
 8024dec:	f003 fb3f 	bl	802846e <memcpy>
	size += 13;
 8024df0:	68fb      	ldr	r3, [r7, #12]
 8024df2:	330d      	adds	r3, #13
 8024df4:	60fb      	str	r3, [r7, #12]
	tmp = strlen((const char *) hjsondata.mac_addr);
 8024df6:	481d      	ldr	r0, [pc, #116]	; (8024e6c <GetJSONData+0x26c>)
 8024df8:	f7eb f93a 	bl	8010070 <strlen>
 8024dfc:	4603      	mov	r3, r0
 8024dfe:	72fb      	strb	r3, [r7, #11]
	memcpy(pstr + size, hjsondata.mac_addr, tmp);
 8024e00:	687a      	ldr	r2, [r7, #4]
 8024e02:	68fb      	ldr	r3, [r7, #12]
 8024e04:	4413      	add	r3, r2
 8024e06:	7afa      	ldrb	r2, [r7, #11]
 8024e08:	4918      	ldr	r1, [pc, #96]	; (8024e6c <GetJSONData+0x26c>)
 8024e0a:	4618      	mov	r0, r3
 8024e0c:	f003 fb2f 	bl	802846e <memcpy>
	size += tmp;
 8024e10:	7afb      	ldrb	r3, [r7, #11]
 8024e12:	68fa      	ldr	r2, [r7, #12]
 8024e14:	4413      	add	r3, r2
 8024e16:	60fb      	str	r3, [r7, #12]
	memcpy(pstr + size, "\"}\0", 3);
 8024e18:	687a      	ldr	r2, [r7, #4]
 8024e1a:	68fb      	ldr	r3, [r7, #12]
 8024e1c:	4413      	add	r3, r2
 8024e1e:	2203      	movs	r2, #3
 8024e20:	4913      	ldr	r1, [pc, #76]	; (8024e70 <GetJSONData+0x270>)
 8024e22:	4618      	mov	r0, r3
 8024e24:	f003 fb23 	bl	802846e <memcpy>
	size += 3;
 8024e28:	68fb      	ldr	r3, [r7, #12]
 8024e2a:	3303      	adds	r3, #3
 8024e2c:	60fb      	str	r3, [r7, #12]
	return size;
 8024e2e:	68fb      	ldr	r3, [r7, #12]
}
 8024e30:	4618      	mov	r0, r3
 8024e32:	3710      	adds	r7, #16
 8024e34:	46bd      	mov	sp, r7
 8024e36:	bd80      	pop	{r7, pc}
 8024e38:	0802b658 	.word	0x0802b658
 8024e3c:	20011e2c 	.word	0x20011e2c
 8024e40:	0802b668 	.word	0x0802b668
 8024e44:	20011e3c 	.word	0x20011e3c
 8024e48:	0802b674 	.word	0x0802b674
 8024e4c:	20011e4c 	.word	0x20011e4c
 8024e50:	0802b680 	.word	0x0802b680
 8024e54:	0802b68c 	.word	0x0802b68c
 8024e58:	0802b698 	.word	0x0802b698
 8024e5c:	0802b6a8 	.word	0x0802b6a8
 8024e60:	20011e65 	.word	0x20011e65
 8024e64:	0802b6b4 	.word	0x0802b6b4
 8024e68:	0802b6bc 	.word	0x0802b6bc
 8024e6c:	20011e78 	.word	0x20011e78
 8024e70:	0802b6cc 	.word	0x0802b6cc

08024e74 <FlashToJSON>:

void FlashToJSON(json_data_t *js, flash_data_t *fs) {
 8024e74:	b580      	push	{r7, lr}
 8024e76:	b088      	sub	sp, #32
 8024e78:	af00      	add	r7, sp, #0
 8024e7a:	6078      	str	r0, [r7, #4]
 8024e7c:	6039      	str	r1, [r7, #0]

	js->speed = fs->speed;
 8024e7e:	683b      	ldr	r3, [r7, #0]
 8024e80:	681a      	ldr	r2, [r3, #0]
 8024e82:	687b      	ldr	r3, [r7, #4]
 8024e84:	635a      	str	r2, [r3, #52]	; 0x34
	js->port = fs->port;
 8024e86:	683b      	ldr	r3, [r7, #0]
 8024e88:	8a5a      	ldrh	r2, [r3, #18]
 8024e8a:	687b      	ldr	r3, [r7, #4]
 8024e8c:	861a      	strh	r2, [r3, #48]	; 0x30
	js->own_addr = fs->own_addr;
 8024e8e:	683b      	ldr	r3, [r7, #0]
 8024e90:	889b      	ldrh	r3, [r3, #4]
 8024e92:	b2da      	uxtb	r2, r3
 8024e94:	687b      	ldr	r3, [r7, #4]
 8024e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	js->serial_num = fs->serial_num;
 8024e9a:	683b      	ldr	r3, [r7, #0]
 8024e9c:	695a      	ldr	r2, [r3, #20]
 8024e9e:	687b      	ldr	r3, [r7, #4]
 8024ea0:	649a      	str	r2, [r3, #72]	; 0x48
	uint len = 0;
 8024ea2:	2300      	movs	r3, #0
 8024ea4:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < 4; i++) {
 8024ea6:	2300      	movs	r3, #0
 8024ea8:	61bb      	str	r3, [r7, #24]
 8024eaa:	e021      	b.n	8024ef0 <FlashToJSON+0x7c>
		itoa(fs->IP_addr[i], (char*) &js->ip_addr[len], 10);
 8024eac:	683a      	ldr	r2, [r7, #0]
 8024eae:	69bb      	ldr	r3, [r7, #24]
 8024eb0:	4413      	add	r3, r2
 8024eb2:	3306      	adds	r3, #6
 8024eb4:	781b      	ldrb	r3, [r3, #0]
 8024eb6:	4618      	mov	r0, r3
 8024eb8:	687a      	ldr	r2, [r7, #4]
 8024eba:	69fb      	ldr	r3, [r7, #28]
 8024ebc:	4413      	add	r3, r2
 8024ebe:	220a      	movs	r2, #10
 8024ec0:	4619      	mov	r1, r3
 8024ec2:	f003 fac3 	bl	802844c <itoa>
		len += strlen((char*) &js->ip_addr[len]);
 8024ec6:	687a      	ldr	r2, [r7, #4]
 8024ec8:	69fb      	ldr	r3, [r7, #28]
 8024eca:	4413      	add	r3, r2
 8024ecc:	4618      	mov	r0, r3
 8024ece:	f7eb f8cf 	bl	8010070 <strlen>
 8024ed2:	4602      	mov	r2, r0
 8024ed4:	69fb      	ldr	r3, [r7, #28]
 8024ed6:	4413      	add	r3, r2
 8024ed8:	61fb      	str	r3, [r7, #28]
		js->ip_addr[len] = '.';
 8024eda:	687a      	ldr	r2, [r7, #4]
 8024edc:	69fb      	ldr	r3, [r7, #28]
 8024ede:	4413      	add	r3, r2
 8024ee0:	222e      	movs	r2, #46	; 0x2e
 8024ee2:	701a      	strb	r2, [r3, #0]
		len++;
 8024ee4:	69fb      	ldr	r3, [r7, #28]
 8024ee6:	3301      	adds	r3, #1
 8024ee8:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 4; i++) {
 8024eea:	69bb      	ldr	r3, [r7, #24]
 8024eec:	3301      	adds	r3, #1
 8024eee:	61bb      	str	r3, [r7, #24]
 8024ef0:	69bb      	ldr	r3, [r7, #24]
 8024ef2:	2b03      	cmp	r3, #3
 8024ef4:	ddda      	ble.n	8024eac <FlashToJSON+0x38>
	}
	js->ip_addr[--len] = '\0';
 8024ef6:	69fb      	ldr	r3, [r7, #28]
 8024ef8:	3b01      	subs	r3, #1
 8024efa:	61fb      	str	r3, [r7, #28]
 8024efc:	687a      	ldr	r2, [r7, #4]
 8024efe:	69fb      	ldr	r3, [r7, #28]
 8024f00:	4413      	add	r3, r2
 8024f02:	2200      	movs	r2, #0
 8024f04:	701a      	strb	r2, [r3, #0]

	len = 0;
 8024f06:	2300      	movs	r3, #0
 8024f08:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 4; i++) {
 8024f0a:	2300      	movs	r3, #0
 8024f0c:	617b      	str	r3, [r7, #20]
 8024f0e:	e024      	b.n	8024f5a <FlashToJSON+0xe6>
		itoa(fs->gate[i], (char*) &js->gate[len], 10);
 8024f10:	683a      	ldr	r2, [r7, #0]
 8024f12:	697b      	ldr	r3, [r7, #20]
 8024f14:	4413      	add	r3, r2
 8024f16:	330e      	adds	r3, #14
 8024f18:	781b      	ldrb	r3, [r3, #0]
 8024f1a:	4618      	mov	r0, r3
 8024f1c:	69fb      	ldr	r3, [r7, #28]
 8024f1e:	3320      	adds	r3, #32
 8024f20:	687a      	ldr	r2, [r7, #4]
 8024f22:	4413      	add	r3, r2
 8024f24:	220a      	movs	r2, #10
 8024f26:	4619      	mov	r1, r3
 8024f28:	f003 fa90 	bl	802844c <itoa>
		len += strlen((char*) &js->gate[len]);
 8024f2c:	69fb      	ldr	r3, [r7, #28]
 8024f2e:	3320      	adds	r3, #32
 8024f30:	687a      	ldr	r2, [r7, #4]
 8024f32:	4413      	add	r3, r2
 8024f34:	4618      	mov	r0, r3
 8024f36:	f7eb f89b 	bl	8010070 <strlen>
 8024f3a:	4602      	mov	r2, r0
 8024f3c:	69fb      	ldr	r3, [r7, #28]
 8024f3e:	4413      	add	r3, r2
 8024f40:	61fb      	str	r3, [r7, #28]
		js->gate[len] = '.';
 8024f42:	687a      	ldr	r2, [r7, #4]
 8024f44:	69fb      	ldr	r3, [r7, #28]
 8024f46:	4413      	add	r3, r2
 8024f48:	3320      	adds	r3, #32
 8024f4a:	222e      	movs	r2, #46	; 0x2e
 8024f4c:	701a      	strb	r2, [r3, #0]
		len++;
 8024f4e:	69fb      	ldr	r3, [r7, #28]
 8024f50:	3301      	adds	r3, #1
 8024f52:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 4; i++) {
 8024f54:	697b      	ldr	r3, [r7, #20]
 8024f56:	3301      	adds	r3, #1
 8024f58:	617b      	str	r3, [r7, #20]
 8024f5a:	697b      	ldr	r3, [r7, #20]
 8024f5c:	2b03      	cmp	r3, #3
 8024f5e:	ddd7      	ble.n	8024f10 <FlashToJSON+0x9c>
	}
	js->gate[--len] = '\0';
 8024f60:	69fb      	ldr	r3, [r7, #28]
 8024f62:	3b01      	subs	r3, #1
 8024f64:	61fb      	str	r3, [r7, #28]
 8024f66:	687a      	ldr	r2, [r7, #4]
 8024f68:	69fb      	ldr	r3, [r7, #28]
 8024f6a:	4413      	add	r3, r2
 8024f6c:	3320      	adds	r3, #32
 8024f6e:	2200      	movs	r2, #0
 8024f70:	701a      	strb	r2, [r3, #0]

	len = 0;
 8024f72:	2300      	movs	r3, #0
 8024f74:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 4; i++) {
 8024f76:	2300      	movs	r3, #0
 8024f78:	613b      	str	r3, [r7, #16]
 8024f7a:	e024      	b.n	8024fc6 <FlashToJSON+0x152>
		itoa(fs->mask[i], (char*) &js->mask[len], 10);
 8024f7c:	683a      	ldr	r2, [r7, #0]
 8024f7e:	693b      	ldr	r3, [r7, #16]
 8024f80:	4413      	add	r3, r2
 8024f82:	330a      	adds	r3, #10
 8024f84:	781b      	ldrb	r3, [r3, #0]
 8024f86:	4618      	mov	r0, r3
 8024f88:	69fb      	ldr	r3, [r7, #28]
 8024f8a:	3310      	adds	r3, #16
 8024f8c:	687a      	ldr	r2, [r7, #4]
 8024f8e:	4413      	add	r3, r2
 8024f90:	220a      	movs	r2, #10
 8024f92:	4619      	mov	r1, r3
 8024f94:	f003 fa5a 	bl	802844c <itoa>
		len += strlen((char*) &js->mask[len]);
 8024f98:	69fb      	ldr	r3, [r7, #28]
 8024f9a:	3310      	adds	r3, #16
 8024f9c:	687a      	ldr	r2, [r7, #4]
 8024f9e:	4413      	add	r3, r2
 8024fa0:	4618      	mov	r0, r3
 8024fa2:	f7eb f865 	bl	8010070 <strlen>
 8024fa6:	4602      	mov	r2, r0
 8024fa8:	69fb      	ldr	r3, [r7, #28]
 8024faa:	4413      	add	r3, r2
 8024fac:	61fb      	str	r3, [r7, #28]
		js->mask[len] = '.';
 8024fae:	687a      	ldr	r2, [r7, #4]
 8024fb0:	69fb      	ldr	r3, [r7, #28]
 8024fb2:	4413      	add	r3, r2
 8024fb4:	3310      	adds	r3, #16
 8024fb6:	222e      	movs	r2, #46	; 0x2e
 8024fb8:	701a      	strb	r2, [r3, #0]
		len++;
 8024fba:	69fb      	ldr	r3, [r7, #28]
 8024fbc:	3301      	adds	r3, #1
 8024fbe:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 4; i++) {
 8024fc0:	693b      	ldr	r3, [r7, #16]
 8024fc2:	3301      	adds	r3, #1
 8024fc4:	613b      	str	r3, [r7, #16]
 8024fc6:	693b      	ldr	r3, [r7, #16]
 8024fc8:	2b03      	cmp	r3, #3
 8024fca:	ddd7      	ble.n	8024f7c <FlashToJSON+0x108>
	}
	js->mask[--len] = '\0';
 8024fcc:	69fb      	ldr	r3, [r7, #28]
 8024fce:	3b01      	subs	r3, #1
 8024fd0:	61fb      	str	r3, [r7, #28]
 8024fd2:	687a      	ldr	r2, [r7, #4]
 8024fd4:	69fb      	ldr	r3, [r7, #28]
 8024fd6:	4413      	add	r3, r2
 8024fd8:	3310      	adds	r3, #16
 8024fda:	2200      	movs	r2, #0
 8024fdc:	701a      	strb	r2, [r3, #0]

	len = 0;
 8024fde:	2300      	movs	r3, #0
 8024fe0:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 6; i++) {
 8024fe2:	2300      	movs	r3, #0
 8024fe4:	60fb      	str	r3, [r7, #12]
 8024fe6:	e026      	b.n	8025036 <FlashToJSON+0x1c2>
		itoa(fs->mac_addr[i], (char*) &js->mac_addr[len], 16);
 8024fe8:	683a      	ldr	r2, [r7, #0]
 8024fea:	68fb      	ldr	r3, [r7, #12]
 8024fec:	4413      	add	r3, r2
 8024fee:	331e      	adds	r3, #30
 8024ff0:	781b      	ldrb	r3, [r3, #0]
 8024ff2:	4618      	mov	r0, r3
 8024ff4:	69fb      	ldr	r3, [r7, #28]
 8024ff6:	3348      	adds	r3, #72	; 0x48
 8024ff8:	687a      	ldr	r2, [r7, #4]
 8024ffa:	4413      	add	r3, r2
 8024ffc:	3304      	adds	r3, #4
 8024ffe:	2210      	movs	r2, #16
 8025000:	4619      	mov	r1, r3
 8025002:	f003 fa23 	bl	802844c <itoa>
		len += strlen((char*) &js->mac_addr[len]);
 8025006:	69fb      	ldr	r3, [r7, #28]
 8025008:	3348      	adds	r3, #72	; 0x48
 802500a:	687a      	ldr	r2, [r7, #4]
 802500c:	4413      	add	r3, r2
 802500e:	3304      	adds	r3, #4
 8025010:	4618      	mov	r0, r3
 8025012:	f7eb f82d 	bl	8010070 <strlen>
 8025016:	4602      	mov	r2, r0
 8025018:	69fb      	ldr	r3, [r7, #28]
 802501a:	4413      	add	r3, r2
 802501c:	61fb      	str	r3, [r7, #28]
		js->mac_addr[len] = '-';
 802501e:	687a      	ldr	r2, [r7, #4]
 8025020:	69fb      	ldr	r3, [r7, #28]
 8025022:	4413      	add	r3, r2
 8025024:	334c      	adds	r3, #76	; 0x4c
 8025026:	222d      	movs	r2, #45	; 0x2d
 8025028:	701a      	strb	r2, [r3, #0]
		len++;
 802502a:	69fb      	ldr	r3, [r7, #28]
 802502c:	3301      	adds	r3, #1
 802502e:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 6; i++) {
 8025030:	68fb      	ldr	r3, [r7, #12]
 8025032:	3301      	adds	r3, #1
 8025034:	60fb      	str	r3, [r7, #12]
 8025036:	68fb      	ldr	r3, [r7, #12]
 8025038:	2b05      	cmp	r3, #5
 802503a:	ddd5      	ble.n	8024fe8 <FlashToJSON+0x174>
	}
	js->mac_addr[--len] = '\0';
 802503c:	69fb      	ldr	r3, [r7, #28]
 802503e:	3b01      	subs	r3, #1
 8025040:	61fb      	str	r3, [r7, #28]
 8025042:	687a      	ldr	r2, [r7, #4]
 8025044:	69fb      	ldr	r3, [r7, #28]
 8025046:	4413      	add	r3, r2
 8025048:	334c      	adds	r3, #76	; 0x4c
 802504a:	2200      	movs	r2, #0
 802504c:	701a      	strb	r2, [r3, #0]

	len = 0;
 802504e:	2300      	movs	r3, #0
 8025050:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 3; i++) {
 8025052:	2300      	movs	r3, #0
 8025054:	60bb      	str	r3, [r7, #8]
 8025056:	e026      	b.n	80250a6 <FlashToJSON+0x232>
		itoa(fs->ver[i], (char*) &js->ver[len], 10);
 8025058:	683b      	ldr	r3, [r7, #0]
 802505a:	68ba      	ldr	r2, [r7, #8]
 802505c:	320c      	adds	r2, #12
 802505e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8025062:	4618      	mov	r0, r3
 8025064:	69fb      	ldr	r3, [r7, #28]
 8025066:	3338      	adds	r3, #56	; 0x38
 8025068:	687a      	ldr	r2, [r7, #4]
 802506a:	4413      	add	r3, r2
 802506c:	3301      	adds	r3, #1
 802506e:	220a      	movs	r2, #10
 8025070:	4619      	mov	r1, r3
 8025072:	f003 f9eb 	bl	802844c <itoa>
		len += strlen((char*) &js->ver[len]);
 8025076:	69fb      	ldr	r3, [r7, #28]
 8025078:	3338      	adds	r3, #56	; 0x38
 802507a:	687a      	ldr	r2, [r7, #4]
 802507c:	4413      	add	r3, r2
 802507e:	3301      	adds	r3, #1
 8025080:	4618      	mov	r0, r3
 8025082:	f7ea fff5 	bl	8010070 <strlen>
 8025086:	4602      	mov	r2, r0
 8025088:	69fb      	ldr	r3, [r7, #28]
 802508a:	4413      	add	r3, r2
 802508c:	61fb      	str	r3, [r7, #28]
		js->ver[len] = '.';
 802508e:	687a      	ldr	r2, [r7, #4]
 8025090:	69fb      	ldr	r3, [r7, #28]
 8025092:	4413      	add	r3, r2
 8025094:	3339      	adds	r3, #57	; 0x39
 8025096:	222e      	movs	r2, #46	; 0x2e
 8025098:	701a      	strb	r2, [r3, #0]
		len++;
 802509a:	69fb      	ldr	r3, [r7, #28]
 802509c:	3301      	adds	r3, #1
 802509e:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 3; i++) {
 80250a0:	68bb      	ldr	r3, [r7, #8]
 80250a2:	3301      	adds	r3, #1
 80250a4:	60bb      	str	r3, [r7, #8]
 80250a6:	68bb      	ldr	r3, [r7, #8]
 80250a8:	2b02      	cmp	r3, #2
 80250aa:	ddd5      	ble.n	8025058 <FlashToJSON+0x1e4>
	}
	js->ver[--len] = '\0';
 80250ac:	69fb      	ldr	r3, [r7, #28]
 80250ae:	3b01      	subs	r3, #1
 80250b0:	61fb      	str	r3, [r7, #28]
 80250b2:	687a      	ldr	r2, [r7, #4]
 80250b4:	69fb      	ldr	r3, [r7, #28]
 80250b6:	4413      	add	r3, r2
 80250b8:	3339      	adds	r3, #57	; 0x39
 80250ba:	2200      	movs	r2, #0
 80250bc:	701a      	strb	r2, [r3, #0]
}
 80250be:	bf00      	nop
 80250c0:	3720      	adds	r7, #32
 80250c2:	46bd      	mov	sp, r7
 80250c4:	bd80      	pop	{r7, pc}

080250c6 <DecodeURL>:

void DecodeURL(uint8_t *buf, uint8_t *result) {
 80250c6:	b480      	push	{r7}
 80250c8:	b083      	sub	sp, #12
 80250ca:	af00      	add	r7, sp, #0
 80250cc:	6078      	str	r0, [r7, #4]
 80250ce:	6039      	str	r1, [r7, #0]
	while (*buf != '\r') {
 80250d0:	e03f      	b.n	8025152 <DecodeURL+0x8c>
		if (*buf == '%') {
 80250d2:	687b      	ldr	r3, [r7, #4]
 80250d4:	781b      	ldrb	r3, [r3, #0]
 80250d6:	2b25      	cmp	r3, #37	; 0x25
 80250d8:	d131      	bne.n	802513e <DecodeURL+0x78>
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'B')) {
 80250da:	687b      	ldr	r3, [r7, #4]
 80250dc:	3301      	adds	r3, #1
 80250de:	781b      	ldrb	r3, [r3, #0]
 80250e0:	2b37      	cmp	r3, #55	; 0x37
 80250e2:	d10a      	bne.n	80250fa <DecodeURL+0x34>
 80250e4:	687b      	ldr	r3, [r7, #4]
 80250e6:	3302      	adds	r3, #2
 80250e8:	781b      	ldrb	r3, [r3, #0]
 80250ea:	2b42      	cmp	r3, #66	; 0x42
 80250ec:	d105      	bne.n	80250fa <DecodeURL+0x34>
				*result = '{';
 80250ee:	683b      	ldr	r3, [r7, #0]
 80250f0:	227b      	movs	r2, #123	; 0x7b
 80250f2:	701a      	strb	r2, [r3, #0]
				buf += 2;
 80250f4:	687b      	ldr	r3, [r7, #4]
 80250f6:	3302      	adds	r3, #2
 80250f8:	607b      	str	r3, [r7, #4]
			}
			if ((*(buf + 1) == '2') && (*(buf + 2) == '2')) {
 80250fa:	687b      	ldr	r3, [r7, #4]
 80250fc:	3301      	adds	r3, #1
 80250fe:	781b      	ldrb	r3, [r3, #0]
 8025100:	2b32      	cmp	r3, #50	; 0x32
 8025102:	d10a      	bne.n	802511a <DecodeURL+0x54>
 8025104:	687b      	ldr	r3, [r7, #4]
 8025106:	3302      	adds	r3, #2
 8025108:	781b      	ldrb	r3, [r3, #0]
 802510a:	2b32      	cmp	r3, #50	; 0x32
 802510c:	d105      	bne.n	802511a <DecodeURL+0x54>
				*result = '\"';
 802510e:	683b      	ldr	r3, [r7, #0]
 8025110:	2222      	movs	r2, #34	; 0x22
 8025112:	701a      	strb	r2, [r3, #0]
				buf += 2;
 8025114:	687b      	ldr	r3, [r7, #4]
 8025116:	3302      	adds	r3, #2
 8025118:	607b      	str	r3, [r7, #4]
			}
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'D')) {
 802511a:	687b      	ldr	r3, [r7, #4]
 802511c:	3301      	adds	r3, #1
 802511e:	781b      	ldrb	r3, [r3, #0]
 8025120:	2b37      	cmp	r3, #55	; 0x37
 8025122:	d110      	bne.n	8025146 <DecodeURL+0x80>
 8025124:	687b      	ldr	r3, [r7, #4]
 8025126:	3302      	adds	r3, #2
 8025128:	781b      	ldrb	r3, [r3, #0]
 802512a:	2b44      	cmp	r3, #68	; 0x44
 802512c:	d10b      	bne.n	8025146 <DecodeURL+0x80>
				*result = '}';
 802512e:	683b      	ldr	r3, [r7, #0]
 8025130:	227d      	movs	r2, #125	; 0x7d
 8025132:	701a      	strb	r2, [r3, #0]
				*(result + 1) = '\0';
 8025134:	683b      	ldr	r3, [r7, #0]
 8025136:	3301      	adds	r3, #1
 8025138:	2200      	movs	r2, #0
 802513a:	701a      	strb	r2, [r3, #0]
				break;
 802513c:	e00d      	b.n	802515a <DecodeURL+0x94>
			}
		} else {
			*result = *buf;
 802513e:	687b      	ldr	r3, [r7, #4]
 8025140:	781a      	ldrb	r2, [r3, #0]
 8025142:	683b      	ldr	r3, [r7, #0]
 8025144:	701a      	strb	r2, [r3, #0]
		}
		buf++;
 8025146:	687b      	ldr	r3, [r7, #4]
 8025148:	3301      	adds	r3, #1
 802514a:	607b      	str	r3, [r7, #4]
		result++;
 802514c:	683b      	ldr	r3, [r7, #0]
 802514e:	3301      	adds	r3, #1
 8025150:	603b      	str	r3, [r7, #0]
	while (*buf != '\r') {
 8025152:	687b      	ldr	r3, [r7, #4]
 8025154:	781b      	ldrb	r3, [r3, #0]
 8025156:	2b0d      	cmp	r3, #13
 8025158:	d1bb      	bne.n	80250d2 <DecodeURL+0xc>
	}
}
 802515a:	bf00      	nop
 802515c:	370c      	adds	r7, #12
 802515e:	46bd      	mov	sp, r7
 8025160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025164:	4770      	bx	lr
	...

08025168 <ParseJSON>:

void ParseJSON(json_data_t *js, uint8_t *json_str) {
 8025168:	b590      	push	{r4, r7, lr}
 802516a:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 802516e:	af02      	add	r7, sp, #8
 8025170:	1d3b      	adds	r3, r7, #4
 8025172:	6018      	str	r0, [r3, #0]
 8025174:	463b      	mov	r3, r7
 8025176:	6019      	str	r1, [r3, #0]
	int resultCode;
	jsmn_parser p;
	jsmntok_t tokens[MAXNUMBER_OF_TOKENS];
	jsmn_init(&p);
 8025178:	f507 7314 	add.w	r3, r7, #592	; 0x250
 802517c:	4618      	mov	r0, r3
 802517e:	f7ff fd2a 	bl	8024bd6 <jsmn_init>
	resultCode = jsmn_parse(&p, (char*) json_str, strlen((char*) json_str),
 8025182:	463b      	mov	r3, r7
 8025184:	6818      	ldr	r0, [r3, #0]
 8025186:	f7ea ff73 	bl	8010070 <strlen>
 802518a:	4604      	mov	r4, r0
 802518c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8025190:	4639      	mov	r1, r7
 8025192:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8025196:	2320      	movs	r3, #32
 8025198:	9300      	str	r3, [sp, #0]
 802519a:	4613      	mov	r3, r2
 802519c:	4622      	mov	r2, r4
 802519e:	6809      	ldr	r1, [r1, #0]
 80251a0:	f7ff fb7e 	bl	80248a0 <jsmn_parse>
 80251a4:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
			tokens, sizeof(tokens) / sizeof(tokens[0]));

	if (resultCode > 0) {
 80251a8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80251ac:	2b00      	cmp	r3, #0
 80251ae:	f340 80ea 	ble.w	8025386 <ParseJSON+0x21e>
		uint8_t keyString[MAX_TOKEN_LENGTH];
		uint8_t Prev_keyString[MAX_TOKEN_LENGTH];

		for (int i = 1; i <= resultCode - 1; i++) // resultCode == 0 => whole json string
 80251b2:	2301      	movs	r3, #1
 80251b4:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80251b8:	e0dd      	b.n	8025376 <ParseJSON+0x20e>
				{
			jsmntok_t key = tokens[i];
 80251ba:	f107 0108 	add.w	r1, r7, #8
 80251be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80251c2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80251c6:	011b      	lsls	r3, r3, #4
 80251c8:	4413      	add	r3, r2
 80251ca:	460c      	mov	r4, r1
 80251cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80251ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			uint16_t length = key.end - key.start;
 80251d2:	f107 0308 	add.w	r3, r7, #8
 80251d6:	689b      	ldr	r3, [r3, #8]
 80251d8:	b29a      	uxth	r2, r3
 80251da:	f107 0308 	add.w	r3, r7, #8
 80251de:	685b      	ldr	r3, [r3, #4]
 80251e0:	b29b      	uxth	r3, r3
 80251e2:	1ad3      	subs	r3, r2, r3
 80251e4:	f8a7 325e 	strh.w	r3, [r7, #606]	; 0x25e

			if (length < MAX_TOKEN_LENGTH) {
 80251e8:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 80251ec:	2b18      	cmp	r3, #24
 80251ee:	f200 80bd 	bhi.w	802536c <ParseJSON+0x204>
				memcpy(keyString, &json_str[key.start], length);
 80251f2:	f107 0308 	add.w	r3, r7, #8
 80251f6:	685b      	ldr	r3, [r3, #4]
 80251f8:	461a      	mov	r2, r3
 80251fa:	463b      	mov	r3, r7
 80251fc:	681b      	ldr	r3, [r3, #0]
 80251fe:	1899      	adds	r1, r3, r2
 8025200:	f8b7 225e 	ldrh.w	r2, [r7, #606]	; 0x25e
 8025204:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025208:	4618      	mov	r0, r3
 802520a:	f003 f930 	bl	802846e <memcpy>
				keyString[length] = '\0';
 802520e:	f8b7 325e 	ldrh.w	r3, [r7, #606]	; 0x25e
 8025212:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025216:	2100      	movs	r1, #0
 8025218:	54d1      	strb	r1, [r2, r3]
				/*
				 {\"addr_IP\":\"192.168.4.255\",\"mask\":\"255.255.255.000\",\"gate\":\"192.168.4.1\",\"port\":102,\"speed\":187500,
				 \"addr_own\":1,\"ver\":\"0.0.0\",\"sn\":0,\"addr_MAC\":\"AA-BB-CC-DD-EE-FF\"}
				 */
				if (strcmp((char*) Prev_keyString, "addr_IP") == 0) {
 802521a:	f107 0318 	add.w	r3, r7, #24
 802521e:	495c      	ldr	r1, [pc, #368]	; (8025390 <ParseJSON+0x228>)
 8025220:	4618      	mov	r0, r3
 8025222:	f7ea ff1b 	bl	801005c <strcmp>
 8025226:	4603      	mov	r3, r0
 8025228:	2b00      	cmp	r3, #0
 802522a:	d108      	bne.n	802523e <ParseJSON+0xd6>
					strcpy((char*) js->ip_addr, (char*) keyString);
 802522c:	1d3b      	adds	r3, r7, #4
 802522e:	681b      	ldr	r3, [r3, #0]
 8025230:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025234:	4611      	mov	r1, r2
 8025236:	4618      	mov	r0, r3
 8025238:	f003 f92c 	bl	8028494 <strcpy>
 802523c:	e08e      	b.n	802535c <ParseJSON+0x1f4>
				} else if (strcmp((char*) Prev_keyString, "mask") == 0) {
 802523e:	f107 0318 	add.w	r3, r7, #24
 8025242:	4954      	ldr	r1, [pc, #336]	; (8025394 <ParseJSON+0x22c>)
 8025244:	4618      	mov	r0, r3
 8025246:	f7ea ff09 	bl	801005c <strcmp>
 802524a:	4603      	mov	r3, r0
 802524c:	2b00      	cmp	r3, #0
 802524e:	d109      	bne.n	8025264 <ParseJSON+0xfc>
					strcpy((char*) js->mask, (char*) keyString);
 8025250:	1d3b      	adds	r3, r7, #4
 8025252:	681b      	ldr	r3, [r3, #0]
 8025254:	3310      	adds	r3, #16
 8025256:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802525a:	4611      	mov	r1, r2
 802525c:	4618      	mov	r0, r3
 802525e:	f003 f919 	bl	8028494 <strcpy>
 8025262:	e07b      	b.n	802535c <ParseJSON+0x1f4>
				} else if (strcmp((char*) Prev_keyString, "gate") == 0) {
 8025264:	f107 0318 	add.w	r3, r7, #24
 8025268:	494b      	ldr	r1, [pc, #300]	; (8025398 <ParseJSON+0x230>)
 802526a:	4618      	mov	r0, r3
 802526c:	f7ea fef6 	bl	801005c <strcmp>
 8025270:	4603      	mov	r3, r0
 8025272:	2b00      	cmp	r3, #0
 8025274:	d109      	bne.n	802528a <ParseJSON+0x122>
					strcpy((char*) js->gate, (char*) keyString);
 8025276:	1d3b      	adds	r3, r7, #4
 8025278:	681b      	ldr	r3, [r3, #0]
 802527a:	3320      	adds	r3, #32
 802527c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025280:	4611      	mov	r1, r2
 8025282:	4618      	mov	r0, r3
 8025284:	f003 f906 	bl	8028494 <strcpy>
 8025288:	e068      	b.n	802535c <ParseJSON+0x1f4>
				} else if (strcmp((char*) Prev_keyString, "port") == 0) {
 802528a:	f107 0318 	add.w	r3, r7, #24
 802528e:	4943      	ldr	r1, [pc, #268]	; (802539c <ParseJSON+0x234>)
 8025290:	4618      	mov	r0, r3
 8025292:	f7ea fee3 	bl	801005c <strcmp>
 8025296:	4603      	mov	r3, r0
 8025298:	2b00      	cmp	r3, #0
 802529a:	d10a      	bne.n	80252b2 <ParseJSON+0x14a>
					js->port = (uint16_t) atoi((char*) keyString);
 802529c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80252a0:	4618      	mov	r0, r3
 80252a2:	f003 f893 	bl	80283cc <atoi>
 80252a6:	4603      	mov	r3, r0
 80252a8:	b29a      	uxth	r2, r3
 80252aa:	1d3b      	adds	r3, r7, #4
 80252ac:	681b      	ldr	r3, [r3, #0]
 80252ae:	861a      	strh	r2, [r3, #48]	; 0x30
 80252b0:	e054      	b.n	802535c <ParseJSON+0x1f4>
				} else if (strcmp((char*) Prev_keyString, "speed") == 0) {
 80252b2:	f107 0318 	add.w	r3, r7, #24
 80252b6:	493a      	ldr	r1, [pc, #232]	; (80253a0 <ParseJSON+0x238>)
 80252b8:	4618      	mov	r0, r3
 80252ba:	f7ea fecf 	bl	801005c <strcmp>
 80252be:	4603      	mov	r3, r0
 80252c0:	2b00      	cmp	r3, #0
 80252c2:	d10a      	bne.n	80252da <ParseJSON+0x172>
					js->speed = (uint32_t) atoi((char*) keyString);
 80252c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80252c8:	4618      	mov	r0, r3
 80252ca:	f003 f87f 	bl	80283cc <atoi>
 80252ce:	4603      	mov	r3, r0
 80252d0:	461a      	mov	r2, r3
 80252d2:	1d3b      	adds	r3, r7, #4
 80252d4:	681b      	ldr	r3, [r3, #0]
 80252d6:	635a      	str	r2, [r3, #52]	; 0x34
 80252d8:	e040      	b.n	802535c <ParseJSON+0x1f4>
				} else if (strcmp((char*) Prev_keyString, "addr_own") == 0) {
 80252da:	f107 0318 	add.w	r3, r7, #24
 80252de:	4931      	ldr	r1, [pc, #196]	; (80253a4 <ParseJSON+0x23c>)
 80252e0:	4618      	mov	r0, r3
 80252e2:	f7ea febb 	bl	801005c <strcmp>
 80252e6:	4603      	mov	r3, r0
 80252e8:	2b00      	cmp	r3, #0
 80252ea:	d10b      	bne.n	8025304 <ParseJSON+0x19c>
					js->own_addr = (uint8_t) atoi((char*) keyString);
 80252ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80252f0:	4618      	mov	r0, r3
 80252f2:	f003 f86b 	bl	80283cc <atoi>
 80252f6:	4603      	mov	r3, r0
 80252f8:	b2da      	uxtb	r2, r3
 80252fa:	1d3b      	adds	r3, r7, #4
 80252fc:	681b      	ldr	r3, [r3, #0]
 80252fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8025302:	e02b      	b.n	802535c <ParseJSON+0x1f4>
				} else if (strcmp((char*) Prev_keyString, "sn") == 0) {
 8025304:	f107 0318 	add.w	r3, r7, #24
 8025308:	4927      	ldr	r1, [pc, #156]	; (80253a8 <ParseJSON+0x240>)
 802530a:	4618      	mov	r0, r3
 802530c:	f7ea fea6 	bl	801005c <strcmp>
 8025310:	4603      	mov	r3, r0
 8025312:	2b00      	cmp	r3, #0
 8025314:	d110      	bne.n	8025338 <ParseJSON+0x1d0>
					if (js->serial_num
 8025316:	1d3b      	adds	r3, r7, #4
 8025318:	681b      	ldr	r3, [r3, #0]
 802531a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802531c:	2b00      	cmp	r3, #0
 802531e:	d11d      	bne.n	802535c <ParseJSON+0x1f4>
							== ((DEFAULT_SN_MS << 16) + DEFAULT_SN_LS)) {
						js->serial_num = (uint8_t) atoi((char*) keyString);
 8025320:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025324:	4618      	mov	r0, r3
 8025326:	f003 f851 	bl	80283cc <atoi>
 802532a:	4603      	mov	r3, r0
 802532c:	b2db      	uxtb	r3, r3
 802532e:	461a      	mov	r2, r3
 8025330:	1d3b      	adds	r3, r7, #4
 8025332:	681b      	ldr	r3, [r3, #0]
 8025334:	649a      	str	r2, [r3, #72]	; 0x48
 8025336:	e011      	b.n	802535c <ParseJSON+0x1f4>
					}
				} else if (strcmp((char*) Prev_keyString, "addr_MAC") == 0) {
 8025338:	f107 0318 	add.w	r3, r7, #24
 802533c:	491b      	ldr	r1, [pc, #108]	; (80253ac <ParseJSON+0x244>)
 802533e:	4618      	mov	r0, r3
 8025340:	f7ea fe8c 	bl	801005c <strcmp>
 8025344:	4603      	mov	r3, r0
 8025346:	2b00      	cmp	r3, #0
 8025348:	d108      	bne.n	802535c <ParseJSON+0x1f4>
					strcpy((char*) js->mac_addr, (char*) keyString);
 802534a:	1d3b      	adds	r3, r7, #4
 802534c:	681b      	ldr	r3, [r3, #0]
 802534e:	334c      	adds	r3, #76	; 0x4c
 8025350:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025354:	4611      	mov	r1, r2
 8025356:	4618      	mov	r0, r3
 8025358:	f003 f89c 	bl	8028494 <strcpy>
				}
				strcpy((char*) Prev_keyString, (char*) keyString);
 802535c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025360:	f107 0318 	add.w	r3, r7, #24
 8025364:	4611      	mov	r1, r2
 8025366:	4618      	mov	r0, r3
 8025368:	f003 f894 	bl	8028494 <strcpy>
		for (int i = 1; i <= resultCode - 1; i++) // resultCode == 0 => whole json string
 802536c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8025370:	3301      	adds	r3, #1
 8025372:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8025376:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 802537a:	1e5a      	subs	r2, r3, #1
 802537c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8025380:	429a      	cmp	r2, r3
 8025382:	f6bf af1a 	bge.w	80251ba <ParseJSON+0x52>
			}
		}
	}

}
 8025386:	bf00      	nop
 8025388:	f507 771b 	add.w	r7, r7, #620	; 0x26c
 802538c:	46bd      	mov	sp, r7
 802538e:	bd90      	pop	{r4, r7, pc}
 8025390:	0802b6d0 	.word	0x0802b6d0
 8025394:	0802b6d8 	.word	0x0802b6d8
 8025398:	0802b6e0 	.word	0x0802b6e0
 802539c:	0802b6e8 	.word	0x0802b6e8
 80253a0:	0802b6f0 	.word	0x0802b6f0
 80253a4:	0802b6f8 	.word	0x0802b6f8
 80253a8:	0802b704 	.word	0x0802b704
 80253ac:	0802b708 	.word	0x0802b708

080253b0 <JSONToFlash>:

void JSONToFlash(json_data_t *js, flash_data_t *fs) {
 80253b0:	b580      	push	{r7, lr}
 80253b2:	b088      	sub	sp, #32
 80253b4:	af00      	add	r7, sp, #0
 80253b6:	6078      	str	r0, [r7, #4]
 80253b8:	6039      	str	r1, [r7, #0]
	union {
		uint32_t ui32;
		uint8_t ui8[4];
	} tmp_u;

	ipaddr_aton((char*)js->ip_addr, &new_ip);
 80253ba:	687b      	ldr	r3, [r7, #4]
 80253bc:	f107 0210 	add.w	r2, r7, #16
 80253c0:	4611      	mov	r1, r2
 80253c2:	4618      	mov	r0, r3
 80253c4:	f7f5 fac0 	bl	801a948 <ip4addr_aton>
	tmp_u.ui32 = new_ip.addr;
 80253c8:	693b      	ldr	r3, [r7, #16]
 80253ca:	60fb      	str	r3, [r7, #12]
	fs->IP_addr[0] = tmp_u.ui8[0];
 80253cc:	7b3a      	ldrb	r2, [r7, #12]
 80253ce:	683b      	ldr	r3, [r7, #0]
 80253d0:	719a      	strb	r2, [r3, #6]
	fs->IP_addr[1] = tmp_u.ui8[1];
 80253d2:	7b7a      	ldrb	r2, [r7, #13]
 80253d4:	683b      	ldr	r3, [r7, #0]
 80253d6:	71da      	strb	r2, [r3, #7]
	fs->IP_addr[2] = tmp_u.ui8[2];
 80253d8:	7bba      	ldrb	r2, [r7, #14]
 80253da:	683b      	ldr	r3, [r7, #0]
 80253dc:	721a      	strb	r2, [r3, #8]
	fs->IP_addr[3] = tmp_u.ui8[3];
 80253de:	7bfa      	ldrb	r2, [r7, #15]
 80253e0:	683b      	ldr	r3, [r7, #0]
 80253e2:	725a      	strb	r2, [r3, #9]

	ipaddr_aton((char*)js->gate, &new_ip);
 80253e4:	687b      	ldr	r3, [r7, #4]
 80253e6:	3320      	adds	r3, #32
 80253e8:	f107 0210 	add.w	r2, r7, #16
 80253ec:	4611      	mov	r1, r2
 80253ee:	4618      	mov	r0, r3
 80253f0:	f7f5 faaa 	bl	801a948 <ip4addr_aton>
	tmp_u.ui32 = new_ip.addr;
 80253f4:	693b      	ldr	r3, [r7, #16]
 80253f6:	60fb      	str	r3, [r7, #12]
	fs->gate[0] = tmp_u.ui8[0];
 80253f8:	7b3a      	ldrb	r2, [r7, #12]
 80253fa:	683b      	ldr	r3, [r7, #0]
 80253fc:	739a      	strb	r2, [r3, #14]
	fs->gate[1] = tmp_u.ui8[1];
 80253fe:	7b7a      	ldrb	r2, [r7, #13]
 8025400:	683b      	ldr	r3, [r7, #0]
 8025402:	73da      	strb	r2, [r3, #15]
	fs->gate[2] = tmp_u.ui8[2];
 8025404:	7bba      	ldrb	r2, [r7, #14]
 8025406:	683b      	ldr	r3, [r7, #0]
 8025408:	741a      	strb	r2, [r3, #16]
	fs->gate[3] = tmp_u.ui8[3];
 802540a:	7bfa      	ldrb	r2, [r7, #15]
 802540c:	683b      	ldr	r3, [r7, #0]
 802540e:	745a      	strb	r2, [r3, #17]

	ipaddr_aton((char*)js->mask, &new_ip);
 8025410:	687b      	ldr	r3, [r7, #4]
 8025412:	3310      	adds	r3, #16
 8025414:	f107 0210 	add.w	r2, r7, #16
 8025418:	4611      	mov	r1, r2
 802541a:	4618      	mov	r0, r3
 802541c:	f7f5 fa94 	bl	801a948 <ip4addr_aton>
	tmp_u.ui32 = new_ip.addr;
 8025420:	693b      	ldr	r3, [r7, #16]
 8025422:	60fb      	str	r3, [r7, #12]
	fs->mask[0] = tmp_u.ui8[0];
 8025424:	7b3a      	ldrb	r2, [r7, #12]
 8025426:	683b      	ldr	r3, [r7, #0]
 8025428:	729a      	strb	r2, [r3, #10]
	fs->mask[1] = tmp_u.ui8[1];
 802542a:	7b7a      	ldrb	r2, [r7, #13]
 802542c:	683b      	ldr	r3, [r7, #0]
 802542e:	72da      	strb	r2, [r3, #11]
	fs->mask[2] = tmp_u.ui8[2];
 8025430:	7bba      	ldrb	r2, [r7, #14]
 8025432:	683b      	ldr	r3, [r7, #0]
 8025434:	731a      	strb	r2, [r3, #12]
	fs->mask[3] = tmp_u.ui8[3];
 8025436:	7bfa      	ldrb	r2, [r7, #15]
 8025438:	683b      	ldr	r3, [r7, #0]
 802543a:	735a      	strb	r2, [r3, #13]
	uint8_t *ptr = js->mac_addr;
 802543c:	687b      	ldr	r3, [r7, #4]
 802543e:	334c      	adds	r3, #76	; 0x4c
 8025440:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 6; i++) {
 8025442:	2300      	movs	r3, #0
 8025444:	61bb      	str	r3, [r7, #24]
 8025446:	e030      	b.n	80254aa <JSONToFlash+0xfa>
		uint8_t tok[3];
		int j = 0;
 8025448:	2300      	movs	r3, #0
 802544a:	617b      	str	r3, [r7, #20]
		while (j < 2 && *ptr != '-') {
 802544c:	e00b      	b.n	8025466 <JSONToFlash+0xb6>
			tok[j++] = *ptr++;
 802544e:	697b      	ldr	r3, [r7, #20]
 8025450:	1c5a      	adds	r2, r3, #1
 8025452:	617a      	str	r2, [r7, #20]
 8025454:	69fa      	ldr	r2, [r7, #28]
 8025456:	1c51      	adds	r1, r2, #1
 8025458:	61f9      	str	r1, [r7, #28]
 802545a:	7812      	ldrb	r2, [r2, #0]
 802545c:	f107 0120 	add.w	r1, r7, #32
 8025460:	440b      	add	r3, r1
 8025462:	f803 2c18 	strb.w	r2, [r3, #-24]
		while (j < 2 && *ptr != '-') {
 8025466:	697b      	ldr	r3, [r7, #20]
 8025468:	2b01      	cmp	r3, #1
 802546a:	dc03      	bgt.n	8025474 <JSONToFlash+0xc4>
 802546c:	69fb      	ldr	r3, [r7, #28]
 802546e:	781b      	ldrb	r3, [r3, #0]
 8025470:	2b2d      	cmp	r3, #45	; 0x2d
 8025472:	d1ec      	bne.n	802544e <JSONToFlash+0x9e>
		}
		ptr++;
 8025474:	69fb      	ldr	r3, [r7, #28]
 8025476:	3301      	adds	r3, #1
 8025478:	61fb      	str	r3, [r7, #28]
		tok[j] = '\0';
 802547a:	f107 0208 	add.w	r2, r7, #8
 802547e:	697b      	ldr	r3, [r7, #20]
 8025480:	4413      	add	r3, r2
 8025482:	2200      	movs	r2, #0
 8025484:	701a      	strb	r2, [r3, #0]
		fs->mac_addr[i] = strtol((char*)tok, NULL, 16);
 8025486:	f107 0308 	add.w	r3, r7, #8
 802548a:	2210      	movs	r2, #16
 802548c:	2100      	movs	r1, #0
 802548e:	4618      	mov	r0, r3
 8025490:	f003 f89a 	bl	80285c8 <strtol>
 8025494:	4603      	mov	r3, r0
 8025496:	b2d9      	uxtb	r1, r3
 8025498:	683a      	ldr	r2, [r7, #0]
 802549a:	69bb      	ldr	r3, [r7, #24]
 802549c:	4413      	add	r3, r2
 802549e:	331e      	adds	r3, #30
 80254a0:	460a      	mov	r2, r1
 80254a2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++) {
 80254a4:	69bb      	ldr	r3, [r7, #24]
 80254a6:	3301      	adds	r3, #1
 80254a8:	61bb      	str	r3, [r7, #24]
 80254aa:	69bb      	ldr	r3, [r7, #24]
 80254ac:	2b05      	cmp	r3, #5
 80254ae:	ddcb      	ble.n	8025448 <JSONToFlash+0x98>
	}
	fs->own_addr = js->own_addr;
 80254b0:	687b      	ldr	r3, [r7, #4]
 80254b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80254b6:	b29a      	uxth	r2, r3
 80254b8:	683b      	ldr	r3, [r7, #0]
 80254ba:	809a      	strh	r2, [r3, #4]
	fs->port = js->port;
 80254bc:	687b      	ldr	r3, [r7, #4]
 80254be:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80254c0:	683b      	ldr	r3, [r7, #0]
 80254c2:	825a      	strh	r2, [r3, #18]
	fs->serial_num = js->serial_num;
 80254c4:	687b      	ldr	r3, [r7, #4]
 80254c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80254c8:	683b      	ldr	r3, [r7, #0]
 80254ca:	615a      	str	r2, [r3, #20]
	fs->speed = js->speed;
 80254cc:	687b      	ldr	r3, [r7, #4]
 80254ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80254d0:	683b      	ldr	r3, [r7, #0]
 80254d2:	601a      	str	r2, [r3, #0]
}
 80254d4:	bf00      	nop
 80254d6:	3720      	adds	r7, #32
 80254d8:	46bd      	mov	sp, r7
 80254da:	bd80      	pop	{r7, pc}

080254dc <LogInit>:

static char* txt_lev[NUM_LOG_LEV - 1] = { "OFF", "ERR", "WAR", "INF", };

static char* txt_sys[NUM_OF_SUB_SYS] = { "MEM", "WEB", "458", "TCP", "LOG" };

void LogInit(UART_HandleTypeDef * log_if) {
 80254dc:	b490      	push	{r4, r7}
 80254de:	b082      	sub	sp, #8
 80254e0:	af00      	add	r7, sp, #0
 80254e2:	6078      	str	r0, [r7, #4]
	hlog.interface = log_if;
 80254e4:	4a08      	ldr	r2, [pc, #32]	; (8025508 <LogInit+0x2c>)
 80254e6:	687b      	ldr	r3, [r7, #4]
 80254e8:	6013      	str	r3, [r2, #0]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 80254ea:	2400      	movs	r4, #0
 80254ec:	e004      	b.n	80254f8 <LogInit+0x1c>
		hlog.levels[i] = LOG_LEV_ALL;
 80254ee:	4b06      	ldr	r3, [pc, #24]	; (8025508 <LogInit+0x2c>)
 80254f0:	4423      	add	r3, r4
 80254f2:	2204      	movs	r2, #4
 80254f4:	711a      	strb	r2, [r3, #4]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 80254f6:	3401      	adds	r4, #1
 80254f8:	2c04      	cmp	r4, #4
 80254fa:	ddf8      	ble.n	80254ee <LogInit+0x12>
	}
}
 80254fc:	bf00      	nop
 80254fe:	3708      	adds	r7, #8
 8025500:	46bd      	mov	sp, r7
 8025502:	bc90      	pop	{r4, r7}
 8025504:	4770      	bx	lr
 8025506:	bf00      	nop
 8025508:	20011e8c 	.word	0x20011e8c

0802550c <LogText__>:

void LogText__(log_sub_sys sys, log_level level, char *msg) {
 802550c:	b580      	push	{r7, lr}
 802550e:	b084      	sub	sp, #16
 8025510:	af00      	add	r7, sp, #0
 8025512:	4603      	mov	r3, r0
 8025514:	603a      	str	r2, [r7, #0]
 8025516:	71fb      	strb	r3, [r7, #7]
 8025518:	460b      	mov	r3, r1
 802551a:	71bb      	strb	r3, [r7, #6]
	if (level <= hlog.levels[sys]) {
 802551c:	79fb      	ldrb	r3, [r7, #7]
 802551e:	4a2d      	ldr	r2, [pc, #180]	; (80255d4 <LogText__+0xc8>)
 8025520:	4413      	add	r3, r2
 8025522:	791b      	ldrb	r3, [r3, #4]
 8025524:	79ba      	ldrb	r2, [r7, #6]
 8025526:	429a      	cmp	r2, r3
 8025528:	d850      	bhi.n	80255cc <LogText__+0xc0>
		while (hlog.interface->gState != HAL_UART_STATE_READY) {
 802552a:	e002      	b.n	8025532 <LogText__+0x26>
			osDelay(1);
 802552c:	2001      	movs	r0, #1
 802552e:	f7ee ff86 	bl	801443e <osDelay>
		while (hlog.interface->gState != HAL_UART_STATE_READY) {
 8025532:	4b28      	ldr	r3, [pc, #160]	; (80255d4 <LogText__+0xc8>)
 8025534:	681b      	ldr	r3, [r3, #0]
 8025536:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802553a:	b2db      	uxtb	r3, r3
 802553c:	2b20      	cmp	r3, #32
 802553e:	d1f5      	bne.n	802552c <LogText__+0x20>
		}
		uint len = 0;
 8025540:	2300      	movs	r3, #0
 8025542:	60fb      	str	r3, [r7, #12]
		char * ptr = msg;
 8025544:	683b      	ldr	r3, [r7, #0]
 8025546:	60bb      	str	r3, [r7, #8]
		while (*ptr++) {
 8025548:	e002      	b.n	8025550 <LogText__+0x44>
			len++;
 802554a:	68fb      	ldr	r3, [r7, #12]
 802554c:	3301      	adds	r3, #1
 802554e:	60fb      	str	r3, [r7, #12]
		while (*ptr++) {
 8025550:	68bb      	ldr	r3, [r7, #8]
 8025552:	1c5a      	adds	r2, r3, #1
 8025554:	60ba      	str	r2, [r7, #8]
 8025556:	781b      	ldrb	r3, [r3, #0]
 8025558:	2b00      	cmp	r3, #0
 802555a:	d1f6      	bne.n	802554a <LogText__+0x3e>
		}
		ptr = (char*) pvPortMalloc((size_t) (len + 10));
 802555c:	68fb      	ldr	r3, [r7, #12]
 802555e:	330a      	adds	r3, #10
 8025560:	4618      	mov	r0, r3
 8025562:	f7ef fcbd 	bl	8014ee0 <pvPortMalloc>
 8025566:	60b8      	str	r0, [r7, #8]
		if (ptr != NULL) {
 8025568:	68bb      	ldr	r3, [r7, #8]
 802556a:	2b00      	cmp	r3, #0
 802556c:	d02e      	beq.n	80255cc <LogText__+0xc0>
			strcpy(ptr, txt_sys[sys]);
 802556e:	79fb      	ldrb	r3, [r7, #7]
 8025570:	4a19      	ldr	r2, [pc, #100]	; (80255d8 <LogText__+0xcc>)
 8025572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025576:	4619      	mov	r1, r3
 8025578:	68b8      	ldr	r0, [r7, #8]
 802557a:	f002 ff8b 	bl	8028494 <strcpy>
			strcpy(ptr + 3, "_");
 802557e:	68bb      	ldr	r3, [r7, #8]
 8025580:	3303      	adds	r3, #3
 8025582:	4916      	ldr	r1, [pc, #88]	; (80255dc <LogText__+0xd0>)
 8025584:	461a      	mov	r2, r3
 8025586:	460b      	mov	r3, r1
 8025588:	881b      	ldrh	r3, [r3, #0]
 802558a:	8013      	strh	r3, [r2, #0]
			strcpy(ptr + 4, txt_lev[level]);
 802558c:	68bb      	ldr	r3, [r7, #8]
 802558e:	1d18      	adds	r0, r3, #4
 8025590:	79bb      	ldrb	r3, [r7, #6]
 8025592:	4a13      	ldr	r2, [pc, #76]	; (80255e0 <LogText__+0xd4>)
 8025594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025598:	4619      	mov	r1, r3
 802559a:	f002 ff7b 	bl	8028494 <strcpy>
			strcpy(ptr + 7, ":");
 802559e:	68bb      	ldr	r3, [r7, #8]
 80255a0:	3307      	adds	r3, #7
 80255a2:	4910      	ldr	r1, [pc, #64]	; (80255e4 <LogText__+0xd8>)
 80255a4:	461a      	mov	r2, r3
 80255a6:	460b      	mov	r3, r1
 80255a8:	881b      	ldrh	r3, [r3, #0]
 80255aa:	8013      	strh	r3, [r2, #0]
			strcpy(ptr + 8, msg);
 80255ac:	68bb      	ldr	r3, [r7, #8]
 80255ae:	3308      	adds	r3, #8
 80255b0:	6839      	ldr	r1, [r7, #0]
 80255b2:	4618      	mov	r0, r3
 80255b4:	f002 ff6e 	bl	8028494 <strcpy>
			HAL_UART_Transmit_DMA(hlog.interface, (uint8_t*) ptr, len + 8);
 80255b8:	4b06      	ldr	r3, [pc, #24]	; (80255d4 <LogText__+0xc8>)
 80255ba:	6818      	ldr	r0, [r3, #0]
 80255bc:	68fb      	ldr	r3, [r7, #12]
 80255be:	b29b      	uxth	r3, r3
 80255c0:	3308      	adds	r3, #8
 80255c2:	b29b      	uxth	r3, r3
 80255c4:	461a      	mov	r2, r3
 80255c6:	68b9      	ldr	r1, [r7, #8]
 80255c8:	f7ee f964 	bl	8013894 <HAL_UART_Transmit_DMA>

		}
	}
}
 80255cc:	bf00      	nop
 80255ce:	3710      	adds	r7, #16
 80255d0:	46bd      	mov	sp, r7
 80255d2:	bd80      	pop	{r7, pc}
 80255d4:	20011e8c 	.word	0x20011e8c
 80255d8:	20000048 	.word	0x20000048
 80255dc:	0802b738 	.word	0x0802b738
 80255e0:	20000038 	.word	0x20000038
 80255e4:	0802b73c 	.word	0x0802b73c

080255e8 <MX_LWIP_Init>:
/* USER CODE END 2 */

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void) {
 80255e8:	b580      	push	{r7, lr}
 80255ea:	b086      	sub	sp, #24
 80255ec:	af04      	add	r7, sp, #16
	/* IP addresses initialization */
	IP_ADDRESS[0] = hflash.IP_addr[0];
 80255ee:	4b9f      	ldr	r3, [pc, #636]	; (802586c <MX_LWIP_Init+0x284>)
 80255f0:	799a      	ldrb	r2, [r3, #6]
 80255f2:	4b9f      	ldr	r3, [pc, #636]	; (8025870 <MX_LWIP_Init+0x288>)
 80255f4:	701a      	strb	r2, [r3, #0]
	IP_ADDRESS[1] = hflash.IP_addr[1];
 80255f6:	4b9d      	ldr	r3, [pc, #628]	; (802586c <MX_LWIP_Init+0x284>)
 80255f8:	79da      	ldrb	r2, [r3, #7]
 80255fa:	4b9d      	ldr	r3, [pc, #628]	; (8025870 <MX_LWIP_Init+0x288>)
 80255fc:	705a      	strb	r2, [r3, #1]
	IP_ADDRESS[2] = hflash.IP_addr[2];
 80255fe:	4b9b      	ldr	r3, [pc, #620]	; (802586c <MX_LWIP_Init+0x284>)
 8025600:	7a1a      	ldrb	r2, [r3, #8]
 8025602:	4b9b      	ldr	r3, [pc, #620]	; (8025870 <MX_LWIP_Init+0x288>)
 8025604:	709a      	strb	r2, [r3, #2]
	IP_ADDRESS[3] = hflash.IP_addr[3];
 8025606:	4b99      	ldr	r3, [pc, #612]	; (802586c <MX_LWIP_Init+0x284>)
 8025608:	7a5a      	ldrb	r2, [r3, #9]
 802560a:	4b99      	ldr	r3, [pc, #612]	; (8025870 <MX_LWIP_Init+0x288>)
 802560c:	70da      	strb	r2, [r3, #3]
	NETMASK_ADDRESS[0] = hflash.mask[0];
 802560e:	4b97      	ldr	r3, [pc, #604]	; (802586c <MX_LWIP_Init+0x284>)
 8025610:	7a9a      	ldrb	r2, [r3, #10]
 8025612:	4b98      	ldr	r3, [pc, #608]	; (8025874 <MX_LWIP_Init+0x28c>)
 8025614:	701a      	strb	r2, [r3, #0]
	NETMASK_ADDRESS[1] = hflash.mask[1];
 8025616:	4b95      	ldr	r3, [pc, #596]	; (802586c <MX_LWIP_Init+0x284>)
 8025618:	7ada      	ldrb	r2, [r3, #11]
 802561a:	4b96      	ldr	r3, [pc, #600]	; (8025874 <MX_LWIP_Init+0x28c>)
 802561c:	705a      	strb	r2, [r3, #1]
	NETMASK_ADDRESS[2] = hflash.mask[2];
 802561e:	4b93      	ldr	r3, [pc, #588]	; (802586c <MX_LWIP_Init+0x284>)
 8025620:	7b1a      	ldrb	r2, [r3, #12]
 8025622:	4b94      	ldr	r3, [pc, #592]	; (8025874 <MX_LWIP_Init+0x28c>)
 8025624:	709a      	strb	r2, [r3, #2]
	NETMASK_ADDRESS[3] = hflash.mask[3];
 8025626:	4b91      	ldr	r3, [pc, #580]	; (802586c <MX_LWIP_Init+0x284>)
 8025628:	7b5a      	ldrb	r2, [r3, #13]
 802562a:	4b92      	ldr	r3, [pc, #584]	; (8025874 <MX_LWIP_Init+0x28c>)
 802562c:	70da      	strb	r2, [r3, #3]
	GATEWAY_ADDRESS[0] = hflash.gate[0];
 802562e:	4b8f      	ldr	r3, [pc, #572]	; (802586c <MX_LWIP_Init+0x284>)
 8025630:	7b9a      	ldrb	r2, [r3, #14]
 8025632:	4b91      	ldr	r3, [pc, #580]	; (8025878 <MX_LWIP_Init+0x290>)
 8025634:	701a      	strb	r2, [r3, #0]
	GATEWAY_ADDRESS[1] = hflash.gate[1];
 8025636:	4b8d      	ldr	r3, [pc, #564]	; (802586c <MX_LWIP_Init+0x284>)
 8025638:	7bda      	ldrb	r2, [r3, #15]
 802563a:	4b8f      	ldr	r3, [pc, #572]	; (8025878 <MX_LWIP_Init+0x290>)
 802563c:	705a      	strb	r2, [r3, #1]
	GATEWAY_ADDRESS[2] = hflash.gate[2];
 802563e:	4b8b      	ldr	r3, [pc, #556]	; (802586c <MX_LWIP_Init+0x284>)
 8025640:	7c1a      	ldrb	r2, [r3, #16]
 8025642:	4b8d      	ldr	r3, [pc, #564]	; (8025878 <MX_LWIP_Init+0x290>)
 8025644:	709a      	strb	r2, [r3, #2]
	GATEWAY_ADDRESS[3] = hflash.gate[3];
 8025646:	4b89      	ldr	r3, [pc, #548]	; (802586c <MX_LWIP_Init+0x284>)
 8025648:	7c5a      	ldrb	r2, [r3, #17]
 802564a:	4b8b      	ldr	r3, [pc, #556]	; (8025878 <MX_LWIP_Init+0x290>)
 802564c:	70da      	strb	r2, [r3, #3]

	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);
 802564e:	2100      	movs	r1, #0
 8025650:	2000      	movs	r0, #0
 8025652:	f7f3 fd57 	bl	8019104 <tcpip_init>

	/* IP addresses initialization without DHCP (IPv4) */
	IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2],
 8025656:	4b86      	ldr	r3, [pc, #536]	; (8025870 <MX_LWIP_Init+0x288>)
 8025658:	781b      	ldrb	r3, [r3, #0]
 802565a:	061a      	lsls	r2, r3, #24
 802565c:	4b84      	ldr	r3, [pc, #528]	; (8025870 <MX_LWIP_Init+0x288>)
 802565e:	785b      	ldrb	r3, [r3, #1]
 8025660:	041b      	lsls	r3, r3, #16
 8025662:	431a      	orrs	r2, r3
 8025664:	4b82      	ldr	r3, [pc, #520]	; (8025870 <MX_LWIP_Init+0x288>)
 8025666:	789b      	ldrb	r3, [r3, #2]
 8025668:	021b      	lsls	r3, r3, #8
 802566a:	4313      	orrs	r3, r2
 802566c:	4a80      	ldr	r2, [pc, #512]	; (8025870 <MX_LWIP_Init+0x288>)
 802566e:	78d2      	ldrb	r2, [r2, #3]
 8025670:	4313      	orrs	r3, r2
 8025672:	061a      	lsls	r2, r3, #24
 8025674:	4b7e      	ldr	r3, [pc, #504]	; (8025870 <MX_LWIP_Init+0x288>)
 8025676:	781b      	ldrb	r3, [r3, #0]
 8025678:	0619      	lsls	r1, r3, #24
 802567a:	4b7d      	ldr	r3, [pc, #500]	; (8025870 <MX_LWIP_Init+0x288>)
 802567c:	785b      	ldrb	r3, [r3, #1]
 802567e:	041b      	lsls	r3, r3, #16
 8025680:	4319      	orrs	r1, r3
 8025682:	4b7b      	ldr	r3, [pc, #492]	; (8025870 <MX_LWIP_Init+0x288>)
 8025684:	789b      	ldrb	r3, [r3, #2]
 8025686:	021b      	lsls	r3, r3, #8
 8025688:	430b      	orrs	r3, r1
 802568a:	4979      	ldr	r1, [pc, #484]	; (8025870 <MX_LWIP_Init+0x288>)
 802568c:	78c9      	ldrb	r1, [r1, #3]
 802568e:	430b      	orrs	r3, r1
 8025690:	021b      	lsls	r3, r3, #8
 8025692:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8025696:	431a      	orrs	r2, r3
 8025698:	4b75      	ldr	r3, [pc, #468]	; (8025870 <MX_LWIP_Init+0x288>)
 802569a:	781b      	ldrb	r3, [r3, #0]
 802569c:	0619      	lsls	r1, r3, #24
 802569e:	4b74      	ldr	r3, [pc, #464]	; (8025870 <MX_LWIP_Init+0x288>)
 80256a0:	785b      	ldrb	r3, [r3, #1]
 80256a2:	041b      	lsls	r3, r3, #16
 80256a4:	4319      	orrs	r1, r3
 80256a6:	4b72      	ldr	r3, [pc, #456]	; (8025870 <MX_LWIP_Init+0x288>)
 80256a8:	789b      	ldrb	r3, [r3, #2]
 80256aa:	021b      	lsls	r3, r3, #8
 80256ac:	430b      	orrs	r3, r1
 80256ae:	4970      	ldr	r1, [pc, #448]	; (8025870 <MX_LWIP_Init+0x288>)
 80256b0:	78c9      	ldrb	r1, [r1, #3]
 80256b2:	430b      	orrs	r3, r1
 80256b4:	0a1b      	lsrs	r3, r3, #8
 80256b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80256ba:	431a      	orrs	r2, r3
 80256bc:	4b6c      	ldr	r3, [pc, #432]	; (8025870 <MX_LWIP_Init+0x288>)
 80256be:	781b      	ldrb	r3, [r3, #0]
 80256c0:	0619      	lsls	r1, r3, #24
 80256c2:	4b6b      	ldr	r3, [pc, #428]	; (8025870 <MX_LWIP_Init+0x288>)
 80256c4:	785b      	ldrb	r3, [r3, #1]
 80256c6:	041b      	lsls	r3, r3, #16
 80256c8:	4319      	orrs	r1, r3
 80256ca:	4b69      	ldr	r3, [pc, #420]	; (8025870 <MX_LWIP_Init+0x288>)
 80256cc:	789b      	ldrb	r3, [r3, #2]
 80256ce:	021b      	lsls	r3, r3, #8
 80256d0:	430b      	orrs	r3, r1
 80256d2:	4967      	ldr	r1, [pc, #412]	; (8025870 <MX_LWIP_Init+0x288>)
 80256d4:	78c9      	ldrb	r1, [r1, #3]
 80256d6:	430b      	orrs	r3, r1
 80256d8:	0e1b      	lsrs	r3, r3, #24
 80256da:	4313      	orrs	r3, r2
 80256dc:	4a67      	ldr	r2, [pc, #412]	; (802587c <MX_LWIP_Init+0x294>)
 80256de:	6013      	str	r3, [r2, #0]
			IP_ADDRESS[3]);
	IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1],
 80256e0:	4b64      	ldr	r3, [pc, #400]	; (8025874 <MX_LWIP_Init+0x28c>)
 80256e2:	781b      	ldrb	r3, [r3, #0]
 80256e4:	061a      	lsls	r2, r3, #24
 80256e6:	4b63      	ldr	r3, [pc, #396]	; (8025874 <MX_LWIP_Init+0x28c>)
 80256e8:	785b      	ldrb	r3, [r3, #1]
 80256ea:	041b      	lsls	r3, r3, #16
 80256ec:	431a      	orrs	r2, r3
 80256ee:	4b61      	ldr	r3, [pc, #388]	; (8025874 <MX_LWIP_Init+0x28c>)
 80256f0:	789b      	ldrb	r3, [r3, #2]
 80256f2:	021b      	lsls	r3, r3, #8
 80256f4:	4313      	orrs	r3, r2
 80256f6:	4a5f      	ldr	r2, [pc, #380]	; (8025874 <MX_LWIP_Init+0x28c>)
 80256f8:	78d2      	ldrb	r2, [r2, #3]
 80256fa:	4313      	orrs	r3, r2
 80256fc:	061a      	lsls	r2, r3, #24
 80256fe:	4b5d      	ldr	r3, [pc, #372]	; (8025874 <MX_LWIP_Init+0x28c>)
 8025700:	781b      	ldrb	r3, [r3, #0]
 8025702:	0619      	lsls	r1, r3, #24
 8025704:	4b5b      	ldr	r3, [pc, #364]	; (8025874 <MX_LWIP_Init+0x28c>)
 8025706:	785b      	ldrb	r3, [r3, #1]
 8025708:	041b      	lsls	r3, r3, #16
 802570a:	4319      	orrs	r1, r3
 802570c:	4b59      	ldr	r3, [pc, #356]	; (8025874 <MX_LWIP_Init+0x28c>)
 802570e:	789b      	ldrb	r3, [r3, #2]
 8025710:	021b      	lsls	r3, r3, #8
 8025712:	430b      	orrs	r3, r1
 8025714:	4957      	ldr	r1, [pc, #348]	; (8025874 <MX_LWIP_Init+0x28c>)
 8025716:	78c9      	ldrb	r1, [r1, #3]
 8025718:	430b      	orrs	r3, r1
 802571a:	021b      	lsls	r3, r3, #8
 802571c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8025720:	431a      	orrs	r2, r3
 8025722:	4b54      	ldr	r3, [pc, #336]	; (8025874 <MX_LWIP_Init+0x28c>)
 8025724:	781b      	ldrb	r3, [r3, #0]
 8025726:	0619      	lsls	r1, r3, #24
 8025728:	4b52      	ldr	r3, [pc, #328]	; (8025874 <MX_LWIP_Init+0x28c>)
 802572a:	785b      	ldrb	r3, [r3, #1]
 802572c:	041b      	lsls	r3, r3, #16
 802572e:	4319      	orrs	r1, r3
 8025730:	4b50      	ldr	r3, [pc, #320]	; (8025874 <MX_LWIP_Init+0x28c>)
 8025732:	789b      	ldrb	r3, [r3, #2]
 8025734:	021b      	lsls	r3, r3, #8
 8025736:	430b      	orrs	r3, r1
 8025738:	494e      	ldr	r1, [pc, #312]	; (8025874 <MX_LWIP_Init+0x28c>)
 802573a:	78c9      	ldrb	r1, [r1, #3]
 802573c:	430b      	orrs	r3, r1
 802573e:	0a1b      	lsrs	r3, r3, #8
 8025740:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025744:	431a      	orrs	r2, r3
 8025746:	4b4b      	ldr	r3, [pc, #300]	; (8025874 <MX_LWIP_Init+0x28c>)
 8025748:	781b      	ldrb	r3, [r3, #0]
 802574a:	0619      	lsls	r1, r3, #24
 802574c:	4b49      	ldr	r3, [pc, #292]	; (8025874 <MX_LWIP_Init+0x28c>)
 802574e:	785b      	ldrb	r3, [r3, #1]
 8025750:	041b      	lsls	r3, r3, #16
 8025752:	4319      	orrs	r1, r3
 8025754:	4b47      	ldr	r3, [pc, #284]	; (8025874 <MX_LWIP_Init+0x28c>)
 8025756:	789b      	ldrb	r3, [r3, #2]
 8025758:	021b      	lsls	r3, r3, #8
 802575a:	430b      	orrs	r3, r1
 802575c:	4945      	ldr	r1, [pc, #276]	; (8025874 <MX_LWIP_Init+0x28c>)
 802575e:	78c9      	ldrb	r1, [r1, #3]
 8025760:	430b      	orrs	r3, r1
 8025762:	0e1b      	lsrs	r3, r3, #24
 8025764:	4313      	orrs	r3, r2
 8025766:	4a46      	ldr	r2, [pc, #280]	; (8025880 <MX_LWIP_Init+0x298>)
 8025768:	6013      	str	r3, [r2, #0]
			NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
	IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2],
 802576a:	4b43      	ldr	r3, [pc, #268]	; (8025878 <MX_LWIP_Init+0x290>)
 802576c:	781b      	ldrb	r3, [r3, #0]
 802576e:	061a      	lsls	r2, r3, #24
 8025770:	4b41      	ldr	r3, [pc, #260]	; (8025878 <MX_LWIP_Init+0x290>)
 8025772:	785b      	ldrb	r3, [r3, #1]
 8025774:	041b      	lsls	r3, r3, #16
 8025776:	431a      	orrs	r2, r3
 8025778:	4b3f      	ldr	r3, [pc, #252]	; (8025878 <MX_LWIP_Init+0x290>)
 802577a:	789b      	ldrb	r3, [r3, #2]
 802577c:	021b      	lsls	r3, r3, #8
 802577e:	4313      	orrs	r3, r2
 8025780:	4a3d      	ldr	r2, [pc, #244]	; (8025878 <MX_LWIP_Init+0x290>)
 8025782:	78d2      	ldrb	r2, [r2, #3]
 8025784:	4313      	orrs	r3, r2
 8025786:	061a      	lsls	r2, r3, #24
 8025788:	4b3b      	ldr	r3, [pc, #236]	; (8025878 <MX_LWIP_Init+0x290>)
 802578a:	781b      	ldrb	r3, [r3, #0]
 802578c:	0619      	lsls	r1, r3, #24
 802578e:	4b3a      	ldr	r3, [pc, #232]	; (8025878 <MX_LWIP_Init+0x290>)
 8025790:	785b      	ldrb	r3, [r3, #1]
 8025792:	041b      	lsls	r3, r3, #16
 8025794:	4319      	orrs	r1, r3
 8025796:	4b38      	ldr	r3, [pc, #224]	; (8025878 <MX_LWIP_Init+0x290>)
 8025798:	789b      	ldrb	r3, [r3, #2]
 802579a:	021b      	lsls	r3, r3, #8
 802579c:	430b      	orrs	r3, r1
 802579e:	4936      	ldr	r1, [pc, #216]	; (8025878 <MX_LWIP_Init+0x290>)
 80257a0:	78c9      	ldrb	r1, [r1, #3]
 80257a2:	430b      	orrs	r3, r1
 80257a4:	021b      	lsls	r3, r3, #8
 80257a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80257aa:	431a      	orrs	r2, r3
 80257ac:	4b32      	ldr	r3, [pc, #200]	; (8025878 <MX_LWIP_Init+0x290>)
 80257ae:	781b      	ldrb	r3, [r3, #0]
 80257b0:	0619      	lsls	r1, r3, #24
 80257b2:	4b31      	ldr	r3, [pc, #196]	; (8025878 <MX_LWIP_Init+0x290>)
 80257b4:	785b      	ldrb	r3, [r3, #1]
 80257b6:	041b      	lsls	r3, r3, #16
 80257b8:	4319      	orrs	r1, r3
 80257ba:	4b2f      	ldr	r3, [pc, #188]	; (8025878 <MX_LWIP_Init+0x290>)
 80257bc:	789b      	ldrb	r3, [r3, #2]
 80257be:	021b      	lsls	r3, r3, #8
 80257c0:	430b      	orrs	r3, r1
 80257c2:	492d      	ldr	r1, [pc, #180]	; (8025878 <MX_LWIP_Init+0x290>)
 80257c4:	78c9      	ldrb	r1, [r1, #3]
 80257c6:	430b      	orrs	r3, r1
 80257c8:	0a1b      	lsrs	r3, r3, #8
 80257ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80257ce:	431a      	orrs	r2, r3
 80257d0:	4b29      	ldr	r3, [pc, #164]	; (8025878 <MX_LWIP_Init+0x290>)
 80257d2:	781b      	ldrb	r3, [r3, #0]
 80257d4:	0619      	lsls	r1, r3, #24
 80257d6:	4b28      	ldr	r3, [pc, #160]	; (8025878 <MX_LWIP_Init+0x290>)
 80257d8:	785b      	ldrb	r3, [r3, #1]
 80257da:	041b      	lsls	r3, r3, #16
 80257dc:	4319      	orrs	r1, r3
 80257de:	4b26      	ldr	r3, [pc, #152]	; (8025878 <MX_LWIP_Init+0x290>)
 80257e0:	789b      	ldrb	r3, [r3, #2]
 80257e2:	021b      	lsls	r3, r3, #8
 80257e4:	430b      	orrs	r3, r1
 80257e6:	4924      	ldr	r1, [pc, #144]	; (8025878 <MX_LWIP_Init+0x290>)
 80257e8:	78c9      	ldrb	r1, [r1, #3]
 80257ea:	430b      	orrs	r3, r1
 80257ec:	0e1b      	lsrs	r3, r3, #24
 80257ee:	4313      	orrs	r3, r2
 80257f0:	4a24      	ldr	r2, [pc, #144]	; (8025884 <MX_LWIP_Init+0x29c>)
 80257f2:	6013      	str	r3, [r2, #0]
			GATEWAY_ADDRESS[3]);

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 80257f4:	4b24      	ldr	r3, [pc, #144]	; (8025888 <MX_LWIP_Init+0x2a0>)
 80257f6:	9302      	str	r3, [sp, #8]
 80257f8:	4b24      	ldr	r3, [pc, #144]	; (802588c <MX_LWIP_Init+0x2a4>)
 80257fa:	9301      	str	r3, [sp, #4]
 80257fc:	2300      	movs	r3, #0
 80257fe:	9300      	str	r3, [sp, #0]
 8025800:	4b20      	ldr	r3, [pc, #128]	; (8025884 <MX_LWIP_Init+0x29c>)
 8025802:	4a1f      	ldr	r2, [pc, #124]	; (8025880 <MX_LWIP_Init+0x298>)
 8025804:	491d      	ldr	r1, [pc, #116]	; (802587c <MX_LWIP_Init+0x294>)
 8025806:	4822      	ldr	r0, [pc, #136]	; (8025890 <MX_LWIP_Init+0x2a8>)
 8025808:	f7f6 fbda 	bl	801bfc0 <netif_add>
			&tcpip_input);

	uint32_t reg;
	do {
		HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &reg);
 802580c:	1d3b      	adds	r3, r7, #4
 802580e:	461a      	mov	r2, r3
 8025810:	2101      	movs	r1, #1
 8025812:	4820      	ldr	r0, [pc, #128]	; (8025894 <MX_LWIP_Init+0x2ac>)
 8025814:	f7eb fef5 	bl	8011602 <HAL_ETH_ReadPHYRegister>
		{
			if (reg & PHY_LINKED_STATUS) {
 8025818:	687b      	ldr	r3, [r7, #4]
 802581a:	f003 0304 	and.w	r3, r3, #4
 802581e:	2b00      	cmp	r3, #0
 8025820:	d003      	beq.n	802582a <MX_LWIP_Init+0x242>
				netif_set_link_up(&gnetif);
 8025822:	481b      	ldr	r0, [pc, #108]	; (8025890 <MX_LWIP_Init+0x2a8>)
 8025824:	f7f6 fd1a 	bl	801c25c <netif_set_link_up>
 8025828:	e002      	b.n	8025830 <MX_LWIP_Init+0x248>
			} else {
				netif_set_link_down(&gnetif);
 802582a:	4819      	ldr	r0, [pc, #100]	; (8025890 <MX_LWIP_Init+0x2a8>)
 802582c:	f7f6 fd39 	bl	801c2a2 <netif_set_link_down>
			}
		}
		osDelay(1000);
 8025830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8025834:	f7ee fe03 	bl	801443e <osDelay>
	} while (!(reg & PHY_LINKED_STATUS));
 8025838:	687b      	ldr	r3, [r7, #4]
 802583a:	f003 0304 	and.w	r3, r3, #4
 802583e:	2b00      	cmp	r3, #0
 8025840:	d0e4      	beq.n	802580c <MX_LWIP_Init+0x224>

	/* Registers the default network interface */
	netif_set_default(&gnetif);
 8025842:	4813      	ldr	r0, [pc, #76]	; (8025890 <MX_LWIP_Init+0x2a8>)
 8025844:	f7f6 fc94 	bl	801c170 <netif_set_default>

	if (netif_is_link_up(&gnetif)) {
 8025848:	4b11      	ldr	r3, [pc, #68]	; (8025890 <MX_LWIP_Init+0x2a8>)
 802584a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 802584e:	f003 0304 	and.w	r3, r3, #4
 8025852:	2b00      	cmp	r3, #0
 8025854:	d003      	beq.n	802585e <MX_LWIP_Init+0x276>
		/* When the netif is fully configured this function must be called */
		netif_set_up(&gnetif);
 8025856:	480e      	ldr	r0, [pc, #56]	; (8025890 <MX_LWIP_Init+0x2a8>)
 8025858:	f7f6 fc9a 	bl	801c190 <netif_set_up>
	}

	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 802585c:	e002      	b.n	8025864 <MX_LWIP_Init+0x27c>
		netif_set_down(&gnetif);
 802585e:	480c      	ldr	r0, [pc, #48]	; (8025890 <MX_LWIP_Init+0x2a8>)
 8025860:	f7f6 fcda 	bl	801c218 <netif_set_down>
}
 8025864:	bf00      	nop
 8025866:	3708      	adds	r7, #8
 8025868:	46bd      	mov	sp, r7
 802586a:	bd80      	pop	{r7, pc}
 802586c:	2000ecfc 	.word	0x2000ecfc
 8025870:	20011ed4 	.word	0x20011ed4
 8025874:	20011ed0 	.word	0x20011ed0
 8025878:	20011e98 	.word	0x20011e98
 802587c:	20011ecc 	.word	0x20011ecc
 8025880:	20011ed8 	.word	0x20011ed8
 8025884:	20011edc 	.word	0x20011edc
 8025888:	08019001 	.word	0x08019001
 802588c:	08023ef5 	.word	0x08023ef5
 8025890:	20011e9c 	.word	0x20011e9c
 8025894:	200105f0 	.word	0x200105f0

08025898 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8025898:	b580      	push	{r7, lr}
 802589a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 802589c:	f7ea fd78 	bl	8010390 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80258a0:	f000 f826 	bl	80258f0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_FLASH_Unlock();
 80258a4:	f7ec fab0 	bl	8011e08 <HAL_FLASH_Unlock>
	EE_Init();
 80258a8:	f7fd fc40 	bl	802312c <EE_Init>
	FlashInit();
 80258ac:	f7fd fa78 	bl	8022da0 <FlashInit>
	ProtocolSettingsInit(&hprot);
 80258b0:	480d      	ldr	r0, [pc, #52]	; (80258e8 <main+0x50>)
 80258b2:	f000 fcd9 	bl	8026268 <ProtocolSettingsInit>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80258b6:	f7fe fd33 	bl	8024320 <MX_GPIO_Init>
	MX_DMA_Init();
 80258ba:	f7fd fc01 	bl	80230c0 <MX_DMA_Init>
	MX_UART5_Init();
 80258be:	f002 f949 	bl	8027b54 <MX_UART5_Init>
	MX_TIM8_Init();
 80258c2:	f001 fb95 	bl	8026ff0 <MX_TIM8_Init>
	MX_TIM7_Init();
 80258c6:	f001 fb61 	bl	8026f8c <MX_TIM7_Init>
	MX_USART1_UART_Init();
 80258ca:	f002 f96f 	bl	8027bac <MX_USART1_UART_Init>
	MX_IWDG_Init();
 80258ce:	f7fe fda3 	bl	8024418 <MX_IWDG_Init>

	/* USER CODE BEGIN 2 */

#ifdef LOG_ON
	LogInit(&huart1);
 80258d2:	4806      	ldr	r0, [pc, #24]	; (80258ec <main+0x54>)
 80258d4:	f7ff fe02 	bl	80254dc <LogInit>
#endif /* #ifdef LOG_ON  */

#ifdef TESTS_ON
	RunAllTests();
 80258d8:	f002 fd52 	bl	8028380 <RunAllTests>
#endif /* #ifdef TESTS_ON */

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 80258dc:	f7fe fbbc 	bl	8024058 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80258e0:	f7ee fd4a 	bl	8014378 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80258e4:	e7fe      	b.n	80258e4 <main+0x4c>
 80258e6:	bf00      	nop
 80258e8:	20011ef4 	.word	0x20011ef4
 80258ec:	200120ec 	.word	0x200120ec

080258f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80258f0:	b580      	push	{r7, lr}
 80258f2:	b094      	sub	sp, #80	; 0x50
 80258f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80258f6:	f107 0320 	add.w	r3, r7, #32
 80258fa:	2230      	movs	r2, #48	; 0x30
 80258fc:	2100      	movs	r1, #0
 80258fe:	4618      	mov	r0, r3
 8025900:	f002 fdc0 	bl	8028484 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8025904:	f107 030c 	add.w	r3, r7, #12
 8025908:	2200      	movs	r2, #0
 802590a:	601a      	str	r2, [r3, #0]
 802590c:	605a      	str	r2, [r3, #4]
 802590e:	609a      	str	r2, [r3, #8]
 8025910:	60da      	str	r2, [r3, #12]
 8025912:	611a      	str	r2, [r3, #16]

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8025914:	2300      	movs	r3, #0
 8025916:	60bb      	str	r3, [r7, #8]
 8025918:	4a29      	ldr	r2, [pc, #164]	; (80259c0 <SystemClock_Config+0xd0>)
 802591a:	4b29      	ldr	r3, [pc, #164]	; (80259c0 <SystemClock_Config+0xd0>)
 802591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802591e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8025922:	6413      	str	r3, [r2, #64]	; 0x40
 8025924:	4b26      	ldr	r3, [pc, #152]	; (80259c0 <SystemClock_Config+0xd0>)
 8025926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802592c:	60bb      	str	r3, [r7, #8]
 802592e:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8025930:	2300      	movs	r3, #0
 8025932:	607b      	str	r3, [r7, #4]
 8025934:	4a23      	ldr	r2, [pc, #140]	; (80259c4 <SystemClock_Config+0xd4>)
 8025936:	4b23      	ldr	r3, [pc, #140]	; (80259c4 <SystemClock_Config+0xd4>)
 8025938:	681b      	ldr	r3, [r3, #0]
 802593a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802593e:	6013      	str	r3, [r2, #0]
 8025940:	4b20      	ldr	r3, [pc, #128]	; (80259c4 <SystemClock_Config+0xd4>)
 8025942:	681b      	ldr	r3, [r3, #0]
 8025944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025948:	607b      	str	r3, [r7, #4]
 802594a:	687b      	ldr	r3, [r7, #4]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 802594c:	2309      	movs	r3, #9
 802594e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8025950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8025954:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8025956:	2301      	movs	r3, #1
 8025958:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802595a:	2302      	movs	r3, #2
 802595c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 802595e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8025962:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8025964:	2319      	movs	r3, #25
 8025966:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8025968:	f44f 73a8 	mov.w	r3, #336	; 0x150
 802596c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802596e:	2302      	movs	r3, #2
 8025970:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8025972:	2305      	movs	r3, #5
 8025974:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8025976:	f107 0320 	add.w	r3, r7, #32
 802597a:	4618      	mov	r0, r3
 802597c:	f7ec fe88 	bl	8012690 <HAL_RCC_OscConfig>
 8025980:	4603      	mov	r3, r0
 8025982:	2b00      	cmp	r3, #0
 8025984:	d001      	beq.n	802598a <SystemClock_Config+0x9a>
		Error_Handler();
 8025986:	f000 f851 	bl	8025a2c <Error_Handler>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 802598a:	230f      	movs	r3, #15
 802598c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802598e:	2302      	movs	r3, #2
 8025990:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8025992:	2300      	movs	r3, #0
 8025994:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8025996:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802599a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802599c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80259a0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80259a2:	f107 030c 	add.w	r3, r7, #12
 80259a6:	2105      	movs	r1, #5
 80259a8:	4618      	mov	r0, r3
 80259aa:	f7ed f8b3 	bl	8012b14 <HAL_RCC_ClockConfig>
 80259ae:	4603      	mov	r3, r0
 80259b0:	2b00      	cmp	r3, #0
 80259b2:	d001      	beq.n	80259b8 <SystemClock_Config+0xc8>
		Error_Handler();
 80259b4:	f000 f83a 	bl	8025a2c <Error_Handler>
	}
}
 80259b8:	bf00      	nop
 80259ba:	3750      	adds	r7, #80	; 0x50
 80259bc:	46bd      	mov	sp, r7
 80259be:	bd80      	pop	{r7, pc}
 80259c0:	40023800 	.word	0x40023800
 80259c4:	40007000 	.word	0x40007000

080259c8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80259c8:	b580      	push	{r7, lr}
 80259ca:	b082      	sub	sp, #8
 80259cc:	af00      	add	r7, sp, #0
 80259ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80259d0:	687b      	ldr	r3, [r7, #4]
 80259d2:	681b      	ldr	r3, [r3, #0]
 80259d4:	4a10      	ldr	r2, [pc, #64]	; (8025a18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80259d6:	4293      	cmp	r3, r2
 80259d8:	d101      	bne.n	80259de <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80259da:	f7ea fcfb 	bl	80103d4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM8) {
 80259de:	687b      	ldr	r3, [r7, #4]
 80259e0:	681b      	ldr	r3, [r3, #0]
 80259e2:	4a0e      	ldr	r2, [pc, #56]	; (8025a1c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80259e4:	4293      	cmp	r3, r2
 80259e6:	d101      	bne.n	80259ec <HAL_TIM_PeriodElapsedCallback+0x24>
		CommandProcess();
 80259e8:	f000 f824 	bl	8025a34 <CommandProcess>
	}
	if (htim->Instance == TIM7) {
 80259ec:	687b      	ldr	r3, [r7, #4]
 80259ee:	681b      	ldr	r3, [r3, #0]
 80259f0:	4a0b      	ldr	r2, [pc, #44]	; (8025a20 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80259f2:	4293      	cmp	r3, r2
 80259f4:	d10b      	bne.n	8025a0e <HAL_TIM_PeriodElapsedCallback+0x46>
		__HAL_TIM_SET_COUNTER(&htim7, 0x00U);
 80259f6:	4b0b      	ldr	r3, [pc, #44]	; (8025a24 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80259f8:	681b      	ldr	r3, [r3, #0]
 80259fa:	2200      	movs	r2, #0
 80259fc:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim7);
 80259fe:	4809      	ldr	r0, [pc, #36]	; (8025a24 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8025a00:	f7ed fab1 	bl	8012f66 <HAL_TIM_Base_Start_IT>
		ulHighFrequencyTimerTicks++;
 8025a04:	4b08      	ldr	r3, [pc, #32]	; (8025a28 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8025a06:	681b      	ldr	r3, [r3, #0]
 8025a08:	3301      	adds	r3, #1
 8025a0a:	4a07      	ldr	r2, [pc, #28]	; (8025a28 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8025a0c:	6013      	str	r3, [r2, #0]
	}
	/* USER CODE END Callback 1 */
}
 8025a0e:	bf00      	nop
 8025a10:	3708      	adds	r7, #8
 8025a12:	46bd      	mov	sp, r7
 8025a14:	bd80      	pop	{r7, pc}
 8025a16:	bf00      	nop
 8025a18:	40010000 	.word	0x40010000
 8025a1c:	40010400 	.word	0x40010400
 8025a20:	40001400 	.word	0x40001400
 8025a24:	20011f8c 	.word	0x20011f8c
 8025a28:	2000953c 	.word	0x2000953c

08025a2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8025a2c:	b480      	push	{r7}
 8025a2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	for (;;) {
 8025a30:	e7fe      	b.n	8025a30 <Error_Handler+0x4>
	...

08025a34 <CommandProcess>:
extern xQueueHandle frames_queue;
extern xQueueHandle cleaner_queue;

profibus_MPI_t hprot;

inline void CommandProcess() {
 8025a34:	b580      	push	{r7, lr}
 8025a36:	b082      	sub	sp, #8
 8025a38:	af00      	add	r7, sp, #0
	static portBASE_TYPE xHigherPriorityTaskWoken;
	uint32_t len;
	xHigherPriorityTaskWoken = pdFALSE;
 8025a3a:	4b13      	ldr	r3, [pc, #76]	; (8025a88 <CommandProcess+0x54>)
 8025a3c:	2200      	movs	r2, #0
 8025a3e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim8);
 8025a40:	4812      	ldr	r0, [pc, #72]	; (8025a8c <CommandProcess+0x58>)
 8025a42:	f7ed faab 	bl	8012f9c <HAL_TIM_Base_Stop_IT>
	len = CB_Data_Length(&inbuf_UART);
 8025a46:	4812      	ldr	r0, [pc, #72]	; (8025a90 <CommandProcess+0x5c>)
 8025a48:	f7fd f94e 	bl	8022ce8 <CB_Data_Length>
 8025a4c:	4603      	mov	r3, r0
 8025a4e:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR(frames_queue, &len, &xHigherPriorityTaskWoken);
 8025a50:	4b10      	ldr	r3, [pc, #64]	; (8025a94 <CommandProcess+0x60>)
 8025a52:	6818      	ldr	r0, [r3, #0]
 8025a54:	1d39      	adds	r1, r7, #4
 8025a56:	2300      	movs	r3, #0
 8025a58:	4a0b      	ldr	r2, [pc, #44]	; (8025a88 <CommandProcess+0x54>)
 8025a5a:	f7ef fea5 	bl	80157a8 <xQueueGenericSendFromISR>
	if (xHigherPriorityTaskWoken == pdTRUE) {
 8025a5e:	4b0a      	ldr	r3, [pc, #40]	; (8025a88 <CommandProcess+0x54>)
 8025a60:	681b      	ldr	r3, [r3, #0]
 8025a62:	2b01      	cmp	r3, #1
 8025a64:	d10b      	bne.n	8025a7e <CommandProcess+0x4a>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8025a66:	4b08      	ldr	r3, [pc, #32]	; (8025a88 <CommandProcess+0x54>)
 8025a68:	681b      	ldr	r3, [r3, #0]
 8025a6a:	2b00      	cmp	r3, #0
 8025a6c:	d007      	beq.n	8025a7e <CommandProcess+0x4a>
 8025a6e:	4b0a      	ldr	r3, [pc, #40]	; (8025a98 <CommandProcess+0x64>)
 8025a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8025a74:	601a      	str	r2, [r3, #0]
 8025a76:	f3bf 8f4f 	dsb	sy
 8025a7a:	f3bf 8f6f 	isb	sy
	}
}
 8025a7e:	bf00      	nop
 8025a80:	3708      	adds	r7, #8
 8025a82:	46bd      	mov	sp, r7
 8025a84:	bd80      	pop	{r7, pc}
 8025a86:	bf00      	nop
 8025a88:	20009da0 	.word	0x20009da0
 8025a8c:	20011f50 	.word	0x20011f50
 8025a90:	20011ee4 	.word	0x20011ee4
 8025a94:	20011e0c 	.word	0x20011e0c
 8025a98:	e000ed04 	.word	0xe000ed04

08025a9c <SendAckMsg>:

void SendAckMsg(void) {
 8025a9c:	b580      	push	{r7, lr}
 8025a9e:	b082      	sub	sp, #8
 8025aa0:	af00      	add	r7, sp, #0
	uint8_t * temp;
	temp = (uint8_t*) pvPortMalloc(1);
 8025aa2:	2001      	movs	r0, #1
 8025aa4:	f7ef fa1c 	bl	8014ee0 <pvPortMalloc>
 8025aa8:	6078      	str	r0, [r7, #4]
	*temp = 0xE5;
 8025aaa:	687b      	ldr	r3, [r7, #4]
 8025aac:	22e5      	movs	r2, #229	; 0xe5
 8025aae:	701a      	strb	r2, [r3, #0]
	TRANS_ON();
 8025ab0:	2201      	movs	r2, #1
 8025ab2:	2101      	movs	r1, #1
 8025ab4:	4805      	ldr	r0, [pc, #20]	; (8025acc <SendAckMsg+0x30>)
 8025ab6:	f7ec fdaf 	bl	8012618 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, temp, 1);
 8025aba:	2201      	movs	r2, #1
 8025abc:	6879      	ldr	r1, [r7, #4]
 8025abe:	4804      	ldr	r0, [pc, #16]	; (8025ad0 <SendAckMsg+0x34>)
 8025ac0:	f7ed fee8 	bl	8013894 <HAL_UART_Transmit_DMA>
}
 8025ac4:	bf00      	nop
 8025ac6:	3708      	adds	r7, #8
 8025ac8:	46bd      	mov	sp, r7
 8025aca:	bd80      	pop	{r7, pc}
 8025acc:	40021000 	.word	0x40021000
 8025ad0:	200120ac 	.word	0x200120ac

08025ad4 <SendClosemMsg>:

void SendClosemMsg(uint8_t to, uint8_t from) {
 8025ad4:	b590      	push	{r4, r7, lr}
 8025ad6:	b087      	sub	sp, #28
 8025ad8:	af00      	add	r7, sp, #0
 8025ada:	4603      	mov	r3, r0
 8025adc:	460a      	mov	r2, r1
 8025ade:	71fb      	strb	r3, [r7, #7]
 8025ae0:	4613      	mov	r3, r2
 8025ae2:	71bb      	strb	r3, [r7, #6]
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = 12;
 8025ae4:	230c      	movs	r3, #12
 8025ae6:	75fb      	strb	r3, [r7, #23]
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 8025ae8:	7dfb      	ldrb	r3, [r7, #23]
 8025aea:	4618      	mov	r0, r3
 8025aec:	f7ef f9f8 	bl	8014ee0 <pvPortMalloc>
 8025af0:	6138      	str	r0, [r7, #16]
	if (msg_ptr == NULL) {
 8025af2:	693b      	ldr	r3, [r7, #16]
 8025af4:	2b00      	cmp	r3, #0
 8025af6:	d106      	bne.n	8025b06 <SendClosemMsg+0x32>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 8025af8:	4a31      	ldr	r2, [pc, #196]	; (8025bc0 <SendClosemMsg+0xec>)
 8025afa:	2101      	movs	r1, #1
 8025afc:	2000      	movs	r0, #0
 8025afe:	f7ff fd05 	bl	802550c <LogText__>
				"Request buffer allocation error.");
		Error_Handler();
 8025b02:	f7ff ff93 	bl	8025a2c <Error_Handler>
	}
	tmp_ptr = msg_ptr;
 8025b06:	693b      	ldr	r3, [r7, #16]
 8025b08:	60fb      	str	r3, [r7, #12]
	*tmp_ptr++ = 0x68;
 8025b0a:	68fb      	ldr	r3, [r7, #12]
 8025b0c:	1c5a      	adds	r2, r3, #1
 8025b0e:	60fa      	str	r2, [r7, #12]
 8025b10:	2268      	movs	r2, #104	; 0x68
 8025b12:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x06;
 8025b14:	68fb      	ldr	r3, [r7, #12]
 8025b16:	1c5a      	adds	r2, r3, #1
 8025b18:	60fa      	str	r2, [r7, #12]
 8025b1a:	2206      	movs	r2, #6
 8025b1c:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x06;
 8025b1e:	68fb      	ldr	r3, [r7, #12]
 8025b20:	1c5a      	adds	r2, r3, #1
 8025b22:	60fa      	str	r2, [r7, #12]
 8025b24:	2206      	movs	r2, #6
 8025b26:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x68;
 8025b28:	68fb      	ldr	r3, [r7, #12]
 8025b2a:	1c5a      	adds	r2, r3, #1
 8025b2c:	60fa      	str	r2, [r7, #12]
 8025b2e:	2268      	movs	r2, #104	; 0x68
 8025b30:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = to | 0x80;
 8025b32:	68fb      	ldr	r3, [r7, #12]
 8025b34:	1c5a      	adds	r2, r3, #1
 8025b36:	60fa      	str	r2, [r7, #12]
 8025b38:	79fa      	ldrb	r2, [r7, #7]
 8025b3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8025b3e:	b2d2      	uxtb	r2, r2
 8025b40:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = from | 0x80;
 8025b42:	68fb      	ldr	r3, [r7, #12]
 8025b44:	1c5a      	adds	r2, r3, #1
 8025b46:	60fa      	str	r2, [r7, #12]
 8025b48:	79ba      	ldrb	r2, [r7, #6]
 8025b4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8025b4e:	b2d2      	uxtb	r2, r2
 8025b50:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x5C;
 8025b52:	68fb      	ldr	r3, [r7, #12]
 8025b54:	1c5a      	adds	r2, r3, #1
 8025b56:	60fa      	str	r2, [r7, #12]
 8025b58:	225c      	movs	r2, #92	; 0x5c
 8025b5a:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = hprot.master_SAP;
 8025b5c:	68fb      	ldr	r3, [r7, #12]
 8025b5e:	1c5a      	adds	r2, r3, #1
 8025b60:	60fa      	str	r2, [r7, #12]
 8025b62:	4a18      	ldr	r2, [pc, #96]	; (8025bc4 <SendClosemMsg+0xf0>)
 8025b64:	7c52      	ldrb	r2, [r2, #17]
 8025b66:	b2d2      	uxtb	r2, r2
 8025b68:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x1F;
 8025b6a:	68fb      	ldr	r3, [r7, #12]
 8025b6c:	1c5a      	adds	r2, r3, #1
 8025b6e:	60fa      	str	r2, [r7, #12]
 8025b70:	221f      	movs	r2, #31
 8025b72:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x80;
 8025b74:	68fb      	ldr	r3, [r7, #12]
 8025b76:	1c5a      	adds	r2, r3, #1
 8025b78:	60fa      	str	r2, [r7, #12]
 8025b7a:	2280      	movs	r2, #128	; 0x80
 8025b7c:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, 6);
 8025b7e:	68fc      	ldr	r4, [r7, #12]
 8025b80:	1c63      	adds	r3, r4, #1
 8025b82:	60fb      	str	r3, [r7, #12]
 8025b84:	693b      	ldr	r3, [r7, #16]
 8025b86:	3304      	adds	r3, #4
 8025b88:	2106      	movs	r1, #6
 8025b8a:	4618      	mov	r0, r3
 8025b8c:	f000 fb9a 	bl	80262c4 <CalculateFCS>
 8025b90:	4603      	mov	r3, r0
 8025b92:	7023      	strb	r3, [r4, #0]
	*tmp_ptr = 0x16;
 8025b94:	68fb      	ldr	r3, [r7, #12]
 8025b96:	2216      	movs	r2, #22
 8025b98:	701a      	strb	r2, [r3, #0]
	TRANS_ON();
 8025b9a:	2201      	movs	r2, #1
 8025b9c:	2101      	movs	r1, #1
 8025b9e:	480a      	ldr	r0, [pc, #40]	; (8025bc8 <SendClosemMsg+0xf4>)
 8025ba0:	f7ec fd3a 	bl	8012618 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 8025ba4:	7dfb      	ldrb	r3, [r7, #23]
 8025ba6:	b29b      	uxth	r3, r3
 8025ba8:	461a      	mov	r2, r3
 8025baa:	6939      	ldr	r1, [r7, #16]
 8025bac:	4807      	ldr	r0, [pc, #28]	; (8025bcc <SendClosemMsg+0xf8>)
 8025bae:	f7ed fe71 	bl	8013894 <HAL_UART_Transmit_DMA>
	hprot.conn_stat = CONN_CLOSED;
 8025bb2:	4b04      	ldr	r3, [pc, #16]	; (8025bc4 <SendClosemMsg+0xf0>)
 8025bb4:	2205      	movs	r2, #5
 8025bb6:	70da      	strb	r2, [r3, #3]
}
 8025bb8:	bf00      	nop
 8025bba:	371c      	adds	r7, #28
 8025bbc:	46bd      	mov	sp, r7
 8025bbe:	bd90      	pop	{r4, r7, pc}
 8025bc0:	0802b744 	.word	0x0802b744
 8025bc4:	20011ef4 	.word	0x20011ef4
 8025bc8:	40021000 	.word	0x40021000
 8025bcc:	200120ac 	.word	0x200120ac

08025bd0 <SendConfirmMsg>:

void SendConfirmMsg(uint8_t to, uint8_t from, uint8_t size, uint8_t func) {
 8025bd0:	b590      	push	{r4, r7, lr}
 8025bd2:	b087      	sub	sp, #28
 8025bd4:	af00      	add	r7, sp, #0
 8025bd6:	4604      	mov	r4, r0
 8025bd8:	4608      	mov	r0, r1
 8025bda:	4611      	mov	r1, r2
 8025bdc:	461a      	mov	r2, r3
 8025bde:	4623      	mov	r3, r4
 8025be0:	71fb      	strb	r3, [r7, #7]
 8025be2:	4603      	mov	r3, r0
 8025be4:	71bb      	strb	r3, [r7, #6]
 8025be6:	460b      	mov	r3, r1
 8025be8:	717b      	strb	r3, [r7, #5]
 8025bea:	4613      	mov	r3, r2
 8025bec:	713b      	strb	r3, [r7, #4]
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = size + 6;
 8025bee:	797b      	ldrb	r3, [r7, #5]
 8025bf0:	3306      	adds	r3, #6
 8025bf2:	74fb      	strb	r3, [r7, #19]
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 8025bf4:	7cfb      	ldrb	r3, [r7, #19]
 8025bf6:	4618      	mov	r0, r3
 8025bf8:	f7ef f972 	bl	8014ee0 <pvPortMalloc>
 8025bfc:	60f8      	str	r0, [r7, #12]
	if (msg_ptr == NULL) {
 8025bfe:	68fb      	ldr	r3, [r7, #12]
 8025c00:	2b00      	cmp	r3, #0
 8025c02:	d106      	bne.n	8025c12 <SendConfirmMsg+0x42>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 8025c04:	4a45      	ldr	r2, [pc, #276]	; (8025d1c <SendConfirmMsg+0x14c>)
 8025c06:	2101      	movs	r1, #1
 8025c08:	2000      	movs	r0, #0
 8025c0a:	f7ff fc7f 	bl	802550c <LogText__>
				"Request buffer allocation error.");
		Error_Handler();
 8025c0e:	f7ff ff0d 	bl	8025a2c <Error_Handler>
	}
	tmp_ptr = msg_ptr;
 8025c12:	68fb      	ldr	r3, [r7, #12]
 8025c14:	617b      	str	r3, [r7, #20]
	*tmp_ptr++ = 0x68;
 8025c16:	697b      	ldr	r3, [r7, #20]
 8025c18:	1c5a      	adds	r2, r3, #1
 8025c1a:	617a      	str	r2, [r7, #20]
 8025c1c:	2268      	movs	r2, #104	; 0x68
 8025c1e:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = size;
 8025c20:	697b      	ldr	r3, [r7, #20]
 8025c22:	1c5a      	adds	r2, r3, #1
 8025c24:	617a      	str	r2, [r7, #20]
 8025c26:	797a      	ldrb	r2, [r7, #5]
 8025c28:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = size;
 8025c2a:	697b      	ldr	r3, [r7, #20]
 8025c2c:	1c5a      	adds	r2, r3, #1
 8025c2e:	617a      	str	r2, [r7, #20]
 8025c30:	797a      	ldrb	r2, [r7, #5]
 8025c32:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x68;
 8025c34:	697b      	ldr	r3, [r7, #20]
 8025c36:	1c5a      	adds	r2, r3, #1
 8025c38:	617a      	str	r2, [r7, #20]
 8025c3a:	2268      	movs	r2, #104	; 0x68
 8025c3c:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = to | 0x80;
 8025c3e:	697b      	ldr	r3, [r7, #20]
 8025c40:	1c5a      	adds	r2, r3, #1
 8025c42:	617a      	str	r2, [r7, #20]
 8025c44:	79fa      	ldrb	r2, [r7, #7]
 8025c46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8025c4a:	b2d2      	uxtb	r2, r2
 8025c4c:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = from | 0x80;
 8025c4e:	697b      	ldr	r3, [r7, #20]
 8025c50:	1c5a      	adds	r2, r3, #1
 8025c52:	617a      	str	r2, [r7, #20]
 8025c54:	79ba      	ldrb	r2, [r7, #6]
 8025c56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8025c5a:	b2d2      	uxtb	r2, r2
 8025c5c:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = func;
 8025c5e:	697b      	ldr	r3, [r7, #20]
 8025c60:	1c5a      	adds	r2, r3, #1
 8025c62:	617a      	str	r2, [r7, #20]
 8025c64:	793a      	ldrb	r2, [r7, #4]
 8025c66:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = hprot.master_SAP;
 8025c68:	697b      	ldr	r3, [r7, #20]
 8025c6a:	1c5a      	adds	r2, r3, #1
 8025c6c:	617a      	str	r2, [r7, #20]
 8025c6e:	4a2c      	ldr	r2, [pc, #176]	; (8025d20 <SendConfirmMsg+0x150>)
 8025c70:	7c52      	ldrb	r2, [r2, #17]
 8025c72:	b2d2      	uxtb	r2, r2
 8025c74:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x1F;
 8025c76:	697b      	ldr	r3, [r7, #20]
 8025c78:	1c5a      	adds	r2, r3, #1
 8025c7a:	617a      	str	r2, [r7, #20]
 8025c7c:	221f      	movs	r2, #31
 8025c7e:	701a      	strb	r2, [r3, #0]
	if (size == 0x07) {
 8025c80:	797b      	ldrb	r3, [r7, #5]
 8025c82:	2b07      	cmp	r3, #7
 8025c84:	d10a      	bne.n	8025c9c <SendConfirmMsg+0xcc>
		*tmp_ptr++ = 0x05;
 8025c86:	697b      	ldr	r3, [r7, #20]
 8025c88:	1c5a      	adds	r2, r3, #1
 8025c8a:	617a      	str	r2, [r7, #20]
 8025c8c:	2205      	movs	r2, #5
 8025c8e:	701a      	strb	r2, [r3, #0]
		*tmp_ptr++ = 0x07;
 8025c90:	697b      	ldr	r3, [r7, #20]
 8025c92:	1c5a      	adds	r2, r3, #1
 8025c94:	617a      	str	r2, [r7, #20]
 8025c96:	2207      	movs	r2, #7
 8025c98:	701a      	strb	r2, [r3, #0]
 8025c9a:	e01d      	b.n	8025cd8 <SendConfirmMsg+0x108>
	} else {
		*tmp_ptr++ = 0xB0;
 8025c9c:	697b      	ldr	r3, [r7, #20]
 8025c9e:	1c5a      	adds	r2, r3, #1
 8025ca0:	617a      	str	r2, [r7, #20]
 8025ca2:	22b0      	movs	r2, #176	; 0xb0
 8025ca4:	701a      	strb	r2, [r3, #0]
		*tmp_ptr++ = 0x07;
 8025ca6:	697b      	ldr	r3, [r7, #20]
 8025ca8:	1c5a      	adds	r2, r3, #1
 8025caa:	617a      	str	r2, [r7, #20]
 8025cac:	2207      	movs	r2, #7
 8025cae:	701a      	strb	r2, [r3, #0]
		*tmp_ptr++ = hprot.req_num++;
 8025cb0:	697b      	ldr	r3, [r7, #20]
 8025cb2:	1c5a      	adds	r2, r3, #1
 8025cb4:	617a      	str	r2, [r7, #20]
 8025cb6:	4a1a      	ldr	r2, [pc, #104]	; (8025d20 <SendConfirmMsg+0x150>)
 8025cb8:	7cd2      	ldrb	r2, [r2, #19]
 8025cba:	1c51      	adds	r1, r2, #1
 8025cbc:	b2c8      	uxtb	r0, r1
 8025cbe:	4918      	ldr	r1, [pc, #96]	; (8025d20 <SendConfirmMsg+0x150>)
 8025cc0:	74c8      	strb	r0, [r1, #19]
 8025cc2:	701a      	strb	r2, [r3, #0]
		if (hprot.req_num == 0) {
 8025cc4:	4b16      	ldr	r3, [pc, #88]	; (8025d20 <SendConfirmMsg+0x150>)
 8025cc6:	7cdb      	ldrb	r3, [r3, #19]
 8025cc8:	2b00      	cmp	r3, #0
 8025cca:	d105      	bne.n	8025cd8 <SendConfirmMsg+0x108>
			hprot.req_num++;
 8025ccc:	4b14      	ldr	r3, [pc, #80]	; (8025d20 <SendConfirmMsg+0x150>)
 8025cce:	7cdb      	ldrb	r3, [r3, #19]
 8025cd0:	3301      	adds	r3, #1
 8025cd2:	b2da      	uxtb	r2, r3
 8025cd4:	4b12      	ldr	r3, [pc, #72]	; (8025d20 <SendConfirmMsg+0x150>)
 8025cd6:	74da      	strb	r2, [r3, #19]
		}
	}
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, size);
 8025cd8:	697c      	ldr	r4, [r7, #20]
 8025cda:	1c63      	adds	r3, r4, #1
 8025cdc:	617b      	str	r3, [r7, #20]
 8025cde:	68fb      	ldr	r3, [r7, #12]
 8025ce0:	3304      	adds	r3, #4
 8025ce2:	797a      	ldrb	r2, [r7, #5]
 8025ce4:	4611      	mov	r1, r2
 8025ce6:	4618      	mov	r0, r3
 8025ce8:	f000 faec 	bl	80262c4 <CalculateFCS>
 8025cec:	4603      	mov	r3, r0
 8025cee:	7023      	strb	r3, [r4, #0]
	*tmp_ptr = 0x16;
 8025cf0:	697b      	ldr	r3, [r7, #20]
 8025cf2:	2216      	movs	r2, #22
 8025cf4:	701a      	strb	r2, [r3, #0]
	hprot.confirm_status = CONF_SENT;
 8025cf6:	4b0a      	ldr	r3, [pc, #40]	; (8025d20 <SendConfirmMsg+0x150>)
 8025cf8:	2202      	movs	r2, #2
 8025cfa:	709a      	strb	r2, [r3, #2]
	TRANS_ON();
 8025cfc:	2201      	movs	r2, #1
 8025cfe:	2101      	movs	r1, #1
 8025d00:	4808      	ldr	r0, [pc, #32]	; (8025d24 <SendConfirmMsg+0x154>)
 8025d02:	f7ec fc89 	bl	8012618 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 8025d06:	7cfb      	ldrb	r3, [r7, #19]
 8025d08:	b29b      	uxth	r3, r3
 8025d0a:	461a      	mov	r2, r3
 8025d0c:	68f9      	ldr	r1, [r7, #12]
 8025d0e:	4806      	ldr	r0, [pc, #24]	; (8025d28 <SendConfirmMsg+0x158>)
 8025d10:	f7ed fdc0 	bl	8013894 <HAL_UART_Transmit_DMA>
}
 8025d14:	bf00      	nop
 8025d16:	371c      	adds	r7, #28
 8025d18:	46bd      	mov	sp, r7
 8025d1a:	bd90      	pop	{r4, r7, pc}
 8025d1c:	0802b744 	.word	0x0802b744
 8025d20:	20011ef4 	.word	0x20011ef4
 8025d24:	40021000 	.word	0x40021000
 8025d28:	200120ac 	.word	0x200120ac

08025d2c <SendTokenMsg>:

void SendTokenMsg(uint8_t to, uint8_t from) {
 8025d2c:	b580      	push	{r7, lr}
 8025d2e:	b084      	sub	sp, #16
 8025d30:	af00      	add	r7, sp, #0
 8025d32:	4603      	mov	r3, r0
 8025d34:	460a      	mov	r2, r1
 8025d36:	71fb      	strb	r3, [r7, #7]
 8025d38:	4613      	mov	r3, r2
 8025d3a:	71bb      	strb	r3, [r7, #6]
	uint8_t * temp;
	static int cnt = 100;
	temp = (uint8_t*) pvPortMalloc(3);
 8025d3c:	2003      	movs	r0, #3
 8025d3e:	f7ef f8cf 	bl	8014ee0 <pvPortMalloc>
 8025d42:	60f8      	str	r0, [r7, #12]
	if (temp == NULL) {
 8025d44:	68fb      	ldr	r3, [r7, #12]
 8025d46:	2b00      	cmp	r3, #0
 8025d48:	d101      	bne.n	8025d4e <SendTokenMsg+0x22>
		Error_Handler();
 8025d4a:	f7ff fe6f 	bl	8025a2c <Error_Handler>
	}
	temp[0] = 0xDC;
 8025d4e:	68fb      	ldr	r3, [r7, #12]
 8025d50:	22dc      	movs	r2, #220	; 0xdc
 8025d52:	701a      	strb	r2, [r3, #0]
	temp[1] = to;
 8025d54:	68fb      	ldr	r3, [r7, #12]
 8025d56:	3301      	adds	r3, #1
 8025d58:	79fa      	ldrb	r2, [r7, #7]
 8025d5a:	701a      	strb	r2, [r3, #0]
	temp[2] = from;
 8025d5c:	68fb      	ldr	r3, [r7, #12]
 8025d5e:	3302      	adds	r3, #2
 8025d60:	79ba      	ldrb	r2, [r7, #6]
 8025d62:	701a      	strb	r2, [r3, #0]
	cnt--;
 8025d64:	4b16      	ldr	r3, [pc, #88]	; (8025dc0 <SendTokenMsg+0x94>)
 8025d66:	681b      	ldr	r3, [r3, #0]
 8025d68:	3b01      	subs	r3, #1
 8025d6a:	4a15      	ldr	r2, [pc, #84]	; (8025dc0 <SendTokenMsg+0x94>)
 8025d6c:	6013      	str	r3, [r2, #0]
	if (cnt == 0) {
 8025d6e:	4b14      	ldr	r3, [pc, #80]	; (8025dc0 <SendTokenMsg+0x94>)
 8025d70:	681b      	ldr	r3, [r3, #0]
 8025d72:	2b00      	cmp	r3, #0
 8025d74:	d107      	bne.n	8025d86 <SendTokenMsg+0x5a>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8025d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8025d7a:	4812      	ldr	r0, [pc, #72]	; (8025dc4 <SendTokenMsg+0x98>)
 8025d7c:	f7ec fc65 	bl	801264a <HAL_GPIO_TogglePin>
		cnt = 100;
 8025d80:	4b0f      	ldr	r3, [pc, #60]	; (8025dc0 <SendTokenMsg+0x94>)
 8025d82:	2264      	movs	r2, #100	; 0x64
 8025d84:	601a      	str	r2, [r3, #0]
	}
	TRANS_ON();
 8025d86:	2201      	movs	r2, #1
 8025d88:	2101      	movs	r1, #1
 8025d8a:	480e      	ldr	r0, [pc, #56]	; (8025dc4 <SendTokenMsg+0x98>)
 8025d8c:	f7ec fc44 	bl	8012618 <HAL_GPIO_WritePin>
	if (HAL_UART_Transmit_DMA(&huart5, temp, 3) == HAL_BUSY) {
 8025d90:	2203      	movs	r2, #3
 8025d92:	68f9      	ldr	r1, [r7, #12]
 8025d94:	480c      	ldr	r0, [pc, #48]	; (8025dc8 <SendTokenMsg+0x9c>)
 8025d96:	f7ed fd7d 	bl	8013894 <HAL_UART_Transmit_DMA>
 8025d9a:	4603      	mov	r3, r0
 8025d9c:	2b02      	cmp	r3, #2
 8025d9e:	d107      	bne.n	8025db0 <SendTokenMsg+0x84>
		TRANS_OFF();
 8025da0:	2200      	movs	r2, #0
 8025da2:	2101      	movs	r1, #1
 8025da4:	4807      	ldr	r0, [pc, #28]	; (8025dc4 <SendTokenMsg+0x98>)
 8025da6:	f7ec fc37 	bl	8012618 <HAL_GPIO_WritePin>
		vPortFree(temp);
 8025daa:	68f8      	ldr	r0, [r7, #12]
 8025dac:	f7ef f95a 	bl	8015064 <vPortFree>
	}
	HAL_IWDG_Refresh(&hiwdg);
 8025db0:	4806      	ldr	r0, [pc, #24]	; (8025dcc <SendTokenMsg+0xa0>)
 8025db2:	f7ec fc5c 	bl	801266e <HAL_IWDG_Refresh>
}
 8025db6:	bf00      	nop
 8025db8:	3710      	adds	r7, #16
 8025dba:	46bd      	mov	sp, r7
 8025dbc:	bd80      	pop	{r7, pc}
 8025dbe:	bf00      	nop
 8025dc0:	2000005c 	.word	0x2000005c
 8025dc4:	40021000 	.word	0x40021000
 8025dc8:	200120ac 	.word	0x200120ac
 8025dcc:	20011e20 	.word	0x20011e20

08025dd0 <SendNoDataMsg>:

void SendNoDataMsg(uint8_t to, uint8_t from, uint8_t fc) {
 8025dd0:	b580      	push	{r7, lr}
 8025dd2:	b084      	sub	sp, #16
 8025dd4:	af00      	add	r7, sp, #0
 8025dd6:	4603      	mov	r3, r0
 8025dd8:	71fb      	strb	r3, [r7, #7]
 8025dda:	460b      	mov	r3, r1
 8025ddc:	71bb      	strb	r3, [r7, #6]
 8025dde:	4613      	mov	r3, r2
 8025de0:	717b      	strb	r3, [r7, #5]
	uint8_t * temp;
	temp = (uint8_t*) pvPortMalloc(6);
 8025de2:	2006      	movs	r0, #6
 8025de4:	f7ef f87c 	bl	8014ee0 <pvPortMalloc>
 8025de8:	60f8      	str	r0, [r7, #12]
	if (temp == NULL) {
 8025dea:	68fb      	ldr	r3, [r7, #12]
 8025dec:	2b00      	cmp	r3, #0
 8025dee:	d101      	bne.n	8025df4 <SendNoDataMsg+0x24>
		Error_Handler();
 8025df0:	f7ff fe1c 	bl	8025a2c <Error_Handler>
	}
	temp[0] = 0x10;
 8025df4:	68fb      	ldr	r3, [r7, #12]
 8025df6:	2210      	movs	r2, #16
 8025df8:	701a      	strb	r2, [r3, #0]
	temp[1] = to;
 8025dfa:	68fb      	ldr	r3, [r7, #12]
 8025dfc:	3301      	adds	r3, #1
 8025dfe:	79fa      	ldrb	r2, [r7, #7]
 8025e00:	701a      	strb	r2, [r3, #0]
	temp[2] = from;
 8025e02:	68fb      	ldr	r3, [r7, #12]
 8025e04:	3302      	adds	r3, #2
 8025e06:	79ba      	ldrb	r2, [r7, #6]
 8025e08:	701a      	strb	r2, [r3, #0]
	temp[3] = fc;
 8025e0a:	68fb      	ldr	r3, [r7, #12]
 8025e0c:	3303      	adds	r3, #3
 8025e0e:	797a      	ldrb	r2, [r7, #5]
 8025e10:	701a      	strb	r2, [r3, #0]
	temp[4] = to + from + fc;
 8025e12:	68fb      	ldr	r3, [r7, #12]
 8025e14:	3304      	adds	r3, #4
 8025e16:	79f9      	ldrb	r1, [r7, #7]
 8025e18:	79ba      	ldrb	r2, [r7, #6]
 8025e1a:	440a      	add	r2, r1
 8025e1c:	b2d1      	uxtb	r1, r2
 8025e1e:	797a      	ldrb	r2, [r7, #5]
 8025e20:	440a      	add	r2, r1
 8025e22:	b2d2      	uxtb	r2, r2
 8025e24:	701a      	strb	r2, [r3, #0]
	temp[5] = 0x16;
 8025e26:	68fb      	ldr	r3, [r7, #12]
 8025e28:	3305      	adds	r3, #5
 8025e2a:	2216      	movs	r2, #22
 8025e2c:	701a      	strb	r2, [r3, #0]
	TRANS_ON();
 8025e2e:	2201      	movs	r2, #1
 8025e30:	2101      	movs	r1, #1
 8025e32:	4806      	ldr	r0, [pc, #24]	; (8025e4c <SendNoDataMsg+0x7c>)
 8025e34:	f7ec fbf0 	bl	8012618 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, temp, 6);
 8025e38:	2206      	movs	r2, #6
 8025e3a:	68f9      	ldr	r1, [r7, #12]
 8025e3c:	4804      	ldr	r0, [pc, #16]	; (8025e50 <SendNoDataMsg+0x80>)
 8025e3e:	f7ed fd29 	bl	8013894 <HAL_UART_Transmit_DMA>
}
 8025e42:	bf00      	nop
 8025e44:	3710      	adds	r7, #16
 8025e46:	46bd      	mov	sp, r7
 8025e48:	bd80      	pop	{r7, pc}
 8025e4a:	bf00      	nop
 8025e4c:	40021000 	.word	0x40021000
 8025e50:	200120ac 	.word	0x200120ac

08025e54 <SendRequestMsg>:

void SendRequestMsg(uint8_t to, uint8_t from, uint8_t* data, uint8_t data_len) {
 8025e54:	b590      	push	{r4, r7, lr}
 8025e56:	b087      	sub	sp, #28
 8025e58:	af00      	add	r7, sp, #0
 8025e5a:	603a      	str	r2, [r7, #0]
 8025e5c:	461a      	mov	r2, r3
 8025e5e:	4603      	mov	r3, r0
 8025e60:	71fb      	strb	r3, [r7, #7]
 8025e62:	460b      	mov	r3, r1
 8025e64:	71bb      	strb	r3, [r7, #6]
 8025e66:	4613      	mov	r3, r2
 8025e68:	717b      	strb	r3, [r7, #5]
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = data_len + 13;
 8025e6a:	797b      	ldrb	r3, [r7, #5]
 8025e6c:	330d      	adds	r3, #13
 8025e6e:	75fb      	strb	r3, [r7, #23]
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 8025e70:	7dfb      	ldrb	r3, [r7, #23]
 8025e72:	4618      	mov	r0, r3
 8025e74:	f7ef f834 	bl	8014ee0 <pvPortMalloc>
 8025e78:	6138      	str	r0, [r7, #16]
	if (msg_ptr == NULL) {
 8025e7a:	693b      	ldr	r3, [r7, #16]
 8025e7c:	2b00      	cmp	r3, #0
 8025e7e:	d106      	bne.n	8025e8e <SendRequestMsg+0x3a>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 8025e80:	4a3b      	ldr	r2, [pc, #236]	; (8025f70 <SendRequestMsg+0x11c>)
 8025e82:	2101      	movs	r1, #1
 8025e84:	2000      	movs	r0, #0
 8025e86:	f7ff fb41 	bl	802550c <LogText__>
				"Request buffer allocation error.");
		Error_Handler();
 8025e8a:	f7ff fdcf 	bl	8025a2c <Error_Handler>
	}
	tmp_ptr = msg_ptr;
 8025e8e:	693b      	ldr	r3, [r7, #16]
 8025e90:	60fb      	str	r3, [r7, #12]
	*tmp_ptr++ = 0x68;
 8025e92:	68fb      	ldr	r3, [r7, #12]
 8025e94:	1c5a      	adds	r2, r3, #1
 8025e96:	60fa      	str	r2, [r7, #12]
 8025e98:	2268      	movs	r2, #104	; 0x68
 8025e9a:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = data_len + 7;
 8025e9c:	68fb      	ldr	r3, [r7, #12]
 8025e9e:	1c5a      	adds	r2, r3, #1
 8025ea0:	60fa      	str	r2, [r7, #12]
 8025ea2:	797a      	ldrb	r2, [r7, #5]
 8025ea4:	3207      	adds	r2, #7
 8025ea6:	b2d2      	uxtb	r2, r2
 8025ea8:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = data_len + 7;
 8025eaa:	68fb      	ldr	r3, [r7, #12]
 8025eac:	1c5a      	adds	r2, r3, #1
 8025eae:	60fa      	str	r2, [r7, #12]
 8025eb0:	797a      	ldrb	r2, [r7, #5]
 8025eb2:	3207      	adds	r2, #7
 8025eb4:	b2d2      	uxtb	r2, r2
 8025eb6:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x68;
 8025eb8:	68fb      	ldr	r3, [r7, #12]
 8025eba:	1c5a      	adds	r2, r3, #1
 8025ebc:	60fa      	str	r2, [r7, #12]
 8025ebe:	2268      	movs	r2, #104	; 0x68
 8025ec0:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = to | 0x80;
 8025ec2:	68fb      	ldr	r3, [r7, #12]
 8025ec4:	1c5a      	adds	r2, r3, #1
 8025ec6:	60fa      	str	r2, [r7, #12]
 8025ec8:	79fa      	ldrb	r2, [r7, #7]
 8025eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8025ece:	b2d2      	uxtb	r2, r2
 8025ed0:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = from | 0x80;
 8025ed2:	68fb      	ldr	r3, [r7, #12]
 8025ed4:	1c5a      	adds	r2, r3, #1
 8025ed6:	60fa      	str	r2, [r7, #12]
 8025ed8:	79ba      	ldrb	r2, [r7, #6]
 8025eda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8025ede:	b2d2      	uxtb	r2, r2
 8025ee0:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x7C;
 8025ee2:	68fb      	ldr	r3, [r7, #12]
 8025ee4:	1c5a      	adds	r2, r3, #1
 8025ee6:	60fa      	str	r2, [r7, #12]
 8025ee8:	227c      	movs	r2, #124	; 0x7c
 8025eea:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = hprot.master_SAP;
 8025eec:	68fb      	ldr	r3, [r7, #12]
 8025eee:	1c5a      	adds	r2, r3, #1
 8025ef0:	60fa      	str	r2, [r7, #12]
 8025ef2:	4a20      	ldr	r2, [pc, #128]	; (8025f74 <SendRequestMsg+0x120>)
 8025ef4:	7c52      	ldrb	r2, [r2, #17]
 8025ef6:	b2d2      	uxtb	r2, r2
 8025ef8:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x1F;
 8025efa:	68fb      	ldr	r3, [r7, #12]
 8025efc:	1c5a      	adds	r2, r3, #1
 8025efe:	60fa      	str	r2, [r7, #12]
 8025f00:	221f      	movs	r2, #31
 8025f02:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0xF1;
 8025f04:	68fb      	ldr	r3, [r7, #12]
 8025f06:	1c5a      	adds	r2, r3, #1
 8025f08:	60fa      	str	r2, [r7, #12]
 8025f0a:	22f1      	movs	r2, #241	; 0xf1
 8025f0c:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = hprot.req_num;
 8025f0e:	68fb      	ldr	r3, [r7, #12]
 8025f10:	1c5a      	adds	r2, r3, #1
 8025f12:	60fa      	str	r2, [r7, #12]
 8025f14:	4a17      	ldr	r2, [pc, #92]	; (8025f74 <SendRequestMsg+0x120>)
 8025f16:	7cd2      	ldrb	r2, [r2, #19]
 8025f18:	701a      	strb	r2, [r3, #0]
	memcpy(tmp_ptr, data, data_len);
 8025f1a:	797b      	ldrb	r3, [r7, #5]
 8025f1c:	461a      	mov	r2, r3
 8025f1e:	6839      	ldr	r1, [r7, #0]
 8025f20:	68f8      	ldr	r0, [r7, #12]
 8025f22:	f002 faa4 	bl	802846e <memcpy>
	tmp_ptr += data_len;
 8025f26:	797b      	ldrb	r3, [r7, #5]
 8025f28:	68fa      	ldr	r2, [r7, #12]
 8025f2a:	4413      	add	r3, r2
 8025f2c:	60fb      	str	r3, [r7, #12]
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, data_len + 7);
 8025f2e:	68fc      	ldr	r4, [r7, #12]
 8025f30:	1c63      	adds	r3, r4, #1
 8025f32:	60fb      	str	r3, [r7, #12]
 8025f34:	693b      	ldr	r3, [r7, #16]
 8025f36:	1d1a      	adds	r2, r3, #4
 8025f38:	797b      	ldrb	r3, [r7, #5]
 8025f3a:	3307      	adds	r3, #7
 8025f3c:	b2db      	uxtb	r3, r3
 8025f3e:	4619      	mov	r1, r3
 8025f40:	4610      	mov	r0, r2
 8025f42:	f000 f9bf 	bl	80262c4 <CalculateFCS>
 8025f46:	4603      	mov	r3, r0
 8025f48:	7023      	strb	r3, [r4, #0]
	*tmp_ptr = 0x16;
 8025f4a:	68fb      	ldr	r3, [r7, #12]
 8025f4c:	2216      	movs	r2, #22
 8025f4e:	701a      	strb	r2, [r3, #0]
	TRANS_ON();
 8025f50:	2201      	movs	r2, #1
 8025f52:	2101      	movs	r1, #1
 8025f54:	4808      	ldr	r0, [pc, #32]	; (8025f78 <SendRequestMsg+0x124>)
 8025f56:	f7ec fb5f 	bl	8012618 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 8025f5a:	7dfb      	ldrb	r3, [r7, #23]
 8025f5c:	b29b      	uxth	r3, r3
 8025f5e:	461a      	mov	r2, r3
 8025f60:	6939      	ldr	r1, [r7, #16]
 8025f62:	4806      	ldr	r0, [pc, #24]	; (8025f7c <SendRequestMsg+0x128>)
 8025f64:	f7ed fc96 	bl	8013894 <HAL_UART_Transmit_DMA>
}
 8025f68:	bf00      	nop
 8025f6a:	371c      	adds	r7, #28
 8025f6c:	46bd      	mov	sp, r7
 8025f6e:	bd90      	pop	{r4, r7, pc}
 8025f70:	0802b744 	.word	0x0802b744
 8025f74:	20011ef4 	.word	0x20011ef4
 8025f78:	40021000 	.word	0x40021000
 8025f7c:	200120ac 	.word	0x200120ac

08025f80 <SendConnectMsg>:

void SendConnectMsg(uint8_t to, uint8_t from, uint8_t fc) {
 8025f80:	b590      	push	{r4, r7, lr}
 8025f82:	b089      	sub	sp, #36	; 0x24
 8025f84:	af00      	add	r7, sp, #0
 8025f86:	4603      	mov	r3, r0
 8025f88:	71fb      	strb	r3, [r7, #7]
 8025f8a:	460b      	mov	r3, r1
 8025f8c:	71bb      	strb	r3, [r7, #6]
 8025f8e:	4613      	mov	r3, r2
 8025f90:	717b      	strb	r3, [r7, #5]
	uint8_t data[] = { 0x80, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00 };
 8025f92:	4a49      	ldr	r2, [pc, #292]	; (80260b8 <SendConnectMsg+0x138>)
 8025f94:	f107 0308 	add.w	r3, r7, #8
 8025f98:	ca07      	ldmia	r2, {r0, r1, r2}
 8025f9a:	c303      	stmia	r3!, {r0, r1}
 8025f9c:	701a      	strb	r2, [r3, #0]
	uint8_t data_len = sizeof(data);
 8025f9e:	2309      	movs	r3, #9
 8025fa0:	77fb      	strb	r3, [r7, #31]
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = data_len + 14;
 8025fa2:	7ffb      	ldrb	r3, [r7, #31]
 8025fa4:	330e      	adds	r3, #14
 8025fa6:	77bb      	strb	r3, [r7, #30]
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 8025fa8:	7fbb      	ldrb	r3, [r7, #30]
 8025faa:	4618      	mov	r0, r3
 8025fac:	f7ee ff98 	bl	8014ee0 <pvPortMalloc>
 8025fb0:	61b8      	str	r0, [r7, #24]
	if (msg_ptr == NULL) {
 8025fb2:	69bb      	ldr	r3, [r7, #24]
 8025fb4:	2b00      	cmp	r3, #0
 8025fb6:	d106      	bne.n	8025fc6 <SendConnectMsg+0x46>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 8025fb8:	4a40      	ldr	r2, [pc, #256]	; (80260bc <SendConnectMsg+0x13c>)
 8025fba:	2101      	movs	r1, #1
 8025fbc:	2000      	movs	r0, #0
 8025fbe:	f7ff faa5 	bl	802550c <LogText__>
				"Request buffer allocation error.");
		Error_Handler();
 8025fc2:	f7ff fd33 	bl	8025a2c <Error_Handler>
	}
	tmp_ptr = msg_ptr;
 8025fc6:	69bb      	ldr	r3, [r7, #24]
 8025fc8:	617b      	str	r3, [r7, #20]
	*tmp_ptr++ = 0x68;
 8025fca:	697b      	ldr	r3, [r7, #20]
 8025fcc:	1c5a      	adds	r2, r3, #1
 8025fce:	617a      	str	r2, [r7, #20]
 8025fd0:	2268      	movs	r2, #104	; 0x68
 8025fd2:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = data_len + 8;
 8025fd4:	697b      	ldr	r3, [r7, #20]
 8025fd6:	1c5a      	adds	r2, r3, #1
 8025fd8:	617a      	str	r2, [r7, #20]
 8025fda:	7ffa      	ldrb	r2, [r7, #31]
 8025fdc:	3208      	adds	r2, #8
 8025fde:	b2d2      	uxtb	r2, r2
 8025fe0:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = data_len + 8;
 8025fe2:	697b      	ldr	r3, [r7, #20]
 8025fe4:	1c5a      	adds	r2, r3, #1
 8025fe6:	617a      	str	r2, [r7, #20]
 8025fe8:	7ffa      	ldrb	r2, [r7, #31]
 8025fea:	3208      	adds	r2, #8
 8025fec:	b2d2      	uxtb	r2, r2
 8025fee:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x68;
 8025ff0:	697b      	ldr	r3, [r7, #20]
 8025ff2:	1c5a      	adds	r2, r3, #1
 8025ff4:	617a      	str	r2, [r7, #20]
 8025ff6:	2268      	movs	r2, #104	; 0x68
 8025ff8:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = to | 0x80;
 8025ffa:	697b      	ldr	r3, [r7, #20]
 8025ffc:	1c5a      	adds	r2, r3, #1
 8025ffe:	617a      	str	r2, [r7, #20]
 8026000:	79fa      	ldrb	r2, [r7, #7]
 8026002:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8026006:	b2d2      	uxtb	r2, r2
 8026008:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = from | 0x80;
 802600a:	697b      	ldr	r3, [r7, #20]
 802600c:	1c5a      	adds	r2, r3, #1
 802600e:	617a      	str	r2, [r7, #20]
 8026010:	79ba      	ldrb	r2, [r7, #6]
 8026012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8026016:	b2d2      	uxtb	r2, r2
 8026018:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = fc;
 802601a:	697b      	ldr	r3, [r7, #20]
 802601c:	1c5a      	adds	r2, r3, #1
 802601e:	617a      	str	r2, [r7, #20]
 8026020:	797a      	ldrb	r2, [r7, #5]
 8026022:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x00;
 8026024:	697b      	ldr	r3, [r7, #20]
 8026026:	1c5a      	adds	r2, r3, #1
 8026028:	617a      	str	r2, [r7, #20]
 802602a:	2200      	movs	r2, #0
 802602c:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x1F;
 802602e:	697b      	ldr	r3, [r7, #20]
 8026030:	1c5a      	adds	r2, r3, #1
 8026032:	617a      	str	r2, [r7, #20]
 8026034:	221f      	movs	r2, #31
 8026036:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0xE0;
 8026038:	697b      	ldr	r3, [r7, #20]
 802603a:	1c5a      	adds	r2, r3, #1
 802603c:	617a      	str	r2, [r7, #20]
 802603e:	22e0      	movs	r2, #224	; 0xe0
 8026040:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x04;
 8026042:	697b      	ldr	r3, [r7, #20]
 8026044:	1c5a      	adds	r2, r3, #1
 8026046:	617a      	str	r2, [r7, #20]
 8026048:	2204      	movs	r2, #4
 802604a:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = hprot.req_num;
 802604c:	697b      	ldr	r3, [r7, #20]
 802604e:	1c5a      	adds	r2, r3, #1
 8026050:	617a      	str	r2, [r7, #20]
 8026052:	4a1b      	ldr	r2, [pc, #108]	; (80260c0 <SendConnectMsg+0x140>)
 8026054:	7cd2      	ldrb	r2, [r2, #19]
 8026056:	701a      	strb	r2, [r3, #0]
	memcpy(tmp_ptr, data, data_len);
 8026058:	7ffa      	ldrb	r2, [r7, #31]
 802605a:	f107 0308 	add.w	r3, r7, #8
 802605e:	4619      	mov	r1, r3
 8026060:	6978      	ldr	r0, [r7, #20]
 8026062:	f002 fa04 	bl	802846e <memcpy>
	tmp_ptr += data_len;
 8026066:	7ffb      	ldrb	r3, [r7, #31]
 8026068:	697a      	ldr	r2, [r7, #20]
 802606a:	4413      	add	r3, r2
 802606c:	617b      	str	r3, [r7, #20]
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, data_len + 8);
 802606e:	697c      	ldr	r4, [r7, #20]
 8026070:	1c63      	adds	r3, r4, #1
 8026072:	617b      	str	r3, [r7, #20]
 8026074:	69bb      	ldr	r3, [r7, #24]
 8026076:	1d1a      	adds	r2, r3, #4
 8026078:	7ffb      	ldrb	r3, [r7, #31]
 802607a:	3308      	adds	r3, #8
 802607c:	b2db      	uxtb	r3, r3
 802607e:	4619      	mov	r1, r3
 8026080:	4610      	mov	r0, r2
 8026082:	f000 f91f 	bl	80262c4 <CalculateFCS>
 8026086:	4603      	mov	r3, r0
 8026088:	7023      	strb	r3, [r4, #0]
	*tmp_ptr = 0x16;
 802608a:	697b      	ldr	r3, [r7, #20]
 802608c:	2216      	movs	r2, #22
 802608e:	701a      	strb	r2, [r3, #0]
	hprot.conn_stat = CONN_REQ_SENT;
 8026090:	4b0b      	ldr	r3, [pc, #44]	; (80260c0 <SendConnectMsg+0x140>)
 8026092:	2201      	movs	r2, #1
 8026094:	70da      	strb	r2, [r3, #3]
	TRANS_ON();
 8026096:	2201      	movs	r2, #1
 8026098:	2101      	movs	r1, #1
 802609a:	480a      	ldr	r0, [pc, #40]	; (80260c4 <SendConnectMsg+0x144>)
 802609c:	f7ec fabc 	bl	8012618 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 80260a0:	7fbb      	ldrb	r3, [r7, #30]
 80260a2:	b29b      	uxth	r3, r3
 80260a4:	461a      	mov	r2, r3
 80260a6:	69b9      	ldr	r1, [r7, #24]
 80260a8:	4807      	ldr	r0, [pc, #28]	; (80260c8 <SendConnectMsg+0x148>)
 80260aa:	f7ed fbf3 	bl	8013894 <HAL_UART_Transmit_DMA>
}
 80260ae:	bf00      	nop
 80260b0:	3724      	adds	r7, #36	; 0x24
 80260b2:	46bd      	mov	sp, r7
 80260b4:	bd90      	pop	{r4, r7, pc}
 80260b6:	bf00      	nop
 80260b8:	0802b768 	.word	0x0802b768
 80260bc:	0802b744 	.word	0x0802b744
 80260c0:	20011ef4 	.word	0x20011ef4
 80260c4:	40021000 	.word	0x40021000
 80260c8:	200120ac 	.word	0x200120ac

080260cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80260cc:	b580      	push	{r7, lr}
 80260ce:	b082      	sub	sp, #8
 80260d0:	af00      	add	r7, sp, #0
 80260d2:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 80260d4:	687b      	ldr	r3, [r7, #4]
 80260d6:	4a0c      	ldr	r2, [pc, #48]	; (8026108 <HAL_UART_RxCpltCallback+0x3c>)
 80260d8:	4293      	cmp	r3, r2
 80260da:	d111      	bne.n	8026100 <HAL_UART_RxCpltCallback+0x34>
		HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 80260dc:	2201      	movs	r2, #1
 80260de:	490b      	ldr	r1, [pc, #44]	; (802610c <HAL_UART_RxCpltCallback+0x40>)
 80260e0:	4809      	ldr	r0, [pc, #36]	; (8026108 <HAL_UART_RxCpltCallback+0x3c>)
 80260e2:	f7ed fb8a 	bl	80137fa <HAL_UART_Receive_IT>
		CB_Write(&inbuf_UART, received_byte);
 80260e6:	4b09      	ldr	r3, [pc, #36]	; (802610c <HAL_UART_RxCpltCallback+0x40>)
 80260e8:	781b      	ldrb	r3, [r3, #0]
 80260ea:	4619      	mov	r1, r3
 80260ec:	4808      	ldr	r0, [pc, #32]	; (8026110 <HAL_UART_RxCpltCallback+0x44>)
 80260ee:	f7fc fe0e 	bl	8022d0e <CB_Write>
		__HAL_TIM_SET_COUNTER(&htim8, 0x00U);
 80260f2:	4b08      	ldr	r3, [pc, #32]	; (8026114 <HAL_UART_RxCpltCallback+0x48>)
 80260f4:	681b      	ldr	r3, [r3, #0]
 80260f6:	2200      	movs	r2, #0
 80260f8:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim8);
 80260fa:	4806      	ldr	r0, [pc, #24]	; (8026114 <HAL_UART_RxCpltCallback+0x48>)
 80260fc:	f7ec ff33 	bl	8012f66 <HAL_TIM_Base_Start_IT>
	}
}
 8026100:	bf00      	nop
 8026102:	3708      	adds	r7, #8
 8026104:	46bd      	mov	sp, r7
 8026106:	bd80      	pop	{r7, pc}
 8026108:	200120ac 	.word	0x200120ac
 802610c:	20011ee0 	.word	0x20011ee0
 8026110:	20011ee4 	.word	0x20011ee4
 8026114:	20011f50 	.word	0x20011f50

08026118 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8026118:	b580      	push	{r7, lr}
 802611a:	b082      	sub	sp, #8
 802611c:	af00      	add	r7, sp, #0
 802611e:	6078      	str	r0, [r7, #4]
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8026120:	4b23      	ldr	r3, [pc, #140]	; (80261b0 <HAL_UART_TxCpltCallback+0x98>)
 8026122:	2200      	movs	r2, #0
 8026124:	601a      	str	r2, [r3, #0]
	if (huart == &huart5) {
 8026126:	687b      	ldr	r3, [r7, #4]
 8026128:	4a22      	ldr	r2, [pc, #136]	; (80261b4 <HAL_UART_TxCpltCallback+0x9c>)
 802612a:	4293      	cmp	r3, r2
 802612c:	d11c      	bne.n	8026168 <HAL_UART_TxCpltCallback+0x50>
		TRANS_OFF();
 802612e:	2200      	movs	r2, #0
 8026130:	2101      	movs	r1, #1
 8026132:	4821      	ldr	r0, [pc, #132]	; (80261b8 <HAL_UART_TxCpltCallback+0xa0>)
 8026134:	f7ec fa70 	bl	8012618 <HAL_GPIO_WritePin>
		xQueueSendFromISR(cleaner_queue, &(huart5.pTxBuffPtr),
 8026138:	4b20      	ldr	r3, [pc, #128]	; (80261bc <HAL_UART_TxCpltCallback+0xa4>)
 802613a:	6818      	ldr	r0, [r3, #0]
 802613c:	2300      	movs	r3, #0
 802613e:	4a1c      	ldr	r2, [pc, #112]	; (80261b0 <HAL_UART_TxCpltCallback+0x98>)
 8026140:	491f      	ldr	r1, [pc, #124]	; (80261c0 <HAL_UART_TxCpltCallback+0xa8>)
 8026142:	f7ef fb31 	bl	80157a8 <xQueueGenericSendFromISR>
				&xHigherPriorityTaskWoken);
		if (xHigherPriorityTaskWoken == pdTRUE) {
 8026146:	4b1a      	ldr	r3, [pc, #104]	; (80261b0 <HAL_UART_TxCpltCallback+0x98>)
 8026148:	681b      	ldr	r3, [r3, #0]
 802614a:	2b01      	cmp	r3, #1
 802614c:	d12b      	bne.n	80261a6 <HAL_UART_TxCpltCallback+0x8e>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 802614e:	4b18      	ldr	r3, [pc, #96]	; (80261b0 <HAL_UART_TxCpltCallback+0x98>)
 8026150:	681b      	ldr	r3, [r3, #0]
 8026152:	2b00      	cmp	r3, #0
 8026154:	d027      	beq.n	80261a6 <HAL_UART_TxCpltCallback+0x8e>
 8026156:	4b1b      	ldr	r3, [pc, #108]	; (80261c4 <HAL_UART_TxCpltCallback+0xac>)
 8026158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802615c:	601a      	str	r2, [r3, #0]
 802615e:	f3bf 8f4f 	dsb	sy
 8026162:	f3bf 8f6f 	isb	sy
				&xHigherPriorityTaskWoken);
		if (xHigherPriorityTaskWoken == pdTRUE) {
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
		}
	}
}
 8026166:	e01e      	b.n	80261a6 <HAL_UART_TxCpltCallback+0x8e>
	} else if (huart == hlog.interface) {
 8026168:	4b17      	ldr	r3, [pc, #92]	; (80261c8 <HAL_UART_TxCpltCallback+0xb0>)
 802616a:	681a      	ldr	r2, [r3, #0]
 802616c:	687b      	ldr	r3, [r7, #4]
 802616e:	429a      	cmp	r2, r3
 8026170:	d119      	bne.n	80261a6 <HAL_UART_TxCpltCallback+0x8e>
		xQueueSendFromISR(cleaner_queue, &(hlog.interface->pTxBuffPtr),
 8026172:	4b12      	ldr	r3, [pc, #72]	; (80261bc <HAL_UART_TxCpltCallback+0xa4>)
 8026174:	6818      	ldr	r0, [r3, #0]
 8026176:	4b14      	ldr	r3, [pc, #80]	; (80261c8 <HAL_UART_TxCpltCallback+0xb0>)
 8026178:	681b      	ldr	r3, [r3, #0]
 802617a:	f103 0120 	add.w	r1, r3, #32
 802617e:	2300      	movs	r3, #0
 8026180:	4a0b      	ldr	r2, [pc, #44]	; (80261b0 <HAL_UART_TxCpltCallback+0x98>)
 8026182:	f7ef fb11 	bl	80157a8 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken == pdTRUE) {
 8026186:	4b0a      	ldr	r3, [pc, #40]	; (80261b0 <HAL_UART_TxCpltCallback+0x98>)
 8026188:	681b      	ldr	r3, [r3, #0]
 802618a:	2b01      	cmp	r3, #1
 802618c:	d10b      	bne.n	80261a6 <HAL_UART_TxCpltCallback+0x8e>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 802618e:	4b08      	ldr	r3, [pc, #32]	; (80261b0 <HAL_UART_TxCpltCallback+0x98>)
 8026190:	681b      	ldr	r3, [r3, #0]
 8026192:	2b00      	cmp	r3, #0
 8026194:	d007      	beq.n	80261a6 <HAL_UART_TxCpltCallback+0x8e>
 8026196:	4b0b      	ldr	r3, [pc, #44]	; (80261c4 <HAL_UART_TxCpltCallback+0xac>)
 8026198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802619c:	601a      	str	r2, [r3, #0]
 802619e:	f3bf 8f4f 	dsb	sy
 80261a2:	f3bf 8f6f 	isb	sy
}
 80261a6:	bf00      	nop
 80261a8:	3708      	adds	r7, #8
 80261aa:	46bd      	mov	sp, r7
 80261ac:	bd80      	pop	{r7, pc}
 80261ae:	bf00      	nop
 80261b0:	20009da4 	.word	0x20009da4
 80261b4:	200120ac 	.word	0x200120ac
 80261b8:	40021000 	.word	0x40021000
 80261bc:	20011e1c 	.word	0x20011e1c
 80261c0:	200120cc 	.word	0x200120cc
 80261c4:	e000ed04 	.word	0xe000ed04
 80261c8:	20011e8c 	.word	0x20011e8c

080261cc <StartProcessTask>:

void StartProcessTask(void const * argument) {
 80261cc:	b580      	push	{r7, lr}
 80261ce:	b084      	sub	sp, #16
 80261d0:	af00      	add	r7, sp, #0
 80261d2:	6078      	str	r0, [r7, #4]
	uint8_t len;
	static uint8_t cmd_data_buf[SIZE_OF_CMD_BUF];

	error_t err = NO_ERR;
 80261d4:	2300      	movs	r3, #0
 80261d6:	72fb      	strb	r3, [r7, #11]
	err = CB_Init(&inbuf_UART, UART_BUFF_SIZE);
 80261d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80261dc:	481c      	ldr	r0, [pc, #112]	; (8026250 <StartProcessTask+0x84>)
 80261de:	f7fc fd5c 	bl	8022c9a <CB_Init>
 80261e2:	4603      	mov	r3, r0
 80261e4:	72fb      	strb	r3, [r7, #11]
	if (err != NO_ERR) {
 80261e6:	7afb      	ldrb	r3, [r7, #11]
 80261e8:	2b00      	cmp	r3, #0
 80261ea:	d004      	beq.n	80261f6 <StartProcessTask+0x2a>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 80261ec:	4a19      	ldr	r2, [pc, #100]	; (8026254 <StartProcessTask+0x88>)
 80261ee:	2101      	movs	r1, #1
 80261f0:	2000      	movs	r0, #0
 80261f2:	f7ff f98b 	bl	802550c <LogText__>
				"Circular buffer allocation error.\r\n");
	}
	HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 80261f6:	2201      	movs	r2, #1
 80261f8:	4917      	ldr	r1, [pc, #92]	; (8026258 <StartProcessTask+0x8c>)
 80261fa:	4818      	ldr	r0, [pc, #96]	; (802625c <StartProcessTask+0x90>)
 80261fc:	f7ed fafd 	bl	80137fa <HAL_UART_Receive_IT>
	for (;;) {
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
 8026200:	4b17      	ldr	r3, [pc, #92]	; (8026260 <StartProcessTask+0x94>)
 8026202:	6818      	ldr	r0, [r3, #0]
 8026204:	f107 010a 	add.w	r1, r7, #10
 8026208:	2300      	movs	r3, #0
 802620a:	f04f 32ff 	mov.w	r2, #4294967295
 802620e:	f7ef fbe9 	bl	80159e4 <xQueueGenericReceive>
		cmd_data_buf[SIZE_OF_CMD_BUF - 1] = len;
 8026212:	7aba      	ldrb	r2, [r7, #10]
 8026214:	4b13      	ldr	r3, [pc, #76]	; (8026264 <StartProcessTask+0x98>)
 8026216:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		uint pos = 0;
 802621a:	2300      	movs	r3, #0
 802621c:	60fb      	str	r3, [r7, #12]
		while (len) {
 802621e:	e00f      	b.n	8026240 <StartProcessTask+0x74>
			uint8_t ch;
			CB_Read(&inbuf_UART, &ch);
 8026220:	f107 0309 	add.w	r3, r7, #9
 8026224:	4619      	mov	r1, r3
 8026226:	480a      	ldr	r0, [pc, #40]	; (8026250 <StartProcessTask+0x84>)
 8026228:	f7fc fd97 	bl	8022d5a <CB_Read>
			--len;
 802622c:	7abb      	ldrb	r3, [r7, #10]
 802622e:	3b01      	subs	r3, #1
 8026230:	b2db      	uxtb	r3, r3
 8026232:	72bb      	strb	r3, [r7, #10]
			cmd_data_buf[pos++] = ch;
 8026234:	68fb      	ldr	r3, [r7, #12]
 8026236:	1c5a      	adds	r2, r3, #1
 8026238:	60fa      	str	r2, [r7, #12]
 802623a:	7a79      	ldrb	r1, [r7, #9]
 802623c:	4a09      	ldr	r2, [pc, #36]	; (8026264 <StartProcessTask+0x98>)
 802623e:	54d1      	strb	r1, [r2, r3]
		while (len) {
 8026240:	7abb      	ldrb	r3, [r7, #10]
 8026242:	2b00      	cmp	r3, #0
 8026244:	d1ec      	bne.n	8026220 <StartProcessTask+0x54>
		}
		CommandParser(cmd_data_buf);
 8026246:	4807      	ldr	r0, [pc, #28]	; (8026264 <StartProcessTask+0x98>)
 8026248:	f000 f9a2 	bl	8026590 <CommandParser>
	for (;;) {
 802624c:	e7d8      	b.n	8026200 <StartProcessTask+0x34>
 802624e:	bf00      	nop
 8026250:	20011ee4 	.word	0x20011ee4
 8026254:	0802b774 	.word	0x0802b774
 8026258:	20011ee0 	.word	0x20011ee0
 802625c:	200120ac 	.word	0x200120ac
 8026260:	20011e0c 	.word	0x20011e0c
 8026264:	20009da8 	.word	0x20009da8

08026268 <ProtocolSettingsInit>:

/* ---------- FUNCTIONS ------------ */
/* -------||--||--||--||--||-------- */
/* -------\/--\/--\/--\/--\/-------- */

void ProtocolSettingsInit(profibus_MPI_t* hp) {
 8026268:	b580      	push	{r7, lr}
 802626a:	b082      	sub	sp, #8
 802626c:	af00      	add	r7, sp, #0
 802626e:	6078      	str	r0, [r7, #4]
	hp->own_address = hflash.own_addr;
 8026270:	4b13      	ldr	r3, [pc, #76]	; (80262c0 <ProtocolSettingsInit+0x58>)
 8026272:	889b      	ldrh	r3, [r3, #4]
 8026274:	b2da      	uxtb	r2, r3
 8026276:	687b      	ldr	r3, [r7, #4]
 8026278:	701a      	strb	r2, [r3, #0]
	hp->speed = hflash.speed;
 802627a:	4b11      	ldr	r3, [pc, #68]	; (80262c0 <ProtocolSettingsInit+0x58>)
 802627c:	681a      	ldr	r2, [r3, #0]
 802627e:	687b      	ldr	r3, [r7, #4]
 8026280:	609a      	str	r2, [r3, #8]
	hp->token_possession = 0U;
 8026282:	687b      	ldr	r3, [r7, #4]
 8026284:	2200      	movs	r2, #0
 8026286:	705a      	strb	r2, [r3, #1]
	hp->confirm_status = CONF_OK;
 8026288:	687b      	ldr	r3, [r7, #4]
 802628a:	2203      	movs	r2, #3
 802628c:	709a      	strb	r2, [r3, #2]
	hp->conn_stat = CONN_NO;
 802628e:	687b      	ldr	r3, [r7, #4]
 8026290:	2200      	movs	r2, #0
 8026292:	70da      	strb	r2, [r3, #3]
	hp->wait_for_answer = 0U;
 8026294:	687b      	ldr	r3, [r7, #4]
 8026296:	2200      	movs	r2, #0
 8026298:	711a      	strb	r2, [r3, #4]
	hp->data_ptr = NULL;
 802629a:	687b      	ldr	r3, [r7, #4]
 802629c:	2200      	movs	r2, #0
 802629e:	60da      	str	r2, [r3, #12]
	hp->data_len = 0U;
 80262a0:	687b      	ldr	r3, [r7, #4]
 80262a2:	2200      	movs	r2, #0
 80262a4:	741a      	strb	r2, [r3, #16]
	hp->bus_masters = 0x00U;
 80262a6:	687b      	ldr	r3, [r7, #4]
 80262a8:	2200      	movs	r2, #0
 80262aa:	615a      	str	r2, [r3, #20]
	AddMaster(hp, hp->own_address);
 80262ac:	687b      	ldr	r3, [r7, #4]
 80262ae:	781b      	ldrb	r3, [r3, #0]
 80262b0:	4619      	mov	r1, r3
 80262b2:	6878      	ldr	r0, [r7, #4]
 80262b4:	f000 fb14 	bl	80268e0 <AddMaster>
}
 80262b8:	bf00      	nop
 80262ba:	3708      	adds	r7, #8
 80262bc:	46bd      	mov	sp, r7
 80262be:	bd80      	pop	{r7, pc}
 80262c0:	2000ecfc 	.word	0x2000ecfc

080262c4 <CalculateFCS>:

uint8_t CalculateFCS(uint8_t * buf, uint8_t len) {
 80262c4:	b480      	push	{r7}
 80262c6:	b085      	sub	sp, #20
 80262c8:	af00      	add	r7, sp, #0
 80262ca:	6078      	str	r0, [r7, #4]
 80262cc:	460b      	mov	r3, r1
 80262ce:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0;
 80262d0:	2300      	movs	r3, #0
 80262d2:	73fb      	strb	r3, [r7, #15]
	while (len--) {
 80262d4:	e006      	b.n	80262e4 <CalculateFCS+0x20>
		result += *buf++;
 80262d6:	687b      	ldr	r3, [r7, #4]
 80262d8:	1c5a      	adds	r2, r3, #1
 80262da:	607a      	str	r2, [r7, #4]
 80262dc:	781a      	ldrb	r2, [r3, #0]
 80262de:	7bfb      	ldrb	r3, [r7, #15]
 80262e0:	4413      	add	r3, r2
 80262e2:	73fb      	strb	r3, [r7, #15]
	while (len--) {
 80262e4:	78fb      	ldrb	r3, [r7, #3]
 80262e6:	1e5a      	subs	r2, r3, #1
 80262e8:	70fa      	strb	r2, [r7, #3]
 80262ea:	2b00      	cmp	r3, #0
 80262ec:	d1f3      	bne.n	80262d6 <CalculateFCS+0x12>
	}
	return result;
 80262ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80262f0:	4618      	mov	r0, r3
 80262f2:	3714      	adds	r7, #20
 80262f4:	46bd      	mov	sp, r7
 80262f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262fa:	4770      	bx	lr

080262fc <TokenCmdProcessing>:

static inline error_t TokenCmdProcessing(telegram_t * tel) {
 80262fc:	b580      	push	{r7, lr}
 80262fe:	b084      	sub	sp, #16
 8026300:	af00      	add	r7, sp, #0
 8026302:	6078      	str	r0, [r7, #4]
	parcel_t parc;
	hprot.token_possession = 1U;
 8026304:	4b57      	ldr	r3, [pc, #348]	; (8026464 <TokenCmdProcessing+0x168>)
 8026306:	2201      	movs	r2, #1
 8026308:	705a      	strb	r2, [r3, #1]
	if ((hprot.conn_stat == CONN_CLOSE)
 802630a:	4b56      	ldr	r3, [pc, #344]	; (8026464 <TokenCmdProcessing+0x168>)
 802630c:	78db      	ldrb	r3, [r3, #3]
 802630e:	b2db      	uxtb	r3, r3
 8026310:	2b04      	cmp	r3, #4
 8026312:	d10e      	bne.n	8026332 <TokenCmdProcessing+0x36>
			&& (hprot.confirm_status != CONF_NEED08)) {
 8026314:	4b53      	ldr	r3, [pc, #332]	; (8026464 <TokenCmdProcessing+0x168>)
 8026316:	789b      	ldrb	r3, [r3, #2]
 8026318:	b2db      	uxtb	r3, r3
 802631a:	2b01      	cmp	r3, #1
 802631c:	d009      	beq.n	8026332 <TokenCmdProcessing+0x36>
		SendClosemMsg(hprot.master_address, hprot.own_address);
 802631e:	4b51      	ldr	r3, [pc, #324]	; (8026464 <TokenCmdProcessing+0x168>)
 8026320:	7c9b      	ldrb	r3, [r3, #18]
 8026322:	b2da      	uxtb	r2, r3
 8026324:	4b4f      	ldr	r3, [pc, #316]	; (8026464 <TokenCmdProcessing+0x168>)
 8026326:	781b      	ldrb	r3, [r3, #0]
 8026328:	4619      	mov	r1, r3
 802632a:	4610      	mov	r0, r2
 802632c:	f7ff fbd2 	bl	8025ad4 <SendClosemMsg>
 8026330:	e093      	b.n	802645a <TokenCmdProcessing+0x15e>
	} else if (hprot.confirm_status == CONF_NEED07) {
 8026332:	4b4c      	ldr	r3, [pc, #304]	; (8026464 <TokenCmdProcessing+0x168>)
 8026334:	789b      	ldrb	r3, [r3, #2]
 8026336:	b2db      	uxtb	r3, r3
 8026338:	2b00      	cmp	r3, #0
 802633a:	d109      	bne.n	8026350 <TokenCmdProcessing+0x54>
		SendConfirmMsg(hprot.master_address, hprot.own_address, 0x07, 0x5C);
 802633c:	4b49      	ldr	r3, [pc, #292]	; (8026464 <TokenCmdProcessing+0x168>)
 802633e:	7c9b      	ldrb	r3, [r3, #18]
 8026340:	b2d8      	uxtb	r0, r3
 8026342:	4b48      	ldr	r3, [pc, #288]	; (8026464 <TokenCmdProcessing+0x168>)
 8026344:	7819      	ldrb	r1, [r3, #0]
 8026346:	235c      	movs	r3, #92	; 0x5c
 8026348:	2207      	movs	r2, #7
 802634a:	f7ff fc41 	bl	8025bd0 <SendConfirmMsg>
 802634e:	e084      	b.n	802645a <TokenCmdProcessing+0x15e>
	} else if (hprot.confirm_status == CONF_NEED08) {
 8026350:	4b44      	ldr	r3, [pc, #272]	; (8026464 <TokenCmdProcessing+0x168>)
 8026352:	789b      	ldrb	r3, [r3, #2]
 8026354:	b2db      	uxtb	r3, r3
 8026356:	2b01      	cmp	r3, #1
 8026358:	d109      	bne.n	802636e <TokenCmdProcessing+0x72>
		SendConfirmMsg(hprot.master_address, hprot.own_address, 0x08, 0x5C);
 802635a:	4b42      	ldr	r3, [pc, #264]	; (8026464 <TokenCmdProcessing+0x168>)
 802635c:	7c9b      	ldrb	r3, [r3, #18]
 802635e:	b2d8      	uxtb	r0, r3
 8026360:	4b40      	ldr	r3, [pc, #256]	; (8026464 <TokenCmdProcessing+0x168>)
 8026362:	7819      	ldrb	r1, [r3, #0]
 8026364:	235c      	movs	r3, #92	; 0x5c
 8026366:	2208      	movs	r2, #8
 8026368:	f7ff fc32 	bl	8025bd0 <SendConfirmMsg>
 802636c:	e075      	b.n	802645a <TokenCmdProcessing+0x15e>
	} else if (hprot.confirm_status == CONF_NEED07_AGAIN) {
 802636e:	4b3d      	ldr	r3, [pc, #244]	; (8026464 <TokenCmdProcessing+0x168>)
 8026370:	789b      	ldrb	r3, [r3, #2]
 8026372:	b2db      	uxtb	r3, r3
 8026374:	2b04      	cmp	r3, #4
 8026376:	d109      	bne.n	802638c <TokenCmdProcessing+0x90>
		SendConfirmMsg(hprot.master_address, hprot.own_address, 0x07, 0x7C);
 8026378:	4b3a      	ldr	r3, [pc, #232]	; (8026464 <TokenCmdProcessing+0x168>)
 802637a:	7c9b      	ldrb	r3, [r3, #18]
 802637c:	b2d8      	uxtb	r0, r3
 802637e:	4b39      	ldr	r3, [pc, #228]	; (8026464 <TokenCmdProcessing+0x168>)
 8026380:	7819      	ldrb	r1, [r3, #0]
 8026382:	237c      	movs	r3, #124	; 0x7c
 8026384:	2207      	movs	r2, #7
 8026386:	f7ff fc23 	bl	8025bd0 <SendConfirmMsg>
 802638a:	e066      	b.n	802645a <TokenCmdProcessing+0x15e>
	} else {
		if (xQueuePeek(tcp_client_queue,&parc,0) != pdPASS) {
 802638c:	4b36      	ldr	r3, [pc, #216]	; (8026468 <TokenCmdProcessing+0x16c>)
 802638e:	6818      	ldr	r0, [r3, #0]
 8026390:	f107 0108 	add.w	r1, r7, #8
 8026394:	2301      	movs	r3, #1
 8026396:	2200      	movs	r2, #0
 8026398:	f7ef fb24 	bl	80159e4 <xQueueGenericReceive>
 802639c:	4603      	mov	r3, r0
 802639e:	2b01      	cmp	r3, #1
 80263a0:	d00e      	beq.n	80263c0 <TokenCmdProcessing+0xc4>

			SendTokenMsg(GetNextMaster(&hprot), hprot.own_address);
 80263a2:	4830      	ldr	r0, [pc, #192]	; (8026464 <TokenCmdProcessing+0x168>)
 80263a4:	f000 fab1 	bl	802690a <GetNextMaster>
 80263a8:	4603      	mov	r3, r0
 80263aa:	461a      	mov	r2, r3
 80263ac:	4b2d      	ldr	r3, [pc, #180]	; (8026464 <TokenCmdProcessing+0x168>)
 80263ae:	781b      	ldrb	r3, [r3, #0]
 80263b0:	4619      	mov	r1, r3
 80263b2:	4610      	mov	r0, r2
 80263b4:	f7ff fcba 	bl	8025d2c <SendTokenMsg>
			hprot.token_possession = 0U;
 80263b8:	4b2a      	ldr	r3, [pc, #168]	; (8026464 <TokenCmdProcessing+0x168>)
 80263ba:	2200      	movs	r2, #0
 80263bc:	705a      	strb	r2, [r3, #1]
 80263be:	e04c      	b.n	802645a <TokenCmdProcessing+0x15e>
		} else {
			if (hprot.conn_stat == CONN_OK) {
 80263c0:	4b28      	ldr	r3, [pc, #160]	; (8026464 <TokenCmdProcessing+0x168>)
 80263c2:	78db      	ldrb	r3, [r3, #3]
 80263c4:	b2db      	uxtb	r3, r3
 80263c6:	2b02      	cmp	r3, #2
 80263c8:	d11b      	bne.n	8026402 <TokenCmdProcessing+0x106>
				parc.data = NULL;
 80263ca:	2300      	movs	r3, #0
 80263cc:	60bb      	str	r3, [r7, #8]
				xQueueReceive(tcp_client_queue, &parc, 0);
 80263ce:	4b26      	ldr	r3, [pc, #152]	; (8026468 <TokenCmdProcessing+0x16c>)
 80263d0:	6818      	ldr	r0, [r3, #0]
 80263d2:	f107 0108 	add.w	r1, r7, #8
 80263d6:	2300      	movs	r3, #0
 80263d8:	2200      	movs	r2, #0
 80263da:	f7ef fb03 	bl	80159e4 <xQueueGenericReceive>
				SendRequestMsg(hprot.master_address, hprot.own_address,
 80263de:	4b21      	ldr	r3, [pc, #132]	; (8026464 <TokenCmdProcessing+0x168>)
 80263e0:	7c9b      	ldrb	r3, [r3, #18]
 80263e2:	b2d8      	uxtb	r0, r3
 80263e4:	4b1f      	ldr	r3, [pc, #124]	; (8026464 <TokenCmdProcessing+0x168>)
 80263e6:	7819      	ldrb	r1, [r3, #0]
 80263e8:	68ba      	ldr	r2, [r7, #8]
						parc.data, parc.len);
 80263ea:	89bb      	ldrh	r3, [r7, #12]
				SendRequestMsg(hprot.master_address, hprot.own_address,
 80263ec:	b2db      	uxtb	r3, r3
 80263ee:	f7ff fd31 	bl	8025e54 <SendRequestMsg>
				if (parc.data != NULL) {
 80263f2:	68bb      	ldr	r3, [r7, #8]
 80263f4:	2b00      	cmp	r3, #0
 80263f6:	d030      	beq.n	802645a <TokenCmdProcessing+0x15e>
					vPortFree(parc.data);
 80263f8:	68bb      	ldr	r3, [r7, #8]
 80263fa:	4618      	mov	r0, r3
 80263fc:	f7ee fe32 	bl	8015064 <vPortFree>
 8026400:	e02b      	b.n	802645a <TokenCmdProcessing+0x15e>
				}
			} else if (hprot.conn_stat == CONN_NO) {
 8026402:	4b18      	ldr	r3, [pc, #96]	; (8026464 <TokenCmdProcessing+0x168>)
 8026404:	78db      	ldrb	r3, [r3, #3]
 8026406:	b2db      	uxtb	r3, r3
 8026408:	2b00      	cmp	r3, #0
 802640a:	d109      	bne.n	8026420 <TokenCmdProcessing+0x124>
				SendConnectMsg(hprot.master_address, hprot.own_address, 0x6D);
 802640c:	4b15      	ldr	r3, [pc, #84]	; (8026464 <TokenCmdProcessing+0x168>)
 802640e:	7c9b      	ldrb	r3, [r3, #18]
 8026410:	b2d8      	uxtb	r0, r3
 8026412:	4b14      	ldr	r3, [pc, #80]	; (8026464 <TokenCmdProcessing+0x168>)
 8026414:	781b      	ldrb	r3, [r3, #0]
 8026416:	226d      	movs	r2, #109	; 0x6d
 8026418:	4619      	mov	r1, r3
 802641a:	f7ff fdb1 	bl	8025f80 <SendConnectMsg>
 802641e:	e01c      	b.n	802645a <TokenCmdProcessing+0x15e>
			} else if (hprot.conn_stat == CONN_AGAIN) {
 8026420:	4b10      	ldr	r3, [pc, #64]	; (8026464 <TokenCmdProcessing+0x168>)
 8026422:	78db      	ldrb	r3, [r3, #3]
 8026424:	b2db      	uxtb	r3, r3
 8026426:	2b03      	cmp	r3, #3
 8026428:	d109      	bne.n	802643e <TokenCmdProcessing+0x142>
				SendConnectMsg(hprot.master_address, hprot.own_address, 0x5D);
 802642a:	4b0e      	ldr	r3, [pc, #56]	; (8026464 <TokenCmdProcessing+0x168>)
 802642c:	7c9b      	ldrb	r3, [r3, #18]
 802642e:	b2d8      	uxtb	r0, r3
 8026430:	4b0c      	ldr	r3, [pc, #48]	; (8026464 <TokenCmdProcessing+0x168>)
 8026432:	781b      	ldrb	r3, [r3, #0]
 8026434:	225d      	movs	r2, #93	; 0x5d
 8026436:	4619      	mov	r1, r3
 8026438:	f7ff fda2 	bl	8025f80 <SendConnectMsg>
 802643c:	e00d      	b.n	802645a <TokenCmdProcessing+0x15e>
			} else {
				SendTokenMsg(GetNextMaster(&hprot), hprot.own_address);
 802643e:	4809      	ldr	r0, [pc, #36]	; (8026464 <TokenCmdProcessing+0x168>)
 8026440:	f000 fa63 	bl	802690a <GetNextMaster>
 8026444:	4603      	mov	r3, r0
 8026446:	461a      	mov	r2, r3
 8026448:	4b06      	ldr	r3, [pc, #24]	; (8026464 <TokenCmdProcessing+0x168>)
 802644a:	781b      	ldrb	r3, [r3, #0]
 802644c:	4619      	mov	r1, r3
 802644e:	4610      	mov	r0, r2
 8026450:	f7ff fc6c 	bl	8025d2c <SendTokenMsg>
				hprot.token_possession = 0U;
 8026454:	4b03      	ldr	r3, [pc, #12]	; (8026464 <TokenCmdProcessing+0x168>)
 8026456:	2200      	movs	r2, #0
 8026458:	705a      	strb	r2, [r3, #1]
			}
		}
	}
	return NO_ERR;
 802645a:	2300      	movs	r3, #0
}
 802645c:	4618      	mov	r0, r3
 802645e:	3710      	adds	r7, #16
 8026460:	46bd      	mov	sp, r7
 8026462:	bd80      	pop	{r7, pc}
 8026464:	20011ef4 	.word	0x20011ef4
 8026468:	20011f4c 	.word	0x20011f4c

0802646c <NoDataCmdProcessing>:

static inline error_t NoDataCmdProcessing(telegram_t * tel) {
 802646c:	b580      	push	{r7, lr}
 802646e:	b082      	sub	sp, #8
 8026470:	af00      	add	r7, sp, #0
 8026472:	6078      	str	r0, [r7, #4]
	if (tel->FC == 0x49) {
 8026474:	687b      	ldr	r3, [r7, #4]
 8026476:	795b      	ldrb	r3, [r3, #5]
 8026478:	2b49      	cmp	r3, #73	; 0x49
 802647a:	d107      	bne.n	802648c <NoDataCmdProcessing+0x20>
		SendNoDataMsg(tel->SA, tel->DA, 0x20);
 802647c:	687b      	ldr	r3, [r7, #4]
 802647e:	7918      	ldrb	r0, [r3, #4]
 8026480:	687b      	ldr	r3, [r7, #4]
 8026482:	78db      	ldrb	r3, [r3, #3]
 8026484:	2220      	movs	r2, #32
 8026486:	4619      	mov	r1, r3
 8026488:	f7ff fca2 	bl	8025dd0 <SendNoDataMsg>
		if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
			Error_Handler();
		}
#endif /* #ifdef WATCH_DOG_ON */
	}
	return NO_ERR;
 802648c:	2300      	movs	r3, #0
}
 802648e:	4618      	mov	r0, r3
 8026490:	3708      	adds	r7, #8
 8026492:	46bd      	mov	sp, r7
 8026494:	bd80      	pop	{r7, pc}
	...

08026498 <VarDataCmdProcessing>:

static inline error_t VarDataCmdProcessing(telegram_t * tel) {
 8026498:	b580      	push	{r7, lr}
 802649a:	b084      	sub	sp, #16
 802649c:	af00      	add	r7, sp, #0
 802649e:	6078      	str	r0, [r7, #4]

	if (tel->UK1 == 0xD0) {
 80264a0:	687b      	ldr	r3, [r7, #4]
 80264a2:	7a1b      	ldrb	r3, [r3, #8]
 80264a4:	2bd0      	cmp	r3, #208	; 0xd0
 80264a6:	d11a      	bne.n	80264de <VarDataCmdProcessing+0x46>
		if (tel->FC == 0x6C) {
 80264a8:	687b      	ldr	r3, [r7, #4]
 80264aa:	795b      	ldrb	r3, [r3, #5]
 80264ac:	2b6c      	cmp	r3, #108	; 0x6c
 80264ae:	d108      	bne.n	80264c2 <VarDataCmdProcessing+0x2a>
			hprot.confirm_status = CONF_NEED07;
 80264b0:	4b35      	ldr	r3, [pc, #212]	; (8026588 <VarDataCmdProcessing+0xf0>)
 80264b2:	2200      	movs	r2, #0
 80264b4:	709a      	strb	r2, [r3, #2]
			hprot.master_SAP = tel->SSAP;
 80264b6:	687b      	ldr	r3, [r7, #4]
 80264b8:	79da      	ldrb	r2, [r3, #7]
 80264ba:	4b33      	ldr	r3, [pc, #204]	; (8026588 <VarDataCmdProcessing+0xf0>)
 80264bc:	745a      	strb	r2, [r3, #17]
			SendAckMsg();
 80264be:	f7ff faed 	bl	8025a9c <SendAckMsg>
		}
		if (tel->FC == 0x5C) {
 80264c2:	687b      	ldr	r3, [r7, #4]
 80264c4:	795b      	ldrb	r3, [r3, #5]
 80264c6:	2b5c      	cmp	r3, #92	; 0x5c
 80264c8:	d14c      	bne.n	8026564 <VarDataCmdProcessing+0xcc>
			hprot.confirm_status = CONF_NEED07_AGAIN;
 80264ca:	4b2f      	ldr	r3, [pc, #188]	; (8026588 <VarDataCmdProcessing+0xf0>)
 80264cc:	2204      	movs	r2, #4
 80264ce:	709a      	strb	r2, [r3, #2]
			hprot.master_SAP = tel->SSAP;
 80264d0:	687b      	ldr	r3, [r7, #4]
 80264d2:	79da      	ldrb	r2, [r3, #7]
 80264d4:	4b2c      	ldr	r3, [pc, #176]	; (8026588 <VarDataCmdProcessing+0xf0>)
 80264d6:	745a      	strb	r2, [r3, #17]
			SendAckMsg();
 80264d8:	f7ff fae0 	bl	8025a9c <SendAckMsg>
 80264dc:	e042      	b.n	8026564 <VarDataCmdProcessing+0xcc>
		}
	} else if (tel->UK1 == 0x05) {
 80264de:	687b      	ldr	r3, [r7, #4]
 80264e0:	7a1b      	ldrb	r3, [r3, #8]
 80264e2:	2b05      	cmp	r3, #5
 80264e4:	d108      	bne.n	80264f8 <VarDataCmdProcessing+0x60>
		hprot.confirm_status = CONF_OK;
 80264e6:	4b28      	ldr	r3, [pc, #160]	; (8026588 <VarDataCmdProcessing+0xf0>)
 80264e8:	2203      	movs	r2, #3
 80264ea:	709a      	strb	r2, [r3, #2]
		hprot.conn_stat = CONN_OK;
 80264ec:	4b26      	ldr	r3, [pc, #152]	; (8026588 <VarDataCmdProcessing+0xf0>)
 80264ee:	2202      	movs	r2, #2
 80264f0:	70da      	strb	r2, [r3, #3]
		SendAckMsg();
 80264f2:	f7ff fad3 	bl	8025a9c <SendAckMsg>
 80264f6:	e035      	b.n	8026564 <VarDataCmdProcessing+0xcc>
	} else if (tel->UK1 == 0xB0) {
 80264f8:	687b      	ldr	r3, [r7, #4]
 80264fa:	7a1b      	ldrb	r3, [r3, #8]
 80264fc:	2bb0      	cmp	r3, #176	; 0xb0
 80264fe:	d102      	bne.n	8026506 <VarDataCmdProcessing+0x6e>
		SendAckMsg();
 8026500:	f7ff facc 	bl	8025a9c <SendAckMsg>
 8026504:	e02e      	b.n	8026564 <VarDataCmdProcessing+0xcc>
	} else if (tel->UK1 == 0xC0) {
 8026506:	687b      	ldr	r3, [r7, #4]
 8026508:	7a1b      	ldrb	r3, [r3, #8]
 802650a:	2bc0      	cmp	r3, #192	; 0xc0
 802650c:	d02a      	beq.n	8026564 <VarDataCmdProcessing+0xcc>
		/* No ACK */
	} else if ((tel->FC == 0x7C) || (tel->FC == 0x5C)) {
 802650e:	687b      	ldr	r3, [r7, #4]
 8026510:	795b      	ldrb	r3, [r3, #5]
 8026512:	2b7c      	cmp	r3, #124	; 0x7c
 8026514:	d003      	beq.n	802651e <VarDataCmdProcessing+0x86>
 8026516:	687b      	ldr	r3, [r7, #4]
 8026518:	795b      	ldrb	r3, [r3, #5]
 802651a:	2b5c      	cmp	r3, #92	; 0x5c
 802651c:	d120      	bne.n	8026560 <VarDataCmdProcessing+0xc8>
		parcel_t parc;
		parc.len = tel->LE - 7;
 802651e:	687b      	ldr	r3, [r7, #4]
 8026520:	785b      	ldrb	r3, [r3, #1]
 8026522:	b29b      	uxth	r3, r3
 8026524:	3b07      	subs	r3, #7
 8026526:	b29b      	uxth	r3, r3
 8026528:	81bb      	strh	r3, [r7, #12]
		parc.data = pvPortMalloc(parc.len);
 802652a:	89bb      	ldrh	r3, [r7, #12]
 802652c:	4618      	mov	r0, r3
 802652e:	f7ee fcd7 	bl	8014ee0 <pvPortMalloc>
 8026532:	4603      	mov	r3, r0
 8026534:	60bb      	str	r3, [r7, #8]
		memcpy(parc.data, tel->PDU, parc.len);
 8026536:	68b8      	ldr	r0, [r7, #8]
 8026538:	687b      	ldr	r3, [r7, #4]
 802653a:	68db      	ldr	r3, [r3, #12]
 802653c:	89ba      	ldrh	r2, [r7, #12]
 802653e:	4619      	mov	r1, r3
 8026540:	f001 ff95 	bl	802846e <memcpy>
		xQueueSend(protocol_queue, &parc, 0);
 8026544:	4b11      	ldr	r3, [pc, #68]	; (802658c <VarDataCmdProcessing+0xf4>)
 8026546:	6818      	ldr	r0, [r3, #0]
 8026548:	f107 0108 	add.w	r1, r7, #8
 802654c:	2300      	movs	r3, #0
 802654e:	2200      	movs	r2, #0
 8026550:	f7ef f830 	bl	80155b4 <xQueueGenericSend>
		hprot.confirm_status = CONF_NEED08;
 8026554:	4b0c      	ldr	r3, [pc, #48]	; (8026588 <VarDataCmdProcessing+0xf0>)
 8026556:	2201      	movs	r2, #1
 8026558:	709a      	strb	r2, [r3, #2]
		SendAckMsg();
 802655a:	f7ff fa9f 	bl	8025a9c <SendAckMsg>
	} else if ((tel->FC == 0x7C) || (tel->FC == 0x5C)) {
 802655e:	e001      	b.n	8026564 <VarDataCmdProcessing+0xcc>
	} else {
		SendAckMsg();
 8026560:	f7ff fa9c 	bl	8025a9c <SendAckMsg>
	}

	if (tel->PDU != NULL) {
 8026564:	687b      	ldr	r3, [r7, #4]
 8026566:	68db      	ldr	r3, [r3, #12]
 8026568:	2b00      	cmp	r3, #0
 802656a:	d007      	beq.n	802657c <VarDataCmdProcessing+0xe4>
		vPortFree(tel->PDU);
 802656c:	687b      	ldr	r3, [r7, #4]
 802656e:	68db      	ldr	r3, [r3, #12]
 8026570:	4618      	mov	r0, r3
 8026572:	f7ee fd77 	bl	8015064 <vPortFree>
		tel->PDU = NULL;
 8026576:	687b      	ldr	r3, [r7, #4]
 8026578:	2200      	movs	r2, #0
 802657a:	60da      	str	r2, [r3, #12]
	}
	return NO_ERR;
 802657c:	2300      	movs	r3, #0
}
 802657e:	4618      	mov	r0, r3
 8026580:	3710      	adds	r7, #16
 8026582:	46bd      	mov	sp, r7
 8026584:	bd80      	pop	{r7, pc}
 8026586:	bf00      	nop
 8026588:	20011ef4 	.word	0x20011ef4
 802658c:	20011f0c 	.word	0x20011f0c

08026590 <CommandParser>:
static inline error_t FixDataCmdProcessing(telegram_t * tel) {

	return NO_ERR;
}

error_t CommandParser(uint8_t *buf) {
 8026590:	b580      	push	{r7, lr}
 8026592:	b086      	sub	sp, #24
 8026594:	af00      	add	r7, sp, #0
 8026596:	6078      	str	r0, [r7, #4]
	static uint8_t skip_first = 1;
	static telegram_t htel;
	uint8_t size = buf[SIZE_OF_CMD_BUF - 1];
 8026598:	687b      	ldr	r3, [r7, #4]
 802659a:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 802659e:	75fb      	strb	r3, [r7, #23]
	htel.SD = *buf++;
 80265a0:	687b      	ldr	r3, [r7, #4]
 80265a2:	1c5a      	adds	r2, r3, #1
 80265a4:	607a      	str	r2, [r7, #4]
 80265a6:	781a      	ldrb	r2, [r3, #0]
 80265a8:	4b9a      	ldr	r3, [pc, #616]	; (8026814 <CommandParser+0x284>)
 80265aa:	701a      	strb	r2, [r3, #0]
	switch (htel.SD) {
 80265ac:	4b99      	ldr	r3, [pc, #612]	; (8026814 <CommandParser+0x284>)
 80265ae:	781b      	ldrb	r3, [r3, #0]
 80265b0:	2ba2      	cmp	r3, #162	; 0xa2
 80265b2:	f000 818b 	beq.w	80268cc <CommandParser+0x33c>
 80265b6:	2ba2      	cmp	r3, #162	; 0xa2
 80265b8:	dc04      	bgt.n	80265c4 <CommandParser+0x34>
 80265ba:	2b10      	cmp	r3, #16
 80265bc:	d030      	beq.n	8026620 <CommandParser+0x90>
 80265be:	2b68      	cmp	r3, #104	; 0x68
 80265c0:	d077      	beq.n	80266b2 <CommandParser+0x122>
 80265c2:	e181      	b.n	80268c8 <CommandParser+0x338>
 80265c4:	2bdc      	cmp	r3, #220	; 0xdc
 80265c6:	d003      	beq.n	80265d0 <CommandParser+0x40>
 80265c8:	2be5      	cmp	r3, #229	; 0xe5
 80265ca:	f000 8168 	beq.w	802689e <CommandParser+0x30e>
 80265ce:	e17b      	b.n	80268c8 <CommandParser+0x338>
	case 0xDC: /* Token  */
		/* Format: |SD4|DA|SA|*/
		if (size != 3) {
 80265d0:	7dfb      	ldrb	r3, [r7, #23]
 80265d2:	2b03      	cmp	r3, #3
 80265d4:	d001      	beq.n	80265da <CommandParser+0x4a>
			return SIZE_ERR;
 80265d6:	2304      	movs	r3, #4
 80265d8:	e17a      	b.n	80268d0 <CommandParser+0x340>
		}
		htel.DA = *buf++;
 80265da:	687b      	ldr	r3, [r7, #4]
 80265dc:	1c5a      	adds	r2, r3, #1
 80265de:	607a      	str	r2, [r7, #4]
 80265e0:	781a      	ldrb	r2, [r3, #0]
 80265e2:	4b8c      	ldr	r3, [pc, #560]	; (8026814 <CommandParser+0x284>)
 80265e4:	70da      	strb	r2, [r3, #3]
		htel.SA = *buf;
 80265e6:	687b      	ldr	r3, [r7, #4]
 80265e8:	781a      	ldrb	r2, [r3, #0]
 80265ea:	4b8a      	ldr	r3, [pc, #552]	; (8026814 <CommandParser+0x284>)
 80265ec:	711a      	strb	r2, [r3, #4]
		AddMaster(&hprot, htel.DA);
 80265ee:	4b89      	ldr	r3, [pc, #548]	; (8026814 <CommandParser+0x284>)
 80265f0:	78db      	ldrb	r3, [r3, #3]
 80265f2:	4619      	mov	r1, r3
 80265f4:	4888      	ldr	r0, [pc, #544]	; (8026818 <CommandParser+0x288>)
 80265f6:	f000 f973 	bl	80268e0 <AddMaster>
		AddMaster(&hprot, htel.SA);
 80265fa:	4b86      	ldr	r3, [pc, #536]	; (8026814 <CommandParser+0x284>)
 80265fc:	791b      	ldrb	r3, [r3, #4]
 80265fe:	4619      	mov	r1, r3
 8026600:	4885      	ldr	r0, [pc, #532]	; (8026818 <CommandParser+0x288>)
 8026602:	f000 f96d 	bl	80268e0 <AddMaster>
		if (htel.DA != hprot.own_address) {
 8026606:	4b83      	ldr	r3, [pc, #524]	; (8026814 <CommandParser+0x284>)
 8026608:	78da      	ldrb	r2, [r3, #3]
 802660a:	4b83      	ldr	r3, [pc, #524]	; (8026818 <CommandParser+0x288>)
 802660c:	781b      	ldrb	r3, [r3, #0]
 802660e:	429a      	cmp	r2, r3
 8026610:	d001      	beq.n	8026616 <CommandParser+0x86>
			return NO_ERR;
 8026612:	2300      	movs	r3, #0
 8026614:	e15c      	b.n	80268d0 <CommandParser+0x340>
		}
		return TokenCmdProcessing(&htel);
 8026616:	487f      	ldr	r0, [pc, #508]	; (8026814 <CommandParser+0x284>)
 8026618:	f7ff fe70 	bl	80262fc <TokenCmdProcessing>
 802661c:	4603      	mov	r3, r0
 802661e:	e157      	b.n	80268d0 <CommandParser+0x340>
		break;
	case 0x10: /* No data */
		/* Format: |SD1|DA|SA|FC|FCS|ED| */
		if (CalculateFCS(buf, 3) != *(buf + 3)) {
 8026620:	2103      	movs	r1, #3
 8026622:	6878      	ldr	r0, [r7, #4]
 8026624:	f7ff fe4e 	bl	80262c4 <CalculateFCS>
 8026628:	4603      	mov	r3, r0
 802662a:	461a      	mov	r2, r3
 802662c:	687b      	ldr	r3, [r7, #4]
 802662e:	3303      	adds	r3, #3
 8026630:	781b      	ldrb	r3, [r3, #0]
 8026632:	429a      	cmp	r2, r3
 8026634:	d001      	beq.n	802663a <CommandParser+0xaa>
			return FCS_ERR;
 8026636:	2307      	movs	r3, #7
 8026638:	e14a      	b.n	80268d0 <CommandParser+0x340>
		}
		htel.DA = *buf++;
 802663a:	687b      	ldr	r3, [r7, #4]
 802663c:	1c5a      	adds	r2, r3, #1
 802663e:	607a      	str	r2, [r7, #4]
 8026640:	781a      	ldrb	r2, [r3, #0]
 8026642:	4b74      	ldr	r3, [pc, #464]	; (8026814 <CommandParser+0x284>)
 8026644:	70da      	strb	r2, [r3, #3]
		htel.SA = *buf++;
 8026646:	687b      	ldr	r3, [r7, #4]
 8026648:	1c5a      	adds	r2, r3, #1
 802664a:	607a      	str	r2, [r7, #4]
 802664c:	781a      	ldrb	r2, [r3, #0]
 802664e:	4b71      	ldr	r3, [pc, #452]	; (8026814 <CommandParser+0x284>)
 8026650:	711a      	strb	r2, [r3, #4]
		htel.FC = *buf++;
 8026652:	687b      	ldr	r3, [r7, #4]
 8026654:	1c5a      	adds	r2, r3, #1
 8026656:	607a      	str	r2, [r7, #4]
 8026658:	781a      	ldrb	r2, [r3, #0]
 802665a:	4b6e      	ldr	r3, [pc, #440]	; (8026814 <CommandParser+0x284>)
 802665c:	715a      	strb	r2, [r3, #5]
		if (htel.FC == 0x20){
 802665e:	4b6d      	ldr	r3, [pc, #436]	; (8026814 <CommandParser+0x284>)
 8026660:	795b      	ldrb	r3, [r3, #5]
 8026662:	2b20      	cmp	r3, #32
 8026664:	d105      	bne.n	8026672 <CommandParser+0xe2>
			AddMaster(&hprot, htel.SA);
 8026666:	4b6b      	ldr	r3, [pc, #428]	; (8026814 <CommandParser+0x284>)
 8026668:	791b      	ldrb	r3, [r3, #4]
 802666a:	4619      	mov	r1, r3
 802666c:	486a      	ldr	r0, [pc, #424]	; (8026818 <CommandParser+0x288>)
 802666e:	f000 f937 	bl	80268e0 <AddMaster>
		}
		if (htel.DA != hprot.own_address) {
 8026672:	4b68      	ldr	r3, [pc, #416]	; (8026814 <CommandParser+0x284>)
 8026674:	78da      	ldrb	r2, [r3, #3]
 8026676:	4b68      	ldr	r3, [pc, #416]	; (8026818 <CommandParser+0x288>)
 8026678:	781b      	ldrb	r3, [r3, #0]
 802667a:	429a      	cmp	r2, r3
 802667c:	d001      	beq.n	8026682 <CommandParser+0xf2>
			return NO_ERR;
 802667e:	2300      	movs	r3, #0
 8026680:	e126      	b.n	80268d0 <CommandParser+0x340>
		}
		htel.FCS = *buf++;
 8026682:	687b      	ldr	r3, [r7, #4]
 8026684:	1c5a      	adds	r2, r3, #1
 8026686:	607a      	str	r2, [r7, #4]
 8026688:	781a      	ldrb	r2, [r3, #0]
 802668a:	4b62      	ldr	r3, [pc, #392]	; (8026814 <CommandParser+0x284>)
 802668c:	741a      	strb	r2, [r3, #16]
		htel.ED = *buf;
 802668e:	687b      	ldr	r3, [r7, #4]
 8026690:	781a      	ldrb	r2, [r3, #0]
 8026692:	4b60      	ldr	r3, [pc, #384]	; (8026814 <CommandParser+0x284>)
 8026694:	745a      	strb	r2, [r3, #17]
		if (skip_first) {
 8026696:	4b61      	ldr	r3, [pc, #388]	; (802681c <CommandParser+0x28c>)
 8026698:	781b      	ldrb	r3, [r3, #0]
 802669a:	2b00      	cmp	r3, #0
 802669c:	d004      	beq.n	80266a8 <CommandParser+0x118>
			skip_first = 0;
 802669e:	4b5f      	ldr	r3, [pc, #380]	; (802681c <CommandParser+0x28c>)
 80266a0:	2200      	movs	r2, #0
 80266a2:	701a      	strb	r2, [r3, #0]
			return NO_ERR;
 80266a4:	2300      	movs	r3, #0
 80266a6:	e113      	b.n	80268d0 <CommandParser+0x340>
		} else {
			return NoDataCmdProcessing(&htel);
 80266a8:	485a      	ldr	r0, [pc, #360]	; (8026814 <CommandParser+0x284>)
 80266aa:	f7ff fedf 	bl	802646c <NoDataCmdProcessing>
 80266ae:	4603      	mov	r3, r0
 80266b0:	e10e      	b.n	80268d0 <CommandParser+0x340>
		break;
	case 0x68:
		/* Variable length data */
		/* Format by wiki: |SD2|LE|LEr|SD2|DA|SA|FC|DSAP|SSAP|PDU|FCS|ED| */
		/* Real MPI frame: |SD2|LE|LEr|SD2|DA|SA|FC|DSAP|SSAP|F1/[B0|0x]|RN|PDU|FCS|ED| */
		htel.LE = *buf++;
 80266b2:	687b      	ldr	r3, [r7, #4]
 80266b4:	1c5a      	adds	r2, r3, #1
 80266b6:	607a      	str	r2, [r7, #4]
 80266b8:	781a      	ldrb	r2, [r3, #0]
 80266ba:	4b56      	ldr	r3, [pc, #344]	; (8026814 <CommandParser+0x284>)
 80266bc:	705a      	strb	r2, [r3, #1]
		htel.LEr = *buf++;
 80266be:	687b      	ldr	r3, [r7, #4]
 80266c0:	1c5a      	adds	r2, r3, #1
 80266c2:	607a      	str	r2, [r7, #4]
 80266c4:	781a      	ldrb	r2, [r3, #0]
 80266c6:	4b53      	ldr	r3, [pc, #332]	; (8026814 <CommandParser+0x284>)
 80266c8:	709a      	strb	r2, [r3, #2]
		buf++;
 80266ca:	687b      	ldr	r3, [r7, #4]
 80266cc:	3301      	adds	r3, #1
 80266ce:	607b      	str	r3, [r7, #4]
		if (htel.LE != htel.LEr) {
 80266d0:	4b50      	ldr	r3, [pc, #320]	; (8026814 <CommandParser+0x284>)
 80266d2:	785a      	ldrb	r2, [r3, #1]
 80266d4:	4b4f      	ldr	r3, [pc, #316]	; (8026814 <CommandParser+0x284>)
 80266d6:	789b      	ldrb	r3, [r3, #2]
 80266d8:	429a      	cmp	r2, r3
 80266da:	d001      	beq.n	80266e0 <CommandParser+0x150>
			return FRAME_ERR;
 80266dc:	2306      	movs	r3, #6
 80266de:	e0f7      	b.n	80268d0 <CommandParser+0x340>
		}
		if (CalculateFCS(buf, htel.LE) != *(buf + htel.LE)) {
 80266e0:	4b4c      	ldr	r3, [pc, #304]	; (8026814 <CommandParser+0x284>)
 80266e2:	785b      	ldrb	r3, [r3, #1]
 80266e4:	4619      	mov	r1, r3
 80266e6:	6878      	ldr	r0, [r7, #4]
 80266e8:	f7ff fdec 	bl	80262c4 <CalculateFCS>
 80266ec:	4603      	mov	r3, r0
 80266ee:	461a      	mov	r2, r3
 80266f0:	4b48      	ldr	r3, [pc, #288]	; (8026814 <CommandParser+0x284>)
 80266f2:	785b      	ldrb	r3, [r3, #1]
 80266f4:	4619      	mov	r1, r3
 80266f6:	687b      	ldr	r3, [r7, #4]
 80266f8:	440b      	add	r3, r1
 80266fa:	781b      	ldrb	r3, [r3, #0]
 80266fc:	429a      	cmp	r2, r3
 80266fe:	d001      	beq.n	8026704 <CommandParser+0x174>
			return FCS_ERR;
 8026700:	2307      	movs	r3, #7
 8026702:	e0e5      	b.n	80268d0 <CommandParser+0x340>
		}
		htel.DA = *buf++;
 8026704:	687b      	ldr	r3, [r7, #4]
 8026706:	1c5a      	adds	r2, r3, #1
 8026708:	607a      	str	r2, [r7, #4]
 802670a:	781a      	ldrb	r2, [r3, #0]
 802670c:	4b41      	ldr	r3, [pc, #260]	; (8026814 <CommandParser+0x284>)
 802670e:	70da      	strb	r2, [r3, #3]
		if ((htel.DA & 0x7F) != hprot.own_address) { /* Broadcast message */
 8026710:	4b40      	ldr	r3, [pc, #256]	; (8026814 <CommandParser+0x284>)
 8026712:	78db      	ldrb	r3, [r3, #3]
 8026714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8026718:	4a3f      	ldr	r2, [pc, #252]	; (8026818 <CommandParser+0x288>)
 802671a:	7812      	ldrb	r2, [r2, #0]
 802671c:	4293      	cmp	r3, r2
 802671e:	d001      	beq.n	8026724 <CommandParser+0x194>
			return NO_ERR;
 8026720:	2300      	movs	r3, #0
 8026722:	e0d5      	b.n	80268d0 <CommandParser+0x340>
		}
		htel.SA = *buf++;
 8026724:	687b      	ldr	r3, [r7, #4]
 8026726:	1c5a      	adds	r2, r3, #1
 8026728:	607a      	str	r2, [r7, #4]
 802672a:	781a      	ldrb	r2, [r3, #0]
 802672c:	4b39      	ldr	r3, [pc, #228]	; (8026814 <CommandParser+0x284>)
 802672e:	711a      	strb	r2, [r3, #4]
		htel.FC = *buf++;
 8026730:	687b      	ldr	r3, [r7, #4]
 8026732:	1c5a      	adds	r2, r3, #1
 8026734:	607a      	str	r2, [r7, #4]
 8026736:	781a      	ldrb	r2, [r3, #0]
 8026738:	4b36      	ldr	r3, [pc, #216]	; (8026814 <CommandParser+0x284>)
 802673a:	715a      	strb	r2, [r3, #5]
		htel.DSAP = *buf++;
 802673c:	687b      	ldr	r3, [r7, #4]
 802673e:	1c5a      	adds	r2, r3, #1
 8026740:	607a      	str	r2, [r7, #4]
 8026742:	781a      	ldrb	r2, [r3, #0]
 8026744:	4b33      	ldr	r3, [pc, #204]	; (8026814 <CommandParser+0x284>)
 8026746:	719a      	strb	r2, [r3, #6]
		htel.SSAP = *buf++;
 8026748:	687b      	ldr	r3, [r7, #4]
 802674a:	1c5a      	adds	r2, r3, #1
 802674c:	607a      	str	r2, [r7, #4]
 802674e:	781a      	ldrb	r2, [r3, #0]
 8026750:	4b30      	ldr	r3, [pc, #192]	; (8026814 <CommandParser+0x284>)
 8026752:	71da      	strb	r2, [r3, #7]
		htel.UK1 = *buf++;
 8026754:	687b      	ldr	r3, [r7, #4]
 8026756:	1c5a      	adds	r2, r3, #1
 8026758:	607a      	str	r2, [r7, #4]
 802675a:	781a      	ldrb	r2, [r3, #0]
 802675c:	4b2d      	ldr	r3, [pc, #180]	; (8026814 <CommandParser+0x284>)
 802675e:	721a      	strb	r2, [r3, #8]

		if (htel.UK1 == 0xC0) {
 8026760:	4b2c      	ldr	r3, [pc, #176]	; (8026814 <CommandParser+0x284>)
 8026762:	7a1b      	ldrb	r3, [r3, #8]
 8026764:	2bc0      	cmp	r3, #192	; 0xc0
 8026766:	d10a      	bne.n	802677e <CommandParser+0x1ee>
			htel.FCS = *buf++;
 8026768:	687b      	ldr	r3, [r7, #4]
 802676a:	1c5a      	adds	r2, r3, #1
 802676c:	607a      	str	r2, [r7, #4]
 802676e:	781a      	ldrb	r2, [r3, #0]
 8026770:	4b28      	ldr	r3, [pc, #160]	; (8026814 <CommandParser+0x284>)
 8026772:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 8026774:	687b      	ldr	r3, [r7, #4]
 8026776:	781a      	ldrb	r2, [r3, #0]
 8026778:	4b26      	ldr	r3, [pc, #152]	; (8026814 <CommandParser+0x284>)
 802677a:	745a      	strb	r2, [r3, #17]
 802677c:	e08a      	b.n	8026894 <CommandParser+0x304>
		} else if (htel.UK1 == 0xB0) {
 802677e:	4b25      	ldr	r3, [pc, #148]	; (8026814 <CommandParser+0x284>)
 8026780:	7a1b      	ldrb	r3, [r3, #8]
 8026782:	2bb0      	cmp	r3, #176	; 0xb0
 8026784:	d116      	bne.n	80267b4 <CommandParser+0x224>
			htel.UK2 = *buf++;
 8026786:	687b      	ldr	r3, [r7, #4]
 8026788:	1c5a      	adds	r2, r3, #1
 802678a:	607a      	str	r2, [r7, #4]
 802678c:	781a      	ldrb	r2, [r3, #0]
 802678e:	4b21      	ldr	r3, [pc, #132]	; (8026814 <CommandParser+0x284>)
 8026790:	725a      	strb	r2, [r3, #9]
			htel.RN = *buf++;
 8026792:	687b      	ldr	r3, [r7, #4]
 8026794:	1c5a      	adds	r2, r3, #1
 8026796:	607a      	str	r2, [r7, #4]
 8026798:	781a      	ldrb	r2, [r3, #0]
 802679a:	4b1e      	ldr	r3, [pc, #120]	; (8026814 <CommandParser+0x284>)
 802679c:	729a      	strb	r2, [r3, #10]
			htel.FCS = *buf++;
 802679e:	687b      	ldr	r3, [r7, #4]
 80267a0:	1c5a      	adds	r2, r3, #1
 80267a2:	607a      	str	r2, [r7, #4]
 80267a4:	781a      	ldrb	r2, [r3, #0]
 80267a6:	4b1b      	ldr	r3, [pc, #108]	; (8026814 <CommandParser+0x284>)
 80267a8:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 80267aa:	687b      	ldr	r3, [r7, #4]
 80267ac:	781a      	ldrb	r2, [r3, #0]
 80267ae:	4b19      	ldr	r3, [pc, #100]	; (8026814 <CommandParser+0x284>)
 80267b0:	745a      	strb	r2, [r3, #17]
 80267b2:	e06f      	b.n	8026894 <CommandParser+0x304>
		} else if (htel.UK1 == 0xD0) {
 80267b4:	4b17      	ldr	r3, [pc, #92]	; (8026814 <CommandParser+0x284>)
 80267b6:	7a1b      	ldrb	r3, [r3, #8]
 80267b8:	2bd0      	cmp	r3, #208	; 0xd0
 80267ba:	d131      	bne.n	8026820 <CommandParser+0x290>
			htel.UK2 = *buf++;
 80267bc:	687b      	ldr	r3, [r7, #4]
 80267be:	1c5a      	adds	r2, r3, #1
 80267c0:	607a      	str	r2, [r7, #4]
 80267c2:	781a      	ldrb	r2, [r3, #0]
 80267c4:	4b13      	ldr	r3, [pc, #76]	; (8026814 <CommandParser+0x284>)
 80267c6:	725a      	strb	r2, [r3, #9]
			htel.RN = *buf++;
 80267c8:	687b      	ldr	r3, [r7, #4]
 80267ca:	1c5a      	adds	r2, r3, #1
 80267cc:	607a      	str	r2, [r7, #4]
 80267ce:	781a      	ldrb	r2, [r3, #0]
 80267d0:	4b10      	ldr	r3, [pc, #64]	; (8026814 <CommandParser+0x284>)
 80267d2:	729a      	strb	r2, [r3, #10]
			uint pdu_size = htel.LE - 8;
 80267d4:	4b0f      	ldr	r3, [pc, #60]	; (8026814 <CommandParser+0x284>)
 80267d6:	785b      	ldrb	r3, [r3, #1]
 80267d8:	3b08      	subs	r3, #8
 80267da:	613b      	str	r3, [r7, #16]
			htel.PDU = (uint8_t*) pvPortMalloc(pdu_size);
 80267dc:	6938      	ldr	r0, [r7, #16]
 80267de:	f7ee fb7f 	bl	8014ee0 <pvPortMalloc>
 80267e2:	4602      	mov	r2, r0
 80267e4:	4b0b      	ldr	r3, [pc, #44]	; (8026814 <CommandParser+0x284>)
 80267e6:	60da      	str	r2, [r3, #12]
			memcpy(htel.PDU, buf, pdu_size);
 80267e8:	4b0a      	ldr	r3, [pc, #40]	; (8026814 <CommandParser+0x284>)
 80267ea:	68db      	ldr	r3, [r3, #12]
 80267ec:	693a      	ldr	r2, [r7, #16]
 80267ee:	6879      	ldr	r1, [r7, #4]
 80267f0:	4618      	mov	r0, r3
 80267f2:	f001 fe3c 	bl	802846e <memcpy>
			buf += pdu_size;
 80267f6:	687a      	ldr	r2, [r7, #4]
 80267f8:	693b      	ldr	r3, [r7, #16]
 80267fa:	4413      	add	r3, r2
 80267fc:	607b      	str	r3, [r7, #4]
			htel.FCS = *buf++;
 80267fe:	687b      	ldr	r3, [r7, #4]
 8026800:	1c5a      	adds	r2, r3, #1
 8026802:	607a      	str	r2, [r7, #4]
 8026804:	781a      	ldrb	r2, [r3, #0]
 8026806:	4b03      	ldr	r3, [pc, #12]	; (8026814 <CommandParser+0x284>)
 8026808:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 802680a:	687b      	ldr	r3, [r7, #4]
 802680c:	781a      	ldrb	r2, [r3, #0]
 802680e:	4b01      	ldr	r3, [pc, #4]	; (8026814 <CommandParser+0x284>)
 8026810:	745a      	strb	r2, [r3, #17]
 8026812:	e03f      	b.n	8026894 <CommandParser+0x304>
 8026814:	20009ea8 	.word	0x20009ea8
 8026818:	20011ef4 	.word	0x20011ef4
 802681c:	20000060 	.word	0x20000060
		} else if (htel.UK1 == 0x05) {
 8026820:	4b2d      	ldr	r3, [pc, #180]	; (80268d8 <CommandParser+0x348>)
 8026822:	7a1b      	ldrb	r3, [r3, #8]
 8026824:	2b05      	cmp	r3, #5
 8026826:	d110      	bne.n	802684a <CommandParser+0x2ba>
			htel.UK2 = *buf++;
 8026828:	687b      	ldr	r3, [r7, #4]
 802682a:	1c5a      	adds	r2, r3, #1
 802682c:	607a      	str	r2, [r7, #4]
 802682e:	781a      	ldrb	r2, [r3, #0]
 8026830:	4b29      	ldr	r3, [pc, #164]	; (80268d8 <CommandParser+0x348>)
 8026832:	725a      	strb	r2, [r3, #9]
			htel.FCS = *buf++;
 8026834:	687b      	ldr	r3, [r7, #4]
 8026836:	1c5a      	adds	r2, r3, #1
 8026838:	607a      	str	r2, [r7, #4]
 802683a:	781a      	ldrb	r2, [r3, #0]
 802683c:	4b26      	ldr	r3, [pc, #152]	; (80268d8 <CommandParser+0x348>)
 802683e:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 8026840:	687b      	ldr	r3, [r7, #4]
 8026842:	781a      	ldrb	r2, [r3, #0]
 8026844:	4b24      	ldr	r3, [pc, #144]	; (80268d8 <CommandParser+0x348>)
 8026846:	745a      	strb	r2, [r3, #17]
 8026848:	e024      	b.n	8026894 <CommandParser+0x304>
		} else {
			htel.RN = *buf++;
 802684a:	687b      	ldr	r3, [r7, #4]
 802684c:	1c5a      	adds	r2, r3, #1
 802684e:	607a      	str	r2, [r7, #4]
 8026850:	781a      	ldrb	r2, [r3, #0]
 8026852:	4b21      	ldr	r3, [pc, #132]	; (80268d8 <CommandParser+0x348>)
 8026854:	729a      	strb	r2, [r3, #10]
			uint pdu_size = htel.LE - 7;
 8026856:	4b20      	ldr	r3, [pc, #128]	; (80268d8 <CommandParser+0x348>)
 8026858:	785b      	ldrb	r3, [r3, #1]
 802685a:	3b07      	subs	r3, #7
 802685c:	60fb      	str	r3, [r7, #12]
			htel.PDU = (uint8_t*) pvPortMalloc(pdu_size);
 802685e:	68f8      	ldr	r0, [r7, #12]
 8026860:	f7ee fb3e 	bl	8014ee0 <pvPortMalloc>
 8026864:	4602      	mov	r2, r0
 8026866:	4b1c      	ldr	r3, [pc, #112]	; (80268d8 <CommandParser+0x348>)
 8026868:	60da      	str	r2, [r3, #12]
			memcpy(htel.PDU, buf, pdu_size);
 802686a:	4b1b      	ldr	r3, [pc, #108]	; (80268d8 <CommandParser+0x348>)
 802686c:	68db      	ldr	r3, [r3, #12]
 802686e:	68fa      	ldr	r2, [r7, #12]
 8026870:	6879      	ldr	r1, [r7, #4]
 8026872:	4618      	mov	r0, r3
 8026874:	f001 fdfb 	bl	802846e <memcpy>
			buf += pdu_size;
 8026878:	687a      	ldr	r2, [r7, #4]
 802687a:	68fb      	ldr	r3, [r7, #12]
 802687c:	4413      	add	r3, r2
 802687e:	607b      	str	r3, [r7, #4]
			htel.FCS = *buf++;
 8026880:	687b      	ldr	r3, [r7, #4]
 8026882:	1c5a      	adds	r2, r3, #1
 8026884:	607a      	str	r2, [r7, #4]
 8026886:	781a      	ldrb	r2, [r3, #0]
 8026888:	4b13      	ldr	r3, [pc, #76]	; (80268d8 <CommandParser+0x348>)
 802688a:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 802688c:	687b      	ldr	r3, [r7, #4]
 802688e:	781a      	ldrb	r2, [r3, #0]
 8026890:	4b11      	ldr	r3, [pc, #68]	; (80268d8 <CommandParser+0x348>)
 8026892:	745a      	strb	r2, [r3, #17]
		}
		return VarDataCmdProcessing(&htel);
 8026894:	4810      	ldr	r0, [pc, #64]	; (80268d8 <CommandParser+0x348>)
 8026896:	f7ff fdff 	bl	8026498 <VarDataCmdProcessing>
 802689a:	4603      	mov	r3, r0
 802689c:	e018      	b.n	80268d0 <CommandParser+0x340>
	case 0xA2:
		/* Fixed length data */
		break;
	case 0xE5:
		/* Acknowledgment */
		if (hprot.token_possession == 1U) {
 802689e:	4b0f      	ldr	r3, [pc, #60]	; (80268dc <CommandParser+0x34c>)
 80268a0:	785b      	ldrb	r3, [r3, #1]
 80268a2:	b2db      	uxtb	r3, r3
 80268a4:	2b01      	cmp	r3, #1
 80268a6:	d10d      	bne.n	80268c4 <CommandParser+0x334>
			SendTokenMsg(GetNextMaster(&hprot), hprot.own_address);
 80268a8:	480c      	ldr	r0, [pc, #48]	; (80268dc <CommandParser+0x34c>)
 80268aa:	f000 f82e 	bl	802690a <GetNextMaster>
 80268ae:	4603      	mov	r3, r0
 80268b0:	461a      	mov	r2, r3
 80268b2:	4b0a      	ldr	r3, [pc, #40]	; (80268dc <CommandParser+0x34c>)
 80268b4:	781b      	ldrb	r3, [r3, #0]
 80268b6:	4619      	mov	r1, r3
 80268b8:	4610      	mov	r0, r2
 80268ba:	f7ff fa37 	bl	8025d2c <SendTokenMsg>
			hprot.token_possession = 0U;
 80268be:	4b07      	ldr	r3, [pc, #28]	; (80268dc <CommandParser+0x34c>)
 80268c0:	2200      	movs	r2, #0
 80268c2:	705a      	strb	r2, [r3, #1]
		}
		return NO_ERR;
 80268c4:	2300      	movs	r3, #0
 80268c6:	e003      	b.n	80268d0 <CommandParser+0x340>
		break;
	default:
		return UNKNOWN_SD_ERR;
 80268c8:	2305      	movs	r3, #5
 80268ca:	e001      	b.n	80268d0 <CommandParser+0x340>
		break;
 80268cc:	bf00      	nop
	}
	return NO_ERR;
 80268ce:	2300      	movs	r3, #0
}
 80268d0:	4618      	mov	r0, r3
 80268d2:	3718      	adds	r7, #24
 80268d4:	46bd      	mov	sp, r7
 80268d6:	bd80      	pop	{r7, pc}
 80268d8:	20009ea8 	.word	0x20009ea8
 80268dc:	20011ef4 	.word	0x20011ef4

080268e0 <AddMaster>:

static inline void AddMaster(profibus_MPI_t *prot, uint8_t new_master) {
 80268e0:	b480      	push	{r7}
 80268e2:	b083      	sub	sp, #12
 80268e4:	af00      	add	r7, sp, #0
 80268e6:	6078      	str	r0, [r7, #4]
 80268e8:	460b      	mov	r3, r1
 80268ea:	70fb      	strb	r3, [r7, #3]
	prot->bus_masters |= (0x01U << new_master);
 80268ec:	687b      	ldr	r3, [r7, #4]
 80268ee:	695a      	ldr	r2, [r3, #20]
 80268f0:	78fb      	ldrb	r3, [r7, #3]
 80268f2:	2101      	movs	r1, #1
 80268f4:	fa01 f303 	lsl.w	r3, r1, r3
 80268f8:	431a      	orrs	r2, r3
 80268fa:	687b      	ldr	r3, [r7, #4]
 80268fc:	615a      	str	r2, [r3, #20]
}
 80268fe:	bf00      	nop
 8026900:	370c      	adds	r7, #12
 8026902:	46bd      	mov	sp, r7
 8026904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026908:	4770      	bx	lr

0802690a <GetNextMaster>:

uint8_t GetNextMaster(profibus_MPI_t *prot) {
 802690a:	b480      	push	{r7}
 802690c:	b085      	sub	sp, #20
 802690e:	af00      	add	r7, sp, #0
 8026910:	6078      	str	r0, [r7, #4]
	uint8_t pos = prot->own_address;
 8026912:	687b      	ldr	r3, [r7, #4]
 8026914:	781b      	ldrb	r3, [r3, #0]
 8026916:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < 32; i++) {
 8026918:	2300      	movs	r3, #0
 802691a:	60bb      	str	r3, [r7, #8]
 802691c:	e014      	b.n	8026948 <GetNextMaster+0x3e>
		pos++;
 802691e:	7bfb      	ldrb	r3, [r7, #15]
 8026920:	3301      	adds	r3, #1
 8026922:	73fb      	strb	r3, [r7, #15]
		if (pos == 32) {
 8026924:	7bfb      	ldrb	r3, [r7, #15]
 8026926:	2b20      	cmp	r3, #32
 8026928:	d101      	bne.n	802692e <GetNextMaster+0x24>
			pos = 0;
 802692a:	2300      	movs	r3, #0
 802692c:	73fb      	strb	r3, [r7, #15]
		}
		if (((0x01U << pos) & prot->bus_masters) != 0x00) {
 802692e:	7bfb      	ldrb	r3, [r7, #15]
 8026930:	2201      	movs	r2, #1
 8026932:	409a      	lsls	r2, r3
 8026934:	687b      	ldr	r3, [r7, #4]
 8026936:	695b      	ldr	r3, [r3, #20]
 8026938:	4013      	ands	r3, r2
 802693a:	2b00      	cmp	r3, #0
 802693c:	d001      	beq.n	8026942 <GetNextMaster+0x38>
			return pos;
 802693e:	7bfb      	ldrb	r3, [r7, #15]
 8026940:	e007      	b.n	8026952 <GetNextMaster+0x48>
	for (int i = 0; i < 32; i++) {
 8026942:	68bb      	ldr	r3, [r7, #8]
 8026944:	3301      	adds	r3, #1
 8026946:	60bb      	str	r3, [r7, #8]
 8026948:	68bb      	ldr	r3, [r7, #8]
 802694a:	2b1f      	cmp	r3, #31
 802694c:	dde7      	ble.n	802691e <GetNextMaster+0x14>
		}
	}
	return prot->own_address;
 802694e:	687b      	ldr	r3, [r7, #4]
 8026950:	781b      	ldrb	r3, [r3, #0]
}
 8026952:	4618      	mov	r0, r3
 8026954:	3714      	adds	r7, #20
 8026956:	46bd      	mov	sp, r7
 8026958:	f85d 7b04 	ldr.w	r7, [sp], #4
 802695c:	4770      	bx	lr

0802695e <CheckMaster>:

uint8_t CheckMaster(profibus_MPI_t *prot, uint8_t master) {
 802695e:	b480      	push	{r7}
 8026960:	b083      	sub	sp, #12
 8026962:	af00      	add	r7, sp, #0
 8026964:	6078      	str	r0, [r7, #4]
 8026966:	460b      	mov	r3, r1
 8026968:	70fb      	strb	r3, [r7, #3]
	if (master == prot->own_address) {
 802696a:	687b      	ldr	r3, [r7, #4]
 802696c:	781b      	ldrb	r3, [r3, #0]
 802696e:	78fa      	ldrb	r2, [r7, #3]
 8026970:	429a      	cmp	r2, r3
 8026972:	d101      	bne.n	8026978 <CheckMaster+0x1a>
		return 0U;
 8026974:	2300      	movs	r3, #0
 8026976:	e00a      	b.n	802698e <CheckMaster+0x30>
	}
	if (((0x01U << master) & prot->bus_masters) != 0x00) {
 8026978:	78fb      	ldrb	r3, [r7, #3]
 802697a:	2201      	movs	r2, #1
 802697c:	409a      	lsls	r2, r3
 802697e:	687b      	ldr	r3, [r7, #4]
 8026980:	695b      	ldr	r3, [r3, #20]
 8026982:	4013      	ands	r3, r2
 8026984:	2b00      	cmp	r3, #0
 8026986:	d001      	beq.n	802698c <CheckMaster+0x2e>
		return 1U;
 8026988:	2301      	movs	r3, #1
 802698a:	e000      	b.n	802698e <CheckMaster+0x30>
	} else {
		return 0U;
 802698c:	2300      	movs	r3, #0
	}
}
 802698e:	4618      	mov	r0, r3
 8026990:	370c      	adds	r7, #12
 8026992:	46bd      	mov	sp, r7
 8026994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026998:	4770      	bx	lr
	...

0802699c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802699c:	b580      	push	{r7, lr}
 802699e:	b082      	sub	sp, #8
 80269a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80269a2:	2300      	movs	r3, #0
 80269a4:	607b      	str	r3, [r7, #4]
 80269a6:	4a12      	ldr	r2, [pc, #72]	; (80269f0 <HAL_MspInit+0x54>)
 80269a8:	4b11      	ldr	r3, [pc, #68]	; (80269f0 <HAL_MspInit+0x54>)
 80269aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80269ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80269b0:	6453      	str	r3, [r2, #68]	; 0x44
 80269b2:	4b0f      	ldr	r3, [pc, #60]	; (80269f0 <HAL_MspInit+0x54>)
 80269b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80269b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80269ba:	607b      	str	r3, [r7, #4]
 80269bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80269be:	2300      	movs	r3, #0
 80269c0:	603b      	str	r3, [r7, #0]
 80269c2:	4a0b      	ldr	r2, [pc, #44]	; (80269f0 <HAL_MspInit+0x54>)
 80269c4:	4b0a      	ldr	r3, [pc, #40]	; (80269f0 <HAL_MspInit+0x54>)
 80269c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80269c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80269cc:	6413      	str	r3, [r2, #64]	; 0x40
 80269ce:	4b08      	ldr	r3, [pc, #32]	; (80269f0 <HAL_MspInit+0x54>)
 80269d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80269d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80269d6:	603b      	str	r3, [r7, #0]
 80269d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80269da:	2200      	movs	r2, #0
 80269dc:	210f      	movs	r1, #15
 80269de:	f06f 0001 	mvn.w	r0, #1
 80269e2:	f7e9 fdeb 	bl	80105bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80269e6:	bf00      	nop
 80269e8:	3708      	adds	r7, #8
 80269ea:	46bd      	mov	sp, r7
 80269ec:	bd80      	pop	{r7, pc}
 80269ee:	bf00      	nop
 80269f0:	40023800 	.word	0x40023800

080269f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80269f4:	b580      	push	{r7, lr}
 80269f6:	b08c      	sub	sp, #48	; 0x30
 80269f8:	af00      	add	r7, sp, #0
 80269fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80269fc:	2300      	movs	r3, #0
 80269fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8026a00:	2300      	movs	r3, #0
 8026a02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8026a04:	2200      	movs	r2, #0
 8026a06:	6879      	ldr	r1, [r7, #4]
 8026a08:	2019      	movs	r0, #25
 8026a0a:	f7e9 fdd7 	bl	80105bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8026a0e:	2019      	movs	r0, #25
 8026a10:	f7e9 fdf0 	bl	80105f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8026a14:	2300      	movs	r3, #0
 8026a16:	60fb      	str	r3, [r7, #12]
 8026a18:	4a1f      	ldr	r2, [pc, #124]	; (8026a98 <HAL_InitTick+0xa4>)
 8026a1a:	4b1f      	ldr	r3, [pc, #124]	; (8026a98 <HAL_InitTick+0xa4>)
 8026a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026a1e:	f043 0301 	orr.w	r3, r3, #1
 8026a22:	6453      	str	r3, [r2, #68]	; 0x44
 8026a24:	4b1c      	ldr	r3, [pc, #112]	; (8026a98 <HAL_InitTick+0xa4>)
 8026a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026a28:	f003 0301 	and.w	r3, r3, #1
 8026a2c:	60fb      	str	r3, [r7, #12]
 8026a2e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8026a30:	f107 0210 	add.w	r2, r7, #16
 8026a34:	f107 0314 	add.w	r3, r7, #20
 8026a38:	4611      	mov	r1, r2
 8026a3a:	4618      	mov	r0, r3
 8026a3c:	f7ec fa36 	bl	8012eac <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8026a40:	f7ec fa20 	bl	8012e84 <HAL_RCC_GetPCLK2Freq>
 8026a44:	4603      	mov	r3, r0
 8026a46:	005b      	lsls	r3, r3, #1
 8026a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8026a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026a4c:	4a13      	ldr	r2, [pc, #76]	; (8026a9c <HAL_InitTick+0xa8>)
 8026a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8026a52:	0c9b      	lsrs	r3, r3, #18
 8026a54:	3b01      	subs	r3, #1
 8026a56:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8026a58:	4b11      	ldr	r3, [pc, #68]	; (8026aa0 <HAL_InitTick+0xac>)
 8026a5a:	4a12      	ldr	r2, [pc, #72]	; (8026aa4 <HAL_InitTick+0xb0>)
 8026a5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8026a5e:	4b10      	ldr	r3, [pc, #64]	; (8026aa0 <HAL_InitTick+0xac>)
 8026a60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8026a64:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8026a66:	4a0e      	ldr	r2, [pc, #56]	; (8026aa0 <HAL_InitTick+0xac>)
 8026a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026a6a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8026a6c:	4b0c      	ldr	r3, [pc, #48]	; (8026aa0 <HAL_InitTick+0xac>)
 8026a6e:	2200      	movs	r2, #0
 8026a70:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8026a72:	4b0b      	ldr	r3, [pc, #44]	; (8026aa0 <HAL_InitTick+0xac>)
 8026a74:	2200      	movs	r2, #0
 8026a76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8026a78:	4809      	ldr	r0, [pc, #36]	; (8026aa0 <HAL_InitTick+0xac>)
 8026a7a:	f7ec fa49 	bl	8012f10 <HAL_TIM_Base_Init>
 8026a7e:	4603      	mov	r3, r0
 8026a80:	2b00      	cmp	r3, #0
 8026a82:	d104      	bne.n	8026a8e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8026a84:	4806      	ldr	r0, [pc, #24]	; (8026aa0 <HAL_InitTick+0xac>)
 8026a86:	f7ec fa6e 	bl	8012f66 <HAL_TIM_Base_Start_IT>
 8026a8a:	4603      	mov	r3, r0
 8026a8c:	e000      	b.n	8026a90 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8026a8e:	2301      	movs	r3, #1
}
 8026a90:	4618      	mov	r0, r3
 8026a92:	3730      	adds	r7, #48	; 0x30
 8026a94:	46bd      	mov	sp, r7
 8026a96:	bd80      	pop	{r7, pc}
 8026a98:	40023800 	.word	0x40023800
 8026a9c:	431bde83 	.word	0x431bde83
 8026aa0:	20011f10 	.word	0x20011f10
 8026aa4:	40010000 	.word	0x40010000

08026aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8026aa8:	b480      	push	{r7}
 8026aaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8026aac:	bf00      	nop
 8026aae:	46bd      	mov	sp, r7
 8026ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ab4:	4770      	bx	lr

08026ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8026ab6:	b480      	push	{r7}
 8026ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8026aba:	e7fe      	b.n	8026aba <HardFault_Handler+0x4>

08026abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8026abc:	b480      	push	{r7}
 8026abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8026ac0:	e7fe      	b.n	8026ac0 <MemManage_Handler+0x4>

08026ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8026ac2:	b480      	push	{r7}
 8026ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8026ac6:	e7fe      	b.n	8026ac6 <BusFault_Handler+0x4>

08026ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8026ac8:	b480      	push	{r7}
 8026aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8026acc:	e7fe      	b.n	8026acc <UsageFault_Handler+0x4>

08026ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8026ace:	b480      	push	{r7}
 8026ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8026ad2:	bf00      	nop
 8026ad4:	46bd      	mov	sp, r7
 8026ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ada:	4770      	bx	lr

08026adc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8026adc:	b580      	push	{r7, lr}
 8026ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8026ae0:	4802      	ldr	r0, [pc, #8]	; (8026aec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8026ae2:	f7ec fa86 	bl	8012ff2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8026ae6:	bf00      	nop
 8026ae8:	bd80      	pop	{r7, pc}
 8026aea:	bf00      	nop
 8026aec:	20011f10 	.word	0x20011f10

08026af0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8026af0:	b580      	push	{r7, lr}
 8026af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8026af4:	4802      	ldr	r0, [pc, #8]	; (8026b00 <USART1_IRQHandler+0x10>)
 8026af6:	f7ec ff39 	bl	801396c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8026afa:	bf00      	nop
 8026afc:	bd80      	pop	{r7, pc}
 8026afe:	bf00      	nop
 8026b00:	200120ec 	.word	0x200120ec

08026b04 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8026b04:	b580      	push	{r7, lr}
 8026b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8026b08:	4802      	ldr	r0, [pc, #8]	; (8026b14 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8026b0a:	f7ec fa72 	bl	8012ff2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8026b0e:	bf00      	nop
 8026b10:	bd80      	pop	{r7, pc}
 8026b12:	bf00      	nop
 8026b14:	20011f50 	.word	0x20011f50

08026b18 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8026b18:	b580      	push	{r7, lr}
 8026b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8026b1c:	4802      	ldr	r0, [pc, #8]	; (8026b28 <DMA1_Stream7_IRQHandler+0x10>)
 8026b1e:	f7e9 fea7 	bl	8010870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8026b22:	bf00      	nop
 8026b24:	bd80      	pop	{r7, pc}
 8026b26:	bf00      	nop
 8026b28:	2001212c 	.word	0x2001212c

08026b2c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8026b2c:	b580      	push	{r7, lr}
 8026b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8026b30:	4802      	ldr	r0, [pc, #8]	; (8026b3c <UART5_IRQHandler+0x10>)
 8026b32:	f7ec ff1b 	bl	801396c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8026b36:	bf00      	nop
 8026b38:	bd80      	pop	{r7, pc}
 8026b3a:	bf00      	nop
 8026b3c:	200120ac 	.word	0x200120ac

08026b40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8026b40:	b580      	push	{r7, lr}
 8026b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8026b44:	4802      	ldr	r0, [pc, #8]	; (8026b50 <TIM7_IRQHandler+0x10>)
 8026b46:	f7ec fa54 	bl	8012ff2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8026b4a:	bf00      	nop
 8026b4c:	bd80      	pop	{r7, pc}
 8026b4e:	bf00      	nop
 8026b50:	20011f8c 	.word	0x20011f8c

08026b54 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8026b54:	b580      	push	{r7, lr}
 8026b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8026b58:	4802      	ldr	r0, [pc, #8]	; (8026b64 <ETH_IRQHandler+0x10>)
 8026b5a:	f7ea fcd7 	bl	801150c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8026b5e:	bf00      	nop
 8026b60:	bd80      	pop	{r7, pc}
 8026b62:	bf00      	nop
 8026b64:	200105f0 	.word	0x200105f0

08026b68 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8026b68:	b580      	push	{r7, lr}
 8026b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8026b6c:	4802      	ldr	r0, [pc, #8]	; (8026b78 <DMA2_Stream7_IRQHandler+0x10>)
 8026b6e:	f7e9 fe7f 	bl	8010870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8026b72:	bf00      	nop
 8026b74:	bd80      	pop	{r7, pc}
 8026b76:	bf00      	nop
 8026b78:	2001204c 	.word	0x2001204c

08026b7c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8026b7c:	b480      	push	{r7}
 8026b7e:	b083      	sub	sp, #12
 8026b80:	af00      	add	r7, sp, #0
 8026b82:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8026b84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8026b88:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8026b8c:	f003 0301 	and.w	r3, r3, #1
 8026b90:	2b00      	cmp	r3, #0
 8026b92:	d013      	beq.n	8026bbc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8026b94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8026b98:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8026b9c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8026ba0:	2b00      	cmp	r3, #0
 8026ba2:	d00b      	beq.n	8026bbc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8026ba4:	e000      	b.n	8026ba8 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 8026ba6:	bf00      	nop
 8026ba8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8026bac:	681b      	ldr	r3, [r3, #0]
 8026bae:	2b00      	cmp	r3, #0
 8026bb0:	d0f9      	beq.n	8026ba6 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8026bb2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8026bb6:	687a      	ldr	r2, [r7, #4]
 8026bb8:	b2d2      	uxtb	r2, r2
 8026bba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8026bbc:	687b      	ldr	r3, [r7, #4]
}
 8026bbe:	4618      	mov	r0, r3
 8026bc0:	370c      	adds	r7, #12
 8026bc2:	46bd      	mov	sp, r7
 8026bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bc8:	4770      	bx	lr

08026bca <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

int _read(int file, char *ptr, int len) {
 8026bca:	b590      	push	{r4, r7, lr}
 8026bcc:	b087      	sub	sp, #28
 8026bce:	af00      	add	r7, sp, #0
 8026bd0:	60f8      	str	r0, [r7, #12]
 8026bd2:	60b9      	str	r1, [r7, #8]
 8026bd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8026bd6:	2300      	movs	r3, #0
 8026bd8:	617b      	str	r3, [r7, #20]
 8026bda:	e00a      	b.n	8026bf2 <_read+0x28>
		*ptr++ = __io_getchar();
 8026bdc:	68bc      	ldr	r4, [r7, #8]
 8026bde:	1c63      	adds	r3, r4, #1
 8026be0:	60bb      	str	r3, [r7, #8]
 8026be2:	f3af 8000 	nop.w
 8026be6:	4603      	mov	r3, r0
 8026be8:	b2db      	uxtb	r3, r3
 8026bea:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8026bec:	697b      	ldr	r3, [r7, #20]
 8026bee:	3301      	adds	r3, #1
 8026bf0:	617b      	str	r3, [r7, #20]
 8026bf2:	697a      	ldr	r2, [r7, #20]
 8026bf4:	687b      	ldr	r3, [r7, #4]
 8026bf6:	429a      	cmp	r2, r3
 8026bf8:	dbf0      	blt.n	8026bdc <_read+0x12>
	}

	return len;
 8026bfa:	687b      	ldr	r3, [r7, #4]
}
 8026bfc:	4618      	mov	r0, r3
 8026bfe:	371c      	adds	r7, #28
 8026c00:	46bd      	mov	sp, r7
 8026c02:	bd90      	pop	{r4, r7, pc}

08026c04 <_write>:

int _write(int file, char *ptr, int len) {
 8026c04:	b580      	push	{r7, lr}
 8026c06:	b086      	sub	sp, #24
 8026c08:	af00      	add	r7, sp, #0
 8026c0a:	60f8      	str	r0, [r7, #12]
 8026c0c:	60b9      	str	r1, [r7, #8]
 8026c0e:	607a      	str	r2, [r7, #4]
	int i = 0;
 8026c10:	2300      	movs	r3, #0
 8026c12:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8026c14:	2300      	movs	r3, #0
 8026c16:	617b      	str	r3, [r7, #20]
 8026c18:	e009      	b.n	8026c2e <_write+0x2a>
		ITM_SendChar((*ptr++));
 8026c1a:	68bb      	ldr	r3, [r7, #8]
 8026c1c:	1c5a      	adds	r2, r3, #1
 8026c1e:	60ba      	str	r2, [r7, #8]
 8026c20:	781b      	ldrb	r3, [r3, #0]
 8026c22:	4618      	mov	r0, r3
 8026c24:	f7ff ffaa 	bl	8026b7c <ITM_SendChar>
	for (i = 0; i < len; i++)
 8026c28:	697b      	ldr	r3, [r7, #20]
 8026c2a:	3301      	adds	r3, #1
 8026c2c:	617b      	str	r3, [r7, #20]
 8026c2e:	697a      	ldr	r2, [r7, #20]
 8026c30:	687b      	ldr	r3, [r7, #4]
 8026c32:	429a      	cmp	r2, r3
 8026c34:	dbf1      	blt.n	8026c1a <_write+0x16>
	return len;
 8026c36:	687b      	ldr	r3, [r7, #4]
}
 8026c38:	4618      	mov	r0, r3
 8026c3a:	3718      	adds	r7, #24
 8026c3c:	46bd      	mov	sp, r7
 8026c3e:	bd80      	pop	{r7, pc}

08026c40 <_sbrk>:

caddr_t _sbrk(int incr) {
 8026c40:	b480      	push	{r7}
 8026c42:	b085      	sub	sp, #20
 8026c44:	af00      	add	r7, sp, #0
 8026c46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8026c48:	4b11      	ldr	r3, [pc, #68]	; (8026c90 <_sbrk+0x50>)
 8026c4a:	681b      	ldr	r3, [r3, #0]
 8026c4c:	2b00      	cmp	r3, #0
 8026c4e:	d102      	bne.n	8026c56 <_sbrk+0x16>
		heap_end = &end;
 8026c50:	4b0f      	ldr	r3, [pc, #60]	; (8026c90 <_sbrk+0x50>)
 8026c52:	4a10      	ldr	r2, [pc, #64]	; (8026c94 <_sbrk+0x54>)
 8026c54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8026c56:	4b0e      	ldr	r3, [pc, #56]	; (8026c90 <_sbrk+0x50>)
 8026c58:	681b      	ldr	r3, [r3, #0]
 8026c5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr) {
 8026c5c:	4b0c      	ldr	r3, [pc, #48]	; (8026c90 <_sbrk+0x50>)
 8026c5e:	681a      	ldr	r2, [r3, #0]
 8026c60:	687b      	ldr	r3, [r7, #4]
 8026c62:	4413      	add	r3, r2
 8026c64:	466a      	mov	r2, sp
 8026c66:	4293      	cmp	r3, r2
 8026c68:	d905      	bls.n	8026c76 <_sbrk+0x36>
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8026c6a:	4b0b      	ldr	r3, [pc, #44]	; (8026c98 <_sbrk+0x58>)
 8026c6c:	220c      	movs	r2, #12
 8026c6e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8026c70:	f04f 33ff 	mov.w	r3, #4294967295
 8026c74:	e006      	b.n	8026c84 <_sbrk+0x44>
	}

	heap_end += incr;
 8026c76:	4b06      	ldr	r3, [pc, #24]	; (8026c90 <_sbrk+0x50>)
 8026c78:	681a      	ldr	r2, [r3, #0]
 8026c7a:	687b      	ldr	r3, [r7, #4]
 8026c7c:	4413      	add	r3, r2
 8026c7e:	4a04      	ldr	r2, [pc, #16]	; (8026c90 <_sbrk+0x50>)
 8026c80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8026c82:	68fb      	ldr	r3, [r7, #12]
}
 8026c84:	4618      	mov	r0, r3
 8026c86:	3714      	adds	r7, #20
 8026c88:	46bd      	mov	sp, r7
 8026c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c8e:	4770      	bx	lr
 8026c90:	20009ebc 	.word	0x20009ebc
 8026c94:	2001218c 	.word	0x2001218c
 8026c98:	2000ecf4 	.word	0x2000ecf4

08026c9c <_close>:

int _close(int file) {
 8026c9c:	b480      	push	{r7}
 8026c9e:	b083      	sub	sp, #12
 8026ca0:	af00      	add	r7, sp, #0
 8026ca2:	6078      	str	r0, [r7, #4]
	return -1;
 8026ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8026ca8:	4618      	mov	r0, r3
 8026caa:	370c      	adds	r7, #12
 8026cac:	46bd      	mov	sp, r7
 8026cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cb2:	4770      	bx	lr

08026cb4 <_fstat>:

int _fstat(int file, struct stat *st) {
 8026cb4:	b480      	push	{r7}
 8026cb6:	b083      	sub	sp, #12
 8026cb8:	af00      	add	r7, sp, #0
 8026cba:	6078      	str	r0, [r7, #4]
 8026cbc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8026cbe:	683b      	ldr	r3, [r7, #0]
 8026cc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8026cc4:	605a      	str	r2, [r3, #4]
	return 0;
 8026cc6:	2300      	movs	r3, #0
}
 8026cc8:	4618      	mov	r0, r3
 8026cca:	370c      	adds	r7, #12
 8026ccc:	46bd      	mov	sp, r7
 8026cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cd2:	4770      	bx	lr

08026cd4 <_isatty>:

int _isatty(int file) {
 8026cd4:	b480      	push	{r7}
 8026cd6:	b083      	sub	sp, #12
 8026cd8:	af00      	add	r7, sp, #0
 8026cda:	6078      	str	r0, [r7, #4]
	return 1;
 8026cdc:	2301      	movs	r3, #1
}
 8026cde:	4618      	mov	r0, r3
 8026ce0:	370c      	adds	r7, #12
 8026ce2:	46bd      	mov	sp, r7
 8026ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ce8:	4770      	bx	lr

08026cea <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8026cea:	b480      	push	{r7}
 8026cec:	b085      	sub	sp, #20
 8026cee:	af00      	add	r7, sp, #0
 8026cf0:	60f8      	str	r0, [r7, #12]
 8026cf2:	60b9      	str	r1, [r7, #8]
 8026cf4:	607a      	str	r2, [r7, #4]
	return 0;
 8026cf6:	2300      	movs	r3, #0
}
 8026cf8:	4618      	mov	r0, r3
 8026cfa:	3714      	adds	r7, #20
 8026cfc:	46bd      	mov	sp, r7
 8026cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d02:	4770      	bx	lr

08026d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8026d04:	b480      	push	{r7}
 8026d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8026d08:	4a16      	ldr	r2, [pc, #88]	; (8026d64 <SystemInit+0x60>)
 8026d0a:	4b16      	ldr	r3, [pc, #88]	; (8026d64 <SystemInit+0x60>)
 8026d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8026d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8026d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8026d18:	4a13      	ldr	r2, [pc, #76]	; (8026d68 <SystemInit+0x64>)
 8026d1a:	4b13      	ldr	r3, [pc, #76]	; (8026d68 <SystemInit+0x64>)
 8026d1c:	681b      	ldr	r3, [r3, #0]
 8026d1e:	f043 0301 	orr.w	r3, r3, #1
 8026d22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8026d24:	4b10      	ldr	r3, [pc, #64]	; (8026d68 <SystemInit+0x64>)
 8026d26:	2200      	movs	r2, #0
 8026d28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8026d2a:	4a0f      	ldr	r2, [pc, #60]	; (8026d68 <SystemInit+0x64>)
 8026d2c:	4b0e      	ldr	r3, [pc, #56]	; (8026d68 <SystemInit+0x64>)
 8026d2e:	681b      	ldr	r3, [r3, #0]
 8026d30:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8026d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026d38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8026d3a:	4b0b      	ldr	r3, [pc, #44]	; (8026d68 <SystemInit+0x64>)
 8026d3c:	4a0b      	ldr	r2, [pc, #44]	; (8026d6c <SystemInit+0x68>)
 8026d3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8026d40:	4a09      	ldr	r2, [pc, #36]	; (8026d68 <SystemInit+0x64>)
 8026d42:	4b09      	ldr	r3, [pc, #36]	; (8026d68 <SystemInit+0x64>)
 8026d44:	681b      	ldr	r3, [r3, #0]
 8026d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026d4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8026d4c:	4b06      	ldr	r3, [pc, #24]	; (8026d68 <SystemInit+0x64>)
 8026d4e:	2200      	movs	r2, #0
 8026d50:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8026d52:	4b04      	ldr	r3, [pc, #16]	; (8026d64 <SystemInit+0x60>)
 8026d54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8026d58:	609a      	str	r2, [r3, #8]
#endif
}
 8026d5a:	bf00      	nop
 8026d5c:	46bd      	mov	sp, r7
 8026d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d62:	4770      	bx	lr
 8026d64:	e000ed00 	.word	0xe000ed00
 8026d68:	40023800 	.word	0x40023800
 8026d6c:	24003010 	.word	0x24003010

08026d70 <Client_thread>:

#include "tcp_client.h"

xQueueHandle tcp_client_queue;

void Client_thread(void *arg) {
 8026d70:	b5b0      	push	{r4, r5, r7, lr}
 8026d72:	b094      	sub	sp, #80	; 0x50
 8026d74:	af02      	add	r7, sp, #8
 8026d76:	6078      	str	r0, [r7, #4]
	err_t accept_err, err;
	struct netbuf *inbuf;
	struct netconn *newconn;
	struct netconn *arg_conn;
	arg_conn = (struct netconn *) arg;
 8026d78:	687b      	ldr	r3, [r7, #4]
 8026d7a:	643b      	str	r3, [r7, #64]	; 0x40
	u16_t buflen;
	char *buf;

	uint8_t data_COTP[] = { 0x03, 0x00, 0x00, 0x16, 0x11, 0xD0, 0x00, 0x01,
 8026d7c:	4b7f      	ldr	r3, [pc, #508]	; (8026f7c <Client_thread+0x20c>)
 8026d7e:	f107 0410 	add.w	r4, r7, #16
 8026d82:	461d      	mov	r5, r3
 8026d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026d88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026d8c:	6020      	str	r0, [r4, #0]
 8026d8e:	3404      	adds	r4, #4
 8026d90:	8021      	strh	r1, [r4, #0]
			0x00, 0x01, 0x00, 0xC1, 0x02, 0x01, 0x00, 0xC2, 0x02, 0x01, 0x02,
			0xC0, 0x01, 0x0A };

	osDelay(1);
 8026d92:	2001      	movs	r0, #1
 8026d94:	f7ed fb53 	bl	801443e <osDelay>
	for (;;) {
		accept_err = netconn_accept(arg_conn, &newconn);
 8026d98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026d9c:	4619      	mov	r1, r3
 8026d9e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8026da0:	f7f0 fa34 	bl	801720c <netconn_accept>
 8026da4:	4603      	mov	r3, r0
 8026da6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (accept_err == ERR_OK) {
 8026daa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8026dae:	2b00      	cmp	r3, #0
 8026db0:	f040 80da 	bne.w	8026f68 <Client_thread+0x1f8>
			err = netconn_recv(newconn, &inbuf);
 8026db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026db6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8026dba:	4611      	mov	r1, r2
 8026dbc:	4618      	mov	r0, r3
 8026dbe:	f7f0 fb55 	bl	801746c <netconn_recv>
 8026dc2:	4603      	mov	r3, r0
 8026dc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			while (err == ERR_OK) {
 8026dc8:	e0bc      	b.n	8026f44 <Client_thread+0x1d4>
				do {
					netbuf_data(inbuf, (void**) &buf, &buflen);
 8026dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026dcc:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8026dd0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8026dd4:	4618      	mov	r0, r3
 8026dd6:	f7f1 ffef 	bl	8018db8 <netbuf_data>
					if ((buf[0] == 0x03) && (buf[1] == 0x00) && (buf[2] == 0x00)
 8026dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026ddc:	781b      	ldrb	r3, [r3, #0]
 8026dde:	2b03      	cmp	r3, #3
 8026de0:	d137      	bne.n	8026e52 <Client_thread+0xe2>
 8026de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026de4:	3301      	adds	r3, #1
 8026de6:	781b      	ldrb	r3, [r3, #0]
 8026de8:	2b00      	cmp	r3, #0
 8026dea:	d132      	bne.n	8026e52 <Client_thread+0xe2>
 8026dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026dee:	3302      	adds	r3, #2
 8026df0:	781b      	ldrb	r3, [r3, #0]
 8026df2:	2b00      	cmp	r3, #0
 8026df4:	d12d      	bne.n	8026e52 <Client_thread+0xe2>
							&& (buf[3] == 0x16) && (CheckMaster(&hprot,buf[21]))) {
 8026df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026df8:	3303      	adds	r3, #3
 8026dfa:	781b      	ldrb	r3, [r3, #0]
 8026dfc:	2b16      	cmp	r3, #22
 8026dfe:	d128      	bne.n	8026e52 <Client_thread+0xe2>
 8026e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026e02:	3315      	adds	r3, #21
 8026e04:	781b      	ldrb	r3, [r3, #0]
 8026e06:	4619      	mov	r1, r3
 8026e08:	485d      	ldr	r0, [pc, #372]	; (8026f80 <Client_thread+0x210>)
 8026e0a:	f7ff fda8 	bl	802695e <CheckMaster>
 8026e0e:	4603      	mov	r3, r0
 8026e10:	2b00      	cmp	r3, #0
 8026e12:	d01e      	beq.n	8026e52 <Client_thread+0xe2>
						data_COTP[18] = buf[21];
 8026e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026e16:	3315      	adds	r3, #21
 8026e18:	781b      	ldrb	r3, [r3, #0]
 8026e1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						hprot.master_address = buf[21];
 8026e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026e20:	3315      	adds	r3, #21
 8026e22:	781a      	ldrb	r2, [r3, #0]
 8026e24:	4b56      	ldr	r3, [pc, #344]	; (8026f80 <Client_thread+0x210>)
 8026e26:	749a      	strb	r2, [r3, #18]
						netconn_write(newconn,
 8026e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8026e2a:	f107 0110 	add.w	r1, r7, #16
 8026e2e:	2300      	movs	r3, #0
 8026e30:	9300      	str	r3, [sp, #0]
 8026e32:	2301      	movs	r3, #1
 8026e34:	2216      	movs	r2, #22
 8026e36:	f7f0 fb85 	bl	8017544 <netconn_write_partly>
								(const unsigned char* )(data_COTP),
								sizeof(data_COTP), NETCONN_COPY);
						if (hprot.conn_stat == CONN_CLOSED) {
 8026e3a:	4b51      	ldr	r3, [pc, #324]	; (8026f80 <Client_thread+0x210>)
 8026e3c:	78db      	ldrb	r3, [r3, #3]
 8026e3e:	b2db      	uxtb	r3, r3
 8026e40:	2b05      	cmp	r3, #5
 8026e42:	d102      	bne.n	8026e4a <Client_thread+0xda>
							hprot.conn_stat = CONN_AGAIN;
 8026e44:	4b4e      	ldr	r3, [pc, #312]	; (8026f80 <Client_thread+0x210>)
 8026e46:	2203      	movs	r2, #3
 8026e48:	70da      	strb	r2, [r3, #3]
						}
						hprot.req_num = 0;
 8026e4a:	4b4d      	ldr	r3, [pc, #308]	; (8026f80 <Client_thread+0x210>)
 8026e4c:	2200      	movs	r2, #0
 8026e4e:	74da      	strb	r2, [r3, #19]
 8026e50:	e062      	b.n	8026f18 <Client_thread+0x1a8>
					} else if (buf[7] == 0x32) {
 8026e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026e54:	3307      	adds	r3, #7
 8026e56:	781b      	ldrb	r3, [r3, #0]
 8026e58:	2b32      	cmp	r3, #50	; 0x32
 8026e5a:	d15d      	bne.n	8026f18 <Client_thread+0x1a8>
						parcel_t parc;
						parc.len = buflen - 7;
 8026e5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8026e5e:	3b07      	subs	r3, #7
 8026e60:	b29b      	uxth	r3, r3
 8026e62:	81bb      	strh	r3, [r7, #12]
						parc.data = pvPortMalloc(parc.len);
 8026e64:	89bb      	ldrh	r3, [r7, #12]
 8026e66:	4618      	mov	r0, r3
 8026e68:	f7ee f83a 	bl	8014ee0 <pvPortMalloc>
 8026e6c:	4603      	mov	r3, r0
 8026e6e:	60bb      	str	r3, [r7, #8]
						memcpy(parc.data, buf + 7, parc.len);
 8026e70:	68b8      	ldr	r0, [r7, #8]
 8026e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026e74:	3307      	adds	r3, #7
 8026e76:	89ba      	ldrh	r2, [r7, #12]
 8026e78:	4619      	mov	r1, r3
 8026e7a:	f001 faf8 	bl	802846e <memcpy>
						xQueueSend(tcp_client_queue, &parc, 0);
 8026e7e:	4b41      	ldr	r3, [pc, #260]	; (8026f84 <Client_thread+0x214>)
 8026e80:	6818      	ldr	r0, [r3, #0]
 8026e82:	f107 0108 	add.w	r1, r7, #8
 8026e86:	2300      	movs	r3, #0
 8026e88:	2200      	movs	r2, #0
 8026e8a:	f7ee fb93 	bl	80155b4 <xQueueGenericSend>
						xQueueReceive(protocol_queue, &parc, portMAX_DELAY);
 8026e8e:	4b3e      	ldr	r3, [pc, #248]	; (8026f88 <Client_thread+0x218>)
 8026e90:	6818      	ldr	r0, [r3, #0]
 8026e92:	f107 0108 	add.w	r1, r7, #8
 8026e96:	2300      	movs	r3, #0
 8026e98:	f04f 32ff 	mov.w	r2, #4294967295
 8026e9c:	f7ee fda2 	bl	80159e4 <xQueueGenericReceive>
						uint8_t * answer;
						answer = (uint8_t*) pvPortMalloc(parc.len + 7);
 8026ea0:	89bb      	ldrh	r3, [r7, #12]
 8026ea2:	3307      	adds	r3, #7
 8026ea4:	4618      	mov	r0, r3
 8026ea6:	f7ee f81b 	bl	8014ee0 <pvPortMalloc>
 8026eaa:	63b8      	str	r0, [r7, #56]	; 0x38
						answer[0] = 0x03;
 8026eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026eae:	2203      	movs	r2, #3
 8026eb0:	701a      	strb	r2, [r3, #0]
						answer[1] = 0x00;
 8026eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026eb4:	3301      	adds	r3, #1
 8026eb6:	2200      	movs	r2, #0
 8026eb8:	701a      	strb	r2, [r3, #0]
						answer[2] = 0x00;
 8026eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026ebc:	3302      	adds	r3, #2
 8026ebe:	2200      	movs	r2, #0
 8026ec0:	701a      	strb	r2, [r3, #0]
						answer[3] = parc.len + 7;
 8026ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026ec4:	3303      	adds	r3, #3
 8026ec6:	89ba      	ldrh	r2, [r7, #12]
 8026ec8:	b2d2      	uxtb	r2, r2
 8026eca:	3207      	adds	r2, #7
 8026ecc:	b2d2      	uxtb	r2, r2
 8026ece:	701a      	strb	r2, [r3, #0]
						answer[4] = 0x02;
 8026ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026ed2:	3304      	adds	r3, #4
 8026ed4:	2202      	movs	r2, #2
 8026ed6:	701a      	strb	r2, [r3, #0]
						answer[5] = 0xF0;
 8026ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026eda:	3305      	adds	r3, #5
 8026edc:	22f0      	movs	r2, #240	; 0xf0
 8026ede:	701a      	strb	r2, [r3, #0]
						answer[6] = 0x80;
 8026ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026ee2:	3306      	adds	r3, #6
 8026ee4:	2280      	movs	r2, #128	; 0x80
 8026ee6:	701a      	strb	r2, [r3, #0]
						memcpy(answer + 7, parc.data, parc.len);
 8026ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026eea:	3307      	adds	r3, #7
 8026eec:	68b9      	ldr	r1, [r7, #8]
 8026eee:	89ba      	ldrh	r2, [r7, #12]
 8026ef0:	4618      	mov	r0, r3
 8026ef2:	f001 fabc 	bl	802846e <memcpy>
						vPortFree(parc.data);
 8026ef6:	68bb      	ldr	r3, [r7, #8]
 8026ef8:	4618      	mov	r0, r3
 8026efa:	f7ee f8b3 	bl	8015064 <vPortFree>
						netconn_write(newconn, (const unsigned char* )(answer),
 8026efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8026f00:	89bb      	ldrh	r3, [r7, #12]
 8026f02:	3307      	adds	r3, #7
 8026f04:	461a      	mov	r2, r3
 8026f06:	2300      	movs	r3, #0
 8026f08:	9300      	str	r3, [sp, #0]
 8026f0a:	2301      	movs	r3, #1
 8026f0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8026f0e:	f7f0 fb19 	bl	8017544 <netconn_write_partly>
								parc.len + 7, NETCONN_COPY);
						vPortFree(answer);
 8026f12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8026f14:	f7ee f8a6 	bl	8015064 <vPortFree>
					}
				} while (netbuf_next(inbuf) >= 0);
 8026f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026f1a:	4618      	mov	r0, r3
 8026f1c:	f7f1 ff96 	bl	8018e4c <netbuf_next>
 8026f20:	4603      	mov	r3, r0
 8026f22:	2b00      	cmp	r3, #0
 8026f24:	f6bf af51 	bge.w	8026dca <Client_thread+0x5a>
				netbuf_delete(inbuf);
 8026f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026f2a:	4618      	mov	r0, r3
 8026f2c:	f7f1 ff24 	bl	8018d78 <netbuf_delete>
				err = netconn_recv(newconn, &inbuf);
 8026f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026f32:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8026f36:	4611      	mov	r1, r2
 8026f38:	4618      	mov	r0, r3
 8026f3a:	f7f0 fa97 	bl	801746c <netconn_recv>
 8026f3e:	4603      	mov	r3, r0
 8026f40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			while (err == ERR_OK) {
 8026f44:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8026f48:	2b00      	cmp	r3, #0
 8026f4a:	f43f af3e 	beq.w	8026dca <Client_thread+0x5a>
			} /* while (err == ERR_OK) */
			if (err == ERR_CLSD) {
 8026f4e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8026f52:	f113 0f0f 	cmn.w	r3, #15
 8026f56:	d107      	bne.n	8026f68 <Client_thread+0x1f8>
				if (hprot.conn_stat == CONN_OK) {
 8026f58:	4b09      	ldr	r3, [pc, #36]	; (8026f80 <Client_thread+0x210>)
 8026f5a:	78db      	ldrb	r3, [r3, #3]
 8026f5c:	b2db      	uxtb	r3, r3
 8026f5e:	2b02      	cmp	r3, #2
 8026f60:	d102      	bne.n	8026f68 <Client_thread+0x1f8>
					hprot.conn_stat = CONN_CLOSE;
 8026f62:	4b07      	ldr	r3, [pc, #28]	; (8026f80 <Client_thread+0x210>)
 8026f64:	2204      	movs	r2, #4
 8026f66:	70da      	strb	r2, [r3, #3]
				}
			}
		}
		netconn_close(newconn);
 8026f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026f6a:	4618      	mov	r0, r3
 8026f6c:	f7f0 fb92 	bl	8017694 <netconn_close>
		netconn_delete(newconn);
 8026f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026f72:	4618      	mov	r0, r3
 8026f74:	f7f0 f8c0 	bl	80170f8 <netconn_delete>
		accept_err = netconn_accept(arg_conn, &newconn);
 8026f78:	e70e      	b.n	8026d98 <Client_thread+0x28>
 8026f7a:	bf00      	nop
 8026f7c:	0802b798 	.word	0x0802b798
 8026f80:	20011ef4 	.word	0x20011ef4
 8026f84:	20011f4c 	.word	0x20011f4c
 8026f88:	20011f0c 	.word	0x20011f0c

08026f8c <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8026f8c:	b580      	push	{r7, lr}
 8026f8e:	b082      	sub	sp, #8
 8026f90:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8026f92:	463b      	mov	r3, r7
 8026f94:	2200      	movs	r2, #0
 8026f96:	601a      	str	r2, [r3, #0]
 8026f98:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8026f9a:	4b13      	ldr	r3, [pc, #76]	; (8026fe8 <MX_TIM7_Init+0x5c>)
 8026f9c:	4a13      	ldr	r2, [pc, #76]	; (8026fec <MX_TIM7_Init+0x60>)
 8026f9e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8026fa0:	4b11      	ldr	r3, [pc, #68]	; (8026fe8 <MX_TIM7_Init+0x5c>)
 8026fa2:	2200      	movs	r2, #0
 8026fa4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8026fa6:	4b10      	ldr	r3, [pc, #64]	; (8026fe8 <MX_TIM7_Init+0x5c>)
 8026fa8:	2200      	movs	r2, #0
 8026faa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 840;
 8026fac:	4b0e      	ldr	r3, [pc, #56]	; (8026fe8 <MX_TIM7_Init+0x5c>)
 8026fae:	f44f 7252 	mov.w	r2, #840	; 0x348
 8026fb2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8026fb4:	480c      	ldr	r0, [pc, #48]	; (8026fe8 <MX_TIM7_Init+0x5c>)
 8026fb6:	f7eb ffab 	bl	8012f10 <HAL_TIM_Base_Init>
 8026fba:	4603      	mov	r3, r0
 8026fbc:	2b00      	cmp	r3, #0
 8026fbe:	d001      	beq.n	8026fc4 <MX_TIM7_Init+0x38>
  {
    Error_Handler();
 8026fc0:	f7fe fd34 	bl	8025a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8026fc4:	2300      	movs	r3, #0
 8026fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8026fc8:	2300      	movs	r3, #0
 8026fca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8026fcc:	463b      	mov	r3, r7
 8026fce:	4619      	mov	r1, r3
 8026fd0:	4805      	ldr	r0, [pc, #20]	; (8026fe8 <MX_TIM7_Init+0x5c>)
 8026fd2:	f7ec fb6c 	bl	80136ae <HAL_TIMEx_MasterConfigSynchronization>
 8026fd6:	4603      	mov	r3, r0
 8026fd8:	2b00      	cmp	r3, #0
 8026fda:	d001      	beq.n	8026fe0 <MX_TIM7_Init+0x54>
  {
    Error_Handler();
 8026fdc:	f7fe fd26 	bl	8025a2c <Error_Handler>
  }

}
 8026fe0:	bf00      	nop
 8026fe2:	3708      	adds	r7, #8
 8026fe4:	46bd      	mov	sp, r7
 8026fe6:	bd80      	pop	{r7, pc}
 8026fe8:	20011f8c 	.word	0x20011f8c
 8026fec:	40001400 	.word	0x40001400

08026ff0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8026ff0:	b580      	push	{r7, lr}
 8026ff2:	b086      	sub	sp, #24
 8026ff4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8026ff6:	f107 0308 	add.w	r3, r7, #8
 8026ffa:	2200      	movs	r2, #0
 8026ffc:	601a      	str	r2, [r3, #0]
 8026ffe:	605a      	str	r2, [r3, #4]
 8027000:	609a      	str	r2, [r3, #8]
 8027002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8027004:	463b      	mov	r3, r7
 8027006:	2200      	movs	r2, #0
 8027008:	601a      	str	r2, [r3, #0]
 802700a:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 802700c:	4b1d      	ldr	r3, [pc, #116]	; (8027084 <MX_TIM8_Init+0x94>)
 802700e:	4a1e      	ldr	r2, [pc, #120]	; (8027088 <MX_TIM8_Init+0x98>)
 8027010:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8027012:	4b1c      	ldr	r3, [pc, #112]	; (8027084 <MX_TIM8_Init+0x94>)
 8027014:	2200      	movs	r2, #0
 8027016:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8027018:	4b1a      	ldr	r3, [pc, #104]	; (8027084 <MX_TIM8_Init+0x94>)
 802701a:	2200      	movs	r2, #0
 802701c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27720;
 802701e:	4b19      	ldr	r3, [pc, #100]	; (8027084 <MX_TIM8_Init+0x94>)
 8027020:	f646 4248 	movw	r2, #27720	; 0x6c48
 8027024:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8027026:	4b17      	ldr	r3, [pc, #92]	; (8027084 <MX_TIM8_Init+0x94>)
 8027028:	2200      	movs	r2, #0
 802702a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 802702c:	4b15      	ldr	r3, [pc, #84]	; (8027084 <MX_TIM8_Init+0x94>)
 802702e:	2200      	movs	r2, #0
 8027030:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8027032:	4814      	ldr	r0, [pc, #80]	; (8027084 <MX_TIM8_Init+0x94>)
 8027034:	f7eb ff6c 	bl	8012f10 <HAL_TIM_Base_Init>
 8027038:	4603      	mov	r3, r0
 802703a:	2b00      	cmp	r3, #0
 802703c:	d001      	beq.n	8027042 <MX_TIM8_Init+0x52>
  {
    Error_Handler();
 802703e:	f7fe fcf5 	bl	8025a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8027042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8027046:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8027048:	f107 0308 	add.w	r3, r7, #8
 802704c:	4619      	mov	r1, r3
 802704e:	480d      	ldr	r0, [pc, #52]	; (8027084 <MX_TIM8_Init+0x94>)
 8027050:	f7ec f8d7 	bl	8013202 <HAL_TIM_ConfigClockSource>
 8027054:	4603      	mov	r3, r0
 8027056:	2b00      	cmp	r3, #0
 8027058:	d001      	beq.n	802705e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 802705a:	f7fe fce7 	bl	8025a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802705e:	2300      	movs	r3, #0
 8027060:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8027062:	2300      	movs	r3, #0
 8027064:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8027066:	463b      	mov	r3, r7
 8027068:	4619      	mov	r1, r3
 802706a:	4806      	ldr	r0, [pc, #24]	; (8027084 <MX_TIM8_Init+0x94>)
 802706c:	f7ec fb1f 	bl	80136ae <HAL_TIMEx_MasterConfigSynchronization>
 8027070:	4603      	mov	r3, r0
 8027072:	2b00      	cmp	r3, #0
 8027074:	d001      	beq.n	802707a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8027076:	f7fe fcd9 	bl	8025a2c <Error_Handler>
  }

}
 802707a:	bf00      	nop
 802707c:	3718      	adds	r7, #24
 802707e:	46bd      	mov	sp, r7
 8027080:	bd80      	pop	{r7, pc}
 8027082:	bf00      	nop
 8027084:	20011f50 	.word	0x20011f50
 8027088:	40010400 	.word	0x40010400

0802708c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 802708c:	b580      	push	{r7, lr}
 802708e:	b084      	sub	sp, #16
 8027090:	af00      	add	r7, sp, #0
 8027092:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8027094:	687b      	ldr	r3, [r7, #4]
 8027096:	681b      	ldr	r3, [r3, #0]
 8027098:	4a1c      	ldr	r2, [pc, #112]	; (802710c <HAL_TIM_Base_MspInit+0x80>)
 802709a:	4293      	cmp	r3, r2
 802709c:	d116      	bne.n	80270cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 802709e:	2300      	movs	r3, #0
 80270a0:	60fb      	str	r3, [r7, #12]
 80270a2:	4a1b      	ldr	r2, [pc, #108]	; (8027110 <HAL_TIM_Base_MspInit+0x84>)
 80270a4:	4b1a      	ldr	r3, [pc, #104]	; (8027110 <HAL_TIM_Base_MspInit+0x84>)
 80270a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80270a8:	f043 0320 	orr.w	r3, r3, #32
 80270ac:	6413      	str	r3, [r2, #64]	; 0x40
 80270ae:	4b18      	ldr	r3, [pc, #96]	; (8027110 <HAL_TIM_Base_MspInit+0x84>)
 80270b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80270b2:	f003 0320 	and.w	r3, r3, #32
 80270b6:	60fb      	str	r3, [r7, #12]
 80270b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80270ba:	2200      	movs	r2, #0
 80270bc:	2105      	movs	r1, #5
 80270be:	2037      	movs	r0, #55	; 0x37
 80270c0:	f7e9 fa7c 	bl	80105bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80270c4:	2037      	movs	r0, #55	; 0x37
 80270c6:	f7e9 fa95 	bl	80105f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80270ca:	e01a      	b.n	8027102 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM8)
 80270cc:	687b      	ldr	r3, [r7, #4]
 80270ce:	681b      	ldr	r3, [r3, #0]
 80270d0:	4a10      	ldr	r2, [pc, #64]	; (8027114 <HAL_TIM_Base_MspInit+0x88>)
 80270d2:	4293      	cmp	r3, r2
 80270d4:	d115      	bne.n	8027102 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80270d6:	2300      	movs	r3, #0
 80270d8:	60bb      	str	r3, [r7, #8]
 80270da:	4a0d      	ldr	r2, [pc, #52]	; (8027110 <HAL_TIM_Base_MspInit+0x84>)
 80270dc:	4b0c      	ldr	r3, [pc, #48]	; (8027110 <HAL_TIM_Base_MspInit+0x84>)
 80270de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80270e0:	f043 0302 	orr.w	r3, r3, #2
 80270e4:	6453      	str	r3, [r2, #68]	; 0x44
 80270e6:	4b0a      	ldr	r3, [pc, #40]	; (8027110 <HAL_TIM_Base_MspInit+0x84>)
 80270e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80270ea:	f003 0302 	and.w	r3, r3, #2
 80270ee:	60bb      	str	r3, [r7, #8]
 80270f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80270f2:	2200      	movs	r2, #0
 80270f4:	2105      	movs	r1, #5
 80270f6:	202c      	movs	r0, #44	; 0x2c
 80270f8:	f7e9 fa60 	bl	80105bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80270fc:	202c      	movs	r0, #44	; 0x2c
 80270fe:	f7e9 fa79 	bl	80105f4 <HAL_NVIC_EnableIRQ>
}
 8027102:	bf00      	nop
 8027104:	3710      	adds	r7, #16
 8027106:	46bd      	mov	sp, r7
 8027108:	bd80      	pop	{r7, pc}
 802710a:	bf00      	nop
 802710c:	40001400 	.word	0x40001400
 8027110:	40023800 	.word	0x40023800
 8027114:	40010400 	.word	0x40010400

08027118 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8027118:	b480      	push	{r7}
 802711a:	b087      	sub	sp, #28
 802711c:	af00      	add	r7, sp, #0
 802711e:	60f8      	str	r0, [r7, #12]
 8027120:	60b9      	str	r1, [r7, #8]
 8027122:	607a      	str	r2, [r7, #4]
	int div = 1;
 8027124:	2301      	movs	r3, #1
 8027126:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8027128:	e004      	b.n	8027134 <ts_itoa+0x1c>
		div *= base;
 802712a:	697b      	ldr	r3, [r7, #20]
 802712c:	687a      	ldr	r2, [r7, #4]
 802712e:	fb02 f303 	mul.w	r3, r2, r3
 8027132:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8027134:	697b      	ldr	r3, [r7, #20]
 8027136:	68ba      	ldr	r2, [r7, #8]
 8027138:	fbb2 f2f3 	udiv	r2, r2, r3
 802713c:	687b      	ldr	r3, [r7, #4]
 802713e:	429a      	cmp	r2, r3
 8027140:	d2f3      	bcs.n	802712a <ts_itoa+0x12>

	while (div != 0)
 8027142:	e029      	b.n	8027198 <ts_itoa+0x80>
	{
		int num = d/div;
 8027144:	697b      	ldr	r3, [r7, #20]
 8027146:	68ba      	ldr	r2, [r7, #8]
 8027148:	fbb2 f3f3 	udiv	r3, r2, r3
 802714c:	613b      	str	r3, [r7, #16]
		d = d%div;
 802714e:	697a      	ldr	r2, [r7, #20]
 8027150:	68bb      	ldr	r3, [r7, #8]
 8027152:	fbb3 f1f2 	udiv	r1, r3, r2
 8027156:	fb02 f201 	mul.w	r2, r2, r1
 802715a:	1a9b      	subs	r3, r3, r2
 802715c:	60bb      	str	r3, [r7, #8]
		div /= base;
 802715e:	697a      	ldr	r2, [r7, #20]
 8027160:	687b      	ldr	r3, [r7, #4]
 8027162:	fb92 f3f3 	sdiv	r3, r2, r3
 8027166:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8027168:	693b      	ldr	r3, [r7, #16]
 802716a:	2b09      	cmp	r3, #9
 802716c:	dd0a      	ble.n	8027184 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 802716e:	68fb      	ldr	r3, [r7, #12]
 8027170:	681b      	ldr	r3, [r3, #0]
 8027172:	1c59      	adds	r1, r3, #1
 8027174:	68fa      	ldr	r2, [r7, #12]
 8027176:	6011      	str	r1, [r2, #0]
 8027178:	693a      	ldr	r2, [r7, #16]
 802717a:	b2d2      	uxtb	r2, r2
 802717c:	3237      	adds	r2, #55	; 0x37
 802717e:	b2d2      	uxtb	r2, r2
 8027180:	701a      	strb	r2, [r3, #0]
 8027182:	e009      	b.n	8027198 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8027184:	68fb      	ldr	r3, [r7, #12]
 8027186:	681b      	ldr	r3, [r3, #0]
 8027188:	1c59      	adds	r1, r3, #1
 802718a:	68fa      	ldr	r2, [r7, #12]
 802718c:	6011      	str	r1, [r2, #0]
 802718e:	693a      	ldr	r2, [r7, #16]
 8027190:	b2d2      	uxtb	r2, r2
 8027192:	3230      	adds	r2, #48	; 0x30
 8027194:	b2d2      	uxtb	r2, r2
 8027196:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8027198:	697b      	ldr	r3, [r7, #20]
 802719a:	2b00      	cmp	r3, #0
 802719c:	d1d2      	bne.n	8027144 <ts_itoa+0x2c>
	}
}
 802719e:	bf00      	nop
 80271a0:	371c      	adds	r7, #28
 80271a2:	46bd      	mov	sp, r7
 80271a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271a8:	4770      	bx	lr

080271aa <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80271aa:	b580      	push	{r7, lr}
 80271ac:	b088      	sub	sp, #32
 80271ae:	af00      	add	r7, sp, #0
 80271b0:	60f8      	str	r0, [r7, #12]
 80271b2:	60b9      	str	r1, [r7, #8]
 80271b4:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80271b6:	68fb      	ldr	r3, [r7, #12]
 80271b8:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80271ba:	e07d      	b.n	80272b8 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80271bc:	68bb      	ldr	r3, [r7, #8]
 80271be:	781b      	ldrb	r3, [r3, #0]
 80271c0:	2b25      	cmp	r3, #37	; 0x25
 80271c2:	d171      	bne.n	80272a8 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80271c4:	68bb      	ldr	r3, [r7, #8]
 80271c6:	3301      	adds	r3, #1
 80271c8:	60bb      	str	r3, [r7, #8]
 80271ca:	68bb      	ldr	r3, [r7, #8]
 80271cc:	781b      	ldrb	r3, [r3, #0]
 80271ce:	2b64      	cmp	r3, #100	; 0x64
 80271d0:	d01e      	beq.n	8027210 <ts_formatstring+0x66>
 80271d2:	2b64      	cmp	r3, #100	; 0x64
 80271d4:	dc06      	bgt.n	80271e4 <ts_formatstring+0x3a>
 80271d6:	2b58      	cmp	r3, #88	; 0x58
 80271d8:	d050      	beq.n	802727c <ts_formatstring+0xd2>
 80271da:	2b63      	cmp	r3, #99	; 0x63
 80271dc:	d00e      	beq.n	80271fc <ts_formatstring+0x52>
 80271de:	2b25      	cmp	r3, #37	; 0x25
 80271e0:	d058      	beq.n	8027294 <ts_formatstring+0xea>
 80271e2:	e05d      	b.n	80272a0 <ts_formatstring+0xf6>
 80271e4:	2b73      	cmp	r3, #115	; 0x73
 80271e6:	d02b      	beq.n	8027240 <ts_formatstring+0x96>
 80271e8:	2b73      	cmp	r3, #115	; 0x73
 80271ea:	dc02      	bgt.n	80271f2 <ts_formatstring+0x48>
 80271ec:	2b69      	cmp	r3, #105	; 0x69
 80271ee:	d00f      	beq.n	8027210 <ts_formatstring+0x66>
 80271f0:	e056      	b.n	80272a0 <ts_formatstring+0xf6>
 80271f2:	2b75      	cmp	r3, #117	; 0x75
 80271f4:	d037      	beq.n	8027266 <ts_formatstring+0xbc>
 80271f6:	2b78      	cmp	r3, #120	; 0x78
 80271f8:	d040      	beq.n	802727c <ts_formatstring+0xd2>
 80271fa:	e051      	b.n	80272a0 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80271fc:	68fb      	ldr	r3, [r7, #12]
 80271fe:	1c5a      	adds	r2, r3, #1
 8027200:	60fa      	str	r2, [r7, #12]
 8027202:	687a      	ldr	r2, [r7, #4]
 8027204:	1d11      	adds	r1, r2, #4
 8027206:	6079      	str	r1, [r7, #4]
 8027208:	6812      	ldr	r2, [r2, #0]
 802720a:	b2d2      	uxtb	r2, r2
 802720c:	701a      	strb	r2, [r3, #0]
				break;
 802720e:	e047      	b.n	80272a0 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8027210:	687b      	ldr	r3, [r7, #4]
 8027212:	1d1a      	adds	r2, r3, #4
 8027214:	607a      	str	r2, [r7, #4]
 8027216:	681b      	ldr	r3, [r3, #0]
 8027218:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 802721a:	69fb      	ldr	r3, [r7, #28]
 802721c:	2b00      	cmp	r3, #0
 802721e:	da07      	bge.n	8027230 <ts_formatstring+0x86>
					{
						val *= -1;
 8027220:	69fb      	ldr	r3, [r7, #28]
 8027222:	425b      	negs	r3, r3
 8027224:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8027226:	68fb      	ldr	r3, [r7, #12]
 8027228:	1c5a      	adds	r2, r3, #1
 802722a:	60fa      	str	r2, [r7, #12]
 802722c:	222d      	movs	r2, #45	; 0x2d
 802722e:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8027230:	69f9      	ldr	r1, [r7, #28]
 8027232:	f107 030c 	add.w	r3, r7, #12
 8027236:	220a      	movs	r2, #10
 8027238:	4618      	mov	r0, r3
 802723a:	f7ff ff6d 	bl	8027118 <ts_itoa>
				}
				break;
 802723e:	e02f      	b.n	80272a0 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8027240:	687b      	ldr	r3, [r7, #4]
 8027242:	1d1a      	adds	r2, r3, #4
 8027244:	607a      	str	r2, [r7, #4]
 8027246:	681b      	ldr	r3, [r3, #0]
 8027248:	61bb      	str	r3, [r7, #24]
					while (*arg)
 802724a:	e007      	b.n	802725c <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 802724c:	68fb      	ldr	r3, [r7, #12]
 802724e:	1c5a      	adds	r2, r3, #1
 8027250:	60fa      	str	r2, [r7, #12]
 8027252:	69ba      	ldr	r2, [r7, #24]
 8027254:	1c51      	adds	r1, r2, #1
 8027256:	61b9      	str	r1, [r7, #24]
 8027258:	7812      	ldrb	r2, [r2, #0]
 802725a:	701a      	strb	r2, [r3, #0]
					while (*arg)
 802725c:	69bb      	ldr	r3, [r7, #24]
 802725e:	781b      	ldrb	r3, [r3, #0]
 8027260:	2b00      	cmp	r3, #0
 8027262:	d1f3      	bne.n	802724c <ts_formatstring+0xa2>
					}
				}
				break;
 8027264:	e01c      	b.n	80272a0 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8027266:	687b      	ldr	r3, [r7, #4]
 8027268:	1d1a      	adds	r2, r3, #4
 802726a:	607a      	str	r2, [r7, #4]
 802726c:	6819      	ldr	r1, [r3, #0]
 802726e:	f107 030c 	add.w	r3, r7, #12
 8027272:	220a      	movs	r2, #10
 8027274:	4618      	mov	r0, r3
 8027276:	f7ff ff4f 	bl	8027118 <ts_itoa>
				break;
 802727a:	e011      	b.n	80272a0 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 802727c:	687b      	ldr	r3, [r7, #4]
 802727e:	1d1a      	adds	r2, r3, #4
 8027280:	607a      	str	r2, [r7, #4]
 8027282:	681b      	ldr	r3, [r3, #0]
 8027284:	4619      	mov	r1, r3
 8027286:	f107 030c 	add.w	r3, r7, #12
 802728a:	2210      	movs	r2, #16
 802728c:	4618      	mov	r0, r3
 802728e:	f7ff ff43 	bl	8027118 <ts_itoa>
				break;
 8027292:	e005      	b.n	80272a0 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8027294:	68fb      	ldr	r3, [r7, #12]
 8027296:	1c5a      	adds	r2, r3, #1
 8027298:	60fa      	str	r2, [r7, #12]
 802729a:	2225      	movs	r2, #37	; 0x25
 802729c:	701a      	strb	r2, [r3, #0]
				  break;
 802729e:	bf00      	nop
			}
			fmt++;
 80272a0:	68bb      	ldr	r3, [r7, #8]
 80272a2:	3301      	adds	r3, #1
 80272a4:	60bb      	str	r3, [r7, #8]
 80272a6:	e007      	b.n	80272b8 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80272a8:	68fb      	ldr	r3, [r7, #12]
 80272aa:	1c5a      	adds	r2, r3, #1
 80272ac:	60fa      	str	r2, [r7, #12]
 80272ae:	68ba      	ldr	r2, [r7, #8]
 80272b0:	1c51      	adds	r1, r2, #1
 80272b2:	60b9      	str	r1, [r7, #8]
 80272b4:	7812      	ldrb	r2, [r2, #0]
 80272b6:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80272b8:	68bb      	ldr	r3, [r7, #8]
 80272ba:	781b      	ldrb	r3, [r3, #0]
 80272bc:	2b00      	cmp	r3, #0
 80272be:	f47f af7d 	bne.w	80271bc <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80272c2:	68fb      	ldr	r3, [r7, #12]
 80272c4:	2200      	movs	r2, #0
 80272c6:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80272c8:	68fb      	ldr	r3, [r7, #12]
 80272ca:	461a      	mov	r2, r3
 80272cc:	697b      	ldr	r3, [r7, #20]
 80272ce:	1ad3      	subs	r3, r2, r3
}
 80272d0:	4618      	mov	r0, r3
 80272d2:	3720      	adds	r7, #32
 80272d4:	46bd      	mov	sp, r7
 80272d6:	bd80      	pop	{r7, pc}

080272d8 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80272d8:	b480      	push	{r7}
 80272da:	b085      	sub	sp, #20
 80272dc:	af00      	add	r7, sp, #0
 80272de:	6078      	str	r0, [r7, #4]
 80272e0:	6039      	str	r1, [r7, #0]
	int length = 0;
 80272e2:	2300      	movs	r3, #0
 80272e4:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80272e6:	e081      	b.n	80273ec <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 80272e8:	687b      	ldr	r3, [r7, #4]
 80272ea:	781b      	ldrb	r3, [r3, #0]
 80272ec:	2b25      	cmp	r3, #37	; 0x25
 80272ee:	d177      	bne.n	80273e0 <ts_formatlength+0x108>
		{
			++fmt;
 80272f0:	687b      	ldr	r3, [r7, #4]
 80272f2:	3301      	adds	r3, #1
 80272f4:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80272f6:	687b      	ldr	r3, [r7, #4]
 80272f8:	781b      	ldrb	r3, [r3, #0]
 80272fa:	3b58      	subs	r3, #88	; 0x58
 80272fc:	2b20      	cmp	r3, #32
 80272fe:	d86a      	bhi.n	80273d6 <ts_formatlength+0xfe>
 8027300:	a201      	add	r2, pc, #4	; (adr r2, 8027308 <ts_formatlength+0x30>)
 8027302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027306:	bf00      	nop
 8027308:	080273c9 	.word	0x080273c9
 802730c:	080273d7 	.word	0x080273d7
 8027310:	080273d7 	.word	0x080273d7
 8027314:	080273d7 	.word	0x080273d7
 8027318:	080273d7 	.word	0x080273d7
 802731c:	080273d7 	.word	0x080273d7
 8027320:	080273d7 	.word	0x080273d7
 8027324:	080273d7 	.word	0x080273d7
 8027328:	080273d7 	.word	0x080273d7
 802732c:	080273d7 	.word	0x080273d7
 8027330:	080273d7 	.word	0x080273d7
 8027334:	0802738d 	.word	0x0802738d
 8027338:	0802739b 	.word	0x0802739b
 802733c:	080273d7 	.word	0x080273d7
 8027340:	080273d7 	.word	0x080273d7
 8027344:	080273d7 	.word	0x080273d7
 8027348:	080273d7 	.word	0x080273d7
 802734c:	0802739b 	.word	0x0802739b
 8027350:	080273d7 	.word	0x080273d7
 8027354:	080273d7 	.word	0x080273d7
 8027358:	080273d7 	.word	0x080273d7
 802735c:	080273d7 	.word	0x080273d7
 8027360:	080273d7 	.word	0x080273d7
 8027364:	080273d7 	.word	0x080273d7
 8027368:	080273d7 	.word	0x080273d7
 802736c:	080273d7 	.word	0x080273d7
 8027370:	080273d7 	.word	0x080273d7
 8027374:	080273a9 	.word	0x080273a9
 8027378:	080273d7 	.word	0x080273d7
 802737c:	0802739b 	.word	0x0802739b
 8027380:	080273d7 	.word	0x080273d7
 8027384:	080273d7 	.word	0x080273d7
 8027388:	080273c9 	.word	0x080273c9
			{
			  case 'c':
		  		  va_arg(va, int);
 802738c:	683b      	ldr	r3, [r7, #0]
 802738e:	3304      	adds	r3, #4
 8027390:	603b      	str	r3, [r7, #0]
				  ++length;
 8027392:	68fb      	ldr	r3, [r7, #12]
 8027394:	3301      	adds	r3, #1
 8027396:	60fb      	str	r3, [r7, #12]
				  break;
 8027398:	e025      	b.n	80273e6 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 802739a:	68fb      	ldr	r3, [r7, #12]
 802739c:	330b      	adds	r3, #11
 802739e:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80273a0:	683b      	ldr	r3, [r7, #0]
 80273a2:	3304      	adds	r3, #4
 80273a4:	603b      	str	r3, [r7, #0]
				  break;
 80273a6:	e01e      	b.n	80273e6 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80273a8:	683b      	ldr	r3, [r7, #0]
 80273aa:	1d1a      	adds	r2, r3, #4
 80273ac:	603a      	str	r2, [r7, #0]
 80273ae:	681b      	ldr	r3, [r3, #0]
 80273b0:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80273b2:	e002      	b.n	80273ba <ts_formatlength+0xe2>
			  			  ++length;
 80273b4:	68fb      	ldr	r3, [r7, #12]
 80273b6:	3301      	adds	r3, #1
 80273b8:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80273ba:	68bb      	ldr	r3, [r7, #8]
 80273bc:	1c5a      	adds	r2, r3, #1
 80273be:	60ba      	str	r2, [r7, #8]
 80273c0:	781b      	ldrb	r3, [r3, #0]
 80273c2:	2b00      	cmp	r3, #0
 80273c4:	d1f6      	bne.n	80273b4 <ts_formatlength+0xdc>
			  	  }
				  break;
 80273c6:	e00e      	b.n	80273e6 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80273c8:	68fb      	ldr	r3, [r7, #12]
 80273ca:	3308      	adds	r3, #8
 80273cc:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80273ce:	683b      	ldr	r3, [r7, #0]
 80273d0:	3304      	adds	r3, #4
 80273d2:	603b      	str	r3, [r7, #0]
				  break;
 80273d4:	e007      	b.n	80273e6 <ts_formatlength+0x10e>
			  default:
				  ++length;
 80273d6:	68fb      	ldr	r3, [r7, #12]
 80273d8:	3301      	adds	r3, #1
 80273da:	60fb      	str	r3, [r7, #12]
				  break;
 80273dc:	bf00      	nop
 80273de:	e002      	b.n	80273e6 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80273e0:	68fb      	ldr	r3, [r7, #12]
 80273e2:	3301      	adds	r3, #1
 80273e4:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80273e6:	687b      	ldr	r3, [r7, #4]
 80273e8:	3301      	adds	r3, #1
 80273ea:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80273ec:	687b      	ldr	r3, [r7, #4]
 80273ee:	781b      	ldrb	r3, [r3, #0]
 80273f0:	2b00      	cmp	r3, #0
 80273f2:	f47f af79 	bne.w	80272e8 <ts_formatlength+0x10>
	}
	return length;
 80273f6:	68fb      	ldr	r3, [r7, #12]
}
 80273f8:	4618      	mov	r0, r3
 80273fa:	3714      	adds	r7, #20
 80273fc:	46bd      	mov	sp, r7
 80273fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027402:	4770      	bx	lr

08027404 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8027404:	b40e      	push	{r1, r2, r3}
 8027406:	b580      	push	{r7, lr}
 8027408:	b085      	sub	sp, #20
 802740a:	af00      	add	r7, sp, #0
 802740c:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 802740e:	f107 0320 	add.w	r3, r7, #32
 8027412:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8027414:	68ba      	ldr	r2, [r7, #8]
 8027416:	69f9      	ldr	r1, [r7, #28]
 8027418:	6878      	ldr	r0, [r7, #4]
 802741a:	f7ff fec6 	bl	80271aa <ts_formatstring>
 802741e:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8027420:	68fb      	ldr	r3, [r7, #12]
}
 8027422:	4618      	mov	r0, r3
 8027424:	3714      	adds	r7, #20
 8027426:	46bd      	mov	sp, r7
 8027428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802742c:	b003      	add	sp, #12
 802742e:	4770      	bx	lr

08027430 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8027430:	b40f      	push	{r0, r1, r2, r3}
 8027432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027436:	b085      	sub	sp, #20
 8027438:	af00      	add	r7, sp, #0
	int length = 0;
 802743a:	2300      	movs	r3, #0
 802743c:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 802743e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8027442:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8027444:	6839      	ldr	r1, [r7, #0]
 8027446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8027448:	f7ff ff46 	bl	80272d8 <ts_formatlength>
 802744c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 802744e:	466b      	mov	r3, sp
 8027450:	461e      	mov	r6, r3
		char buf[length];
 8027452:	68f9      	ldr	r1, [r7, #12]
 8027454:	1e4b      	subs	r3, r1, #1
 8027456:	60bb      	str	r3, [r7, #8]
 8027458:	460b      	mov	r3, r1
 802745a:	461a      	mov	r2, r3
 802745c:	f04f 0300 	mov.w	r3, #0
 8027460:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8027464:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8027468:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 802746c:	460b      	mov	r3, r1
 802746e:	461a      	mov	r2, r3
 8027470:	f04f 0300 	mov.w	r3, #0
 8027474:	00dd      	lsls	r5, r3, #3
 8027476:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 802747a:	00d4      	lsls	r4, r2, #3
 802747c:	460b      	mov	r3, r1
 802747e:	3307      	adds	r3, #7
 8027480:	08db      	lsrs	r3, r3, #3
 8027482:	00db      	lsls	r3, r3, #3
 8027484:	ebad 0d03 	sub.w	sp, sp, r3
 8027488:	466b      	mov	r3, sp
 802748a:	3300      	adds	r3, #0
 802748c:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 802748e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8027492:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8027494:	687b      	ldr	r3, [r7, #4]
 8027496:	683a      	ldr	r2, [r7, #0]
 8027498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802749a:	4618      	mov	r0, r3
 802749c:	f7ff fe85 	bl	80271aa <ts_formatstring>
 80274a0:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 80274a2:	687b      	ldr	r3, [r7, #4]
 80274a4:	68fa      	ldr	r2, [r7, #12]
 80274a6:	4619      	mov	r1, r3
 80274a8:	2001      	movs	r0, #1
 80274aa:	f7ff fbab 	bl	8026c04 <_write>
 80274ae:	60f8      	str	r0, [r7, #12]
 80274b0:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80274b2:	68fb      	ldr	r3, [r7, #12]
}
 80274b4:	4618      	mov	r0, r3
 80274b6:	3714      	adds	r7, #20
 80274b8:	46bd      	mov	sp, r7
 80274ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80274be:	b004      	add	sp, #16
 80274c0:	4770      	bx	lr

080274c2 <__sputc_r>:
#else
#define __sgetc_r(__ptr, __p) __sgetc_raw_r(__ptr, __p)
#endif

#ifdef __GNUC__
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
 80274c2:	b580      	push	{r7, lr}
 80274c4:	b084      	sub	sp, #16
 80274c6:	af00      	add	r7, sp, #0
 80274c8:	60f8      	str	r0, [r7, #12]
 80274ca:	60b9      	str	r1, [r7, #8]
 80274cc:	607a      	str	r2, [r7, #4]
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 80274ce:	687b      	ldr	r3, [r7, #4]
 80274d0:	689b      	ldr	r3, [r3, #8]
 80274d2:	1e5a      	subs	r2, r3, #1
 80274d4:	687b      	ldr	r3, [r7, #4]
 80274d6:	609a      	str	r2, [r3, #8]
 80274d8:	687b      	ldr	r3, [r7, #4]
 80274da:	689b      	ldr	r3, [r3, #8]
 80274dc:	2b00      	cmp	r3, #0
 80274de:	da09      	bge.n	80274f4 <__sputc_r+0x32>
 80274e0:	687b      	ldr	r3, [r7, #4]
 80274e2:	689a      	ldr	r2, [r3, #8]
 80274e4:	687b      	ldr	r3, [r7, #4]
 80274e6:	699b      	ldr	r3, [r3, #24]
 80274e8:	429a      	cmp	r2, r3
 80274ea:	db0d      	blt.n	8027508 <__sputc_r+0x46>
 80274ec:	68bb      	ldr	r3, [r7, #8]
 80274ee:	b2db      	uxtb	r3, r3
 80274f0:	2b0a      	cmp	r3, #10
 80274f2:	d009      	beq.n	8027508 <__sputc_r+0x46>
		return (*_p->_p++ = _c);
 80274f4:	687b      	ldr	r3, [r7, #4]
 80274f6:	681b      	ldr	r3, [r3, #0]
 80274f8:	1c59      	adds	r1, r3, #1
 80274fa:	687a      	ldr	r2, [r7, #4]
 80274fc:	6011      	str	r1, [r2, #0]
 80274fe:	68ba      	ldr	r2, [r7, #8]
 8027500:	b2d2      	uxtb	r2, r2
 8027502:	701a      	strb	r2, [r3, #0]
 8027504:	781b      	ldrb	r3, [r3, #0]
 8027506:	e005      	b.n	8027514 <__sputc_r+0x52>
	else
		return (__swbuf_r(_ptr, _c, _p));
 8027508:	687a      	ldr	r2, [r7, #4]
 802750a:	68b9      	ldr	r1, [r7, #8]
 802750c:	68f8      	ldr	r0, [r7, #12]
 802750e:	f001 f8b1 	bl	8028674 <__swbuf_r>
 8027512:	4603      	mov	r3, r0
}
 8027514:	4618      	mov	r0, r3
 8027516:	3710      	adds	r7, #16
 8027518:	46bd      	mov	sp, r7
 802751a:	bd80      	pop	{r7, pc}

0802751c <setUp>:
 * some platforms (MinGW for example), weak function implementations need
 * to be in the same translation unit they are called from.  This can be
 * achieved by defining UNITY_INCLUDE_SETUP_STUBS before including unity.h. */
#ifdef UNITY_INCLUDE_SETUP_STUBS
  #ifdef UNITY_WEAK_ATTRIBUTE
    UNITY_WEAK_ATTRIBUTE void setUp(void) { }
 802751c:	b480      	push	{r7}
 802751e:	af00      	add	r7, sp, #0
 8027520:	bf00      	nop
 8027522:	46bd      	mov	sp, r7
 8027524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027528:	4770      	bx	lr

0802752a <tearDown>:
    UNITY_WEAK_ATTRIBUTE void tearDown(void) { }
 802752a:	b480      	push	{r7}
 802752c:	af00      	add	r7, sp, #0
 802752e:	bf00      	nop
 8027530:	46bd      	mov	sp, r7
 8027532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027536:	4770      	bx	lr

08027538 <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
 8027538:	b580      	push	{r7, lr}
 802753a:	b082      	sub	sp, #8
 802753c:	af00      	add	r7, sp, #0
 802753e:	6078      	str	r0, [r7, #4]
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
 8027540:	687b      	ldr	r3, [r7, #4]
 8027542:	781b      	ldrb	r3, [r3, #0]
 8027544:	2b7e      	cmp	r3, #126	; 0x7e
 8027546:	d80f      	bhi.n	8027568 <UnityPrintChar+0x30>
 8027548:	687b      	ldr	r3, [r7, #4]
 802754a:	781b      	ldrb	r3, [r3, #0]
 802754c:	2b1f      	cmp	r3, #31
 802754e:	d90b      	bls.n	8027568 <UnityPrintChar+0x30>
    {
        UNITY_OUTPUT_CHAR(*pch);
 8027550:	4b2a      	ldr	r3, [pc, #168]	; (80275fc <UnityPrintChar+0xc4>)
 8027552:	6818      	ldr	r0, [r3, #0]
 8027554:	687b      	ldr	r3, [r7, #4]
 8027556:	781b      	ldrb	r3, [r3, #0]
 8027558:	4619      	mov	r1, r3
 802755a:	4b28      	ldr	r3, [pc, #160]	; (80275fc <UnityPrintChar+0xc4>)
 802755c:	681b      	ldr	r3, [r3, #0]
 802755e:	689b      	ldr	r3, [r3, #8]
 8027560:	461a      	mov	r2, r3
 8027562:	f7ff ffae 	bl	80274c2 <__sputc_r>
    {
        UNITY_OUTPUT_CHAR('\\');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    }
}
 8027566:	e045      	b.n	80275f4 <UnityPrintChar+0xbc>
    else if (*pch == 13)
 8027568:	687b      	ldr	r3, [r7, #4]
 802756a:	781b      	ldrb	r3, [r3, #0]
 802756c:	2b0d      	cmp	r3, #13
 802756e:	d112      	bne.n	8027596 <UnityPrintChar+0x5e>
        UNITY_OUTPUT_CHAR('\\');
 8027570:	4b22      	ldr	r3, [pc, #136]	; (80275fc <UnityPrintChar+0xc4>)
 8027572:	6818      	ldr	r0, [r3, #0]
 8027574:	4b21      	ldr	r3, [pc, #132]	; (80275fc <UnityPrintChar+0xc4>)
 8027576:	681b      	ldr	r3, [r3, #0]
 8027578:	689b      	ldr	r3, [r3, #8]
 802757a:	461a      	mov	r2, r3
 802757c:	215c      	movs	r1, #92	; 0x5c
 802757e:	f7ff ffa0 	bl	80274c2 <__sputc_r>
        UNITY_OUTPUT_CHAR('r');
 8027582:	4b1e      	ldr	r3, [pc, #120]	; (80275fc <UnityPrintChar+0xc4>)
 8027584:	6818      	ldr	r0, [r3, #0]
 8027586:	4b1d      	ldr	r3, [pc, #116]	; (80275fc <UnityPrintChar+0xc4>)
 8027588:	681b      	ldr	r3, [r3, #0]
 802758a:	689b      	ldr	r3, [r3, #8]
 802758c:	461a      	mov	r2, r3
 802758e:	2172      	movs	r1, #114	; 0x72
 8027590:	f7ff ff97 	bl	80274c2 <__sputc_r>
}
 8027594:	e02e      	b.n	80275f4 <UnityPrintChar+0xbc>
    else if (*pch == 10)
 8027596:	687b      	ldr	r3, [r7, #4]
 8027598:	781b      	ldrb	r3, [r3, #0]
 802759a:	2b0a      	cmp	r3, #10
 802759c:	d112      	bne.n	80275c4 <UnityPrintChar+0x8c>
        UNITY_OUTPUT_CHAR('\\');
 802759e:	4b17      	ldr	r3, [pc, #92]	; (80275fc <UnityPrintChar+0xc4>)
 80275a0:	6818      	ldr	r0, [r3, #0]
 80275a2:	4b16      	ldr	r3, [pc, #88]	; (80275fc <UnityPrintChar+0xc4>)
 80275a4:	681b      	ldr	r3, [r3, #0]
 80275a6:	689b      	ldr	r3, [r3, #8]
 80275a8:	461a      	mov	r2, r3
 80275aa:	215c      	movs	r1, #92	; 0x5c
 80275ac:	f7ff ff89 	bl	80274c2 <__sputc_r>
        UNITY_OUTPUT_CHAR('n');
 80275b0:	4b12      	ldr	r3, [pc, #72]	; (80275fc <UnityPrintChar+0xc4>)
 80275b2:	6818      	ldr	r0, [r3, #0]
 80275b4:	4b11      	ldr	r3, [pc, #68]	; (80275fc <UnityPrintChar+0xc4>)
 80275b6:	681b      	ldr	r3, [r3, #0]
 80275b8:	689b      	ldr	r3, [r3, #8]
 80275ba:	461a      	mov	r2, r3
 80275bc:	216e      	movs	r1, #110	; 0x6e
 80275be:	f7ff ff80 	bl	80274c2 <__sputc_r>
}
 80275c2:	e017      	b.n	80275f4 <UnityPrintChar+0xbc>
        UNITY_OUTPUT_CHAR('\\');
 80275c4:	4b0d      	ldr	r3, [pc, #52]	; (80275fc <UnityPrintChar+0xc4>)
 80275c6:	6818      	ldr	r0, [r3, #0]
 80275c8:	4b0c      	ldr	r3, [pc, #48]	; (80275fc <UnityPrintChar+0xc4>)
 80275ca:	681b      	ldr	r3, [r3, #0]
 80275cc:	689b      	ldr	r3, [r3, #8]
 80275ce:	461a      	mov	r2, r3
 80275d0:	215c      	movs	r1, #92	; 0x5c
 80275d2:	f7ff ff76 	bl	80274c2 <__sputc_r>
        UNITY_OUTPUT_CHAR('x');
 80275d6:	4b09      	ldr	r3, [pc, #36]	; (80275fc <UnityPrintChar+0xc4>)
 80275d8:	6818      	ldr	r0, [r3, #0]
 80275da:	4b08      	ldr	r3, [pc, #32]	; (80275fc <UnityPrintChar+0xc4>)
 80275dc:	681b      	ldr	r3, [r3, #0]
 80275de:	689b      	ldr	r3, [r3, #8]
 80275e0:	461a      	mov	r2, r3
 80275e2:	2178      	movs	r1, #120	; 0x78
 80275e4:	f7ff ff6d 	bl	80274c2 <__sputc_r>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 80275e8:	687b      	ldr	r3, [r7, #4]
 80275ea:	781b      	ldrb	r3, [r3, #0]
 80275ec:	2102      	movs	r1, #2
 80275ee:	4618      	mov	r0, r3
 80275f0:	f000 f8b6 	bl	8027760 <UnityPrintNumberHex>
}
 80275f4:	bf00      	nop
 80275f6:	3708      	adds	r7, #8
 80275f8:	46bd      	mov	sp, r7
 80275fa:	bd80      	pop	{r7, pc}
 80275fc:	20000068 	.word	0x20000068

08027600 <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
 8027600:	b580      	push	{r7, lr}
 8027602:	b084      	sub	sp, #16
 8027604:	af00      	add	r7, sp, #0
 8027606:	6078      	str	r0, [r7, #4]
    const char* pch = string;
 8027608:	687b      	ldr	r3, [r7, #4]
 802760a:	60fb      	str	r3, [r7, #12]

    if (pch != NULL)
 802760c:	68fb      	ldr	r3, [r7, #12]
 802760e:	2b00      	cmp	r3, #0
 8027610:	d00a      	beq.n	8027628 <UnityPrint+0x28>
    {
        while (*pch)
 8027612:	e005      	b.n	8027620 <UnityPrint+0x20>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
 8027614:	68f8      	ldr	r0, [r7, #12]
 8027616:	f7ff ff8f 	bl	8027538 <UnityPrintChar>
            pch++;
 802761a:	68fb      	ldr	r3, [r7, #12]
 802761c:	3301      	adds	r3, #1
 802761e:	60fb      	str	r3, [r7, #12]
        while (*pch)
 8027620:	68fb      	ldr	r3, [r7, #12]
 8027622:	781b      	ldrb	r3, [r3, #0]
 8027624:	2b00      	cmp	r3, #0
 8027626:	d1f5      	bne.n	8027614 <UnityPrint+0x14>
        }
    }
}
 8027628:	bf00      	nop
 802762a:	3710      	adds	r7, #16
 802762c:	46bd      	mov	sp, r7
 802762e:	bd80      	pop	{r7, pc}

08027630 <UnityPrintNumberByStyle>:
    }
}

/*-----------------------------------------------*/
void UnityPrintNumberByStyle(const UNITY_INT number, const UNITY_DISPLAY_STYLE_T style)
{
 8027630:	b580      	push	{r7, lr}
 8027632:	b082      	sub	sp, #8
 8027634:	af00      	add	r7, sp, #0
 8027636:	6078      	str	r0, [r7, #4]
 8027638:	460b      	mov	r3, r1
 802763a:	70fb      	strb	r3, [r7, #3]
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 802763c:	78fb      	ldrb	r3, [r7, #3]
 802763e:	f003 0310 	and.w	r3, r3, #16
 8027642:	2b00      	cmp	r3, #0
 8027644:	d003      	beq.n	802764e <UnityPrintNumberByStyle+0x1e>
    {
        UnityPrintNumber(number);
 8027646:	6878      	ldr	r0, [r7, #4]
 8027648:	f000 f82e 	bl	80276a8 <UnityPrintNumber>
    {
        UNITY_OUTPUT_CHAR('0');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
    }
}
 802764c:	e026      	b.n	802769c <UnityPrintNumberByStyle+0x6c>
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
 802764e:	78fb      	ldrb	r3, [r7, #3]
 8027650:	f003 0320 	and.w	r3, r3, #32
 8027654:	2b00      	cmp	r3, #0
 8027656:	d004      	beq.n	8027662 <UnityPrintNumberByStyle+0x32>
        UnityPrintNumberUnsigned((UNITY_UINT)number);
 8027658:	687b      	ldr	r3, [r7, #4]
 802765a:	4618      	mov	r0, r3
 802765c:	f000 f842 	bl	80276e4 <UnityPrintNumberUnsigned>
}
 8027660:	e01c      	b.n	802769c <UnityPrintNumberByStyle+0x6c>
        UNITY_OUTPUT_CHAR('0');
 8027662:	4b10      	ldr	r3, [pc, #64]	; (80276a4 <UnityPrintNumberByStyle+0x74>)
 8027664:	6818      	ldr	r0, [r3, #0]
 8027666:	4b0f      	ldr	r3, [pc, #60]	; (80276a4 <UnityPrintNumberByStyle+0x74>)
 8027668:	681b      	ldr	r3, [r3, #0]
 802766a:	689b      	ldr	r3, [r3, #8]
 802766c:	461a      	mov	r2, r3
 802766e:	2130      	movs	r1, #48	; 0x30
 8027670:	f7ff ff27 	bl	80274c2 <__sputc_r>
        UNITY_OUTPUT_CHAR('x');
 8027674:	4b0b      	ldr	r3, [pc, #44]	; (80276a4 <UnityPrintNumberByStyle+0x74>)
 8027676:	6818      	ldr	r0, [r3, #0]
 8027678:	4b0a      	ldr	r3, [pc, #40]	; (80276a4 <UnityPrintNumberByStyle+0x74>)
 802767a:	681b      	ldr	r3, [r3, #0]
 802767c:	689b      	ldr	r3, [r3, #8]
 802767e:	461a      	mov	r2, r3
 8027680:	2178      	movs	r1, #120	; 0x78
 8027682:	f7ff ff1e 	bl	80274c2 <__sputc_r>
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
 8027686:	687a      	ldr	r2, [r7, #4]
 8027688:	78fb      	ldrb	r3, [r7, #3]
 802768a:	f003 030f 	and.w	r3, r3, #15
 802768e:	b2db      	uxtb	r3, r3
 8027690:	005b      	lsls	r3, r3, #1
 8027692:	b2db      	uxtb	r3, r3
 8027694:	4619      	mov	r1, r3
 8027696:	4610      	mov	r0, r2
 8027698:	f000 f862 	bl	8027760 <UnityPrintNumberHex>
}
 802769c:	bf00      	nop
 802769e:	3708      	adds	r7, #8
 80276a0:	46bd      	mov	sp, r7
 80276a2:	bd80      	pop	{r7, pc}
 80276a4:	20000068 	.word	0x20000068

080276a8 <UnityPrintNumber>:

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
 80276a8:	b580      	push	{r7, lr}
 80276aa:	b084      	sub	sp, #16
 80276ac:	af00      	add	r7, sp, #0
 80276ae:	6078      	str	r0, [r7, #4]
    UNITY_UINT number = (UNITY_UINT)number_to_print;
 80276b0:	687b      	ldr	r3, [r7, #4]
 80276b2:	60fb      	str	r3, [r7, #12]

    if (number_to_print < 0)
 80276b4:	687b      	ldr	r3, [r7, #4]
 80276b6:	2b00      	cmp	r3, #0
 80276b8:	da0b      	bge.n	80276d2 <UnityPrintNumber+0x2a>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
 80276ba:	4b09      	ldr	r3, [pc, #36]	; (80276e0 <UnityPrintNumber+0x38>)
 80276bc:	6818      	ldr	r0, [r3, #0]
 80276be:	4b08      	ldr	r3, [pc, #32]	; (80276e0 <UnityPrintNumber+0x38>)
 80276c0:	681b      	ldr	r3, [r3, #0]
 80276c2:	689b      	ldr	r3, [r3, #8]
 80276c4:	461a      	mov	r2, r3
 80276c6:	212d      	movs	r1, #45	; 0x2d
 80276c8:	f7ff fefb 	bl	80274c2 <__sputc_r>
        number = -number;
 80276cc:	68fb      	ldr	r3, [r7, #12]
 80276ce:	425b      	negs	r3, r3
 80276d0:	60fb      	str	r3, [r7, #12]
    }
    UnityPrintNumberUnsigned(number);
 80276d2:	68f8      	ldr	r0, [r7, #12]
 80276d4:	f000 f806 	bl	80276e4 <UnityPrintNumberUnsigned>
}
 80276d8:	bf00      	nop
 80276da:	3710      	adds	r7, #16
 80276dc:	46bd      	mov	sp, r7
 80276de:	bd80      	pop	{r7, pc}
 80276e0:	20000068 	.word	0x20000068

080276e4 <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 80276e4:	b580      	push	{r7, lr}
 80276e6:	b084      	sub	sp, #16
 80276e8:	af00      	add	r7, sp, #0
 80276ea:	6078      	str	r0, [r7, #4]
    UNITY_UINT divisor = 1;
 80276ec:	2301      	movs	r3, #1
 80276ee:	60fb      	str	r3, [r7, #12]

    /* figure out initial divisor */
    while (number / divisor > 9)
 80276f0:	e005      	b.n	80276fe <UnityPrintNumberUnsigned+0x1a>
    {
        divisor *= 10;
 80276f2:	68fa      	ldr	r2, [r7, #12]
 80276f4:	4613      	mov	r3, r2
 80276f6:	009b      	lsls	r3, r3, #2
 80276f8:	4413      	add	r3, r2
 80276fa:	005b      	lsls	r3, r3, #1
 80276fc:	60fb      	str	r3, [r7, #12]
    while (number / divisor > 9)
 80276fe:	687a      	ldr	r2, [r7, #4]
 8027700:	68fb      	ldr	r3, [r7, #12]
 8027702:	fbb2 f3f3 	udiv	r3, r2, r3
 8027706:	2b09      	cmp	r3, #9
 8027708:	d8f3      	bhi.n	80276f2 <UnityPrintNumberUnsigned+0xe>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 802770a:	4b13      	ldr	r3, [pc, #76]	; (8027758 <UnityPrintNumberUnsigned+0x74>)
 802770c:	6818      	ldr	r0, [r3, #0]
 802770e:	687a      	ldr	r2, [r7, #4]
 8027710:	68fb      	ldr	r3, [r7, #12]
 8027712:	fbb2 f1f3 	udiv	r1, r2, r3
 8027716:	4b11      	ldr	r3, [pc, #68]	; (802775c <UnityPrintNumberUnsigned+0x78>)
 8027718:	fba3 2301 	umull	r2, r3, r3, r1
 802771c:	08da      	lsrs	r2, r3, #3
 802771e:	4613      	mov	r3, r2
 8027720:	009b      	lsls	r3, r3, #2
 8027722:	4413      	add	r3, r2
 8027724:	005b      	lsls	r3, r3, #1
 8027726:	1aca      	subs	r2, r1, r3
 8027728:	b2d3      	uxtb	r3, r2
 802772a:	3330      	adds	r3, #48	; 0x30
 802772c:	b2db      	uxtb	r3, r3
 802772e:	4619      	mov	r1, r3
 8027730:	4b09      	ldr	r3, [pc, #36]	; (8027758 <UnityPrintNumberUnsigned+0x74>)
 8027732:	681b      	ldr	r3, [r3, #0]
 8027734:	689b      	ldr	r3, [r3, #8]
 8027736:	461a      	mov	r2, r3
 8027738:	f7ff fec3 	bl	80274c2 <__sputc_r>
        divisor /= 10;
 802773c:	68fb      	ldr	r3, [r7, #12]
 802773e:	4a07      	ldr	r2, [pc, #28]	; (802775c <UnityPrintNumberUnsigned+0x78>)
 8027740:	fba2 2303 	umull	r2, r3, r2, r3
 8027744:	08db      	lsrs	r3, r3, #3
 8027746:	60fb      	str	r3, [r7, #12]
    } while (divisor > 0);
 8027748:	68fb      	ldr	r3, [r7, #12]
 802774a:	2b00      	cmp	r3, #0
 802774c:	d1dd      	bne.n	802770a <UnityPrintNumberUnsigned+0x26>
}
 802774e:	bf00      	nop
 8027750:	3710      	adds	r7, #16
 8027752:	46bd      	mov	sp, r7
 8027754:	bd80      	pop	{r7, pc}
 8027756:	bf00      	nop
 8027758:	20000068 	.word	0x20000068
 802775c:	cccccccd 	.word	0xcccccccd

08027760 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 8027760:	b580      	push	{r7, lr}
 8027762:	b084      	sub	sp, #16
 8027764:	af00      	add	r7, sp, #0
 8027766:	6078      	str	r0, [r7, #4]
 8027768:	460b      	mov	r3, r1
 802776a:	70fb      	strb	r3, [r7, #3]
    int nibble;
    char nibbles = nibbles_to_print;
 802776c:	78fb      	ldrb	r3, [r7, #3]
 802776e:	73fb      	strb	r3, [r7, #15]
    if ((unsigned)nibbles > (2 * sizeof(number)))
 8027770:	7bfb      	ldrb	r3, [r7, #15]
 8027772:	2b08      	cmp	r3, #8
 8027774:	d92b      	bls.n	80277ce <UnityPrintNumberHex+0x6e>
    {
        nibbles = 2 * sizeof(number);
 8027776:	2308      	movs	r3, #8
 8027778:	73fb      	strb	r3, [r7, #15]
    }

    while (nibbles > 0)
 802777a:	e028      	b.n	80277ce <UnityPrintNumberHex+0x6e>
    {
        nibbles--;
 802777c:	7bfb      	ldrb	r3, [r7, #15]
 802777e:	3b01      	subs	r3, #1
 8027780:	73fb      	strb	r3, [r7, #15]
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 8027782:	7bfb      	ldrb	r3, [r7, #15]
 8027784:	009b      	lsls	r3, r3, #2
 8027786:	687a      	ldr	r2, [r7, #4]
 8027788:	fa22 f303 	lsr.w	r3, r2, r3
 802778c:	f003 030f 	and.w	r3, r3, #15
 8027790:	60bb      	str	r3, [r7, #8]
        if (nibble <= 9)
 8027792:	68bb      	ldr	r3, [r7, #8]
 8027794:	2b09      	cmp	r3, #9
 8027796:	dc0d      	bgt.n	80277b4 <UnityPrintNumberHex+0x54>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 8027798:	4b10      	ldr	r3, [pc, #64]	; (80277dc <UnityPrintNumberHex+0x7c>)
 802779a:	6818      	ldr	r0, [r3, #0]
 802779c:	68bb      	ldr	r3, [r7, #8]
 802779e:	b2db      	uxtb	r3, r3
 80277a0:	3330      	adds	r3, #48	; 0x30
 80277a2:	b2db      	uxtb	r3, r3
 80277a4:	4619      	mov	r1, r3
 80277a6:	4b0d      	ldr	r3, [pc, #52]	; (80277dc <UnityPrintNumberHex+0x7c>)
 80277a8:	681b      	ldr	r3, [r3, #0]
 80277aa:	689b      	ldr	r3, [r3, #8]
 80277ac:	461a      	mov	r2, r3
 80277ae:	f7ff fe88 	bl	80274c2 <__sputc_r>
 80277b2:	e00c      	b.n	80277ce <UnityPrintNumberHex+0x6e>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 80277b4:	4b09      	ldr	r3, [pc, #36]	; (80277dc <UnityPrintNumberHex+0x7c>)
 80277b6:	6818      	ldr	r0, [r3, #0]
 80277b8:	68bb      	ldr	r3, [r7, #8]
 80277ba:	b2db      	uxtb	r3, r3
 80277bc:	3337      	adds	r3, #55	; 0x37
 80277be:	b2db      	uxtb	r3, r3
 80277c0:	4619      	mov	r1, r3
 80277c2:	4b06      	ldr	r3, [pc, #24]	; (80277dc <UnityPrintNumberHex+0x7c>)
 80277c4:	681b      	ldr	r3, [r3, #0]
 80277c6:	689b      	ldr	r3, [r3, #8]
 80277c8:	461a      	mov	r2, r3
 80277ca:	f7ff fe7a 	bl	80274c2 <__sputc_r>
    while (nibbles > 0)
 80277ce:	7bfb      	ldrb	r3, [r7, #15]
 80277d0:	2b00      	cmp	r3, #0
 80277d2:	d1d3      	bne.n	802777c <UnityPrintNumberHex+0x1c>
        }
    }
}
 80277d4:	bf00      	nop
 80277d6:	3710      	adds	r7, #16
 80277d8:	46bd      	mov	sp, r7
 80277da:	bd80      	pop	{r7, pc}
 80277dc:	20000068 	.word	0x20000068

080277e0 <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 80277e0:	b580      	push	{r7, lr}
 80277e2:	b082      	sub	sp, #8
 80277e4:	af00      	add	r7, sp, #0
 80277e6:	6078      	str	r0, [r7, #4]
 80277e8:	6039      	str	r1, [r7, #0]
    UnityPrint(file);
 80277ea:	6878      	ldr	r0, [r7, #4]
 80277ec:	f7ff ff08 	bl	8027600 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 80277f0:	4b13      	ldr	r3, [pc, #76]	; (8027840 <UnityTestResultsBegin+0x60>)
 80277f2:	6818      	ldr	r0, [r3, #0]
 80277f4:	4b12      	ldr	r3, [pc, #72]	; (8027840 <UnityTestResultsBegin+0x60>)
 80277f6:	681b      	ldr	r3, [r3, #0]
 80277f8:	689b      	ldr	r3, [r3, #8]
 80277fa:	461a      	mov	r2, r3
 80277fc:	213a      	movs	r1, #58	; 0x3a
 80277fe:	f7ff fe60 	bl	80274c2 <__sputc_r>
    UnityPrintNumber((UNITY_INT)line);
 8027802:	683b      	ldr	r3, [r7, #0]
 8027804:	4618      	mov	r0, r3
 8027806:	f7ff ff4f 	bl	80276a8 <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 802780a:	4b0d      	ldr	r3, [pc, #52]	; (8027840 <UnityTestResultsBegin+0x60>)
 802780c:	6818      	ldr	r0, [r3, #0]
 802780e:	4b0c      	ldr	r3, [pc, #48]	; (8027840 <UnityTestResultsBegin+0x60>)
 8027810:	681b      	ldr	r3, [r3, #0]
 8027812:	689b      	ldr	r3, [r3, #8]
 8027814:	461a      	mov	r2, r3
 8027816:	213a      	movs	r1, #58	; 0x3a
 8027818:	f7ff fe53 	bl	80274c2 <__sputc_r>
    UnityPrint(Unity.CurrentTestName);
 802781c:	4b09      	ldr	r3, [pc, #36]	; (8027844 <UnityTestResultsBegin+0x64>)
 802781e:	685b      	ldr	r3, [r3, #4]
 8027820:	4618      	mov	r0, r3
 8027822:	f7ff feed 	bl	8027600 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8027826:	4b06      	ldr	r3, [pc, #24]	; (8027840 <UnityTestResultsBegin+0x60>)
 8027828:	6818      	ldr	r0, [r3, #0]
 802782a:	4b05      	ldr	r3, [pc, #20]	; (8027840 <UnityTestResultsBegin+0x60>)
 802782c:	681b      	ldr	r3, [r3, #0]
 802782e:	689b      	ldr	r3, [r3, #8]
 8027830:	461a      	mov	r2, r3
 8027832:	213a      	movs	r1, #58	; 0x3a
 8027834:	f7ff fe45 	bl	80274c2 <__sputc_r>
}
 8027838:	bf00      	nop
 802783a:	3708      	adds	r7, #8
 802783c:	46bd      	mov	sp, r7
 802783e:	bd80      	pop	{r7, pc}
 8027840:	20000068 	.word	0x20000068
 8027844:	20011fc8 	.word	0x20011fc8

08027848 <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 8027848:	b580      	push	{r7, lr}
 802784a:	b082      	sub	sp, #8
 802784c:	af00      	add	r7, sp, #0
 802784e:	6078      	str	r0, [r7, #4]
    UnityTestResultsBegin(Unity.TestFile, line);
 8027850:	4b0a      	ldr	r3, [pc, #40]	; (802787c <UnityTestResultsFailBegin+0x34>)
 8027852:	681b      	ldr	r3, [r3, #0]
 8027854:	6879      	ldr	r1, [r7, #4]
 8027856:	4618      	mov	r0, r3
 8027858:	f7ff ffc2 	bl	80277e0 <UnityTestResultsBegin>
    UnityPrint(UnityStrFail);
 802785c:	4808      	ldr	r0, [pc, #32]	; (8027880 <UnityTestResultsFailBegin+0x38>)
 802785e:	f7ff fecf 	bl	8027600 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8027862:	4b08      	ldr	r3, [pc, #32]	; (8027884 <UnityTestResultsFailBegin+0x3c>)
 8027864:	6818      	ldr	r0, [r3, #0]
 8027866:	4b07      	ldr	r3, [pc, #28]	; (8027884 <UnityTestResultsFailBegin+0x3c>)
 8027868:	681b      	ldr	r3, [r3, #0]
 802786a:	689b      	ldr	r3, [r3, #8]
 802786c:	461a      	mov	r2, r3
 802786e:	213a      	movs	r1, #58	; 0x3a
 8027870:	f7ff fe27 	bl	80274c2 <__sputc_r>
}
 8027874:	bf00      	nop
 8027876:	3708      	adds	r7, #8
 8027878:	46bd      	mov	sp, r7
 802787a:	bd80      	pop	{r7, pc}
 802787c:	20011fc8 	.word	0x20011fc8
 8027880:	0802e6b8 	.word	0x0802e6b8
 8027884:	20000068 	.word	0x20000068

08027888 <UnityConcludeTest>:

/*-----------------------------------------------*/
void UnityConcludeTest(void)
{
 8027888:	b580      	push	{r7, lr}
 802788a:	af00      	add	r7, sp, #0
    if (Unity.CurrentTestIgnored)
 802788c:	4b17      	ldr	r3, [pc, #92]	; (80278ec <UnityConcludeTest+0x64>)
 802788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027890:	2b00      	cmp	r3, #0
 8027892:	d005      	beq.n	80278a0 <UnityConcludeTest+0x18>
    {
        Unity.TestIgnores++;
 8027894:	4b15      	ldr	r3, [pc, #84]	; (80278ec <UnityConcludeTest+0x64>)
 8027896:	69db      	ldr	r3, [r3, #28]
 8027898:	3301      	adds	r3, #1
 802789a:	4a14      	ldr	r2, [pc, #80]	; (80278ec <UnityConcludeTest+0x64>)
 802789c:	61d3      	str	r3, [r2, #28]
 802789e:	e014      	b.n	80278ca <UnityConcludeTest+0x42>
    }
    else if (!Unity.CurrentTestFailed)
 80278a0:	4b12      	ldr	r3, [pc, #72]	; (80278ec <UnityConcludeTest+0x64>)
 80278a2:	6a1b      	ldr	r3, [r3, #32]
 80278a4:	2b00      	cmp	r3, #0
 80278a6:	d10b      	bne.n	80278c0 <UnityConcludeTest+0x38>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 80278a8:	4b10      	ldr	r3, [pc, #64]	; (80278ec <UnityConcludeTest+0x64>)
 80278aa:	681a      	ldr	r2, [r3, #0]
 80278ac:	4b0f      	ldr	r3, [pc, #60]	; (80278ec <UnityConcludeTest+0x64>)
 80278ae:	691b      	ldr	r3, [r3, #16]
 80278b0:	4619      	mov	r1, r3
 80278b2:	4610      	mov	r0, r2
 80278b4:	f7ff ff94 	bl	80277e0 <UnityTestResultsBegin>
        UnityPrint(UnityStrPass);
 80278b8:	480d      	ldr	r0, [pc, #52]	; (80278f0 <UnityConcludeTest+0x68>)
 80278ba:	f7ff fea1 	bl	8027600 <UnityPrint>
 80278be:	e004      	b.n	80278ca <UnityConcludeTest+0x42>
    }
    else
    {
        Unity.TestFailures++;
 80278c0:	4b0a      	ldr	r3, [pc, #40]	; (80278ec <UnityConcludeTest+0x64>)
 80278c2:	699b      	ldr	r3, [r3, #24]
 80278c4:	3301      	adds	r3, #1
 80278c6:	4a09      	ldr	r2, [pc, #36]	; (80278ec <UnityConcludeTest+0x64>)
 80278c8:	6193      	str	r3, [r2, #24]
    }

    Unity.CurrentTestFailed = 0;
 80278ca:	4b08      	ldr	r3, [pc, #32]	; (80278ec <UnityConcludeTest+0x64>)
 80278cc:	2200      	movs	r2, #0
 80278ce:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 80278d0:	4b06      	ldr	r3, [pc, #24]	; (80278ec <UnityConcludeTest+0x64>)
 80278d2:	2200      	movs	r2, #0
 80278d4:	625a      	str	r2, [r3, #36]	; 0x24
    UNITY_EXEC_TIME_RESET();
    UNITY_PRINT_EOL();
 80278d6:	4b07      	ldr	r3, [pc, #28]	; (80278f4 <UnityConcludeTest+0x6c>)
 80278d8:	6818      	ldr	r0, [r3, #0]
 80278da:	4b06      	ldr	r3, [pc, #24]	; (80278f4 <UnityConcludeTest+0x6c>)
 80278dc:	681b      	ldr	r3, [r3, #0]
 80278de:	689b      	ldr	r3, [r3, #8]
 80278e0:	461a      	mov	r2, r3
 80278e2:	210a      	movs	r1, #10
 80278e4:	f7ff fded 	bl	80274c2 <__sputc_r>
    UNITY_FLUSH_CALL();
}
 80278e8:	bf00      	nop
 80278ea:	bd80      	pop	{r7, pc}
 80278ec:	20011fc8 	.word	0x20011fc8
 80278f0:	0802e6b0 	.word	0x0802e6b0
 80278f4:	20000068 	.word	0x20000068

080278f8 <UnityAddMsgIfSpecified>:

/*-----------------------------------------------*/
static void UnityAddMsgIfSpecified(const char* msg)
{
 80278f8:	b580      	push	{r7, lr}
 80278fa:	b082      	sub	sp, #8
 80278fc:	af00      	add	r7, sp, #0
 80278fe:	6078      	str	r0, [r7, #4]
    if (msg)
 8027900:	687b      	ldr	r3, [r7, #4]
 8027902:	2b00      	cmp	r3, #0
 8027904:	d020      	beq.n	8027948 <UnityAddMsgIfSpecified+0x50>
    {
        UnityPrint(UnityStrSpacer);
 8027906:	4812      	ldr	r0, [pc, #72]	; (8027950 <UnityAddMsgIfSpecified+0x58>)
 8027908:	f7ff fe7a 	bl	8027600 <UnityPrint>
#ifndef UNITY_EXCLUDE_DETAILS
        if (Unity.CurrentDetail1)
 802790c:	4b11      	ldr	r3, [pc, #68]	; (8027954 <UnityAddMsgIfSpecified+0x5c>)
 802790e:	689b      	ldr	r3, [r3, #8]
 8027910:	2b00      	cmp	r3, #0
 8027912:	d016      	beq.n	8027942 <UnityAddMsgIfSpecified+0x4a>
        {
            UnityPrint(UnityStrDetail1Name);
 8027914:	4810      	ldr	r0, [pc, #64]	; (8027958 <UnityAddMsgIfSpecified+0x60>)
 8027916:	f7ff fe73 	bl	8027600 <UnityPrint>
            UnityPrint(Unity.CurrentDetail1);
 802791a:	4b0e      	ldr	r3, [pc, #56]	; (8027954 <UnityAddMsgIfSpecified+0x5c>)
 802791c:	689b      	ldr	r3, [r3, #8]
 802791e:	4618      	mov	r0, r3
 8027920:	f7ff fe6e 	bl	8027600 <UnityPrint>
            if (Unity.CurrentDetail2)
 8027924:	4b0b      	ldr	r3, [pc, #44]	; (8027954 <UnityAddMsgIfSpecified+0x5c>)
 8027926:	68db      	ldr	r3, [r3, #12]
 8027928:	2b00      	cmp	r3, #0
 802792a:	d007      	beq.n	802793c <UnityAddMsgIfSpecified+0x44>
            {
                UnityPrint(UnityStrDetail2Name);
 802792c:	480b      	ldr	r0, [pc, #44]	; (802795c <UnityAddMsgIfSpecified+0x64>)
 802792e:	f7ff fe67 	bl	8027600 <UnityPrint>
                UnityPrint(Unity.CurrentDetail2);
 8027932:	4b08      	ldr	r3, [pc, #32]	; (8027954 <UnityAddMsgIfSpecified+0x5c>)
 8027934:	68db      	ldr	r3, [r3, #12]
 8027936:	4618      	mov	r0, r3
 8027938:	f7ff fe62 	bl	8027600 <UnityPrint>
            }
            UnityPrint(UnityStrSpacer);
 802793c:	4804      	ldr	r0, [pc, #16]	; (8027950 <UnityAddMsgIfSpecified+0x58>)
 802793e:	f7ff fe5f 	bl	8027600 <UnityPrint>
        }
#endif
        UnityPrint(msg);
 8027942:	6878      	ldr	r0, [r7, #4]
 8027944:	f7ff fe5c 	bl	8027600 <UnityPrint>
    }
}
 8027948:	bf00      	nop
 802794a:	3708      	adds	r7, #8
 802794c:	46bd      	mov	sp, r7
 802794e:	bd80      	pop	{r7, pc}
 8027950:	0802e6c0 	.word	0x0802e6c0
 8027954:	20011fc8 	.word	0x20011fc8
 8027958:	0802e710 	.word	0x0802e710
 802795c:	0802e71c 	.word	0x0802e71c

08027960 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const UNITY_INT expected,
                            const UNITY_INT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
 8027960:	b580      	push	{r7, lr}
 8027962:	b084      	sub	sp, #16
 8027964:	af00      	add	r7, sp, #0
 8027966:	60f8      	str	r0, [r7, #12]
 8027968:	60b9      	str	r1, [r7, #8]
 802796a:	607a      	str	r2, [r7, #4]
 802796c:	603b      	str	r3, [r7, #0]
    RETURN_IF_FAIL_OR_IGNORE;
 802796e:	4b16      	ldr	r3, [pc, #88]	; (80279c8 <UnityAssertEqualNumber+0x68>)
 8027970:	6a1b      	ldr	r3, [r3, #32]
 8027972:	2b00      	cmp	r3, #0
 8027974:	d124      	bne.n	80279c0 <UnityAssertEqualNumber+0x60>
 8027976:	4b14      	ldr	r3, [pc, #80]	; (80279c8 <UnityAssertEqualNumber+0x68>)
 8027978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802797a:	2b00      	cmp	r3, #0
 802797c:	d120      	bne.n	80279c0 <UnityAssertEqualNumber+0x60>

    if (expected != actual)
 802797e:	68fa      	ldr	r2, [r7, #12]
 8027980:	68bb      	ldr	r3, [r7, #8]
 8027982:	429a      	cmp	r2, r3
 8027984:	d01d      	beq.n	80279c2 <UnityAssertEqualNumber+0x62>
    {
        UnityTestResultsFailBegin(lineNumber);
 8027986:	6838      	ldr	r0, [r7, #0]
 8027988:	f7ff ff5e 	bl	8027848 <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
 802798c:	480f      	ldr	r0, [pc, #60]	; (80279cc <UnityAssertEqualNumber+0x6c>)
 802798e:	f7ff fe37 	bl	8027600 <UnityPrint>
        UnityPrintNumberByStyle(expected, style);
 8027992:	7e3b      	ldrb	r3, [r7, #24]
 8027994:	4619      	mov	r1, r3
 8027996:	68f8      	ldr	r0, [r7, #12]
 8027998:	f7ff fe4a 	bl	8027630 <UnityPrintNumberByStyle>
        UnityPrint(UnityStrWas);
 802799c:	480c      	ldr	r0, [pc, #48]	; (80279d0 <UnityAssertEqualNumber+0x70>)
 802799e:	f7ff fe2f 	bl	8027600 <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
 80279a2:	7e3b      	ldrb	r3, [r7, #24]
 80279a4:	4619      	mov	r1, r3
 80279a6:	68b8      	ldr	r0, [r7, #8]
 80279a8:	f7ff fe42 	bl	8027630 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
 80279ac:	6878      	ldr	r0, [r7, #4]
 80279ae:	f7ff ffa3 	bl	80278f8 <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 80279b2:	4b05      	ldr	r3, [pc, #20]	; (80279c8 <UnityAssertEqualNumber+0x68>)
 80279b4:	2201      	movs	r2, #1
 80279b6:	621a      	str	r2, [r3, #32]
 80279b8:	2101      	movs	r1, #1
 80279ba:	4806      	ldr	r0, [pc, #24]	; (80279d4 <UnityAssertEqualNumber+0x74>)
 80279bc:	f7e8 fb46 	bl	801004c <longjmp>
    RETURN_IF_FAIL_OR_IGNORE;
 80279c0:	bf00      	nop
    }
}
 80279c2:	3710      	adds	r7, #16
 80279c4:	46bd      	mov	sp, r7
 80279c6:	bd80      	pop	{r7, pc}
 80279c8:	20011fc8 	.word	0x20011fc8
 80279cc:	0802e6c4 	.word	0x0802e6c4
 80279d0:	0802e6d0 	.word	0x0802e6d0
 80279d4:	20011ff0 	.word	0x20011ff0

080279d8 <UnityDefaultTestRun>:
    UNITY_IGNORE_AND_BAIL;
}

/*-----------------------------------------------*/
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 80279d8:	b580      	push	{r7, lr}
 80279da:	b084      	sub	sp, #16
 80279dc:	af00      	add	r7, sp, #0
 80279de:	60f8      	str	r0, [r7, #12]
 80279e0:	60b9      	str	r1, [r7, #8]
 80279e2:	607a      	str	r2, [r7, #4]
    Unity.CurrentTestName = FuncName;
 80279e4:	4a14      	ldr	r2, [pc, #80]	; (8027a38 <UnityDefaultTestRun+0x60>)
 80279e6:	68bb      	ldr	r3, [r7, #8]
 80279e8:	6053      	str	r3, [r2, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 80279ea:	687b      	ldr	r3, [r7, #4]
 80279ec:	4a12      	ldr	r2, [pc, #72]	; (8027a38 <UnityDefaultTestRun+0x60>)
 80279ee:	6113      	str	r3, [r2, #16]
    Unity.NumberOfTests++;
 80279f0:	4b11      	ldr	r3, [pc, #68]	; (8027a38 <UnityDefaultTestRun+0x60>)
 80279f2:	695b      	ldr	r3, [r3, #20]
 80279f4:	3301      	adds	r3, #1
 80279f6:	4a10      	ldr	r2, [pc, #64]	; (8027a38 <UnityDefaultTestRun+0x60>)
 80279f8:	6153      	str	r3, [r2, #20]
    UNITY_CLR_DETAILS();
 80279fa:	4b0f      	ldr	r3, [pc, #60]	; (8027a38 <UnityDefaultTestRun+0x60>)
 80279fc:	2200      	movs	r2, #0
 80279fe:	609a      	str	r2, [r3, #8]
 8027a00:	4b0d      	ldr	r3, [pc, #52]	; (8027a38 <UnityDefaultTestRun+0x60>)
 8027a02:	2200      	movs	r2, #0
 8027a04:	60da      	str	r2, [r3, #12]
    if (TEST_PROTECT())
 8027a06:	480d      	ldr	r0, [pc, #52]	; (8027a3c <UnityDefaultTestRun+0x64>)
 8027a08:	f7e8 fb1a 	bl	8010040 <setjmp>
 8027a0c:	4603      	mov	r3, r0
 8027a0e:	2b00      	cmp	r3, #0
 8027a10:	d103      	bne.n	8027a1a <UnityDefaultTestRun+0x42>
    {
        setUp();
 8027a12:	f7ff fd83 	bl	802751c <setUp>
        Func();
 8027a16:	68fb      	ldr	r3, [r7, #12]
 8027a18:	4798      	blx	r3
    }
    if (TEST_PROTECT())
 8027a1a:	4808      	ldr	r0, [pc, #32]	; (8027a3c <UnityDefaultTestRun+0x64>)
 8027a1c:	f7e8 fb10 	bl	8010040 <setjmp>
 8027a20:	4603      	mov	r3, r0
 8027a22:	2b00      	cmp	r3, #0
 8027a24:	d101      	bne.n	8027a2a <UnityDefaultTestRun+0x52>
    {
        tearDown();
 8027a26:	f7ff fd80 	bl	802752a <tearDown>
    }
    UnityConcludeTest();
 8027a2a:	f7ff ff2d 	bl	8027888 <UnityConcludeTest>
}
 8027a2e:	bf00      	nop
 8027a30:	3710      	adds	r7, #16
 8027a32:	46bd      	mov	sp, r7
 8027a34:	bd80      	pop	{r7, pc}
 8027a36:	bf00      	nop
 8027a38:	20011fc8 	.word	0x20011fc8
 8027a3c:	20011ff0 	.word	0x20011ff0

08027a40 <UnityBegin>:

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 8027a40:	b480      	push	{r7}
 8027a42:	b083      	sub	sp, #12
 8027a44:	af00      	add	r7, sp, #0
 8027a46:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 8027a48:	4a11      	ldr	r2, [pc, #68]	; (8027a90 <UnityBegin+0x50>)
 8027a4a:	687b      	ldr	r3, [r7, #4]
 8027a4c:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 8027a4e:	4b10      	ldr	r3, [pc, #64]	; (8027a90 <UnityBegin+0x50>)
 8027a50:	2200      	movs	r2, #0
 8027a52:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 8027a54:	4b0e      	ldr	r3, [pc, #56]	; (8027a90 <UnityBegin+0x50>)
 8027a56:	2200      	movs	r2, #0
 8027a58:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 8027a5a:	4b0d      	ldr	r3, [pc, #52]	; (8027a90 <UnityBegin+0x50>)
 8027a5c:	2200      	movs	r2, #0
 8027a5e:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 8027a60:	4b0b      	ldr	r3, [pc, #44]	; (8027a90 <UnityBegin+0x50>)
 8027a62:	2200      	movs	r2, #0
 8027a64:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 8027a66:	4b0a      	ldr	r3, [pc, #40]	; (8027a90 <UnityBegin+0x50>)
 8027a68:	2200      	movs	r2, #0
 8027a6a:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 8027a6c:	4b08      	ldr	r3, [pc, #32]	; (8027a90 <UnityBegin+0x50>)
 8027a6e:	2200      	movs	r2, #0
 8027a70:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8027a72:	4b07      	ldr	r3, [pc, #28]	; (8027a90 <UnityBegin+0x50>)
 8027a74:	2200      	movs	r2, #0
 8027a76:	625a      	str	r2, [r3, #36]	; 0x24
    UNITY_EXEC_TIME_RESET();

    UNITY_CLR_DETAILS();
 8027a78:	4b05      	ldr	r3, [pc, #20]	; (8027a90 <UnityBegin+0x50>)
 8027a7a:	2200      	movs	r2, #0
 8027a7c:	609a      	str	r2, [r3, #8]
 8027a7e:	4b04      	ldr	r3, [pc, #16]	; (8027a90 <UnityBegin+0x50>)
 8027a80:	2200      	movs	r2, #0
 8027a82:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 8027a84:	bf00      	nop
 8027a86:	370c      	adds	r7, #12
 8027a88:	46bd      	mov	sp, r7
 8027a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a8e:	4770      	bx	lr
 8027a90:	20011fc8 	.word	0x20011fc8

08027a94 <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 8027a94:	b580      	push	{r7, lr}
 8027a96:	af00      	add	r7, sp, #0
    UNITY_PRINT_EOL();
 8027a98:	4b26      	ldr	r3, [pc, #152]	; (8027b34 <UnityEnd+0xa0>)
 8027a9a:	6818      	ldr	r0, [r3, #0]
 8027a9c:	4b25      	ldr	r3, [pc, #148]	; (8027b34 <UnityEnd+0xa0>)
 8027a9e:	681b      	ldr	r3, [r3, #0]
 8027aa0:	689b      	ldr	r3, [r3, #8]
 8027aa2:	461a      	mov	r2, r3
 8027aa4:	210a      	movs	r1, #10
 8027aa6:	f7ff fd0c 	bl	80274c2 <__sputc_r>
    UnityPrint(UnityStrBreaker);
 8027aaa:	4823      	ldr	r0, [pc, #140]	; (8027b38 <UnityEnd+0xa4>)
 8027aac:	f7ff fda8 	bl	8027600 <UnityPrint>
    UNITY_PRINT_EOL();
 8027ab0:	4b20      	ldr	r3, [pc, #128]	; (8027b34 <UnityEnd+0xa0>)
 8027ab2:	6818      	ldr	r0, [r3, #0]
 8027ab4:	4b1f      	ldr	r3, [pc, #124]	; (8027b34 <UnityEnd+0xa0>)
 8027ab6:	681b      	ldr	r3, [r3, #0]
 8027ab8:	689b      	ldr	r3, [r3, #8]
 8027aba:	461a      	mov	r2, r3
 8027abc:	210a      	movs	r1, #10
 8027abe:	f7ff fd00 	bl	80274c2 <__sputc_r>
    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));
 8027ac2:	4b1e      	ldr	r3, [pc, #120]	; (8027b3c <UnityEnd+0xa8>)
 8027ac4:	695b      	ldr	r3, [r3, #20]
 8027ac6:	4618      	mov	r0, r3
 8027ac8:	f7ff fdee 	bl	80276a8 <UnityPrintNumber>
    UnityPrint(UnityStrResultsTests);
 8027acc:	481c      	ldr	r0, [pc, #112]	; (8027b40 <UnityEnd+0xac>)
 8027ace:	f7ff fd97 	bl	8027600 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestFailures));
 8027ad2:	4b1a      	ldr	r3, [pc, #104]	; (8027b3c <UnityEnd+0xa8>)
 8027ad4:	699b      	ldr	r3, [r3, #24]
 8027ad6:	4618      	mov	r0, r3
 8027ad8:	f7ff fde6 	bl	80276a8 <UnityPrintNumber>
    UnityPrint(UnityStrResultsFailures);
 8027adc:	4819      	ldr	r0, [pc, #100]	; (8027b44 <UnityEnd+0xb0>)
 8027ade:	f7ff fd8f 	bl	8027600 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestIgnores));
 8027ae2:	4b16      	ldr	r3, [pc, #88]	; (8027b3c <UnityEnd+0xa8>)
 8027ae4:	69db      	ldr	r3, [r3, #28]
 8027ae6:	4618      	mov	r0, r3
 8027ae8:	f7ff fdde 	bl	80276a8 <UnityPrintNumber>
    UnityPrint(UnityStrResultsIgnored);
 8027aec:	4816      	ldr	r0, [pc, #88]	; (8027b48 <UnityEnd+0xb4>)
 8027aee:	f7ff fd87 	bl	8027600 <UnityPrint>
    UNITY_PRINT_EOL();
 8027af2:	4b10      	ldr	r3, [pc, #64]	; (8027b34 <UnityEnd+0xa0>)
 8027af4:	6818      	ldr	r0, [r3, #0]
 8027af6:	4b0f      	ldr	r3, [pc, #60]	; (8027b34 <UnityEnd+0xa0>)
 8027af8:	681b      	ldr	r3, [r3, #0]
 8027afa:	689b      	ldr	r3, [r3, #8]
 8027afc:	461a      	mov	r2, r3
 8027afe:	210a      	movs	r1, #10
 8027b00:	f7ff fcdf 	bl	80274c2 <__sputc_r>
    if (Unity.TestFailures == 0U)
 8027b04:	4b0d      	ldr	r3, [pc, #52]	; (8027b3c <UnityEnd+0xa8>)
 8027b06:	699b      	ldr	r3, [r3, #24]
 8027b08:	2b00      	cmp	r3, #0
 8027b0a:	d103      	bne.n	8027b14 <UnityEnd+0x80>
    {
        UnityPrint(UnityStrOk);
 8027b0c:	480f      	ldr	r0, [pc, #60]	; (8027b4c <UnityEnd+0xb8>)
 8027b0e:	f7ff fd77 	bl	8027600 <UnityPrint>
 8027b12:	e002      	b.n	8027b1a <UnityEnd+0x86>
    }
    else
    {
        UnityPrint(UnityStrFail);
 8027b14:	480e      	ldr	r0, [pc, #56]	; (8027b50 <UnityEnd+0xbc>)
 8027b16:	f7ff fd73 	bl	8027600 <UnityPrint>
#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');
#endif
    }
    UNITY_PRINT_EOL();
 8027b1a:	4b06      	ldr	r3, [pc, #24]	; (8027b34 <UnityEnd+0xa0>)
 8027b1c:	6818      	ldr	r0, [r3, #0]
 8027b1e:	4b05      	ldr	r3, [pc, #20]	; (8027b34 <UnityEnd+0xa0>)
 8027b20:	681b      	ldr	r3, [r3, #0]
 8027b22:	689b      	ldr	r3, [r3, #8]
 8027b24:	461a      	mov	r2, r3
 8027b26:	210a      	movs	r1, #10
 8027b28:	f7ff fccb 	bl	80274c2 <__sputc_r>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
 8027b2c:	4b03      	ldr	r3, [pc, #12]	; (8027b3c <UnityEnd+0xa8>)
 8027b2e:	699b      	ldr	r3, [r3, #24]
}
 8027b30:	4618      	mov	r0, r3
 8027b32:	bd80      	pop	{r7, pc}
 8027b34:	20000068 	.word	0x20000068
 8027b38:	0802e6d8 	.word	0x0802e6d8
 8027b3c:	20011fc8 	.word	0x20011fc8
 8027b40:	0802e6f0 	.word	0x0802e6f0
 8027b44:	0802e6f8 	.word	0x0802e6f8
 8027b48:	0802e704 	.word	0x0802e704
 8027b4c:	0802e6ac 	.word	0x0802e6ac
 8027b50:	0802e6b8 	.word	0x0802e6b8

08027b54 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8027b54:	b580      	push	{r7, lr}
 8027b56:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8027b58:	4b11      	ldr	r3, [pc, #68]	; (8027ba0 <MX_UART5_Init+0x4c>)
 8027b5a:	4a12      	ldr	r2, [pc, #72]	; (8027ba4 <MX_UART5_Init+0x50>)
 8027b5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 187500;
 8027b5e:	4b10      	ldr	r3, [pc, #64]	; (8027ba0 <MX_UART5_Init+0x4c>)
 8027b60:	4a11      	ldr	r2, [pc, #68]	; (8027ba8 <MX_UART5_Init+0x54>)
 8027b62:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8027b64:	4b0e      	ldr	r3, [pc, #56]	; (8027ba0 <MX_UART5_Init+0x4c>)
 8027b66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8027b6a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8027b6c:	4b0c      	ldr	r3, [pc, #48]	; (8027ba0 <MX_UART5_Init+0x4c>)
 8027b6e:	2200      	movs	r2, #0
 8027b70:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8027b72:	4b0b      	ldr	r3, [pc, #44]	; (8027ba0 <MX_UART5_Init+0x4c>)
 8027b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8027b78:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8027b7a:	4b09      	ldr	r3, [pc, #36]	; (8027ba0 <MX_UART5_Init+0x4c>)
 8027b7c:	220c      	movs	r2, #12
 8027b7e:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8027b80:	4b07      	ldr	r3, [pc, #28]	; (8027ba0 <MX_UART5_Init+0x4c>)
 8027b82:	2200      	movs	r2, #0
 8027b84:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8027b86:	4b06      	ldr	r3, [pc, #24]	; (8027ba0 <MX_UART5_Init+0x4c>)
 8027b88:	2200      	movs	r2, #0
 8027b8a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8027b8c:	4804      	ldr	r0, [pc, #16]	; (8027ba0 <MX_UART5_Init+0x4c>)
 8027b8e:	f7eb fde7 	bl	8013760 <HAL_UART_Init>
 8027b92:	4603      	mov	r3, r0
 8027b94:	2b00      	cmp	r3, #0
 8027b96:	d001      	beq.n	8027b9c <MX_UART5_Init+0x48>
  {
    Error_Handler();
 8027b98:	f7fd ff48 	bl	8025a2c <Error_Handler>
  }

}
 8027b9c:	bf00      	nop
 8027b9e:	bd80      	pop	{r7, pc}
 8027ba0:	200120ac 	.word	0x200120ac
 8027ba4:	40005000 	.word	0x40005000
 8027ba8:	0002dc6c 	.word	0x0002dc6c

08027bac <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8027bac:	b580      	push	{r7, lr}
 8027bae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8027bb0:	4b11      	ldr	r3, [pc, #68]	; (8027bf8 <MX_USART1_UART_Init+0x4c>)
 8027bb2:	4a12      	ldr	r2, [pc, #72]	; (8027bfc <MX_USART1_UART_Init+0x50>)
 8027bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8027bb6:	4b10      	ldr	r3, [pc, #64]	; (8027bf8 <MX_USART1_UART_Init+0x4c>)
 8027bb8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8027bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8027bbe:	4b0e      	ldr	r3, [pc, #56]	; (8027bf8 <MX_USART1_UART_Init+0x4c>)
 8027bc0:	2200      	movs	r2, #0
 8027bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8027bc4:	4b0c      	ldr	r3, [pc, #48]	; (8027bf8 <MX_USART1_UART_Init+0x4c>)
 8027bc6:	2200      	movs	r2, #0
 8027bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8027bca:	4b0b      	ldr	r3, [pc, #44]	; (8027bf8 <MX_USART1_UART_Init+0x4c>)
 8027bcc:	2200      	movs	r2, #0
 8027bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8027bd0:	4b09      	ldr	r3, [pc, #36]	; (8027bf8 <MX_USART1_UART_Init+0x4c>)
 8027bd2:	2208      	movs	r2, #8
 8027bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8027bd6:	4b08      	ldr	r3, [pc, #32]	; (8027bf8 <MX_USART1_UART_Init+0x4c>)
 8027bd8:	2200      	movs	r2, #0
 8027bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8027bdc:	4b06      	ldr	r3, [pc, #24]	; (8027bf8 <MX_USART1_UART_Init+0x4c>)
 8027bde:	2200      	movs	r2, #0
 8027be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8027be2:	4805      	ldr	r0, [pc, #20]	; (8027bf8 <MX_USART1_UART_Init+0x4c>)
 8027be4:	f7eb fdbc 	bl	8013760 <HAL_UART_Init>
 8027be8:	4603      	mov	r3, r0
 8027bea:	2b00      	cmp	r3, #0
 8027bec:	d001      	beq.n	8027bf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8027bee:	f7fd ff1d 	bl	8025a2c <Error_Handler>
  }

}
 8027bf2:	bf00      	nop
 8027bf4:	bd80      	pop	{r7, pc}
 8027bf6:	bf00      	nop
 8027bf8:	200120ec 	.word	0x200120ec
 8027bfc:	40011000 	.word	0x40011000

08027c00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8027c00:	b580      	push	{r7, lr}
 8027c02:	b08c      	sub	sp, #48	; 0x30
 8027c04:	af00      	add	r7, sp, #0
 8027c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8027c08:	f107 031c 	add.w	r3, r7, #28
 8027c0c:	2200      	movs	r2, #0
 8027c0e:	601a      	str	r2, [r3, #0]
 8027c10:	605a      	str	r2, [r3, #4]
 8027c12:	609a      	str	r2, [r3, #8]
 8027c14:	60da      	str	r2, [r3, #12]
 8027c16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8027c18:	687b      	ldr	r3, [r7, #4]
 8027c1a:	681b      	ldr	r3, [r3, #0]
 8027c1c:	4a79      	ldr	r2, [pc, #484]	; (8027e04 <HAL_UART_MspInit+0x204>)
 8027c1e:	4293      	cmp	r3, r2
 8027c20:	f040 8082 	bne.w	8027d28 <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8027c24:	2300      	movs	r3, #0
 8027c26:	61bb      	str	r3, [r7, #24]
 8027c28:	4a77      	ldr	r2, [pc, #476]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027c2a:	4b77      	ldr	r3, [pc, #476]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027c32:	6413      	str	r3, [r2, #64]	; 0x40
 8027c34:	4b74      	ldr	r3, [pc, #464]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027c3c:	61bb      	str	r3, [r7, #24]
 8027c3e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8027c40:	2300      	movs	r3, #0
 8027c42:	617b      	str	r3, [r7, #20]
 8027c44:	4a70      	ldr	r2, [pc, #448]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027c46:	4b70      	ldr	r3, [pc, #448]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c4a:	f043 0304 	orr.w	r3, r3, #4
 8027c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8027c50:	4b6d      	ldr	r3, [pc, #436]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c54:	f003 0304 	and.w	r3, r3, #4
 8027c58:	617b      	str	r3, [r7, #20]
 8027c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8027c5c:	2300      	movs	r3, #0
 8027c5e:	613b      	str	r3, [r7, #16]
 8027c60:	4a69      	ldr	r2, [pc, #420]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027c62:	4b69      	ldr	r3, [pc, #420]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c66:	f043 0308 	orr.w	r3, r3, #8
 8027c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8027c6c:	4b66      	ldr	r3, [pc, #408]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c70:	f003 0308 	and.w	r3, r3, #8
 8027c74:	613b      	str	r3, [r7, #16]
 8027c76:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8027c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8027c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8027c7e:	2302      	movs	r3, #2
 8027c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8027c82:	2301      	movs	r3, #1
 8027c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8027c86:	2303      	movs	r3, #3
 8027c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8027c8a:	2308      	movs	r3, #8
 8027c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8027c8e:	f107 031c 	add.w	r3, r7, #28
 8027c92:	4619      	mov	r1, r3
 8027c94:	485d      	ldr	r0, [pc, #372]	; (8027e0c <HAL_UART_MspInit+0x20c>)
 8027c96:	f7ea fb25 	bl	80122e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8027c9a:	2304      	movs	r3, #4
 8027c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8027c9e:	2302      	movs	r3, #2
 8027ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8027ca2:	2301      	movs	r3, #1
 8027ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8027ca6:	2303      	movs	r3, #3
 8027ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8027caa:	2308      	movs	r3, #8
 8027cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8027cae:	f107 031c 	add.w	r3, r7, #28
 8027cb2:	4619      	mov	r1, r3
 8027cb4:	4856      	ldr	r0, [pc, #344]	; (8027e10 <HAL_UART_MspInit+0x210>)
 8027cb6:	f7ea fb15 	bl	80122e4 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8027cba:	4b56      	ldr	r3, [pc, #344]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027cbc:	4a56      	ldr	r2, [pc, #344]	; (8027e18 <HAL_UART_MspInit+0x218>)
 8027cbe:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8027cc0:	4b54      	ldr	r3, [pc, #336]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027cc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8027cc6:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8027cc8:	4b52      	ldr	r3, [pc, #328]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027cca:	2240      	movs	r2, #64	; 0x40
 8027ccc:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8027cce:	4b51      	ldr	r3, [pc, #324]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027cd0:	2200      	movs	r2, #0
 8027cd2:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8027cd4:	4b4f      	ldr	r3, [pc, #316]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8027cda:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8027cdc:	4b4d      	ldr	r3, [pc, #308]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027cde:	2200      	movs	r2, #0
 8027ce0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8027ce2:	4b4c      	ldr	r3, [pc, #304]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027ce4:	2200      	movs	r2, #0
 8027ce6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8027ce8:	4b4a      	ldr	r3, [pc, #296]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027cea:	2200      	movs	r2, #0
 8027cec:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8027cee:	4b49      	ldr	r3, [pc, #292]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027cf0:	2200      	movs	r2, #0
 8027cf2:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8027cf4:	4b47      	ldr	r3, [pc, #284]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027cf6:	2200      	movs	r2, #0
 8027cf8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8027cfa:	4846      	ldr	r0, [pc, #280]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027cfc:	f7e8 fc88 	bl	8010610 <HAL_DMA_Init>
 8027d00:	4603      	mov	r3, r0
 8027d02:	2b00      	cmp	r3, #0
 8027d04:	d001      	beq.n	8027d0a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8027d06:	f7fd fe91 	bl	8025a2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8027d0a:	687b      	ldr	r3, [r7, #4]
 8027d0c:	4a41      	ldr	r2, [pc, #260]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8027d10:	4a40      	ldr	r2, [pc, #256]	; (8027e14 <HAL_UART_MspInit+0x214>)
 8027d12:	687b      	ldr	r3, [r7, #4]
 8027d14:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8027d16:	2200      	movs	r2, #0
 8027d18:	2105      	movs	r1, #5
 8027d1a:	2035      	movs	r0, #53	; 0x35
 8027d1c:	f7e8 fc4e 	bl	80105bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8027d20:	2035      	movs	r0, #53	; 0x35
 8027d22:	f7e8 fc67 	bl	80105f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8027d26:	e068      	b.n	8027dfa <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART1)
 8027d28:	687b      	ldr	r3, [r7, #4]
 8027d2a:	681b      	ldr	r3, [r3, #0]
 8027d2c:	4a3b      	ldr	r2, [pc, #236]	; (8027e1c <HAL_UART_MspInit+0x21c>)
 8027d2e:	4293      	cmp	r3, r2
 8027d30:	d163      	bne.n	8027dfa <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART1_CLK_ENABLE();
 8027d32:	2300      	movs	r3, #0
 8027d34:	60fb      	str	r3, [r7, #12]
 8027d36:	4a34      	ldr	r2, [pc, #208]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027d38:	4b33      	ldr	r3, [pc, #204]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027d3c:	f043 0310 	orr.w	r3, r3, #16
 8027d40:	6453      	str	r3, [r2, #68]	; 0x44
 8027d42:	4b31      	ldr	r3, [pc, #196]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027d46:	f003 0310 	and.w	r3, r3, #16
 8027d4a:	60fb      	str	r3, [r7, #12]
 8027d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8027d4e:	2300      	movs	r3, #0
 8027d50:	60bb      	str	r3, [r7, #8]
 8027d52:	4a2d      	ldr	r2, [pc, #180]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027d54:	4b2c      	ldr	r3, [pc, #176]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027d58:	f043 0301 	orr.w	r3, r3, #1
 8027d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8027d5e:	4b2a      	ldr	r3, [pc, #168]	; (8027e08 <HAL_UART_MspInit+0x208>)
 8027d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027d62:	f003 0301 	and.w	r3, r3, #1
 8027d66:	60bb      	str	r3, [r7, #8]
 8027d68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8027d6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8027d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8027d70:	2302      	movs	r3, #2
 8027d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8027d74:	2301      	movs	r3, #1
 8027d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8027d78:	2303      	movs	r3, #3
 8027d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8027d7c:	2307      	movs	r3, #7
 8027d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8027d80:	f107 031c 	add.w	r3, r7, #28
 8027d84:	4619      	mov	r1, r3
 8027d86:	4826      	ldr	r0, [pc, #152]	; (8027e20 <HAL_UART_MspInit+0x220>)
 8027d88:	f7ea faac 	bl	80122e4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8027d8c:	4b25      	ldr	r3, [pc, #148]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027d8e:	4a26      	ldr	r2, [pc, #152]	; (8027e28 <HAL_UART_MspInit+0x228>)
 8027d90:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8027d92:	4b24      	ldr	r3, [pc, #144]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027d94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8027d98:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8027d9a:	4b22      	ldr	r3, [pc, #136]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027d9c:	2240      	movs	r2, #64	; 0x40
 8027d9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8027da0:	4b20      	ldr	r3, [pc, #128]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027da2:	2200      	movs	r2, #0
 8027da4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8027da6:	4b1f      	ldr	r3, [pc, #124]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8027dac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8027dae:	4b1d      	ldr	r3, [pc, #116]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027db0:	2200      	movs	r2, #0
 8027db2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8027db4:	4b1b      	ldr	r3, [pc, #108]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027db6:	2200      	movs	r2, #0
 8027db8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8027dba:	4b1a      	ldr	r3, [pc, #104]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027dbc:	2200      	movs	r2, #0
 8027dbe:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8027dc0:	4b18      	ldr	r3, [pc, #96]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027dc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8027dc6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8027dc8:	4b16      	ldr	r3, [pc, #88]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027dca:	2200      	movs	r2, #0
 8027dcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8027dce:	4815      	ldr	r0, [pc, #84]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027dd0:	f7e8 fc1e 	bl	8010610 <HAL_DMA_Init>
 8027dd4:	4603      	mov	r3, r0
 8027dd6:	2b00      	cmp	r3, #0
 8027dd8:	d001      	beq.n	8027dde <HAL_UART_MspInit+0x1de>
      Error_Handler();
 8027dda:	f7fd fe27 	bl	8025a2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8027dde:	687b      	ldr	r3, [r7, #4]
 8027de0:	4a10      	ldr	r2, [pc, #64]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027de2:	631a      	str	r2, [r3, #48]	; 0x30
 8027de4:	4a0f      	ldr	r2, [pc, #60]	; (8027e24 <HAL_UART_MspInit+0x224>)
 8027de6:	687b      	ldr	r3, [r7, #4]
 8027de8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8027dea:	2200      	movs	r2, #0
 8027dec:	2105      	movs	r1, #5
 8027dee:	2025      	movs	r0, #37	; 0x25
 8027df0:	f7e8 fbe4 	bl	80105bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8027df4:	2025      	movs	r0, #37	; 0x25
 8027df6:	f7e8 fbfd 	bl	80105f4 <HAL_NVIC_EnableIRQ>
}
 8027dfa:	bf00      	nop
 8027dfc:	3730      	adds	r7, #48	; 0x30
 8027dfe:	46bd      	mov	sp, r7
 8027e00:	bd80      	pop	{r7, pc}
 8027e02:	bf00      	nop
 8027e04:	40005000 	.word	0x40005000
 8027e08:	40023800 	.word	0x40023800
 8027e0c:	40020800 	.word	0x40020800
 8027e10:	40020c00 	.word	0x40020c00
 8027e14:	2001212c 	.word	0x2001212c
 8027e18:	400260b8 	.word	0x400260b8
 8027e1c:	40011000 	.word	0x40011000
 8027e20:	40020000 	.word	0x40020000
 8027e24:	2001204c 	.word	0x2001204c
 8027e28:	400264b8 	.word	0x400264b8

08027e2c <Web_thread>:

static portCHAR PAGE_BODY[768];
extern struct netif gnetif;
extern UART_HandleTypeDef huart5;

void Web_thread(void *arg) {
 8027e2c:	b590      	push	{r4, r7, lr}
 8027e2e:	b093      	sub	sp, #76	; 0x4c
 8027e30:	af02      	add	r7, sp, #8
 8027e32:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	struct netbuf *inbuf;
	struct netconn *newconn;
	struct netconn *arg_conn;
	arg_conn = (struct netconn *) arg;
 8027e34:	687b      	ldr	r3, [r7, #4]
 8027e36:	63fb      	str	r3, [r7, #60]	; 0x3c
	u16_t buflen;
	char* buf;
	struct fs_file file;
	FlashToJSON(&hjsondata, &hflash);
 8027e38:	49ad      	ldr	r1, [pc, #692]	; (80280f0 <Web_thread+0x2c4>)
 8027e3a:	48ae      	ldr	r0, [pc, #696]	; (80280f4 <Web_thread+0x2c8>)
 8027e3c:	f7fd f81a 	bl	8024e74 <FlashToJSON>

	osDelay(1);
 8027e40:	2001      	movs	r0, #1
 8027e42:	f7ec fafc 	bl	801443e <osDelay>
	for (;;) {
		err = netconn_accept(arg_conn, &newconn);
 8027e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8027e4a:	4619      	mov	r1, r3
 8027e4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8027e4e:	f7ef f9dd 	bl	801720c <netconn_accept>
 8027e52:	4603      	mov	r3, r0
 8027e54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if (err == ERR_OK) {
 8027e58:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8027e5c:	2b00      	cmp	r3, #0
 8027e5e:	d1f2      	bne.n	8027e46 <Web_thread+0x1a>
			recv_err = netconn_recv(newconn, &inbuf);
 8027e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027e62:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8027e66:	4611      	mov	r1, r2
 8027e68:	4618      	mov	r0, r3
 8027e6a:	f7ef faff 	bl	801746c <netconn_recv>
 8027e6e:	4603      	mov	r3, r0
 8027e70:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			if (recv_err == ERR_OK) {
 8027e74:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8027e78:	2b00      	cmp	r3, #0
 8027e7a:	f040 812b 	bne.w	80280d4 <Web_thread+0x2a8>
				if (netconn_err(newconn) == ERR_OK) {
 8027e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027e80:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8027e84:	2b00      	cmp	r3, #0
 8027e86:	f040 8125 	bne.w	80280d4 <Web_thread+0x2a8>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 8027e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e8c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8027e90:	f107 0120 	add.w	r1, r7, #32
 8027e94:	4618      	mov	r0, r3
 8027e96:	f7f0 ff8f 	bl	8018db8 <netbuf_data>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
 8027e9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8027e9c:	2b04      	cmp	r3, #4
 8027e9e:	f240 8119 	bls.w	80280d4 <Web_thread+0x2a8>
 8027ea2:	6a3b      	ldr	r3, [r7, #32]
 8027ea4:	2205      	movs	r2, #5
 8027ea6:	4994      	ldr	r1, [pc, #592]	; (80280f8 <Web_thread+0x2cc>)
 8027ea8:	4618      	mov	r0, r3
 8027eaa:	f000 fafb 	bl	80284a4 <strncmp>
 8027eae:	4603      	mov	r3, r0
 8027eb0:	2b00      	cmp	r3, #0
 8027eb2:	f040 810f 	bne.w	80280d4 <Web_thread+0x2a8>
						buf += 5;
 8027eb6:	6a3b      	ldr	r3, [r7, #32]
 8027eb8:	3305      	adds	r3, #5
 8027eba:	623b      	str	r3, [r7, #32]
						if ((strncmp((char const *) buf, " ", 1) == 0)
 8027ebc:	6a3b      	ldr	r3, [r7, #32]
 8027ebe:	781a      	ldrb	r2, [r3, #0]
 8027ec0:	4b8e      	ldr	r3, [pc, #568]	; (80280fc <Web_thread+0x2d0>)
 8027ec2:	781b      	ldrb	r3, [r3, #0]
 8027ec4:	429a      	cmp	r2, r3
 8027ec6:	d008      	beq.n	8027eda <Web_thread+0xae>
								|| (strncmp((char const *) buf, "index.shtml",
 8027ec8:	6a3b      	ldr	r3, [r7, #32]
 8027eca:	220b      	movs	r2, #11
 8027ecc:	498c      	ldr	r1, [pc, #560]	; (8028100 <Web_thread+0x2d4>)
 8027ece:	4618      	mov	r0, r3
 8027ed0:	f000 fae8 	bl	80284a4 <strncmp>
 8027ed4:	4603      	mov	r3, r0
 8027ed6:	2b00      	cmp	r3, #0
 8027ed8:	d114      	bne.n	8027f04 <Web_thread+0xd8>
										11) == 0)) {
							fs_open(&file, "/index.shtml");
 8027eda:	f107 030c 	add.w	r3, r7, #12
 8027ede:	4989      	ldr	r1, [pc, #548]	; (8028104 <Web_thread+0x2d8>)
 8027ee0:	4618      	mov	r0, r3
 8027ee2:	f7f1 f959 	bl	8019198 <fs_open>
							netconn_write(newconn,
 8027ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027ee8:	68f9      	ldr	r1, [r7, #12]
 8027eea:	693b      	ldr	r3, [r7, #16]
 8027eec:	461a      	mov	r2, r3
 8027eee:	2300      	movs	r3, #0
 8027ef0:	9300      	str	r3, [sp, #0]
 8027ef2:	2300      	movs	r3, #0
 8027ef4:	f7ef fb26 	bl	8017544 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8027ef8:	f107 030c 	add.w	r3, r7, #12
 8027efc:	4618      	mov	r0, r3
 8027efe:	f7f1 f989 	bl	8019214 <fs_close>
 8027f02:	e0e7      	b.n	80280d4 <Web_thread+0x2a8>
						} else if (strncmp((char const *) buf, "img/logo.png",
 8027f04:	6a3b      	ldr	r3, [r7, #32]
 8027f06:	220c      	movs	r2, #12
 8027f08:	497f      	ldr	r1, [pc, #508]	; (8028108 <Web_thread+0x2dc>)
 8027f0a:	4618      	mov	r0, r3
 8027f0c:	f000 faca 	bl	80284a4 <strncmp>
 8027f10:	4603      	mov	r3, r0
 8027f12:	2b00      	cmp	r3, #0
 8027f14:	d114      	bne.n	8027f40 <Web_thread+0x114>
								12) == 0) {
							fs_open(&file, "/img/logo.png");
 8027f16:	f107 030c 	add.w	r3, r7, #12
 8027f1a:	497c      	ldr	r1, [pc, #496]	; (802810c <Web_thread+0x2e0>)
 8027f1c:	4618      	mov	r0, r3
 8027f1e:	f7f1 f93b 	bl	8019198 <fs_open>
							netconn_write(newconn,
 8027f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027f24:	68f9      	ldr	r1, [r7, #12]
 8027f26:	693b      	ldr	r3, [r7, #16]
 8027f28:	461a      	mov	r2, r3
 8027f2a:	2300      	movs	r3, #0
 8027f2c:	9300      	str	r3, [sp, #0]
 8027f2e:	2300      	movs	r3, #0
 8027f30:	f7ef fb08 	bl	8017544 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8027f34:	f107 030c 	add.w	r3, r7, #12
 8027f38:	4618      	mov	r0, r3
 8027f3a:	f7f1 f96b 	bl	8019214 <fs_close>
 8027f3e:	e0c9      	b.n	80280d4 <Web_thread+0x2a8>
						} else if (strncmp((char const *) buf, "img/icon.png",
 8027f40:	6a3b      	ldr	r3, [r7, #32]
 8027f42:	220c      	movs	r2, #12
 8027f44:	4972      	ldr	r1, [pc, #456]	; (8028110 <Web_thread+0x2e4>)
 8027f46:	4618      	mov	r0, r3
 8027f48:	f000 faac 	bl	80284a4 <strncmp>
 8027f4c:	4603      	mov	r3, r0
 8027f4e:	2b00      	cmp	r3, #0
 8027f50:	d114      	bne.n	8027f7c <Web_thread+0x150>
								12) == 0) {
							fs_open(&file, "/img/icon.png");
 8027f52:	f107 030c 	add.w	r3, r7, #12
 8027f56:	496f      	ldr	r1, [pc, #444]	; (8028114 <Web_thread+0x2e8>)
 8027f58:	4618      	mov	r0, r3
 8027f5a:	f7f1 f91d 	bl	8019198 <fs_open>
							netconn_write(newconn,
 8027f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027f60:	68f9      	ldr	r1, [r7, #12]
 8027f62:	693b      	ldr	r3, [r7, #16]
 8027f64:	461a      	mov	r2, r3
 8027f66:	2300      	movs	r3, #0
 8027f68:	9300      	str	r3, [sp, #0]
 8027f6a:	2300      	movs	r3, #0
 8027f6c:	f7ef faea 	bl	8017544 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8027f70:	f107 030c 	add.w	r3, r7, #12
 8027f74:	4618      	mov	r0, r3
 8027f76:	f7f1 f94d 	bl	8019214 <fs_close>
 8027f7a:	e0ab      	b.n	80280d4 <Web_thread+0x2a8>
						} else if (strncmp((char const *) buf, "style.css", 9)
 8027f7c:	6a3b      	ldr	r3, [r7, #32]
 8027f7e:	2209      	movs	r2, #9
 8027f80:	4965      	ldr	r1, [pc, #404]	; (8028118 <Web_thread+0x2ec>)
 8027f82:	4618      	mov	r0, r3
 8027f84:	f000 fa8e 	bl	80284a4 <strncmp>
 8027f88:	4603      	mov	r3, r0
 8027f8a:	2b00      	cmp	r3, #0
 8027f8c:	d114      	bne.n	8027fb8 <Web_thread+0x18c>
								== 0) {
							fs_open(&file, "/style.css");
 8027f8e:	f107 030c 	add.w	r3, r7, #12
 8027f92:	4962      	ldr	r1, [pc, #392]	; (802811c <Web_thread+0x2f0>)
 8027f94:	4618      	mov	r0, r3
 8027f96:	f7f1 f8ff 	bl	8019198 <fs_open>
							netconn_write(newconn,
 8027f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027f9c:	68f9      	ldr	r1, [r7, #12]
 8027f9e:	693b      	ldr	r3, [r7, #16]
 8027fa0:	461a      	mov	r2, r3
 8027fa2:	2300      	movs	r3, #0
 8027fa4:	9300      	str	r3, [sp, #0]
 8027fa6:	2300      	movs	r3, #0
 8027fa8:	f7ef facc 	bl	8017544 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8027fac:	f107 030c 	add.w	r3, r7, #12
 8027fb0:	4618      	mov	r0, r3
 8027fb2:	f7f1 f92f 	bl	8019214 <fs_close>
 8027fb6:	e08d      	b.n	80280d4 <Web_thread+0x2a8>
						} else if (strncmp((char const *) buf, "AI.data?=", 9)
 8027fb8:	6a3b      	ldr	r3, [r7, #32]
 8027fba:	2209      	movs	r2, #9
 8027fbc:	4958      	ldr	r1, [pc, #352]	; (8028120 <Web_thread+0x2f4>)
 8027fbe:	4618      	mov	r0, r3
 8027fc0:	f000 fa70 	bl	80284a4 <strncmp>
 8027fc4:	4603      	mov	r3, r0
 8027fc6:	2b00      	cmp	r3, #0
 8027fc8:	d11f      	bne.n	802800a <Web_thread+0x1de>
								== 0) {
							uint8_t *json;
							json = (uint8_t*) pvPortMalloc(250);
 8027fca:	20fa      	movs	r0, #250	; 0xfa
 8027fcc:	f7ec ff88 	bl	8014ee0 <pvPortMalloc>
 8027fd0:	6378      	str	r0, [r7, #52]	; 0x34
							if (json != NULL) {
 8027fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027fd4:	2b00      	cmp	r3, #0
 8027fd6:	d07d      	beq.n	80280d4 <Web_thread+0x2a8>
								GetJSONData(json);
 8027fd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8027fda:	f7fc fe11 	bl	8024c00 <GetJSONData>
								sprintf(PAGE_BODY, "%s%s", PAGE_HEADER, json);
 8027fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027fe0:	4a50      	ldr	r2, [pc, #320]	; (8028124 <Web_thread+0x2f8>)
 8027fe2:	4951      	ldr	r1, [pc, #324]	; (8028128 <Web_thread+0x2fc>)
 8027fe4:	4851      	ldr	r0, [pc, #324]	; (802812c <Web_thread+0x300>)
 8027fe6:	f7ff fa0d 	bl	8027404 <siprintf>
								netconn_write(newconn, PAGE_BODY,
 8027fea:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8027fec:	484f      	ldr	r0, [pc, #316]	; (802812c <Web_thread+0x300>)
 8027fee:	f7e8 f83f 	bl	8010070 <strlen>
 8027ff2:	4602      	mov	r2, r0
 8027ff4:	2300      	movs	r3, #0
 8027ff6:	9300      	str	r3, [sp, #0]
 8027ff8:	2301      	movs	r3, #1
 8027ffa:	494c      	ldr	r1, [pc, #304]	; (802812c <Web_thread+0x300>)
 8027ffc:	4620      	mov	r0, r4
 8027ffe:	f7ef faa1 	bl	8017544 <netconn_write_partly>
										strlen((char* )PAGE_BODY),
										NETCONN_COPY);
								vPortFree(json);
 8028002:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8028004:	f7ed f82e 	bl	8015064 <vPortFree>
 8028008:	e064      	b.n	80280d4 <Web_thread+0x2a8>
							}
						} else if (strncmp((char const *) buf, "json=", 5)
 802800a:	6a3b      	ldr	r3, [r7, #32]
 802800c:	2205      	movs	r2, #5
 802800e:	4948      	ldr	r1, [pc, #288]	; (8028130 <Web_thread+0x304>)
 8028010:	4618      	mov	r0, r3
 8028012:	f000 fa47 	bl	80284a4 <strncmp>
 8028016:	4603      	mov	r3, r0
 8028018:	2b00      	cmp	r3, #0
 802801a:	d126      	bne.n	802806a <Web_thread+0x23e>
								== 0) {
							uint8_t *json_str;
							json_str = (uint8_t*) pvPortMalloc(250);
 802801c:	20fa      	movs	r0, #250	; 0xfa
 802801e:	f7ec ff5f 	bl	8014ee0 <pvPortMalloc>
 8028022:	6338      	str	r0, [r7, #48]	; 0x30
							if (json_str != NULL) {
 8028024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028026:	2b00      	cmp	r3, #0
 8028028:	d054      	beq.n	80280d4 <Web_thread+0x2a8>
								DecodeURL((uint8_t*) buf + 5, json_str);
 802802a:	6a3b      	ldr	r3, [r7, #32]
 802802c:	3305      	adds	r3, #5
 802802e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8028030:	4618      	mov	r0, r3
 8028032:	f7fd f848 	bl	80250c6 <DecodeURL>
								ParseJSON(&hjsondata, json_str);
 8028036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8028038:	482e      	ldr	r0, [pc, #184]	; (80280f4 <Web_thread+0x2c8>)
 802803a:	f7fd f895 	bl	8025168 <ParseJSON>
								JSONToFlash(&hjsondata, &hflash);
 802803e:	492c      	ldr	r1, [pc, #176]	; (80280f0 <Web_thread+0x2c4>)
 8028040:	482c      	ldr	r0, [pc, #176]	; (80280f4 <Web_thread+0x2c8>)
 8028042:	f7fd f9b5 	bl	80253b0 <JSONToFlash>
								SaveFash();
 8028046:	f7fa ffa5 	bl	8022f94 <SaveFash>
								netconn_write(newconn, PAGE_HEADER,
 802804a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 802804c:	4835      	ldr	r0, [pc, #212]	; (8028124 <Web_thread+0x2f8>)
 802804e:	f7e8 f80f 	bl	8010070 <strlen>
 8028052:	4602      	mov	r2, r0
 8028054:	2300      	movs	r3, #0
 8028056:	9300      	str	r3, [sp, #0]
 8028058:	2301      	movs	r3, #1
 802805a:	4932      	ldr	r1, [pc, #200]	; (8028124 <Web_thread+0x2f8>)
 802805c:	4620      	mov	r0, r4
 802805e:	f7ef fa71 	bl	8017544 <netconn_write_partly>
										strlen((char* )PAGE_HEADER),
										NETCONN_COPY);
								vPortFree(json_str);
 8028062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8028064:	f7ec fffe 	bl	8015064 <vPortFree>
 8028068:	e034      	b.n	80280d4 <Web_thread+0x2a8>
							}
						} else if (strncmp((char const *) buf, "cmd.reboot=1",
 802806a:	6a3b      	ldr	r3, [r7, #32]
 802806c:	220c      	movs	r2, #12
 802806e:	4931      	ldr	r1, [pc, #196]	; (8028134 <Web_thread+0x308>)
 8028070:	4618      	mov	r0, r3
 8028072:	f000 fa17 	bl	80284a4 <strncmp>
 8028076:	4603      	mov	r3, r0
 8028078:	2b00      	cmp	r3, #0
 802807a:	d114      	bne.n	80280a6 <Web_thread+0x27a>
								12) == 0) {
							netconn_write(newconn, PAGE_HEADER,
 802807c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 802807e:	4829      	ldr	r0, [pc, #164]	; (8028124 <Web_thread+0x2f8>)
 8028080:	f7e7 fff6 	bl	8010070 <strlen>
 8028084:	4602      	mov	r2, r0
 8028086:	2300      	movs	r3, #0
 8028088:	9300      	str	r3, [sp, #0]
 802808a:	2301      	movs	r3, #1
 802808c:	4925      	ldr	r1, [pc, #148]	; (8028124 <Web_thread+0x2f8>)
 802808e:	4620      	mov	r0, r4
 8028090:	f7ef fa58 	bl	8017544 <netconn_write_partly>
									strlen((char* )PAGE_HEADER), NETCONN_COPY);
							LogText(SUB_SYS_WEB, LOG_LEV_INFO, "Reboot");
 8028094:	4a28      	ldr	r2, [pc, #160]	; (8028138 <Web_thread+0x30c>)
 8028096:	2103      	movs	r1, #3
 8028098:	2001      	movs	r0, #1
 802809a:	f7fd fa37 	bl	802550c <LogText__>
							reboot_flag = 1;
 802809e:	4b27      	ldr	r3, [pc, #156]	; (802813c <Web_thread+0x310>)
 80280a0:	2201      	movs	r2, #1
 80280a2:	601a      	str	r2, [r3, #0]
 80280a4:	e016      	b.n	80280d4 <Web_thread+0x2a8>
						} else {
							fs_open(&file, "/404.html");
 80280a6:	f107 030c 	add.w	r3, r7, #12
 80280aa:	4925      	ldr	r1, [pc, #148]	; (8028140 <Web_thread+0x314>)
 80280ac:	4618      	mov	r0, r3
 80280ae:	f7f1 f873 	bl	8019198 <fs_open>
							netconn_write(newconn,
 80280b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80280b4:	68f9      	ldr	r1, [r7, #12]
 80280b6:	693b      	ldr	r3, [r7, #16]
 80280b8:	461a      	mov	r2, r3
 80280ba:	2300      	movs	r3, #0
 80280bc:	9300      	str	r3, [sp, #0]
 80280be:	2300      	movs	r3, #0
 80280c0:	f7ef fa40 	bl	8017544 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 80280c4:	f107 030c 	add.w	r3, r7, #12
 80280c8:	4618      	mov	r0, r3
 80280ca:	f7f1 f8a3 	bl	8019214 <fs_close>
							osDelay(1);
 80280ce:	2001      	movs	r0, #1
 80280d0:	f7ec f9b5 	bl	801443e <osDelay>
						}
					}
				}
			}
			netconn_close(newconn);
 80280d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280d6:	4618      	mov	r0, r3
 80280d8:	f7ef fadc 	bl	8017694 <netconn_close>
			netbuf_delete(inbuf);
 80280dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80280de:	4618      	mov	r0, r3
 80280e0:	f7f0 fe4a 	bl	8018d78 <netbuf_delete>
			netconn_delete(newconn);
 80280e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280e6:	4618      	mov	r0, r3
 80280e8:	f7ef f806 	bl	80170f8 <netconn_delete>
		err = netconn_accept(arg_conn, &newconn);
 80280ec:	e6ab      	b.n	8027e46 <Web_thread+0x1a>
 80280ee:	bf00      	nop
 80280f0:	2000ecfc 	.word	0x2000ecfc
 80280f4:	20011e2c 	.word	0x20011e2c
 80280f8:	0802b7b0 	.word	0x0802b7b0
 80280fc:	0802b7b8 	.word	0x0802b7b8
 8028100:	0802b7bc 	.word	0x0802b7bc
 8028104:	0802b7c8 	.word	0x0802b7c8
 8028108:	0802b7d8 	.word	0x0802b7d8
 802810c:	0802b7e8 	.word	0x0802b7e8
 8028110:	0802b7f8 	.word	0x0802b7f8
 8028114:	0802b808 	.word	0x0802b808
 8028118:	0802b818 	.word	0x0802b818
 802811c:	0802b824 	.word	0x0802b824
 8028120:	0802b830 	.word	0x0802b830
 8028124:	0802e728 	.word	0x0802e728
 8028128:	0802b83c 	.word	0x0802b83c
 802812c:	20009ec4 	.word	0x20009ec4
 8028130:	0802b844 	.word	0x0802b844
 8028134:	0802b84c 	.word	0x0802b84c
 8028138:	0802b85c 	.word	0x0802b85c
 802813c:	20009ec0 	.word	0x20009ec0
 8028140:	0802b864 	.word	0x0802b864

08028144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8028144:	f8df d034 	ldr.w	sp, [pc, #52]	; 802817c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8028148:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 802814a:	e003      	b.n	8028154 <LoopCopyDataInit>

0802814c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 802814c:	4b0c      	ldr	r3, [pc, #48]	; (8028180 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 802814e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8028150:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8028152:	3104      	adds	r1, #4

08028154 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8028154:	480b      	ldr	r0, [pc, #44]	; (8028184 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8028156:	4b0c      	ldr	r3, [pc, #48]	; (8028188 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8028158:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 802815a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 802815c:	d3f6      	bcc.n	802814c <CopyDataInit>
  ldr  r2, =_sbss
 802815e:	4a0b      	ldr	r2, [pc, #44]	; (802818c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8028160:	e002      	b.n	8028168 <LoopFillZerobss>

08028162 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8028162:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8028164:	f842 3b04 	str.w	r3, [r2], #4

08028168 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8028168:	4b09      	ldr	r3, [pc, #36]	; (8028190 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 802816a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 802816c:	d3f9      	bcc.n	8028162 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 802816e:	f7fe fdc9 	bl	8026d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8028172:	f000 f92f 	bl	80283d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8028176:	f7fd fb8f 	bl	8025898 <main>
  bx  lr    
 802817a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 802817c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8028180:	0802e93c 	.word	0x0802e93c
  ldr  r0, =_sdata
 8028184:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8028188:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 802818c:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 8028190:	2001218c 	.word	0x2001218c

08028194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8028194:	e7fe      	b.n	8028194 <ADC_IRQHandler>

08028196 <TestCalculateFCS>:

/* Includes */
#include "test_protocol.h"
/* -------- */

void TestCalculateFCS() {
 8028196:	b580      	push	{r7, lr}
 8028198:	b084      	sub	sp, #16
 802819a:	af02      	add	r7, sp, #8
	uint8_t buf[3];
	memset(buf, 0x00, sizeof(buf));
 802819c:	1d3b      	adds	r3, r7, #4
 802819e:	2203      	movs	r2, #3
 80281a0:	2100      	movs	r1, #0
 80281a2:	4618      	mov	r0, r3
 80281a4:	f000 f96e 	bl	8028484 <memset>
	buf[0] = 0x01;
 80281a8:	2301      	movs	r3, #1
 80281aa:	713b      	strb	r3, [r7, #4]
	buf[1] = 0x01;
 80281ac:	2301      	movs	r3, #1
 80281ae:	717b      	strb	r3, [r7, #5]
	buf[2] = 0x01;
 80281b0:	2301      	movs	r3, #1
 80281b2:	71bb      	strb	r3, [r7, #6]
	TEST_ASSERT_EQUAL_HEX8(0x03, CalculateFCS(buf, 3));
 80281b4:	1d3b      	adds	r3, r7, #4
 80281b6:	2103      	movs	r1, #3
 80281b8:	4618      	mov	r0, r3
 80281ba:	f7fe f883 	bl	80262c4 <CalculateFCS>
 80281be:	4603      	mov	r3, r0
 80281c0:	b25b      	sxtb	r3, r3
 80281c2:	4619      	mov	r1, r3
 80281c4:	2341      	movs	r3, #65	; 0x41
 80281c6:	9300      	str	r3, [sp, #0]
 80281c8:	2312      	movs	r3, #18
 80281ca:	2200      	movs	r2, #0
 80281cc:	2003      	movs	r0, #3
 80281ce:	f7ff fbc7 	bl	8027960 <UnityAssertEqualNumber>

	memset(buf, 0x00, sizeof(buf));
 80281d2:	1d3b      	adds	r3, r7, #4
 80281d4:	2203      	movs	r2, #3
 80281d6:	2100      	movs	r1, #0
 80281d8:	4618      	mov	r0, r3
 80281da:	f000 f953 	bl	8028484 <memset>
	buf[0] = 0xAA;
 80281de:	23aa      	movs	r3, #170	; 0xaa
 80281e0:	713b      	strb	r3, [r7, #4]
	buf[1] = 0x0F;
 80281e2:	230f      	movs	r3, #15
 80281e4:	717b      	strb	r3, [r7, #5]
	buf[2] = 0xCD;
 80281e6:	23cd      	movs	r3, #205	; 0xcd
 80281e8:	71bb      	strb	r3, [r7, #6]
	TEST_ASSERT_EQUAL_HEX8(0x86, CalculateFCS(buf, 3));
 80281ea:	1d3b      	adds	r3, r7, #4
 80281ec:	2103      	movs	r1, #3
 80281ee:	4618      	mov	r0, r3
 80281f0:	f7fe f868 	bl	80262c4 <CalculateFCS>
 80281f4:	4603      	mov	r3, r0
 80281f6:	b25b      	sxtb	r3, r3
 80281f8:	4619      	mov	r1, r3
 80281fa:	2341      	movs	r3, #65	; 0x41
 80281fc:	9300      	str	r3, [sp, #0]
 80281fe:	2318      	movs	r3, #24
 8028200:	2200      	movs	r2, #0
 8028202:	f06f 0079 	mvn.w	r0, #121	; 0x79
 8028206:	f7ff fbab 	bl	8027960 <UnityAssertEqualNumber>
}
 802820a:	bf00      	nop
 802820c:	3708      	adds	r7, #8
 802820e:	46bd      	mov	sp, r7
 8028210:	bd80      	pop	{r7, pc}

08028212 <TestGetNextMaster>:

void TestGetNextMaster() {
 8028212:	b580      	push	{r7, lr}
 8028214:	b088      	sub	sp, #32
 8028216:	af02      	add	r7, sp, #8
	profibus_MPI_t test_prot;
	test_prot.own_address = 0x03U;
 8028218:	2303      	movs	r3, #3
 802821a:	703b      	strb	r3, [r7, #0]
	test_prot.bus_masters = 0x00;
 802821c:	2300      	movs	r3, #0
 802821e:	617b      	str	r3, [r7, #20]
	SET_BIT(test_prot.bus_masters, (0x01U << 0x05U));
 8028220:	697b      	ldr	r3, [r7, #20]
 8028222:	f043 0320 	orr.w	r3, r3, #32
 8028226:	617b      	str	r3, [r7, #20]
	SET_BIT(test_prot.bus_masters, (0x01U << 0x09U));
 8028228:	697b      	ldr	r3, [r7, #20]
 802822a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802822e:	617b      	str	r3, [r7, #20]
	SET_BIT(test_prot.bus_masters, (0x01U << 0x0FU));
 8028230:	697b      	ldr	r3, [r7, #20]
 8028232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8028236:	617b      	str	r3, [r7, #20]
	TEST_ASSERT_EQUAL_HEX8(0x05, GetNextMaster(&test_prot));
 8028238:	463b      	mov	r3, r7
 802823a:	4618      	mov	r0, r3
 802823c:	f7fe fb65 	bl	802690a <GetNextMaster>
 8028240:	4603      	mov	r3, r0
 8028242:	b25b      	sxtb	r3, r3
 8028244:	4619      	mov	r1, r3
 8028246:	2341      	movs	r3, #65	; 0x41
 8028248:	9300      	str	r3, [sp, #0]
 802824a:	2322      	movs	r3, #34	; 0x22
 802824c:	2200      	movs	r2, #0
 802824e:	2005      	movs	r0, #5
 8028250:	f7ff fb86 	bl	8027960 <UnityAssertEqualNumber>

	test_prot.own_address = 0x06U;
 8028254:	2306      	movs	r3, #6
 8028256:	703b      	strb	r3, [r7, #0]
	TEST_ASSERT_EQUAL_HEX8(0x09, GetNextMaster(&test_prot));
 8028258:	463b      	mov	r3, r7
 802825a:	4618      	mov	r0, r3
 802825c:	f7fe fb55 	bl	802690a <GetNextMaster>
 8028260:	4603      	mov	r3, r0
 8028262:	b25b      	sxtb	r3, r3
 8028264:	4619      	mov	r1, r3
 8028266:	2341      	movs	r3, #65	; 0x41
 8028268:	9300      	str	r3, [sp, #0]
 802826a:	2325      	movs	r3, #37	; 0x25
 802826c:	2200      	movs	r2, #0
 802826e:	2009      	movs	r0, #9
 8028270:	f7ff fb76 	bl	8027960 <UnityAssertEqualNumber>

	test_prot.own_address = 0x0DU;
 8028274:	230d      	movs	r3, #13
 8028276:	703b      	strb	r3, [r7, #0]
	TEST_ASSERT_EQUAL_HEX8(0x0F, GetNextMaster(&test_prot));
 8028278:	463b      	mov	r3, r7
 802827a:	4618      	mov	r0, r3
 802827c:	f7fe fb45 	bl	802690a <GetNextMaster>
 8028280:	4603      	mov	r3, r0
 8028282:	b25b      	sxtb	r3, r3
 8028284:	4619      	mov	r1, r3
 8028286:	2341      	movs	r3, #65	; 0x41
 8028288:	9300      	str	r3, [sp, #0]
 802828a:	2328      	movs	r3, #40	; 0x28
 802828c:	2200      	movs	r2, #0
 802828e:	200f      	movs	r0, #15
 8028290:	f7ff fb66 	bl	8027960 <UnityAssertEqualNumber>

	test_prot.own_address = 0x12U;
 8028294:	2312      	movs	r3, #18
 8028296:	703b      	strb	r3, [r7, #0]
	TEST_ASSERT_EQUAL_HEX8(0x05, GetNextMaster(&test_prot));
 8028298:	463b      	mov	r3, r7
 802829a:	4618      	mov	r0, r3
 802829c:	f7fe fb35 	bl	802690a <GetNextMaster>
 80282a0:	4603      	mov	r3, r0
 80282a2:	b25b      	sxtb	r3, r3
 80282a4:	4619      	mov	r1, r3
 80282a6:	2341      	movs	r3, #65	; 0x41
 80282a8:	9300      	str	r3, [sp, #0]
 80282aa:	232b      	movs	r3, #43	; 0x2b
 80282ac:	2200      	movs	r2, #0
 80282ae:	2005      	movs	r0, #5
 80282b0:	f7ff fb56 	bl	8027960 <UnityAssertEqualNumber>
}
 80282b4:	bf00      	nop
 80282b6:	3718      	adds	r7, #24
 80282b8:	46bd      	mov	sp, r7
 80282ba:	bd80      	pop	{r7, pc}

080282bc <TestCheckMaster>:

void TestCheckMaster() {
 80282bc:	b580      	push	{r7, lr}
 80282be:	b088      	sub	sp, #32
 80282c0:	af02      	add	r7, sp, #8
	profibus_MPI_t test_prot;
	test_prot.own_address = 0x03U;
 80282c2:	2303      	movs	r3, #3
 80282c4:	703b      	strb	r3, [r7, #0]
	test_prot.bus_masters = 0x00;
 80282c6:	2300      	movs	r3, #0
 80282c8:	617b      	str	r3, [r7, #20]
	SET_BIT(test_prot.bus_masters, (0x01U << 0x05U));
 80282ca:	697b      	ldr	r3, [r7, #20]
 80282cc:	f043 0320 	orr.w	r3, r3, #32
 80282d0:	617b      	str	r3, [r7, #20]
	SET_BIT(test_prot.bus_masters, (0x01U << 0x09U));
 80282d2:	697b      	ldr	r3, [r7, #20]
 80282d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80282d8:	617b      	str	r3, [r7, #20]
	SET_BIT(test_prot.bus_masters, (0x01U << 0x0FU));
 80282da:	697b      	ldr	r3, [r7, #20]
 80282dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80282e0:	617b      	str	r3, [r7, #20]

	TEST_ASSERT_EQUAL_HEX8(0U, CheckMaster(&test_prot,0x00));
 80282e2:	463b      	mov	r3, r7
 80282e4:	2100      	movs	r1, #0
 80282e6:	4618      	mov	r0, r3
 80282e8:	f7fe fb39 	bl	802695e <CheckMaster>
 80282ec:	4603      	mov	r3, r0
 80282ee:	b25b      	sxtb	r3, r3
 80282f0:	4619      	mov	r1, r3
 80282f2:	2341      	movs	r3, #65	; 0x41
 80282f4:	9300      	str	r3, [sp, #0]
 80282f6:	2336      	movs	r3, #54	; 0x36
 80282f8:	2200      	movs	r2, #0
 80282fa:	2000      	movs	r0, #0
 80282fc:	f7ff fb30 	bl	8027960 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_HEX8(0U, CheckMaster(&test_prot,0x04));
 8028300:	463b      	mov	r3, r7
 8028302:	2104      	movs	r1, #4
 8028304:	4618      	mov	r0, r3
 8028306:	f7fe fb2a 	bl	802695e <CheckMaster>
 802830a:	4603      	mov	r3, r0
 802830c:	b25b      	sxtb	r3, r3
 802830e:	4619      	mov	r1, r3
 8028310:	2341      	movs	r3, #65	; 0x41
 8028312:	9300      	str	r3, [sp, #0]
 8028314:	2337      	movs	r3, #55	; 0x37
 8028316:	2200      	movs	r2, #0
 8028318:	2000      	movs	r0, #0
 802831a:	f7ff fb21 	bl	8027960 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_HEX8(1U, CheckMaster(&test_prot,0x05));
 802831e:	463b      	mov	r3, r7
 8028320:	2105      	movs	r1, #5
 8028322:	4618      	mov	r0, r3
 8028324:	f7fe fb1b 	bl	802695e <CheckMaster>
 8028328:	4603      	mov	r3, r0
 802832a:	b25b      	sxtb	r3, r3
 802832c:	4619      	mov	r1, r3
 802832e:	2341      	movs	r3, #65	; 0x41
 8028330:	9300      	str	r3, [sp, #0]
 8028332:	2338      	movs	r3, #56	; 0x38
 8028334:	2200      	movs	r2, #0
 8028336:	2001      	movs	r0, #1
 8028338:	f7ff fb12 	bl	8027960 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_HEX8(1U, CheckMaster(&test_prot,0x09));
 802833c:	463b      	mov	r3, r7
 802833e:	2109      	movs	r1, #9
 8028340:	4618      	mov	r0, r3
 8028342:	f7fe fb0c 	bl	802695e <CheckMaster>
 8028346:	4603      	mov	r3, r0
 8028348:	b25b      	sxtb	r3, r3
 802834a:	4619      	mov	r1, r3
 802834c:	2341      	movs	r3, #65	; 0x41
 802834e:	9300      	str	r3, [sp, #0]
 8028350:	2339      	movs	r3, #57	; 0x39
 8028352:	2200      	movs	r2, #0
 8028354:	2001      	movs	r0, #1
 8028356:	f7ff fb03 	bl	8027960 <UnityAssertEqualNumber>
	TEST_ASSERT_EQUAL_HEX8(1U, CheckMaster(&test_prot,0x0F));
 802835a:	463b      	mov	r3, r7
 802835c:	210f      	movs	r1, #15
 802835e:	4618      	mov	r0, r3
 8028360:	f7fe fafd 	bl	802695e <CheckMaster>
 8028364:	4603      	mov	r3, r0
 8028366:	b25b      	sxtb	r3, r3
 8028368:	4619      	mov	r1, r3
 802836a:	2341      	movs	r3, #65	; 0x41
 802836c:	9300      	str	r3, [sp, #0]
 802836e:	233a      	movs	r3, #58	; 0x3a
 8028370:	2200      	movs	r2, #0
 8028372:	2001      	movs	r0, #1
 8028374:	f7ff faf4 	bl	8027960 <UnityAssertEqualNumber>

}
 8028378:	bf00      	nop
 802837a:	3718      	adds	r7, #24
 802837c:	46bd      	mov	sp, r7
 802837e:	bd80      	pop	{r7, pc}

08028380 <RunAllTests>:

/* Includes */
#include "test_runner.h"
/* -------- */

void RunAllTests(void) {
 8028380:	b580      	push	{r7, lr}
 8028382:	af00      	add	r7, sp, #0
	UNITY_BEGIN();
 8028384:	480a      	ldr	r0, [pc, #40]	; (80283b0 <RunAllTests+0x30>)
 8028386:	f7ff fb5b 	bl	8027a40 <UnityBegin>
	RUN_TEST(TestCalculateFCS);
 802838a:	220e      	movs	r2, #14
 802838c:	4909      	ldr	r1, [pc, #36]	; (80283b4 <RunAllTests+0x34>)
 802838e:	480a      	ldr	r0, [pc, #40]	; (80283b8 <RunAllTests+0x38>)
 8028390:	f7ff fb22 	bl	80279d8 <UnityDefaultTestRun>
	RUN_TEST(TestGetNextMaster);
 8028394:	220f      	movs	r2, #15
 8028396:	4909      	ldr	r1, [pc, #36]	; (80283bc <RunAllTests+0x3c>)
 8028398:	4809      	ldr	r0, [pc, #36]	; (80283c0 <RunAllTests+0x40>)
 802839a:	f7ff fb1d 	bl	80279d8 <UnityDefaultTestRun>
	RUN_TEST(TestCheckMaster);
 802839e:	2210      	movs	r2, #16
 80283a0:	4908      	ldr	r1, [pc, #32]	; (80283c4 <RunAllTests+0x44>)
 80283a2:	4809      	ldr	r0, [pc, #36]	; (80283c8 <RunAllTests+0x48>)
 80283a4:	f7ff fb18 	bl	80279d8 <UnityDefaultTestRun>
	UNITY_END();
 80283a8:	f7ff fb74 	bl	8027a94 <UnityEnd>
}
 80283ac:	bf00      	nop
 80283ae:	bd80      	pop	{r7, pc}
 80283b0:	0802b870 	.word	0x0802b870
 80283b4:	0802b888 	.word	0x0802b888
 80283b8:	08028197 	.word	0x08028197
 80283bc:	0802b89c 	.word	0x0802b89c
 80283c0:	08028213 	.word	0x08028213
 80283c4:	0802b8b0 	.word	0x0802b8b0
 80283c8:	080282bd 	.word	0x080282bd

080283cc <atoi>:
 80283cc:	220a      	movs	r2, #10
 80283ce:	2100      	movs	r1, #0
 80283d0:	f000 b8fa 	b.w	80285c8 <strtol>

080283d4 <__libc_init_array>:
 80283d4:	b570      	push	{r4, r5, r6, lr}
 80283d6:	4e0d      	ldr	r6, [pc, #52]	; (802840c <__libc_init_array+0x38>)
 80283d8:	4c0d      	ldr	r4, [pc, #52]	; (8028410 <__libc_init_array+0x3c>)
 80283da:	1ba4      	subs	r4, r4, r6
 80283dc:	10a4      	asrs	r4, r4, #2
 80283de:	2500      	movs	r5, #0
 80283e0:	42a5      	cmp	r5, r4
 80283e2:	d109      	bne.n	80283f8 <__libc_init_array+0x24>
 80283e4:	4e0b      	ldr	r6, [pc, #44]	; (8028414 <__libc_init_array+0x40>)
 80283e6:	4c0c      	ldr	r4, [pc, #48]	; (8028418 <__libc_init_array+0x44>)
 80283e8:	f000 fd70 	bl	8028ecc <_init>
 80283ec:	1ba4      	subs	r4, r4, r6
 80283ee:	10a4      	asrs	r4, r4, #2
 80283f0:	2500      	movs	r5, #0
 80283f2:	42a5      	cmp	r5, r4
 80283f4:	d105      	bne.n	8028402 <__libc_init_array+0x2e>
 80283f6:	bd70      	pop	{r4, r5, r6, pc}
 80283f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80283fc:	4798      	blx	r3
 80283fe:	3501      	adds	r5, #1
 8028400:	e7ee      	b.n	80283e0 <__libc_init_array+0xc>
 8028402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8028406:	4798      	blx	r3
 8028408:	3501      	adds	r5, #1
 802840a:	e7f2      	b.n	80283f2 <__libc_init_array+0x1e>
 802840c:	0802e934 	.word	0x0802e934
 8028410:	0802e934 	.word	0x0802e934
 8028414:	0802e934 	.word	0x0802e934
 8028418:	0802e938 	.word	0x0802e938

0802841c <__itoa>:
 802841c:	1e93      	subs	r3, r2, #2
 802841e:	2b22      	cmp	r3, #34	; 0x22
 8028420:	b510      	push	{r4, lr}
 8028422:	460c      	mov	r4, r1
 8028424:	d904      	bls.n	8028430 <__itoa+0x14>
 8028426:	2300      	movs	r3, #0
 8028428:	700b      	strb	r3, [r1, #0]
 802842a:	461c      	mov	r4, r3
 802842c:	4620      	mov	r0, r4
 802842e:	bd10      	pop	{r4, pc}
 8028430:	2a0a      	cmp	r2, #10
 8028432:	d109      	bne.n	8028448 <__itoa+0x2c>
 8028434:	2800      	cmp	r0, #0
 8028436:	da07      	bge.n	8028448 <__itoa+0x2c>
 8028438:	232d      	movs	r3, #45	; 0x2d
 802843a:	700b      	strb	r3, [r1, #0]
 802843c:	4240      	negs	r0, r0
 802843e:	2101      	movs	r1, #1
 8028440:	4421      	add	r1, r4
 8028442:	f000 f8d7 	bl	80285f4 <__utoa>
 8028446:	e7f1      	b.n	802842c <__itoa+0x10>
 8028448:	2100      	movs	r1, #0
 802844a:	e7f9      	b.n	8028440 <__itoa+0x24>

0802844c <itoa>:
 802844c:	f7ff bfe6 	b.w	802841c <__itoa>

08028450 <memcmp>:
 8028450:	b510      	push	{r4, lr}
 8028452:	3901      	subs	r1, #1
 8028454:	4402      	add	r2, r0
 8028456:	4290      	cmp	r0, r2
 8028458:	d101      	bne.n	802845e <memcmp+0xe>
 802845a:	2000      	movs	r0, #0
 802845c:	bd10      	pop	{r4, pc}
 802845e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8028462:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8028466:	42a3      	cmp	r3, r4
 8028468:	d0f5      	beq.n	8028456 <memcmp+0x6>
 802846a:	1b18      	subs	r0, r3, r4
 802846c:	bd10      	pop	{r4, pc}

0802846e <memcpy>:
 802846e:	b510      	push	{r4, lr}
 8028470:	1e43      	subs	r3, r0, #1
 8028472:	440a      	add	r2, r1
 8028474:	4291      	cmp	r1, r2
 8028476:	d100      	bne.n	802847a <memcpy+0xc>
 8028478:	bd10      	pop	{r4, pc}
 802847a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802847e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028482:	e7f7      	b.n	8028474 <memcpy+0x6>

08028484 <memset>:
 8028484:	4402      	add	r2, r0
 8028486:	4603      	mov	r3, r0
 8028488:	4293      	cmp	r3, r2
 802848a:	d100      	bne.n	802848e <memset+0xa>
 802848c:	4770      	bx	lr
 802848e:	f803 1b01 	strb.w	r1, [r3], #1
 8028492:	e7f9      	b.n	8028488 <memset+0x4>

08028494 <strcpy>:
 8028494:	4603      	mov	r3, r0
 8028496:	f811 2b01 	ldrb.w	r2, [r1], #1
 802849a:	f803 2b01 	strb.w	r2, [r3], #1
 802849e:	2a00      	cmp	r2, #0
 80284a0:	d1f9      	bne.n	8028496 <strcpy+0x2>
 80284a2:	4770      	bx	lr

080284a4 <strncmp>:
 80284a4:	b510      	push	{r4, lr}
 80284a6:	b16a      	cbz	r2, 80284c4 <strncmp+0x20>
 80284a8:	3901      	subs	r1, #1
 80284aa:	1884      	adds	r4, r0, r2
 80284ac:	f810 3b01 	ldrb.w	r3, [r0], #1
 80284b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80284b4:	4293      	cmp	r3, r2
 80284b6:	d103      	bne.n	80284c0 <strncmp+0x1c>
 80284b8:	42a0      	cmp	r0, r4
 80284ba:	d001      	beq.n	80284c0 <strncmp+0x1c>
 80284bc:	2b00      	cmp	r3, #0
 80284be:	d1f5      	bne.n	80284ac <strncmp+0x8>
 80284c0:	1a98      	subs	r0, r3, r2
 80284c2:	bd10      	pop	{r4, pc}
 80284c4:	4610      	mov	r0, r2
 80284c6:	bd10      	pop	{r4, pc}

080284c8 <_strtol_l.isra.0>:
 80284c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80284cc:	4680      	mov	r8, r0
 80284ce:	4689      	mov	r9, r1
 80284d0:	4692      	mov	sl, r2
 80284d2:	461f      	mov	r7, r3
 80284d4:	468b      	mov	fp, r1
 80284d6:	465d      	mov	r5, fp
 80284d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80284da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80284de:	f000 fb05 	bl	8028aec <__locale_ctype_ptr_l>
 80284e2:	4420      	add	r0, r4
 80284e4:	7846      	ldrb	r6, [r0, #1]
 80284e6:	f016 0608 	ands.w	r6, r6, #8
 80284ea:	d10b      	bne.n	8028504 <_strtol_l.isra.0+0x3c>
 80284ec:	2c2d      	cmp	r4, #45	; 0x2d
 80284ee:	d10b      	bne.n	8028508 <_strtol_l.isra.0+0x40>
 80284f0:	782c      	ldrb	r4, [r5, #0]
 80284f2:	2601      	movs	r6, #1
 80284f4:	f10b 0502 	add.w	r5, fp, #2
 80284f8:	b167      	cbz	r7, 8028514 <_strtol_l.isra.0+0x4c>
 80284fa:	2f10      	cmp	r7, #16
 80284fc:	d114      	bne.n	8028528 <_strtol_l.isra.0+0x60>
 80284fe:	2c30      	cmp	r4, #48	; 0x30
 8028500:	d00a      	beq.n	8028518 <_strtol_l.isra.0+0x50>
 8028502:	e011      	b.n	8028528 <_strtol_l.isra.0+0x60>
 8028504:	46ab      	mov	fp, r5
 8028506:	e7e6      	b.n	80284d6 <_strtol_l.isra.0+0xe>
 8028508:	2c2b      	cmp	r4, #43	; 0x2b
 802850a:	bf04      	itt	eq
 802850c:	782c      	ldrbeq	r4, [r5, #0]
 802850e:	f10b 0502 	addeq.w	r5, fp, #2
 8028512:	e7f1      	b.n	80284f8 <_strtol_l.isra.0+0x30>
 8028514:	2c30      	cmp	r4, #48	; 0x30
 8028516:	d127      	bne.n	8028568 <_strtol_l.isra.0+0xa0>
 8028518:	782b      	ldrb	r3, [r5, #0]
 802851a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802851e:	2b58      	cmp	r3, #88	; 0x58
 8028520:	d14b      	bne.n	80285ba <_strtol_l.isra.0+0xf2>
 8028522:	786c      	ldrb	r4, [r5, #1]
 8028524:	2710      	movs	r7, #16
 8028526:	3502      	adds	r5, #2
 8028528:	2e00      	cmp	r6, #0
 802852a:	bf0c      	ite	eq
 802852c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8028530:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8028534:	2200      	movs	r2, #0
 8028536:	fbb1 fef7 	udiv	lr, r1, r7
 802853a:	4610      	mov	r0, r2
 802853c:	fb07 1c1e 	mls	ip, r7, lr, r1
 8028540:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8028544:	2b09      	cmp	r3, #9
 8028546:	d811      	bhi.n	802856c <_strtol_l.isra.0+0xa4>
 8028548:	461c      	mov	r4, r3
 802854a:	42a7      	cmp	r7, r4
 802854c:	dd1d      	ble.n	802858a <_strtol_l.isra.0+0xc2>
 802854e:	1c53      	adds	r3, r2, #1
 8028550:	d007      	beq.n	8028562 <_strtol_l.isra.0+0x9a>
 8028552:	4586      	cmp	lr, r0
 8028554:	d316      	bcc.n	8028584 <_strtol_l.isra.0+0xbc>
 8028556:	d101      	bne.n	802855c <_strtol_l.isra.0+0x94>
 8028558:	45a4      	cmp	ip, r4
 802855a:	db13      	blt.n	8028584 <_strtol_l.isra.0+0xbc>
 802855c:	fb00 4007 	mla	r0, r0, r7, r4
 8028560:	2201      	movs	r2, #1
 8028562:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028566:	e7eb      	b.n	8028540 <_strtol_l.isra.0+0x78>
 8028568:	270a      	movs	r7, #10
 802856a:	e7dd      	b.n	8028528 <_strtol_l.isra.0+0x60>
 802856c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8028570:	2b19      	cmp	r3, #25
 8028572:	d801      	bhi.n	8028578 <_strtol_l.isra.0+0xb0>
 8028574:	3c37      	subs	r4, #55	; 0x37
 8028576:	e7e8      	b.n	802854a <_strtol_l.isra.0+0x82>
 8028578:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 802857c:	2b19      	cmp	r3, #25
 802857e:	d804      	bhi.n	802858a <_strtol_l.isra.0+0xc2>
 8028580:	3c57      	subs	r4, #87	; 0x57
 8028582:	e7e2      	b.n	802854a <_strtol_l.isra.0+0x82>
 8028584:	f04f 32ff 	mov.w	r2, #4294967295
 8028588:	e7eb      	b.n	8028562 <_strtol_l.isra.0+0x9a>
 802858a:	1c53      	adds	r3, r2, #1
 802858c:	d108      	bne.n	80285a0 <_strtol_l.isra.0+0xd8>
 802858e:	2322      	movs	r3, #34	; 0x22
 8028590:	f8c8 3000 	str.w	r3, [r8]
 8028594:	4608      	mov	r0, r1
 8028596:	f1ba 0f00 	cmp.w	sl, #0
 802859a:	d107      	bne.n	80285ac <_strtol_l.isra.0+0xe4>
 802859c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80285a0:	b106      	cbz	r6, 80285a4 <_strtol_l.isra.0+0xdc>
 80285a2:	4240      	negs	r0, r0
 80285a4:	f1ba 0f00 	cmp.w	sl, #0
 80285a8:	d00c      	beq.n	80285c4 <_strtol_l.isra.0+0xfc>
 80285aa:	b122      	cbz	r2, 80285b6 <_strtol_l.isra.0+0xee>
 80285ac:	3d01      	subs	r5, #1
 80285ae:	f8ca 5000 	str.w	r5, [sl]
 80285b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80285b6:	464d      	mov	r5, r9
 80285b8:	e7f9      	b.n	80285ae <_strtol_l.isra.0+0xe6>
 80285ba:	2430      	movs	r4, #48	; 0x30
 80285bc:	2f00      	cmp	r7, #0
 80285be:	d1b3      	bne.n	8028528 <_strtol_l.isra.0+0x60>
 80285c0:	2708      	movs	r7, #8
 80285c2:	e7b1      	b.n	8028528 <_strtol_l.isra.0+0x60>
 80285c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080285c8 <strtol>:
 80285c8:	4b08      	ldr	r3, [pc, #32]	; (80285ec <strtol+0x24>)
 80285ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80285cc:	681c      	ldr	r4, [r3, #0]
 80285ce:	4d08      	ldr	r5, [pc, #32]	; (80285f0 <strtol+0x28>)
 80285d0:	6a23      	ldr	r3, [r4, #32]
 80285d2:	2b00      	cmp	r3, #0
 80285d4:	bf08      	it	eq
 80285d6:	462b      	moveq	r3, r5
 80285d8:	9300      	str	r3, [sp, #0]
 80285da:	4613      	mov	r3, r2
 80285dc:	460a      	mov	r2, r1
 80285de:	4601      	mov	r1, r0
 80285e0:	4620      	mov	r0, r4
 80285e2:	f7ff ff71 	bl	80284c8 <_strtol_l.isra.0>
 80285e6:	b003      	add	sp, #12
 80285e8:	bd30      	pop	{r4, r5, pc}
 80285ea:	bf00      	nop
 80285ec:	20000068 	.word	0x20000068
 80285f0:	200000cc 	.word	0x200000cc

080285f4 <__utoa>:
 80285f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80285f6:	4c1e      	ldr	r4, [pc, #120]	; (8028670 <__utoa+0x7c>)
 80285f8:	b08b      	sub	sp, #44	; 0x2c
 80285fa:	4603      	mov	r3, r0
 80285fc:	460f      	mov	r7, r1
 80285fe:	466d      	mov	r5, sp
 8028600:	f104 0e20 	add.w	lr, r4, #32
 8028604:	6820      	ldr	r0, [r4, #0]
 8028606:	6861      	ldr	r1, [r4, #4]
 8028608:	462e      	mov	r6, r5
 802860a:	c603      	stmia	r6!, {r0, r1}
 802860c:	3408      	adds	r4, #8
 802860e:	4574      	cmp	r4, lr
 8028610:	4635      	mov	r5, r6
 8028612:	d1f7      	bne.n	8028604 <__utoa+0x10>
 8028614:	7921      	ldrb	r1, [r4, #4]
 8028616:	7131      	strb	r1, [r6, #4]
 8028618:	1e91      	subs	r1, r2, #2
 802861a:	6820      	ldr	r0, [r4, #0]
 802861c:	6030      	str	r0, [r6, #0]
 802861e:	2922      	cmp	r1, #34	; 0x22
 8028620:	f04f 0100 	mov.w	r1, #0
 8028624:	d904      	bls.n	8028630 <__utoa+0x3c>
 8028626:	7039      	strb	r1, [r7, #0]
 8028628:	460f      	mov	r7, r1
 802862a:	4638      	mov	r0, r7
 802862c:	b00b      	add	sp, #44	; 0x2c
 802862e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028630:	1e78      	subs	r0, r7, #1
 8028632:	4606      	mov	r6, r0
 8028634:	fbb3 f5f2 	udiv	r5, r3, r2
 8028638:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 802863c:	fb02 3315 	mls	r3, r2, r5, r3
 8028640:	4473      	add	r3, lr
 8028642:	1c4c      	adds	r4, r1, #1
 8028644:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8028648:	f806 3f01 	strb.w	r3, [r6, #1]!
 802864c:	462b      	mov	r3, r5
 802864e:	b965      	cbnz	r5, 802866a <__utoa+0x76>
 8028650:	553d      	strb	r5, [r7, r4]
 8028652:	187a      	adds	r2, r7, r1
 8028654:	1acc      	subs	r4, r1, r3
 8028656:	42a3      	cmp	r3, r4
 8028658:	dae7      	bge.n	802862a <__utoa+0x36>
 802865a:	7844      	ldrb	r4, [r0, #1]
 802865c:	7815      	ldrb	r5, [r2, #0]
 802865e:	f800 5f01 	strb.w	r5, [r0, #1]!
 8028662:	3301      	adds	r3, #1
 8028664:	f802 4901 	strb.w	r4, [r2], #-1
 8028668:	e7f4      	b.n	8028654 <__utoa+0x60>
 802866a:	4621      	mov	r1, r4
 802866c:	e7e2      	b.n	8028634 <__utoa+0x40>
 802866e:	bf00      	nop
 8028670:	0802e798 	.word	0x0802e798

08028674 <__swbuf_r>:
 8028674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028676:	460e      	mov	r6, r1
 8028678:	4614      	mov	r4, r2
 802867a:	4605      	mov	r5, r0
 802867c:	b118      	cbz	r0, 8028686 <__swbuf_r+0x12>
 802867e:	6983      	ldr	r3, [r0, #24]
 8028680:	b90b      	cbnz	r3, 8028686 <__swbuf_r+0x12>
 8028682:	f000 f9a9 	bl	80289d8 <__sinit>
 8028686:	4b21      	ldr	r3, [pc, #132]	; (802870c <__swbuf_r+0x98>)
 8028688:	429c      	cmp	r4, r3
 802868a:	d12a      	bne.n	80286e2 <__swbuf_r+0x6e>
 802868c:	686c      	ldr	r4, [r5, #4]
 802868e:	69a3      	ldr	r3, [r4, #24]
 8028690:	60a3      	str	r3, [r4, #8]
 8028692:	89a3      	ldrh	r3, [r4, #12]
 8028694:	071a      	lsls	r2, r3, #28
 8028696:	d52e      	bpl.n	80286f6 <__swbuf_r+0x82>
 8028698:	6923      	ldr	r3, [r4, #16]
 802869a:	b363      	cbz	r3, 80286f6 <__swbuf_r+0x82>
 802869c:	6923      	ldr	r3, [r4, #16]
 802869e:	6820      	ldr	r0, [r4, #0]
 80286a0:	1ac0      	subs	r0, r0, r3
 80286a2:	6963      	ldr	r3, [r4, #20]
 80286a4:	b2f6      	uxtb	r6, r6
 80286a6:	4298      	cmp	r0, r3
 80286a8:	4637      	mov	r7, r6
 80286aa:	db04      	blt.n	80286b6 <__swbuf_r+0x42>
 80286ac:	4621      	mov	r1, r4
 80286ae:	4628      	mov	r0, r5
 80286b0:	f000 f928 	bl	8028904 <_fflush_r>
 80286b4:	bb28      	cbnz	r0, 8028702 <__swbuf_r+0x8e>
 80286b6:	68a3      	ldr	r3, [r4, #8]
 80286b8:	3b01      	subs	r3, #1
 80286ba:	60a3      	str	r3, [r4, #8]
 80286bc:	6823      	ldr	r3, [r4, #0]
 80286be:	1c5a      	adds	r2, r3, #1
 80286c0:	6022      	str	r2, [r4, #0]
 80286c2:	701e      	strb	r6, [r3, #0]
 80286c4:	6963      	ldr	r3, [r4, #20]
 80286c6:	3001      	adds	r0, #1
 80286c8:	4298      	cmp	r0, r3
 80286ca:	d004      	beq.n	80286d6 <__swbuf_r+0x62>
 80286cc:	89a3      	ldrh	r3, [r4, #12]
 80286ce:	07db      	lsls	r3, r3, #31
 80286d0:	d519      	bpl.n	8028706 <__swbuf_r+0x92>
 80286d2:	2e0a      	cmp	r6, #10
 80286d4:	d117      	bne.n	8028706 <__swbuf_r+0x92>
 80286d6:	4621      	mov	r1, r4
 80286d8:	4628      	mov	r0, r5
 80286da:	f000 f913 	bl	8028904 <_fflush_r>
 80286de:	b190      	cbz	r0, 8028706 <__swbuf_r+0x92>
 80286e0:	e00f      	b.n	8028702 <__swbuf_r+0x8e>
 80286e2:	4b0b      	ldr	r3, [pc, #44]	; (8028710 <__swbuf_r+0x9c>)
 80286e4:	429c      	cmp	r4, r3
 80286e6:	d101      	bne.n	80286ec <__swbuf_r+0x78>
 80286e8:	68ac      	ldr	r4, [r5, #8]
 80286ea:	e7d0      	b.n	802868e <__swbuf_r+0x1a>
 80286ec:	4b09      	ldr	r3, [pc, #36]	; (8028714 <__swbuf_r+0xa0>)
 80286ee:	429c      	cmp	r4, r3
 80286f0:	bf08      	it	eq
 80286f2:	68ec      	ldreq	r4, [r5, #12]
 80286f4:	e7cb      	b.n	802868e <__swbuf_r+0x1a>
 80286f6:	4621      	mov	r1, r4
 80286f8:	4628      	mov	r0, r5
 80286fa:	f000 f80d 	bl	8028718 <__swsetup_r>
 80286fe:	2800      	cmp	r0, #0
 8028700:	d0cc      	beq.n	802869c <__swbuf_r+0x28>
 8028702:	f04f 37ff 	mov.w	r7, #4294967295
 8028706:	4638      	mov	r0, r7
 8028708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802870a:	bf00      	nop
 802870c:	0802e7e0 	.word	0x0802e7e0
 8028710:	0802e800 	.word	0x0802e800
 8028714:	0802e7c0 	.word	0x0802e7c0

08028718 <__swsetup_r>:
 8028718:	4b32      	ldr	r3, [pc, #200]	; (80287e4 <__swsetup_r+0xcc>)
 802871a:	b570      	push	{r4, r5, r6, lr}
 802871c:	681d      	ldr	r5, [r3, #0]
 802871e:	4606      	mov	r6, r0
 8028720:	460c      	mov	r4, r1
 8028722:	b125      	cbz	r5, 802872e <__swsetup_r+0x16>
 8028724:	69ab      	ldr	r3, [r5, #24]
 8028726:	b913      	cbnz	r3, 802872e <__swsetup_r+0x16>
 8028728:	4628      	mov	r0, r5
 802872a:	f000 f955 	bl	80289d8 <__sinit>
 802872e:	4b2e      	ldr	r3, [pc, #184]	; (80287e8 <__swsetup_r+0xd0>)
 8028730:	429c      	cmp	r4, r3
 8028732:	d10f      	bne.n	8028754 <__swsetup_r+0x3c>
 8028734:	686c      	ldr	r4, [r5, #4]
 8028736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802873a:	b29a      	uxth	r2, r3
 802873c:	0715      	lsls	r5, r2, #28
 802873e:	d42c      	bmi.n	802879a <__swsetup_r+0x82>
 8028740:	06d0      	lsls	r0, r2, #27
 8028742:	d411      	bmi.n	8028768 <__swsetup_r+0x50>
 8028744:	2209      	movs	r2, #9
 8028746:	6032      	str	r2, [r6, #0]
 8028748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802874c:	81a3      	strh	r3, [r4, #12]
 802874e:	f04f 30ff 	mov.w	r0, #4294967295
 8028752:	bd70      	pop	{r4, r5, r6, pc}
 8028754:	4b25      	ldr	r3, [pc, #148]	; (80287ec <__swsetup_r+0xd4>)
 8028756:	429c      	cmp	r4, r3
 8028758:	d101      	bne.n	802875e <__swsetup_r+0x46>
 802875a:	68ac      	ldr	r4, [r5, #8]
 802875c:	e7eb      	b.n	8028736 <__swsetup_r+0x1e>
 802875e:	4b24      	ldr	r3, [pc, #144]	; (80287f0 <__swsetup_r+0xd8>)
 8028760:	429c      	cmp	r4, r3
 8028762:	bf08      	it	eq
 8028764:	68ec      	ldreq	r4, [r5, #12]
 8028766:	e7e6      	b.n	8028736 <__swsetup_r+0x1e>
 8028768:	0751      	lsls	r1, r2, #29
 802876a:	d512      	bpl.n	8028792 <__swsetup_r+0x7a>
 802876c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802876e:	b141      	cbz	r1, 8028782 <__swsetup_r+0x6a>
 8028770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028774:	4299      	cmp	r1, r3
 8028776:	d002      	beq.n	802877e <__swsetup_r+0x66>
 8028778:	4630      	mov	r0, r6
 802877a:	f000 fa31 	bl	8028be0 <_free_r>
 802877e:	2300      	movs	r3, #0
 8028780:	6363      	str	r3, [r4, #52]	; 0x34
 8028782:	89a3      	ldrh	r3, [r4, #12]
 8028784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028788:	81a3      	strh	r3, [r4, #12]
 802878a:	2300      	movs	r3, #0
 802878c:	6063      	str	r3, [r4, #4]
 802878e:	6923      	ldr	r3, [r4, #16]
 8028790:	6023      	str	r3, [r4, #0]
 8028792:	89a3      	ldrh	r3, [r4, #12]
 8028794:	f043 0308 	orr.w	r3, r3, #8
 8028798:	81a3      	strh	r3, [r4, #12]
 802879a:	6923      	ldr	r3, [r4, #16]
 802879c:	b94b      	cbnz	r3, 80287b2 <__swsetup_r+0x9a>
 802879e:	89a3      	ldrh	r3, [r4, #12]
 80287a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80287a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80287a8:	d003      	beq.n	80287b2 <__swsetup_r+0x9a>
 80287aa:	4621      	mov	r1, r4
 80287ac:	4630      	mov	r0, r6
 80287ae:	f000 f9c5 	bl	8028b3c <__smakebuf_r>
 80287b2:	89a2      	ldrh	r2, [r4, #12]
 80287b4:	f012 0301 	ands.w	r3, r2, #1
 80287b8:	d00c      	beq.n	80287d4 <__swsetup_r+0xbc>
 80287ba:	2300      	movs	r3, #0
 80287bc:	60a3      	str	r3, [r4, #8]
 80287be:	6963      	ldr	r3, [r4, #20]
 80287c0:	425b      	negs	r3, r3
 80287c2:	61a3      	str	r3, [r4, #24]
 80287c4:	6923      	ldr	r3, [r4, #16]
 80287c6:	b953      	cbnz	r3, 80287de <__swsetup_r+0xc6>
 80287c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80287cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80287d0:	d1ba      	bne.n	8028748 <__swsetup_r+0x30>
 80287d2:	bd70      	pop	{r4, r5, r6, pc}
 80287d4:	0792      	lsls	r2, r2, #30
 80287d6:	bf58      	it	pl
 80287d8:	6963      	ldrpl	r3, [r4, #20]
 80287da:	60a3      	str	r3, [r4, #8]
 80287dc:	e7f2      	b.n	80287c4 <__swsetup_r+0xac>
 80287de:	2000      	movs	r0, #0
 80287e0:	e7f7      	b.n	80287d2 <__swsetup_r+0xba>
 80287e2:	bf00      	nop
 80287e4:	20000068 	.word	0x20000068
 80287e8:	0802e7e0 	.word	0x0802e7e0
 80287ec:	0802e800 	.word	0x0802e800
 80287f0:	0802e7c0 	.word	0x0802e7c0

080287f4 <__sflush_r>:
 80287f4:	898a      	ldrh	r2, [r1, #12]
 80287f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80287fa:	4605      	mov	r5, r0
 80287fc:	0710      	lsls	r0, r2, #28
 80287fe:	460c      	mov	r4, r1
 8028800:	d45a      	bmi.n	80288b8 <__sflush_r+0xc4>
 8028802:	684b      	ldr	r3, [r1, #4]
 8028804:	2b00      	cmp	r3, #0
 8028806:	dc05      	bgt.n	8028814 <__sflush_r+0x20>
 8028808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802880a:	2b00      	cmp	r3, #0
 802880c:	dc02      	bgt.n	8028814 <__sflush_r+0x20>
 802880e:	2000      	movs	r0, #0
 8028810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028816:	2e00      	cmp	r6, #0
 8028818:	d0f9      	beq.n	802880e <__sflush_r+0x1a>
 802881a:	2300      	movs	r3, #0
 802881c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028820:	682f      	ldr	r7, [r5, #0]
 8028822:	602b      	str	r3, [r5, #0]
 8028824:	d033      	beq.n	802888e <__sflush_r+0x9a>
 8028826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028828:	89a3      	ldrh	r3, [r4, #12]
 802882a:	075a      	lsls	r2, r3, #29
 802882c:	d505      	bpl.n	802883a <__sflush_r+0x46>
 802882e:	6863      	ldr	r3, [r4, #4]
 8028830:	1ac0      	subs	r0, r0, r3
 8028832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028834:	b10b      	cbz	r3, 802883a <__sflush_r+0x46>
 8028836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028838:	1ac0      	subs	r0, r0, r3
 802883a:	2300      	movs	r3, #0
 802883c:	4602      	mov	r2, r0
 802883e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028840:	6a21      	ldr	r1, [r4, #32]
 8028842:	4628      	mov	r0, r5
 8028844:	47b0      	blx	r6
 8028846:	1c43      	adds	r3, r0, #1
 8028848:	89a3      	ldrh	r3, [r4, #12]
 802884a:	d106      	bne.n	802885a <__sflush_r+0x66>
 802884c:	6829      	ldr	r1, [r5, #0]
 802884e:	291d      	cmp	r1, #29
 8028850:	d84b      	bhi.n	80288ea <__sflush_r+0xf6>
 8028852:	4a2b      	ldr	r2, [pc, #172]	; (8028900 <__sflush_r+0x10c>)
 8028854:	40ca      	lsrs	r2, r1
 8028856:	07d6      	lsls	r6, r2, #31
 8028858:	d547      	bpl.n	80288ea <__sflush_r+0xf6>
 802885a:	2200      	movs	r2, #0
 802885c:	6062      	str	r2, [r4, #4]
 802885e:	04d9      	lsls	r1, r3, #19
 8028860:	6922      	ldr	r2, [r4, #16]
 8028862:	6022      	str	r2, [r4, #0]
 8028864:	d504      	bpl.n	8028870 <__sflush_r+0x7c>
 8028866:	1c42      	adds	r2, r0, #1
 8028868:	d101      	bne.n	802886e <__sflush_r+0x7a>
 802886a:	682b      	ldr	r3, [r5, #0]
 802886c:	b903      	cbnz	r3, 8028870 <__sflush_r+0x7c>
 802886e:	6560      	str	r0, [r4, #84]	; 0x54
 8028870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028872:	602f      	str	r7, [r5, #0]
 8028874:	2900      	cmp	r1, #0
 8028876:	d0ca      	beq.n	802880e <__sflush_r+0x1a>
 8028878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802887c:	4299      	cmp	r1, r3
 802887e:	d002      	beq.n	8028886 <__sflush_r+0x92>
 8028880:	4628      	mov	r0, r5
 8028882:	f000 f9ad 	bl	8028be0 <_free_r>
 8028886:	2000      	movs	r0, #0
 8028888:	6360      	str	r0, [r4, #52]	; 0x34
 802888a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802888e:	6a21      	ldr	r1, [r4, #32]
 8028890:	2301      	movs	r3, #1
 8028892:	4628      	mov	r0, r5
 8028894:	47b0      	blx	r6
 8028896:	1c41      	adds	r1, r0, #1
 8028898:	d1c6      	bne.n	8028828 <__sflush_r+0x34>
 802889a:	682b      	ldr	r3, [r5, #0]
 802889c:	2b00      	cmp	r3, #0
 802889e:	d0c3      	beq.n	8028828 <__sflush_r+0x34>
 80288a0:	2b1d      	cmp	r3, #29
 80288a2:	d001      	beq.n	80288a8 <__sflush_r+0xb4>
 80288a4:	2b16      	cmp	r3, #22
 80288a6:	d101      	bne.n	80288ac <__sflush_r+0xb8>
 80288a8:	602f      	str	r7, [r5, #0]
 80288aa:	e7b0      	b.n	802880e <__sflush_r+0x1a>
 80288ac:	89a3      	ldrh	r3, [r4, #12]
 80288ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80288b2:	81a3      	strh	r3, [r4, #12]
 80288b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80288b8:	690f      	ldr	r7, [r1, #16]
 80288ba:	2f00      	cmp	r7, #0
 80288bc:	d0a7      	beq.n	802880e <__sflush_r+0x1a>
 80288be:	0793      	lsls	r3, r2, #30
 80288c0:	680e      	ldr	r6, [r1, #0]
 80288c2:	bf08      	it	eq
 80288c4:	694b      	ldreq	r3, [r1, #20]
 80288c6:	600f      	str	r7, [r1, #0]
 80288c8:	bf18      	it	ne
 80288ca:	2300      	movne	r3, #0
 80288cc:	eba6 0807 	sub.w	r8, r6, r7
 80288d0:	608b      	str	r3, [r1, #8]
 80288d2:	f1b8 0f00 	cmp.w	r8, #0
 80288d6:	dd9a      	ble.n	802880e <__sflush_r+0x1a>
 80288d8:	4643      	mov	r3, r8
 80288da:	463a      	mov	r2, r7
 80288dc:	6a21      	ldr	r1, [r4, #32]
 80288de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80288e0:	4628      	mov	r0, r5
 80288e2:	47b0      	blx	r6
 80288e4:	2800      	cmp	r0, #0
 80288e6:	dc07      	bgt.n	80288f8 <__sflush_r+0x104>
 80288e8:	89a3      	ldrh	r3, [r4, #12]
 80288ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80288ee:	81a3      	strh	r3, [r4, #12]
 80288f0:	f04f 30ff 	mov.w	r0, #4294967295
 80288f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80288f8:	4407      	add	r7, r0
 80288fa:	eba8 0800 	sub.w	r8, r8, r0
 80288fe:	e7e8      	b.n	80288d2 <__sflush_r+0xde>
 8028900:	20400001 	.word	0x20400001

08028904 <_fflush_r>:
 8028904:	b538      	push	{r3, r4, r5, lr}
 8028906:	690b      	ldr	r3, [r1, #16]
 8028908:	4605      	mov	r5, r0
 802890a:	460c      	mov	r4, r1
 802890c:	b1db      	cbz	r3, 8028946 <_fflush_r+0x42>
 802890e:	b118      	cbz	r0, 8028918 <_fflush_r+0x14>
 8028910:	6983      	ldr	r3, [r0, #24]
 8028912:	b90b      	cbnz	r3, 8028918 <_fflush_r+0x14>
 8028914:	f000 f860 	bl	80289d8 <__sinit>
 8028918:	4b0c      	ldr	r3, [pc, #48]	; (802894c <_fflush_r+0x48>)
 802891a:	429c      	cmp	r4, r3
 802891c:	d109      	bne.n	8028932 <_fflush_r+0x2e>
 802891e:	686c      	ldr	r4, [r5, #4]
 8028920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028924:	b17b      	cbz	r3, 8028946 <_fflush_r+0x42>
 8028926:	4621      	mov	r1, r4
 8028928:	4628      	mov	r0, r5
 802892a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802892e:	f7ff bf61 	b.w	80287f4 <__sflush_r>
 8028932:	4b07      	ldr	r3, [pc, #28]	; (8028950 <_fflush_r+0x4c>)
 8028934:	429c      	cmp	r4, r3
 8028936:	d101      	bne.n	802893c <_fflush_r+0x38>
 8028938:	68ac      	ldr	r4, [r5, #8]
 802893a:	e7f1      	b.n	8028920 <_fflush_r+0x1c>
 802893c:	4b05      	ldr	r3, [pc, #20]	; (8028954 <_fflush_r+0x50>)
 802893e:	429c      	cmp	r4, r3
 8028940:	bf08      	it	eq
 8028942:	68ec      	ldreq	r4, [r5, #12]
 8028944:	e7ec      	b.n	8028920 <_fflush_r+0x1c>
 8028946:	2000      	movs	r0, #0
 8028948:	bd38      	pop	{r3, r4, r5, pc}
 802894a:	bf00      	nop
 802894c:	0802e7e0 	.word	0x0802e7e0
 8028950:	0802e800 	.word	0x0802e800
 8028954:	0802e7c0 	.word	0x0802e7c0

08028958 <_cleanup_r>:
 8028958:	4901      	ldr	r1, [pc, #4]	; (8028960 <_cleanup_r+0x8>)
 802895a:	f000 b8a9 	b.w	8028ab0 <_fwalk_reent>
 802895e:	bf00      	nop
 8028960:	08028905 	.word	0x08028905

08028964 <std.isra.0>:
 8028964:	2300      	movs	r3, #0
 8028966:	b510      	push	{r4, lr}
 8028968:	4604      	mov	r4, r0
 802896a:	6003      	str	r3, [r0, #0]
 802896c:	6043      	str	r3, [r0, #4]
 802896e:	6083      	str	r3, [r0, #8]
 8028970:	8181      	strh	r1, [r0, #12]
 8028972:	6643      	str	r3, [r0, #100]	; 0x64
 8028974:	81c2      	strh	r2, [r0, #14]
 8028976:	6103      	str	r3, [r0, #16]
 8028978:	6143      	str	r3, [r0, #20]
 802897a:	6183      	str	r3, [r0, #24]
 802897c:	4619      	mov	r1, r3
 802897e:	2208      	movs	r2, #8
 8028980:	305c      	adds	r0, #92	; 0x5c
 8028982:	f7ff fd7f 	bl	8028484 <memset>
 8028986:	4b05      	ldr	r3, [pc, #20]	; (802899c <std.isra.0+0x38>)
 8028988:	6263      	str	r3, [r4, #36]	; 0x24
 802898a:	4b05      	ldr	r3, [pc, #20]	; (80289a0 <std.isra.0+0x3c>)
 802898c:	62a3      	str	r3, [r4, #40]	; 0x28
 802898e:	4b05      	ldr	r3, [pc, #20]	; (80289a4 <std.isra.0+0x40>)
 8028990:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028992:	4b05      	ldr	r3, [pc, #20]	; (80289a8 <std.isra.0+0x44>)
 8028994:	6224      	str	r4, [r4, #32]
 8028996:	6323      	str	r3, [r4, #48]	; 0x30
 8028998:	bd10      	pop	{r4, pc}
 802899a:	bf00      	nop
 802899c:	08028d59 	.word	0x08028d59
 80289a0:	08028d7b 	.word	0x08028d7b
 80289a4:	08028db3 	.word	0x08028db3
 80289a8:	08028dd7 	.word	0x08028dd7

080289ac <__sfmoreglue>:
 80289ac:	b570      	push	{r4, r5, r6, lr}
 80289ae:	1e4a      	subs	r2, r1, #1
 80289b0:	2568      	movs	r5, #104	; 0x68
 80289b2:	4355      	muls	r5, r2
 80289b4:	460e      	mov	r6, r1
 80289b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80289ba:	f000 f95f 	bl	8028c7c <_malloc_r>
 80289be:	4604      	mov	r4, r0
 80289c0:	b140      	cbz	r0, 80289d4 <__sfmoreglue+0x28>
 80289c2:	2100      	movs	r1, #0
 80289c4:	e880 0042 	stmia.w	r0, {r1, r6}
 80289c8:	300c      	adds	r0, #12
 80289ca:	60a0      	str	r0, [r4, #8]
 80289cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80289d0:	f7ff fd58 	bl	8028484 <memset>
 80289d4:	4620      	mov	r0, r4
 80289d6:	bd70      	pop	{r4, r5, r6, pc}

080289d8 <__sinit>:
 80289d8:	6983      	ldr	r3, [r0, #24]
 80289da:	b510      	push	{r4, lr}
 80289dc:	4604      	mov	r4, r0
 80289de:	bb33      	cbnz	r3, 8028a2e <__sinit+0x56>
 80289e0:	6483      	str	r3, [r0, #72]	; 0x48
 80289e2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80289e4:	6503      	str	r3, [r0, #80]	; 0x50
 80289e6:	4b12      	ldr	r3, [pc, #72]	; (8028a30 <__sinit+0x58>)
 80289e8:	4a12      	ldr	r2, [pc, #72]	; (8028a34 <__sinit+0x5c>)
 80289ea:	681b      	ldr	r3, [r3, #0]
 80289ec:	6282      	str	r2, [r0, #40]	; 0x28
 80289ee:	4298      	cmp	r0, r3
 80289f0:	bf04      	itt	eq
 80289f2:	2301      	moveq	r3, #1
 80289f4:	6183      	streq	r3, [r0, #24]
 80289f6:	f000 f81f 	bl	8028a38 <__sfp>
 80289fa:	6060      	str	r0, [r4, #4]
 80289fc:	4620      	mov	r0, r4
 80289fe:	f000 f81b 	bl	8028a38 <__sfp>
 8028a02:	60a0      	str	r0, [r4, #8]
 8028a04:	4620      	mov	r0, r4
 8028a06:	f000 f817 	bl	8028a38 <__sfp>
 8028a0a:	2200      	movs	r2, #0
 8028a0c:	60e0      	str	r0, [r4, #12]
 8028a0e:	2104      	movs	r1, #4
 8028a10:	6860      	ldr	r0, [r4, #4]
 8028a12:	f7ff ffa7 	bl	8028964 <std.isra.0>
 8028a16:	2201      	movs	r2, #1
 8028a18:	2109      	movs	r1, #9
 8028a1a:	68a0      	ldr	r0, [r4, #8]
 8028a1c:	f7ff ffa2 	bl	8028964 <std.isra.0>
 8028a20:	2202      	movs	r2, #2
 8028a22:	2112      	movs	r1, #18
 8028a24:	68e0      	ldr	r0, [r4, #12]
 8028a26:	f7ff ff9d 	bl	8028964 <std.isra.0>
 8028a2a:	2301      	movs	r3, #1
 8028a2c:	61a3      	str	r3, [r4, #24]
 8028a2e:	bd10      	pop	{r4, pc}
 8028a30:	0802e794 	.word	0x0802e794
 8028a34:	08028959 	.word	0x08028959

08028a38 <__sfp>:
 8028a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028a3a:	4b1c      	ldr	r3, [pc, #112]	; (8028aac <__sfp+0x74>)
 8028a3c:	681e      	ldr	r6, [r3, #0]
 8028a3e:	69b3      	ldr	r3, [r6, #24]
 8028a40:	4607      	mov	r7, r0
 8028a42:	b913      	cbnz	r3, 8028a4a <__sfp+0x12>
 8028a44:	4630      	mov	r0, r6
 8028a46:	f7ff ffc7 	bl	80289d8 <__sinit>
 8028a4a:	3648      	adds	r6, #72	; 0x48
 8028a4c:	68b4      	ldr	r4, [r6, #8]
 8028a4e:	6873      	ldr	r3, [r6, #4]
 8028a50:	3b01      	subs	r3, #1
 8028a52:	d503      	bpl.n	8028a5c <__sfp+0x24>
 8028a54:	6833      	ldr	r3, [r6, #0]
 8028a56:	b133      	cbz	r3, 8028a66 <__sfp+0x2e>
 8028a58:	6836      	ldr	r6, [r6, #0]
 8028a5a:	e7f7      	b.n	8028a4c <__sfp+0x14>
 8028a5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028a60:	b16d      	cbz	r5, 8028a7e <__sfp+0x46>
 8028a62:	3468      	adds	r4, #104	; 0x68
 8028a64:	e7f4      	b.n	8028a50 <__sfp+0x18>
 8028a66:	2104      	movs	r1, #4
 8028a68:	4638      	mov	r0, r7
 8028a6a:	f7ff ff9f 	bl	80289ac <__sfmoreglue>
 8028a6e:	6030      	str	r0, [r6, #0]
 8028a70:	2800      	cmp	r0, #0
 8028a72:	d1f1      	bne.n	8028a58 <__sfp+0x20>
 8028a74:	230c      	movs	r3, #12
 8028a76:	603b      	str	r3, [r7, #0]
 8028a78:	4604      	mov	r4, r0
 8028a7a:	4620      	mov	r0, r4
 8028a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8028a82:	81e3      	strh	r3, [r4, #14]
 8028a84:	2301      	movs	r3, #1
 8028a86:	81a3      	strh	r3, [r4, #12]
 8028a88:	6665      	str	r5, [r4, #100]	; 0x64
 8028a8a:	6025      	str	r5, [r4, #0]
 8028a8c:	60a5      	str	r5, [r4, #8]
 8028a8e:	6065      	str	r5, [r4, #4]
 8028a90:	6125      	str	r5, [r4, #16]
 8028a92:	6165      	str	r5, [r4, #20]
 8028a94:	61a5      	str	r5, [r4, #24]
 8028a96:	2208      	movs	r2, #8
 8028a98:	4629      	mov	r1, r5
 8028a9a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8028a9e:	f7ff fcf1 	bl	8028484 <memset>
 8028aa2:	6365      	str	r5, [r4, #52]	; 0x34
 8028aa4:	63a5      	str	r5, [r4, #56]	; 0x38
 8028aa6:	64a5      	str	r5, [r4, #72]	; 0x48
 8028aa8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8028aaa:	e7e6      	b.n	8028a7a <__sfp+0x42>
 8028aac:	0802e794 	.word	0x0802e794

08028ab0 <_fwalk_reent>:
 8028ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028ab4:	4680      	mov	r8, r0
 8028ab6:	4689      	mov	r9, r1
 8028ab8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8028abc:	2600      	movs	r6, #0
 8028abe:	b914      	cbnz	r4, 8028ac6 <_fwalk_reent+0x16>
 8028ac0:	4630      	mov	r0, r6
 8028ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028ac6:	68a5      	ldr	r5, [r4, #8]
 8028ac8:	6867      	ldr	r7, [r4, #4]
 8028aca:	3f01      	subs	r7, #1
 8028acc:	d501      	bpl.n	8028ad2 <_fwalk_reent+0x22>
 8028ace:	6824      	ldr	r4, [r4, #0]
 8028ad0:	e7f5      	b.n	8028abe <_fwalk_reent+0xe>
 8028ad2:	89ab      	ldrh	r3, [r5, #12]
 8028ad4:	2b01      	cmp	r3, #1
 8028ad6:	d907      	bls.n	8028ae8 <_fwalk_reent+0x38>
 8028ad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8028adc:	3301      	adds	r3, #1
 8028ade:	d003      	beq.n	8028ae8 <_fwalk_reent+0x38>
 8028ae0:	4629      	mov	r1, r5
 8028ae2:	4640      	mov	r0, r8
 8028ae4:	47c8      	blx	r9
 8028ae6:	4306      	orrs	r6, r0
 8028ae8:	3568      	adds	r5, #104	; 0x68
 8028aea:	e7ee      	b.n	8028aca <_fwalk_reent+0x1a>

08028aec <__locale_ctype_ptr_l>:
 8028aec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8028af0:	4770      	bx	lr

08028af2 <__swhatbuf_r>:
 8028af2:	b570      	push	{r4, r5, r6, lr}
 8028af4:	460e      	mov	r6, r1
 8028af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028afa:	2900      	cmp	r1, #0
 8028afc:	b090      	sub	sp, #64	; 0x40
 8028afe:	4614      	mov	r4, r2
 8028b00:	461d      	mov	r5, r3
 8028b02:	da07      	bge.n	8028b14 <__swhatbuf_r+0x22>
 8028b04:	2300      	movs	r3, #0
 8028b06:	602b      	str	r3, [r5, #0]
 8028b08:	89b3      	ldrh	r3, [r6, #12]
 8028b0a:	061a      	lsls	r2, r3, #24
 8028b0c:	d410      	bmi.n	8028b30 <__swhatbuf_r+0x3e>
 8028b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028b12:	e00e      	b.n	8028b32 <__swhatbuf_r+0x40>
 8028b14:	aa01      	add	r2, sp, #4
 8028b16:	f000 f991 	bl	8028e3c <_fstat_r>
 8028b1a:	2800      	cmp	r0, #0
 8028b1c:	dbf2      	blt.n	8028b04 <__swhatbuf_r+0x12>
 8028b1e:	9a02      	ldr	r2, [sp, #8]
 8028b20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8028b24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028b28:	425a      	negs	r2, r3
 8028b2a:	415a      	adcs	r2, r3
 8028b2c:	602a      	str	r2, [r5, #0]
 8028b2e:	e7ee      	b.n	8028b0e <__swhatbuf_r+0x1c>
 8028b30:	2340      	movs	r3, #64	; 0x40
 8028b32:	2000      	movs	r0, #0
 8028b34:	6023      	str	r3, [r4, #0]
 8028b36:	b010      	add	sp, #64	; 0x40
 8028b38:	bd70      	pop	{r4, r5, r6, pc}
	...

08028b3c <__smakebuf_r>:
 8028b3c:	898b      	ldrh	r3, [r1, #12]
 8028b3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028b40:	079d      	lsls	r5, r3, #30
 8028b42:	4606      	mov	r6, r0
 8028b44:	460c      	mov	r4, r1
 8028b46:	d507      	bpl.n	8028b58 <__smakebuf_r+0x1c>
 8028b48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028b4c:	6023      	str	r3, [r4, #0]
 8028b4e:	6123      	str	r3, [r4, #16]
 8028b50:	2301      	movs	r3, #1
 8028b52:	6163      	str	r3, [r4, #20]
 8028b54:	b002      	add	sp, #8
 8028b56:	bd70      	pop	{r4, r5, r6, pc}
 8028b58:	ab01      	add	r3, sp, #4
 8028b5a:	466a      	mov	r2, sp
 8028b5c:	f7ff ffc9 	bl	8028af2 <__swhatbuf_r>
 8028b60:	9900      	ldr	r1, [sp, #0]
 8028b62:	4605      	mov	r5, r0
 8028b64:	4630      	mov	r0, r6
 8028b66:	f000 f889 	bl	8028c7c <_malloc_r>
 8028b6a:	b948      	cbnz	r0, 8028b80 <__smakebuf_r+0x44>
 8028b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028b70:	059a      	lsls	r2, r3, #22
 8028b72:	d4ef      	bmi.n	8028b54 <__smakebuf_r+0x18>
 8028b74:	f023 0303 	bic.w	r3, r3, #3
 8028b78:	f043 0302 	orr.w	r3, r3, #2
 8028b7c:	81a3      	strh	r3, [r4, #12]
 8028b7e:	e7e3      	b.n	8028b48 <__smakebuf_r+0xc>
 8028b80:	4b0d      	ldr	r3, [pc, #52]	; (8028bb8 <__smakebuf_r+0x7c>)
 8028b82:	62b3      	str	r3, [r6, #40]	; 0x28
 8028b84:	89a3      	ldrh	r3, [r4, #12]
 8028b86:	6020      	str	r0, [r4, #0]
 8028b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028b8c:	81a3      	strh	r3, [r4, #12]
 8028b8e:	9b00      	ldr	r3, [sp, #0]
 8028b90:	6163      	str	r3, [r4, #20]
 8028b92:	9b01      	ldr	r3, [sp, #4]
 8028b94:	6120      	str	r0, [r4, #16]
 8028b96:	b15b      	cbz	r3, 8028bb0 <__smakebuf_r+0x74>
 8028b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028b9c:	4630      	mov	r0, r6
 8028b9e:	f000 f95f 	bl	8028e60 <_isatty_r>
 8028ba2:	b128      	cbz	r0, 8028bb0 <__smakebuf_r+0x74>
 8028ba4:	89a3      	ldrh	r3, [r4, #12]
 8028ba6:	f023 0303 	bic.w	r3, r3, #3
 8028baa:	f043 0301 	orr.w	r3, r3, #1
 8028bae:	81a3      	strh	r3, [r4, #12]
 8028bb0:	89a3      	ldrh	r3, [r4, #12]
 8028bb2:	431d      	orrs	r5, r3
 8028bb4:	81a5      	strh	r5, [r4, #12]
 8028bb6:	e7cd      	b.n	8028b54 <__smakebuf_r+0x18>
 8028bb8:	08028959 	.word	0x08028959

08028bbc <__ascii_mbtowc>:
 8028bbc:	b082      	sub	sp, #8
 8028bbe:	b901      	cbnz	r1, 8028bc2 <__ascii_mbtowc+0x6>
 8028bc0:	a901      	add	r1, sp, #4
 8028bc2:	b142      	cbz	r2, 8028bd6 <__ascii_mbtowc+0x1a>
 8028bc4:	b14b      	cbz	r3, 8028bda <__ascii_mbtowc+0x1e>
 8028bc6:	7813      	ldrb	r3, [r2, #0]
 8028bc8:	600b      	str	r3, [r1, #0]
 8028bca:	7812      	ldrb	r2, [r2, #0]
 8028bcc:	1c10      	adds	r0, r2, #0
 8028bce:	bf18      	it	ne
 8028bd0:	2001      	movne	r0, #1
 8028bd2:	b002      	add	sp, #8
 8028bd4:	4770      	bx	lr
 8028bd6:	4610      	mov	r0, r2
 8028bd8:	e7fb      	b.n	8028bd2 <__ascii_mbtowc+0x16>
 8028bda:	f06f 0001 	mvn.w	r0, #1
 8028bde:	e7f8      	b.n	8028bd2 <__ascii_mbtowc+0x16>

08028be0 <_free_r>:
 8028be0:	b538      	push	{r3, r4, r5, lr}
 8028be2:	4605      	mov	r5, r0
 8028be4:	2900      	cmp	r1, #0
 8028be6:	d045      	beq.n	8028c74 <_free_r+0x94>
 8028be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028bec:	1f0c      	subs	r4, r1, #4
 8028bee:	2b00      	cmp	r3, #0
 8028bf0:	bfb8      	it	lt
 8028bf2:	18e4      	addlt	r4, r4, r3
 8028bf4:	f000 f956 	bl	8028ea4 <__malloc_lock>
 8028bf8:	4a1f      	ldr	r2, [pc, #124]	; (8028c78 <_free_r+0x98>)
 8028bfa:	6813      	ldr	r3, [r2, #0]
 8028bfc:	4610      	mov	r0, r2
 8028bfe:	b933      	cbnz	r3, 8028c0e <_free_r+0x2e>
 8028c00:	6063      	str	r3, [r4, #4]
 8028c02:	6014      	str	r4, [r2, #0]
 8028c04:	4628      	mov	r0, r5
 8028c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028c0a:	f000 b94c 	b.w	8028ea6 <__malloc_unlock>
 8028c0e:	42a3      	cmp	r3, r4
 8028c10:	d90c      	bls.n	8028c2c <_free_r+0x4c>
 8028c12:	6821      	ldr	r1, [r4, #0]
 8028c14:	1862      	adds	r2, r4, r1
 8028c16:	4293      	cmp	r3, r2
 8028c18:	bf04      	itt	eq
 8028c1a:	681a      	ldreq	r2, [r3, #0]
 8028c1c:	685b      	ldreq	r3, [r3, #4]
 8028c1e:	6063      	str	r3, [r4, #4]
 8028c20:	bf04      	itt	eq
 8028c22:	1852      	addeq	r2, r2, r1
 8028c24:	6022      	streq	r2, [r4, #0]
 8028c26:	6004      	str	r4, [r0, #0]
 8028c28:	e7ec      	b.n	8028c04 <_free_r+0x24>
 8028c2a:	4613      	mov	r3, r2
 8028c2c:	685a      	ldr	r2, [r3, #4]
 8028c2e:	b10a      	cbz	r2, 8028c34 <_free_r+0x54>
 8028c30:	42a2      	cmp	r2, r4
 8028c32:	d9fa      	bls.n	8028c2a <_free_r+0x4a>
 8028c34:	6819      	ldr	r1, [r3, #0]
 8028c36:	1858      	adds	r0, r3, r1
 8028c38:	42a0      	cmp	r0, r4
 8028c3a:	d10b      	bne.n	8028c54 <_free_r+0x74>
 8028c3c:	6820      	ldr	r0, [r4, #0]
 8028c3e:	4401      	add	r1, r0
 8028c40:	1858      	adds	r0, r3, r1
 8028c42:	4282      	cmp	r2, r0
 8028c44:	6019      	str	r1, [r3, #0]
 8028c46:	d1dd      	bne.n	8028c04 <_free_r+0x24>
 8028c48:	6810      	ldr	r0, [r2, #0]
 8028c4a:	6852      	ldr	r2, [r2, #4]
 8028c4c:	605a      	str	r2, [r3, #4]
 8028c4e:	4401      	add	r1, r0
 8028c50:	6019      	str	r1, [r3, #0]
 8028c52:	e7d7      	b.n	8028c04 <_free_r+0x24>
 8028c54:	d902      	bls.n	8028c5c <_free_r+0x7c>
 8028c56:	230c      	movs	r3, #12
 8028c58:	602b      	str	r3, [r5, #0]
 8028c5a:	e7d3      	b.n	8028c04 <_free_r+0x24>
 8028c5c:	6820      	ldr	r0, [r4, #0]
 8028c5e:	1821      	adds	r1, r4, r0
 8028c60:	428a      	cmp	r2, r1
 8028c62:	bf04      	itt	eq
 8028c64:	6811      	ldreq	r1, [r2, #0]
 8028c66:	6852      	ldreq	r2, [r2, #4]
 8028c68:	6062      	str	r2, [r4, #4]
 8028c6a:	bf04      	itt	eq
 8028c6c:	1809      	addeq	r1, r1, r0
 8028c6e:	6021      	streq	r1, [r4, #0]
 8028c70:	605c      	str	r4, [r3, #4]
 8028c72:	e7c7      	b.n	8028c04 <_free_r+0x24>
 8028c74:	bd38      	pop	{r3, r4, r5, pc}
 8028c76:	bf00      	nop
 8028c78:	2000a1c4 	.word	0x2000a1c4

08028c7c <_malloc_r>:
 8028c7c:	b570      	push	{r4, r5, r6, lr}
 8028c7e:	1ccd      	adds	r5, r1, #3
 8028c80:	f025 0503 	bic.w	r5, r5, #3
 8028c84:	3508      	adds	r5, #8
 8028c86:	2d0c      	cmp	r5, #12
 8028c88:	bf38      	it	cc
 8028c8a:	250c      	movcc	r5, #12
 8028c8c:	2d00      	cmp	r5, #0
 8028c8e:	4606      	mov	r6, r0
 8028c90:	db01      	blt.n	8028c96 <_malloc_r+0x1a>
 8028c92:	42a9      	cmp	r1, r5
 8028c94:	d903      	bls.n	8028c9e <_malloc_r+0x22>
 8028c96:	230c      	movs	r3, #12
 8028c98:	6033      	str	r3, [r6, #0]
 8028c9a:	2000      	movs	r0, #0
 8028c9c:	bd70      	pop	{r4, r5, r6, pc}
 8028c9e:	f000 f901 	bl	8028ea4 <__malloc_lock>
 8028ca2:	4a23      	ldr	r2, [pc, #140]	; (8028d30 <_malloc_r+0xb4>)
 8028ca4:	6814      	ldr	r4, [r2, #0]
 8028ca6:	4621      	mov	r1, r4
 8028ca8:	b991      	cbnz	r1, 8028cd0 <_malloc_r+0x54>
 8028caa:	4c22      	ldr	r4, [pc, #136]	; (8028d34 <_malloc_r+0xb8>)
 8028cac:	6823      	ldr	r3, [r4, #0]
 8028cae:	b91b      	cbnz	r3, 8028cb8 <_malloc_r+0x3c>
 8028cb0:	4630      	mov	r0, r6
 8028cb2:	f000 f841 	bl	8028d38 <_sbrk_r>
 8028cb6:	6020      	str	r0, [r4, #0]
 8028cb8:	4629      	mov	r1, r5
 8028cba:	4630      	mov	r0, r6
 8028cbc:	f000 f83c 	bl	8028d38 <_sbrk_r>
 8028cc0:	1c43      	adds	r3, r0, #1
 8028cc2:	d126      	bne.n	8028d12 <_malloc_r+0x96>
 8028cc4:	230c      	movs	r3, #12
 8028cc6:	6033      	str	r3, [r6, #0]
 8028cc8:	4630      	mov	r0, r6
 8028cca:	f000 f8ec 	bl	8028ea6 <__malloc_unlock>
 8028cce:	e7e4      	b.n	8028c9a <_malloc_r+0x1e>
 8028cd0:	680b      	ldr	r3, [r1, #0]
 8028cd2:	1b5b      	subs	r3, r3, r5
 8028cd4:	d41a      	bmi.n	8028d0c <_malloc_r+0x90>
 8028cd6:	2b0b      	cmp	r3, #11
 8028cd8:	d90f      	bls.n	8028cfa <_malloc_r+0x7e>
 8028cda:	600b      	str	r3, [r1, #0]
 8028cdc:	50cd      	str	r5, [r1, r3]
 8028cde:	18cc      	adds	r4, r1, r3
 8028ce0:	4630      	mov	r0, r6
 8028ce2:	f000 f8e0 	bl	8028ea6 <__malloc_unlock>
 8028ce6:	f104 000b 	add.w	r0, r4, #11
 8028cea:	1d23      	adds	r3, r4, #4
 8028cec:	f020 0007 	bic.w	r0, r0, #7
 8028cf0:	1ac3      	subs	r3, r0, r3
 8028cf2:	d01b      	beq.n	8028d2c <_malloc_r+0xb0>
 8028cf4:	425a      	negs	r2, r3
 8028cf6:	50e2      	str	r2, [r4, r3]
 8028cf8:	bd70      	pop	{r4, r5, r6, pc}
 8028cfa:	428c      	cmp	r4, r1
 8028cfc:	bf0d      	iteet	eq
 8028cfe:	6863      	ldreq	r3, [r4, #4]
 8028d00:	684b      	ldrne	r3, [r1, #4]
 8028d02:	6063      	strne	r3, [r4, #4]
 8028d04:	6013      	streq	r3, [r2, #0]
 8028d06:	bf18      	it	ne
 8028d08:	460c      	movne	r4, r1
 8028d0a:	e7e9      	b.n	8028ce0 <_malloc_r+0x64>
 8028d0c:	460c      	mov	r4, r1
 8028d0e:	6849      	ldr	r1, [r1, #4]
 8028d10:	e7ca      	b.n	8028ca8 <_malloc_r+0x2c>
 8028d12:	1cc4      	adds	r4, r0, #3
 8028d14:	f024 0403 	bic.w	r4, r4, #3
 8028d18:	42a0      	cmp	r0, r4
 8028d1a:	d005      	beq.n	8028d28 <_malloc_r+0xac>
 8028d1c:	1a21      	subs	r1, r4, r0
 8028d1e:	4630      	mov	r0, r6
 8028d20:	f000 f80a 	bl	8028d38 <_sbrk_r>
 8028d24:	3001      	adds	r0, #1
 8028d26:	d0cd      	beq.n	8028cc4 <_malloc_r+0x48>
 8028d28:	6025      	str	r5, [r4, #0]
 8028d2a:	e7d9      	b.n	8028ce0 <_malloc_r+0x64>
 8028d2c:	bd70      	pop	{r4, r5, r6, pc}
 8028d2e:	bf00      	nop
 8028d30:	2000a1c4 	.word	0x2000a1c4
 8028d34:	2000a1c8 	.word	0x2000a1c8

08028d38 <_sbrk_r>:
 8028d38:	b538      	push	{r3, r4, r5, lr}
 8028d3a:	4c06      	ldr	r4, [pc, #24]	; (8028d54 <_sbrk_r+0x1c>)
 8028d3c:	2300      	movs	r3, #0
 8028d3e:	4605      	mov	r5, r0
 8028d40:	4608      	mov	r0, r1
 8028d42:	6023      	str	r3, [r4, #0]
 8028d44:	f7fd ff7c 	bl	8026c40 <_sbrk>
 8028d48:	1c43      	adds	r3, r0, #1
 8028d4a:	d102      	bne.n	8028d52 <_sbrk_r+0x1a>
 8028d4c:	6823      	ldr	r3, [r4, #0]
 8028d4e:	b103      	cbz	r3, 8028d52 <_sbrk_r+0x1a>
 8028d50:	602b      	str	r3, [r5, #0]
 8028d52:	bd38      	pop	{r3, r4, r5, pc}
 8028d54:	2000ecf4 	.word	0x2000ecf4

08028d58 <__sread>:
 8028d58:	b510      	push	{r4, lr}
 8028d5a:	460c      	mov	r4, r1
 8028d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028d60:	f000 f8a2 	bl	8028ea8 <_read_r>
 8028d64:	2800      	cmp	r0, #0
 8028d66:	bfab      	itete	ge
 8028d68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8028d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8028d6c:	181b      	addge	r3, r3, r0
 8028d6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8028d72:	bfac      	ite	ge
 8028d74:	6563      	strge	r3, [r4, #84]	; 0x54
 8028d76:	81a3      	strhlt	r3, [r4, #12]
 8028d78:	bd10      	pop	{r4, pc}

08028d7a <__swrite>:
 8028d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d7e:	461f      	mov	r7, r3
 8028d80:	898b      	ldrh	r3, [r1, #12]
 8028d82:	05db      	lsls	r3, r3, #23
 8028d84:	4605      	mov	r5, r0
 8028d86:	460c      	mov	r4, r1
 8028d88:	4616      	mov	r6, r2
 8028d8a:	d505      	bpl.n	8028d98 <__swrite+0x1e>
 8028d8c:	2302      	movs	r3, #2
 8028d8e:	2200      	movs	r2, #0
 8028d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028d94:	f000 f874 	bl	8028e80 <_lseek_r>
 8028d98:	89a3      	ldrh	r3, [r4, #12]
 8028d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028da2:	81a3      	strh	r3, [r4, #12]
 8028da4:	4632      	mov	r2, r6
 8028da6:	463b      	mov	r3, r7
 8028da8:	4628      	mov	r0, r5
 8028daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028dae:	f000 b823 	b.w	8028df8 <_write_r>

08028db2 <__sseek>:
 8028db2:	b510      	push	{r4, lr}
 8028db4:	460c      	mov	r4, r1
 8028db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028dba:	f000 f861 	bl	8028e80 <_lseek_r>
 8028dbe:	1c43      	adds	r3, r0, #1
 8028dc0:	89a3      	ldrh	r3, [r4, #12]
 8028dc2:	bf15      	itete	ne
 8028dc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8028dc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8028dca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8028dce:	81a3      	strheq	r3, [r4, #12]
 8028dd0:	bf18      	it	ne
 8028dd2:	81a3      	strhne	r3, [r4, #12]
 8028dd4:	bd10      	pop	{r4, pc}

08028dd6 <__sclose>:
 8028dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028dda:	f000 b81f 	b.w	8028e1c <_close_r>

08028dde <__ascii_wctomb>:
 8028dde:	b149      	cbz	r1, 8028df4 <__ascii_wctomb+0x16>
 8028de0:	2aff      	cmp	r2, #255	; 0xff
 8028de2:	bf85      	ittet	hi
 8028de4:	238a      	movhi	r3, #138	; 0x8a
 8028de6:	6003      	strhi	r3, [r0, #0]
 8028de8:	700a      	strbls	r2, [r1, #0]
 8028dea:	f04f 30ff 	movhi.w	r0, #4294967295
 8028dee:	bf98      	it	ls
 8028df0:	2001      	movls	r0, #1
 8028df2:	4770      	bx	lr
 8028df4:	4608      	mov	r0, r1
 8028df6:	4770      	bx	lr

08028df8 <_write_r>:
 8028df8:	b538      	push	{r3, r4, r5, lr}
 8028dfa:	4c07      	ldr	r4, [pc, #28]	; (8028e18 <_write_r+0x20>)
 8028dfc:	4605      	mov	r5, r0
 8028dfe:	4608      	mov	r0, r1
 8028e00:	4611      	mov	r1, r2
 8028e02:	2200      	movs	r2, #0
 8028e04:	6022      	str	r2, [r4, #0]
 8028e06:	461a      	mov	r2, r3
 8028e08:	f7fd fefc 	bl	8026c04 <_write>
 8028e0c:	1c43      	adds	r3, r0, #1
 8028e0e:	d102      	bne.n	8028e16 <_write_r+0x1e>
 8028e10:	6823      	ldr	r3, [r4, #0]
 8028e12:	b103      	cbz	r3, 8028e16 <_write_r+0x1e>
 8028e14:	602b      	str	r3, [r5, #0]
 8028e16:	bd38      	pop	{r3, r4, r5, pc}
 8028e18:	2000ecf4 	.word	0x2000ecf4

08028e1c <_close_r>:
 8028e1c:	b538      	push	{r3, r4, r5, lr}
 8028e1e:	4c06      	ldr	r4, [pc, #24]	; (8028e38 <_close_r+0x1c>)
 8028e20:	2300      	movs	r3, #0
 8028e22:	4605      	mov	r5, r0
 8028e24:	4608      	mov	r0, r1
 8028e26:	6023      	str	r3, [r4, #0]
 8028e28:	f7fd ff38 	bl	8026c9c <_close>
 8028e2c:	1c43      	adds	r3, r0, #1
 8028e2e:	d102      	bne.n	8028e36 <_close_r+0x1a>
 8028e30:	6823      	ldr	r3, [r4, #0]
 8028e32:	b103      	cbz	r3, 8028e36 <_close_r+0x1a>
 8028e34:	602b      	str	r3, [r5, #0]
 8028e36:	bd38      	pop	{r3, r4, r5, pc}
 8028e38:	2000ecf4 	.word	0x2000ecf4

08028e3c <_fstat_r>:
 8028e3c:	b538      	push	{r3, r4, r5, lr}
 8028e3e:	4c07      	ldr	r4, [pc, #28]	; (8028e5c <_fstat_r+0x20>)
 8028e40:	2300      	movs	r3, #0
 8028e42:	4605      	mov	r5, r0
 8028e44:	4608      	mov	r0, r1
 8028e46:	4611      	mov	r1, r2
 8028e48:	6023      	str	r3, [r4, #0]
 8028e4a:	f7fd ff33 	bl	8026cb4 <_fstat>
 8028e4e:	1c43      	adds	r3, r0, #1
 8028e50:	d102      	bne.n	8028e58 <_fstat_r+0x1c>
 8028e52:	6823      	ldr	r3, [r4, #0]
 8028e54:	b103      	cbz	r3, 8028e58 <_fstat_r+0x1c>
 8028e56:	602b      	str	r3, [r5, #0]
 8028e58:	bd38      	pop	{r3, r4, r5, pc}
 8028e5a:	bf00      	nop
 8028e5c:	2000ecf4 	.word	0x2000ecf4

08028e60 <_isatty_r>:
 8028e60:	b538      	push	{r3, r4, r5, lr}
 8028e62:	4c06      	ldr	r4, [pc, #24]	; (8028e7c <_isatty_r+0x1c>)
 8028e64:	2300      	movs	r3, #0
 8028e66:	4605      	mov	r5, r0
 8028e68:	4608      	mov	r0, r1
 8028e6a:	6023      	str	r3, [r4, #0]
 8028e6c:	f7fd ff32 	bl	8026cd4 <_isatty>
 8028e70:	1c43      	adds	r3, r0, #1
 8028e72:	d102      	bne.n	8028e7a <_isatty_r+0x1a>
 8028e74:	6823      	ldr	r3, [r4, #0]
 8028e76:	b103      	cbz	r3, 8028e7a <_isatty_r+0x1a>
 8028e78:	602b      	str	r3, [r5, #0]
 8028e7a:	bd38      	pop	{r3, r4, r5, pc}
 8028e7c:	2000ecf4 	.word	0x2000ecf4

08028e80 <_lseek_r>:
 8028e80:	b538      	push	{r3, r4, r5, lr}
 8028e82:	4c07      	ldr	r4, [pc, #28]	; (8028ea0 <_lseek_r+0x20>)
 8028e84:	4605      	mov	r5, r0
 8028e86:	4608      	mov	r0, r1
 8028e88:	4611      	mov	r1, r2
 8028e8a:	2200      	movs	r2, #0
 8028e8c:	6022      	str	r2, [r4, #0]
 8028e8e:	461a      	mov	r2, r3
 8028e90:	f7fd ff2b 	bl	8026cea <_lseek>
 8028e94:	1c43      	adds	r3, r0, #1
 8028e96:	d102      	bne.n	8028e9e <_lseek_r+0x1e>
 8028e98:	6823      	ldr	r3, [r4, #0]
 8028e9a:	b103      	cbz	r3, 8028e9e <_lseek_r+0x1e>
 8028e9c:	602b      	str	r3, [r5, #0]
 8028e9e:	bd38      	pop	{r3, r4, r5, pc}
 8028ea0:	2000ecf4 	.word	0x2000ecf4

08028ea4 <__malloc_lock>:
 8028ea4:	4770      	bx	lr

08028ea6 <__malloc_unlock>:
 8028ea6:	4770      	bx	lr

08028ea8 <_read_r>:
 8028ea8:	b538      	push	{r3, r4, r5, lr}
 8028eaa:	4c07      	ldr	r4, [pc, #28]	; (8028ec8 <_read_r+0x20>)
 8028eac:	4605      	mov	r5, r0
 8028eae:	4608      	mov	r0, r1
 8028eb0:	4611      	mov	r1, r2
 8028eb2:	2200      	movs	r2, #0
 8028eb4:	6022      	str	r2, [r4, #0]
 8028eb6:	461a      	mov	r2, r3
 8028eb8:	f7fd fe87 	bl	8026bca <_read>
 8028ebc:	1c43      	adds	r3, r0, #1
 8028ebe:	d102      	bne.n	8028ec6 <_read_r+0x1e>
 8028ec0:	6823      	ldr	r3, [r4, #0]
 8028ec2:	b103      	cbz	r3, 8028ec6 <_read_r+0x1e>
 8028ec4:	602b      	str	r3, [r5, #0]
 8028ec6:	bd38      	pop	{r3, r4, r5, pc}
 8028ec8:	2000ecf4 	.word	0x2000ecf4

08028ecc <_init>:
 8028ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028ece:	bf00      	nop
 8028ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028ed2:	bc08      	pop	{r3}
 8028ed4:	469e      	mov	lr, r3
 8028ed6:	4770      	bx	lr

08028ed8 <_fini>:
 8028ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028eda:	bf00      	nop
 8028edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028ede:	bc08      	pop	{r3}
 8028ee0:	469e      	mov	lr, r3
 8028ee2:	4770      	bx	lr
