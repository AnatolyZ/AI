
AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .eeprom_emul  00000000  08008000  08008000  00040224  2**0
                  CONTENTS
  2 .text         000166a8  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004f5c  080266a8  080266a8  000366a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0802b604  0802b604  0003b604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0802b60c  0802b60c  0003b60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0802b610  0802b610  0003b610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000224  20000000  0802b614  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00040224  2**0
                  CONTENTS
  9 .bss          0000bda8  20000224  20000224  00040224  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  2000bfcc  2000bfcc  00040224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00050edc  00000000  00000000  00040254  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000098f1  00000000  00000000  00091130  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002318  00000000  00000000  0009aa28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002020  00000000  00000000  0009cd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00017a38  00000000  00000000  0009ed60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a6e6  00000000  00000000  000b6798  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000c0e7e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008ca8  00000000  00000000  000c0efc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000224 	.word	0x20000224
 801001c:	00000000 	.word	0x00000000
 8010020:	08026690 	.word	0x08026690

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000228 	.word	0x20000228
 801003c:	08026690 	.word	0x08026690

08010040 <strcmp>:
 8010040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010048:	2a01      	cmp	r2, #1
 801004a:	bf28      	it	cs
 801004c:	429a      	cmpcs	r2, r3
 801004e:	d0f7      	beq.n	8010040 <strcmp>
 8010050:	1ad0      	subs	r0, r2, r3
 8010052:	4770      	bx	lr

08010054 <strlen>:
 8010054:	4603      	mov	r3, r0
 8010056:	f813 2b01 	ldrb.w	r2, [r3], #1
 801005a:	2a00      	cmp	r2, #0
 801005c:	d1fb      	bne.n	8010056 <strlen+0x2>
 801005e:	1a18      	subs	r0, r3, r0
 8010060:	3801      	subs	r0, #1
 8010062:	4770      	bx	lr

08010064 <__aeabi_uldivmod>:
 8010064:	b953      	cbnz	r3, 801007c <__aeabi_uldivmod+0x18>
 8010066:	b94a      	cbnz	r2, 801007c <__aeabi_uldivmod+0x18>
 8010068:	2900      	cmp	r1, #0
 801006a:	bf08      	it	eq
 801006c:	2800      	cmpeq	r0, #0
 801006e:	bf1c      	itt	ne
 8010070:	f04f 31ff 	movne.w	r1, #4294967295
 8010074:	f04f 30ff 	movne.w	r0, #4294967295
 8010078:	f000 b97a 	b.w	8010370 <__aeabi_idiv0>
 801007c:	f1ad 0c08 	sub.w	ip, sp, #8
 8010080:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010084:	f000 f806 	bl	8010094 <__udivmoddi4>
 8010088:	f8dd e004 	ldr.w	lr, [sp, #4]
 801008c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010090:	b004      	add	sp, #16
 8010092:	4770      	bx	lr

08010094 <__udivmoddi4>:
 8010094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010098:	468c      	mov	ip, r1
 801009a:	460d      	mov	r5, r1
 801009c:	4604      	mov	r4, r0
 801009e:	9e08      	ldr	r6, [sp, #32]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d151      	bne.n	8010148 <__udivmoddi4+0xb4>
 80100a4:	428a      	cmp	r2, r1
 80100a6:	4617      	mov	r7, r2
 80100a8:	d96d      	bls.n	8010186 <__udivmoddi4+0xf2>
 80100aa:	fab2 fe82 	clz	lr, r2
 80100ae:	f1be 0f00 	cmp.w	lr, #0
 80100b2:	d00b      	beq.n	80100cc <__udivmoddi4+0x38>
 80100b4:	f1ce 0c20 	rsb	ip, lr, #32
 80100b8:	fa01 f50e 	lsl.w	r5, r1, lr
 80100bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80100c0:	fa02 f70e 	lsl.w	r7, r2, lr
 80100c4:	ea4c 0c05 	orr.w	ip, ip, r5
 80100c8:	fa00 f40e 	lsl.w	r4, r0, lr
 80100cc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80100d0:	0c25      	lsrs	r5, r4, #16
 80100d2:	fbbc f8fa 	udiv	r8, ip, sl
 80100d6:	fa1f f987 	uxth.w	r9, r7
 80100da:	fb0a cc18 	mls	ip, sl, r8, ip
 80100de:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80100e2:	fb08 f309 	mul.w	r3, r8, r9
 80100e6:	42ab      	cmp	r3, r5
 80100e8:	d90a      	bls.n	8010100 <__udivmoddi4+0x6c>
 80100ea:	19ed      	adds	r5, r5, r7
 80100ec:	f108 32ff 	add.w	r2, r8, #4294967295
 80100f0:	f080 8123 	bcs.w	801033a <__udivmoddi4+0x2a6>
 80100f4:	42ab      	cmp	r3, r5
 80100f6:	f240 8120 	bls.w	801033a <__udivmoddi4+0x2a6>
 80100fa:	f1a8 0802 	sub.w	r8, r8, #2
 80100fe:	443d      	add	r5, r7
 8010100:	1aed      	subs	r5, r5, r3
 8010102:	b2a4      	uxth	r4, r4
 8010104:	fbb5 f0fa 	udiv	r0, r5, sl
 8010108:	fb0a 5510 	mls	r5, sl, r0, r5
 801010c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010110:	fb00 f909 	mul.w	r9, r0, r9
 8010114:	45a1      	cmp	r9, r4
 8010116:	d909      	bls.n	801012c <__udivmoddi4+0x98>
 8010118:	19e4      	adds	r4, r4, r7
 801011a:	f100 33ff 	add.w	r3, r0, #4294967295
 801011e:	f080 810a 	bcs.w	8010336 <__udivmoddi4+0x2a2>
 8010122:	45a1      	cmp	r9, r4
 8010124:	f240 8107 	bls.w	8010336 <__udivmoddi4+0x2a2>
 8010128:	3802      	subs	r0, #2
 801012a:	443c      	add	r4, r7
 801012c:	eba4 0409 	sub.w	r4, r4, r9
 8010130:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010134:	2100      	movs	r1, #0
 8010136:	2e00      	cmp	r6, #0
 8010138:	d061      	beq.n	80101fe <__udivmoddi4+0x16a>
 801013a:	fa24 f40e 	lsr.w	r4, r4, lr
 801013e:	2300      	movs	r3, #0
 8010140:	6034      	str	r4, [r6, #0]
 8010142:	6073      	str	r3, [r6, #4]
 8010144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010148:	428b      	cmp	r3, r1
 801014a:	d907      	bls.n	801015c <__udivmoddi4+0xc8>
 801014c:	2e00      	cmp	r6, #0
 801014e:	d054      	beq.n	80101fa <__udivmoddi4+0x166>
 8010150:	2100      	movs	r1, #0
 8010152:	e886 0021 	stmia.w	r6, {r0, r5}
 8010156:	4608      	mov	r0, r1
 8010158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801015c:	fab3 f183 	clz	r1, r3
 8010160:	2900      	cmp	r1, #0
 8010162:	f040 808e 	bne.w	8010282 <__udivmoddi4+0x1ee>
 8010166:	42ab      	cmp	r3, r5
 8010168:	d302      	bcc.n	8010170 <__udivmoddi4+0xdc>
 801016a:	4282      	cmp	r2, r0
 801016c:	f200 80fa 	bhi.w	8010364 <__udivmoddi4+0x2d0>
 8010170:	1a84      	subs	r4, r0, r2
 8010172:	eb65 0503 	sbc.w	r5, r5, r3
 8010176:	2001      	movs	r0, #1
 8010178:	46ac      	mov	ip, r5
 801017a:	2e00      	cmp	r6, #0
 801017c:	d03f      	beq.n	80101fe <__udivmoddi4+0x16a>
 801017e:	e886 1010 	stmia.w	r6, {r4, ip}
 8010182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010186:	b912      	cbnz	r2, 801018e <__udivmoddi4+0xfa>
 8010188:	2701      	movs	r7, #1
 801018a:	fbb7 f7f2 	udiv	r7, r7, r2
 801018e:	fab7 fe87 	clz	lr, r7
 8010192:	f1be 0f00 	cmp.w	lr, #0
 8010196:	d134      	bne.n	8010202 <__udivmoddi4+0x16e>
 8010198:	1beb      	subs	r3, r5, r7
 801019a:	0c3a      	lsrs	r2, r7, #16
 801019c:	fa1f fc87 	uxth.w	ip, r7
 80101a0:	2101      	movs	r1, #1
 80101a2:	fbb3 f8f2 	udiv	r8, r3, r2
 80101a6:	0c25      	lsrs	r5, r4, #16
 80101a8:	fb02 3318 	mls	r3, r2, r8, r3
 80101ac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80101b0:	fb0c f308 	mul.w	r3, ip, r8
 80101b4:	42ab      	cmp	r3, r5
 80101b6:	d907      	bls.n	80101c8 <__udivmoddi4+0x134>
 80101b8:	19ed      	adds	r5, r5, r7
 80101ba:	f108 30ff 	add.w	r0, r8, #4294967295
 80101be:	d202      	bcs.n	80101c6 <__udivmoddi4+0x132>
 80101c0:	42ab      	cmp	r3, r5
 80101c2:	f200 80d1 	bhi.w	8010368 <__udivmoddi4+0x2d4>
 80101c6:	4680      	mov	r8, r0
 80101c8:	1aed      	subs	r5, r5, r3
 80101ca:	b2a3      	uxth	r3, r4
 80101cc:	fbb5 f0f2 	udiv	r0, r5, r2
 80101d0:	fb02 5510 	mls	r5, r2, r0, r5
 80101d4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80101d8:	fb0c fc00 	mul.w	ip, ip, r0
 80101dc:	45a4      	cmp	ip, r4
 80101de:	d907      	bls.n	80101f0 <__udivmoddi4+0x15c>
 80101e0:	19e4      	adds	r4, r4, r7
 80101e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80101e6:	d202      	bcs.n	80101ee <__udivmoddi4+0x15a>
 80101e8:	45a4      	cmp	ip, r4
 80101ea:	f200 80b8 	bhi.w	801035e <__udivmoddi4+0x2ca>
 80101ee:	4618      	mov	r0, r3
 80101f0:	eba4 040c 	sub.w	r4, r4, ip
 80101f4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80101f8:	e79d      	b.n	8010136 <__udivmoddi4+0xa2>
 80101fa:	4631      	mov	r1, r6
 80101fc:	4630      	mov	r0, r6
 80101fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010202:	f1ce 0420 	rsb	r4, lr, #32
 8010206:	fa05 f30e 	lsl.w	r3, r5, lr
 801020a:	fa07 f70e 	lsl.w	r7, r7, lr
 801020e:	fa20 f804 	lsr.w	r8, r0, r4
 8010212:	0c3a      	lsrs	r2, r7, #16
 8010214:	fa25 f404 	lsr.w	r4, r5, r4
 8010218:	ea48 0803 	orr.w	r8, r8, r3
 801021c:	fbb4 f1f2 	udiv	r1, r4, r2
 8010220:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8010224:	fb02 4411 	mls	r4, r2, r1, r4
 8010228:	fa1f fc87 	uxth.w	ip, r7
 801022c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8010230:	fb01 f30c 	mul.w	r3, r1, ip
 8010234:	42ab      	cmp	r3, r5
 8010236:	fa00 f40e 	lsl.w	r4, r0, lr
 801023a:	d909      	bls.n	8010250 <__udivmoddi4+0x1bc>
 801023c:	19ed      	adds	r5, r5, r7
 801023e:	f101 30ff 	add.w	r0, r1, #4294967295
 8010242:	f080 808a 	bcs.w	801035a <__udivmoddi4+0x2c6>
 8010246:	42ab      	cmp	r3, r5
 8010248:	f240 8087 	bls.w	801035a <__udivmoddi4+0x2c6>
 801024c:	3902      	subs	r1, #2
 801024e:	443d      	add	r5, r7
 8010250:	1aeb      	subs	r3, r5, r3
 8010252:	fa1f f588 	uxth.w	r5, r8
 8010256:	fbb3 f0f2 	udiv	r0, r3, r2
 801025a:	fb02 3310 	mls	r3, r2, r0, r3
 801025e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8010262:	fb00 f30c 	mul.w	r3, r0, ip
 8010266:	42ab      	cmp	r3, r5
 8010268:	d907      	bls.n	801027a <__udivmoddi4+0x1e6>
 801026a:	19ed      	adds	r5, r5, r7
 801026c:	f100 38ff 	add.w	r8, r0, #4294967295
 8010270:	d26f      	bcs.n	8010352 <__udivmoddi4+0x2be>
 8010272:	42ab      	cmp	r3, r5
 8010274:	d96d      	bls.n	8010352 <__udivmoddi4+0x2be>
 8010276:	3802      	subs	r0, #2
 8010278:	443d      	add	r5, r7
 801027a:	1aeb      	subs	r3, r5, r3
 801027c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8010280:	e78f      	b.n	80101a2 <__udivmoddi4+0x10e>
 8010282:	f1c1 0720 	rsb	r7, r1, #32
 8010286:	fa22 f807 	lsr.w	r8, r2, r7
 801028a:	408b      	lsls	r3, r1
 801028c:	fa05 f401 	lsl.w	r4, r5, r1
 8010290:	ea48 0303 	orr.w	r3, r8, r3
 8010294:	fa20 fe07 	lsr.w	lr, r0, r7
 8010298:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 801029c:	40fd      	lsrs	r5, r7
 801029e:	ea4e 0e04 	orr.w	lr, lr, r4
 80102a2:	fbb5 f9fc 	udiv	r9, r5, ip
 80102a6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80102aa:	fb0c 5519 	mls	r5, ip, r9, r5
 80102ae:	fa1f f883 	uxth.w	r8, r3
 80102b2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80102b6:	fb09 f408 	mul.w	r4, r9, r8
 80102ba:	42ac      	cmp	r4, r5
 80102bc:	fa02 f201 	lsl.w	r2, r2, r1
 80102c0:	fa00 fa01 	lsl.w	sl, r0, r1
 80102c4:	d908      	bls.n	80102d8 <__udivmoddi4+0x244>
 80102c6:	18ed      	adds	r5, r5, r3
 80102c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80102cc:	d243      	bcs.n	8010356 <__udivmoddi4+0x2c2>
 80102ce:	42ac      	cmp	r4, r5
 80102d0:	d941      	bls.n	8010356 <__udivmoddi4+0x2c2>
 80102d2:	f1a9 0902 	sub.w	r9, r9, #2
 80102d6:	441d      	add	r5, r3
 80102d8:	1b2d      	subs	r5, r5, r4
 80102da:	fa1f fe8e 	uxth.w	lr, lr
 80102de:	fbb5 f0fc 	udiv	r0, r5, ip
 80102e2:	fb0c 5510 	mls	r5, ip, r0, r5
 80102e6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80102ea:	fb00 f808 	mul.w	r8, r0, r8
 80102ee:	45a0      	cmp	r8, r4
 80102f0:	d907      	bls.n	8010302 <__udivmoddi4+0x26e>
 80102f2:	18e4      	adds	r4, r4, r3
 80102f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80102f8:	d229      	bcs.n	801034e <__udivmoddi4+0x2ba>
 80102fa:	45a0      	cmp	r8, r4
 80102fc:	d927      	bls.n	801034e <__udivmoddi4+0x2ba>
 80102fe:	3802      	subs	r0, #2
 8010300:	441c      	add	r4, r3
 8010302:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010306:	eba4 0408 	sub.w	r4, r4, r8
 801030a:	fba0 8902 	umull	r8, r9, r0, r2
 801030e:	454c      	cmp	r4, r9
 8010310:	46c6      	mov	lr, r8
 8010312:	464d      	mov	r5, r9
 8010314:	d315      	bcc.n	8010342 <__udivmoddi4+0x2ae>
 8010316:	d012      	beq.n	801033e <__udivmoddi4+0x2aa>
 8010318:	b156      	cbz	r6, 8010330 <__udivmoddi4+0x29c>
 801031a:	ebba 030e 	subs.w	r3, sl, lr
 801031e:	eb64 0405 	sbc.w	r4, r4, r5
 8010322:	fa04 f707 	lsl.w	r7, r4, r7
 8010326:	40cb      	lsrs	r3, r1
 8010328:	431f      	orrs	r7, r3
 801032a:	40cc      	lsrs	r4, r1
 801032c:	6037      	str	r7, [r6, #0]
 801032e:	6074      	str	r4, [r6, #4]
 8010330:	2100      	movs	r1, #0
 8010332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010336:	4618      	mov	r0, r3
 8010338:	e6f8      	b.n	801012c <__udivmoddi4+0x98>
 801033a:	4690      	mov	r8, r2
 801033c:	e6e0      	b.n	8010100 <__udivmoddi4+0x6c>
 801033e:	45c2      	cmp	sl, r8
 8010340:	d2ea      	bcs.n	8010318 <__udivmoddi4+0x284>
 8010342:	ebb8 0e02 	subs.w	lr, r8, r2
 8010346:	eb69 0503 	sbc.w	r5, r9, r3
 801034a:	3801      	subs	r0, #1
 801034c:	e7e4      	b.n	8010318 <__udivmoddi4+0x284>
 801034e:	4628      	mov	r0, r5
 8010350:	e7d7      	b.n	8010302 <__udivmoddi4+0x26e>
 8010352:	4640      	mov	r0, r8
 8010354:	e791      	b.n	801027a <__udivmoddi4+0x1e6>
 8010356:	4681      	mov	r9, r0
 8010358:	e7be      	b.n	80102d8 <__udivmoddi4+0x244>
 801035a:	4601      	mov	r1, r0
 801035c:	e778      	b.n	8010250 <__udivmoddi4+0x1bc>
 801035e:	3802      	subs	r0, #2
 8010360:	443c      	add	r4, r7
 8010362:	e745      	b.n	80101f0 <__udivmoddi4+0x15c>
 8010364:	4608      	mov	r0, r1
 8010366:	e708      	b.n	801017a <__udivmoddi4+0xe6>
 8010368:	f1a8 0802 	sub.w	r8, r8, #2
 801036c:	443d      	add	r5, r7
 801036e:	e72b      	b.n	80101c8 <__udivmoddi4+0x134>

08010370 <__aeabi_idiv0>:
 8010370:	4770      	bx	lr
 8010372:	bf00      	nop

08010374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010378:	4a0e      	ldr	r2, [pc, #56]	; (80103b4 <HAL_Init+0x40>)
 801037a:	4b0e      	ldr	r3, [pc, #56]	; (80103b4 <HAL_Init+0x40>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010384:	4a0b      	ldr	r2, [pc, #44]	; (80103b4 <HAL_Init+0x40>)
 8010386:	4b0b      	ldr	r3, [pc, #44]	; (80103b4 <HAL_Init+0x40>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801038e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010390:	4a08      	ldr	r2, [pc, #32]	; (80103b4 <HAL_Init+0x40>)
 8010392:	4b08      	ldr	r3, [pc, #32]	; (80103b4 <HAL_Init+0x40>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801039a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801039c:	2003      	movs	r0, #3
 801039e:	f000 f90e 	bl	80105be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80103a2:	2000      	movs	r0, #0
 80103a4:	f015 f82a 	bl	80253fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80103a8:	f014 fffc 	bl	80253a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80103ac:	2300      	movs	r3, #0
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	40023c00 	.word	0x40023c00

080103b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80103b8:	b480      	push	{r7}
 80103ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80103bc:	4b06      	ldr	r3, [pc, #24]	; (80103d8 <HAL_IncTick+0x20>)
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	461a      	mov	r2, r3
 80103c2:	4b06      	ldr	r3, [pc, #24]	; (80103dc <HAL_IncTick+0x24>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4413      	add	r3, r2
 80103c8:	4a04      	ldr	r2, [pc, #16]	; (80103dc <HAL_IncTick+0x24>)
 80103ca:	6013      	str	r3, [r2, #0]
}
 80103cc:	bf00      	nop
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop
 80103d8:	20000000 	.word	0x20000000
 80103dc:	2000455c 	.word	0x2000455c

080103e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80103e0:	b480      	push	{r7}
 80103e2:	af00      	add	r7, sp, #0
  return uwTick;
 80103e4:	4b03      	ldr	r3, [pc, #12]	; (80103f4 <HAL_GetTick+0x14>)
 80103e6:	681b      	ldr	r3, [r3, #0]
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	2000455c 	.word	0x2000455c

080103f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010400:	f7ff ffee 	bl	80103e0 <HAL_GetTick>
 8010404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010410:	d005      	beq.n	801041e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010412:	4b09      	ldr	r3, [pc, #36]	; (8010438 <HAL_Delay+0x40>)
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	461a      	mov	r2, r3
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	4413      	add	r3, r2
 801041c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801041e:	bf00      	nop
 8010420:	f7ff ffde 	bl	80103e0 <HAL_GetTick>
 8010424:	4602      	mov	r2, r0
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	1ad2      	subs	r2, r2, r3
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	429a      	cmp	r2, r3
 801042e:	d3f7      	bcc.n	8010420 <HAL_Delay+0x28>
  {
  }
}
 8010430:	bf00      	nop
 8010432:	3710      	adds	r7, #16
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	20000000 	.word	0x20000000

0801043c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801043c:	b480      	push	{r7}
 801043e:	b085      	sub	sp, #20
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f003 0307 	and.w	r3, r3, #7
 801044a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801044c:	4b0c      	ldr	r3, [pc, #48]	; (8010480 <NVIC_SetPriorityGrouping+0x44>)
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010458:	4013      	ands	r3, r2
 801045a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801046c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801046e:	4a04      	ldr	r2, [pc, #16]	; (8010480 <NVIC_SetPriorityGrouping+0x44>)
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	60d3      	str	r3, [r2, #12]
}
 8010474:	bf00      	nop
 8010476:	3714      	adds	r7, #20
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr
 8010480:	e000ed00 	.word	0xe000ed00

08010484 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8010484:	b480      	push	{r7}
 8010486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010488:	4b04      	ldr	r3, [pc, #16]	; (801049c <NVIC_GetPriorityGrouping+0x18>)
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	0a1b      	lsrs	r3, r3, #8
 801048e:	f003 0307 	and.w	r3, r3, #7
}
 8010492:	4618      	mov	r0, r3
 8010494:	46bd      	mov	sp, r7
 8010496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049a:	4770      	bx	lr
 801049c:	e000ed00 	.word	0xe000ed00

080104a0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80104aa:	4909      	ldr	r1, [pc, #36]	; (80104d0 <NVIC_EnableIRQ+0x30>)
 80104ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104b0:	095b      	lsrs	r3, r3, #5
 80104b2:	79fa      	ldrb	r2, [r7, #7]
 80104b4:	f002 021f 	and.w	r2, r2, #31
 80104b8:	2001      	movs	r0, #1
 80104ba:	fa00 f202 	lsl.w	r2, r0, r2
 80104be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80104c2:	bf00      	nop
 80104c4:	370c      	adds	r7, #12
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	e000e100 	.word	0xe000e100

080104d4 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	4603      	mov	r3, r0
 80104dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80104de:	4909      	ldr	r1, [pc, #36]	; (8010504 <NVIC_DisableIRQ+0x30>)
 80104e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104e4:	095b      	lsrs	r3, r3, #5
 80104e6:	79fa      	ldrb	r2, [r7, #7]
 80104e8:	f002 021f 	and.w	r2, r2, #31
 80104ec:	2001      	movs	r0, #1
 80104ee:	fa00 f202 	lsl.w	r2, r0, r2
 80104f2:	3320      	adds	r3, #32
 80104f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80104f8:	bf00      	nop
 80104fa:	370c      	adds	r7, #12
 80104fc:	46bd      	mov	sp, r7
 80104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010502:	4770      	bx	lr
 8010504:	e000e100 	.word	0xe000e100

08010508 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010508:	b480      	push	{r7}
 801050a:	b083      	sub	sp, #12
 801050c:	af00      	add	r7, sp, #0
 801050e:	4603      	mov	r3, r0
 8010510:	6039      	str	r1, [r7, #0]
 8010512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8010514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010518:	2b00      	cmp	r3, #0
 801051a:	da0b      	bge.n	8010534 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801051c:	490d      	ldr	r1, [pc, #52]	; (8010554 <NVIC_SetPriority+0x4c>)
 801051e:	79fb      	ldrb	r3, [r7, #7]
 8010520:	f003 030f 	and.w	r3, r3, #15
 8010524:	3b04      	subs	r3, #4
 8010526:	683a      	ldr	r2, [r7, #0]
 8010528:	b2d2      	uxtb	r2, r2
 801052a:	0112      	lsls	r2, r2, #4
 801052c:	b2d2      	uxtb	r2, r2
 801052e:	440b      	add	r3, r1
 8010530:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010532:	e009      	b.n	8010548 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010534:	4908      	ldr	r1, [pc, #32]	; (8010558 <NVIC_SetPriority+0x50>)
 8010536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801053a:	683a      	ldr	r2, [r7, #0]
 801053c:	b2d2      	uxtb	r2, r2
 801053e:	0112      	lsls	r2, r2, #4
 8010540:	b2d2      	uxtb	r2, r2
 8010542:	440b      	add	r3, r1
 8010544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010548:	bf00      	nop
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr
 8010554:	e000ed00 	.word	0xe000ed00
 8010558:	e000e100 	.word	0xe000e100

0801055c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801055c:	b480      	push	{r7}
 801055e:	b089      	sub	sp, #36	; 0x24
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f003 0307 	and.w	r3, r3, #7
 801056e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	f1c3 0307 	rsb	r3, r3, #7
 8010576:	2b04      	cmp	r3, #4
 8010578:	bf28      	it	cs
 801057a:	2304      	movcs	r3, #4
 801057c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	3304      	adds	r3, #4
 8010582:	2b06      	cmp	r3, #6
 8010584:	d902      	bls.n	801058c <NVIC_EncodePriority+0x30>
 8010586:	69fb      	ldr	r3, [r7, #28]
 8010588:	3b03      	subs	r3, #3
 801058a:	e000      	b.n	801058e <NVIC_EncodePriority+0x32>
 801058c:	2300      	movs	r3, #0
 801058e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010590:	2201      	movs	r2, #1
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	fa02 f303 	lsl.w	r3, r2, r3
 8010598:	1e5a      	subs	r2, r3, #1
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	401a      	ands	r2, r3
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80105a2:	2101      	movs	r1, #1
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	fa01 f303 	lsl.w	r3, r1, r3
 80105aa:	1e59      	subs	r1, r3, #1
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80105b0:	4313      	orrs	r3, r2
         );
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3724      	adds	r7, #36	; 0x24
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr

080105be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b082      	sub	sp, #8
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f7ff ff38 	bl	801043c <NVIC_SetPriorityGrouping>
}
 80105cc:	bf00      	nop
 80105ce:	3708      	adds	r7, #8
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b086      	sub	sp, #24
 80105d8:	af00      	add	r7, sp, #0
 80105da:	4603      	mov	r3, r0
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	607a      	str	r2, [r7, #4]
 80105e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80105e2:	2300      	movs	r3, #0
 80105e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80105e6:	f7ff ff4d 	bl	8010484 <NVIC_GetPriorityGrouping>
 80105ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80105ec:	687a      	ldr	r2, [r7, #4]
 80105ee:	68b9      	ldr	r1, [r7, #8]
 80105f0:	6978      	ldr	r0, [r7, #20]
 80105f2:	f7ff ffb3 	bl	801055c <NVIC_EncodePriority>
 80105f6:	4602      	mov	r2, r0
 80105f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105fc:	4611      	mov	r1, r2
 80105fe:	4618      	mov	r0, r3
 8010600:	f7ff ff82 	bl	8010508 <NVIC_SetPriority>
}
 8010604:	bf00      	nop
 8010606:	3718      	adds	r7, #24
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}

0801060c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	4603      	mov	r3, r0
 8010614:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801061a:	4618      	mov	r0, r3
 801061c:	f7ff ff40 	bl	80104a0 <NVIC_EnableIRQ>
}
 8010620:	bf00      	nop
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	4603      	mov	r3, r0
 8010630:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8010632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010636:	4618      	mov	r0, r3
 8010638:	f7ff ff4c 	bl	80104d4 <NVIC_DisableIRQ>
}
 801063c:	bf00      	nop
 801063e:	3708      	adds	r7, #8
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b086      	sub	sp, #24
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801064c:	2300      	movs	r3, #0
 801064e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8010650:	f7ff fec6 	bl	80103e0 <HAL_GetTick>
 8010654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d101      	bne.n	8010660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801065c:	2301      	movs	r3, #1
 801065e:	e099      	b.n	8010794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2202      	movs	r2, #2
 801066c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	6812      	ldr	r2, [r2, #0]
 8010678:	6812      	ldr	r2, [r2, #0]
 801067a:	f022 0201 	bic.w	r2, r2, #1
 801067e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010680:	e00f      	b.n	80106a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010682:	f7ff fead 	bl	80103e0 <HAL_GetTick>
 8010686:	4602      	mov	r2, r0
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	1ad3      	subs	r3, r2, r3
 801068c:	2b05      	cmp	r3, #5
 801068e:	d908      	bls.n	80106a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2220      	movs	r2, #32
 8010694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2203      	movs	r2, #3
 801069a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801069e:	2303      	movs	r3, #3
 80106a0:	e078      	b.n	8010794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f003 0301 	and.w	r3, r3, #1
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d1e8      	bne.n	8010682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80106b8:	697a      	ldr	r2, [r7, #20]
 80106ba:	4b38      	ldr	r3, [pc, #224]	; (801079c <HAL_DMA_Init+0x158>)
 80106bc:	4013      	ands	r3, r2
 80106be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	685a      	ldr	r2, [r3, #4]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80106ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	691b      	ldr	r3, [r3, #16]
 80106d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80106da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	699b      	ldr	r3, [r3, #24]
 80106e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80106e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6a1b      	ldr	r3, [r3, #32]
 80106ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80106ee:	697a      	ldr	r2, [r7, #20]
 80106f0:	4313      	orrs	r3, r2
 80106f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f8:	2b04      	cmp	r3, #4
 80106fa:	d107      	bne.n	801070c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010704:	4313      	orrs	r3, r2
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	4313      	orrs	r3, r2
 801070a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	697a      	ldr	r2, [r7, #20]
 8010712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	695b      	ldr	r3, [r3, #20]
 801071a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	f023 0307 	bic.w	r3, r3, #7
 8010722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010728:	697a      	ldr	r2, [r7, #20]
 801072a:	4313      	orrs	r3, r2
 801072c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010732:	2b04      	cmp	r3, #4
 8010734:	d117      	bne.n	8010766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801073a:	697a      	ldr	r2, [r7, #20]
 801073c:	4313      	orrs	r3, r2
 801073e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010744:	2b00      	cmp	r3, #0
 8010746:	d00e      	beq.n	8010766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f000 fae5 	bl	8010d18 <DMA_CheckFifoParam>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	d008      	beq.n	8010766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2240      	movs	r2, #64	; 0x40
 8010758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2201      	movs	r2, #1
 801075e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8010762:	2301      	movs	r3, #1
 8010764:	e016      	b.n	8010794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	697a      	ldr	r2, [r7, #20]
 801076c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 fa9c 	bl	8010cac <DMA_CalcBaseAndBitshift>
 8010774:	4603      	mov	r3, r0
 8010776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801077c:	223f      	movs	r2, #63	; 0x3f
 801077e:	409a      	lsls	r2, r3
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2200      	movs	r2, #0
 8010788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2201      	movs	r2, #1
 801078e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8010792:	2300      	movs	r3, #0
}
 8010794:	4618      	mov	r0, r3
 8010796:	3718      	adds	r7, #24
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	f010803f 	.word	0xf010803f

080107a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b084      	sub	sp, #16
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d101      	bne.n	80107b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80107ae:	2301      	movs	r3, #1
 80107b0:	e03e      	b.n	8010830 <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	2b02      	cmp	r3, #2
 80107bc:	d101      	bne.n	80107c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80107be:	2302      	movs	r3, #2
 80107c0:	e036      	b.n	8010830 <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	6812      	ldr	r2, [r2, #0]
 80107ca:	6812      	ldr	r2, [r2, #0]
 80107cc:	f022 0201 	bic.w	r2, r2, #1
 80107d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	2200      	movs	r2, #0
 80107d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	2200      	movs	r2, #0
 80107e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2200      	movs	r2, #0
 80107e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	2200      	movs	r2, #0
 80107f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2200      	movs	r2, #0
 80107f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	2221      	movs	r2, #33	; 0x21
 8010800:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 fa52 	bl	8010cac <DMA_CalcBaseAndBitshift>
 8010808:	4603      	mov	r3, r0
 801080a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010810:	223f      	movs	r2, #63	; 0x3f
 8010812:	409a      	lsls	r2, r3
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2200      	movs	r2, #0
 8010822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2200      	movs	r2, #0
 801082a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801082e:	2300      	movs	r3, #0
}
 8010830:	4618      	mov	r0, r3
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b086      	sub	sp, #24
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	607a      	str	r2, [r7, #4]
 8010844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801084e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010856:	2b01      	cmp	r3, #1
 8010858:	d101      	bne.n	801085e <HAL_DMA_Start_IT+0x26>
 801085a:	2302      	movs	r3, #2
 801085c:	e048      	b.n	80108f0 <HAL_DMA_Start_IT+0xb8>
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2201      	movs	r2, #1
 8010862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801086c:	b2db      	uxtb	r3, r3
 801086e:	2b01      	cmp	r3, #1
 8010870:	d137      	bne.n	80108e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2202      	movs	r2, #2
 8010876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2200      	movs	r2, #0
 801087e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	68b9      	ldr	r1, [r7, #8]
 8010886:	68f8      	ldr	r0, [r7, #12]
 8010888:	f000 f9e2 	bl	8010c50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010890:	223f      	movs	r2, #63	; 0x3f
 8010892:	409a      	lsls	r2, r3
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	68fa      	ldr	r2, [r7, #12]
 801089e:	6812      	ldr	r2, [r2, #0]
 80108a0:	6812      	ldr	r2, [r2, #0]
 80108a2:	f042 0216 	orr.w	r2, r2, #22
 80108a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	6812      	ldr	r2, [r2, #0]
 80108b0:	6952      	ldr	r2, [r2, #20]
 80108b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80108b6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d007      	beq.n	80108d0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	68fa      	ldr	r2, [r7, #12]
 80108c6:	6812      	ldr	r2, [r2, #0]
 80108c8:	6812      	ldr	r2, [r2, #0]
 80108ca:	f042 0208 	orr.w	r2, r2, #8
 80108ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	6812      	ldr	r2, [r2, #0]
 80108d8:	6812      	ldr	r2, [r2, #0]
 80108da:	f042 0201 	orr.w	r2, r2, #1
 80108de:	601a      	str	r2, [r3, #0]
 80108e0:	e005      	b.n	80108ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2200      	movs	r2, #0
 80108e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80108ea:	2302      	movs	r3, #2
 80108ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80108ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3718      	adds	r7, #24
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010906:	b2db      	uxtb	r3, r3
 8010908:	2b02      	cmp	r3, #2
 801090a:	d004      	beq.n	8010916 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2280      	movs	r2, #128	; 0x80
 8010910:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8010912:	2301      	movs	r3, #1
 8010914:	e00c      	b.n	8010930 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2205      	movs	r2, #5
 801091a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	6812      	ldr	r2, [r2, #0]
 8010926:	6812      	ldr	r2, [r2, #0]
 8010928:	f022 0201 	bic.w	r2, r2, #1
 801092c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801092e:	2300      	movs	r3, #0
}
 8010930:	4618      	mov	r0, r3
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b086      	sub	sp, #24
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8010944:	2300      	movs	r3, #0
 8010946:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010948:	4b92      	ldr	r3, [pc, #584]	; (8010b94 <HAL_DMA_IRQHandler+0x258>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4a92      	ldr	r2, [pc, #584]	; (8010b98 <HAL_DMA_IRQHandler+0x25c>)
 801094e:	fba2 2303 	umull	r2, r3, r2, r3
 8010952:	0a9b      	lsrs	r3, r3, #10
 8010954:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801095a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010966:	2208      	movs	r2, #8
 8010968:	409a      	lsls	r2, r3
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	4013      	ands	r3, r2
 801096e:	2b00      	cmp	r3, #0
 8010970:	d01a      	beq.n	80109a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f003 0304 	and.w	r3, r3, #4
 801097c:	2b00      	cmp	r3, #0
 801097e:	d013      	beq.n	80109a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	6812      	ldr	r2, [r2, #0]
 8010988:	6812      	ldr	r2, [r2, #0]
 801098a:	f022 0204 	bic.w	r2, r2, #4
 801098e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010994:	2208      	movs	r2, #8
 8010996:	409a      	lsls	r2, r3
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109a0:	f043 0201 	orr.w	r2, r3, #1
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109ac:	2201      	movs	r2, #1
 80109ae:	409a      	lsls	r2, r3
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	4013      	ands	r3, r2
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d012      	beq.n	80109de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	695b      	ldr	r3, [r3, #20]
 80109be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00b      	beq.n	80109de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109ca:	2201      	movs	r2, #1
 80109cc:	409a      	lsls	r2, r3
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109d6:	f043 0202 	orr.w	r2, r3, #2
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109e2:	2204      	movs	r2, #4
 80109e4:	409a      	lsls	r2, r3
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	4013      	ands	r3, r2
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d012      	beq.n	8010a14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f003 0302 	and.w	r3, r3, #2
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00b      	beq.n	8010a14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a00:	2204      	movs	r2, #4
 8010a02:	409a      	lsls	r2, r3
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a0c:	f043 0204 	orr.w	r2, r3, #4
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a18:	2210      	movs	r2, #16
 8010a1a:	409a      	lsls	r2, r3
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	4013      	ands	r3, r2
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d043      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f003 0308 	and.w	r3, r3, #8
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d03c      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a36:	2210      	movs	r2, #16
 8010a38:	409a      	lsls	r2, r3
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d018      	beq.n	8010a7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d108      	bne.n	8010a6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d024      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	4798      	blx	r3
 8010a6a:	e01f      	b.n	8010aac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d01b      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	4798      	blx	r3
 8010a7c:	e016      	b.n	8010aac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d107      	bne.n	8010a9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	6812      	ldr	r2, [r2, #0]
 8010a94:	6812      	ldr	r2, [r2, #0]
 8010a96:	f022 0208 	bic.w	r2, r2, #8
 8010a9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d003      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ab0:	2220      	movs	r2, #32
 8010ab2:	409a      	lsls	r2, r3
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	4013      	ands	r3, r2
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f000 808e 	beq.w	8010bda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f003 0310 	and.w	r3, r3, #16
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	f000 8086 	beq.w	8010bda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ad2:	2220      	movs	r2, #32
 8010ad4:	409a      	lsls	r2, r3
 8010ad6:	693b      	ldr	r3, [r7, #16]
 8010ad8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	2b05      	cmp	r3, #5
 8010ae4:	d136      	bne.n	8010b54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	6812      	ldr	r2, [r2, #0]
 8010aee:	6812      	ldr	r2, [r2, #0]
 8010af0:	f022 0216 	bic.w	r2, r2, #22
 8010af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	6812      	ldr	r2, [r2, #0]
 8010afe:	6952      	ldr	r2, [r2, #20]
 8010b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010b04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d103      	bne.n	8010b16 <HAL_DMA_IRQHandler+0x1da>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d007      	beq.n	8010b26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	6812      	ldr	r2, [r2, #0]
 8010b1e:	6812      	ldr	r2, [r2, #0]
 8010b20:	f022 0208 	bic.w	r2, r2, #8
 8010b24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b2a:	223f      	movs	r2, #63	; 0x3f
 8010b2c:	409a      	lsls	r2, r3
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2200      	movs	r2, #0
 8010b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d07d      	beq.n	8010c46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	4798      	blx	r3
        }
        return;
 8010b52:	e078      	b.n	8010c46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d01c      	beq.n	8010b9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d108      	bne.n	8010b82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d030      	beq.n	8010bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	4798      	blx	r3
 8010b80:	e02b      	b.n	8010bda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d027      	beq.n	8010bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	4798      	blx	r3
 8010b92:	e022      	b.n	8010bda <HAL_DMA_IRQHandler+0x29e>
 8010b94:	20000050 	.word	0x20000050
 8010b98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d10f      	bne.n	8010bca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	6812      	ldr	r2, [r2, #0]
 8010bb2:	6812      	ldr	r2, [r2, #0]
 8010bb4:	f022 0210 	bic.w	r2, r2, #16
 8010bb8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2201      	movs	r2, #1
 8010bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d003      	beq.n	8010bda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d032      	beq.n	8010c48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010be6:	f003 0301 	and.w	r3, r3, #1
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d022      	beq.n	8010c34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2205      	movs	r2, #5
 8010bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	6812      	ldr	r2, [r2, #0]
 8010bfe:	6812      	ldr	r2, [r2, #0]
 8010c00:	f022 0201 	bic.w	r2, r2, #1
 8010c04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	60bb      	str	r3, [r7, #8]
 8010c0c:	697a      	ldr	r2, [r7, #20]
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d807      	bhi.n	8010c22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f003 0301 	and.w	r3, r3, #1
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d1f2      	bne.n	8010c06 <HAL_DMA_IRQHandler+0x2ca>
 8010c20:	e000      	b.n	8010c24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8010c22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2200      	movs	r2, #0
 8010c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d005      	beq.n	8010c48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	4798      	blx	r3
 8010c44:	e000      	b.n	8010c48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8010c46:	bf00      	nop
    }
  }
}
 8010c48:	3718      	adds	r7, #24
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop

08010c50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b085      	sub	sp, #20
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	60f8      	str	r0, [r7, #12]
 8010c58:	60b9      	str	r1, [r7, #8]
 8010c5a:	607a      	str	r2, [r7, #4]
 8010c5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	68fa      	ldr	r2, [r7, #12]
 8010c64:	6812      	ldr	r2, [r2, #0]
 8010c66:	6812      	ldr	r2, [r2, #0]
 8010c68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010c6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	683a      	ldr	r2, [r7, #0]
 8010c74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	689b      	ldr	r3, [r3, #8]
 8010c7a:	2b40      	cmp	r3, #64	; 0x40
 8010c7c:	d108      	bne.n	8010c90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8010c8e:	e007      	b.n	8010ca0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	68ba      	ldr	r2, [r7, #8]
 8010c96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	60da      	str	r2, [r3, #12]
}
 8010ca0:	bf00      	nop
 8010ca2:	3714      	adds	r7, #20
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010caa:	4770      	bx	lr

08010cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	3b10      	subs	r3, #16
 8010cbc:	4a14      	ldr	r2, [pc, #80]	; (8010d10 <DMA_CalcBaseAndBitshift+0x64>)
 8010cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8010cc2:	091b      	lsrs	r3, r3, #4
 8010cc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8010cc6:	4a13      	ldr	r2, [pc, #76]	; (8010d14 <DMA_CalcBaseAndBitshift+0x68>)
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	4413      	add	r3, r2
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	461a      	mov	r2, r3
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2b03      	cmp	r3, #3
 8010cd8:	d909      	bls.n	8010cee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010ce2:	f023 0303 	bic.w	r3, r3, #3
 8010ce6:	1d1a      	adds	r2, r3, #4
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	659a      	str	r2, [r3, #88]	; 0x58
 8010cec:	e007      	b.n	8010cfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010cf6:	f023 0303 	bic.w	r3, r3, #3
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr
 8010d0e:	bf00      	nop
 8010d10:	aaaaaaab 	.word	0xaaaaaaab
 8010d14:	08029088 	.word	0x08029088

08010d18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b085      	sub	sp, #20
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010d20:	2300      	movs	r3, #0
 8010d22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	699b      	ldr	r3, [r3, #24]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d11f      	bne.n	8010d72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	2b03      	cmp	r3, #3
 8010d36:	d855      	bhi.n	8010de4 <DMA_CheckFifoParam+0xcc>
 8010d38:	a201      	add	r2, pc, #4	; (adr r2, 8010d40 <DMA_CheckFifoParam+0x28>)
 8010d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d3e:	bf00      	nop
 8010d40:	08010d51 	.word	0x08010d51
 8010d44:	08010d63 	.word	0x08010d63
 8010d48:	08010d51 	.word	0x08010d51
 8010d4c:	08010de5 	.word	0x08010de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d045      	beq.n	8010de8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010d60:	e042      	b.n	8010de8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010d6a:	d13f      	bne.n	8010dec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010d70:	e03c      	b.n	8010dec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	699b      	ldr	r3, [r3, #24]
 8010d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d7a:	d121      	bne.n	8010dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	2b03      	cmp	r3, #3
 8010d80:	d836      	bhi.n	8010df0 <DMA_CheckFifoParam+0xd8>
 8010d82:	a201      	add	r2, pc, #4	; (adr r2, 8010d88 <DMA_CheckFifoParam+0x70>)
 8010d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d88:	08010d99 	.word	0x08010d99
 8010d8c:	08010d9f 	.word	0x08010d9f
 8010d90:	08010d99 	.word	0x08010d99
 8010d94:	08010db1 	.word	0x08010db1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8010d98:	2301      	movs	r3, #1
 8010d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8010d9c:	e02f      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d024      	beq.n	8010df4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8010daa:	2301      	movs	r3, #1
 8010dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010dae:	e021      	b.n	8010df4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010db8:	d11e      	bne.n	8010df8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8010dba:	2301      	movs	r3, #1
 8010dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8010dbe:	e01b      	b.n	8010df8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	2b02      	cmp	r3, #2
 8010dc4:	d902      	bls.n	8010dcc <DMA_CheckFifoParam+0xb4>
 8010dc6:	2b03      	cmp	r3, #3
 8010dc8:	d003      	beq.n	8010dd2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8010dca:	e018      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	73fb      	strb	r3, [r7, #15]
      break;
 8010dd0:	e015      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d00e      	beq.n	8010dfc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8010dde:	2301      	movs	r3, #1
 8010de0:	73fb      	strb	r3, [r7, #15]
      break;
 8010de2:	e00b      	b.n	8010dfc <DMA_CheckFifoParam+0xe4>
      break;
 8010de4:	bf00      	nop
 8010de6:	e00a      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010de8:	bf00      	nop
 8010dea:	e008      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010dec:	bf00      	nop
 8010dee:	e006      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010df0:	bf00      	nop
 8010df2:	e004      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010df4:	bf00      	nop
 8010df6:	e002      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;   
 8010df8:	bf00      	nop
 8010dfa:	e000      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010dfc:	bf00      	nop
    }
  } 
  
  return status; 
 8010dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3714      	adds	r7, #20
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b088      	sub	sp, #32
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8010e14:	2300      	movs	r3, #0
 8010e16:	61fb      	str	r3, [r7, #28]
 8010e18:	2300      	movs	r3, #0
 8010e1a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8010e1c:	4baa      	ldr	r3, [pc, #680]	; (80110c8 <HAL_ETH_Init+0x2bc>)
 8010e1e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8010e20:	2300      	movs	r3, #0
 8010e22:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8010e24:	2300      	movs	r3, #0
 8010e26:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d101      	bne.n	8010e32 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	e185      	b.n	801113e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e38:	b2db      	uxtb	r3, r3
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d106      	bne.n	8010e4c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2200      	movs	r2, #0
 8010e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f012 ffb0 	bl	8023dac <HAL_ETH_MspInit>
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	60bb      	str	r3, [r7, #8]
 8010e50:	4a9e      	ldr	r2, [pc, #632]	; (80110cc <HAL_ETH_Init+0x2c0>)
 8010e52:	4b9e      	ldr	r3, [pc, #632]	; (80110cc <HAL_ETH_Init+0x2c0>)
 8010e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e5a:	6453      	str	r3, [r2, #68]	; 0x44
 8010e5c:	4b9b      	ldr	r3, [pc, #620]	; (80110cc <HAL_ETH_Init+0x2c0>)
 8010e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e64:	60bb      	str	r3, [r7, #8]
 8010e66:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8010e68:	4a99      	ldr	r2, [pc, #612]	; (80110d0 <HAL_ETH_Init+0x2c4>)
 8010e6a:	4b99      	ldr	r3, [pc, #612]	; (80110d0 <HAL_ETH_Init+0x2c4>)
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010e72:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8010e74:	4996      	ldr	r1, [pc, #600]	; (80110d0 <HAL_ETH_Init+0x2c4>)
 8010e76:	4b96      	ldr	r3, [pc, #600]	; (80110d0 <HAL_ETH_Init+0x2c4>)
 8010e78:	685a      	ldr	r2, [r3, #4]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6a1b      	ldr	r3, [r3, #32]
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	6812      	ldr	r2, [r2, #0]
 8010e8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010e8e:	6812      	ldr	r2, [r2, #0]
 8010e90:	f042 0201 	orr.w	r2, r2, #1
 8010e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e98:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8010e9a:	f7ff faa1 	bl	80103e0 <HAL_GetTick>
 8010e9e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010ea0:	e011      	b.n	8010ec6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8010ea2:	f7ff fa9d 	bl	80103e0 <HAL_GetTick>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010eb0:	d909      	bls.n	8010ec6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2203      	movs	r2, #3
 8010eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8010ec2:	2303      	movs	r3, #3
 8010ec4:	e13b      	b.n	801113e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f003 0301 	and.w	r3, r3, #1
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d1e4      	bne.n	8010ea2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	691b      	ldr	r3, [r3, #16]
 8010ede:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	f023 031c 	bic.w	r3, r3, #28
 8010ee6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8010ee8:	f002 f8fe 	bl	80130e8 <HAL_RCC_GetHCLKFreq>
 8010eec:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8010eee:	69bb      	ldr	r3, [r7, #24]
 8010ef0:	4a78      	ldr	r2, [pc, #480]	; (80110d4 <HAL_ETH_Init+0x2c8>)
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d908      	bls.n	8010f08 <HAL_ETH_Init+0xfc>
 8010ef6:	69bb      	ldr	r3, [r7, #24]
 8010ef8:	4a77      	ldr	r2, [pc, #476]	; (80110d8 <HAL_ETH_Init+0x2cc>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d804      	bhi.n	8010f08 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	f043 0308 	orr.w	r3, r3, #8
 8010f04:	61fb      	str	r3, [r7, #28]
 8010f06:	e027      	b.n	8010f58 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	4a73      	ldr	r2, [pc, #460]	; (80110d8 <HAL_ETH_Init+0x2cc>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d908      	bls.n	8010f22 <HAL_ETH_Init+0x116>
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	4a72      	ldr	r2, [pc, #456]	; (80110dc <HAL_ETH_Init+0x2d0>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d804      	bhi.n	8010f22 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	f043 030c 	orr.w	r3, r3, #12
 8010f1e:	61fb      	str	r3, [r7, #28]
 8010f20:	e01a      	b.n	8010f58 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8010f22:	69bb      	ldr	r3, [r7, #24]
 8010f24:	4a6d      	ldr	r2, [pc, #436]	; (80110dc <HAL_ETH_Init+0x2d0>)
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d903      	bls.n	8010f32 <HAL_ETH_Init+0x126>
 8010f2a:	69bb      	ldr	r3, [r7, #24]
 8010f2c:	4a6c      	ldr	r2, [pc, #432]	; (80110e0 <HAL_ETH_Init+0x2d4>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d911      	bls.n	8010f56 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	4a6a      	ldr	r2, [pc, #424]	; (80110e0 <HAL_ETH_Init+0x2d4>)
 8010f36:	4293      	cmp	r3, r2
 8010f38:	d908      	bls.n	8010f4c <HAL_ETH_Init+0x140>
 8010f3a:	69bb      	ldr	r3, [r7, #24]
 8010f3c:	4a69      	ldr	r2, [pc, #420]	; (80110e4 <HAL_ETH_Init+0x2d8>)
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d804      	bhi.n	8010f4c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	f043 0304 	orr.w	r3, r3, #4
 8010f48:	61fb      	str	r3, [r7, #28]
 8010f4a:	e005      	b.n	8010f58 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	f043 0310 	orr.w	r3, r3, #16
 8010f52:	61fb      	str	r3, [r7, #28]
 8010f54:	e000      	b.n	8010f58 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8010f56:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	69fa      	ldr	r2, [r7, #28]
 8010f5e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8010f60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010f64:	2100      	movs	r1, #0
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f000 fc19 	bl	801179e <HAL_ETH_WritePHYRegister>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d00b      	beq.n	8010f8a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8010f72:	2301      	movs	r3, #1
 8010f74:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8010f76:	6939      	ldr	r1, [r7, #16]
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 fca5 	bl	80118c8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8010f86:	2301      	movs	r3, #1
 8010f88:	e0d9      	b.n	801113e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8010f8a:	20ff      	movs	r0, #255	; 0xff
 8010f8c:	f7ff fa34 	bl	80103f8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f000 80a7 	beq.w	80110e8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8010f9a:	f7ff fa21 	bl	80103e0 <HAL_GetTick>
 8010f9e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8010fa0:	f107 030c 	add.w	r3, r7, #12
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	2101      	movs	r1, #1
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f000 fb90 	bl	80116ce <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8010fae:	f7ff fa17 	bl	80103e0 <HAL_GetTick>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	1ad3      	subs	r3, r2, r3
 8010fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d90f      	bls.n	8010fe0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8010fc4:	6939      	ldr	r1, [r7, #16]
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fc7e 	bl	80118c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2201      	movs	r2, #1
 8010fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8010fdc:	2303      	movs	r3, #3
 8010fde:	e0ae      	b.n	801113e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f003 0304 	and.w	r3, r3, #4
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d0da      	beq.n	8010fa0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8010fea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010fee:	2100      	movs	r1, #0
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f000 fbd4 	bl	801179e <HAL_ETH_WritePHYRegister>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d00b      	beq.n	8011014 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8011000:	6939      	ldr	r1, [r7, #16]
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 fc60 	bl	80118c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2201      	movs	r2, #1
 801100c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8011010:	2301      	movs	r3, #1
 8011012:	e094      	b.n	801113e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8011014:	f7ff f9e4 	bl	80103e0 <HAL_GetTick>
 8011018:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 801101a:	f107 030c 	add.w	r3, r7, #12
 801101e:	461a      	mov	r2, r3
 8011020:	2101      	movs	r1, #1
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f000 fb53 	bl	80116ce <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8011028:	f7ff f9da 	bl	80103e0 <HAL_GetTick>
 801102c:	4602      	mov	r2, r0
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	1ad3      	subs	r3, r2, r3
 8011032:	f241 3288 	movw	r2, #5000	; 0x1388
 8011036:	4293      	cmp	r3, r2
 8011038:	d90f      	bls.n	801105a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 801103a:	2301      	movs	r3, #1
 801103c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 801103e:	6939      	ldr	r1, [r7, #16]
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 fc41 	bl	80118c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2201      	movs	r2, #1
 801104a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8011056:	2303      	movs	r3, #3
 8011058:	e071      	b.n	801113e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f003 0320 	and.w	r3, r3, #32
 8011060:	2b00      	cmp	r3, #0
 8011062:	d0da      	beq.n	801101a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8011064:	f107 030c 	add.w	r3, r7, #12
 8011068:	461a      	mov	r2, r3
 801106a:	2110      	movs	r1, #16
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f000 fb2e 	bl	80116ce <HAL_ETH_ReadPHYRegister>
 8011072:	4603      	mov	r3, r0
 8011074:	2b00      	cmp	r3, #0
 8011076:	d00b      	beq.n	8011090 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8011078:	2301      	movs	r3, #1
 801107a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 801107c:	6939      	ldr	r1, [r7, #16]
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 fc22 	bl	80118c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2201      	movs	r2, #1
 8011088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 801108c:	2301      	movs	r3, #1
 801108e:	e056      	b.n	801113e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	f003 0304 	and.w	r3, r3, #4
 8011096:	2b00      	cmp	r3, #0
 8011098:	d004      	beq.n	80110a4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110a0:	60da      	str	r2, [r3, #12]
 80110a2:	e002      	b.n	80110aa <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2200      	movs	r2, #0
 80110a8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	f003 0302 	and.w	r3, r3, #2
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d003      	beq.n	80110bc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2200      	movs	r2, #0
 80110b8:	609a      	str	r2, [r3, #8]
 80110ba:	e037      	b.n	801112c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80110c2:	609a      	str	r2, [r3, #8]
 80110c4:	e032      	b.n	801112c <HAL_ETH_Init+0x320>
 80110c6:	bf00      	nop
 80110c8:	03938700 	.word	0x03938700
 80110cc:	40023800 	.word	0x40023800
 80110d0:	40013800 	.word	0x40013800
 80110d4:	01312cff 	.word	0x01312cff
 80110d8:	02160ebf 	.word	0x02160ebf
 80110dc:	039386ff 	.word	0x039386ff
 80110e0:	05f5e0ff 	.word	0x05f5e0ff
 80110e4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	08db      	lsrs	r3, r3, #3
 80110ee:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	085b      	lsrs	r3, r3, #1
 80110f6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80110f8:	4313      	orrs	r3, r2
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	461a      	mov	r2, r3
 80110fe:	2100      	movs	r1, #0
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f000 fb4c 	bl	801179e <HAL_ETH_WritePHYRegister>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00b      	beq.n	8011124 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 801110c:	2301      	movs	r3, #1
 801110e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8011110:	6939      	ldr	r1, [r7, #16]
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f000 fbd8 	bl	80118c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2201      	movs	r2, #1
 801111c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8011120:	2301      	movs	r3, #1
 8011122:	e00c      	b.n	801113e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8011124:	f640 70ff 	movw	r0, #4095	; 0xfff
 8011128:	f7ff f966 	bl	80103f8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 801112c:	6939      	ldr	r1, [r7, #16]
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f000 fbca 	bl	80118c8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2201      	movs	r2, #1
 8011138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 801113c:	2300      	movs	r3, #0
}
 801113e:	4618      	mov	r0, r3
 8011140:	3720      	adds	r7, #32
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop

08011148 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8011148:	b480      	push	{r7}
 801114a:	b087      	sub	sp, #28
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
 8011154:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8011156:	2300      	movs	r3, #0
 8011158:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011160:	2b01      	cmp	r3, #1
 8011162:	d101      	bne.n	8011168 <HAL_ETH_DMATxDescListInit+0x20>
 8011164:	2302      	movs	r3, #2
 8011166:	e052      	b.n	801120e <HAL_ETH_DMATxDescListInit+0xc6>
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2201      	movs	r2, #1
 801116c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2202      	movs	r2, #2
 8011174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	68ba      	ldr	r2, [r7, #8]
 801117c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 801117e:	2300      	movs	r3, #0
 8011180:	617b      	str	r3, [r7, #20]
 8011182:	e030      	b.n	80111e6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	015b      	lsls	r3, r3, #5
 8011188:	68ba      	ldr	r2, [r7, #8]
 801118a:	4413      	add	r3, r2
 801118c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011194:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801119c:	fb02 f303 	mul.w	r3, r2, r3
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	4413      	add	r3, r2
 80111a4:	461a      	mov	r2, r3
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	69db      	ldr	r3, [r3, #28]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d105      	bne.n	80111be <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	1e5a      	subs	r2, r3, #1
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d908      	bls.n	80111da <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	3301      	adds	r3, #1
 80111cc:	015b      	lsls	r3, r3, #5
 80111ce:	68ba      	ldr	r2, [r7, #8]
 80111d0:	4413      	add	r3, r2
 80111d2:	461a      	mov	r2, r3
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	60da      	str	r2, [r3, #12]
 80111d8:	e002      	b.n	80111e0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80111da:	68ba      	ldr	r2, [r7, #8]
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	3301      	adds	r3, #1
 80111e4:	617b      	str	r3, [r7, #20]
 80111e6:	697a      	ldr	r2, [r7, #20]
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d3ca      	bcc.n	8011184 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	68ba      	ldr	r2, [r7, #8]
 80111f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111f8:	3310      	adds	r3, #16
 80111fa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	2201      	movs	r2, #1
 8011200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 801120c:	2300      	movs	r3, #0
}
 801120e:	4618      	mov	r0, r3
 8011210:	371c      	adds	r7, #28
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr

0801121a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 801121a:	b480      	push	{r7}
 801121c:	b087      	sub	sp, #28
 801121e:	af00      	add	r7, sp, #0
 8011220:	60f8      	str	r0, [r7, #12]
 8011222:	60b9      	str	r1, [r7, #8]
 8011224:	607a      	str	r2, [r7, #4]
 8011226:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8011228:	2300      	movs	r3, #0
 801122a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011232:	2b01      	cmp	r3, #1
 8011234:	d101      	bne.n	801123a <HAL_ETH_DMARxDescListInit+0x20>
 8011236:	2302      	movs	r3, #2
 8011238:	e056      	b.n	80112e8 <HAL_ETH_DMARxDescListInit+0xce>
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2201      	movs	r2, #1
 801123e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2202      	movs	r2, #2
 8011246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	68ba      	ldr	r2, [r7, #8]
 801124e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8011250:	2300      	movs	r3, #0
 8011252:	617b      	str	r3, [r7, #20]
 8011254:	e034      	b.n	80112c0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	015b      	lsls	r3, r3, #5
 801125a:	68ba      	ldr	r2, [r7, #8]
 801125c:	4413      	add	r3, r2
 801125e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011266:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 801126e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011276:	fb02 f303 	mul.w	r3, r2, r3
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	4413      	add	r3, r2
 801127e:	461a      	mov	r2, r3
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	699b      	ldr	r3, [r3, #24]
 8011288:	2b01      	cmp	r3, #1
 801128a:	d105      	bne.n	8011298 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	1e5a      	subs	r2, r3, #1
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	429a      	cmp	r2, r3
 80112a0:	d908      	bls.n	80112b4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	3301      	adds	r3, #1
 80112a6:	015b      	lsls	r3, r3, #5
 80112a8:	68ba      	ldr	r2, [r7, #8]
 80112aa:	4413      	add	r3, r2
 80112ac:	461a      	mov	r2, r3
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	60da      	str	r2, [r3, #12]
 80112b2:	e002      	b.n	80112ba <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80112b4:	68ba      	ldr	r2, [r7, #8]
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	3301      	adds	r3, #1
 80112be:	617b      	str	r3, [r7, #20]
 80112c0:	697a      	ldr	r2, [r7, #20]
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d3c6      	bcc.n	8011256 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112d2:	330c      	adds	r3, #12
 80112d4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2201      	movs	r2, #1
 80112da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2200      	movs	r2, #0
 80112e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80112e6:	2300      	movs	r3, #0
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	371c      	adds	r7, #28
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr

080112f4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b087      	sub	sp, #28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80112fe:	2300      	movs	r3, #0
 8011300:	617b      	str	r3, [r7, #20]
 8011302:	2300      	movs	r3, #0
 8011304:	60fb      	str	r3, [r7, #12]
 8011306:	2300      	movs	r3, #0
 8011308:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011310:	2b01      	cmp	r3, #1
 8011312:	d101      	bne.n	8011318 <HAL_ETH_TransmitFrame+0x24>
 8011314:	2302      	movs	r3, #2
 8011316:	e0cd      	b.n	80114b4 <HAL_ETH_TransmitFrame+0x1c0>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2201      	movs	r2, #1
 801131c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2202      	movs	r2, #2
 8011324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d109      	bne.n	8011342 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2201      	movs	r2, #1
 8011332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2200      	movs	r2, #0
 801133a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 801133e:	2301      	movs	r3, #1
 8011340:	e0b8      	b.n	80114b4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	da09      	bge.n	8011360 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2212      	movs	r2, #18
 8011350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2200      	movs	r2, #0
 8011358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 801135c:	2301      	movs	r3, #1
 801135e:	e0a9      	b.n	80114b4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011366:	4293      	cmp	r3, r2
 8011368:	d915      	bls.n	8011396 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	4a54      	ldr	r2, [pc, #336]	; (80114c0 <HAL_ETH_TransmitFrame+0x1cc>)
 801136e:	fba2 2303 	umull	r2, r3, r2, r3
 8011372:	0a9b      	lsrs	r3, r3, #10
 8011374:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8011376:	683a      	ldr	r2, [r7, #0]
 8011378:	4b51      	ldr	r3, [pc, #324]	; (80114c0 <HAL_ETH_TransmitFrame+0x1cc>)
 801137a:	fba3 1302 	umull	r1, r3, r3, r2
 801137e:	0a9b      	lsrs	r3, r3, #10
 8011380:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8011384:	fb01 f303 	mul.w	r3, r1, r3
 8011388:	1ad3      	subs	r3, r2, r3
 801138a:	2b00      	cmp	r3, #0
 801138c:	d005      	beq.n	801139a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	3301      	adds	r3, #1
 8011392:	617b      	str	r3, [r7, #20]
 8011394:	e001      	b.n	801139a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8011396:	2301      	movs	r3, #1
 8011398:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	2b01      	cmp	r3, #1
 801139e:	d11c      	bne.n	80113da <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a4:	687a      	ldr	r2, [r7, #4]
 80113a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80113a8:	6812      	ldr	r2, [r2, #0]
 80113aa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80113ae:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b4:	683a      	ldr	r2, [r7, #0]
 80113b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80113ba:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c0:	687a      	ldr	r2, [r7, #4]
 80113c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80113c4:	6812      	ldr	r2, [r2, #0]
 80113c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80113ca:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	461a      	mov	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80113d8:	e04b      	b.n	8011472 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80113da:	2300      	movs	r3, #0
 80113dc:	613b      	str	r3, [r7, #16]
 80113de:	e044      	b.n	801146a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80113e8:	6812      	ldr	r2, [r2, #0]
 80113ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80113ee:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d107      	bne.n	8011406 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113fa:	687a      	ldr	r2, [r7, #4]
 80113fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80113fe:	6812      	ldr	r2, [r2, #0]
 8011400:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011404:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801140a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801140e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	1e5a      	subs	r2, r3, #1
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	429a      	cmp	r2, r3
 8011418:	d116      	bne.n	8011448 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011422:	6812      	ldr	r2, [r2, #0]
 8011424:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8011428:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	4a25      	ldr	r2, [pc, #148]	; (80114c4 <HAL_ETH_TransmitFrame+0x1d0>)
 801142e:	fb02 f203 	mul.w	r2, r2, r3
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	4413      	add	r3, r2
 8011436:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801143a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011440:	68fa      	ldr	r2, [r7, #12]
 8011442:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011446:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801144c:	687a      	ldr	r2, [r7, #4]
 801144e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011450:	6812      	ldr	r2, [r2, #0]
 8011452:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011456:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	461a      	mov	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	3301      	adds	r3, #1
 8011468:	613b      	str	r3, [r7, #16]
 801146a:	693a      	ldr	r2, [r7, #16]
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	429a      	cmp	r2, r3
 8011470:	d3b6      	bcc.n	80113e0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801147a:	3314      	adds	r3, #20
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f003 0304 	and.w	r3, r3, #4
 8011482:	2b00      	cmp	r3, #0
 8011484:	d00d      	beq.n	80114a2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801148e:	3314      	adds	r3, #20
 8011490:	2204      	movs	r2, #4
 8011492:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801149c:	3304      	adds	r3, #4
 801149e:	2200      	movs	r2, #0
 80114a0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2201      	movs	r2, #1
 80114a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2200      	movs	r2, #0
 80114ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80114b2:	2300      	movs	r3, #0
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	371c      	adds	r7, #28
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr
 80114c0:	ac02b00b 	.word	0xac02b00b
 80114c4:	fffffa0c 	.word	0xfffffa0c

080114c8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80114d0:	2300      	movs	r3, #0
 80114d2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114da:	2b01      	cmp	r3, #1
 80114dc:	d101      	bne.n	80114e2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80114de:	2302      	movs	r3, #2
 80114e0:	e074      	b.n	80115cc <HAL_ETH_GetReceivedFrame_IT+0x104>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2201      	movs	r2, #1
 80114e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2202      	movs	r2, #2
 80114ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80114f2:	e05a      	b.n	80115aa <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	3301      	adds	r3, #1
 80114f8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011508:	d10d      	bne.n	8011526 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2201      	movs	r2, #1
 8011516:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	461a      	mov	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	629a      	str	r2, [r3, #40]	; 0x28
 8011524:	e041      	b.n	80115aa <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011530:	2b00      	cmp	r3, #0
 8011532:	d10b      	bne.n	801154c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011538:	1c5a      	adds	r2, r3, #1
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011542:	68db      	ldr	r3, [r3, #12]
 8011544:	461a      	mov	r2, r3
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	629a      	str	r2, [r3, #40]	; 0x28
 801154a:	e02e      	b.n	80115aa <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011558:	1c5a      	adds	r2, r3, #1
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011562:	2b01      	cmp	r3, #1
 8011564:	d103      	bne.n	801156e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	0c1b      	lsrs	r3, r3, #16
 8011576:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801157a:	1f1a      	subs	r2, r3, #4
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011584:	689a      	ldr	r2, [r3, #8]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	461a      	mov	r2, r3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2201      	movs	r2, #1
 801159a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2200      	movs	r2, #0
 80115a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80115a6:	2300      	movs	r3, #0
 80115a8:	e010      	b.n	80115cc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	db02      	blt.n	80115ba <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2b03      	cmp	r3, #3
 80115b8:	d99c      	bls.n	80114f4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2201      	movs	r2, #1
 80115be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2200      	movs	r2, #0
 80115c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80115ca:	2301      	movs	r3, #1
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3714      	adds	r7, #20
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b082      	sub	sp, #8
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80115e8:	3314      	adds	r3, #20
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115f0:	2b40      	cmp	r3, #64	; 0x40
 80115f2:	d112      	bne.n	801161a <HAL_ETH_IRQHandler+0x42>
  {
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f012 fc53 	bl	8023ea0 <HAL_ETH_RxCpltCallback>
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011602:	3314      	adds	r3, #20
 8011604:	2240      	movs	r2, #64	; 0x40
 8011606:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2201      	movs	r2, #1
 801160c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2200      	movs	r2, #0
 8011614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011618:	e01b      	b.n	8011652 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011622:	3314      	adds	r3, #20
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	f003 0301 	and.w	r3, r3, #1
 801162a:	2b01      	cmp	r3, #1
 801162c:	d111      	bne.n	8011652 <HAL_ETH_IRQHandler+0x7a>
  {
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f000 f839 	bl	80116a6 <HAL_ETH_TxCpltCallback>
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801163c:	3314      	adds	r3, #20
 801163e:	2201      	movs	r2, #1
 8011640:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2201      	movs	r2, #1
 8011646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801165a:	3314      	adds	r3, #20
 801165c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011660:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801166a:	3314      	adds	r3, #20
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011676:	d112      	bne.n	801169e <HAL_ETH_IRQHandler+0xc6>
  {
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f000 f81e 	bl	80116ba <HAL_ETH_ErrorCallback>

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011686:	3314      	adds	r3, #20
 8011688:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801168c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2201      	movs	r2, #1
 8011692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2200      	movs	r2, #0
 801169a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 801169e:	bf00      	nop
 80116a0:	3708      	adds	r7, #8
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}

080116a6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80116a6:	b480      	push	{r7}
 80116a8:	b083      	sub	sp, #12
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80116ae:	bf00      	nop
 80116b0:	370c      	adds	r7, #12
 80116b2:	46bd      	mov	sp, r7
 80116b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b8:	4770      	bx	lr

080116ba <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80116ba:	b480      	push	{r7}
 80116bc:	b083      	sub	sp, #12
 80116be:	af00      	add	r7, sp, #0
 80116c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80116c2:	bf00      	nop
 80116c4:	370c      	adds	r7, #12
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr

080116ce <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80116ce:	b580      	push	{r7, lr}
 80116d0:	b086      	sub	sp, #24
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	60f8      	str	r0, [r7, #12]
 80116d6:	460b      	mov	r3, r1
 80116d8:	607a      	str	r2, [r7, #4]
 80116da:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80116dc:	2300      	movs	r3, #0
 80116de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80116e0:	2300      	movs	r3, #0
 80116e2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	2b82      	cmp	r3, #130	; 0x82
 80116ee:	d101      	bne.n	80116f4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80116f0:	2302      	movs	r3, #2
 80116f2:	e050      	b.n	8011796 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2282      	movs	r2, #130	; 0x82
 80116f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	691b      	ldr	r3, [r3, #16]
 8011702:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	f003 031c 	and.w	r3, r3, #28
 801170a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	8a1b      	ldrh	r3, [r3, #16]
 8011710:	02db      	lsls	r3, r3, #11
 8011712:	b29b      	uxth	r3, r3
 8011714:	697a      	ldr	r2, [r7, #20]
 8011716:	4313      	orrs	r3, r2
 8011718:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 801171a:	897b      	ldrh	r3, [r7, #10]
 801171c:	019b      	lsls	r3, r3, #6
 801171e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8011722:	697a      	ldr	r2, [r7, #20]
 8011724:	4313      	orrs	r3, r2
 8011726:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	f023 0302 	bic.w	r3, r3, #2
 801172e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	f043 0301 	orr.w	r3, r3, #1
 8011736:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	697a      	ldr	r2, [r7, #20]
 801173e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8011740:	f7fe fe4e 	bl	80103e0 <HAL_GetTick>
 8011744:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011746:	e015      	b.n	8011774 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8011748:	f7fe fe4a 	bl	80103e0 <HAL_GetTick>
 801174c:	4602      	mov	r2, r0
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011756:	d309      	bcc.n	801176c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	2201      	movs	r2, #1
 801175c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2200      	movs	r2, #0
 8011764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8011768:	2303      	movs	r3, #3
 801176a:	e014      	b.n	8011796 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	691b      	ldr	r3, [r3, #16]
 8011772:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	f003 0301 	and.w	r3, r3, #1
 801177a:	2b00      	cmp	r3, #0
 801177c:	d1e4      	bne.n	8011748 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	695b      	ldr	r3, [r3, #20]
 8011784:	b29b      	uxth	r3, r3
 8011786:	461a      	mov	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2201      	movs	r2, #1
 8011790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8011794:	2300      	movs	r3, #0
}
 8011796:	4618      	mov	r0, r3
 8011798:	3718      	adds	r7, #24
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 801179e:	b580      	push	{r7, lr}
 80117a0:	b086      	sub	sp, #24
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	60f8      	str	r0, [r7, #12]
 80117a6:	460b      	mov	r3, r1
 80117a8:	607a      	str	r2, [r7, #4]
 80117aa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80117ac:	2300      	movs	r3, #0
 80117ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80117b0:	2300      	movs	r3, #0
 80117b2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	2b42      	cmp	r3, #66	; 0x42
 80117be:	d101      	bne.n	80117c4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80117c0:	2302      	movs	r3, #2
 80117c2:	e04e      	b.n	8011862 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2242      	movs	r2, #66	; 0x42
 80117c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	691b      	ldr	r3, [r3, #16]
 80117d2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	f003 031c 	and.w	r3, r3, #28
 80117da:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	8a1b      	ldrh	r3, [r3, #16]
 80117e0:	02db      	lsls	r3, r3, #11
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	697a      	ldr	r2, [r7, #20]
 80117e6:	4313      	orrs	r3, r2
 80117e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80117ea:	897b      	ldrh	r3, [r7, #10]
 80117ec:	019b      	lsls	r3, r3, #6
 80117ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80117f2:	697a      	ldr	r2, [r7, #20]
 80117f4:	4313      	orrs	r3, r2
 80117f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	f043 0302 	orr.w	r3, r3, #2
 80117fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	f043 0301 	orr.w	r3, r3, #1
 8011806:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	687a      	ldr	r2, [r7, #4]
 801180e:	b292      	uxth	r2, r2
 8011810:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 801181a:	f7fe fde1 	bl	80103e0 <HAL_GetTick>
 801181e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011820:	e015      	b.n	801184e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8011822:	f7fe fddd 	bl	80103e0 <HAL_GetTick>
 8011826:	4602      	mov	r2, r0
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011830:	d309      	bcc.n	8011846 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2201      	movs	r2, #1
 8011836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2200      	movs	r2, #0
 801183e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8011842:	2303      	movs	r3, #3
 8011844:	e00d      	b.n	8011862 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	691b      	ldr	r3, [r3, #16]
 801184c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	f003 0301 	and.w	r3, r3, #1
 8011854:	2b00      	cmp	r3, #0
 8011856:	d1e4      	bne.n	8011822 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	2201      	movs	r2, #1
 801185c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8011860:	2300      	movs	r3, #0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3718      	adds	r7, #24
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}

0801186a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 801186a:	b580      	push	{r7, lr}
 801186c:	b082      	sub	sp, #8
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011878:	2b01      	cmp	r3, #1
 801187a:	d101      	bne.n	8011880 <HAL_ETH_Start+0x16>
 801187c:	2302      	movs	r3, #2
 801187e:	e01f      	b.n	80118c0 <HAL_ETH_Start+0x56>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2201      	movs	r2, #1
 8011884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2202      	movs	r2, #2
 801188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f000 fa19 	bl	8011cc8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 fa33 	bl	8011d02 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f000 fa7d 	bl	8011d9c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f000 fa4a 	bl	8011d3c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f000 fa5f 	bl	8011d6c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2201      	movs	r2, #1
 80118b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2200      	movs	r2, #0
 80118ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b0b0      	sub	sp, #192	; 0xc0
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80118d2:	2300      	movs	r3, #0
 80118d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d007      	beq.n	80118ee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80118e4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80118ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80118ee:	2300      	movs	r3, #0
 80118f0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80118f2:	2300      	movs	r3, #0
 80118f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80118f6:	2300      	movs	r3, #0
 80118f8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80118fa:	2300      	movs	r3, #0
 80118fc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80118fe:	2300      	movs	r3, #0
 8011900:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8011902:	2300      	movs	r3, #0
 8011904:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	69db      	ldr	r3, [r3, #28]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d103      	bne.n	8011916 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 801190e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011912:	663b      	str	r3, [r7, #96]	; 0x60
 8011914:	e001      	b.n	801191a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8011916:	2300      	movs	r3, #0
 8011918:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 801191a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801191e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8011920:	2300      	movs	r3, #0
 8011922:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8011924:	2300      	movs	r3, #0
 8011926:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8011928:	2300      	movs	r3, #0
 801192a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 801192c:	2300      	movs	r3, #0
 801192e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8011930:	2300      	movs	r3, #0
 8011932:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8011934:	2340      	movs	r3, #64	; 0x40
 8011936:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8011938:	2300      	movs	r3, #0
 801193a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 801193e:	2300      	movs	r3, #0
 8011940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8011944:	2300      	movs	r3, #0
 8011946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 801194a:	2300      	movs	r3, #0
 801194c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8011950:	2300      	movs	r3, #0
 8011952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8011956:	2300      	movs	r3, #0
 8011958:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 801195c:	2300      	movs	r3, #0
 801195e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8011962:	2300      	movs	r3, #0
 8011964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8011968:	2380      	movs	r3, #128	; 0x80
 801196a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 801196e:	2300      	movs	r3, #0
 8011970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8011974:	2300      	movs	r3, #0
 8011976:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 801197a:	2300      	movs	r3, #0
 801197c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8011980:	2300      	movs	r3, #0
 8011982:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8011986:	2300      	movs	r3, #0
 8011988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 801198c:	2300      	movs	r3, #0
 801198e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 801199c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119a0:	4bab      	ldr	r3, [pc, #684]	; (8011c50 <ETH_MACDMAConfig+0x388>)
 80119a2:	4013      	ands	r3, r2
 80119a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80119a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80119aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80119ac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80119ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80119b0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80119b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80119b4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80119ba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80119bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80119be:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80119c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80119c2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80119c8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80119ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80119cc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80119ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80119d0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80119d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80119d4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80119d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80119d8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80119da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80119dc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80119de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119e2:	4313      	orrs	r3, r2
 80119e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119f0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80119fc:	2001      	movs	r0, #1
 80119fe:	f7fe fcfb 	bl	80103f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011a0a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8011a12:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8011a14:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 8011a16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8011a18:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 8011a1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8011a1e:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 8011a20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8011a24:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 8011a26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8011a2a:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8011a2c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8011a30:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 8011a32:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8011a36:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8011a38:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8011a44:	2001      	movs	r0, #1
 8011a46:	f7fe fcd7 	bl	80103f8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011a52:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011a5c:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011a66:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	699b      	ldr	r3, [r3, #24]
 8011a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8011a72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011a76:	f64f 7341 	movw	r3, #65345	; 0xff41
 8011a7a:	4013      	ands	r3, r2
 8011a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8011a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011a84:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8011a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8011a8a:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8011a8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8011a90:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8011a92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8011a96:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8011a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8011a9c:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8011a9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8011aa2:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8011aa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011aa8:	4313      	orrs	r3, r2
 8011aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011ab6:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	699b      	ldr	r3, [r3, #24]
 8011abe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8011ac2:	2001      	movs	r0, #1
 8011ac4:	f7fe fc98 	bl	80103f8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011ad0:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8011ada:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8011ade:	430a      	orrs	r2, r1
 8011ae0:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	69db      	ldr	r3, [r3, #28]
 8011ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8011aec:	2001      	movs	r0, #1
 8011aee:	f7fe fc83 	bl	80103f8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011afa:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8011afc:	2300      	movs	r3, #0
 8011afe:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8011b00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011b04:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8011b06:	2300      	movs	r3, #0
 8011b08:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8011b0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011b0e:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8011b10:	2300      	movs	r3, #0
 8011b12:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8011b14:	2300      	movs	r3, #0
 8011b16:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8011b20:	2304      	movs	r3, #4
 8011b22:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8011b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8011b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011b2e:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8011b30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011b34:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8011b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011b3a:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8011b3c:	2380      	movs	r3, #128	; 0x80
 8011b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8011b40:	2300      	movs	r3, #0
 8011b42:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8011b44:	2300      	movs	r3, #0
 8011b46:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b50:	3318      	adds	r3, #24
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8011b58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011b5c:	4b3d      	ldr	r3, [pc, #244]	; (8011c54 <ETH_MACDMAConfig+0x38c>)
 8011b5e:	4013      	ands	r3, r2
 8011b60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8011b64:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8011b66:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8011b68:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8011b6a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8011b6c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8011b6e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8011b70:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8011b72:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8011b74:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8011b76:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8011b78:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8011b7a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8011b7c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8011b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8011b80:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8011b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8011b84:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8011b86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b98:	3318      	adds	r3, #24
 8011b9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011b9e:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ba8:	3318      	adds	r3, #24
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8011bb0:	2001      	movs	r0, #1
 8011bb2:	f7fe fc21 	bl	80103f8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bbe:	3318      	adds	r3, #24
 8011bc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011bc4:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8011bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8011bce:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8011bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8011bd2:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 8011bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8011bd6:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 8011bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8011bda:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2U) |
 8011bdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011bde:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 8011be0:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 8011be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8011be4:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8011be6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8011bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bee:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8011bfe:	2001      	movs	r0, #1
 8011c00:	f7fe fbfa 	bl	80103f8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011c10:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	699b      	ldr	r3, [r3, #24]
 8011c16:	2b01      	cmp	r3, #1
 8011c18:	d10f      	bne.n	8011c3a <ETH_MACDMAConfig+0x372>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6819      	ldr	r1, [r3, #0]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c26:	331c      	adds	r3, #28
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c32:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011c36:	331c      	adds	r3, #28
 8011c38:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	695b      	ldr	r3, [r3, #20]
 8011c3e:	461a      	mov	r2, r3
 8011c40:	2100      	movs	r1, #0
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f000 f808 	bl	8011c58 <ETH_MACAddressConfig>
}
 8011c48:	bf00      	nop
 8011c4a:	37c0      	adds	r7, #192	; 0xc0
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	ff20810f 	.word	0xff20810f
 8011c54:	f8de3f23 	.word	0xf8de3f23

08011c58 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b087      	sub	sp, #28
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	3305      	adds	r3, #5
 8011c68:	781b      	ldrb	r3, [r3, #0]
 8011c6a:	021b      	lsls	r3, r3, #8
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	3204      	adds	r2, #4
 8011c70:	7812      	ldrb	r2, [r2, #0]
 8011c72:	4313      	orrs	r3, r2
 8011c74:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8011c76:	68ba      	ldr	r2, [r7, #8]
 8011c78:	4b11      	ldr	r3, [pc, #68]	; (8011cc0 <ETH_MACAddressConfig+0x68>)
 8011c7a:	4413      	add	r3, r2
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	3303      	adds	r3, #3
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	061a      	lsls	r2, r3, #24
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	3302      	adds	r3, #2
 8011c8e:	781b      	ldrb	r3, [r3, #0]
 8011c90:	041b      	lsls	r3, r3, #16
 8011c92:	431a      	orrs	r2, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	3301      	adds	r3, #1
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	021b      	lsls	r3, r3, #8
 8011c9c:	4313      	orrs	r3, r2
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	7812      	ldrb	r2, [r2, #0]
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8011ca6:	68ba      	ldr	r2, [r7, #8]
 8011ca8:	4b06      	ldr	r3, [pc, #24]	; (8011cc4 <ETH_MACAddressConfig+0x6c>)
 8011caa:	4413      	add	r3, r2
 8011cac:	461a      	mov	r2, r3
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	6013      	str	r3, [r2, #0]
}
 8011cb2:	bf00      	nop
 8011cb4:	371c      	adds	r7, #28
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop
 8011cc0:	40028040 	.word	0x40028040
 8011cc4:	40028044 	.word	0x40028044

08011cc8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	6812      	ldr	r2, [r2, #0]
 8011cdc:	6812      	ldr	r2, [r2, #0]
 8011cde:	f042 0208 	orr.w	r2, r2, #8
 8011ce2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8011cec:	2001      	movs	r0, #1
 8011cee:	f000 f87f 	bl	8011df0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	68fa      	ldr	r2, [r7, #12]
 8011cf8:	601a      	str	r2, [r3, #0]
}
 8011cfa:	bf00      	nop
 8011cfc:	3710      	adds	r7, #16
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b084      	sub	sp, #16
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	6812      	ldr	r2, [r2, #0]
 8011d16:	6812      	ldr	r2, [r2, #0]
 8011d18:	f042 0204 	orr.w	r2, r2, #4
 8011d1c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8011d26:	2001      	movs	r0, #1
 8011d28:	f000 f862 	bl	8011df0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	68fa      	ldr	r2, [r7, #12]
 8011d32:	601a      	str	r2, [r3, #0]
}
 8011d34:	bf00      	nop
 8011d36:	3710      	adds	r7, #16
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6819      	ldr	r1, [r3, #0]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d50:	3318      	adds	r3, #24
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8011d58:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011d5c:	3318      	adds	r3, #24
 8011d5e:	601a      	str	r2, [r3, #0]
}
 8011d60:	bf00      	nop
 8011d62:	370c      	adds	r7, #12
 8011d64:	46bd      	mov	sp, r7
 8011d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6a:	4770      	bx	lr

08011d6c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8011d6c:	b480      	push	{r7}
 8011d6e:	b083      	sub	sp, #12
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6819      	ldr	r1, [r3, #0]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d80:	3318      	adds	r3, #24
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f043 0202 	orr.w	r2, r3, #2
 8011d88:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011d8c:	3318      	adds	r3, #24
 8011d8e:	601a      	str	r2, [r3, #0]
}
 8011d90:	bf00      	nop
 8011d92:	370c      	adds	r7, #12
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr

08011d9c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b084      	sub	sp, #16
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8011da4:	2300      	movs	r3, #0
 8011da6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6819      	ldr	r1, [r3, #0]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011db4:	3318      	adds	r3, #24
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011dbc:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011dc0:	3318      	adds	r3, #24
 8011dc2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011dcc:	3318      	adds	r3, #24
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8011dd2:	2001      	movs	r0, #1
 8011dd4:	f000 f80c 	bl	8011df0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011de2:	3318      	adds	r3, #24
 8011de4:	601a      	str	r2, [r3, #0]
}
 8011de6:	bf00      	nop
 8011de8:	3710      	adds	r7, #16
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
	...

08011df0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8011df0:	b480      	push	{r7}
 8011df2:	b085      	sub	sp, #20
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8011df8:	4b0a      	ldr	r3, [pc, #40]	; (8011e24 <ETH_Delay+0x34>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4a0a      	ldr	r2, [pc, #40]	; (8011e28 <ETH_Delay+0x38>)
 8011dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8011e02:	0a5b      	lsrs	r3, r3, #9
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	fb02 f303 	mul.w	r3, r2, r3
 8011e0a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8011e0c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	1e5a      	subs	r2, r3, #1
 8011e12:	60fa      	str	r2, [r7, #12]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d1f9      	bne.n	8011e0c <ETH_Delay+0x1c>
}
 8011e18:	bf00      	nop
 8011e1a:	3714      	adds	r7, #20
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr
 8011e24:	20000050 	.word	0x20000050
 8011e28:	10624dd3 	.word	0x10624dd3

08011e2c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b086      	sub	sp, #24
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011e3a:	2301      	movs	r3, #1
 8011e3c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011e3e:	4b23      	ldr	r3, [pc, #140]	; (8011ecc <HAL_FLASH_Program+0xa0>)
 8011e40:	7e1b      	ldrb	r3, [r3, #24]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	d101      	bne.n	8011e4a <HAL_FLASH_Program+0x1e>
 8011e46:	2302      	movs	r3, #2
 8011e48:	e03b      	b.n	8011ec2 <HAL_FLASH_Program+0x96>
 8011e4a:	4b20      	ldr	r3, [pc, #128]	; (8011ecc <HAL_FLASH_Program+0xa0>)
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011e50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011e54:	f000 f860 	bl	8011f18 <FLASH_WaitForLastOperation>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8011e5c:	7dfb      	ldrb	r3, [r7, #23]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d12b      	bne.n	8011eba <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d105      	bne.n	8011e74 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8011e68:	783b      	ldrb	r3, [r7, #0]
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	68b8      	ldr	r0, [r7, #8]
 8011e6e:	f000 f905 	bl	801207c <FLASH_Program_Byte>
 8011e72:	e016      	b.n	8011ea2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	2b01      	cmp	r3, #1
 8011e78:	d105      	bne.n	8011e86 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8011e7a:	883b      	ldrh	r3, [r7, #0]
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	68b8      	ldr	r0, [r7, #8]
 8011e80:	f000 f8d8 	bl	8012034 <FLASH_Program_HalfWord>
 8011e84:	e00d      	b.n	8011ea2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	2b02      	cmp	r3, #2
 8011e8a:	d105      	bne.n	8011e98 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	4619      	mov	r1, r3
 8011e90:	68b8      	ldr	r0, [r7, #8]
 8011e92:	f000 f8ad 	bl	8011ff0 <FLASH_Program_Word>
 8011e96:	e004      	b.n	8011ea2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8011e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e9c:	68b8      	ldr	r0, [r7, #8]
 8011e9e:	f000 f87b 	bl	8011f98 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011ea2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011ea6:	f000 f837 	bl	8011f18 <FLASH_WaitForLastOperation>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8011eae:	4a08      	ldr	r2, [pc, #32]	; (8011ed0 <HAL_FLASH_Program+0xa4>)
 8011eb0:	4b07      	ldr	r3, [pc, #28]	; (8011ed0 <HAL_FLASH_Program+0xa4>)
 8011eb2:	691b      	ldr	r3, [r3, #16]
 8011eb4:	f023 0301 	bic.w	r3, r3, #1
 8011eb8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8011eba:	4b04      	ldr	r3, [pc, #16]	; (8011ecc <HAL_FLASH_Program+0xa0>)
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8011ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3718      	adds	r7, #24
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
 8011eca:	bf00      	nop
 8011ecc:	20004560 	.word	0x20004560
 8011ed0:	40023c00 	.word	0x40023c00

08011ed4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8011eda:	2300      	movs	r3, #0
 8011edc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011ede:	4b0b      	ldr	r3, [pc, #44]	; (8011f0c <HAL_FLASH_Unlock+0x38>)
 8011ee0:	691b      	ldr	r3, [r3, #16]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	da0b      	bge.n	8011efe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011ee6:	4b09      	ldr	r3, [pc, #36]	; (8011f0c <HAL_FLASH_Unlock+0x38>)
 8011ee8:	4a09      	ldr	r2, [pc, #36]	; (8011f10 <HAL_FLASH_Unlock+0x3c>)
 8011eea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011eec:	4b07      	ldr	r3, [pc, #28]	; (8011f0c <HAL_FLASH_Unlock+0x38>)
 8011eee:	4a09      	ldr	r2, [pc, #36]	; (8011f14 <HAL_FLASH_Unlock+0x40>)
 8011ef0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011ef2:	4b06      	ldr	r3, [pc, #24]	; (8011f0c <HAL_FLASH_Unlock+0x38>)
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	da01      	bge.n	8011efe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8011efa:	2301      	movs	r3, #1
 8011efc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8011efe:	79fb      	ldrb	r3, [r7, #7]
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	370c      	adds	r7, #12
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr
 8011f0c:	40023c00 	.word	0x40023c00
 8011f10:	45670123 	.word	0x45670123
 8011f14:	cdef89ab 	.word	0xcdef89ab

08011f18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b084      	sub	sp, #16
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011f20:	2300      	movs	r3, #0
 8011f22:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011f24:	4b1a      	ldr	r3, [pc, #104]	; (8011f90 <FLASH_WaitForLastOperation+0x78>)
 8011f26:	2200      	movs	r2, #0
 8011f28:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8011f2a:	f7fe fa59 	bl	80103e0 <HAL_GetTick>
 8011f2e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011f30:	e010      	b.n	8011f54 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f38:	d00c      	beq.n	8011f54 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d007      	beq.n	8011f50 <FLASH_WaitForLastOperation+0x38>
 8011f40:	f7fe fa4e 	bl	80103e0 <HAL_GetTick>
 8011f44:	4602      	mov	r2, r0
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	1ad2      	subs	r2, r2, r3
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d901      	bls.n	8011f54 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8011f50:	2303      	movs	r3, #3
 8011f52:	e019      	b.n	8011f88 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011f54:	4b0f      	ldr	r3, [pc, #60]	; (8011f94 <FLASH_WaitForLastOperation+0x7c>)
 8011f56:	68db      	ldr	r3, [r3, #12]
 8011f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d1e8      	bne.n	8011f32 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011f60:	4b0c      	ldr	r3, [pc, #48]	; (8011f94 <FLASH_WaitForLastOperation+0x7c>)
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	f003 0301 	and.w	r3, r3, #1
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d002      	beq.n	8011f72 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011f6c:	4b09      	ldr	r3, [pc, #36]	; (8011f94 <FLASH_WaitForLastOperation+0x7c>)
 8011f6e:	2201      	movs	r2, #1
 8011f70:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8011f72:	4b08      	ldr	r3, [pc, #32]	; (8011f94 <FLASH_WaitForLastOperation+0x7c>)
 8011f74:	68db      	ldr	r3, [r3, #12]
 8011f76:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d003      	beq.n	8011f86 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8011f7e:	f000 f89f 	bl	80120c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011f82:	2301      	movs	r3, #1
 8011f84:	e000      	b.n	8011f88 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8011f86:	2300      	movs	r3, #0
  
}  
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3710      	adds	r7, #16
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	20004560 	.word	0x20004560
 8011f94:	40023c00 	.word	0x40023c00

08011f98 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8011f98:	b4f0      	push	{r4, r5, r6, r7}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011fa4:	4a11      	ldr	r2, [pc, #68]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fa6:	4b11      	ldr	r3, [pc, #68]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fa8:	691b      	ldr	r3, [r3, #16]
 8011faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011fae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8011fb0:	4a0e      	ldr	r2, [pc, #56]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fb2:	4b0e      	ldr	r3, [pc, #56]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fb4:	691b      	ldr	r3, [r3, #16]
 8011fb6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011fba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011fbc:	4a0b      	ldr	r2, [pc, #44]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fbe:	4b0b      	ldr	r3, [pc, #44]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fc0:	691b      	ldr	r3, [r3, #16]
 8011fc2:	f043 0301 	orr.w	r3, r3, #1
 8011fc6:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	683a      	ldr	r2, [r7, #0]
 8011fcc:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	3304      	adds	r3, #4
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	e897 0018 	ldmia.w	r7, {r3, r4}
 8011fd8:	0025      	movs	r5, r4
 8011fda:	2600      	movs	r6, #0
 8011fdc:	462b      	mov	r3, r5
 8011fde:	6013      	str	r3, [r2, #0]
}
 8011fe0:	bf00      	nop
 8011fe2:	3710      	adds	r7, #16
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bcf0      	pop	{r4, r5, r6, r7}
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop
 8011fec:	40023c00 	.word	0x40023c00

08011ff0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011ffa:	4a0d      	ldr	r2, [pc, #52]	; (8012030 <FLASH_Program_Word+0x40>)
 8011ffc:	4b0c      	ldr	r3, [pc, #48]	; (8012030 <FLASH_Program_Word+0x40>)
 8011ffe:	691b      	ldr	r3, [r3, #16]
 8012000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012004:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8012006:	4a0a      	ldr	r2, [pc, #40]	; (8012030 <FLASH_Program_Word+0x40>)
 8012008:	4b09      	ldr	r3, [pc, #36]	; (8012030 <FLASH_Program_Word+0x40>)
 801200a:	691b      	ldr	r3, [r3, #16]
 801200c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012010:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012012:	4a07      	ldr	r2, [pc, #28]	; (8012030 <FLASH_Program_Word+0x40>)
 8012014:	4b06      	ldr	r3, [pc, #24]	; (8012030 <FLASH_Program_Word+0x40>)
 8012016:	691b      	ldr	r3, [r3, #16]
 8012018:	f043 0301 	orr.w	r3, r3, #1
 801201c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	683a      	ldr	r2, [r7, #0]
 8012022:	601a      	str	r2, [r3, #0]
}
 8012024:	bf00      	nop
 8012026:	370c      	adds	r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr
 8012030:	40023c00 	.word	0x40023c00

08012034 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8012034:	b480      	push	{r7}
 8012036:	b083      	sub	sp, #12
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	460b      	mov	r3, r1
 801203e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012040:	4a0d      	ldr	r2, [pc, #52]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 8012042:	4b0d      	ldr	r3, [pc, #52]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 8012044:	691b      	ldr	r3, [r3, #16]
 8012046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801204a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801204c:	4a0a      	ldr	r2, [pc, #40]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 801204e:	4b0a      	ldr	r3, [pc, #40]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 8012050:	691b      	ldr	r3, [r3, #16]
 8012052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012058:	4a07      	ldr	r2, [pc, #28]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 801205a:	4b07      	ldr	r3, [pc, #28]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 801205c:	691b      	ldr	r3, [r3, #16]
 801205e:	f043 0301 	orr.w	r3, r3, #1
 8012062:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	887a      	ldrh	r2, [r7, #2]
 8012068:	801a      	strh	r2, [r3, #0]
}
 801206a:	bf00      	nop
 801206c:	370c      	adds	r7, #12
 801206e:	46bd      	mov	sp, r7
 8012070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012074:	4770      	bx	lr
 8012076:	bf00      	nop
 8012078:	40023c00 	.word	0x40023c00

0801207c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	460b      	mov	r3, r1
 8012086:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012088:	4a0c      	ldr	r2, [pc, #48]	; (80120bc <FLASH_Program_Byte+0x40>)
 801208a:	4b0c      	ldr	r3, [pc, #48]	; (80120bc <FLASH_Program_Byte+0x40>)
 801208c:	691b      	ldr	r3, [r3, #16]
 801208e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012092:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8012094:	4a09      	ldr	r2, [pc, #36]	; (80120bc <FLASH_Program_Byte+0x40>)
 8012096:	4b09      	ldr	r3, [pc, #36]	; (80120bc <FLASH_Program_Byte+0x40>)
 8012098:	691b      	ldr	r3, [r3, #16]
 801209a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801209c:	4a07      	ldr	r2, [pc, #28]	; (80120bc <FLASH_Program_Byte+0x40>)
 801209e:	4b07      	ldr	r3, [pc, #28]	; (80120bc <FLASH_Program_Byte+0x40>)
 80120a0:	691b      	ldr	r3, [r3, #16]
 80120a2:	f043 0301 	orr.w	r3, r3, #1
 80120a6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	78fa      	ldrb	r2, [r7, #3]
 80120ac:	701a      	strb	r2, [r3, #0]
}
 80120ae:	bf00      	nop
 80120b0:	370c      	adds	r7, #12
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr
 80120ba:	bf00      	nop
 80120bc:	40023c00 	.word	0x40023c00

080120c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80120c0:	b480      	push	{r7}
 80120c2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80120c4:	4b27      	ldr	r3, [pc, #156]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	f003 0310 	and.w	r3, r3, #16
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d008      	beq.n	80120e2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80120d0:	4b25      	ldr	r3, [pc, #148]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 80120d2:	69db      	ldr	r3, [r3, #28]
 80120d4:	f043 0310 	orr.w	r3, r3, #16
 80120d8:	4a23      	ldr	r2, [pc, #140]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 80120da:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80120dc:	4b21      	ldr	r3, [pc, #132]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 80120de:	2210      	movs	r2, #16
 80120e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80120e2:	4b20      	ldr	r3, [pc, #128]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 80120e4:	68db      	ldr	r3, [r3, #12]
 80120e6:	f003 0320 	and.w	r3, r3, #32
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d008      	beq.n	8012100 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80120ee:	4b1e      	ldr	r3, [pc, #120]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 80120f0:	69db      	ldr	r3, [r3, #28]
 80120f2:	f043 0308 	orr.w	r3, r3, #8
 80120f6:	4a1c      	ldr	r2, [pc, #112]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 80120f8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80120fa:	4b1a      	ldr	r3, [pc, #104]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 80120fc:	2220      	movs	r2, #32
 80120fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8012100:	4b18      	ldr	r3, [pc, #96]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 8012102:	68db      	ldr	r3, [r3, #12]
 8012104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012108:	2b00      	cmp	r3, #0
 801210a:	d008      	beq.n	801211e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801210c:	4b16      	ldr	r3, [pc, #88]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 801210e:	69db      	ldr	r3, [r3, #28]
 8012110:	f043 0304 	orr.w	r3, r3, #4
 8012114:	4a14      	ldr	r2, [pc, #80]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 8012116:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8012118:	4b12      	ldr	r3, [pc, #72]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 801211a:	2240      	movs	r2, #64	; 0x40
 801211c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801211e:	4b11      	ldr	r3, [pc, #68]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 8012120:	68db      	ldr	r3, [r3, #12]
 8012122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012126:	2b00      	cmp	r3, #0
 8012128:	d008      	beq.n	801213c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801212a:	4b0f      	ldr	r3, [pc, #60]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 801212c:	69db      	ldr	r3, [r3, #28]
 801212e:	f043 0302 	orr.w	r3, r3, #2
 8012132:	4a0d      	ldr	r2, [pc, #52]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 8012134:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8012136:	4b0b      	ldr	r3, [pc, #44]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 8012138:	2280      	movs	r2, #128	; 0x80
 801213a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 801213c:	4b09      	ldr	r3, [pc, #36]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	f003 0302 	and.w	r3, r3, #2
 8012144:	2b00      	cmp	r3, #0
 8012146:	d008      	beq.n	801215a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8012148:	4b07      	ldr	r3, [pc, #28]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 801214a:	69db      	ldr	r3, [r3, #28]
 801214c:	f043 0320 	orr.w	r3, r3, #32
 8012150:	4a05      	ldr	r2, [pc, #20]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 8012152:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012154:	4b03      	ldr	r3, [pc, #12]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 8012156:	2202      	movs	r2, #2
 8012158:	60da      	str	r2, [r3, #12]
  }
}
 801215a:	bf00      	nop
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr
 8012164:	40023c00 	.word	0x40023c00
 8012168:	20004560 	.word	0x20004560

0801216c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012176:	2301      	movs	r3, #1
 8012178:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801217a:	2300      	movs	r3, #0
 801217c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801217e:	4b31      	ldr	r3, [pc, #196]	; (8012244 <HAL_FLASHEx_Erase+0xd8>)
 8012180:	7e1b      	ldrb	r3, [r3, #24]
 8012182:	2b01      	cmp	r3, #1
 8012184:	d101      	bne.n	801218a <HAL_FLASHEx_Erase+0x1e>
 8012186:	2302      	movs	r3, #2
 8012188:	e058      	b.n	801223c <HAL_FLASHEx_Erase+0xd0>
 801218a:	4b2e      	ldr	r3, [pc, #184]	; (8012244 <HAL_FLASHEx_Erase+0xd8>)
 801218c:	2201      	movs	r2, #1
 801218e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012190:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012194:	f7ff fec0 	bl	8011f18 <FLASH_WaitForLastOperation>
 8012198:	4603      	mov	r3, r0
 801219a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 801219c:	7bfb      	ldrb	r3, [r7, #15]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d148      	bne.n	8012234 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	f04f 32ff 	mov.w	r2, #4294967295
 80121a8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d115      	bne.n	80121de <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	691b      	ldr	r3, [r3, #16]
 80121b6:	b2da      	uxtb	r2, r3
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	4619      	mov	r1, r3
 80121be:	4610      	mov	r0, r2
 80121c0:	f000 f844 	bl	801224c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80121c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80121c8:	f7ff fea6 	bl	8011f18 <FLASH_WaitForLastOperation>
 80121cc:	4603      	mov	r3, r0
 80121ce:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80121d0:	4a1d      	ldr	r2, [pc, #116]	; (8012248 <HAL_FLASHEx_Erase+0xdc>)
 80121d2:	4b1d      	ldr	r3, [pc, #116]	; (8012248 <HAL_FLASHEx_Erase+0xdc>)
 80121d4:	691b      	ldr	r3, [r3, #16]
 80121d6:	f023 0304 	bic.w	r3, r3, #4
 80121da:	6113      	str	r3, [r2, #16]
 80121dc:	e028      	b.n	8012230 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	689b      	ldr	r3, [r3, #8]
 80121e2:	60bb      	str	r3, [r7, #8]
 80121e4:	e01c      	b.n	8012220 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	691b      	ldr	r3, [r3, #16]
 80121ea:	b2db      	uxtb	r3, r3
 80121ec:	4619      	mov	r1, r3
 80121ee:	68b8      	ldr	r0, [r7, #8]
 80121f0:	f000 f850 	bl	8012294 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80121f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80121f8:	f7ff fe8e 	bl	8011f18 <FLASH_WaitForLastOperation>
 80121fc:	4603      	mov	r3, r0
 80121fe:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8012200:	4a11      	ldr	r2, [pc, #68]	; (8012248 <HAL_FLASHEx_Erase+0xdc>)
 8012202:	4b11      	ldr	r3, [pc, #68]	; (8012248 <HAL_FLASHEx_Erase+0xdc>)
 8012204:	691b      	ldr	r3, [r3, #16]
 8012206:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801220a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 801220c:	7bfb      	ldrb	r3, [r7, #15]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d003      	beq.n	801221a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	68ba      	ldr	r2, [r7, #8]
 8012216:	601a      	str	r2, [r3, #0]
          break;
 8012218:	e00a      	b.n	8012230 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	3301      	adds	r3, #1
 801221e:	60bb      	str	r3, [r7, #8]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	68da      	ldr	r2, [r3, #12]
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	689b      	ldr	r3, [r3, #8]
 8012228:	441a      	add	r2, r3
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	429a      	cmp	r2, r3
 801222e:	d8da      	bhi.n	80121e6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8012230:	f000 f878 	bl	8012324 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012234:	4b03      	ldr	r3, [pc, #12]	; (8012244 <HAL_FLASHEx_Erase+0xd8>)
 8012236:	2200      	movs	r2, #0
 8012238:	761a      	strb	r2, [r3, #24]

  return status;
 801223a:	7bfb      	ldrb	r3, [r7, #15]
}
 801223c:	4618      	mov	r0, r3
 801223e:	3710      	adds	r7, #16
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	20004560 	.word	0x20004560
 8012248:	40023c00 	.word	0x40023c00

0801224c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 801224c:	b480      	push	{r7}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
 8012252:	4603      	mov	r3, r0
 8012254:	6039      	str	r1, [r7, #0]
 8012256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012258:	4a0d      	ldr	r2, [pc, #52]	; (8012290 <FLASH_MassErase+0x44>)
 801225a:	4b0d      	ldr	r3, [pc, #52]	; (8012290 <FLASH_MassErase+0x44>)
 801225c:	691b      	ldr	r3, [r3, #16]
 801225e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012262:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8012264:	4a0a      	ldr	r2, [pc, #40]	; (8012290 <FLASH_MassErase+0x44>)
 8012266:	4b0a      	ldr	r3, [pc, #40]	; (8012290 <FLASH_MassErase+0x44>)
 8012268:	691b      	ldr	r3, [r3, #16]
 801226a:	f043 0304 	orr.w	r3, r3, #4
 801226e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8012270:	4907      	ldr	r1, [pc, #28]	; (8012290 <FLASH_MassErase+0x44>)
 8012272:	4b07      	ldr	r3, [pc, #28]	; (8012290 <FLASH_MassErase+0x44>)
 8012274:	691a      	ldr	r2, [r3, #16]
 8012276:	79fb      	ldrb	r3, [r7, #7]
 8012278:	021b      	lsls	r3, r3, #8
 801227a:	4313      	orrs	r3, r2
 801227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012280:	610b      	str	r3, [r1, #16]
}
 8012282:	bf00      	nop
 8012284:	370c      	adds	r7, #12
 8012286:	46bd      	mov	sp, r7
 8012288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228c:	4770      	bx	lr
 801228e:	bf00      	nop
 8012290:	40023c00 	.word	0x40023c00

08012294 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8012294:	b480      	push	{r7}
 8012296:	b085      	sub	sp, #20
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	460b      	mov	r3, r1
 801229e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80122a0:	2300      	movs	r3, #0
 80122a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80122a4:	78fb      	ldrb	r3, [r7, #3]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d102      	bne.n	80122b0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80122aa:	2300      	movs	r3, #0
 80122ac:	60fb      	str	r3, [r7, #12]
 80122ae:	e010      	b.n	80122d2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80122b0:	78fb      	ldrb	r3, [r7, #3]
 80122b2:	2b01      	cmp	r3, #1
 80122b4:	d103      	bne.n	80122be <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80122b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122ba:	60fb      	str	r3, [r7, #12]
 80122bc:	e009      	b.n	80122d2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80122be:	78fb      	ldrb	r3, [r7, #3]
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d103      	bne.n	80122cc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80122c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80122c8:	60fb      	str	r3, [r7, #12]
 80122ca:	e002      	b.n	80122d2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80122cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80122d0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80122d2:	4a13      	ldr	r2, [pc, #76]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122d4:	4b12      	ldr	r3, [pc, #72]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122d6:	691b      	ldr	r3, [r3, #16]
 80122d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80122dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80122de:	4910      	ldr	r1, [pc, #64]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122e0:	4b0f      	ldr	r3, [pc, #60]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122e2:	691a      	ldr	r2, [r3, #16]
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	4313      	orrs	r3, r2
 80122e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80122ea:	4a0d      	ldr	r2, [pc, #52]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122ec:	4b0c      	ldr	r3, [pc, #48]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122ee:	691b      	ldr	r3, [r3, #16]
 80122f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80122f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80122f6:	490a      	ldr	r1, [pc, #40]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122f8:	4b09      	ldr	r3, [pc, #36]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122fa:	691a      	ldr	r2, [r3, #16]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	00db      	lsls	r3, r3, #3
 8012300:	4313      	orrs	r3, r2
 8012302:	f043 0302 	orr.w	r3, r3, #2
 8012306:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8012308:	4a05      	ldr	r2, [pc, #20]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 801230a:	4b05      	ldr	r3, [pc, #20]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 801230c:	691b      	ldr	r3, [r3, #16]
 801230e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012312:	6113      	str	r3, [r2, #16]
}
 8012314:	bf00      	nop
 8012316:	3714      	adds	r7, #20
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr
 8012320:	40023c00 	.word	0x40023c00

08012324 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8012324:	b480      	push	{r7}
 8012326:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8012328:	4b20      	ldr	r3, [pc, #128]	; (80123ac <FLASH_FlushCaches+0x88>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012330:	2b00      	cmp	r3, #0
 8012332:	d017      	beq.n	8012364 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012334:	4a1d      	ldr	r2, [pc, #116]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012336:	4b1d      	ldr	r3, [pc, #116]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801233e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8012340:	4a1a      	ldr	r2, [pc, #104]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012342:	4b1a      	ldr	r3, [pc, #104]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801234a:	6013      	str	r3, [r2, #0]
 801234c:	4a17      	ldr	r2, [pc, #92]	; (80123ac <FLASH_FlushCaches+0x88>)
 801234e:	4b17      	ldr	r3, [pc, #92]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012356:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012358:	4a14      	ldr	r2, [pc, #80]	; (80123ac <FLASH_FlushCaches+0x88>)
 801235a:	4b14      	ldr	r3, [pc, #80]	; (80123ac <FLASH_FlushCaches+0x88>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012362:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8012364:	4b11      	ldr	r3, [pc, #68]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801236c:	2b00      	cmp	r3, #0
 801236e:	d017      	beq.n	80123a0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8012370:	4a0e      	ldr	r2, [pc, #56]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012372:	4b0e      	ldr	r3, [pc, #56]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801237a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801237c:	4a0b      	ldr	r2, [pc, #44]	; (80123ac <FLASH_FlushCaches+0x88>)
 801237e:	4b0b      	ldr	r3, [pc, #44]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012386:	6013      	str	r3, [r2, #0]
 8012388:	4a08      	ldr	r2, [pc, #32]	; (80123ac <FLASH_FlushCaches+0x88>)
 801238a:	4b08      	ldr	r3, [pc, #32]	; (80123ac <FLASH_FlushCaches+0x88>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012392:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8012394:	4a05      	ldr	r2, [pc, #20]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012396:	4b05      	ldr	r3, [pc, #20]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801239e:	6013      	str	r3, [r2, #0]
  }
}
 80123a0:	bf00      	nop
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr
 80123aa:	bf00      	nop
 80123ac:	40023c00 	.word	0x40023c00

080123b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80123b0:	b480      	push	{r7}
 80123b2:	b089      	sub	sp, #36	; 0x24
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80123ba:	2300      	movs	r3, #0
 80123bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80123be:	2300      	movs	r3, #0
 80123c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80123c2:	2300      	movs	r3, #0
 80123c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80123c6:	2300      	movs	r3, #0
 80123c8:	61fb      	str	r3, [r7, #28]
 80123ca:	e16b      	b.n	80126a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80123cc:	2201      	movs	r2, #1
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	fa02 f303 	lsl.w	r3, r2, r3
 80123d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	681a      	ldr	r2, [r3, #0]
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	4013      	ands	r3, r2
 80123de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80123e0:	693a      	ldr	r2, [r7, #16]
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	429a      	cmp	r2, r3
 80123e6:	f040 815a 	bne.w	801269e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	2b02      	cmp	r3, #2
 80123f0:	d003      	beq.n	80123fa <HAL_GPIO_Init+0x4a>
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	2b12      	cmp	r3, #18
 80123f8:	d123      	bne.n	8012442 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	08da      	lsrs	r2, r3, #3
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	3208      	adds	r2, #8
 8012402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	f003 0307 	and.w	r3, r3, #7
 801240e:	009b      	lsls	r3, r3, #2
 8012410:	220f      	movs	r2, #15
 8012412:	fa02 f303 	lsl.w	r3, r2, r3
 8012416:	43db      	mvns	r3, r3
 8012418:	69ba      	ldr	r2, [r7, #24]
 801241a:	4013      	ands	r3, r2
 801241c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	691a      	ldr	r2, [r3, #16]
 8012422:	69fb      	ldr	r3, [r7, #28]
 8012424:	f003 0307 	and.w	r3, r3, #7
 8012428:	009b      	lsls	r3, r3, #2
 801242a:	fa02 f303 	lsl.w	r3, r2, r3
 801242e:	69ba      	ldr	r2, [r7, #24]
 8012430:	4313      	orrs	r3, r2
 8012432:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012434:	69fb      	ldr	r3, [r7, #28]
 8012436:	08da      	lsrs	r2, r3, #3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	3208      	adds	r2, #8
 801243c:	69b9      	ldr	r1, [r7, #24]
 801243e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	005b      	lsls	r3, r3, #1
 801244c:	2203      	movs	r2, #3
 801244e:	fa02 f303 	lsl.w	r3, r2, r3
 8012452:	43db      	mvns	r3, r3
 8012454:	69ba      	ldr	r2, [r7, #24]
 8012456:	4013      	ands	r3, r2
 8012458:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	f003 0203 	and.w	r2, r3, #3
 8012462:	69fb      	ldr	r3, [r7, #28]
 8012464:	005b      	lsls	r3, r3, #1
 8012466:	fa02 f303 	lsl.w	r3, r2, r3
 801246a:	69ba      	ldr	r2, [r7, #24]
 801246c:	4313      	orrs	r3, r2
 801246e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	69ba      	ldr	r2, [r7, #24]
 8012474:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	2b01      	cmp	r3, #1
 801247c:	d00b      	beq.n	8012496 <HAL_GPIO_Init+0xe6>
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	685b      	ldr	r3, [r3, #4]
 8012482:	2b02      	cmp	r3, #2
 8012484:	d007      	beq.n	8012496 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801248a:	2b11      	cmp	r3, #17
 801248c:	d003      	beq.n	8012496 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	2b12      	cmp	r3, #18
 8012494:	d130      	bne.n	80124f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	005b      	lsls	r3, r3, #1
 80124a0:	2203      	movs	r2, #3
 80124a2:	fa02 f303 	lsl.w	r3, r2, r3
 80124a6:	43db      	mvns	r3, r3
 80124a8:	69ba      	ldr	r2, [r7, #24]
 80124aa:	4013      	ands	r3, r2
 80124ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	68da      	ldr	r2, [r3, #12]
 80124b2:	69fb      	ldr	r3, [r7, #28]
 80124b4:	005b      	lsls	r3, r3, #1
 80124b6:	fa02 f303 	lsl.w	r3, r2, r3
 80124ba:	69ba      	ldr	r2, [r7, #24]
 80124bc:	4313      	orrs	r3, r2
 80124be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	69ba      	ldr	r2, [r7, #24]
 80124c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80124cc:	2201      	movs	r2, #1
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	fa02 f303 	lsl.w	r3, r2, r3
 80124d4:	43db      	mvns	r3, r3
 80124d6:	69ba      	ldr	r2, [r7, #24]
 80124d8:	4013      	ands	r3, r2
 80124da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	091b      	lsrs	r3, r3, #4
 80124e2:	f003 0201 	and.w	r2, r3, #1
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	fa02 f303 	lsl.w	r3, r2, r3
 80124ec:	69ba      	ldr	r2, [r7, #24]
 80124ee:	4313      	orrs	r3, r2
 80124f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	69ba      	ldr	r2, [r7, #24]
 80124f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	005b      	lsls	r3, r3, #1
 8012502:	2203      	movs	r2, #3
 8012504:	fa02 f303 	lsl.w	r3, r2, r3
 8012508:	43db      	mvns	r3, r3
 801250a:	69ba      	ldr	r2, [r7, #24]
 801250c:	4013      	ands	r3, r2
 801250e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	689a      	ldr	r2, [r3, #8]
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	005b      	lsls	r3, r3, #1
 8012518:	fa02 f303 	lsl.w	r3, r2, r3
 801251c:	69ba      	ldr	r2, [r7, #24]
 801251e:	4313      	orrs	r3, r2
 8012520:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	69ba      	ldr	r2, [r7, #24]
 8012526:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012530:	2b00      	cmp	r3, #0
 8012532:	f000 80b4 	beq.w	801269e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012536:	2300      	movs	r3, #0
 8012538:	60fb      	str	r3, [r7, #12]
 801253a:	4a5f      	ldr	r2, [pc, #380]	; (80126b8 <HAL_GPIO_Init+0x308>)
 801253c:	4b5e      	ldr	r3, [pc, #376]	; (80126b8 <HAL_GPIO_Init+0x308>)
 801253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012544:	6453      	str	r3, [r2, #68]	; 0x44
 8012546:	4b5c      	ldr	r3, [pc, #368]	; (80126b8 <HAL_GPIO_Init+0x308>)
 8012548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801254e:	60fb      	str	r3, [r7, #12]
 8012550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012552:	4a5a      	ldr	r2, [pc, #360]	; (80126bc <HAL_GPIO_Init+0x30c>)
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	089b      	lsrs	r3, r3, #2
 8012558:	3302      	adds	r3, #2
 801255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	f003 0303 	and.w	r3, r3, #3
 8012566:	009b      	lsls	r3, r3, #2
 8012568:	220f      	movs	r2, #15
 801256a:	fa02 f303 	lsl.w	r3, r2, r3
 801256e:	43db      	mvns	r3, r3
 8012570:	69ba      	ldr	r2, [r7, #24]
 8012572:	4013      	ands	r3, r2
 8012574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4a51      	ldr	r2, [pc, #324]	; (80126c0 <HAL_GPIO_Init+0x310>)
 801257a:	4293      	cmp	r3, r2
 801257c:	d02b      	beq.n	80125d6 <HAL_GPIO_Init+0x226>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4a50      	ldr	r2, [pc, #320]	; (80126c4 <HAL_GPIO_Init+0x314>)
 8012582:	4293      	cmp	r3, r2
 8012584:	d025      	beq.n	80125d2 <HAL_GPIO_Init+0x222>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	4a4f      	ldr	r2, [pc, #316]	; (80126c8 <HAL_GPIO_Init+0x318>)
 801258a:	4293      	cmp	r3, r2
 801258c:	d01f      	beq.n	80125ce <HAL_GPIO_Init+0x21e>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	4a4e      	ldr	r2, [pc, #312]	; (80126cc <HAL_GPIO_Init+0x31c>)
 8012592:	4293      	cmp	r3, r2
 8012594:	d019      	beq.n	80125ca <HAL_GPIO_Init+0x21a>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4a4d      	ldr	r2, [pc, #308]	; (80126d0 <HAL_GPIO_Init+0x320>)
 801259a:	4293      	cmp	r3, r2
 801259c:	d013      	beq.n	80125c6 <HAL_GPIO_Init+0x216>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4a4c      	ldr	r2, [pc, #304]	; (80126d4 <HAL_GPIO_Init+0x324>)
 80125a2:	4293      	cmp	r3, r2
 80125a4:	d00d      	beq.n	80125c2 <HAL_GPIO_Init+0x212>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	4a4b      	ldr	r2, [pc, #300]	; (80126d8 <HAL_GPIO_Init+0x328>)
 80125aa:	4293      	cmp	r3, r2
 80125ac:	d007      	beq.n	80125be <HAL_GPIO_Init+0x20e>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4a4a      	ldr	r2, [pc, #296]	; (80126dc <HAL_GPIO_Init+0x32c>)
 80125b2:	4293      	cmp	r3, r2
 80125b4:	d101      	bne.n	80125ba <HAL_GPIO_Init+0x20a>
 80125b6:	2307      	movs	r3, #7
 80125b8:	e00e      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125ba:	2308      	movs	r3, #8
 80125bc:	e00c      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125be:	2306      	movs	r3, #6
 80125c0:	e00a      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125c2:	2305      	movs	r3, #5
 80125c4:	e008      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125c6:	2304      	movs	r3, #4
 80125c8:	e006      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125ca:	2303      	movs	r3, #3
 80125cc:	e004      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125ce:	2302      	movs	r3, #2
 80125d0:	e002      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125d2:	2301      	movs	r3, #1
 80125d4:	e000      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125d6:	2300      	movs	r3, #0
 80125d8:	69fa      	ldr	r2, [r7, #28]
 80125da:	f002 0203 	and.w	r2, r2, #3
 80125de:	0092      	lsls	r2, r2, #2
 80125e0:	4093      	lsls	r3, r2
 80125e2:	69ba      	ldr	r2, [r7, #24]
 80125e4:	4313      	orrs	r3, r2
 80125e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80125e8:	4934      	ldr	r1, [pc, #208]	; (80126bc <HAL_GPIO_Init+0x30c>)
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	089b      	lsrs	r3, r3, #2
 80125ee:	3302      	adds	r3, #2
 80125f0:	69ba      	ldr	r2, [r7, #24]
 80125f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80125f6:	4b3a      	ldr	r3, [pc, #232]	; (80126e0 <HAL_GPIO_Init+0x330>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	43db      	mvns	r3, r3
 8012600:	69ba      	ldr	r2, [r7, #24]
 8012602:	4013      	ands	r3, r2
 8012604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801260e:	2b00      	cmp	r3, #0
 8012610:	d003      	beq.n	801261a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012612:	69ba      	ldr	r2, [r7, #24]
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	4313      	orrs	r3, r2
 8012618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801261a:	4a31      	ldr	r2, [pc, #196]	; (80126e0 <HAL_GPIO_Init+0x330>)
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012620:	4b2f      	ldr	r3, [pc, #188]	; (80126e0 <HAL_GPIO_Init+0x330>)
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012626:	693b      	ldr	r3, [r7, #16]
 8012628:	43db      	mvns	r3, r3
 801262a:	69ba      	ldr	r2, [r7, #24]
 801262c:	4013      	ands	r3, r2
 801262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012638:	2b00      	cmp	r3, #0
 801263a:	d003      	beq.n	8012644 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 801263c:	69ba      	ldr	r2, [r7, #24]
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	4313      	orrs	r3, r2
 8012642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012644:	4a26      	ldr	r2, [pc, #152]	; (80126e0 <HAL_GPIO_Init+0x330>)
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801264a:	4b25      	ldr	r3, [pc, #148]	; (80126e0 <HAL_GPIO_Init+0x330>)
 801264c:	689b      	ldr	r3, [r3, #8]
 801264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	43db      	mvns	r3, r3
 8012654:	69ba      	ldr	r2, [r7, #24]
 8012656:	4013      	ands	r3, r2
 8012658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012662:	2b00      	cmp	r3, #0
 8012664:	d003      	beq.n	801266e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8012666:	69ba      	ldr	r2, [r7, #24]
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	4313      	orrs	r3, r2
 801266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801266e:	4a1c      	ldr	r2, [pc, #112]	; (80126e0 <HAL_GPIO_Init+0x330>)
 8012670:	69bb      	ldr	r3, [r7, #24]
 8012672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012674:	4b1a      	ldr	r3, [pc, #104]	; (80126e0 <HAL_GPIO_Init+0x330>)
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	43db      	mvns	r3, r3
 801267e:	69ba      	ldr	r2, [r7, #24]
 8012680:	4013      	ands	r3, r2
 8012682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	685b      	ldr	r3, [r3, #4]
 8012688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801268c:	2b00      	cmp	r3, #0
 801268e:	d003      	beq.n	8012698 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012690:	69ba      	ldr	r2, [r7, #24]
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	4313      	orrs	r3, r2
 8012696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012698:	4a11      	ldr	r2, [pc, #68]	; (80126e0 <HAL_GPIO_Init+0x330>)
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	3301      	adds	r3, #1
 80126a2:	61fb      	str	r3, [r7, #28]
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	2b0f      	cmp	r3, #15
 80126a8:	f67f ae90 	bls.w	80123cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80126ac:	bf00      	nop
 80126ae:	3724      	adds	r7, #36	; 0x24
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr
 80126b8:	40023800 	.word	0x40023800
 80126bc:	40013800 	.word	0x40013800
 80126c0:	40020000 	.word	0x40020000
 80126c4:	40020400 	.word	0x40020400
 80126c8:	40020800 	.word	0x40020800
 80126cc:	40020c00 	.word	0x40020c00
 80126d0:	40021000 	.word	0x40021000
 80126d4:	40021400 	.word	0x40021400
 80126d8:	40021800 	.word	0x40021800
 80126dc:	40021c00 	.word	0x40021c00
 80126e0:	40013c00 	.word	0x40013c00

080126e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80126e4:	b480      	push	{r7}
 80126e6:	b087      	sub	sp, #28
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80126ee:	2300      	movs	r3, #0
 80126f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80126f2:	2300      	movs	r3, #0
 80126f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80126f6:	2300      	movs	r3, #0
 80126f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80126fa:	2300      	movs	r3, #0
 80126fc:	617b      	str	r3, [r7, #20]
 80126fe:	e0ce      	b.n	801289e <HAL_GPIO_DeInit+0x1ba>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012700:	2201      	movs	r2, #1
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	fa02 f303 	lsl.w	r3, r2, r3
 8012708:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801270a:	683a      	ldr	r2, [r7, #0]
 801270c:	693b      	ldr	r3, [r7, #16]
 801270e:	4013      	ands	r3, r2
 8012710:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8012712:	68fa      	ldr	r2, [r7, #12]
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	429a      	cmp	r2, r3
 8012718:	f040 80be 	bne.w	8012898 <HAL_GPIO_DeInit+0x1b4>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681a      	ldr	r2, [r3, #0]
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	005b      	lsls	r3, r3, #1
 8012724:	2103      	movs	r1, #3
 8012726:	fa01 f303 	lsl.w	r3, r1, r3
 801272a:	43db      	mvns	r3, r3
 801272c:	401a      	ands	r2, r3
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	08da      	lsrs	r2, r3, #3
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	08d9      	lsrs	r1, r3, #3
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	3108      	adds	r1, #8
 801273e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	f003 0307 	and.w	r3, r3, #7
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	200f      	movs	r0, #15
 801274c:	fa00 f303 	lsl.w	r3, r0, r3
 8012750:	43db      	mvns	r3, r3
 8012752:	4019      	ands	r1, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	3208      	adds	r2, #8
 8012758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	689a      	ldr	r2, [r3, #8]
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	005b      	lsls	r3, r3, #1
 8012764:	2103      	movs	r1, #3
 8012766:	fa01 f303 	lsl.w	r3, r1, r3
 801276a:	43db      	mvns	r3, r3
 801276c:	401a      	ands	r2, r3
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	685a      	ldr	r2, [r3, #4]
 8012776:	2101      	movs	r1, #1
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	fa01 f303 	lsl.w	r3, r1, r3
 801277e:	43db      	mvns	r3, r3
 8012780:	401a      	ands	r2, r3
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	68da      	ldr	r2, [r3, #12]
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	005b      	lsls	r3, r3, #1
 801278e:	2103      	movs	r1, #3
 8012790:	fa01 f303 	lsl.w	r3, r1, r3
 8012794:	43db      	mvns	r3, r3
 8012796:	401a      	ands	r2, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801279c:	4a45      	ldr	r2, [pc, #276]	; (80128b4 <HAL_GPIO_DeInit+0x1d0>)
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	089b      	lsrs	r3, r3, #2
 80127a2:	3302      	adds	r3, #2
 80127a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	f003 0303 	and.w	r3, r3, #3
 80127b0:	009b      	lsls	r3, r3, #2
 80127b2:	220f      	movs	r2, #15
 80127b4:	fa02 f303 	lsl.w	r3, r2, r3
 80127b8:	68ba      	ldr	r2, [r7, #8]
 80127ba:	4013      	ands	r3, r2
 80127bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	4a3d      	ldr	r2, [pc, #244]	; (80128b8 <HAL_GPIO_DeInit+0x1d4>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d02b      	beq.n	801281e <HAL_GPIO_DeInit+0x13a>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	4a3c      	ldr	r2, [pc, #240]	; (80128bc <HAL_GPIO_DeInit+0x1d8>)
 80127ca:	4293      	cmp	r3, r2
 80127cc:	d025      	beq.n	801281a <HAL_GPIO_DeInit+0x136>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	4a3b      	ldr	r2, [pc, #236]	; (80128c0 <HAL_GPIO_DeInit+0x1dc>)
 80127d2:	4293      	cmp	r3, r2
 80127d4:	d01f      	beq.n	8012816 <HAL_GPIO_DeInit+0x132>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	4a3a      	ldr	r2, [pc, #232]	; (80128c4 <HAL_GPIO_DeInit+0x1e0>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d019      	beq.n	8012812 <HAL_GPIO_DeInit+0x12e>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	4a39      	ldr	r2, [pc, #228]	; (80128c8 <HAL_GPIO_DeInit+0x1e4>)
 80127e2:	4293      	cmp	r3, r2
 80127e4:	d013      	beq.n	801280e <HAL_GPIO_DeInit+0x12a>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	4a38      	ldr	r2, [pc, #224]	; (80128cc <HAL_GPIO_DeInit+0x1e8>)
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d00d      	beq.n	801280a <HAL_GPIO_DeInit+0x126>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4a37      	ldr	r2, [pc, #220]	; (80128d0 <HAL_GPIO_DeInit+0x1ec>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d007      	beq.n	8012806 <HAL_GPIO_DeInit+0x122>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	4a36      	ldr	r2, [pc, #216]	; (80128d4 <HAL_GPIO_DeInit+0x1f0>)
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d101      	bne.n	8012802 <HAL_GPIO_DeInit+0x11e>
 80127fe:	2307      	movs	r3, #7
 8012800:	e00e      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 8012802:	2308      	movs	r3, #8
 8012804:	e00c      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 8012806:	2306      	movs	r3, #6
 8012808:	e00a      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 801280a:	2305      	movs	r3, #5
 801280c:	e008      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 801280e:	2304      	movs	r3, #4
 8012810:	e006      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 8012812:	2303      	movs	r3, #3
 8012814:	e004      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 8012816:	2302      	movs	r3, #2
 8012818:	e002      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 801281a:	2301      	movs	r3, #1
 801281c:	e000      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 801281e:	2300      	movs	r3, #0
 8012820:	697a      	ldr	r2, [r7, #20]
 8012822:	f002 0203 	and.w	r2, r2, #3
 8012826:	0092      	lsls	r2, r2, #2
 8012828:	fa03 f202 	lsl.w	r2, r3, r2
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	429a      	cmp	r2, r3
 8012830:	d132      	bne.n	8012898 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	f003 0303 	and.w	r3, r3, #3
 8012838:	009b      	lsls	r3, r3, #2
 801283a:	220f      	movs	r2, #15
 801283c:	fa02 f303 	lsl.w	r3, r2, r3
 8012840:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8012842:	481c      	ldr	r0, [pc, #112]	; (80128b4 <HAL_GPIO_DeInit+0x1d0>)
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	089b      	lsrs	r3, r3, #2
 8012848:	491a      	ldr	r1, [pc, #104]	; (80128b4 <HAL_GPIO_DeInit+0x1d0>)
 801284a:	697a      	ldr	r2, [r7, #20]
 801284c:	0892      	lsrs	r2, r2, #2
 801284e:	3202      	adds	r2, #2
 8012850:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012854:	68ba      	ldr	r2, [r7, #8]
 8012856:	43d2      	mvns	r2, r2
 8012858:	400a      	ands	r2, r1
 801285a:	3302      	adds	r3, #2
 801285c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012860:	491d      	ldr	r1, [pc, #116]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012862:	4b1d      	ldr	r3, [pc, #116]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	43db      	mvns	r3, r3
 801286a:	4013      	ands	r3, r2
 801286c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801286e:	491a      	ldr	r1, [pc, #104]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012870:	4b19      	ldr	r3, [pc, #100]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012872:	685a      	ldr	r2, [r3, #4]
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	43db      	mvns	r3, r3
 8012878:	4013      	ands	r3, r2
 801287a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801287c:	4916      	ldr	r1, [pc, #88]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 801287e:	4b16      	ldr	r3, [pc, #88]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012880:	689a      	ldr	r2, [r3, #8]
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	43db      	mvns	r3, r3
 8012886:	4013      	ands	r3, r2
 8012888:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801288a:	4913      	ldr	r1, [pc, #76]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 801288c:	4b12      	ldr	r3, [pc, #72]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 801288e:	68da      	ldr	r2, [r3, #12]
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	43db      	mvns	r3, r3
 8012894:	4013      	ands	r3, r2
 8012896:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	3301      	adds	r3, #1
 801289c:	617b      	str	r3, [r7, #20]
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	2b0f      	cmp	r3, #15
 80128a2:	f67f af2d 	bls.w	8012700 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 80128a6:	bf00      	nop
 80128a8:	371c      	adds	r7, #28
 80128aa:	46bd      	mov	sp, r7
 80128ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b0:	4770      	bx	lr
 80128b2:	bf00      	nop
 80128b4:	40013800 	.word	0x40013800
 80128b8:	40020000 	.word	0x40020000
 80128bc:	40020400 	.word	0x40020400
 80128c0:	40020800 	.word	0x40020800
 80128c4:	40020c00 	.word	0x40020c00
 80128c8:	40021000 	.word	0x40021000
 80128cc:	40021400 	.word	0x40021400
 80128d0:	40021800 	.word	0x40021800
 80128d4:	40021c00 	.word	0x40021c00
 80128d8:	40013c00 	.word	0x40013c00

080128dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80128dc:	b480      	push	{r7}
 80128de:	b083      	sub	sp, #12
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	460b      	mov	r3, r1
 80128e6:	807b      	strh	r3, [r7, #2]
 80128e8:	4613      	mov	r3, r2
 80128ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80128ec:	787b      	ldrb	r3, [r7, #1]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d003      	beq.n	80128fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80128f2:	887a      	ldrh	r2, [r7, #2]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80128f8:	e003      	b.n	8012902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80128fa:	887b      	ldrh	r3, [r7, #2]
 80128fc:	041a      	lsls	r2, r3, #16
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	619a      	str	r2, [r3, #24]
}
 8012902:	bf00      	nop
 8012904:	370c      	adds	r7, #12
 8012906:	46bd      	mov	sp, r7
 8012908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290c:	4770      	bx	lr

0801290e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801290e:	b480      	push	{r7}
 8012910:	b083      	sub	sp, #12
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
 8012916:	460b      	mov	r3, r1
 8012918:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	695a      	ldr	r2, [r3, #20]
 801291e:	887b      	ldrh	r3, [r7, #2]
 8012920:	405a      	eors	r2, r3
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	615a      	str	r2, [r3, #20]
}
 8012926:	bf00      	nop
 8012928:	370c      	adds	r7, #12
 801292a:	46bd      	mov	sp, r7
 801292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012930:	4770      	bx	lr
	...

08012934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b086      	sub	sp, #24
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d101      	bne.n	8012946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012942:	2301      	movs	r3, #1
 8012944:	e22d      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f003 0301 	and.w	r3, r3, #1
 801294e:	2b00      	cmp	r3, #0
 8012950:	d075      	beq.n	8012a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012952:	4ba3      	ldr	r3, [pc, #652]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012954:	689b      	ldr	r3, [r3, #8]
 8012956:	f003 030c 	and.w	r3, r3, #12
 801295a:	2b04      	cmp	r3, #4
 801295c:	d00c      	beq.n	8012978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801295e:	4ba0      	ldr	r3, [pc, #640]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012960:	689b      	ldr	r3, [r3, #8]
 8012962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012966:	2b08      	cmp	r3, #8
 8012968:	d112      	bne.n	8012990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801296a:	4b9d      	ldr	r3, [pc, #628]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012976:	d10b      	bne.n	8012990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012978:	4b99      	ldr	r3, [pc, #612]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012980:	2b00      	cmp	r3, #0
 8012982:	d05b      	beq.n	8012a3c <HAL_RCC_OscConfig+0x108>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	685b      	ldr	r3, [r3, #4]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d157      	bne.n	8012a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801298c:	2301      	movs	r3, #1
 801298e:	e208      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012998:	d106      	bne.n	80129a8 <HAL_RCC_OscConfig+0x74>
 801299a:	4a91      	ldr	r2, [pc, #580]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 801299c:	4b90      	ldr	r3, [pc, #576]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80129a4:	6013      	str	r3, [r2, #0]
 80129a6:	e01d      	b.n	80129e4 <HAL_RCC_OscConfig+0xb0>
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80129b0:	d10c      	bne.n	80129cc <HAL_RCC_OscConfig+0x98>
 80129b2:	4a8b      	ldr	r2, [pc, #556]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129b4:	4b8a      	ldr	r3, [pc, #552]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80129bc:	6013      	str	r3, [r2, #0]
 80129be:	4a88      	ldr	r2, [pc, #544]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129c0:	4b87      	ldr	r3, [pc, #540]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80129c8:	6013      	str	r3, [r2, #0]
 80129ca:	e00b      	b.n	80129e4 <HAL_RCC_OscConfig+0xb0>
 80129cc:	4a84      	ldr	r2, [pc, #528]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129ce:	4b84      	ldr	r3, [pc, #528]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80129d6:	6013      	str	r3, [r2, #0]
 80129d8:	4a81      	ldr	r2, [pc, #516]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129da:	4b81      	ldr	r3, [pc, #516]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80129e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d013      	beq.n	8012a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80129ec:	f7fd fcf8 	bl	80103e0 <HAL_GetTick>
 80129f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80129f2:	e008      	b.n	8012a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80129f4:	f7fd fcf4 	bl	80103e0 <HAL_GetTick>
 80129f8:	4602      	mov	r2, r0
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	1ad3      	subs	r3, r2, r3
 80129fe:	2b64      	cmp	r3, #100	; 0x64
 8012a00:	d901      	bls.n	8012a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012a02:	2303      	movs	r3, #3
 8012a04:	e1cd      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012a06:	4b76      	ldr	r3, [pc, #472]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d0f0      	beq.n	80129f4 <HAL_RCC_OscConfig+0xc0>
 8012a12:	e014      	b.n	8012a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012a14:	f7fd fce4 	bl	80103e0 <HAL_GetTick>
 8012a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012a1a:	e008      	b.n	8012a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012a1c:	f7fd fce0 	bl	80103e0 <HAL_GetTick>
 8012a20:	4602      	mov	r2, r0
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	1ad3      	subs	r3, r2, r3
 8012a26:	2b64      	cmp	r3, #100	; 0x64
 8012a28:	d901      	bls.n	8012a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012a2a:	2303      	movs	r3, #3
 8012a2c:	e1b9      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012a2e:	4b6c      	ldr	r3, [pc, #432]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d1f0      	bne.n	8012a1c <HAL_RCC_OscConfig+0xe8>
 8012a3a:	e000      	b.n	8012a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	f003 0302 	and.w	r3, r3, #2
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d063      	beq.n	8012b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012a4a:	4b65      	ldr	r3, [pc, #404]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a4c:	689b      	ldr	r3, [r3, #8]
 8012a4e:	f003 030c 	and.w	r3, r3, #12
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d00b      	beq.n	8012a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012a56:	4b62      	ldr	r3, [pc, #392]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a58:	689b      	ldr	r3, [r3, #8]
 8012a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012a5e:	2b08      	cmp	r3, #8
 8012a60:	d11c      	bne.n	8012a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012a62:	4b5f      	ldr	r3, [pc, #380]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a64:	685b      	ldr	r3, [r3, #4]
 8012a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d116      	bne.n	8012a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012a6e:	4b5c      	ldr	r3, [pc, #368]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f003 0302 	and.w	r3, r3, #2
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d005      	beq.n	8012a86 <HAL_RCC_OscConfig+0x152>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	68db      	ldr	r3, [r3, #12]
 8012a7e:	2b01      	cmp	r3, #1
 8012a80:	d001      	beq.n	8012a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012a82:	2301      	movs	r3, #1
 8012a84:	e18d      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012a86:	4956      	ldr	r1, [pc, #344]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a88:	4b55      	ldr	r3, [pc, #340]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	691b      	ldr	r3, [r3, #16]
 8012a94:	00db      	lsls	r3, r3, #3
 8012a96:	4313      	orrs	r3, r2
 8012a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012a9a:	e03a      	b.n	8012b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d020      	beq.n	8012ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012aa4:	4b4f      	ldr	r3, [pc, #316]	; (8012be4 <HAL_RCC_OscConfig+0x2b0>)
 8012aa6:	2201      	movs	r2, #1
 8012aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012aaa:	f7fd fc99 	bl	80103e0 <HAL_GetTick>
 8012aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012ab0:	e008      	b.n	8012ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012ab2:	f7fd fc95 	bl	80103e0 <HAL_GetTick>
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	1ad3      	subs	r3, r2, r3
 8012abc:	2b02      	cmp	r3, #2
 8012abe:	d901      	bls.n	8012ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012ac0:	2303      	movs	r3, #3
 8012ac2:	e16e      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012ac4:	4b46      	ldr	r3, [pc, #280]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	f003 0302 	and.w	r3, r3, #2
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d0f0      	beq.n	8012ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012ad0:	4943      	ldr	r1, [pc, #268]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ad2:	4b43      	ldr	r3, [pc, #268]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	691b      	ldr	r3, [r3, #16]
 8012ade:	00db      	lsls	r3, r3, #3
 8012ae0:	4313      	orrs	r3, r2
 8012ae2:	600b      	str	r3, [r1, #0]
 8012ae4:	e015      	b.n	8012b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012ae6:	4b3f      	ldr	r3, [pc, #252]	; (8012be4 <HAL_RCC_OscConfig+0x2b0>)
 8012ae8:	2200      	movs	r2, #0
 8012aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012aec:	f7fd fc78 	bl	80103e0 <HAL_GetTick>
 8012af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012af2:	e008      	b.n	8012b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012af4:	f7fd fc74 	bl	80103e0 <HAL_GetTick>
 8012af8:	4602      	mov	r2, r0
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	1ad3      	subs	r3, r2, r3
 8012afe:	2b02      	cmp	r3, #2
 8012b00:	d901      	bls.n	8012b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012b02:	2303      	movs	r3, #3
 8012b04:	e14d      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012b06:	4b36      	ldr	r3, [pc, #216]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f003 0302 	and.w	r3, r3, #2
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1f0      	bne.n	8012af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f003 0308 	and.w	r3, r3, #8
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d030      	beq.n	8012b80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	695b      	ldr	r3, [r3, #20]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d016      	beq.n	8012b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012b26:	4b30      	ldr	r3, [pc, #192]	; (8012be8 <HAL_RCC_OscConfig+0x2b4>)
 8012b28:	2201      	movs	r2, #1
 8012b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b2c:	f7fd fc58 	bl	80103e0 <HAL_GetTick>
 8012b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b32:	e008      	b.n	8012b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b34:	f7fd fc54 	bl	80103e0 <HAL_GetTick>
 8012b38:	4602      	mov	r2, r0
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	1ad3      	subs	r3, r2, r3
 8012b3e:	2b02      	cmp	r3, #2
 8012b40:	d901      	bls.n	8012b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012b42:	2303      	movs	r3, #3
 8012b44:	e12d      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b46:	4b26      	ldr	r3, [pc, #152]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b4a:	f003 0302 	and.w	r3, r3, #2
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d0f0      	beq.n	8012b34 <HAL_RCC_OscConfig+0x200>
 8012b52:	e015      	b.n	8012b80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012b54:	4b24      	ldr	r3, [pc, #144]	; (8012be8 <HAL_RCC_OscConfig+0x2b4>)
 8012b56:	2200      	movs	r2, #0
 8012b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012b5a:	f7fd fc41 	bl	80103e0 <HAL_GetTick>
 8012b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012b60:	e008      	b.n	8012b74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b62:	f7fd fc3d 	bl	80103e0 <HAL_GetTick>
 8012b66:	4602      	mov	r2, r0
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	2b02      	cmp	r3, #2
 8012b6e:	d901      	bls.n	8012b74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012b70:	2303      	movs	r3, #3
 8012b72:	e116      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012b74:	4b1a      	ldr	r3, [pc, #104]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b78:	f003 0302 	and.w	r3, r3, #2
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1f0      	bne.n	8012b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f003 0304 	and.w	r3, r3, #4
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f000 80a0 	beq.w	8012cce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012b92:	4b13      	ldr	r3, [pc, #76]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d10f      	bne.n	8012bbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	60fb      	str	r3, [r7, #12]
 8012ba2:	4a0f      	ldr	r2, [pc, #60]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ba4:	4b0e      	ldr	r3, [pc, #56]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012bac:	6413      	str	r3, [r2, #64]	; 0x40
 8012bae:	4b0c      	ldr	r3, [pc, #48]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012bb6:	60fb      	str	r3, [r7, #12]
 8012bb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8012bba:	2301      	movs	r3, #1
 8012bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012bbe:	4b0b      	ldr	r3, [pc, #44]	; (8012bec <HAL_RCC_OscConfig+0x2b8>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d121      	bne.n	8012c0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012bca:	4a08      	ldr	r2, [pc, #32]	; (8012bec <HAL_RCC_OscConfig+0x2b8>)
 8012bcc:	4b07      	ldr	r3, [pc, #28]	; (8012bec <HAL_RCC_OscConfig+0x2b8>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012bd6:	f7fd fc03 	bl	80103e0 <HAL_GetTick>
 8012bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012bdc:	e011      	b.n	8012c02 <HAL_RCC_OscConfig+0x2ce>
 8012bde:	bf00      	nop
 8012be0:	40023800 	.word	0x40023800
 8012be4:	42470000 	.word	0x42470000
 8012be8:	42470e80 	.word	0x42470e80
 8012bec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012bf0:	f7fd fbf6 	bl	80103e0 <HAL_GetTick>
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	2b02      	cmp	r3, #2
 8012bfc:	d901      	bls.n	8012c02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012bfe:	2303      	movs	r3, #3
 8012c00:	e0cf      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012c02:	4b6a      	ldr	r3, [pc, #424]	; (8012dac <HAL_RCC_OscConfig+0x478>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d0f0      	beq.n	8012bf0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	689b      	ldr	r3, [r3, #8]
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d106      	bne.n	8012c24 <HAL_RCC_OscConfig+0x2f0>
 8012c16:	4a66      	ldr	r2, [pc, #408]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c18:	4b65      	ldr	r3, [pc, #404]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c1c:	f043 0301 	orr.w	r3, r3, #1
 8012c20:	6713      	str	r3, [r2, #112]	; 0x70
 8012c22:	e01c      	b.n	8012c5e <HAL_RCC_OscConfig+0x32a>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	689b      	ldr	r3, [r3, #8]
 8012c28:	2b05      	cmp	r3, #5
 8012c2a:	d10c      	bne.n	8012c46 <HAL_RCC_OscConfig+0x312>
 8012c2c:	4a60      	ldr	r2, [pc, #384]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c2e:	4b60      	ldr	r3, [pc, #384]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c32:	f043 0304 	orr.w	r3, r3, #4
 8012c36:	6713      	str	r3, [r2, #112]	; 0x70
 8012c38:	4a5d      	ldr	r2, [pc, #372]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c3a:	4b5d      	ldr	r3, [pc, #372]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c3e:	f043 0301 	orr.w	r3, r3, #1
 8012c42:	6713      	str	r3, [r2, #112]	; 0x70
 8012c44:	e00b      	b.n	8012c5e <HAL_RCC_OscConfig+0x32a>
 8012c46:	4a5a      	ldr	r2, [pc, #360]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c48:	4b59      	ldr	r3, [pc, #356]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c4c:	f023 0301 	bic.w	r3, r3, #1
 8012c50:	6713      	str	r3, [r2, #112]	; 0x70
 8012c52:	4a57      	ldr	r2, [pc, #348]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c54:	4b56      	ldr	r3, [pc, #344]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c58:	f023 0304 	bic.w	r3, r3, #4
 8012c5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	689b      	ldr	r3, [r3, #8]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d015      	beq.n	8012c92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012c66:	f7fd fbbb 	bl	80103e0 <HAL_GetTick>
 8012c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c6c:	e00a      	b.n	8012c84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012c6e:	f7fd fbb7 	bl	80103e0 <HAL_GetTick>
 8012c72:	4602      	mov	r2, r0
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	1ad3      	subs	r3, r2, r3
 8012c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c7c:	4293      	cmp	r3, r2
 8012c7e:	d901      	bls.n	8012c84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012c80:	2303      	movs	r3, #3
 8012c82:	e08e      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c84:	4b4a      	ldr	r3, [pc, #296]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c88:	f003 0302 	and.w	r3, r3, #2
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d0ee      	beq.n	8012c6e <HAL_RCC_OscConfig+0x33a>
 8012c90:	e014      	b.n	8012cbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012c92:	f7fd fba5 	bl	80103e0 <HAL_GetTick>
 8012c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012c98:	e00a      	b.n	8012cb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012c9a:	f7fd fba1 	bl	80103e0 <HAL_GetTick>
 8012c9e:	4602      	mov	r2, r0
 8012ca0:	693b      	ldr	r3, [r7, #16]
 8012ca2:	1ad3      	subs	r3, r2, r3
 8012ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d901      	bls.n	8012cb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012cac:	2303      	movs	r3, #3
 8012cae:	e078      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012cb0:	4b3f      	ldr	r3, [pc, #252]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cb4:	f003 0302 	and.w	r3, r3, #2
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d1ee      	bne.n	8012c9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012cbc:	7dfb      	ldrb	r3, [r7, #23]
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	d105      	bne.n	8012cce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012cc2:	4a3b      	ldr	r2, [pc, #236]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012cc4:	4b3a      	ldr	r3, [pc, #232]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012ccc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	699b      	ldr	r3, [r3, #24]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d064      	beq.n	8012da0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012cd6:	4b36      	ldr	r3, [pc, #216]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012cd8:	689b      	ldr	r3, [r3, #8]
 8012cda:	f003 030c 	and.w	r3, r3, #12
 8012cde:	2b08      	cmp	r3, #8
 8012ce0:	d05c      	beq.n	8012d9c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	699b      	ldr	r3, [r3, #24]
 8012ce6:	2b02      	cmp	r3, #2
 8012ce8:	d141      	bne.n	8012d6e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012cea:	4b32      	ldr	r3, [pc, #200]	; (8012db4 <HAL_RCC_OscConfig+0x480>)
 8012cec:	2200      	movs	r2, #0
 8012cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012cf0:	f7fd fb76 	bl	80103e0 <HAL_GetTick>
 8012cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012cf6:	e008      	b.n	8012d0a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012cf8:	f7fd fb72 	bl	80103e0 <HAL_GetTick>
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	1ad3      	subs	r3, r2, r3
 8012d02:	2b02      	cmp	r3, #2
 8012d04:	d901      	bls.n	8012d0a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8012d06:	2303      	movs	r3, #3
 8012d08:	e04b      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d0a:	4b29      	ldr	r3, [pc, #164]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d1f0      	bne.n	8012cf8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012d16:	4926      	ldr	r1, [pc, #152]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	69da      	ldr	r2, [r3, #28]
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6a1b      	ldr	r3, [r3, #32]
 8012d20:	431a      	orrs	r2, r3
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d26:	019b      	lsls	r3, r3, #6
 8012d28:	431a      	orrs	r2, r3
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d2e:	085b      	lsrs	r3, r3, #1
 8012d30:	3b01      	subs	r3, #1
 8012d32:	041b      	lsls	r3, r3, #16
 8012d34:	431a      	orrs	r2, r3
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d3a:	061b      	lsls	r3, r3, #24
 8012d3c:	4313      	orrs	r3, r2
 8012d3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012d40:	4b1c      	ldr	r3, [pc, #112]	; (8012db4 <HAL_RCC_OscConfig+0x480>)
 8012d42:	2201      	movs	r2, #1
 8012d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d46:	f7fd fb4b 	bl	80103e0 <HAL_GetTick>
 8012d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012d4c:	e008      	b.n	8012d60 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012d4e:	f7fd fb47 	bl	80103e0 <HAL_GetTick>
 8012d52:	4602      	mov	r2, r0
 8012d54:	693b      	ldr	r3, [r7, #16]
 8012d56:	1ad3      	subs	r3, r2, r3
 8012d58:	2b02      	cmp	r3, #2
 8012d5a:	d901      	bls.n	8012d60 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8012d5c:	2303      	movs	r3, #3
 8012d5e:	e020      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012d60:	4b13      	ldr	r3, [pc, #76]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d0f0      	beq.n	8012d4e <HAL_RCC_OscConfig+0x41a>
 8012d6c:	e018      	b.n	8012da0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012d6e:	4b11      	ldr	r3, [pc, #68]	; (8012db4 <HAL_RCC_OscConfig+0x480>)
 8012d70:	2200      	movs	r2, #0
 8012d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d74:	f7fd fb34 	bl	80103e0 <HAL_GetTick>
 8012d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d7a:	e008      	b.n	8012d8e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012d7c:	f7fd fb30 	bl	80103e0 <HAL_GetTick>
 8012d80:	4602      	mov	r2, r0
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	1ad3      	subs	r3, r2, r3
 8012d86:	2b02      	cmp	r3, #2
 8012d88:	d901      	bls.n	8012d8e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8012d8a:	2303      	movs	r3, #3
 8012d8c:	e009      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d8e:	4b08      	ldr	r3, [pc, #32]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d1f0      	bne.n	8012d7c <HAL_RCC_OscConfig+0x448>
 8012d9a:	e001      	b.n	8012da0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	e000      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8012da0:	2300      	movs	r3, #0
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3718      	adds	r7, #24
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	40007000 	.word	0x40007000
 8012db0:	40023800 	.word	0x40023800
 8012db4:	42470060 	.word	0x42470060

08012db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d101      	bne.n	8012dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	e0ca      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012dcc:	4b67      	ldr	r3, [pc, #412]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	f003 020f 	and.w	r2, r3, #15
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d20c      	bcs.n	8012df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012dda:	4b64      	ldr	r3, [pc, #400]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012ddc:	683a      	ldr	r2, [r7, #0]
 8012dde:	b2d2      	uxtb	r2, r2
 8012de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012de2:	4b62      	ldr	r3, [pc, #392]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	f003 020f 	and.w	r2, r3, #15
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d001      	beq.n	8012df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012df0:	2301      	movs	r3, #1
 8012df2:	e0b6      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	f003 0302 	and.w	r3, r3, #2
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d020      	beq.n	8012e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f003 0304 	and.w	r3, r3, #4
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d005      	beq.n	8012e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012e0c:	4a58      	ldr	r2, [pc, #352]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e0e:	4b58      	ldr	r3, [pc, #352]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e10:	689b      	ldr	r3, [r3, #8]
 8012e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	f003 0308 	and.w	r3, r3, #8
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d005      	beq.n	8012e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012e24:	4a52      	ldr	r2, [pc, #328]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e26:	4b52      	ldr	r3, [pc, #328]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e28:	689b      	ldr	r3, [r3, #8]
 8012e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012e30:	494f      	ldr	r1, [pc, #316]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e32:	4b4f      	ldr	r3, [pc, #316]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e34:	689b      	ldr	r3, [r3, #8]
 8012e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	689b      	ldr	r3, [r3, #8]
 8012e3e:	4313      	orrs	r3, r2
 8012e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	f003 0301 	and.w	r3, r3, #1
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d044      	beq.n	8012ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	d107      	bne.n	8012e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012e56:	4b46      	ldr	r3, [pc, #280]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d119      	bne.n	8012e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012e62:	2301      	movs	r3, #1
 8012e64:	e07d      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	2b02      	cmp	r3, #2
 8012e6c:	d003      	beq.n	8012e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012e72:	2b03      	cmp	r3, #3
 8012e74:	d107      	bne.n	8012e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012e76:	4b3e      	ldr	r3, [pc, #248]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d109      	bne.n	8012e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012e82:	2301      	movs	r3, #1
 8012e84:	e06d      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012e86:	4b3a      	ldr	r3, [pc, #232]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f003 0302 	and.w	r3, r3, #2
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d101      	bne.n	8012e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012e92:	2301      	movs	r3, #1
 8012e94:	e065      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012e96:	4936      	ldr	r1, [pc, #216]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e98:	4b35      	ldr	r3, [pc, #212]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e9a:	689b      	ldr	r3, [r3, #8]
 8012e9c:	f023 0203 	bic.w	r2, r3, #3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	4313      	orrs	r3, r2
 8012ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012ea8:	f7fd fa9a 	bl	80103e0 <HAL_GetTick>
 8012eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012eae:	e00a      	b.n	8012ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012eb0:	f7fd fa96 	bl	80103e0 <HAL_GetTick>
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	1ad3      	subs	r3, r2, r3
 8012eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d901      	bls.n	8012ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012ec2:	2303      	movs	r3, #3
 8012ec4:	e04d      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012ec6:	4b2a      	ldr	r3, [pc, #168]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012ec8:	689b      	ldr	r3, [r3, #8]
 8012eca:	f003 020c 	and.w	r2, r3, #12
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	009b      	lsls	r3, r3, #2
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d1eb      	bne.n	8012eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012ed8:	4b24      	ldr	r3, [pc, #144]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	f003 020f 	and.w	r2, r3, #15
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d90c      	bls.n	8012f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012ee6:	4b21      	ldr	r3, [pc, #132]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012ee8:	683a      	ldr	r2, [r7, #0]
 8012eea:	b2d2      	uxtb	r2, r2
 8012eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012eee:	4b1f      	ldr	r3, [pc, #124]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	f003 020f 	and.w	r2, r3, #15
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d001      	beq.n	8012f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012efc:	2301      	movs	r3, #1
 8012efe:	e030      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f003 0304 	and.w	r3, r3, #4
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d008      	beq.n	8012f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012f0c:	4918      	ldr	r1, [pc, #96]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f0e:	4b18      	ldr	r3, [pc, #96]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f10:	689b      	ldr	r3, [r3, #8]
 8012f12:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	68db      	ldr	r3, [r3, #12]
 8012f1a:	4313      	orrs	r3, r2
 8012f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	f003 0308 	and.w	r3, r3, #8
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d009      	beq.n	8012f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012f2a:	4911      	ldr	r1, [pc, #68]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f2c:	4b10      	ldr	r3, [pc, #64]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f2e:	689b      	ldr	r3, [r3, #8]
 8012f30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	691b      	ldr	r3, [r3, #16]
 8012f38:	00db      	lsls	r3, r3, #3
 8012f3a:	4313      	orrs	r3, r2
 8012f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012f3e:	f000 f81d 	bl	8012f7c <HAL_RCC_GetSysClockFreq>
 8012f42:	4601      	mov	r1, r0
 8012f44:	4b0a      	ldr	r3, [pc, #40]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f46:	689b      	ldr	r3, [r3, #8]
 8012f48:	091b      	lsrs	r3, r3, #4
 8012f4a:	f003 030f 	and.w	r3, r3, #15
 8012f4e:	4a09      	ldr	r2, [pc, #36]	; (8012f74 <HAL_RCC_ClockConfig+0x1bc>)
 8012f50:	5cd3      	ldrb	r3, [r2, r3]
 8012f52:	fa21 f303 	lsr.w	r3, r1, r3
 8012f56:	4a08      	ldr	r2, [pc, #32]	; (8012f78 <HAL_RCC_ClockConfig+0x1c0>)
 8012f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8012f5a:	2000      	movs	r0, #0
 8012f5c:	f012 fa4e 	bl	80253fc <HAL_InitTick>

  return HAL_OK;
 8012f60:	2300      	movs	r3, #0
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3710      	adds	r7, #16
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	40023c00 	.word	0x40023c00
 8012f70:	40023800 	.word	0x40023800
 8012f74:	0802b474 	.word	0x0802b474
 8012f78:	20000050 	.word	0x20000050

08012f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f80:	b087      	sub	sp, #28
 8012f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012f84:	2200      	movs	r2, #0
 8012f86:	60fa      	str	r2, [r7, #12]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	617a      	str	r2, [r7, #20]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8012f90:	2200      	movs	r2, #0
 8012f92:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012f94:	4a51      	ldr	r2, [pc, #324]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8012f96:	6892      	ldr	r2, [r2, #8]
 8012f98:	f002 020c 	and.w	r2, r2, #12
 8012f9c:	2a04      	cmp	r2, #4
 8012f9e:	d007      	beq.n	8012fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8012fa0:	2a08      	cmp	r2, #8
 8012fa2:	d008      	beq.n	8012fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8012fa4:	2a00      	cmp	r2, #0
 8012fa6:	f040 8090 	bne.w	80130ca <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012faa:	4b4d      	ldr	r3, [pc, #308]	; (80130e0 <HAL_RCC_GetSysClockFreq+0x164>)
 8012fac:	613b      	str	r3, [r7, #16]
       break;
 8012fae:	e08f      	b.n	80130d0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012fb0:	4b4c      	ldr	r3, [pc, #304]	; (80130e4 <HAL_RCC_GetSysClockFreq+0x168>)
 8012fb2:	613b      	str	r3, [r7, #16]
      break;
 8012fb4:	e08c      	b.n	80130d0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012fb6:	4a49      	ldr	r2, [pc, #292]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8012fb8:	6852      	ldr	r2, [r2, #4]
 8012fba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012fbe:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012fc0:	4a46      	ldr	r2, [pc, #280]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8012fc2:	6852      	ldr	r2, [r2, #4]
 8012fc4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8012fc8:	2a00      	cmp	r2, #0
 8012fca:	d023      	beq.n	8013014 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012fcc:	4b43      	ldr	r3, [pc, #268]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	099b      	lsrs	r3, r3, #6
 8012fd2:	f04f 0400 	mov.w	r4, #0
 8012fd6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012fda:	f04f 0200 	mov.w	r2, #0
 8012fde:	ea03 0301 	and.w	r3, r3, r1
 8012fe2:	ea04 0402 	and.w	r4, r4, r2
 8012fe6:	4a3f      	ldr	r2, [pc, #252]	; (80130e4 <HAL_RCC_GetSysClockFreq+0x168>)
 8012fe8:	fb02 f104 	mul.w	r1, r2, r4
 8012fec:	2200      	movs	r2, #0
 8012fee:	fb02 f203 	mul.w	r2, r2, r3
 8012ff2:	440a      	add	r2, r1
 8012ff4:	493b      	ldr	r1, [pc, #236]	; (80130e4 <HAL_RCC_GetSysClockFreq+0x168>)
 8012ff6:	fba3 0101 	umull	r0, r1, r3, r1
 8012ffa:	1853      	adds	r3, r2, r1
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	f04f 0400 	mov.w	r4, #0
 8013004:	461a      	mov	r2, r3
 8013006:	4623      	mov	r3, r4
 8013008:	f7fd f82c 	bl	8010064 <__aeabi_uldivmod>
 801300c:	4603      	mov	r3, r0
 801300e:	460c      	mov	r4, r1
 8013010:	617b      	str	r3, [r7, #20]
 8013012:	e04c      	b.n	80130ae <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013014:	4a31      	ldr	r2, [pc, #196]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8013016:	6852      	ldr	r2, [r2, #4]
 8013018:	0992      	lsrs	r2, r2, #6
 801301a:	4611      	mov	r1, r2
 801301c:	f04f 0200 	mov.w	r2, #0
 8013020:	f240 15ff 	movw	r5, #511	; 0x1ff
 8013024:	f04f 0600 	mov.w	r6, #0
 8013028:	ea05 0501 	and.w	r5, r5, r1
 801302c:	ea06 0602 	and.w	r6, r6, r2
 8013030:	4629      	mov	r1, r5
 8013032:	4632      	mov	r2, r6
 8013034:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8013038:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 801303c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8013040:	4651      	mov	r1, sl
 8013042:	465a      	mov	r2, fp
 8013044:	46aa      	mov	sl, r5
 8013046:	46b3      	mov	fp, r6
 8013048:	4655      	mov	r5, sl
 801304a:	465e      	mov	r6, fp
 801304c:	1b4d      	subs	r5, r1, r5
 801304e:	eb62 0606 	sbc.w	r6, r2, r6
 8013052:	4629      	mov	r1, r5
 8013054:	4632      	mov	r2, r6
 8013056:	0194      	lsls	r4, r2, #6
 8013058:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801305c:	018b      	lsls	r3, r1, #6
 801305e:	1a5b      	subs	r3, r3, r1
 8013060:	eb64 0402 	sbc.w	r4, r4, r2
 8013064:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8013068:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 801306c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8013070:	4643      	mov	r3, r8
 8013072:	464c      	mov	r4, r9
 8013074:	4655      	mov	r5, sl
 8013076:	465e      	mov	r6, fp
 8013078:	18ed      	adds	r5, r5, r3
 801307a:	eb46 0604 	adc.w	r6, r6, r4
 801307e:	462b      	mov	r3, r5
 8013080:	4634      	mov	r4, r6
 8013082:	02a2      	lsls	r2, r4, #10
 8013084:	607a      	str	r2, [r7, #4]
 8013086:	687a      	ldr	r2, [r7, #4]
 8013088:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801308c:	607a      	str	r2, [r7, #4]
 801308e:	029b      	lsls	r3, r3, #10
 8013090:	603b      	str	r3, [r7, #0]
 8013092:	e897 0018 	ldmia.w	r7, {r3, r4}
 8013096:	4618      	mov	r0, r3
 8013098:	4621      	mov	r1, r4
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	f04f 0400 	mov.w	r4, #0
 80130a0:	461a      	mov	r2, r3
 80130a2:	4623      	mov	r3, r4
 80130a4:	f7fc ffde 	bl	8010064 <__aeabi_uldivmod>
 80130a8:	4603      	mov	r3, r0
 80130aa:	460c      	mov	r4, r1
 80130ac:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80130ae:	4b0b      	ldr	r3, [pc, #44]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 80130b0:	685b      	ldr	r3, [r3, #4]
 80130b2:	0c1b      	lsrs	r3, r3, #16
 80130b4:	f003 0303 	and.w	r3, r3, #3
 80130b8:	3301      	adds	r3, #1
 80130ba:	005b      	lsls	r3, r3, #1
 80130bc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80130be:	697a      	ldr	r2, [r7, #20]
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80130c6:	613b      	str	r3, [r7, #16]
      break;
 80130c8:	e002      	b.n	80130d0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80130ca:	4b05      	ldr	r3, [pc, #20]	; (80130e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80130cc:	613b      	str	r3, [r7, #16]
      break;
 80130ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80130d0:	693b      	ldr	r3, [r7, #16]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	371c      	adds	r7, #28
 80130d6:	46bd      	mov	sp, r7
 80130d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130dc:	40023800 	.word	0x40023800
 80130e0:	00f42400 	.word	0x00f42400
 80130e4:	017d7840 	.word	0x017d7840

080130e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80130e8:	b480      	push	{r7}
 80130ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80130ec:	4b03      	ldr	r3, [pc, #12]	; (80130fc <HAL_RCC_GetHCLKFreq+0x14>)
 80130ee:	681b      	ldr	r3, [r3, #0]
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	20000050 	.word	0x20000050

08013100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013104:	f7ff fff0 	bl	80130e8 <HAL_RCC_GetHCLKFreq>
 8013108:	4601      	mov	r1, r0
 801310a:	4b05      	ldr	r3, [pc, #20]	; (8013120 <HAL_RCC_GetPCLK1Freq+0x20>)
 801310c:	689b      	ldr	r3, [r3, #8]
 801310e:	0a9b      	lsrs	r3, r3, #10
 8013110:	f003 0307 	and.w	r3, r3, #7
 8013114:	4a03      	ldr	r2, [pc, #12]	; (8013124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013116:	5cd3      	ldrb	r3, [r2, r3]
 8013118:	fa21 f303 	lsr.w	r3, r1, r3
}
 801311c:	4618      	mov	r0, r3
 801311e:	bd80      	pop	{r7, pc}
 8013120:	40023800 	.word	0x40023800
 8013124:	0802b484 	.word	0x0802b484

08013128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801312c:	f7ff ffdc 	bl	80130e8 <HAL_RCC_GetHCLKFreq>
 8013130:	4601      	mov	r1, r0
 8013132:	4b05      	ldr	r3, [pc, #20]	; (8013148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013134:	689b      	ldr	r3, [r3, #8]
 8013136:	0b5b      	lsrs	r3, r3, #13
 8013138:	f003 0307 	and.w	r3, r3, #7
 801313c:	4a03      	ldr	r2, [pc, #12]	; (801314c <HAL_RCC_GetPCLK2Freq+0x24>)
 801313e:	5cd3      	ldrb	r3, [r2, r3]
 8013140:	fa21 f303 	lsr.w	r3, r1, r3
}
 8013144:	4618      	mov	r0, r3
 8013146:	bd80      	pop	{r7, pc}
 8013148:	40023800 	.word	0x40023800
 801314c:	0802b484 	.word	0x0802b484

08013150 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	220f      	movs	r2, #15
 801315e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8013160:	4b12      	ldr	r3, [pc, #72]	; (80131ac <HAL_RCC_GetClockConfig+0x5c>)
 8013162:	689b      	ldr	r3, [r3, #8]
 8013164:	f003 0203 	and.w	r2, r3, #3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801316c:	4b0f      	ldr	r3, [pc, #60]	; (80131ac <HAL_RCC_GetClockConfig+0x5c>)
 801316e:	689b      	ldr	r3, [r3, #8]
 8013170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8013178:	4b0c      	ldr	r3, [pc, #48]	; (80131ac <HAL_RCC_GetClockConfig+0x5c>)
 801317a:	689b      	ldr	r3, [r3, #8]
 801317c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8013184:	4b09      	ldr	r3, [pc, #36]	; (80131ac <HAL_RCC_GetClockConfig+0x5c>)
 8013186:	689b      	ldr	r3, [r3, #8]
 8013188:	08db      	lsrs	r3, r3, #3
 801318a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013192:	4b07      	ldr	r3, [pc, #28]	; (80131b0 <HAL_RCC_GetClockConfig+0x60>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	f003 020f 	and.w	r2, r3, #15
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	601a      	str	r2, [r3, #0]
}
 801319e:	bf00      	nop
 80131a0:	370c      	adds	r7, #12
 80131a2:	46bd      	mov	sp, r7
 80131a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a8:	4770      	bx	lr
 80131aa:	bf00      	nop
 80131ac:	40023800 	.word	0x40023800
 80131b0:	40023c00 	.word	0x40023c00

080131b4 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b082      	sub	sp, #8
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d101      	bne.n	80131c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80131c2:	2301      	movs	r3, #1
 80131c4:	e01d      	b.n	8013202 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d106      	bne.n	80131e0 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2200      	movs	r2, #0
 80131d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f012 face 	bl	802577c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2202      	movs	r2, #2
 80131e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	3304      	adds	r3, #4
 80131f0:	4619      	mov	r1, r3
 80131f2:	4610      	mov	r0, r2
 80131f4:	f000 fa5a 	bl	80136ac <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2201      	movs	r2, #1
 80131fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8013200:	2300      	movs	r3, #0
}
 8013202:	4618      	mov	r0, r3
 8013204:	3708      	adds	r7, #8
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}

0801320a <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801320a:	b480      	push	{r7}
 801320c:	b083      	sub	sp, #12
 801320e:	af00      	add	r7, sp, #0
 8013210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	6812      	ldr	r2, [r2, #0]
 801321a:	68d2      	ldr	r2, [r2, #12]
 801321c:	f042 0201 	orr.w	r2, r2, #1
 8013220:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	687a      	ldr	r2, [r7, #4]
 8013228:	6812      	ldr	r2, [r2, #0]
 801322a:	6812      	ldr	r2, [r2, #0]
 801322c:	f042 0201 	orr.w	r2, r2, #1
 8013230:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8013232:	2300      	movs	r3, #0
}
 8013234:	4618      	mov	r0, r3
 8013236:	370c      	adds	r7, #12
 8013238:	46bd      	mov	sp, r7
 801323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323e:	4770      	bx	lr

08013240 <HAL_TIM_Base_Stop_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8013240:	b480      	push	{r7}
 8013242:	b083      	sub	sp, #12
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	687a      	ldr	r2, [r7, #4]
 801324e:	6812      	ldr	r2, [r2, #0]
 8013250:	68d2      	ldr	r2, [r2, #12]
 8013252:	f022 0201 	bic.w	r2, r2, #1
 8013256:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	6a1a      	ldr	r2, [r3, #32]
 801325e:	f241 1311 	movw	r3, #4369	; 0x1111
 8013262:	4013      	ands	r3, r2
 8013264:	2b00      	cmp	r3, #0
 8013266:	d10f      	bne.n	8013288 <HAL_TIM_Base_Stop_IT+0x48>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	6a1a      	ldr	r2, [r3, #32]
 801326e:	f240 4344 	movw	r3, #1092	; 0x444
 8013272:	4013      	ands	r3, r2
 8013274:	2b00      	cmp	r3, #0
 8013276:	d107      	bne.n	8013288 <HAL_TIM_Base_Stop_IT+0x48>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	687a      	ldr	r2, [r7, #4]
 801327e:	6812      	ldr	r2, [r2, #0]
 8013280:	6812      	ldr	r2, [r2, #0]
 8013282:	f022 0201 	bic.w	r2, r2, #1
 8013286:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
 8013288:	2300      	movs	r3, #0
}
 801328a:	4618      	mov	r0, r3
 801328c:	370c      	adds	r7, #12
 801328e:	46bd      	mov	sp, r7
 8013290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013294:	4770      	bx	lr

08013296 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013296:	b580      	push	{r7, lr}
 8013298:	b082      	sub	sp, #8
 801329a:	af00      	add	r7, sp, #0
 801329c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	691b      	ldr	r3, [r3, #16]
 80132a4:	f003 0302 	and.w	r3, r3, #2
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	d122      	bne.n	80132f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	f003 0302 	and.w	r3, r3, #2
 80132b6:	2b02      	cmp	r3, #2
 80132b8:	d11b      	bne.n	80132f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f06f 0202 	mvn.w	r2, #2
 80132c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2201      	movs	r2, #1
 80132c8:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	699b      	ldr	r3, [r3, #24]
 80132d0:	f003 0303 	and.w	r3, r3, #3
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d003      	beq.n	80132e0 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f000 f9c9 	bl	8013670 <HAL_TIM_IC_CaptureCallback>
 80132de:	e005      	b.n	80132ec <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f000 f9bb 	bl	801365c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f000 f9cc 	bl	8013684 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2200      	movs	r2, #0
 80132f0:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	691b      	ldr	r3, [r3, #16]
 80132f8:	f003 0304 	and.w	r3, r3, #4
 80132fc:	2b04      	cmp	r3, #4
 80132fe:	d122      	bne.n	8013346 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	68db      	ldr	r3, [r3, #12]
 8013306:	f003 0304 	and.w	r3, r3, #4
 801330a:	2b04      	cmp	r3, #4
 801330c:	d11b      	bne.n	8013346 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	f06f 0204 	mvn.w	r2, #4
 8013316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2202      	movs	r2, #2
 801331c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	699b      	ldr	r3, [r3, #24]
 8013324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013328:	2b00      	cmp	r3, #0
 801332a:	d003      	beq.n	8013334 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 f99f 	bl	8013670 <HAL_TIM_IC_CaptureCallback>
 8013332:	e005      	b.n	8013340 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f000 f991 	bl	801365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	f000 f9a2 	bl	8013684 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2200      	movs	r2, #0
 8013344:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	691b      	ldr	r3, [r3, #16]
 801334c:	f003 0308 	and.w	r3, r3, #8
 8013350:	2b08      	cmp	r3, #8
 8013352:	d122      	bne.n	801339a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	68db      	ldr	r3, [r3, #12]
 801335a:	f003 0308 	and.w	r3, r3, #8
 801335e:	2b08      	cmp	r3, #8
 8013360:	d11b      	bne.n	801339a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	f06f 0208 	mvn.w	r2, #8
 801336a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2204      	movs	r2, #4
 8013370:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	69db      	ldr	r3, [r3, #28]
 8013378:	f003 0303 	and.w	r3, r3, #3
 801337c:	2b00      	cmp	r3, #0
 801337e:	d003      	beq.n	8013388 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f000 f975 	bl	8013670 <HAL_TIM_IC_CaptureCallback>
 8013386:	e005      	b.n	8013394 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f000 f967 	bl	801365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f000 f978 	bl	8013684 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2200      	movs	r2, #0
 8013398:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	691b      	ldr	r3, [r3, #16]
 80133a0:	f003 0310 	and.w	r3, r3, #16
 80133a4:	2b10      	cmp	r3, #16
 80133a6:	d122      	bne.n	80133ee <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	68db      	ldr	r3, [r3, #12]
 80133ae:	f003 0310 	and.w	r3, r3, #16
 80133b2:	2b10      	cmp	r3, #16
 80133b4:	d11b      	bne.n	80133ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f06f 0210 	mvn.w	r2, #16
 80133be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2208      	movs	r2, #8
 80133c4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	69db      	ldr	r3, [r3, #28]
 80133cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d003      	beq.n	80133dc <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f000 f94b 	bl	8013670 <HAL_TIM_IC_CaptureCallback>
 80133da:	e005      	b.n	80133e8 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f000 f93d 	bl	801365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f000 f94e 	bl	8013684 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2200      	movs	r2, #0
 80133ec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	691b      	ldr	r3, [r3, #16]
 80133f4:	f003 0301 	and.w	r3, r3, #1
 80133f8:	2b01      	cmp	r3, #1
 80133fa:	d10e      	bne.n	801341a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	68db      	ldr	r3, [r3, #12]
 8013402:	f003 0301 	and.w	r3, r3, #1
 8013406:	2b01      	cmp	r3, #1
 8013408:	d107      	bne.n	801341a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	f06f 0201 	mvn.w	r2, #1
 8013412:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f011 fbc9 	bl	8024bac <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	691b      	ldr	r3, [r3, #16]
 8013420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013424:	2b80      	cmp	r3, #128	; 0x80
 8013426:	d10e      	bne.n	8013446 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	68db      	ldr	r3, [r3, #12]
 801342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013432:	2b80      	cmp	r3, #128	; 0x80
 8013434:	d107      	bne.n	8013446 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801343e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f000 fad5 	bl	80139f0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	691b      	ldr	r3, [r3, #16]
 801344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013450:	2b40      	cmp	r3, #64	; 0x40
 8013452:	d10e      	bne.n	8013472 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	68db      	ldr	r3, [r3, #12]
 801345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801345e:	2b40      	cmp	r3, #64	; 0x40
 8013460:	d107      	bne.n	8013472 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801346a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f000 f913 	bl	8013698 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	691b      	ldr	r3, [r3, #16]
 8013478:	f003 0320 	and.w	r3, r3, #32
 801347c:	2b20      	cmp	r3, #32
 801347e:	d10e      	bne.n	801349e <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	f003 0320 	and.w	r3, r3, #32
 801348a:	2b20      	cmp	r3, #32
 801348c:	d107      	bne.n	801349e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	f06f 0220 	mvn.w	r2, #32
 8013496:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f000 fa9f 	bl	80139dc <HAL_TIMEx_CommutationCallback>
    }
  }
}
 801349e:	bf00      	nop
 80134a0:	3708      	adds	r7, #8
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}

080134a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b084      	sub	sp, #16
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
 80134ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80134b0:	2300      	movs	r3, #0
 80134b2:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80134ba:	2b01      	cmp	r3, #1
 80134bc:	d101      	bne.n	80134c2 <HAL_TIM_ConfigClockSource+0x1c>
 80134be:	2302      	movs	r3, #2
 80134c0:	e0c8      	b.n	8013654 <HAL_TIM_ConfigClockSource+0x1ae>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2201      	movs	r2, #1
 80134c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	2202      	movs	r2, #2
 80134ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80134e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80134e8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	68fa      	ldr	r2, [r7, #12]
 80134f0:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2b40      	cmp	r3, #64	; 0x40
 80134f8:	d077      	beq.n	80135ea <HAL_TIM_ConfigClockSource+0x144>
 80134fa:	2b40      	cmp	r3, #64	; 0x40
 80134fc:	d80e      	bhi.n	801351c <HAL_TIM_ConfigClockSource+0x76>
 80134fe:	2b10      	cmp	r3, #16
 8013500:	f000 808a 	beq.w	8013618 <HAL_TIM_ConfigClockSource+0x172>
 8013504:	2b10      	cmp	r3, #16
 8013506:	d802      	bhi.n	801350e <HAL_TIM_ConfigClockSource+0x68>
 8013508:	2b00      	cmp	r3, #0
 801350a:	d07e      	beq.n	801360a <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 801350c:	e099      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 801350e:	2b20      	cmp	r3, #32
 8013510:	f000 8089 	beq.w	8013626 <HAL_TIM_ConfigClockSource+0x180>
 8013514:	2b30      	cmp	r3, #48	; 0x30
 8013516:	f000 808d 	beq.w	8013634 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 801351a:	e092      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 801351c:	2b70      	cmp	r3, #112	; 0x70
 801351e:	d016      	beq.n	801354e <HAL_TIM_ConfigClockSource+0xa8>
 8013520:	2b70      	cmp	r3, #112	; 0x70
 8013522:	d804      	bhi.n	801352e <HAL_TIM_ConfigClockSource+0x88>
 8013524:	2b50      	cmp	r3, #80	; 0x50
 8013526:	d040      	beq.n	80135aa <HAL_TIM_ConfigClockSource+0x104>
 8013528:	2b60      	cmp	r3, #96	; 0x60
 801352a:	d04e      	beq.n	80135ca <HAL_TIM_ConfigClockSource+0x124>
    break;    
 801352c:	e089      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 801352e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013532:	d003      	beq.n	801353c <HAL_TIM_ConfigClockSource+0x96>
 8013534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013538:	d024      	beq.n	8013584 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 801353a:	e082      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	6812      	ldr	r2, [r2, #0]
 8013544:	6892      	ldr	r2, [r2, #8]
 8013546:	f022 0207 	bic.w	r2, r2, #7
 801354a:	609a      	str	r2, [r3, #8]
    break;
 801354c:	e079      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6818      	ldr	r0, [r3, #0]
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	6899      	ldr	r1, [r3, #8]
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	685a      	ldr	r2, [r3, #4]
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	f000 f9d6 	bl	801390e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	689b      	ldr	r3, [r3, #8]
 8013568:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8013570:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013578:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	68fa      	ldr	r2, [r7, #12]
 8013580:	609a      	str	r2, [r3, #8]
    break;
 8013582:	e05e      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6818      	ldr	r0, [r3, #0]
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	6899      	ldr	r1, [r3, #8]
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	685a      	ldr	r2, [r3, #4]
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	68db      	ldr	r3, [r3, #12]
 8013594:	f000 f9bb 	bl	801390e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	687a      	ldr	r2, [r7, #4]
 801359e:	6812      	ldr	r2, [r2, #0]
 80135a0:	6892      	ldr	r2, [r2, #8]
 80135a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80135a6:	609a      	str	r2, [r3, #8]
    break;
 80135a8:	e04b      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6818      	ldr	r0, [r3, #0]
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	6859      	ldr	r1, [r3, #4]
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	68db      	ldr	r3, [r3, #12]
 80135b6:	461a      	mov	r2, r3
 80135b8:	f000 f922 	bl	8013800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2150      	movs	r1, #80	; 0x50
 80135c2:	4618      	mov	r0, r3
 80135c4:	f000 f983 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 80135c8:	e03b      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6818      	ldr	r0, [r3, #0]
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	6859      	ldr	r1, [r3, #4]
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	68db      	ldr	r3, [r3, #12]
 80135d6:	461a      	mov	r2, r3
 80135d8:	f000 f945 	bl	8013866 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2160      	movs	r1, #96	; 0x60
 80135e2:	4618      	mov	r0, r3
 80135e4:	f000 f973 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 80135e8:	e02b      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6818      	ldr	r0, [r3, #0]
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	6859      	ldr	r1, [r3, #4]
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	68db      	ldr	r3, [r3, #12]
 80135f6:	461a      	mov	r2, r3
 80135f8:	f000 f902 	bl	8013800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2140      	movs	r1, #64	; 0x40
 8013602:	4618      	mov	r0, r3
 8013604:	f000 f963 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013608:	e01b      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	2100      	movs	r1, #0
 8013610:	4618      	mov	r0, r3
 8013612:	f000 f95c 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013616:	e014      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	2110      	movs	r1, #16
 801361e:	4618      	mov	r0, r3
 8013620:	f000 f955 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013624:	e00d      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	2120      	movs	r1, #32
 801362c:	4618      	mov	r0, r3
 801362e:	f000 f94e 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013632:	e006      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	2130      	movs	r1, #48	; 0x30
 801363a:	4618      	mov	r0, r3
 801363c:	f000 f947 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013640:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2201      	movs	r2, #1
 8013646:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2200      	movs	r2, #0
 801364e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8013652:	2300      	movs	r3, #0
}
 8013654:	4618      	mov	r0, r3
 8013656:	3710      	adds	r7, #16
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801365c:	b480      	push	{r7}
 801365e:	b083      	sub	sp, #12
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013664:	bf00      	nop
 8013666:	370c      	adds	r7, #12
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr

08013670 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013670:	b480      	push	{r7}
 8013672:	b083      	sub	sp, #12
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013678:	bf00      	nop
 801367a:	370c      	adds	r7, #12
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr

08013684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013684:	b480      	push	{r7}
 8013686:	b083      	sub	sp, #12
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801368c:	bf00      	nop
 801368e:	370c      	adds	r7, #12
 8013690:	46bd      	mov	sp, r7
 8013692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013696:	4770      	bx	lr

08013698 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013698:	b480      	push	{r7}
 801369a:	b083      	sub	sp, #12
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80136a0:	bf00      	nop
 80136a2:	370c      	adds	r7, #12
 80136a4:	46bd      	mov	sp, r7
 80136a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136aa:	4770      	bx	lr

080136ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b085      	sub	sp, #20
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80136b6:	2300      	movs	r3, #0
 80136b8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	4a44      	ldr	r2, [pc, #272]	; (80137d4 <TIM_Base_SetConfig+0x128>)
 80136c4:	4293      	cmp	r3, r2
 80136c6:	d013      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80136ce:	d00f      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	4a41      	ldr	r2, [pc, #260]	; (80137d8 <TIM_Base_SetConfig+0x12c>)
 80136d4:	4293      	cmp	r3, r2
 80136d6:	d00b      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	4a40      	ldr	r2, [pc, #256]	; (80137dc <TIM_Base_SetConfig+0x130>)
 80136dc:	4293      	cmp	r3, r2
 80136de:	d007      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	4a3f      	ldr	r2, [pc, #252]	; (80137e0 <TIM_Base_SetConfig+0x134>)
 80136e4:	4293      	cmp	r3, r2
 80136e6:	d003      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	4a3e      	ldr	r2, [pc, #248]	; (80137e4 <TIM_Base_SetConfig+0x138>)
 80136ec:	4293      	cmp	r3, r2
 80136ee:	d101      	bne.n	80136f4 <TIM_Base_SetConfig+0x48>
 80136f0:	2301      	movs	r3, #1
 80136f2:	e000      	b.n	80136f6 <TIM_Base_SetConfig+0x4a>
 80136f4:	2300      	movs	r3, #0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d008      	beq.n	801370c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	685b      	ldr	r3, [r3, #4]
 8013706:	68fa      	ldr	r2, [r7, #12]
 8013708:	4313      	orrs	r3, r2
 801370a:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	4a31      	ldr	r2, [pc, #196]	; (80137d4 <TIM_Base_SetConfig+0x128>)
 8013710:	4293      	cmp	r3, r2
 8013712:	d02b      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801371a:	d027      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	4a2e      	ldr	r2, [pc, #184]	; (80137d8 <TIM_Base_SetConfig+0x12c>)
 8013720:	4293      	cmp	r3, r2
 8013722:	d023      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	4a2d      	ldr	r2, [pc, #180]	; (80137dc <TIM_Base_SetConfig+0x130>)
 8013728:	4293      	cmp	r3, r2
 801372a:	d01f      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	4a2c      	ldr	r2, [pc, #176]	; (80137e0 <TIM_Base_SetConfig+0x134>)
 8013730:	4293      	cmp	r3, r2
 8013732:	d01b      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	4a2b      	ldr	r2, [pc, #172]	; (80137e4 <TIM_Base_SetConfig+0x138>)
 8013738:	4293      	cmp	r3, r2
 801373a:	d017      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	4a2a      	ldr	r2, [pc, #168]	; (80137e8 <TIM_Base_SetConfig+0x13c>)
 8013740:	4293      	cmp	r3, r2
 8013742:	d013      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	4a29      	ldr	r2, [pc, #164]	; (80137ec <TIM_Base_SetConfig+0x140>)
 8013748:	4293      	cmp	r3, r2
 801374a:	d00f      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	4a28      	ldr	r2, [pc, #160]	; (80137f0 <TIM_Base_SetConfig+0x144>)
 8013750:	4293      	cmp	r3, r2
 8013752:	d00b      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	4a27      	ldr	r2, [pc, #156]	; (80137f4 <TIM_Base_SetConfig+0x148>)
 8013758:	4293      	cmp	r3, r2
 801375a:	d007      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	4a26      	ldr	r2, [pc, #152]	; (80137f8 <TIM_Base_SetConfig+0x14c>)
 8013760:	4293      	cmp	r3, r2
 8013762:	d003      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	4a25      	ldr	r2, [pc, #148]	; (80137fc <TIM_Base_SetConfig+0x150>)
 8013768:	4293      	cmp	r3, r2
 801376a:	d101      	bne.n	8013770 <TIM_Base_SetConfig+0xc4>
 801376c:	2301      	movs	r3, #1
 801376e:	e000      	b.n	8013772 <TIM_Base_SetConfig+0xc6>
 8013770:	2300      	movs	r3, #0
 8013772:	2b00      	cmp	r3, #0
 8013774:	d008      	beq.n	8013788 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801377c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	68db      	ldr	r3, [r3, #12]
 8013782:	68fa      	ldr	r2, [r7, #12]
 8013784:	4313      	orrs	r3, r2
 8013786:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	689a      	ldr	r2, [r3, #8]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	4a0c      	ldr	r2, [pc, #48]	; (80137d4 <TIM_Base_SetConfig+0x128>)
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d003      	beq.n	80137ae <TIM_Base_SetConfig+0x102>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	4a0e      	ldr	r2, [pc, #56]	; (80137e4 <TIM_Base_SetConfig+0x138>)
 80137aa:	4293      	cmp	r3, r2
 80137ac:	d101      	bne.n	80137b2 <TIM_Base_SetConfig+0x106>
 80137ae:	2301      	movs	r3, #1
 80137b0:	e000      	b.n	80137b4 <TIM_Base_SetConfig+0x108>
 80137b2:	2300      	movs	r3, #0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d003      	beq.n	80137c0 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	691a      	ldr	r2, [r3, #16]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2201      	movs	r2, #1
 80137c4:	615a      	str	r2, [r3, #20]
}
 80137c6:	bf00      	nop
 80137c8:	3714      	adds	r7, #20
 80137ca:	46bd      	mov	sp, r7
 80137cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d0:	4770      	bx	lr
 80137d2:	bf00      	nop
 80137d4:	40010000 	.word	0x40010000
 80137d8:	40000400 	.word	0x40000400
 80137dc:	40000800 	.word	0x40000800
 80137e0:	40000c00 	.word	0x40000c00
 80137e4:	40010400 	.word	0x40010400
 80137e8:	40014000 	.word	0x40014000
 80137ec:	40014400 	.word	0x40014400
 80137f0:	40014800 	.word	0x40014800
 80137f4:	40001800 	.word	0x40001800
 80137f8:	40001c00 	.word	0x40001c00
 80137fc:	40002000 	.word	0x40002000

08013800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013800:	b480      	push	{r7}
 8013802:	b087      	sub	sp, #28
 8013804:	af00      	add	r7, sp, #0
 8013806:	60f8      	str	r0, [r7, #12]
 8013808:	60b9      	str	r1, [r7, #8]
 801380a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 801380c:	2300      	movs	r3, #0
 801380e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8013810:	2300      	movs	r3, #0
 8013812:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	6a1b      	ldr	r3, [r3, #32]
 8013818:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	6a1b      	ldr	r3, [r3, #32]
 801381e:	f023 0201 	bic.w	r2, r3, #1
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	699b      	ldr	r3, [r3, #24]
 801382a:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013832:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	011b      	lsls	r3, r3, #4
 8013838:	697a      	ldr	r2, [r7, #20]
 801383a:	4313      	orrs	r3, r2
 801383c:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	f023 030a 	bic.w	r3, r3, #10
 8013844:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8013846:	693a      	ldr	r2, [r7, #16]
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	4313      	orrs	r3, r2
 801384c:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	697a      	ldr	r2, [r7, #20]
 8013852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	693a      	ldr	r2, [r7, #16]
 8013858:	621a      	str	r2, [r3, #32]
}
 801385a:	bf00      	nop
 801385c:	371c      	adds	r7, #28
 801385e:	46bd      	mov	sp, r7
 8013860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013864:	4770      	bx	lr

08013866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013866:	b480      	push	{r7}
 8013868:	b087      	sub	sp, #28
 801386a:	af00      	add	r7, sp, #0
 801386c:	60f8      	str	r0, [r7, #12]
 801386e:	60b9      	str	r1, [r7, #8]
 8013870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8013872:	2300      	movs	r3, #0
 8013874:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8013876:	2300      	movs	r3, #0
 8013878:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	6a1b      	ldr	r3, [r3, #32]
 801387e:	f023 0210 	bic.w	r2, r3, #16
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	699b      	ldr	r3, [r3, #24]
 801388a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	6a1b      	ldr	r3, [r3, #32]
 8013890:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	031b      	lsls	r3, r3, #12
 801389e:	697a      	ldr	r2, [r7, #20]
 80138a0:	4313      	orrs	r3, r2
 80138a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80138aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	011b      	lsls	r3, r3, #4
 80138b0:	693a      	ldr	r2, [r7, #16]
 80138b2:	4313      	orrs	r3, r2
 80138b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	697a      	ldr	r2, [r7, #20]
 80138ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	693a      	ldr	r2, [r7, #16]
 80138c0:	621a      	str	r2, [r3, #32]
}
 80138c2:	bf00      	nop
 80138c4:	371c      	adds	r7, #28
 80138c6:	46bd      	mov	sp, r7
 80138c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138cc:	4770      	bx	lr

080138ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 80138ce:	b480      	push	{r7}
 80138d0:	b085      	sub	sp, #20
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
 80138d6:	460b      	mov	r3, r1
 80138d8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80138da:	2300      	movs	r3, #0
 80138dc:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	689b      	ldr	r3, [r3, #8]
 80138e2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80138ea:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80138ec:	887b      	ldrh	r3, [r7, #2]
 80138ee:	f043 0307 	orr.w	r3, r3, #7
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	461a      	mov	r2, r3
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	4313      	orrs	r3, r2
 80138fa:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	609a      	str	r2, [r3, #8]
}
 8013902:	bf00      	nop
 8013904:	3714      	adds	r7, #20
 8013906:	46bd      	mov	sp, r7
 8013908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390c:	4770      	bx	lr

0801390e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801390e:	b480      	push	{r7}
 8013910:	b087      	sub	sp, #28
 8013912:	af00      	add	r7, sp, #0
 8013914:	60f8      	str	r0, [r7, #12]
 8013916:	60b9      	str	r1, [r7, #8]
 8013918:	607a      	str	r2, [r7, #4]
 801391a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 801391c:	2300      	movs	r3, #0
 801391e:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	689b      	ldr	r3, [r3, #8]
 8013924:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801392c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	021a      	lsls	r2, r3, #8
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	431a      	orrs	r2, r3
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	4313      	orrs	r3, r2
 801393a:	697a      	ldr	r2, [r7, #20]
 801393c:	4313      	orrs	r3, r2
 801393e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	697a      	ldr	r2, [r7, #20]
 8013944:	609a      	str	r2, [r3, #8]
} 
 8013946:	bf00      	nop
 8013948:	371c      	adds	r7, #28
 801394a:	46bd      	mov	sp, r7
 801394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013950:	4770      	bx	lr

08013952 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8013952:	b480      	push	{r7}
 8013954:	b083      	sub	sp, #12
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
 801395a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013962:	2b01      	cmp	r3, #1
 8013964:	d101      	bne.n	801396a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013966:	2302      	movs	r3, #2
 8013968:	e032      	b.n	80139d0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2201      	movs	r2, #1
 801396e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2202      	movs	r2, #2
 8013976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	6812      	ldr	r2, [r2, #0]
 8013982:	6852      	ldr	r2, [r2, #4]
 8013984:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8013988:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	687a      	ldr	r2, [r7, #4]
 8013990:	6812      	ldr	r2, [r2, #0]
 8013992:	6851      	ldr	r1, [r2, #4]
 8013994:	683a      	ldr	r2, [r7, #0]
 8013996:	6812      	ldr	r2, [r2, #0]
 8013998:	430a      	orrs	r2, r1
 801399a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	687a      	ldr	r2, [r7, #4]
 80139a2:	6812      	ldr	r2, [r2, #0]
 80139a4:	6892      	ldr	r2, [r2, #8]
 80139a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80139aa:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	687a      	ldr	r2, [r7, #4]
 80139b2:	6812      	ldr	r2, [r2, #0]
 80139b4:	6891      	ldr	r1, [r2, #8]
 80139b6:	683a      	ldr	r2, [r7, #0]
 80139b8:	6852      	ldr	r2, [r2, #4]
 80139ba:	430a      	orrs	r2, r1
 80139bc:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2201      	movs	r2, #1
 80139c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	2200      	movs	r2, #0
 80139ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80139ce:	2300      	movs	r3, #0
} 
 80139d0:	4618      	mov	r0, r3
 80139d2:	370c      	adds	r7, #12
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr

080139dc <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80139dc:	b480      	push	{r7}
 80139de:	b083      	sub	sp, #12
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80139e4:	bf00      	nop
 80139e6:	370c      	adds	r7, #12
 80139e8:	46bd      	mov	sp, r7
 80139ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ee:	4770      	bx	lr

080139f0 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80139f0:	b480      	push	{r7}
 80139f2:	b083      	sub	sp, #12
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80139f8:	bf00      	nop
 80139fa:	370c      	adds	r7, #12
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr

08013a04 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b082      	sub	sp, #8
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d101      	bne.n	8013a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013a12:	2301      	movs	r3, #1
 8013a14:	e03f      	b.n	8013a96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013a1c:	b2db      	uxtb	r3, r3
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d106      	bne.n	8013a30 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2200      	movs	r2, #0
 8013a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f012 f944 	bl	8025cb8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2224      	movs	r2, #36	; 0x24
 8013a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	687a      	ldr	r2, [r7, #4]
 8013a3e:	6812      	ldr	r2, [r2, #0]
 8013a40:	68d2      	ldr	r2, [r2, #12]
 8013a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013a46:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f000 fbc5 	bl	80141d8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	687a      	ldr	r2, [r7, #4]
 8013a54:	6812      	ldr	r2, [r2, #0]
 8013a56:	6912      	ldr	r2, [r2, #16]
 8013a58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	687a      	ldr	r2, [r7, #4]
 8013a64:	6812      	ldr	r2, [r2, #0]
 8013a66:	6952      	ldr	r2, [r2, #20]
 8013a68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013a6c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	6812      	ldr	r2, [r2, #0]
 8013a76:	68d2      	ldr	r2, [r2, #12]
 8013a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013a7c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2200      	movs	r2, #0
 8013a82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2220      	movs	r2, #32
 8013a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2220      	movs	r2, #32
 8013a90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8013a94:	2300      	movs	r3, #0
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3708      	adds	r7, #8
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}

08013a9e <HAL_UART_DeInit>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d101      	bne.n	8013ab0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8013aac:	2301      	movs	r3, #1
 8013aae:	e016      	b.n	8013ade <HAL_UART_DeInit+0x40>
  }
  
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2224      	movs	r2, #36	; 0x24
 8013ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f012 fa13 	bl	8025ee4 <HAL_UART_MspDeInit>
  
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Lock */
  __HAL_UNLOCK(huart);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8013adc:	2300      	movs	r3, #0
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	3708      	adds	r7, #8
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}

08013ae6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013ae6:	b480      	push	{r7}
 8013ae8:	b085      	sub	sp, #20
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	60f8      	str	r0, [r7, #12]
 8013aee:	60b9      	str	r1, [r7, #8]
 8013af0:	4613      	mov	r3, r2
 8013af2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013afa:	b2db      	uxtb	r3, r3
 8013afc:	2b20      	cmp	r3, #32
 8013afe:	d138      	bne.n	8013b72 <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d002      	beq.n	8013b0c <HAL_UART_Receive_IT+0x26>
 8013b06:	88fb      	ldrh	r3, [r7, #6]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d101      	bne.n	8013b10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	e031      	b.n	8013b74 <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b16:	2b01      	cmp	r3, #1
 8013b18:	d101      	bne.n	8013b1e <HAL_UART_Receive_IT+0x38>
 8013b1a:	2302      	movs	r3, #2
 8013b1c:	e02a      	b.n	8013b74 <HAL_UART_Receive_IT+0x8e>
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	2201      	movs	r2, #1
 8013b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	68ba      	ldr	r2, [r7, #8]
 8013b2a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	88fa      	ldrh	r2, [r7, #6]
 8013b30:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	88fa      	ldrh	r2, [r7, #6]
 8013b36:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2222      	movs	r2, #34	; 0x22
 8013b42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	68fa      	ldr	r2, [r7, #12]
 8013b54:	6812      	ldr	r2, [r2, #0]
 8013b56:	6952      	ldr	r2, [r2, #20]
 8013b58:	f042 0201 	orr.w	r2, r2, #1
 8013b5c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	68fa      	ldr	r2, [r7, #12]
 8013b64:	6812      	ldr	r2, [r2, #0]
 8013b66:	68d2      	ldr	r2, [r2, #12]
 8013b68:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8013b6c:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	e000      	b.n	8013b74 <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 8013b72:	2302      	movs	r3, #2
  }
}
 8013b74:	4618      	mov	r0, r3
 8013b76:	3714      	adds	r7, #20
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr

08013b80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b086      	sub	sp, #24
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	60f8      	str	r0, [r7, #12]
 8013b88:	60b9      	str	r1, [r7, #8]
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013b94:	b2db      	uxtb	r3, r3
 8013b96:	2b20      	cmp	r3, #32
 8013b98:	d153      	bne.n	8013c42 <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d002      	beq.n	8013ba6 <HAL_UART_Transmit_DMA+0x26>
 8013ba0:	88fb      	ldrh	r3, [r7, #6]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d101      	bne.n	8013baa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	e04c      	b.n	8013c44 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013bb0:	2b01      	cmp	r3, #1
 8013bb2:	d101      	bne.n	8013bb8 <HAL_UART_Transmit_DMA+0x38>
 8013bb4:	2302      	movs	r3, #2
 8013bb6:	e045      	b.n	8013c44 <HAL_UART_Transmit_DMA+0xc4>
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2201      	movs	r2, #1
 8013bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8013bc0:	68ba      	ldr	r2, [r7, #8]
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	88fa      	ldrh	r2, [r7, #6]
 8013bca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	88fa      	ldrh	r2, [r7, #6]
 8013bd0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	2221      	movs	r2, #33	; 0x21
 8013bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013be4:	4a19      	ldr	r2, [pc, #100]	; (8013c4c <HAL_UART_Transmit_DMA+0xcc>)
 8013be6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bec:	4a18      	ldr	r2, [pc, #96]	; (8013c50 <HAL_UART_Transmit_DMA+0xd0>)
 8013bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bf4:	4a17      	ldr	r2, [pc, #92]	; (8013c54 <HAL_UART_Transmit_DMA+0xd4>)
 8013bf6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 8013c00:	f107 0308 	add.w	r3, r7, #8
 8013c04:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	6819      	ldr	r1, [r3, #0]
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	3304      	adds	r3, #4
 8013c14:	461a      	mov	r2, r3
 8013c16:	88fb      	ldrh	r3, [r7, #6]
 8013c18:	f7fc fe0e 	bl	8010838 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013c24:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	2200      	movs	r2, #0
 8013c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	68fa      	ldr	r2, [r7, #12]
 8013c34:	6812      	ldr	r2, [r2, #0]
 8013c36:	6952      	ldr	r2, [r2, #20]
 8013c38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013c3c:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	e000      	b.n	8013c44 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8013c42:	2302      	movs	r3, #2
  }
}
 8013c44:	4618      	mov	r0, r3
 8013c46:	3718      	adds	r7, #24
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}
 8013c4c:	08013e79 	.word	0x08013e79
 8013c50:	08013ecb 	.word	0x08013ecb
 8013c54:	08013ee7 	.word	0x08013ee7

08013c58 <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b088      	sub	sp, #32
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	695b      	ldr	r3, [r3, #20]
 8013c76:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8013c80:	69fb      	ldr	r3, [r7, #28]
 8013c82:	f003 030f 	and.w	r3, r3, #15
 8013c86:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8013c88:	693b      	ldr	r3, [r7, #16]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d10d      	bne.n	8013caa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013c8e:	69fb      	ldr	r3, [r7, #28]
 8013c90:	f003 0320 	and.w	r3, r3, #32
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d008      	beq.n	8013caa <HAL_UART_IRQHandler+0x52>
 8013c98:	69bb      	ldr	r3, [r7, #24]
 8013c9a:	f003 0320 	and.w	r3, r3, #32
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d003      	beq.n	8013caa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fa1e 	bl	80140e4 <UART_Receive_IT>
      return;
 8013ca8:	e0cc      	b.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8013caa:	693b      	ldr	r3, [r7, #16]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	f000 80ab 	beq.w	8013e08 <HAL_UART_IRQHandler+0x1b0>
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	f003 0301 	and.w	r3, r3, #1
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d105      	bne.n	8013cc8 <HAL_UART_IRQHandler+0x70>
 8013cbc:	69bb      	ldr	r3, [r7, #24]
 8013cbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	f000 80a0 	beq.w	8013e08 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8013cc8:	69fb      	ldr	r3, [r7, #28]
 8013cca:	f003 0301 	and.w	r3, r3, #1
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d00a      	beq.n	8013ce8 <HAL_UART_IRQHandler+0x90>
 8013cd2:	69bb      	ldr	r3, [r7, #24]
 8013cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d005      	beq.n	8013ce8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ce0:	f043 0201 	orr.w	r2, r3, #1
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	f003 0304 	and.w	r3, r3, #4
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d00a      	beq.n	8013d08 <HAL_UART_IRQHandler+0xb0>
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	f003 0301 	and.w	r3, r3, #1
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d005      	beq.n	8013d08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d00:	f043 0202 	orr.w	r2, r3, #2
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	f003 0302 	and.w	r3, r3, #2
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d00a      	beq.n	8013d28 <HAL_UART_IRQHandler+0xd0>
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	f003 0301 	and.w	r3, r3, #1
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d005      	beq.n	8013d28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d20:	f043 0204 	orr.w	r2, r3, #4
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013d28:	69fb      	ldr	r3, [r7, #28]
 8013d2a:	f003 0308 	and.w	r3, r3, #8
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d00a      	beq.n	8013d48 <HAL_UART_IRQHandler+0xf0>
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	f003 0301 	and.w	r3, r3, #1
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d005      	beq.n	8013d48 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d40:	f043 0208 	orr.w	r2, r3, #8
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d078      	beq.n	8013e42 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013d50:	69fb      	ldr	r3, [r7, #28]
 8013d52:	f003 0320 	and.w	r3, r3, #32
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d007      	beq.n	8013d6a <HAL_UART_IRQHandler+0x112>
 8013d5a:	69bb      	ldr	r3, [r7, #24]
 8013d5c:	f003 0320 	and.w	r3, r3, #32
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d002      	beq.n	8013d6a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f000 f9bd 	bl	80140e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	695b      	ldr	r3, [r3, #20]
 8013d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	bf14      	ite	ne
 8013d78:	2301      	movne	r3, #1
 8013d7a:	2300      	moveq	r3, #0
 8013d7c:	b2db      	uxtb	r3, r3
 8013d7e:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d84:	f003 0308 	and.w	r3, r3, #8
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d102      	bne.n	8013d92 <HAL_UART_IRQHandler+0x13a>
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d031      	beq.n	8013df6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013d92:	6878      	ldr	r0, [r7, #4]
 8013d94:	f000 f907 	bl	8013fa6 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	695b      	ldr	r3, [r3, #20]
 8013d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d023      	beq.n	8013dee <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	687a      	ldr	r2, [r7, #4]
 8013dac:	6812      	ldr	r2, [r2, #0]
 8013dae:	6952      	ldr	r2, [r2, #20]
 8013db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013db4:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d013      	beq.n	8013de6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dc2:	4a22      	ldr	r2, [pc, #136]	; (8013e4c <HAL_UART_IRQHandler+0x1f4>)
 8013dc4:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7fc fd94 	bl	80108f8 <HAL_DMA_Abort_IT>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d016      	beq.n	8013e04 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013de0:	4610      	mov	r0, r2
 8013de2:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013de4:	e00e      	b.n	8013e04 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f000 f83c 	bl	8013e64 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013dec:	e00a      	b.n	8013e04 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f000 f838 	bl	8013e64 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013df4:	e006      	b.n	8013e04 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f000 f834 	bl	8013e64 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8013e02:	e01e      	b.n	8013e42 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e04:	bf00      	nop
    return;
 8013e06:	e01c      	b.n	8013e42 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8013e08:	69fb      	ldr	r3, [r7, #28]
 8013e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d008      	beq.n	8013e24 <HAL_UART_IRQHandler+0x1cc>
 8013e12:	69bb      	ldr	r3, [r7, #24]
 8013e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d003      	beq.n	8013e24 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f000 f8f4 	bl	801400a <UART_Transmit_IT>
    return;
 8013e22:	e00f      	b.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8013e24:	69fb      	ldr	r3, [r7, #28]
 8013e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d00a      	beq.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
 8013e2e:	69bb      	ldr	r3, [r7, #24]
 8013e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d005      	beq.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f000 f93b 	bl	80140b4 <UART_EndTransmit_IT>
    return;
 8013e3e:	bf00      	nop
 8013e40:	e000      	b.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
    return;
 8013e42:	bf00      	nop
  }
}
 8013e44:	3720      	adds	r7, #32
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	08013fe3 	.word	0x08013fe3

08013e50 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013e50:	b480      	push	{r7}
 8013e52:	b083      	sub	sp, #12
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8013e58:	bf00      	nop
 8013e5a:	370c      	adds	r7, #12
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e62:	4770      	bx	lr

08013e64 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013e64:	b480      	push	{r7}
 8013e66:	b083      	sub	sp, #12
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8013e6c:	bf00      	nop
 8013e6e:	370c      	adds	r7, #12
 8013e70:	46bd      	mov	sp, r7
 8013e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e76:	4770      	bx	lr

08013e78 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b084      	sub	sp, #16
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e84:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d113      	bne.n	8013ebc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	2200      	movs	r2, #0
 8013e98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	68fa      	ldr	r2, [r7, #12]
 8013ea0:	6812      	ldr	r2, [r2, #0]
 8013ea2:	6952      	ldr	r2, [r2, #20]
 8013ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013ea8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	68fa      	ldr	r2, [r7, #12]
 8013eb0:	6812      	ldr	r2, [r2, #0]
 8013eb2:	68d2      	ldr	r2, [r2, #12]
 8013eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013eb8:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 8013eba:	e002      	b.n	8013ec2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8013ebc:	68f8      	ldr	r0, [r7, #12]
 8013ebe:	f011 f825 	bl	8024f0c <HAL_UART_TxCpltCallback>
}
 8013ec2:	bf00      	nop
 8013ec4:	3710      	adds	r7, #16
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}

08013eca <UART_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013eca:	b580      	push	{r7, lr}
 8013ecc:	b084      	sub	sp, #16
 8013ece:	af00      	add	r7, sp, #0
 8013ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ed6:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8013ed8:	68f8      	ldr	r0, [r7, #12]
 8013eda:	f7ff ffb9 	bl	8013e50 <HAL_UART_TxHalfCpltCallback>
}
 8013ede:	bf00      	nop
 8013ee0:	3710      	adds	r7, #16
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}

08013ee6 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013ee6:	b580      	push	{r7, lr}
 8013ee8:	b084      	sub	sp, #16
 8013eea:	af00      	add	r7, sp, #0
 8013eec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ef6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	695b      	ldr	r3, [r3, #20]
 8013efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	bf14      	ite	ne
 8013f06:	2301      	movne	r3, #1
 8013f08:	2300      	moveq	r3, #0
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	2b21      	cmp	r3, #33	; 0x21
 8013f18:	d108      	bne.n	8013f2c <UART_DMAError+0x46>
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d005      	beq.n	8013f2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	2200      	movs	r2, #0
 8013f24:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8013f26:	68b8      	ldr	r0, [r7, #8]
 8013f28:	f000 f827 	bl	8013f7a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	695b      	ldr	r3, [r3, #20]
 8013f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	bf14      	ite	ne
 8013f3a:	2301      	movne	r3, #1
 8013f3c:	2300      	moveq	r3, #0
 8013f3e:	b2db      	uxtb	r3, r3
 8013f40:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013f48:	b2db      	uxtb	r3, r3
 8013f4a:	2b22      	cmp	r3, #34	; 0x22
 8013f4c:	d108      	bne.n	8013f60 <UART_DMAError+0x7a>
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d005      	beq.n	8013f60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	2200      	movs	r2, #0
 8013f58:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8013f5a:	68b8      	ldr	r0, [r7, #8]
 8013f5c:	f000 f823 	bl	8013fa6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f64:	f043 0210 	orr.w	r2, r3, #16
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8013f6c:	68b8      	ldr	r0, [r7, #8]
 8013f6e:	f7ff ff79 	bl	8013e64 <HAL_UART_ErrorCallback>
}
 8013f72:	bf00      	nop
 8013f74:	3710      	adds	r7, #16
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}

08013f7a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013f7a:	b480      	push	{r7}
 8013f7c:	b083      	sub	sp, #12
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	687a      	ldr	r2, [r7, #4]
 8013f88:	6812      	ldr	r2, [r2, #0]
 8013f8a:	68d2      	ldr	r2, [r2, #12]
 8013f8c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8013f90:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2220      	movs	r2, #32
 8013f96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8013f9a:	bf00      	nop
 8013f9c:	370c      	adds	r7, #12
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa4:	4770      	bx	lr

08013fa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013fa6:	b480      	push	{r7}
 8013fa8:	b083      	sub	sp, #12
 8013faa:	af00      	add	r7, sp, #0
 8013fac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	687a      	ldr	r2, [r7, #4]
 8013fb4:	6812      	ldr	r2, [r2, #0]
 8013fb6:	68d2      	ldr	r2, [r2, #12]
 8013fb8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013fbc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	687a      	ldr	r2, [r7, #4]
 8013fc4:	6812      	ldr	r2, [r2, #0]
 8013fc6:	6952      	ldr	r2, [r2, #20]
 8013fc8:	f022 0201 	bic.w	r2, r2, #1
 8013fcc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	2220      	movs	r2, #32
 8013fd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8013fd6:	bf00      	nop
 8013fd8:	370c      	adds	r7, #12
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe0:	4770      	bx	lr

08013fe2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013fe2:	b580      	push	{r7, lr}
 8013fe4:	b084      	sub	sp, #16
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8013ffc:	68f8      	ldr	r0, [r7, #12]
 8013ffe:	f7ff ff31 	bl	8013e64 <HAL_UART_ErrorCallback>
}
 8014002:	bf00      	nop
 8014004:	3710      	adds	r7, #16
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}

0801400a <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801400a:	b480      	push	{r7}
 801400c:	b085      	sub	sp, #20
 801400e:	af00      	add	r7, sp, #0
 8014010:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014018:	b2db      	uxtb	r3, r3
 801401a:	2b21      	cmp	r3, #33	; 0x21
 801401c:	d143      	bne.n	80140a6 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	689b      	ldr	r3, [r3, #8]
 8014022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014026:	d119      	bne.n	801405c <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6a1b      	ldr	r3, [r3, #32]
 801402c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	68fa      	ldr	r2, [r7, #12]
 8014034:	8812      	ldrh	r2, [r2, #0]
 8014036:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801403a:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	691b      	ldr	r3, [r3, #16]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d105      	bne.n	8014050 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6a1b      	ldr	r3, [r3, #32]
 8014048:	1c9a      	adds	r2, r3, #2
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	621a      	str	r2, [r3, #32]
 801404e:	e00e      	b.n	801406e <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6a1b      	ldr	r3, [r3, #32]
 8014054:	1c5a      	adds	r2, r3, #1
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	621a      	str	r2, [r3, #32]
 801405a:	e008      	b.n	801406e <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681a      	ldr	r2, [r3, #0]
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	6a1b      	ldr	r3, [r3, #32]
 8014064:	1c58      	adds	r0, r3, #1
 8014066:	6879      	ldr	r1, [r7, #4]
 8014068:	6208      	str	r0, [r1, #32]
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014072:	b29b      	uxth	r3, r3
 8014074:	3b01      	subs	r3, #1
 8014076:	b29b      	uxth	r3, r3
 8014078:	687a      	ldr	r2, [r7, #4]
 801407a:	4619      	mov	r1, r3
 801407c:	84d1      	strh	r1, [r2, #38]	; 0x26
 801407e:	2b00      	cmp	r3, #0
 8014080:	d10f      	bne.n	80140a2 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	687a      	ldr	r2, [r7, #4]
 8014088:	6812      	ldr	r2, [r2, #0]
 801408a:	68d2      	ldr	r2, [r2, #12]
 801408c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014090:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	687a      	ldr	r2, [r7, #4]
 8014098:	6812      	ldr	r2, [r2, #0]
 801409a:	68d2      	ldr	r2, [r2, #12]
 801409c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80140a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80140a2:	2300      	movs	r3, #0
 80140a4:	e000      	b.n	80140a8 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80140a6:	2302      	movs	r3, #2
  }
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	3714      	adds	r7, #20
 80140ac:	46bd      	mov	sp, r7
 80140ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b2:	4770      	bx	lr

080140b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	6812      	ldr	r2, [r2, #0]
 80140c4:	68d2      	ldr	r2, [r2, #12]
 80140c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80140ca:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2220      	movs	r2, #32
 80140d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f010 ff19 	bl	8024f0c <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80140da:	2300      	movs	r3, #0
}
 80140dc:	4618      	mov	r0, r3
 80140de:	3708      	adds	r7, #8
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}

080140e4 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b084      	sub	sp, #16
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80140f2:	b2db      	uxtb	r3, r3
 80140f4:	2b22      	cmp	r3, #34	; 0x22
 80140f6:	d169      	bne.n	80141cc <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	689b      	ldr	r3, [r3, #8]
 80140fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014100:	d123      	bne.n	801414a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014106:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	691b      	ldr	r3, [r3, #16]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d10e      	bne.n	801412e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	685b      	ldr	r3, [r3, #4]
 8014116:	b29b      	uxth	r3, r3
 8014118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801411c:	b29a      	uxth	r2, r3
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014126:	1c9a      	adds	r2, r3, #2
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	629a      	str	r2, [r3, #40]	; 0x28
 801412c:	e029      	b.n	8014182 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	b29b      	uxth	r3, r3
 8014136:	b2db      	uxtb	r3, r3
 8014138:	b29a      	uxth	r2, r3
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014142:	1c5a      	adds	r2, r3, #1
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	629a      	str	r2, [r3, #40]	; 0x28
 8014148:	e01b      	b.n	8014182 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	691b      	ldr	r3, [r3, #16]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d10a      	bne.n	8014168 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014156:	1c59      	adds	r1, r3, #1
 8014158:	687a      	ldr	r2, [r7, #4]
 801415a:	6291      	str	r1, [r2, #40]	; 0x28
 801415c:	687a      	ldr	r2, [r7, #4]
 801415e:	6812      	ldr	r2, [r2, #0]
 8014160:	6852      	ldr	r2, [r2, #4]
 8014162:	b2d2      	uxtb	r2, r2
 8014164:	701a      	strb	r2, [r3, #0]
 8014166:	e00c      	b.n	8014182 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801416c:	1c59      	adds	r1, r3, #1
 801416e:	687a      	ldr	r2, [r7, #4]
 8014170:	6291      	str	r1, [r2, #40]	; 0x28
 8014172:	687a      	ldr	r2, [r7, #4]
 8014174:	6812      	ldr	r2, [r2, #0]
 8014176:	6852      	ldr	r2, [r2, #4]
 8014178:	b2d2      	uxtb	r2, r2
 801417a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801417e:	b2d2      	uxtb	r2, r2
 8014180:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8014186:	b29b      	uxth	r3, r3
 8014188:	3b01      	subs	r3, #1
 801418a:	b29b      	uxth	r3, r3
 801418c:	687a      	ldr	r2, [r7, #4]
 801418e:	4619      	mov	r1, r3
 8014190:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8014192:	2b00      	cmp	r3, #0
 8014194:	d118      	bne.n	80141c8 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	687a      	ldr	r2, [r7, #4]
 801419c:	6812      	ldr	r2, [r2, #0]
 801419e:	68d2      	ldr	r2, [r2, #12]
 80141a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80141a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	6812      	ldr	r2, [r2, #0]
 80141ae:	6952      	ldr	r2, [r2, #20]
 80141b0:	f022 0201 	bic.w	r2, r2, #1
 80141b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	2220      	movs	r2, #32
 80141ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 80141be:	6878      	ldr	r0, [r7, #4]
 80141c0:	f010 fe7e 	bl	8024ec0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80141c4:	2300      	movs	r3, #0
 80141c6:	e002      	b.n	80141ce <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 80141c8:	2300      	movs	r3, #0
 80141ca:	e000      	b.n	80141ce <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 80141cc:	2302      	movs	r3, #2
  }
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3710      	adds	r7, #16
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
	...

080141d8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80141d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141da:	b085      	sub	sp, #20
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80141e0:	2300      	movs	r3, #0
 80141e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	691b      	ldr	r3, [r3, #16]
 80141ea:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80141f2:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	68db      	ldr	r3, [r3, #12]
 80141f8:	68fa      	ldr	r2, [r7, #12]
 80141fa:	4313      	orrs	r3, r2
 80141fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	68fa      	ldr	r2, [r7, #12]
 8014204:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8014214:	f023 030c 	bic.w	r3, r3, #12
 8014218:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	689a      	ldr	r2, [r3, #8]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	691b      	ldr	r3, [r3, #16]
 8014222:	431a      	orrs	r2, r3
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	695b      	ldr	r3, [r3, #20]
 8014228:	431a      	orrs	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	69db      	ldr	r3, [r3, #28]
 801422e:	4313      	orrs	r3, r2
 8014230:	68fa      	ldr	r2, [r7, #12]
 8014232:	4313      	orrs	r3, r2
 8014234:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	68fa      	ldr	r2, [r7, #12]
 801423c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	695b      	ldr	r3, [r3, #20]
 8014244:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801424c:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	699b      	ldr	r3, [r3, #24]
 8014252:	68fa      	ldr	r2, [r7, #12]
 8014254:	4313      	orrs	r3, r2
 8014256:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	68fa      	ldr	r2, [r7, #12]
 801425e:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	69db      	ldr	r3, [r3, #28]
 8014264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014268:	f040 80e4 	bne.w	8014434 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	4aab      	ldr	r2, [pc, #684]	; (8014520 <UART_SetConfig+0x348>)
 8014272:	4293      	cmp	r3, r2
 8014274:	d004      	beq.n	8014280 <UART_SetConfig+0xa8>
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	4aaa      	ldr	r2, [pc, #680]	; (8014524 <UART_SetConfig+0x34c>)
 801427c:	4293      	cmp	r3, r2
 801427e:	d16c      	bne.n	801435a <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681c      	ldr	r4, [r3, #0]
 8014284:	f7fe ff50 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8014288:	4602      	mov	r2, r0
 801428a:	4613      	mov	r3, r2
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	4413      	add	r3, r2
 8014290:	009a      	lsls	r2, r3, #2
 8014292:	441a      	add	r2, r3
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	685b      	ldr	r3, [r3, #4]
 8014298:	005b      	lsls	r3, r3, #1
 801429a:	fbb2 f3f3 	udiv	r3, r2, r3
 801429e:	4aa2      	ldr	r2, [pc, #648]	; (8014528 <UART_SetConfig+0x350>)
 80142a0:	fba2 2303 	umull	r2, r3, r2, r3
 80142a4:	095b      	lsrs	r3, r3, #5
 80142a6:	011d      	lsls	r5, r3, #4
 80142a8:	f7fe ff3e 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80142ac:	4602      	mov	r2, r0
 80142ae:	4613      	mov	r3, r2
 80142b0:	009b      	lsls	r3, r3, #2
 80142b2:	4413      	add	r3, r2
 80142b4:	009a      	lsls	r2, r3, #2
 80142b6:	441a      	add	r2, r3
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	685b      	ldr	r3, [r3, #4]
 80142bc:	005b      	lsls	r3, r3, #1
 80142be:	fbb2 f6f3 	udiv	r6, r2, r3
 80142c2:	f7fe ff31 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80142c6:	4602      	mov	r2, r0
 80142c8:	4613      	mov	r3, r2
 80142ca:	009b      	lsls	r3, r3, #2
 80142cc:	4413      	add	r3, r2
 80142ce:	009a      	lsls	r2, r3, #2
 80142d0:	441a      	add	r2, r3
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	005b      	lsls	r3, r3, #1
 80142d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80142dc:	4a92      	ldr	r2, [pc, #584]	; (8014528 <UART_SetConfig+0x350>)
 80142de:	fba2 2303 	umull	r2, r3, r2, r3
 80142e2:	095b      	lsrs	r3, r3, #5
 80142e4:	2264      	movs	r2, #100	; 0x64
 80142e6:	fb02 f303 	mul.w	r3, r2, r3
 80142ea:	1af3      	subs	r3, r6, r3
 80142ec:	00db      	lsls	r3, r3, #3
 80142ee:	3332      	adds	r3, #50	; 0x32
 80142f0:	4a8d      	ldr	r2, [pc, #564]	; (8014528 <UART_SetConfig+0x350>)
 80142f2:	fba2 2303 	umull	r2, r3, r2, r3
 80142f6:	095b      	lsrs	r3, r3, #5
 80142f8:	005b      	lsls	r3, r3, #1
 80142fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80142fe:	441d      	add	r5, r3
 8014300:	f7fe ff12 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8014304:	4602      	mov	r2, r0
 8014306:	4613      	mov	r3, r2
 8014308:	009b      	lsls	r3, r3, #2
 801430a:	4413      	add	r3, r2
 801430c:	009a      	lsls	r2, r3, #2
 801430e:	441a      	add	r2, r3
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	685b      	ldr	r3, [r3, #4]
 8014314:	005b      	lsls	r3, r3, #1
 8014316:	fbb2 f6f3 	udiv	r6, r2, r3
 801431a:	f7fe ff05 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 801431e:	4602      	mov	r2, r0
 8014320:	4613      	mov	r3, r2
 8014322:	009b      	lsls	r3, r3, #2
 8014324:	4413      	add	r3, r2
 8014326:	009a      	lsls	r2, r3, #2
 8014328:	441a      	add	r2, r3
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	005b      	lsls	r3, r3, #1
 8014330:	fbb2 f3f3 	udiv	r3, r2, r3
 8014334:	4a7c      	ldr	r2, [pc, #496]	; (8014528 <UART_SetConfig+0x350>)
 8014336:	fba2 2303 	umull	r2, r3, r2, r3
 801433a:	095b      	lsrs	r3, r3, #5
 801433c:	2264      	movs	r2, #100	; 0x64
 801433e:	fb02 f303 	mul.w	r3, r2, r3
 8014342:	1af3      	subs	r3, r6, r3
 8014344:	00db      	lsls	r3, r3, #3
 8014346:	3332      	adds	r3, #50	; 0x32
 8014348:	4a77      	ldr	r2, [pc, #476]	; (8014528 <UART_SetConfig+0x350>)
 801434a:	fba2 2303 	umull	r2, r3, r2, r3
 801434e:	095b      	lsrs	r3, r3, #5
 8014350:	f003 0307 	and.w	r3, r3, #7
 8014354:	442b      	add	r3, r5
 8014356:	60a3      	str	r3, [r4, #8]
 8014358:	e154      	b.n	8014604 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681c      	ldr	r4, [r3, #0]
 801435e:	f7fe fecf 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014362:	4602      	mov	r2, r0
 8014364:	4613      	mov	r3, r2
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	4413      	add	r3, r2
 801436a:	009a      	lsls	r2, r3, #2
 801436c:	441a      	add	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	005b      	lsls	r3, r3, #1
 8014374:	fbb2 f3f3 	udiv	r3, r2, r3
 8014378:	4a6b      	ldr	r2, [pc, #428]	; (8014528 <UART_SetConfig+0x350>)
 801437a:	fba2 2303 	umull	r2, r3, r2, r3
 801437e:	095b      	lsrs	r3, r3, #5
 8014380:	011d      	lsls	r5, r3, #4
 8014382:	f7fe febd 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014386:	4602      	mov	r2, r0
 8014388:	4613      	mov	r3, r2
 801438a:	009b      	lsls	r3, r3, #2
 801438c:	4413      	add	r3, r2
 801438e:	009a      	lsls	r2, r3, #2
 8014390:	441a      	add	r2, r3
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	005b      	lsls	r3, r3, #1
 8014398:	fbb2 f6f3 	udiv	r6, r2, r3
 801439c:	f7fe feb0 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80143a0:	4602      	mov	r2, r0
 80143a2:	4613      	mov	r3, r2
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	4413      	add	r3, r2
 80143a8:	009a      	lsls	r2, r3, #2
 80143aa:	441a      	add	r2, r3
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	685b      	ldr	r3, [r3, #4]
 80143b0:	005b      	lsls	r3, r3, #1
 80143b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80143b6:	4a5c      	ldr	r2, [pc, #368]	; (8014528 <UART_SetConfig+0x350>)
 80143b8:	fba2 2303 	umull	r2, r3, r2, r3
 80143bc:	095b      	lsrs	r3, r3, #5
 80143be:	2264      	movs	r2, #100	; 0x64
 80143c0:	fb02 f303 	mul.w	r3, r2, r3
 80143c4:	1af3      	subs	r3, r6, r3
 80143c6:	00db      	lsls	r3, r3, #3
 80143c8:	3332      	adds	r3, #50	; 0x32
 80143ca:	4a57      	ldr	r2, [pc, #348]	; (8014528 <UART_SetConfig+0x350>)
 80143cc:	fba2 2303 	umull	r2, r3, r2, r3
 80143d0:	095b      	lsrs	r3, r3, #5
 80143d2:	005b      	lsls	r3, r3, #1
 80143d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80143d8:	441d      	add	r5, r3
 80143da:	f7fe fe91 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80143de:	4602      	mov	r2, r0
 80143e0:	4613      	mov	r3, r2
 80143e2:	009b      	lsls	r3, r3, #2
 80143e4:	4413      	add	r3, r2
 80143e6:	009a      	lsls	r2, r3, #2
 80143e8:	441a      	add	r2, r3
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	685b      	ldr	r3, [r3, #4]
 80143ee:	005b      	lsls	r3, r3, #1
 80143f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80143f4:	f7fe fe84 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80143f8:	4602      	mov	r2, r0
 80143fa:	4613      	mov	r3, r2
 80143fc:	009b      	lsls	r3, r3, #2
 80143fe:	4413      	add	r3, r2
 8014400:	009a      	lsls	r2, r3, #2
 8014402:	441a      	add	r2, r3
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	685b      	ldr	r3, [r3, #4]
 8014408:	005b      	lsls	r3, r3, #1
 801440a:	fbb2 f3f3 	udiv	r3, r2, r3
 801440e:	4a46      	ldr	r2, [pc, #280]	; (8014528 <UART_SetConfig+0x350>)
 8014410:	fba2 2303 	umull	r2, r3, r2, r3
 8014414:	095b      	lsrs	r3, r3, #5
 8014416:	2264      	movs	r2, #100	; 0x64
 8014418:	fb02 f303 	mul.w	r3, r2, r3
 801441c:	1af3      	subs	r3, r6, r3
 801441e:	00db      	lsls	r3, r3, #3
 8014420:	3332      	adds	r3, #50	; 0x32
 8014422:	4a41      	ldr	r2, [pc, #260]	; (8014528 <UART_SetConfig+0x350>)
 8014424:	fba2 2303 	umull	r2, r3, r2, r3
 8014428:	095b      	lsrs	r3, r3, #5
 801442a:	f003 0307 	and.w	r3, r3, #7
 801442e:	442b      	add	r3, r5
 8014430:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8014432:	e0e7      	b.n	8014604 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	4a39      	ldr	r2, [pc, #228]	; (8014520 <UART_SetConfig+0x348>)
 801443a:	4293      	cmp	r3, r2
 801443c:	d004      	beq.n	8014448 <UART_SetConfig+0x270>
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	4a38      	ldr	r2, [pc, #224]	; (8014524 <UART_SetConfig+0x34c>)
 8014444:	4293      	cmp	r3, r2
 8014446:	d171      	bne.n	801452c <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	681c      	ldr	r4, [r3, #0]
 801444c:	f7fe fe6c 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8014450:	4602      	mov	r2, r0
 8014452:	4613      	mov	r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	4413      	add	r3, r2
 8014458:	009a      	lsls	r2, r3, #2
 801445a:	441a      	add	r2, r3
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	009b      	lsls	r3, r3, #2
 8014462:	fbb2 f3f3 	udiv	r3, r2, r3
 8014466:	4a30      	ldr	r2, [pc, #192]	; (8014528 <UART_SetConfig+0x350>)
 8014468:	fba2 2303 	umull	r2, r3, r2, r3
 801446c:	095b      	lsrs	r3, r3, #5
 801446e:	011d      	lsls	r5, r3, #4
 8014470:	f7fe fe5a 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8014474:	4602      	mov	r2, r0
 8014476:	4613      	mov	r3, r2
 8014478:	009b      	lsls	r3, r3, #2
 801447a:	4413      	add	r3, r2
 801447c:	009a      	lsls	r2, r3, #2
 801447e:	441a      	add	r2, r3
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	685b      	ldr	r3, [r3, #4]
 8014484:	009b      	lsls	r3, r3, #2
 8014486:	fbb2 f6f3 	udiv	r6, r2, r3
 801448a:	f7fe fe4d 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 801448e:	4602      	mov	r2, r0
 8014490:	4613      	mov	r3, r2
 8014492:	009b      	lsls	r3, r3, #2
 8014494:	4413      	add	r3, r2
 8014496:	009a      	lsls	r2, r3, #2
 8014498:	441a      	add	r2, r3
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	685b      	ldr	r3, [r3, #4]
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80144a4:	4a20      	ldr	r2, [pc, #128]	; (8014528 <UART_SetConfig+0x350>)
 80144a6:	fba2 2303 	umull	r2, r3, r2, r3
 80144aa:	095b      	lsrs	r3, r3, #5
 80144ac:	2264      	movs	r2, #100	; 0x64
 80144ae:	fb02 f303 	mul.w	r3, r2, r3
 80144b2:	1af3      	subs	r3, r6, r3
 80144b4:	011b      	lsls	r3, r3, #4
 80144b6:	3332      	adds	r3, #50	; 0x32
 80144b8:	4a1b      	ldr	r2, [pc, #108]	; (8014528 <UART_SetConfig+0x350>)
 80144ba:	fba2 2303 	umull	r2, r3, r2, r3
 80144be:	095b      	lsrs	r3, r3, #5
 80144c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80144c4:	441d      	add	r5, r3
 80144c6:	f7fe fe2f 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80144ca:	4602      	mov	r2, r0
 80144cc:	4613      	mov	r3, r2
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	4413      	add	r3, r2
 80144d2:	009a      	lsls	r2, r3, #2
 80144d4:	441a      	add	r2, r3
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	009b      	lsls	r3, r3, #2
 80144dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80144e0:	f7fe fe22 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80144e4:	4602      	mov	r2, r0
 80144e6:	4613      	mov	r3, r2
 80144e8:	009b      	lsls	r3, r3, #2
 80144ea:	4413      	add	r3, r2
 80144ec:	009a      	lsls	r2, r3, #2
 80144ee:	441a      	add	r2, r3
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	009b      	lsls	r3, r3, #2
 80144f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80144fa:	4a0b      	ldr	r2, [pc, #44]	; (8014528 <UART_SetConfig+0x350>)
 80144fc:	fba2 2303 	umull	r2, r3, r2, r3
 8014500:	095b      	lsrs	r3, r3, #5
 8014502:	2264      	movs	r2, #100	; 0x64
 8014504:	fb02 f303 	mul.w	r3, r2, r3
 8014508:	1af3      	subs	r3, r6, r3
 801450a:	011b      	lsls	r3, r3, #4
 801450c:	3332      	adds	r3, #50	; 0x32
 801450e:	4a06      	ldr	r2, [pc, #24]	; (8014528 <UART_SetConfig+0x350>)
 8014510:	fba2 2303 	umull	r2, r3, r2, r3
 8014514:	095b      	lsrs	r3, r3, #5
 8014516:	f003 030f 	and.w	r3, r3, #15
 801451a:	442b      	add	r3, r5
 801451c:	60a3      	str	r3, [r4, #8]
 801451e:	e071      	b.n	8014604 <UART_SetConfig+0x42c>
 8014520:	40011000 	.word	0x40011000
 8014524:	40011400 	.word	0x40011400
 8014528:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681c      	ldr	r4, [r3, #0]
 8014530:	f7fe fde6 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014534:	4602      	mov	r2, r0
 8014536:	4613      	mov	r3, r2
 8014538:	009b      	lsls	r3, r3, #2
 801453a:	4413      	add	r3, r2
 801453c:	009a      	lsls	r2, r3, #2
 801453e:	441a      	add	r2, r3
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	685b      	ldr	r3, [r3, #4]
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	fbb2 f3f3 	udiv	r3, r2, r3
 801454a:	4a30      	ldr	r2, [pc, #192]	; (801460c <UART_SetConfig+0x434>)
 801454c:	fba2 2303 	umull	r2, r3, r2, r3
 8014550:	095b      	lsrs	r3, r3, #5
 8014552:	011d      	lsls	r5, r3, #4
 8014554:	f7fe fdd4 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014558:	4602      	mov	r2, r0
 801455a:	4613      	mov	r3, r2
 801455c:	009b      	lsls	r3, r3, #2
 801455e:	4413      	add	r3, r2
 8014560:	009a      	lsls	r2, r3, #2
 8014562:	441a      	add	r2, r3
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	009b      	lsls	r3, r3, #2
 801456a:	fbb2 f6f3 	udiv	r6, r2, r3
 801456e:	f7fe fdc7 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014572:	4602      	mov	r2, r0
 8014574:	4613      	mov	r3, r2
 8014576:	009b      	lsls	r3, r3, #2
 8014578:	4413      	add	r3, r2
 801457a:	009a      	lsls	r2, r3, #2
 801457c:	441a      	add	r2, r3
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	685b      	ldr	r3, [r3, #4]
 8014582:	009b      	lsls	r3, r3, #2
 8014584:	fbb2 f3f3 	udiv	r3, r2, r3
 8014588:	4a20      	ldr	r2, [pc, #128]	; (801460c <UART_SetConfig+0x434>)
 801458a:	fba2 2303 	umull	r2, r3, r2, r3
 801458e:	095b      	lsrs	r3, r3, #5
 8014590:	2264      	movs	r2, #100	; 0x64
 8014592:	fb02 f303 	mul.w	r3, r2, r3
 8014596:	1af3      	subs	r3, r6, r3
 8014598:	011b      	lsls	r3, r3, #4
 801459a:	3332      	adds	r3, #50	; 0x32
 801459c:	4a1b      	ldr	r2, [pc, #108]	; (801460c <UART_SetConfig+0x434>)
 801459e:	fba2 2303 	umull	r2, r3, r2, r3
 80145a2:	095b      	lsrs	r3, r3, #5
 80145a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80145a8:	441d      	add	r5, r3
 80145aa:	f7fe fda9 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80145ae:	4602      	mov	r2, r0
 80145b0:	4613      	mov	r3, r2
 80145b2:	009b      	lsls	r3, r3, #2
 80145b4:	4413      	add	r3, r2
 80145b6:	009a      	lsls	r2, r3, #2
 80145b8:	441a      	add	r2, r3
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	009b      	lsls	r3, r3, #2
 80145c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80145c4:	f7fe fd9c 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80145c8:	4602      	mov	r2, r0
 80145ca:	4613      	mov	r3, r2
 80145cc:	009b      	lsls	r3, r3, #2
 80145ce:	4413      	add	r3, r2
 80145d0:	009a      	lsls	r2, r3, #2
 80145d2:	441a      	add	r2, r3
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	009b      	lsls	r3, r3, #2
 80145da:	fbb2 f3f3 	udiv	r3, r2, r3
 80145de:	4a0b      	ldr	r2, [pc, #44]	; (801460c <UART_SetConfig+0x434>)
 80145e0:	fba2 2303 	umull	r2, r3, r2, r3
 80145e4:	095b      	lsrs	r3, r3, #5
 80145e6:	2264      	movs	r2, #100	; 0x64
 80145e8:	fb02 f303 	mul.w	r3, r2, r3
 80145ec:	1af3      	subs	r3, r6, r3
 80145ee:	011b      	lsls	r3, r3, #4
 80145f0:	3332      	adds	r3, #50	; 0x32
 80145f2:	4a06      	ldr	r2, [pc, #24]	; (801460c <UART_SetConfig+0x434>)
 80145f4:	fba2 2303 	umull	r2, r3, r2, r3
 80145f8:	095b      	lsrs	r3, r3, #5
 80145fa:	f003 030f 	and.w	r3, r3, #15
 80145fe:	442b      	add	r3, r5
 8014600:	60a3      	str	r3, [r4, #8]
}
 8014602:	e7ff      	b.n	8014604 <UART_SetConfig+0x42c>
 8014604:	bf00      	nop
 8014606:	3714      	adds	r7, #20
 8014608:	46bd      	mov	sp, r7
 801460a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801460c:	51eb851f 	.word	0x51eb851f

08014610 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014610:	b480      	push	{r7}
 8014612:	b085      	sub	sp, #20
 8014614:	af00      	add	r7, sp, #0
 8014616:	4603      	mov	r3, r0
 8014618:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801461a:	2300      	movs	r3, #0
 801461c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801461e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014622:	2b84      	cmp	r3, #132	; 0x84
 8014624:	d005      	beq.n	8014632 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014626:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	4413      	add	r3, r2
 801462e:	3303      	adds	r3, #3
 8014630:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014632:	68fb      	ldr	r3, [r7, #12]
}
 8014634:	4618      	mov	r0, r3
 8014636:	3714      	adds	r7, #20
 8014638:	46bd      	mov	sp, r7
 801463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463e:	4770      	bx	lr

08014640 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014640:	b480      	push	{r7}
 8014642:	b083      	sub	sp, #12
 8014644:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014646:	f3ef 8305 	mrs	r3, IPSR
 801464a:	607b      	str	r3, [r7, #4]
  return(result);
 801464c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801464e:	2b00      	cmp	r3, #0
 8014650:	bf14      	ite	ne
 8014652:	2301      	movne	r3, #1
 8014654:	2300      	moveq	r3, #0
 8014656:	b2db      	uxtb	r3, r3
}
 8014658:	4618      	mov	r0, r3
 801465a:	370c      	adds	r7, #12
 801465c:	46bd      	mov	sp, r7
 801465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014662:	4770      	bx	lr

08014664 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014668:	f001 fec0 	bl	80163ec <vTaskStartScheduler>
  
  return osOK;
 801466c:	2300      	movs	r3, #0
}
 801466e:	4618      	mov	r0, r3
 8014670:	bd80      	pop	{r7, pc}

08014672 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014672:	b580      	push	{r7, lr}
 8014674:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014676:	f7ff ffe3 	bl	8014640 <inHandlerMode>
 801467a:	4603      	mov	r3, r0
 801467c:	2b00      	cmp	r3, #0
 801467e:	d003      	beq.n	8014688 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014680:	f001 ffb6 	bl	80165f0 <xTaskGetTickCountFromISR>
 8014684:	4603      	mov	r3, r0
 8014686:	e002      	b.n	801468e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8014688:	f001 ffa2 	bl	80165d0 <xTaskGetTickCount>
 801468c:	4603      	mov	r3, r0
  }
}
 801468e:	4618      	mov	r0, r3
 8014690:	bd80      	pop	{r7, pc}

08014692 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014694:	b087      	sub	sp, #28
 8014696:	af02      	add	r7, sp, #8
 8014698:	6078      	str	r0, [r7, #4]
 801469a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	685c      	ldr	r4, [r3, #4]
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80146a8:	b29e      	uxth	r6, r3
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7ff ffad 	bl	8014610 <makeFreeRtosPriority>
 80146b6:	4602      	mov	r2, r0
 80146b8:	f107 030c 	add.w	r3, r7, #12
 80146bc:	9301      	str	r3, [sp, #4]
 80146be:	9200      	str	r2, [sp, #0]
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	4632      	mov	r2, r6
 80146c4:	4629      	mov	r1, r5
 80146c6:	4620      	mov	r0, r4
 80146c8:	f001 fd24 	bl	8016114 <xTaskCreate>
 80146cc:	4603      	mov	r3, r0
 80146ce:	2b01      	cmp	r3, #1
 80146d0:	d001      	beq.n	80146d6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80146d2:	2300      	movs	r3, #0
 80146d4:	e000      	b.n	80146d8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80146d6:	68fb      	ldr	r3, [r7, #12]
}
 80146d8:	4618      	mov	r0, r3
 80146da:	3714      	adds	r7, #20
 80146dc:	46bd      	mov	sp, r7
 80146de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080146e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b084      	sub	sp, #16
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d001      	beq.n	80146f6 <osDelay+0x16>
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	e000      	b.n	80146f8 <osDelay+0x18>
 80146f6:	2301      	movs	r3, #1
 80146f8:	4618      	mov	r0, r3
 80146fa:	f001 fe43 	bl	8016384 <vTaskDelay>
  
  return osOK;
 80146fe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014700:	4618      	mov	r0, r3
 8014702:	3710      	adds	r7, #16
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}

08014708 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8014710:	2001      	movs	r0, #1
 8014712:	f000 ffb1 	bl	8015678 <xQueueCreateMutex>
 8014716:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8014718:	4618      	mov	r0, r3
 801471a:	3708      	adds	r7, #8
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801472a:	2300      	movs	r3, #0
 801472c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d101      	bne.n	8014738 <osMutexWait+0x18>
    return osErrorParameter;
 8014734:	2380      	movs	r3, #128	; 0x80
 8014736:	e03c      	b.n	80147b2 <osMutexWait+0x92>
  }
  
  ticks = 0;
 8014738:	2300      	movs	r3, #0
 801473a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014742:	d103      	bne.n	801474c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8014744:	f04f 33ff 	mov.w	r3, #4294967295
 8014748:	60fb      	str	r3, [r7, #12]
 801474a:	e009      	b.n	8014760 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d006      	beq.n	8014760 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d101      	bne.n	8014760 <osMutexWait+0x40>
      ticks = 1;
 801475c:	2301      	movs	r3, #1
 801475e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8014760:	f7ff ff6e 	bl	8014640 <inHandlerMode>
 8014764:	4603      	mov	r3, r0
 8014766:	2b00      	cmp	r3, #0
 8014768:	d017      	beq.n	801479a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801476a:	f107 0308 	add.w	r3, r7, #8
 801476e:	461a      	mov	r2, r3
 8014770:	2100      	movs	r1, #0
 8014772:	6878      	ldr	r0, [r7, #4]
 8014774:	f001 fac2 	bl	8015cfc <xQueueReceiveFromISR>
 8014778:	4603      	mov	r3, r0
 801477a:	2b01      	cmp	r3, #1
 801477c:	d001      	beq.n	8014782 <osMutexWait+0x62>
      return osErrorOS;
 801477e:	23ff      	movs	r3, #255	; 0xff
 8014780:	e017      	b.n	80147b2 <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d013      	beq.n	80147b0 <osMutexWait+0x90>
 8014788:	4b0c      	ldr	r3, [pc, #48]	; (80147bc <osMutexWait+0x9c>)
 801478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801478e:	601a      	str	r2, [r3, #0]
 8014790:	f3bf 8f4f 	dsb	sy
 8014794:	f3bf 8f6f 	isb	sy
 8014798:	e00a      	b.n	80147b0 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 801479a:	2300      	movs	r3, #0
 801479c:	68fa      	ldr	r2, [r7, #12]
 801479e:	2100      	movs	r1, #0
 80147a0:	6878      	ldr	r0, [r7, #4]
 80147a2:	f001 f999 	bl	8015ad8 <xQueueGenericReceive>
 80147a6:	4603      	mov	r3, r0
 80147a8:	2b01      	cmp	r3, #1
 80147aa:	d001      	beq.n	80147b0 <osMutexWait+0x90>
    return osErrorOS;
 80147ac:	23ff      	movs	r3, #255	; 0xff
 80147ae:	e000      	b.n	80147b2 <osMutexWait+0x92>
  }
  
  return osOK;
 80147b0:	2300      	movs	r3, #0
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	3710      	adds	r7, #16
 80147b6:	46bd      	mov	sp, r7
 80147b8:	bd80      	pop	{r7, pc}
 80147ba:	bf00      	nop
 80147bc:	e000ed04 	.word	0xe000ed04

080147c0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b084      	sub	sp, #16
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80147c8:	2300      	movs	r3, #0
 80147ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80147cc:	2300      	movs	r3, #0
 80147ce:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80147d0:	f7ff ff36 	bl	8014640 <inHandlerMode>
 80147d4:	4603      	mov	r3, r0
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d016      	beq.n	8014808 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80147da:	f107 0308 	add.w	r3, r7, #8
 80147de:	4619      	mov	r1, r3
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f001 f8ef 	bl	80159c4 <xQueueGiveFromISR>
 80147e6:	4603      	mov	r3, r0
 80147e8:	2b01      	cmp	r3, #1
 80147ea:	d001      	beq.n	80147f0 <osMutexRelease+0x30>
      return osErrorOS;
 80147ec:	23ff      	movs	r3, #255	; 0xff
 80147ee:	e017      	b.n	8014820 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d013      	beq.n	801481e <osMutexRelease+0x5e>
 80147f6:	4b0c      	ldr	r3, [pc, #48]	; (8014828 <osMutexRelease+0x68>)
 80147f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147fc:	601a      	str	r2, [r3, #0]
 80147fe:	f3bf 8f4f 	dsb	sy
 8014802:	f3bf 8f6f 	isb	sy
 8014806:	e00a      	b.n	801481e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8014808:	2300      	movs	r3, #0
 801480a:	2200      	movs	r2, #0
 801480c:	2100      	movs	r1, #0
 801480e:	6878      	ldr	r0, [r7, #4]
 8014810:	f000 ff4a 	bl	80156a8 <xQueueGenericSend>
 8014814:	4603      	mov	r3, r0
 8014816:	2b01      	cmp	r3, #1
 8014818:	d001      	beq.n	801481e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 801481a:	23ff      	movs	r3, #255	; 0xff
 801481c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801481e:	68fb      	ldr	r3, [r7, #12]
}
 8014820:	4618      	mov	r0, r3
 8014822:	3710      	adds	r7, #16
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	e000ed04 	.word	0xe000ed04

0801482c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801482c:	b580      	push	{r7, lr}
 801482e:	b084      	sub	sp, #16
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	2b01      	cmp	r3, #1
 801483a:	d110      	bne.n	801485e <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 801483c:	2203      	movs	r2, #3
 801483e:	2100      	movs	r1, #0
 8014840:	2001      	movs	r0, #1
 8014842:	f000 fea3 	bl	801558c <xQueueGenericCreate>
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d005      	beq.n	801485a <osSemaphoreCreate+0x2e>
 801484e:	2300      	movs	r3, #0
 8014850:	2200      	movs	r2, #0
 8014852:	2100      	movs	r1, #0
 8014854:	68f8      	ldr	r0, [r7, #12]
 8014856:	f000 ff27 	bl	80156a8 <xQueueGenericSend>
    return sema;
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	e000      	b.n	8014860 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 801485e:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8014860:	4618      	mov	r0, r3
 8014862:	3710      	adds	r7, #16
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}

08014868 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b084      	sub	sp, #16
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
 8014870:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014872:	2300      	movs	r3, #0
 8014874:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d101      	bne.n	8014880 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801487c:	2380      	movs	r3, #128	; 0x80
 801487e:	e03c      	b.n	80148fa <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 8014880:	2300      	movs	r3, #0
 8014882:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	f1b3 3fff 	cmp.w	r3, #4294967295
 801488a:	d103      	bne.n	8014894 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801488c:	f04f 33ff 	mov.w	r3, #4294967295
 8014890:	60fb      	str	r3, [r7, #12]
 8014892:	e009      	b.n	80148a8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d006      	beq.n	80148a8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d101      	bne.n	80148a8 <osSemaphoreWait+0x40>
      ticks = 1;
 80148a4:	2301      	movs	r3, #1
 80148a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80148a8:	f7ff feca 	bl	8014640 <inHandlerMode>
 80148ac:	4603      	mov	r3, r0
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d017      	beq.n	80148e2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80148b2:	f107 0308 	add.w	r3, r7, #8
 80148b6:	461a      	mov	r2, r3
 80148b8:	2100      	movs	r1, #0
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	f001 fa1e 	bl	8015cfc <xQueueReceiveFromISR>
 80148c0:	4603      	mov	r3, r0
 80148c2:	2b01      	cmp	r3, #1
 80148c4:	d001      	beq.n	80148ca <osSemaphoreWait+0x62>
      return osErrorOS;
 80148c6:	23ff      	movs	r3, #255	; 0xff
 80148c8:	e017      	b.n	80148fa <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d013      	beq.n	80148f8 <osSemaphoreWait+0x90>
 80148d0:	4b0c      	ldr	r3, [pc, #48]	; (8014904 <osSemaphoreWait+0x9c>)
 80148d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148d6:	601a      	str	r2, [r3, #0]
 80148d8:	f3bf 8f4f 	dsb	sy
 80148dc:	f3bf 8f6f 	isb	sy
 80148e0:	e00a      	b.n	80148f8 <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80148e2:	2300      	movs	r3, #0
 80148e4:	68fa      	ldr	r2, [r7, #12]
 80148e6:	2100      	movs	r1, #0
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f001 f8f5 	bl	8015ad8 <xQueueGenericReceive>
 80148ee:	4603      	mov	r3, r0
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d001      	beq.n	80148f8 <osSemaphoreWait+0x90>
    return osErrorOS;
 80148f4:	23ff      	movs	r3, #255	; 0xff
 80148f6:	e000      	b.n	80148fa <osSemaphoreWait+0x92>
  }
  
  return osOK;
 80148f8:	2300      	movs	r3, #0
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3710      	adds	r7, #16
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
 8014902:	bf00      	nop
 8014904:	e000ed04 	.word	0xe000ed04

08014908 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b084      	sub	sp, #16
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014910:	2300      	movs	r3, #0
 8014912:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014914:	2300      	movs	r3, #0
 8014916:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014918:	f7ff fe92 	bl	8014640 <inHandlerMode>
 801491c:	4603      	mov	r3, r0
 801491e:	2b00      	cmp	r3, #0
 8014920:	d016      	beq.n	8014950 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014922:	f107 0308 	add.w	r3, r7, #8
 8014926:	4619      	mov	r1, r3
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f001 f84b 	bl	80159c4 <xQueueGiveFromISR>
 801492e:	4603      	mov	r3, r0
 8014930:	2b01      	cmp	r3, #1
 8014932:	d001      	beq.n	8014938 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014934:	23ff      	movs	r3, #255	; 0xff
 8014936:	e017      	b.n	8014968 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d013      	beq.n	8014966 <osSemaphoreRelease+0x5e>
 801493e:	4b0c      	ldr	r3, [pc, #48]	; (8014970 <osSemaphoreRelease+0x68>)
 8014940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014944:	601a      	str	r2, [r3, #0]
 8014946:	f3bf 8f4f 	dsb	sy
 801494a:	f3bf 8f6f 	isb	sy
 801494e:	e00a      	b.n	8014966 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014950:	2300      	movs	r3, #0
 8014952:	2200      	movs	r2, #0
 8014954:	2100      	movs	r1, #0
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f000 fea6 	bl	80156a8 <xQueueGenericSend>
 801495c:	4603      	mov	r3, r0
 801495e:	2b01      	cmp	r3, #1
 8014960:	d001      	beq.n	8014966 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014962:	23ff      	movs	r3, #255	; 0xff
 8014964:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8014966:	68fb      	ldr	r3, [r7, #12]
}
 8014968:	4618      	mov	r0, r3
 801496a:	3710      	adds	r7, #16
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}
 8014970:	e000ed04 	.word	0xe000ed04

08014974 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 801497c:	f7ff fe60 	bl	8014640 <inHandlerMode>
 8014980:	4603      	mov	r3, r0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d001      	beq.n	801498a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8014986:	2382      	movs	r3, #130	; 0x82
 8014988:	e003      	b.n	8014992 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801498a:	6878      	ldr	r0, [r7, #4]
 801498c:	f001 fa6b 	bl	8015e66 <vQueueDelete>

  return osOK; 
 8014990:	2300      	movs	r3, #0
}
 8014992:	4618      	mov	r0, r3
 8014994:	3708      	adds	r7, #8
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}

0801499a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801499a:	b580      	push	{r7, lr}
 801499c:	b082      	sub	sp, #8
 801499e:	af00      	add	r7, sp, #0
 80149a0:	6078      	str	r0, [r7, #4]
 80149a2:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6818      	ldr	r0, [r3, #0]
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	685b      	ldr	r3, [r3, #4]
 80149ac:	2200      	movs	r2, #0
 80149ae:	4619      	mov	r1, r3
 80149b0:	f000 fdec 	bl	801558c <xQueueGenericCreate>
 80149b4:	4603      	mov	r3, r0
#endif
}
 80149b6:	4618      	mov	r0, r3
 80149b8:	3708      	adds	r7, #8
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}
	...

080149c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b086      	sub	sp, #24
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	60f8      	str	r0, [r7, #12]
 80149c8:	60b9      	str	r1, [r7, #8]
 80149ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80149cc:	2300      	movs	r3, #0
 80149ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d101      	bne.n	80149de <osMessagePut+0x1e>
    ticks = 1;
 80149da:	2301      	movs	r3, #1
 80149dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80149de:	f7ff fe2f 	bl	8014640 <inHandlerMode>
 80149e2:	4603      	mov	r3, r0
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d018      	beq.n	8014a1a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80149e8:	f107 0210 	add.w	r2, r7, #16
 80149ec:	f107 0108 	add.w	r1, r7, #8
 80149f0:	2300      	movs	r3, #0
 80149f2:	68f8      	ldr	r0, [r7, #12]
 80149f4:	f000 ff52 	bl	801589c <xQueueGenericSendFromISR>
 80149f8:	4603      	mov	r3, r0
 80149fa:	2b01      	cmp	r3, #1
 80149fc:	d001      	beq.n	8014a02 <osMessagePut+0x42>
      return osErrorOS;
 80149fe:	23ff      	movs	r3, #255	; 0xff
 8014a00:	e018      	b.n	8014a34 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014a02:	693b      	ldr	r3, [r7, #16]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d014      	beq.n	8014a32 <osMessagePut+0x72>
 8014a08:	4b0c      	ldr	r3, [pc, #48]	; (8014a3c <osMessagePut+0x7c>)
 8014a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a0e:	601a      	str	r2, [r3, #0]
 8014a10:	f3bf 8f4f 	dsb	sy
 8014a14:	f3bf 8f6f 	isb	sy
 8014a18:	e00b      	b.n	8014a32 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014a1a:	f107 0108 	add.w	r1, r7, #8
 8014a1e:	2300      	movs	r3, #0
 8014a20:	697a      	ldr	r2, [r7, #20]
 8014a22:	68f8      	ldr	r0, [r7, #12]
 8014a24:	f000 fe40 	bl	80156a8 <xQueueGenericSend>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	2b01      	cmp	r3, #1
 8014a2c:	d001      	beq.n	8014a32 <osMessagePut+0x72>
      return osErrorOS;
 8014a2e:	23ff      	movs	r3, #255	; 0xff
 8014a30:	e000      	b.n	8014a34 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014a32:	2300      	movs	r3, #0
}
 8014a34:	4618      	mov	r0, r3
 8014a36:	3718      	adds	r7, #24
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	e000ed04 	.word	0xe000ed04

08014a40 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014a40:	b590      	push	{r4, r7, lr}
 8014a42:	b08b      	sub	sp, #44	; 0x2c
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	60f8      	str	r0, [r7, #12]
 8014a48:	60b9      	str	r1, [r7, #8]
 8014a4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014a50:	2300      	movs	r3, #0
 8014a52:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d10a      	bne.n	8014a70 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8014a5a:	2380      	movs	r3, #128	; 0x80
 8014a5c:	617b      	str	r3, [r7, #20]
    return event;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	461c      	mov	r4, r3
 8014a62:	f107 0314 	add.w	r3, r7, #20
 8014a66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014a6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014a6e:	e054      	b.n	8014b1a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014a70:	2300      	movs	r3, #0
 8014a72:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014a74:	2300      	movs	r3, #0
 8014a76:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a7e:	d103      	bne.n	8014a88 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014a80:	f04f 33ff 	mov.w	r3, #4294967295
 8014a84:	627b      	str	r3, [r7, #36]	; 0x24
 8014a86:	e009      	b.n	8014a9c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d006      	beq.n	8014a9c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8014a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d101      	bne.n	8014a9c <osMessageGet+0x5c>
      ticks = 1;
 8014a98:	2301      	movs	r3, #1
 8014a9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014a9c:	f7ff fdd0 	bl	8014640 <inHandlerMode>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d01c      	beq.n	8014ae0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014aa6:	f107 0220 	add.w	r2, r7, #32
 8014aaa:	f107 0314 	add.w	r3, r7, #20
 8014aae:	3304      	adds	r3, #4
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	68b8      	ldr	r0, [r7, #8]
 8014ab4:	f001 f922 	bl	8015cfc <xQueueReceiveFromISR>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b01      	cmp	r3, #1
 8014abc:	d102      	bne.n	8014ac4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8014abe:	2310      	movs	r3, #16
 8014ac0:	617b      	str	r3, [r7, #20]
 8014ac2:	e001      	b.n	8014ac8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014ac8:	6a3b      	ldr	r3, [r7, #32]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d01d      	beq.n	8014b0a <osMessageGet+0xca>
 8014ace:	4b15      	ldr	r3, [pc, #84]	; (8014b24 <osMessageGet+0xe4>)
 8014ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ad4:	601a      	str	r2, [r3, #0]
 8014ad6:	f3bf 8f4f 	dsb	sy
 8014ada:	f3bf 8f6f 	isb	sy
 8014ade:	e014      	b.n	8014b0a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014ae0:	f107 0314 	add.w	r3, r7, #20
 8014ae4:	1d19      	adds	r1, r3, #4
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014aea:	68b8      	ldr	r0, [r7, #8]
 8014aec:	f000 fff4 	bl	8015ad8 <xQueueGenericReceive>
 8014af0:	4603      	mov	r3, r0
 8014af2:	2b01      	cmp	r3, #1
 8014af4:	d102      	bne.n	8014afc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014af6:	2310      	movs	r3, #16
 8014af8:	617b      	str	r3, [r7, #20]
 8014afa:	e006      	b.n	8014b0a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d101      	bne.n	8014b06 <osMessageGet+0xc6>
 8014b02:	2300      	movs	r3, #0
 8014b04:	e000      	b.n	8014b08 <osMessageGet+0xc8>
 8014b06:	2340      	movs	r3, #64	; 0x40
 8014b08:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	461c      	mov	r4, r3
 8014b0e:	f107 0314 	add.w	r3, r7, #20
 8014b12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014b1a:	68f8      	ldr	r0, [r7, #12]
 8014b1c:	372c      	adds	r7, #44	; 0x2c
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd90      	pop	{r4, r7, pc}
 8014b22:	bf00      	nop
 8014b24:	e000ed04 	.word	0xe000ed04

08014b28 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b082      	sub	sp, #8
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014b30:	f7ff fd86 	bl	8014640 <inHandlerMode>
 8014b34:	4603      	mov	r3, r0
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d004      	beq.n	8014b44 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f001 f978 	bl	8015e30 <uxQueueMessagesWaitingFromISR>
 8014b40:	4603      	mov	r3, r0
 8014b42:	e003      	b.n	8014b4c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8014b44:	6878      	ldr	r0, [r7, #4]
 8014b46:	f001 f956 	bl	8015df6 <uxQueueMessagesWaiting>
 8014b4a:	4603      	mov	r3, r0
  }
}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	3708      	adds	r7, #8
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bd80      	pop	{r7, pc}

08014b54 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b082      	sub	sp, #8
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014b5c:	f7ff fd70 	bl	8014640 <inHandlerMode>
 8014b60:	4603      	mov	r3, r0
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d001      	beq.n	8014b6a <osMessageDelete+0x16>
    return osErrorISR;
 8014b66:	2382      	movs	r3, #130	; 0x82
 8014b68:	e003      	b.n	8014b72 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f001 f97b 	bl	8015e66 <vQueueDelete>

  return osOK; 
 8014b70:	2300      	movs	r3, #0
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3708      	adds	r7, #8
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}

08014b7a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014b7a:	b480      	push	{r7}
 8014b7c:	b083      	sub	sp, #12
 8014b7e:	af00      	add	r7, sp, #0
 8014b80:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f103 0208 	add.w	r2, r3, #8
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b92:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f103 0208 	add.w	r2, r3, #8
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f103 0208 	add.w	r2, r3, #8
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	2200      	movs	r2, #0
 8014bac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014bae:	bf00      	nop
 8014bb0:	370c      	adds	r7, #12
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb8:	4770      	bx	lr

08014bba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014bba:	b480      	push	{r7}
 8014bbc:	b083      	sub	sp, #12
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014bc8:	bf00      	nop
 8014bca:	370c      	adds	r7, #12
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd2:	4770      	bx	lr

08014bd4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014bd4:	b480      	push	{r7}
 8014bd6:	b085      	sub	sp, #20
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
 8014bdc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	685b      	ldr	r3, [r3, #4]
 8014be2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	68fa      	ldr	r2, [r7, #12]
 8014be8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	689a      	ldr	r2, [r3, #8]
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	689b      	ldr	r3, [r3, #8]
 8014bf6:	683a      	ldr	r2, [r7, #0]
 8014bf8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	683a      	ldr	r2, [r7, #0]
 8014bfe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	687a      	ldr	r2, [r7, #4]
 8014c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	1c5a      	adds	r2, r3, #1
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	601a      	str	r2, [r3, #0]
}
 8014c10:	bf00      	nop
 8014c12:	3714      	adds	r7, #20
 8014c14:	46bd      	mov	sp, r7
 8014c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1a:	4770      	bx	lr

08014c1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014c1c:	b480      	push	{r7}
 8014c1e:	b085      	sub	sp, #20
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
 8014c24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c32:	d103      	bne.n	8014c3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	691b      	ldr	r3, [r3, #16]
 8014c38:	60fb      	str	r3, [r7, #12]
 8014c3a:	e00c      	b.n	8014c56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	3308      	adds	r3, #8
 8014c40:	60fb      	str	r3, [r7, #12]
 8014c42:	e002      	b.n	8014c4a <vListInsert+0x2e>
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	685b      	ldr	r3, [r3, #4]
 8014c48:	60fb      	str	r3, [r7, #12]
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	685b      	ldr	r3, [r3, #4]
 8014c4e:	681a      	ldr	r2, [r3, #0]
 8014c50:	68bb      	ldr	r3, [r7, #8]
 8014c52:	429a      	cmp	r2, r3
 8014c54:	d9f6      	bls.n	8014c44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	685a      	ldr	r2, [r3, #4]
 8014c5a:	683b      	ldr	r3, [r7, #0]
 8014c5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	685b      	ldr	r3, [r3, #4]
 8014c62:	683a      	ldr	r2, [r7, #0]
 8014c64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	68fa      	ldr	r2, [r7, #12]
 8014c6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	683a      	ldr	r2, [r7, #0]
 8014c70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	1c5a      	adds	r2, r3, #1
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	601a      	str	r2, [r3, #0]
}
 8014c82:	bf00      	nop
 8014c84:	3714      	adds	r7, #20
 8014c86:	46bd      	mov	sp, r7
 8014c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8c:	4770      	bx	lr

08014c8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014c8e:	b480      	push	{r7}
 8014c90:	b085      	sub	sp, #20
 8014c92:	af00      	add	r7, sp, #0
 8014c94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	691b      	ldr	r3, [r3, #16]
 8014c9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	685b      	ldr	r3, [r3, #4]
 8014ca0:	687a      	ldr	r2, [r7, #4]
 8014ca2:	6892      	ldr	r2, [r2, #8]
 8014ca4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	689b      	ldr	r3, [r3, #8]
 8014caa:	687a      	ldr	r2, [r7, #4]
 8014cac:	6852      	ldr	r2, [r2, #4]
 8014cae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	685a      	ldr	r2, [r3, #4]
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	429a      	cmp	r2, r3
 8014cb8:	d103      	bne.n	8014cc2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	689a      	ldr	r2, [r3, #8]
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	1e5a      	subs	r2, r3, #1
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	681b      	ldr	r3, [r3, #0]
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	3714      	adds	r7, #20
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce0:	4770      	bx	lr
	...

08014ce4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014ce4:	b480      	push	{r7}
 8014ce6:	b085      	sub	sp, #20
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	60f8      	str	r0, [r7, #12]
 8014cec:	60b9      	str	r1, [r7, #8]
 8014cee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	3b04      	subs	r3, #4
 8014cf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	3b04      	subs	r3, #4
 8014d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	f023 0201 	bic.w	r2, r3, #1
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	3b04      	subs	r3, #4
 8014d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014d14:	4a0c      	ldr	r2, [pc, #48]	; (8014d48 <pxPortInitialiseStack+0x64>)
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	3b14      	subs	r3, #20
 8014d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014d20:	687a      	ldr	r2, [r7, #4]
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	3b04      	subs	r3, #4
 8014d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	f06f 0202 	mvn.w	r2, #2
 8014d32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	3b20      	subs	r3, #32
 8014d38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014d3a:	68fb      	ldr	r3, [r7, #12]
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3714      	adds	r7, #20
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr
 8014d48:	08014d4d 	.word	0x08014d4d

08014d4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b083      	sub	sp, #12
 8014d50:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014d52:	4b0c      	ldr	r3, [pc, #48]	; (8014d84 <prvTaskExitError+0x38>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d5a:	d009      	beq.n	8014d70 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d60:	f383 8811 	msr	BASEPRI, r3
 8014d64:	f3bf 8f6f 	isb	sy
 8014d68:	f3bf 8f4f 	dsb	sy
 8014d6c:	607b      	str	r3, [r7, #4]
 8014d6e:	e7fe      	b.n	8014d6e <prvTaskExitError+0x22>
 8014d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d74:	f383 8811 	msr	BASEPRI, r3
 8014d78:	f3bf 8f6f 	isb	sy
 8014d7c:	f3bf 8f4f 	dsb	sy
 8014d80:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8014d82:	e7fe      	b.n	8014d82 <prvTaskExitError+0x36>
 8014d84:	20000004 	.word	0x20000004
	...

08014d90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014d90:	4b07      	ldr	r3, [pc, #28]	; (8014db0 <pxCurrentTCBConst2>)
 8014d92:	6819      	ldr	r1, [r3, #0]
 8014d94:	6808      	ldr	r0, [r1, #0]
 8014d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d9a:	f380 8809 	msr	PSP, r0
 8014d9e:	f3bf 8f6f 	isb	sy
 8014da2:	f04f 0000 	mov.w	r0, #0
 8014da6:	f380 8811 	msr	BASEPRI, r0
 8014daa:	4770      	bx	lr
 8014dac:	f3af 8000 	nop.w

08014db0 <pxCurrentTCBConst2>:
 8014db0:	20003e60 	.word	0x20003e60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014db4:	bf00      	nop
 8014db6:	bf00      	nop

08014db8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8014db8:	4806      	ldr	r0, [pc, #24]	; (8014dd4 <prvPortStartFirstTask+0x1c>)
 8014dba:	6800      	ldr	r0, [r0, #0]
 8014dbc:	6800      	ldr	r0, [r0, #0]
 8014dbe:	f380 8808 	msr	MSP, r0
 8014dc2:	b662      	cpsie	i
 8014dc4:	b661      	cpsie	f
 8014dc6:	f3bf 8f4f 	dsb	sy
 8014dca:	f3bf 8f6f 	isb	sy
 8014dce:	df00      	svc	0
 8014dd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014dd2:	bf00      	nop
 8014dd4:	e000ed08 	.word	0xe000ed08

08014dd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b086      	sub	sp, #24
 8014ddc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014dde:	4b3b      	ldr	r3, [pc, #236]	; (8014ecc <xPortStartScheduler+0xf4>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	4a3b      	ldr	r2, [pc, #236]	; (8014ed0 <xPortStartScheduler+0xf8>)
 8014de4:	4293      	cmp	r3, r2
 8014de6:	d109      	bne.n	8014dfc <xPortStartScheduler+0x24>
 8014de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dec:	f383 8811 	msr	BASEPRI, r3
 8014df0:	f3bf 8f6f 	isb	sy
 8014df4:	f3bf 8f4f 	dsb	sy
 8014df8:	613b      	str	r3, [r7, #16]
 8014dfa:	e7fe      	b.n	8014dfa <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014dfc:	4b33      	ldr	r3, [pc, #204]	; (8014ecc <xPortStartScheduler+0xf4>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	4a34      	ldr	r2, [pc, #208]	; (8014ed4 <xPortStartScheduler+0xfc>)
 8014e02:	4293      	cmp	r3, r2
 8014e04:	d109      	bne.n	8014e1a <xPortStartScheduler+0x42>
 8014e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e0a:	f383 8811 	msr	BASEPRI, r3
 8014e0e:	f3bf 8f6f 	isb	sy
 8014e12:	f3bf 8f4f 	dsb	sy
 8014e16:	60fb      	str	r3, [r7, #12]
 8014e18:	e7fe      	b.n	8014e18 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014e1a:	4b2f      	ldr	r3, [pc, #188]	; (8014ed8 <xPortStartScheduler+0x100>)
 8014e1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014e26:	697b      	ldr	r3, [r7, #20]
 8014e28:	22ff      	movs	r2, #255	; 0xff
 8014e2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	781b      	ldrb	r3, [r3, #0]
 8014e30:	b2db      	uxtb	r3, r3
 8014e32:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014e34:	79fb      	ldrb	r3, [r7, #7]
 8014e36:	b2db      	uxtb	r3, r3
 8014e38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014e3c:	b2da      	uxtb	r2, r3
 8014e3e:	4b27      	ldr	r3, [pc, #156]	; (8014edc <xPortStartScheduler+0x104>)
 8014e40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014e42:	4b27      	ldr	r3, [pc, #156]	; (8014ee0 <xPortStartScheduler+0x108>)
 8014e44:	2207      	movs	r2, #7
 8014e46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e48:	e009      	b.n	8014e5e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014e4a:	4b25      	ldr	r3, [pc, #148]	; (8014ee0 <xPortStartScheduler+0x108>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	3b01      	subs	r3, #1
 8014e50:	4a23      	ldr	r2, [pc, #140]	; (8014ee0 <xPortStartScheduler+0x108>)
 8014e52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014e54:	79fb      	ldrb	r3, [r7, #7]
 8014e56:	b2db      	uxtb	r3, r3
 8014e58:	005b      	lsls	r3, r3, #1
 8014e5a:	b2db      	uxtb	r3, r3
 8014e5c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e5e:	79fb      	ldrb	r3, [r7, #7]
 8014e60:	b2db      	uxtb	r3, r3
 8014e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e66:	2b80      	cmp	r3, #128	; 0x80
 8014e68:	d0ef      	beq.n	8014e4a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014e6a:	4b1d      	ldr	r3, [pc, #116]	; (8014ee0 <xPortStartScheduler+0x108>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	021b      	lsls	r3, r3, #8
 8014e70:	4a1b      	ldr	r2, [pc, #108]	; (8014ee0 <xPortStartScheduler+0x108>)
 8014e72:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014e74:	4b1a      	ldr	r3, [pc, #104]	; (8014ee0 <xPortStartScheduler+0x108>)
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014e7c:	4a18      	ldr	r2, [pc, #96]	; (8014ee0 <xPortStartScheduler+0x108>)
 8014e7e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014e80:	68bb      	ldr	r3, [r7, #8]
 8014e82:	b2da      	uxtb	r2, r3
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014e88:	4a16      	ldr	r2, [pc, #88]	; (8014ee4 <xPortStartScheduler+0x10c>)
 8014e8a:	4b16      	ldr	r3, [pc, #88]	; (8014ee4 <xPortStartScheduler+0x10c>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014e92:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014e94:	4a13      	ldr	r2, [pc, #76]	; (8014ee4 <xPortStartScheduler+0x10c>)
 8014e96:	4b13      	ldr	r3, [pc, #76]	; (8014ee4 <xPortStartScheduler+0x10c>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014e9e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014ea0:	f000 f8d2 	bl	8015048 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014ea4:	4b10      	ldr	r3, [pc, #64]	; (8014ee8 <xPortStartScheduler+0x110>)
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014eaa:	f000 f8e9 	bl	8015080 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014eae:	4a0f      	ldr	r2, [pc, #60]	; (8014eec <xPortStartScheduler+0x114>)
 8014eb0:	4b0e      	ldr	r3, [pc, #56]	; (8014eec <xPortStartScheduler+0x114>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014eb8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014eba:	f7ff ff7d 	bl	8014db8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8014ebe:	f7ff ff45 	bl	8014d4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014ec2:	2300      	movs	r3, #0
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3718      	adds	r7, #24
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	e000ed00 	.word	0xe000ed00
 8014ed0:	410fc271 	.word	0x410fc271
 8014ed4:	410fc270 	.word	0x410fc270
 8014ed8:	e000e400 	.word	0xe000e400
 8014edc:	20000240 	.word	0x20000240
 8014ee0:	20000244 	.word	0x20000244
 8014ee4:	e000ed20 	.word	0xe000ed20
 8014ee8:	20000004 	.word	0x20000004
 8014eec:	e000ef34 	.word	0xe000ef34

08014ef0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	b083      	sub	sp, #12
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014efa:	f383 8811 	msr	BASEPRI, r3
 8014efe:	f3bf 8f6f 	isb	sy
 8014f02:	f3bf 8f4f 	dsb	sy
 8014f06:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014f08:	4b0e      	ldr	r3, [pc, #56]	; (8014f44 <vPortEnterCritical+0x54>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	4a0d      	ldr	r2, [pc, #52]	; (8014f44 <vPortEnterCritical+0x54>)
 8014f10:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014f12:	4b0c      	ldr	r3, [pc, #48]	; (8014f44 <vPortEnterCritical+0x54>)
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	2b01      	cmp	r3, #1
 8014f18:	d10e      	bne.n	8014f38 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014f1a:	4b0b      	ldr	r3, [pc, #44]	; (8014f48 <vPortEnterCritical+0x58>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	b2db      	uxtb	r3, r3
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d009      	beq.n	8014f38 <vPortEnterCritical+0x48>
 8014f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f28:	f383 8811 	msr	BASEPRI, r3
 8014f2c:	f3bf 8f6f 	isb	sy
 8014f30:	f3bf 8f4f 	dsb	sy
 8014f34:	603b      	str	r3, [r7, #0]
 8014f36:	e7fe      	b.n	8014f36 <vPortEnterCritical+0x46>
	}
}
 8014f38:	bf00      	nop
 8014f3a:	370c      	adds	r7, #12
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f42:	4770      	bx	lr
 8014f44:	20000004 	.word	0x20000004
 8014f48:	e000ed04 	.word	0xe000ed04

08014f4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014f4c:	b480      	push	{r7}
 8014f4e:	b083      	sub	sp, #12
 8014f50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014f52:	4b11      	ldr	r3, [pc, #68]	; (8014f98 <vPortExitCritical+0x4c>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d109      	bne.n	8014f6e <vPortExitCritical+0x22>
 8014f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f5e:	f383 8811 	msr	BASEPRI, r3
 8014f62:	f3bf 8f6f 	isb	sy
 8014f66:	f3bf 8f4f 	dsb	sy
 8014f6a:	607b      	str	r3, [r7, #4]
 8014f6c:	e7fe      	b.n	8014f6c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014f6e:	4b0a      	ldr	r3, [pc, #40]	; (8014f98 <vPortExitCritical+0x4c>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	3b01      	subs	r3, #1
 8014f74:	4a08      	ldr	r2, [pc, #32]	; (8014f98 <vPortExitCritical+0x4c>)
 8014f76:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014f78:	4b07      	ldr	r3, [pc, #28]	; (8014f98 <vPortExitCritical+0x4c>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d104      	bne.n	8014f8a <vPortExitCritical+0x3e>
 8014f80:	2300      	movs	r3, #0
 8014f82:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014f8a:	bf00      	nop
 8014f8c:	370c      	adds	r7, #12
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f94:	4770      	bx	lr
 8014f96:	bf00      	nop
 8014f98:	20000004 	.word	0x20000004
 8014f9c:	00000000 	.word	0x00000000

08014fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014fa0:	f3ef 8009 	mrs	r0, PSP
 8014fa4:	f3bf 8f6f 	isb	sy
 8014fa8:	4b15      	ldr	r3, [pc, #84]	; (8015000 <pxCurrentTCBConst>)
 8014faa:	681a      	ldr	r2, [r3, #0]
 8014fac:	f01e 0f10 	tst.w	lr, #16
 8014fb0:	bf08      	it	eq
 8014fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fba:	6010      	str	r0, [r2, #0]
 8014fbc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8014fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014fc4:	f380 8811 	msr	BASEPRI, r0
 8014fc8:	f3bf 8f4f 	dsb	sy
 8014fcc:	f3bf 8f6f 	isb	sy
 8014fd0:	f001 fbdc 	bl	801678c <vTaskSwitchContext>
 8014fd4:	f04f 0000 	mov.w	r0, #0
 8014fd8:	f380 8811 	msr	BASEPRI, r0
 8014fdc:	bc08      	pop	{r3}
 8014fde:	6819      	ldr	r1, [r3, #0]
 8014fe0:	6808      	ldr	r0, [r1, #0]
 8014fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fe6:	f01e 0f10 	tst.w	lr, #16
 8014fea:	bf08      	it	eq
 8014fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014ff0:	f380 8809 	msr	PSP, r0
 8014ff4:	f3bf 8f6f 	isb	sy
 8014ff8:	4770      	bx	lr
 8014ffa:	bf00      	nop
 8014ffc:	f3af 8000 	nop.w

08015000 <pxCurrentTCBConst>:
 8015000:	20003e60 	.word	0x20003e60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015004:	bf00      	nop
 8015006:	bf00      	nop

08015008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	af00      	add	r7, sp, #0
	__asm volatile
 801500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015012:	f383 8811 	msr	BASEPRI, r3
 8015016:	f3bf 8f6f 	isb	sy
 801501a:	f3bf 8f4f 	dsb	sy
 801501e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015020:	f001 faf8 	bl	8016614 <xTaskIncrementTick>
 8015024:	4603      	mov	r3, r0
 8015026:	2b00      	cmp	r3, #0
 8015028:	d003      	beq.n	8015032 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801502a:	4b06      	ldr	r3, [pc, #24]	; (8015044 <SysTick_Handler+0x3c>)
 801502c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015030:	601a      	str	r2, [r3, #0]
 8015032:	2300      	movs	r3, #0
 8015034:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801503c:	bf00      	nop
 801503e:	3708      	adds	r7, #8
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}
 8015044:	e000ed04 	.word	0xe000ed04

08015048 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015048:	b480      	push	{r7}
 801504a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801504c:	4a08      	ldr	r2, [pc, #32]	; (8015070 <vPortSetupTimerInterrupt+0x28>)
 801504e:	4b09      	ldr	r3, [pc, #36]	; (8015074 <vPortSetupTimerInterrupt+0x2c>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	4909      	ldr	r1, [pc, #36]	; (8015078 <vPortSetupTimerInterrupt+0x30>)
 8015054:	fba1 1303 	umull	r1, r3, r1, r3
 8015058:	099b      	lsrs	r3, r3, #6
 801505a:	3b01      	subs	r3, #1
 801505c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801505e:	4b07      	ldr	r3, [pc, #28]	; (801507c <vPortSetupTimerInterrupt+0x34>)
 8015060:	2207      	movs	r2, #7
 8015062:	601a      	str	r2, [r3, #0]
}
 8015064:	bf00      	nop
 8015066:	46bd      	mov	sp, r7
 8015068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506c:	4770      	bx	lr
 801506e:	bf00      	nop
 8015070:	e000e014 	.word	0xe000e014
 8015074:	20000050 	.word	0x20000050
 8015078:	10624dd3 	.word	0x10624dd3
 801507c:	e000e010 	.word	0xe000e010

08015080 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015080:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015090 <vPortEnableVFP+0x10>
 8015084:	6801      	ldr	r1, [r0, #0]
 8015086:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801508a:	6001      	str	r1, [r0, #0]
 801508c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801508e:	bf00      	nop
 8015090:	e000ed88 	.word	0xe000ed88

08015094 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015094:	b480      	push	{r7}
 8015096:	b085      	sub	sp, #20
 8015098:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 801509a:	f3ef 8305 	mrs	r3, IPSR
 801509e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	2b0f      	cmp	r3, #15
 80150a4:	d913      	bls.n	80150ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80150a6:	4a16      	ldr	r2, [pc, #88]	; (8015100 <vPortValidateInterruptPriority+0x6c>)
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	4413      	add	r3, r2
 80150ac:	781b      	ldrb	r3, [r3, #0]
 80150ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80150b0:	4b14      	ldr	r3, [pc, #80]	; (8015104 <vPortValidateInterruptPriority+0x70>)
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	7afa      	ldrb	r2, [r7, #11]
 80150b6:	429a      	cmp	r2, r3
 80150b8:	d209      	bcs.n	80150ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80150ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150be:	f383 8811 	msr	BASEPRI, r3
 80150c2:	f3bf 8f6f 	isb	sy
 80150c6:	f3bf 8f4f 	dsb	sy
 80150ca:	607b      	str	r3, [r7, #4]
 80150cc:	e7fe      	b.n	80150cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80150ce:	4b0e      	ldr	r3, [pc, #56]	; (8015108 <vPortValidateInterruptPriority+0x74>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80150d6:	4b0d      	ldr	r3, [pc, #52]	; (801510c <vPortValidateInterruptPriority+0x78>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	429a      	cmp	r2, r3
 80150dc:	d909      	bls.n	80150f2 <vPortValidateInterruptPriority+0x5e>
 80150de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150e2:	f383 8811 	msr	BASEPRI, r3
 80150e6:	f3bf 8f6f 	isb	sy
 80150ea:	f3bf 8f4f 	dsb	sy
 80150ee:	603b      	str	r3, [r7, #0]
 80150f0:	e7fe      	b.n	80150f0 <vPortValidateInterruptPriority+0x5c>
	}
 80150f2:	bf00      	nop
 80150f4:	3714      	adds	r7, #20
 80150f6:	46bd      	mov	sp, r7
 80150f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fc:	4770      	bx	lr
 80150fe:	bf00      	nop
 8015100:	e000e3f0 	.word	0xe000e3f0
 8015104:	20000240 	.word	0x20000240
 8015108:	e000ed0c 	.word	0xe000ed0c
 801510c:	20000244 	.word	0x20000244

08015110 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b08a      	sub	sp, #40	; 0x28
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015118:	2300      	movs	r3, #0
 801511a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801511c:	f001 f9ae 	bl	801647c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015120:	4b57      	ldr	r3, [pc, #348]	; (8015280 <pvPortMalloc+0x170>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d101      	bne.n	801512c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015128:	f000 f90c 	bl	8015344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801512c:	4b55      	ldr	r3, [pc, #340]	; (8015284 <pvPortMalloc+0x174>)
 801512e:	681a      	ldr	r2, [r3, #0]
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	4013      	ands	r3, r2
 8015134:	2b00      	cmp	r3, #0
 8015136:	f040 808c 	bne.w	8015252 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d01c      	beq.n	801517a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8015140:	2208      	movs	r2, #8
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	4413      	add	r3, r2
 8015146:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f003 0307 	and.w	r3, r3, #7
 801514e:	2b00      	cmp	r3, #0
 8015150:	d013      	beq.n	801517a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f023 0307 	bic.w	r3, r3, #7
 8015158:	3308      	adds	r3, #8
 801515a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	f003 0307 	and.w	r3, r3, #7
 8015162:	2b00      	cmp	r3, #0
 8015164:	d009      	beq.n	801517a <pvPortMalloc+0x6a>
 8015166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801516a:	f383 8811 	msr	BASEPRI, r3
 801516e:	f3bf 8f6f 	isb	sy
 8015172:	f3bf 8f4f 	dsb	sy
 8015176:	617b      	str	r3, [r7, #20]
 8015178:	e7fe      	b.n	8015178 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d068      	beq.n	8015252 <pvPortMalloc+0x142>
 8015180:	4b41      	ldr	r3, [pc, #260]	; (8015288 <pvPortMalloc+0x178>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	687a      	ldr	r2, [r7, #4]
 8015186:	429a      	cmp	r2, r3
 8015188:	d863      	bhi.n	8015252 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801518a:	4b40      	ldr	r3, [pc, #256]	; (801528c <pvPortMalloc+0x17c>)
 801518c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801518e:	4b3f      	ldr	r3, [pc, #252]	; (801528c <pvPortMalloc+0x17c>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015194:	e004      	b.n	80151a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8015196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a2:	685a      	ldr	r2, [r3, #4]
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d203      	bcs.n	80151b2 <pvPortMalloc+0xa2>
 80151aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d1f1      	bne.n	8015196 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80151b2:	4b33      	ldr	r3, [pc, #204]	; (8015280 <pvPortMalloc+0x170>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d04a      	beq.n	8015252 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80151bc:	6a3b      	ldr	r3, [r7, #32]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	2208      	movs	r2, #8
 80151c2:	4413      	add	r3, r2
 80151c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80151c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	6a3b      	ldr	r3, [r7, #32]
 80151cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80151ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d0:	685a      	ldr	r2, [r3, #4]
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	1ad2      	subs	r2, r2, r3
 80151d6:	2308      	movs	r3, #8
 80151d8:	005b      	lsls	r3, r3, #1
 80151da:	429a      	cmp	r2, r3
 80151dc:	d91e      	bls.n	801521c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80151de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	4413      	add	r3, r2
 80151e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80151e6:	69bb      	ldr	r3, [r7, #24]
 80151e8:	f003 0307 	and.w	r3, r3, #7
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d009      	beq.n	8015204 <pvPortMalloc+0xf4>
 80151f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151f4:	f383 8811 	msr	BASEPRI, r3
 80151f8:	f3bf 8f6f 	isb	sy
 80151fc:	f3bf 8f4f 	dsb	sy
 8015200:	613b      	str	r3, [r7, #16]
 8015202:	e7fe      	b.n	8015202 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015206:	685a      	ldr	r2, [r3, #4]
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	1ad2      	subs	r2, r2, r3
 801520c:	69bb      	ldr	r3, [r7, #24]
 801520e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015212:	687a      	ldr	r2, [r7, #4]
 8015214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015216:	69b8      	ldr	r0, [r7, #24]
 8015218:	f000 f8f6 	bl	8015408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801521c:	4b1a      	ldr	r3, [pc, #104]	; (8015288 <pvPortMalloc+0x178>)
 801521e:	681a      	ldr	r2, [r3, #0]
 8015220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015222:	685b      	ldr	r3, [r3, #4]
 8015224:	1ad3      	subs	r3, r2, r3
 8015226:	4a18      	ldr	r2, [pc, #96]	; (8015288 <pvPortMalloc+0x178>)
 8015228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801522a:	4b17      	ldr	r3, [pc, #92]	; (8015288 <pvPortMalloc+0x178>)
 801522c:	681a      	ldr	r2, [r3, #0]
 801522e:	4b18      	ldr	r3, [pc, #96]	; (8015290 <pvPortMalloc+0x180>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	429a      	cmp	r2, r3
 8015234:	d203      	bcs.n	801523e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015236:	4b14      	ldr	r3, [pc, #80]	; (8015288 <pvPortMalloc+0x178>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	4a15      	ldr	r2, [pc, #84]	; (8015290 <pvPortMalloc+0x180>)
 801523c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015240:	685a      	ldr	r2, [r3, #4]
 8015242:	4b10      	ldr	r3, [pc, #64]	; (8015284 <pvPortMalloc+0x174>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	431a      	orrs	r2, r3
 8015248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801524a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801524e:	2200      	movs	r2, #0
 8015250:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015252:	f001 f921 	bl	8016498 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015256:	69fb      	ldr	r3, [r7, #28]
 8015258:	f003 0307 	and.w	r3, r3, #7
 801525c:	2b00      	cmp	r3, #0
 801525e:	d009      	beq.n	8015274 <pvPortMalloc+0x164>
 8015260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015264:	f383 8811 	msr	BASEPRI, r3
 8015268:	f3bf 8f6f 	isb	sy
 801526c:	f3bf 8f4f 	dsb	sy
 8015270:	60fb      	str	r3, [r7, #12]
 8015272:	e7fe      	b.n	8015272 <pvPortMalloc+0x162>
	return pvReturn;
 8015274:	69fb      	ldr	r3, [r7, #28]
}
 8015276:	4618      	mov	r0, r3
 8015278:	3728      	adds	r7, #40	; 0x28
 801527a:	46bd      	mov	sp, r7
 801527c:	bd80      	pop	{r7, pc}
 801527e:	bf00      	nop
 8015280:	20003e50 	.word	0x20003e50
 8015284:	20003e5c 	.word	0x20003e5c
 8015288:	20003e54 	.word	0x20003e54
 801528c:	20003e48 	.word	0x20003e48
 8015290:	20003e58 	.word	0x20003e58

08015294 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b086      	sub	sp, #24
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d046      	beq.n	8015334 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80152a6:	2308      	movs	r3, #8
 80152a8:	425b      	negs	r3, r3
 80152aa:	697a      	ldr	r2, [r7, #20]
 80152ac:	4413      	add	r3, r2
 80152ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80152b4:	693b      	ldr	r3, [r7, #16]
 80152b6:	685a      	ldr	r2, [r3, #4]
 80152b8:	4b20      	ldr	r3, [pc, #128]	; (801533c <vPortFree+0xa8>)
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	4013      	ands	r3, r2
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d109      	bne.n	80152d6 <vPortFree+0x42>
 80152c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152c6:	f383 8811 	msr	BASEPRI, r3
 80152ca:	f3bf 8f6f 	isb	sy
 80152ce:	f3bf 8f4f 	dsb	sy
 80152d2:	60fb      	str	r3, [r7, #12]
 80152d4:	e7fe      	b.n	80152d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80152d6:	693b      	ldr	r3, [r7, #16]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d009      	beq.n	80152f2 <vPortFree+0x5e>
 80152de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152e2:	f383 8811 	msr	BASEPRI, r3
 80152e6:	f3bf 8f6f 	isb	sy
 80152ea:	f3bf 8f4f 	dsb	sy
 80152ee:	60bb      	str	r3, [r7, #8]
 80152f0:	e7fe      	b.n	80152f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80152f2:	693b      	ldr	r3, [r7, #16]
 80152f4:	685a      	ldr	r2, [r3, #4]
 80152f6:	4b11      	ldr	r3, [pc, #68]	; (801533c <vPortFree+0xa8>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	4013      	ands	r3, r2
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d019      	beq.n	8015334 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015300:	693b      	ldr	r3, [r7, #16]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d115      	bne.n	8015334 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	685a      	ldr	r2, [r3, #4]
 801530c:	4b0b      	ldr	r3, [pc, #44]	; (801533c <vPortFree+0xa8>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	43db      	mvns	r3, r3
 8015312:	401a      	ands	r2, r3
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015318:	f001 f8b0 	bl	801647c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801531c:	693b      	ldr	r3, [r7, #16]
 801531e:	685a      	ldr	r2, [r3, #4]
 8015320:	4b07      	ldr	r3, [pc, #28]	; (8015340 <vPortFree+0xac>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	4413      	add	r3, r2
 8015326:	4a06      	ldr	r2, [pc, #24]	; (8015340 <vPortFree+0xac>)
 8015328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801532a:	6938      	ldr	r0, [r7, #16]
 801532c:	f000 f86c 	bl	8015408 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015330:	f001 f8b2 	bl	8016498 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015334:	bf00      	nop
 8015336:	3718      	adds	r7, #24
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}
 801533c:	20003e5c 	.word	0x20003e5c
 8015340:	20003e54 	.word	0x20003e54

08015344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015344:	b480      	push	{r7}
 8015346:	b085      	sub	sp, #20
 8015348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801534a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801534e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015350:	4b27      	ldr	r3, [pc, #156]	; (80153f0 <prvHeapInit+0xac>)
 8015352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	f003 0307 	and.w	r3, r3, #7
 801535a:	2b00      	cmp	r3, #0
 801535c:	d00c      	beq.n	8015378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	3307      	adds	r3, #7
 8015362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	f023 0307 	bic.w	r3, r3, #7
 801536a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801536c:	68ba      	ldr	r2, [r7, #8]
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	1ad3      	subs	r3, r2, r3
 8015372:	4a1f      	ldr	r2, [pc, #124]	; (80153f0 <prvHeapInit+0xac>)
 8015374:	4413      	add	r3, r2
 8015376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801537c:	4a1d      	ldr	r2, [pc, #116]	; (80153f4 <prvHeapInit+0xb0>)
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015382:	4b1c      	ldr	r3, [pc, #112]	; (80153f4 <prvHeapInit+0xb0>)
 8015384:	2200      	movs	r2, #0
 8015386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015388:	687a      	ldr	r2, [r7, #4]
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	4413      	add	r3, r2
 801538e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015390:	2208      	movs	r2, #8
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	1a9b      	subs	r3, r3, r2
 8015396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	f023 0307 	bic.w	r3, r3, #7
 801539e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	4a15      	ldr	r2, [pc, #84]	; (80153f8 <prvHeapInit+0xb4>)
 80153a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80153a6:	4b14      	ldr	r3, [pc, #80]	; (80153f8 <prvHeapInit+0xb4>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	2200      	movs	r2, #0
 80153ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80153ae:	4b12      	ldr	r3, [pc, #72]	; (80153f8 <prvHeapInit+0xb4>)
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	2200      	movs	r2, #0
 80153b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	68fa      	ldr	r2, [r7, #12]
 80153be:	1ad2      	subs	r2, r2, r3
 80153c0:	683b      	ldr	r3, [r7, #0]
 80153c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80153c4:	4b0c      	ldr	r3, [pc, #48]	; (80153f8 <prvHeapInit+0xb4>)
 80153c6:	681a      	ldr	r2, [r3, #0]
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	685b      	ldr	r3, [r3, #4]
 80153d0:	4a0a      	ldr	r2, [pc, #40]	; (80153fc <prvHeapInit+0xb8>)
 80153d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80153d4:	683b      	ldr	r3, [r7, #0]
 80153d6:	685b      	ldr	r3, [r3, #4]
 80153d8:	4a09      	ldr	r2, [pc, #36]	; (8015400 <prvHeapInit+0xbc>)
 80153da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80153dc:	4b09      	ldr	r3, [pc, #36]	; (8015404 <prvHeapInit+0xc0>)
 80153de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80153e2:	601a      	str	r2, [r3, #0]
}
 80153e4:	bf00      	nop
 80153e6:	3714      	adds	r7, #20
 80153e8:	46bd      	mov	sp, r7
 80153ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ee:	4770      	bx	lr
 80153f0:	20000248 	.word	0x20000248
 80153f4:	20003e48 	.word	0x20003e48
 80153f8:	20003e50 	.word	0x20003e50
 80153fc:	20003e58 	.word	0x20003e58
 8015400:	20003e54 	.word	0x20003e54
 8015404:	20003e5c 	.word	0x20003e5c

08015408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015408:	b480      	push	{r7}
 801540a:	b085      	sub	sp, #20
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015410:	4b28      	ldr	r3, [pc, #160]	; (80154b4 <prvInsertBlockIntoFreeList+0xac>)
 8015412:	60fb      	str	r3, [r7, #12]
 8015414:	e002      	b.n	801541c <prvInsertBlockIntoFreeList+0x14>
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	60fb      	str	r3, [r7, #12]
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	681a      	ldr	r2, [r3, #0]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	429a      	cmp	r2, r3
 8015424:	d3f7      	bcc.n	8015416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	68ba      	ldr	r2, [r7, #8]
 8015430:	441a      	add	r2, r3
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	429a      	cmp	r2, r3
 8015436:	d108      	bne.n	801544a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	685a      	ldr	r2, [r3, #4]
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	685b      	ldr	r3, [r3, #4]
 8015440:	441a      	add	r2, r3
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	68ba      	ldr	r2, [r7, #8]
 8015454:	441a      	add	r2, r3
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	429a      	cmp	r2, r3
 801545c:	d118      	bne.n	8015490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	681a      	ldr	r2, [r3, #0]
 8015462:	4b15      	ldr	r3, [pc, #84]	; (80154b8 <prvInsertBlockIntoFreeList+0xb0>)
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	429a      	cmp	r2, r3
 8015468:	d00d      	beq.n	8015486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	685a      	ldr	r2, [r3, #4]
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	685b      	ldr	r3, [r3, #4]
 8015474:	441a      	add	r2, r3
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	681a      	ldr	r2, [r3, #0]
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	601a      	str	r2, [r3, #0]
 8015484:	e008      	b.n	8015498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015486:	4b0c      	ldr	r3, [pc, #48]	; (80154b8 <prvInsertBlockIntoFreeList+0xb0>)
 8015488:	681a      	ldr	r2, [r3, #0]
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	601a      	str	r2, [r3, #0]
 801548e:	e003      	b.n	8015498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	681a      	ldr	r2, [r3, #0]
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015498:	68fa      	ldr	r2, [r7, #12]
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	429a      	cmp	r2, r3
 801549e:	d002      	beq.n	80154a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	687a      	ldr	r2, [r7, #4]
 80154a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80154a6:	bf00      	nop
 80154a8:	3714      	adds	r7, #20
 80154aa:	46bd      	mov	sp, r7
 80154ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b0:	4770      	bx	lr
 80154b2:	bf00      	nop
 80154b4:	20003e48 	.word	0x20003e48
 80154b8:	20003e50 	.word	0x20003e50

080154bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b084      	sub	sp, #16
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d109      	bne.n	80154e4 <xQueueGenericReset+0x28>
 80154d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154d4:	f383 8811 	msr	BASEPRI, r3
 80154d8:	f3bf 8f6f 	isb	sy
 80154dc:	f3bf 8f4f 	dsb	sy
 80154e0:	60bb      	str	r3, [r7, #8]
 80154e2:	e7fe      	b.n	80154e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80154e4:	f7ff fd04 	bl	8014ef0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	681a      	ldr	r2, [r3, #0]
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154f0:	68f9      	ldr	r1, [r7, #12]
 80154f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80154f4:	fb01 f303 	mul.w	r3, r1, r3
 80154f8:	441a      	add	r2, r3
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	2200      	movs	r2, #0
 8015502:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	681a      	ldr	r2, [r3, #0]
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	681a      	ldr	r2, [r3, #0]
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015514:	3b01      	subs	r3, #1
 8015516:	68f9      	ldr	r1, [r7, #12]
 8015518:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801551a:	fb01 f303 	mul.w	r3, r1, r3
 801551e:	441a      	add	r2, r3
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	22ff      	movs	r2, #255	; 0xff
 8015528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	22ff      	movs	r2, #255	; 0xff
 8015530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015534:	683b      	ldr	r3, [r7, #0]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d114      	bne.n	8015564 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	691b      	ldr	r3, [r3, #16]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d01a      	beq.n	8015578 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	3310      	adds	r3, #16
 8015546:	4618      	mov	r0, r3
 8015548:	f001 f9ba 	bl	80168c0 <xTaskRemoveFromEventList>
 801554c:	4603      	mov	r3, r0
 801554e:	2b00      	cmp	r3, #0
 8015550:	d012      	beq.n	8015578 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015552:	4b0d      	ldr	r3, [pc, #52]	; (8015588 <xQueueGenericReset+0xcc>)
 8015554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015558:	601a      	str	r2, [r3, #0]
 801555a:	f3bf 8f4f 	dsb	sy
 801555e:	f3bf 8f6f 	isb	sy
 8015562:	e009      	b.n	8015578 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	3310      	adds	r3, #16
 8015568:	4618      	mov	r0, r3
 801556a:	f7ff fb06 	bl	8014b7a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	3324      	adds	r3, #36	; 0x24
 8015572:	4618      	mov	r0, r3
 8015574:	f7ff fb01 	bl	8014b7a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015578:	f7ff fce8 	bl	8014f4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801557c:	2301      	movs	r3, #1
}
 801557e:	4618      	mov	r0, r3
 8015580:	3710      	adds	r7, #16
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}
 8015586:	bf00      	nop
 8015588:	e000ed04 	.word	0xe000ed04

0801558c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801558c:	b580      	push	{r7, lr}
 801558e:	b08a      	sub	sp, #40	; 0x28
 8015590:	af02      	add	r7, sp, #8
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	60b9      	str	r1, [r7, #8]
 8015596:	4613      	mov	r3, r2
 8015598:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d109      	bne.n	80155b4 <xQueueGenericCreate+0x28>
 80155a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155a4:	f383 8811 	msr	BASEPRI, r3
 80155a8:	f3bf 8f6f 	isb	sy
 80155ac:	f3bf 8f4f 	dsb	sy
 80155b0:	613b      	str	r3, [r7, #16]
 80155b2:	e7fe      	b.n	80155b2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d102      	bne.n	80155c0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80155ba:	2300      	movs	r3, #0
 80155bc:	61fb      	str	r3, [r7, #28]
 80155be:	e004      	b.n	80155ca <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	68ba      	ldr	r2, [r7, #8]
 80155c4:	fb02 f303 	mul.w	r3, r2, r3
 80155c8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80155ca:	69fb      	ldr	r3, [r7, #28]
 80155cc:	3350      	adds	r3, #80	; 0x50
 80155ce:	4618      	mov	r0, r3
 80155d0:	f7ff fd9e 	bl	8015110 <pvPortMalloc>
 80155d4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80155d6:	69bb      	ldr	r3, [r7, #24]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d00b      	beq.n	80155f4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80155dc:	69bb      	ldr	r3, [r7, #24]
 80155de:	3350      	adds	r3, #80	; 0x50
 80155e0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80155e2:	79fa      	ldrb	r2, [r7, #7]
 80155e4:	69bb      	ldr	r3, [r7, #24]
 80155e6:	9300      	str	r3, [sp, #0]
 80155e8:	4613      	mov	r3, r2
 80155ea:	697a      	ldr	r2, [r7, #20]
 80155ec:	68b9      	ldr	r1, [r7, #8]
 80155ee:	68f8      	ldr	r0, [r7, #12]
 80155f0:	f000 f805 	bl	80155fe <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80155f4:	69bb      	ldr	r3, [r7, #24]
	}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3720      	adds	r7, #32
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}

080155fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80155fe:	b580      	push	{r7, lr}
 8015600:	b084      	sub	sp, #16
 8015602:	af00      	add	r7, sp, #0
 8015604:	60f8      	str	r0, [r7, #12]
 8015606:	60b9      	str	r1, [r7, #8]
 8015608:	607a      	str	r2, [r7, #4]
 801560a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d103      	bne.n	801561a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015612:	69bb      	ldr	r3, [r7, #24]
 8015614:	69ba      	ldr	r2, [r7, #24]
 8015616:	601a      	str	r2, [r3, #0]
 8015618:	e002      	b.n	8015620 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801561a:	69bb      	ldr	r3, [r7, #24]
 801561c:	687a      	ldr	r2, [r7, #4]
 801561e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015620:	69bb      	ldr	r3, [r7, #24]
 8015622:	68fa      	ldr	r2, [r7, #12]
 8015624:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015626:	69bb      	ldr	r3, [r7, #24]
 8015628:	68ba      	ldr	r2, [r7, #8]
 801562a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801562c:	2101      	movs	r1, #1
 801562e:	69b8      	ldr	r0, [r7, #24]
 8015630:	f7ff ff44 	bl	80154bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015634:	69bb      	ldr	r3, [r7, #24]
 8015636:	78fa      	ldrb	r2, [r7, #3]
 8015638:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801563c:	bf00      	nop
 801563e:	3710      	adds	r7, #16
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}

08015644 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015644:	b580      	push	{r7, lr}
 8015646:	b082      	sub	sp, #8
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d00e      	beq.n	8015670 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2200      	movs	r2, #0
 8015656:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2200      	movs	r2, #0
 801565c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	2200      	movs	r2, #0
 8015662:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015664:	2300      	movs	r3, #0
 8015666:	2200      	movs	r2, #0
 8015668:	2100      	movs	r1, #0
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f000 f81c 	bl	80156a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8015670:	bf00      	nop
 8015672:	3708      	adds	r7, #8
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}

08015678 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015678:	b580      	push	{r7, lr}
 801567a:	b086      	sub	sp, #24
 801567c:	af00      	add	r7, sp, #0
 801567e:	4603      	mov	r3, r0
 8015680:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015682:	2301      	movs	r3, #1
 8015684:	617b      	str	r3, [r7, #20]
 8015686:	2300      	movs	r3, #0
 8015688:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801568a:	79fb      	ldrb	r3, [r7, #7]
 801568c:	461a      	mov	r2, r3
 801568e:	6939      	ldr	r1, [r7, #16]
 8015690:	6978      	ldr	r0, [r7, #20]
 8015692:	f7ff ff7b 	bl	801558c <xQueueGenericCreate>
 8015696:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8015698:	68f8      	ldr	r0, [r7, #12]
 801569a:	f7ff ffd3 	bl	8015644 <prvInitialiseMutex>

		return pxNewQueue;
 801569e:	68fb      	ldr	r3, [r7, #12]
	}
 80156a0:	4618      	mov	r0, r3
 80156a2:	3718      	adds	r7, #24
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bd80      	pop	{r7, pc}

080156a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b08e      	sub	sp, #56	; 0x38
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	60f8      	str	r0, [r7, #12]
 80156b0:	60b9      	str	r1, [r7, #8]
 80156b2:	607a      	str	r2, [r7, #4]
 80156b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80156b6:	2300      	movs	r3, #0
 80156b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80156be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d109      	bne.n	80156d8 <xQueueGenericSend+0x30>
 80156c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156c8:	f383 8811 	msr	BASEPRI, r3
 80156cc:	f3bf 8f6f 	isb	sy
 80156d0:	f3bf 8f4f 	dsb	sy
 80156d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80156d6:	e7fe      	b.n	80156d6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d103      	bne.n	80156e6 <xQueueGenericSend+0x3e>
 80156de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d101      	bne.n	80156ea <xQueueGenericSend+0x42>
 80156e6:	2301      	movs	r3, #1
 80156e8:	e000      	b.n	80156ec <xQueueGenericSend+0x44>
 80156ea:	2300      	movs	r3, #0
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d109      	bne.n	8015704 <xQueueGenericSend+0x5c>
 80156f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156f4:	f383 8811 	msr	BASEPRI, r3
 80156f8:	f3bf 8f6f 	isb	sy
 80156fc:	f3bf 8f4f 	dsb	sy
 8015700:	627b      	str	r3, [r7, #36]	; 0x24
 8015702:	e7fe      	b.n	8015702 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	2b02      	cmp	r3, #2
 8015708:	d103      	bne.n	8015712 <xQueueGenericSend+0x6a>
 801570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801570e:	2b01      	cmp	r3, #1
 8015710:	d101      	bne.n	8015716 <xQueueGenericSend+0x6e>
 8015712:	2301      	movs	r3, #1
 8015714:	e000      	b.n	8015718 <xQueueGenericSend+0x70>
 8015716:	2300      	movs	r3, #0
 8015718:	2b00      	cmp	r3, #0
 801571a:	d109      	bne.n	8015730 <xQueueGenericSend+0x88>
 801571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015720:	f383 8811 	msr	BASEPRI, r3
 8015724:	f3bf 8f6f 	isb	sy
 8015728:	f3bf 8f4f 	dsb	sy
 801572c:	623b      	str	r3, [r7, #32]
 801572e:	e7fe      	b.n	801572e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015730:	f001 fa80 	bl	8016c34 <xTaskGetSchedulerState>
 8015734:	4603      	mov	r3, r0
 8015736:	2b00      	cmp	r3, #0
 8015738:	d102      	bne.n	8015740 <xQueueGenericSend+0x98>
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d101      	bne.n	8015744 <xQueueGenericSend+0x9c>
 8015740:	2301      	movs	r3, #1
 8015742:	e000      	b.n	8015746 <xQueueGenericSend+0x9e>
 8015744:	2300      	movs	r3, #0
 8015746:	2b00      	cmp	r3, #0
 8015748:	d109      	bne.n	801575e <xQueueGenericSend+0xb6>
 801574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801574e:	f383 8811 	msr	BASEPRI, r3
 8015752:	f3bf 8f6f 	isb	sy
 8015756:	f3bf 8f4f 	dsb	sy
 801575a:	61fb      	str	r3, [r7, #28]
 801575c:	e7fe      	b.n	801575c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801575e:	f7ff fbc7 	bl	8014ef0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801576a:	429a      	cmp	r2, r3
 801576c:	d302      	bcc.n	8015774 <xQueueGenericSend+0xcc>
 801576e:	683b      	ldr	r3, [r7, #0]
 8015770:	2b02      	cmp	r3, #2
 8015772:	d129      	bne.n	80157c8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015774:	683a      	ldr	r2, [r7, #0]
 8015776:	68b9      	ldr	r1, [r7, #8]
 8015778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801577a:	f000 fb91 	bl	8015ea0 <prvCopyDataToQueue>
 801577e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015784:	2b00      	cmp	r3, #0
 8015786:	d010      	beq.n	80157aa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801578a:	3324      	adds	r3, #36	; 0x24
 801578c:	4618      	mov	r0, r3
 801578e:	f001 f897 	bl	80168c0 <xTaskRemoveFromEventList>
 8015792:	4603      	mov	r3, r0
 8015794:	2b00      	cmp	r3, #0
 8015796:	d013      	beq.n	80157c0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015798:	4b3f      	ldr	r3, [pc, #252]	; (8015898 <xQueueGenericSend+0x1f0>)
 801579a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801579e:	601a      	str	r2, [r3, #0]
 80157a0:	f3bf 8f4f 	dsb	sy
 80157a4:	f3bf 8f6f 	isb	sy
 80157a8:	e00a      	b.n	80157c0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80157aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d007      	beq.n	80157c0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80157b0:	4b39      	ldr	r3, [pc, #228]	; (8015898 <xQueueGenericSend+0x1f0>)
 80157b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157b6:	601a      	str	r2, [r3, #0]
 80157b8:	f3bf 8f4f 	dsb	sy
 80157bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80157c0:	f7ff fbc4 	bl	8014f4c <vPortExitCritical>
				return pdPASS;
 80157c4:	2301      	movs	r3, #1
 80157c6:	e063      	b.n	8015890 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d103      	bne.n	80157d6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80157ce:	f7ff fbbd 	bl	8014f4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80157d2:	2300      	movs	r3, #0
 80157d4:	e05c      	b.n	8015890 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80157d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d106      	bne.n	80157ea <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80157dc:	f107 0314 	add.w	r3, r7, #20
 80157e0:	4618      	mov	r0, r3
 80157e2:	f001 f8cf 	bl	8016984 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80157e6:	2301      	movs	r3, #1
 80157e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80157ea:	f7ff fbaf 	bl	8014f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80157ee:	f000 fe45 	bl	801647c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80157f2:	f7ff fb7d 	bl	8014ef0 <vPortEnterCritical>
 80157f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80157fc:	b25b      	sxtb	r3, r3
 80157fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015802:	d103      	bne.n	801580c <xQueueGenericSend+0x164>
 8015804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015806:	2200      	movs	r2, #0
 8015808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801580e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015812:	b25b      	sxtb	r3, r3
 8015814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015818:	d103      	bne.n	8015822 <xQueueGenericSend+0x17a>
 801581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801581c:	2200      	movs	r2, #0
 801581e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015822:	f7ff fb93 	bl	8014f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015826:	1d3a      	adds	r2, r7, #4
 8015828:	f107 0314 	add.w	r3, r7, #20
 801582c:	4611      	mov	r1, r2
 801582e:	4618      	mov	r0, r3
 8015830:	f001 f8cc 	bl	80169cc <xTaskCheckForTimeOut>
 8015834:	4603      	mov	r3, r0
 8015836:	2b00      	cmp	r3, #0
 8015838:	d124      	bne.n	8015884 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801583a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801583c:	f000 fc28 	bl	8016090 <prvIsQueueFull>
 8015840:	4603      	mov	r3, r0
 8015842:	2b00      	cmp	r3, #0
 8015844:	d018      	beq.n	8015878 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015848:	3310      	adds	r3, #16
 801584a:	687a      	ldr	r2, [r7, #4]
 801584c:	4611      	mov	r1, r2
 801584e:	4618      	mov	r0, r3
 8015850:	f001 f812 	bl	8016878 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015856:	f000 fbb3 	bl	8015fc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801585a:	f000 fe1d 	bl	8016498 <xTaskResumeAll>
 801585e:	4603      	mov	r3, r0
 8015860:	2b00      	cmp	r3, #0
 8015862:	f47f af7c 	bne.w	801575e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8015866:	4b0c      	ldr	r3, [pc, #48]	; (8015898 <xQueueGenericSend+0x1f0>)
 8015868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801586c:	601a      	str	r2, [r3, #0]
 801586e:	f3bf 8f4f 	dsb	sy
 8015872:	f3bf 8f6f 	isb	sy
 8015876:	e772      	b.n	801575e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801587a:	f000 fba1 	bl	8015fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801587e:	f000 fe0b 	bl	8016498 <xTaskResumeAll>
 8015882:	e76c      	b.n	801575e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015886:	f000 fb9b 	bl	8015fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801588a:	f000 fe05 	bl	8016498 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801588e:	2300      	movs	r3, #0
		}
	}
}
 8015890:	4618      	mov	r0, r3
 8015892:	3738      	adds	r7, #56	; 0x38
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}
 8015898:	e000ed04 	.word	0xe000ed04

0801589c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b08e      	sub	sp, #56	; 0x38
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	60f8      	str	r0, [r7, #12]
 80158a4:	60b9      	str	r1, [r7, #8]
 80158a6:	607a      	str	r2, [r7, #4]
 80158a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80158ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d109      	bne.n	80158c8 <xQueueGenericSendFromISR+0x2c>
 80158b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158b8:	f383 8811 	msr	BASEPRI, r3
 80158bc:	f3bf 8f6f 	isb	sy
 80158c0:	f3bf 8f4f 	dsb	sy
 80158c4:	627b      	str	r3, [r7, #36]	; 0x24
 80158c6:	e7fe      	b.n	80158c6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d103      	bne.n	80158d6 <xQueueGenericSendFromISR+0x3a>
 80158ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d101      	bne.n	80158da <xQueueGenericSendFromISR+0x3e>
 80158d6:	2301      	movs	r3, #1
 80158d8:	e000      	b.n	80158dc <xQueueGenericSendFromISR+0x40>
 80158da:	2300      	movs	r3, #0
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d109      	bne.n	80158f4 <xQueueGenericSendFromISR+0x58>
 80158e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e4:	f383 8811 	msr	BASEPRI, r3
 80158e8:	f3bf 8f6f 	isb	sy
 80158ec:	f3bf 8f4f 	dsb	sy
 80158f0:	623b      	str	r3, [r7, #32]
 80158f2:	e7fe      	b.n	80158f2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	2b02      	cmp	r3, #2
 80158f8:	d103      	bne.n	8015902 <xQueueGenericSendFromISR+0x66>
 80158fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158fe:	2b01      	cmp	r3, #1
 8015900:	d101      	bne.n	8015906 <xQueueGenericSendFromISR+0x6a>
 8015902:	2301      	movs	r3, #1
 8015904:	e000      	b.n	8015908 <xQueueGenericSendFromISR+0x6c>
 8015906:	2300      	movs	r3, #0
 8015908:	2b00      	cmp	r3, #0
 801590a:	d109      	bne.n	8015920 <xQueueGenericSendFromISR+0x84>
 801590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015910:	f383 8811 	msr	BASEPRI, r3
 8015914:	f3bf 8f6f 	isb	sy
 8015918:	f3bf 8f4f 	dsb	sy
 801591c:	61fb      	str	r3, [r7, #28]
 801591e:	e7fe      	b.n	801591e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015920:	f7ff fbb8 	bl	8015094 <vPortValidateInterruptPriority>
	__asm volatile
 8015924:	f3ef 8211 	mrs	r2, BASEPRI
 8015928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801592c:	f383 8811 	msr	BASEPRI, r3
 8015930:	f3bf 8f6f 	isb	sy
 8015934:	f3bf 8f4f 	dsb	sy
 8015938:	61ba      	str	r2, [r7, #24]
 801593a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801593c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801593e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015948:	429a      	cmp	r2, r3
 801594a:	d302      	bcc.n	8015952 <xQueueGenericSendFromISR+0xb6>
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	2b02      	cmp	r3, #2
 8015950:	d12c      	bne.n	80159ac <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801595c:	683a      	ldr	r2, [r7, #0]
 801595e:	68b9      	ldr	r1, [r7, #8]
 8015960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015962:	f000 fa9d 	bl	8015ea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015966:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801596e:	d112      	bne.n	8015996 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015974:	2b00      	cmp	r3, #0
 8015976:	d016      	beq.n	80159a6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801597a:	3324      	adds	r3, #36	; 0x24
 801597c:	4618      	mov	r0, r3
 801597e:	f000 ff9f 	bl	80168c0 <xTaskRemoveFromEventList>
 8015982:	4603      	mov	r3, r0
 8015984:	2b00      	cmp	r3, #0
 8015986:	d00e      	beq.n	80159a6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d00b      	beq.n	80159a6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	2201      	movs	r2, #1
 8015992:	601a      	str	r2, [r3, #0]
 8015994:	e007      	b.n	80159a6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015996:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801599a:	3301      	adds	r3, #1
 801599c:	b2db      	uxtb	r3, r3
 801599e:	b25a      	sxtb	r2, r3
 80159a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80159a6:	2301      	movs	r3, #1
 80159a8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80159aa:	e001      	b.n	80159b0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80159ac:	2300      	movs	r3, #0
 80159ae:	637b      	str	r3, [r7, #52]	; 0x34
 80159b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80159b4:	693b      	ldr	r3, [r7, #16]
 80159b6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80159ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80159bc:	4618      	mov	r0, r3
 80159be:	3738      	adds	r7, #56	; 0x38
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}

080159c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b08e      	sub	sp, #56	; 0x38
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
 80159cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80159d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d109      	bne.n	80159ec <xQueueGiveFromISR+0x28>
	__asm volatile
 80159d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159dc:	f383 8811 	msr	BASEPRI, r3
 80159e0:	f3bf 8f6f 	isb	sy
 80159e4:	f3bf 8f4f 	dsb	sy
 80159e8:	623b      	str	r3, [r7, #32]
 80159ea:	e7fe      	b.n	80159ea <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80159ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d009      	beq.n	8015a08 <xQueueGiveFromISR+0x44>
 80159f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159f8:	f383 8811 	msr	BASEPRI, r3
 80159fc:	f3bf 8f6f 	isb	sy
 8015a00:	f3bf 8f4f 	dsb	sy
 8015a04:	61fb      	str	r3, [r7, #28]
 8015a06:	e7fe      	b.n	8015a06 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8015a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d103      	bne.n	8015a18 <xQueueGiveFromISR+0x54>
 8015a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a12:	685b      	ldr	r3, [r3, #4]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d101      	bne.n	8015a1c <xQueueGiveFromISR+0x58>
 8015a18:	2301      	movs	r3, #1
 8015a1a:	e000      	b.n	8015a1e <xQueueGiveFromISR+0x5a>
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d109      	bne.n	8015a36 <xQueueGiveFromISR+0x72>
 8015a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a26:	f383 8811 	msr	BASEPRI, r3
 8015a2a:	f3bf 8f6f 	isb	sy
 8015a2e:	f3bf 8f4f 	dsb	sy
 8015a32:	61bb      	str	r3, [r7, #24]
 8015a34:	e7fe      	b.n	8015a34 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015a36:	f7ff fb2d 	bl	8015094 <vPortValidateInterruptPriority>
	__asm volatile
 8015a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8015a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a42:	f383 8811 	msr	BASEPRI, r3
 8015a46:	f3bf 8f6f 	isb	sy
 8015a4a:	f3bf 8f4f 	dsb	sy
 8015a4e:	617a      	str	r2, [r7, #20]
 8015a50:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015a52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a62:	429a      	cmp	r2, r3
 8015a64:	d92b      	bls.n	8015abe <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8015a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a72:	1c5a      	adds	r2, r3, #1
 8015a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a76:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a80:	d112      	bne.n	8015aa8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d016      	beq.n	8015ab8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a8c:	3324      	adds	r3, #36	; 0x24
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f000 ff16 	bl	80168c0 <xTaskRemoveFromEventList>
 8015a94:	4603      	mov	r3, r0
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d00e      	beq.n	8015ab8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015a9a:	683b      	ldr	r3, [r7, #0]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d00b      	beq.n	8015ab8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	2201      	movs	r2, #1
 8015aa4:	601a      	str	r2, [r3, #0]
 8015aa6:	e007      	b.n	8015ab8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015aac:	3301      	adds	r3, #1
 8015aae:	b2db      	uxtb	r3, r3
 8015ab0:	b25a      	sxtb	r2, r3
 8015ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015ab8:	2301      	movs	r3, #1
 8015aba:	637b      	str	r3, [r7, #52]	; 0x34
 8015abc:	e001      	b.n	8015ac2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8015ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3738      	adds	r7, #56	; 0x38
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}
	...

08015ad8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b08e      	sub	sp, #56	; 0x38
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	60f8      	str	r0, [r7, #12]
 8015ae0:	60b9      	str	r1, [r7, #8]
 8015ae2:	607a      	str	r2, [r7, #4]
 8015ae4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d109      	bne.n	8015b08 <xQueueGenericReceive+0x30>
	__asm volatile
 8015af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af8:	f383 8811 	msr	BASEPRI, r3
 8015afc:	f3bf 8f6f 	isb	sy
 8015b00:	f3bf 8f4f 	dsb	sy
 8015b04:	627b      	str	r3, [r7, #36]	; 0x24
 8015b06:	e7fe      	b.n	8015b06 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b08:	68bb      	ldr	r3, [r7, #8]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d103      	bne.n	8015b16 <xQueueGenericReceive+0x3e>
 8015b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d101      	bne.n	8015b1a <xQueueGenericReceive+0x42>
 8015b16:	2301      	movs	r3, #1
 8015b18:	e000      	b.n	8015b1c <xQueueGenericReceive+0x44>
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d109      	bne.n	8015b34 <xQueueGenericReceive+0x5c>
 8015b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b24:	f383 8811 	msr	BASEPRI, r3
 8015b28:	f3bf 8f6f 	isb	sy
 8015b2c:	f3bf 8f4f 	dsb	sy
 8015b30:	623b      	str	r3, [r7, #32]
 8015b32:	e7fe      	b.n	8015b32 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015b34:	f001 f87e 	bl	8016c34 <xTaskGetSchedulerState>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d102      	bne.n	8015b44 <xQueueGenericReceive+0x6c>
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d101      	bne.n	8015b48 <xQueueGenericReceive+0x70>
 8015b44:	2301      	movs	r3, #1
 8015b46:	e000      	b.n	8015b4a <xQueueGenericReceive+0x72>
 8015b48:	2300      	movs	r3, #0
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d109      	bne.n	8015b62 <xQueueGenericReceive+0x8a>
 8015b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b52:	f383 8811 	msr	BASEPRI, r3
 8015b56:	f3bf 8f6f 	isb	sy
 8015b5a:	f3bf 8f4f 	dsb	sy
 8015b5e:	61fb      	str	r3, [r7, #28]
 8015b60:	e7fe      	b.n	8015b60 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8015b62:	f7ff f9c5 	bl	8014ef0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d046      	beq.n	8015c00 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8015b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b74:	68db      	ldr	r3, [r3, #12]
 8015b76:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015b78:	68b9      	ldr	r1, [r7, #8]
 8015b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b7c:	f000 f9fa 	bl	8015f74 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d121      	bne.n	8015bca <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8015b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b88:	1e5a      	subs	r2, r3, #1
 8015b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b8c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d104      	bne.n	8015ba0 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8015b96:	f001 f965 	bl	8016e64 <pvTaskIncrementMutexHeldCount>
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b9e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba2:	691b      	ldr	r3, [r3, #16]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d027      	beq.n	8015bf8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015baa:	3310      	adds	r3, #16
 8015bac:	4618      	mov	r0, r3
 8015bae:	f000 fe87 	bl	80168c0 <xTaskRemoveFromEventList>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d01f      	beq.n	8015bf8 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8015bb8:	4b4f      	ldr	r3, [pc, #316]	; (8015cf8 <xQueueGenericReceive+0x220>)
 8015bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bbe:	601a      	str	r2, [r3, #0]
 8015bc0:	f3bf 8f4f 	dsb	sy
 8015bc4:	f3bf 8f6f 	isb	sy
 8015bc8:	e016      	b.n	8015bf8 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8015bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015bce:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d00f      	beq.n	8015bf8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bda:	3324      	adds	r3, #36	; 0x24
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f000 fe6f 	bl	80168c0 <xTaskRemoveFromEventList>
 8015be2:	4603      	mov	r3, r0
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d007      	beq.n	8015bf8 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8015be8:	4b43      	ldr	r3, [pc, #268]	; (8015cf8 <xQueueGenericReceive+0x220>)
 8015bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bee:	601a      	str	r2, [r3, #0]
 8015bf0:	f3bf 8f4f 	dsb	sy
 8015bf4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8015bf8:	f7ff f9a8 	bl	8014f4c <vPortExitCritical>
				return pdPASS;
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	e077      	b.n	8015cf0 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d103      	bne.n	8015c0e <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015c06:	f7ff f9a1 	bl	8014f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	e070      	b.n	8015cf0 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d106      	bne.n	8015c22 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8015c14:	f107 0314 	add.w	r3, r7, #20
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f000 feb3 	bl	8016984 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015c1e:	2301      	movs	r3, #1
 8015c20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015c22:	f7ff f993 	bl	8014f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015c26:	f000 fc29 	bl	801647c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015c2a:	f7ff f961 	bl	8014ef0 <vPortEnterCritical>
 8015c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015c34:	b25b      	sxtb	r3, r3
 8015c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c3a:	d103      	bne.n	8015c44 <xQueueGenericReceive+0x16c>
 8015c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3e:	2200      	movs	r2, #0
 8015c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c4a:	b25b      	sxtb	r3, r3
 8015c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c50:	d103      	bne.n	8015c5a <xQueueGenericReceive+0x182>
 8015c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c54:	2200      	movs	r2, #0
 8015c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015c5a:	f7ff f977 	bl	8014f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015c5e:	1d3a      	adds	r2, r7, #4
 8015c60:	f107 0314 	add.w	r3, r7, #20
 8015c64:	4611      	mov	r1, r2
 8015c66:	4618      	mov	r0, r3
 8015c68:	f000 feb0 	bl	80169cc <xTaskCheckForTimeOut>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d131      	bne.n	8015cd6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c74:	f000 f9f6 	bl	8016064 <prvIsQueueEmpty>
 8015c78:	4603      	mov	r3, r0
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d025      	beq.n	8015cca <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d108      	bne.n	8015c98 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8015c86:	f7ff f933 	bl	8014ef0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8015c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c8c:	685b      	ldr	r3, [r3, #4]
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f000 ffee 	bl	8016c70 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8015c94:	f7ff f95a 	bl	8014f4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c9a:	3324      	adds	r3, #36	; 0x24
 8015c9c:	687a      	ldr	r2, [r7, #4]
 8015c9e:	4611      	mov	r1, r2
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f000 fde9 	bl	8016878 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ca8:	f000 f98a 	bl	8015fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015cac:	f000 fbf4 	bl	8016498 <xTaskResumeAll>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	f47f af55 	bne.w	8015b62 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8015cb8:	4b0f      	ldr	r3, [pc, #60]	; (8015cf8 <xQueueGenericReceive+0x220>)
 8015cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cbe:	601a      	str	r2, [r3, #0]
 8015cc0:	f3bf 8f4f 	dsb	sy
 8015cc4:	f3bf 8f6f 	isb	sy
 8015cc8:	e74b      	b.n	8015b62 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ccc:	f000 f978 	bl	8015fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015cd0:	f000 fbe2 	bl	8016498 <xTaskResumeAll>
 8015cd4:	e745      	b.n	8015b62 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8015cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cd8:	f000 f972 	bl	8015fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015cdc:	f000 fbdc 	bl	8016498 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ce2:	f000 f9bf 	bl	8016064 <prvIsQueueEmpty>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	f43f af3a 	beq.w	8015b62 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015cee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	3738      	adds	r7, #56	; 0x38
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}
 8015cf8:	e000ed04 	.word	0xe000ed04

08015cfc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b08e      	sub	sp, #56	; 0x38
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	60f8      	str	r0, [r7, #12]
 8015d04:	60b9      	str	r1, [r7, #8]
 8015d06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d109      	bne.n	8015d26 <xQueueReceiveFromISR+0x2a>
 8015d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d16:	f383 8811 	msr	BASEPRI, r3
 8015d1a:	f3bf 8f6f 	isb	sy
 8015d1e:	f3bf 8f4f 	dsb	sy
 8015d22:	623b      	str	r3, [r7, #32]
 8015d24:	e7fe      	b.n	8015d24 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d103      	bne.n	8015d34 <xQueueReceiveFromISR+0x38>
 8015d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d101      	bne.n	8015d38 <xQueueReceiveFromISR+0x3c>
 8015d34:	2301      	movs	r3, #1
 8015d36:	e000      	b.n	8015d3a <xQueueReceiveFromISR+0x3e>
 8015d38:	2300      	movs	r3, #0
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d109      	bne.n	8015d52 <xQueueReceiveFromISR+0x56>
 8015d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d42:	f383 8811 	msr	BASEPRI, r3
 8015d46:	f3bf 8f6f 	isb	sy
 8015d4a:	f3bf 8f4f 	dsb	sy
 8015d4e:	61fb      	str	r3, [r7, #28]
 8015d50:	e7fe      	b.n	8015d50 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d52:	f7ff f99f 	bl	8015094 <vPortValidateInterruptPriority>
	__asm volatile
 8015d56:	f3ef 8211 	mrs	r2, BASEPRI
 8015d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d5e:	f383 8811 	msr	BASEPRI, r3
 8015d62:	f3bf 8f6f 	isb	sy
 8015d66:	f3bf 8f4f 	dsb	sy
 8015d6a:	61ba      	str	r2, [r7, #24]
 8015d6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015d6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015d70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d02f      	beq.n	8015dde <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015d88:	68b9      	ldr	r1, [r7, #8]
 8015d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d8c:	f000 f8f2 	bl	8015f74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8015d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d92:	1e5a      	subs	r2, r3, #1
 8015d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015d98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015da0:	d112      	bne.n	8015dc8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da4:	691b      	ldr	r3, [r3, #16]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d016      	beq.n	8015dd8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dac:	3310      	adds	r3, #16
 8015dae:	4618      	mov	r0, r3
 8015db0:	f000 fd86 	bl	80168c0 <xTaskRemoveFromEventList>
 8015db4:	4603      	mov	r3, r0
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d00e      	beq.n	8015dd8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d00b      	beq.n	8015dd8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2201      	movs	r2, #1
 8015dc4:	601a      	str	r2, [r3, #0]
 8015dc6:	e007      	b.n	8015dd8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015dcc:	3301      	adds	r3, #1
 8015dce:	b2db      	uxtb	r3, r3
 8015dd0:	b25a      	sxtb	r2, r3
 8015dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015dd8:	2301      	movs	r3, #1
 8015dda:	637b      	str	r3, [r7, #52]	; 0x34
 8015ddc:	e001      	b.n	8015de2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8015dde:	2300      	movs	r3, #0
 8015de0:	637b      	str	r3, [r7, #52]	; 0x34
 8015de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015de4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015dee:	4618      	mov	r0, r3
 8015df0:	3738      	adds	r7, #56	; 0x38
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bd80      	pop	{r7, pc}

08015df6 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015df6:	b580      	push	{r7, lr}
 8015df8:	b084      	sub	sp, #16
 8015dfa:	af00      	add	r7, sp, #0
 8015dfc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d109      	bne.n	8015e18 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8015e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e08:	f383 8811 	msr	BASEPRI, r3
 8015e0c:	f3bf 8f6f 	isb	sy
 8015e10:	f3bf 8f4f 	dsb	sy
 8015e14:	60bb      	str	r3, [r7, #8]
 8015e16:	e7fe      	b.n	8015e16 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8015e18:	f7ff f86a 	bl	8014ef0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e20:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015e22:	f7ff f893 	bl	8014f4c <vPortExitCritical>

	return uxReturn;
 8015e26:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015e28:	4618      	mov	r0, r3
 8015e2a:	3710      	adds	r7, #16
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bd80      	pop	{r7, pc}

08015e30 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8015e30:	b480      	push	{r7}
 8015e32:	b085      	sub	sp, #20
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d109      	bne.n	8015e52 <uxQueueMessagesWaitingFromISR+0x22>
 8015e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e42:	f383 8811 	msr	BASEPRI, r3
 8015e46:	f3bf 8f6f 	isb	sy
 8015e4a:	f3bf 8f4f 	dsb	sy
 8015e4e:	60bb      	str	r3, [r7, #8]
 8015e50:	e7fe      	b.n	8015e50 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e56:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8015e58:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3714      	adds	r7, #20
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e64:	4770      	bx	lr

08015e66 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015e66:	b580      	push	{r7, lr}
 8015e68:	b084      	sub	sp, #16
 8015e6a:	af00      	add	r7, sp, #0
 8015e6c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d109      	bne.n	8015e8c <vQueueDelete+0x26>
 8015e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e7c:	f383 8811 	msr	BASEPRI, r3
 8015e80:	f3bf 8f6f 	isb	sy
 8015e84:	f3bf 8f4f 	dsb	sy
 8015e88:	60bb      	str	r3, [r7, #8]
 8015e8a:	e7fe      	b.n	8015e8a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015e8c:	68f8      	ldr	r0, [r7, #12]
 8015e8e:	f000 f917 	bl	80160c0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8015e92:	68f8      	ldr	r0, [r7, #12]
 8015e94:	f7ff f9fe 	bl	8015294 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015e98:	bf00      	nop
 8015e9a:	3710      	adds	r7, #16
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}

08015ea0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b086      	sub	sp, #24
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	60f8      	str	r0, [r7, #12]
 8015ea8:	60b9      	str	r1, [r7, #8]
 8015eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015eac:	2300      	movs	r3, #0
 8015eae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015eb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d10d      	bne.n	8015eda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d14d      	bne.n	8015f62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	685b      	ldr	r3, [r3, #4]
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f000 ff46 	bl	8016d5c <xTaskPriorityDisinherit>
 8015ed0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	605a      	str	r2, [r3, #4]
 8015ed8:	e043      	b.n	8015f62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d119      	bne.n	8015f14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	6898      	ldr	r0, [r3, #8]
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ee8:	461a      	mov	r2, r3
 8015eea:	68b9      	ldr	r1, [r7, #8]
 8015eec:	f010 faeb 	bl	80264c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	689a      	ldr	r2, [r3, #8]
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ef8:	441a      	add	r2, r3
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	689a      	ldr	r2, [r3, #8]
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	685b      	ldr	r3, [r3, #4]
 8015f06:	429a      	cmp	r2, r3
 8015f08:	d32b      	bcc.n	8015f62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	681a      	ldr	r2, [r3, #0]
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	609a      	str	r2, [r3, #8]
 8015f12:	e026      	b.n	8015f62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	68d8      	ldr	r0, [r3, #12]
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f1c:	461a      	mov	r2, r3
 8015f1e:	68b9      	ldr	r1, [r7, #8]
 8015f20:	f010 fad1 	bl	80264c6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	68da      	ldr	r2, [r3, #12]
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f2c:	425b      	negs	r3, r3
 8015f2e:	441a      	add	r2, r3
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	68da      	ldr	r2, [r3, #12]
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	429a      	cmp	r2, r3
 8015f3e:	d207      	bcs.n	8015f50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	685a      	ldr	r2, [r3, #4]
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f48:	425b      	negs	r3, r3
 8015f4a:	441a      	add	r2, r3
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2b02      	cmp	r3, #2
 8015f54:	d105      	bne.n	8015f62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f56:	693b      	ldr	r3, [r7, #16]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d002      	beq.n	8015f62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	3b01      	subs	r3, #1
 8015f60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	1c5a      	adds	r2, r3, #1
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015f6a:	697b      	ldr	r3, [r7, #20]
}
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	3718      	adds	r7, #24
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b082      	sub	sp, #8
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
 8015f7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d018      	beq.n	8015fb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	68da      	ldr	r2, [r3, #12]
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f8e:	441a      	add	r2, r3
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	68da      	ldr	r2, [r3, #12]
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	685b      	ldr	r3, [r3, #4]
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d303      	bcc.n	8015fa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681a      	ldr	r2, [r3, #0]
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	68d9      	ldr	r1, [r3, #12]
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fb0:	461a      	mov	r2, r3
 8015fb2:	6838      	ldr	r0, [r7, #0]
 8015fb4:	f010 fa87 	bl	80264c6 <memcpy>
	}
}
 8015fb8:	bf00      	nop
 8015fba:	3708      	adds	r7, #8
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	bd80      	pop	{r7, pc}

08015fc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b084      	sub	sp, #16
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015fc8:	f7fe ff92 	bl	8014ef0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015fd4:	e011      	b.n	8015ffa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d012      	beq.n	8016004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	3324      	adds	r3, #36	; 0x24
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f000 fc6c 	bl	80168c0 <xTaskRemoveFromEventList>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d001      	beq.n	8015ff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015fee:	f000 fd4b 	bl	8016a88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015ff2:	7bfb      	ldrb	r3, [r7, #15]
 8015ff4:	3b01      	subs	r3, #1
 8015ff6:	b2db      	uxtb	r3, r3
 8015ff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	dce9      	bgt.n	8015fd6 <prvUnlockQueue+0x16>
 8016002:	e000      	b.n	8016006 <prvUnlockQueue+0x46>
					break;
 8016004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	22ff      	movs	r2, #255	; 0xff
 801600a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801600e:	f7fe ff9d 	bl	8014f4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016012:	f7fe ff6d 	bl	8014ef0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801601c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801601e:	e011      	b.n	8016044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	691b      	ldr	r3, [r3, #16]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d012      	beq.n	801604e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	3310      	adds	r3, #16
 801602c:	4618      	mov	r0, r3
 801602e:	f000 fc47 	bl	80168c0 <xTaskRemoveFromEventList>
 8016032:	4603      	mov	r3, r0
 8016034:	2b00      	cmp	r3, #0
 8016036:	d001      	beq.n	801603c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016038:	f000 fd26 	bl	8016a88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801603c:	7bbb      	ldrb	r3, [r7, #14]
 801603e:	3b01      	subs	r3, #1
 8016040:	b2db      	uxtb	r3, r3
 8016042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016048:	2b00      	cmp	r3, #0
 801604a:	dce9      	bgt.n	8016020 <prvUnlockQueue+0x60>
 801604c:	e000      	b.n	8016050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801604e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	22ff      	movs	r2, #255	; 0xff
 8016054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016058:	f7fe ff78 	bl	8014f4c <vPortExitCritical>
}
 801605c:	bf00      	nop
 801605e:	3710      	adds	r7, #16
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}

08016064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b084      	sub	sp, #16
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801606c:	f7fe ff40 	bl	8014ef0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016074:	2b00      	cmp	r3, #0
 8016076:	d102      	bne.n	801607e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016078:	2301      	movs	r3, #1
 801607a:	60fb      	str	r3, [r7, #12]
 801607c:	e001      	b.n	8016082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801607e:	2300      	movs	r3, #0
 8016080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016082:	f7fe ff63 	bl	8014f4c <vPortExitCritical>

	return xReturn;
 8016086:	68fb      	ldr	r3, [r7, #12]
}
 8016088:	4618      	mov	r0, r3
 801608a:	3710      	adds	r7, #16
 801608c:	46bd      	mov	sp, r7
 801608e:	bd80      	pop	{r7, pc}

08016090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b084      	sub	sp, #16
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016098:	f7fe ff2a 	bl	8014ef0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160a4:	429a      	cmp	r2, r3
 80160a6:	d102      	bne.n	80160ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80160a8:	2301      	movs	r3, #1
 80160aa:	60fb      	str	r3, [r7, #12]
 80160ac:	e001      	b.n	80160b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80160ae:	2300      	movs	r3, #0
 80160b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80160b2:	f7fe ff4b 	bl	8014f4c <vPortExitCritical>

	return xReturn;
 80160b6:	68fb      	ldr	r3, [r7, #12]
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	3710      	adds	r7, #16
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}

080160c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80160c0:	b480      	push	{r7}
 80160c2:	b085      	sub	sp, #20
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160c8:	2300      	movs	r3, #0
 80160ca:	60fb      	str	r3, [r7, #12]
 80160cc:	e016      	b.n	80160fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80160ce:	4a10      	ldr	r2, [pc, #64]	; (8016110 <vQueueUnregisterQueue+0x50>)
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	00db      	lsls	r3, r3, #3
 80160d4:	4413      	add	r3, r2
 80160d6:	685a      	ldr	r2, [r3, #4]
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	429a      	cmp	r2, r3
 80160dc:	d10b      	bne.n	80160f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80160de:	4a0c      	ldr	r2, [pc, #48]	; (8016110 <vQueueUnregisterQueue+0x50>)
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	2100      	movs	r1, #0
 80160e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80160e8:	4a09      	ldr	r2, [pc, #36]	; (8016110 <vQueueUnregisterQueue+0x50>)
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	00db      	lsls	r3, r3, #3
 80160ee:	4413      	add	r3, r2
 80160f0:	2200      	movs	r2, #0
 80160f2:	605a      	str	r2, [r3, #4]
				break;
 80160f4:	e005      	b.n	8016102 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	3301      	adds	r3, #1
 80160fa:	60fb      	str	r3, [r7, #12]
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	2b0f      	cmp	r3, #15
 8016100:	d9e5      	bls.n	80160ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016102:	bf00      	nop
 8016104:	3714      	adds	r7, #20
 8016106:	46bd      	mov	sp, r7
 8016108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610c:	4770      	bx	lr
 801610e:	bf00      	nop
 8016110:	20004580 	.word	0x20004580

08016114 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016114:	b580      	push	{r7, lr}
 8016116:	b08c      	sub	sp, #48	; 0x30
 8016118:	af04      	add	r7, sp, #16
 801611a:	60f8      	str	r0, [r7, #12]
 801611c:	60b9      	str	r1, [r7, #8]
 801611e:	603b      	str	r3, [r7, #0]
 8016120:	4613      	mov	r3, r2
 8016122:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016124:	88fb      	ldrh	r3, [r7, #6]
 8016126:	009b      	lsls	r3, r3, #2
 8016128:	4618      	mov	r0, r3
 801612a:	f7fe fff1 	bl	8015110 <pvPortMalloc>
 801612e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d00e      	beq.n	8016154 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8016136:	2060      	movs	r0, #96	; 0x60
 8016138:	f7fe ffea 	bl	8015110 <pvPortMalloc>
 801613c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801613e:	69fb      	ldr	r3, [r7, #28]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d003      	beq.n	801614c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016144:	69fb      	ldr	r3, [r7, #28]
 8016146:	697a      	ldr	r2, [r7, #20]
 8016148:	631a      	str	r2, [r3, #48]	; 0x30
 801614a:	e005      	b.n	8016158 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801614c:	6978      	ldr	r0, [r7, #20]
 801614e:	f7ff f8a1 	bl	8015294 <vPortFree>
 8016152:	e001      	b.n	8016158 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016154:	2300      	movs	r3, #0
 8016156:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016158:	69fb      	ldr	r3, [r7, #28]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d013      	beq.n	8016186 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801615e:	88fa      	ldrh	r2, [r7, #6]
 8016160:	2300      	movs	r3, #0
 8016162:	9303      	str	r3, [sp, #12]
 8016164:	69fb      	ldr	r3, [r7, #28]
 8016166:	9302      	str	r3, [sp, #8]
 8016168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801616a:	9301      	str	r3, [sp, #4]
 801616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801616e:	9300      	str	r3, [sp, #0]
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	68b9      	ldr	r1, [r7, #8]
 8016174:	68f8      	ldr	r0, [r7, #12]
 8016176:	f000 f80e 	bl	8016196 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801617a:	69f8      	ldr	r0, [r7, #28]
 801617c:	f000 f894 	bl	80162a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016180:	2301      	movs	r3, #1
 8016182:	61bb      	str	r3, [r7, #24]
 8016184:	e002      	b.n	801618c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016186:	f04f 33ff 	mov.w	r3, #4294967295
 801618a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801618c:	69bb      	ldr	r3, [r7, #24]
	}
 801618e:	4618      	mov	r0, r3
 8016190:	3720      	adds	r7, #32
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}

08016196 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8016196:	b580      	push	{r7, lr}
 8016198:	b088      	sub	sp, #32
 801619a:	af00      	add	r7, sp, #0
 801619c:	60f8      	str	r0, [r7, #12]
 801619e:	60b9      	str	r1, [r7, #8]
 80161a0:	607a      	str	r2, [r7, #4]
 80161a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80161a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	009b      	lsls	r3, r3, #2
 80161ac:	461a      	mov	r2, r3
 80161ae:	21a5      	movs	r1, #165	; 0xa5
 80161b0:	f010 f994 	bl	80264dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80161b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80161be:	3b01      	subs	r3, #1
 80161c0:	009b      	lsls	r3, r3, #2
 80161c2:	4413      	add	r3, r2
 80161c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80161c6:	69bb      	ldr	r3, [r7, #24]
 80161c8:	f023 0307 	bic.w	r3, r3, #7
 80161cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80161ce:	69bb      	ldr	r3, [r7, #24]
 80161d0:	f003 0307 	and.w	r3, r3, #7
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d009      	beq.n	80161ec <prvInitialiseNewTask+0x56>
 80161d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161dc:	f383 8811 	msr	BASEPRI, r3
 80161e0:	f3bf 8f6f 	isb	sy
 80161e4:	f3bf 8f4f 	dsb	sy
 80161e8:	617b      	str	r3, [r7, #20]
 80161ea:	e7fe      	b.n	80161ea <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80161ec:	2300      	movs	r3, #0
 80161ee:	61fb      	str	r3, [r7, #28]
 80161f0:	e012      	b.n	8016218 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80161f2:	68ba      	ldr	r2, [r7, #8]
 80161f4:	69fb      	ldr	r3, [r7, #28]
 80161f6:	4413      	add	r3, r2
 80161f8:	7819      	ldrb	r1, [r3, #0]
 80161fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161fc:	69fb      	ldr	r3, [r7, #28]
 80161fe:	4413      	add	r3, r2
 8016200:	3334      	adds	r3, #52	; 0x34
 8016202:	460a      	mov	r2, r1
 8016204:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8016206:	68ba      	ldr	r2, [r7, #8]
 8016208:	69fb      	ldr	r3, [r7, #28]
 801620a:	4413      	add	r3, r2
 801620c:	781b      	ldrb	r3, [r3, #0]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d006      	beq.n	8016220 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016212:	69fb      	ldr	r3, [r7, #28]
 8016214:	3301      	adds	r3, #1
 8016216:	61fb      	str	r3, [r7, #28]
 8016218:	69fb      	ldr	r3, [r7, #28]
 801621a:	2b0f      	cmp	r3, #15
 801621c:	d9e9      	bls.n	80161f2 <prvInitialiseNewTask+0x5c>
 801621e:	e000      	b.n	8016222 <prvInitialiseNewTask+0x8c>
		{
			break;
 8016220:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016224:	2200      	movs	r2, #0
 8016226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801622c:	2b06      	cmp	r3, #6
 801622e:	d901      	bls.n	8016234 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016230:	2306      	movs	r3, #6
 8016232:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016238:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801623c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801623e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016242:	2200      	movs	r2, #0
 8016244:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016248:	3304      	adds	r3, #4
 801624a:	4618      	mov	r0, r3
 801624c:	f7fe fcb5 	bl	8014bba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016252:	3318      	adds	r3, #24
 8016254:	4618      	mov	r0, r3
 8016256:	f7fe fcb0 	bl	8014bba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801625c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801625e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016262:	f1c3 0207 	rsb	r2, r3, #7
 8016266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016268:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801626c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801626e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8016270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016272:	2200      	movs	r2, #0
 8016274:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016278:	2200      	movs	r2, #0
 801627a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801627e:	2200      	movs	r2, #0
 8016280:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016284:	683a      	ldr	r2, [r7, #0]
 8016286:	68f9      	ldr	r1, [r7, #12]
 8016288:	69b8      	ldr	r0, [r7, #24]
 801628a:	f7fe fd2b 	bl	8014ce4 <pxPortInitialiseStack>
 801628e:	4602      	mov	r2, r0
 8016290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016292:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8016294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016296:	2b00      	cmp	r3, #0
 8016298:	d002      	beq.n	80162a0 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801629c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801629e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80162a0:	bf00      	nop
 80162a2:	3720      	adds	r7, #32
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b082      	sub	sp, #8
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80162b0:	f7fe fe1e 	bl	8014ef0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80162b4:	4b2c      	ldr	r3, [pc, #176]	; (8016368 <prvAddNewTaskToReadyList+0xc0>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	3301      	adds	r3, #1
 80162ba:	4a2b      	ldr	r2, [pc, #172]	; (8016368 <prvAddNewTaskToReadyList+0xc0>)
 80162bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80162be:	4b2b      	ldr	r3, [pc, #172]	; (801636c <prvAddNewTaskToReadyList+0xc4>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d109      	bne.n	80162da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80162c6:	4a29      	ldr	r2, [pc, #164]	; (801636c <prvAddNewTaskToReadyList+0xc4>)
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80162cc:	4b26      	ldr	r3, [pc, #152]	; (8016368 <prvAddNewTaskToReadyList+0xc0>)
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	2b01      	cmp	r3, #1
 80162d2:	d110      	bne.n	80162f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80162d4:	f000 fbfc 	bl	8016ad0 <prvInitialiseTaskLists>
 80162d8:	e00d      	b.n	80162f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80162da:	4b25      	ldr	r3, [pc, #148]	; (8016370 <prvAddNewTaskToReadyList+0xc8>)
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d109      	bne.n	80162f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80162e2:	4b22      	ldr	r3, [pc, #136]	; (801636c <prvAddNewTaskToReadyList+0xc4>)
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162ec:	429a      	cmp	r2, r3
 80162ee:	d802      	bhi.n	80162f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80162f0:	4a1e      	ldr	r2, [pc, #120]	; (801636c <prvAddNewTaskToReadyList+0xc4>)
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80162f6:	4b1f      	ldr	r3, [pc, #124]	; (8016374 <prvAddNewTaskToReadyList+0xcc>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	3301      	adds	r3, #1
 80162fc:	4a1d      	ldr	r2, [pc, #116]	; (8016374 <prvAddNewTaskToReadyList+0xcc>)
 80162fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016300:	4b1c      	ldr	r3, [pc, #112]	; (8016374 <prvAddNewTaskToReadyList+0xcc>)
 8016302:	681a      	ldr	r2, [r3, #0]
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801630c:	2201      	movs	r2, #1
 801630e:	409a      	lsls	r2, r3
 8016310:	4b19      	ldr	r3, [pc, #100]	; (8016378 <prvAddNewTaskToReadyList+0xd0>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	4313      	orrs	r3, r2
 8016316:	4a18      	ldr	r2, [pc, #96]	; (8016378 <prvAddNewTaskToReadyList+0xd0>)
 8016318:	6013      	str	r3, [r2, #0]
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801631e:	4613      	mov	r3, r2
 8016320:	009b      	lsls	r3, r3, #2
 8016322:	4413      	add	r3, r2
 8016324:	009b      	lsls	r3, r3, #2
 8016326:	4a15      	ldr	r2, [pc, #84]	; (801637c <prvAddNewTaskToReadyList+0xd4>)
 8016328:	441a      	add	r2, r3
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	3304      	adds	r3, #4
 801632e:	4619      	mov	r1, r3
 8016330:	4610      	mov	r0, r2
 8016332:	f7fe fc4f 	bl	8014bd4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016336:	f7fe fe09 	bl	8014f4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801633a:	4b0d      	ldr	r3, [pc, #52]	; (8016370 <prvAddNewTaskToReadyList+0xc8>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d00e      	beq.n	8016360 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016342:	4b0a      	ldr	r3, [pc, #40]	; (801636c <prvAddNewTaskToReadyList+0xc4>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801634c:	429a      	cmp	r2, r3
 801634e:	d207      	bcs.n	8016360 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016350:	4b0b      	ldr	r3, [pc, #44]	; (8016380 <prvAddNewTaskToReadyList+0xd8>)
 8016352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016356:	601a      	str	r2, [r3, #0]
 8016358:	f3bf 8f4f 	dsb	sy
 801635c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016360:	bf00      	nop
 8016362:	3708      	adds	r7, #8
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	20003f60 	.word	0x20003f60
 801636c:	20003e60 	.word	0x20003e60
 8016370:	20003f6c 	.word	0x20003f6c
 8016374:	20003f7c 	.word	0x20003f7c
 8016378:	20003f68 	.word	0x20003f68
 801637c:	20003e64 	.word	0x20003e64
 8016380:	e000ed04 	.word	0xe000ed04

08016384 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016384:	b580      	push	{r7, lr}
 8016386:	b084      	sub	sp, #16
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801638c:	2300      	movs	r3, #0
 801638e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d016      	beq.n	80163c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016396:	4b13      	ldr	r3, [pc, #76]	; (80163e4 <vTaskDelay+0x60>)
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d009      	beq.n	80163b2 <vTaskDelay+0x2e>
 801639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a2:	f383 8811 	msr	BASEPRI, r3
 80163a6:	f3bf 8f6f 	isb	sy
 80163aa:	f3bf 8f4f 	dsb	sy
 80163ae:	60bb      	str	r3, [r7, #8]
 80163b0:	e7fe      	b.n	80163b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80163b2:	f000 f863 	bl	801647c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80163b6:	2100      	movs	r1, #0
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f000 fd67 	bl	8016e8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80163be:	f000 f86b 	bl	8016498 <xTaskResumeAll>
 80163c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d107      	bne.n	80163da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80163ca:	4b07      	ldr	r3, [pc, #28]	; (80163e8 <vTaskDelay+0x64>)
 80163cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163d0:	601a      	str	r2, [r3, #0]
 80163d2:	f3bf 8f4f 	dsb	sy
 80163d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80163da:	bf00      	nop
 80163dc:	3710      	adds	r7, #16
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
 80163e2:	bf00      	nop
 80163e4:	20003f88 	.word	0x20003f88
 80163e8:	e000ed04 	.word	0xe000ed04

080163ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b086      	sub	sp, #24
 80163f0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80163f2:	4b1c      	ldr	r3, [pc, #112]	; (8016464 <vTaskStartScheduler+0x78>)
 80163f4:	9301      	str	r3, [sp, #4]
 80163f6:	2300      	movs	r3, #0
 80163f8:	9300      	str	r3, [sp, #0]
 80163fa:	2300      	movs	r3, #0
 80163fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016400:	4919      	ldr	r1, [pc, #100]	; (8016468 <vTaskStartScheduler+0x7c>)
 8016402:	481a      	ldr	r0, [pc, #104]	; (801646c <vTaskStartScheduler+0x80>)
 8016404:	f7ff fe86 	bl	8016114 <xTaskCreate>
 8016408:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	2b01      	cmp	r3, #1
 801640e:	d117      	bne.n	8016440 <vTaskStartScheduler+0x54>
 8016410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016414:	f383 8811 	msr	BASEPRI, r3
 8016418:	f3bf 8f6f 	isb	sy
 801641c:	f3bf 8f4f 	dsb	sy
 8016420:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016422:	4b13      	ldr	r3, [pc, #76]	; (8016470 <vTaskStartScheduler+0x84>)
 8016424:	f04f 32ff 	mov.w	r2, #4294967295
 8016428:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801642a:	4b12      	ldr	r3, [pc, #72]	; (8016474 <vTaskStartScheduler+0x88>)
 801642c:	2201      	movs	r2, #1
 801642e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8016430:	4b11      	ldr	r3, [pc, #68]	; (8016478 <vTaskStartScheduler+0x8c>)
 8016432:	2200      	movs	r2, #0
 8016434:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8016436:	f00d ffe7 	bl	8024408 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801643a:	f7fe fccd 	bl	8014dd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801643e:	e00d      	b.n	801645c <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016446:	d109      	bne.n	801645c <vTaskStartScheduler+0x70>
 8016448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801644c:	f383 8811 	msr	BASEPRI, r3
 8016450:	f3bf 8f6f 	isb	sy
 8016454:	f3bf 8f4f 	dsb	sy
 8016458:	607b      	str	r3, [r7, #4]
 801645a:	e7fe      	b.n	801645a <vTaskStartScheduler+0x6e>
}
 801645c:	bf00      	nop
 801645e:	3710      	adds	r7, #16
 8016460:	46bd      	mov	sp, r7
 8016462:	bd80      	pop	{r7, pc}
 8016464:	20003f84 	.word	0x20003f84
 8016468:	080266a8 	.word	0x080266a8
 801646c:	08016aa1 	.word	0x08016aa1
 8016470:	20003f80 	.word	0x20003f80
 8016474:	20003f6c 	.word	0x20003f6c
 8016478:	20003f64 	.word	0x20003f64

0801647c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801647c:	b480      	push	{r7}
 801647e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016480:	4b04      	ldr	r3, [pc, #16]	; (8016494 <vTaskSuspendAll+0x18>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	3301      	adds	r3, #1
 8016486:	4a03      	ldr	r2, [pc, #12]	; (8016494 <vTaskSuspendAll+0x18>)
 8016488:	6013      	str	r3, [r2, #0]
}
 801648a:	bf00      	nop
 801648c:	46bd      	mov	sp, r7
 801648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016492:	4770      	bx	lr
 8016494:	20003f88 	.word	0x20003f88

08016498 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b084      	sub	sp, #16
 801649c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801649e:	2300      	movs	r3, #0
 80164a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80164a2:	2300      	movs	r3, #0
 80164a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80164a6:	4b41      	ldr	r3, [pc, #260]	; (80165ac <xTaskResumeAll+0x114>)
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d109      	bne.n	80164c2 <xTaskResumeAll+0x2a>
 80164ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164b2:	f383 8811 	msr	BASEPRI, r3
 80164b6:	f3bf 8f6f 	isb	sy
 80164ba:	f3bf 8f4f 	dsb	sy
 80164be:	603b      	str	r3, [r7, #0]
 80164c0:	e7fe      	b.n	80164c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80164c2:	f7fe fd15 	bl	8014ef0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80164c6:	4b39      	ldr	r3, [pc, #228]	; (80165ac <xTaskResumeAll+0x114>)
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	3b01      	subs	r3, #1
 80164cc:	4a37      	ldr	r2, [pc, #220]	; (80165ac <xTaskResumeAll+0x114>)
 80164ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80164d0:	4b36      	ldr	r3, [pc, #216]	; (80165ac <xTaskResumeAll+0x114>)
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d161      	bne.n	801659c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80164d8:	4b35      	ldr	r3, [pc, #212]	; (80165b0 <xTaskResumeAll+0x118>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d05d      	beq.n	801659c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80164e0:	e02e      	b.n	8016540 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80164e2:	4b34      	ldr	r3, [pc, #208]	; (80165b4 <xTaskResumeAll+0x11c>)
 80164e4:	68db      	ldr	r3, [r3, #12]
 80164e6:	68db      	ldr	r3, [r3, #12]
 80164e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	3318      	adds	r3, #24
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7fe fbcd 	bl	8014c8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	3304      	adds	r3, #4
 80164f8:	4618      	mov	r0, r3
 80164fa:	f7fe fbc8 	bl	8014c8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016502:	2201      	movs	r2, #1
 8016504:	409a      	lsls	r2, r3
 8016506:	4b2c      	ldr	r3, [pc, #176]	; (80165b8 <xTaskResumeAll+0x120>)
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	4313      	orrs	r3, r2
 801650c:	4a2a      	ldr	r2, [pc, #168]	; (80165b8 <xTaskResumeAll+0x120>)
 801650e:	6013      	str	r3, [r2, #0]
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016514:	4613      	mov	r3, r2
 8016516:	009b      	lsls	r3, r3, #2
 8016518:	4413      	add	r3, r2
 801651a:	009b      	lsls	r3, r3, #2
 801651c:	4a27      	ldr	r2, [pc, #156]	; (80165bc <xTaskResumeAll+0x124>)
 801651e:	441a      	add	r2, r3
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	3304      	adds	r3, #4
 8016524:	4619      	mov	r1, r3
 8016526:	4610      	mov	r0, r2
 8016528:	f7fe fb54 	bl	8014bd4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016530:	4b23      	ldr	r3, [pc, #140]	; (80165c0 <xTaskResumeAll+0x128>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016536:	429a      	cmp	r2, r3
 8016538:	d302      	bcc.n	8016540 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 801653a:	4b22      	ldr	r3, [pc, #136]	; (80165c4 <xTaskResumeAll+0x12c>)
 801653c:	2201      	movs	r2, #1
 801653e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016540:	4b1c      	ldr	r3, [pc, #112]	; (80165b4 <xTaskResumeAll+0x11c>)
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d1cc      	bne.n	80164e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d001      	beq.n	8016552 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801654e:	f000 fb4b 	bl	8016be8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016552:	4b1d      	ldr	r3, [pc, #116]	; (80165c8 <xTaskResumeAll+0x130>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d010      	beq.n	8016580 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801655e:	f000 f859 	bl	8016614 <xTaskIncrementTick>
 8016562:	4603      	mov	r3, r0
 8016564:	2b00      	cmp	r3, #0
 8016566:	d002      	beq.n	801656e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8016568:	4b16      	ldr	r3, [pc, #88]	; (80165c4 <xTaskResumeAll+0x12c>)
 801656a:	2201      	movs	r2, #1
 801656c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	3b01      	subs	r3, #1
 8016572:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d1f1      	bne.n	801655e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 801657a:	4b13      	ldr	r3, [pc, #76]	; (80165c8 <xTaskResumeAll+0x130>)
 801657c:	2200      	movs	r2, #0
 801657e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016580:	4b10      	ldr	r3, [pc, #64]	; (80165c4 <xTaskResumeAll+0x12c>)
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d009      	beq.n	801659c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016588:	2301      	movs	r3, #1
 801658a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801658c:	4b0f      	ldr	r3, [pc, #60]	; (80165cc <xTaskResumeAll+0x134>)
 801658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016592:	601a      	str	r2, [r3, #0]
 8016594:	f3bf 8f4f 	dsb	sy
 8016598:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801659c:	f7fe fcd6 	bl	8014f4c <vPortExitCritical>

	return xAlreadyYielded;
 80165a0:	68bb      	ldr	r3, [r7, #8]
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3710      	adds	r7, #16
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}
 80165aa:	bf00      	nop
 80165ac:	20003f88 	.word	0x20003f88
 80165b0:	20003f60 	.word	0x20003f60
 80165b4:	20003f20 	.word	0x20003f20
 80165b8:	20003f68 	.word	0x20003f68
 80165bc:	20003e64 	.word	0x20003e64
 80165c0:	20003e60 	.word	0x20003e60
 80165c4:	20003f74 	.word	0x20003f74
 80165c8:	20003f70 	.word	0x20003f70
 80165cc:	e000ed04 	.word	0xe000ed04

080165d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80165d0:	b480      	push	{r7}
 80165d2:	b083      	sub	sp, #12
 80165d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80165d6:	4b05      	ldr	r3, [pc, #20]	; (80165ec <xTaskGetTickCount+0x1c>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80165dc:	687b      	ldr	r3, [r7, #4]
}
 80165de:	4618      	mov	r0, r3
 80165e0:	370c      	adds	r7, #12
 80165e2:	46bd      	mov	sp, r7
 80165e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e8:	4770      	bx	lr
 80165ea:	bf00      	nop
 80165ec:	20003f64 	.word	0x20003f64

080165f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b082      	sub	sp, #8
 80165f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80165f6:	f7fe fd4d 	bl	8015094 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80165fa:	2300      	movs	r3, #0
 80165fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80165fe:	4b04      	ldr	r3, [pc, #16]	; (8016610 <xTaskGetTickCountFromISR+0x20>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016604:	683b      	ldr	r3, [r7, #0]
}
 8016606:	4618      	mov	r0, r3
 8016608:	3708      	adds	r7, #8
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	20003f64 	.word	0x20003f64

08016614 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b086      	sub	sp, #24
 8016618:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801661a:	2300      	movs	r3, #0
 801661c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801661e:	4b50      	ldr	r3, [pc, #320]	; (8016760 <xTaskIncrementTick+0x14c>)
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	2b00      	cmp	r3, #0
 8016624:	f040 808c 	bne.w	8016740 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8016628:	4b4e      	ldr	r3, [pc, #312]	; (8016764 <xTaskIncrementTick+0x150>)
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	3301      	adds	r3, #1
 801662e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016630:	4a4c      	ldr	r2, [pc, #304]	; (8016764 <xTaskIncrementTick+0x150>)
 8016632:	693b      	ldr	r3, [r7, #16]
 8016634:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d11f      	bne.n	801667c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801663c:	4b4a      	ldr	r3, [pc, #296]	; (8016768 <xTaskIncrementTick+0x154>)
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d009      	beq.n	801665a <xTaskIncrementTick+0x46>
 8016646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801664a:	f383 8811 	msr	BASEPRI, r3
 801664e:	f3bf 8f6f 	isb	sy
 8016652:	f3bf 8f4f 	dsb	sy
 8016656:	603b      	str	r3, [r7, #0]
 8016658:	e7fe      	b.n	8016658 <xTaskIncrementTick+0x44>
 801665a:	4b43      	ldr	r3, [pc, #268]	; (8016768 <xTaskIncrementTick+0x154>)
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	60fb      	str	r3, [r7, #12]
 8016660:	4b42      	ldr	r3, [pc, #264]	; (801676c <xTaskIncrementTick+0x158>)
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	4a40      	ldr	r2, [pc, #256]	; (8016768 <xTaskIncrementTick+0x154>)
 8016666:	6013      	str	r3, [r2, #0]
 8016668:	4a40      	ldr	r2, [pc, #256]	; (801676c <xTaskIncrementTick+0x158>)
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	6013      	str	r3, [r2, #0]
 801666e:	4b40      	ldr	r3, [pc, #256]	; (8016770 <xTaskIncrementTick+0x15c>)
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	3301      	adds	r3, #1
 8016674:	4a3e      	ldr	r2, [pc, #248]	; (8016770 <xTaskIncrementTick+0x15c>)
 8016676:	6013      	str	r3, [r2, #0]
 8016678:	f000 fab6 	bl	8016be8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801667c:	4b3d      	ldr	r3, [pc, #244]	; (8016774 <xTaskIncrementTick+0x160>)
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	693a      	ldr	r2, [r7, #16]
 8016682:	429a      	cmp	r2, r3
 8016684:	d34d      	bcc.n	8016722 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016686:	4b38      	ldr	r3, [pc, #224]	; (8016768 <xTaskIncrementTick+0x154>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d101      	bne.n	8016694 <xTaskIncrementTick+0x80>
 8016690:	2301      	movs	r3, #1
 8016692:	e000      	b.n	8016696 <xTaskIncrementTick+0x82>
 8016694:	2300      	movs	r3, #0
 8016696:	2b00      	cmp	r3, #0
 8016698:	d004      	beq.n	80166a4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801669a:	4b36      	ldr	r3, [pc, #216]	; (8016774 <xTaskIncrementTick+0x160>)
 801669c:	f04f 32ff 	mov.w	r2, #4294967295
 80166a0:	601a      	str	r2, [r3, #0]
					break;
 80166a2:	e03e      	b.n	8016722 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80166a4:	4b30      	ldr	r3, [pc, #192]	; (8016768 <xTaskIncrementTick+0x154>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	68db      	ldr	r3, [r3, #12]
 80166aa:	68db      	ldr	r3, [r3, #12]
 80166ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80166ae:	68bb      	ldr	r3, [r7, #8]
 80166b0:	685b      	ldr	r3, [r3, #4]
 80166b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80166b4:	693a      	ldr	r2, [r7, #16]
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d203      	bcs.n	80166c4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80166bc:	4a2d      	ldr	r2, [pc, #180]	; (8016774 <xTaskIncrementTick+0x160>)
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	6013      	str	r3, [r2, #0]
						break;
 80166c2:	e02e      	b.n	8016722 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80166c4:	68bb      	ldr	r3, [r7, #8]
 80166c6:	3304      	adds	r3, #4
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7fe fae0 	bl	8014c8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80166ce:	68bb      	ldr	r3, [r7, #8]
 80166d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d004      	beq.n	80166e0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	3318      	adds	r3, #24
 80166da:	4618      	mov	r0, r3
 80166dc:	f7fe fad7 	bl	8014c8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80166e0:	68bb      	ldr	r3, [r7, #8]
 80166e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166e4:	2201      	movs	r2, #1
 80166e6:	409a      	lsls	r2, r3
 80166e8:	4b23      	ldr	r3, [pc, #140]	; (8016778 <xTaskIncrementTick+0x164>)
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4313      	orrs	r3, r2
 80166ee:	4a22      	ldr	r2, [pc, #136]	; (8016778 <xTaskIncrementTick+0x164>)
 80166f0:	6013      	str	r3, [r2, #0]
 80166f2:	68bb      	ldr	r3, [r7, #8]
 80166f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166f6:	4613      	mov	r3, r2
 80166f8:	009b      	lsls	r3, r3, #2
 80166fa:	4413      	add	r3, r2
 80166fc:	009b      	lsls	r3, r3, #2
 80166fe:	4a1f      	ldr	r2, [pc, #124]	; (801677c <xTaskIncrementTick+0x168>)
 8016700:	441a      	add	r2, r3
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	3304      	adds	r3, #4
 8016706:	4619      	mov	r1, r3
 8016708:	4610      	mov	r0, r2
 801670a:	f7fe fa63 	bl	8014bd4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801670e:	68bb      	ldr	r3, [r7, #8]
 8016710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016712:	4b1b      	ldr	r3, [pc, #108]	; (8016780 <xTaskIncrementTick+0x16c>)
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016718:	429a      	cmp	r2, r3
 801671a:	d3b4      	bcc.n	8016686 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801671c:	2301      	movs	r3, #1
 801671e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016720:	e7b1      	b.n	8016686 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016722:	4b17      	ldr	r3, [pc, #92]	; (8016780 <xTaskIncrementTick+0x16c>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016728:	4914      	ldr	r1, [pc, #80]	; (801677c <xTaskIncrementTick+0x168>)
 801672a:	4613      	mov	r3, r2
 801672c:	009b      	lsls	r3, r3, #2
 801672e:	4413      	add	r3, r2
 8016730:	009b      	lsls	r3, r3, #2
 8016732:	440b      	add	r3, r1
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	2b01      	cmp	r3, #1
 8016738:	d907      	bls.n	801674a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 801673a:	2301      	movs	r3, #1
 801673c:	617b      	str	r3, [r7, #20]
 801673e:	e004      	b.n	801674a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016740:	4b10      	ldr	r3, [pc, #64]	; (8016784 <xTaskIncrementTick+0x170>)
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	3301      	adds	r3, #1
 8016746:	4a0f      	ldr	r2, [pc, #60]	; (8016784 <xTaskIncrementTick+0x170>)
 8016748:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801674a:	4b0f      	ldr	r3, [pc, #60]	; (8016788 <xTaskIncrementTick+0x174>)
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d001      	beq.n	8016756 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8016752:	2301      	movs	r3, #1
 8016754:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016756:	697b      	ldr	r3, [r7, #20]
}
 8016758:	4618      	mov	r0, r3
 801675a:	3718      	adds	r7, #24
 801675c:	46bd      	mov	sp, r7
 801675e:	bd80      	pop	{r7, pc}
 8016760:	20003f88 	.word	0x20003f88
 8016764:	20003f64 	.word	0x20003f64
 8016768:	20003f18 	.word	0x20003f18
 801676c:	20003f1c 	.word	0x20003f1c
 8016770:	20003f78 	.word	0x20003f78
 8016774:	20003f80 	.word	0x20003f80
 8016778:	20003f68 	.word	0x20003f68
 801677c:	20003e64 	.word	0x20003e64
 8016780:	20003e60 	.word	0x20003e60
 8016784:	20003f70 	.word	0x20003f70
 8016788:	20003f74 	.word	0x20003f74

0801678c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b086      	sub	sp, #24
 8016790:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016792:	4b32      	ldr	r3, [pc, #200]	; (801685c <vTaskSwitchContext+0xd0>)
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d003      	beq.n	80167a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801679a:	4b31      	ldr	r3, [pc, #196]	; (8016860 <vTaskSwitchContext+0xd4>)
 801679c:	2201      	movs	r2, #1
 801679e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80167a0:	e057      	b.n	8016852 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 80167a2:	4b2f      	ldr	r3, [pc, #188]	; (8016860 <vTaskSwitchContext+0xd4>)
 80167a4:	2200      	movs	r2, #0
 80167a6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80167a8:	f00d fe40 	bl	802442c <getRunTimeCounterValue>
 80167ac:	4602      	mov	r2, r0
 80167ae:	4b2d      	ldr	r3, [pc, #180]	; (8016864 <vTaskSwitchContext+0xd8>)
 80167b0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80167b2:	4b2c      	ldr	r3, [pc, #176]	; (8016864 <vTaskSwitchContext+0xd8>)
 80167b4:	681a      	ldr	r2, [r3, #0]
 80167b6:	4b2c      	ldr	r3, [pc, #176]	; (8016868 <vTaskSwitchContext+0xdc>)
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	429a      	cmp	r2, r3
 80167bc:	d909      	bls.n	80167d2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80167be:	4b2b      	ldr	r3, [pc, #172]	; (801686c <vTaskSwitchContext+0xe0>)
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80167c4:	4a27      	ldr	r2, [pc, #156]	; (8016864 <vTaskSwitchContext+0xd8>)
 80167c6:	6810      	ldr	r0, [r2, #0]
 80167c8:	4a27      	ldr	r2, [pc, #156]	; (8016868 <vTaskSwitchContext+0xdc>)
 80167ca:	6812      	ldr	r2, [r2, #0]
 80167cc:	1a82      	subs	r2, r0, r2
 80167ce:	440a      	add	r2, r1
 80167d0:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 80167d2:	4b24      	ldr	r3, [pc, #144]	; (8016864 <vTaskSwitchContext+0xd8>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	4a24      	ldr	r2, [pc, #144]	; (8016868 <vTaskSwitchContext+0xdc>)
 80167d8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80167da:	4b25      	ldr	r3, [pc, #148]	; (8016870 <vTaskSwitchContext+0xe4>)
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	fab3 f383 	clz	r3, r3
 80167e6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80167e8:	7afb      	ldrb	r3, [r7, #11]
 80167ea:	f1c3 031f 	rsb	r3, r3, #31
 80167ee:	617b      	str	r3, [r7, #20]
 80167f0:	4920      	ldr	r1, [pc, #128]	; (8016874 <vTaskSwitchContext+0xe8>)
 80167f2:	697a      	ldr	r2, [r7, #20]
 80167f4:	4613      	mov	r3, r2
 80167f6:	009b      	lsls	r3, r3, #2
 80167f8:	4413      	add	r3, r2
 80167fa:	009b      	lsls	r3, r3, #2
 80167fc:	440b      	add	r3, r1
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d109      	bne.n	8016818 <vTaskSwitchContext+0x8c>
	__asm volatile
 8016804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016808:	f383 8811 	msr	BASEPRI, r3
 801680c:	f3bf 8f6f 	isb	sy
 8016810:	f3bf 8f4f 	dsb	sy
 8016814:	607b      	str	r3, [r7, #4]
 8016816:	e7fe      	b.n	8016816 <vTaskSwitchContext+0x8a>
 8016818:	697a      	ldr	r2, [r7, #20]
 801681a:	4613      	mov	r3, r2
 801681c:	009b      	lsls	r3, r3, #2
 801681e:	4413      	add	r3, r2
 8016820:	009b      	lsls	r3, r3, #2
 8016822:	4a14      	ldr	r2, [pc, #80]	; (8016874 <vTaskSwitchContext+0xe8>)
 8016824:	4413      	add	r3, r2
 8016826:	613b      	str	r3, [r7, #16]
 8016828:	693b      	ldr	r3, [r7, #16]
 801682a:	685b      	ldr	r3, [r3, #4]
 801682c:	685a      	ldr	r2, [r3, #4]
 801682e:	693b      	ldr	r3, [r7, #16]
 8016830:	605a      	str	r2, [r3, #4]
 8016832:	693b      	ldr	r3, [r7, #16]
 8016834:	685a      	ldr	r2, [r3, #4]
 8016836:	693b      	ldr	r3, [r7, #16]
 8016838:	3308      	adds	r3, #8
 801683a:	429a      	cmp	r2, r3
 801683c:	d104      	bne.n	8016848 <vTaskSwitchContext+0xbc>
 801683e:	693b      	ldr	r3, [r7, #16]
 8016840:	685b      	ldr	r3, [r3, #4]
 8016842:	685a      	ldr	r2, [r3, #4]
 8016844:	693b      	ldr	r3, [r7, #16]
 8016846:	605a      	str	r2, [r3, #4]
 8016848:	693b      	ldr	r3, [r7, #16]
 801684a:	685b      	ldr	r3, [r3, #4]
 801684c:	68db      	ldr	r3, [r3, #12]
 801684e:	4a07      	ldr	r2, [pc, #28]	; (801686c <vTaskSwitchContext+0xe0>)
 8016850:	6013      	str	r3, [r2, #0]
}
 8016852:	bf00      	nop
 8016854:	3718      	adds	r7, #24
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
 801685a:	bf00      	nop
 801685c:	20003f88 	.word	0x20003f88
 8016860:	20003f74 	.word	0x20003f74
 8016864:	20003f90 	.word	0x20003f90
 8016868:	20003f8c 	.word	0x20003f8c
 801686c:	20003e60 	.word	0x20003e60
 8016870:	20003f68 	.word	0x20003f68
 8016874:	20003e64 	.word	0x20003e64

08016878 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b084      	sub	sp, #16
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
 8016880:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d109      	bne.n	801689c <vTaskPlaceOnEventList+0x24>
 8016888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801688c:	f383 8811 	msr	BASEPRI, r3
 8016890:	f3bf 8f6f 	isb	sy
 8016894:	f3bf 8f4f 	dsb	sy
 8016898:	60fb      	str	r3, [r7, #12]
 801689a:	e7fe      	b.n	801689a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801689c:	4b07      	ldr	r3, [pc, #28]	; (80168bc <vTaskPlaceOnEventList+0x44>)
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	3318      	adds	r3, #24
 80168a2:	4619      	mov	r1, r3
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f7fe f9b9 	bl	8014c1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80168aa:	2101      	movs	r1, #1
 80168ac:	6838      	ldr	r0, [r7, #0]
 80168ae:	f000 faed 	bl	8016e8c <prvAddCurrentTaskToDelayedList>
}
 80168b2:	bf00      	nop
 80168b4:	3710      	adds	r7, #16
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}
 80168ba:	bf00      	nop
 80168bc:	20003e60 	.word	0x20003e60

080168c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b086      	sub	sp, #24
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	68db      	ldr	r3, [r3, #12]
 80168cc:	68db      	ldr	r3, [r3, #12]
 80168ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80168d0:	693b      	ldr	r3, [r7, #16]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d109      	bne.n	80168ea <xTaskRemoveFromEventList+0x2a>
 80168d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168da:	f383 8811 	msr	BASEPRI, r3
 80168de:	f3bf 8f6f 	isb	sy
 80168e2:	f3bf 8f4f 	dsb	sy
 80168e6:	60fb      	str	r3, [r7, #12]
 80168e8:	e7fe      	b.n	80168e8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80168ea:	693b      	ldr	r3, [r7, #16]
 80168ec:	3318      	adds	r3, #24
 80168ee:	4618      	mov	r0, r3
 80168f0:	f7fe f9cd 	bl	8014c8e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80168f4:	4b1d      	ldr	r3, [pc, #116]	; (801696c <xTaskRemoveFromEventList+0xac>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d11c      	bne.n	8016936 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80168fc:	693b      	ldr	r3, [r7, #16]
 80168fe:	3304      	adds	r3, #4
 8016900:	4618      	mov	r0, r3
 8016902:	f7fe f9c4 	bl	8014c8e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016906:	693b      	ldr	r3, [r7, #16]
 8016908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801690a:	2201      	movs	r2, #1
 801690c:	409a      	lsls	r2, r3
 801690e:	4b18      	ldr	r3, [pc, #96]	; (8016970 <xTaskRemoveFromEventList+0xb0>)
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	4313      	orrs	r3, r2
 8016914:	4a16      	ldr	r2, [pc, #88]	; (8016970 <xTaskRemoveFromEventList+0xb0>)
 8016916:	6013      	str	r3, [r2, #0]
 8016918:	693b      	ldr	r3, [r7, #16]
 801691a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801691c:	4613      	mov	r3, r2
 801691e:	009b      	lsls	r3, r3, #2
 8016920:	4413      	add	r3, r2
 8016922:	009b      	lsls	r3, r3, #2
 8016924:	4a13      	ldr	r2, [pc, #76]	; (8016974 <xTaskRemoveFromEventList+0xb4>)
 8016926:	441a      	add	r2, r3
 8016928:	693b      	ldr	r3, [r7, #16]
 801692a:	3304      	adds	r3, #4
 801692c:	4619      	mov	r1, r3
 801692e:	4610      	mov	r0, r2
 8016930:	f7fe f950 	bl	8014bd4 <vListInsertEnd>
 8016934:	e005      	b.n	8016942 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016936:	693b      	ldr	r3, [r7, #16]
 8016938:	3318      	adds	r3, #24
 801693a:	4619      	mov	r1, r3
 801693c:	480e      	ldr	r0, [pc, #56]	; (8016978 <xTaskRemoveFromEventList+0xb8>)
 801693e:	f7fe f949 	bl	8014bd4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016942:	693b      	ldr	r3, [r7, #16]
 8016944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016946:	4b0d      	ldr	r3, [pc, #52]	; (801697c <xTaskRemoveFromEventList+0xbc>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801694c:	429a      	cmp	r2, r3
 801694e:	d905      	bls.n	801695c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016950:	2301      	movs	r3, #1
 8016952:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016954:	4b0a      	ldr	r3, [pc, #40]	; (8016980 <xTaskRemoveFromEventList+0xc0>)
 8016956:	2201      	movs	r2, #1
 8016958:	601a      	str	r2, [r3, #0]
 801695a:	e001      	b.n	8016960 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 801695c:	2300      	movs	r3, #0
 801695e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8016960:	697b      	ldr	r3, [r7, #20]
}
 8016962:	4618      	mov	r0, r3
 8016964:	3718      	adds	r7, #24
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}
 801696a:	bf00      	nop
 801696c:	20003f88 	.word	0x20003f88
 8016970:	20003f68 	.word	0x20003f68
 8016974:	20003e64 	.word	0x20003e64
 8016978:	20003f20 	.word	0x20003f20
 801697c:	20003e60 	.word	0x20003e60
 8016980:	20003f74 	.word	0x20003f74

08016984 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016984:	b480      	push	{r7}
 8016986:	b085      	sub	sp, #20
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d109      	bne.n	80169a6 <vTaskSetTimeOutState+0x22>
 8016992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016996:	f383 8811 	msr	BASEPRI, r3
 801699a:	f3bf 8f6f 	isb	sy
 801699e:	f3bf 8f4f 	dsb	sy
 80169a2:	60fb      	str	r3, [r7, #12]
 80169a4:	e7fe      	b.n	80169a4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80169a6:	4b07      	ldr	r3, [pc, #28]	; (80169c4 <vTaskSetTimeOutState+0x40>)
 80169a8:	681a      	ldr	r2, [r3, #0]
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80169ae:	4b06      	ldr	r3, [pc, #24]	; (80169c8 <vTaskSetTimeOutState+0x44>)
 80169b0:	681a      	ldr	r2, [r3, #0]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	605a      	str	r2, [r3, #4]
}
 80169b6:	bf00      	nop
 80169b8:	3714      	adds	r7, #20
 80169ba:	46bd      	mov	sp, r7
 80169bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c0:	4770      	bx	lr
 80169c2:	bf00      	nop
 80169c4:	20003f78 	.word	0x20003f78
 80169c8:	20003f64 	.word	0x20003f64

080169cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b086      	sub	sp, #24
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
 80169d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d109      	bne.n	80169f0 <xTaskCheckForTimeOut+0x24>
 80169dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169e0:	f383 8811 	msr	BASEPRI, r3
 80169e4:	f3bf 8f6f 	isb	sy
 80169e8:	f3bf 8f4f 	dsb	sy
 80169ec:	60fb      	str	r3, [r7, #12]
 80169ee:	e7fe      	b.n	80169ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80169f0:	683b      	ldr	r3, [r7, #0]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d109      	bne.n	8016a0a <xTaskCheckForTimeOut+0x3e>
 80169f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169fa:	f383 8811 	msr	BASEPRI, r3
 80169fe:	f3bf 8f6f 	isb	sy
 8016a02:	f3bf 8f4f 	dsb	sy
 8016a06:	60bb      	str	r3, [r7, #8]
 8016a08:	e7fe      	b.n	8016a08 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8016a0a:	f7fe fa71 	bl	8014ef0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016a0e:	4b1c      	ldr	r3, [pc, #112]	; (8016a80 <xTaskCheckForTimeOut+0xb4>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a1c:	d102      	bne.n	8016a24 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	617b      	str	r3, [r7, #20]
 8016a22:	e026      	b.n	8016a72 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	681a      	ldr	r2, [r3, #0]
 8016a28:	4b16      	ldr	r3, [pc, #88]	; (8016a84 <xTaskCheckForTimeOut+0xb8>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d007      	beq.n	8016a40 <xTaskCheckForTimeOut+0x74>
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	685a      	ldr	r2, [r3, #4]
 8016a34:	693b      	ldr	r3, [r7, #16]
 8016a36:	429a      	cmp	r2, r3
 8016a38:	d802      	bhi.n	8016a40 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016a3a:	2301      	movs	r3, #1
 8016a3c:	617b      	str	r3, [r7, #20]
 8016a3e:	e018      	b.n	8016a72 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	685b      	ldr	r3, [r3, #4]
 8016a44:	693a      	ldr	r2, [r7, #16]
 8016a46:	1ad2      	subs	r2, r2, r3
 8016a48:	683b      	ldr	r3, [r7, #0]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	d20e      	bcs.n	8016a6e <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	681a      	ldr	r2, [r3, #0]
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	6859      	ldr	r1, [r3, #4]
 8016a58:	693b      	ldr	r3, [r7, #16]
 8016a5a:	1acb      	subs	r3, r1, r3
 8016a5c:	441a      	add	r2, r3
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8016a62:	6878      	ldr	r0, [r7, #4]
 8016a64:	f7ff ff8e 	bl	8016984 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	617b      	str	r3, [r7, #20]
 8016a6c:	e001      	b.n	8016a72 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8016a6e:	2301      	movs	r3, #1
 8016a70:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8016a72:	f7fe fa6b 	bl	8014f4c <vPortExitCritical>

	return xReturn;
 8016a76:	697b      	ldr	r3, [r7, #20]
}
 8016a78:	4618      	mov	r0, r3
 8016a7a:	3718      	adds	r7, #24
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}
 8016a80:	20003f64 	.word	0x20003f64
 8016a84:	20003f78 	.word	0x20003f78

08016a88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016a88:	b480      	push	{r7}
 8016a8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016a8c:	4b03      	ldr	r3, [pc, #12]	; (8016a9c <vTaskMissedYield+0x14>)
 8016a8e:	2201      	movs	r2, #1
 8016a90:	601a      	str	r2, [r3, #0]
}
 8016a92:	bf00      	nop
 8016a94:	46bd      	mov	sp, r7
 8016a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9a:	4770      	bx	lr
 8016a9c:	20003f74 	.word	0x20003f74

08016aa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b082      	sub	sp, #8
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016aa8:	f000 f852 	bl	8016b50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016aac:	4b06      	ldr	r3, [pc, #24]	; (8016ac8 <prvIdleTask+0x28>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d9f9      	bls.n	8016aa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016ab4:	4b05      	ldr	r3, [pc, #20]	; (8016acc <prvIdleTask+0x2c>)
 8016ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016aba:	601a      	str	r2, [r3, #0]
 8016abc:	f3bf 8f4f 	dsb	sy
 8016ac0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016ac4:	e7f0      	b.n	8016aa8 <prvIdleTask+0x8>
 8016ac6:	bf00      	nop
 8016ac8:	20003e64 	.word	0x20003e64
 8016acc:	e000ed04 	.word	0xe000ed04

08016ad0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b082      	sub	sp, #8
 8016ad4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	607b      	str	r3, [r7, #4]
 8016ada:	e00c      	b.n	8016af6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016adc:	687a      	ldr	r2, [r7, #4]
 8016ade:	4613      	mov	r3, r2
 8016ae0:	009b      	lsls	r3, r3, #2
 8016ae2:	4413      	add	r3, r2
 8016ae4:	009b      	lsls	r3, r3, #2
 8016ae6:	4a12      	ldr	r2, [pc, #72]	; (8016b30 <prvInitialiseTaskLists+0x60>)
 8016ae8:	4413      	add	r3, r2
 8016aea:	4618      	mov	r0, r3
 8016aec:	f7fe f845 	bl	8014b7a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	3301      	adds	r3, #1
 8016af4:	607b      	str	r3, [r7, #4]
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	2b06      	cmp	r3, #6
 8016afa:	d9ef      	bls.n	8016adc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016afc:	480d      	ldr	r0, [pc, #52]	; (8016b34 <prvInitialiseTaskLists+0x64>)
 8016afe:	f7fe f83c 	bl	8014b7a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016b02:	480d      	ldr	r0, [pc, #52]	; (8016b38 <prvInitialiseTaskLists+0x68>)
 8016b04:	f7fe f839 	bl	8014b7a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016b08:	480c      	ldr	r0, [pc, #48]	; (8016b3c <prvInitialiseTaskLists+0x6c>)
 8016b0a:	f7fe f836 	bl	8014b7a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016b0e:	480c      	ldr	r0, [pc, #48]	; (8016b40 <prvInitialiseTaskLists+0x70>)
 8016b10:	f7fe f833 	bl	8014b7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016b14:	480b      	ldr	r0, [pc, #44]	; (8016b44 <prvInitialiseTaskLists+0x74>)
 8016b16:	f7fe f830 	bl	8014b7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016b1a:	4b0b      	ldr	r3, [pc, #44]	; (8016b48 <prvInitialiseTaskLists+0x78>)
 8016b1c:	4a05      	ldr	r2, [pc, #20]	; (8016b34 <prvInitialiseTaskLists+0x64>)
 8016b1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016b20:	4b0a      	ldr	r3, [pc, #40]	; (8016b4c <prvInitialiseTaskLists+0x7c>)
 8016b22:	4a05      	ldr	r2, [pc, #20]	; (8016b38 <prvInitialiseTaskLists+0x68>)
 8016b24:	601a      	str	r2, [r3, #0]
}
 8016b26:	bf00      	nop
 8016b28:	3708      	adds	r7, #8
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	bd80      	pop	{r7, pc}
 8016b2e:	bf00      	nop
 8016b30:	20003e64 	.word	0x20003e64
 8016b34:	20003ef0 	.word	0x20003ef0
 8016b38:	20003f04 	.word	0x20003f04
 8016b3c:	20003f20 	.word	0x20003f20
 8016b40:	20003f34 	.word	0x20003f34
 8016b44:	20003f4c 	.word	0x20003f4c
 8016b48:	20003f18 	.word	0x20003f18
 8016b4c:	20003f1c 	.word	0x20003f1c

08016b50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b082      	sub	sp, #8
 8016b54:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016b56:	e028      	b.n	8016baa <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8016b58:	f7ff fc90 	bl	801647c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8016b5c:	4b17      	ldr	r3, [pc, #92]	; (8016bbc <prvCheckTasksWaitingTermination+0x6c>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	bf0c      	ite	eq
 8016b64:	2301      	moveq	r3, #1
 8016b66:	2300      	movne	r3, #0
 8016b68:	b2db      	uxtb	r3, r3
 8016b6a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8016b6c:	f7ff fc94 	bl	8016498 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d119      	bne.n	8016baa <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8016b76:	f7fe f9bb 	bl	8014ef0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8016b7a:	4b10      	ldr	r3, [pc, #64]	; (8016bbc <prvCheckTasksWaitingTermination+0x6c>)
 8016b7c:	68db      	ldr	r3, [r3, #12]
 8016b7e:	68db      	ldr	r3, [r3, #12]
 8016b80:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	3304      	adds	r3, #4
 8016b86:	4618      	mov	r0, r3
 8016b88:	f7fe f881 	bl	8014c8e <uxListRemove>
					--uxCurrentNumberOfTasks;
 8016b8c:	4b0c      	ldr	r3, [pc, #48]	; (8016bc0 <prvCheckTasksWaitingTermination+0x70>)
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	3b01      	subs	r3, #1
 8016b92:	4a0b      	ldr	r2, [pc, #44]	; (8016bc0 <prvCheckTasksWaitingTermination+0x70>)
 8016b94:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8016b96:	4b0b      	ldr	r3, [pc, #44]	; (8016bc4 <prvCheckTasksWaitingTermination+0x74>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	3b01      	subs	r3, #1
 8016b9c:	4a09      	ldr	r2, [pc, #36]	; (8016bc4 <prvCheckTasksWaitingTermination+0x74>)
 8016b9e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8016ba0:	f7fe f9d4 	bl	8014f4c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8016ba4:	6838      	ldr	r0, [r7, #0]
 8016ba6:	f000 f80f 	bl	8016bc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016baa:	4b06      	ldr	r3, [pc, #24]	; (8016bc4 <prvCheckTasksWaitingTermination+0x74>)
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d1d2      	bne.n	8016b58 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016bb2:	bf00      	nop
 8016bb4:	3708      	adds	r7, #8
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}
 8016bba:	bf00      	nop
 8016bbc:	20003f34 	.word	0x20003f34
 8016bc0:	20003f60 	.word	0x20003f60
 8016bc4:	20003f48 	.word	0x20003f48

08016bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b082      	sub	sp, #8
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7fe fb5d 	bl	8015294 <vPortFree>
			vPortFree( pxTCB );
 8016bda:	6878      	ldr	r0, [r7, #4]
 8016bdc:	f7fe fb5a 	bl	8015294 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016be0:	bf00      	nop
 8016be2:	3708      	adds	r7, #8
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}

08016be8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016be8:	b480      	push	{r7}
 8016bea:	b083      	sub	sp, #12
 8016bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016bee:	4b0f      	ldr	r3, [pc, #60]	; (8016c2c <prvResetNextTaskUnblockTime+0x44>)
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d101      	bne.n	8016bfc <prvResetNextTaskUnblockTime+0x14>
 8016bf8:	2301      	movs	r3, #1
 8016bfa:	e000      	b.n	8016bfe <prvResetNextTaskUnblockTime+0x16>
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d004      	beq.n	8016c0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016c02:	4b0b      	ldr	r3, [pc, #44]	; (8016c30 <prvResetNextTaskUnblockTime+0x48>)
 8016c04:	f04f 32ff 	mov.w	r2, #4294967295
 8016c08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016c0a:	e008      	b.n	8016c1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8016c0c:	4b07      	ldr	r3, [pc, #28]	; (8016c2c <prvResetNextTaskUnblockTime+0x44>)
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	68db      	ldr	r3, [r3, #12]
 8016c12:	68db      	ldr	r3, [r3, #12]
 8016c14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	685b      	ldr	r3, [r3, #4]
 8016c1a:	4a05      	ldr	r2, [pc, #20]	; (8016c30 <prvResetNextTaskUnblockTime+0x48>)
 8016c1c:	6013      	str	r3, [r2, #0]
}
 8016c1e:	bf00      	nop
 8016c20:	370c      	adds	r7, #12
 8016c22:	46bd      	mov	sp, r7
 8016c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c28:	4770      	bx	lr
 8016c2a:	bf00      	nop
 8016c2c:	20003f18 	.word	0x20003f18
 8016c30:	20003f80 	.word	0x20003f80

08016c34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016c34:	b480      	push	{r7}
 8016c36:	b083      	sub	sp, #12
 8016c38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016c3a:	4b0b      	ldr	r3, [pc, #44]	; (8016c68 <xTaskGetSchedulerState+0x34>)
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d102      	bne.n	8016c48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016c42:	2301      	movs	r3, #1
 8016c44:	607b      	str	r3, [r7, #4]
 8016c46:	e008      	b.n	8016c5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016c48:	4b08      	ldr	r3, [pc, #32]	; (8016c6c <xTaskGetSchedulerState+0x38>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d102      	bne.n	8016c56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016c50:	2302      	movs	r3, #2
 8016c52:	607b      	str	r3, [r7, #4]
 8016c54:	e001      	b.n	8016c5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016c56:	2300      	movs	r3, #0
 8016c58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016c5a:	687b      	ldr	r3, [r7, #4]
	}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	370c      	adds	r7, #12
 8016c60:	46bd      	mov	sp, r7
 8016c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c66:	4770      	bx	lr
 8016c68:	20003f6c 	.word	0x20003f6c
 8016c6c:	20003f88 	.word	0x20003f88

08016c70 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b084      	sub	sp, #16
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d062      	beq.n	8016d48 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c86:	4b32      	ldr	r3, [pc, #200]	; (8016d50 <vTaskPriorityInherit+0xe0>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	d25b      	bcs.n	8016d48 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	699b      	ldr	r3, [r3, #24]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	db06      	blt.n	8016ca6 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c98:	4b2d      	ldr	r3, [pc, #180]	; (8016d50 <vTaskPriorityInherit+0xe0>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c9e:	f1c3 0207 	rsb	r2, r3, #7
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	6959      	ldr	r1, [r3, #20]
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cae:	4613      	mov	r3, r2
 8016cb0:	009b      	lsls	r3, r3, #2
 8016cb2:	4413      	add	r3, r2
 8016cb4:	009b      	lsls	r3, r3, #2
 8016cb6:	4a27      	ldr	r2, [pc, #156]	; (8016d54 <vTaskPriorityInherit+0xe4>)
 8016cb8:	4413      	add	r3, r2
 8016cba:	4299      	cmp	r1, r3
 8016cbc:	d101      	bne.n	8016cc2 <vTaskPriorityInherit+0x52>
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	e000      	b.n	8016cc4 <vTaskPriorityInherit+0x54>
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d03a      	beq.n	8016d3e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	3304      	adds	r3, #4
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f7fd ffde 	bl	8014c8e <uxListRemove>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d115      	bne.n	8016d04 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cdc:	491d      	ldr	r1, [pc, #116]	; (8016d54 <vTaskPriorityInherit+0xe4>)
 8016cde:	4613      	mov	r3, r2
 8016ce0:	009b      	lsls	r3, r3, #2
 8016ce2:	4413      	add	r3, r2
 8016ce4:	009b      	lsls	r3, r3, #2
 8016ce6:	440b      	add	r3, r1
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d10a      	bne.n	8016d04 <vTaskPriorityInherit+0x94>
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cf2:	2201      	movs	r2, #1
 8016cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8016cf8:	43da      	mvns	r2, r3
 8016cfa:	4b17      	ldr	r3, [pc, #92]	; (8016d58 <vTaskPriorityInherit+0xe8>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	4013      	ands	r3, r2
 8016d00:	4a15      	ldr	r2, [pc, #84]	; (8016d58 <vTaskPriorityInherit+0xe8>)
 8016d02:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016d04:	4b12      	ldr	r3, [pc, #72]	; (8016d50 <vTaskPriorityInherit+0xe0>)
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d12:	2201      	movs	r2, #1
 8016d14:	409a      	lsls	r2, r3
 8016d16:	4b10      	ldr	r3, [pc, #64]	; (8016d58 <vTaskPriorityInherit+0xe8>)
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	4313      	orrs	r3, r2
 8016d1c:	4a0e      	ldr	r2, [pc, #56]	; (8016d58 <vTaskPriorityInherit+0xe8>)
 8016d1e:	6013      	str	r3, [r2, #0]
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d24:	4613      	mov	r3, r2
 8016d26:	009b      	lsls	r3, r3, #2
 8016d28:	4413      	add	r3, r2
 8016d2a:	009b      	lsls	r3, r3, #2
 8016d2c:	4a09      	ldr	r2, [pc, #36]	; (8016d54 <vTaskPriorityInherit+0xe4>)
 8016d2e:	441a      	add	r2, r3
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	3304      	adds	r3, #4
 8016d34:	4619      	mov	r1, r3
 8016d36:	4610      	mov	r0, r2
 8016d38:	f7fd ff4c 	bl	8014bd4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016d3c:	e004      	b.n	8016d48 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016d3e:	4b04      	ldr	r3, [pc, #16]	; (8016d50 <vTaskPriorityInherit+0xe0>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8016d48:	bf00      	nop
 8016d4a:	3710      	adds	r7, #16
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}
 8016d50:	20003e60 	.word	0x20003e60
 8016d54:	20003e64 	.word	0x20003e64
 8016d58:	20003f68 	.word	0x20003f68

08016d5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b086      	sub	sp, #24
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016d68:	2300      	movs	r3, #0
 8016d6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d06c      	beq.n	8016e4c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016d72:	4b39      	ldr	r3, [pc, #228]	; (8016e58 <xTaskPriorityDisinherit+0xfc>)
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	693a      	ldr	r2, [r7, #16]
 8016d78:	429a      	cmp	r2, r3
 8016d7a:	d009      	beq.n	8016d90 <xTaskPriorityDisinherit+0x34>
 8016d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d80:	f383 8811 	msr	BASEPRI, r3
 8016d84:	f3bf 8f6f 	isb	sy
 8016d88:	f3bf 8f4f 	dsb	sy
 8016d8c:	60fb      	str	r3, [r7, #12]
 8016d8e:	e7fe      	b.n	8016d8e <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d109      	bne.n	8016dac <xTaskPriorityDisinherit+0x50>
 8016d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d9c:	f383 8811 	msr	BASEPRI, r3
 8016da0:	f3bf 8f6f 	isb	sy
 8016da4:	f3bf 8f4f 	dsb	sy
 8016da8:	60bb      	str	r3, [r7, #8]
 8016daa:	e7fe      	b.n	8016daa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8016dac:	693b      	ldr	r3, [r7, #16]
 8016dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016db0:	1e5a      	subs	r2, r3, #1
 8016db2:	693b      	ldr	r3, [r7, #16]
 8016db4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016db6:	693b      	ldr	r3, [r7, #16]
 8016db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dba:	693b      	ldr	r3, [r7, #16]
 8016dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	d044      	beq.n	8016e4c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016dc2:	693b      	ldr	r3, [r7, #16]
 8016dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d140      	bne.n	8016e4c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016dca:	693b      	ldr	r3, [r7, #16]
 8016dcc:	3304      	adds	r3, #4
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f7fd ff5d 	bl	8014c8e <uxListRemove>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d115      	bne.n	8016e06 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016dda:	693b      	ldr	r3, [r7, #16]
 8016ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dde:	491f      	ldr	r1, [pc, #124]	; (8016e5c <xTaskPriorityDisinherit+0x100>)
 8016de0:	4613      	mov	r3, r2
 8016de2:	009b      	lsls	r3, r3, #2
 8016de4:	4413      	add	r3, r2
 8016de6:	009b      	lsls	r3, r3, #2
 8016de8:	440b      	add	r3, r1
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d10a      	bne.n	8016e06 <xTaskPriorityDisinherit+0xaa>
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016df4:	2201      	movs	r2, #1
 8016df6:	fa02 f303 	lsl.w	r3, r2, r3
 8016dfa:	43da      	mvns	r2, r3
 8016dfc:	4b18      	ldr	r3, [pc, #96]	; (8016e60 <xTaskPriorityDisinherit+0x104>)
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	4013      	ands	r3, r2
 8016e02:	4a17      	ldr	r2, [pc, #92]	; (8016e60 <xTaskPriorityDisinherit+0x104>)
 8016e04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016e06:	693b      	ldr	r3, [r7, #16]
 8016e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016e0a:	693b      	ldr	r3, [r7, #16]
 8016e0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e0e:	693b      	ldr	r3, [r7, #16]
 8016e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e12:	f1c3 0207 	rsb	r2, r3, #7
 8016e16:	693b      	ldr	r3, [r7, #16]
 8016e18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016e1a:	693b      	ldr	r3, [r7, #16]
 8016e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e1e:	2201      	movs	r2, #1
 8016e20:	409a      	lsls	r2, r3
 8016e22:	4b0f      	ldr	r3, [pc, #60]	; (8016e60 <xTaskPriorityDisinherit+0x104>)
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	4313      	orrs	r3, r2
 8016e28:	4a0d      	ldr	r2, [pc, #52]	; (8016e60 <xTaskPriorityDisinherit+0x104>)
 8016e2a:	6013      	str	r3, [r2, #0]
 8016e2c:	693b      	ldr	r3, [r7, #16]
 8016e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e30:	4613      	mov	r3, r2
 8016e32:	009b      	lsls	r3, r3, #2
 8016e34:	4413      	add	r3, r2
 8016e36:	009b      	lsls	r3, r3, #2
 8016e38:	4a08      	ldr	r2, [pc, #32]	; (8016e5c <xTaskPriorityDisinherit+0x100>)
 8016e3a:	441a      	add	r2, r3
 8016e3c:	693b      	ldr	r3, [r7, #16]
 8016e3e:	3304      	adds	r3, #4
 8016e40:	4619      	mov	r1, r3
 8016e42:	4610      	mov	r0, r2
 8016e44:	f7fd fec6 	bl	8014bd4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016e48:	2301      	movs	r3, #1
 8016e4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016e4c:	697b      	ldr	r3, [r7, #20]
	}
 8016e4e:	4618      	mov	r0, r3
 8016e50:	3718      	adds	r7, #24
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}
 8016e56:	bf00      	nop
 8016e58:	20003e60 	.word	0x20003e60
 8016e5c:	20003e64 	.word	0x20003e64
 8016e60:	20003f68 	.word	0x20003f68

08016e64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8016e64:	b480      	push	{r7}
 8016e66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016e68:	4b07      	ldr	r3, [pc, #28]	; (8016e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d004      	beq.n	8016e7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016e70:	4b05      	ldr	r3, [pc, #20]	; (8016e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016e76:	3201      	adds	r2, #1
 8016e78:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8016e7a:	4b03      	ldr	r3, [pc, #12]	; (8016e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8016e7c:	681b      	ldr	r3, [r3, #0]
	}
 8016e7e:	4618      	mov	r0, r3
 8016e80:	46bd      	mov	sp, r7
 8016e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e86:	4770      	bx	lr
 8016e88:	20003e60 	.word	0x20003e60

08016e8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b084      	sub	sp, #16
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
 8016e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016e96:	4b29      	ldr	r3, [pc, #164]	; (8016f3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016e9c:	4b28      	ldr	r3, [pc, #160]	; (8016f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	3304      	adds	r3, #4
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f7fd fef3 	bl	8014c8e <uxListRemove>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d10b      	bne.n	8016ec6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8016eae:	4b24      	ldr	r3, [pc, #144]	; (8016f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016eb4:	2201      	movs	r2, #1
 8016eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8016eba:	43da      	mvns	r2, r3
 8016ebc:	4b21      	ldr	r3, [pc, #132]	; (8016f44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	4013      	ands	r3, r2
 8016ec2:	4a20      	ldr	r2, [pc, #128]	; (8016f44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016ec4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ecc:	d10a      	bne.n	8016ee4 <prvAddCurrentTaskToDelayedList+0x58>
 8016ece:	683b      	ldr	r3, [r7, #0]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d007      	beq.n	8016ee4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016ed4:	4b1a      	ldr	r3, [pc, #104]	; (8016f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	3304      	adds	r3, #4
 8016eda:	4619      	mov	r1, r3
 8016edc:	481a      	ldr	r0, [pc, #104]	; (8016f48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016ede:	f7fd fe79 	bl	8014bd4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016ee2:	e026      	b.n	8016f32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016ee4:	68fa      	ldr	r2, [r7, #12]
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	4413      	add	r3, r2
 8016eea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016eec:	4b14      	ldr	r3, [pc, #80]	; (8016f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	68ba      	ldr	r2, [r7, #8]
 8016ef2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016ef4:	68ba      	ldr	r2, [r7, #8]
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	429a      	cmp	r2, r3
 8016efa:	d209      	bcs.n	8016f10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016efc:	4b13      	ldr	r3, [pc, #76]	; (8016f4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8016efe:	681a      	ldr	r2, [r3, #0]
 8016f00:	4b0f      	ldr	r3, [pc, #60]	; (8016f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	3304      	adds	r3, #4
 8016f06:	4619      	mov	r1, r3
 8016f08:	4610      	mov	r0, r2
 8016f0a:	f7fd fe87 	bl	8014c1c <vListInsert>
}
 8016f0e:	e010      	b.n	8016f32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016f10:	4b0f      	ldr	r3, [pc, #60]	; (8016f50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016f12:	681a      	ldr	r2, [r3, #0]
 8016f14:	4b0a      	ldr	r3, [pc, #40]	; (8016f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	3304      	adds	r3, #4
 8016f1a:	4619      	mov	r1, r3
 8016f1c:	4610      	mov	r0, r2
 8016f1e:	f7fd fe7d 	bl	8014c1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016f22:	4b0c      	ldr	r3, [pc, #48]	; (8016f54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	68ba      	ldr	r2, [r7, #8]
 8016f28:	429a      	cmp	r2, r3
 8016f2a:	d202      	bcs.n	8016f32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016f2c:	4a09      	ldr	r2, [pc, #36]	; (8016f54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016f2e:	68bb      	ldr	r3, [r7, #8]
 8016f30:	6013      	str	r3, [r2, #0]
}
 8016f32:	bf00      	nop
 8016f34:	3710      	adds	r7, #16
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}
 8016f3a:	bf00      	nop
 8016f3c:	20003f64 	.word	0x20003f64
 8016f40:	20003e60 	.word	0x20003e60
 8016f44:	20003f68 	.word	0x20003f68
 8016f48:	20003f4c 	.word	0x20003f4c
 8016f4c:	20003f1c 	.word	0x20003f1c
 8016f50:	20003f18 	.word	0x20003f18
 8016f54:	20003f80 	.word	0x20003f80

08016f58 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b084      	sub	sp, #16
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]
 8016f60:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8016f62:	683b      	ldr	r3, [r7, #0]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	330c      	adds	r3, #12
 8016f68:	461a      	mov	r2, r3
 8016f6a:	6839      	ldr	r1, [r7, #0]
 8016f6c:	6878      	ldr	r0, [r7, #4]
 8016f6e:	f002 f943 	bl	80191f8 <tcpip_send_msg_wait_sem>
 8016f72:	4603      	mov	r3, r0
 8016f74:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8016f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d103      	bne.n	8016f86 <netconn_apimsg+0x2e>
    return apimsg->err;
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016f84:	e001      	b.n	8016f8a <netconn_apimsg+0x32>
  }
  return err;
 8016f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	3710      	adds	r7, #16
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
	...

08016f94 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b08a      	sub	sp, #40	; 0x28
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	603a      	str	r2, [r7, #0]
 8016f9e:	71fb      	strb	r3, [r7, #7]
 8016fa0:	460b      	mov	r3, r1
 8016fa2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8016fa4:	79fb      	ldrb	r3, [r7, #7]
 8016fa6:	6839      	ldr	r1, [r7, #0]
 8016fa8:	4618      	mov	r0, r3
 8016faa:	f000 ff87 	bl	8017ebc <netconn_alloc>
 8016fae:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8016fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d054      	beq.n	8017060 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8016fb6:	79bb      	ldrb	r3, [r7, #6]
 8016fb8:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8016fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fbc:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8016fbe:	f107 030c 	add.w	r3, r7, #12
 8016fc2:	4619      	mov	r1, r3
 8016fc4:	4829      	ldr	r0, [pc, #164]	; (801706c <netconn_new_with_proto_and_callback+0xd8>)
 8016fc6:	f7ff ffc7 	bl	8016f58 <netconn_apimsg>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8016fd0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d043      	beq.n	8017060 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8016fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fda:	685b      	ldr	r3, [r3, #4]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d005      	beq.n	8016fec <netconn_new_with_proto_and_callback+0x58>
 8016fe0:	4b23      	ldr	r3, [pc, #140]	; (8017070 <netconn_new_with_proto_and_callback+0xdc>)
 8016fe2:	2289      	movs	r2, #137	; 0x89
 8016fe4:	4923      	ldr	r1, [pc, #140]	; (8017074 <netconn_new_with_proto_and_callback+0xe0>)
 8016fe6:	4824      	ldr	r0, [pc, #144]	; (8017078 <netconn_new_with_proto_and_callback+0xe4>)
 8016fe8:	f00e fd9a 	bl	8025b20 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8016fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fee:	3310      	adds	r3, #16
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f00c f861 	bl	80230b8 <sys_mbox_valid>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d105      	bne.n	8017008 <netconn_new_with_proto_and_callback+0x74>
 8016ffc:	4b1c      	ldr	r3, [pc, #112]	; (8017070 <netconn_new_with_proto_and_callback+0xdc>)
 8016ffe:	228a      	movs	r2, #138	; 0x8a
 8017000:	491e      	ldr	r1, [pc, #120]	; (801707c <netconn_new_with_proto_and_callback+0xe8>)
 8017002:	481d      	ldr	r0, [pc, #116]	; (8017078 <netconn_new_with_proto_and_callback+0xe4>)
 8017004:	f00e fd8c 	bl	8025b20 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8017008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801700a:	3314      	adds	r3, #20
 801700c:	4618      	mov	r0, r3
 801700e:	f00c f853 	bl	80230b8 <sys_mbox_valid>
 8017012:	4603      	mov	r3, r0
 8017014:	2b00      	cmp	r3, #0
 8017016:	d005      	beq.n	8017024 <netconn_new_with_proto_and_callback+0x90>
 8017018:	4b15      	ldr	r3, [pc, #84]	; (8017070 <netconn_new_with_proto_and_callback+0xdc>)
 801701a:	228c      	movs	r2, #140	; 0x8c
 801701c:	4918      	ldr	r1, [pc, #96]	; (8017080 <netconn_new_with_proto_and_callback+0xec>)
 801701e:	4816      	ldr	r0, [pc, #88]	; (8017078 <netconn_new_with_proto_and_callback+0xe4>)
 8017020:	f00e fd7e 	bl	8025b20 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8017024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017026:	330c      	adds	r3, #12
 8017028:	4618      	mov	r0, r3
 801702a:	f00c f8d4 	bl	80231d6 <sys_sem_valid>
 801702e:	4603      	mov	r3, r0
 8017030:	2b00      	cmp	r3, #0
 8017032:	d105      	bne.n	8017040 <netconn_new_with_proto_and_callback+0xac>
 8017034:	4b0e      	ldr	r3, [pc, #56]	; (8017070 <netconn_new_with_proto_and_callback+0xdc>)
 8017036:	228f      	movs	r2, #143	; 0x8f
 8017038:	4912      	ldr	r1, [pc, #72]	; (8017084 <netconn_new_with_proto_and_callback+0xf0>)
 801703a:	480f      	ldr	r0, [pc, #60]	; (8017078 <netconn_new_with_proto_and_callback+0xe4>)
 801703c:	f00e fd70 	bl	8025b20 <iprintf>
      sys_sem_free(&conn->op_completed);
 8017040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017042:	330c      	adds	r3, #12
 8017044:	4618      	mov	r0, r3
 8017046:	f00c f8b9 	bl	80231bc <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801704c:	3310      	adds	r3, #16
 801704e:	4618      	mov	r0, r3
 8017050:	f00b ff96 	bl	8022f80 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8017054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017056:	2007      	movs	r0, #7
 8017058:	f005 f8ac 	bl	801c1b4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 801705c:	2300      	movs	r3, #0
 801705e:	e000      	b.n	8017062 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8017060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017062:	4618      	mov	r0, r3
 8017064:	3728      	adds	r7, #40	; 0x28
 8017066:	46bd      	mov	sp, r7
 8017068:	bd80      	pop	{r7, pc}
 801706a:	bf00      	nop
 801706c:	08017e65 	.word	0x08017e65
 8017070:	080266b0 	.word	0x080266b0
 8017074:	080266e4 	.word	0x080266e4
 8017078:	08026708 	.word	0x08026708
 801707c:	08026730 	.word	0x08026730
 8017080:	08026748 	.word	0x08026748
 8017084:	0802676c 	.word	0x0802676c

08017088 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b088      	sub	sp, #32
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d101      	bne.n	801709a <netconn_delete+0x12>
    return ERR_OK;
 8017096:	2300      	movs	r3, #0
 8017098:	e016      	b.n	80170c8 <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801709e:	2329      	movs	r3, #41	; 0x29
 80170a0:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80170a2:	f107 0308 	add.w	r3, r7, #8
 80170a6:	4619      	mov	r1, r3
 80170a8:	4809      	ldr	r0, [pc, #36]	; (80170d0 <netconn_delete+0x48>)
 80170aa:	f7ff ff55 	bl	8016f58 <netconn_apimsg>
 80170ae:	4603      	mov	r3, r0
 80170b0:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80170b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d002      	beq.n	80170c0 <netconn_delete+0x38>
    return err;
 80170ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80170be:	e003      	b.n	80170c8 <netconn_delete+0x40>
  }

  netconn_free(conn);
 80170c0:	6878      	ldr	r0, [r7, #4]
 80170c2:	f000 ff6b 	bl	8017f9c <netconn_free>

  return ERR_OK;
 80170c6:	2300      	movs	r3, #0
}
 80170c8:	4618      	mov	r0, r3
 80170ca:	3720      	adds	r7, #32
 80170cc:	46bd      	mov	sp, r7
 80170ce:	bd80      	pop	{r7, pc}
 80170d0:	08018421 	.word	0x08018421

080170d4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b08a      	sub	sp, #40	; 0x28
 80170d8:	af00      	add	r7, sp, #0
 80170da:	60f8      	str	r0, [r7, #12]
 80170dc:	60b9      	str	r1, [r7, #8]
 80170de:	4613      	mov	r3, r2
 80170e0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d108      	bne.n	80170fa <netconn_bind+0x26>
 80170e8:	4b11      	ldr	r3, [pc, #68]	; (8017130 <netconn_bind+0x5c>)
 80170ea:	22ff      	movs	r2, #255	; 0xff
 80170ec:	4911      	ldr	r1, [pc, #68]	; (8017134 <netconn_bind+0x60>)
 80170ee:	4812      	ldr	r0, [pc, #72]	; (8017138 <netconn_bind+0x64>)
 80170f0:	f00e fd16 	bl	8025b20 <iprintf>
 80170f4:	f06f 030f 	mvn.w	r3, #15
 80170f8:	e015      	b.n	8017126 <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80170fa:	68bb      	ldr	r3, [r7, #8]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d101      	bne.n	8017104 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8017100:	4b0e      	ldr	r3, [pc, #56]	; (801713c <netconn_bind+0x68>)
 8017102:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8017108:	68bb      	ldr	r3, [r7, #8]
 801710a:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 801710c:	88fb      	ldrh	r3, [r7, #6]
 801710e:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8017110:	f107 0310 	add.w	r3, r7, #16
 8017114:	4619      	mov	r1, r3
 8017116:	480a      	ldr	r0, [pc, #40]	; (8017140 <netconn_bind+0x6c>)
 8017118:	f7ff ff1e 	bl	8016f58 <netconn_apimsg>
 801711c:	4603      	mov	r3, r0
 801711e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8017122:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017126:	4618      	mov	r0, r3
 8017128:	3728      	adds	r7, #40	; 0x28
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}
 801712e:	bf00      	nop
 8017130:	080266b0 	.word	0x080266b0
 8017134:	080267e8 	.word	0x080267e8
 8017138:	08026708 	.word	0x08026708
 801713c:	0802b34c 	.word	0x0802b34c
 8017140:	08018625 	.word	0x08018625

08017144 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b088      	sub	sp, #32
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
 801714c:	460b      	mov	r3, r1
 801714e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d109      	bne.n	801716a <netconn_listen_with_backlog+0x26>
 8017156:	4b0d      	ldr	r3, [pc, #52]	; (801718c <netconn_listen_with_backlog+0x48>)
 8017158:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801715c:	490c      	ldr	r1, [pc, #48]	; (8017190 <netconn_listen_with_backlog+0x4c>)
 801715e:	480d      	ldr	r0, [pc, #52]	; (8017194 <netconn_listen_with_backlog+0x50>)
 8017160:	f00e fcde 	bl	8025b20 <iprintf>
 8017164:	f06f 030f 	mvn.w	r3, #15
 8017168:	e00b      	b.n	8017182 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 801716e:	f107 0308 	add.w	r3, r7, #8
 8017172:	4619      	mov	r1, r3
 8017174:	4808      	ldr	r0, [pc, #32]	; (8017198 <netconn_listen_with_backlog+0x54>)
 8017176:	f7ff feef 	bl	8016f58 <netconn_apimsg>
 801717a:	4603      	mov	r3, r0
 801717c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 801717e:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8017182:	4618      	mov	r0, r3
 8017184:	3720      	adds	r7, #32
 8017186:	46bd      	mov	sp, r7
 8017188:	bd80      	pop	{r7, pc}
 801718a:	bf00      	nop
 801718c:	080266b0 	.word	0x080266b0
 8017190:	08026848 	.word	0x08026848
 8017194:	08026708 	.word	0x08026708
 8017198:	080186e5 	.word	0x080186e5

0801719c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b086      	sub	sp, #24
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
 80171a4:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80171a6:	683b      	ldr	r3, [r7, #0]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d109      	bne.n	80171c0 <netconn_accept+0x24>
 80171ac:	4b34      	ldr	r3, [pc, #208]	; (8017280 <netconn_accept+0xe4>)
 80171ae:	f240 128d 	movw	r2, #397	; 0x18d
 80171b2:	4934      	ldr	r1, [pc, #208]	; (8017284 <netconn_accept+0xe8>)
 80171b4:	4834      	ldr	r0, [pc, #208]	; (8017288 <netconn_accept+0xec>)
 80171b6:	f00e fcb3 	bl	8025b20 <iprintf>
 80171ba:	f06f 030f 	mvn.w	r3, #15
 80171be:	e05b      	b.n	8017278 <netconn_accept+0xdc>
  *new_conn = NULL;
 80171c0:	683b      	ldr	r3, [r7, #0]
 80171c2:	2200      	movs	r2, #0
 80171c4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d109      	bne.n	80171e0 <netconn_accept+0x44>
 80171cc:	4b2c      	ldr	r3, [pc, #176]	; (8017280 <netconn_accept+0xe4>)
 80171ce:	f240 128f 	movw	r2, #399	; 0x18f
 80171d2:	492e      	ldr	r1, [pc, #184]	; (801728c <netconn_accept+0xf0>)
 80171d4:	482c      	ldr	r0, [pc, #176]	; (8017288 <netconn_accept+0xec>)
 80171d6:	f00e fca3 	bl	8025b20 <iprintf>
 80171da:	f06f 030f 	mvn.w	r3, #15
 80171de:	e04b      	b.n	8017278 <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80171e6:	f113 0f0c 	cmn.w	r3, #12
 80171ea:	da03      	bge.n	80171f4 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80171f2:	e041      	b.n	8017278 <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	3314      	adds	r3, #20
 80171f8:	4618      	mov	r0, r3
 80171fa:	f00b ff5d 	bl	80230b8 <sys_mbox_valid>
 80171fe:	4603      	mov	r3, r0
 8017200:	2b00      	cmp	r3, #0
 8017202:	d102      	bne.n	801720a <netconn_accept+0x6e>
    return ERR_CLSD;
 8017204:	f06f 030e 	mvn.w	r3, #14
 8017208:	e036      	b.n	8017278 <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	3314      	adds	r3, #20
 801720e:	f107 010c 	add.w	r1, r7, #12
 8017212:	2200      	movs	r2, #0
 8017214:	4618      	mov	r0, r3
 8017216:	f00b fef4 	bl	8023002 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017222:	2b00      	cmp	r3, #0
 8017224:	d005      	beq.n	8017232 <netconn_accept+0x96>
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801722a:	2200      	movs	r2, #0
 801722c:	2101      	movs	r1, #1
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	4a16      	ldr	r2, [pc, #88]	; (8017290 <netconn_accept+0xf4>)
 8017236:	4293      	cmp	r3, r2
 8017238:	d102      	bne.n	8017240 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 801723a:	f06f 030c 	mvn.w	r3, #12
 801723e:	e01b      	b.n	8017278 <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 8017240:	697b      	ldr	r3, [r7, #20]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d114      	bne.n	8017270 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d00e      	beq.n	801726a <netconn_accept+0xce>
 801724c:	f00c f844 	bl	80232d8 <sys_arch_protect>
 8017250:	6138      	str	r0, [r7, #16]
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017258:	f113 0f0c 	cmn.w	r3, #12
 801725c:	db02      	blt.n	8017264 <netconn_accept+0xc8>
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	22f1      	movs	r2, #241	; 0xf1
 8017262:	721a      	strb	r2, [r3, #8]
 8017264:	6938      	ldr	r0, [r7, #16]
 8017266:	f00c f845 	bl	80232f4 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 801726a:	f06f 030e 	mvn.w	r3, #14
 801726e:	e003      	b.n	8017278 <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	697a      	ldr	r2, [r7, #20]
 8017274:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8017276:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8017278:	4618      	mov	r0, r3
 801727a:	3718      	adds	r7, #24
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}
 8017280:	080266b0 	.word	0x080266b0
 8017284:	08026868 	.word	0x08026868
 8017288:	08026708 	.word	0x08026708
 801728c:	08026888 	.word	0x08026888
 8017290:	20004600 	.word	0x20004600

08017294 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b08a      	sub	sp, #40	; 0x28
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
 801729c:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 801729e:	2300      	movs	r3, #0
 80172a0:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d109      	bne.n	80172bc <netconn_recv_data+0x28>
 80172a8:	4b5c      	ldr	r3, [pc, #368]	; (801741c <netconn_recv_data+0x188>)
 80172aa:	f240 12e7 	movw	r2, #487	; 0x1e7
 80172ae:	495c      	ldr	r1, [pc, #368]	; (8017420 <netconn_recv_data+0x18c>)
 80172b0:	485c      	ldr	r0, [pc, #368]	; (8017424 <netconn_recv_data+0x190>)
 80172b2:	f00e fc35 	bl	8025b20 <iprintf>
 80172b6:	f06f 030f 	mvn.w	r3, #15
 80172ba:	e0aa      	b.n	8017412 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 80172bc:	683b      	ldr	r3, [r7, #0]
 80172be:	2200      	movs	r2, #0
 80172c0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d109      	bne.n	80172dc <netconn_recv_data+0x48>
 80172c8:	4b54      	ldr	r3, [pc, #336]	; (801741c <netconn_recv_data+0x188>)
 80172ca:	f240 12e9 	movw	r2, #489	; 0x1e9
 80172ce:	4956      	ldr	r1, [pc, #344]	; (8017428 <netconn_recv_data+0x194>)
 80172d0:	4854      	ldr	r0, [pc, #336]	; (8017424 <netconn_recv_data+0x190>)
 80172d2:	f00e fc25 	bl	8025b20 <iprintf>
 80172d6:	f06f 030f 	mvn.w	r3, #15
 80172da:	e09a      	b.n	8017412 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	781b      	ldrb	r3, [r3, #0]
 80172e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80172e4:	2b10      	cmp	r3, #16
 80172e6:	d115      	bne.n	8017314 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	3310      	adds	r3, #16
 80172ec:	4618      	mov	r0, r3
 80172ee:	f00b fee3 	bl	80230b8 <sys_mbox_valid>
 80172f2:	4603      	mov	r3, r0
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d10d      	bne.n	8017314 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	3314      	adds	r3, #20
 80172fc:	4618      	mov	r0, r3
 80172fe:	f00b fedb 	bl	80230b8 <sys_mbox_valid>
 8017302:	4603      	mov	r3, r0
 8017304:	2b00      	cmp	r3, #0
 8017306:	d002      	beq.n	801730e <netconn_recv_data+0x7a>
 8017308:	f06f 030a 	mvn.w	r3, #10
 801730c:	e081      	b.n	8017412 <netconn_recv_data+0x17e>
 801730e:	f06f 030e 	mvn.w	r3, #14
 8017312:	e07e      	b.n	8017412 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	3310      	adds	r3, #16
 8017318:	4618      	mov	r0, r3
 801731a:	f00b fecd 	bl	80230b8 <sys_mbox_valid>
 801731e:	4603      	mov	r3, r0
 8017320:	2b00      	cmp	r3, #0
 8017322:	d109      	bne.n	8017338 <netconn_recv_data+0xa4>
 8017324:	4b3d      	ldr	r3, [pc, #244]	; (801741c <netconn_recv_data+0x188>)
 8017326:	f240 12f5 	movw	r2, #501	; 0x1f5
 801732a:	4940      	ldr	r1, [pc, #256]	; (801742c <netconn_recv_data+0x198>)
 801732c:	483d      	ldr	r0, [pc, #244]	; (8017424 <netconn_recv_data+0x190>)
 801732e:	f00e fbf7 	bl	8025b20 <iprintf>
 8017332:	f06f 030a 	mvn.w	r3, #10
 8017336:	e06c      	b.n	8017412 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801733e:	f113 0f0c 	cmn.w	r3, #12
 8017342:	da03      	bge.n	801734c <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801734a:	e062      	b.n	8017412 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	3310      	adds	r3, #16
 8017350:	f107 0120 	add.w	r1, r7, #32
 8017354:	2200      	movs	r2, #0
 8017356:	4618      	mov	r0, r3
 8017358:	f00b fe53 	bl	8023002 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017364:	2b10      	cmp	r3, #16
 8017366:	d138      	bne.n	80173da <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 801736c:	6a3b      	ldr	r3, [r7, #32]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d003      	beq.n	801737a <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8017372:	6a3b      	ldr	r3, [r7, #32]
 8017374:	891b      	ldrh	r3, [r3, #8]
 8017376:	617b      	str	r3, [r7, #20]
 8017378:	e001      	b.n	801737e <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 801737a:	2301      	movs	r3, #1
 801737c:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 801737e:	f107 030c 	add.w	r3, r7, #12
 8017382:	4619      	mov	r1, r3
 8017384:	482a      	ldr	r0, [pc, #168]	; (8017430 <netconn_recv_data+0x19c>)
 8017386:	f7ff fde7 	bl	8016f58 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 801738a:	6a3b      	ldr	r3, [r7, #32]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d120      	bne.n	80173d2 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017394:	2b00      	cmp	r3, #0
 8017396:	d005      	beq.n	80173a4 <netconn_recv_data+0x110>
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801739c:	2200      	movs	r2, #0
 801739e:	2101      	movs	r1, #1
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	685b      	ldr	r3, [r3, #4]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d10b      	bne.n	80173c4 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d003      	beq.n	80173be <netconn_recv_data+0x12a>
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80173bc:	e029      	b.n	8017412 <netconn_recv_data+0x17e>
 80173be:	f06f 030d 	mvn.w	r3, #13
 80173c2:	e026      	b.n	8017412 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80173c4:	2101      	movs	r1, #1
 80173c6:	6878      	ldr	r0, [r7, #4]
 80173c8:	f000 f926 	bl	8017618 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80173cc:	f06f 030e 	mvn.w	r3, #14
 80173d0:	e01f      	b.n	8017412 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80173d2:	6a3b      	ldr	r3, [r7, #32]
 80173d4:	891b      	ldrh	r3, [r3, #8]
 80173d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80173d8:	e00d      	b.n	80173f6 <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80173da:	6a3b      	ldr	r3, [r7, #32]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d106      	bne.n	80173ee <netconn_recv_data+0x15a>
 80173e0:	4b0e      	ldr	r3, [pc, #56]	; (801741c <netconn_recv_data+0x188>)
 80173e2:	f240 223e 	movw	r2, #574	; 0x23e
 80173e6:	4913      	ldr	r1, [pc, #76]	; (8017434 <netconn_recv_data+0x1a0>)
 80173e8:	480e      	ldr	r0, [pc, #56]	; (8017424 <netconn_recv_data+0x190>)
 80173ea:	f00e fb99 	bl	8025b20 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 80173ee:	6a3b      	ldr	r3, [r7, #32]
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	891b      	ldrh	r3, [r3, #8]
 80173f4:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d005      	beq.n	801740a <netconn_recv_data+0x176>
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017402:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017404:	2101      	movs	r1, #1
 8017406:	6878      	ldr	r0, [r7, #4]
 8017408:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801740a:	6a3a      	ldr	r2, [r7, #32]
 801740c:	683b      	ldr	r3, [r7, #0]
 801740e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8017410:	2300      	movs	r3, #0
}
 8017412:	4618      	mov	r0, r3
 8017414:	3728      	adds	r7, #40	; 0x28
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}
 801741a:	bf00      	nop
 801741c:	080266b0 	.word	0x080266b0
 8017420:	080268a8 	.word	0x080268a8
 8017424:	08026708 	.word	0x08026708
 8017428:	080268c8 	.word	0x080268c8
 801742c:	080268e4 	.word	0x080268e4
 8017430:	08018869 	.word	0x08018869
 8017434:	08026904 	.word	0x08026904

08017438 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b086      	sub	sp, #24
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
 8017440:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8017442:	2300      	movs	r3, #0
 8017444:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8017446:	683b      	ldr	r3, [r7, #0]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d109      	bne.n	8017460 <netconn_recv+0x28>
 801744c:	4b31      	ldr	r3, [pc, #196]	; (8017514 <netconn_recv+0xdc>)
 801744e:	f44f 721d 	mov.w	r2, #628	; 0x274
 8017452:	4931      	ldr	r1, [pc, #196]	; (8017518 <netconn_recv+0xe0>)
 8017454:	4831      	ldr	r0, [pc, #196]	; (801751c <netconn_recv+0xe4>)
 8017456:	f00e fb63 	bl	8025b20 <iprintf>
 801745a:	f06f 030f 	mvn.w	r3, #15
 801745e:	e054      	b.n	801750a <netconn_recv+0xd2>
  *new_buf = NULL;
 8017460:	683b      	ldr	r3, [r7, #0]
 8017462:	2200      	movs	r2, #0
 8017464:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d109      	bne.n	8017480 <netconn_recv+0x48>
 801746c:	4b29      	ldr	r3, [pc, #164]	; (8017514 <netconn_recv+0xdc>)
 801746e:	f240 2276 	movw	r2, #630	; 0x276
 8017472:	492b      	ldr	r1, [pc, #172]	; (8017520 <netconn_recv+0xe8>)
 8017474:	4829      	ldr	r0, [pc, #164]	; (801751c <netconn_recv+0xe4>)
 8017476:	f00e fb53 	bl	8025b20 <iprintf>
 801747a:	f06f 030f 	mvn.w	r3, #15
 801747e:	e044      	b.n	801750a <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	781b      	ldrb	r3, [r3, #0]
 8017484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017488:	2b10      	cmp	r3, #16
 801748a:	d139      	bne.n	8017500 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 801748c:	2300      	movs	r3, #0
 801748e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8017490:	2006      	movs	r0, #6
 8017492:	f004 fe3d 	bl	801c110 <memp_malloc>
 8017496:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8017498:	697b      	ldr	r3, [r7, #20]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d102      	bne.n	80174a4 <netconn_recv+0x6c>
      return ERR_MEM;
 801749e:	f04f 33ff 	mov.w	r3, #4294967295
 80174a2:	e032      	b.n	801750a <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 80174a4:	f107 030c 	add.w	r3, r7, #12
 80174a8:	4619      	mov	r1, r3
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f7ff fef2 	bl	8017294 <netconn_recv_data>
 80174b0:	4603      	mov	r3, r0
 80174b2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80174b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d006      	beq.n	80174ca <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 80174bc:	6979      	ldr	r1, [r7, #20]
 80174be:	2006      	movs	r0, #6
 80174c0:	f004 fe78 	bl	801c1b4 <memp_free>
      return err;
 80174c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80174c8:	e01f      	b.n	801750a <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d106      	bne.n	80174de <netconn_recv+0xa6>
 80174d0:	4b10      	ldr	r3, [pc, #64]	; (8017514 <netconn_recv+0xdc>)
 80174d2:	f240 228a 	movw	r2, #650	; 0x28a
 80174d6:	4913      	ldr	r1, [pc, #76]	; (8017524 <netconn_recv+0xec>)
 80174d8:	4810      	ldr	r0, [pc, #64]	; (801751c <netconn_recv+0xe4>)
 80174da:	f00e fb21 	bl	8025b20 <iprintf>

    buf->p = p;
 80174de:	68fa      	ldr	r2, [r7, #12]
 80174e0:	697b      	ldr	r3, [r7, #20]
 80174e2:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80174e4:	68fa      	ldr	r2, [r7, #12]
 80174e6:	697b      	ldr	r3, [r7, #20]
 80174e8:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	2200      	movs	r2, #0
 80174ee:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80174f0:	697b      	ldr	r3, [r7, #20]
 80174f2:	2200      	movs	r2, #0
 80174f4:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	697a      	ldr	r2, [r7, #20]
 80174fa:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80174fc:	2300      	movs	r3, #0
 80174fe:	e004      	b.n	801750a <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 8017500:	6839      	ldr	r1, [r7, #0]
 8017502:	6878      	ldr	r0, [r7, #4]
 8017504:	f7ff fec6 	bl	8017294 <netconn_recv_data>
 8017508:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 801750a:	4618      	mov	r0, r3
 801750c:	3718      	adds	r7, #24
 801750e:	46bd      	mov	sp, r7
 8017510:	bd80      	pop	{r7, pc}
 8017512:	bf00      	nop
 8017514:	080266b0 	.word	0x080266b0
 8017518:	080268a8 	.word	0x080268a8
 801751c:	08026708 	.word	0x08026708
 8017520:	080268c8 	.word	0x080268c8
 8017524:	08026910 	.word	0x08026910

08017528 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b08a      	sub	sp, #40	; 0x28
 801752c:	af00      	add	r7, sp, #0
 801752e:	60f8      	str	r0, [r7, #12]
 8017530:	60b9      	str	r1, [r7, #8]
 8017532:	607a      	str	r2, [r7, #4]
 8017534:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d109      	bne.n	8017550 <netconn_write_partly+0x28>
 801753c:	4b31      	ldr	r3, [pc, #196]	; (8017604 <netconn_write_partly+0xdc>)
 801753e:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017542:	4931      	ldr	r1, [pc, #196]	; (8017608 <netconn_write_partly+0xe0>)
 8017544:	4831      	ldr	r0, [pc, #196]	; (801760c <netconn_write_partly+0xe4>)
 8017546:	f00e faeb 	bl	8025b20 <iprintf>
 801754a:	f06f 030f 	mvn.w	r3, #15
 801754e:	e054      	b.n	80175fa <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	781b      	ldrb	r3, [r3, #0]
 8017554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017558:	2b10      	cmp	r3, #16
 801755a:	d009      	beq.n	8017570 <netconn_write_partly+0x48>
 801755c:	4b29      	ldr	r3, [pc, #164]	; (8017604 <netconn_write_partly+0xdc>)
 801755e:	f240 22e7 	movw	r2, #743	; 0x2e7
 8017562:	492b      	ldr	r1, [pc, #172]	; (8017610 <netconn_write_partly+0xe8>)
 8017564:	4829      	ldr	r0, [pc, #164]	; (801760c <netconn_write_partly+0xe4>)
 8017566:	f00e fadb 	bl	8025b20 <iprintf>
 801756a:	f06f 0305 	mvn.w	r3, #5
 801756e:	e044      	b.n	80175fa <netconn_write_partly+0xd2>
  if (size == 0) {
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d101      	bne.n	801757a <netconn_write_partly+0x52>
    return ERR_OK;
 8017576:	2300      	movs	r3, #0
 8017578:	e03f      	b.n	80175fa <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	7f1b      	ldrb	r3, [r3, #28]
 801757e:	f003 0302 	and.w	r3, r3, #2
 8017582:	2b00      	cmp	r3, #0
 8017584:	d104      	bne.n	8017590 <netconn_write_partly+0x68>
 8017586:	78fb      	ldrb	r3, [r7, #3]
 8017588:	f003 0304 	and.w	r3, r3, #4
 801758c:	2b00      	cmp	r3, #0
 801758e:	d001      	beq.n	8017594 <netconn_write_partly+0x6c>
 8017590:	2301      	movs	r3, #1
 8017592:	e000      	b.n	8017596 <netconn_write_partly+0x6e>
 8017594:	2300      	movs	r3, #0
 8017596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 801759a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d005      	beq.n	80175ae <netconn_write_partly+0x86>
 80175a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d102      	bne.n	80175ae <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80175a8:	f06f 0305 	mvn.w	r3, #5
 80175ac:	e025      	b.n	80175fa <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 80175b2:	68bb      	ldr	r3, [r7, #8]
 80175b4:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80175b6:	78fb      	ldrb	r3, [r7, #3]
 80175b8:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80175c0:	f107 0310 	add.w	r3, r7, #16
 80175c4:	4619      	mov	r1, r3
 80175c6:	4813      	ldr	r0, [pc, #76]	; (8017614 <netconn_write_partly+0xec>)
 80175c8:	f7ff fcc6 	bl	8016f58 <netconn_apimsg>
 80175cc:	4603      	mov	r3, r0
 80175ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 80175d2:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d10d      	bne.n	80175f6 <netconn_write_partly+0xce>
 80175da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d00a      	beq.n	80175f6 <netconn_write_partly+0xce>
    if (dontblock) {
 80175e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d003      	beq.n	80175f0 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 80175e8:	69fa      	ldr	r2, [r7, #28]
 80175ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ec:	601a      	str	r2, [r3, #0]
 80175ee:	e002      	b.n	80175f6 <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 80175f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f2:	687a      	ldr	r2, [r7, #4]
 80175f4:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80175f6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80175fa:	4618      	mov	r0, r3
 80175fc:	3728      	adds	r7, #40	; 0x28
 80175fe:	46bd      	mov	sp, r7
 8017600:	bd80      	pop	{r7, pc}
 8017602:	bf00      	nop
 8017604:	080266b0 	.word	0x080266b0
 8017608:	08026938 	.word	0x08026938
 801760c:	08026708 	.word	0x08026708
 8017610:	08026954 	.word	0x08026954
 8017614:	08018c49 	.word	0x08018c49

08017618 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8017618:	b580      	push	{r7, lr}
 801761a:	b088      	sub	sp, #32
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
 8017620:	460b      	mov	r3, r1
 8017622:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d109      	bne.n	801763e <netconn_close_shutdown+0x26>
 801762a:	4b0f      	ldr	r3, [pc, #60]	; (8017668 <netconn_close_shutdown+0x50>)
 801762c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8017630:	490e      	ldr	r1, [pc, #56]	; (801766c <netconn_close_shutdown+0x54>)
 8017632:	480f      	ldr	r0, [pc, #60]	; (8017670 <netconn_close_shutdown+0x58>)
 8017634:	f00e fa74 	bl	8025b20 <iprintf>
 8017638:	f06f 030f 	mvn.w	r3, #15
 801763c:	e00f      	b.n	801765e <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8017642:	78fb      	ldrb	r3, [r7, #3]
 8017644:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8017646:	2329      	movs	r3, #41	; 0x29
 8017648:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801764a:	f107 0308 	add.w	r3, r7, #8
 801764e:	4619      	mov	r1, r3
 8017650:	4808      	ldr	r0, [pc, #32]	; (8017674 <netconn_close_shutdown+0x5c>)
 8017652:	f7ff fc81 	bl	8016f58 <netconn_apimsg>
 8017656:	4603      	mov	r3, r0
 8017658:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 801765a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801765e:	4618      	mov	r0, r3
 8017660:	3720      	adds	r7, #32
 8017662:	46bd      	mov	sp, r7
 8017664:	bd80      	pop	{r7, pc}
 8017666:	bf00      	nop
 8017668:	080266b0 	.word	0x080266b0
 801766c:	08026978 	.word	0x08026978
 8017670:	08026708 	.word	0x08026708
 8017674:	08018da9 	.word	0x08018da9

08017678 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b082      	sub	sp, #8
 801767c:	af00      	add	r7, sp, #0
 801767e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8017680:	2103      	movs	r1, #3
 8017682:	6878      	ldr	r0, [r7, #4]
 8017684:	f7ff ffc8 	bl	8017618 <netconn_close_shutdown>
 8017688:	4603      	mov	r3, r0
}
 801768a:	4618      	mov	r0, r3
 801768c:	3708      	adds	r7, #8
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}
	...

08017694 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b088      	sub	sp, #32
 8017698:	af00      	add	r7, sp, #0
 801769a:	60f8      	str	r0, [r7, #12]
 801769c:	60b9      	str	r1, [r7, #8]
 801769e:	607a      	str	r2, [r7, #4]
 80176a0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80176a2:	68bb      	ldr	r3, [r7, #8]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d105      	bne.n	80176b4 <recv_udp+0x20>
 80176a8:	4b34      	ldr	r3, [pc, #208]	; (801777c <recv_udp+0xe8>)
 80176aa:	22b1      	movs	r2, #177	; 0xb1
 80176ac:	4934      	ldr	r1, [pc, #208]	; (8017780 <recv_udp+0xec>)
 80176ae:	4835      	ldr	r0, [pc, #212]	; (8017784 <recv_udp+0xf0>)
 80176b0:	f00e fa36 	bl	8025b20 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d105      	bne.n	80176c6 <recv_udp+0x32>
 80176ba:	4b30      	ldr	r3, [pc, #192]	; (801777c <recv_udp+0xe8>)
 80176bc:	22b2      	movs	r2, #178	; 0xb2
 80176be:	4932      	ldr	r1, [pc, #200]	; (8017788 <recv_udp+0xf4>)
 80176c0:	4830      	ldr	r0, [pc, #192]	; (8017784 <recv_udp+0xf0>)
 80176c2:	f00e fa2d 	bl	8025b20 <iprintf>
  conn = (struct netconn *)arg;
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80176ca:	69fb      	ldr	r3, [r7, #28]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d103      	bne.n	80176d8 <recv_udp+0x44>
    pbuf_free(p);
 80176d0:	6878      	ldr	r0, [r7, #4]
 80176d2:	f005 fac9 	bl	801cc68 <pbuf_free>
    return;
 80176d6:	e04d      	b.n	8017774 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80176d8:	69fb      	ldr	r3, [r7, #28]
 80176da:	685a      	ldr	r2, [r3, #4]
 80176dc:	68bb      	ldr	r3, [r7, #8]
 80176de:	429a      	cmp	r2, r3
 80176e0:	d005      	beq.n	80176ee <recv_udp+0x5a>
 80176e2:	4b26      	ldr	r3, [pc, #152]	; (801777c <recv_udp+0xe8>)
 80176e4:	22ba      	movs	r2, #186	; 0xba
 80176e6:	4929      	ldr	r1, [pc, #164]	; (801778c <recv_udp+0xf8>)
 80176e8:	4826      	ldr	r0, [pc, #152]	; (8017784 <recv_udp+0xf0>)
 80176ea:	f00e fa19 	bl	8025b20 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80176ee:	69fb      	ldr	r3, [r7, #28]
 80176f0:	3310      	adds	r3, #16
 80176f2:	4618      	mov	r0, r3
 80176f4:	f00b fce0 	bl	80230b8 <sys_mbox_valid>
 80176f8:	4603      	mov	r3, r0
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d103      	bne.n	8017706 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80176fe:	6878      	ldr	r0, [r7, #4]
 8017700:	f005 fab2 	bl	801cc68 <pbuf_free>
    return;
 8017704:	e036      	b.n	8017774 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8017706:	2006      	movs	r0, #6
 8017708:	f004 fd02 	bl	801c110 <memp_malloc>
 801770c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 801770e:	69bb      	ldr	r3, [r7, #24]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d103      	bne.n	801771c <recv_udp+0x88>
    pbuf_free(p);
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f005 faa7 	bl	801cc68 <pbuf_free>
    return;
 801771a:	e02b      	b.n	8017774 <recv_udp+0xe0>
  } else {
    buf->p = p;
 801771c:	69bb      	ldr	r3, [r7, #24]
 801771e:	687a      	ldr	r2, [r7, #4]
 8017720:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8017722:	69bb      	ldr	r3, [r7, #24]
 8017724:	687a      	ldr	r2, [r7, #4]
 8017726:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8017728:	683b      	ldr	r3, [r7, #0]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d002      	beq.n	8017734 <recv_udp+0xa0>
 801772e:	683b      	ldr	r3, [r7, #0]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	e000      	b.n	8017736 <recv_udp+0xa2>
 8017734:	2300      	movs	r3, #0
 8017736:	69ba      	ldr	r2, [r7, #24]
 8017738:	6093      	str	r3, [r2, #8]
    buf->port = port;
 801773a:	69bb      	ldr	r3, [r7, #24]
 801773c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801773e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	891b      	ldrh	r3, [r3, #8]
 8017744:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8017746:	69fb      	ldr	r3, [r7, #28]
 8017748:	3310      	adds	r3, #16
 801774a:	69b9      	ldr	r1, [r7, #24]
 801774c:	4618      	mov	r0, r3
 801774e:	f00b fc3e 	bl	8022fce <sys_mbox_trypost>
 8017752:	4603      	mov	r3, r0
 8017754:	2b00      	cmp	r3, #0
 8017756:	d003      	beq.n	8017760 <recv_udp+0xcc>
    netbuf_delete(buf);
 8017758:	69b8      	ldr	r0, [r7, #24]
 801775a:	f001 fbcd 	bl	8018ef8 <netbuf_delete>
    return;
 801775e:	e009      	b.n	8017774 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8017760:	69fb      	ldr	r3, [r7, #28]
 8017762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017764:	2b00      	cmp	r3, #0
 8017766:	d005      	beq.n	8017774 <recv_udp+0xe0>
 8017768:	69fb      	ldr	r3, [r7, #28]
 801776a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801776c:	8afa      	ldrh	r2, [r7, #22]
 801776e:	2100      	movs	r1, #0
 8017770:	69f8      	ldr	r0, [r7, #28]
 8017772:	4798      	blx	r3
  }
}
 8017774:	3720      	adds	r7, #32
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}
 801777a:	bf00      	nop
 801777c:	08026994 	.word	0x08026994
 8017780:	080269c8 	.word	0x080269c8
 8017784:	080269ec 	.word	0x080269ec
 8017788:	08026a14 	.word	0x08026a14
 801778c:	08026a34 	.word	0x08026a34

08017790 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b088      	sub	sp, #32
 8017794:	af00      	add	r7, sp, #0
 8017796:	60f8      	str	r0, [r7, #12]
 8017798:	60b9      	str	r1, [r7, #8]
 801779a:	607a      	str	r2, [r7, #4]
 801779c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801779e:	68bb      	ldr	r3, [r7, #8]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d105      	bne.n	80177b0 <recv_tcp+0x20>
 80177a4:	4b39      	ldr	r3, [pc, #228]	; (801788c <recv_tcp+0xfc>)
 80177a6:	22f9      	movs	r2, #249	; 0xf9
 80177a8:	4939      	ldr	r1, [pc, #228]	; (8017890 <recv_tcp+0x100>)
 80177aa:	483a      	ldr	r0, [pc, #232]	; (8017894 <recv_tcp+0x104>)
 80177ac:	f00e f9b8 	bl	8025b20 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d105      	bne.n	80177c2 <recv_tcp+0x32>
 80177b6:	4b35      	ldr	r3, [pc, #212]	; (801788c <recv_tcp+0xfc>)
 80177b8:	22fa      	movs	r2, #250	; 0xfa
 80177ba:	4937      	ldr	r1, [pc, #220]	; (8017898 <recv_tcp+0x108>)
 80177bc:	4835      	ldr	r0, [pc, #212]	; (8017894 <recv_tcp+0x104>)
 80177be:	f00e f9af 	bl	8025b20 <iprintf>
  conn = (struct netconn *)arg;
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80177c6:	69bb      	ldr	r3, [r7, #24]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d102      	bne.n	80177d2 <recv_tcp+0x42>
    return ERR_VAL;
 80177cc:	f06f 0305 	mvn.w	r3, #5
 80177d0:	e057      	b.n	8017882 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80177d2:	69bb      	ldr	r3, [r7, #24]
 80177d4:	685a      	ldr	r2, [r3, #4]
 80177d6:	68bb      	ldr	r3, [r7, #8]
 80177d8:	429a      	cmp	r2, r3
 80177da:	d006      	beq.n	80177ea <recv_tcp+0x5a>
 80177dc:	4b2b      	ldr	r3, [pc, #172]	; (801788c <recv_tcp+0xfc>)
 80177de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80177e2:	492e      	ldr	r1, [pc, #184]	; (801789c <recv_tcp+0x10c>)
 80177e4:	482b      	ldr	r0, [pc, #172]	; (8017894 <recv_tcp+0x104>)
 80177e6:	f00e f99b 	bl	8025b20 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 80177ea:	69bb      	ldr	r3, [r7, #24]
 80177ec:	3310      	adds	r3, #16
 80177ee:	4618      	mov	r0, r3
 80177f0:	f00b fc62 	bl	80230b8 <sys_mbox_valid>
 80177f4:	4603      	mov	r3, r0
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d10d      	bne.n	8017816 <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d008      	beq.n	8017812 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	891b      	ldrh	r3, [r3, #8]
 8017804:	4619      	mov	r1, r3
 8017806:	68b8      	ldr	r0, [r7, #8]
 8017808:	f006 f90a 	bl	801da20 <tcp_recved>
      pbuf_free(p);
 801780c:	6878      	ldr	r0, [r7, #4]
 801780e:	f005 fa2b 	bl	801cc68 <pbuf_free>
    }
    return ERR_OK;
 8017812:	2300      	movs	r3, #0
 8017814:	e035      	b.n	8017882 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 8017816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d011      	beq.n	8017842 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 801781e:	69bb      	ldr	r3, [r7, #24]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d00e      	beq.n	8017842 <recv_tcp+0xb2>
 8017824:	f00b fd58 	bl	80232d8 <sys_arch_protect>
 8017828:	6178      	str	r0, [r7, #20]
 801782a:	69bb      	ldr	r3, [r7, #24]
 801782c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017830:	f113 0f0c 	cmn.w	r3, #12
 8017834:	db02      	blt.n	801783c <recv_tcp+0xac>
 8017836:	69bb      	ldr	r3, [r7, #24]
 8017838:	78fa      	ldrb	r2, [r7, #3]
 801783a:	721a      	strb	r2, [r3, #8]
 801783c:	6978      	ldr	r0, [r7, #20]
 801783e:	f00b fd59 	bl	80232f4 <sys_arch_unprotect>
  }

  if (p != NULL) {
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d003      	beq.n	8017850 <recv_tcp+0xc0>
    len = p->tot_len;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	891b      	ldrh	r3, [r3, #8]
 801784c:	83fb      	strh	r3, [r7, #30]
 801784e:	e001      	b.n	8017854 <recv_tcp+0xc4>
  } else {
    len = 0;
 8017850:	2300      	movs	r3, #0
 8017852:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8017854:	69bb      	ldr	r3, [r7, #24]
 8017856:	3310      	adds	r3, #16
 8017858:	6879      	ldr	r1, [r7, #4]
 801785a:	4618      	mov	r0, r3
 801785c:	f00b fbb7 	bl	8022fce <sys_mbox_trypost>
 8017860:	4603      	mov	r3, r0
 8017862:	2b00      	cmp	r3, #0
 8017864:	d002      	beq.n	801786c <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8017866:	f04f 33ff 	mov.w	r3, #4294967295
 801786a:	e00a      	b.n	8017882 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801786c:	69bb      	ldr	r3, [r7, #24]
 801786e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017870:	2b00      	cmp	r3, #0
 8017872:	d005      	beq.n	8017880 <recv_tcp+0xf0>
 8017874:	69bb      	ldr	r3, [r7, #24]
 8017876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017878:	8bfa      	ldrh	r2, [r7, #30]
 801787a:	2100      	movs	r1, #0
 801787c:	69b8      	ldr	r0, [r7, #24]
 801787e:	4798      	blx	r3
  }

  return ERR_OK;
 8017880:	2300      	movs	r3, #0
}
 8017882:	4618      	mov	r0, r3
 8017884:	3720      	adds	r7, #32
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}
 801788a:	bf00      	nop
 801788c:	08026994 	.word	0x08026994
 8017890:	08026a54 	.word	0x08026a54
 8017894:	080269ec 	.word	0x080269ec
 8017898:	08026a78 	.word	0x08026a78
 801789c:	08026a98 	.word	0x08026a98

080178a0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b084      	sub	sp, #16
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d106      	bne.n	80178c2 <poll_tcp+0x22>
 80178b4:	4b2a      	ldr	r3, [pc, #168]	; (8017960 <poll_tcp+0xc0>)
 80178b6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80178ba:	492a      	ldr	r1, [pc, #168]	; (8017964 <poll_tcp+0xc4>)
 80178bc:	482a      	ldr	r0, [pc, #168]	; (8017968 <poll_tcp+0xc8>)
 80178be:	f00e f92f 	bl	8025b20 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	785b      	ldrb	r3, [r3, #1]
 80178c6:	2b01      	cmp	r3, #1
 80178c8:	d104      	bne.n	80178d4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80178ca:	2101      	movs	r1, #1
 80178cc:	68f8      	ldr	r0, [r7, #12]
 80178ce:	f001 f817 	bl	8018900 <lwip_netconn_do_writemore>
 80178d2:	e016      	b.n	8017902 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	785b      	ldrb	r3, [r3, #1]
 80178d8:	2b04      	cmp	r3, #4
 80178da:	d112      	bne.n	8017902 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d00a      	beq.n	80178fa <poll_tcp+0x5a>
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178e8:	7a5b      	ldrb	r3, [r3, #9]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d005      	beq.n	80178fa <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178f2:	7a5a      	ldrb	r2, [r3, #9]
 80178f4:	3a01      	subs	r2, #1
 80178f6:	b2d2      	uxtb	r2, r2
 80178f8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80178fa:	2101      	movs	r1, #1
 80178fc:	68f8      	ldr	r0, [r7, #12]
 80178fe:	f000 fc17 	bl	8018130 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	7f1b      	ldrb	r3, [r3, #28]
 8017906:	f003 0310 	and.w	r3, r3, #16
 801790a:	2b00      	cmp	r3, #0
 801790c:	d022      	beq.n	8017954 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	685b      	ldr	r3, [r3, #4]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d01e      	beq.n	8017954 <poll_tcp+0xb4>
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	685b      	ldr	r3, [r3, #4]
 801791a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801791e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8017922:	4293      	cmp	r3, r2
 8017924:	d916      	bls.n	8017954 <poll_tcp+0xb4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	685b      	ldr	r3, [r3, #4]
 801792a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801792e:	2b04      	cmp	r3, #4
 8017930:	d810      	bhi.n	8017954 <poll_tcp+0xb4>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	7f1b      	ldrb	r3, [r3, #28]
 8017936:	f023 0310 	bic.w	r3, r3, #16
 801793a:	b2da      	uxtb	r2, r3
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017944:	2b00      	cmp	r3, #0
 8017946:	d005      	beq.n	8017954 <poll_tcp+0xb4>
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801794c:	2200      	movs	r2, #0
 801794e:	2102      	movs	r1, #2
 8017950:	68f8      	ldr	r0, [r7, #12]
 8017952:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8017954:	2300      	movs	r3, #0
}
 8017956:	4618      	mov	r0, r3
 8017958:	3710      	adds	r7, #16
 801795a:	46bd      	mov	sp, r7
 801795c:	bd80      	pop	{r7, pc}
 801795e:	bf00      	nop
 8017960:	08026994 	.word	0x08026994
 8017964:	08026ab8 	.word	0x08026ab8
 8017968:	080269ec 	.word	0x080269ec

0801796c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b086      	sub	sp, #24
 8017970:	af00      	add	r7, sp, #0
 8017972:	60f8      	str	r0, [r7, #12]
 8017974:	60b9      	str	r1, [r7, #8]
 8017976:	4613      	mov	r3, r2
 8017978:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801797e:	697b      	ldr	r3, [r7, #20]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d106      	bne.n	8017992 <sent_tcp+0x26>
 8017984:	4b21      	ldr	r3, [pc, #132]	; (8017a0c <sent_tcp+0xa0>)
 8017986:	f240 1261 	movw	r2, #353	; 0x161
 801798a:	4921      	ldr	r1, [pc, #132]	; (8017a10 <sent_tcp+0xa4>)
 801798c:	4821      	ldr	r0, [pc, #132]	; (8017a14 <sent_tcp+0xa8>)
 801798e:	f00e f8c7 	bl	8025b20 <iprintf>

  if (conn) {
 8017992:	697b      	ldr	r3, [r7, #20]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d033      	beq.n	8017a00 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8017998:	697b      	ldr	r3, [r7, #20]
 801799a:	785b      	ldrb	r3, [r3, #1]
 801799c:	2b01      	cmp	r3, #1
 801799e:	d104      	bne.n	80179aa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80179a0:	2101      	movs	r1, #1
 80179a2:	6978      	ldr	r0, [r7, #20]
 80179a4:	f000 ffac 	bl	8018900 <lwip_netconn_do_writemore>
 80179a8:	e007      	b.n	80179ba <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80179aa:	697b      	ldr	r3, [r7, #20]
 80179ac:	785b      	ldrb	r3, [r3, #1]
 80179ae:	2b04      	cmp	r3, #4
 80179b0:	d103      	bne.n	80179ba <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80179b2:	2101      	movs	r1, #1
 80179b4:	6978      	ldr	r0, [r7, #20]
 80179b6:	f000 fbbb 	bl	8018130 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80179ba:	697b      	ldr	r3, [r7, #20]
 80179bc:	685b      	ldr	r3, [r3, #4]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d01e      	beq.n	8017a00 <sent_tcp+0x94>
 80179c2:	697b      	ldr	r3, [r7, #20]
 80179c4:	685b      	ldr	r3, [r3, #4]
 80179c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80179ca:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80179ce:	4293      	cmp	r3, r2
 80179d0:	d916      	bls.n	8017a00 <sent_tcp+0x94>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	685b      	ldr	r3, [r3, #4]
 80179d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80179da:	2b04      	cmp	r3, #4
 80179dc:	d810      	bhi.n	8017a00 <sent_tcp+0x94>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80179de:	697b      	ldr	r3, [r7, #20]
 80179e0:	7f1b      	ldrb	r3, [r3, #28]
 80179e2:	f023 0310 	bic.w	r3, r3, #16
 80179e6:	b2da      	uxtb	r2, r3
 80179e8:	697b      	ldr	r3, [r7, #20]
 80179ea:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80179ec:	697b      	ldr	r3, [r7, #20]
 80179ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d005      	beq.n	8017a00 <sent_tcp+0x94>
 80179f4:	697b      	ldr	r3, [r7, #20]
 80179f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179f8:	88fa      	ldrh	r2, [r7, #6]
 80179fa:	2102      	movs	r1, #2
 80179fc:	6978      	ldr	r0, [r7, #20]
 80179fe:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8017a00:	2300      	movs	r3, #0
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	3718      	adds	r7, #24
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	08026994 	.word	0x08026994
 8017a10:	08026ab8 	.word	0x08026ab8
 8017a14:	080269ec 	.word	0x080269ec

08017a18 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b08a      	sub	sp, #40	; 0x28
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
 8017a20:	460b      	mov	r3, r1
 8017a22:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8017a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d106      	bne.n	8017a3c <err_tcp+0x24>
 8017a2e:	4b6c      	ldr	r3, [pc, #432]	; (8017be0 <err_tcp+0x1c8>)
 8017a30:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017a34:	496b      	ldr	r1, [pc, #428]	; (8017be4 <err_tcp+0x1cc>)
 8017a36:	486c      	ldr	r0, [pc, #432]	; (8017be8 <err_tcp+0x1d0>)
 8017a38:	f00e f872 	bl	8025b20 <iprintf>

  conn->pcb.tcp = NULL;
 8017a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a3e:	2200      	movs	r2, #0
 8017a40:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8017a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a44:	785b      	ldrb	r3, [r3, #1]
 8017a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8017a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8017a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a54:	2b04      	cmp	r3, #4
 8017a56:	d114      	bne.n	8017a82 <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8017a58:	2300      	movs	r3, #0
 8017a5a:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8017a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d018      	beq.n	8017a94 <err_tcp+0x7c>
 8017a62:	f00b fc39 	bl	80232d8 <sys_arch_protect>
 8017a66:	61f8      	str	r0, [r7, #28]
 8017a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a6a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017a6e:	f113 0f0c 	cmn.w	r3, #12
 8017a72:	db02      	blt.n	8017a7a <err_tcp+0x62>
 8017a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a76:	2200      	movs	r2, #0
 8017a78:	721a      	strb	r2, [r3, #8]
 8017a7a:	69f8      	ldr	r0, [r7, #28]
 8017a7c:	f00b fc3a 	bl	80232f4 <sys_arch_unprotect>
 8017a80:	e008      	b.n	8017a94 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8017a82:	f00b fc29 	bl	80232d8 <sys_arch_protect>
 8017a86:	61b8      	str	r0, [r7, #24]
 8017a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a8a:	78fa      	ldrb	r2, [r7, #3]
 8017a8c:	721a      	strb	r2, [r3, #8]
 8017a8e:	69b8      	ldr	r0, [r7, #24]
 8017a90:	f00b fc30 	bl	80232f4 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8017a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d005      	beq.n	8017aa8 <err_tcp+0x90>
 8017a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	2104      	movs	r1, #4
 8017aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017aa6:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d005      	beq.n	8017abc <err_tcp+0xa4>
 8017ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	2100      	movs	r1, #0
 8017ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017aba:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8017abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d005      	beq.n	8017ad0 <err_tcp+0xb8>
 8017ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ac8:	2200      	movs	r2, #0
 8017aca:	2102      	movs	r1, #2
 8017acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ace:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8017ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad2:	3310      	adds	r3, #16
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	f00b faef 	bl	80230b8 <sys_mbox_valid>
 8017ada:	4603      	mov	r3, r0
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d005      	beq.n	8017aec <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8017ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ae2:	3310      	adds	r3, #16
 8017ae4:	2100      	movs	r1, #0
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f00b fa71 	bl	8022fce <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8017aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aee:	3314      	adds	r3, #20
 8017af0:	4618      	mov	r0, r3
 8017af2:	f00b fae1 	bl	80230b8 <sys_mbox_valid>
 8017af6:	4603      	mov	r3, r0
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d005      	beq.n	8017b08 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8017afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017afe:	3314      	adds	r3, #20
 8017b00:	2100      	movs	r1, #0
 8017b02:	4618      	mov	r0, r3
 8017b04:	f00b fa63 	bl	8022fce <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8017b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017b0c:	2b01      	cmp	r3, #1
 8017b0e:	d007      	beq.n	8017b20 <err_tcp+0x108>
 8017b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017b14:	2b04      	cmp	r3, #4
 8017b16:	d003      	beq.n	8017b20 <err_tcp+0x108>
 8017b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017b1c:	2b03      	cmp	r3, #3
 8017b1e:	d14d      	bne.n	8017bbc <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8017b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b22:	7f1b      	ldrb	r3, [r3, #28]
 8017b24:	f003 0304 	and.w	r3, r3, #4
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	bf14      	ite	ne
 8017b2c:	2301      	movne	r3, #1
 8017b2e:	2300      	moveq	r3, #0
 8017b30:	b2db      	uxtb	r3, r3
 8017b32:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8017b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b36:	7f1b      	ldrb	r3, [r3, #28]
 8017b38:	f023 0304 	bic.w	r3, r3, #4
 8017b3c:	b2da      	uxtb	r2, r3
 8017b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b40:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8017b42:	697b      	ldr	r3, [r7, #20]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d145      	bne.n	8017bd4 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8017b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d106      	bne.n	8017b5e <err_tcp+0x146>
 8017b50:	4b23      	ldr	r3, [pc, #140]	; (8017be0 <err_tcp+0x1c8>)
 8017b52:	f240 12b3 	movw	r2, #435	; 0x1b3
 8017b56:	4925      	ldr	r1, [pc, #148]	; (8017bec <err_tcp+0x1d4>)
 8017b58:	4823      	ldr	r0, [pc, #140]	; (8017be8 <err_tcp+0x1d0>)
 8017b5a:	f00d ffe1 	bl	8025b20 <iprintf>
      conn->current_msg->err = err;
 8017b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b62:	78fa      	ldrb	r2, [r7, #3]
 8017b64:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8017b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	330c      	adds	r3, #12
 8017b6e:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8017b70:	6938      	ldr	r0, [r7, #16]
 8017b72:	f00b fb30 	bl	80231d6 <sys_sem_valid>
 8017b76:	4603      	mov	r3, r0
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d106      	bne.n	8017b8a <err_tcp+0x172>
 8017b7c:	4b18      	ldr	r3, [pc, #96]	; (8017be0 <err_tcp+0x1c8>)
 8017b7e:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017b82:	491b      	ldr	r1, [pc, #108]	; (8017bf0 <err_tcp+0x1d8>)
 8017b84:	4818      	ldr	r0, [pc, #96]	; (8017be8 <err_tcp+0x1d0>)
 8017b86:	f00d ffcb 	bl	8025b20 <iprintf>
      conn->current_msg = NULL;
 8017b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b8c:	2200      	movs	r2, #0
 8017b8e:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8017b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d00e      	beq.n	8017bb4 <err_tcp+0x19c>
 8017b96:	f00b fb9f 	bl	80232d8 <sys_arch_protect>
 8017b9a:	60f8      	str	r0, [r7, #12]
 8017b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b9e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017ba2:	f113 0f0c 	cmn.w	r3, #12
 8017ba6:	db02      	blt.n	8017bae <err_tcp+0x196>
 8017ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017baa:	78fa      	ldrb	r2, [r7, #3]
 8017bac:	721a      	strb	r2, [r3, #8]
 8017bae:	68f8      	ldr	r0, [r7, #12]
 8017bb0:	f00b fba0 	bl	80232f4 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8017bb4:	6938      	ldr	r0, [r7, #16]
 8017bb6:	f00b faf4 	bl	80231a2 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8017bba:	e00b      	b.n	8017bd4 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8017bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d008      	beq.n	8017bd6 <err_tcp+0x1be>
 8017bc4:	4b06      	ldr	r3, [pc, #24]	; (8017be0 <err_tcp+0x1c8>)
 8017bc6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8017bca:	490a      	ldr	r1, [pc, #40]	; (8017bf4 <err_tcp+0x1dc>)
 8017bcc:	4806      	ldr	r0, [pc, #24]	; (8017be8 <err_tcp+0x1d0>)
 8017bce:	f00d ffa7 	bl	8025b20 <iprintf>
  }
}
 8017bd2:	e000      	b.n	8017bd6 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8017bd4:	bf00      	nop
}
 8017bd6:	bf00      	nop
 8017bd8:	3728      	adds	r7, #40	; 0x28
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	bd80      	pop	{r7, pc}
 8017bde:	bf00      	nop
 8017be0:	08026994 	.word	0x08026994
 8017be4:	08026ab8 	.word	0x08026ab8
 8017be8:	080269ec 	.word	0x080269ec
 8017bec:	08026ac8 	.word	0x08026ac8
 8017bf0:	08026ae4 	.word	0x08026ae4
 8017bf4:	08026b00 	.word	0x08026b00

08017bf8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b084      	sub	sp, #16
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	685b      	ldr	r3, [r3, #4]
 8017c04:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8017c06:	6879      	ldr	r1, [r7, #4]
 8017c08:	68f8      	ldr	r0, [r7, #12]
 8017c0a:	f006 fceb 	bl	801e5e4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8017c0e:	490a      	ldr	r1, [pc, #40]	; (8017c38 <setup_tcp+0x40>)
 8017c10:	68f8      	ldr	r0, [r7, #12]
 8017c12:	f006 fcf9 	bl	801e608 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8017c16:	4909      	ldr	r1, [pc, #36]	; (8017c3c <setup_tcp+0x44>)
 8017c18:	68f8      	ldr	r0, [r7, #12]
 8017c1a:	f006 fd17 	bl	801e64c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8017c1e:	2202      	movs	r2, #2
 8017c20:	4907      	ldr	r1, [pc, #28]	; (8017c40 <setup_tcp+0x48>)
 8017c22:	68f8      	ldr	r0, [r7, #12]
 8017c24:	f006 fd6c 	bl	801e700 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8017c28:	4906      	ldr	r1, [pc, #24]	; (8017c44 <setup_tcp+0x4c>)
 8017c2a:	68f8      	ldr	r0, [r7, #12]
 8017c2c:	f006 fd2e 	bl	801e68c <tcp_err>
}
 8017c30:	bf00      	nop
 8017c32:	3710      	adds	r7, #16
 8017c34:	46bd      	mov	sp, r7
 8017c36:	bd80      	pop	{r7, pc}
 8017c38:	08017791 	.word	0x08017791
 8017c3c:	0801796d 	.word	0x0801796d
 8017c40:	080178a1 	.word	0x080178a1
 8017c44:	08017a19 	.word	0x08017a19

08017c48 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	b088      	sub	sp, #32
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	60f8      	str	r0, [r7, #12]
 8017c50:	60b9      	str	r1, [r7, #8]
 8017c52:	4613      	mov	r3, r2
 8017c54:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8017c5a:	69fb      	ldr	r3, [r7, #28]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d102      	bne.n	8017c66 <accept_function+0x1e>
    return ERR_VAL;
 8017c60:	f06f 0305 	mvn.w	r3, #5
 8017c64:	e08d      	b.n	8017d82 <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8017c66:	69fb      	ldr	r3, [r7, #28]
 8017c68:	3314      	adds	r3, #20
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f00b fa24 	bl	80230b8 <sys_mbox_valid>
 8017c70:	4603      	mov	r3, r0
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d102      	bne.n	8017c7c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8017c76:	f06f 0305 	mvn.w	r3, #5
 8017c7a:	e082      	b.n	8017d82 <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8017c7c:	68bb      	ldr	r3, [r7, #8]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d115      	bne.n	8017cae <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8017c82:	69fb      	ldr	r3, [r7, #28]
 8017c84:	3314      	adds	r3, #20
 8017c86:	4941      	ldr	r1, [pc, #260]	; (8017d8c <accept_function+0x144>)
 8017c88:	4618      	mov	r0, r3
 8017c8a:	f00b f9a0 	bl	8022fce <sys_mbox_trypost>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d109      	bne.n	8017ca8 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017c94:	69fb      	ldr	r3, [r7, #28]
 8017c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d005      	beq.n	8017ca8 <accept_function+0x60>
 8017c9c:	69fb      	ldr	r3, [r7, #28]
 8017c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	2100      	movs	r1, #0
 8017ca4:	69f8      	ldr	r0, [r7, #28]
 8017ca6:	4798      	blx	r3
    }
    return ERR_VAL;
 8017ca8:	f06f 0305 	mvn.w	r3, #5
 8017cac:	e069      	b.n	8017d82 <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8017cae:	69fb      	ldr	r3, [r7, #28]
 8017cb0:	781a      	ldrb	r2, [r3, #0]
 8017cb2:	69fb      	ldr	r3, [r7, #28]
 8017cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cb6:	4619      	mov	r1, r3
 8017cb8:	4610      	mov	r0, r2
 8017cba:	f000 f8ff 	bl	8017ebc <netconn_alloc>
 8017cbe:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8017cc0:	69bb      	ldr	r3, [r7, #24]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d115      	bne.n	8017cf2 <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8017cc6:	69fb      	ldr	r3, [r7, #28]
 8017cc8:	3314      	adds	r3, #20
 8017cca:	4930      	ldr	r1, [pc, #192]	; (8017d8c <accept_function+0x144>)
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f00b f97e 	bl	8022fce <sys_mbox_trypost>
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d109      	bne.n	8017cec <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017cd8:	69fb      	ldr	r3, [r7, #28]
 8017cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d005      	beq.n	8017cec <accept_function+0xa4>
 8017ce0:	69fb      	ldr	r3, [r7, #28]
 8017ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	2100      	movs	r1, #0
 8017ce8:	69f8      	ldr	r0, [r7, #28]
 8017cea:	4798      	blx	r3
    }
    return ERR_MEM;
 8017cec:	f04f 33ff 	mov.w	r3, #4294967295
 8017cf0:	e047      	b.n	8017d82 <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 8017cf2:	69bb      	ldr	r3, [r7, #24]
 8017cf4:	68ba      	ldr	r2, [r7, #8]
 8017cf6:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8017cf8:	69b8      	ldr	r0, [r7, #24]
 8017cfa:	f7ff ff7d 	bl	8017bf8 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 8017cfe:	69bb      	ldr	r3, [r7, #24]
 8017d00:	79fa      	ldrb	r2, [r7, #7]
 8017d02:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8017d04:	69fb      	ldr	r3, [r7, #28]
 8017d06:	3314      	adds	r3, #20
 8017d08:	69b9      	ldr	r1, [r7, #24]
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	f00b f95f 	bl	8022fce <sys_mbox_trypost>
 8017d10:	4603      	mov	r3, r0
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d02a      	beq.n	8017d6c <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8017d16:	69bb      	ldr	r3, [r7, #24]
 8017d18:	685b      	ldr	r3, [r3, #4]
 8017d1a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8017d1c:	2100      	movs	r1, #0
 8017d1e:	6978      	ldr	r0, [r7, #20]
 8017d20:	f006 fc60 	bl	801e5e4 <tcp_arg>
    tcp_recv(pcb, NULL);
 8017d24:	2100      	movs	r1, #0
 8017d26:	6978      	ldr	r0, [r7, #20]
 8017d28:	f006 fc6e 	bl	801e608 <tcp_recv>
    tcp_sent(pcb, NULL);
 8017d2c:	2100      	movs	r1, #0
 8017d2e:	6978      	ldr	r0, [r7, #20]
 8017d30:	f006 fc8c 	bl	801e64c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8017d34:	2200      	movs	r2, #0
 8017d36:	2100      	movs	r1, #0
 8017d38:	6978      	ldr	r0, [r7, #20]
 8017d3a:	f006 fce1 	bl	801e700 <tcp_poll>
    tcp_err(pcb, NULL);
 8017d3e:	2100      	movs	r1, #0
 8017d40:	6978      	ldr	r0, [r7, #20]
 8017d42:	f006 fca3 	bl	801e68c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8017d46:	69bb      	ldr	r3, [r7, #24]
 8017d48:	2200      	movs	r2, #0
 8017d4a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8017d4c:	69bb      	ldr	r3, [r7, #24]
 8017d4e:	3310      	adds	r3, #16
 8017d50:	4618      	mov	r0, r3
 8017d52:	f00b f915 	bl	8022f80 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8017d56:	69bb      	ldr	r3, [r7, #24]
 8017d58:	3310      	adds	r3, #16
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	f00b f9bd 	bl	80230da <sys_mbox_set_invalid>
    netconn_free(newconn);
 8017d60:	69b8      	ldr	r0, [r7, #24]
 8017d62:	f000 f91b 	bl	8017f9c <netconn_free>
    return ERR_MEM;
 8017d66:	f04f 33ff 	mov.w	r3, #4294967295
 8017d6a:	e00a      	b.n	8017d82 <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017d6c:	69fb      	ldr	r3, [r7, #28]
 8017d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d005      	beq.n	8017d80 <accept_function+0x138>
 8017d74:	69fb      	ldr	r3, [r7, #28]
 8017d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d78:	2200      	movs	r2, #0
 8017d7a:	2100      	movs	r1, #0
 8017d7c:	69f8      	ldr	r0, [r7, #28]
 8017d7e:	4798      	blx	r3
  }

  return ERR_OK;
 8017d80:	2300      	movs	r3, #0
}
 8017d82:	4618      	mov	r0, r3
 8017d84:	3720      	adds	r7, #32
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}
 8017d8a:	bf00      	nop
 8017d8c:	20004600 	.word	0x20004600

08017d90 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8017d90:	b590      	push	{r4, r7, lr}
 8017d92:	b085      	sub	sp, #20
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8017d98:	2300      	movs	r3, #0
 8017d9a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	685b      	ldr	r3, [r3, #4]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d006      	beq.n	8017db4 <pcb_new+0x24>
 8017da6:	4b2b      	ldr	r3, [pc, #172]	; (8017e54 <pcb_new+0xc4>)
 8017da8:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8017dac:	492a      	ldr	r1, [pc, #168]	; (8017e58 <pcb_new+0xc8>)
 8017dae:	482b      	ldr	r0, [pc, #172]	; (8017e5c <pcb_new+0xcc>)
 8017db0:	f00d feb6 	bl	8025b20 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	781b      	ldrb	r3, [r3, #0]
 8017dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017dbe:	2b10      	cmp	r3, #16
 8017dc0:	d022      	beq.n	8017e08 <pcb_new+0x78>
 8017dc2:	2b20      	cmp	r3, #32
 8017dc4:	d133      	bne.n	8017e2e <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	681c      	ldr	r4, [r3, #0]
 8017dca:	7bfb      	ldrb	r3, [r7, #15]
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f00a ffa2 	bl	8022d16 <udp_new_ip_type>
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	685b      	ldr	r3, [r3, #4]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d02a      	beq.n	8017e36 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	781b      	ldrb	r3, [r3, #0]
 8017de6:	2b22      	cmp	r3, #34	; 0x22
 8017de8:	d104      	bne.n	8017df4 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	685b      	ldr	r3, [r3, #4]
 8017df0:	2201      	movs	r2, #1
 8017df2:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	6858      	ldr	r0, [r3, #4]
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	461a      	mov	r2, r3
 8017e00:	4917      	ldr	r1, [pc, #92]	; (8017e60 <pcb_new+0xd0>)
 8017e02:	f00a ff2d 	bl	8022c60 <udp_recv>
    }
    break;
 8017e06:	e016      	b.n	8017e36 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	681c      	ldr	r4, [r3, #0]
 8017e0c:	7bfb      	ldrb	r3, [r7, #15]
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f006 fbda 	bl	801e5c8 <tcp_new_ip_type>
 8017e14:	4603      	mov	r3, r0
 8017e16:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	685b      	ldr	r3, [r3, #4]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d00b      	beq.n	8017e3a <pcb_new+0xaa>
      setup_tcp(msg->conn);
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	4618      	mov	r0, r3
 8017e28:	f7ff fee6 	bl	8017bf8 <setup_tcp>
    }
    break;
 8017e2c:	e005      	b.n	8017e3a <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	22fa      	movs	r2, #250	; 0xfa
 8017e32:	711a      	strb	r2, [r3, #4]
    return;
 8017e34:	e00a      	b.n	8017e4c <pcb_new+0xbc>
    break;
 8017e36:	bf00      	nop
 8017e38:	e000      	b.n	8017e3c <pcb_new+0xac>
    break;
 8017e3a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	685b      	ldr	r3, [r3, #4]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d102      	bne.n	8017e4c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	22ff      	movs	r2, #255	; 0xff
 8017e4a:	711a      	strb	r2, [r3, #4]
  }
}
 8017e4c:	3714      	adds	r7, #20
 8017e4e:	46bd      	mov	sp, r7
 8017e50:	bd90      	pop	{r4, r7, pc}
 8017e52:	bf00      	nop
 8017e54:	08026994 	.word	0x08026994
 8017e58:	08026b1c 	.word	0x08026b1c
 8017e5c:	080269ec 	.word	0x080269ec
 8017e60:	08017695 	.word	0x08017695

08017e64 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	b084      	sub	sp, #16
 8017e68:	af00      	add	r7, sp, #0
 8017e6a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	2200      	movs	r2, #0
 8017e74:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	685b      	ldr	r3, [r3, #4]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d102      	bne.n	8017e86 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8017e80:	68f8      	ldr	r0, [r7, #12]
 8017e82:	f7ff ff85 	bl	8017d90 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d012      	beq.n	8017eb4 <lwip_netconn_do_newconn+0x50>
 8017e8e:	f00b fa23 	bl	80232d8 <sys_arch_protect>
 8017e92:	60b8      	str	r0, [r7, #8]
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017e9c:	f113 0f0c 	cmn.w	r3, #12
 8017ea0:	db05      	blt.n	8017eae <lwip_netconn_do_newconn+0x4a>
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	68fa      	ldr	r2, [r7, #12]
 8017ea8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8017eac:	721a      	strb	r2, [r3, #8]
 8017eae:	68b8      	ldr	r0, [r7, #8]
 8017eb0:	f00b fa20 	bl	80232f4 <sys_arch_unprotect>
}
 8017eb4:	bf00      	nop
 8017eb6:	3710      	adds	r7, #16
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	bd80      	pop	{r7, pc}

08017ebc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8017ebc:	b580      	push	{r7, lr}
 8017ebe:	b084      	sub	sp, #16
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	6039      	str	r1, [r7, #0]
 8017ec6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8017ec8:	2007      	movs	r0, #7
 8017eca:	f004 f921 	bl	801c110 <memp_malloc>
 8017ece:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8017ed0:	68bb      	ldr	r3, [r7, #8]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d101      	bne.n	8017eda <netconn_alloc+0x1e>
    return NULL;
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	e055      	b.n	8017f86 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8017eda:	68bb      	ldr	r3, [r7, #8]
 8017edc:	2200      	movs	r2, #0
 8017ede:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8017ee0:	68bb      	ldr	r3, [r7, #8]
 8017ee2:	79fa      	ldrb	r2, [r7, #7]
 8017ee4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8017ee6:	68bb      	ldr	r3, [r7, #8]
 8017ee8:	2200      	movs	r2, #0
 8017eea:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8017eec:	79fb      	ldrb	r3, [r7, #7]
 8017eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017ef2:	2b10      	cmp	r3, #16
 8017ef4:	d004      	beq.n	8017f00 <netconn_alloc+0x44>
 8017ef6:	2b20      	cmp	r3, #32
 8017ef8:	d105      	bne.n	8017f06 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8017efa:	2306      	movs	r3, #6
 8017efc:	60fb      	str	r3, [r7, #12]
    break;
 8017efe:	e00a      	b.n	8017f16 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8017f00:	2306      	movs	r3, #6
 8017f02:	60fb      	str	r3, [r7, #12]
    break;
 8017f04:	e007      	b.n	8017f16 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8017f06:	4b22      	ldr	r3, [pc, #136]	; (8017f90 <netconn_alloc+0xd4>)
 8017f08:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017f0c:	4921      	ldr	r1, [pc, #132]	; (8017f94 <netconn_alloc+0xd8>)
 8017f0e:	4822      	ldr	r0, [pc, #136]	; (8017f98 <netconn_alloc+0xdc>)
 8017f10:	f00d fe06 	bl	8025b20 <iprintf>
    goto free_and_return;
 8017f14:	e032      	b.n	8017f7c <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8017f16:	68bb      	ldr	r3, [r7, #8]
 8017f18:	3310      	adds	r3, #16
 8017f1a:	68f9      	ldr	r1, [r7, #12]
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	f00b f811 	bl	8022f44 <sys_mbox_new>
 8017f22:	4603      	mov	r3, r0
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d128      	bne.n	8017f7a <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8017f28:	68bb      	ldr	r3, [r7, #8]
 8017f2a:	330c      	adds	r3, #12
 8017f2c:	2100      	movs	r1, #0
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f00b f8e0 	bl	80230f4 <sys_sem_new>
 8017f34:	4603      	mov	r3, r0
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d005      	beq.n	8017f46 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8017f3a:	68bb      	ldr	r3, [r7, #8]
 8017f3c:	3310      	adds	r3, #16
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f00b f81e 	bl	8022f80 <sys_mbox_free>
    goto free_and_return;
 8017f44:	e01a      	b.n	8017f7c <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8017f46:	68bb      	ldr	r3, [r7, #8]
 8017f48:	3314      	adds	r3, #20
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	f00b f8c5 	bl	80230da <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8017f50:	68bb      	ldr	r3, [r7, #8]
 8017f52:	2200      	movs	r2, #0
 8017f54:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8017f56:	68bb      	ldr	r3, [r7, #8]
 8017f58:	f04f 32ff 	mov.w	r2, #4294967295
 8017f5c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8017f5e:	68bb      	ldr	r3, [r7, #8]
 8017f60:	683a      	ldr	r2, [r7, #0]
 8017f62:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8017f64:	68bb      	ldr	r3, [r7, #8]
 8017f66:	2200      	movs	r2, #0
 8017f68:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8017f6a:	68bb      	ldr	r3, [r7, #8]
 8017f6c:	2200      	movs	r2, #0
 8017f6e:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8017f70:	68bb      	ldr	r3, [r7, #8]
 8017f72:	2200      	movs	r2, #0
 8017f74:	771a      	strb	r2, [r3, #28]
  return conn;
 8017f76:	68bb      	ldr	r3, [r7, #8]
 8017f78:	e005      	b.n	8017f86 <netconn_alloc+0xca>
    goto free_and_return;
 8017f7a:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8017f7c:	68b9      	ldr	r1, [r7, #8]
 8017f7e:	2007      	movs	r0, #7
 8017f80:	f004 f918 	bl	801c1b4 <memp_free>
  return NULL;
 8017f84:	2300      	movs	r3, #0
}
 8017f86:	4618      	mov	r0, r3
 8017f88:	3710      	adds	r7, #16
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	bd80      	pop	{r7, pc}
 8017f8e:	bf00      	nop
 8017f90:	08026994 	.word	0x08026994
 8017f94:	08026b3c 	.word	0x08026b3c
 8017f98:	080269ec 	.word	0x080269ec

08017f9c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b082      	sub	sp, #8
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	685b      	ldr	r3, [r3, #4]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d006      	beq.n	8017fba <netconn_free+0x1e>
 8017fac:	4b1b      	ldr	r3, [pc, #108]	; (801801c <netconn_free+0x80>)
 8017fae:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017fb2:	491b      	ldr	r1, [pc, #108]	; (8018020 <netconn_free+0x84>)
 8017fb4:	481b      	ldr	r0, [pc, #108]	; (8018024 <netconn_free+0x88>)
 8017fb6:	f00d fdb3 	bl	8025b20 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	3310      	adds	r3, #16
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f00b f87a 	bl	80230b8 <sys_mbox_valid>
 8017fc4:	4603      	mov	r3, r0
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d006      	beq.n	8017fd8 <netconn_free+0x3c>
 8017fca:	4b14      	ldr	r3, [pc, #80]	; (801801c <netconn_free+0x80>)
 8017fcc:	f240 22e2 	movw	r2, #738	; 0x2e2
 8017fd0:	4915      	ldr	r1, [pc, #84]	; (8018028 <netconn_free+0x8c>)
 8017fd2:	4814      	ldr	r0, [pc, #80]	; (8018024 <netconn_free+0x88>)
 8017fd4:	f00d fda4 	bl	8025b20 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	3314      	adds	r3, #20
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f00b f86b 	bl	80230b8 <sys_mbox_valid>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d006      	beq.n	8017ff6 <netconn_free+0x5a>
 8017fe8:	4b0c      	ldr	r3, [pc, #48]	; (801801c <netconn_free+0x80>)
 8017fea:	f240 22e5 	movw	r2, #741	; 0x2e5
 8017fee:	490f      	ldr	r1, [pc, #60]	; (801802c <netconn_free+0x90>)
 8017ff0:	480c      	ldr	r0, [pc, #48]	; (8018024 <netconn_free+0x88>)
 8017ff2:	f00d fd95 	bl	8025b20 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	330c      	adds	r3, #12
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f00b f8de 	bl	80231bc <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	330c      	adds	r3, #12
 8018004:	4618      	mov	r0, r3
 8018006:	f00b f8f7 	bl	80231f8 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 801800a:	6879      	ldr	r1, [r7, #4]
 801800c:	2007      	movs	r0, #7
 801800e:	f004 f8d1 	bl	801c1b4 <memp_free>
}
 8018012:	bf00      	nop
 8018014:	3708      	adds	r7, #8
 8018016:	46bd      	mov	sp, r7
 8018018:	bd80      	pop	{r7, pc}
 801801a:	bf00      	nop
 801801c:	08026994 	.word	0x08026994
 8018020:	08026b64 	.word	0x08026b64
 8018024:	080269ec 	.word	0x080269ec
 8018028:	08026b94 	.word	0x08026b94
 801802c:	08026bd0 	.word	0x08026bd0

08018030 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b086      	sub	sp, #24
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	3310      	adds	r3, #16
 801803c:	4618      	mov	r0, r3
 801803e:	f00b f83b 	bl	80230b8 <sys_mbox_valid>
 8018042:	4603      	mov	r3, r0
 8018044:	2b00      	cmp	r3, #0
 8018046:	d035      	beq.n	80180b4 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8018048:	e01e      	b.n	8018088 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	781b      	ldrb	r3, [r3, #0]
 801804e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018052:	2b10      	cmp	r3, #16
 8018054:	d114      	bne.n	8018080 <netconn_drain+0x50>
        if (mem != NULL) {
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d015      	beq.n	8018088 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	685b      	ldr	r3, [r3, #4]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d007      	beq.n	8018078 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	685a      	ldr	r2, [r3, #4]
 801806c:	697b      	ldr	r3, [r7, #20]
 801806e:	891b      	ldrh	r3, [r3, #8]
 8018070:	4619      	mov	r1, r3
 8018072:	4610      	mov	r0, r2
 8018074:	f005 fcd4 	bl	801da20 <tcp_recved>
          }
          pbuf_free(p);
 8018078:	6978      	ldr	r0, [r7, #20]
 801807a:	f004 fdf5 	bl	801cc68 <pbuf_free>
 801807e:	e003      	b.n	8018088 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	4618      	mov	r0, r3
 8018084:	f000 ff38 	bl	8018ef8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	3310      	adds	r3, #16
 801808c:	f107 020c 	add.w	r2, r7, #12
 8018090:	4611      	mov	r1, r2
 8018092:	4618      	mov	r0, r3
 8018094:	f00a fff4 	bl	8023080 <sys_arch_mbox_tryfetch>
 8018098:	4603      	mov	r3, r0
 801809a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801809e:	d1d4      	bne.n	801804a <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	3310      	adds	r3, #16
 80180a4:	4618      	mov	r0, r3
 80180a6:	f00a ff6b 	bl	8022f80 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	3310      	adds	r3, #16
 80180ae:	4618      	mov	r0, r3
 80180b0:	f00b f813 	bl	80230da <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	3314      	adds	r3, #20
 80180b8:	4618      	mov	r0, r3
 80180ba:	f00a fffd 	bl	80230b8 <sys_mbox_valid>
 80180be:	4603      	mov	r3, r0
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d02e      	beq.n	8018122 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80180c4:	e017      	b.n	80180f6 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	4a18      	ldr	r2, [pc, #96]	; (801812c <netconn_drain+0xfc>)
 80180ca:	4293      	cmp	r3, r2
 80180cc:	d013      	beq.n	80180f6 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 80180d2:	6938      	ldr	r0, [r7, #16]
 80180d4:	f7ff ffac 	bl	8018030 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 80180d8:	693b      	ldr	r3, [r7, #16]
 80180da:	685b      	ldr	r3, [r3, #4]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d007      	beq.n	80180f0 <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 80180e0:	693b      	ldr	r3, [r7, #16]
 80180e2:	685b      	ldr	r3, [r3, #4]
 80180e4:	4618      	mov	r0, r3
 80180e6:	f005 fb05 	bl	801d6f4 <tcp_abort>
          newconn->pcb.tcp = NULL;
 80180ea:	693b      	ldr	r3, [r7, #16]
 80180ec:	2200      	movs	r2, #0
 80180ee:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 80180f0:	6938      	ldr	r0, [r7, #16]
 80180f2:	f7ff ff53 	bl	8017f9c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	3314      	adds	r3, #20
 80180fa:	f107 020c 	add.w	r2, r7, #12
 80180fe:	4611      	mov	r1, r2
 8018100:	4618      	mov	r0, r3
 8018102:	f00a ffbd 	bl	8023080 <sys_arch_mbox_tryfetch>
 8018106:	4603      	mov	r3, r0
 8018108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801810c:	d1db      	bne.n	80180c6 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	3314      	adds	r3, #20
 8018112:	4618      	mov	r0, r3
 8018114:	f00a ff34 	bl	8022f80 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	3314      	adds	r3, #20
 801811c:	4618      	mov	r0, r3
 801811e:	f00a ffdc 	bl	80230da <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8018122:	bf00      	nop
 8018124:	3718      	adds	r7, #24
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}
 801812a:	bf00      	nop
 801812c:	20004600 	.word	0x20004600

08018130 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b088      	sub	sp, #32
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
 8018138:	460b      	mov	r3, r1
 801813a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 801813c:	2300      	movs	r3, #0
 801813e:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d106      	bne.n	8018154 <lwip_netconn_do_close_internal+0x24>
 8018146:	4baa      	ldr	r3, [pc, #680]	; (80183f0 <lwip_netconn_do_close_internal+0x2c0>)
 8018148:	f240 3243 	movw	r2, #835	; 0x343
 801814c:	49a9      	ldr	r1, [pc, #676]	; (80183f4 <lwip_netconn_do_close_internal+0x2c4>)
 801814e:	48aa      	ldr	r0, [pc, #680]	; (80183f8 <lwip_netconn_do_close_internal+0x2c8>)
 8018150:	f00d fce6 	bl	8025b20 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	781b      	ldrb	r3, [r3, #0]
 8018158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801815c:	2b10      	cmp	r3, #16
 801815e:	d006      	beq.n	801816e <lwip_netconn_do_close_internal+0x3e>
 8018160:	4ba3      	ldr	r3, [pc, #652]	; (80183f0 <lwip_netconn_do_close_internal+0x2c0>)
 8018162:	f44f 7251 	mov.w	r2, #836	; 0x344
 8018166:	49a5      	ldr	r1, [pc, #660]	; (80183fc <lwip_netconn_do_close_internal+0x2cc>)
 8018168:	48a3      	ldr	r0, [pc, #652]	; (80183f8 <lwip_netconn_do_close_internal+0x2c8>)
 801816a:	f00d fcd9 	bl	8025b20 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	785b      	ldrb	r3, [r3, #1]
 8018172:	2b04      	cmp	r3, #4
 8018174:	d006      	beq.n	8018184 <lwip_netconn_do_close_internal+0x54>
 8018176:	4b9e      	ldr	r3, [pc, #632]	; (80183f0 <lwip_netconn_do_close_internal+0x2c0>)
 8018178:	f240 3245 	movw	r2, #837	; 0x345
 801817c:	49a0      	ldr	r1, [pc, #640]	; (8018400 <lwip_netconn_do_close_internal+0x2d0>)
 801817e:	489e      	ldr	r0, [pc, #632]	; (80183f8 <lwip_netconn_do_close_internal+0x2c8>)
 8018180:	f00d fcce 	bl	8025b20 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	685b      	ldr	r3, [r3, #4]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d106      	bne.n	801819a <lwip_netconn_do_close_internal+0x6a>
 801818c:	4b98      	ldr	r3, [pc, #608]	; (80183f0 <lwip_netconn_do_close_internal+0x2c0>)
 801818e:	f240 3246 	movw	r2, #838	; 0x346
 8018192:	499c      	ldr	r1, [pc, #624]	; (8018404 <lwip_netconn_do_close_internal+0x2d4>)
 8018194:	4898      	ldr	r0, [pc, #608]	; (80183f8 <lwip_netconn_do_close_internal+0x2c8>)
 8018196:	f00d fcc3 	bl	8025b20 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d106      	bne.n	80181b0 <lwip_netconn_do_close_internal+0x80>
 80181a2:	4b93      	ldr	r3, [pc, #588]	; (80183f0 <lwip_netconn_do_close_internal+0x2c0>)
 80181a4:	f240 3247 	movw	r2, #839	; 0x347
 80181a8:	4997      	ldr	r1, [pc, #604]	; (8018408 <lwip_netconn_do_close_internal+0x2d8>)
 80181aa:	4893      	ldr	r0, [pc, #588]	; (80183f8 <lwip_netconn_do_close_internal+0x2c8>)
 80181ac:	f00d fcb8 	bl	8025b20 <iprintf>

  tpcb = conn->pcb.tcp;
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	685b      	ldr	r3, [r3, #4]
 80181b4:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181ba:	7a1b      	ldrb	r3, [r3, #8]
 80181bc:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 80181be:	7dfb      	ldrb	r3, [r7, #23]
 80181c0:	f003 0301 	and.w	r3, r3, #1
 80181c4:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 80181c6:	7dfb      	ldrb	r3, [r7, #23]
 80181c8:	f003 0302 	and.w	r3, r3, #2
 80181cc:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80181ce:	7dfb      	ldrb	r3, [r7, #23]
 80181d0:	2b03      	cmp	r3, #3
 80181d2:	d102      	bne.n	80181da <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 80181d4:	2301      	movs	r3, #1
 80181d6:	77bb      	strb	r3, [r7, #30]
 80181d8:	e01f      	b.n	801821a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80181da:	7dbb      	ldrb	r3, [r7, #22]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d00e      	beq.n	80181fe <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80181e0:	69bb      	ldr	r3, [r7, #24]
 80181e2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80181e4:	2b05      	cmp	r3, #5
 80181e6:	d007      	beq.n	80181f8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80181e8:	69bb      	ldr	r3, [r7, #24]
 80181ea:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80181ec:	2b06      	cmp	r3, #6
 80181ee:	d003      	beq.n	80181f8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80181f0:	69bb      	ldr	r3, [r7, #24]
 80181f2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80181f4:	2b08      	cmp	r3, #8
 80181f6:	d102      	bne.n	80181fe <lwip_netconn_do_close_internal+0xce>
    close = 1;
 80181f8:	2301      	movs	r3, #1
 80181fa:	77bb      	strb	r3, [r7, #30]
 80181fc:	e00d      	b.n	801821a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80181fe:	7d7b      	ldrb	r3, [r7, #21]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d008      	beq.n	8018216 <lwip_netconn_do_close_internal+0xe6>
 8018204:	69bb      	ldr	r3, [r7, #24]
 8018206:	7e9b      	ldrb	r3, [r3, #26]
 8018208:	f003 0310 	and.w	r3, r3, #16
 801820c:	2b00      	cmp	r3, #0
 801820e:	d002      	beq.n	8018216 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8018210:	2301      	movs	r3, #1
 8018212:	77bb      	strb	r3, [r7, #30]
 8018214:	e001      	b.n	801821a <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8018216:	2300      	movs	r3, #0
 8018218:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 801821a:	7fbb      	ldrb	r3, [r7, #30]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d003      	beq.n	8018228 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8018220:	2100      	movs	r1, #0
 8018222:	69b8      	ldr	r0, [r7, #24]
 8018224:	f006 f9de 	bl	801e5e4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8018228:	69bb      	ldr	r3, [r7, #24]
 801822a:	7d1b      	ldrb	r3, [r3, #20]
 801822c:	2b01      	cmp	r3, #1
 801822e:	d104      	bne.n	801823a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8018230:	2100      	movs	r1, #0
 8018232:	69b8      	ldr	r0, [r7, #24]
 8018234:	f006 fa4c 	bl	801e6d0 <tcp_accept>
 8018238:	e01d      	b.n	8018276 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801823a:	7dbb      	ldrb	r3, [r7, #22]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d007      	beq.n	8018250 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8018240:	2100      	movs	r1, #0
 8018242:	69b8      	ldr	r0, [r7, #24]
 8018244:	f006 f9e0 	bl	801e608 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8018248:	2100      	movs	r1, #0
 801824a:	69b8      	ldr	r0, [r7, #24]
 801824c:	f006 fa40 	bl	801e6d0 <tcp_accept>
    }
    if (shut_tx) {
 8018250:	7d7b      	ldrb	r3, [r7, #21]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d003      	beq.n	801825e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8018256:	2100      	movs	r1, #0
 8018258:	69b8      	ldr	r0, [r7, #24]
 801825a:	f006 f9f7 	bl	801e64c <tcp_sent>
    }
    if (close) {
 801825e:	7fbb      	ldrb	r3, [r7, #30]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d008      	beq.n	8018276 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8018264:	2200      	movs	r2, #0
 8018266:	2100      	movs	r1, #0
 8018268:	69b8      	ldr	r0, [r7, #24]
 801826a:	f006 fa49 	bl	801e700 <tcp_poll>
      tcp_err(tpcb, NULL);
 801826e:	2100      	movs	r1, #0
 8018270:	69b8      	ldr	r0, [r7, #24]
 8018272:	f006 fa0b 	bl	801e68c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8018276:	7fbb      	ldrb	r3, [r7, #30]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d005      	beq.n	8018288 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 801827c:	69b8      	ldr	r0, [r7, #24]
 801827e:	f005 f927 	bl	801d4d0 <tcp_close>
 8018282:	4603      	mov	r3, r0
 8018284:	77fb      	strb	r3, [r7, #31]
 8018286:	e007      	b.n	8018298 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8018288:	7dbb      	ldrb	r3, [r7, #22]
 801828a:	7d7a      	ldrb	r2, [r7, #21]
 801828c:	4619      	mov	r1, r3
 801828e:	69b8      	ldr	r0, [r7, #24]
 8018290:	f005 f936 	bl	801d500 <tcp_shutdown>
 8018294:	4603      	mov	r3, r0
 8018296:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8018298:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d102      	bne.n	80182a6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80182a0:	2301      	movs	r3, #1
 80182a2:	777b      	strb	r3, [r7, #29]
 80182a4:	e016      	b.n	80182d4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80182a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80182aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182ae:	d10f      	bne.n	80182d0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182b4:	7a5b      	ldrb	r3, [r3, #9]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d10c      	bne.n	80182d4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80182ba:	2301      	movs	r3, #1
 80182bc:	777b      	strb	r3, [r7, #29]
        if (close) {
 80182be:	7fbb      	ldrb	r3, [r7, #30]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d007      	beq.n	80182d4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80182c4:	69b8      	ldr	r0, [r7, #24]
 80182c6:	f005 fa15 	bl	801d6f4 <tcp_abort>
          err = ERR_OK;
 80182ca:	2300      	movs	r3, #0
 80182cc:	77fb      	strb	r3, [r7, #31]
 80182ce:	e001      	b.n	80182d4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80182d0:	2301      	movs	r3, #1
 80182d2:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 80182d4:	7f7b      	ldrb	r3, [r7, #29]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d056      	beq.n	8018388 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	330c      	adds	r3, #12
 80182e2:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182e8:	7ffa      	ldrb	r2, [r7, #31]
 80182ea:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	2200      	movs	r2, #0
 80182f0:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	2200      	movs	r2, #0
 80182f6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80182f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d129      	bne.n	8018354 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8018300:	7fbb      	ldrb	r3, [r7, #30]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d00c      	beq.n	8018320 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	2200      	movs	r2, #0
 801830a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018310:	2b00      	cmp	r3, #0
 8018312:	d005      	beq.n	8018320 <lwip_netconn_do_close_internal+0x1f0>
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018318:	2200      	movs	r2, #0
 801831a:	2104      	movs	r1, #4
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	4798      	blx	r3
      }
      if (shut_rx) {
 8018320:	7dbb      	ldrb	r3, [r7, #22]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d009      	beq.n	801833a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801832a:	2b00      	cmp	r3, #0
 801832c:	d005      	beq.n	801833a <lwip_netconn_do_close_internal+0x20a>
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018332:	2200      	movs	r2, #0
 8018334:	2100      	movs	r1, #0
 8018336:	6878      	ldr	r0, [r7, #4]
 8018338:	4798      	blx	r3
      }
      if (shut_tx) {
 801833a:	7d7b      	ldrb	r3, [r7, #21]
 801833c:	2b00      	cmp	r3, #0
 801833e:	d009      	beq.n	8018354 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018344:	2b00      	cmp	r3, #0
 8018346:	d005      	beq.n	8018354 <lwip_netconn_do_close_internal+0x224>
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801834c:	2200      	movs	r2, #0
 801834e:	2102      	movs	r1, #2
 8018350:	6878      	ldr	r0, [r7, #4]
 8018352:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d00e      	beq.n	8018378 <lwip_netconn_do_close_internal+0x248>
 801835a:	f00a ffbd 	bl	80232d8 <sys_arch_protect>
 801835e:	60f8      	str	r0, [r7, #12]
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018366:	f113 0f0c 	cmn.w	r3, #12
 801836a:	db02      	blt.n	8018372 <lwip_netconn_do_close_internal+0x242>
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	7ffa      	ldrb	r2, [r7, #31]
 8018370:	721a      	strb	r2, [r3, #8]
 8018372:	68f8      	ldr	r0, [r7, #12]
 8018374:	f00a ffbe 	bl	80232f4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8018378:	78fb      	ldrb	r3, [r7, #3]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d002      	beq.n	8018384 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801837e:	6938      	ldr	r0, [r7, #16]
 8018380:	f00a ff0f 	bl	80231a2 <sys_sem_signal>
    }
    return ERR_OK;
 8018384:	2300      	movs	r3, #0
 8018386:	e02e      	b.n	80183e6 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 8018388:	7f7b      	ldrb	r3, [r7, #29]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d11e      	bne.n	80183cc <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801838e:	69bb      	ldr	r3, [r7, #24]
 8018390:	7d1b      	ldrb	r3, [r3, #20]
 8018392:	2b01      	cmp	r3, #1
 8018394:	d106      	bne.n	80183a4 <lwip_netconn_do_close_internal+0x274>
 8018396:	4b16      	ldr	r3, [pc, #88]	; (80183f0 <lwip_netconn_do_close_internal+0x2c0>)
 8018398:	f240 32e3 	movw	r2, #995	; 0x3e3
 801839c:	491b      	ldr	r1, [pc, #108]	; (801840c <lwip_netconn_do_close_internal+0x2dc>)
 801839e:	4816      	ldr	r0, [pc, #88]	; (80183f8 <lwip_netconn_do_close_internal+0x2c8>)
 80183a0:	f00d fbbe 	bl	8025b20 <iprintf>
    if (shut_tx) {
 80183a4:	7d7b      	ldrb	r3, [r7, #21]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d003      	beq.n	80183b2 <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 80183aa:	4919      	ldr	r1, [pc, #100]	; (8018410 <lwip_netconn_do_close_internal+0x2e0>)
 80183ac:	69b8      	ldr	r0, [r7, #24]
 80183ae:	f006 f94d 	bl	801e64c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80183b2:	2201      	movs	r2, #1
 80183b4:	4917      	ldr	r1, [pc, #92]	; (8018414 <lwip_netconn_do_close_internal+0x2e4>)
 80183b6:	69b8      	ldr	r0, [r7, #24]
 80183b8:	f006 f9a2 	bl	801e700 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80183bc:	4916      	ldr	r1, [pc, #88]	; (8018418 <lwip_netconn_do_close_internal+0x2e8>)
 80183be:	69b8      	ldr	r0, [r7, #24]
 80183c0:	f006 f964 	bl	801e68c <tcp_err>
    tcp_arg(tpcb, conn);
 80183c4:	6879      	ldr	r1, [r7, #4]
 80183c6:	69b8      	ldr	r0, [r7, #24]
 80183c8:	f006 f90c 	bl	801e5e4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80183cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d106      	bne.n	80183e2 <lwip_netconn_do_close_internal+0x2b2>
 80183d4:	4b06      	ldr	r3, [pc, #24]	; (80183f0 <lwip_netconn_do_close_internal+0x2c0>)
 80183d6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80183da:	4910      	ldr	r1, [pc, #64]	; (801841c <lwip_netconn_do_close_internal+0x2ec>)
 80183dc:	4806      	ldr	r0, [pc, #24]	; (80183f8 <lwip_netconn_do_close_internal+0x2c8>)
 80183de:	f00d fb9f 	bl	8025b20 <iprintf>
  return err;
 80183e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80183e6:	4618      	mov	r0, r3
 80183e8:	3720      	adds	r7, #32
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}
 80183ee:	bf00      	nop
 80183f0:	08026994 	.word	0x08026994
 80183f4:	08026c0c 	.word	0x08026c0c
 80183f8:	080269ec 	.word	0x080269ec
 80183fc:	08026c1c 	.word	0x08026c1c
 8018400:	08026c3c 	.word	0x08026c3c
 8018404:	08026c60 	.word	0x08026c60
 8018408:	08026ac8 	.word	0x08026ac8
 801840c:	08026c74 	.word	0x08026c74
 8018410:	0801796d 	.word	0x0801796d
 8018414:	080178a1 	.word	0x080178a1
 8018418:	08017a19 	.word	0x08017a19
 801841c:	08026c98 	.word	0x08026c98

08018420 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b086      	sub	sp, #24
 8018424:	af00      	add	r7, sp, #0
 8018426:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 801842c:	697b      	ldr	r3, [r7, #20]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	785b      	ldrb	r3, [r3, #1]
 8018432:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8018434:	7cfb      	ldrb	r3, [r7, #19]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d00d      	beq.n	8018456 <lwip_netconn_do_delconn+0x36>
 801843a:	697b      	ldr	r3, [r7, #20]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	781b      	ldrb	r3, [r3, #0]
 8018440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018444:	2b10      	cmp	r3, #16
 8018446:	d006      	beq.n	8018456 <lwip_netconn_do_delconn+0x36>
 8018448:	4b6f      	ldr	r3, [pc, #444]	; (8018608 <lwip_netconn_do_delconn+0x1e8>)
 801844a:	f240 4201 	movw	r2, #1025	; 0x401
 801844e:	496f      	ldr	r1, [pc, #444]	; (801860c <lwip_netconn_do_delconn+0x1ec>)
 8018450:	486f      	ldr	r0, [pc, #444]	; (8018610 <lwip_netconn_do_delconn+0x1f0>)
 8018452:	f00d fb65 	bl	8025b20 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8018456:	7cfb      	ldrb	r3, [r7, #19]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d005      	beq.n	8018468 <lwip_netconn_do_delconn+0x48>
 801845c:	7cfb      	ldrb	r3, [r7, #19]
 801845e:	2b02      	cmp	r3, #2
 8018460:	d002      	beq.n	8018468 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8018462:	7cfb      	ldrb	r3, [r7, #19]
 8018464:	2b03      	cmp	r3, #3
 8018466:	d109      	bne.n	801847c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8018468:	7cfb      	ldrb	r3, [r7, #19]
 801846a:	2b03      	cmp	r3, #3
 801846c:	d10a      	bne.n	8018484 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801846e:	697b      	ldr	r3, [r7, #20]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	7f1b      	ldrb	r3, [r3, #28]
 8018474:	f003 0304 	and.w	r3, r3, #4
 8018478:	2b00      	cmp	r3, #0
 801847a:	d103      	bne.n	8018484 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 801847c:	697b      	ldr	r3, [r7, #20]
 801847e:	22fb      	movs	r2, #251	; 0xfb
 8018480:	711a      	strb	r2, [r3, #4]
 8018482:	e09c      	b.n	80185be <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8018484:	7cfb      	ldrb	r3, [r7, #19]
 8018486:	2b03      	cmp	r3, #3
 8018488:	d10d      	bne.n	80184a6 <lwip_netconn_do_delconn+0x86>
 801848a:	697b      	ldr	r3, [r7, #20]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	7f1b      	ldrb	r3, [r3, #28]
 8018490:	f003 0304 	and.w	r3, r3, #4
 8018494:	2b00      	cmp	r3, #0
 8018496:	d106      	bne.n	80184a6 <lwip_netconn_do_delconn+0x86>
 8018498:	4b5b      	ldr	r3, [pc, #364]	; (8018608 <lwip_netconn_do_delconn+0x1e8>)
 801849a:	f240 421f 	movw	r2, #1055	; 0x41f
 801849e:	495d      	ldr	r1, [pc, #372]	; (8018614 <lwip_netconn_do_delconn+0x1f4>)
 80184a0:	485b      	ldr	r0, [pc, #364]	; (8018610 <lwip_netconn_do_delconn+0x1f0>)
 80184a2:	f00d fb3d 	bl	8025b20 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80184a6:	697b      	ldr	r3, [r7, #20]
 80184a8:	2200      	movs	r2, #0
 80184aa:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 80184ac:	697b      	ldr	r3, [r7, #20]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	4618      	mov	r0, r3
 80184b2:	f7ff fdbd 	bl	8018030 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 80184b6:	697b      	ldr	r3, [r7, #20]
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	685b      	ldr	r3, [r3, #4]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d064      	beq.n	801858a <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80184c0:	697b      	ldr	r3, [r7, #20]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	781b      	ldrb	r3, [r3, #0]
 80184c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80184ca:	2b10      	cmp	r3, #16
 80184cc:	d00e      	beq.n	80184ec <lwip_netconn_do_delconn+0xcc>
 80184ce:	2b20      	cmp	r3, #32
 80184d0:	d000      	beq.n	80184d4 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 80184d2:	e056      	b.n	8018582 <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 80184d4:	697b      	ldr	r3, [r7, #20]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	685b      	ldr	r3, [r3, #4]
 80184da:	2200      	movs	r2, #0
 80184dc:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 80184de:	697b      	ldr	r3, [r7, #20]
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	685b      	ldr	r3, [r3, #4]
 80184e4:	4618      	mov	r0, r3
 80184e6:	f00a fbcd 	bl	8022c84 <udp_remove>
        break;
 80184ea:	e04a      	b.n	8018582 <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80184ec:	697b      	ldr	r3, [r7, #20]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d104      	bne.n	8018500 <lwip_netconn_do_delconn+0xe0>
 80184f6:	697b      	ldr	r3, [r7, #20]
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	6a1b      	ldr	r3, [r3, #32]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d006      	beq.n	801850e <lwip_netconn_do_delconn+0xee>
 8018500:	4b41      	ldr	r3, [pc, #260]	; (8018608 <lwip_netconn_do_delconn+0x1e8>)
 8018502:	f240 4235 	movw	r2, #1077	; 0x435
 8018506:	4944      	ldr	r1, [pc, #272]	; (8018618 <lwip_netconn_do_delconn+0x1f8>)
 8018508:	4841      	ldr	r0, [pc, #260]	; (8018610 <lwip_netconn_do_delconn+0x1f0>)
 801850a:	f00d fb09 	bl	8025b20 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 801850e:	697b      	ldr	r3, [r7, #20]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	2204      	movs	r2, #4
 8018514:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8018516:	697b      	ldr	r3, [r7, #20]
 8018518:	2203      	movs	r2, #3
 801851a:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 801851c:	697b      	ldr	r3, [r7, #20]
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	697a      	ldr	r2, [r7, #20]
 8018522:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8018524:	697b      	ldr	r3, [r7, #20]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	2100      	movs	r1, #0
 801852a:	4618      	mov	r0, r3
 801852c:	f7ff fe00 	bl	8018130 <lwip_netconn_do_close_internal>
 8018530:	4603      	mov	r3, r0
 8018532:	2b00      	cmp	r3, #0
 8018534:	d064      	beq.n	8018600 <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8018536:	697b      	ldr	r3, [r7, #20]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	785b      	ldrb	r3, [r3, #1]
 801853c:	2b04      	cmp	r3, #4
 801853e:	d006      	beq.n	801854e <lwip_netconn_do_delconn+0x12e>
 8018540:	4b31      	ldr	r3, [pc, #196]	; (8018608 <lwip_netconn_do_delconn+0x1e8>)
 8018542:	f240 423b 	movw	r2, #1083	; 0x43b
 8018546:	4935      	ldr	r1, [pc, #212]	; (801861c <lwip_netconn_do_delconn+0x1fc>)
 8018548:	4831      	ldr	r0, [pc, #196]	; (8018610 <lwip_netconn_do_delconn+0x1f0>)
 801854a:	f00d fae9 	bl	8025b20 <iprintf>
          UNLOCK_TCPIP_CORE();
 801854e:	4834      	ldr	r0, [pc, #208]	; (8018620 <lwip_netconn_do_delconn+0x200>)
 8018550:	f00a fe97 	bl	8023282 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8018554:	697b      	ldr	r3, [r7, #20]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	330c      	adds	r3, #12
 801855a:	2100      	movs	r1, #0
 801855c:	4618      	mov	r0, r3
 801855e:	f00a fdef 	bl	8023140 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8018562:	482f      	ldr	r0, [pc, #188]	; (8018620 <lwip_netconn_do_delconn+0x200>)
 8018564:	f00a fe7e 	bl	8023264 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8018568:	697b      	ldr	r3, [r7, #20]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	785b      	ldrb	r3, [r3, #1]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d046      	beq.n	8018600 <lwip_netconn_do_delconn+0x1e0>
 8018572:	4b25      	ldr	r3, [pc, #148]	; (8018608 <lwip_netconn_do_delconn+0x1e8>)
 8018574:	f240 423f 	movw	r2, #1087	; 0x43f
 8018578:	4928      	ldr	r1, [pc, #160]	; (801861c <lwip_netconn_do_delconn+0x1fc>)
 801857a:	4825      	ldr	r0, [pc, #148]	; (8018610 <lwip_netconn_do_delconn+0x1f0>)
 801857c:	f00d fad0 	bl	8025b20 <iprintf>
        return;
 8018580:	e03e      	b.n	8018600 <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 8018582:	697b      	ldr	r3, [r7, #20]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	2200      	movs	r2, #0
 8018588:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801858a:	697b      	ldr	r3, [r7, #20]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018590:	2b00      	cmp	r3, #0
 8018592:	d007      	beq.n	80185a4 <lwip_netconn_do_delconn+0x184>
 8018594:	697b      	ldr	r3, [r7, #20]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801859a:	697a      	ldr	r2, [r7, #20]
 801859c:	6810      	ldr	r0, [r2, #0]
 801859e:	2200      	movs	r2, #0
 80185a0:	2100      	movs	r1, #0
 80185a2:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80185a4:	697b      	ldr	r3, [r7, #20]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d007      	beq.n	80185be <lwip_netconn_do_delconn+0x19e>
 80185ae:	697b      	ldr	r3, [r7, #20]
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185b4:	697a      	ldr	r2, [r7, #20]
 80185b6:	6810      	ldr	r0, [r2, #0]
 80185b8:	2200      	movs	r2, #0
 80185ba:	2102      	movs	r1, #2
 80185bc:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80185be:	697b      	ldr	r3, [r7, #20]
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	330c      	adds	r3, #12
 80185c4:	4618      	mov	r0, r3
 80185c6:	f00a fe06 	bl	80231d6 <sys_sem_valid>
 80185ca:	4603      	mov	r3, r0
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d018      	beq.n	8018602 <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 80185d0:	697b      	ldr	r3, [r7, #20]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d014      	beq.n	8018602 <lwip_netconn_do_delconn+0x1e2>
 80185d8:	f00a fe7e 	bl	80232d8 <sys_arch_protect>
 80185dc:	60f8      	str	r0, [r7, #12]
 80185de:	697b      	ldr	r3, [r7, #20]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80185e6:	f113 0f0c 	cmn.w	r3, #12
 80185ea:	db05      	blt.n	80185f8 <lwip_netconn_do_delconn+0x1d8>
 80185ec:	697b      	ldr	r3, [r7, #20]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	697a      	ldr	r2, [r7, #20]
 80185f2:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80185f6:	721a      	strb	r2, [r3, #8]
 80185f8:	68f8      	ldr	r0, [r7, #12]
 80185fa:	f00a fe7b 	bl	80232f4 <sys_arch_unprotect>
 80185fe:	e000      	b.n	8018602 <lwip_netconn_do_delconn+0x1e2>
        return;
 8018600:	bf00      	nop
  }
}
 8018602:	3718      	adds	r7, #24
 8018604:	46bd      	mov	sp, r7
 8018606:	bd80      	pop	{r7, pc}
 8018608:	08026994 	.word	0x08026994
 801860c:	08026ca8 	.word	0x08026ca8
 8018610:	080269ec 	.word	0x080269ec
 8018614:	08026cbc 	.word	0x08026cbc
 8018618:	08026cdc 	.word	0x08026cdc
 801861c:	08026cf8 	.word	0x08026cf8
 8018620:	20004604 	.word	0x20004604

08018624 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8018624:	b580      	push	{r7, lr}
 8018626:	b084      	sub	sp, #16
 8018628:	af00      	add	r7, sp, #0
 801862a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018638:	f113 0f0c 	cmn.w	r3, #12
 801863c:	da06      	bge.n	801864c <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 801863e:	68fb      	ldr	r3, [r7, #12]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	711a      	strb	r2, [r3, #4]
 801864a:	e02f      	b.n	80186ac <lwip_netconn_do_bind+0x88>
  } else {
    msg->err = ERR_VAL;
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	22fa      	movs	r2, #250	; 0xfa
 8018650:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	685b      	ldr	r3, [r3, #4]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d027      	beq.n	80186ac <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	781b      	ldrb	r3, [r3, #0]
 8018662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018666:	2b10      	cmp	r3, #16
 8018668:	d011      	beq.n	801868e <lwip_netconn_do_bind+0x6a>
 801866a:	2b20      	cmp	r3, #32
 801866c:	d000      	beq.n	8018670 <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 801866e:	e01d      	b.n	80186ac <lwip_netconn_do_bind+0x88>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	6858      	ldr	r0, [r3, #4]
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	6899      	ldr	r1, [r3, #8]
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	899b      	ldrh	r3, [r3, #12]
 801867e:	461a      	mov	r2, r3
 8018680:	f00a fa7e 	bl	8022b80 <udp_bind>
 8018684:	4603      	mov	r3, r0
 8018686:	461a      	mov	r2, r3
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	711a      	strb	r2, [r3, #4]
        break;
 801868c:	e00e      	b.n	80186ac <lwip_netconn_do_bind+0x88>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	6858      	ldr	r0, [r3, #4]
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	6899      	ldr	r1, [r3, #8]
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	899b      	ldrh	r3, [r3, #12]
 801869c:	461a      	mov	r2, r3
 801869e:	f005 f835 	bl	801d70c <tcp_bind>
 80186a2:	4603      	mov	r3, r0
 80186a4:	461a      	mov	r2, r3
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	711a      	strb	r2, [r3, #4]
        break;
 80186aa:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d012      	beq.n	80186da <lwip_netconn_do_bind+0xb6>
 80186b4:	f00a fe10 	bl	80232d8 <sys_arch_protect>
 80186b8:	60b8      	str	r0, [r7, #8]
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80186c2:	f113 0f0c 	cmn.w	r3, #12
 80186c6:	db05      	blt.n	80186d4 <lwip_netconn_do_bind+0xb0>
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	68fa      	ldr	r2, [r7, #12]
 80186ce:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80186d2:	721a      	strb	r2, [r3, #8]
 80186d4:	68b8      	ldr	r0, [r7, #8]
 80186d6:	f00a fe0d 	bl	80232f4 <sys_arch_unprotect>
}
 80186da:	bf00      	nop
 80186dc:	3710      	adds	r7, #16
 80186de:	46bd      	mov	sp, r7
 80186e0:	bd80      	pop	{r7, pc}
	...

080186e4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b088      	sub	sp, #32
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80186f0:	69fb      	ldr	r3, [r7, #28]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80186f8:	f113 0f0c 	cmn.w	r3, #12
 80186fc:	da06      	bge.n	801870c <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 80186fe:	69fb      	ldr	r3, [r7, #28]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018706:	69fb      	ldr	r3, [r7, #28]
 8018708:	711a      	strb	r2, [r3, #4]
 801870a:	e090      	b.n	801882e <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 801870c:	69fb      	ldr	r3, [r7, #28]
 801870e:	22f5      	movs	r2, #245	; 0xf5
 8018710:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8018712:	69fb      	ldr	r3, [r7, #28]
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	685b      	ldr	r3, [r3, #4]
 8018718:	2b00      	cmp	r3, #0
 801871a:	f000 8088 	beq.w	801882e <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801871e:	69fb      	ldr	r3, [r7, #28]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	781b      	ldrb	r3, [r3, #0]
 8018724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018728:	2b10      	cmp	r3, #16
 801872a:	d17d      	bne.n	8018828 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 801872c:	69fb      	ldr	r3, [r7, #28]
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	785b      	ldrb	r3, [r3, #1]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d16f      	bne.n	8018816 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8018736:	69fb      	ldr	r3, [r7, #28]
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	685b      	ldr	r3, [r3, #4]
 801873c:	7d1b      	ldrb	r3, [r3, #20]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d003      	beq.n	801874a <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 8018742:	69fb      	ldr	r3, [r7, #28]
 8018744:	22fa      	movs	r2, #250	; 0xfa
 8018746:	711a      	strb	r2, [r3, #4]
 8018748:	e071      	b.n	801882e <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 801874a:	23ff      	movs	r3, #255	; 0xff
 801874c:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 801874e:	69fb      	ldr	r3, [r7, #28]
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	685b      	ldr	r3, [r3, #4]
 8018754:	f107 020f 	add.w	r2, r7, #15
 8018758:	7ef9      	ldrb	r1, [r7, #27]
 801875a:	4618      	mov	r0, r3
 801875c:	f005 f878 	bl	801d850 <tcp_listen_with_backlog_and_err>
 8018760:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 8018762:	697b      	ldr	r3, [r7, #20]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d104      	bne.n	8018772 <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 8018768:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801876c:	69fb      	ldr	r3, [r7, #28]
 801876e:	711a      	strb	r2, [r3, #4]
 8018770:	e05d      	b.n	801882e <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8018772:	69fb      	ldr	r3, [r7, #28]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	3310      	adds	r3, #16
 8018778:	4618      	mov	r0, r3
 801877a:	f00a fc9d 	bl	80230b8 <sys_mbox_valid>
 801877e:	4603      	mov	r3, r0
 8018780:	2b00      	cmp	r3, #0
 8018782:	d00b      	beq.n	801879c <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 8018784:	69fb      	ldr	r3, [r7, #28]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	3310      	adds	r3, #16
 801878a:	4618      	mov	r0, r3
 801878c:	f00a fbf8 	bl	8022f80 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8018790:	69fb      	ldr	r3, [r7, #28]
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	3310      	adds	r3, #16
 8018796:	4618      	mov	r0, r3
 8018798:	f00a fc9f 	bl	80230da <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 801879c:	69fb      	ldr	r3, [r7, #28]
 801879e:	2200      	movs	r2, #0
 80187a0:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80187a2:	69fb      	ldr	r3, [r7, #28]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	3314      	adds	r3, #20
 80187a8:	4618      	mov	r0, r3
 80187aa:	f00a fc85 	bl	80230b8 <sys_mbox_valid>
 80187ae:	4603      	mov	r3, r0
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d10a      	bne.n	80187ca <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80187b4:	69fb      	ldr	r3, [r7, #28]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	3314      	adds	r3, #20
 80187ba:	2106      	movs	r1, #6
 80187bc:	4618      	mov	r0, r3
 80187be:	f00a fbc1 	bl	8022f44 <sys_mbox_new>
 80187c2:	4603      	mov	r3, r0
 80187c4:	461a      	mov	r2, r3
 80187c6:	69fb      	ldr	r3, [r7, #28]
 80187c8:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 80187ca:	69fb      	ldr	r3, [r7, #28]
 80187cc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d118      	bne.n	8018806 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 80187d4:	69fb      	ldr	r3, [r7, #28]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	2202      	movs	r2, #2
 80187da:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 80187dc:	69fb      	ldr	r3, [r7, #28]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	697a      	ldr	r2, [r7, #20]
 80187e2:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80187e4:	69fb      	ldr	r3, [r7, #28]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	685a      	ldr	r2, [r3, #4]
 80187ea:	69fb      	ldr	r3, [r7, #28]
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	4619      	mov	r1, r3
 80187f0:	4610      	mov	r0, r2
 80187f2:	f005 fef7 	bl	801e5e4 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 80187f6:	69fb      	ldr	r3, [r7, #28]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	685b      	ldr	r3, [r3, #4]
 80187fc:	4919      	ldr	r1, [pc, #100]	; (8018864 <lwip_netconn_do_listen+0x180>)
 80187fe:	4618      	mov	r0, r3
 8018800:	f005 ff66 	bl	801e6d0 <tcp_accept>
 8018804:	e013      	b.n	801882e <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 8018806:	6978      	ldr	r0, [r7, #20]
 8018808:	f004 fe62 	bl	801d4d0 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 801880c:	69fb      	ldr	r3, [r7, #28]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	2200      	movs	r2, #0
 8018812:	605a      	str	r2, [r3, #4]
 8018814:	e00b      	b.n	801882e <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8018816:	69fb      	ldr	r3, [r7, #28]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	785b      	ldrb	r3, [r3, #1]
 801881c:	2b02      	cmp	r3, #2
 801881e:	d106      	bne.n	801882e <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 8018820:	69fb      	ldr	r3, [r7, #28]
 8018822:	2200      	movs	r2, #0
 8018824:	711a      	strb	r2, [r3, #4]
 8018826:	e002      	b.n	801882e <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 8018828:	69fb      	ldr	r3, [r7, #28]
 801882a:	22f0      	movs	r2, #240	; 0xf0
 801882c:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 801882e:	69fb      	ldr	r3, [r7, #28]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d012      	beq.n	801885c <lwip_netconn_do_listen+0x178>
 8018836:	f00a fd4f 	bl	80232d8 <sys_arch_protect>
 801883a:	6138      	str	r0, [r7, #16]
 801883c:	69fb      	ldr	r3, [r7, #28]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018844:	f113 0f0c 	cmn.w	r3, #12
 8018848:	db05      	blt.n	8018856 <lwip_netconn_do_listen+0x172>
 801884a:	69fb      	ldr	r3, [r7, #28]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	69fa      	ldr	r2, [r7, #28]
 8018850:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018854:	721a      	strb	r2, [r3, #8]
 8018856:	6938      	ldr	r0, [r7, #16]
 8018858:	f00a fd4c 	bl	80232f4 <sys_arch_unprotect>
}
 801885c:	bf00      	nop
 801885e:	3720      	adds	r7, #32
 8018860:	46bd      	mov	sp, r7
 8018862:	bd80      	pop	{r7, pc}
 8018864:	08017c49 	.word	0x08017c49

08018868 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b086      	sub	sp, #24
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8018874:	693b      	ldr	r3, [r7, #16]
 8018876:	2200      	movs	r2, #0
 8018878:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 801887a:	693b      	ldr	r3, [r7, #16]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	685b      	ldr	r3, [r3, #4]
 8018880:	2b00      	cmp	r3, #0
 8018882:	d022      	beq.n	80188ca <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8018884:	693b      	ldr	r3, [r7, #16]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	781b      	ldrb	r3, [r3, #0]
 801888a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801888e:	2b10      	cmp	r3, #16
 8018890:	d11b      	bne.n	80188ca <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 8018892:	693b      	ldr	r3, [r7, #16]
 8018894:	689b      	ldr	r3, [r3, #8]
 8018896:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8018898:	697b      	ldr	r3, [r7, #20]
 801889a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801889e:	d202      	bcs.n	80188a6 <lwip_netconn_do_recv+0x3e>
 80188a0:	697b      	ldr	r3, [r7, #20]
 80188a2:	b29b      	uxth	r3, r3
 80188a4:	e001      	b.n	80188aa <lwip_netconn_do_recv+0x42>
 80188a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80188aa:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80188ac:	693b      	ldr	r3, [r7, #16]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	685b      	ldr	r3, [r3, #4]
 80188b2:	89fa      	ldrh	r2, [r7, #14]
 80188b4:	4611      	mov	r1, r2
 80188b6:	4618      	mov	r0, r3
 80188b8:	f005 f8b2 	bl	801da20 <tcp_recved>
        remaining -= recved;
 80188bc:	89fb      	ldrh	r3, [r7, #14]
 80188be:	697a      	ldr	r2, [r7, #20]
 80188c0:	1ad3      	subs	r3, r2, r3
 80188c2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80188c4:	697b      	ldr	r3, [r7, #20]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d1e6      	bne.n	8018898 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80188ca:	693b      	ldr	r3, [r7, #16]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d012      	beq.n	80188f8 <lwip_netconn_do_recv+0x90>
 80188d2:	f00a fd01 	bl	80232d8 <sys_arch_protect>
 80188d6:	60b8      	str	r0, [r7, #8]
 80188d8:	693b      	ldr	r3, [r7, #16]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80188e0:	f113 0f0c 	cmn.w	r3, #12
 80188e4:	db05      	blt.n	80188f2 <lwip_netconn_do_recv+0x8a>
 80188e6:	693b      	ldr	r3, [r7, #16]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	693a      	ldr	r2, [r7, #16]
 80188ec:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80188f0:	721a      	strb	r2, [r3, #8]
 80188f2:	68b8      	ldr	r0, [r7, #8]
 80188f4:	f00a fcfe 	bl	80232f4 <sys_arch_unprotect>
}
 80188f8:	bf00      	nop
 80188fa:	3718      	adds	r7, #24
 80188fc:	46bd      	mov	sp, r7
 80188fe:	bd80      	pop	{r7, pc}

08018900 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b08a      	sub	sp, #40	; 0x28
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
 8018908:	460b      	mov	r3, r1
 801890a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801890c:	2300      	movs	r3, #0
 801890e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d106      	bne.n	8018926 <lwip_netconn_do_writemore+0x26>
 8018918:	4ba3      	ldr	r3, [pc, #652]	; (8018ba8 <lwip_netconn_do_writemore+0x2a8>)
 801891a:	f240 52e3 	movw	r2, #1507	; 0x5e3
 801891e:	49a3      	ldr	r1, [pc, #652]	; (8018bac <lwip_netconn_do_writemore+0x2ac>)
 8018920:	48a3      	ldr	r0, [pc, #652]	; (8018bb0 <lwip_netconn_do_writemore+0x2b0>)
 8018922:	f00d f8fd 	bl	8025b20 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	785b      	ldrb	r3, [r3, #1]
 801892a:	2b01      	cmp	r3, #1
 801892c:	d006      	beq.n	801893c <lwip_netconn_do_writemore+0x3c>
 801892e:	4b9e      	ldr	r3, [pc, #632]	; (8018ba8 <lwip_netconn_do_writemore+0x2a8>)
 8018930:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8018934:	499f      	ldr	r1, [pc, #636]	; (8018bb4 <lwip_netconn_do_writemore+0x2b4>)
 8018936:	489e      	ldr	r0, [pc, #632]	; (8018bb0 <lwip_netconn_do_writemore+0x2b0>)
 8018938:	f00d f8f2 	bl	8025b20 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018940:	2b00      	cmp	r3, #0
 8018942:	d106      	bne.n	8018952 <lwip_netconn_do_writemore+0x52>
 8018944:	4b98      	ldr	r3, [pc, #608]	; (8018ba8 <lwip_netconn_do_writemore+0x2a8>)
 8018946:	f240 52e5 	movw	r2, #1509	; 0x5e5
 801894a:	499b      	ldr	r1, [pc, #620]	; (8018bb8 <lwip_netconn_do_writemore+0x2b8>)
 801894c:	4898      	ldr	r0, [pc, #608]	; (8018bb0 <lwip_netconn_do_writemore+0x2b0>)
 801894e:	f00d f8e7 	bl	8025b20 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	685b      	ldr	r3, [r3, #4]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d106      	bne.n	8018968 <lwip_netconn_do_writemore+0x68>
 801895a:	4b93      	ldr	r3, [pc, #588]	; (8018ba8 <lwip_netconn_do_writemore+0x2a8>)
 801895c:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8018960:	4996      	ldr	r1, [pc, #600]	; (8018bbc <lwip_netconn_do_writemore+0x2bc>)
 8018962:	4893      	ldr	r0, [pc, #588]	; (8018bb0 <lwip_netconn_do_writemore+0x2b0>)
 8018964:	f00d f8dc 	bl	8025b20 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	6a1a      	ldr	r2, [r3, #32]
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018970:	68db      	ldr	r3, [r3, #12]
 8018972:	429a      	cmp	r2, r3
 8018974:	d306      	bcc.n	8018984 <lwip_netconn_do_writemore+0x84>
 8018976:	4b8c      	ldr	r3, [pc, #560]	; (8018ba8 <lwip_netconn_do_writemore+0x2a8>)
 8018978:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 801897c:	4990      	ldr	r1, [pc, #576]	; (8018bc0 <lwip_netconn_do_writemore+0x2c0>)
 801897e:	488c      	ldr	r0, [pc, #560]	; (8018bb0 <lwip_netconn_do_writemore+0x2b0>)
 8018980:	f00d f8ce 	bl	8025b20 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018988:	7c1b      	ldrb	r3, [r3, #16]
 801898a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	7f1b      	ldrb	r3, [r3, #28]
 8018992:	f003 0302 	and.w	r3, r3, #2
 8018996:	2b00      	cmp	r3, #0
 8018998:	d105      	bne.n	80189a6 <lwip_netconn_do_writemore+0xa6>
 801899a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801899e:	f003 0304 	and.w	r3, r3, #4
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d001      	beq.n	80189aa <lwip_netconn_do_writemore+0xaa>
 80189a6:	2301      	movs	r3, #1
 80189a8:	e000      	b.n	80189ac <lwip_netconn_do_writemore+0xac>
 80189aa:	2300      	movs	r3, #0
 80189ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189b4:	689a      	ldr	r2, [r3, #8]
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	6a1b      	ldr	r3, [r3, #32]
 80189ba:	4413      	add	r3, r2
 80189bc:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c2:	68da      	ldr	r2, [r3, #12]
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	6a1b      	ldr	r3, [r3, #32]
 80189c8:	1ad3      	subs	r3, r2, r3
 80189ca:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 80189cc:	69bb      	ldr	r3, [r7, #24]
 80189ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80189d2:	d309      	bcc.n	80189e8 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 80189d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189d8:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 80189da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80189de:	f043 0302 	orr.w	r3, r3, #2
 80189e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80189e6:	e001      	b.n	80189ec <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 80189e8:	69bb      	ldr	r3, [r7, #24]
 80189ea:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	685b      	ldr	r3, [r3, #4]
 80189f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80189f4:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 80189f6:	8afa      	ldrh	r2, [r7, #22]
 80189f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80189fa:	429a      	cmp	r2, r3
 80189fc:	d212      	bcs.n	8018a24 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 80189fe:	8afb      	ldrh	r3, [r7, #22]
 8018a00:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 8018a02:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d006      	beq.n	8018a18 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 8018a0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d109      	bne.n	8018a24 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 8018a10:	23f9      	movs	r3, #249	; 0xf9
 8018a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8018a16:	e029      	b.n	8018a6c <lwip_netconn_do_writemore+0x16c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8018a18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018a1c:	f043 0302 	orr.w	r3, r3, #2
 8018a20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6a1a      	ldr	r2, [r3, #32]
 8018a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a2a:	441a      	add	r2, r3
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a30:	68db      	ldr	r3, [r3, #12]
 8018a32:	429a      	cmp	r2, r3
 8018a34:	d906      	bls.n	8018a44 <lwip_netconn_do_writemore+0x144>
 8018a36:	4b5c      	ldr	r3, [pc, #368]	; (8018ba8 <lwip_netconn_do_writemore+0x2a8>)
 8018a38:	f240 6213 	movw	r2, #1555	; 0x613
 8018a3c:	4961      	ldr	r1, [pc, #388]	; (8018bc4 <lwip_netconn_do_writemore+0x2c4>)
 8018a3e:	485c      	ldr	r0, [pc, #368]	; (8018bb0 <lwip_netconn_do_writemore+0x2b0>)
 8018a40:	f00d f86e 	bl	8025b20 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	6858      	ldr	r0, [r3, #4]
 8018a48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018a4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a4e:	69f9      	ldr	r1, [r7, #28]
 8018a50:	f008 fc08 	bl	8021264 <tcp_write>
 8018a54:	4603      	mov	r3, r0
 8018a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8018a5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d004      	beq.n	8018a6c <lwip_netconn_do_writemore+0x16c>
 8018a62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a6a:	d133      	bne.n	8018ad4 <lwip_netconn_do_writemore+0x1d4>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8018a6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d017      	beq.n	8018aa4 <lwip_netconn_do_writemore+0x1a4>
 8018a74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a7a:	68db      	ldr	r3, [r3, #12]
 8018a7c:	429a      	cmp	r2, r3
 8018a7e:	d211      	bcs.n	8018aa4 <lwip_netconn_do_writemore+0x1a4>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d005      	beq.n	8018a94 <lwip_netconn_do_writemore+0x194>
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a8e:	2103      	movs	r1, #3
 8018a90:	6878      	ldr	r0, [r7, #4]
 8018a92:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	7f1b      	ldrb	r3, [r3, #28]
 8018a98:	f043 0310 	orr.w	r3, r3, #16
 8018a9c:	b2da      	uxtb	r2, r3
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	771a      	strb	r2, [r3, #28]
 8018aa2:	e017      	b.n	8018ad4 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	685b      	ldr	r3, [r3, #4]
 8018aa8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018aac:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8018ab0:	4293      	cmp	r3, r2
 8018ab2:	d905      	bls.n	8018ac0 <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	685b      	ldr	r3, [r3, #4]
 8018ab8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8018abc:	2b04      	cmp	r3, #4
 8018abe:	d909      	bls.n	8018ad4 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d005      	beq.n	8018ad4 <lwip_netconn_do_writemore+0x1d4>
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018acc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018ace:	2103      	movs	r1, #3
 8018ad0:	6878      	ldr	r0, [r7, #4]
 8018ad2:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8018ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d134      	bne.n	8018b46 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	6a1a      	ldr	r2, [r3, #32]
 8018ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ae2:	441a      	add	r2, r3
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	6a1a      	ldr	r2, [r3, #32]
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018af0:	68db      	ldr	r3, [r3, #12]
 8018af2:	429a      	cmp	r2, r3
 8018af4:	d003      	beq.n	8018afe <lwip_netconn_do_writemore+0x1fe>
 8018af6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d007      	beq.n	8018b0e <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b02:	687a      	ldr	r2, [r7, #4]
 8018b04:	6a12      	ldr	r2, [r2, #32]
 8018b06:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8018b08:	2301      	movs	r3, #1
 8018b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	685b      	ldr	r3, [r3, #4]
 8018b12:	4618      	mov	r0, r3
 8018b14:	f009 f85c 	bl	8021bd0 <tcp_output>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8018b1c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018b20:	f113 0f0c 	cmn.w	r3, #12
 8018b24:	db04      	blt.n	8018b30 <lwip_netconn_do_writemore+0x230>
 8018b26:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018b2a:	f113 0f04 	cmn.w	r3, #4
 8018b2e:	d152      	bne.n	8018bd6 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8018b30:	7d7b      	ldrb	r3, [r7, #21]
 8018b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8018b36:	2301      	movs	r3, #1
 8018b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b40:	2200      	movs	r2, #0
 8018b42:	60da      	str	r2, [r3, #12]
 8018b44:	e047      	b.n	8018bd6 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 8018b46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b4e:	d13b      	bne.n	8018bc8 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	685b      	ldr	r3, [r3, #4]
 8018b54:	4618      	mov	r0, r3
 8018b56:	f009 f83b 	bl	8021bd0 <tcp_output>
 8018b5a:	4603      	mov	r3, r0
 8018b5c:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8018b5e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8018b62:	f113 0f0c 	cmn.w	r3, #12
 8018b66:	db04      	blt.n	8018b72 <lwip_netconn_do_writemore+0x272>
 8018b68:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8018b6c:	f113 0f04 	cmn.w	r3, #4
 8018b70:	d10a      	bne.n	8018b88 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8018b72:	7d3b      	ldrb	r3, [r7, #20]
 8018b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8018b78:	2301      	movs	r3, #1
 8018b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b82:	2200      	movs	r2, #0
 8018b84:	60da      	str	r2, [r3, #12]
 8018b86:	e026      	b.n	8018bd6 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 8018b88:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d022      	beq.n	8018bd6 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8018b90:	23f9      	movs	r3, #249	; 0xf9
 8018b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8018b96:	2301      	movs	r3, #1
 8018b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ba0:	2200      	movs	r2, #0
 8018ba2:	60da      	str	r2, [r3, #12]
 8018ba4:	e017      	b.n	8018bd6 <lwip_netconn_do_writemore+0x2d6>
 8018ba6:	bf00      	nop
 8018ba8:	08026994 	.word	0x08026994
 8018bac:	08026ab8 	.word	0x08026ab8
 8018bb0:	080269ec 	.word	0x080269ec
 8018bb4:	08026d98 	.word	0x08026d98
 8018bb8:	08026ac8 	.word	0x08026ac8
 8018bbc:	08026db8 	.word	0x08026db8
 8018bc0:	08026dd0 	.word	0x08026dd0
 8018bc4:	08026e04 	.word	0x08026e04
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8018bc8:	2301      	movs	r3, #1
 8018bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 8018bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d02c      	beq.n	8018c38 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	330c      	adds	r3, #12
 8018be6:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018bf0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	2200      	movs	r2, #0
 8018bfc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	2200      	movs	r2, #0
 8018c02:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d00f      	beq.n	8018c2a <lwip_netconn_do_writemore+0x32a>
 8018c0a:	f00a fb65 	bl	80232d8 <sys_arch_protect>
 8018c0e:	60f8      	str	r0, [r7, #12]
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018c16:	f113 0f0c 	cmn.w	r3, #12
 8018c1a:	db03      	blt.n	8018c24 <lwip_netconn_do_writemore+0x324>
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018c22:	721a      	strb	r2, [r3, #8]
 8018c24:	68f8      	ldr	r0, [r7, #12]
 8018c26:	f00a fb65 	bl	80232f4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8018c2a:	78fb      	ldrb	r3, [r7, #3]
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d006      	beq.n	8018c3e <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8018c30:	6938      	ldr	r0, [r7, #16]
 8018c32:	f00a fab6 	bl	80231a2 <sys_sem_signal>
 8018c36:	e002      	b.n	8018c3e <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8018c38:	f04f 33ff 	mov.w	r3, #4294967295
 8018c3c:	e000      	b.n	8018c40 <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 8018c3e:	2300      	movs	r3, #0
}
 8018c40:	4618      	mov	r0, r3
 8018c42:	3728      	adds	r7, #40	; 0x28
 8018c44:	46bd      	mov	sp, r7
 8018c46:	bd80      	pop	{r7, pc}

08018c48 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b084      	sub	sp, #16
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018c5c:	f113 0f0c 	cmn.w	r3, #12
 8018c60:	da06      	bge.n	8018c70 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	711a      	strb	r2, [r3, #4]
 8018c6e:	e072      	b.n	8018d56 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	781b      	ldrb	r3, [r3, #0]
 8018c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018c7a:	2b10      	cmp	r3, #16
 8018c7c:	d168      	bne.n	8018d50 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	785b      	ldrb	r3, [r3, #1]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d003      	beq.n	8018c90 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	22fb      	movs	r2, #251	; 0xfb
 8018c8c:	711a      	strb	r2, [r3, #4]
 8018c8e:	e062      	b.n	8018d56 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	685b      	ldr	r3, [r3, #4]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d056      	beq.n	8018d48 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	2201      	movs	r2, #1
 8018ca0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d104      	bne.n	8018cb6 <lwip_netconn_do_write+0x6e>
 8018cac:	68fb      	ldr	r3, [r7, #12]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	6a1b      	ldr	r3, [r3, #32]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d006      	beq.n	8018cc4 <lwip_netconn_do_write+0x7c>
 8018cb6:	4b36      	ldr	r3, [pc, #216]	; (8018d90 <lwip_netconn_do_write+0x148>)
 8018cb8:	f240 6283 	movw	r2, #1667	; 0x683
 8018cbc:	4935      	ldr	r1, [pc, #212]	; (8018d94 <lwip_netconn_do_write+0x14c>)
 8018cbe:	4836      	ldr	r0, [pc, #216]	; (8018d98 <lwip_netconn_do_write+0x150>)
 8018cc0:	f00c ff2e 	bl	8025b20 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8018cc4:	68fb      	ldr	r3, [r7, #12]
 8018cc6:	68db      	ldr	r3, [r3, #12]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d106      	bne.n	8018cda <lwip_netconn_do_write+0x92>
 8018ccc:	4b30      	ldr	r3, [pc, #192]	; (8018d90 <lwip_netconn_do_write+0x148>)
 8018cce:	f240 6284 	movw	r2, #1668	; 0x684
 8018cd2:	4932      	ldr	r1, [pc, #200]	; (8018d9c <lwip_netconn_do_write+0x154>)
 8018cd4:	4830      	ldr	r0, [pc, #192]	; (8018d98 <lwip_netconn_do_write+0x150>)
 8018cd6:	f00c ff23 	bl	8025b20 <iprintf>
        msg->conn->current_msg = msg;
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	68fa      	ldr	r2, [r7, #12]
 8018ce0:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	2200      	movs	r2, #0
 8018ce8:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	2100      	movs	r1, #0
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	f7ff fe05 	bl	8018900 <lwip_netconn_do_writemore>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d044      	beq.n	8018d86 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	785b      	ldrb	r3, [r3, #1]
 8018d02:	2b01      	cmp	r3, #1
 8018d04:	d006      	beq.n	8018d14 <lwip_netconn_do_write+0xcc>
 8018d06:	4b22      	ldr	r3, [pc, #136]	; (8018d90 <lwip_netconn_do_write+0x148>)
 8018d08:	f240 6289 	movw	r2, #1673	; 0x689
 8018d0c:	4924      	ldr	r1, [pc, #144]	; (8018da0 <lwip_netconn_do_write+0x158>)
 8018d0e:	4822      	ldr	r0, [pc, #136]	; (8018d98 <lwip_netconn_do_write+0x150>)
 8018d10:	f00c ff06 	bl	8025b20 <iprintf>
          UNLOCK_TCPIP_CORE();
 8018d14:	4823      	ldr	r0, [pc, #140]	; (8018da4 <lwip_netconn_do_write+0x15c>)
 8018d16:	f00a fab4 	bl	8023282 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	330c      	adds	r3, #12
 8018d20:	2100      	movs	r1, #0
 8018d22:	4618      	mov	r0, r3
 8018d24:	f00a fa0c 	bl	8023140 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8018d28:	481e      	ldr	r0, [pc, #120]	; (8018da4 <lwip_netconn_do_write+0x15c>)
 8018d2a:	f00a fa9b 	bl	8023264 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	785b      	ldrb	r3, [r3, #1]
 8018d34:	2b01      	cmp	r3, #1
 8018d36:	d126      	bne.n	8018d86 <lwip_netconn_do_write+0x13e>
 8018d38:	4b15      	ldr	r3, [pc, #84]	; (8018d90 <lwip_netconn_do_write+0x148>)
 8018d3a:	f240 628d 	movw	r2, #1677	; 0x68d
 8018d3e:	4918      	ldr	r1, [pc, #96]	; (8018da0 <lwip_netconn_do_write+0x158>)
 8018d40:	4815      	ldr	r0, [pc, #84]	; (8018d98 <lwip_netconn_do_write+0x150>)
 8018d42:	f00c feed 	bl	8025b20 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8018d46:	e01e      	b.n	8018d86 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	22f5      	movs	r2, #245	; 0xf5
 8018d4c:	711a      	strb	r2, [r3, #4]
 8018d4e:	e002      	b.n	8018d56 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	22fa      	movs	r2, #250	; 0xfa
 8018d54:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d014      	beq.n	8018d88 <lwip_netconn_do_write+0x140>
 8018d5e:	f00a fabb 	bl	80232d8 <sys_arch_protect>
 8018d62:	60b8      	str	r0, [r7, #8]
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018d6c:	f113 0f0c 	cmn.w	r3, #12
 8018d70:	db05      	blt.n	8018d7e <lwip_netconn_do_write+0x136>
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	68fa      	ldr	r2, [r7, #12]
 8018d78:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018d7c:	721a      	strb	r2, [r3, #8]
 8018d7e:	68b8      	ldr	r0, [r7, #8]
 8018d80:	f00a fab8 	bl	80232f4 <sys_arch_unprotect>
 8018d84:	e000      	b.n	8018d88 <lwip_netconn_do_write+0x140>
        return;
 8018d86:	bf00      	nop
}
 8018d88:	3710      	adds	r7, #16
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bd80      	pop	{r7, pc}
 8018d8e:	bf00      	nop
 8018d90:	08026994 	.word	0x08026994
 8018d94:	08026cdc 	.word	0x08026cdc
 8018d98:	080269ec 	.word	0x080269ec
 8018d9c:	08026e30 	.word	0x08026e30
 8018da0:	08026cf8 	.word	0x08026cf8
 8018da4:	20004604 	.word	0x20004604

08018da8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b086      	sub	sp, #24
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8018db4:	697b      	ldr	r3, [r7, #20]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	785b      	ldrb	r3, [r3, #1]
 8018dba:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8018dbc:	697b      	ldr	r3, [r7, #20]
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	685b      	ldr	r3, [r3, #4]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d06e      	beq.n	8018ea4 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8018dc6:	697b      	ldr	r3, [r7, #20]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	781b      	ldrb	r3, [r3, #0]
 8018dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8018dd0:	2b10      	cmp	r3, #16
 8018dd2:	d167      	bne.n	8018ea4 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8018dd8:	2b03      	cmp	r3, #3
 8018dda:	d002      	beq.n	8018de2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8018ddc:	7cfb      	ldrb	r3, [r7, #19]
 8018dde:	2b02      	cmp	r3, #2
 8018de0:	d060      	beq.n	8018ea4 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8018de2:	7cfb      	ldrb	r3, [r7, #19]
 8018de4:	2b03      	cmp	r3, #3
 8018de6:	d103      	bne.n	8018df0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8018de8:	697b      	ldr	r3, [r7, #20]
 8018dea:	22f5      	movs	r2, #245	; 0xf5
 8018dec:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8018dee:	e05c      	b.n	8018eaa <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 8018df0:	7cfb      	ldrb	r3, [r7, #19]
 8018df2:	2b01      	cmp	r3, #1
 8018df4:	d103      	bne.n	8018dfe <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8018df6:	697b      	ldr	r3, [r7, #20]
 8018df8:	22fb      	movs	r2, #251	; 0xfb
 8018dfa:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8018dfc:	e055      	b.n	8018eaa <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8018dfe:	697b      	ldr	r3, [r7, #20]
 8018e00:	7a1b      	ldrb	r3, [r3, #8]
 8018e02:	f003 0301 	and.w	r3, r3, #1
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d004      	beq.n	8018e14 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8018e0a:	697b      	ldr	r3, [r7, #20]
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f7ff f90e 	bl	8018030 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8018e14:	697b      	ldr	r3, [r7, #20]
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d104      	bne.n	8018e28 <lwip_netconn_do_close+0x80>
 8018e1e:	697b      	ldr	r3, [r7, #20]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	6a1b      	ldr	r3, [r3, #32]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d006      	beq.n	8018e36 <lwip_netconn_do_close+0x8e>
 8018e28:	4b2e      	ldr	r3, [pc, #184]	; (8018ee4 <lwip_netconn_do_close+0x13c>)
 8018e2a:	f240 721c 	movw	r2, #1820	; 0x71c
 8018e2e:	492e      	ldr	r1, [pc, #184]	; (8018ee8 <lwip_netconn_do_close+0x140>)
 8018e30:	482e      	ldr	r0, [pc, #184]	; (8018eec <lwip_netconn_do_close+0x144>)
 8018e32:	f00c fe75 	bl	8025b20 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8018e36:	697b      	ldr	r3, [r7, #20]
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	2204      	movs	r2, #4
 8018e3c:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8018e3e:	697b      	ldr	r3, [r7, #20]
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	697a      	ldr	r2, [r7, #20]
 8018e44:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8018e46:	697b      	ldr	r3, [r7, #20]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	2100      	movs	r1, #0
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	f7ff f96f 	bl	8018130 <lwip_netconn_do_close_internal>
 8018e52:	4603      	mov	r3, r0
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d040      	beq.n	8018eda <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	785b      	ldrb	r3, [r3, #1]
 8018e5e:	2b04      	cmp	r3, #4
 8018e60:	d006      	beq.n	8018e70 <lwip_netconn_do_close+0xc8>
 8018e62:	4b20      	ldr	r3, [pc, #128]	; (8018ee4 <lwip_netconn_do_close+0x13c>)
 8018e64:	f240 7221 	movw	r2, #1825	; 0x721
 8018e68:	4921      	ldr	r1, [pc, #132]	; (8018ef0 <lwip_netconn_do_close+0x148>)
 8018e6a:	4820      	ldr	r0, [pc, #128]	; (8018eec <lwip_netconn_do_close+0x144>)
 8018e6c:	f00c fe58 	bl	8025b20 <iprintf>
        UNLOCK_TCPIP_CORE();
 8018e70:	4820      	ldr	r0, [pc, #128]	; (8018ef4 <lwip_netconn_do_close+0x14c>)
 8018e72:	f00a fa06 	bl	8023282 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8018e76:	697b      	ldr	r3, [r7, #20]
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	330c      	adds	r3, #12
 8018e7c:	2100      	movs	r1, #0
 8018e7e:	4618      	mov	r0, r3
 8018e80:	f00a f95e 	bl	8023140 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8018e84:	481b      	ldr	r0, [pc, #108]	; (8018ef4 <lwip_netconn_do_close+0x14c>)
 8018e86:	f00a f9ed 	bl	8023264 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8018e8a:	697b      	ldr	r3, [r7, #20]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	785b      	ldrb	r3, [r3, #1]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d022      	beq.n	8018eda <lwip_netconn_do_close+0x132>
 8018e94:	4b13      	ldr	r3, [pc, #76]	; (8018ee4 <lwip_netconn_do_close+0x13c>)
 8018e96:	f240 7225 	movw	r2, #1829	; 0x725
 8018e9a:	4915      	ldr	r1, [pc, #84]	; (8018ef0 <lwip_netconn_do_close+0x148>)
 8018e9c:	4813      	ldr	r0, [pc, #76]	; (8018eec <lwip_netconn_do_close+0x144>)
 8018e9e:	f00c fe3f 	bl	8025b20 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8018ea2:	e01a      	b.n	8018eda <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8018ea4:	697b      	ldr	r3, [r7, #20]
 8018ea6:	22f5      	movs	r2, #245	; 0xf5
 8018ea8:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8018eaa:	697b      	ldr	r3, [r7, #20]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d014      	beq.n	8018edc <lwip_netconn_do_close+0x134>
 8018eb2:	f00a fa11 	bl	80232d8 <sys_arch_protect>
 8018eb6:	60f8      	str	r0, [r7, #12]
 8018eb8:	697b      	ldr	r3, [r7, #20]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018ec0:	f113 0f0c 	cmn.w	r3, #12
 8018ec4:	db05      	blt.n	8018ed2 <lwip_netconn_do_close+0x12a>
 8018ec6:	697b      	ldr	r3, [r7, #20]
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	697a      	ldr	r2, [r7, #20]
 8018ecc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018ed0:	721a      	strb	r2, [r3, #8]
 8018ed2:	68f8      	ldr	r0, [r7, #12]
 8018ed4:	f00a fa0e 	bl	80232f4 <sys_arch_unprotect>
 8018ed8:	e000      	b.n	8018edc <lwip_netconn_do_close+0x134>
      return;
 8018eda:	bf00      	nop
}
 8018edc:	3718      	adds	r7, #24
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bd80      	pop	{r7, pc}
 8018ee2:	bf00      	nop
 8018ee4:	08026994 	.word	0x08026994
 8018ee8:	08026cdc 	.word	0x08026cdc
 8018eec:	080269ec 	.word	0x080269ec
 8018ef0:	08026cf8 	.word	0x08026cf8
 8018ef4:	20004604 	.word	0x20004604

08018ef8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8018ef8:	b580      	push	{r7, lr}
 8018efa:	b082      	sub	sp, #8
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d013      	beq.n	8018f2e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d00b      	beq.n	8018f26 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	4618      	mov	r0, r3
 8018f14:	f003 fea8 	bl	801cc68 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2200      	movs	r2, #0
 8018f1c:	605a      	str	r2, [r3, #4]
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	685a      	ldr	r2, [r3, #4]
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8018f26:	6879      	ldr	r1, [r7, #4]
 8018f28:	2006      	movs	r0, #6
 8018f2a:	f003 f943 	bl	801c1b4 <memp_free>
  }
}
 8018f2e:	bf00      	nop
 8018f30:	3708      	adds	r7, #8
 8018f32:	46bd      	mov	sp, r7
 8018f34:	bd80      	pop	{r7, pc}
	...

08018f38 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b084      	sub	sp, #16
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	60f8      	str	r0, [r7, #12]
 8018f40:	60b9      	str	r1, [r7, #8]
 8018f42:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d108      	bne.n	8018f5c <netbuf_data+0x24>
 8018f4a:	4b1b      	ldr	r3, [pc, #108]	; (8018fb8 <netbuf_data+0x80>)
 8018f4c:	22c2      	movs	r2, #194	; 0xc2
 8018f4e:	491b      	ldr	r1, [pc, #108]	; (8018fbc <netbuf_data+0x84>)
 8018f50:	481b      	ldr	r0, [pc, #108]	; (8018fc0 <netbuf_data+0x88>)
 8018f52:	f00c fde5 	bl	8025b20 <iprintf>
 8018f56:	f06f 030f 	mvn.w	r3, #15
 8018f5a:	e029      	b.n	8018fb0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8018f5c:	68bb      	ldr	r3, [r7, #8]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d108      	bne.n	8018f74 <netbuf_data+0x3c>
 8018f62:	4b15      	ldr	r3, [pc, #84]	; (8018fb8 <netbuf_data+0x80>)
 8018f64:	22c3      	movs	r2, #195	; 0xc3
 8018f66:	4917      	ldr	r1, [pc, #92]	; (8018fc4 <netbuf_data+0x8c>)
 8018f68:	4815      	ldr	r0, [pc, #84]	; (8018fc0 <netbuf_data+0x88>)
 8018f6a:	f00c fdd9 	bl	8025b20 <iprintf>
 8018f6e:	f06f 030f 	mvn.w	r3, #15
 8018f72:	e01d      	b.n	8018fb0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d108      	bne.n	8018f8c <netbuf_data+0x54>
 8018f7a:	4b0f      	ldr	r3, [pc, #60]	; (8018fb8 <netbuf_data+0x80>)
 8018f7c:	22c4      	movs	r2, #196	; 0xc4
 8018f7e:	4912      	ldr	r1, [pc, #72]	; (8018fc8 <netbuf_data+0x90>)
 8018f80:	480f      	ldr	r0, [pc, #60]	; (8018fc0 <netbuf_data+0x88>)
 8018f82:	f00c fdcd 	bl	8025b20 <iprintf>
 8018f86:	f06f 030f 	mvn.w	r3, #15
 8018f8a:	e011      	b.n	8018fb0 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	685b      	ldr	r3, [r3, #4]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d102      	bne.n	8018f9a <netbuf_data+0x62>
    return ERR_BUF;
 8018f94:	f06f 0301 	mvn.w	r3, #1
 8018f98:	e00a      	b.n	8018fb0 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	685b      	ldr	r3, [r3, #4]
 8018f9e:	685a      	ldr	r2, [r3, #4]
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	685b      	ldr	r3, [r3, #4]
 8018fa8:	895a      	ldrh	r2, [r3, #10]
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8018fae:	2300      	movs	r3, #0
}
 8018fb0:	4618      	mov	r0, r3
 8018fb2:	3710      	adds	r7, #16
 8018fb4:	46bd      	mov	sp, r7
 8018fb6:	bd80      	pop	{r7, pc}
 8018fb8:	08026e5c 	.word	0x08026e5c
 8018fbc:	08026f64 	.word	0x08026f64
 8018fc0:	08026eac 	.word	0x08026eac
 8018fc4:	08026f80 	.word	0x08026f80
 8018fc8:	08026fa0 	.word	0x08026fa0

08018fcc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b084      	sub	sp, #16
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8018fd4:	4b29      	ldr	r3, [pc, #164]	; (801907c <tcpip_thread+0xb0>)
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d005      	beq.n	8018fe8 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8018fdc:	4b27      	ldr	r3, [pc, #156]	; (801907c <tcpip_thread+0xb0>)
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	4a27      	ldr	r2, [pc, #156]	; (8019080 <tcpip_thread+0xb4>)
 8018fe2:	6812      	ldr	r2, [r2, #0]
 8018fe4:	4610      	mov	r0, r2
 8018fe6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8018fe8:	4826      	ldr	r0, [pc, #152]	; (8019084 <tcpip_thread+0xb8>)
 8018fea:	f00a f93b 	bl	8023264 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8018fee:	4825      	ldr	r0, [pc, #148]	; (8019084 <tcpip_thread+0xb8>)
 8018ff0:	f00a f947 	bl	8023282 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8018ff4:	f107 030c 	add.w	r3, r7, #12
 8018ff8:	4619      	mov	r1, r3
 8018ffa:	4823      	ldr	r0, [pc, #140]	; (8019088 <tcpip_thread+0xbc>)
 8018ffc:	f009 fc38 	bl	8022870 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8019000:	4820      	ldr	r0, [pc, #128]	; (8019084 <tcpip_thread+0xb8>)
 8019002:	f00a f92f 	bl	8023264 <sys_mutex_lock>
    if (msg == NULL) {
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	2b00      	cmp	r3, #0
 801900a:	d106      	bne.n	801901a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801900c:	4b1f      	ldr	r3, [pc, #124]	; (801908c <tcpip_thread+0xc0>)
 801900e:	2269      	movs	r2, #105	; 0x69
 8019010:	491f      	ldr	r1, [pc, #124]	; (8019090 <tcpip_thread+0xc4>)
 8019012:	4820      	ldr	r0, [pc, #128]	; (8019094 <tcpip_thread+0xc8>)
 8019014:	f00c fd84 	bl	8025b20 <iprintf>
      continue;
 8019018:	e02f      	b.n	801907a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	781b      	ldrb	r3, [r3, #0]
 801901e:	2b03      	cmp	r3, #3
 8019020:	d011      	beq.n	8019046 <tcpip_thread+0x7a>
 8019022:	2b04      	cmp	r3, #4
 8019024:	d01b      	beq.n	801905e <tcpip_thread+0x92>
 8019026:	2b02      	cmp	r3, #2
 8019028:	d120      	bne.n	801906c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	68db      	ldr	r3, [r3, #12]
 801902e:	68fa      	ldr	r2, [r7, #12]
 8019030:	6850      	ldr	r0, [r2, #4]
 8019032:	68fa      	ldr	r2, [r7, #12]
 8019034:	6892      	ldr	r2, [r2, #8]
 8019036:	4611      	mov	r1, r2
 8019038:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	4619      	mov	r1, r3
 801903e:	2009      	movs	r0, #9
 8019040:	f003 f8b8 	bl	801c1b4 <memp_free>
      break;
 8019044:	e019      	b.n	801907a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	685b      	ldr	r3, [r3, #4]
 801904a:	68fa      	ldr	r2, [r7, #12]
 801904c:	6892      	ldr	r2, [r2, #8]
 801904e:	4610      	mov	r0, r2
 8019050:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	4619      	mov	r1, r3
 8019056:	2008      	movs	r0, #8
 8019058:	f003 f8ac 	bl	801c1b4 <memp_free>
      break;
 801905c:	e00d      	b.n	801907a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	685b      	ldr	r3, [r3, #4]
 8019062:	68fa      	ldr	r2, [r7, #12]
 8019064:	6892      	ldr	r2, [r2, #8]
 8019066:	4610      	mov	r0, r2
 8019068:	4798      	blx	r3
      break;
 801906a:	e006      	b.n	801907a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801906c:	4b07      	ldr	r3, [pc, #28]	; (801908c <tcpip_thread+0xc0>)
 801906e:	229b      	movs	r2, #155	; 0x9b
 8019070:	4907      	ldr	r1, [pc, #28]	; (8019090 <tcpip_thread+0xc4>)
 8019072:	4808      	ldr	r0, [pc, #32]	; (8019094 <tcpip_thread+0xc8>)
 8019074:	f00c fd54 	bl	8025b20 <iprintf>
      break;
 8019078:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 801907a:	e7b8      	b.n	8018fee <tcpip_thread+0x22>
 801907c:	20003f94 	.word	0x20003f94
 8019080:	20003f98 	.word	0x20003f98
 8019084:	20004604 	.word	0x20004604
 8019088:	20003f9c 	.word	0x20003f9c
 801908c:	08026ff4 	.word	0x08026ff4
 8019090:	08027024 	.word	0x08027024
 8019094:	08027044 	.word	0x08027044

08019098 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b086      	sub	sp, #24
 801909c:	af00      	add	r7, sp, #0
 801909e:	60f8      	str	r0, [r7, #12]
 80190a0:	60b9      	str	r1, [r7, #8]
 80190a2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80190a4:	481a      	ldr	r0, [pc, #104]	; (8019110 <tcpip_inpkt+0x78>)
 80190a6:	f00a f807 	bl	80230b8 <sys_mbox_valid>
 80190aa:	4603      	mov	r3, r0
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d105      	bne.n	80190bc <tcpip_inpkt+0x24>
 80190b0:	4b18      	ldr	r3, [pc, #96]	; (8019114 <tcpip_inpkt+0x7c>)
 80190b2:	22b5      	movs	r2, #181	; 0xb5
 80190b4:	4918      	ldr	r1, [pc, #96]	; (8019118 <tcpip_inpkt+0x80>)
 80190b6:	4819      	ldr	r0, [pc, #100]	; (801911c <tcpip_inpkt+0x84>)
 80190b8:	f00c fd32 	bl	8025b20 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80190bc:	2009      	movs	r0, #9
 80190be:	f003 f827 	bl	801c110 <memp_malloc>
 80190c2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80190c4:	697b      	ldr	r3, [r7, #20]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d102      	bne.n	80190d0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80190ca:	f04f 33ff 	mov.w	r3, #4294967295
 80190ce:	e01a      	b.n	8019106 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80190d0:	697b      	ldr	r3, [r7, #20]
 80190d2:	2202      	movs	r2, #2
 80190d4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80190d6:	697b      	ldr	r3, [r7, #20]
 80190d8:	68fa      	ldr	r2, [r7, #12]
 80190da:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80190dc:	697b      	ldr	r3, [r7, #20]
 80190de:	68ba      	ldr	r2, [r7, #8]
 80190e0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80190e2:	697b      	ldr	r3, [r7, #20]
 80190e4:	687a      	ldr	r2, [r7, #4]
 80190e6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80190e8:	6979      	ldr	r1, [r7, #20]
 80190ea:	4809      	ldr	r0, [pc, #36]	; (8019110 <tcpip_inpkt+0x78>)
 80190ec:	f009 ff6f 	bl	8022fce <sys_mbox_trypost>
 80190f0:	4603      	mov	r3, r0
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d006      	beq.n	8019104 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80190f6:	6979      	ldr	r1, [r7, #20]
 80190f8:	2009      	movs	r0, #9
 80190fa:	f003 f85b 	bl	801c1b4 <memp_free>
    return ERR_MEM;
 80190fe:	f04f 33ff 	mov.w	r3, #4294967295
 8019102:	e000      	b.n	8019106 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8019104:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8019106:	4618      	mov	r0, r3
 8019108:	3718      	adds	r7, #24
 801910a:	46bd      	mov	sp, r7
 801910c:	bd80      	pop	{r7, pc}
 801910e:	bf00      	nop
 8019110:	20003f9c 	.word	0x20003f9c
 8019114:	08026ff4 	.word	0x08026ff4
 8019118:	0802706c 	.word	0x0802706c
 801911c:	08027044 	.word	0x08027044

08019120 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8019120:	b580      	push	{r7, lr}
 8019122:	b082      	sub	sp, #8
 8019124:	af00      	add	r7, sp, #0
 8019126:	6078      	str	r0, [r7, #4]
 8019128:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801912a:	683b      	ldr	r3, [r7, #0]
 801912c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8019130:	f003 0318 	and.w	r3, r3, #24
 8019134:	2b00      	cmp	r3, #0
 8019136:	d006      	beq.n	8019146 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8019138:	4a08      	ldr	r2, [pc, #32]	; (801915c <tcpip_input+0x3c>)
 801913a:	6839      	ldr	r1, [r7, #0]
 801913c:	6878      	ldr	r0, [r7, #4]
 801913e:	f7ff ffab 	bl	8019098 <tcpip_inpkt>
 8019142:	4603      	mov	r3, r0
 8019144:	e005      	b.n	8019152 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8019146:	4a06      	ldr	r2, [pc, #24]	; (8019160 <tcpip_input+0x40>)
 8019148:	6839      	ldr	r1, [r7, #0]
 801914a:	6878      	ldr	r0, [r7, #4]
 801914c:	f7ff ffa4 	bl	8019098 <tcpip_inpkt>
 8019150:	4603      	mov	r3, r0
}
 8019152:	4618      	mov	r0, r3
 8019154:	3708      	adds	r7, #8
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}
 801915a:	bf00      	nop
 801915c:	08022d91 	.word	0x08022d91
 8019160:	0801a5dd 	.word	0x0801a5dd

08019164 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8019164:	b580      	push	{r7, lr}
 8019166:	b086      	sub	sp, #24
 8019168:	af00      	add	r7, sp, #0
 801916a:	60f8      	str	r0, [r7, #12]
 801916c:	60b9      	str	r1, [r7, #8]
 801916e:	4613      	mov	r3, r2
 8019170:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8019172:	481d      	ldr	r0, [pc, #116]	; (80191e8 <tcpip_callback_with_block+0x84>)
 8019174:	f009 ffa0 	bl	80230b8 <sys_mbox_valid>
 8019178:	4603      	mov	r3, r0
 801917a:	2b00      	cmp	r3, #0
 801917c:	d105      	bne.n	801918a <tcpip_callback_with_block+0x26>
 801917e:	4b1b      	ldr	r3, [pc, #108]	; (80191ec <tcpip_callback_with_block+0x88>)
 8019180:	22ee      	movs	r2, #238	; 0xee
 8019182:	491b      	ldr	r1, [pc, #108]	; (80191f0 <tcpip_callback_with_block+0x8c>)
 8019184:	481b      	ldr	r0, [pc, #108]	; (80191f4 <tcpip_callback_with_block+0x90>)
 8019186:	f00c fccb 	bl	8025b20 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801918a:	2008      	movs	r0, #8
 801918c:	f002 ffc0 	bl	801c110 <memp_malloc>
 8019190:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8019192:	697b      	ldr	r3, [r7, #20]
 8019194:	2b00      	cmp	r3, #0
 8019196:	d102      	bne.n	801919e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8019198:	f04f 33ff 	mov.w	r3, #4294967295
 801919c:	e01f      	b.n	80191de <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801919e:	697b      	ldr	r3, [r7, #20]
 80191a0:	2203      	movs	r2, #3
 80191a2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80191a4:	697b      	ldr	r3, [r7, #20]
 80191a6:	68fa      	ldr	r2, [r7, #12]
 80191a8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80191aa:	697b      	ldr	r3, [r7, #20]
 80191ac:	68ba      	ldr	r2, [r7, #8]
 80191ae:	609a      	str	r2, [r3, #8]
  if (block) {
 80191b0:	79fb      	ldrb	r3, [r7, #7]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d004      	beq.n	80191c0 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 80191b6:	6979      	ldr	r1, [r7, #20]
 80191b8:	480b      	ldr	r0, [pc, #44]	; (80191e8 <tcpip_callback_with_block+0x84>)
 80191ba:	f009 fef3 	bl	8022fa4 <sys_mbox_post>
 80191be:	e00d      	b.n	80191dc <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80191c0:	6979      	ldr	r1, [r7, #20]
 80191c2:	4809      	ldr	r0, [pc, #36]	; (80191e8 <tcpip_callback_with_block+0x84>)
 80191c4:	f009 ff03 	bl	8022fce <sys_mbox_trypost>
 80191c8:	4603      	mov	r3, r0
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d006      	beq.n	80191dc <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80191ce:	6979      	ldr	r1, [r7, #20]
 80191d0:	2008      	movs	r0, #8
 80191d2:	f002 ffef 	bl	801c1b4 <memp_free>
      return ERR_MEM;
 80191d6:	f04f 33ff 	mov.w	r3, #4294967295
 80191da:	e000      	b.n	80191de <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 80191dc:	2300      	movs	r3, #0
}
 80191de:	4618      	mov	r0, r3
 80191e0:	3718      	adds	r7, #24
 80191e2:	46bd      	mov	sp, r7
 80191e4:	bd80      	pop	{r7, pc}
 80191e6:	bf00      	nop
 80191e8:	20003f9c 	.word	0x20003f9c
 80191ec:	08026ff4 	.word	0x08026ff4
 80191f0:	0802706c 	.word	0x0802706c
 80191f4:	08027044 	.word	0x08027044

080191f8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b084      	sub	sp, #16
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	60f8      	str	r0, [r7, #12]
 8019200:	60b9      	str	r1, [r7, #8]
 8019202:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8019204:	4806      	ldr	r0, [pc, #24]	; (8019220 <tcpip_send_msg_wait_sem+0x28>)
 8019206:	f00a f82d 	bl	8023264 <sys_mutex_lock>
  fn(apimsg);
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	68b8      	ldr	r0, [r7, #8]
 801920e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8019210:	4803      	ldr	r0, [pc, #12]	; (8019220 <tcpip_send_msg_wait_sem+0x28>)
 8019212:	f00a f836 	bl	8023282 <sys_mutex_unlock>
  return ERR_OK;
 8019216:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8019218:	4618      	mov	r0, r3
 801921a:	3710      	adds	r7, #16
 801921c:	46bd      	mov	sp, r7
 801921e:	bd80      	pop	{r7, pc}
 8019220:	20004604 	.word	0x20004604

08019224 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b084      	sub	sp, #16
 8019228:	af02      	add	r7, sp, #8
 801922a:	6078      	str	r0, [r7, #4]
 801922c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801922e:	f000 f8b2 	bl	8019396 <lwip_init>

  tcpip_init_done = initfunc;
 8019232:	4a17      	ldr	r2, [pc, #92]	; (8019290 <tcpip_init+0x6c>)
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8019238:	4a16      	ldr	r2, [pc, #88]	; (8019294 <tcpip_init+0x70>)
 801923a:	683b      	ldr	r3, [r7, #0]
 801923c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801923e:	2106      	movs	r1, #6
 8019240:	4815      	ldr	r0, [pc, #84]	; (8019298 <tcpip_init+0x74>)
 8019242:	f009 fe7f 	bl	8022f44 <sys_mbox_new>
 8019246:	4603      	mov	r3, r0
 8019248:	2b00      	cmp	r3, #0
 801924a:	d006      	beq.n	801925a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801924c:	4b13      	ldr	r3, [pc, #76]	; (801929c <tcpip_init+0x78>)
 801924e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8019252:	4913      	ldr	r1, [pc, #76]	; (80192a0 <tcpip_init+0x7c>)
 8019254:	4813      	ldr	r0, [pc, #76]	; (80192a4 <tcpip_init+0x80>)
 8019256:	f00c fc63 	bl	8025b20 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801925a:	4813      	ldr	r0, [pc, #76]	; (80192a8 <tcpip_init+0x84>)
 801925c:	f009 ffe8 	bl	8023230 <sys_mutex_new>
 8019260:	4603      	mov	r3, r0
 8019262:	2b00      	cmp	r3, #0
 8019264:	d006      	beq.n	8019274 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8019266:	4b0d      	ldr	r3, [pc, #52]	; (801929c <tcpip_init+0x78>)
 8019268:	f240 12d9 	movw	r2, #473	; 0x1d9
 801926c:	490f      	ldr	r1, [pc, #60]	; (80192ac <tcpip_init+0x88>)
 801926e:	480d      	ldr	r0, [pc, #52]	; (80192a4 <tcpip_init+0x80>)
 8019270:	f00c fc56 	bl	8025b20 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8019274:	2303      	movs	r3, #3
 8019276:	9300      	str	r3, [sp, #0]
 8019278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801927c:	2200      	movs	r2, #0
 801927e:	490c      	ldr	r1, [pc, #48]	; (80192b0 <tcpip_init+0x8c>)
 8019280:	480c      	ldr	r0, [pc, #48]	; (80192b4 <tcpip_init+0x90>)
 8019282:	f00a f80b 	bl	802329c <sys_thread_new>
}
 8019286:	bf00      	nop
 8019288:	3708      	adds	r7, #8
 801928a:	46bd      	mov	sp, r7
 801928c:	bd80      	pop	{r7, pc}
 801928e:	bf00      	nop
 8019290:	20003f94 	.word	0x20003f94
 8019294:	20003f98 	.word	0x20003f98
 8019298:	20003f9c 	.word	0x20003f9c
 801929c:	08026ff4 	.word	0x08026ff4
 80192a0:	0802707c 	.word	0x0802707c
 80192a4:	08027044 	.word	0x08027044
 80192a8:	20004604 	.word	0x20004604
 80192ac:	080270a0 	.word	0x080270a0
 80192b0:	08018fcd 	.word	0x08018fcd
 80192b4:	080270c4 	.word	0x080270c4

080192b8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b084      	sub	sp, #16
 80192bc:	af00      	add	r7, sp, #0
 80192be:	6078      	str	r0, [r7, #4]
 80192c0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d002      	beq.n	80192ce <fs_open+0x16>
 80192c8:	683b      	ldr	r3, [r7, #0]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d102      	bne.n	80192d4 <fs_open+0x1c>
     return ERR_ARG;
 80192ce:	f06f 030f 	mvn.w	r3, #15
 80192d2:	e028      	b.n	8019326 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80192d4:	4b16      	ldr	r3, [pc, #88]	; (8019330 <fs_open+0x78>)
 80192d6:	60fb      	str	r3, [r7, #12]
 80192d8:	e020      	b.n	801931c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	685b      	ldr	r3, [r3, #4]
 80192de:	4619      	mov	r1, r3
 80192e0:	6838      	ldr	r0, [r7, #0]
 80192e2:	f7f6 fead 	bl	8010040 <strcmp>
 80192e6:	4603      	mov	r3, r0
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d114      	bne.n	8019316 <fs_open+0x5e>
      file->data = (const char *)f->data;
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	689a      	ldr	r2, [r3, #8]
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	68da      	ldr	r2, [r3, #12]
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	68da      	ldr	r2, [r3, #12]
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	2200      	movs	r2, #0
 8019308:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	7c1a      	ldrb	r2, [r3, #16]
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8019312:	2300      	movs	r3, #0
 8019314:	e007      	b.n	8019326 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	60fb      	str	r3, [r7, #12]
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	2b00      	cmp	r3, #0
 8019320:	d1db      	bne.n	80192da <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8019322:	f06f 0305 	mvn.w	r3, #5
}
 8019326:	4618      	mov	r0, r3
 8019328:	3710      	adds	r7, #16
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}
 801932e:	bf00      	nop
 8019330:	0802b338 	.word	0x0802b338

08019334 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8019334:	b480      	push	{r7}
 8019336:	b083      	sub	sp, #12
 8019338:	af00      	add	r7, sp, #0
 801933a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 801933c:	bf00      	nop
 801933e:	370c      	adds	r7, #12
 8019340:	46bd      	mov	sp, r7
 8019342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019346:	4770      	bx	lr

08019348 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8019348:	b480      	push	{r7}
 801934a:	b083      	sub	sp, #12
 801934c:	af00      	add	r7, sp, #0
 801934e:	4603      	mov	r3, r0
 8019350:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8019352:	88fb      	ldrh	r3, [r7, #6]
 8019354:	ba5b      	rev16	r3, r3
 8019356:	b29b      	uxth	r3, r3
}
 8019358:	4618      	mov	r0, r3
 801935a:	370c      	adds	r7, #12
 801935c:	46bd      	mov	sp, r7
 801935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019362:	4770      	bx	lr

08019364 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8019364:	b480      	push	{r7}
 8019366:	b083      	sub	sp, #12
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	061a      	lsls	r2, r3, #24
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	021b      	lsls	r3, r3, #8
 8019374:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8019378:	431a      	orrs	r2, r3
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	0a1b      	lsrs	r3, r3, #8
 801937e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019382:	431a      	orrs	r2, r3
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	0e1b      	lsrs	r3, r3, #24
 8019388:	4313      	orrs	r3, r2
}
 801938a:	4618      	mov	r0, r3
 801938c:	370c      	adds	r7, #12
 801938e:	46bd      	mov	sp, r7
 8019390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019394:	4770      	bx	lr

08019396 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8019396:	b580      	push	{r7, lr}
 8019398:	b082      	sub	sp, #8
 801939a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801939c:	2300      	movs	r3, #0
 801939e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80193a0:	f009 ff38 	bl	8023214 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80193a4:	f002 fb9c 	bl	801bae0 <mem_init>
  memp_init();
 80193a8:	f002 fe66 	bl	801c078 <memp_init>
  pbuf_init();
  netif_init();
 80193ac:	f002 ff2c 	bl	801c208 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80193b0:	f009 fa84 	bl	80228bc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80193b4:	f003 fece 	bl	801d154 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80193b8:	f009 f916 	bl	80225e8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80193bc:	bf00      	nop
 80193be:	3708      	adds	r7, #8
 80193c0:	46bd      	mov	sp, r7
 80193c2:	bd80      	pop	{r7, pc}

080193c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b082      	sub	sp, #8
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80193cc:	4915      	ldr	r1, [pc, #84]	; (8019424 <etharp_free_entry+0x60>)
 80193ce:	687a      	ldr	r2, [r7, #4]
 80193d0:	4613      	mov	r3, r2
 80193d2:	005b      	lsls	r3, r3, #1
 80193d4:	4413      	add	r3, r2
 80193d6:	00db      	lsls	r3, r3, #3
 80193d8:	440b      	add	r3, r1
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d013      	beq.n	8019408 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80193e0:	4910      	ldr	r1, [pc, #64]	; (8019424 <etharp_free_entry+0x60>)
 80193e2:	687a      	ldr	r2, [r7, #4]
 80193e4:	4613      	mov	r3, r2
 80193e6:	005b      	lsls	r3, r3, #1
 80193e8:	4413      	add	r3, r2
 80193ea:	00db      	lsls	r3, r3, #3
 80193ec:	440b      	add	r3, r1
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	4618      	mov	r0, r3
 80193f2:	f003 fc39 	bl	801cc68 <pbuf_free>
    arp_table[i].q = NULL;
 80193f6:	490b      	ldr	r1, [pc, #44]	; (8019424 <etharp_free_entry+0x60>)
 80193f8:	687a      	ldr	r2, [r7, #4]
 80193fa:	4613      	mov	r3, r2
 80193fc:	005b      	lsls	r3, r3, #1
 80193fe:	4413      	add	r3, r2
 8019400:	00db      	lsls	r3, r3, #3
 8019402:	440b      	add	r3, r1
 8019404:	2200      	movs	r2, #0
 8019406:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019408:	4906      	ldr	r1, [pc, #24]	; (8019424 <etharp_free_entry+0x60>)
 801940a:	687a      	ldr	r2, [r7, #4]
 801940c:	4613      	mov	r3, r2
 801940e:	005b      	lsls	r3, r3, #1
 8019410:	4413      	add	r3, r2
 8019412:	00db      	lsls	r3, r3, #3
 8019414:	440b      	add	r3, r1
 8019416:	3314      	adds	r3, #20
 8019418:	2200      	movs	r2, #0
 801941a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801941c:	bf00      	nop
 801941e:	3708      	adds	r7, #8
 8019420:	46bd      	mov	sp, r7
 8019422:	bd80      	pop	{r7, pc}
 8019424:	20003fa0 	.word	0x20003fa0

08019428 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b082      	sub	sp, #8
 801942c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801942e:	2300      	movs	r3, #0
 8019430:	71fb      	strb	r3, [r7, #7]
 8019432:	e096      	b.n	8019562 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019434:	79fa      	ldrb	r2, [r7, #7]
 8019436:	494f      	ldr	r1, [pc, #316]	; (8019574 <etharp_tmr+0x14c>)
 8019438:	4613      	mov	r3, r2
 801943a:	005b      	lsls	r3, r3, #1
 801943c:	4413      	add	r3, r2
 801943e:	00db      	lsls	r3, r3, #3
 8019440:	440b      	add	r3, r1
 8019442:	3314      	adds	r3, #20
 8019444:	781b      	ldrb	r3, [r3, #0]
 8019446:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8019448:	79bb      	ldrb	r3, [r7, #6]
 801944a:	2b00      	cmp	r3, #0
 801944c:	f000 8086 	beq.w	801955c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8019450:	79fa      	ldrb	r2, [r7, #7]
 8019452:	4948      	ldr	r1, [pc, #288]	; (8019574 <etharp_tmr+0x14c>)
 8019454:	4613      	mov	r3, r2
 8019456:	005b      	lsls	r3, r3, #1
 8019458:	4413      	add	r3, r2
 801945a:	00db      	lsls	r3, r3, #3
 801945c:	440b      	add	r3, r1
 801945e:	3312      	adds	r3, #18
 8019460:	881b      	ldrh	r3, [r3, #0]
 8019462:	3301      	adds	r3, #1
 8019464:	b298      	uxth	r0, r3
 8019466:	4943      	ldr	r1, [pc, #268]	; (8019574 <etharp_tmr+0x14c>)
 8019468:	4613      	mov	r3, r2
 801946a:	005b      	lsls	r3, r3, #1
 801946c:	4413      	add	r3, r2
 801946e:	00db      	lsls	r3, r3, #3
 8019470:	440b      	add	r3, r1
 8019472:	3312      	adds	r3, #18
 8019474:	4602      	mov	r2, r0
 8019476:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019478:	79fa      	ldrb	r2, [r7, #7]
 801947a:	493e      	ldr	r1, [pc, #248]	; (8019574 <etharp_tmr+0x14c>)
 801947c:	4613      	mov	r3, r2
 801947e:	005b      	lsls	r3, r3, #1
 8019480:	4413      	add	r3, r2
 8019482:	00db      	lsls	r3, r3, #3
 8019484:	440b      	add	r3, r1
 8019486:	3312      	adds	r3, #18
 8019488:	881b      	ldrh	r3, [r3, #0]
 801948a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801948e:	d215      	bcs.n	80194bc <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019490:	79fa      	ldrb	r2, [r7, #7]
 8019492:	4938      	ldr	r1, [pc, #224]	; (8019574 <etharp_tmr+0x14c>)
 8019494:	4613      	mov	r3, r2
 8019496:	005b      	lsls	r3, r3, #1
 8019498:	4413      	add	r3, r2
 801949a:	00db      	lsls	r3, r3, #3
 801949c:	440b      	add	r3, r1
 801949e:	3314      	adds	r3, #20
 80194a0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80194a2:	2b01      	cmp	r3, #1
 80194a4:	d10f      	bne.n	80194c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80194a6:	79fa      	ldrb	r2, [r7, #7]
 80194a8:	4932      	ldr	r1, [pc, #200]	; (8019574 <etharp_tmr+0x14c>)
 80194aa:	4613      	mov	r3, r2
 80194ac:	005b      	lsls	r3, r3, #1
 80194ae:	4413      	add	r3, r2
 80194b0:	00db      	lsls	r3, r3, #3
 80194b2:	440b      	add	r3, r1
 80194b4:	3312      	adds	r3, #18
 80194b6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80194b8:	2b04      	cmp	r3, #4
 80194ba:	d904      	bls.n	80194c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80194bc:	79fb      	ldrb	r3, [r7, #7]
 80194be:	4618      	mov	r0, r3
 80194c0:	f7ff ff80 	bl	80193c4 <etharp_free_entry>
 80194c4:	e04a      	b.n	801955c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80194c6:	79fa      	ldrb	r2, [r7, #7]
 80194c8:	492a      	ldr	r1, [pc, #168]	; (8019574 <etharp_tmr+0x14c>)
 80194ca:	4613      	mov	r3, r2
 80194cc:	005b      	lsls	r3, r3, #1
 80194ce:	4413      	add	r3, r2
 80194d0:	00db      	lsls	r3, r3, #3
 80194d2:	440b      	add	r3, r1
 80194d4:	3314      	adds	r3, #20
 80194d6:	781b      	ldrb	r3, [r3, #0]
 80194d8:	2b03      	cmp	r3, #3
 80194da:	d10a      	bne.n	80194f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80194dc:	79fa      	ldrb	r2, [r7, #7]
 80194de:	4925      	ldr	r1, [pc, #148]	; (8019574 <etharp_tmr+0x14c>)
 80194e0:	4613      	mov	r3, r2
 80194e2:	005b      	lsls	r3, r3, #1
 80194e4:	4413      	add	r3, r2
 80194e6:	00db      	lsls	r3, r3, #3
 80194e8:	440b      	add	r3, r1
 80194ea:	3314      	adds	r3, #20
 80194ec:	2204      	movs	r2, #4
 80194ee:	701a      	strb	r2, [r3, #0]
 80194f0:	e034      	b.n	801955c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80194f2:	79fa      	ldrb	r2, [r7, #7]
 80194f4:	491f      	ldr	r1, [pc, #124]	; (8019574 <etharp_tmr+0x14c>)
 80194f6:	4613      	mov	r3, r2
 80194f8:	005b      	lsls	r3, r3, #1
 80194fa:	4413      	add	r3, r2
 80194fc:	00db      	lsls	r3, r3, #3
 80194fe:	440b      	add	r3, r1
 8019500:	3314      	adds	r3, #20
 8019502:	781b      	ldrb	r3, [r3, #0]
 8019504:	2b04      	cmp	r3, #4
 8019506:	d10a      	bne.n	801951e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019508:	79fa      	ldrb	r2, [r7, #7]
 801950a:	491a      	ldr	r1, [pc, #104]	; (8019574 <etharp_tmr+0x14c>)
 801950c:	4613      	mov	r3, r2
 801950e:	005b      	lsls	r3, r3, #1
 8019510:	4413      	add	r3, r2
 8019512:	00db      	lsls	r3, r3, #3
 8019514:	440b      	add	r3, r1
 8019516:	3314      	adds	r3, #20
 8019518:	2202      	movs	r2, #2
 801951a:	701a      	strb	r2, [r3, #0]
 801951c:	e01e      	b.n	801955c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801951e:	79fa      	ldrb	r2, [r7, #7]
 8019520:	4914      	ldr	r1, [pc, #80]	; (8019574 <etharp_tmr+0x14c>)
 8019522:	4613      	mov	r3, r2
 8019524:	005b      	lsls	r3, r3, #1
 8019526:	4413      	add	r3, r2
 8019528:	00db      	lsls	r3, r3, #3
 801952a:	440b      	add	r3, r1
 801952c:	3314      	adds	r3, #20
 801952e:	781b      	ldrb	r3, [r3, #0]
 8019530:	2b01      	cmp	r3, #1
 8019532:	d113      	bne.n	801955c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019534:	79fa      	ldrb	r2, [r7, #7]
 8019536:	490f      	ldr	r1, [pc, #60]	; (8019574 <etharp_tmr+0x14c>)
 8019538:	4613      	mov	r3, r2
 801953a:	005b      	lsls	r3, r3, #1
 801953c:	4413      	add	r3, r2
 801953e:	00db      	lsls	r3, r3, #3
 8019540:	440b      	add	r3, r1
 8019542:	3308      	adds	r3, #8
 8019544:	6818      	ldr	r0, [r3, #0]
 8019546:	79fa      	ldrb	r2, [r7, #7]
 8019548:	4613      	mov	r3, r2
 801954a:	005b      	lsls	r3, r3, #1
 801954c:	4413      	add	r3, r2
 801954e:	00db      	lsls	r3, r3, #3
 8019550:	4a08      	ldr	r2, [pc, #32]	; (8019574 <etharp_tmr+0x14c>)
 8019552:	4413      	add	r3, r2
 8019554:	3304      	adds	r3, #4
 8019556:	4619      	mov	r1, r3
 8019558:	f000 fe38 	bl	801a1cc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801955c:	79fb      	ldrb	r3, [r7, #7]
 801955e:	3301      	adds	r3, #1
 8019560:	71fb      	strb	r3, [r7, #7]
 8019562:	79fb      	ldrb	r3, [r7, #7]
 8019564:	2b09      	cmp	r3, #9
 8019566:	f67f af65 	bls.w	8019434 <etharp_tmr+0xc>
      }
    }
  }
}
 801956a:	bf00      	nop
 801956c:	3708      	adds	r7, #8
 801956e:	46bd      	mov	sp, r7
 8019570:	bd80      	pop	{r7, pc}
 8019572:	bf00      	nop
 8019574:	20003fa0 	.word	0x20003fa0

08019578 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8019578:	b580      	push	{r7, lr}
 801957a:	b088      	sub	sp, #32
 801957c:	af00      	add	r7, sp, #0
 801957e:	60f8      	str	r0, [r7, #12]
 8019580:	460b      	mov	r3, r1
 8019582:	607a      	str	r2, [r7, #4]
 8019584:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019586:	230a      	movs	r3, #10
 8019588:	77fb      	strb	r3, [r7, #31]
 801958a:	230a      	movs	r3, #10
 801958c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801958e:	230a      	movs	r3, #10
 8019590:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8019592:	2300      	movs	r3, #0
 8019594:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8019596:	230a      	movs	r3, #10
 8019598:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801959a:	2300      	movs	r3, #0
 801959c:	833b      	strh	r3, [r7, #24]
 801959e:	2300      	movs	r3, #0
 80195a0:	82fb      	strh	r3, [r7, #22]
 80195a2:	2300      	movs	r3, #0
 80195a4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80195a6:	2300      	movs	r3, #0
 80195a8:	773b      	strb	r3, [r7, #28]
 80195aa:	e093      	b.n	80196d4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80195ac:	7f3a      	ldrb	r2, [r7, #28]
 80195ae:	4990      	ldr	r1, [pc, #576]	; (80197f0 <etharp_find_entry+0x278>)
 80195b0:	4613      	mov	r3, r2
 80195b2:	005b      	lsls	r3, r3, #1
 80195b4:	4413      	add	r3, r2
 80195b6:	00db      	lsls	r3, r3, #3
 80195b8:	440b      	add	r3, r1
 80195ba:	3314      	adds	r3, #20
 80195bc:	781b      	ldrb	r3, [r3, #0]
 80195be:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80195c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80195c4:	2b0a      	cmp	r3, #10
 80195c6:	d105      	bne.n	80195d4 <etharp_find_entry+0x5c>
 80195c8:	7cfb      	ldrb	r3, [r7, #19]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d102      	bne.n	80195d4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80195ce:	7f3b      	ldrb	r3, [r7, #28]
 80195d0:	777b      	strb	r3, [r7, #29]
 80195d2:	e07c      	b.n	80196ce <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80195d4:	7cfb      	ldrb	r3, [r7, #19]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d079      	beq.n	80196ce <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80195da:	7cfb      	ldrb	r3, [r7, #19]
 80195dc:	2b01      	cmp	r3, #1
 80195de:	d009      	beq.n	80195f4 <etharp_find_entry+0x7c>
 80195e0:	7cfb      	ldrb	r3, [r7, #19]
 80195e2:	2b01      	cmp	r3, #1
 80195e4:	d806      	bhi.n	80195f4 <etharp_find_entry+0x7c>
 80195e6:	4b83      	ldr	r3, [pc, #524]	; (80197f4 <etharp_find_entry+0x27c>)
 80195e8:	f44f 7293 	mov.w	r2, #294	; 0x126
 80195ec:	4982      	ldr	r1, [pc, #520]	; (80197f8 <etharp_find_entry+0x280>)
 80195ee:	4883      	ldr	r0, [pc, #524]	; (80197fc <etharp_find_entry+0x284>)
 80195f0:	f00c fa96 	bl	8025b20 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d00f      	beq.n	801961a <etharp_find_entry+0xa2>
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	6819      	ldr	r1, [r3, #0]
 80195fe:	7f3a      	ldrb	r2, [r7, #28]
 8019600:	487b      	ldr	r0, [pc, #492]	; (80197f0 <etharp_find_entry+0x278>)
 8019602:	4613      	mov	r3, r2
 8019604:	005b      	lsls	r3, r3, #1
 8019606:	4413      	add	r3, r2
 8019608:	00db      	lsls	r3, r3, #3
 801960a:	4403      	add	r3, r0
 801960c:	3304      	adds	r3, #4
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	4299      	cmp	r1, r3
 8019612:	d102      	bne.n	801961a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019614:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8019618:	e0e5      	b.n	80197e6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801961a:	7cfb      	ldrb	r3, [r7, #19]
 801961c:	2b01      	cmp	r3, #1
 801961e:	d13b      	bne.n	8019698 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019620:	7f3a      	ldrb	r2, [r7, #28]
 8019622:	4973      	ldr	r1, [pc, #460]	; (80197f0 <etharp_find_entry+0x278>)
 8019624:	4613      	mov	r3, r2
 8019626:	005b      	lsls	r3, r3, #1
 8019628:	4413      	add	r3, r2
 801962a:	00db      	lsls	r3, r3, #3
 801962c:	440b      	add	r3, r1
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d018      	beq.n	8019666 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8019634:	7f3a      	ldrb	r2, [r7, #28]
 8019636:	496e      	ldr	r1, [pc, #440]	; (80197f0 <etharp_find_entry+0x278>)
 8019638:	4613      	mov	r3, r2
 801963a:	005b      	lsls	r3, r3, #1
 801963c:	4413      	add	r3, r2
 801963e:	00db      	lsls	r3, r3, #3
 8019640:	440b      	add	r3, r1
 8019642:	3312      	adds	r3, #18
 8019644:	881b      	ldrh	r3, [r3, #0]
 8019646:	8b3a      	ldrh	r2, [r7, #24]
 8019648:	429a      	cmp	r2, r3
 801964a:	d840      	bhi.n	80196ce <etharp_find_entry+0x156>
            old_queue = i;
 801964c:	7f3b      	ldrb	r3, [r7, #28]
 801964e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8019650:	7f3a      	ldrb	r2, [r7, #28]
 8019652:	4967      	ldr	r1, [pc, #412]	; (80197f0 <etharp_find_entry+0x278>)
 8019654:	4613      	mov	r3, r2
 8019656:	005b      	lsls	r3, r3, #1
 8019658:	4413      	add	r3, r2
 801965a:	00db      	lsls	r3, r3, #3
 801965c:	440b      	add	r3, r1
 801965e:	3312      	adds	r3, #18
 8019660:	881b      	ldrh	r3, [r3, #0]
 8019662:	833b      	strh	r3, [r7, #24]
 8019664:	e033      	b.n	80196ce <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019666:	7f3a      	ldrb	r2, [r7, #28]
 8019668:	4961      	ldr	r1, [pc, #388]	; (80197f0 <etharp_find_entry+0x278>)
 801966a:	4613      	mov	r3, r2
 801966c:	005b      	lsls	r3, r3, #1
 801966e:	4413      	add	r3, r2
 8019670:	00db      	lsls	r3, r3, #3
 8019672:	440b      	add	r3, r1
 8019674:	3312      	adds	r3, #18
 8019676:	881b      	ldrh	r3, [r3, #0]
 8019678:	8afa      	ldrh	r2, [r7, #22]
 801967a:	429a      	cmp	r2, r3
 801967c:	d827      	bhi.n	80196ce <etharp_find_entry+0x156>
            old_pending = i;
 801967e:	7f3b      	ldrb	r3, [r7, #28]
 8019680:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8019682:	7f3a      	ldrb	r2, [r7, #28]
 8019684:	495a      	ldr	r1, [pc, #360]	; (80197f0 <etharp_find_entry+0x278>)
 8019686:	4613      	mov	r3, r2
 8019688:	005b      	lsls	r3, r3, #1
 801968a:	4413      	add	r3, r2
 801968c:	00db      	lsls	r3, r3, #3
 801968e:	440b      	add	r3, r1
 8019690:	3312      	adds	r3, #18
 8019692:	881b      	ldrh	r3, [r3, #0]
 8019694:	82fb      	strh	r3, [r7, #22]
 8019696:	e01a      	b.n	80196ce <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019698:	7cfb      	ldrb	r3, [r7, #19]
 801969a:	2b01      	cmp	r3, #1
 801969c:	d917      	bls.n	80196ce <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801969e:	7f3a      	ldrb	r2, [r7, #28]
 80196a0:	4953      	ldr	r1, [pc, #332]	; (80197f0 <etharp_find_entry+0x278>)
 80196a2:	4613      	mov	r3, r2
 80196a4:	005b      	lsls	r3, r3, #1
 80196a6:	4413      	add	r3, r2
 80196a8:	00db      	lsls	r3, r3, #3
 80196aa:	440b      	add	r3, r1
 80196ac:	3312      	adds	r3, #18
 80196ae:	881b      	ldrh	r3, [r3, #0]
 80196b0:	8aba      	ldrh	r2, [r7, #20]
 80196b2:	429a      	cmp	r2, r3
 80196b4:	d80b      	bhi.n	80196ce <etharp_find_entry+0x156>
            old_stable = i;
 80196b6:	7f3b      	ldrb	r3, [r7, #28]
 80196b8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80196ba:	7f3a      	ldrb	r2, [r7, #28]
 80196bc:	494c      	ldr	r1, [pc, #304]	; (80197f0 <etharp_find_entry+0x278>)
 80196be:	4613      	mov	r3, r2
 80196c0:	005b      	lsls	r3, r3, #1
 80196c2:	4413      	add	r3, r2
 80196c4:	00db      	lsls	r3, r3, #3
 80196c6:	440b      	add	r3, r1
 80196c8:	3312      	adds	r3, #18
 80196ca:	881b      	ldrh	r3, [r3, #0]
 80196cc:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80196ce:	7f3b      	ldrb	r3, [r7, #28]
 80196d0:	3301      	adds	r3, #1
 80196d2:	773b      	strb	r3, [r7, #28]
 80196d4:	7f3b      	ldrb	r3, [r7, #28]
 80196d6:	2b09      	cmp	r3, #9
 80196d8:	f67f af68 	bls.w	80195ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80196dc:	7afb      	ldrb	r3, [r7, #11]
 80196de:	f003 0302 	and.w	r3, r3, #2
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d108      	bne.n	80196f8 <etharp_find_entry+0x180>
 80196e6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80196ea:	2b0a      	cmp	r3, #10
 80196ec:	d107      	bne.n	80196fe <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80196ee:	7afb      	ldrb	r3, [r7, #11]
 80196f0:	f003 0301 	and.w	r3, r3, #1
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d102      	bne.n	80196fe <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80196f8:	f04f 33ff 	mov.w	r3, #4294967295
 80196fc:	e073      	b.n	80197e6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80196fe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019702:	2b09      	cmp	r3, #9
 8019704:	dc02      	bgt.n	801970c <etharp_find_entry+0x194>
    i = empty;
 8019706:	7f7b      	ldrb	r3, [r7, #29]
 8019708:	773b      	strb	r3, [r7, #28]
 801970a:	e036      	b.n	801977a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801970c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019710:	2b09      	cmp	r3, #9
 8019712:	dc13      	bgt.n	801973c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8019714:	7fbb      	ldrb	r3, [r7, #30]
 8019716:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019718:	7f3a      	ldrb	r2, [r7, #28]
 801971a:	4935      	ldr	r1, [pc, #212]	; (80197f0 <etharp_find_entry+0x278>)
 801971c:	4613      	mov	r3, r2
 801971e:	005b      	lsls	r3, r3, #1
 8019720:	4413      	add	r3, r2
 8019722:	00db      	lsls	r3, r3, #3
 8019724:	440b      	add	r3, r1
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d018      	beq.n	801975e <etharp_find_entry+0x1e6>
 801972c:	4b31      	ldr	r3, [pc, #196]	; (80197f4 <etharp_find_entry+0x27c>)
 801972e:	f240 126f 	movw	r2, #367	; 0x16f
 8019732:	4933      	ldr	r1, [pc, #204]	; (8019800 <etharp_find_entry+0x288>)
 8019734:	4831      	ldr	r0, [pc, #196]	; (80197fc <etharp_find_entry+0x284>)
 8019736:	f00c f9f3 	bl	8025b20 <iprintf>
 801973a:	e010      	b.n	801975e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801973c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019740:	2b09      	cmp	r3, #9
 8019742:	dc02      	bgt.n	801974a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8019744:	7ffb      	ldrb	r3, [r7, #31]
 8019746:	773b      	strb	r3, [r7, #28]
 8019748:	e009      	b.n	801975e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801974a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801974e:	2b09      	cmp	r3, #9
 8019750:	dc02      	bgt.n	8019758 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8019752:	7efb      	ldrb	r3, [r7, #27]
 8019754:	773b      	strb	r3, [r7, #28]
 8019756:	e002      	b.n	801975e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8019758:	f04f 33ff 	mov.w	r3, #4294967295
 801975c:	e043      	b.n	80197e6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801975e:	7f3b      	ldrb	r3, [r7, #28]
 8019760:	2b09      	cmp	r3, #9
 8019762:	d906      	bls.n	8019772 <etharp_find_entry+0x1fa>
 8019764:	4b23      	ldr	r3, [pc, #140]	; (80197f4 <etharp_find_entry+0x27c>)
 8019766:	f240 1281 	movw	r2, #385	; 0x181
 801976a:	4926      	ldr	r1, [pc, #152]	; (8019804 <etharp_find_entry+0x28c>)
 801976c:	4823      	ldr	r0, [pc, #140]	; (80197fc <etharp_find_entry+0x284>)
 801976e:	f00c f9d7 	bl	8025b20 <iprintf>
    etharp_free_entry(i);
 8019772:	7f3b      	ldrb	r3, [r7, #28]
 8019774:	4618      	mov	r0, r3
 8019776:	f7ff fe25 	bl	80193c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801977a:	7f3b      	ldrb	r3, [r7, #28]
 801977c:	2b09      	cmp	r3, #9
 801977e:	d906      	bls.n	801978e <etharp_find_entry+0x216>
 8019780:	4b1c      	ldr	r3, [pc, #112]	; (80197f4 <etharp_find_entry+0x27c>)
 8019782:	f240 1285 	movw	r2, #389	; 0x185
 8019786:	491f      	ldr	r1, [pc, #124]	; (8019804 <etharp_find_entry+0x28c>)
 8019788:	481c      	ldr	r0, [pc, #112]	; (80197fc <etharp_find_entry+0x284>)
 801978a:	f00c f9c9 	bl	8025b20 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801978e:	7f3a      	ldrb	r2, [r7, #28]
 8019790:	4917      	ldr	r1, [pc, #92]	; (80197f0 <etharp_find_entry+0x278>)
 8019792:	4613      	mov	r3, r2
 8019794:	005b      	lsls	r3, r3, #1
 8019796:	4413      	add	r3, r2
 8019798:	00db      	lsls	r3, r3, #3
 801979a:	440b      	add	r3, r1
 801979c:	3314      	adds	r3, #20
 801979e:	781b      	ldrb	r3, [r3, #0]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d006      	beq.n	80197b2 <etharp_find_entry+0x23a>
 80197a4:	4b13      	ldr	r3, [pc, #76]	; (80197f4 <etharp_find_entry+0x27c>)
 80197a6:	f240 1287 	movw	r2, #391	; 0x187
 80197aa:	4917      	ldr	r1, [pc, #92]	; (8019808 <etharp_find_entry+0x290>)
 80197ac:	4813      	ldr	r0, [pc, #76]	; (80197fc <etharp_find_entry+0x284>)
 80197ae:	f00c f9b7 	bl	8025b20 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d00a      	beq.n	80197ce <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80197b8:	7f3a      	ldrb	r2, [r7, #28]
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	6819      	ldr	r1, [r3, #0]
 80197be:	480c      	ldr	r0, [pc, #48]	; (80197f0 <etharp_find_entry+0x278>)
 80197c0:	4613      	mov	r3, r2
 80197c2:	005b      	lsls	r3, r3, #1
 80197c4:	4413      	add	r3, r2
 80197c6:	00db      	lsls	r3, r3, #3
 80197c8:	4403      	add	r3, r0
 80197ca:	3304      	adds	r3, #4
 80197cc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80197ce:	7f3a      	ldrb	r2, [r7, #28]
 80197d0:	4907      	ldr	r1, [pc, #28]	; (80197f0 <etharp_find_entry+0x278>)
 80197d2:	4613      	mov	r3, r2
 80197d4:	005b      	lsls	r3, r3, #1
 80197d6:	4413      	add	r3, r2
 80197d8:	00db      	lsls	r3, r3, #3
 80197da:	440b      	add	r3, r1
 80197dc:	3312      	adds	r3, #18
 80197de:	2200      	movs	r2, #0
 80197e0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80197e2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80197e6:	4618      	mov	r0, r3
 80197e8:	3720      	adds	r7, #32
 80197ea:	46bd      	mov	sp, r7
 80197ec:	bd80      	pop	{r7, pc}
 80197ee:	bf00      	nop
 80197f0:	20003fa0 	.word	0x20003fa0
 80197f4:	080270d4 	.word	0x080270d4
 80197f8:	0802710c 	.word	0x0802710c
 80197fc:	0802714c 	.word	0x0802714c
 8019800:	08027174 	.word	0x08027174
 8019804:	0802718c 	.word	0x0802718c
 8019808:	080271a0 	.word	0x080271a0

0801980c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801980c:	b580      	push	{r7, lr}
 801980e:	b088      	sub	sp, #32
 8019810:	af02      	add	r7, sp, #8
 8019812:	60f8      	str	r0, [r7, #12]
 8019814:	60b9      	str	r1, [r7, #8]
 8019816:	607a      	str	r2, [r7, #4]
 8019818:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019820:	2b06      	cmp	r3, #6
 8019822:	d006      	beq.n	8019832 <etharp_update_arp_entry+0x26>
 8019824:	4b48      	ldr	r3, [pc, #288]	; (8019948 <etharp_update_arp_entry+0x13c>)
 8019826:	f240 12ab 	movw	r2, #427	; 0x1ab
 801982a:	4948      	ldr	r1, [pc, #288]	; (801994c <etharp_update_arp_entry+0x140>)
 801982c:	4848      	ldr	r0, [pc, #288]	; (8019950 <etharp_update_arp_entry+0x144>)
 801982e:	f00c f977 	bl	8025b20 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019832:	68bb      	ldr	r3, [r7, #8]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d012      	beq.n	801985e <etharp_update_arp_entry+0x52>
 8019838:	68bb      	ldr	r3, [r7, #8]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d00e      	beq.n	801985e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019840:	68bb      	ldr	r3, [r7, #8]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	68f9      	ldr	r1, [r7, #12]
 8019846:	4618      	mov	r0, r3
 8019848:	f001 f8d6 	bl	801a9f8 <ip4_addr_isbroadcast_u32>
 801984c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801984e:	2b00      	cmp	r3, #0
 8019850:	d105      	bne.n	801985e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019852:	68bb      	ldr	r3, [r7, #8]
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801985a:	2be0      	cmp	r3, #224	; 0xe0
 801985c:	d102      	bne.n	8019864 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801985e:	f06f 030f 	mvn.w	r3, #15
 8019862:	e06c      	b.n	801993e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019864:	78fb      	ldrb	r3, [r7, #3]
 8019866:	68fa      	ldr	r2, [r7, #12]
 8019868:	4619      	mov	r1, r3
 801986a:	68b8      	ldr	r0, [r7, #8]
 801986c:	f7ff fe84 	bl	8019578 <etharp_find_entry>
 8019870:	4603      	mov	r3, r0
 8019872:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019874:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019878:	2b00      	cmp	r3, #0
 801987a:	da02      	bge.n	8019882 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801987c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019880:	e05d      	b.n	801993e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019882:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019886:	4933      	ldr	r1, [pc, #204]	; (8019954 <etharp_update_arp_entry+0x148>)
 8019888:	4613      	mov	r3, r2
 801988a:	005b      	lsls	r3, r3, #1
 801988c:	4413      	add	r3, r2
 801988e:	00db      	lsls	r3, r3, #3
 8019890:	440b      	add	r3, r1
 8019892:	3314      	adds	r3, #20
 8019894:	2202      	movs	r2, #2
 8019896:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019898:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801989c:	492d      	ldr	r1, [pc, #180]	; (8019954 <etharp_update_arp_entry+0x148>)
 801989e:	4613      	mov	r3, r2
 80198a0:	005b      	lsls	r3, r3, #1
 80198a2:	4413      	add	r3, r2
 80198a4:	00db      	lsls	r3, r3, #3
 80198a6:	440b      	add	r3, r1
 80198a8:	3308      	adds	r3, #8
 80198aa:	68fa      	ldr	r2, [r7, #12]
 80198ac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80198ae:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80198b2:	4613      	mov	r3, r2
 80198b4:	005b      	lsls	r3, r3, #1
 80198b6:	4413      	add	r3, r2
 80198b8:	00db      	lsls	r3, r3, #3
 80198ba:	3308      	adds	r3, #8
 80198bc:	4a25      	ldr	r2, [pc, #148]	; (8019954 <etharp_update_arp_entry+0x148>)
 80198be:	4413      	add	r3, r2
 80198c0:	3304      	adds	r3, #4
 80198c2:	2206      	movs	r2, #6
 80198c4:	6879      	ldr	r1, [r7, #4]
 80198c6:	4618      	mov	r0, r3
 80198c8:	f00c fdfd 	bl	80264c6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80198cc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80198d0:	4920      	ldr	r1, [pc, #128]	; (8019954 <etharp_update_arp_entry+0x148>)
 80198d2:	4613      	mov	r3, r2
 80198d4:	005b      	lsls	r3, r3, #1
 80198d6:	4413      	add	r3, r2
 80198d8:	00db      	lsls	r3, r3, #3
 80198da:	440b      	add	r3, r1
 80198dc:	3312      	adds	r3, #18
 80198de:	2200      	movs	r2, #0
 80198e0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80198e2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80198e6:	491b      	ldr	r1, [pc, #108]	; (8019954 <etharp_update_arp_entry+0x148>)
 80198e8:	4613      	mov	r3, r2
 80198ea:	005b      	lsls	r3, r3, #1
 80198ec:	4413      	add	r3, r2
 80198ee:	00db      	lsls	r3, r3, #3
 80198f0:	440b      	add	r3, r1
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d021      	beq.n	801993c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80198f8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80198fc:	4915      	ldr	r1, [pc, #84]	; (8019954 <etharp_update_arp_entry+0x148>)
 80198fe:	4613      	mov	r3, r2
 8019900:	005b      	lsls	r3, r3, #1
 8019902:	4413      	add	r3, r2
 8019904:	00db      	lsls	r3, r3, #3
 8019906:	440b      	add	r3, r1
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801990c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019910:	4910      	ldr	r1, [pc, #64]	; (8019954 <etharp_update_arp_entry+0x148>)
 8019912:	4613      	mov	r3, r2
 8019914:	005b      	lsls	r3, r3, #1
 8019916:	4413      	add	r3, r2
 8019918:	00db      	lsls	r3, r3, #3
 801991a:	440b      	add	r3, r1
 801991c:	2200      	movs	r2, #0
 801991e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8019926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801992a:	9300      	str	r3, [sp, #0]
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	6939      	ldr	r1, [r7, #16]
 8019930:	68f8      	ldr	r0, [r7, #12]
 8019932:	f009 fabf 	bl	8022eb4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019936:	6938      	ldr	r0, [r7, #16]
 8019938:	f003 f996 	bl	801cc68 <pbuf_free>
  }
  return ERR_OK;
 801993c:	2300      	movs	r3, #0
}
 801993e:	4618      	mov	r0, r3
 8019940:	3718      	adds	r7, #24
 8019942:	46bd      	mov	sp, r7
 8019944:	bd80      	pop	{r7, pc}
 8019946:	bf00      	nop
 8019948:	080270d4 	.word	0x080270d4
 801994c:	080271cc 	.word	0x080271cc
 8019950:	0802714c 	.word	0x0802714c
 8019954:	20003fa0 	.word	0x20003fa0

08019958 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b084      	sub	sp, #16
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019960:	2300      	movs	r3, #0
 8019962:	73fb      	strb	r3, [r7, #15]
 8019964:	e01f      	b.n	80199a6 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8019966:	7bfa      	ldrb	r2, [r7, #15]
 8019968:	4912      	ldr	r1, [pc, #72]	; (80199b4 <etharp_cleanup_netif+0x5c>)
 801996a:	4613      	mov	r3, r2
 801996c:	005b      	lsls	r3, r3, #1
 801996e:	4413      	add	r3, r2
 8019970:	00db      	lsls	r3, r3, #3
 8019972:	440b      	add	r3, r1
 8019974:	3314      	adds	r3, #20
 8019976:	781b      	ldrb	r3, [r3, #0]
 8019978:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801997a:	7bbb      	ldrb	r3, [r7, #14]
 801997c:	2b00      	cmp	r3, #0
 801997e:	d00f      	beq.n	80199a0 <etharp_cleanup_netif+0x48>
 8019980:	7bfa      	ldrb	r2, [r7, #15]
 8019982:	490c      	ldr	r1, [pc, #48]	; (80199b4 <etharp_cleanup_netif+0x5c>)
 8019984:	4613      	mov	r3, r2
 8019986:	005b      	lsls	r3, r3, #1
 8019988:	4413      	add	r3, r2
 801998a:	00db      	lsls	r3, r3, #3
 801998c:	440b      	add	r3, r1
 801998e:	3308      	adds	r3, #8
 8019990:	681a      	ldr	r2, [r3, #0]
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	429a      	cmp	r2, r3
 8019996:	d103      	bne.n	80199a0 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8019998:	7bfb      	ldrb	r3, [r7, #15]
 801999a:	4618      	mov	r0, r3
 801999c:	f7ff fd12 	bl	80193c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80199a0:	7bfb      	ldrb	r3, [r7, #15]
 80199a2:	3301      	adds	r3, #1
 80199a4:	73fb      	strb	r3, [r7, #15]
 80199a6:	7bfb      	ldrb	r3, [r7, #15]
 80199a8:	2b09      	cmp	r3, #9
 80199aa:	d9dc      	bls.n	8019966 <etharp_cleanup_netif+0xe>
    }
  }
}
 80199ac:	bf00      	nop
 80199ae:	3710      	adds	r7, #16
 80199b0:	46bd      	mov	sp, r7
 80199b2:	bd80      	pop	{r7, pc}
 80199b4:	20003fa0 	.word	0x20003fa0

080199b8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80199b8:	b5b0      	push	{r4, r5, r7, lr}
 80199ba:	b08a      	sub	sp, #40	; 0x28
 80199bc:	af04      	add	r7, sp, #16
 80199be:	6078      	str	r0, [r7, #4]
 80199c0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80199c2:	683b      	ldr	r3, [r7, #0]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d107      	bne.n	80199d8 <etharp_input+0x20>
 80199c8:	4b3d      	ldr	r3, [pc, #244]	; (8019ac0 <etharp_input+0x108>)
 80199ca:	f44f 7222 	mov.w	r2, #648	; 0x288
 80199ce:	493d      	ldr	r1, [pc, #244]	; (8019ac4 <etharp_input+0x10c>)
 80199d0:	483d      	ldr	r0, [pc, #244]	; (8019ac8 <etharp_input+0x110>)
 80199d2:	f00c f8a5 	bl	8025b20 <iprintf>
 80199d6:	e06f      	b.n	8019ab8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	685b      	ldr	r3, [r3, #4]
 80199dc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80199de:	693b      	ldr	r3, [r7, #16]
 80199e0:	881b      	ldrh	r3, [r3, #0]
 80199e2:	b29b      	uxth	r3, r3
 80199e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80199e8:	d10c      	bne.n	8019a04 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80199ea:	693b      	ldr	r3, [r7, #16]
 80199ec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80199ee:	2b06      	cmp	r3, #6
 80199f0:	d108      	bne.n	8019a04 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80199f2:	693b      	ldr	r3, [r7, #16]
 80199f4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80199f6:	2b04      	cmp	r3, #4
 80199f8:	d104      	bne.n	8019a04 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80199fa:	693b      	ldr	r3, [r7, #16]
 80199fc:	885b      	ldrh	r3, [r3, #2]
 80199fe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019a00:	2b08      	cmp	r3, #8
 8019a02:	d003      	beq.n	8019a0c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019a04:	6878      	ldr	r0, [r7, #4]
 8019a06:	f003 f92f 	bl	801cc68 <pbuf_free>
    return;
 8019a0a:	e055      	b.n	8019ab8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8019a0c:	693b      	ldr	r3, [r7, #16]
 8019a0e:	330e      	adds	r3, #14
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8019a14:	693b      	ldr	r3, [r7, #16]
 8019a16:	3318      	adds	r3, #24
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019a1c:	683b      	ldr	r3, [r7, #0]
 8019a1e:	3304      	adds	r3, #4
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d102      	bne.n	8019a2c <etharp_input+0x74>
    for_us = 0;
 8019a26:	2300      	movs	r3, #0
 8019a28:	75fb      	strb	r3, [r7, #23]
 8019a2a:	e009      	b.n	8019a40 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019a2c:	68ba      	ldr	r2, [r7, #8]
 8019a2e:	683b      	ldr	r3, [r7, #0]
 8019a30:	3304      	adds	r3, #4
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	429a      	cmp	r2, r3
 8019a36:	bf0c      	ite	eq
 8019a38:	2301      	moveq	r3, #1
 8019a3a:	2300      	movne	r3, #0
 8019a3c:	b2db      	uxtb	r3, r3
 8019a3e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019a40:	693b      	ldr	r3, [r7, #16]
 8019a42:	f103 0208 	add.w	r2, r3, #8
 8019a46:	7dfb      	ldrb	r3, [r7, #23]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d001      	beq.n	8019a50 <etharp_input+0x98>
 8019a4c:	2301      	movs	r3, #1
 8019a4e:	e000      	b.n	8019a52 <etharp_input+0x9a>
 8019a50:	2302      	movs	r3, #2
 8019a52:	f107 010c 	add.w	r1, r7, #12
 8019a56:	6838      	ldr	r0, [r7, #0]
 8019a58:	f7ff fed8 	bl	801980c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019a5c:	693b      	ldr	r3, [r7, #16]
 8019a5e:	88db      	ldrh	r3, [r3, #6]
 8019a60:	b29b      	uxth	r3, r3
 8019a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019a66:	d003      	beq.n	8019a70 <etharp_input+0xb8>
 8019a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019a6c:	d01e      	beq.n	8019aac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8019a6e:	e020      	b.n	8019ab2 <etharp_input+0xfa>
    if (for_us) {
 8019a70:	7dfb      	ldrb	r3, [r7, #23]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d01c      	beq.n	8019ab0 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8019a7c:	693b      	ldr	r3, [r7, #16]
 8019a7e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019a82:	683b      	ldr	r3, [r7, #0]
 8019a84:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8019a88:	683b      	ldr	r3, [r7, #0]
 8019a8a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8019a8c:	693a      	ldr	r2, [r7, #16]
 8019a8e:	3208      	adds	r2, #8
      etharp_raw(netif,
 8019a90:	2102      	movs	r1, #2
 8019a92:	9103      	str	r1, [sp, #12]
 8019a94:	f107 010c 	add.w	r1, r7, #12
 8019a98:	9102      	str	r1, [sp, #8]
 8019a9a:	9201      	str	r2, [sp, #4]
 8019a9c:	9300      	str	r3, [sp, #0]
 8019a9e:	462b      	mov	r3, r5
 8019aa0:	4622      	mov	r2, r4
 8019aa2:	4601      	mov	r1, r0
 8019aa4:	6838      	ldr	r0, [r7, #0]
 8019aa6:	f000 fae3 	bl	801a070 <etharp_raw>
    break;
 8019aaa:	e001      	b.n	8019ab0 <etharp_input+0xf8>
    break;
 8019aac:	bf00      	nop
 8019aae:	e000      	b.n	8019ab2 <etharp_input+0xfa>
    break;
 8019ab0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019ab2:	6878      	ldr	r0, [r7, #4]
 8019ab4:	f003 f8d8 	bl	801cc68 <pbuf_free>
}
 8019ab8:	3718      	adds	r7, #24
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bdb0      	pop	{r4, r5, r7, pc}
 8019abe:	bf00      	nop
 8019ac0:	080270d4 	.word	0x080270d4
 8019ac4:	08027224 	.word	0x08027224
 8019ac8:	0802714c 	.word	0x0802714c

08019acc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b086      	sub	sp, #24
 8019ad0:	af02      	add	r7, sp, #8
 8019ad2:	60f8      	str	r0, [r7, #12]
 8019ad4:	60b9      	str	r1, [r7, #8]
 8019ad6:	4613      	mov	r3, r2
 8019ad8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8019ada:	79fa      	ldrb	r2, [r7, #7]
 8019adc:	4944      	ldr	r1, [pc, #272]	; (8019bf0 <etharp_output_to_arp_index+0x124>)
 8019ade:	4613      	mov	r3, r2
 8019ae0:	005b      	lsls	r3, r3, #1
 8019ae2:	4413      	add	r3, r2
 8019ae4:	00db      	lsls	r3, r3, #3
 8019ae6:	440b      	add	r3, r1
 8019ae8:	3314      	adds	r3, #20
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	2b01      	cmp	r3, #1
 8019aee:	d806      	bhi.n	8019afe <etharp_output_to_arp_index+0x32>
 8019af0:	4b40      	ldr	r3, [pc, #256]	; (8019bf4 <etharp_output_to_arp_index+0x128>)
 8019af2:	f240 22ed 	movw	r2, #749	; 0x2ed
 8019af6:	4940      	ldr	r1, [pc, #256]	; (8019bf8 <etharp_output_to_arp_index+0x12c>)
 8019af8:	4840      	ldr	r0, [pc, #256]	; (8019bfc <etharp_output_to_arp_index+0x130>)
 8019afa:	f00c f811 	bl	8025b20 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8019afe:	79fa      	ldrb	r2, [r7, #7]
 8019b00:	493b      	ldr	r1, [pc, #236]	; (8019bf0 <etharp_output_to_arp_index+0x124>)
 8019b02:	4613      	mov	r3, r2
 8019b04:	005b      	lsls	r3, r3, #1
 8019b06:	4413      	add	r3, r2
 8019b08:	00db      	lsls	r3, r3, #3
 8019b0a:	440b      	add	r3, r1
 8019b0c:	3314      	adds	r3, #20
 8019b0e:	781b      	ldrb	r3, [r3, #0]
 8019b10:	2b02      	cmp	r3, #2
 8019b12:	d153      	bne.n	8019bbc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019b14:	79fa      	ldrb	r2, [r7, #7]
 8019b16:	4936      	ldr	r1, [pc, #216]	; (8019bf0 <etharp_output_to_arp_index+0x124>)
 8019b18:	4613      	mov	r3, r2
 8019b1a:	005b      	lsls	r3, r3, #1
 8019b1c:	4413      	add	r3, r2
 8019b1e:	00db      	lsls	r3, r3, #3
 8019b20:	440b      	add	r3, r1
 8019b22:	3312      	adds	r3, #18
 8019b24:	881b      	ldrh	r3, [r3, #0]
 8019b26:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8019b2a:	d919      	bls.n	8019b60 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019b2c:	79fa      	ldrb	r2, [r7, #7]
 8019b2e:	4613      	mov	r3, r2
 8019b30:	005b      	lsls	r3, r3, #1
 8019b32:	4413      	add	r3, r2
 8019b34:	00db      	lsls	r3, r3, #3
 8019b36:	4a2e      	ldr	r2, [pc, #184]	; (8019bf0 <etharp_output_to_arp_index+0x124>)
 8019b38:	4413      	add	r3, r2
 8019b3a:	3304      	adds	r3, #4
 8019b3c:	4619      	mov	r1, r3
 8019b3e:	68f8      	ldr	r0, [r7, #12]
 8019b40:	f000 fb44 	bl	801a1cc <etharp_request>
 8019b44:	4603      	mov	r3, r0
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d138      	bne.n	8019bbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019b4a:	79fa      	ldrb	r2, [r7, #7]
 8019b4c:	4928      	ldr	r1, [pc, #160]	; (8019bf0 <etharp_output_to_arp_index+0x124>)
 8019b4e:	4613      	mov	r3, r2
 8019b50:	005b      	lsls	r3, r3, #1
 8019b52:	4413      	add	r3, r2
 8019b54:	00db      	lsls	r3, r3, #3
 8019b56:	440b      	add	r3, r1
 8019b58:	3314      	adds	r3, #20
 8019b5a:	2203      	movs	r2, #3
 8019b5c:	701a      	strb	r2, [r3, #0]
 8019b5e:	e02d      	b.n	8019bbc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019b60:	79fa      	ldrb	r2, [r7, #7]
 8019b62:	4923      	ldr	r1, [pc, #140]	; (8019bf0 <etharp_output_to_arp_index+0x124>)
 8019b64:	4613      	mov	r3, r2
 8019b66:	005b      	lsls	r3, r3, #1
 8019b68:	4413      	add	r3, r2
 8019b6a:	00db      	lsls	r3, r3, #3
 8019b6c:	440b      	add	r3, r1
 8019b6e:	3312      	adds	r3, #18
 8019b70:	881b      	ldrh	r3, [r3, #0]
 8019b72:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8019b76:	d321      	bcc.n	8019bbc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019b78:	79fa      	ldrb	r2, [r7, #7]
 8019b7a:	4613      	mov	r3, r2
 8019b7c:	005b      	lsls	r3, r3, #1
 8019b7e:	4413      	add	r3, r2
 8019b80:	00db      	lsls	r3, r3, #3
 8019b82:	4a1b      	ldr	r2, [pc, #108]	; (8019bf0 <etharp_output_to_arp_index+0x124>)
 8019b84:	4413      	add	r3, r2
 8019b86:	1d19      	adds	r1, r3, #4
 8019b88:	79fa      	ldrb	r2, [r7, #7]
 8019b8a:	4613      	mov	r3, r2
 8019b8c:	005b      	lsls	r3, r3, #1
 8019b8e:	4413      	add	r3, r2
 8019b90:	00db      	lsls	r3, r3, #3
 8019b92:	3308      	adds	r3, #8
 8019b94:	4a16      	ldr	r2, [pc, #88]	; (8019bf0 <etharp_output_to_arp_index+0x124>)
 8019b96:	4413      	add	r3, r2
 8019b98:	3304      	adds	r3, #4
 8019b9a:	461a      	mov	r2, r3
 8019b9c:	68f8      	ldr	r0, [r7, #12]
 8019b9e:	f000 faf3 	bl	801a188 <etharp_request_dst>
 8019ba2:	4603      	mov	r3, r0
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d109      	bne.n	8019bbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019ba8:	79fa      	ldrb	r2, [r7, #7]
 8019baa:	4911      	ldr	r1, [pc, #68]	; (8019bf0 <etharp_output_to_arp_index+0x124>)
 8019bac:	4613      	mov	r3, r2
 8019bae:	005b      	lsls	r3, r3, #1
 8019bb0:	4413      	add	r3, r2
 8019bb2:	00db      	lsls	r3, r3, #3
 8019bb4:	440b      	add	r3, r1
 8019bb6:	3314      	adds	r3, #20
 8019bb8:	2203      	movs	r2, #3
 8019bba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8019bc2:	79fa      	ldrb	r2, [r7, #7]
 8019bc4:	4613      	mov	r3, r2
 8019bc6:	005b      	lsls	r3, r3, #1
 8019bc8:	4413      	add	r3, r2
 8019bca:	00db      	lsls	r3, r3, #3
 8019bcc:	3308      	adds	r3, #8
 8019bce:	4a08      	ldr	r2, [pc, #32]	; (8019bf0 <etharp_output_to_arp_index+0x124>)
 8019bd0:	4413      	add	r3, r2
 8019bd2:	1d1a      	adds	r2, r3, #4
 8019bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019bd8:	9300      	str	r3, [sp, #0]
 8019bda:	4613      	mov	r3, r2
 8019bdc:	460a      	mov	r2, r1
 8019bde:	68b9      	ldr	r1, [r7, #8]
 8019be0:	68f8      	ldr	r0, [r7, #12]
 8019be2:	f009 f967 	bl	8022eb4 <ethernet_output>
 8019be6:	4603      	mov	r3, r0
}
 8019be8:	4618      	mov	r0, r3
 8019bea:	3710      	adds	r7, #16
 8019bec:	46bd      	mov	sp, r7
 8019bee:	bd80      	pop	{r7, pc}
 8019bf0:	20003fa0 	.word	0x20003fa0
 8019bf4:	080270d4 	.word	0x080270d4
 8019bf8:	08027244 	.word	0x08027244
 8019bfc:	0802714c 	.word	0x0802714c

08019c00 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b08a      	sub	sp, #40	; 0x28
 8019c04:	af02      	add	r7, sp, #8
 8019c06:	60f8      	str	r0, [r7, #12]
 8019c08:	60b9      	str	r1, [r7, #8]
 8019c0a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d106      	bne.n	8019c24 <etharp_output+0x24>
 8019c16:	4b69      	ldr	r3, [pc, #420]	; (8019dbc <etharp_output+0x1bc>)
 8019c18:	f240 321b 	movw	r2, #795	; 0x31b
 8019c1c:	4968      	ldr	r1, [pc, #416]	; (8019dc0 <etharp_output+0x1c0>)
 8019c1e:	4869      	ldr	r0, [pc, #420]	; (8019dc4 <etharp_output+0x1c4>)
 8019c20:	f00b ff7e 	bl	8025b20 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019c24:	68bb      	ldr	r3, [r7, #8]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d106      	bne.n	8019c38 <etharp_output+0x38>
 8019c2a:	4b64      	ldr	r3, [pc, #400]	; (8019dbc <etharp_output+0x1bc>)
 8019c2c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8019c30:	4965      	ldr	r1, [pc, #404]	; (8019dc8 <etharp_output+0x1c8>)
 8019c32:	4864      	ldr	r0, [pc, #400]	; (8019dc4 <etharp_output+0x1c4>)
 8019c34:	f00b ff74 	bl	8025b20 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d106      	bne.n	8019c4c <etharp_output+0x4c>
 8019c3e:	4b5f      	ldr	r3, [pc, #380]	; (8019dbc <etharp_output+0x1bc>)
 8019c40:	f240 321d 	movw	r2, #797	; 0x31d
 8019c44:	4961      	ldr	r1, [pc, #388]	; (8019dcc <etharp_output+0x1cc>)
 8019c46:	485f      	ldr	r0, [pc, #380]	; (8019dc4 <etharp_output+0x1c4>)
 8019c48:	f00b ff6a 	bl	8025b20 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	68f9      	ldr	r1, [r7, #12]
 8019c52:	4618      	mov	r0, r3
 8019c54:	f000 fed0 	bl	801a9f8 <ip4_addr_isbroadcast_u32>
 8019c58:	4603      	mov	r3, r0
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d002      	beq.n	8019c64 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019c5e:	4b5c      	ldr	r3, [pc, #368]	; (8019dd0 <etharp_output+0x1d0>)
 8019c60:	61fb      	str	r3, [r7, #28]
 8019c62:	e09b      	b.n	8019d9c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019c6c:	2be0      	cmp	r3, #224	; 0xe0
 8019c6e:	d118      	bne.n	8019ca2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019c70:	2301      	movs	r3, #1
 8019c72:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019c74:	2300      	movs	r3, #0
 8019c76:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019c78:	235e      	movs	r3, #94	; 0x5e
 8019c7a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	3301      	adds	r3, #1
 8019c80:	781b      	ldrb	r3, [r3, #0]
 8019c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c86:	b2db      	uxtb	r3, r3
 8019c88:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	3302      	adds	r3, #2
 8019c8e:	781b      	ldrb	r3, [r3, #0]
 8019c90:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	3303      	adds	r3, #3
 8019c96:	781b      	ldrb	r3, [r3, #0]
 8019c98:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8019c9a:	f107 0310 	add.w	r3, r7, #16
 8019c9e:	61fb      	str	r3, [r7, #28]
 8019ca0:	e07c      	b.n	8019d9c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	681a      	ldr	r2, [r3, #0]
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	3304      	adds	r3, #4
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	405a      	eors	r2, r3
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	3308      	adds	r3, #8
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	4013      	ands	r3, r2
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d012      	beq.n	8019ce0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019cc0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019cc4:	4293      	cmp	r3, r2
 8019cc6:	d00b      	beq.n	8019ce0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	330c      	adds	r3, #12
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d003      	beq.n	8019cda <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	330c      	adds	r3, #12
 8019cd6:	61bb      	str	r3, [r7, #24]
 8019cd8:	e002      	b.n	8019ce0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019cda:	f06f 0303 	mvn.w	r3, #3
 8019cde:	e069      	b.n	8019db4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019ce0:	4b3c      	ldr	r3, [pc, #240]	; (8019dd4 <etharp_output+0x1d4>)
 8019ce2:	781b      	ldrb	r3, [r3, #0]
 8019ce4:	4619      	mov	r1, r3
 8019ce6:	4a3c      	ldr	r2, [pc, #240]	; (8019dd8 <etharp_output+0x1d8>)
 8019ce8:	460b      	mov	r3, r1
 8019cea:	005b      	lsls	r3, r3, #1
 8019cec:	440b      	add	r3, r1
 8019cee:	00db      	lsls	r3, r3, #3
 8019cf0:	4413      	add	r3, r2
 8019cf2:	3314      	adds	r3, #20
 8019cf4:	781b      	ldrb	r3, [r3, #0]
 8019cf6:	2b01      	cmp	r3, #1
 8019cf8:	d917      	bls.n	8019d2a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019cfa:	69bb      	ldr	r3, [r7, #24]
 8019cfc:	681a      	ldr	r2, [r3, #0]
 8019cfe:	4b35      	ldr	r3, [pc, #212]	; (8019dd4 <etharp_output+0x1d4>)
 8019d00:	781b      	ldrb	r3, [r3, #0]
 8019d02:	4618      	mov	r0, r3
 8019d04:	4934      	ldr	r1, [pc, #208]	; (8019dd8 <etharp_output+0x1d8>)
 8019d06:	4603      	mov	r3, r0
 8019d08:	005b      	lsls	r3, r3, #1
 8019d0a:	4403      	add	r3, r0
 8019d0c:	00db      	lsls	r3, r3, #3
 8019d0e:	440b      	add	r3, r1
 8019d10:	3304      	adds	r3, #4
 8019d12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019d14:	429a      	cmp	r2, r3
 8019d16:	d108      	bne.n	8019d2a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019d18:	4b2e      	ldr	r3, [pc, #184]	; (8019dd4 <etharp_output+0x1d4>)
 8019d1a:	781b      	ldrb	r3, [r3, #0]
 8019d1c:	461a      	mov	r2, r3
 8019d1e:	68b9      	ldr	r1, [r7, #8]
 8019d20:	68f8      	ldr	r0, [r7, #12]
 8019d22:	f7ff fed3 	bl	8019acc <etharp_output_to_arp_index>
 8019d26:	4603      	mov	r3, r0
 8019d28:	e044      	b.n	8019db4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	75fb      	strb	r3, [r7, #23]
 8019d2e:	e02a      	b.n	8019d86 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019d30:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019d34:	4928      	ldr	r1, [pc, #160]	; (8019dd8 <etharp_output+0x1d8>)
 8019d36:	4613      	mov	r3, r2
 8019d38:	005b      	lsls	r3, r3, #1
 8019d3a:	4413      	add	r3, r2
 8019d3c:	00db      	lsls	r3, r3, #3
 8019d3e:	440b      	add	r3, r1
 8019d40:	3314      	adds	r3, #20
 8019d42:	781b      	ldrb	r3, [r3, #0]
 8019d44:	2b01      	cmp	r3, #1
 8019d46:	d918      	bls.n	8019d7a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019d48:	69bb      	ldr	r3, [r7, #24]
 8019d4a:	6819      	ldr	r1, [r3, #0]
 8019d4c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019d50:	4821      	ldr	r0, [pc, #132]	; (8019dd8 <etharp_output+0x1d8>)
 8019d52:	4613      	mov	r3, r2
 8019d54:	005b      	lsls	r3, r3, #1
 8019d56:	4413      	add	r3, r2
 8019d58:	00db      	lsls	r3, r3, #3
 8019d5a:	4403      	add	r3, r0
 8019d5c:	3304      	adds	r3, #4
 8019d5e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019d60:	4299      	cmp	r1, r3
 8019d62:	d10a      	bne.n	8019d7a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8019d64:	7dfa      	ldrb	r2, [r7, #23]
 8019d66:	4b1b      	ldr	r3, [pc, #108]	; (8019dd4 <etharp_output+0x1d4>)
 8019d68:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019d6a:	7dfb      	ldrb	r3, [r7, #23]
 8019d6c:	461a      	mov	r2, r3
 8019d6e:	68b9      	ldr	r1, [r7, #8]
 8019d70:	68f8      	ldr	r0, [r7, #12]
 8019d72:	f7ff feab 	bl	8019acc <etharp_output_to_arp_index>
 8019d76:	4603      	mov	r3, r0
 8019d78:	e01c      	b.n	8019db4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019d7e:	b2db      	uxtb	r3, r3
 8019d80:	3301      	adds	r3, #1
 8019d82:	b2db      	uxtb	r3, r3
 8019d84:	75fb      	strb	r3, [r7, #23]
 8019d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019d8a:	2b09      	cmp	r3, #9
 8019d8c:	ddd0      	ble.n	8019d30 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019d8e:	68ba      	ldr	r2, [r7, #8]
 8019d90:	69b9      	ldr	r1, [r7, #24]
 8019d92:	68f8      	ldr	r0, [r7, #12]
 8019d94:	f000 f822 	bl	8019ddc <etharp_query>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	e00b      	b.n	8019db4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8019da2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019da6:	9300      	str	r3, [sp, #0]
 8019da8:	69fb      	ldr	r3, [r7, #28]
 8019daa:	68b9      	ldr	r1, [r7, #8]
 8019dac:	68f8      	ldr	r0, [r7, #12]
 8019dae:	f009 f881 	bl	8022eb4 <ethernet_output>
 8019db2:	4603      	mov	r3, r0
}
 8019db4:	4618      	mov	r0, r3
 8019db6:	3720      	adds	r7, #32
 8019db8:	46bd      	mov	sp, r7
 8019dba:	bd80      	pop	{r7, pc}
 8019dbc:	080270d4 	.word	0x080270d4
 8019dc0:	08027224 	.word	0x08027224
 8019dc4:	0802714c 	.word	0x0802714c
 8019dc8:	08027274 	.word	0x08027274
 8019dcc:	08027214 	.word	0x08027214
 8019dd0:	0802b460 	.word	0x0802b460
 8019dd4:	20004090 	.word	0x20004090
 8019dd8:	20003fa0 	.word	0x20003fa0

08019ddc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b08c      	sub	sp, #48	; 0x30
 8019de0:	af02      	add	r7, sp, #8
 8019de2:	60f8      	str	r0, [r7, #12]
 8019de4:	60b9      	str	r1, [r7, #8]
 8019de6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	3325      	adds	r3, #37	; 0x25
 8019dec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019dee:	23ff      	movs	r3, #255	; 0xff
 8019df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019df4:	2300      	movs	r3, #0
 8019df6:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019df8:	68bb      	ldr	r3, [r7, #8]
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	68f9      	ldr	r1, [r7, #12]
 8019dfe:	4618      	mov	r0, r3
 8019e00:	f000 fdfa 	bl	801a9f8 <ip4_addr_isbroadcast_u32>
 8019e04:	4603      	mov	r3, r0
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d10c      	bne.n	8019e24 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019e0a:	68bb      	ldr	r3, [r7, #8]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019e12:	2be0      	cmp	r3, #224	; 0xe0
 8019e14:	d006      	beq.n	8019e24 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019e16:	68bb      	ldr	r3, [r7, #8]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d003      	beq.n	8019e24 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019e1c:	68bb      	ldr	r3, [r7, #8]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d102      	bne.n	8019e2a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019e24:	f06f 030f 	mvn.w	r3, #15
 8019e28:	e10f      	b.n	801a04a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019e2a:	68fa      	ldr	r2, [r7, #12]
 8019e2c:	2101      	movs	r1, #1
 8019e2e:	68b8      	ldr	r0, [r7, #8]
 8019e30:	f7ff fba2 	bl	8019578 <etharp_find_entry>
 8019e34:	4603      	mov	r3, r0
 8019e36:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8019e38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	da02      	bge.n	8019e46 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8019e40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019e44:	e101      	b.n	801a04a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019e46:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019e4a:	4982      	ldr	r1, [pc, #520]	; (801a054 <etharp_query+0x278>)
 8019e4c:	4613      	mov	r3, r2
 8019e4e:	005b      	lsls	r3, r3, #1
 8019e50:	4413      	add	r3, r2
 8019e52:	00db      	lsls	r3, r3, #3
 8019e54:	440b      	add	r3, r1
 8019e56:	3314      	adds	r3, #20
 8019e58:	781b      	ldrb	r3, [r3, #0]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d117      	bne.n	8019e8e <etharp_query+0xb2>
    is_new_entry = 1;
 8019e5e:	2301      	movs	r3, #1
 8019e60:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019e62:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019e66:	497b      	ldr	r1, [pc, #492]	; (801a054 <etharp_query+0x278>)
 8019e68:	4613      	mov	r3, r2
 8019e6a:	005b      	lsls	r3, r3, #1
 8019e6c:	4413      	add	r3, r2
 8019e6e:	00db      	lsls	r3, r3, #3
 8019e70:	440b      	add	r3, r1
 8019e72:	3314      	adds	r3, #20
 8019e74:	2201      	movs	r2, #1
 8019e76:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019e78:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019e7c:	4975      	ldr	r1, [pc, #468]	; (801a054 <etharp_query+0x278>)
 8019e7e:	4613      	mov	r3, r2
 8019e80:	005b      	lsls	r3, r3, #1
 8019e82:	4413      	add	r3, r2
 8019e84:	00db      	lsls	r3, r3, #3
 8019e86:	440b      	add	r3, r1
 8019e88:	3308      	adds	r3, #8
 8019e8a:	68fa      	ldr	r2, [r7, #12]
 8019e8c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019e8e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019e92:	4970      	ldr	r1, [pc, #448]	; (801a054 <etharp_query+0x278>)
 8019e94:	4613      	mov	r3, r2
 8019e96:	005b      	lsls	r3, r3, #1
 8019e98:	4413      	add	r3, r2
 8019e9a:	00db      	lsls	r3, r3, #3
 8019e9c:	440b      	add	r3, r1
 8019e9e:	3314      	adds	r3, #20
 8019ea0:	781b      	ldrb	r3, [r3, #0]
 8019ea2:	2b01      	cmp	r3, #1
 8019ea4:	d012      	beq.n	8019ecc <etharp_query+0xf0>
 8019ea6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019eaa:	496a      	ldr	r1, [pc, #424]	; (801a054 <etharp_query+0x278>)
 8019eac:	4613      	mov	r3, r2
 8019eae:	005b      	lsls	r3, r3, #1
 8019eb0:	4413      	add	r3, r2
 8019eb2:	00db      	lsls	r3, r3, #3
 8019eb4:	440b      	add	r3, r1
 8019eb6:	3314      	adds	r3, #20
 8019eb8:	781b      	ldrb	r3, [r3, #0]
 8019eba:	2b01      	cmp	r3, #1
 8019ebc:	d806      	bhi.n	8019ecc <etharp_query+0xf0>
 8019ebe:	4b66      	ldr	r3, [pc, #408]	; (801a058 <etharp_query+0x27c>)
 8019ec0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8019ec4:	4965      	ldr	r1, [pc, #404]	; (801a05c <etharp_query+0x280>)
 8019ec6:	4866      	ldr	r0, [pc, #408]	; (801a060 <etharp_query+0x284>)
 8019ec8:	f00b fe2a 	bl	8025b20 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019ecc:	6a3b      	ldr	r3, [r7, #32]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d102      	bne.n	8019ed8 <etharp_query+0xfc>
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d10c      	bne.n	8019ef2 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019ed8:	68b9      	ldr	r1, [r7, #8]
 8019eda:	68f8      	ldr	r0, [r7, #12]
 8019edc:	f000 f976 	bl	801a1cc <etharp_request>
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d102      	bne.n	8019ef2 <etharp_query+0x116>
      return result;
 8019eec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019ef0:	e0ab      	b.n	801a04a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d106      	bne.n	8019f06 <etharp_query+0x12a>
 8019ef8:	4b57      	ldr	r3, [pc, #348]	; (801a058 <etharp_query+0x27c>)
 8019efa:	f240 32db 	movw	r2, #987	; 0x3db
 8019efe:	4959      	ldr	r1, [pc, #356]	; (801a064 <etharp_query+0x288>)
 8019f00:	4857      	ldr	r0, [pc, #348]	; (801a060 <etharp_query+0x284>)
 8019f02:	f00b fe0d 	bl	8025b20 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019f06:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019f0a:	4952      	ldr	r1, [pc, #328]	; (801a054 <etharp_query+0x278>)
 8019f0c:	4613      	mov	r3, r2
 8019f0e:	005b      	lsls	r3, r3, #1
 8019f10:	4413      	add	r3, r2
 8019f12:	00db      	lsls	r3, r3, #3
 8019f14:	440b      	add	r3, r1
 8019f16:	3314      	adds	r3, #20
 8019f18:	781b      	ldrb	r3, [r3, #0]
 8019f1a:	2b01      	cmp	r3, #1
 8019f1c:	d919      	bls.n	8019f52 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8019f1e:	7cfa      	ldrb	r2, [r7, #19]
 8019f20:	4b51      	ldr	r3, [pc, #324]	; (801a068 <etharp_query+0x28c>)
 8019f22:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019f24:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019f28:	4613      	mov	r3, r2
 8019f2a:	005b      	lsls	r3, r3, #1
 8019f2c:	4413      	add	r3, r2
 8019f2e:	00db      	lsls	r3, r3, #3
 8019f30:	3308      	adds	r3, #8
 8019f32:	4a48      	ldr	r2, [pc, #288]	; (801a054 <etharp_query+0x278>)
 8019f34:	4413      	add	r3, r2
 8019f36:	1d1a      	adds	r2, r3, #4
 8019f38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019f3c:	9300      	str	r3, [sp, #0]
 8019f3e:	4613      	mov	r3, r2
 8019f40:	697a      	ldr	r2, [r7, #20]
 8019f42:	6879      	ldr	r1, [r7, #4]
 8019f44:	68f8      	ldr	r0, [r7, #12]
 8019f46:	f008 ffb5 	bl	8022eb4 <ethernet_output>
 8019f4a:	4603      	mov	r3, r0
 8019f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019f50:	e079      	b.n	801a046 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019f52:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019f56:	493f      	ldr	r1, [pc, #252]	; (801a054 <etharp_query+0x278>)
 8019f58:	4613      	mov	r3, r2
 8019f5a:	005b      	lsls	r3, r3, #1
 8019f5c:	4413      	add	r3, r2
 8019f5e:	00db      	lsls	r3, r3, #3
 8019f60:	440b      	add	r3, r1
 8019f62:	3314      	adds	r3, #20
 8019f64:	781b      	ldrb	r3, [r3, #0]
 8019f66:	2b01      	cmp	r3, #1
 8019f68:	d16d      	bne.n	801a046 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019f72:	e01a      	b.n	8019faa <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019f74:	69fb      	ldr	r3, [r7, #28]
 8019f76:	895a      	ldrh	r2, [r3, #10]
 8019f78:	69fb      	ldr	r3, [r7, #28]
 8019f7a:	891b      	ldrh	r3, [r3, #8]
 8019f7c:	429a      	cmp	r2, r3
 8019f7e:	d10a      	bne.n	8019f96 <etharp_query+0x1ba>
 8019f80:	69fb      	ldr	r3, [r7, #28]
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d006      	beq.n	8019f96 <etharp_query+0x1ba>
 8019f88:	4b33      	ldr	r3, [pc, #204]	; (801a058 <etharp_query+0x27c>)
 8019f8a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8019f8e:	4937      	ldr	r1, [pc, #220]	; (801a06c <etharp_query+0x290>)
 8019f90:	4833      	ldr	r0, [pc, #204]	; (801a060 <etharp_query+0x284>)
 8019f92:	f00b fdc5 	bl	8025b20 <iprintf>
      if (p->type != PBUF_ROM) {
 8019f96:	69fb      	ldr	r3, [r7, #28]
 8019f98:	7b1b      	ldrb	r3, [r3, #12]
 8019f9a:	2b01      	cmp	r3, #1
 8019f9c:	d002      	beq.n	8019fa4 <etharp_query+0x1c8>
        copy_needed = 1;
 8019f9e:	2301      	movs	r3, #1
 8019fa0:	61bb      	str	r3, [r7, #24]
        break;
 8019fa2:	e005      	b.n	8019fb0 <etharp_query+0x1d4>
      }
      p = p->next;
 8019fa4:	69fb      	ldr	r3, [r7, #28]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019faa:	69fb      	ldr	r3, [r7, #28]
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d1e1      	bne.n	8019f74 <etharp_query+0x198>
    }
    if (copy_needed) {
 8019fb0:	69bb      	ldr	r3, [r7, #24]
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d017      	beq.n	8019fe6 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8019fb6:	69fb      	ldr	r3, [r7, #28]
 8019fb8:	891b      	ldrh	r3, [r3, #8]
 8019fba:	2200      	movs	r2, #0
 8019fbc:	4619      	mov	r1, r3
 8019fbe:	2002      	movs	r0, #2
 8019fc0:	f002 fae0 	bl	801c584 <pbuf_alloc>
 8019fc4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8019fc6:	69fb      	ldr	r3, [r7, #28]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d011      	beq.n	8019ff0 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8019fcc:	6879      	ldr	r1, [r7, #4]
 8019fce:	69f8      	ldr	r0, [r7, #28]
 8019fd0:	f002 ff7a 	bl	801cec8 <pbuf_copy>
 8019fd4:	4603      	mov	r3, r0
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d00a      	beq.n	8019ff0 <etharp_query+0x214>
          pbuf_free(p);
 8019fda:	69f8      	ldr	r0, [r7, #28]
 8019fdc:	f002 fe44 	bl	801cc68 <pbuf_free>
          p = NULL;
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	61fb      	str	r3, [r7, #28]
 8019fe4:	e004      	b.n	8019ff0 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019fea:	69f8      	ldr	r0, [r7, #28]
 8019fec:	f002 feee 	bl	801cdcc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019ff0:	69fb      	ldr	r3, [r7, #28]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d024      	beq.n	801a040 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019ff6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019ffa:	4916      	ldr	r1, [pc, #88]	; (801a054 <etharp_query+0x278>)
 8019ffc:	4613      	mov	r3, r2
 8019ffe:	005b      	lsls	r3, r3, #1
 801a000:	4413      	add	r3, r2
 801a002:	00db      	lsls	r3, r3, #3
 801a004:	440b      	add	r3, r1
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d00b      	beq.n	801a024 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801a00c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801a010:	4910      	ldr	r1, [pc, #64]	; (801a054 <etharp_query+0x278>)
 801a012:	4613      	mov	r3, r2
 801a014:	005b      	lsls	r3, r3, #1
 801a016:	4413      	add	r3, r2
 801a018:	00db      	lsls	r3, r3, #3
 801a01a:	440b      	add	r3, r1
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	4618      	mov	r0, r3
 801a020:	f002 fe22 	bl	801cc68 <pbuf_free>
      }
      arp_table[i].q = p;
 801a024:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801a028:	490a      	ldr	r1, [pc, #40]	; (801a054 <etharp_query+0x278>)
 801a02a:	4613      	mov	r3, r2
 801a02c:	005b      	lsls	r3, r3, #1
 801a02e:	4413      	add	r3, r2
 801a030:	00db      	lsls	r3, r3, #3
 801a032:	440b      	add	r3, r1
 801a034:	69fa      	ldr	r2, [r7, #28]
 801a036:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a038:	2300      	movs	r3, #0
 801a03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a03e:	e002      	b.n	801a046 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a040:	23ff      	movs	r3, #255	; 0xff
 801a042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801a046:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801a04a:	4618      	mov	r0, r3
 801a04c:	3728      	adds	r7, #40	; 0x28
 801a04e:	46bd      	mov	sp, r7
 801a050:	bd80      	pop	{r7, pc}
 801a052:	bf00      	nop
 801a054:	20003fa0 	.word	0x20003fa0
 801a058:	080270d4 	.word	0x080270d4
 801a05c:	08027280 	.word	0x08027280
 801a060:	0802714c 	.word	0x0802714c
 801a064:	08027274 	.word	0x08027274
 801a068:	20004090 	.word	0x20004090
 801a06c:	080272a8 	.word	0x080272a8

0801a070 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a070:	b580      	push	{r7, lr}
 801a072:	b08a      	sub	sp, #40	; 0x28
 801a074:	af02      	add	r7, sp, #8
 801a076:	60f8      	str	r0, [r7, #12]
 801a078:	60b9      	str	r1, [r7, #8]
 801a07a:	607a      	str	r2, [r7, #4]
 801a07c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801a07e:	2300      	movs	r3, #0
 801a080:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	2b00      	cmp	r3, #0
 801a086:	d106      	bne.n	801a096 <etharp_raw+0x26>
 801a088:	4b3a      	ldr	r3, [pc, #232]	; (801a174 <etharp_raw+0x104>)
 801a08a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801a08e:	493a      	ldr	r1, [pc, #232]	; (801a178 <etharp_raw+0x108>)
 801a090:	483a      	ldr	r0, [pc, #232]	; (801a17c <etharp_raw+0x10c>)
 801a092:	f00b fd45 	bl	8025b20 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a096:	2200      	movs	r2, #0
 801a098:	211c      	movs	r1, #28
 801a09a:	2002      	movs	r0, #2
 801a09c:	f002 fa72 	bl	801c584 <pbuf_alloc>
 801a0a0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a0a2:	69bb      	ldr	r3, [r7, #24]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d102      	bne.n	801a0ae <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801a0a8:	f04f 33ff 	mov.w	r3, #4294967295
 801a0ac:	e05d      	b.n	801a16a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a0ae:	69bb      	ldr	r3, [r7, #24]
 801a0b0:	895b      	ldrh	r3, [r3, #10]
 801a0b2:	2b1b      	cmp	r3, #27
 801a0b4:	d806      	bhi.n	801a0c4 <etharp_raw+0x54>
 801a0b6:	4b2f      	ldr	r3, [pc, #188]	; (801a174 <etharp_raw+0x104>)
 801a0b8:	f240 4264 	movw	r2, #1124	; 0x464
 801a0bc:	4930      	ldr	r1, [pc, #192]	; (801a180 <etharp_raw+0x110>)
 801a0be:	482f      	ldr	r0, [pc, #188]	; (801a17c <etharp_raw+0x10c>)
 801a0c0:	f00b fd2e 	bl	8025b20 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a0c4:	69bb      	ldr	r3, [r7, #24]
 801a0c6:	685b      	ldr	r3, [r3, #4]
 801a0c8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a0ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	f7ff f93b 	bl	8019348 <lwip_htons>
 801a0d2:	4603      	mov	r3, r0
 801a0d4:	461a      	mov	r2, r3
 801a0d6:	697b      	ldr	r3, [r7, #20]
 801a0d8:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a0e0:	2b06      	cmp	r3, #6
 801a0e2:	d006      	beq.n	801a0f2 <etharp_raw+0x82>
 801a0e4:	4b23      	ldr	r3, [pc, #140]	; (801a174 <etharp_raw+0x104>)
 801a0e6:	f240 426b 	movw	r2, #1131	; 0x46b
 801a0ea:	4926      	ldr	r1, [pc, #152]	; (801a184 <etharp_raw+0x114>)
 801a0ec:	4823      	ldr	r0, [pc, #140]	; (801a17c <etharp_raw+0x10c>)
 801a0ee:	f00b fd17 	bl	8025b20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801a0f2:	697b      	ldr	r3, [r7, #20]
 801a0f4:	3308      	adds	r3, #8
 801a0f6:	2206      	movs	r2, #6
 801a0f8:	6839      	ldr	r1, [r7, #0]
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	f00c f9e3 	bl	80264c6 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801a100:	697b      	ldr	r3, [r7, #20]
 801a102:	3312      	adds	r3, #18
 801a104:	2206      	movs	r2, #6
 801a106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a108:	4618      	mov	r0, r3
 801a10a:	f00c f9dc 	bl	80264c6 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801a10e:	697b      	ldr	r3, [r7, #20]
 801a110:	330e      	adds	r3, #14
 801a112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a114:	6812      	ldr	r2, [r2, #0]
 801a116:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801a118:	697b      	ldr	r3, [r7, #20]
 801a11a:	3318      	adds	r3, #24
 801a11c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a11e:	6812      	ldr	r2, [r2, #0]
 801a120:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801a122:	697b      	ldr	r3, [r7, #20]
 801a124:	2200      	movs	r2, #0
 801a126:	701a      	strb	r2, [r3, #0]
 801a128:	2200      	movs	r2, #0
 801a12a:	f042 0201 	orr.w	r2, r2, #1
 801a12e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a130:	697b      	ldr	r3, [r7, #20]
 801a132:	2200      	movs	r2, #0
 801a134:	f042 0208 	orr.w	r2, r2, #8
 801a138:	709a      	strb	r2, [r3, #2]
 801a13a:	2200      	movs	r2, #0
 801a13c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a13e:	697b      	ldr	r3, [r7, #20]
 801a140:	2206      	movs	r2, #6
 801a142:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a144:	697b      	ldr	r3, [r7, #20]
 801a146:	2204      	movs	r2, #4
 801a148:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a14a:	f640 0306 	movw	r3, #2054	; 0x806
 801a14e:	9300      	str	r3, [sp, #0]
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	68ba      	ldr	r2, [r7, #8]
 801a154:	69b9      	ldr	r1, [r7, #24]
 801a156:	68f8      	ldr	r0, [r7, #12]
 801a158:	f008 feac 	bl	8022eb4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a15c:	69b8      	ldr	r0, [r7, #24]
 801a15e:	f002 fd83 	bl	801cc68 <pbuf_free>
  p = NULL;
 801a162:	2300      	movs	r3, #0
 801a164:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a166:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a16a:	4618      	mov	r0, r3
 801a16c:	3720      	adds	r7, #32
 801a16e:	46bd      	mov	sp, r7
 801a170:	bd80      	pop	{r7, pc}
 801a172:	bf00      	nop
 801a174:	080270d4 	.word	0x080270d4
 801a178:	08027224 	.word	0x08027224
 801a17c:	0802714c 	.word	0x0802714c
 801a180:	080272c4 	.word	0x080272c4
 801a184:	080272f8 	.word	0x080272f8

0801a188 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b088      	sub	sp, #32
 801a18c:	af04      	add	r7, sp, #16
 801a18e:	60f8      	str	r0, [r7, #12]
 801a190:	60b9      	str	r1, [r7, #8]
 801a192:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a1a4:	2201      	movs	r2, #1
 801a1a6:	9203      	str	r2, [sp, #12]
 801a1a8:	68ba      	ldr	r2, [r7, #8]
 801a1aa:	9202      	str	r2, [sp, #8]
 801a1ac:	4a06      	ldr	r2, [pc, #24]	; (801a1c8 <etharp_request_dst+0x40>)
 801a1ae:	9201      	str	r2, [sp, #4]
 801a1b0:	9300      	str	r3, [sp, #0]
 801a1b2:	4603      	mov	r3, r0
 801a1b4:	687a      	ldr	r2, [r7, #4]
 801a1b6:	68f8      	ldr	r0, [r7, #12]
 801a1b8:	f7ff ff5a 	bl	801a070 <etharp_raw>
 801a1bc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a1be:	4618      	mov	r0, r3
 801a1c0:	3710      	adds	r7, #16
 801a1c2:	46bd      	mov	sp, r7
 801a1c4:	bd80      	pop	{r7, pc}
 801a1c6:	bf00      	nop
 801a1c8:	0802b468 	.word	0x0802b468

0801a1cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	b082      	sub	sp, #8
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
 801a1d4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a1d6:	4a05      	ldr	r2, [pc, #20]	; (801a1ec <etharp_request+0x20>)
 801a1d8:	6839      	ldr	r1, [r7, #0]
 801a1da:	6878      	ldr	r0, [r7, #4]
 801a1dc:	f7ff ffd4 	bl	801a188 <etharp_request_dst>
 801a1e0:	4603      	mov	r3, r0
}
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	3708      	adds	r7, #8
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	bd80      	pop	{r7, pc}
 801a1ea:	bf00      	nop
 801a1ec:	0802b460 	.word	0x0802b460

0801a1f0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a1f0:	b580      	push	{r7, lr}
 801a1f2:	b08e      	sub	sp, #56	; 0x38
 801a1f4:	af04      	add	r7, sp, #16
 801a1f6:	6078      	str	r0, [r7, #4]
 801a1f8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a1fa:	4b7a      	ldr	r3, [pc, #488]	; (801a3e4 <icmp_input+0x1f4>)
 801a1fc:	689b      	ldr	r3, [r3, #8]
 801a1fe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a202:	781b      	ldrb	r3, [r3, #0]
 801a204:	b29b      	uxth	r3, r3
 801a206:	f003 030f 	and.w	r3, r3, #15
 801a20a:	b29b      	uxth	r3, r3
 801a20c:	009b      	lsls	r3, r3, #2
 801a20e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801a210:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a212:	2b13      	cmp	r3, #19
 801a214:	f240 80d1 	bls.w	801a3ba <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	895b      	ldrh	r3, [r3, #10]
 801a21c:	2b03      	cmp	r3, #3
 801a21e:	f240 80ce 	bls.w	801a3be <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	685b      	ldr	r3, [r3, #4]
 801a226:	781b      	ldrb	r3, [r3, #0]
 801a228:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a22c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801a230:	2b00      	cmp	r3, #0
 801a232:	f000 80bb 	beq.w	801a3ac <icmp_input+0x1bc>
 801a236:	2b08      	cmp	r3, #8
 801a238:	f040 80bb 	bne.w	801a3b2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801a23c:	4b6a      	ldr	r3, [pc, #424]	; (801a3e8 <icmp_input+0x1f8>)
 801a23e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a240:	4b68      	ldr	r3, [pc, #416]	; (801a3e4 <icmp_input+0x1f4>)
 801a242:	695b      	ldr	r3, [r3, #20]
 801a244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a248:	2be0      	cmp	r3, #224	; 0xe0
 801a24a:	f000 80bf 	beq.w	801a3cc <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a24e:	4b65      	ldr	r3, [pc, #404]	; (801a3e4 <icmp_input+0x1f4>)
 801a250:	695a      	ldr	r2, [r3, #20]
 801a252:	4b64      	ldr	r3, [pc, #400]	; (801a3e4 <icmp_input+0x1f4>)
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	4619      	mov	r1, r3
 801a258:	4610      	mov	r0, r2
 801a25a:	f000 fbcd 	bl	801a9f8 <ip4_addr_isbroadcast_u32>
 801a25e:	4603      	mov	r3, r0
 801a260:	2b00      	cmp	r3, #0
 801a262:	f040 80b5 	bne.w	801a3d0 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	891b      	ldrh	r3, [r3, #8]
 801a26a:	2b07      	cmp	r3, #7
 801a26c:	f240 80a9 	bls.w	801a3c2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801a270:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a272:	330e      	adds	r3, #14
 801a274:	b29b      	uxth	r3, r3
 801a276:	b21b      	sxth	r3, r3
 801a278:	4619      	mov	r1, r3
 801a27a:	6878      	ldr	r0, [r7, #4]
 801a27c:	f002 fcd0 	bl	801cc20 <pbuf_header>
 801a280:	4603      	mov	r3, r0
 801a282:	2b00      	cmp	r3, #0
 801a284:	d046      	beq.n	801a314 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	891a      	ldrh	r2, [r3, #8]
 801a28a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a28c:	4413      	add	r3, r2
 801a28e:	b29b      	uxth	r3, r3
 801a290:	2200      	movs	r2, #0
 801a292:	4619      	mov	r1, r3
 801a294:	2002      	movs	r0, #2
 801a296:	f002 f975 	bl	801c584 <pbuf_alloc>
 801a29a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801a29c:	69bb      	ldr	r3, [r7, #24]
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	f000 8098 	beq.w	801a3d4 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a2a4:	69bb      	ldr	r3, [r7, #24]
 801a2a6:	895b      	ldrh	r3, [r3, #10]
 801a2a8:	461a      	mov	r2, r3
 801a2aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a2ac:	3308      	adds	r3, #8
 801a2ae:	429a      	cmp	r2, r3
 801a2b0:	d203      	bcs.n	801a2ba <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801a2b2:	69b8      	ldr	r0, [r7, #24]
 801a2b4:	f002 fcd8 	bl	801cc68 <pbuf_free>
        goto icmperr;
 801a2b8:	e08d      	b.n	801a3d6 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801a2ba:	69bb      	ldr	r3, [r7, #24]
 801a2bc:	685b      	ldr	r3, [r3, #4]
 801a2be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a2c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a2c2:	4618      	mov	r0, r3
 801a2c4:	f00c f8ff 	bl	80264c6 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801a2c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a2ca:	425b      	negs	r3, r3
 801a2cc:	b29b      	uxth	r3, r3
 801a2ce:	b21b      	sxth	r3, r3
 801a2d0:	4619      	mov	r1, r3
 801a2d2:	69b8      	ldr	r0, [r7, #24]
 801a2d4:	f002 fca4 	bl	801cc20 <pbuf_header>
 801a2d8:	4603      	mov	r3, r0
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d009      	beq.n	801a2f2 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a2de:	4b43      	ldr	r3, [pc, #268]	; (801a3ec <icmp_input+0x1fc>)
 801a2e0:	22af      	movs	r2, #175	; 0xaf
 801a2e2:	4943      	ldr	r1, [pc, #268]	; (801a3f0 <icmp_input+0x200>)
 801a2e4:	4843      	ldr	r0, [pc, #268]	; (801a3f4 <icmp_input+0x204>)
 801a2e6:	f00b fc1b 	bl	8025b20 <iprintf>
        pbuf_free(r);
 801a2ea:	69b8      	ldr	r0, [r7, #24]
 801a2ec:	f002 fcbc 	bl	801cc68 <pbuf_free>
        goto icmperr;
 801a2f0:	e071      	b.n	801a3d6 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801a2f2:	6879      	ldr	r1, [r7, #4]
 801a2f4:	69b8      	ldr	r0, [r7, #24]
 801a2f6:	f002 fde7 	bl	801cec8 <pbuf_copy>
 801a2fa:	4603      	mov	r3, r0
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d003      	beq.n	801a308 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801a300:	69b8      	ldr	r0, [r7, #24]
 801a302:	f002 fcb1 	bl	801cc68 <pbuf_free>
        goto icmperr;
 801a306:	e066      	b.n	801a3d6 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 801a308:	6878      	ldr	r0, [r7, #4]
 801a30a:	f002 fcad 	bl	801cc68 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801a30e:	69bb      	ldr	r3, [r7, #24]
 801a310:	607b      	str	r3, [r7, #4]
 801a312:	e015      	b.n	801a340 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801a314:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a316:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801a31a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801a31e:	33f2      	adds	r3, #242	; 0xf2
 801a320:	b29b      	uxth	r3, r3
 801a322:	b21b      	sxth	r3, r3
 801a324:	4619      	mov	r1, r3
 801a326:	6878      	ldr	r0, [r7, #4]
 801a328:	f002 fc7a 	bl	801cc20 <pbuf_header>
 801a32c:	4603      	mov	r3, r0
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d006      	beq.n	801a340 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a332:	4b2e      	ldr	r3, [pc, #184]	; (801a3ec <icmp_input+0x1fc>)
 801a334:	22c0      	movs	r2, #192	; 0xc0
 801a336:	4930      	ldr	r1, [pc, #192]	; (801a3f8 <icmp_input+0x208>)
 801a338:	482e      	ldr	r0, [pc, #184]	; (801a3f4 <icmp_input+0x204>)
 801a33a:	f00b fbf1 	bl	8025b20 <iprintf>
        goto icmperr;
 801a33e:	e04a      	b.n	801a3d6 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	685b      	ldr	r3, [r3, #4]
 801a344:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801a346:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a34a:	4619      	mov	r1, r3
 801a34c:	6878      	ldr	r0, [r7, #4]
 801a34e:	f002 fc67 	bl	801cc20 <pbuf_header>
 801a352:	4603      	mov	r3, r0
 801a354:	2b00      	cmp	r3, #0
 801a356:	d12b      	bne.n	801a3b0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	685b      	ldr	r3, [r3, #4]
 801a35c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801a35e:	69fb      	ldr	r3, [r7, #28]
 801a360:	681a      	ldr	r2, [r3, #0]
 801a362:	693b      	ldr	r3, [r7, #16]
 801a364:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a366:	4b1f      	ldr	r3, [pc, #124]	; (801a3e4 <icmp_input+0x1f4>)
 801a368:	691a      	ldr	r2, [r3, #16]
 801a36a:	693b      	ldr	r3, [r7, #16]
 801a36c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a36e:	697b      	ldr	r3, [r7, #20]
 801a370:	2200      	movs	r2, #0
 801a372:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 801a374:	697b      	ldr	r3, [r7, #20]
 801a376:	2200      	movs	r2, #0
 801a378:	709a      	strb	r2, [r3, #2]
 801a37a:	2200      	movs	r2, #0
 801a37c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801a37e:	693b      	ldr	r3, [r7, #16]
 801a380:	22ff      	movs	r2, #255	; 0xff
 801a382:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 801a384:	693b      	ldr	r3, [r7, #16]
 801a386:	2200      	movs	r2, #0
 801a388:	729a      	strb	r2, [r3, #10]
 801a38a:	2200      	movs	r2, #0
 801a38c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a38e:	683b      	ldr	r3, [r7, #0]
 801a390:	9302      	str	r3, [sp, #8]
 801a392:	2301      	movs	r3, #1
 801a394:	9301      	str	r3, [sp, #4]
 801a396:	2300      	movs	r3, #0
 801a398:	9300      	str	r3, [sp, #0]
 801a39a:	23ff      	movs	r3, #255	; 0xff
 801a39c:	2200      	movs	r2, #0
 801a39e:	69f9      	ldr	r1, [r7, #28]
 801a3a0:	6878      	ldr	r0, [r7, #4]
 801a3a2:	f000 fa57 	bl	801a854 <ip4_output_if>
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801a3aa:	e001      	b.n	801a3b0 <icmp_input+0x1c0>
    break;
 801a3ac:	bf00      	nop
 801a3ae:	e000      	b.n	801a3b2 <icmp_input+0x1c2>
    break;
 801a3b0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a3b2:	6878      	ldr	r0, [r7, #4]
 801a3b4:	f002 fc58 	bl	801cc68 <pbuf_free>
  return;
 801a3b8:	e011      	b.n	801a3de <icmp_input+0x1ee>
    goto lenerr;
 801a3ba:	bf00      	nop
 801a3bc:	e002      	b.n	801a3c4 <icmp_input+0x1d4>
    goto lenerr;
 801a3be:	bf00      	nop
 801a3c0:	e000      	b.n	801a3c4 <icmp_input+0x1d4>
      goto lenerr;
 801a3c2:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a3c4:	6878      	ldr	r0, [r7, #4]
 801a3c6:	f002 fc4f 	bl	801cc68 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a3ca:	e008      	b.n	801a3de <icmp_input+0x1ee>
      goto icmperr;
 801a3cc:	bf00      	nop
 801a3ce:	e002      	b.n	801a3d6 <icmp_input+0x1e6>
      goto icmperr;
 801a3d0:	bf00      	nop
 801a3d2:	e000      	b.n	801a3d6 <icmp_input+0x1e6>
        goto icmperr;
 801a3d4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a3d6:	6878      	ldr	r0, [r7, #4]
 801a3d8:	f002 fc46 	bl	801cc68 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a3dc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a3de:	3728      	adds	r7, #40	; 0x28
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	bd80      	pop	{r7, pc}
 801a3e4:	20004608 	.word	0x20004608
 801a3e8:	2000461c 	.word	0x2000461c
 801a3ec:	0802733c 	.word	0x0802733c
 801a3f0:	08027374 	.word	0x08027374
 801a3f4:	080273ac 	.word	0x080273ac
 801a3f8:	080273d4 	.word	0x080273d4

0801a3fc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b082      	sub	sp, #8
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
 801a404:	460b      	mov	r3, r1
 801a406:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a408:	78fb      	ldrb	r3, [r7, #3]
 801a40a:	461a      	mov	r2, r3
 801a40c:	2103      	movs	r1, #3
 801a40e:	6878      	ldr	r0, [r7, #4]
 801a410:	f000 f814 	bl	801a43c <icmp_send_response>
}
 801a414:	bf00      	nop
 801a416:	3708      	adds	r7, #8
 801a418:	46bd      	mov	sp, r7
 801a41a:	bd80      	pop	{r7, pc}

0801a41c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b082      	sub	sp, #8
 801a420:	af00      	add	r7, sp, #0
 801a422:	6078      	str	r0, [r7, #4]
 801a424:	460b      	mov	r3, r1
 801a426:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a428:	78fb      	ldrb	r3, [r7, #3]
 801a42a:	461a      	mov	r2, r3
 801a42c:	210b      	movs	r1, #11
 801a42e:	6878      	ldr	r0, [r7, #4]
 801a430:	f000 f804 	bl	801a43c <icmp_send_response>
}
 801a434:	bf00      	nop
 801a436:	3708      	adds	r7, #8
 801a438:	46bd      	mov	sp, r7
 801a43a:	bd80      	pop	{r7, pc}

0801a43c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b08c      	sub	sp, #48	; 0x30
 801a440:	af04      	add	r7, sp, #16
 801a442:	6078      	str	r0, [r7, #4]
 801a444:	460b      	mov	r3, r1
 801a446:	70fb      	strb	r3, [r7, #3]
 801a448:	4613      	mov	r3, r2
 801a44a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a44c:	2200      	movs	r2, #0
 801a44e:	2124      	movs	r1, #36	; 0x24
 801a450:	2001      	movs	r0, #1
 801a452:	f002 f897 	bl	801c584 <pbuf_alloc>
 801a456:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a458:	69fb      	ldr	r3, [r7, #28]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d04c      	beq.n	801a4f8 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a45e:	69fb      	ldr	r3, [r7, #28]
 801a460:	895b      	ldrh	r3, [r3, #10]
 801a462:	2b23      	cmp	r3, #35	; 0x23
 801a464:	d806      	bhi.n	801a474 <icmp_send_response+0x38>
 801a466:	4b26      	ldr	r3, [pc, #152]	; (801a500 <icmp_send_response+0xc4>)
 801a468:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801a46c:	4925      	ldr	r1, [pc, #148]	; (801a504 <icmp_send_response+0xc8>)
 801a46e:	4826      	ldr	r0, [pc, #152]	; (801a508 <icmp_send_response+0xcc>)
 801a470:	f00b fb56 	bl	8025b20 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	685b      	ldr	r3, [r3, #4]
 801a478:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a47a:	69fb      	ldr	r3, [r7, #28]
 801a47c:	685b      	ldr	r3, [r3, #4]
 801a47e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a480:	697b      	ldr	r3, [r7, #20]
 801a482:	78fa      	ldrb	r2, [r7, #3]
 801a484:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a486:	697b      	ldr	r3, [r7, #20]
 801a488:	78ba      	ldrb	r2, [r7, #2]
 801a48a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a48c:	697b      	ldr	r3, [r7, #20]
 801a48e:	2200      	movs	r2, #0
 801a490:	711a      	strb	r2, [r3, #4]
 801a492:	2200      	movs	r2, #0
 801a494:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a496:	697b      	ldr	r3, [r7, #20]
 801a498:	2200      	movs	r2, #0
 801a49a:	719a      	strb	r2, [r3, #6]
 801a49c:	2200      	movs	r2, #0
 801a49e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a4a0:	69fb      	ldr	r3, [r7, #28]
 801a4a2:	685b      	ldr	r3, [r3, #4]
 801a4a4:	f103 0008 	add.w	r0, r3, #8
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	685b      	ldr	r3, [r3, #4]
 801a4ac:	221c      	movs	r2, #28
 801a4ae:	4619      	mov	r1, r3
 801a4b0:	f00c f809 	bl	80264c6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a4b4:	69bb      	ldr	r3, [r7, #24]
 801a4b6:	68db      	ldr	r3, [r3, #12]
 801a4b8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a4ba:	f107 030c 	add.w	r3, r7, #12
 801a4be:	4618      	mov	r0, r3
 801a4c0:	f000 f824 	bl	801a50c <ip4_route>
 801a4c4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801a4c6:	693b      	ldr	r3, [r7, #16]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d011      	beq.n	801a4f0 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a4cc:	697b      	ldr	r3, [r7, #20]
 801a4ce:	2200      	movs	r2, #0
 801a4d0:	709a      	strb	r2, [r3, #2]
 801a4d2:	2200      	movs	r2, #0
 801a4d4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a4d6:	f107 020c 	add.w	r2, r7, #12
 801a4da:	693b      	ldr	r3, [r7, #16]
 801a4dc:	9302      	str	r3, [sp, #8]
 801a4de:	2301      	movs	r3, #1
 801a4e0:	9301      	str	r3, [sp, #4]
 801a4e2:	2300      	movs	r3, #0
 801a4e4:	9300      	str	r3, [sp, #0]
 801a4e6:	23ff      	movs	r3, #255	; 0xff
 801a4e8:	2100      	movs	r1, #0
 801a4ea:	69f8      	ldr	r0, [r7, #28]
 801a4ec:	f000 f9b2 	bl	801a854 <ip4_output_if>
  }
  pbuf_free(q);
 801a4f0:	69f8      	ldr	r0, [r7, #28]
 801a4f2:	f002 fbb9 	bl	801cc68 <pbuf_free>
 801a4f6:	e000      	b.n	801a4fa <icmp_send_response+0xbe>
    return;
 801a4f8:	bf00      	nop
}
 801a4fa:	3720      	adds	r7, #32
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	bd80      	pop	{r7, pc}
 801a500:	0802733c 	.word	0x0802733c
 801a504:	08027408 	.word	0x08027408
 801a508:	080273ac 	.word	0x080273ac

0801a50c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a50c:	b480      	push	{r7}
 801a50e:	b085      	sub	sp, #20
 801a510:	af00      	add	r7, sp, #0
 801a512:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801a514:	4b2f      	ldr	r3, [pc, #188]	; (801a5d4 <ip4_route+0xc8>)
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	60fb      	str	r3, [r7, #12]
 801a51a:	e033      	b.n	801a584 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a522:	f003 0301 	and.w	r3, r3, #1
 801a526:	2b00      	cmp	r3, #0
 801a528:	d029      	beq.n	801a57e <ip4_route+0x72>
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a530:	f003 0304 	and.w	r3, r3, #4
 801a534:	2b00      	cmp	r3, #0
 801a536:	d022      	beq.n	801a57e <ip4_route+0x72>
 801a538:	68fb      	ldr	r3, [r7, #12]
 801a53a:	3304      	adds	r3, #4
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d01d      	beq.n	801a57e <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	681a      	ldr	r2, [r3, #0]
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	3304      	adds	r3, #4
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	405a      	eors	r2, r3
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	3308      	adds	r3, #8
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	4013      	ands	r3, r2
 801a556:	2b00      	cmp	r3, #0
 801a558:	d101      	bne.n	801a55e <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 801a55a:	68fb      	ldr	r3, [r7, #12]
 801a55c:	e033      	b.n	801a5c6 <ip4_route+0xba>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a564:	f003 0302 	and.w	r3, r3, #2
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d108      	bne.n	801a57e <ip4_route+0x72>
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	681a      	ldr	r2, [r3, #0]
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	330c      	adds	r3, #12
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	429a      	cmp	r2, r3
 801a578:	d101      	bne.n	801a57e <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 801a57a:	68fb      	ldr	r3, [r7, #12]
 801a57c:	e023      	b.n	801a5c6 <ip4_route+0xba>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	681b      	ldr	r3, [r3, #0]
 801a582:	60fb      	str	r3, [r7, #12]
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d1c8      	bne.n	801a51c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a58a:	4b13      	ldr	r3, [pc, #76]	; (801a5d8 <ip4_route+0xcc>)
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d015      	beq.n	801a5be <ip4_route+0xb2>
 801a592:	4b11      	ldr	r3, [pc, #68]	; (801a5d8 <ip4_route+0xcc>)
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a59a:	f003 0301 	and.w	r3, r3, #1
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d00d      	beq.n	801a5be <ip4_route+0xb2>
 801a5a2:	4b0d      	ldr	r3, [pc, #52]	; (801a5d8 <ip4_route+0xcc>)
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a5aa:	f003 0304 	and.w	r3, r3, #4
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d005      	beq.n	801a5be <ip4_route+0xb2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801a5b2:	4b09      	ldr	r3, [pc, #36]	; (801a5d8 <ip4_route+0xcc>)
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	3304      	adds	r3, #4
 801a5b8:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d101      	bne.n	801a5c2 <ip4_route+0xb6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a5be:	2300      	movs	r3, #0
 801a5c0:	e001      	b.n	801a5c6 <ip4_route+0xba>
  }

  return netif_default;
 801a5c2:	4b05      	ldr	r3, [pc, #20]	; (801a5d8 <ip4_route+0xcc>)
 801a5c4:	681b      	ldr	r3, [r3, #0]
}
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	3714      	adds	r7, #20
 801a5ca:	46bd      	mov	sp, r7
 801a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d0:	4770      	bx	lr
 801a5d2:	bf00      	nop
 801a5d4:	20008c20 	.word	0x20008c20
 801a5d8:	20008c24 	.word	0x20008c24

0801a5dc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a5dc:	b580      	push	{r7, lr}
 801a5de:	b086      	sub	sp, #24
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	6078      	str	r0, [r7, #4]
 801a5e4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	685b      	ldr	r3, [r3, #4]
 801a5ea:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801a5ec:	697b      	ldr	r3, [r7, #20]
 801a5ee:	781b      	ldrb	r3, [r3, #0]
 801a5f0:	091b      	lsrs	r3, r3, #4
 801a5f2:	b2db      	uxtb	r3, r3
 801a5f4:	2b04      	cmp	r3, #4
 801a5f6:	d004      	beq.n	801a602 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a5f8:	6878      	ldr	r0, [r7, #4]
 801a5fa:	f002 fb35 	bl	801cc68 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a5fe:	2300      	movs	r3, #0
 801a600:	e120      	b.n	801a844 <ip4_input+0x268>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801a602:	697b      	ldr	r3, [r7, #20]
 801a604:	781b      	ldrb	r3, [r3, #0]
 801a606:	b29b      	uxth	r3, r3
 801a608:	f003 030f 	and.w	r3, r3, #15
 801a60c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801a60e:	897b      	ldrh	r3, [r7, #10]
 801a610:	009b      	lsls	r3, r3, #2
 801a612:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a614:	697b      	ldr	r3, [r7, #20]
 801a616:	885b      	ldrh	r3, [r3, #2]
 801a618:	b29b      	uxth	r3, r3
 801a61a:	4618      	mov	r0, r3
 801a61c:	f7fe fe94 	bl	8019348 <lwip_htons>
 801a620:	4603      	mov	r3, r0
 801a622:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	891b      	ldrh	r3, [r3, #8]
 801a628:	893a      	ldrh	r2, [r7, #8]
 801a62a:	429a      	cmp	r2, r3
 801a62c:	d204      	bcs.n	801a638 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 801a62e:	893b      	ldrh	r3, [r7, #8]
 801a630:	4619      	mov	r1, r3
 801a632:	6878      	ldr	r0, [r7, #4]
 801a634:	f002 f9a4 	bl	801c980 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	895b      	ldrh	r3, [r3, #10]
 801a63c:	897a      	ldrh	r2, [r7, #10]
 801a63e:	429a      	cmp	r2, r3
 801a640:	d807      	bhi.n	801a652 <ip4_input+0x76>
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	891b      	ldrh	r3, [r3, #8]
 801a646:	893a      	ldrh	r2, [r7, #8]
 801a648:	429a      	cmp	r2, r3
 801a64a:	d802      	bhi.n	801a652 <ip4_input+0x76>
 801a64c:	897b      	ldrh	r3, [r7, #10]
 801a64e:	2b13      	cmp	r3, #19
 801a650:	d804      	bhi.n	801a65c <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a652:	6878      	ldr	r0, [r7, #4]
 801a654:	f002 fb08 	bl	801cc68 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a658:	2300      	movs	r3, #0
 801a65a:	e0f3      	b.n	801a844 <ip4_input+0x268>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a65c:	697b      	ldr	r3, [r7, #20]
 801a65e:	691b      	ldr	r3, [r3, #16]
 801a660:	4a7a      	ldr	r2, [pc, #488]	; (801a84c <ip4_input+0x270>)
 801a662:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a664:	697b      	ldr	r3, [r7, #20]
 801a666:	68db      	ldr	r3, [r3, #12]
 801a668:	4a78      	ldr	r2, [pc, #480]	; (801a84c <ip4_input+0x270>)
 801a66a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a66c:	4b77      	ldr	r3, [pc, #476]	; (801a84c <ip4_input+0x270>)
 801a66e:	695b      	ldr	r3, [r3, #20]
 801a670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a674:	2be0      	cmp	r3, #224	; 0xe0
 801a676:	d111      	bne.n	801a69c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a678:	683b      	ldr	r3, [r7, #0]
 801a67a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a67e:	f003 0301 	and.w	r3, r3, #1
 801a682:	2b00      	cmp	r3, #0
 801a684:	d007      	beq.n	801a696 <ip4_input+0xba>
 801a686:	683b      	ldr	r3, [r7, #0]
 801a688:	3304      	adds	r3, #4
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d002      	beq.n	801a696 <ip4_input+0xba>
      netif = inp;
 801a690:	683b      	ldr	r3, [r7, #0]
 801a692:	613b      	str	r3, [r7, #16]
 801a694:	e040      	b.n	801a718 <ip4_input+0x13c>
    } else {
      netif = NULL;
 801a696:	2300      	movs	r3, #0
 801a698:	613b      	str	r3, [r7, #16]
 801a69a:	e03d      	b.n	801a718 <ip4_input+0x13c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801a69c:	2301      	movs	r3, #1
 801a69e:	60fb      	str	r3, [r7, #12]
    netif = inp;
 801a6a0:	683b      	ldr	r3, [r7, #0]
 801a6a2:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a6a4:	693b      	ldr	r3, [r7, #16]
 801a6a6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a6aa:	f003 0301 	and.w	r3, r3, #1
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d014      	beq.n	801a6dc <ip4_input+0x100>
 801a6b2:	693b      	ldr	r3, [r7, #16]
 801a6b4:	3304      	adds	r3, #4
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d00f      	beq.n	801a6dc <ip4_input+0x100>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a6bc:	4b63      	ldr	r3, [pc, #396]	; (801a84c <ip4_input+0x270>)
 801a6be:	695a      	ldr	r2, [r3, #20]
 801a6c0:	693b      	ldr	r3, [r7, #16]
 801a6c2:	3304      	adds	r3, #4
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	429a      	cmp	r2, r3
 801a6c8:	d026      	beq.n	801a718 <ip4_input+0x13c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a6ca:	4b60      	ldr	r3, [pc, #384]	; (801a84c <ip4_input+0x270>)
 801a6cc:	695b      	ldr	r3, [r3, #20]
 801a6ce:	6939      	ldr	r1, [r7, #16]
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	f000 f991 	bl	801a9f8 <ip4_addr_isbroadcast_u32>
 801a6d6:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d11d      	bne.n	801a718 <ip4_input+0x13c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d00d      	beq.n	801a6fe <ip4_input+0x122>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801a6e2:	4b5a      	ldr	r3, [pc, #360]	; (801a84c <ip4_input+0x270>)
 801a6e4:	695b      	ldr	r3, [r3, #20]
 801a6e6:	b2db      	uxtb	r3, r3
 801a6e8:	2b7f      	cmp	r3, #127	; 0x7f
 801a6ea:	d102      	bne.n	801a6f2 <ip4_input+0x116>
          netif = NULL;
 801a6ec:	2300      	movs	r3, #0
 801a6ee:	613b      	str	r3, [r7, #16]
          break;
 801a6f0:	e012      	b.n	801a718 <ip4_input+0x13c>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 801a6f6:	4b56      	ldr	r3, [pc, #344]	; (801a850 <ip4_input+0x274>)
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	613b      	str	r3, [r7, #16]
 801a6fc:	e002      	b.n	801a704 <ip4_input+0x128>
      } else {
        netif = netif->next;
 801a6fe:	693b      	ldr	r3, [r7, #16]
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 801a704:	693a      	ldr	r2, [r7, #16]
 801a706:	683b      	ldr	r3, [r7, #0]
 801a708:	429a      	cmp	r2, r3
 801a70a:	d102      	bne.n	801a712 <ip4_input+0x136>
        netif = netif->next;
 801a70c:	693b      	ldr	r3, [r7, #16]
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 801a712:	693b      	ldr	r3, [r7, #16]
 801a714:	2b00      	cmp	r3, #0
 801a716:	d1c5      	bne.n	801a6a4 <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a718:	4b4c      	ldr	r3, [pc, #304]	; (801a84c <ip4_input+0x270>)
 801a71a:	691b      	ldr	r3, [r3, #16]
 801a71c:	6839      	ldr	r1, [r7, #0]
 801a71e:	4618      	mov	r0, r3
 801a720:	f000 f96a 	bl	801a9f8 <ip4_addr_isbroadcast_u32>
 801a724:	4603      	mov	r3, r0
 801a726:	2b00      	cmp	r3, #0
 801a728:	d105      	bne.n	801a736 <ip4_input+0x15a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a72a:	4b48      	ldr	r3, [pc, #288]	; (801a84c <ip4_input+0x270>)
 801a72c:	691b      	ldr	r3, [r3, #16]
 801a72e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a732:	2be0      	cmp	r3, #224	; 0xe0
 801a734:	d104      	bne.n	801a740 <ip4_input+0x164>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a736:	6878      	ldr	r0, [r7, #4]
 801a738:	f002 fa96 	bl	801cc68 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a73c:	2300      	movs	r3, #0
 801a73e:	e081      	b.n	801a844 <ip4_input+0x268>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a740:	693b      	ldr	r3, [r7, #16]
 801a742:	2b00      	cmp	r3, #0
 801a744:	d104      	bne.n	801a750 <ip4_input+0x174>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a746:	6878      	ldr	r0, [r7, #4]
 801a748:	f002 fa8e 	bl	801cc68 <pbuf_free>
    return ERR_OK;
 801a74c:	2300      	movs	r3, #0
 801a74e:	e079      	b.n	801a844 <ip4_input+0x268>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a750:	697b      	ldr	r3, [r7, #20]
 801a752:	88db      	ldrh	r3, [r3, #6]
 801a754:	b29b      	uxth	r3, r3
 801a756:	461a      	mov	r2, r3
 801a758:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a75c:	4013      	ands	r3, r2
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d00b      	beq.n	801a77a <ip4_input+0x19e>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a762:	6878      	ldr	r0, [r7, #4]
 801a764:	f000 fe5e 	bl	801b424 <ip4_reass>
 801a768:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d101      	bne.n	801a774 <ip4_input+0x198>
      return ERR_OK;
 801a770:	2300      	movs	r3, #0
 801a772:	e067      	b.n	801a844 <ip4_input+0x268>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	685b      	ldr	r3, [r3, #4]
 801a778:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a77a:	4a34      	ldr	r2, [pc, #208]	; (801a84c <ip4_input+0x270>)
 801a77c:	693b      	ldr	r3, [r7, #16]
 801a77e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a780:	4a32      	ldr	r2, [pc, #200]	; (801a84c <ip4_input+0x270>)
 801a782:	683b      	ldr	r3, [r7, #0]
 801a784:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a786:	4a31      	ldr	r2, [pc, #196]	; (801a84c <ip4_input+0x270>)
 801a788:	697b      	ldr	r3, [r7, #20]
 801a78a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801a78c:	697b      	ldr	r3, [r7, #20]
 801a78e:	781b      	ldrb	r3, [r3, #0]
 801a790:	b29b      	uxth	r3, r3
 801a792:	f003 030f 	and.w	r3, r3, #15
 801a796:	b29b      	uxth	r3, r3
 801a798:	009b      	lsls	r3, r3, #2
 801a79a:	b29a      	uxth	r2, r3
 801a79c:	4b2b      	ldr	r3, [pc, #172]	; (801a84c <ip4_input+0x270>)
 801a79e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801a7a0:	897b      	ldrh	r3, [r7, #10]
 801a7a2:	425b      	negs	r3, r3
 801a7a4:	b29b      	uxth	r3, r3
 801a7a6:	b21b      	sxth	r3, r3
 801a7a8:	4619      	mov	r1, r3
 801a7aa:	6878      	ldr	r0, [r7, #4]
 801a7ac:	f002 fa38 	bl	801cc20 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 801a7b0:	697b      	ldr	r3, [r7, #20]
 801a7b2:	7a5b      	ldrb	r3, [r3, #9]
 801a7b4:	2b06      	cmp	r3, #6
 801a7b6:	d009      	beq.n	801a7cc <ip4_input+0x1f0>
 801a7b8:	2b11      	cmp	r3, #17
 801a7ba:	d002      	beq.n	801a7c2 <ip4_input+0x1e6>
 801a7bc:	2b01      	cmp	r3, #1
 801a7be:	d00a      	beq.n	801a7d6 <ip4_input+0x1fa>
 801a7c0:	e00e      	b.n	801a7e0 <ip4_input+0x204>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801a7c2:	6839      	ldr	r1, [r7, #0]
 801a7c4:	6878      	ldr	r0, [r7, #4]
 801a7c6:	f008 f8f5 	bl	80229b4 <udp_input>
      break;
 801a7ca:	e028      	b.n	801a81e <ip4_input+0x242>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 801a7cc:	6839      	ldr	r1, [r7, #0]
 801a7ce:	6878      	ldr	r0, [r7, #4]
 801a7d0:	f004 f916 	bl	801ea00 <tcp_input>
      break;
 801a7d4:	e023      	b.n	801a81e <ip4_input+0x242>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801a7d6:	6839      	ldr	r1, [r7, #0]
 801a7d8:	6878      	ldr	r0, [r7, #4]
 801a7da:	f7ff fd09 	bl	801a1f0 <icmp_input>
      break;
 801a7de:	e01e      	b.n	801a81e <ip4_input+0x242>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a7e0:	4b1a      	ldr	r3, [pc, #104]	; (801a84c <ip4_input+0x270>)
 801a7e2:	695b      	ldr	r3, [r3, #20]
 801a7e4:	6939      	ldr	r1, [r7, #16]
 801a7e6:	4618      	mov	r0, r3
 801a7e8:	f000 f906 	bl	801a9f8 <ip4_addr_isbroadcast_u32>
 801a7ec:	4603      	mov	r3, r0
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d112      	bne.n	801a818 <ip4_input+0x23c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a7f2:	4b16      	ldr	r3, [pc, #88]	; (801a84c <ip4_input+0x270>)
 801a7f4:	695b      	ldr	r3, [r3, #20]
 801a7f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a7fa:	2be0      	cmp	r3, #224	; 0xe0
 801a7fc:	d00c      	beq.n	801a818 <ip4_input+0x23c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801a7fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801a802:	4619      	mov	r1, r3
 801a804:	6878      	ldr	r0, [r7, #4]
 801a806:	f002 fa1d 	bl	801cc44 <pbuf_header_force>
        p->payload = iphdr;
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	697a      	ldr	r2, [r7, #20]
 801a80e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a810:	2102      	movs	r1, #2
 801a812:	6878      	ldr	r0, [r7, #4]
 801a814:	f7ff fdf2 	bl	801a3fc <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801a818:	6878      	ldr	r0, [r7, #4]
 801a81a:	f002 fa25 	bl	801cc68 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a81e:	4b0b      	ldr	r3, [pc, #44]	; (801a84c <ip4_input+0x270>)
 801a820:	2200      	movs	r2, #0
 801a822:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a824:	4b09      	ldr	r3, [pc, #36]	; (801a84c <ip4_input+0x270>)
 801a826:	2200      	movs	r2, #0
 801a828:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a82a:	4b08      	ldr	r3, [pc, #32]	; (801a84c <ip4_input+0x270>)
 801a82c:	2200      	movs	r2, #0
 801a82e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a830:	4b06      	ldr	r3, [pc, #24]	; (801a84c <ip4_input+0x270>)
 801a832:	2200      	movs	r2, #0
 801a834:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a836:	4b05      	ldr	r3, [pc, #20]	; (801a84c <ip4_input+0x270>)
 801a838:	2200      	movs	r2, #0
 801a83a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a83c:	4b03      	ldr	r3, [pc, #12]	; (801a84c <ip4_input+0x270>)
 801a83e:	2200      	movs	r2, #0
 801a840:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a842:	2300      	movs	r3, #0
}
 801a844:	4618      	mov	r0, r3
 801a846:	3718      	adds	r7, #24
 801a848:	46bd      	mov	sp, r7
 801a84a:	bd80      	pop	{r7, pc}
 801a84c:	20004608 	.word	0x20004608
 801a850:	20008c20 	.word	0x20008c20

0801a854 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801a854:	b580      	push	{r7, lr}
 801a856:	b08a      	sub	sp, #40	; 0x28
 801a858:	af04      	add	r7, sp, #16
 801a85a:	60f8      	str	r0, [r7, #12]
 801a85c:	60b9      	str	r1, [r7, #8]
 801a85e:	607a      	str	r2, [r7, #4]
 801a860:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a862:	68bb      	ldr	r3, [r7, #8]
 801a864:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d009      	beq.n	801a880 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a86c:	68bb      	ldr	r3, [r7, #8]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d003      	beq.n	801a87a <ip4_output_if+0x26>
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	2b00      	cmp	r3, #0
 801a878:	d102      	bne.n	801a880 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a87c:	3304      	adds	r3, #4
 801a87e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a880:	78fa      	ldrb	r2, [r7, #3]
 801a882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a884:	9302      	str	r3, [sp, #8]
 801a886:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a88a:	9301      	str	r3, [sp, #4]
 801a88c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a890:	9300      	str	r3, [sp, #0]
 801a892:	4613      	mov	r3, r2
 801a894:	687a      	ldr	r2, [r7, #4]
 801a896:	6979      	ldr	r1, [r7, #20]
 801a898:	68f8      	ldr	r0, [r7, #12]
 801a89a:	f000 f805 	bl	801a8a8 <ip4_output_if_src>
 801a89e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	3718      	adds	r7, #24
 801a8a4:	46bd      	mov	sp, r7
 801a8a6:	bd80      	pop	{r7, pc}

0801a8a8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801a8a8:	b580      	push	{r7, lr}
 801a8aa:	b088      	sub	sp, #32
 801a8ac:	af00      	add	r7, sp, #0
 801a8ae:	60f8      	str	r0, [r7, #12]
 801a8b0:	60b9      	str	r1, [r7, #8]
 801a8b2:	607a      	str	r2, [r7, #4]
 801a8b4:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	89db      	ldrh	r3, [r3, #14]
 801a8ba:	2b01      	cmp	r3, #1
 801a8bc:	d006      	beq.n	801a8cc <ip4_output_if_src+0x24>
 801a8be:	4b48      	ldr	r3, [pc, #288]	; (801a9e0 <ip4_output_if_src+0x138>)
 801a8c0:	f240 3233 	movw	r2, #819	; 0x333
 801a8c4:	4947      	ldr	r1, [pc, #284]	; (801a9e4 <ip4_output_if_src+0x13c>)
 801a8c6:	4848      	ldr	r0, [pc, #288]	; (801a9e8 <ip4_output_if_src+0x140>)
 801a8c8:	f00b f92a 	bl	8025b20 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d060      	beq.n	801a994 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a8d2:	2314      	movs	r3, #20
 801a8d4:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801a8d6:	2114      	movs	r1, #20
 801a8d8:	68f8      	ldr	r0, [r7, #12]
 801a8da:	f002 f9a1 	bl	801cc20 <pbuf_header>
 801a8de:	4603      	mov	r3, r0
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d002      	beq.n	801a8ea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a8e4:	f06f 0301 	mvn.w	r3, #1
 801a8e8:	e075      	b.n	801a9d6 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	685b      	ldr	r3, [r3, #4]
 801a8ee:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	895b      	ldrh	r3, [r3, #10]
 801a8f4:	2b13      	cmp	r3, #19
 801a8f6:	d806      	bhi.n	801a906 <ip4_output_if_src+0x5e>
 801a8f8:	4b39      	ldr	r3, [pc, #228]	; (801a9e0 <ip4_output_if_src+0x138>)
 801a8fa:	f240 3261 	movw	r2, #865	; 0x361
 801a8fe:	493b      	ldr	r1, [pc, #236]	; (801a9ec <ip4_output_if_src+0x144>)
 801a900:	4839      	ldr	r0, [pc, #228]	; (801a9e8 <ip4_output_if_src+0x140>)
 801a902:	f00b f90d 	bl	8025b20 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a906:	69bb      	ldr	r3, [r7, #24]
 801a908:	78fa      	ldrb	r2, [r7, #3]
 801a90a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a90c:	69bb      	ldr	r3, [r7, #24]
 801a90e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a912:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	681a      	ldr	r2, [r3, #0]
 801a918:	69bb      	ldr	r3, [r7, #24]
 801a91a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a91c:	8bfb      	ldrh	r3, [r7, #30]
 801a91e:	089b      	lsrs	r3, r3, #2
 801a920:	b29b      	uxth	r3, r3
 801a922:	b2db      	uxtb	r3, r3
 801a924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a928:	b2da      	uxtb	r2, r3
 801a92a:	69bb      	ldr	r3, [r7, #24]
 801a92c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a92e:	69bb      	ldr	r3, [r7, #24]
 801a930:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a934:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	891b      	ldrh	r3, [r3, #8]
 801a93a:	4618      	mov	r0, r3
 801a93c:	f7fe fd04 	bl	8019348 <lwip_htons>
 801a940:	4603      	mov	r3, r0
 801a942:	461a      	mov	r2, r3
 801a944:	69bb      	ldr	r3, [r7, #24]
 801a946:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a948:	69bb      	ldr	r3, [r7, #24]
 801a94a:	2200      	movs	r2, #0
 801a94c:	719a      	strb	r2, [r3, #6]
 801a94e:	2200      	movs	r2, #0
 801a950:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a952:	4b27      	ldr	r3, [pc, #156]	; (801a9f0 <ip4_output_if_src+0x148>)
 801a954:	881b      	ldrh	r3, [r3, #0]
 801a956:	4618      	mov	r0, r3
 801a958:	f7fe fcf6 	bl	8019348 <lwip_htons>
 801a95c:	4603      	mov	r3, r0
 801a95e:	461a      	mov	r2, r3
 801a960:	69bb      	ldr	r3, [r7, #24]
 801a962:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a964:	4b22      	ldr	r3, [pc, #136]	; (801a9f0 <ip4_output_if_src+0x148>)
 801a966:	881b      	ldrh	r3, [r3, #0]
 801a968:	3301      	adds	r3, #1
 801a96a:	b29a      	uxth	r2, r3
 801a96c:	4b20      	ldr	r3, [pc, #128]	; (801a9f0 <ip4_output_if_src+0x148>)
 801a96e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a970:	68bb      	ldr	r3, [r7, #8]
 801a972:	2b00      	cmp	r3, #0
 801a974:	d104      	bne.n	801a980 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a976:	4b1f      	ldr	r3, [pc, #124]	; (801a9f4 <ip4_output_if_src+0x14c>)
 801a978:	681a      	ldr	r2, [r3, #0]
 801a97a:	69bb      	ldr	r3, [r7, #24]
 801a97c:	60da      	str	r2, [r3, #12]
 801a97e:	e003      	b.n	801a988 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a980:	68bb      	ldr	r3, [r7, #8]
 801a982:	681a      	ldr	r2, [r3, #0]
 801a984:	69bb      	ldr	r3, [r7, #24]
 801a986:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a988:	69bb      	ldr	r3, [r7, #24]
 801a98a:	2200      	movs	r2, #0
 801a98c:	729a      	strb	r2, [r3, #10]
 801a98e:	2200      	movs	r2, #0
 801a990:	72da      	strb	r2, [r3, #11]
 801a992:	e008      	b.n	801a9a6 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	685b      	ldr	r3, [r3, #4]
 801a998:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a99a:	69bb      	ldr	r3, [r7, #24]
 801a99c:	691b      	ldr	r3, [r3, #16]
 801a99e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a9a0:	f107 0314 	add.w	r3, r7, #20
 801a9a4:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d00c      	beq.n	801a9c8 <ip4_output_if_src+0x120>
 801a9ae:	68fb      	ldr	r3, [r7, #12]
 801a9b0:	891a      	ldrh	r2, [r3, #8]
 801a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9b4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a9b6:	429a      	cmp	r2, r3
 801a9b8:	d906      	bls.n	801a9c8 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801a9ba:	687a      	ldr	r2, [r7, #4]
 801a9bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a9be:	68f8      	ldr	r0, [r7, #12]
 801a9c0:	f000 fed8 	bl	801b774 <ip4_frag>
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	e006      	b.n	801a9d6 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ca:	695b      	ldr	r3, [r3, #20]
 801a9cc:	687a      	ldr	r2, [r7, #4]
 801a9ce:	68f9      	ldr	r1, [r7, #12]
 801a9d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9d2:	4798      	blx	r3
 801a9d4:	4603      	mov	r3, r0
}
 801a9d6:	4618      	mov	r0, r3
 801a9d8:	3720      	adds	r7, #32
 801a9da:	46bd      	mov	sp, r7
 801a9dc:	bd80      	pop	{r7, pc}
 801a9de:	bf00      	nop
 801a9e0:	08027434 	.word	0x08027434
 801a9e4:	08027468 	.word	0x08027468
 801a9e8:	08027474 	.word	0x08027474
 801a9ec:	0802749c 	.word	0x0802749c
 801a9f0:	20004092 	.word	0x20004092
 801a9f4:	0802b34c 	.word	0x0802b34c

0801a9f8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a9f8:	b480      	push	{r7}
 801a9fa:	b085      	sub	sp, #20
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
 801aa00:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa0c:	d002      	beq.n	801aa14 <ip4_addr_isbroadcast_u32+0x1c>
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d101      	bne.n	801aa18 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801aa14:	2301      	movs	r3, #1
 801aa16:	e02a      	b.n	801aa6e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801aa18:	683b      	ldr	r3, [r7, #0]
 801aa1a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801aa1e:	f003 0302 	and.w	r3, r3, #2
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d101      	bne.n	801aa2a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801aa26:	2300      	movs	r3, #0
 801aa28:	e021      	b.n	801aa6e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801aa2a:	683b      	ldr	r3, [r7, #0]
 801aa2c:	3304      	adds	r3, #4
 801aa2e:	681a      	ldr	r2, [r3, #0]
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	429a      	cmp	r2, r3
 801aa34:	d101      	bne.n	801aa3a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801aa36:	2300      	movs	r3, #0
 801aa38:	e019      	b.n	801aa6e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801aa3a:	68fa      	ldr	r2, [r7, #12]
 801aa3c:	683b      	ldr	r3, [r7, #0]
 801aa3e:	3304      	adds	r3, #4
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	405a      	eors	r2, r3
 801aa44:	683b      	ldr	r3, [r7, #0]
 801aa46:	3308      	adds	r3, #8
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	4013      	ands	r3, r2
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d10d      	bne.n	801aa6c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801aa50:	683b      	ldr	r3, [r7, #0]
 801aa52:	3308      	adds	r3, #8
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	43da      	mvns	r2, r3
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801aa5c:	683b      	ldr	r3, [r7, #0]
 801aa5e:	3308      	adds	r3, #8
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801aa64:	429a      	cmp	r2, r3
 801aa66:	d101      	bne.n	801aa6c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801aa68:	2301      	movs	r3, #1
 801aa6a:	e000      	b.n	801aa6e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801aa6c:	2300      	movs	r3, #0
  }
}
 801aa6e:	4618      	mov	r0, r3
 801aa70:	3714      	adds	r7, #20
 801aa72:	46bd      	mov	sp, r7
 801aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa78:	4770      	bx	lr
	...

0801aa7c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b08a      	sub	sp, #40	; 0x28
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	6078      	str	r0, [r7, #4]
 801aa84:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801aa86:	f107 030c 	add.w	r3, r7, #12
 801aa8a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	781b      	ldrb	r3, [r3, #0]
 801aa90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 801aa94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aa98:	2b2f      	cmp	r3, #47	; 0x2f
 801aa9a:	d903      	bls.n	801aaa4 <ip4addr_aton+0x28>
 801aa9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aaa0:	2b39      	cmp	r3, #57	; 0x39
 801aaa2:	d901      	bls.n	801aaa8 <ip4addr_aton+0x2c>
      return 0;
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	e11e      	b.n	801ace6 <ip4addr_aton+0x26a>
    }
    val = 0;
 801aaa8:	2300      	movs	r3, #0
 801aaaa:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801aaac:	230a      	movs	r3, #10
 801aaae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801aab2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aab6:	2b30      	cmp	r3, #48	; 0x30
 801aab8:	d11c      	bne.n	801aaf4 <ip4addr_aton+0x78>
      c = *++cp;
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	3301      	adds	r3, #1
 801aabe:	607b      	str	r3, [r7, #4]
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	781b      	ldrb	r3, [r3, #0]
 801aac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801aac8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aacc:	2b78      	cmp	r3, #120	; 0x78
 801aace:	d003      	beq.n	801aad8 <ip4addr_aton+0x5c>
 801aad0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aad4:	2b58      	cmp	r3, #88	; 0x58
 801aad6:	d10a      	bne.n	801aaee <ip4addr_aton+0x72>
        base = 16;
 801aad8:	2310      	movs	r3, #16
 801aada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	3301      	adds	r3, #1
 801aae2:	607b      	str	r3, [r7, #4]
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	781b      	ldrb	r3, [r3, #0]
 801aae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801aaec:	e002      	b.n	801aaf4 <ip4addr_aton+0x78>
      } else {
        base = 8;
 801aaee:	2308      	movs	r3, #8
 801aaf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 801aaf4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aaf8:	2b2f      	cmp	r3, #47	; 0x2f
 801aafa:	d915      	bls.n	801ab28 <ip4addr_aton+0xac>
 801aafc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab00:	2b39      	cmp	r3, #57	; 0x39
 801ab02:	d811      	bhi.n	801ab28 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 801ab04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ab08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab0a:	fb02 f203 	mul.w	r2, r2, r3
 801ab0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab12:	4413      	add	r3, r2
 801ab14:	3b30      	subs	r3, #48	; 0x30
 801ab16:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	3301      	adds	r3, #1
 801ab1c:	607b      	str	r3, [r7, #4]
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	781b      	ldrb	r3, [r3, #0]
 801ab22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801ab26:	e036      	b.n	801ab96 <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 801ab28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ab2c:	2b10      	cmp	r3, #16
 801ab2e:	d133      	bne.n	801ab98 <ip4addr_aton+0x11c>
 801ab30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab34:	2b2f      	cmp	r3, #47	; 0x2f
 801ab36:	d903      	bls.n	801ab40 <ip4addr_aton+0xc4>
 801ab38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab3c:	2b39      	cmp	r3, #57	; 0x39
 801ab3e:	d90f      	bls.n	801ab60 <ip4addr_aton+0xe4>
 801ab40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab44:	2b60      	cmp	r3, #96	; 0x60
 801ab46:	d903      	bls.n	801ab50 <ip4addr_aton+0xd4>
 801ab48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab4c:	2b66      	cmp	r3, #102	; 0x66
 801ab4e:	d907      	bls.n	801ab60 <ip4addr_aton+0xe4>
 801ab50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab54:	2b40      	cmp	r3, #64	; 0x40
 801ab56:	d91f      	bls.n	801ab98 <ip4addr_aton+0x11c>
 801ab58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab5c:	2b46      	cmp	r3, #70	; 0x46
 801ab5e:	d81b      	bhi.n	801ab98 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab62:	011b      	lsls	r3, r3, #4
 801ab64:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801ab68:	f102 010a 	add.w	r1, r2, #10
 801ab6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801ab70:	2a60      	cmp	r2, #96	; 0x60
 801ab72:	d905      	bls.n	801ab80 <ip4addr_aton+0x104>
 801ab74:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801ab78:	2a7a      	cmp	r2, #122	; 0x7a
 801ab7a:	d801      	bhi.n	801ab80 <ip4addr_aton+0x104>
 801ab7c:	2261      	movs	r2, #97	; 0x61
 801ab7e:	e000      	b.n	801ab82 <ip4addr_aton+0x106>
 801ab80:	2241      	movs	r2, #65	; 0x41
 801ab82:	1a8a      	subs	r2, r1, r2
 801ab84:	4313      	orrs	r3, r2
 801ab86:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	3301      	adds	r3, #1
 801ab8c:	607b      	str	r3, [r7, #4]
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	781b      	ldrb	r3, [r3, #0]
 801ab92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (isdigit(c)) {
 801ab96:	e7ad      	b.n	801aaf4 <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 801ab98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab9c:	2b2e      	cmp	r3, #46	; 0x2e
 801ab9e:	d114      	bne.n	801abca <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801aba0:	f107 030c 	add.w	r3, r7, #12
 801aba4:	330c      	adds	r3, #12
 801aba6:	69fa      	ldr	r2, [r7, #28]
 801aba8:	4293      	cmp	r3, r2
 801abaa:	d801      	bhi.n	801abb0 <ip4addr_aton+0x134>
        return 0;
 801abac:	2300      	movs	r3, #0
 801abae:	e09a      	b.n	801ace6 <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 801abb0:	69fb      	ldr	r3, [r7, #28]
 801abb2:	1d1a      	adds	r2, r3, #4
 801abb4:	61fa      	str	r2, [r7, #28]
 801abb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801abb8:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	3301      	adds	r3, #1
 801abbe:	607b      	str	r3, [r7, #4]
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	781b      	ldrb	r3, [r3, #0]
 801abc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!isdigit(c)) {
 801abc8:	e764      	b.n	801aa94 <ip4addr_aton+0x18>
    } else {
      break;
 801abca:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 801abcc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d019      	beq.n	801ac08 <ip4addr_aton+0x18c>
 801abd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abd8:	2b20      	cmp	r3, #32
 801abda:	d015      	beq.n	801ac08 <ip4addr_aton+0x18c>
 801abdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abe0:	2b0c      	cmp	r3, #12
 801abe2:	d011      	beq.n	801ac08 <ip4addr_aton+0x18c>
 801abe4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abe8:	2b0a      	cmp	r3, #10
 801abea:	d00d      	beq.n	801ac08 <ip4addr_aton+0x18c>
 801abec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abf0:	2b0d      	cmp	r3, #13
 801abf2:	d009      	beq.n	801ac08 <ip4addr_aton+0x18c>
 801abf4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abf8:	2b09      	cmp	r3, #9
 801abfa:	d005      	beq.n	801ac08 <ip4addr_aton+0x18c>
 801abfc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac00:	2b0b      	cmp	r3, #11
 801ac02:	d001      	beq.n	801ac08 <ip4addr_aton+0x18c>
    return 0;
 801ac04:	2300      	movs	r3, #0
 801ac06:	e06e      	b.n	801ace6 <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801ac08:	69fa      	ldr	r2, [r7, #28]
 801ac0a:	f107 030c 	add.w	r3, r7, #12
 801ac0e:	1ad3      	subs	r3, r2, r3
 801ac10:	109b      	asrs	r3, r3, #2
 801ac12:	3301      	adds	r3, #1
 801ac14:	2b04      	cmp	r3, #4
 801ac16:	d853      	bhi.n	801acc0 <ip4addr_aton+0x244>
 801ac18:	a201      	add	r2, pc, #4	; (adr r2, 801ac20 <ip4addr_aton+0x1a4>)
 801ac1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac1e:	bf00      	nop
 801ac20:	0801ac35 	.word	0x0801ac35
 801ac24:	0801acd1 	.word	0x0801acd1
 801ac28:	0801ac39 	.word	0x0801ac39
 801ac2c:	0801ac5b 	.word	0x0801ac5b
 801ac30:	0801ac89 	.word	0x0801ac89

  case 0:
    return 0;       /* initial nondigit */
 801ac34:	2300      	movs	r3, #0
 801ac36:	e056      	b.n	801ace6 <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 801ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ac3e:	d301      	bcc.n	801ac44 <ip4addr_aton+0x1c8>
      return 0;
 801ac40:	2300      	movs	r3, #0
 801ac42:	e050      	b.n	801ace6 <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	2bff      	cmp	r3, #255	; 0xff
 801ac48:	d901      	bls.n	801ac4e <ip4addr_aton+0x1d2>
      return 0;
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	e04b      	b.n	801ace6 <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	061b      	lsls	r3, r3, #24
 801ac52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac54:	4313      	orrs	r3, r2
 801ac56:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801ac58:	e03b      	b.n	801acd2 <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 801ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ac60:	d301      	bcc.n	801ac66 <ip4addr_aton+0x1ea>
      return 0;
 801ac62:	2300      	movs	r3, #0
 801ac64:	e03f      	b.n	801ace6 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801ac66:	68fb      	ldr	r3, [r7, #12]
 801ac68:	2bff      	cmp	r3, #255	; 0xff
 801ac6a:	d802      	bhi.n	801ac72 <ip4addr_aton+0x1f6>
 801ac6c:	693b      	ldr	r3, [r7, #16]
 801ac6e:	2bff      	cmp	r3, #255	; 0xff
 801ac70:	d901      	bls.n	801ac76 <ip4addr_aton+0x1fa>
      return 0;
 801ac72:	2300      	movs	r3, #0
 801ac74:	e037      	b.n	801ace6 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	061a      	lsls	r2, r3, #24
 801ac7a:	693b      	ldr	r3, [r7, #16]
 801ac7c:	041b      	lsls	r3, r3, #16
 801ac7e:	4313      	orrs	r3, r2
 801ac80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac82:	4313      	orrs	r3, r2
 801ac84:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801ac86:	e024      	b.n	801acd2 <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 801ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac8a:	2bff      	cmp	r3, #255	; 0xff
 801ac8c:	d901      	bls.n	801ac92 <ip4addr_aton+0x216>
      return 0;
 801ac8e:	2300      	movs	r3, #0
 801ac90:	e029      	b.n	801ace6 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	2bff      	cmp	r3, #255	; 0xff
 801ac96:	d805      	bhi.n	801aca4 <ip4addr_aton+0x228>
 801ac98:	693b      	ldr	r3, [r7, #16]
 801ac9a:	2bff      	cmp	r3, #255	; 0xff
 801ac9c:	d802      	bhi.n	801aca4 <ip4addr_aton+0x228>
 801ac9e:	697b      	ldr	r3, [r7, #20]
 801aca0:	2bff      	cmp	r3, #255	; 0xff
 801aca2:	d901      	bls.n	801aca8 <ip4addr_aton+0x22c>
      return 0;
 801aca4:	2300      	movs	r3, #0
 801aca6:	e01e      	b.n	801ace6 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	061a      	lsls	r2, r3, #24
 801acac:	693b      	ldr	r3, [r7, #16]
 801acae:	041b      	lsls	r3, r3, #16
 801acb0:	431a      	orrs	r2, r3
 801acb2:	697b      	ldr	r3, [r7, #20]
 801acb4:	021b      	lsls	r3, r3, #8
 801acb6:	4313      	orrs	r3, r2
 801acb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801acba:	4313      	orrs	r3, r2
 801acbc:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801acbe:	e008      	b.n	801acd2 <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 801acc0:	4b0b      	ldr	r3, [pc, #44]	; (801acf0 <ip4addr_aton+0x274>)
 801acc2:	f240 1203 	movw	r2, #259	; 0x103
 801acc6:	490b      	ldr	r1, [pc, #44]	; (801acf4 <ip4addr_aton+0x278>)
 801acc8:	480b      	ldr	r0, [pc, #44]	; (801acf8 <ip4addr_aton+0x27c>)
 801acca:	f00a ff29 	bl	8025b20 <iprintf>
    break;
 801acce:	e000      	b.n	801acd2 <ip4addr_aton+0x256>
    break;
 801acd0:	bf00      	nop
  }
  if (addr) {
 801acd2:	683b      	ldr	r3, [r7, #0]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d005      	beq.n	801ace4 <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801acd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801acda:	f7fe fb43 	bl	8019364 <lwip_htonl>
 801acde:	4602      	mov	r2, r0
 801ace0:	683b      	ldr	r3, [r7, #0]
 801ace2:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801ace4:	2301      	movs	r3, #1
}
 801ace6:	4618      	mov	r0, r3
 801ace8:	3728      	adds	r7, #40	; 0x28
 801acea:	46bd      	mov	sp, r7
 801acec:	bd80      	pop	{r7, pc}
 801acee:	bf00      	nop
 801acf0:	080274cc 	.word	0x080274cc
 801acf4:	08027508 	.word	0x08027508
 801acf8:	08027514 	.word	0x08027514

0801acfc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801acfc:	b580      	push	{r7, lr}
 801acfe:	b082      	sub	sp, #8
 801ad00:	af00      	add	r7, sp, #0
 801ad02:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801ad04:	2210      	movs	r2, #16
 801ad06:	4904      	ldr	r1, [pc, #16]	; (801ad18 <ip4addr_ntoa+0x1c>)
 801ad08:	6878      	ldr	r0, [r7, #4]
 801ad0a:	f000 f807 	bl	801ad1c <ip4addr_ntoa_r>
 801ad0e:	4603      	mov	r3, r0
}
 801ad10:	4618      	mov	r0, r3
 801ad12:	3708      	adds	r7, #8
 801ad14:	46bd      	mov	sp, r7
 801ad16:	bd80      	pop	{r7, pc}
 801ad18:	20004094 	.word	0x20004094

0801ad1c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801ad1c:	b480      	push	{r7}
 801ad1e:	b08d      	sub	sp, #52	; 0x34
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	60f8      	str	r0, [r7, #12]
 801ad24:	60b9      	str	r1, [r7, #8]
 801ad26:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801ad28:	2300      	movs	r3, #0
 801ad2a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801ad32:	68bb      	ldr	r3, [r7, #8]
 801ad34:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801ad36:	f107 0318 	add.w	r3, r7, #24
 801ad3a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ad42:	e059      	b.n	801adf8 <ip4addr_ntoa_r+0xdc>
    i = 0;
 801ad44:	2300      	movs	r3, #0
 801ad46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad4c:	781a      	ldrb	r2, [r3, #0]
 801ad4e:	4b33      	ldr	r3, [pc, #204]	; (801ae1c <ip4addr_ntoa_r+0x100>)
 801ad50:	fba3 1302 	umull	r1, r3, r3, r2
 801ad54:	08d9      	lsrs	r1, r3, #3
 801ad56:	460b      	mov	r3, r1
 801ad58:	009b      	lsls	r3, r3, #2
 801ad5a:	440b      	add	r3, r1
 801ad5c:	005b      	lsls	r3, r3, #1
 801ad5e:	1ad3      	subs	r3, r2, r3
 801ad60:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801ad62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad64:	781b      	ldrb	r3, [r3, #0]
 801ad66:	4a2d      	ldr	r2, [pc, #180]	; (801ae1c <ip4addr_ntoa_r+0x100>)
 801ad68:	fba2 2303 	umull	r2, r3, r2, r3
 801ad6c:	08db      	lsrs	r3, r3, #3
 801ad6e:	b2da      	uxtb	r2, r3
 801ad70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad72:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801ad74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ad78:	1c5a      	adds	r2, r3, #1
 801ad7a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801ad7e:	4619      	mov	r1, r3
 801ad80:	7ffb      	ldrb	r3, [r7, #31]
 801ad82:	3330      	adds	r3, #48	; 0x30
 801ad84:	b2da      	uxtb	r2, r3
 801ad86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ad8a:	440b      	add	r3, r1
 801ad8c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801ad90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad92:	781b      	ldrb	r3, [r3, #0]
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d1d8      	bne.n	801ad4a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801ad98:	e012      	b.n	801adc0 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801ad9a:	6a3b      	ldr	r3, [r7, #32]
 801ad9c:	1c5a      	adds	r2, r3, #1
 801ad9e:	623a      	str	r2, [r7, #32]
 801ada0:	687a      	ldr	r2, [r7, #4]
 801ada2:	4293      	cmp	r3, r2
 801ada4:	db01      	blt.n	801adaa <ip4addr_ntoa_r+0x8e>
        return NULL;
 801ada6:	2300      	movs	r3, #0
 801ada8:	e031      	b.n	801ae0e <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801adaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adac:	1c5a      	adds	r2, r3, #1
 801adae:	62fa      	str	r2, [r7, #44]	; 0x2c
 801adb0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801adb4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801adb8:	440a      	add	r2, r1
 801adba:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801adbe:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801adc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801adc4:	1e5a      	subs	r2, r3, #1
 801adc6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d1e5      	bne.n	801ad9a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801adce:	6a3b      	ldr	r3, [r7, #32]
 801add0:	1c5a      	adds	r2, r3, #1
 801add2:	623a      	str	r2, [r7, #32]
 801add4:	687a      	ldr	r2, [r7, #4]
 801add6:	4293      	cmp	r3, r2
 801add8:	db01      	blt.n	801adde <ip4addr_ntoa_r+0xc2>
      return NULL;
 801adda:	2300      	movs	r3, #0
 801addc:	e017      	b.n	801ae0e <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801adde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ade0:	1c5a      	adds	r2, r3, #1
 801ade2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ade4:	222e      	movs	r2, #46	; 0x2e
 801ade6:	701a      	strb	r2, [r3, #0]
    ap++;
 801ade8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adea:	3301      	adds	r3, #1
 801adec:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801adee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801adf2:	3301      	adds	r3, #1
 801adf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801adf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801adfc:	2b03      	cmp	r3, #3
 801adfe:	d9a1      	bls.n	801ad44 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801ae00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae02:	3b01      	subs	r3, #1
 801ae04:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae08:	2200      	movs	r2, #0
 801ae0a:	701a      	strb	r2, [r3, #0]
  return buf;
 801ae0c:	68bb      	ldr	r3, [r7, #8]
}
 801ae0e:	4618      	mov	r0, r3
 801ae10:	3734      	adds	r7, #52	; 0x34
 801ae12:	46bd      	mov	sp, r7
 801ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae18:	4770      	bx	lr
 801ae1a:	bf00      	nop
 801ae1c:	cccccccd 	.word	0xcccccccd

0801ae20 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b084      	sub	sp, #16
 801ae24:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ae26:	2300      	movs	r3, #0
 801ae28:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ae2a:	4b12      	ldr	r3, [pc, #72]	; (801ae74 <ip_reass_tmr+0x54>)
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801ae30:	e018      	b.n	801ae64 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	7fdb      	ldrb	r3, [r3, #31]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d00b      	beq.n	801ae52 <ip_reass_tmr+0x32>
      r->timer--;
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	7fdb      	ldrb	r3, [r3, #31]
 801ae3e:	3b01      	subs	r3, #1
 801ae40:	b2da      	uxtb	r2, r3
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	60fb      	str	r3, [r7, #12]
 801ae50:	e008      	b.n	801ae64 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ae5c:	68b9      	ldr	r1, [r7, #8]
 801ae5e:	6878      	ldr	r0, [r7, #4]
 801ae60:	f000 f80a 	bl	801ae78 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ae64:	68fb      	ldr	r3, [r7, #12]
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d1e3      	bne.n	801ae32 <ip_reass_tmr+0x12>
     }
   }
}
 801ae6a:	bf00      	nop
 801ae6c:	3710      	adds	r7, #16
 801ae6e:	46bd      	mov	sp, r7
 801ae70:	bd80      	pop	{r7, pc}
 801ae72:	bf00      	nop
 801ae74:	200040a4 	.word	0x200040a4

0801ae78 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b088      	sub	sp, #32
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	6078      	str	r0, [r7, #4]
 801ae80:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ae82:	2300      	movs	r3, #0
 801ae84:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ae86:	683a      	ldr	r2, [r7, #0]
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	429a      	cmp	r2, r3
 801ae8c:	d105      	bne.n	801ae9a <ip_reass_free_complete_datagram+0x22>
 801ae8e:	4b45      	ldr	r3, [pc, #276]	; (801afa4 <ip_reass_free_complete_datagram+0x12c>)
 801ae90:	22ab      	movs	r2, #171	; 0xab
 801ae92:	4945      	ldr	r1, [pc, #276]	; (801afa8 <ip_reass_free_complete_datagram+0x130>)
 801ae94:	4845      	ldr	r0, [pc, #276]	; (801afac <ip_reass_free_complete_datagram+0x134>)
 801ae96:	f00a fe43 	bl	8025b20 <iprintf>
  if (prev != NULL) {
 801ae9a:	683b      	ldr	r3, [r7, #0]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d00a      	beq.n	801aeb6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801aea0:	683b      	ldr	r3, [r7, #0]
 801aea2:	681a      	ldr	r2, [r3, #0]
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	429a      	cmp	r2, r3
 801aea8:	d005      	beq.n	801aeb6 <ip_reass_free_complete_datagram+0x3e>
 801aeaa:	4b3e      	ldr	r3, [pc, #248]	; (801afa4 <ip_reass_free_complete_datagram+0x12c>)
 801aeac:	22ad      	movs	r2, #173	; 0xad
 801aeae:	4940      	ldr	r1, [pc, #256]	; (801afb0 <ip_reass_free_complete_datagram+0x138>)
 801aeb0:	483e      	ldr	r0, [pc, #248]	; (801afac <ip_reass_free_complete_datagram+0x134>)
 801aeb2:	f00a fe35 	bl	8025b20 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	685b      	ldr	r3, [r3, #4]
 801aeba:	685b      	ldr	r3, [r3, #4]
 801aebc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801aebe:	697b      	ldr	r3, [r7, #20]
 801aec0:	889b      	ldrh	r3, [r3, #4]
 801aec2:	b29b      	uxth	r3, r3
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d12a      	bne.n	801af1e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	685b      	ldr	r3, [r3, #4]
 801aecc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801aece:	697b      	ldr	r3, [r7, #20]
 801aed0:	681a      	ldr	r2, [r3, #0]
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801aed6:	69bb      	ldr	r3, [r7, #24]
 801aed8:	6858      	ldr	r0, [r3, #4]
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	3308      	adds	r3, #8
 801aede:	2214      	movs	r2, #20
 801aee0:	4619      	mov	r1, r3
 801aee2:	f00b faf0 	bl	80264c6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801aee6:	2101      	movs	r1, #1
 801aee8:	69b8      	ldr	r0, [r7, #24]
 801aeea:	f7ff fa97 	bl	801a41c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801aeee:	69b8      	ldr	r0, [r7, #24]
 801aef0:	f001 ff54 	bl	801cd9c <pbuf_clen>
 801aef4:	4603      	mov	r3, r0
 801aef6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801aef8:	8bfa      	ldrh	r2, [r7, #30]
 801aefa:	8a7b      	ldrh	r3, [r7, #18]
 801aefc:	4413      	add	r3, r2
 801aefe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af02:	db05      	blt.n	801af10 <ip_reass_free_complete_datagram+0x98>
 801af04:	4b27      	ldr	r3, [pc, #156]	; (801afa4 <ip_reass_free_complete_datagram+0x12c>)
 801af06:	22bc      	movs	r2, #188	; 0xbc
 801af08:	492a      	ldr	r1, [pc, #168]	; (801afb4 <ip_reass_free_complete_datagram+0x13c>)
 801af0a:	4828      	ldr	r0, [pc, #160]	; (801afac <ip_reass_free_complete_datagram+0x134>)
 801af0c:	f00a fe08 	bl	8025b20 <iprintf>
    pbufs_freed += clen;
 801af10:	8bfa      	ldrh	r2, [r7, #30]
 801af12:	8a7b      	ldrh	r3, [r7, #18]
 801af14:	4413      	add	r3, r2
 801af16:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801af18:	69b8      	ldr	r0, [r7, #24]
 801af1a:	f001 fea5 	bl	801cc68 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	685b      	ldr	r3, [r3, #4]
 801af22:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801af24:	e01f      	b.n	801af66 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801af26:	69bb      	ldr	r3, [r7, #24]
 801af28:	685b      	ldr	r3, [r3, #4]
 801af2a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801af2c:	69bb      	ldr	r3, [r7, #24]
 801af2e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801af30:	697b      	ldr	r3, [r7, #20]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801af36:	68f8      	ldr	r0, [r7, #12]
 801af38:	f001 ff30 	bl	801cd9c <pbuf_clen>
 801af3c:	4603      	mov	r3, r0
 801af3e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801af40:	8bfa      	ldrh	r2, [r7, #30]
 801af42:	8a7b      	ldrh	r3, [r7, #18]
 801af44:	4413      	add	r3, r2
 801af46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af4a:	db05      	blt.n	801af58 <ip_reass_free_complete_datagram+0xe0>
 801af4c:	4b15      	ldr	r3, [pc, #84]	; (801afa4 <ip_reass_free_complete_datagram+0x12c>)
 801af4e:	22cc      	movs	r2, #204	; 0xcc
 801af50:	4918      	ldr	r1, [pc, #96]	; (801afb4 <ip_reass_free_complete_datagram+0x13c>)
 801af52:	4816      	ldr	r0, [pc, #88]	; (801afac <ip_reass_free_complete_datagram+0x134>)
 801af54:	f00a fde4 	bl	8025b20 <iprintf>
    pbufs_freed += clen;
 801af58:	8bfa      	ldrh	r2, [r7, #30]
 801af5a:	8a7b      	ldrh	r3, [r7, #18]
 801af5c:	4413      	add	r3, r2
 801af5e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801af60:	68f8      	ldr	r0, [r7, #12]
 801af62:	f001 fe81 	bl	801cc68 <pbuf_free>
  while (p != NULL) {
 801af66:	69bb      	ldr	r3, [r7, #24]
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d1dc      	bne.n	801af26 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801af6c:	6839      	ldr	r1, [r7, #0]
 801af6e:	6878      	ldr	r0, [r7, #4]
 801af70:	f000 f8c2 	bl	801b0f8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 801af74:	4b10      	ldr	r3, [pc, #64]	; (801afb8 <ip_reass_free_complete_datagram+0x140>)
 801af76:	881b      	ldrh	r3, [r3, #0]
 801af78:	8bfa      	ldrh	r2, [r7, #30]
 801af7a:	429a      	cmp	r2, r3
 801af7c:	d905      	bls.n	801af8a <ip_reass_free_complete_datagram+0x112>
 801af7e:	4b09      	ldr	r3, [pc, #36]	; (801afa4 <ip_reass_free_complete_datagram+0x12c>)
 801af80:	22d2      	movs	r2, #210	; 0xd2
 801af82:	490e      	ldr	r1, [pc, #56]	; (801afbc <ip_reass_free_complete_datagram+0x144>)
 801af84:	4809      	ldr	r0, [pc, #36]	; (801afac <ip_reass_free_complete_datagram+0x134>)
 801af86:	f00a fdcb 	bl	8025b20 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801af8a:	4b0b      	ldr	r3, [pc, #44]	; (801afb8 <ip_reass_free_complete_datagram+0x140>)
 801af8c:	881a      	ldrh	r2, [r3, #0]
 801af8e:	8bfb      	ldrh	r3, [r7, #30]
 801af90:	1ad3      	subs	r3, r2, r3
 801af92:	b29a      	uxth	r2, r3
 801af94:	4b08      	ldr	r3, [pc, #32]	; (801afb8 <ip_reass_free_complete_datagram+0x140>)
 801af96:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801af98:	8bfb      	ldrh	r3, [r7, #30]
}
 801af9a:	4618      	mov	r0, r3
 801af9c:	3720      	adds	r7, #32
 801af9e:	46bd      	mov	sp, r7
 801afa0:	bd80      	pop	{r7, pc}
 801afa2:	bf00      	nop
 801afa4:	0802753c 	.word	0x0802753c
 801afa8:	08027578 	.word	0x08027578
 801afac:	08027584 	.word	0x08027584
 801afb0:	080275ac 	.word	0x080275ac
 801afb4:	080275c0 	.word	0x080275c0
 801afb8:	200040a8 	.word	0x200040a8
 801afbc:	080275e0 	.word	0x080275e0

0801afc0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801afc0:	b580      	push	{r7, lr}
 801afc2:	b08a      	sub	sp, #40	; 0x28
 801afc4:	af00      	add	r7, sp, #0
 801afc6:	6078      	str	r0, [r7, #4]
 801afc8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801afca:	2300      	movs	r3, #0
 801afcc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801afce:	2300      	movs	r3, #0
 801afd0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801afd2:	2300      	movs	r3, #0
 801afd4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801afd6:	2300      	movs	r3, #0
 801afd8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801afda:	2300      	movs	r3, #0
 801afdc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801afde:	4b28      	ldr	r3, [pc, #160]	; (801b080 <ip_reass_remove_oldest_datagram+0xc0>)
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801afe4:	e030      	b.n	801b048 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afe8:	695a      	ldr	r2, [r3, #20]
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	68db      	ldr	r3, [r3, #12]
 801afee:	429a      	cmp	r2, r3
 801aff0:	d10c      	bne.n	801b00c <ip_reass_remove_oldest_datagram+0x4c>
 801aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aff4:	699a      	ldr	r2, [r3, #24]
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	691b      	ldr	r3, [r3, #16]
 801affa:	429a      	cmp	r2, r3
 801affc:	d106      	bne.n	801b00c <ip_reass_remove_oldest_datagram+0x4c>
 801affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b000:	899a      	ldrh	r2, [r3, #12]
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	889b      	ldrh	r3, [r3, #4]
 801b006:	b29b      	uxth	r3, r3
 801b008:	429a      	cmp	r2, r3
 801b00a:	d014      	beq.n	801b036 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b00c:	693b      	ldr	r3, [r7, #16]
 801b00e:	3301      	adds	r3, #1
 801b010:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b012:	6a3b      	ldr	r3, [r7, #32]
 801b014:	2b00      	cmp	r3, #0
 801b016:	d104      	bne.n	801b022 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b01a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b01c:	69fb      	ldr	r3, [r7, #28]
 801b01e:	61bb      	str	r3, [r7, #24]
 801b020:	e009      	b.n	801b036 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b024:	7fda      	ldrb	r2, [r3, #31]
 801b026:	6a3b      	ldr	r3, [r7, #32]
 801b028:	7fdb      	ldrb	r3, [r3, #31]
 801b02a:	429a      	cmp	r2, r3
 801b02c:	d803      	bhi.n	801b036 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b030:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b032:	69fb      	ldr	r3, [r7, #28]
 801b034:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d001      	beq.n	801b042 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b040:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d1cb      	bne.n	801afe6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b04e:	6a3b      	ldr	r3, [r7, #32]
 801b050:	2b00      	cmp	r3, #0
 801b052:	d008      	beq.n	801b066 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b054:	69b9      	ldr	r1, [r7, #24]
 801b056:	6a38      	ldr	r0, [r7, #32]
 801b058:	f7ff ff0e 	bl	801ae78 <ip_reass_free_complete_datagram>
 801b05c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b05e:	697a      	ldr	r2, [r7, #20]
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	4413      	add	r3, r2
 801b064:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b066:	697a      	ldr	r2, [r7, #20]
 801b068:	683b      	ldr	r3, [r7, #0]
 801b06a:	429a      	cmp	r2, r3
 801b06c:	da02      	bge.n	801b074 <ip_reass_remove_oldest_datagram+0xb4>
 801b06e:	693b      	ldr	r3, [r7, #16]
 801b070:	2b01      	cmp	r3, #1
 801b072:	dcac      	bgt.n	801afce <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b074:	697b      	ldr	r3, [r7, #20]
}
 801b076:	4618      	mov	r0, r3
 801b078:	3728      	adds	r7, #40	; 0x28
 801b07a:	46bd      	mov	sp, r7
 801b07c:	bd80      	pop	{r7, pc}
 801b07e:	bf00      	nop
 801b080:	200040a4 	.word	0x200040a4

0801b084 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b084:	b580      	push	{r7, lr}
 801b086:	b084      	sub	sp, #16
 801b088:	af00      	add	r7, sp, #0
 801b08a:	6078      	str	r0, [r7, #4]
 801b08c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b08e:	2004      	movs	r0, #4
 801b090:	f001 f83e 	bl	801c110 <memp_malloc>
 801b094:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b096:	68fb      	ldr	r3, [r7, #12]
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d110      	bne.n	801b0be <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b09c:	6839      	ldr	r1, [r7, #0]
 801b09e:	6878      	ldr	r0, [r7, #4]
 801b0a0:	f7ff ff8e 	bl	801afc0 <ip_reass_remove_oldest_datagram>
 801b0a4:	4602      	mov	r2, r0
 801b0a6:	683b      	ldr	r3, [r7, #0]
 801b0a8:	429a      	cmp	r2, r3
 801b0aa:	db03      	blt.n	801b0b4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b0ac:	2004      	movs	r0, #4
 801b0ae:	f001 f82f 	bl	801c110 <memp_malloc>
 801b0b2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d101      	bne.n	801b0be <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	e016      	b.n	801b0ec <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b0be:	2220      	movs	r2, #32
 801b0c0:	2100      	movs	r1, #0
 801b0c2:	68f8      	ldr	r0, [r7, #12]
 801b0c4:	f00b fa0a 	bl	80264dc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b0c8:	68fb      	ldr	r3, [r7, #12]
 801b0ca:	2203      	movs	r2, #3
 801b0cc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b0ce:	4b09      	ldr	r3, [pc, #36]	; (801b0f4 <ip_reass_enqueue_new_datagram+0x70>)
 801b0d0:	681a      	ldr	r2, [r3, #0]
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b0d6:	4a07      	ldr	r2, [pc, #28]	; (801b0f4 <ip_reass_enqueue_new_datagram+0x70>)
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	3308      	adds	r3, #8
 801b0e0:	2214      	movs	r2, #20
 801b0e2:	6879      	ldr	r1, [r7, #4]
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	f00b f9ee 	bl	80264c6 <memcpy>
  return ipr;
 801b0ea:	68fb      	ldr	r3, [r7, #12]
}
 801b0ec:	4618      	mov	r0, r3
 801b0ee:	3710      	adds	r7, #16
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	bd80      	pop	{r7, pc}
 801b0f4:	200040a4 	.word	0x200040a4

0801b0f8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	b082      	sub	sp, #8
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	6078      	str	r0, [r7, #4]
 801b100:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b102:	4b10      	ldr	r3, [pc, #64]	; (801b144 <ip_reass_dequeue_datagram+0x4c>)
 801b104:	681a      	ldr	r2, [r3, #0]
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	429a      	cmp	r2, r3
 801b10a:	d104      	bne.n	801b116 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	4a0c      	ldr	r2, [pc, #48]	; (801b144 <ip_reass_dequeue_datagram+0x4c>)
 801b112:	6013      	str	r3, [r2, #0]
 801b114:	e00d      	b.n	801b132 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b116:	683b      	ldr	r3, [r7, #0]
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d106      	bne.n	801b12a <ip_reass_dequeue_datagram+0x32>
 801b11c:	4b0a      	ldr	r3, [pc, #40]	; (801b148 <ip_reass_dequeue_datagram+0x50>)
 801b11e:	f240 1245 	movw	r2, #325	; 0x145
 801b122:	490a      	ldr	r1, [pc, #40]	; (801b14c <ip_reass_dequeue_datagram+0x54>)
 801b124:	480a      	ldr	r0, [pc, #40]	; (801b150 <ip_reass_dequeue_datagram+0x58>)
 801b126:	f00a fcfb 	bl	8025b20 <iprintf>
    prev->next = ipr->next;
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	681a      	ldr	r2, [r3, #0]
 801b12e:	683b      	ldr	r3, [r7, #0]
 801b130:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b132:	6879      	ldr	r1, [r7, #4]
 801b134:	2004      	movs	r0, #4
 801b136:	f001 f83d 	bl	801c1b4 <memp_free>
}
 801b13a:	bf00      	nop
 801b13c:	3708      	adds	r7, #8
 801b13e:	46bd      	mov	sp, r7
 801b140:	bd80      	pop	{r7, pc}
 801b142:	bf00      	nop
 801b144:	200040a4 	.word	0x200040a4
 801b148:	0802753c 	.word	0x0802753c
 801b14c:	080275fc 	.word	0x080275fc
 801b150:	08027584 	.word	0x08027584

0801b154 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b154:	b580      	push	{r7, lr}
 801b156:	b08c      	sub	sp, #48	; 0x30
 801b158:	af00      	add	r7, sp, #0
 801b15a:	60f8      	str	r0, [r7, #12]
 801b15c:	60b9      	str	r1, [r7, #8]
 801b15e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 801b160:	2300      	movs	r3, #0
 801b162:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b164:	2301      	movs	r3, #1
 801b166:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 801b168:	68bb      	ldr	r3, [r7, #8]
 801b16a:	685b      	ldr	r3, [r3, #4]
 801b16c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801b16e:	69fb      	ldr	r3, [r7, #28]
 801b170:	885b      	ldrh	r3, [r3, #2]
 801b172:	b29b      	uxth	r3, r3
 801b174:	4618      	mov	r0, r3
 801b176:	f7fe f8e7 	bl	8019348 <lwip_htons>
 801b17a:	4603      	mov	r3, r0
 801b17c:	461a      	mov	r2, r3
 801b17e:	69fb      	ldr	r3, [r7, #28]
 801b180:	781b      	ldrb	r3, [r3, #0]
 801b182:	b29b      	uxth	r3, r3
 801b184:	f003 030f 	and.w	r3, r3, #15
 801b188:	b29b      	uxth	r3, r3
 801b18a:	009b      	lsls	r3, r3, #2
 801b18c:	b29b      	uxth	r3, r3
 801b18e:	1ad3      	subs	r3, r2, r3
 801b190:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801b192:	69fb      	ldr	r3, [r7, #28]
 801b194:	88db      	ldrh	r3, [r3, #6]
 801b196:	b29b      	uxth	r3, r3
 801b198:	4618      	mov	r0, r3
 801b19a:	f7fe f8d5 	bl	8019348 <lwip_htons>
 801b19e:	4603      	mov	r3, r0
 801b1a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b1a4:	b29b      	uxth	r3, r3
 801b1a6:	00db      	lsls	r3, r3, #3
 801b1a8:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801b1aa:	68bb      	ldr	r3, [r7, #8]
 801b1ac:	685b      	ldr	r3, [r3, #4]
 801b1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801b1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1b2:	2200      	movs	r2, #0
 801b1b4:	701a      	strb	r2, [r3, #0]
 801b1b6:	2200      	movs	r2, #0
 801b1b8:	705a      	strb	r2, [r3, #1]
 801b1ba:	2200      	movs	r2, #0
 801b1bc:	709a      	strb	r2, [r3, #2]
 801b1be:	2200      	movs	r2, #0
 801b1c0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1c4:	8b3a      	ldrh	r2, [r7, #24]
 801b1c6:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 801b1c8:	8b3a      	ldrh	r2, [r7, #24]
 801b1ca:	8b7b      	ldrh	r3, [r7, #26]
 801b1cc:	4413      	add	r3, r2
 801b1ce:	b29a      	uxth	r2, r3
 801b1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1d2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	685b      	ldr	r3, [r3, #4]
 801b1d8:	627b      	str	r3, [r7, #36]	; 0x24
 801b1da:	e061      	b.n	801b2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1de:	685b      	ldr	r3, [r3, #4]
 801b1e0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 801b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1e4:	889b      	ldrh	r3, [r3, #4]
 801b1e6:	b29a      	uxth	r2, r3
 801b1e8:	697b      	ldr	r3, [r7, #20]
 801b1ea:	889b      	ldrh	r3, [r3, #4]
 801b1ec:	b29b      	uxth	r3, r3
 801b1ee:	429a      	cmp	r2, r3
 801b1f0:	d232      	bcs.n	801b258 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b1f6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d01f      	beq.n	801b23e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b200:	889b      	ldrh	r3, [r3, #4]
 801b202:	b29a      	uxth	r2, r3
 801b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b206:	88db      	ldrh	r3, [r3, #6]
 801b208:	b29b      	uxth	r3, r3
 801b20a:	429a      	cmp	r2, r3
 801b20c:	f0c0 80e8 	bcc.w	801b3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
 801b210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b212:	88db      	ldrh	r3, [r3, #6]
 801b214:	b29a      	uxth	r2, r3
 801b216:	697b      	ldr	r3, [r7, #20]
 801b218:	889b      	ldrh	r3, [r3, #4]
 801b21a:	b29b      	uxth	r3, r3
 801b21c:	429a      	cmp	r2, r3
 801b21e:	f200 80df 	bhi.w	801b3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b224:	68ba      	ldr	r2, [r7, #8]
 801b226:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b22a:	88db      	ldrh	r3, [r3, #6]
 801b22c:	b29a      	uxth	r2, r3
 801b22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b230:	889b      	ldrh	r3, [r3, #4]
 801b232:	b29b      	uxth	r3, r3
 801b234:	429a      	cmp	r2, r3
 801b236:	d037      	beq.n	801b2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b238:	2300      	movs	r3, #0
 801b23a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b23c:	e034      	b.n	801b2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 801b23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b240:	88db      	ldrh	r3, [r3, #6]
 801b242:	b29a      	uxth	r2, r3
 801b244:	697b      	ldr	r3, [r7, #20]
 801b246:	889b      	ldrh	r3, [r3, #4]
 801b248:	b29b      	uxth	r3, r3
 801b24a:	429a      	cmp	r2, r3
 801b24c:	f200 80c3 	bhi.w	801b3d6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
        ipr->p = new_p;
 801b250:	68fb      	ldr	r3, [r7, #12]
 801b252:	68ba      	ldr	r2, [r7, #8]
 801b254:	605a      	str	r2, [r3, #4]
      break;
 801b256:	e027      	b.n	801b2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 801b258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b25a:	889b      	ldrh	r3, [r3, #4]
 801b25c:	b29a      	uxth	r2, r3
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	889b      	ldrh	r3, [r3, #4]
 801b262:	b29b      	uxth	r3, r3
 801b264:	429a      	cmp	r2, r3
 801b266:	f000 80b8 	beq.w	801b3da <ip_reass_chain_frag_into_datagram_and_validate+0x286>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b26c:	889b      	ldrh	r3, [r3, #4]
 801b26e:	b29a      	uxth	r2, r3
 801b270:	697b      	ldr	r3, [r7, #20]
 801b272:	88db      	ldrh	r3, [r3, #6]
 801b274:	b29b      	uxth	r3, r3
 801b276:	429a      	cmp	r2, r3
 801b278:	f0c0 80b1 	bcc.w	801b3de <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d009      	beq.n	801b296 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 801b282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b284:	88db      	ldrh	r3, [r3, #6]
 801b286:	b29a      	uxth	r2, r3
 801b288:	697b      	ldr	r3, [r7, #20]
 801b28a:	889b      	ldrh	r3, [r3, #4]
 801b28c:	b29b      	uxth	r3, r3
 801b28e:	429a      	cmp	r2, r3
 801b290:	d001      	beq.n	801b296 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b292:	2300      	movs	r3, #0
 801b294:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b296:	697b      	ldr	r3, [r7, #20]
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801b29c:	697b      	ldr	r3, [r7, #20]
 801b29e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d19a      	bne.n	801b1dc <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801b2a6:	e000      	b.n	801b2aa <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 801b2a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d12d      	bne.n	801b30c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 801b2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d01c      	beq.n	801b2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2b8:	88db      	ldrh	r3, [r3, #6]
 801b2ba:	b29a      	uxth	r2, r3
 801b2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2be:	889b      	ldrh	r3, [r3, #4]
 801b2c0:	b29b      	uxth	r3, r3
 801b2c2:	429a      	cmp	r2, r3
 801b2c4:	d906      	bls.n	801b2d4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801b2c6:	4b50      	ldr	r3, [pc, #320]	; (801b408 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b2c8:	f240 12ab 	movw	r2, #427	; 0x1ab
 801b2cc:	494f      	ldr	r1, [pc, #316]	; (801b40c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801b2ce:	4850      	ldr	r0, [pc, #320]	; (801b410 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b2d0:	f00a fc26 	bl	8025b20 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2d6:	68ba      	ldr	r2, [r7, #8]
 801b2d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2dc:	88db      	ldrh	r3, [r3, #6]
 801b2de:	b29a      	uxth	r2, r3
 801b2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2e2:	889b      	ldrh	r3, [r3, #4]
 801b2e4:	b29b      	uxth	r3, r3
 801b2e6:	429a      	cmp	r2, r3
 801b2e8:	d010      	beq.n	801b30c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	623b      	str	r3, [r7, #32]
 801b2ee:	e00d      	b.n	801b30c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	685b      	ldr	r3, [r3, #4]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d006      	beq.n	801b306 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 801b2f8:	4b43      	ldr	r3, [pc, #268]	; (801b408 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b2fa:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 801b2fe:	4945      	ldr	r1, [pc, #276]	; (801b414 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b300:	4843      	ldr	r0, [pc, #268]	; (801b410 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b302:	f00a fc0d 	bl	8025b20 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	68ba      	ldr	r2, [r7, #8]
 801b30a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d105      	bne.n	801b31e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 801b312:	68fb      	ldr	r3, [r7, #12]
 801b314:	7f9b      	ldrb	r3, [r3, #30]
 801b316:	f003 0301 	and.w	r3, r3, #1
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d059      	beq.n	801b3d2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 801b31e:	6a3b      	ldr	r3, [r7, #32]
 801b320:	2b00      	cmp	r3, #0
 801b322:	d04f      	beq.n	801b3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801b324:	68fb      	ldr	r3, [r7, #12]
 801b326:	685b      	ldr	r3, [r3, #4]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d006      	beq.n	801b33a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	685b      	ldr	r3, [r3, #4]
 801b330:	685b      	ldr	r3, [r3, #4]
 801b332:	889b      	ldrh	r3, [r3, #4]
 801b334:	b29b      	uxth	r3, r3
 801b336:	2b00      	cmp	r3, #0
 801b338:	d002      	beq.n	801b340 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b33a:	2300      	movs	r3, #0
 801b33c:	623b      	str	r3, [r7, #32]
 801b33e:	e041      	b.n	801b3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b342:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801b344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b34a:	e012      	b.n	801b372 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 801b34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b34e:	685b      	ldr	r3, [r3, #4]
 801b350:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b354:	88db      	ldrh	r3, [r3, #6]
 801b356:	b29a      	uxth	r2, r3
 801b358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b35a:	889b      	ldrh	r3, [r3, #4]
 801b35c:	b29b      	uxth	r3, r3
 801b35e:	429a      	cmp	r2, r3
 801b360:	d002      	beq.n	801b368 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 801b362:	2300      	movs	r3, #0
 801b364:	623b      	str	r3, [r7, #32]
            break;
 801b366:	e007      	b.n	801b378 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 801b368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b36a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801b36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b374:	2b00      	cmp	r3, #0
 801b376:	d1e9      	bne.n	801b34c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b378:	6a3b      	ldr	r3, [r7, #32]
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d022      	beq.n	801b3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b37e:	68fb      	ldr	r3, [r7, #12]
 801b380:	685b      	ldr	r3, [r3, #4]
 801b382:	2b00      	cmp	r3, #0
 801b384:	d106      	bne.n	801b394 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801b386:	4b20      	ldr	r3, [pc, #128]	; (801b408 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b388:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801b38c:	4922      	ldr	r1, [pc, #136]	; (801b418 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b38e:	4820      	ldr	r0, [pc, #128]	; (801b410 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b390:	f00a fbc6 	bl	8025b20 <iprintf>
          LWIP_ASSERT("sanity check",
 801b394:	68fb      	ldr	r3, [r7, #12]
 801b396:	685b      	ldr	r3, [r3, #4]
 801b398:	685a      	ldr	r2, [r3, #4]
 801b39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b39c:	429a      	cmp	r2, r3
 801b39e:	d106      	bne.n	801b3ae <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 801b3a0:	4b19      	ldr	r3, [pc, #100]	; (801b408 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b3a2:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801b3a6:	491c      	ldr	r1, [pc, #112]	; (801b418 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b3a8:	4819      	ldr	r0, [pc, #100]	; (801b410 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b3aa:	f00a fbb9 	bl	8025b20 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d006      	beq.n	801b3c4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 801b3b6:	4b14      	ldr	r3, [pc, #80]	; (801b408 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b3b8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801b3bc:	4917      	ldr	r1, [pc, #92]	; (801b41c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b3be:	4814      	ldr	r0, [pc, #80]	; (801b410 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b3c0:	f00a fbae 	bl	8025b20 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b3c4:	6a3b      	ldr	r3, [r7, #32]
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	bf14      	ite	ne
 801b3ca:	2301      	movne	r3, #1
 801b3cc:	2300      	moveq	r3, #0
 801b3ce:	b2db      	uxtb	r3, r3
 801b3d0:	e016      	b.n	801b400 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b3d2:	2300      	movs	r3, #0
 801b3d4:	e014      	b.n	801b400 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
          goto freepbuf;
 801b3d6:	bf00      	nop
 801b3d8:	e002      	b.n	801b3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 801b3da:	bf00      	nop
 801b3dc:	e000      	b.n	801b3e0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 801b3de:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801b3e0:	68b8      	ldr	r0, [r7, #8]
 801b3e2:	f001 fcdb 	bl	801cd9c <pbuf_clen>
 801b3e6:	4603      	mov	r3, r0
 801b3e8:	461a      	mov	r2, r3
 801b3ea:	4b0d      	ldr	r3, [pc, #52]	; (801b420 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b3ec:	881b      	ldrh	r3, [r3, #0]
 801b3ee:	1a9b      	subs	r3, r3, r2
 801b3f0:	b29a      	uxth	r2, r3
 801b3f2:	4b0b      	ldr	r3, [pc, #44]	; (801b420 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b3f4:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801b3f6:	68b8      	ldr	r0, [r7, #8]
 801b3f8:	f001 fc36 	bl	801cc68 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b3fc:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 801b400:	4618      	mov	r0, r3
 801b402:	3730      	adds	r7, #48	; 0x30
 801b404:	46bd      	mov	sp, r7
 801b406:	bd80      	pop	{r7, pc}
 801b408:	0802753c 	.word	0x0802753c
 801b40c:	08027618 	.word	0x08027618
 801b410:	08027584 	.word	0x08027584
 801b414:	08027638 	.word	0x08027638
 801b418:	08027670 	.word	0x08027670
 801b41c:	08027680 	.word	0x08027680
 801b420:	200040a8 	.word	0x200040a8

0801b424 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b424:	b580      	push	{r7, lr}
 801b426:	b08e      	sub	sp, #56	; 0x38
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	685b      	ldr	r3, [r3, #4]
 801b430:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801b432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b434:	781b      	ldrb	r3, [r3, #0]
 801b436:	f003 030f 	and.w	r3, r3, #15
 801b43a:	009b      	lsls	r3, r3, #2
 801b43c:	2b14      	cmp	r3, #20
 801b43e:	f040 8131 	bne.w	801b6a4 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b444:	88db      	ldrh	r3, [r3, #6]
 801b446:	b29b      	uxth	r3, r3
 801b448:	4618      	mov	r0, r3
 801b44a:	f7fd ff7d 	bl	8019348 <lwip_htons>
 801b44e:	4603      	mov	r3, r0
 801b450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b454:	b29b      	uxth	r3, r3
 801b456:	00db      	lsls	r3, r3, #3
 801b458:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801b45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b45c:	885b      	ldrh	r3, [r3, #2]
 801b45e:	b29b      	uxth	r3, r3
 801b460:	4618      	mov	r0, r3
 801b462:	f7fd ff71 	bl	8019348 <lwip_htons>
 801b466:	4603      	mov	r3, r0
 801b468:	461a      	mov	r2, r3
 801b46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b46c:	781b      	ldrb	r3, [r3, #0]
 801b46e:	b29b      	uxth	r3, r3
 801b470:	f003 030f 	and.w	r3, r3, #15
 801b474:	b29b      	uxth	r3, r3
 801b476:	009b      	lsls	r3, r3, #2
 801b478:	b29b      	uxth	r3, r3
 801b47a:	1ad3      	subs	r3, r2, r3
 801b47c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b47e:	6878      	ldr	r0, [r7, #4]
 801b480:	f001 fc8c 	bl	801cd9c <pbuf_clen>
 801b484:	4603      	mov	r3, r0
 801b486:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b488:	4b8c      	ldr	r3, [pc, #560]	; (801b6bc <ip4_reass+0x298>)
 801b48a:	881b      	ldrh	r3, [r3, #0]
 801b48c:	461a      	mov	r2, r3
 801b48e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b490:	4413      	add	r3, r2
 801b492:	2b0a      	cmp	r3, #10
 801b494:	dd10      	ble.n	801b4b8 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b496:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b498:	4619      	mov	r1, r3
 801b49a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b49c:	f7ff fd90 	bl	801afc0 <ip_reass_remove_oldest_datagram>
 801b4a0:	4603      	mov	r3, r0
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	f000 8101 	beq.w	801b6aa <ip4_reass+0x286>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b4a8:	4b84      	ldr	r3, [pc, #528]	; (801b6bc <ip4_reass+0x298>)
 801b4aa:	881b      	ldrh	r3, [r3, #0]
 801b4ac:	461a      	mov	r2, r3
 801b4ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b4b0:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b4b2:	2b0a      	cmp	r3, #10
 801b4b4:	f300 80f9 	bgt.w	801b6aa <ip4_reass+0x286>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b4b8:	4b81      	ldr	r3, [pc, #516]	; (801b6c0 <ip4_reass+0x29c>)
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	633b      	str	r3, [r7, #48]	; 0x30
 801b4be:	e015      	b.n	801b4ec <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4c2:	695a      	ldr	r2, [r3, #20]
 801b4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4c6:	68db      	ldr	r3, [r3, #12]
 801b4c8:	429a      	cmp	r2, r3
 801b4ca:	d10c      	bne.n	801b4e6 <ip4_reass+0xc2>
 801b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4ce:	699a      	ldr	r2, [r3, #24]
 801b4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4d2:	691b      	ldr	r3, [r3, #16]
 801b4d4:	429a      	cmp	r2, r3
 801b4d6:	d106      	bne.n	801b4e6 <ip4_reass+0xc2>
 801b4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4da:	899a      	ldrh	r2, [r3, #12]
 801b4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4de:	889b      	ldrh	r3, [r3, #4]
 801b4e0:	b29b      	uxth	r3, r3
 801b4e2:	429a      	cmp	r2, r3
 801b4e4:	d006      	beq.n	801b4f4 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	633b      	str	r3, [r7, #48]	; 0x30
 801b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d1e6      	bne.n	801b4c0 <ip4_reass+0x9c>
 801b4f2:	e000      	b.n	801b4f6 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b4f4:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d109      	bne.n	801b510 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b4fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b4fe:	4619      	mov	r1, r3
 801b500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b502:	f7ff fdbf 	bl	801b084 <ip_reass_enqueue_new_datagram>
 801b506:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d11c      	bne.n	801b548 <ip4_reass+0x124>
      goto nullreturn;
 801b50e:	e0cc      	b.n	801b6aa <ip4_reass+0x286>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b512:	88db      	ldrh	r3, [r3, #6]
 801b514:	b29b      	uxth	r3, r3
 801b516:	4618      	mov	r0, r3
 801b518:	f7fd ff16 	bl	8019348 <lwip_htons>
 801b51c:	4603      	mov	r3, r0
 801b51e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b522:	2b00      	cmp	r3, #0
 801b524:	d110      	bne.n	801b548 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b528:	89db      	ldrh	r3, [r3, #14]
 801b52a:	4618      	mov	r0, r3
 801b52c:	f7fd ff0c 	bl	8019348 <lwip_htons>
 801b530:	4603      	mov	r3, r0
 801b532:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b536:	2b00      	cmp	r3, #0
 801b538:	d006      	beq.n	801b548 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b53c:	3308      	adds	r3, #8
 801b53e:	2214      	movs	r2, #20
 801b540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b542:	4618      	mov	r0, r3
 801b544:	f00a ffbf 	bl	80264c6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b54a:	88db      	ldrh	r3, [r3, #6]
 801b54c:	b29b      	uxth	r3, r3
 801b54e:	f003 0320 	and.w	r3, r3, #32
 801b552:	2b00      	cmp	r3, #0
 801b554:	bf0c      	ite	eq
 801b556:	2301      	moveq	r3, #1
 801b558:	2300      	movne	r3, #0
 801b55a:	b2db      	uxtb	r3, r3
 801b55c:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b55e:	69fb      	ldr	r3, [r7, #28]
 801b560:	2b00      	cmp	r3, #0
 801b562:	d00e      	beq.n	801b582 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 801b564:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b568:	4413      	add	r3, r2
 801b56a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b56c:	8b7a      	ldrh	r2, [r7, #26]
 801b56e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b570:	429a      	cmp	r2, r3
 801b572:	f0c0 809a 	bcc.w	801b6aa <ip4_reass+0x286>
 801b576:	8b7b      	ldrh	r3, [r7, #26]
 801b578:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b57c:	4293      	cmp	r3, r2
 801b57e:	f200 8094 	bhi.w	801b6aa <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b582:	69fa      	ldr	r2, [r7, #28]
 801b584:	6879      	ldr	r1, [r7, #4]
 801b586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b588:	f7ff fde4 	bl	801b154 <ip_reass_chain_frag_into_datagram_and_validate>
 801b58c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b58e:	697b      	ldr	r3, [r7, #20]
 801b590:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b594:	f000 8088 	beq.w	801b6a8 <ip4_reass+0x284>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b598:	4b48      	ldr	r3, [pc, #288]	; (801b6bc <ip4_reass+0x298>)
 801b59a:	881a      	ldrh	r2, [r3, #0]
 801b59c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b59e:	4413      	add	r3, r2
 801b5a0:	b29a      	uxth	r2, r3
 801b5a2:	4b46      	ldr	r3, [pc, #280]	; (801b6bc <ip4_reass+0x298>)
 801b5a4:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b5a6:	69fb      	ldr	r3, [r7, #28]
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d00d      	beq.n	801b5c8 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 801b5ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b5ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b5b0:	4413      	add	r3, r2
 801b5b2:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5b6:	8a7a      	ldrh	r2, [r7, #18]
 801b5b8:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5bc:	7f9b      	ldrb	r3, [r3, #30]
 801b5be:	f043 0301 	orr.w	r3, r3, #1
 801b5c2:	b2da      	uxtb	r2, r3
 801b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5c6:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b5c8:	697b      	ldr	r3, [r7, #20]
 801b5ca:	2b01      	cmp	r3, #1
 801b5cc:	d168      	bne.n	801b6a0 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 801b5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5d0:	8b9b      	ldrh	r3, [r3, #28]
 801b5d2:	3314      	adds	r3, #20
 801b5d4:	b29a      	uxth	r2, r3
 801b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5d8:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801b5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5dc:	685b      	ldr	r3, [r3, #4]
 801b5de:	685b      	ldr	r3, [r3, #4]
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801b5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5e6:	685b      	ldr	r3, [r3, #4]
 801b5e8:	685b      	ldr	r3, [r3, #4]
 801b5ea:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5ee:	3308      	adds	r3, #8
 801b5f0:	2214      	movs	r2, #20
 801b5f2:	4619      	mov	r1, r3
 801b5f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b5f6:	f00a ff66 	bl	80264c6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801b5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5fc:	8b9b      	ldrh	r3, [r3, #28]
 801b5fe:	4618      	mov	r0, r3
 801b600:	f7fd fea2 	bl	8019348 <lwip_htons>
 801b604:	4603      	mov	r3, r0
 801b606:	461a      	mov	r2, r3
 801b608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b60a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b60e:	2200      	movs	r2, #0
 801b610:	719a      	strb	r2, [r3, #6]
 801b612:	2200      	movs	r2, #0
 801b614:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b618:	2200      	movs	r2, #0
 801b61a:	729a      	strb	r2, [r3, #10]
 801b61c:	2200      	movs	r2, #0
 801b61e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b622:	685b      	ldr	r3, [r3, #4]
 801b624:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b626:	e00e      	b.n	801b646 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 801b628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b62a:	685b      	ldr	r3, [r3, #4]
 801b62c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801b62e:	f06f 0113 	mvn.w	r1, #19
 801b632:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b634:	f001 faf4 	bl	801cc20 <pbuf_header>
      pbuf_cat(p, r);
 801b638:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b63a:	6878      	ldr	r0, [r7, #4]
 801b63c:	f001 fbee 	bl	801ce1c <pbuf_cat>
      r = iprh->next_pbuf;
 801b640:	68fb      	ldr	r3, [r7, #12]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d1ed      	bne.n	801b628 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b64c:	4b1c      	ldr	r3, [pc, #112]	; (801b6c0 <ip4_reass+0x29c>)
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b652:	429a      	cmp	r2, r3
 801b654:	d102      	bne.n	801b65c <ip4_reass+0x238>
      ipr_prev = NULL;
 801b656:	2300      	movs	r3, #0
 801b658:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b65a:	e010      	b.n	801b67e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b65c:	4b18      	ldr	r3, [pc, #96]	; (801b6c0 <ip4_reass+0x29c>)
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b662:	e007      	b.n	801b674 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801b664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b666:	681a      	ldr	r2, [r3, #0]
 801b668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b66a:	429a      	cmp	r2, r3
 801b66c:	d006      	beq.n	801b67c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b676:	2b00      	cmp	r3, #0
 801b678:	d1f4      	bne.n	801b664 <ip4_reass+0x240>
 801b67a:	e000      	b.n	801b67e <ip4_reass+0x25a>
          break;
 801b67c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b67e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b682:	f7ff fd39 	bl	801b0f8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801b686:	6878      	ldr	r0, [r7, #4]
 801b688:	f001 fb88 	bl	801cd9c <pbuf_clen>
 801b68c:	4603      	mov	r3, r0
 801b68e:	461a      	mov	r2, r3
 801b690:	4b0a      	ldr	r3, [pc, #40]	; (801b6bc <ip4_reass+0x298>)
 801b692:	881b      	ldrh	r3, [r3, #0]
 801b694:	1a9b      	subs	r3, r3, r2
 801b696:	b29a      	uxth	r2, r3
 801b698:	4b08      	ldr	r3, [pc, #32]	; (801b6bc <ip4_reass+0x298>)
 801b69a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	e008      	b.n	801b6b2 <ip4_reass+0x28e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b6a0:	2300      	movs	r3, #0
 801b6a2:	e006      	b.n	801b6b2 <ip4_reass+0x28e>
    goto nullreturn;
 801b6a4:	bf00      	nop
 801b6a6:	e000      	b.n	801b6aa <ip4_reass+0x286>
    goto nullreturn;
 801b6a8:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b6aa:	6878      	ldr	r0, [r7, #4]
 801b6ac:	f001 fadc 	bl	801cc68 <pbuf_free>
  return NULL;
 801b6b0:	2300      	movs	r3, #0
}
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	3738      	adds	r7, #56	; 0x38
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	bd80      	pop	{r7, pc}
 801b6ba:	bf00      	nop
 801b6bc:	200040a8 	.word	0x200040a8
 801b6c0:	200040a4 	.word	0x200040a4

0801b6c4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801b6c8:	2005      	movs	r0, #5
 801b6ca:	f000 fd21 	bl	801c110 <memp_malloc>
 801b6ce:	4603      	mov	r3, r0
}
 801b6d0:	4618      	mov	r0, r3
 801b6d2:	bd80      	pop	{r7, pc}

0801b6d4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b082      	sub	sp, #8
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d106      	bne.n	801b6f0 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b6e2:	4b07      	ldr	r3, [pc, #28]	; (801b700 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b6e4:	f240 22ae 	movw	r2, #686	; 0x2ae
 801b6e8:	4906      	ldr	r1, [pc, #24]	; (801b704 <ip_frag_free_pbuf_custom_ref+0x30>)
 801b6ea:	4807      	ldr	r0, [pc, #28]	; (801b708 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b6ec:	f00a fa18 	bl	8025b20 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b6f0:	6879      	ldr	r1, [r7, #4]
 801b6f2:	2005      	movs	r0, #5
 801b6f4:	f000 fd5e 	bl	801c1b4 <memp_free>
}
 801b6f8:	bf00      	nop
 801b6fa:	3708      	adds	r7, #8
 801b6fc:	46bd      	mov	sp, r7
 801b6fe:	bd80      	pop	{r7, pc}
 801b700:	0802753c 	.word	0x0802753c
 801b704:	080276a4 	.word	0x080276a4
 801b708:	08027584 	.word	0x08027584

0801b70c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b70c:	b580      	push	{r7, lr}
 801b70e:	b084      	sub	sp, #16
 801b710:	af00      	add	r7, sp, #0
 801b712:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d106      	bne.n	801b72c <ipfrag_free_pbuf_custom+0x20>
 801b71e:	4b11      	ldr	r3, [pc, #68]	; (801b764 <ipfrag_free_pbuf_custom+0x58>)
 801b720:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 801b724:	4910      	ldr	r1, [pc, #64]	; (801b768 <ipfrag_free_pbuf_custom+0x5c>)
 801b726:	4811      	ldr	r0, [pc, #68]	; (801b76c <ipfrag_free_pbuf_custom+0x60>)
 801b728:	f00a f9fa 	bl	8025b20 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 801b72c:	68fa      	ldr	r2, [r7, #12]
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	429a      	cmp	r2, r3
 801b732:	d006      	beq.n	801b742 <ipfrag_free_pbuf_custom+0x36>
 801b734:	4b0b      	ldr	r3, [pc, #44]	; (801b764 <ipfrag_free_pbuf_custom+0x58>)
 801b736:	f240 22b9 	movw	r2, #697	; 0x2b9
 801b73a:	490d      	ldr	r1, [pc, #52]	; (801b770 <ipfrag_free_pbuf_custom+0x64>)
 801b73c:	480b      	ldr	r0, [pc, #44]	; (801b76c <ipfrag_free_pbuf_custom+0x60>)
 801b73e:	f00a f9ef 	bl	8025b20 <iprintf>
  if (pcr->original != NULL) {
 801b742:	68fb      	ldr	r3, [r7, #12]
 801b744:	695b      	ldr	r3, [r3, #20]
 801b746:	2b00      	cmp	r3, #0
 801b748:	d004      	beq.n	801b754 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b74a:	68fb      	ldr	r3, [r7, #12]
 801b74c:	695b      	ldr	r3, [r3, #20]
 801b74e:	4618      	mov	r0, r3
 801b750:	f001 fa8a 	bl	801cc68 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b754:	68f8      	ldr	r0, [r7, #12]
 801b756:	f7ff ffbd 	bl	801b6d4 <ip_frag_free_pbuf_custom_ref>
}
 801b75a:	bf00      	nop
 801b75c:	3710      	adds	r7, #16
 801b75e:	46bd      	mov	sp, r7
 801b760:	bd80      	pop	{r7, pc}
 801b762:	bf00      	nop
 801b764:	0802753c 	.word	0x0802753c
 801b768:	080276b0 	.word	0x080276b0
 801b76c:	08027584 	.word	0x08027584
 801b770:	080276bc 	.word	0x080276bc

0801b774 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b774:	b580      	push	{r7, lr}
 801b776:	b092      	sub	sp, #72	; 0x48
 801b778:	af02      	add	r7, sp, #8
 801b77a:	60f8      	str	r0, [r7, #12]
 801b77c:	60b9      	str	r1, [r7, #8]
 801b77e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b780:	2300      	movs	r3, #0
 801b782:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801b784:	68bb      	ldr	r3, [r7, #8]
 801b786:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b788:	3b14      	subs	r3, #20
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	da00      	bge.n	801b790 <ip4_frag+0x1c>
 801b78e:	3307      	adds	r3, #7
 801b790:	10db      	asrs	r3, r3, #3
 801b792:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b794:	2314      	movs	r3, #20
 801b796:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b798:	68fb      	ldr	r3, [r7, #12]
 801b79a:	685b      	ldr	r3, [r3, #4]
 801b79c:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801b79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7a0:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7a4:	781b      	ldrb	r3, [r3, #0]
 801b7a6:	f003 030f 	and.w	r3, r3, #15
 801b7aa:	009b      	lsls	r3, r3, #2
 801b7ac:	2b14      	cmp	r3, #20
 801b7ae:	d009      	beq.n	801b7c4 <ip4_frag+0x50>
 801b7b0:	4b79      	ldr	r3, [pc, #484]	; (801b998 <ip4_frag+0x224>)
 801b7b2:	f240 22e1 	movw	r2, #737	; 0x2e1
 801b7b6:	4979      	ldr	r1, [pc, #484]	; (801b99c <ip4_frag+0x228>)
 801b7b8:	4879      	ldr	r0, [pc, #484]	; (801b9a0 <ip4_frag+0x22c>)
 801b7ba:	f00a f9b1 	bl	8025b20 <iprintf>
 801b7be:	f06f 0305 	mvn.w	r3, #5
 801b7c2:	e0e5      	b.n	801b990 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7c6:	88db      	ldrh	r3, [r3, #6]
 801b7c8:	b29b      	uxth	r3, r3
 801b7ca:	4618      	mov	r0, r3
 801b7cc:	f7fd fdbc 	bl	8019348 <lwip_htons>
 801b7d0:	4603      	mov	r3, r0
 801b7d2:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 801b7d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b7d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b7da:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801b7dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b7de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d009      	beq.n	801b7fa <ip4_frag+0x86>
 801b7e6:	4b6c      	ldr	r3, [pc, #432]	; (801b998 <ip4_frag+0x224>)
 801b7e8:	f240 22e6 	movw	r2, #742	; 0x2e6
 801b7ec:	496d      	ldr	r1, [pc, #436]	; (801b9a4 <ip4_frag+0x230>)
 801b7ee:	486c      	ldr	r0, [pc, #432]	; (801b9a0 <ip4_frag+0x22c>)
 801b7f0:	f00a f996 	bl	8025b20 <iprintf>
 801b7f4:	f06f 0305 	mvn.w	r3, #5
 801b7f8:	e0ca      	b.n	801b990 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 801b7fa:	68fb      	ldr	r3, [r7, #12]
 801b7fc:	891b      	ldrh	r3, [r3, #8]
 801b7fe:	3b14      	subs	r3, #20
 801b800:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801b802:	e0bc      	b.n	801b97e <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801b804:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b806:	00da      	lsls	r2, r3, #3
 801b808:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b80a:	4293      	cmp	r3, r2
 801b80c:	bfa8      	it	ge
 801b80e:	4613      	movge	r3, r2
 801b810:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b812:	2200      	movs	r2, #0
 801b814:	2114      	movs	r1, #20
 801b816:	2002      	movs	r0, #2
 801b818:	f000 feb4 	bl	801c584 <pbuf_alloc>
 801b81c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801b81e:	6a3b      	ldr	r3, [r7, #32]
 801b820:	2b00      	cmp	r3, #0
 801b822:	f000 80b2 	beq.w	801b98a <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b826:	68fb      	ldr	r3, [r7, #12]
 801b828:	895b      	ldrh	r3, [r3, #10]
 801b82a:	2b13      	cmp	r3, #19
 801b82c:	d806      	bhi.n	801b83c <ip4_frag+0xc8>
 801b82e:	4b5a      	ldr	r3, [pc, #360]	; (801b998 <ip4_frag+0x224>)
 801b830:	f240 3209 	movw	r2, #777	; 0x309
 801b834:	495c      	ldr	r1, [pc, #368]	; (801b9a8 <ip4_frag+0x234>)
 801b836:	485a      	ldr	r0, [pc, #360]	; (801b9a0 <ip4_frag+0x22c>)
 801b838:	f00a f972 	bl	8025b20 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b83c:	6a3b      	ldr	r3, [r7, #32]
 801b83e:	685b      	ldr	r3, [r3, #4]
 801b840:	2214      	movs	r2, #20
 801b842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b844:	4618      	mov	r0, r3
 801b846:	f00a fe3e 	bl	80264c6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b84a:	6a3b      	ldr	r3, [r7, #32]
 801b84c:	685b      	ldr	r3, [r3, #4]
 801b84e:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801b850:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b852:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801b854:	e04f      	b.n	801b8f6 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	895a      	ldrh	r2, [r3, #10]
 801b85a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b85c:	1ad3      	subs	r3, r2, r3
 801b85e:	83fb      	strh	r3, [r7, #30]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b860:	8bfa      	ldrh	r2, [r7, #30]
 801b862:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b864:	4293      	cmp	r3, r2
 801b866:	bf28      	it	cs
 801b868:	4613      	movcs	r3, r2
 801b86a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b86c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d105      	bne.n	801b87e <ip4_frag+0x10a>
        poff = 0;
 801b872:	2300      	movs	r3, #0
 801b874:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	60fb      	str	r3, [r7, #12]
        continue;
 801b87c:	e03b      	b.n	801b8f6 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b87e:	f7ff ff21 	bl	801b6c4 <ip_frag_alloc_pbuf_custom_ref>
 801b882:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b884:	69bb      	ldr	r3, [r7, #24]
 801b886:	2b00      	cmp	r3, #0
 801b888:	d103      	bne.n	801b892 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 801b88a:	6a38      	ldr	r0, [r7, #32]
 801b88c:	f001 f9ec 	bl	801cc68 <pbuf_free>
        goto memerr;
 801b890:	e07c      	b.n	801b98c <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b892:	69b8      	ldr	r0, [r7, #24]
        (u8_t*)p->payload + poff, newpbuflen);
 801b894:	68fb      	ldr	r3, [r7, #12]
 801b896:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b898:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b89a:	4413      	add	r3, r2
 801b89c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801b89e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b8a0:	9201      	str	r2, [sp, #4]
 801b8a2:	9300      	str	r3, [sp, #0]
 801b8a4:	4603      	mov	r3, r0
 801b8a6:	2202      	movs	r2, #2
 801b8a8:	2004      	movs	r0, #4
 801b8aa:	f000 ffff 	bl	801c8ac <pbuf_alloced_custom>
 801b8ae:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b8b0:	697b      	ldr	r3, [r7, #20]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d106      	bne.n	801b8c4 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b8b6:	69b8      	ldr	r0, [r7, #24]
 801b8b8:	f7ff ff0c 	bl	801b6d4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b8bc:	6a38      	ldr	r0, [r7, #32]
 801b8be:	f001 f9d3 	bl	801cc68 <pbuf_free>
        goto memerr;
 801b8c2:	e063      	b.n	801b98c <ip4_frag+0x218>
      }
      pbuf_ref(p);
 801b8c4:	68f8      	ldr	r0, [r7, #12]
 801b8c6:	f001 fa81 	bl	801cdcc <pbuf_ref>
      pcr->original = p;
 801b8ca:	69bb      	ldr	r3, [r7, #24]
 801b8cc:	68fa      	ldr	r2, [r7, #12]
 801b8ce:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b8d0:	69bb      	ldr	r3, [r7, #24]
 801b8d2:	4a36      	ldr	r2, [pc, #216]	; (801b9ac <ip4_frag+0x238>)
 801b8d4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b8d6:	6979      	ldr	r1, [r7, #20]
 801b8d8:	6a38      	ldr	r0, [r7, #32]
 801b8da:	f001 fa9f 	bl	801ce1c <pbuf_cat>
      left_to_copy -= newpbuflen;
 801b8de:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801b8e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b8e2:	1ad3      	subs	r3, r2, r3
 801b8e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801b8e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d004      	beq.n	801b8f6 <ip4_frag+0x182>
        poff = 0;
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b8f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d1ac      	bne.n	801b856 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 801b8fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b8fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b900:	4413      	add	r3, r2
 801b902:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b904:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b906:	68bb      	ldr	r3, [r7, #8]
 801b908:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b90a:	3b14      	subs	r3, #20
 801b90c:	429a      	cmp	r2, r3
 801b90e:	bfd4      	ite	le
 801b910:	2301      	movle	r3, #1
 801b912:	2300      	movgt	r3, #0
 801b914:	b2db      	uxtb	r3, r3
 801b916:	613b      	str	r3, [r7, #16]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b918:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b91a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b91e:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 801b920:	693b      	ldr	r3, [r7, #16]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d103      	bne.n	801b92e <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 801b926:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b92c:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b92e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b930:	4618      	mov	r0, r3
 801b932:	f7fd fd09 	bl	8019348 <lwip_htons>
 801b936:	4603      	mov	r3, r0
 801b938:	461a      	mov	r2, r3
 801b93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b93c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801b93e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b940:	3314      	adds	r3, #20
 801b942:	b29b      	uxth	r3, r3
 801b944:	4618      	mov	r0, r3
 801b946:	f7fd fcff 	bl	8019348 <lwip_htons>
 801b94a:	4603      	mov	r3, r0
 801b94c:	461a      	mov	r2, r3
 801b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b950:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b954:	2200      	movs	r2, #0
 801b956:	729a      	strb	r2, [r3, #10]
 801b958:	2200      	movs	r2, #0
 801b95a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b95c:	68bb      	ldr	r3, [r7, #8]
 801b95e:	695b      	ldr	r3, [r3, #20]
 801b960:	687a      	ldr	r2, [r7, #4]
 801b962:	6a39      	ldr	r1, [r7, #32]
 801b964:	68b8      	ldr	r0, [r7, #8]
 801b966:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b968:	6a38      	ldr	r0, [r7, #32]
 801b96a:	f001 f97d 	bl	801cc68 <pbuf_free>
    left -= fragsize;
 801b96e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b970:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b972:	1ad3      	subs	r3, r2, r3
 801b974:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801b976:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801b978:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b97a:	4413      	add	r3, r2
 801b97c:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801b97e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b980:	2b00      	cmp	r3, #0
 801b982:	f47f af3f 	bne.w	801b804 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b986:	2300      	movs	r3, #0
 801b988:	e002      	b.n	801b990 <ip4_frag+0x21c>
      goto memerr;
 801b98a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b98c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b990:	4618      	mov	r0, r3
 801b992:	3740      	adds	r7, #64	; 0x40
 801b994:	46bd      	mov	sp, r7
 801b996:	bd80      	pop	{r7, pc}
 801b998:	0802753c 	.word	0x0802753c
 801b99c:	080276c8 	.word	0x080276c8
 801b9a0:	08027584 	.word	0x08027584
 801b9a4:	080276f0 	.word	0x080276f0
 801b9a8:	0802770c 	.word	0x0802770c
 801b9ac:	0801b70d 	.word	0x0801b70d

0801b9b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801b9b0:	b580      	push	{r7, lr}
 801b9b2:	b084      	sub	sp, #16
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b9b8:	4b40      	ldr	r3, [pc, #256]	; (801babc <plug_holes+0x10c>)
 801b9ba:	681b      	ldr	r3, [r3, #0]
 801b9bc:	687a      	ldr	r2, [r7, #4]
 801b9be:	429a      	cmp	r2, r3
 801b9c0:	d206      	bcs.n	801b9d0 <plug_holes+0x20>
 801b9c2:	4b3f      	ldr	r3, [pc, #252]	; (801bac0 <plug_holes+0x110>)
 801b9c4:	f240 125d 	movw	r2, #349	; 0x15d
 801b9c8:	493e      	ldr	r1, [pc, #248]	; (801bac4 <plug_holes+0x114>)
 801b9ca:	483f      	ldr	r0, [pc, #252]	; (801bac8 <plug_holes+0x118>)
 801b9cc:	f00a f8a8 	bl	8025b20 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b9d0:	4b3e      	ldr	r3, [pc, #248]	; (801bacc <plug_holes+0x11c>)
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	687a      	ldr	r2, [r7, #4]
 801b9d6:	429a      	cmp	r2, r3
 801b9d8:	d306      	bcc.n	801b9e8 <plug_holes+0x38>
 801b9da:	4b39      	ldr	r3, [pc, #228]	; (801bac0 <plug_holes+0x110>)
 801b9dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801b9e0:	493b      	ldr	r1, [pc, #236]	; (801bad0 <plug_holes+0x120>)
 801b9e2:	4839      	ldr	r0, [pc, #228]	; (801bac8 <plug_holes+0x118>)
 801b9e4:	f00a f89c 	bl	8025b20 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	791b      	ldrb	r3, [r3, #4]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d006      	beq.n	801b9fe <plug_holes+0x4e>
 801b9f0:	4b33      	ldr	r3, [pc, #204]	; (801bac0 <plug_holes+0x110>)
 801b9f2:	f240 125f 	movw	r2, #351	; 0x15f
 801b9f6:	4937      	ldr	r1, [pc, #220]	; (801bad4 <plug_holes+0x124>)
 801b9f8:	4833      	ldr	r0, [pc, #204]	; (801bac8 <plug_holes+0x118>)
 801b9fa:	f00a f891 	bl	8025b20 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	881b      	ldrh	r3, [r3, #0]
 801ba02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801ba06:	d906      	bls.n	801ba16 <plug_holes+0x66>
 801ba08:	4b2d      	ldr	r3, [pc, #180]	; (801bac0 <plug_holes+0x110>)
 801ba0a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801ba0e:	4932      	ldr	r1, [pc, #200]	; (801bad8 <plug_holes+0x128>)
 801ba10:	482d      	ldr	r0, [pc, #180]	; (801bac8 <plug_holes+0x118>)
 801ba12:	f00a f885 	bl	8025b20 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 801ba16:	4b29      	ldr	r3, [pc, #164]	; (801babc <plug_holes+0x10c>)
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	687a      	ldr	r2, [r7, #4]
 801ba1c:	8812      	ldrh	r2, [r2, #0]
 801ba1e:	4413      	add	r3, r2
 801ba20:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801ba22:	687a      	ldr	r2, [r7, #4]
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	429a      	cmp	r2, r3
 801ba28:	d01f      	beq.n	801ba6a <plug_holes+0xba>
 801ba2a:	68fb      	ldr	r3, [r7, #12]
 801ba2c:	791b      	ldrb	r3, [r3, #4]
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	d11b      	bne.n	801ba6a <plug_holes+0xba>
 801ba32:	4b26      	ldr	r3, [pc, #152]	; (801bacc <plug_holes+0x11c>)
 801ba34:	681b      	ldr	r3, [r3, #0]
 801ba36:	68fa      	ldr	r2, [r7, #12]
 801ba38:	429a      	cmp	r2, r3
 801ba3a:	d016      	beq.n	801ba6a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801ba3c:	4b27      	ldr	r3, [pc, #156]	; (801badc <plug_holes+0x12c>)
 801ba3e:	681a      	ldr	r2, [r3, #0]
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	429a      	cmp	r2, r3
 801ba44:	d102      	bne.n	801ba4c <plug_holes+0x9c>
      lfree = mem;
 801ba46:	4a25      	ldr	r2, [pc, #148]	; (801badc <plug_holes+0x12c>)
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	881a      	ldrh	r2, [r3, #0]
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 801ba54:	4b19      	ldr	r3, [pc, #100]	; (801babc <plug_holes+0x10c>)
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	68fa      	ldr	r2, [r7, #12]
 801ba5a:	8812      	ldrh	r2, [r2, #0]
 801ba5c:	4413      	add	r3, r2
 801ba5e:	687a      	ldr	r2, [r7, #4]
 801ba60:	4916      	ldr	r1, [pc, #88]	; (801babc <plug_holes+0x10c>)
 801ba62:	6809      	ldr	r1, [r1, #0]
 801ba64:	1a52      	subs	r2, r2, r1
 801ba66:	b292      	uxth	r2, r2
 801ba68:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 801ba6a:	4b14      	ldr	r3, [pc, #80]	; (801babc <plug_holes+0x10c>)
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	687a      	ldr	r2, [r7, #4]
 801ba70:	8852      	ldrh	r2, [r2, #2]
 801ba72:	4413      	add	r3, r2
 801ba74:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801ba76:	68ba      	ldr	r2, [r7, #8]
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	429a      	cmp	r2, r3
 801ba7c:	d01a      	beq.n	801bab4 <plug_holes+0x104>
 801ba7e:	68bb      	ldr	r3, [r7, #8]
 801ba80:	791b      	ldrb	r3, [r3, #4]
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d116      	bne.n	801bab4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801ba86:	4b15      	ldr	r3, [pc, #84]	; (801badc <plug_holes+0x12c>)
 801ba88:	681a      	ldr	r2, [r3, #0]
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	429a      	cmp	r2, r3
 801ba8e:	d102      	bne.n	801ba96 <plug_holes+0xe6>
      lfree = pmem;
 801ba90:	4a12      	ldr	r2, [pc, #72]	; (801badc <plug_holes+0x12c>)
 801ba92:	68bb      	ldr	r3, [r7, #8]
 801ba94:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	881a      	ldrh	r2, [r3, #0]
 801ba9a:	68bb      	ldr	r3, [r7, #8]
 801ba9c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 801ba9e:	4b07      	ldr	r3, [pc, #28]	; (801babc <plug_holes+0x10c>)
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	687a      	ldr	r2, [r7, #4]
 801baa4:	8812      	ldrh	r2, [r2, #0]
 801baa6:	4413      	add	r3, r2
 801baa8:	68ba      	ldr	r2, [r7, #8]
 801baaa:	4904      	ldr	r1, [pc, #16]	; (801babc <plug_holes+0x10c>)
 801baac:	6809      	ldr	r1, [r1, #0]
 801baae:	1a52      	subs	r2, r2, r1
 801bab0:	b292      	uxth	r2, r2
 801bab2:	805a      	strh	r2, [r3, #2]
  }
}
 801bab4:	bf00      	nop
 801bab6:	3710      	adds	r7, #16
 801bab8:	46bd      	mov	sp, r7
 801baba:	bd80      	pop	{r7, pc}
 801babc:	200040ac 	.word	0x200040ac
 801bac0:	0802772c 	.word	0x0802772c
 801bac4:	0802775c 	.word	0x0802775c
 801bac8:	08027774 	.word	0x08027774
 801bacc:	200040b0 	.word	0x200040b0
 801bad0:	0802779c 	.word	0x0802779c
 801bad4:	080277b8 	.word	0x080277b8
 801bad8:	080277d4 	.word	0x080277d4
 801badc:	200040b4 	.word	0x200040b4

0801bae0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801bae0:	b580      	push	{r7, lr}
 801bae2:	b082      	sub	sp, #8
 801bae4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801bae6:	4b1e      	ldr	r3, [pc, #120]	; (801bb60 <mem_init+0x80>)
 801bae8:	3303      	adds	r3, #3
 801baea:	f023 0303 	bic.w	r3, r3, #3
 801baee:	461a      	mov	r2, r3
 801baf0:	4b1c      	ldr	r3, [pc, #112]	; (801bb64 <mem_init+0x84>)
 801baf2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801baf4:	4b1b      	ldr	r3, [pc, #108]	; (801bb64 <mem_init+0x84>)
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801bb00:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	2200      	movs	r2, #0
 801bb06:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	2200      	movs	r2, #0
 801bb0c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 801bb0e:	4b15      	ldr	r3, [pc, #84]	; (801bb64 <mem_init+0x84>)
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801bb16:	4a14      	ldr	r2, [pc, #80]	; (801bb68 <mem_init+0x88>)
 801bb18:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801bb1a:	4b13      	ldr	r3, [pc, #76]	; (801bb68 <mem_init+0x88>)
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	2201      	movs	r2, #1
 801bb20:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801bb22:	4b11      	ldr	r3, [pc, #68]	; (801bb68 <mem_init+0x88>)
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801bb2a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801bb2c:	4b0e      	ldr	r3, [pc, #56]	; (801bb68 <mem_init+0x88>)
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801bb34:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801bb36:	4b0b      	ldr	r3, [pc, #44]	; (801bb64 <mem_init+0x84>)
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	4a0c      	ldr	r2, [pc, #48]	; (801bb6c <mem_init+0x8c>)
 801bb3c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801bb3e:	480c      	ldr	r0, [pc, #48]	; (801bb70 <mem_init+0x90>)
 801bb40:	f007 fb76 	bl	8023230 <sys_mutex_new>
 801bb44:	4603      	mov	r3, r0
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d006      	beq.n	801bb58 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801bb4a:	4b0a      	ldr	r3, [pc, #40]	; (801bb74 <mem_init+0x94>)
 801bb4c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801bb50:	4909      	ldr	r1, [pc, #36]	; (801bb78 <mem_init+0x98>)
 801bb52:	480a      	ldr	r0, [pc, #40]	; (801bb7c <mem_init+0x9c>)
 801bb54:	f009 ffe4 	bl	8025b20 <iprintf>
  }
}
 801bb58:	bf00      	nop
 801bb5a:	3708      	adds	r7, #8
 801bb5c:	46bd      	mov	sp, r7
 801bb5e:	bd80      	pop	{r7, pc}
 801bb60:	20004620 	.word	0x20004620
 801bb64:	200040ac 	.word	0x200040ac
 801bb68:	200040b0 	.word	0x200040b0
 801bb6c:	200040b4 	.word	0x200040b4
 801bb70:	200040b8 	.word	0x200040b8
 801bb74:	0802772c 	.word	0x0802772c
 801bb78:	08027800 	.word	0x08027800
 801bb7c:	08027774 	.word	0x08027774

0801bb80 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801bb80:	b580      	push	{r7, lr}
 801bb82:	b084      	sub	sp, #16
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d050      	beq.n	801bc30 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	f003 0303 	and.w	r3, r3, #3
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d006      	beq.n	801bba6 <mem_free+0x26>
 801bb98:	4b27      	ldr	r3, [pc, #156]	; (801bc38 <mem_free+0xb8>)
 801bb9a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 801bb9e:	4927      	ldr	r1, [pc, #156]	; (801bc3c <mem_free+0xbc>)
 801bba0:	4827      	ldr	r0, [pc, #156]	; (801bc40 <mem_free+0xc0>)
 801bba2:	f009 ffbd 	bl	8025b20 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801bba6:	4b27      	ldr	r3, [pc, #156]	; (801bc44 <mem_free+0xc4>)
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	687a      	ldr	r2, [r7, #4]
 801bbac:	429a      	cmp	r2, r3
 801bbae:	d304      	bcc.n	801bbba <mem_free+0x3a>
 801bbb0:	4b25      	ldr	r3, [pc, #148]	; (801bc48 <mem_free+0xc8>)
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	687a      	ldr	r2, [r7, #4]
 801bbb6:	429a      	cmp	r2, r3
 801bbb8:	d306      	bcc.n	801bbc8 <mem_free+0x48>
 801bbba:	4b1f      	ldr	r3, [pc, #124]	; (801bc38 <mem_free+0xb8>)
 801bbbc:	f240 12af 	movw	r2, #431	; 0x1af
 801bbc0:	4922      	ldr	r1, [pc, #136]	; (801bc4c <mem_free+0xcc>)
 801bbc2:	481f      	ldr	r0, [pc, #124]	; (801bc40 <mem_free+0xc0>)
 801bbc4:	f009 ffac 	bl	8025b20 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801bbc8:	4b1e      	ldr	r3, [pc, #120]	; (801bc44 <mem_free+0xc4>)
 801bbca:	681b      	ldr	r3, [r3, #0]
 801bbcc:	687a      	ldr	r2, [r7, #4]
 801bbce:	429a      	cmp	r2, r3
 801bbd0:	d304      	bcc.n	801bbdc <mem_free+0x5c>
 801bbd2:	4b1d      	ldr	r3, [pc, #116]	; (801bc48 <mem_free+0xc8>)
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	687a      	ldr	r2, [r7, #4]
 801bbd8:	429a      	cmp	r2, r3
 801bbda:	d306      	bcc.n	801bbea <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 801bbdc:	f007 fb7c 	bl	80232d8 <sys_arch_protect>
 801bbe0:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 801bbe2:	68b8      	ldr	r0, [r7, #8]
 801bbe4:	f007 fb86 	bl	80232f4 <sys_arch_unprotect>
    return;
 801bbe8:	e023      	b.n	801bc32 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801bbea:	4819      	ldr	r0, [pc, #100]	; (801bc50 <mem_free+0xd0>)
 801bbec:	f007 fb3a 	bl	8023264 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	3b08      	subs	r3, #8
 801bbf4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 801bbf6:	68fb      	ldr	r3, [r7, #12]
 801bbf8:	791b      	ldrb	r3, [r3, #4]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d106      	bne.n	801bc0c <mem_free+0x8c>
 801bbfe:	4b0e      	ldr	r3, [pc, #56]	; (801bc38 <mem_free+0xb8>)
 801bc00:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 801bc04:	4913      	ldr	r1, [pc, #76]	; (801bc54 <mem_free+0xd4>)
 801bc06:	480e      	ldr	r0, [pc, #56]	; (801bc40 <mem_free+0xc0>)
 801bc08:	f009 ff8a 	bl	8025b20 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	2200      	movs	r2, #0
 801bc10:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801bc12:	4b11      	ldr	r3, [pc, #68]	; (801bc58 <mem_free+0xd8>)
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	68fa      	ldr	r2, [r7, #12]
 801bc18:	429a      	cmp	r2, r3
 801bc1a:	d202      	bcs.n	801bc22 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801bc1c:	4a0e      	ldr	r2, [pc, #56]	; (801bc58 <mem_free+0xd8>)
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801bc22:	68f8      	ldr	r0, [r7, #12]
 801bc24:	f7ff fec4 	bl	801b9b0 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801bc28:	4809      	ldr	r0, [pc, #36]	; (801bc50 <mem_free+0xd0>)
 801bc2a:	f007 fb2a 	bl	8023282 <sys_mutex_unlock>
 801bc2e:	e000      	b.n	801bc32 <mem_free+0xb2>
    return;
 801bc30:	bf00      	nop
}
 801bc32:	3710      	adds	r7, #16
 801bc34:	46bd      	mov	sp, r7
 801bc36:	bd80      	pop	{r7, pc}
 801bc38:	0802772c 	.word	0x0802772c
 801bc3c:	0802781c 	.word	0x0802781c
 801bc40:	08027774 	.word	0x08027774
 801bc44:	200040ac 	.word	0x200040ac
 801bc48:	200040b0 	.word	0x200040b0
 801bc4c:	08027840 	.word	0x08027840
 801bc50:	200040b8 	.word	0x200040b8
 801bc54:	08027858 	.word	0x08027858
 801bc58:	200040b4 	.word	0x200040b4

0801bc5c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 801bc5c:	b580      	push	{r7, lr}
 801bc5e:	b088      	sub	sp, #32
 801bc60:	af00      	add	r7, sp, #0
 801bc62:	6078      	str	r0, [r7, #4]
 801bc64:	460b      	mov	r3, r1
 801bc66:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 801bc68:	887b      	ldrh	r3, [r7, #2]
 801bc6a:	3303      	adds	r3, #3
 801bc6c:	b29b      	uxth	r3, r3
 801bc6e:	f023 0303 	bic.w	r3, r3, #3
 801bc72:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 801bc74:	887b      	ldrh	r3, [r7, #2]
 801bc76:	2b0b      	cmp	r3, #11
 801bc78:	d801      	bhi.n	801bc7e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801bc7a:	230c      	movs	r3, #12
 801bc7c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 801bc7e:	887b      	ldrh	r3, [r7, #2]
 801bc80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bc84:	d901      	bls.n	801bc8a <mem_trim+0x2e>
    return NULL;
 801bc86:	2300      	movs	r3, #0
 801bc88:	e0bd      	b.n	801be06 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801bc8a:	4b61      	ldr	r3, [pc, #388]	; (801be10 <mem_trim+0x1b4>)
 801bc8c:	681b      	ldr	r3, [r3, #0]
 801bc8e:	687a      	ldr	r2, [r7, #4]
 801bc90:	429a      	cmp	r2, r3
 801bc92:	d304      	bcc.n	801bc9e <mem_trim+0x42>
 801bc94:	4b5f      	ldr	r3, [pc, #380]	; (801be14 <mem_trim+0x1b8>)
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	687a      	ldr	r2, [r7, #4]
 801bc9a:	429a      	cmp	r2, r3
 801bc9c:	d306      	bcc.n	801bcac <mem_trim+0x50>
 801bc9e:	4b5e      	ldr	r3, [pc, #376]	; (801be18 <mem_trim+0x1bc>)
 801bca0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801bca4:	495d      	ldr	r1, [pc, #372]	; (801be1c <mem_trim+0x1c0>)
 801bca6:	485e      	ldr	r0, [pc, #376]	; (801be20 <mem_trim+0x1c4>)
 801bca8:	f009 ff3a 	bl	8025b20 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801bcac:	4b58      	ldr	r3, [pc, #352]	; (801be10 <mem_trim+0x1b4>)
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	687a      	ldr	r2, [r7, #4]
 801bcb2:	429a      	cmp	r2, r3
 801bcb4:	d304      	bcc.n	801bcc0 <mem_trim+0x64>
 801bcb6:	4b57      	ldr	r3, [pc, #348]	; (801be14 <mem_trim+0x1b8>)
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	687a      	ldr	r2, [r7, #4]
 801bcbc:	429a      	cmp	r2, r3
 801bcbe:	d307      	bcc.n	801bcd0 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 801bcc0:	f007 fb0a 	bl	80232d8 <sys_arch_protect>
 801bcc4:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 801bcc6:	68f8      	ldr	r0, [r7, #12]
 801bcc8:	f007 fb14 	bl	80232f4 <sys_arch_unprotect>
    return rmem;
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	e09a      	b.n	801be06 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	3b08      	subs	r3, #8
 801bcd4:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 801bcd6:	69fb      	ldr	r3, [r7, #28]
 801bcd8:	4a4d      	ldr	r2, [pc, #308]	; (801be10 <mem_trim+0x1b4>)
 801bcda:	6812      	ldr	r2, [r2, #0]
 801bcdc:	1a9b      	subs	r3, r3, r2
 801bcde:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 801bce0:	69fb      	ldr	r3, [r7, #28]
 801bce2:	881a      	ldrh	r2, [r3, #0]
 801bce4:	8b7b      	ldrh	r3, [r7, #26]
 801bce6:	1ad3      	subs	r3, r2, r3
 801bce8:	b29b      	uxth	r3, r3
 801bcea:	3b08      	subs	r3, #8
 801bcec:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801bcee:	887a      	ldrh	r2, [r7, #2]
 801bcf0:	8b3b      	ldrh	r3, [r7, #24]
 801bcf2:	429a      	cmp	r2, r3
 801bcf4:	d906      	bls.n	801bd04 <mem_trim+0xa8>
 801bcf6:	4b48      	ldr	r3, [pc, #288]	; (801be18 <mem_trim+0x1bc>)
 801bcf8:	f240 2206 	movw	r2, #518	; 0x206
 801bcfc:	4949      	ldr	r1, [pc, #292]	; (801be24 <mem_trim+0x1c8>)
 801bcfe:	4848      	ldr	r0, [pc, #288]	; (801be20 <mem_trim+0x1c4>)
 801bd00:	f009 ff0e 	bl	8025b20 <iprintf>
  if (newsize > size) {
 801bd04:	887a      	ldrh	r2, [r7, #2]
 801bd06:	8b3b      	ldrh	r3, [r7, #24]
 801bd08:	429a      	cmp	r2, r3
 801bd0a:	d901      	bls.n	801bd10 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	e07a      	b.n	801be06 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 801bd10:	887a      	ldrh	r2, [r7, #2]
 801bd12:	8b3b      	ldrh	r3, [r7, #24]
 801bd14:	429a      	cmp	r2, r3
 801bd16:	d101      	bne.n	801bd1c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	e074      	b.n	801be06 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801bd1c:	4842      	ldr	r0, [pc, #264]	; (801be28 <mem_trim+0x1cc>)
 801bd1e:	f007 faa1 	bl	8023264 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 801bd22:	4b3b      	ldr	r3, [pc, #236]	; (801be10 <mem_trim+0x1b4>)
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	69fa      	ldr	r2, [r7, #28]
 801bd28:	8812      	ldrh	r2, [r2, #0]
 801bd2a:	4413      	add	r3, r2
 801bd2c:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 801bd2e:	697b      	ldr	r3, [r7, #20]
 801bd30:	791b      	ldrb	r3, [r3, #4]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d131      	bne.n	801bd9a <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 801bd36:	697b      	ldr	r3, [r7, #20]
 801bd38:	881b      	ldrh	r3, [r3, #0]
 801bd3a:	827b      	strh	r3, [r7, #18]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801bd3c:	8b7a      	ldrh	r2, [r7, #26]
 801bd3e:	887b      	ldrh	r3, [r7, #2]
 801bd40:	4413      	add	r3, r2
 801bd42:	b29b      	uxth	r3, r3
 801bd44:	3308      	adds	r3, #8
 801bd46:	823b      	strh	r3, [r7, #16]
    if (lfree == mem2) {
 801bd48:	4b38      	ldr	r3, [pc, #224]	; (801be2c <mem_trim+0x1d0>)
 801bd4a:	681a      	ldr	r2, [r3, #0]
 801bd4c:	697b      	ldr	r3, [r7, #20]
 801bd4e:	429a      	cmp	r2, r3
 801bd50:	d105      	bne.n	801bd5e <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 801bd52:	4b2f      	ldr	r3, [pc, #188]	; (801be10 <mem_trim+0x1b4>)
 801bd54:	681a      	ldr	r2, [r3, #0]
 801bd56:	8a3b      	ldrh	r3, [r7, #16]
 801bd58:	4413      	add	r3, r2
 801bd5a:	4a34      	ldr	r2, [pc, #208]	; (801be2c <mem_trim+0x1d0>)
 801bd5c:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 801bd5e:	4b2c      	ldr	r3, [pc, #176]	; (801be10 <mem_trim+0x1b4>)
 801bd60:	681a      	ldr	r2, [r3, #0]
 801bd62:	8a3b      	ldrh	r3, [r7, #16]
 801bd64:	4413      	add	r3, r2
 801bd66:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 801bd68:	697b      	ldr	r3, [r7, #20]
 801bd6a:	2200      	movs	r2, #0
 801bd6c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801bd6e:	697b      	ldr	r3, [r7, #20]
 801bd70:	8a7a      	ldrh	r2, [r7, #18]
 801bd72:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801bd74:	697b      	ldr	r3, [r7, #20]
 801bd76:	8b7a      	ldrh	r2, [r7, #26]
 801bd78:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801bd7a:	69fb      	ldr	r3, [r7, #28]
 801bd7c:	8a3a      	ldrh	r2, [r7, #16]
 801bd7e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801bd80:	697b      	ldr	r3, [r7, #20]
 801bd82:	881b      	ldrh	r3, [r3, #0]
 801bd84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bd88:	d039      	beq.n	801bdfe <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801bd8a:	4b21      	ldr	r3, [pc, #132]	; (801be10 <mem_trim+0x1b4>)
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	697a      	ldr	r2, [r7, #20]
 801bd90:	8812      	ldrh	r2, [r2, #0]
 801bd92:	4413      	add	r3, r2
 801bd94:	8a3a      	ldrh	r2, [r7, #16]
 801bd96:	805a      	strh	r2, [r3, #2]
 801bd98:	e031      	b.n	801bdfe <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801bd9a:	887b      	ldrh	r3, [r7, #2]
 801bd9c:	f103 0214 	add.w	r2, r3, #20
 801bda0:	8b3b      	ldrh	r3, [r7, #24]
 801bda2:	429a      	cmp	r2, r3
 801bda4:	d82b      	bhi.n	801bdfe <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801bda6:	8b7a      	ldrh	r2, [r7, #26]
 801bda8:	887b      	ldrh	r3, [r7, #2]
 801bdaa:	4413      	add	r3, r2
 801bdac:	b29b      	uxth	r3, r3
 801bdae:	3308      	adds	r3, #8
 801bdb0:	823b      	strh	r3, [r7, #16]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 801bdb2:	4b17      	ldr	r3, [pc, #92]	; (801be10 <mem_trim+0x1b4>)
 801bdb4:	681a      	ldr	r2, [r3, #0]
 801bdb6:	8a3b      	ldrh	r3, [r7, #16]
 801bdb8:	4413      	add	r3, r2
 801bdba:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 801bdbc:	4b1b      	ldr	r3, [pc, #108]	; (801be2c <mem_trim+0x1d0>)
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	697a      	ldr	r2, [r7, #20]
 801bdc2:	429a      	cmp	r2, r3
 801bdc4:	d202      	bcs.n	801bdcc <mem_trim+0x170>
      lfree = mem2;
 801bdc6:	4a19      	ldr	r2, [pc, #100]	; (801be2c <mem_trim+0x1d0>)
 801bdc8:	697b      	ldr	r3, [r7, #20]
 801bdca:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801bdcc:	697b      	ldr	r3, [r7, #20]
 801bdce:	2200      	movs	r2, #0
 801bdd0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801bdd2:	69fb      	ldr	r3, [r7, #28]
 801bdd4:	881a      	ldrh	r2, [r3, #0]
 801bdd6:	697b      	ldr	r3, [r7, #20]
 801bdd8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801bdda:	697b      	ldr	r3, [r7, #20]
 801bddc:	8b7a      	ldrh	r2, [r7, #26]
 801bdde:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801bde0:	69fb      	ldr	r3, [r7, #28]
 801bde2:	8a3a      	ldrh	r2, [r7, #16]
 801bde4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801bde6:	697b      	ldr	r3, [r7, #20]
 801bde8:	881b      	ldrh	r3, [r3, #0]
 801bdea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bdee:	d006      	beq.n	801bdfe <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801bdf0:	4b07      	ldr	r3, [pc, #28]	; (801be10 <mem_trim+0x1b4>)
 801bdf2:	681b      	ldr	r3, [r3, #0]
 801bdf4:	697a      	ldr	r2, [r7, #20]
 801bdf6:	8812      	ldrh	r2, [r2, #0]
 801bdf8:	4413      	add	r3, r2
 801bdfa:	8a3a      	ldrh	r2, [r7, #16]
 801bdfc:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801bdfe:	480a      	ldr	r0, [pc, #40]	; (801be28 <mem_trim+0x1cc>)
 801be00:	f007 fa3f 	bl	8023282 <sys_mutex_unlock>
  return rmem;
 801be04:	687b      	ldr	r3, [r7, #4]
}
 801be06:	4618      	mov	r0, r3
 801be08:	3720      	adds	r7, #32
 801be0a:	46bd      	mov	sp, r7
 801be0c:	bd80      	pop	{r7, pc}
 801be0e:	bf00      	nop
 801be10:	200040ac 	.word	0x200040ac
 801be14:	200040b0 	.word	0x200040b0
 801be18:	0802772c 	.word	0x0802772c
 801be1c:	0802786c 	.word	0x0802786c
 801be20:	08027774 	.word	0x08027774
 801be24:	08027884 	.word	0x08027884
 801be28:	200040b8 	.word	0x200040b8
 801be2c:	200040b4 	.word	0x200040b4

0801be30 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 801be30:	b580      	push	{r7, lr}
 801be32:	b088      	sub	sp, #32
 801be34:	af00      	add	r7, sp, #0
 801be36:	4603      	mov	r3, r0
 801be38:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 801be3a:	88fb      	ldrh	r3, [r7, #6]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d101      	bne.n	801be44 <mem_malloc+0x14>
    return NULL;
 801be40:	2300      	movs	r3, #0
 801be42:	e0d1      	b.n	801bfe8 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 801be44:	88fb      	ldrh	r3, [r7, #6]
 801be46:	3303      	adds	r3, #3
 801be48:	b29b      	uxth	r3, r3
 801be4a:	f023 0303 	bic.w	r3, r3, #3
 801be4e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 801be50:	88fb      	ldrh	r3, [r7, #6]
 801be52:	2b0b      	cmp	r3, #11
 801be54:	d801      	bhi.n	801be5a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801be56:	230c      	movs	r3, #12
 801be58:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 801be5a:	88fb      	ldrh	r3, [r7, #6]
 801be5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801be60:	d901      	bls.n	801be66 <mem_malloc+0x36>
    return NULL;
 801be62:	2300      	movs	r3, #0
 801be64:	e0c0      	b.n	801bfe8 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801be66:	4862      	ldr	r0, [pc, #392]	; (801bff0 <mem_malloc+0x1c0>)
 801be68:	f007 f9fc 	bl	8023264 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801be6c:	4b61      	ldr	r3, [pc, #388]	; (801bff4 <mem_malloc+0x1c4>)
 801be6e:	681b      	ldr	r3, [r3, #0]
 801be70:	461a      	mov	r2, r3
 801be72:	4b61      	ldr	r3, [pc, #388]	; (801bff8 <mem_malloc+0x1c8>)
 801be74:	681b      	ldr	r3, [r3, #0]
 801be76:	1ad3      	subs	r3, r2, r3
 801be78:	83fb      	strh	r3, [r7, #30]
 801be7a:	e0aa      	b.n	801bfd2 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 801be7c:	4b5e      	ldr	r3, [pc, #376]	; (801bff8 <mem_malloc+0x1c8>)
 801be7e:	681a      	ldr	r2, [r3, #0]
 801be80:	8bfb      	ldrh	r3, [r7, #30]
 801be82:	4413      	add	r3, r2
 801be84:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801be86:	697b      	ldr	r3, [r7, #20]
 801be88:	791b      	ldrb	r3, [r3, #4]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	f040 809b 	bne.w	801bfc6 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801be90:	697b      	ldr	r3, [r7, #20]
 801be92:	881b      	ldrh	r3, [r3, #0]
 801be94:	461a      	mov	r2, r3
 801be96:	8bfb      	ldrh	r3, [r7, #30]
 801be98:	1ad3      	subs	r3, r2, r3
 801be9a:	f1a3 0208 	sub.w	r2, r3, #8
 801be9e:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 801bea0:	429a      	cmp	r2, r3
 801bea2:	f0c0 8090 	bcc.w	801bfc6 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801bea6:	697b      	ldr	r3, [r7, #20]
 801bea8:	881b      	ldrh	r3, [r3, #0]
 801beaa:	461a      	mov	r2, r3
 801beac:	8bfb      	ldrh	r3, [r7, #30]
 801beae:	1ad3      	subs	r3, r2, r3
 801beb0:	f1a3 0208 	sub.w	r2, r3, #8
 801beb4:	88fb      	ldrh	r3, [r7, #6]
 801beb6:	3314      	adds	r3, #20
 801beb8:	429a      	cmp	r2, r3
 801beba:	d327      	bcc.n	801bf0c <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 801bebc:	8bfa      	ldrh	r2, [r7, #30]
 801bebe:	88fb      	ldrh	r3, [r7, #6]
 801bec0:	4413      	add	r3, r2
 801bec2:	b29b      	uxth	r3, r3
 801bec4:	3308      	adds	r3, #8
 801bec6:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 801bec8:	4b4b      	ldr	r3, [pc, #300]	; (801bff8 <mem_malloc+0x1c8>)
 801beca:	681a      	ldr	r2, [r3, #0]
 801becc:	8a7b      	ldrh	r3, [r7, #18]
 801bece:	4413      	add	r3, r2
 801bed0:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 801bed2:	68fb      	ldr	r3, [r7, #12]
 801bed4:	2200      	movs	r2, #0
 801bed6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801bed8:	697b      	ldr	r3, [r7, #20]
 801beda:	881a      	ldrh	r2, [r3, #0]
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801bee0:	68fb      	ldr	r3, [r7, #12]
 801bee2:	8bfa      	ldrh	r2, [r7, #30]
 801bee4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801bee6:	697b      	ldr	r3, [r7, #20]
 801bee8:	8a7a      	ldrh	r2, [r7, #18]
 801beea:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801beec:	697b      	ldr	r3, [r7, #20]
 801beee:	2201      	movs	r2, #1
 801bef0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801bef2:	68fb      	ldr	r3, [r7, #12]
 801bef4:	881b      	ldrh	r3, [r3, #0]
 801bef6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801befa:	d00a      	beq.n	801bf12 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801befc:	4b3e      	ldr	r3, [pc, #248]	; (801bff8 <mem_malloc+0x1c8>)
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	68fa      	ldr	r2, [r7, #12]
 801bf02:	8812      	ldrh	r2, [r2, #0]
 801bf04:	4413      	add	r3, r2
 801bf06:	8a7a      	ldrh	r2, [r7, #18]
 801bf08:	805a      	strh	r2, [r3, #2]
 801bf0a:	e002      	b.n	801bf12 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801bf0c:	697b      	ldr	r3, [r7, #20]
 801bf0e:	2201      	movs	r2, #1
 801bf10:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801bf12:	4b38      	ldr	r3, [pc, #224]	; (801bff4 <mem_malloc+0x1c4>)
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	697a      	ldr	r2, [r7, #20]
 801bf18:	429a      	cmp	r2, r3
 801bf1a:	d127      	bne.n	801bf6c <mem_malloc+0x13c>
          struct mem *cur = lfree;
 801bf1c:	4b35      	ldr	r3, [pc, #212]	; (801bff4 <mem_malloc+0x1c4>)
 801bf1e:	681b      	ldr	r3, [r3, #0]
 801bf20:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801bf22:	e005      	b.n	801bf30 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 801bf24:	4b34      	ldr	r3, [pc, #208]	; (801bff8 <mem_malloc+0x1c8>)
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	69ba      	ldr	r2, [r7, #24]
 801bf2a:	8812      	ldrh	r2, [r2, #0]
 801bf2c:	4413      	add	r3, r2
 801bf2e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 801bf30:	69bb      	ldr	r3, [r7, #24]
 801bf32:	791b      	ldrb	r3, [r3, #4]
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d004      	beq.n	801bf42 <mem_malloc+0x112>
 801bf38:	4b30      	ldr	r3, [pc, #192]	; (801bffc <mem_malloc+0x1cc>)
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	69ba      	ldr	r2, [r7, #24]
 801bf3e:	429a      	cmp	r2, r3
 801bf40:	d1f0      	bne.n	801bf24 <mem_malloc+0xf4>
          }
          lfree = cur;
 801bf42:	4a2c      	ldr	r2, [pc, #176]	; (801bff4 <mem_malloc+0x1c4>)
 801bf44:	69bb      	ldr	r3, [r7, #24]
 801bf46:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801bf48:	4b2a      	ldr	r3, [pc, #168]	; (801bff4 <mem_malloc+0x1c4>)
 801bf4a:	681a      	ldr	r2, [r3, #0]
 801bf4c:	4b2b      	ldr	r3, [pc, #172]	; (801bffc <mem_malloc+0x1cc>)
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	429a      	cmp	r2, r3
 801bf52:	d00b      	beq.n	801bf6c <mem_malloc+0x13c>
 801bf54:	4b27      	ldr	r3, [pc, #156]	; (801bff4 <mem_malloc+0x1c4>)
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	791b      	ldrb	r3, [r3, #4]
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d006      	beq.n	801bf6c <mem_malloc+0x13c>
 801bf5e:	4b28      	ldr	r3, [pc, #160]	; (801c000 <mem_malloc+0x1d0>)
 801bf60:	f240 22cf 	movw	r2, #719	; 0x2cf
 801bf64:	4927      	ldr	r1, [pc, #156]	; (801c004 <mem_malloc+0x1d4>)
 801bf66:	4828      	ldr	r0, [pc, #160]	; (801c008 <mem_malloc+0x1d8>)
 801bf68:	f009 fdda 	bl	8025b20 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801bf6c:	4820      	ldr	r0, [pc, #128]	; (801bff0 <mem_malloc+0x1c0>)
 801bf6e:	f007 f988 	bl	8023282 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801bf72:	88fa      	ldrh	r2, [r7, #6]
 801bf74:	697b      	ldr	r3, [r7, #20]
 801bf76:	4413      	add	r3, r2
 801bf78:	3308      	adds	r3, #8
 801bf7a:	4a20      	ldr	r2, [pc, #128]	; (801bffc <mem_malloc+0x1cc>)
 801bf7c:	6812      	ldr	r2, [r2, #0]
 801bf7e:	4293      	cmp	r3, r2
 801bf80:	d906      	bls.n	801bf90 <mem_malloc+0x160>
 801bf82:	4b1f      	ldr	r3, [pc, #124]	; (801c000 <mem_malloc+0x1d0>)
 801bf84:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801bf88:	4920      	ldr	r1, [pc, #128]	; (801c00c <mem_malloc+0x1dc>)
 801bf8a:	481f      	ldr	r0, [pc, #124]	; (801c008 <mem_malloc+0x1d8>)
 801bf8c:	f009 fdc8 	bl	8025b20 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801bf90:	697b      	ldr	r3, [r7, #20]
 801bf92:	f003 0303 	and.w	r3, r3, #3
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d006      	beq.n	801bfa8 <mem_malloc+0x178>
 801bf9a:	4b19      	ldr	r3, [pc, #100]	; (801c000 <mem_malloc+0x1d0>)
 801bf9c:	f240 22d6 	movw	r2, #726	; 0x2d6
 801bfa0:	491b      	ldr	r1, [pc, #108]	; (801c010 <mem_malloc+0x1e0>)
 801bfa2:	4819      	ldr	r0, [pc, #100]	; (801c008 <mem_malloc+0x1d8>)
 801bfa4:	f009 fdbc 	bl	8025b20 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801bfa8:	697b      	ldr	r3, [r7, #20]
 801bfaa:	f003 0303 	and.w	r3, r3, #3
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d006      	beq.n	801bfc0 <mem_malloc+0x190>
 801bfb2:	4b13      	ldr	r3, [pc, #76]	; (801c000 <mem_malloc+0x1d0>)
 801bfb4:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 801bfb8:	4916      	ldr	r1, [pc, #88]	; (801c014 <mem_malloc+0x1e4>)
 801bfba:	4813      	ldr	r0, [pc, #76]	; (801c008 <mem_malloc+0x1d8>)
 801bfbc:	f009 fdb0 	bl	8025b20 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 801bfc0:	697b      	ldr	r3, [r7, #20]
 801bfc2:	3308      	adds	r3, #8
 801bfc4:	e010      	b.n	801bfe8 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 801bfc6:	4b0c      	ldr	r3, [pc, #48]	; (801bff8 <mem_malloc+0x1c8>)
 801bfc8:	681a      	ldr	r2, [r3, #0]
 801bfca:	8bfb      	ldrh	r3, [r7, #30]
 801bfcc:	4413      	add	r3, r2
 801bfce:	881b      	ldrh	r3, [r3, #0]
 801bfd0:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801bfd2:	8bfa      	ldrh	r2, [r7, #30]
 801bfd4:	88fb      	ldrh	r3, [r7, #6]
 801bfd6:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801bfda:	429a      	cmp	r2, r3
 801bfdc:	f4ff af4e 	bcc.w	801be7c <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801bfe0:	4803      	ldr	r0, [pc, #12]	; (801bff0 <mem_malloc+0x1c0>)
 801bfe2:	f007 f94e 	bl	8023282 <sys_mutex_unlock>
  return NULL;
 801bfe6:	2300      	movs	r3, #0
}
 801bfe8:	4618      	mov	r0, r3
 801bfea:	3720      	adds	r7, #32
 801bfec:	46bd      	mov	sp, r7
 801bfee:	bd80      	pop	{r7, pc}
 801bff0:	200040b8 	.word	0x200040b8
 801bff4:	200040b4 	.word	0x200040b4
 801bff8:	200040ac 	.word	0x200040ac
 801bffc:	200040b0 	.word	0x200040b0
 801c000:	0802772c 	.word	0x0802772c
 801c004:	080278a4 	.word	0x080278a4
 801c008:	08027774 	.word	0x08027774
 801c00c:	080278c0 	.word	0x080278c0
 801c010:	080278f0 	.word	0x080278f0
 801c014:	08027920 	.word	0x08027920

0801c018 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801c018:	b480      	push	{r7}
 801c01a:	b085      	sub	sp, #20
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	689b      	ldr	r3, [r3, #8]
 801c024:	2200      	movs	r2, #0
 801c026:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	685b      	ldr	r3, [r3, #4]
 801c02c:	3303      	adds	r3, #3
 801c02e:	f023 0303 	bic.w	r3, r3, #3
 801c032:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801c034:	2300      	movs	r3, #0
 801c036:	60fb      	str	r3, [r7, #12]
 801c038:	e011      	b.n	801c05e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	689b      	ldr	r3, [r3, #8]
 801c03e:	681a      	ldr	r2, [r3, #0]
 801c040:	68bb      	ldr	r3, [r7, #8]
 801c042:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	689b      	ldr	r3, [r3, #8]
 801c048:	68ba      	ldr	r2, [r7, #8]
 801c04a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	881b      	ldrh	r3, [r3, #0]
 801c050:	461a      	mov	r2, r3
 801c052:	68bb      	ldr	r3, [r7, #8]
 801c054:	4413      	add	r3, r2
 801c056:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	3301      	adds	r3, #1
 801c05c:	60fb      	str	r3, [r7, #12]
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	885b      	ldrh	r3, [r3, #2]
 801c062:	461a      	mov	r2, r3
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	429a      	cmp	r2, r3
 801c068:	dce7      	bgt.n	801c03a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801c06a:	bf00      	nop
 801c06c:	3714      	adds	r7, #20
 801c06e:	46bd      	mov	sp, r7
 801c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c074:	4770      	bx	lr
	...

0801c078 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801c078:	b580      	push	{r7, lr}
 801c07a:	b082      	sub	sp, #8
 801c07c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801c07e:	2300      	movs	r3, #0
 801c080:	80fb      	strh	r3, [r7, #6]
 801c082:	e009      	b.n	801c098 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801c084:	88fb      	ldrh	r3, [r7, #6]
 801c086:	4a08      	ldr	r2, [pc, #32]	; (801c0a8 <memp_init+0x30>)
 801c088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c08c:	4618      	mov	r0, r3
 801c08e:	f7ff ffc3 	bl	801c018 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801c092:	88fb      	ldrh	r3, [r7, #6]
 801c094:	3301      	adds	r3, #1
 801c096:	80fb      	strh	r3, [r7, #6]
 801c098:	88fb      	ldrh	r3, [r7, #6]
 801c09a:	2b0c      	cmp	r3, #12
 801c09c:	d9f2      	bls.n	801c084 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801c09e:	bf00      	nop
 801c0a0:	3708      	adds	r7, #8
 801c0a2:	46bd      	mov	sp, r7
 801c0a4:	bd80      	pop	{r7, pc}
 801c0a6:	bf00      	nop
 801c0a8:	0802b3ec 	.word	0x0802b3ec

0801c0ac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 801c0ac:	b580      	push	{r7, lr}
 801c0ae:	b084      	sub	sp, #16
 801c0b0:	af00      	add	r7, sp, #0
 801c0b2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801c0b4:	f007 f910 	bl	80232d8 <sys_arch_protect>
 801c0b8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	689b      	ldr	r3, [r3, #8]
 801c0be:	681b      	ldr	r3, [r3, #0]
 801c0c0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801c0c2:	68bb      	ldr	r3, [r7, #8]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d015      	beq.n	801c0f4 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	689b      	ldr	r3, [r3, #8]
 801c0cc:	68ba      	ldr	r2, [r7, #8]
 801c0ce:	6812      	ldr	r2, [r2, #0]
 801c0d0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801c0d2:	68bb      	ldr	r3, [r7, #8]
 801c0d4:	f003 0303 	and.w	r3, r3, #3
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d006      	beq.n	801c0ea <do_memp_malloc_pool+0x3e>
 801c0dc:	4b09      	ldr	r3, [pc, #36]	; (801c104 <do_memp_malloc_pool+0x58>)
 801c0de:	f240 1249 	movw	r2, #329	; 0x149
 801c0e2:	4909      	ldr	r1, [pc, #36]	; (801c108 <do_memp_malloc_pool+0x5c>)
 801c0e4:	4809      	ldr	r0, [pc, #36]	; (801c10c <do_memp_malloc_pool+0x60>)
 801c0e6:	f009 fd1b 	bl	8025b20 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801c0ea:	68f8      	ldr	r0, [r7, #12]
 801c0ec:	f007 f902 	bl	80232f4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 801c0f0:	68bb      	ldr	r3, [r7, #8]
 801c0f2:	e003      	b.n	801c0fc <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 801c0f4:	68f8      	ldr	r0, [r7, #12]
 801c0f6:	f007 f8fd 	bl	80232f4 <sys_arch_unprotect>
  return NULL;
 801c0fa:	2300      	movs	r3, #0
}
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	3710      	adds	r7, #16
 801c100:	46bd      	mov	sp, r7
 801c102:	bd80      	pop	{r7, pc}
 801c104:	08027944 	.word	0x08027944
 801c108:	08027974 	.word	0x08027974
 801c10c:	08027998 	.word	0x08027998

0801c110 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 801c110:	b580      	push	{r7, lr}
 801c112:	b084      	sub	sp, #16
 801c114:	af00      	add	r7, sp, #0
 801c116:	4603      	mov	r3, r0
 801c118:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801c11a:	79fb      	ldrb	r3, [r7, #7]
 801c11c:	2b0c      	cmp	r3, #12
 801c11e:	d908      	bls.n	801c132 <memp_malloc+0x22>
 801c120:	4b0a      	ldr	r3, [pc, #40]	; (801c14c <memp_malloc+0x3c>)
 801c122:	f240 1287 	movw	r2, #391	; 0x187
 801c126:	490a      	ldr	r1, [pc, #40]	; (801c150 <memp_malloc+0x40>)
 801c128:	480a      	ldr	r0, [pc, #40]	; (801c154 <memp_malloc+0x44>)
 801c12a:	f009 fcf9 	bl	8025b20 <iprintf>
 801c12e:	2300      	movs	r3, #0
 801c130:	e008      	b.n	801c144 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801c132:	79fb      	ldrb	r3, [r7, #7]
 801c134:	4a08      	ldr	r2, [pc, #32]	; (801c158 <memp_malloc+0x48>)
 801c136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c13a:	4618      	mov	r0, r3
 801c13c:	f7ff ffb6 	bl	801c0ac <do_memp_malloc_pool>
 801c140:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801c142:	68fb      	ldr	r3, [r7, #12]
}
 801c144:	4618      	mov	r0, r3
 801c146:	3710      	adds	r7, #16
 801c148:	46bd      	mov	sp, r7
 801c14a:	bd80      	pop	{r7, pc}
 801c14c:	08027944 	.word	0x08027944
 801c150:	080279d4 	.word	0x080279d4
 801c154:	08027998 	.word	0x08027998
 801c158:	0802b3ec 	.word	0x0802b3ec

0801c15c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 801c15c:	b580      	push	{r7, lr}
 801c15e:	b084      	sub	sp, #16
 801c160:	af00      	add	r7, sp, #0
 801c162:	6078      	str	r0, [r7, #4]
 801c164:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801c166:	683b      	ldr	r3, [r7, #0]
 801c168:	f003 0303 	and.w	r3, r3, #3
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d006      	beq.n	801c17e <do_memp_free_pool+0x22>
 801c170:	4b0d      	ldr	r3, [pc, #52]	; (801c1a8 <do_memp_free_pool+0x4c>)
 801c172:	f240 129d 	movw	r2, #413	; 0x19d
 801c176:	490d      	ldr	r1, [pc, #52]	; (801c1ac <do_memp_free_pool+0x50>)
 801c178:	480d      	ldr	r0, [pc, #52]	; (801c1b0 <do_memp_free_pool+0x54>)
 801c17a:	f009 fcd1 	bl	8025b20 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 801c17e:	683b      	ldr	r3, [r7, #0]
 801c180:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801c182:	f007 f8a9 	bl	80232d8 <sys_arch_protect>
 801c186:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	689b      	ldr	r3, [r3, #8]
 801c18c:	681a      	ldr	r2, [r3, #0]
 801c18e:	68fb      	ldr	r3, [r7, #12]
 801c190:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	689b      	ldr	r3, [r3, #8]
 801c196:	68fa      	ldr	r2, [r7, #12]
 801c198:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801c19a:	68b8      	ldr	r0, [r7, #8]
 801c19c:	f007 f8aa 	bl	80232f4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801c1a0:	bf00      	nop
 801c1a2:	3710      	adds	r7, #16
 801c1a4:	46bd      	mov	sp, r7
 801c1a6:	bd80      	pop	{r7, pc}
 801c1a8:	08027944 	.word	0x08027944
 801c1ac:	080279f4 	.word	0x080279f4
 801c1b0:	08027998 	.word	0x08027998

0801c1b4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801c1b4:	b580      	push	{r7, lr}
 801c1b6:	b082      	sub	sp, #8
 801c1b8:	af00      	add	r7, sp, #0
 801c1ba:	4603      	mov	r3, r0
 801c1bc:	6039      	str	r1, [r7, #0]
 801c1be:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801c1c0:	79fb      	ldrb	r3, [r7, #7]
 801c1c2:	2b0c      	cmp	r3, #12
 801c1c4:	d907      	bls.n	801c1d6 <memp_free+0x22>
 801c1c6:	4b0c      	ldr	r3, [pc, #48]	; (801c1f8 <memp_free+0x44>)
 801c1c8:	f240 12db 	movw	r2, #475	; 0x1db
 801c1cc:	490b      	ldr	r1, [pc, #44]	; (801c1fc <memp_free+0x48>)
 801c1ce:	480c      	ldr	r0, [pc, #48]	; (801c200 <memp_free+0x4c>)
 801c1d0:	f009 fca6 	bl	8025b20 <iprintf>
 801c1d4:	e00c      	b.n	801c1f0 <memp_free+0x3c>

  if (mem == NULL) {
 801c1d6:	683b      	ldr	r3, [r7, #0]
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d008      	beq.n	801c1ee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801c1dc:	79fb      	ldrb	r3, [r7, #7]
 801c1de:	4a09      	ldr	r2, [pc, #36]	; (801c204 <memp_free+0x50>)
 801c1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c1e4:	6839      	ldr	r1, [r7, #0]
 801c1e6:	4618      	mov	r0, r3
 801c1e8:	f7ff ffb8 	bl	801c15c <do_memp_free_pool>
 801c1ec:	e000      	b.n	801c1f0 <memp_free+0x3c>
    return;
 801c1ee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801c1f0:	3708      	adds	r7, #8
 801c1f2:	46bd      	mov	sp, r7
 801c1f4:	bd80      	pop	{r7, pc}
 801c1f6:	bf00      	nop
 801c1f8:	08027944 	.word	0x08027944
 801c1fc:	08027a14 	.word	0x08027a14
 801c200:	08027998 	.word	0x08027998
 801c204:	0802b3ec 	.word	0x0802b3ec

0801c208 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801c208:	b480      	push	{r7}
 801c20a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801c20c:	bf00      	nop
 801c20e:	46bd      	mov	sp, r7
 801c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c214:	4770      	bx	lr
	...

0801c218 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801c218:	b580      	push	{r7, lr}
 801c21a:	b084      	sub	sp, #16
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	60f8      	str	r0, [r7, #12]
 801c220:	60b9      	str	r1, [r7, #8]
 801c222:	607a      	str	r2, [r7, #4]
 801c224:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 801c226:	69fb      	ldr	r3, [r7, #28]
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d105      	bne.n	801c238 <netif_add+0x20>
 801c22c:	4b1f      	ldr	r3, [pc, #124]	; (801c2ac <netif_add+0x94>)
 801c22e:	22fb      	movs	r2, #251	; 0xfb
 801c230:	491f      	ldr	r1, [pc, #124]	; (801c2b0 <netif_add+0x98>)
 801c232:	4820      	ldr	r0, [pc, #128]	; (801c2b4 <netif_add+0x9c>)
 801c234:	f009 fc74 	bl	8025b20 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	2200      	movs	r2, #0
 801c23c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801c23e:	68fb      	ldr	r3, [r7, #12]
 801c240:	2200      	movs	r2, #0
 801c242:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801c244:	68fb      	ldr	r3, [r7, #12]
 801c246:	2200      	movs	r2, #0
 801c248:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 801c24a:	68fb      	ldr	r3, [r7, #12]
 801c24c:	2200      	movs	r2, #0
 801c24e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 801c252:	68fb      	ldr	r3, [r7, #12]
 801c254:	2203      	movs	r2, #3
 801c256:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	69ba      	ldr	r2, [r7, #24]
 801c25e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 801c260:	4b15      	ldr	r3, [pc, #84]	; (801c2b8 <netif_add+0xa0>)
 801c262:	781b      	ldrb	r3, [r3, #0]
 801c264:	1c5a      	adds	r2, r3, #1
 801c266:	b2d1      	uxtb	r1, r2
 801c268:	4a13      	ldr	r2, [pc, #76]	; (801c2b8 <netif_add+0xa0>)
 801c26a:	7011      	strb	r1, [r2, #0]
 801c26c:	68fa      	ldr	r2, [r7, #12]
 801c26e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	6a3a      	ldr	r2, [r7, #32]
 801c276:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801c278:	683b      	ldr	r3, [r7, #0]
 801c27a:	687a      	ldr	r2, [r7, #4]
 801c27c:	68b9      	ldr	r1, [r7, #8]
 801c27e:	68f8      	ldr	r0, [r7, #12]
 801c280:	f000 f81e 	bl	801c2c0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801c284:	69fb      	ldr	r3, [r7, #28]
 801c286:	68f8      	ldr	r0, [r7, #12]
 801c288:	4798      	blx	r3
 801c28a:	4603      	mov	r3, r0
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d001      	beq.n	801c294 <netif_add+0x7c>
    return NULL;
 801c290:	2300      	movs	r3, #0
 801c292:	e007      	b.n	801c2a4 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801c294:	4b09      	ldr	r3, [pc, #36]	; (801c2bc <netif_add+0xa4>)
 801c296:	681a      	ldr	r2, [r3, #0]
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801c29c:	4a07      	ldr	r2, [pc, #28]	; (801c2bc <netif_add+0xa4>)
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 801c2a2:	68fb      	ldr	r3, [r7, #12]
}
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	3710      	adds	r7, #16
 801c2a8:	46bd      	mov	sp, r7
 801c2aa:	bd80      	pop	{r7, pc}
 801c2ac:	08027a30 	.word	0x08027a30
 801c2b0:	08027a64 	.word	0x08027a64
 801c2b4:	08027a7c 	.word	0x08027a7c
 801c2b8:	200040f0 	.word	0x200040f0
 801c2bc:	20008c20 	.word	0x20008c20

0801c2c0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 801c2c0:	b580      	push	{r7, lr}
 801c2c2:	b084      	sub	sp, #16
 801c2c4:	af00      	add	r7, sp, #0
 801c2c6:	60f8      	str	r0, [r7, #12]
 801c2c8:	60b9      	str	r1, [r7, #8]
 801c2ca:	607a      	str	r2, [r7, #4]
 801c2cc:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 801c2ce:	68bb      	ldr	r3, [r7, #8]
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	d003      	beq.n	801c2dc <netif_set_addr+0x1c>
 801c2d4:	68bb      	ldr	r3, [r7, #8]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d10c      	bne.n	801c2f6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 801c2dc:	68b9      	ldr	r1, [r7, #8]
 801c2de:	68f8      	ldr	r0, [r7, #12]
 801c2e0:	f000 f81a 	bl	801c318 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 801c2e4:	6879      	ldr	r1, [r7, #4]
 801c2e6:	68f8      	ldr	r0, [r7, #12]
 801c2e8:	f000 f862 	bl	801c3b0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 801c2ec:	6839      	ldr	r1, [r7, #0]
 801c2ee:	68f8      	ldr	r0, [r7, #12]
 801c2f0:	f000 f84a 	bl	801c388 <netif_set_gw>
 801c2f4:	e00b      	b.n	801c30e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 801c2f6:	6879      	ldr	r1, [r7, #4]
 801c2f8:	68f8      	ldr	r0, [r7, #12]
 801c2fa:	f000 f859 	bl	801c3b0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 801c2fe:	6839      	ldr	r1, [r7, #0]
 801c300:	68f8      	ldr	r0, [r7, #12]
 801c302:	f000 f841 	bl	801c388 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 801c306:	68b9      	ldr	r1, [r7, #8]
 801c308:	68f8      	ldr	r0, [r7, #12]
 801c30a:	f000 f805 	bl	801c318 <netif_set_ipaddr>
  }
}
 801c30e:	bf00      	nop
 801c310:	3710      	adds	r7, #16
 801c312:	46bd      	mov	sp, r7
 801c314:	bd80      	pop	{r7, pc}
	...

0801c318 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c318:	b580      	push	{r7, lr}
 801c31a:	b084      	sub	sp, #16
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	6078      	str	r0, [r7, #4]
 801c320:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 801c322:	683b      	ldr	r3, [r7, #0]
 801c324:	2b00      	cmp	r3, #0
 801c326:	d003      	beq.n	801c330 <netif_set_ipaddr+0x18>
 801c328:	683b      	ldr	r3, [r7, #0]
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	60fb      	str	r3, [r7, #12]
 801c32e:	e002      	b.n	801c336 <netif_set_ipaddr+0x1e>
 801c330:	4b14      	ldr	r3, [pc, #80]	; (801c384 <netif_set_ipaddr+0x6c>)
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 801c336:	68fa      	ldr	r2, [r7, #12]
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	3304      	adds	r3, #4
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	429a      	cmp	r2, r3
 801c340:	d01c      	beq.n	801c37c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	3304      	adds	r3, #4
 801c346:	f107 020c 	add.w	r2, r7, #12
 801c34a:	4611      	mov	r1, r2
 801c34c:	4618      	mov	r0, r3
 801c34e:	f002 fb17 	bl	801e980 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	3304      	adds	r3, #4
 801c356:	f107 020c 	add.w	r2, r7, #12
 801c35a:	4611      	mov	r1, r2
 801c35c:	4618      	mov	r0, r3
 801c35e:	f006 fce7 	bl	8022d30 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801c362:	683b      	ldr	r3, [r7, #0]
 801c364:	2b00      	cmp	r3, #0
 801c366:	d002      	beq.n	801c36e <netif_set_ipaddr+0x56>
 801c368:	683b      	ldr	r3, [r7, #0]
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	e000      	b.n	801c370 <netif_set_ipaddr+0x58>
 801c36e:	2300      	movs	r3, #0
 801c370:	687a      	ldr	r2, [r7, #4]
 801c372:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801c374:	2101      	movs	r1, #1
 801c376:	6878      	ldr	r0, [r7, #4]
 801c378:	f000 f861 	bl	801c43e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 801c37c:	bf00      	nop
 801c37e:	3710      	adds	r7, #16
 801c380:	46bd      	mov	sp, r7
 801c382:	bd80      	pop	{r7, pc}
 801c384:	0802b34c 	.word	0x0802b34c

0801c388 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 801c388:	b480      	push	{r7}
 801c38a:	b083      	sub	sp, #12
 801c38c:	af00      	add	r7, sp, #0
 801c38e:	6078      	str	r0, [r7, #4]
 801c390:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801c392:	683b      	ldr	r3, [r7, #0]
 801c394:	2b00      	cmp	r3, #0
 801c396:	d002      	beq.n	801c39e <netif_set_gw+0x16>
 801c398:	683b      	ldr	r3, [r7, #0]
 801c39a:	681b      	ldr	r3, [r3, #0]
 801c39c:	e000      	b.n	801c3a0 <netif_set_gw+0x18>
 801c39e:	2300      	movs	r3, #0
 801c3a0:	687a      	ldr	r2, [r7, #4]
 801c3a2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 801c3a4:	bf00      	nop
 801c3a6:	370c      	adds	r7, #12
 801c3a8:	46bd      	mov	sp, r7
 801c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ae:	4770      	bx	lr

0801c3b0 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 801c3b0:	b480      	push	{r7}
 801c3b2:	b083      	sub	sp, #12
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	6078      	str	r0, [r7, #4]
 801c3b8:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801c3ba:	683b      	ldr	r3, [r7, #0]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d002      	beq.n	801c3c6 <netif_set_netmask+0x16>
 801c3c0:	683b      	ldr	r3, [r7, #0]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	e000      	b.n	801c3c8 <netif_set_netmask+0x18>
 801c3c6:	2300      	movs	r3, #0
 801c3c8:	687a      	ldr	r2, [r7, #4]
 801c3ca:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 801c3cc:	bf00      	nop
 801c3ce:	370c      	adds	r7, #12
 801c3d0:	46bd      	mov	sp, r7
 801c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3d6:	4770      	bx	lr

0801c3d8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801c3d8:	b480      	push	{r7}
 801c3da:	b083      	sub	sp, #12
 801c3dc:	af00      	add	r7, sp, #0
 801c3de:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801c3e0:	4a04      	ldr	r2, [pc, #16]	; (801c3f4 <netif_set_default+0x1c>)
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801c3e6:	bf00      	nop
 801c3e8:	370c      	adds	r7, #12
 801c3ea:	46bd      	mov	sp, r7
 801c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3f0:	4770      	bx	lr
 801c3f2:	bf00      	nop
 801c3f4:	20008c24 	.word	0x20008c24

0801c3f8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801c3f8:	b580      	push	{r7, lr}
 801c3fa:	b082      	sub	sp, #8
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c406:	f003 0301 	and.w	r3, r3, #1
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d113      	bne.n	801c436 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c414:	f043 0301 	orr.w	r3, r3, #1
 801c418:	b2da      	uxtb	r2, r3
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c426:	f003 0304 	and.w	r3, r3, #4
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d003      	beq.n	801c436 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 801c42e:	2103      	movs	r1, #3
 801c430:	6878      	ldr	r0, [r7, #4]
 801c432:	f000 f804 	bl	801c43e <netif_issue_reports>
    }
  }
}
 801c436:	bf00      	nop
 801c438:	3708      	adds	r7, #8
 801c43a:	46bd      	mov	sp, r7
 801c43c:	bd80      	pop	{r7, pc}

0801c43e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 801c43e:	b580      	push	{r7, lr}
 801c440:	b082      	sub	sp, #8
 801c442:	af00      	add	r7, sp, #0
 801c444:	6078      	str	r0, [r7, #4]
 801c446:	460b      	mov	r3, r1
 801c448:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801c44a:	78fb      	ldrb	r3, [r7, #3]
 801c44c:	f003 0301 	and.w	r3, r3, #1
 801c450:	2b00      	cmp	r3, #0
 801c452:	d011      	beq.n	801c478 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	3304      	adds	r3, #4
 801c458:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	d00c      	beq.n	801c478 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c464:	f003 0308 	and.w	r3, r3, #8
 801c468:	2b00      	cmp	r3, #0
 801c46a:	d005      	beq.n	801c478 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	3304      	adds	r3, #4
 801c470:	4619      	mov	r1, r3
 801c472:	6878      	ldr	r0, [r7, #4]
 801c474:	f7fd feaa 	bl	801a1cc <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 801c478:	bf00      	nop
 801c47a:	3708      	adds	r7, #8
 801c47c:	46bd      	mov	sp, r7
 801c47e:	bd80      	pop	{r7, pc}

0801c480 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801c480:	b580      	push	{r7, lr}
 801c482:	b082      	sub	sp, #8
 801c484:	af00      	add	r7, sp, #0
 801c486:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c48e:	f003 0301 	and.w	r3, r3, #1
 801c492:	2b00      	cmp	r3, #0
 801c494:	d012      	beq.n	801c4bc <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c49c:	f023 0301 	bic.w	r3, r3, #1
 801c4a0:	b2da      	uxtb	r2, r3
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c4ae:	f003 0308 	and.w	r3, r3, #8
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d002      	beq.n	801c4bc <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 801c4b6:	6878      	ldr	r0, [r7, #4]
 801c4b8:	f7fd fa4e 	bl	8019958 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801c4bc:	bf00      	nop
 801c4be:	3708      	adds	r7, #8
 801c4c0:	46bd      	mov	sp, r7
 801c4c2:	bd80      	pop	{r7, pc}

0801c4c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b082      	sub	sp, #8
 801c4c8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801c4ca:	f006 ff05 	bl	80232d8 <sys_arch_protect>
 801c4ce:	6038      	str	r0, [r7, #0]
 801c4d0:	4b0f      	ldr	r3, [pc, #60]	; (801c510 <pbuf_free_ooseq+0x4c>)
 801c4d2:	2200      	movs	r2, #0
 801c4d4:	701a      	strb	r2, [r3, #0]
 801c4d6:	6838      	ldr	r0, [r7, #0]
 801c4d8:	f006 ff0c 	bl	80232f4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801c4dc:	4b0d      	ldr	r3, [pc, #52]	; (801c514 <pbuf_free_ooseq+0x50>)
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	607b      	str	r3, [r7, #4]
 801c4e2:	e00f      	b.n	801c504 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d008      	beq.n	801c4fe <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4f0:	4618      	mov	r0, r3
 801c4f2:	f001 fec0 	bl	801e276 <tcp_segs_free>
      pcb->ooseq = NULL;
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	2200      	movs	r2, #0
 801c4fa:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 801c4fc:	e005      	b.n	801c50a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	68db      	ldr	r3, [r3, #12]
 801c502:	607b      	str	r3, [r7, #4]
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	2b00      	cmp	r3, #0
 801c508:	d1ec      	bne.n	801c4e4 <pbuf_free_ooseq+0x20>
    }
  }
}
 801c50a:	3708      	adds	r7, #8
 801c50c:	46bd      	mov	sp, r7
 801c50e:	bd80      	pop	{r7, pc}
 801c510:	20008c28 	.word	0x20008c28
 801c514:	20008c30 	.word	0x20008c30

0801c518 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801c518:	b580      	push	{r7, lr}
 801c51a:	b082      	sub	sp, #8
 801c51c:	af00      	add	r7, sp, #0
 801c51e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801c520:	f7ff ffd0 	bl	801c4c4 <pbuf_free_ooseq>
}
 801c524:	bf00      	nop
 801c526:	3708      	adds	r7, #8
 801c528:	46bd      	mov	sp, r7
 801c52a:	bd80      	pop	{r7, pc}

0801c52c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801c52c:	b580      	push	{r7, lr}
 801c52e:	b082      	sub	sp, #8
 801c530:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801c532:	f006 fed1 	bl	80232d8 <sys_arch_protect>
 801c536:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801c538:	4b10      	ldr	r3, [pc, #64]	; (801c57c <pbuf_pool_is_empty+0x50>)
 801c53a:	781b      	ldrb	r3, [r3, #0]
 801c53c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801c53e:	4b0f      	ldr	r3, [pc, #60]	; (801c57c <pbuf_pool_is_empty+0x50>)
 801c540:	2201      	movs	r2, #1
 801c542:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801c544:	6878      	ldr	r0, [r7, #4]
 801c546:	f006 fed5 	bl	80232f4 <sys_arch_unprotect>

  if (!queued) {
 801c54a:	78fb      	ldrb	r3, [r7, #3]
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d110      	bne.n	801c572 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801c550:	2200      	movs	r2, #0
 801c552:	2100      	movs	r1, #0
 801c554:	480a      	ldr	r0, [pc, #40]	; (801c580 <pbuf_pool_is_empty+0x54>)
 801c556:	f7fc fe05 	bl	8019164 <tcpip_callback_with_block>
 801c55a:	4603      	mov	r3, r0
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d008      	beq.n	801c572 <pbuf_pool_is_empty+0x46>
 801c560:	f006 feba 	bl	80232d8 <sys_arch_protect>
 801c564:	6078      	str	r0, [r7, #4]
 801c566:	4b05      	ldr	r3, [pc, #20]	; (801c57c <pbuf_pool_is_empty+0x50>)
 801c568:	2200      	movs	r2, #0
 801c56a:	701a      	strb	r2, [r3, #0]
 801c56c:	6878      	ldr	r0, [r7, #4]
 801c56e:	f006 fec1 	bl	80232f4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801c572:	bf00      	nop
 801c574:	3708      	adds	r7, #8
 801c576:	46bd      	mov	sp, r7
 801c578:	bd80      	pop	{r7, pc}
 801c57a:	bf00      	nop
 801c57c:	20008c28 	.word	0x20008c28
 801c580:	0801c519 	.word	0x0801c519

0801c584 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801c584:	b580      	push	{r7, lr}
 801c586:	b088      	sub	sp, #32
 801c588:	af00      	add	r7, sp, #0
 801c58a:	4603      	mov	r3, r0
 801c58c:	71fb      	strb	r3, [r7, #7]
 801c58e:	460b      	mov	r3, r1
 801c590:	80bb      	strh	r3, [r7, #4]
 801c592:	4613      	mov	r3, r2
 801c594:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 801c596:	79fb      	ldrb	r3, [r7, #7]
 801c598:	2b04      	cmp	r3, #4
 801c59a:	d81c      	bhi.n	801c5d6 <pbuf_alloc+0x52>
 801c59c:	a201      	add	r2, pc, #4	; (adr r2, 801c5a4 <pbuf_alloc+0x20>)
 801c59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c5a2:	bf00      	nop
 801c5a4:	0801c5b9 	.word	0x0801c5b9
 801c5a8:	0801c5bf 	.word	0x0801c5bf
 801c5ac:	0801c5c5 	.word	0x0801c5c5
 801c5b0:	0801c5cb 	.word	0x0801c5cb
 801c5b4:	0801c5d1 	.word	0x0801c5d1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801c5b8:	2336      	movs	r3, #54	; 0x36
 801c5ba:	82fb      	strh	r3, [r7, #22]
    break;
 801c5bc:	e014      	b.n	801c5e8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801c5be:	2322      	movs	r3, #34	; 0x22
 801c5c0:	82fb      	strh	r3, [r7, #22]
    break;
 801c5c2:	e011      	b.n	801c5e8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801c5c4:	230e      	movs	r3, #14
 801c5c6:	82fb      	strh	r3, [r7, #22]
    break;
 801c5c8:	e00e      	b.n	801c5e8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801c5ca:	2300      	movs	r3, #0
 801c5cc:	82fb      	strh	r3, [r7, #22]
    break;
 801c5ce:	e00b      	b.n	801c5e8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	82fb      	strh	r3, [r7, #22]
    break;
 801c5d4:	e008      	b.n	801c5e8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 801c5d6:	4ba5      	ldr	r3, [pc, #660]	; (801c86c <pbuf_alloc+0x2e8>)
 801c5d8:	f44f 728b 	mov.w	r2, #278	; 0x116
 801c5dc:	49a4      	ldr	r1, [pc, #656]	; (801c870 <pbuf_alloc+0x2ec>)
 801c5de:	48a5      	ldr	r0, [pc, #660]	; (801c874 <pbuf_alloc+0x2f0>)
 801c5e0:	f009 fa9e 	bl	8025b20 <iprintf>
    return NULL;
 801c5e4:	2300      	movs	r3, #0
 801c5e6:	e15d      	b.n	801c8a4 <pbuf_alloc+0x320>
  }

  switch (type) {
 801c5e8:	79bb      	ldrb	r3, [r7, #6]
 801c5ea:	2b03      	cmp	r3, #3
 801c5ec:	f200 8134 	bhi.w	801c858 <pbuf_alloc+0x2d4>
 801c5f0:	a201      	add	r2, pc, #4	; (adr r2, 801c5f8 <pbuf_alloc+0x74>)
 801c5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c5f6:	bf00      	nop
 801c5f8:	0801c799 	.word	0x0801c799
 801c5fc:	0801c825 	.word	0x0801c825
 801c600:	0801c825 	.word	0x0801c825
 801c604:	0801c609 	.word	0x0801c609
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c608:	200c      	movs	r0, #12
 801c60a:	f7ff fd81 	bl	801c110 <memp_malloc>
 801c60e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 801c610:	69fb      	ldr	r3, [r7, #28]
 801c612:	2b00      	cmp	r3, #0
 801c614:	d103      	bne.n	801c61e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 801c616:	f7ff ff89 	bl	801c52c <pbuf_pool_is_empty>
      return NULL;
 801c61a:	2300      	movs	r3, #0
 801c61c:	e142      	b.n	801c8a4 <pbuf_alloc+0x320>
    }
    p->type = type;
 801c61e:	69fb      	ldr	r3, [r7, #28]
 801c620:	79ba      	ldrb	r2, [r7, #6]
 801c622:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 801c624:	69fb      	ldr	r3, [r7, #28]
 801c626:	2200      	movs	r2, #0
 801c628:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 801c62a:	8afb      	ldrh	r3, [r7, #22]
 801c62c:	3310      	adds	r3, #16
 801c62e:	69fa      	ldr	r2, [r7, #28]
 801c630:	4413      	add	r3, r2
 801c632:	3303      	adds	r3, #3
 801c634:	f023 0303 	bic.w	r3, r3, #3
 801c638:	461a      	mov	r2, r3
 801c63a:	69fb      	ldr	r3, [r7, #28]
 801c63c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 801c63e:	69fb      	ldr	r3, [r7, #28]
 801c640:	685b      	ldr	r3, [r3, #4]
 801c642:	f003 0303 	and.w	r3, r3, #3
 801c646:	2b00      	cmp	r3, #0
 801c648:	d006      	beq.n	801c658 <pbuf_alloc+0xd4>
 801c64a:	4b88      	ldr	r3, [pc, #544]	; (801c86c <pbuf_alloc+0x2e8>)
 801c64c:	f240 1229 	movw	r2, #297	; 0x129
 801c650:	4989      	ldr	r1, [pc, #548]	; (801c878 <pbuf_alloc+0x2f4>)
 801c652:	4888      	ldr	r0, [pc, #544]	; (801c874 <pbuf_alloc+0x2f0>)
 801c654:	f009 fa64 	bl	8025b20 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 801c658:	69fb      	ldr	r3, [r7, #28]
 801c65a:	88ba      	ldrh	r2, [r7, #4]
 801c65c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 801c65e:	8afb      	ldrh	r3, [r7, #22]
 801c660:	3303      	adds	r3, #3
 801c662:	f023 0303 	bic.w	r3, r3, #3
 801c666:	f5c3 7242 	rsb	r2, r3, #776	; 0x308
 801c66a:	88bb      	ldrh	r3, [r7, #4]
 801c66c:	4293      	cmp	r3, r2
 801c66e:	bf28      	it	cs
 801c670:	4613      	movcs	r3, r2
 801c672:	b29a      	uxth	r2, r3
 801c674:	69fb      	ldr	r3, [r7, #28]
 801c676:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801c678:	69fb      	ldr	r3, [r7, #28]
 801c67a:	685b      	ldr	r3, [r3, #4]
 801c67c:	69fa      	ldr	r2, [r7, #28]
 801c67e:	8952      	ldrh	r2, [r2, #10]
 801c680:	441a      	add	r2, r3
 801c682:	69fb      	ldr	r3, [r7, #28]
 801c684:	f503 7346 	add.w	r3, r3, #792	; 0x318
 801c688:	429a      	cmp	r2, r3
 801c68a:	d906      	bls.n	801c69a <pbuf_alloc+0x116>
 801c68c:	4b77      	ldr	r3, [pc, #476]	; (801c86c <pbuf_alloc+0x2e8>)
 801c68e:	f44f 7298 	mov.w	r2, #304	; 0x130
 801c692:	497a      	ldr	r1, [pc, #488]	; (801c87c <pbuf_alloc+0x2f8>)
 801c694:	4877      	ldr	r0, [pc, #476]	; (801c874 <pbuf_alloc+0x2f0>)
 801c696:	f009 fa43 	bl	8025b20 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801c69a:	8afb      	ldrh	r3, [r7, #22]
 801c69c:	3303      	adds	r3, #3
 801c69e:	f023 0303 	bic.w	r3, r3, #3
 801c6a2:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 801c6a6:	d106      	bne.n	801c6b6 <pbuf_alloc+0x132>
 801c6a8:	4b70      	ldr	r3, [pc, #448]	; (801c86c <pbuf_alloc+0x2e8>)
 801c6aa:	f44f 7299 	mov.w	r2, #306	; 0x132
 801c6ae:	4974      	ldr	r1, [pc, #464]	; (801c880 <pbuf_alloc+0x2fc>)
 801c6b0:	4870      	ldr	r0, [pc, #448]	; (801c874 <pbuf_alloc+0x2f0>)
 801c6b2:	f009 fa35 	bl	8025b20 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 801c6b6:	69fb      	ldr	r3, [r7, #28]
 801c6b8:	2201      	movs	r2, #1
 801c6ba:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 801c6bc:	69fb      	ldr	r3, [r7, #28]
 801c6be:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 801c6c0:	88bb      	ldrh	r3, [r7, #4]
 801c6c2:	69fa      	ldr	r2, [r7, #28]
 801c6c4:	8952      	ldrh	r2, [r2, #10]
 801c6c6:	1a9b      	subs	r3, r3, r2
 801c6c8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 801c6ca:	e061      	b.n	801c790 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c6cc:	200c      	movs	r0, #12
 801c6ce:	f7ff fd1f 	bl	801c110 <memp_malloc>
 801c6d2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d106      	bne.n	801c6e8 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 801c6da:	f7ff ff27 	bl	801c52c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 801c6de:	69f8      	ldr	r0, [r7, #28]
 801c6e0:	f000 fac2 	bl	801cc68 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	e0dd      	b.n	801c8a4 <pbuf_alloc+0x320>
      }
      q->type = type;
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	79ba      	ldrb	r2, [r7, #6]
 801c6ec:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	2200      	movs	r2, #0
 801c6f2:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	2200      	movs	r2, #0
 801c6f8:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 801c6fa:	69bb      	ldr	r3, [r7, #24]
 801c6fc:	68fa      	ldr	r2, [r7, #12]
 801c6fe:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 801c700:	693b      	ldr	r3, [r7, #16]
 801c702:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c706:	4293      	cmp	r3, r2
 801c708:	dd06      	ble.n	801c718 <pbuf_alloc+0x194>
 801c70a:	4b58      	ldr	r3, [pc, #352]	; (801c86c <pbuf_alloc+0x2e8>)
 801c70c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801c710:	495c      	ldr	r1, [pc, #368]	; (801c884 <pbuf_alloc+0x300>)
 801c712:	4858      	ldr	r0, [pc, #352]	; (801c874 <pbuf_alloc+0x2f0>)
 801c714:	f009 fa04 	bl	8025b20 <iprintf>
      q->tot_len = (u16_t)rem_len;
 801c718:	693b      	ldr	r3, [r7, #16]
 801c71a:	b29a      	uxth	r2, r3
 801c71c:	68fb      	ldr	r3, [r7, #12]
 801c71e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 801c720:	693b      	ldr	r3, [r7, #16]
 801c722:	b29b      	uxth	r3, r3
 801c724:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 801c728:	bf28      	it	cs
 801c72a:	f44f 7342 	movcs.w	r3, #776	; 0x308
 801c72e:	b29a      	uxth	r2, r3
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 801c734:	68fb      	ldr	r3, [r7, #12]
 801c736:	f103 0210 	add.w	r2, r3, #16
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801c73e:	68fb      	ldr	r3, [r7, #12]
 801c740:	685b      	ldr	r3, [r3, #4]
 801c742:	f003 0303 	and.w	r3, r3, #3
 801c746:	2b00      	cmp	r3, #0
 801c748:	d006      	beq.n	801c758 <pbuf_alloc+0x1d4>
 801c74a:	4b48      	ldr	r3, [pc, #288]	; (801c86c <pbuf_alloc+0x2e8>)
 801c74c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 801c750:	494d      	ldr	r1, [pc, #308]	; (801c888 <pbuf_alloc+0x304>)
 801c752:	4848      	ldr	r0, [pc, #288]	; (801c874 <pbuf_alloc+0x2f0>)
 801c754:	f009 f9e4 	bl	8025b20 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801c758:	69fb      	ldr	r3, [r7, #28]
 801c75a:	685b      	ldr	r3, [r3, #4]
 801c75c:	69fa      	ldr	r2, [r7, #28]
 801c75e:	8952      	ldrh	r2, [r2, #10]
 801c760:	441a      	add	r2, r3
 801c762:	69fb      	ldr	r3, [r7, #28]
 801c764:	f503 7346 	add.w	r3, r3, #792	; 0x318
 801c768:	429a      	cmp	r2, r3
 801c76a:	d906      	bls.n	801c77a <pbuf_alloc+0x1f6>
 801c76c:	4b3f      	ldr	r3, [pc, #252]	; (801c86c <pbuf_alloc+0x2e8>)
 801c76e:	f240 1255 	movw	r2, #341	; 0x155
 801c772:	4942      	ldr	r1, [pc, #264]	; (801c87c <pbuf_alloc+0x2f8>)
 801c774:	483f      	ldr	r0, [pc, #252]	; (801c874 <pbuf_alloc+0x2f0>)
 801c776:	f009 f9d3 	bl	8025b20 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	2201      	movs	r2, #1
 801c77e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 801c780:	68fb      	ldr	r3, [r7, #12]
 801c782:	895b      	ldrh	r3, [r3, #10]
 801c784:	461a      	mov	r2, r3
 801c786:	693b      	ldr	r3, [r7, #16]
 801c788:	1a9b      	subs	r3, r3, r2
 801c78a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 801c790:	693b      	ldr	r3, [r7, #16]
 801c792:	2b00      	cmp	r3, #0
 801c794:	dc9a      	bgt.n	801c6cc <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 801c796:	e07e      	b.n	801c896 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 801c798:	8afb      	ldrh	r3, [r7, #22]
 801c79a:	3313      	adds	r3, #19
 801c79c:	b29b      	uxth	r3, r3
 801c79e:	f023 0303 	bic.w	r3, r3, #3
 801c7a2:	b29a      	uxth	r2, r3
 801c7a4:	88bb      	ldrh	r3, [r7, #4]
 801c7a6:	3303      	adds	r3, #3
 801c7a8:	b29b      	uxth	r3, r3
 801c7aa:	f023 0303 	bic.w	r3, r3, #3
 801c7ae:	b29b      	uxth	r3, r3
 801c7b0:	4413      	add	r3, r2
 801c7b2:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 801c7b4:	897a      	ldrh	r2, [r7, #10]
 801c7b6:	88bb      	ldrh	r3, [r7, #4]
 801c7b8:	3303      	adds	r3, #3
 801c7ba:	f023 0303 	bic.w	r3, r3, #3
 801c7be:	429a      	cmp	r2, r3
 801c7c0:	d201      	bcs.n	801c7c6 <pbuf_alloc+0x242>
        return NULL;
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	e06e      	b.n	801c8a4 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 801c7c6:	897b      	ldrh	r3, [r7, #10]
 801c7c8:	4618      	mov	r0, r3
 801c7ca:	f7ff fb31 	bl	801be30 <mem_malloc>
 801c7ce:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 801c7d0:	69fb      	ldr	r3, [r7, #28]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d101      	bne.n	801c7da <pbuf_alloc+0x256>
      return NULL;
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	e064      	b.n	801c8a4 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 801c7da:	8afb      	ldrh	r3, [r7, #22]
 801c7dc:	3310      	adds	r3, #16
 801c7de:	69fa      	ldr	r2, [r7, #28]
 801c7e0:	4413      	add	r3, r2
 801c7e2:	3303      	adds	r3, #3
 801c7e4:	f023 0303 	bic.w	r3, r3, #3
 801c7e8:	461a      	mov	r2, r3
 801c7ea:	69fb      	ldr	r3, [r7, #28]
 801c7ec:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801c7ee:	69fb      	ldr	r3, [r7, #28]
 801c7f0:	88ba      	ldrh	r2, [r7, #4]
 801c7f2:	811a      	strh	r2, [r3, #8]
 801c7f4:	69fb      	ldr	r3, [r7, #28]
 801c7f6:	891a      	ldrh	r2, [r3, #8]
 801c7f8:	69fb      	ldr	r3, [r7, #28]
 801c7fa:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801c7fc:	69fb      	ldr	r3, [r7, #28]
 801c7fe:	2200      	movs	r2, #0
 801c800:	601a      	str	r2, [r3, #0]
    p->type = type;
 801c802:	69fb      	ldr	r3, [r7, #28]
 801c804:	79ba      	ldrb	r2, [r7, #6]
 801c806:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801c808:	69fb      	ldr	r3, [r7, #28]
 801c80a:	685b      	ldr	r3, [r3, #4]
 801c80c:	f003 0303 	and.w	r3, r3, #3
 801c810:	2b00      	cmp	r3, #0
 801c812:	d03f      	beq.n	801c894 <pbuf_alloc+0x310>
 801c814:	4b15      	ldr	r3, [pc, #84]	; (801c86c <pbuf_alloc+0x2e8>)
 801c816:	f240 1277 	movw	r2, #375	; 0x177
 801c81a:	491c      	ldr	r1, [pc, #112]	; (801c88c <pbuf_alloc+0x308>)
 801c81c:	4815      	ldr	r0, [pc, #84]	; (801c874 <pbuf_alloc+0x2f0>)
 801c81e:	f009 f97f 	bl	8025b20 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 801c822:	e037      	b.n	801c894 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801c824:	200b      	movs	r0, #11
 801c826:	f7ff fc73 	bl	801c110 <memp_malloc>
 801c82a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 801c82c:	69fb      	ldr	r3, [r7, #28]
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d101      	bne.n	801c836 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 801c832:	2300      	movs	r3, #0
 801c834:	e036      	b.n	801c8a4 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 801c836:	69fb      	ldr	r3, [r7, #28]
 801c838:	2200      	movs	r2, #0
 801c83a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801c83c:	69fb      	ldr	r3, [r7, #28]
 801c83e:	88ba      	ldrh	r2, [r7, #4]
 801c840:	811a      	strh	r2, [r3, #8]
 801c842:	69fb      	ldr	r3, [r7, #28]
 801c844:	891a      	ldrh	r2, [r3, #8]
 801c846:	69fb      	ldr	r3, [r7, #28]
 801c848:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801c84a:	69fb      	ldr	r3, [r7, #28]
 801c84c:	2200      	movs	r2, #0
 801c84e:	601a      	str	r2, [r3, #0]
    p->type = type;
 801c850:	69fb      	ldr	r3, [r7, #28]
 801c852:	79ba      	ldrb	r2, [r7, #6]
 801c854:	731a      	strb	r2, [r3, #12]
    break;
 801c856:	e01e      	b.n	801c896 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801c858:	4b04      	ldr	r3, [pc, #16]	; (801c86c <pbuf_alloc+0x2e8>)
 801c85a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 801c85e:	490c      	ldr	r1, [pc, #48]	; (801c890 <pbuf_alloc+0x30c>)
 801c860:	4804      	ldr	r0, [pc, #16]	; (801c874 <pbuf_alloc+0x2f0>)
 801c862:	f009 f95d 	bl	8025b20 <iprintf>
    return NULL;
 801c866:	2300      	movs	r3, #0
 801c868:	e01c      	b.n	801c8a4 <pbuf_alloc+0x320>
 801c86a:	bf00      	nop
 801c86c:	08027aa4 	.word	0x08027aa4
 801c870:	08027ad4 	.word	0x08027ad4
 801c874:	08027af0 	.word	0x08027af0
 801c878:	08027b18 	.word	0x08027b18
 801c87c:	08027b48 	.word	0x08027b48
 801c880:	08027b7c 	.word	0x08027b7c
 801c884:	08027bb0 	.word	0x08027bb0
 801c888:	08027bc4 	.word	0x08027bc4
 801c88c:	08027bf4 	.word	0x08027bf4
 801c890:	08027c20 	.word	0x08027c20
    break;
 801c894:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 801c896:	69fb      	ldr	r3, [r7, #28]
 801c898:	2201      	movs	r2, #1
 801c89a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 801c89c:	69fb      	ldr	r3, [r7, #28]
 801c89e:	2200      	movs	r2, #0
 801c8a0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801c8a2:	69fb      	ldr	r3, [r7, #28]
}
 801c8a4:	4618      	mov	r0, r3
 801c8a6:	3720      	adds	r7, #32
 801c8a8:	46bd      	mov	sp, r7
 801c8aa:	bd80      	pop	{r7, pc}

0801c8ac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801c8ac:	b580      	push	{r7, lr}
 801c8ae:	b084      	sub	sp, #16
 801c8b0:	af00      	add	r7, sp, #0
 801c8b2:	603b      	str	r3, [r7, #0]
 801c8b4:	4603      	mov	r3, r0
 801c8b6:	71fb      	strb	r3, [r7, #7]
 801c8b8:	460b      	mov	r3, r1
 801c8ba:	80bb      	strh	r3, [r7, #4]
 801c8bc:	4613      	mov	r3, r2
 801c8be:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 801c8c0:	79fb      	ldrb	r3, [r7, #7]
 801c8c2:	2b04      	cmp	r3, #4
 801c8c4:	d81b      	bhi.n	801c8fe <pbuf_alloced_custom+0x52>
 801c8c6:	a201      	add	r2, pc, #4	; (adr r2, 801c8cc <pbuf_alloced_custom+0x20>)
 801c8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c8cc:	0801c8e1 	.word	0x0801c8e1
 801c8d0:	0801c8e7 	.word	0x0801c8e7
 801c8d4:	0801c8ed 	.word	0x0801c8ed
 801c8d8:	0801c8f3 	.word	0x0801c8f3
 801c8dc:	0801c8f9 	.word	0x0801c8f9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801c8e0:	2336      	movs	r3, #54	; 0x36
 801c8e2:	81fb      	strh	r3, [r7, #14]
    break;
 801c8e4:	e014      	b.n	801c910 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801c8e6:	2322      	movs	r3, #34	; 0x22
 801c8e8:	81fb      	strh	r3, [r7, #14]
    break;
 801c8ea:	e011      	b.n	801c910 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801c8ec:	230e      	movs	r3, #14
 801c8ee:	81fb      	strh	r3, [r7, #14]
    break;
 801c8f0:	e00e      	b.n	801c910 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801c8f2:	2300      	movs	r3, #0
 801c8f4:	81fb      	strh	r3, [r7, #14]
    break;
 801c8f6:	e00b      	b.n	801c910 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	81fb      	strh	r3, [r7, #14]
    break;
 801c8fc:	e008      	b.n	801c910 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 801c8fe:	4b1d      	ldr	r3, [pc, #116]	; (801c974 <pbuf_alloced_custom+0xc8>)
 801c900:	f240 12c5 	movw	r2, #453	; 0x1c5
 801c904:	491c      	ldr	r1, [pc, #112]	; (801c978 <pbuf_alloced_custom+0xcc>)
 801c906:	481d      	ldr	r0, [pc, #116]	; (801c97c <pbuf_alloced_custom+0xd0>)
 801c908:	f009 f90a 	bl	8025b20 <iprintf>
    return NULL;
 801c90c:	2300      	movs	r3, #0
 801c90e:	e02d      	b.n	801c96c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c910:	89fb      	ldrh	r3, [r7, #14]
 801c912:	3303      	adds	r3, #3
 801c914:	f023 0203 	bic.w	r2, r3, #3
 801c918:	88bb      	ldrh	r3, [r7, #4]
 801c91a:	441a      	add	r2, r3
 801c91c:	8bbb      	ldrh	r3, [r7, #28]
 801c91e:	429a      	cmp	r2, r3
 801c920:	d901      	bls.n	801c926 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801c922:	2300      	movs	r3, #0
 801c924:	e022      	b.n	801c96c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 801c926:	683b      	ldr	r3, [r7, #0]
 801c928:	2200      	movs	r2, #0
 801c92a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 801c92c:	69bb      	ldr	r3, [r7, #24]
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d008      	beq.n	801c944 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801c932:	89fb      	ldrh	r3, [r7, #14]
 801c934:	3303      	adds	r3, #3
 801c936:	f023 0303 	bic.w	r3, r3, #3
 801c93a:	69ba      	ldr	r2, [r7, #24]
 801c93c:	441a      	add	r2, r3
 801c93e:	683b      	ldr	r3, [r7, #0]
 801c940:	605a      	str	r2, [r3, #4]
 801c942:	e002      	b.n	801c94a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 801c944:	683b      	ldr	r3, [r7, #0]
 801c946:	2200      	movs	r2, #0
 801c948:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 801c94a:	683b      	ldr	r3, [r7, #0]
 801c94c:	2202      	movs	r2, #2
 801c94e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 801c950:	683b      	ldr	r3, [r7, #0]
 801c952:	88ba      	ldrh	r2, [r7, #4]
 801c954:	811a      	strh	r2, [r3, #8]
 801c956:	683b      	ldr	r3, [r7, #0]
 801c958:	891a      	ldrh	r2, [r3, #8]
 801c95a:	683b      	ldr	r3, [r7, #0]
 801c95c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 801c95e:	683b      	ldr	r3, [r7, #0]
 801c960:	79ba      	ldrb	r2, [r7, #6]
 801c962:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 801c964:	683b      	ldr	r3, [r7, #0]
 801c966:	2201      	movs	r2, #1
 801c968:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 801c96a:	683b      	ldr	r3, [r7, #0]
}
 801c96c:	4618      	mov	r0, r3
 801c96e:	3710      	adds	r7, #16
 801c970:	46bd      	mov	sp, r7
 801c972:	bd80      	pop	{r7, pc}
 801c974:	08027aa4 	.word	0x08027aa4
 801c978:	08027c3c 	.word	0x08027c3c
 801c97c:	08027af0 	.word	0x08027af0

0801c980 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801c980:	b580      	push	{r7, lr}
 801c982:	b086      	sub	sp, #24
 801c984:	af00      	add	r7, sp, #0
 801c986:	6078      	str	r0, [r7, #4]
 801c988:	460b      	mov	r3, r1
 801c98a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d106      	bne.n	801c9a0 <pbuf_realloc+0x20>
 801c992:	4b4b      	ldr	r3, [pc, #300]	; (801cac0 <pbuf_realloc+0x140>)
 801c994:	f240 12f3 	movw	r2, #499	; 0x1f3
 801c998:	494a      	ldr	r1, [pc, #296]	; (801cac4 <pbuf_realloc+0x144>)
 801c99a:	484b      	ldr	r0, [pc, #300]	; (801cac8 <pbuf_realloc+0x148>)
 801c99c:	f009 f8c0 	bl	8025b20 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	7b1b      	ldrb	r3, [r3, #12]
 801c9a4:	2b03      	cmp	r3, #3
 801c9a6:	d012      	beq.n	801c9ce <pbuf_realloc+0x4e>
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	7b1b      	ldrb	r3, [r3, #12]
 801c9ac:	2b01      	cmp	r3, #1
 801c9ae:	d00e      	beq.n	801c9ce <pbuf_realloc+0x4e>
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	7b1b      	ldrb	r3, [r3, #12]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d00a      	beq.n	801c9ce <pbuf_realloc+0x4e>
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	7b1b      	ldrb	r3, [r3, #12]
 801c9bc:	2b02      	cmp	r3, #2
 801c9be:	d006      	beq.n	801c9ce <pbuf_realloc+0x4e>
 801c9c0:	4b3f      	ldr	r3, [pc, #252]	; (801cac0 <pbuf_realloc+0x140>)
 801c9c2:	f240 12f7 	movw	r2, #503	; 0x1f7
 801c9c6:	4941      	ldr	r1, [pc, #260]	; (801cacc <pbuf_realloc+0x14c>)
 801c9c8:	483f      	ldr	r0, [pc, #252]	; (801cac8 <pbuf_realloc+0x148>)
 801c9ca:	f009 f8a9 	bl	8025b20 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	891b      	ldrh	r3, [r3, #8]
 801c9d2:	887a      	ldrh	r2, [r7, #2]
 801c9d4:	429a      	cmp	r2, r3
 801c9d6:	d26f      	bcs.n	801cab8 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 801c9d8:	887b      	ldrh	r3, [r7, #2]
 801c9da:	687a      	ldr	r2, [r7, #4]
 801c9dc:	8912      	ldrh	r2, [r2, #8]
 801c9de:	1a9b      	subs	r3, r3, r2
 801c9e0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801c9e2:	887b      	ldrh	r3, [r7, #2]
 801c9e4:	827b      	strh	r3, [r7, #18]
  q = p;
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801c9ea:	e025      	b.n	801ca38 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 801c9ec:	697b      	ldr	r3, [r7, #20]
 801c9ee:	895b      	ldrh	r3, [r3, #10]
 801c9f0:	8a7a      	ldrh	r2, [r7, #18]
 801c9f2:	1ad3      	subs	r3, r2, r3
 801c9f4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 801c9f6:	68fb      	ldr	r3, [r7, #12]
 801c9f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c9fc:	4293      	cmp	r3, r2
 801c9fe:	dd06      	ble.n	801ca0e <pbuf_realloc+0x8e>
 801ca00:	4b2f      	ldr	r3, [pc, #188]	; (801cac0 <pbuf_realloc+0x140>)
 801ca02:	f240 220b 	movw	r2, #523	; 0x20b
 801ca06:	4932      	ldr	r1, [pc, #200]	; (801cad0 <pbuf_realloc+0x150>)
 801ca08:	482f      	ldr	r0, [pc, #188]	; (801cac8 <pbuf_realloc+0x148>)
 801ca0a:	f009 f889 	bl	8025b20 <iprintf>
    q->tot_len += (u16_t)grow;
 801ca0e:	697b      	ldr	r3, [r7, #20]
 801ca10:	891a      	ldrh	r2, [r3, #8]
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	b29b      	uxth	r3, r3
 801ca16:	4413      	add	r3, r2
 801ca18:	b29a      	uxth	r2, r3
 801ca1a:	697b      	ldr	r3, [r7, #20]
 801ca1c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801ca1e:	697b      	ldr	r3, [r7, #20]
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801ca24:	697b      	ldr	r3, [r7, #20]
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d106      	bne.n	801ca38 <pbuf_realloc+0xb8>
 801ca2a:	4b25      	ldr	r3, [pc, #148]	; (801cac0 <pbuf_realloc+0x140>)
 801ca2c:	f240 220f 	movw	r2, #527	; 0x20f
 801ca30:	4928      	ldr	r1, [pc, #160]	; (801cad4 <pbuf_realloc+0x154>)
 801ca32:	4825      	ldr	r0, [pc, #148]	; (801cac8 <pbuf_realloc+0x148>)
 801ca34:	f009 f874 	bl	8025b20 <iprintf>
  while (rem_len > q->len) {
 801ca38:	697b      	ldr	r3, [r7, #20]
 801ca3a:	895b      	ldrh	r3, [r3, #10]
 801ca3c:	8a7a      	ldrh	r2, [r7, #18]
 801ca3e:	429a      	cmp	r2, r3
 801ca40:	d8d4      	bhi.n	801c9ec <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 801ca42:	697b      	ldr	r3, [r7, #20]
 801ca44:	7b1b      	ldrb	r3, [r3, #12]
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d122      	bne.n	801ca90 <pbuf_realloc+0x110>
 801ca4a:	697b      	ldr	r3, [r7, #20]
 801ca4c:	895b      	ldrh	r3, [r3, #10]
 801ca4e:	8a7a      	ldrh	r2, [r7, #18]
 801ca50:	429a      	cmp	r2, r3
 801ca52:	d01d      	beq.n	801ca90 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801ca54:	697b      	ldr	r3, [r7, #20]
 801ca56:	7b5b      	ldrb	r3, [r3, #13]
 801ca58:	f003 0302 	and.w	r3, r3, #2
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d117      	bne.n	801ca90 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 801ca60:	697b      	ldr	r3, [r7, #20]
 801ca62:	685b      	ldr	r3, [r3, #4]
 801ca64:	461a      	mov	r2, r3
 801ca66:	697b      	ldr	r3, [r7, #20]
 801ca68:	1ad3      	subs	r3, r2, r3
 801ca6a:	b29a      	uxth	r2, r3
 801ca6c:	8a7b      	ldrh	r3, [r7, #18]
 801ca6e:	4413      	add	r3, r2
 801ca70:	b29b      	uxth	r3, r3
 801ca72:	4619      	mov	r1, r3
 801ca74:	6978      	ldr	r0, [r7, #20]
 801ca76:	f7ff f8f1 	bl	801bc5c <mem_trim>
 801ca7a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801ca7c:	697b      	ldr	r3, [r7, #20]
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d106      	bne.n	801ca90 <pbuf_realloc+0x110>
 801ca82:	4b0f      	ldr	r3, [pc, #60]	; (801cac0 <pbuf_realloc+0x140>)
 801ca84:	f240 221d 	movw	r2, #541	; 0x21d
 801ca88:	4913      	ldr	r1, [pc, #76]	; (801cad8 <pbuf_realloc+0x158>)
 801ca8a:	480f      	ldr	r0, [pc, #60]	; (801cac8 <pbuf_realloc+0x148>)
 801ca8c:	f009 f848 	bl	8025b20 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801ca90:	697b      	ldr	r3, [r7, #20]
 801ca92:	8a7a      	ldrh	r2, [r7, #18]
 801ca94:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801ca96:	697b      	ldr	r3, [r7, #20]
 801ca98:	895a      	ldrh	r2, [r3, #10]
 801ca9a:	697b      	ldr	r3, [r7, #20]
 801ca9c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801ca9e:	697b      	ldr	r3, [r7, #20]
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d004      	beq.n	801cab0 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801caa6:	697b      	ldr	r3, [r7, #20]
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	4618      	mov	r0, r3
 801caac:	f000 f8dc 	bl	801cc68 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801cab0:	697b      	ldr	r3, [r7, #20]
 801cab2:	2200      	movs	r2, #0
 801cab4:	601a      	str	r2, [r3, #0]
 801cab6:	e000      	b.n	801caba <pbuf_realloc+0x13a>
    return;
 801cab8:	bf00      	nop

}
 801caba:	3718      	adds	r7, #24
 801cabc:	46bd      	mov	sp, r7
 801cabe:	bd80      	pop	{r7, pc}
 801cac0:	08027aa4 	.word	0x08027aa4
 801cac4:	08027c60 	.word	0x08027c60
 801cac8:	08027af0 	.word	0x08027af0
 801cacc:	08027c78 	.word	0x08027c78
 801cad0:	08027c94 	.word	0x08027c94
 801cad4:	08027ca8 	.word	0x08027ca8
 801cad8:	08027cc0 	.word	0x08027cc0

0801cadc <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801cadc:	b580      	push	{r7, lr}
 801cade:	b084      	sub	sp, #16
 801cae0:	af00      	add	r7, sp, #0
 801cae2:	6078      	str	r0, [r7, #4]
 801cae4:	460b      	mov	r3, r1
 801cae6:	807b      	strh	r3, [r7, #2]
 801cae8:	4613      	mov	r3, r2
 801caea:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d106      	bne.n	801cb00 <pbuf_header_impl+0x24>
 801caf2:	4b46      	ldr	r3, [pc, #280]	; (801cc0c <pbuf_header_impl+0x130>)
 801caf4:	f240 223f 	movw	r2, #575	; 0x23f
 801caf8:	4945      	ldr	r1, [pc, #276]	; (801cc10 <pbuf_header_impl+0x134>)
 801cafa:	4846      	ldr	r0, [pc, #280]	; (801cc14 <pbuf_header_impl+0x138>)
 801cafc:	f009 f810 	bl	8025b20 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 801cb00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d002      	beq.n	801cb0e <pbuf_header_impl+0x32>
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d101      	bne.n	801cb12 <pbuf_header_impl+0x36>
    return 0;
 801cb0e:	2300      	movs	r3, #0
 801cb10:	e078      	b.n	801cc04 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 801cb12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	da10      	bge.n	801cb3c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 801cb1a:	887b      	ldrh	r3, [r7, #2]
 801cb1c:	425b      	negs	r3, r3
 801cb1e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	895b      	ldrh	r3, [r3, #10]
 801cb24:	89fa      	ldrh	r2, [r7, #14]
 801cb26:	429a      	cmp	r2, r3
 801cb28:	d90a      	bls.n	801cb40 <pbuf_header_impl+0x64>
 801cb2a:	4b38      	ldr	r3, [pc, #224]	; (801cc0c <pbuf_header_impl+0x130>)
 801cb2c:	f240 2247 	movw	r2, #583	; 0x247
 801cb30:	4939      	ldr	r1, [pc, #228]	; (801cc18 <pbuf_header_impl+0x13c>)
 801cb32:	4838      	ldr	r0, [pc, #224]	; (801cc14 <pbuf_header_impl+0x138>)
 801cb34:	f008 fff4 	bl	8025b20 <iprintf>
 801cb38:	2301      	movs	r3, #1
 801cb3a:	e063      	b.n	801cc04 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 801cb3c:	887b      	ldrh	r3, [r7, #2]
 801cb3e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	7b1b      	ldrb	r3, [r3, #12]
 801cb44:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	685b      	ldr	r3, [r3, #4]
 801cb4a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 801cb4c:	89bb      	ldrh	r3, [r7, #12]
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d002      	beq.n	801cb58 <pbuf_header_impl+0x7c>
 801cb52:	89bb      	ldrh	r3, [r7, #12]
 801cb54:	2b03      	cmp	r3, #3
 801cb56:	d112      	bne.n	801cb7e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	685a      	ldr	r2, [r3, #4]
 801cb5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cb60:	425b      	negs	r3, r3
 801cb62:	441a      	add	r2, r3
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	685a      	ldr	r2, [r3, #4]
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	3310      	adds	r3, #16
 801cb70:	429a      	cmp	r2, r3
 801cb72:	d238      	bcs.n	801cbe6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	68ba      	ldr	r2, [r7, #8]
 801cb78:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 801cb7a:	2301      	movs	r3, #1
 801cb7c:	e042      	b.n	801cc04 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801cb7e:	89bb      	ldrh	r3, [r7, #12]
 801cb80:	2b02      	cmp	r3, #2
 801cb82:	d002      	beq.n	801cb8a <pbuf_header_impl+0xae>
 801cb84:	89bb      	ldrh	r3, [r7, #12]
 801cb86:	2b01      	cmp	r3, #1
 801cb88:	d124      	bne.n	801cbd4 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801cb8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	da0d      	bge.n	801cbae <pbuf_header_impl+0xd2>
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	895b      	ldrh	r3, [r3, #10]
 801cb96:	89fa      	ldrh	r2, [r7, #14]
 801cb98:	429a      	cmp	r2, r3
 801cb9a:	d808      	bhi.n	801cbae <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	685a      	ldr	r2, [r3, #4]
 801cba0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cba4:	425b      	negs	r3, r3
 801cba6:	441a      	add	r2, r3
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	605a      	str	r2, [r3, #4]
 801cbac:	e011      	b.n	801cbd2 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 801cbae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	dd0b      	ble.n	801cbce <pbuf_header_impl+0xf2>
 801cbb6:	787b      	ldrb	r3, [r7, #1]
 801cbb8:	2b00      	cmp	r3, #0
 801cbba:	d008      	beq.n	801cbce <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	685a      	ldr	r2, [r3, #4]
 801cbc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cbc4:	425b      	negs	r3, r3
 801cbc6:	441a      	add	r2, r3
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	605a      	str	r2, [r3, #4]
 801cbcc:	e001      	b.n	801cbd2 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801cbce:	2301      	movs	r3, #1
 801cbd0:	e018      	b.n	801cc04 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801cbd2:	e008      	b.n	801cbe6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 801cbd4:	4b0d      	ldr	r3, [pc, #52]	; (801cc0c <pbuf_header_impl+0x130>)
 801cbd6:	f240 2277 	movw	r2, #631	; 0x277
 801cbda:	4910      	ldr	r1, [pc, #64]	; (801cc1c <pbuf_header_impl+0x140>)
 801cbdc:	480d      	ldr	r0, [pc, #52]	; (801cc14 <pbuf_header_impl+0x138>)
 801cbde:	f008 ff9f 	bl	8025b20 <iprintf>
    return 1;
 801cbe2:	2301      	movs	r3, #1
 801cbe4:	e00e      	b.n	801cc04 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	895a      	ldrh	r2, [r3, #10]
 801cbea:	887b      	ldrh	r3, [r7, #2]
 801cbec:	4413      	add	r3, r2
 801cbee:	b29a      	uxth	r2, r3
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	891a      	ldrh	r2, [r3, #8]
 801cbf8:	887b      	ldrh	r3, [r7, #2]
 801cbfa:	4413      	add	r3, r2
 801cbfc:	b29a      	uxth	r2, r3
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 801cc02:	2300      	movs	r3, #0
}
 801cc04:	4618      	mov	r0, r3
 801cc06:	3710      	adds	r7, #16
 801cc08:	46bd      	mov	sp, r7
 801cc0a:	bd80      	pop	{r7, pc}
 801cc0c:	08027aa4 	.word	0x08027aa4
 801cc10:	08027cdc 	.word	0x08027cdc
 801cc14:	08027af0 	.word	0x08027af0
 801cc18:	08027ce8 	.word	0x08027ce8
 801cc1c:	08027d08 	.word	0x08027d08

0801cc20 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 801cc20:	b580      	push	{r7, lr}
 801cc22:	b082      	sub	sp, #8
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	6078      	str	r0, [r7, #4]
 801cc28:	460b      	mov	r3, r1
 801cc2a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 801cc2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cc30:	2200      	movs	r2, #0
 801cc32:	4619      	mov	r1, r3
 801cc34:	6878      	ldr	r0, [r7, #4]
 801cc36:	f7ff ff51 	bl	801cadc <pbuf_header_impl>
 801cc3a:	4603      	mov	r3, r0
}
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	3708      	adds	r7, #8
 801cc40:	46bd      	mov	sp, r7
 801cc42:	bd80      	pop	{r7, pc}

0801cc44 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801cc44:	b580      	push	{r7, lr}
 801cc46:	b082      	sub	sp, #8
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	6078      	str	r0, [r7, #4]
 801cc4c:	460b      	mov	r3, r1
 801cc4e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 801cc50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cc54:	2201      	movs	r2, #1
 801cc56:	4619      	mov	r1, r3
 801cc58:	6878      	ldr	r0, [r7, #4]
 801cc5a:	f7ff ff3f 	bl	801cadc <pbuf_header_impl>
 801cc5e:	4603      	mov	r3, r0
}
 801cc60:	4618      	mov	r0, r3
 801cc62:	3708      	adds	r7, #8
 801cc64:	46bd      	mov	sp, r7
 801cc66:	bd80      	pop	{r7, pc}

0801cc68 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801cc68:	b580      	push	{r7, lr}
 801cc6a:	b088      	sub	sp, #32
 801cc6c:	af00      	add	r7, sp, #0
 801cc6e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d10b      	bne.n	801cc8e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d106      	bne.n	801cc8a <pbuf_free+0x22>
 801cc7c:	4b41      	ldr	r3, [pc, #260]	; (801cd84 <pbuf_free+0x11c>)
 801cc7e:	f240 22d2 	movw	r2, #722	; 0x2d2
 801cc82:	4941      	ldr	r1, [pc, #260]	; (801cd88 <pbuf_free+0x120>)
 801cc84:	4841      	ldr	r0, [pc, #260]	; (801cd8c <pbuf_free+0x124>)
 801cc86:	f008 ff4b 	bl	8025b20 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	e076      	b.n	801cd7c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	7b1b      	ldrb	r3, [r3, #12]
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d012      	beq.n	801ccbc <pbuf_free+0x54>
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	7b1b      	ldrb	r3, [r3, #12]
 801cc9a:	2b01      	cmp	r3, #1
 801cc9c:	d00e      	beq.n	801ccbc <pbuf_free+0x54>
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	7b1b      	ldrb	r3, [r3, #12]
 801cca2:	2b02      	cmp	r3, #2
 801cca4:	d00a      	beq.n	801ccbc <pbuf_free+0x54>
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	7b1b      	ldrb	r3, [r3, #12]
 801ccaa:	2b03      	cmp	r3, #3
 801ccac:	d006      	beq.n	801ccbc <pbuf_free+0x54>
 801ccae:	4b35      	ldr	r3, [pc, #212]	; (801cd84 <pbuf_free+0x11c>)
 801ccb0:	f240 22de 	movw	r2, #734	; 0x2de
 801ccb4:	4936      	ldr	r1, [pc, #216]	; (801cd90 <pbuf_free+0x128>)
 801ccb6:	4835      	ldr	r0, [pc, #212]	; (801cd8c <pbuf_free+0x124>)
 801ccb8:	f008 ff32 	bl	8025b20 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 801ccbc:	2300      	movs	r3, #0
 801ccbe:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801ccc0:	e058      	b.n	801cd74 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801ccc2:	f006 fb09 	bl	80232d8 <sys_arch_protect>
 801ccc6:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	89db      	ldrh	r3, [r3, #14]
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d106      	bne.n	801ccde <pbuf_free+0x76>
 801ccd0:	4b2c      	ldr	r3, [pc, #176]	; (801cd84 <pbuf_free+0x11c>)
 801ccd2:	f240 22eb 	movw	r2, #747	; 0x2eb
 801ccd6:	492f      	ldr	r1, [pc, #188]	; (801cd94 <pbuf_free+0x12c>)
 801ccd8:	482c      	ldr	r0, [pc, #176]	; (801cd8c <pbuf_free+0x124>)
 801ccda:	f008 ff21 	bl	8025b20 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	89db      	ldrh	r3, [r3, #14]
 801cce2:	3b01      	subs	r3, #1
 801cce4:	b29a      	uxth	r2, r3
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	81da      	strh	r2, [r3, #14]
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	89db      	ldrh	r3, [r3, #14]
 801ccee:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 801ccf0:	69b8      	ldr	r0, [r7, #24]
 801ccf2:	f006 faff 	bl	80232f4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801ccf6:	8afb      	ldrh	r3, [r7, #22]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d139      	bne.n	801cd70 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	681b      	ldr	r3, [r3, #0]
 801cd00:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	7b1b      	ldrb	r3, [r3, #12]
 801cd06:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	7b5b      	ldrb	r3, [r3, #13]
 801cd0c:	f003 0302 	and.w	r3, r3, #2
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	d011      	beq.n	801cd38 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801cd18:	68bb      	ldr	r3, [r7, #8]
 801cd1a:	691b      	ldr	r3, [r3, #16]
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d106      	bne.n	801cd2e <pbuf_free+0xc6>
 801cd20:	4b18      	ldr	r3, [pc, #96]	; (801cd84 <pbuf_free+0x11c>)
 801cd22:	f240 22f9 	movw	r2, #761	; 0x2f9
 801cd26:	491c      	ldr	r1, [pc, #112]	; (801cd98 <pbuf_free+0x130>)
 801cd28:	4818      	ldr	r0, [pc, #96]	; (801cd8c <pbuf_free+0x124>)
 801cd2a:	f008 fef9 	bl	8025b20 <iprintf>
        pc->custom_free_function(p);
 801cd2e:	68bb      	ldr	r3, [r7, #8]
 801cd30:	691b      	ldr	r3, [r3, #16]
 801cd32:	6878      	ldr	r0, [r7, #4]
 801cd34:	4798      	blx	r3
 801cd36:	e015      	b.n	801cd64 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 801cd38:	89fb      	ldrh	r3, [r7, #14]
 801cd3a:	2b03      	cmp	r3, #3
 801cd3c:	d104      	bne.n	801cd48 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 801cd3e:	6879      	ldr	r1, [r7, #4]
 801cd40:	200c      	movs	r0, #12
 801cd42:	f7ff fa37 	bl	801c1b4 <memp_free>
 801cd46:	e00d      	b.n	801cd64 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 801cd48:	89fb      	ldrh	r3, [r7, #14]
 801cd4a:	2b01      	cmp	r3, #1
 801cd4c:	d002      	beq.n	801cd54 <pbuf_free+0xec>
 801cd4e:	89fb      	ldrh	r3, [r7, #14]
 801cd50:	2b02      	cmp	r3, #2
 801cd52:	d104      	bne.n	801cd5e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 801cd54:	6879      	ldr	r1, [r7, #4]
 801cd56:	200b      	movs	r0, #11
 801cd58:	f7ff fa2c 	bl	801c1b4 <memp_free>
 801cd5c:	e002      	b.n	801cd64 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 801cd5e:	6878      	ldr	r0, [r7, #4]
 801cd60:	f7fe ff0e 	bl	801bb80 <mem_free>
        }
      }
      count++;
 801cd64:	7ffb      	ldrb	r3, [r7, #31]
 801cd66:	3301      	adds	r3, #1
 801cd68:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801cd6a:	693b      	ldr	r3, [r7, #16]
 801cd6c:	607b      	str	r3, [r7, #4]
 801cd6e:	e001      	b.n	801cd74 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 801cd70:	2300      	movs	r3, #0
 801cd72:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d1a3      	bne.n	801ccc2 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801cd7a:	7ffb      	ldrb	r3, [r7, #31]
}
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	3720      	adds	r7, #32
 801cd80:	46bd      	mov	sp, r7
 801cd82:	bd80      	pop	{r7, pc}
 801cd84:	08027aa4 	.word	0x08027aa4
 801cd88:	08027cdc 	.word	0x08027cdc
 801cd8c:	08027af0 	.word	0x08027af0
 801cd90:	08027d18 	.word	0x08027d18
 801cd94:	08027d30 	.word	0x08027d30
 801cd98:	08027d48 	.word	0x08027d48

0801cd9c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801cd9c:	b480      	push	{r7}
 801cd9e:	b085      	sub	sp, #20
 801cda0:	af00      	add	r7, sp, #0
 801cda2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801cda4:	2300      	movs	r3, #0
 801cda6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801cda8:	e005      	b.n	801cdb6 <pbuf_clen+0x1a>
    ++len;
 801cdaa:	89fb      	ldrh	r3, [r7, #14]
 801cdac:	3301      	adds	r3, #1
 801cdae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801cdb0:	687b      	ldr	r3, [r7, #4]
 801cdb2:	681b      	ldr	r3, [r3, #0]
 801cdb4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d1f6      	bne.n	801cdaa <pbuf_clen+0xe>
  }
  return len;
 801cdbc:	89fb      	ldrh	r3, [r7, #14]
}
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	3714      	adds	r7, #20
 801cdc2:	46bd      	mov	sp, r7
 801cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdc8:	4770      	bx	lr
	...

0801cdcc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801cdcc:	b580      	push	{r7, lr}
 801cdce:	b084      	sub	sp, #16
 801cdd0:	af00      	add	r7, sp, #0
 801cdd2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d016      	beq.n	801ce08 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 801cdda:	f006 fa7d 	bl	80232d8 <sys_arch_protect>
 801cdde:	60f8      	str	r0, [r7, #12]
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	89db      	ldrh	r3, [r3, #14]
 801cde4:	3301      	adds	r3, #1
 801cde6:	b29a      	uxth	r2, r3
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	81da      	strh	r2, [r3, #14]
 801cdec:	68f8      	ldr	r0, [r7, #12]
 801cdee:	f006 fa81 	bl	80232f4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801cdf2:	687b      	ldr	r3, [r7, #4]
 801cdf4:	89db      	ldrh	r3, [r3, #14]
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d106      	bne.n	801ce08 <pbuf_ref+0x3c>
 801cdfa:	4b05      	ldr	r3, [pc, #20]	; (801ce10 <pbuf_ref+0x44>)
 801cdfc:	f240 3239 	movw	r2, #825	; 0x339
 801ce00:	4904      	ldr	r1, [pc, #16]	; (801ce14 <pbuf_ref+0x48>)
 801ce02:	4805      	ldr	r0, [pc, #20]	; (801ce18 <pbuf_ref+0x4c>)
 801ce04:	f008 fe8c 	bl	8025b20 <iprintf>
  }
}
 801ce08:	bf00      	nop
 801ce0a:	3710      	adds	r7, #16
 801ce0c:	46bd      	mov	sp, r7
 801ce0e:	bd80      	pop	{r7, pc}
 801ce10:	08027aa4 	.word	0x08027aa4
 801ce14:	08027d6c 	.word	0x08027d6c
 801ce18:	08027af0 	.word	0x08027af0

0801ce1c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	b084      	sub	sp, #16
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]
 801ce24:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d002      	beq.n	801ce32 <pbuf_cat+0x16>
 801ce2c:	683b      	ldr	r3, [r7, #0]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d107      	bne.n	801ce42 <pbuf_cat+0x26>
 801ce32:	4b20      	ldr	r3, [pc, #128]	; (801ceb4 <pbuf_cat+0x98>)
 801ce34:	f240 324d 	movw	r2, #845	; 0x34d
 801ce38:	491f      	ldr	r1, [pc, #124]	; (801ceb8 <pbuf_cat+0x9c>)
 801ce3a:	4820      	ldr	r0, [pc, #128]	; (801cebc <pbuf_cat+0xa0>)
 801ce3c:	f008 fe70 	bl	8025b20 <iprintf>
 801ce40:	e034      	b.n	801ceac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	60fb      	str	r3, [r7, #12]
 801ce46:	e00a      	b.n	801ce5e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 801ce48:	68fb      	ldr	r3, [r7, #12]
 801ce4a:	891a      	ldrh	r2, [r3, #8]
 801ce4c:	683b      	ldr	r3, [r7, #0]
 801ce4e:	891b      	ldrh	r3, [r3, #8]
 801ce50:	4413      	add	r3, r2
 801ce52:	b29a      	uxth	r2, r3
 801ce54:	68fb      	ldr	r3, [r7, #12]
 801ce56:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	60fb      	str	r3, [r7, #12]
 801ce5e:	68fb      	ldr	r3, [r7, #12]
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d1f0      	bne.n	801ce48 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	891a      	ldrh	r2, [r3, #8]
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	895b      	ldrh	r3, [r3, #10]
 801ce6e:	429a      	cmp	r2, r3
 801ce70:	d006      	beq.n	801ce80 <pbuf_cat+0x64>
 801ce72:	4b10      	ldr	r3, [pc, #64]	; (801ceb4 <pbuf_cat+0x98>)
 801ce74:	f240 3255 	movw	r2, #853	; 0x355
 801ce78:	4911      	ldr	r1, [pc, #68]	; (801cec0 <pbuf_cat+0xa4>)
 801ce7a:	4810      	ldr	r0, [pc, #64]	; (801cebc <pbuf_cat+0xa0>)
 801ce7c:	f008 fe50 	bl	8025b20 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d006      	beq.n	801ce96 <pbuf_cat+0x7a>
 801ce88:	4b0a      	ldr	r3, [pc, #40]	; (801ceb4 <pbuf_cat+0x98>)
 801ce8a:	f240 3256 	movw	r2, #854	; 0x356
 801ce8e:	490d      	ldr	r1, [pc, #52]	; (801cec4 <pbuf_cat+0xa8>)
 801ce90:	480a      	ldr	r0, [pc, #40]	; (801cebc <pbuf_cat+0xa0>)
 801ce92:	f008 fe45 	bl	8025b20 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 801ce96:	68fb      	ldr	r3, [r7, #12]
 801ce98:	891a      	ldrh	r2, [r3, #8]
 801ce9a:	683b      	ldr	r3, [r7, #0]
 801ce9c:	891b      	ldrh	r3, [r3, #8]
 801ce9e:	4413      	add	r3, r2
 801cea0:	b29a      	uxth	r2, r3
 801cea2:	68fb      	ldr	r3, [r7, #12]
 801cea4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	683a      	ldr	r2, [r7, #0]
 801ceaa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801ceac:	3710      	adds	r7, #16
 801ceae:	46bd      	mov	sp, r7
 801ceb0:	bd80      	pop	{r7, pc}
 801ceb2:	bf00      	nop
 801ceb4:	08027aa4 	.word	0x08027aa4
 801ceb8:	08027d80 	.word	0x08027d80
 801cebc:	08027af0 	.word	0x08027af0
 801cec0:	08027db8 	.word	0x08027db8
 801cec4:	08027de8 	.word	0x08027de8

0801cec8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801cec8:	b580      	push	{r7, lr}
 801ceca:	b084      	sub	sp, #16
 801cecc:	af00      	add	r7, sp, #0
 801cece:	6078      	str	r0, [r7, #4]
 801ced0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 801ced2:	2300      	movs	r3, #0
 801ced4:	81fb      	strh	r3, [r7, #14]
 801ced6:	2300      	movs	r3, #0
 801ced8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d008      	beq.n	801cef2 <pbuf_copy+0x2a>
 801cee0:	683b      	ldr	r3, [r7, #0]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d005      	beq.n	801cef2 <pbuf_copy+0x2a>
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	891a      	ldrh	r2, [r3, #8]
 801ceea:	683b      	ldr	r3, [r7, #0]
 801ceec:	891b      	ldrh	r3, [r3, #8]
 801ceee:	429a      	cmp	r2, r3
 801cef0:	d209      	bcs.n	801cf06 <pbuf_copy+0x3e>
 801cef2:	4b54      	ldr	r3, [pc, #336]	; (801d044 <pbuf_copy+0x17c>)
 801cef4:	f240 32bd 	movw	r2, #957	; 0x3bd
 801cef8:	4953      	ldr	r1, [pc, #332]	; (801d048 <pbuf_copy+0x180>)
 801cefa:	4854      	ldr	r0, [pc, #336]	; (801d04c <pbuf_copy+0x184>)
 801cefc:	f008 fe10 	bl	8025b20 <iprintf>
 801cf00:	f06f 030f 	mvn.w	r3, #15
 801cf04:	e099      	b.n	801d03a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	895b      	ldrh	r3, [r3, #10]
 801cf0a:	461a      	mov	r2, r3
 801cf0c:	89fb      	ldrh	r3, [r7, #14]
 801cf0e:	1ad2      	subs	r2, r2, r3
 801cf10:	683b      	ldr	r3, [r7, #0]
 801cf12:	895b      	ldrh	r3, [r3, #10]
 801cf14:	4619      	mov	r1, r3
 801cf16:	89bb      	ldrh	r3, [r7, #12]
 801cf18:	1acb      	subs	r3, r1, r3
 801cf1a:	429a      	cmp	r2, r3
 801cf1c:	db05      	blt.n	801cf2a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801cf1e:	683b      	ldr	r3, [r7, #0]
 801cf20:	895a      	ldrh	r2, [r3, #10]
 801cf22:	89bb      	ldrh	r3, [r7, #12]
 801cf24:	1ad3      	subs	r3, r2, r3
 801cf26:	817b      	strh	r3, [r7, #10]
 801cf28:	e004      	b.n	801cf34 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	895a      	ldrh	r2, [r3, #10]
 801cf2e:	89fb      	ldrh	r3, [r7, #14]
 801cf30:	1ad3      	subs	r3, r2, r3
 801cf32:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	685a      	ldr	r2, [r3, #4]
 801cf38:	89fb      	ldrh	r3, [r7, #14]
 801cf3a:	18d0      	adds	r0, r2, r3
 801cf3c:	683b      	ldr	r3, [r7, #0]
 801cf3e:	685a      	ldr	r2, [r3, #4]
 801cf40:	89bb      	ldrh	r3, [r7, #12]
 801cf42:	4413      	add	r3, r2
 801cf44:	897a      	ldrh	r2, [r7, #10]
 801cf46:	4619      	mov	r1, r3
 801cf48:	f009 fabd 	bl	80264c6 <memcpy>
    offset_to += len;
 801cf4c:	89fa      	ldrh	r2, [r7, #14]
 801cf4e:	897b      	ldrh	r3, [r7, #10]
 801cf50:	4413      	add	r3, r2
 801cf52:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 801cf54:	89ba      	ldrh	r2, [r7, #12]
 801cf56:	897b      	ldrh	r3, [r7, #10]
 801cf58:	4413      	add	r3, r2
 801cf5a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	895b      	ldrh	r3, [r3, #10]
 801cf60:	89fa      	ldrh	r2, [r7, #14]
 801cf62:	429a      	cmp	r2, r3
 801cf64:	d906      	bls.n	801cf74 <pbuf_copy+0xac>
 801cf66:	4b37      	ldr	r3, [pc, #220]	; (801d044 <pbuf_copy+0x17c>)
 801cf68:	f240 32cd 	movw	r2, #973	; 0x3cd
 801cf6c:	4938      	ldr	r1, [pc, #224]	; (801d050 <pbuf_copy+0x188>)
 801cf6e:	4837      	ldr	r0, [pc, #220]	; (801d04c <pbuf_copy+0x184>)
 801cf70:	f008 fdd6 	bl	8025b20 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801cf74:	683b      	ldr	r3, [r7, #0]
 801cf76:	895b      	ldrh	r3, [r3, #10]
 801cf78:	89ba      	ldrh	r2, [r7, #12]
 801cf7a:	429a      	cmp	r2, r3
 801cf7c:	d906      	bls.n	801cf8c <pbuf_copy+0xc4>
 801cf7e:	4b31      	ldr	r3, [pc, #196]	; (801d044 <pbuf_copy+0x17c>)
 801cf80:	f240 32ce 	movw	r2, #974	; 0x3ce
 801cf84:	4933      	ldr	r1, [pc, #204]	; (801d054 <pbuf_copy+0x18c>)
 801cf86:	4831      	ldr	r0, [pc, #196]	; (801d04c <pbuf_copy+0x184>)
 801cf88:	f008 fdca 	bl	8025b20 <iprintf>
    if (offset_from >= p_from->len) {
 801cf8c:	683b      	ldr	r3, [r7, #0]
 801cf8e:	895b      	ldrh	r3, [r3, #10]
 801cf90:	89ba      	ldrh	r2, [r7, #12]
 801cf92:	429a      	cmp	r2, r3
 801cf94:	d304      	bcc.n	801cfa0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 801cf96:	2300      	movs	r3, #0
 801cf98:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 801cf9a:	683b      	ldr	r3, [r7, #0]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	895b      	ldrh	r3, [r3, #10]
 801cfa4:	89fa      	ldrh	r2, [r7, #14]
 801cfa6:	429a      	cmp	r2, r3
 801cfa8:	d114      	bne.n	801cfd4 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 801cfaa:	2300      	movs	r3, #0
 801cfac:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	2b00      	cmp	r3, #0
 801cfb8:	d10c      	bne.n	801cfd4 <pbuf_copy+0x10c>
 801cfba:	683b      	ldr	r3, [r7, #0]
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d009      	beq.n	801cfd4 <pbuf_copy+0x10c>
 801cfc0:	4b20      	ldr	r3, [pc, #128]	; (801d044 <pbuf_copy+0x17c>)
 801cfc2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801cfc6:	4924      	ldr	r1, [pc, #144]	; (801d058 <pbuf_copy+0x190>)
 801cfc8:	4820      	ldr	r0, [pc, #128]	; (801d04c <pbuf_copy+0x184>)
 801cfca:	f008 fda9 	bl	8025b20 <iprintf>
 801cfce:	f06f 030f 	mvn.w	r3, #15
 801cfd2:	e032      	b.n	801d03a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801cfd4:	683b      	ldr	r3, [r7, #0]
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d013      	beq.n	801d002 <pbuf_copy+0x13a>
 801cfda:	683b      	ldr	r3, [r7, #0]
 801cfdc:	895a      	ldrh	r2, [r3, #10]
 801cfde:	683b      	ldr	r3, [r7, #0]
 801cfe0:	891b      	ldrh	r3, [r3, #8]
 801cfe2:	429a      	cmp	r2, r3
 801cfe4:	d10d      	bne.n	801d002 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801cfe6:	683b      	ldr	r3, [r7, #0]
 801cfe8:	681b      	ldr	r3, [r3, #0]
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d009      	beq.n	801d002 <pbuf_copy+0x13a>
 801cfee:	4b15      	ldr	r3, [pc, #84]	; (801d044 <pbuf_copy+0x17c>)
 801cff0:	f240 32de 	movw	r2, #990	; 0x3de
 801cff4:	4919      	ldr	r1, [pc, #100]	; (801d05c <pbuf_copy+0x194>)
 801cff6:	4815      	ldr	r0, [pc, #84]	; (801d04c <pbuf_copy+0x184>)
 801cff8:	f008 fd92 	bl	8025b20 <iprintf>
 801cffc:	f06f 0305 	mvn.w	r3, #5
 801d000:	e01b      	b.n	801d03a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	2b00      	cmp	r3, #0
 801d006:	d013      	beq.n	801d030 <pbuf_copy+0x168>
 801d008:	687b      	ldr	r3, [r7, #4]
 801d00a:	895a      	ldrh	r2, [r3, #10]
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	891b      	ldrh	r3, [r3, #8]
 801d010:	429a      	cmp	r2, r3
 801d012:	d10d      	bne.n	801d030 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d009      	beq.n	801d030 <pbuf_copy+0x168>
 801d01c:	4b09      	ldr	r3, [pc, #36]	; (801d044 <pbuf_copy+0x17c>)
 801d01e:	f240 32e3 	movw	r2, #995	; 0x3e3
 801d022:	490e      	ldr	r1, [pc, #56]	; (801d05c <pbuf_copy+0x194>)
 801d024:	4809      	ldr	r0, [pc, #36]	; (801d04c <pbuf_copy+0x184>)
 801d026:	f008 fd7b 	bl	8025b20 <iprintf>
 801d02a:	f06f 0305 	mvn.w	r3, #5
 801d02e:	e004      	b.n	801d03a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801d030:	683b      	ldr	r3, [r7, #0]
 801d032:	2b00      	cmp	r3, #0
 801d034:	f47f af67 	bne.w	801cf06 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801d038:	2300      	movs	r3, #0
}
 801d03a:	4618      	mov	r0, r3
 801d03c:	3710      	adds	r7, #16
 801d03e:	46bd      	mov	sp, r7
 801d040:	bd80      	pop	{r7, pc}
 801d042:	bf00      	nop
 801d044:	08027aa4 	.word	0x08027aa4
 801d048:	08027e34 	.word	0x08027e34
 801d04c:	08027af0 	.word	0x08027af0
 801d050:	08027e64 	.word	0x08027e64
 801d054:	08027e7c 	.word	0x08027e7c
 801d058:	08027e98 	.word	0x08027e98
 801d05c:	08027ea8 	.word	0x08027ea8

0801d060 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801d060:	b580      	push	{r7, lr}
 801d062:	b088      	sub	sp, #32
 801d064:	af00      	add	r7, sp, #0
 801d066:	60f8      	str	r0, [r7, #12]
 801d068:	60b9      	str	r1, [r7, #8]
 801d06a:	4611      	mov	r1, r2
 801d06c:	461a      	mov	r2, r3
 801d06e:	460b      	mov	r3, r1
 801d070:	80fb      	strh	r3, [r7, #6]
 801d072:	4613      	mov	r3, r2
 801d074:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801d076:	2300      	movs	r3, #0
 801d078:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801d07a:	68fb      	ldr	r3, [r7, #12]
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d108      	bne.n	801d092 <pbuf_copy_partial+0x32>
 801d080:	4b30      	ldr	r3, [pc, #192]	; (801d144 <pbuf_copy_partial+0xe4>)
 801d082:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801d086:	4930      	ldr	r1, [pc, #192]	; (801d148 <pbuf_copy_partial+0xe8>)
 801d088:	4830      	ldr	r0, [pc, #192]	; (801d14c <pbuf_copy_partial+0xec>)
 801d08a:	f008 fd49 	bl	8025b20 <iprintf>
 801d08e:	2300      	movs	r3, #0
 801d090:	e054      	b.n	801d13c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801d092:	68bb      	ldr	r3, [r7, #8]
 801d094:	2b00      	cmp	r3, #0
 801d096:	d108      	bne.n	801d0aa <pbuf_copy_partial+0x4a>
 801d098:	4b2a      	ldr	r3, [pc, #168]	; (801d144 <pbuf_copy_partial+0xe4>)
 801d09a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801d09e:	492c      	ldr	r1, [pc, #176]	; (801d150 <pbuf_copy_partial+0xf0>)
 801d0a0:	482a      	ldr	r0, [pc, #168]	; (801d14c <pbuf_copy_partial+0xec>)
 801d0a2:	f008 fd3d 	bl	8025b20 <iprintf>
 801d0a6:	2300      	movs	r3, #0
 801d0a8:	e048      	b.n	801d13c <pbuf_copy_partial+0xdc>

  left = 0;
 801d0aa:	2300      	movs	r3, #0
 801d0ac:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 801d0ae:	68fb      	ldr	r3, [r7, #12]
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	d002      	beq.n	801d0ba <pbuf_copy_partial+0x5a>
 801d0b4:	68bb      	ldr	r3, [r7, #8]
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d101      	bne.n	801d0be <pbuf_copy_partial+0x5e>
    return 0;
 801d0ba:	2300      	movs	r3, #0
 801d0bc:	e03e      	b.n	801d13c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801d0be:	68fb      	ldr	r3, [r7, #12]
 801d0c0:	61fb      	str	r3, [r7, #28]
 801d0c2:	e034      	b.n	801d12e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 801d0c4:	88bb      	ldrh	r3, [r7, #4]
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	d00a      	beq.n	801d0e0 <pbuf_copy_partial+0x80>
 801d0ca:	69fb      	ldr	r3, [r7, #28]
 801d0cc:	895b      	ldrh	r3, [r3, #10]
 801d0ce:	88ba      	ldrh	r2, [r7, #4]
 801d0d0:	429a      	cmp	r2, r3
 801d0d2:	d305      	bcc.n	801d0e0 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 801d0d4:	69fb      	ldr	r3, [r7, #28]
 801d0d6:	895b      	ldrh	r3, [r3, #10]
 801d0d8:	88ba      	ldrh	r2, [r7, #4]
 801d0da:	1ad3      	subs	r3, r2, r3
 801d0dc:	80bb      	strh	r3, [r7, #4]
 801d0de:	e023      	b.n	801d128 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 801d0e0:	69fb      	ldr	r3, [r7, #28]
 801d0e2:	895a      	ldrh	r2, [r3, #10]
 801d0e4:	88bb      	ldrh	r3, [r7, #4]
 801d0e6:	1ad3      	subs	r3, r2, r3
 801d0e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801d0ea:	8b3a      	ldrh	r2, [r7, #24]
 801d0ec:	88fb      	ldrh	r3, [r7, #6]
 801d0ee:	429a      	cmp	r2, r3
 801d0f0:	d901      	bls.n	801d0f6 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 801d0f2:	88fb      	ldrh	r3, [r7, #6]
 801d0f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 801d0f6:	8b7b      	ldrh	r3, [r7, #26]
 801d0f8:	68ba      	ldr	r2, [r7, #8]
 801d0fa:	18d0      	adds	r0, r2, r3
 801d0fc:	69fb      	ldr	r3, [r7, #28]
 801d0fe:	685a      	ldr	r2, [r3, #4]
 801d100:	88bb      	ldrh	r3, [r7, #4]
 801d102:	4413      	add	r3, r2
 801d104:	8b3a      	ldrh	r2, [r7, #24]
 801d106:	4619      	mov	r1, r3
 801d108:	f009 f9dd 	bl	80264c6 <memcpy>
      copied_total += buf_copy_len;
 801d10c:	8afa      	ldrh	r2, [r7, #22]
 801d10e:	8b3b      	ldrh	r3, [r7, #24]
 801d110:	4413      	add	r3, r2
 801d112:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 801d114:	8b7a      	ldrh	r2, [r7, #26]
 801d116:	8b3b      	ldrh	r3, [r7, #24]
 801d118:	4413      	add	r3, r2
 801d11a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 801d11c:	88fa      	ldrh	r2, [r7, #6]
 801d11e:	8b3b      	ldrh	r3, [r7, #24]
 801d120:	1ad3      	subs	r3, r2, r3
 801d122:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801d124:	2300      	movs	r3, #0
 801d126:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801d128:	69fb      	ldr	r3, [r7, #28]
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	61fb      	str	r3, [r7, #28]
 801d12e:	88fb      	ldrh	r3, [r7, #6]
 801d130:	2b00      	cmp	r3, #0
 801d132:	d002      	beq.n	801d13a <pbuf_copy_partial+0xda>
 801d134:	69fb      	ldr	r3, [r7, #28]
 801d136:	2b00      	cmp	r3, #0
 801d138:	d1c4      	bne.n	801d0c4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 801d13a:	8afb      	ldrh	r3, [r7, #22]
}
 801d13c:	4618      	mov	r0, r3
 801d13e:	3720      	adds	r7, #32
 801d140:	46bd      	mov	sp, r7
 801d142:	bd80      	pop	{r7, pc}
 801d144:	08027aa4 	.word	0x08027aa4
 801d148:	08027ed4 	.word	0x08027ed4
 801d14c:	08027af0 	.word	0x08027af0
 801d150:	08027ef4 	.word	0x08027ef4

0801d154 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801d154:	b480      	push	{r7}
 801d156:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801d158:	bf00      	nop
 801d15a:	46bd      	mov	sp, r7
 801d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d160:	4770      	bx	lr
	...

0801d164 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801d164:	b580      	push	{r7, lr}
 801d166:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801d168:	f000 ffb8 	bl	801e0dc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801d16c:	4b07      	ldr	r3, [pc, #28]	; (801d18c <tcp_tmr+0x28>)
 801d16e:	781b      	ldrb	r3, [r3, #0]
 801d170:	3301      	adds	r3, #1
 801d172:	b2da      	uxtb	r2, r3
 801d174:	4b05      	ldr	r3, [pc, #20]	; (801d18c <tcp_tmr+0x28>)
 801d176:	701a      	strb	r2, [r3, #0]
 801d178:	4b04      	ldr	r3, [pc, #16]	; (801d18c <tcp_tmr+0x28>)
 801d17a:	781b      	ldrb	r3, [r3, #0]
 801d17c:	f003 0301 	and.w	r3, r3, #1
 801d180:	2b00      	cmp	r3, #0
 801d182:	d001      	beq.n	801d188 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801d184:	f000 fcea 	bl	801db5c <tcp_slowtmr>
  }
}
 801d188:	bf00      	nop
 801d18a:	bd80      	pop	{r7, pc}
 801d18c:	200040f1 	.word	0x200040f1

0801d190 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801d190:	b480      	push	{r7}
 801d192:	b085      	sub	sp, #20
 801d194:	af00      	add	r7, sp, #0
 801d196:	6078      	str	r0, [r7, #4]
 801d198:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	60fb      	str	r3, [r7, #12]
 801d19e:	e00a      	b.n	801d1b6 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801d1a4:	683b      	ldr	r3, [r7, #0]
 801d1a6:	429a      	cmp	r2, r3
 801d1a8:	d102      	bne.n	801d1b0 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 801d1aa:	68fb      	ldr	r3, [r7, #12]
 801d1ac:	2200      	movs	r2, #0
 801d1ae:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801d1b0:	68fb      	ldr	r3, [r7, #12]
 801d1b2:	68db      	ldr	r3, [r3, #12]
 801d1b4:	60fb      	str	r3, [r7, #12]
 801d1b6:	68fb      	ldr	r3, [r7, #12]
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d1f1      	bne.n	801d1a0 <tcp_remove_listener+0x10>
      }
   }
}
 801d1bc:	bf00      	nop
 801d1be:	3714      	adds	r7, #20
 801d1c0:	46bd      	mov	sp, r7
 801d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1c6:	4770      	bx	lr

0801d1c8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801d1c8:	b580      	push	{r7, lr}
 801d1ca:	b084      	sub	sp, #16
 801d1cc:	af00      	add	r7, sp, #0
 801d1ce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d105      	bne.n	801d1e2 <tcp_listen_closed+0x1a>
 801d1d6:	4b13      	ldr	r3, [pc, #76]	; (801d224 <tcp_listen_closed+0x5c>)
 801d1d8:	22c0      	movs	r2, #192	; 0xc0
 801d1da:	4913      	ldr	r1, [pc, #76]	; (801d228 <tcp_listen_closed+0x60>)
 801d1dc:	4813      	ldr	r0, [pc, #76]	; (801d22c <tcp_listen_closed+0x64>)
 801d1de:	f008 fc9f 	bl	8025b20 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	7d1b      	ldrb	r3, [r3, #20]
 801d1e6:	2b01      	cmp	r3, #1
 801d1e8:	d005      	beq.n	801d1f6 <tcp_listen_closed+0x2e>
 801d1ea:	4b0e      	ldr	r3, [pc, #56]	; (801d224 <tcp_listen_closed+0x5c>)
 801d1ec:	22c1      	movs	r2, #193	; 0xc1
 801d1ee:	4910      	ldr	r1, [pc, #64]	; (801d230 <tcp_listen_closed+0x68>)
 801d1f0:	480e      	ldr	r0, [pc, #56]	; (801d22c <tcp_listen_closed+0x64>)
 801d1f2:	f008 fc95 	bl	8025b20 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801d1f6:	2301      	movs	r3, #1
 801d1f8:	60fb      	str	r3, [r7, #12]
 801d1fa:	e00b      	b.n	801d214 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 801d1fc:	4a0d      	ldr	r2, [pc, #52]	; (801d234 <tcp_listen_closed+0x6c>)
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d204:	681b      	ldr	r3, [r3, #0]
 801d206:	6879      	ldr	r1, [r7, #4]
 801d208:	4618      	mov	r0, r3
 801d20a:	f7ff ffc1 	bl	801d190 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	3301      	adds	r3, #1
 801d212:	60fb      	str	r3, [r7, #12]
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	2b03      	cmp	r3, #3
 801d218:	d9f0      	bls.n	801d1fc <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801d21a:	bf00      	nop
 801d21c:	3710      	adds	r7, #16
 801d21e:	46bd      	mov	sp, r7
 801d220:	bd80      	pop	{r7, pc}
 801d222:	bf00      	nop
 801d224:	08028028 	.word	0x08028028
 801d228:	08028058 	.word	0x08028058
 801d22c:	08028064 	.word	0x08028064
 801d230:	0802808c 	.word	0x0802808c
 801d234:	0802b438 	.word	0x0802b438

0801d238 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801d238:	b5b0      	push	{r4, r5, r7, lr}
 801d23a:	b086      	sub	sp, #24
 801d23c:	af02      	add	r7, sp, #8
 801d23e:	6078      	str	r0, [r7, #4]
 801d240:	460b      	mov	r3, r1
 801d242:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801d244:	78fb      	ldrb	r3, [r7, #3]
 801d246:	2b00      	cmp	r3, #0
 801d248:	d075      	beq.n	801d336 <tcp_close_shutdown+0xfe>
 801d24a:	687b      	ldr	r3, [r7, #4]
 801d24c:	7d1b      	ldrb	r3, [r3, #20]
 801d24e:	2b04      	cmp	r3, #4
 801d250:	d003      	beq.n	801d25a <tcp_close_shutdown+0x22>
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	7d1b      	ldrb	r3, [r3, #20]
 801d256:	2b07      	cmp	r3, #7
 801d258:	d16d      	bne.n	801d336 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d25e:	2b00      	cmp	r3, #0
 801d260:	d104      	bne.n	801d26c <tcp_close_shutdown+0x34>
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d26a:	d064      	beq.n	801d336 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	7e9b      	ldrb	r3, [r3, #26]
 801d270:	f003 0310 	and.w	r3, r3, #16
 801d274:	2b00      	cmp	r3, #0
 801d276:	d106      	bne.n	801d286 <tcp_close_shutdown+0x4e>
 801d278:	4b59      	ldr	r3, [pc, #356]	; (801d3e0 <tcp_close_shutdown+0x1a8>)
 801d27a:	f240 120f 	movw	r2, #271	; 0x10f
 801d27e:	4959      	ldr	r1, [pc, #356]	; (801d3e4 <tcp_close_shutdown+0x1ac>)
 801d280:	4859      	ldr	r0, [pc, #356]	; (801d3e8 <tcp_close_shutdown+0x1b0>)
 801d282:	f008 fc4d 	bl	8025b20 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801d28e:	687c      	ldr	r4, [r7, #4]
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	1d1d      	adds	r5, r3, #4
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	8adb      	ldrh	r3, [r3, #22]
 801d298:	687a      	ldr	r2, [r7, #4]
 801d29a:	8b12      	ldrh	r2, [r2, #24]
 801d29c:	9201      	str	r2, [sp, #4]
 801d29e:	9300      	str	r3, [sp, #0]
 801d2a0:	462b      	mov	r3, r5
 801d2a2:	4622      	mov	r2, r4
 801d2a4:	f004 ff1c 	bl	80220e0 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801d2a8:	6878      	ldr	r0, [r7, #4]
 801d2aa:	f001 fa4d 	bl	801e748 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801d2ae:	4b4f      	ldr	r3, [pc, #316]	; (801d3ec <tcp_close_shutdown+0x1b4>)
 801d2b0:	681a      	ldr	r2, [r3, #0]
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	429a      	cmp	r2, r3
 801d2b6:	d105      	bne.n	801d2c4 <tcp_close_shutdown+0x8c>
 801d2b8:	4b4c      	ldr	r3, [pc, #304]	; (801d3ec <tcp_close_shutdown+0x1b4>)
 801d2ba:	681b      	ldr	r3, [r3, #0]
 801d2bc:	68db      	ldr	r3, [r3, #12]
 801d2be:	4a4b      	ldr	r2, [pc, #300]	; (801d3ec <tcp_close_shutdown+0x1b4>)
 801d2c0:	6013      	str	r3, [r2, #0]
 801d2c2:	e013      	b.n	801d2ec <tcp_close_shutdown+0xb4>
 801d2c4:	4b49      	ldr	r3, [pc, #292]	; (801d3ec <tcp_close_shutdown+0x1b4>)
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	60fb      	str	r3, [r7, #12]
 801d2ca:	e00c      	b.n	801d2e6 <tcp_close_shutdown+0xae>
 801d2cc:	68fb      	ldr	r3, [r7, #12]
 801d2ce:	68da      	ldr	r2, [r3, #12]
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	429a      	cmp	r2, r3
 801d2d4:	d104      	bne.n	801d2e0 <tcp_close_shutdown+0xa8>
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	68da      	ldr	r2, [r3, #12]
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	60da      	str	r2, [r3, #12]
 801d2de:	e005      	b.n	801d2ec <tcp_close_shutdown+0xb4>
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	68db      	ldr	r3, [r3, #12]
 801d2e4:	60fb      	str	r3, [r7, #12]
 801d2e6:	68fb      	ldr	r3, [r7, #12]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d1ef      	bne.n	801d2cc <tcp_close_shutdown+0x94>
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	2200      	movs	r2, #0
 801d2f0:	60da      	str	r2, [r3, #12]
 801d2f2:	4b3f      	ldr	r3, [pc, #252]	; (801d3f0 <tcp_close_shutdown+0x1b8>)
 801d2f4:	2201      	movs	r2, #1
 801d2f6:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	7d1b      	ldrb	r3, [r3, #20]
 801d2fc:	2b04      	cmp	r3, #4
 801d2fe:	d10c      	bne.n	801d31a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	220a      	movs	r2, #10
 801d304:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d306:	4b3b      	ldr	r3, [pc, #236]	; (801d3f4 <tcp_close_shutdown+0x1bc>)
 801d308:	681a      	ldr	r2, [r3, #0]
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	60da      	str	r2, [r3, #12]
 801d30e:	4a39      	ldr	r2, [pc, #228]	; (801d3f4 <tcp_close_shutdown+0x1bc>)
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	6013      	str	r3, [r2, #0]
 801d314:	f005 f932 	bl	802257c <tcp_timer_needed>
 801d318:	e00b      	b.n	801d332 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 801d31a:	4b37      	ldr	r3, [pc, #220]	; (801d3f8 <tcp_close_shutdown+0x1c0>)
 801d31c:	681a      	ldr	r2, [r3, #0]
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	429a      	cmp	r2, r3
 801d322:	d102      	bne.n	801d32a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 801d324:	f003 fd72 	bl	8020e0c <tcp_trigger_input_pcb_close>
 801d328:	e003      	b.n	801d332 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 801d32a:	6879      	ldr	r1, [r7, #4]
 801d32c:	2001      	movs	r0, #1
 801d32e:	f7fe ff41 	bl	801c1b4 <memp_free>
        }
      }
      return ERR_OK;
 801d332:	2300      	movs	r3, #0
 801d334:	e050      	b.n	801d3d8 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	7d1b      	ldrb	r3, [r3, #20]
 801d33a:	2b01      	cmp	r3, #1
 801d33c:	d02e      	beq.n	801d39c <tcp_close_shutdown+0x164>
 801d33e:	2b02      	cmp	r3, #2
 801d340:	d038      	beq.n	801d3b4 <tcp_close_shutdown+0x17c>
 801d342:	2b00      	cmp	r3, #0
 801d344:	d142      	bne.n	801d3cc <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	8adb      	ldrh	r3, [r3, #22]
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d021      	beq.n	801d392 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801d34e:	4b2b      	ldr	r3, [pc, #172]	; (801d3fc <tcp_close_shutdown+0x1c4>)
 801d350:	681a      	ldr	r2, [r3, #0]
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	429a      	cmp	r2, r3
 801d356:	d105      	bne.n	801d364 <tcp_close_shutdown+0x12c>
 801d358:	4b28      	ldr	r3, [pc, #160]	; (801d3fc <tcp_close_shutdown+0x1c4>)
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	68db      	ldr	r3, [r3, #12]
 801d35e:	4a27      	ldr	r2, [pc, #156]	; (801d3fc <tcp_close_shutdown+0x1c4>)
 801d360:	6013      	str	r3, [r2, #0]
 801d362:	e013      	b.n	801d38c <tcp_close_shutdown+0x154>
 801d364:	4b25      	ldr	r3, [pc, #148]	; (801d3fc <tcp_close_shutdown+0x1c4>)
 801d366:	681b      	ldr	r3, [r3, #0]
 801d368:	60bb      	str	r3, [r7, #8]
 801d36a:	e00c      	b.n	801d386 <tcp_close_shutdown+0x14e>
 801d36c:	68bb      	ldr	r3, [r7, #8]
 801d36e:	68da      	ldr	r2, [r3, #12]
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	429a      	cmp	r2, r3
 801d374:	d104      	bne.n	801d380 <tcp_close_shutdown+0x148>
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	68da      	ldr	r2, [r3, #12]
 801d37a:	68bb      	ldr	r3, [r7, #8]
 801d37c:	60da      	str	r2, [r3, #12]
 801d37e:	e005      	b.n	801d38c <tcp_close_shutdown+0x154>
 801d380:	68bb      	ldr	r3, [r7, #8]
 801d382:	68db      	ldr	r3, [r3, #12]
 801d384:	60bb      	str	r3, [r7, #8]
 801d386:	68bb      	ldr	r3, [r7, #8]
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d1ef      	bne.n	801d36c <tcp_close_shutdown+0x134>
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	2200      	movs	r2, #0
 801d390:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 801d392:	6879      	ldr	r1, [r7, #4]
 801d394:	2001      	movs	r0, #1
 801d396:	f7fe ff0d 	bl	801c1b4 <memp_free>
    break;
 801d39a:	e01c      	b.n	801d3d6 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 801d39c:	6878      	ldr	r0, [r7, #4]
 801d39e:	f7ff ff13 	bl	801d1c8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801d3a2:	6879      	ldr	r1, [r7, #4]
 801d3a4:	4816      	ldr	r0, [pc, #88]	; (801d400 <tcp_close_shutdown+0x1c8>)
 801d3a6:	f001 fa11 	bl	801e7cc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801d3aa:	6879      	ldr	r1, [r7, #4]
 801d3ac:	2002      	movs	r0, #2
 801d3ae:	f7fe ff01 	bl	801c1b4 <memp_free>
    break;
 801d3b2:	e010      	b.n	801d3d6 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 801d3b4:	6879      	ldr	r1, [r7, #4]
 801d3b6:	480d      	ldr	r0, [pc, #52]	; (801d3ec <tcp_close_shutdown+0x1b4>)
 801d3b8:	f001 fa08 	bl	801e7cc <tcp_pcb_remove>
 801d3bc:	4b0c      	ldr	r3, [pc, #48]	; (801d3f0 <tcp_close_shutdown+0x1b8>)
 801d3be:	2201      	movs	r2, #1
 801d3c0:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 801d3c2:	6879      	ldr	r1, [r7, #4]
 801d3c4:	2001      	movs	r0, #1
 801d3c6:	f7fe fef5 	bl	801c1b4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 801d3ca:	e004      	b.n	801d3d6 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 801d3cc:	6878      	ldr	r0, [r7, #4]
 801d3ce:	f000 f819 	bl	801d404 <tcp_close_shutdown_fin>
 801d3d2:	4603      	mov	r3, r0
 801d3d4:	e000      	b.n	801d3d8 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 801d3d6:	2300      	movs	r3, #0
}
 801d3d8:	4618      	mov	r0, r3
 801d3da:	3710      	adds	r7, #16
 801d3dc:	46bd      	mov	sp, r7
 801d3de:	bdb0      	pop	{r4, r5, r7, pc}
 801d3e0:	08028028 	.word	0x08028028
 801d3e4:	080280a4 	.word	0x080280a4
 801d3e8:	08028064 	.word	0x08028064
 801d3ec:	20008c30 	.word	0x20008c30
 801d3f0:	20008c2c 	.word	0x20008c2c
 801d3f4:	20008c40 	.word	0x20008c40
 801d3f8:	20008c44 	.word	0x20008c44
 801d3fc:	20008c3c 	.word	0x20008c3c
 801d400:	20008c38 	.word	0x20008c38

0801d404 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801d404:	b580      	push	{r7, lr}
 801d406:	b084      	sub	sp, #16
 801d408:	af00      	add	r7, sp, #0
 801d40a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d106      	bne.n	801d420 <tcp_close_shutdown_fin+0x1c>
 801d412:	4b2c      	ldr	r3, [pc, #176]	; (801d4c4 <tcp_close_shutdown_fin+0xc0>)
 801d414:	f240 124d 	movw	r2, #333	; 0x14d
 801d418:	492b      	ldr	r1, [pc, #172]	; (801d4c8 <tcp_close_shutdown_fin+0xc4>)
 801d41a:	482c      	ldr	r0, [pc, #176]	; (801d4cc <tcp_close_shutdown_fin+0xc8>)
 801d41c:	f008 fb80 	bl	8025b20 <iprintf>

  switch (pcb->state) {
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	7d1b      	ldrb	r3, [r3, #20]
 801d424:	2b04      	cmp	r3, #4
 801d426:	d010      	beq.n	801d44a <tcp_close_shutdown_fin+0x46>
 801d428:	2b07      	cmp	r3, #7
 801d42a:	d01b      	beq.n	801d464 <tcp_close_shutdown_fin+0x60>
 801d42c:	2b03      	cmp	r3, #3
 801d42e:	d126      	bne.n	801d47e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 801d430:	6878      	ldr	r0, [r7, #4]
 801d432:	f003 fd77 	bl	8020f24 <tcp_send_fin>
 801d436:	4603      	mov	r3, r0
 801d438:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801d43a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d11f      	bne.n	801d482 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	2205      	movs	r2, #5
 801d446:	751a      	strb	r2, [r3, #20]
    }
    break;
 801d448:	e01b      	b.n	801d482 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 801d44a:	6878      	ldr	r0, [r7, #4]
 801d44c:	f003 fd6a 	bl	8020f24 <tcp_send_fin>
 801d450:	4603      	mov	r3, r0
 801d452:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801d454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d114      	bne.n	801d486 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	2205      	movs	r2, #5
 801d460:	751a      	strb	r2, [r3, #20]
    }
    break;
 801d462:	e010      	b.n	801d486 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 801d464:	6878      	ldr	r0, [r7, #4]
 801d466:	f003 fd5d 	bl	8020f24 <tcp_send_fin>
 801d46a:	4603      	mov	r3, r0
 801d46c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801d46e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d472:	2b00      	cmp	r3, #0
 801d474:	d109      	bne.n	801d48a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	2209      	movs	r2, #9
 801d47a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801d47c:	e005      	b.n	801d48a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 801d47e:	2300      	movs	r3, #0
 801d480:	e01c      	b.n	801d4bc <tcp_close_shutdown_fin+0xb8>
    break;
 801d482:	bf00      	nop
 801d484:	e002      	b.n	801d48c <tcp_close_shutdown_fin+0x88>
    break;
 801d486:	bf00      	nop
 801d488:	e000      	b.n	801d48c <tcp_close_shutdown_fin+0x88>
    break;
 801d48a:	bf00      	nop
  }

  if (err == ERR_OK) {
 801d48c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d490:	2b00      	cmp	r3, #0
 801d492:	d103      	bne.n	801d49c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801d494:	6878      	ldr	r0, [r7, #4]
 801d496:	f004 fb9b 	bl	8021bd0 <tcp_output>
 801d49a:	e00d      	b.n	801d4b8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 801d49c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4a4:	d108      	bne.n	801d4b8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	7e9b      	ldrb	r3, [r3, #26]
 801d4aa:	f043 0308 	orr.w	r3, r3, #8
 801d4ae:	b2da      	uxtb	r2, r3
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801d4b4:	2300      	movs	r3, #0
 801d4b6:	e001      	b.n	801d4bc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 801d4b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d4bc:	4618      	mov	r0, r3
 801d4be:	3710      	adds	r7, #16
 801d4c0:	46bd      	mov	sp, r7
 801d4c2:	bd80      	pop	{r7, pc}
 801d4c4:	08028028 	.word	0x08028028
 801d4c8:	08028058 	.word	0x08028058
 801d4cc:	08028064 	.word	0x08028064

0801d4d0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801d4d0:	b580      	push	{r7, lr}
 801d4d2:	b082      	sub	sp, #8
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	7d1b      	ldrb	r3, [r3, #20]
 801d4dc:	2b01      	cmp	r3, #1
 801d4de:	d006      	beq.n	801d4ee <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	7e9b      	ldrb	r3, [r3, #26]
 801d4e4:	f043 0310 	orr.w	r3, r3, #16
 801d4e8:	b2da      	uxtb	r2, r3
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801d4ee:	2101      	movs	r1, #1
 801d4f0:	6878      	ldr	r0, [r7, #4]
 801d4f2:	f7ff fea1 	bl	801d238 <tcp_close_shutdown>
 801d4f6:	4603      	mov	r3, r0
}
 801d4f8:	4618      	mov	r0, r3
 801d4fa:	3708      	adds	r7, #8
 801d4fc:	46bd      	mov	sp, r7
 801d4fe:	bd80      	pop	{r7, pc}

0801d500 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801d500:	b580      	push	{r7, lr}
 801d502:	b084      	sub	sp, #16
 801d504:	af00      	add	r7, sp, #0
 801d506:	60f8      	str	r0, [r7, #12]
 801d508:	60b9      	str	r1, [r7, #8]
 801d50a:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 801d50c:	68fb      	ldr	r3, [r7, #12]
 801d50e:	7d1b      	ldrb	r3, [r3, #20]
 801d510:	2b01      	cmp	r3, #1
 801d512:	d102      	bne.n	801d51a <tcp_shutdown+0x1a>
    return ERR_CONN;
 801d514:	f06f 030a 	mvn.w	r3, #10
 801d518:	e035      	b.n	801d586 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 801d51a:	68bb      	ldr	r3, [r7, #8]
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	d01b      	beq.n	801d558 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 801d520:	68fb      	ldr	r3, [r7, #12]
 801d522:	7e9b      	ldrb	r3, [r3, #26]
 801d524:	f043 0310 	orr.w	r3, r3, #16
 801d528:	b2da      	uxtb	r2, r3
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 801d52e:	687b      	ldr	r3, [r7, #4]
 801d530:	2b00      	cmp	r3, #0
 801d532:	d005      	beq.n	801d540 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801d534:	2101      	movs	r1, #1
 801d536:	68f8      	ldr	r0, [r7, #12]
 801d538:	f7ff fe7e 	bl	801d238 <tcp_close_shutdown>
 801d53c:	4603      	mov	r3, r0
 801d53e:	e022      	b.n	801d586 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801d540:	68fb      	ldr	r3, [r7, #12]
 801d542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d544:	2b00      	cmp	r3, #0
 801d546:	d007      	beq.n	801d558 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d54c:	4618      	mov	r0, r3
 801d54e:	f7ff fb8b 	bl	801cc68 <pbuf_free>
      pcb->refused_data = NULL;
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	2200      	movs	r2, #0
 801d556:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	d012      	beq.n	801d584 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	7d1b      	ldrb	r3, [r3, #20]
 801d562:	2b03      	cmp	r3, #3
 801d564:	db0b      	blt.n	801d57e <tcp_shutdown+0x7e>
 801d566:	2b04      	cmp	r3, #4
 801d568:	dd01      	ble.n	801d56e <tcp_shutdown+0x6e>
 801d56a:	2b07      	cmp	r3, #7
 801d56c:	d107      	bne.n	801d57e <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801d56e:	68bb      	ldr	r3, [r7, #8]
 801d570:	b2db      	uxtb	r3, r3
 801d572:	4619      	mov	r1, r3
 801d574:	68f8      	ldr	r0, [r7, #12]
 801d576:	f7ff fe5f 	bl	801d238 <tcp_close_shutdown>
 801d57a:	4603      	mov	r3, r0
 801d57c:	e003      	b.n	801d586 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 801d57e:	f06f 030a 	mvn.w	r3, #10
 801d582:	e000      	b.n	801d586 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 801d584:	2300      	movs	r3, #0
}
 801d586:	4618      	mov	r0, r3
 801d588:	3710      	adds	r7, #16
 801d58a:	46bd      	mov	sp, r7
 801d58c:	bd80      	pop	{r7, pc}
	...

0801d590 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801d590:	b580      	push	{r7, lr}
 801d592:	b08c      	sub	sp, #48	; 0x30
 801d594:	af02      	add	r7, sp, #8
 801d596:	6078      	str	r0, [r7, #4]
 801d598:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d59a:	687b      	ldr	r3, [r7, #4]
 801d59c:	7d1b      	ldrb	r3, [r3, #20]
 801d59e:	2b01      	cmp	r3, #1
 801d5a0:	d106      	bne.n	801d5b0 <tcp_abandon+0x20>
 801d5a2:	4b4d      	ldr	r3, [pc, #308]	; (801d6d8 <tcp_abandon+0x148>)
 801d5a4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d5a8:	494c      	ldr	r1, [pc, #304]	; (801d6dc <tcp_abandon+0x14c>)
 801d5aa:	484d      	ldr	r0, [pc, #308]	; (801d6e0 <tcp_abandon+0x150>)
 801d5ac:	f008 fab8 	bl	8025b20 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	7d1b      	ldrb	r3, [r3, #20]
 801d5b4:	2b0a      	cmp	r3, #10
 801d5b6:	d108      	bne.n	801d5ca <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801d5b8:	6879      	ldr	r1, [r7, #4]
 801d5ba:	484a      	ldr	r0, [pc, #296]	; (801d6e4 <tcp_abandon+0x154>)
 801d5bc:	f001 f906 	bl	801e7cc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 801d5c0:	6879      	ldr	r1, [r7, #4]
 801d5c2:	2001      	movs	r0, #1
 801d5c4:	f7fe fdf6 	bl	801c1b4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 801d5c8:	e081      	b.n	801d6ce <tcp_abandon+0x13e>
    int send_rst = 0;
 801d5ca:	2300      	movs	r3, #0
 801d5cc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801d5ce:	2300      	movs	r3, #0
 801d5d0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d5d6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5dc:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 801d5de:	687b      	ldr	r3, [r7, #4]
 801d5e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d5e4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	691b      	ldr	r3, [r3, #16]
 801d5ea:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	7d1b      	ldrb	r3, [r3, #20]
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	d126      	bne.n	801d642 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	8adb      	ldrh	r3, [r3, #22]
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d02e      	beq.n	801d65a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d5fc:	4b3a      	ldr	r3, [pc, #232]	; (801d6e8 <tcp_abandon+0x158>)
 801d5fe:	681a      	ldr	r2, [r3, #0]
 801d600:	687b      	ldr	r3, [r7, #4]
 801d602:	429a      	cmp	r2, r3
 801d604:	d105      	bne.n	801d612 <tcp_abandon+0x82>
 801d606:	4b38      	ldr	r3, [pc, #224]	; (801d6e8 <tcp_abandon+0x158>)
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	68db      	ldr	r3, [r3, #12]
 801d60c:	4a36      	ldr	r2, [pc, #216]	; (801d6e8 <tcp_abandon+0x158>)
 801d60e:	6013      	str	r3, [r2, #0]
 801d610:	e013      	b.n	801d63a <tcp_abandon+0xaa>
 801d612:	4b35      	ldr	r3, [pc, #212]	; (801d6e8 <tcp_abandon+0x158>)
 801d614:	681b      	ldr	r3, [r3, #0]
 801d616:	61fb      	str	r3, [r7, #28]
 801d618:	e00c      	b.n	801d634 <tcp_abandon+0xa4>
 801d61a:	69fb      	ldr	r3, [r7, #28]
 801d61c:	68da      	ldr	r2, [r3, #12]
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	429a      	cmp	r2, r3
 801d622:	d104      	bne.n	801d62e <tcp_abandon+0x9e>
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	68da      	ldr	r2, [r3, #12]
 801d628:	69fb      	ldr	r3, [r7, #28]
 801d62a:	60da      	str	r2, [r3, #12]
 801d62c:	e005      	b.n	801d63a <tcp_abandon+0xaa>
 801d62e:	69fb      	ldr	r3, [r7, #28]
 801d630:	68db      	ldr	r3, [r3, #12]
 801d632:	61fb      	str	r3, [r7, #28]
 801d634:	69fb      	ldr	r3, [r7, #28]
 801d636:	2b00      	cmp	r3, #0
 801d638:	d1ef      	bne.n	801d61a <tcp_abandon+0x8a>
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	2200      	movs	r2, #0
 801d63e:	60da      	str	r2, [r3, #12]
 801d640:	e00b      	b.n	801d65a <tcp_abandon+0xca>
      send_rst = reset;
 801d642:	683b      	ldr	r3, [r7, #0]
 801d644:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	8adb      	ldrh	r3, [r3, #22]
 801d64a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d64c:	6879      	ldr	r1, [r7, #4]
 801d64e:	4827      	ldr	r0, [pc, #156]	; (801d6ec <tcp_abandon+0x15c>)
 801d650:	f001 f8bc 	bl	801e7cc <tcp_pcb_remove>
 801d654:	4b26      	ldr	r3, [pc, #152]	; (801d6f0 <tcp_abandon+0x160>)
 801d656:	2201      	movs	r2, #1
 801d658:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d004      	beq.n	801d66c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 801d662:	687b      	ldr	r3, [r7, #4]
 801d664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d666:	4618      	mov	r0, r3
 801d668:	f000 fe05 	bl	801e276 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d670:	2b00      	cmp	r3, #0
 801d672:	d004      	beq.n	801d67e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d678:	4618      	mov	r0, r3
 801d67a:	f000 fdfc 	bl	801e276 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 801d67e:	687b      	ldr	r3, [r7, #4]
 801d680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d682:	2b00      	cmp	r3, #0
 801d684:	d004      	beq.n	801d690 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d68a:	4618      	mov	r0, r3
 801d68c:	f000 fdf3 	bl	801e276 <tcp_segs_free>
    if (send_rst) {
 801d690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d692:	2b00      	cmp	r3, #0
 801d694:	d00c      	beq.n	801d6b0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801d696:	687a      	ldr	r2, [r7, #4]
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	1d19      	adds	r1, r3, #4
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	8b1b      	ldrh	r3, [r3, #24]
 801d6a0:	9301      	str	r3, [sp, #4]
 801d6a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d6a4:	9300      	str	r3, [sp, #0]
 801d6a6:	460b      	mov	r3, r1
 801d6a8:	6979      	ldr	r1, [r7, #20]
 801d6aa:	69b8      	ldr	r0, [r7, #24]
 801d6ac:	f004 fd18 	bl	80220e0 <tcp_rst>
    last_state = pcb->state;
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	7d1b      	ldrb	r3, [r3, #20]
 801d6b4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 801d6b6:	6879      	ldr	r1, [r7, #4]
 801d6b8:	2001      	movs	r0, #1
 801d6ba:	f7fe fd7b 	bl	801c1b4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d6be:	693b      	ldr	r3, [r7, #16]
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	d004      	beq.n	801d6ce <tcp_abandon+0x13e>
 801d6c4:	693b      	ldr	r3, [r7, #16]
 801d6c6:	f06f 010c 	mvn.w	r1, #12
 801d6ca:	68f8      	ldr	r0, [r7, #12]
 801d6cc:	4798      	blx	r3
}
 801d6ce:	bf00      	nop
 801d6d0:	3728      	adds	r7, #40	; 0x28
 801d6d2:	46bd      	mov	sp, r7
 801d6d4:	bd80      	pop	{r7, pc}
 801d6d6:	bf00      	nop
 801d6d8:	08028028 	.word	0x08028028
 801d6dc:	080280c0 	.word	0x080280c0
 801d6e0:	08028064 	.word	0x08028064
 801d6e4:	20008c40 	.word	0x20008c40
 801d6e8:	20008c3c 	.word	0x20008c3c
 801d6ec:	20008c30 	.word	0x20008c30
 801d6f0:	20008c2c 	.word	0x20008c2c

0801d6f4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801d6f4:	b580      	push	{r7, lr}
 801d6f6:	b082      	sub	sp, #8
 801d6f8:	af00      	add	r7, sp, #0
 801d6fa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801d6fc:	2101      	movs	r1, #1
 801d6fe:	6878      	ldr	r0, [r7, #4]
 801d700:	f7ff ff46 	bl	801d590 <tcp_abandon>
}
 801d704:	bf00      	nop
 801d706:	3708      	adds	r7, #8
 801d708:	46bd      	mov	sp, r7
 801d70a:	bd80      	pop	{r7, pc}

0801d70c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d70c:	b580      	push	{r7, lr}
 801d70e:	b088      	sub	sp, #32
 801d710:	af00      	add	r7, sp, #0
 801d712:	60f8      	str	r0, [r7, #12]
 801d714:	60b9      	str	r1, [r7, #8]
 801d716:	4613      	mov	r3, r2
 801d718:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801d71a:	2304      	movs	r3, #4
 801d71c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801d71e:	68bb      	ldr	r3, [r7, #8]
 801d720:	2b00      	cmp	r3, #0
 801d722:	d101      	bne.n	801d728 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801d724:	4b3c      	ldr	r3, [pc, #240]	; (801d818 <tcp_bind+0x10c>)
 801d726:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801d728:	68fb      	ldr	r3, [r7, #12]
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	d002      	beq.n	801d734 <tcp_bind+0x28>
 801d72e:	68bb      	ldr	r3, [r7, #8]
 801d730:	2b00      	cmp	r3, #0
 801d732:	d102      	bne.n	801d73a <tcp_bind+0x2e>
    return ERR_VAL;
 801d734:	f06f 0305 	mvn.w	r3, #5
 801d738:	e06a      	b.n	801d810 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801d73a:	68fb      	ldr	r3, [r7, #12]
 801d73c:	7d1b      	ldrb	r3, [r3, #20]
 801d73e:	2b00      	cmp	r3, #0
 801d740:	d009      	beq.n	801d756 <tcp_bind+0x4a>
 801d742:	4b36      	ldr	r3, [pc, #216]	; (801d81c <tcp_bind+0x110>)
 801d744:	f44f 7211 	mov.w	r2, #580	; 0x244
 801d748:	4935      	ldr	r1, [pc, #212]	; (801d820 <tcp_bind+0x114>)
 801d74a:	4836      	ldr	r0, [pc, #216]	; (801d824 <tcp_bind+0x118>)
 801d74c:	f008 f9e8 	bl	8025b20 <iprintf>
 801d750:	f06f 0305 	mvn.w	r3, #5
 801d754:	e05c      	b.n	801d810 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 801d756:	88fb      	ldrh	r3, [r7, #6]
 801d758:	2b00      	cmp	r3, #0
 801d75a:	d109      	bne.n	801d770 <tcp_bind+0x64>
    port = tcp_new_port();
 801d75c:	f000 f9ba 	bl	801dad4 <tcp_new_port>
 801d760:	4603      	mov	r3, r0
 801d762:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801d764:	88fb      	ldrh	r3, [r7, #6]
 801d766:	2b00      	cmp	r3, #0
 801d768:	d135      	bne.n	801d7d6 <tcp_bind+0xca>
      return ERR_BUF;
 801d76a:	f06f 0301 	mvn.w	r3, #1
 801d76e:	e04f      	b.n	801d810 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801d770:	2300      	movs	r3, #0
 801d772:	61fb      	str	r3, [r7, #28]
 801d774:	e02b      	b.n	801d7ce <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801d776:	4a2c      	ldr	r2, [pc, #176]	; (801d828 <tcp_bind+0x11c>)
 801d778:	69fb      	ldr	r3, [r7, #28]
 801d77a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	61bb      	str	r3, [r7, #24]
 801d782:	e01e      	b.n	801d7c2 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 801d784:	69bb      	ldr	r3, [r7, #24]
 801d786:	8adb      	ldrh	r3, [r3, #22]
 801d788:	88fa      	ldrh	r2, [r7, #6]
 801d78a:	429a      	cmp	r2, r3
 801d78c:	d116      	bne.n	801d7bc <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801d78e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801d790:	2b00      	cmp	r3, #0
 801d792:	d010      	beq.n	801d7b6 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 801d794:	69bb      	ldr	r3, [r7, #24]
 801d796:	681b      	ldr	r3, [r3, #0]
 801d798:	2b00      	cmp	r3, #0
 801d79a:	d00c      	beq.n	801d7b6 <tcp_bind+0xaa>
 801d79c:	68bb      	ldr	r3, [r7, #8]
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d009      	beq.n	801d7b6 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 801d7a2:	68bb      	ldr	r3, [r7, #8]
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d005      	beq.n	801d7b6 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801d7aa:	69bb      	ldr	r3, [r7, #24]
 801d7ac:	681a      	ldr	r2, [r3, #0]
 801d7ae:	68bb      	ldr	r3, [r7, #8]
 801d7b0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801d7b2:	429a      	cmp	r2, r3
 801d7b4:	d102      	bne.n	801d7bc <tcp_bind+0xb0>
              return ERR_USE;
 801d7b6:	f06f 0307 	mvn.w	r3, #7
 801d7ba:	e029      	b.n	801d810 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801d7bc:	69bb      	ldr	r3, [r7, #24]
 801d7be:	68db      	ldr	r3, [r3, #12]
 801d7c0:	61bb      	str	r3, [r7, #24]
 801d7c2:	69bb      	ldr	r3, [r7, #24]
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d1dd      	bne.n	801d784 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 801d7c8:	69fb      	ldr	r3, [r7, #28]
 801d7ca:	3301      	adds	r3, #1
 801d7cc:	61fb      	str	r3, [r7, #28]
 801d7ce:	69fa      	ldr	r2, [r7, #28]
 801d7d0:	697b      	ldr	r3, [r7, #20]
 801d7d2:	429a      	cmp	r2, r3
 801d7d4:	dbcf      	blt.n	801d776 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 801d7d6:	68bb      	ldr	r3, [r7, #8]
 801d7d8:	2b00      	cmp	r3, #0
 801d7da:	d00c      	beq.n	801d7f6 <tcp_bind+0xea>
 801d7dc:	68bb      	ldr	r3, [r7, #8]
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d008      	beq.n	801d7f6 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801d7e4:	68bb      	ldr	r3, [r7, #8]
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	d002      	beq.n	801d7f0 <tcp_bind+0xe4>
 801d7ea:	68bb      	ldr	r3, [r7, #8]
 801d7ec:	681b      	ldr	r3, [r3, #0]
 801d7ee:	e000      	b.n	801d7f2 <tcp_bind+0xe6>
 801d7f0:	2300      	movs	r3, #0
 801d7f2:	68fa      	ldr	r2, [r7, #12]
 801d7f4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	88fa      	ldrh	r2, [r7, #6]
 801d7fa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801d7fc:	4b0b      	ldr	r3, [pc, #44]	; (801d82c <tcp_bind+0x120>)
 801d7fe:	681a      	ldr	r2, [r3, #0]
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	60da      	str	r2, [r3, #12]
 801d804:	4a09      	ldr	r2, [pc, #36]	; (801d82c <tcp_bind+0x120>)
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	6013      	str	r3, [r2, #0]
 801d80a:	f004 feb7 	bl	802257c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801d80e:	2300      	movs	r3, #0
}
 801d810:	4618      	mov	r0, r3
 801d812:	3720      	adds	r7, #32
 801d814:	46bd      	mov	sp, r7
 801d816:	bd80      	pop	{r7, pc}
 801d818:	0802b34c 	.word	0x0802b34c
 801d81c:	08028028 	.word	0x08028028
 801d820:	080280f4 	.word	0x080280f4
 801d824:	08028064 	.word	0x08028064
 801d828:	0802b438 	.word	0x0802b438
 801d82c:	20008c3c 	.word	0x20008c3c

0801d830 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801d830:	b580      	push	{r7, lr}
 801d832:	b084      	sub	sp, #16
 801d834:	af00      	add	r7, sp, #0
 801d836:	60f8      	str	r0, [r7, #12]
 801d838:	60b9      	str	r1, [r7, #8]
 801d83a:	4613      	mov	r3, r2
 801d83c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 801d83e:	68b8      	ldr	r0, [r7, #8]
 801d840:	f7ff ff58 	bl	801d6f4 <tcp_abort>

  return ERR_ABRT;
 801d844:	f06f 030c 	mvn.w	r3, #12
}
 801d848:	4618      	mov	r0, r3
 801d84a:	3710      	adds	r7, #16
 801d84c:	46bd      	mov	sp, r7
 801d84e:	bd80      	pop	{r7, pc}

0801d850 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801d850:	b580      	push	{r7, lr}
 801d852:	b088      	sub	sp, #32
 801d854:	af00      	add	r7, sp, #0
 801d856:	60f8      	str	r0, [r7, #12]
 801d858:	460b      	mov	r3, r1
 801d85a:	607a      	str	r2, [r7, #4]
 801d85c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801d85e:	2300      	movs	r3, #0
 801d860:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	7d1b      	ldrb	r3, [r3, #20]
 801d866:	2b00      	cmp	r3, #0
 801d868:	d009      	beq.n	801d87e <tcp_listen_with_backlog_and_err+0x2e>
 801d86a:	4b3f      	ldr	r3, [pc, #252]	; (801d968 <tcp_listen_with_backlog_and_err+0x118>)
 801d86c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 801d870:	493e      	ldr	r1, [pc, #248]	; (801d96c <tcp_listen_with_backlog_and_err+0x11c>)
 801d872:	483f      	ldr	r0, [pc, #252]	; (801d970 <tcp_listen_with_backlog_and_err+0x120>)
 801d874:	f008 f954 	bl	8025b20 <iprintf>
 801d878:	23f1      	movs	r3, #241	; 0xf1
 801d87a:	76fb      	strb	r3, [r7, #27]
 801d87c:	e069      	b.n	801d952 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	7d1b      	ldrb	r3, [r3, #20]
 801d882:	2b01      	cmp	r3, #1
 801d884:	d104      	bne.n	801d890 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 801d886:	68fb      	ldr	r3, [r7, #12]
 801d888:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801d88a:	23f7      	movs	r3, #247	; 0xf7
 801d88c:	76fb      	strb	r3, [r7, #27]
    goto done;
 801d88e:	e060      	b.n	801d952 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801d890:	2002      	movs	r0, #2
 801d892:	f7fe fc3d 	bl	801c110 <memp_malloc>
 801d896:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801d898:	69fb      	ldr	r3, [r7, #28]
 801d89a:	2b00      	cmp	r3, #0
 801d89c:	d102      	bne.n	801d8a4 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 801d89e:	23ff      	movs	r3, #255	; 0xff
 801d8a0:	76fb      	strb	r3, [r7, #27]
    goto done;
 801d8a2:	e056      	b.n	801d952 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801d8a4:	68fb      	ldr	r3, [r7, #12]
 801d8a6:	691a      	ldr	r2, [r3, #16]
 801d8a8:	69fb      	ldr	r3, [r7, #28]
 801d8aa:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	8ada      	ldrh	r2, [r3, #22]
 801d8b0:	69fb      	ldr	r3, [r7, #28]
 801d8b2:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801d8b4:	69fb      	ldr	r3, [r7, #28]
 801d8b6:	2201      	movs	r2, #1
 801d8b8:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	7d5a      	ldrb	r2, [r3, #21]
 801d8be:	69fb      	ldr	r3, [r7, #28]
 801d8c0:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	7a1a      	ldrb	r2, [r3, #8]
 801d8c6:	69fb      	ldr	r3, [r7, #28]
 801d8c8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	7a9a      	ldrb	r2, [r3, #10]
 801d8ce:	69fb      	ldr	r3, [r7, #28]
 801d8d0:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	7a5a      	ldrb	r2, [r3, #9]
 801d8d6:	69fb      	ldr	r3, [r7, #28]
 801d8d8:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	681a      	ldr	r2, [r3, #0]
 801d8de:	69fb      	ldr	r3, [r7, #28]
 801d8e0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	8adb      	ldrh	r3, [r3, #22]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d021      	beq.n	801d92e <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801d8ea:	4b22      	ldr	r3, [pc, #136]	; (801d974 <tcp_listen_with_backlog_and_err+0x124>)
 801d8ec:	681a      	ldr	r2, [r3, #0]
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	429a      	cmp	r2, r3
 801d8f2:	d105      	bne.n	801d900 <tcp_listen_with_backlog_and_err+0xb0>
 801d8f4:	4b1f      	ldr	r3, [pc, #124]	; (801d974 <tcp_listen_with_backlog_and_err+0x124>)
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	68db      	ldr	r3, [r3, #12]
 801d8fa:	4a1e      	ldr	r2, [pc, #120]	; (801d974 <tcp_listen_with_backlog_and_err+0x124>)
 801d8fc:	6013      	str	r3, [r2, #0]
 801d8fe:	e013      	b.n	801d928 <tcp_listen_with_backlog_and_err+0xd8>
 801d900:	4b1c      	ldr	r3, [pc, #112]	; (801d974 <tcp_listen_with_backlog_and_err+0x124>)
 801d902:	681b      	ldr	r3, [r3, #0]
 801d904:	617b      	str	r3, [r7, #20]
 801d906:	e00c      	b.n	801d922 <tcp_listen_with_backlog_and_err+0xd2>
 801d908:	697b      	ldr	r3, [r7, #20]
 801d90a:	68da      	ldr	r2, [r3, #12]
 801d90c:	68fb      	ldr	r3, [r7, #12]
 801d90e:	429a      	cmp	r2, r3
 801d910:	d104      	bne.n	801d91c <tcp_listen_with_backlog_and_err+0xcc>
 801d912:	68fb      	ldr	r3, [r7, #12]
 801d914:	68da      	ldr	r2, [r3, #12]
 801d916:	697b      	ldr	r3, [r7, #20]
 801d918:	60da      	str	r2, [r3, #12]
 801d91a:	e005      	b.n	801d928 <tcp_listen_with_backlog_and_err+0xd8>
 801d91c:	697b      	ldr	r3, [r7, #20]
 801d91e:	68db      	ldr	r3, [r3, #12]
 801d920:	617b      	str	r3, [r7, #20]
 801d922:	697b      	ldr	r3, [r7, #20]
 801d924:	2b00      	cmp	r3, #0
 801d926:	d1ef      	bne.n	801d908 <tcp_listen_with_backlog_and_err+0xb8>
 801d928:	68fb      	ldr	r3, [r7, #12]
 801d92a:	2200      	movs	r2, #0
 801d92c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 801d92e:	68f9      	ldr	r1, [r7, #12]
 801d930:	2001      	movs	r0, #1
 801d932:	f7fe fc3f 	bl	801c1b4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801d936:	69fb      	ldr	r3, [r7, #28]
 801d938:	4a0f      	ldr	r2, [pc, #60]	; (801d978 <tcp_listen_with_backlog_and_err+0x128>)
 801d93a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801d93c:	4b0f      	ldr	r3, [pc, #60]	; (801d97c <tcp_listen_with_backlog_and_err+0x12c>)
 801d93e:	681a      	ldr	r2, [r3, #0]
 801d940:	69fb      	ldr	r3, [r7, #28]
 801d942:	60da      	str	r2, [r3, #12]
 801d944:	4a0d      	ldr	r2, [pc, #52]	; (801d97c <tcp_listen_with_backlog_and_err+0x12c>)
 801d946:	69fb      	ldr	r3, [r7, #28]
 801d948:	6013      	str	r3, [r2, #0]
 801d94a:	f004 fe17 	bl	802257c <tcp_timer_needed>
  res = ERR_OK;
 801d94e:	2300      	movs	r3, #0
 801d950:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	2b00      	cmp	r3, #0
 801d956:	d002      	beq.n	801d95e <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	7efa      	ldrb	r2, [r7, #27]
 801d95c:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801d95e:	69fb      	ldr	r3, [r7, #28]
}
 801d960:	4618      	mov	r0, r3
 801d962:	3720      	adds	r7, #32
 801d964:	46bd      	mov	sp, r7
 801d966:	bd80      	pop	{r7, pc}
 801d968:	08028028 	.word	0x08028028
 801d96c:	0802811c 	.word	0x0802811c
 801d970:	08028064 	.word	0x08028064
 801d974:	20008c3c 	.word	0x20008c3c
 801d978:	0801d831 	.word	0x0801d831
 801d97c:	20008c38 	.word	0x20008c38

0801d980 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801d980:	b580      	push	{r7, lr}
 801d982:	b084      	sub	sp, #16
 801d984:	af00      	add	r7, sp, #0
 801d986:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d98c:	687a      	ldr	r2, [r7, #4]
 801d98e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801d990:	4413      	add	r3, r2
 801d992:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d998:	687a      	ldr	r2, [r7, #4]
 801d99a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801d99c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801d9a0:	d802      	bhi.n	801d9a8 <tcp_update_rcv_ann_wnd+0x28>
 801d9a2:	687a      	ldr	r2, [r7, #4]
 801d9a4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801d9a6:	e001      	b.n	801d9ac <tcp_update_rcv_ann_wnd+0x2c>
 801d9a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d9ac:	4413      	add	r3, r2
 801d9ae:	68fa      	ldr	r2, [r7, #12]
 801d9b0:	1ad3      	subs	r3, r2, r3
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	db08      	blt.n	801d9c8 <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801d9b6:	687b      	ldr	r3, [r7, #4]
 801d9b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9c2:	68fa      	ldr	r2, [r7, #12]
 801d9c4:	1ad3      	subs	r3, r2, r3
 801d9c6:	e020      	b.n	801da0a <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801d9c8:	687b      	ldr	r3, [r7, #4]
 801d9ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9d0:	1ad3      	subs	r3, r2, r3
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	dd03      	ble.n	801d9de <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	2200      	movs	r2, #0
 801d9da:	855a      	strh	r2, [r3, #42]	; 0x2a
 801d9dc:	e014      	b.n	801da08 <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9e6:	1ad3      	subs	r3, r2, r3
 801d9e8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801d9ea:	68bb      	ldr	r3, [r7, #8]
 801d9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d9f0:	d306      	bcc.n	801da00 <tcp_update_rcv_ann_wnd+0x80>
 801d9f2:	4b08      	ldr	r3, [pc, #32]	; (801da14 <tcp_update_rcv_ann_wnd+0x94>)
 801d9f4:	f44f 7242 	mov.w	r2, #776	; 0x308
 801d9f8:	4907      	ldr	r1, [pc, #28]	; (801da18 <tcp_update_rcv_ann_wnd+0x98>)
 801d9fa:	4808      	ldr	r0, [pc, #32]	; (801da1c <tcp_update_rcv_ann_wnd+0x9c>)
 801d9fc:	f008 f890 	bl	8025b20 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801da00:	68bb      	ldr	r3, [r7, #8]
 801da02:	b29a      	uxth	r2, r3
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801da08:	2300      	movs	r3, #0
  }
}
 801da0a:	4618      	mov	r0, r3
 801da0c:	3710      	adds	r7, #16
 801da0e:	46bd      	mov	sp, r7
 801da10:	bd80      	pop	{r7, pc}
 801da12:	bf00      	nop
 801da14:	08028028 	.word	0x08028028
 801da18:	08028140 	.word	0x08028140
 801da1c:	08028064 	.word	0x08028064

0801da20 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801da20:	b580      	push	{r7, lr}
 801da22:	b084      	sub	sp, #16
 801da24:	af00      	add	r7, sp, #0
 801da26:	6078      	str	r0, [r7, #4]
 801da28:	460b      	mov	r3, r1
 801da2a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	7d1b      	ldrb	r3, [r3, #20]
 801da30:	2b01      	cmp	r3, #1
 801da32:	d106      	bne.n	801da42 <tcp_recved+0x22>
 801da34:	4b23      	ldr	r3, [pc, #140]	; (801dac4 <tcp_recved+0xa4>)
 801da36:	f44f 7248 	mov.w	r2, #800	; 0x320
 801da3a:	4923      	ldr	r1, [pc, #140]	; (801dac8 <tcp_recved+0xa8>)
 801da3c:	4823      	ldr	r0, [pc, #140]	; (801dacc <tcp_recved+0xac>)
 801da3e:	f008 f86f 	bl	8025b20 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801da46:	887b      	ldrh	r3, [r7, #2]
 801da48:	4413      	add	r3, r2
 801da4a:	b29a      	uxth	r2, r3
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801da54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801da58:	d904      	bls.n	801da64 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801da60:	851a      	strh	r2, [r3, #40]	; 0x28
 801da62:	e017      	b.n	801da94 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d113      	bne.n	801da94 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	7d1b      	ldrb	r3, [r3, #20]
 801da70:	2b07      	cmp	r3, #7
 801da72:	d003      	beq.n	801da7c <tcp_recved+0x5c>
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	7d1b      	ldrb	r3, [r3, #20]
 801da78:	2b09      	cmp	r3, #9
 801da7a:	d104      	bne.n	801da86 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801da82:	851a      	strh	r2, [r3, #40]	; 0x28
 801da84:	e006      	b.n	801da94 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 801da86:	4b0f      	ldr	r3, [pc, #60]	; (801dac4 <tcp_recved+0xa4>)
 801da88:	f240 322d 	movw	r2, #813	; 0x32d
 801da8c:	4910      	ldr	r1, [pc, #64]	; (801dad0 <tcp_recved+0xb0>)
 801da8e:	480f      	ldr	r0, [pc, #60]	; (801dacc <tcp_recved+0xac>)
 801da90:	f008 f846 	bl	8025b20 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801da94:	6878      	ldr	r0, [r7, #4]
 801da96:	f7ff ff73 	bl	801d980 <tcp_update_rcv_ann_wnd>
 801da9a:	4603      	mov	r3, r0
 801da9c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801daa4:	db09      	blt.n	801daba <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	7e9b      	ldrb	r3, [r3, #26]
 801daaa:	f043 0302 	orr.w	r3, r3, #2
 801daae:	b2da      	uxtb	r2, r3
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801dab4:	6878      	ldr	r0, [r7, #4]
 801dab6:	f004 f88b 	bl	8021bd0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801daba:	bf00      	nop
 801dabc:	3710      	adds	r7, #16
 801dabe:	46bd      	mov	sp, r7
 801dac0:	bd80      	pop	{r7, pc}
 801dac2:	bf00      	nop
 801dac4:	08028028 	.word	0x08028028
 801dac8:	0802815c 	.word	0x0802815c
 801dacc:	08028064 	.word	0x08028064
 801dad0:	08028184 	.word	0x08028184

0801dad4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801dad4:	b480      	push	{r7}
 801dad6:	b083      	sub	sp, #12
 801dad8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801dada:	2300      	movs	r3, #0
 801dadc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801dade:	4b1d      	ldr	r3, [pc, #116]	; (801db54 <tcp_new_port+0x80>)
 801dae0:	881b      	ldrh	r3, [r3, #0]
 801dae2:	1c5a      	adds	r2, r3, #1
 801dae4:	b291      	uxth	r1, r2
 801dae6:	4a1b      	ldr	r2, [pc, #108]	; (801db54 <tcp_new_port+0x80>)
 801dae8:	8011      	strh	r1, [r2, #0]
 801daea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801daee:	4293      	cmp	r3, r2
 801daf0:	d103      	bne.n	801dafa <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801daf2:	4b18      	ldr	r3, [pc, #96]	; (801db54 <tcp_new_port+0x80>)
 801daf4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801daf8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801dafa:	2300      	movs	r3, #0
 801dafc:	71fb      	strb	r3, [r7, #7]
 801dafe:	e01e      	b.n	801db3e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801db00:	79fb      	ldrb	r3, [r7, #7]
 801db02:	4a15      	ldr	r2, [pc, #84]	; (801db58 <tcp_new_port+0x84>)
 801db04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801db08:	681b      	ldr	r3, [r3, #0]
 801db0a:	603b      	str	r3, [r7, #0]
 801db0c:	e011      	b.n	801db32 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 801db0e:	683b      	ldr	r3, [r7, #0]
 801db10:	8ada      	ldrh	r2, [r3, #22]
 801db12:	4b10      	ldr	r3, [pc, #64]	; (801db54 <tcp_new_port+0x80>)
 801db14:	881b      	ldrh	r3, [r3, #0]
 801db16:	429a      	cmp	r2, r3
 801db18:	d108      	bne.n	801db2c <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801db1a:	88bb      	ldrh	r3, [r7, #4]
 801db1c:	3301      	adds	r3, #1
 801db1e:	80bb      	strh	r3, [r7, #4]
 801db20:	88bb      	ldrh	r3, [r7, #4]
 801db22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801db26:	d3da      	bcc.n	801dade <tcp_new_port+0xa>
          return 0;
 801db28:	2300      	movs	r3, #0
 801db2a:	e00d      	b.n	801db48 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801db2c:	683b      	ldr	r3, [r7, #0]
 801db2e:	68db      	ldr	r3, [r3, #12]
 801db30:	603b      	str	r3, [r7, #0]
 801db32:	683b      	ldr	r3, [r7, #0]
 801db34:	2b00      	cmp	r3, #0
 801db36:	d1ea      	bne.n	801db0e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801db38:	79fb      	ldrb	r3, [r7, #7]
 801db3a:	3301      	adds	r3, #1
 801db3c:	71fb      	strb	r3, [r7, #7]
 801db3e:	79fb      	ldrb	r3, [r7, #7]
 801db40:	2b03      	cmp	r3, #3
 801db42:	d9dd      	bls.n	801db00 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801db44:	4b03      	ldr	r3, [pc, #12]	; (801db54 <tcp_new_port+0x80>)
 801db46:	881b      	ldrh	r3, [r3, #0]
}
 801db48:	4618      	mov	r0, r3
 801db4a:	370c      	adds	r7, #12
 801db4c:	46bd      	mov	sp, r7
 801db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db52:	4770      	bx	lr
 801db54:	20000008 	.word	0x20000008
 801db58:	0802b438 	.word	0x0802b438

0801db5c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801db5c:	b5b0      	push	{r4, r5, r7, lr}
 801db5e:	b08c      	sub	sp, #48	; 0x30
 801db60:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801db62:	2300      	movs	r3, #0
 801db64:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 801db66:	4b97      	ldr	r3, [pc, #604]	; (801ddc4 <tcp_slowtmr+0x268>)
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	3301      	adds	r3, #1
 801db6c:	4a95      	ldr	r2, [pc, #596]	; (801ddc4 <tcp_slowtmr+0x268>)
 801db6e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801db70:	4b95      	ldr	r3, [pc, #596]	; (801ddc8 <tcp_slowtmr+0x26c>)
 801db72:	781b      	ldrb	r3, [r3, #0]
 801db74:	3301      	adds	r3, #1
 801db76:	b2da      	uxtb	r2, r3
 801db78:	4b93      	ldr	r3, [pc, #588]	; (801ddc8 <tcp_slowtmr+0x26c>)
 801db7a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801db7c:	2300      	movs	r3, #0
 801db7e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 801db80:	4b92      	ldr	r3, [pc, #584]	; (801ddcc <tcp_slowtmr+0x270>)
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801db86:	e227      	b.n	801dfd8 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db8a:	7d1b      	ldrb	r3, [r3, #20]
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d106      	bne.n	801db9e <tcp_slowtmr+0x42>
 801db90:	4b8f      	ldr	r3, [pc, #572]	; (801ddd0 <tcp_slowtmr+0x274>)
 801db92:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 801db96:	498f      	ldr	r1, [pc, #572]	; (801ddd4 <tcp_slowtmr+0x278>)
 801db98:	488f      	ldr	r0, [pc, #572]	; (801ddd8 <tcp_slowtmr+0x27c>)
 801db9a:	f007 ffc1 	bl	8025b20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801db9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dba0:	7d1b      	ldrb	r3, [r3, #20]
 801dba2:	2b01      	cmp	r3, #1
 801dba4:	d106      	bne.n	801dbb4 <tcp_slowtmr+0x58>
 801dba6:	4b8a      	ldr	r3, [pc, #552]	; (801ddd0 <tcp_slowtmr+0x274>)
 801dba8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801dbac:	498b      	ldr	r1, [pc, #556]	; (801dddc <tcp_slowtmr+0x280>)
 801dbae:	488a      	ldr	r0, [pc, #552]	; (801ddd8 <tcp_slowtmr+0x27c>)
 801dbb0:	f007 ffb6 	bl	8025b20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801dbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbb6:	7d1b      	ldrb	r3, [r3, #20]
 801dbb8:	2b0a      	cmp	r3, #10
 801dbba:	d106      	bne.n	801dbca <tcp_slowtmr+0x6e>
 801dbbc:	4b84      	ldr	r3, [pc, #528]	; (801ddd0 <tcp_slowtmr+0x274>)
 801dbbe:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801dbc2:	4987      	ldr	r1, [pc, #540]	; (801dde0 <tcp_slowtmr+0x284>)
 801dbc4:	4884      	ldr	r0, [pc, #528]	; (801ddd8 <tcp_slowtmr+0x27c>)
 801dbc6:	f007 ffab 	bl	8025b20 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801dbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbcc:	7f5a      	ldrb	r2, [r3, #29]
 801dbce:	4b7e      	ldr	r3, [pc, #504]	; (801ddc8 <tcp_slowtmr+0x26c>)
 801dbd0:	781b      	ldrb	r3, [r3, #0]
 801dbd2:	429a      	cmp	r2, r3
 801dbd4:	d103      	bne.n	801dbde <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 801dbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbd8:	68db      	ldr	r3, [r3, #12]
 801dbda:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 801dbdc:	e1fc      	b.n	801dfd8 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 801dbde:	4b7a      	ldr	r3, [pc, #488]	; (801ddc8 <tcp_slowtmr+0x26c>)
 801dbe0:	781a      	ldrb	r2, [r3, #0]
 801dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbe4:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 801dbe6:	2300      	movs	r3, #0
 801dbe8:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 801dbea:	2300      	movs	r3, #0
 801dbec:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801dbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbf0:	7d1b      	ldrb	r3, [r3, #20]
 801dbf2:	2b02      	cmp	r3, #2
 801dbf4:	d108      	bne.n	801dc08 <tcp_slowtmr+0xac>
 801dbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dbfc:	2b05      	cmp	r3, #5
 801dbfe:	d903      	bls.n	801dc08 <tcp_slowtmr+0xac>
      ++pcb_remove;
 801dc00:	7ffb      	ldrb	r3, [r7, #31]
 801dc02:	3301      	adds	r3, #1
 801dc04:	77fb      	strb	r3, [r7, #31]
 801dc06:	e0a2      	b.n	801dd4e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 801dc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dc0e:	2b0b      	cmp	r3, #11
 801dc10:	d903      	bls.n	801dc1a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801dc12:	7ffb      	ldrb	r3, [r7, #31]
 801dc14:	3301      	adds	r3, #1
 801dc16:	77fb      	strb	r3, [r7, #31]
 801dc18:	e099      	b.n	801dd4e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801dc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc1c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d032      	beq.n	801dc8a <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 801dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc26:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801dc2a:	3b01      	subs	r3, #1
 801dc2c:	4a6d      	ldr	r2, [pc, #436]	; (801dde4 <tcp_slowtmr+0x288>)
 801dc2e:	5cd3      	ldrb	r3, [r2, r3]
 801dc30:	773b      	strb	r3, [r7, #28]
        if (pcb->persist_cnt < backoff_cnt) {
 801dc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc34:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801dc38:	7f3a      	ldrb	r2, [r7, #28]
 801dc3a:	429a      	cmp	r2, r3
 801dc3c:	d907      	bls.n	801dc4e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 801dc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc40:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801dc44:	3301      	adds	r3, #1
 801dc46:	b2da      	uxtb	r2, r3
 801dc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc4a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 801dc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc50:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801dc54:	7f3a      	ldrb	r2, [r7, #28]
 801dc56:	429a      	cmp	r2, r3
 801dc58:	d879      	bhi.n	801dd4e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 801dc5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dc5c:	f004 fbce 	bl	80223fc <tcp_zero_window_probe>
 801dc60:	4603      	mov	r3, r0
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	d173      	bne.n	801dd4e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 801dc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc68:	2200      	movs	r2, #0
 801dc6a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801dc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc70:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801dc74:	2b06      	cmp	r3, #6
 801dc76:	d86a      	bhi.n	801dd4e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 801dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc7a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801dc7e:	3301      	adds	r3, #1
 801dc80:	b2da      	uxtb	r2, r3
 801dc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc84:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 801dc88:	e061      	b.n	801dd4e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 801dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	db08      	blt.n	801dca6 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 801dc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801dc9a:	b29b      	uxth	r3, r3
 801dc9c:	3301      	adds	r3, #1
 801dc9e:	b29b      	uxth	r3, r3
 801dca0:	b21a      	sxth	r2, r3
 801dca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dca4:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 801dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d04f      	beq.n	801dd4e <tcp_slowtmr+0x1f2>
 801dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcb0:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcb6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801dcba:	429a      	cmp	r2, r3
 801dcbc:	db47      	blt.n	801dd4e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 801dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcc0:	7d1b      	ldrb	r3, [r3, #20]
 801dcc2:	2b02      	cmp	r3, #2
 801dcc4:	d018      	beq.n	801dcf8 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 801dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dccc:	2b0c      	cmp	r3, #12
 801dcce:	bf28      	it	cs
 801dcd0:	230c      	movcs	r3, #12
 801dcd2:	76fb      	strb	r3, [r7, #27]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801dcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcd6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801dcda:	10db      	asrs	r3, r3, #3
 801dcdc:	b21b      	sxth	r3, r3
 801dcde:	461a      	mov	r2, r3
 801dce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dce2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801dce6:	4413      	add	r3, r2
 801dce8:	7efa      	ldrb	r2, [r7, #27]
 801dcea:	493f      	ldr	r1, [pc, #252]	; (801dde8 <tcp_slowtmr+0x28c>)
 801dcec:	5c8a      	ldrb	r2, [r1, r2]
 801dcee:	4093      	lsls	r3, r2
 801dcf0:	b21a      	sxth	r2, r3
 801dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 801dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcfa:	2200      	movs	r2, #0
 801dcfc:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801dcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd00:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801dd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dd0a:	4293      	cmp	r3, r2
 801dd0c:	bf28      	it	cs
 801dd0e:	4613      	movcs	r3, r2
 801dd10:	833b      	strh	r3, [r7, #24]
          pcb->ssthresh = eff_wnd >> 1;
 801dd12:	8b3b      	ldrh	r3, [r7, #24]
 801dd14:	085b      	lsrs	r3, r3, #1
 801dd16:	b29a      	uxth	r2, r3
 801dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd1a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801dd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd20:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd28:	005b      	lsls	r3, r3, #1
 801dd2a:	b29b      	uxth	r3, r3
 801dd2c:	429a      	cmp	r2, r3
 801dd2e:	d206      	bcs.n	801dd3e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 801dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd34:	005b      	lsls	r3, r3, #1
 801dd36:	b29a      	uxth	r2, r3
 801dd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd3a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 801dd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd40:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801dd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 801dd48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dd4a:	f004 fa3d 	bl	80221c8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801dd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd50:	7d1b      	ldrb	r3, [r3, #20]
 801dd52:	2b06      	cmp	r3, #6
 801dd54:	d10f      	bne.n	801dd76 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801dd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd58:	7e9b      	ldrb	r3, [r3, #26]
 801dd5a:	f003 0310 	and.w	r3, r3, #16
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	d009      	beq.n	801dd76 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801dd62:	4b18      	ldr	r3, [pc, #96]	; (801ddc4 <tcp_slowtmr+0x268>)
 801dd64:	681a      	ldr	r2, [r3, #0]
 801dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd68:	6a1b      	ldr	r3, [r3, #32]
 801dd6a:	1ad3      	subs	r3, r2, r3
 801dd6c:	2b28      	cmp	r3, #40	; 0x28
 801dd6e:	d902      	bls.n	801dd76 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801dd70:	7ffb      	ldrb	r3, [r7, #31]
 801dd72:	3301      	adds	r3, #1
 801dd74:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd78:	7a1b      	ldrb	r3, [r3, #8]
 801dd7a:	f003 0308 	and.w	r3, r3, #8
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	d05d      	beq.n	801de3e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 801dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd84:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801dd86:	2b04      	cmp	r3, #4
 801dd88:	d003      	beq.n	801dd92 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 801dd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd8c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 801dd8e:	2b07      	cmp	r3, #7
 801dd90:	d155      	bne.n	801de3e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801dd92:	4b0c      	ldr	r3, [pc, #48]	; (801ddc4 <tcp_slowtmr+0x268>)
 801dd94:	681a      	ldr	r2, [r3, #0]
 801dd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd98:	6a1b      	ldr	r3, [r3, #32]
 801dd9a:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 801dd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dda2:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801dda6:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801ddaa:	4910      	ldr	r1, [pc, #64]	; (801ddec <tcp_slowtmr+0x290>)
 801ddac:	fba1 1303 	umull	r1, r3, r1, r3
 801ddb0:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ddb2:	429a      	cmp	r2, r3
 801ddb4:	d91c      	bls.n	801ddf0 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801ddb6:	7ffb      	ldrb	r3, [r7, #31]
 801ddb8:	3301      	adds	r3, #1
 801ddba:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 801ddbc:	7fbb      	ldrb	r3, [r7, #30]
 801ddbe:	3301      	adds	r3, #1
 801ddc0:	77bb      	strb	r3, [r7, #30]
 801ddc2:	e03c      	b.n	801de3e <tcp_slowtmr+0x2e2>
 801ddc4:	20008c34 	.word	0x20008c34
 801ddc8:	200040f2 	.word	0x200040f2
 801ddcc:	20008c30 	.word	0x20008c30
 801ddd0:	08028028 	.word	0x08028028
 801ddd4:	080281d8 	.word	0x080281d8
 801ddd8:	08028064 	.word	0x08028064
 801dddc:	08028204 	.word	0x08028204
 801dde0:	08028230 	.word	0x08028230
 801dde4:	0802b430 	.word	0x0802b430
 801dde8:	0802b420 	.word	0x0802b420
 801ddec:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ddf0:	4b97      	ldr	r3, [pc, #604]	; (801e050 <tcp_slowtmr+0x4f4>)
 801ddf2:	681a      	ldr	r2, [r3, #0]
 801ddf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddf6:	6a1b      	ldr	r3, [r3, #32]
 801ddf8:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801ddfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddfc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801de00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de02:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801de06:	4618      	mov	r0, r3
 801de08:	4b92      	ldr	r3, [pc, #584]	; (801e054 <tcp_slowtmr+0x4f8>)
 801de0a:	fb03 f300 	mul.w	r3, r3, r0
 801de0e:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 801de10:	4991      	ldr	r1, [pc, #580]	; (801e058 <tcp_slowtmr+0x4fc>)
 801de12:	fba1 1303 	umull	r1, r3, r1, r3
 801de16:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801de18:	429a      	cmp	r2, r3
 801de1a:	d910      	bls.n	801de3e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 801de1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de1e:	f004 fab0 	bl	8022382 <tcp_keepalive>
 801de22:	4603      	mov	r3, r0
 801de24:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 801de26:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d107      	bne.n	801de3e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 801de2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de30:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801de34:	3301      	adds	r3, #1
 801de36:	b2da      	uxtb	r2, r3
 801de38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de3a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801de3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801de42:	2b00      	cmp	r3, #0
 801de44:	d016      	beq.n	801de74 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 801de46:	4b82      	ldr	r3, [pc, #520]	; (801e050 <tcp_slowtmr+0x4f4>)
 801de48:	681a      	ldr	r2, [r3, #0]
 801de4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de4c:	6a1b      	ldr	r3, [r3, #32]
 801de4e:	1ad2      	subs	r2, r2, r3
 801de50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de52:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801de56:	4619      	mov	r1, r3
 801de58:	460b      	mov	r3, r1
 801de5a:	005b      	lsls	r3, r3, #1
 801de5c:	440b      	add	r3, r1
 801de5e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801de60:	429a      	cmp	r2, r3
 801de62:	d307      	bcc.n	801de74 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 801de64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801de68:	4618      	mov	r0, r3
 801de6a:	f000 fa04 	bl	801e276 <tcp_segs_free>
      pcb->ooseq = NULL;
 801de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de70:	2200      	movs	r2, #0
 801de72:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801de74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de76:	7d1b      	ldrb	r3, [r3, #20]
 801de78:	2b03      	cmp	r3, #3
 801de7a:	d109      	bne.n	801de90 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801de7c:	4b74      	ldr	r3, [pc, #464]	; (801e050 <tcp_slowtmr+0x4f4>)
 801de7e:	681a      	ldr	r2, [r3, #0]
 801de80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de82:	6a1b      	ldr	r3, [r3, #32]
 801de84:	1ad3      	subs	r3, r2, r3
 801de86:	2b28      	cmp	r3, #40	; 0x28
 801de88:	d902      	bls.n	801de90 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801de8a:	7ffb      	ldrb	r3, [r7, #31]
 801de8c:	3301      	adds	r3, #1
 801de8e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801de90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de92:	7d1b      	ldrb	r3, [r3, #20]
 801de94:	2b09      	cmp	r3, #9
 801de96:	d109      	bne.n	801deac <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801de98:	4b6d      	ldr	r3, [pc, #436]	; (801e050 <tcp_slowtmr+0x4f4>)
 801de9a:	681a      	ldr	r2, [r3, #0]
 801de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de9e:	6a1b      	ldr	r3, [r3, #32]
 801dea0:	1ad3      	subs	r3, r2, r3
 801dea2:	2bf0      	cmp	r3, #240	; 0xf0
 801dea4:	d902      	bls.n	801deac <tcp_slowtmr+0x350>
        ++pcb_remove;
 801dea6:	7ffb      	ldrb	r3, [r7, #31]
 801dea8:	3301      	adds	r3, #1
 801deaa:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801deac:	7ffb      	ldrb	r3, [r7, #31]
 801deae:	2b00      	cmp	r3, #0
 801deb0:	d05d      	beq.n	801df6e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801deb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801deb8:	617b      	str	r3, [r7, #20]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801deba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801debc:	f000 fc44 	bl	801e748 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801dec0:	6a3b      	ldr	r3, [r7, #32]
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	d010      	beq.n	801dee8 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801dec6:	4b65      	ldr	r3, [pc, #404]	; (801e05c <tcp_slowtmr+0x500>)
 801dec8:	681b      	ldr	r3, [r3, #0]
 801deca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801decc:	429a      	cmp	r2, r3
 801dece:	d106      	bne.n	801dede <tcp_slowtmr+0x382>
 801ded0:	4b63      	ldr	r3, [pc, #396]	; (801e060 <tcp_slowtmr+0x504>)
 801ded2:	f240 4289 	movw	r2, #1161	; 0x489
 801ded6:	4963      	ldr	r1, [pc, #396]	; (801e064 <tcp_slowtmr+0x508>)
 801ded8:	4863      	ldr	r0, [pc, #396]	; (801e068 <tcp_slowtmr+0x50c>)
 801deda:	f007 fe21 	bl	8025b20 <iprintf>
        prev->next = pcb->next;
 801dede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dee0:	68da      	ldr	r2, [r3, #12]
 801dee2:	6a3b      	ldr	r3, [r7, #32]
 801dee4:	60da      	str	r2, [r3, #12]
 801dee6:	e00f      	b.n	801df08 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801dee8:	4b5c      	ldr	r3, [pc, #368]	; (801e05c <tcp_slowtmr+0x500>)
 801deea:	681a      	ldr	r2, [r3, #0]
 801deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deee:	429a      	cmp	r2, r3
 801def0:	d006      	beq.n	801df00 <tcp_slowtmr+0x3a4>
 801def2:	4b5b      	ldr	r3, [pc, #364]	; (801e060 <tcp_slowtmr+0x504>)
 801def4:	f240 428d 	movw	r2, #1165	; 0x48d
 801def8:	495c      	ldr	r1, [pc, #368]	; (801e06c <tcp_slowtmr+0x510>)
 801defa:	485b      	ldr	r0, [pc, #364]	; (801e068 <tcp_slowtmr+0x50c>)
 801defc:	f007 fe10 	bl	8025b20 <iprintf>
        tcp_active_pcbs = pcb->next;
 801df00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df02:	68db      	ldr	r3, [r3, #12]
 801df04:	4a55      	ldr	r2, [pc, #340]	; (801e05c <tcp_slowtmr+0x500>)
 801df06:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801df08:	7fbb      	ldrb	r3, [r7, #30]
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d010      	beq.n	801df30 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801df0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df10:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801df12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801df16:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801df18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df1a:	1d1d      	adds	r5, r3, #4
 801df1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df1e:	8adb      	ldrh	r3, [r3, #22]
 801df20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801df22:	8b12      	ldrh	r2, [r2, #24]
 801df24:	9201      	str	r2, [sp, #4]
 801df26:	9300      	str	r3, [sp, #0]
 801df28:	462b      	mov	r3, r5
 801df2a:	4622      	mov	r2, r4
 801df2c:	f004 f8d8 	bl	80220e0 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801df30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df32:	691b      	ldr	r3, [r3, #16]
 801df34:	613b      	str	r3, [r7, #16]
      last_state = pcb->state;
 801df36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df38:	7d1b      	ldrb	r3, [r3, #20]
 801df3a:	73fb      	strb	r3, [r7, #15]
      pcb2 = pcb;
 801df3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df3e:	60bb      	str	r3, [r7, #8]
      pcb = pcb->next;
 801df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df42:	68db      	ldr	r3, [r3, #12]
 801df44:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801df46:	68b9      	ldr	r1, [r7, #8]
 801df48:	2001      	movs	r0, #1
 801df4a:	f7fe f933 	bl	801c1b4 <memp_free>

      tcp_active_pcbs_changed = 0;
 801df4e:	4b48      	ldr	r3, [pc, #288]	; (801e070 <tcp_slowtmr+0x514>)
 801df50:	2200      	movs	r2, #0
 801df52:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801df54:	697b      	ldr	r3, [r7, #20]
 801df56:	2b00      	cmp	r3, #0
 801df58:	d004      	beq.n	801df64 <tcp_slowtmr+0x408>
 801df5a:	697b      	ldr	r3, [r7, #20]
 801df5c:	f06f 010c 	mvn.w	r1, #12
 801df60:	6938      	ldr	r0, [r7, #16]
 801df62:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801df64:	4b42      	ldr	r3, [pc, #264]	; (801e070 <tcp_slowtmr+0x514>)
 801df66:	781b      	ldrb	r3, [r3, #0]
 801df68:	2b00      	cmp	r3, #0
 801df6a:	d035      	beq.n	801dfd8 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 801df6c:	e606      	b.n	801db7c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801df6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df70:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801df72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df74:	68db      	ldr	r3, [r3, #12]
 801df76:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801df78:	6a3b      	ldr	r3, [r7, #32]
 801df7a:	7edb      	ldrb	r3, [r3, #27]
 801df7c:	3301      	adds	r3, #1
 801df7e:	b2da      	uxtb	r2, r3
 801df80:	6a3b      	ldr	r3, [r7, #32]
 801df82:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 801df84:	6a3b      	ldr	r3, [r7, #32]
 801df86:	7eda      	ldrb	r2, [r3, #27]
 801df88:	6a3b      	ldr	r3, [r7, #32]
 801df8a:	7f1b      	ldrb	r3, [r3, #28]
 801df8c:	429a      	cmp	r2, r3
 801df8e:	d323      	bcc.n	801dfd8 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 801df90:	6a3b      	ldr	r3, [r7, #32]
 801df92:	2200      	movs	r2, #0
 801df94:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801df96:	4b36      	ldr	r3, [pc, #216]	; (801e070 <tcp_slowtmr+0x514>)
 801df98:	2200      	movs	r2, #0
 801df9a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801df9c:	6a3b      	ldr	r3, [r7, #32]
 801df9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d00a      	beq.n	801dfbc <tcp_slowtmr+0x460>
 801dfa6:	6a3b      	ldr	r3, [r7, #32]
 801dfa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dfac:	6a3a      	ldr	r2, [r7, #32]
 801dfae:	6912      	ldr	r2, [r2, #16]
 801dfb0:	6a39      	ldr	r1, [r7, #32]
 801dfb2:	4610      	mov	r0, r2
 801dfb4:	4798      	blx	r3
 801dfb6:	4603      	mov	r3, r0
 801dfb8:	777b      	strb	r3, [r7, #29]
 801dfba:	e001      	b.n	801dfc0 <tcp_slowtmr+0x464>
 801dfbc:	2300      	movs	r3, #0
 801dfbe:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 801dfc0:	4b2b      	ldr	r3, [pc, #172]	; (801e070 <tcp_slowtmr+0x514>)
 801dfc2:	781b      	ldrb	r3, [r3, #0]
 801dfc4:	2b00      	cmp	r3, #0
 801dfc6:	d000      	beq.n	801dfca <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 801dfc8:	e5d8      	b.n	801db7c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801dfca:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d102      	bne.n	801dfd8 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 801dfd2:	6a38      	ldr	r0, [r7, #32]
 801dfd4:	f003 fdfc 	bl	8021bd0 <tcp_output>
  while (pcb != NULL) {
 801dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	f47f add4 	bne.w	801db88 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801dfe0:	2300      	movs	r3, #0
 801dfe2:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 801dfe4:	4b23      	ldr	r3, [pc, #140]	; (801e074 <tcp_slowtmr+0x518>)
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801dfea:	e068      	b.n	801e0be <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801dfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfee:	7d1b      	ldrb	r3, [r3, #20]
 801dff0:	2b0a      	cmp	r3, #10
 801dff2:	d006      	beq.n	801e002 <tcp_slowtmr+0x4a6>
 801dff4:	4b1a      	ldr	r3, [pc, #104]	; (801e060 <tcp_slowtmr+0x504>)
 801dff6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801dffa:	491f      	ldr	r1, [pc, #124]	; (801e078 <tcp_slowtmr+0x51c>)
 801dffc:	481a      	ldr	r0, [pc, #104]	; (801e068 <tcp_slowtmr+0x50c>)
 801dffe:	f007 fd8f 	bl	8025b20 <iprintf>
    pcb_remove = 0;
 801e002:	2300      	movs	r3, #0
 801e004:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801e006:	4b12      	ldr	r3, [pc, #72]	; (801e050 <tcp_slowtmr+0x4f4>)
 801e008:	681a      	ldr	r2, [r3, #0]
 801e00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e00c:	6a1b      	ldr	r3, [r3, #32]
 801e00e:	1ad3      	subs	r3, r2, r3
 801e010:	2bf0      	cmp	r3, #240	; 0xf0
 801e012:	d902      	bls.n	801e01a <tcp_slowtmr+0x4be>
      ++pcb_remove;
 801e014:	7ffb      	ldrb	r3, [r7, #31]
 801e016:	3301      	adds	r3, #1
 801e018:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801e01a:	7ffb      	ldrb	r3, [r7, #31]
 801e01c:	2b00      	cmp	r3, #0
 801e01e:	d049      	beq.n	801e0b4 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801e020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e022:	f000 fb91 	bl	801e748 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801e026:	6a3b      	ldr	r3, [r7, #32]
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d029      	beq.n	801e080 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801e02c:	4b11      	ldr	r3, [pc, #68]	; (801e074 <tcp_slowtmr+0x518>)
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e032:	429a      	cmp	r2, r3
 801e034:	d106      	bne.n	801e044 <tcp_slowtmr+0x4e8>
 801e036:	4b0a      	ldr	r3, [pc, #40]	; (801e060 <tcp_slowtmr+0x504>)
 801e038:	f240 42cb 	movw	r2, #1227	; 0x4cb
 801e03c:	490f      	ldr	r1, [pc, #60]	; (801e07c <tcp_slowtmr+0x520>)
 801e03e:	480a      	ldr	r0, [pc, #40]	; (801e068 <tcp_slowtmr+0x50c>)
 801e040:	f007 fd6e 	bl	8025b20 <iprintf>
        prev->next = pcb->next;
 801e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e046:	68da      	ldr	r2, [r3, #12]
 801e048:	6a3b      	ldr	r3, [r7, #32]
 801e04a:	60da      	str	r2, [r3, #12]
 801e04c:	e028      	b.n	801e0a0 <tcp_slowtmr+0x544>
 801e04e:	bf00      	nop
 801e050:	20008c34 	.word	0x20008c34
 801e054:	000124f8 	.word	0x000124f8
 801e058:	10624dd3 	.word	0x10624dd3
 801e05c:	20008c30 	.word	0x20008c30
 801e060:	08028028 	.word	0x08028028
 801e064:	08028260 	.word	0x08028260
 801e068:	08028064 	.word	0x08028064
 801e06c:	0802828c 	.word	0x0802828c
 801e070:	20008c2c 	.word	0x20008c2c
 801e074:	20008c40 	.word	0x20008c40
 801e078:	080282b8 	.word	0x080282b8
 801e07c:	080282e8 	.word	0x080282e8
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801e080:	4b12      	ldr	r3, [pc, #72]	; (801e0cc <tcp_slowtmr+0x570>)
 801e082:	681a      	ldr	r2, [r3, #0]
 801e084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e086:	429a      	cmp	r2, r3
 801e088:	d006      	beq.n	801e098 <tcp_slowtmr+0x53c>
 801e08a:	4b11      	ldr	r3, [pc, #68]	; (801e0d0 <tcp_slowtmr+0x574>)
 801e08c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 801e090:	4910      	ldr	r1, [pc, #64]	; (801e0d4 <tcp_slowtmr+0x578>)
 801e092:	4811      	ldr	r0, [pc, #68]	; (801e0d8 <tcp_slowtmr+0x57c>)
 801e094:	f007 fd44 	bl	8025b20 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801e098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e09a:	68db      	ldr	r3, [r3, #12]
 801e09c:	4a0b      	ldr	r2, [pc, #44]	; (801e0cc <tcp_slowtmr+0x570>)
 801e09e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801e0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0a2:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 801e0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0a6:	68db      	ldr	r3, [r3, #12]
 801e0a8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801e0aa:	6879      	ldr	r1, [r7, #4]
 801e0ac:	2001      	movs	r0, #1
 801e0ae:	f7fe f881 	bl	801c1b4 <memp_free>
 801e0b2:	e004      	b.n	801e0be <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 801e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0b6:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801e0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0ba:	68db      	ldr	r3, [r3, #12]
 801e0bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801e0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0c0:	2b00      	cmp	r3, #0
 801e0c2:	d193      	bne.n	801dfec <tcp_slowtmr+0x490>
    }
  }
}
 801e0c4:	bf00      	nop
 801e0c6:	3728      	adds	r7, #40	; 0x28
 801e0c8:	46bd      	mov	sp, r7
 801e0ca:	bdb0      	pop	{r4, r5, r7, pc}
 801e0cc:	20008c40 	.word	0x20008c40
 801e0d0:	08028028 	.word	0x08028028
 801e0d4:	08028310 	.word	0x08028310
 801e0d8:	08028064 	.word	0x08028064

0801e0dc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801e0dc:	b580      	push	{r7, lr}
 801e0de:	b082      	sub	sp, #8
 801e0e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801e0e2:	4b2d      	ldr	r3, [pc, #180]	; (801e198 <tcp_fasttmr+0xbc>)
 801e0e4:	781b      	ldrb	r3, [r3, #0]
 801e0e6:	3301      	adds	r3, #1
 801e0e8:	b2da      	uxtb	r2, r3
 801e0ea:	4b2b      	ldr	r3, [pc, #172]	; (801e198 <tcp_fasttmr+0xbc>)
 801e0ec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801e0ee:	4b2b      	ldr	r3, [pc, #172]	; (801e19c <tcp_fasttmr+0xc0>)
 801e0f0:	681b      	ldr	r3, [r3, #0]
 801e0f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801e0f4:	e048      	b.n	801e188 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801e0f6:	687b      	ldr	r3, [r7, #4]
 801e0f8:	7f5a      	ldrb	r2, [r3, #29]
 801e0fa:	4b27      	ldr	r3, [pc, #156]	; (801e198 <tcp_fasttmr+0xbc>)
 801e0fc:	781b      	ldrb	r3, [r3, #0]
 801e0fe:	429a      	cmp	r2, r3
 801e100:	d03f      	beq.n	801e182 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801e102:	4b25      	ldr	r3, [pc, #148]	; (801e198 <tcp_fasttmr+0xbc>)
 801e104:	781a      	ldrb	r2, [r3, #0]
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	7e9b      	ldrb	r3, [r3, #26]
 801e10e:	f003 0301 	and.w	r3, r3, #1
 801e112:	2b00      	cmp	r3, #0
 801e114:	d010      	beq.n	801e138 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	7e9b      	ldrb	r3, [r3, #26]
 801e11a:	f043 0302 	orr.w	r3, r3, #2
 801e11e:	b2da      	uxtb	r2, r3
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 801e124:	6878      	ldr	r0, [r7, #4]
 801e126:	f003 fd53 	bl	8021bd0 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	7e9b      	ldrb	r3, [r3, #26]
 801e12e:	f023 0303 	bic.w	r3, r3, #3
 801e132:	b2da      	uxtb	r2, r3
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	7e9b      	ldrb	r3, [r3, #26]
 801e13c:	f003 0308 	and.w	r3, r3, #8
 801e140:	2b00      	cmp	r3, #0
 801e142:	d009      	beq.n	801e158 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	7e9b      	ldrb	r3, [r3, #26]
 801e148:	f023 0308 	bic.w	r3, r3, #8
 801e14c:	b2da      	uxtb	r2, r3
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801e152:	6878      	ldr	r0, [r7, #4]
 801e154:	f7ff f956 	bl	801d404 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	68db      	ldr	r3, [r3, #12]
 801e15c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e162:	2b00      	cmp	r3, #0
 801e164:	d00a      	beq.n	801e17c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801e166:	4b0e      	ldr	r3, [pc, #56]	; (801e1a0 <tcp_fasttmr+0xc4>)
 801e168:	2200      	movs	r2, #0
 801e16a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801e16c:	6878      	ldr	r0, [r7, #4]
 801e16e:	f000 f819 	bl	801e1a4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801e172:	4b0b      	ldr	r3, [pc, #44]	; (801e1a0 <tcp_fasttmr+0xc4>)
 801e174:	781b      	ldrb	r3, [r3, #0]
 801e176:	2b00      	cmp	r3, #0
 801e178:	d000      	beq.n	801e17c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801e17a:	e7b8      	b.n	801e0ee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801e17c:	683b      	ldr	r3, [r7, #0]
 801e17e:	607b      	str	r3, [r7, #4]
 801e180:	e002      	b.n	801e188 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	68db      	ldr	r3, [r3, #12]
 801e186:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d1b3      	bne.n	801e0f6 <tcp_fasttmr+0x1a>
    }
  }
}
 801e18e:	bf00      	nop
 801e190:	3708      	adds	r7, #8
 801e192:	46bd      	mov	sp, r7
 801e194:	bd80      	pop	{r7, pc}
 801e196:	bf00      	nop
 801e198:	200040f2 	.word	0x200040f2
 801e19c:	20008c30 	.word	0x20008c30
 801e1a0:	20008c2c 	.word	0x20008c2c

0801e1a4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801e1a4:	b590      	push	{r4, r7, lr}
 801e1a6:	b085      	sub	sp, #20
 801e1a8:	af00      	add	r7, sp, #0
 801e1aa:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e1b0:	7b5b      	ldrb	r3, [r3, #13]
 801e1b2:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e1b8:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801e1ba:	687b      	ldr	r3, [r7, #4]
 801e1bc:	2200      	movs	r2, #0
 801e1be:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	d00b      	beq.n	801e1e2 <tcp_process_refused_data+0x3e>
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	6918      	ldr	r0, [r3, #16]
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	68ba      	ldr	r2, [r7, #8]
 801e1d8:	6879      	ldr	r1, [r7, #4]
 801e1da:	47a0      	blx	r4
 801e1dc:	4603      	mov	r3, r0
 801e1de:	73fb      	strb	r3, [r7, #15]
 801e1e0:	e007      	b.n	801e1f2 <tcp_process_refused_data+0x4e>
 801e1e2:	2300      	movs	r3, #0
 801e1e4:	68ba      	ldr	r2, [r7, #8]
 801e1e6:	6879      	ldr	r1, [r7, #4]
 801e1e8:	2000      	movs	r0, #0
 801e1ea:	f000 f88c 	bl	801e306 <tcp_recv_null>
 801e1ee:	4603      	mov	r3, r0
 801e1f0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801e1f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d12a      	bne.n	801e250 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 801e1fa:	7bbb      	ldrb	r3, [r7, #14]
 801e1fc:	f003 0320 	and.w	r3, r3, #32
 801e200:	2b00      	cmp	r3, #0
 801e202:	d033      	beq.n	801e26c <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e20c:	d005      	beq.n	801e21a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e212:	3301      	adds	r3, #1
 801e214:	b29a      	uxth	r2, r3
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801e21a:	687b      	ldr	r3, [r7, #4]
 801e21c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e220:	2b00      	cmp	r3, #0
 801e222:	d00b      	beq.n	801e23c <tcp_process_refused_data+0x98>
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801e22a:	687b      	ldr	r3, [r7, #4]
 801e22c:	6918      	ldr	r0, [r3, #16]
 801e22e:	2300      	movs	r3, #0
 801e230:	2200      	movs	r2, #0
 801e232:	6879      	ldr	r1, [r7, #4]
 801e234:	47a0      	blx	r4
 801e236:	4603      	mov	r3, r0
 801e238:	73fb      	strb	r3, [r7, #15]
 801e23a:	e001      	b.n	801e240 <tcp_process_refused_data+0x9c>
 801e23c:	2300      	movs	r3, #0
 801e23e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801e240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e244:	f113 0f0d 	cmn.w	r3, #13
 801e248:	d110      	bne.n	801e26c <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 801e24a:	f06f 030c 	mvn.w	r3, #12
 801e24e:	e00e      	b.n	801e26e <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 801e250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e254:	f113 0f0d 	cmn.w	r3, #13
 801e258:	d102      	bne.n	801e260 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801e25a:	f06f 030c 	mvn.w	r3, #12
 801e25e:	e006      	b.n	801e26e <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	68ba      	ldr	r2, [r7, #8]
 801e264:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 801e266:	f06f 0304 	mvn.w	r3, #4
 801e26a:	e000      	b.n	801e26e <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 801e26c:	2300      	movs	r3, #0
}
 801e26e:	4618      	mov	r0, r3
 801e270:	3714      	adds	r7, #20
 801e272:	46bd      	mov	sp, r7
 801e274:	bd90      	pop	{r4, r7, pc}

0801e276 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801e276:	b580      	push	{r7, lr}
 801e278:	b084      	sub	sp, #16
 801e27a:	af00      	add	r7, sp, #0
 801e27c:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801e27e:	e007      	b.n	801e290 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801e286:	6878      	ldr	r0, [r7, #4]
 801e288:	f000 f809 	bl	801e29e <tcp_seg_free>
    seg = next;
 801e28c:	68fb      	ldr	r3, [r7, #12]
 801e28e:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	2b00      	cmp	r3, #0
 801e294:	d1f4      	bne.n	801e280 <tcp_segs_free+0xa>
  }
}
 801e296:	bf00      	nop
 801e298:	3710      	adds	r7, #16
 801e29a:	46bd      	mov	sp, r7
 801e29c:	bd80      	pop	{r7, pc}

0801e29e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801e29e:	b580      	push	{r7, lr}
 801e2a0:	b082      	sub	sp, #8
 801e2a2:	af00      	add	r7, sp, #0
 801e2a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	d00c      	beq.n	801e2c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	685b      	ldr	r3, [r3, #4]
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d004      	beq.n	801e2be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	685b      	ldr	r3, [r3, #4]
 801e2b8:	4618      	mov	r0, r3
 801e2ba:	f7fe fcd5 	bl	801cc68 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801e2be:	6879      	ldr	r1, [r7, #4]
 801e2c0:	2003      	movs	r0, #3
 801e2c2:	f7fd ff77 	bl	801c1b4 <memp_free>
  }
}
 801e2c6:	bf00      	nop
 801e2c8:	3708      	adds	r7, #8
 801e2ca:	46bd      	mov	sp, r7
 801e2cc:	bd80      	pop	{r7, pc}

0801e2ce <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801e2ce:	b580      	push	{r7, lr}
 801e2d0:	b084      	sub	sp, #16
 801e2d2:	af00      	add	r7, sp, #0
 801e2d4:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801e2d6:	2003      	movs	r0, #3
 801e2d8:	f7fd ff1a 	bl	801c110 <memp_malloc>
 801e2dc:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801e2de:	68fb      	ldr	r3, [r7, #12]
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d101      	bne.n	801e2e8 <tcp_seg_copy+0x1a>
    return NULL;
 801e2e4:	2300      	movs	r3, #0
 801e2e6:	e00a      	b.n	801e2fe <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801e2e8:	2210      	movs	r2, #16
 801e2ea:	6879      	ldr	r1, [r7, #4]
 801e2ec:	68f8      	ldr	r0, [r7, #12]
 801e2ee:	f008 f8ea 	bl	80264c6 <memcpy>
  pbuf_ref(cseg->p);
 801e2f2:	68fb      	ldr	r3, [r7, #12]
 801e2f4:	685b      	ldr	r3, [r3, #4]
 801e2f6:	4618      	mov	r0, r3
 801e2f8:	f7fe fd68 	bl	801cdcc <pbuf_ref>
  return cseg;
 801e2fc:	68fb      	ldr	r3, [r7, #12]
}
 801e2fe:	4618      	mov	r0, r3
 801e300:	3710      	adds	r7, #16
 801e302:	46bd      	mov	sp, r7
 801e304:	bd80      	pop	{r7, pc}

0801e306 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801e306:	b580      	push	{r7, lr}
 801e308:	b084      	sub	sp, #16
 801e30a:	af00      	add	r7, sp, #0
 801e30c:	60f8      	str	r0, [r7, #12]
 801e30e:	60b9      	str	r1, [r7, #8]
 801e310:	607a      	str	r2, [r7, #4]
 801e312:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 801e314:	687b      	ldr	r3, [r7, #4]
 801e316:	2b00      	cmp	r3, #0
 801e318:	d009      	beq.n	801e32e <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	891b      	ldrh	r3, [r3, #8]
 801e31e:	4619      	mov	r1, r3
 801e320:	68b8      	ldr	r0, [r7, #8]
 801e322:	f7ff fb7d 	bl	801da20 <tcp_recved>
    pbuf_free(p);
 801e326:	6878      	ldr	r0, [r7, #4]
 801e328:	f7fe fc9e 	bl	801cc68 <pbuf_free>
 801e32c:	e008      	b.n	801e340 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 801e32e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e332:	2b00      	cmp	r3, #0
 801e334:	d104      	bne.n	801e340 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 801e336:	68b8      	ldr	r0, [r7, #8]
 801e338:	f7ff f8ca 	bl	801d4d0 <tcp_close>
 801e33c:	4603      	mov	r3, r0
 801e33e:	e000      	b.n	801e342 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 801e340:	2300      	movs	r3, #0
}
 801e342:	4618      	mov	r0, r3
 801e344:	3710      	adds	r7, #16
 801e346:	46bd      	mov	sp, r7
 801e348:	bd80      	pop	{r7, pc}
	...

0801e34c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801e34c:	b580      	push	{r7, lr}
 801e34e:	b086      	sub	sp, #24
 801e350:	af00      	add	r7, sp, #0
 801e352:	4603      	mov	r3, r0
 801e354:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801e356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	db01      	blt.n	801e362 <tcp_kill_prio+0x16>
 801e35e:	79fb      	ldrb	r3, [r7, #7]
 801e360:	e000      	b.n	801e364 <tcp_kill_prio+0x18>
 801e362:	237f      	movs	r3, #127	; 0x7f
 801e364:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 801e366:	2300      	movs	r3, #0
 801e368:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801e36a:	2300      	movs	r3, #0
 801e36c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e36e:	4b16      	ldr	r3, [pc, #88]	; (801e3c8 <tcp_kill_prio+0x7c>)
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	617b      	str	r3, [r7, #20]
 801e374:	e01a      	b.n	801e3ac <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 801e376:	697b      	ldr	r3, [r7, #20]
 801e378:	7d5b      	ldrb	r3, [r3, #21]
 801e37a:	7afa      	ldrb	r2, [r7, #11]
 801e37c:	429a      	cmp	r2, r3
 801e37e:	d312      	bcc.n	801e3a6 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e380:	4b12      	ldr	r3, [pc, #72]	; (801e3cc <tcp_kill_prio+0x80>)
 801e382:	681a      	ldr	r2, [r3, #0]
 801e384:	697b      	ldr	r3, [r7, #20]
 801e386:	6a1b      	ldr	r3, [r3, #32]
 801e388:	1ad2      	subs	r2, r2, r3
    if (pcb->prio <= mprio &&
 801e38a:	68fb      	ldr	r3, [r7, #12]
 801e38c:	429a      	cmp	r2, r3
 801e38e:	d30a      	bcc.n	801e3a6 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 801e390:	4b0e      	ldr	r3, [pc, #56]	; (801e3cc <tcp_kill_prio+0x80>)
 801e392:	681a      	ldr	r2, [r3, #0]
 801e394:	697b      	ldr	r3, [r7, #20]
 801e396:	6a1b      	ldr	r3, [r3, #32]
 801e398:	1ad3      	subs	r3, r2, r3
 801e39a:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 801e39c:	697b      	ldr	r3, [r7, #20]
 801e39e:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 801e3a0:	697b      	ldr	r3, [r7, #20]
 801e3a2:	7d5b      	ldrb	r3, [r3, #21]
 801e3a4:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e3a6:	697b      	ldr	r3, [r7, #20]
 801e3a8:	68db      	ldr	r3, [r3, #12]
 801e3aa:	617b      	str	r3, [r7, #20]
 801e3ac:	697b      	ldr	r3, [r7, #20]
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d1e1      	bne.n	801e376 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 801e3b2:	693b      	ldr	r3, [r7, #16]
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d002      	beq.n	801e3be <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 801e3b8:	6938      	ldr	r0, [r7, #16]
 801e3ba:	f7ff f99b 	bl	801d6f4 <tcp_abort>
  }
}
 801e3be:	bf00      	nop
 801e3c0:	3718      	adds	r7, #24
 801e3c2:	46bd      	mov	sp, r7
 801e3c4:	bd80      	pop	{r7, pc}
 801e3c6:	bf00      	nop
 801e3c8:	20008c30 	.word	0x20008c30
 801e3cc:	20008c34 	.word	0x20008c34

0801e3d0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801e3d0:	b580      	push	{r7, lr}
 801e3d2:	b086      	sub	sp, #24
 801e3d4:	af00      	add	r7, sp, #0
 801e3d6:	4603      	mov	r3, r0
 801e3d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801e3da:	79fb      	ldrb	r3, [r7, #7]
 801e3dc:	2b08      	cmp	r3, #8
 801e3de:	d009      	beq.n	801e3f4 <tcp_kill_state+0x24>
 801e3e0:	79fb      	ldrb	r3, [r7, #7]
 801e3e2:	2b09      	cmp	r3, #9
 801e3e4:	d006      	beq.n	801e3f4 <tcp_kill_state+0x24>
 801e3e6:	4b1a      	ldr	r3, [pc, #104]	; (801e450 <tcp_kill_state+0x80>)
 801e3e8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801e3ec:	4919      	ldr	r1, [pc, #100]	; (801e454 <tcp_kill_state+0x84>)
 801e3ee:	481a      	ldr	r0, [pc, #104]	; (801e458 <tcp_kill_state+0x88>)
 801e3f0:	f007 fb96 	bl	8025b20 <iprintf>

  inactivity = 0;
 801e3f4:	2300      	movs	r3, #0
 801e3f6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801e3f8:	2300      	movs	r3, #0
 801e3fa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e3fc:	4b17      	ldr	r3, [pc, #92]	; (801e45c <tcp_kill_state+0x8c>)
 801e3fe:	681b      	ldr	r3, [r3, #0]
 801e400:	617b      	str	r3, [r7, #20]
 801e402:	e017      	b.n	801e434 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801e404:	697b      	ldr	r3, [r7, #20]
 801e406:	7d1b      	ldrb	r3, [r3, #20]
 801e408:	79fa      	ldrb	r2, [r7, #7]
 801e40a:	429a      	cmp	r2, r3
 801e40c:	d10f      	bne.n	801e42e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e40e:	4b14      	ldr	r3, [pc, #80]	; (801e460 <tcp_kill_state+0x90>)
 801e410:	681a      	ldr	r2, [r3, #0]
 801e412:	697b      	ldr	r3, [r7, #20]
 801e414:	6a1b      	ldr	r3, [r3, #32]
 801e416:	1ad2      	subs	r2, r2, r3
 801e418:	68fb      	ldr	r3, [r7, #12]
 801e41a:	429a      	cmp	r2, r3
 801e41c:	d307      	bcc.n	801e42e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801e41e:	4b10      	ldr	r3, [pc, #64]	; (801e460 <tcp_kill_state+0x90>)
 801e420:	681a      	ldr	r2, [r3, #0]
 801e422:	697b      	ldr	r3, [r7, #20]
 801e424:	6a1b      	ldr	r3, [r3, #32]
 801e426:	1ad3      	subs	r3, r2, r3
 801e428:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801e42a:	697b      	ldr	r3, [r7, #20]
 801e42c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e42e:	697b      	ldr	r3, [r7, #20]
 801e430:	68db      	ldr	r3, [r3, #12]
 801e432:	617b      	str	r3, [r7, #20]
 801e434:	697b      	ldr	r3, [r7, #20]
 801e436:	2b00      	cmp	r3, #0
 801e438:	d1e4      	bne.n	801e404 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801e43a:	693b      	ldr	r3, [r7, #16]
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d003      	beq.n	801e448 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801e440:	2100      	movs	r1, #0
 801e442:	6938      	ldr	r0, [r7, #16]
 801e444:	f7ff f8a4 	bl	801d590 <tcp_abandon>
  }
}
 801e448:	bf00      	nop
 801e44a:	3718      	adds	r7, #24
 801e44c:	46bd      	mov	sp, r7
 801e44e:	bd80      	pop	{r7, pc}
 801e450:	08028028 	.word	0x08028028
 801e454:	08028338 	.word	0x08028338
 801e458:	08028064 	.word	0x08028064
 801e45c:	20008c30 	.word	0x20008c30
 801e460:	20008c34 	.word	0x20008c34

0801e464 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801e464:	b580      	push	{r7, lr}
 801e466:	b084      	sub	sp, #16
 801e468:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801e46a:	2300      	movs	r3, #0
 801e46c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801e46e:	2300      	movs	r3, #0
 801e470:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e472:	4b12      	ldr	r3, [pc, #72]	; (801e4bc <tcp_kill_timewait+0x58>)
 801e474:	681b      	ldr	r3, [r3, #0]
 801e476:	60fb      	str	r3, [r7, #12]
 801e478:	e012      	b.n	801e4a0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e47a:	4b11      	ldr	r3, [pc, #68]	; (801e4c0 <tcp_kill_timewait+0x5c>)
 801e47c:	681a      	ldr	r2, [r3, #0]
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	6a1b      	ldr	r3, [r3, #32]
 801e482:	1ad2      	subs	r2, r2, r3
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	429a      	cmp	r2, r3
 801e488:	d307      	bcc.n	801e49a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801e48a:	4b0d      	ldr	r3, [pc, #52]	; (801e4c0 <tcp_kill_timewait+0x5c>)
 801e48c:	681a      	ldr	r2, [r3, #0]
 801e48e:	68fb      	ldr	r3, [r7, #12]
 801e490:	6a1b      	ldr	r3, [r3, #32]
 801e492:	1ad3      	subs	r3, r2, r3
 801e494:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801e496:	68fb      	ldr	r3, [r7, #12]
 801e498:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e49a:	68fb      	ldr	r3, [r7, #12]
 801e49c:	68db      	ldr	r3, [r3, #12]
 801e49e:	60fb      	str	r3, [r7, #12]
 801e4a0:	68fb      	ldr	r3, [r7, #12]
 801e4a2:	2b00      	cmp	r3, #0
 801e4a4:	d1e9      	bne.n	801e47a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801e4a6:	68bb      	ldr	r3, [r7, #8]
 801e4a8:	2b00      	cmp	r3, #0
 801e4aa:	d002      	beq.n	801e4b2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 801e4ac:	68b8      	ldr	r0, [r7, #8]
 801e4ae:	f7ff f921 	bl	801d6f4 <tcp_abort>
  }
}
 801e4b2:	bf00      	nop
 801e4b4:	3710      	adds	r7, #16
 801e4b6:	46bd      	mov	sp, r7
 801e4b8:	bd80      	pop	{r7, pc}
 801e4ba:	bf00      	nop
 801e4bc:	20008c40 	.word	0x20008c40
 801e4c0:	20008c34 	.word	0x20008c34

0801e4c4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801e4c4:	b580      	push	{r7, lr}
 801e4c6:	b084      	sub	sp, #16
 801e4c8:	af00      	add	r7, sp, #0
 801e4ca:	4603      	mov	r3, r0
 801e4cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e4ce:	2001      	movs	r0, #1
 801e4d0:	f7fd fe1e 	bl	801c110 <memp_malloc>
 801e4d4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801e4d6:	68fb      	ldr	r3, [r7, #12]
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	d124      	bne.n	801e526 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801e4dc:	f7ff ffc2 	bl	801e464 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e4e0:	2001      	movs	r0, #1
 801e4e2:	f7fd fe15 	bl	801c110 <memp_malloc>
 801e4e6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801e4e8:	68fb      	ldr	r3, [r7, #12]
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d11b      	bne.n	801e526 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801e4ee:	2009      	movs	r0, #9
 801e4f0:	f7ff ff6e 	bl	801e3d0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e4f4:	2001      	movs	r0, #1
 801e4f6:	f7fd fe0b 	bl	801c110 <memp_malloc>
 801e4fa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	2b00      	cmp	r3, #0
 801e500:	d111      	bne.n	801e526 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801e502:	2008      	movs	r0, #8
 801e504:	f7ff ff64 	bl	801e3d0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e508:	2001      	movs	r0, #1
 801e50a:	f7fd fe01 	bl	801c110 <memp_malloc>
 801e50e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801e510:	68fb      	ldr	r3, [r7, #12]
 801e512:	2b00      	cmp	r3, #0
 801e514:	d107      	bne.n	801e526 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801e516:	79fb      	ldrb	r3, [r7, #7]
 801e518:	4618      	mov	r0, r3
 801e51a:	f7ff ff17 	bl	801e34c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e51e:	2001      	movs	r0, #1
 801e520:	f7fd fdf6 	bl	801c110 <memp_malloc>
 801e524:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801e526:	68fb      	ldr	r3, [r7, #12]
 801e528:	2b00      	cmp	r3, #0
 801e52a:	d03f      	beq.n	801e5ac <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801e52c:	2298      	movs	r2, #152	; 0x98
 801e52e:	2100      	movs	r1, #0
 801e530:	68f8      	ldr	r0, [r7, #12]
 801e532:	f007 ffd3 	bl	80264dc <memset>
    pcb->prio = prio;
 801e536:	68fb      	ldr	r3, [r7, #12]
 801e538:	79fa      	ldrb	r2, [r7, #7]
 801e53a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801e53c:	68fb      	ldr	r3, [r7, #12]
 801e53e:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 801e542:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801e546:	68fb      	ldr	r3, [r7, #12]
 801e548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801e54c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801e54e:	68fb      	ldr	r3, [r7, #12]
 801e550:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801e552:	68fb      	ldr	r3, [r7, #12]
 801e554:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801e556:	68fb      	ldr	r3, [r7, #12]
 801e558:	22ff      	movs	r2, #255	; 0xff
 801e55a:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801e55c:	68fb      	ldr	r3, [r7, #12]
 801e55e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801e562:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801e564:	68fb      	ldr	r3, [r7, #12]
 801e566:	2206      	movs	r2, #6
 801e568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801e56c:	68fb      	ldr	r3, [r7, #12]
 801e56e:	2206      	movs	r2, #6
 801e570:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801e572:	68fb      	ldr	r3, [r7, #12]
 801e574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e578:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801e57a:	68fb      	ldr	r3, [r7, #12]
 801e57c:	2201      	movs	r2, #1
 801e57e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801e582:	4b0d      	ldr	r3, [pc, #52]	; (801e5b8 <tcp_alloc+0xf4>)
 801e584:	681a      	ldr	r2, [r3, #0]
 801e586:	68fb      	ldr	r3, [r7, #12]
 801e588:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801e58a:	4b0c      	ldr	r3, [pc, #48]	; (801e5bc <tcp_alloc+0xf8>)
 801e58c:	781a      	ldrb	r2, [r3, #0]
 801e58e:	68fb      	ldr	r3, [r7, #12]
 801e590:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801e592:	68fb      	ldr	r3, [r7, #12]
 801e594:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 801e598:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801e59c:	68fb      	ldr	r3, [r7, #12]
 801e59e:	4a08      	ldr	r2, [pc, #32]	; (801e5c0 <tcp_alloc+0xfc>)
 801e5a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801e5a4:	68fb      	ldr	r3, [r7, #12]
 801e5a6:	4a07      	ldr	r2, [pc, #28]	; (801e5c4 <tcp_alloc+0x100>)
 801e5a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801e5ac:	68fb      	ldr	r3, [r7, #12]
}
 801e5ae:	4618      	mov	r0, r3
 801e5b0:	3710      	adds	r7, #16
 801e5b2:	46bd      	mov	sp, r7
 801e5b4:	bd80      	pop	{r7, pc}
 801e5b6:	bf00      	nop
 801e5b8:	20008c34 	.word	0x20008c34
 801e5bc:	200040f2 	.word	0x200040f2
 801e5c0:	0801e307 	.word	0x0801e307
 801e5c4:	006ddd00 	.word	0x006ddd00

0801e5c8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801e5c8:	b580      	push	{r7, lr}
 801e5ca:	b084      	sub	sp, #16
 801e5cc:	af00      	add	r7, sp, #0
 801e5ce:	4603      	mov	r3, r0
 801e5d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801e5d2:	2040      	movs	r0, #64	; 0x40
 801e5d4:	f7ff ff76 	bl	801e4c4 <tcp_alloc>
 801e5d8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801e5da:	68fb      	ldr	r3, [r7, #12]
}
 801e5dc:	4618      	mov	r0, r3
 801e5de:	3710      	adds	r7, #16
 801e5e0:	46bd      	mov	sp, r7
 801e5e2:	bd80      	pop	{r7, pc}

0801e5e4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801e5e4:	b480      	push	{r7}
 801e5e6:	b083      	sub	sp, #12
 801e5e8:	af00      	add	r7, sp, #0
 801e5ea:	6078      	str	r0, [r7, #4]
 801e5ec:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	d002      	beq.n	801e5fa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	683a      	ldr	r2, [r7, #0]
 801e5f8:	611a      	str	r2, [r3, #16]
  }
}
 801e5fa:	bf00      	nop
 801e5fc:	370c      	adds	r7, #12
 801e5fe:	46bd      	mov	sp, r7
 801e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e604:	4770      	bx	lr
	...

0801e608 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801e608:	b580      	push	{r7, lr}
 801e60a:	b082      	sub	sp, #8
 801e60c:	af00      	add	r7, sp, #0
 801e60e:	6078      	str	r0, [r7, #4]
 801e610:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	2b00      	cmp	r3, #0
 801e616:	d00e      	beq.n	801e636 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	7d1b      	ldrb	r3, [r3, #20]
 801e61c:	2b01      	cmp	r3, #1
 801e61e:	d106      	bne.n	801e62e <tcp_recv+0x26>
 801e620:	4b07      	ldr	r3, [pc, #28]	; (801e640 <tcp_recv+0x38>)
 801e622:	f240 62bb 	movw	r2, #1723	; 0x6bb
 801e626:	4907      	ldr	r1, [pc, #28]	; (801e644 <tcp_recv+0x3c>)
 801e628:	4807      	ldr	r0, [pc, #28]	; (801e648 <tcp_recv+0x40>)
 801e62a:	f007 fa79 	bl	8025b20 <iprintf>
    pcb->recv = recv;
 801e62e:	687b      	ldr	r3, [r7, #4]
 801e630:	683a      	ldr	r2, [r7, #0]
 801e632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801e636:	bf00      	nop
 801e638:	3708      	adds	r7, #8
 801e63a:	46bd      	mov	sp, r7
 801e63c:	bd80      	pop	{r7, pc}
 801e63e:	bf00      	nop
 801e640:	08028028 	.word	0x08028028
 801e644:	08028348 	.word	0x08028348
 801e648:	08028064 	.word	0x08028064

0801e64c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801e64c:	b580      	push	{r7, lr}
 801e64e:	b082      	sub	sp, #8
 801e650:	af00      	add	r7, sp, #0
 801e652:	6078      	str	r0, [r7, #4]
 801e654:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	2b00      	cmp	r3, #0
 801e65a:	d00d      	beq.n	801e678 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	7d1b      	ldrb	r3, [r3, #20]
 801e660:	2b01      	cmp	r3, #1
 801e662:	d106      	bne.n	801e672 <tcp_sent+0x26>
 801e664:	4b06      	ldr	r3, [pc, #24]	; (801e680 <tcp_sent+0x34>)
 801e666:	f240 62cc 	movw	r2, #1740	; 0x6cc
 801e66a:	4906      	ldr	r1, [pc, #24]	; (801e684 <tcp_sent+0x38>)
 801e66c:	4806      	ldr	r0, [pc, #24]	; (801e688 <tcp_sent+0x3c>)
 801e66e:	f007 fa57 	bl	8025b20 <iprintf>
    pcb->sent = sent;
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	683a      	ldr	r2, [r7, #0]
 801e676:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 801e678:	bf00      	nop
 801e67a:	3708      	adds	r7, #8
 801e67c:	46bd      	mov	sp, r7
 801e67e:	bd80      	pop	{r7, pc}
 801e680:	08028028 	.word	0x08028028
 801e684:	08028370 	.word	0x08028370
 801e688:	08028064 	.word	0x08028064

0801e68c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801e68c:	b580      	push	{r7, lr}
 801e68e:	b082      	sub	sp, #8
 801e690:	af00      	add	r7, sp, #0
 801e692:	6078      	str	r0, [r7, #4]
 801e694:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	2b00      	cmp	r3, #0
 801e69a:	d00e      	beq.n	801e6ba <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801e69c:	687b      	ldr	r3, [r7, #4]
 801e69e:	7d1b      	ldrb	r3, [r3, #20]
 801e6a0:	2b01      	cmp	r3, #1
 801e6a2:	d106      	bne.n	801e6b2 <tcp_err+0x26>
 801e6a4:	4b07      	ldr	r3, [pc, #28]	; (801e6c4 <tcp_err+0x38>)
 801e6a6:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 801e6aa:	4907      	ldr	r1, [pc, #28]	; (801e6c8 <tcp_err+0x3c>)
 801e6ac:	4807      	ldr	r0, [pc, #28]	; (801e6cc <tcp_err+0x40>)
 801e6ae:	f007 fa37 	bl	8025b20 <iprintf>
    pcb->errf = err;
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	683a      	ldr	r2, [r7, #0]
 801e6b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 801e6ba:	bf00      	nop
 801e6bc:	3708      	adds	r7, #8
 801e6be:	46bd      	mov	sp, r7
 801e6c0:	bd80      	pop	{r7, pc}
 801e6c2:	bf00      	nop
 801e6c4:	08028028 	.word	0x08028028
 801e6c8:	08028398 	.word	0x08028398
 801e6cc:	08028064 	.word	0x08028064

0801e6d0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801e6d0:	b480      	push	{r7}
 801e6d2:	b085      	sub	sp, #20
 801e6d4:	af00      	add	r7, sp, #0
 801e6d6:	6078      	str	r0, [r7, #4]
 801e6d8:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801e6da:	687b      	ldr	r3, [r7, #4]
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d008      	beq.n	801e6f2 <tcp_accept+0x22>
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	7d1b      	ldrb	r3, [r3, #20]
 801e6e4:	2b01      	cmp	r3, #1
 801e6e6:	d104      	bne.n	801e6f2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801e6ec:	68fb      	ldr	r3, [r7, #12]
 801e6ee:	683a      	ldr	r2, [r7, #0]
 801e6f0:	619a      	str	r2, [r3, #24]
  }
}
 801e6f2:	bf00      	nop
 801e6f4:	3714      	adds	r7, #20
 801e6f6:	46bd      	mov	sp, r7
 801e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6fc:	4770      	bx	lr
	...

0801e700 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801e700:	b580      	push	{r7, lr}
 801e702:	b084      	sub	sp, #16
 801e704:	af00      	add	r7, sp, #0
 801e706:	60f8      	str	r0, [r7, #12]
 801e708:	60b9      	str	r1, [r7, #8]
 801e70a:	4613      	mov	r3, r2
 801e70c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801e70e:	68fb      	ldr	r3, [r7, #12]
 801e710:	7d1b      	ldrb	r3, [r3, #20]
 801e712:	2b01      	cmp	r3, #1
 801e714:	d106      	bne.n	801e724 <tcp_poll+0x24>
 801e716:	4b09      	ldr	r3, [pc, #36]	; (801e73c <tcp_poll+0x3c>)
 801e718:	f240 7203 	movw	r2, #1795	; 0x703
 801e71c:	4908      	ldr	r1, [pc, #32]	; (801e740 <tcp_poll+0x40>)
 801e71e:	4809      	ldr	r0, [pc, #36]	; (801e744 <tcp_poll+0x44>)
 801e720:	f007 f9fe 	bl	8025b20 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801e724:	68fb      	ldr	r3, [r7, #12]
 801e726:	68ba      	ldr	r2, [r7, #8]
 801e728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801e72c:	68fb      	ldr	r3, [r7, #12]
 801e72e:	79fa      	ldrb	r2, [r7, #7]
 801e730:	771a      	strb	r2, [r3, #28]
}
 801e732:	bf00      	nop
 801e734:	3710      	adds	r7, #16
 801e736:	46bd      	mov	sp, r7
 801e738:	bd80      	pop	{r7, pc}
 801e73a:	bf00      	nop
 801e73c:	08028028 	.word	0x08028028
 801e740:	080283c0 	.word	0x080283c0
 801e744:	08028064 	.word	0x08028064

0801e748 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801e748:	b580      	push	{r7, lr}
 801e74a:	b082      	sub	sp, #8
 801e74c:	af00      	add	r7, sp, #0
 801e74e:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 801e750:	687b      	ldr	r3, [r7, #4]
 801e752:	7d1b      	ldrb	r3, [r3, #20]
 801e754:	2b00      	cmp	r3, #0
 801e756:	d034      	beq.n	801e7c2 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 801e758:	687b      	ldr	r3, [r7, #4]
 801e75a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801e75c:	2b0a      	cmp	r3, #10
 801e75e:	d030      	beq.n	801e7c2 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 801e764:	2b01      	cmp	r3, #1
 801e766:	d02c      	beq.n	801e7c2 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801e768:	687b      	ldr	r3, [r7, #4]
 801e76a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d007      	beq.n	801e780 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e774:	4618      	mov	r0, r3
 801e776:	f7fe fa77 	bl	801cc68 <pbuf_free>
      pcb->refused_data = NULL;
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	2200      	movs	r2, #0
 801e77e:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 801e780:	687b      	ldr	r3, [r7, #4]
 801e782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e784:	4618      	mov	r0, r3
 801e786:	f7ff fd76 	bl	801e276 <tcp_segs_free>
    pcb->ooseq = NULL;
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	2200      	movs	r2, #0
 801e78e:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e796:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e79c:	4618      	mov	r0, r3
 801e79e:	f7ff fd6a 	bl	801e276 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e7a6:	4618      	mov	r0, r3
 801e7a8:	f7ff fd65 	bl	801e276 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801e7ac:	687b      	ldr	r3, [r7, #4]
 801e7ae:	2200      	movs	r2, #0
 801e7b0:	669a      	str	r2, [r3, #104]	; 0x68
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801e7b6:	687b      	ldr	r3, [r7, #4]
 801e7b8:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	2200      	movs	r2, #0
 801e7be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 801e7c2:	bf00      	nop
 801e7c4:	3708      	adds	r7, #8
 801e7c6:	46bd      	mov	sp, r7
 801e7c8:	bd80      	pop	{r7, pc}
	...

0801e7cc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801e7cc:	b580      	push	{r7, lr}
 801e7ce:	b084      	sub	sp, #16
 801e7d0:	af00      	add	r7, sp, #0
 801e7d2:	6078      	str	r0, [r7, #4]
 801e7d4:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 801e7d6:	687b      	ldr	r3, [r7, #4]
 801e7d8:	681a      	ldr	r2, [r3, #0]
 801e7da:	683b      	ldr	r3, [r7, #0]
 801e7dc:	429a      	cmp	r2, r3
 801e7de:	d105      	bne.n	801e7ec <tcp_pcb_remove+0x20>
 801e7e0:	687b      	ldr	r3, [r7, #4]
 801e7e2:	681b      	ldr	r3, [r3, #0]
 801e7e4:	68da      	ldr	r2, [r3, #12]
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	601a      	str	r2, [r3, #0]
 801e7ea:	e013      	b.n	801e814 <tcp_pcb_remove+0x48>
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	681b      	ldr	r3, [r3, #0]
 801e7f0:	60fb      	str	r3, [r7, #12]
 801e7f2:	e00c      	b.n	801e80e <tcp_pcb_remove+0x42>
 801e7f4:	68fb      	ldr	r3, [r7, #12]
 801e7f6:	68da      	ldr	r2, [r3, #12]
 801e7f8:	683b      	ldr	r3, [r7, #0]
 801e7fa:	429a      	cmp	r2, r3
 801e7fc:	d104      	bne.n	801e808 <tcp_pcb_remove+0x3c>
 801e7fe:	683b      	ldr	r3, [r7, #0]
 801e800:	68da      	ldr	r2, [r3, #12]
 801e802:	68fb      	ldr	r3, [r7, #12]
 801e804:	60da      	str	r2, [r3, #12]
 801e806:	e005      	b.n	801e814 <tcp_pcb_remove+0x48>
 801e808:	68fb      	ldr	r3, [r7, #12]
 801e80a:	68db      	ldr	r3, [r3, #12]
 801e80c:	60fb      	str	r3, [r7, #12]
 801e80e:	68fb      	ldr	r3, [r7, #12]
 801e810:	2b00      	cmp	r3, #0
 801e812:	d1ef      	bne.n	801e7f4 <tcp_pcb_remove+0x28>
 801e814:	683b      	ldr	r3, [r7, #0]
 801e816:	2200      	movs	r2, #0
 801e818:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801e81a:	6838      	ldr	r0, [r7, #0]
 801e81c:	f7ff ff94 	bl	801e748 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 801e820:	683b      	ldr	r3, [r7, #0]
 801e822:	7d1b      	ldrb	r3, [r3, #20]
 801e824:	2b0a      	cmp	r3, #10
 801e826:	d013      	beq.n	801e850 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 801e828:	683b      	ldr	r3, [r7, #0]
 801e82a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 801e82c:	2b01      	cmp	r3, #1
 801e82e:	d00f      	beq.n	801e850 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 801e830:	683b      	ldr	r3, [r7, #0]
 801e832:	7e9b      	ldrb	r3, [r3, #26]
 801e834:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 801e838:	2b00      	cmp	r3, #0
 801e83a:	d009      	beq.n	801e850 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 801e83c:	683b      	ldr	r3, [r7, #0]
 801e83e:	7e9b      	ldrb	r3, [r3, #26]
 801e840:	f043 0302 	orr.w	r3, r3, #2
 801e844:	b2da      	uxtb	r2, r3
 801e846:	683b      	ldr	r3, [r7, #0]
 801e848:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801e84a:	6838      	ldr	r0, [r7, #0]
 801e84c:	f003 f9c0 	bl	8021bd0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801e850:	683b      	ldr	r3, [r7, #0]
 801e852:	7d1b      	ldrb	r3, [r3, #20]
 801e854:	2b01      	cmp	r3, #1
 801e856:	d020      	beq.n	801e89a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801e858:	683b      	ldr	r3, [r7, #0]
 801e85a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	d006      	beq.n	801e86e <tcp_pcb_remove+0xa2>
 801e860:	4b13      	ldr	r3, [pc, #76]	; (801e8b0 <tcp_pcb_remove+0xe4>)
 801e862:	f240 7253 	movw	r2, #1875	; 0x753
 801e866:	4913      	ldr	r1, [pc, #76]	; (801e8b4 <tcp_pcb_remove+0xe8>)
 801e868:	4813      	ldr	r0, [pc, #76]	; (801e8b8 <tcp_pcb_remove+0xec>)
 801e86a:	f007 f959 	bl	8025b20 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801e86e:	683b      	ldr	r3, [r7, #0]
 801e870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e872:	2b00      	cmp	r3, #0
 801e874:	d006      	beq.n	801e884 <tcp_pcb_remove+0xb8>
 801e876:	4b0e      	ldr	r3, [pc, #56]	; (801e8b0 <tcp_pcb_remove+0xe4>)
 801e878:	f240 7254 	movw	r2, #1876	; 0x754
 801e87c:	490f      	ldr	r1, [pc, #60]	; (801e8bc <tcp_pcb_remove+0xf0>)
 801e87e:	480e      	ldr	r0, [pc, #56]	; (801e8b8 <tcp_pcb_remove+0xec>)
 801e880:	f007 f94e 	bl	8025b20 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801e884:	683b      	ldr	r3, [r7, #0]
 801e886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e888:	2b00      	cmp	r3, #0
 801e88a:	d006      	beq.n	801e89a <tcp_pcb_remove+0xce>
 801e88c:	4b08      	ldr	r3, [pc, #32]	; (801e8b0 <tcp_pcb_remove+0xe4>)
 801e88e:	f240 7256 	movw	r2, #1878	; 0x756
 801e892:	490b      	ldr	r1, [pc, #44]	; (801e8c0 <tcp_pcb_remove+0xf4>)
 801e894:	4808      	ldr	r0, [pc, #32]	; (801e8b8 <tcp_pcb_remove+0xec>)
 801e896:	f007 f943 	bl	8025b20 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801e89a:	683b      	ldr	r3, [r7, #0]
 801e89c:	2200      	movs	r2, #0
 801e89e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801e8a0:	683b      	ldr	r3, [r7, #0]
 801e8a2:	2200      	movs	r2, #0
 801e8a4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801e8a6:	bf00      	nop
 801e8a8:	3710      	adds	r7, #16
 801e8aa:	46bd      	mov	sp, r7
 801e8ac:	bd80      	pop	{r7, pc}
 801e8ae:	bf00      	nop
 801e8b0:	08028028 	.word	0x08028028
 801e8b4:	080283e0 	.word	0x080283e0
 801e8b8:	08028064 	.word	0x08028064
 801e8bc:	080283f8 	.word	0x080283f8
 801e8c0:	08028414 	.word	0x08028414

0801e8c4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801e8c4:	b480      	push	{r7}
 801e8c6:	b083      	sub	sp, #12
 801e8c8:	af00      	add	r7, sp, #0
 801e8ca:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801e8cc:	4b07      	ldr	r3, [pc, #28]	; (801e8ec <tcp_next_iss+0x28>)
 801e8ce:	681a      	ldr	r2, [r3, #0]
 801e8d0:	4b07      	ldr	r3, [pc, #28]	; (801e8f0 <tcp_next_iss+0x2c>)
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	4413      	add	r3, r2
 801e8d6:	4a05      	ldr	r2, [pc, #20]	; (801e8ec <tcp_next_iss+0x28>)
 801e8d8:	6013      	str	r3, [r2, #0]
  return iss;
 801e8da:	4b04      	ldr	r3, [pc, #16]	; (801e8ec <tcp_next_iss+0x28>)
 801e8dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801e8de:	4618      	mov	r0, r3
 801e8e0:	370c      	adds	r7, #12
 801e8e2:	46bd      	mov	sp, r7
 801e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8e8:	4770      	bx	lr
 801e8ea:	bf00      	nop
 801e8ec:	2000000c 	.word	0x2000000c
 801e8f0:	20008c34 	.word	0x20008c34

0801e8f4 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 801e8f4:	b580      	push	{r7, lr}
 801e8f6:	b084      	sub	sp, #16
 801e8f8:	af00      	add	r7, sp, #0
 801e8fa:	4603      	mov	r3, r0
 801e8fc:	6039      	str	r1, [r7, #0]
 801e8fe:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 801e900:	6838      	ldr	r0, [r7, #0]
 801e902:	f7fb fe03 	bl	801a50c <ip4_route>
 801e906:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	d101      	bne.n	801e912 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 801e90e:	88fb      	ldrh	r3, [r7, #6]
 801e910:	e010      	b.n	801e934 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 801e912:	68fb      	ldr	r3, [r7, #12]
 801e914:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e916:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801e918:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801e91c:	2b00      	cmp	r3, #0
 801e91e:	d008      	beq.n	801e932 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 801e920:	897b      	ldrh	r3, [r7, #10]
 801e922:	3b28      	subs	r3, #40	; 0x28
 801e924:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801e926:	893a      	ldrh	r2, [r7, #8]
 801e928:	88fb      	ldrh	r3, [r7, #6]
 801e92a:	4293      	cmp	r3, r2
 801e92c:	bf28      	it	cs
 801e92e:	4613      	movcs	r3, r2
 801e930:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 801e932:	88fb      	ldrh	r3, [r7, #6]
}
 801e934:	4618      	mov	r0, r3
 801e936:	3710      	adds	r7, #16
 801e938:	46bd      	mov	sp, r7
 801e93a:	bd80      	pop	{r7, pc}

0801e93c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 801e93c:	b580      	push	{r7, lr}
 801e93e:	b084      	sub	sp, #16
 801e940:	af00      	add	r7, sp, #0
 801e942:	6078      	str	r0, [r7, #4]
 801e944:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801e946:	683b      	ldr	r3, [r7, #0]
 801e948:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801e94a:	e011      	b.n	801e970 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801e94c:	68fb      	ldr	r3, [r7, #12]
 801e94e:	681a      	ldr	r2, [r3, #0]
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	429a      	cmp	r2, r3
 801e956:	d108      	bne.n	801e96a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	68db      	ldr	r3, [r3, #12]
 801e95c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801e95e:	68f8      	ldr	r0, [r7, #12]
 801e960:	f7fe fec8 	bl	801d6f4 <tcp_abort>
      pcb = next;
 801e964:	68bb      	ldr	r3, [r7, #8]
 801e966:	60fb      	str	r3, [r7, #12]
 801e968:	e002      	b.n	801e970 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 801e96a:	68fb      	ldr	r3, [r7, #12]
 801e96c:	68db      	ldr	r3, [r3, #12]
 801e96e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801e970:	68fb      	ldr	r3, [r7, #12]
 801e972:	2b00      	cmp	r3, #0
 801e974:	d1ea      	bne.n	801e94c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 801e976:	bf00      	nop
 801e978:	3710      	adds	r7, #16
 801e97a:	46bd      	mov	sp, r7
 801e97c:	bd80      	pop	{r7, pc}
	...

0801e980 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b084      	sub	sp, #16
 801e984:	af00      	add	r7, sp, #0
 801e986:	6078      	str	r0, [r7, #4]
 801e988:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	2b00      	cmp	r3, #0
 801e98e:	d02c      	beq.n	801e9ea <tcp_netif_ip_addr_changed+0x6a>
 801e990:	687b      	ldr	r3, [r7, #4]
 801e992:	681b      	ldr	r3, [r3, #0]
 801e994:	2b00      	cmp	r3, #0
 801e996:	d028      	beq.n	801e9ea <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801e998:	4b16      	ldr	r3, [pc, #88]	; (801e9f4 <tcp_netif_ip_addr_changed+0x74>)
 801e99a:	681b      	ldr	r3, [r3, #0]
 801e99c:	4619      	mov	r1, r3
 801e99e:	6878      	ldr	r0, [r7, #4]
 801e9a0:	f7ff ffcc 	bl	801e93c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801e9a4:	4b14      	ldr	r3, [pc, #80]	; (801e9f8 <tcp_netif_ip_addr_changed+0x78>)
 801e9a6:	681b      	ldr	r3, [r3, #0]
 801e9a8:	4619      	mov	r1, r3
 801e9aa:	6878      	ldr	r0, [r7, #4]
 801e9ac:	f7ff ffc6 	bl	801e93c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801e9b0:	683b      	ldr	r3, [r7, #0]
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	d019      	beq.n	801e9ea <tcp_netif_ip_addr_changed+0x6a>
 801e9b6:	683b      	ldr	r3, [r7, #0]
 801e9b8:	681b      	ldr	r3, [r3, #0]
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d015      	beq.n	801e9ea <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801e9be:	4b0f      	ldr	r3, [pc, #60]	; (801e9fc <tcp_netif_ip_addr_changed+0x7c>)
 801e9c0:	681b      	ldr	r3, [r3, #0]
 801e9c2:	60fb      	str	r3, [r7, #12]
 801e9c4:	e00e      	b.n	801e9e4 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 801e9c6:	68fb      	ldr	r3, [r7, #12]
 801e9c8:	68db      	ldr	r3, [r3, #12]
 801e9ca:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801e9cc:	68fb      	ldr	r3, [r7, #12]
 801e9ce:	681a      	ldr	r2, [r3, #0]
 801e9d0:	687b      	ldr	r3, [r7, #4]
 801e9d2:	681b      	ldr	r3, [r3, #0]
 801e9d4:	429a      	cmp	r2, r3
 801e9d6:	d103      	bne.n	801e9e0 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801e9d8:	683b      	ldr	r3, [r7, #0]
 801e9da:	681a      	ldr	r2, [r3, #0]
 801e9dc:	68fb      	ldr	r3, [r7, #12]
 801e9de:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801e9e0:	68bb      	ldr	r3, [r7, #8]
 801e9e2:	60fb      	str	r3, [r7, #12]
 801e9e4:	68fb      	ldr	r3, [r7, #12]
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	d1ed      	bne.n	801e9c6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801e9ea:	bf00      	nop
 801e9ec:	3710      	adds	r7, #16
 801e9ee:	46bd      	mov	sp, r7
 801e9f0:	bd80      	pop	{r7, pc}
 801e9f2:	bf00      	nop
 801e9f4:	20008c30 	.word	0x20008c30
 801e9f8:	20008c3c 	.word	0x20008c3c
 801e9fc:	20008c38 	.word	0x20008c38

0801ea00 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801ea00:	b590      	push	{r4, r7, lr}
 801ea02:	b08b      	sub	sp, #44	; 0x2c
 801ea04:	af02      	add	r7, sp, #8
 801ea06:	6078      	str	r0, [r7, #4]
 801ea08:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	685b      	ldr	r3, [r3, #4]
 801ea0e:	4a82      	ldr	r2, [pc, #520]	; (801ec18 <tcp_input+0x218>)
 801ea10:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	895b      	ldrh	r3, [r3, #10]
 801ea16:	2b13      	cmp	r3, #19
 801ea18:	f240 8388 	bls.w	801f12c <tcp_input+0x72c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ea1c:	4b7f      	ldr	r3, [pc, #508]	; (801ec1c <tcp_input+0x21c>)
 801ea1e:	695a      	ldr	r2, [r3, #20]
 801ea20:	4b7e      	ldr	r3, [pc, #504]	; (801ec1c <tcp_input+0x21c>)
 801ea22:	681b      	ldr	r3, [r3, #0]
 801ea24:	4619      	mov	r1, r3
 801ea26:	4610      	mov	r0, r2
 801ea28:	f7fb ffe6 	bl	801a9f8 <ip4_addr_isbroadcast_u32>
 801ea2c:	4603      	mov	r3, r0
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	f040 837f 	bne.w	801f132 <tcp_input+0x732>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ea34:	4b79      	ldr	r3, [pc, #484]	; (801ec1c <tcp_input+0x21c>)
 801ea36:	695b      	ldr	r3, [r3, #20]
 801ea38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ea3c:	2be0      	cmp	r3, #224	; 0xe0
 801ea3e:	f000 8378 	beq.w	801f132 <tcp_input+0x732>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801ea42:	4b75      	ldr	r3, [pc, #468]	; (801ec18 <tcp_input+0x218>)
 801ea44:	681b      	ldr	r3, [r3, #0]
 801ea46:	899b      	ldrh	r3, [r3, #12]
 801ea48:	b29b      	uxth	r3, r3
 801ea4a:	4618      	mov	r0, r3
 801ea4c:	f7fa fc7c 	bl	8019348 <lwip_htons>
 801ea50:	4603      	mov	r3, r0
 801ea52:	0b1b      	lsrs	r3, r3, #12
 801ea54:	b29b      	uxth	r3, r3
 801ea56:	b2db      	uxtb	r3, r3
 801ea58:	009b      	lsls	r3, r3, #2
 801ea5a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ea5c:	7cbb      	ldrb	r3, [r7, #18]
 801ea5e:	2b13      	cmp	r3, #19
 801ea60:	f240 8367 	bls.w	801f132 <tcp_input+0x732>
 801ea64:	7cbb      	ldrb	r3, [r7, #18]
 801ea66:	b29a      	uxth	r2, r3
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	891b      	ldrh	r3, [r3, #8]
 801ea6c:	429a      	cmp	r2, r3
 801ea6e:	f200 8360 	bhi.w	801f132 <tcp_input+0x732>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801ea72:	7cbb      	ldrb	r3, [r7, #18]
 801ea74:	b29b      	uxth	r3, r3
 801ea76:	3b14      	subs	r3, #20
 801ea78:	b29a      	uxth	r2, r3
 801ea7a:	4b69      	ldr	r3, [pc, #420]	; (801ec20 <tcp_input+0x220>)
 801ea7c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801ea7e:	4b69      	ldr	r3, [pc, #420]	; (801ec24 <tcp_input+0x224>)
 801ea80:	2200      	movs	r2, #0
 801ea82:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	895a      	ldrh	r2, [r3, #10]
 801ea88:	7cbb      	ldrb	r3, [r7, #18]
 801ea8a:	b29b      	uxth	r3, r3
 801ea8c:	429a      	cmp	r2, r3
 801ea8e:	d30d      	bcc.n	801eaac <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801ea90:	4b63      	ldr	r3, [pc, #396]	; (801ec20 <tcp_input+0x220>)
 801ea92:	881a      	ldrh	r2, [r3, #0]
 801ea94:	4b64      	ldr	r3, [pc, #400]	; (801ec28 <tcp_input+0x228>)
 801ea96:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 801ea98:	7cbb      	ldrb	r3, [r7, #18]
 801ea9a:	b29b      	uxth	r3, r3
 801ea9c:	425b      	negs	r3, r3
 801ea9e:	b29b      	uxth	r3, r3
 801eaa0:	b21b      	sxth	r3, r3
 801eaa2:	4619      	mov	r1, r3
 801eaa4:	6878      	ldr	r0, [r7, #4]
 801eaa6:	f7fe f8bb 	bl	801cc20 <pbuf_header>
 801eaaa:	e055      	b.n	801eb58 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	681b      	ldr	r3, [r3, #0]
 801eab0:	2b00      	cmp	r3, #0
 801eab2:	d105      	bne.n	801eac0 <tcp_input+0xc0>
 801eab4:	4b5d      	ldr	r3, [pc, #372]	; (801ec2c <tcp_input+0x22c>)
 801eab6:	22b2      	movs	r2, #178	; 0xb2
 801eab8:	495d      	ldr	r1, [pc, #372]	; (801ec30 <tcp_input+0x230>)
 801eaba:	485e      	ldr	r0, [pc, #376]	; (801ec34 <tcp_input+0x234>)
 801eabc:	f007 f830 	bl	8025b20 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801eac0:	f06f 0113 	mvn.w	r1, #19
 801eac4:	6878      	ldr	r0, [r7, #4]
 801eac6:	f7fe f8ab 	bl	801cc20 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801eaca:	687b      	ldr	r3, [r7, #4]
 801eacc:	895a      	ldrh	r2, [r3, #10]
 801eace:	4b56      	ldr	r3, [pc, #344]	; (801ec28 <tcp_input+0x228>)
 801ead0:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801ead2:	4b53      	ldr	r3, [pc, #332]	; (801ec20 <tcp_input+0x220>)
 801ead4:	881a      	ldrh	r2, [r3, #0]
 801ead6:	4b54      	ldr	r3, [pc, #336]	; (801ec28 <tcp_input+0x228>)
 801ead8:	881b      	ldrh	r3, [r3, #0]
 801eada:	1ad3      	subs	r3, r2, r3
 801eadc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801eade:	4b52      	ldr	r3, [pc, #328]	; (801ec28 <tcp_input+0x228>)
 801eae0:	881b      	ldrh	r3, [r3, #0]
 801eae2:	425b      	negs	r3, r3
 801eae4:	b29b      	uxth	r3, r3
 801eae6:	b21b      	sxth	r3, r3
 801eae8:	4619      	mov	r1, r3
 801eaea:	6878      	ldr	r0, [r7, #4]
 801eaec:	f7fe f898 	bl	801cc20 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	895b      	ldrh	r3, [r3, #10]
 801eaf6:	8a3a      	ldrh	r2, [r7, #16]
 801eaf8:	429a      	cmp	r2, r3
 801eafa:	f200 8319 	bhi.w	801f130 <tcp_input+0x730>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	681b      	ldr	r3, [r3, #0]
 801eb02:	685b      	ldr	r3, [r3, #4]
 801eb04:	4a47      	ldr	r2, [pc, #284]	; (801ec24 <tcp_input+0x224>)
 801eb06:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	681a      	ldr	r2, [r3, #0]
 801eb0c:	8a3b      	ldrh	r3, [r7, #16]
 801eb0e:	425b      	negs	r3, r3
 801eb10:	b29b      	uxth	r3, r3
 801eb12:	b21b      	sxth	r3, r3
 801eb14:	4619      	mov	r1, r3
 801eb16:	4610      	mov	r0, r2
 801eb18:	f7fe f882 	bl	801cc20 <pbuf_header>
    p->tot_len -= opt2len;
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	891a      	ldrh	r2, [r3, #8]
 801eb20:	8a3b      	ldrh	r3, [r7, #16]
 801eb22:	1ad3      	subs	r3, r2, r3
 801eb24:	b29a      	uxth	r2, r3
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801eb2a:	687b      	ldr	r3, [r7, #4]
 801eb2c:	895b      	ldrh	r3, [r3, #10]
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	d005      	beq.n	801eb3e <tcp_input+0x13e>
 801eb32:	4b3e      	ldr	r3, [pc, #248]	; (801ec2c <tcp_input+0x22c>)
 801eb34:	22cf      	movs	r2, #207	; 0xcf
 801eb36:	4940      	ldr	r1, [pc, #256]	; (801ec38 <tcp_input+0x238>)
 801eb38:	483e      	ldr	r0, [pc, #248]	; (801ec34 <tcp_input+0x234>)
 801eb3a:	f006 fff1 	bl	8025b20 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801eb3e:	687b      	ldr	r3, [r7, #4]
 801eb40:	891a      	ldrh	r2, [r3, #8]
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	681b      	ldr	r3, [r3, #0]
 801eb46:	891b      	ldrh	r3, [r3, #8]
 801eb48:	429a      	cmp	r2, r3
 801eb4a:	d005      	beq.n	801eb58 <tcp_input+0x158>
 801eb4c:	4b37      	ldr	r3, [pc, #220]	; (801ec2c <tcp_input+0x22c>)
 801eb4e:	22d0      	movs	r2, #208	; 0xd0
 801eb50:	493a      	ldr	r1, [pc, #232]	; (801ec3c <tcp_input+0x23c>)
 801eb52:	4838      	ldr	r0, [pc, #224]	; (801ec34 <tcp_input+0x234>)
 801eb54:	f006 ffe4 	bl	8025b20 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801eb58:	4b2f      	ldr	r3, [pc, #188]	; (801ec18 <tcp_input+0x218>)
 801eb5a:	681c      	ldr	r4, [r3, #0]
 801eb5c:	4b2e      	ldr	r3, [pc, #184]	; (801ec18 <tcp_input+0x218>)
 801eb5e:	681b      	ldr	r3, [r3, #0]
 801eb60:	881b      	ldrh	r3, [r3, #0]
 801eb62:	b29b      	uxth	r3, r3
 801eb64:	4618      	mov	r0, r3
 801eb66:	f7fa fbef 	bl	8019348 <lwip_htons>
 801eb6a:	4603      	mov	r3, r0
 801eb6c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801eb6e:	4b2a      	ldr	r3, [pc, #168]	; (801ec18 <tcp_input+0x218>)
 801eb70:	681c      	ldr	r4, [r3, #0]
 801eb72:	4b29      	ldr	r3, [pc, #164]	; (801ec18 <tcp_input+0x218>)
 801eb74:	681b      	ldr	r3, [r3, #0]
 801eb76:	885b      	ldrh	r3, [r3, #2]
 801eb78:	b29b      	uxth	r3, r3
 801eb7a:	4618      	mov	r0, r3
 801eb7c:	f7fa fbe4 	bl	8019348 <lwip_htons>
 801eb80:	4603      	mov	r3, r0
 801eb82:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801eb84:	4b24      	ldr	r3, [pc, #144]	; (801ec18 <tcp_input+0x218>)
 801eb86:	681c      	ldr	r4, [r3, #0]
 801eb88:	4b23      	ldr	r3, [pc, #140]	; (801ec18 <tcp_input+0x218>)
 801eb8a:	681b      	ldr	r3, [r3, #0]
 801eb8c:	685b      	ldr	r3, [r3, #4]
 801eb8e:	4618      	mov	r0, r3
 801eb90:	f7fa fbe8 	bl	8019364 <lwip_htonl>
 801eb94:	4603      	mov	r3, r0
 801eb96:	6063      	str	r3, [r4, #4]
 801eb98:	6863      	ldr	r3, [r4, #4]
 801eb9a:	4a29      	ldr	r2, [pc, #164]	; (801ec40 <tcp_input+0x240>)
 801eb9c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801eb9e:	4b1e      	ldr	r3, [pc, #120]	; (801ec18 <tcp_input+0x218>)
 801eba0:	681c      	ldr	r4, [r3, #0]
 801eba2:	4b1d      	ldr	r3, [pc, #116]	; (801ec18 <tcp_input+0x218>)
 801eba4:	681b      	ldr	r3, [r3, #0]
 801eba6:	689b      	ldr	r3, [r3, #8]
 801eba8:	4618      	mov	r0, r3
 801ebaa:	f7fa fbdb 	bl	8019364 <lwip_htonl>
 801ebae:	4603      	mov	r3, r0
 801ebb0:	60a3      	str	r3, [r4, #8]
 801ebb2:	68a3      	ldr	r3, [r4, #8]
 801ebb4:	4a23      	ldr	r2, [pc, #140]	; (801ec44 <tcp_input+0x244>)
 801ebb6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ebb8:	4b17      	ldr	r3, [pc, #92]	; (801ec18 <tcp_input+0x218>)
 801ebba:	681c      	ldr	r4, [r3, #0]
 801ebbc:	4b16      	ldr	r3, [pc, #88]	; (801ec18 <tcp_input+0x218>)
 801ebbe:	681b      	ldr	r3, [r3, #0]
 801ebc0:	89db      	ldrh	r3, [r3, #14]
 801ebc2:	b29b      	uxth	r3, r3
 801ebc4:	4618      	mov	r0, r3
 801ebc6:	f7fa fbbf 	bl	8019348 <lwip_htons>
 801ebca:	4603      	mov	r3, r0
 801ebcc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801ebce:	4b12      	ldr	r3, [pc, #72]	; (801ec18 <tcp_input+0x218>)
 801ebd0:	681b      	ldr	r3, [r3, #0]
 801ebd2:	899b      	ldrh	r3, [r3, #12]
 801ebd4:	b29b      	uxth	r3, r3
 801ebd6:	4618      	mov	r0, r3
 801ebd8:	f7fa fbb6 	bl	8019348 <lwip_htons>
 801ebdc:	4603      	mov	r3, r0
 801ebde:	b2db      	uxtb	r3, r3
 801ebe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ebe4:	b2da      	uxtb	r2, r3
 801ebe6:	4b18      	ldr	r3, [pc, #96]	; (801ec48 <tcp_input+0x248>)
 801ebe8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801ebea:	687b      	ldr	r3, [r7, #4]
 801ebec:	891a      	ldrh	r2, [r3, #8]
 801ebee:	4b16      	ldr	r3, [pc, #88]	; (801ec48 <tcp_input+0x248>)
 801ebf0:	781b      	ldrb	r3, [r3, #0]
 801ebf2:	f003 0303 	and.w	r3, r3, #3
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	bf14      	ite	ne
 801ebfa:	2301      	movne	r3, #1
 801ebfc:	2300      	moveq	r3, #0
 801ebfe:	b2db      	uxtb	r3, r3
 801ec00:	b29b      	uxth	r3, r3
 801ec02:	4413      	add	r3, r2
 801ec04:	b29a      	uxth	r2, r3
 801ec06:	4b11      	ldr	r3, [pc, #68]	; (801ec4c <tcp_input+0x24c>)
 801ec08:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801ec0a:	2300      	movs	r3, #0
 801ec0c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ec0e:	4b10      	ldr	r3, [pc, #64]	; (801ec50 <tcp_input+0x250>)
 801ec10:	681b      	ldr	r3, [r3, #0]
 801ec12:	61fb      	str	r3, [r7, #28]
 801ec14:	e082      	b.n	801ed1c <tcp_input+0x31c>
 801ec16:	bf00      	nop
 801ec18:	20004104 	.word	0x20004104
 801ec1c:	20004608 	.word	0x20004608
 801ec20:	20004108 	.word	0x20004108
 801ec24:	2000410c 	.word	0x2000410c
 801ec28:	2000410a 	.word	0x2000410a
 801ec2c:	0802842c 	.word	0x0802842c
 801ec30:	08028460 	.word	0x08028460
 801ec34:	08028470 	.word	0x08028470
 801ec38:	08028498 	.word	0x08028498
 801ec3c:	080284a4 	.word	0x080284a4
 801ec40:	20004114 	.word	0x20004114
 801ec44:	20004118 	.word	0x20004118
 801ec48:	20004120 	.word	0x20004120
 801ec4c:	2000411e 	.word	0x2000411e
 801ec50:	20008c30 	.word	0x20008c30
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ec54:	69fb      	ldr	r3, [r7, #28]
 801ec56:	7d1b      	ldrb	r3, [r3, #20]
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	d105      	bne.n	801ec68 <tcp_input+0x268>
 801ec5c:	4b8f      	ldr	r3, [pc, #572]	; (801ee9c <tcp_input+0x49c>)
 801ec5e:	22e2      	movs	r2, #226	; 0xe2
 801ec60:	498f      	ldr	r1, [pc, #572]	; (801eea0 <tcp_input+0x4a0>)
 801ec62:	4890      	ldr	r0, [pc, #576]	; (801eea4 <tcp_input+0x4a4>)
 801ec64:	f006 ff5c 	bl	8025b20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ec68:	69fb      	ldr	r3, [r7, #28]
 801ec6a:	7d1b      	ldrb	r3, [r3, #20]
 801ec6c:	2b0a      	cmp	r3, #10
 801ec6e:	d105      	bne.n	801ec7c <tcp_input+0x27c>
 801ec70:	4b8a      	ldr	r3, [pc, #552]	; (801ee9c <tcp_input+0x49c>)
 801ec72:	22e3      	movs	r2, #227	; 0xe3
 801ec74:	498c      	ldr	r1, [pc, #560]	; (801eea8 <tcp_input+0x4a8>)
 801ec76:	488b      	ldr	r0, [pc, #556]	; (801eea4 <tcp_input+0x4a4>)
 801ec78:	f006 ff52 	bl	8025b20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801ec7c:	69fb      	ldr	r3, [r7, #28]
 801ec7e:	7d1b      	ldrb	r3, [r3, #20]
 801ec80:	2b01      	cmp	r3, #1
 801ec82:	d105      	bne.n	801ec90 <tcp_input+0x290>
 801ec84:	4b85      	ldr	r3, [pc, #532]	; (801ee9c <tcp_input+0x49c>)
 801ec86:	22e4      	movs	r2, #228	; 0xe4
 801ec88:	4988      	ldr	r1, [pc, #544]	; (801eeac <tcp_input+0x4ac>)
 801ec8a:	4886      	ldr	r0, [pc, #536]	; (801eea4 <tcp_input+0x4a4>)
 801ec8c:	f006 ff48 	bl	8025b20 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 801ec90:	69fb      	ldr	r3, [r7, #28]
 801ec92:	8b1a      	ldrh	r2, [r3, #24]
 801ec94:	4b86      	ldr	r3, [pc, #536]	; (801eeb0 <tcp_input+0x4b0>)
 801ec96:	681b      	ldr	r3, [r3, #0]
 801ec98:	881b      	ldrh	r3, [r3, #0]
 801ec9a:	b29b      	uxth	r3, r3
 801ec9c:	429a      	cmp	r2, r3
 801ec9e:	d138      	bne.n	801ed12 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 801eca0:	69fb      	ldr	r3, [r7, #28]
 801eca2:	8ada      	ldrh	r2, [r3, #22]
 801eca4:	4b82      	ldr	r3, [pc, #520]	; (801eeb0 <tcp_input+0x4b0>)
 801eca6:	681b      	ldr	r3, [r3, #0]
 801eca8:	885b      	ldrh	r3, [r3, #2]
 801ecaa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801ecac:	429a      	cmp	r2, r3
 801ecae:	d130      	bne.n	801ed12 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ecb0:	69fb      	ldr	r3, [r7, #28]
 801ecb2:	685a      	ldr	r2, [r3, #4]
 801ecb4:	4b7f      	ldr	r3, [pc, #508]	; (801eeb4 <tcp_input+0x4b4>)
 801ecb6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801ecb8:	429a      	cmp	r2, r3
 801ecba:	d12a      	bne.n	801ed12 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ecbc:	69fb      	ldr	r3, [r7, #28]
 801ecbe:	681a      	ldr	r2, [r3, #0]
 801ecc0:	4b7c      	ldr	r3, [pc, #496]	; (801eeb4 <tcp_input+0x4b4>)
 801ecc2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ecc4:	429a      	cmp	r2, r3
 801ecc6:	d124      	bne.n	801ed12 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801ecc8:	69fb      	ldr	r3, [r7, #28]
 801ecca:	68da      	ldr	r2, [r3, #12]
 801eccc:	69fb      	ldr	r3, [r7, #28]
 801ecce:	429a      	cmp	r2, r3
 801ecd0:	d105      	bne.n	801ecde <tcp_input+0x2de>
 801ecd2:	4b72      	ldr	r3, [pc, #456]	; (801ee9c <tcp_input+0x49c>)
 801ecd4:	22ec      	movs	r2, #236	; 0xec
 801ecd6:	4978      	ldr	r1, [pc, #480]	; (801eeb8 <tcp_input+0x4b8>)
 801ecd8:	4872      	ldr	r0, [pc, #456]	; (801eea4 <tcp_input+0x4a4>)
 801ecda:	f006 ff21 	bl	8025b20 <iprintf>
      if (prev != NULL) {
 801ecde:	69bb      	ldr	r3, [r7, #24]
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d00a      	beq.n	801ecfa <tcp_input+0x2fa>
        prev->next = pcb->next;
 801ece4:	69fb      	ldr	r3, [r7, #28]
 801ece6:	68da      	ldr	r2, [r3, #12]
 801ece8:	69bb      	ldr	r3, [r7, #24]
 801ecea:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801ecec:	4b73      	ldr	r3, [pc, #460]	; (801eebc <tcp_input+0x4bc>)
 801ecee:	681a      	ldr	r2, [r3, #0]
 801ecf0:	69fb      	ldr	r3, [r7, #28]
 801ecf2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801ecf4:	4a71      	ldr	r2, [pc, #452]	; (801eebc <tcp_input+0x4bc>)
 801ecf6:	69fb      	ldr	r3, [r7, #28]
 801ecf8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801ecfa:	69fb      	ldr	r3, [r7, #28]
 801ecfc:	68da      	ldr	r2, [r3, #12]
 801ecfe:	69fb      	ldr	r3, [r7, #28]
 801ed00:	429a      	cmp	r2, r3
 801ed02:	d10f      	bne.n	801ed24 <tcp_input+0x324>
 801ed04:	4b65      	ldr	r3, [pc, #404]	; (801ee9c <tcp_input+0x49c>)
 801ed06:	22f4      	movs	r2, #244	; 0xf4
 801ed08:	496d      	ldr	r1, [pc, #436]	; (801eec0 <tcp_input+0x4c0>)
 801ed0a:	4866      	ldr	r0, [pc, #408]	; (801eea4 <tcp_input+0x4a4>)
 801ed0c:	f006 ff08 	bl	8025b20 <iprintf>
      break;
 801ed10:	e008      	b.n	801ed24 <tcp_input+0x324>
    }
    prev = pcb;
 801ed12:	69fb      	ldr	r3, [r7, #28]
 801ed14:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed16:	69fb      	ldr	r3, [r7, #28]
 801ed18:	68db      	ldr	r3, [r3, #12]
 801ed1a:	61fb      	str	r3, [r7, #28]
 801ed1c:	69fb      	ldr	r3, [r7, #28]
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d198      	bne.n	801ec54 <tcp_input+0x254>
 801ed22:	e000      	b.n	801ed26 <tcp_input+0x326>
      break;
 801ed24:	bf00      	nop
  }

  if (pcb == NULL) {
 801ed26:	69fb      	ldr	r3, [r7, #28]
 801ed28:	2b00      	cmp	r3, #0
 801ed2a:	d173      	bne.n	801ee14 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed2c:	4b65      	ldr	r3, [pc, #404]	; (801eec4 <tcp_input+0x4c4>)
 801ed2e:	681b      	ldr	r3, [r3, #0]
 801ed30:	61fb      	str	r3, [r7, #28]
 801ed32:	e02f      	b.n	801ed94 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ed34:	69fb      	ldr	r3, [r7, #28]
 801ed36:	7d1b      	ldrb	r3, [r3, #20]
 801ed38:	2b0a      	cmp	r3, #10
 801ed3a:	d005      	beq.n	801ed48 <tcp_input+0x348>
 801ed3c:	4b57      	ldr	r3, [pc, #348]	; (801ee9c <tcp_input+0x49c>)
 801ed3e:	22fe      	movs	r2, #254	; 0xfe
 801ed40:	4961      	ldr	r1, [pc, #388]	; (801eec8 <tcp_input+0x4c8>)
 801ed42:	4858      	ldr	r0, [pc, #352]	; (801eea4 <tcp_input+0x4a4>)
 801ed44:	f006 feec 	bl	8025b20 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 801ed48:	69fb      	ldr	r3, [r7, #28]
 801ed4a:	8b1a      	ldrh	r2, [r3, #24]
 801ed4c:	4b58      	ldr	r3, [pc, #352]	; (801eeb0 <tcp_input+0x4b0>)
 801ed4e:	681b      	ldr	r3, [r3, #0]
 801ed50:	881b      	ldrh	r3, [r3, #0]
 801ed52:	b29b      	uxth	r3, r3
 801ed54:	429a      	cmp	r2, r3
 801ed56:	d11a      	bne.n	801ed8e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 801ed58:	69fb      	ldr	r3, [r7, #28]
 801ed5a:	8ada      	ldrh	r2, [r3, #22]
 801ed5c:	4b54      	ldr	r3, [pc, #336]	; (801eeb0 <tcp_input+0x4b0>)
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	885b      	ldrh	r3, [r3, #2]
 801ed62:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801ed64:	429a      	cmp	r2, r3
 801ed66:	d112      	bne.n	801ed8e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ed68:	69fb      	ldr	r3, [r7, #28]
 801ed6a:	685a      	ldr	r2, [r3, #4]
 801ed6c:	4b51      	ldr	r3, [pc, #324]	; (801eeb4 <tcp_input+0x4b4>)
 801ed6e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801ed70:	429a      	cmp	r2, r3
 801ed72:	d10c      	bne.n	801ed8e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ed74:	69fb      	ldr	r3, [r7, #28]
 801ed76:	681a      	ldr	r2, [r3, #0]
 801ed78:	4b4e      	ldr	r3, [pc, #312]	; (801eeb4 <tcp_input+0x4b4>)
 801ed7a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ed7c:	429a      	cmp	r2, r3
 801ed7e:	d106      	bne.n	801ed8e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 801ed80:	69f8      	ldr	r0, [r7, #28]
 801ed82:	f000 fb11 	bl	801f3a8 <tcp_timewait_input>
        pbuf_free(p);
 801ed86:	6878      	ldr	r0, [r7, #4]
 801ed88:	f7fd ff6e 	bl	801cc68 <pbuf_free>
        return;
 801ed8c:	e1d6      	b.n	801f13c <tcp_input+0x73c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed8e:	69fb      	ldr	r3, [r7, #28]
 801ed90:	68db      	ldr	r3, [r3, #12]
 801ed92:	61fb      	str	r3, [r7, #28]
 801ed94:	69fb      	ldr	r3, [r7, #28]
 801ed96:	2b00      	cmp	r3, #0
 801ed98:	d1cc      	bne.n	801ed34 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801ed9a:	2300      	movs	r3, #0
 801ed9c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ed9e:	4b4b      	ldr	r3, [pc, #300]	; (801eecc <tcp_input+0x4cc>)
 801eda0:	681b      	ldr	r3, [r3, #0]
 801eda2:	617b      	str	r3, [r7, #20]
 801eda4:	e019      	b.n	801edda <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 801eda6:	697b      	ldr	r3, [r7, #20]
 801eda8:	8ada      	ldrh	r2, [r3, #22]
 801edaa:	4b41      	ldr	r3, [pc, #260]	; (801eeb0 <tcp_input+0x4b0>)
 801edac:	681b      	ldr	r3, [r3, #0]
 801edae:	885b      	ldrh	r3, [r3, #2]
 801edb0:	b29b      	uxth	r3, r3
 801edb2:	429a      	cmp	r2, r3
 801edb4:	d10c      	bne.n	801edd0 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801edb6:	697b      	ldr	r3, [r7, #20]
 801edb8:	681a      	ldr	r2, [r3, #0]
 801edba:	4b3e      	ldr	r3, [pc, #248]	; (801eeb4 <tcp_input+0x4b4>)
 801edbc:	695b      	ldr	r3, [r3, #20]
 801edbe:	429a      	cmp	r2, r3
 801edc0:	d00f      	beq.n	801ede2 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801edc2:	697b      	ldr	r3, [r7, #20]
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	d00d      	beq.n	801ede4 <tcp_input+0x3e4>
 801edc8:	697b      	ldr	r3, [r7, #20]
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	2b00      	cmp	r3, #0
 801edce:	d009      	beq.n	801ede4 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801edd0:	697b      	ldr	r3, [r7, #20]
 801edd2:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801edd4:	697b      	ldr	r3, [r7, #20]
 801edd6:	68db      	ldr	r3, [r3, #12]
 801edd8:	617b      	str	r3, [r7, #20]
 801edda:	697b      	ldr	r3, [r7, #20]
 801eddc:	2b00      	cmp	r3, #0
 801edde:	d1e2      	bne.n	801eda6 <tcp_input+0x3a6>
 801ede0:	e000      	b.n	801ede4 <tcp_input+0x3e4>
            break;
 801ede2:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801ede4:	697b      	ldr	r3, [r7, #20]
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	d014      	beq.n	801ee14 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801edea:	69bb      	ldr	r3, [r7, #24]
 801edec:	2b00      	cmp	r3, #0
 801edee:	d00a      	beq.n	801ee06 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801edf0:	697b      	ldr	r3, [r7, #20]
 801edf2:	68da      	ldr	r2, [r3, #12]
 801edf4:	69bb      	ldr	r3, [r7, #24]
 801edf6:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801edf8:	4b34      	ldr	r3, [pc, #208]	; (801eecc <tcp_input+0x4cc>)
 801edfa:	681a      	ldr	r2, [r3, #0]
 801edfc:	697b      	ldr	r3, [r7, #20]
 801edfe:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801ee00:	4a32      	ldr	r2, [pc, #200]	; (801eecc <tcp_input+0x4cc>)
 801ee02:	697b      	ldr	r3, [r7, #20]
 801ee04:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 801ee06:	6978      	ldr	r0, [r7, #20]
 801ee08:	f000 f9ec 	bl	801f1e4 <tcp_listen_input>
      pbuf_free(p);
 801ee0c:	6878      	ldr	r0, [r7, #4]
 801ee0e:	f7fd ff2b 	bl	801cc68 <pbuf_free>
      return;
 801ee12:	e193      	b.n	801f13c <tcp_input+0x73c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 801ee14:	69fb      	ldr	r3, [r7, #28]
 801ee16:	2b00      	cmp	r3, #0
 801ee18:	f000 8162 	beq.w	801f0e0 <tcp_input+0x6e0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801ee1c:	4b2c      	ldr	r3, [pc, #176]	; (801eed0 <tcp_input+0x4d0>)
 801ee1e:	2200      	movs	r2, #0
 801ee20:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801ee22:	687b      	ldr	r3, [r7, #4]
 801ee24:	891a      	ldrh	r2, [r3, #8]
 801ee26:	4b2a      	ldr	r3, [pc, #168]	; (801eed0 <tcp_input+0x4d0>)
 801ee28:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801ee2a:	4a29      	ldr	r2, [pc, #164]	; (801eed0 <tcp_input+0x4d0>)
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801ee30:	4b1f      	ldr	r3, [pc, #124]	; (801eeb0 <tcp_input+0x4b0>)
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	4a26      	ldr	r2, [pc, #152]	; (801eed0 <tcp_input+0x4d0>)
 801ee36:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801ee38:	4b26      	ldr	r3, [pc, #152]	; (801eed4 <tcp_input+0x4d4>)
 801ee3a:	2200      	movs	r2, #0
 801ee3c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801ee3e:	4b26      	ldr	r3, [pc, #152]	; (801eed8 <tcp_input+0x4d8>)
 801ee40:	2200      	movs	r2, #0
 801ee42:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801ee44:	4b25      	ldr	r3, [pc, #148]	; (801eedc <tcp_input+0x4dc>)
 801ee46:	2200      	movs	r2, #0
 801ee48:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801ee4a:	4b25      	ldr	r3, [pc, #148]	; (801eee0 <tcp_input+0x4e0>)
 801ee4c:	781b      	ldrb	r3, [r3, #0]
 801ee4e:	f003 0308 	and.w	r3, r3, #8
 801ee52:	2b00      	cmp	r3, #0
 801ee54:	d006      	beq.n	801ee64 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 801ee56:	687b      	ldr	r3, [r7, #4]
 801ee58:	7b5b      	ldrb	r3, [r3, #13]
 801ee5a:	f043 0301 	orr.w	r3, r3, #1
 801ee5e:	b2da      	uxtb	r2, r3
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801ee64:	69fb      	ldr	r3, [r7, #28]
 801ee66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	d03d      	beq.n	801eee8 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ee6c:	69f8      	ldr	r0, [r7, #28]
 801ee6e:	f7ff f999 	bl	801e1a4 <tcp_process_refused_data>
 801ee72:	4603      	mov	r3, r0
 801ee74:	f113 0f0d 	cmn.w	r3, #13
 801ee78:	d007      	beq.n	801ee8a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ee7a:	69fb      	ldr	r3, [r7, #28]
 801ee7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d032      	beq.n	801eee8 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ee82:	4b18      	ldr	r3, [pc, #96]	; (801eee4 <tcp_input+0x4e4>)
 801ee84:	881b      	ldrh	r3, [r3, #0]
 801ee86:	2b00      	cmp	r3, #0
 801ee88:	d02e      	beq.n	801eee8 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801ee8a:	69fb      	ldr	r3, [r7, #28]
 801ee8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	f040 8108 	bne.w	801f0a4 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801ee94:	69f8      	ldr	r0, [r7, #28]
 801ee96:	f002 fe3f 	bl	8021b18 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801ee9a:	e103      	b.n	801f0a4 <tcp_input+0x6a4>
 801ee9c:	0802842c 	.word	0x0802842c
 801eea0:	080284c4 	.word	0x080284c4
 801eea4:	08028470 	.word	0x08028470
 801eea8:	080284ec 	.word	0x080284ec
 801eeac:	08028518 	.word	0x08028518
 801eeb0:	20004104 	.word	0x20004104
 801eeb4:	20004608 	.word	0x20004608
 801eeb8:	08028540 	.word	0x08028540
 801eebc:	20008c30 	.word	0x20008c30
 801eec0:	0802856c 	.word	0x0802856c
 801eec4:	20008c40 	.word	0x20008c40
 801eec8:	08028598 	.word	0x08028598
 801eecc:	20008c38 	.word	0x20008c38
 801eed0:	200040f4 	.word	0x200040f4
 801eed4:	20004124 	.word	0x20004124
 801eed8:	20004121 	.word	0x20004121
 801eedc:	2000411c 	.word	0x2000411c
 801eee0:	20004120 	.word	0x20004120
 801eee4:	2000411e 	.word	0x2000411e
      }
    }
    tcp_input_pcb = pcb;
 801eee8:	4a96      	ldr	r2, [pc, #600]	; (801f144 <tcp_input+0x744>)
 801eeea:	69fb      	ldr	r3, [r7, #28]
 801eeec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801eeee:	69f8      	ldr	r0, [r7, #28]
 801eef0:	f000 fac2 	bl	801f478 <tcp_process>
 801eef4:	4603      	mov	r3, r0
 801eef6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801eef8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801eefc:	f113 0f0d 	cmn.w	r3, #13
 801ef00:	f000 80db 	beq.w	801f0ba <tcp_input+0x6ba>
      if (recv_flags & TF_RESET) {
 801ef04:	4b90      	ldr	r3, [pc, #576]	; (801f148 <tcp_input+0x748>)
 801ef06:	781b      	ldrb	r3, [r3, #0]
 801ef08:	f003 0308 	and.w	r3, r3, #8
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d016      	beq.n	801ef3e <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801ef10:	69fb      	ldr	r3, [r7, #28]
 801ef12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	d008      	beq.n	801ef2c <tcp_input+0x52c>
 801ef1a:	69fb      	ldr	r3, [r7, #28]
 801ef1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ef20:	69fa      	ldr	r2, [r7, #28]
 801ef22:	6912      	ldr	r2, [r2, #16]
 801ef24:	f06f 010d 	mvn.w	r1, #13
 801ef28:	4610      	mov	r0, r2
 801ef2a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ef2c:	69f9      	ldr	r1, [r7, #28]
 801ef2e:	4887      	ldr	r0, [pc, #540]	; (801f14c <tcp_input+0x74c>)
 801ef30:	f7ff fc4c 	bl	801e7cc <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 801ef34:	69f9      	ldr	r1, [r7, #28]
 801ef36:	2001      	movs	r0, #1
 801ef38:	f7fd f93c 	bl	801c1b4 <memp_free>
 801ef3c:	e0bd      	b.n	801f0ba <tcp_input+0x6ba>
      } else {
        err = ERR_OK;
 801ef3e:	2300      	movs	r3, #0
 801ef40:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801ef42:	4b83      	ldr	r3, [pc, #524]	; (801f150 <tcp_input+0x750>)
 801ef44:	881b      	ldrh	r3, [r3, #0]
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	d01b      	beq.n	801ef82 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801ef4a:	4b81      	ldr	r3, [pc, #516]	; (801f150 <tcp_input+0x750>)
 801ef4c:	881b      	ldrh	r3, [r3, #0]
 801ef4e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801ef50:	69fb      	ldr	r3, [r7, #28]
 801ef52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	d009      	beq.n	801ef6c <tcp_input+0x56c>
 801ef58:	69fb      	ldr	r3, [r7, #28]
 801ef5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ef5c:	69fa      	ldr	r2, [r7, #28]
 801ef5e:	6910      	ldr	r0, [r2, #16]
 801ef60:	89fa      	ldrh	r2, [r7, #14]
 801ef62:	69f9      	ldr	r1, [r7, #28]
 801ef64:	4798      	blx	r3
 801ef66:	4603      	mov	r3, r0
 801ef68:	74fb      	strb	r3, [r7, #19]
 801ef6a:	e001      	b.n	801ef70 <tcp_input+0x570>
 801ef6c:	2300      	movs	r3, #0
 801ef6e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ef70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ef74:	f113 0f0d 	cmn.w	r3, #13
 801ef78:	f000 8096 	beq.w	801f0a8 <tcp_input+0x6a8>
              goto aborted;
            }
          }
          recv_acked = 0;
 801ef7c:	4b74      	ldr	r3, [pc, #464]	; (801f150 <tcp_input+0x750>)
 801ef7e:	2200      	movs	r2, #0
 801ef80:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801ef82:	69f8      	ldr	r0, [r7, #28]
 801ef84:	f000 f8fc 	bl	801f180 <tcp_input_delayed_close>
 801ef88:	4603      	mov	r3, r0
 801ef8a:	2b00      	cmp	r3, #0
 801ef8c:	f040 808e 	bne.w	801f0ac <tcp_input+0x6ac>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801ef90:	4b70      	ldr	r3, [pc, #448]	; (801f154 <tcp_input+0x754>)
 801ef92:	681b      	ldr	r3, [r3, #0]
 801ef94:	2b00      	cmp	r3, #0
 801ef96:	d041      	beq.n	801f01c <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801ef98:	69fb      	ldr	r3, [r7, #28]
 801ef9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ef9c:	2b00      	cmp	r3, #0
 801ef9e:	d006      	beq.n	801efae <tcp_input+0x5ae>
 801efa0:	4b6d      	ldr	r3, [pc, #436]	; (801f158 <tcp_input+0x758>)
 801efa2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 801efa6:	496d      	ldr	r1, [pc, #436]	; (801f15c <tcp_input+0x75c>)
 801efa8:	486d      	ldr	r0, [pc, #436]	; (801f160 <tcp_input+0x760>)
 801efaa:	f006 fdb9 	bl	8025b20 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801efae:	69fb      	ldr	r3, [r7, #28]
 801efb0:	7e9b      	ldrb	r3, [r3, #26]
 801efb2:	f003 0310 	and.w	r3, r3, #16
 801efb6:	2b00      	cmp	r3, #0
 801efb8:	d008      	beq.n	801efcc <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801efba:	4b66      	ldr	r3, [pc, #408]	; (801f154 <tcp_input+0x754>)
 801efbc:	681b      	ldr	r3, [r3, #0]
 801efbe:	4618      	mov	r0, r3
 801efc0:	f7fd fe52 	bl	801cc68 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801efc4:	69f8      	ldr	r0, [r7, #28]
 801efc6:	f7fe fb95 	bl	801d6f4 <tcp_abort>
            goto aborted;
 801efca:	e076      	b.n	801f0ba <tcp_input+0x6ba>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801efcc:	69fb      	ldr	r3, [r7, #28]
 801efce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	d00c      	beq.n	801eff0 <tcp_input+0x5f0>
 801efd6:	69fb      	ldr	r3, [r7, #28]
 801efd8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801efdc:	69fb      	ldr	r3, [r7, #28]
 801efde:	6918      	ldr	r0, [r3, #16]
 801efe0:	4b5c      	ldr	r3, [pc, #368]	; (801f154 <tcp_input+0x754>)
 801efe2:	681a      	ldr	r2, [r3, #0]
 801efe4:	2300      	movs	r3, #0
 801efe6:	69f9      	ldr	r1, [r7, #28]
 801efe8:	47a0      	blx	r4
 801efea:	4603      	mov	r3, r0
 801efec:	74fb      	strb	r3, [r7, #19]
 801efee:	e008      	b.n	801f002 <tcp_input+0x602>
 801eff0:	4b58      	ldr	r3, [pc, #352]	; (801f154 <tcp_input+0x754>)
 801eff2:	681a      	ldr	r2, [r3, #0]
 801eff4:	2300      	movs	r3, #0
 801eff6:	69f9      	ldr	r1, [r7, #28]
 801eff8:	2000      	movs	r0, #0
 801effa:	f7ff f984 	bl	801e306 <tcp_recv_null>
 801effe:	4603      	mov	r3, r0
 801f000:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801f002:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f006:	f113 0f0d 	cmn.w	r3, #13
 801f00a:	d051      	beq.n	801f0b0 <tcp_input+0x6b0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801f00c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f010:	2b00      	cmp	r3, #0
 801f012:	d003      	beq.n	801f01c <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801f014:	4b4f      	ldr	r3, [pc, #316]	; (801f154 <tcp_input+0x754>)
 801f016:	681a      	ldr	r2, [r3, #0]
 801f018:	69fb      	ldr	r3, [r7, #28]
 801f01a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801f01c:	4b4a      	ldr	r3, [pc, #296]	; (801f148 <tcp_input+0x748>)
 801f01e:	781b      	ldrb	r3, [r3, #0]
 801f020:	f003 0320 	and.w	r3, r3, #32
 801f024:	2b00      	cmp	r3, #0
 801f026:	d030      	beq.n	801f08a <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 801f028:	69fb      	ldr	r3, [r7, #28]
 801f02a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	d009      	beq.n	801f044 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801f030:	69fb      	ldr	r3, [r7, #28]
 801f032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f034:	69fa      	ldr	r2, [r7, #28]
 801f036:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801f038:	7b52      	ldrb	r2, [r2, #13]
 801f03a:	f042 0220 	orr.w	r2, r2, #32
 801f03e:	b2d2      	uxtb	r2, r2
 801f040:	735a      	strb	r2, [r3, #13]
 801f042:	e022      	b.n	801f08a <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801f044:	69fb      	ldr	r3, [r7, #28]
 801f046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f04c:	d005      	beq.n	801f05a <tcp_input+0x65a>
              pcb->rcv_wnd++;
 801f04e:	69fb      	ldr	r3, [r7, #28]
 801f050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f052:	3301      	adds	r3, #1
 801f054:	b29a      	uxth	r2, r3
 801f056:	69fb      	ldr	r3, [r7, #28]
 801f058:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801f05a:	69fb      	ldr	r3, [r7, #28]
 801f05c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801f060:	2b00      	cmp	r3, #0
 801f062:	d00b      	beq.n	801f07c <tcp_input+0x67c>
 801f064:	69fb      	ldr	r3, [r7, #28]
 801f066:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801f06a:	69fb      	ldr	r3, [r7, #28]
 801f06c:	6918      	ldr	r0, [r3, #16]
 801f06e:	2300      	movs	r3, #0
 801f070:	2200      	movs	r2, #0
 801f072:	69f9      	ldr	r1, [r7, #28]
 801f074:	47a0      	blx	r4
 801f076:	4603      	mov	r3, r0
 801f078:	74fb      	strb	r3, [r7, #19]
 801f07a:	e001      	b.n	801f080 <tcp_input+0x680>
 801f07c:	2300      	movs	r3, #0
 801f07e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801f080:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f084:	f113 0f0d 	cmn.w	r3, #13
 801f088:	d014      	beq.n	801f0b4 <tcp_input+0x6b4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801f08a:	4b2e      	ldr	r3, [pc, #184]	; (801f144 <tcp_input+0x744>)
 801f08c:	2200      	movs	r2, #0
 801f08e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801f090:	69f8      	ldr	r0, [r7, #28]
 801f092:	f000 f875 	bl	801f180 <tcp_input_delayed_close>
 801f096:	4603      	mov	r3, r0
 801f098:	2b00      	cmp	r3, #0
 801f09a:	d10d      	bne.n	801f0b8 <tcp_input+0x6b8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801f09c:	69f8      	ldr	r0, [r7, #28]
 801f09e:	f002 fd97 	bl	8021bd0 <tcp_output>
 801f0a2:	e00a      	b.n	801f0ba <tcp_input+0x6ba>
        goto aborted;
 801f0a4:	bf00      	nop
 801f0a6:	e008      	b.n	801f0ba <tcp_input+0x6ba>
              goto aborted;
 801f0a8:	bf00      	nop
 801f0aa:	e006      	b.n	801f0ba <tcp_input+0x6ba>
          goto aborted;
 801f0ac:	bf00      	nop
 801f0ae:	e004      	b.n	801f0ba <tcp_input+0x6ba>
            goto aborted;
 801f0b0:	bf00      	nop
 801f0b2:	e002      	b.n	801f0ba <tcp_input+0x6ba>
              goto aborted;
 801f0b4:	bf00      	nop
 801f0b6:	e000      	b.n	801f0ba <tcp_input+0x6ba>
          goto aborted;
 801f0b8:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 801f0ba:	4b22      	ldr	r3, [pc, #136]	; (801f144 <tcp_input+0x744>)
 801f0bc:	2200      	movs	r2, #0
 801f0be:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801f0c0:	4b24      	ldr	r3, [pc, #144]	; (801f154 <tcp_input+0x754>)
 801f0c2:	2200      	movs	r2, #0
 801f0c4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 801f0c6:	4b27      	ldr	r3, [pc, #156]	; (801f164 <tcp_input+0x764>)
 801f0c8:	685b      	ldr	r3, [r3, #4]
 801f0ca:	2b00      	cmp	r3, #0
 801f0cc:	d035      	beq.n	801f13a <tcp_input+0x73a>
    {
      pbuf_free(inseg.p);
 801f0ce:	4b25      	ldr	r3, [pc, #148]	; (801f164 <tcp_input+0x764>)
 801f0d0:	685b      	ldr	r3, [r3, #4]
 801f0d2:	4618      	mov	r0, r3
 801f0d4:	f7fd fdc8 	bl	801cc68 <pbuf_free>
      inseg.p = NULL;
 801f0d8:	4b22      	ldr	r3, [pc, #136]	; (801f164 <tcp_input+0x764>)
 801f0da:	2200      	movs	r2, #0
 801f0dc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801f0de:	e02c      	b.n	801f13a <tcp_input+0x73a>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801f0e0:	4b21      	ldr	r3, [pc, #132]	; (801f168 <tcp_input+0x768>)
 801f0e2:	681b      	ldr	r3, [r3, #0]
 801f0e4:	899b      	ldrh	r3, [r3, #12]
 801f0e6:	b29b      	uxth	r3, r3
 801f0e8:	4618      	mov	r0, r3
 801f0ea:	f7fa f92d 	bl	8019348 <lwip_htons>
 801f0ee:	4603      	mov	r3, r0
 801f0f0:	f003 0304 	and.w	r3, r3, #4
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	d115      	bne.n	801f124 <tcp_input+0x724>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f0f8:	4b1c      	ldr	r3, [pc, #112]	; (801f16c <tcp_input+0x76c>)
 801f0fa:	6818      	ldr	r0, [r3, #0]
 801f0fc:	4b1c      	ldr	r3, [pc, #112]	; (801f170 <tcp_input+0x770>)
 801f0fe:	881b      	ldrh	r3, [r3, #0]
 801f100:	461a      	mov	r2, r3
 801f102:	4b1c      	ldr	r3, [pc, #112]	; (801f174 <tcp_input+0x774>)
 801f104:	681b      	ldr	r3, [r3, #0]
 801f106:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f108:	4b17      	ldr	r3, [pc, #92]	; (801f168 <tcp_input+0x768>)
 801f10a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f10c:	885b      	ldrh	r3, [r3, #2]
 801f10e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f110:	4a15      	ldr	r2, [pc, #84]	; (801f168 <tcp_input+0x768>)
 801f112:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f114:	8812      	ldrh	r2, [r2, #0]
 801f116:	b292      	uxth	r2, r2
 801f118:	9201      	str	r2, [sp, #4]
 801f11a:	9300      	str	r3, [sp, #0]
 801f11c:	4b16      	ldr	r3, [pc, #88]	; (801f178 <tcp_input+0x778>)
 801f11e:	4a17      	ldr	r2, [pc, #92]	; (801f17c <tcp_input+0x77c>)
 801f120:	f002 ffde 	bl	80220e0 <tcp_rst>
    pbuf_free(p);
 801f124:	6878      	ldr	r0, [r7, #4]
 801f126:	f7fd fd9f 	bl	801cc68 <pbuf_free>
  return;
 801f12a:	e006      	b.n	801f13a <tcp_input+0x73a>
    goto dropped;
 801f12c:	bf00      	nop
 801f12e:	e000      	b.n	801f132 <tcp_input+0x732>
      goto dropped;
 801f130:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801f132:	6878      	ldr	r0, [r7, #4]
 801f134:	f7fd fd98 	bl	801cc68 <pbuf_free>
 801f138:	e000      	b.n	801f13c <tcp_input+0x73c>
  return;
 801f13a:	bf00      	nop
}
 801f13c:	3724      	adds	r7, #36	; 0x24
 801f13e:	46bd      	mov	sp, r7
 801f140:	bd90      	pop	{r4, r7, pc}
 801f142:	bf00      	nop
 801f144:	20008c44 	.word	0x20008c44
 801f148:	20004121 	.word	0x20004121
 801f14c:	20008c30 	.word	0x20008c30
 801f150:	2000411c 	.word	0x2000411c
 801f154:	20004124 	.word	0x20004124
 801f158:	0802842c 	.word	0x0802842c
 801f15c:	080285c8 	.word	0x080285c8
 801f160:	08028470 	.word	0x08028470
 801f164:	200040f4 	.word	0x200040f4
 801f168:	20004104 	.word	0x20004104
 801f16c:	20004118 	.word	0x20004118
 801f170:	2000411e 	.word	0x2000411e
 801f174:	20004114 	.word	0x20004114
 801f178:	20004618 	.word	0x20004618
 801f17c:	2000461c 	.word	0x2000461c

0801f180 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801f180:	b580      	push	{r7, lr}
 801f182:	b082      	sub	sp, #8
 801f184:	af00      	add	r7, sp, #0
 801f186:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 801f188:	4b14      	ldr	r3, [pc, #80]	; (801f1dc <tcp_input_delayed_close+0x5c>)
 801f18a:	781b      	ldrb	r3, [r3, #0]
 801f18c:	f003 0310 	and.w	r3, r3, #16
 801f190:	2b00      	cmp	r3, #0
 801f192:	d01d      	beq.n	801f1d0 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	7e9b      	ldrb	r3, [r3, #26]
 801f198:	f003 0310 	and.w	r3, r3, #16
 801f19c:	2b00      	cmp	r3, #0
 801f19e:	d10d      	bne.n	801f1bc <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	d008      	beq.n	801f1bc <tcp_input_delayed_close+0x3c>
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f1b0:	687a      	ldr	r2, [r7, #4]
 801f1b2:	6912      	ldr	r2, [r2, #16]
 801f1b4:	f06f 010e 	mvn.w	r1, #14
 801f1b8:	4610      	mov	r0, r2
 801f1ba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801f1bc:	6879      	ldr	r1, [r7, #4]
 801f1be:	4808      	ldr	r0, [pc, #32]	; (801f1e0 <tcp_input_delayed_close+0x60>)
 801f1c0:	f7ff fb04 	bl	801e7cc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 801f1c4:	6879      	ldr	r1, [r7, #4]
 801f1c6:	2001      	movs	r0, #1
 801f1c8:	f7fc fff4 	bl	801c1b4 <memp_free>
    return 1;
 801f1cc:	2301      	movs	r3, #1
 801f1ce:	e000      	b.n	801f1d2 <tcp_input_delayed_close+0x52>
  }
  return 0;
 801f1d0:	2300      	movs	r3, #0
}
 801f1d2:	4618      	mov	r0, r3
 801f1d4:	3708      	adds	r7, #8
 801f1d6:	46bd      	mov	sp, r7
 801f1d8:	bd80      	pop	{r7, pc}
 801f1da:	bf00      	nop
 801f1dc:	20004121 	.word	0x20004121
 801f1e0:	20008c30 	.word	0x20008c30

0801f1e4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801f1e4:	b580      	push	{r7, lr}
 801f1e6:	b088      	sub	sp, #32
 801f1e8:	af02      	add	r7, sp, #8
 801f1ea:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801f1ec:	4b64      	ldr	r3, [pc, #400]	; (801f380 <tcp_listen_input+0x19c>)
 801f1ee:	781b      	ldrb	r3, [r3, #0]
 801f1f0:	f003 0304 	and.w	r3, r3, #4
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	f040 80bc 	bne.w	801f372 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801f1fa:	4b61      	ldr	r3, [pc, #388]	; (801f380 <tcp_listen_input+0x19c>)
 801f1fc:	781b      	ldrb	r3, [r3, #0]
 801f1fe:	f003 0310 	and.w	r3, r3, #16
 801f202:	2b00      	cmp	r3, #0
 801f204:	d016      	beq.n	801f234 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f206:	4b5f      	ldr	r3, [pc, #380]	; (801f384 <tcp_listen_input+0x1a0>)
 801f208:	6818      	ldr	r0, [r3, #0]
 801f20a:	4b5f      	ldr	r3, [pc, #380]	; (801f388 <tcp_listen_input+0x1a4>)
 801f20c:	881b      	ldrh	r3, [r3, #0]
 801f20e:	461a      	mov	r2, r3
 801f210:	4b5e      	ldr	r3, [pc, #376]	; (801f38c <tcp_listen_input+0x1a8>)
 801f212:	681b      	ldr	r3, [r3, #0]
 801f214:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f216:	4b5e      	ldr	r3, [pc, #376]	; (801f390 <tcp_listen_input+0x1ac>)
 801f218:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f21a:	885b      	ldrh	r3, [r3, #2]
 801f21c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f21e:	4a5c      	ldr	r2, [pc, #368]	; (801f390 <tcp_listen_input+0x1ac>)
 801f220:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f222:	8812      	ldrh	r2, [r2, #0]
 801f224:	b292      	uxth	r2, r2
 801f226:	9201      	str	r2, [sp, #4]
 801f228:	9300      	str	r3, [sp, #0]
 801f22a:	4b5a      	ldr	r3, [pc, #360]	; (801f394 <tcp_listen_input+0x1b0>)
 801f22c:	4a5a      	ldr	r2, [pc, #360]	; (801f398 <tcp_listen_input+0x1b4>)
 801f22e:	f002 ff57 	bl	80220e0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801f232:	e0a0      	b.n	801f376 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 801f234:	4b52      	ldr	r3, [pc, #328]	; (801f380 <tcp_listen_input+0x19c>)
 801f236:	781b      	ldrb	r3, [r3, #0]
 801f238:	f003 0302 	and.w	r3, r3, #2
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	f000 809a 	beq.w	801f376 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	7d5b      	ldrb	r3, [r3, #21]
 801f246:	4618      	mov	r0, r3
 801f248:	f7ff f93c 	bl	801e4c4 <tcp_alloc>
 801f24c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801f24e:	697b      	ldr	r3, [r7, #20]
 801f250:	2b00      	cmp	r3, #0
 801f252:	d111      	bne.n	801f278 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f254:	687b      	ldr	r3, [r7, #4]
 801f256:	699b      	ldr	r3, [r3, #24]
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d00a      	beq.n	801f272 <tcp_listen_input+0x8e>
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	699b      	ldr	r3, [r3, #24]
 801f260:	687a      	ldr	r2, [r7, #4]
 801f262:	6910      	ldr	r0, [r2, #16]
 801f264:	f04f 32ff 	mov.w	r2, #4294967295
 801f268:	2100      	movs	r1, #0
 801f26a:	4798      	blx	r3
 801f26c:	4603      	mov	r3, r0
 801f26e:	74fb      	strb	r3, [r7, #19]
      return;
 801f270:	e082      	b.n	801f378 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f272:	23f0      	movs	r3, #240	; 0xf0
 801f274:	74fb      	strb	r3, [r7, #19]
      return;
 801f276:	e07f      	b.n	801f378 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801f278:	4b48      	ldr	r3, [pc, #288]	; (801f39c <tcp_listen_input+0x1b8>)
 801f27a:	695a      	ldr	r2, [r3, #20]
 801f27c:	697b      	ldr	r3, [r7, #20]
 801f27e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801f280:	4b46      	ldr	r3, [pc, #280]	; (801f39c <tcp_listen_input+0x1b8>)
 801f282:	691a      	ldr	r2, [r3, #16]
 801f284:	697b      	ldr	r3, [r7, #20]
 801f286:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	8ada      	ldrh	r2, [r3, #22]
 801f28c:	697b      	ldr	r3, [r7, #20]
 801f28e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801f290:	4b3f      	ldr	r3, [pc, #252]	; (801f390 <tcp_listen_input+0x1ac>)
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	881b      	ldrh	r3, [r3, #0]
 801f296:	b29a      	uxth	r2, r3
 801f298:	697b      	ldr	r3, [r7, #20]
 801f29a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801f29c:	697b      	ldr	r3, [r7, #20]
 801f29e:	2203      	movs	r2, #3
 801f2a0:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801f2a2:	4b3a      	ldr	r3, [pc, #232]	; (801f38c <tcp_listen_input+0x1a8>)
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	1c5a      	adds	r2, r3, #1
 801f2a8:	697b      	ldr	r3, [r7, #20]
 801f2aa:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801f2ac:	697b      	ldr	r3, [r7, #20]
 801f2ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f2b0:	697b      	ldr	r3, [r7, #20]
 801f2b2:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801f2b4:	6978      	ldr	r0, [r7, #20]
 801f2b6:	f7ff fb05 	bl	801e8c4 <tcp_next_iss>
 801f2ba:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 801f2bc:	697b      	ldr	r3, [r7, #20]
 801f2be:	68fa      	ldr	r2, [r7, #12]
 801f2c0:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 801f2c2:	697b      	ldr	r3, [r7, #20]
 801f2c4:	68fa      	ldr	r2, [r7, #12]
 801f2c6:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 801f2c8:	697b      	ldr	r3, [r7, #20]
 801f2ca:	68fa      	ldr	r2, [r7, #12]
 801f2cc:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801f2ce:	697b      	ldr	r3, [r7, #20]
 801f2d0:	68fa      	ldr	r2, [r7, #12]
 801f2d2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f2d4:	4b2d      	ldr	r3, [pc, #180]	; (801f38c <tcp_listen_input+0x1a8>)
 801f2d6:	681b      	ldr	r3, [r3, #0]
 801f2d8:	1e5a      	subs	r2, r3, #1
 801f2da:	697b      	ldr	r3, [r7, #20]
 801f2dc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 801f2de:	687b      	ldr	r3, [r7, #4]
 801f2e0:	691a      	ldr	r2, [r3, #16]
 801f2e2:	697b      	ldr	r3, [r7, #20]
 801f2e4:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801f2e6:	697b      	ldr	r3, [r7, #20]
 801f2e8:	687a      	ldr	r2, [r7, #4]
 801f2ea:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	7a1b      	ldrb	r3, [r3, #8]
 801f2f0:	f003 030c 	and.w	r3, r3, #12
 801f2f4:	b2da      	uxtb	r2, r3
 801f2f6:	697b      	ldr	r3, [r7, #20]
 801f2f8:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801f2fa:	4b29      	ldr	r3, [pc, #164]	; (801f3a0 <tcp_listen_input+0x1bc>)
 801f2fc:	681a      	ldr	r2, [r3, #0]
 801f2fe:	697b      	ldr	r3, [r7, #20]
 801f300:	60da      	str	r2, [r3, #12]
 801f302:	4a27      	ldr	r2, [pc, #156]	; (801f3a0 <tcp_listen_input+0x1bc>)
 801f304:	697b      	ldr	r3, [r7, #20]
 801f306:	6013      	str	r3, [r2, #0]
 801f308:	f003 f938 	bl	802257c <tcp_timer_needed>
 801f30c:	4b25      	ldr	r3, [pc, #148]	; (801f3a4 <tcp_listen_input+0x1c0>)
 801f30e:	2201      	movs	r2, #1
 801f310:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801f312:	6978      	ldr	r0, [r7, #20]
 801f314:	f001 fd16 	bl	8020d44 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801f318:	4b1d      	ldr	r3, [pc, #116]	; (801f390 <tcp_listen_input+0x1ac>)
 801f31a:	681b      	ldr	r3, [r3, #0]
 801f31c:	89db      	ldrh	r3, [r3, #14]
 801f31e:	b29a      	uxth	r2, r3
 801f320:	697b      	ldr	r3, [r7, #20]
 801f322:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 801f326:	697b      	ldr	r3, [r7, #20]
 801f328:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801f32c:	697b      	ldr	r3, [r7, #20]
 801f32e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f332:	697b      	ldr	r3, [r7, #20]
 801f334:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801f336:	697b      	ldr	r3, [r7, #20]
 801f338:	3304      	adds	r3, #4
 801f33a:	4619      	mov	r1, r3
 801f33c:	4610      	mov	r0, r2
 801f33e:	f7ff fad9 	bl	801e8f4 <tcp_eff_send_mss_impl>
 801f342:	4603      	mov	r3, r0
 801f344:	461a      	mov	r2, r3
 801f346:	697b      	ldr	r3, [r7, #20]
 801f348:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801f34a:	2112      	movs	r1, #18
 801f34c:	6978      	ldr	r0, [r7, #20]
 801f34e:	f002 fae5 	bl	802191c <tcp_enqueue_flags>
 801f352:	4603      	mov	r3, r0
 801f354:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 801f356:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801f35a:	2b00      	cmp	r3, #0
 801f35c:	d004      	beq.n	801f368 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 801f35e:	2100      	movs	r1, #0
 801f360:	6978      	ldr	r0, [r7, #20]
 801f362:	f7fe f915 	bl	801d590 <tcp_abandon>
      return;
 801f366:	e007      	b.n	801f378 <tcp_listen_input+0x194>
    tcp_output(npcb);
 801f368:	6978      	ldr	r0, [r7, #20]
 801f36a:	f002 fc31 	bl	8021bd0 <tcp_output>
  return;
 801f36e:	bf00      	nop
 801f370:	e001      	b.n	801f376 <tcp_listen_input+0x192>
    return;
 801f372:	bf00      	nop
 801f374:	e000      	b.n	801f378 <tcp_listen_input+0x194>
  return;
 801f376:	bf00      	nop
}
 801f378:	3718      	adds	r7, #24
 801f37a:	46bd      	mov	sp, r7
 801f37c:	bd80      	pop	{r7, pc}
 801f37e:	bf00      	nop
 801f380:	20004120 	.word	0x20004120
 801f384:	20004118 	.word	0x20004118
 801f388:	2000411e 	.word	0x2000411e
 801f38c:	20004114 	.word	0x20004114
 801f390:	20004104 	.word	0x20004104
 801f394:	20004618 	.word	0x20004618
 801f398:	2000461c 	.word	0x2000461c
 801f39c:	20004608 	.word	0x20004608
 801f3a0:	20008c30 	.word	0x20008c30
 801f3a4:	20008c2c 	.word	0x20008c2c

0801f3a8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801f3a8:	b580      	push	{r7, lr}
 801f3aa:	b084      	sub	sp, #16
 801f3ac:	af02      	add	r7, sp, #8
 801f3ae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801f3b0:	4b29      	ldr	r3, [pc, #164]	; (801f458 <tcp_timewait_input+0xb0>)
 801f3b2:	781b      	ldrb	r3, [r3, #0]
 801f3b4:	f003 0304 	and.w	r3, r3, #4
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	d147      	bne.n	801f44c <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801f3bc:	4b26      	ldr	r3, [pc, #152]	; (801f458 <tcp_timewait_input+0xb0>)
 801f3be:	781b      	ldrb	r3, [r3, #0]
 801f3c0:	f003 0302 	and.w	r3, r3, #2
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	d027      	beq.n	801f418 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801f3c8:	4b24      	ldr	r3, [pc, #144]	; (801f45c <tcp_timewait_input+0xb4>)
 801f3ca:	681a      	ldr	r2, [r3, #0]
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3d0:	1ad3      	subs	r3, r2, r3
 801f3d2:	2b00      	cmp	r3, #0
 801f3d4:	db2a      	blt.n	801f42c <tcp_timewait_input+0x84>
 801f3d6:	4b21      	ldr	r3, [pc, #132]	; (801f45c <tcp_timewait_input+0xb4>)
 801f3d8:	681a      	ldr	r2, [r3, #0]
 801f3da:	687b      	ldr	r3, [r7, #4]
 801f3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3de:	6879      	ldr	r1, [r7, #4]
 801f3e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f3e2:	440b      	add	r3, r1
 801f3e4:	1ad3      	subs	r3, r2, r3
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	dc20      	bgt.n	801f42c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3ea:	4b1d      	ldr	r3, [pc, #116]	; (801f460 <tcp_timewait_input+0xb8>)
 801f3ec:	6818      	ldr	r0, [r3, #0]
 801f3ee:	4b1d      	ldr	r3, [pc, #116]	; (801f464 <tcp_timewait_input+0xbc>)
 801f3f0:	881b      	ldrh	r3, [r3, #0]
 801f3f2:	461a      	mov	r2, r3
 801f3f4:	4b19      	ldr	r3, [pc, #100]	; (801f45c <tcp_timewait_input+0xb4>)
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f3fa:	4b1b      	ldr	r3, [pc, #108]	; (801f468 <tcp_timewait_input+0xc0>)
 801f3fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3fe:	885b      	ldrh	r3, [r3, #2]
 801f400:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f402:	4a19      	ldr	r2, [pc, #100]	; (801f468 <tcp_timewait_input+0xc0>)
 801f404:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f406:	8812      	ldrh	r2, [r2, #0]
 801f408:	b292      	uxth	r2, r2
 801f40a:	9201      	str	r2, [sp, #4]
 801f40c:	9300      	str	r3, [sp, #0]
 801f40e:	4b17      	ldr	r3, [pc, #92]	; (801f46c <tcp_timewait_input+0xc4>)
 801f410:	4a17      	ldr	r2, [pc, #92]	; (801f470 <tcp_timewait_input+0xc8>)
 801f412:	f002 fe65 	bl	80220e0 <tcp_rst>
      return;
 801f416:	e01c      	b.n	801f452 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 801f418:	4b0f      	ldr	r3, [pc, #60]	; (801f458 <tcp_timewait_input+0xb0>)
 801f41a:	781b      	ldrb	r3, [r3, #0]
 801f41c:	f003 0301 	and.w	r3, r3, #1
 801f420:	2b00      	cmp	r3, #0
 801f422:	d003      	beq.n	801f42c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801f424:	4b13      	ldr	r3, [pc, #76]	; (801f474 <tcp_timewait_input+0xcc>)
 801f426:	681a      	ldr	r2, [r3, #0]
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801f42c:	4b0d      	ldr	r3, [pc, #52]	; (801f464 <tcp_timewait_input+0xbc>)
 801f42e:	881b      	ldrh	r3, [r3, #0]
 801f430:	2b00      	cmp	r3, #0
 801f432:	d00d      	beq.n	801f450 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 801f434:	687b      	ldr	r3, [r7, #4]
 801f436:	7e9b      	ldrb	r3, [r3, #26]
 801f438:	f043 0302 	orr.w	r3, r3, #2
 801f43c:	b2da      	uxtb	r2, r3
 801f43e:	687b      	ldr	r3, [r7, #4]
 801f440:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801f442:	6878      	ldr	r0, [r7, #4]
 801f444:	f002 fbc4 	bl	8021bd0 <tcp_output>
  }
  return;
 801f448:	bf00      	nop
 801f44a:	e001      	b.n	801f450 <tcp_timewait_input+0xa8>
    return;
 801f44c:	bf00      	nop
 801f44e:	e000      	b.n	801f452 <tcp_timewait_input+0xaa>
  return;
 801f450:	bf00      	nop
}
 801f452:	3708      	adds	r7, #8
 801f454:	46bd      	mov	sp, r7
 801f456:	bd80      	pop	{r7, pc}
 801f458:	20004120 	.word	0x20004120
 801f45c:	20004114 	.word	0x20004114
 801f460:	20004118 	.word	0x20004118
 801f464:	2000411e 	.word	0x2000411e
 801f468:	20004104 	.word	0x20004104
 801f46c:	20004618 	.word	0x20004618
 801f470:	2000461c 	.word	0x2000461c
 801f474:	20008c34 	.word	0x20008c34

0801f478 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801f478:	b580      	push	{r7, lr}
 801f47a:	b08a      	sub	sp, #40	; 0x28
 801f47c:	af02      	add	r7, sp, #8
 801f47e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801f480:	2300      	movs	r3, #0
 801f482:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801f484:	2300      	movs	r3, #0
 801f486:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801f488:	4ba4      	ldr	r3, [pc, #656]	; (801f71c <tcp_process+0x2a4>)
 801f48a:	781b      	ldrb	r3, [r3, #0]
 801f48c:	f003 0304 	and.w	r3, r3, #4
 801f490:	2b00      	cmp	r3, #0
 801f492:	d04e      	beq.n	801f532 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801f494:	687b      	ldr	r3, [r7, #4]
 801f496:	7d1b      	ldrb	r3, [r3, #20]
 801f498:	2b02      	cmp	r3, #2
 801f49a:	d108      	bne.n	801f4ae <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f4a0:	4b9f      	ldr	r3, [pc, #636]	; (801f720 <tcp_process+0x2a8>)
 801f4a2:	681b      	ldr	r3, [r3, #0]
 801f4a4:	429a      	cmp	r2, r3
 801f4a6:	d123      	bne.n	801f4f0 <tcp_process+0x78>
        acceptable = 1;
 801f4a8:	2301      	movs	r3, #1
 801f4aa:	76fb      	strb	r3, [r7, #27]
 801f4ac:	e020      	b.n	801f4f0 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801f4ae:	687b      	ldr	r3, [r7, #4]
 801f4b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f4b2:	4b9c      	ldr	r3, [pc, #624]	; (801f724 <tcp_process+0x2ac>)
 801f4b4:	681b      	ldr	r3, [r3, #0]
 801f4b6:	429a      	cmp	r2, r3
 801f4b8:	d102      	bne.n	801f4c0 <tcp_process+0x48>
        acceptable = 1;
 801f4ba:	2301      	movs	r3, #1
 801f4bc:	76fb      	strb	r3, [r7, #27]
 801f4be:	e017      	b.n	801f4f0 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f4c0:	4b98      	ldr	r3, [pc, #608]	; (801f724 <tcp_process+0x2ac>)
 801f4c2:	681a      	ldr	r2, [r3, #0]
 801f4c4:	687b      	ldr	r3, [r7, #4]
 801f4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4c8:	1ad3      	subs	r3, r2, r3
 801f4ca:	2b00      	cmp	r3, #0
 801f4cc:	db10      	blt.n	801f4f0 <tcp_process+0x78>
 801f4ce:	4b95      	ldr	r3, [pc, #596]	; (801f724 <tcp_process+0x2ac>)
 801f4d0:	681a      	ldr	r2, [r3, #0]
 801f4d2:	687b      	ldr	r3, [r7, #4]
 801f4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4d6:	6879      	ldr	r1, [r7, #4]
 801f4d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f4da:	440b      	add	r3, r1
 801f4dc:	1ad3      	subs	r3, r2, r3
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	dc06      	bgt.n	801f4f0 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	7e9b      	ldrb	r3, [r3, #26]
 801f4e6:	f043 0302 	orr.w	r3, r3, #2
 801f4ea:	b2da      	uxtb	r2, r3
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801f4f0:	7efb      	ldrb	r3, [r7, #27]
 801f4f2:	2b00      	cmp	r3, #0
 801f4f4:	d01b      	beq.n	801f52e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801f4f6:	687b      	ldr	r3, [r7, #4]
 801f4f8:	7d1b      	ldrb	r3, [r3, #20]
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d106      	bne.n	801f50c <tcp_process+0x94>
 801f4fe:	4b8a      	ldr	r3, [pc, #552]	; (801f728 <tcp_process+0x2b0>)
 801f500:	f240 22e7 	movw	r2, #743	; 0x2e7
 801f504:	4989      	ldr	r1, [pc, #548]	; (801f72c <tcp_process+0x2b4>)
 801f506:	488a      	ldr	r0, [pc, #552]	; (801f730 <tcp_process+0x2b8>)
 801f508:	f006 fb0a 	bl	8025b20 <iprintf>
      recv_flags |= TF_RESET;
 801f50c:	4b89      	ldr	r3, [pc, #548]	; (801f734 <tcp_process+0x2bc>)
 801f50e:	781b      	ldrb	r3, [r3, #0]
 801f510:	f043 0308 	orr.w	r3, r3, #8
 801f514:	b2da      	uxtb	r2, r3
 801f516:	4b87      	ldr	r3, [pc, #540]	; (801f734 <tcp_process+0x2bc>)
 801f518:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	7e9b      	ldrb	r3, [r3, #26]
 801f51e:	f023 0301 	bic.w	r3, r3, #1
 801f522:	b2da      	uxtb	r2, r3
 801f524:	687b      	ldr	r3, [r7, #4]
 801f526:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 801f528:	f06f 030d 	mvn.w	r3, #13
 801f52c:	e34d      	b.n	801fbca <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 801f52e:	2300      	movs	r3, #0
 801f530:	e34b      	b.n	801fbca <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801f532:	4b7a      	ldr	r3, [pc, #488]	; (801f71c <tcp_process+0x2a4>)
 801f534:	781b      	ldrb	r3, [r3, #0]
 801f536:	f003 0302 	and.w	r3, r3, #2
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	d010      	beq.n	801f560 <tcp_process+0xe8>
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	7d1b      	ldrb	r3, [r3, #20]
 801f542:	2b02      	cmp	r3, #2
 801f544:	d00c      	beq.n	801f560 <tcp_process+0xe8>
 801f546:	687b      	ldr	r3, [r7, #4]
 801f548:	7d1b      	ldrb	r3, [r3, #20]
 801f54a:	2b03      	cmp	r3, #3
 801f54c:	d008      	beq.n	801f560 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801f54e:	687b      	ldr	r3, [r7, #4]
 801f550:	7e9b      	ldrb	r3, [r3, #26]
 801f552:	f043 0302 	orr.w	r3, r3, #2
 801f556:	b2da      	uxtb	r2, r3
 801f558:	687b      	ldr	r3, [r7, #4]
 801f55a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 801f55c:	2300      	movs	r3, #0
 801f55e:	e334      	b.n	801fbca <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	7e9b      	ldrb	r3, [r3, #26]
 801f564:	f003 0310 	and.w	r3, r3, #16
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d103      	bne.n	801f574 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801f56c:	4b72      	ldr	r3, [pc, #456]	; (801f738 <tcp_process+0x2c0>)
 801f56e:	681a      	ldr	r2, [r3, #0]
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	2200      	movs	r2, #0
 801f578:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 801f57c:	6878      	ldr	r0, [r7, #4]
 801f57e:	f001 fbe1 	bl	8020d44 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801f582:	687b      	ldr	r3, [r7, #4]
 801f584:	7d1b      	ldrb	r3, [r3, #20]
 801f586:	3b02      	subs	r3, #2
 801f588:	2b07      	cmp	r3, #7
 801f58a:	f200 830e 	bhi.w	801fbaa <tcp_process+0x732>
 801f58e:	a201      	add	r2, pc, #4	; (adr r2, 801f594 <tcp_process+0x11c>)
 801f590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f594:	0801f5b5 	.word	0x0801f5b5
 801f598:	0801f7ad 	.word	0x0801f7ad
 801f59c:	0801f905 	.word	0x0801f905
 801f5a0:	0801f92f 	.word	0x0801f92f
 801f5a4:	0801fa59 	.word	0x0801fa59
 801f5a8:	0801f905 	.word	0x0801f905
 801f5ac:	0801fae5 	.word	0x0801fae5
 801f5b0:	0801fb75 	.word	0x0801fb75
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801f5b4:	4b59      	ldr	r3, [pc, #356]	; (801f71c <tcp_process+0x2a4>)
 801f5b6:	781b      	ldrb	r3, [r3, #0]
 801f5b8:	f003 0310 	and.w	r3, r3, #16
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	f000 80cb 	beq.w	801f758 <tcp_process+0x2e0>
 801f5c2:	4b56      	ldr	r3, [pc, #344]	; (801f71c <tcp_process+0x2a4>)
 801f5c4:	781b      	ldrb	r3, [r3, #0]
 801f5c6:	f003 0302 	and.w	r3, r3, #2
 801f5ca:	2b00      	cmp	r3, #0
 801f5cc:	f000 80c4 	beq.w	801f758 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f5d4:	1c5a      	adds	r2, r3, #1
 801f5d6:	4b52      	ldr	r3, [pc, #328]	; (801f720 <tcp_process+0x2a8>)
 801f5d8:	681b      	ldr	r3, [r3, #0]
 801f5da:	429a      	cmp	r2, r3
 801f5dc:	f040 80bc 	bne.w	801f758 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 801f5e0:	4b50      	ldr	r3, [pc, #320]	; (801f724 <tcp_process+0x2ac>)
 801f5e2:	681b      	ldr	r3, [r3, #0]
 801f5e4:	1c5a      	adds	r2, r3, #1
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 801f5f2:	4b4b      	ldr	r3, [pc, #300]	; (801f720 <tcp_process+0x2a8>)
 801f5f4:	681a      	ldr	r2, [r3, #0]
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801f5fa:	4b50      	ldr	r3, [pc, #320]	; (801f73c <tcp_process+0x2c4>)
 801f5fc:	681b      	ldr	r3, [r3, #0]
 801f5fe:	89db      	ldrh	r3, [r3, #14]
 801f600:	b29a      	uxth	r2, r3
 801f602:	687b      	ldr	r3, [r7, #4]
 801f604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801f60e:	687b      	ldr	r3, [r7, #4]
 801f610:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f614:	4b43      	ldr	r3, [pc, #268]	; (801f724 <tcp_process+0x2ac>)
 801f616:	681b      	ldr	r3, [r3, #0]
 801f618:	1e5a      	subs	r2, r3, #1
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	2204      	movs	r2, #4
 801f622:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	3304      	adds	r3, #4
 801f62c:	4619      	mov	r1, r3
 801f62e:	4610      	mov	r0, r2
 801f630:	f7ff f960 	bl	801e8f4 <tcp_eff_send_mss_impl>
 801f634:	4603      	mov	r3, r0
 801f636:	461a      	mov	r2, r3
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f640:	005b      	lsls	r3, r3, #1
 801f642:	f241 121c 	movw	r2, #4380	; 0x111c
 801f646:	429a      	cmp	r2, r3
 801f648:	bf38      	it	cc
 801f64a:	461a      	movcc	r2, r3
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f650:	009b      	lsls	r3, r3, #2
 801f652:	4293      	cmp	r3, r2
 801f654:	bf28      	it	cs
 801f656:	4613      	movcs	r3, r2
 801f658:	b29a      	uxth	r2, r3
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f660:	687b      	ldr	r3, [r7, #4]
 801f662:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f666:	2b00      	cmp	r3, #0
 801f668:	d106      	bne.n	801f678 <tcp_process+0x200>
 801f66a:	4b2f      	ldr	r3, [pc, #188]	; (801f728 <tcp_process+0x2b0>)
 801f66c:	f240 321a 	movw	r2, #794	; 0x31a
 801f670:	4933      	ldr	r1, [pc, #204]	; (801f740 <tcp_process+0x2c8>)
 801f672:	482f      	ldr	r0, [pc, #188]	; (801f730 <tcp_process+0x2b8>)
 801f674:	f006 fa54 	bl	8025b20 <iprintf>
      --pcb->snd_queuelen;
 801f678:	687b      	ldr	r3, [r7, #4]
 801f67a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f67e:	3b01      	subs	r3, #1
 801f680:	b29a      	uxth	r2, r3
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f68c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 801f68e:	69fb      	ldr	r3, [r7, #28]
 801f690:	2b00      	cmp	r3, #0
 801f692:	d111      	bne.n	801f6b8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 801f694:	687b      	ldr	r3, [r7, #4]
 801f696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f698:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801f69a:	69fb      	ldr	r3, [r7, #28]
 801f69c:	2b00      	cmp	r3, #0
 801f69e:	d106      	bne.n	801f6ae <tcp_process+0x236>
 801f6a0:	4b21      	ldr	r3, [pc, #132]	; (801f728 <tcp_process+0x2b0>)
 801f6a2:	f240 3222 	movw	r2, #802	; 0x322
 801f6a6:	4927      	ldr	r1, [pc, #156]	; (801f744 <tcp_process+0x2cc>)
 801f6a8:	4821      	ldr	r0, [pc, #132]	; (801f730 <tcp_process+0x2b8>)
 801f6aa:	f006 fa39 	bl	8025b20 <iprintf>
        pcb->unsent = rseg->next;
 801f6ae:	69fb      	ldr	r3, [r7, #28]
 801f6b0:	681a      	ldr	r2, [r3, #0]
 801f6b2:	687b      	ldr	r3, [r7, #4]
 801f6b4:	669a      	str	r2, [r3, #104]	; 0x68
 801f6b6:	e003      	b.n	801f6c0 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 801f6b8:	69fb      	ldr	r3, [r7, #28]
 801f6ba:	681a      	ldr	r2, [r3, #0]
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 801f6c0:	69f8      	ldr	r0, [r7, #28]
 801f6c2:	f7fe fdec 	bl	801e29e <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	d104      	bne.n	801f6d8 <tcp_process+0x260>
        pcb->rtime = -1;
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f6d4:	861a      	strh	r2, [r3, #48]	; 0x30
 801f6d6:	e006      	b.n	801f6e6 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	2200      	movs	r2, #0
 801f6dc:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 801f6de:	687b      	ldr	r3, [r7, #4]
 801f6e0:	2200      	movs	r2, #0
 801f6e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801f6e6:	687b      	ldr	r3, [r7, #4]
 801f6e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f6ec:	2b00      	cmp	r3, #0
 801f6ee:	d00a      	beq.n	801f706 <tcp_process+0x28e>
 801f6f0:	687b      	ldr	r3, [r7, #4]
 801f6f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f6f6:	687a      	ldr	r2, [r7, #4]
 801f6f8:	6910      	ldr	r0, [r2, #16]
 801f6fa:	2200      	movs	r2, #0
 801f6fc:	6879      	ldr	r1, [r7, #4]
 801f6fe:	4798      	blx	r3
 801f700:	4603      	mov	r3, r0
 801f702:	76bb      	strb	r3, [r7, #26]
 801f704:	e001      	b.n	801f70a <tcp_process+0x292>
 801f706:	2300      	movs	r3, #0
 801f708:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 801f70a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f70e:	f113 0f0d 	cmn.w	r3, #13
 801f712:	d119      	bne.n	801f748 <tcp_process+0x2d0>
        return ERR_ABRT;
 801f714:	f06f 030c 	mvn.w	r3, #12
 801f718:	e257      	b.n	801fbca <tcp_process+0x752>
 801f71a:	bf00      	nop
 801f71c:	20004120 	.word	0x20004120
 801f720:	20004118 	.word	0x20004118
 801f724:	20004114 	.word	0x20004114
 801f728:	0802842c 	.word	0x0802842c
 801f72c:	080285e4 	.word	0x080285e4
 801f730:	08028470 	.word	0x08028470
 801f734:	20004121 	.word	0x20004121
 801f738:	20008c34 	.word	0x20008c34
 801f73c:	20004104 	.word	0x20004104
 801f740:	08028604 	.word	0x08028604
 801f744:	0802861c 	.word	0x0802861c
      }
      tcp_ack_now(pcb);
 801f748:	687b      	ldr	r3, [r7, #4]
 801f74a:	7e9b      	ldrb	r3, [r3, #26]
 801f74c:	f043 0302 	orr.w	r3, r3, #2
 801f750:	b2da      	uxtb	r2, r3
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 801f756:	e22a      	b.n	801fbae <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 801f758:	4b9f      	ldr	r3, [pc, #636]	; (801f9d8 <tcp_process+0x560>)
 801f75a:	781b      	ldrb	r3, [r3, #0]
 801f75c:	f003 0310 	and.w	r3, r3, #16
 801f760:	2b00      	cmp	r3, #0
 801f762:	f000 8224 	beq.w	801fbae <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f766:	4b9d      	ldr	r3, [pc, #628]	; (801f9dc <tcp_process+0x564>)
 801f768:	6818      	ldr	r0, [r3, #0]
 801f76a:	4b9d      	ldr	r3, [pc, #628]	; (801f9e0 <tcp_process+0x568>)
 801f76c:	881b      	ldrh	r3, [r3, #0]
 801f76e:	461a      	mov	r2, r3
 801f770:	4b9c      	ldr	r3, [pc, #624]	; (801f9e4 <tcp_process+0x56c>)
 801f772:	681b      	ldr	r3, [r3, #0]
 801f774:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f776:	4b9c      	ldr	r3, [pc, #624]	; (801f9e8 <tcp_process+0x570>)
 801f778:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f77a:	885b      	ldrh	r3, [r3, #2]
 801f77c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f77e:	4a9a      	ldr	r2, [pc, #616]	; (801f9e8 <tcp_process+0x570>)
 801f780:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f782:	8812      	ldrh	r2, [r2, #0]
 801f784:	b292      	uxth	r2, r2
 801f786:	9201      	str	r2, [sp, #4]
 801f788:	9300      	str	r3, [sp, #0]
 801f78a:	4b98      	ldr	r3, [pc, #608]	; (801f9ec <tcp_process+0x574>)
 801f78c:	4a98      	ldr	r2, [pc, #608]	; (801f9f0 <tcp_process+0x578>)
 801f78e:	f002 fca7 	bl	80220e0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 801f792:	687b      	ldr	r3, [r7, #4]
 801f794:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f798:	2b05      	cmp	r3, #5
 801f79a:	f200 8208 	bhi.w	801fbae <tcp_process+0x736>
        pcb->rtime = 0;
 801f79e:	687b      	ldr	r3, [r7, #4]
 801f7a0:	2200      	movs	r2, #0
 801f7a2:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 801f7a4:	6878      	ldr	r0, [r7, #4]
 801f7a6:	f002 fd0f 	bl	80221c8 <tcp_rexmit_rto>
    break;
 801f7aa:	e200      	b.n	801fbae <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 801f7ac:	4b8a      	ldr	r3, [pc, #552]	; (801f9d8 <tcp_process+0x560>)
 801f7ae:	781b      	ldrb	r3, [r3, #0]
 801f7b0:	f003 0310 	and.w	r3, r3, #16
 801f7b4:	2b00      	cmp	r3, #0
 801f7b6:	f000 8091 	beq.w	801f8dc <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801f7ba:	4b88      	ldr	r3, [pc, #544]	; (801f9dc <tcp_process+0x564>)
 801f7bc:	681a      	ldr	r2, [r3, #0]
 801f7be:	687b      	ldr	r3, [r7, #4]
 801f7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f7c2:	1ad3      	subs	r3, r2, r3
 801f7c4:	3b01      	subs	r3, #1
 801f7c6:	2b00      	cmp	r3, #0
 801f7c8:	db71      	blt.n	801f8ae <tcp_process+0x436>
 801f7ca:	4b84      	ldr	r3, [pc, #528]	; (801f9dc <tcp_process+0x564>)
 801f7cc:	681a      	ldr	r2, [r3, #0]
 801f7ce:	687b      	ldr	r3, [r7, #4]
 801f7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f7d2:	1ad3      	subs	r3, r2, r3
 801f7d4:	2b00      	cmp	r3, #0
 801f7d6:	dc6a      	bgt.n	801f8ae <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 801f7d8:	687b      	ldr	r3, [r7, #4]
 801f7da:	2204      	movs	r2, #4
 801f7dc:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f7e2:	2b00      	cmp	r3, #0
 801f7e4:	d00b      	beq.n	801f7fe <tcp_process+0x386>
 801f7e6:	687b      	ldr	r3, [r7, #4]
 801f7e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f7ea:	699b      	ldr	r3, [r3, #24]
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	d106      	bne.n	801f7fe <tcp_process+0x386>
 801f7f0:	4b80      	ldr	r3, [pc, #512]	; (801f9f4 <tcp_process+0x57c>)
 801f7f2:	f240 3251 	movw	r2, #849	; 0x351
 801f7f6:	4980      	ldr	r1, [pc, #512]	; (801f9f8 <tcp_process+0x580>)
 801f7f8:	4880      	ldr	r0, [pc, #512]	; (801f9fc <tcp_process+0x584>)
 801f7fa:	f006 f991 	bl	8025b20 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f802:	2b00      	cmp	r3, #0
 801f804:	d102      	bne.n	801f80c <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 801f806:	23fa      	movs	r3, #250	; 0xfa
 801f808:	76bb      	strb	r3, [r7, #26]
 801f80a:	e011      	b.n	801f830 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f80c:	687b      	ldr	r3, [r7, #4]
 801f80e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f810:	699b      	ldr	r3, [r3, #24]
 801f812:	2b00      	cmp	r3, #0
 801f814:	d00a      	beq.n	801f82c <tcp_process+0x3b4>
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f81a:	699b      	ldr	r3, [r3, #24]
 801f81c:	687a      	ldr	r2, [r7, #4]
 801f81e:	6910      	ldr	r0, [r2, #16]
 801f820:	2200      	movs	r2, #0
 801f822:	6879      	ldr	r1, [r7, #4]
 801f824:	4798      	blx	r3
 801f826:	4603      	mov	r3, r0
 801f828:	76bb      	strb	r3, [r7, #26]
 801f82a:	e001      	b.n	801f830 <tcp_process+0x3b8>
 801f82c:	23f0      	movs	r3, #240	; 0xf0
 801f82e:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 801f830:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f834:	2b00      	cmp	r3, #0
 801f836:	d00a      	beq.n	801f84e <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 801f838:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f83c:	f113 0f0d 	cmn.w	r3, #13
 801f840:	d002      	beq.n	801f848 <tcp_process+0x3d0>
            tcp_abort(pcb);
 801f842:	6878      	ldr	r0, [r7, #4]
 801f844:	f7fd ff56 	bl	801d6f4 <tcp_abort>
          }
          return ERR_ABRT;
 801f848:	f06f 030c 	mvn.w	r3, #12
 801f84c:	e1bd      	b.n	801fbca <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 801f84e:	6878      	ldr	r0, [r7, #4]
 801f850:	f000 fa42 	bl	801fcd8 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 801f854:	4b6a      	ldr	r3, [pc, #424]	; (801fa00 <tcp_process+0x588>)
 801f856:	881b      	ldrh	r3, [r3, #0]
 801f858:	2b00      	cmp	r3, #0
 801f85a:	d005      	beq.n	801f868 <tcp_process+0x3f0>
          recv_acked--;
 801f85c:	4b68      	ldr	r3, [pc, #416]	; (801fa00 <tcp_process+0x588>)
 801f85e:	881b      	ldrh	r3, [r3, #0]
 801f860:	3b01      	subs	r3, #1
 801f862:	b29a      	uxth	r2, r3
 801f864:	4b66      	ldr	r3, [pc, #408]	; (801fa00 <tcp_process+0x588>)
 801f866:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f868:	687b      	ldr	r3, [r7, #4]
 801f86a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f86c:	005b      	lsls	r3, r3, #1
 801f86e:	f241 121c 	movw	r2, #4380	; 0x111c
 801f872:	429a      	cmp	r2, r3
 801f874:	bf38      	it	cc
 801f876:	461a      	movcc	r2, r3
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f87c:	009b      	lsls	r3, r3, #2
 801f87e:	4293      	cmp	r3, r2
 801f880:	bf28      	it	cs
 801f882:	4613      	movcs	r3, r2
 801f884:	b29a      	uxth	r2, r3
 801f886:	687b      	ldr	r3, [r7, #4]
 801f888:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 801f88c:	4b5d      	ldr	r3, [pc, #372]	; (801fa04 <tcp_process+0x58c>)
 801f88e:	781b      	ldrb	r3, [r3, #0]
 801f890:	f003 0320 	and.w	r3, r3, #32
 801f894:	2b00      	cmp	r3, #0
 801f896:	d034      	beq.n	801f902 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 801f898:	687b      	ldr	r3, [r7, #4]
 801f89a:	7e9b      	ldrb	r3, [r3, #26]
 801f89c:	f043 0302 	orr.w	r3, r3, #2
 801f8a0:	b2da      	uxtb	r2, r3
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 801f8a6:	687b      	ldr	r3, [r7, #4]
 801f8a8:	2207      	movs	r2, #7
 801f8aa:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 801f8ac:	e029      	b.n	801f902 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f8ae:	4b4b      	ldr	r3, [pc, #300]	; (801f9dc <tcp_process+0x564>)
 801f8b0:	6818      	ldr	r0, [r3, #0]
 801f8b2:	4b4b      	ldr	r3, [pc, #300]	; (801f9e0 <tcp_process+0x568>)
 801f8b4:	881b      	ldrh	r3, [r3, #0]
 801f8b6:	461a      	mov	r2, r3
 801f8b8:	4b4a      	ldr	r3, [pc, #296]	; (801f9e4 <tcp_process+0x56c>)
 801f8ba:	681b      	ldr	r3, [r3, #0]
 801f8bc:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f8be:	4b4a      	ldr	r3, [pc, #296]	; (801f9e8 <tcp_process+0x570>)
 801f8c0:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f8c2:	885b      	ldrh	r3, [r3, #2]
 801f8c4:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f8c6:	4a48      	ldr	r2, [pc, #288]	; (801f9e8 <tcp_process+0x570>)
 801f8c8:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f8ca:	8812      	ldrh	r2, [r2, #0]
 801f8cc:	b292      	uxth	r2, r2
 801f8ce:	9201      	str	r2, [sp, #4]
 801f8d0:	9300      	str	r3, [sp, #0]
 801f8d2:	4b46      	ldr	r3, [pc, #280]	; (801f9ec <tcp_process+0x574>)
 801f8d4:	4a46      	ldr	r2, [pc, #280]	; (801f9f0 <tcp_process+0x578>)
 801f8d6:	f002 fc03 	bl	80220e0 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801f8da:	e16a      	b.n	801fbb2 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801f8dc:	4b3e      	ldr	r3, [pc, #248]	; (801f9d8 <tcp_process+0x560>)
 801f8de:	781b      	ldrb	r3, [r3, #0]
 801f8e0:	f003 0302 	and.w	r3, r3, #2
 801f8e4:	2b00      	cmp	r3, #0
 801f8e6:	f000 8164 	beq.w	801fbb2 <tcp_process+0x73a>
 801f8ea:	687b      	ldr	r3, [r7, #4]
 801f8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8ee:	1e5a      	subs	r2, r3, #1
 801f8f0:	4b3c      	ldr	r3, [pc, #240]	; (801f9e4 <tcp_process+0x56c>)
 801f8f2:	681b      	ldr	r3, [r3, #0]
 801f8f4:	429a      	cmp	r2, r3
 801f8f6:	f040 815c 	bne.w	801fbb2 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 801f8fa:	6878      	ldr	r0, [r7, #4]
 801f8fc:	f002 fc9a 	bl	8022234 <tcp_rexmit>
    break;
 801f900:	e157      	b.n	801fbb2 <tcp_process+0x73a>
 801f902:	e156      	b.n	801fbb2 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 801f904:	6878      	ldr	r0, [r7, #4]
 801f906:	f000 f9e7 	bl	801fcd8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801f90a:	4b3e      	ldr	r3, [pc, #248]	; (801fa04 <tcp_process+0x58c>)
 801f90c:	781b      	ldrb	r3, [r3, #0]
 801f90e:	f003 0320 	and.w	r3, r3, #32
 801f912:	2b00      	cmp	r3, #0
 801f914:	f000 814f 	beq.w	801fbb6 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	7e9b      	ldrb	r3, [r3, #26]
 801f91c:	f043 0302 	orr.w	r3, r3, #2
 801f920:	b2da      	uxtb	r2, r3
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	2207      	movs	r2, #7
 801f92a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801f92c:	e143      	b.n	801fbb6 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 801f92e:	6878      	ldr	r0, [r7, #4]
 801f930:	f000 f9d2 	bl	801fcd8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801f934:	4b33      	ldr	r3, [pc, #204]	; (801fa04 <tcp_process+0x58c>)
 801f936:	781b      	ldrb	r3, [r3, #0]
 801f938:	f003 0320 	and.w	r3, r3, #32
 801f93c:	2b00      	cmp	r3, #0
 801f93e:	d074      	beq.n	801fa2a <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f940:	4b25      	ldr	r3, [pc, #148]	; (801f9d8 <tcp_process+0x560>)
 801f942:	781b      	ldrb	r3, [r3, #0]
 801f944:	f003 0310 	and.w	r3, r3, #16
 801f948:	2b00      	cmp	r3, #0
 801f94a:	d063      	beq.n	801fa14 <tcp_process+0x59c>
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f950:	4b22      	ldr	r3, [pc, #136]	; (801f9dc <tcp_process+0x564>)
 801f952:	681b      	ldr	r3, [r3, #0]
 801f954:	429a      	cmp	r2, r3
 801f956:	d15d      	bne.n	801fa14 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 801f958:	687b      	ldr	r3, [r7, #4]
 801f95a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	d159      	bne.n	801fa14 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801f960:	687b      	ldr	r3, [r7, #4]
 801f962:	7e9b      	ldrb	r3, [r3, #26]
 801f964:	f043 0302 	orr.w	r3, r3, #2
 801f968:	b2da      	uxtb	r2, r3
 801f96a:	687b      	ldr	r3, [r7, #4]
 801f96c:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801f96e:	6878      	ldr	r0, [r7, #4]
 801f970:	f7fe feea 	bl	801e748 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f974:	4b24      	ldr	r3, [pc, #144]	; (801fa08 <tcp_process+0x590>)
 801f976:	681a      	ldr	r2, [r3, #0]
 801f978:	687b      	ldr	r3, [r7, #4]
 801f97a:	429a      	cmp	r2, r3
 801f97c:	d105      	bne.n	801f98a <tcp_process+0x512>
 801f97e:	4b22      	ldr	r3, [pc, #136]	; (801fa08 <tcp_process+0x590>)
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	68db      	ldr	r3, [r3, #12]
 801f984:	4a20      	ldr	r2, [pc, #128]	; (801fa08 <tcp_process+0x590>)
 801f986:	6013      	str	r3, [r2, #0]
 801f988:	e013      	b.n	801f9b2 <tcp_process+0x53a>
 801f98a:	4b1f      	ldr	r3, [pc, #124]	; (801fa08 <tcp_process+0x590>)
 801f98c:	681b      	ldr	r3, [r3, #0]
 801f98e:	617b      	str	r3, [r7, #20]
 801f990:	e00c      	b.n	801f9ac <tcp_process+0x534>
 801f992:	697b      	ldr	r3, [r7, #20]
 801f994:	68da      	ldr	r2, [r3, #12]
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	429a      	cmp	r2, r3
 801f99a:	d104      	bne.n	801f9a6 <tcp_process+0x52e>
 801f99c:	687b      	ldr	r3, [r7, #4]
 801f99e:	68da      	ldr	r2, [r3, #12]
 801f9a0:	697b      	ldr	r3, [r7, #20]
 801f9a2:	60da      	str	r2, [r3, #12]
 801f9a4:	e005      	b.n	801f9b2 <tcp_process+0x53a>
 801f9a6:	697b      	ldr	r3, [r7, #20]
 801f9a8:	68db      	ldr	r3, [r3, #12]
 801f9aa:	617b      	str	r3, [r7, #20]
 801f9ac:	697b      	ldr	r3, [r7, #20]
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	d1ef      	bne.n	801f992 <tcp_process+0x51a>
 801f9b2:	687b      	ldr	r3, [r7, #4]
 801f9b4:	2200      	movs	r2, #0
 801f9b6:	60da      	str	r2, [r3, #12]
 801f9b8:	4b14      	ldr	r3, [pc, #80]	; (801fa0c <tcp_process+0x594>)
 801f9ba:	2201      	movs	r2, #1
 801f9bc:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	220a      	movs	r2, #10
 801f9c2:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f9c4:	4b12      	ldr	r3, [pc, #72]	; (801fa10 <tcp_process+0x598>)
 801f9c6:	681a      	ldr	r2, [r3, #0]
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	60da      	str	r2, [r3, #12]
 801f9cc:	4a10      	ldr	r2, [pc, #64]	; (801fa10 <tcp_process+0x598>)
 801f9ce:	687b      	ldr	r3, [r7, #4]
 801f9d0:	6013      	str	r3, [r2, #0]
 801f9d2:	f002 fdd3 	bl	802257c <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801f9d6:	e0f0      	b.n	801fbba <tcp_process+0x742>
 801f9d8:	20004120 	.word	0x20004120
 801f9dc:	20004118 	.word	0x20004118
 801f9e0:	2000411e 	.word	0x2000411e
 801f9e4:	20004114 	.word	0x20004114
 801f9e8:	20004104 	.word	0x20004104
 801f9ec:	20004618 	.word	0x20004618
 801f9f0:	2000461c 	.word	0x2000461c
 801f9f4:	0802842c 	.word	0x0802842c
 801f9f8:	08028630 	.word	0x08028630
 801f9fc:	08028470 	.word	0x08028470
 801fa00:	2000411c 	.word	0x2000411c
 801fa04:	20004121 	.word	0x20004121
 801fa08:	20008c30 	.word	0x20008c30
 801fa0c:	20008c2c 	.word	0x20008c2c
 801fa10:	20008c40 	.word	0x20008c40
        tcp_ack_now(pcb);
 801fa14:	687b      	ldr	r3, [r7, #4]
 801fa16:	7e9b      	ldrb	r3, [r3, #26]
 801fa18:	f043 0302 	orr.w	r3, r3, #2
 801fa1c:	b2da      	uxtb	r2, r3
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 801fa22:	687b      	ldr	r3, [r7, #4]
 801fa24:	2208      	movs	r2, #8
 801fa26:	751a      	strb	r2, [r3, #20]
    break;
 801fa28:	e0c7      	b.n	801fbba <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801fa2a:	4b6a      	ldr	r3, [pc, #424]	; (801fbd4 <tcp_process+0x75c>)
 801fa2c:	781b      	ldrb	r3, [r3, #0]
 801fa2e:	f003 0310 	and.w	r3, r3, #16
 801fa32:	2b00      	cmp	r3, #0
 801fa34:	f000 80c1 	beq.w	801fbba <tcp_process+0x742>
 801fa38:	687b      	ldr	r3, [r7, #4]
 801fa3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fa3c:	4b66      	ldr	r3, [pc, #408]	; (801fbd8 <tcp_process+0x760>)
 801fa3e:	681b      	ldr	r3, [r3, #0]
 801fa40:	429a      	cmp	r2, r3
 801fa42:	f040 80ba 	bne.w	801fbba <tcp_process+0x742>
               pcb->unsent == NULL) {
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	f040 80b5 	bne.w	801fbba <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 801fa50:	687b      	ldr	r3, [r7, #4]
 801fa52:	2206      	movs	r2, #6
 801fa54:	751a      	strb	r2, [r3, #20]
    break;
 801fa56:	e0b0      	b.n	801fbba <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801fa58:	6878      	ldr	r0, [r7, #4]
 801fa5a:	f000 f93d 	bl	801fcd8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801fa5e:	4b5f      	ldr	r3, [pc, #380]	; (801fbdc <tcp_process+0x764>)
 801fa60:	781b      	ldrb	r3, [r3, #0]
 801fa62:	f003 0320 	and.w	r3, r3, #32
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	f000 80a9 	beq.w	801fbbe <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 801fa6c:	687b      	ldr	r3, [r7, #4]
 801fa6e:	7e9b      	ldrb	r3, [r3, #26]
 801fa70:	f043 0302 	orr.w	r3, r3, #2
 801fa74:	b2da      	uxtb	r2, r3
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801fa7a:	6878      	ldr	r0, [r7, #4]
 801fa7c:	f7fe fe64 	bl	801e748 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801fa80:	4b57      	ldr	r3, [pc, #348]	; (801fbe0 <tcp_process+0x768>)
 801fa82:	681a      	ldr	r2, [r3, #0]
 801fa84:	687b      	ldr	r3, [r7, #4]
 801fa86:	429a      	cmp	r2, r3
 801fa88:	d105      	bne.n	801fa96 <tcp_process+0x61e>
 801fa8a:	4b55      	ldr	r3, [pc, #340]	; (801fbe0 <tcp_process+0x768>)
 801fa8c:	681b      	ldr	r3, [r3, #0]
 801fa8e:	68db      	ldr	r3, [r3, #12]
 801fa90:	4a53      	ldr	r2, [pc, #332]	; (801fbe0 <tcp_process+0x768>)
 801fa92:	6013      	str	r3, [r2, #0]
 801fa94:	e013      	b.n	801fabe <tcp_process+0x646>
 801fa96:	4b52      	ldr	r3, [pc, #328]	; (801fbe0 <tcp_process+0x768>)
 801fa98:	681b      	ldr	r3, [r3, #0]
 801fa9a:	613b      	str	r3, [r7, #16]
 801fa9c:	e00c      	b.n	801fab8 <tcp_process+0x640>
 801fa9e:	693b      	ldr	r3, [r7, #16]
 801faa0:	68da      	ldr	r2, [r3, #12]
 801faa2:	687b      	ldr	r3, [r7, #4]
 801faa4:	429a      	cmp	r2, r3
 801faa6:	d104      	bne.n	801fab2 <tcp_process+0x63a>
 801faa8:	687b      	ldr	r3, [r7, #4]
 801faaa:	68da      	ldr	r2, [r3, #12]
 801faac:	693b      	ldr	r3, [r7, #16]
 801faae:	60da      	str	r2, [r3, #12]
 801fab0:	e005      	b.n	801fabe <tcp_process+0x646>
 801fab2:	693b      	ldr	r3, [r7, #16]
 801fab4:	68db      	ldr	r3, [r3, #12]
 801fab6:	613b      	str	r3, [r7, #16]
 801fab8:	693b      	ldr	r3, [r7, #16]
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d1ef      	bne.n	801fa9e <tcp_process+0x626>
 801fabe:	687b      	ldr	r3, [r7, #4]
 801fac0:	2200      	movs	r2, #0
 801fac2:	60da      	str	r2, [r3, #12]
 801fac4:	4b47      	ldr	r3, [pc, #284]	; (801fbe4 <tcp_process+0x76c>)
 801fac6:	2201      	movs	r2, #1
 801fac8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801faca:	687b      	ldr	r3, [r7, #4]
 801facc:	220a      	movs	r2, #10
 801face:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801fad0:	4b45      	ldr	r3, [pc, #276]	; (801fbe8 <tcp_process+0x770>)
 801fad2:	681a      	ldr	r2, [r3, #0]
 801fad4:	687b      	ldr	r3, [r7, #4]
 801fad6:	60da      	str	r2, [r3, #12]
 801fad8:	4a43      	ldr	r2, [pc, #268]	; (801fbe8 <tcp_process+0x770>)
 801fada:	687b      	ldr	r3, [r7, #4]
 801fadc:	6013      	str	r3, [r2, #0]
 801fade:	f002 fd4d 	bl	802257c <tcp_timer_needed>
    }
    break;
 801fae2:	e06c      	b.n	801fbbe <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 801fae4:	6878      	ldr	r0, [r7, #4]
 801fae6:	f000 f8f7 	bl	801fcd8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801faea:	4b3a      	ldr	r3, [pc, #232]	; (801fbd4 <tcp_process+0x75c>)
 801faec:	781b      	ldrb	r3, [r3, #0]
 801faee:	f003 0310 	and.w	r3, r3, #16
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	d065      	beq.n	801fbc2 <tcp_process+0x74a>
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fafa:	4b37      	ldr	r3, [pc, #220]	; (801fbd8 <tcp_process+0x760>)
 801fafc:	681b      	ldr	r3, [r3, #0]
 801fafe:	429a      	cmp	r2, r3
 801fb00:	d15f      	bne.n	801fbc2 <tcp_process+0x74a>
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801fb06:	2b00      	cmp	r3, #0
 801fb08:	d15b      	bne.n	801fbc2 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801fb0a:	6878      	ldr	r0, [r7, #4]
 801fb0c:	f7fe fe1c 	bl	801e748 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801fb10:	4b33      	ldr	r3, [pc, #204]	; (801fbe0 <tcp_process+0x768>)
 801fb12:	681a      	ldr	r2, [r3, #0]
 801fb14:	687b      	ldr	r3, [r7, #4]
 801fb16:	429a      	cmp	r2, r3
 801fb18:	d105      	bne.n	801fb26 <tcp_process+0x6ae>
 801fb1a:	4b31      	ldr	r3, [pc, #196]	; (801fbe0 <tcp_process+0x768>)
 801fb1c:	681b      	ldr	r3, [r3, #0]
 801fb1e:	68db      	ldr	r3, [r3, #12]
 801fb20:	4a2f      	ldr	r2, [pc, #188]	; (801fbe0 <tcp_process+0x768>)
 801fb22:	6013      	str	r3, [r2, #0]
 801fb24:	e013      	b.n	801fb4e <tcp_process+0x6d6>
 801fb26:	4b2e      	ldr	r3, [pc, #184]	; (801fbe0 <tcp_process+0x768>)
 801fb28:	681b      	ldr	r3, [r3, #0]
 801fb2a:	60fb      	str	r3, [r7, #12]
 801fb2c:	e00c      	b.n	801fb48 <tcp_process+0x6d0>
 801fb2e:	68fb      	ldr	r3, [r7, #12]
 801fb30:	68da      	ldr	r2, [r3, #12]
 801fb32:	687b      	ldr	r3, [r7, #4]
 801fb34:	429a      	cmp	r2, r3
 801fb36:	d104      	bne.n	801fb42 <tcp_process+0x6ca>
 801fb38:	687b      	ldr	r3, [r7, #4]
 801fb3a:	68da      	ldr	r2, [r3, #12]
 801fb3c:	68fb      	ldr	r3, [r7, #12]
 801fb3e:	60da      	str	r2, [r3, #12]
 801fb40:	e005      	b.n	801fb4e <tcp_process+0x6d6>
 801fb42:	68fb      	ldr	r3, [r7, #12]
 801fb44:	68db      	ldr	r3, [r3, #12]
 801fb46:	60fb      	str	r3, [r7, #12]
 801fb48:	68fb      	ldr	r3, [r7, #12]
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	d1ef      	bne.n	801fb2e <tcp_process+0x6b6>
 801fb4e:	687b      	ldr	r3, [r7, #4]
 801fb50:	2200      	movs	r2, #0
 801fb52:	60da      	str	r2, [r3, #12]
 801fb54:	4b23      	ldr	r3, [pc, #140]	; (801fbe4 <tcp_process+0x76c>)
 801fb56:	2201      	movs	r2, #1
 801fb58:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801fb5a:	687b      	ldr	r3, [r7, #4]
 801fb5c:	220a      	movs	r2, #10
 801fb5e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801fb60:	4b21      	ldr	r3, [pc, #132]	; (801fbe8 <tcp_process+0x770>)
 801fb62:	681a      	ldr	r2, [r3, #0]
 801fb64:	687b      	ldr	r3, [r7, #4]
 801fb66:	60da      	str	r2, [r3, #12]
 801fb68:	4a1f      	ldr	r2, [pc, #124]	; (801fbe8 <tcp_process+0x770>)
 801fb6a:	687b      	ldr	r3, [r7, #4]
 801fb6c:	6013      	str	r3, [r2, #0]
 801fb6e:	f002 fd05 	bl	802257c <tcp_timer_needed>
    }
    break;
 801fb72:	e026      	b.n	801fbc2 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 801fb74:	6878      	ldr	r0, [r7, #4]
 801fb76:	f000 f8af 	bl	801fcd8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801fb7a:	4b16      	ldr	r3, [pc, #88]	; (801fbd4 <tcp_process+0x75c>)
 801fb7c:	781b      	ldrb	r3, [r3, #0]
 801fb7e:	f003 0310 	and.w	r3, r3, #16
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	d01f      	beq.n	801fbc6 <tcp_process+0x74e>
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fb8a:	4b13      	ldr	r3, [pc, #76]	; (801fbd8 <tcp_process+0x760>)
 801fb8c:	681b      	ldr	r3, [r3, #0]
 801fb8e:	429a      	cmp	r2, r3
 801fb90:	d119      	bne.n	801fbc6 <tcp_process+0x74e>
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801fb96:	2b00      	cmp	r3, #0
 801fb98:	d115      	bne.n	801fbc6 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 801fb9a:	4b10      	ldr	r3, [pc, #64]	; (801fbdc <tcp_process+0x764>)
 801fb9c:	781b      	ldrb	r3, [r3, #0]
 801fb9e:	f043 0310 	orr.w	r3, r3, #16
 801fba2:	b2da      	uxtb	r2, r3
 801fba4:	4b0d      	ldr	r3, [pc, #52]	; (801fbdc <tcp_process+0x764>)
 801fba6:	701a      	strb	r2, [r3, #0]
    }
    break;
 801fba8:	e00d      	b.n	801fbc6 <tcp_process+0x74e>
  default:
    break;
 801fbaa:	bf00      	nop
 801fbac:	e00c      	b.n	801fbc8 <tcp_process+0x750>
    break;
 801fbae:	bf00      	nop
 801fbb0:	e00a      	b.n	801fbc8 <tcp_process+0x750>
    break;
 801fbb2:	bf00      	nop
 801fbb4:	e008      	b.n	801fbc8 <tcp_process+0x750>
    break;
 801fbb6:	bf00      	nop
 801fbb8:	e006      	b.n	801fbc8 <tcp_process+0x750>
    break;
 801fbba:	bf00      	nop
 801fbbc:	e004      	b.n	801fbc8 <tcp_process+0x750>
    break;
 801fbbe:	bf00      	nop
 801fbc0:	e002      	b.n	801fbc8 <tcp_process+0x750>
    break;
 801fbc2:	bf00      	nop
 801fbc4:	e000      	b.n	801fbc8 <tcp_process+0x750>
    break;
 801fbc6:	bf00      	nop
  }
  return ERR_OK;
 801fbc8:	2300      	movs	r3, #0
}
 801fbca:	4618      	mov	r0, r3
 801fbcc:	3720      	adds	r7, #32
 801fbce:	46bd      	mov	sp, r7
 801fbd0:	bd80      	pop	{r7, pc}
 801fbd2:	bf00      	nop
 801fbd4:	20004120 	.word	0x20004120
 801fbd8:	20004118 	.word	0x20004118
 801fbdc:	20004121 	.word	0x20004121
 801fbe0:	20008c30 	.word	0x20008c30
 801fbe4:	20008c2c 	.word	0x20008c2c
 801fbe8:	20008c40 	.word	0x20008c40

0801fbec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801fbec:	b5b0      	push	{r4, r5, r7, lr}
 801fbee:	b084      	sub	sp, #16
 801fbf0:	af00      	add	r7, sp, #0
 801fbf2:	6078      	str	r0, [r7, #4]
 801fbf4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801fbf6:	687b      	ldr	r3, [r7, #4]
 801fbf8:	68db      	ldr	r3, [r3, #12]
 801fbfa:	899b      	ldrh	r3, [r3, #12]
 801fbfc:	b29b      	uxth	r3, r3
 801fbfe:	4618      	mov	r0, r3
 801fc00:	f7f9 fba2 	bl	8019348 <lwip_htons>
 801fc04:	4603      	mov	r3, r0
 801fc06:	f003 0301 	and.w	r3, r3, #1
 801fc0a:	2b00      	cmp	r3, #0
 801fc0c:	d026      	beq.n	801fc5c <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801fc0e:	6838      	ldr	r0, [r7, #0]
 801fc10:	f7fe fb31 	bl	801e276 <tcp_segs_free>
    next = NULL;
 801fc14:	2300      	movs	r3, #0
 801fc16:	603b      	str	r3, [r7, #0]
 801fc18:	e054      	b.n	801fcc4 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801fc1a:	683b      	ldr	r3, [r7, #0]
 801fc1c:	68db      	ldr	r3, [r3, #12]
 801fc1e:	899b      	ldrh	r3, [r3, #12]
 801fc20:	b29b      	uxth	r3, r3
 801fc22:	4618      	mov	r0, r3
 801fc24:	f7f9 fb90 	bl	8019348 <lwip_htons>
 801fc28:	4603      	mov	r3, r0
 801fc2a:	f003 0301 	and.w	r3, r3, #1
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	d00c      	beq.n	801fc4c <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801fc32:	687b      	ldr	r3, [r7, #4]
 801fc34:	68dc      	ldr	r4, [r3, #12]
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	68db      	ldr	r3, [r3, #12]
 801fc3a:	899b      	ldrh	r3, [r3, #12]
 801fc3c:	b29d      	uxth	r5, r3
 801fc3e:	2001      	movs	r0, #1
 801fc40:	f7f9 fb82 	bl	8019348 <lwip_htons>
 801fc44:	4603      	mov	r3, r0
 801fc46:	432b      	orrs	r3, r5
 801fc48:	b29b      	uxth	r3, r3
 801fc4a:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 801fc4c:	683b      	ldr	r3, [r7, #0]
 801fc4e:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801fc50:	683b      	ldr	r3, [r7, #0]
 801fc52:	681b      	ldr	r3, [r3, #0]
 801fc54:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801fc56:	68f8      	ldr	r0, [r7, #12]
 801fc58:	f7fe fb21 	bl	801e29e <tcp_seg_free>
    while (next &&
 801fc5c:	683b      	ldr	r3, [r7, #0]
 801fc5e:	2b00      	cmp	r3, #0
 801fc60:	d00e      	beq.n	801fc80 <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801fc62:	687b      	ldr	r3, [r7, #4]
 801fc64:	891b      	ldrh	r3, [r3, #8]
 801fc66:	461a      	mov	r2, r3
 801fc68:	4b1a      	ldr	r3, [pc, #104]	; (801fcd4 <tcp_oos_insert_segment+0xe8>)
 801fc6a:	681b      	ldr	r3, [r3, #0]
 801fc6c:	441a      	add	r2, r3
 801fc6e:	683b      	ldr	r3, [r7, #0]
 801fc70:	68db      	ldr	r3, [r3, #12]
 801fc72:	685b      	ldr	r3, [r3, #4]
 801fc74:	6839      	ldr	r1, [r7, #0]
 801fc76:	8909      	ldrh	r1, [r1, #8]
 801fc78:	440b      	add	r3, r1
 801fc7a:	1ad3      	subs	r3, r2, r3
    while (next &&
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	dacc      	bge.n	801fc1a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 801fc80:	683b      	ldr	r3, [r7, #0]
 801fc82:	2b00      	cmp	r3, #0
 801fc84:	d01e      	beq.n	801fcc4 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801fc86:	687b      	ldr	r3, [r7, #4]
 801fc88:	891b      	ldrh	r3, [r3, #8]
 801fc8a:	461a      	mov	r2, r3
 801fc8c:	4b11      	ldr	r3, [pc, #68]	; (801fcd4 <tcp_oos_insert_segment+0xe8>)
 801fc8e:	681b      	ldr	r3, [r3, #0]
 801fc90:	441a      	add	r2, r3
 801fc92:	683b      	ldr	r3, [r7, #0]
 801fc94:	68db      	ldr	r3, [r3, #12]
 801fc96:	685b      	ldr	r3, [r3, #4]
 801fc98:	1ad3      	subs	r3, r2, r3
    if (next &&
 801fc9a:	2b00      	cmp	r3, #0
 801fc9c:	dd12      	ble.n	801fcc4 <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801fc9e:	683b      	ldr	r3, [r7, #0]
 801fca0:	68db      	ldr	r3, [r3, #12]
 801fca2:	685b      	ldr	r3, [r3, #4]
 801fca4:	b29a      	uxth	r2, r3
 801fca6:	4b0b      	ldr	r3, [pc, #44]	; (801fcd4 <tcp_oos_insert_segment+0xe8>)
 801fca8:	681b      	ldr	r3, [r3, #0]
 801fcaa:	b29b      	uxth	r3, r3
 801fcac:	1ad3      	subs	r3, r2, r3
 801fcae:	b29a      	uxth	r2, r3
 801fcb0:	687b      	ldr	r3, [r7, #4]
 801fcb2:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801fcb4:	687b      	ldr	r3, [r7, #4]
 801fcb6:	685a      	ldr	r2, [r3, #4]
 801fcb8:	687b      	ldr	r3, [r7, #4]
 801fcba:	891b      	ldrh	r3, [r3, #8]
 801fcbc:	4619      	mov	r1, r3
 801fcbe:	4610      	mov	r0, r2
 801fcc0:	f7fc fe5e 	bl	801c980 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801fcc4:	687b      	ldr	r3, [r7, #4]
 801fcc6:	683a      	ldr	r2, [r7, #0]
 801fcc8:	601a      	str	r2, [r3, #0]
}
 801fcca:	bf00      	nop
 801fccc:	3710      	adds	r7, #16
 801fcce:	46bd      	mov	sp, r7
 801fcd0:	bdb0      	pop	{r4, r5, r7, pc}
 801fcd2:	bf00      	nop
 801fcd4:	20004114 	.word	0x20004114

0801fcd8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801fcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fcda:	b08d      	sub	sp, #52	; 0x34
 801fcdc:	af00      	add	r7, sp, #0
 801fcde:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 801fce0:	2300      	movs	r3, #0
 801fce2:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	7d1b      	ldrb	r3, [r3, #20]
 801fce8:	2b03      	cmp	r3, #3
 801fcea:	d806      	bhi.n	801fcfa <tcp_receive+0x22>
 801fcec:	4b9a      	ldr	r3, [pc, #616]	; (801ff58 <tcp_receive+0x280>)
 801fcee:	f44f 6281 	mov.w	r2, #1032	; 0x408
 801fcf2:	499a      	ldr	r1, [pc, #616]	; (801ff5c <tcp_receive+0x284>)
 801fcf4:	489a      	ldr	r0, [pc, #616]	; (801ff60 <tcp_receive+0x288>)
 801fcf6:	f005 ff13 	bl	8025b20 <iprintf>

  if (flags & TCP_ACK) {
 801fcfa:	4b9a      	ldr	r3, [pc, #616]	; (801ff64 <tcp_receive+0x28c>)
 801fcfc:	781b      	ldrb	r3, [r3, #0]
 801fcfe:	f003 0310 	and.w	r3, r3, #16
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	f000 82c5 	beq.w	8020292 <tcp_receive+0x5ba>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fd0e:	461a      	mov	r2, r3
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fd14:	4413      	add	r3, r2
 801fd16:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fd1c:	4b92      	ldr	r3, [pc, #584]	; (801ff68 <tcp_receive+0x290>)
 801fd1e:	681b      	ldr	r3, [r3, #0]
 801fd20:	1ad3      	subs	r3, r2, r3
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	db1b      	blt.n	801fd5e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fd26:	687b      	ldr	r3, [r7, #4]
 801fd28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fd2a:	4b8f      	ldr	r3, [pc, #572]	; (801ff68 <tcp_receive+0x290>)
 801fd2c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801fd2e:	429a      	cmp	r2, r3
 801fd30:	d106      	bne.n	801fd40 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fd36:	4b8d      	ldr	r3, [pc, #564]	; (801ff6c <tcp_receive+0x294>)
 801fd38:	681b      	ldr	r3, [r3, #0]
 801fd3a:	1ad3      	subs	r3, r2, r3
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	db0e      	blt.n	801fd5e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fd44:	4b89      	ldr	r3, [pc, #548]	; (801ff6c <tcp_receive+0x294>)
 801fd46:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fd48:	429a      	cmp	r2, r3
 801fd4a:	d141      	bne.n	801fdd0 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801fd4c:	4b88      	ldr	r3, [pc, #544]	; (801ff70 <tcp_receive+0x298>)
 801fd4e:	681b      	ldr	r3, [r3, #0]
 801fd50:	89db      	ldrh	r3, [r3, #14]
 801fd52:	b29a      	uxth	r2, r3
 801fd54:	687b      	ldr	r3, [r7, #4]
 801fd56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fd5a:	429a      	cmp	r2, r3
 801fd5c:	d938      	bls.n	801fdd0 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801fd5e:	4b84      	ldr	r3, [pc, #528]	; (801ff70 <tcp_receive+0x298>)
 801fd60:	681b      	ldr	r3, [r3, #0]
 801fd62:	89db      	ldrh	r3, [r3, #14]
 801fd64:	b29a      	uxth	r2, r3
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fd78:	429a      	cmp	r2, r3
 801fd7a:	d205      	bcs.n	801fd88 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801fd7c:	687b      	ldr	r3, [r7, #4]
 801fd7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801fd82:	687b      	ldr	r3, [r7, #4]
 801fd84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 801fd88:	4b77      	ldr	r3, [pc, #476]	; (801ff68 <tcp_receive+0x290>)
 801fd8a:	681a      	ldr	r2, [r3, #0]
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 801fd90:	4b76      	ldr	r3, [pc, #472]	; (801ff6c <tcp_receive+0x294>)
 801fd92:	681a      	ldr	r2, [r3, #0]
 801fd94:	687b      	ldr	r3, [r7, #4]
 801fd96:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 801fd98:	687b      	ldr	r3, [r7, #4]
 801fd9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	d10d      	bne.n	801fdbe <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	d111      	bne.n	801fdd0 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 801fdac:	687b      	ldr	r3, [r7, #4]
 801fdae:	2200      	movs	r2, #0
 801fdb0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	2201      	movs	r2, #1
 801fdb8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 801fdbc:	e008      	b.n	801fdd0 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 801fdbe:	687b      	ldr	r3, [r7, #4]
 801fdc0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801fdc4:	2b00      	cmp	r3, #0
 801fdc6:	d003      	beq.n	801fdd0 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801fdc8:	687b      	ldr	r3, [r7, #4]
 801fdca:	2200      	movs	r2, #0
 801fdcc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801fdd0:	4b66      	ldr	r3, [pc, #408]	; (801ff6c <tcp_receive+0x294>)
 801fdd2:	681a      	ldr	r2, [r3, #0]
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fdd8:	1ad3      	subs	r3, r2, r3
 801fdda:	2b00      	cmp	r3, #0
 801fddc:	dc58      	bgt.n	801fe90 <tcp_receive+0x1b8>
      /* Clause 2 */
      if (tcplen == 0) {
 801fdde:	4b65      	ldr	r3, [pc, #404]	; (801ff74 <tcp_receive+0x29c>)
 801fde0:	881b      	ldrh	r3, [r3, #0]
 801fde2:	2b00      	cmp	r3, #0
 801fde4:	d14b      	bne.n	801fe7e <tcp_receive+0x1a6>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fdea:	687a      	ldr	r2, [r7, #4]
 801fdec:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 801fdf0:	441a      	add	r2, r3
 801fdf2:	697b      	ldr	r3, [r7, #20]
 801fdf4:	429a      	cmp	r2, r3
 801fdf6:	d142      	bne.n	801fe7e <tcp_receive+0x1a6>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	db3d      	blt.n	801fe7e <tcp_receive+0x1a6>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fe06:	4b59      	ldr	r3, [pc, #356]	; (801ff6c <tcp_receive+0x294>)
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	429a      	cmp	r2, r3
 801fe0c:	d137      	bne.n	801fe7e <tcp_receive+0x1a6>
              found_dupack = 1;
 801fe0e:	2301      	movs	r3, #1
 801fe10:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fe18:	3301      	adds	r3, #1
 801fe1a:	b2da      	uxtb	r2, r3
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fe22:	429a      	cmp	r2, r3
 801fe24:	d907      	bls.n	801fe36 <tcp_receive+0x15e>
                ++pcb->dupacks;
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fe2c:	3301      	adds	r3, #1
 801fe2e:	b2da      	uxtb	r2, r3
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fe3c:	2b03      	cmp	r3, #3
 801fe3e:	d916      	bls.n	801fe6e <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801fe46:	687b      	ldr	r3, [r7, #4]
 801fe48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801fe4a:	4413      	add	r3, r2
 801fe4c:	b29a      	uxth	r2, r3
 801fe4e:	687b      	ldr	r3, [r7, #4]
 801fe50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801fe54:	429a      	cmp	r2, r3
 801fe56:	d912      	bls.n	801fe7e <tcp_receive+0x1a6>
                  pcb->cwnd += pcb->mss;
 801fe58:	687b      	ldr	r3, [r7, #4]
 801fe5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801fe62:	4413      	add	r3, r2
 801fe64:	b29a      	uxth	r2, r3
 801fe66:	687b      	ldr	r3, [r7, #4]
 801fe68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801fe6c:	e007      	b.n	801fe7e <tcp_receive+0x1a6>
                }
              } else if (pcb->dupacks == 3) {
 801fe6e:	687b      	ldr	r3, [r7, #4]
 801fe70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fe74:	2b03      	cmp	r3, #3
 801fe76:	d102      	bne.n	801fe7e <tcp_receive+0x1a6>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 801fe78:	6878      	ldr	r0, [r7, #4]
 801fe7a:	f002 fa2b 	bl	80222d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801fe7e:	69fb      	ldr	r3, [r7, #28]
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	f040 8169 	bne.w	8020158 <tcp_receive+0x480>
        pcb->dupacks = 0;
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	2200      	movs	r2, #0
 801fe8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fe8e:	e163      	b.n	8020158 <tcp_receive+0x480>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801fe90:	4b36      	ldr	r3, [pc, #216]	; (801ff6c <tcp_receive+0x294>)
 801fe92:	681a      	ldr	r2, [r3, #0]
 801fe94:	687b      	ldr	r3, [r7, #4]
 801fe96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fe98:	1ad3      	subs	r3, r2, r3
 801fe9a:	3b01      	subs	r3, #1
 801fe9c:	2b00      	cmp	r3, #0
 801fe9e:	f2c0 8107 	blt.w	80200b0 <tcp_receive+0x3d8>
 801fea2:	4b32      	ldr	r3, [pc, #200]	; (801ff6c <tcp_receive+0x294>)
 801fea4:	681a      	ldr	r2, [r3, #0]
 801fea6:	687b      	ldr	r3, [r7, #4]
 801fea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801feaa:	1ad3      	subs	r3, r2, r3
 801feac:	2b00      	cmp	r3, #0
 801feae:	f300 80ff 	bgt.w	80200b0 <tcp_receive+0x3d8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801feb2:	687b      	ldr	r3, [r7, #4]
 801feb4:	7e9b      	ldrb	r3, [r3, #26]
 801feb6:	f003 0304 	and.w	r3, r3, #4
 801feba:	2b00      	cmp	r3, #0
 801febc:	d00c      	beq.n	801fed8 <tcp_receive+0x200>
        pcb->flags &= ~TF_INFR;
 801febe:	687b      	ldr	r3, [r7, #4]
 801fec0:	7e9b      	ldrb	r3, [r3, #26]
 801fec2:	f023 0304 	bic.w	r3, r3, #4
 801fec6:	b2da      	uxtb	r2, r3
 801fec8:	687b      	ldr	r3, [r7, #4]
 801feca:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801fecc:	687b      	ldr	r3, [r7, #4]
 801fece:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801fed2:	687b      	ldr	r3, [r7, #4]
 801fed4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	2200      	movs	r2, #0
 801fedc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801fee0:	687b      	ldr	r3, [r7, #4]
 801fee2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801fee6:	10db      	asrs	r3, r3, #3
 801fee8:	b21b      	sxth	r3, r3
 801feea:	b29a      	uxth	r2, r3
 801feec:	687b      	ldr	r3, [r7, #4]
 801feee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801fef2:	b29b      	uxth	r3, r3
 801fef4:	4413      	add	r3, r2
 801fef6:	b29b      	uxth	r3, r3
 801fef8:	b21a      	sxth	r2, r3
 801fefa:	687b      	ldr	r3, [r7, #4]
 801fefc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801ff00:	687b      	ldr	r3, [r7, #4]
 801ff02:	2200      	movs	r2, #0
 801ff04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801ff08:	4b18      	ldr	r3, [pc, #96]	; (801ff6c <tcp_receive+0x294>)
 801ff0a:	681a      	ldr	r2, [r3, #0]
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	7d1b      	ldrb	r3, [r3, #20]
 801ff14:	2b03      	cmp	r3, #3
 801ff16:	f240 8094 	bls.w	8020042 <tcp_receive+0x36a>
        if (pcb->cwnd < pcb->ssthresh) {
 801ff1a:	687b      	ldr	r3, [r7, #4]
 801ff1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ff20:	687b      	ldr	r3, [r7, #4]
 801ff22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801ff26:	429a      	cmp	r2, r3
 801ff28:	d226      	bcs.n	801ff78 <tcp_receive+0x2a0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ff30:	687b      	ldr	r3, [r7, #4]
 801ff32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ff34:	4413      	add	r3, r2
 801ff36:	b29a      	uxth	r2, r3
 801ff38:	687b      	ldr	r3, [r7, #4]
 801ff3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ff3e:	429a      	cmp	r2, r3
 801ff40:	d97f      	bls.n	8020042 <tcp_receive+0x36a>
            pcb->cwnd += pcb->mss;
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ff4c:	4413      	add	r3, r2
 801ff4e:	b29a      	uxth	r2, r3
 801ff50:	687b      	ldr	r3, [r7, #4]
 801ff52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ff56:	e074      	b.n	8020042 <tcp_receive+0x36a>
 801ff58:	0802842c 	.word	0x0802842c
 801ff5c:	08028650 	.word	0x08028650
 801ff60:	08028470 	.word	0x08028470
 801ff64:	20004120 	.word	0x20004120
 801ff68:	20004114 	.word	0x20004114
 801ff6c:	20004118 	.word	0x20004118
 801ff70:	20004104 	.word	0x20004104
 801ff74:	2000411e 	.word	0x2000411e
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ff82:	4619      	mov	r1, r3
 801ff84:	687b      	ldr	r3, [r7, #4]
 801ff86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ff88:	fb03 f301 	mul.w	r3, r3, r1
 801ff8c:	6879      	ldr	r1, [r7, #4]
 801ff8e:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 801ff92:	fb93 f3f1 	sdiv	r3, r3, r1
 801ff96:	b29b      	uxth	r3, r3
 801ff98:	4413      	add	r3, r2
 801ff9a:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 801ff9c:	687b      	ldr	r3, [r7, #4]
 801ff9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ffa2:	8a7a      	ldrh	r2, [r7, #18]
 801ffa4:	429a      	cmp	r2, r3
 801ffa6:	d94c      	bls.n	8020042 <tcp_receive+0x36a>
            pcb->cwnd = new_cwnd;
 801ffa8:	687b      	ldr	r3, [r7, #4]
 801ffaa:	8a7a      	ldrh	r2, [r7, #18]
 801ffac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 801ffb0:	e047      	b.n	8020042 <tcp_receive+0x36a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 801ffb2:	687b      	ldr	r3, [r7, #4]
 801ffb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ffb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 801ffb8:	687b      	ldr	r3, [r7, #4]
 801ffba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ffbc:	681a      	ldr	r2, [r3, #0]
 801ffbe:	687b      	ldr	r3, [r7, #4]
 801ffc0:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801ffc2:	687b      	ldr	r3, [r7, #4]
 801ffc4:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 801ffc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffca:	685b      	ldr	r3, [r3, #4]
 801ffcc:	4618      	mov	r0, r3
 801ffce:	f7fc fee5 	bl	801cd9c <pbuf_clen>
 801ffd2:	4603      	mov	r3, r0
 801ffd4:	429c      	cmp	r4, r3
 801ffd6:	d206      	bcs.n	801ffe6 <tcp_receive+0x30e>
 801ffd8:	4b70      	ldr	r3, [pc, #448]	; (802019c <tcp_receive+0x4c4>)
 801ffda:	f240 429e 	movw	r2, #1182	; 0x49e
 801ffde:	4970      	ldr	r1, [pc, #448]	; (80201a0 <tcp_receive+0x4c8>)
 801ffe0:	4870      	ldr	r0, [pc, #448]	; (80201a4 <tcp_receive+0x4cc>)
 801ffe2:	f005 fd9d 	bl	8025b20 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 801ffe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffe8:	685b      	ldr	r3, [r3, #4]
 801ffea:	4618      	mov	r0, r3
 801ffec:	f7fc fed6 	bl	801cd9c <pbuf_clen>
 801fff0:	4603      	mov	r3, r0
 801fff2:	461a      	mov	r2, r3
 801fff4:	687b      	ldr	r3, [r7, #4]
 801fff6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801fffa:	1a9b      	subs	r3, r3, r2
 801fffc:	b29a      	uxth	r2, r3
 801fffe:	687b      	ldr	r3, [r7, #4]
 8020000:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8020004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020006:	891a      	ldrh	r2, [r3, #8]
 8020008:	4b67      	ldr	r3, [pc, #412]	; (80201a8 <tcp_receive+0x4d0>)
 802000a:	881b      	ldrh	r3, [r3, #0]
 802000c:	4413      	add	r3, r2
 802000e:	b29a      	uxth	r2, r3
 8020010:	4b65      	ldr	r3, [pc, #404]	; (80201a8 <tcp_receive+0x4d0>)
 8020012:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8020014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020016:	f7fe f942 	bl	801e29e <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 802001a:	687b      	ldr	r3, [r7, #4]
 802001c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8020020:	2b00      	cmp	r3, #0
 8020022:	d00e      	beq.n	8020042 <tcp_receive+0x36a>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8020024:	687b      	ldr	r3, [r7, #4]
 8020026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020028:	2b00      	cmp	r3, #0
 802002a:	d10a      	bne.n	8020042 <tcp_receive+0x36a>
 802002c:	687b      	ldr	r3, [r7, #4]
 802002e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020030:	2b00      	cmp	r3, #0
 8020032:	d106      	bne.n	8020042 <tcp_receive+0x36a>
 8020034:	4b59      	ldr	r3, [pc, #356]	; (802019c <tcp_receive+0x4c4>)
 8020036:	f240 42a7 	movw	r2, #1191	; 0x4a7
 802003a:	495c      	ldr	r1, [pc, #368]	; (80201ac <tcp_receive+0x4d4>)
 802003c:	4859      	ldr	r0, [pc, #356]	; (80201a4 <tcp_receive+0x4cc>)
 802003e:	f005 fd6f 	bl	8025b20 <iprintf>
      while (pcb->unacked != NULL &&
 8020042:	687b      	ldr	r3, [r7, #4]
 8020044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020046:	2b00      	cmp	r3, #0
 8020048:	d022      	beq.n	8020090 <tcp_receive+0x3b8>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 802004a:	687b      	ldr	r3, [r7, #4]
 802004c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802004e:	68db      	ldr	r3, [r3, #12]
 8020050:	685b      	ldr	r3, [r3, #4]
 8020052:	4618      	mov	r0, r3
 8020054:	f7f9 f986 	bl	8019364 <lwip_htonl>
 8020058:	4604      	mov	r4, r0
 802005a:	687b      	ldr	r3, [r7, #4]
 802005c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802005e:	891b      	ldrh	r3, [r3, #8]
 8020060:	461d      	mov	r5, r3
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020066:	68db      	ldr	r3, [r3, #12]
 8020068:	899b      	ldrh	r3, [r3, #12]
 802006a:	b29b      	uxth	r3, r3
 802006c:	4618      	mov	r0, r3
 802006e:	f7f9 f96b 	bl	8019348 <lwip_htons>
 8020072:	4603      	mov	r3, r0
 8020074:	f003 0303 	and.w	r3, r3, #3
 8020078:	2b00      	cmp	r3, #0
 802007a:	d001      	beq.n	8020080 <tcp_receive+0x3a8>
 802007c:	2301      	movs	r3, #1
 802007e:	e000      	b.n	8020082 <tcp_receive+0x3aa>
 8020080:	2300      	movs	r3, #0
 8020082:	442b      	add	r3, r5
 8020084:	18e2      	adds	r2, r4, r3
 8020086:	4b4a      	ldr	r3, [pc, #296]	; (80201b0 <tcp_receive+0x4d8>)
 8020088:	681b      	ldr	r3, [r3, #0]
 802008a:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 802008c:	2b00      	cmp	r3, #0
 802008e:	dd90      	ble.n	801ffb2 <tcp_receive+0x2da>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8020090:	687b      	ldr	r3, [r7, #4]
 8020092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020094:	2b00      	cmp	r3, #0
 8020096:	d104      	bne.n	80200a2 <tcp_receive+0x3ca>
        pcb->rtime = -1;
 8020098:	687b      	ldr	r3, [r7, #4]
 802009a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802009e:	861a      	strh	r2, [r3, #48]	; 0x30
 80200a0:	e002      	b.n	80200a8 <tcp_receive+0x3d0>
      } else {
        pcb->rtime = 0;
 80200a2:	687b      	ldr	r3, [r7, #4]
 80200a4:	2200      	movs	r2, #0
 80200a6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80200a8:	687b      	ldr	r3, [r7, #4]
 80200aa:	2200      	movs	r2, #0
 80200ac:	76da      	strb	r2, [r3, #27]
 80200ae:	e002      	b.n	80200b6 <tcp_receive+0x3de>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80200b0:	6878      	ldr	r0, [r7, #4]
 80200b2:	f001 fd31 	bl	8021b18 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80200b6:	e04f      	b.n	8020158 <tcp_receive+0x480>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80200b8:	687b      	ldr	r3, [r7, #4]
 80200ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80200bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 80200be:	687b      	ldr	r3, [r7, #4]
 80200c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80200c2:	681a      	ldr	r2, [r3, #0]
 80200c4:	687b      	ldr	r3, [r7, #4]
 80200c6:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	d103      	bne.n	80200d8 <tcp_receive+0x400>
        pcb->unsent_oversize = 0;
 80200d0:	687b      	ldr	r3, [r7, #4]
 80200d2:	2200      	movs	r2, #0
 80200d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80200de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80200e0:	685b      	ldr	r3, [r3, #4]
 80200e2:	4618      	mov	r0, r3
 80200e4:	f7fc fe5a 	bl	801cd9c <pbuf_clen>
 80200e8:	4603      	mov	r3, r0
 80200ea:	429c      	cmp	r4, r3
 80200ec:	d206      	bcs.n	80200fc <tcp_receive+0x424>
 80200ee:	4b2b      	ldr	r3, [pc, #172]	; (802019c <tcp_receive+0x4c4>)
 80200f0:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80200f4:	492a      	ldr	r1, [pc, #168]	; (80201a0 <tcp_receive+0x4c8>)
 80200f6:	482b      	ldr	r0, [pc, #172]	; (80201a4 <tcp_receive+0x4cc>)
 80200f8:	f005 fd12 	bl	8025b20 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80200fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80200fe:	685b      	ldr	r3, [r3, #4]
 8020100:	4618      	mov	r0, r3
 8020102:	f7fc fe4b 	bl	801cd9c <pbuf_clen>
 8020106:	4603      	mov	r3, r0
 8020108:	461a      	mov	r2, r3
 802010a:	687b      	ldr	r3, [r7, #4]
 802010c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8020110:	1a9b      	subs	r3, r3, r2
 8020112:	b29a      	uxth	r2, r3
 8020114:	687b      	ldr	r3, [r7, #4]
 8020116:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 802011a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802011c:	891a      	ldrh	r2, [r3, #8]
 802011e:	4b22      	ldr	r3, [pc, #136]	; (80201a8 <tcp_receive+0x4d0>)
 8020120:	881b      	ldrh	r3, [r3, #0]
 8020122:	4413      	add	r3, r2
 8020124:	b29a      	uxth	r2, r3
 8020126:	4b20      	ldr	r3, [pc, #128]	; (80201a8 <tcp_receive+0x4d0>)
 8020128:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 802012a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802012c:	f7fe f8b7 	bl	801e29e <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8020130:	687b      	ldr	r3, [r7, #4]
 8020132:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8020136:	2b00      	cmp	r3, #0
 8020138:	d00e      	beq.n	8020158 <tcp_receive+0x480>
        LWIP_ASSERT("tcp_receive: valid queue length",
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802013e:	2b00      	cmp	r3, #0
 8020140:	d10a      	bne.n	8020158 <tcp_receive+0x480>
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020146:	2b00      	cmp	r3, #0
 8020148:	d106      	bne.n	8020158 <tcp_receive+0x480>
 802014a:	4b14      	ldr	r3, [pc, #80]	; (802019c <tcp_receive+0x4c4>)
 802014c:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8020150:	4916      	ldr	r1, [pc, #88]	; (80201ac <tcp_receive+0x4d4>)
 8020152:	4814      	ldr	r0, [pc, #80]	; (80201a4 <tcp_receive+0x4cc>)
 8020154:	f005 fce4 	bl	8025b20 <iprintf>
    while (pcb->unsent != NULL &&
 8020158:	687b      	ldr	r3, [r7, #4]
 802015a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802015c:	2b00      	cmp	r3, #0
 802015e:	d037      	beq.n	80201d0 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8020160:	4b13      	ldr	r3, [pc, #76]	; (80201b0 <tcp_receive+0x4d8>)
 8020162:	681c      	ldr	r4, [r3, #0]
 8020164:	687b      	ldr	r3, [r7, #4]
 8020166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020168:	68db      	ldr	r3, [r3, #12]
 802016a:	685b      	ldr	r3, [r3, #4]
 802016c:	4618      	mov	r0, r3
 802016e:	f7f9 f8f9 	bl	8019364 <lwip_htonl>
 8020172:	4605      	mov	r5, r0
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020178:	891b      	ldrh	r3, [r3, #8]
 802017a:	461e      	mov	r6, r3
 802017c:	687b      	ldr	r3, [r7, #4]
 802017e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020180:	68db      	ldr	r3, [r3, #12]
 8020182:	899b      	ldrh	r3, [r3, #12]
 8020184:	b29b      	uxth	r3, r3
 8020186:	4618      	mov	r0, r3
 8020188:	f7f9 f8de 	bl	8019348 <lwip_htons>
 802018c:	4603      	mov	r3, r0
 802018e:	f003 0303 	and.w	r3, r3, #3
 8020192:	2b00      	cmp	r3, #0
 8020194:	d00e      	beq.n	80201b4 <tcp_receive+0x4dc>
 8020196:	2301      	movs	r3, #1
 8020198:	e00d      	b.n	80201b6 <tcp_receive+0x4de>
 802019a:	bf00      	nop
 802019c:	0802842c 	.word	0x0802842c
 80201a0:	0802866c 	.word	0x0802866c
 80201a4:	08028470 	.word	0x08028470
 80201a8:	2000411c 	.word	0x2000411c
 80201ac:	08028694 	.word	0x08028694
 80201b0:	20004118 	.word	0x20004118
 80201b4:	2300      	movs	r3, #0
 80201b6:	4433      	add	r3, r6
 80201b8:	442b      	add	r3, r5
 80201ba:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 80201bc:	2b00      	cmp	r3, #0
 80201be:	db07      	blt.n	80201d0 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80201c0:	4b8d      	ldr	r3, [pc, #564]	; (80203f8 <tcp_receive+0x720>)
 80201c2:	681a      	ldr	r2, [r3, #0]
 80201c4:	687b      	ldr	r3, [r7, #4]
 80201c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80201c8:	1ad3      	subs	r3, r2, r3
 80201ca:	2b00      	cmp	r3, #0
 80201cc:	f77f af74 	ble.w	80200b8 <tcp_receive+0x3e0>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80201d6:	4b89      	ldr	r3, [pc, #548]	; (80203fc <tcp_receive+0x724>)
 80201d8:	881b      	ldrh	r3, [r3, #0]
 80201da:	4413      	add	r3, r2
 80201dc:	b29a      	uxth	r2, r3
 80201de:	687b      	ldr	r3, [r7, #4]
 80201e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	d052      	beq.n	8020292 <tcp_receive+0x5ba>
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80201f0:	4b81      	ldr	r3, [pc, #516]	; (80203f8 <tcp_receive+0x720>)
 80201f2:	681b      	ldr	r3, [r3, #0]
 80201f4:	1ad3      	subs	r3, r2, r3
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	da4b      	bge.n	8020292 <tcp_receive+0x5ba>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80201fa:	4b81      	ldr	r3, [pc, #516]	; (8020400 <tcp_receive+0x728>)
 80201fc:	681b      	ldr	r3, [r3, #0]
 80201fe:	b29a      	uxth	r2, r3
 8020200:	687b      	ldr	r3, [r7, #4]
 8020202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020204:	b29b      	uxth	r3, r3
 8020206:	1ad3      	subs	r3, r2, r3
 8020208:	b29b      	uxth	r3, r3
 802020a:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 802020c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802020e:	687b      	ldr	r3, [r7, #4]
 8020210:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8020214:	10db      	asrs	r3, r3, #3
 8020216:	b21b      	sxth	r3, r3
 8020218:	b29b      	uxth	r3, r3
 802021a:	1ad3      	subs	r3, r2, r3
 802021c:	b29b      	uxth	r3, r3
 802021e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8020220:	687b      	ldr	r3, [r7, #4]
 8020222:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8020226:	b29a      	uxth	r2, r3
 8020228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802022a:	4413      	add	r3, r2
 802022c:	b29b      	uxth	r3, r3
 802022e:	b21a      	sxth	r2, r3
 8020230:	687b      	ldr	r3, [r7, #4]
 8020232:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8020234:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020238:	2b00      	cmp	r3, #0
 802023a:	da03      	bge.n	8020244 <tcp_receive+0x56c>
        m = -m;
 802023c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802023e:	425b      	negs	r3, r3
 8020240:	b29b      	uxth	r3, r3
 8020242:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8020244:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8020246:	687b      	ldr	r3, [r7, #4]
 8020248:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802024c:	109b      	asrs	r3, r3, #2
 802024e:	b21b      	sxth	r3, r3
 8020250:	b29b      	uxth	r3, r3
 8020252:	1ad3      	subs	r3, r2, r3
 8020254:	b29b      	uxth	r3, r3
 8020256:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802025e:	b29a      	uxth	r2, r3
 8020260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020262:	4413      	add	r3, r2
 8020264:	b29b      	uxth	r3, r3
 8020266:	b21a      	sxth	r2, r3
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 802026c:	687b      	ldr	r3, [r7, #4]
 802026e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8020272:	10db      	asrs	r3, r3, #3
 8020274:	b21b      	sxth	r3, r3
 8020276:	b29a      	uxth	r2, r3
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802027e:	b29b      	uxth	r3, r3
 8020280:	4413      	add	r3, r2
 8020282:	b29b      	uxth	r3, r3
 8020284:	b21a      	sxth	r2, r3
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 802028c:	687b      	ldr	r3, [r7, #4]
 802028e:	2200      	movs	r2, #0
 8020290:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8020292:	4b5c      	ldr	r3, [pc, #368]	; (8020404 <tcp_receive+0x72c>)
 8020294:	881b      	ldrh	r3, [r3, #0]
 8020296:	2b00      	cmp	r3, #0
 8020298:	f000 84ee 	beq.w	8020c78 <tcp_receive+0xfa0>
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	7d1b      	ldrb	r3, [r3, #20]
 80202a0:	2b06      	cmp	r3, #6
 80202a2:	f200 84e9 	bhi.w	8020c78 <tcp_receive+0xfa0>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80202a6:	687b      	ldr	r3, [r7, #4]
 80202a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80202aa:	4b57      	ldr	r3, [pc, #348]	; (8020408 <tcp_receive+0x730>)
 80202ac:	681b      	ldr	r3, [r3, #0]
 80202ae:	1ad3      	subs	r3, r2, r3
 80202b0:	3b01      	subs	r3, #1
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	f2c0 80b8 	blt.w	8020428 <tcp_receive+0x750>
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80202bc:	4b51      	ldr	r3, [pc, #324]	; (8020404 <tcp_receive+0x72c>)
 80202be:	881b      	ldrh	r3, [r3, #0]
 80202c0:	4619      	mov	r1, r3
 80202c2:	4b51      	ldr	r3, [pc, #324]	; (8020408 <tcp_receive+0x730>)
 80202c4:	681b      	ldr	r3, [r3, #0]
 80202c6:	440b      	add	r3, r1
 80202c8:	1ad3      	subs	r3, r2, r3
 80202ca:	3301      	adds	r3, #1
 80202cc:	2b00      	cmp	r3, #0
 80202ce:	f300 80ab 	bgt.w	8020428 <tcp_receive+0x750>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80202d2:	4b4e      	ldr	r3, [pc, #312]	; (802040c <tcp_receive+0x734>)
 80202d4:	685b      	ldr	r3, [r3, #4]
 80202d6:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80202d8:	687b      	ldr	r3, [r7, #4]
 80202da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80202dc:	4b4a      	ldr	r3, [pc, #296]	; (8020408 <tcp_receive+0x730>)
 80202de:	681b      	ldr	r3, [r3, #0]
 80202e0:	1ad3      	subs	r3, r2, r3
 80202e2:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80202e4:	4b49      	ldr	r3, [pc, #292]	; (802040c <tcp_receive+0x734>)
 80202e6:	685b      	ldr	r3, [r3, #4]
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	d106      	bne.n	80202fa <tcp_receive+0x622>
 80202ec:	4b48      	ldr	r3, [pc, #288]	; (8020410 <tcp_receive+0x738>)
 80202ee:	f240 523c 	movw	r2, #1340	; 0x53c
 80202f2:	4948      	ldr	r1, [pc, #288]	; (8020414 <tcp_receive+0x73c>)
 80202f4:	4848      	ldr	r0, [pc, #288]	; (8020418 <tcp_receive+0x740>)
 80202f6:	f005 fc13 	bl	8025b20 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80202fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80202fc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8020300:	4293      	cmp	r3, r2
 8020302:	dd06      	ble.n	8020312 <tcp_receive+0x63a>
 8020304:	4b42      	ldr	r3, [pc, #264]	; (8020410 <tcp_receive+0x738>)
 8020306:	f240 523d 	movw	r2, #1341	; 0x53d
 802030a:	4944      	ldr	r1, [pc, #272]	; (802041c <tcp_receive+0x744>)
 802030c:	4842      	ldr	r0, [pc, #264]	; (8020418 <tcp_receive+0x740>)
 802030e:	f005 fc07 	bl	8025b20 <iprintf>
      if (inseg.p->len < off) {
 8020312:	4b3e      	ldr	r3, [pc, #248]	; (802040c <tcp_receive+0x734>)
 8020314:	685b      	ldr	r3, [r3, #4]
 8020316:	895b      	ldrh	r3, [r3, #10]
 8020318:	461a      	mov	r2, r3
 802031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802031c:	429a      	cmp	r2, r3
 802031e:	da3e      	bge.n	802039e <tcp_receive+0x6c6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8020320:	4b3a      	ldr	r3, [pc, #232]	; (802040c <tcp_receive+0x734>)
 8020322:	685b      	ldr	r3, [r3, #4]
 8020324:	891b      	ldrh	r3, [r3, #8]
 8020326:	461a      	mov	r2, r3
 8020328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802032a:	429a      	cmp	r2, r3
 802032c:	da06      	bge.n	802033c <tcp_receive+0x664>
 802032e:	4b38      	ldr	r3, [pc, #224]	; (8020410 <tcp_receive+0x738>)
 8020330:	f240 523f 	movw	r2, #1343	; 0x53f
 8020334:	493a      	ldr	r1, [pc, #232]	; (8020420 <tcp_receive+0x748>)
 8020336:	4838      	ldr	r0, [pc, #224]	; (8020418 <tcp_receive+0x740>)
 8020338:	f005 fbf2 	bl	8025b20 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 802033c:	4b33      	ldr	r3, [pc, #204]	; (802040c <tcp_receive+0x734>)
 802033e:	685b      	ldr	r3, [r3, #4]
 8020340:	891a      	ldrh	r2, [r3, #8]
 8020342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020344:	b29b      	uxth	r3, r3
 8020346:	1ad3      	subs	r3, r2, r3
 8020348:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 802034a:	e00e      	b.n	802036a <tcp_receive+0x692>
          off -= p->len;
 802034c:	69bb      	ldr	r3, [r7, #24]
 802034e:	895b      	ldrh	r3, [r3, #10]
 8020350:	461a      	mov	r2, r3
 8020352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020354:	1a9b      	subs	r3, r3, r2
 8020356:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8020358:	69bb      	ldr	r3, [r7, #24]
 802035a:	8a3a      	ldrh	r2, [r7, #16]
 802035c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 802035e:	69bb      	ldr	r3, [r7, #24]
 8020360:	2200      	movs	r2, #0
 8020362:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8020364:	69bb      	ldr	r3, [r7, #24]
 8020366:	681b      	ldr	r3, [r3, #0]
 8020368:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 802036a:	69bb      	ldr	r3, [r7, #24]
 802036c:	895b      	ldrh	r3, [r3, #10]
 802036e:	461a      	mov	r2, r3
 8020370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020372:	429a      	cmp	r2, r3
 8020374:	dbea      	blt.n	802034c <tcp_receive+0x674>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8020376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020378:	b29b      	uxth	r3, r3
 802037a:	425b      	negs	r3, r3
 802037c:	b29b      	uxth	r3, r3
 802037e:	b21b      	sxth	r3, r3
 8020380:	4619      	mov	r1, r3
 8020382:	69b8      	ldr	r0, [r7, #24]
 8020384:	f7fc fc4c 	bl	801cc20 <pbuf_header>
 8020388:	4603      	mov	r3, r0
 802038a:	2b00      	cmp	r3, #0
 802038c:	d01c      	beq.n	80203c8 <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 802038e:	4b20      	ldr	r3, [pc, #128]	; (8020410 <tcp_receive+0x738>)
 8020390:	f240 524c 	movw	r2, #1356	; 0x54c
 8020394:	4923      	ldr	r1, [pc, #140]	; (8020424 <tcp_receive+0x74c>)
 8020396:	4820      	ldr	r0, [pc, #128]	; (8020418 <tcp_receive+0x740>)
 8020398:	f005 fbc2 	bl	8025b20 <iprintf>
 802039c:	e014      	b.n	80203c8 <tcp_receive+0x6f0>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 802039e:	4b1b      	ldr	r3, [pc, #108]	; (802040c <tcp_receive+0x734>)
 80203a0:	685b      	ldr	r3, [r3, #4]
 80203a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80203a4:	b292      	uxth	r2, r2
 80203a6:	4252      	negs	r2, r2
 80203a8:	b292      	uxth	r2, r2
 80203aa:	b212      	sxth	r2, r2
 80203ac:	4611      	mov	r1, r2
 80203ae:	4618      	mov	r0, r3
 80203b0:	f7fc fc36 	bl	801cc20 <pbuf_header>
 80203b4:	4603      	mov	r3, r0
 80203b6:	2b00      	cmp	r3, #0
 80203b8:	d006      	beq.n	80203c8 <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80203ba:	4b15      	ldr	r3, [pc, #84]	; (8020410 <tcp_receive+0x738>)
 80203bc:	f240 5251 	movw	r2, #1361	; 0x551
 80203c0:	4918      	ldr	r1, [pc, #96]	; (8020424 <tcp_receive+0x74c>)
 80203c2:	4815      	ldr	r0, [pc, #84]	; (8020418 <tcp_receive+0x740>)
 80203c4:	f005 fbac 	bl	8025b20 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80203c8:	4b10      	ldr	r3, [pc, #64]	; (802040c <tcp_receive+0x734>)
 80203ca:	891a      	ldrh	r2, [r3, #8]
 80203cc:	4b0e      	ldr	r3, [pc, #56]	; (8020408 <tcp_receive+0x730>)
 80203ce:	681b      	ldr	r3, [r3, #0]
 80203d0:	b299      	uxth	r1, r3
 80203d2:	687b      	ldr	r3, [r7, #4]
 80203d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80203d6:	b29b      	uxth	r3, r3
 80203d8:	1acb      	subs	r3, r1, r3
 80203da:	b29b      	uxth	r3, r3
 80203dc:	4413      	add	r3, r2
 80203de:	b29a      	uxth	r2, r3
 80203e0:	4b0a      	ldr	r3, [pc, #40]	; (802040c <tcp_receive+0x734>)
 80203e2:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80203e4:	4b09      	ldr	r3, [pc, #36]	; (802040c <tcp_receive+0x734>)
 80203e6:	68db      	ldr	r3, [r3, #12]
 80203e8:	687a      	ldr	r2, [r7, #4]
 80203ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80203ec:	4906      	ldr	r1, [pc, #24]	; (8020408 <tcp_receive+0x730>)
 80203ee:	600a      	str	r2, [r1, #0]
 80203f0:	4a05      	ldr	r2, [pc, #20]	; (8020408 <tcp_receive+0x730>)
 80203f2:	6812      	ldr	r2, [r2, #0]
 80203f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80203f6:	e025      	b.n	8020444 <tcp_receive+0x76c>
 80203f8:	20004118 	.word	0x20004118
 80203fc:	2000411c 	.word	0x2000411c
 8020400:	20008c34 	.word	0x20008c34
 8020404:	2000411e 	.word	0x2000411e
 8020408:	20004114 	.word	0x20004114
 802040c:	200040f4 	.word	0x200040f4
 8020410:	0802842c 	.word	0x0802842c
 8020414:	080286b4 	.word	0x080286b4
 8020418:	08028470 	.word	0x08028470
 802041c:	080286c4 	.word	0x080286c4
 8020420:	080286d4 	.word	0x080286d4
 8020424:	080286e4 	.word	0x080286e4
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8020428:	4b86      	ldr	r3, [pc, #536]	; (8020644 <tcp_receive+0x96c>)
 802042a:	681a      	ldr	r2, [r3, #0]
 802042c:	687b      	ldr	r3, [r7, #4]
 802042e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020430:	1ad3      	subs	r3, r2, r3
 8020432:	2b00      	cmp	r3, #0
 8020434:	da06      	bge.n	8020444 <tcp_receive+0x76c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8020436:	687b      	ldr	r3, [r7, #4]
 8020438:	7e9b      	ldrb	r3, [r3, #26]
 802043a:	f043 0302 	orr.w	r3, r3, #2
 802043e:	b2da      	uxtb	r2, r3
 8020440:	687b      	ldr	r3, [r7, #4]
 8020442:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8020444:	4b7f      	ldr	r3, [pc, #508]	; (8020644 <tcp_receive+0x96c>)
 8020446:	681a      	ldr	r2, [r3, #0]
 8020448:	687b      	ldr	r3, [r7, #4]
 802044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802044c:	1ad3      	subs	r3, r2, r3
 802044e:	2b00      	cmp	r3, #0
 8020450:	f2c0 840d 	blt.w	8020c6e <tcp_receive+0xf96>
 8020454:	4b7b      	ldr	r3, [pc, #492]	; (8020644 <tcp_receive+0x96c>)
 8020456:	681a      	ldr	r2, [r3, #0]
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802045c:	6879      	ldr	r1, [r7, #4]
 802045e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020460:	440b      	add	r3, r1
 8020462:	1ad3      	subs	r3, r2, r3
 8020464:	3301      	adds	r3, #1
 8020466:	2b00      	cmp	r3, #0
 8020468:	f300 8401 	bgt.w	8020c6e <tcp_receive+0xf96>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 802046c:	687b      	ldr	r3, [r7, #4]
 802046e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020470:	4b74      	ldr	r3, [pc, #464]	; (8020644 <tcp_receive+0x96c>)
 8020472:	681b      	ldr	r3, [r3, #0]
 8020474:	429a      	cmp	r2, r3
 8020476:	f040 8285 	bne.w	8020984 <tcp_receive+0xcac>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 802047a:	4b73      	ldr	r3, [pc, #460]	; (8020648 <tcp_receive+0x970>)
 802047c:	891c      	ldrh	r4, [r3, #8]
 802047e:	4b72      	ldr	r3, [pc, #456]	; (8020648 <tcp_receive+0x970>)
 8020480:	68db      	ldr	r3, [r3, #12]
 8020482:	899b      	ldrh	r3, [r3, #12]
 8020484:	b29b      	uxth	r3, r3
 8020486:	4618      	mov	r0, r3
 8020488:	f7f8 ff5e 	bl	8019348 <lwip_htons>
 802048c:	4603      	mov	r3, r0
 802048e:	f003 0303 	and.w	r3, r3, #3
 8020492:	2b00      	cmp	r3, #0
 8020494:	d001      	beq.n	802049a <tcp_receive+0x7c2>
 8020496:	2301      	movs	r3, #1
 8020498:	e000      	b.n	802049c <tcp_receive+0x7c4>
 802049a:	2300      	movs	r3, #0
 802049c:	4423      	add	r3, r4
 802049e:	b29a      	uxth	r2, r3
 80204a0:	4b6a      	ldr	r3, [pc, #424]	; (802064c <tcp_receive+0x974>)
 80204a2:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80204a4:	687b      	ldr	r3, [r7, #4]
 80204a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80204a8:	4b68      	ldr	r3, [pc, #416]	; (802064c <tcp_receive+0x974>)
 80204aa:	881b      	ldrh	r3, [r3, #0]
 80204ac:	429a      	cmp	r2, r3
 80204ae:	d26d      	bcs.n	802058c <tcp_receive+0x8b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80204b0:	4b65      	ldr	r3, [pc, #404]	; (8020648 <tcp_receive+0x970>)
 80204b2:	68db      	ldr	r3, [r3, #12]
 80204b4:	899b      	ldrh	r3, [r3, #12]
 80204b6:	b29b      	uxth	r3, r3
 80204b8:	4618      	mov	r0, r3
 80204ba:	f7f8 ff45 	bl	8019348 <lwip_htons>
 80204be:	4603      	mov	r3, r0
 80204c0:	f003 0301 	and.w	r3, r3, #1
 80204c4:	2b00      	cmp	r3, #0
 80204c6:	d01a      	beq.n	80204fe <tcp_receive+0x826>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80204c8:	4b5f      	ldr	r3, [pc, #380]	; (8020648 <tcp_receive+0x970>)
 80204ca:	68dc      	ldr	r4, [r3, #12]
 80204cc:	4b5e      	ldr	r3, [pc, #376]	; (8020648 <tcp_receive+0x970>)
 80204ce:	68db      	ldr	r3, [r3, #12]
 80204d0:	899b      	ldrh	r3, [r3, #12]
 80204d2:	b29b      	uxth	r3, r3
 80204d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80204d8:	b29d      	uxth	r5, r3
 80204da:	4b5b      	ldr	r3, [pc, #364]	; (8020648 <tcp_receive+0x970>)
 80204dc:	68db      	ldr	r3, [r3, #12]
 80204de:	899b      	ldrh	r3, [r3, #12]
 80204e0:	b29b      	uxth	r3, r3
 80204e2:	4618      	mov	r0, r3
 80204e4:	f7f8 ff30 	bl	8019348 <lwip_htons>
 80204e8:	4603      	mov	r3, r0
 80204ea:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80204ee:	b29b      	uxth	r3, r3
 80204f0:	4618      	mov	r0, r3
 80204f2:	f7f8 ff29 	bl	8019348 <lwip_htons>
 80204f6:	4603      	mov	r3, r0
 80204f8:	432b      	orrs	r3, r5
 80204fa:	b29b      	uxth	r3, r3
 80204fc:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020502:	4b51      	ldr	r3, [pc, #324]	; (8020648 <tcp_receive+0x970>)
 8020504:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8020506:	4b50      	ldr	r3, [pc, #320]	; (8020648 <tcp_receive+0x970>)
 8020508:	68db      	ldr	r3, [r3, #12]
 802050a:	899b      	ldrh	r3, [r3, #12]
 802050c:	b29b      	uxth	r3, r3
 802050e:	4618      	mov	r0, r3
 8020510:	f7f8 ff1a 	bl	8019348 <lwip_htons>
 8020514:	4603      	mov	r3, r0
 8020516:	f003 0302 	and.w	r3, r3, #2
 802051a:	2b00      	cmp	r3, #0
 802051c:	d005      	beq.n	802052a <tcp_receive+0x852>
            inseg.len -= 1;
 802051e:	4b4a      	ldr	r3, [pc, #296]	; (8020648 <tcp_receive+0x970>)
 8020520:	891b      	ldrh	r3, [r3, #8]
 8020522:	3b01      	subs	r3, #1
 8020524:	b29a      	uxth	r2, r3
 8020526:	4b48      	ldr	r3, [pc, #288]	; (8020648 <tcp_receive+0x970>)
 8020528:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 802052a:	4b47      	ldr	r3, [pc, #284]	; (8020648 <tcp_receive+0x970>)
 802052c:	685a      	ldr	r2, [r3, #4]
 802052e:	4b46      	ldr	r3, [pc, #280]	; (8020648 <tcp_receive+0x970>)
 8020530:	891b      	ldrh	r3, [r3, #8]
 8020532:	4619      	mov	r1, r3
 8020534:	4610      	mov	r0, r2
 8020536:	f7fc fa23 	bl	801c980 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 802053a:	4b43      	ldr	r3, [pc, #268]	; (8020648 <tcp_receive+0x970>)
 802053c:	891c      	ldrh	r4, [r3, #8]
 802053e:	4b42      	ldr	r3, [pc, #264]	; (8020648 <tcp_receive+0x970>)
 8020540:	68db      	ldr	r3, [r3, #12]
 8020542:	899b      	ldrh	r3, [r3, #12]
 8020544:	b29b      	uxth	r3, r3
 8020546:	4618      	mov	r0, r3
 8020548:	f7f8 fefe 	bl	8019348 <lwip_htons>
 802054c:	4603      	mov	r3, r0
 802054e:	f003 0303 	and.w	r3, r3, #3
 8020552:	2b00      	cmp	r3, #0
 8020554:	d001      	beq.n	802055a <tcp_receive+0x882>
 8020556:	2301      	movs	r3, #1
 8020558:	e000      	b.n	802055c <tcp_receive+0x884>
 802055a:	2300      	movs	r3, #0
 802055c:	4423      	add	r3, r4
 802055e:	b29a      	uxth	r2, r3
 8020560:	4b3a      	ldr	r3, [pc, #232]	; (802064c <tcp_receive+0x974>)
 8020562:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8020564:	4b39      	ldr	r3, [pc, #228]	; (802064c <tcp_receive+0x974>)
 8020566:	881b      	ldrh	r3, [r3, #0]
 8020568:	461a      	mov	r2, r3
 802056a:	4b36      	ldr	r3, [pc, #216]	; (8020644 <tcp_receive+0x96c>)
 802056c:	681b      	ldr	r3, [r3, #0]
 802056e:	441a      	add	r2, r3
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020574:	6879      	ldr	r1, [r7, #4]
 8020576:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020578:	440b      	add	r3, r1
 802057a:	429a      	cmp	r2, r3
 802057c:	d006      	beq.n	802058c <tcp_receive+0x8b4>
 802057e:	4b34      	ldr	r3, [pc, #208]	; (8020650 <tcp_receive+0x978>)
 8020580:	f240 527f 	movw	r2, #1407	; 0x57f
 8020584:	4933      	ldr	r1, [pc, #204]	; (8020654 <tcp_receive+0x97c>)
 8020586:	4834      	ldr	r0, [pc, #208]	; (8020658 <tcp_receive+0x980>)
 8020588:	f005 faca 	bl	8025b20 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 802058c:	687b      	ldr	r3, [r7, #4]
 802058e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020590:	2b00      	cmp	r3, #0
 8020592:	f000 80e0 	beq.w	8020756 <tcp_receive+0xa7e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8020596:	4b2c      	ldr	r3, [pc, #176]	; (8020648 <tcp_receive+0x970>)
 8020598:	68db      	ldr	r3, [r3, #12]
 802059a:	899b      	ldrh	r3, [r3, #12]
 802059c:	b29b      	uxth	r3, r3
 802059e:	4618      	mov	r0, r3
 80205a0:	f7f8 fed2 	bl	8019348 <lwip_htons>
 80205a4:	4603      	mov	r3, r0
 80205a6:	f003 0301 	and.w	r3, r3, #1
 80205aa:	2b00      	cmp	r3, #0
 80205ac:	d010      	beq.n	80205d0 <tcp_receive+0x8f8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80205ae:	e00a      	b.n	80205c6 <tcp_receive+0x8ee>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80205b0:	687b      	ldr	r3, [r7, #4]
 80205b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205b4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80205b6:	687b      	ldr	r3, [r7, #4]
 80205b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205ba:	681a      	ldr	r2, [r3, #0]
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80205c0:	68f8      	ldr	r0, [r7, #12]
 80205c2:	f7fd fe6c 	bl	801e29e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205ca:	2b00      	cmp	r3, #0
 80205cc:	d1f0      	bne.n	80205b0 <tcp_receive+0x8d8>
 80205ce:	e0c2      	b.n	8020756 <tcp_receive+0xa7e>
            }
          } else {
            next = pcb->ooseq;
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80205d6:	e04e      	b.n	8020676 <tcp_receive+0x99e>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80205d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205da:	68db      	ldr	r3, [r3, #12]
 80205dc:	899b      	ldrh	r3, [r3, #12]
 80205de:	b29b      	uxth	r3, r3
 80205e0:	4618      	mov	r0, r3
 80205e2:	f7f8 feb1 	bl	8019348 <lwip_htons>
 80205e6:	4603      	mov	r3, r0
 80205e8:	f003 0301 	and.w	r3, r3, #1
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	d03a      	beq.n	8020666 <tcp_receive+0x98e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80205f0:	4b15      	ldr	r3, [pc, #84]	; (8020648 <tcp_receive+0x970>)
 80205f2:	68db      	ldr	r3, [r3, #12]
 80205f4:	899b      	ldrh	r3, [r3, #12]
 80205f6:	b29b      	uxth	r3, r3
 80205f8:	4618      	mov	r0, r3
 80205fa:	f7f8 fea5 	bl	8019348 <lwip_htons>
 80205fe:	4603      	mov	r3, r0
 8020600:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8020604:	2b00      	cmp	r3, #0
 8020606:	d12e      	bne.n	8020666 <tcp_receive+0x98e>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8020608:	4b0f      	ldr	r3, [pc, #60]	; (8020648 <tcp_receive+0x970>)
 802060a:	68dc      	ldr	r4, [r3, #12]
 802060c:	4b0e      	ldr	r3, [pc, #56]	; (8020648 <tcp_receive+0x970>)
 802060e:	68db      	ldr	r3, [r3, #12]
 8020610:	899b      	ldrh	r3, [r3, #12]
 8020612:	b29d      	uxth	r5, r3
 8020614:	2001      	movs	r0, #1
 8020616:	f7f8 fe97 	bl	8019348 <lwip_htons>
 802061a:	4603      	mov	r3, r0
 802061c:	432b      	orrs	r3, r5
 802061e:	b29b      	uxth	r3, r3
 8020620:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8020622:	4b09      	ldr	r3, [pc, #36]	; (8020648 <tcp_receive+0x970>)
 8020624:	891c      	ldrh	r4, [r3, #8]
 8020626:	4b08      	ldr	r3, [pc, #32]	; (8020648 <tcp_receive+0x970>)
 8020628:	68db      	ldr	r3, [r3, #12]
 802062a:	899b      	ldrh	r3, [r3, #12]
 802062c:	b29b      	uxth	r3, r3
 802062e:	4618      	mov	r0, r3
 8020630:	f7f8 fe8a 	bl	8019348 <lwip_htons>
 8020634:	4603      	mov	r3, r0
 8020636:	f003 0303 	and.w	r3, r3, #3
 802063a:	2b00      	cmp	r3, #0
 802063c:	d00e      	beq.n	802065c <tcp_receive+0x984>
 802063e:	2301      	movs	r3, #1
 8020640:	e00d      	b.n	802065e <tcp_receive+0x986>
 8020642:	bf00      	nop
 8020644:	20004114 	.word	0x20004114
 8020648:	200040f4 	.word	0x200040f4
 802064c:	2000411e 	.word	0x2000411e
 8020650:	0802842c 	.word	0x0802842c
 8020654:	080286f8 	.word	0x080286f8
 8020658:	08028470 	.word	0x08028470
 802065c:	2300      	movs	r3, #0
 802065e:	4423      	add	r3, r4
 8020660:	b29a      	uxth	r2, r3
 8020662:	4b95      	ldr	r3, [pc, #596]	; (80208b8 <tcp_receive+0xbe0>)
 8020664:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8020666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020668:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 802066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802066c:	681b      	ldr	r3, [r3, #0]
 802066e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8020670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020672:	f7fd fe14 	bl	801e29e <tcp_seg_free>
            while (next &&
 8020676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020678:	2b00      	cmp	r3, #0
 802067a:	d00e      	beq.n	802069a <tcp_receive+0x9c2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 802067c:	4b8e      	ldr	r3, [pc, #568]	; (80208b8 <tcp_receive+0xbe0>)
 802067e:	881b      	ldrh	r3, [r3, #0]
 8020680:	461a      	mov	r2, r3
 8020682:	4b8e      	ldr	r3, [pc, #568]	; (80208bc <tcp_receive+0xbe4>)
 8020684:	681b      	ldr	r3, [r3, #0]
 8020686:	441a      	add	r2, r3
 8020688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802068a:	68db      	ldr	r3, [r3, #12]
 802068c:	685b      	ldr	r3, [r3, #4]
 802068e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020690:	8909      	ldrh	r1, [r1, #8]
 8020692:	440b      	add	r3, r1
 8020694:	1ad3      	subs	r3, r2, r3
            while (next &&
 8020696:	2b00      	cmp	r3, #0
 8020698:	da9e      	bge.n	80205d8 <tcp_receive+0x900>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 802069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802069c:	2b00      	cmp	r3, #0
 802069e:	d057      	beq.n	8020750 <tcp_receive+0xa78>
                TCP_SEQ_GT(seqno + tcplen,
 80206a0:	4b85      	ldr	r3, [pc, #532]	; (80208b8 <tcp_receive+0xbe0>)
 80206a2:	881b      	ldrh	r3, [r3, #0]
 80206a4:	461a      	mov	r2, r3
 80206a6:	4b85      	ldr	r3, [pc, #532]	; (80208bc <tcp_receive+0xbe4>)
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	441a      	add	r2, r3
 80206ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206ae:	68db      	ldr	r3, [r3, #12]
 80206b0:	685b      	ldr	r3, [r3, #4]
 80206b2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80206b4:	2b00      	cmp	r3, #0
 80206b6:	dd4b      	ble.n	8020750 <tcp_receive+0xa78>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80206b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206ba:	68db      	ldr	r3, [r3, #12]
 80206bc:	685b      	ldr	r3, [r3, #4]
 80206be:	b29a      	uxth	r2, r3
 80206c0:	4b7e      	ldr	r3, [pc, #504]	; (80208bc <tcp_receive+0xbe4>)
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	b29b      	uxth	r3, r3
 80206c6:	1ad3      	subs	r3, r2, r3
 80206c8:	b29a      	uxth	r2, r3
 80206ca:	4b7d      	ldr	r3, [pc, #500]	; (80208c0 <tcp_receive+0xbe8>)
 80206cc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80206ce:	4b7c      	ldr	r3, [pc, #496]	; (80208c0 <tcp_receive+0xbe8>)
 80206d0:	68db      	ldr	r3, [r3, #12]
 80206d2:	899b      	ldrh	r3, [r3, #12]
 80206d4:	b29b      	uxth	r3, r3
 80206d6:	4618      	mov	r0, r3
 80206d8:	f7f8 fe36 	bl	8019348 <lwip_htons>
 80206dc:	4603      	mov	r3, r0
 80206de:	f003 0302 	and.w	r3, r3, #2
 80206e2:	2b00      	cmp	r3, #0
 80206e4:	d005      	beq.n	80206f2 <tcp_receive+0xa1a>
                inseg.len -= 1;
 80206e6:	4b76      	ldr	r3, [pc, #472]	; (80208c0 <tcp_receive+0xbe8>)
 80206e8:	891b      	ldrh	r3, [r3, #8]
 80206ea:	3b01      	subs	r3, #1
 80206ec:	b29a      	uxth	r2, r3
 80206ee:	4b74      	ldr	r3, [pc, #464]	; (80208c0 <tcp_receive+0xbe8>)
 80206f0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80206f2:	4b73      	ldr	r3, [pc, #460]	; (80208c0 <tcp_receive+0xbe8>)
 80206f4:	685a      	ldr	r2, [r3, #4]
 80206f6:	4b72      	ldr	r3, [pc, #456]	; (80208c0 <tcp_receive+0xbe8>)
 80206f8:	891b      	ldrh	r3, [r3, #8]
 80206fa:	4619      	mov	r1, r3
 80206fc:	4610      	mov	r0, r2
 80206fe:	f7fc f93f 	bl	801c980 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8020702:	4b6f      	ldr	r3, [pc, #444]	; (80208c0 <tcp_receive+0xbe8>)
 8020704:	891c      	ldrh	r4, [r3, #8]
 8020706:	4b6e      	ldr	r3, [pc, #440]	; (80208c0 <tcp_receive+0xbe8>)
 8020708:	68db      	ldr	r3, [r3, #12]
 802070a:	899b      	ldrh	r3, [r3, #12]
 802070c:	b29b      	uxth	r3, r3
 802070e:	4618      	mov	r0, r3
 8020710:	f7f8 fe1a 	bl	8019348 <lwip_htons>
 8020714:	4603      	mov	r3, r0
 8020716:	f003 0303 	and.w	r3, r3, #3
 802071a:	2b00      	cmp	r3, #0
 802071c:	d001      	beq.n	8020722 <tcp_receive+0xa4a>
 802071e:	2301      	movs	r3, #1
 8020720:	e000      	b.n	8020724 <tcp_receive+0xa4c>
 8020722:	2300      	movs	r3, #0
 8020724:	4423      	add	r3, r4
 8020726:	b29a      	uxth	r2, r3
 8020728:	4b63      	ldr	r3, [pc, #396]	; (80208b8 <tcp_receive+0xbe0>)
 802072a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 802072c:	4b62      	ldr	r3, [pc, #392]	; (80208b8 <tcp_receive+0xbe0>)
 802072e:	881b      	ldrh	r3, [r3, #0]
 8020730:	461a      	mov	r2, r3
 8020732:	4b62      	ldr	r3, [pc, #392]	; (80208bc <tcp_receive+0xbe4>)
 8020734:	681b      	ldr	r3, [r3, #0]
 8020736:	441a      	add	r2, r3
 8020738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802073a:	68db      	ldr	r3, [r3, #12]
 802073c:	685b      	ldr	r3, [r3, #4]
 802073e:	429a      	cmp	r2, r3
 8020740:	d006      	beq.n	8020750 <tcp_receive+0xa78>
 8020742:	4b60      	ldr	r3, [pc, #384]	; (80208c4 <tcp_receive+0xbec>)
 8020744:	f240 52af 	movw	r2, #1455	; 0x5af
 8020748:	495f      	ldr	r1, [pc, #380]	; (80208c8 <tcp_receive+0xbf0>)
 802074a:	4860      	ldr	r0, [pc, #384]	; (80208cc <tcp_receive+0xbf4>)
 802074c:	f005 f9e8 	bl	8025b20 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8020750:	687b      	ldr	r3, [r7, #4]
 8020752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020754:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8020756:	4b58      	ldr	r3, [pc, #352]	; (80208b8 <tcp_receive+0xbe0>)
 8020758:	881b      	ldrh	r3, [r3, #0]
 802075a:	461a      	mov	r2, r3
 802075c:	4b57      	ldr	r3, [pc, #348]	; (80208bc <tcp_receive+0xbe4>)
 802075e:	681b      	ldr	r3, [r3, #0]
 8020760:	441a      	add	r2, r3
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8020766:	687b      	ldr	r3, [r7, #4]
 8020768:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802076a:	4b53      	ldr	r3, [pc, #332]	; (80208b8 <tcp_receive+0xbe0>)
 802076c:	881b      	ldrh	r3, [r3, #0]
 802076e:	429a      	cmp	r2, r3
 8020770:	d206      	bcs.n	8020780 <tcp_receive+0xaa8>
 8020772:	4b54      	ldr	r3, [pc, #336]	; (80208c4 <tcp_receive+0xbec>)
 8020774:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8020778:	4955      	ldr	r1, [pc, #340]	; (80208d0 <tcp_receive+0xbf8>)
 802077a:	4854      	ldr	r0, [pc, #336]	; (80208cc <tcp_receive+0xbf4>)
 802077c:	f005 f9d0 	bl	8025b20 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8020780:	687b      	ldr	r3, [r7, #4]
 8020782:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020784:	4b4c      	ldr	r3, [pc, #304]	; (80208b8 <tcp_receive+0xbe0>)
 8020786:	881b      	ldrh	r3, [r3, #0]
 8020788:	1ad3      	subs	r3, r2, r3
 802078a:	b29a      	uxth	r2, r3
 802078c:	687b      	ldr	r3, [r7, #4]
 802078e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8020790:	6878      	ldr	r0, [r7, #4]
 8020792:	f7fd f8f5 	bl	801d980 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8020796:	4b4a      	ldr	r3, [pc, #296]	; (80208c0 <tcp_receive+0xbe8>)
 8020798:	685b      	ldr	r3, [r3, #4]
 802079a:	891b      	ldrh	r3, [r3, #8]
 802079c:	2b00      	cmp	r3, #0
 802079e:	d006      	beq.n	80207ae <tcp_receive+0xad6>
          recv_data = inseg.p;
 80207a0:	4b47      	ldr	r3, [pc, #284]	; (80208c0 <tcp_receive+0xbe8>)
 80207a2:	685b      	ldr	r3, [r3, #4]
 80207a4:	4a4b      	ldr	r2, [pc, #300]	; (80208d4 <tcp_receive+0xbfc>)
 80207a6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80207a8:	4b45      	ldr	r3, [pc, #276]	; (80208c0 <tcp_receive+0xbe8>)
 80207aa:	2200      	movs	r2, #0
 80207ac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80207ae:	4b44      	ldr	r3, [pc, #272]	; (80208c0 <tcp_receive+0xbe8>)
 80207b0:	68db      	ldr	r3, [r3, #12]
 80207b2:	899b      	ldrh	r3, [r3, #12]
 80207b4:	b29b      	uxth	r3, r3
 80207b6:	4618      	mov	r0, r3
 80207b8:	f7f8 fdc6 	bl	8019348 <lwip_htons>
 80207bc:	4603      	mov	r3, r0
 80207be:	f003 0301 	and.w	r3, r3, #1
 80207c2:	2b00      	cmp	r3, #0
 80207c4:	f000 80b4 	beq.w	8020930 <tcp_receive+0xc58>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80207c8:	4b43      	ldr	r3, [pc, #268]	; (80208d8 <tcp_receive+0xc00>)
 80207ca:	781b      	ldrb	r3, [r3, #0]
 80207cc:	f043 0320 	orr.w	r3, r3, #32
 80207d0:	b2da      	uxtb	r2, r3
 80207d2:	4b41      	ldr	r3, [pc, #260]	; (80208d8 <tcp_receive+0xc00>)
 80207d4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80207d6:	e0ab      	b.n	8020930 <tcp_receive+0xc58>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80207d8:	687b      	ldr	r3, [r7, #4]
 80207da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80207dc:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80207de:	687b      	ldr	r3, [r7, #4]
 80207e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80207e2:	68db      	ldr	r3, [r3, #12]
 80207e4:	685b      	ldr	r3, [r3, #4]
 80207e6:	4a35      	ldr	r2, [pc, #212]	; (80208bc <tcp_receive+0xbe4>)
 80207e8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80207ea:	68bb      	ldr	r3, [r7, #8]
 80207ec:	891b      	ldrh	r3, [r3, #8]
 80207ee:	461c      	mov	r4, r3
 80207f0:	68bb      	ldr	r3, [r7, #8]
 80207f2:	68db      	ldr	r3, [r3, #12]
 80207f4:	899b      	ldrh	r3, [r3, #12]
 80207f6:	b29b      	uxth	r3, r3
 80207f8:	4618      	mov	r0, r3
 80207fa:	f7f8 fda5 	bl	8019348 <lwip_htons>
 80207fe:	4603      	mov	r3, r0
 8020800:	f003 0303 	and.w	r3, r3, #3
 8020804:	2b00      	cmp	r3, #0
 8020806:	d001      	beq.n	802080c <tcp_receive+0xb34>
 8020808:	2301      	movs	r3, #1
 802080a:	e000      	b.n	802080e <tcp_receive+0xb36>
 802080c:	2300      	movs	r3, #0
 802080e:	4423      	add	r3, r4
 8020810:	687a      	ldr	r2, [r7, #4]
 8020812:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8020814:	441a      	add	r2, r3
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 802081a:	687b      	ldr	r3, [r7, #4]
 802081c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802081e:	461c      	mov	r4, r3
 8020820:	68bb      	ldr	r3, [r7, #8]
 8020822:	891b      	ldrh	r3, [r3, #8]
 8020824:	461d      	mov	r5, r3
 8020826:	68bb      	ldr	r3, [r7, #8]
 8020828:	68db      	ldr	r3, [r3, #12]
 802082a:	899b      	ldrh	r3, [r3, #12]
 802082c:	b29b      	uxth	r3, r3
 802082e:	4618      	mov	r0, r3
 8020830:	f7f8 fd8a 	bl	8019348 <lwip_htons>
 8020834:	4603      	mov	r3, r0
 8020836:	f003 0303 	and.w	r3, r3, #3
 802083a:	2b00      	cmp	r3, #0
 802083c:	d001      	beq.n	8020842 <tcp_receive+0xb6a>
 802083e:	2301      	movs	r3, #1
 8020840:	e000      	b.n	8020844 <tcp_receive+0xb6c>
 8020842:	2300      	movs	r3, #0
 8020844:	442b      	add	r3, r5
 8020846:	429c      	cmp	r4, r3
 8020848:	d206      	bcs.n	8020858 <tcp_receive+0xb80>
 802084a:	4b1e      	ldr	r3, [pc, #120]	; (80208c4 <tcp_receive+0xbec>)
 802084c:	f240 52de 	movw	r2, #1502	; 0x5de
 8020850:	4922      	ldr	r1, [pc, #136]	; (80208dc <tcp_receive+0xc04>)
 8020852:	481e      	ldr	r0, [pc, #120]	; (80208cc <tcp_receive+0xbf4>)
 8020854:	f005 f964 	bl	8025b20 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8020858:	68bb      	ldr	r3, [r7, #8]
 802085a:	891b      	ldrh	r3, [r3, #8]
 802085c:	461c      	mov	r4, r3
 802085e:	68bb      	ldr	r3, [r7, #8]
 8020860:	68db      	ldr	r3, [r3, #12]
 8020862:	899b      	ldrh	r3, [r3, #12]
 8020864:	b29b      	uxth	r3, r3
 8020866:	4618      	mov	r0, r3
 8020868:	f7f8 fd6e 	bl	8019348 <lwip_htons>
 802086c:	4603      	mov	r3, r0
 802086e:	f003 0303 	and.w	r3, r3, #3
 8020872:	2b00      	cmp	r3, #0
 8020874:	d001      	beq.n	802087a <tcp_receive+0xba2>
 8020876:	2301      	movs	r3, #1
 8020878:	e000      	b.n	802087c <tcp_receive+0xba4>
 802087a:	2300      	movs	r3, #0
 802087c:	18e1      	adds	r1, r4, r3
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020882:	b28b      	uxth	r3, r1
 8020884:	1ad3      	subs	r3, r2, r3
 8020886:	b29a      	uxth	r2, r3
 8020888:	687b      	ldr	r3, [r7, #4]
 802088a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 802088c:	6878      	ldr	r0, [r7, #4]
 802088e:	f7fd f877 	bl	801d980 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8020892:	68bb      	ldr	r3, [r7, #8]
 8020894:	685b      	ldr	r3, [r3, #4]
 8020896:	891b      	ldrh	r3, [r3, #8]
 8020898:	2b00      	cmp	r3, #0
 802089a:	d028      	beq.n	80208ee <tcp_receive+0xc16>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 802089c:	4b0d      	ldr	r3, [pc, #52]	; (80208d4 <tcp_receive+0xbfc>)
 802089e:	681b      	ldr	r3, [r3, #0]
 80208a0:	2b00      	cmp	r3, #0
 80208a2:	d01d      	beq.n	80208e0 <tcp_receive+0xc08>
              pbuf_cat(recv_data, cseg->p);
 80208a4:	4b0b      	ldr	r3, [pc, #44]	; (80208d4 <tcp_receive+0xbfc>)
 80208a6:	681a      	ldr	r2, [r3, #0]
 80208a8:	68bb      	ldr	r3, [r7, #8]
 80208aa:	685b      	ldr	r3, [r3, #4]
 80208ac:	4619      	mov	r1, r3
 80208ae:	4610      	mov	r0, r2
 80208b0:	f7fc fab4 	bl	801ce1c <pbuf_cat>
 80208b4:	e018      	b.n	80208e8 <tcp_receive+0xc10>
 80208b6:	bf00      	nop
 80208b8:	2000411e 	.word	0x2000411e
 80208bc:	20004114 	.word	0x20004114
 80208c0:	200040f4 	.word	0x200040f4
 80208c4:	0802842c 	.word	0x0802842c
 80208c8:	08028730 	.word	0x08028730
 80208cc:	08028470 	.word	0x08028470
 80208d0:	0802876c 	.word	0x0802876c
 80208d4:	20004124 	.word	0x20004124
 80208d8:	20004121 	.word	0x20004121
 80208dc:	0802878c 	.word	0x0802878c
            } else {
              recv_data = cseg->p;
 80208e0:	68bb      	ldr	r3, [r7, #8]
 80208e2:	685b      	ldr	r3, [r3, #4]
 80208e4:	4a71      	ldr	r2, [pc, #452]	; (8020aac <tcp_receive+0xdd4>)
 80208e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80208e8:	68bb      	ldr	r3, [r7, #8]
 80208ea:	2200      	movs	r2, #0
 80208ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80208ee:	68bb      	ldr	r3, [r7, #8]
 80208f0:	68db      	ldr	r3, [r3, #12]
 80208f2:	899b      	ldrh	r3, [r3, #12]
 80208f4:	b29b      	uxth	r3, r3
 80208f6:	4618      	mov	r0, r3
 80208f8:	f7f8 fd26 	bl	8019348 <lwip_htons>
 80208fc:	4603      	mov	r3, r0
 80208fe:	f003 0301 	and.w	r3, r3, #1
 8020902:	2b00      	cmp	r3, #0
 8020904:	d00d      	beq.n	8020922 <tcp_receive+0xc4a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8020906:	4b6a      	ldr	r3, [pc, #424]	; (8020ab0 <tcp_receive+0xdd8>)
 8020908:	781b      	ldrb	r3, [r3, #0]
 802090a:	f043 0320 	orr.w	r3, r3, #32
 802090e:	b2da      	uxtb	r2, r3
 8020910:	4b67      	ldr	r3, [pc, #412]	; (8020ab0 <tcp_receive+0xdd8>)
 8020912:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	7d1b      	ldrb	r3, [r3, #20]
 8020918:	2b04      	cmp	r3, #4
 802091a:	d102      	bne.n	8020922 <tcp_receive+0xc4a>
              pcb->state = CLOSE_WAIT;
 802091c:	687b      	ldr	r3, [r7, #4]
 802091e:	2207      	movs	r2, #7
 8020920:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8020922:	68bb      	ldr	r3, [r7, #8]
 8020924:	681a      	ldr	r2, [r3, #0]
 8020926:	687b      	ldr	r3, [r7, #4]
 8020928:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 802092a:	68b8      	ldr	r0, [r7, #8]
 802092c:	f7fd fcb7 	bl	801e29e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8020930:	687b      	ldr	r3, [r7, #4]
 8020932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020934:	2b00      	cmp	r3, #0
 8020936:	d008      	beq.n	802094a <tcp_receive+0xc72>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8020938:	687b      	ldr	r3, [r7, #4]
 802093a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802093c:	68db      	ldr	r3, [r3, #12]
 802093e:	685a      	ldr	r2, [r3, #4]
 8020940:	687b      	ldr	r3, [r7, #4]
 8020942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8020944:	429a      	cmp	r2, r3
 8020946:	f43f af47 	beq.w	80207d8 <tcp_receive+0xb00>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 802094a:	687b      	ldr	r3, [r7, #4]
 802094c:	7e9b      	ldrb	r3, [r3, #26]
 802094e:	f003 0301 	and.w	r3, r3, #1
 8020952:	2b00      	cmp	r3, #0
 8020954:	d00e      	beq.n	8020974 <tcp_receive+0xc9c>
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	7e9b      	ldrb	r3, [r3, #26]
 802095a:	f023 0301 	bic.w	r3, r3, #1
 802095e:	b2da      	uxtb	r2, r3
 8020960:	687b      	ldr	r3, [r7, #4]
 8020962:	769a      	strb	r2, [r3, #26]
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	7e9b      	ldrb	r3, [r3, #26]
 8020968:	f043 0302 	orr.w	r3, r3, #2
 802096c:	b2da      	uxtb	r2, r3
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8020972:	e180      	b.n	8020c76 <tcp_receive+0xf9e>
        tcp_ack(pcb);
 8020974:	687b      	ldr	r3, [r7, #4]
 8020976:	7e9b      	ldrb	r3, [r3, #26]
 8020978:	f043 0301 	orr.w	r3, r3, #1
 802097c:	b2da      	uxtb	r2, r3
 802097e:	687b      	ldr	r3, [r7, #4]
 8020980:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8020982:	e178      	b.n	8020c76 <tcp_receive+0xf9e>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8020984:	6878      	ldr	r0, [r7, #4]
 8020986:	f001 f8c7 	bl	8021b18 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 802098a:	687b      	ldr	r3, [r7, #4]
 802098c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802098e:	2b00      	cmp	r3, #0
 8020990:	d106      	bne.n	80209a0 <tcp_receive+0xcc8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8020992:	4848      	ldr	r0, [pc, #288]	; (8020ab4 <tcp_receive+0xddc>)
 8020994:	f7fd fc9b 	bl	801e2ce <tcp_seg_copy>
 8020998:	4602      	mov	r2, r0
 802099a:	687b      	ldr	r3, [r7, #4]
 802099c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 802099e:	e16a      	b.n	8020c76 <tcp_receive+0xf9e>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80209a0:	2300      	movs	r3, #0
 80209a2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80209a4:	687b      	ldr	r3, [r7, #4]
 80209a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80209a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80209aa:	e14f      	b.n	8020c4c <tcp_receive+0xf74>
            if (seqno == next->tcphdr->seqno) {
 80209ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209ae:	68db      	ldr	r3, [r3, #12]
 80209b0:	685a      	ldr	r2, [r3, #4]
 80209b2:	4b41      	ldr	r3, [pc, #260]	; (8020ab8 <tcp_receive+0xde0>)
 80209b4:	681b      	ldr	r3, [r3, #0]
 80209b6:	429a      	cmp	r2, r3
 80209b8:	d11d      	bne.n	80209f6 <tcp_receive+0xd1e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80209ba:	4b3e      	ldr	r3, [pc, #248]	; (8020ab4 <tcp_receive+0xddc>)
 80209bc:	891a      	ldrh	r2, [r3, #8]
 80209be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209c0:	891b      	ldrh	r3, [r3, #8]
 80209c2:	429a      	cmp	r2, r3
 80209c4:	f240 8147 	bls.w	8020c56 <tcp_receive+0xf7e>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80209c8:	483a      	ldr	r0, [pc, #232]	; (8020ab4 <tcp_receive+0xddc>)
 80209ca:	f7fd fc80 	bl	801e2ce <tcp_seg_copy>
 80209ce:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 80209d0:	68bb      	ldr	r3, [r7, #8]
 80209d2:	2b00      	cmp	r3, #0
 80209d4:	f000 8141 	beq.w	8020c5a <tcp_receive+0xf82>
                  if (prev != NULL) {
 80209d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209da:	2b00      	cmp	r3, #0
 80209dc:	d003      	beq.n	80209e6 <tcp_receive+0xd0e>
                    prev->next = cseg;
 80209de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209e0:	68ba      	ldr	r2, [r7, #8]
 80209e2:	601a      	str	r2, [r3, #0]
 80209e4:	e002      	b.n	80209ec <tcp_receive+0xd14>
                  } else {
                    pcb->ooseq = cseg;
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	68ba      	ldr	r2, [r7, #8]
 80209ea:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80209ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80209ee:	68b8      	ldr	r0, [r7, #8]
 80209f0:	f7ff f8fc 	bl	801fbec <tcp_oos_insert_segment>
                }
                break;
 80209f4:	e131      	b.n	8020c5a <tcp_receive+0xf82>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80209f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209f8:	2b00      	cmp	r3, #0
 80209fa:	d117      	bne.n	8020a2c <tcp_receive+0xd54>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80209fc:	4b2e      	ldr	r3, [pc, #184]	; (8020ab8 <tcp_receive+0xde0>)
 80209fe:	681a      	ldr	r2, [r3, #0]
 8020a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a02:	68db      	ldr	r3, [r3, #12]
 8020a04:	685b      	ldr	r3, [r3, #4]
 8020a06:	1ad3      	subs	r3, r2, r3
 8020a08:	2b00      	cmp	r3, #0
 8020a0a:	da57      	bge.n	8020abc <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8020a0c:	4829      	ldr	r0, [pc, #164]	; (8020ab4 <tcp_receive+0xddc>)
 8020a0e:	f7fd fc5e 	bl	801e2ce <tcp_seg_copy>
 8020a12:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8020a14:	68bb      	ldr	r3, [r7, #8]
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	f000 8121 	beq.w	8020c5e <tcp_receive+0xf86>
                    pcb->ooseq = cseg;
 8020a1c:	687b      	ldr	r3, [r7, #4]
 8020a1e:	68ba      	ldr	r2, [r7, #8]
 8020a20:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8020a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020a24:	68b8      	ldr	r0, [r7, #8]
 8020a26:	f7ff f8e1 	bl	801fbec <tcp_oos_insert_segment>
                  }
                  break;
 8020a2a:	e118      	b.n	8020c5e <tcp_receive+0xf86>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8020a2c:	4b22      	ldr	r3, [pc, #136]	; (8020ab8 <tcp_receive+0xde0>)
 8020a2e:	681a      	ldr	r2, [r3, #0]
 8020a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a32:	68db      	ldr	r3, [r3, #12]
 8020a34:	685b      	ldr	r3, [r3, #4]
 8020a36:	1ad3      	subs	r3, r2, r3
 8020a38:	3b01      	subs	r3, #1
 8020a3a:	2b00      	cmp	r3, #0
 8020a3c:	db3e      	blt.n	8020abc <tcp_receive+0xde4>
 8020a3e:	4b1e      	ldr	r3, [pc, #120]	; (8020ab8 <tcp_receive+0xde0>)
 8020a40:	681a      	ldr	r2, [r3, #0]
 8020a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a44:	68db      	ldr	r3, [r3, #12]
 8020a46:	685b      	ldr	r3, [r3, #4]
 8020a48:	1ad3      	subs	r3, r2, r3
 8020a4a:	3301      	adds	r3, #1
 8020a4c:	2b00      	cmp	r3, #0
 8020a4e:	dc35      	bgt.n	8020abc <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8020a50:	4818      	ldr	r0, [pc, #96]	; (8020ab4 <tcp_receive+0xddc>)
 8020a52:	f7fd fc3c 	bl	801e2ce <tcp_seg_copy>
 8020a56:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8020a58:	68bb      	ldr	r3, [r7, #8]
 8020a5a:	2b00      	cmp	r3, #0
 8020a5c:	f000 8101 	beq.w	8020c62 <tcp_receive+0xf8a>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8020a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a62:	68db      	ldr	r3, [r3, #12]
 8020a64:	685b      	ldr	r3, [r3, #4]
 8020a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020a68:	8912      	ldrh	r2, [r2, #8]
 8020a6a:	441a      	add	r2, r3
 8020a6c:	4b12      	ldr	r3, [pc, #72]	; (8020ab8 <tcp_receive+0xde0>)
 8020a6e:	681b      	ldr	r3, [r3, #0]
 8020a70:	1ad3      	subs	r3, r2, r3
 8020a72:	2b00      	cmp	r3, #0
 8020a74:	dd12      	ble.n	8020a9c <tcp_receive+0xdc4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8020a76:	4b10      	ldr	r3, [pc, #64]	; (8020ab8 <tcp_receive+0xde0>)
 8020a78:	681b      	ldr	r3, [r3, #0]
 8020a7a:	b29a      	uxth	r2, r3
 8020a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a7e:	68db      	ldr	r3, [r3, #12]
 8020a80:	685b      	ldr	r3, [r3, #4]
 8020a82:	b29b      	uxth	r3, r3
 8020a84:	1ad3      	subs	r3, r2, r3
 8020a86:	b29a      	uxth	r2, r3
 8020a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a8a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8020a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a8e:	685a      	ldr	r2, [r3, #4]
 8020a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a92:	891b      	ldrh	r3, [r3, #8]
 8020a94:	4619      	mov	r1, r3
 8020a96:	4610      	mov	r0, r2
 8020a98:	f7fb ff72 	bl	801c980 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8020a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a9e:	68ba      	ldr	r2, [r7, #8]
 8020aa0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8020aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020aa4:	68b8      	ldr	r0, [r7, #8]
 8020aa6:	f7ff f8a1 	bl	801fbec <tcp_oos_insert_segment>
                  }
                  break;
 8020aaa:	e0da      	b.n	8020c62 <tcp_receive+0xf8a>
 8020aac:	20004124 	.word	0x20004124
 8020ab0:	20004121 	.word	0x20004121
 8020ab4:	200040f4 	.word	0x200040f4
 8020ab8:	20004114 	.word	0x20004114
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8020abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020abe:	681b      	ldr	r3, [r3, #0]
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	f040 80be 	bne.w	8020c42 <tcp_receive+0xf6a>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8020ac6:	4b7b      	ldr	r3, [pc, #492]	; (8020cb4 <tcp_receive+0xfdc>)
 8020ac8:	681a      	ldr	r2, [r3, #0]
 8020aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020acc:	68db      	ldr	r3, [r3, #12]
 8020ace:	685b      	ldr	r3, [r3, #4]
 8020ad0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8020ad2:	2b00      	cmp	r3, #0
 8020ad4:	f340 80b5 	ble.w	8020c42 <tcp_receive+0xf6a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8020ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ada:	68db      	ldr	r3, [r3, #12]
 8020adc:	899b      	ldrh	r3, [r3, #12]
 8020ade:	b29b      	uxth	r3, r3
 8020ae0:	4618      	mov	r0, r3
 8020ae2:	f7f8 fc31 	bl	8019348 <lwip_htons>
 8020ae6:	4603      	mov	r3, r0
 8020ae8:	f003 0301 	and.w	r3, r3, #1
 8020aec:	2b00      	cmp	r3, #0
 8020aee:	f040 80ba 	bne.w	8020c66 <tcp_receive+0xf8e>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8020af2:	4871      	ldr	r0, [pc, #452]	; (8020cb8 <tcp_receive+0xfe0>)
 8020af4:	f7fd fbeb 	bl	801e2ce <tcp_seg_copy>
 8020af8:	4602      	mov	r2, r0
 8020afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020afc:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8020afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b00:	681b      	ldr	r3, [r3, #0]
 8020b02:	2b00      	cmp	r3, #0
 8020b04:	f000 80b1 	beq.w	8020c6a <tcp_receive+0xf92>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8020b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b0a:	68db      	ldr	r3, [r3, #12]
 8020b0c:	685b      	ldr	r3, [r3, #4]
 8020b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020b10:	8912      	ldrh	r2, [r2, #8]
 8020b12:	441a      	add	r2, r3
 8020b14:	4b67      	ldr	r3, [pc, #412]	; (8020cb4 <tcp_receive+0xfdc>)
 8020b16:	681b      	ldr	r3, [r3, #0]
 8020b18:	1ad3      	subs	r3, r2, r3
 8020b1a:	2b00      	cmp	r3, #0
 8020b1c:	dd12      	ble.n	8020b44 <tcp_receive+0xe6c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8020b1e:	4b65      	ldr	r3, [pc, #404]	; (8020cb4 <tcp_receive+0xfdc>)
 8020b20:	681b      	ldr	r3, [r3, #0]
 8020b22:	b29a      	uxth	r2, r3
 8020b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b26:	68db      	ldr	r3, [r3, #12]
 8020b28:	685b      	ldr	r3, [r3, #4]
 8020b2a:	b29b      	uxth	r3, r3
 8020b2c:	1ad3      	subs	r3, r2, r3
 8020b2e:	b29a      	uxth	r2, r3
 8020b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b32:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8020b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b36:	685a      	ldr	r2, [r3, #4]
 8020b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b3a:	891b      	ldrh	r3, [r3, #8]
 8020b3c:	4619      	mov	r1, r3
 8020b3e:	4610      	mov	r0, r2
 8020b40:	f7fb ff1e 	bl	801c980 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8020b44:	4b5d      	ldr	r3, [pc, #372]	; (8020cbc <tcp_receive+0xfe4>)
 8020b46:	881b      	ldrh	r3, [r3, #0]
 8020b48:	461a      	mov	r2, r3
 8020b4a:	4b5a      	ldr	r3, [pc, #360]	; (8020cb4 <tcp_receive+0xfdc>)
 8020b4c:	681b      	ldr	r3, [r3, #0]
 8020b4e:	441a      	add	r2, r3
 8020b50:	687b      	ldr	r3, [r7, #4]
 8020b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020b54:	6879      	ldr	r1, [r7, #4]
 8020b56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020b58:	440b      	add	r3, r1
 8020b5a:	1ad3      	subs	r3, r2, r3
 8020b5c:	2b00      	cmp	r3, #0
 8020b5e:	f340 8084 	ble.w	8020c6a <tcp_receive+0xf92>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8020b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b64:	681b      	ldr	r3, [r3, #0]
 8020b66:	68db      	ldr	r3, [r3, #12]
 8020b68:	899b      	ldrh	r3, [r3, #12]
 8020b6a:	b29b      	uxth	r3, r3
 8020b6c:	4618      	mov	r0, r3
 8020b6e:	f7f8 fbeb 	bl	8019348 <lwip_htons>
 8020b72:	4603      	mov	r3, r0
 8020b74:	f003 0301 	and.w	r3, r3, #1
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	d01d      	beq.n	8020bb8 <tcp_receive+0xee0>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8020b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b7e:	681b      	ldr	r3, [r3, #0]
 8020b80:	68dc      	ldr	r4, [r3, #12]
 8020b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b84:	681b      	ldr	r3, [r3, #0]
 8020b86:	68db      	ldr	r3, [r3, #12]
 8020b88:	899b      	ldrh	r3, [r3, #12]
 8020b8a:	b29b      	uxth	r3, r3
 8020b8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8020b90:	b29d      	uxth	r5, r3
 8020b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b94:	681b      	ldr	r3, [r3, #0]
 8020b96:	68db      	ldr	r3, [r3, #12]
 8020b98:	899b      	ldrh	r3, [r3, #12]
 8020b9a:	b29b      	uxth	r3, r3
 8020b9c:	4618      	mov	r0, r3
 8020b9e:	f7f8 fbd3 	bl	8019348 <lwip_htons>
 8020ba2:	4603      	mov	r3, r0
 8020ba4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8020ba8:	b29b      	uxth	r3, r3
 8020baa:	4618      	mov	r0, r3
 8020bac:	f7f8 fbcc 	bl	8019348 <lwip_htons>
 8020bb0:	4603      	mov	r3, r0
 8020bb2:	432b      	orrs	r3, r5
 8020bb4:	b29b      	uxth	r3, r3
 8020bb6:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8020bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bba:	681b      	ldr	r3, [r3, #0]
 8020bbc:	687a      	ldr	r2, [r7, #4]
 8020bbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8020bc0:	b291      	uxth	r1, r2
 8020bc2:	687a      	ldr	r2, [r7, #4]
 8020bc4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8020bc6:	440a      	add	r2, r1
 8020bc8:	b291      	uxth	r1, r2
 8020bca:	4a3a      	ldr	r2, [pc, #232]	; (8020cb4 <tcp_receive+0xfdc>)
 8020bcc:	6812      	ldr	r2, [r2, #0]
 8020bce:	b292      	uxth	r2, r2
 8020bd0:	1a8a      	subs	r2, r1, r2
 8020bd2:	b292      	uxth	r2, r2
 8020bd4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8020bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bd8:	681b      	ldr	r3, [r3, #0]
 8020bda:	685a      	ldr	r2, [r3, #4]
 8020bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bde:	681b      	ldr	r3, [r3, #0]
 8020be0:	891b      	ldrh	r3, [r3, #8]
 8020be2:	4619      	mov	r1, r3
 8020be4:	4610      	mov	r0, r2
 8020be6:	f7fb fecb 	bl	801c980 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8020bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bec:	681b      	ldr	r3, [r3, #0]
 8020bee:	891c      	ldrh	r4, [r3, #8]
 8020bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bf2:	681b      	ldr	r3, [r3, #0]
 8020bf4:	68db      	ldr	r3, [r3, #12]
 8020bf6:	899b      	ldrh	r3, [r3, #12]
 8020bf8:	b29b      	uxth	r3, r3
 8020bfa:	4618      	mov	r0, r3
 8020bfc:	f7f8 fba4 	bl	8019348 <lwip_htons>
 8020c00:	4603      	mov	r3, r0
 8020c02:	f003 0303 	and.w	r3, r3, #3
 8020c06:	2b00      	cmp	r3, #0
 8020c08:	d001      	beq.n	8020c0e <tcp_receive+0xf36>
 8020c0a:	2301      	movs	r3, #1
 8020c0c:	e000      	b.n	8020c10 <tcp_receive+0xf38>
 8020c0e:	2300      	movs	r3, #0
 8020c10:	4423      	add	r3, r4
 8020c12:	b29a      	uxth	r2, r3
 8020c14:	4b29      	ldr	r3, [pc, #164]	; (8020cbc <tcp_receive+0xfe4>)
 8020c16:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8020c18:	4b28      	ldr	r3, [pc, #160]	; (8020cbc <tcp_receive+0xfe4>)
 8020c1a:	881b      	ldrh	r3, [r3, #0]
 8020c1c:	461a      	mov	r2, r3
 8020c1e:	4b25      	ldr	r3, [pc, #148]	; (8020cb4 <tcp_receive+0xfdc>)
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	441a      	add	r2, r3
 8020c24:	687b      	ldr	r3, [r7, #4]
 8020c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c28:	6879      	ldr	r1, [r7, #4]
 8020c2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020c2c:	440b      	add	r3, r1
 8020c2e:	429a      	cmp	r2, r3
 8020c30:	d01b      	beq.n	8020c6a <tcp_receive+0xf92>
 8020c32:	4b23      	ldr	r3, [pc, #140]	; (8020cc0 <tcp_receive+0xfe8>)
 8020c34:	f240 627b 	movw	r2, #1659	; 0x67b
 8020c38:	4922      	ldr	r1, [pc, #136]	; (8020cc4 <tcp_receive+0xfec>)
 8020c3a:	4823      	ldr	r0, [pc, #140]	; (8020cc8 <tcp_receive+0xff0>)
 8020c3c:	f004 ff70 	bl	8025b20 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8020c40:	e013      	b.n	8020c6a <tcp_receive+0xf92>
              }
            }
            prev = next;
 8020c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c44:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8020c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c48:	681b      	ldr	r3, [r3, #0]
 8020c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c4e:	2b00      	cmp	r3, #0
 8020c50:	f47f aeac 	bne.w	80209ac <tcp_receive+0xcd4>
      if (pcb->rcv_nxt == seqno) {
 8020c54:	e00f      	b.n	8020c76 <tcp_receive+0xf9e>
                break;
 8020c56:	bf00      	nop
 8020c58:	e00d      	b.n	8020c76 <tcp_receive+0xf9e>
                break;
 8020c5a:	bf00      	nop
 8020c5c:	e00b      	b.n	8020c76 <tcp_receive+0xf9e>
                  break;
 8020c5e:	bf00      	nop
 8020c60:	e009      	b.n	8020c76 <tcp_receive+0xf9e>
                  break;
 8020c62:	bf00      	nop
 8020c64:	e007      	b.n	8020c76 <tcp_receive+0xf9e>
                  break;
 8020c66:	bf00      	nop
 8020c68:	e005      	b.n	8020c76 <tcp_receive+0xf9e>
                break;
 8020c6a:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8020c6c:	e003      	b.n	8020c76 <tcp_receive+0xf9e>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8020c6e:	6878      	ldr	r0, [r7, #4]
 8020c70:	f000 ff52 	bl	8021b18 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8020c74:	e01a      	b.n	8020cac <tcp_receive+0xfd4>
 8020c76:	e019      	b.n	8020cac <tcp_receive+0xfd4>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8020c78:	4b0e      	ldr	r3, [pc, #56]	; (8020cb4 <tcp_receive+0xfdc>)
 8020c7a:	681a      	ldr	r2, [r3, #0]
 8020c7c:	687b      	ldr	r3, [r7, #4]
 8020c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c80:	1ad3      	subs	r3, r2, r3
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	db0a      	blt.n	8020c9c <tcp_receive+0xfc4>
 8020c86:	4b0b      	ldr	r3, [pc, #44]	; (8020cb4 <tcp_receive+0xfdc>)
 8020c88:	681a      	ldr	r2, [r3, #0]
 8020c8a:	687b      	ldr	r3, [r7, #4]
 8020c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c8e:	6879      	ldr	r1, [r7, #4]
 8020c90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020c92:	440b      	add	r3, r1
 8020c94:	1ad3      	subs	r3, r2, r3
 8020c96:	3301      	adds	r3, #1
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	dd07      	ble.n	8020cac <tcp_receive+0xfd4>
      tcp_ack_now(pcb);
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	7e9b      	ldrb	r3, [r3, #26]
 8020ca0:	f043 0302 	orr.w	r3, r3, #2
 8020ca4:	b2da      	uxtb	r2, r3
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8020caa:	e7ff      	b.n	8020cac <tcp_receive+0xfd4>
 8020cac:	bf00      	nop
 8020cae:	3734      	adds	r7, #52	; 0x34
 8020cb0:	46bd      	mov	sp, r7
 8020cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020cb4:	20004114 	.word	0x20004114
 8020cb8:	200040f4 	.word	0x200040f4
 8020cbc:	2000411e 	.word	0x2000411e
 8020cc0:	0802842c 	.word	0x0802842c
 8020cc4:	080286f8 	.word	0x080286f8
 8020cc8:	08028470 	.word	0x08028470

08020ccc <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8020ccc:	b480      	push	{r7}
 8020cce:	b083      	sub	sp, #12
 8020cd0:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8020cd2:	4b18      	ldr	r3, [pc, #96]	; (8020d34 <tcp_getoptbyte+0x68>)
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	2b00      	cmp	r3, #0
 8020cd8:	d005      	beq.n	8020ce6 <tcp_getoptbyte+0x1a>
 8020cda:	4b17      	ldr	r3, [pc, #92]	; (8020d38 <tcp_getoptbyte+0x6c>)
 8020cdc:	881a      	ldrh	r2, [r3, #0]
 8020cde:	4b17      	ldr	r3, [pc, #92]	; (8020d3c <tcp_getoptbyte+0x70>)
 8020ce0:	881b      	ldrh	r3, [r3, #0]
 8020ce2:	429a      	cmp	r2, r3
 8020ce4:	d20e      	bcs.n	8020d04 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8020ce6:	4b16      	ldr	r3, [pc, #88]	; (8020d40 <tcp_getoptbyte+0x74>)
 8020ce8:	681b      	ldr	r3, [r3, #0]
 8020cea:	3314      	adds	r3, #20
 8020cec:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8020cee:	4b12      	ldr	r3, [pc, #72]	; (8020d38 <tcp_getoptbyte+0x6c>)
 8020cf0:	881b      	ldrh	r3, [r3, #0]
 8020cf2:	1c5a      	adds	r2, r3, #1
 8020cf4:	b291      	uxth	r1, r2
 8020cf6:	4a10      	ldr	r2, [pc, #64]	; (8020d38 <tcp_getoptbyte+0x6c>)
 8020cf8:	8011      	strh	r1, [r2, #0]
 8020cfa:	461a      	mov	r2, r3
 8020cfc:	683b      	ldr	r3, [r7, #0]
 8020cfe:	4413      	add	r3, r2
 8020d00:	781b      	ldrb	r3, [r3, #0]
 8020d02:	e010      	b.n	8020d26 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8020d04:	4b0c      	ldr	r3, [pc, #48]	; (8020d38 <tcp_getoptbyte+0x6c>)
 8020d06:	881b      	ldrh	r3, [r3, #0]
 8020d08:	1c5a      	adds	r2, r3, #1
 8020d0a:	b291      	uxth	r1, r2
 8020d0c:	4a0a      	ldr	r2, [pc, #40]	; (8020d38 <tcp_getoptbyte+0x6c>)
 8020d0e:	8011      	strh	r1, [r2, #0]
 8020d10:	b2da      	uxtb	r2, r3
 8020d12:	4b0a      	ldr	r3, [pc, #40]	; (8020d3c <tcp_getoptbyte+0x70>)
 8020d14:	881b      	ldrh	r3, [r3, #0]
 8020d16:	b2db      	uxtb	r3, r3
 8020d18:	1ad3      	subs	r3, r2, r3
 8020d1a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8020d1c:	4b05      	ldr	r3, [pc, #20]	; (8020d34 <tcp_getoptbyte+0x68>)
 8020d1e:	681a      	ldr	r2, [r3, #0]
 8020d20:	79fb      	ldrb	r3, [r7, #7]
 8020d22:	4413      	add	r3, r2
 8020d24:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020d26:	4618      	mov	r0, r3
 8020d28:	370c      	adds	r7, #12
 8020d2a:	46bd      	mov	sp, r7
 8020d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d30:	4770      	bx	lr
 8020d32:	bf00      	nop
 8020d34:	2000410c 	.word	0x2000410c
 8020d38:	20004110 	.word	0x20004110
 8020d3c:	2000410a 	.word	0x2000410a
 8020d40:	20004104 	.word	0x20004104

08020d44 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b084      	sub	sp, #16
 8020d48:	af00      	add	r7, sp, #0
 8020d4a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8020d4c:	4b2d      	ldr	r3, [pc, #180]	; (8020e04 <tcp_parseopt+0xc0>)
 8020d4e:	881b      	ldrh	r3, [r3, #0]
 8020d50:	2b00      	cmp	r3, #0
 8020d52:	d053      	beq.n	8020dfc <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8020d54:	4b2c      	ldr	r3, [pc, #176]	; (8020e08 <tcp_parseopt+0xc4>)
 8020d56:	2200      	movs	r2, #0
 8020d58:	801a      	strh	r2, [r3, #0]
 8020d5a:	e043      	b.n	8020de4 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8020d5c:	f7ff ffb6 	bl	8020ccc <tcp_getoptbyte>
 8020d60:	4603      	mov	r3, r0
 8020d62:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8020d64:	7bfb      	ldrb	r3, [r7, #15]
 8020d66:	2b01      	cmp	r3, #1
 8020d68:	d03c      	beq.n	8020de4 <tcp_parseopt+0xa0>
 8020d6a:	2b02      	cmp	r3, #2
 8020d6c:	d002      	beq.n	8020d74 <tcp_parseopt+0x30>
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	d03f      	beq.n	8020df2 <tcp_parseopt+0xae>
 8020d72:	e026      	b.n	8020dc2 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8020d74:	f7ff ffaa 	bl	8020ccc <tcp_getoptbyte>
 8020d78:	4603      	mov	r3, r0
 8020d7a:	2b04      	cmp	r3, #4
 8020d7c:	d13b      	bne.n	8020df6 <tcp_parseopt+0xb2>
 8020d7e:	4b22      	ldr	r3, [pc, #136]	; (8020e08 <tcp_parseopt+0xc4>)
 8020d80:	881b      	ldrh	r3, [r3, #0]
 8020d82:	3302      	adds	r3, #2
 8020d84:	4a1f      	ldr	r2, [pc, #124]	; (8020e04 <tcp_parseopt+0xc0>)
 8020d86:	8812      	ldrh	r2, [r2, #0]
 8020d88:	4293      	cmp	r3, r2
 8020d8a:	dc34      	bgt.n	8020df6 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8020d8c:	f7ff ff9e 	bl	8020ccc <tcp_getoptbyte>
 8020d90:	4603      	mov	r3, r0
 8020d92:	b29b      	uxth	r3, r3
 8020d94:	021b      	lsls	r3, r3, #8
 8020d96:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8020d98:	f7ff ff98 	bl	8020ccc <tcp_getoptbyte>
 8020d9c:	4603      	mov	r3, r0
 8020d9e:	b29a      	uxth	r2, r3
 8020da0:	89bb      	ldrh	r3, [r7, #12]
 8020da2:	4313      	orrs	r3, r2
 8020da4:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8020da6:	89bb      	ldrh	r3, [r7, #12]
 8020da8:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8020dac:	d804      	bhi.n	8020db8 <tcp_parseopt+0x74>
 8020dae:	89bb      	ldrh	r3, [r7, #12]
 8020db0:	2b00      	cmp	r3, #0
 8020db2:	d001      	beq.n	8020db8 <tcp_parseopt+0x74>
 8020db4:	89ba      	ldrh	r2, [r7, #12]
 8020db6:	e001      	b.n	8020dbc <tcp_parseopt+0x78>
 8020db8:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8020dbc:	687b      	ldr	r3, [r7, #4]
 8020dbe:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8020dc0:	e010      	b.n	8020de4 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8020dc2:	f7ff ff83 	bl	8020ccc <tcp_getoptbyte>
 8020dc6:	4603      	mov	r3, r0
 8020dc8:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8020dca:	7afb      	ldrb	r3, [r7, #11]
 8020dcc:	2b01      	cmp	r3, #1
 8020dce:	d914      	bls.n	8020dfa <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8020dd0:	7afb      	ldrb	r3, [r7, #11]
 8020dd2:	b29a      	uxth	r2, r3
 8020dd4:	4b0c      	ldr	r3, [pc, #48]	; (8020e08 <tcp_parseopt+0xc4>)
 8020dd6:	881b      	ldrh	r3, [r3, #0]
 8020dd8:	4413      	add	r3, r2
 8020dda:	b29b      	uxth	r3, r3
 8020ddc:	3b02      	subs	r3, #2
 8020dde:	b29a      	uxth	r2, r3
 8020de0:	4b09      	ldr	r3, [pc, #36]	; (8020e08 <tcp_parseopt+0xc4>)
 8020de2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8020de4:	4b08      	ldr	r3, [pc, #32]	; (8020e08 <tcp_parseopt+0xc4>)
 8020de6:	881a      	ldrh	r2, [r3, #0]
 8020de8:	4b06      	ldr	r3, [pc, #24]	; (8020e04 <tcp_parseopt+0xc0>)
 8020dea:	881b      	ldrh	r3, [r3, #0]
 8020dec:	429a      	cmp	r2, r3
 8020dee:	d3b5      	bcc.n	8020d5c <tcp_parseopt+0x18>
 8020df0:	e004      	b.n	8020dfc <tcp_parseopt+0xb8>
        return;
 8020df2:	bf00      	nop
 8020df4:	e002      	b.n	8020dfc <tcp_parseopt+0xb8>
          return;
 8020df6:	bf00      	nop
 8020df8:	e000      	b.n	8020dfc <tcp_parseopt+0xb8>
          return;
 8020dfa:	bf00      	nop
      }
    }
  }
}
 8020dfc:	3710      	adds	r7, #16
 8020dfe:	46bd      	mov	sp, r7
 8020e00:	bd80      	pop	{r7, pc}
 8020e02:	bf00      	nop
 8020e04:	20004108 	.word	0x20004108
 8020e08:	20004110 	.word	0x20004110

08020e0c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8020e0c:	b480      	push	{r7}
 8020e0e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8020e10:	4b05      	ldr	r3, [pc, #20]	; (8020e28 <tcp_trigger_input_pcb_close+0x1c>)
 8020e12:	781b      	ldrb	r3, [r3, #0]
 8020e14:	f043 0310 	orr.w	r3, r3, #16
 8020e18:	b2da      	uxtb	r2, r3
 8020e1a:	4b03      	ldr	r3, [pc, #12]	; (8020e28 <tcp_trigger_input_pcb_close+0x1c>)
 8020e1c:	701a      	strb	r2, [r3, #0]
}
 8020e1e:	bf00      	nop
 8020e20:	46bd      	mov	sp, r7
 8020e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e26:	4770      	bx	lr
 8020e28:	20004121 	.word	0x20004121

08020e2c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8020e2c:	b580      	push	{r7, lr}
 8020e2e:	b086      	sub	sp, #24
 8020e30:	af00      	add	r7, sp, #0
 8020e32:	60f8      	str	r0, [r7, #12]
 8020e34:	607b      	str	r3, [r7, #4]
 8020e36:	460b      	mov	r3, r1
 8020e38:	817b      	strh	r3, [r7, #10]
 8020e3a:	4613      	mov	r3, r2
 8020e3c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8020e3e:	897a      	ldrh	r2, [r7, #10]
 8020e40:	893b      	ldrh	r3, [r7, #8]
 8020e42:	4413      	add	r3, r2
 8020e44:	b29b      	uxth	r3, r3
 8020e46:	3314      	adds	r3, #20
 8020e48:	b29b      	uxth	r3, r3
 8020e4a:	2200      	movs	r2, #0
 8020e4c:	4619      	mov	r1, r3
 8020e4e:	2001      	movs	r0, #1
 8020e50:	f7fb fb98 	bl	801c584 <pbuf_alloc>
 8020e54:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8020e56:	697b      	ldr	r3, [r7, #20]
 8020e58:	2b00      	cmp	r3, #0
 8020e5a:	d057      	beq.n	8020f0c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8020e5c:	697b      	ldr	r3, [r7, #20]
 8020e5e:	895b      	ldrh	r3, [r3, #10]
 8020e60:	461a      	mov	r2, r3
 8020e62:	897b      	ldrh	r3, [r7, #10]
 8020e64:	3314      	adds	r3, #20
 8020e66:	429a      	cmp	r2, r3
 8020e68:	da05      	bge.n	8020e76 <tcp_output_alloc_header+0x4a>
 8020e6a:	4b2b      	ldr	r3, [pc, #172]	; (8020f18 <tcp_output_alloc_header+0xec>)
 8020e6c:	2273      	movs	r2, #115	; 0x73
 8020e6e:	492b      	ldr	r1, [pc, #172]	; (8020f1c <tcp_output_alloc_header+0xf0>)
 8020e70:	482b      	ldr	r0, [pc, #172]	; (8020f20 <tcp_output_alloc_header+0xf4>)
 8020e72:	f004 fe55 	bl	8025b20 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8020e76:	697b      	ldr	r3, [r7, #20]
 8020e78:	685b      	ldr	r3, [r3, #4]
 8020e7a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8020e7c:	68fb      	ldr	r3, [r7, #12]
 8020e7e:	8adb      	ldrh	r3, [r3, #22]
 8020e80:	4618      	mov	r0, r3
 8020e82:	f7f8 fa61 	bl	8019348 <lwip_htons>
 8020e86:	4603      	mov	r3, r0
 8020e88:	461a      	mov	r2, r3
 8020e8a:	693b      	ldr	r3, [r7, #16]
 8020e8c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8020e8e:	68fb      	ldr	r3, [r7, #12]
 8020e90:	8b1b      	ldrh	r3, [r3, #24]
 8020e92:	4618      	mov	r0, r3
 8020e94:	f7f8 fa58 	bl	8019348 <lwip_htons>
 8020e98:	4603      	mov	r3, r0
 8020e9a:	461a      	mov	r2, r3
 8020e9c:	693b      	ldr	r3, [r7, #16]
 8020e9e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8020ea0:	693b      	ldr	r3, [r7, #16]
 8020ea2:	687a      	ldr	r2, [r7, #4]
 8020ea4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8020ea6:	68fb      	ldr	r3, [r7, #12]
 8020ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020eaa:	4618      	mov	r0, r3
 8020eac:	f7f8 fa5a 	bl	8019364 <lwip_htonl>
 8020eb0:	4602      	mov	r2, r0
 8020eb2:	693b      	ldr	r3, [r7, #16]
 8020eb4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8020eb6:	897b      	ldrh	r3, [r7, #10]
 8020eb8:	089b      	lsrs	r3, r3, #2
 8020eba:	b29b      	uxth	r3, r3
 8020ebc:	3305      	adds	r3, #5
 8020ebe:	b29b      	uxth	r3, r3
 8020ec0:	031b      	lsls	r3, r3, #12
 8020ec2:	b29b      	uxth	r3, r3
 8020ec4:	f043 0310 	orr.w	r3, r3, #16
 8020ec8:	b29b      	uxth	r3, r3
 8020eca:	4618      	mov	r0, r3
 8020ecc:	f7f8 fa3c 	bl	8019348 <lwip_htons>
 8020ed0:	4603      	mov	r3, r0
 8020ed2:	461a      	mov	r2, r3
 8020ed4:	693b      	ldr	r3, [r7, #16]
 8020ed6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8020ed8:	68fb      	ldr	r3, [r7, #12]
 8020eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020edc:	4618      	mov	r0, r3
 8020ede:	f7f8 fa33 	bl	8019348 <lwip_htons>
 8020ee2:	4603      	mov	r3, r0
 8020ee4:	461a      	mov	r2, r3
 8020ee6:	693b      	ldr	r3, [r7, #16]
 8020ee8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8020eea:	693b      	ldr	r3, [r7, #16]
 8020eec:	2200      	movs	r2, #0
 8020eee:	741a      	strb	r2, [r3, #16]
 8020ef0:	2200      	movs	r2, #0
 8020ef2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8020ef4:	693b      	ldr	r3, [r7, #16]
 8020ef6:	2200      	movs	r2, #0
 8020ef8:	749a      	strb	r2, [r3, #18]
 8020efa:	2200      	movs	r2, #0
 8020efc:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020efe:	68fb      	ldr	r3, [r7, #12]
 8020f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f02:	68fa      	ldr	r2, [r7, #12]
 8020f04:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8020f06:	441a      	add	r2, r3
 8020f08:	68fb      	ldr	r3, [r7, #12]
 8020f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8020f0c:	697b      	ldr	r3, [r7, #20]
}
 8020f0e:	4618      	mov	r0, r3
 8020f10:	3718      	adds	r7, #24
 8020f12:	46bd      	mov	sp, r7
 8020f14:	bd80      	pop	{r7, pc}
 8020f16:	bf00      	nop
 8020f18:	080287b4 	.word	0x080287b4
 8020f1c:	080287e8 	.word	0x080287e8
 8020f20:	08028818 	.word	0x08028818

08020f24 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8020f24:	b5b0      	push	{r4, r5, r7, lr}
 8020f26:	b084      	sub	sp, #16
 8020f28:	af00      	add	r7, sp, #0
 8020f2a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8020f2c:	687b      	ldr	r3, [r7, #4]
 8020f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020f30:	2b00      	cmp	r3, #0
 8020f32:	d02c      	beq.n	8020f8e <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8020f34:	687b      	ldr	r3, [r7, #4]
 8020f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020f38:	60fb      	str	r3, [r7, #12]
 8020f3a:	e002      	b.n	8020f42 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8020f3c:	68fb      	ldr	r3, [r7, #12]
 8020f3e:	681b      	ldr	r3, [r3, #0]
 8020f40:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8020f42:	68fb      	ldr	r3, [r7, #12]
 8020f44:	681b      	ldr	r3, [r3, #0]
 8020f46:	2b00      	cmp	r3, #0
 8020f48:	d1f8      	bne.n	8020f3c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8020f4a:	68fb      	ldr	r3, [r7, #12]
 8020f4c:	68db      	ldr	r3, [r3, #12]
 8020f4e:	899b      	ldrh	r3, [r3, #12]
 8020f50:	b29b      	uxth	r3, r3
 8020f52:	4618      	mov	r0, r3
 8020f54:	f7f8 f9f8 	bl	8019348 <lwip_htons>
 8020f58:	4603      	mov	r3, r0
 8020f5a:	f003 0307 	and.w	r3, r3, #7
 8020f5e:	2b00      	cmp	r3, #0
 8020f60:	d115      	bne.n	8020f8e <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8020f62:	68fb      	ldr	r3, [r7, #12]
 8020f64:	68dc      	ldr	r4, [r3, #12]
 8020f66:	68fb      	ldr	r3, [r7, #12]
 8020f68:	68db      	ldr	r3, [r3, #12]
 8020f6a:	899b      	ldrh	r3, [r3, #12]
 8020f6c:	b29d      	uxth	r5, r3
 8020f6e:	2001      	movs	r0, #1
 8020f70:	f7f8 f9ea 	bl	8019348 <lwip_htons>
 8020f74:	4603      	mov	r3, r0
 8020f76:	432b      	orrs	r3, r5
 8020f78:	b29b      	uxth	r3, r3
 8020f7a:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
 8020f7c:	687b      	ldr	r3, [r7, #4]
 8020f7e:	7e9b      	ldrb	r3, [r3, #26]
 8020f80:	f043 0320 	orr.w	r3, r3, #32
 8020f84:	b2da      	uxtb	r2, r3
 8020f86:	687b      	ldr	r3, [r7, #4]
 8020f88:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8020f8a:	2300      	movs	r3, #0
 8020f8c:	e004      	b.n	8020f98 <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8020f8e:	2101      	movs	r1, #1
 8020f90:	6878      	ldr	r0, [r7, #4]
 8020f92:	f000 fcc3 	bl	802191c <tcp_enqueue_flags>
 8020f96:	4603      	mov	r3, r0
}
 8020f98:	4618      	mov	r0, r3
 8020f9a:	3710      	adds	r7, #16
 8020f9c:	46bd      	mov	sp, r7
 8020f9e:	bdb0      	pop	{r4, r5, r7, pc}

08020fa0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8020fa0:	b590      	push	{r4, r7, lr}
 8020fa2:	b087      	sub	sp, #28
 8020fa4:	af00      	add	r7, sp, #0
 8020fa6:	60f8      	str	r0, [r7, #12]
 8020fa8:	60b9      	str	r1, [r7, #8]
 8020faa:	603b      	str	r3, [r7, #0]
 8020fac:	4613      	mov	r3, r2
 8020fae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8020fb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8020fb4:	f003 0301 	and.w	r3, r3, #1
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	d001      	beq.n	8020fc0 <tcp_create_segment+0x20>
 8020fbc:	2304      	movs	r3, #4
 8020fbe:	e000      	b.n	8020fc2 <tcp_create_segment+0x22>
 8020fc0:	2300      	movs	r3, #0
 8020fc2:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8020fc4:	2003      	movs	r0, #3
 8020fc6:	f7fb f8a3 	bl	801c110 <memp_malloc>
 8020fca:	6138      	str	r0, [r7, #16]
 8020fcc:	693b      	ldr	r3, [r7, #16]
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	d104      	bne.n	8020fdc <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8020fd2:	68b8      	ldr	r0, [r7, #8]
 8020fd4:	f7fb fe48 	bl	801cc68 <pbuf_free>
    return NULL;
 8020fd8:	2300      	movs	r3, #0
 8020fda:	e061      	b.n	80210a0 <tcp_create_segment+0x100>
  }
  seg->flags = optflags;
 8020fdc:	693b      	ldr	r3, [r7, #16]
 8020fde:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8020fe2:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8020fe4:	693b      	ldr	r3, [r7, #16]
 8020fe6:	2200      	movs	r2, #0
 8020fe8:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8020fea:	693b      	ldr	r3, [r7, #16]
 8020fec:	68ba      	ldr	r2, [r7, #8]
 8020fee:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8020ff0:	68bb      	ldr	r3, [r7, #8]
 8020ff2:	891a      	ldrh	r2, [r3, #8]
 8020ff4:	7dfb      	ldrb	r3, [r7, #23]
 8020ff6:	b29b      	uxth	r3, r3
 8020ff8:	429a      	cmp	r2, r3
 8020ffa:	d205      	bcs.n	8021008 <tcp_create_segment+0x68>
 8020ffc:	4b2a      	ldr	r3, [pc, #168]	; (80210a8 <tcp_create_segment+0x108>)
 8020ffe:	22ba      	movs	r2, #186	; 0xba
 8021000:	492a      	ldr	r1, [pc, #168]	; (80210ac <tcp_create_segment+0x10c>)
 8021002:	482b      	ldr	r0, [pc, #172]	; (80210b0 <tcp_create_segment+0x110>)
 8021004:	f004 fd8c 	bl	8025b20 <iprintf>
  seg->len = p->tot_len - optlen;
 8021008:	68bb      	ldr	r3, [r7, #8]
 802100a:	891a      	ldrh	r2, [r3, #8]
 802100c:	7dfb      	ldrb	r3, [r7, #23]
 802100e:	b29b      	uxth	r3, r3
 8021010:	1ad3      	subs	r3, r2, r3
 8021012:	b29a      	uxth	r2, r3
 8021014:	693b      	ldr	r3, [r7, #16]
 8021016:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8021018:	2114      	movs	r1, #20
 802101a:	68b8      	ldr	r0, [r7, #8]
 802101c:	f7fb fe00 	bl	801cc20 <pbuf_header>
 8021020:	4603      	mov	r3, r0
 8021022:	2b00      	cmp	r3, #0
 8021024:	d004      	beq.n	8021030 <tcp_create_segment+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8021026:	6938      	ldr	r0, [r7, #16]
 8021028:	f7fd f939 	bl	801e29e <tcp_seg_free>
    return NULL;
 802102c:	2300      	movs	r3, #0
 802102e:	e037      	b.n	80210a0 <tcp_create_segment+0x100>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8021030:	693b      	ldr	r3, [r7, #16]
 8021032:	685b      	ldr	r3, [r3, #4]
 8021034:	685a      	ldr	r2, [r3, #4]
 8021036:	693b      	ldr	r3, [r7, #16]
 8021038:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 802103a:	693b      	ldr	r3, [r7, #16]
 802103c:	68dc      	ldr	r4, [r3, #12]
 802103e:	68fb      	ldr	r3, [r7, #12]
 8021040:	8adb      	ldrh	r3, [r3, #22]
 8021042:	4618      	mov	r0, r3
 8021044:	f7f8 f980 	bl	8019348 <lwip_htons>
 8021048:	4603      	mov	r3, r0
 802104a:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 802104c:	693b      	ldr	r3, [r7, #16]
 802104e:	68dc      	ldr	r4, [r3, #12]
 8021050:	68fb      	ldr	r3, [r7, #12]
 8021052:	8b1b      	ldrh	r3, [r3, #24]
 8021054:	4618      	mov	r0, r3
 8021056:	f7f8 f977 	bl	8019348 <lwip_htons>
 802105a:	4603      	mov	r3, r0
 802105c:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 802105e:	693b      	ldr	r3, [r7, #16]
 8021060:	68dc      	ldr	r4, [r3, #12]
 8021062:	6838      	ldr	r0, [r7, #0]
 8021064:	f7f8 f97e 	bl	8019364 <lwip_htonl>
 8021068:	4603      	mov	r3, r0
 802106a:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 802106c:	693b      	ldr	r3, [r7, #16]
 802106e:	68dc      	ldr	r4, [r3, #12]
 8021070:	7dfb      	ldrb	r3, [r7, #23]
 8021072:	089b      	lsrs	r3, r3, #2
 8021074:	b2db      	uxtb	r3, r3
 8021076:	b29b      	uxth	r3, r3
 8021078:	3305      	adds	r3, #5
 802107a:	b29b      	uxth	r3, r3
 802107c:	031b      	lsls	r3, r3, #12
 802107e:	b29a      	uxth	r2, r3
 8021080:	79fb      	ldrb	r3, [r7, #7]
 8021082:	b29b      	uxth	r3, r3
 8021084:	4313      	orrs	r3, r2
 8021086:	b29b      	uxth	r3, r3
 8021088:	4618      	mov	r0, r3
 802108a:	f7f8 f95d 	bl	8019348 <lwip_htons>
 802108e:	4603      	mov	r3, r0
 8021090:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8021092:	693b      	ldr	r3, [r7, #16]
 8021094:	68db      	ldr	r3, [r3, #12]
 8021096:	2200      	movs	r2, #0
 8021098:	749a      	strb	r2, [r3, #18]
 802109a:	2200      	movs	r2, #0
 802109c:	74da      	strb	r2, [r3, #19]
  return seg;
 802109e:	693b      	ldr	r3, [r7, #16]
}
 80210a0:	4618      	mov	r0, r3
 80210a2:	371c      	adds	r7, #28
 80210a4:	46bd      	mov	sp, r7
 80210a6:	bd90      	pop	{r4, r7, pc}
 80210a8:	080287b4 	.word	0x080287b4
 80210ac:	08028840 	.word	0x08028840
 80210b0:	08028818 	.word	0x08028818

080210b4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80210b4:	b580      	push	{r7, lr}
 80210b6:	b086      	sub	sp, #24
 80210b8:	af00      	add	r7, sp, #0
 80210ba:	607b      	str	r3, [r7, #4]
 80210bc:	4603      	mov	r3, r0
 80210be:	73fb      	strb	r3, [r7, #15]
 80210c0:	460b      	mov	r3, r1
 80210c2:	81bb      	strh	r3, [r7, #12]
 80210c4:	4613      	mov	r3, r2
 80210c6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80210c8:	89bb      	ldrh	r3, [r7, #12]
 80210ca:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80210cc:	89ba      	ldrh	r2, [r7, #12]
 80210ce:	897b      	ldrh	r3, [r7, #10]
 80210d0:	429a      	cmp	r2, r3
 80210d2:	d221      	bcs.n	8021118 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80210d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80210d8:	f003 0302 	and.w	r3, r3, #2
 80210dc:	2b00      	cmp	r3, #0
 80210de:	d111      	bne.n	8021104 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 80210e0:	6a3b      	ldr	r3, [r7, #32]
 80210e2:	7e9b      	ldrb	r3, [r3, #26]
 80210e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80210e8:	2b00      	cmp	r3, #0
 80210ea:	d115      	bne.n	8021118 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 80210ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80210f0:	2b00      	cmp	r3, #0
 80210f2:	d007      	beq.n	8021104 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 80210f4:	6a3b      	ldr	r3, [r7, #32]
 80210f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	d103      	bne.n	8021104 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 80210fc:	6a3b      	ldr	r3, [r7, #32]
 80210fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8021100:	2b00      	cmp	r3, #0
 8021102:	d009      	beq.n	8021118 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8021104:	89bb      	ldrh	r3, [r7, #12]
 8021106:	f203 23d3 	addw	r3, r3, #723	; 0x2d3
 802110a:	f023 0203 	bic.w	r2, r3, #3
 802110e:	897b      	ldrh	r3, [r7, #10]
 8021110:	4293      	cmp	r3, r2
 8021112:	bf28      	it	cs
 8021114:	4613      	movcs	r3, r2
 8021116:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8021118:	8af9      	ldrh	r1, [r7, #22]
 802111a:	7bfb      	ldrb	r3, [r7, #15]
 802111c:	2200      	movs	r2, #0
 802111e:	4618      	mov	r0, r3
 8021120:	f7fb fa30 	bl	801c584 <pbuf_alloc>
 8021124:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021126:	693b      	ldr	r3, [r7, #16]
 8021128:	2b00      	cmp	r3, #0
 802112a:	d101      	bne.n	8021130 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 802112c:	2300      	movs	r3, #0
 802112e:	e019      	b.n	8021164 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8021130:	693b      	ldr	r3, [r7, #16]
 8021132:	681b      	ldr	r3, [r3, #0]
 8021134:	2b00      	cmp	r3, #0
 8021136:	d006      	beq.n	8021146 <tcp_pbuf_prealloc+0x92>
 8021138:	4b0c      	ldr	r3, [pc, #48]	; (802116c <tcp_pbuf_prealloc+0xb8>)
 802113a:	f44f 7288 	mov.w	r2, #272	; 0x110
 802113e:	490c      	ldr	r1, [pc, #48]	; (8021170 <tcp_pbuf_prealloc+0xbc>)
 8021140:	480c      	ldr	r0, [pc, #48]	; (8021174 <tcp_pbuf_prealloc+0xc0>)
 8021142:	f004 fced 	bl	8025b20 <iprintf>
  *oversize = p->len - length;
 8021146:	693b      	ldr	r3, [r7, #16]
 8021148:	895a      	ldrh	r2, [r3, #10]
 802114a:	89bb      	ldrh	r3, [r7, #12]
 802114c:	1ad3      	subs	r3, r2, r3
 802114e:	b29a      	uxth	r2, r3
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8021154:	693b      	ldr	r3, [r7, #16]
 8021156:	89ba      	ldrh	r2, [r7, #12]
 8021158:	811a      	strh	r2, [r3, #8]
 802115a:	693b      	ldr	r3, [r7, #16]
 802115c:	891a      	ldrh	r2, [r3, #8]
 802115e:	693b      	ldr	r3, [r7, #16]
 8021160:	815a      	strh	r2, [r3, #10]
  return p;
 8021162:	693b      	ldr	r3, [r7, #16]
}
 8021164:	4618      	mov	r0, r3
 8021166:	3718      	adds	r7, #24
 8021168:	46bd      	mov	sp, r7
 802116a:	bd80      	pop	{r7, pc}
 802116c:	080287b4 	.word	0x080287b4
 8021170:	08028858 	.word	0x08028858
 8021174:	08028818 	.word	0x08028818

08021178 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8021178:	b580      	push	{r7, lr}
 802117a:	b082      	sub	sp, #8
 802117c:	af00      	add	r7, sp, #0
 802117e:	6078      	str	r0, [r7, #4]
 8021180:	460b      	mov	r3, r1
 8021182:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	7d1b      	ldrb	r3, [r3, #20]
 8021188:	2b04      	cmp	r3, #4
 802118a:	d00e      	beq.n	80211aa <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 802118c:	687b      	ldr	r3, [r7, #4]
 802118e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8021190:	2b07      	cmp	r3, #7
 8021192:	d00a      	beq.n	80211aa <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8021194:	687b      	ldr	r3, [r7, #4]
 8021196:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8021198:	2b02      	cmp	r3, #2
 802119a:	d006      	beq.n	80211aa <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80211a0:	2b03      	cmp	r3, #3
 80211a2:	d002      	beq.n	80211aa <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80211a4:	f06f 030a 	mvn.w	r3, #10
 80211a8:	e04f      	b.n	802124a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 80211aa:	887b      	ldrh	r3, [r7, #2]
 80211ac:	2b00      	cmp	r3, #0
 80211ae:	d101      	bne.n	80211b4 <tcp_write_checks+0x3c>
    return ERR_OK;
 80211b0:	2300      	movs	r3, #0
 80211b2:	e04a      	b.n	802124a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80211b4:	687b      	ldr	r3, [r7, #4]
 80211b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80211ba:	887a      	ldrh	r2, [r7, #2]
 80211bc:	429a      	cmp	r2, r3
 80211be:	d909      	bls.n	80211d4 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 80211c0:	687b      	ldr	r3, [r7, #4]
 80211c2:	7e9b      	ldrb	r3, [r3, #26]
 80211c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80211c8:	b2da      	uxtb	r2, r3
 80211ca:	687b      	ldr	r3, [r7, #4]
 80211cc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80211ce:	f04f 33ff 	mov.w	r3, #4294967295
 80211d2:	e03a      	b.n	802124a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80211d4:	687b      	ldr	r3, [r7, #4]
 80211d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80211da:	2b0a      	cmp	r3, #10
 80211dc:	d806      	bhi.n	80211ec <tcp_write_checks+0x74>
 80211de:	687b      	ldr	r3, [r7, #4]
 80211e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80211e4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80211e8:	4293      	cmp	r3, r2
 80211ea:	d909      	bls.n	8021200 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80211ec:	687b      	ldr	r3, [r7, #4]
 80211ee:	7e9b      	ldrb	r3, [r3, #26]
 80211f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80211f4:	b2da      	uxtb	r2, r3
 80211f6:	687b      	ldr	r3, [r7, #4]
 80211f8:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80211fa:	f04f 33ff 	mov.w	r3, #4294967295
 80211fe:	e024      	b.n	802124a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8021200:	687b      	ldr	r3, [r7, #4]
 8021202:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021206:	2b00      	cmp	r3, #0
 8021208:	d00f      	beq.n	802122a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 802120a:	687b      	ldr	r3, [r7, #4]
 802120c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802120e:	2b00      	cmp	r3, #0
 8021210:	d11a      	bne.n	8021248 <tcp_write_checks+0xd0>
 8021212:	687b      	ldr	r3, [r7, #4]
 8021214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021216:	2b00      	cmp	r3, #0
 8021218:	d116      	bne.n	8021248 <tcp_write_checks+0xd0>
 802121a:	4b0e      	ldr	r3, [pc, #56]	; (8021254 <tcp_write_checks+0xdc>)
 802121c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8021220:	490d      	ldr	r1, [pc, #52]	; (8021258 <tcp_write_checks+0xe0>)
 8021222:	480e      	ldr	r0, [pc, #56]	; (802125c <tcp_write_checks+0xe4>)
 8021224:	f004 fc7c 	bl	8025b20 <iprintf>
 8021228:	e00e      	b.n	8021248 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 802122a:	687b      	ldr	r3, [r7, #4]
 802122c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802122e:	2b00      	cmp	r3, #0
 8021230:	d103      	bne.n	802123a <tcp_write_checks+0xc2>
 8021232:	687b      	ldr	r3, [r7, #4]
 8021234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021236:	2b00      	cmp	r3, #0
 8021238:	d006      	beq.n	8021248 <tcp_write_checks+0xd0>
 802123a:	4b06      	ldr	r3, [pc, #24]	; (8021254 <tcp_write_checks+0xdc>)
 802123c:	f240 1259 	movw	r2, #345	; 0x159
 8021240:	4907      	ldr	r1, [pc, #28]	; (8021260 <tcp_write_checks+0xe8>)
 8021242:	4806      	ldr	r0, [pc, #24]	; (802125c <tcp_write_checks+0xe4>)
 8021244:	f004 fc6c 	bl	8025b20 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8021248:	2300      	movs	r3, #0
}
 802124a:	4618      	mov	r0, r3
 802124c:	3708      	adds	r7, #8
 802124e:	46bd      	mov	sp, r7
 8021250:	bd80      	pop	{r7, pc}
 8021252:	bf00      	nop
 8021254:	080287b4 	.word	0x080287b4
 8021258:	0802886c 	.word	0x0802886c
 802125c:	08028818 	.word	0x08028818
 8021260:	080288a8 	.word	0x080288a8

08021264 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8021264:	b5b0      	push	{r4, r5, r7, lr}
 8021266:	b09a      	sub	sp, #104	; 0x68
 8021268:	af04      	add	r7, sp, #16
 802126a:	60f8      	str	r0, [r7, #12]
 802126c:	60b9      	str	r1, [r7, #8]
 802126e:	4611      	mov	r1, r2
 8021270:	461a      	mov	r2, r3
 8021272:	460b      	mov	r3, r1
 8021274:	80fb      	strh	r3, [r7, #6]
 8021276:	4613      	mov	r3, r2
 8021278:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 802127a:	2300      	movs	r3, #0
 802127c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 802127e:	2300      	movs	r3, #0
 8021280:	653b      	str	r3, [r7, #80]	; 0x50
 8021282:	2300      	movs	r3, #0
 8021284:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021286:	2300      	movs	r3, #0
 8021288:	64bb      	str	r3, [r7, #72]	; 0x48
 802128a:	2300      	movs	r3, #0
 802128c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 802128e:	2300      	movs	r3, #0
 8021290:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8021294:	2300      	movs	r3, #0
 8021296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 802129a:	2300      	movs	r3, #0
 802129c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80212a0:	2300      	movs	r3, #0
 80212a2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80212a4:	2300      	movs	r3, #0
 80212a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80212a8:	2300      	movs	r3, #0
 80212aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80212ac:	68fb      	ldr	r3, [r7, #12]
 80212ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80212b2:	085b      	lsrs	r3, r3, #1
 80212b4:	b29a      	uxth	r2, r3
 80212b6:	68fb      	ldr	r3, [r7, #12]
 80212b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80212ba:	4293      	cmp	r3, r2
 80212bc:	bf28      	it	cs
 80212be:	4613      	movcs	r3, r2
 80212c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80212c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80212c4:	2b00      	cmp	r3, #0
 80212c6:	d102      	bne.n	80212ce <tcp_write+0x6a>
 80212c8:	68fb      	ldr	r3, [r7, #12]
 80212ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80212cc:	e000      	b.n	80212d0 <tcp_write+0x6c>
 80212ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80212d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80212d2:	68bb      	ldr	r3, [r7, #8]
 80212d4:	2b00      	cmp	r3, #0
 80212d6:	d109      	bne.n	80212ec <tcp_write+0x88>
 80212d8:	4b94      	ldr	r3, [pc, #592]	; (802152c <tcp_write+0x2c8>)
 80212da:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80212de:	4994      	ldr	r1, [pc, #592]	; (8021530 <tcp_write+0x2cc>)
 80212e0:	4894      	ldr	r0, [pc, #592]	; (8021534 <tcp_write+0x2d0>)
 80212e2:	f004 fc1d 	bl	8025b20 <iprintf>
 80212e6:	f06f 030f 	mvn.w	r3, #15
 80212ea:	e30d      	b.n	8021908 <tcp_write+0x6a4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80212ec:	88fb      	ldrh	r3, [r7, #6]
 80212ee:	4619      	mov	r1, r3
 80212f0:	68f8      	ldr	r0, [r7, #12]
 80212f2:	f7ff ff41 	bl	8021178 <tcp_write_checks>
 80212f6:	4603      	mov	r3, r0
 80212f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80212fc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8021300:	2b00      	cmp	r3, #0
 8021302:	d002      	beq.n	802130a <tcp_write+0xa6>
    return err;
 8021304:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8021308:	e2fe      	b.n	8021908 <tcp_write+0x6a4>
  }
  queuelen = pcb->snd_queuelen;
 802130a:	68fb      	ldr	r3, [r7, #12]
 802130c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021310:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8021314:	68fb      	ldr	r3, [r7, #12]
 8021316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021318:	2b00      	cmp	r3, #0
 802131a:	f000 80f8 	beq.w	802150e <tcp_write+0x2aa>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802131e:	68fb      	ldr	r3, [r7, #12]
 8021320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021322:	653b      	str	r3, [r7, #80]	; 0x50
 8021324:	e002      	b.n	802132c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8021326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021328:	681b      	ldr	r3, [r3, #0]
 802132a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802132c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802132e:	681b      	ldr	r3, [r3, #0]
 8021330:	2b00      	cmp	r3, #0
 8021332:	d1f8      	bne.n	8021326 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8021334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021336:	7a9b      	ldrb	r3, [r3, #10]
 8021338:	f003 0301 	and.w	r3, r3, #1
 802133c:	2b00      	cmp	r3, #0
 802133e:	d001      	beq.n	8021344 <tcp_write+0xe0>
 8021340:	2304      	movs	r3, #4
 8021342:	e000      	b.n	8021346 <tcp_write+0xe2>
 8021344:	2300      	movs	r3, #0
 8021346:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8021348:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802134a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802134c:	891b      	ldrh	r3, [r3, #8]
 802134e:	4619      	mov	r1, r3
 8021350:	8c3b      	ldrh	r3, [r7, #32]
 8021352:	440b      	add	r3, r1
 8021354:	429a      	cmp	r2, r3
 8021356:	da06      	bge.n	8021366 <tcp_write+0x102>
 8021358:	4b74      	ldr	r3, [pc, #464]	; (802152c <tcp_write+0x2c8>)
 802135a:	f240 12c7 	movw	r2, #455	; 0x1c7
 802135e:	4976      	ldr	r1, [pc, #472]	; (8021538 <tcp_write+0x2d4>)
 8021360:	4874      	ldr	r0, [pc, #464]	; (8021534 <tcp_write+0x2d0>)
 8021362:	f004 fbdd 	bl	8025b20 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8021366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021368:	891a      	ldrh	r2, [r3, #8]
 802136a:	8c3b      	ldrh	r3, [r7, #32]
 802136c:	4413      	add	r3, r2
 802136e:	b29b      	uxth	r3, r3
 8021370:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021372:	1ad3      	subs	r3, r2, r3
 8021374:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8021376:	68fb      	ldr	r3, [r7, #12]
 8021378:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 802137c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 802137e:	8a7b      	ldrh	r3, [r7, #18]
 8021380:	2b00      	cmp	r3, #0
 8021382:	d027      	beq.n	80213d4 <tcp_write+0x170>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8021384:	8a7b      	ldrh	r3, [r7, #18]
 8021386:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021388:	429a      	cmp	r2, r3
 802138a:	d206      	bcs.n	802139a <tcp_write+0x136>
 802138c:	4b67      	ldr	r3, [pc, #412]	; (802152c <tcp_write+0x2c8>)
 802138e:	f240 12d9 	movw	r2, #473	; 0x1d9
 8021392:	496a      	ldr	r1, [pc, #424]	; (802153c <tcp_write+0x2d8>)
 8021394:	4867      	ldr	r0, [pc, #412]	; (8021534 <tcp_write+0x2d0>)
 8021396:	f004 fbc3 	bl	8025b20 <iprintf>
      seg = last_unsent;
 802139a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802139c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 802139e:	8a7b      	ldrh	r3, [r7, #18]
 80213a0:	88fa      	ldrh	r2, [r7, #6]
 80213a2:	429a      	cmp	r2, r3
 80213a4:	d901      	bls.n	80213aa <tcp_write+0x146>
 80213a6:	8a7b      	ldrh	r3, [r7, #18]
 80213a8:	e000      	b.n	80213ac <tcp_write+0x148>
 80213aa:	88fb      	ldrh	r3, [r7, #6]
 80213ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80213ae:	4293      	cmp	r3, r2
 80213b0:	bfa8      	it	ge
 80213b2:	4613      	movge	r3, r2
 80213b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80213b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80213ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80213bc:	4413      	add	r3, r2
 80213be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80213c2:	8a7a      	ldrh	r2, [r7, #18]
 80213c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80213c6:	1ad3      	subs	r3, r2, r3
 80213c8:	b29b      	uxth	r3, r3
 80213ca:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80213cc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80213ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80213d0:	1ad3      	subs	r3, r2, r3
 80213d2:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80213d4:	8a7b      	ldrh	r3, [r7, #18]
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	d00b      	beq.n	80213f2 <tcp_write+0x18e>
 80213da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80213de:	88fb      	ldrh	r3, [r7, #6]
 80213e0:	429a      	cmp	r2, r3
 80213e2:	d006      	beq.n	80213f2 <tcp_write+0x18e>
 80213e4:	4b51      	ldr	r3, [pc, #324]	; (802152c <tcp_write+0x2c8>)
 80213e6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80213ea:	4955      	ldr	r1, [pc, #340]	; (8021540 <tcp_write+0x2dc>)
 80213ec:	4851      	ldr	r0, [pc, #324]	; (8021534 <tcp_write+0x2d0>)
 80213ee:	f004 fb97 	bl	8025b20 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80213f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80213f6:	88fb      	ldrh	r3, [r7, #6]
 80213f8:	429a      	cmp	r2, r3
 80213fa:	f080 8169 	bcs.w	80216d0 <tcp_write+0x46c>
 80213fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021400:	2b00      	cmp	r3, #0
 8021402:	f000 8165 	beq.w	80216d0 <tcp_write+0x46c>
 8021406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021408:	891b      	ldrh	r3, [r3, #8]
 802140a:	2b00      	cmp	r3, #0
 802140c:	f000 8160 	beq.w	80216d0 <tcp_write+0x46c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8021410:	88fa      	ldrh	r2, [r7, #6]
 8021412:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021416:	1ad2      	subs	r2, r2, r3
 8021418:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802141a:	4293      	cmp	r3, r2
 802141c:	bfa8      	it	ge
 802141e:	4613      	movge	r3, r2
 8021420:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8021422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021424:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8021426:	797b      	ldrb	r3, [r7, #5]
 8021428:	f003 0301 	and.w	r3, r3, #1
 802142c:	2b00      	cmp	r3, #0
 802142e:	d027      	beq.n	8021480 <tcp_write+0x21c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8021430:	f107 0012 	add.w	r0, r7, #18
 8021434:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021436:	8bf9      	ldrh	r1, [r7, #30]
 8021438:	2301      	movs	r3, #1
 802143a:	9302      	str	r3, [sp, #8]
 802143c:	797b      	ldrb	r3, [r7, #5]
 802143e:	9301      	str	r3, [sp, #4]
 8021440:	68fb      	ldr	r3, [r7, #12]
 8021442:	9300      	str	r3, [sp, #0]
 8021444:	4603      	mov	r3, r0
 8021446:	2004      	movs	r0, #4
 8021448:	f7ff fe34 	bl	80210b4 <tcp_pbuf_prealloc>
 802144c:	6578      	str	r0, [r7, #84]	; 0x54
 802144e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021450:	2b00      	cmp	r3, #0
 8021452:	f000 8227 	beq.w	80218a4 <tcp_write+0x640>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8021456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021458:	6858      	ldr	r0, [r3, #4]
 802145a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802145e:	68ba      	ldr	r2, [r7, #8]
 8021460:	4413      	add	r3, r2
 8021462:	8bfa      	ldrh	r2, [r7, #30]
 8021464:	4619      	mov	r1, r3
 8021466:	f005 f82e 	bl	80264c6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 802146a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802146c:	f7fb fc96 	bl	801cd9c <pbuf_clen>
 8021470:	4603      	mov	r3, r0
 8021472:	461a      	mov	r2, r3
 8021474:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021478:	4413      	add	r3, r2
 802147a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 802147e:	e03f      	b.n	8021500 <tcp_write+0x29c>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8021480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021482:	685b      	ldr	r3, [r3, #4]
 8021484:	637b      	str	r3, [r7, #52]	; 0x34
 8021486:	e002      	b.n	802148e <tcp_write+0x22a>
 8021488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802148a:	681b      	ldr	r3, [r3, #0]
 802148c:	637b      	str	r3, [r7, #52]	; 0x34
 802148e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021490:	681b      	ldr	r3, [r3, #0]
 8021492:	2b00      	cmp	r3, #0
 8021494:	d1f8      	bne.n	8021488 <tcp_write+0x224>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8021496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021498:	7b1b      	ldrb	r3, [r3, #12]
 802149a:	2b01      	cmp	r3, #1
 802149c:	d115      	bne.n	80214ca <tcp_write+0x266>
 802149e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80214a0:	685b      	ldr	r3, [r3, #4]
 80214a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80214a4:	8952      	ldrh	r2, [r2, #10]
 80214a6:	441a      	add	r2, r3
 80214a8:	68bb      	ldr	r3, [r7, #8]
 80214aa:	429a      	cmp	r2, r3
 80214ac:	d10d      	bne.n	80214ca <tcp_write+0x266>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80214ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80214b2:	2b00      	cmp	r3, #0
 80214b4:	d006      	beq.n	80214c4 <tcp_write+0x260>
 80214b6:	4b1d      	ldr	r3, [pc, #116]	; (802152c <tcp_write+0x2c8>)
 80214b8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80214bc:	4921      	ldr	r1, [pc, #132]	; (8021544 <tcp_write+0x2e0>)
 80214be:	481d      	ldr	r0, [pc, #116]	; (8021534 <tcp_write+0x2d0>)
 80214c0:	f004 fb2e 	bl	8025b20 <iprintf>
          extendlen = seglen;
 80214c4:	8bfb      	ldrh	r3, [r7, #30]
 80214c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80214c8:	e01a      	b.n	8021500 <tcp_write+0x29c>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80214ca:	8bfb      	ldrh	r3, [r7, #30]
 80214cc:	2201      	movs	r2, #1
 80214ce:	4619      	mov	r1, r3
 80214d0:	2004      	movs	r0, #4
 80214d2:	f7fb f857 	bl	801c584 <pbuf_alloc>
 80214d6:	6578      	str	r0, [r7, #84]	; 0x54
 80214d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80214da:	2b00      	cmp	r3, #0
 80214dc:	f000 81e4 	beq.w	80218a8 <tcp_write+0x644>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 80214e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80214e4:	68ba      	ldr	r2, [r7, #8]
 80214e6:	441a      	add	r2, r3
 80214e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80214ea:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80214ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80214ee:	f7fb fc55 	bl	801cd9c <pbuf_clen>
 80214f2:	4603      	mov	r3, r0
 80214f4:	461a      	mov	r2, r3
 80214f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80214fa:	4413      	add	r3, r2
 80214fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8021500:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021504:	8bfb      	ldrh	r3, [r7, #30]
 8021506:	4413      	add	r3, r2
 8021508:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 802150c:	e0e0      	b.n	80216d0 <tcp_write+0x46c>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 802150e:	68fb      	ldr	r3, [r7, #12]
 8021510:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8021514:	2b00      	cmp	r3, #0
 8021516:	f000 80db 	beq.w	80216d0 <tcp_write+0x46c>
 802151a:	4b04      	ldr	r3, [pc, #16]	; (802152c <tcp_write+0x2c8>)
 802151c:	f240 2225 	movw	r2, #549	; 0x225
 8021520:	4909      	ldr	r1, [pc, #36]	; (8021548 <tcp_write+0x2e4>)
 8021522:	4804      	ldr	r0, [pc, #16]	; (8021534 <tcp_write+0x2d0>)
 8021524:	f004 fafc 	bl	8025b20 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8021528:	e0d2      	b.n	80216d0 <tcp_write+0x46c>
 802152a:	bf00      	nop
 802152c:	080287b4 	.word	0x080287b4
 8021530:	080288dc 	.word	0x080288dc
 8021534:	08028818 	.word	0x08028818
 8021538:	08028910 	.word	0x08028910
 802153c:	08028928 	.word	0x08028928
 8021540:	08028948 	.word	0x08028948
 8021544:	08028968 	.word	0x08028968
 8021548:	08028994 	.word	0x08028994
    struct pbuf *p;
    u16_t left = len - pos;
 802154c:	88fa      	ldrh	r2, [r7, #6]
 802154e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021552:	1ad3      	subs	r3, r2, r3
 8021554:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8021556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802155a:	b29b      	uxth	r3, r3
 802155c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802155e:	1ad3      	subs	r3, r2, r3
 8021560:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8021562:	8b7a      	ldrh	r2, [r7, #26]
 8021564:	8bbb      	ldrh	r3, [r7, #28]
 8021566:	4293      	cmp	r3, r2
 8021568:	bf28      	it	cs
 802156a:	4613      	movcs	r3, r2
 802156c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 802156e:	797b      	ldrb	r3, [r7, #5]
 8021570:	f003 0301 	and.w	r3, r3, #1
 8021574:	2b00      	cmp	r3, #0
 8021576:	d036      	beq.n	80215e6 <tcp_write+0x382>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8021578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802157c:	b29a      	uxth	r2, r3
 802157e:	8b3b      	ldrh	r3, [r7, #24]
 8021580:	4413      	add	r3, r2
 8021582:	b299      	uxth	r1, r3
 8021584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021586:	2b00      	cmp	r3, #0
 8021588:	bf0c      	ite	eq
 802158a:	2301      	moveq	r3, #1
 802158c:	2300      	movne	r3, #0
 802158e:	b2db      	uxtb	r3, r3
 8021590:	f107 0012 	add.w	r0, r7, #18
 8021594:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021596:	9302      	str	r3, [sp, #8]
 8021598:	797b      	ldrb	r3, [r7, #5]
 802159a:	9301      	str	r3, [sp, #4]
 802159c:	68fb      	ldr	r3, [r7, #12]
 802159e:	9300      	str	r3, [sp, #0]
 80215a0:	4603      	mov	r3, r0
 80215a2:	2000      	movs	r0, #0
 80215a4:	f7ff fd86 	bl	80210b4 <tcp_pbuf_prealloc>
 80215a8:	6338      	str	r0, [r7, #48]	; 0x30
 80215aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	f000 817d 	beq.w	80218ac <tcp_write+0x648>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80215b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215b4:	895b      	ldrh	r3, [r3, #10]
 80215b6:	8b3a      	ldrh	r2, [r7, #24]
 80215b8:	429a      	cmp	r2, r3
 80215ba:	d906      	bls.n	80215ca <tcp_write+0x366>
 80215bc:	4b8f      	ldr	r3, [pc, #572]	; (80217fc <tcp_write+0x598>)
 80215be:	f240 2241 	movw	r2, #577	; 0x241
 80215c2:	498f      	ldr	r1, [pc, #572]	; (8021800 <tcp_write+0x59c>)
 80215c4:	488f      	ldr	r0, [pc, #572]	; (8021804 <tcp_write+0x5a0>)
 80215c6:	f004 faab 	bl	8025b20 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80215ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215cc:	685a      	ldr	r2, [r3, #4]
 80215ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80215d2:	18d0      	adds	r0, r2, r3
 80215d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80215d8:	68ba      	ldr	r2, [r7, #8]
 80215da:	4413      	add	r3, r2
 80215dc:	8b3a      	ldrh	r2, [r7, #24]
 80215de:	4619      	mov	r1, r3
 80215e0:	f004 ff71 	bl	80264c6 <memcpy>
 80215e4:	e02e      	b.n	8021644 <tcp_write+0x3e0>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80215e6:	8a7b      	ldrh	r3, [r7, #18]
 80215e8:	2b00      	cmp	r3, #0
 80215ea:	d006      	beq.n	80215fa <tcp_write+0x396>
 80215ec:	4b83      	ldr	r3, [pc, #524]	; (80217fc <tcp_write+0x598>)
 80215ee:	f240 224b 	movw	r2, #587	; 0x24b
 80215f2:	4985      	ldr	r1, [pc, #532]	; (8021808 <tcp_write+0x5a4>)
 80215f4:	4883      	ldr	r0, [pc, #524]	; (8021804 <tcp_write+0x5a0>)
 80215f6:	f004 fa93 	bl	8025b20 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80215fa:	8b3b      	ldrh	r3, [r7, #24]
 80215fc:	2201      	movs	r2, #1
 80215fe:	4619      	mov	r1, r3
 8021600:	2000      	movs	r0, #0
 8021602:	f7fa ffbf 	bl	801c584 <pbuf_alloc>
 8021606:	6178      	str	r0, [r7, #20]
 8021608:	697b      	ldr	r3, [r7, #20]
 802160a:	2b00      	cmp	r3, #0
 802160c:	f000 8150 	beq.w	80218b0 <tcp_write+0x64c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8021610:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021614:	68ba      	ldr	r2, [r7, #8]
 8021616:	441a      	add	r2, r3
 8021618:	697b      	ldr	r3, [r7, #20]
 802161a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802161c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021620:	b29b      	uxth	r3, r3
 8021622:	2200      	movs	r2, #0
 8021624:	4619      	mov	r1, r3
 8021626:	2000      	movs	r0, #0
 8021628:	f7fa ffac 	bl	801c584 <pbuf_alloc>
 802162c:	6338      	str	r0, [r7, #48]	; 0x30
 802162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021630:	2b00      	cmp	r3, #0
 8021632:	d103      	bne.n	802163c <tcp_write+0x3d8>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8021634:	6978      	ldr	r0, [r7, #20]
 8021636:	f7fb fb17 	bl	801cc68 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 802163a:	e13c      	b.n	80218b6 <tcp_write+0x652>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 802163c:	6979      	ldr	r1, [r7, #20]
 802163e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021640:	f7fb fbec 	bl	801ce1c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8021644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021646:	f7fb fba9 	bl	801cd9c <pbuf_clen>
 802164a:	4603      	mov	r3, r0
 802164c:	461a      	mov	r2, r3
 802164e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021652:	4413      	add	r3, r2
 8021654:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8021658:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802165c:	2b0b      	cmp	r3, #11
 802165e:	d805      	bhi.n	802166c <tcp_write+0x408>
 8021660:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021664:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8021668:	4293      	cmp	r3, r2
 802166a:	d903      	bls.n	8021674 <tcp_write+0x410>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 802166c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802166e:	f7fb fafb 	bl	801cc68 <pbuf_free>
      goto memerr;
 8021672:	e120      	b.n	80218b6 <tcp_write+0x652>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8021674:	68fb      	ldr	r3, [r7, #12]
 8021676:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021678:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802167c:	441a      	add	r2, r3
 802167e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021682:	9300      	str	r3, [sp, #0]
 8021684:	4613      	mov	r3, r2
 8021686:	2200      	movs	r2, #0
 8021688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802168a:	68f8      	ldr	r0, [r7, #12]
 802168c:	f7ff fc88 	bl	8020fa0 <tcp_create_segment>
 8021690:	64f8      	str	r0, [r7, #76]	; 0x4c
 8021692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021694:	2b00      	cmp	r3, #0
 8021696:	f000 810d 	beq.w	80218b4 <tcp_write+0x650>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 802169a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802169c:	2b00      	cmp	r3, #0
 802169e:	d102      	bne.n	80216a6 <tcp_write+0x442>
      queue = seg;
 80216a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80216a2:	647b      	str	r3, [r7, #68]	; 0x44
 80216a4:	e00c      	b.n	80216c0 <tcp_write+0x45c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80216a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80216a8:	2b00      	cmp	r3, #0
 80216aa:	d106      	bne.n	80216ba <tcp_write+0x456>
 80216ac:	4b53      	ldr	r3, [pc, #332]	; (80217fc <tcp_write+0x598>)
 80216ae:	f240 2285 	movw	r2, #645	; 0x285
 80216b2:	4956      	ldr	r1, [pc, #344]	; (802180c <tcp_write+0x5a8>)
 80216b4:	4853      	ldr	r0, [pc, #332]	; (8021804 <tcp_write+0x5a0>)
 80216b6:	f004 fa33 	bl	8025b20 <iprintf>
      prev_seg->next = seg;
 80216ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80216bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80216be:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80216c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80216c2:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80216c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80216c8:	8b3b      	ldrh	r3, [r7, #24]
 80216ca:	4413      	add	r3, r2
 80216cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80216d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80216d4:	88fb      	ldrh	r3, [r7, #6]
 80216d6:	429a      	cmp	r2, r3
 80216d8:	f4ff af38 	bcc.w	802154c <tcp_write+0x2e8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80216dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80216de:	2b00      	cmp	r3, #0
 80216e0:	d02c      	beq.n	802173c <tcp_write+0x4d8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80216e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80216e4:	685b      	ldr	r3, [r3, #4]
 80216e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80216e8:	e01e      	b.n	8021728 <tcp_write+0x4c4>
      p->tot_len += oversize_used;
 80216ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216ec:	891a      	ldrh	r2, [r3, #8]
 80216ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80216f0:	4413      	add	r3, r2
 80216f2:	b29a      	uxth	r2, r3
 80216f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216f6:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80216f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216fa:	681b      	ldr	r3, [r3, #0]
 80216fc:	2b00      	cmp	r3, #0
 80216fe:	d110      	bne.n	8021722 <tcp_write+0x4be>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8021700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021702:	685b      	ldr	r3, [r3, #4]
 8021704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021706:	8952      	ldrh	r2, [r2, #10]
 8021708:	4413      	add	r3, r2
 802170a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 802170c:	68b9      	ldr	r1, [r7, #8]
 802170e:	4618      	mov	r0, r3
 8021710:	f004 fed9 	bl	80264c6 <memcpy>
        p->len += oversize_used;
 8021714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021716:	895a      	ldrh	r2, [r3, #10]
 8021718:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802171a:	4413      	add	r3, r2
 802171c:	b29a      	uxth	r2, r3
 802171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021720:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8021722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021724:	681b      	ldr	r3, [r3, #0]
 8021726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802172a:	2b00      	cmp	r3, #0
 802172c:	d1dd      	bne.n	80216ea <tcp_write+0x486>
      }
    }
    last_unsent->len += oversize_used;
 802172e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021730:	891a      	ldrh	r2, [r3, #8]
 8021732:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021734:	4413      	add	r3, r2
 8021736:	b29a      	uxth	r2, r3
 8021738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802173a:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 802173c:	8a7a      	ldrh	r2, [r7, #18]
 802173e:	68fb      	ldr	r3, [r7, #12]
 8021740:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8021744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021746:	2b00      	cmp	r3, #0
 8021748:	d018      	beq.n	802177c <tcp_write+0x518>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 802174a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802174c:	2b00      	cmp	r3, #0
 802174e:	d106      	bne.n	802175e <tcp_write+0x4fa>
 8021750:	4b2a      	ldr	r3, [pc, #168]	; (80217fc <tcp_write+0x598>)
 8021752:	f240 22bb 	movw	r2, #699	; 0x2bb
 8021756:	492e      	ldr	r1, [pc, #184]	; (8021810 <tcp_write+0x5ac>)
 8021758:	482a      	ldr	r0, [pc, #168]	; (8021804 <tcp_write+0x5a0>)
 802175a:	f004 f9e1 	bl	8025b20 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 802175e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021760:	685b      	ldr	r3, [r3, #4]
 8021762:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8021764:	4618      	mov	r0, r3
 8021766:	f7fb fb59 	bl	801ce1c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 802176a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802176c:	891a      	ldrh	r2, [r3, #8]
 802176e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021770:	891b      	ldrh	r3, [r3, #8]
 8021772:	4413      	add	r3, r2
 8021774:	b29a      	uxth	r2, r3
 8021776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021778:	811a      	strh	r2, [r3, #8]
 802177a:	e037      	b.n	80217ec <tcp_write+0x588>
  } else if (extendlen > 0) {
 802177c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802177e:	2b00      	cmp	r3, #0
 8021780:	d034      	beq.n	80217ec <tcp_write+0x588>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8021782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021784:	2b00      	cmp	r3, #0
 8021786:	d003      	beq.n	8021790 <tcp_write+0x52c>
 8021788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802178a:	685b      	ldr	r3, [r3, #4]
 802178c:	2b00      	cmp	r3, #0
 802178e:	d106      	bne.n	802179e <tcp_write+0x53a>
 8021790:	4b1a      	ldr	r3, [pc, #104]	; (80217fc <tcp_write+0x598>)
 8021792:	f240 22c1 	movw	r2, #705	; 0x2c1
 8021796:	491f      	ldr	r1, [pc, #124]	; (8021814 <tcp_write+0x5b0>)
 8021798:	481a      	ldr	r0, [pc, #104]	; (8021804 <tcp_write+0x5a0>)
 802179a:	f004 f9c1 	bl	8025b20 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 802179e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217a0:	685b      	ldr	r3, [r3, #4]
 80217a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80217a4:	e009      	b.n	80217ba <tcp_write+0x556>
      p->tot_len += extendlen;
 80217a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217a8:	891a      	ldrh	r2, [r3, #8]
 80217aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80217ac:	4413      	add	r3, r2
 80217ae:	b29a      	uxth	r2, r3
 80217b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217b2:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80217b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217b6:	681b      	ldr	r3, [r3, #0]
 80217b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80217ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217bc:	681b      	ldr	r3, [r3, #0]
 80217be:	2b00      	cmp	r3, #0
 80217c0:	d1f1      	bne.n	80217a6 <tcp_write+0x542>
    }
    p->tot_len += extendlen;
 80217c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217c4:	891a      	ldrh	r2, [r3, #8]
 80217c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80217c8:	4413      	add	r3, r2
 80217ca:	b29a      	uxth	r2, r3
 80217cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217ce:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80217d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217d2:	895a      	ldrh	r2, [r3, #10]
 80217d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80217d6:	4413      	add	r3, r2
 80217d8:	b29a      	uxth	r2, r3
 80217da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217dc:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80217de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217e0:	891a      	ldrh	r2, [r3, #8]
 80217e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80217e4:	4413      	add	r3, r2
 80217e6:	b29a      	uxth	r2, r3
 80217e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217ea:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80217ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217ee:	2b00      	cmp	r3, #0
 80217f0:	d112      	bne.n	8021818 <tcp_write+0x5b4>
    pcb->unsent = queue;
 80217f2:	68fb      	ldr	r3, [r7, #12]
 80217f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80217f6:	669a      	str	r2, [r3, #104]	; 0x68
 80217f8:	e011      	b.n	802181e <tcp_write+0x5ba>
 80217fa:	bf00      	nop
 80217fc:	080287b4 	.word	0x080287b4
 8021800:	080289c4 	.word	0x080289c4
 8021804:	08028818 	.word	0x08028818
 8021808:	08028a04 	.word	0x08028a04
 802180c:	08028a14 	.word	0x08028a14
 8021810:	08028a28 	.word	0x08028a28
 8021814:	08028a60 	.word	0x08028a60
  } else {
    last_unsent->next = queue;
 8021818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802181a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802181c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 802181e:	68fb      	ldr	r3, [r7, #12]
 8021820:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021822:	88fb      	ldrh	r3, [r7, #6]
 8021824:	441a      	add	r2, r3
 8021826:	68fb      	ldr	r3, [r7, #12]
 8021828:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 802182a:	68fb      	ldr	r3, [r7, #12]
 802182c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8021830:	88fb      	ldrh	r3, [r7, #6]
 8021832:	1ad3      	subs	r3, r2, r3
 8021834:	b29a      	uxth	r2, r3
 8021836:	68fb      	ldr	r3, [r7, #12]
 8021838:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 802183c:	68fb      	ldr	r3, [r7, #12]
 802183e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8021842:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8021846:	68fb      	ldr	r3, [r7, #12]
 8021848:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802184c:	2b00      	cmp	r3, #0
 802184e:	d00e      	beq.n	802186e <tcp_write+0x60a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8021850:	68fb      	ldr	r3, [r7, #12]
 8021852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021854:	2b00      	cmp	r3, #0
 8021856:	d10a      	bne.n	802186e <tcp_write+0x60a>
 8021858:	68fb      	ldr	r3, [r7, #12]
 802185a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802185c:	2b00      	cmp	r3, #0
 802185e:	d106      	bne.n	802186e <tcp_write+0x60a>
 8021860:	4b2b      	ldr	r3, [pc, #172]	; (8021910 <tcp_write+0x6ac>)
 8021862:	f240 22ed 	movw	r2, #749	; 0x2ed
 8021866:	492b      	ldr	r1, [pc, #172]	; (8021914 <tcp_write+0x6b0>)
 8021868:	482b      	ldr	r0, [pc, #172]	; (8021918 <tcp_write+0x6b4>)
 802186a:	f004 f959 	bl	8025b20 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 802186e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021870:	2b00      	cmp	r3, #0
 8021872:	d015      	beq.n	80218a0 <tcp_write+0x63c>
 8021874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021876:	68db      	ldr	r3, [r3, #12]
 8021878:	2b00      	cmp	r3, #0
 802187a:	d011      	beq.n	80218a0 <tcp_write+0x63c>
 802187c:	797b      	ldrb	r3, [r7, #5]
 802187e:	f003 0302 	and.w	r3, r3, #2
 8021882:	2b00      	cmp	r3, #0
 8021884:	d10c      	bne.n	80218a0 <tcp_write+0x63c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8021886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021888:	68dc      	ldr	r4, [r3, #12]
 802188a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802188c:	68db      	ldr	r3, [r3, #12]
 802188e:	899b      	ldrh	r3, [r3, #12]
 8021890:	b29d      	uxth	r5, r3
 8021892:	2008      	movs	r0, #8
 8021894:	f7f7 fd58 	bl	8019348 <lwip_htons>
 8021898:	4603      	mov	r3, r0
 802189a:	432b      	orrs	r3, r5
 802189c:	b29b      	uxth	r3, r3
 802189e:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 80218a0:	2300      	movs	r3, #0
 80218a2:	e031      	b.n	8021908 <tcp_write+0x6a4>
          goto memerr;
 80218a4:	bf00      	nop
 80218a6:	e006      	b.n	80218b6 <tcp_write+0x652>
            goto memerr;
 80218a8:	bf00      	nop
 80218aa:	e004      	b.n	80218b6 <tcp_write+0x652>
        goto memerr;
 80218ac:	bf00      	nop
 80218ae:	e002      	b.n	80218b6 <tcp_write+0x652>
        goto memerr;
 80218b0:	bf00      	nop
 80218b2:	e000      	b.n	80218b6 <tcp_write+0x652>
      goto memerr;
 80218b4:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 80218b6:	68fb      	ldr	r3, [r7, #12]
 80218b8:	7e9b      	ldrb	r3, [r3, #26]
 80218ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80218be:	b2da      	uxtb	r2, r3
 80218c0:	68fb      	ldr	r3, [r7, #12]
 80218c2:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80218c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80218c6:	2b00      	cmp	r3, #0
 80218c8:	d002      	beq.n	80218d0 <tcp_write+0x66c>
    pbuf_free(concat_p);
 80218ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80218cc:	f7fb f9cc 	bl	801cc68 <pbuf_free>
  }
  if (queue != NULL) {
 80218d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80218d2:	2b00      	cmp	r3, #0
 80218d4:	d002      	beq.n	80218dc <tcp_write+0x678>
    tcp_segs_free(queue);
 80218d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80218d8:	f7fc fccd 	bl	801e276 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80218dc:	68fb      	ldr	r3, [r7, #12]
 80218de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80218e2:	2b00      	cmp	r3, #0
 80218e4:	d00e      	beq.n	8021904 <tcp_write+0x6a0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80218e6:	68fb      	ldr	r3, [r7, #12]
 80218e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80218ea:	2b00      	cmp	r3, #0
 80218ec:	d10a      	bne.n	8021904 <tcp_write+0x6a0>
 80218ee:	68fb      	ldr	r3, [r7, #12]
 80218f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	d106      	bne.n	8021904 <tcp_write+0x6a0>
 80218f6:	4b06      	ldr	r3, [pc, #24]	; (8021910 <tcp_write+0x6ac>)
 80218f8:	f240 3202 	movw	r2, #770	; 0x302
 80218fc:	4905      	ldr	r1, [pc, #20]	; (8021914 <tcp_write+0x6b0>)
 80218fe:	4806      	ldr	r0, [pc, #24]	; (8021918 <tcp_write+0x6b4>)
 8021900:	f004 f90e 	bl	8025b20 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8021904:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021908:	4618      	mov	r0, r3
 802190a:	3758      	adds	r7, #88	; 0x58
 802190c:	46bd      	mov	sp, r7
 802190e:	bdb0      	pop	{r4, r5, r7, pc}
 8021910:	080287b4 	.word	0x080287b4
 8021914:	08028a98 	.word	0x08028a98
 8021918:	08028818 	.word	0x08028818

0802191c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 802191c:	b580      	push	{r7, lr}
 802191e:	b08a      	sub	sp, #40	; 0x28
 8021920:	af02      	add	r7, sp, #8
 8021922:	6078      	str	r0, [r7, #4]
 8021924:	460b      	mov	r3, r1
 8021926:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8021928:	2300      	movs	r3, #0
 802192a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 802192c:	2300      	movs	r3, #0
 802192e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8021930:	78fb      	ldrb	r3, [r7, #3]
 8021932:	f003 0303 	and.w	r3, r3, #3
 8021936:	2b00      	cmp	r3, #0
 8021938:	d106      	bne.n	8021948 <tcp_enqueue_flags+0x2c>
 802193a:	4b70      	ldr	r3, [pc, #448]	; (8021afc <tcp_enqueue_flags+0x1e0>)
 802193c:	f240 321b 	movw	r2, #795	; 0x31b
 8021940:	496f      	ldr	r1, [pc, #444]	; (8021b00 <tcp_enqueue_flags+0x1e4>)
 8021942:	4870      	ldr	r0, [pc, #448]	; (8021b04 <tcp_enqueue_flags+0x1e8>)
 8021944:	f004 f8ec 	bl	8025b20 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8021948:	687b      	ldr	r3, [r7, #4]
 802194a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802194e:	2b0a      	cmp	r3, #10
 8021950:	d806      	bhi.n	8021960 <tcp_enqueue_flags+0x44>
 8021952:	687b      	ldr	r3, [r7, #4]
 8021954:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021958:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 802195c:	4293      	cmp	r3, r2
 802195e:	d90e      	bls.n	802197e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8021960:	78fb      	ldrb	r3, [r7, #3]
 8021962:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8021966:	2b00      	cmp	r3, #0
 8021968:	d109      	bne.n	802197e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 802196a:	687b      	ldr	r3, [r7, #4]
 802196c:	7e9b      	ldrb	r3, [r3, #26]
 802196e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021972:	b2da      	uxtb	r2, r3
 8021974:	687b      	ldr	r3, [r7, #4]
 8021976:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8021978:	f04f 33ff 	mov.w	r3, #4294967295
 802197c:	e0ba      	b.n	8021af4 <tcp_enqueue_flags+0x1d8>
  }

  if (flags & TCP_SYN) {
 802197e:	78fb      	ldrb	r3, [r7, #3]
 8021980:	f003 0302 	and.w	r3, r3, #2
 8021984:	2b00      	cmp	r3, #0
 8021986:	d001      	beq.n	802198c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8021988:	2301      	movs	r3, #1
 802198a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 802198c:	7ffb      	ldrb	r3, [r7, #31]
 802198e:	f003 0301 	and.w	r3, r3, #1
 8021992:	2b00      	cmp	r3, #0
 8021994:	d001      	beq.n	802199a <tcp_enqueue_flags+0x7e>
 8021996:	2304      	movs	r3, #4
 8021998:	e000      	b.n	802199c <tcp_enqueue_flags+0x80>
 802199a:	2300      	movs	r3, #0
 802199c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802199e:	7dfb      	ldrb	r3, [r7, #23]
 80219a0:	b29b      	uxth	r3, r3
 80219a2:	2200      	movs	r2, #0
 80219a4:	4619      	mov	r1, r3
 80219a6:	2000      	movs	r0, #0
 80219a8:	f7fa fdec 	bl	801c584 <pbuf_alloc>
 80219ac:	6138      	str	r0, [r7, #16]
 80219ae:	693b      	ldr	r3, [r7, #16]
 80219b0:	2b00      	cmp	r3, #0
 80219b2:	d109      	bne.n	80219c8 <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
 80219b4:	687b      	ldr	r3, [r7, #4]
 80219b6:	7e9b      	ldrb	r3, [r3, #26]
 80219b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80219bc:	b2da      	uxtb	r2, r3
 80219be:	687b      	ldr	r3, [r7, #4]
 80219c0:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80219c2:	f04f 33ff 	mov.w	r3, #4294967295
 80219c6:	e095      	b.n	8021af4 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80219c8:	693b      	ldr	r3, [r7, #16]
 80219ca:	895a      	ldrh	r2, [r3, #10]
 80219cc:	7dfb      	ldrb	r3, [r7, #23]
 80219ce:	b29b      	uxth	r3, r3
 80219d0:	429a      	cmp	r2, r3
 80219d2:	d206      	bcs.n	80219e2 <tcp_enqueue_flags+0xc6>
 80219d4:	4b49      	ldr	r3, [pc, #292]	; (8021afc <tcp_enqueue_flags+0x1e0>)
 80219d6:	f240 3241 	movw	r2, #833	; 0x341
 80219da:	494b      	ldr	r1, [pc, #300]	; (8021b08 <tcp_enqueue_flags+0x1ec>)
 80219dc:	4849      	ldr	r0, [pc, #292]	; (8021b04 <tcp_enqueue_flags+0x1e8>)
 80219de:	f004 f89f 	bl	8025b20 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80219e2:	687b      	ldr	r3, [r7, #4]
 80219e4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80219e6:	78fa      	ldrb	r2, [r7, #3]
 80219e8:	7ffb      	ldrb	r3, [r7, #31]
 80219ea:	9300      	str	r3, [sp, #0]
 80219ec:	460b      	mov	r3, r1
 80219ee:	6939      	ldr	r1, [r7, #16]
 80219f0:	6878      	ldr	r0, [r7, #4]
 80219f2:	f7ff fad5 	bl	8020fa0 <tcp_create_segment>
 80219f6:	60f8      	str	r0, [r7, #12]
 80219f8:	68fb      	ldr	r3, [r7, #12]
 80219fa:	2b00      	cmp	r3, #0
 80219fc:	d109      	bne.n	8021a12 <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 80219fe:	687b      	ldr	r3, [r7, #4]
 8021a00:	7e9b      	ldrb	r3, [r3, #26]
 8021a02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021a06:	b2da      	uxtb	r2, r3
 8021a08:	687b      	ldr	r3, [r7, #4]
 8021a0a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8021a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8021a10:	e070      	b.n	8021af4 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8021a12:	68fb      	ldr	r3, [r7, #12]
 8021a14:	68db      	ldr	r3, [r3, #12]
 8021a16:	f003 0303 	and.w	r3, r3, #3
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	d006      	beq.n	8021a2c <tcp_enqueue_flags+0x110>
 8021a1e:	4b37      	ldr	r3, [pc, #220]	; (8021afc <tcp_enqueue_flags+0x1e0>)
 8021a20:	f240 3249 	movw	r2, #841	; 0x349
 8021a24:	4939      	ldr	r1, [pc, #228]	; (8021b0c <tcp_enqueue_flags+0x1f0>)
 8021a26:	4837      	ldr	r0, [pc, #220]	; (8021b04 <tcp_enqueue_flags+0x1e8>)
 8021a28:	f004 f87a 	bl	8025b20 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8021a2c:	68fb      	ldr	r3, [r7, #12]
 8021a2e:	891b      	ldrh	r3, [r3, #8]
 8021a30:	2b00      	cmp	r3, #0
 8021a32:	d006      	beq.n	8021a42 <tcp_enqueue_flags+0x126>
 8021a34:	4b31      	ldr	r3, [pc, #196]	; (8021afc <tcp_enqueue_flags+0x1e0>)
 8021a36:	f240 324a 	movw	r2, #842	; 0x34a
 8021a3a:	4935      	ldr	r1, [pc, #212]	; (8021b10 <tcp_enqueue_flags+0x1f4>)
 8021a3c:	4831      	ldr	r0, [pc, #196]	; (8021b04 <tcp_enqueue_flags+0x1e8>)
 8021a3e:	f004 f86f 	bl	8025b20 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8021a42:	687b      	ldr	r3, [r7, #4]
 8021a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	d103      	bne.n	8021a52 <tcp_enqueue_flags+0x136>
    pcb->unsent = seg;
 8021a4a:	687b      	ldr	r3, [r7, #4]
 8021a4c:	68fa      	ldr	r2, [r7, #12]
 8021a4e:	669a      	str	r2, [r3, #104]	; 0x68
 8021a50:	e00d      	b.n	8021a6e <tcp_enqueue_flags+0x152>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8021a52:	687b      	ldr	r3, [r7, #4]
 8021a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021a56:	61bb      	str	r3, [r7, #24]
 8021a58:	e002      	b.n	8021a60 <tcp_enqueue_flags+0x144>
 8021a5a:	69bb      	ldr	r3, [r7, #24]
 8021a5c:	681b      	ldr	r3, [r3, #0]
 8021a5e:	61bb      	str	r3, [r7, #24]
 8021a60:	69bb      	ldr	r3, [r7, #24]
 8021a62:	681b      	ldr	r3, [r3, #0]
 8021a64:	2b00      	cmp	r3, #0
 8021a66:	d1f8      	bne.n	8021a5a <tcp_enqueue_flags+0x13e>
    useg->next = seg;
 8021a68:	69bb      	ldr	r3, [r7, #24]
 8021a6a:	68fa      	ldr	r2, [r7, #12]
 8021a6c:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8021a6e:	687b      	ldr	r3, [r7, #4]
 8021a70:	2200      	movs	r2, #0
 8021a72:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8021a76:	78fb      	ldrb	r3, [r7, #3]
 8021a78:	f003 0302 	and.w	r3, r3, #2
 8021a7c:	2b00      	cmp	r3, #0
 8021a7e:	d104      	bne.n	8021a8a <tcp_enqueue_flags+0x16e>
 8021a80:	78fb      	ldrb	r3, [r7, #3]
 8021a82:	f003 0301 	and.w	r3, r3, #1
 8021a86:	2b00      	cmp	r3, #0
 8021a88:	d004      	beq.n	8021a94 <tcp_enqueue_flags+0x178>
    pcb->snd_lbb++;
 8021a8a:	687b      	ldr	r3, [r7, #4]
 8021a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021a8e:	1c5a      	adds	r2, r3, #1
 8021a90:	687b      	ldr	r3, [r7, #4]
 8021a92:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8021a94:	78fb      	ldrb	r3, [r7, #3]
 8021a96:	f003 0301 	and.w	r3, r3, #1
 8021a9a:	2b00      	cmp	r3, #0
 8021a9c:	d006      	beq.n	8021aac <tcp_enqueue_flags+0x190>
    pcb->flags |= TF_FIN;
 8021a9e:	687b      	ldr	r3, [r7, #4]
 8021aa0:	7e9b      	ldrb	r3, [r3, #26]
 8021aa2:	f043 0320 	orr.w	r3, r3, #32
 8021aa6:	b2da      	uxtb	r2, r3
 8021aa8:	687b      	ldr	r3, [r7, #4]
 8021aaa:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8021aac:	68fb      	ldr	r3, [r7, #12]
 8021aae:	685b      	ldr	r3, [r3, #4]
 8021ab0:	4618      	mov	r0, r3
 8021ab2:	f7fb f973 	bl	801cd9c <pbuf_clen>
 8021ab6:	4603      	mov	r3, r0
 8021ab8:	461a      	mov	r2, r3
 8021aba:	687b      	ldr	r3, [r7, #4]
 8021abc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021ac0:	4413      	add	r3, r2
 8021ac2:	b29a      	uxth	r2, r3
 8021ac4:	687b      	ldr	r3, [r7, #4]
 8021ac6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8021aca:	687b      	ldr	r3, [r7, #4]
 8021acc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021ad0:	2b00      	cmp	r3, #0
 8021ad2:	d00e      	beq.n	8021af2 <tcp_enqueue_flags+0x1d6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8021ad4:	687b      	ldr	r3, [r7, #4]
 8021ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021ad8:	2b00      	cmp	r3, #0
 8021ada:	d10a      	bne.n	8021af2 <tcp_enqueue_flags+0x1d6>
 8021adc:	687b      	ldr	r3, [r7, #4]
 8021ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021ae0:	2b00      	cmp	r3, #0
 8021ae2:	d106      	bne.n	8021af2 <tcp_enqueue_flags+0x1d6>
 8021ae4:	4b05      	ldr	r3, [pc, #20]	; (8021afc <tcp_enqueue_flags+0x1e0>)
 8021ae6:	f240 326d 	movw	r2, #877	; 0x36d
 8021aea:	490a      	ldr	r1, [pc, #40]	; (8021b14 <tcp_enqueue_flags+0x1f8>)
 8021aec:	4805      	ldr	r0, [pc, #20]	; (8021b04 <tcp_enqueue_flags+0x1e8>)
 8021aee:	f004 f817 	bl	8025b20 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8021af2:	2300      	movs	r3, #0
}
 8021af4:	4618      	mov	r0, r3
 8021af6:	3720      	adds	r7, #32
 8021af8:	46bd      	mov	sp, r7
 8021afa:	bd80      	pop	{r7, pc}
 8021afc:	080287b4 	.word	0x080287b4
 8021b00:	08028ab8 	.word	0x08028ab8
 8021b04:	08028818 	.word	0x08028818
 8021b08:	08028b10 	.word	0x08028b10
 8021b0c:	08028b4c 	.word	0x08028b4c
 8021b10:	08028b64 	.word	0x08028b64
 8021b14:	08028b90 	.word	0x08028b90

08021b18 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8021b18:	b590      	push	{r4, r7, lr}
 8021b1a:	b08b      	sub	sp, #44	; 0x2c
 8021b1c:	af04      	add	r7, sp, #16
 8021b1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8021b20:	2300      	movs	r3, #0
 8021b22:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8021b24:	7dbb      	ldrb	r3, [r7, #22]
 8021b26:	b29c      	uxth	r4, r3
 8021b28:	687b      	ldr	r3, [r7, #4]
 8021b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021b2c:	4618      	mov	r0, r3
 8021b2e:	f7f7 fc19 	bl	8019364 <lwip_htonl>
 8021b32:	4603      	mov	r3, r0
 8021b34:	2200      	movs	r2, #0
 8021b36:	4621      	mov	r1, r4
 8021b38:	6878      	ldr	r0, [r7, #4]
 8021b3a:	f7ff f977 	bl	8020e2c <tcp_output_alloc_header>
 8021b3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021b40:	693b      	ldr	r3, [r7, #16]
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d109      	bne.n	8021b5a <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	7e9b      	ldrb	r3, [r3, #26]
 8021b4a:	f043 0303 	orr.w	r3, r3, #3
 8021b4e:	b2da      	uxtb	r2, r3
 8021b50:	687b      	ldr	r3, [r7, #4]
 8021b52:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8021b54:	f06f 0301 	mvn.w	r3, #1
 8021b58:	e036      	b.n	8021bc8 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8021b5a:	687b      	ldr	r3, [r7, #4]
 8021b5c:	3304      	adds	r3, #4
 8021b5e:	4618      	mov	r0, r3
 8021b60:	f7f8 fcd4 	bl	801a50c <ip4_route>
 8021b64:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8021b66:	68fb      	ldr	r3, [r7, #12]
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d102      	bne.n	8021b72 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8021b6c:	23fc      	movs	r3, #252	; 0xfc
 8021b6e:	75fb      	strb	r3, [r7, #23]
 8021b70:	e012      	b.n	8021b98 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8021b72:	6879      	ldr	r1, [r7, #4]
 8021b74:	687b      	ldr	r3, [r7, #4]
 8021b76:	1d18      	adds	r0, r3, #4
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	7a9c      	ldrb	r4, [r3, #10]
 8021b7c:	687b      	ldr	r3, [r7, #4]
 8021b7e:	7a5b      	ldrb	r3, [r3, #9]
 8021b80:	68fa      	ldr	r2, [r7, #12]
 8021b82:	9202      	str	r2, [sp, #8]
 8021b84:	2206      	movs	r2, #6
 8021b86:	9201      	str	r2, [sp, #4]
 8021b88:	9300      	str	r3, [sp, #0]
 8021b8a:	4623      	mov	r3, r4
 8021b8c:	4602      	mov	r2, r0
 8021b8e:	6938      	ldr	r0, [r7, #16]
 8021b90:	f7f8 fe60 	bl	801a854 <ip4_output_if>
 8021b94:	4603      	mov	r3, r0
 8021b96:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8021b98:	6938      	ldr	r0, [r7, #16]
 8021b9a:	f7fb f865 	bl	801cc68 <pbuf_free>

  if (err != ERR_OK) {
 8021b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8021ba2:	2b00      	cmp	r3, #0
 8021ba4:	d007      	beq.n	8021bb6 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	7e9b      	ldrb	r3, [r3, #26]
 8021baa:	f043 0303 	orr.w	r3, r3, #3
 8021bae:	b2da      	uxtb	r2, r3
 8021bb0:	687b      	ldr	r3, [r7, #4]
 8021bb2:	769a      	strb	r2, [r3, #26]
 8021bb4:	e006      	b.n	8021bc4 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8021bb6:	687b      	ldr	r3, [r7, #4]
 8021bb8:	7e9b      	ldrb	r3, [r3, #26]
 8021bba:	f023 0303 	bic.w	r3, r3, #3
 8021bbe:	b2da      	uxtb	r2, r3
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8021bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8021bc8:	4618      	mov	r0, r3
 8021bca:	371c      	adds	r7, #28
 8021bcc:	46bd      	mov	sp, r7
 8021bce:	bd90      	pop	{r4, r7, pc}

08021bd0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8021bd0:	b5b0      	push	{r4, r5, r7, lr}
 8021bd2:	b08a      	sub	sp, #40	; 0x28
 8021bd4:	af00      	add	r7, sp, #0
 8021bd6:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	7d1b      	ldrb	r3, [r3, #20]
 8021bdc:	2b01      	cmp	r3, #1
 8021bde:	d106      	bne.n	8021bee <tcp_output+0x1e>
 8021be0:	4b9b      	ldr	r3, [pc, #620]	; (8021e50 <tcp_output+0x280>)
 8021be2:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8021be6:	499b      	ldr	r1, [pc, #620]	; (8021e54 <tcp_output+0x284>)
 8021be8:	489b      	ldr	r0, [pc, #620]	; (8021e58 <tcp_output+0x288>)
 8021bea:	f003 ff99 	bl	8025b20 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8021bee:	4b9b      	ldr	r3, [pc, #620]	; (8021e5c <tcp_output+0x28c>)
 8021bf0:	681a      	ldr	r2, [r3, #0]
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	429a      	cmp	r2, r3
 8021bf6:	d101      	bne.n	8021bfc <tcp_output+0x2c>
    return ERR_OK;
 8021bf8:	2300      	movs	r3, #0
 8021bfa:	e1cd      	b.n	8021f98 <tcp_output+0x3c8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8021bfc:	687b      	ldr	r3, [r7, #4]
 8021bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8021c02:	687b      	ldr	r3, [r7, #4]
 8021c04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8021c08:	429a      	cmp	r2, r3
 8021c0a:	d203      	bcs.n	8021c14 <tcp_output+0x44>
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8021c12:	e002      	b.n	8021c1a <tcp_output+0x4a>
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8021c1a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8021c1c:	687b      	ldr	r3, [r7, #4]
 8021c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021c20:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	7e9b      	ldrb	r3, [r3, #26]
 8021c26:	f003 0302 	and.w	r3, r3, #2
 8021c2a:	2b00      	cmp	r3, #0
 8021c2c:	d017      	beq.n	8021c5e <tcp_output+0x8e>
 8021c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c30:	2b00      	cmp	r3, #0
 8021c32:	d00f      	beq.n	8021c54 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8021c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c36:	68db      	ldr	r3, [r3, #12]
 8021c38:	685b      	ldr	r3, [r3, #4]
 8021c3a:	4618      	mov	r0, r3
 8021c3c:	f7f7 fb92 	bl	8019364 <lwip_htonl>
 8021c40:	4602      	mov	r2, r0
 8021c42:	687b      	ldr	r3, [r7, #4]
 8021c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c46:	1ad3      	subs	r3, r2, r3
 8021c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021c4a:	8912      	ldrh	r2, [r2, #8]
 8021c4c:	441a      	add	r2, r3
     (seg == NULL ||
 8021c4e:	69bb      	ldr	r3, [r7, #24]
 8021c50:	429a      	cmp	r2, r3
 8021c52:	d904      	bls.n	8021c5e <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8021c54:	6878      	ldr	r0, [r7, #4]
 8021c56:	f7ff ff5f 	bl	8021b18 <tcp_send_empty_ack>
 8021c5a:	4603      	mov	r3, r0
 8021c5c:	e19c      	b.n	8021f98 <tcp_output+0x3c8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8021c5e:	687b      	ldr	r3, [r7, #4]
 8021c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021c62:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8021c64:	6a3b      	ldr	r3, [r7, #32]
 8021c66:	2b00      	cmp	r3, #0
 8021c68:	d007      	beq.n	8021c7a <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8021c6a:	e002      	b.n	8021c72 <tcp_output+0xa2>
 8021c6c:	6a3b      	ldr	r3, [r7, #32]
 8021c6e:	681b      	ldr	r3, [r3, #0]
 8021c70:	623b      	str	r3, [r7, #32]
 8021c72:	6a3b      	ldr	r3, [r7, #32]
 8021c74:	681b      	ldr	r3, [r3, #0]
 8021c76:	2b00      	cmp	r3, #0
 8021c78:	d1f8      	bne.n	8021c6c <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8021c7a:	687b      	ldr	r3, [r7, #4]
 8021c7c:	3304      	adds	r3, #4
 8021c7e:	4618      	mov	r0, r3
 8021c80:	f7f8 fc44 	bl	801a50c <ip4_route>
 8021c84:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8021c86:	697b      	ldr	r3, [r7, #20]
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	d102      	bne.n	8021c92 <tcp_output+0xc2>
    return ERR_RTE;
 8021c8c:	f06f 0303 	mvn.w	r3, #3
 8021c90:	e182      	b.n	8021f98 <tcp_output+0x3c8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8021c92:	687b      	ldr	r3, [r7, #4]
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	d003      	beq.n	8021ca0 <tcp_output+0xd0>
 8021c98:	687b      	ldr	r3, [r7, #4]
 8021c9a:	681b      	ldr	r3, [r3, #0]
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	d111      	bne.n	8021cc4 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8021ca0:	697b      	ldr	r3, [r7, #20]
 8021ca2:	2b00      	cmp	r3, #0
 8021ca4:	d002      	beq.n	8021cac <tcp_output+0xdc>
 8021ca6:	697b      	ldr	r3, [r7, #20]
 8021ca8:	3304      	adds	r3, #4
 8021caa:	e000      	b.n	8021cae <tcp_output+0xde>
 8021cac:	2300      	movs	r3, #0
 8021cae:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8021cb0:	693b      	ldr	r3, [r7, #16]
 8021cb2:	2b00      	cmp	r3, #0
 8021cb4:	d102      	bne.n	8021cbc <tcp_output+0xec>
      return ERR_RTE;
 8021cb6:	f06f 0303 	mvn.w	r3, #3
 8021cba:	e16d      	b.n	8021f98 <tcp_output+0x3c8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8021cbc:	693b      	ldr	r3, [r7, #16]
 8021cbe:	681a      	ldr	r2, [r3, #0]
 8021cc0:	687b      	ldr	r3, [r7, #4]
 8021cc2:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8021cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cc6:	2b00      	cmp	r3, #0
 8021cc8:	f000 813e 	beq.w	8021f48 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8021ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cce:	68db      	ldr	r3, [r3, #12]
 8021cd0:	685b      	ldr	r3, [r3, #4]
 8021cd2:	4618      	mov	r0, r3
 8021cd4:	f7f7 fb46 	bl	8019364 <lwip_htonl>
 8021cd8:	4602      	mov	r2, r0
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021cde:	1ad3      	subs	r3, r2, r3
 8021ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021ce2:	8912      	ldrh	r2, [r2, #8]
 8021ce4:	441a      	add	r2, r3
  if (seg != NULL &&
 8021ce6:	69bb      	ldr	r3, [r7, #24]
 8021ce8:	429a      	cmp	r2, r3
 8021cea:	f240 812d 	bls.w	8021f48 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8021cee:	69bb      	ldr	r3, [r7, #24]
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	f000 8129 	beq.w	8021f48 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8021cf6:	687b      	ldr	r3, [r7, #4]
 8021cf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8021cfc:	461a      	mov	r2, r3
 8021cfe:	69bb      	ldr	r3, [r7, #24]
 8021d00:	429a      	cmp	r2, r3
 8021d02:	f040 8121 	bne.w	8021f48 <tcp_output+0x378>
 8021d06:	687b      	ldr	r3, [r7, #4]
 8021d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	f040 811c 	bne.w	8021f48 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8021d10:	687b      	ldr	r3, [r7, #4]
 8021d12:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	f040 812b 	bne.w	8021f72 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	2200      	movs	r2, #0
 8021d20:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8021d24:	687b      	ldr	r3, [r7, #4]
 8021d26:	2201      	movs	r2, #1
 8021d28:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8021d2c:	e121      	b.n	8021f72 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8021d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d30:	68db      	ldr	r3, [r3, #12]
 8021d32:	899b      	ldrh	r3, [r3, #12]
 8021d34:	b29b      	uxth	r3, r3
 8021d36:	4618      	mov	r0, r3
 8021d38:	f7f7 fb06 	bl	8019348 <lwip_htons>
 8021d3c:	4603      	mov	r3, r0
 8021d3e:	f003 0304 	and.w	r3, r3, #4
 8021d42:	2b00      	cmp	r3, #0
 8021d44:	d006      	beq.n	8021d54 <tcp_output+0x184>
 8021d46:	4b42      	ldr	r3, [pc, #264]	; (8021e50 <tcp_output+0x280>)
 8021d48:	f240 4246 	movw	r2, #1094	; 0x446
 8021d4c:	4944      	ldr	r1, [pc, #272]	; (8021e60 <tcp_output+0x290>)
 8021d4e:	4842      	ldr	r0, [pc, #264]	; (8021e58 <tcp_output+0x288>)
 8021d50:	f003 fee6 	bl	8025b20 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021d58:	2b00      	cmp	r3, #0
 8021d5a:	d01f      	beq.n	8021d9c <tcp_output+0x1cc>
 8021d5c:	687b      	ldr	r3, [r7, #4]
 8021d5e:	7e9b      	ldrb	r3, [r3, #26]
 8021d60:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	d119      	bne.n	8021d9c <tcp_output+0x1cc>
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021d6c:	2b00      	cmp	r3, #0
 8021d6e:	d00b      	beq.n	8021d88 <tcp_output+0x1b8>
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021d74:	681b      	ldr	r3, [r3, #0]
 8021d76:	2b00      	cmp	r3, #0
 8021d78:	d110      	bne.n	8021d9c <tcp_output+0x1cc>
 8021d7a:	687b      	ldr	r3, [r7, #4]
 8021d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021d7e:	891a      	ldrh	r2, [r3, #8]
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8021d84:	429a      	cmp	r2, r3
 8021d86:	d209      	bcs.n	8021d9c <tcp_output+0x1cc>
 8021d88:	687b      	ldr	r3, [r7, #4]
 8021d8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8021d8e:	2b00      	cmp	r3, #0
 8021d90:	d004      	beq.n	8021d9c <tcp_output+0x1cc>
 8021d92:	687b      	ldr	r3, [r7, #4]
 8021d94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021d98:	2b0a      	cmp	r3, #10
 8021d9a:	d901      	bls.n	8021da0 <tcp_output+0x1d0>
 8021d9c:	2301      	movs	r3, #1
 8021d9e:	e000      	b.n	8021da2 <tcp_output+0x1d2>
 8021da0:	2300      	movs	r3, #0
 8021da2:	2b00      	cmp	r3, #0
 8021da4:	d106      	bne.n	8021db4 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	7e9b      	ldrb	r3, [r3, #26]
 8021daa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8021dae:	2b00      	cmp	r3, #0
 8021db0:	f000 80e1 	beq.w	8021f76 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	7d1b      	ldrb	r3, [r3, #20]
 8021db8:	2b02      	cmp	r3, #2
 8021dba:	d00c      	beq.n	8021dd6 <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8021dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dbe:	68dc      	ldr	r4, [r3, #12]
 8021dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dc2:	68db      	ldr	r3, [r3, #12]
 8021dc4:	899b      	ldrh	r3, [r3, #12]
 8021dc6:	b29d      	uxth	r5, r3
 8021dc8:	2010      	movs	r0, #16
 8021dca:	f7f7 fabd 	bl	8019348 <lwip_htons>
 8021dce:	4603      	mov	r3, r0
 8021dd0:	432b      	orrs	r3, r5
 8021dd2:	b29b      	uxth	r3, r3
 8021dd4:	81a3      	strh	r3, [r4, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8021dd6:	697a      	ldr	r2, [r7, #20]
 8021dd8:	6879      	ldr	r1, [r7, #4]
 8021dda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021ddc:	f000 f8e0 	bl	8021fa0 <tcp_output_segment>
 8021de0:	4603      	mov	r3, r0
 8021de2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8021de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021de8:	2b00      	cmp	r3, #0
 8021dea:	d009      	beq.n	8021e00 <tcp_output+0x230>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8021dec:	687b      	ldr	r3, [r7, #4]
 8021dee:	7e9b      	ldrb	r3, [r3, #26]
 8021df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021df4:	b2da      	uxtb	r2, r3
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	769a      	strb	r2, [r3, #26]
      return err;
 8021dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021dfe:	e0cb      	b.n	8021f98 <tcp_output+0x3c8>
    }
    pcb->unsent = seg->next;
 8021e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e02:	681a      	ldr	r2, [r3, #0]
 8021e04:	687b      	ldr	r3, [r7, #4]
 8021e06:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8021e08:	687b      	ldr	r3, [r7, #4]
 8021e0a:	7d1b      	ldrb	r3, [r3, #20]
 8021e0c:	2b02      	cmp	r3, #2
 8021e0e:	d006      	beq.n	8021e1e <tcp_output+0x24e>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8021e10:	687b      	ldr	r3, [r7, #4]
 8021e12:	7e9b      	ldrb	r3, [r3, #26]
 8021e14:	f023 0303 	bic.w	r3, r3, #3
 8021e18:	b2da      	uxtb	r2, r3
 8021e1a:	687b      	ldr	r3, [r7, #4]
 8021e1c:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8021e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e20:	68db      	ldr	r3, [r3, #12]
 8021e22:	685b      	ldr	r3, [r3, #4]
 8021e24:	4618      	mov	r0, r3
 8021e26:	f7f7 fa9d 	bl	8019364 <lwip_htonl>
 8021e2a:	4604      	mov	r4, r0
 8021e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e2e:	891b      	ldrh	r3, [r3, #8]
 8021e30:	461d      	mov	r5, r3
 8021e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e34:	68db      	ldr	r3, [r3, #12]
 8021e36:	899b      	ldrh	r3, [r3, #12]
 8021e38:	b29b      	uxth	r3, r3
 8021e3a:	4618      	mov	r0, r3
 8021e3c:	f7f7 fa84 	bl	8019348 <lwip_htons>
 8021e40:	4603      	mov	r3, r0
 8021e42:	f003 0303 	and.w	r3, r3, #3
 8021e46:	2b00      	cmp	r3, #0
 8021e48:	d00c      	beq.n	8021e64 <tcp_output+0x294>
 8021e4a:	2301      	movs	r3, #1
 8021e4c:	e00b      	b.n	8021e66 <tcp_output+0x296>
 8021e4e:	bf00      	nop
 8021e50:	080287b4 	.word	0x080287b4
 8021e54:	08028bb8 	.word	0x08028bb8
 8021e58:	08028818 	.word	0x08028818
 8021e5c:	20008c44 	.word	0x20008c44
 8021e60:	08028be0 	.word	0x08028be0
 8021e64:	2300      	movs	r3, #0
 8021e66:	442b      	add	r3, r5
 8021e68:	4423      	add	r3, r4
 8021e6a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8021e6c:	687b      	ldr	r3, [r7, #4]
 8021e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021e70:	68bb      	ldr	r3, [r7, #8]
 8021e72:	1ad3      	subs	r3, r2, r3
 8021e74:	2b00      	cmp	r3, #0
 8021e76:	da02      	bge.n	8021e7e <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8021e78:	687b      	ldr	r3, [r7, #4]
 8021e7a:	68ba      	ldr	r2, [r7, #8]
 8021e7c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8021e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e80:	891b      	ldrh	r3, [r3, #8]
 8021e82:	461c      	mov	r4, r3
 8021e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e86:	68db      	ldr	r3, [r3, #12]
 8021e88:	899b      	ldrh	r3, [r3, #12]
 8021e8a:	b29b      	uxth	r3, r3
 8021e8c:	4618      	mov	r0, r3
 8021e8e:	f7f7 fa5b 	bl	8019348 <lwip_htons>
 8021e92:	4603      	mov	r3, r0
 8021e94:	f003 0303 	and.w	r3, r3, #3
 8021e98:	2b00      	cmp	r3, #0
 8021e9a:	d001      	beq.n	8021ea0 <tcp_output+0x2d0>
 8021e9c:	2301      	movs	r3, #1
 8021e9e:	e000      	b.n	8021ea2 <tcp_output+0x2d2>
 8021ea0:	2300      	movs	r3, #0
 8021ea2:	4423      	add	r3, r4
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	d049      	beq.n	8021f3c <tcp_output+0x36c>
      seg->next = NULL;
 8021ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021eaa:	2200      	movs	r2, #0
 8021eac:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8021eae:	687b      	ldr	r3, [r7, #4]
 8021eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021eb2:	2b00      	cmp	r3, #0
 8021eb4:	d105      	bne.n	8021ec2 <tcp_output+0x2f2>
        pcb->unacked = seg;
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021eba:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8021ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ebe:	623b      	str	r3, [r7, #32]
 8021ec0:	e03f      	b.n	8021f42 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8021ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ec4:	68db      	ldr	r3, [r3, #12]
 8021ec6:	685b      	ldr	r3, [r3, #4]
 8021ec8:	4618      	mov	r0, r3
 8021eca:	f7f7 fa4b 	bl	8019364 <lwip_htonl>
 8021ece:	4604      	mov	r4, r0
 8021ed0:	6a3b      	ldr	r3, [r7, #32]
 8021ed2:	68db      	ldr	r3, [r3, #12]
 8021ed4:	685b      	ldr	r3, [r3, #4]
 8021ed6:	4618      	mov	r0, r3
 8021ed8:	f7f7 fa44 	bl	8019364 <lwip_htonl>
 8021edc:	4603      	mov	r3, r0
 8021ede:	1ae3      	subs	r3, r4, r3
 8021ee0:	2b00      	cmp	r3, #0
 8021ee2:	da24      	bge.n	8021f2e <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8021ee4:	687b      	ldr	r3, [r7, #4]
 8021ee6:	336c      	adds	r3, #108	; 0x6c
 8021ee8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8021eea:	e002      	b.n	8021ef2 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8021eec:	69fb      	ldr	r3, [r7, #28]
 8021eee:	681b      	ldr	r3, [r3, #0]
 8021ef0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8021ef2:	69fb      	ldr	r3, [r7, #28]
 8021ef4:	681b      	ldr	r3, [r3, #0]
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	d011      	beq.n	8021f1e <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8021efa:	69fb      	ldr	r3, [r7, #28]
 8021efc:	681b      	ldr	r3, [r3, #0]
 8021efe:	68db      	ldr	r3, [r3, #12]
 8021f00:	685b      	ldr	r3, [r3, #4]
 8021f02:	4618      	mov	r0, r3
 8021f04:	f7f7 fa2e 	bl	8019364 <lwip_htonl>
 8021f08:	4604      	mov	r4, r0
 8021f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f0c:	68db      	ldr	r3, [r3, #12]
 8021f0e:	685b      	ldr	r3, [r3, #4]
 8021f10:	4618      	mov	r0, r3
 8021f12:	f7f7 fa27 	bl	8019364 <lwip_htonl>
 8021f16:	4603      	mov	r3, r0
 8021f18:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8021f1a:	2b00      	cmp	r3, #0
 8021f1c:	dbe6      	blt.n	8021eec <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8021f1e:	69fb      	ldr	r3, [r7, #28]
 8021f20:	681a      	ldr	r2, [r3, #0]
 8021f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f24:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8021f26:	69fb      	ldr	r3, [r7, #28]
 8021f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021f2a:	601a      	str	r2, [r3, #0]
 8021f2c:	e009      	b.n	8021f42 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8021f2e:	6a3b      	ldr	r3, [r7, #32]
 8021f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021f32:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8021f34:	6a3b      	ldr	r3, [r7, #32]
 8021f36:	681b      	ldr	r3, [r3, #0]
 8021f38:	623b      	str	r3, [r7, #32]
 8021f3a:	e002      	b.n	8021f42 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8021f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021f3e:	f7fc f9ae 	bl	801e29e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8021f42:	687b      	ldr	r3, [r7, #4]
 8021f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021f46:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8021f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f4a:	2b00      	cmp	r3, #0
 8021f4c:	d014      	beq.n	8021f78 <tcp_output+0x3a8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8021f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f50:	68db      	ldr	r3, [r3, #12]
 8021f52:	685b      	ldr	r3, [r3, #4]
 8021f54:	4618      	mov	r0, r3
 8021f56:	f7f7 fa05 	bl	8019364 <lwip_htonl>
 8021f5a:	4602      	mov	r2, r0
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021f60:	1ad3      	subs	r3, r2, r3
 8021f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021f64:	8912      	ldrh	r2, [r2, #8]
 8021f66:	441a      	add	r2, r3
  while (seg != NULL &&
 8021f68:	69bb      	ldr	r3, [r7, #24]
 8021f6a:	429a      	cmp	r2, r3
 8021f6c:	f67f aedf 	bls.w	8021d2e <tcp_output+0x15e>
 8021f70:	e002      	b.n	8021f78 <tcp_output+0x3a8>
    goto output_done;
 8021f72:	bf00      	nop
 8021f74:	e000      	b.n	8021f78 <tcp_output+0x3a8>
      break;
 8021f76:	bf00      	nop
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021f7c:	2b00      	cmp	r3, #0
 8021f7e:	d103      	bne.n	8021f88 <tcp_output+0x3b8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	2200      	movs	r2, #0
 8021f84:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8021f88:	687b      	ldr	r3, [r7, #4]
 8021f8a:	7e9b      	ldrb	r3, [r3, #26]
 8021f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021f90:	b2da      	uxtb	r2, r3
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8021f96:	2300      	movs	r3, #0
}
 8021f98:	4618      	mov	r0, r3
 8021f9a:	3728      	adds	r7, #40	; 0x28
 8021f9c:	46bd      	mov	sp, r7
 8021f9e:	bdb0      	pop	{r4, r5, r7, pc}

08021fa0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8021fa0:	b5b0      	push	{r4, r5, r7, lr}
 8021fa2:	b08c      	sub	sp, #48	; 0x30
 8021fa4:	af04      	add	r7, sp, #16
 8021fa6:	60f8      	str	r0, [r7, #12]
 8021fa8:	60b9      	str	r1, [r7, #8]
 8021faa:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8021fac:	68fb      	ldr	r3, [r7, #12]
 8021fae:	685b      	ldr	r3, [r3, #4]
 8021fb0:	89db      	ldrh	r3, [r3, #14]
 8021fb2:	2b01      	cmp	r3, #1
 8021fb4:	d001      	beq.n	8021fba <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8021fb6:	2300      	movs	r3, #0
 8021fb8:	e08b      	b.n	80220d2 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8021fba:	68fb      	ldr	r3, [r7, #12]
 8021fbc:	68dc      	ldr	r4, [r3, #12]
 8021fbe:	68bb      	ldr	r3, [r7, #8]
 8021fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021fc2:	4618      	mov	r0, r3
 8021fc4:	f7f7 f9ce 	bl	8019364 <lwip_htonl>
 8021fc8:	4603      	mov	r3, r0
 8021fca:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8021fcc:	68fb      	ldr	r3, [r7, #12]
 8021fce:	68dc      	ldr	r4, [r3, #12]
 8021fd0:	68bb      	ldr	r3, [r7, #8]
 8021fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021fd4:	4618      	mov	r0, r3
 8021fd6:	f7f7 f9b7 	bl	8019348 <lwip_htons>
 8021fda:	4603      	mov	r3, r0
 8021fdc:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8021fde:	68bb      	ldr	r3, [r7, #8]
 8021fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021fe2:	68ba      	ldr	r2, [r7, #8]
 8021fe4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8021fe6:	441a      	add	r2, r3
 8021fe8:	68bb      	ldr	r3, [r7, #8]
 8021fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8021fec:	68fb      	ldr	r3, [r7, #12]
 8021fee:	68db      	ldr	r3, [r3, #12]
 8021ff0:	3314      	adds	r3, #20
 8021ff2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8021ff4:	68fb      	ldr	r3, [r7, #12]
 8021ff6:	7a9b      	ldrb	r3, [r3, #10]
 8021ff8:	f003 0301 	and.w	r3, r3, #1
 8021ffc:	2b00      	cmp	r3, #0
 8021ffe:	d014      	beq.n	802202a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8022000:	68bb      	ldr	r3, [r7, #8]
 8022002:	3304      	adds	r3, #4
 8022004:	4619      	mov	r1, r3
 8022006:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 802200a:	f7fc fc73 	bl	801e8f4 <tcp_eff_send_mss_impl>
 802200e:	4603      	mov	r3, r0
 8022010:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8022012:	8b7b      	ldrh	r3, [r7, #26]
 8022014:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8022018:	4618      	mov	r0, r3
 802201a:	f7f7 f9a3 	bl	8019364 <lwip_htonl>
 802201e:	4602      	mov	r2, r0
 8022020:	69fb      	ldr	r3, [r7, #28]
 8022022:	601a      	str	r2, [r3, #0]
    opts += 1;
 8022024:	69fb      	ldr	r3, [r7, #28]
 8022026:	3304      	adds	r3, #4
 8022028:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 802202a:	68bb      	ldr	r3, [r7, #8]
 802202c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8022030:	2b00      	cmp	r3, #0
 8022032:	da02      	bge.n	802203a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8022034:	68bb      	ldr	r3, [r7, #8]
 8022036:	2200      	movs	r2, #0
 8022038:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 802203a:	68bb      	ldr	r3, [r7, #8]
 802203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802203e:	2b00      	cmp	r3, #0
 8022040:	d10c      	bne.n	802205c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8022042:	4b26      	ldr	r3, [pc, #152]	; (80220dc <tcp_output_segment+0x13c>)
 8022044:	681a      	ldr	r2, [r3, #0]
 8022046:	68bb      	ldr	r3, [r7, #8]
 8022048:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 802204a:	68fb      	ldr	r3, [r7, #12]
 802204c:	68db      	ldr	r3, [r3, #12]
 802204e:	685b      	ldr	r3, [r3, #4]
 8022050:	4618      	mov	r0, r3
 8022052:	f7f7 f987 	bl	8019364 <lwip_htonl>
 8022056:	4602      	mov	r2, r0
 8022058:	68bb      	ldr	r3, [r7, #8]
 802205a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 802205c:	68fb      	ldr	r3, [r7, #12]
 802205e:	68db      	ldr	r3, [r3, #12]
 8022060:	461a      	mov	r2, r3
 8022062:	68fb      	ldr	r3, [r7, #12]
 8022064:	685b      	ldr	r3, [r3, #4]
 8022066:	685b      	ldr	r3, [r3, #4]
 8022068:	1ad3      	subs	r3, r2, r3
 802206a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 802206c:	68fb      	ldr	r3, [r7, #12]
 802206e:	685b      	ldr	r3, [r3, #4]
 8022070:	68fa      	ldr	r2, [r7, #12]
 8022072:	6852      	ldr	r2, [r2, #4]
 8022074:	8951      	ldrh	r1, [r2, #10]
 8022076:	8b3a      	ldrh	r2, [r7, #24]
 8022078:	1a8a      	subs	r2, r1, r2
 802207a:	b292      	uxth	r2, r2
 802207c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 802207e:	68fb      	ldr	r3, [r7, #12]
 8022080:	685b      	ldr	r3, [r3, #4]
 8022082:	68fa      	ldr	r2, [r7, #12]
 8022084:	6852      	ldr	r2, [r2, #4]
 8022086:	8911      	ldrh	r1, [r2, #8]
 8022088:	8b3a      	ldrh	r2, [r7, #24]
 802208a:	1a8a      	subs	r2, r1, r2
 802208c:	b292      	uxth	r2, r2
 802208e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8022090:	68fb      	ldr	r3, [r7, #12]
 8022092:	685b      	ldr	r3, [r3, #4]
 8022094:	68fa      	ldr	r2, [r7, #12]
 8022096:	68d2      	ldr	r2, [r2, #12]
 8022098:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 802209a:	68fb      	ldr	r3, [r7, #12]
 802209c:	68db      	ldr	r3, [r3, #12]
 802209e:	2200      	movs	r2, #0
 80220a0:	741a      	strb	r2, [r3, #16]
 80220a2:	2200      	movs	r2, #0
 80220a4:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80220a6:	68fb      	ldr	r3, [r7, #12]
 80220a8:	6858      	ldr	r0, [r3, #4]
 80220aa:	68b9      	ldr	r1, [r7, #8]
 80220ac:	68bb      	ldr	r3, [r7, #8]
 80220ae:	1d1c      	adds	r4, r3, #4
 80220b0:	68bb      	ldr	r3, [r7, #8]
 80220b2:	7a9d      	ldrb	r5, [r3, #10]
 80220b4:	68bb      	ldr	r3, [r7, #8]
 80220b6:	7a5b      	ldrb	r3, [r3, #9]
 80220b8:	687a      	ldr	r2, [r7, #4]
 80220ba:	9202      	str	r2, [sp, #8]
 80220bc:	2206      	movs	r2, #6
 80220be:	9201      	str	r2, [sp, #4]
 80220c0:	9300      	str	r3, [sp, #0]
 80220c2:	462b      	mov	r3, r5
 80220c4:	4622      	mov	r2, r4
 80220c6:	f7f8 fbc5 	bl	801a854 <ip4_output_if>
 80220ca:	4603      	mov	r3, r0
 80220cc:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 80220ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80220d2:	4618      	mov	r0, r3
 80220d4:	3720      	adds	r7, #32
 80220d6:	46bd      	mov	sp, r7
 80220d8:	bdb0      	pop	{r4, r5, r7, pc}
 80220da:	bf00      	nop
 80220dc:	20008c34 	.word	0x20008c34

080220e0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80220e0:	b580      	push	{r7, lr}
 80220e2:	b08c      	sub	sp, #48	; 0x30
 80220e4:	af04      	add	r7, sp, #16
 80220e6:	60f8      	str	r0, [r7, #12]
 80220e8:	60b9      	str	r1, [r7, #8]
 80220ea:	607a      	str	r2, [r7, #4]
 80220ec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80220ee:	2200      	movs	r2, #0
 80220f0:	2114      	movs	r1, #20
 80220f2:	2001      	movs	r0, #1
 80220f4:	f7fa fa46 	bl	801c584 <pbuf_alloc>
 80220f8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80220fa:	69fb      	ldr	r3, [r7, #28]
 80220fc:	2b00      	cmp	r3, #0
 80220fe:	d059      	beq.n	80221b4 <tcp_rst+0xd4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8022100:	69fb      	ldr	r3, [r7, #28]
 8022102:	895b      	ldrh	r3, [r3, #10]
 8022104:	2b13      	cmp	r3, #19
 8022106:	d806      	bhi.n	8022116 <tcp_rst+0x36>
 8022108:	4b2c      	ldr	r3, [pc, #176]	; (80221bc <tcp_rst+0xdc>)
 802210a:	f240 524d 	movw	r2, #1357	; 0x54d
 802210e:	492c      	ldr	r1, [pc, #176]	; (80221c0 <tcp_rst+0xe0>)
 8022110:	482c      	ldr	r0, [pc, #176]	; (80221c4 <tcp_rst+0xe4>)
 8022112:	f003 fd05 	bl	8025b20 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8022116:	69fb      	ldr	r3, [r7, #28]
 8022118:	685b      	ldr	r3, [r3, #4]
 802211a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 802211c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802211e:	4618      	mov	r0, r3
 8022120:	f7f7 f912 	bl	8019348 <lwip_htons>
 8022124:	4603      	mov	r3, r0
 8022126:	461a      	mov	r2, r3
 8022128:	69bb      	ldr	r3, [r7, #24]
 802212a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 802212c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802212e:	4618      	mov	r0, r3
 8022130:	f7f7 f90a 	bl	8019348 <lwip_htons>
 8022134:	4603      	mov	r3, r0
 8022136:	461a      	mov	r2, r3
 8022138:	69bb      	ldr	r3, [r7, #24]
 802213a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 802213c:	68f8      	ldr	r0, [r7, #12]
 802213e:	f7f7 f911 	bl	8019364 <lwip_htonl>
 8022142:	4602      	mov	r2, r0
 8022144:	69bb      	ldr	r3, [r7, #24]
 8022146:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8022148:	68b8      	ldr	r0, [r7, #8]
 802214a:	f7f7 f90b 	bl	8019364 <lwip_htonl>
 802214e:	4602      	mov	r2, r0
 8022150:	69bb      	ldr	r3, [r7, #24]
 8022152:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8022154:	f245 0014 	movw	r0, #20500	; 0x5014
 8022158:	f7f7 f8f6 	bl	8019348 <lwip_htons>
 802215c:	4603      	mov	r3, r0
 802215e:	461a      	mov	r2, r3
 8022160:	69bb      	ldr	r3, [r7, #24]
 8022162:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8022164:	69bb      	ldr	r3, [r7, #24]
 8022166:	2200      	movs	r2, #0
 8022168:	f042 0210 	orr.w	r2, r2, #16
 802216c:	739a      	strb	r2, [r3, #14]
 802216e:	2200      	movs	r2, #0
 8022170:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8022172:	69bb      	ldr	r3, [r7, #24]
 8022174:	2200      	movs	r2, #0
 8022176:	741a      	strb	r2, [r3, #16]
 8022178:	2200      	movs	r2, #0
 802217a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 802217c:	69bb      	ldr	r3, [r7, #24]
 802217e:	2200      	movs	r2, #0
 8022180:	749a      	strb	r2, [r3, #18]
 8022182:	2200      	movs	r2, #0
 8022184:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8022186:	6838      	ldr	r0, [r7, #0]
 8022188:	f7f8 f9c0 	bl	801a50c <ip4_route>
 802218c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 802218e:	697b      	ldr	r3, [r7, #20]
 8022190:	2b00      	cmp	r3, #0
 8022192:	d00b      	beq.n	80221ac <tcp_rst+0xcc>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8022194:	697b      	ldr	r3, [r7, #20]
 8022196:	9302      	str	r3, [sp, #8]
 8022198:	2306      	movs	r3, #6
 802219a:	9301      	str	r3, [sp, #4]
 802219c:	2300      	movs	r3, #0
 802219e:	9300      	str	r3, [sp, #0]
 80221a0:	23ff      	movs	r3, #255	; 0xff
 80221a2:	683a      	ldr	r2, [r7, #0]
 80221a4:	6879      	ldr	r1, [r7, #4]
 80221a6:	69f8      	ldr	r0, [r7, #28]
 80221a8:	f7f8 fb54 	bl	801a854 <ip4_output_if>
  }
  pbuf_free(p);
 80221ac:	69f8      	ldr	r0, [r7, #28]
 80221ae:	f7fa fd5b 	bl	801cc68 <pbuf_free>
 80221b2:	e000      	b.n	80221b6 <tcp_rst+0xd6>
    return;
 80221b4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80221b6:	3720      	adds	r7, #32
 80221b8:	46bd      	mov	sp, r7
 80221ba:	bd80      	pop	{r7, pc}
 80221bc:	080287b4 	.word	0x080287b4
 80221c0:	080287e8 	.word	0x080287e8
 80221c4:	08028818 	.word	0x08028818

080221c8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80221c8:	b580      	push	{r7, lr}
 80221ca:	b084      	sub	sp, #16
 80221cc:	af00      	add	r7, sp, #0
 80221ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80221d4:	2b00      	cmp	r3, #0
 80221d6:	d029      	beq.n	802222c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80221d8:	687b      	ldr	r3, [r7, #4]
 80221da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80221dc:	60fb      	str	r3, [r7, #12]
 80221de:	e002      	b.n	80221e6 <tcp_rexmit_rto+0x1e>
 80221e0:	68fb      	ldr	r3, [r7, #12]
 80221e2:	681b      	ldr	r3, [r3, #0]
 80221e4:	60fb      	str	r3, [r7, #12]
 80221e6:	68fb      	ldr	r3, [r7, #12]
 80221e8:	681b      	ldr	r3, [r3, #0]
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	d1f8      	bne.n	80221e0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80221ee:	687b      	ldr	r3, [r7, #4]
 80221f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80221f2:	68fb      	ldr	r3, [r7, #12]
 80221f4:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80221f6:	687b      	ldr	r3, [r7, #4]
 80221f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80221fa:	687b      	ldr	r3, [r7, #4]
 80221fc:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	2200      	movs	r2, #0
 8022202:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802220a:	2bff      	cmp	r3, #255	; 0xff
 802220c:	d007      	beq.n	802221e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022214:	3301      	adds	r3, #1
 8022216:	b2da      	uxtb	r2, r3
 8022218:	687b      	ldr	r3, [r7, #4]
 802221a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 802221e:	687b      	ldr	r3, [r7, #4]
 8022220:	2200      	movs	r2, #0
 8022222:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8022224:	6878      	ldr	r0, [r7, #4]
 8022226:	f7ff fcd3 	bl	8021bd0 <tcp_output>
 802222a:	e000      	b.n	802222e <tcp_rexmit_rto+0x66>
    return;
 802222c:	bf00      	nop
}
 802222e:	3710      	adds	r7, #16
 8022230:	46bd      	mov	sp, r7
 8022232:	bd80      	pop	{r7, pc}

08022234 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8022234:	b590      	push	{r4, r7, lr}
 8022236:	b085      	sub	sp, #20
 8022238:	af00      	add	r7, sp, #0
 802223a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 802223c:	687b      	ldr	r3, [r7, #4]
 802223e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022240:	2b00      	cmp	r3, #0
 8022242:	d043      	beq.n	80222cc <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8022244:	687b      	ldr	r3, [r7, #4]
 8022246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022248:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 802224a:	68bb      	ldr	r3, [r7, #8]
 802224c:	681a      	ldr	r2, [r3, #0]
 802224e:	687b      	ldr	r3, [r7, #4]
 8022250:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	3368      	adds	r3, #104	; 0x68
 8022256:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8022258:	e002      	b.n	8022260 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 802225a:	68fb      	ldr	r3, [r7, #12]
 802225c:	681b      	ldr	r3, [r3, #0]
 802225e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8022260:	68fb      	ldr	r3, [r7, #12]
 8022262:	681b      	ldr	r3, [r3, #0]
 8022264:	2b00      	cmp	r3, #0
 8022266:	d011      	beq.n	802228c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8022268:	68fb      	ldr	r3, [r7, #12]
 802226a:	681b      	ldr	r3, [r3, #0]
 802226c:	68db      	ldr	r3, [r3, #12]
 802226e:	685b      	ldr	r3, [r3, #4]
 8022270:	4618      	mov	r0, r3
 8022272:	f7f7 f877 	bl	8019364 <lwip_htonl>
 8022276:	4604      	mov	r4, r0
 8022278:	68bb      	ldr	r3, [r7, #8]
 802227a:	68db      	ldr	r3, [r3, #12]
 802227c:	685b      	ldr	r3, [r3, #4]
 802227e:	4618      	mov	r0, r3
 8022280:	f7f7 f870 	bl	8019364 <lwip_htonl>
 8022284:	4603      	mov	r3, r0
 8022286:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8022288:	2b00      	cmp	r3, #0
 802228a:	dbe6      	blt.n	802225a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 802228c:	68fb      	ldr	r3, [r7, #12]
 802228e:	681a      	ldr	r2, [r3, #0]
 8022290:	68bb      	ldr	r3, [r7, #8]
 8022292:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8022294:	68fb      	ldr	r3, [r7, #12]
 8022296:	68ba      	ldr	r2, [r7, #8]
 8022298:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 802229a:	68bb      	ldr	r3, [r7, #8]
 802229c:	681b      	ldr	r3, [r3, #0]
 802229e:	2b00      	cmp	r3, #0
 80222a0:	d103      	bne.n	80222aa <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80222a2:	687b      	ldr	r3, [r7, #4]
 80222a4:	2200      	movs	r2, #0
 80222a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80222aa:	687b      	ldr	r3, [r7, #4]
 80222ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80222b0:	2bff      	cmp	r3, #255	; 0xff
 80222b2:	d007      	beq.n	80222c4 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80222ba:	3301      	adds	r3, #1
 80222bc:	b2da      	uxtb	r2, r3
 80222be:	687b      	ldr	r3, [r7, #4]
 80222c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	2200      	movs	r2, #0
 80222c8:	635a      	str	r2, [r3, #52]	; 0x34
 80222ca:	e000      	b.n	80222ce <tcp_rexmit+0x9a>
    return;
 80222cc:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80222ce:	3714      	adds	r7, #20
 80222d0:	46bd      	mov	sp, r7
 80222d2:	bd90      	pop	{r4, r7, pc}

080222d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80222d4:	b580      	push	{r7, lr}
 80222d6:	b082      	sub	sp, #8
 80222d8:	af00      	add	r7, sp, #0
 80222da:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80222dc:	687b      	ldr	r3, [r7, #4]
 80222de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80222e0:	2b00      	cmp	r3, #0
 80222e2:	d04a      	beq.n	802237a <tcp_rexmit_fast+0xa6>
 80222e4:	687b      	ldr	r3, [r7, #4]
 80222e6:	7e9b      	ldrb	r3, [r3, #26]
 80222e8:	f003 0304 	and.w	r3, r3, #4
 80222ec:	2b00      	cmp	r3, #0
 80222ee:	d144      	bne.n	802237a <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80222f0:	6878      	ldr	r0, [r7, #4]
 80222f2:	f7ff ff9f 	bl	8022234 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80222f6:	687b      	ldr	r3, [r7, #4]
 80222f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80222fc:	687b      	ldr	r3, [r7, #4]
 80222fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8022302:	429a      	cmp	r2, r3
 8022304:	d207      	bcs.n	8022316 <tcp_rexmit_fast+0x42>
 8022306:	687b      	ldr	r3, [r7, #4]
 8022308:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802230c:	0fda      	lsrs	r2, r3, #31
 802230e:	4413      	add	r3, r2
 8022310:	105b      	asrs	r3, r3, #1
 8022312:	b29b      	uxth	r3, r3
 8022314:	e006      	b.n	8022324 <tcp_rexmit_fast+0x50>
 8022316:	687b      	ldr	r3, [r7, #4]
 8022318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802231c:	0fda      	lsrs	r2, r3, #31
 802231e:	4413      	add	r3, r2
 8022320:	105b      	asrs	r3, r3, #1
 8022322:	b29b      	uxth	r3, r3
 8022324:	687a      	ldr	r2, [r7, #4]
 8022326:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 802232a:	687b      	ldr	r3, [r7, #4]
 802232c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8022330:	461a      	mov	r2, r3
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022336:	005b      	lsls	r3, r3, #1
 8022338:	429a      	cmp	r2, r3
 802233a:	d206      	bcs.n	802234a <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 802233c:	687b      	ldr	r3, [r7, #4]
 802233e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022340:	005b      	lsls	r3, r3, #1
 8022342:	b29a      	uxth	r2, r3
 8022344:	687b      	ldr	r3, [r7, #4]
 8022346:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 802234a:	687b      	ldr	r3, [r7, #4]
 802234c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022354:	4619      	mov	r1, r3
 8022356:	0049      	lsls	r1, r1, #1
 8022358:	440b      	add	r3, r1
 802235a:	b29b      	uxth	r3, r3
 802235c:	4413      	add	r3, r2
 802235e:	b29a      	uxth	r2, r3
 8022360:	687b      	ldr	r3, [r7, #4]
 8022362:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8022366:	687b      	ldr	r3, [r7, #4]
 8022368:	7e9b      	ldrb	r3, [r3, #26]
 802236a:	f043 0304 	orr.w	r3, r3, #4
 802236e:	b2da      	uxtb	r2, r3
 8022370:	687b      	ldr	r3, [r7, #4]
 8022372:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8022374:	687b      	ldr	r3, [r7, #4]
 8022376:	2200      	movs	r2, #0
 8022378:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 802237a:	bf00      	nop
 802237c:	3708      	adds	r7, #8
 802237e:	46bd      	mov	sp, r7
 8022380:	bd80      	pop	{r7, pc}

08022382 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8022382:	b580      	push	{r7, lr}
 8022384:	b08a      	sub	sp, #40	; 0x28
 8022386:	af04      	add	r7, sp, #16
 8022388:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802238e:	3b01      	subs	r3, #1
 8022390:	4618      	mov	r0, r3
 8022392:	f7f6 ffe7 	bl	8019364 <lwip_htonl>
 8022396:	4603      	mov	r3, r0
 8022398:	2200      	movs	r2, #0
 802239a:	2100      	movs	r1, #0
 802239c:	6878      	ldr	r0, [r7, #4]
 802239e:	f7fe fd45 	bl	8020e2c <tcp_output_alloc_header>
 80223a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80223a4:	693b      	ldr	r3, [r7, #16]
 80223a6:	2b00      	cmp	r3, #0
 80223a8:	d102      	bne.n	80223b0 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80223aa:	f04f 33ff 	mov.w	r3, #4294967295
 80223ae:	e021      	b.n	80223f4 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80223b0:	687b      	ldr	r3, [r7, #4]
 80223b2:	3304      	adds	r3, #4
 80223b4:	4618      	mov	r0, r3
 80223b6:	f7f8 f8a9 	bl	801a50c <ip4_route>
 80223ba:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80223bc:	68fb      	ldr	r3, [r7, #12]
 80223be:	2b00      	cmp	r3, #0
 80223c0:	d102      	bne.n	80223c8 <tcp_keepalive+0x46>
    err = ERR_RTE;
 80223c2:	23fc      	movs	r3, #252	; 0xfc
 80223c4:	75fb      	strb	r3, [r7, #23]
 80223c6:	e010      	b.n	80223ea <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80223c8:	6879      	ldr	r1, [r7, #4]
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	1d1a      	adds	r2, r3, #4
 80223ce:	687b      	ldr	r3, [r7, #4]
 80223d0:	7a98      	ldrb	r0, [r3, #10]
 80223d2:	68fb      	ldr	r3, [r7, #12]
 80223d4:	9302      	str	r3, [sp, #8]
 80223d6:	2306      	movs	r3, #6
 80223d8:	9301      	str	r3, [sp, #4]
 80223da:	2300      	movs	r3, #0
 80223dc:	9300      	str	r3, [sp, #0]
 80223de:	4603      	mov	r3, r0
 80223e0:	6938      	ldr	r0, [r7, #16]
 80223e2:	f7f8 fa37 	bl	801a854 <ip4_output_if>
 80223e6:	4603      	mov	r3, r0
 80223e8:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80223ea:	6938      	ldr	r0, [r7, #16]
 80223ec:	f7fa fc3c 	bl	801cc68 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80223f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80223f4:	4618      	mov	r0, r3
 80223f6:	3718      	adds	r7, #24
 80223f8:	46bd      	mov	sp, r7
 80223fa:	bd80      	pop	{r7, pc}

080223fc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80223fc:	b590      	push	{r4, r7, lr}
 80223fe:	b08f      	sub	sp, #60	; 0x3c
 8022400:	af04      	add	r7, sp, #16
 8022402:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8022404:	687b      	ldr	r3, [r7, #4]
 8022406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022408:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 802240a:	6a3b      	ldr	r3, [r7, #32]
 802240c:	2b00      	cmp	r3, #0
 802240e:	d102      	bne.n	8022416 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8022414:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8022416:	6a3b      	ldr	r3, [r7, #32]
 8022418:	2b00      	cmp	r3, #0
 802241a:	d101      	bne.n	8022420 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 802241c:	2300      	movs	r3, #0
 802241e:	e085      	b.n	802252c <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8022420:	6a3b      	ldr	r3, [r7, #32]
 8022422:	68db      	ldr	r3, [r3, #12]
 8022424:	899b      	ldrh	r3, [r3, #12]
 8022426:	b29b      	uxth	r3, r3
 8022428:	4618      	mov	r0, r3
 802242a:	f7f6 ff8d 	bl	8019348 <lwip_htons>
 802242e:	4603      	mov	r3, r0
 8022430:	f003 0301 	and.w	r3, r3, #1
 8022434:	2b00      	cmp	r3, #0
 8022436:	d005      	beq.n	8022444 <tcp_zero_window_probe+0x48>
 8022438:	6a3b      	ldr	r3, [r7, #32]
 802243a:	891b      	ldrh	r3, [r3, #8]
 802243c:	2b00      	cmp	r3, #0
 802243e:	d101      	bne.n	8022444 <tcp_zero_window_probe+0x48>
 8022440:	2301      	movs	r3, #1
 8022442:	e000      	b.n	8022446 <tcp_zero_window_probe+0x4a>
 8022444:	2300      	movs	r3, #0
 8022446:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8022448:	7ffb      	ldrb	r3, [r7, #31]
 802244a:	2b00      	cmp	r3, #0
 802244c:	bf0c      	ite	eq
 802244e:	2301      	moveq	r3, #1
 8022450:	2300      	movne	r3, #0
 8022452:	b2db      	uxtb	r3, r3
 8022454:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8022456:	6a3b      	ldr	r3, [r7, #32]
 8022458:	68db      	ldr	r3, [r3, #12]
 802245a:	685b      	ldr	r3, [r3, #4]
 802245c:	8bba      	ldrh	r2, [r7, #28]
 802245e:	2100      	movs	r1, #0
 8022460:	6878      	ldr	r0, [r7, #4]
 8022462:	f7fe fce3 	bl	8020e2c <tcp_output_alloc_header>
 8022466:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8022468:	69bb      	ldr	r3, [r7, #24]
 802246a:	2b00      	cmp	r3, #0
 802246c:	d102      	bne.n	8022474 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 802246e:	f04f 33ff 	mov.w	r3, #4294967295
 8022472:	e05b      	b.n	802252c <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8022474:	69bb      	ldr	r3, [r7, #24]
 8022476:	685b      	ldr	r3, [r3, #4]
 8022478:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 802247a:	7ffb      	ldrb	r3, [r7, #31]
 802247c:	2b00      	cmp	r3, #0
 802247e:	d00e      	beq.n	802249e <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8022480:	697b      	ldr	r3, [r7, #20]
 8022482:	899b      	ldrh	r3, [r3, #12]
 8022484:	b29b      	uxth	r3, r3
 8022486:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802248a:	b29c      	uxth	r4, r3
 802248c:	2011      	movs	r0, #17
 802248e:	f7f6 ff5b 	bl	8019348 <lwip_htons>
 8022492:	4603      	mov	r3, r0
 8022494:	4323      	orrs	r3, r4
 8022496:	b29a      	uxth	r2, r3
 8022498:	697b      	ldr	r3, [r7, #20]
 802249a:	819a      	strh	r2, [r3, #12]
 802249c:	e010      	b.n	80224c0 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 802249e:	69bb      	ldr	r3, [r7, #24]
 80224a0:	685b      	ldr	r3, [r3, #4]
 80224a2:	3314      	adds	r3, #20
 80224a4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80224a6:	6a3b      	ldr	r3, [r7, #32]
 80224a8:	6858      	ldr	r0, [r3, #4]
 80224aa:	6a3b      	ldr	r3, [r7, #32]
 80224ac:	685b      	ldr	r3, [r3, #4]
 80224ae:	891a      	ldrh	r2, [r3, #8]
 80224b0:	6a3b      	ldr	r3, [r7, #32]
 80224b2:	891b      	ldrh	r3, [r3, #8]
 80224b4:	1ad3      	subs	r3, r2, r3
 80224b6:	b29b      	uxth	r3, r3
 80224b8:	2201      	movs	r2, #1
 80224ba:	6939      	ldr	r1, [r7, #16]
 80224bc:	f7fa fdd0 	bl	801d060 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80224c0:	6a3b      	ldr	r3, [r7, #32]
 80224c2:	68db      	ldr	r3, [r3, #12]
 80224c4:	685b      	ldr	r3, [r3, #4]
 80224c6:	4618      	mov	r0, r3
 80224c8:	f7f6 ff4c 	bl	8019364 <lwip_htonl>
 80224cc:	4603      	mov	r3, r0
 80224ce:	3301      	adds	r3, #1
 80224d0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80224d2:	687b      	ldr	r3, [r7, #4]
 80224d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80224d6:	68fb      	ldr	r3, [r7, #12]
 80224d8:	1ad3      	subs	r3, r2, r3
 80224da:	2b00      	cmp	r3, #0
 80224dc:	da02      	bge.n	80224e4 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80224de:	687b      	ldr	r3, [r7, #4]
 80224e0:	68fa      	ldr	r2, [r7, #12]
 80224e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80224e4:	687b      	ldr	r3, [r7, #4]
 80224e6:	3304      	adds	r3, #4
 80224e8:	4618      	mov	r0, r3
 80224ea:	f7f8 f80f 	bl	801a50c <ip4_route>
 80224ee:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80224f0:	68bb      	ldr	r3, [r7, #8]
 80224f2:	2b00      	cmp	r3, #0
 80224f4:	d103      	bne.n	80224fe <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80224f6:	23fc      	movs	r3, #252	; 0xfc
 80224f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80224fc:	e011      	b.n	8022522 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80224fe:	6879      	ldr	r1, [r7, #4]
 8022500:	687b      	ldr	r3, [r7, #4]
 8022502:	1d1a      	adds	r2, r3, #4
 8022504:	687b      	ldr	r3, [r7, #4]
 8022506:	7a98      	ldrb	r0, [r3, #10]
 8022508:	68bb      	ldr	r3, [r7, #8]
 802250a:	9302      	str	r3, [sp, #8]
 802250c:	2306      	movs	r3, #6
 802250e:	9301      	str	r3, [sp, #4]
 8022510:	2300      	movs	r3, #0
 8022512:	9300      	str	r3, [sp, #0]
 8022514:	4603      	mov	r3, r0
 8022516:	69b8      	ldr	r0, [r7, #24]
 8022518:	f7f8 f99c 	bl	801a854 <ip4_output_if>
 802251c:	4603      	mov	r3, r0
 802251e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8022522:	69b8      	ldr	r0, [r7, #24]
 8022524:	f7fa fba0 	bl	801cc68 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8022528:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 802252c:	4618      	mov	r0, r3
 802252e:	372c      	adds	r7, #44	; 0x2c
 8022530:	46bd      	mov	sp, r7
 8022532:	bd90      	pop	{r4, r7, pc}

08022534 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8022534:	b580      	push	{r7, lr}
 8022536:	b082      	sub	sp, #8
 8022538:	af00      	add	r7, sp, #0
 802253a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 802253c:	f7fa fe12 	bl	801d164 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8022540:	4b0a      	ldr	r3, [pc, #40]	; (802256c <tcpip_tcp_timer+0x38>)
 8022542:	681b      	ldr	r3, [r3, #0]
 8022544:	2b00      	cmp	r3, #0
 8022546:	d103      	bne.n	8022550 <tcpip_tcp_timer+0x1c>
 8022548:	4b09      	ldr	r3, [pc, #36]	; (8022570 <tcpip_tcp_timer+0x3c>)
 802254a:	681b      	ldr	r3, [r3, #0]
 802254c:	2b00      	cmp	r3, #0
 802254e:	d005      	beq.n	802255c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8022550:	2200      	movs	r2, #0
 8022552:	4908      	ldr	r1, [pc, #32]	; (8022574 <tcpip_tcp_timer+0x40>)
 8022554:	20fa      	movs	r0, #250	; 0xfa
 8022556:	f000 f86f 	bl	8022638 <sys_timeout>
 802255a:	e002      	b.n	8022562 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 802255c:	4b06      	ldr	r3, [pc, #24]	; (8022578 <tcpip_tcp_timer+0x44>)
 802255e:	2200      	movs	r2, #0
 8022560:	601a      	str	r2, [r3, #0]
  }
}
 8022562:	bf00      	nop
 8022564:	3708      	adds	r7, #8
 8022566:	46bd      	mov	sp, r7
 8022568:	bd80      	pop	{r7, pc}
 802256a:	bf00      	nop
 802256c:	20008c30 	.word	0x20008c30
 8022570:	20008c40 	.word	0x20008c40
 8022574:	08022535 	.word	0x08022535
 8022578:	20004130 	.word	0x20004130

0802257c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 802257c:	b580      	push	{r7, lr}
 802257e:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8022580:	4b0a      	ldr	r3, [pc, #40]	; (80225ac <tcp_timer_needed+0x30>)
 8022582:	681b      	ldr	r3, [r3, #0]
 8022584:	2b00      	cmp	r3, #0
 8022586:	d10f      	bne.n	80225a8 <tcp_timer_needed+0x2c>
 8022588:	4b09      	ldr	r3, [pc, #36]	; (80225b0 <tcp_timer_needed+0x34>)
 802258a:	681b      	ldr	r3, [r3, #0]
 802258c:	2b00      	cmp	r3, #0
 802258e:	d103      	bne.n	8022598 <tcp_timer_needed+0x1c>
 8022590:	4b08      	ldr	r3, [pc, #32]	; (80225b4 <tcp_timer_needed+0x38>)
 8022592:	681b      	ldr	r3, [r3, #0]
 8022594:	2b00      	cmp	r3, #0
 8022596:	d007      	beq.n	80225a8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8022598:	4b04      	ldr	r3, [pc, #16]	; (80225ac <tcp_timer_needed+0x30>)
 802259a:	2201      	movs	r2, #1
 802259c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 802259e:	2200      	movs	r2, #0
 80225a0:	4905      	ldr	r1, [pc, #20]	; (80225b8 <tcp_timer_needed+0x3c>)
 80225a2:	20fa      	movs	r0, #250	; 0xfa
 80225a4:	f000 f848 	bl	8022638 <sys_timeout>
  }
}
 80225a8:	bf00      	nop
 80225aa:	bd80      	pop	{r7, pc}
 80225ac:	20004130 	.word	0x20004130
 80225b0:	20008c30 	.word	0x20008c30
 80225b4:	20008c40 	.word	0x20008c40
 80225b8:	08022535 	.word	0x08022535

080225bc <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80225bc:	b580      	push	{r7, lr}
 80225be:	b084      	sub	sp, #16
 80225c0:	af00      	add	r7, sp, #0
 80225c2:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80225c4:	687b      	ldr	r3, [r7, #4]
 80225c6:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80225c8:	68fb      	ldr	r3, [r7, #12]
 80225ca:	685b      	ldr	r3, [r3, #4]
 80225cc:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80225ce:	68fb      	ldr	r3, [r7, #12]
 80225d0:	681b      	ldr	r3, [r3, #0]
 80225d2:	687a      	ldr	r2, [r7, #4]
 80225d4:	4903      	ldr	r1, [pc, #12]	; (80225e4 <cyclic_timer+0x28>)
 80225d6:	4618      	mov	r0, r3
 80225d8:	f000 f82e 	bl	8022638 <sys_timeout>
}
 80225dc:	bf00      	nop
 80225de:	3710      	adds	r7, #16
 80225e0:	46bd      	mov	sp, r7
 80225e2:	bd80      	pop	{r7, pc}
 80225e4:	080225bd 	.word	0x080225bd

080225e8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80225e8:	b580      	push	{r7, lr}
 80225ea:	b082      	sub	sp, #8
 80225ec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80225ee:	2301      	movs	r3, #1
 80225f0:	607b      	str	r3, [r7, #4]
 80225f2:	e00e      	b.n	8022612 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80225f4:	4a0d      	ldr	r2, [pc, #52]	; (802262c <sys_timeouts_init+0x44>)
 80225f6:	687b      	ldr	r3, [r7, #4]
 80225f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	00db      	lsls	r3, r3, #3
 8022600:	4a0a      	ldr	r2, [pc, #40]	; (802262c <sys_timeouts_init+0x44>)
 8022602:	4413      	add	r3, r2
 8022604:	461a      	mov	r2, r3
 8022606:	490a      	ldr	r1, [pc, #40]	; (8022630 <sys_timeouts_init+0x48>)
 8022608:	f000 f816 	bl	8022638 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	3301      	adds	r3, #1
 8022610:	607b      	str	r3, [r7, #4]
 8022612:	687b      	ldr	r3, [r7, #4]
 8022614:	2b02      	cmp	r3, #2
 8022616:	d9ed      	bls.n	80225f4 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8022618:	f001 feaa 	bl	8024370 <sys_now>
 802261c:	4602      	mov	r2, r0
 802261e:	4b05      	ldr	r3, [pc, #20]	; (8022634 <sys_timeouts_init+0x4c>)
 8022620:	601a      	str	r2, [r3, #0]
}
 8022622:	bf00      	nop
 8022624:	3708      	adds	r7, #8
 8022626:	46bd      	mov	sp, r7
 8022628:	bd80      	pop	{r7, pc}
 802262a:	bf00      	nop
 802262c:	0802b448 	.word	0x0802b448
 8022630:	080225bd 	.word	0x080225bd
 8022634:	2000412c 	.word	0x2000412c

08022638 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8022638:	b580      	push	{r7, lr}
 802263a:	b088      	sub	sp, #32
 802263c:	af00      	add	r7, sp, #0
 802263e:	60f8      	str	r0, [r7, #12]
 8022640:	60b9      	str	r1, [r7, #8]
 8022642:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8022644:	200a      	movs	r0, #10
 8022646:	f7f9 fd63 	bl	801c110 <memp_malloc>
 802264a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 802264c:	697b      	ldr	r3, [r7, #20]
 802264e:	2b00      	cmp	r3, #0
 8022650:	d10a      	bne.n	8022668 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8022652:	697b      	ldr	r3, [r7, #20]
 8022654:	2b00      	cmp	r3, #0
 8022656:	f040 8084 	bne.w	8022762 <sys_timeout+0x12a>
 802265a:	4b44      	ldr	r3, [pc, #272]	; (802276c <sys_timeout+0x134>)
 802265c:	22d4      	movs	r2, #212	; 0xd4
 802265e:	4944      	ldr	r1, [pc, #272]	; (8022770 <sys_timeout+0x138>)
 8022660:	4844      	ldr	r0, [pc, #272]	; (8022774 <sys_timeout+0x13c>)
 8022662:	f003 fa5d 	bl	8025b20 <iprintf>
    return;
 8022666:	e07c      	b.n	8022762 <sys_timeout+0x12a>
  }

  now = sys_now();
 8022668:	f001 fe82 	bl	8024370 <sys_now>
 802266c:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 802266e:	4b42      	ldr	r3, [pc, #264]	; (8022778 <sys_timeout+0x140>)
 8022670:	681b      	ldr	r3, [r3, #0]
 8022672:	2b00      	cmp	r3, #0
 8022674:	d105      	bne.n	8022682 <sys_timeout+0x4a>
    diff = 0;
 8022676:	2300      	movs	r3, #0
 8022678:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 802267a:	4a40      	ldr	r2, [pc, #256]	; (802277c <sys_timeout+0x144>)
 802267c:	693b      	ldr	r3, [r7, #16]
 802267e:	6013      	str	r3, [r2, #0]
 8022680:	e004      	b.n	802268c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8022682:	4b3e      	ldr	r3, [pc, #248]	; (802277c <sys_timeout+0x144>)
 8022684:	681b      	ldr	r3, [r3, #0]
 8022686:	693a      	ldr	r2, [r7, #16]
 8022688:	1ad3      	subs	r3, r2, r3
 802268a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 802268c:	697b      	ldr	r3, [r7, #20]
 802268e:	2200      	movs	r2, #0
 8022690:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8022692:	697b      	ldr	r3, [r7, #20]
 8022694:	68ba      	ldr	r2, [r7, #8]
 8022696:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8022698:	697b      	ldr	r3, [r7, #20]
 802269a:	687a      	ldr	r2, [r7, #4]
 802269c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 802269e:	68fa      	ldr	r2, [r7, #12]
 80226a0:	69bb      	ldr	r3, [r7, #24]
 80226a2:	441a      	add	r2, r3
 80226a4:	697b      	ldr	r3, [r7, #20]
 80226a6:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80226a8:	4b33      	ldr	r3, [pc, #204]	; (8022778 <sys_timeout+0x140>)
 80226aa:	681b      	ldr	r3, [r3, #0]
 80226ac:	2b00      	cmp	r3, #0
 80226ae:	d103      	bne.n	80226b8 <sys_timeout+0x80>
    next_timeout = timeout;
 80226b0:	4a31      	ldr	r2, [pc, #196]	; (8022778 <sys_timeout+0x140>)
 80226b2:	697b      	ldr	r3, [r7, #20]
 80226b4:	6013      	str	r3, [r2, #0]
    return;
 80226b6:	e055      	b.n	8022764 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80226b8:	4b2f      	ldr	r3, [pc, #188]	; (8022778 <sys_timeout+0x140>)
 80226ba:	681b      	ldr	r3, [r3, #0]
 80226bc:	685a      	ldr	r2, [r3, #4]
 80226be:	68fb      	ldr	r3, [r7, #12]
 80226c0:	429a      	cmp	r2, r3
 80226c2:	d90f      	bls.n	80226e4 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80226c4:	4b2c      	ldr	r3, [pc, #176]	; (8022778 <sys_timeout+0x140>)
 80226c6:	681b      	ldr	r3, [r3, #0]
 80226c8:	4a2b      	ldr	r2, [pc, #172]	; (8022778 <sys_timeout+0x140>)
 80226ca:	6812      	ldr	r2, [r2, #0]
 80226cc:	6851      	ldr	r1, [r2, #4]
 80226ce:	68fa      	ldr	r2, [r7, #12]
 80226d0:	1a8a      	subs	r2, r1, r2
 80226d2:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80226d4:	4b28      	ldr	r3, [pc, #160]	; (8022778 <sys_timeout+0x140>)
 80226d6:	681a      	ldr	r2, [r3, #0]
 80226d8:	697b      	ldr	r3, [r7, #20]
 80226da:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80226dc:	4a26      	ldr	r2, [pc, #152]	; (8022778 <sys_timeout+0x140>)
 80226de:	697b      	ldr	r3, [r7, #20]
 80226e0:	6013      	str	r3, [r2, #0]
 80226e2:	e03f      	b.n	8022764 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80226e4:	4b24      	ldr	r3, [pc, #144]	; (8022778 <sys_timeout+0x140>)
 80226e6:	681b      	ldr	r3, [r3, #0]
 80226e8:	61fb      	str	r3, [r7, #28]
 80226ea:	e036      	b.n	802275a <sys_timeout+0x122>
      timeout->time -= t->time;
 80226ec:	697b      	ldr	r3, [r7, #20]
 80226ee:	685a      	ldr	r2, [r3, #4]
 80226f0:	69fb      	ldr	r3, [r7, #28]
 80226f2:	685b      	ldr	r3, [r3, #4]
 80226f4:	1ad2      	subs	r2, r2, r3
 80226f6:	697b      	ldr	r3, [r7, #20]
 80226f8:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80226fa:	69fb      	ldr	r3, [r7, #28]
 80226fc:	681b      	ldr	r3, [r3, #0]
 80226fe:	2b00      	cmp	r3, #0
 8022700:	d006      	beq.n	8022710 <sys_timeout+0xd8>
 8022702:	69fb      	ldr	r3, [r7, #28]
 8022704:	681b      	ldr	r3, [r3, #0]
 8022706:	685a      	ldr	r2, [r3, #4]
 8022708:	697b      	ldr	r3, [r7, #20]
 802270a:	685b      	ldr	r3, [r3, #4]
 802270c:	429a      	cmp	r2, r3
 802270e:	d921      	bls.n	8022754 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8022710:	69fb      	ldr	r3, [r7, #28]
 8022712:	681b      	ldr	r3, [r3, #0]
 8022714:	2b00      	cmp	r3, #0
 8022716:	d009      	beq.n	802272c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8022718:	69fb      	ldr	r3, [r7, #28]
 802271a:	681b      	ldr	r3, [r3, #0]
 802271c:	69fa      	ldr	r2, [r7, #28]
 802271e:	6812      	ldr	r2, [r2, #0]
 8022720:	6851      	ldr	r1, [r2, #4]
 8022722:	697a      	ldr	r2, [r7, #20]
 8022724:	6852      	ldr	r2, [r2, #4]
 8022726:	1a8a      	subs	r2, r1, r2
 8022728:	605a      	str	r2, [r3, #4]
 802272a:	e00b      	b.n	8022744 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 802272c:	697b      	ldr	r3, [r7, #20]
 802272e:	685a      	ldr	r2, [r3, #4]
 8022730:	68fb      	ldr	r3, [r7, #12]
 8022732:	429a      	cmp	r2, r3
 8022734:	d906      	bls.n	8022744 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8022736:	4b10      	ldr	r3, [pc, #64]	; (8022778 <sys_timeout+0x140>)
 8022738:	681b      	ldr	r3, [r3, #0]
 802273a:	685a      	ldr	r2, [r3, #4]
 802273c:	68fb      	ldr	r3, [r7, #12]
 802273e:	441a      	add	r2, r3
 8022740:	697b      	ldr	r3, [r7, #20]
 8022742:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8022744:	69fb      	ldr	r3, [r7, #28]
 8022746:	681a      	ldr	r2, [r3, #0]
 8022748:	697b      	ldr	r3, [r7, #20]
 802274a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 802274c:	69fb      	ldr	r3, [r7, #28]
 802274e:	697a      	ldr	r2, [r7, #20]
 8022750:	601a      	str	r2, [r3, #0]
        break;
 8022752:	e007      	b.n	8022764 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8022754:	69fb      	ldr	r3, [r7, #28]
 8022756:	681b      	ldr	r3, [r3, #0]
 8022758:	61fb      	str	r3, [r7, #28]
 802275a:	69fb      	ldr	r3, [r7, #28]
 802275c:	2b00      	cmp	r3, #0
 802275e:	d1c5      	bne.n	80226ec <sys_timeout+0xb4>
 8022760:	e000      	b.n	8022764 <sys_timeout+0x12c>
    return;
 8022762:	bf00      	nop
      }
    }
  }
}
 8022764:	3720      	adds	r7, #32
 8022766:	46bd      	mov	sp, r7
 8022768:	bd80      	pop	{r7, pc}
 802276a:	bf00      	nop
 802276c:	08028bf8 	.word	0x08028bf8
 8022770:	08028c2c 	.word	0x08028c2c
 8022774:	08028c6c 	.word	0x08028c6c
 8022778:	20004128 	.word	0x20004128
 802277c:	2000412c 	.word	0x2000412c

08022780 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8022780:	b580      	push	{r7, lr}
 8022782:	b086      	sub	sp, #24
 8022784:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8022786:	4b24      	ldr	r3, [pc, #144]	; (8022818 <sys_check_timeouts+0x98>)
 8022788:	681b      	ldr	r3, [r3, #0]
 802278a:	2b00      	cmp	r3, #0
 802278c:	d03f      	beq.n	802280e <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 802278e:	f001 fdef 	bl	8024370 <sys_now>
 8022792:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8022794:	4b21      	ldr	r3, [pc, #132]	; (802281c <sys_check_timeouts+0x9c>)
 8022796:	681b      	ldr	r3, [r3, #0]
 8022798:	68fa      	ldr	r2, [r7, #12]
 802279a:	1ad3      	subs	r3, r2, r3
 802279c:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 802279e:	2300      	movs	r3, #0
 80227a0:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80227a2:	4b1d      	ldr	r3, [pc, #116]	; (8022818 <sys_check_timeouts+0x98>)
 80227a4:	681b      	ldr	r3, [r3, #0]
 80227a6:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80227a8:	68bb      	ldr	r3, [r7, #8]
 80227aa:	2b00      	cmp	r3, #0
 80227ac:	d02c      	beq.n	8022808 <sys_check_timeouts+0x88>
 80227ae:	68bb      	ldr	r3, [r7, #8]
 80227b0:	685a      	ldr	r2, [r3, #4]
 80227b2:	697b      	ldr	r3, [r7, #20]
 80227b4:	429a      	cmp	r2, r3
 80227b6:	d827      	bhi.n	8022808 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 80227b8:	2301      	movs	r3, #1
 80227ba:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80227bc:	68bb      	ldr	r3, [r7, #8]
 80227be:	685a      	ldr	r2, [r3, #4]
 80227c0:	4b16      	ldr	r3, [pc, #88]	; (802281c <sys_check_timeouts+0x9c>)
 80227c2:	681b      	ldr	r3, [r3, #0]
 80227c4:	4413      	add	r3, r2
 80227c6:	4a15      	ldr	r2, [pc, #84]	; (802281c <sys_check_timeouts+0x9c>)
 80227c8:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 80227ca:	68bb      	ldr	r3, [r7, #8]
 80227cc:	685b      	ldr	r3, [r3, #4]
 80227ce:	697a      	ldr	r2, [r7, #20]
 80227d0:	1ad3      	subs	r3, r2, r3
 80227d2:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 80227d4:	68bb      	ldr	r3, [r7, #8]
 80227d6:	681b      	ldr	r3, [r3, #0]
 80227d8:	4a0f      	ldr	r2, [pc, #60]	; (8022818 <sys_check_timeouts+0x98>)
 80227da:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 80227dc:	68bb      	ldr	r3, [r7, #8]
 80227de:	689b      	ldr	r3, [r3, #8]
 80227e0:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 80227e2:	68bb      	ldr	r3, [r7, #8]
 80227e4:	68db      	ldr	r3, [r3, #12]
 80227e6:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80227e8:	68b9      	ldr	r1, [r7, #8]
 80227ea:	200a      	movs	r0, #10
 80227ec:	f7f9 fce2 	bl	801c1b4 <memp_free>
        if (handler != NULL) {
 80227f0:	687b      	ldr	r3, [r7, #4]
 80227f2:	2b00      	cmp	r3, #0
 80227f4:	d008      	beq.n	8022808 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80227f6:	480a      	ldr	r0, [pc, #40]	; (8022820 <sys_check_timeouts+0xa0>)
 80227f8:	f000 fd34 	bl	8023264 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80227fc:	687b      	ldr	r3, [r7, #4]
 80227fe:	6838      	ldr	r0, [r7, #0]
 8022800:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8022802:	4807      	ldr	r0, [pc, #28]	; (8022820 <sys_check_timeouts+0xa0>)
 8022804:	f000 fd3d 	bl	8023282 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8022808:	7cfb      	ldrb	r3, [r7, #19]
 802280a:	2b00      	cmp	r3, #0
 802280c:	d1c7      	bne.n	802279e <sys_check_timeouts+0x1e>
  }
}
 802280e:	bf00      	nop
 8022810:	3718      	adds	r7, #24
 8022812:	46bd      	mov	sp, r7
 8022814:	bd80      	pop	{r7, pc}
 8022816:	bf00      	nop
 8022818:	20004128 	.word	0x20004128
 802281c:	2000412c 	.word	0x2000412c
 8022820:	20004604 	.word	0x20004604

08022824 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8022824:	b580      	push	{r7, lr}
 8022826:	b082      	sub	sp, #8
 8022828:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 802282a:	4b0f      	ldr	r3, [pc, #60]	; (8022868 <sys_timeouts_sleeptime+0x44>)
 802282c:	681b      	ldr	r3, [r3, #0]
 802282e:	2b00      	cmp	r3, #0
 8022830:	d102      	bne.n	8022838 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8022832:	f04f 33ff 	mov.w	r3, #4294967295
 8022836:	e013      	b.n	8022860 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8022838:	f001 fd9a 	bl	8024370 <sys_now>
 802283c:	4602      	mov	r2, r0
 802283e:	4b0b      	ldr	r3, [pc, #44]	; (802286c <sys_timeouts_sleeptime+0x48>)
 8022840:	681b      	ldr	r3, [r3, #0]
 8022842:	1ad3      	subs	r3, r2, r3
 8022844:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8022846:	4b08      	ldr	r3, [pc, #32]	; (8022868 <sys_timeouts_sleeptime+0x44>)
 8022848:	681b      	ldr	r3, [r3, #0]
 802284a:	685a      	ldr	r2, [r3, #4]
 802284c:	687b      	ldr	r3, [r7, #4]
 802284e:	429a      	cmp	r2, r3
 8022850:	d201      	bcs.n	8022856 <sys_timeouts_sleeptime+0x32>
    return 0;
 8022852:	2300      	movs	r3, #0
 8022854:	e004      	b.n	8022860 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8022856:	4b04      	ldr	r3, [pc, #16]	; (8022868 <sys_timeouts_sleeptime+0x44>)
 8022858:	681b      	ldr	r3, [r3, #0]
 802285a:	685a      	ldr	r2, [r3, #4]
 802285c:	687b      	ldr	r3, [r7, #4]
 802285e:	1ad3      	subs	r3, r2, r3
  }
}
 8022860:	4618      	mov	r0, r3
 8022862:	3708      	adds	r7, #8
 8022864:	46bd      	mov	sp, r7
 8022866:	bd80      	pop	{r7, pc}
 8022868:	20004128 	.word	0x20004128
 802286c:	2000412c 	.word	0x2000412c

08022870 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8022870:	b580      	push	{r7, lr}
 8022872:	b084      	sub	sp, #16
 8022874:	af00      	add	r7, sp, #0
 8022876:	6078      	str	r0, [r7, #4]
 8022878:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 802287a:	4b0f      	ldr	r3, [pc, #60]	; (80228b8 <sys_timeouts_mbox_fetch+0x48>)
 802287c:	681b      	ldr	r3, [r3, #0]
 802287e:	2b00      	cmp	r3, #0
 8022880:	d105      	bne.n	802288e <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8022882:	2200      	movs	r2, #0
 8022884:	6839      	ldr	r1, [r7, #0]
 8022886:	6878      	ldr	r0, [r7, #4]
 8022888:	f000 fbbb 	bl	8023002 <sys_arch_mbox_fetch>
    return;
 802288c:	e011      	b.n	80228b2 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 802288e:	f7ff ffc9 	bl	8022824 <sys_timeouts_sleeptime>
 8022892:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8022894:	68fb      	ldr	r3, [r7, #12]
 8022896:	2b00      	cmp	r3, #0
 8022898:	d008      	beq.n	80228ac <sys_timeouts_mbox_fetch+0x3c>
 802289a:	68fa      	ldr	r2, [r7, #12]
 802289c:	6839      	ldr	r1, [r7, #0]
 802289e:	6878      	ldr	r0, [r7, #4]
 80228a0:	f000 fbaf 	bl	8023002 <sys_arch_mbox_fetch>
 80228a4:	4603      	mov	r3, r0
 80228a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80228aa:	d102      	bne.n	80228b2 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80228ac:	f7ff ff68 	bl	8022780 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80228b0:	e7e3      	b.n	802287a <sys_timeouts_mbox_fetch+0xa>
  }
}
 80228b2:	3710      	adds	r7, #16
 80228b4:	46bd      	mov	sp, r7
 80228b6:	bd80      	pop	{r7, pc}
 80228b8:	20004128 	.word	0x20004128

080228bc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80228bc:	b480      	push	{r7}
 80228be:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80228c0:	bf00      	nop
 80228c2:	46bd      	mov	sp, r7
 80228c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228c8:	4770      	bx	lr
	...

080228cc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80228cc:	b480      	push	{r7}
 80228ce:	b083      	sub	sp, #12
 80228d0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80228d2:	2300      	movs	r3, #0
 80228d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80228d6:	4b17      	ldr	r3, [pc, #92]	; (8022934 <udp_new_port+0x68>)
 80228d8:	881b      	ldrh	r3, [r3, #0]
 80228da:	1c5a      	adds	r2, r3, #1
 80228dc:	b291      	uxth	r1, r2
 80228de:	4a15      	ldr	r2, [pc, #84]	; (8022934 <udp_new_port+0x68>)
 80228e0:	8011      	strh	r1, [r2, #0]
 80228e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80228e6:	4293      	cmp	r3, r2
 80228e8:	d103      	bne.n	80228f2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80228ea:	4b12      	ldr	r3, [pc, #72]	; (8022934 <udp_new_port+0x68>)
 80228ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80228f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80228f2:	4b11      	ldr	r3, [pc, #68]	; (8022938 <udp_new_port+0x6c>)
 80228f4:	681b      	ldr	r3, [r3, #0]
 80228f6:	603b      	str	r3, [r7, #0]
 80228f8:	e011      	b.n	802291e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80228fa:	683b      	ldr	r3, [r7, #0]
 80228fc:	8a5a      	ldrh	r2, [r3, #18]
 80228fe:	4b0d      	ldr	r3, [pc, #52]	; (8022934 <udp_new_port+0x68>)
 8022900:	881b      	ldrh	r3, [r3, #0]
 8022902:	429a      	cmp	r2, r3
 8022904:	d108      	bne.n	8022918 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8022906:	88fb      	ldrh	r3, [r7, #6]
 8022908:	3301      	adds	r3, #1
 802290a:	80fb      	strh	r3, [r7, #6]
 802290c:	88fb      	ldrh	r3, [r7, #6]
 802290e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8022912:	d3e0      	bcc.n	80228d6 <udp_new_port+0xa>
        return 0;
 8022914:	2300      	movs	r3, #0
 8022916:	e007      	b.n	8022928 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022918:	683b      	ldr	r3, [r7, #0]
 802291a:	68db      	ldr	r3, [r3, #12]
 802291c:	603b      	str	r3, [r7, #0]
 802291e:	683b      	ldr	r3, [r7, #0]
 8022920:	2b00      	cmp	r3, #0
 8022922:	d1ea      	bne.n	80228fa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8022924:	4b03      	ldr	r3, [pc, #12]	; (8022934 <udp_new_port+0x68>)
 8022926:	881b      	ldrh	r3, [r3, #0]
}
 8022928:	4618      	mov	r0, r3
 802292a:	370c      	adds	r7, #12
 802292c:	46bd      	mov	sp, r7
 802292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022932:	4770      	bx	lr
 8022934:	20000010 	.word	0x20000010
 8022938:	20008c48 	.word	0x20008c48

0802293c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 802293c:	b480      	push	{r7}
 802293e:	b085      	sub	sp, #20
 8022940:	af00      	add	r7, sp, #0
 8022942:	60f8      	str	r0, [r7, #12]
 8022944:	60b9      	str	r1, [r7, #8]
 8022946:	4613      	mov	r3, r2
 8022948:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 802294a:	79fb      	ldrb	r3, [r7, #7]
 802294c:	2b00      	cmp	r3, #0
 802294e:	d018      	beq.n	8022982 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022950:	68fb      	ldr	r3, [r7, #12]
 8022952:	2b00      	cmp	r3, #0
 8022954:	d013      	beq.n	802297e <udp_input_local_match+0x42>
 8022956:	68fb      	ldr	r3, [r7, #12]
 8022958:	681b      	ldr	r3, [r3, #0]
 802295a:	2b00      	cmp	r3, #0
 802295c:	d00f      	beq.n	802297e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802295e:	4b14      	ldr	r3, [pc, #80]	; (80229b0 <udp_input_local_match+0x74>)
 8022960:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022966:	d00a      	beq.n	802297e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8022968:	68fb      	ldr	r3, [r7, #12]
 802296a:	681a      	ldr	r2, [r3, #0]
 802296c:	4b10      	ldr	r3, [pc, #64]	; (80229b0 <udp_input_local_match+0x74>)
 802296e:	695b      	ldr	r3, [r3, #20]
 8022970:	405a      	eors	r2, r3
 8022972:	68bb      	ldr	r3, [r7, #8]
 8022974:	3308      	adds	r3, #8
 8022976:	681b      	ldr	r3, [r3, #0]
 8022978:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802297a:	2b00      	cmp	r3, #0
 802297c:	d110      	bne.n	80229a0 <udp_input_local_match+0x64>
          return 1;
 802297e:	2301      	movs	r3, #1
 8022980:	e00f      	b.n	80229a2 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8022982:	68fb      	ldr	r3, [r7, #12]
 8022984:	2b00      	cmp	r3, #0
 8022986:	d009      	beq.n	802299c <udp_input_local_match+0x60>
 8022988:	68fb      	ldr	r3, [r7, #12]
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	2b00      	cmp	r3, #0
 802298e:	d005      	beq.n	802299c <udp_input_local_match+0x60>
 8022990:	68fb      	ldr	r3, [r7, #12]
 8022992:	681a      	ldr	r2, [r3, #0]
 8022994:	4b06      	ldr	r3, [pc, #24]	; (80229b0 <udp_input_local_match+0x74>)
 8022996:	695b      	ldr	r3, [r3, #20]
 8022998:	429a      	cmp	r2, r3
 802299a:	d101      	bne.n	80229a0 <udp_input_local_match+0x64>
      return 1;
 802299c:	2301      	movs	r3, #1
 802299e:	e000      	b.n	80229a2 <udp_input_local_match+0x66>
    }
  }

  return 0;
 80229a0:	2300      	movs	r3, #0
}
 80229a2:	4618      	mov	r0, r3
 80229a4:	3714      	adds	r7, #20
 80229a6:	46bd      	mov	sp, r7
 80229a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229ac:	4770      	bx	lr
 80229ae:	bf00      	nop
 80229b0:	20004608 	.word	0x20004608

080229b4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80229b4:	b590      	push	{r4, r7, lr}
 80229b6:	b08d      	sub	sp, #52	; 0x34
 80229b8:	af02      	add	r7, sp, #8
 80229ba:	6078      	str	r0, [r7, #4]
 80229bc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80229be:	2300      	movs	r3, #0
 80229c0:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	895b      	ldrh	r3, [r3, #10]
 80229c6:	2b07      	cmp	r3, #7
 80229c8:	d803      	bhi.n	80229d2 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80229ca:	6878      	ldr	r0, [r7, #4]
 80229cc:	f7fa f94c 	bl	801cc68 <pbuf_free>
    goto end;
 80229d0:	e0c6      	b.n	8022b60 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80229d2:	687b      	ldr	r3, [r7, #4]
 80229d4:	685b      	ldr	r3, [r3, #4]
 80229d6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80229d8:	4b63      	ldr	r3, [pc, #396]	; (8022b68 <udp_input+0x1b4>)
 80229da:	695a      	ldr	r2, [r3, #20]
 80229dc:	4b62      	ldr	r3, [pc, #392]	; (8022b68 <udp_input+0x1b4>)
 80229de:	681b      	ldr	r3, [r3, #0]
 80229e0:	4619      	mov	r1, r3
 80229e2:	4610      	mov	r0, r2
 80229e4:	f7f8 f808 	bl	801a9f8 <ip4_addr_isbroadcast_u32>
 80229e8:	4603      	mov	r3, r0
 80229ea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80229ec:	697b      	ldr	r3, [r7, #20]
 80229ee:	881b      	ldrh	r3, [r3, #0]
 80229f0:	b29b      	uxth	r3, r3
 80229f2:	4618      	mov	r0, r3
 80229f4:	f7f6 fca8 	bl	8019348 <lwip_htons>
 80229f8:	4603      	mov	r3, r0
 80229fa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80229fc:	697b      	ldr	r3, [r7, #20]
 80229fe:	885b      	ldrh	r3, [r3, #2]
 8022a00:	b29b      	uxth	r3, r3
 8022a02:	4618      	mov	r0, r3
 8022a04:	f7f6 fca0 	bl	8019348 <lwip_htons>
 8022a08:	4603      	mov	r3, r0
 8022a0a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8022a0c:	2300      	movs	r3, #0
 8022a0e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8022a10:	2300      	movs	r3, #0
 8022a12:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8022a14:	2300      	movs	r3, #0
 8022a16:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022a18:	4b54      	ldr	r3, [pc, #336]	; (8022b6c <udp_input+0x1b8>)
 8022a1a:	681b      	ldr	r3, [r3, #0]
 8022a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8022a1e:	e03b      	b.n	8022a98 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8022a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a22:	8a5b      	ldrh	r3, [r3, #18]
 8022a24:	89fa      	ldrh	r2, [r7, #14]
 8022a26:	429a      	cmp	r2, r3
 8022a28:	d131      	bne.n	8022a8e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8022a2a:	7cfb      	ldrb	r3, [r7, #19]
 8022a2c:	461a      	mov	r2, r3
 8022a2e:	6839      	ldr	r1, [r7, #0]
 8022a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022a32:	f7ff ff83 	bl	802293c <udp_input_local_match>
 8022a36:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8022a38:	2b00      	cmp	r3, #0
 8022a3a:	d028      	beq.n	8022a8e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8022a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a3e:	7c1b      	ldrb	r3, [r3, #16]
 8022a40:	f003 0304 	and.w	r3, r3, #4
 8022a44:	2b00      	cmp	r3, #0
 8022a46:	d104      	bne.n	8022a52 <udp_input+0x9e>
 8022a48:	69fb      	ldr	r3, [r7, #28]
 8022a4a:	2b00      	cmp	r3, #0
 8022a4c:	d101      	bne.n	8022a52 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8022a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a50:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8022a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a54:	8a9b      	ldrh	r3, [r3, #20]
 8022a56:	8a3a      	ldrh	r2, [r7, #16]
 8022a58:	429a      	cmp	r2, r3
 8022a5a:	d118      	bne.n	8022a8e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8022a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a5e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8022a60:	2b00      	cmp	r3, #0
 8022a62:	d005      	beq.n	8022a70 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8022a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a66:	685a      	ldr	r2, [r3, #4]
 8022a68:	4b3f      	ldr	r3, [pc, #252]	; (8022b68 <udp_input+0x1b4>)
 8022a6a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8022a6c:	429a      	cmp	r2, r3
 8022a6e:	d10e      	bne.n	8022a8e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8022a70:	6a3b      	ldr	r3, [r7, #32]
 8022a72:	2b00      	cmp	r3, #0
 8022a74:	d014      	beq.n	8022aa0 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8022a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a78:	68da      	ldr	r2, [r3, #12]
 8022a7a:	6a3b      	ldr	r3, [r7, #32]
 8022a7c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8022a7e:	4b3b      	ldr	r3, [pc, #236]	; (8022b6c <udp_input+0x1b8>)
 8022a80:	681a      	ldr	r2, [r3, #0]
 8022a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a84:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8022a86:	4a39      	ldr	r2, [pc, #228]	; (8022b6c <udp_input+0x1b8>)
 8022a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a8a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8022a8c:	e008      	b.n	8022aa0 <udp_input+0xec>
      }
    }

    prev = pcb;
 8022a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a90:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a94:	68db      	ldr	r3, [r3, #12]
 8022a96:	627b      	str	r3, [r7, #36]	; 0x24
 8022a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a9a:	2b00      	cmp	r3, #0
 8022a9c:	d1c0      	bne.n	8022a20 <udp_input+0x6c>
 8022a9e:	e000      	b.n	8022aa2 <udp_input+0xee>
        break;
 8022aa0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8022aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	d101      	bne.n	8022aac <udp_input+0xf8>
    pcb = uncon_pcb;
 8022aa8:	69fb      	ldr	r3, [r7, #28]
 8022aaa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8022aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022aae:	2b00      	cmp	r3, #0
 8022ab0:	d002      	beq.n	8022ab8 <udp_input+0x104>
    for_us = 1;
 8022ab2:	2301      	movs	r3, #1
 8022ab4:	76fb      	strb	r3, [r7, #27]
 8022ab6:	e00a      	b.n	8022ace <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8022ab8:	683b      	ldr	r3, [r7, #0]
 8022aba:	3304      	adds	r3, #4
 8022abc:	681a      	ldr	r2, [r3, #0]
 8022abe:	4b2a      	ldr	r3, [pc, #168]	; (8022b68 <udp_input+0x1b4>)
 8022ac0:	695b      	ldr	r3, [r3, #20]
 8022ac2:	429a      	cmp	r2, r3
 8022ac4:	bf0c      	ite	eq
 8022ac6:	2301      	moveq	r3, #1
 8022ac8:	2300      	movne	r3, #0
 8022aca:	b2db      	uxtb	r3, r3
 8022acc:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8022ace:	7efb      	ldrb	r3, [r7, #27]
 8022ad0:	2b00      	cmp	r3, #0
 8022ad2:	d042      	beq.n	8022b5a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8022ad4:	f06f 0107 	mvn.w	r1, #7
 8022ad8:	6878      	ldr	r0, [r7, #4]
 8022ada:	f7fa f8a1 	bl	801cc20 <pbuf_header>
 8022ade:	4603      	mov	r3, r0
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d00a      	beq.n	8022afa <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8022ae4:	4b22      	ldr	r3, [pc, #136]	; (8022b70 <udp_input+0x1bc>)
 8022ae6:	f240 1255 	movw	r2, #341	; 0x155
 8022aea:	4922      	ldr	r1, [pc, #136]	; (8022b74 <udp_input+0x1c0>)
 8022aec:	4822      	ldr	r0, [pc, #136]	; (8022b78 <udp_input+0x1c4>)
 8022aee:	f003 f817 	bl	8025b20 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8022af2:	6878      	ldr	r0, [r7, #4]
 8022af4:	f7fa f8b8 	bl	801cc68 <pbuf_free>
      goto end;
 8022af8:	e032      	b.n	8022b60 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8022afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022afc:	2b00      	cmp	r3, #0
 8022afe:	d012      	beq.n	8022b26 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8022b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b02:	699b      	ldr	r3, [r3, #24]
 8022b04:	2b00      	cmp	r3, #0
 8022b06:	d00a      	beq.n	8022b1e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8022b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b0a:	699c      	ldr	r4, [r3, #24]
 8022b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b0e:	69d8      	ldr	r0, [r3, #28]
 8022b10:	8a3b      	ldrh	r3, [r7, #16]
 8022b12:	9300      	str	r3, [sp, #0]
 8022b14:	4b19      	ldr	r3, [pc, #100]	; (8022b7c <udp_input+0x1c8>)
 8022b16:	687a      	ldr	r2, [r7, #4]
 8022b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022b1a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8022b1c:	e021      	b.n	8022b62 <udp_input+0x1ae>
        pbuf_free(p);
 8022b1e:	6878      	ldr	r0, [r7, #4]
 8022b20:	f7fa f8a2 	bl	801cc68 <pbuf_free>
        goto end;
 8022b24:	e01c      	b.n	8022b60 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8022b26:	7cfb      	ldrb	r3, [r7, #19]
 8022b28:	2b00      	cmp	r3, #0
 8022b2a:	d112      	bne.n	8022b52 <udp_input+0x19e>
 8022b2c:	4b0e      	ldr	r3, [pc, #56]	; (8022b68 <udp_input+0x1b4>)
 8022b2e:	695b      	ldr	r3, [r3, #20]
 8022b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022b34:	2be0      	cmp	r3, #224	; 0xe0
 8022b36:	d00c      	beq.n	8022b52 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8022b38:	4b0b      	ldr	r3, [pc, #44]	; (8022b68 <udp_input+0x1b4>)
 8022b3a:	899b      	ldrh	r3, [r3, #12]
 8022b3c:	3308      	adds	r3, #8
 8022b3e:	b29b      	uxth	r3, r3
 8022b40:	b21b      	sxth	r3, r3
 8022b42:	4619      	mov	r1, r3
 8022b44:	6878      	ldr	r0, [r7, #4]
 8022b46:	f7fa f87d 	bl	801cc44 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8022b4a:	2103      	movs	r1, #3
 8022b4c:	6878      	ldr	r0, [r7, #4]
 8022b4e:	f7f7 fc55 	bl	801a3fc <icmp_dest_unreach>
      pbuf_free(p);
 8022b52:	6878      	ldr	r0, [r7, #4]
 8022b54:	f7fa f888 	bl	801cc68 <pbuf_free>
  return;
 8022b58:	e003      	b.n	8022b62 <udp_input+0x1ae>
    pbuf_free(p);
 8022b5a:	6878      	ldr	r0, [r7, #4]
 8022b5c:	f7fa f884 	bl	801cc68 <pbuf_free>
  return;
 8022b60:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8022b62:	372c      	adds	r7, #44	; 0x2c
 8022b64:	46bd      	mov	sp, r7
 8022b66:	bd90      	pop	{r4, r7, pc}
 8022b68:	20004608 	.word	0x20004608
 8022b6c:	20008c48 	.word	0x20008c48
 8022b70:	08028c94 	.word	0x08028c94
 8022b74:	08028cc4 	.word	0x08028cc4
 8022b78:	08028cd8 	.word	0x08028cd8
 8022b7c:	20004618 	.word	0x20004618

08022b80 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8022b80:	b580      	push	{r7, lr}
 8022b82:	b086      	sub	sp, #24
 8022b84:	af00      	add	r7, sp, #0
 8022b86:	60f8      	str	r0, [r7, #12]
 8022b88:	60b9      	str	r1, [r7, #8]
 8022b8a:	4613      	mov	r3, r2
 8022b8c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8022b8e:	68bb      	ldr	r3, [r7, #8]
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	d101      	bne.n	8022b98 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8022b94:	4b30      	ldr	r3, [pc, #192]	; (8022c58 <udp_bind+0xd8>)
 8022b96:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8022b98:	68fb      	ldr	r3, [r7, #12]
 8022b9a:	2b00      	cmp	r3, #0
 8022b9c:	d002      	beq.n	8022ba4 <udp_bind+0x24>
 8022b9e:	68bb      	ldr	r3, [r7, #8]
 8022ba0:	2b00      	cmp	r3, #0
 8022ba2:	d102      	bne.n	8022baa <udp_bind+0x2a>
    return ERR_VAL;
 8022ba4:	f06f 0305 	mvn.w	r3, #5
 8022ba8:	e052      	b.n	8022c50 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8022baa:	2300      	movs	r3, #0
 8022bac:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022bae:	4b2b      	ldr	r3, [pc, #172]	; (8022c5c <udp_bind+0xdc>)
 8022bb0:	681b      	ldr	r3, [r3, #0]
 8022bb2:	617b      	str	r3, [r7, #20]
 8022bb4:	e009      	b.n	8022bca <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8022bb6:	68fa      	ldr	r2, [r7, #12]
 8022bb8:	697b      	ldr	r3, [r7, #20]
 8022bba:	429a      	cmp	r2, r3
 8022bbc:	d102      	bne.n	8022bc4 <udp_bind+0x44>
      rebind = 1;
 8022bbe:	2301      	movs	r3, #1
 8022bc0:	74fb      	strb	r3, [r7, #19]
      break;
 8022bc2:	e005      	b.n	8022bd0 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022bc4:	697b      	ldr	r3, [r7, #20]
 8022bc6:	68db      	ldr	r3, [r3, #12]
 8022bc8:	617b      	str	r3, [r7, #20]
 8022bca:	697b      	ldr	r3, [r7, #20]
 8022bcc:	2b00      	cmp	r3, #0
 8022bce:	d1f2      	bne.n	8022bb6 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8022bd0:	88fb      	ldrh	r3, [r7, #6]
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	d109      	bne.n	8022bea <udp_bind+0x6a>
    port = udp_new_port();
 8022bd6:	f7ff fe79 	bl	80228cc <udp_new_port>
 8022bda:	4603      	mov	r3, r0
 8022bdc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8022bde:	88fb      	ldrh	r3, [r7, #6]
 8022be0:	2b00      	cmp	r3, #0
 8022be2:	d11e      	bne.n	8022c22 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8022be4:	f06f 0307 	mvn.w	r3, #7
 8022be8:	e032      	b.n	8022c50 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022bea:	4b1c      	ldr	r3, [pc, #112]	; (8022c5c <udp_bind+0xdc>)
 8022bec:	681b      	ldr	r3, [r3, #0]
 8022bee:	617b      	str	r3, [r7, #20]
 8022bf0:	e014      	b.n	8022c1c <udp_bind+0x9c>
      if (pcb != ipcb) {
 8022bf2:	68fa      	ldr	r2, [r7, #12]
 8022bf4:	697b      	ldr	r3, [r7, #20]
 8022bf6:	429a      	cmp	r2, r3
 8022bf8:	d00d      	beq.n	8022c16 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8022bfa:	697b      	ldr	r3, [r7, #20]
 8022bfc:	8a5b      	ldrh	r3, [r3, #18]
 8022bfe:	88fa      	ldrh	r2, [r7, #6]
 8022c00:	429a      	cmp	r2, r3
 8022c02:	d108      	bne.n	8022c16 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8022c04:	697b      	ldr	r3, [r7, #20]
 8022c06:	681a      	ldr	r2, [r3, #0]
 8022c08:	68bb      	ldr	r3, [r7, #8]
 8022c0a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8022c0c:	429a      	cmp	r2, r3
 8022c0e:	d102      	bne.n	8022c16 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8022c10:	f06f 0307 	mvn.w	r3, #7
 8022c14:	e01c      	b.n	8022c50 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022c16:	697b      	ldr	r3, [r7, #20]
 8022c18:	68db      	ldr	r3, [r3, #12]
 8022c1a:	617b      	str	r3, [r7, #20]
 8022c1c:	697b      	ldr	r3, [r7, #20]
 8022c1e:	2b00      	cmp	r3, #0
 8022c20:	d1e7      	bne.n	8022bf2 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8022c22:	68bb      	ldr	r3, [r7, #8]
 8022c24:	2b00      	cmp	r3, #0
 8022c26:	d002      	beq.n	8022c2e <udp_bind+0xae>
 8022c28:	68bb      	ldr	r3, [r7, #8]
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	e000      	b.n	8022c30 <udp_bind+0xb0>
 8022c2e:	2300      	movs	r3, #0
 8022c30:	68fa      	ldr	r2, [r7, #12]
 8022c32:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8022c34:	68fb      	ldr	r3, [r7, #12]
 8022c36:	88fa      	ldrh	r2, [r7, #6]
 8022c38:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8022c3a:	7cfb      	ldrb	r3, [r7, #19]
 8022c3c:	2b00      	cmp	r3, #0
 8022c3e:	d106      	bne.n	8022c4e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8022c40:	4b06      	ldr	r3, [pc, #24]	; (8022c5c <udp_bind+0xdc>)
 8022c42:	681a      	ldr	r2, [r3, #0]
 8022c44:	68fb      	ldr	r3, [r7, #12]
 8022c46:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8022c48:	4a04      	ldr	r2, [pc, #16]	; (8022c5c <udp_bind+0xdc>)
 8022c4a:	68fb      	ldr	r3, [r7, #12]
 8022c4c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8022c4e:	2300      	movs	r3, #0
}
 8022c50:	4618      	mov	r0, r3
 8022c52:	3718      	adds	r7, #24
 8022c54:	46bd      	mov	sp, r7
 8022c56:	bd80      	pop	{r7, pc}
 8022c58:	0802b34c 	.word	0x0802b34c
 8022c5c:	20008c48 	.word	0x20008c48

08022c60 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8022c60:	b480      	push	{r7}
 8022c62:	b085      	sub	sp, #20
 8022c64:	af00      	add	r7, sp, #0
 8022c66:	60f8      	str	r0, [r7, #12]
 8022c68:	60b9      	str	r1, [r7, #8]
 8022c6a:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8022c6c:	68fb      	ldr	r3, [r7, #12]
 8022c6e:	68ba      	ldr	r2, [r7, #8]
 8022c70:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8022c72:	68fb      	ldr	r3, [r7, #12]
 8022c74:	687a      	ldr	r2, [r7, #4]
 8022c76:	61da      	str	r2, [r3, #28]
}
 8022c78:	bf00      	nop
 8022c7a:	3714      	adds	r7, #20
 8022c7c:	46bd      	mov	sp, r7
 8022c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c82:	4770      	bx	lr

08022c84 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8022c84:	b580      	push	{r7, lr}
 8022c86:	b084      	sub	sp, #16
 8022c88:	af00      	add	r7, sp, #0
 8022c8a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8022c8c:	4b15      	ldr	r3, [pc, #84]	; (8022ce4 <udp_remove+0x60>)
 8022c8e:	681a      	ldr	r2, [r3, #0]
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	429a      	cmp	r2, r3
 8022c94:	d105      	bne.n	8022ca2 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8022c96:	4b13      	ldr	r3, [pc, #76]	; (8022ce4 <udp_remove+0x60>)
 8022c98:	681b      	ldr	r3, [r3, #0]
 8022c9a:	68db      	ldr	r3, [r3, #12]
 8022c9c:	4a11      	ldr	r2, [pc, #68]	; (8022ce4 <udp_remove+0x60>)
 8022c9e:	6013      	str	r3, [r2, #0]
 8022ca0:	e017      	b.n	8022cd2 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8022ca2:	4b10      	ldr	r3, [pc, #64]	; (8022ce4 <udp_remove+0x60>)
 8022ca4:	681b      	ldr	r3, [r3, #0]
 8022ca6:	60fb      	str	r3, [r7, #12]
 8022ca8:	e010      	b.n	8022ccc <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8022caa:	68fb      	ldr	r3, [r7, #12]
 8022cac:	68db      	ldr	r3, [r3, #12]
 8022cae:	2b00      	cmp	r3, #0
 8022cb0:	d009      	beq.n	8022cc6 <udp_remove+0x42>
 8022cb2:	68fb      	ldr	r3, [r7, #12]
 8022cb4:	68da      	ldr	r2, [r3, #12]
 8022cb6:	687b      	ldr	r3, [r7, #4]
 8022cb8:	429a      	cmp	r2, r3
 8022cba:	d104      	bne.n	8022cc6 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8022cbc:	687b      	ldr	r3, [r7, #4]
 8022cbe:	68da      	ldr	r2, [r3, #12]
 8022cc0:	68fb      	ldr	r3, [r7, #12]
 8022cc2:	60da      	str	r2, [r3, #12]
        break;
 8022cc4:	e005      	b.n	8022cd2 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8022cc6:	68fb      	ldr	r3, [r7, #12]
 8022cc8:	68db      	ldr	r3, [r3, #12]
 8022cca:	60fb      	str	r3, [r7, #12]
 8022ccc:	68fb      	ldr	r3, [r7, #12]
 8022cce:	2b00      	cmp	r3, #0
 8022cd0:	d1eb      	bne.n	8022caa <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8022cd2:	6879      	ldr	r1, [r7, #4]
 8022cd4:	2000      	movs	r0, #0
 8022cd6:	f7f9 fa6d 	bl	801c1b4 <memp_free>
}
 8022cda:	bf00      	nop
 8022cdc:	3710      	adds	r7, #16
 8022cde:	46bd      	mov	sp, r7
 8022ce0:	bd80      	pop	{r7, pc}
 8022ce2:	bf00      	nop
 8022ce4:	20008c48 	.word	0x20008c48

08022ce8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8022ce8:	b580      	push	{r7, lr}
 8022cea:	b082      	sub	sp, #8
 8022cec:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8022cee:	2000      	movs	r0, #0
 8022cf0:	f7f9 fa0e 	bl	801c110 <memp_malloc>
 8022cf4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8022cf6:	687b      	ldr	r3, [r7, #4]
 8022cf8:	2b00      	cmp	r3, #0
 8022cfa:	d007      	beq.n	8022d0c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8022cfc:	2220      	movs	r2, #32
 8022cfe:	2100      	movs	r1, #0
 8022d00:	6878      	ldr	r0, [r7, #4]
 8022d02:	f003 fbeb 	bl	80264dc <memset>
    pcb->ttl = UDP_TTL;
 8022d06:	687b      	ldr	r3, [r7, #4]
 8022d08:	22ff      	movs	r2, #255	; 0xff
 8022d0a:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8022d0c:	687b      	ldr	r3, [r7, #4]
}
 8022d0e:	4618      	mov	r0, r3
 8022d10:	3708      	adds	r7, #8
 8022d12:	46bd      	mov	sp, r7
 8022d14:	bd80      	pop	{r7, pc}

08022d16 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8022d16:	b580      	push	{r7, lr}
 8022d18:	b084      	sub	sp, #16
 8022d1a:	af00      	add	r7, sp, #0
 8022d1c:	4603      	mov	r3, r0
 8022d1e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8022d20:	f7ff ffe2 	bl	8022ce8 <udp_new>
 8022d24:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8022d26:	68fb      	ldr	r3, [r7, #12]
}
 8022d28:	4618      	mov	r0, r3
 8022d2a:	3710      	adds	r7, #16
 8022d2c:	46bd      	mov	sp, r7
 8022d2e:	bd80      	pop	{r7, pc}

08022d30 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8022d30:	b480      	push	{r7}
 8022d32:	b085      	sub	sp, #20
 8022d34:	af00      	add	r7, sp, #0
 8022d36:	6078      	str	r0, [r7, #4]
 8022d38:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8022d3a:	687b      	ldr	r3, [r7, #4]
 8022d3c:	2b00      	cmp	r3, #0
 8022d3e:	d01e      	beq.n	8022d7e <udp_netif_ip_addr_changed+0x4e>
 8022d40:	687b      	ldr	r3, [r7, #4]
 8022d42:	681b      	ldr	r3, [r3, #0]
 8022d44:	2b00      	cmp	r3, #0
 8022d46:	d01a      	beq.n	8022d7e <udp_netif_ip_addr_changed+0x4e>
 8022d48:	683b      	ldr	r3, [r7, #0]
 8022d4a:	2b00      	cmp	r3, #0
 8022d4c:	d017      	beq.n	8022d7e <udp_netif_ip_addr_changed+0x4e>
 8022d4e:	683b      	ldr	r3, [r7, #0]
 8022d50:	681b      	ldr	r3, [r3, #0]
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	d013      	beq.n	8022d7e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022d56:	4b0d      	ldr	r3, [pc, #52]	; (8022d8c <udp_netif_ip_addr_changed+0x5c>)
 8022d58:	681b      	ldr	r3, [r3, #0]
 8022d5a:	60fb      	str	r3, [r7, #12]
 8022d5c:	e00c      	b.n	8022d78 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8022d5e:	68fb      	ldr	r3, [r7, #12]
 8022d60:	681a      	ldr	r2, [r3, #0]
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	681b      	ldr	r3, [r3, #0]
 8022d66:	429a      	cmp	r2, r3
 8022d68:	d103      	bne.n	8022d72 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8022d6a:	683b      	ldr	r3, [r7, #0]
 8022d6c:	681a      	ldr	r2, [r3, #0]
 8022d6e:	68fb      	ldr	r3, [r7, #12]
 8022d70:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022d72:	68fb      	ldr	r3, [r7, #12]
 8022d74:	68db      	ldr	r3, [r3, #12]
 8022d76:	60fb      	str	r3, [r7, #12]
 8022d78:	68fb      	ldr	r3, [r7, #12]
 8022d7a:	2b00      	cmp	r3, #0
 8022d7c:	d1ef      	bne.n	8022d5e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8022d7e:	bf00      	nop
 8022d80:	3714      	adds	r7, #20
 8022d82:	46bd      	mov	sp, r7
 8022d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d88:	4770      	bx	lr
 8022d8a:	bf00      	nop
 8022d8c:	20008c48 	.word	0x20008c48

08022d90 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8022d90:	b580      	push	{r7, lr}
 8022d92:	b086      	sub	sp, #24
 8022d94:	af00      	add	r7, sp, #0
 8022d96:	6078      	str	r0, [r7, #4]
 8022d98:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8022d9a:	230e      	movs	r3, #14
 8022d9c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8022d9e:	687b      	ldr	r3, [r7, #4]
 8022da0:	895b      	ldrh	r3, [r3, #10]
 8022da2:	2b0e      	cmp	r3, #14
 8022da4:	d977      	bls.n	8022e96 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8022da6:	687b      	ldr	r3, [r7, #4]
 8022da8:	685b      	ldr	r3, [r3, #4]
 8022daa:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8022dac:	693b      	ldr	r3, [r7, #16]
 8022dae:	7b1a      	ldrb	r2, [r3, #12]
 8022db0:	7b5b      	ldrb	r3, [r3, #13]
 8022db2:	021b      	lsls	r3, r3, #8
 8022db4:	4313      	orrs	r3, r2
 8022db6:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8022db8:	693b      	ldr	r3, [r7, #16]
 8022dba:	781b      	ldrb	r3, [r3, #0]
 8022dbc:	f003 0301 	and.w	r3, r3, #1
 8022dc0:	2b00      	cmp	r3, #0
 8022dc2:	d023      	beq.n	8022e0c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8022dc4:	693b      	ldr	r3, [r7, #16]
 8022dc6:	781b      	ldrb	r3, [r3, #0]
 8022dc8:	2b01      	cmp	r3, #1
 8022dca:	d10f      	bne.n	8022dec <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022dcc:	693b      	ldr	r3, [r7, #16]
 8022dce:	785b      	ldrb	r3, [r3, #1]
 8022dd0:	2b00      	cmp	r3, #0
 8022dd2:	d11b      	bne.n	8022e0c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8022dd4:	693b      	ldr	r3, [r7, #16]
 8022dd6:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022dd8:	2b5e      	cmp	r3, #94	; 0x5e
 8022dda:	d117      	bne.n	8022e0c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8022ddc:	687b      	ldr	r3, [r7, #4]
 8022dde:	7b5b      	ldrb	r3, [r3, #13]
 8022de0:	f043 0310 	orr.w	r3, r3, #16
 8022de4:	b2da      	uxtb	r2, r3
 8022de6:	687b      	ldr	r3, [r7, #4]
 8022de8:	735a      	strb	r2, [r3, #13]
 8022dea:	e00f      	b.n	8022e0c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8022dec:	693b      	ldr	r3, [r7, #16]
 8022dee:	2206      	movs	r2, #6
 8022df0:	492f      	ldr	r1, [pc, #188]	; (8022eb0 <ethernet_input+0x120>)
 8022df2:	4618      	mov	r0, r3
 8022df4:	f003 fb58 	bl	80264a8 <memcmp>
 8022df8:	4603      	mov	r3, r0
 8022dfa:	2b00      	cmp	r3, #0
 8022dfc:	d106      	bne.n	8022e0c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8022dfe:	687b      	ldr	r3, [r7, #4]
 8022e00:	7b5b      	ldrb	r3, [r3, #13]
 8022e02:	f043 0308 	orr.w	r3, r3, #8
 8022e06:	b2da      	uxtb	r2, r3
 8022e08:	687b      	ldr	r3, [r7, #4]
 8022e0a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8022e0c:	89fb      	ldrh	r3, [r7, #14]
 8022e0e:	2b08      	cmp	r3, #8
 8022e10:	d003      	beq.n	8022e1a <ethernet_input+0x8a>
 8022e12:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8022e16:	d01e      	beq.n	8022e56 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8022e18:	e042      	b.n	8022ea0 <ethernet_input+0x110>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022e1a:	683b      	ldr	r3, [r7, #0]
 8022e1c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8022e20:	f003 0308 	and.w	r3, r3, #8
 8022e24:	2b00      	cmp	r3, #0
 8022e26:	d038      	beq.n	8022e9a <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8022e28:	687b      	ldr	r3, [r7, #4]
 8022e2a:	895b      	ldrh	r3, [r3, #10]
 8022e2c:	461a      	mov	r2, r3
 8022e2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022e32:	429a      	cmp	r2, r3
 8022e34:	db34      	blt.n	8022ea0 <ethernet_input+0x110>
 8022e36:	8afb      	ldrh	r3, [r7, #22]
 8022e38:	425b      	negs	r3, r3
 8022e3a:	b29b      	uxth	r3, r3
 8022e3c:	b21b      	sxth	r3, r3
 8022e3e:	4619      	mov	r1, r3
 8022e40:	6878      	ldr	r0, [r7, #4]
 8022e42:	f7f9 feed 	bl	801cc20 <pbuf_header>
 8022e46:	4603      	mov	r3, r0
 8022e48:	2b00      	cmp	r3, #0
 8022e4a:	d129      	bne.n	8022ea0 <ethernet_input+0x110>
        ip4_input(p, netif);
 8022e4c:	6839      	ldr	r1, [r7, #0]
 8022e4e:	6878      	ldr	r0, [r7, #4]
 8022e50:	f7f7 fbc4 	bl	801a5dc <ip4_input>
      break;
 8022e54:	e01d      	b.n	8022e92 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022e56:	683b      	ldr	r3, [r7, #0]
 8022e58:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8022e5c:	f003 0308 	and.w	r3, r3, #8
 8022e60:	2b00      	cmp	r3, #0
 8022e62:	d01c      	beq.n	8022e9e <ethernet_input+0x10e>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8022e64:	687b      	ldr	r3, [r7, #4]
 8022e66:	895b      	ldrh	r3, [r3, #10]
 8022e68:	461a      	mov	r2, r3
 8022e6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022e6e:	429a      	cmp	r2, r3
 8022e70:	db16      	blt.n	8022ea0 <ethernet_input+0x110>
 8022e72:	8afb      	ldrh	r3, [r7, #22]
 8022e74:	425b      	negs	r3, r3
 8022e76:	b29b      	uxth	r3, r3
 8022e78:	b21b      	sxth	r3, r3
 8022e7a:	4619      	mov	r1, r3
 8022e7c:	6878      	ldr	r0, [r7, #4]
 8022e7e:	f7f9 fecf 	bl	801cc20 <pbuf_header>
 8022e82:	4603      	mov	r3, r0
 8022e84:	2b00      	cmp	r3, #0
 8022e86:	d10b      	bne.n	8022ea0 <ethernet_input+0x110>
        etharp_input(p, netif);
 8022e88:	6839      	ldr	r1, [r7, #0]
 8022e8a:	6878      	ldr	r0, [r7, #4]
 8022e8c:	f7f6 fd94 	bl	80199b8 <etharp_input>
      break;
 8022e90:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022e92:	2300      	movs	r3, #0
 8022e94:	e008      	b.n	8022ea8 <ethernet_input+0x118>
    goto free_and_return;
 8022e96:	bf00      	nop
 8022e98:	e002      	b.n	8022ea0 <ethernet_input+0x110>
        goto free_and_return;
 8022e9a:	bf00      	nop
 8022e9c:	e000      	b.n	8022ea0 <ethernet_input+0x110>
        goto free_and_return;
 8022e9e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8022ea0:	6878      	ldr	r0, [r7, #4]
 8022ea2:	f7f9 fee1 	bl	801cc68 <pbuf_free>
  return ERR_OK;
 8022ea6:	2300      	movs	r3, #0
}
 8022ea8:	4618      	mov	r0, r3
 8022eaa:	3718      	adds	r7, #24
 8022eac:	46bd      	mov	sp, r7
 8022eae:	bd80      	pop	{r7, pc}
 8022eb0:	0802b460 	.word	0x0802b460

08022eb4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8022eb4:	b580      	push	{r7, lr}
 8022eb6:	b086      	sub	sp, #24
 8022eb8:	af00      	add	r7, sp, #0
 8022eba:	60f8      	str	r0, [r7, #12]
 8022ebc:	60b9      	str	r1, [r7, #8]
 8022ebe:	607a      	str	r2, [r7, #4]
 8022ec0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8022ec2:	8c3b      	ldrh	r3, [r7, #32]
 8022ec4:	4618      	mov	r0, r3
 8022ec6:	f7f6 fa3f 	bl	8019348 <lwip_htons>
 8022eca:	4603      	mov	r3, r0
 8022ecc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8022ece:	210e      	movs	r1, #14
 8022ed0:	68b8      	ldr	r0, [r7, #8]
 8022ed2:	f7f9 fea5 	bl	801cc20 <pbuf_header>
 8022ed6:	4603      	mov	r3, r0
 8022ed8:	2b00      	cmp	r3, #0
 8022eda:	d125      	bne.n	8022f28 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8022edc:	68bb      	ldr	r3, [r7, #8]
 8022ede:	685b      	ldr	r3, [r3, #4]
 8022ee0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8022ee2:	693b      	ldr	r3, [r7, #16]
 8022ee4:	8afa      	ldrh	r2, [r7, #22]
 8022ee6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8022ee8:	693b      	ldr	r3, [r7, #16]
 8022eea:	2206      	movs	r2, #6
 8022eec:	6839      	ldr	r1, [r7, #0]
 8022eee:	4618      	mov	r0, r3
 8022ef0:	f003 fae9 	bl	80264c6 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8022ef4:	693b      	ldr	r3, [r7, #16]
 8022ef6:	3306      	adds	r3, #6
 8022ef8:	2206      	movs	r2, #6
 8022efa:	6879      	ldr	r1, [r7, #4]
 8022efc:	4618      	mov	r0, r3
 8022efe:	f003 fae2 	bl	80264c6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8022f02:	68fb      	ldr	r3, [r7, #12]
 8022f04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8022f08:	2b06      	cmp	r3, #6
 8022f0a:	d006      	beq.n	8022f1a <ethernet_output+0x66>
 8022f0c:	4b0a      	ldr	r3, [pc, #40]	; (8022f38 <ethernet_output+0x84>)
 8022f0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8022f12:	490a      	ldr	r1, [pc, #40]	; (8022f3c <ethernet_output+0x88>)
 8022f14:	480a      	ldr	r0, [pc, #40]	; (8022f40 <ethernet_output+0x8c>)
 8022f16:	f002 fe03 	bl	8025b20 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8022f1a:	68fb      	ldr	r3, [r7, #12]
 8022f1c:	699b      	ldr	r3, [r3, #24]
 8022f1e:	68b9      	ldr	r1, [r7, #8]
 8022f20:	68f8      	ldr	r0, [r7, #12]
 8022f22:	4798      	blx	r3
 8022f24:	4603      	mov	r3, r0
 8022f26:	e002      	b.n	8022f2e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8022f28:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8022f2a:	f06f 0301 	mvn.w	r3, #1
}
 8022f2e:	4618      	mov	r0, r3
 8022f30:	3718      	adds	r7, #24
 8022f32:	46bd      	mov	sp, r7
 8022f34:	bd80      	pop	{r7, pc}
 8022f36:	bf00      	nop
 8022f38:	08028d30 	.word	0x08028d30
 8022f3c:	08028d68 	.word	0x08028d68
 8022f40:	08028d9c 	.word	0x08028d9c

08022f44 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8022f44:	b580      	push	{r7, lr}
 8022f46:	b084      	sub	sp, #16
 8022f48:	af00      	add	r7, sp, #0
 8022f4a:	6078      	str	r0, [r7, #4]
 8022f4c:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 8022f4e:	683b      	ldr	r3, [r7, #0]
 8022f50:	60bb      	str	r3, [r7, #8]
 8022f52:	2304      	movs	r3, #4
 8022f54:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8022f56:	f107 0308 	add.w	r3, r7, #8
 8022f5a:	2100      	movs	r1, #0
 8022f5c:	4618      	mov	r0, r3
 8022f5e:	f7f1 fd1c 	bl	801499a <osMessageCreate>
 8022f62:	4602      	mov	r2, r0
 8022f64:	687b      	ldr	r3, [r7, #4]
 8022f66:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 8022f68:	687b      	ldr	r3, [r7, #4]
 8022f6a:	681b      	ldr	r3, [r3, #0]
 8022f6c:	2b00      	cmp	r3, #0
 8022f6e:	d102      	bne.n	8022f76 <sys_mbox_new+0x32>
  return ERR_MEM;
 8022f70:	f04f 33ff 	mov.w	r3, #4294967295
 8022f74:	e000      	b.n	8022f78 <sys_mbox_new+0x34>
 
 return ERR_OK;
 8022f76:	2300      	movs	r3, #0
}
 8022f78:	4618      	mov	r0, r3
 8022f7a:	3710      	adds	r7, #16
 8022f7c:	46bd      	mov	sp, r7
 8022f7e:	bd80      	pop	{r7, pc}

08022f80 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8022f80:	b580      	push	{r7, lr}
 8022f82:	b082      	sub	sp, #8
 8022f84:	af00      	add	r7, sp, #0
 8022f86:	6078      	str	r0, [r7, #4]
	if( osMessageWaiting(*mbox) )
 8022f88:	687b      	ldr	r3, [r7, #4]
 8022f8a:	681b      	ldr	r3, [r3, #0]
 8022f8c:	4618      	mov	r0, r3
 8022f8e:	f7f1 fdcb 	bl	8014b28 <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 8022f92:	687b      	ldr	r3, [r7, #4]
 8022f94:	681b      	ldr	r3, [r3, #0]
 8022f96:	4618      	mov	r0, r3
 8022f98:	f7f1 fddc 	bl	8014b54 <osMessageDelete>

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8022f9c:	bf00      	nop
 8022f9e:	3708      	adds	r7, #8
 8022fa0:	46bd      	mov	sp, r7
 8022fa2:	bd80      	pop	{r7, pc}

08022fa4 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8022fa4:	b580      	push	{r7, lr}
 8022fa6:	b082      	sub	sp, #8
 8022fa8:	af00      	add	r7, sp, #0
 8022faa:	6078      	str	r0, [r7, #4]
 8022fac:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8022fae:	bf00      	nop
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	681b      	ldr	r3, [r3, #0]
 8022fb4:	6839      	ldr	r1, [r7, #0]
 8022fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8022fba:	4618      	mov	r0, r3
 8022fbc:	f7f1 fd00 	bl	80149c0 <osMessagePut>
 8022fc0:	4603      	mov	r3, r0
 8022fc2:	2b00      	cmp	r3, #0
 8022fc4:	d1f4      	bne.n	8022fb0 <sys_mbox_post+0xc>
}
 8022fc6:	bf00      	nop
 8022fc8:	3708      	adds	r7, #8
 8022fca:	46bd      	mov	sp, r7
 8022fcc:	bd80      	pop	{r7, pc}

08022fce <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022fce:	b580      	push	{r7, lr}
 8022fd0:	b084      	sub	sp, #16
 8022fd2:	af00      	add	r7, sp, #0
 8022fd4:	6078      	str	r0, [r7, #4]
 8022fd6:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8022fd8:	687b      	ldr	r3, [r7, #4]
 8022fda:	681b      	ldr	r3, [r3, #0]
 8022fdc:	6839      	ldr	r1, [r7, #0]
 8022fde:	2200      	movs	r2, #0
 8022fe0:	4618      	mov	r0, r3
 8022fe2:	f7f1 fced 	bl	80149c0 <osMessagePut>
 8022fe6:	4603      	mov	r3, r0
 8022fe8:	2b00      	cmp	r3, #0
 8022fea:	d102      	bne.n	8022ff2 <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 8022fec:	2300      	movs	r3, #0
 8022fee:	73fb      	strb	r3, [r7, #15]
 8022ff0:	e001      	b.n	8022ff6 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 8022ff2:	23ff      	movs	r3, #255	; 0xff
 8022ff4:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 8022ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8022ffa:	4618      	mov	r0, r3
 8022ffc:	3710      	adds	r7, #16
 8022ffe:	46bd      	mov	sp, r7
 8023000:	bd80      	pop	{r7, pc}

08023002 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8023002:	b580      	push	{r7, lr}
 8023004:	b08c      	sub	sp, #48	; 0x30
 8023006:	af00      	add	r7, sp, #0
 8023008:	61f8      	str	r0, [r7, #28]
 802300a:	61b9      	str	r1, [r7, #24]
 802300c:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 802300e:	f7f1 fb30 	bl	8014672 <osKernelSysTick>
 8023012:	62f8      	str	r0, [r7, #44]	; 0x2c
  
  if(timeout != 0)
 8023014:	697b      	ldr	r3, [r7, #20]
 8023016:	2b00      	cmp	r3, #0
 8023018:	d017      	beq.n	802304a <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 802301a:	69fb      	ldr	r3, [r7, #28]
 802301c:	6819      	ldr	r1, [r3, #0]
 802301e:	f107 0320 	add.w	r3, r7, #32
 8023022:	697a      	ldr	r2, [r7, #20]
 8023024:	4618      	mov	r0, r3
 8023026:	f7f1 fd0b 	bl	8014a40 <osMessageGet>
    
    if(event.status == osEventMessage)
 802302a:	6a3b      	ldr	r3, [r7, #32]
 802302c:	2b10      	cmp	r3, #16
 802302e:	d109      	bne.n	8023044 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8023030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023032:	461a      	mov	r2, r3
 8023034:	69bb      	ldr	r3, [r7, #24]
 8023036:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8023038:	f7f1 fb1b 	bl	8014672 <osKernelSysTick>
 802303c:	4602      	mov	r2, r0
 802303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023040:	1ad3      	subs	r3, r2, r3
 8023042:	e019      	b.n	8023078 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8023044:	f04f 33ff 	mov.w	r3, #4294967295
 8023048:	e016      	b.n	8023078 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 802304a:	69fb      	ldr	r3, [r7, #28]
 802304c:	6819      	ldr	r1, [r3, #0]
 802304e:	463b      	mov	r3, r7
 8023050:	f04f 32ff 	mov.w	r2, #4294967295
 8023054:	4618      	mov	r0, r3
 8023056:	f7f1 fcf3 	bl	8014a40 <osMessageGet>
 802305a:	f107 0320 	add.w	r3, r7, #32
 802305e:	463a      	mov	r2, r7
 8023060:	ca07      	ldmia	r2, {r0, r1, r2}
 8023062:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8023066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023068:	461a      	mov	r2, r3
 802306a:	69bb      	ldr	r3, [r7, #24]
 802306c:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 802306e:	f7f1 fb00 	bl	8014672 <osKernelSysTick>
 8023072:	4602      	mov	r2, r0
 8023074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023076:	1ad3      	subs	r3, r2, r3
  }
}
 8023078:	4618      	mov	r0, r3
 802307a:	3730      	adds	r7, #48	; 0x30
 802307c:	46bd      	mov	sp, r7
 802307e:	bd80      	pop	{r7, pc}

08023080 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8023080:	b580      	push	{r7, lr}
 8023082:	b086      	sub	sp, #24
 8023084:	af00      	add	r7, sp, #0
 8023086:	6078      	str	r0, [r7, #4]
 8023088:	6039      	str	r1, [r7, #0]
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 802308a:	687b      	ldr	r3, [r7, #4]
 802308c:	6819      	ldr	r1, [r3, #0]
 802308e:	f107 030c 	add.w	r3, r7, #12
 8023092:	2200      	movs	r2, #0
 8023094:	4618      	mov	r0, r3
 8023096:	f7f1 fcd3 	bl	8014a40 <osMessageGet>
  
  if(event.status == osEventMessage)
 802309a:	68fb      	ldr	r3, [r7, #12]
 802309c:	2b10      	cmp	r3, #16
 802309e:	d105      	bne.n	80230ac <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80230a0:	693b      	ldr	r3, [r7, #16]
 80230a2:	461a      	mov	r2, r3
 80230a4:	683b      	ldr	r3, [r7, #0]
 80230a6:	601a      	str	r2, [r3, #0]
    return ERR_OK;
 80230a8:	2300      	movs	r3, #0
 80230aa:	e001      	b.n	80230b0 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80230ac:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80230b0:	4618      	mov	r0, r3
 80230b2:	3718      	adds	r7, #24
 80230b4:	46bd      	mov	sp, r7
 80230b6:	bd80      	pop	{r7, pc}

080230b8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 80230b8:	b480      	push	{r7}
 80230ba:	b083      	sub	sp, #12
 80230bc:	af00      	add	r7, sp, #0
 80230be:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 80230c0:	687b      	ldr	r3, [r7, #4]
 80230c2:	681b      	ldr	r3, [r3, #0]
 80230c4:	2b00      	cmp	r3, #0
 80230c6:	d101      	bne.n	80230cc <sys_mbox_valid+0x14>
    return 0;
 80230c8:	2300      	movs	r3, #0
 80230ca:	e000      	b.n	80230ce <sys_mbox_valid+0x16>
  else
    return 1;
 80230cc:	2301      	movs	r3, #1
}                                             
 80230ce:	4618      	mov	r0, r3
 80230d0:	370c      	adds	r7, #12
 80230d2:	46bd      	mov	sp, r7
 80230d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230d8:	4770      	bx	lr

080230da <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
 80230da:	b480      	push	{r7}
 80230dc:	b083      	sub	sp, #12
 80230de:	af00      	add	r7, sp, #0
 80230e0:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;                      
 80230e2:	687b      	ldr	r3, [r7, #4]
 80230e4:	2200      	movs	r2, #0
 80230e6:	601a      	str	r2, [r3, #0]
}                                             
 80230e8:	bf00      	nop
 80230ea:	370c      	adds	r7, #12
 80230ec:	46bd      	mov	sp, r7
 80230ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230f2:	4770      	bx	lr

080230f4 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80230f4:	b580      	push	{r7, lr}
 80230f6:	b084      	sub	sp, #16
 80230f8:	af00      	add	r7, sp, #0
 80230fa:	6078      	str	r0, [r7, #4]
 80230fc:	460b      	mov	r3, r1
 80230fe:	70fb      	strb	r3, [r7, #3]
  osSemaphoreDef(SEM);
 8023100:	2300      	movs	r3, #0
 8023102:	60fb      	str	r3, [r7, #12]

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8023104:	f107 030c 	add.w	r3, r7, #12
 8023108:	2101      	movs	r1, #1
 802310a:	4618      	mov	r0, r3
 802310c:	f7f1 fb8e 	bl	801482c <osSemaphoreCreate>
 8023110:	4602      	mov	r2, r0
 8023112:	687b      	ldr	r3, [r7, #4]
 8023114:	601a      	str	r2, [r3, #0]
	
  if(*sem == NULL)
 8023116:	687b      	ldr	r3, [r7, #4]
 8023118:	681b      	ldr	r3, [r3, #0]
 802311a:	2b00      	cmp	r3, #0
 802311c:	d102      	bne.n	8023124 <sys_sem_new+0x30>
  {
#if SYS_STATS
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
 802311e:	f04f 33ff 	mov.w	r3, #4294967295
 8023122:	e009      	b.n	8023138 <sys_sem_new+0x44>
  }
	
  if(count == 0)	// Means it can't be taken
 8023124:	78fb      	ldrb	r3, [r7, #3]
 8023126:	2b00      	cmp	r3, #0
 8023128:	d105      	bne.n	8023136 <sys_sem_new+0x42>
  {
    osSemaphoreWait(*sem,0);
 802312a:	687b      	ldr	r3, [r7, #4]
 802312c:	681b      	ldr	r3, [r3, #0]
 802312e:	2100      	movs	r1, #0
 8023130:	4618      	mov	r0, r3
 8023132:	f7f1 fb99 	bl	8014868 <osSemaphoreWait>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 8023136:	2300      	movs	r3, #0
}
 8023138:	4618      	mov	r0, r3
 802313a:	3710      	adds	r7, #16
 802313c:	46bd      	mov	sp, r7
 802313e:	bd80      	pop	{r7, pc}

08023140 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8023140:	b580      	push	{r7, lr}
 8023142:	b084      	sub	sp, #16
 8023144:	af00      	add	r7, sp, #0
 8023146:	6078      	str	r0, [r7, #4]
 8023148:	6039      	str	r1, [r7, #0]
  uint32_t starttime = osKernelSysTick();
 802314a:	f7f1 fa92 	bl	8014672 <osKernelSysTick>
 802314e:	60f8      	str	r0, [r7, #12]
  
  if(timeout != 0)
 8023150:	683b      	ldr	r3, [r7, #0]
 8023152:	2b00      	cmp	r3, #0
 8023154:	d011      	beq.n	802317a <sys_arch_sem_wait+0x3a>
  {    
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8023156:	687b      	ldr	r3, [r7, #4]
 8023158:	681b      	ldr	r3, [r3, #0]
 802315a:	6839      	ldr	r1, [r7, #0]
 802315c:	4618      	mov	r0, r3
 802315e:	f7f1 fb83 	bl	8014868 <osSemaphoreWait>
 8023162:	4603      	mov	r3, r0
 8023164:	2b00      	cmp	r3, #0
 8023166:	d105      	bne.n	8023174 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8023168:	f7f1 fa83 	bl	8014672 <osKernelSysTick>
 802316c:	4602      	mov	r2, r0
 802316e:	68fb      	ldr	r3, [r7, #12]
 8023170:	1ad3      	subs	r3, r2, r3
 8023172:	e012      	b.n	802319a <sys_arch_sem_wait+0x5a>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8023174:	f04f 33ff 	mov.w	r3, #4294967295
 8023178:	e00f      	b.n	802319a <sys_arch_sem_wait+0x5a>
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 802317a:	bf00      	nop
 802317c:	687b      	ldr	r3, [r7, #4]
 802317e:	681b      	ldr	r3, [r3, #0]
 8023180:	f04f 31ff 	mov.w	r1, #4294967295
 8023184:	4618      	mov	r0, r3
 8023186:	f7f1 fb6f 	bl	8014868 <osSemaphoreWait>
 802318a:	4603      	mov	r3, r0
 802318c:	2b00      	cmp	r3, #0
 802318e:	d1f5      	bne.n	802317c <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8023190:	f7f1 fa6f 	bl	8014672 <osKernelSysTick>
 8023194:	4602      	mov	r2, r0
 8023196:	68fb      	ldr	r3, [r7, #12]
 8023198:	1ad3      	subs	r3, r2, r3
  }
}
 802319a:	4618      	mov	r0, r3
 802319c:	3710      	adds	r7, #16
 802319e:	46bd      	mov	sp, r7
 80231a0:	bd80      	pop	{r7, pc}

080231a2 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80231a2:	b580      	push	{r7, lr}
 80231a4:	b082      	sub	sp, #8
 80231a6:	af00      	add	r7, sp, #0
 80231a8:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80231aa:	687b      	ldr	r3, [r7, #4]
 80231ac:	681b      	ldr	r3, [r3, #0]
 80231ae:	4618      	mov	r0, r3
 80231b0:	f7f1 fbaa 	bl	8014908 <osSemaphoreRelease>
}
 80231b4:	bf00      	nop
 80231b6:	3708      	adds	r7, #8
 80231b8:	46bd      	mov	sp, r7
 80231ba:	bd80      	pop	{r7, pc}

080231bc <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80231bc:	b580      	push	{r7, lr}
 80231be:	b082      	sub	sp, #8
 80231c0:	af00      	add	r7, sp, #0
 80231c2:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 80231c4:	687b      	ldr	r3, [r7, #4]
 80231c6:	681b      	ldr	r3, [r3, #0]
 80231c8:	4618      	mov	r0, r3
 80231ca:	f7f1 fbd3 	bl	8014974 <osSemaphoreDelete>
}
 80231ce:	bf00      	nop
 80231d0:	3708      	adds	r7, #8
 80231d2:	46bd      	mov	sp, r7
 80231d4:	bd80      	pop	{r7, pc}

080231d6 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
 80231d6:	b480      	push	{r7}
 80231d8:	b083      	sub	sp, #12
 80231da:	af00      	add	r7, sp, #0
 80231dc:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80231de:	687b      	ldr	r3, [r7, #4]
 80231e0:	681b      	ldr	r3, [r3, #0]
 80231e2:	2b00      	cmp	r3, #0
 80231e4:	d101      	bne.n	80231ea <sys_sem_valid+0x14>
    return 0;
 80231e6:	2300      	movs	r3, #0
 80231e8:	e000      	b.n	80231ec <sys_sem_valid+0x16>
  else
    return 1;                                       
 80231ea:	2301      	movs	r3, #1
}
 80231ec:	4618      	mov	r0, r3
 80231ee:	370c      	adds	r7, #12
 80231f0:	46bd      	mov	sp, r7
 80231f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231f6:	4770      	bx	lr

080231f8 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
 80231f8:	b480      	push	{r7}
 80231fa:	b083      	sub	sp, #12
 80231fc:	af00      	add	r7, sp, #0
 80231fe:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;                                                          
 8023200:	687b      	ldr	r3, [r7, #4]
 8023202:	2200      	movs	r2, #0
 8023204:	601a      	str	r2, [r3, #0]
} 
 8023206:	bf00      	nop
 8023208:	370c      	adds	r7, #12
 802320a:	46bd      	mov	sp, r7
 802320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023210:	4770      	bx	lr
	...

08023214 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 8023214:	b580      	push	{r7, lr}
 8023216:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8023218:	4803      	ldr	r0, [pc, #12]	; (8023228 <sys_init+0x14>)
 802321a:	f7f1 fa75 	bl	8014708 <osMutexCreate>
 802321e:	4602      	mov	r2, r0
 8023220:	4b02      	ldr	r3, [pc, #8]	; (802322c <sys_init+0x18>)
 8023222:	601a      	str	r2, [r3, #0]
}
 8023224:	bf00      	nop
 8023226:	bd80      	pop	{r7, pc}
 8023228:	0802b470 	.word	0x0802b470
 802322c:	20008c50 	.word	0x20008c50

08023230 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8023230:	b580      	push	{r7, lr}
 8023232:	b084      	sub	sp, #16
 8023234:	af00      	add	r7, sp, #0
 8023236:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 8023238:	2300      	movs	r3, #0
 802323a:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 802323c:	f107 030c 	add.w	r3, r7, #12
 8023240:	4618      	mov	r0, r3
 8023242:	f7f1 fa61 	bl	8014708 <osMutexCreate>
 8023246:	4602      	mov	r2, r0
 8023248:	687b      	ldr	r3, [r7, #4]
 802324a:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 802324c:	687b      	ldr	r3, [r7, #4]
 802324e:	681b      	ldr	r3, [r3, #0]
 8023250:	2b00      	cmp	r3, #0
 8023252:	d102      	bne.n	802325a <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 8023254:	f04f 33ff 	mov.w	r3, #4294967295
 8023258:	e000      	b.n	802325c <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 802325a:	2300      	movs	r3, #0
}
 802325c:	4618      	mov	r0, r3
 802325e:	3710      	adds	r7, #16
 8023260:	46bd      	mov	sp, r7
 8023262:	bd80      	pop	{r7, pc}

08023264 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8023264:	b580      	push	{r7, lr}
 8023266:	b082      	sub	sp, #8
 8023268:	af00      	add	r7, sp, #0
 802326a:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 802326c:	687b      	ldr	r3, [r7, #4]
 802326e:	681b      	ldr	r3, [r3, #0]
 8023270:	f04f 31ff 	mov.w	r1, #4294967295
 8023274:	4618      	mov	r0, r3
 8023276:	f7f1 fa53 	bl	8014720 <osMutexWait>
}
 802327a:	bf00      	nop
 802327c:	3708      	adds	r7, #8
 802327e:	46bd      	mov	sp, r7
 8023280:	bd80      	pop	{r7, pc}

08023282 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8023282:	b580      	push	{r7, lr}
 8023284:	b082      	sub	sp, #8
 8023286:	af00      	add	r7, sp, #0
 8023288:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 802328a:	687b      	ldr	r3, [r7, #4]
 802328c:	681b      	ldr	r3, [r3, #0]
 802328e:	4618      	mov	r0, r3
 8023290:	f7f1 fa96 	bl	80147c0 <osMutexRelease>
}
 8023294:	bf00      	nop
 8023296:	3708      	adds	r7, #8
 8023298:	46bd      	mov	sp, r7
 802329a:	bd80      	pop	{r7, pc}

0802329c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 802329c:	b580      	push	{r7, lr}
 802329e:	b08a      	sub	sp, #40	; 0x28
 80232a0:	af00      	add	r7, sp, #0
 80232a2:	60f8      	str	r0, [r7, #12]
 80232a4:	60b9      	str	r1, [r7, #8]
 80232a6:	607a      	str	r2, [r7, #4]
 80232a8:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80232aa:	68fb      	ldr	r3, [r7, #12]
 80232ac:	617b      	str	r3, [r7, #20]
 80232ae:	68bb      	ldr	r3, [r7, #8]
 80232b0:	61bb      	str	r3, [r7, #24]
 80232b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80232b4:	b21b      	sxth	r3, r3
 80232b6:	83bb      	strh	r3, [r7, #28]
 80232b8:	2300      	movs	r3, #0
 80232ba:	623b      	str	r3, [r7, #32]
 80232bc:	683b      	ldr	r3, [r7, #0]
 80232be:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80232c0:	f107 0314 	add.w	r3, r7, #20
 80232c4:	6879      	ldr	r1, [r7, #4]
 80232c6:	4618      	mov	r0, r3
 80232c8:	f7f1 f9e3 	bl	8014692 <osThreadCreate>
 80232cc:	4603      	mov	r3, r0
}
 80232ce:	4618      	mov	r0, r3
 80232d0:	3728      	adds	r7, #40	; 0x28
 80232d2:	46bd      	mov	sp, r7
 80232d4:	bd80      	pop	{r7, pc}
	...

080232d8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80232d8:	b580      	push	{r7, lr}
 80232da:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80232dc:	4b04      	ldr	r3, [pc, #16]	; (80232f0 <sys_arch_protect+0x18>)
 80232de:	681b      	ldr	r3, [r3, #0]
 80232e0:	f04f 31ff 	mov.w	r1, #4294967295
 80232e4:	4618      	mov	r0, r3
 80232e6:	f7f1 fa1b 	bl	8014720 <osMutexWait>
  return (sys_prot_t)1;
 80232ea:	2301      	movs	r3, #1
}
 80232ec:	4618      	mov	r0, r3
 80232ee:	bd80      	pop	{r7, pc}
 80232f0:	20008c50 	.word	0x20008c50

080232f4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80232f4:	b580      	push	{r7, lr}
 80232f6:	b082      	sub	sp, #8
 80232f8:	af00      	add	r7, sp, #0
 80232fa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80232fc:	4b04      	ldr	r3, [pc, #16]	; (8023310 <sys_arch_unprotect+0x1c>)
 80232fe:	681b      	ldr	r3, [r3, #0]
 8023300:	4618      	mov	r0, r3
 8023302:	f7f1 fa5d 	bl	80147c0 <osMutexRelease>
}
 8023306:	bf00      	nop
 8023308:	3708      	adds	r7, #8
 802330a:	46bd      	mov	sp, r7
 802330c:	bd80      	pop	{r7, pc}
 802330e:	bf00      	nop
 8023310:	20008c50 	.word	0x20008c50

08023314 <is_exp_of_2>:
#include "circbuff.h"

/*Checks if argument is power of 2 --------------------------------------- */

static uint8_t is_exp_of_2(uint32_t n)
{
 8023314:	b480      	push	{r7}
 8023316:	b083      	sub	sp, #12
 8023318:	af00      	add	r7, sp, #0
 802331a:	6078      	str	r0, [r7, #4]
    return ( n & (n - 1) ) == 0;
 802331c:	687b      	ldr	r3, [r7, #4]
 802331e:	1e5a      	subs	r2, r3, #1
 8023320:	687b      	ldr	r3, [r7, #4]
 8023322:	4013      	ands	r3, r2
 8023324:	2b00      	cmp	r3, #0
 8023326:	bf0c      	ite	eq
 8023328:	2301      	moveq	r3, #1
 802332a:	2300      	movne	r3, #0
 802332c:	b2db      	uxtb	r3, r3
}
 802332e:	4618      	mov	r0, r3
 8023330:	370c      	adds	r7, #12
 8023332:	46bd      	mov	sp, r7
 8023334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023338:	4770      	bx	lr

0802333a <CB_Init>:

/* Circular buffer initiation function ----------------------------------- */

error_t CB_Init(circbuff *cb, uint32_t buf_size) {
 802333a:	b580      	push	{r7, lr}
 802333c:	b082      	sub	sp, #8
 802333e:	af00      	add	r7, sp, #0
 8023340:	6078      	str	r0, [r7, #4]
 8023342:	6039      	str	r1, [r7, #0]
	if (!is_exp_of_2(buf_size)) return SIZE_ERR;
 8023344:	6838      	ldr	r0, [r7, #0]
 8023346:	f7ff ffe5 	bl	8023314 <is_exp_of_2>
 802334a:	4603      	mov	r3, r0
 802334c:	2b00      	cmp	r3, #0
 802334e:	d101      	bne.n	8023354 <CB_Init+0x1a>
 8023350:	2304      	movs	r3, #4
 8023352:	e015      	b.n	8023380 <CB_Init+0x46>
						/* return error if buffer size is not power of 2 */
	cb->size = buf_size;
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	683a      	ldr	r2, [r7, #0]
 8023358:	605a      	str	r2, [r3, #4]
	cb->read_pos = 0;
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	2200      	movs	r2, #0
 802335e:	609a      	str	r2, [r3, #8]
	cb->write_pos = 0;
 8023360:	687b      	ldr	r3, [r7, #4]
 8023362:	2200      	movs	r2, #0
 8023364:	60da      	str	r2, [r3, #12]
	cb->buf = (uint8_t*) pvPortMalloc(buf_size * sizeof(uint8_t));
 8023366:	6838      	ldr	r0, [r7, #0]
 8023368:	f7f1 fed2 	bl	8015110 <pvPortMalloc>
 802336c:	4602      	mov	r2, r0
 802336e:	687b      	ldr	r3, [r7, #4]
 8023370:	601a      	str	r2, [r3, #0]
	if (cb->buf == NULL) {
 8023372:	687b      	ldr	r3, [r7, #4]
 8023374:	681b      	ldr	r3, [r3, #0]
 8023376:	2b00      	cmp	r3, #0
 8023378:	d101      	bne.n	802337e <CB_Init+0x44>
		return MEM_ERR;
 802337a:	2301      	movs	r3, #1
 802337c:	e000      	b.n	8023380 <CB_Init+0x46>
	}
	return NO_ERR;
 802337e:	2300      	movs	r3, #0
}
 8023380:	4618      	mov	r0, r3
 8023382:	3708      	adds	r7, #8
 8023384:	46bd      	mov	sp, r7
 8023386:	bd80      	pop	{r7, pc}

08023388 <CB_Data_Length>:

/* Returns length of data in buffer ---------------------------------------*/

uint32_t CB_Data_Length(circbuff *cb) {
 8023388:	b480      	push	{r7}
 802338a:	b083      	sub	sp, #12
 802338c:	af00      	add	r7, sp, #0
 802338e:	6078      	str	r0, [r7, #4]
	return ((cb->write_pos - cb->read_pos) & (cb->size - 1));
 8023390:	687b      	ldr	r3, [r7, #4]
 8023392:	68da      	ldr	r2, [r3, #12]
 8023394:	687b      	ldr	r3, [r7, #4]
 8023396:	689b      	ldr	r3, [r3, #8]
 8023398:	1ad2      	subs	r2, r2, r3
 802339a:	687b      	ldr	r3, [r7, #4]
 802339c:	685b      	ldr	r3, [r3, #4]
 802339e:	3b01      	subs	r3, #1
 80233a0:	4013      	ands	r3, r2
}
 80233a2:	4618      	mov	r0, r3
 80233a4:	370c      	adds	r7, #12
 80233a6:	46bd      	mov	sp, r7
 80233a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233ac:	4770      	bx	lr

080233ae <CB_Write>:

/* Write new element to buffer --------------------------------------------*/

error_t CB_Write(circbuff *cb, uint8_t item){
 80233ae:	b580      	push	{r7, lr}
 80233b0:	b082      	sub	sp, #8
 80233b2:	af00      	add	r7, sp, #0
 80233b4:	6078      	str	r0, [r7, #4]
 80233b6:	460b      	mov	r3, r1
 80233b8:	70fb      	strb	r3, [r7, #3]
	if (CB_Data_Length(cb) >= (cb->size - 1)){
 80233ba:	6878      	ldr	r0, [r7, #4]
 80233bc:	f7ff ffe4 	bl	8023388 <CB_Data_Length>
 80233c0:	4602      	mov	r2, r0
 80233c2:	687b      	ldr	r3, [r7, #4]
 80233c4:	685b      	ldr	r3, [r3, #4]
 80233c6:	3b01      	subs	r3, #1
 80233c8:	429a      	cmp	r2, r3
 80233ca:	d301      	bcc.n	80233d0 <CB_Write+0x22>
		return FULL_ERR;
 80233cc:	2303      	movs	r3, #3
 80233ce:	e010      	b.n	80233f2 <CB_Write+0x44>
	}
	cb->buf[cb->write_pos] = item;
 80233d0:	687b      	ldr	r3, [r7, #4]
 80233d2:	681a      	ldr	r2, [r3, #0]
 80233d4:	687b      	ldr	r3, [r7, #4]
 80233d6:	68db      	ldr	r3, [r3, #12]
 80233d8:	4413      	add	r3, r2
 80233da:	78fa      	ldrb	r2, [r7, #3]
 80233dc:	701a      	strb	r2, [r3, #0]
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
 80233de:	687b      	ldr	r3, [r7, #4]
 80233e0:	68db      	ldr	r3, [r3, #12]
 80233e2:	1c5a      	adds	r2, r3, #1
 80233e4:	687b      	ldr	r3, [r7, #4]
 80233e6:	685b      	ldr	r3, [r3, #4]
 80233e8:	3b01      	subs	r3, #1
 80233ea:	401a      	ands	r2, r3
 80233ec:	687b      	ldr	r3, [r7, #4]
 80233ee:	60da      	str	r2, [r3, #12]
	return NO_ERR;
 80233f0:	2300      	movs	r3, #0
}
 80233f2:	4618      	mov	r0, r3
 80233f4:	3708      	adds	r7, #8
 80233f6:	46bd      	mov	sp, r7
 80233f8:	bd80      	pop	{r7, pc}

080233fa <CB_Read>:

/* Read element from buffer -----------------------------------------------*/

error_t CB_Read(circbuff *cb, uint8_t * item){
 80233fa:	b580      	push	{r7, lr}
 80233fc:	b082      	sub	sp, #8
 80233fe:	af00      	add	r7, sp, #0
 8023400:	6078      	str	r0, [r7, #4]
 8023402:	6039      	str	r1, [r7, #0]
	if (CB_Data_Length(cb) == 0){
 8023404:	6878      	ldr	r0, [r7, #4]
 8023406:	f7ff ffbf 	bl	8023388 <CB_Data_Length>
 802340a:	4603      	mov	r3, r0
 802340c:	2b00      	cmp	r3, #0
 802340e:	d101      	bne.n	8023414 <CB_Read+0x1a>
		return EMPTY_ERR;
 8023410:	2302      	movs	r3, #2
 8023412:	e011      	b.n	8023438 <CB_Read+0x3e>
	}
	*item = cb->buf[cb->read_pos];
 8023414:	687b      	ldr	r3, [r7, #4]
 8023416:	681a      	ldr	r2, [r3, #0]
 8023418:	687b      	ldr	r3, [r7, #4]
 802341a:	689b      	ldr	r3, [r3, #8]
 802341c:	4413      	add	r3, r2
 802341e:	781a      	ldrb	r2, [r3, #0]
 8023420:	683b      	ldr	r3, [r7, #0]
 8023422:	701a      	strb	r2, [r3, #0]
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
 8023424:	687b      	ldr	r3, [r7, #4]
 8023426:	689b      	ldr	r3, [r3, #8]
 8023428:	1c5a      	adds	r2, r3, #1
 802342a:	687b      	ldr	r3, [r7, #4]
 802342c:	685b      	ldr	r3, [r3, #4]
 802342e:	3b01      	subs	r3, #1
 8023430:	401a      	ands	r2, r3
 8023432:	687b      	ldr	r3, [r7, #4]
 8023434:	609a      	str	r2, [r3, #8]
	return NO_ERR;
 8023436:	2300      	movs	r3, #0
}
 8023438:	4618      	mov	r0, r3
 802343a:	3708      	adds	r7, #8
 802343c:	46bd      	mov	sp, r7
 802343e:	bd80      	pop	{r7, pc}

08023440 <FlashInit>:
RESERVED01,
RESERVED02,
RESERVED03,
RESERVED04, };

void FlashInit() {
 8023440:	b580      	push	{r7, lr}
 8023442:	b082      	sub	sp, #8
 8023444:	af00      	add	r7, sp, #0

	uint16_t mem_key;
	EE_ReadVariable(MEM_KEY_ADDR, &mem_key); /* Memory key reading */
 8023446:	1dbb      	adds	r3, r7, #6
 8023448:	4619      	mov	r1, r3
 802344a:	2000      	movs	r0, #0
 802344c:	f000 fa90 	bl	8023970 <EE_ReadVariable>
	if (mem_key != MEMORY_KEY) { /* First launching of device */
 8023450:	88fb      	ldrh	r3, [r7, #6]
 8023452:	f64b 62ab 	movw	r2, #48811	; 0xbeab
 8023456:	4293      	cmp	r3, r2
 8023458:	d01b      	beq.n	8023492 <FlashInit+0x52>
		/* Default FLASH initialization --------------------- */
		EE_WriteVariable(MEM_KEY_ADDR, MEMORY_KEY);
 802345a:	f64b 61ab 	movw	r1, #48811	; 0xbeab
 802345e:	2000      	movs	r0, #0
 8023460:	f000 fad0 	bl	8023a04 <EE_WriteVariable>
		EE_WriteVariable(IP_02_01_ADDR, DEFAULT_IP_02_01);
 8023464:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 8023468:	2001      	movs	r0, #1
 802346a:	f000 facb 	bl	8023a04 <EE_WriteVariable>
		EE_WriteVariable(IP_04_03_ADDR, DEFAULT_IP_04_03);
 802346e:	f64f 5104 	movw	r1, #64772	; 0xfd04
 8023472:	2002      	movs	r0, #2
 8023474:	f000 fac6 	bl	8023a04 <EE_WriteVariable>
		EE_WriteVariable(BR_MS_ADDR, DEFAULT_BR_MS);
 8023478:	2102      	movs	r1, #2
 802347a:	2003      	movs	r0, #3
 802347c:	f000 fac2 	bl	8023a04 <EE_WriteVariable>
		EE_WriteVariable(BR_LS_ADDR, DEFAULT_BR_LS);
 8023480:	f64d 416c 	movw	r1, #56428	; 0xdc6c
 8023484:	2004      	movs	r0, #4
 8023486:	f000 fabd 	bl	8023a04 <EE_WriteVariable>
		EE_WriteVariable(MPI_ADRR_ADDR, DEFAULT_MPI_ADDR);
 802348a:	2101      	movs	r1, #1
 802348c:	2005      	movs	r0, #5
 802348e:	f000 fab9 	bl	8023a04 <EE_WriteVariable>
		uint16_t ui16[2];
		uint8_t ui8[4];
	} tmp_u;

	/*baud rate */
	EE_ReadVariable(BR_MS_ADDR, &tmp_u.ui16[1]);
 8023492:	463b      	mov	r3, r7
 8023494:	3302      	adds	r3, #2
 8023496:	4619      	mov	r1, r3
 8023498:	2003      	movs	r0, #3
 802349a:	f000 fa69 	bl	8023970 <EE_ReadVariable>
	EE_ReadVariable(BR_LS_ADDR, &tmp_u.ui16[0]);
 802349e:	463b      	mov	r3, r7
 80234a0:	4619      	mov	r1, r3
 80234a2:	2004      	movs	r0, #4
 80234a4:	f000 fa64 	bl	8023970 <EE_ReadVariable>
	huart5.Init.BaudRate = tmp_u.ui32;
 80234a8:	683b      	ldr	r3, [r7, #0]
 80234aa:	4a12      	ldr	r2, [pc, #72]	; (80234f4 <FlashInit+0xb4>)
 80234ac:	6053      	str	r3, [r2, #4]
	hflash.speed = huart5.Init.BaudRate;
 80234ae:	4b11      	ldr	r3, [pc, #68]	; (80234f4 <FlashInit+0xb4>)
 80234b0:	685b      	ldr	r3, [r3, #4]
 80234b2:	4a11      	ldr	r2, [pc, #68]	; (80234f8 <FlashInit+0xb8>)
 80234b4:	6013      	str	r3, [r2, #0]
    /* IP-address */
	EE_ReadVariable(IP_02_01_ADDR, &tmp_u.ui16[0]);
 80234b6:	463b      	mov	r3, r7
 80234b8:	4619      	mov	r1, r3
 80234ba:	2001      	movs	r0, #1
 80234bc:	f000 fa58 	bl	8023970 <EE_ReadVariable>
	EE_ReadVariable(IP_04_03_ADDR, &tmp_u.ui16[1]);
 80234c0:	463b      	mov	r3, r7
 80234c2:	3302      	adds	r3, #2
 80234c4:	4619      	mov	r1, r3
 80234c6:	2002      	movs	r0, #2
 80234c8:	f000 fa52 	bl	8023970 <EE_ReadVariable>
	hflash.IP_addr[0] = tmp_u.ui8[0];
 80234cc:	783a      	ldrb	r2, [r7, #0]
 80234ce:	4b0a      	ldr	r3, [pc, #40]	; (80234f8 <FlashInit+0xb8>)
 80234d0:	719a      	strb	r2, [r3, #6]
	hflash.IP_addr[1] = tmp_u.ui8[1];
 80234d2:	787a      	ldrb	r2, [r7, #1]
 80234d4:	4b08      	ldr	r3, [pc, #32]	; (80234f8 <FlashInit+0xb8>)
 80234d6:	71da      	strb	r2, [r3, #7]
	hflash.IP_addr[2] = tmp_u.ui8[2];
 80234d8:	78ba      	ldrb	r2, [r7, #2]
 80234da:	4b07      	ldr	r3, [pc, #28]	; (80234f8 <FlashInit+0xb8>)
 80234dc:	721a      	strb	r2, [r3, #8]
	hflash.IP_addr[3] = tmp_u.ui8[3];
 80234de:	78fa      	ldrb	r2, [r7, #3]
 80234e0:	4b05      	ldr	r3, [pc, #20]	; (80234f8 <FlashInit+0xb8>)
 80234e2:	725a      	strb	r2, [r3, #9]
	/* MPI/Profibus address */
	EE_ReadVariable(MPI_ADRR_ADDR, &hflash.own_addr);
 80234e4:	4905      	ldr	r1, [pc, #20]	; (80234fc <FlashInit+0xbc>)
 80234e6:	2005      	movs	r0, #5
 80234e8:	f000 fa42 	bl	8023970 <EE_ReadVariable>
	/* ------------------------------------------------------- */
}
 80234ec:	bf00      	nop
 80234ee:	3708      	adds	r7, #8
 80234f0:	46bd      	mov	sp, r7
 80234f2:	bd80      	pop	{r7, pc}
 80234f4:	2000beec 	.word	0x2000beec
 80234f8:	20008c54 	.word	0x20008c54
 80234fc:	20008c58 	.word	0x20008c58

08023500 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8023500:	b580      	push	{r7, lr}
 8023502:	b082      	sub	sp, #8
 8023504:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8023506:	2300      	movs	r3, #0
 8023508:	607b      	str	r3, [r7, #4]
 802350a:	4a17      	ldr	r2, [pc, #92]	; (8023568 <MX_DMA_Init+0x68>)
 802350c:	4b16      	ldr	r3, [pc, #88]	; (8023568 <MX_DMA_Init+0x68>)
 802350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8023514:	6313      	str	r3, [r2, #48]	; 0x30
 8023516:	4b14      	ldr	r3, [pc, #80]	; (8023568 <MX_DMA_Init+0x68>)
 8023518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802351e:	607b      	str	r3, [r7, #4]
 8023520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8023522:	2300      	movs	r3, #0
 8023524:	603b      	str	r3, [r7, #0]
 8023526:	4a10      	ldr	r2, [pc, #64]	; (8023568 <MX_DMA_Init+0x68>)
 8023528:	4b0f      	ldr	r3, [pc, #60]	; (8023568 <MX_DMA_Init+0x68>)
 802352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802352c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8023530:	6313      	str	r3, [r2, #48]	; 0x30
 8023532:	4b0d      	ldr	r3, [pc, #52]	; (8023568 <MX_DMA_Init+0x68>)
 8023534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802353a:	603b      	str	r3, [r7, #0]
 802353c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 802353e:	2200      	movs	r2, #0
 8023540:	2105      	movs	r1, #5
 8023542:	202f      	movs	r0, #47	; 0x2f
 8023544:	f7ed f846 	bl	80105d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8023548:	202f      	movs	r0, #47	; 0x2f
 802354a:	f7ed f85f 	bl	801060c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 802354e:	2200      	movs	r2, #0
 8023550:	2105      	movs	r1, #5
 8023552:	2046      	movs	r0, #70	; 0x46
 8023554:	f7ed f83e 	bl	80105d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8023558:	2046      	movs	r0, #70	; 0x46
 802355a:	f7ed f857 	bl	801060c <HAL_NVIC_EnableIRQ>

}
 802355e:	bf00      	nop
 8023560:	3708      	adds	r7, #8
 8023562:	46bd      	mov	sp, r7
 8023564:	bd80      	pop	{r7, pc}
 8023566:	bf00      	nop
 8023568:	40023800 	.word	0x40023800

0802356c <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 802356c:	b580      	push	{r7, lr}
 802356e:	b08a      	sub	sp, #40	; 0x28
 8023570:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8023572:	2306      	movs	r3, #6
 8023574:	847b      	strh	r3, [r7, #34]	; 0x22
 8023576:	2306      	movs	r3, #6
 8023578:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 802357a:	2300      	movs	r3, #0
 802357c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 802357e:	2300      	movs	r3, #0
 8023580:	83fb      	strh	r3, [r7, #30]
 8023582:	2300      	movs	r3, #0
 8023584:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8023586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802358a:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 802358c:	2300      	movs	r3, #0
 802358e:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8023590:	4b9f      	ldr	r3, [pc, #636]	; (8023810 <EE_Init+0x2a4>)
 8023592:	881b      	ldrh	r3, [r3, #0]
 8023594:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8023596:	4b9f      	ldr	r3, [pc, #636]	; (8023814 <EE_Init+0x2a8>)
 8023598:	881b      	ldrh	r3, [r3, #0]
 802359a:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 802359c:	2300      	movs	r3, #0
 802359e:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 80235a0:	2302      	movs	r3, #2
 80235a2:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 80235a4:	2301      	movs	r3, #1
 80235a6:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80235a8:	2302      	movs	r3, #2
 80235aa:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80235ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80235ae:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80235b2:	4293      	cmp	r3, r2
 80235b4:	d057      	beq.n	8023666 <EE_Init+0xfa>
 80235b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80235ba:	4293      	cmp	r3, r2
 80235bc:	d003      	beq.n	80235c6 <EE_Init+0x5a>
 80235be:	2b00      	cmp	r3, #0
 80235c0:	f000 80f4 	beq.w	80237ac <EE_Init+0x240>
 80235c4:	e18d      	b.n	80238e2 <EE_Init+0x376>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80235c6:	8c3b      	ldrh	r3, [r7, #32]
 80235c8:	2b00      	cmp	r3, #0
 80235ca:	d116      	bne.n	80235fa <EE_Init+0x8e>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80235cc:	4890      	ldr	r0, [pc, #576]	; (8023810 <EE_Init+0x2a4>)
 80235ce:	f000 f9a9 	bl	8023924 <EE_VerifyPageFullyErased>
 80235d2:	4603      	mov	r3, r0
 80235d4:	2b00      	cmp	r3, #0
 80235d6:	f040 818e 	bne.w	80238f6 <EE_Init+0x38a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80235da:	f107 0214 	add.w	r2, r7, #20
 80235de:	463b      	mov	r3, r7
 80235e0:	4611      	mov	r1, r2
 80235e2:	4618      	mov	r0, r3
 80235e4:	f7ee fdc2 	bl	801216c <HAL_FLASHEx_Erase>
 80235e8:	4603      	mov	r3, r0
 80235ea:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80235ec:	7efb      	ldrb	r3, [r7, #27]
 80235ee:	2b00      	cmp	r3, #0
 80235f0:	f000 8181 	beq.w	80238f6 <EE_Init+0x38a>
          {
            return FlashStatus;
 80235f4:	7efb      	ldrb	r3, [r7, #27]
 80235f6:	b29b      	uxth	r3, r3
 80235f8:	e185      	b.n	8023906 <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80235fa:	8c3b      	ldrh	r3, [r7, #32]
 80235fc:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023600:	4293      	cmp	r3, r2
 8023602:	d125      	bne.n	8023650 <EE_Init+0xe4>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8023604:	4882      	ldr	r0, [pc, #520]	; (8023810 <EE_Init+0x2a4>)
 8023606:	f000 f98d 	bl	8023924 <EE_VerifyPageFullyErased>
 802360a:	4603      	mov	r3, r0
 802360c:	2b00      	cmp	r3, #0
 802360e:	d10e      	bne.n	802362e <EE_Init+0xc2>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8023610:	f107 0214 	add.w	r2, r7, #20
 8023614:	463b      	mov	r3, r7
 8023616:	4611      	mov	r1, r2
 8023618:	4618      	mov	r0, r3
 802361a:	f7ee fda7 	bl	801216c <HAL_FLASHEx_Erase>
 802361e:	4603      	mov	r3, r0
 8023620:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8023622:	7efb      	ldrb	r3, [r7, #27]
 8023624:	2b00      	cmp	r3, #0
 8023626:	d002      	beq.n	802362e <EE_Init+0xc2>
          {
            return FlashStatus;
 8023628:	7efb      	ldrb	r3, [r7, #27]
 802362a:	b29b      	uxth	r3, r3
 802362c:	e16b      	b.n	8023906 <EE_Init+0x39a>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 802362e:	f04f 0200 	mov.w	r2, #0
 8023632:	f04f 0300 	mov.w	r3, #0
 8023636:	4977      	ldr	r1, [pc, #476]	; (8023814 <EE_Init+0x2a8>)
 8023638:	2001      	movs	r0, #1
 802363a:	f7ee fbf7 	bl	8011e2c <HAL_FLASH_Program>
 802363e:	4603      	mov	r3, r0
 8023640:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8023642:	7efb      	ldrb	r3, [r7, #27]
 8023644:	2b00      	cmp	r3, #0
 8023646:	f000 8156 	beq.w	80238f6 <EE_Init+0x38a>
        {
          return FlashStatus;
 802364a:	7efb      	ldrb	r3, [r7, #27]
 802364c:	b29b      	uxth	r3, r3
 802364e:	e15a      	b.n	8023906 <EE_Init+0x39a>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8023650:	f000 f9fa 	bl	8023a48 <EE_Format>
 8023654:	4603      	mov	r3, r0
 8023656:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8023658:	7efb      	ldrb	r3, [r7, #27]
 802365a:	2b00      	cmp	r3, #0
 802365c:	f000 814b 	beq.w	80238f6 <EE_Init+0x38a>
        {
          return FlashStatus;
 8023660:	7efb      	ldrb	r3, [r7, #27]
 8023662:	b29b      	uxth	r3, r3
 8023664:	e14f      	b.n	8023906 <EE_Init+0x39a>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8023666:	8c3b      	ldrh	r3, [r7, #32]
 8023668:	2b00      	cmp	r3, #0
 802366a:	d163      	bne.n	8023734 <EE_Init+0x1c8>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 802366c:	2300      	movs	r3, #0
 802366e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023670:	e030      	b.n	80236d4 <EE_Init+0x168>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8023672:	4b69      	ldr	r3, [pc, #420]	; (8023818 <EE_Init+0x2ac>)
 8023674:	881b      	ldrh	r3, [r3, #0]
 8023676:	b29a      	uxth	r2, r3
 8023678:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802367a:	4968      	ldr	r1, [pc, #416]	; (802381c <EE_Init+0x2b0>)
 802367c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023680:	429a      	cmp	r2, r3
 8023682:	d101      	bne.n	8023688 <EE_Init+0x11c>
          {
            x = VarIdx;
 8023684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023686:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8023688:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802368a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 802368e:	429a      	cmp	r2, r3
 8023690:	d01d      	beq.n	80236ce <EE_Init+0x162>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8023692:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023694:	4a61      	ldr	r2, [pc, #388]	; (802381c <EE_Init+0x2b0>)
 8023696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802369a:	4961      	ldr	r1, [pc, #388]	; (8023820 <EE_Init+0x2b4>)
 802369c:	4618      	mov	r0, r3
 802369e:	f000 f967 	bl	8023970 <EE_ReadVariable>
 80236a2:	4603      	mov	r3, r0
 80236a4:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80236a6:	8bbb      	ldrh	r3, [r7, #28]
 80236a8:	2b01      	cmp	r3, #1
 80236aa:	d010      	beq.n	80236ce <EE_Init+0x162>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80236ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80236ae:	4a5b      	ldr	r2, [pc, #364]	; (802381c <EE_Init+0x2b0>)
 80236b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80236b4:	4b5a      	ldr	r3, [pc, #360]	; (8023820 <EE_Init+0x2b4>)
 80236b6:	881b      	ldrh	r3, [r3, #0]
 80236b8:	4619      	mov	r1, r3
 80236ba:	4610      	mov	r0, r2
 80236bc:	f000 fa5c 	bl	8023b78 <EE_VerifyPageFullWriteVariable>
 80236c0:	4603      	mov	r3, r0
 80236c2:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80236c4:	8bfb      	ldrh	r3, [r7, #30]
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	d001      	beq.n	80236ce <EE_Init+0x162>
              {
                return EepromStatus;
 80236ca:	8bfb      	ldrh	r3, [r7, #30]
 80236cc:	e11b      	b.n	8023906 <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80236ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80236d0:	3301      	adds	r3, #1
 80236d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80236d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80236d6:	2b09      	cmp	r3, #9
 80236d8:	d9cb      	bls.n	8023672 <EE_Init+0x106>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80236da:	f04f 0200 	mov.w	r2, #0
 80236de:	f04f 0300 	mov.w	r3, #0
 80236e2:	494b      	ldr	r1, [pc, #300]	; (8023810 <EE_Init+0x2a4>)
 80236e4:	2001      	movs	r0, #1
 80236e6:	f7ee fba1 	bl	8011e2c <HAL_FLASH_Program>
 80236ea:	4603      	mov	r3, r0
 80236ec:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80236ee:	7efb      	ldrb	r3, [r7, #27]
 80236f0:	2b00      	cmp	r3, #0
 80236f2:	d002      	beq.n	80236fa <EE_Init+0x18e>
        {
          return FlashStatus;
 80236f4:	7efb      	ldrb	r3, [r7, #27]
 80236f6:	b29b      	uxth	r3, r3
 80236f8:	e105      	b.n	8023906 <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE1_ID;
 80236fa:	2303      	movs	r3, #3
 80236fc:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80236fe:	2301      	movs	r3, #1
 8023700:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023702:	2302      	movs	r3, #2
 8023704:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8023706:	4843      	ldr	r0, [pc, #268]	; (8023814 <EE_Init+0x2a8>)
 8023708:	f000 f90c 	bl	8023924 <EE_VerifyPageFullyErased>
 802370c:	4603      	mov	r3, r0
 802370e:	2b00      	cmp	r3, #0
 8023710:	f040 80f3 	bne.w	80238fa <EE_Init+0x38e>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8023714:	f107 0214 	add.w	r2, r7, #20
 8023718:	463b      	mov	r3, r7
 802371a:	4611      	mov	r1, r2
 802371c:	4618      	mov	r0, r3
 802371e:	f7ee fd25 	bl	801216c <HAL_FLASHEx_Erase>
 8023722:	4603      	mov	r3, r0
 8023724:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8023726:	7efb      	ldrb	r3, [r7, #27]
 8023728:	2b00      	cmp	r3, #0
 802372a:	f000 80e6 	beq.w	80238fa <EE_Init+0x38e>
          {
            return FlashStatus;
 802372e:	7efb      	ldrb	r3, [r7, #27]
 8023730:	b29b      	uxth	r3, r3
 8023732:	e0e8      	b.n	8023906 <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8023734:	8c3b      	ldrh	r3, [r7, #32]
 8023736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802373a:	4293      	cmp	r3, r2
 802373c:	d12b      	bne.n	8023796 <EE_Init+0x22a>
      {
        pEraseInit.Sector = PAGE1_ID;
 802373e:	2303      	movs	r3, #3
 8023740:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8023742:	2301      	movs	r3, #1
 8023744:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023746:	2302      	movs	r3, #2
 8023748:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 802374a:	4832      	ldr	r0, [pc, #200]	; (8023814 <EE_Init+0x2a8>)
 802374c:	f000 f8ea 	bl	8023924 <EE_VerifyPageFullyErased>
 8023750:	4603      	mov	r3, r0
 8023752:	2b00      	cmp	r3, #0
 8023754:	d10e      	bne.n	8023774 <EE_Init+0x208>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8023756:	f107 0214 	add.w	r2, r7, #20
 802375a:	463b      	mov	r3, r7
 802375c:	4611      	mov	r1, r2
 802375e:	4618      	mov	r0, r3
 8023760:	f7ee fd04 	bl	801216c <HAL_FLASHEx_Erase>
 8023764:	4603      	mov	r3, r0
 8023766:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8023768:	7efb      	ldrb	r3, [r7, #27]
 802376a:	2b00      	cmp	r3, #0
 802376c:	d002      	beq.n	8023774 <EE_Init+0x208>
          {
            return FlashStatus;
 802376e:	7efb      	ldrb	r3, [r7, #27]
 8023770:	b29b      	uxth	r3, r3
 8023772:	e0c8      	b.n	8023906 <EE_Init+0x39a>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8023774:	f04f 0200 	mov.w	r2, #0
 8023778:	f04f 0300 	mov.w	r3, #0
 802377c:	4924      	ldr	r1, [pc, #144]	; (8023810 <EE_Init+0x2a4>)
 802377e:	2001      	movs	r0, #1
 8023780:	f7ee fb54 	bl	8011e2c <HAL_FLASH_Program>
 8023784:	4603      	mov	r3, r0
 8023786:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8023788:	7efb      	ldrb	r3, [r7, #27]
 802378a:	2b00      	cmp	r3, #0
 802378c:	f000 80b5 	beq.w	80238fa <EE_Init+0x38e>
        {
          return FlashStatus;
 8023790:	7efb      	ldrb	r3, [r7, #27]
 8023792:	b29b      	uxth	r3, r3
 8023794:	e0b7      	b.n	8023906 <EE_Init+0x39a>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8023796:	f000 f957 	bl	8023a48 <EE_Format>
 802379a:	4603      	mov	r3, r0
 802379c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 802379e:	7efb      	ldrb	r3, [r7, #27]
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	f000 80aa 	beq.w	80238fa <EE_Init+0x38e>
        {
          return FlashStatus;
 80237a6:	7efb      	ldrb	r3, [r7, #27]
 80237a8:	b29b      	uxth	r3, r3
 80237aa:	e0ac      	b.n	8023906 <EE_Init+0x39a>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80237ac:	8c3b      	ldrh	r3, [r7, #32]
 80237ae:	2b00      	cmp	r3, #0
 80237b0:	d10a      	bne.n	80237c8 <EE_Init+0x25c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80237b2:	f000 f949 	bl	8023a48 <EE_Format>
 80237b6:	4603      	mov	r3, r0
 80237b8:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80237ba:	7efb      	ldrb	r3, [r7, #27]
 80237bc:	2b00      	cmp	r3, #0
 80237be:	f000 809e 	beq.w	80238fe <EE_Init+0x392>
        {
          return FlashStatus;
 80237c2:	7efb      	ldrb	r3, [r7, #27]
 80237c4:	b29b      	uxth	r3, r3
 80237c6:	e09e      	b.n	8023906 <EE_Init+0x39a>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80237c8:	8c3b      	ldrh	r3, [r7, #32]
 80237ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80237ce:	4293      	cmp	r3, r2
 80237d0:	d11b      	bne.n	802380a <EE_Init+0x29e>
      {
        pEraseInit.Sector = PAGE1_ID;
 80237d2:	2303      	movs	r3, #3
 80237d4:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80237d6:	2301      	movs	r3, #1
 80237d8:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80237da:	2302      	movs	r3, #2
 80237dc:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80237de:	480d      	ldr	r0, [pc, #52]	; (8023814 <EE_Init+0x2a8>)
 80237e0:	f000 f8a0 	bl	8023924 <EE_VerifyPageFullyErased>
 80237e4:	4603      	mov	r3, r0
 80237e6:	2b00      	cmp	r3, #0
 80237e8:	f040 8089 	bne.w	80238fe <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80237ec:	f107 0214 	add.w	r2, r7, #20
 80237f0:	463b      	mov	r3, r7
 80237f2:	4611      	mov	r1, r2
 80237f4:	4618      	mov	r0, r3
 80237f6:	f7ee fcb9 	bl	801216c <HAL_FLASHEx_Erase>
 80237fa:	4603      	mov	r3, r0
 80237fc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80237fe:	7efb      	ldrb	r3, [r7, #27]
 8023800:	2b00      	cmp	r3, #0
 8023802:	d07c      	beq.n	80238fe <EE_Init+0x392>
          {
            return FlashStatus;
 8023804:	7efb      	ldrb	r3, [r7, #27]
 8023806:	b29b      	uxth	r3, r3
 8023808:	e07d      	b.n	8023906 <EE_Init+0x39a>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 802380a:	2300      	movs	r3, #0
 802380c:	84fb      	strh	r3, [r7, #38]	; 0x26
 802380e:	e03a      	b.n	8023886 <EE_Init+0x31a>
 8023810:	08008000 	.word	0x08008000
 8023814:	0800c000 	.word	0x0800c000
 8023818:	08008006 	.word	0x08008006
 802381c:	20000014 	.word	0x20000014
 8023820:	20004134 	.word	0x20004134
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8023824:	4b3a      	ldr	r3, [pc, #232]	; (8023910 <EE_Init+0x3a4>)
 8023826:	881b      	ldrh	r3, [r3, #0]
 8023828:	b29a      	uxth	r2, r3
 802382a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802382c:	4939      	ldr	r1, [pc, #228]	; (8023914 <EE_Init+0x3a8>)
 802382e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023832:	429a      	cmp	r2, r3
 8023834:	d101      	bne.n	802383a <EE_Init+0x2ce>
          {
            x = VarIdx;
 8023836:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023838:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 802383a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802383c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8023840:	429a      	cmp	r2, r3
 8023842:	d01d      	beq.n	8023880 <EE_Init+0x314>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8023844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023846:	4a33      	ldr	r2, [pc, #204]	; (8023914 <EE_Init+0x3a8>)
 8023848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802384c:	4932      	ldr	r1, [pc, #200]	; (8023918 <EE_Init+0x3ac>)
 802384e:	4618      	mov	r0, r3
 8023850:	f000 f88e 	bl	8023970 <EE_ReadVariable>
 8023854:	4603      	mov	r3, r0
 8023856:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8023858:	8bbb      	ldrh	r3, [r7, #28]
 802385a:	2b01      	cmp	r3, #1
 802385c:	d010      	beq.n	8023880 <EE_Init+0x314>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 802385e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023860:	4a2c      	ldr	r2, [pc, #176]	; (8023914 <EE_Init+0x3a8>)
 8023862:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8023866:	4b2c      	ldr	r3, [pc, #176]	; (8023918 <EE_Init+0x3ac>)
 8023868:	881b      	ldrh	r3, [r3, #0]
 802386a:	4619      	mov	r1, r3
 802386c:	4610      	mov	r0, r2
 802386e:	f000 f983 	bl	8023b78 <EE_VerifyPageFullWriteVariable>
 8023872:	4603      	mov	r3, r0
 8023874:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8023876:	8bfb      	ldrh	r3, [r7, #30]
 8023878:	2b00      	cmp	r3, #0
 802387a:	d001      	beq.n	8023880 <EE_Init+0x314>
              {
                return EepromStatus;
 802387c:	8bfb      	ldrh	r3, [r7, #30]
 802387e:	e042      	b.n	8023906 <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8023880:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023882:	3301      	adds	r3, #1
 8023884:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023886:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023888:	2b09      	cmp	r3, #9
 802388a:	d9cb      	bls.n	8023824 <EE_Init+0x2b8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 802388c:	f04f 0200 	mov.w	r2, #0
 8023890:	f04f 0300 	mov.w	r3, #0
 8023894:	4921      	ldr	r1, [pc, #132]	; (802391c <EE_Init+0x3b0>)
 8023896:	2001      	movs	r0, #1
 8023898:	f7ee fac8 	bl	8011e2c <HAL_FLASH_Program>
 802389c:	4603      	mov	r3, r0
 802389e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80238a0:	7efb      	ldrb	r3, [r7, #27]
 80238a2:	2b00      	cmp	r3, #0
 80238a4:	d002      	beq.n	80238ac <EE_Init+0x340>
        {
          return FlashStatus;
 80238a6:	7efb      	ldrb	r3, [r7, #27]
 80238a8:	b29b      	uxth	r3, r3
 80238aa:	e02c      	b.n	8023906 <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE0_ID;
 80238ac:	2302      	movs	r3, #2
 80238ae:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80238b0:	2301      	movs	r3, #1
 80238b2:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80238b4:	2302      	movs	r3, #2
 80238b6:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80238b8:	4819      	ldr	r0, [pc, #100]	; (8023920 <EE_Init+0x3b4>)
 80238ba:	f000 f833 	bl	8023924 <EE_VerifyPageFullyErased>
 80238be:	4603      	mov	r3, r0
 80238c0:	2b00      	cmp	r3, #0
 80238c2:	d11c      	bne.n	80238fe <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80238c4:	f107 0214 	add.w	r2, r7, #20
 80238c8:	463b      	mov	r3, r7
 80238ca:	4611      	mov	r1, r2
 80238cc:	4618      	mov	r0, r3
 80238ce:	f7ee fc4d 	bl	801216c <HAL_FLASHEx_Erase>
 80238d2:	4603      	mov	r3, r0
 80238d4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80238d6:	7efb      	ldrb	r3, [r7, #27]
 80238d8:	2b00      	cmp	r3, #0
 80238da:	d010      	beq.n	80238fe <EE_Init+0x392>
          {
            return FlashStatus;
 80238dc:	7efb      	ldrb	r3, [r7, #27]
 80238de:	b29b      	uxth	r3, r3
 80238e0:	e011      	b.n	8023906 <EE_Init+0x39a>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80238e2:	f000 f8b1 	bl	8023a48 <EE_Format>
 80238e6:	4603      	mov	r3, r0
 80238e8:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80238ea:	7efb      	ldrb	r3, [r7, #27]
 80238ec:	2b00      	cmp	r3, #0
 80238ee:	d008      	beq.n	8023902 <EE_Init+0x396>
      {
        return FlashStatus;
 80238f0:	7efb      	ldrb	r3, [r7, #27]
 80238f2:	b29b      	uxth	r3, r3
 80238f4:	e007      	b.n	8023906 <EE_Init+0x39a>
      break;
 80238f6:	bf00      	nop
 80238f8:	e004      	b.n	8023904 <EE_Init+0x398>
      break;
 80238fa:	bf00      	nop
 80238fc:	e002      	b.n	8023904 <EE_Init+0x398>
      break;
 80238fe:	bf00      	nop
 8023900:	e000      	b.n	8023904 <EE_Init+0x398>
      }
      break;
 8023902:	bf00      	nop
  }

  return HAL_OK;
 8023904:	2300      	movs	r3, #0
}
 8023906:	4618      	mov	r0, r3
 8023908:	3728      	adds	r7, #40	; 0x28
 802390a:	46bd      	mov	sp, r7
 802390c:	bd80      	pop	{r7, pc}
 802390e:	bf00      	nop
 8023910:	0800c006 	.word	0x0800c006
 8023914:	20000014 	.word	0x20000014
 8023918:	20004134 	.word	0x20004134
 802391c:	0800c000 	.word	0x0800c000
 8023920:	08008000 	.word	0x08008000

08023924 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8023924:	b480      	push	{r7}
 8023926:	b085      	sub	sp, #20
 8023928:	af00      	add	r7, sp, #0
 802392a:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 802392c:	2301      	movs	r3, #1
 802392e:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8023930:	f245 5355 	movw	r3, #21845	; 0x5555
 8023934:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8023936:	e00d      	b.n	8023954 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8023938:	687b      	ldr	r3, [r7, #4]
 802393a:	881b      	ldrh	r3, [r3, #0]
 802393c:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 802393e:	897b      	ldrh	r3, [r7, #10]
 8023940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023944:	4293      	cmp	r3, r2
 8023946:	d002      	beq.n	802394e <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8023948:	2300      	movs	r3, #0
 802394a:	60fb      	str	r3, [r7, #12]

      break;
 802394c:	e006      	b.n	802395c <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 802394e:	687b      	ldr	r3, [r7, #4]
 8023950:	3304      	adds	r3, #4
 8023952:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8023954:	687b      	ldr	r3, [r7, #4]
 8023956:	4a05      	ldr	r2, [pc, #20]	; (802396c <EE_VerifyPageFullyErased+0x48>)
 8023958:	4293      	cmp	r3, r2
 802395a:	d9ed      	bls.n	8023938 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 802395c:	68fb      	ldr	r3, [r7, #12]
 802395e:	b29b      	uxth	r3, r3
}
 8023960:	4618      	mov	r0, r3
 8023962:	3714      	adds	r7, #20
 8023964:	46bd      	mov	sp, r7
 8023966:	f85d 7b04 	ldr.w	r7, [sp], #4
 802396a:	4770      	bx	lr
 802396c:	0800bfff 	.word	0x0800bfff

08023970 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8023970:	b580      	push	{r7, lr}
 8023972:	b086      	sub	sp, #24
 8023974:	af00      	add	r7, sp, #0
 8023976:	4603      	mov	r3, r0
 8023978:	6039      	str	r1, [r7, #0]
 802397a:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 802397c:	2300      	movs	r3, #0
 802397e:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8023980:	f245 5355 	movw	r3, #21845	; 0x5555
 8023984:	81bb      	strh	r3, [r7, #12]
 8023986:	2301      	movs	r3, #1
 8023988:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 802398a:	4b1c      	ldr	r3, [pc, #112]	; (80239fc <EE_ReadVariable+0x8c>)
 802398c:	613b      	str	r3, [r7, #16]
 802398e:	4b1b      	ldr	r3, [pc, #108]	; (80239fc <EE_ReadVariable+0x8c>)
 8023990:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8023992:	2000      	movs	r0, #0
 8023994:	f000 f8aa 	bl	8023aec <EE_FindValidPage>
 8023998:	4603      	mov	r3, r0
 802399a:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 802399c:	89fb      	ldrh	r3, [r7, #14]
 802399e:	2bab      	cmp	r3, #171	; 0xab
 80239a0:	d101      	bne.n	80239a6 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80239a2:	23ab      	movs	r3, #171	; 0xab
 80239a4:	e025      	b.n	80239f2 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80239a6:	89fb      	ldrh	r3, [r7, #14]
 80239a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80239ac:	3302      	adds	r3, #2
 80239ae:	039b      	lsls	r3, r3, #14
 80239b0:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80239b2:	89fb      	ldrh	r3, [r7, #14]
 80239b4:	3301      	adds	r3, #1
 80239b6:	039a      	lsls	r2, r3, #14
 80239b8:	4b11      	ldr	r3, [pc, #68]	; (8023a00 <EE_ReadVariable+0x90>)
 80239ba:	4413      	add	r3, r2
 80239bc:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80239be:	e012      	b.n	80239e6 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80239c0:	693b      	ldr	r3, [r7, #16]
 80239c2:	881b      	ldrh	r3, [r3, #0]
 80239c4:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80239c6:	89ba      	ldrh	r2, [r7, #12]
 80239c8:	88fb      	ldrh	r3, [r7, #6]
 80239ca:	429a      	cmp	r2, r3
 80239cc:	d108      	bne.n	80239e0 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 80239ce:	693b      	ldr	r3, [r7, #16]
 80239d0:	3b02      	subs	r3, #2
 80239d2:	881b      	ldrh	r3, [r3, #0]
 80239d4:	b29a      	uxth	r2, r3
 80239d6:	683b      	ldr	r3, [r7, #0]
 80239d8:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80239da:	2300      	movs	r3, #0
 80239dc:	82fb      	strh	r3, [r7, #22]

      break;
 80239de:	e007      	b.n	80239f0 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 80239e0:	693b      	ldr	r3, [r7, #16]
 80239e2:	3b04      	subs	r3, #4
 80239e4:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80239e6:	68bb      	ldr	r3, [r7, #8]
 80239e8:	1c9a      	adds	r2, r3, #2
 80239ea:	693b      	ldr	r3, [r7, #16]
 80239ec:	429a      	cmp	r2, r3
 80239ee:	d3e7      	bcc.n	80239c0 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80239f0:	8afb      	ldrh	r3, [r7, #22]
}
 80239f2:	4618      	mov	r0, r3
 80239f4:	3718      	adds	r7, #24
 80239f6:	46bd      	mov	sp, r7
 80239f8:	bd80      	pop	{r7, pc}
 80239fa:	bf00      	nop
 80239fc:	08008000 	.word	0x08008000
 8023a00:	08007ffe 	.word	0x08007ffe

08023a04 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8023a04:	b580      	push	{r7, lr}
 8023a06:	b084      	sub	sp, #16
 8023a08:	af00      	add	r7, sp, #0
 8023a0a:	4603      	mov	r3, r0
 8023a0c:	460a      	mov	r2, r1
 8023a0e:	80fb      	strh	r3, [r7, #6]
 8023a10:	4613      	mov	r3, r2
 8023a12:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8023a14:	2300      	movs	r3, #0
 8023a16:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8023a18:	88ba      	ldrh	r2, [r7, #4]
 8023a1a:	88fb      	ldrh	r3, [r7, #6]
 8023a1c:	4611      	mov	r1, r2
 8023a1e:	4618      	mov	r0, r3
 8023a20:	f000 f8aa 	bl	8023b78 <EE_VerifyPageFullWriteVariable>
 8023a24:	4603      	mov	r3, r0
 8023a26:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8023a28:	89fb      	ldrh	r3, [r7, #14]
 8023a2a:	2b80      	cmp	r3, #128	; 0x80
 8023a2c:	d107      	bne.n	8023a3e <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8023a2e:	88ba      	ldrh	r2, [r7, #4]
 8023a30:	88fb      	ldrh	r3, [r7, #6]
 8023a32:	4611      	mov	r1, r2
 8023a34:	4618      	mov	r0, r3
 8023a36:	f000 f8fd 	bl	8023c34 <EE_PageTransfer>
 8023a3a:	4603      	mov	r3, r0
 8023a3c:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8023a3e:	89fb      	ldrh	r3, [r7, #14]
}
 8023a40:	4618      	mov	r0, r3
 8023a42:	3710      	adds	r7, #16
 8023a44:	46bd      	mov	sp, r7
 8023a46:	bd80      	pop	{r7, pc}

08023a48 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8023a48:	b580      	push	{r7, lr}
 8023a4a:	b088      	sub	sp, #32
 8023a4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8023a4e:	2300      	movs	r3, #0
 8023a50:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8023a52:	2300      	movs	r3, #0
 8023a54:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8023a56:	2300      	movs	r3, #0
 8023a58:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8023a5a:	2302      	movs	r3, #2
 8023a5c:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8023a5e:	2301      	movs	r3, #1
 8023a60:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023a62:	2302      	movs	r3, #2
 8023a64:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8023a66:	481f      	ldr	r0, [pc, #124]	; (8023ae4 <EE_Format+0x9c>)
 8023a68:	f7ff ff5c 	bl	8023924 <EE_VerifyPageFullyErased>
 8023a6c:	4603      	mov	r3, r0
 8023a6e:	2b00      	cmp	r3, #0
 8023a70:	d10d      	bne.n	8023a8e <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8023a72:	f107 0218 	add.w	r2, r7, #24
 8023a76:	1d3b      	adds	r3, r7, #4
 8023a78:	4611      	mov	r1, r2
 8023a7a:	4618      	mov	r0, r3
 8023a7c:	f7ee fb76 	bl	801216c <HAL_FLASHEx_Erase>
 8023a80:	4603      	mov	r3, r0
 8023a82:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8023a84:	7ffb      	ldrb	r3, [r7, #31]
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	d001      	beq.n	8023a8e <EE_Format+0x46>
    {
      return FlashStatus;
 8023a8a:	7ffb      	ldrb	r3, [r7, #31]
 8023a8c:	e025      	b.n	8023ada <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8023a8e:	f04f 0200 	mov.w	r2, #0
 8023a92:	f04f 0300 	mov.w	r3, #0
 8023a96:	4913      	ldr	r1, [pc, #76]	; (8023ae4 <EE_Format+0x9c>)
 8023a98:	2001      	movs	r0, #1
 8023a9a:	f7ee f9c7 	bl	8011e2c <HAL_FLASH_Program>
 8023a9e:	4603      	mov	r3, r0
 8023aa0:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8023aa2:	7ffb      	ldrb	r3, [r7, #31]
 8023aa4:	2b00      	cmp	r3, #0
 8023aa6:	d001      	beq.n	8023aac <EE_Format+0x64>
  {
    return FlashStatus;
 8023aa8:	7ffb      	ldrb	r3, [r7, #31]
 8023aaa:	e016      	b.n	8023ada <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8023aac:	2303      	movs	r3, #3
 8023aae:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8023ab0:	480d      	ldr	r0, [pc, #52]	; (8023ae8 <EE_Format+0xa0>)
 8023ab2:	f7ff ff37 	bl	8023924 <EE_VerifyPageFullyErased>
 8023ab6:	4603      	mov	r3, r0
 8023ab8:	2b00      	cmp	r3, #0
 8023aba:	d10d      	bne.n	8023ad8 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8023abc:	f107 0218 	add.w	r2, r7, #24
 8023ac0:	1d3b      	adds	r3, r7, #4
 8023ac2:	4611      	mov	r1, r2
 8023ac4:	4618      	mov	r0, r3
 8023ac6:	f7ee fb51 	bl	801216c <HAL_FLASHEx_Erase>
 8023aca:	4603      	mov	r3, r0
 8023acc:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8023ace:	7ffb      	ldrb	r3, [r7, #31]
 8023ad0:	2b00      	cmp	r3, #0
 8023ad2:	d001      	beq.n	8023ad8 <EE_Format+0x90>
    {
      return FlashStatus;
 8023ad4:	7ffb      	ldrb	r3, [r7, #31]
 8023ad6:	e000      	b.n	8023ada <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8023ad8:	2300      	movs	r3, #0
}
 8023ada:	4618      	mov	r0, r3
 8023adc:	3720      	adds	r7, #32
 8023ade:	46bd      	mov	sp, r7
 8023ae0:	bd80      	pop	{r7, pc}
 8023ae2:	bf00      	nop
 8023ae4:	08008000 	.word	0x08008000
 8023ae8:	0800c000 	.word	0x0800c000

08023aec <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8023aec:	b480      	push	{r7}
 8023aee:	b085      	sub	sp, #20
 8023af0:	af00      	add	r7, sp, #0
 8023af2:	4603      	mov	r3, r0
 8023af4:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8023af6:	2306      	movs	r3, #6
 8023af8:	81fb      	strh	r3, [r7, #14]
 8023afa:	2306      	movs	r3, #6
 8023afc:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8023afe:	4b1c      	ldr	r3, [pc, #112]	; (8023b70 <EE_FindValidPage+0x84>)
 8023b00:	881b      	ldrh	r3, [r3, #0]
 8023b02:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8023b04:	4b1b      	ldr	r3, [pc, #108]	; (8023b74 <EE_FindValidPage+0x88>)
 8023b06:	881b      	ldrh	r3, [r3, #0]
 8023b08:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8023b0a:	79fb      	ldrb	r3, [r7, #7]
 8023b0c:	2b00      	cmp	r3, #0
 8023b0e:	d01b      	beq.n	8023b48 <EE_FindValidPage+0x5c>
 8023b10:	2b01      	cmp	r3, #1
 8023b12:	d125      	bne.n	8023b60 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8023b14:	89bb      	ldrh	r3, [r7, #12]
 8023b16:	2b00      	cmp	r3, #0
 8023b18:	d108      	bne.n	8023b2c <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8023b1a:	89fb      	ldrh	r3, [r7, #14]
 8023b1c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023b20:	4293      	cmp	r3, r2
 8023b22:	d101      	bne.n	8023b28 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8023b24:	2300      	movs	r3, #0
 8023b26:	e01c      	b.n	8023b62 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8023b28:	2301      	movs	r3, #1
 8023b2a:	e01a      	b.n	8023b62 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8023b2c:	89fb      	ldrh	r3, [r7, #14]
 8023b2e:	2b00      	cmp	r3, #0
 8023b30:	d108      	bne.n	8023b44 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8023b32:	89bb      	ldrh	r3, [r7, #12]
 8023b34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023b38:	4293      	cmp	r3, r2
 8023b3a:	d101      	bne.n	8023b40 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8023b3c:	2301      	movs	r3, #1
 8023b3e:	e010      	b.n	8023b62 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8023b40:	2300      	movs	r3, #0
 8023b42:	e00e      	b.n	8023b62 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8023b44:	23ab      	movs	r3, #171	; 0xab
 8023b46:	e00c      	b.n	8023b62 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8023b48:	89fb      	ldrh	r3, [r7, #14]
 8023b4a:	2b00      	cmp	r3, #0
 8023b4c:	d101      	bne.n	8023b52 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8023b4e:	2300      	movs	r3, #0
 8023b50:	e007      	b.n	8023b62 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8023b52:	89bb      	ldrh	r3, [r7, #12]
 8023b54:	2b00      	cmp	r3, #0
 8023b56:	d101      	bne.n	8023b5c <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8023b58:	2301      	movs	r3, #1
 8023b5a:	e002      	b.n	8023b62 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8023b5c:	23ab      	movs	r3, #171	; 0xab
 8023b5e:	e000      	b.n	8023b62 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8023b60:	2300      	movs	r3, #0
  }
}
 8023b62:	4618      	mov	r0, r3
 8023b64:	3714      	adds	r7, #20
 8023b66:	46bd      	mov	sp, r7
 8023b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b6c:	4770      	bx	lr
 8023b6e:	bf00      	nop
 8023b70:	08008000 	.word	0x08008000
 8023b74:	0800c000 	.word	0x0800c000

08023b78 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8023b78:	b590      	push	{r4, r7, lr}
 8023b7a:	b087      	sub	sp, #28
 8023b7c:	af00      	add	r7, sp, #0
 8023b7e:	4603      	mov	r3, r0
 8023b80:	460a      	mov	r2, r1
 8023b82:	80fb      	strh	r3, [r7, #6]
 8023b84:	4613      	mov	r3, r2
 8023b86:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8023b88:	2300      	movs	r3, #0
 8023b8a:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8023b8c:	2300      	movs	r3, #0
 8023b8e:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8023b90:	4b25      	ldr	r3, [pc, #148]	; (8023c28 <EE_VerifyPageFullWriteVariable+0xb0>)
 8023b92:	617b      	str	r3, [r7, #20]
 8023b94:	4b25      	ldr	r3, [pc, #148]	; (8023c2c <EE_VerifyPageFullWriteVariable+0xb4>)
 8023b96:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8023b98:	2001      	movs	r0, #1
 8023b9a:	f7ff ffa7 	bl	8023aec <EE_FindValidPage>
 8023b9e:	4603      	mov	r3, r0
 8023ba0:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8023ba2:	8a3b      	ldrh	r3, [r7, #16]
 8023ba4:	2bab      	cmp	r3, #171	; 0xab
 8023ba6:	d101      	bne.n	8023bac <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8023ba8:	23ab      	movs	r3, #171	; 0xab
 8023baa:	e039      	b.n	8023c20 <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8023bac:	8a3b      	ldrh	r3, [r7, #16]
 8023bae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023bb2:	3302      	adds	r3, #2
 8023bb4:	039b      	lsls	r3, r3, #14
 8023bb6:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8023bb8:	8a3b      	ldrh	r3, [r7, #16]
 8023bba:	3301      	adds	r3, #1
 8023bbc:	039a      	lsls	r2, r3, #14
 8023bbe:	4b1c      	ldr	r3, [pc, #112]	; (8023c30 <EE_VerifyPageFullWriteVariable+0xb8>)
 8023bc0:	4413      	add	r3, r2
 8023bc2:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8023bc4:	e027      	b.n	8023c16 <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8023bc6:	697b      	ldr	r3, [r7, #20]
 8023bc8:	681b      	ldr	r3, [r3, #0]
 8023bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023bce:	d11f      	bne.n	8023c10 <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8023bd0:	88bb      	ldrh	r3, [r7, #4]
 8023bd2:	f04f 0400 	mov.w	r4, #0
 8023bd6:	461a      	mov	r2, r3
 8023bd8:	4623      	mov	r3, r4
 8023bda:	6979      	ldr	r1, [r7, #20]
 8023bdc:	2001      	movs	r0, #1
 8023bde:	f7ee f925 	bl	8011e2c <HAL_FLASH_Program>
 8023be2:	4603      	mov	r3, r0
 8023be4:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8023be6:	7cfb      	ldrb	r3, [r7, #19]
 8023be8:	2b00      	cmp	r3, #0
 8023bea:	d002      	beq.n	8023bf2 <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return FlashStatus;
 8023bec:	7cfb      	ldrb	r3, [r7, #19]
 8023bee:	b29b      	uxth	r3, r3
 8023bf0:	e016      	b.n	8023c20 <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8023bf2:	697b      	ldr	r3, [r7, #20]
 8023bf4:	1c99      	adds	r1, r3, #2
 8023bf6:	88fb      	ldrh	r3, [r7, #6]
 8023bf8:	f04f 0400 	mov.w	r4, #0
 8023bfc:	461a      	mov	r2, r3
 8023bfe:	4623      	mov	r3, r4
 8023c00:	2001      	movs	r0, #1
 8023c02:	f7ee f913 	bl	8011e2c <HAL_FLASH_Program>
 8023c06:	4603      	mov	r3, r0
 8023c08:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8023c0a:	7cfb      	ldrb	r3, [r7, #19]
 8023c0c:	b29b      	uxth	r3, r3
 8023c0e:	e007      	b.n	8023c20 <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8023c10:	697b      	ldr	r3, [r7, #20]
 8023c12:	3304      	adds	r3, #4
 8023c14:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8023c16:	697a      	ldr	r2, [r7, #20]
 8023c18:	68fb      	ldr	r3, [r7, #12]
 8023c1a:	429a      	cmp	r2, r3
 8023c1c:	d3d3      	bcc.n	8023bc6 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8023c1e:	2380      	movs	r3, #128	; 0x80
}
 8023c20:	4618      	mov	r0, r3
 8023c22:	371c      	adds	r7, #28
 8023c24:	46bd      	mov	sp, r7
 8023c26:	bd90      	pop	{r4, r7, pc}
 8023c28:	08008000 	.word	0x08008000
 8023c2c:	0800c000 	.word	0x0800c000
 8023c30:	08007fff 	.word	0x08007fff

08023c34 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8023c34:	b580      	push	{r7, lr}
 8023c36:	b08c      	sub	sp, #48	; 0x30
 8023c38:	af00      	add	r7, sp, #0
 8023c3a:	4603      	mov	r3, r0
 8023c3c:	460a      	mov	r2, r1
 8023c3e:	80fb      	strh	r3, [r7, #6]
 8023c40:	4613      	mov	r3, r2
 8023c42:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8023c44:	2300      	movs	r3, #0
 8023c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8023c4a:	4b54      	ldr	r3, [pc, #336]	; (8023d9c <EE_PageTransfer+0x168>)
 8023c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8023c4e:	2300      	movs	r3, #0
 8023c50:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8023c52:	2300      	movs	r3, #0
 8023c54:	84bb      	strh	r3, [r7, #36]	; 0x24
 8023c56:	2300      	movs	r3, #0
 8023c58:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8023c5a:	2300      	movs	r3, #0
 8023c5c:	847b      	strh	r3, [r7, #34]	; 0x22
 8023c5e:	2300      	movs	r3, #0
 8023c60:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8023c62:	2300      	movs	r3, #0
 8023c64:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8023c66:	2000      	movs	r0, #0
 8023c68:	f7ff ff40 	bl	8023aec <EE_FindValidPage>
 8023c6c:	4603      	mov	r3, r0
 8023c6e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8023c70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023c72:	2b01      	cmp	r3, #1
 8023c74:	d104      	bne.n	8023c80 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8023c76:	4b49      	ldr	r3, [pc, #292]	; (8023d9c <EE_PageTransfer+0x168>)
 8023c78:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8023c7a:	2303      	movs	r3, #3
 8023c7c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8023c7e:	e009      	b.n	8023c94 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8023c80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023c82:	2b00      	cmp	r3, #0
 8023c84:	d104      	bne.n	8023c90 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8023c86:	4b46      	ldr	r3, [pc, #280]	; (8023da0 <EE_PageTransfer+0x16c>)
 8023c88:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8023c8a:	2302      	movs	r3, #2
 8023c8c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8023c8e:	e001      	b.n	8023c94 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8023c90:	23ab      	movs	r3, #171	; 0xab
 8023c92:	e07e      	b.n	8023d92 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8023c94:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023c98:	f04f 0300 	mov.w	r3, #0
 8023c9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023c9e:	2001      	movs	r0, #1
 8023ca0:	f7ee f8c4 	bl	8011e2c <HAL_FLASH_Program>
 8023ca4:	4603      	mov	r3, r0
 8023ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8023caa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023cae:	2b00      	cmp	r3, #0
 8023cb0:	d003      	beq.n	8023cba <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8023cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023cb6:	b29b      	uxth	r3, r3
 8023cb8:	e06b      	b.n	8023d92 <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8023cba:	88ba      	ldrh	r2, [r7, #4]
 8023cbc:	88fb      	ldrh	r3, [r7, #6]
 8023cbe:	4611      	mov	r1, r2
 8023cc0:	4618      	mov	r0, r3
 8023cc2:	f7ff ff59 	bl	8023b78 <EE_VerifyPageFullWriteVariable>
 8023cc6:	4603      	mov	r3, r0
 8023cc8:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8023cca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023ccc:	2b00      	cmp	r3, #0
 8023cce:	d001      	beq.n	8023cd4 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8023cd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023cd2:	e05e      	b.n	8023d92 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8023cd4:	2300      	movs	r3, #0
 8023cd6:	853b      	strh	r3, [r7, #40]	; 0x28
 8023cd8:	e027      	b.n	8023d2a <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8023cda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023cdc:	4a31      	ldr	r2, [pc, #196]	; (8023da4 <EE_PageTransfer+0x170>)
 8023cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023ce2:	88fa      	ldrh	r2, [r7, #6]
 8023ce4:	429a      	cmp	r2, r3
 8023ce6:	d01d      	beq.n	8023d24 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8023ce8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023cea:	4a2e      	ldr	r2, [pc, #184]	; (8023da4 <EE_PageTransfer+0x170>)
 8023cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023cf0:	492d      	ldr	r1, [pc, #180]	; (8023da8 <EE_PageTransfer+0x174>)
 8023cf2:	4618      	mov	r0, r3
 8023cf4:	f7ff fe3c 	bl	8023970 <EE_ReadVariable>
 8023cf8:	4603      	mov	r3, r0
 8023cfa:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8023cfc:	8c3b      	ldrh	r3, [r7, #32]
 8023cfe:	2b01      	cmp	r3, #1
 8023d00:	d010      	beq.n	8023d24 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8023d02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023d04:	4a27      	ldr	r2, [pc, #156]	; (8023da4 <EE_PageTransfer+0x170>)
 8023d06:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8023d0a:	4b27      	ldr	r3, [pc, #156]	; (8023da8 <EE_PageTransfer+0x174>)
 8023d0c:	881b      	ldrh	r3, [r3, #0]
 8023d0e:	4619      	mov	r1, r3
 8023d10:	4610      	mov	r0, r2
 8023d12:	f7ff ff31 	bl	8023b78 <EE_VerifyPageFullWriteVariable>
 8023d16:	4603      	mov	r3, r0
 8023d18:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8023d1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023d1c:	2b00      	cmp	r3, #0
 8023d1e:	d001      	beq.n	8023d24 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8023d20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023d22:	e036      	b.n	8023d92 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8023d24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023d26:	3301      	adds	r3, #1
 8023d28:	853b      	strh	r3, [r7, #40]	; 0x28
 8023d2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023d2c:	2b09      	cmp	r3, #9
 8023d2e:	d9d4      	bls.n	8023cda <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8023d30:	2300      	movs	r3, #0
 8023d32:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8023d34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8023d36:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8023d38:	2301      	movs	r3, #1
 8023d3a:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023d3c:	2302      	movs	r3, #2
 8023d3e:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8023d40:	f107 021c 	add.w	r2, r7, #28
 8023d44:	f107 0308 	add.w	r3, r7, #8
 8023d48:	4611      	mov	r1, r2
 8023d4a:	4618      	mov	r0, r3
 8023d4c:	f7ee fa0e 	bl	801216c <HAL_FLASHEx_Erase>
 8023d50:	4603      	mov	r3, r0
 8023d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8023d56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023d5a:	2b00      	cmp	r3, #0
 8023d5c:	d003      	beq.n	8023d66 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8023d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023d62:	b29b      	uxth	r3, r3
 8023d64:	e015      	b.n	8023d92 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8023d66:	f04f 0200 	mov.w	r2, #0
 8023d6a:	f04f 0300 	mov.w	r3, #0
 8023d6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023d70:	2001      	movs	r0, #1
 8023d72:	f7ee f85b 	bl	8011e2c <HAL_FLASH_Program>
 8023d76:	4603      	mov	r3, r0
 8023d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8023d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023d80:	2b00      	cmp	r3, #0
 8023d82:	d003      	beq.n	8023d8c <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8023d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023d88:	b29b      	uxth	r3, r3
 8023d8a:	e002      	b.n	8023d92 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8023d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023d90:	b29b      	uxth	r3, r3
}
 8023d92:	4618      	mov	r0, r3
 8023d94:	3730      	adds	r7, #48	; 0x30
 8023d96:	46bd      	mov	sp, r7
 8023d98:	bd80      	pop	{r7, pc}
 8023d9a:	bf00      	nop
 8023d9c:	08008000 	.word	0x08008000
 8023da0:	0800c000 	.word	0x0800c000
 8023da4:	20000014 	.word	0x20000014
 8023da8:	20004134 	.word	0x20004134

08023dac <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8023dac:	b580      	push	{r7, lr}
 8023dae:	b08a      	sub	sp, #40	; 0x28
 8023db0:	af00      	add	r7, sp, #0
 8023db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ethHandle->Instance==ETH)
 8023db4:	687b      	ldr	r3, [r7, #4]
 8023db6:	681b      	ldr	r3, [r3, #0]
 8023db8:	4a34      	ldr	r2, [pc, #208]	; (8023e8c <HAL_ETH_MspInit+0xe0>)
 8023dba:	4293      	cmp	r3, r2
 8023dbc:	d162      	bne.n	8023e84 <HAL_ETH_MspInit+0xd8>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8023dbe:	2300      	movs	r3, #0
 8023dc0:	613b      	str	r3, [r7, #16]
 8023dc2:	4a33      	ldr	r2, [pc, #204]	; (8023e90 <HAL_ETH_MspInit+0xe4>)
 8023dc4:	4b32      	ldr	r3, [pc, #200]	; (8023e90 <HAL_ETH_MspInit+0xe4>)
 8023dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8023dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8023dce:	4b30      	ldr	r3, [pc, #192]	; (8023e90 <HAL_ETH_MspInit+0xe4>)
 8023dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023dd6:	613b      	str	r3, [r7, #16]
 8023dd8:	693b      	ldr	r3, [r7, #16]
 8023dda:	2300      	movs	r3, #0
 8023ddc:	60fb      	str	r3, [r7, #12]
 8023dde:	4a2c      	ldr	r2, [pc, #176]	; (8023e90 <HAL_ETH_MspInit+0xe4>)
 8023de0:	4b2b      	ldr	r3, [pc, #172]	; (8023e90 <HAL_ETH_MspInit+0xe4>)
 8023de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023de4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8023de8:	6313      	str	r3, [r2, #48]	; 0x30
 8023dea:	4b29      	ldr	r3, [pc, #164]	; (8023e90 <HAL_ETH_MspInit+0xe4>)
 8023dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8023df2:	60fb      	str	r3, [r7, #12]
 8023df4:	68fb      	ldr	r3, [r7, #12]
 8023df6:	2300      	movs	r3, #0
 8023df8:	60bb      	str	r3, [r7, #8]
 8023dfa:	4a25      	ldr	r2, [pc, #148]	; (8023e90 <HAL_ETH_MspInit+0xe4>)
 8023dfc:	4b24      	ldr	r3, [pc, #144]	; (8023e90 <HAL_ETH_MspInit+0xe4>)
 8023dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8023e04:	6313      	str	r3, [r2, #48]	; 0x30
 8023e06:	4b22      	ldr	r3, [pc, #136]	; (8023e90 <HAL_ETH_MspInit+0xe4>)
 8023e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8023e0e:	60bb      	str	r3, [r7, #8]
 8023e10:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> ETH_RX_ER
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8023e12:	2332      	movs	r3, #50	; 0x32
 8023e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023e16:	2302      	movs	r3, #2
 8023e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023e1a:	2300      	movs	r3, #0
 8023e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023e1e:	2303      	movs	r3, #3
 8023e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8023e22:	230b      	movs	r3, #11
 8023e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023e26:	f107 0314 	add.w	r3, r7, #20
 8023e2a:	4619      	mov	r1, r3
 8023e2c:	4819      	ldr	r0, [pc, #100]	; (8023e94 <HAL_ETH_MspInit+0xe8>)
 8023e2e:	f7ee fabf 	bl	80123b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8023e32:	2386      	movs	r3, #134	; 0x86
 8023e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023e36:	2302      	movs	r3, #2
 8023e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023e3a:	2300      	movs	r3, #0
 8023e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023e3e:	2303      	movs	r3, #3
 8023e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8023e42:	230b      	movs	r3, #11
 8023e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023e46:	f107 0314 	add.w	r3, r7, #20
 8023e4a:	4619      	mov	r1, r3
 8023e4c:	4812      	ldr	r0, [pc, #72]	; (8023e98 <HAL_ETH_MspInit+0xec>)
 8023e4e:	f7ee faaf 	bl	80123b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8023e52:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8023e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023e58:	2302      	movs	r3, #2
 8023e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023e5c:	2300      	movs	r3, #0
 8023e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023e60:	2303      	movs	r3, #3
 8023e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8023e64:	230b      	movs	r3, #11
 8023e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023e68:	f107 0314 	add.w	r3, r7, #20
 8023e6c:	4619      	mov	r1, r3
 8023e6e:	480b      	ldr	r0, [pc, #44]	; (8023e9c <HAL_ETH_MspInit+0xf0>)
 8023e70:	f7ee fa9e 	bl	80123b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8023e74:	2200      	movs	r2, #0
 8023e76:	2105      	movs	r1, #5
 8023e78:	203d      	movs	r0, #61	; 0x3d
 8023e7a:	f7ec fbab 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8023e7e:	203d      	movs	r0, #61	; 0x3d
 8023e80:	f7ec fbc4 	bl	801060c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8023e84:	bf00      	nop
 8023e86:	3728      	adds	r7, #40	; 0x28
 8023e88:	46bd      	mov	sp, r7
 8023e8a:	bd80      	pop	{r7, pc}
 8023e8c:	40028000 	.word	0x40028000
 8023e90:	40023800 	.word	0x40023800
 8023e94:	40020800 	.word	0x40020800
 8023e98:	40020000 	.word	0x40020000
 8023e9c:	40020400 	.word	0x40020400

08023ea0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8023ea0:	b580      	push	{r7, lr}
 8023ea2:	b082      	sub	sp, #8
 8023ea4:	af00      	add	r7, sp, #0
 8023ea6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8023ea8:	4b04      	ldr	r3, [pc, #16]	; (8023ebc <HAL_ETH_RxCpltCallback+0x1c>)
 8023eaa:	681b      	ldr	r3, [r3, #0]
 8023eac:	4618      	mov	r0, r3
 8023eae:	f7f0 fd2b 	bl	8014908 <osSemaphoreRelease>
}
 8023eb2:	bf00      	nop
 8023eb4:	3708      	adds	r7, #8
 8023eb6:	46bd      	mov	sp, r7
 8023eb8:	bd80      	pop	{r7, pc}
 8023eba:	bf00      	nop
 8023ebc:	20004138 	.word	0x20004138

08023ec0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8023ec0:	b5b0      	push	{r4, r5, r7, lr}
 8023ec2:	b08a      	sub	sp, #40	; 0x28
 8023ec4:	af00      	add	r7, sp, #0
 8023ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8023ec8:	4b4e      	ldr	r3, [pc, #312]	; (8024004 <low_level_init+0x144>)
 8023eca:	4a4f      	ldr	r2, [pc, #316]	; (8024008 <low_level_init+0x148>)
 8023ecc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8023ece:	4b4d      	ldr	r3, [pc, #308]	; (8024004 <low_level_init+0x144>)
 8023ed0:	2201      	movs	r2, #1
 8023ed2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848I_PHY_ADDRESS;
 8023ed4:	4b4b      	ldr	r3, [pc, #300]	; (8024004 <low_level_init+0x144>)
 8023ed6:	2201      	movs	r2, #1
 8023ed8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8023eda:	2300      	movs	r3, #0
 8023edc:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x02;
 8023ee0:	2302      	movs	r3, #2
 8023ee2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0xA2;
 8023ee6:	23a2      	movs	r3, #162	; 0xa2
 8023ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x42;
 8023eec:	2342      	movs	r3, #66	; 0x42
 8023eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x50;
 8023ef2:	2350      	movs	r3, #80	; 0x50
 8023ef4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0xE4;
 8023ef8:	23e4      	movs	r3, #228	; 0xe4
 8023efa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 8023efe:	4a41      	ldr	r2, [pc, #260]	; (8024004 <low_level_init+0x144>)
 8023f00:	f107 0320 	add.w	r3, r7, #32
 8023f04:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8023f06:	4b3f      	ldr	r3, [pc, #252]	; (8024004 <low_level_init+0x144>)
 8023f08:	2201      	movs	r2, #1
 8023f0a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8023f0c:	4b3d      	ldr	r3, [pc, #244]	; (8024004 <low_level_init+0x144>)
 8023f0e:	2200      	movs	r2, #0
 8023f10:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8023f12:	4b3c      	ldr	r3, [pc, #240]	; (8024004 <low_level_init+0x144>)
 8023f14:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8023f18:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8023f1a:	483a      	ldr	r0, [pc, #232]	; (8024004 <low_level_init+0x144>)
 8023f1c:	f7ec ff76 	bl	8010e0c <HAL_ETH_Init>
 8023f20:	4603      	mov	r3, r0
 8023f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hal_eth_init_status == HAL_OK)
 8023f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023f2a:	2b00      	cmp	r3, #0
 8023f2c:	d108      	bne.n	8023f40 <low_level_init+0x80>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8023f2e:	687b      	ldr	r3, [r7, #4]
 8023f30:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8023f34:	f043 0304 	orr.w	r3, r3, #4
 8023f38:	b2da      	uxtb	r2, r3
 8023f3a:	687b      	ldr	r3, [r7, #4]
 8023f3c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8023f40:	2304      	movs	r3, #4
 8023f42:	4a32      	ldr	r2, [pc, #200]	; (802400c <low_level_init+0x14c>)
 8023f44:	4932      	ldr	r1, [pc, #200]	; (8024010 <low_level_init+0x150>)
 8023f46:	482f      	ldr	r0, [pc, #188]	; (8024004 <low_level_init+0x144>)
 8023f48:	f7ed f8fe 	bl	8011148 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8023f4c:	2304      	movs	r3, #4
 8023f4e:	4a31      	ldr	r2, [pc, #196]	; (8024014 <low_level_init+0x154>)
 8023f50:	4931      	ldr	r1, [pc, #196]	; (8024018 <low_level_init+0x158>)
 8023f52:	482c      	ldr	r0, [pc, #176]	; (8024004 <low_level_init+0x144>)
 8023f54:	f7ed f961 	bl	801121a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8023f58:	687b      	ldr	r3, [r7, #4]
 8023f5a:	2206      	movs	r2, #6
 8023f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8023f60:	4b28      	ldr	r3, [pc, #160]	; (8024004 <low_level_init+0x144>)
 8023f62:	695b      	ldr	r3, [r3, #20]
 8023f64:	781a      	ldrb	r2, [r3, #0]
 8023f66:	687b      	ldr	r3, [r7, #4]
 8023f68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8023f6c:	4b25      	ldr	r3, [pc, #148]	; (8024004 <low_level_init+0x144>)
 8023f6e:	695b      	ldr	r3, [r3, #20]
 8023f70:	785a      	ldrb	r2, [r3, #1]
 8023f72:	687b      	ldr	r3, [r7, #4]
 8023f74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8023f78:	4b22      	ldr	r3, [pc, #136]	; (8024004 <low_level_init+0x144>)
 8023f7a:	695b      	ldr	r3, [r3, #20]
 8023f7c:	789a      	ldrb	r2, [r3, #2]
 8023f7e:	687b      	ldr	r3, [r7, #4]
 8023f80:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8023f84:	4b1f      	ldr	r3, [pc, #124]	; (8024004 <low_level_init+0x144>)
 8023f86:	695b      	ldr	r3, [r3, #20]
 8023f88:	78da      	ldrb	r2, [r3, #3]
 8023f8a:	687b      	ldr	r3, [r7, #4]
 8023f8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8023f90:	4b1c      	ldr	r3, [pc, #112]	; (8024004 <low_level_init+0x144>)
 8023f92:	695b      	ldr	r3, [r3, #20]
 8023f94:	791a      	ldrb	r2, [r3, #4]
 8023f96:	687b      	ldr	r3, [r7, #4]
 8023f98:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8023f9c:	4b19      	ldr	r3, [pc, #100]	; (8024004 <low_level_init+0x144>)
 8023f9e:	695b      	ldr	r3, [r3, #20]
 8023fa0:	795a      	ldrb	r2, [r3, #5]
 8023fa2:	687b      	ldr	r3, [r7, #4]
 8023fa4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8023fa8:	687b      	ldr	r3, [r7, #4]
 8023faa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8023fae:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8023fb0:	687b      	ldr	r3, [r7, #4]
 8023fb2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8023fb6:	f043 030a 	orr.w	r3, r3, #10
 8023fba:	b2da      	uxtb	r2, r3
 8023fbc:	687b      	ldr	r3, [r7, #4]
 8023fbe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8023fc2:	2300      	movs	r3, #0
 8023fc4:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8023fc6:	f107 031c 	add.w	r3, r7, #28
 8023fca:	2101      	movs	r1, #1
 8023fcc:	4618      	mov	r0, r3
 8023fce:	f7f0 fc2d 	bl	801482c <osSemaphoreCreate>
 8023fd2:	4602      	mov	r2, r0
 8023fd4:	4b11      	ldr	r3, [pc, #68]	; (802401c <low_level_init+0x15c>)
 8023fd6:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8023fd8:	4b11      	ldr	r3, [pc, #68]	; (8024020 <low_level_init+0x160>)
 8023fda:	f107 0408 	add.w	r4, r7, #8
 8023fde:	461d      	mov	r5, r3
 8023fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023fe4:	682b      	ldr	r3, [r5, #0]
 8023fe6:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 8023fe8:	f107 0308 	add.w	r3, r7, #8
 8023fec:	6879      	ldr	r1, [r7, #4]
 8023fee:	4618      	mov	r0, r3
 8023ff0:	f7f0 fb4f 	bl	8014692 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8023ff4:	4803      	ldr	r0, [pc, #12]	; (8024004 <low_level_init+0x144>)
 8023ff6:	f7ed fc38 	bl	801186a <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8023ffa:	bf00      	nop
 8023ffc:	3728      	adds	r7, #40	; 0x28
 8023ffe:	46bd      	mov	sp, r7
 8024000:	bdb0      	pop	{r4, r5, r7, pc}
 8024002:	bf00      	nop
 8024004:	2000a530 	.word	0x2000a530
 8024008:	40028000 	.word	0x40028000
 802400c:	2000a578 	.word	0x2000a578
 8024010:	20008c60 	.word	0x20008c60
 8024014:	20008ce0 	.word	0x20008ce0
 8024018:	2000a4b0 	.word	0x2000a4b0
 802401c:	20004138 	.word	0x20004138
 8024020:	08028dcc 	.word	0x08028dcc

08024024 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8024024:	b580      	push	{r7, lr}
 8024026:	b08a      	sub	sp, #40	; 0x28
 8024028:	af00      	add	r7, sp, #0
 802402a:	6078      	str	r0, [r7, #4]
 802402c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 802402e:	4b4b      	ldr	r3, [pc, #300]	; (802415c <low_level_output+0x138>)
 8024030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024032:	689b      	ldr	r3, [r3, #8]
 8024034:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8024036:	2300      	movs	r3, #0
 8024038:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 802403a:	2300      	movs	r3, #0
 802403c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 802403e:	2300      	movs	r3, #0
 8024040:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8024042:	2300      	movs	r3, #0
 8024044:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8024046:	4b45      	ldr	r3, [pc, #276]	; (802415c <low_level_output+0x138>)
 8024048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802404a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 802404c:	2300      	movs	r3, #0
 802404e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8024050:	683b      	ldr	r3, [r7, #0]
 8024052:	623b      	str	r3, [r7, #32]
 8024054:	e05a      	b.n	802410c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8024056:	69bb      	ldr	r3, [r7, #24]
 8024058:	681b      	ldr	r3, [r3, #0]
 802405a:	2b00      	cmp	r3, #0
 802405c:	da03      	bge.n	8024066 <low_level_output+0x42>
      {
        errval = ERR_USE;
 802405e:	23f8      	movs	r3, #248	; 0xf8
 8024060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8024064:	e05c      	b.n	8024120 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8024066:	6a3b      	ldr	r3, [r7, #32]
 8024068:	895b      	ldrh	r3, [r3, #10]
 802406a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 802406c:	2300      	movs	r3, #0
 802406e:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8024070:	e02f      	b.n	80240d2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8024072:	69fa      	ldr	r2, [r7, #28]
 8024074:	693b      	ldr	r3, [r7, #16]
 8024076:	18d0      	adds	r0, r2, r3
 8024078:	6a3b      	ldr	r3, [r7, #32]
 802407a:	685a      	ldr	r2, [r3, #4]
 802407c:	68bb      	ldr	r3, [r7, #8]
 802407e:	18d1      	adds	r1, r2, r3
 8024080:	693b      	ldr	r3, [r7, #16]
 8024082:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8024086:	3304      	adds	r3, #4
 8024088:	461a      	mov	r2, r3
 802408a:	f002 fa1c 	bl	80264c6 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 802408e:	69bb      	ldr	r3, [r7, #24]
 8024090:	68db      	ldr	r3, [r3, #12]
 8024092:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8024094:	69bb      	ldr	r3, [r7, #24]
 8024096:	681b      	ldr	r3, [r3, #0]
 8024098:	2b00      	cmp	r3, #0
 802409a:	da03      	bge.n	80240a4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 802409c:	23f8      	movs	r3, #248	; 0xf8
 802409e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80240a2:	e03d      	b.n	8024120 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80240a4:	69bb      	ldr	r3, [r7, #24]
 80240a6:	689b      	ldr	r3, [r3, #8]
 80240a8:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80240aa:	693a      	ldr	r2, [r7, #16]
 80240ac:	68fb      	ldr	r3, [r7, #12]
 80240ae:	4413      	add	r3, r2
 80240b0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80240b4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80240b6:	68ba      	ldr	r2, [r7, #8]
 80240b8:	693b      	ldr	r3, [r7, #16]
 80240ba:	1ad3      	subs	r3, r2, r3
 80240bc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80240c0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80240c2:	697a      	ldr	r2, [r7, #20]
 80240c4:	693b      	ldr	r3, [r7, #16]
 80240c6:	1ad3      	subs	r3, r2, r3
 80240c8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80240cc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80240ce:	2300      	movs	r3, #0
 80240d0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80240d2:	68fa      	ldr	r2, [r7, #12]
 80240d4:	693b      	ldr	r3, [r7, #16]
 80240d6:	4413      	add	r3, r2
 80240d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80240dc:	4293      	cmp	r3, r2
 80240de:	d8c8      	bhi.n	8024072 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80240e0:	69fa      	ldr	r2, [r7, #28]
 80240e2:	693b      	ldr	r3, [r7, #16]
 80240e4:	18d0      	adds	r0, r2, r3
 80240e6:	6a3b      	ldr	r3, [r7, #32]
 80240e8:	685a      	ldr	r2, [r3, #4]
 80240ea:	68bb      	ldr	r3, [r7, #8]
 80240ec:	4413      	add	r3, r2
 80240ee:	68fa      	ldr	r2, [r7, #12]
 80240f0:	4619      	mov	r1, r3
 80240f2:	f002 f9e8 	bl	80264c6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80240f6:	693a      	ldr	r2, [r7, #16]
 80240f8:	68fb      	ldr	r3, [r7, #12]
 80240fa:	4413      	add	r3, r2
 80240fc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80240fe:	697a      	ldr	r2, [r7, #20]
 8024100:	68fb      	ldr	r3, [r7, #12]
 8024102:	4413      	add	r3, r2
 8024104:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8024106:	6a3b      	ldr	r3, [r7, #32]
 8024108:	681b      	ldr	r3, [r3, #0]
 802410a:	623b      	str	r3, [r7, #32]
 802410c:	6a3b      	ldr	r3, [r7, #32]
 802410e:	2b00      	cmp	r3, #0
 8024110:	d1a1      	bne.n	8024056 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8024112:	6979      	ldr	r1, [r7, #20]
 8024114:	4811      	ldr	r0, [pc, #68]	; (802415c <low_level_output+0x138>)
 8024116:	f7ed f8ed 	bl	80112f4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 802411a:	2300      	movs	r3, #0
 802411c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8024120:	4b0e      	ldr	r3, [pc, #56]	; (802415c <low_level_output+0x138>)
 8024122:	681b      	ldr	r3, [r3, #0]
 8024124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024128:	3314      	adds	r3, #20
 802412a:	681b      	ldr	r3, [r3, #0]
 802412c:	f003 0320 	and.w	r3, r3, #32
 8024130:	2b00      	cmp	r3, #0
 8024132:	d00d      	beq.n	8024150 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8024134:	4b09      	ldr	r3, [pc, #36]	; (802415c <low_level_output+0x138>)
 8024136:	681b      	ldr	r3, [r3, #0]
 8024138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802413c:	3314      	adds	r3, #20
 802413e:	2220      	movs	r2, #32
 8024140:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8024142:	4b06      	ldr	r3, [pc, #24]	; (802415c <low_level_output+0x138>)
 8024144:	681b      	ldr	r3, [r3, #0]
 8024146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802414a:	3304      	adds	r3, #4
 802414c:	2200      	movs	r2, #0
 802414e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8024150:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8024154:	4618      	mov	r0, r3
 8024156:	3728      	adds	r7, #40	; 0x28
 8024158:	46bd      	mov	sp, r7
 802415a:	bd80      	pop	{r7, pc}
 802415c:	2000a530 	.word	0x2000a530

08024160 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8024160:	b580      	push	{r7, lr}
 8024162:	b08c      	sub	sp, #48	; 0x30
 8024164:	af00      	add	r7, sp, #0
 8024166:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8024168:	2300      	movs	r3, #0
 802416a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 802416c:	2300      	movs	r3, #0
 802416e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8024170:	2300      	movs	r3, #0
 8024172:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8024174:	2300      	movs	r3, #0
 8024176:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8024178:	2300      	movs	r3, #0
 802417a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 802417c:	2300      	movs	r3, #0
 802417e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8024180:	2300      	movs	r3, #0
 8024182:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8024184:	484e      	ldr	r0, [pc, #312]	; (80242c0 <low_level_input+0x160>)
 8024186:	f7ed f99f 	bl	80114c8 <HAL_ETH_GetReceivedFrame_IT>
 802418a:	4603      	mov	r3, r0
 802418c:	2b00      	cmp	r3, #0
 802418e:	d001      	beq.n	8024194 <low_level_input+0x34>
    return NULL;
 8024190:	2300      	movs	r3, #0
 8024192:	e091      	b.n	80242b8 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8024194:	4b4a      	ldr	r3, [pc, #296]	; (80242c0 <low_level_input+0x160>)
 8024196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024198:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 802419a:	4b49      	ldr	r3, [pc, #292]	; (80242c0 <low_level_input+0x160>)
 802419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802419e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80241a0:	89fb      	ldrh	r3, [r7, #14]
 80241a2:	2b00      	cmp	r3, #0
 80241a4:	d006      	beq.n	80241b4 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80241a6:	89fb      	ldrh	r3, [r7, #14]
 80241a8:	2203      	movs	r2, #3
 80241aa:	4619      	mov	r1, r3
 80241ac:	2004      	movs	r0, #4
 80241ae:	f7f8 f9e9 	bl	801c584 <pbuf_alloc>
 80241b2:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80241b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80241b6:	2b00      	cmp	r3, #0
 80241b8:	d04b      	beq.n	8024252 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80241ba:	4b41      	ldr	r3, [pc, #260]	; (80242c0 <low_level_input+0x160>)
 80241bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80241be:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80241c0:	2300      	movs	r3, #0
 80241c2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80241c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80241c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80241c8:	e040      	b.n	802424c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80241ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241cc:	895b      	ldrh	r3, [r3, #10]
 80241ce:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80241d0:	2300      	movs	r3, #0
 80241d2:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80241d4:	e021      	b.n	802421a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80241d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241d8:	685a      	ldr	r2, [r3, #4]
 80241da:	69bb      	ldr	r3, [r7, #24]
 80241dc:	18d0      	adds	r0, r2, r3
 80241de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80241e0:	69fb      	ldr	r3, [r7, #28]
 80241e2:	18d1      	adds	r1, r2, r3
 80241e4:	69fb      	ldr	r3, [r7, #28]
 80241e6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80241ea:	3304      	adds	r3, #4
 80241ec:	461a      	mov	r2, r3
 80241ee:	f002 f96a 	bl	80264c6 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80241f2:	6a3b      	ldr	r3, [r7, #32]
 80241f4:	68db      	ldr	r3, [r3, #12]
 80241f6:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80241f8:	6a3b      	ldr	r3, [r7, #32]
 80241fa:	689b      	ldr	r3, [r3, #8]
 80241fc:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80241fe:	69fa      	ldr	r2, [r7, #28]
 8024200:	697b      	ldr	r3, [r7, #20]
 8024202:	4413      	add	r3, r2
 8024204:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8024208:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 802420a:	69ba      	ldr	r2, [r7, #24]
 802420c:	69fb      	ldr	r3, [r7, #28]
 802420e:	1ad3      	subs	r3, r2, r3
 8024210:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8024214:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8024216:	2300      	movs	r3, #0
 8024218:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 802421a:	697a      	ldr	r2, [r7, #20]
 802421c:	69fb      	ldr	r3, [r7, #28]
 802421e:	4413      	add	r3, r2
 8024220:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8024224:	4293      	cmp	r3, r2
 8024226:	d8d6      	bhi.n	80241d6 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8024228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802422a:	685a      	ldr	r2, [r3, #4]
 802422c:	69bb      	ldr	r3, [r7, #24]
 802422e:	18d0      	adds	r0, r2, r3
 8024230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024232:	69fb      	ldr	r3, [r7, #28]
 8024234:	4413      	add	r3, r2
 8024236:	697a      	ldr	r2, [r7, #20]
 8024238:	4619      	mov	r1, r3
 802423a:	f002 f944 	bl	80264c6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 802423e:	69fa      	ldr	r2, [r7, #28]
 8024240:	697b      	ldr	r3, [r7, #20]
 8024242:	4413      	add	r3, r2
 8024244:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8024246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024248:	681b      	ldr	r3, [r3, #0]
 802424a:	62bb      	str	r3, [r7, #40]	; 0x28
 802424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802424e:	2b00      	cmp	r3, #0
 8024250:	d1bb      	bne.n	80241ca <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8024252:	4b1b      	ldr	r3, [pc, #108]	; (80242c0 <low_level_input+0x160>)
 8024254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024256:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8024258:	2300      	movs	r3, #0
 802425a:	613b      	str	r3, [r7, #16]
 802425c:	e00b      	b.n	8024276 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 802425e:	6a3b      	ldr	r3, [r7, #32]
 8024260:	681b      	ldr	r3, [r3, #0]
 8024262:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8024266:	6a3b      	ldr	r3, [r7, #32]
 8024268:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 802426a:	6a3b      	ldr	r3, [r7, #32]
 802426c:	68db      	ldr	r3, [r3, #12]
 802426e:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8024270:	693b      	ldr	r3, [r7, #16]
 8024272:	3301      	adds	r3, #1
 8024274:	613b      	str	r3, [r7, #16]
 8024276:	4b12      	ldr	r3, [pc, #72]	; (80242c0 <low_level_input+0x160>)
 8024278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802427a:	693b      	ldr	r3, [r7, #16]
 802427c:	429a      	cmp	r2, r3
 802427e:	d8ee      	bhi.n	802425e <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8024280:	4b0f      	ldr	r3, [pc, #60]	; (80242c0 <low_level_input+0x160>)
 8024282:	2200      	movs	r2, #0
 8024284:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8024286:	4b0e      	ldr	r3, [pc, #56]	; (80242c0 <low_level_input+0x160>)
 8024288:	681b      	ldr	r3, [r3, #0]
 802428a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802428e:	3314      	adds	r3, #20
 8024290:	681b      	ldr	r3, [r3, #0]
 8024292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024296:	2b00      	cmp	r3, #0
 8024298:	d00d      	beq.n	80242b6 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 802429a:	4b09      	ldr	r3, [pc, #36]	; (80242c0 <low_level_input+0x160>)
 802429c:	681b      	ldr	r3, [r3, #0]
 802429e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80242a2:	3314      	adds	r3, #20
 80242a4:	2280      	movs	r2, #128	; 0x80
 80242a6:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80242a8:	4b05      	ldr	r3, [pc, #20]	; (80242c0 <low_level_input+0x160>)
 80242aa:	681b      	ldr	r3, [r3, #0]
 80242ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80242b0:	3308      	adds	r3, #8
 80242b2:	2200      	movs	r2, #0
 80242b4:	601a      	str	r2, [r3, #0]
  }
  return p;
 80242b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80242b8:	4618      	mov	r0, r3
 80242ba:	3730      	adds	r7, #48	; 0x30
 80242bc:	46bd      	mov	sp, r7
 80242be:	bd80      	pop	{r7, pc}
 80242c0:	2000a530 	.word	0x2000a530

080242c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 80242c4:	b580      	push	{r7, lr}
 80242c6:	b084      	sub	sp, #16
 80242c8:	af00      	add	r7, sp, #0
 80242ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80242cc:	687b      	ldr	r3, [r7, #4]
 80242ce:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80242d0:	4b0f      	ldr	r3, [pc, #60]	; (8024310 <ethernetif_input+0x4c>)
 80242d2:	681b      	ldr	r3, [r3, #0]
 80242d4:	f04f 31ff 	mov.w	r1, #4294967295
 80242d8:	4618      	mov	r0, r3
 80242da:	f7f0 fac5 	bl	8014868 <osSemaphoreWait>
 80242de:	4603      	mov	r3, r0
 80242e0:	2b00      	cmp	r3, #0
 80242e2:	d1f5      	bne.n	80242d0 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 80242e4:	68f8      	ldr	r0, [r7, #12]
 80242e6:	f7ff ff3b 	bl	8024160 <low_level_input>
 80242ea:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80242ec:	68bb      	ldr	r3, [r7, #8]
 80242ee:	2b00      	cmp	r3, #0
 80242f0:	d00a      	beq.n	8024308 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80242f2:	68fb      	ldr	r3, [r7, #12]
 80242f4:	691b      	ldr	r3, [r3, #16]
 80242f6:	68f9      	ldr	r1, [r7, #12]
 80242f8:	68b8      	ldr	r0, [r7, #8]
 80242fa:	4798      	blx	r3
 80242fc:	4603      	mov	r3, r0
 80242fe:	2b00      	cmp	r3, #0
 8024300:	d002      	beq.n	8024308 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8024302:	68b8      	ldr	r0, [r7, #8]
 8024304:	f7f8 fcb0 	bl	801cc68 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8024308:	68bb      	ldr	r3, [r7, #8]
 802430a:	2b00      	cmp	r3, #0
 802430c:	d1ea      	bne.n	80242e4 <ethernetif_input+0x20>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 802430e:	e7df      	b.n	80242d0 <ethernetif_input+0xc>
 8024310:	20004138 	.word	0x20004138

08024314 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8024314:	b580      	push	{r7, lr}
 8024316:	b082      	sub	sp, #8
 8024318:	af00      	add	r7, sp, #0
 802431a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 802431c:	687b      	ldr	r3, [r7, #4]
 802431e:	2b00      	cmp	r3, #0
 8024320:	d106      	bne.n	8024330 <ethernetif_init+0x1c>
 8024322:	4b0e      	ldr	r3, [pc, #56]	; (802435c <ethernetif_init+0x48>)
 8024324:	f240 2235 	movw	r2, #565	; 0x235
 8024328:	490d      	ldr	r1, [pc, #52]	; (8024360 <ethernetif_init+0x4c>)
 802432a:	480e      	ldr	r0, [pc, #56]	; (8024364 <ethernetif_init+0x50>)
 802432c:	f001 fbf8 	bl	8025b20 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8024330:	687b      	ldr	r3, [r7, #4]
 8024332:	2273      	movs	r2, #115	; 0x73
 8024334:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8024338:	687b      	ldr	r3, [r7, #4]
 802433a:	2274      	movs	r2, #116	; 0x74
 802433c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8024340:	687b      	ldr	r3, [r7, #4]
 8024342:	4a09      	ldr	r2, [pc, #36]	; (8024368 <ethernetif_init+0x54>)
 8024344:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8024346:	687b      	ldr	r3, [r7, #4]
 8024348:	4a08      	ldr	r2, [pc, #32]	; (802436c <ethernetif_init+0x58>)
 802434a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 802434c:	6878      	ldr	r0, [r7, #4]
 802434e:	f7ff fdb7 	bl	8023ec0 <low_level_init>

  return ERR_OK;
 8024352:	2300      	movs	r3, #0
}
 8024354:	4618      	mov	r0, r3
 8024356:	3708      	adds	r7, #8
 8024358:	46bd      	mov	sp, r7
 802435a:	bd80      	pop	{r7, pc}
 802435c:	08028de0 	.word	0x08028de0
 8024360:	08028df4 	.word	0x08028df4
 8024364:	08028e04 	.word	0x08028e04
 8024368:	08019c01 	.word	0x08019c01
 802436c:	08024025 	.word	0x08024025

08024370 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8024370:	b580      	push	{r7, lr}
 8024372:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8024374:	f7ec f834 	bl	80103e0 <HAL_GetTick>
 8024378:	4603      	mov	r3, r0
}
 802437a:	4618      	mov	r0, r3
 802437c:	bd80      	pop	{r7, pc}
	...

08024380 <NVIC_EnableIRQ>:
{
 8024380:	b480      	push	{r7}
 8024382:	b083      	sub	sp, #12
 8024384:	af00      	add	r7, sp, #0
 8024386:	4603      	mov	r3, r0
 8024388:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 802438a:	4909      	ldr	r1, [pc, #36]	; (80243b0 <NVIC_EnableIRQ+0x30>)
 802438c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024390:	095b      	lsrs	r3, r3, #5
 8024392:	79fa      	ldrb	r2, [r7, #7]
 8024394:	f002 021f 	and.w	r2, r2, #31
 8024398:	2001      	movs	r0, #1
 802439a:	fa00 f202 	lsl.w	r2, r0, r2
 802439e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80243a2:	bf00      	nop
 80243a4:	370c      	adds	r7, #12
 80243a6:	46bd      	mov	sp, r7
 80243a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243ac:	4770      	bx	lr
 80243ae:	bf00      	nop
 80243b0:	e000e100 	.word	0xe000e100

080243b4 <NVIC_SetPriority>:
{
 80243b4:	b480      	push	{r7}
 80243b6:	b083      	sub	sp, #12
 80243b8:	af00      	add	r7, sp, #0
 80243ba:	4603      	mov	r3, r0
 80243bc:	6039      	str	r1, [r7, #0]
 80243be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80243c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80243c4:	2b00      	cmp	r3, #0
 80243c6:	da0b      	bge.n	80243e0 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80243c8:	490d      	ldr	r1, [pc, #52]	; (8024400 <NVIC_SetPriority+0x4c>)
 80243ca:	79fb      	ldrb	r3, [r7, #7]
 80243cc:	f003 030f 	and.w	r3, r3, #15
 80243d0:	3b04      	subs	r3, #4
 80243d2:	683a      	ldr	r2, [r7, #0]
 80243d4:	b2d2      	uxtb	r2, r2
 80243d6:	0112      	lsls	r2, r2, #4
 80243d8:	b2d2      	uxtb	r2, r2
 80243da:	440b      	add	r3, r1
 80243dc:	761a      	strb	r2, [r3, #24]
}
 80243de:	e009      	b.n	80243f4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80243e0:	4908      	ldr	r1, [pc, #32]	; (8024404 <NVIC_SetPriority+0x50>)
 80243e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80243e6:	683a      	ldr	r2, [r7, #0]
 80243e8:	b2d2      	uxtb	r2, r2
 80243ea:	0112      	lsls	r2, r2, #4
 80243ec:	b2d2      	uxtb	r2, r2
 80243ee:	440b      	add	r3, r1
 80243f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80243f4:	bf00      	nop
 80243f6:	370c      	adds	r7, #12
 80243f8:	46bd      	mov	sp, r7
 80243fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243fe:	4770      	bx	lr
 8024400:	e000ed00 	.word	0xe000ed00
 8024404:	e000e100 	.word	0xe000e100

08024408 <configureTimerForRunTimeStats>:
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8024408:	b580      	push	{r7, lr}
 802440a:	af00      	add	r7, sp, #0
	NVIC_SetPriority(TIM7_IRQn, 0);
 802440c:	2100      	movs	r1, #0
 802440e:	2037      	movs	r0, #55	; 0x37
 8024410:	f7ff ffd0 	bl	80243b4 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM7_IRQn);
 8024414:	2037      	movs	r0, #55	; 0x37
 8024416:	f7ff ffb3 	bl	8024380 <NVIC_EnableIRQ>
	MX_TIM7_Init();
 802441a:	f001 f92f 	bl	802567c <MX_TIM7_Init>
	HAL_TIM_Base_Start_IT(&htim7);
 802441e:	4802      	ldr	r0, [pc, #8]	; (8024428 <configureTimerForRunTimeStats+0x20>)
 8024420:	f7ee fef3 	bl	801320a <HAL_TIM_Base_Start_IT>
}
 8024424:	bf00      	nop
 8024426:	bd80      	pop	{r7, pc}
 8024428:	2000be50 	.word	0x2000be50

0802442c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 802442c:	b480      	push	{r7}
 802442e:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8024430:	4b03      	ldr	r3, [pc, #12]	; (8024440 <getRunTimeCounterValue+0x14>)
 8024432:	681b      	ldr	r3, [r3, #0]
}
 8024434:	4618      	mov	r0, r3
 8024436:	46bd      	mov	sp, r7
 8024438:	f85d 7b04 	ldr.w	r7, [sp], #4
 802443c:	4770      	bx	lr
 802443e:	bf00      	nop
 8024440:	2000413c 	.word	0x2000413c

08024444 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8024444:	b5b0      	push	{r4, r5, r7, lr}
 8024446:	b090      	sub	sp, #64	; 0x40
 8024448:	af00      	add	r7, sp, #0

	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	osThreadDef(processTask, StartProcessTask, osPriorityNormal, 0, 1024);
 802444a:	4b22      	ldr	r3, [pc, #136]	; (80244d4 <MX_FREERTOS_Init+0x90>)
 802444c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8024450:	461d      	mov	r5, r3
 8024452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024456:	682b      	ldr	r3, [r5, #0]
 8024458:	6023      	str	r3, [r4, #0]
	processTaskHandle = osThreadCreate(osThread(processTask), NULL);
 802445a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802445e:	2100      	movs	r1, #0
 8024460:	4618      	mov	r0, r3
 8024462:	f7f0 f916 	bl	8014692 <osThreadCreate>
 8024466:	4602      	mov	r2, r0
 8024468:	4b1b      	ldr	r3, [pc, #108]	; (80244d8 <MX_FREERTOS_Init+0x94>)
 802446a:	601a      	str	r2, [r3, #0]

	osThreadDef(cleanerTask, StartHeapCleanerTask, osPriorityLow, 0, 256);
 802446c:	4b1b      	ldr	r3, [pc, #108]	; (80244dc <MX_FREERTOS_Init+0x98>)
 802446e:	f107 0418 	add.w	r4, r7, #24
 8024472:	461d      	mov	r5, r3
 8024474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024478:	682b      	ldr	r3, [r5, #0]
 802447a:	6023      	str	r3, [r4, #0]
	heapCleanerHandle = osThreadCreate(osThread(cleanerTask), NULL);
 802447c:	f107 0318 	add.w	r3, r7, #24
 8024480:	2100      	movs	r1, #0
 8024482:	4618      	mov	r0, r3
 8024484:	f7f0 f905 	bl	8014692 <osThreadCreate>
 8024488:	4602      	mov	r2, r0
 802448a:	4b15      	ldr	r3, [pc, #84]	; (80244e0 <MX_FREERTOS_Init+0x9c>)
 802448c:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_TIMERS */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 802448e:	4b15      	ldr	r3, [pc, #84]	; (80244e4 <MX_FREERTOS_Init+0xa0>)
 8024490:	1d3c      	adds	r4, r7, #4
 8024492:	461d      	mov	r5, r3
 8024494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024498:	682b      	ldr	r3, [r5, #0]
 802449a:	6023      	str	r3, [r4, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 802449c:	1d3b      	adds	r3, r7, #4
 802449e:	2100      	movs	r1, #0
 80244a0:	4618      	mov	r0, r3
 80244a2:	f7f0 f8f6 	bl	8014692 <osThreadCreate>
 80244a6:	4602      	mov	r2, r0
 80244a8:	4b0f      	ldr	r3, [pc, #60]	; (80244e8 <MX_FREERTOS_Init+0xa4>)
 80244aa:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */

	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_QUEUES */
	frames_queue = xQueueCreate(16, sizeof(uint16_t));
 80244ac:	2200      	movs	r2, #0
 80244ae:	2102      	movs	r1, #2
 80244b0:	2010      	movs	r0, #16
 80244b2:	f7f1 f86b 	bl	801558c <xQueueGenericCreate>
 80244b6:	4602      	mov	r2, r0
 80244b8:	4b0c      	ldr	r3, [pc, #48]	; (80244ec <MX_FREERTOS_Init+0xa8>)
 80244ba:	601a      	str	r2, [r3, #0]
	cleaner_queue = xQueueCreate(16, sizeof(uint8_t*));
 80244bc:	2200      	movs	r2, #0
 80244be:	2104      	movs	r1, #4
 80244c0:	2010      	movs	r0, #16
 80244c2:	f7f1 f863 	bl	801558c <xQueueGenericCreate>
 80244c6:	4602      	mov	r2, r0
 80244c8:	4b09      	ldr	r3, [pc, #36]	; (80244f0 <MX_FREERTOS_Init+0xac>)
 80244ca:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */
}
 80244cc:	bf00      	nop
 80244ce:	3740      	adds	r7, #64	; 0x40
 80244d0:	46bd      	mov	sp, r7
 80244d2:	bdb0      	pop	{r4, r5, r7, pc}
 80244d4:	08028e38 	.word	0x08028e38
 80244d8:	2000bd58 	.word	0x2000bd58
 80244dc:	08028e58 	.word	0x08028e58
 80244e0:	2000bd50 	.word	0x2000bd50
 80244e4:	08028e78 	.word	0x08028e78
 80244e8:	2000bd48 	.word	0x2000bd48
 80244ec:	2000bd4c 	.word	0x2000bd4c
 80244f0:	2000bd5c 	.word	0x2000bd5c

080244f4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 80244f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80244f6:	b091      	sub	sp, #68	; 0x44
 80244f8:	af02      	add	r7, sp, #8
 80244fa:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 80244fc:	f000 f998 	bl	8024830 <MX_LWIP_Init>

	/* USER CODE BEGIN StartDefaultTask */
	printf("lwIP init completed.\n");
 8024500:	4837      	ldr	r0, [pc, #220]	; (80245e0 <StartDefaultTask+0xec>)
 8024502:	f001 fb57 	bl	8025bb4 <puts>
	struct netconn *conn;
	err_t err;
	conn = netconn_new(NETCONN_TCP);
 8024506:	2200      	movs	r2, #0
 8024508:	2100      	movs	r1, #0
 802450a:	2010      	movs	r0, #16
 802450c:	f7f2 fd42 	bl	8016f94 <netconn_new_with_proto_and_callback>
 8024510:	6378      	str	r0, [r7, #52]	; 0x34
	if (conn != NULL) {
 8024512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024514:	2b00      	cmp	r3, #0
 8024516:	d028      	beq.n	802456a <StartDefaultTask+0x76>
		err = netconn_bind(conn, IP_ADDR_ANY, 80);
 8024518:	2250      	movs	r2, #80	; 0x50
 802451a:	4932      	ldr	r1, [pc, #200]	; (80245e4 <StartDefaultTask+0xf0>)
 802451c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802451e:	f7f2 fdd9 	bl	80170d4 <netconn_bind>
 8024522:	4603      	mov	r3, r0
 8024524:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (err == ERR_OK) {
 8024528:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 802452c:	2b00      	cmp	r3, #0
 802452e:	d113      	bne.n	8024558 <StartDefaultTask+0x64>
			netconn_listen(conn);
 8024530:	21ff      	movs	r1, #255	; 0xff
 8024532:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024534:	f7f2 fe06 	bl	8017144 <netconn_listen_with_backlog>
			sys_thread_new("web_server_thread", web_server_thread, (void*) conn,
 8024538:	2301      	movs	r3, #1
 802453a:	9300      	str	r3, [sp, #0]
 802453c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024542:	4929      	ldr	r1, [pc, #164]	; (80245e8 <StartDefaultTask+0xf4>)
 8024544:	4829      	ldr	r0, [pc, #164]	; (80245ec <StartDefaultTask+0xf8>)
 8024546:	f7fe fea9 	bl	802329c <sys_thread_new>
			DEFAULT_THREAD_STACKSIZE / 4, osPriorityAboveNormal);
			printf("Binding ... OK\n");
 802454a:	4829      	ldr	r0, [pc, #164]	; (80245f0 <StartDefaultTask+0xfc>)
 802454c:	f001 fb32 	bl	8025bb4 <puts>
			osDelay(1);
 8024550:	2001      	movs	r0, #1
 8024552:	f7f0 f8c5 	bl	80146e0 <osDelay>
 8024556:	e008      	b.n	802456a <StartDefaultTask+0x76>
		} else {
			netconn_delete(conn);
 8024558:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802455a:	f7f2 fd95 	bl	8017088 <netconn_delete>
			printf("Binding ... Err\n");
 802455e:	4825      	ldr	r0, [pc, #148]	; (80245f4 <StartDefaultTask+0x100>)
 8024560:	f001 fb28 	bl	8025bb4 <puts>
			osDelay(1);
 8024564:	2001      	movs	r0, #1
 8024566:	f7f0 f8bb 	bl	80146e0 <osDelay>
		}
	}

	uint8_t data[] = { 0x32, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x1A, 0x00,
 802456a:	4b23      	ldr	r3, [pc, #140]	; (80245f8 <StartDefaultTask+0x104>)
 802456c:	f107 0408 	add.w	r4, r7, #8
 8024570:	461d      	mov	r5, r3
 8024572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802457a:	682b      	ldr	r3, [r5, #0]
 802457c:	8023      	strh	r3, [r4, #0]
			0x04, 0x02, 0x12, 0x0A, 0x10, 0x02, 0x00, 0x01, 0x00, 0x82, 0x00,
			0x00, 0x00, 0x12, 0x0A, 0x10, 0x02, 0x00, 0x01, 0x00, 0x00, 0x81,
			0x00, 0x00, 0x00 };
	uint8_t * request_data;
	request_data = (uint8_t*) pvPortMalloc(sizeof(data));
 802457e:	2022      	movs	r0, #34	; 0x22
 8024580:	f7f0 fdc6 	bl	8015110 <pvPortMalloc>
 8024584:	62f8      	str	r0, [r7, #44]	; 0x2c
	memcpy(request_data, data, sizeof(data));
 8024586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024588:	f107 0408 	add.w	r4, r7, #8
 802458c:	469e      	mov	lr, r3
 802458e:	f104 0c20 	add.w	ip, r4, #32
 8024592:	4675      	mov	r5, lr
 8024594:	4626      	mov	r6, r4
 8024596:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8024598:	6028      	str	r0, [r5, #0]
 802459a:	6069      	str	r1, [r5, #4]
 802459c:	60aa      	str	r2, [r5, #8]
 802459e:	60eb      	str	r3, [r5, #12]
 80245a0:	3410      	adds	r4, #16
 80245a2:	f10e 0e10 	add.w	lr, lr, #16
 80245a6:	4564      	cmp	r4, ip
 80245a8:	d1f3      	bne.n	8024592 <StartDefaultTask+0x9e>
 80245aa:	4672      	mov	r2, lr
 80245ac:	4623      	mov	r3, r4
 80245ae:	881b      	ldrh	r3, [r3, #0]
 80245b0:	8013      	strh	r3, [r2, #0]
	hprot.data_len = sizeof(data);
 80245b2:	4b12      	ldr	r3, [pc, #72]	; (80245fc <StartDefaultTask+0x108>)
 80245b4:	2222      	movs	r2, #34	; 0x22
 80245b6:	731a      	strb	r2, [r3, #12]
	hprot.data_ptr = request_data;
 80245b8:	4a10      	ldr	r2, [pc, #64]	; (80245fc <StartDefaultTask+0x108>)
 80245ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245bc:	6093      	str	r3, [r2, #8]
	/* Infinite loop */
	for (;;) {
		osDelay(5000);
 80245be:	f241 3088 	movw	r0, #5000	; 0x1388
 80245c2:	f7f0 f88d 	bl	80146e0 <osDelay>
		LogText(SUB_SYS_LOG, LOG_LEV_INFO, "Test data is sent \r\n");
 80245c6:	4a0e      	ldr	r2, [pc, #56]	; (8024600 <StartDefaultTask+0x10c>)
 80245c8:	2103      	movs	r1, #3
 80245ca:	2004      	movs	r0, #4
 80245cc:	f000 f8c2 	bl	8024754 <LogText__>

		hprot.have_data_to_send = 1U;
 80245d0:	4b0a      	ldr	r3, [pc, #40]	; (80245fc <StartDefaultTask+0x108>)
 80245d2:	2201      	movs	r2, #1
 80245d4:	709a      	strb	r2, [r3, #2]
		osDelay(30000);
 80245d6:	f247 5030 	movw	r0, #30000	; 0x7530
 80245da:	f7f0 f881 	bl	80146e0 <osDelay>
		osDelay(5000);
 80245de:	e7ee      	b.n	80245be <StartDefaultTask+0xca>
 80245e0:	08028e8c 	.word	0x08028e8c
 80245e4:	0802b34c 	.word	0x0802b34c
 80245e8:	080260f1 	.word	0x080260f1
 80245ec:	08028ea4 	.word	0x08028ea4
 80245f0:	08028eb8 	.word	0x08028eb8
 80245f4:	08028ec8 	.word	0x08028ec8
 80245f8:	08028ef0 	.word	0x08028ef0
 80245fc:	2000bdc8 	.word	0x2000bdc8
 8024600:	08028ed8 	.word	0x08028ed8

08024604 <StartHeapCleanerTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
//---------------------------------------------------------------
void StartHeapCleanerTask(void const * argument) {
 8024604:	b580      	push	{r7, lr}
 8024606:	b084      	sub	sp, #16
 8024608:	af00      	add	r7, sp, #0
 802460a:	6078      	str	r0, [r7, #4]
	uint8_t * heap_ptr;
	for (;;) {
		xQueueReceive(cleaner_queue, &heap_ptr, portMAX_DELAY);
 802460c:	4b06      	ldr	r3, [pc, #24]	; (8024628 <StartHeapCleanerTask+0x24>)
 802460e:	6818      	ldr	r0, [r3, #0]
 8024610:	f107 010c 	add.w	r1, r7, #12
 8024614:	2300      	movs	r3, #0
 8024616:	f04f 32ff 	mov.w	r2, #4294967295
 802461a:	f7f1 fa5d 	bl	8015ad8 <xQueueGenericReceive>
		vPortFree(heap_ptr);
 802461e:	68fb      	ldr	r3, [r7, #12]
 8024620:	4618      	mov	r0, r3
 8024622:	f7f0 fe37 	bl	8015294 <vPortFree>
		xQueueReceive(cleaner_queue, &heap_ptr, portMAX_DELAY);
 8024626:	e7f1      	b.n	802460c <StartHeapCleanerTask+0x8>
 8024628:	2000bd5c 	.word	0x2000bd5c

0802462c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 802462c:	b580      	push	{r7, lr}
 802462e:	b08c      	sub	sp, #48	; 0x30
 8024630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024632:	f107 031c 	add.w	r3, r7, #28
 8024636:	2200      	movs	r2, #0
 8024638:	601a      	str	r2, [r3, #0]
 802463a:	605a      	str	r2, [r3, #4]
 802463c:	609a      	str	r2, [r3, #8]
 802463e:	60da      	str	r2, [r3, #12]
 8024640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8024642:	2300      	movs	r3, #0
 8024644:	61bb      	str	r3, [r7, #24]
 8024646:	4a35      	ldr	r2, [pc, #212]	; (802471c <MX_GPIO_Init+0xf0>)
 8024648:	4b34      	ldr	r3, [pc, #208]	; (802471c <MX_GPIO_Init+0xf0>)
 802464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802464c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024650:	6313      	str	r3, [r2, #48]	; 0x30
 8024652:	4b32      	ldr	r3, [pc, #200]	; (802471c <MX_GPIO_Init+0xf0>)
 8024654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802465a:	61bb      	str	r3, [r7, #24]
 802465c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802465e:	2300      	movs	r3, #0
 8024660:	617b      	str	r3, [r7, #20]
 8024662:	4a2e      	ldr	r2, [pc, #184]	; (802471c <MX_GPIO_Init+0xf0>)
 8024664:	4b2d      	ldr	r3, [pc, #180]	; (802471c <MX_GPIO_Init+0xf0>)
 8024666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024668:	f043 0304 	orr.w	r3, r3, #4
 802466c:	6313      	str	r3, [r2, #48]	; 0x30
 802466e:	4b2b      	ldr	r3, [pc, #172]	; (802471c <MX_GPIO_Init+0xf0>)
 8024670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024672:	f003 0304 	and.w	r3, r3, #4
 8024676:	617b      	str	r3, [r7, #20]
 8024678:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802467a:	2300      	movs	r3, #0
 802467c:	613b      	str	r3, [r7, #16]
 802467e:	4a27      	ldr	r2, [pc, #156]	; (802471c <MX_GPIO_Init+0xf0>)
 8024680:	4b26      	ldr	r3, [pc, #152]	; (802471c <MX_GPIO_Init+0xf0>)
 8024682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024684:	f043 0301 	orr.w	r3, r3, #1
 8024688:	6313      	str	r3, [r2, #48]	; 0x30
 802468a:	4b24      	ldr	r3, [pc, #144]	; (802471c <MX_GPIO_Init+0xf0>)
 802468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802468e:	f003 0301 	and.w	r3, r3, #1
 8024692:	613b      	str	r3, [r7, #16]
 8024694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8024696:	2300      	movs	r3, #0
 8024698:	60fb      	str	r3, [r7, #12]
 802469a:	4a20      	ldr	r2, [pc, #128]	; (802471c <MX_GPIO_Init+0xf0>)
 802469c:	4b1f      	ldr	r3, [pc, #124]	; (802471c <MX_GPIO_Init+0xf0>)
 802469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80246a0:	f043 0310 	orr.w	r3, r3, #16
 80246a4:	6313      	str	r3, [r2, #48]	; 0x30
 80246a6:	4b1d      	ldr	r3, [pc, #116]	; (802471c <MX_GPIO_Init+0xf0>)
 80246a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80246aa:	f003 0310 	and.w	r3, r3, #16
 80246ae:	60fb      	str	r3, [r7, #12]
 80246b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80246b2:	2300      	movs	r3, #0
 80246b4:	60bb      	str	r3, [r7, #8]
 80246b6:	4a19      	ldr	r2, [pc, #100]	; (802471c <MX_GPIO_Init+0xf0>)
 80246b8:	4b18      	ldr	r3, [pc, #96]	; (802471c <MX_GPIO_Init+0xf0>)
 80246ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80246bc:	f043 0302 	orr.w	r3, r3, #2
 80246c0:	6313      	str	r3, [r2, #48]	; 0x30
 80246c2:	4b16      	ldr	r3, [pc, #88]	; (802471c <MX_GPIO_Init+0xf0>)
 80246c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80246c6:	f003 0302 	and.w	r3, r3, #2
 80246ca:	60bb      	str	r3, [r7, #8]
 80246cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80246ce:	2300      	movs	r3, #0
 80246d0:	607b      	str	r3, [r7, #4]
 80246d2:	4a12      	ldr	r2, [pc, #72]	; (802471c <MX_GPIO_Init+0xf0>)
 80246d4:	4b11      	ldr	r3, [pc, #68]	; (802471c <MX_GPIO_Init+0xf0>)
 80246d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80246d8:	f043 0308 	orr.w	r3, r3, #8
 80246dc:	6313      	str	r3, [r2, #48]	; 0x30
 80246de:	4b0f      	ldr	r3, [pc, #60]	; (802471c <MX_GPIO_Init+0xf0>)
 80246e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80246e2:	f003 0308 	and.w	r3, r3, #8
 80246e6:	607b      	str	r3, [r7, #4]
 80246e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin, GPIO_PIN_RESET);
 80246ea:	2200      	movs	r2, #0
 80246ec:	f240 6101 	movw	r1, #1537	; 0x601
 80246f0:	480b      	ldr	r0, [pc, #44]	; (8024720 <MX_GPIO_Init+0xf4>)
 80246f2:	f7ee f8f3 	bl	80128dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin;
 80246f6:	f240 6301 	movw	r3, #1537	; 0x601
 80246fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80246fc:	2301      	movs	r3, #1
 80246fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024700:	2300      	movs	r3, #0
 8024702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024704:	2300      	movs	r3, #0
 8024706:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8024708:	f107 031c 	add.w	r3, r7, #28
 802470c:	4619      	mov	r1, r3
 802470e:	4804      	ldr	r0, [pc, #16]	; (8024720 <MX_GPIO_Init+0xf4>)
 8024710:	f7ed fe4e 	bl	80123b0 <HAL_GPIO_Init>

}
 8024714:	bf00      	nop
 8024716:	3730      	adds	r7, #48	; 0x30
 8024718:	46bd      	mov	sp, r7
 802471a:	bd80      	pop	{r7, pc}
 802471c:	40023800 	.word	0x40023800
 8024720:	40021000 	.word	0x40021000

08024724 <LogInit>:

static char* txt_lev[NUM_LOG_LEV - 1] = { "OFF", "ERR", "WAR", "INF", };

static char* txt_sys[NUM_OF_SUB_SYS] = { "MEM", "WEB", "458", "TCP", "LOG" };

void LogInit(UART_HandleTypeDef * log_if) {
 8024724:	b490      	push	{r4, r7}
 8024726:	b082      	sub	sp, #8
 8024728:	af00      	add	r7, sp, #0
 802472a:	6078      	str	r0, [r7, #4]
	hlog.interface = log_if;
 802472c:	4a08      	ldr	r2, [pc, #32]	; (8024750 <LogInit+0x2c>)
 802472e:	687b      	ldr	r3, [r7, #4]
 8024730:	6013      	str	r3, [r2, #0]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 8024732:	2400      	movs	r4, #0
 8024734:	e004      	b.n	8024740 <LogInit+0x1c>
		hlog.levels[i] = LOG_LEV_ALL;
 8024736:	4b06      	ldr	r3, [pc, #24]	; (8024750 <LogInit+0x2c>)
 8024738:	4423      	add	r3, r4
 802473a:	2204      	movs	r2, #4
 802473c:	711a      	strb	r2, [r3, #4]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 802473e:	3401      	adds	r4, #1
 8024740:	2c04      	cmp	r4, #4
 8024742:	ddf8      	ble.n	8024736 <LogInit+0x12>
	}
}
 8024744:	bf00      	nop
 8024746:	3708      	adds	r7, #8
 8024748:	46bd      	mov	sp, r7
 802474a:	bc90      	pop	{r4, r7}
 802474c:	4770      	bx	lr
 802474e:	bf00      	nop
 8024750:	2000bd60 	.word	0x2000bd60

08024754 <LogText__>:

void LogText__(log_sub_sys sys, log_level level, char *msg) {
 8024754:	b580      	push	{r7, lr}
 8024756:	b084      	sub	sp, #16
 8024758:	af00      	add	r7, sp, #0
 802475a:	4603      	mov	r3, r0
 802475c:	603a      	str	r2, [r7, #0]
 802475e:	71fb      	strb	r3, [r7, #7]
 8024760:	460b      	mov	r3, r1
 8024762:	71bb      	strb	r3, [r7, #6]
	if (level <= hlog.levels[sys]) {
 8024764:	79fb      	ldrb	r3, [r7, #7]
 8024766:	4a2d      	ldr	r2, [pc, #180]	; (802481c <LogText__+0xc8>)
 8024768:	4413      	add	r3, r2
 802476a:	791b      	ldrb	r3, [r3, #4]
 802476c:	79ba      	ldrb	r2, [r7, #6]
 802476e:	429a      	cmp	r2, r3
 8024770:	d850      	bhi.n	8024814 <LogText__+0xc0>
		while (hlog.interface->gState != HAL_UART_STATE_READY) {
 8024772:	e002      	b.n	802477a <LogText__+0x26>
			osDelay(1);
 8024774:	2001      	movs	r0, #1
 8024776:	f7ef ffb3 	bl	80146e0 <osDelay>
		while (hlog.interface->gState != HAL_UART_STATE_READY) {
 802477a:	4b28      	ldr	r3, [pc, #160]	; (802481c <LogText__+0xc8>)
 802477c:	681b      	ldr	r3, [r3, #0]
 802477e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8024782:	b2db      	uxtb	r3, r3
 8024784:	2b20      	cmp	r3, #32
 8024786:	d1f5      	bne.n	8024774 <LogText__+0x20>
		}
		uint len = 0;
 8024788:	2300      	movs	r3, #0
 802478a:	60fb      	str	r3, [r7, #12]
		char * ptr = msg;
 802478c:	683b      	ldr	r3, [r7, #0]
 802478e:	60bb      	str	r3, [r7, #8]
		while (*ptr++) {
 8024790:	e002      	b.n	8024798 <LogText__+0x44>
			len++;
 8024792:	68fb      	ldr	r3, [r7, #12]
 8024794:	3301      	adds	r3, #1
 8024796:	60fb      	str	r3, [r7, #12]
		while (*ptr++) {
 8024798:	68bb      	ldr	r3, [r7, #8]
 802479a:	1c5a      	adds	r2, r3, #1
 802479c:	60ba      	str	r2, [r7, #8]
 802479e:	781b      	ldrb	r3, [r3, #0]
 80247a0:	2b00      	cmp	r3, #0
 80247a2:	d1f6      	bne.n	8024792 <LogText__+0x3e>
		}
		ptr = (char*) pvPortMalloc((size_t) (len + 10));
 80247a4:	68fb      	ldr	r3, [r7, #12]
 80247a6:	330a      	adds	r3, #10
 80247a8:	4618      	mov	r0, r3
 80247aa:	f7f0 fcb1 	bl	8015110 <pvPortMalloc>
 80247ae:	60b8      	str	r0, [r7, #8]
		if (ptr != NULL) {
 80247b0:	68bb      	ldr	r3, [r7, #8]
 80247b2:	2b00      	cmp	r3, #0
 80247b4:	d02e      	beq.n	8024814 <LogText__+0xc0>
			strcpy(ptr, txt_sys[sys]);
 80247b6:	79fb      	ldrb	r3, [r7, #7]
 80247b8:	4a19      	ldr	r2, [pc, #100]	; (8024820 <LogText__+0xcc>)
 80247ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80247be:	4619      	mov	r1, r3
 80247c0:	68b8      	ldr	r0, [r7, #8]
 80247c2:	f001 fe93 	bl	80264ec <strcpy>
			strcpy(ptr + 3, "_");
 80247c6:	68bb      	ldr	r3, [r7, #8]
 80247c8:	3303      	adds	r3, #3
 80247ca:	4916      	ldr	r1, [pc, #88]	; (8024824 <LogText__+0xd0>)
 80247cc:	461a      	mov	r2, r3
 80247ce:	460b      	mov	r3, r1
 80247d0:	881b      	ldrh	r3, [r3, #0]
 80247d2:	8013      	strh	r3, [r2, #0]
			strcpy(ptr + 4, txt_lev[level]);
 80247d4:	68bb      	ldr	r3, [r7, #8]
 80247d6:	1d18      	adds	r0, r3, #4
 80247d8:	79bb      	ldrb	r3, [r7, #6]
 80247da:	4a13      	ldr	r2, [pc, #76]	; (8024828 <LogText__+0xd4>)
 80247dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80247e0:	4619      	mov	r1, r3
 80247e2:	f001 fe83 	bl	80264ec <strcpy>
			strcpy(ptr + 7, ":");
 80247e6:	68bb      	ldr	r3, [r7, #8]
 80247e8:	3307      	adds	r3, #7
 80247ea:	4910      	ldr	r1, [pc, #64]	; (802482c <LogText__+0xd8>)
 80247ec:	461a      	mov	r2, r3
 80247ee:	460b      	mov	r3, r1
 80247f0:	881b      	ldrh	r3, [r3, #0]
 80247f2:	8013      	strh	r3, [r2, #0]
			strcpy(ptr + 8, msg);
 80247f4:	68bb      	ldr	r3, [r7, #8]
 80247f6:	3308      	adds	r3, #8
 80247f8:	6839      	ldr	r1, [r7, #0]
 80247fa:	4618      	mov	r0, r3
 80247fc:	f001 fe76 	bl	80264ec <strcpy>
			HAL_UART_Transmit_DMA(hlog.interface, (uint8_t*) ptr, len + 8);
 8024800:	4b06      	ldr	r3, [pc, #24]	; (802481c <LogText__+0xc8>)
 8024802:	6818      	ldr	r0, [r3, #0]
 8024804:	68fb      	ldr	r3, [r7, #12]
 8024806:	b29b      	uxth	r3, r3
 8024808:	3308      	adds	r3, #8
 802480a:	b29b      	uxth	r3, r3
 802480c:	461a      	mov	r2, r3
 802480e:	68b9      	ldr	r1, [r7, #8]
 8024810:	f7ef f9b6 	bl	8013b80 <HAL_UART_Transmit_DMA>

		}
	}
}
 8024814:	bf00      	nop
 8024816:	3710      	adds	r7, #16
 8024818:	46bd      	mov	sp, r7
 802481a:	bd80      	pop	{r7, pc}
 802481c:	2000bd60 	.word	0x2000bd60
 8024820:	20000038 	.word	0x20000038
 8024824:	08028f38 	.word	0x08028f38
 8024828:	20000028 	.word	0x20000028
 802482c:	08028f3c 	.word	0x08028f3c

08024830 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8024830:	b580      	push	{r7, lr}
 8024832:	b084      	sub	sp, #16
 8024834:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8024836:	4b8b      	ldr	r3, [pc, #556]	; (8024a64 <MX_LWIP_Init+0x234>)
 8024838:	22c0      	movs	r2, #192	; 0xc0
 802483a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 802483c:	4b89      	ldr	r3, [pc, #548]	; (8024a64 <MX_LWIP_Init+0x234>)
 802483e:	22a8      	movs	r2, #168	; 0xa8
 8024840:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 4;
 8024842:	4b88      	ldr	r3, [pc, #544]	; (8024a64 <MX_LWIP_Init+0x234>)
 8024844:	2204      	movs	r2, #4
 8024846:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 253;
 8024848:	4b86      	ldr	r3, [pc, #536]	; (8024a64 <MX_LWIP_Init+0x234>)
 802484a:	22fd      	movs	r2, #253	; 0xfd
 802484c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 802484e:	4b86      	ldr	r3, [pc, #536]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024850:	22ff      	movs	r2, #255	; 0xff
 8024852:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8024854:	4b84      	ldr	r3, [pc, #528]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024856:	22ff      	movs	r2, #255	; 0xff
 8024858:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 802485a:	4b83      	ldr	r3, [pc, #524]	; (8024a68 <MX_LWIP_Init+0x238>)
 802485c:	22ff      	movs	r2, #255	; 0xff
 802485e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8024860:	4b81      	ldr	r3, [pc, #516]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024862:	2200      	movs	r2, #0
 8024864:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8024866:	4b81      	ldr	r3, [pc, #516]	; (8024a6c <MX_LWIP_Init+0x23c>)
 8024868:	2200      	movs	r2, #0
 802486a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 802486c:	4b7f      	ldr	r3, [pc, #508]	; (8024a6c <MX_LWIP_Init+0x23c>)
 802486e:	2200      	movs	r2, #0
 8024870:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8024872:	4b7e      	ldr	r3, [pc, #504]	; (8024a6c <MX_LWIP_Init+0x23c>)
 8024874:	2200      	movs	r2, #0
 8024876:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8024878:	4b7c      	ldr	r3, [pc, #496]	; (8024a6c <MX_LWIP_Init+0x23c>)
 802487a:	2200      	movs	r2, #0
 802487c:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 802487e:	2100      	movs	r1, #0
 8024880:	2000      	movs	r0, #0
 8024882:	f7f4 fccf 	bl	8019224 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8024886:	4b77      	ldr	r3, [pc, #476]	; (8024a64 <MX_LWIP_Init+0x234>)
 8024888:	781b      	ldrb	r3, [r3, #0]
 802488a:	061a      	lsls	r2, r3, #24
 802488c:	4b75      	ldr	r3, [pc, #468]	; (8024a64 <MX_LWIP_Init+0x234>)
 802488e:	785b      	ldrb	r3, [r3, #1]
 8024890:	041b      	lsls	r3, r3, #16
 8024892:	431a      	orrs	r2, r3
 8024894:	4b73      	ldr	r3, [pc, #460]	; (8024a64 <MX_LWIP_Init+0x234>)
 8024896:	789b      	ldrb	r3, [r3, #2]
 8024898:	021b      	lsls	r3, r3, #8
 802489a:	4313      	orrs	r3, r2
 802489c:	4a71      	ldr	r2, [pc, #452]	; (8024a64 <MX_LWIP_Init+0x234>)
 802489e:	78d2      	ldrb	r2, [r2, #3]
 80248a0:	4313      	orrs	r3, r2
 80248a2:	061a      	lsls	r2, r3, #24
 80248a4:	4b6f      	ldr	r3, [pc, #444]	; (8024a64 <MX_LWIP_Init+0x234>)
 80248a6:	781b      	ldrb	r3, [r3, #0]
 80248a8:	0619      	lsls	r1, r3, #24
 80248aa:	4b6e      	ldr	r3, [pc, #440]	; (8024a64 <MX_LWIP_Init+0x234>)
 80248ac:	785b      	ldrb	r3, [r3, #1]
 80248ae:	041b      	lsls	r3, r3, #16
 80248b0:	4319      	orrs	r1, r3
 80248b2:	4b6c      	ldr	r3, [pc, #432]	; (8024a64 <MX_LWIP_Init+0x234>)
 80248b4:	789b      	ldrb	r3, [r3, #2]
 80248b6:	021b      	lsls	r3, r3, #8
 80248b8:	430b      	orrs	r3, r1
 80248ba:	496a      	ldr	r1, [pc, #424]	; (8024a64 <MX_LWIP_Init+0x234>)
 80248bc:	78c9      	ldrb	r1, [r1, #3]
 80248be:	430b      	orrs	r3, r1
 80248c0:	021b      	lsls	r3, r3, #8
 80248c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80248c6:	431a      	orrs	r2, r3
 80248c8:	4b66      	ldr	r3, [pc, #408]	; (8024a64 <MX_LWIP_Init+0x234>)
 80248ca:	781b      	ldrb	r3, [r3, #0]
 80248cc:	0619      	lsls	r1, r3, #24
 80248ce:	4b65      	ldr	r3, [pc, #404]	; (8024a64 <MX_LWIP_Init+0x234>)
 80248d0:	785b      	ldrb	r3, [r3, #1]
 80248d2:	041b      	lsls	r3, r3, #16
 80248d4:	4319      	orrs	r1, r3
 80248d6:	4b63      	ldr	r3, [pc, #396]	; (8024a64 <MX_LWIP_Init+0x234>)
 80248d8:	789b      	ldrb	r3, [r3, #2]
 80248da:	021b      	lsls	r3, r3, #8
 80248dc:	430b      	orrs	r3, r1
 80248de:	4961      	ldr	r1, [pc, #388]	; (8024a64 <MX_LWIP_Init+0x234>)
 80248e0:	78c9      	ldrb	r1, [r1, #3]
 80248e2:	430b      	orrs	r3, r1
 80248e4:	0a1b      	lsrs	r3, r3, #8
 80248e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248ea:	431a      	orrs	r2, r3
 80248ec:	4b5d      	ldr	r3, [pc, #372]	; (8024a64 <MX_LWIP_Init+0x234>)
 80248ee:	781b      	ldrb	r3, [r3, #0]
 80248f0:	0619      	lsls	r1, r3, #24
 80248f2:	4b5c      	ldr	r3, [pc, #368]	; (8024a64 <MX_LWIP_Init+0x234>)
 80248f4:	785b      	ldrb	r3, [r3, #1]
 80248f6:	041b      	lsls	r3, r3, #16
 80248f8:	4319      	orrs	r1, r3
 80248fa:	4b5a      	ldr	r3, [pc, #360]	; (8024a64 <MX_LWIP_Init+0x234>)
 80248fc:	789b      	ldrb	r3, [r3, #2]
 80248fe:	021b      	lsls	r3, r3, #8
 8024900:	430b      	orrs	r3, r1
 8024902:	4958      	ldr	r1, [pc, #352]	; (8024a64 <MX_LWIP_Init+0x234>)
 8024904:	78c9      	ldrb	r1, [r1, #3]
 8024906:	430b      	orrs	r3, r1
 8024908:	0e1b      	lsrs	r3, r3, #24
 802490a:	4313      	orrs	r3, r2
 802490c:	4a58      	ldr	r2, [pc, #352]	; (8024a70 <MX_LWIP_Init+0x240>)
 802490e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8024910:	4b55      	ldr	r3, [pc, #340]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024912:	781b      	ldrb	r3, [r3, #0]
 8024914:	061a      	lsls	r2, r3, #24
 8024916:	4b54      	ldr	r3, [pc, #336]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024918:	785b      	ldrb	r3, [r3, #1]
 802491a:	041b      	lsls	r3, r3, #16
 802491c:	431a      	orrs	r2, r3
 802491e:	4b52      	ldr	r3, [pc, #328]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024920:	789b      	ldrb	r3, [r3, #2]
 8024922:	021b      	lsls	r3, r3, #8
 8024924:	4313      	orrs	r3, r2
 8024926:	4a50      	ldr	r2, [pc, #320]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024928:	78d2      	ldrb	r2, [r2, #3]
 802492a:	4313      	orrs	r3, r2
 802492c:	061a      	lsls	r2, r3, #24
 802492e:	4b4e      	ldr	r3, [pc, #312]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024930:	781b      	ldrb	r3, [r3, #0]
 8024932:	0619      	lsls	r1, r3, #24
 8024934:	4b4c      	ldr	r3, [pc, #304]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024936:	785b      	ldrb	r3, [r3, #1]
 8024938:	041b      	lsls	r3, r3, #16
 802493a:	4319      	orrs	r1, r3
 802493c:	4b4a      	ldr	r3, [pc, #296]	; (8024a68 <MX_LWIP_Init+0x238>)
 802493e:	789b      	ldrb	r3, [r3, #2]
 8024940:	021b      	lsls	r3, r3, #8
 8024942:	430b      	orrs	r3, r1
 8024944:	4948      	ldr	r1, [pc, #288]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024946:	78c9      	ldrb	r1, [r1, #3]
 8024948:	430b      	orrs	r3, r1
 802494a:	021b      	lsls	r3, r3, #8
 802494c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8024950:	431a      	orrs	r2, r3
 8024952:	4b45      	ldr	r3, [pc, #276]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024954:	781b      	ldrb	r3, [r3, #0]
 8024956:	0619      	lsls	r1, r3, #24
 8024958:	4b43      	ldr	r3, [pc, #268]	; (8024a68 <MX_LWIP_Init+0x238>)
 802495a:	785b      	ldrb	r3, [r3, #1]
 802495c:	041b      	lsls	r3, r3, #16
 802495e:	4319      	orrs	r1, r3
 8024960:	4b41      	ldr	r3, [pc, #260]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024962:	789b      	ldrb	r3, [r3, #2]
 8024964:	021b      	lsls	r3, r3, #8
 8024966:	430b      	orrs	r3, r1
 8024968:	493f      	ldr	r1, [pc, #252]	; (8024a68 <MX_LWIP_Init+0x238>)
 802496a:	78c9      	ldrb	r1, [r1, #3]
 802496c:	430b      	orrs	r3, r1
 802496e:	0a1b      	lsrs	r3, r3, #8
 8024970:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024974:	431a      	orrs	r2, r3
 8024976:	4b3c      	ldr	r3, [pc, #240]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024978:	781b      	ldrb	r3, [r3, #0]
 802497a:	0619      	lsls	r1, r3, #24
 802497c:	4b3a      	ldr	r3, [pc, #232]	; (8024a68 <MX_LWIP_Init+0x238>)
 802497e:	785b      	ldrb	r3, [r3, #1]
 8024980:	041b      	lsls	r3, r3, #16
 8024982:	4319      	orrs	r1, r3
 8024984:	4b38      	ldr	r3, [pc, #224]	; (8024a68 <MX_LWIP_Init+0x238>)
 8024986:	789b      	ldrb	r3, [r3, #2]
 8024988:	021b      	lsls	r3, r3, #8
 802498a:	430b      	orrs	r3, r1
 802498c:	4936      	ldr	r1, [pc, #216]	; (8024a68 <MX_LWIP_Init+0x238>)
 802498e:	78c9      	ldrb	r1, [r1, #3]
 8024990:	430b      	orrs	r3, r1
 8024992:	0e1b      	lsrs	r3, r3, #24
 8024994:	4313      	orrs	r3, r2
 8024996:	4a37      	ldr	r2, [pc, #220]	; (8024a74 <MX_LWIP_Init+0x244>)
 8024998:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 802499a:	4b34      	ldr	r3, [pc, #208]	; (8024a6c <MX_LWIP_Init+0x23c>)
 802499c:	781b      	ldrb	r3, [r3, #0]
 802499e:	061a      	lsls	r2, r3, #24
 80249a0:	4b32      	ldr	r3, [pc, #200]	; (8024a6c <MX_LWIP_Init+0x23c>)
 80249a2:	785b      	ldrb	r3, [r3, #1]
 80249a4:	041b      	lsls	r3, r3, #16
 80249a6:	431a      	orrs	r2, r3
 80249a8:	4b30      	ldr	r3, [pc, #192]	; (8024a6c <MX_LWIP_Init+0x23c>)
 80249aa:	789b      	ldrb	r3, [r3, #2]
 80249ac:	021b      	lsls	r3, r3, #8
 80249ae:	4313      	orrs	r3, r2
 80249b0:	4a2e      	ldr	r2, [pc, #184]	; (8024a6c <MX_LWIP_Init+0x23c>)
 80249b2:	78d2      	ldrb	r2, [r2, #3]
 80249b4:	4313      	orrs	r3, r2
 80249b6:	061a      	lsls	r2, r3, #24
 80249b8:	4b2c      	ldr	r3, [pc, #176]	; (8024a6c <MX_LWIP_Init+0x23c>)
 80249ba:	781b      	ldrb	r3, [r3, #0]
 80249bc:	0619      	lsls	r1, r3, #24
 80249be:	4b2b      	ldr	r3, [pc, #172]	; (8024a6c <MX_LWIP_Init+0x23c>)
 80249c0:	785b      	ldrb	r3, [r3, #1]
 80249c2:	041b      	lsls	r3, r3, #16
 80249c4:	4319      	orrs	r1, r3
 80249c6:	4b29      	ldr	r3, [pc, #164]	; (8024a6c <MX_LWIP_Init+0x23c>)
 80249c8:	789b      	ldrb	r3, [r3, #2]
 80249ca:	021b      	lsls	r3, r3, #8
 80249cc:	430b      	orrs	r3, r1
 80249ce:	4927      	ldr	r1, [pc, #156]	; (8024a6c <MX_LWIP_Init+0x23c>)
 80249d0:	78c9      	ldrb	r1, [r1, #3]
 80249d2:	430b      	orrs	r3, r1
 80249d4:	021b      	lsls	r3, r3, #8
 80249d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80249da:	431a      	orrs	r2, r3
 80249dc:	4b23      	ldr	r3, [pc, #140]	; (8024a6c <MX_LWIP_Init+0x23c>)
 80249de:	781b      	ldrb	r3, [r3, #0]
 80249e0:	0619      	lsls	r1, r3, #24
 80249e2:	4b22      	ldr	r3, [pc, #136]	; (8024a6c <MX_LWIP_Init+0x23c>)
 80249e4:	785b      	ldrb	r3, [r3, #1]
 80249e6:	041b      	lsls	r3, r3, #16
 80249e8:	4319      	orrs	r1, r3
 80249ea:	4b20      	ldr	r3, [pc, #128]	; (8024a6c <MX_LWIP_Init+0x23c>)
 80249ec:	789b      	ldrb	r3, [r3, #2]
 80249ee:	021b      	lsls	r3, r3, #8
 80249f0:	430b      	orrs	r3, r1
 80249f2:	491e      	ldr	r1, [pc, #120]	; (8024a6c <MX_LWIP_Init+0x23c>)
 80249f4:	78c9      	ldrb	r1, [r1, #3]
 80249f6:	430b      	orrs	r3, r1
 80249f8:	0a1b      	lsrs	r3, r3, #8
 80249fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80249fe:	431a      	orrs	r2, r3
 8024a00:	4b1a      	ldr	r3, [pc, #104]	; (8024a6c <MX_LWIP_Init+0x23c>)
 8024a02:	781b      	ldrb	r3, [r3, #0]
 8024a04:	0619      	lsls	r1, r3, #24
 8024a06:	4b19      	ldr	r3, [pc, #100]	; (8024a6c <MX_LWIP_Init+0x23c>)
 8024a08:	785b      	ldrb	r3, [r3, #1]
 8024a0a:	041b      	lsls	r3, r3, #16
 8024a0c:	4319      	orrs	r1, r3
 8024a0e:	4b17      	ldr	r3, [pc, #92]	; (8024a6c <MX_LWIP_Init+0x23c>)
 8024a10:	789b      	ldrb	r3, [r3, #2]
 8024a12:	021b      	lsls	r3, r3, #8
 8024a14:	430b      	orrs	r3, r1
 8024a16:	4915      	ldr	r1, [pc, #84]	; (8024a6c <MX_LWIP_Init+0x23c>)
 8024a18:	78c9      	ldrb	r1, [r1, #3]
 8024a1a:	430b      	orrs	r3, r1
 8024a1c:	0e1b      	lsrs	r3, r3, #24
 8024a1e:	4313      	orrs	r3, r2
 8024a20:	4a15      	ldr	r2, [pc, #84]	; (8024a78 <MX_LWIP_Init+0x248>)
 8024a22:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8024a24:	4b15      	ldr	r3, [pc, #84]	; (8024a7c <MX_LWIP_Init+0x24c>)
 8024a26:	9302      	str	r3, [sp, #8]
 8024a28:	4b15      	ldr	r3, [pc, #84]	; (8024a80 <MX_LWIP_Init+0x250>)
 8024a2a:	9301      	str	r3, [sp, #4]
 8024a2c:	2300      	movs	r3, #0
 8024a2e:	9300      	str	r3, [sp, #0]
 8024a30:	4b11      	ldr	r3, [pc, #68]	; (8024a78 <MX_LWIP_Init+0x248>)
 8024a32:	4a10      	ldr	r2, [pc, #64]	; (8024a74 <MX_LWIP_Init+0x244>)
 8024a34:	490e      	ldr	r1, [pc, #56]	; (8024a70 <MX_LWIP_Init+0x240>)
 8024a36:	4813      	ldr	r0, [pc, #76]	; (8024a84 <MX_LWIP_Init+0x254>)
 8024a38:	f7f7 fbee 	bl	801c218 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8024a3c:	4811      	ldr	r0, [pc, #68]	; (8024a84 <MX_LWIP_Init+0x254>)
 8024a3e:	f7f7 fccb 	bl	801c3d8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8024a42:	4b10      	ldr	r3, [pc, #64]	; (8024a84 <MX_LWIP_Init+0x254>)
 8024a44:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8024a48:	f003 0304 	and.w	r3, r3, #4
 8024a4c:	2b00      	cmp	r3, #0
 8024a4e:	d003      	beq.n	8024a58 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8024a50:	480c      	ldr	r0, [pc, #48]	; (8024a84 <MX_LWIP_Init+0x254>)
 8024a52:	f7f7 fcd1 	bl	801c3f8 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8024a56:	e002      	b.n	8024a5e <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8024a58:	480a      	ldr	r0, [pc, #40]	; (8024a84 <MX_LWIP_Init+0x254>)
 8024a5a:	f7f7 fd11 	bl	801c480 <netif_set_down>
}
 8024a5e:	bf00      	nop
 8024a60:	46bd      	mov	sp, r7
 8024a62:	bd80      	pop	{r7, pc}
 8024a64:	2000bda8 	.word	0x2000bda8
 8024a68:	2000bda4 	.word	0x2000bda4
 8024a6c:	2000bd6c 	.word	0x2000bd6c
 8024a70:	2000bda0 	.word	0x2000bda0
 8024a74:	2000bdac 	.word	0x2000bdac
 8024a78:	2000bdb0 	.word	0x2000bdb0
 8024a7c:	08019121 	.word	0x08019121
 8024a80:	08024315 	.word	0x08024315
 8024a84:	2000bd70 	.word	0x2000bd70

08024a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8024a88:	b580      	push	{r7, lr}
 8024a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8024a8c:	f7eb fc72 	bl	8010374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8024a90:	f000 f822 	bl	8024ad8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_FLASH_Unlock();
 8024a94:	f7ed fa1e 	bl	8011ed4 <HAL_FLASH_Unlock>
	EE_Init();
 8024a98:	f7fe fd68 	bl	802356c <EE_Init>
	FlashInit();
 8024a9c:	f7fe fcd0 	bl	8023440 <FlashInit>
	ProtocolSettingsInit(&hprot);
 8024aa0:	480b      	ldr	r0, [pc, #44]	; (8024ad0 <main+0x48>)
 8024aa2:	f000 fad9 	bl	8025058 <ProtocolSettingsInit>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8024aa6:	f7ff fdc1 	bl	802462c <MX_GPIO_Init>
  MX_DMA_Init();
 8024aaa:	f7fe fd29 	bl	8023500 <MX_DMA_Init>
  MX_UART5_Init();
 8024aae:	f001 f8ad 	bl	8025c0c <MX_UART5_Init>
  MX_TIM8_Init();
 8024ab2:	f000 fe15 	bl	80256e0 <MX_TIM8_Init>
  MX_TIM7_Init();
 8024ab6:	f000 fde1 	bl	802567c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8024aba:	f001 f8d3 	bl	8025c64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	LogInit(&huart1);
 8024abe:	4805      	ldr	r0, [pc, #20]	; (8024ad4 <main+0x4c>)
 8024ac0:	f7ff fe30 	bl	8024724 <LogInit>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8024ac4:	f7ff fcbe 	bl	8024444 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8024ac8:	f7ef fdcc 	bl	8014664 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8024acc:	e7fe      	b.n	8024acc <main+0x44>
 8024ace:	bf00      	nop
 8024ad0:	2000bdc8 	.word	0x2000bdc8
 8024ad4:	2000bf2c 	.word	0x2000bf2c

08024ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8024ad8:	b580      	push	{r7, lr}
 8024ada:	b094      	sub	sp, #80	; 0x50
 8024adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8024ade:	f107 0320 	add.w	r3, r7, #32
 8024ae2:	2230      	movs	r2, #48	; 0x30
 8024ae4:	2100      	movs	r1, #0
 8024ae6:	4618      	mov	r0, r3
 8024ae8:	f001 fcf8 	bl	80264dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8024aec:	f107 030c 	add.w	r3, r7, #12
 8024af0:	2200      	movs	r2, #0
 8024af2:	601a      	str	r2, [r3, #0]
 8024af4:	605a      	str	r2, [r3, #4]
 8024af6:	609a      	str	r2, [r3, #8]
 8024af8:	60da      	str	r2, [r3, #12]
 8024afa:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8024afc:	2300      	movs	r3, #0
 8024afe:	60bb      	str	r3, [r7, #8]
 8024b00:	4a28      	ldr	r2, [pc, #160]	; (8024ba4 <SystemClock_Config+0xcc>)
 8024b02:	4b28      	ldr	r3, [pc, #160]	; (8024ba4 <SystemClock_Config+0xcc>)
 8024b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8024b0c:	4b25      	ldr	r3, [pc, #148]	; (8024ba4 <SystemClock_Config+0xcc>)
 8024b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024b14:	60bb      	str	r3, [r7, #8]
 8024b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8024b18:	2300      	movs	r3, #0
 8024b1a:	607b      	str	r3, [r7, #4]
 8024b1c:	4a22      	ldr	r2, [pc, #136]	; (8024ba8 <SystemClock_Config+0xd0>)
 8024b1e:	4b22      	ldr	r3, [pc, #136]	; (8024ba8 <SystemClock_Config+0xd0>)
 8024b20:	681b      	ldr	r3, [r3, #0]
 8024b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024b26:	6013      	str	r3, [r2, #0]
 8024b28:	4b1f      	ldr	r3, [pc, #124]	; (8024ba8 <SystemClock_Config+0xd0>)
 8024b2a:	681b      	ldr	r3, [r3, #0]
 8024b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024b30:	607b      	str	r3, [r7, #4]
 8024b32:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8024b34:	2301      	movs	r3, #1
 8024b36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8024b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8024b3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8024b3e:	2302      	movs	r3, #2
 8024b40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8024b42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8024b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8024b48:	2319      	movs	r3, #25
 8024b4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8024b4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8024b50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8024b52:	2302      	movs	r3, #2
 8024b54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8024b56:	2305      	movs	r3, #5
 8024b58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8024b5a:	f107 0320 	add.w	r3, r7, #32
 8024b5e:	4618      	mov	r0, r3
 8024b60:	f7ed fee8 	bl	8012934 <HAL_RCC_OscConfig>
 8024b64:	4603      	mov	r3, r0
 8024b66:	2b00      	cmp	r3, #0
 8024b68:	d001      	beq.n	8024b6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8024b6a:	f000 f851 	bl	8024c10 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8024b6e:	230f      	movs	r3, #15
 8024b70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8024b72:	2302      	movs	r3, #2
 8024b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8024b76:	2300      	movs	r3, #0
 8024b78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8024b7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8024b7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8024b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8024b84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8024b86:	f107 030c 	add.w	r3, r7, #12
 8024b8a:	2105      	movs	r1, #5
 8024b8c:	4618      	mov	r0, r3
 8024b8e:	f7ee f913 	bl	8012db8 <HAL_RCC_ClockConfig>
 8024b92:	4603      	mov	r3, r0
 8024b94:	2b00      	cmp	r3, #0
 8024b96:	d001      	beq.n	8024b9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8024b98:	f000 f83a 	bl	8024c10 <Error_Handler>
  }
}
 8024b9c:	bf00      	nop
 8024b9e:	3750      	adds	r7, #80	; 0x50
 8024ba0:	46bd      	mov	sp, r7
 8024ba2:	bd80      	pop	{r7, pc}
 8024ba4:	40023800 	.word	0x40023800
 8024ba8:	40007000 	.word	0x40007000

08024bac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8024bac:	b580      	push	{r7, lr}
 8024bae:	b082      	sub	sp, #8
 8024bb0:	af00      	add	r7, sp, #0
 8024bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8024bb4:	687b      	ldr	r3, [r7, #4]
 8024bb6:	681b      	ldr	r3, [r3, #0]
 8024bb8:	4a10      	ldr	r2, [pc, #64]	; (8024bfc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8024bba:	4293      	cmp	r3, r2
 8024bbc:	d101      	bne.n	8024bc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8024bbe:	f7eb fbfb 	bl	80103b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM8) {
 8024bc2:	687b      	ldr	r3, [r7, #4]
 8024bc4:	681b      	ldr	r3, [r3, #0]
 8024bc6:	4a0e      	ldr	r2, [pc, #56]	; (8024c00 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8024bc8:	4293      	cmp	r3, r2
 8024bca:	d101      	bne.n	8024bd0 <HAL_TIM_PeriodElapsedCallback+0x24>
		CommandProcess();
 8024bcc:	f000 f824 	bl	8024c18 <CommandProcess>
	}
	if (htim->Instance == TIM7) {
 8024bd0:	687b      	ldr	r3, [r7, #4]
 8024bd2:	681b      	ldr	r3, [r3, #0]
 8024bd4:	4a0b      	ldr	r2, [pc, #44]	; (8024c04 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8024bd6:	4293      	cmp	r3, r2
 8024bd8:	d10b      	bne.n	8024bf2 <HAL_TIM_PeriodElapsedCallback+0x46>
		__HAL_TIM_SET_COUNTER(&htim7, 0x00U);
 8024bda:	4b0b      	ldr	r3, [pc, #44]	; (8024c08 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8024bdc:	681b      	ldr	r3, [r3, #0]
 8024bde:	2200      	movs	r2, #0
 8024be0:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim7);
 8024be2:	4809      	ldr	r0, [pc, #36]	; (8024c08 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8024be4:	f7ee fb11 	bl	801320a <HAL_TIM_Base_Start_IT>
		ulHighFrequencyTimerTicks++;
 8024be8:	4b08      	ldr	r3, [pc, #32]	; (8024c0c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8024bea:	681b      	ldr	r3, [r3, #0]
 8024bec:	3301      	adds	r3, #1
 8024bee:	4a07      	ldr	r2, [pc, #28]	; (8024c0c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8024bf0:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 8024bf2:	bf00      	nop
 8024bf4:	3708      	adds	r7, #8
 8024bf6:	46bd      	mov	sp, r7
 8024bf8:	bd80      	pop	{r7, pc}
 8024bfa:	bf00      	nop
 8024bfc:	40010000 	.word	0x40010000
 8024c00:	40010400 	.word	0x40010400
 8024c04:	40001400 	.word	0x40001400
 8024c08:	2000be50 	.word	0x2000be50
 8024c0c:	2000413c 	.word	0x2000413c

08024c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8024c10:	b480      	push	{r7}
 8024c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	for(;;){
 8024c14:	e7fe      	b.n	8024c14 <Error_Handler+0x4>
	...

08024c18 <CommandProcess>:
extern xQueueHandle frames_queue;
extern xQueueHandle cleaner_queue;

profibus_MPI_t hprot;

inline void CommandProcess() {
 8024c18:	b580      	push	{r7, lr}
 8024c1a:	b082      	sub	sp, #8
 8024c1c:	af00      	add	r7, sp, #0
	static portBASE_TYPE xHigherPriorityTaskWoken;
	uint32_t len;
	xHigherPriorityTaskWoken = pdFALSE;
 8024c1e:	4b13      	ldr	r3, [pc, #76]	; (8024c6c <CommandProcess+0x54>)
 8024c20:	2200      	movs	r2, #0
 8024c22:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim8);
 8024c24:	4812      	ldr	r0, [pc, #72]	; (8024c70 <CommandProcess+0x58>)
 8024c26:	f7ee fb0b 	bl	8013240 <HAL_TIM_Base_Stop_IT>
	len = CB_Data_Length(&inbuf_UART);
 8024c2a:	4812      	ldr	r0, [pc, #72]	; (8024c74 <CommandProcess+0x5c>)
 8024c2c:	f7fe fbac 	bl	8023388 <CB_Data_Length>
 8024c30:	4603      	mov	r3, r0
 8024c32:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR(frames_queue, &len, &xHigherPriorityTaskWoken);
 8024c34:	4b10      	ldr	r3, [pc, #64]	; (8024c78 <CommandProcess+0x60>)
 8024c36:	6818      	ldr	r0, [r3, #0]
 8024c38:	1d39      	adds	r1, r7, #4
 8024c3a:	2300      	movs	r3, #0
 8024c3c:	4a0b      	ldr	r2, [pc, #44]	; (8024c6c <CommandProcess+0x54>)
 8024c3e:	f7f0 fe2d 	bl	801589c <xQueueGenericSendFromISR>
	if (xHigherPriorityTaskWoken == pdTRUE) {
 8024c42:	4b0a      	ldr	r3, [pc, #40]	; (8024c6c <CommandProcess+0x54>)
 8024c44:	681b      	ldr	r3, [r3, #0]
 8024c46:	2b01      	cmp	r3, #1
 8024c48:	d10b      	bne.n	8024c62 <CommandProcess+0x4a>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8024c4a:	4b08      	ldr	r3, [pc, #32]	; (8024c6c <CommandProcess+0x54>)
 8024c4c:	681b      	ldr	r3, [r3, #0]
 8024c4e:	2b00      	cmp	r3, #0
 8024c50:	d007      	beq.n	8024c62 <CommandProcess+0x4a>
 8024c52:	4b0a      	ldr	r3, [pc, #40]	; (8024c7c <CommandProcess+0x64>)
 8024c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8024c58:	601a      	str	r2, [r3, #0]
 8024c5a:	f3bf 8f4f 	dsb	sy
 8024c5e:	f3bf 8f6f 	isb	sy
	}
}
 8024c62:	bf00      	nop
 8024c64:	3708      	adds	r7, #8
 8024c66:	46bd      	mov	sp, r7
 8024c68:	bd80      	pop	{r7, pc}
 8024c6a:	bf00      	nop
 8024c6c:	20004140 	.word	0x20004140
 8024c70:	2000be14 	.word	0x2000be14
 8024c74:	2000bdb8 	.word	0x2000bdb8
 8024c78:	2000bd4c 	.word	0x2000bd4c
 8024c7c:	e000ed04 	.word	0xe000ed04

08024c80 <SendTokenMsg>:

void SendTokenMsg(uint8_t to, uint8_t from) {
 8024c80:	b580      	push	{r7, lr}
 8024c82:	b084      	sub	sp, #16
 8024c84:	af00      	add	r7, sp, #0
 8024c86:	4603      	mov	r3, r0
 8024c88:	460a      	mov	r2, r1
 8024c8a:	71fb      	strb	r3, [r7, #7]
 8024c8c:	4613      	mov	r3, r2
 8024c8e:	71bb      	strb	r3, [r7, #6]
	uint8_t * temp;
	temp = (uint8_t*) pvPortMalloc(3);
 8024c90:	2003      	movs	r0, #3
 8024c92:	f7f0 fa3d 	bl	8015110 <pvPortMalloc>
 8024c96:	60f8      	str	r0, [r7, #12]
	temp[0] = 0xDC;
 8024c98:	68fb      	ldr	r3, [r7, #12]
 8024c9a:	22dc      	movs	r2, #220	; 0xdc
 8024c9c:	701a      	strb	r2, [r3, #0]
	temp[1] = to;
 8024c9e:	68fb      	ldr	r3, [r7, #12]
 8024ca0:	3301      	adds	r3, #1
 8024ca2:	79fa      	ldrb	r2, [r7, #7]
 8024ca4:	701a      	strb	r2, [r3, #0]
	temp[2] = from;
 8024ca6:	68fb      	ldr	r3, [r7, #12]
 8024ca8:	3302      	adds	r3, #2
 8024caa:	79ba      	ldrb	r2, [r7, #6]
 8024cac:	701a      	strb	r2, [r3, #0]
	TRANS_ON();
 8024cae:	2201      	movs	r2, #1
 8024cb0:	2101      	movs	r1, #1
 8024cb2:	4806      	ldr	r0, [pc, #24]	; (8024ccc <SendTokenMsg+0x4c>)
 8024cb4:	f7ed fe12 	bl	80128dc <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, temp, 3);
 8024cb8:	2203      	movs	r2, #3
 8024cba:	68f9      	ldr	r1, [r7, #12]
 8024cbc:	4804      	ldr	r0, [pc, #16]	; (8024cd0 <SendTokenMsg+0x50>)
 8024cbe:	f7ee ff5f 	bl	8013b80 <HAL_UART_Transmit_DMA>
}
 8024cc2:	bf00      	nop
 8024cc4:	3710      	adds	r7, #16
 8024cc6:	46bd      	mov	sp, r7
 8024cc8:	bd80      	pop	{r7, pc}
 8024cca:	bf00      	nop
 8024ccc:	40021000 	.word	0x40021000
 8024cd0:	2000beec 	.word	0x2000beec

08024cd4 <SendNoDataMsg>:

void SendNoDataMsg(uint8_t to, uint8_t from, uint8_t fc) {
 8024cd4:	b580      	push	{r7, lr}
 8024cd6:	b084      	sub	sp, #16
 8024cd8:	af00      	add	r7, sp, #0
 8024cda:	4603      	mov	r3, r0
 8024cdc:	71fb      	strb	r3, [r7, #7]
 8024cde:	460b      	mov	r3, r1
 8024ce0:	71bb      	strb	r3, [r7, #6]
 8024ce2:	4613      	mov	r3, r2
 8024ce4:	717b      	strb	r3, [r7, #5]
	uint8_t * temp;
	temp = (uint8_t*) pvPortMalloc(6);
 8024ce6:	2006      	movs	r0, #6
 8024ce8:	f7f0 fa12 	bl	8015110 <pvPortMalloc>
 8024cec:	60f8      	str	r0, [r7, #12]
	temp[0] = 0x10;
 8024cee:	68fb      	ldr	r3, [r7, #12]
 8024cf0:	2210      	movs	r2, #16
 8024cf2:	701a      	strb	r2, [r3, #0]
	temp[1] = to;
 8024cf4:	68fb      	ldr	r3, [r7, #12]
 8024cf6:	3301      	adds	r3, #1
 8024cf8:	79fa      	ldrb	r2, [r7, #7]
 8024cfa:	701a      	strb	r2, [r3, #0]
	temp[2] = from;
 8024cfc:	68fb      	ldr	r3, [r7, #12]
 8024cfe:	3302      	adds	r3, #2
 8024d00:	79ba      	ldrb	r2, [r7, #6]
 8024d02:	701a      	strb	r2, [r3, #0]
	temp[3] = fc;
 8024d04:	68fb      	ldr	r3, [r7, #12]
 8024d06:	3303      	adds	r3, #3
 8024d08:	797a      	ldrb	r2, [r7, #5]
 8024d0a:	701a      	strb	r2, [r3, #0]
	temp[4] = to + from + fc;
 8024d0c:	68fb      	ldr	r3, [r7, #12]
 8024d0e:	3304      	adds	r3, #4
 8024d10:	79f9      	ldrb	r1, [r7, #7]
 8024d12:	79ba      	ldrb	r2, [r7, #6]
 8024d14:	440a      	add	r2, r1
 8024d16:	b2d1      	uxtb	r1, r2
 8024d18:	797a      	ldrb	r2, [r7, #5]
 8024d1a:	440a      	add	r2, r1
 8024d1c:	b2d2      	uxtb	r2, r2
 8024d1e:	701a      	strb	r2, [r3, #0]
	temp[5] = 0x16;
 8024d20:	68fb      	ldr	r3, [r7, #12]
 8024d22:	3305      	adds	r3, #5
 8024d24:	2216      	movs	r2, #22
 8024d26:	701a      	strb	r2, [r3, #0]
	TRANS_ON();
 8024d28:	2201      	movs	r2, #1
 8024d2a:	2101      	movs	r1, #1
 8024d2c:	4805      	ldr	r0, [pc, #20]	; (8024d44 <SendNoDataMsg+0x70>)
 8024d2e:	f7ed fdd5 	bl	80128dc <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, temp, 6);
 8024d32:	2206      	movs	r2, #6
 8024d34:	68f9      	ldr	r1, [r7, #12]
 8024d36:	4804      	ldr	r0, [pc, #16]	; (8024d48 <SendNoDataMsg+0x74>)
 8024d38:	f7ee ff22 	bl	8013b80 <HAL_UART_Transmit_DMA>
}
 8024d3c:	bf00      	nop
 8024d3e:	3710      	adds	r7, #16
 8024d40:	46bd      	mov	sp, r7
 8024d42:	bd80      	pop	{r7, pc}
 8024d44:	40021000 	.word	0x40021000
 8024d48:	2000beec 	.word	0x2000beec

08024d4c <SendRequestMsg>:

void SendRequestMsg(uint8_t to, uint8_t from, uint8_t* data, uint8_t data_len) {
 8024d4c:	b590      	push	{r4, r7, lr}
 8024d4e:	b087      	sub	sp, #28
 8024d50:	af00      	add	r7, sp, #0
 8024d52:	603a      	str	r2, [r7, #0]
 8024d54:	461a      	mov	r2, r3
 8024d56:	4603      	mov	r3, r0
 8024d58:	71fb      	strb	r3, [r7, #7]
 8024d5a:	460b      	mov	r3, r1
 8024d5c:	71bb      	strb	r3, [r7, #6]
 8024d5e:	4613      	mov	r3, r2
 8024d60:	717b      	strb	r3, [r7, #5]
	static uint8_t req_num = 9;
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = data_len + 13;
 8024d62:	797b      	ldrb	r3, [r7, #5]
 8024d64:	330d      	adds	r3, #13
 8024d66:	75fb      	strb	r3, [r7, #23]
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 8024d68:	7dfb      	ldrb	r3, [r7, #23]
 8024d6a:	4618      	mov	r0, r3
 8024d6c:	f7f0 f9d0 	bl	8015110 <pvPortMalloc>
 8024d70:	6138      	str	r0, [r7, #16]
	if (msg_ptr == NULL) {
 8024d72:	693b      	ldr	r3, [r7, #16]
 8024d74:	2b00      	cmp	r3, #0
 8024d76:	d106      	bne.n	8024d86 <SendRequestMsg+0x3a>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 8024d78:	4a4c      	ldr	r2, [pc, #304]	; (8024eac <SendRequestMsg+0x160>)
 8024d7a:	2101      	movs	r1, #1
 8024d7c:	2000      	movs	r0, #0
 8024d7e:	f7ff fce9 	bl	8024754 <LogText__>
				"Request buffer allocation error.");
		Error_Handler();
 8024d82:	f7ff ff45 	bl	8024c10 <Error_Handler>
	}
	tmp_ptr = msg_ptr;
 8024d86:	693b      	ldr	r3, [r7, #16]
 8024d88:	60fb      	str	r3, [r7, #12]
	*tmp_ptr++ = 0x68;
 8024d8a:	68fb      	ldr	r3, [r7, #12]
 8024d8c:	1c5a      	adds	r2, r3, #1
 8024d8e:	60fa      	str	r2, [r7, #12]
 8024d90:	2268      	movs	r2, #104	; 0x68
 8024d92:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = data_len + 9;
 8024d94:	68fb      	ldr	r3, [r7, #12]
 8024d96:	1c5a      	adds	r2, r3, #1
 8024d98:	60fa      	str	r2, [r7, #12]
 8024d9a:	797a      	ldrb	r2, [r7, #5]
 8024d9c:	3209      	adds	r2, #9
 8024d9e:	b2d2      	uxtb	r2, r2
 8024da0:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = data_len + 9;
 8024da2:	68fb      	ldr	r3, [r7, #12]
 8024da4:	1c5a      	adds	r2, r3, #1
 8024da6:	60fa      	str	r2, [r7, #12]
 8024da8:	797a      	ldrb	r2, [r7, #5]
 8024daa:	3209      	adds	r2, #9
 8024dac:	b2d2      	uxtb	r2, r2
 8024dae:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x68;
 8024db0:	68fb      	ldr	r3, [r7, #12]
 8024db2:	1c5a      	adds	r2, r3, #1
 8024db4:	60fa      	str	r2, [r7, #12]
 8024db6:	2268      	movs	r2, #104	; 0x68
 8024db8:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = to | 0x80;
 8024dba:	68fb      	ldr	r3, [r7, #12]
 8024dbc:	1c5a      	adds	r2, r3, #1
 8024dbe:	60fa      	str	r2, [r7, #12]
 8024dc0:	79fa      	ldrb	r2, [r7, #7]
 8024dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8024dc6:	b2d2      	uxtb	r2, r2
 8024dc8:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = from | 0x80;
 8024dca:	68fb      	ldr	r3, [r7, #12]
 8024dcc:	1c5a      	adds	r2, r3, #1
 8024dce:	60fa      	str	r2, [r7, #12]
 8024dd0:	79ba      	ldrb	r2, [r7, #6]
 8024dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8024dd6:	b2d2      	uxtb	r2, r2
 8024dd8:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x7C;
 8024dda:	68fb      	ldr	r3, [r7, #12]
 8024ddc:	1c5a      	adds	r2, r3, #1
 8024dde:	60fa      	str	r2, [r7, #12]
 8024de0:	227c      	movs	r2, #124	; 0x7c
 8024de2:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x12;
 8024de4:	68fb      	ldr	r3, [r7, #12]
 8024de6:	1c5a      	adds	r2, r3, #1
 8024de8:	60fa      	str	r2, [r7, #12]
 8024dea:	2212      	movs	r2, #18
 8024dec:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x1F;
 8024dee:	68fb      	ldr	r3, [r7, #12]
 8024df0:	1c5a      	adds	r2, r3, #1
 8024df2:	60fa      	str	r2, [r7, #12]
 8024df4:	221f      	movs	r2, #31
 8024df6:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0xF1;
 8024df8:	68fb      	ldr	r3, [r7, #12]
 8024dfa:	1c5a      	adds	r2, r3, #1
 8024dfc:	60fa      	str	r2, [r7, #12]
 8024dfe:	22f1      	movs	r2, #241	; 0xf1
 8024e00:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = req_num++;
 8024e02:	68fb      	ldr	r3, [r7, #12]
 8024e04:	1c5a      	adds	r2, r3, #1
 8024e06:	60fa      	str	r2, [r7, #12]
 8024e08:	4a29      	ldr	r2, [pc, #164]	; (8024eb0 <SendRequestMsg+0x164>)
 8024e0a:	7812      	ldrb	r2, [r2, #0]
 8024e0c:	1c51      	adds	r1, r2, #1
 8024e0e:	b2c8      	uxtb	r0, r1
 8024e10:	4927      	ldr	r1, [pc, #156]	; (8024eb0 <SendRequestMsg+0x164>)
 8024e12:	7008      	strb	r0, [r1, #0]
 8024e14:	701a      	strb	r2, [r3, #0]
	memcpy(tmp_ptr, data, data_len);
 8024e16:	797b      	ldrb	r3, [r7, #5]
 8024e18:	461a      	mov	r2, r3
 8024e1a:	6839      	ldr	r1, [r7, #0]
 8024e1c:	68f8      	ldr	r0, [r7, #12]
 8024e1e:	f001 fb52 	bl	80264c6 <memcpy>
	tmp_ptr += data_len;
 8024e22:	797b      	ldrb	r3, [r7, #5]
 8024e24:	68fa      	ldr	r2, [r7, #12]
 8024e26:	4413      	add	r3, r2
 8024e28:	60fb      	str	r3, [r7, #12]
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, data_len + 7);
 8024e2a:	68fc      	ldr	r4, [r7, #12]
 8024e2c:	1c63      	adds	r3, r4, #1
 8024e2e:	60fb      	str	r3, [r7, #12]
 8024e30:	693b      	ldr	r3, [r7, #16]
 8024e32:	1d1a      	adds	r2, r3, #4
 8024e34:	797b      	ldrb	r3, [r7, #5]
 8024e36:	3307      	adds	r3, #7
 8024e38:	b2db      	uxtb	r3, r3
 8024e3a:	4619      	mov	r1, r3
 8024e3c:	4610      	mov	r0, r2
 8024e3e:	f000 f92f 	bl	80250a0 <CalculateFCS>
 8024e42:	4603      	mov	r3, r0
 8024e44:	7023      	strb	r3, [r4, #0]
	*tmp_ptr = 0x16;
 8024e46:	68fb      	ldr	r3, [r7, #12]
 8024e48:	2216      	movs	r2, #22
 8024e4a:	701a      	strb	r2, [r3, #0]
	TRANS_ON();
 8024e4c:	2201      	movs	r2, #1
 8024e4e:	2101      	movs	r1, #1
 8024e50:	4818      	ldr	r0, [pc, #96]	; (8024eb4 <SendRequestMsg+0x168>)
 8024e52:	f7ed fd43 	bl	80128dc <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 8024e56:	7dfb      	ldrb	r3, [r7, #23]
 8024e58:	b29b      	uxth	r3, r3
 8024e5a:	461a      	mov	r2, r3
 8024e5c:	6939      	ldr	r1, [r7, #16]
 8024e5e:	4816      	ldr	r0, [pc, #88]	; (8024eb8 <SendRequestMsg+0x16c>)
 8024e60:	f7ee fe8e 	bl	8013b80 <HAL_UART_Transmit_DMA>
	osDelay(4);
 8024e64:	2004      	movs	r0, #4
 8024e66:	f7ef fc3b 	bl	80146e0 <osDelay>
	uint8_t* DC;
	DC = (uint8_t*) pvPortMalloc(3);
 8024e6a:	2003      	movs	r0, #3
 8024e6c:	f7f0 f950 	bl	8015110 <pvPortMalloc>
 8024e70:	60b8      	str	r0, [r7, #8]
	DC[0] = 0xDC;
 8024e72:	68bb      	ldr	r3, [r7, #8]
 8024e74:	22dc      	movs	r2, #220	; 0xdc
 8024e76:	701a      	strb	r2, [r3, #0]
	DC[1] = 0x02;
 8024e78:	68bb      	ldr	r3, [r7, #8]
 8024e7a:	3301      	adds	r3, #1
 8024e7c:	2202      	movs	r2, #2
 8024e7e:	701a      	strb	r2, [r3, #0]
	DC[2] = 0x01;
 8024e80:	68bb      	ldr	r3, [r7, #8]
 8024e82:	3302      	adds	r3, #2
 8024e84:	2201      	movs	r2, #1
 8024e86:	701a      	strb	r2, [r3, #0]
	TRANS_ON();
 8024e88:	2201      	movs	r2, #1
 8024e8a:	2101      	movs	r1, #1
 8024e8c:	4809      	ldr	r0, [pc, #36]	; (8024eb4 <SendRequestMsg+0x168>)
 8024e8e:	f7ed fd25 	bl	80128dc <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, DC, 3);
 8024e92:	2203      	movs	r2, #3
 8024e94:	68b9      	ldr	r1, [r7, #8]
 8024e96:	4808      	ldr	r0, [pc, #32]	; (8024eb8 <SendRequestMsg+0x16c>)
 8024e98:	f7ee fe72 	bl	8013b80 <HAL_UART_Transmit_DMA>
	hprot.have_data_to_send = 0U;
 8024e9c:	4b07      	ldr	r3, [pc, #28]	; (8024ebc <SendRequestMsg+0x170>)
 8024e9e:	2200      	movs	r2, #0
 8024ea0:	709a      	strb	r2, [r3, #2]
}
 8024ea2:	bf00      	nop
 8024ea4:	371c      	adds	r7, #28
 8024ea6:	46bd      	mov	sp, r7
 8024ea8:	bd90      	pop	{r4, r7, pc}
 8024eaa:	bf00      	nop
 8024eac:	08028f44 	.word	0x08028f44
 8024eb0:	2000004c 	.word	0x2000004c
 8024eb4:	40021000 	.word	0x40021000
 8024eb8:	2000beec 	.word	0x2000beec
 8024ebc:	2000bdc8 	.word	0x2000bdc8

08024ec0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8024ec0:	b580      	push	{r7, lr}
 8024ec2:	b082      	sub	sp, #8
 8024ec4:	af00      	add	r7, sp, #0
 8024ec6:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 8024ec8:	687b      	ldr	r3, [r7, #4]
 8024eca:	4a0c      	ldr	r2, [pc, #48]	; (8024efc <HAL_UART_RxCpltCallback+0x3c>)
 8024ecc:	4293      	cmp	r3, r2
 8024ece:	d111      	bne.n	8024ef4 <HAL_UART_RxCpltCallback+0x34>
		CB_Write(&inbuf_UART, received_byte);
 8024ed0:	4b0b      	ldr	r3, [pc, #44]	; (8024f00 <HAL_UART_RxCpltCallback+0x40>)
 8024ed2:	781b      	ldrb	r3, [r3, #0]
 8024ed4:	4619      	mov	r1, r3
 8024ed6:	480b      	ldr	r0, [pc, #44]	; (8024f04 <HAL_UART_RxCpltCallback+0x44>)
 8024ed8:	f7fe fa69 	bl	80233ae <CB_Write>
		HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 8024edc:	2201      	movs	r2, #1
 8024ede:	4908      	ldr	r1, [pc, #32]	; (8024f00 <HAL_UART_RxCpltCallback+0x40>)
 8024ee0:	4806      	ldr	r0, [pc, #24]	; (8024efc <HAL_UART_RxCpltCallback+0x3c>)
 8024ee2:	f7ee fe00 	bl	8013ae6 <HAL_UART_Receive_IT>
		__HAL_TIM_SET_COUNTER(&htim8, 0x00U);
 8024ee6:	4b08      	ldr	r3, [pc, #32]	; (8024f08 <HAL_UART_RxCpltCallback+0x48>)
 8024ee8:	681b      	ldr	r3, [r3, #0]
 8024eea:	2200      	movs	r2, #0
 8024eec:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim8);
 8024eee:	4806      	ldr	r0, [pc, #24]	; (8024f08 <HAL_UART_RxCpltCallback+0x48>)
 8024ef0:	f7ee f98b 	bl	801320a <HAL_TIM_Base_Start_IT>
	}
}
 8024ef4:	bf00      	nop
 8024ef6:	3708      	adds	r7, #8
 8024ef8:	46bd      	mov	sp, r7
 8024efa:	bd80      	pop	{r7, pc}
 8024efc:	2000beec 	.word	0x2000beec
 8024f00:	2000bdb4 	.word	0x2000bdb4
 8024f04:	2000bdb8 	.word	0x2000bdb8
 8024f08:	2000be14 	.word	0x2000be14

08024f0c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8024f0c:	b580      	push	{r7, lr}
 8024f0e:	b082      	sub	sp, #8
 8024f10:	af00      	add	r7, sp, #0
 8024f12:	6078      	str	r0, [r7, #4]
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8024f14:	4b22      	ldr	r3, [pc, #136]	; (8024fa0 <HAL_UART_TxCpltCallback+0x94>)
 8024f16:	2200      	movs	r2, #0
 8024f18:	601a      	str	r2, [r3, #0]
	if (huart == &huart5) {
 8024f1a:	687b      	ldr	r3, [r7, #4]
 8024f1c:	4a21      	ldr	r2, [pc, #132]	; (8024fa4 <HAL_UART_TxCpltCallback+0x98>)
 8024f1e:	4293      	cmp	r3, r2
 8024f20:	d11b      	bne.n	8024f5a <HAL_UART_TxCpltCallback+0x4e>
		TRANS_OFF();
 8024f22:	2200      	movs	r2, #0
 8024f24:	2101      	movs	r1, #1
 8024f26:	4820      	ldr	r0, [pc, #128]	; (8024fa8 <HAL_UART_TxCpltCallback+0x9c>)
 8024f28:	f7ed fcd8 	bl	80128dc <HAL_GPIO_WritePin>
		xQueueSendFromISR(cleaner_queue, &(huart5.pTxBuffPtr),
 8024f2c:	4b1f      	ldr	r3, [pc, #124]	; (8024fac <HAL_UART_TxCpltCallback+0xa0>)
 8024f2e:	6818      	ldr	r0, [r3, #0]
 8024f30:	2300      	movs	r3, #0
 8024f32:	4a1b      	ldr	r2, [pc, #108]	; (8024fa0 <HAL_UART_TxCpltCallback+0x94>)
 8024f34:	491e      	ldr	r1, [pc, #120]	; (8024fb0 <HAL_UART_TxCpltCallback+0xa4>)
 8024f36:	f7f0 fcb1 	bl	801589c <xQueueGenericSendFromISR>
				&xHigherPriorityTaskWoken);
		if (xHigherPriorityTaskWoken == pdTRUE) {
 8024f3a:	4b19      	ldr	r3, [pc, #100]	; (8024fa0 <HAL_UART_TxCpltCallback+0x94>)
 8024f3c:	681b      	ldr	r3, [r3, #0]
 8024f3e:	2b01      	cmp	r3, #1
 8024f40:	d10b      	bne.n	8024f5a <HAL_UART_TxCpltCallback+0x4e>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8024f42:	4b17      	ldr	r3, [pc, #92]	; (8024fa0 <HAL_UART_TxCpltCallback+0x94>)
 8024f44:	681b      	ldr	r3, [r3, #0]
 8024f46:	2b00      	cmp	r3, #0
 8024f48:	d007      	beq.n	8024f5a <HAL_UART_TxCpltCallback+0x4e>
 8024f4a:	4b1a      	ldr	r3, [pc, #104]	; (8024fb4 <HAL_UART_TxCpltCallback+0xa8>)
 8024f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8024f50:	601a      	str	r2, [r3, #0]
 8024f52:	f3bf 8f4f 	dsb	sy
 8024f56:	f3bf 8f6f 	isb	sy
		}
	}
	if (huart == hlog.interface) {
 8024f5a:	4b17      	ldr	r3, [pc, #92]	; (8024fb8 <HAL_UART_TxCpltCallback+0xac>)
 8024f5c:	681a      	ldr	r2, [r3, #0]
 8024f5e:	687b      	ldr	r3, [r7, #4]
 8024f60:	429a      	cmp	r2, r3
 8024f62:	d119      	bne.n	8024f98 <HAL_UART_TxCpltCallback+0x8c>
		xQueueSendFromISR(cleaner_queue, &(hlog.interface->pTxBuffPtr),
 8024f64:	4b11      	ldr	r3, [pc, #68]	; (8024fac <HAL_UART_TxCpltCallback+0xa0>)
 8024f66:	6818      	ldr	r0, [r3, #0]
 8024f68:	4b13      	ldr	r3, [pc, #76]	; (8024fb8 <HAL_UART_TxCpltCallback+0xac>)
 8024f6a:	681b      	ldr	r3, [r3, #0]
 8024f6c:	f103 0120 	add.w	r1, r3, #32
 8024f70:	2300      	movs	r3, #0
 8024f72:	4a0b      	ldr	r2, [pc, #44]	; (8024fa0 <HAL_UART_TxCpltCallback+0x94>)
 8024f74:	f7f0 fc92 	bl	801589c <xQueueGenericSendFromISR>
				&xHigherPriorityTaskWoken);
		if (xHigherPriorityTaskWoken == pdTRUE) {
 8024f78:	4b09      	ldr	r3, [pc, #36]	; (8024fa0 <HAL_UART_TxCpltCallback+0x94>)
 8024f7a:	681b      	ldr	r3, [r3, #0]
 8024f7c:	2b01      	cmp	r3, #1
 8024f7e:	d10b      	bne.n	8024f98 <HAL_UART_TxCpltCallback+0x8c>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8024f80:	4b07      	ldr	r3, [pc, #28]	; (8024fa0 <HAL_UART_TxCpltCallback+0x94>)
 8024f82:	681b      	ldr	r3, [r3, #0]
 8024f84:	2b00      	cmp	r3, #0
 8024f86:	d007      	beq.n	8024f98 <HAL_UART_TxCpltCallback+0x8c>
 8024f88:	4b0a      	ldr	r3, [pc, #40]	; (8024fb4 <HAL_UART_TxCpltCallback+0xa8>)
 8024f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8024f8e:	601a      	str	r2, [r3, #0]
 8024f90:	f3bf 8f4f 	dsb	sy
 8024f94:	f3bf 8f6f 	isb	sy
		}
	}
}
 8024f98:	bf00      	nop
 8024f9a:	3708      	adds	r7, #8
 8024f9c:	46bd      	mov	sp, r7
 8024f9e:	bd80      	pop	{r7, pc}
 8024fa0:	20004144 	.word	0x20004144
 8024fa4:	2000beec 	.word	0x2000beec
 8024fa8:	40021000 	.word	0x40021000
 8024fac:	2000bd5c 	.word	0x2000bd5c
 8024fb0:	2000bf0c 	.word	0x2000bf0c
 8024fb4:	e000ed04 	.word	0xe000ed04
 8024fb8:	2000bd60 	.word	0x2000bd60

08024fbc <StartProcessTask>:

void StartProcessTask(void const * argument) {
 8024fbc:	b580      	push	{r7, lr}
 8024fbe:	b084      	sub	sp, #16
 8024fc0:	af00      	add	r7, sp, #0
 8024fc2:	6078      	str	r0, [r7, #4]
	uint8_t len;
	static uint8_t cmd_data_buf[SIZE_OF_CMD_BUF];

	error_t err = NO_ERR;
 8024fc4:	2300      	movs	r3, #0
 8024fc6:	72fb      	strb	r3, [r7, #11]
	err = CB_Init(&inbuf_UART, UART_BUFF_SIZE);
 8024fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024fcc:	481c      	ldr	r0, [pc, #112]	; (8025040 <StartProcessTask+0x84>)
 8024fce:	f7fe f9b4 	bl	802333a <CB_Init>
 8024fd2:	4603      	mov	r3, r0
 8024fd4:	72fb      	strb	r3, [r7, #11]
	if (err != NO_ERR) {
 8024fd6:	7afb      	ldrb	r3, [r7, #11]
 8024fd8:	2b00      	cmp	r3, #0
 8024fda:	d004      	beq.n	8024fe6 <StartProcessTask+0x2a>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 8024fdc:	4a19      	ldr	r2, [pc, #100]	; (8025044 <StartProcessTask+0x88>)
 8024fde:	2101      	movs	r1, #1
 8024fe0:	2000      	movs	r0, #0
 8024fe2:	f7ff fbb7 	bl	8024754 <LogText__>
				"Circular buffer allocation error.\r\n");
	}
	HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 8024fe6:	2201      	movs	r2, #1
 8024fe8:	4917      	ldr	r1, [pc, #92]	; (8025048 <StartProcessTask+0x8c>)
 8024fea:	4818      	ldr	r0, [pc, #96]	; (802504c <StartProcessTask+0x90>)
 8024fec:	f7ee fd7b 	bl	8013ae6 <HAL_UART_Receive_IT>
	for (;;) {
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
 8024ff0:	4b17      	ldr	r3, [pc, #92]	; (8025050 <StartProcessTask+0x94>)
 8024ff2:	6818      	ldr	r0, [r3, #0]
 8024ff4:	f107 010a 	add.w	r1, r7, #10
 8024ff8:	2300      	movs	r3, #0
 8024ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8024ffe:	f7f0 fd6b 	bl	8015ad8 <xQueueGenericReceive>
		cmd_data_buf[SIZE_OF_CMD_BUF - 1] = len;
 8025002:	7aba      	ldrb	r2, [r7, #10]
 8025004:	4b13      	ldr	r3, [pc, #76]	; (8025054 <StartProcessTask+0x98>)
 8025006:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		uint pos = 0;
 802500a:	2300      	movs	r3, #0
 802500c:	60fb      	str	r3, [r7, #12]
		while (len) {
 802500e:	e00f      	b.n	8025030 <StartProcessTask+0x74>
			uint8_t ch;
			CB_Read(&inbuf_UART, &ch);
 8025010:	f107 0309 	add.w	r3, r7, #9
 8025014:	4619      	mov	r1, r3
 8025016:	480a      	ldr	r0, [pc, #40]	; (8025040 <StartProcessTask+0x84>)
 8025018:	f7fe f9ef 	bl	80233fa <CB_Read>
			--len;
 802501c:	7abb      	ldrb	r3, [r7, #10]
 802501e:	3b01      	subs	r3, #1
 8025020:	b2db      	uxtb	r3, r3
 8025022:	72bb      	strb	r3, [r7, #10]
			cmd_data_buf[pos++] = ch;
 8025024:	68fb      	ldr	r3, [r7, #12]
 8025026:	1c5a      	adds	r2, r3, #1
 8025028:	60fa      	str	r2, [r7, #12]
 802502a:	7a79      	ldrb	r1, [r7, #9]
 802502c:	4a09      	ldr	r2, [pc, #36]	; (8025054 <StartProcessTask+0x98>)
 802502e:	54d1      	strb	r1, [r2, r3]
		while (len) {
 8025030:	7abb      	ldrb	r3, [r7, #10]
 8025032:	2b00      	cmp	r3, #0
 8025034:	d1ec      	bne.n	8025010 <StartProcessTask+0x54>
		}
		CommandParser(cmd_data_buf);
 8025036:	4807      	ldr	r0, [pc, #28]	; (8025054 <StartProcessTask+0x98>)
 8025038:	f000 f8a6 	bl	8025188 <CommandParser>
	for (;;) {
 802503c:	e7d8      	b.n	8024ff0 <StartProcessTask+0x34>
 802503e:	bf00      	nop
 8025040:	2000bdb8 	.word	0x2000bdb8
 8025044:	08028f68 	.word	0x08028f68
 8025048:	2000bdb4 	.word	0x2000bdb4
 802504c:	2000beec 	.word	0x2000beec
 8025050:	2000bd4c 	.word	0x2000bd4c
 8025054:	20004148 	.word	0x20004148

08025058 <ProtocolSettingsInit>:
 *      Author: AZharkov
 */

#include "protocol.h"

void ProtocolSettingsInit(profibus_MPI_t* hp) {
 8025058:	b480      	push	{r7}
 802505a:	b083      	sub	sp, #12
 802505c:	af00      	add	r7, sp, #0
 802505e:	6078      	str	r0, [r7, #4]
	hp->own_address = hflash.own_addr;
 8025060:	4b0e      	ldr	r3, [pc, #56]	; (802509c <ProtocolSettingsInit+0x44>)
 8025062:	889b      	ldrh	r3, [r3, #4]
 8025064:	b2da      	uxtb	r2, r3
 8025066:	687b      	ldr	r3, [r7, #4]
 8025068:	701a      	strb	r2, [r3, #0]
	hp->speed = hflash.speed;
 802506a:	4b0c      	ldr	r3, [pc, #48]	; (802509c <ProtocolSettingsInit+0x44>)
 802506c:	681a      	ldr	r2, [r3, #0]
 802506e:	687b      	ldr	r3, [r7, #4]
 8025070:	605a      	str	r2, [r3, #4]
	hp->token_possession = 0U;
 8025072:	687b      	ldr	r3, [r7, #4]
 8025074:	2200      	movs	r2, #0
 8025076:	705a      	strb	r2, [r3, #1]
	hp->have_data_to_send = 0U;
 8025078:	687b      	ldr	r3, [r7, #4]
 802507a:	2200      	movs	r2, #0
 802507c:	709a      	strb	r2, [r3, #2]
	hp->wait_for_answer = 0U;
 802507e:	687b      	ldr	r3, [r7, #4]
 8025080:	2200      	movs	r2, #0
 8025082:	70da      	strb	r2, [r3, #3]
	hp->data_ptr = NULL;
 8025084:	687b      	ldr	r3, [r7, #4]
 8025086:	2200      	movs	r2, #0
 8025088:	609a      	str	r2, [r3, #8]
	hp->data_len = 0U;
 802508a:	687b      	ldr	r3, [r7, #4]
 802508c:	2200      	movs	r2, #0
 802508e:	731a      	strb	r2, [r3, #12]
}
 8025090:	bf00      	nop
 8025092:	370c      	adds	r7, #12
 8025094:	46bd      	mov	sp, r7
 8025096:	f85d 7b04 	ldr.w	r7, [sp], #4
 802509a:	4770      	bx	lr
 802509c:	20008c54 	.word	0x20008c54

080250a0 <CalculateFCS>:

uint8_t CalculateFCS(uint8_t * buf, uint8_t len) {
 80250a0:	b480      	push	{r7}
 80250a2:	b085      	sub	sp, #20
 80250a4:	af00      	add	r7, sp, #0
 80250a6:	6078      	str	r0, [r7, #4]
 80250a8:	460b      	mov	r3, r1
 80250aa:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0;
 80250ac:	2300      	movs	r3, #0
 80250ae:	73fb      	strb	r3, [r7, #15]
	while (len--) {
 80250b0:	e006      	b.n	80250c0 <CalculateFCS+0x20>
		result += *buf++;
 80250b2:	687b      	ldr	r3, [r7, #4]
 80250b4:	1c5a      	adds	r2, r3, #1
 80250b6:	607a      	str	r2, [r7, #4]
 80250b8:	781a      	ldrb	r2, [r3, #0]
 80250ba:	7bfb      	ldrb	r3, [r7, #15]
 80250bc:	4413      	add	r3, r2
 80250be:	73fb      	strb	r3, [r7, #15]
	while (len--) {
 80250c0:	78fb      	ldrb	r3, [r7, #3]
 80250c2:	1e5a      	subs	r2, r3, #1
 80250c4:	70fa      	strb	r2, [r7, #3]
 80250c6:	2b00      	cmp	r3, #0
 80250c8:	d1f3      	bne.n	80250b2 <CalculateFCS+0x12>
	}
	return result;
 80250ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80250cc:	4618      	mov	r0, r3
 80250ce:	3714      	adds	r7, #20
 80250d0:	46bd      	mov	sp, r7
 80250d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250d6:	4770      	bx	lr

080250d8 <TokenCmdProcessing>:

static inline error_t TokenCmdProcessing(telegram_t * tel) {
 80250d8:	b580      	push	{r7, lr}
 80250da:	b082      	sub	sp, #8
 80250dc:	af00      	add	r7, sp, #0
 80250de:	6078      	str	r0, [r7, #4]
	if (hprot.have_data_to_send == 0U) {
 80250e0:	4b13      	ldr	r3, [pc, #76]	; (8025130 <TokenCmdProcessing+0x58>)
 80250e2:	789b      	ldrb	r3, [r3, #2]
 80250e4:	b2db      	uxtb	r3, r3
 80250e6:	2b00      	cmp	r3, #0
 80250e8:	d10b      	bne.n	8025102 <TokenCmdProcessing+0x2a>
		SendTokenMsg(tel->SA, hprot.own_address);
 80250ea:	687b      	ldr	r3, [r7, #4]
 80250ec:	791a      	ldrb	r2, [r3, #4]
 80250ee:	4b10      	ldr	r3, [pc, #64]	; (8025130 <TokenCmdProcessing+0x58>)
 80250f0:	781b      	ldrb	r3, [r3, #0]
 80250f2:	4619      	mov	r1, r3
 80250f4:	4610      	mov	r0, r2
 80250f6:	f7ff fdc3 	bl	8024c80 <SendTokenMsg>
		hprot.token_possession = 0U;
 80250fa:	4b0d      	ldr	r3, [pc, #52]	; (8025130 <TokenCmdProcessing+0x58>)
 80250fc:	2200      	movs	r2, #0
 80250fe:	705a      	strb	r2, [r3, #1]
 8025100:	e010      	b.n	8025124 <TokenCmdProcessing+0x4c>
	} else {
		hprot.token_possession = 1U;
 8025102:	4b0b      	ldr	r3, [pc, #44]	; (8025130 <TokenCmdProcessing+0x58>)
 8025104:	2201      	movs	r2, #1
 8025106:	705a      	strb	r2, [r3, #1]
		SendRequestMsg(tel->SA,hprot.own_address,hprot.data_ptr,hprot.data_len);
 8025108:	687b      	ldr	r3, [r7, #4]
 802510a:	7918      	ldrb	r0, [r3, #4]
 802510c:	4b08      	ldr	r3, [pc, #32]	; (8025130 <TokenCmdProcessing+0x58>)
 802510e:	7819      	ldrb	r1, [r3, #0]
 8025110:	4b07      	ldr	r3, [pc, #28]	; (8025130 <TokenCmdProcessing+0x58>)
 8025112:	689a      	ldr	r2, [r3, #8]
 8025114:	4b06      	ldr	r3, [pc, #24]	; (8025130 <TokenCmdProcessing+0x58>)
 8025116:	7b1b      	ldrb	r3, [r3, #12]
 8025118:	b2db      	uxtb	r3, r3
 802511a:	f7ff fe17 	bl	8024d4c <SendRequestMsg>
		hprot.have_data_to_send = 0U;
 802511e:	4b04      	ldr	r3, [pc, #16]	; (8025130 <TokenCmdProcessing+0x58>)
 8025120:	2200      	movs	r2, #0
 8025122:	709a      	strb	r2, [r3, #2]
	}

	return NO_ERR;
 8025124:	2300      	movs	r3, #0
}
 8025126:	4618      	mov	r0, r3
 8025128:	3708      	adds	r7, #8
 802512a:	46bd      	mov	sp, r7
 802512c:	bd80      	pop	{r7, pc}
 802512e:	bf00      	nop
 8025130:	2000bdc8 	.word	0x2000bdc8

08025134 <NoDataCmdProcessing>:

static inline error_t NoDataCmdProcessing(telegram_t * tel) {
 8025134:	b580      	push	{r7, lr}
 8025136:	b082      	sub	sp, #8
 8025138:	af00      	add	r7, sp, #0
 802513a:	6078      	str	r0, [r7, #4]
	if (tel->FC == 0x49) {
 802513c:	687b      	ldr	r3, [r7, #4]
 802513e:	795b      	ldrb	r3, [r3, #5]
 8025140:	2b49      	cmp	r3, #73	; 0x49
 8025142:	d107      	bne.n	8025154 <NoDataCmdProcessing+0x20>
		SendNoDataMsg(tel->SA, tel->DA, 0x20);
 8025144:	687b      	ldr	r3, [r7, #4]
 8025146:	7918      	ldrb	r0, [r3, #4]
 8025148:	687b      	ldr	r3, [r7, #4]
 802514a:	78db      	ldrb	r3, [r3, #3]
 802514c:	2220      	movs	r2, #32
 802514e:	4619      	mov	r1, r3
 8025150:	f7ff fdc0 	bl	8024cd4 <SendNoDataMsg>
	}
	return NO_ERR;
 8025154:	2300      	movs	r3, #0
}
 8025156:	4618      	mov	r0, r3
 8025158:	3708      	adds	r7, #8
 802515a:	46bd      	mov	sp, r7
 802515c:	bd80      	pop	{r7, pc}

0802515e <VarDataCmdProcessing>:

static inline error_t VarDataCmdProcessing(telegram_t * tel) {
 802515e:	b580      	push	{r7, lr}
 8025160:	b082      	sub	sp, #8
 8025162:	af00      	add	r7, sp, #0
 8025164:	6078      	str	r0, [r7, #4]

	if (tel->PDU != NULL) {
 8025166:	687b      	ldr	r3, [r7, #4]
 8025168:	68db      	ldr	r3, [r3, #12]
 802516a:	2b00      	cmp	r3, #0
 802516c:	d007      	beq.n	802517e <VarDataCmdProcessing+0x20>
		vPortFree(tel->PDU);
 802516e:	687b      	ldr	r3, [r7, #4]
 8025170:	68db      	ldr	r3, [r3, #12]
 8025172:	4618      	mov	r0, r3
 8025174:	f7f0 f88e 	bl	8015294 <vPortFree>
		tel->PDU = NULL;
 8025178:	687b      	ldr	r3, [r7, #4]
 802517a:	2200      	movs	r2, #0
 802517c:	60da      	str	r2, [r3, #12]
	}
	return NO_ERR;
 802517e:	2300      	movs	r3, #0
}
 8025180:	4618      	mov	r0, r3
 8025182:	3708      	adds	r7, #8
 8025184:	46bd      	mov	sp, r7
 8025186:	bd80      	pop	{r7, pc}

08025188 <CommandParser>:
static inline error_t FixDataCmdProcessing(telegram_t * tel) {

	return NO_ERR;
}

error_t CommandParser(uint8_t *buf) {
 8025188:	b580      	push	{r7, lr}
 802518a:	b084      	sub	sp, #16
 802518c:	af00      	add	r7, sp, #0
 802518e:	6078      	str	r0, [r7, #4]
	static telegram_t htel;
	htel.SD = *buf++;
 8025190:	687b      	ldr	r3, [r7, #4]
 8025192:	1c5a      	adds	r2, r3, #1
 8025194:	607a      	str	r2, [r7, #4]
 8025196:	781a      	ldrb	r2, [r3, #0]
 8025198:	4b80      	ldr	r3, [pc, #512]	; (802539c <CommandParser+0x214>)
 802519a:	701a      	strb	r2, [r3, #0]
	switch (htel.SD) {
 802519c:	4b7f      	ldr	r3, [pc, #508]	; (802539c <CommandParser+0x214>)
 802519e:	781b      	ldrb	r3, [r3, #0]
 80251a0:	2b68      	cmp	r3, #104	; 0x68
 80251a2:	d057      	beq.n	8025254 <CommandParser+0xcc>
 80251a4:	2b68      	cmp	r3, #104	; 0x68
 80251a6:	dc02      	bgt.n	80251ae <CommandParser+0x26>
 80251a8:	2b10      	cmp	r3, #16
 80251aa:	d01d      	beq.n	80251e8 <CommandParser+0x60>
 80251ac:	e0ee      	b.n	802538c <CommandParser+0x204>
 80251ae:	2ba2      	cmp	r3, #162	; 0xa2
 80251b0:	f000 80ee 	beq.w	8025390 <CommandParser+0x208>
 80251b4:	2bdc      	cmp	r3, #220	; 0xdc
 80251b6:	f040 80e9 	bne.w	802538c <CommandParser+0x204>
	case 0xDC: /* Token  */
		/* Format: |SD4|DA|SA|*/
		htel.DA = *buf++;
 80251ba:	687b      	ldr	r3, [r7, #4]
 80251bc:	1c5a      	adds	r2, r3, #1
 80251be:	607a      	str	r2, [r7, #4]
 80251c0:	781a      	ldrb	r2, [r3, #0]
 80251c2:	4b76      	ldr	r3, [pc, #472]	; (802539c <CommandParser+0x214>)
 80251c4:	70da      	strb	r2, [r3, #3]
		if (htel.DA != hprot.own_address) {
 80251c6:	4b75      	ldr	r3, [pc, #468]	; (802539c <CommandParser+0x214>)
 80251c8:	78da      	ldrb	r2, [r3, #3]
 80251ca:	4b75      	ldr	r3, [pc, #468]	; (80253a0 <CommandParser+0x218>)
 80251cc:	781b      	ldrb	r3, [r3, #0]
 80251ce:	429a      	cmp	r2, r3
 80251d0:	d001      	beq.n	80251d6 <CommandParser+0x4e>
			return NO_ERR;
 80251d2:	2300      	movs	r3, #0
 80251d4:	e0de      	b.n	8025394 <CommandParser+0x20c>
		}
		htel.SA = *buf;
 80251d6:	687b      	ldr	r3, [r7, #4]
 80251d8:	781a      	ldrb	r2, [r3, #0]
 80251da:	4b70      	ldr	r3, [pc, #448]	; (802539c <CommandParser+0x214>)
 80251dc:	711a      	strb	r2, [r3, #4]
		return TokenCmdProcessing(&htel);
 80251de:	486f      	ldr	r0, [pc, #444]	; (802539c <CommandParser+0x214>)
 80251e0:	f7ff ff7a 	bl	80250d8 <TokenCmdProcessing>
 80251e4:	4603      	mov	r3, r0
 80251e6:	e0d5      	b.n	8025394 <CommandParser+0x20c>
		break;
	case 0x10: /* No data */
		/* Format: |SD1|DA|SA|FC|FCS|ED| */
		if (CalculateFCS(buf, 3) != *(buf + 3)) {
 80251e8:	2103      	movs	r1, #3
 80251ea:	6878      	ldr	r0, [r7, #4]
 80251ec:	f7ff ff58 	bl	80250a0 <CalculateFCS>
 80251f0:	4603      	mov	r3, r0
 80251f2:	461a      	mov	r2, r3
 80251f4:	687b      	ldr	r3, [r7, #4]
 80251f6:	3303      	adds	r3, #3
 80251f8:	781b      	ldrb	r3, [r3, #0]
 80251fa:	429a      	cmp	r2, r3
 80251fc:	d001      	beq.n	8025202 <CommandParser+0x7a>
			return FCS_ERR;
 80251fe:	2307      	movs	r3, #7
 8025200:	e0c8      	b.n	8025394 <CommandParser+0x20c>
		}
		htel.DA = *buf++;
 8025202:	687b      	ldr	r3, [r7, #4]
 8025204:	1c5a      	adds	r2, r3, #1
 8025206:	607a      	str	r2, [r7, #4]
 8025208:	781a      	ldrb	r2, [r3, #0]
 802520a:	4b64      	ldr	r3, [pc, #400]	; (802539c <CommandParser+0x214>)
 802520c:	70da      	strb	r2, [r3, #3]
		if (htel.DA != hprot.own_address) {
 802520e:	4b63      	ldr	r3, [pc, #396]	; (802539c <CommandParser+0x214>)
 8025210:	78da      	ldrb	r2, [r3, #3]
 8025212:	4b63      	ldr	r3, [pc, #396]	; (80253a0 <CommandParser+0x218>)
 8025214:	781b      	ldrb	r3, [r3, #0]
 8025216:	429a      	cmp	r2, r3
 8025218:	d001      	beq.n	802521e <CommandParser+0x96>
			return NO_ERR;
 802521a:	2300      	movs	r3, #0
 802521c:	e0ba      	b.n	8025394 <CommandParser+0x20c>
		}
		htel.SA = *buf++;
 802521e:	687b      	ldr	r3, [r7, #4]
 8025220:	1c5a      	adds	r2, r3, #1
 8025222:	607a      	str	r2, [r7, #4]
 8025224:	781a      	ldrb	r2, [r3, #0]
 8025226:	4b5d      	ldr	r3, [pc, #372]	; (802539c <CommandParser+0x214>)
 8025228:	711a      	strb	r2, [r3, #4]
		htel.FC = *buf++;
 802522a:	687b      	ldr	r3, [r7, #4]
 802522c:	1c5a      	adds	r2, r3, #1
 802522e:	607a      	str	r2, [r7, #4]
 8025230:	781a      	ldrb	r2, [r3, #0]
 8025232:	4b5a      	ldr	r3, [pc, #360]	; (802539c <CommandParser+0x214>)
 8025234:	715a      	strb	r2, [r3, #5]
		htel.FCS = *buf++;
 8025236:	687b      	ldr	r3, [r7, #4]
 8025238:	1c5a      	adds	r2, r3, #1
 802523a:	607a      	str	r2, [r7, #4]
 802523c:	781a      	ldrb	r2, [r3, #0]
 802523e:	4b57      	ldr	r3, [pc, #348]	; (802539c <CommandParser+0x214>)
 8025240:	741a      	strb	r2, [r3, #16]
		htel.ED = *buf;
 8025242:	687b      	ldr	r3, [r7, #4]
 8025244:	781a      	ldrb	r2, [r3, #0]
 8025246:	4b55      	ldr	r3, [pc, #340]	; (802539c <CommandParser+0x214>)
 8025248:	745a      	strb	r2, [r3, #17]
		return NoDataCmdProcessing(&htel);
 802524a:	4854      	ldr	r0, [pc, #336]	; (802539c <CommandParser+0x214>)
 802524c:	f7ff ff72 	bl	8025134 <NoDataCmdProcessing>
 8025250:	4603      	mov	r3, r0
 8025252:	e09f      	b.n	8025394 <CommandParser+0x20c>
		break;
	case 0x68:
		/* Variable length data */
		/* Format by wiki: |SD2|LE|LEr|SD2|DA|SA|FC|DSAP|SSAP|PDU|FCS|ED| */
		/* Real MPI frame: |SD2|LE|LEr|SD2|DA|SA|FC|DSAP|SSAP|F1/[B0|0x]|RN|PDU|FCS|ED| */
		htel.LE = *buf++;
 8025254:	687b      	ldr	r3, [r7, #4]
 8025256:	1c5a      	adds	r2, r3, #1
 8025258:	607a      	str	r2, [r7, #4]
 802525a:	781a      	ldrb	r2, [r3, #0]
 802525c:	4b4f      	ldr	r3, [pc, #316]	; (802539c <CommandParser+0x214>)
 802525e:	705a      	strb	r2, [r3, #1]
		htel.LEr = *buf++;
 8025260:	687b      	ldr	r3, [r7, #4]
 8025262:	1c5a      	adds	r2, r3, #1
 8025264:	607a      	str	r2, [r7, #4]
 8025266:	781a      	ldrb	r2, [r3, #0]
 8025268:	4b4c      	ldr	r3, [pc, #304]	; (802539c <CommandParser+0x214>)
 802526a:	709a      	strb	r2, [r3, #2]
		buf++;
 802526c:	687b      	ldr	r3, [r7, #4]
 802526e:	3301      	adds	r3, #1
 8025270:	607b      	str	r3, [r7, #4]
		if (htel.LE != htel.LEr) {
 8025272:	4b4a      	ldr	r3, [pc, #296]	; (802539c <CommandParser+0x214>)
 8025274:	785a      	ldrb	r2, [r3, #1]
 8025276:	4b49      	ldr	r3, [pc, #292]	; (802539c <CommandParser+0x214>)
 8025278:	789b      	ldrb	r3, [r3, #2]
 802527a:	429a      	cmp	r2, r3
 802527c:	d001      	beq.n	8025282 <CommandParser+0xfa>
			return FRAME_ERR;
 802527e:	2306      	movs	r3, #6
 8025280:	e088      	b.n	8025394 <CommandParser+0x20c>
		}
		if (CalculateFCS(buf, htel.LE) != *(buf + htel.LE)) {
 8025282:	4b46      	ldr	r3, [pc, #280]	; (802539c <CommandParser+0x214>)
 8025284:	785b      	ldrb	r3, [r3, #1]
 8025286:	4619      	mov	r1, r3
 8025288:	6878      	ldr	r0, [r7, #4]
 802528a:	f7ff ff09 	bl	80250a0 <CalculateFCS>
 802528e:	4603      	mov	r3, r0
 8025290:	461a      	mov	r2, r3
 8025292:	4b42      	ldr	r3, [pc, #264]	; (802539c <CommandParser+0x214>)
 8025294:	785b      	ldrb	r3, [r3, #1]
 8025296:	4619      	mov	r1, r3
 8025298:	687b      	ldr	r3, [r7, #4]
 802529a:	440b      	add	r3, r1
 802529c:	781b      	ldrb	r3, [r3, #0]
 802529e:	429a      	cmp	r2, r3
 80252a0:	d001      	beq.n	80252a6 <CommandParser+0x11e>
			return FCS_ERR;
 80252a2:	2307      	movs	r3, #7
 80252a4:	e076      	b.n	8025394 <CommandParser+0x20c>
		}
		htel.DA = *buf++;
 80252a6:	687b      	ldr	r3, [r7, #4]
 80252a8:	1c5a      	adds	r2, r3, #1
 80252aa:	607a      	str	r2, [r7, #4]
 80252ac:	781a      	ldrb	r2, [r3, #0]
 80252ae:	4b3b      	ldr	r3, [pc, #236]	; (802539c <CommandParser+0x214>)
 80252b0:	70da      	strb	r2, [r3, #3]
		if ((htel.DA & 0x7F) != hprot.own_address) { /* Broadcast message */
 80252b2:	4b3a      	ldr	r3, [pc, #232]	; (802539c <CommandParser+0x214>)
 80252b4:	78db      	ldrb	r3, [r3, #3]
 80252b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80252ba:	4a39      	ldr	r2, [pc, #228]	; (80253a0 <CommandParser+0x218>)
 80252bc:	7812      	ldrb	r2, [r2, #0]
 80252be:	4293      	cmp	r3, r2
 80252c0:	d001      	beq.n	80252c6 <CommandParser+0x13e>
			return NO_ERR;
 80252c2:	2300      	movs	r3, #0
 80252c4:	e066      	b.n	8025394 <CommandParser+0x20c>
		}
		htel.SA = *buf++;
 80252c6:	687b      	ldr	r3, [r7, #4]
 80252c8:	1c5a      	adds	r2, r3, #1
 80252ca:	607a      	str	r2, [r7, #4]
 80252cc:	781a      	ldrb	r2, [r3, #0]
 80252ce:	4b33      	ldr	r3, [pc, #204]	; (802539c <CommandParser+0x214>)
 80252d0:	711a      	strb	r2, [r3, #4]
		htel.FC = *buf++;
 80252d2:	687b      	ldr	r3, [r7, #4]
 80252d4:	1c5a      	adds	r2, r3, #1
 80252d6:	607a      	str	r2, [r7, #4]
 80252d8:	781a      	ldrb	r2, [r3, #0]
 80252da:	4b30      	ldr	r3, [pc, #192]	; (802539c <CommandParser+0x214>)
 80252dc:	715a      	strb	r2, [r3, #5]
		htel.DSAP = *buf++;
 80252de:	687b      	ldr	r3, [r7, #4]
 80252e0:	1c5a      	adds	r2, r3, #1
 80252e2:	607a      	str	r2, [r7, #4]
 80252e4:	781a      	ldrb	r2, [r3, #0]
 80252e6:	4b2d      	ldr	r3, [pc, #180]	; (802539c <CommandParser+0x214>)
 80252e8:	719a      	strb	r2, [r3, #6]
		htel.SSAP = *buf++;
 80252ea:	687b      	ldr	r3, [r7, #4]
 80252ec:	1c5a      	adds	r2, r3, #1
 80252ee:	607a      	str	r2, [r7, #4]
 80252f0:	781a      	ldrb	r2, [r3, #0]
 80252f2:	4b2a      	ldr	r3, [pc, #168]	; (802539c <CommandParser+0x214>)
 80252f4:	71da      	strb	r2, [r3, #7]
		htel.UK1 = *buf++;
 80252f6:	687b      	ldr	r3, [r7, #4]
 80252f8:	1c5a      	adds	r2, r3, #1
 80252fa:	607a      	str	r2, [r7, #4]
 80252fc:	781a      	ldrb	r2, [r3, #0]
 80252fe:	4b27      	ldr	r3, [pc, #156]	; (802539c <CommandParser+0x214>)
 8025300:	721a      	strb	r2, [r3, #8]
		if (htel.UK1 == 0xB0) {
 8025302:	4b26      	ldr	r3, [pc, #152]	; (802539c <CommandParser+0x214>)
 8025304:	7a1b      	ldrb	r3, [r3, #8]
 8025306:	2bb0      	cmp	r3, #176	; 0xb0
 8025308:	d116      	bne.n	8025338 <CommandParser+0x1b0>
			htel.UK2 = *buf++;
 802530a:	687b      	ldr	r3, [r7, #4]
 802530c:	1c5a      	adds	r2, r3, #1
 802530e:	607a      	str	r2, [r7, #4]
 8025310:	781a      	ldrb	r2, [r3, #0]
 8025312:	4b22      	ldr	r3, [pc, #136]	; (802539c <CommandParser+0x214>)
 8025314:	725a      	strb	r2, [r3, #9]
			htel.RN = *buf++;
 8025316:	687b      	ldr	r3, [r7, #4]
 8025318:	1c5a      	adds	r2, r3, #1
 802531a:	607a      	str	r2, [r7, #4]
 802531c:	781a      	ldrb	r2, [r3, #0]
 802531e:	4b1f      	ldr	r3, [pc, #124]	; (802539c <CommandParser+0x214>)
 8025320:	729a      	strb	r2, [r3, #10]
			htel.FCS = *buf++;
 8025322:	687b      	ldr	r3, [r7, #4]
 8025324:	1c5a      	adds	r2, r3, #1
 8025326:	607a      	str	r2, [r7, #4]
 8025328:	781a      	ldrb	r2, [r3, #0]
 802532a:	4b1c      	ldr	r3, [pc, #112]	; (802539c <CommandParser+0x214>)
 802532c:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 802532e:	687b      	ldr	r3, [r7, #4]
 8025330:	781a      	ldrb	r2, [r3, #0]
 8025332:	4b1a      	ldr	r3, [pc, #104]	; (802539c <CommandParser+0x214>)
 8025334:	745a      	strb	r2, [r3, #17]
 8025336:	e024      	b.n	8025382 <CommandParser+0x1fa>
		} else {
			htel.RN = *buf++;
 8025338:	687b      	ldr	r3, [r7, #4]
 802533a:	1c5a      	adds	r2, r3, #1
 802533c:	607a      	str	r2, [r7, #4]
 802533e:	781a      	ldrb	r2, [r3, #0]
 8025340:	4b16      	ldr	r3, [pc, #88]	; (802539c <CommandParser+0x214>)
 8025342:	729a      	strb	r2, [r3, #10]
			uint pdu_size = htel.LE - 7;
 8025344:	4b15      	ldr	r3, [pc, #84]	; (802539c <CommandParser+0x214>)
 8025346:	785b      	ldrb	r3, [r3, #1]
 8025348:	3b07      	subs	r3, #7
 802534a:	60fb      	str	r3, [r7, #12]
			htel.PDU = (uint8_t*) pvPortMalloc(pdu_size);
 802534c:	68f8      	ldr	r0, [r7, #12]
 802534e:	f7ef fedf 	bl	8015110 <pvPortMalloc>
 8025352:	4602      	mov	r2, r0
 8025354:	4b11      	ldr	r3, [pc, #68]	; (802539c <CommandParser+0x214>)
 8025356:	60da      	str	r2, [r3, #12]
			memcpy(htel.PDU, buf, pdu_size);
 8025358:	4b10      	ldr	r3, [pc, #64]	; (802539c <CommandParser+0x214>)
 802535a:	68db      	ldr	r3, [r3, #12]
 802535c:	68fa      	ldr	r2, [r7, #12]
 802535e:	6879      	ldr	r1, [r7, #4]
 8025360:	4618      	mov	r0, r3
 8025362:	f001 f8b0 	bl	80264c6 <memcpy>
			buf += pdu_size;
 8025366:	687a      	ldr	r2, [r7, #4]
 8025368:	68fb      	ldr	r3, [r7, #12]
 802536a:	4413      	add	r3, r2
 802536c:	607b      	str	r3, [r7, #4]
			htel.FCS = *buf++;
 802536e:	687b      	ldr	r3, [r7, #4]
 8025370:	1c5a      	adds	r2, r3, #1
 8025372:	607a      	str	r2, [r7, #4]
 8025374:	781a      	ldrb	r2, [r3, #0]
 8025376:	4b09      	ldr	r3, [pc, #36]	; (802539c <CommandParser+0x214>)
 8025378:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 802537a:	687b      	ldr	r3, [r7, #4]
 802537c:	781a      	ldrb	r2, [r3, #0]
 802537e:	4b07      	ldr	r3, [pc, #28]	; (802539c <CommandParser+0x214>)
 8025380:	745a      	strb	r2, [r3, #17]
		}
		return VarDataCmdProcessing(&htel);
 8025382:	4806      	ldr	r0, [pc, #24]	; (802539c <CommandParser+0x214>)
 8025384:	f7ff feeb 	bl	802515e <VarDataCmdProcessing>
 8025388:	4603      	mov	r3, r0
 802538a:	e003      	b.n	8025394 <CommandParser+0x20c>
		break;
	case 0xA2:
		/* Fixed length data */
		break;
	default:
		return UNKNOWN_SD_ERR;
 802538c:	2305      	movs	r3, #5
 802538e:	e001      	b.n	8025394 <CommandParser+0x20c>
		break;
 8025390:	bf00      	nop
	}
	return NO_ERR;
 8025392:	2300      	movs	r3, #0
}
 8025394:	4618      	mov	r0, r3
 8025396:	3710      	adds	r7, #16
 8025398:	46bd      	mov	sp, r7
 802539a:	bd80      	pop	{r7, pc}
 802539c:	20004248 	.word	0x20004248
 80253a0:	2000bdc8 	.word	0x2000bdc8

080253a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80253a4:	b580      	push	{r7, lr}
 80253a6:	b082      	sub	sp, #8
 80253a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80253aa:	2300      	movs	r3, #0
 80253ac:	607b      	str	r3, [r7, #4]
 80253ae:	4a12      	ldr	r2, [pc, #72]	; (80253f8 <HAL_MspInit+0x54>)
 80253b0:	4b11      	ldr	r3, [pc, #68]	; (80253f8 <HAL_MspInit+0x54>)
 80253b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80253b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80253b8:	6453      	str	r3, [r2, #68]	; 0x44
 80253ba:	4b0f      	ldr	r3, [pc, #60]	; (80253f8 <HAL_MspInit+0x54>)
 80253bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80253be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80253c2:	607b      	str	r3, [r7, #4]
 80253c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80253c6:	2300      	movs	r3, #0
 80253c8:	603b      	str	r3, [r7, #0]
 80253ca:	4a0b      	ldr	r2, [pc, #44]	; (80253f8 <HAL_MspInit+0x54>)
 80253cc:	4b0a      	ldr	r3, [pc, #40]	; (80253f8 <HAL_MspInit+0x54>)
 80253ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80253d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80253d4:	6413      	str	r3, [r2, #64]	; 0x40
 80253d6:	4b08      	ldr	r3, [pc, #32]	; (80253f8 <HAL_MspInit+0x54>)
 80253d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80253da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80253de:	603b      	str	r3, [r7, #0]
 80253e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80253e2:	2200      	movs	r2, #0
 80253e4:	210f      	movs	r1, #15
 80253e6:	f06f 0001 	mvn.w	r0, #1
 80253ea:	f7eb f8f3 	bl	80105d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80253ee:	bf00      	nop
 80253f0:	3708      	adds	r7, #8
 80253f2:	46bd      	mov	sp, r7
 80253f4:	bd80      	pop	{r7, pc}
 80253f6:	bf00      	nop
 80253f8:	40023800 	.word	0x40023800

080253fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80253fc:	b580      	push	{r7, lr}
 80253fe:	b08c      	sub	sp, #48	; 0x30
 8025400:	af00      	add	r7, sp, #0
 8025402:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8025404:	2300      	movs	r3, #0
 8025406:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8025408:	2300      	movs	r3, #0
 802540a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 802540c:	2200      	movs	r2, #0
 802540e:	6879      	ldr	r1, [r7, #4]
 8025410:	2019      	movs	r0, #25
 8025412:	f7eb f8df 	bl	80105d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8025416:	2019      	movs	r0, #25
 8025418:	f7eb f8f8 	bl	801060c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 802541c:	2300      	movs	r3, #0
 802541e:	60fb      	str	r3, [r7, #12]
 8025420:	4a1f      	ldr	r2, [pc, #124]	; (80254a0 <HAL_InitTick+0xa4>)
 8025422:	4b1f      	ldr	r3, [pc, #124]	; (80254a0 <HAL_InitTick+0xa4>)
 8025424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025426:	f043 0301 	orr.w	r3, r3, #1
 802542a:	6453      	str	r3, [r2, #68]	; 0x44
 802542c:	4b1c      	ldr	r3, [pc, #112]	; (80254a0 <HAL_InitTick+0xa4>)
 802542e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025430:	f003 0301 	and.w	r3, r3, #1
 8025434:	60fb      	str	r3, [r7, #12]
 8025436:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8025438:	f107 0210 	add.w	r2, r7, #16
 802543c:	f107 0314 	add.w	r3, r7, #20
 8025440:	4611      	mov	r1, r2
 8025442:	4618      	mov	r0, r3
 8025444:	f7ed fe84 	bl	8013150 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8025448:	f7ed fe6e 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 802544c:	4603      	mov	r3, r0
 802544e:	005b      	lsls	r3, r3, #1
 8025450:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8025452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025454:	4a13      	ldr	r2, [pc, #76]	; (80254a4 <HAL_InitTick+0xa8>)
 8025456:	fba2 2303 	umull	r2, r3, r2, r3
 802545a:	0c9b      	lsrs	r3, r3, #18
 802545c:	3b01      	subs	r3, #1
 802545e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8025460:	4b11      	ldr	r3, [pc, #68]	; (80254a8 <HAL_InitTick+0xac>)
 8025462:	4a12      	ldr	r2, [pc, #72]	; (80254ac <HAL_InitTick+0xb0>)
 8025464:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8025466:	4b10      	ldr	r3, [pc, #64]	; (80254a8 <HAL_InitTick+0xac>)
 8025468:	f240 32e7 	movw	r2, #999	; 0x3e7
 802546c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 802546e:	4a0e      	ldr	r2, [pc, #56]	; (80254a8 <HAL_InitTick+0xac>)
 8025470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025472:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8025474:	4b0c      	ldr	r3, [pc, #48]	; (80254a8 <HAL_InitTick+0xac>)
 8025476:	2200      	movs	r2, #0
 8025478:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 802547a:	4b0b      	ldr	r3, [pc, #44]	; (80254a8 <HAL_InitTick+0xac>)
 802547c:	2200      	movs	r2, #0
 802547e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8025480:	4809      	ldr	r0, [pc, #36]	; (80254a8 <HAL_InitTick+0xac>)
 8025482:	f7ed fe97 	bl	80131b4 <HAL_TIM_Base_Init>
 8025486:	4603      	mov	r3, r0
 8025488:	2b00      	cmp	r3, #0
 802548a:	d104      	bne.n	8025496 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 802548c:	4806      	ldr	r0, [pc, #24]	; (80254a8 <HAL_InitTick+0xac>)
 802548e:	f7ed febc 	bl	801320a <HAL_TIM_Base_Start_IT>
 8025492:	4603      	mov	r3, r0
 8025494:	e000      	b.n	8025498 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8025496:	2301      	movs	r3, #1
}
 8025498:	4618      	mov	r0, r3
 802549a:	3730      	adds	r7, #48	; 0x30
 802549c:	46bd      	mov	sp, r7
 802549e:	bd80      	pop	{r7, pc}
 80254a0:	40023800 	.word	0x40023800
 80254a4:	431bde83 	.word	0x431bde83
 80254a8:	2000bdd8 	.word	0x2000bdd8
 80254ac:	40010000 	.word	0x40010000

080254b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80254b0:	b480      	push	{r7}
 80254b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80254b4:	bf00      	nop
 80254b6:	46bd      	mov	sp, r7
 80254b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254bc:	4770      	bx	lr

080254be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80254be:	b480      	push	{r7}
 80254c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80254c2:	e7fe      	b.n	80254c2 <HardFault_Handler+0x4>

080254c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80254c4:	b480      	push	{r7}
 80254c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80254c8:	e7fe      	b.n	80254c8 <MemManage_Handler+0x4>

080254ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80254ca:	b480      	push	{r7}
 80254cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80254ce:	e7fe      	b.n	80254ce <BusFault_Handler+0x4>

080254d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80254d0:	b480      	push	{r7}
 80254d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80254d4:	e7fe      	b.n	80254d4 <UsageFault_Handler+0x4>

080254d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80254d6:	b480      	push	{r7}
 80254d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80254da:	bf00      	nop
 80254dc:	46bd      	mov	sp, r7
 80254de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254e2:	4770      	bx	lr

080254e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80254e4:	b580      	push	{r7, lr}
 80254e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80254e8:	4802      	ldr	r0, [pc, #8]	; (80254f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80254ea:	f7ed fed4 	bl	8013296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80254ee:	bf00      	nop
 80254f0:	bd80      	pop	{r7, pc}
 80254f2:	bf00      	nop
 80254f4:	2000bdd8 	.word	0x2000bdd8

080254f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80254f8:	b580      	push	{r7, lr}
 80254fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80254fc:	4802      	ldr	r0, [pc, #8]	; (8025508 <USART1_IRQHandler+0x10>)
 80254fe:	f7ee fbab 	bl	8013c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8025502:	bf00      	nop
 8025504:	bd80      	pop	{r7, pc}
 8025506:	bf00      	nop
 8025508:	2000bf2c 	.word	0x2000bf2c

0802550c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 802550c:	b580      	push	{r7, lr}
 802550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8025510:	4802      	ldr	r0, [pc, #8]	; (802551c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8025512:	f7ed fec0 	bl	8013296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8025516:	bf00      	nop
 8025518:	bd80      	pop	{r7, pc}
 802551a:	bf00      	nop
 802551c:	2000be14 	.word	0x2000be14

08025520 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8025520:	b580      	push	{r7, lr}
 8025522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8025524:	4802      	ldr	r0, [pc, #8]	; (8025530 <DMA1_Stream7_IRQHandler+0x10>)
 8025526:	f7eb fa09 	bl	801093c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 802552a:	bf00      	nop
 802552c:	bd80      	pop	{r7, pc}
 802552e:	bf00      	nop
 8025530:	2000bf6c 	.word	0x2000bf6c

08025534 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8025534:	b580      	push	{r7, lr}
 8025536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8025538:	4802      	ldr	r0, [pc, #8]	; (8025544 <UART5_IRQHandler+0x10>)
 802553a:	f7ee fb8d 	bl	8013c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 802553e:	bf00      	nop
 8025540:	bd80      	pop	{r7, pc}
 8025542:	bf00      	nop
 8025544:	2000beec 	.word	0x2000beec

08025548 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8025548:	b580      	push	{r7, lr}
 802554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 802554c:	4802      	ldr	r0, [pc, #8]	; (8025558 <TIM7_IRQHandler+0x10>)
 802554e:	f7ed fea2 	bl	8013296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8025552:	bf00      	nop
 8025554:	bd80      	pop	{r7, pc}
 8025556:	bf00      	nop
 8025558:	2000be50 	.word	0x2000be50

0802555c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 802555c:	b580      	push	{r7, lr}
 802555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8025560:	4802      	ldr	r0, [pc, #8]	; (802556c <ETH_IRQHandler+0x10>)
 8025562:	f7ec f839 	bl	80115d8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8025566:	bf00      	nop
 8025568:	bd80      	pop	{r7, pc}
 802556a:	bf00      	nop
 802556c:	2000a530 	.word	0x2000a530

08025570 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8025570:	b580      	push	{r7, lr}
 8025572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8025574:	4802      	ldr	r0, [pc, #8]	; (8025580 <DMA2_Stream7_IRQHandler+0x10>)
 8025576:	f7eb f9e1 	bl	801093c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 802557a:	bf00      	nop
 802557c:	bd80      	pop	{r7, pc}
 802557e:	bf00      	nop
 8025580:	2000be8c 	.word	0x2000be8c

08025584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8025584:	b480      	push	{r7}
 8025586:	b083      	sub	sp, #12
 8025588:	af00      	add	r7, sp, #0
 802558a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 802558c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8025594:	f003 0301 	and.w	r3, r3, #1
 8025598:	2b00      	cmp	r3, #0
 802559a:	d013      	beq.n	80255c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 802559c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80255a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80255a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80255a8:	2b00      	cmp	r3, #0
 80255aa:	d00b      	beq.n	80255c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80255ac:	e000      	b.n	80255b0 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 80255ae:	bf00      	nop
 80255b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80255b4:	681b      	ldr	r3, [r3, #0]
 80255b6:	2b00      	cmp	r3, #0
 80255b8:	d0f9      	beq.n	80255ae <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80255ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80255be:	687a      	ldr	r2, [r7, #4]
 80255c0:	b2d2      	uxtb	r2, r2
 80255c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80255c4:	687b      	ldr	r3, [r7, #4]
}
 80255c6:	4618      	mov	r0, r3
 80255c8:	370c      	adds	r7, #12
 80255ca:	46bd      	mov	sp, r7
 80255cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255d0:	4770      	bx	lr

080255d2 <_write>:
	}

	return len;
}

int _write(int file, char *ptr, int len) {
 80255d2:	b580      	push	{r7, lr}
 80255d4:	b086      	sub	sp, #24
 80255d6:	af00      	add	r7, sp, #0
 80255d8:	60f8      	str	r0, [r7, #12]
 80255da:	60b9      	str	r1, [r7, #8]
 80255dc:	607a      	str	r2, [r7, #4]
	int i = 0;
 80255de:	2300      	movs	r3, #0
 80255e0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 80255e2:	2300      	movs	r3, #0
 80255e4:	617b      	str	r3, [r7, #20]
 80255e6:	e009      	b.n	80255fc <_write+0x2a>
		ITM_SendChar((*ptr++));
 80255e8:	68bb      	ldr	r3, [r7, #8]
 80255ea:	1c5a      	adds	r2, r3, #1
 80255ec:	60ba      	str	r2, [r7, #8]
 80255ee:	781b      	ldrb	r3, [r3, #0]
 80255f0:	4618      	mov	r0, r3
 80255f2:	f7ff ffc7 	bl	8025584 <ITM_SendChar>
	for (i = 0; i < len; i++)
 80255f6:	697b      	ldr	r3, [r7, #20]
 80255f8:	3301      	adds	r3, #1
 80255fa:	617b      	str	r3, [r7, #20]
 80255fc:	697a      	ldr	r2, [r7, #20]
 80255fe:	687b      	ldr	r3, [r7, #4]
 8025600:	429a      	cmp	r2, r3
 8025602:	dbf1      	blt.n	80255e8 <_write+0x16>
	return len;
 8025604:	687b      	ldr	r3, [r7, #4]
}
 8025606:	4618      	mov	r0, r3
 8025608:	3718      	adds	r7, #24
 802560a:	46bd      	mov	sp, r7
 802560c:	bd80      	pop	{r7, pc}
	...

08025610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8025610:	b480      	push	{r7}
 8025612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8025614:	4a16      	ldr	r2, [pc, #88]	; (8025670 <SystemInit+0x60>)
 8025616:	4b16      	ldr	r3, [pc, #88]	; (8025670 <SystemInit+0x60>)
 8025618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802561c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8025620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8025624:	4a13      	ldr	r2, [pc, #76]	; (8025674 <SystemInit+0x64>)
 8025626:	4b13      	ldr	r3, [pc, #76]	; (8025674 <SystemInit+0x64>)
 8025628:	681b      	ldr	r3, [r3, #0]
 802562a:	f043 0301 	orr.w	r3, r3, #1
 802562e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8025630:	4b10      	ldr	r3, [pc, #64]	; (8025674 <SystemInit+0x64>)
 8025632:	2200      	movs	r2, #0
 8025634:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8025636:	4a0f      	ldr	r2, [pc, #60]	; (8025674 <SystemInit+0x64>)
 8025638:	4b0e      	ldr	r3, [pc, #56]	; (8025674 <SystemInit+0x64>)
 802563a:	681b      	ldr	r3, [r3, #0]
 802563c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8025640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8025644:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8025646:	4b0b      	ldr	r3, [pc, #44]	; (8025674 <SystemInit+0x64>)
 8025648:	4a0b      	ldr	r2, [pc, #44]	; (8025678 <SystemInit+0x68>)
 802564a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 802564c:	4a09      	ldr	r2, [pc, #36]	; (8025674 <SystemInit+0x64>)
 802564e:	4b09      	ldr	r3, [pc, #36]	; (8025674 <SystemInit+0x64>)
 8025650:	681b      	ldr	r3, [r3, #0]
 8025652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8025656:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8025658:	4b06      	ldr	r3, [pc, #24]	; (8025674 <SystemInit+0x64>)
 802565a:	2200      	movs	r2, #0
 802565c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802565e:	4b04      	ldr	r3, [pc, #16]	; (8025670 <SystemInit+0x60>)
 8025660:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8025664:	609a      	str	r2, [r3, #8]
#endif
}
 8025666:	bf00      	nop
 8025668:	46bd      	mov	sp, r7
 802566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802566e:	4770      	bx	lr
 8025670:	e000ed00 	.word	0xe000ed00
 8025674:	40023800 	.word	0x40023800
 8025678:	24003010 	.word	0x24003010

0802567c <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 802567c:	b580      	push	{r7, lr}
 802567e:	b082      	sub	sp, #8
 8025680:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8025682:	463b      	mov	r3, r7
 8025684:	2200      	movs	r2, #0
 8025686:	601a      	str	r2, [r3, #0]
 8025688:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 802568a:	4b13      	ldr	r3, [pc, #76]	; (80256d8 <MX_TIM7_Init+0x5c>)
 802568c:	4a13      	ldr	r2, [pc, #76]	; (80256dc <MX_TIM7_Init+0x60>)
 802568e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8025690:	4b11      	ldr	r3, [pc, #68]	; (80256d8 <MX_TIM7_Init+0x5c>)
 8025692:	2200      	movs	r2, #0
 8025694:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8025696:	4b10      	ldr	r3, [pc, #64]	; (80256d8 <MX_TIM7_Init+0x5c>)
 8025698:	2200      	movs	r2, #0
 802569a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 840;
 802569c:	4b0e      	ldr	r3, [pc, #56]	; (80256d8 <MX_TIM7_Init+0x5c>)
 802569e:	f44f 7252 	mov.w	r2, #840	; 0x348
 80256a2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80256a4:	480c      	ldr	r0, [pc, #48]	; (80256d8 <MX_TIM7_Init+0x5c>)
 80256a6:	f7ed fd85 	bl	80131b4 <HAL_TIM_Base_Init>
 80256aa:	4603      	mov	r3, r0
 80256ac:	2b00      	cmp	r3, #0
 80256ae:	d001      	beq.n	80256b4 <MX_TIM7_Init+0x38>
  {
    Error_Handler();
 80256b0:	f7ff faae 	bl	8024c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80256b4:	2300      	movs	r3, #0
 80256b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80256b8:	2300      	movs	r3, #0
 80256ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80256bc:	463b      	mov	r3, r7
 80256be:	4619      	mov	r1, r3
 80256c0:	4805      	ldr	r0, [pc, #20]	; (80256d8 <MX_TIM7_Init+0x5c>)
 80256c2:	f7ee f946 	bl	8013952 <HAL_TIMEx_MasterConfigSynchronization>
 80256c6:	4603      	mov	r3, r0
 80256c8:	2b00      	cmp	r3, #0
 80256ca:	d001      	beq.n	80256d0 <MX_TIM7_Init+0x54>
  {
    Error_Handler();
 80256cc:	f7ff faa0 	bl	8024c10 <Error_Handler>
  }

}
 80256d0:	bf00      	nop
 80256d2:	3708      	adds	r7, #8
 80256d4:	46bd      	mov	sp, r7
 80256d6:	bd80      	pop	{r7, pc}
 80256d8:	2000be50 	.word	0x2000be50
 80256dc:	40001400 	.word	0x40001400

080256e0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80256e0:	b580      	push	{r7, lr}
 80256e2:	b086      	sub	sp, #24
 80256e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80256e6:	f107 0308 	add.w	r3, r7, #8
 80256ea:	2200      	movs	r2, #0
 80256ec:	601a      	str	r2, [r3, #0]
 80256ee:	605a      	str	r2, [r3, #4]
 80256f0:	609a      	str	r2, [r3, #8]
 80256f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80256f4:	463b      	mov	r3, r7
 80256f6:	2200      	movs	r2, #0
 80256f8:	601a      	str	r2, [r3, #0]
 80256fa:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 80256fc:	4b1d      	ldr	r3, [pc, #116]	; (8025774 <MX_TIM8_Init+0x94>)
 80256fe:	4a1e      	ldr	r2, [pc, #120]	; (8025778 <MX_TIM8_Init+0x98>)
 8025700:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8025702:	4b1c      	ldr	r3, [pc, #112]	; (8025774 <MX_TIM8_Init+0x94>)
 8025704:	2200      	movs	r2, #0
 8025706:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8025708:	4b1a      	ldr	r3, [pc, #104]	; (8025774 <MX_TIM8_Init+0x94>)
 802570a:	2200      	movs	r2, #0
 802570c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27720;
 802570e:	4b19      	ldr	r3, [pc, #100]	; (8025774 <MX_TIM8_Init+0x94>)
 8025710:	f646 4248 	movw	r2, #27720	; 0x6c48
 8025714:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8025716:	4b17      	ldr	r3, [pc, #92]	; (8025774 <MX_TIM8_Init+0x94>)
 8025718:	2200      	movs	r2, #0
 802571a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 802571c:	4b15      	ldr	r3, [pc, #84]	; (8025774 <MX_TIM8_Init+0x94>)
 802571e:	2200      	movs	r2, #0
 8025720:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8025722:	4814      	ldr	r0, [pc, #80]	; (8025774 <MX_TIM8_Init+0x94>)
 8025724:	f7ed fd46 	bl	80131b4 <HAL_TIM_Base_Init>
 8025728:	4603      	mov	r3, r0
 802572a:	2b00      	cmp	r3, #0
 802572c:	d001      	beq.n	8025732 <MX_TIM8_Init+0x52>
  {
    Error_Handler();
 802572e:	f7ff fa6f 	bl	8024c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8025732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8025736:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8025738:	f107 0308 	add.w	r3, r7, #8
 802573c:	4619      	mov	r1, r3
 802573e:	480d      	ldr	r0, [pc, #52]	; (8025774 <MX_TIM8_Init+0x94>)
 8025740:	f7ed feb1 	bl	80134a6 <HAL_TIM_ConfigClockSource>
 8025744:	4603      	mov	r3, r0
 8025746:	2b00      	cmp	r3, #0
 8025748:	d001      	beq.n	802574e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 802574a:	f7ff fa61 	bl	8024c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802574e:	2300      	movs	r3, #0
 8025750:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8025752:	2300      	movs	r3, #0
 8025754:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8025756:	463b      	mov	r3, r7
 8025758:	4619      	mov	r1, r3
 802575a:	4806      	ldr	r0, [pc, #24]	; (8025774 <MX_TIM8_Init+0x94>)
 802575c:	f7ee f8f9 	bl	8013952 <HAL_TIMEx_MasterConfigSynchronization>
 8025760:	4603      	mov	r3, r0
 8025762:	2b00      	cmp	r3, #0
 8025764:	d001      	beq.n	802576a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8025766:	f7ff fa53 	bl	8024c10 <Error_Handler>
  }

}
 802576a:	bf00      	nop
 802576c:	3718      	adds	r7, #24
 802576e:	46bd      	mov	sp, r7
 8025770:	bd80      	pop	{r7, pc}
 8025772:	bf00      	nop
 8025774:	2000be14 	.word	0x2000be14
 8025778:	40010400 	.word	0x40010400

0802577c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 802577c:	b580      	push	{r7, lr}
 802577e:	b084      	sub	sp, #16
 8025780:	af00      	add	r7, sp, #0
 8025782:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8025784:	687b      	ldr	r3, [r7, #4]
 8025786:	681b      	ldr	r3, [r3, #0]
 8025788:	4a1c      	ldr	r2, [pc, #112]	; (80257fc <HAL_TIM_Base_MspInit+0x80>)
 802578a:	4293      	cmp	r3, r2
 802578c:	d116      	bne.n	80257bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 802578e:	2300      	movs	r3, #0
 8025790:	60fb      	str	r3, [r7, #12]
 8025792:	4a1b      	ldr	r2, [pc, #108]	; (8025800 <HAL_TIM_Base_MspInit+0x84>)
 8025794:	4b1a      	ldr	r3, [pc, #104]	; (8025800 <HAL_TIM_Base_MspInit+0x84>)
 8025796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025798:	f043 0320 	orr.w	r3, r3, #32
 802579c:	6413      	str	r3, [r2, #64]	; 0x40
 802579e:	4b18      	ldr	r3, [pc, #96]	; (8025800 <HAL_TIM_Base_MspInit+0x84>)
 80257a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80257a2:	f003 0320 	and.w	r3, r3, #32
 80257a6:	60fb      	str	r3, [r7, #12]
 80257a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80257aa:	2200      	movs	r2, #0
 80257ac:	2105      	movs	r1, #5
 80257ae:	2037      	movs	r0, #55	; 0x37
 80257b0:	f7ea ff10 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80257b4:	2037      	movs	r0, #55	; 0x37
 80257b6:	f7ea ff29 	bl	801060c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80257ba:	e01a      	b.n	80257f2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM8)
 80257bc:	687b      	ldr	r3, [r7, #4]
 80257be:	681b      	ldr	r3, [r3, #0]
 80257c0:	4a10      	ldr	r2, [pc, #64]	; (8025804 <HAL_TIM_Base_MspInit+0x88>)
 80257c2:	4293      	cmp	r3, r2
 80257c4:	d115      	bne.n	80257f2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80257c6:	2300      	movs	r3, #0
 80257c8:	60bb      	str	r3, [r7, #8]
 80257ca:	4a0d      	ldr	r2, [pc, #52]	; (8025800 <HAL_TIM_Base_MspInit+0x84>)
 80257cc:	4b0c      	ldr	r3, [pc, #48]	; (8025800 <HAL_TIM_Base_MspInit+0x84>)
 80257ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80257d0:	f043 0302 	orr.w	r3, r3, #2
 80257d4:	6453      	str	r3, [r2, #68]	; 0x44
 80257d6:	4b0a      	ldr	r3, [pc, #40]	; (8025800 <HAL_TIM_Base_MspInit+0x84>)
 80257d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80257da:	f003 0302 	and.w	r3, r3, #2
 80257de:	60bb      	str	r3, [r7, #8]
 80257e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80257e2:	2200      	movs	r2, #0
 80257e4:	2105      	movs	r1, #5
 80257e6:	202c      	movs	r0, #44	; 0x2c
 80257e8:	f7ea fef4 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80257ec:	202c      	movs	r0, #44	; 0x2c
 80257ee:	f7ea ff0d 	bl	801060c <HAL_NVIC_EnableIRQ>
}
 80257f2:	bf00      	nop
 80257f4:	3710      	adds	r7, #16
 80257f6:	46bd      	mov	sp, r7
 80257f8:	bd80      	pop	{r7, pc}
 80257fa:	bf00      	nop
 80257fc:	40001400 	.word	0x40001400
 8025800:	40023800 	.word	0x40023800
 8025804:	40010400 	.word	0x40010400

08025808 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8025808:	b480      	push	{r7}
 802580a:	b087      	sub	sp, #28
 802580c:	af00      	add	r7, sp, #0
 802580e:	60f8      	str	r0, [r7, #12]
 8025810:	60b9      	str	r1, [r7, #8]
 8025812:	607a      	str	r2, [r7, #4]
	int div = 1;
 8025814:	2301      	movs	r3, #1
 8025816:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8025818:	e004      	b.n	8025824 <ts_itoa+0x1c>
		div *= base;
 802581a:	697b      	ldr	r3, [r7, #20]
 802581c:	687a      	ldr	r2, [r7, #4]
 802581e:	fb02 f303 	mul.w	r3, r2, r3
 8025822:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8025824:	697b      	ldr	r3, [r7, #20]
 8025826:	68ba      	ldr	r2, [r7, #8]
 8025828:	fbb2 f2f3 	udiv	r2, r2, r3
 802582c:	687b      	ldr	r3, [r7, #4]
 802582e:	429a      	cmp	r2, r3
 8025830:	d2f3      	bcs.n	802581a <ts_itoa+0x12>

	while (div != 0)
 8025832:	e029      	b.n	8025888 <ts_itoa+0x80>
	{
		int num = d/div;
 8025834:	697b      	ldr	r3, [r7, #20]
 8025836:	68ba      	ldr	r2, [r7, #8]
 8025838:	fbb2 f3f3 	udiv	r3, r2, r3
 802583c:	613b      	str	r3, [r7, #16]
		d = d%div;
 802583e:	697a      	ldr	r2, [r7, #20]
 8025840:	68bb      	ldr	r3, [r7, #8]
 8025842:	fbb3 f1f2 	udiv	r1, r3, r2
 8025846:	fb02 f201 	mul.w	r2, r2, r1
 802584a:	1a9b      	subs	r3, r3, r2
 802584c:	60bb      	str	r3, [r7, #8]
		div /= base;
 802584e:	697a      	ldr	r2, [r7, #20]
 8025850:	687b      	ldr	r3, [r7, #4]
 8025852:	fb92 f3f3 	sdiv	r3, r2, r3
 8025856:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8025858:	693b      	ldr	r3, [r7, #16]
 802585a:	2b09      	cmp	r3, #9
 802585c:	dd0a      	ble.n	8025874 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 802585e:	68fb      	ldr	r3, [r7, #12]
 8025860:	681b      	ldr	r3, [r3, #0]
 8025862:	1c59      	adds	r1, r3, #1
 8025864:	68fa      	ldr	r2, [r7, #12]
 8025866:	6011      	str	r1, [r2, #0]
 8025868:	693a      	ldr	r2, [r7, #16]
 802586a:	b2d2      	uxtb	r2, r2
 802586c:	3237      	adds	r2, #55	; 0x37
 802586e:	b2d2      	uxtb	r2, r2
 8025870:	701a      	strb	r2, [r3, #0]
 8025872:	e009      	b.n	8025888 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8025874:	68fb      	ldr	r3, [r7, #12]
 8025876:	681b      	ldr	r3, [r3, #0]
 8025878:	1c59      	adds	r1, r3, #1
 802587a:	68fa      	ldr	r2, [r7, #12]
 802587c:	6011      	str	r1, [r2, #0]
 802587e:	693a      	ldr	r2, [r7, #16]
 8025880:	b2d2      	uxtb	r2, r2
 8025882:	3230      	adds	r2, #48	; 0x30
 8025884:	b2d2      	uxtb	r2, r2
 8025886:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8025888:	697b      	ldr	r3, [r7, #20]
 802588a:	2b00      	cmp	r3, #0
 802588c:	d1d2      	bne.n	8025834 <ts_itoa+0x2c>
	}
}
 802588e:	bf00      	nop
 8025890:	371c      	adds	r7, #28
 8025892:	46bd      	mov	sp, r7
 8025894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025898:	4770      	bx	lr

0802589a <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 802589a:	b580      	push	{r7, lr}
 802589c:	b088      	sub	sp, #32
 802589e:	af00      	add	r7, sp, #0
 80258a0:	60f8      	str	r0, [r7, #12]
 80258a2:	60b9      	str	r1, [r7, #8]
 80258a4:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80258a6:	68fb      	ldr	r3, [r7, #12]
 80258a8:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80258aa:	e07d      	b.n	80259a8 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80258ac:	68bb      	ldr	r3, [r7, #8]
 80258ae:	781b      	ldrb	r3, [r3, #0]
 80258b0:	2b25      	cmp	r3, #37	; 0x25
 80258b2:	d171      	bne.n	8025998 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80258b4:	68bb      	ldr	r3, [r7, #8]
 80258b6:	3301      	adds	r3, #1
 80258b8:	60bb      	str	r3, [r7, #8]
 80258ba:	68bb      	ldr	r3, [r7, #8]
 80258bc:	781b      	ldrb	r3, [r3, #0]
 80258be:	2b64      	cmp	r3, #100	; 0x64
 80258c0:	d01e      	beq.n	8025900 <ts_formatstring+0x66>
 80258c2:	2b64      	cmp	r3, #100	; 0x64
 80258c4:	dc06      	bgt.n	80258d4 <ts_formatstring+0x3a>
 80258c6:	2b58      	cmp	r3, #88	; 0x58
 80258c8:	d050      	beq.n	802596c <ts_formatstring+0xd2>
 80258ca:	2b63      	cmp	r3, #99	; 0x63
 80258cc:	d00e      	beq.n	80258ec <ts_formatstring+0x52>
 80258ce:	2b25      	cmp	r3, #37	; 0x25
 80258d0:	d058      	beq.n	8025984 <ts_formatstring+0xea>
 80258d2:	e05d      	b.n	8025990 <ts_formatstring+0xf6>
 80258d4:	2b73      	cmp	r3, #115	; 0x73
 80258d6:	d02b      	beq.n	8025930 <ts_formatstring+0x96>
 80258d8:	2b73      	cmp	r3, #115	; 0x73
 80258da:	dc02      	bgt.n	80258e2 <ts_formatstring+0x48>
 80258dc:	2b69      	cmp	r3, #105	; 0x69
 80258de:	d00f      	beq.n	8025900 <ts_formatstring+0x66>
 80258e0:	e056      	b.n	8025990 <ts_formatstring+0xf6>
 80258e2:	2b75      	cmp	r3, #117	; 0x75
 80258e4:	d037      	beq.n	8025956 <ts_formatstring+0xbc>
 80258e6:	2b78      	cmp	r3, #120	; 0x78
 80258e8:	d040      	beq.n	802596c <ts_formatstring+0xd2>
 80258ea:	e051      	b.n	8025990 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80258ec:	68fb      	ldr	r3, [r7, #12]
 80258ee:	1c5a      	adds	r2, r3, #1
 80258f0:	60fa      	str	r2, [r7, #12]
 80258f2:	687a      	ldr	r2, [r7, #4]
 80258f4:	1d11      	adds	r1, r2, #4
 80258f6:	6079      	str	r1, [r7, #4]
 80258f8:	6812      	ldr	r2, [r2, #0]
 80258fa:	b2d2      	uxtb	r2, r2
 80258fc:	701a      	strb	r2, [r3, #0]
				break;
 80258fe:	e047      	b.n	8025990 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8025900:	687b      	ldr	r3, [r7, #4]
 8025902:	1d1a      	adds	r2, r3, #4
 8025904:	607a      	str	r2, [r7, #4]
 8025906:	681b      	ldr	r3, [r3, #0]
 8025908:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 802590a:	69fb      	ldr	r3, [r7, #28]
 802590c:	2b00      	cmp	r3, #0
 802590e:	da07      	bge.n	8025920 <ts_formatstring+0x86>
					{
						val *= -1;
 8025910:	69fb      	ldr	r3, [r7, #28]
 8025912:	425b      	negs	r3, r3
 8025914:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8025916:	68fb      	ldr	r3, [r7, #12]
 8025918:	1c5a      	adds	r2, r3, #1
 802591a:	60fa      	str	r2, [r7, #12]
 802591c:	222d      	movs	r2, #45	; 0x2d
 802591e:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8025920:	69f9      	ldr	r1, [r7, #28]
 8025922:	f107 030c 	add.w	r3, r7, #12
 8025926:	220a      	movs	r2, #10
 8025928:	4618      	mov	r0, r3
 802592a:	f7ff ff6d 	bl	8025808 <ts_itoa>
				}
				break;
 802592e:	e02f      	b.n	8025990 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8025930:	687b      	ldr	r3, [r7, #4]
 8025932:	1d1a      	adds	r2, r3, #4
 8025934:	607a      	str	r2, [r7, #4]
 8025936:	681b      	ldr	r3, [r3, #0]
 8025938:	61bb      	str	r3, [r7, #24]
					while (*arg)
 802593a:	e007      	b.n	802594c <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 802593c:	68fb      	ldr	r3, [r7, #12]
 802593e:	1c5a      	adds	r2, r3, #1
 8025940:	60fa      	str	r2, [r7, #12]
 8025942:	69ba      	ldr	r2, [r7, #24]
 8025944:	1c51      	adds	r1, r2, #1
 8025946:	61b9      	str	r1, [r7, #24]
 8025948:	7812      	ldrb	r2, [r2, #0]
 802594a:	701a      	strb	r2, [r3, #0]
					while (*arg)
 802594c:	69bb      	ldr	r3, [r7, #24]
 802594e:	781b      	ldrb	r3, [r3, #0]
 8025950:	2b00      	cmp	r3, #0
 8025952:	d1f3      	bne.n	802593c <ts_formatstring+0xa2>
					}
				}
				break;
 8025954:	e01c      	b.n	8025990 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8025956:	687b      	ldr	r3, [r7, #4]
 8025958:	1d1a      	adds	r2, r3, #4
 802595a:	607a      	str	r2, [r7, #4]
 802595c:	6819      	ldr	r1, [r3, #0]
 802595e:	f107 030c 	add.w	r3, r7, #12
 8025962:	220a      	movs	r2, #10
 8025964:	4618      	mov	r0, r3
 8025966:	f7ff ff4f 	bl	8025808 <ts_itoa>
				break;
 802596a:	e011      	b.n	8025990 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 802596c:	687b      	ldr	r3, [r7, #4]
 802596e:	1d1a      	adds	r2, r3, #4
 8025970:	607a      	str	r2, [r7, #4]
 8025972:	681b      	ldr	r3, [r3, #0]
 8025974:	4619      	mov	r1, r3
 8025976:	f107 030c 	add.w	r3, r7, #12
 802597a:	2210      	movs	r2, #16
 802597c:	4618      	mov	r0, r3
 802597e:	f7ff ff43 	bl	8025808 <ts_itoa>
				break;
 8025982:	e005      	b.n	8025990 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8025984:	68fb      	ldr	r3, [r7, #12]
 8025986:	1c5a      	adds	r2, r3, #1
 8025988:	60fa      	str	r2, [r7, #12]
 802598a:	2225      	movs	r2, #37	; 0x25
 802598c:	701a      	strb	r2, [r3, #0]
				  break;
 802598e:	bf00      	nop
			}
			fmt++;
 8025990:	68bb      	ldr	r3, [r7, #8]
 8025992:	3301      	adds	r3, #1
 8025994:	60bb      	str	r3, [r7, #8]
 8025996:	e007      	b.n	80259a8 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8025998:	68fb      	ldr	r3, [r7, #12]
 802599a:	1c5a      	adds	r2, r3, #1
 802599c:	60fa      	str	r2, [r7, #12]
 802599e:	68ba      	ldr	r2, [r7, #8]
 80259a0:	1c51      	adds	r1, r2, #1
 80259a2:	60b9      	str	r1, [r7, #8]
 80259a4:	7812      	ldrb	r2, [r2, #0]
 80259a6:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80259a8:	68bb      	ldr	r3, [r7, #8]
 80259aa:	781b      	ldrb	r3, [r3, #0]
 80259ac:	2b00      	cmp	r3, #0
 80259ae:	f47f af7d 	bne.w	80258ac <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80259b2:	68fb      	ldr	r3, [r7, #12]
 80259b4:	2200      	movs	r2, #0
 80259b6:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80259b8:	68fb      	ldr	r3, [r7, #12]
 80259ba:	461a      	mov	r2, r3
 80259bc:	697b      	ldr	r3, [r7, #20]
 80259be:	1ad3      	subs	r3, r2, r3
}
 80259c0:	4618      	mov	r0, r3
 80259c2:	3720      	adds	r7, #32
 80259c4:	46bd      	mov	sp, r7
 80259c6:	bd80      	pop	{r7, pc}

080259c8 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80259c8:	b480      	push	{r7}
 80259ca:	b085      	sub	sp, #20
 80259cc:	af00      	add	r7, sp, #0
 80259ce:	6078      	str	r0, [r7, #4]
 80259d0:	6039      	str	r1, [r7, #0]
	int length = 0;
 80259d2:	2300      	movs	r3, #0
 80259d4:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80259d6:	e081      	b.n	8025adc <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 80259d8:	687b      	ldr	r3, [r7, #4]
 80259da:	781b      	ldrb	r3, [r3, #0]
 80259dc:	2b25      	cmp	r3, #37	; 0x25
 80259de:	d177      	bne.n	8025ad0 <ts_formatlength+0x108>
		{
			++fmt;
 80259e0:	687b      	ldr	r3, [r7, #4]
 80259e2:	3301      	adds	r3, #1
 80259e4:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80259e6:	687b      	ldr	r3, [r7, #4]
 80259e8:	781b      	ldrb	r3, [r3, #0]
 80259ea:	3b58      	subs	r3, #88	; 0x58
 80259ec:	2b20      	cmp	r3, #32
 80259ee:	d86a      	bhi.n	8025ac6 <ts_formatlength+0xfe>
 80259f0:	a201      	add	r2, pc, #4	; (adr r2, 80259f8 <ts_formatlength+0x30>)
 80259f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80259f6:	bf00      	nop
 80259f8:	08025ab9 	.word	0x08025ab9
 80259fc:	08025ac7 	.word	0x08025ac7
 8025a00:	08025ac7 	.word	0x08025ac7
 8025a04:	08025ac7 	.word	0x08025ac7
 8025a08:	08025ac7 	.word	0x08025ac7
 8025a0c:	08025ac7 	.word	0x08025ac7
 8025a10:	08025ac7 	.word	0x08025ac7
 8025a14:	08025ac7 	.word	0x08025ac7
 8025a18:	08025ac7 	.word	0x08025ac7
 8025a1c:	08025ac7 	.word	0x08025ac7
 8025a20:	08025ac7 	.word	0x08025ac7
 8025a24:	08025a7d 	.word	0x08025a7d
 8025a28:	08025a8b 	.word	0x08025a8b
 8025a2c:	08025ac7 	.word	0x08025ac7
 8025a30:	08025ac7 	.word	0x08025ac7
 8025a34:	08025ac7 	.word	0x08025ac7
 8025a38:	08025ac7 	.word	0x08025ac7
 8025a3c:	08025a8b 	.word	0x08025a8b
 8025a40:	08025ac7 	.word	0x08025ac7
 8025a44:	08025ac7 	.word	0x08025ac7
 8025a48:	08025ac7 	.word	0x08025ac7
 8025a4c:	08025ac7 	.word	0x08025ac7
 8025a50:	08025ac7 	.word	0x08025ac7
 8025a54:	08025ac7 	.word	0x08025ac7
 8025a58:	08025ac7 	.word	0x08025ac7
 8025a5c:	08025ac7 	.word	0x08025ac7
 8025a60:	08025ac7 	.word	0x08025ac7
 8025a64:	08025a99 	.word	0x08025a99
 8025a68:	08025ac7 	.word	0x08025ac7
 8025a6c:	08025a8b 	.word	0x08025a8b
 8025a70:	08025ac7 	.word	0x08025ac7
 8025a74:	08025ac7 	.word	0x08025ac7
 8025a78:	08025ab9 	.word	0x08025ab9
			{
			  case 'c':
		  		  va_arg(va, int);
 8025a7c:	683b      	ldr	r3, [r7, #0]
 8025a7e:	3304      	adds	r3, #4
 8025a80:	603b      	str	r3, [r7, #0]
				  ++length;
 8025a82:	68fb      	ldr	r3, [r7, #12]
 8025a84:	3301      	adds	r3, #1
 8025a86:	60fb      	str	r3, [r7, #12]
				  break;
 8025a88:	e025      	b.n	8025ad6 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8025a8a:	68fb      	ldr	r3, [r7, #12]
 8025a8c:	330b      	adds	r3, #11
 8025a8e:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8025a90:	683b      	ldr	r3, [r7, #0]
 8025a92:	3304      	adds	r3, #4
 8025a94:	603b      	str	r3, [r7, #0]
				  break;
 8025a96:	e01e      	b.n	8025ad6 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8025a98:	683b      	ldr	r3, [r7, #0]
 8025a9a:	1d1a      	adds	r2, r3, #4
 8025a9c:	603a      	str	r2, [r7, #0]
 8025a9e:	681b      	ldr	r3, [r3, #0]
 8025aa0:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8025aa2:	e002      	b.n	8025aaa <ts_formatlength+0xe2>
			  			  ++length;
 8025aa4:	68fb      	ldr	r3, [r7, #12]
 8025aa6:	3301      	adds	r3, #1
 8025aa8:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8025aaa:	68bb      	ldr	r3, [r7, #8]
 8025aac:	1c5a      	adds	r2, r3, #1
 8025aae:	60ba      	str	r2, [r7, #8]
 8025ab0:	781b      	ldrb	r3, [r3, #0]
 8025ab2:	2b00      	cmp	r3, #0
 8025ab4:	d1f6      	bne.n	8025aa4 <ts_formatlength+0xdc>
			  	  }
				  break;
 8025ab6:	e00e      	b.n	8025ad6 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8025ab8:	68fb      	ldr	r3, [r7, #12]
 8025aba:	3308      	adds	r3, #8
 8025abc:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8025abe:	683b      	ldr	r3, [r7, #0]
 8025ac0:	3304      	adds	r3, #4
 8025ac2:	603b      	str	r3, [r7, #0]
				  break;
 8025ac4:	e007      	b.n	8025ad6 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8025ac6:	68fb      	ldr	r3, [r7, #12]
 8025ac8:	3301      	adds	r3, #1
 8025aca:	60fb      	str	r3, [r7, #12]
				  break;
 8025acc:	bf00      	nop
 8025ace:	e002      	b.n	8025ad6 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8025ad0:	68fb      	ldr	r3, [r7, #12]
 8025ad2:	3301      	adds	r3, #1
 8025ad4:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8025ad6:	687b      	ldr	r3, [r7, #4]
 8025ad8:	3301      	adds	r3, #1
 8025ada:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8025adc:	687b      	ldr	r3, [r7, #4]
 8025ade:	781b      	ldrb	r3, [r3, #0]
 8025ae0:	2b00      	cmp	r3, #0
 8025ae2:	f47f af79 	bne.w	80259d8 <ts_formatlength+0x10>
	}
	return length;
 8025ae6:	68fb      	ldr	r3, [r7, #12]
}
 8025ae8:	4618      	mov	r0, r3
 8025aea:	3714      	adds	r7, #20
 8025aec:	46bd      	mov	sp, r7
 8025aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025af2:	4770      	bx	lr

08025af4 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8025af4:	b40e      	push	{r1, r2, r3}
 8025af6:	b580      	push	{r7, lr}
 8025af8:	b085      	sub	sp, #20
 8025afa:	af00      	add	r7, sp, #0
 8025afc:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8025afe:	f107 0320 	add.w	r3, r7, #32
 8025b02:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8025b04:	68ba      	ldr	r2, [r7, #8]
 8025b06:	69f9      	ldr	r1, [r7, #28]
 8025b08:	6878      	ldr	r0, [r7, #4]
 8025b0a:	f7ff fec6 	bl	802589a <ts_formatstring>
 8025b0e:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8025b10:	68fb      	ldr	r3, [r7, #12]
}
 8025b12:	4618      	mov	r0, r3
 8025b14:	3714      	adds	r7, #20
 8025b16:	46bd      	mov	sp, r7
 8025b18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8025b1c:	b003      	add	sp, #12
 8025b1e:	4770      	bx	lr

08025b20 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8025b20:	b40f      	push	{r0, r1, r2, r3}
 8025b22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025b26:	b085      	sub	sp, #20
 8025b28:	af00      	add	r7, sp, #0
	int length = 0;
 8025b2a:	2300      	movs	r3, #0
 8025b2c:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8025b2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025b32:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8025b34:	6839      	ldr	r1, [r7, #0]
 8025b36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025b38:	f7ff ff46 	bl	80259c8 <ts_formatlength>
 8025b3c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8025b3e:	466b      	mov	r3, sp
 8025b40:	461e      	mov	r6, r3
		char buf[length];
 8025b42:	68f9      	ldr	r1, [r7, #12]
 8025b44:	1e4b      	subs	r3, r1, #1
 8025b46:	60bb      	str	r3, [r7, #8]
 8025b48:	460b      	mov	r3, r1
 8025b4a:	461a      	mov	r2, r3
 8025b4c:	f04f 0300 	mov.w	r3, #0
 8025b50:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8025b54:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8025b58:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8025b5c:	460b      	mov	r3, r1
 8025b5e:	461a      	mov	r2, r3
 8025b60:	f04f 0300 	mov.w	r3, #0
 8025b64:	00dd      	lsls	r5, r3, #3
 8025b66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8025b6a:	00d4      	lsls	r4, r2, #3
 8025b6c:	460b      	mov	r3, r1
 8025b6e:	3307      	adds	r3, #7
 8025b70:	08db      	lsrs	r3, r3, #3
 8025b72:	00db      	lsls	r3, r3, #3
 8025b74:	ebad 0d03 	sub.w	sp, sp, r3
 8025b78:	466b      	mov	r3, sp
 8025b7a:	3300      	adds	r3, #0
 8025b7c:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8025b7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025b82:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8025b84:	687b      	ldr	r3, [r7, #4]
 8025b86:	683a      	ldr	r2, [r7, #0]
 8025b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025b8a:	4618      	mov	r0, r3
 8025b8c:	f7ff fe85 	bl	802589a <ts_formatstring>
 8025b90:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8025b92:	687b      	ldr	r3, [r7, #4]
 8025b94:	68fa      	ldr	r2, [r7, #12]
 8025b96:	4619      	mov	r1, r3
 8025b98:	2001      	movs	r0, #1
 8025b9a:	f7ff fd1a 	bl	80255d2 <_write>
 8025b9e:	60f8      	str	r0, [r7, #12]
 8025ba0:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8025ba2:	68fb      	ldr	r3, [r7, #12]
}
 8025ba4:	4618      	mov	r0, r3
 8025ba6:	3714      	adds	r7, #20
 8025ba8:	46bd      	mov	sp, r7
 8025baa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025bae:	b004      	add	sp, #16
 8025bb0:	4770      	bx	lr
	...

08025bb4 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8025bb4:	b580      	push	{r7, lr}
 8025bb6:	b086      	sub	sp, #24
 8025bb8:	af00      	add	r7, sp, #0
 8025bba:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8025bbc:	6878      	ldr	r0, [r7, #4]
 8025bbe:	f7ea fa49 	bl	8010054 <strlen>
 8025bc2:	4603      	mov	r3, r0
 8025bc4:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8025bc6:	2300      	movs	r3, #0
 8025bc8:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 8025bca:	693a      	ldr	r2, [r7, #16]
 8025bcc:	6879      	ldr	r1, [r7, #4]
 8025bce:	2001      	movs	r0, #1
 8025bd0:	f7ff fcff 	bl	80255d2 <_write>
 8025bd4:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8025bd6:	2201      	movs	r2, #1
 8025bd8:	490b      	ldr	r1, [pc, #44]	; (8025c08 <puts+0x54>)
 8025bda:	2001      	movs	r0, #1
 8025bdc:	f7ff fcf9 	bl	80255d2 <_write>
 8025be0:	4602      	mov	r2, r0
 8025be2:	68fb      	ldr	r3, [r7, #12]
 8025be4:	4413      	add	r3, r2
 8025be6:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8025be8:	693b      	ldr	r3, [r7, #16]
 8025bea:	1c5a      	adds	r2, r3, #1
 8025bec:	68fb      	ldr	r3, [r7, #12]
 8025bee:	429a      	cmp	r2, r3
 8025bf0:	d102      	bne.n	8025bf8 <puts+0x44>
	{
		res = 0;
 8025bf2:	2300      	movs	r3, #0
 8025bf4:	617b      	str	r3, [r7, #20]
 8025bf6:	e002      	b.n	8025bfe <puts+0x4a>
	}
	else
	{
		res = EOF;
 8025bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8025bfc:	617b      	str	r3, [r7, #20]
	}

	return res;
 8025bfe:	697b      	ldr	r3, [r7, #20]
}
 8025c00:	4618      	mov	r0, r3
 8025c02:	3718      	adds	r7, #24
 8025c04:	46bd      	mov	sp, r7
 8025c06:	bd80      	pop	{r7, pc}
 8025c08:	08028f8c 	.word	0x08028f8c

08025c0c <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8025c0c:	b580      	push	{r7, lr}
 8025c0e:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8025c10:	4b11      	ldr	r3, [pc, #68]	; (8025c58 <MX_UART5_Init+0x4c>)
 8025c12:	4a12      	ldr	r2, [pc, #72]	; (8025c5c <MX_UART5_Init+0x50>)
 8025c14:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 187500;
 8025c16:	4b10      	ldr	r3, [pc, #64]	; (8025c58 <MX_UART5_Init+0x4c>)
 8025c18:	4a11      	ldr	r2, [pc, #68]	; (8025c60 <MX_UART5_Init+0x54>)
 8025c1a:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8025c1c:	4b0e      	ldr	r3, [pc, #56]	; (8025c58 <MX_UART5_Init+0x4c>)
 8025c1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8025c22:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8025c24:	4b0c      	ldr	r3, [pc, #48]	; (8025c58 <MX_UART5_Init+0x4c>)
 8025c26:	2200      	movs	r2, #0
 8025c28:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8025c2a:	4b0b      	ldr	r3, [pc, #44]	; (8025c58 <MX_UART5_Init+0x4c>)
 8025c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025c30:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8025c32:	4b09      	ldr	r3, [pc, #36]	; (8025c58 <MX_UART5_Init+0x4c>)
 8025c34:	220c      	movs	r2, #12
 8025c36:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8025c38:	4b07      	ldr	r3, [pc, #28]	; (8025c58 <MX_UART5_Init+0x4c>)
 8025c3a:	2200      	movs	r2, #0
 8025c3c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8025c3e:	4b06      	ldr	r3, [pc, #24]	; (8025c58 <MX_UART5_Init+0x4c>)
 8025c40:	2200      	movs	r2, #0
 8025c42:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8025c44:	4804      	ldr	r0, [pc, #16]	; (8025c58 <MX_UART5_Init+0x4c>)
 8025c46:	f7ed fedd 	bl	8013a04 <HAL_UART_Init>
 8025c4a:	4603      	mov	r3, r0
 8025c4c:	2b00      	cmp	r3, #0
 8025c4e:	d001      	beq.n	8025c54 <MX_UART5_Init+0x48>
  {
    Error_Handler();
 8025c50:	f7fe ffde 	bl	8024c10 <Error_Handler>
  }

}
 8025c54:	bf00      	nop
 8025c56:	bd80      	pop	{r7, pc}
 8025c58:	2000beec 	.word	0x2000beec
 8025c5c:	40005000 	.word	0x40005000
 8025c60:	0002dc6c 	.word	0x0002dc6c

08025c64 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8025c64:	b580      	push	{r7, lr}
 8025c66:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8025c68:	4b11      	ldr	r3, [pc, #68]	; (8025cb0 <MX_USART1_UART_Init+0x4c>)
 8025c6a:	4a12      	ldr	r2, [pc, #72]	; (8025cb4 <MX_USART1_UART_Init+0x50>)
 8025c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8025c6e:	4b10      	ldr	r3, [pc, #64]	; (8025cb0 <MX_USART1_UART_Init+0x4c>)
 8025c70:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8025c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8025c76:	4b0e      	ldr	r3, [pc, #56]	; (8025cb0 <MX_USART1_UART_Init+0x4c>)
 8025c78:	2200      	movs	r2, #0
 8025c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8025c7c:	4b0c      	ldr	r3, [pc, #48]	; (8025cb0 <MX_USART1_UART_Init+0x4c>)
 8025c7e:	2200      	movs	r2, #0
 8025c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8025c82:	4b0b      	ldr	r3, [pc, #44]	; (8025cb0 <MX_USART1_UART_Init+0x4c>)
 8025c84:	2200      	movs	r2, #0
 8025c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8025c88:	4b09      	ldr	r3, [pc, #36]	; (8025cb0 <MX_USART1_UART_Init+0x4c>)
 8025c8a:	2208      	movs	r2, #8
 8025c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8025c8e:	4b08      	ldr	r3, [pc, #32]	; (8025cb0 <MX_USART1_UART_Init+0x4c>)
 8025c90:	2200      	movs	r2, #0
 8025c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8025c94:	4b06      	ldr	r3, [pc, #24]	; (8025cb0 <MX_USART1_UART_Init+0x4c>)
 8025c96:	2200      	movs	r2, #0
 8025c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8025c9a:	4805      	ldr	r0, [pc, #20]	; (8025cb0 <MX_USART1_UART_Init+0x4c>)
 8025c9c:	f7ed feb2 	bl	8013a04 <HAL_UART_Init>
 8025ca0:	4603      	mov	r3, r0
 8025ca2:	2b00      	cmp	r3, #0
 8025ca4:	d001      	beq.n	8025caa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8025ca6:	f7fe ffb3 	bl	8024c10 <Error_Handler>
  }

}
 8025caa:	bf00      	nop
 8025cac:	bd80      	pop	{r7, pc}
 8025cae:	bf00      	nop
 8025cb0:	2000bf2c 	.word	0x2000bf2c
 8025cb4:	40011000 	.word	0x40011000

08025cb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8025cb8:	b580      	push	{r7, lr}
 8025cba:	b08c      	sub	sp, #48	; 0x30
 8025cbc:	af00      	add	r7, sp, #0
 8025cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025cc0:	f107 031c 	add.w	r3, r7, #28
 8025cc4:	2200      	movs	r2, #0
 8025cc6:	601a      	str	r2, [r3, #0]
 8025cc8:	605a      	str	r2, [r3, #4]
 8025cca:	609a      	str	r2, [r3, #8]
 8025ccc:	60da      	str	r2, [r3, #12]
 8025cce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8025cd0:	687b      	ldr	r3, [r7, #4]
 8025cd2:	681b      	ldr	r3, [r3, #0]
 8025cd4:	4a79      	ldr	r2, [pc, #484]	; (8025ebc <HAL_UART_MspInit+0x204>)
 8025cd6:	4293      	cmp	r3, r2
 8025cd8:	f040 8082 	bne.w	8025de0 <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8025cdc:	2300      	movs	r3, #0
 8025cde:	61bb      	str	r3, [r7, #24]
 8025ce0:	4a77      	ldr	r2, [pc, #476]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025ce2:	4b77      	ldr	r3, [pc, #476]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8025cea:	6413      	str	r3, [r2, #64]	; 0x40
 8025cec:	4b74      	ldr	r3, [pc, #464]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025cf4:	61bb      	str	r3, [r7, #24]
 8025cf6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025cf8:	2300      	movs	r3, #0
 8025cfa:	617b      	str	r3, [r7, #20]
 8025cfc:	4a70      	ldr	r2, [pc, #448]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025cfe:	4b70      	ldr	r3, [pc, #448]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d02:	f043 0304 	orr.w	r3, r3, #4
 8025d06:	6313      	str	r3, [r2, #48]	; 0x30
 8025d08:	4b6d      	ldr	r3, [pc, #436]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d0c:	f003 0304 	and.w	r3, r3, #4
 8025d10:	617b      	str	r3, [r7, #20]
 8025d12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8025d14:	2300      	movs	r3, #0
 8025d16:	613b      	str	r3, [r7, #16]
 8025d18:	4a69      	ldr	r2, [pc, #420]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025d1a:	4b69      	ldr	r3, [pc, #420]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d1e:	f043 0308 	orr.w	r3, r3, #8
 8025d22:	6313      	str	r3, [r2, #48]	; 0x30
 8025d24:	4b66      	ldr	r3, [pc, #408]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d28:	f003 0308 	and.w	r3, r3, #8
 8025d2c:	613b      	str	r3, [r7, #16]
 8025d2e:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8025d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8025d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025d36:	2302      	movs	r3, #2
 8025d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8025d3a:	2301      	movs	r3, #1
 8025d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025d3e:	2303      	movs	r3, #3
 8025d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8025d42:	2308      	movs	r3, #8
 8025d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025d46:	f107 031c 	add.w	r3, r7, #28
 8025d4a:	4619      	mov	r1, r3
 8025d4c:	485d      	ldr	r0, [pc, #372]	; (8025ec4 <HAL_UART_MspInit+0x20c>)
 8025d4e:	f7ec fb2f 	bl	80123b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8025d52:	2304      	movs	r3, #4
 8025d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025d56:	2302      	movs	r3, #2
 8025d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8025d5a:	2301      	movs	r3, #1
 8025d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025d5e:	2303      	movs	r3, #3
 8025d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8025d62:	2308      	movs	r3, #8
 8025d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8025d66:	f107 031c 	add.w	r3, r7, #28
 8025d6a:	4619      	mov	r1, r3
 8025d6c:	4856      	ldr	r0, [pc, #344]	; (8025ec8 <HAL_UART_MspInit+0x210>)
 8025d6e:	f7ec fb1f 	bl	80123b0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8025d72:	4b56      	ldr	r3, [pc, #344]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025d74:	4a56      	ldr	r2, [pc, #344]	; (8025ed0 <HAL_UART_MspInit+0x218>)
 8025d76:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8025d78:	4b54      	ldr	r3, [pc, #336]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025d7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8025d7e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8025d80:	4b52      	ldr	r3, [pc, #328]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025d82:	2240      	movs	r2, #64	; 0x40
 8025d84:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8025d86:	4b51      	ldr	r3, [pc, #324]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025d88:	2200      	movs	r2, #0
 8025d8a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8025d8c:	4b4f      	ldr	r3, [pc, #316]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025d92:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8025d94:	4b4d      	ldr	r3, [pc, #308]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025d96:	2200      	movs	r2, #0
 8025d98:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8025d9a:	4b4c      	ldr	r3, [pc, #304]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025d9c:	2200      	movs	r2, #0
 8025d9e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8025da0:	4b4a      	ldr	r3, [pc, #296]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025da2:	2200      	movs	r2, #0
 8025da4:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8025da6:	4b49      	ldr	r3, [pc, #292]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025da8:	2200      	movs	r2, #0
 8025daa:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8025dac:	4b47      	ldr	r3, [pc, #284]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025dae:	2200      	movs	r2, #0
 8025db0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8025db2:	4846      	ldr	r0, [pc, #280]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025db4:	f7ea fc46 	bl	8010644 <HAL_DMA_Init>
 8025db8:	4603      	mov	r3, r0
 8025dba:	2b00      	cmp	r3, #0
 8025dbc:	d001      	beq.n	8025dc2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8025dbe:	f7fe ff27 	bl	8024c10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8025dc2:	687b      	ldr	r3, [r7, #4]
 8025dc4:	4a41      	ldr	r2, [pc, #260]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8025dc8:	4a40      	ldr	r2, [pc, #256]	; (8025ecc <HAL_UART_MspInit+0x214>)
 8025dca:	687b      	ldr	r3, [r7, #4]
 8025dcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8025dce:	2200      	movs	r2, #0
 8025dd0:	2105      	movs	r1, #5
 8025dd2:	2035      	movs	r0, #53	; 0x35
 8025dd4:	f7ea fbfe 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8025dd8:	2035      	movs	r0, #53	; 0x35
 8025dda:	f7ea fc17 	bl	801060c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8025dde:	e068      	b.n	8025eb2 <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART1)
 8025de0:	687b      	ldr	r3, [r7, #4]
 8025de2:	681b      	ldr	r3, [r3, #0]
 8025de4:	4a3b      	ldr	r2, [pc, #236]	; (8025ed4 <HAL_UART_MspInit+0x21c>)
 8025de6:	4293      	cmp	r3, r2
 8025de8:	d163      	bne.n	8025eb2 <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART1_CLK_ENABLE();
 8025dea:	2300      	movs	r3, #0
 8025dec:	60fb      	str	r3, [r7, #12]
 8025dee:	4a34      	ldr	r2, [pc, #208]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025df0:	4b33      	ldr	r3, [pc, #204]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025df4:	f043 0310 	orr.w	r3, r3, #16
 8025df8:	6453      	str	r3, [r2, #68]	; 0x44
 8025dfa:	4b31      	ldr	r3, [pc, #196]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025dfe:	f003 0310 	and.w	r3, r3, #16
 8025e02:	60fb      	str	r3, [r7, #12]
 8025e04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025e06:	2300      	movs	r3, #0
 8025e08:	60bb      	str	r3, [r7, #8]
 8025e0a:	4a2d      	ldr	r2, [pc, #180]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025e0c:	4b2c      	ldr	r3, [pc, #176]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025e10:	f043 0301 	orr.w	r3, r3, #1
 8025e14:	6313      	str	r3, [r2, #48]	; 0x30
 8025e16:	4b2a      	ldr	r3, [pc, #168]	; (8025ec0 <HAL_UART_MspInit+0x208>)
 8025e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025e1a:	f003 0301 	and.w	r3, r3, #1
 8025e1e:	60bb      	str	r3, [r7, #8]
 8025e20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8025e22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8025e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025e28:	2302      	movs	r3, #2
 8025e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8025e2c:	2301      	movs	r3, #1
 8025e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025e30:	2303      	movs	r3, #3
 8025e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8025e34:	2307      	movs	r3, #7
 8025e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025e38:	f107 031c 	add.w	r3, r7, #28
 8025e3c:	4619      	mov	r1, r3
 8025e3e:	4826      	ldr	r0, [pc, #152]	; (8025ed8 <HAL_UART_MspInit+0x220>)
 8025e40:	f7ec fab6 	bl	80123b0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8025e44:	4b25      	ldr	r3, [pc, #148]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e46:	4a26      	ldr	r2, [pc, #152]	; (8025ee0 <HAL_UART_MspInit+0x228>)
 8025e48:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8025e4a:	4b24      	ldr	r3, [pc, #144]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8025e50:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8025e52:	4b22      	ldr	r3, [pc, #136]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e54:	2240      	movs	r2, #64	; 0x40
 8025e56:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8025e58:	4b20      	ldr	r3, [pc, #128]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e5a:	2200      	movs	r2, #0
 8025e5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8025e5e:	4b1f      	ldr	r3, [pc, #124]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025e64:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8025e66:	4b1d      	ldr	r3, [pc, #116]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e68:	2200      	movs	r2, #0
 8025e6a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8025e6c:	4b1b      	ldr	r3, [pc, #108]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e6e:	2200      	movs	r2, #0
 8025e70:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8025e72:	4b1a      	ldr	r3, [pc, #104]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e74:	2200      	movs	r2, #0
 8025e76:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8025e78:	4b18      	ldr	r3, [pc, #96]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8025e7e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8025e80:	4b16      	ldr	r3, [pc, #88]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e82:	2200      	movs	r2, #0
 8025e84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8025e86:	4815      	ldr	r0, [pc, #84]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e88:	f7ea fbdc 	bl	8010644 <HAL_DMA_Init>
 8025e8c:	4603      	mov	r3, r0
 8025e8e:	2b00      	cmp	r3, #0
 8025e90:	d001      	beq.n	8025e96 <HAL_UART_MspInit+0x1de>
      Error_Handler();
 8025e92:	f7fe febd 	bl	8024c10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8025e96:	687b      	ldr	r3, [r7, #4]
 8025e98:	4a10      	ldr	r2, [pc, #64]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8025e9c:	4a0f      	ldr	r2, [pc, #60]	; (8025edc <HAL_UART_MspInit+0x224>)
 8025e9e:	687b      	ldr	r3, [r7, #4]
 8025ea0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8025ea2:	2200      	movs	r2, #0
 8025ea4:	2105      	movs	r1, #5
 8025ea6:	2025      	movs	r0, #37	; 0x25
 8025ea8:	f7ea fb94 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8025eac:	2025      	movs	r0, #37	; 0x25
 8025eae:	f7ea fbad 	bl	801060c <HAL_NVIC_EnableIRQ>
}
 8025eb2:	bf00      	nop
 8025eb4:	3730      	adds	r7, #48	; 0x30
 8025eb6:	46bd      	mov	sp, r7
 8025eb8:	bd80      	pop	{r7, pc}
 8025eba:	bf00      	nop
 8025ebc:	40005000 	.word	0x40005000
 8025ec0:	40023800 	.word	0x40023800
 8025ec4:	40020800 	.word	0x40020800
 8025ec8:	40020c00 	.word	0x40020c00
 8025ecc:	2000bf6c 	.word	0x2000bf6c
 8025ed0:	400260b8 	.word	0x400260b8
 8025ed4:	40011000 	.word	0x40011000
 8025ed8:	40020000 	.word	0x40020000
 8025edc:	2000be8c 	.word	0x2000be8c
 8025ee0:	400264b8 	.word	0x400264b8

08025ee4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8025ee4:	b580      	push	{r7, lr}
 8025ee6:	b082      	sub	sp, #8
 8025ee8:	af00      	add	r7, sp, #0
 8025eea:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART5)
 8025eec:	687b      	ldr	r3, [r7, #4]
 8025eee:	681b      	ldr	r3, [r3, #0]
 8025ef0:	4a1b      	ldr	r2, [pc, #108]	; (8025f60 <HAL_UART_MspDeInit+0x7c>)
 8025ef2:	4293      	cmp	r3, r2
 8025ef4:	d117      	bne.n	8025f26 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 8025ef6:	4a1b      	ldr	r2, [pc, #108]	; (8025f64 <HAL_UART_MspDeInit+0x80>)
 8025ef8:	4b1a      	ldr	r3, [pc, #104]	; (8025f64 <HAL_UART_MspDeInit+0x80>)
 8025efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025efc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8025f00:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8025f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8025f06:	4818      	ldr	r0, [pc, #96]	; (8025f68 <HAL_UART_MspDeInit+0x84>)
 8025f08:	f7ec fbec 	bl	80126e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8025f0c:	2104      	movs	r1, #4
 8025f0e:	4817      	ldr	r0, [pc, #92]	; (8025f6c <HAL_UART_MspDeInit+0x88>)
 8025f10:	f7ec fbe8 	bl	80126e4 <HAL_GPIO_DeInit>

    /* UART5 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8025f14:	687b      	ldr	r3, [r7, #4]
 8025f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025f18:	4618      	mov	r0, r3
 8025f1a:	f7ea fc41 	bl	80107a0 <HAL_DMA_DeInit>

    /* UART5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8025f1e:	2035      	movs	r0, #53	; 0x35
 8025f20:	f7ea fb82 	bl	8010628 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
} 
 8025f24:	e017      	b.n	8025f56 <HAL_UART_MspDeInit+0x72>
  else if(uartHandle->Instance==USART1)
 8025f26:	687b      	ldr	r3, [r7, #4]
 8025f28:	681b      	ldr	r3, [r3, #0]
 8025f2a:	4a11      	ldr	r2, [pc, #68]	; (8025f70 <HAL_UART_MspDeInit+0x8c>)
 8025f2c:	4293      	cmp	r3, r2
 8025f2e:	d112      	bne.n	8025f56 <HAL_UART_MspDeInit+0x72>
    __HAL_RCC_USART1_CLK_DISABLE();
 8025f30:	4a0c      	ldr	r2, [pc, #48]	; (8025f64 <HAL_UART_MspDeInit+0x80>)
 8025f32:	4b0c      	ldr	r3, [pc, #48]	; (8025f64 <HAL_UART_MspDeInit+0x80>)
 8025f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025f36:	f023 0310 	bic.w	r3, r3, #16
 8025f3a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8025f3c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8025f40:	480c      	ldr	r0, [pc, #48]	; (8025f74 <HAL_UART_MspDeInit+0x90>)
 8025f42:	f7ec fbcf 	bl	80126e4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8025f46:	687b      	ldr	r3, [r7, #4]
 8025f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025f4a:	4618      	mov	r0, r3
 8025f4c:	f7ea fc28 	bl	80107a0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8025f50:	2025      	movs	r0, #37	; 0x25
 8025f52:	f7ea fb69 	bl	8010628 <HAL_NVIC_DisableIRQ>
} 
 8025f56:	bf00      	nop
 8025f58:	3708      	adds	r7, #8
 8025f5a:	46bd      	mov	sp, r7
 8025f5c:	bd80      	pop	{r7, pc}
 8025f5e:	bf00      	nop
 8025f60:	40005000 	.word	0x40005000
 8025f64:	40023800 	.word	0x40023800
 8025f68:	40020800 	.word	0x40020800
 8025f6c:	40020c00 	.word	0x40020c00
 8025f70:	40011000 	.word	0x40011000
 8025f74:	40020000 	.word	0x40020000

08025f78 <read_param>:
extern UART_HandleTypeDef huart5;

static void form_data_parser(char * in_buf);
static uint read_param(char * out_buf, const char * const in_buf, const uint max_len);

static uint read_param(char * out_buf, const char * const  in_buf, const uint max_len){
 8025f78:	b480      	push	{r7}
 8025f7a:	b087      	sub	sp, #28
 8025f7c:	af00      	add	r7, sp, #0
 8025f7e:	60f8      	str	r0, [r7, #12]
 8025f80:	60b9      	str	r1, [r7, #8]
 8025f82:	607a      	str	r2, [r7, #4]
	const char* tmp_p =  in_buf;
 8025f84:	68bb      	ldr	r3, [r7, #8]
 8025f86:	617b      	str	r3, [r7, #20]
	uint len = 0;
 8025f88:	2300      	movs	r3, #0
 8025f8a:	613b      	str	r3, [r7, #16]
	while (*tmp_p != ' ' && *tmp_p != '&' && len <= max_len) {
 8025f8c:	e00b      	b.n	8025fa6 <read_param+0x2e>
		*out_buf++ = *tmp_p;
 8025f8e:	68fb      	ldr	r3, [r7, #12]
 8025f90:	1c5a      	adds	r2, r3, #1
 8025f92:	60fa      	str	r2, [r7, #12]
 8025f94:	697a      	ldr	r2, [r7, #20]
 8025f96:	7812      	ldrb	r2, [r2, #0]
 8025f98:	701a      	strb	r2, [r3, #0]
		len++;
 8025f9a:	693b      	ldr	r3, [r7, #16]
 8025f9c:	3301      	adds	r3, #1
 8025f9e:	613b      	str	r3, [r7, #16]
		tmp_p++;
 8025fa0:	697b      	ldr	r3, [r7, #20]
 8025fa2:	3301      	adds	r3, #1
 8025fa4:	617b      	str	r3, [r7, #20]
	while (*tmp_p != ' ' && *tmp_p != '&' && len <= max_len) {
 8025fa6:	697b      	ldr	r3, [r7, #20]
 8025fa8:	781b      	ldrb	r3, [r3, #0]
 8025faa:	2b20      	cmp	r3, #32
 8025fac:	d007      	beq.n	8025fbe <read_param+0x46>
 8025fae:	697b      	ldr	r3, [r7, #20]
 8025fb0:	781b      	ldrb	r3, [r3, #0]
 8025fb2:	2b26      	cmp	r3, #38	; 0x26
 8025fb4:	d003      	beq.n	8025fbe <read_param+0x46>
 8025fb6:	693a      	ldr	r2, [r7, #16]
 8025fb8:	687b      	ldr	r3, [r7, #4]
 8025fba:	429a      	cmp	r2, r3
 8025fbc:	d9e7      	bls.n	8025f8e <read_param+0x16>
	}
	return len;
 8025fbe:	693b      	ldr	r3, [r7, #16]
}
 8025fc0:	4618      	mov	r0, r3
 8025fc2:	371c      	adds	r7, #28
 8025fc4:	46bd      	mov	sp, r7
 8025fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fca:	4770      	bx	lr

08025fcc <form_data_parser>:



static void form_data_parser(char * in_buf) {
 8025fcc:	b580      	push	{r7, lr}
 8025fce:	b08a      	sub	sp, #40	; 0x28
 8025fd0:	af00      	add	r7, sp, #0
 8025fd2:	6078      	str	r0, [r7, #4]
	char par_str[16];
	uint par_len;
	uint baudrate = 0;
 8025fd4:	2300      	movs	r3, #0
 8025fd6:	627b      	str	r3, [r7, #36]	; 0x24
	while (*in_buf != ' ') {
 8025fd8:	e07d      	b.n	80260d6 <form_data_parser+0x10a>
		if (*in_buf == '&') {
 8025fda:	687b      	ldr	r3, [r7, #4]
 8025fdc:	781b      	ldrb	r3, [r3, #0]
 8025fde:	2b26      	cmp	r3, #38	; 0x26
 8025fe0:	d102      	bne.n	8025fe8 <form_data_parser+0x1c>
			in_buf++;
 8025fe2:	687b      	ldr	r3, [r7, #4]
 8025fe4:	3301      	adds	r3, #1
 8025fe6:	607b      	str	r3, [r7, #4]
		}
		int param_num = atoi(in_buf);
 8025fe8:	6878      	ldr	r0, [r7, #4]
 8025fea:	f000 fa34 	bl	8026456 <atoi>
 8025fee:	6238      	str	r0, [r7, #32]
		if (param_num < 9){
 8025ff0:	6a3b      	ldr	r3, [r7, #32]
 8025ff2:	2b08      	cmp	r3, #8
 8025ff4:	dc03      	bgt.n	8025ffe <form_data_parser+0x32>
			in_buf += 2;
 8025ff6:	687b      	ldr	r3, [r7, #4]
 8025ff8:	3302      	adds	r3, #2
 8025ffa:	607b      	str	r3, [r7, #4]
 8025ffc:	e002      	b.n	8026004 <form_data_parser+0x38>
		} else {
			in_buf += 3;
 8025ffe:	687b      	ldr	r3, [r7, #4]
 8026000:	3303      	adds	r3, #3
 8026002:	607b      	str	r3, [r7, #4]
		}
		switch(param_num){
 8026004:	6a3b      	ldr	r3, [r7, #32]
 8026006:	2b01      	cmp	r3, #1
 8026008:	d002      	beq.n	8026010 <form_data_parser+0x44>
 802600a:	2b02      	cmp	r3, #2
 802600c:	d02e      	beq.n	802606c <form_data_parser+0xa0>
 802600e:	e062      	b.n	80260d6 <form_data_parser+0x10a>
		case 1:                                        //IP-address
			par_len = read_param(par_str,in_buf,15);
 8026010:	f107 030c 	add.w	r3, r7, #12
 8026014:	220f      	movs	r2, #15
 8026016:	6879      	ldr	r1, [r7, #4]
 8026018:	4618      	mov	r0, r3
 802601a:	f7ff ffad 	bl	8025f78 <read_param>
 802601e:	61f8      	str	r0, [r7, #28]
			par_str[par_len] = '\0';
 8026020:	f107 020c 	add.w	r2, r7, #12
 8026024:	69fb      	ldr	r3, [r7, #28]
 8026026:	4413      	add	r3, r2
 8026028:	2200      	movs	r2, #0
 802602a:	701a      	strb	r2, [r3, #0]
			ip4_addr_t new_ip;
			ipaddr_aton(par_str,&new_ip);
 802602c:	f107 0208 	add.w	r2, r7, #8
 8026030:	f107 030c 	add.w	r3, r7, #12
 8026034:	4611      	mov	r1, r2
 8026036:	4618      	mov	r0, r3
 8026038:	f7f4 fd20 	bl	801aa7c <ip4addr_aton>
			EE_WriteVariable(IP_02_01_ADDR,(uint16_t)(new_ip.addr & 0x0000FFFF));
 802603c:	68bb      	ldr	r3, [r7, #8]
 802603e:	b29b      	uxth	r3, r3
 8026040:	4619      	mov	r1, r3
 8026042:	2001      	movs	r0, #1
 8026044:	f7fd fcde 	bl	8023a04 <EE_WriteVariable>
			EE_WriteVariable(IP_04_03_ADDR,(uint16_t)((new_ip.addr >> 16) & 0x0000FFFF));
 8026048:	68bb      	ldr	r3, [r7, #8]
 802604a:	0c1b      	lsrs	r3, r3, #16
 802604c:	b29b      	uxth	r3, r3
 802604e:	4619      	mov	r1, r3
 8026050:	2002      	movs	r0, #2
 8026052:	f7fd fcd7 	bl	8023a04 <EE_WriteVariable>
			netif_set_ipaddr(&gnetif,&new_ip);
 8026056:	f107 0308 	add.w	r3, r7, #8
 802605a:	4619      	mov	r1, r3
 802605c:	4822      	ldr	r0, [pc, #136]	; (80260e8 <form_data_parser+0x11c>)
 802605e:	f7f6 f95b 	bl	801c318 <netif_set_ipaddr>
			in_buf += par_len;
 8026062:	687a      	ldr	r2, [r7, #4]
 8026064:	69fb      	ldr	r3, [r7, #28]
 8026066:	4413      	add	r3, r2
 8026068:	607b      	str	r3, [r7, #4]
			break;
 802606a:	e034      	b.n	80260d6 <form_data_parser+0x10a>
		case 2:                                       //Baudrate
			par_len = read_param(par_str,in_buf,15);
 802606c:	f107 030c 	add.w	r3, r7, #12
 8026070:	220f      	movs	r2, #15
 8026072:	6879      	ldr	r1, [r7, #4]
 8026074:	4618      	mov	r0, r3
 8026076:	f7ff ff7f 	bl	8025f78 <read_param>
 802607a:	61f8      	str	r0, [r7, #28]
			par_str[par_len] = '\0';
 802607c:	f107 020c 	add.w	r2, r7, #12
 8026080:	69fb      	ldr	r3, [r7, #28]
 8026082:	4413      	add	r3, r2
 8026084:	2200      	movs	r2, #0
 8026086:	701a      	strb	r2, [r3, #0]
			baudrate = atoi(par_str);
 8026088:	f107 030c 	add.w	r3, r7, #12
 802608c:	4618      	mov	r0, r3
 802608e:	f000 f9e2 	bl	8026456 <atoi>
 8026092:	4603      	mov	r3, r0
 8026094:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_UART_DeInit(&huart5);
 8026096:	4815      	ldr	r0, [pc, #84]	; (80260ec <form_data_parser+0x120>)
 8026098:	f7ed fd01 	bl	8013a9e <HAL_UART_DeInit>
			huart5.Init.BaudRate = baudrate;
 802609c:	4a13      	ldr	r2, [pc, #76]	; (80260ec <form_data_parser+0x120>)
 802609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260a0:	6053      	str	r3, [r2, #4]
			EE_WriteVariable(BR_LS_ADDR,(uint16_t)(baudrate & 0x0000FFFF));
 80260a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260a4:	b29b      	uxth	r3, r3
 80260a6:	4619      	mov	r1, r3
 80260a8:	2004      	movs	r0, #4
 80260aa:	f7fd fcab 	bl	8023a04 <EE_WriteVariable>
			EE_WriteVariable(BR_MS_ADDR,(uint16_t)((baudrate >> 16) & 0x0000FFFF));
 80260ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260b0:	0c1b      	lsrs	r3, r3, #16
 80260b2:	b29b      	uxth	r3, r3
 80260b4:	4619      	mov	r1, r3
 80260b6:	2003      	movs	r0, #3
 80260b8:	f7fd fca4 	bl	8023a04 <EE_WriteVariable>
			if (HAL_UART_Init(&huart5) != HAL_OK)
 80260bc:	480b      	ldr	r0, [pc, #44]	; (80260ec <form_data_parser+0x120>)
 80260be:	f7ed fca1 	bl	8013a04 <HAL_UART_Init>
 80260c2:	4603      	mov	r3, r0
 80260c4:	2b00      	cmp	r3, #0
 80260c6:	d001      	beq.n	80260cc <form_data_parser+0x100>
			{
			   Error_Handler();
 80260c8:	f7fe fda2 	bl	8024c10 <Error_Handler>
			}
			in_buf += par_len;
 80260cc:	687a      	ldr	r2, [r7, #4]
 80260ce:	69fb      	ldr	r3, [r7, #28]
 80260d0:	4413      	add	r3, r2
 80260d2:	607b      	str	r3, [r7, #4]
			break;
 80260d4:	bf00      	nop
	while (*in_buf != ' ') {
 80260d6:	687b      	ldr	r3, [r7, #4]
 80260d8:	781b      	ldrb	r3, [r3, #0]
 80260da:	2b20      	cmp	r3, #32
 80260dc:	f47f af7d 	bne.w	8025fda <form_data_parser+0xe>
		}
	}
}
 80260e0:	bf00      	nop
 80260e2:	3728      	adds	r7, #40	; 0x28
 80260e4:	46bd      	mov	sp, r7
 80260e6:	bd80      	pop	{r7, pc}
 80260e8:	2000bd70 	.word	0x2000bd70
 80260ec:	2000beec 	.word	0x2000beec

080260f0 <web_server_thread>:

void web_server_thread(void *arg) {
 80260f0:	b590      	push	{r4, r7, lr}
 80260f2:	b091      	sub	sp, #68	; 0x44
 80260f4:	af02      	add	r7, sp, #8
 80260f6:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	struct netbuf *inbuf;
	struct netconn *newconn;
	struct netconn *arg_conn;
	arg_conn = (struct netconn *) arg;
 80260f8:	687b      	ldr	r3, [r7, #4]
 80260fa:	637b      	str	r3, [r7, #52]	; 0x34
	u16_t buflen;
	char* buf;
	struct fs_file file;

	printf("Net task created.\n");
 80260fc:	48a9      	ldr	r0, [pc, #676]	; (80263a4 <web_server_thread+0x2b4>)
 80260fe:	f7ff fd59 	bl	8025bb4 <puts>
	osDelay(1);
 8026102:	2001      	movs	r0, #1
 8026104:	f7ee faec 	bl	80146e0 <osDelay>
	for (;;) {
		err = netconn_accept(arg_conn, &newconn);
 8026108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802610c:	4619      	mov	r1, r3
 802610e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8026110:	f7f1 f844 	bl	801719c <netconn_accept>
 8026114:	4603      	mov	r3, r0
 8026116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (err == ERR_OK) {
 802611a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 802611e:	2b00      	cmp	r3, #0
 8026120:	d1f2      	bne.n	8026108 <web_server_thread+0x18>
			printf("Accept.\n");
 8026122:	48a1      	ldr	r0, [pc, #644]	; (80263a8 <web_server_thread+0x2b8>)
 8026124:	f7ff fd46 	bl	8025bb4 <puts>
			recv_err = netconn_recv(newconn, &inbuf);
 8026128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802612a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 802612e:	4611      	mov	r1, r2
 8026130:	4618      	mov	r0, r3
 8026132:	f7f1 f981 	bl	8017438 <netconn_recv>
 8026136:	4603      	mov	r3, r0
 8026138:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			if (recv_err == ERR_OK) {
 802613c:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8026140:	2b00      	cmp	r3, #0
 8026142:	f040 8122 	bne.w	802638a <web_server_thread+0x29a>
				if (netconn_err(newconn) == ERR_OK) {
 8026146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026148:	f993 3008 	ldrsb.w	r3, [r3, #8]
 802614c:	2b00      	cmp	r3, #0
 802614e:	f040 811c 	bne.w	802638a <web_server_thread+0x29a>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 8026152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026154:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8026158:	f107 0120 	add.w	r1, r7, #32
 802615c:	4618      	mov	r0, r3
 802615e:	f7f2 feeb 	bl	8018f38 <netbuf_data>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
 8026162:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8026164:	2b04      	cmp	r3, #4
 8026166:	f240 8110 	bls.w	802638a <web_server_thread+0x29a>
 802616a:	6a3b      	ldr	r3, [r7, #32]
 802616c:	2205      	movs	r2, #5
 802616e:	498f      	ldr	r1, [pc, #572]	; (80263ac <web_server_thread+0x2bc>)
 8026170:	4618      	mov	r0, r3
 8026172:	f000 f9c3 	bl	80264fc <strncmp>
 8026176:	4603      	mov	r3, r0
 8026178:	2b00      	cmp	r3, #0
 802617a:	f040 8106 	bne.w	802638a <web_server_thread+0x29a>
						buf += 5;
 802617e:	6a3b      	ldr	r3, [r7, #32]
 8026180:	3305      	adds	r3, #5
 8026182:	623b      	str	r3, [r7, #32]
						if ((strncmp((char const *) buf, " ", 1) == 0)
 8026184:	6a3b      	ldr	r3, [r7, #32]
 8026186:	781a      	ldrb	r2, [r3, #0]
 8026188:	4b89      	ldr	r3, [pc, #548]	; (80263b0 <web_server_thread+0x2c0>)
 802618a:	781b      	ldrb	r3, [r3, #0]
 802618c:	429a      	cmp	r2, r3
 802618e:	d008      	beq.n	80261a2 <web_server_thread+0xb2>
								|| (strncmp((char const *) buf, "index.shtml",
 8026190:	6a3b      	ldr	r3, [r7, #32]
 8026192:	220b      	movs	r2, #11
 8026194:	4987      	ldr	r1, [pc, #540]	; (80263b4 <web_server_thread+0x2c4>)
 8026196:	4618      	mov	r0, r3
 8026198:	f000 f9b0 	bl	80264fc <strncmp>
 802619c:	4603      	mov	r3, r0
 802619e:	2b00      	cmp	r3, #0
 80261a0:	d114      	bne.n	80261cc <web_server_thread+0xdc>
										11) == 0)) {
							fs_open(&file, "/index.shtml");
 80261a2:	f107 030c 	add.w	r3, r7, #12
 80261a6:	4984      	ldr	r1, [pc, #528]	; (80263b8 <web_server_thread+0x2c8>)
 80261a8:	4618      	mov	r0, r3
 80261aa:	f7f3 f885 	bl	80192b8 <fs_open>
							netconn_write(newconn,
 80261ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80261b0:	68f9      	ldr	r1, [r7, #12]
 80261b2:	693b      	ldr	r3, [r7, #16]
 80261b4:	461a      	mov	r2, r3
 80261b6:	2300      	movs	r3, #0
 80261b8:	9300      	str	r3, [sp, #0]
 80261ba:	2300      	movs	r3, #0
 80261bc:	f7f1 f9b4 	bl	8017528 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 80261c0:	f107 030c 	add.w	r3, r7, #12
 80261c4:	4618      	mov	r0, r3
 80261c6:	f7f3 f8b5 	bl	8019334 <fs_close>
 80261ca:	e0de      	b.n	802638a <web_server_thread+0x29a>
						} else if (strncmp((char const *) buf, "img/logo.png",
 80261cc:	6a3b      	ldr	r3, [r7, #32]
 80261ce:	220c      	movs	r2, #12
 80261d0:	497a      	ldr	r1, [pc, #488]	; (80263bc <web_server_thread+0x2cc>)
 80261d2:	4618      	mov	r0, r3
 80261d4:	f000 f992 	bl	80264fc <strncmp>
 80261d8:	4603      	mov	r3, r0
 80261da:	2b00      	cmp	r3, #0
 80261dc:	d114      	bne.n	8026208 <web_server_thread+0x118>
								12) == 0) {
							fs_open(&file, "/img/logo.png");
 80261de:	f107 030c 	add.w	r3, r7, #12
 80261e2:	4977      	ldr	r1, [pc, #476]	; (80263c0 <web_server_thread+0x2d0>)
 80261e4:	4618      	mov	r0, r3
 80261e6:	f7f3 f867 	bl	80192b8 <fs_open>
							netconn_write(newconn,
 80261ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80261ec:	68f9      	ldr	r1, [r7, #12]
 80261ee:	693b      	ldr	r3, [r7, #16]
 80261f0:	461a      	mov	r2, r3
 80261f2:	2300      	movs	r3, #0
 80261f4:	9300      	str	r3, [sp, #0]
 80261f6:	2300      	movs	r3, #0
 80261f8:	f7f1 f996 	bl	8017528 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 80261fc:	f107 030c 	add.w	r3, r7, #12
 8026200:	4618      	mov	r0, r3
 8026202:	f7f3 f897 	bl	8019334 <fs_close>
 8026206:	e0c0      	b.n	802638a <web_server_thread+0x29a>
						} else if (strncmp((char const *) buf, "img/icon.png",
 8026208:	6a3b      	ldr	r3, [r7, #32]
 802620a:	220c      	movs	r2, #12
 802620c:	496d      	ldr	r1, [pc, #436]	; (80263c4 <web_server_thread+0x2d4>)
 802620e:	4618      	mov	r0, r3
 8026210:	f000 f974 	bl	80264fc <strncmp>
 8026214:	4603      	mov	r3, r0
 8026216:	2b00      	cmp	r3, #0
 8026218:	d114      	bne.n	8026244 <web_server_thread+0x154>
								12) == 0) {
							fs_open(&file, "/img/icon.png");
 802621a:	f107 030c 	add.w	r3, r7, #12
 802621e:	496a      	ldr	r1, [pc, #424]	; (80263c8 <web_server_thread+0x2d8>)
 8026220:	4618      	mov	r0, r3
 8026222:	f7f3 f849 	bl	80192b8 <fs_open>
							netconn_write(newconn,
 8026226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026228:	68f9      	ldr	r1, [r7, #12]
 802622a:	693b      	ldr	r3, [r7, #16]
 802622c:	461a      	mov	r2, r3
 802622e:	2300      	movs	r3, #0
 8026230:	9300      	str	r3, [sp, #0]
 8026232:	2300      	movs	r3, #0
 8026234:	f7f1 f978 	bl	8017528 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8026238:	f107 030c 	add.w	r3, r7, #12
 802623c:	4618      	mov	r0, r3
 802623e:	f7f3 f879 	bl	8019334 <fs_close>
 8026242:	e0a2      	b.n	802638a <web_server_thread+0x29a>
						} else if (strncmp((char const *) buf, "style.css", 9)
 8026244:	6a3b      	ldr	r3, [r7, #32]
 8026246:	2209      	movs	r2, #9
 8026248:	4960      	ldr	r1, [pc, #384]	; (80263cc <web_server_thread+0x2dc>)
 802624a:	4618      	mov	r0, r3
 802624c:	f000 f956 	bl	80264fc <strncmp>
 8026250:	4603      	mov	r3, r0
 8026252:	2b00      	cmp	r3, #0
 8026254:	d114      	bne.n	8026280 <web_server_thread+0x190>
								== 0) {
							fs_open(&file, "/style.css");
 8026256:	f107 030c 	add.w	r3, r7, #12
 802625a:	495d      	ldr	r1, [pc, #372]	; (80263d0 <web_server_thread+0x2e0>)
 802625c:	4618      	mov	r0, r3
 802625e:	f7f3 f82b 	bl	80192b8 <fs_open>
							netconn_write(newconn,
 8026262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026264:	68f9      	ldr	r1, [r7, #12]
 8026266:	693b      	ldr	r3, [r7, #16]
 8026268:	461a      	mov	r2, r3
 802626a:	2300      	movs	r3, #0
 802626c:	9300      	str	r3, [sp, #0]
 802626e:	2300      	movs	r3, #0
 8026270:	f7f1 f95a 	bl	8017528 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8026274:	f107 030c 	add.w	r3, r7, #12
 8026278:	4618      	mov	r0, r3
 802627a:	f7f3 f85b 	bl	8019334 <fs_close>
 802627e:	e084      	b.n	802638a <web_server_thread+0x29a>
						} else if (strncmp((char const *) buf, "AI.shtml?led=1",
 8026280:	6a3b      	ldr	r3, [r7, #32]
 8026282:	220e      	movs	r2, #14
 8026284:	4953      	ldr	r1, [pc, #332]	; (80263d4 <web_server_thread+0x2e4>)
 8026286:	4618      	mov	r0, r3
 8026288:	f000 f938 	bl	80264fc <strncmp>
 802628c:	4603      	mov	r3, r0
 802628e:	2b00      	cmp	r3, #0
 8026290:	d105      	bne.n	802629e <web_server_thread+0x1ae>
								14) == 0) {
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8026292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8026296:	4850      	ldr	r0, [pc, #320]	; (80263d8 <web_server_thread+0x2e8>)
 8026298:	f7ec fb39 	bl	801290e <HAL_GPIO_TogglePin>
 802629c:	e075      	b.n	802638a <web_server_thread+0x29a>
						} else if (strncmp((char const *) buf, "AI.shtml?IP=",
 802629e:	6a3b      	ldr	r3, [r7, #32]
 80262a0:	220c      	movs	r2, #12
 80262a2:	494e      	ldr	r1, [pc, #312]	; (80263dc <web_server_thread+0x2ec>)
 80262a4:	4618      	mov	r0, r3
 80262a6:	f000 f929 	bl	80264fc <strncmp>
 80262aa:	4603      	mov	r3, r0
 80262ac:	2b00      	cmp	r3, #0
 80262ae:	d115      	bne.n	80262dc <web_server_thread+0x1ec>
								12) == 0) {
							sprintf(PAGE_BODY, "%s%s", PAGE_HEADER,
 80262b0:	484b      	ldr	r0, [pc, #300]	; (80263e0 <web_server_thread+0x2f0>)
 80262b2:	f7f4 fd23 	bl	801acfc <ip4addr_ntoa>
 80262b6:	4603      	mov	r3, r0
 80262b8:	4a4a      	ldr	r2, [pc, #296]	; (80263e4 <web_server_thread+0x2f4>)
 80262ba:	494b      	ldr	r1, [pc, #300]	; (80263e8 <web_server_thread+0x2f8>)
 80262bc:	484b      	ldr	r0, [pc, #300]	; (80263ec <web_server_thread+0x2fc>)
 80262be:	f7ff fc19 	bl	8025af4 <siprintf>
									ip4addr_ntoa(&gnetif.ip_addr));
							netconn_write(newconn, PAGE_BODY,
 80262c2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80262c4:	4849      	ldr	r0, [pc, #292]	; (80263ec <web_server_thread+0x2fc>)
 80262c6:	f7e9 fec5 	bl	8010054 <strlen>
 80262ca:	4602      	mov	r2, r0
 80262cc:	2300      	movs	r3, #0
 80262ce:	9300      	str	r3, [sp, #0]
 80262d0:	2301      	movs	r3, #1
 80262d2:	4946      	ldr	r1, [pc, #280]	; (80263ec <web_server_thread+0x2fc>)
 80262d4:	4620      	mov	r0, r4
 80262d6:	f7f1 f927 	bl	8017528 <netconn_write_partly>
 80262da:	e056      	b.n	802638a <web_server_thread+0x29a>
									strlen((char* )PAGE_BODY), NETCONN_COPY);
						} else if (strncmp((char const *) buf, "AI.shtml?BR=",
 80262dc:	6a3b      	ldr	r3, [r7, #32]
 80262de:	220c      	movs	r2, #12
 80262e0:	4943      	ldr	r1, [pc, #268]	; (80263f0 <web_server_thread+0x300>)
 80262e2:	4618      	mov	r0, r3
 80262e4:	f000 f90a 	bl	80264fc <strncmp>
 80262e8:	4603      	mov	r3, r0
 80262ea:	2b00      	cmp	r3, #0
 80262ec:	d113      	bne.n	8026316 <web_server_thread+0x226>
								12) == 0) {

							sprintf(PAGE_BODY, "%s%u", PAGE_HEADER,(uint)huart5.Init.BaudRate);
 80262ee:	4b41      	ldr	r3, [pc, #260]	; (80263f4 <web_server_thread+0x304>)
 80262f0:	685b      	ldr	r3, [r3, #4]
 80262f2:	4a3c      	ldr	r2, [pc, #240]	; (80263e4 <web_server_thread+0x2f4>)
 80262f4:	4940      	ldr	r1, [pc, #256]	; (80263f8 <web_server_thread+0x308>)
 80262f6:	483d      	ldr	r0, [pc, #244]	; (80263ec <web_server_thread+0x2fc>)
 80262f8:	f7ff fbfc 	bl	8025af4 <siprintf>
							netconn_write(newconn, PAGE_BODY,
 80262fc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80262fe:	483b      	ldr	r0, [pc, #236]	; (80263ec <web_server_thread+0x2fc>)
 8026300:	f7e9 fea8 	bl	8010054 <strlen>
 8026304:	4602      	mov	r2, r0
 8026306:	2300      	movs	r3, #0
 8026308:	9300      	str	r3, [sp, #0]
 802630a:	2301      	movs	r3, #1
 802630c:	4937      	ldr	r1, [pc, #220]	; (80263ec <web_server_thread+0x2fc>)
 802630e:	4620      	mov	r0, r4
 8026310:	f7f1 f90a 	bl	8017528 <netconn_write_partly>
 8026314:	e039      	b.n	802638a <web_server_thread+0x29a>
									strlen((char* )PAGE_BODY), NETCONN_COPY);
						} else if (*buf == '?') {
 8026316:	6a3b      	ldr	r3, [r7, #32]
 8026318:	781b      	ldrb	r3, [r3, #0]
 802631a:	2b3f      	cmp	r3, #63	; 0x3f
 802631c:	d11b      	bne.n	8026356 <web_server_thread+0x266>
							form_data_parser(++buf);
 802631e:	6a3b      	ldr	r3, [r7, #32]
 8026320:	3301      	adds	r3, #1
 8026322:	623b      	str	r3, [r7, #32]
 8026324:	6a3b      	ldr	r3, [r7, #32]
 8026326:	4618      	mov	r0, r3
 8026328:	f7ff fe50 	bl	8025fcc <form_data_parser>
							fs_open(&file, "/index.shtml");
 802632c:	f107 030c 	add.w	r3, r7, #12
 8026330:	4921      	ldr	r1, [pc, #132]	; (80263b8 <web_server_thread+0x2c8>)
 8026332:	4618      	mov	r0, r3
 8026334:	f7f2 ffc0 	bl	80192b8 <fs_open>
							netconn_write(newconn,
 8026338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802633a:	68f9      	ldr	r1, [r7, #12]
 802633c:	693b      	ldr	r3, [r7, #16]
 802633e:	461a      	mov	r2, r3
 8026340:	2300      	movs	r3, #0
 8026342:	9300      	str	r3, [sp, #0]
 8026344:	2300      	movs	r3, #0
 8026346:	f7f1 f8ef 	bl	8017528 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 802634a:	f107 030c 	add.w	r3, r7, #12
 802634e:	4618      	mov	r0, r3
 8026350:	f7f2 fff0 	bl	8019334 <fs_close>
 8026354:	e019      	b.n	802638a <web_server_thread+0x29a>
						} else {
							fs_open(&file, "/404.html");
 8026356:	f107 030c 	add.w	r3, r7, #12
 802635a:	4928      	ldr	r1, [pc, #160]	; (80263fc <web_server_thread+0x30c>)
 802635c:	4618      	mov	r0, r3
 802635e:	f7f2 ffab 	bl	80192b8 <fs_open>
							netconn_write(newconn,
 8026362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026364:	68f9      	ldr	r1, [r7, #12]
 8026366:	693b      	ldr	r3, [r7, #16]
 8026368:	461a      	mov	r2, r3
 802636a:	2300      	movs	r3, #0
 802636c:	9300      	str	r3, [sp, #0]
 802636e:	2300      	movs	r3, #0
 8026370:	f7f1 f8da 	bl	8017528 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8026374:	f107 030c 	add.w	r3, r7, #12
 8026378:	4618      	mov	r0, r3
 802637a:	f7f2 ffdb 	bl	8019334 <fs_close>
							printf("File not found\n");
 802637e:	4820      	ldr	r0, [pc, #128]	; (8026400 <web_server_thread+0x310>)
 8026380:	f7ff fc18 	bl	8025bb4 <puts>
							osDelay(1);
 8026384:	2001      	movs	r0, #1
 8026386:	f7ee f9ab 	bl	80146e0 <osDelay>
						}
					}
				}
			}
			netconn_close(newconn);
 802638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802638c:	4618      	mov	r0, r3
 802638e:	f7f1 f973 	bl	8017678 <netconn_close>
			netbuf_delete(inbuf);
 8026392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026394:	4618      	mov	r0, r3
 8026396:	f7f2 fdaf 	bl	8018ef8 <netbuf_delete>
			netconn_delete(newconn);
 802639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802639c:	4618      	mov	r0, r3
 802639e:	f7f0 fe73 	bl	8017088 <netconn_delete>
		err = netconn_accept(arg_conn, &newconn);
 80263a2:	e6b1      	b.n	8026108 <web_server_thread+0x18>
 80263a4:	08028f90 	.word	0x08028f90
 80263a8:	08028fa4 	.word	0x08028fa4
 80263ac:	08028fac 	.word	0x08028fac
 80263b0:	08028fb4 	.word	0x08028fb4
 80263b4:	08028fb8 	.word	0x08028fb8
 80263b8:	08028fc4 	.word	0x08028fc4
 80263bc:	08028fd4 	.word	0x08028fd4
 80263c0:	08028fe4 	.word	0x08028fe4
 80263c4:	08028ff4 	.word	0x08028ff4
 80263c8:	08029004 	.word	0x08029004
 80263cc:	08029014 	.word	0x08029014
 80263d0:	08029020 	.word	0x08029020
 80263d4:	0802902c 	.word	0x0802902c
 80263d8:	40020400 	.word	0x40020400
 80263dc:	0802903c 	.word	0x0802903c
 80263e0:	2000bd74 	.word	0x2000bd74
 80263e4:	0802b48c 	.word	0x0802b48c
 80263e8:	0802904c 	.word	0x0802904c
 80263ec:	2000425c 	.word	0x2000425c
 80263f0:	08029054 	.word	0x08029054
 80263f4:	2000beec 	.word	0x2000beec
 80263f8:	08029064 	.word	0x08029064
 80263fc:	0802906c 	.word	0x0802906c
 8026400:	08029078 	.word	0x08029078

08026404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8026404:	f8df d034 	ldr.w	sp, [pc, #52]	; 802643c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8026408:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 802640a:	e003      	b.n	8026414 <LoopCopyDataInit>

0802640c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 802640c:	4b0c      	ldr	r3, [pc, #48]	; (8026440 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 802640e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8026410:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8026412:	3104      	adds	r1, #4

08026414 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8026414:	480b      	ldr	r0, [pc, #44]	; (8026444 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8026416:	4b0c      	ldr	r3, [pc, #48]	; (8026448 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8026418:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 802641a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 802641c:	d3f6      	bcc.n	802640c <CopyDataInit>
  ldr  r2, =_sbss
 802641e:	4a0b      	ldr	r2, [pc, #44]	; (802644c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8026420:	e002      	b.n	8026428 <LoopFillZerobss>

08026422 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8026422:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8026424:	f842 3b04 	str.w	r3, [r2], #4

08026428 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8026428:	4b09      	ldr	r3, [pc, #36]	; (8026450 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 802642a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 802642c:	d3f9      	bcc.n	8026422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 802642e:	f7ff f8ef 	bl	8025610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8026432:	f000 f815 	bl	8026460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8026436:	f7fe fb27 	bl	8024a88 <main>
  bx  lr    
 802643a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 802643c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8026440:	0802b614 	.word	0x0802b614
  ldr  r0, =_sdata
 8026444:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8026448:	20000224 	.word	0x20000224
  ldr  r2, =_sbss
 802644c:	20000224 	.word	0x20000224
  ldr  r3, = _ebss
 8026450:	2000bfcc 	.word	0x2000bfcc

08026454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8026454:	e7fe      	b.n	8026454 <ADC_IRQHandler>

08026456 <atoi>:
 8026456:	220a      	movs	r2, #10
 8026458:	2100      	movs	r1, #0
 802645a:	f000 b8e1 	b.w	8026620 <strtol>
	...

08026460 <__libc_init_array>:
 8026460:	b570      	push	{r4, r5, r6, lr}
 8026462:	4e0d      	ldr	r6, [pc, #52]	; (8026498 <__libc_init_array+0x38>)
 8026464:	4c0d      	ldr	r4, [pc, #52]	; (802649c <__libc_init_array+0x3c>)
 8026466:	1ba4      	subs	r4, r4, r6
 8026468:	10a4      	asrs	r4, r4, #2
 802646a:	2500      	movs	r5, #0
 802646c:	42a5      	cmp	r5, r4
 802646e:	d109      	bne.n	8026484 <__libc_init_array+0x24>
 8026470:	4e0b      	ldr	r6, [pc, #44]	; (80264a0 <__libc_init_array+0x40>)
 8026472:	4c0c      	ldr	r4, [pc, #48]	; (80264a4 <__libc_init_array+0x44>)
 8026474:	f000 f90c 	bl	8026690 <_init>
 8026478:	1ba4      	subs	r4, r4, r6
 802647a:	10a4      	asrs	r4, r4, #2
 802647c:	2500      	movs	r5, #0
 802647e:	42a5      	cmp	r5, r4
 8026480:	d105      	bne.n	802648e <__libc_init_array+0x2e>
 8026482:	bd70      	pop	{r4, r5, r6, pc}
 8026484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026488:	4798      	blx	r3
 802648a:	3501      	adds	r5, #1
 802648c:	e7ee      	b.n	802646c <__libc_init_array+0xc>
 802648e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026492:	4798      	blx	r3
 8026494:	3501      	adds	r5, #1
 8026496:	e7f2      	b.n	802647e <__libc_init_array+0x1e>
 8026498:	0802b60c 	.word	0x0802b60c
 802649c:	0802b60c 	.word	0x0802b60c
 80264a0:	0802b60c 	.word	0x0802b60c
 80264a4:	0802b610 	.word	0x0802b610

080264a8 <memcmp>:
 80264a8:	b510      	push	{r4, lr}
 80264aa:	3901      	subs	r1, #1
 80264ac:	4402      	add	r2, r0
 80264ae:	4290      	cmp	r0, r2
 80264b0:	d101      	bne.n	80264b6 <memcmp+0xe>
 80264b2:	2000      	movs	r0, #0
 80264b4:	bd10      	pop	{r4, pc}
 80264b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80264ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80264be:	42a3      	cmp	r3, r4
 80264c0:	d0f5      	beq.n	80264ae <memcmp+0x6>
 80264c2:	1b18      	subs	r0, r3, r4
 80264c4:	bd10      	pop	{r4, pc}

080264c6 <memcpy>:
 80264c6:	b510      	push	{r4, lr}
 80264c8:	1e43      	subs	r3, r0, #1
 80264ca:	440a      	add	r2, r1
 80264cc:	4291      	cmp	r1, r2
 80264ce:	d100      	bne.n	80264d2 <memcpy+0xc>
 80264d0:	bd10      	pop	{r4, pc}
 80264d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80264d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80264da:	e7f7      	b.n	80264cc <memcpy+0x6>

080264dc <memset>:
 80264dc:	4402      	add	r2, r0
 80264de:	4603      	mov	r3, r0
 80264e0:	4293      	cmp	r3, r2
 80264e2:	d100      	bne.n	80264e6 <memset+0xa>
 80264e4:	4770      	bx	lr
 80264e6:	f803 1b01 	strb.w	r1, [r3], #1
 80264ea:	e7f9      	b.n	80264e0 <memset+0x4>

080264ec <strcpy>:
 80264ec:	4603      	mov	r3, r0
 80264ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80264f2:	f803 2b01 	strb.w	r2, [r3], #1
 80264f6:	2a00      	cmp	r2, #0
 80264f8:	d1f9      	bne.n	80264ee <strcpy+0x2>
 80264fa:	4770      	bx	lr

080264fc <strncmp>:
 80264fc:	b510      	push	{r4, lr}
 80264fe:	b16a      	cbz	r2, 802651c <strncmp+0x20>
 8026500:	3901      	subs	r1, #1
 8026502:	1884      	adds	r4, r0, r2
 8026504:	f810 3b01 	ldrb.w	r3, [r0], #1
 8026508:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802650c:	4293      	cmp	r3, r2
 802650e:	d103      	bne.n	8026518 <strncmp+0x1c>
 8026510:	42a0      	cmp	r0, r4
 8026512:	d001      	beq.n	8026518 <strncmp+0x1c>
 8026514:	2b00      	cmp	r3, #0
 8026516:	d1f5      	bne.n	8026504 <strncmp+0x8>
 8026518:	1a98      	subs	r0, r3, r2
 802651a:	bd10      	pop	{r4, pc}
 802651c:	4610      	mov	r0, r2
 802651e:	bd10      	pop	{r4, pc}

08026520 <_strtol_l.isra.0>:
 8026520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026524:	4680      	mov	r8, r0
 8026526:	4689      	mov	r9, r1
 8026528:	4692      	mov	sl, r2
 802652a:	461f      	mov	r7, r3
 802652c:	468b      	mov	fp, r1
 802652e:	465d      	mov	r5, fp
 8026530:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026532:	f815 4b01 	ldrb.w	r4, [r5], #1
 8026536:	f000 f889 	bl	802664c <__locale_ctype_ptr_l>
 802653a:	4420      	add	r0, r4
 802653c:	7846      	ldrb	r6, [r0, #1]
 802653e:	f016 0608 	ands.w	r6, r6, #8
 8026542:	d10b      	bne.n	802655c <_strtol_l.isra.0+0x3c>
 8026544:	2c2d      	cmp	r4, #45	; 0x2d
 8026546:	d10b      	bne.n	8026560 <_strtol_l.isra.0+0x40>
 8026548:	782c      	ldrb	r4, [r5, #0]
 802654a:	2601      	movs	r6, #1
 802654c:	f10b 0502 	add.w	r5, fp, #2
 8026550:	b167      	cbz	r7, 802656c <_strtol_l.isra.0+0x4c>
 8026552:	2f10      	cmp	r7, #16
 8026554:	d114      	bne.n	8026580 <_strtol_l.isra.0+0x60>
 8026556:	2c30      	cmp	r4, #48	; 0x30
 8026558:	d00a      	beq.n	8026570 <_strtol_l.isra.0+0x50>
 802655a:	e011      	b.n	8026580 <_strtol_l.isra.0+0x60>
 802655c:	46ab      	mov	fp, r5
 802655e:	e7e6      	b.n	802652e <_strtol_l.isra.0+0xe>
 8026560:	2c2b      	cmp	r4, #43	; 0x2b
 8026562:	bf04      	itt	eq
 8026564:	782c      	ldrbeq	r4, [r5, #0]
 8026566:	f10b 0502 	addeq.w	r5, fp, #2
 802656a:	e7f1      	b.n	8026550 <_strtol_l.isra.0+0x30>
 802656c:	2c30      	cmp	r4, #48	; 0x30
 802656e:	d127      	bne.n	80265c0 <_strtol_l.isra.0+0xa0>
 8026570:	782b      	ldrb	r3, [r5, #0]
 8026572:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8026576:	2b58      	cmp	r3, #88	; 0x58
 8026578:	d14b      	bne.n	8026612 <_strtol_l.isra.0+0xf2>
 802657a:	786c      	ldrb	r4, [r5, #1]
 802657c:	2710      	movs	r7, #16
 802657e:	3502      	adds	r5, #2
 8026580:	2e00      	cmp	r6, #0
 8026582:	bf0c      	ite	eq
 8026584:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8026588:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 802658c:	2200      	movs	r2, #0
 802658e:	fbb1 fef7 	udiv	lr, r1, r7
 8026592:	4610      	mov	r0, r2
 8026594:	fb07 1c1e 	mls	ip, r7, lr, r1
 8026598:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 802659c:	2b09      	cmp	r3, #9
 802659e:	d811      	bhi.n	80265c4 <_strtol_l.isra.0+0xa4>
 80265a0:	461c      	mov	r4, r3
 80265a2:	42a7      	cmp	r7, r4
 80265a4:	dd1d      	ble.n	80265e2 <_strtol_l.isra.0+0xc2>
 80265a6:	1c53      	adds	r3, r2, #1
 80265a8:	d007      	beq.n	80265ba <_strtol_l.isra.0+0x9a>
 80265aa:	4586      	cmp	lr, r0
 80265ac:	d316      	bcc.n	80265dc <_strtol_l.isra.0+0xbc>
 80265ae:	d101      	bne.n	80265b4 <_strtol_l.isra.0+0x94>
 80265b0:	45a4      	cmp	ip, r4
 80265b2:	db13      	blt.n	80265dc <_strtol_l.isra.0+0xbc>
 80265b4:	fb00 4007 	mla	r0, r0, r7, r4
 80265b8:	2201      	movs	r2, #1
 80265ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80265be:	e7eb      	b.n	8026598 <_strtol_l.isra.0+0x78>
 80265c0:	270a      	movs	r7, #10
 80265c2:	e7dd      	b.n	8026580 <_strtol_l.isra.0+0x60>
 80265c4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80265c8:	2b19      	cmp	r3, #25
 80265ca:	d801      	bhi.n	80265d0 <_strtol_l.isra.0+0xb0>
 80265cc:	3c37      	subs	r4, #55	; 0x37
 80265ce:	e7e8      	b.n	80265a2 <_strtol_l.isra.0+0x82>
 80265d0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80265d4:	2b19      	cmp	r3, #25
 80265d6:	d804      	bhi.n	80265e2 <_strtol_l.isra.0+0xc2>
 80265d8:	3c57      	subs	r4, #87	; 0x57
 80265da:	e7e2      	b.n	80265a2 <_strtol_l.isra.0+0x82>
 80265dc:	f04f 32ff 	mov.w	r2, #4294967295
 80265e0:	e7eb      	b.n	80265ba <_strtol_l.isra.0+0x9a>
 80265e2:	1c53      	adds	r3, r2, #1
 80265e4:	d108      	bne.n	80265f8 <_strtol_l.isra.0+0xd8>
 80265e6:	2322      	movs	r3, #34	; 0x22
 80265e8:	f8c8 3000 	str.w	r3, [r8]
 80265ec:	4608      	mov	r0, r1
 80265ee:	f1ba 0f00 	cmp.w	sl, #0
 80265f2:	d107      	bne.n	8026604 <_strtol_l.isra.0+0xe4>
 80265f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265f8:	b106      	cbz	r6, 80265fc <_strtol_l.isra.0+0xdc>
 80265fa:	4240      	negs	r0, r0
 80265fc:	f1ba 0f00 	cmp.w	sl, #0
 8026600:	d00c      	beq.n	802661c <_strtol_l.isra.0+0xfc>
 8026602:	b122      	cbz	r2, 802660e <_strtol_l.isra.0+0xee>
 8026604:	3d01      	subs	r5, #1
 8026606:	f8ca 5000 	str.w	r5, [sl]
 802660a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802660e:	464d      	mov	r5, r9
 8026610:	e7f9      	b.n	8026606 <_strtol_l.isra.0+0xe6>
 8026612:	2430      	movs	r4, #48	; 0x30
 8026614:	2f00      	cmp	r7, #0
 8026616:	d1b3      	bne.n	8026580 <_strtol_l.isra.0+0x60>
 8026618:	2708      	movs	r7, #8
 802661a:	e7b1      	b.n	8026580 <_strtol_l.isra.0+0x60>
 802661c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026620 <strtol>:
 8026620:	4b08      	ldr	r3, [pc, #32]	; (8026644 <strtol+0x24>)
 8026622:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026624:	681c      	ldr	r4, [r3, #0]
 8026626:	4d08      	ldr	r5, [pc, #32]	; (8026648 <strtol+0x28>)
 8026628:	6a23      	ldr	r3, [r4, #32]
 802662a:	2b00      	cmp	r3, #0
 802662c:	bf08      	it	eq
 802662e:	462b      	moveq	r3, r5
 8026630:	9300      	str	r3, [sp, #0]
 8026632:	4613      	mov	r3, r2
 8026634:	460a      	mov	r2, r1
 8026636:	4601      	mov	r1, r0
 8026638:	4620      	mov	r0, r4
 802663a:	f7ff ff71 	bl	8026520 <_strtol_l.isra.0>
 802663e:	b003      	add	sp, #12
 8026640:	bd30      	pop	{r4, r5, pc}
 8026642:	bf00      	nop
 8026644:	20000054 	.word	0x20000054
 8026648:	200000b8 	.word	0x200000b8

0802664c <__locale_ctype_ptr_l>:
 802664c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8026650:	4770      	bx	lr

08026652 <__ascii_mbtowc>:
 8026652:	b082      	sub	sp, #8
 8026654:	b901      	cbnz	r1, 8026658 <__ascii_mbtowc+0x6>
 8026656:	a901      	add	r1, sp, #4
 8026658:	b142      	cbz	r2, 802666c <__ascii_mbtowc+0x1a>
 802665a:	b14b      	cbz	r3, 8026670 <__ascii_mbtowc+0x1e>
 802665c:	7813      	ldrb	r3, [r2, #0]
 802665e:	600b      	str	r3, [r1, #0]
 8026660:	7812      	ldrb	r2, [r2, #0]
 8026662:	1c10      	adds	r0, r2, #0
 8026664:	bf18      	it	ne
 8026666:	2001      	movne	r0, #1
 8026668:	b002      	add	sp, #8
 802666a:	4770      	bx	lr
 802666c:	4610      	mov	r0, r2
 802666e:	e7fb      	b.n	8026668 <__ascii_mbtowc+0x16>
 8026670:	f06f 0001 	mvn.w	r0, #1
 8026674:	e7f8      	b.n	8026668 <__ascii_mbtowc+0x16>

08026676 <__ascii_wctomb>:
 8026676:	b149      	cbz	r1, 802668c <__ascii_wctomb+0x16>
 8026678:	2aff      	cmp	r2, #255	; 0xff
 802667a:	bf85      	ittet	hi
 802667c:	238a      	movhi	r3, #138	; 0x8a
 802667e:	6003      	strhi	r3, [r0, #0]
 8026680:	700a      	strbls	r2, [r1, #0]
 8026682:	f04f 30ff 	movhi.w	r0, #4294967295
 8026686:	bf98      	it	ls
 8026688:	2001      	movls	r0, #1
 802668a:	4770      	bx	lr
 802668c:	4608      	mov	r0, r1
 802668e:	4770      	bx	lr

08026690 <_init>:
 8026690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026692:	bf00      	nop
 8026694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026696:	bc08      	pop	{r3}
 8026698:	469e      	mov	lr, r3
 802669a:	4770      	bx	lr

0802669c <_fini>:
 802669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802669e:	bf00      	nop
 80266a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80266a2:	bc08      	pop	{r3}
 80266a4:	469e      	mov	lr, r3
 80266a6:	4770      	bx	lr
