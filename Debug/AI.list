
AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000412c  0800ccbc  0800ccbc  0001ccbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010de8  08010de8  00020de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010df0  08010df0  00020df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010df4  08010df4  00020df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08010df8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030014  2**0
                  CONTENTS
  8 .bss          0000ba60  20000014  20000014  00030014  2**2
                  ALLOC
  9 ._user_heap_stack 0000c000  2000ba74  2000ba74  00030014  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030014  2**0
                  CONTENTS, READONLY
 11 .debug_info   00052eda  00000000  00000000  00030044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000091f4  00000000  00000000  00082f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00019a90  00000000  00000000  0008c112  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001eb8  00000000  00000000  000a5ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022b0  00000000  00000000  000a7a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00014dba  00000000  00000000  000a9d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000098ac  00000000  00000000  000beaca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000c8376  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000056f8  00000000  00000000  000c83f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cca4 	.word	0x0800cca4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800cca4 	.word	0x0800cca4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b97a 	b.w	8000500 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	468c      	mov	ip, r1
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	9e08      	ldr	r6, [sp, #32]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d151      	bne.n	80002d8 <__udivmoddi4+0xb4>
 8000234:	428a      	cmp	r2, r1
 8000236:	4617      	mov	r7, r2
 8000238:	d96d      	bls.n	8000316 <__udivmoddi4+0xf2>
 800023a:	fab2 fe82 	clz	lr, r2
 800023e:	f1be 0f00 	cmp.w	lr, #0
 8000242:	d00b      	beq.n	800025c <__udivmoddi4+0x38>
 8000244:	f1ce 0c20 	rsb	ip, lr, #32
 8000248:	fa01 f50e 	lsl.w	r5, r1, lr
 800024c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000250:	fa02 f70e 	lsl.w	r7, r2, lr
 8000254:	ea4c 0c05 	orr.w	ip, ip, r5
 8000258:	fa00 f40e 	lsl.w	r4, r0, lr
 800025c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000260:	0c25      	lsrs	r5, r4, #16
 8000262:	fbbc f8fa 	udiv	r8, ip, sl
 8000266:	fa1f f987 	uxth.w	r9, r7
 800026a:	fb0a cc18 	mls	ip, sl, r8, ip
 800026e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000272:	fb08 f309 	mul.w	r3, r8, r9
 8000276:	42ab      	cmp	r3, r5
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x6c>
 800027a:	19ed      	adds	r5, r5, r7
 800027c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000280:	f080 8123 	bcs.w	80004ca <__udivmoddi4+0x2a6>
 8000284:	42ab      	cmp	r3, r5
 8000286:	f240 8120 	bls.w	80004ca <__udivmoddi4+0x2a6>
 800028a:	f1a8 0802 	sub.w	r8, r8, #2
 800028e:	443d      	add	r5, r7
 8000290:	1aed      	subs	r5, r5, r3
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb5 f0fa 	udiv	r0, r5, sl
 8000298:	fb0a 5510 	mls	r5, sl, r0, r5
 800029c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a0:	fb00 f909 	mul.w	r9, r0, r9
 80002a4:	45a1      	cmp	r9, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x98>
 80002a8:	19e4      	adds	r4, r4, r7
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 810a 	bcs.w	80004c6 <__udivmoddi4+0x2a2>
 80002b2:	45a1      	cmp	r9, r4
 80002b4:	f240 8107 	bls.w	80004c6 <__udivmoddi4+0x2a2>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	eba4 0409 	sub.w	r4, r4, r9
 80002c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c4:	2100      	movs	r1, #0
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d061      	beq.n	800038e <__udivmoddi4+0x16a>
 80002ca:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ce:	2300      	movs	r3, #0
 80002d0:	6034      	str	r4, [r6, #0]
 80002d2:	6073      	str	r3, [r6, #4]
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xc8>
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d054      	beq.n	800038a <__udivmoddi4+0x166>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	f040 808e 	bne.w	8000412 <__udivmoddi4+0x1ee>
 80002f6:	42ab      	cmp	r3, r5
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xdc>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2d0>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb65 0503 	sbc.w	r5, r5, r3
 8000306:	2001      	movs	r0, #1
 8000308:	46ac      	mov	ip, r5
 800030a:	2e00      	cmp	r6, #0
 800030c:	d03f      	beq.n	800038e <__udivmoddi4+0x16a>
 800030e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b912      	cbnz	r2, 800031e <__udivmoddi4+0xfa>
 8000318:	2701      	movs	r7, #1
 800031a:	fbb7 f7f2 	udiv	r7, r7, r2
 800031e:	fab7 fe87 	clz	lr, r7
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d134      	bne.n	8000392 <__udivmoddi4+0x16e>
 8000328:	1beb      	subs	r3, r5, r7
 800032a:	0c3a      	lsrs	r2, r7, #16
 800032c:	fa1f fc87 	uxth.w	ip, r7
 8000330:	2101      	movs	r1, #1
 8000332:	fbb3 f8f2 	udiv	r8, r3, r2
 8000336:	0c25      	lsrs	r5, r4, #16
 8000338:	fb02 3318 	mls	r3, r2, r8, r3
 800033c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000340:	fb0c f308 	mul.w	r3, ip, r8
 8000344:	42ab      	cmp	r3, r5
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x134>
 8000348:	19ed      	adds	r5, r5, r7
 800034a:	f108 30ff 	add.w	r0, r8, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x132>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f200 80d1 	bhi.w	80004f8 <__udivmoddi4+0x2d4>
 8000356:	4680      	mov	r8, r0
 8000358:	1aed      	subs	r5, r5, r3
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000360:	fb02 5510 	mls	r5, r2, r0, r5
 8000364:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000368:	fb0c fc00 	mul.w	ip, ip, r0
 800036c:	45a4      	cmp	ip, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x15c>
 8000370:	19e4      	adds	r4, r4, r7
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x15a>
 8000378:	45a4      	cmp	ip, r4
 800037a:	f200 80b8 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000388:	e79d      	b.n	80002c6 <__udivmoddi4+0xa2>
 800038a:	4631      	mov	r1, r6
 800038c:	4630      	mov	r0, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	f1ce 0420 	rsb	r4, lr, #32
 8000396:	fa05 f30e 	lsl.w	r3, r5, lr
 800039a:	fa07 f70e 	lsl.w	r7, r7, lr
 800039e:	fa20 f804 	lsr.w	r8, r0, r4
 80003a2:	0c3a      	lsrs	r2, r7, #16
 80003a4:	fa25 f404 	lsr.w	r4, r5, r4
 80003a8:	ea48 0803 	orr.w	r8, r8, r3
 80003ac:	fbb4 f1f2 	udiv	r1, r4, r2
 80003b0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b4:	fb02 4411 	mls	r4, r2, r1, r4
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003c0:	fb01 f30c 	mul.w	r3, r1, ip
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1bc>
 80003cc:	19ed      	adds	r5, r5, r7
 80003ce:	f101 30ff 	add.w	r0, r1, #4294967295
 80003d2:	f080 808a 	bcs.w	80004ea <__udivmoddi4+0x2c6>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	f240 8087 	bls.w	80004ea <__udivmoddi4+0x2c6>
 80003dc:	3902      	subs	r1, #2
 80003de:	443d      	add	r5, r7
 80003e0:	1aeb      	subs	r3, r5, r3
 80003e2:	fa1f f588 	uxth.w	r5, r8
 80003e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ea:	fb02 3310 	mls	r3, r2, r0, r3
 80003ee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003f2:	fb00 f30c 	mul.w	r3, r0, ip
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1e6>
 80003fa:	19ed      	adds	r5, r5, r7
 80003fc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000400:	d26f      	bcs.n	80004e2 <__udivmoddi4+0x2be>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d96d      	bls.n	80004e2 <__udivmoddi4+0x2be>
 8000406:	3802      	subs	r0, #2
 8000408:	443d      	add	r5, r7
 800040a:	1aeb      	subs	r3, r5, r3
 800040c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000410:	e78f      	b.n	8000332 <__udivmoddi4+0x10e>
 8000412:	f1c1 0720 	rsb	r7, r1, #32
 8000416:	fa22 f807 	lsr.w	r8, r2, r7
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 f401 	lsl.w	r4, r5, r1
 8000420:	ea48 0303 	orr.w	r3, r8, r3
 8000424:	fa20 fe07 	lsr.w	lr, r0, r7
 8000428:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800042c:	40fd      	lsrs	r5, r7
 800042e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000432:	fbb5 f9fc 	udiv	r9, r5, ip
 8000436:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800043a:	fb0c 5519 	mls	r5, ip, r9, r5
 800043e:	fa1f f883 	uxth.w	r8, r3
 8000442:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000446:	fb09 f408 	mul.w	r4, r9, r8
 800044a:	42ac      	cmp	r4, r5
 800044c:	fa02 f201 	lsl.w	r2, r2, r1
 8000450:	fa00 fa01 	lsl.w	sl, r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x244>
 8000456:	18ed      	adds	r5, r5, r3
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d243      	bcs.n	80004e6 <__udivmoddi4+0x2c2>
 800045e:	42ac      	cmp	r4, r5
 8000460:	d941      	bls.n	80004e6 <__udivmoddi4+0x2c2>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	441d      	add	r5, r3
 8000468:	1b2d      	subs	r5, r5, r4
 800046a:	fa1f fe8e 	uxth.w	lr, lr
 800046e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000472:	fb0c 5510 	mls	r5, ip, r0, r5
 8000476:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45a0      	cmp	r8, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x26e>
 8000482:	18e4      	adds	r4, r4, r3
 8000484:	f100 35ff 	add.w	r5, r0, #4294967295
 8000488:	d229      	bcs.n	80004de <__udivmoddi4+0x2ba>
 800048a:	45a0      	cmp	r8, r4
 800048c:	d927      	bls.n	80004de <__udivmoddi4+0x2ba>
 800048e:	3802      	subs	r0, #2
 8000490:	441c      	add	r4, r3
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba4 0408 	sub.w	r4, r4, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454c      	cmp	r4, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	464d      	mov	r5, r9
 80004a4:	d315      	bcc.n	80004d2 <__udivmoddi4+0x2ae>
 80004a6:	d012      	beq.n	80004ce <__udivmoddi4+0x2aa>
 80004a8:	b156      	cbz	r6, 80004c0 <__udivmoddi4+0x29c>
 80004aa:	ebba 030e 	subs.w	r3, sl, lr
 80004ae:	eb64 0405 	sbc.w	r4, r4, r5
 80004b2:	fa04 f707 	lsl.w	r7, r4, r7
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431f      	orrs	r7, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	6037      	str	r7, [r6, #0]
 80004be:	6074      	str	r4, [r6, #4]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	4618      	mov	r0, r3
 80004c8:	e6f8      	b.n	80002bc <__udivmoddi4+0x98>
 80004ca:	4690      	mov	r8, r2
 80004cc:	e6e0      	b.n	8000290 <__udivmoddi4+0x6c>
 80004ce:	45c2      	cmp	sl, r8
 80004d0:	d2ea      	bcs.n	80004a8 <__udivmoddi4+0x284>
 80004d2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d6:	eb69 0503 	sbc.w	r5, r9, r3
 80004da:	3801      	subs	r0, #1
 80004dc:	e7e4      	b.n	80004a8 <__udivmoddi4+0x284>
 80004de:	4628      	mov	r0, r5
 80004e0:	e7d7      	b.n	8000492 <__udivmoddi4+0x26e>
 80004e2:	4640      	mov	r0, r8
 80004e4:	e791      	b.n	800040a <__udivmoddi4+0x1e6>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e7be      	b.n	8000468 <__udivmoddi4+0x244>
 80004ea:	4601      	mov	r1, r0
 80004ec:	e778      	b.n	80003e0 <__udivmoddi4+0x1bc>
 80004ee:	3802      	subs	r0, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	e745      	b.n	8000380 <__udivmoddi4+0x15c>
 80004f4:	4608      	mov	r0, r1
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xe6>
 80004f8:	f1a8 0802 	sub.w	r8, r8, #2
 80004fc:	443d      	add	r5, r7
 80004fe:	e72b      	b.n	8000358 <__udivmoddi4+0x134>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <HAL_Init+0x30>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000516:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000520:	2003      	movs	r0, #3
 8000522:	f000 f82f 	bl	8000584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000526:	2000      	movs	r0, #0
 8000528:	f00b ffea 	bl	800c500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800052c:	f00b ffc6 	bl	800c4bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000530:	2000      	movs	r0, #0
 8000532:	bd08      	pop	{r3, pc}
 8000534:	40023c00 	.word	0x40023c00

08000538 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000538:	4a03      	ldr	r2, [pc, #12]	; (8000548 <HAL_IncTick+0x10>)
 800053a:	6811      	ldr	r1, [r2, #0]
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <HAL_IncTick+0x14>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	440b      	add	r3, r1
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20004228 	.word	0x20004228
 800054c:	20000000 	.word	0x20000000

08000550 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <HAL_GetTick+0x8>)
 8000552:	6818      	ldr	r0, [r3, #0]
}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20004228 	.word	0x20004228

0800055c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800055c:	b538      	push	{r3, r4, r5, lr}
 800055e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000560:	f7ff fff6 	bl	8000550 <HAL_GetTick>
 8000564:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000566:	f1b4 3fff 	cmp.w	r4, #4294967295
 800056a:	d002      	beq.n	8000572 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <HAL_Delay+0x24>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000572:	f7ff ffed 	bl	8000550 <HAL_GetTick>
 8000576:	1b40      	subs	r0, r0, r5
 8000578:	4284      	cmp	r4, r0
 800057a:	d8fa      	bhi.n	8000572 <HAL_Delay+0x16>
  {
  }
}
 800057c:	bd38      	pop	{r3, r4, r5, pc}
 800057e:	bf00      	nop
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000586:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000588:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800058c:	041b      	lsls	r3, r3, #16
 800058e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000590:	0200      	lsls	r0, r0, #8
 8000592:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000596:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000598:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800059c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005a0:	60d0      	str	r0, [r2, #12]
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <HAL_NVIC_SetPriority+0x5c>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b2:	f1c3 0407 	rsb	r4, r3, #7
 80005b6:	2c04      	cmp	r4, #4
 80005b8:	bf28      	it	cs
 80005ba:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005bc:	1d1d      	adds	r5, r3, #4
 80005be:	2d06      	cmp	r5, #6
 80005c0:	d917      	bls.n	80005f2 <HAL_NVIC_SetPriority+0x4a>
 80005c2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	2501      	movs	r5, #1
 80005c6:	fa05 f404 	lsl.w	r4, r5, r4
 80005ca:	3c01      	subs	r4, #1
 80005cc:	4021      	ands	r1, r4
 80005ce:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d0:	fa05 f303 	lsl.w	r3, r5, r3
 80005d4:	3b01      	subs	r3, #1
 80005d6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80005da:	2800      	cmp	r0, #0
 80005dc:	db0b      	blt.n	80005f6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	0109      	lsls	r1, r1, #4
 80005e0:	b2c9      	uxtb	r1, r1
 80005e2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005e6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005ea:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005ee:	bc30      	pop	{r4, r5}
 80005f0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f2:	2300      	movs	r3, #0
 80005f4:	e7e6      	b.n	80005c4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f6:	f000 000f 	and.w	r0, r0, #15
 80005fa:	0109      	lsls	r1, r1, #4
 80005fc:	b2c9      	uxtb	r1, r1
 80005fe:	4b02      	ldr	r3, [pc, #8]	; (8000608 <HAL_NVIC_SetPriority+0x60>)
 8000600:	5419      	strb	r1, [r3, r0]
 8000602:	e7f4      	b.n	80005ee <HAL_NVIC_SetPriority+0x46>
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	e000ed14 	.word	0xe000ed14

0800060c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800060c:	0942      	lsrs	r2, r0, #5
 800060e:	f000 001f 	and.w	r0, r0, #31
 8000612:	2301      	movs	r3, #1
 8000614:	fa03 f000 	lsl.w	r0, r3, r0
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <HAL_NVIC_EnableIRQ+0x14>)
 800061a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800061e:	4770      	bx	lr
 8000620:	e000e100 	.word	0xe000e100

08000624 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000624:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b02      	cmp	r3, #2
 800062c:	d003      	beq.n	8000636 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000632:	2001      	movs	r0, #1
 8000634:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000636:	2305      	movs	r3, #5
 8000638:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800063c:	6802      	ldr	r2, [r0, #0]
 800063e:	6813      	ldr	r3, [r2, #0]
 8000640:	f023 0301 	bic.w	r3, r3, #1
 8000644:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000646:	2000      	movs	r0, #0
}
 8000648:	4770      	bx	lr
	...

0800064c <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800064c:	7950      	ldrb	r0, [r2, #5]
 800064e:	7913      	ldrb	r3, [r2, #4]
 8000650:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000654:	4807      	ldr	r0, [pc, #28]	; (8000674 <ETH_MACAddressConfig+0x28>)
 8000656:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000658:	78d0      	ldrb	r0, [r2, #3]
 800065a:	7893      	ldrb	r3, [r2, #2]
 800065c:	041b      	lsls	r3, r3, #16
 800065e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8000662:	7850      	ldrb	r0, [r2, #1]
 8000664:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000668:	7812      	ldrb	r2, [r2, #0]
 800066a:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800066c:	4a02      	ldr	r2, [pc, #8]	; (8000678 <ETH_MACAddressConfig+0x2c>)
 800066e:	508b      	str	r3, [r1, r2]
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40028040 	.word	0x40028040
 8000678:	40028044 	.word	0x40028044

0800067c <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800067c:	6801      	ldr	r1, [r0, #0]
 800067e:	f241 0218 	movw	r2, #4120	; 0x1018
 8000682:	588b      	ldr	r3, [r1, r2]
 8000684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000688:	508b      	str	r3, [r1, r2]
 800068a:	4770      	bx	lr

0800068c <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800068c:	6801      	ldr	r1, [r0, #0]
 800068e:	f241 0218 	movw	r2, #4120	; 0x1018
 8000692:	588b      	ldr	r3, [r1, r2]
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	508b      	str	r3, [r1, r2]
 800069a:	4770      	bx	lr

0800069c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800069c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <ETH_Delay+0x24>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <ETH_Delay+0x28>)
 80006a4:	fba2 2303 	umull	r2, r3, r2, r3
 80006a8:	0a5b      	lsrs	r3, r3, #9
 80006aa:	fb00 f003 	mul.w	r0, r0, r3
 80006ae:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80006b0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80006b2:	9b01      	ldr	r3, [sp, #4]
 80006b4:	1e5a      	subs	r2, r3, #1
 80006b6:	9201      	str	r2, [sp, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f9      	bne.n	80006b0 <ETH_Delay+0x14>
}
 80006bc:	b002      	add	sp, #8
 80006be:	4770      	bx	lr
 80006c0:	20000010 	.word	0x20000010
 80006c4:	10624dd3 	.word	0x10624dd3

080006c8 <ETH_MACTransmissionEnable>:
{ 
 80006c8:	b510      	push	{r4, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80006ce:	2300      	movs	r3, #0
 80006d0:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80006d2:	6802      	ldr	r2, [r0, #0]
 80006d4:	6813      	ldr	r3, [r2, #0]
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80006dc:	6803      	ldr	r3, [r0, #0]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f7ff ffda 	bl	800069c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80006e8:	6823      	ldr	r3, [r4, #0]
 80006ea:	9a01      	ldr	r2, [sp, #4]
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	b002      	add	sp, #8
 80006f0:	bd10      	pop	{r4, pc}

080006f2 <ETH_MACReceptionEnable>:
{ 
 80006f2:	b510      	push	{r4, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80006f8:	2300      	movs	r3, #0
 80006fa:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80006fc:	6802      	ldr	r2, [r0, #0]
 80006fe:	6813      	ldr	r3, [r2, #0]
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000706:	6803      	ldr	r3, [r0, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff ffc5 	bl	800069c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000712:	6823      	ldr	r3, [r4, #0]
 8000714:	9a01      	ldr	r2, [sp, #4]
 8000716:	601a      	str	r2, [r3, #0]
}
 8000718:	b002      	add	sp, #8
 800071a:	bd10      	pop	{r4, pc}

0800071c <ETH_FlushTransmitFIFO>:
{
 800071c:	b530      	push	{r4, r5, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	4605      	mov	r5, r0
  __IO uint32_t tmpreg1 = 0U;
 8000722:	2300      	movs	r3, #0
 8000724:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000726:	6802      	ldr	r2, [r0, #0]
 8000728:	f241 0418 	movw	r4, #4120	; 0x1018
 800072c:	5913      	ldr	r3, [r2, r4]
 800072e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000732:	5113      	str	r3, [r2, r4]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000734:	6803      	ldr	r3, [r0, #0]
 8000736:	591b      	ldr	r3, [r3, r4]
 8000738:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800073a:	2001      	movs	r0, #1
 800073c:	f7ff ffae 	bl	800069c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000740:	682b      	ldr	r3, [r5, #0]
 8000742:	9a01      	ldr	r2, [sp, #4]
 8000744:	511a      	str	r2, [r3, r4]
}
 8000746:	b003      	add	sp, #12
 8000748:	bd30      	pop	{r4, r5, pc}
	...

0800074c <ETH_MACDMAConfig>:
{
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	b09e      	sub	sp, #120	; 0x78
 8000750:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000752:	b129      	cbz	r1, 8000760 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000758:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 800075a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800075e:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000760:	69e3      	ldr	r3, [r4, #28]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d16a      	bne.n	800083c <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076a:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 800076c:	6821      	ldr	r1, [r4, #0]
 800076e:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000770:	4a39      	ldr	r2, [pc, #228]	; (8000858 <ETH_MACDMAConfig+0x10c>)
 8000772:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8000774:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8000776:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8000778:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 800077a:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 800077c:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 800077e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000782:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000784:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000786:	6823      	ldr	r3, [r4, #0]
 8000788:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff fee6 	bl	800055c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000790:	6823      	ldr	r3, [r4, #0]
 8000792:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	2240      	movs	r2, #64	; 0x40
 8000798:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 800079a:	6823      	ldr	r3, [r4, #0]
 800079c:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fedc 	bl	800055c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80007a4:	6823      	ldr	r3, [r4, #0]
 80007a6:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80007a8:	6823      	ldr	r3, [r4, #0]
 80007aa:	2500      	movs	r5, #0
 80007ac:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80007ae:	6823      	ldr	r3, [r4, #0]
 80007b0:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 80007b2:	6822      	ldr	r2, [r4, #0]
 80007b4:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80007b6:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 80007ba:	041b      	lsls	r3, r3, #16
 80007bc:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80007be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80007c2:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 80007c4:	6823      	ldr	r3, [r4, #0]
 80007c6:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fec7 	bl	800055c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007d2:	6823      	ldr	r3, [r4, #0]
 80007d4:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff febe 	bl	800055c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007e4:	6822      	ldr	r2, [r4, #0]
 80007e6:	f241 0518 	movw	r5, #4120	; 0x1018
 80007ea:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <ETH_MACDMAConfig+0x110>)
 80007ee:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007f0:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007f4:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80007f8:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff feac 	bl	800055c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080e:	4a14      	ldr	r2, [pc, #80]	; (8000860 <ETH_MACDMAConfig+0x114>)
 8000810:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8000812:	6823      	ldr	r3, [r4, #0]
 8000814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000818:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff fe9e 	bl	800055c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000826:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000828:	69a3      	ldr	r3, [r4, #24]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d009      	beq.n	8000842 <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800082e:	6962      	ldr	r2, [r4, #20]
 8000830:	2100      	movs	r1, #0
 8000832:	4620      	mov	r0, r4
 8000834:	f7ff ff0a 	bl	800064c <ETH_MACAddressConfig>
}
 8000838:	b01e      	add	sp, #120	; 0x78
 800083a:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	9307      	str	r3, [sp, #28]
 8000840:	e794      	b.n	800076c <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000842:	6821      	ldr	r1, [r4, #0]
 8000844:	f241 021c 	movw	r2, #4124	; 0x101c
 8000848:	588b      	ldr	r3, [r1, r2]
 800084a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800084e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000852:	508b      	str	r3, [r1, r2]
 8000854:	e7eb      	b.n	800082e <ETH_MACDMAConfig+0xe2>
 8000856:	bf00      	nop
 8000858:	ff20810f 	.word	0xff20810f
 800085c:	f8de3f23 	.word	0xf8de3f23
 8000860:	02c12080 	.word	0x02c12080

08000864 <HAL_ETH_DMATxDescListInit>:
{
 8000864:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8000866:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800086a:	2c01      	cmp	r4, #1
 800086c:	d031      	beq.n	80008d2 <HAL_ETH_DMATxDescListInit+0x6e>
 800086e:	2401      	movs	r4, #1
 8000870:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000874:	2402      	movs	r4, #2
 8000876:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 800087a:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 800087c:	2400      	movs	r4, #0
 800087e:	e001      	b.n	8000884 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000880:	60f9      	str	r1, [r7, #12]
  for(i=0U; i < TxBuffCount; i++)
 8000882:	3401      	adds	r4, #1
 8000884:	429c      	cmp	r4, r3
 8000886:	d217      	bcs.n	80008b8 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8000888:	0165      	lsls	r5, r4, #5
 800088a:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800088c:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8000890:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000892:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8000896:	fb06 2604 	mla	r6, r6, r4, r2
 800089a:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800089c:	69c6      	ldr	r6, [r0, #28]
 800089e:	b91e      	cbnz	r6, 80008a8 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80008a0:	594e      	ldr	r6, [r1, r5]
 80008a2:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80008a6:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1U))
 80008a8:	1e5d      	subs	r5, r3, #1
 80008aa:	42ac      	cmp	r4, r5
 80008ac:	d2e8      	bcs.n	8000880 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80008ae:	1c65      	adds	r5, r4, #1
 80008b0:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 80008b4:	60fd      	str	r5, [r7, #12]
 80008b6:	e7e4      	b.n	8000882 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80008b8:	6802      	ldr	r2, [r0, #0]
 80008ba:	f241 0310 	movw	r3, #4112	; 0x1010
 80008be:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008c0:	2301      	movs	r3, #1
 80008c2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008c6:	2300      	movs	r3, #0
 80008c8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008cc:	4618      	mov	r0, r3
}
 80008ce:	bcf0      	pop	{r4, r5, r6, r7}
 80008d0:	4770      	bx	lr
  __HAL_LOCK(heth);
 80008d2:	2002      	movs	r0, #2
 80008d4:	e7fb      	b.n	80008ce <HAL_ETH_DMATxDescListInit+0x6a>

080008d6 <HAL_ETH_DMARxDescListInit>:
{
 80008d6:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 80008d8:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008dc:	2c01      	cmp	r4, #1
 80008de:	d02e      	beq.n	800093e <HAL_ETH_DMARxDescListInit+0x68>
 80008e0:	2401      	movs	r4, #1
 80008e2:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80008e6:	2402      	movs	r4, #2
 80008e8:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80008ec:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 80008ee:	2400      	movs	r4, #0
 80008f0:	e001      	b.n	80008f6 <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80008f2:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 80008f4:	3401      	adds	r4, #1
 80008f6:	429c      	cmp	r4, r3
 80008f8:	d214      	bcs.n	8000924 <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 80008fa:	0166      	lsls	r6, r4, #5
 80008fc:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008fe:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8000902:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000904:	f244 56f4 	movw	r6, #17908	; 0x45f4
 8000908:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800090a:	f240 56f4 	movw	r6, #1524	; 0x5f4
 800090e:	fb06 2604 	mla	r6, r6, r4, r2
 8000912:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 8000914:	1e5e      	subs	r6, r3, #1
 8000916:	42b4      	cmp	r4, r6
 8000918:	d2eb      	bcs.n	80008f2 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800091a:	1c66      	adds	r6, r4, #1
 800091c:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8000920:	60ee      	str	r6, [r5, #12]
 8000922:	e7e7      	b.n	80008f4 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000924:	6802      	ldr	r2, [r0, #0]
 8000926:	f241 030c 	movw	r3, #4108	; 0x100c
 800092a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800092c:	2301      	movs	r3, #1
 800092e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000932:	2300      	movs	r3, #0
 8000934:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000938:	4618      	mov	r0, r3
}
 800093a:	bcf0      	pop	{r4, r5, r6, r7}
 800093c:	4770      	bx	lr
  __HAL_LOCK(heth);
 800093e:	2002      	movs	r0, #2
 8000940:	e7fb      	b.n	800093a <HAL_ETH_DMARxDescListInit+0x64>
	...

08000944 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000944:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000948:	2b01      	cmp	r3, #1
 800094a:	f000 8087 	beq.w	8000a5c <HAL_ETH_TransmitFrame+0x118>
 800094e:	2301      	movs	r3, #1
 8000950:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000954:	2302      	movs	r3, #2
 8000956:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 800095a:	b199      	cbz	r1, 8000984 <HAL_ETH_TransmitFrame+0x40>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800095c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	2a00      	cmp	r2, #0
 8000962:	db17      	blt.n	8000994 <HAL_ETH_TransmitFrame+0x50>
{
 8000964:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000966:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800096a:	4291      	cmp	r1, r2
 800096c:	d91a      	bls.n	80009a4 <HAL_ETH_TransmitFrame+0x60>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800096e:	4c3c      	ldr	r4, [pc, #240]	; (8000a60 <HAL_ETH_TransmitFrame+0x11c>)
 8000970:	fba4 2401 	umull	r2, r4, r4, r1
 8000974:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000976:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800097a:	fb02 1214 	mls	r2, r2, r4, r1
 800097e:	b192      	cbz	r2, 80009a6 <HAL_ETH_TransmitFrame+0x62>
      bufcount++;
 8000980:	3401      	adds	r4, #1
 8000982:	e010      	b.n	80009a6 <HAL_ETH_TransmitFrame+0x62>
    heth->State = HAL_ETH_STATE_READY;
 8000984:	2301      	movs	r3, #1
 8000986:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800098a:	2200      	movs	r2, #0
 800098c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 8000990:	4618      	mov	r0, r3
 8000992:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000994:	2312      	movs	r3, #18
 8000996:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800099a:	2300      	movs	r3, #0
 800099c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 80009a0:	2001      	movs	r0, #1
 80009a2:	4770      	bx	lr
    bufcount = 1U;
 80009a4:	2401      	movs	r4, #1
  if (bufcount == 1U)
 80009a6:	2c01      	cmp	r4, #1
 80009a8:	d001      	beq.n	80009ae <HAL_ETH_TransmitFrame+0x6a>
 80009aa:	2300      	movs	r3, #0
 80009ac:	e037      	b.n	8000a1e <HAL_ETH_TransmitFrame+0xda>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80009b4:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009b8:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80009bc:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80009c0:	6813      	ldr	r3, [r2, #0]
 80009c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c6:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80009ce:	6803      	ldr	r3, [r0, #0]
 80009d0:	f241 0214 	movw	r2, #4116	; 0x1014
 80009d4:	589a      	ldr	r2, [r3, r2]
 80009d6:	f012 0f04 	tst.w	r2, #4
 80009da:	d008      	beq.n	80009ee <HAL_ETH_TransmitFrame+0xaa>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80009dc:	2104      	movs	r1, #4
 80009de:	f241 0214 	movw	r2, #4116	; 0x1014
 80009e2:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80009e4:	6802      	ldr	r2, [r0, #0]
 80009e6:	2100      	movs	r1, #0
 80009e8:	f241 0304 	movw	r3, #4100	; 0x1004
 80009ec:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 80009ee:	2301      	movs	r3, #1
 80009f0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009f4:	2300      	movs	r3, #0
 80009f6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80009fa:	4618      	mov	r0, r3
}
 80009fc:	bc30      	pop	{r4, r5}
 80009fe:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000a00:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a02:	682a      	ldr	r2, [r5, #0]
 8000a04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a08:	602a      	str	r2, [r5, #0]
 8000a0a:	e011      	b.n	8000a30 <HAL_ETH_TransmitFrame+0xec>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a0c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a0e:	682a      	ldr	r2, [r5, #0]
 8000a10:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a14:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a16:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a18:	68d2      	ldr	r2, [r2, #12]
 8000a1a:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	429c      	cmp	r4, r3
 8000a20:	d9d5      	bls.n	80009ce <HAL_ETH_TransmitFrame+0x8a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000a22:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a24:	682a      	ldr	r2, [r5, #0]
 8000a26:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a2a:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d0e7      	beq.n	8000a00 <HAL_ETH_TransmitFrame+0xbc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a30:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a32:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8000a36:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 8000a38:	1e62      	subs	r2, r4, #1
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d1e6      	bne.n	8000a0c <HAL_ETH_TransmitFrame+0xc8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a3e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a40:	682a      	ldr	r2, [r5, #0]
 8000a42:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a46:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <HAL_ETH_TransmitFrame+0x120>)
 8000a4a:	fb02 1204 	mla	r2, r2, r4, r1
 8000a4e:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a52:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a54:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000a58:	606a      	str	r2, [r5, #4]
 8000a5a:	e7d7      	b.n	8000a0c <HAL_ETH_TransmitFrame+0xc8>
  __HAL_LOCK(heth);
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	4770      	bx	lr
 8000a60:	ac02b00b 	.word	0xac02b00b
 8000a64:	fffffa0c 	.word	0xfffffa0c

08000a68 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000a68:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d045      	beq.n	8000afc <HAL_ETH_GetReceivedFrame_IT+0x94>
 8000a70:	2301      	movs	r3, #1
 8000a72:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a76:	2302      	movs	r3, #2
 8000a78:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  uint32_t descriptorscancounter = 0U;
 8000a7c:	2100      	movs	r1, #0
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a7e:	e00a      	b.n	8000a96 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a80:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000a82:	2201      	movs	r2, #1
 8000a84:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	6283      	str	r3, [r0, #40]	; 0x28
 8000a8a:	e004      	b.n	8000a96 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      (heth->RxFrameInfos.SegCount)++;
 8000a8c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a8e:	3201      	adds	r2, #1
 8000a90:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	db26      	blt.n	8000aec <HAL_ETH_GetReceivedFrame_IT+0x84>
 8000a9e:	2903      	cmp	r1, #3
 8000aa0:	d824      	bhi.n	8000aec <HAL_ETH_GetReceivedFrame_IT+0x84>
    descriptorscancounter++;
 8000aa2:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000aaa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000aae:	d0e7      	beq.n	8000a80 <HAL_ETH_GetReceivedFrame_IT+0x18>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000ab6:	d0e9      	beq.n	8000a8c <HAL_ETH_GetReceivedFrame_IT+0x24>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000ab8:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8000aba:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000abc:	3201      	adds	r2, #1
 8000abe:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000ac0:	2a01      	cmp	r2, #1
 8000ac2:	d011      	beq.n	8000ae8 <HAL_ETH_GetReceivedFrame_IT+0x80>
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8000aca:	3a04      	subs	r2, #4
 8000acc:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000ace:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000ad0:	6892      	ldr	r2, [r2, #8]
 8000ad2:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	4770      	bx	lr
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000ae8:	6303      	str	r3, [r0, #48]	; 0x30
 8000aea:	e7eb      	b.n	8000ac4 <HAL_ETH_GetReceivedFrame_IT+0x5c>
  heth->State = HAL_ETH_STATE_READY;
 8000aec:	2301      	movs	r3, #1
 8000aee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000af8:	4618      	mov	r0, r3
 8000afa:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000afc:	2002      	movs	r0, #2
}
 8000afe:	4770      	bx	lr

08000b00 <HAL_ETH_TxCpltCallback>:
{
 8000b00:	4770      	bx	lr

08000b02 <HAL_ETH_ErrorCallback>:
{
 8000b02:	4770      	bx	lr

08000b04 <HAL_ETH_IRQHandler>:
{
 8000b04:	b510      	push	{r4, lr}
 8000b06:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000b08:	6803      	ldr	r3, [r0, #0]
 8000b0a:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b0e:	589a      	ldr	r2, [r3, r2]
 8000b10:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000b14:	d111      	bne.n	8000b3a <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000b16:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b1a:	589b      	ldr	r3, [r3, r2]
 8000b1c:	f013 0f01 	tst.w	r3, #1
 8000b20:	d119      	bne.n	8000b56 <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000b22:	6822      	ldr	r2, [r4, #0]
 8000b24:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b28:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000b2c:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000b2e:	6822      	ldr	r2, [r4, #0]
 8000b30:	58d3      	ldr	r3, [r2, r3]
 8000b32:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000b36:	d11b      	bne.n	8000b70 <HAL_ETH_IRQHandler+0x6c>
 8000b38:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8000b3a:	f00b fad9 	bl	800c0f0 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000b3e:	6822      	ldr	r2, [r4, #0]
 8000b40:	2140      	movs	r1, #64	; 0x40
 8000b42:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b46:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b54:	e7e5      	b.n	8000b22 <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8000b56:	f7ff ffd3 	bl	8000b00 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000b5a:	6821      	ldr	r1, [r4, #0]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b62:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8000b64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b6e:	e7d8      	b.n	8000b22 <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8000b70:	4620      	mov	r0, r4
 8000b72:	f7ff ffc6 	bl	8000b02 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000b76:	6822      	ldr	r2, [r4, #0]
 8000b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7c:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b80:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000b8e:	e7d3      	b.n	8000b38 <HAL_ETH_IRQHandler+0x34>

08000b90 <HAL_ETH_ReadPHYRegister>:
{
 8000b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b92:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b82      	cmp	r3, #130	; 0x82
 8000b9a:	d101      	bne.n	8000ba0 <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8000b9c:	2002      	movs	r0, #2
}
 8000b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba0:	4616      	mov	r6, r2
 8000ba2:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000ba4:	2382      	movs	r3, #130	; 0x82
 8000ba6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000baa:	6802      	ldr	r2, [r0, #0]
 8000bac:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000bae:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000bb2:	8a03      	ldrh	r3, [r0, #16]
 8000bb4:	02db      	lsls	r3, r3, #11
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000bba:	0189      	lsls	r1, r1, #6
 8000bbc:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000bc0:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000bc2:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000bc6:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000bc8:	f7ff fcc2 	bl	8000550 <HAL_GetTick>
 8000bcc:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bce:	f014 0f01 	tst.w	r4, #1
 8000bd2:	d010      	beq.n	8000bf6 <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000bd4:	f7ff fcbc 	bl	8000550 <HAL_GetTick>
 8000bd8:	1bc0      	subs	r0, r0, r7
 8000bda:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bde:	d202      	bcs.n	8000be6 <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000be0:	682b      	ldr	r3, [r5, #0]
 8000be2:	691c      	ldr	r4, [r3, #16]
 8000be4:	e7f3      	b.n	8000bce <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bec:	2300      	movs	r3, #0
 8000bee:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000bf6:	682b      	ldr	r3, [r5, #0]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8000c04:	2000      	movs	r0, #0
 8000c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c08 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000c08:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b42      	cmp	r3, #66	; 0x42
 8000c10:	d101      	bne.n	8000c16 <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8000c12:	2002      	movs	r0, #2
 8000c14:	4770      	bx	lr
{
 8000c16:	b570      	push	{r4, r5, r6, lr}
 8000c18:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c1a:	2342      	movs	r3, #66	; 0x42
 8000c1c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000c20:	6800      	ldr	r0, [r0, #0]
 8000c22:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000c24:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c28:	8a2b      	ldrh	r3, [r5, #16]
 8000c2a:	02db      	lsls	r3, r3, #11
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000c30:	0189      	lsls	r1, r1, #6
 8000c32:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000c36:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000c38:	f044 0403 	orr.w	r4, r4, #3
 8000c3c:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000c3e:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000c40:	682b      	ldr	r3, [r5, #0]
 8000c42:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000c44:	f7ff fc84 	bl	8000550 <HAL_GetTick>
 8000c48:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c4a:	f014 0f01 	tst.w	r4, #1
 8000c4e:	d010      	beq.n	8000c72 <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000c50:	f7ff fc7e 	bl	8000550 <HAL_GetTick>
 8000c54:	1b80      	subs	r0, r0, r6
 8000c56:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c5a:	d202      	bcs.n	8000c62 <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000c5c:	682b      	ldr	r3, [r5, #0]
 8000c5e:	691c      	ldr	r4, [r3, #16]
 8000c60:	e7f3      	b.n	8000c4a <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000c6e:	2003      	movs	r0, #3
 8000c70:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8000c78:	2000      	movs	r0, #0
 8000c7a:	bd70      	pop	{r4, r5, r6, pc}

08000c7c <HAL_ETH_Init>:
{
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8000c84:	2800      	cmp	r0, #0
 8000c86:	f000 810e 	beq.w	8000ea6 <HAL_ETH_Init+0x22a>
 8000c8a:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c8c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d034      	beq.n	8000cfe <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	4b84      	ldr	r3, [pc, #528]	; (8000eac <HAL_ETH_Init+0x230>)
 8000c9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ca0:	645a      	str	r2, [r3, #68]	; 0x44
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000cac:	4b80      	ldr	r3, [pc, #512]	; (8000eb0 <HAL_ETH_Init+0x234>)
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000cb4:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	6a21      	ldr	r1, [r4, #32]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	f042 0201 	orr.w	r2, r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000ccc:	f7ff fc40 	bl	8000550 <HAL_GetTick>
 8000cd0:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	f012 0f01 	tst.w	r2, #1
 8000cde:	d013      	beq.n	8000d08 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000ce0:	f7ff fc36 	bl	8000550 <HAL_GetTick>
 8000ce4:	1b40      	subs	r0, r0, r5
 8000ce6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cea:	d9f2      	bls.n	8000cd2 <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cec:	2503      	movs	r5, #3
 8000cee:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8000cfe:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000d02:	f00b f999 	bl	800c038 <HAL_ETH_MspInit>
 8000d06:	e7c5      	b.n	8000c94 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000d08:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000d0a:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8000d0e:	f000 fcbd 	bl	800168c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000d12:	4b68      	ldr	r3, [pc, #416]	; (8000eb4 <HAL_ETH_Init+0x238>)
 8000d14:	4403      	add	r3, r0
 8000d16:	4a68      	ldr	r2, [pc, #416]	; (8000eb8 <HAL_ETH_Init+0x23c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d855      	bhi.n	8000dc8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000d1c:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000d24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f7ff ff6c 	bl	8000c08 <HAL_ETH_WritePHYRegister>
 8000d30:	4605      	mov	r5, r0
 8000d32:	2800      	cmp	r0, #0
 8000d34:	d160      	bne.n	8000df8 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8000d36:	20ff      	movs	r0, #255	; 0xff
 8000d38:	f7ff fc10 	bl	800055c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000d3c:	6863      	ldr	r3, [r4, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 8091 	beq.w	8000e66 <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8000d44:	f7ff fc04 	bl	8000550 <HAL_GetTick>
 8000d48:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d4a:	aa01      	add	r2, sp, #4
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f7ff ff1e 	bl	8000b90 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d54:	f7ff fbfc 	bl	8000550 <HAL_GetTick>
 8000d58:	1b80      	subs	r0, r0, r6
 8000d5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d852      	bhi.n	8000e08 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d62:	9b01      	ldr	r3, [sp, #4]
 8000d64:	f013 0f04 	tst.w	r3, #4
 8000d68:	d0ef      	beq.n	8000d4a <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4620      	mov	r0, r4
 8000d72:	f7ff ff49 	bl	8000c08 <HAL_ETH_WritePHYRegister>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d152      	bne.n	8000e20 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8000d7a:	f7ff fbe9 	bl	8000550 <HAL_GetTick>
 8000d7e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d80:	aa01      	add	r2, sp, #4
 8000d82:	2101      	movs	r1, #1
 8000d84:	4620      	mov	r0, r4
 8000d86:	f7ff ff03 	bl	8000b90 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d8a:	f7ff fbe1 	bl	8000550 <HAL_GetTick>
 8000d8e:	1b80      	subs	r0, r0, r6
 8000d90:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d94:	4298      	cmp	r0, r3
 8000d96:	d84b      	bhi.n	8000e30 <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d98:	9b01      	ldr	r3, [sp, #4]
 8000d9a:	f013 0f20 	tst.w	r3, #32
 8000d9e:	d0ef      	beq.n	8000d80 <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000da0:	aa01      	add	r2, sp, #4
 8000da2:	2110      	movs	r1, #16
 8000da4:	4620      	mov	r0, r4
 8000da6:	f7ff fef3 	bl	8000b90 <HAL_ETH_ReadPHYRegister>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d14c      	bne.n	8000e48 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000dae:	9b01      	ldr	r3, [sp, #4]
 8000db0:	f013 0f04 	tst.w	r3, #4
 8000db4:	d050      	beq.n	8000e58 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dba:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000dbc:	f013 0f02 	tst.w	r3, #2
 8000dc0:	d04d      	beq.n	8000e5e <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60a3      	str	r3, [r4, #8]
 8000dc6:	e05e      	b.n	8000e86 <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000dc8:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <HAL_ETH_Init+0x240>)
 8000dca:	4403      	add	r3, r0
 8000dcc:	4a3c      	ldr	r2, [pc, #240]	; (8000ec0 <HAL_ETH_Init+0x244>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d802      	bhi.n	8000dd8 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000dd2:	f045 050c 	orr.w	r5, r5, #12
 8000dd6:	e7a3      	b.n	8000d20 <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <HAL_ETH_Init+0x248>)
 8000dda:	4403      	add	r3, r0
 8000ddc:	4a3a      	ldr	r2, [pc, #232]	; (8000ec8 <HAL_ETH_Init+0x24c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d99e      	bls.n	8000d20 <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000de2:	4b3a      	ldr	r3, [pc, #232]	; (8000ecc <HAL_ETH_Init+0x250>)
 8000de4:	4403      	add	r3, r0
 8000de6:	4a3a      	ldr	r2, [pc, #232]	; (8000ed0 <HAL_ETH_Init+0x254>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d802      	bhi.n	8000df2 <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000dec:	f045 0504 	orr.w	r5, r5, #4
 8000df0:	e796      	b.n	8000d20 <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000df2:	f045 0510 	orr.w	r5, r5, #16
 8000df6:	e793      	b.n	8000d20 <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f7ff fca6 	bl	800074c <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8000e00:	2501      	movs	r5, #1
 8000e02:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000e06:	e777      	b.n	8000cf8 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f7ff fc9e 	bl	800074c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000e10:	2301      	movs	r3, #1
 8000e12:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000e16:	2300      	movs	r3, #0
 8000e18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000e1c:	2503      	movs	r5, #3
 8000e1e:	e76b      	b.n	8000cf8 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e20:	2101      	movs	r1, #1
 8000e22:	4620      	mov	r0, r4
 8000e24:	f7ff fc92 	bl	800074c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e28:	2501      	movs	r5, #1
 8000e2a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000e2e:	e763      	b.n	8000cf8 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000e30:	2101      	movs	r1, #1
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff fc8a 	bl	800074c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000e44:	2503      	movs	r5, #3
 8000e46:	e757      	b.n	8000cf8 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f7ff fc7e 	bl	800074c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e50:	2501      	movs	r5, #1
 8000e52:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000e56:	e74f      	b.n	8000cf8 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60e2      	str	r2, [r4, #12]
 8000e5c:	e7ae      	b.n	8000dbc <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8000e5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e62:	60a3      	str	r3, [r4, #8]
 8000e64:	e00f      	b.n	8000e86 <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e66:	68e3      	ldr	r3, [r4, #12]
 8000e68:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000e6c:	68a3      	ldr	r3, [r4, #8]
 8000e6e:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e72:	431a      	orrs	r2, r3
 8000e74:	2100      	movs	r1, #0
 8000e76:	4620      	mov	r0, r4
 8000e78:	f7ff fec6 	bl	8000c08 <HAL_ETH_WritePHYRegister>
 8000e7c:	b958      	cbnz	r0, 8000e96 <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000e7e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e82:	f7ff fb6b 	bl	800055c <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000e86:	2100      	movs	r1, #0
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff fc5f 	bl	800074c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000e94:	e730      	b.n	8000cf8 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e96:	2101      	movs	r1, #1
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f7ff fc57 	bl	800074c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e9e:	2501      	movs	r5, #1
 8000ea0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000ea4:	e728      	b.n	8000cf8 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 8000ea6:	2501      	movs	r5, #1
 8000ea8:	e726      	b.n	8000cf8 <HAL_ETH_Init+0x7c>
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40013800 	.word	0x40013800
 8000eb4:	feced300 	.word	0xfeced300
 8000eb8:	00e4e1bf 	.word	0x00e4e1bf
 8000ebc:	fde9f140 	.word	0xfde9f140
 8000ec0:	017d783f 	.word	0x017d783f
 8000ec4:	fc6c7900 	.word	0xfc6c7900
 8000ec8:	026259ff 	.word	0x026259ff
 8000ecc:	fa0a1f00 	.word	0xfa0a1f00
 8000ed0:	02faf07f 	.word	0x02faf07f

08000ed4 <HAL_ETH_Start>:
{  
 8000ed4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8000ed6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d101      	bne.n	8000ee2 <HAL_ETH_Start+0xe>
 8000ede:	2002      	movs	r0, #2
}
 8000ee0:	bd38      	pop	{r3, r4, r5, pc}
 8000ee2:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8000ee4:	2501      	movs	r5, #1
 8000ee6:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000eea:	2302      	movs	r3, #2
 8000eec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8000ef0:	f7ff fbea 	bl	80006c8 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f7ff fbfc 	bl	80006f2 <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff fc0e 	bl	800071c <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8000f00:	4620      	mov	r0, r4
 8000f02:	f7ff fbbb 	bl	800067c <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 8000f06:	4620      	mov	r0, r4
 8000f08:	f7ff fbc0 	bl	800068c <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8000f0c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 8000f16:	bd38      	pop	{r3, r4, r5, pc}

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	e04b      	b.n	8000fb8 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f20:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000f24:	f10e 0e08 	add.w	lr, lr, #8
 8000f28:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2c:	f004 0607 	and.w	r6, r4, #7
 8000f30:	00b6      	lsls	r6, r6, #2
 8000f32:	270f      	movs	r7, #15
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f3a:	690f      	ldr	r7, [r1, #16]
 8000f3c:	fa07 f606 	lsl.w	r6, r7, r6
 8000f40:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000f42:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000f46:	e046      	b.n	8000fd6 <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f48:	2607      	movs	r6, #7
 8000f4a:	e000      	b.n	8000f4e <HAL_GPIO_Init+0x36>
 8000f4c:	2600      	movs	r6, #0
 8000f4e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f52:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f54:	3302      	adds	r3, #2
 8000f56:	4e5e      	ldr	r6, [pc, #376]	; (80010d0 <HAL_GPIO_Init+0x1b8>)
 8000f58:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f5c:	4b5d      	ldr	r3, [pc, #372]	; (80010d4 <HAL_GPIO_Init+0x1bc>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	43eb      	mvns	r3, r5
 8000f62:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f66:	684f      	ldr	r7, [r1, #4]
 8000f68:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000f6c:	d001      	beq.n	8000f72 <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8000f6e:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000f72:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <HAL_GPIO_Init+0x1bc>)
 8000f74:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000f76:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f7c:	684f      	ldr	r7, [r1, #4]
 8000f7e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000f82:	d001      	beq.n	8000f88 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8000f84:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000f88:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <HAL_GPIO_Init+0x1bc>)
 8000f8a:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8c:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f92:	684f      	ldr	r7, [r1, #4]
 8000f94:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000f98:	d001      	beq.n	8000f9e <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8000f9a:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000f9e:	4a4d      	ldr	r2, [pc, #308]	; (80010d4 <HAL_GPIO_Init+0x1bc>)
 8000fa0:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000fa2:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa6:	684e      	ldr	r6, [r1, #4]
 8000fa8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000fac:	d001      	beq.n	8000fb2 <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8000fae:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000fb2:	4a48      	ldr	r2, [pc, #288]	; (80010d4 <HAL_GPIO_Init+0x1bc>)
 8000fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	3401      	adds	r4, #1
 8000fb8:	2c0f      	cmp	r4, #15
 8000fba:	f200 8086 	bhi.w	80010ca <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	680a      	ldr	r2, [r1, #0]
 8000fc4:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000fc8:	42ab      	cmp	r3, r5
 8000fca:	d1f4      	bne.n	8000fb6 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fcc:	684a      	ldr	r2, [r1, #4]
 8000fce:	2a02      	cmp	r2, #2
 8000fd0:	d0a6      	beq.n	8000f20 <HAL_GPIO_Init+0x8>
 8000fd2:	2a12      	cmp	r2, #18
 8000fd4:	d0a4      	beq.n	8000f20 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000fd6:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd8:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fe2:	43d2      	mvns	r2, r2
 8000fe4:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe6:	684f      	ldr	r7, [r1, #4]
 8000fe8:	f007 0703 	and.w	r7, r7, #3
 8000fec:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ff0:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000ff2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff4:	684e      	ldr	r6, [r1, #4]
 8000ff6:	1e77      	subs	r7, r6, #1
 8000ff8:	2f01      	cmp	r7, #1
 8000ffa:	d903      	bls.n	8001004 <HAL_GPIO_Init+0xec>
 8000ffc:	2e11      	cmp	r6, #17
 8000ffe:	d001      	beq.n	8001004 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001000:	2e12      	cmp	r6, #18
 8001002:	d10f      	bne.n	8001024 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8001004:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001006:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001008:	68cf      	ldr	r7, [r1, #12]
 800100a:	fa07 f70e 	lsl.w	r7, r7, lr
 800100e:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001010:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001012:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001014:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001018:	684e      	ldr	r6, [r1, #4]
 800101a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800101e:	40a6      	lsls	r6, r4
 8001020:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001022:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001024:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001026:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001028:	688b      	ldr	r3, [r1, #8]
 800102a:	fa03 f30e 	lsl.w	r3, r3, lr
 800102e:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8001030:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001032:	684b      	ldr	r3, [r1, #4]
 8001034:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001038:	d0bd      	beq.n	8000fb6 <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <HAL_GPIO_Init+0x1c0>)
 8001040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001046:	645a      	str	r2, [r3, #68]	; 0x44
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001052:	08a3      	lsrs	r3, r4, #2
 8001054:	1c9e      	adds	r6, r3, #2
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_GPIO_Init+0x1b8>)
 8001058:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800105c:	f004 0603 	and.w	r6, r4, #3
 8001060:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8001064:	260f      	movs	r6, #15
 8001066:	fa06 f60e 	lsl.w	r6, r6, lr
 800106a:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106e:	4f1b      	ldr	r7, [pc, #108]	; (80010dc <HAL_GPIO_Init+0x1c4>)
 8001070:	42b8      	cmp	r0, r7
 8001072:	f43f af6b 	beq.w	8000f4c <HAL_GPIO_Init+0x34>
 8001076:	4e1a      	ldr	r6, [pc, #104]	; (80010e0 <HAL_GPIO_Init+0x1c8>)
 8001078:	42b0      	cmp	r0, r6
 800107a:	d01a      	beq.n	80010b2 <HAL_GPIO_Init+0x19a>
 800107c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001080:	42b0      	cmp	r0, r6
 8001082:	d018      	beq.n	80010b6 <HAL_GPIO_Init+0x19e>
 8001084:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001088:	42b0      	cmp	r0, r6
 800108a:	d016      	beq.n	80010ba <HAL_GPIO_Init+0x1a2>
 800108c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001090:	42b0      	cmp	r0, r6
 8001092:	d014      	beq.n	80010be <HAL_GPIO_Init+0x1a6>
 8001094:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001098:	42b0      	cmp	r0, r6
 800109a:	d012      	beq.n	80010c2 <HAL_GPIO_Init+0x1aa>
 800109c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010a0:	42b0      	cmp	r0, r6
 80010a2:	d010      	beq.n	80010c6 <HAL_GPIO_Init+0x1ae>
 80010a4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010a8:	42b0      	cmp	r0, r6
 80010aa:	f43f af4d 	beq.w	8000f48 <HAL_GPIO_Init+0x30>
 80010ae:	2608      	movs	r6, #8
 80010b0:	e74d      	b.n	8000f4e <HAL_GPIO_Init+0x36>
 80010b2:	2601      	movs	r6, #1
 80010b4:	e74b      	b.n	8000f4e <HAL_GPIO_Init+0x36>
 80010b6:	2602      	movs	r6, #2
 80010b8:	e749      	b.n	8000f4e <HAL_GPIO_Init+0x36>
 80010ba:	2603      	movs	r6, #3
 80010bc:	e747      	b.n	8000f4e <HAL_GPIO_Init+0x36>
 80010be:	2604      	movs	r6, #4
 80010c0:	e745      	b.n	8000f4e <HAL_GPIO_Init+0x36>
 80010c2:	2605      	movs	r6, #5
 80010c4:	e743      	b.n	8000f4e <HAL_GPIO_Init+0x36>
 80010c6:	2606      	movs	r6, #6
 80010c8:	e741      	b.n	8000f4e <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 80010ca:	b003      	add	sp, #12
 80010cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40013c00 	.word	0x40013c00
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400

080010e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	b912      	cbnz	r2, 80010ec <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	0409      	lsls	r1, r1, #16
 80010e8:	6181      	str	r1, [r0, #24]
 80010ea:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80010ec:	6181      	str	r1, [r0, #24]
 80010ee:	4770      	bx	lr

080010f0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80010f0:	6943      	ldr	r3, [r0, #20]
 80010f2:	4059      	eors	r1, r3
 80010f4:	6141      	str	r1, [r0, #20]
 80010f6:	4770      	bx	lr

080010f8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f8:	2800      	cmp	r0, #0
 80010fa:	f000 81bb 	beq.w	8001474 <HAL_RCC_OscConfig+0x37c>
{
 80010fe:	b570      	push	{r4, r5, r6, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001104:	6803      	ldr	r3, [r0, #0]
 8001106:	f013 0f01 	tst.w	r3, #1
 800110a:	d03b      	beq.n	8001184 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110c:	4ba7      	ldr	r3, [pc, #668]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	2b04      	cmp	r3, #4
 8001116:	d02c      	beq.n	8001172 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001118:	4ba4      	ldr	r3, [pc, #656]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001120:	2b08      	cmp	r3, #8
 8001122:	d021      	beq.n	8001168 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001124:	6863      	ldr	r3, [r4, #4]
 8001126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112a:	d04f      	beq.n	80011cc <HAL_RCC_OscConfig+0xd4>
 800112c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001130:	d052      	beq.n	80011d8 <HAL_RCC_OscConfig+0xe0>
 8001132:	4b9e      	ldr	r3, [pc, #632]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001142:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001144:	6863      	ldr	r3, [r4, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d050      	beq.n	80011ec <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fa01 	bl	8000550 <HAL_GetTick>
 800114e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001150:	4b96      	ldr	r3, [pc, #600]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001158:	d114      	bne.n	8001184 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115a:	f7ff f9f9 	bl	8000550 <HAL_GetTick>
 800115e:	1b40      	subs	r0, r0, r5
 8001160:	2864      	cmp	r0, #100	; 0x64
 8001162:	d9f5      	bls.n	8001150 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001164:	2003      	movs	r0, #3
 8001166:	e18a      	b.n	800147e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001168:	4b90      	ldr	r3, [pc, #576]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001170:	d0d8      	beq.n	8001124 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001172:	4b8e      	ldr	r3, [pc, #568]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800117a:	d003      	beq.n	8001184 <HAL_RCC_OscConfig+0x8c>
 800117c:	6863      	ldr	r3, [r4, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 817a 	beq.w	8001478 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	f013 0f02 	tst.w	r3, #2
 800118a:	d055      	beq.n	8001238 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118c:	4b87      	ldr	r3, [pc, #540]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f013 0f0c 	tst.w	r3, #12
 8001194:	d03e      	beq.n	8001214 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001196:	4b85      	ldr	r3, [pc, #532]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d033      	beq.n	800120a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011a2:	68e3      	ldr	r3, [r4, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d068      	beq.n	800127a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a8:	2201      	movs	r2, #1
 80011aa:	4b81      	ldr	r3, [pc, #516]	; (80013b0 <HAL_RCC_OscConfig+0x2b8>)
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ae:	f7ff f9cf 	bl	8000550 <HAL_GetTick>
 80011b2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	4b7d      	ldr	r3, [pc, #500]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f013 0f02 	tst.w	r3, #2
 80011bc:	d154      	bne.n	8001268 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011be:	f7ff f9c7 	bl	8000550 <HAL_GetTick>
 80011c2:	1b40      	subs	r0, r0, r5
 80011c4:	2802      	cmp	r0, #2
 80011c6:	d9f5      	bls.n	80011b4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80011c8:	2003      	movs	r0, #3
 80011ca:	e158      	b.n	800147e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	4a77      	ldr	r2, [pc, #476]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 80011ce:	6813      	ldr	r3, [r2, #0]
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e7b5      	b.n	8001144 <HAL_RCC_OscConfig+0x4c>
 80011d8:	4b74      	ldr	r3, [pc, #464]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e7ab      	b.n	8001144 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80011ec:	f7ff f9b0 	bl	8000550 <HAL_GetTick>
 80011f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f2:	4b6e      	ldr	r3, [pc, #440]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011fa:	d0c3      	beq.n	8001184 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fc:	f7ff f9a8 	bl	8000550 <HAL_GetTick>
 8001200:	1b40      	subs	r0, r0, r5
 8001202:	2864      	cmp	r0, #100	; 0x64
 8001204:	d9f5      	bls.n	80011f2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001206:	2003      	movs	r0, #3
 8001208:	e139      	b.n	800147e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120a:	4b68      	ldr	r3, [pc, #416]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001212:	d1c6      	bne.n	80011a2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001214:	4b65      	ldr	r3, [pc, #404]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f013 0f02 	tst.w	r3, #2
 800121c:	d004      	beq.n	8001228 <HAL_RCC_OscConfig+0x130>
 800121e:	68e3      	ldr	r3, [r4, #12]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d001      	beq.n	8001228 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001224:	2001      	movs	r0, #1
 8001226:	e12a      	b.n	800147e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001228:	4a60      	ldr	r2, [pc, #384]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 800122a:	6813      	ldr	r3, [r2, #0]
 800122c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001230:	6921      	ldr	r1, [r4, #16]
 8001232:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001236:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	f013 0f08 	tst.w	r3, #8
 800123e:	d040      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001240:	6963      	ldr	r3, [r4, #20]
 8001242:	b363      	cbz	r3, 800129e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001244:	2201      	movs	r2, #1
 8001246:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <HAL_RCC_OscConfig+0x2bc>)
 8001248:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124a:	f7ff f981 	bl	8000550 <HAL_GetTick>
 800124e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001250:	4b56      	ldr	r3, [pc, #344]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 8001252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001254:	f013 0f02 	tst.w	r3, #2
 8001258:	d133      	bne.n	80012c2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125a:	f7ff f979 	bl	8000550 <HAL_GetTick>
 800125e:	1b40      	subs	r0, r0, r5
 8001260:	2802      	cmp	r0, #2
 8001262:	d9f5      	bls.n	8001250 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001264:	2003      	movs	r0, #3
 8001266:	e10a      	b.n	800147e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4a50      	ldr	r2, [pc, #320]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001270:	6921      	ldr	r1, [r4, #16]
 8001272:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e7de      	b.n	8001238 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800127a:	2200      	movs	r2, #0
 800127c:	4b4c      	ldr	r3, [pc, #304]	; (80013b0 <HAL_RCC_OscConfig+0x2b8>)
 800127e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001280:	f7ff f966 	bl	8000550 <HAL_GetTick>
 8001284:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	4b49      	ldr	r3, [pc, #292]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f013 0f02 	tst.w	r3, #2
 800128e:	d0d3      	beq.n	8001238 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff f95e 	bl	8000550 <HAL_GetTick>
 8001294:	1b40      	subs	r0, r0, r5
 8001296:	2802      	cmp	r0, #2
 8001298:	d9f5      	bls.n	8001286 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800129a:	2003      	movs	r0, #3
 800129c:	e0ef      	b.n	800147e <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129e:	2200      	movs	r2, #0
 80012a0:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <HAL_RCC_OscConfig+0x2bc>)
 80012a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a4:	f7ff f954 	bl	8000550 <HAL_GetTick>
 80012a8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012aa:	4b40      	ldr	r3, [pc, #256]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 80012ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ae:	f013 0f02 	tst.w	r3, #2
 80012b2:	d006      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b4:	f7ff f94c 	bl	8000550 <HAL_GetTick>
 80012b8:	1b40      	subs	r0, r0, r5
 80012ba:	2802      	cmp	r0, #2
 80012bc:	d9f5      	bls.n	80012aa <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 80012be:	2003      	movs	r0, #3
 80012c0:	e0dd      	b.n	800147e <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	f013 0f04 	tst.w	r3, #4
 80012c8:	d079      	beq.n	80013be <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ca:	4b38      	ldr	r3, [pc, #224]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80012d2:	d133      	bne.n	800133c <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	4b34      	ldr	r3, [pc, #208]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 80012da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012ec:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ee:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <HAL_RCC_OscConfig+0x2c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012f6:	d023      	beq.n	8001340 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f8:	68a3      	ldr	r3, [r4, #8]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d034      	beq.n	8001368 <HAL_RCC_OscConfig+0x270>
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d038      	beq.n	8001374 <HAL_RCC_OscConfig+0x27c>
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 8001304:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001306:	f022 0201 	bic.w	r2, r2, #1
 800130a:	671a      	str	r2, [r3, #112]	; 0x70
 800130c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800130e:	f022 0204 	bic.w	r2, r2, #4
 8001312:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001314:	68a3      	ldr	r3, [r4, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d036      	beq.n	8001388 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131a:	f7ff f919 	bl	8000550 <HAL_GetTick>
 800131e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 8001322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001324:	f013 0f02 	tst.w	r3, #2
 8001328:	d148      	bne.n	80013bc <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132a:	f7ff f911 	bl	8000550 <HAL_GetTick>
 800132e:	1b80      	subs	r0, r0, r6
 8001330:	f241 3388 	movw	r3, #5000	; 0x1388
 8001334:	4298      	cmp	r0, r3
 8001336:	d9f3      	bls.n	8001320 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001338:	2003      	movs	r0, #3
 800133a:	e0a0      	b.n	800147e <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 800133c:	2500      	movs	r5, #0
 800133e:	e7d6      	b.n	80012ee <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001340:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <HAL_RCC_OscConfig+0x2c0>)
 8001342:	6813      	ldr	r3, [r2, #0]
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800134a:	f7ff f901 	bl	8000550 <HAL_GetTick>
 800134e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_RCC_OscConfig+0x2c0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001358:	d1ce      	bne.n	80012f8 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135a:	f7ff f8f9 	bl	8000550 <HAL_GetTick>
 800135e:	1b80      	subs	r0, r0, r6
 8001360:	2802      	cmp	r0, #2
 8001362:	d9f5      	bls.n	8001350 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001364:	2003      	movs	r0, #3
 8001366:	e08a      	b.n	800147e <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001368:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 800136a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6713      	str	r3, [r2, #112]	; 0x70
 8001372:	e7cf      	b.n	8001314 <HAL_RCC_OscConfig+0x21c>
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 8001376:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001378:	f042 0204 	orr.w	r2, r2, #4
 800137c:	671a      	str	r2, [r3, #112]	; 0x70
 800137e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001380:	f042 0201 	orr.w	r2, r2, #1
 8001384:	671a      	str	r2, [r3, #112]	; 0x70
 8001386:	e7c5      	b.n	8001314 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001388:	f7ff f8e2 	bl	8000550 <HAL_GetTick>
 800138c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <HAL_RCC_OscConfig+0x2b4>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	f013 0f02 	tst.w	r3, #2
 8001396:	d011      	beq.n	80013bc <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff f8da 	bl	8000550 <HAL_GetTick>
 800139c:	1b80      	subs	r0, r0, r6
 800139e:	f241 3388 	movw	r3, #5000	; 0x1388
 80013a2:	4298      	cmp	r0, r3
 80013a4:	d9f3      	bls.n	800138e <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 80013a6:	2003      	movs	r0, #3
 80013a8:	e069      	b.n	800147e <HAL_RCC_OscConfig+0x386>
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	42470000 	.word	0x42470000
 80013b4:	42470e80 	.word	0x42470e80
 80013b8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013bc:	b9e5      	cbnz	r5, 80013f8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013be:	69a3      	ldr	r3, [r4, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d05b      	beq.n	800147c <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013c4:	4a30      	ldr	r2, [pc, #192]	; (8001488 <HAL_RCC_OscConfig+0x390>)
 80013c6:	6892      	ldr	r2, [r2, #8]
 80013c8:	f002 020c 	and.w	r2, r2, #12
 80013cc:	2a08      	cmp	r2, #8
 80013ce:	d058      	beq.n	8001482 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d017      	beq.n	8001404 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d4:	2200      	movs	r2, #0
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <HAL_RCC_OscConfig+0x394>)
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff f8b9 	bl	8000550 <HAL_GetTick>
 80013de:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <HAL_RCC_OscConfig+0x390>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013e8:	d042      	beq.n	8001470 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff f8b1 	bl	8000550 <HAL_GetTick>
 80013ee:	1b00      	subs	r0, r0, r4
 80013f0:	2802      	cmp	r0, #2
 80013f2:	d9f5      	bls.n	80013e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013f4:	2003      	movs	r0, #3
 80013f6:	e042      	b.n	800147e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f8:	4a23      	ldr	r2, [pc, #140]	; (8001488 <HAL_RCC_OscConfig+0x390>)
 80013fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	e7dc      	b.n	80013be <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001404:	2200      	movs	r2, #0
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_RCC_OscConfig+0x394>)
 8001408:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800140a:	f7ff f8a1 	bl	8000550 <HAL_GetTick>
 800140e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_RCC_OscConfig+0x390>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001418:	d006      	beq.n	8001428 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff f899 	bl	8000550 <HAL_GetTick>
 800141e:	1b40      	subs	r0, r0, r5
 8001420:	2802      	cmp	r0, #2
 8001422:	d9f5      	bls.n	8001410 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001424:	2003      	movs	r0, #3
 8001426:	e02a      	b.n	800147e <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001428:	69e3      	ldr	r3, [r4, #28]
 800142a:	6a22      	ldr	r2, [r4, #32]
 800142c:	4313      	orrs	r3, r2
 800142e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001430:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001434:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001436:	0852      	lsrs	r2, r2, #1
 8001438:	3a01      	subs	r2, #1
 800143a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800143e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001440:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001444:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_RCC_OscConfig+0x390>)
 8001446:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001448:	2201      	movs	r2, #1
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_RCC_OscConfig+0x394>)
 800144c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800144e:	f7ff f87f 	bl	8000550 <HAL_GetTick>
 8001452:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_RCC_OscConfig+0x390>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145e:	f7ff f877 	bl	8000550 <HAL_GetTick>
 8001462:	1b00      	subs	r0, r0, r4
 8001464:	2802      	cmp	r0, #2
 8001466:	d9f5      	bls.n	8001454 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001468:	2003      	movs	r0, #3
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800146c:	2000      	movs	r0, #0
 800146e:	e006      	b.n	800147e <HAL_RCC_OscConfig+0x386>
 8001470:	2000      	movs	r0, #0
 8001472:	e004      	b.n	800147e <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8001474:	2001      	movs	r0, #1
 8001476:	4770      	bx	lr
        return HAL_ERROR;
 8001478:	2001      	movs	r0, #1
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 800147c:	2000      	movs	r0, #0
}
 800147e:	b002      	add	sp, #8
 8001480:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001482:	2001      	movs	r0, #1
 8001484:	e7fb      	b.n	800147e <HAL_RCC_OscConfig+0x386>
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	42470060 	.word	0x42470060

08001490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b04      	cmp	r3, #4
 800149c:	d041      	beq.n	8001522 <HAL_RCC_GetSysClockFreq+0x92>
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014a2:	4822      	ldr	r0, [pc, #136]	; (800152c <HAL_RCC_GetSysClockFreq+0x9c>)
 80014a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80014b4:	d012      	beq.n	80014dc <HAL_RCC_GetSysClockFreq+0x4c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 80014b8:	6859      	ldr	r1, [r3, #4]
 80014ba:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014be:	2300      	movs	r3, #0
 80014c0:	481b      	ldr	r0, [pc, #108]	; (8001530 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014c2:	fba1 0100 	umull	r0, r1, r1, r0
 80014c6:	f7fe fe95 	bl	80001f4 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014d2:	3301      	adds	r3, #1
 80014d4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80014d6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80014da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80014e4:	461e      	mov	r6, r3
 80014e6:	2700      	movs	r7, #0
 80014e8:	015c      	lsls	r4, r3, #5
 80014ea:	2500      	movs	r5, #0
 80014ec:	1ae4      	subs	r4, r4, r3
 80014ee:	eb65 0507 	sbc.w	r5, r5, r7
 80014f2:	01a9      	lsls	r1, r5, #6
 80014f4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80014f8:	01a0      	lsls	r0, r4, #6
 80014fa:	1b00      	subs	r0, r0, r4
 80014fc:	eb61 0105 	sbc.w	r1, r1, r5
 8001500:	00cb      	lsls	r3, r1, #3
 8001502:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001506:	00c4      	lsls	r4, r0, #3
 8001508:	19a0      	adds	r0, r4, r6
 800150a:	eb43 0107 	adc.w	r1, r3, r7
 800150e:	028b      	lsls	r3, r1, #10
 8001510:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001514:	0284      	lsls	r4, r0, #10
 8001516:	4620      	mov	r0, r4
 8001518:	4619      	mov	r1, r3
 800151a:	2300      	movs	r3, #0
 800151c:	f7fe fe6a 	bl	80001f4 <__aeabi_uldivmod>
 8001520:	e7d3      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	00f42400 	.word	0x00f42400
 8001530:	017d7840 	.word	0x017d7840

08001534 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001534:	2800      	cmp	r0, #0
 8001536:	f000 809d 	beq.w	8001674 <HAL_RCC_ClockConfig+0x140>
{
 800153a:	b570      	push	{r4, r5, r6, lr}
 800153c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800153e:	4b4f      	ldr	r3, [pc, #316]	; (800167c <HAL_RCC_ClockConfig+0x148>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	428b      	cmp	r3, r1
 8001548:	d209      	bcs.n	800155e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	b2cb      	uxtb	r3, r1
 800154c:	4a4b      	ldr	r2, [pc, #300]	; (800167c <HAL_RCC_ClockConfig+0x148>)
 800154e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001550:	6813      	ldr	r3, [r2, #0]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	4299      	cmp	r1, r3
 8001558:	d001      	beq.n	800155e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800155a:	2001      	movs	r0, #1
 800155c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	f013 0f02 	tst.w	r3, #2
 8001564:	d017      	beq.n	8001596 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001566:	f013 0f04 	tst.w	r3, #4
 800156a:	d004      	beq.n	8001576 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800156c:	4a44      	ldr	r2, [pc, #272]	; (8001680 <HAL_RCC_ClockConfig+0x14c>)
 800156e:	6893      	ldr	r3, [r2, #8]
 8001570:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001574:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	f013 0f08 	tst.w	r3, #8
 800157c:	d004      	beq.n	8001588 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800157e:	4a40      	ldr	r2, [pc, #256]	; (8001680 <HAL_RCC_ClockConfig+0x14c>)
 8001580:	6893      	ldr	r3, [r2, #8]
 8001582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001586:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001588:	4a3d      	ldr	r2, [pc, #244]	; (8001680 <HAL_RCC_ClockConfig+0x14c>)
 800158a:	6893      	ldr	r3, [r2, #8]
 800158c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001590:	68a0      	ldr	r0, [r4, #8]
 8001592:	4303      	orrs	r3, r0
 8001594:	6093      	str	r3, [r2, #8]
 8001596:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	f013 0f01 	tst.w	r3, #1
 800159e:	d032      	beq.n	8001606 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a0:	6863      	ldr	r3, [r4, #4]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d021      	beq.n	80015ea <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a6:	1e9a      	subs	r2, r3, #2
 80015a8:	2a01      	cmp	r2, #1
 80015aa:	d925      	bls.n	80015f8 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	4a34      	ldr	r2, [pc, #208]	; (8001680 <HAL_RCC_ClockConfig+0x14c>)
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	f012 0f02 	tst.w	r2, #2
 80015b4:	d060      	beq.n	8001678 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b6:	4932      	ldr	r1, [pc, #200]	; (8001680 <HAL_RCC_ClockConfig+0x14c>)
 80015b8:	688a      	ldr	r2, [r1, #8]
 80015ba:	f022 0203 	bic.w	r2, r2, #3
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80015c2:	f7fe ffc5 	bl	8000550 <HAL_GetTick>
 80015c6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c8:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <HAL_RCC_ClockConfig+0x14c>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	6862      	ldr	r2, [r4, #4]
 80015d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015d6:	d016      	beq.n	8001606 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7fe ffba 	bl	8000550 <HAL_GetTick>
 80015dc:	1b80      	subs	r0, r0, r6
 80015de:	f241 3388 	movw	r3, #5000	; 0x1388
 80015e2:	4298      	cmp	r0, r3
 80015e4:	d9f0      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80015e6:	2003      	movs	r0, #3
 80015e8:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4a25      	ldr	r2, [pc, #148]	; (8001680 <HAL_RCC_ClockConfig+0x14c>)
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80015f2:	d1e0      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80015f4:	2001      	movs	r0, #1
 80015f6:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f8:	4a21      	ldr	r2, [pc, #132]	; (8001680 <HAL_RCC_ClockConfig+0x14c>)
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001600:	d1d9      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001602:	2001      	movs	r0, #1
 8001604:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_RCC_ClockConfig+0x148>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	429d      	cmp	r5, r3
 8001610:	d209      	bcs.n	8001626 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	b2ea      	uxtb	r2, r5
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_RCC_ClockConfig+0x148>)
 8001616:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	429d      	cmp	r5, r3
 8001620:	d001      	beq.n	8001626 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8001622:	2001      	movs	r0, #1
}
 8001624:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	f013 0f04 	tst.w	r3, #4
 800162c:	d006      	beq.n	800163c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800162e:	4a14      	ldr	r2, [pc, #80]	; (8001680 <HAL_RCC_ClockConfig+0x14c>)
 8001630:	6893      	ldr	r3, [r2, #8]
 8001632:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001636:	68e1      	ldr	r1, [r4, #12]
 8001638:	430b      	orrs	r3, r1
 800163a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	f013 0f08 	tst.w	r3, #8
 8001642:	d007      	beq.n	8001654 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <HAL_RCC_ClockConfig+0x14c>)
 8001646:	6893      	ldr	r3, [r2, #8]
 8001648:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800164c:	6921      	ldr	r1, [r4, #16]
 800164e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001652:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001654:	f7ff ff1c 	bl	8001490 <HAL_RCC_GetSysClockFreq>
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_RCC_ClockConfig+0x14c>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001660:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_RCC_ClockConfig+0x150>)
 8001662:	5cd3      	ldrb	r3, [r2, r3]
 8001664:	40d8      	lsrs	r0, r3
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_RCC_ClockConfig+0x154>)
 8001668:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800166a:	2000      	movs	r0, #0
 800166c:	f00a ff48 	bl	800c500 <HAL_InitTick>
  return HAL_OK;
 8001670:	2000      	movs	r0, #0
 8001672:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001674:	2001      	movs	r0, #1
 8001676:	4770      	bx	lr
        return HAL_ERROR;
 8001678:	2001      	movs	r0, #1
 800167a:	bd70      	pop	{r4, r5, r6, pc}
 800167c:	40023c00 	.word	0x40023c00
 8001680:	40023800 	.word	0x40023800
 8001684:	08010c8c 	.word	0x08010c8c
 8001688:	20000010 	.word	0x20000010

0800168c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800168c:	4b01      	ldr	r3, [pc, #4]	; (8001694 <HAL_RCC_GetHCLKFreq+0x8>)
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000010 	.word	0x20000010

08001698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001698:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800169a:	f7ff fff7 	bl	800168c <HAL_RCC_GetHCLKFreq>
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80016a6:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016a8:	5cd3      	ldrb	r3, [r2, r3]
}
 80016aa:	40d8      	lsrs	r0, r3
 80016ac:	bd08      	pop	{r3, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	08010c9c 	.word	0x08010c9c

080016b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016b8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016ba:	f7ff ffe7 	bl	800168c <HAL_RCC_GetHCLKFreq>
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80016c6:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
}
 80016ca:	40d8      	lsrs	r0, r3
 80016cc:	bd08      	pop	{r3, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	08010c9c 	.word	0x08010c9c

080016d8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016d8:	230f      	movs	r3, #15
 80016da:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCC_GetClockConfig+0x34>)
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	f002 0203 	and.w	r2, r2, #3
 80016e4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80016ec:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80016f4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80016fe:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_RCC_GetClockConfig+0x38>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	600b      	str	r3, [r1, #0]
 800170a:	4770      	bx	lr
 800170c:	40023800 	.word	0x40023800
 8001710:	40023c00 	.word	0x40023c00

08001714 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001714:	4770      	bx	lr

08001716 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001716:	6802      	ldr	r2, [r0, #0]
 8001718:	68d3      	ldr	r3, [r2, #12]
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001720:	6802      	ldr	r2, [r0, #0]
 8001722:	6813      	ldr	r3, [r2, #0]
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800172a:	2000      	movs	r0, #0
 800172c:	4770      	bx	lr

0800172e <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800172e:	4770      	bx	lr

08001730 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001730:	4770      	bx	lr

08001732 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001732:	4770      	bx	lr

08001734 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001734:	4770      	bx	lr

08001736 <HAL_TIM_IRQHandler>:
{
 8001736:	b510      	push	{r4, lr}
 8001738:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800173a:	6803      	ldr	r3, [r0, #0]
 800173c:	691a      	ldr	r2, [r3, #16]
 800173e:	f012 0f02 	tst.w	r2, #2
 8001742:	d011      	beq.n	8001768 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	f012 0f02 	tst.w	r2, #2
 800174a:	d00d      	beq.n	8001768 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800174c:	f06f 0202 	mvn.w	r2, #2
 8001750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001752:	2301      	movs	r3, #1
 8001754:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001756:	6803      	ldr	r3, [r0, #0]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f013 0f03 	tst.w	r3, #3
 800175e:	d070      	beq.n	8001842 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001760:	f7ff ffe6 	bl	8001730 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001764:	2300      	movs	r3, #0
 8001766:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	f012 0f04 	tst.w	r2, #4
 8001770:	d012      	beq.n	8001798 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	f012 0f04 	tst.w	r2, #4
 8001778:	d00e      	beq.n	8001798 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800177a:	f06f 0204 	mvn.w	r2, #4
 800177e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001780:	2302      	movs	r3, #2
 8001782:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001784:	6823      	ldr	r3, [r4, #0]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f413 7f40 	tst.w	r3, #768	; 0x300
 800178c:	d05f      	beq.n	800184e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff ffce 	bl	8001730 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001794:	2300      	movs	r3, #0
 8001796:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	f012 0f08 	tst.w	r2, #8
 80017a0:	d012      	beq.n	80017c8 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	f012 0f08 	tst.w	r2, #8
 80017a8:	d00e      	beq.n	80017c8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017aa:	f06f 0208 	mvn.w	r2, #8
 80017ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017b0:	2304      	movs	r3, #4
 80017b2:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	f013 0f03 	tst.w	r3, #3
 80017bc:	d04e      	beq.n	800185c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80017be:	4620      	mov	r0, r4
 80017c0:	f7ff ffb6 	bl	8001730 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c4:	2300      	movs	r3, #0
 80017c6:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	f012 0f10 	tst.w	r2, #16
 80017d0:	d012      	beq.n	80017f8 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	f012 0f10 	tst.w	r2, #16
 80017d8:	d00e      	beq.n	80017f8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017da:	f06f 0210 	mvn.w	r2, #16
 80017de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017e0:	2308      	movs	r3, #8
 80017e2:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80017ec:	d03d      	beq.n	800186a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff ff9e 	bl	8001730 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f4:	2300      	movs	r3, #0
 80017f6:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	f012 0f01 	tst.w	r2, #1
 8001800:	d003      	beq.n	800180a <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	f012 0f01 	tst.w	r2, #1
 8001808:	d136      	bne.n	8001878 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001812:	d003      	beq.n	800181c <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	f012 0f80 	tst.w	r2, #128	; 0x80
 800181a:	d134      	bne.n	8001886 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001824:	d003      	beq.n	800182e <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	f012 0f40 	tst.w	r2, #64	; 0x40
 800182c:	d132      	bne.n	8001894 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	f012 0f20 	tst.w	r2, #32
 8001836:	d003      	beq.n	8001840 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	f012 0f20 	tst.w	r2, #32
 800183e:	d130      	bne.n	80018a2 <HAL_TIM_IRQHandler+0x16c>
 8001840:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001842:	f7ff ff74 	bl	800172e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff ff73 	bl	8001732 <HAL_TIM_PWM_PulseFinishedCallback>
 800184c:	e78a      	b.n	8001764 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff ff6d 	bl	800172e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff ff6c 	bl	8001732 <HAL_TIM_PWM_PulseFinishedCallback>
 800185a:	e79b      	b.n	8001794 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185c:	4620      	mov	r0, r4
 800185e:	f7ff ff66 	bl	800172e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001862:	4620      	mov	r0, r4
 8001864:	f7ff ff65 	bl	8001732 <HAL_TIM_PWM_PulseFinishedCallback>
 8001868:	e7ac      	b.n	80017c4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff ff5f 	bl	800172e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff ff5e 	bl	8001732 <HAL_TIM_PWM_PulseFinishedCallback>
 8001876:	e7bd      	b.n	80017f4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001878:	f06f 0201 	mvn.w	r2, #1
 800187c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800187e:	4620      	mov	r0, r4
 8001880:	f00a fe0e 	bl	800c4a0 <HAL_TIM_PeriodElapsedCallback>
 8001884:	e7c1      	b.n	800180a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001886:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800188a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800188c:	4620      	mov	r0, r4
 800188e:	f000 f8b7 	bl	8001a00 <HAL_TIMEx_BreakCallback>
 8001892:	e7c3      	b.n	800181c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001894:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001898:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff ff4a 	bl	8001734 <HAL_TIM_TriggerCallback>
 80018a0:	e7c5      	b.n	800182e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018a2:	f06f 0220 	mvn.w	r2, #32
 80018a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80018a8:	4620      	mov	r0, r4
 80018aa:	f000 f8a8 	bl	80019fe <HAL_TIMEx_CommutationCallback>
}
 80018ae:	e7c7      	b.n	8001840 <HAL_TIM_IRQHandler+0x10a>

080018b0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 80018b0:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80018b2:	4a45      	ldr	r2, [pc, #276]	; (80019c8 <TIM_Base_SetConfig+0x118>)
 80018b4:	4290      	cmp	r0, r2
 80018b6:	d04a      	beq.n	800194e <TIM_Base_SetConfig+0x9e>
 80018b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018bc:	d049      	beq.n	8001952 <TIM_Base_SetConfig+0xa2>
 80018be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80018c2:	4290      	cmp	r0, r2
 80018c4:	d047      	beq.n	8001956 <TIM_Base_SetConfig+0xa6>
 80018c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018ca:	4290      	cmp	r0, r2
 80018cc:	d045      	beq.n	800195a <TIM_Base_SetConfig+0xaa>
 80018ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018d2:	4290      	cmp	r0, r2
 80018d4:	d043      	beq.n	800195e <TIM_Base_SetConfig+0xae>
 80018d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80018da:	4290      	cmp	r0, r2
 80018dc:	d035      	beq.n	800194a <TIM_Base_SetConfig+0x9a>
 80018de:	2200      	movs	r2, #0
 80018e0:	b11a      	cbz	r2, 80018ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80018e6:	684a      	ldr	r2, [r1, #4]
 80018e8:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80018ea:	4a37      	ldr	r2, [pc, #220]	; (80019c8 <TIM_Base_SetConfig+0x118>)
 80018ec:	4290      	cmp	r0, r2
 80018ee:	d03a      	beq.n	8001966 <TIM_Base_SetConfig+0xb6>
 80018f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018f4:	d050      	beq.n	8001998 <TIM_Base_SetConfig+0xe8>
 80018f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80018fa:	4290      	cmp	r0, r2
 80018fc:	d04e      	beq.n	800199c <TIM_Base_SetConfig+0xec>
 80018fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001902:	4290      	cmp	r0, r2
 8001904:	d04c      	beq.n	80019a0 <TIM_Base_SetConfig+0xf0>
 8001906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800190a:	4290      	cmp	r0, r2
 800190c:	d04a      	beq.n	80019a4 <TIM_Base_SetConfig+0xf4>
 800190e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001912:	4290      	cmp	r0, r2
 8001914:	d048      	beq.n	80019a8 <TIM_Base_SetConfig+0xf8>
 8001916:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800191a:	4290      	cmp	r0, r2
 800191c:	d046      	beq.n	80019ac <TIM_Base_SetConfig+0xfc>
 800191e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001922:	4290      	cmp	r0, r2
 8001924:	d044      	beq.n	80019b0 <TIM_Base_SetConfig+0x100>
 8001926:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800192a:	4290      	cmp	r0, r2
 800192c:	d042      	beq.n	80019b4 <TIM_Base_SetConfig+0x104>
 800192e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001932:	4290      	cmp	r0, r2
 8001934:	d040      	beq.n	80019b8 <TIM_Base_SetConfig+0x108>
 8001936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800193a:	4290      	cmp	r0, r2
 800193c:	d03e      	beq.n	80019bc <TIM_Base_SetConfig+0x10c>
 800193e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001942:	4290      	cmp	r0, r2
 8001944:	d00d      	beq.n	8001962 <TIM_Base_SetConfig+0xb2>
 8001946:	2200      	movs	r2, #0
 8001948:	e00e      	b.n	8001968 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800194a:	2201      	movs	r2, #1
 800194c:	e7c8      	b.n	80018e0 <TIM_Base_SetConfig+0x30>
 800194e:	2201      	movs	r2, #1
 8001950:	e7c6      	b.n	80018e0 <TIM_Base_SetConfig+0x30>
 8001952:	2201      	movs	r2, #1
 8001954:	e7c4      	b.n	80018e0 <TIM_Base_SetConfig+0x30>
 8001956:	2201      	movs	r2, #1
 8001958:	e7c2      	b.n	80018e0 <TIM_Base_SetConfig+0x30>
 800195a:	2201      	movs	r2, #1
 800195c:	e7c0      	b.n	80018e0 <TIM_Base_SetConfig+0x30>
 800195e:	2201      	movs	r2, #1
 8001960:	e7be      	b.n	80018e0 <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001962:	2201      	movs	r2, #1
 8001964:	e000      	b.n	8001968 <TIM_Base_SetConfig+0xb8>
 8001966:	2201      	movs	r2, #1
 8001968:	b11a      	cbz	r2, 8001972 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800196a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800196e:	68ca      	ldr	r2, [r1, #12]
 8001970:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001972:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001974:	688b      	ldr	r3, [r1, #8]
 8001976:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001978:	680b      	ldr	r3, [r1, #0]
 800197a:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <TIM_Base_SetConfig+0x118>)
 800197e:	4298      	cmp	r0, r3
 8001980:	d020      	beq.n	80019c4 <TIM_Base_SetConfig+0x114>
 8001982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001986:	4298      	cmp	r0, r3
 8001988:	d01a      	beq.n	80019c0 <TIM_Base_SetConfig+0x110>
 800198a:	2300      	movs	r3, #0
 800198c:	b10b      	cbz	r3, 8001992 <TIM_Base_SetConfig+0xe2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800198e:	690b      	ldr	r3, [r1, #16]
 8001990:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001992:	2301      	movs	r3, #1
 8001994:	6143      	str	r3, [r0, #20]
 8001996:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001998:	2201      	movs	r2, #1
 800199a:	e7e5      	b.n	8001968 <TIM_Base_SetConfig+0xb8>
 800199c:	2201      	movs	r2, #1
 800199e:	e7e3      	b.n	8001968 <TIM_Base_SetConfig+0xb8>
 80019a0:	2201      	movs	r2, #1
 80019a2:	e7e1      	b.n	8001968 <TIM_Base_SetConfig+0xb8>
 80019a4:	2201      	movs	r2, #1
 80019a6:	e7df      	b.n	8001968 <TIM_Base_SetConfig+0xb8>
 80019a8:	2201      	movs	r2, #1
 80019aa:	e7dd      	b.n	8001968 <TIM_Base_SetConfig+0xb8>
 80019ac:	2201      	movs	r2, #1
 80019ae:	e7db      	b.n	8001968 <TIM_Base_SetConfig+0xb8>
 80019b0:	2201      	movs	r2, #1
 80019b2:	e7d9      	b.n	8001968 <TIM_Base_SetConfig+0xb8>
 80019b4:	2201      	movs	r2, #1
 80019b6:	e7d7      	b.n	8001968 <TIM_Base_SetConfig+0xb8>
 80019b8:	2201      	movs	r2, #1
 80019ba:	e7d5      	b.n	8001968 <TIM_Base_SetConfig+0xb8>
 80019bc:	2201      	movs	r2, #1
 80019be:	e7d3      	b.n	8001968 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80019c0:	2301      	movs	r3, #1
 80019c2:	e7e3      	b.n	800198c <TIM_Base_SetConfig+0xdc>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e7e1      	b.n	800198c <TIM_Base_SetConfig+0xdc>
 80019c8:	40010000 	.word	0x40010000

080019cc <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80019cc:	b1a8      	cbz	r0, 80019fa <HAL_TIM_Base_Init+0x2e>
{ 
 80019ce:	b510      	push	{r4, lr}
 80019d0:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80019d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019d6:	b15b      	cbz	r3, 80019f0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80019d8:	2302      	movs	r3, #2
 80019da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80019de:	1d21      	adds	r1, r4, #4
 80019e0:	6820      	ldr	r0, [r4, #0]
 80019e2:	f7ff ff65 	bl	80018b0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80019ec:	2000      	movs	r0, #0
 80019ee:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80019f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80019f4:	f7ff fe8e 	bl	8001714 <HAL_TIM_Base_MspInit>
 80019f8:	e7ee      	b.n	80019d8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80019fa:	2001      	movs	r0, #1
 80019fc:	4770      	bx	lr

080019fe <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80019fe:	4770      	bx	lr

08001a00 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a00:	4770      	bx	lr

08001a02 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a02:	6802      	ldr	r2, [r0, #0]
 8001a04:	68d3      	ldr	r3, [r2, #12]
 8001a06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001a0a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a0c:	6802      	ldr	r2, [r0, #0]
 8001a0e:	6953      	ldr	r3, [r2, #20]
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a16:	2320      	movs	r3, #32
 8001a18:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001a1c:	4770      	bx	lr

08001a1e <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a1e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b21      	cmp	r3, #33	; 0x21
 8001a26:	d001      	beq.n	8001a2c <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001a28:	2002      	movs	r0, #2
 8001a2a:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a2c:	6883      	ldr	r3, [r0, #8]
 8001a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a32:	d017      	beq.n	8001a64 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a34:	6802      	ldr	r2, [r0, #0]
 8001a36:	6a03      	ldr	r3, [r0, #32]
 8001a38:	1c59      	adds	r1, r3, #1
 8001a3a:	6201      	str	r1, [r0, #32]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 8001a40:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001a4a:	b9db      	cbnz	r3, 8001a84 <UART_Transmit_IT+0x66>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001a4c:	6802      	ldr	r2, [r0, #0]
 8001a4e:	68d3      	ldr	r3, [r2, #12]
 8001a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a54:	60d3      	str	r3, [r2, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a56:	6802      	ldr	r2, [r0, #0]
 8001a58:	68d3      	ldr	r3, [r2, #12]
 8001a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a5e:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001a60:	2000      	movs	r0, #0
 8001a62:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001a64:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001a66:	6802      	ldr	r2, [r0, #0]
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a6e:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001a70:	6903      	ldr	r3, [r0, #16]
 8001a72:	b91b      	cbnz	r3, 8001a7c <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8001a74:	6a03      	ldr	r3, [r0, #32]
 8001a76:	3302      	adds	r3, #2
 8001a78:	6203      	str	r3, [r0, #32]
 8001a7a:	e7e1      	b.n	8001a40 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8001a7c:	6a03      	ldr	r3, [r0, #32]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	6203      	str	r3, [r0, #32]
 8001a82:	e7dd      	b.n	8001a40 <UART_Transmit_IT+0x22>
    return HAL_OK;
 8001a84:	2000      	movs	r0, #0
  }
}
 8001a86:	4770      	bx	lr

08001a88 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a8c:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001a8e:	6802      	ldr	r2, [r0, #0]
 8001a90:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001a92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001a96:	68c1      	ldr	r1, [r0, #12]
 8001a98:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001a9a:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001a9c:	6801      	ldr	r1, [r0, #0]
 8001a9e:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001aa0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001aa4:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001aa8:	6882      	ldr	r2, [r0, #8]
 8001aaa:	6900      	ldr	r0, [r0, #16]
 8001aac:	4302      	orrs	r2, r0
 8001aae:	6960      	ldr	r0, [r4, #20]
 8001ab0:	4302      	orrs	r2, r0
 8001ab2:	69e0      	ldr	r0, [r4, #28]
 8001ab4:	4302      	orrs	r2, r0
 8001ab6:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001ab8:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001aba:	6822      	ldr	r2, [r4, #0]
 8001abc:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001ac2:	69a1      	ldr	r1, [r4, #24]
 8001ac4:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001ac6:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ac8:	69e3      	ldr	r3, [r4, #28]
 8001aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ace:	d062      	beq.n	8001b96 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ad0:	f8d4 8000 	ldr.w	r8, [r4]
 8001ad4:	4bbb      	ldr	r3, [pc, #748]	; (8001dc4 <UART_SetConfig+0x33c>)
 8001ad6:	4598      	cmp	r8, r3
 8001ad8:	f000 811b 	beq.w	8001d12 <UART_SetConfig+0x28a>
 8001adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae0:	4598      	cmp	r8, r3
 8001ae2:	f000 8116 	beq.w	8001d12 <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ae6:	f7ff fdd7 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001aea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001af2:	6865      	ldr	r5, [r4, #4]
 8001af4:	00ad      	lsls	r5, r5, #2
 8001af6:	fbb0 f5f5 	udiv	r5, r0, r5
 8001afa:	4fb3      	ldr	r7, [pc, #716]	; (8001dc8 <UART_SetConfig+0x340>)
 8001afc:	fba7 3505 	umull	r3, r5, r7, r5
 8001b00:	096d      	lsrs	r5, r5, #5
 8001b02:	012e      	lsls	r6, r5, #4
 8001b04:	f7ff fdc8 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001b08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b10:	6865      	ldr	r5, [r4, #4]
 8001b12:	00ad      	lsls	r5, r5, #2
 8001b14:	fbb0 faf5 	udiv	sl, r0, r5
 8001b18:	f7ff fdbe 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001b1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b24:	6865      	ldr	r5, [r4, #4]
 8001b26:	00ad      	lsls	r5, r5, #2
 8001b28:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b2c:	fba7 3505 	umull	r3, r5, r7, r5
 8001b30:	096d      	lsrs	r5, r5, #5
 8001b32:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b36:	fb09 a515 	mls	r5, r9, r5, sl
 8001b3a:	012d      	lsls	r5, r5, #4
 8001b3c:	3532      	adds	r5, #50	; 0x32
 8001b3e:	fba7 3505 	umull	r3, r5, r7, r5
 8001b42:	096d      	lsrs	r5, r5, #5
 8001b44:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001b48:	4435      	add	r5, r6
 8001b4a:	f7ff fda5 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001b4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b56:	6866      	ldr	r6, [r4, #4]
 8001b58:	00b6      	lsls	r6, r6, #2
 8001b5a:	fbb0 f6f6 	udiv	r6, r0, r6
 8001b5e:	f7ff fd9b 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001b62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b6a:	6863      	ldr	r3, [r4, #4]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b72:	fba7 3000 	umull	r3, r0, r7, r0
 8001b76:	0940      	lsrs	r0, r0, #5
 8001b78:	fb09 6910 	mls	r9, r9, r0, r6
 8001b7c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001b80:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001b84:	fba7 3709 	umull	r3, r7, r7, r9
 8001b88:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001b8c:	442f      	add	r7, r5
 8001b8e:	f8c8 7008 	str.w	r7, [r8, #8]
 8001b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b96:	f8d4 8000 	ldr.w	r8, [r4]
 8001b9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b9e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8001ba2:	4598      	cmp	r8, r3
 8001ba4:	d05c      	beq.n	8001c60 <UART_SetConfig+0x1d8>
 8001ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001baa:	4598      	cmp	r8, r3
 8001bac:	d058      	beq.n	8001c60 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bae:	f7ff fd73 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001bb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bba:	6865      	ldr	r5, [r4, #4]
 8001bbc:	006d      	lsls	r5, r5, #1
 8001bbe:	fbb0 f5f5 	udiv	r5, r0, r5
 8001bc2:	4f81      	ldr	r7, [pc, #516]	; (8001dc8 <UART_SetConfig+0x340>)
 8001bc4:	fba7 3505 	umull	r3, r5, r7, r5
 8001bc8:	096d      	lsrs	r5, r5, #5
 8001bca:	012e      	lsls	r6, r5, #4
 8001bcc:	f7ff fd64 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001bd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bd8:	6865      	ldr	r5, [r4, #4]
 8001bda:	006d      	lsls	r5, r5, #1
 8001bdc:	fbb0 faf5 	udiv	sl, r0, r5
 8001be0:	f7ff fd5a 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001be4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001be8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bec:	6865      	ldr	r5, [r4, #4]
 8001bee:	006d      	lsls	r5, r5, #1
 8001bf0:	fbb0 f5f5 	udiv	r5, r0, r5
 8001bf4:	fba7 3505 	umull	r3, r5, r7, r5
 8001bf8:	096d      	lsrs	r5, r5, #5
 8001bfa:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001bfe:	fb09 a515 	mls	r5, r9, r5, sl
 8001c02:	00ed      	lsls	r5, r5, #3
 8001c04:	3532      	adds	r5, #50	; 0x32
 8001c06:	fba7 3505 	umull	r3, r5, r7, r5
 8001c0a:	096d      	lsrs	r5, r5, #5
 8001c0c:	006d      	lsls	r5, r5, #1
 8001c0e:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001c12:	4435      	add	r5, r6
 8001c14:	f7ff fd40 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001c18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c20:	6866      	ldr	r6, [r4, #4]
 8001c22:	0076      	lsls	r6, r6, #1
 8001c24:	fbb0 f6f6 	udiv	r6, r0, r6
 8001c28:	f7ff fd36 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001c2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c34:	6863      	ldr	r3, [r4, #4]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3c:	fba7 2303 	umull	r2, r3, r7, r3
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	fb09 6913 	mls	r9, r9, r3, r6
 8001c46:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001c4a:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001c4e:	fba7 3709 	umull	r3, r7, r7, r9
 8001c52:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001c56:	442f      	add	r7, r5
 8001c58:	f8c8 7008 	str.w	r7, [r8, #8]
 8001c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c60:	f7ff fd2a 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001c64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c6c:	6865      	ldr	r5, [r4, #4]
 8001c6e:	006d      	lsls	r5, r5, #1
 8001c70:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c74:	4f54      	ldr	r7, [pc, #336]	; (8001dc8 <UART_SetConfig+0x340>)
 8001c76:	fba7 3505 	umull	r3, r5, r7, r5
 8001c7a:	096d      	lsrs	r5, r5, #5
 8001c7c:	012e      	lsls	r6, r5, #4
 8001c7e:	f7ff fd1b 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001c82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c8a:	6865      	ldr	r5, [r4, #4]
 8001c8c:	006d      	lsls	r5, r5, #1
 8001c8e:	fbb0 faf5 	udiv	sl, r0, r5
 8001c92:	f7ff fd11 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001c96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c9e:	6865      	ldr	r5, [r4, #4]
 8001ca0:	006d      	lsls	r5, r5, #1
 8001ca2:	fbb0 f5f5 	udiv	r5, r0, r5
 8001ca6:	fba7 3505 	umull	r3, r5, r7, r5
 8001caa:	096d      	lsrs	r5, r5, #5
 8001cac:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001cb0:	fb09 a515 	mls	r5, r9, r5, sl
 8001cb4:	00ed      	lsls	r5, r5, #3
 8001cb6:	3532      	adds	r5, #50	; 0x32
 8001cb8:	fba7 3505 	umull	r3, r5, r7, r5
 8001cbc:	096d      	lsrs	r5, r5, #5
 8001cbe:	006d      	lsls	r5, r5, #1
 8001cc0:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001cc4:	4435      	add	r5, r6
 8001cc6:	f7ff fcf7 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001cca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cd2:	6866      	ldr	r6, [r4, #4]
 8001cd4:	0076      	lsls	r6, r6, #1
 8001cd6:	fbb0 f6f6 	udiv	r6, r0, r6
 8001cda:	f7ff fced 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001cde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ce2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ce6:	6863      	ldr	r3, [r4, #4]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	fba7 2303 	umull	r2, r3, r7, r3
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	fb09 6913 	mls	r9, r9, r3, r6
 8001cf8:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001cfc:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001d00:	fba7 3709 	umull	r3, r7, r7, r9
 8001d04:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001d08:	442f      	add	r7, r5
 8001d0a:	f8c8 7008 	str.w	r7, [r8, #8]
 8001d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d12:	f7ff fcd1 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001d16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d1e:	6865      	ldr	r5, [r4, #4]
 8001d20:	00ad      	lsls	r5, r5, #2
 8001d22:	fbb0 f5f5 	udiv	r5, r0, r5
 8001d26:	4f28      	ldr	r7, [pc, #160]	; (8001dc8 <UART_SetConfig+0x340>)
 8001d28:	fba7 3505 	umull	r3, r5, r7, r5
 8001d2c:	096d      	lsrs	r5, r5, #5
 8001d2e:	012e      	lsls	r6, r5, #4
 8001d30:	f7ff fcc2 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001d34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d3c:	6865      	ldr	r5, [r4, #4]
 8001d3e:	00ad      	lsls	r5, r5, #2
 8001d40:	fbb0 faf5 	udiv	sl, r0, r5
 8001d44:	f7ff fcb8 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001d48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d50:	6865      	ldr	r5, [r4, #4]
 8001d52:	00ad      	lsls	r5, r5, #2
 8001d54:	fbb0 f5f5 	udiv	r5, r0, r5
 8001d58:	fba7 3505 	umull	r3, r5, r7, r5
 8001d5c:	096d      	lsrs	r5, r5, #5
 8001d5e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d62:	fb09 a515 	mls	r5, r9, r5, sl
 8001d66:	012d      	lsls	r5, r5, #4
 8001d68:	3532      	adds	r5, #50	; 0x32
 8001d6a:	fba7 3505 	umull	r3, r5, r7, r5
 8001d6e:	096d      	lsrs	r5, r5, #5
 8001d70:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001d74:	4435      	add	r5, r6
 8001d76:	f7ff fc9f 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001d7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d82:	6866      	ldr	r6, [r4, #4]
 8001d84:	00b6      	lsls	r6, r6, #2
 8001d86:	fbb0 f6f6 	udiv	r6, r0, r6
 8001d8a:	f7ff fc95 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001d8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d96:	6863      	ldr	r3, [r4, #4]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9e:	fba7 2303 	umull	r2, r3, r7, r3
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	fb09 6913 	mls	r9, r9, r3, r6
 8001da8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001dac:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001db0:	fba7 3709 	umull	r3, r7, r7, r9
 8001db4:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001db8:	442f      	add	r7, r5
 8001dba:	f8c8 7008 	str.w	r7, [r8, #8]
 8001dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40011000 	.word	0x40011000
 8001dc8:	51eb851f 	.word	0x51eb851f

08001dcc <HAL_UART_Init>:
  if(huart == NULL)
 8001dcc:	b358      	cbz	r0, 8001e26 <HAL_UART_Init+0x5a>
{
 8001dce:	b510      	push	{r4, lr}
 8001dd0:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8001dd2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001dd6:	b30b      	cbz	r3, 8001e1c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001dd8:	2324      	movs	r3, #36	; 0x24
 8001dda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001dde:	6822      	ldr	r2, [r4, #0]
 8001de0:	68d3      	ldr	r3, [r2, #12]
 8001de2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001de6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001de8:	4620      	mov	r0, r4
 8001dea:	f7ff fe4d 	bl	8001a88 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dee:	6822      	ldr	r2, [r4, #0]
 8001df0:	6913      	ldr	r3, [r2, #16]
 8001df2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001df6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001df8:	6822      	ldr	r2, [r4, #0]
 8001dfa:	6953      	ldr	r3, [r2, #20]
 8001dfc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001e00:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	68d3      	ldr	r3, [r2, #12]
 8001e06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e0a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001e10:	2320      	movs	r3, #32
 8001e12:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001e16:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001e1a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001e1c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001e20:	f00a fd54 	bl	800c8cc <HAL_UART_MspInit>
 8001e24:	e7d8      	b.n	8001dd8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
 8001e28:	4770      	bx	lr

08001e2a <HAL_UART_TxCpltCallback>:
{
 8001e2a:	4770      	bx	lr

08001e2c <UART_EndTransmit_IT>:
{
 8001e2c:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e2e:	6801      	ldr	r1, [r0, #0]
 8001e30:	68cb      	ldr	r3, [r1, #12]
 8001e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e36:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001e3e:	f7ff fff4 	bl	8001e2a <HAL_UART_TxCpltCallback>
}
 8001e42:	2000      	movs	r0, #0
 8001e44:	bd08      	pop	{r3, pc}

08001e46 <HAL_UART_RxCpltCallback>:
{
 8001e46:	4770      	bx	lr

08001e48 <UART_Receive_IT>:
{
 8001e48:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001e4a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b22      	cmp	r3, #34	; 0x22
 8001e52:	d001      	beq.n	8001e58 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 8001e54:	2002      	movs	r0, #2
 8001e56:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e58:	6883      	ldr	r3, [r0, #8]
 8001e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5e:	d00f      	beq.n	8001e80 <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e60:	6903      	ldr	r3, [r0, #16]
 8001e62:	bb0b      	cbnz	r3, 8001ea8 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e64:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	6282      	str	r2, [r0, #40]	; 0x28
 8001e6a:	6802      	ldr	r2, [r0, #0]
 8001e6c:	6852      	ldr	r2, [r2, #4]
 8001e6e:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8001e70:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001e7a:	b1f3      	cbz	r3, 8001eba <UART_Receive_IT+0x72>
    return HAL_OK;
 8001e7c:	2000      	movs	r0, #0
}
 8001e7e:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001e80:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e82:	6903      	ldr	r3, [r0, #16]
 8001e84:	b943      	cbnz	r3, 8001e98 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e86:	6803      	ldr	r3, [r0, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e8e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8001e90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e92:	3302      	adds	r3, #2
 8001e94:	6283      	str	r3, [r0, #40]	; 0x28
 8001e96:	e7eb      	b.n	8001e70 <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e98:	6803      	ldr	r3, [r0, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8001ea0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	6283      	str	r3, [r0, #40]	; 0x28
 8001ea6:	e7e3      	b.n	8001e70 <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ea8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001eaa:	1c53      	adds	r3, r2, #1
 8001eac:	6283      	str	r3, [r0, #40]	; 0x28
 8001eae:	6803      	ldr	r3, [r0, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eb6:	7013      	strb	r3, [r2, #0]
 8001eb8:	e7da      	b.n	8001e70 <UART_Receive_IT+0x28>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001eba:	6802      	ldr	r2, [r0, #0]
 8001ebc:	68d3      	ldr	r3, [r2, #12]
 8001ebe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001ec2:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec4:	6802      	ldr	r2, [r0, #0]
 8001ec6:	6953      	ldr	r3, [r2, #20]
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001ed4:	f7ff ffb7 	bl	8001e46 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001ed8:	2000      	movs	r0, #0
 8001eda:	bd08      	pop	{r3, pc}

08001edc <HAL_UART_ErrorCallback>:
{
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_UART_IRQHandler>:
{
 8001ee0:	b510      	push	{r4, lr}
 8001ee2:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ee4:	6802      	ldr	r2, [r0, #0]
 8001ee6:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ee8:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001eea:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8001eec:	f013 000f 	ands.w	r0, r3, #15
 8001ef0:	d105      	bne.n	8001efe <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ef2:	f013 0f20 	tst.w	r3, #32
 8001ef6:	d002      	beq.n	8001efe <HAL_UART_IRQHandler+0x1e>
 8001ef8:	f011 0f20 	tst.w	r1, #32
 8001efc:	d153      	bne.n	8001fa6 <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d067      	beq.n	8001fd2 <HAL_UART_IRQHandler+0xf2>
 8001f02:	f012 0201 	ands.w	r2, r2, #1
 8001f06:	d102      	bne.n	8001f0e <HAL_UART_IRQHandler+0x2e>
 8001f08:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001f0c:	d061      	beq.n	8001fd2 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f0e:	f013 0f01 	tst.w	r3, #1
 8001f12:	d006      	beq.n	8001f22 <HAL_UART_IRQHandler+0x42>
 8001f14:	f411 7f80 	tst.w	r1, #256	; 0x100
 8001f18:	d003      	beq.n	8001f22 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f1a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001f1c:	f040 0001 	orr.w	r0, r0, #1
 8001f20:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f22:	f013 0f04 	tst.w	r3, #4
 8001f26:	d004      	beq.n	8001f32 <HAL_UART_IRQHandler+0x52>
 8001f28:	b11a      	cbz	r2, 8001f32 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001f2c:	f040 0002 	orr.w	r0, r0, #2
 8001f30:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f32:	f013 0f02 	tst.w	r3, #2
 8001f36:	d004      	beq.n	8001f42 <HAL_UART_IRQHandler+0x62>
 8001f38:	b11a      	cbz	r2, 8001f42 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f3a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001f3c:	f040 0004 	orr.w	r0, r0, #4
 8001f40:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f42:	f013 0f08 	tst.w	r3, #8
 8001f46:	d004      	beq.n	8001f52 <HAL_UART_IRQHandler+0x72>
 8001f48:	b11a      	cbz	r2, 8001f52 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f4c:	f042 0208 	orr.w	r2, r2, #8
 8001f50:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f52:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f54:	2a00      	cmp	r2, #0
 8001f56:	d048      	beq.n	8001fea <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f58:	f013 0f20 	tst.w	r3, #32
 8001f5c:	d002      	beq.n	8001f64 <HAL_UART_IRQHandler+0x84>
 8001f5e:	f011 0f20 	tst.w	r1, #32
 8001f62:	d124      	bne.n	8001fae <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f6c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001f6e:	f012 0f08 	tst.w	r2, #8
 8001f72:	d100      	bne.n	8001f76 <HAL_UART_IRQHandler+0x96>
 8001f74:	b33b      	cbz	r3, 8001fc6 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8001f76:	4620      	mov	r0, r4
 8001f78:	f7ff fd43 	bl	8001a02 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001f84:	d01b      	beq.n	8001fbe <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f8c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001f8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f90:	b18b      	cbz	r3, 8001fb6 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f92:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <HAL_UART_IRQHandler+0x11c>)
 8001f94:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f96:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001f98:	f7fe fb44 	bl	8000624 <HAL_DMA_Abort_IT>
 8001f9c:	b328      	cbz	r0, 8001fea <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001fa0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001fa2:	4798      	blx	r3
 8001fa4:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f7ff ff4e 	bl	8001e48 <UART_Receive_IT>
      return;
 8001fac:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7ff ff4a 	bl	8001e48 <UART_Receive_IT>
 8001fb4:	e7d6      	b.n	8001f64 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f7ff ff90 	bl	8001edc <HAL_UART_ErrorCallback>
 8001fbc:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f7ff ff8c 	bl	8001edc <HAL_UART_ErrorCallback>
 8001fc4:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f7ff ff88 	bl	8001edc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001fd0:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fd2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001fd6:	d002      	beq.n	8001fde <HAL_UART_IRQHandler+0xfe>
 8001fd8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001fdc:	d106      	bne.n	8001fec <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fde:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001fe2:	d002      	beq.n	8001fea <HAL_UART_IRQHandler+0x10a>
 8001fe4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001fe8:	d104      	bne.n	8001ff4 <HAL_UART_IRQHandler+0x114>
 8001fea:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8001fec:	4620      	mov	r0, r4
 8001fee:	f7ff fd16 	bl	8001a1e <UART_Transmit_IT>
    return;
 8001ff2:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff ff19 	bl	8001e2c <UART_EndTransmit_IT>
    return;
 8001ffa:	e7f6      	b.n	8001fea <HAL_UART_IRQHandler+0x10a>
 8001ffc:	08002001 	.word	0x08002001

08002000 <UART_DMAAbortOnError>:
{
 8002000:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002002:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002008:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800200a:	f7ff ff67 	bl	8001edc <HAL_UART_ErrorCallback>
 800200e:	bd08      	pop	{r3, pc}

08002010 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8002010:	2884      	cmp	r0, #132	; 0x84
 8002012:	d001      	beq.n	8002018 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8002014:	3003      	adds	r0, #3
 8002016:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002018:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800201a:	4770      	bx	lr

0800201c <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800201c:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8002020:	3000      	adds	r0, #0
 8002022:	bf18      	it	ne
 8002024:	2001      	movne	r0, #1
 8002026:	4770      	bx	lr

08002028 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002028:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800202a:	f001 fa6b 	bl	8003504 <vTaskStartScheduler>
  
  return osOK;
}
 800202e:	2000      	movs	r0, #0
 8002030:	bd08      	pop	{r3, pc}

08002032 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002032:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8002034:	f7ff fff2 	bl	800201c <inHandlerMode>
 8002038:	b910      	cbnz	r0, 8002040 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 800203a:	f001 faa9 	bl	8003590 <xTaskGetTickCount>
  }
}
 800203e:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 8002040:	f001 faac 	bl	800359c <xTaskGetTickCountFromISR>
 8002044:	bd08      	pop	{r3, pc}

08002046 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002048:	b085      	sub	sp, #20
 800204a:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800204c:	6844      	ldr	r4, [r0, #4]
 800204e:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002050:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002052:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002056:	f7ff ffdb 	bl	8002010 <makeFreeRtosPriority>
 800205a:	ab03      	add	r3, sp, #12
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	9000      	str	r0, [sp, #0]
 8002060:	463b      	mov	r3, r7
 8002062:	b2b2      	uxth	r2, r6
 8002064:	4629      	mov	r1, r5
 8002066:	4620      	mov	r0, r4
 8002068:	f001 fa1a 	bl	80034a0 <xTaskCreate>
 800206c:	2801      	cmp	r0, #1
 800206e:	d102      	bne.n	8002076 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002070:	9803      	ldr	r0, [sp, #12]
}
 8002072:	b005      	add	sp, #20
 8002074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8002076:	2000      	movs	r0, #0
 8002078:	e7fb      	b.n	8002072 <osThreadCreate+0x2c>

0800207a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800207a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800207c:	4603      	mov	r3, r0
 800207e:	b900      	cbnz	r0, 8002082 <osDelay+0x8>
 8002080:	2301      	movs	r3, #1
 8002082:	4618      	mov	r0, r3
 8002084:	f001 fba0 	bl	80037c8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002088:	2000      	movs	r0, #0
 800208a:	bd08      	pop	{r3, pc}

0800208c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800208c:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800208e:	2001      	movs	r0, #1
 8002090:	f000 fe7c 	bl	8002d8c <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8002094:	bd08      	pop	{r3, pc}
	...

08002098 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002098:	b530      	push	{r4, r5, lr}
 800209a:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800209c:	2300      	movs	r3, #0
 800209e:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80020a0:	b360      	cbz	r0, 80020fc <osMutexWait+0x64>
 80020a2:	460c      	mov	r4, r1
 80020a4:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 80020a6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80020aa:	d00d      	beq.n	80020c8 <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 80020ac:	b901      	cbnz	r1, 80020b0 <osMutexWait+0x18>
  ticks = 0;
 80020ae:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80020b0:	f7ff ffb4 	bl	800201c <inHandlerMode>
 80020b4:	b1b8      	cbz	r0, 80020e6 <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80020b6:	aa01      	add	r2, sp, #4
 80020b8:	2100      	movs	r1, #0
 80020ba:	4628      	mov	r0, r5
 80020bc:	f001 f816 	bl	80030ec <xQueueReceiveFromISR>
 80020c0:	2801      	cmp	r0, #1
 80020c2:	d004      	beq.n	80020ce <osMutexWait+0x36>
      return osErrorOS;
 80020c4:	20ff      	movs	r0, #255	; 0xff
 80020c6:	e017      	b.n	80020f8 <osMutexWait+0x60>
    ticks = portMAX_DELAY;
 80020c8:	f04f 34ff 	mov.w	r4, #4294967295
 80020cc:	e7f0      	b.n	80020b0 <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80020ce:	9b01      	ldr	r3, [sp, #4]
 80020d0:	b1b3      	cbz	r3, 8002100 <osMutexWait+0x68>
 80020d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <osMutexWait+0x70>)
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80020e2:	2000      	movs	r0, #0
 80020e4:	e008      	b.n	80020f8 <osMutexWait+0x60>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80020e6:	2300      	movs	r3, #0
 80020e8:	4622      	mov	r2, r4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4628      	mov	r0, r5
 80020ee:	f000 ff25 	bl	8002f3c <xQueueGenericReceive>
 80020f2:	2801      	cmp	r0, #1
 80020f4:	d006      	beq.n	8002104 <osMutexWait+0x6c>
    return osErrorOS;
 80020f6:	20ff      	movs	r0, #255	; 0xff
}
 80020f8:	b003      	add	sp, #12
 80020fa:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 80020fc:	2080      	movs	r0, #128	; 0x80
 80020fe:	e7fb      	b.n	80020f8 <osMutexWait+0x60>
  return osOK;
 8002100:	2000      	movs	r0, #0
 8002102:	e7f9      	b.n	80020f8 <osMutexWait+0x60>
 8002104:	2000      	movs	r0, #0
 8002106:	e7f7      	b.n	80020f8 <osMutexWait+0x60>
 8002108:	e000ed04 	.word	0xe000ed04

0800210c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800210c:	b510      	push	{r4, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002112:	2300      	movs	r3, #0
 8002114:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 8002116:	f7ff ff81 	bl	800201c <inHandlerMode>
 800211a:	b1a0      	cbz	r0, 8002146 <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800211c:	a901      	add	r1, sp, #4
 800211e:	4620      	mov	r0, r4
 8002120:	f000 feae 	bl	8002e80 <xQueueGiveFromISR>
 8002124:	2801      	cmp	r0, #1
 8002126:	d002      	beq.n	800212e <osMutexRelease+0x22>
      return osErrorOS;
 8002128:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800212a:	b002      	add	sp, #8
 800212c:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800212e:	9b01      	ldr	r3, [sp, #4]
 8002130:	b1ab      	cbz	r3, 800215e <osMutexRelease+0x52>
 8002132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <osMutexRelease+0x58>)
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f3bf 8f4f 	dsb	sy
 800213e:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002142:	2000      	movs	r0, #0
 8002144:	e7f1      	b.n	800212a <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002146:	2300      	movs	r3, #0
 8002148:	461a      	mov	r2, r3
 800214a:	4619      	mov	r1, r3
 800214c:	4620      	mov	r0, r4
 800214e:	f000 fd4d 	bl	8002bec <xQueueGenericSend>
 8002152:	2801      	cmp	r0, #1
 8002154:	d001      	beq.n	800215a <osMutexRelease+0x4e>
    result = osErrorOS;
 8002156:	20ff      	movs	r0, #255	; 0xff
 8002158:	e7e7      	b.n	800212a <osMutexRelease+0x1e>
  osStatus result = osOK;
 800215a:	2000      	movs	r0, #0
 800215c:	e7e5      	b.n	800212a <osMutexRelease+0x1e>
 800215e:	2000      	movs	r0, #0
 8002160:	e7e3      	b.n	800212a <osMutexRelease+0x1e>
 8002162:	bf00      	nop
 8002164:	e000ed04 	.word	0xe000ed04

08002168 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002168:	b510      	push	{r4, lr}
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800216a:	2901      	cmp	r1, #1
 800216c:	d10d      	bne.n	800218a <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 800216e:	2203      	movs	r2, #3
 8002170:	2100      	movs	r1, #0
 8002172:	2001      	movs	r0, #1
 8002174:	f000 fd16 	bl	8002ba4 <xQueueGenericCreate>
 8002178:	4604      	mov	r4, r0
 800217a:	b120      	cbz	r0, 8002186 <osSemaphoreCreate+0x1e>
 800217c:	2300      	movs	r3, #0
 800217e:	461a      	mov	r2, r3
 8002180:	4619      	mov	r1, r3
 8002182:	f000 fd33 	bl	8002bec <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8002186:	4620      	mov	r0, r4
 8002188:	bd10      	pop	{r4, pc}
    return NULL;
 800218a:	2400      	movs	r4, #0
 800218c:	e7fb      	b.n	8002186 <osSemaphoreCreate+0x1e>
	...

08002190 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002190:	b530      	push	{r4, r5, lr}
 8002192:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002194:	2300      	movs	r3, #0
 8002196:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8002198:	b360      	cbz	r0, 80021f4 <osSemaphoreWait+0x64>
 800219a:	460c      	mov	r4, r1
 800219c:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800219e:	f1b1 3fff 	cmp.w	r1, #4294967295
 80021a2:	d00d      	beq.n	80021c0 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 80021a4:	b901      	cbnz	r1, 80021a8 <osSemaphoreWait+0x18>
  ticks = 0;
 80021a6:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80021a8:	f7ff ff38 	bl	800201c <inHandlerMode>
 80021ac:	b1b8      	cbz	r0, 80021de <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80021ae:	aa01      	add	r2, sp, #4
 80021b0:	2100      	movs	r1, #0
 80021b2:	4628      	mov	r0, r5
 80021b4:	f000 ff9a 	bl	80030ec <xQueueReceiveFromISR>
 80021b8:	2801      	cmp	r0, #1
 80021ba:	d004      	beq.n	80021c6 <osSemaphoreWait+0x36>
      return osErrorOS;
 80021bc:	20ff      	movs	r0, #255	; 0xff
 80021be:	e017      	b.n	80021f0 <osSemaphoreWait+0x60>
    ticks = portMAX_DELAY;
 80021c0:	f04f 34ff 	mov.w	r4, #4294967295
 80021c4:	e7f0      	b.n	80021a8 <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80021c6:	9b01      	ldr	r3, [sp, #4]
 80021c8:	b1b3      	cbz	r3, 80021f8 <osSemaphoreWait+0x68>
 80021ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <osSemaphoreWait+0x70>)
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80021da:	2000      	movs	r0, #0
 80021dc:	e008      	b.n	80021f0 <osSemaphoreWait+0x60>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80021de:	2300      	movs	r3, #0
 80021e0:	4622      	mov	r2, r4
 80021e2:	4619      	mov	r1, r3
 80021e4:	4628      	mov	r0, r5
 80021e6:	f000 fea9 	bl	8002f3c <xQueueGenericReceive>
 80021ea:	2801      	cmp	r0, #1
 80021ec:	d006      	beq.n	80021fc <osSemaphoreWait+0x6c>
    return osErrorOS;
 80021ee:	20ff      	movs	r0, #255	; 0xff
}
 80021f0:	b003      	add	sp, #12
 80021f2:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 80021f4:	2080      	movs	r0, #128	; 0x80
 80021f6:	e7fb      	b.n	80021f0 <osSemaphoreWait+0x60>
  return osOK;
 80021f8:	2000      	movs	r0, #0
 80021fa:	e7f9      	b.n	80021f0 <osSemaphoreWait+0x60>
 80021fc:	2000      	movs	r0, #0
 80021fe:	e7f7      	b.n	80021f0 <osSemaphoreWait+0x60>
 8002200:	e000ed04 	.word	0xe000ed04

08002204 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002204:	b510      	push	{r4, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800220a:	2300      	movs	r3, #0
 800220c:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 800220e:	f7ff ff05 	bl	800201c <inHandlerMode>
 8002212:	b1a0      	cbz	r0, 800223e <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002214:	a901      	add	r1, sp, #4
 8002216:	4620      	mov	r0, r4
 8002218:	f000 fe32 	bl	8002e80 <xQueueGiveFromISR>
 800221c:	2801      	cmp	r0, #1
 800221e:	d002      	beq.n	8002226 <osSemaphoreRelease+0x22>
      return osErrorOS;
 8002220:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 8002222:	b002      	add	sp, #8
 8002224:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002226:	9b01      	ldr	r3, [sp, #4]
 8002228:	b1ab      	cbz	r3, 8002256 <osSemaphoreRelease+0x52>
 800222a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <osSemaphoreRelease+0x58>)
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	f3bf 8f4f 	dsb	sy
 8002236:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800223a:	2000      	movs	r0, #0
 800223c:	e7f1      	b.n	8002222 <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800223e:	2300      	movs	r3, #0
 8002240:	461a      	mov	r2, r3
 8002242:	4619      	mov	r1, r3
 8002244:	4620      	mov	r0, r4
 8002246:	f000 fcd1 	bl	8002bec <xQueueGenericSend>
 800224a:	2801      	cmp	r0, #1
 800224c:	d001      	beq.n	8002252 <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 800224e:	20ff      	movs	r0, #255	; 0xff
 8002250:	e7e7      	b.n	8002222 <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 8002252:	2000      	movs	r0, #0
 8002254:	e7e5      	b.n	8002222 <osSemaphoreRelease+0x1e>
 8002256:	2000      	movs	r0, #0
 8002258:	e7e3      	b.n	8002222 <osSemaphoreRelease+0x1e>
 800225a:	bf00      	nop
 800225c:	e000ed04 	.word	0xe000ed04

08002260 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8002260:	b510      	push	{r4, lr}
 8002262:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8002264:	f7ff feda 	bl	800201c <inHandlerMode>
 8002268:	b108      	cbz	r0, 800226e <osSemaphoreDelete+0xe>
    return osErrorISR;
 800226a:	2082      	movs	r0, #130	; 0x82
  }

  vSemaphoreDelete(semaphore_id);

  return osOK; 
}
 800226c:	bd10      	pop	{r4, pc}
  vSemaphoreDelete(semaphore_id);
 800226e:	4620      	mov	r0, r4
 8002270:	f000 ffcc 	bl	800320c <vQueueDelete>
  return osOK; 
 8002274:	2000      	movs	r0, #0
 8002276:	bd10      	pop	{r4, pc}

08002278 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002278:	b508      	push	{r3, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800227a:	2200      	movs	r2, #0
 800227c:	6841      	ldr	r1, [r0, #4]
 800227e:	6800      	ldr	r0, [r0, #0]
 8002280:	f000 fc90 	bl	8002ba4 <xQueueGenericCreate>
#endif
}
 8002284:	bd08      	pop	{r3, pc}
	...

08002288 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002288:	b530      	push	{r4, r5, lr}
 800228a:	b085      	sub	sp, #20
 800228c:	4604      	mov	r4, r0
 800228e:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002290:	2300      	movs	r3, #0
 8002292:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8002294:	4615      	mov	r5, r2
 8002296:	b902      	cbnz	r2, 800229a <osMessagePut+0x12>
    ticks = 1;
 8002298:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 800229a:	f7ff febf 	bl	800201c <inHandlerMode>
 800229e:	b1a8      	cbz	r0, 80022cc <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80022a0:	2300      	movs	r3, #0
 80022a2:	aa03      	add	r2, sp, #12
 80022a4:	a901      	add	r1, sp, #4
 80022a6:	4620      	mov	r0, r4
 80022a8:	f000 fd7b 	bl	8002da2 <xQueueGenericSendFromISR>
 80022ac:	2801      	cmp	r0, #1
 80022ae:	d001      	beq.n	80022b4 <osMessagePut+0x2c>
      return osErrorOS;
 80022b0:	20ff      	movs	r0, #255	; 0xff
 80022b2:	e014      	b.n	80022de <osMessagePut+0x56>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80022b4:	9b03      	ldr	r3, [sp, #12]
 80022b6:	b1a3      	cbz	r3, 80022e2 <osMessagePut+0x5a>
 80022b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <osMessagePut+0x64>)
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80022c8:	2000      	movs	r0, #0
 80022ca:	e008      	b.n	80022de <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80022cc:	2300      	movs	r3, #0
 80022ce:	462a      	mov	r2, r5
 80022d0:	a901      	add	r1, sp, #4
 80022d2:	4620      	mov	r0, r4
 80022d4:	f000 fc8a 	bl	8002bec <xQueueGenericSend>
 80022d8:	2801      	cmp	r0, #1
 80022da:	d004      	beq.n	80022e6 <osMessagePut+0x5e>
      return osErrorOS;
 80022dc:	20ff      	movs	r0, #255	; 0xff
}
 80022de:	b005      	add	sp, #20
 80022e0:	bd30      	pop	{r4, r5, pc}
  return osOK;
 80022e2:	2000      	movs	r0, #0
 80022e4:	e7fb      	b.n	80022de <osMessagePut+0x56>
 80022e6:	2000      	movs	r0, #0
 80022e8:	e7f9      	b.n	80022de <osMessagePut+0x56>
 80022ea:	bf00      	nop
 80022ec:	e000ed04 	.word	0xe000ed04

080022f0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80022f0:	b570      	push	{r4, r5, r6, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80022f6:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 80022fc:	b1f9      	cbz	r1, 800233e <osMessageGet+0x4e>
 80022fe:	460d      	mov	r5, r1
 8002300:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8002302:	2300      	movs	r3, #0
 8002304:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8002306:	f1b2 3fff 	cmp.w	r2, #4294967295
 800230a:	d021      	beq.n	8002350 <osMessageGet+0x60>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 800230c:	b902      	cbnz	r2, 8002310 <osMessageGet+0x20>
  ticks = 0;
 800230e:	461e      	mov	r6, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002310:	f7ff fe84 	bl	800201c <inHandlerMode>
 8002314:	b310      	cbz	r0, 800235c <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002316:	aa03      	add	r2, sp, #12
 8002318:	a901      	add	r1, sp, #4
 800231a:	4628      	mov	r0, r5
 800231c:	f000 fee6 	bl	80030ec <xQueueReceiveFromISR>
 8002320:	2801      	cmp	r0, #1
 8002322:	d018      	beq.n	8002356 <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8002324:	2300      	movs	r3, #0
 8002326:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002328:	9b03      	ldr	r3, [sp, #12]
 800232a:	b313      	cbz	r3, 8002372 <osMessageGet+0x82>
 800232c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <osMessageGet+0x9c>)
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	e019      	b.n	8002372 <osMessageGet+0x82>
    event.status = osErrorParameter;
 800233e:	ab04      	add	r3, sp, #16
 8002340:	2280      	movs	r2, #128	; 0x80
 8002342:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8002346:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800234a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800234e:	e014      	b.n	800237a <osMessageGet+0x8a>
    ticks = portMAX_DELAY;
 8002350:	f04f 36ff 	mov.w	r6, #4294967295
 8002354:	e7dc      	b.n	8002310 <osMessageGet+0x20>
      event.status = osEventMessage;
 8002356:	2310      	movs	r3, #16
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	e7e5      	b.n	8002328 <osMessageGet+0x38>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800235c:	2300      	movs	r3, #0
 800235e:	4632      	mov	r2, r6
 8002360:	a901      	add	r1, sp, #4
 8002362:	4628      	mov	r0, r5
 8002364:	f000 fdea 	bl	8002f3c <xQueueGenericReceive>
 8002368:	2801      	cmp	r0, #1
 800236a:	d009      	beq.n	8002380 <osMessageGet+0x90>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800236c:	b95e      	cbnz	r6, 8002386 <osMessageGet+0x96>
 800236e:	2300      	movs	r3, #0
 8002370:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 8002372:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 8002376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800237a:	4620      	mov	r0, r4
 800237c:	b004      	add	sp, #16
 800237e:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8002380:	2310      	movs	r3, #16
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	e7f5      	b.n	8002372 <osMessageGet+0x82>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002386:	2340      	movs	r3, #64	; 0x40
 8002388:	e7f2      	b.n	8002370 <osMessageGet+0x80>
 800238a:	bf00      	nop
 800238c:	e000ed04 	.word	0xe000ed04

08002390 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8002390:	b510      	push	{r4, lr}
 8002392:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8002394:	f7ff fe42 	bl	800201c <inHandlerMode>
 8002398:	b918      	cbnz	r0, 80023a2 <osMessageWaiting+0x12>
    return uxQueueMessagesWaitingFromISR(queue_id);
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800239a:	4620      	mov	r0, r4
 800239c:	f000 ff01 	bl	80031a2 <uxQueueMessagesWaiting>
  }
}
 80023a0:	bd10      	pop	{r4, pc}
    return uxQueueMessagesWaitingFromISR(queue_id);
 80023a2:	4620      	mov	r0, r4
 80023a4:	f000 ff10 	bl	80031c8 <uxQueueMessagesWaitingFromISR>
 80023a8:	bd10      	pop	{r4, pc}

080023aa <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80023aa:	b510      	push	{r4, lr}
 80023ac:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 80023ae:	f7ff fe35 	bl	800201c <inHandlerMode>
 80023b2:	b108      	cbz	r0, 80023b8 <osMessageDelete+0xe>
    return osErrorISR;
 80023b4:	2082      	movs	r0, #130	; 0x82
  }

  vQueueDelete(queue_id);

  return osOK; 
}
 80023b6:	bd10      	pop	{r4, pc}
  vQueueDelete(queue_id);
 80023b8:	4620      	mov	r0, r4
 80023ba:	f000 ff27 	bl	800320c <vQueueDelete>
  return osOK; 
 80023be:	2000      	movs	r0, #0
 80023c0:	bd10      	pop	{r4, pc}

080023c2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023c2:	f100 0308 	add.w	r3, r0, #8
 80023c6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023c8:	f04f 32ff 	mov.w	r2, #4294967295
 80023cc:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ce:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	6003      	str	r3, [r0, #0]
 80023d6:	4770      	bx	lr

080023d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	6103      	str	r3, [r0, #16]
 80023dc:	4770      	bx	lr

080023de <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80023de:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023e0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023ea:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023ec:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80023ee:	6803      	ldr	r3, [r0, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	6003      	str	r3, [r0, #0]
 80023f4:	4770      	bx	lr

080023f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023f6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023f8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023fa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80023fe:	d002      	beq.n	8002406 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002400:	f100 0208 	add.w	r2, r0, #8
 8002404:	e002      	b.n	800240c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8002406:	6902      	ldr	r2, [r0, #16]
 8002408:	e004      	b.n	8002414 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800240a:	461a      	mov	r2, r3
 800240c:	6853      	ldr	r3, [r2, #4]
 800240e:	681c      	ldr	r4, [r3, #0]
 8002410:	42a5      	cmp	r5, r4
 8002412:	d2fa      	bcs.n	800240a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002414:	6853      	ldr	r3, [r2, #4]
 8002416:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002418:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800241a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800241c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800241e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002420:	6803      	ldr	r3, [r0, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	6003      	str	r3, [r0, #0]
}
 8002426:	bc30      	pop	{r4, r5}
 8002428:	4770      	bx	lr

0800242a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800242a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800242c:	6842      	ldr	r2, [r0, #4]
 800242e:	6881      	ldr	r1, [r0, #8]
 8002430:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002432:	6882      	ldr	r2, [r0, #8]
 8002434:	6841      	ldr	r1, [r0, #4]
 8002436:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4290      	cmp	r0, r2
 800243c:	d005      	beq.n	800244a <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800243e:	2200      	movs	r2, #0
 8002440:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	3801      	subs	r0, #1
 8002446:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002448:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800244a:	6882      	ldr	r2, [r0, #8]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	e7f6      	b.n	800243e <uxListRemove+0x14>

08002450 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <prvTaskExitError+0x30>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d008      	beq.n	800246c <prvTaskExitError+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245e:	f383 8811 	msr	BASEPRI, r3
 8002462:	f3bf 8f6f 	isb	sy
 8002466:	f3bf 8f4f 	dsb	sy
 800246a:	e7fe      	b.n	800246a <prvTaskExitError+0x1a>
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	e7fe      	b.n	800247c <prvTaskExitError+0x2c>
 800247e:	bf00      	nop
 8002480:	20000004 	.word	0x20000004

08002484 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002484:	4806      	ldr	r0, [pc, #24]	; (80024a0 <prvPortStartFirstTask+0x1c>)
 8002486:	6800      	ldr	r0, [r0, #0]
 8002488:	6800      	ldr	r0, [r0, #0]
 800248a:	f380 8808 	msr	MSP, r0
 800248e:	b662      	cpsie	i
 8002490:	b661      	cpsie	f
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	f3bf 8f6f 	isb	sy
 800249a:	df00      	svc	0
 800249c:	bf00      	nop
 800249e:	0000      	.short	0x0000
 80024a0:	e000ed08 	.word	0xe000ed08

080024a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80024a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80024b4 <vPortEnableVFP+0x10>
 80024a8:	6801      	ldr	r1, [r0, #0]
 80024aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80024ae:	6001      	str	r1, [r0, #0]
 80024b0:	4770      	bx	lr
 80024b2:	0000      	.short	0x0000
 80024b4:	e000ed88 	.word	0xe000ed88

080024b8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80024b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024bc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80024c0:	f021 0101 	bic.w	r1, r1, #1
 80024c4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <pxPortInitialiseStack+0x28>)
 80024ca:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80024ce:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80024d2:	f06f 0302 	mvn.w	r3, #2
 80024d6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80024da:	3844      	subs	r0, #68	; 0x44
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	08002451 	.word	0x08002451
	...

080024f0 <SVC_Handler>:
	__asm volatile (
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <pxCurrentTCBConst2>)
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	6808      	ldr	r0, [r1, #0]
 80024f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024fa:	f380 8809 	msr	PSP, r0
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f380 8811 	msr	BASEPRI, r0
 800250a:	4770      	bx	lr
 800250c:	f3af 8000 	nop.w

08002510 <pxCurrentTCBConst2>:
 8002510:	20003c50 	.word	0x20003c50

08002514 <vPortEnterCritical>:
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002524:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <vPortEnterCritical+0x3c>)
 8002526:	6813      	ldr	r3, [r2, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800252c:	2b01      	cmp	r3, #1
 800252e:	d10d      	bne.n	800254c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <vPortEnterCritical+0x40>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002538:	d008      	beq.n	800254c <vPortEnterCritical+0x38>
 800253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253e:	f383 8811 	msr	BASEPRI, r3
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	f3bf 8f4f 	dsb	sy
 800254a:	e7fe      	b.n	800254a <vPortEnterCritical+0x36>
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000004 	.word	0x20000004
 8002554:	e000ed04 	.word	0xe000ed04

08002558 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <vPortExitCritical+0x28>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	b943      	cbnz	r3, 8002570 <vPortExitCritical+0x18>
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	e7fe      	b.n	800256e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002570:	3b01      	subs	r3, #1
 8002572:	4a03      	ldr	r2, [pc, #12]	; (8002580 <vPortExitCritical+0x28>)
 8002574:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002576:	b90b      	cbnz	r3, 800257c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000004 	.word	0x20000004
	...

08002590 <PendSV_Handler>:
	__asm volatile
 8002590:	f3ef 8009 	mrs	r0, PSP
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <pxCurrentTCBConst>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	f01e 0f10 	tst.w	lr, #16
 80025a0:	bf08      	it	eq
 80025a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80025a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025aa:	6010      	str	r0, [r2, #0]
 80025ac:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80025b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80025b4:	f380 8811 	msr	BASEPRI, r0
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	f3bf 8f6f 	isb	sy
 80025c0:	f001 f96c 	bl	800389c <vTaskSwitchContext>
 80025c4:	f04f 0000 	mov.w	r0, #0
 80025c8:	f380 8811 	msr	BASEPRI, r0
 80025cc:	bc08      	pop	{r3}
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	6808      	ldr	r0, [r1, #0]
 80025d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d6:	f01e 0f10 	tst.w	lr, #16
 80025da:	bf08      	it	eq
 80025dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80025e0:	f380 8809 	msr	PSP, r0
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	f3af 8000 	nop.w

080025f0 <pxCurrentTCBConst>:
 80025f0:	20003c50 	.word	0x20003c50

080025f4 <SysTick_Handler>:
{
 80025f4:	b508      	push	{r3, lr}
	__asm volatile
 80025f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002606:	f000 ffd1 	bl	80035ac <xTaskIncrementTick>
 800260a:	b118      	cbz	r0, 8002614 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800260c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <SysTick_Handler+0x28>)
 8002612:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002614:	2300      	movs	r3, #0
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	bd08      	pop	{r3, pc}
 800261c:	e000ed04 	.word	0xe000ed04

08002620 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <vPortSetupTimerInterrupt+0x1c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a06      	ldr	r2, [pc, #24]	; (8002640 <vPortSetupTimerInterrupt+0x20>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	099b      	lsrs	r3, r3, #6
 800262c:	3b01      	subs	r3, #1
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <vPortSetupTimerInterrupt+0x24>)
 8002630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002632:	2207      	movs	r2, #7
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <vPortSetupTimerInterrupt+0x28>)
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000010 	.word	0x20000010
 8002640:	10624dd3 	.word	0x10624dd3
 8002644:	e000e014 	.word	0xe000e014
 8002648:	e000e010 	.word	0xe000e010

0800264c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800264c:	4b31      	ldr	r3, [pc, #196]	; (8002714 <xPortStartScheduler+0xc8>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b31      	ldr	r3, [pc, #196]	; (8002718 <xPortStartScheduler+0xcc>)
 8002652:	429a      	cmp	r2, r3
 8002654:	d01a      	beq.n	800268c <xPortStartScheduler+0x40>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002656:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <xPortStartScheduler+0xc8>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <xPortStartScheduler+0xd0>)
 800265c:	429a      	cmp	r2, r3
 800265e:	d01e      	beq.n	800269e <xPortStartScheduler+0x52>
{
 8002660:	b500      	push	{lr}
 8002662:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002664:	4b2e      	ldr	r3, [pc, #184]	; (8002720 <xPortStartScheduler+0xd4>)
 8002666:	781a      	ldrb	r2, [r3, #0]
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800266c:	22ff      	movs	r2, #255	; 0xff
 800266e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002678:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800267c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002680:	4a28      	ldr	r2, [pc, #160]	; (8002724 <xPortStartScheduler+0xd8>)
 8002682:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002684:	2207      	movs	r2, #7
 8002686:	4b28      	ldr	r3, [pc, #160]	; (8002728 <xPortStartScheduler+0xdc>)
 8002688:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800268a:	e01b      	b.n	80026c4 <xPortStartScheduler+0x78>
	__asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	e7fe      	b.n	800269c <xPortStartScheduler+0x50>
 800269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	e7fe      	b.n	80026ae <xPortStartScheduler+0x62>
			ulMaxPRIGROUPValue--;
 80026b0:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <xPortStartScheduler+0xdc>)
 80026b2:	6813      	ldr	r3, [r2, #0]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80026b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80026c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80026cc:	d1f0      	bne.n	80026b0 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80026ce:	4a16      	ldr	r2, [pc, #88]	; (8002728 <xPortStartScheduler+0xdc>)
 80026d0:	6813      	ldr	r3, [r2, #0]
 80026d2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80026d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026d8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80026da:	9b01      	ldr	r3, [sp, #4]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4a10      	ldr	r2, [pc, #64]	; (8002720 <xPortStartScheduler+0xd4>)
 80026e0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <xPortStartScheduler+0xe0>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80026ea:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80026f2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80026f4:	f7ff ff94 	bl	8002620 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80026f8:	2200      	movs	r2, #0
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <xPortStartScheduler+0xe4>)
 80026fc:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80026fe:	f7ff fed1 	bl	80024a4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002702:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <xPortStartScheduler+0xe8>)
 8002704:	6813      	ldr	r3, [r2, #0]
 8002706:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800270a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800270c:	f7ff feba 	bl	8002484 <prvPortStartFirstTask>
	prvTaskExitError();
 8002710:	f7ff fe9e 	bl	8002450 <prvTaskExitError>
 8002714:	e000ed00 	.word	0xe000ed00
 8002718:	410fc271 	.word	0x410fc271
 800271c:	410fc270 	.word	0x410fc270
 8002720:	e000e400 	.word	0xe000e400
 8002724:	20000030 	.word	0x20000030
 8002728:	20000034 	.word	0x20000034
 800272c:	e000ed20 	.word	0xe000ed20
 8002730:	20000004 	.word	0x20000004
 8002734:	e000ef34 	.word	0xe000ef34

08002738 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002738:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d90f      	bls.n	8002760 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002740:	4a10      	ldr	r2, [pc, #64]	; (8002784 <vPortValidateInterruptPriority+0x4c>)
 8002742:	5c9b      	ldrb	r3, [r3, r2]
 8002744:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002746:	4a10      	ldr	r2, [pc, #64]	; (8002788 <vPortValidateInterruptPriority+0x50>)
 8002748:	7812      	ldrb	r2, [r2, #0]
 800274a:	4293      	cmp	r3, r2
 800274c:	d208      	bcs.n	8002760 <vPortValidateInterruptPriority+0x28>
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	e7fe      	b.n	800275e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <vPortValidateInterruptPriority+0x54>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002768:	4a09      	ldr	r2, [pc, #36]	; (8002790 <vPortValidateInterruptPriority+0x58>)
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	4293      	cmp	r3, r2
 800276e:	d908      	bls.n	8002782 <vPortValidateInterruptPriority+0x4a>
 8002770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	e7fe      	b.n	8002780 <vPortValidateInterruptPriority+0x48>
 8002782:	4770      	bx	lr
 8002784:	e000e3f0 	.word	0xe000e3f0
 8002788:	20000030 	.word	0x20000030
 800278c:	e000ed0c 	.word	0xe000ed0c
 8002790:	20000034 	.word	0x20000034

08002794 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002794:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002796:	f012 0f07 	tst.w	r2, #7
 800279a:	d01e      	beq.n	80027da <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800279c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800279e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80027a2:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 80027a6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027a8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80027aa:	480e      	ldr	r0, [pc, #56]	; (80027e4 <prvHeapInit+0x50>)
 80027ac:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80027ae:	2100      	movs	r1, #0
 80027b0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80027b2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80027b4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80027b6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80027ba:	480b      	ldr	r0, [pc, #44]	; (80027e8 <prvHeapInit+0x54>)
 80027bc:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80027be:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80027c0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80027c2:	1a99      	subs	r1, r3, r2
 80027c4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80027c6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <prvHeapInit+0x58>)
 80027ca:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <prvHeapInit+0x5c>)
 80027ce:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80027d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80027d4:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <prvHeapInit+0x60>)
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80027de:	e7e4      	b.n	80027aa <prvHeapInit+0x16>
 80027e0:	2000003c 	.word	0x2000003c
 80027e4:	20003c48 	.word	0x20003c48
 80027e8:	20000038 	.word	0x20000038
 80027ec:	20003c44 	.word	0x20003c44
 80027f0:	20003c40 	.word	0x20003c40
 80027f4:	20003c3c 	.word	0x20003c3c

080027f8 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80027f8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <prvInsertBlockIntoFreeList+0x50>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4282      	cmp	r2, r0
 8002800:	d31b      	bcc.n	800283a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	185c      	adds	r4, r3, r1
 8002806:	42a0      	cmp	r0, r4
 8002808:	d103      	bne.n	8002812 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800280a:	6840      	ldr	r0, [r0, #4]
 800280c:	4401      	add	r1, r0
 800280e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002810:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002812:	6841      	ldr	r1, [r0, #4]
 8002814:	1844      	adds	r4, r0, r1
 8002816:	42a2      	cmp	r2, r4
 8002818:	d113      	bne.n	8002842 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800281a:	4c0c      	ldr	r4, [pc, #48]	; (800284c <prvInsertBlockIntoFreeList+0x54>)
 800281c:	6824      	ldr	r4, [r4, #0]
 800281e:	42a2      	cmp	r2, r4
 8002820:	d00d      	beq.n	800283e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002822:	6852      	ldr	r2, [r2, #4]
 8002824:	4411      	add	r1, r2
 8002826:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800282e:	4298      	cmp	r0, r3
 8002830:	d000      	beq.n	8002834 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002832:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002838:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800283a:	4613      	mov	r3, r2
 800283c:	e7de      	b.n	80027fc <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800283e:	6004      	str	r4, [r0, #0]
 8002840:	e7f5      	b.n	800282e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002842:	6002      	str	r2, [r0, #0]
 8002844:	e7f3      	b.n	800282e <prvInsertBlockIntoFreeList+0x36>
 8002846:	bf00      	nop
 8002848:	20003c48 	.word	0x20003c48
 800284c:	20000038 	.word	0x20000038

08002850 <pvPortMalloc>:
{
 8002850:	b570      	push	{r4, r5, r6, lr}
 8002852:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002854:	f000 fe94 	bl	8003580 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002858:	4b3a      	ldr	r3, [pc, #232]	; (8002944 <pvPortMalloc+0xf4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	b1bb      	cbz	r3, 800288e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800285e:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <pvPortMalloc+0xf8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	421c      	tst	r4, r3
 8002864:	d163      	bne.n	800292e <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8002866:	b1ac      	cbz	r4, 8002894 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8002868:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800286a:	f014 0f07 	tst.w	r4, #7
 800286e:	d011      	beq.n	8002894 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002870:	f024 0407 	bic.w	r4, r4, #7
 8002874:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002876:	f004 0307 	and.w	r3, r4, #7
 800287a:	b15b      	cbz	r3, 8002894 <pvPortMalloc+0x44>
 800287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	e7fe      	b.n	800288c <pvPortMalloc+0x3c>
			prvHeapInit();
 800288e:	f7ff ff81 	bl	8002794 <prvHeapInit>
 8002892:	e7e4      	b.n	800285e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002894:	2c00      	cmp	r4, #0
 8002896:	d04c      	beq.n	8002932 <pvPortMalloc+0xe2>
 8002898:	4b2c      	ldr	r3, [pc, #176]	; (800294c <pvPortMalloc+0xfc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	429c      	cmp	r4, r3
 800289e:	d84a      	bhi.n	8002936 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <pvPortMalloc+0x100>)
 80028a2:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028a4:	e001      	b.n	80028aa <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 80028a6:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80028a8:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028aa:	686a      	ldr	r2, [r5, #4]
 80028ac:	4294      	cmp	r4, r2
 80028ae:	d902      	bls.n	80028b6 <pvPortMalloc+0x66>
 80028b0:	682a      	ldr	r2, [r5, #0]
 80028b2:	2a00      	cmp	r2, #0
 80028b4:	d1f7      	bne.n	80028a6 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 80028b6:	4a23      	ldr	r2, [pc, #140]	; (8002944 <pvPortMalloc+0xf4>)
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	4295      	cmp	r5, r2
 80028bc:	d03d      	beq.n	800293a <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80028be:	681e      	ldr	r6, [r3, #0]
 80028c0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80028c2:	682a      	ldr	r2, [r5, #0]
 80028c4:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80028c6:	686b      	ldr	r3, [r5, #4]
 80028c8:	1b1b      	subs	r3, r3, r4
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d910      	bls.n	80028f0 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80028ce:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028d0:	f010 0f07 	tst.w	r0, #7
 80028d4:	d008      	beq.n	80028e8 <pvPortMalloc+0x98>
 80028d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	e7fe      	b.n	80028e6 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028e8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80028ea:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80028ec:	f7ff ff84 	bl	80027f8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028f0:	686a      	ldr	r2, [r5, #4]
 80028f2:	4916      	ldr	r1, [pc, #88]	; (800294c <pvPortMalloc+0xfc>)
 80028f4:	680b      	ldr	r3, [r1, #0]
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028fa:	4916      	ldr	r1, [pc, #88]	; (8002954 <pvPortMalloc+0x104>)
 80028fc:	6809      	ldr	r1, [r1, #0]
 80028fe:	428b      	cmp	r3, r1
 8002900:	d201      	bcs.n	8002906 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002902:	4914      	ldr	r1, [pc, #80]	; (8002954 <pvPortMalloc+0x104>)
 8002904:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <pvPortMalloc+0xf8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800290e:	2300      	movs	r3, #0
 8002910:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002912:	f000 fedb 	bl	80036cc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002916:	f016 0f07 	tst.w	r6, #7
 800291a:	d010      	beq.n	800293e <pvPortMalloc+0xee>
 800291c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002920:	f383 8811 	msr	BASEPRI, r3
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	e7fe      	b.n	800292c <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 800292e:	2600      	movs	r6, #0
 8002930:	e7ef      	b.n	8002912 <pvPortMalloc+0xc2>
 8002932:	2600      	movs	r6, #0
 8002934:	e7ed      	b.n	8002912 <pvPortMalloc+0xc2>
 8002936:	2600      	movs	r6, #0
 8002938:	e7eb      	b.n	8002912 <pvPortMalloc+0xc2>
 800293a:	2600      	movs	r6, #0
 800293c:	e7e9      	b.n	8002912 <pvPortMalloc+0xc2>
}
 800293e:	4630      	mov	r0, r6
 8002940:	bd70      	pop	{r4, r5, r6, pc}
 8002942:	bf00      	nop
 8002944:	20000038 	.word	0x20000038
 8002948:	20003c3c 	.word	0x20003c3c
 800294c:	20003c40 	.word	0x20003c40
 8002950:	20003c48 	.word	0x20003c48
 8002954:	20003c44 	.word	0x20003c44

08002958 <vPortFree>:
	if( pv != NULL )
 8002958:	b380      	cbz	r0, 80029bc <vPortFree+0x64>
{
 800295a:	b538      	push	{r3, r4, r5, lr}
 800295c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800295e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002962:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8002966:	4916      	ldr	r1, [pc, #88]	; (80029c0 <vPortFree+0x68>)
 8002968:	6809      	ldr	r1, [r1, #0]
 800296a:	420a      	tst	r2, r1
 800296c:	d108      	bne.n	8002980 <vPortFree+0x28>
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	e7fe      	b.n	800297e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002980:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8002984:	b140      	cbz	r0, 8002998 <vPortFree+0x40>
 8002986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	e7fe      	b.n	8002996 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002998:	ea22 0201 	bic.w	r2, r2, r1
 800299c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 80029a0:	f000 fdee 	bl	8003580 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80029a4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80029a8:	4a06      	ldr	r2, [pc, #24]	; (80029c4 <vPortFree+0x6c>)
 80029aa:	6813      	ldr	r3, [r2, #0]
 80029ac:	440b      	add	r3, r1
 80029ae:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80029b0:	4628      	mov	r0, r5
 80029b2:	f7ff ff21 	bl	80027f8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80029b6:	f000 fe89 	bl	80036cc <xTaskResumeAll>
 80029ba:	bd38      	pop	{r3, r4, r5, pc}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20003c3c 	.word	0x20003c3c
 80029c4:	20003c40 	.word	0x20003c40

080029c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80029c8:	b510      	push	{r4, lr}
 80029ca:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029cc:	f7ff fda2 	bl	8002514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80029d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d004      	beq.n	80029e2 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80029d8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80029da:	f7ff fdbd 	bl	8002558 <vPortExitCritical>

	return xReturn;
}
 80029de:	4620      	mov	r0, r4
 80029e0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80029e2:	2401      	movs	r4, #1
 80029e4:	e7f9      	b.n	80029da <prvIsQueueFull+0x12>

080029e6 <prvIsQueueEmpty>:
{
 80029e6:	b510      	push	{r4, lr}
 80029e8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80029ea:	f7ff fd93 	bl	8002514 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80029ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029f0:	b123      	cbz	r3, 80029fc <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 80029f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80029f4:	f7ff fdb0 	bl	8002558 <vPortExitCritical>
}
 80029f8:	4620      	mov	r0, r4
 80029fa:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80029fc:	2401      	movs	r4, #1
 80029fe:	e7f9      	b.n	80029f4 <prvIsQueueEmpty+0xe>

08002a00 <prvCopyDataToQueue>:
{
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	4604      	mov	r4, r0
 8002a04:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a06:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a08:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002a0a:	b94a      	cbnz	r2, 8002a20 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a0c:	6803      	ldr	r3, [r0, #0]
 8002a0e:	bb53      	cbnz	r3, 8002a66 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002a10:	6840      	ldr	r0, [r0, #4]
 8002a12:	f001 f8ad 	bl	8003b70 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002a1a:	3501      	adds	r5, #1
 8002a1c:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002a20:	b96e      	cbnz	r6, 8002a3e <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002a22:	6880      	ldr	r0, [r0, #8]
 8002a24:	f00a f919 	bl	800cc5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002a28:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a2a:	68a3      	ldr	r3, [r4, #8]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a30:	6862      	ldr	r2, [r4, #4]
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d319      	bcc.n	8002a6a <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	e7ed      	b.n	8002a1a <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a3e:	68c0      	ldr	r0, [r0, #12]
 8002a40:	f00a f90b 	bl	800cc5a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002a44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a46:	425b      	negs	r3, r3
 8002a48:	68e2      	ldr	r2, [r4, #12]
 8002a4a:	441a      	add	r2, r3
 8002a4c:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a4e:	6821      	ldr	r1, [r4, #0]
 8002a50:	428a      	cmp	r2, r1
 8002a52:	d202      	bcs.n	8002a5a <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002a54:	6862      	ldr	r2, [r4, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002a5a:	2e02      	cmp	r6, #2
 8002a5c:	d107      	bne.n	8002a6e <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a5e:	b145      	cbz	r5, 8002a72 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8002a60:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8002a62:	2000      	movs	r0, #0
 8002a64:	e7d9      	b.n	8002a1a <prvCopyDataToQueue+0x1a>
 8002a66:	2000      	movs	r0, #0
 8002a68:	e7d7      	b.n	8002a1a <prvCopyDataToQueue+0x1a>
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	e7d5      	b.n	8002a1a <prvCopyDataToQueue+0x1a>
 8002a6e:	2000      	movs	r0, #0
 8002a70:	e7d3      	b.n	8002a1a <prvCopyDataToQueue+0x1a>
 8002a72:	2000      	movs	r0, #0
 8002a74:	e7d1      	b.n	8002a1a <prvCopyDataToQueue+0x1a>

08002a76 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a76:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002a78:	b172      	cbz	r2, 8002a98 <prvCopyDataFromQueue+0x22>
{
 8002a7a:	b510      	push	{r4, lr}
 8002a7c:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002a7e:	68c4      	ldr	r4, [r0, #12]
 8002a80:	4414      	add	r4, r2
 8002a82:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a84:	6840      	ldr	r0, [r0, #4]
 8002a86:	4284      	cmp	r4, r0
 8002a88:	d301      	bcc.n	8002a8e <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	60d8      	str	r0, [r3, #12]
 8002a8e:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002a90:	68d9      	ldr	r1, [r3, #12]
 8002a92:	f00a f8e2 	bl	800cc5a <memcpy>
 8002a96:	bd10      	pop	{r4, pc}
 8002a98:	4770      	bx	lr

08002a9a <prvUnlockQueue>:
{
 8002a9a:	b538      	push	{r3, r4, r5, lr}
 8002a9c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002a9e:	f7ff fd39 	bl	8002514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002aa2:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8002aa6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aa8:	e001      	b.n	8002aae <prvUnlockQueue+0x14>
			--cTxLock;
 8002aaa:	3c01      	subs	r4, #1
 8002aac:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aae:	2c00      	cmp	r4, #0
 8002ab0:	dd0a      	ble.n	8002ac8 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ab2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002ab4:	b143      	cbz	r3, 8002ac8 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ab6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002aba:	f000 ff55 	bl	8003968 <xTaskRemoveFromEventList>
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d0f3      	beq.n	8002aaa <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8002ac2:	f000 ffed 	bl	8003aa0 <vTaskMissedYield>
 8002ac6:	e7f0      	b.n	8002aaa <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8002ac8:	23ff      	movs	r3, #255	; 0xff
 8002aca:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002ace:	f7ff fd43 	bl	8002558 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002ad2:	f7ff fd1f 	bl	8002514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002ad6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8002ada:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002adc:	e001      	b.n	8002ae2 <prvUnlockQueue+0x48>
				--cRxLock;
 8002ade:	3c01      	subs	r4, #1
 8002ae0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ae2:	2c00      	cmp	r4, #0
 8002ae4:	dd0a      	ble.n	8002afc <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ae6:	692b      	ldr	r3, [r5, #16]
 8002ae8:	b143      	cbz	r3, 8002afc <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aea:	f105 0010 	add.w	r0, r5, #16
 8002aee:	f000 ff3b 	bl	8003968 <xTaskRemoveFromEventList>
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d0f3      	beq.n	8002ade <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8002af6:	f000 ffd3 	bl	8003aa0 <vTaskMissedYield>
 8002afa:	e7f0      	b.n	8002ade <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8002afc:	23ff      	movs	r3, #255	; 0xff
 8002afe:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002b02:	f7ff fd29 	bl	8002558 <vPortExitCritical>
 8002b06:	bd38      	pop	{r3, r4, r5, pc}

08002b08 <xQueueGenericReset>:
{
 8002b08:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002b0a:	b330      	cbz	r0, 8002b5a <xQueueGenericReset+0x52>
 8002b0c:	4604      	mov	r4, r0
 8002b0e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8002b10:	f7ff fd00 	bl	8002514 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b14:	6821      	ldr	r1, [r4, #0]
 8002b16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b1a:	fb03 1002 	mla	r0, r3, r2, r1
 8002b1e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b20:	2000      	movs	r0, #0
 8002b22:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b24:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002b26:	3a01      	subs	r2, #1
 8002b28:	fb02 1303 	mla	r3, r2, r3, r1
 8002b2c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b2e:	23ff      	movs	r3, #255	; 0xff
 8002b30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002b38:	b9c5      	cbnz	r5, 8002b6c <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b3a:	6923      	ldr	r3, [r4, #16]
 8002b3c:	b1f3      	cbz	r3, 8002b7c <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b3e:	f104 0010 	add.w	r0, r4, #16
 8002b42:	f000 ff11 	bl	8003968 <xTaskRemoveFromEventList>
 8002b46:	b1c8      	cbz	r0, 8002b7c <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
 8002b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <xQueueGenericReset+0x7c>)
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	e010      	b.n	8002b7c <xQueueGenericReset+0x74>
 8002b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	e7fe      	b.n	8002b6a <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b6c:	f104 0010 	add.w	r0, r4, #16
 8002b70:	f7ff fc27 	bl	80023c2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b78:	f7ff fc23 	bl	80023c2 <vListInitialise>
	taskEXIT_CRITICAL();
 8002b7c:	f7ff fcec 	bl	8002558 <vPortExitCritical>
}
 8002b80:	2001      	movs	r0, #1
 8002b82:	bd38      	pop	{r3, r4, r5, pc}
 8002b84:	e000ed04 	.word	0xe000ed04

08002b88 <prvInitialiseNewQueue>:
{
 8002b88:	b510      	push	{r4, lr}
 8002b8a:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	b139      	cbz	r1, 8002ba0 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b90:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002b92:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b94:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b96:	2101      	movs	r1, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ffb5 	bl	8002b08 <xQueueGenericReset>
 8002b9e:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ba0:	601b      	str	r3, [r3, #0]
 8002ba2:	e7f6      	b.n	8002b92 <prvInitialiseNewQueue+0xa>

08002ba4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ba4:	b940      	cbnz	r0, 8002bb8 <xQueueGenericCreate+0x14>
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	e7fe      	b.n	8002bb6 <xQueueGenericCreate+0x12>
	{
 8002bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8002bbe:	b111      	cbz	r1, 8002bc6 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bc0:	fb01 f000 	mul.w	r0, r1, r0
 8002bc4:	e000      	b.n	8002bc8 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	4617      	mov	r7, r2
 8002bca:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002bcc:	3048      	adds	r0, #72	; 0x48
 8002bce:	f7ff fe3f 	bl	8002850 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002bd2:	4606      	mov	r6, r0
 8002bd4:	b138      	cbz	r0, 8002be6 <xQueueGenericCreate+0x42>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bd6:	9000      	str	r0, [sp, #0]
 8002bd8:	463b      	mov	r3, r7
 8002bda:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8002bde:	4621      	mov	r1, r4
 8002be0:	4628      	mov	r0, r5
 8002be2:	f7ff ffd1 	bl	8002b88 <prvInitialiseNewQueue>
	}
 8002be6:	4630      	mov	r0, r6
 8002be8:	b003      	add	sp, #12
 8002bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bec <xQueueGenericSend>:
{
 8002bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002bf2:	b160      	cbz	r0, 8002c0e <xQueueGenericSend+0x22>
 8002bf4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bf6:	b199      	cbz	r1, 8002c20 <xQueueGenericSend+0x34>
 8002bf8:	2501      	movs	r5, #1
 8002bfa:	b9bd      	cbnz	r5, 8002c2c <xQueueGenericSend+0x40>
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	e7fe      	b.n	8002c0c <xQueueGenericSend+0x20>
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	e7fe      	b.n	8002c1e <xQueueGenericSend+0x32>
 8002c20:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002c22:	b90a      	cbnz	r2, 8002c28 <xQueueGenericSend+0x3c>
 8002c24:	2501      	movs	r5, #1
 8002c26:	e7e8      	b.n	8002bfa <xQueueGenericSend+0xe>
 8002c28:	2500      	movs	r5, #0
 8002c2a:	e7e6      	b.n	8002bfa <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d009      	beq.n	8002c44 <xQueueGenericSend+0x58>
 8002c30:	b96d      	cbnz	r5, 8002c4e <xQueueGenericSend+0x62>
 8002c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c36:	f383 8811 	msr	BASEPRI, r3
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	e7fe      	b.n	8002c42 <xQueueGenericSend+0x56>
 8002c44:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c46:	2a01      	cmp	r2, #1
 8002c48:	d0f2      	beq.n	8002c30 <xQueueGenericSend+0x44>
 8002c4a:	2500      	movs	r5, #0
 8002c4c:	e7f0      	b.n	8002c30 <xQueueGenericSend+0x44>
 8002c4e:	461e      	mov	r6, r3
 8002c50:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c52:	f000 ff2b 	bl	8003aac <xTaskGetSchedulerState>
 8002c56:	b910      	cbnz	r0, 8002c5e <xQueueGenericSend+0x72>
 8002c58:	9b01      	ldr	r3, [sp, #4]
 8002c5a:	b103      	cbz	r3, 8002c5e <xQueueGenericSend+0x72>
 8002c5c:	2500      	movs	r5, #0
 8002c5e:	b945      	cbnz	r5, 8002c72 <xQueueGenericSend+0x86>
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	e7fe      	b.n	8002c70 <xQueueGenericSend+0x84>
 8002c72:	2500      	movs	r5, #0
 8002c74:	e02c      	b.n	8002cd0 <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c76:	4632      	mov	r2, r6
 8002c78:	4639      	mov	r1, r7
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f7ff fec0 	bl	8002a00 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c82:	b18b      	cbz	r3, 8002ca8 <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c88:	f000 fe6e 	bl	8003968 <xTaskRemoveFromEventList>
 8002c8c:	b138      	cbz	r0, 8002c9e <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 8002c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c92:	4b37      	ldr	r3, [pc, #220]	; (8002d70 <xQueueGenericSend+0x184>)
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002c9e:	f7ff fc5b 	bl	8002558 <vPortExitCritical>
				return pdPASS;
 8002ca2:	2001      	movs	r0, #1
}
 8002ca4:	b005      	add	sp, #20
 8002ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d0f8      	beq.n	8002c9e <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8002cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb0:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <xQueueGenericSend+0x184>)
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	e7ef      	b.n	8002c9e <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 8002cbe:	f7ff fc4b 	bl	8002558 <vPortExitCritical>
					return errQUEUE_FULL;
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	e7ee      	b.n	8002ca4 <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f7ff fee7 	bl	8002a9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ccc:	f000 fcfe 	bl	80036cc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002cd0:	f7ff fc20 	bl	8002514 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002cd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d3cc      	bcc.n	8002c76 <xQueueGenericSend+0x8a>
 8002cdc:	2e02      	cmp	r6, #2
 8002cde:	d0ca      	beq.n	8002c76 <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ce0:	9b01      	ldr	r3, [sp, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0eb      	beq.n	8002cbe <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
 8002ce6:	b91d      	cbnz	r5, 8002cf0 <xQueueGenericSend+0x104>
					vTaskSetTimeOutState( &xTimeOut );
 8002ce8:	a802      	add	r0, sp, #8
 8002cea:	f000 fe83 	bl	80039f4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cee:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8002cf0:	f7ff fc32 	bl	8002558 <vPortExitCritical>
		vTaskSuspendAll();
 8002cf4:	f000 fc44 	bl	8003580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cf8:	f7ff fc0c 	bl	8002514 <vPortEnterCritical>
 8002cfc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d06:	d102      	bne.n	8002d0e <xQueueGenericSend+0x122>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002d0e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d102      	bne.n	8002d20 <xQueueGenericSend+0x134>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d20:	f7ff fc1a 	bl	8002558 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d24:	a901      	add	r1, sp, #4
 8002d26:	a802      	add	r0, sp, #8
 8002d28:	f000 fe7a 	bl	8003a20 <xTaskCheckForTimeOut>
 8002d2c:	b9c8      	cbnz	r0, 8002d62 <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7ff fe4a 	bl	80029c8 <prvIsQueueFull>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d0c6      	beq.n	8002cc6 <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d38:	9901      	ldr	r1, [sp, #4]
 8002d3a:	f104 0010 	add.w	r0, r4, #16
 8002d3e:	f000 fdfb 	bl	8003938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d42:	4620      	mov	r0, r4
 8002d44:	f7ff fea9 	bl	8002a9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d48:	f000 fcc0 	bl	80036cc <xTaskResumeAll>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d1bf      	bne.n	8002cd0 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8002d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <xQueueGenericSend+0x184>)
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	e7b6      	b.n	8002cd0 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8002d62:	4620      	mov	r0, r4
 8002d64:	f7ff fe99 	bl	8002a9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d68:	f000 fcb0 	bl	80036cc <xTaskResumeAll>
			return errQUEUE_FULL;
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	e799      	b.n	8002ca4 <xQueueGenericSend+0xb8>
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8002d74:	b148      	cbz	r0, 8002d8a <prvInitialiseMutex+0x16>
	{
 8002d76:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8002d78:	2100      	movs	r1, #0
 8002d7a:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002d7c:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002d7e:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002d80:	460b      	mov	r3, r1
 8002d82:	460a      	mov	r2, r1
 8002d84:	f7ff ff32 	bl	8002bec <xQueueGenericSend>
 8002d88:	bd08      	pop	{r3, pc}
 8002d8a:	4770      	bx	lr

08002d8c <xQueueCreateMutex>:
	{
 8002d8c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002d8e:	4602      	mov	r2, r0
 8002d90:	2100      	movs	r1, #0
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7ff ff06 	bl	8002ba4 <xQueueGenericCreate>
 8002d98:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8002d9a:	f7ff ffeb 	bl	8002d74 <prvInitialiseMutex>
	}
 8002d9e:	4620      	mov	r0, r4
 8002da0:	bd10      	pop	{r4, pc}

08002da2 <xQueueGenericSendFromISR>:
{
 8002da2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002da6:	b160      	cbz	r0, 8002dc2 <xQueueGenericSendFromISR+0x20>
 8002da8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002daa:	b199      	cbz	r1, 8002dd4 <xQueueGenericSendFromISR+0x32>
 8002dac:	2001      	movs	r0, #1
 8002dae:	b9b8      	cbnz	r0, 8002de0 <xQueueGenericSendFromISR+0x3e>
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericSendFromISR+0x1e>
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	e7fe      	b.n	8002dd2 <xQueueGenericSendFromISR+0x30>
 8002dd4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002dd6:	b908      	cbnz	r0, 8002ddc <xQueueGenericSendFromISR+0x3a>
 8002dd8:	2001      	movs	r0, #1
 8002dda:	e7e8      	b.n	8002dae <xQueueGenericSendFromISR+0xc>
 8002ddc:	2000      	movs	r0, #0
 8002dde:	e7e6      	b.n	8002dae <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d009      	beq.n	8002df8 <xQueueGenericSendFromISR+0x56>
 8002de4:	b968      	cbnz	r0, 8002e02 <xQueueGenericSendFromISR+0x60>
 8002de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	e7fe      	b.n	8002df6 <xQueueGenericSendFromISR+0x54>
 8002df8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002dfa:	2d01      	cmp	r5, #1
 8002dfc:	d0f2      	beq.n	8002de4 <xQueueGenericSendFromISR+0x42>
 8002dfe:	2000      	movs	r0, #0
 8002e00:	e7f0      	b.n	8002de4 <xQueueGenericSendFromISR+0x42>
 8002e02:	461f      	mov	r7, r3
 8002e04:	4690      	mov	r8, r2
 8002e06:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e08:	f7ff fc96 	bl	8002738 <vPortValidateInterruptPriority>
	__asm volatile
 8002e0c:	f3ef 8611 	mrs	r6, BASEPRI
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d301      	bcc.n	8002e2c <xQueueGenericSendFromISR+0x8a>
 8002e28:	2f02      	cmp	r7, #2
 8002e2a:	d121      	bne.n	8002e70 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e2c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8002e30:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e32:	463a      	mov	r2, r7
 8002e34:	4649      	mov	r1, r9
 8002e36:	4620      	mov	r0, r4
 8002e38:	f7ff fde2 	bl	8002a00 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002e3c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002e40:	d110      	bne.n	8002e64 <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e44:	b1b3      	cbz	r3, 8002e74 <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e4a:	f000 fd8d 	bl	8003968 <xTaskRemoveFromEventList>
 8002e4e:	b198      	cbz	r0, 8002e78 <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 8002e50:	f1b8 0f00 	cmp.w	r8, #0
 8002e54:	d012      	beq.n	8002e7c <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e56:	2001      	movs	r0, #1
 8002e58:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8002e5c:	f386 8811 	msr	BASEPRI, r6
}
 8002e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e64:	1c6b      	adds	r3, r5, #1
 8002e66:	b25b      	sxtb	r3, r3
 8002e68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	e7f5      	b.n	8002e5c <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8002e70:	2000      	movs	r0, #0
 8002e72:	e7f3      	b.n	8002e5c <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 8002e74:	2001      	movs	r0, #1
 8002e76:	e7f1      	b.n	8002e5c <xQueueGenericSendFromISR+0xba>
 8002e78:	2001      	movs	r0, #1
 8002e7a:	e7ef      	b.n	8002e5c <xQueueGenericSendFromISR+0xba>
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	e7ed      	b.n	8002e5c <xQueueGenericSendFromISR+0xba>

08002e80 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8002e80:	b160      	cbz	r0, 8002e9c <xQueueGiveFromISR+0x1c>
{
 8002e82:	b570      	push	{r4, r5, r6, lr}
 8002e84:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e88:	b18b      	cbz	r3, 8002eae <xQueueGiveFromISR+0x2e>
	__asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	e7fe      	b.n	8002e9a <xQueueGiveFromISR+0x1a>
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	e7fe      	b.n	8002eac <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002eae:	6803      	ldr	r3, [r0, #0]
 8002eb0:	b153      	cbz	r3, 8002ec8 <xQueueGiveFromISR+0x48>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	b973      	cbnz	r3, 8002ed4 <xQueueGiveFromISR+0x54>
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	e7fe      	b.n	8002ec6 <xQueueGiveFromISR+0x46>
 8002ec8:	6843      	ldr	r3, [r0, #4]
 8002eca:	b90b      	cbnz	r3, 8002ed0 <xQueueGiveFromISR+0x50>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e7f1      	b.n	8002eb4 <xQueueGiveFromISR+0x34>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e7ef      	b.n	8002eb4 <xQueueGiveFromISR+0x34>
 8002ed4:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ed6:	f7ff fc2f 	bl	8002738 <vPortValidateInterruptPriority>
	__asm volatile
 8002eda:	f3ef 8511 	mrs	r5, BASEPRI
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002ef0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d21a      	bcs.n	8002f2c <xQueueGiveFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ef6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002efa:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002efc:	3201      	adds	r2, #1
 8002efe:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d10c      	bne.n	8002f20 <xQueueGiveFromISR+0xa0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f08:	b193      	cbz	r3, 8002f30 <xQueueGiveFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f0e:	f000 fd2b 	bl	8003968 <xTaskRemoveFromEventList>
 8002f12:	b178      	cbz	r0, 8002f34 <xQueueGiveFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 8002f14:	b186      	cbz	r6, 8002f38 <xQueueGiveFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f16:	2001      	movs	r0, #1
 8002f18:	6030      	str	r0, [r6, #0]
	__asm volatile
 8002f1a:	f385 8811 	msr	BASEPRI, r5
}
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f20:	3301      	adds	r3, #1
 8002f22:	b25b      	sxtb	r3, r3
 8002f24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8002f28:	2001      	movs	r0, #1
 8002f2a:	e7f6      	b.n	8002f1a <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	e7f4      	b.n	8002f1a <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
 8002f30:	2001      	movs	r0, #1
 8002f32:	e7f2      	b.n	8002f1a <xQueueGiveFromISR+0x9a>
 8002f34:	2001      	movs	r0, #1
 8002f36:	e7f0      	b.n	8002f1a <xQueueGiveFromISR+0x9a>
 8002f38:	2001      	movs	r0, #1
 8002f3a:	e7ee      	b.n	8002f1a <xQueueGiveFromISR+0x9a>

08002f3c <xQueueGenericReceive>:
{
 8002f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002f44:	b160      	cbz	r0, 8002f60 <xQueueGenericReceive+0x24>
 8002f46:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f48:	b199      	cbz	r1, 8002f72 <xQueueGenericReceive+0x36>
 8002f4a:	2501      	movs	r5, #1
 8002f4c:	b9bd      	cbnz	r5, 8002f7e <xQueueGenericReceive+0x42>
	__asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	e7fe      	b.n	8002f5e <xQueueGenericReceive+0x22>
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericReceive+0x34>
 8002f72:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002f74:	b90a      	cbnz	r2, 8002f7a <xQueueGenericReceive+0x3e>
 8002f76:	2501      	movs	r5, #1
 8002f78:	e7e8      	b.n	8002f4c <xQueueGenericReceive+0x10>
 8002f7a:	2500      	movs	r5, #0
 8002f7c:	e7e6      	b.n	8002f4c <xQueueGenericReceive+0x10>
 8002f7e:	461f      	mov	r7, r3
 8002f80:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f82:	f000 fd93 	bl	8003aac <xTaskGetSchedulerState>
 8002f86:	b910      	cbnz	r0, 8002f8e <xQueueGenericReceive+0x52>
 8002f88:	9b01      	ldr	r3, [sp, #4]
 8002f8a:	b103      	cbz	r3, 8002f8e <xQueueGenericReceive+0x52>
 8002f8c:	2500      	movs	r5, #0
 8002f8e:	b945      	cbnz	r5, 8002fa2 <xQueueGenericReceive+0x66>
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueGenericReceive+0x64>
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	e05d      	b.n	8003062 <xQueueGenericReceive+0x126>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002fa6:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fa8:	4641      	mov	r1, r8
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7ff fd63 	bl	8002a76 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8002fb0:	b9df      	cbnz	r7, 8002fea <xQueueGenericReceive+0xae>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002fb2:	3d01      	subs	r5, #1
 8002fb4:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	b913      	cbnz	r3, 8002fc0 <xQueueGenericReceive+0x84>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002fba:	f000 fe33 	bl	8003c24 <pvTaskIncrementMutexHeldCount>
 8002fbe:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fc0:	6923      	ldr	r3, [r4, #16]
 8002fc2:	b163      	cbz	r3, 8002fde <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fc4:	f104 0010 	add.w	r0, r4, #16
 8002fc8:	f000 fcce 	bl	8003968 <xTaskRemoveFromEventList>
 8002fcc:	b138      	cbz	r0, 8002fde <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8002fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd2:	4b45      	ldr	r3, [pc, #276]	; (80030e8 <xQueueGenericReceive+0x1ac>)
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002fde:	f7ff fabb 	bl	8002558 <vPortExitCritical>
				return pdPASS;
 8002fe2:	2001      	movs	r0, #1
}
 8002fe4:	b004      	add	sp, #16
 8002fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002fea:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f5      	beq.n	8002fde <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ff2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ff6:	f000 fcb7 	bl	8003968 <xTaskRemoveFromEventList>
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	d0ef      	beq.n	8002fde <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8002ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003002:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <xQueueGenericReceive+0x1ac>)
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	e7e6      	b.n	8002fde <xQueueGenericReceive+0xa2>
					taskEXIT_CRITICAL();
 8003010:	f7ff faa2 	bl	8002558 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003014:	2000      	movs	r0, #0
 8003016:	e7e5      	b.n	8002fe4 <xQueueGenericReceive+0xa8>
					vTaskSetTimeOutState( &xTimeOut );
 8003018:	a802      	add	r0, sp, #8
 800301a:	f000 fceb 	bl	80039f4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800301e:	2601      	movs	r6, #1
 8003020:	e029      	b.n	8003076 <xQueueGenericReceive+0x13a>
		prvLockQueue( pxQueue );
 8003022:	2300      	movs	r3, #0
 8003024:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003028:	e031      	b.n	800308e <xQueueGenericReceive+0x152>
 800302a:	2300      	movs	r3, #0
 800302c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003030:	e033      	b.n	800309a <xQueueGenericReceive+0x15e>
						taskENTER_CRITICAL();
 8003032:	f7ff fa6f 	bl	8002514 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003036:	6860      	ldr	r0, [r4, #4]
 8003038:	f000 fd48 	bl	8003acc <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800303c:	f7ff fa8c 	bl	8002558 <vPortExitCritical>
 8003040:	e03b      	b.n	80030ba <xQueueGenericReceive+0x17e>
				prvUnlockQueue( pxQueue );
 8003042:	4620      	mov	r0, r4
 8003044:	f7ff fd29 	bl	8002a9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003048:	f000 fb40 	bl	80036cc <xTaskResumeAll>
 800304c:	e009      	b.n	8003062 <xQueueGenericReceive+0x126>
			prvUnlockQueue( pxQueue );
 800304e:	4620      	mov	r0, r4
 8003050:	f7ff fd23 	bl	8002a9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003054:	f000 fb3a 	bl	80036cc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003058:	4620      	mov	r0, r4
 800305a:	f7ff fcc4 	bl	80029e6 <prvIsQueueEmpty>
 800305e:	2800      	cmp	r0, #0
 8003060:	d140      	bne.n	80030e4 <xQueueGenericReceive+0x1a8>
		taskENTER_CRITICAL();
 8003062:	f7ff fa57 	bl	8002514 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003066:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003068:	2d00      	cmp	r5, #0
 800306a:	d19c      	bne.n	8002fa6 <xQueueGenericReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800306c:	9b01      	ldr	r3, [sp, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0ce      	beq.n	8003010 <xQueueGenericReceive+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8003072:	2e00      	cmp	r6, #0
 8003074:	d0d0      	beq.n	8003018 <xQueueGenericReceive+0xdc>
		taskEXIT_CRITICAL();
 8003076:	f7ff fa6f 	bl	8002558 <vPortExitCritical>
		vTaskSuspendAll();
 800307a:	f000 fa81 	bl	8003580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800307e:	f7ff fa49 	bl	8002514 <vPortEnterCritical>
 8003082:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003086:	b25b      	sxtb	r3, r3
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d0c9      	beq.n	8003022 <xQueueGenericReceive+0xe6>
 800308e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003092:	b25b      	sxtb	r3, r3
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d0c7      	beq.n	800302a <xQueueGenericReceive+0xee>
 800309a:	f7ff fa5d 	bl	8002558 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800309e:	a901      	add	r1, sp, #4
 80030a0:	a802      	add	r0, sp, #8
 80030a2:	f000 fcbd 	bl	8003a20 <xTaskCheckForTimeOut>
 80030a6:	2800      	cmp	r0, #0
 80030a8:	d1d1      	bne.n	800304e <xQueueGenericReceive+0x112>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7ff fc9b 	bl	80029e6 <prvIsQueueEmpty>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d0c6      	beq.n	8003042 <xQueueGenericReceive+0x106>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0bb      	beq.n	8003032 <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030ba:	9901      	ldr	r1, [sp, #4]
 80030bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80030c0:	f000 fc3a 	bl	8003938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030c4:	4620      	mov	r0, r4
 80030c6:	f7ff fce8 	bl	8002a9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030ca:	f000 faff 	bl	80036cc <xTaskResumeAll>
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d1c7      	bne.n	8003062 <xQueueGenericReceive+0x126>
					portYIELD_WITHIN_API();
 80030d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <xQueueGenericReceive+0x1ac>)
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	e7be      	b.n	8003062 <xQueueGenericReceive+0x126>
				return errQUEUE_EMPTY;
 80030e4:	2000      	movs	r0, #0
 80030e6:	e77d      	b.n	8002fe4 <xQueueGenericReceive+0xa8>
 80030e8:	e000ed04 	.word	0xe000ed04

080030ec <xQueueReceiveFromISR>:
{
 80030ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80030f0:	b160      	cbz	r0, 800310c <xQueueReceiveFromISR+0x20>
 80030f2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030f4:	b199      	cbz	r1, 800311e <xQueueReceiveFromISR+0x32>
 80030f6:	2301      	movs	r3, #1
 80030f8:	b9bb      	cbnz	r3, 800312a <xQueueReceiveFromISR+0x3e>
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	e7fe      	b.n	800310a <xQueueReceiveFromISR+0x1e>
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	e7fe      	b.n	800311c <xQueueReceiveFromISR+0x30>
 800311e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003120:	b90b      	cbnz	r3, 8003126 <xQueueReceiveFromISR+0x3a>
 8003122:	2301      	movs	r3, #1
 8003124:	e7e8      	b.n	80030f8 <xQueueReceiveFromISR+0xc>
 8003126:	2300      	movs	r3, #0
 8003128:	e7e6      	b.n	80030f8 <xQueueReceiveFromISR+0xc>
 800312a:	4617      	mov	r7, r2
 800312c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800312e:	f7ff fb03 	bl	8002738 <vPortValidateInterruptPriority>
	__asm volatile
 8003132:	f3ef 8611 	mrs	r6, BASEPRI
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003146:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800314a:	f1b8 0f00 	cmp.w	r8, #0
 800314e:	d020      	beq.n	8003192 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003150:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003154:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003156:	4649      	mov	r1, r9
 8003158:	4620      	mov	r0, r4
 800315a:	f7ff fc8c 	bl	8002a76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800315e:	f108 33ff 	add.w	r3, r8, #4294967295
 8003162:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8003164:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003168:	d10d      	bne.n	8003186 <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800316a:	6923      	ldr	r3, [r4, #16]
 800316c:	b19b      	cbz	r3, 8003196 <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800316e:	f104 0010 	add.w	r0, r4, #16
 8003172:	f000 fbf9 	bl	8003968 <xTaskRemoveFromEventList>
 8003176:	b180      	cbz	r0, 800319a <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 8003178:	b18f      	cbz	r7, 800319e <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800317a:	2001      	movs	r0, #1
 800317c:	6038      	str	r0, [r7, #0]
	__asm volatile
 800317e:	f386 8811 	msr	BASEPRI, r6
}
 8003182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003186:	1c6b      	adds	r3, r5, #1
 8003188:	b25b      	sxtb	r3, r3
 800318a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800318e:	2001      	movs	r0, #1
 8003190:	e7f5      	b.n	800317e <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 8003192:	2000      	movs	r0, #0
 8003194:	e7f3      	b.n	800317e <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 8003196:	2001      	movs	r0, #1
 8003198:	e7f1      	b.n	800317e <xQueueReceiveFromISR+0x92>
 800319a:	2001      	movs	r0, #1
 800319c:	e7ef      	b.n	800317e <xQueueReceiveFromISR+0x92>
 800319e:	2001      	movs	r0, #1
 80031a0:	e7ed      	b.n	800317e <xQueueReceiveFromISR+0x92>

080031a2 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80031a2:	b940      	cbnz	r0, 80031b6 <uxQueueMessagesWaiting+0x14>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	e7fe      	b.n	80031b4 <uxQueueMessagesWaiting+0x12>
{
 80031b6:	b510      	push	{r4, lr}
 80031b8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80031ba:	f7ff f9ab 	bl	8002514 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80031be:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80031c0:	f7ff f9ca 	bl	8002558 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80031c4:	4620      	mov	r0, r4
 80031c6:	bd10      	pop	{r4, pc}

080031c8 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 80031c8:	b108      	cbz	r0, 80031ce <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80031ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80031cc:	4770      	bx	lr
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	e7fe      	b.n	80031de <uxQueueMessagesWaitingFromISR+0x16>

080031e0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b07      	cmp	r3, #7
 80031e4:	d80f      	bhi.n	8003206 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80031e6:	4a08      	ldr	r2, [pc, #32]	; (8003208 <vQueueUnregisterQueue+0x28>)
 80031e8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80031ec:	6852      	ldr	r2, [r2, #4]
 80031ee:	4282      	cmp	r2, r0
 80031f0:	d001      	beq.n	80031f6 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031f2:	3301      	adds	r3, #1
 80031f4:	e7f5      	b.n	80031e2 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80031f6:	4a04      	ldr	r2, [pc, #16]	; (8003208 <vQueueUnregisterQueue+0x28>)
 80031f8:	2100      	movs	r1, #0
 80031fa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80031fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003202:	6059      	str	r1, [r3, #4]
				break;
 8003204:	4770      	bx	lr
 8003206:	4770      	bx	lr
 8003208:	2000422c 	.word	0x2000422c

0800320c <vQueueDelete>:
	configASSERT( pxQueue );
 800320c:	b940      	cbnz	r0, 8003220 <vQueueDelete+0x14>
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	e7fe      	b.n	800321e <vQueueDelete+0x12>
{
 8003220:	b510      	push	{r4, lr}
 8003222:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8003224:	f7ff ffdc 	bl	80031e0 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8003228:	4620      	mov	r0, r4
 800322a:	f7ff fb95 	bl	8002958 <vPortFree>
 800322e:	bd10      	pop	{r4, pc}

08003230 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <prvResetNextTaskUnblockTime+0x2c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	b94b      	cbnz	r3, 800324c <prvResetNextTaskUnblockTime+0x1c>
 8003238:	2301      	movs	r3, #1
 800323a:	b94b      	cbnz	r3, 8003250 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800323c:	4b07      	ldr	r3, [pc, #28]	; (800325c <prvResetNextTaskUnblockTime+0x2c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <prvResetNextTaskUnblockTime+0x30>)
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800324c:	2300      	movs	r3, #0
 800324e:	e7f4      	b.n	800323a <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003250:	f04f 32ff 	mov.w	r2, #4294967295
 8003254:	4b02      	ldr	r3, [pc, #8]	; (8003260 <prvResetNextTaskUnblockTime+0x30>)
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20003c54 	.word	0x20003c54
 8003260:	20003d2c 	.word	0x20003d2c

08003264 <prvDeleteTCB>:
	{
 8003264:	b510      	push	{r4, lr}
 8003266:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8003268:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800326a:	f7ff fb75 	bl	8002958 <vPortFree>
			vPortFree( pxTCB );
 800326e:	4620      	mov	r0, r4
 8003270:	f7ff fb72 	bl	8002958 <vPortFree>
 8003274:	bd10      	pop	{r4, pc}

08003276 <prvInitialiseNewTask>:
{
 8003276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800327a:	4680      	mov	r8, r0
 800327c:	4699      	mov	r9, r3
 800327e:	9d08      	ldr	r5, [sp, #32]
 8003280:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003282:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003284:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003286:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800328a:	3a01      	subs	r2, #1
 800328c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003290:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003294:	2300      	movs	r3, #0
 8003296:	2b0f      	cmp	r3, #15
 8003298:	d807      	bhi.n	80032aa <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800329a:	5cc8      	ldrb	r0, [r1, r3]
 800329c:	18e2      	adds	r2, r4, r3
 800329e:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80032a2:	5cca      	ldrb	r2, [r1, r3]
 80032a4:	b10a      	cbz	r2, 80032aa <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032a6:	3301      	adds	r3, #1
 80032a8:	e7f5      	b.n	8003296 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032aa:	2300      	movs	r3, #0
 80032ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032b0:	2d06      	cmp	r5, #6
 80032b2:	d900      	bls.n	80032b6 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032b4:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80032b6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80032b8:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80032ba:	f04f 0a00 	mov.w	sl, #0
 80032be:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032c2:	1d20      	adds	r0, r4, #4
 80032c4:	f7ff f888 	bl	80023d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032c8:	f104 0018 	add.w	r0, r4, #24
 80032cc:	f7ff f884 	bl	80023d8 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032d0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032d2:	f1c5 0507 	rsb	r5, r5, #7
 80032d6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032d8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80032da:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032de:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032e2:	464a      	mov	r2, r9
 80032e4:	4641      	mov	r1, r8
 80032e6:	4630      	mov	r0, r6
 80032e8:	f7ff f8e6 	bl	80024b8 <pxPortInitialiseStack>
 80032ec:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80032ee:	b107      	cbz	r7, 80032f2 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032f0:	603c      	str	r4, [r7, #0]
 80032f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080032f8 <prvInitialiseTaskLists>:
{
 80032f8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032fa:	2400      	movs	r4, #0
 80032fc:	e007      	b.n	800330e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032fe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003302:	0093      	lsls	r3, r2, #2
 8003304:	480e      	ldr	r0, [pc, #56]	; (8003340 <prvInitialiseTaskLists+0x48>)
 8003306:	4418      	add	r0, r3
 8003308:	f7ff f85b 	bl	80023c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800330c:	3401      	adds	r4, #1
 800330e:	2c06      	cmp	r4, #6
 8003310:	d9f5      	bls.n	80032fe <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8003312:	4d0c      	ldr	r5, [pc, #48]	; (8003344 <prvInitialiseTaskLists+0x4c>)
 8003314:	4628      	mov	r0, r5
 8003316:	f7ff f854 	bl	80023c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800331a:	4c0b      	ldr	r4, [pc, #44]	; (8003348 <prvInitialiseTaskLists+0x50>)
 800331c:	4620      	mov	r0, r4
 800331e:	f7ff f850 	bl	80023c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003322:	480a      	ldr	r0, [pc, #40]	; (800334c <prvInitialiseTaskLists+0x54>)
 8003324:	f7ff f84d 	bl	80023c2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003328:	4809      	ldr	r0, [pc, #36]	; (8003350 <prvInitialiseTaskLists+0x58>)
 800332a:	f7ff f84a 	bl	80023c2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800332e:	4809      	ldr	r0, [pc, #36]	; (8003354 <prvInitialiseTaskLists+0x5c>)
 8003330:	f7ff f847 	bl	80023c2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <prvInitialiseTaskLists+0x60>)
 8003336:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <prvInitialiseTaskLists+0x64>)
 800333a:	601c      	str	r4, [r3, #0]
 800333c:	bd38      	pop	{r3, r4, r5, pc}
 800333e:	bf00      	nop
 8003340:	20003c5c 	.word	0x20003c5c
 8003344:	20003d00 	.word	0x20003d00
 8003348:	20003d14 	.word	0x20003d14
 800334c:	20003d34 	.word	0x20003d34
 8003350:	20003d60 	.word	0x20003d60
 8003354:	20003d4c 	.word	0x20003d4c
 8003358:	20003c54 	.word	0x20003c54
 800335c:	20003c58 	.word	0x20003c58

08003360 <prvAddNewTaskToReadyList>:
{
 8003360:	b510      	push	{r4, lr}
 8003362:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003364:	f7ff f8d6 	bl	8002514 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003368:	4a20      	ldr	r2, [pc, #128]	; (80033ec <prvAddNewTaskToReadyList+0x8c>)
 800336a:	6813      	ldr	r3, [r2, #0]
 800336c:	3301      	adds	r3, #1
 800336e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003370:	4b1f      	ldr	r3, [pc, #124]	; (80033f0 <prvAddNewTaskToReadyList+0x90>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d031      	beq.n	80033dc <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <prvAddNewTaskToReadyList+0x94>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	b93b      	cbnz	r3, 800338e <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800337e:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <prvAddNewTaskToReadyList+0x90>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003386:	429a      	cmp	r2, r3
 8003388:	d801      	bhi.n	800338e <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 800338a:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <prvAddNewTaskToReadyList+0x90>)
 800338c:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 800338e:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <prvAddNewTaskToReadyList+0x98>)
 8003390:	6813      	ldr	r3, [r2, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003396:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003398:	2201      	movs	r2, #1
 800339a:	409a      	lsls	r2, r3
 800339c:	4917      	ldr	r1, [pc, #92]	; (80033fc <prvAddNewTaskToReadyList+0x9c>)
 800339e:	6808      	ldr	r0, [r1, #0]
 80033a0:	4302      	orrs	r2, r0
 80033a2:	600a      	str	r2, [r1, #0]
 80033a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033a8:	009a      	lsls	r2, r3, #2
 80033aa:	1d21      	adds	r1, r4, #4
 80033ac:	4814      	ldr	r0, [pc, #80]	; (8003400 <prvAddNewTaskToReadyList+0xa0>)
 80033ae:	4410      	add	r0, r2
 80033b0:	f7ff f815 	bl	80023de <vListInsertEnd>
	taskEXIT_CRITICAL();
 80033b4:	f7ff f8d0 	bl	8002558 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <prvAddNewTaskToReadyList+0x94>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	b16b      	cbz	r3, 80033da <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <prvAddNewTaskToReadyList+0x90>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d207      	bcs.n	80033da <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 80033ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <prvAddNewTaskToReadyList+0xa4>)
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <prvAddNewTaskToReadyList+0x90>)
 80033de:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033e0:	6813      	ldr	r3, [r2, #0]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d1d3      	bne.n	800338e <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 80033e6:	f7ff ff87 	bl	80032f8 <prvInitialiseTaskLists>
 80033ea:	e7d0      	b.n	800338e <prvAddNewTaskToReadyList+0x2e>
 80033ec:	20003ce8 	.word	0x20003ce8
 80033f0:	20003c50 	.word	0x20003c50
 80033f4:	20003d48 	.word	0x20003d48
 80033f8:	20003cf8 	.word	0x20003cf8
 80033fc:	20003cfc 	.word	0x20003cfc
 8003400:	20003c5c 	.word	0x20003c5c
 8003404:	e000ed04 	.word	0xe000ed04

08003408 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4604      	mov	r4, r0
 800340c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003410:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003412:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <prvAddCurrentTaskToDelayedList+0x80>)
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	3004      	adds	r0, #4
 8003418:	f7ff f807 	bl	800242a <uxListRemove>
 800341c:	b950      	cbnz	r0, 8003434 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <prvAddCurrentTaskToDelayedList+0x80>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	2301      	movs	r3, #1
 8003426:	fa03 f202 	lsl.w	r2, r3, r2
 800342a:	4918      	ldr	r1, [pc, #96]	; (800348c <prvAddCurrentTaskToDelayedList+0x84>)
 800342c:	680b      	ldr	r3, [r1, #0]
 800342e:	ea23 0302 	bic.w	r3, r3, r2
 8003432:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003434:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003438:	d013      	beq.n	8003462 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800343a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800343c:	4b12      	ldr	r3, [pc, #72]	; (8003488 <prvAddCurrentTaskToDelayedList+0x80>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8003442:	42a5      	cmp	r5, r4
 8003444:	d816      	bhi.n	8003474 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <prvAddCurrentTaskToDelayedList+0x88>)
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <prvAddCurrentTaskToDelayedList+0x80>)
 800344c:	6819      	ldr	r1, [r3, #0]
 800344e:	3104      	adds	r1, #4
 8003450:	f7fe ffd1 	bl	80023f6 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <prvAddCurrentTaskToDelayedList+0x8c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	429c      	cmp	r4, r3
 800345a:	d201      	bcs.n	8003460 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <prvAddCurrentTaskToDelayedList+0x8c>)
 800345e:	601c      	str	r4, [r3, #0]
 8003460:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003462:	2e00      	cmp	r6, #0
 8003464:	d0e9      	beq.n	800343a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <prvAddCurrentTaskToDelayedList+0x80>)
 8003468:	6819      	ldr	r1, [r3, #0]
 800346a:	3104      	adds	r1, #4
 800346c:	480a      	ldr	r0, [pc, #40]	; (8003498 <prvAddCurrentTaskToDelayedList+0x90>)
 800346e:	f7fe ffb6 	bl	80023de <vListInsertEnd>
 8003472:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <prvAddCurrentTaskToDelayedList+0x94>)
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <prvAddCurrentTaskToDelayedList+0x80>)
 800347a:	6819      	ldr	r1, [r3, #0]
 800347c:	3104      	adds	r1, #4
 800347e:	f7fe ffba 	bl	80023f6 <vListInsert>
 8003482:	bd70      	pop	{r4, r5, r6, pc}
 8003484:	20003d74 	.word	0x20003d74
 8003488:	20003c50 	.word	0x20003c50
 800348c:	20003cfc 	.word	0x20003cfc
 8003490:	20003c54 	.word	0x20003c54
 8003494:	20003d2c 	.word	0x20003d2c
 8003498:	20003d4c 	.word	0x20003d4c
 800349c:	20003c58 	.word	0x20003c58

080034a0 <xTaskCreate>:
	{
 80034a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034a4:	b085      	sub	sp, #20
 80034a6:	4606      	mov	r6, r0
 80034a8:	460f      	mov	r7, r1
 80034aa:	4615      	mov	r5, r2
 80034ac:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ae:	0090      	lsls	r0, r2, #2
 80034b0:	f7ff f9ce 	bl	8002850 <pvPortMalloc>
			if( pxStack != NULL )
 80034b4:	b300      	cbz	r0, 80034f8 <xTaskCreate+0x58>
 80034b6:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80034b8:	2054      	movs	r0, #84	; 0x54
 80034ba:	f7ff f9c9 	bl	8002850 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80034be:	4604      	mov	r4, r0
 80034c0:	b1b0      	cbz	r0, 80034f0 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80034c2:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80034c6:	b1cc      	cbz	r4, 80034fc <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034c8:	2300      	movs	r3, #0
 80034ca:	9303      	str	r3, [sp, #12]
 80034cc:	9402      	str	r4, [sp, #8]
 80034ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	4643      	mov	r3, r8
 80034d8:	462a      	mov	r2, r5
 80034da:	4639      	mov	r1, r7
 80034dc:	4630      	mov	r0, r6
 80034de:	f7ff feca 	bl	8003276 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff ff3c 	bl	8003360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034e8:	2001      	movs	r0, #1
	}
 80034ea:	b005      	add	sp, #20
 80034ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80034f0:	4648      	mov	r0, r9
 80034f2:	f7ff fa31 	bl	8002958 <vPortFree>
 80034f6:	e7e6      	b.n	80034c6 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 80034f8:	2400      	movs	r4, #0
 80034fa:	e7e4      	b.n	80034c6 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8003500:	e7f3      	b.n	80034ea <xTaskCreate+0x4a>
	...

08003504 <vTaskStartScheduler>:
{
 8003504:	b500      	push	{lr}
 8003506:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8003508:	4b17      	ldr	r3, [pc, #92]	; (8003568 <vTaskStartScheduler+0x64>)
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	2300      	movs	r3, #0
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003514:	4915      	ldr	r1, [pc, #84]	; (800356c <vTaskStartScheduler+0x68>)
 8003516:	4816      	ldr	r0, [pc, #88]	; (8003570 <vTaskStartScheduler+0x6c>)
 8003518:	f7ff ffc2 	bl	80034a0 <xTaskCreate>
	if( xReturn == pdPASS )
 800351c:	2801      	cmp	r0, #1
 800351e:	d005      	beq.n	800352c <vTaskStartScheduler+0x28>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003520:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003524:	d017      	beq.n	8003556 <vTaskStartScheduler+0x52>
}
 8003526:	b003      	add	sp, #12
 8003528:	f85d fb04 	ldr.w	pc, [sp], #4
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800353c:	f04f 32ff 	mov.w	r2, #4294967295
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <vTaskStartScheduler+0x70>)
 8003542:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003544:	2201      	movs	r2, #1
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <vTaskStartScheduler+0x74>)
 8003548:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800354a:	2200      	movs	r2, #0
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <vTaskStartScheduler+0x78>)
 800354e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003550:	f7ff f87c 	bl	800264c <xPortStartScheduler>
 8003554:	e7e7      	b.n	8003526 <vTaskStartScheduler+0x22>
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	e7fe      	b.n	8003566 <vTaskStartScheduler+0x62>
 8003568:	20003d28 	.word	0x20003d28
 800356c:	0800cce4 	.word	0x0800cce4
 8003570:	08003875 	.word	0x08003875
 8003574:	20003d2c 	.word	0x20003d2c
 8003578:	20003d48 	.word	0x20003d48
 800357c:	20003d74 	.word	0x20003d74

08003580 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003580:	4a02      	ldr	r2, [pc, #8]	; (800358c <vTaskSuspendAll+0xc>)
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	3301      	adds	r3, #1
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20003cf4 	.word	0x20003cf4

08003590 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003590:	4b01      	ldr	r3, [pc, #4]	; (8003598 <xTaskGetTickCount+0x8>)
 8003592:	6818      	ldr	r0, [r3, #0]
}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20003d74 	.word	0x20003d74

0800359c <xTaskGetTickCountFromISR>:
{
 800359c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800359e:	f7ff f8cb 	bl	8002738 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80035a2:	4b01      	ldr	r3, [pc, #4]	; (80035a8 <xTaskGetTickCountFromISR+0xc>)
 80035a4:	6818      	ldr	r0, [r3, #0]
}
 80035a6:	bd08      	pop	{r3, pc}
 80035a8:	20003d74 	.word	0x20003d74

080035ac <xTaskIncrementTick>:
{
 80035ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ae:	4b3c      	ldr	r3, [pc, #240]	; (80036a0 <xTaskIncrementTick+0xf4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d168      	bne.n	8003688 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + 1;
 80035b6:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <xTaskIncrementTick+0xf8>)
 80035b8:	681d      	ldr	r5, [r3, #0]
 80035ba:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80035bc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80035be:	b9c5      	cbnz	r5, 80035f2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80035c0:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <xTaskIncrementTick+0xfc>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	b143      	cbz	r3, 80035da <xTaskIncrementTick+0x2e>
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	e7fe      	b.n	80035d8 <xTaskIncrementTick+0x2c>
 80035da:	4a33      	ldr	r2, [pc, #204]	; (80036a8 <xTaskIncrementTick+0xfc>)
 80035dc:	6811      	ldr	r1, [r2, #0]
 80035de:	4b33      	ldr	r3, [pc, #204]	; (80036ac <xTaskIncrementTick+0x100>)
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	6010      	str	r0, [r2, #0]
 80035e4:	6019      	str	r1, [r3, #0]
 80035e6:	4a32      	ldr	r2, [pc, #200]	; (80036b0 <xTaskIncrementTick+0x104>)
 80035e8:	6813      	ldr	r3, [r2, #0]
 80035ea:	3301      	adds	r3, #1
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	f7ff fe1f 	bl	8003230 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035f2:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <xTaskIncrementTick+0x108>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429d      	cmp	r5, r3
 80035f8:	d23a      	bcs.n	8003670 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 80035fa:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035fc:	4b2e      	ldr	r3, [pc, #184]	; (80036b8 <xTaskIncrementTick+0x10c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003606:	009a      	lsls	r2, r3, #2
 8003608:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <xTaskIncrementTick+0x110>)
 800360a:	589b      	ldr	r3, [r3, r2]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d940      	bls.n	8003692 <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 8003610:	2401      	movs	r4, #1
 8003612:	e03e      	b.n	8003692 <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 8003614:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003616:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <xTaskIncrementTick+0xfc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	b353      	cbz	r3, 8003674 <xTaskIncrementTick+0xc8>
 800361e:	2300      	movs	r3, #0
 8003620:	bb53      	cbnz	r3, 8003678 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <xTaskIncrementTick+0xfc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800362a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800362c:	429d      	cmp	r5, r3
 800362e:	d328      	bcc.n	8003682 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003630:	1d37      	adds	r7, r6, #4
 8003632:	4638      	mov	r0, r7
 8003634:	f7fe fef9 	bl	800242a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003638:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800363a:	b11b      	cbz	r3, 8003644 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800363c:	f106 0018 	add.w	r0, r6, #24
 8003640:	f7fe fef3 	bl	800242a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003644:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003646:	2201      	movs	r2, #1
 8003648:	409a      	lsls	r2, r3
 800364a:	491d      	ldr	r1, [pc, #116]	; (80036c0 <xTaskIncrementTick+0x114>)
 800364c:	6808      	ldr	r0, [r1, #0]
 800364e:	4302      	orrs	r2, r0
 8003650:	600a      	str	r2, [r1, #0]
 8003652:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003656:	009a      	lsls	r2, r3, #2
 8003658:	4639      	mov	r1, r7
 800365a:	4818      	ldr	r0, [pc, #96]	; (80036bc <xTaskIncrementTick+0x110>)
 800365c:	4410      	add	r0, r2
 800365e:	f7fe febe 	bl	80023de <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003662:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <xTaskIncrementTick+0x10c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	429a      	cmp	r2, r3
 800366c:	d2d2      	bcs.n	8003614 <xTaskIncrementTick+0x68>
 800366e:	e7d2      	b.n	8003616 <xTaskIncrementTick+0x6a>
 8003670:	2400      	movs	r4, #0
 8003672:	e7d0      	b.n	8003616 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003674:	2301      	movs	r3, #1
 8003676:	e7d3      	b.n	8003620 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003678:	f04f 32ff 	mov.w	r2, #4294967295
 800367c:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <xTaskIncrementTick+0x108>)
 800367e:	601a      	str	r2, [r3, #0]
					break;
 8003680:	e7bc      	b.n	80035fc <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8003682:	4a0c      	ldr	r2, [pc, #48]	; (80036b4 <xTaskIncrementTick+0x108>)
 8003684:	6013      	str	r3, [r2, #0]
						break;
 8003686:	e7b9      	b.n	80035fc <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8003688:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <xTaskIncrementTick+0x118>)
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003690:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <xTaskIncrementTick+0x11c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	b103      	cbz	r3, 800369a <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 8003698:	2401      	movs	r4, #1
}
 800369a:	4620      	mov	r0, r4
 800369c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800369e:	bf00      	nop
 80036a0:	20003cf4 	.word	0x20003cf4
 80036a4:	20003d74 	.word	0x20003d74
 80036a8:	20003c54 	.word	0x20003c54
 80036ac:	20003c58 	.word	0x20003c58
 80036b0:	20003d30 	.word	0x20003d30
 80036b4:	20003d2c 	.word	0x20003d2c
 80036b8:	20003c50 	.word	0x20003c50
 80036bc:	20003c5c 	.word	0x20003c5c
 80036c0:	20003cfc 	.word	0x20003cfc
 80036c4:	20003cf0 	.word	0x20003cf0
 80036c8:	20003d78 	.word	0x20003d78

080036cc <xTaskResumeAll>:
{
 80036cc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80036ce:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <xTaskResumeAll+0xd8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	b943      	cbnz	r3, 80036e6 <xTaskResumeAll+0x1a>
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	e7fe      	b.n	80036e4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80036e6:	f7fe ff15 	bl	8002514 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80036ea:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <xTaskResumeAll+0xd8>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	3a01      	subs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d150      	bne.n	800379a <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <xTaskResumeAll+0xdc>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	b923      	cbnz	r3, 8003708 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 80036fe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003700:	f7fe ff2a 	bl	8002558 <vPortExitCritical>
}
 8003704:	4620      	mov	r0, r4
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800370a:	4b28      	ldr	r3, [pc, #160]	; (80037ac <xTaskResumeAll+0xe0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	b31b      	cbz	r3, 8003758 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003710:	4b26      	ldr	r3, [pc, #152]	; (80037ac <xTaskResumeAll+0xe0>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003716:	f104 0018 	add.w	r0, r4, #24
 800371a:	f7fe fe86 	bl	800242a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800371e:	1d25      	adds	r5, r4, #4
 8003720:	4628      	mov	r0, r5
 8003722:	f7fe fe82 	bl	800242a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003726:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003728:	2201      	movs	r2, #1
 800372a:	409a      	lsls	r2, r3
 800372c:	4920      	ldr	r1, [pc, #128]	; (80037b0 <xTaskResumeAll+0xe4>)
 800372e:	6808      	ldr	r0, [r1, #0]
 8003730:	4302      	orrs	r2, r0
 8003732:	600a      	str	r2, [r1, #0]
 8003734:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003738:	009a      	lsls	r2, r3, #2
 800373a:	4629      	mov	r1, r5
 800373c:	481d      	ldr	r0, [pc, #116]	; (80037b4 <xTaskResumeAll+0xe8>)
 800373e:	4410      	add	r0, r2
 8003740:	f7fe fe4d 	bl	80023de <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003744:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003746:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <xTaskResumeAll+0xec>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	429a      	cmp	r2, r3
 800374e:	d3dc      	bcc.n	800370a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8003750:	2201      	movs	r2, #1
 8003752:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <xTaskResumeAll+0xf0>)
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	e7d8      	b.n	800370a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8003758:	b10c      	cbz	r4, 800375e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800375a:	f7ff fd69 	bl	8003230 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800375e:	4b18      	ldr	r3, [pc, #96]	; (80037c0 <xTaskResumeAll+0xf4>)
 8003760:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003762:	b974      	cbnz	r4, 8003782 <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 8003764:	4b15      	ldr	r3, [pc, #84]	; (80037bc <xTaskResumeAll+0xf0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	b1cb      	cbz	r3, 800379e <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 800376a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <xTaskResumeAll+0xf8>)
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800377a:	2401      	movs	r4, #1
 800377c:	e7c0      	b.n	8003700 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800377e:	3c01      	subs	r4, #1
 8003780:	d007      	beq.n	8003792 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 8003782:	f7ff ff13 	bl	80035ac <xTaskIncrementTick>
 8003786:	2800      	cmp	r0, #0
 8003788:	d0f9      	beq.n	800377e <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 800378a:	2201      	movs	r2, #1
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <xTaskResumeAll+0xf0>)
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e7f5      	b.n	800377e <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8003792:	2200      	movs	r2, #0
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <xTaskResumeAll+0xf4>)
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e7e4      	b.n	8003764 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 800379a:	2400      	movs	r4, #0
 800379c:	e7b0      	b.n	8003700 <xTaskResumeAll+0x34>
 800379e:	2400      	movs	r4, #0
 80037a0:	e7ae      	b.n	8003700 <xTaskResumeAll+0x34>
 80037a2:	bf00      	nop
 80037a4:	20003cf4 	.word	0x20003cf4
 80037a8:	20003ce8 	.word	0x20003ce8
 80037ac:	20003d34 	.word	0x20003d34
 80037b0:	20003cfc 	.word	0x20003cfc
 80037b4:	20003c5c 	.word	0x20003c5c
 80037b8:	20003c50 	.word	0x20003c50
 80037bc:	20003d78 	.word	0x20003d78
 80037c0:	20003cf0 	.word	0x20003cf0
 80037c4:	e000ed04 	.word	0xe000ed04

080037c8 <vTaskDelay>:
	{
 80037c8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037ca:	b1a8      	cbz	r0, 80037f8 <vTaskDelay+0x30>
 80037cc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <vTaskDelay+0x48>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	b143      	cbz	r3, 80037e6 <vTaskDelay+0x1e>
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	e7fe      	b.n	80037e4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80037e6:	f7ff fecb 	bl	8003580 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037ea:	2100      	movs	r1, #0
 80037ec:	4620      	mov	r0, r4
 80037ee:	f7ff fe0b 	bl	8003408 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80037f2:	f7ff ff6b 	bl	80036cc <xTaskResumeAll>
 80037f6:	e000      	b.n	80037fa <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 80037f8:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 80037fa:	b938      	cbnz	r0, 800380c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80037fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <vTaskDelay+0x4c>)
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	bd10      	pop	{r4, pc}
 800380e:	bf00      	nop
 8003810:	20003cf4 	.word	0x20003cf4
 8003814:	e000ed04 	.word	0xe000ed04

08003818 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003818:	4b13      	ldr	r3, [pc, #76]	; (8003868 <prvCheckTasksWaitingTermination+0x50>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	b313      	cbz	r3, 8003864 <prvCheckTasksWaitingTermination+0x4c>
{
 800381e:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8003820:	f7ff feae 	bl	8003580 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003824:	4b11      	ldr	r3, [pc, #68]	; (800386c <prvCheckTasksWaitingTermination+0x54>)
 8003826:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8003828:	f7ff ff50 	bl	80036cc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800382c:	b924      	cbnz	r4, 8003838 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800382e:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <prvCheckTasksWaitingTermination+0x50>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f4      	bne.n	8003820 <prvCheckTasksWaitingTermination+0x8>
}
 8003836:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8003838:	f7fe fe6c 	bl	8002514 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <prvCheckTasksWaitingTermination+0x54>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003842:	1d20      	adds	r0, r4, #4
 8003844:	f7fe fdf1 	bl	800242a <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003848:	4a09      	ldr	r2, [pc, #36]	; (8003870 <prvCheckTasksWaitingTermination+0x58>)
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	3b01      	subs	r3, #1
 800384e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003850:	4a05      	ldr	r2, [pc, #20]	; (8003868 <prvCheckTasksWaitingTermination+0x50>)
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8003858:	f7fe fe7e 	bl	8002558 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 800385c:	4620      	mov	r0, r4
 800385e:	f7ff fd01 	bl	8003264 <prvDeleteTCB>
 8003862:	e7e4      	b.n	800382e <prvCheckTasksWaitingTermination+0x16>
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20003cec 	.word	0x20003cec
 800386c:	20003d60 	.word	0x20003d60
 8003870:	20003ce8 	.word	0x20003ce8

08003874 <prvIdleTask>:
{
 8003874:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8003876:	f7ff ffcf 	bl	8003818 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <prvIdleTask+0x20>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d9f9      	bls.n	8003876 <prvIdleTask+0x2>
				taskYIELD();
 8003882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <prvIdleTask+0x24>)
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	e7f0      	b.n	8003876 <prvIdleTask+0x2>
 8003894:	20003c5c 	.word	0x20003c5c
 8003898:	e000ed04 	.word	0xe000ed04

0800389c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800389c:	4b21      	ldr	r3, [pc, #132]	; (8003924 <vTaskSwitchContext+0x88>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	b9c3      	cbnz	r3, 80038d4 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 80038a2:	2200      	movs	r2, #0
 80038a4:	4b20      	ldr	r3, [pc, #128]	; (8003928 <vTaskSwitchContext+0x8c>)
 80038a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038a8:	4b20      	ldr	r3, [pc, #128]	; (800392c <vTaskSwitchContext+0x90>)
 80038aa:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f1c3 031f 	rsb	r3, r3, #31
 80038b6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80038ba:	008a      	lsls	r2, r1, #2
 80038bc:	491c      	ldr	r1, [pc, #112]	; (8003930 <vTaskSwitchContext+0x94>)
 80038be:	588a      	ldr	r2, [r1, r2]
 80038c0:	b962      	cbnz	r2, 80038dc <vTaskSwitchContext+0x40>
	__asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	e7fe      	b.n	80038d2 <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 80038d4:	2201      	movs	r2, #1
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <vTaskSwitchContext+0x8c>)
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	4770      	bx	lr
{
 80038dc:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038de:	4814      	ldr	r0, [pc, #80]	; (8003930 <vTaskSwitchContext+0x94>)
 80038e0:	009a      	lsls	r2, r3, #2
 80038e2:	18d4      	adds	r4, r2, r3
 80038e4:	00a1      	lsls	r1, r4, #2
 80038e6:	4401      	add	r1, r0
 80038e8:	684c      	ldr	r4, [r1, #4]
 80038ea:	6864      	ldr	r4, [r4, #4]
 80038ec:	604c      	str	r4, [r1, #4]
 80038ee:	441a      	add	r2, r3
 80038f0:	0091      	lsls	r1, r2, #2
 80038f2:	3108      	adds	r1, #8
 80038f4:	4408      	add	r0, r1
 80038f6:	4284      	cmp	r4, r0
 80038f8:	d00b      	beq.n	8003912 <vTaskSwitchContext+0x76>
 80038fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <vTaskSwitchContext+0x94>)
 8003902:	4413      	add	r3, r2
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <vTaskSwitchContext+0x98>)
 800390a:	601a      	str	r2, [r3, #0]
}
 800390c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003910:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003912:	6860      	ldr	r0, [r4, #4]
 8003914:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003918:	0091      	lsls	r1, r2, #2
 800391a:	4a05      	ldr	r2, [pc, #20]	; (8003930 <vTaskSwitchContext+0x94>)
 800391c:	440a      	add	r2, r1
 800391e:	6050      	str	r0, [r2, #4]
 8003920:	e7eb      	b.n	80038fa <vTaskSwitchContext+0x5e>
 8003922:	bf00      	nop
 8003924:	20003cf4 	.word	0x20003cf4
 8003928:	20003d78 	.word	0x20003d78
 800392c:	20003cfc 	.word	0x20003cfc
 8003930:	20003c5c 	.word	0x20003c5c
 8003934:	20003c50 	.word	0x20003c50

08003938 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003938:	b940      	cbnz	r0, 800394c <vTaskPlaceOnEventList+0x14>
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	e7fe      	b.n	800394a <vTaskPlaceOnEventList+0x12>
{
 800394c:	b510      	push	{r4, lr}
 800394e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003950:	4b04      	ldr	r3, [pc, #16]	; (8003964 <vTaskPlaceOnEventList+0x2c>)
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	3118      	adds	r1, #24
 8003956:	f7fe fd4e 	bl	80023f6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800395a:	2101      	movs	r1, #1
 800395c:	4620      	mov	r0, r4
 800395e:	f7ff fd53 	bl	8003408 <prvAddCurrentTaskToDelayedList>
 8003962:	bd10      	pop	{r4, pc}
 8003964:	20003c50 	.word	0x20003c50

08003968 <xTaskRemoveFromEventList>:
{
 8003968:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800396a:	68c3      	ldr	r3, [r0, #12]
 800396c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800396e:	b324      	cbz	r4, 80039ba <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003970:	f104 0518 	add.w	r5, r4, #24
 8003974:	4628      	mov	r0, r5
 8003976:	f7fe fd58 	bl	800242a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800397a:	4b18      	ldr	r3, [pc, #96]	; (80039dc <xTaskRemoveFromEventList+0x74>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	bb2b      	cbnz	r3, 80039cc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003980:	1d25      	adds	r5, r4, #4
 8003982:	4628      	mov	r0, r5
 8003984:	f7fe fd51 	bl	800242a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003988:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800398a:	2201      	movs	r2, #1
 800398c:	409a      	lsls	r2, r3
 800398e:	4914      	ldr	r1, [pc, #80]	; (80039e0 <xTaskRemoveFromEventList+0x78>)
 8003990:	6808      	ldr	r0, [r1, #0]
 8003992:	4302      	orrs	r2, r0
 8003994:	600a      	str	r2, [r1, #0]
 8003996:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800399a:	009a      	lsls	r2, r3, #2
 800399c:	4629      	mov	r1, r5
 800399e:	4811      	ldr	r0, [pc, #68]	; (80039e4 <xTaskRemoveFromEventList+0x7c>)
 80039a0:	4410      	add	r0, r2
 80039a2:	f7fe fd1c 	bl	80023de <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <xTaskRemoveFromEventList+0x80>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d911      	bls.n	80039d6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80039b2:	2001      	movs	r0, #1
 80039b4:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <xTaskRemoveFromEventList+0x84>)
 80039b6:	6018      	str	r0, [r3, #0]
 80039b8:	bd38      	pop	{r3, r4, r5, pc}
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	e7fe      	b.n	80039ca <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039cc:	4629      	mov	r1, r5
 80039ce:	4808      	ldr	r0, [pc, #32]	; (80039f0 <xTaskRemoveFromEventList+0x88>)
 80039d0:	f7fe fd05 	bl	80023de <vListInsertEnd>
 80039d4:	e7e7      	b.n	80039a6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80039d6:	2000      	movs	r0, #0
}
 80039d8:	bd38      	pop	{r3, r4, r5, pc}
 80039da:	bf00      	nop
 80039dc:	20003cf4 	.word	0x20003cf4
 80039e0:	20003cfc 	.word	0x20003cfc
 80039e4:	20003c5c 	.word	0x20003c5c
 80039e8:	20003c50 	.word	0x20003c50
 80039ec:	20003d78 	.word	0x20003d78
 80039f0:	20003d34 	.word	0x20003d34

080039f4 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 80039f4:	b130      	cbz	r0, 8003a04 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <vTaskSetTimeOutState+0x24>)
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039fc:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <vTaskSetTimeOutState+0x28>)
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	6042      	str	r2, [r0, #4]
 8003a02:	4770      	bx	lr
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	e7fe      	b.n	8003a14 <vTaskSetTimeOutState+0x20>
 8003a16:	bf00      	nop
 8003a18:	20003d30 	.word	0x20003d30
 8003a1c:	20003d74 	.word	0x20003d74

08003a20 <xTaskCheckForTimeOut>:
{
 8003a20:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8003a22:	b1c0      	cbz	r0, 8003a56 <xTaskCheckForTimeOut+0x36>
 8003a24:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8003a26:	b1f9      	cbz	r1, 8003a68 <xTaskCheckForTimeOut+0x48>
 8003a28:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8003a2a:	f7fe fd73 	bl	8002514 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003a2e:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <xTaskCheckForTimeOut+0x78>)
 8003a30:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003a32:	682b      	ldr	r3, [r5, #0]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d02a      	beq.n	8003a90 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a3a:	6820      	ldr	r0, [r4, #0]
 8003a3c:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <xTaskCheckForTimeOut+0x7c>)
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	4290      	cmp	r0, r2
 8003a42:	d002      	beq.n	8003a4a <xTaskCheckForTimeOut+0x2a>
 8003a44:	6862      	ldr	r2, [r4, #4]
 8003a46:	4291      	cmp	r1, r2
 8003a48:	d224      	bcs.n	8003a94 <xTaskCheckForTimeOut+0x74>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a4a:	6862      	ldr	r2, [r4, #4]
 8003a4c:	1a88      	subs	r0, r1, r2
 8003a4e:	4283      	cmp	r3, r0
 8003a50:	d813      	bhi.n	8003a7a <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8003a52:	2401      	movs	r4, #1
 8003a54:	e018      	b.n	8003a88 <xTaskCheckForTimeOut+0x68>
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	e7fe      	b.n	8003a66 <xTaskCheckForTimeOut+0x46>
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	e7fe      	b.n	8003a78 <xTaskCheckForTimeOut+0x58>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003a7a:	1a52      	subs	r2, r2, r1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003a80:	4620      	mov	r0, r4
 8003a82:	f7ff ffb7 	bl	80039f4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003a86:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003a88:	f7fe fd66 	bl	8002558 <vPortExitCritical>
}
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 8003a90:	2400      	movs	r4, #0
 8003a92:	e7f9      	b.n	8003a88 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8003a94:	2401      	movs	r4, #1
 8003a96:	e7f7      	b.n	8003a88 <xTaskCheckForTimeOut+0x68>
 8003a98:	20003d74 	.word	0x20003d74
 8003a9c:	20003d30 	.word	0x20003d30

08003aa0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	4b01      	ldr	r3, [pc, #4]	; (8003aa8 <vTaskMissedYield+0x8>)
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	4770      	bx	lr
 8003aa8:	20003d78 	.word	0x20003d78

08003aac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <xTaskGetSchedulerState+0x18>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	b123      	cbz	r3, 8003abc <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <xTaskGetSchedulerState+0x1c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	b91b      	cbnz	r3, 8003ac0 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8003ab8:	2002      	movs	r0, #2
 8003aba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003abc:	2001      	movs	r0, #1
 8003abe:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ac0:	2000      	movs	r0, #0
	}
 8003ac2:	4770      	bx	lr
 8003ac4:	20003d48 	.word	0x20003d48
 8003ac8:	20003cf4 	.word	0x20003cf4

08003acc <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d047      	beq.n	8003b60 <vTaskPriorityInherit+0x94>
	{
 8003ad0:	b538      	push	{r3, r4, r5, lr}
 8003ad2:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003ad4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003ad6:	4923      	ldr	r1, [pc, #140]	; (8003b64 <vTaskPriorityInherit+0x98>)
 8003ad8:	6809      	ldr	r1, [r1, #0]
 8003ada:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003adc:	428b      	cmp	r3, r1
 8003ade:	d216      	bcs.n	8003b0e <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003ae0:	6981      	ldr	r1, [r0, #24]
 8003ae2:	2900      	cmp	r1, #0
 8003ae4:	db05      	blt.n	8003af2 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae6:	491f      	ldr	r1, [pc, #124]	; (8003b64 <vTaskPriorityInherit+0x98>)
 8003ae8:	6809      	ldr	r1, [r1, #0]
 8003aea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003aec:	f1c1 0107 	rsb	r1, r1, #7
 8003af0:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003af2:	6960      	ldr	r0, [r4, #20]
 8003af4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003af8:	0099      	lsls	r1, r3, #2
 8003afa:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <vTaskPriorityInherit+0x9c>)
 8003afc:	440b      	add	r3, r1
 8003afe:	4298      	cmp	r0, r3
 8003b00:	d006      	beq.n	8003b10 <vTaskPriorityInherit+0x44>
 8003b02:	2300      	movs	r3, #0
 8003b04:	b933      	cbnz	r3, 8003b14 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b06:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <vTaskPriorityInherit+0x98>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b10:	2301      	movs	r3, #1
 8003b12:	e7f7      	b.n	8003b04 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b14:	1d25      	adds	r5, r4, #4
 8003b16:	4628      	mov	r0, r5
 8003b18:	f7fe fc87 	bl	800242a <uxListRemove>
 8003b1c:	b968      	cbnz	r0, 8003b3a <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b20:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003b24:	008a      	lsls	r2, r1, #2
 8003b26:	4910      	ldr	r1, [pc, #64]	; (8003b68 <vTaskPriorityInherit+0x9c>)
 8003b28:	588a      	ldr	r2, [r1, r2]
 8003b2a:	b932      	cbnz	r2, 8003b3a <vTaskPriorityInherit+0x6e>
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	490e      	ldr	r1, [pc, #56]	; (8003b6c <vTaskPriorityInherit+0xa0>)
 8003b32:	680b      	ldr	r3, [r1, #0]
 8003b34:	ea23 0302 	bic.w	r3, r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <vTaskPriorityInherit+0x98>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003b42:	2201      	movs	r2, #1
 8003b44:	409a      	lsls	r2, r3
 8003b46:	4909      	ldr	r1, [pc, #36]	; (8003b6c <vTaskPriorityInherit+0xa0>)
 8003b48:	6808      	ldr	r0, [r1, #0]
 8003b4a:	4302      	orrs	r2, r0
 8003b4c:	600a      	str	r2, [r1, #0]
 8003b4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b52:	009a      	lsls	r2, r3, #2
 8003b54:	4629      	mov	r1, r5
 8003b56:	4804      	ldr	r0, [pc, #16]	; (8003b68 <vTaskPriorityInherit+0x9c>)
 8003b58:	4410      	add	r0, r2
 8003b5a:	f7fe fc40 	bl	80023de <vListInsertEnd>
 8003b5e:	bd38      	pop	{r3, r4, r5, pc}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20003c50 	.word	0x20003c50
 8003b68:	20003c5c 	.word	0x20003c5c
 8003b6c:	20003cfc 	.word	0x20003cfc

08003b70 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d04a      	beq.n	8003c0a <xTaskPriorityDisinherit+0x9a>
	{
 8003b74:	b538      	push	{r3, r4, r5, lr}
 8003b76:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8003b78:	4a27      	ldr	r2, [pc, #156]	; (8003c18 <xTaskPriorityDisinherit+0xa8>)
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	4290      	cmp	r0, r2
 8003b7e:	d008      	beq.n	8003b92 <xTaskPriorityDisinherit+0x22>
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	e7fe      	b.n	8003b90 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b92:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003b94:	b942      	cbnz	r2, 8003ba8 <xTaskPriorityDisinherit+0x38>
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	e7fe      	b.n	8003ba6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8003ba8:	3a01      	subs	r2, #1
 8003baa:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003bae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003bb0:	4288      	cmp	r0, r1
 8003bb2:	d02c      	beq.n	8003c0e <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bb4:	bb6a      	cbnz	r2, 8003c12 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bb6:	1d25      	adds	r5, r4, #4
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f7fe fc36 	bl	800242a <uxListRemove>
 8003bbe:	b970      	cbnz	r0, 8003bde <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003bc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bc2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003bc6:	008b      	lsls	r3, r1, #2
 8003bc8:	4914      	ldr	r1, [pc, #80]	; (8003c1c <xTaskPriorityDisinherit+0xac>)
 8003bca:	58cb      	ldr	r3, [r1, r3]
 8003bcc:	b93b      	cbnz	r3, 8003bde <xTaskPriorityDisinherit+0x6e>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	fa03 f202 	lsl.w	r2, r3, r2
 8003bd4:	4912      	ldr	r1, [pc, #72]	; (8003c20 <xTaskPriorityDisinherit+0xb0>)
 8003bd6:	680b      	ldr	r3, [r1, #0]
 8003bd8:	ea23 0302 	bic.w	r3, r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003be0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be2:	f1c3 0207 	rsb	r2, r3, #7
 8003be6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003be8:	2401      	movs	r4, #1
 8003bea:	fa04 f203 	lsl.w	r2, r4, r3
 8003bee:	490c      	ldr	r1, [pc, #48]	; (8003c20 <xTaskPriorityDisinherit+0xb0>)
 8003bf0:	6808      	ldr	r0, [r1, #0]
 8003bf2:	4302      	orrs	r2, r0
 8003bf4:	600a      	str	r2, [r1, #0]
 8003bf6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bfa:	009a      	lsls	r2, r3, #2
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	4807      	ldr	r0, [pc, #28]	; (8003c1c <xTaskPriorityDisinherit+0xac>)
 8003c00:	4410      	add	r0, r2
 8003c02:	f7fe fbec 	bl	80023de <vListInsertEnd>
					xReturn = pdTRUE;
 8003c06:	4620      	mov	r0, r4
 8003c08:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	4770      	bx	lr
 8003c0e:	2000      	movs	r0, #0
 8003c10:	bd38      	pop	{r3, r4, r5, pc}
 8003c12:	2000      	movs	r0, #0
	}
 8003c14:	bd38      	pop	{r3, r4, r5, pc}
 8003c16:	bf00      	nop
 8003c18:	20003c50 	.word	0x20003c50
 8003c1c:	20003c5c 	.word	0x20003c5c
 8003c20:	20003cfc 	.word	0x20003cfc

08003c24 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003c24:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <pvTaskIncrementMutexHeldCount+0x18>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	b123      	cbz	r3, 8003c34 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003c2a:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <pvTaskIncrementMutexHeldCount+0x18>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8003c30:	3301      	adds	r3, #1
 8003c32:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8003c34:	4b01      	ldr	r3, [pc, #4]	; (8003c3c <pvTaskIncrementMutexHeldCount+0x18>)
 8003c36:	6818      	ldr	r0, [r3, #0]
	}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20003c50 	.word	0x20003c50

08003c40 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8003c40:	b510      	push	{r4, lr}
 8003c42:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003c44:	680a      	ldr	r2, [r1, #0]
 8003c46:	320c      	adds	r2, #12
 8003c48:	f001 fc26 	bl	8005498 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	b908      	cbnz	r0, 8003c54 <netconn_apimsg+0x14>
    return apimsg->err;
 8003c50:	f994 3004 	ldrsb.w	r3, [r4, #4]
  }
  return err;
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd10      	pop	{r4, pc}

08003c58 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8003c58:	b500      	push	{lr}
 8003c5a:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003c5c:	b160      	cbz	r0, 8003c78 <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8003c5e:	9001      	str	r0, [sp, #4]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8003c60:	f88d 100c 	strb.w	r1, [sp, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8003c64:	2329      	movs	r3, #41	; 0x29
 8003c66:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8003c6a:	a901      	add	r1, sp, #4
 8003c6c:	4807      	ldr	r0, [pc, #28]	; (8003c8c <netconn_close_shutdown+0x34>)
 8003c6e:	f7ff ffe7 	bl	8003c40 <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 8003c72:	b007      	add	sp, #28
 8003c74:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <netconn_close_shutdown+0x38>)
 8003c7a:	f44f 724a 	mov.w	r2, #808	; 0x328
 8003c7e:	4905      	ldr	r1, [pc, #20]	; (8003c94 <netconn_close_shutdown+0x3c>)
 8003c80:	4805      	ldr	r0, [pc, #20]	; (8003c98 <netconn_close_shutdown+0x40>)
 8003c82:	f008 fdc6 	bl	800c812 <iprintf>
 8003c86:	f06f 000f 	mvn.w	r0, #15
 8003c8a:	e7f2      	b.n	8003c72 <netconn_close_shutdown+0x1a>
 8003c8c:	08005179 	.word	0x08005179
 8003c90:	0800cd48 	.word	0x0800cd48
 8003c94:	0800cd7c 	.word	0x0800cd7c
 8003c98:	0800cd98 	.word	0x0800cd98

08003c9c <netconn_recv_data>:
{
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	b086      	sub	sp, #24
  void *buf = NULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8003ca4:	b1b1      	cbz	r1, 8003cd4 <netconn_recv_data+0x38>
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	460d      	mov	r5, r1
  *new_buf = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8003cae:	b1d8      	cbz	r0, 8003ce8 <netconn_recv_data+0x4c>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8003cb0:	7803      	ldrb	r3, [r0, #0]
 8003cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d020      	beq.n	8003cfc <netconn_recv_data+0x60>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8003cba:	f104 0610 	add.w	r6, r4, #16
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	f007 ffae 	bl	800bc20 <sys_mbox_valid>
 8003cc4:	b340      	cbz	r0, 8003d18 <netconn_recv_data+0x7c>
  if (ERR_IS_FATAL(conn->last_err)) {
 8003cc6:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8003cca:	f110 0f0c 	cmn.w	r0, #12
 8003cce:	da2d      	bge.n	8003d2c <netconn_recv_data+0x90>
}
 8003cd0:	b006      	add	sp, #24
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8003cd4:	4b3a      	ldr	r3, [pc, #232]	; (8003dc0 <netconn_recv_data+0x124>)
 8003cd6:	f240 12e7 	movw	r2, #487	; 0x1e7
 8003cda:	493a      	ldr	r1, [pc, #232]	; (8003dc4 <netconn_recv_data+0x128>)
 8003cdc:	483a      	ldr	r0, [pc, #232]	; (8003dc8 <netconn_recv_data+0x12c>)
 8003cde:	f008 fd98 	bl	800c812 <iprintf>
 8003ce2:	f06f 000f 	mvn.w	r0, #15
 8003ce6:	e7f3      	b.n	8003cd0 <netconn_recv_data+0x34>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8003ce8:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <netconn_recv_data+0x124>)
 8003cea:	f240 12e9 	movw	r2, #489	; 0x1e9
 8003cee:	4937      	ldr	r1, [pc, #220]	; (8003dcc <netconn_recv_data+0x130>)
 8003cf0:	4835      	ldr	r0, [pc, #212]	; (8003dc8 <netconn_recv_data+0x12c>)
 8003cf2:	f008 fd8e 	bl	800c812 <iprintf>
 8003cf6:	f06f 000f 	mvn.w	r0, #15
 8003cfa:	e7e9      	b.n	8003cd0 <netconn_recv_data+0x34>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8003cfc:	3010      	adds	r0, #16
 8003cfe:	f007 ff8f 	bl	800bc20 <sys_mbox_valid>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d1d9      	bne.n	8003cba <netconn_recv_data+0x1e>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8003d06:	f104 0014 	add.w	r0, r4, #20
 8003d0a:	f007 ff89 	bl	800bc20 <sys_mbox_valid>
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d053      	beq.n	8003dba <netconn_recv_data+0x11e>
 8003d12:	f06f 000a 	mvn.w	r0, #10
 8003d16:	e7db      	b.n	8003cd0 <netconn_recv_data+0x34>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8003d18:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <netconn_recv_data+0x124>)
 8003d1a:	f240 12f5 	movw	r2, #501	; 0x1f5
 8003d1e:	492c      	ldr	r1, [pc, #176]	; (8003dd0 <netconn_recv_data+0x134>)
 8003d20:	4829      	ldr	r0, [pc, #164]	; (8003dc8 <netconn_recv_data+0x12c>)
 8003d22:	f008 fd76 	bl	800c812 <iprintf>
 8003d26:	f06f 000a 	mvn.w	r0, #10
 8003d2a:	e7d1      	b.n	8003cd0 <netconn_recv_data+0x34>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	a905      	add	r1, sp, #20
 8003d30:	4630      	mov	r0, r6
 8003d32:	f007 ff36 	bl	800bba2 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8003d36:	7823      	ldrb	r3, [r4, #0]
 8003d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d00e      	beq.n	8003d5e <netconn_recv_data+0xc2>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8003d40:	9b05      	ldr	r3, [sp, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d031      	beq.n	8003daa <netconn_recv_data+0x10e>
    len = netbuf_len((struct netbuf*)buf);
 8003d46:	9b05      	ldr	r3, [sp, #20]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8003d4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d4e:	b113      	cbz	r3, 8003d56 <netconn_recv_data+0xba>
 8003d50:	2101      	movs	r1, #1
 8003d52:	4620      	mov	r0, r4
 8003d54:	4798      	blx	r3
  *new_buf = buf;
 8003d56:	9b05      	ldr	r3, [sp, #20]
 8003d58:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	e7b8      	b.n	8003cd0 <netconn_recv_data+0x34>
    API_MSG_VAR_REF(msg).conn = conn;
 8003d5e:	9400      	str	r4, [sp, #0]
    if (buf != NULL) {
 8003d60:	9b05      	ldr	r3, [sp, #20]
 8003d62:	b14b      	cbz	r3, 8003d78 <netconn_recv_data+0xdc>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8003d64:	891b      	ldrh	r3, [r3, #8]
 8003d66:	9302      	str	r3, [sp, #8]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8003d68:	4669      	mov	r1, sp
 8003d6a:	481a      	ldr	r0, [pc, #104]	; (8003dd4 <netconn_recv_data+0x138>)
 8003d6c:	f7ff ff68 	bl	8003c40 <netconn_apimsg>
    if (buf == NULL) {
 8003d70:	9b05      	ldr	r3, [sp, #20]
 8003d72:	b123      	cbz	r3, 8003d7e <netconn_recv_data+0xe2>
    len = ((struct pbuf *)buf)->tot_len;
 8003d74:	891a      	ldrh	r2, [r3, #8]
 8003d76:	e7e9      	b.n	8003d4c <netconn_recv_data+0xb0>
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	9302      	str	r3, [sp, #8]
 8003d7c:	e7f4      	b.n	8003d68 <netconn_recv_data+0xcc>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8003d7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d80:	b11b      	cbz	r3, 8003d8a <netconn_recv_data+0xee>
 8003d82:	2200      	movs	r2, #0
 8003d84:	2101      	movs	r1, #1
 8003d86:	4620      	mov	r0, r4
 8003d88:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8003d8a:	6863      	ldr	r3, [r4, #4]
 8003d8c:	b933      	cbnz	r3, 8003d9c <netconn_recv_data+0x100>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8003d8e:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d19c      	bne.n	8003cd0 <netconn_recv_data+0x34>
 8003d96:	f06f 000d 	mvn.w	r0, #13
 8003d9a:	e799      	b.n	8003cd0 <netconn_recv_data+0x34>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f7ff ff5a 	bl	8003c58 <netconn_close_shutdown>
      return ERR_CLSD;
 8003da4:	f06f 000e 	mvn.w	r0, #14
 8003da8:	e792      	b.n	8003cd0 <netconn_recv_data+0x34>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <netconn_recv_data+0x124>)
 8003dac:	f240 223e 	movw	r2, #574	; 0x23e
 8003db0:	4909      	ldr	r1, [pc, #36]	; (8003dd8 <netconn_recv_data+0x13c>)
 8003db2:	4805      	ldr	r0, [pc, #20]	; (8003dc8 <netconn_recv_data+0x12c>)
 8003db4:	f008 fd2d 	bl	800c812 <iprintf>
 8003db8:	e7c5      	b.n	8003d46 <netconn_recv_data+0xaa>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8003dba:	f06f 000e 	mvn.w	r0, #14
 8003dbe:	e787      	b.n	8003cd0 <netconn_recv_data+0x34>
 8003dc0:	0800cd48 	.word	0x0800cd48
 8003dc4:	0800ce5c 	.word	0x0800ce5c
 8003dc8:	0800cd98 	.word	0x0800cd98
 8003dcc:	0800ce7c 	.word	0x0800ce7c
 8003dd0:	0800ce98 	.word	0x0800ce98
 8003dd4:	08005021 	.word	0x08005021
 8003dd8:	0800ceb8 	.word	0x0800ceb8

08003ddc <netconn_new_with_proto_and_callback>:
{
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	460d      	mov	r5, r1
  conn = netconn_alloc(t, callback);
 8003de2:	4611      	mov	r1, r2
 8003de4:	f000 fe68 	bl	8004ab8 <netconn_alloc>
  if (conn != NULL) {
 8003de8:	4604      	mov	r4, r0
 8003dea:	b140      	cbz	r0, 8003dfe <netconn_new_with_proto_and_callback+0x22>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8003dec:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 8003df0:	a906      	add	r1, sp, #24
 8003df2:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8003df6:	4820      	ldr	r0, [pc, #128]	; (8003e78 <netconn_new_with_proto_and_callback+0x9c>)
 8003df8:	f7ff ff22 	bl	8003c40 <netconn_apimsg>
    if (err != ERR_OK) {
 8003dfc:	b910      	cbnz	r0, 8003e04 <netconn_new_with_proto_and_callback+0x28>
}
 8003dfe:	4620      	mov	r0, r4
 8003e00:	b006      	add	sp, #24
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8003e04:	6863      	ldr	r3, [r4, #4]
 8003e06:	b12b      	cbz	r3, 8003e14 <netconn_new_with_proto_and_callback+0x38>
 8003e08:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <netconn_new_with_proto_and_callback+0xa0>)
 8003e0a:	2289      	movs	r2, #137	; 0x89
 8003e0c:	491c      	ldr	r1, [pc, #112]	; (8003e80 <netconn_new_with_proto_and_callback+0xa4>)
 8003e0e:	481d      	ldr	r0, [pc, #116]	; (8003e84 <netconn_new_with_proto_and_callback+0xa8>)
 8003e10:	f008 fcff 	bl	800c812 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8003e14:	f104 0510 	add.w	r5, r4, #16
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f007 ff01 	bl	800bc20 <sys_mbox_valid>
 8003e1e:	b1b0      	cbz	r0, 8003e4e <netconn_new_with_proto_and_callback+0x72>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8003e20:	f104 0014 	add.w	r0, r4, #20
 8003e24:	f007 fefc 	bl	800bc20 <sys_mbox_valid>
 8003e28:	b9c0      	cbnz	r0, 8003e5c <netconn_new_with_proto_and_callback+0x80>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8003e2a:	f104 060c 	add.w	r6, r4, #12
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f007 ff40 	bl	800bcb4 <sys_sem_valid>
 8003e34:	b1c8      	cbz	r0, 8003e6a <netconn_new_with_proto_and_callback+0x8e>
      sys_sem_free(&conn->op_completed);
 8003e36:	4630      	mov	r0, r6
 8003e38:	f007 ff37 	bl	800bcaa <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	f007 fe91 	bl	800bb64 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8003e42:	4621      	mov	r1, r4
 8003e44:	2007      	movs	r0, #7
 8003e46:	f003 fa3f 	bl	80072c8 <memp_free>
      return NULL;
 8003e4a:	2400      	movs	r4, #0
 8003e4c:	e7d7      	b.n	8003dfe <netconn_new_with_proto_and_callback+0x22>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <netconn_new_with_proto_and_callback+0xa0>)
 8003e50:	228a      	movs	r2, #138	; 0x8a
 8003e52:	490d      	ldr	r1, [pc, #52]	; (8003e88 <netconn_new_with_proto_and_callback+0xac>)
 8003e54:	480b      	ldr	r0, [pc, #44]	; (8003e84 <netconn_new_with_proto_and_callback+0xa8>)
 8003e56:	f008 fcdc 	bl	800c812 <iprintf>
 8003e5a:	e7e1      	b.n	8003e20 <netconn_new_with_proto_and_callback+0x44>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8003e5c:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <netconn_new_with_proto_and_callback+0xa0>)
 8003e5e:	228c      	movs	r2, #140	; 0x8c
 8003e60:	490a      	ldr	r1, [pc, #40]	; (8003e8c <netconn_new_with_proto_and_callback+0xb0>)
 8003e62:	4808      	ldr	r0, [pc, #32]	; (8003e84 <netconn_new_with_proto_and_callback+0xa8>)
 8003e64:	f008 fcd5 	bl	800c812 <iprintf>
 8003e68:	e7df      	b.n	8003e2a <netconn_new_with_proto_and_callback+0x4e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <netconn_new_with_proto_and_callback+0xa0>)
 8003e6c:	228f      	movs	r2, #143	; 0x8f
 8003e6e:	4908      	ldr	r1, [pc, #32]	; (8003e90 <netconn_new_with_proto_and_callback+0xb4>)
 8003e70:	4804      	ldr	r0, [pc, #16]	; (8003e84 <netconn_new_with_proto_and_callback+0xa8>)
 8003e72:	f008 fcce 	bl	800c812 <iprintf>
 8003e76:	e7de      	b.n	8003e36 <netconn_new_with_proto_and_callback+0x5a>
 8003e78:	08004a85 	.word	0x08004a85
 8003e7c:	0800cd48 	.word	0x0800cd48
 8003e80:	0800cde0 	.word	0x0800cde0
 8003e84:	0800cd98 	.word	0x0800cd98
 8003e88:	0800ce04 	.word	0x0800ce04
 8003e8c:	0800ce1c 	.word	0x0800ce1c
 8003e90:	0800ce40 	.word	0x0800ce40

08003e94 <netconn_delete>:
{
 8003e94:	b530      	push	{r4, r5, lr}
 8003e96:	b087      	sub	sp, #28
  if (conn == NULL) {
 8003e98:	b188      	cbz	r0, 8003ebe <netconn_delete+0x2a>
 8003e9a:	4604      	mov	r4, r0
  API_MSG_VAR_REF(msg).conn = conn;
 8003e9c:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8003e9e:	2329      	movs	r3, #41	; 0x29
 8003ea0:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8003ea4:	a901      	add	r1, sp, #4
 8003ea6:	4807      	ldr	r0, [pc, #28]	; (8003ec4 <netconn_delete+0x30>)
 8003ea8:	f7ff feca 	bl	8003c40 <netconn_apimsg>
  if (err != ERR_OK) {
 8003eac:	4605      	mov	r5, r0
 8003eae:	b110      	cbz	r0, 8003eb6 <netconn_delete+0x22>
}
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	b007      	add	sp, #28
 8003eb4:	bd30      	pop	{r4, r5, pc}
  netconn_free(conn);
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f000 fe44 	bl	8004b44 <netconn_free>
  return ERR_OK;
 8003ebc:	e7f8      	b.n	8003eb0 <netconn_delete+0x1c>
    return ERR_OK;
 8003ebe:	2500      	movs	r5, #0
 8003ec0:	e7f6      	b.n	8003eb0 <netconn_delete+0x1c>
 8003ec2:	bf00      	nop
 8003ec4:	08004d61 	.word	0x08004d61

08003ec8 <netconn_bind>:
{
 8003ec8:	b500      	push	{lr}
 8003eca:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8003ecc:	b160      	cbz	r0, 8003ee8 <netconn_bind+0x20>
 8003ece:	4603      	mov	r3, r0
  if (addr == NULL) {
 8003ed0:	b199      	cbz	r1, 8003efa <netconn_bind+0x32>
  API_MSG_VAR_REF(msg).conn = conn;
 8003ed2:	9301      	str	r3, [sp, #4]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8003ed4:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8003ed6:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8003eda:	a901      	add	r1, sp, #4
 8003edc:	4808      	ldr	r0, [pc, #32]	; (8003f00 <netconn_bind+0x38>)
 8003ede:	f7ff feaf 	bl	8003c40 <netconn_apimsg>
}
 8003ee2:	b007      	add	sp, #28
 8003ee4:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <netconn_bind+0x3c>)
 8003eea:	22ff      	movs	r2, #255	; 0xff
 8003eec:	4906      	ldr	r1, [pc, #24]	; (8003f08 <netconn_bind+0x40>)
 8003eee:	4807      	ldr	r0, [pc, #28]	; (8003f0c <netconn_bind+0x44>)
 8003ef0:	f008 fc8f 	bl	800c812 <iprintf>
 8003ef4:	f06f 000f 	mvn.w	r0, #15
 8003ef8:	e7f3      	b.n	8003ee2 <netconn_bind+0x1a>
    addr = IP4_ADDR_ANY;
 8003efa:	4905      	ldr	r1, [pc, #20]	; (8003f10 <netconn_bind+0x48>)
 8003efc:	e7e9      	b.n	8003ed2 <netconn_bind+0xa>
 8003efe:	bf00      	nop
 8003f00:	08004ecd 	.word	0x08004ecd
 8003f04:	0800cd48 	.word	0x0800cd48
 8003f08:	0800cd2c 	.word	0x0800cd2c
 8003f0c:	0800cd98 	.word	0x0800cd98
 8003f10:	0800f660 	.word	0x0800f660

08003f14 <netconn_listen_with_backlog>:
{
 8003f14:	b500      	push	{lr}
 8003f16:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8003f18:	b140      	cbz	r0, 8003f2c <netconn_listen_with_backlog+0x18>
  API_MSG_VAR_REF(msg).conn = conn;
 8003f1a:	a906      	add	r1, sp, #24
 8003f1c:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8003f20:	4807      	ldr	r0, [pc, #28]	; (8003f40 <netconn_listen_with_backlog+0x2c>)
 8003f22:	f7ff fe8d 	bl	8003c40 <netconn_apimsg>
}
 8003f26:	b007      	add	sp, #28
 8003f28:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <netconn_listen_with_backlog+0x30>)
 8003f2e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003f32:	4905      	ldr	r1, [pc, #20]	; (8003f48 <netconn_listen_with_backlog+0x34>)
 8003f34:	4805      	ldr	r0, [pc, #20]	; (8003f4c <netconn_listen_with_backlog+0x38>)
 8003f36:	f008 fc6c 	bl	800c812 <iprintf>
 8003f3a:	f06f 000f 	mvn.w	r0, #15
 8003f3e:	e7f2      	b.n	8003f26 <netconn_listen_with_backlog+0x12>
 8003f40:	08004f31 	.word	0x08004f31
 8003f44:	0800cd48 	.word	0x0800cd48
 8003f48:	0800cdc0 	.word	0x0800cdc0
 8003f4c:	0800cd98 	.word	0x0800cd98

08003f50 <netconn_accept>:
{
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8003f54:	b159      	cbz	r1, 8003f6e <netconn_accept+0x1e>
 8003f56:	4604      	mov	r4, r0
 8003f58:	460d      	mov	r5, r1
  *new_conn = NULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8003f5e:	b180      	cbz	r0, 8003f82 <netconn_accept+0x32>
  if (ERR_IS_FATAL(conn->last_err)) {
 8003f60:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8003f64:	f110 0f0c 	cmn.w	r0, #12
 8003f68:	da15      	bge.n	8003f96 <netconn_accept+0x46>
}
 8003f6a:	b002      	add	sp, #8
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8003f6e:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <netconn_accept+0xa4>)
 8003f70:	f240 128d 	movw	r2, #397	; 0x18d
 8003f74:	4920      	ldr	r1, [pc, #128]	; (8003ff8 <netconn_accept+0xa8>)
 8003f76:	4821      	ldr	r0, [pc, #132]	; (8003ffc <netconn_accept+0xac>)
 8003f78:	f008 fc4b 	bl	800c812 <iprintf>
 8003f7c:	f06f 000f 	mvn.w	r0, #15
 8003f80:	e7f3      	b.n	8003f6a <netconn_accept+0x1a>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8003f82:	4b1c      	ldr	r3, [pc, #112]	; (8003ff4 <netconn_accept+0xa4>)
 8003f84:	f240 128f 	movw	r2, #399	; 0x18f
 8003f88:	491d      	ldr	r1, [pc, #116]	; (8004000 <netconn_accept+0xb0>)
 8003f8a:	481c      	ldr	r0, [pc, #112]	; (8003ffc <netconn_accept+0xac>)
 8003f8c:	f008 fc41 	bl	800c812 <iprintf>
 8003f90:	f06f 000f 	mvn.w	r0, #15
 8003f94:	e7e9      	b.n	8003f6a <netconn_accept+0x1a>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8003f96:	f104 0614 	add.w	r6, r4, #20
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	f007 fe40 	bl	800bc20 <sys_mbox_valid>
 8003fa0:	b308      	cbz	r0, 8003fe6 <netconn_accept+0x96>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	a901      	add	r1, sp, #4
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f007 fdfb 	bl	800bba2 <sys_arch_mbox_fetch>
  newconn = (struct netconn *)accept_ptr;
 8003fac:	9e01      	ldr	r6, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8003fae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003fb0:	b11b      	cbz	r3, 8003fba <netconn_accept+0x6a>
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4798      	blx	r3
  if (accept_ptr == &netconn_aborted) {
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <netconn_accept+0xb4>)
 8003fbc:	9a01      	ldr	r2, [sp, #4]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d014      	beq.n	8003fec <netconn_accept+0x9c>
  if (newconn == NULL) {
 8003fc2:	b116      	cbz	r6, 8003fca <netconn_accept+0x7a>
  *new_conn = newconn;
 8003fc4:	602e      	str	r6, [r5, #0]
  return ERR_OK;
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	e7cf      	b.n	8003f6a <netconn_accept+0x1a>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8003fca:	f007 feb9 	bl	800bd40 <sys_arch_protect>
 8003fce:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8003fd2:	f113 0f0c 	cmn.w	r3, #12
 8003fd6:	db01      	blt.n	8003fdc <netconn_accept+0x8c>
 8003fd8:	23f1      	movs	r3, #241	; 0xf1
 8003fda:	7223      	strb	r3, [r4, #8]
 8003fdc:	f007 febc 	bl	800bd58 <sys_arch_unprotect>
    return ERR_CLSD;
 8003fe0:	f06f 000e 	mvn.w	r0, #14
 8003fe4:	e7c1      	b.n	8003f6a <netconn_accept+0x1a>
    return ERR_CLSD;
 8003fe6:	f06f 000e 	mvn.w	r0, #14
 8003fea:	e7be      	b.n	8003f6a <netconn_accept+0x1a>
    return ERR_ABRT;
 8003fec:	f06f 000c 	mvn.w	r0, #12
 8003ff0:	e7bb      	b.n	8003f6a <netconn_accept+0x1a>
 8003ff2:	bf00      	nop
 8003ff4:	0800cd48 	.word	0x0800cd48
 8003ff8:	0800ccec 	.word	0x0800ccec
 8003ffc:	0800cd98 	.word	0x0800cd98
 8004000:	0800cd0c 	.word	0x0800cd0c
 8004004:	2000426c 	.word	0x2000426c

08004008 <netconn_recv>:
{
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800400c:	b179      	cbz	r1, 800402e <netconn_recv+0x26>
 800400e:	4604      	mov	r4, r0
 8004010:	460d      	mov	r5, r1
  *new_buf = NULL;
 8004012:	2300      	movs	r3, #0
 8004014:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004016:	b1a0      	cbz	r0, 8004042 <netconn_recv+0x3a>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8004018:	7803      	ldrb	r3, [r0, #0]
 800401a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800401e:	2b10      	cmp	r3, #16
 8004020:	d019      	beq.n	8004056 <netconn_recv+0x4e>
    return netconn_recv_data(conn, (void **)new_buf);
 8004022:	f7ff fe3b 	bl	8003c9c <netconn_recv_data>
 8004026:	4604      	mov	r4, r0
}
 8004028:	4620      	mov	r0, r4
 800402a:	b002      	add	sp, #8
 800402c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800402e:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <netconn_recv+0xa0>)
 8004030:	f44f 721d 	mov.w	r2, #628	; 0x274
 8004034:	491d      	ldr	r1, [pc, #116]	; (80040ac <netconn_recv+0xa4>)
 8004036:	481e      	ldr	r0, [pc, #120]	; (80040b0 <netconn_recv+0xa8>)
 8004038:	f008 fbeb 	bl	800c812 <iprintf>
 800403c:	f06f 040f 	mvn.w	r4, #15
 8004040:	e7f2      	b.n	8004028 <netconn_recv+0x20>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004042:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <netconn_recv+0xa0>)
 8004044:	f240 2276 	movw	r2, #630	; 0x276
 8004048:	491a      	ldr	r1, [pc, #104]	; (80040b4 <netconn_recv+0xac>)
 800404a:	4819      	ldr	r0, [pc, #100]	; (80040b0 <netconn_recv+0xa8>)
 800404c:	f008 fbe1 	bl	800c812 <iprintf>
 8004050:	f06f 040f 	mvn.w	r4, #15
 8004054:	e7e8      	b.n	8004028 <netconn_recv+0x20>
    struct pbuf *p = NULL;
 8004056:	2300      	movs	r3, #0
 8004058:	9301      	str	r3, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800405a:	2006      	movs	r0, #6
 800405c:	f003 f91a 	bl	8007294 <memp_malloc>
    if (buf == NULL) {
 8004060:	4606      	mov	r6, r0
 8004062:	b1e8      	cbz	r0, 80040a0 <netconn_recv+0x98>
    err = netconn_recv_data(conn, (void **)&p);
 8004064:	a901      	add	r1, sp, #4
 8004066:	4620      	mov	r0, r4
 8004068:	f7ff fe18 	bl	8003c9c <netconn_recv_data>
    if (err != ERR_OK) {
 800406c:	4604      	mov	r4, r0
 800406e:	b950      	cbnz	r0, 8004086 <netconn_recv+0x7e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004070:	9b01      	ldr	r3, [sp, #4]
 8004072:	b16b      	cbz	r3, 8004090 <netconn_recv+0x88>
    buf->p = p;
 8004074:	9b01      	ldr	r3, [sp, #4]
 8004076:	6033      	str	r3, [r6, #0]
    buf->ptr = p;
 8004078:	9b01      	ldr	r3, [sp, #4]
 800407a:	6073      	str	r3, [r6, #4]
    buf->port = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	81b3      	strh	r3, [r6, #12]
    ip_addr_set_zero(&buf->addr);
 8004080:	60b3      	str	r3, [r6, #8]
    *new_buf = buf;
 8004082:	602e      	str	r6, [r5, #0]
    return ERR_OK;
 8004084:	e7d0      	b.n	8004028 <netconn_recv+0x20>
      memp_free(MEMP_NETBUF, buf);
 8004086:	4631      	mov	r1, r6
 8004088:	2006      	movs	r0, #6
 800408a:	f003 f91d 	bl	80072c8 <memp_free>
      return err;
 800408e:	e7cb      	b.n	8004028 <netconn_recv+0x20>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <netconn_recv+0xa0>)
 8004092:	f240 228a 	movw	r2, #650	; 0x28a
 8004096:	4908      	ldr	r1, [pc, #32]	; (80040b8 <netconn_recv+0xb0>)
 8004098:	4805      	ldr	r0, [pc, #20]	; (80040b0 <netconn_recv+0xa8>)
 800409a:	f008 fbba 	bl	800c812 <iprintf>
 800409e:	e7e9      	b.n	8004074 <netconn_recv+0x6c>
      return ERR_MEM;
 80040a0:	f04f 34ff 	mov.w	r4, #4294967295
 80040a4:	e7c0      	b.n	8004028 <netconn_recv+0x20>
 80040a6:	bf00      	nop
 80040a8:	0800cd48 	.word	0x0800cd48
 80040ac:	0800ce5c 	.word	0x0800ce5c
 80040b0:	0800cd98 	.word	0x0800cd98
 80040b4:	0800ce7c 	.word	0x0800ce7c
 80040b8:	0800d08c 	.word	0x0800d08c

080040bc <netconn_write_partly>:
{
 80040bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040be:	b087      	sub	sp, #28
 80040c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80040c2:	b188      	cbz	r0, 80040e8 <netconn_write_partly+0x2c>
 80040c4:	4616      	mov	r6, r2
 80040c6:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 80040c8:	7802      	ldrb	r2, [r0, #0]
 80040ca:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80040ce:	2a10      	cmp	r2, #16
 80040d0:	d114      	bne.n	80040fc <netconn_write_partly+0x40>
  if (size == 0) {
 80040d2:	2e00      	cmp	r6, #0
 80040d4:	d035      	beq.n	8004142 <netconn_write_partly+0x86>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80040d6:	7f02      	ldrb	r2, [r0, #28]
 80040d8:	f012 0f02 	tst.w	r2, #2
 80040dc:	d118      	bne.n	8004110 <netconn_write_partly+0x54>
 80040de:	f013 0f04 	tst.w	r3, #4
 80040e2:	d029      	beq.n	8004138 <netconn_write_partly+0x7c>
 80040e4:	2201      	movs	r2, #1
 80040e6:	e014      	b.n	8004112 <netconn_write_partly+0x56>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <netconn_write_partly+0x94>)
 80040ea:	f240 22e6 	movw	r2, #742	; 0x2e6
 80040ee:	4919      	ldr	r1, [pc, #100]	; (8004154 <netconn_write_partly+0x98>)
 80040f0:	4819      	ldr	r0, [pc, #100]	; (8004158 <netconn_write_partly+0x9c>)
 80040f2:	f008 fb8e 	bl	800c812 <iprintf>
 80040f6:	f06f 030f 	mvn.w	r3, #15
 80040fa:	e023      	b.n	8004144 <netconn_write_partly+0x88>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 80040fc:	4b14      	ldr	r3, [pc, #80]	; (8004150 <netconn_write_partly+0x94>)
 80040fe:	f240 22e7 	movw	r2, #743	; 0x2e7
 8004102:	4916      	ldr	r1, [pc, #88]	; (800415c <netconn_write_partly+0xa0>)
 8004104:	4814      	ldr	r0, [pc, #80]	; (8004158 <netconn_write_partly+0x9c>)
 8004106:	f008 fb84 	bl	800c812 <iprintf>
 800410a:	f06f 0305 	mvn.w	r3, #5
 800410e:	e019      	b.n	8004144 <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004110:	2201      	movs	r2, #1
  if (dontblock && !bytes_written) {
 8004112:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 8004116:	b102      	cbz	r2, 800411a <netconn_write_partly+0x5e>
 8004118:	b1bd      	cbz	r5, 800414a <netconn_write_partly+0x8e>
  API_MSG_VAR_REF(msg).conn = conn;
 800411a:	9401      	str	r4, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800411c:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800411e:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8004122:	9604      	str	r6, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8004124:	a901      	add	r1, sp, #4
 8004126:	480e      	ldr	r0, [pc, #56]	; (8004160 <netconn_write_partly+0xa4>)
 8004128:	f7ff fd8a 	bl	8003c40 <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800412c:	4603      	mov	r3, r0
 800412e:	b948      	cbnz	r0, 8004144 <netconn_write_partly+0x88>
 8004130:	b145      	cbz	r5, 8004144 <netconn_write_partly+0x88>
    if (dontblock) {
 8004132:	b91f      	cbnz	r7, 800413c <netconn_write_partly+0x80>
      *bytes_written = size;
 8004134:	602e      	str	r6, [r5, #0]
 8004136:	e005      	b.n	8004144 <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004138:	2200      	movs	r2, #0
 800413a:	e7ea      	b.n	8004112 <netconn_write_partly+0x56>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800413c:	9a04      	ldr	r2, [sp, #16]
 800413e:	602a      	str	r2, [r5, #0]
 8004140:	e000      	b.n	8004144 <netconn_write_partly+0x88>
    return ERR_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	b007      	add	sp, #28
 8004148:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 800414a:	f06f 0305 	mvn.w	r3, #5
 800414e:	e7f9      	b.n	8004144 <netconn_write_partly+0x88>
 8004150:	0800cd48 	.word	0x0800cd48
 8004154:	0800cec4 	.word	0x0800cec4
 8004158:	0800cd98 	.word	0x0800cd98
 800415c:	0800cee0 	.word	0x0800cee0
 8004160:	08005079 	.word	0x08005079

08004164 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8004164:	b508      	push	{r3, lr}
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8004166:	2103      	movs	r1, #3
 8004168:	f7ff fd76 	bl	8003c58 <netconn_close_shutdown>
}
 800416c:	bd08      	pop	{r3, pc}
	...

08004170 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8004170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004174:	4604      	mov	r4, r0
 8004176:	4616      	mov	r6, r2
 8004178:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800417a:	460d      	mov	r5, r1
 800417c:	2900      	cmp	r1, #0
 800417e:	d030      	beq.n	80041e2 <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004180:	2c00      	cmp	r4, #0
 8004182:	d035      	beq.n	80041f0 <recv_udp+0x80>
  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8004184:	2c00      	cmp	r4, #0
 8004186:	d03a      	beq.n	80041fe <recv_udp+0x8e>
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8004188:	6863      	ldr	r3, [r4, #4]
 800418a:	429d      	cmp	r5, r3
 800418c:	d005      	beq.n	800419a <recv_udp+0x2a>
 800418e:	4b27      	ldr	r3, [pc, #156]	; (800422c <recv_udp+0xbc>)
 8004190:	22ba      	movs	r2, #186	; 0xba
 8004192:	4927      	ldr	r1, [pc, #156]	; (8004230 <recv_udp+0xc0>)
 8004194:	4827      	ldr	r0, [pc, #156]	; (8004234 <recv_udp+0xc4>)
 8004196:	f008 fb3c 	bl	800c812 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800419a:	f104 0710 	add.w	r7, r4, #16
 800419e:	4638      	mov	r0, r7
 80041a0:	f007 fd3e 	bl	800bc20 <sys_mbox_valid>
 80041a4:	b380      	cbz	r0, 8004208 <recv_udp+0x98>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80041a6:	2006      	movs	r0, #6
 80041a8:	f003 f874 	bl	8007294 <memp_malloc>
  if (buf == NULL) {
 80041ac:	4605      	mov	r5, r0
 80041ae:	b380      	cbz	r0, 8004212 <recv_udp+0xa2>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 80041b0:	6006      	str	r6, [r0, #0]
    buf->ptr = p;
 80041b2:	6046      	str	r6, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 80041b4:	f1b8 0f00 	cmp.w	r8, #0
 80041b8:	d030      	beq.n	800421c <recv_udp+0xac>
 80041ba:	f8d8 3000 	ldr.w	r3, [r8]
 80041be:	60ab      	str	r3, [r5, #8]
    buf->port = port;
 80041c0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80041c4:	81ab      	strh	r3, [r5, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80041c6:	8936      	ldrh	r6, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80041c8:	4629      	mov	r1, r5
 80041ca:	4638      	mov	r0, r7
 80041cc:	f007 fcdf 	bl	800bb8e <sys_mbox_trypost>
 80041d0:	bb30      	cbnz	r0, 8004220 <recv_udp+0xb0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80041d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80041d4:	b11b      	cbz	r3, 80041de <recv_udp+0x6e>
 80041d6:	4632      	mov	r2, r6
 80041d8:	2100      	movs	r1, #0
 80041da:	4620      	mov	r0, r4
 80041dc:	4798      	blx	r3
 80041de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <recv_udp+0xbc>)
 80041e4:	22b1      	movs	r2, #177	; 0xb1
 80041e6:	4914      	ldr	r1, [pc, #80]	; (8004238 <recv_udp+0xc8>)
 80041e8:	4812      	ldr	r0, [pc, #72]	; (8004234 <recv_udp+0xc4>)
 80041ea:	f008 fb12 	bl	800c812 <iprintf>
 80041ee:	e7c7      	b.n	8004180 <recv_udp+0x10>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80041f0:	4b0e      	ldr	r3, [pc, #56]	; (800422c <recv_udp+0xbc>)
 80041f2:	22b2      	movs	r2, #178	; 0xb2
 80041f4:	4911      	ldr	r1, [pc, #68]	; (800423c <recv_udp+0xcc>)
 80041f6:	480f      	ldr	r0, [pc, #60]	; (8004234 <recv_udp+0xc4>)
 80041f8:	f008 fb0b 	bl	800c812 <iprintf>
 80041fc:	e7c2      	b.n	8004184 <recv_udp+0x14>
    pbuf_free(p);
 80041fe:	4630      	mov	r0, r6
 8004200:	f003 fa38 	bl	8007674 <pbuf_free>
    return;
 8004204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8004208:	4630      	mov	r0, r6
 800420a:	f003 fa33 	bl	8007674 <pbuf_free>
    return;
 800420e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8004212:	4630      	mov	r0, r6
 8004214:	f003 fa2e 	bl	8007674 <pbuf_free>
    return;
 8004218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ip_addr_set(&buf->addr, addr);
 800421c:	2300      	movs	r3, #0
 800421e:	e7ce      	b.n	80041be <recv_udp+0x4e>
    netbuf_delete(buf);
 8004220:	4628      	mov	r0, r5
 8004222:	f001 f821 	bl	8005268 <netbuf_delete>
    return;
 8004226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800422a:	bf00      	nop
 800422c:	0800d24c 	.word	0x0800d24c
 8004230:	0800d2c4 	.word	0x0800d2c4
 8004234:	0800cd98 	.word	0x0800cd98
 8004238:	0800d280 	.word	0x0800d280
 800423c:	0800d2a4 	.word	0x0800d2a4

08004240 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8004240:	b510      	push	{r4, lr}
 8004242:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8004244:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 8004246:	4620      	mov	r0, r4
 8004248:	f003 ff23 	bl	8008092 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800424c:	4908      	ldr	r1, [pc, #32]	; (8004270 <setup_tcp+0x30>)
 800424e:	4620      	mov	r0, r4
 8004250:	f003 ff22 	bl	8008098 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8004254:	4907      	ldr	r1, [pc, #28]	; (8004274 <setup_tcp+0x34>)
 8004256:	4620      	mov	r0, r4
 8004258:	f003 ff38 	bl	80080cc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800425c:	2202      	movs	r2, #2
 800425e:	4906      	ldr	r1, [pc, #24]	; (8004278 <setup_tcp+0x38>)
 8004260:	4620      	mov	r0, r4
 8004262:	f003 ff6d 	bl	8008140 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8004266:	4905      	ldr	r1, [pc, #20]	; (800427c <setup_tcp+0x3c>)
 8004268:	4620      	mov	r0, r4
 800426a:	f003 ff47 	bl	80080fc <tcp_err>
 800426e:	bd10      	pop	{r4, pc}
 8004270:	080049b5 	.word	0x080049b5
 8004274:	08004941 	.word	0x08004941
 8004278:	080048bd 	.word	0x080048bd
 800427c:	08004309 	.word	0x08004309

08004280 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8004280:	b538      	push	{r3, r4, r5, lr}
 8004282:	4604      	mov	r4, r0
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8004284:	6803      	ldr	r3, [r0, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	b133      	cbz	r3, 8004298 <pcb_new+0x18>
 800428a:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <pcb_new+0x78>)
 800428c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8004290:	491a      	ldr	r1, [pc, #104]	; (80042fc <pcb_new+0x7c>)
 8004292:	481b      	ldr	r0, [pc, #108]	; (8004300 <pcb_new+0x80>)
 8004294:	f008 fabd 	bl	800c812 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8004298:	6825      	ldr	r5, [r4, #0]
 800429a:	782b      	ldrb	r3, [r5, #0]
 800429c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d018      	beq.n	80042d6 <pcb_new+0x56>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d121      	bne.n	80042ec <pcb_new+0x6c>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80042a8:	2000      	movs	r0, #0
 80042aa:	f007 fb9f 	bl	800b9ec <udp_new_ip_type>
 80042ae:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	b142      	cbz	r2, 80042c8 <pcb_new+0x48>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b22      	cmp	r3, #34	; 0x22
 80042ba:	d009      	beq.n	80042d0 <pcb_new+0x50>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	4910      	ldr	r1, [pc, #64]	; (8004304 <pcb_new+0x84>)
 80042c2:	6858      	ldr	r0, [r3, #4]
 80042c4:	f007 fb64 	bl	800b990 <udp_recv>
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
    return;
  }
  if (msg->conn->pcb.ip == NULL) {
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	b18b      	cbz	r3, 80042f2 <pcb_new+0x72>
 80042ce:	bd38      	pop	{r3, r4, r5, pc}
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80042d0:	2301      	movs	r3, #1
 80042d2:	7413      	strb	r3, [r2, #16]
 80042d4:	e7f2      	b.n	80042bc <pcb_new+0x3c>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f004 fca4 	bl	8008c24 <tcp_new_ip_type>
 80042dc:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80042de:	6820      	ldr	r0, [r4, #0]
 80042e0:	6843      	ldr	r3, [r0, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <pcb_new+0x48>
      setup_tcp(msg->conn);
 80042e6:	f7ff ffab 	bl	8004240 <setup_tcp>
 80042ea:	e7ed      	b.n	80042c8 <pcb_new+0x48>
    msg->err = ERR_VAL;
 80042ec:	23fa      	movs	r3, #250	; 0xfa
 80042ee:	7123      	strb	r3, [r4, #4]
    return;
 80042f0:	bd38      	pop	{r3, r4, r5, pc}
    msg->err = ERR_MEM;
 80042f2:	23ff      	movs	r3, #255	; 0xff
 80042f4:	7123      	strb	r3, [r4, #4]
 80042f6:	e7ea      	b.n	80042ce <pcb_new+0x4e>
 80042f8:	0800d24c 	.word	0x0800d24c
 80042fc:	0800d1c8 	.word	0x0800d1c8
 8004300:	0800cd98 	.word	0x0800cd98
 8004304:	08004171 	.word	0x08004171

08004308 <err_tcp>:
{
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800430c:	4604      	mov	r4, r0
 800430e:	2800      	cmp	r0, #0
 8004310:	d038      	beq.n	8004384 <err_tcp+0x7c>
  conn->pcb.tcp = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	6063      	str	r3, [r4, #4]
  old_state = conn->state;
 8004316:	7865      	ldrb	r5, [r4, #1]
  conn->state = NETCONN_NONE;
 8004318:	7063      	strb	r3, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 800431a:	2d04      	cmp	r5, #4
 800431c:	d03a      	beq.n	8004394 <err_tcp+0x8c>
    SYS_ARCH_SET(conn->last_err, err);
 800431e:	f007 fd0f 	bl	800bd40 <sys_arch_protect>
 8004322:	7226      	strb	r6, [r4, #8]
 8004324:	f007 fd18 	bl	800bd58 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004328:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800432a:	b11b      	cbz	r3, 8004334 <err_tcp+0x2c>
 800432c:	2200      	movs	r2, #0
 800432e:	2104      	movs	r1, #4
 8004330:	4620      	mov	r0, r4
 8004332:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004334:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004336:	b11b      	cbz	r3, 8004340 <err_tcp+0x38>
 8004338:	2200      	movs	r2, #0
 800433a:	4611      	mov	r1, r2
 800433c:	4620      	mov	r0, r4
 800433e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004342:	b11b      	cbz	r3, 800434c <err_tcp+0x44>
 8004344:	2200      	movs	r2, #0
 8004346:	2102      	movs	r1, #2
 8004348:	4620      	mov	r0, r4
 800434a:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 800434c:	f104 0710 	add.w	r7, r4, #16
 8004350:	4638      	mov	r0, r7
 8004352:	f007 fc65 	bl	800bc20 <sys_mbox_valid>
 8004356:	bb68      	cbnz	r0, 80043b4 <err_tcp+0xac>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004358:	f104 0714 	add.w	r7, r4, #20
 800435c:	4638      	mov	r0, r7
 800435e:	f007 fc5f 	bl	800bc20 <sys_mbox_valid>
 8004362:	bb60      	cbnz	r0, 80043be <err_tcp+0xb6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8004364:	2d01      	cmp	r5, #1
 8004366:	d02f      	beq.n	80043c8 <err_tcp+0xc0>
 8004368:	2d04      	cmp	r5, #4
 800436a:	d02d      	beq.n	80043c8 <err_tcp+0xc0>
 800436c:	2d03      	cmp	r5, #3
 800436e:	d02b      	beq.n	80043c8 <err_tcp+0xc0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8004370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004372:	b133      	cbz	r3, 8004382 <err_tcp+0x7a>
 8004374:	4b2e      	ldr	r3, [pc, #184]	; (8004430 <err_tcp+0x128>)
 8004376:	f240 12bd 	movw	r2, #445	; 0x1bd
 800437a:	492e      	ldr	r1, [pc, #184]	; (8004434 <err_tcp+0x12c>)
 800437c:	482e      	ldr	r0, [pc, #184]	; (8004438 <err_tcp+0x130>)
 800437e:	f008 fa48 	bl	800c812 <iprintf>
 8004382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004384:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <err_tcp+0x128>)
 8004386:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800438a:	492c      	ldr	r1, [pc, #176]	; (800443c <err_tcp+0x134>)
 800438c:	482a      	ldr	r0, [pc, #168]	; (8004438 <err_tcp+0x130>)
 800438e:	f008 fa40 	bl	800c812 <iprintf>
 8004392:	e7be      	b.n	8004312 <err_tcp+0xa>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8004394:	b164      	cbz	r4, 80043b0 <err_tcp+0xa8>
 8004396:	f007 fcd3 	bl	800bd40 <sys_arch_protect>
 800439a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800439e:	f113 0f0c 	cmn.w	r3, #12
 80043a2:	db01      	blt.n	80043a8 <err_tcp+0xa0>
 80043a4:	2300      	movs	r3, #0
 80043a6:	7223      	strb	r3, [r4, #8]
 80043a8:	f007 fcd6 	bl	800bd58 <sys_arch_unprotect>
    err = ERR_OK;
 80043ac:	2600      	movs	r6, #0
 80043ae:	e7bb      	b.n	8004328 <err_tcp+0x20>
 80043b0:	2600      	movs	r6, #0
 80043b2:	e7b9      	b.n	8004328 <err_tcp+0x20>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 80043b4:	2100      	movs	r1, #0
 80043b6:	4638      	mov	r0, r7
 80043b8:	f007 fbe9 	bl	800bb8e <sys_mbox_trypost>
 80043bc:	e7cc      	b.n	8004358 <err_tcp+0x50>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80043be:	2100      	movs	r1, #0
 80043c0:	4638      	mov	r0, r7
 80043c2:	f007 fbe4 	bl	800bb8e <sys_mbox_trypost>
 80043c6:	e7cd      	b.n	8004364 <err_tcp+0x5c>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80043c8:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80043ca:	f023 0204 	bic.w	r2, r3, #4
 80043ce:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 80043d0:	f013 0f04 	tst.w	r3, #4
 80043d4:	d1d5      	bne.n	8004382 <err_tcp+0x7a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80043d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d8:	b1cb      	cbz	r3, 800440e <err_tcp+0x106>
      conn->current_msg->err = err;
 80043da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043dc:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80043de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043e0:	681d      	ldr	r5, [r3, #0]
 80043e2:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80043e4:	4628      	mov	r0, r5
 80043e6:	f007 fc65 	bl	800bcb4 <sys_sem_valid>
 80043ea:	b1c0      	cbz	r0, 800441e <err_tcp+0x116>
      conn->current_msg = NULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 80043f0:	b14c      	cbz	r4, 8004406 <err_tcp+0xfe>
 80043f2:	f007 fca5 	bl	800bd40 <sys_arch_protect>
 80043f6:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80043fa:	f113 0f0c 	cmn.w	r3, #12
 80043fe:	db00      	blt.n	8004402 <err_tcp+0xfa>
 8004400:	7226      	strb	r6, [r4, #8]
 8004402:	f007 fca9 	bl	800bd58 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8004406:	4628      	mov	r0, r5
 8004408:	f007 fc4a 	bl	800bca0 <sys_sem_signal>
 800440c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800440e:	4b08      	ldr	r3, [pc, #32]	; (8004430 <err_tcp+0x128>)
 8004410:	f240 12b3 	movw	r2, #435	; 0x1b3
 8004414:	490a      	ldr	r1, [pc, #40]	; (8004440 <err_tcp+0x138>)
 8004416:	4808      	ldr	r0, [pc, #32]	; (8004438 <err_tcp+0x130>)
 8004418:	f008 f9fb 	bl	800c812 <iprintf>
 800441c:	e7dd      	b.n	80043da <err_tcp+0xd2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800441e:	4b04      	ldr	r3, [pc, #16]	; (8004430 <err_tcp+0x128>)
 8004420:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8004424:	4907      	ldr	r1, [pc, #28]	; (8004444 <err_tcp+0x13c>)
 8004426:	4804      	ldr	r0, [pc, #16]	; (8004438 <err_tcp+0x130>)
 8004428:	f008 f9f3 	bl	800c812 <iprintf>
 800442c:	e7de      	b.n	80043ec <err_tcp+0xe4>
 800442e:	bf00      	nop
 8004430:	0800d24c 	.word	0x0800d24c
 8004434:	0800cf4c 	.word	0x0800cf4c
 8004438:	0800cd98 	.word	0x0800cd98
 800443c:	0800cf04 	.word	0x0800cf04
 8004440:	0800cf14 	.word	0x0800cf14
 8004444:	0800cf30 	.word	0x0800cf30

08004448 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8004448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800444c:	4688      	mov	r8, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800444e:	4604      	mov	r4, r0
 8004450:	b1f0      	cbz	r0, 8004490 <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8004452:	7863      	ldrb	r3, [r4, #1]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d006      	beq.n	8004466 <lwip_netconn_do_writemore+0x1e>
 8004458:	4b7b      	ldr	r3, [pc, #492]	; (8004648 <lwip_netconn_do_writemore+0x200>)
 800445a:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800445e:	497b      	ldr	r1, [pc, #492]	; (800464c <lwip_netconn_do_writemore+0x204>)
 8004460:	487b      	ldr	r0, [pc, #492]	; (8004650 <lwip_netconn_do_writemore+0x208>)
 8004462:	f008 f9d6 	bl	800c812 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004468:	b1d3      	cbz	r3, 80044a0 <lwip_netconn_do_writemore+0x58>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800446a:	6863      	ldr	r3, [r4, #4]
 800446c:	b303      	cbz	r3, 80044b0 <lwip_netconn_do_writemore+0x68>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800446e:	6a22      	ldr	r2, [r4, #32]
 8004470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	429a      	cmp	r2, r3
 8004476:	d223      	bcs.n	80044c0 <lwip_netconn_do_writemore+0x78>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8004478:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800447a:	f892 9010 	ldrb.w	r9, [r2, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800447e:	7f23      	ldrb	r3, [r4, #28]
 8004480:	f013 0f02 	tst.w	r3, #2
 8004484:	d124      	bne.n	80044d0 <lwip_netconn_do_writemore+0x88>
 8004486:	f019 0f04 	tst.w	r9, #4
 800448a:	d039      	beq.n	8004500 <lwip_netconn_do_writemore+0xb8>
 800448c:	2601      	movs	r6, #1
 800448e:	e020      	b.n	80044d2 <lwip_netconn_do_writemore+0x8a>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8004490:	4b6d      	ldr	r3, [pc, #436]	; (8004648 <lwip_netconn_do_writemore+0x200>)
 8004492:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8004496:	496f      	ldr	r1, [pc, #444]	; (8004654 <lwip_netconn_do_writemore+0x20c>)
 8004498:	486d      	ldr	r0, [pc, #436]	; (8004650 <lwip_netconn_do_writemore+0x208>)
 800449a:	f008 f9ba 	bl	800c812 <iprintf>
 800449e:	e7d8      	b.n	8004452 <lwip_netconn_do_writemore+0xa>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80044a0:	4b69      	ldr	r3, [pc, #420]	; (8004648 <lwip_netconn_do_writemore+0x200>)
 80044a2:	f240 52e5 	movw	r2, #1509	; 0x5e5
 80044a6:	496c      	ldr	r1, [pc, #432]	; (8004658 <lwip_netconn_do_writemore+0x210>)
 80044a8:	4869      	ldr	r0, [pc, #420]	; (8004650 <lwip_netconn_do_writemore+0x208>)
 80044aa:	f008 f9b2 	bl	800c812 <iprintf>
 80044ae:	e7dc      	b.n	800446a <lwip_netconn_do_writemore+0x22>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80044b0:	4b65      	ldr	r3, [pc, #404]	; (8004648 <lwip_netconn_do_writemore+0x200>)
 80044b2:	f240 52e6 	movw	r2, #1510	; 0x5e6
 80044b6:	4969      	ldr	r1, [pc, #420]	; (800465c <lwip_netconn_do_writemore+0x214>)
 80044b8:	4865      	ldr	r0, [pc, #404]	; (8004650 <lwip_netconn_do_writemore+0x208>)
 80044ba:	f008 f9aa 	bl	800c812 <iprintf>
 80044be:	e7d6      	b.n	800446e <lwip_netconn_do_writemore+0x26>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80044c0:	4b61      	ldr	r3, [pc, #388]	; (8004648 <lwip_netconn_do_writemore+0x200>)
 80044c2:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 80044c6:	4966      	ldr	r1, [pc, #408]	; (8004660 <lwip_netconn_do_writemore+0x218>)
 80044c8:	4861      	ldr	r0, [pc, #388]	; (8004650 <lwip_netconn_do_writemore+0x208>)
 80044ca:	f008 f9a2 	bl	800c812 <iprintf>
 80044ce:	e7d3      	b.n	8004478 <lwip_netconn_do_writemore+0x30>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80044d0:	2601      	movs	r6, #1
 80044d2:	b2f6      	uxtb	r6, r6
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 80044d4:	6897      	ldr	r7, [r2, #8]
 80044d6:	6a23      	ldr	r3, [r4, #32]
 80044d8:	441f      	add	r7, r3
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 80044da:	68d2      	ldr	r2, [r2, #12]
 80044dc:	1ad5      	subs	r5, r2, r3
    if (diff > 0xffffUL) { /* max_u16_t */
 80044de:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80044e2:	d30f      	bcc.n	8004504 <lwip_netconn_do_writemore+0xbc>
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 80044e4:	f049 0902 	orr.w	r9, r9, #2
      len = 0xffff;
 80044e8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80044ec:	6861      	ldr	r1, [r4, #4]
 80044ee:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
    if (available < len) {
 80044f2:	428d      	cmp	r5, r1
 80044f4:	d90b      	bls.n	800450e <lwip_netconn_do_writemore+0xc6>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 80044f6:	b13e      	cbz	r6, 8004508 <lwip_netconn_do_writemore+0xc0>
        if (!len) {
 80044f8:	2900      	cmp	r1, #0
 80044fa:	d039      	beq.n	8004570 <lwip_netconn_do_writemore+0x128>
      len = available;
 80044fc:	460d      	mov	r5, r1
 80044fe:	e006      	b.n	800450e <lwip_netconn_do_writemore+0xc6>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004500:	2600      	movs	r6, #0
 8004502:	e7e6      	b.n	80044d2 <lwip_netconn_do_writemore+0x8a>
      len = (u16_t)diff;
 8004504:	b2ad      	uxth	r5, r5
 8004506:	e7f1      	b.n	80044ec <lwip_netconn_do_writemore+0xa4>
          err = ERR_WOULDBLOCK;
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8004508:	f049 0902 	orr.w	r9, r9, #2
      len = available;
 800450c:	460d      	mov	r5, r1
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800450e:	442b      	add	r3, r5
 8004510:	429a      	cmp	r2, r3
 8004512:	d325      	bcc.n	8004560 <lwip_netconn_do_writemore+0x118>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8004514:	464b      	mov	r3, r9
 8004516:	462a      	mov	r2, r5
 8004518:	4639      	mov	r1, r7
 800451a:	6860      	ldr	r0, [r4, #4]
 800451c:	f006 f96e 	bl	800a7fc <tcp_write>
 8004520:	4607      	mov	r7, r0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8004522:	1c43      	adds	r3, r0, #1
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	d925      	bls.n	8004576 <lwip_netconn_do_writemore+0x12e>
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 800452a:	2f00      	cmp	r7, #0
 800452c:	d146      	bne.n	80045bc <lwip_netconn_do_writemore+0x174>
      err_t out_err;
      conn->write_offset += len;
 800452e:	6a23      	ldr	r3, [r4, #32]
 8004530:	441d      	add	r5, r3
 8004532:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8004534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	4295      	cmp	r5, r2
 800453a:	d000      	beq.n	800453e <lwip_netconn_do_writemore+0xf6>
 800453c:	b10e      	cbz	r6, 8004542 <lwip_netconn_do_writemore+0xfa>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800453e:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8004540:	2601      	movs	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8004542:	6860      	ldr	r0, [r4, #4]
 8004544:	f006 fd08 	bl	800af58 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8004548:	f110 0f0c 	cmn.w	r0, #12
 800454c:	db02      	blt.n	8004554 <lwip_netconn_do_writemore+0x10c>
 800454e:	f110 0f04 	cmn.w	r0, #4
 8004552:	d13a      	bne.n	80045ca <lwip_netconn_do_writemore+0x182>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 8004554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004556:	2200      	movs	r2, #0
 8004558:	60da      	str	r2, [r3, #12]
        err = out_err;
 800455a:	4607      	mov	r7, r0
        write_finished = 1;
 800455c:	2601      	movs	r6, #1
 800455e:	e034      	b.n	80045ca <lwip_netconn_do_writemore+0x182>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8004560:	4b39      	ldr	r3, [pc, #228]	; (8004648 <lwip_netconn_do_writemore+0x200>)
 8004562:	f240 6213 	movw	r2, #1555	; 0x613
 8004566:	493f      	ldr	r1, [pc, #252]	; (8004664 <lwip_netconn_do_writemore+0x21c>)
 8004568:	4839      	ldr	r0, [pc, #228]	; (8004650 <lwip_netconn_do_writemore+0x208>)
 800456a:	f008 f952 	bl	800c812 <iprintf>
 800456e:	e7d1      	b.n	8004514 <lwip_netconn_do_writemore+0xcc>
      len = available;
 8004570:	460d      	mov	r5, r1
          err = ERR_WOULDBLOCK;
 8004572:	f06f 0706 	mvn.w	r7, #6
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8004576:	b176      	cbz	r6, 8004596 <lwip_netconn_do_writemore+0x14e>
 8004578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	429d      	cmp	r5, r3
 800457e:	d20a      	bcs.n	8004596 <lwip_netconn_do_writemore+0x14e>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8004580:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004582:	b11b      	cbz	r3, 800458c <lwip_netconn_do_writemore+0x144>
 8004584:	462a      	mov	r2, r5
 8004586:	2103      	movs	r1, #3
 8004588:	4620      	mov	r0, r4
 800458a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800458c:	7f23      	ldrb	r3, [r4, #28]
 800458e:	f043 0310 	orr.w	r3, r3, #16
 8004592:	7723      	strb	r3, [r4, #28]
 8004594:	e7c9      	b.n	800452a <lwip_netconn_do_writemore+0xe2>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8004596:	6863      	ldr	r3, [r4, #4]
 8004598:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 800459c:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80045a0:	4291      	cmp	r1, r2
 80045a2:	d903      	bls.n	80045ac <lwip_netconn_do_writemore+0x164>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80045a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d9be      	bls.n	800452a <lwip_netconn_do_writemore+0xe2>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80045ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0bb      	beq.n	800452a <lwip_netconn_do_writemore+0xe2>
 80045b2:	462a      	mov	r2, r5
 80045b4:	2103      	movs	r1, #3
 80045b6:	4620      	mov	r0, r4
 80045b8:	4798      	blx	r3
 80045ba:	e7b6      	b.n	800452a <lwip_netconn_do_writemore+0xe2>
      }
    } else if (err == ERR_MEM) {
 80045bc:	f1b7 3fff 	cmp.w	r7, #4294967295
 80045c0:	d01f      	beq.n	8004602 <lwip_netconn_do_writemore+0x1ba>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 80045c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045c4:	2200      	movs	r2, #0
 80045c6:	60da      	str	r2, [r3, #12]
      write_finished = 1;
 80045c8:	2601      	movs	r6, #1
    }
  }
  if (write_finished) {
 80045ca:	2e00      	cmp	r6, #0
 80045cc:	d037      	beq.n	800463e <lwip_netconn_do_writemore+0x1f6>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80045ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	f100 050c 	add.w	r5, r0, #12
    conn->current_msg->err = err;
 80045d6:	711f      	strb	r7, [r3, #4]
    conn->current_msg = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 80045dc:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 80045de:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80045e0:	b14c      	cbz	r4, 80045f6 <lwip_netconn_do_writemore+0x1ae>
 80045e2:	f007 fbad 	bl	800bd40 <sys_arch_protect>
 80045e6:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80045ea:	f113 0f0c 	cmn.w	r3, #12
 80045ee:	db00      	blt.n	80045f2 <lwip_netconn_do_writemore+0x1aa>
 80045f0:	7227      	strb	r7, [r4, #8]
 80045f2:	f007 fbb1 	bl	800bd58 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80045f6:	f1b8 0f00 	cmp.w	r8, #0
 80045fa:	d11a      	bne.n	8004632 <lwip_netconn_do_writemore+0x1ea>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 80045fc:	2000      	movs	r0, #0
}
 80045fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      err_t out_err = tcp_output(conn->pcb.tcp);
 8004602:	6860      	ldr	r0, [r4, #4]
 8004604:	f006 fca8 	bl	800af58 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8004608:	f110 0f0c 	cmn.w	r0, #12
 800460c:	db0b      	blt.n	8004626 <lwip_netconn_do_writemore+0x1de>
 800460e:	f110 0f04 	cmn.w	r0, #4
 8004612:	d008      	beq.n	8004626 <lwip_netconn_do_writemore+0x1de>
      } else if (dontblock) {
 8004614:	2e00      	cmp	r6, #0
 8004616:	d0d8      	beq.n	80045ca <lwip_netconn_do_writemore+0x182>
        conn->current_msg->msg.w.len = 0;
 8004618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800461a:	2200      	movs	r2, #0
 800461c:	60da      	str	r2, [r3, #12]
        write_finished = 1;
 800461e:	2601      	movs	r6, #1
        err = ERR_WOULDBLOCK;
 8004620:	f06f 0706 	mvn.w	r7, #6
 8004624:	e7d1      	b.n	80045ca <lwip_netconn_do_writemore+0x182>
        conn->current_msg->msg.w.len = 0;
 8004626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004628:	2200      	movs	r2, #0
 800462a:	60da      	str	r2, [r3, #12]
        err = out_err;
 800462c:	4607      	mov	r7, r0
        write_finished = 1;
 800462e:	2601      	movs	r6, #1
        conn->current_msg->msg.w.len = 0;
 8004630:	e7cb      	b.n	80045ca <lwip_netconn_do_writemore+0x182>
      sys_sem_signal(op_completed_sem);
 8004632:	4628      	mov	r0, r5
 8004634:	f007 fb34 	bl	800bca0 <sys_sem_signal>
  return ERR_OK;
 8004638:	2000      	movs	r0, #0
 800463a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return ERR_MEM;
 800463e:	f04f 30ff 	mov.w	r0, #4294967295
 8004642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004646:	bf00      	nop
 8004648:	0800d24c 	.word	0x0800d24c
 800464c:	0800d060 	.word	0x0800d060
 8004650:	0800cd98 	.word	0x0800cd98
 8004654:	0800cf04 	.word	0x0800cf04
 8004658:	0800cf14 	.word	0x0800cf14
 800465c:	0800d080 	.word	0x0800d080
 8004660:	0800d098 	.word	0x0800d098
 8004664:	0800d0cc 	.word	0x0800d0cc

08004668 <lwip_netconn_do_close_internal>:
{
 8004668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800466c:	4688      	mov	r8, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800466e:	4604      	mov	r4, r0
 8004670:	2800      	cmp	r0, #0
 8004672:	d035      	beq.n	80046e0 <lwip_netconn_do_close_internal+0x78>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8004674:	7823      	ldrb	r3, [r4, #0]
 8004676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800467a:	2b10      	cmp	r3, #16
 800467c:	d006      	beq.n	800468c <lwip_netconn_do_close_internal+0x24>
 800467e:	4b83      	ldr	r3, [pc, #524]	; (800488c <lwip_netconn_do_close_internal+0x224>)
 8004680:	f44f 7251 	mov.w	r2, #836	; 0x344
 8004684:	4982      	ldr	r1, [pc, #520]	; (8004890 <lwip_netconn_do_close_internal+0x228>)
 8004686:	4883      	ldr	r0, [pc, #524]	; (8004894 <lwip_netconn_do_close_internal+0x22c>)
 8004688:	f008 f8c3 	bl	800c812 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800468c:	7863      	ldrb	r3, [r4, #1]
 800468e:	2b04      	cmp	r3, #4
 8004690:	d006      	beq.n	80046a0 <lwip_netconn_do_close_internal+0x38>
 8004692:	4b7e      	ldr	r3, [pc, #504]	; (800488c <lwip_netconn_do_close_internal+0x224>)
 8004694:	f240 3245 	movw	r2, #837	; 0x345
 8004698:	497f      	ldr	r1, [pc, #508]	; (8004898 <lwip_netconn_do_close_internal+0x230>)
 800469a:	487e      	ldr	r0, [pc, #504]	; (8004894 <lwip_netconn_do_close_internal+0x22c>)
 800469c:	f008 f8b9 	bl	800c812 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80046a0:	6863      	ldr	r3, [r4, #4]
 80046a2:	b32b      	cbz	r3, 80046f0 <lwip_netconn_do_close_internal+0x88>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80046a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046a6:	b35b      	cbz	r3, 8004700 <lwip_netconn_do_close_internal+0x98>
  tpcb = conn->pcb.tcp;
 80046a8:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80046aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046ac:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 80046ae:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80046b2:	f003 0902 	and.w	r9, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d02a      	beq.n	8004710 <lwip_netconn_do_close_internal+0xa8>
  } else if (shut_rx &&
 80046ba:	f1ba 0f00 	cmp.w	sl, #0
 80046be:	d006      	beq.n	80046ce <lwip_netconn_do_close_internal+0x66>
             ((tpcb->state == FIN_WAIT_1) ||
 80046c0:	7d2a      	ldrb	r2, [r5, #20]
 80046c2:	1f53      	subs	r3, r2, #5
 80046c4:	b2db      	uxtb	r3, r3
  } else if (shut_rx &&
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d93a      	bls.n	8004740 <lwip_netconn_do_close_internal+0xd8>
              (tpcb->state == FIN_WAIT_2) ||
 80046ca:	2a08      	cmp	r2, #8
 80046cc:	d03a      	beq.n	8004744 <lwip_netconn_do_close_internal+0xdc>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80046ce:	f1b9 0f00 	cmp.w	r9, #0
 80046d2:	d039      	beq.n	8004748 <lwip_netconn_do_close_internal+0xe0>
 80046d4:	7eab      	ldrb	r3, [r5, #26]
 80046d6:	f013 0f10 	tst.w	r3, #16
 80046da:	d137      	bne.n	800474c <lwip_netconn_do_close_internal+0xe4>
    close = 0;
 80046dc:	2700      	movs	r7, #0
 80046de:	e018      	b.n	8004712 <lwip_netconn_do_close_internal+0xaa>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80046e0:	4b6a      	ldr	r3, [pc, #424]	; (800488c <lwip_netconn_do_close_internal+0x224>)
 80046e2:	f240 3243 	movw	r2, #835	; 0x343
 80046e6:	496d      	ldr	r1, [pc, #436]	; (800489c <lwip_netconn_do_close_internal+0x234>)
 80046e8:	486a      	ldr	r0, [pc, #424]	; (8004894 <lwip_netconn_do_close_internal+0x22c>)
 80046ea:	f008 f892 	bl	800c812 <iprintf>
 80046ee:	e7c1      	b.n	8004674 <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80046f0:	4b66      	ldr	r3, [pc, #408]	; (800488c <lwip_netconn_do_close_internal+0x224>)
 80046f2:	f240 3246 	movw	r2, #838	; 0x346
 80046f6:	496a      	ldr	r1, [pc, #424]	; (80048a0 <lwip_netconn_do_close_internal+0x238>)
 80046f8:	4866      	ldr	r0, [pc, #408]	; (8004894 <lwip_netconn_do_close_internal+0x22c>)
 80046fa:	f008 f88a 	bl	800c812 <iprintf>
 80046fe:	e7d1      	b.n	80046a4 <lwip_netconn_do_close_internal+0x3c>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004700:	4b62      	ldr	r3, [pc, #392]	; (800488c <lwip_netconn_do_close_internal+0x224>)
 8004702:	f240 3247 	movw	r2, #839	; 0x347
 8004706:	4967      	ldr	r1, [pc, #412]	; (80048a4 <lwip_netconn_do_close_internal+0x23c>)
 8004708:	4862      	ldr	r0, [pc, #392]	; (8004894 <lwip_netconn_do_close_internal+0x22c>)
 800470a:	f008 f882 	bl	800c812 <iprintf>
 800470e:	e7cb      	b.n	80046a8 <lwip_netconn_do_close_internal+0x40>
    close = 1;
 8004710:	2701      	movs	r7, #1
  if (close) {
 8004712:	b9ef      	cbnz	r7, 8004750 <lwip_netconn_do_close_internal+0xe8>
  if (tpcb->state == LISTEN) {
 8004714:	7d2b      	ldrb	r3, [r5, #20]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d01f      	beq.n	800475a <lwip_netconn_do_close_internal+0xf2>
    if (shut_rx) {
 800471a:	f1ba 0f00 	cmp.w	sl, #0
 800471e:	d121      	bne.n	8004764 <lwip_netconn_do_close_internal+0xfc>
    if (shut_tx) {
 8004720:	f1b9 0f00 	cmp.w	r9, #0
 8004724:	d127      	bne.n	8004776 <lwip_netconn_do_close_internal+0x10e>
    if (close) {
 8004726:	bb5f      	cbnz	r7, 8004780 <lwip_netconn_do_close_internal+0x118>
  if (close) {
 8004728:	b3a7      	cbz	r7, 8004794 <lwip_netconn_do_close_internal+0x12c>
      err = tcp_close(tpcb);
 800472a:	4628      	mov	r0, r5
 800472c:	f004 f842 	bl	80087b4 <tcp_close>
 8004730:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8004732:	2e00      	cmp	r6, #0
 8004734:	d042      	beq.n	80047bc <lwip_netconn_do_close_internal+0x154>
    if (err == ERR_MEM) {
 8004736:	f1b6 3fff 	cmp.w	r6, #4294967295
 800473a:	d032      	beq.n	80047a2 <lwip_netconn_do_close_internal+0x13a>
      close_finished = 1;
 800473c:	2301      	movs	r3, #1
 800473e:	e03e      	b.n	80047be <lwip_netconn_do_close_internal+0x156>
    close = 1;
 8004740:	2701      	movs	r7, #1
 8004742:	e7e6      	b.n	8004712 <lwip_netconn_do_close_internal+0xaa>
 8004744:	2701      	movs	r7, #1
 8004746:	e7e4      	b.n	8004712 <lwip_netconn_do_close_internal+0xaa>
    close = 0;
 8004748:	2700      	movs	r7, #0
 800474a:	e7e2      	b.n	8004712 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800474c:	2701      	movs	r7, #1
 800474e:	e7e0      	b.n	8004712 <lwip_netconn_do_close_internal+0xaa>
    tcp_arg(tpcb, NULL);
 8004750:	2100      	movs	r1, #0
 8004752:	4628      	mov	r0, r5
 8004754:	f003 fc9d 	bl	8008092 <tcp_arg>
 8004758:	e7dc      	b.n	8004714 <lwip_netconn_do_close_internal+0xac>
    tcp_accept(tpcb, NULL);
 800475a:	2100      	movs	r1, #0
 800475c:	4628      	mov	r0, r5
 800475e:	f003 fce7 	bl	8008130 <tcp_accept>
 8004762:	e7e1      	b.n	8004728 <lwip_netconn_do_close_internal+0xc0>
      tcp_recv(tpcb, NULL);
 8004764:	2100      	movs	r1, #0
 8004766:	4628      	mov	r0, r5
 8004768:	f003 fc96 	bl	8008098 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800476c:	2100      	movs	r1, #0
 800476e:	4628      	mov	r0, r5
 8004770:	f003 fcde 	bl	8008130 <tcp_accept>
 8004774:	e7d4      	b.n	8004720 <lwip_netconn_do_close_internal+0xb8>
      tcp_sent(tpcb, NULL);
 8004776:	2100      	movs	r1, #0
 8004778:	4628      	mov	r0, r5
 800477a:	f003 fca7 	bl	80080cc <tcp_sent>
 800477e:	e7d2      	b.n	8004726 <lwip_netconn_do_close_internal+0xbe>
      tcp_poll(tpcb, NULL, 0);
 8004780:	2200      	movs	r2, #0
 8004782:	4611      	mov	r1, r2
 8004784:	4628      	mov	r0, r5
 8004786:	f003 fcdb 	bl	8008140 <tcp_poll>
      tcp_err(tpcb, NULL);
 800478a:	2100      	movs	r1, #0
 800478c:	4628      	mov	r0, r5
 800478e:	f003 fcb5 	bl	80080fc <tcp_err>
 8004792:	e7c9      	b.n	8004728 <lwip_netconn_do_close_internal+0xc0>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8004794:	464a      	mov	r2, r9
 8004796:	4651      	mov	r1, sl
 8004798:	4628      	mov	r0, r5
 800479a:	f004 f8b3 	bl	8008904 <tcp_shutdown>
 800479e:	4606      	mov	r6, r0
 80047a0:	e7c7      	b.n	8004732 <lwip_netconn_do_close_internal+0xca>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80047a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047a4:	7a5b      	ldrb	r3, [r3, #9]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d13f      	bne.n	800482a <lwip_netconn_do_close_internal+0x1c2>
        if (close) {
 80047aa:	b90f      	cbnz	r7, 80047b0 <lwip_netconn_do_close_internal+0x148>
        close_finished = 1;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e006      	b.n	80047be <lwip_netconn_do_close_internal+0x156>
          tcp_abort(tpcb);
 80047b0:	4628      	mov	r0, r5
 80047b2:	f004 f94f 	bl	8008a54 <tcp_abort>
        close_finished = 1;
 80047b6:	463b      	mov	r3, r7
          err = ERR_OK;
 80047b8:	2600      	movs	r6, #0
 80047ba:	e000      	b.n	80047be <lwip_netconn_do_close_internal+0x156>
    close_finished = 1;
 80047bc:	2301      	movs	r3, #1
  if (close_finished) {
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d03a      	beq.n	8004838 <lwip_netconn_do_close_internal+0x1d0>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80047c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047c4:	681d      	ldr	r5, [r3, #0]
 80047c6:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 80047c8:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80047ce:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 80047d0:	b9ce      	cbnz	r6, 8004806 <lwip_netconn_do_close_internal+0x19e>
      if (close) {
 80047d2:	b137      	cbz	r7, 80047e2 <lwip_netconn_do_close_internal+0x17a>
        conn->pcb.tcp = NULL;
 80047d4:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80047d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047d8:	b11b      	cbz	r3, 80047e2 <lwip_netconn_do_close_internal+0x17a>
 80047da:	2200      	movs	r2, #0
 80047dc:	2104      	movs	r1, #4
 80047de:	4620      	mov	r0, r4
 80047e0:	4798      	blx	r3
      if (shut_rx) {
 80047e2:	f1ba 0f00 	cmp.w	sl, #0
 80047e6:	d005      	beq.n	80047f4 <lwip_netconn_do_close_internal+0x18c>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80047e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047ea:	b11b      	cbz	r3, 80047f4 <lwip_netconn_do_close_internal+0x18c>
 80047ec:	2200      	movs	r2, #0
 80047ee:	4611      	mov	r1, r2
 80047f0:	4620      	mov	r0, r4
 80047f2:	4798      	blx	r3
      if (shut_tx) {
 80047f4:	f1b9 0f00 	cmp.w	r9, #0
 80047f8:	d005      	beq.n	8004806 <lwip_netconn_do_close_internal+0x19e>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80047fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047fc:	b11b      	cbz	r3, 8004806 <lwip_netconn_do_close_internal+0x19e>
 80047fe:	2200      	movs	r2, #0
 8004800:	2102      	movs	r1, #2
 8004802:	4620      	mov	r0, r4
 8004804:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 8004806:	b14c      	cbz	r4, 800481c <lwip_netconn_do_close_internal+0x1b4>
 8004808:	f007 fa9a 	bl	800bd40 <sys_arch_protect>
 800480c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004810:	f113 0f0c 	cmn.w	r3, #12
 8004814:	db00      	blt.n	8004818 <lwip_netconn_do_close_internal+0x1b0>
 8004816:	7226      	strb	r6, [r4, #8]
 8004818:	f007 fa9e 	bl	800bd58 <sys_arch_unprotect>
    if (delayed)
 800481c:	f1b8 0f00 	cmp.w	r8, #0
 8004820:	d105      	bne.n	800482e <lwip_netconn_do_close_internal+0x1c6>
    return ERR_OK;
 8004822:	2600      	movs	r6, #0
}
 8004824:	4630      	mov	r0, r6
 8004826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t close_finished = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	e7c7      	b.n	80047be <lwip_netconn_do_close_internal+0x156>
      sys_sem_signal(op_completed_sem);
 800482e:	4628      	mov	r0, r5
 8004830:	f007 fa36 	bl	800bca0 <sys_sem_signal>
    return ERR_OK;
 8004834:	2600      	movs	r6, #0
 8004836:	e7f5      	b.n	8004824 <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004838:	7d2b      	ldrb	r3, [r5, #20]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d019      	beq.n	8004872 <lwip_netconn_do_close_internal+0x20a>
    if (shut_tx) {
 800483e:	f1b9 0f00 	cmp.w	r9, #0
 8004842:	d11e      	bne.n	8004882 <lwip_netconn_do_close_internal+0x21a>
    tcp_poll(tpcb, poll_tcp, 1);
 8004844:	2201      	movs	r2, #1
 8004846:	4918      	ldr	r1, [pc, #96]	; (80048a8 <lwip_netconn_do_close_internal+0x240>)
 8004848:	4628      	mov	r0, r5
 800484a:	f003 fc79 	bl	8008140 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800484e:	4917      	ldr	r1, [pc, #92]	; (80048ac <lwip_netconn_do_close_internal+0x244>)
 8004850:	4628      	mov	r0, r5
 8004852:	f003 fc53 	bl	80080fc <tcp_err>
    tcp_arg(tpcb, conn);
 8004856:	4621      	mov	r1, r4
 8004858:	4628      	mov	r0, r5
 800485a:	f003 fc1a 	bl	8008092 <tcp_arg>
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800485e:	2e00      	cmp	r6, #0
 8004860:	d1e0      	bne.n	8004824 <lwip_netconn_do_close_internal+0x1bc>
 8004862:	4b0a      	ldr	r3, [pc, #40]	; (800488c <lwip_netconn_do_close_internal+0x224>)
 8004864:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8004868:	4911      	ldr	r1, [pc, #68]	; (80048b0 <lwip_netconn_do_close_internal+0x248>)
 800486a:	480a      	ldr	r0, [pc, #40]	; (8004894 <lwip_netconn_do_close_internal+0x22c>)
 800486c:	f007 ffd1 	bl	800c812 <iprintf>
 8004870:	e7d8      	b.n	8004824 <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <lwip_netconn_do_close_internal+0x224>)
 8004874:	f240 32e3 	movw	r2, #995	; 0x3e3
 8004878:	490e      	ldr	r1, [pc, #56]	; (80048b4 <lwip_netconn_do_close_internal+0x24c>)
 800487a:	4806      	ldr	r0, [pc, #24]	; (8004894 <lwip_netconn_do_close_internal+0x22c>)
 800487c:	f007 ffc9 	bl	800c812 <iprintf>
 8004880:	e7dd      	b.n	800483e <lwip_netconn_do_close_internal+0x1d6>
      tcp_sent(tpcb, sent_tcp);
 8004882:	490d      	ldr	r1, [pc, #52]	; (80048b8 <lwip_netconn_do_close_internal+0x250>)
 8004884:	4628      	mov	r0, r5
 8004886:	f003 fc21 	bl	80080cc <tcp_sent>
 800488a:	e7db      	b.n	8004844 <lwip_netconn_do_close_internal+0x1dc>
 800488c:	0800d24c 	.word	0x0800d24c
 8004890:	0800cf68 	.word	0x0800cf68
 8004894:	0800cd98 	.word	0x0800cd98
 8004898:	0800cf88 	.word	0x0800cf88
 800489c:	0800cdd0 	.word	0x0800cdd0
 80048a0:	0800cfac 	.word	0x0800cfac
 80048a4:	0800cf14 	.word	0x0800cf14
 80048a8:	080048bd 	.word	0x080048bd
 80048ac:	08004309 	.word	0x08004309
 80048b0:	0800cfe4 	.word	0x0800cfe4
 80048b4:	0800cfc0 	.word	0x0800cfc0
 80048b8:	08004941 	.word	0x08004941

080048bc <poll_tcp>:
{
 80048bc:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80048be:	4604      	mov	r4, r0
 80048c0:	b1f8      	cbz	r0, 8004902 <poll_tcp+0x46>
  if (conn->state == NETCONN_WRITE) {
 80048c2:	7863      	ldrb	r3, [r4, #1]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d024      	beq.n	8004912 <poll_tcp+0x56>
  } else if (conn->state == NETCONN_CLOSE) {
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d027      	beq.n	800491c <poll_tcp+0x60>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80048cc:	7f23      	ldrb	r3, [r4, #28]
 80048ce:	f013 0f10 	tst.w	r3, #16
 80048d2:	d014      	beq.n	80048fe <poll_tcp+0x42>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80048d4:	6862      	ldr	r2, [r4, #4]
 80048d6:	b192      	cbz	r2, 80048fe <poll_tcp+0x42>
 80048d8:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
 80048dc:	f240 51a1 	movw	r1, #1441	; 0x5a1
 80048e0:	4288      	cmp	r0, r1
 80048e2:	d90c      	bls.n	80048fe <poll_tcp+0x42>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80048e4:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80048e8:	2a04      	cmp	r2, #4
 80048ea:	d808      	bhi.n	80048fe <poll_tcp+0x42>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80048ec:	f023 0310 	bic.w	r3, r3, #16
 80048f0:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80048f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048f4:	b11b      	cbz	r3, 80048fe <poll_tcp+0x42>
 80048f6:	2200      	movs	r2, #0
 80048f8:	2102      	movs	r1, #2
 80048fa:	4620      	mov	r0, r4
 80048fc:	4798      	blx	r3
}
 80048fe:	2000      	movs	r0, #0
 8004900:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004902:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <poll_tcp+0x78>)
 8004904:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004908:	490b      	ldr	r1, [pc, #44]	; (8004938 <poll_tcp+0x7c>)
 800490a:	480c      	ldr	r0, [pc, #48]	; (800493c <poll_tcp+0x80>)
 800490c:	f007 ff81 	bl	800c812 <iprintf>
 8004910:	e7d7      	b.n	80048c2 <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004912:	2101      	movs	r1, #1
 8004914:	4620      	mov	r0, r4
 8004916:	f7ff fd97 	bl	8004448 <lwip_netconn_do_writemore>
 800491a:	e7d7      	b.n	80048cc <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800491c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800491e:	b11b      	cbz	r3, 8004928 <poll_tcp+0x6c>
 8004920:	7a5a      	ldrb	r2, [r3, #9]
 8004922:	b10a      	cbz	r2, 8004928 <poll_tcp+0x6c>
      conn->current_msg->msg.sd.polls_left--;
 8004924:	3a01      	subs	r2, #1
 8004926:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004928:	2101      	movs	r1, #1
 800492a:	4620      	mov	r0, r4
 800492c:	f7ff fe9c 	bl	8004668 <lwip_netconn_do_close_internal>
 8004930:	e7cc      	b.n	80048cc <poll_tcp+0x10>
 8004932:	bf00      	nop
 8004934:	0800d24c 	.word	0x0800d24c
 8004938:	0800cf04 	.word	0x0800cf04
 800493c:	0800cd98 	.word	0x0800cd98

08004940 <sent_tcp>:
{
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004944:	4604      	mov	r4, r0
 8004946:	b1e8      	cbz	r0, 8004984 <sent_tcp+0x44>
  if (conn) {
 8004948:	b1d4      	cbz	r4, 8004980 <sent_tcp+0x40>
    if (conn->state == NETCONN_WRITE) {
 800494a:	7863      	ldrb	r3, [r4, #1]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d021      	beq.n	8004994 <sent_tcp+0x54>
    } else if (conn->state == NETCONN_CLOSE) {
 8004950:	2b04      	cmp	r3, #4
 8004952:	d024      	beq.n	800499e <sent_tcp+0x5e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	b19b      	cbz	r3, 8004980 <sent_tcp+0x40>
 8004958:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 800495c:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8004960:	4291      	cmp	r1, r2
 8004962:	d90d      	bls.n	8004980 <sent_tcp+0x40>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8004964:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004968:	2b04      	cmp	r3, #4
 800496a:	d809      	bhi.n	8004980 <sent_tcp+0x40>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800496c:	7f23      	ldrb	r3, [r4, #28]
 800496e:	f023 0310 	bic.w	r3, r3, #16
 8004972:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8004974:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004976:	b11b      	cbz	r3, 8004980 <sent_tcp+0x40>
 8004978:	462a      	mov	r2, r5
 800497a:	2102      	movs	r1, #2
 800497c:	4620      	mov	r0, r4
 800497e:	4798      	blx	r3
}
 8004980:	2000      	movs	r0, #0
 8004982:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004984:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <sent_tcp+0x68>)
 8004986:	f240 1261 	movw	r2, #353	; 0x161
 800498a:	4908      	ldr	r1, [pc, #32]	; (80049ac <sent_tcp+0x6c>)
 800498c:	4808      	ldr	r0, [pc, #32]	; (80049b0 <sent_tcp+0x70>)
 800498e:	f007 ff40 	bl	800c812 <iprintf>
 8004992:	e7d9      	b.n	8004948 <sent_tcp+0x8>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004994:	2101      	movs	r1, #1
 8004996:	4620      	mov	r0, r4
 8004998:	f7ff fd56 	bl	8004448 <lwip_netconn_do_writemore>
 800499c:	e7da      	b.n	8004954 <sent_tcp+0x14>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800499e:	2101      	movs	r1, #1
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7ff fe61 	bl	8004668 <lwip_netconn_do_close_internal>
 80049a6:	e7d5      	b.n	8004954 <sent_tcp+0x14>
 80049a8:	0800d24c 	.word	0x0800d24c
 80049ac:	0800cf04 	.word	0x0800cf04
 80049b0:	0800cd98 	.word	0x0800cd98

080049b4 <recv_tcp>:
{
 80049b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b8:	4604      	mov	r4, r0
 80049ba:	4615      	mov	r5, r2
 80049bc:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80049be:	460f      	mov	r7, r1
 80049c0:	b1e9      	cbz	r1, 80049fe <recv_tcp+0x4a>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80049c2:	b31c      	cbz	r4, 8004a0c <recv_tcp+0x58>
  if (conn == NULL) {
 80049c4:	2c00      	cmp	r4, #0
 80049c6:	d04a      	beq.n	8004a5e <recv_tcp+0xaa>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	429f      	cmp	r7, r3
 80049cc:	d006      	beq.n	80049dc <recv_tcp+0x28>
 80049ce:	4b28      	ldr	r3, [pc, #160]	; (8004a70 <recv_tcp+0xbc>)
 80049d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049d4:	4927      	ldr	r1, [pc, #156]	; (8004a74 <recv_tcp+0xc0>)
 80049d6:	4828      	ldr	r0, [pc, #160]	; (8004a78 <recv_tcp+0xc4>)
 80049d8:	f007 ff1b 	bl	800c812 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80049dc:	f104 0610 	add.w	r6, r4, #16
 80049e0:	4630      	mov	r0, r6
 80049e2:	f007 f91d 	bl	800bc20 <sys_mbox_valid>
 80049e6:	b9c0      	cbnz	r0, 8004a1a <recv_tcp+0x66>
    if (p != NULL) {
 80049e8:	2d00      	cmp	r5, #0
 80049ea:	d03b      	beq.n	8004a64 <recv_tcp+0xb0>
      tcp_recved(pcb, p->tot_len);
 80049ec:	8929      	ldrh	r1, [r5, #8]
 80049ee:	4638      	mov	r0, r7
 80049f0:	f003 fae2 	bl	8007fb8 <tcp_recved>
      pbuf_free(p);
 80049f4:	4628      	mov	r0, r5
 80049f6:	f002 fe3d 	bl	8007674 <pbuf_free>
    return ERR_OK;
 80049fa:	2500      	movs	r5, #0
 80049fc:	e01e      	b.n	8004a3c <recv_tcp+0x88>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80049fe:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <recv_tcp+0xbc>)
 8004a00:	22f9      	movs	r2, #249	; 0xf9
 8004a02:	491e      	ldr	r1, [pc, #120]	; (8004a7c <recv_tcp+0xc8>)
 8004a04:	481c      	ldr	r0, [pc, #112]	; (8004a78 <recv_tcp+0xc4>)
 8004a06:	f007 ff04 	bl	800c812 <iprintf>
 8004a0a:	e7da      	b.n	80049c2 <recv_tcp+0xe>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004a0c:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <recv_tcp+0xbc>)
 8004a0e:	22fa      	movs	r2, #250	; 0xfa
 8004a10:	491b      	ldr	r1, [pc, #108]	; (8004a80 <recv_tcp+0xcc>)
 8004a12:	4819      	ldr	r0, [pc, #100]	; (8004a78 <recv_tcp+0xc4>)
 8004a14:	f007 fefd 	bl	800c812 <iprintf>
 8004a18:	e7d4      	b.n	80049c4 <recv_tcp+0x10>
  if (err != ERR_OK) {
 8004a1a:	f1b8 0f00 	cmp.w	r8, #0
 8004a1e:	d110      	bne.n	8004a42 <recv_tcp+0x8e>
  if (p != NULL) {
 8004a20:	b1dd      	cbz	r5, 8004a5a <recv_tcp+0xa6>
    len = p->tot_len;
 8004a22:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8004a24:	4629      	mov	r1, r5
 8004a26:	4630      	mov	r0, r6
 8004a28:	f007 f8b1 	bl	800bb8e <sys_mbox_trypost>
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	b9d8      	cbnz	r0, 8004a68 <recv_tcp+0xb4>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004a30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a32:	b11b      	cbz	r3, 8004a3c <recv_tcp+0x88>
 8004a34:	463a      	mov	r2, r7
 8004a36:	2100      	movs	r1, #0
 8004a38:	4620      	mov	r0, r4
 8004a3a:	4798      	blx	r3
}
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NETCONN_SET_SAFE_ERR(conn, err);
 8004a42:	f007 f97d 	bl	800bd40 <sys_arch_protect>
 8004a46:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004a4a:	f113 0f0c 	cmn.w	r3, #12
 8004a4e:	db01      	blt.n	8004a54 <recv_tcp+0xa0>
 8004a50:	f884 8008 	strb.w	r8, [r4, #8]
 8004a54:	f007 f980 	bl	800bd58 <sys_arch_unprotect>
 8004a58:	e7e2      	b.n	8004a20 <recv_tcp+0x6c>
    len = 0;
 8004a5a:	2700      	movs	r7, #0
 8004a5c:	e7e2      	b.n	8004a24 <recv_tcp+0x70>
    return ERR_VAL;
 8004a5e:	f06f 0505 	mvn.w	r5, #5
 8004a62:	e7eb      	b.n	8004a3c <recv_tcp+0x88>
    return ERR_OK;
 8004a64:	2500      	movs	r5, #0
 8004a66:	e7e9      	b.n	8004a3c <recv_tcp+0x88>
    return ERR_MEM;
 8004a68:	f04f 35ff 	mov.w	r5, #4294967295
 8004a6c:	e7e6      	b.n	8004a3c <recv_tcp+0x88>
 8004a6e:	bf00      	nop
 8004a70:	0800d24c 	.word	0x0800d24c
 8004a74:	0800d22c 	.word	0x0800d22c
 8004a78:	0800cd98 	.word	0x0800cd98
 8004a7c:	0800d1e8 	.word	0x0800d1e8
 8004a80:	0800d20c 	.word	0x0800d20c

08004a84 <lwip_netconn_do_newconn>:
{
 8004a84:	b510      	push	{r4, lr}
 8004a86:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8004a8c:	6803      	ldr	r3, [r0, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	b17b      	cbz	r3, 8004ab2 <lwip_netconn_do_newconn+0x2e>
  TCPIP_APIMSG_ACK(msg);
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	b163      	cbz	r3, 8004ab0 <lwip_netconn_do_newconn+0x2c>
 8004a96:	f007 f953 	bl	800bd40 <sys_arch_protect>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004aa0:	f112 0f0c 	cmn.w	r2, #12
 8004aa4:	db02      	blt.n	8004aac <lwip_netconn_do_newconn+0x28>
 8004aa6:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004aaa:	721a      	strb	r2, [r3, #8]
 8004aac:	f007 f954 	bl	800bd58 <sys_arch_unprotect>
 8004ab0:	bd10      	pop	{r4, pc}
    pcb_new(msg);
 8004ab2:	f7ff fbe5 	bl	8004280 <pcb_new>
 8004ab6:	e7ec      	b.n	8004a92 <lwip_netconn_do_newconn+0xe>

08004ab8 <netconn_alloc>:
{
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	4605      	mov	r5, r0
 8004abc:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8004abe:	2007      	movs	r0, #7
 8004ac0:	f002 fbe8 	bl	8007294 <memp_malloc>
  if (conn == NULL) {
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	b318      	cbz	r0, 8004b10 <netconn_alloc+0x58>
  conn->last_err = ERR_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8004acc:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 8004ace:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 8004ad0:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004ad4:	2d10      	cmp	r5, #16
 8004ad6:	d001      	beq.n	8004adc <netconn_alloc+0x24>
 8004ad8:	2d20      	cmp	r5, #32
 8004ada:	d11b      	bne.n	8004b14 <netconn_alloc+0x5c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8004adc:	f104 0510 	add.w	r5, r4, #16
 8004ae0:	2106      	movs	r1, #6
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f007 f82c 	bl	800bb40 <sys_mbox_new>
 8004ae8:	b9d8      	cbnz	r0, 8004b22 <netconn_alloc+0x6a>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8004aea:	2100      	movs	r1, #0
 8004aec:	f104 000c 	add.w	r0, r4, #12
 8004af0:	f007 f89f 	bl	800bc32 <sys_sem_new>
 8004af4:	b9d8      	cbnz	r0, 8004b2e <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8004af6:	f104 0014 	add.w	r0, r4, #20
 8004afa:	f007 f897 	bl	800bc2c <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295
 8004b06:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 8004b08:	62a6      	str	r6, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 8004b0a:	6263      	str	r3, [r4, #36]	; 0x24
  conn->write_offset = 0;
 8004b0c:	6223      	str	r3, [r4, #32]
  conn->flags = 0;
 8004b0e:	7723      	strb	r3, [r4, #28]
}
 8004b10:	4620      	mov	r0, r4
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8004b14:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <netconn_alloc+0x80>)
 8004b16:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8004b1a:	4908      	ldr	r1, [pc, #32]	; (8004b3c <netconn_alloc+0x84>)
 8004b1c:	4808      	ldr	r0, [pc, #32]	; (8004b40 <netconn_alloc+0x88>)
 8004b1e:	f007 fe78 	bl	800c812 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8004b22:	4621      	mov	r1, r4
 8004b24:	2007      	movs	r0, #7
 8004b26:	f002 fbcf 	bl	80072c8 <memp_free>
  return NULL;
 8004b2a:	2400      	movs	r4, #0
 8004b2c:	e7f0      	b.n	8004b10 <netconn_alloc+0x58>
    sys_mbox_free(&conn->recvmbox);
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f007 f818 	bl	800bb64 <sys_mbox_free>
    goto free_and_return;
 8004b34:	e7f5      	b.n	8004b22 <netconn_alloc+0x6a>
 8004b36:	bf00      	nop
 8004b38:	0800d24c 	.word	0x0800d24c
 8004b3c:	0800d0f8 	.word	0x0800d0f8
 8004b40:	0800cd98 	.word	0x0800cd98

08004b44 <netconn_free>:
{
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8004b48:	6843      	ldr	r3, [r0, #4]
 8004b4a:	b133      	cbz	r3, 8004b5a <netconn_free+0x16>
 8004b4c:	4b16      	ldr	r3, [pc, #88]	; (8004ba8 <netconn_free+0x64>)
 8004b4e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8004b52:	4916      	ldr	r1, [pc, #88]	; (8004bac <netconn_free+0x68>)
 8004b54:	4816      	ldr	r0, [pc, #88]	; (8004bb0 <netconn_free+0x6c>)
 8004b56:	f007 fe5c 	bl	800c812 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004b5a:	f104 0010 	add.w	r0, r4, #16
 8004b5e:	f007 f85f 	bl	800bc20 <sys_mbox_valid>
 8004b62:	b988      	cbnz	r0, 8004b88 <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004b64:	f104 0014 	add.w	r0, r4, #20
 8004b68:	f007 f85a 	bl	800bc20 <sys_mbox_valid>
 8004b6c:	b9a0      	cbnz	r0, 8004b98 <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 8004b6e:	f104 050c 	add.w	r5, r4, #12
 8004b72:	4628      	mov	r0, r5
 8004b74:	f007 f899 	bl	800bcaa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f007 f8a1 	bl	800bcc0 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8004b7e:	4621      	mov	r1, r4
 8004b80:	2007      	movs	r0, #7
 8004b82:	f002 fba1 	bl	80072c8 <memp_free>
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <netconn_free+0x64>)
 8004b8a:	f240 22e2 	movw	r2, #738	; 0x2e2
 8004b8e:	4909      	ldr	r1, [pc, #36]	; (8004bb4 <netconn_free+0x70>)
 8004b90:	4807      	ldr	r0, [pc, #28]	; (8004bb0 <netconn_free+0x6c>)
 8004b92:	f007 fe3e 	bl	800c812 <iprintf>
 8004b96:	e7e5      	b.n	8004b64 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004b98:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <netconn_free+0x64>)
 8004b9a:	f240 22e5 	movw	r2, #741	; 0x2e5
 8004b9e:	4906      	ldr	r1, [pc, #24]	; (8004bb8 <netconn_free+0x74>)
 8004ba0:	4803      	ldr	r0, [pc, #12]	; (8004bb0 <netconn_free+0x6c>)
 8004ba2:	f007 fe36 	bl	800c812 <iprintf>
 8004ba6:	e7e2      	b.n	8004b6e <netconn_free+0x2a>
 8004ba8:	0800d24c 	.word	0x0800d24c
 8004bac:	0800d120 	.word	0x0800d120
 8004bb0:	0800cd98 	.word	0x0800cd98
 8004bb4:	0800d150 	.word	0x0800d150
 8004bb8:	0800d18c 	.word	0x0800d18c

08004bbc <netconn_drain>:
{
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	4605      	mov	r5, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8004bc2:	f100 0410 	add.w	r4, r0, #16
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f007 f82a 	bl	800bc20 <sys_mbox_valid>
 8004bcc:	bb38      	cbnz	r0, 8004c1e <netconn_drain+0x62>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004bce:	3514      	adds	r5, #20
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f007 f825 	bl	800bc20 <sys_mbox_valid>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d03e      	beq.n	8004c58 <netconn_drain+0x9c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8004bda:	a901      	add	r1, sp, #4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f007 f80c 	bl	800bbfa <sys_arch_mbox_tryfetch>
 8004be2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004be6:	d031      	beq.n	8004c4c <netconn_drain+0x90>
      if (mem != &netconn_aborted) {
 8004be8:	9c01      	ldr	r4, [sp, #4]
 8004bea:	4b1c      	ldr	r3, [pc, #112]	; (8004c5c <netconn_drain+0xa0>)
 8004bec:	429c      	cmp	r4, r3
 8004bee:	d0f4      	beq.n	8004bda <netconn_drain+0x1e>
        netconn_drain(newconn);
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f7ff ffe3 	bl	8004bbc <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8004bf6:	6860      	ldr	r0, [r4, #4]
 8004bf8:	b118      	cbz	r0, 8004c02 <netconn_drain+0x46>
          tcp_abort(newconn->pcb.tcp);
 8004bfa:	f003 ff2b 	bl	8008a54 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	6063      	str	r3, [r4, #4]
        netconn_free(newconn);
 8004c02:	4620      	mov	r0, r4
 8004c04:	f7ff ff9e 	bl	8004b44 <netconn_free>
 8004c08:	e7e7      	b.n	8004bda <netconn_drain+0x1e>
        if (mem != NULL) {
 8004c0a:	9e01      	ldr	r6, [sp, #4]
 8004c0c:	b13e      	cbz	r6, 8004c1e <netconn_drain+0x62>
          if (conn->pcb.tcp != NULL) {
 8004c0e:	6868      	ldr	r0, [r5, #4]
 8004c10:	b110      	cbz	r0, 8004c18 <netconn_drain+0x5c>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8004c12:	8931      	ldrh	r1, [r6, #8]
 8004c14:	f003 f9d0 	bl	8007fb8 <tcp_recved>
          pbuf_free(p);
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f002 fd2b 	bl	8007674 <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8004c1e:	a901      	add	r1, sp, #4
 8004c20:	4620      	mov	r0, r4
 8004c22:	f006 ffea 	bl	800bbfa <sys_arch_mbox_tryfetch>
 8004c26:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c2a:	d008      	beq.n	8004c3e <netconn_drain+0x82>
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8004c2c:	782b      	ldrb	r3, [r5, #0]
 8004c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c32:	2b10      	cmp	r3, #16
 8004c34:	d0e9      	beq.n	8004c0a <netconn_drain+0x4e>
        netbuf_delete((struct netbuf *)mem);
 8004c36:	9801      	ldr	r0, [sp, #4]
 8004c38:	f000 fb16 	bl	8005268 <netbuf_delete>
 8004c3c:	e7ef      	b.n	8004c1e <netconn_drain+0x62>
    sys_mbox_free(&conn->recvmbox);
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f006 ff90 	bl	800bb64 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8004c44:	4620      	mov	r0, r4
 8004c46:	f006 fff1 	bl	800bc2c <sys_mbox_set_invalid>
 8004c4a:	e7c0      	b.n	8004bce <netconn_drain+0x12>
    sys_mbox_free(&conn->acceptmbox);
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f006 ff89 	bl	800bb64 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8004c52:	4628      	mov	r0, r5
 8004c54:	f006 ffea 	bl	800bc2c <sys_mbox_set_invalid>
}
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
 8004c5c:	2000426c 	.word	0x2000426c

08004c60 <accept_function>:
{
 8004c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (conn == NULL) {
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d067      	beq.n	8004d38 <accept_function+0xd8>
 8004c68:	4604      	mov	r4, r0
 8004c6a:	4616      	mov	r6, r2
 8004c6c:	460d      	mov	r5, r1
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8004c6e:	f100 0814 	add.w	r8, r0, #20
 8004c72:	4640      	mov	r0, r8
 8004c74:	f006 ffd4 	bl	800bc20 <sys_mbox_valid>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d060      	beq.n	8004d3e <accept_function+0xde>
  if (newpcb == NULL) {
 8004c7c:	b1c5      	cbz	r5, 8004cb0 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 8004c7e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004c80:	7820      	ldrb	r0, [r4, #0]
 8004c82:	f7ff ff19 	bl	8004ab8 <netconn_alloc>
  if (newconn == NULL) {
 8004c86:	4607      	mov	r7, r0
 8004c88:	b310      	cbz	r0, 8004cd0 <accept_function+0x70>
  newconn->pcb.tcp = newpcb;
 8004c8a:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 8004c8c:	f7ff fad8 	bl	8004240 <setup_tcp>
  newconn->last_err = err;
 8004c90:	723e      	strb	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8004c92:	4639      	mov	r1, r7
 8004c94:	4640      	mov	r0, r8
 8004c96:	f006 ff7a 	bl	800bb8e <sys_mbox_trypost>
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	bb30      	cbnz	r0, 8004cec <accept_function+0x8c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004c9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ca0:	b11b      	cbz	r3, 8004caa <accept_function+0x4a>
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	4798      	blx	r3
}
 8004caa:	4628      	mov	r0, r5
 8004cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8004cb0:	492a      	ldr	r1, [pc, #168]	; (8004d5c <accept_function+0xfc>)
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	f006 ff6b 	bl	800bb8e <sys_mbox_trypost>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d143      	bne.n	8004d44 <accept_function+0xe4>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004cbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d043      	beq.n	8004d4a <accept_function+0xea>
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	4798      	blx	r3
    return ERR_VAL;
 8004cca:	f06f 0505 	mvn.w	r5, #5
 8004cce:	e7ec      	b.n	8004caa <accept_function+0x4a>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8004cd0:	4922      	ldr	r1, [pc, #136]	; (8004d5c <accept_function+0xfc>)
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	f006 ff5b 	bl	800bb8e <sys_mbox_trypost>
 8004cd8:	bbd0      	cbnz	r0, 8004d50 <accept_function+0xf0>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004cda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cdc:	b3db      	cbz	r3, 8004d56 <accept_function+0xf6>
 8004cde:	2200      	movs	r2, #0
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	4798      	blx	r3
    return ERR_MEM;
 8004ce6:	f04f 35ff 	mov.w	r5, #4294967295
 8004cea:	e7de      	b.n	8004caa <accept_function+0x4a>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8004cec:	687c      	ldr	r4, [r7, #4]
    tcp_arg(pcb, NULL);
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f003 f9ce 	bl	8008092 <tcp_arg>
    tcp_recv(pcb, NULL);
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f003 f9cd 	bl	8008098 <tcp_recv>
    tcp_sent(pcb, NULL);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4620      	mov	r0, r4
 8004d02:	f003 f9e3 	bl	80080cc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8004d06:	2200      	movs	r2, #0
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	f003 fa18 	bl	8008140 <tcp_poll>
    tcp_err(pcb, NULL);
 8004d10:	2100      	movs	r1, #0
 8004d12:	4620      	mov	r0, r4
 8004d14:	f003 f9f2 	bl	80080fc <tcp_err>
    newconn->pcb.tcp = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	607b      	str	r3, [r7, #4]
    sys_mbox_free(&newconn->recvmbox);
 8004d1c:	f107 0410 	add.w	r4, r7, #16
 8004d20:	4620      	mov	r0, r4
 8004d22:	f006 ff1f 	bl	800bb64 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8004d26:	4620      	mov	r0, r4
 8004d28:	f006 ff80 	bl	800bc2c <sys_mbox_set_invalid>
    netconn_free(newconn);
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	f7ff ff09 	bl	8004b44 <netconn_free>
    return ERR_MEM;
 8004d32:	f04f 35ff 	mov.w	r5, #4294967295
 8004d36:	e7b8      	b.n	8004caa <accept_function+0x4a>
    return ERR_VAL;
 8004d38:	f06f 0505 	mvn.w	r5, #5
 8004d3c:	e7b5      	b.n	8004caa <accept_function+0x4a>
    return ERR_VAL;
 8004d3e:	f06f 0505 	mvn.w	r5, #5
 8004d42:	e7b2      	b.n	8004caa <accept_function+0x4a>
    return ERR_VAL;
 8004d44:	f06f 0505 	mvn.w	r5, #5
 8004d48:	e7af      	b.n	8004caa <accept_function+0x4a>
 8004d4a:	f06f 0505 	mvn.w	r5, #5
 8004d4e:	e7ac      	b.n	8004caa <accept_function+0x4a>
    return ERR_MEM;
 8004d50:	f04f 35ff 	mov.w	r5, #4294967295
 8004d54:	e7a9      	b.n	8004caa <accept_function+0x4a>
 8004d56:	f04f 35ff 	mov.w	r5, #4294967295
 8004d5a:	e7a6      	b.n	8004caa <accept_function+0x4a>
 8004d5c:	2000426c 	.word	0x2000426c

08004d60 <lwip_netconn_do_delconn>:
{
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 8004d64:	6803      	ldr	r3, [r0, #0]
 8004d66:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8004d68:	b15d      	cbz	r5, 8004d82 <lwip_netconn_do_delconn+0x22>
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d006      	beq.n	8004d82 <lwip_netconn_do_delconn+0x22>
 8004d74:	4b4e      	ldr	r3, [pc, #312]	; (8004eb0 <lwip_netconn_do_delconn+0x150>)
 8004d76:	f240 4201 	movw	r2, #1025	; 0x401
 8004d7a:	494e      	ldr	r1, [pc, #312]	; (8004eb4 <lwip_netconn_do_delconn+0x154>)
 8004d7c:	484e      	ldr	r0, [pc, #312]	; (8004eb8 <lwip_netconn_do_delconn+0x158>)
 8004d7e:	f007 fd48 	bl	800c812 <iprintf>
  if (((state != NETCONN_NONE) &&
 8004d82:	b1d5      	cbz	r5, 8004dba <lwip_netconn_do_delconn+0x5a>
 8004d84:	2d02      	cmp	r5, #2
 8004d86:	d018      	beq.n	8004dba <lwip_netconn_do_delconn+0x5a>
       (state != NETCONN_LISTEN) &&
 8004d88:	2d03      	cmp	r5, #3
 8004d8a:	d016      	beq.n	8004dba <lwip_netconn_do_delconn+0x5a>
    msg->err = ERR_INPROGRESS;
 8004d8c:	23fb      	movs	r3, #251	; 0xfb
 8004d8e:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8004d90:	6820      	ldr	r0, [r4, #0]
 8004d92:	300c      	adds	r0, #12
 8004d94:	f006 ff8e 	bl	800bcb4 <sys_sem_valid>
 8004d98:	b170      	cbz	r0, 8004db8 <lwip_netconn_do_delconn+0x58>
    TCPIP_APIMSG_ACK(msg);
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	b163      	cbz	r3, 8004db8 <lwip_netconn_do_delconn+0x58>
 8004d9e:	f006 ffcf 	bl	800bd40 <sys_arch_protect>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004da8:	f112 0f0c 	cmn.w	r2, #12
 8004dac:	db02      	blt.n	8004db4 <lwip_netconn_do_delconn+0x54>
 8004dae:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004db2:	721a      	strb	r2, [r3, #8]
 8004db4:	f006 ffd0 	bl	800bd58 <sys_arch_unprotect>
 8004db8:	bd38      	pop	{r3, r4, r5, pc}
       (state != NETCONN_CONNECT)) ||
 8004dba:	2d03      	cmp	r5, #3
 8004dbc:	d027      	beq.n	8004e0e <lwip_netconn_do_delconn+0xae>
    LWIP_ASSERT("blocking connect in progress",
 8004dbe:	2d03      	cmp	r5, #3
 8004dc0:	d02b      	beq.n	8004e1a <lwip_netconn_do_delconn+0xba>
    msg->err = ERR_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 8004dc6:	6820      	ldr	r0, [r4, #0]
 8004dc8:	f7ff fef8 	bl	8004bbc <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8004dcc:	6822      	ldr	r2, [r4, #0]
 8004dce:	6851      	ldr	r1, [r2, #4]
 8004dd0:	b179      	cbz	r1, 8004df2 <lwip_netconn_do_delconn+0x92>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8004dd2:	7813      	ldrb	r3, [r2, #0]
 8004dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d02b      	beq.n	8004e34 <lwip_netconn_do_delconn+0xd4>
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d105      	bne.n	8004dec <lwip_netconn_do_delconn+0x8c>
        msg->conn->pcb.udp->recv_arg = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61cb      	str	r3, [r1, #28]
        udp_remove(msg->conn->pcb.udp);
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	6858      	ldr	r0, [r3, #4]
 8004de8:	f006 fdd6 	bl	800b998 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004df6:	b113      	cbz	r3, 8004dfe <lwip_netconn_do_delconn+0x9e>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8004dfe:	6820      	ldr	r0, [r4, #0]
 8004e00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0c4      	beq.n	8004d90 <lwip_netconn_do_delconn+0x30>
 8004e06:	2200      	movs	r2, #0
 8004e08:	2102      	movs	r1, #2
 8004e0a:	4798      	blx	r3
 8004e0c:	e7c0      	b.n	8004d90 <lwip_netconn_do_delconn+0x30>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	7f1b      	ldrb	r3, [r3, #28]
 8004e12:	f013 0f04 	tst.w	r3, #4
 8004e16:	d1d2      	bne.n	8004dbe <lwip_netconn_do_delconn+0x5e>
 8004e18:	e7b8      	b.n	8004d8c <lwip_netconn_do_delconn+0x2c>
    LWIP_ASSERT("blocking connect in progress",
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	7f1b      	ldrb	r3, [r3, #28]
 8004e1e:	f013 0f04 	tst.w	r3, #4
 8004e22:	d1ce      	bne.n	8004dc2 <lwip_netconn_do_delconn+0x62>
 8004e24:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <lwip_netconn_do_delconn+0x150>)
 8004e26:	f240 421f 	movw	r2, #1055	; 0x41f
 8004e2a:	4924      	ldr	r1, [pc, #144]	; (8004ebc <lwip_netconn_do_delconn+0x15c>)
 8004e2c:	4822      	ldr	r0, [pc, #136]	; (8004eb8 <lwip_netconn_do_delconn+0x158>)
 8004e2e:	f007 fcf0 	bl	800c812 <iprintf>
 8004e32:	e7c6      	b.n	8004dc2 <lwip_netconn_do_delconn+0x62>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8004e34:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d036      	beq.n	8004ea8 <lwip_netconn_do_delconn+0x148>
 8004e3a:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <lwip_netconn_do_delconn+0x150>)
 8004e3c:	f240 4235 	movw	r2, #1077	; 0x435
 8004e40:	491f      	ldr	r1, [pc, #124]	; (8004ec0 <lwip_netconn_do_delconn+0x160>)
 8004e42:	481d      	ldr	r0, [pc, #116]	; (8004eb8 <lwip_netconn_do_delconn+0x158>)
 8004e44:	f007 fce5 	bl	800c812 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	625c      	str	r4, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8004e56:	2100      	movs	r1, #0
 8004e58:	6820      	ldr	r0, [r4, #0]
 8004e5a:	f7ff fc05 	bl	8004668 <lwip_netconn_do_close_internal>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	d0aa      	beq.n	8004db8 <lwip_netconn_do_delconn+0x58>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	785b      	ldrb	r3, [r3, #1]
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d006      	beq.n	8004e78 <lwip_netconn_do_delconn+0x118>
 8004e6a:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <lwip_netconn_do_delconn+0x150>)
 8004e6c:	f240 423b 	movw	r2, #1083	; 0x43b
 8004e70:	4914      	ldr	r1, [pc, #80]	; (8004ec4 <lwip_netconn_do_delconn+0x164>)
 8004e72:	4811      	ldr	r0, [pc, #68]	; (8004eb8 <lwip_netconn_do_delconn+0x158>)
 8004e74:	f007 fccd 	bl	800c812 <iprintf>
          UNLOCK_TCPIP_CORE();
 8004e78:	4d13      	ldr	r5, [pc, #76]	; (8004ec8 <lwip_netconn_do_delconn+0x168>)
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f006 ff48 	bl	800bd10 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8004e80:	6820      	ldr	r0, [r4, #0]
 8004e82:	2100      	movs	r1, #0
 8004e84:	300c      	adds	r0, #12
 8004e86:	f006 feed 	bl	800bc64 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f006 ff39 	bl	800bd02 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d08f      	beq.n	8004db8 <lwip_netconn_do_delconn+0x58>
 8004e98:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <lwip_netconn_do_delconn+0x150>)
 8004e9a:	f240 423f 	movw	r2, #1087	; 0x43f
 8004e9e:	4909      	ldr	r1, [pc, #36]	; (8004ec4 <lwip_netconn_do_delconn+0x164>)
 8004ea0:	4805      	ldr	r0, [pc, #20]	; (8004eb8 <lwip_netconn_do_delconn+0x158>)
 8004ea2:	f007 fcb6 	bl	800c812 <iprintf>
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8004ea8:	6a13      	ldr	r3, [r2, #32]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0cc      	beq.n	8004e48 <lwip_netconn_do_delconn+0xe8>
 8004eae:	e7c4      	b.n	8004e3a <lwip_netconn_do_delconn+0xda>
 8004eb0:	0800d24c 	.word	0x0800d24c
 8004eb4:	0800cff4 	.word	0x0800cff4
 8004eb8:	0800cd98 	.word	0x0800cd98
 8004ebc:	0800d008 	.word	0x0800d008
 8004ec0:	0800d028 	.word	0x0800d028
 8004ec4:	0800d044 	.word	0x0800d044
 8004ec8:	20004270 	.word	0x20004270

08004ecc <lwip_netconn_do_bind>:
{
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8004ed0:	6803      	ldr	r3, [r0, #0]
 8004ed2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004ed6:	f112 0f0c 	cmn.w	r2, #12
 8004eda:	da10      	bge.n	8004efe <lwip_netconn_do_bind+0x32>
    msg->err = msg->conn->last_err;
 8004edc:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	b163      	cbz	r3, 8004efc <lwip_netconn_do_bind+0x30>
 8004ee2:	f006 ff2d 	bl	800bd40 <sys_arch_protect>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004eec:	f112 0f0c 	cmn.w	r2, #12
 8004ef0:	db02      	blt.n	8004ef8 <lwip_netconn_do_bind+0x2c>
 8004ef2:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004ef6:	721a      	strb	r2, [r3, #8]
 8004ef8:	f006 ff2e 	bl	800bd58 <sys_arch_unprotect>
 8004efc:	bd10      	pop	{r4, pc}
    msg->err = ERR_VAL;
 8004efe:	22fa      	movs	r2, #250	; 0xfa
 8004f00:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8004f02:	6858      	ldr	r0, [r3, #4]
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d0ea      	beq.n	8004ede <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d007      	beq.n	8004f22 <lwip_netconn_do_bind+0x56>
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d1e3      	bne.n	8004ede <lwip_netconn_do_bind+0x12>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8004f16:	89a2      	ldrh	r2, [r4, #12]
 8004f18:	68a1      	ldr	r1, [r4, #8]
 8004f1a:	f006 fcf7 	bl	800b90c <udp_bind>
 8004f1e:	7120      	strb	r0, [r4, #4]
        break;
 8004f20:	e7dd      	b.n	8004ede <lwip_netconn_do_bind+0x12>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8004f22:	89a2      	ldrh	r2, [r4, #12]
 8004f24:	68a1      	ldr	r1, [r4, #8]
 8004f26:	f002 ff59 	bl	8007ddc <tcp_bind>
 8004f2a:	7120      	strb	r0, [r4, #4]
        break;
 8004f2c:	e7d7      	b.n	8004ede <lwip_netconn_do_bind+0x12>
	...

08004f30 <lwip_netconn_do_listen>:
{
 8004f30:	b530      	push	{r4, r5, lr}
 8004f32:	b083      	sub	sp, #12
 8004f34:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8004f36:	6803      	ldr	r3, [r0, #0]
 8004f38:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004f3c:	f112 0f0c 	cmn.w	r2, #12
 8004f40:	da11      	bge.n	8004f66 <lwip_netconn_do_listen+0x36>
    msg->err = msg->conn->last_err;
 8004f42:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	b163      	cbz	r3, 8004f62 <lwip_netconn_do_listen+0x32>
 8004f48:	f006 fefa 	bl	800bd40 <sys_arch_protect>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004f52:	f112 0f0c 	cmn.w	r2, #12
 8004f56:	db02      	blt.n	8004f5e <lwip_netconn_do_listen+0x2e>
 8004f58:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004f5c:	721a      	strb	r2, [r3, #8]
 8004f5e:	f006 fefb 	bl	800bd58 <sys_arch_unprotect>
}
 8004f62:	b003      	add	sp, #12
 8004f64:	bd30      	pop	{r4, r5, pc}
    msg->err = ERR_CONN;
 8004f66:	22f5      	movs	r2, #245	; 0xf5
 8004f68:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8004f6a:	6858      	ldr	r0, [r3, #4]
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d0e9      	beq.n	8004f44 <lwip_netconn_do_listen+0x14>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8004f70:	781a      	ldrb	r2, [r3, #0]
 8004f72:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004f76:	2a10      	cmp	r2, #16
 8004f78:	d002      	beq.n	8004f80 <lwip_netconn_do_listen+0x50>
        msg->err = ERR_ARG;
 8004f7a:	23f0      	movs	r3, #240	; 0xf0
 8004f7c:	7123      	strb	r3, [r4, #4]
 8004f7e:	e7e1      	b.n	8004f44 <lwip_netconn_do_listen+0x14>
        if (msg->conn->state == NETCONN_NONE) {
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d145      	bne.n	8005012 <lwip_netconn_do_listen+0xe2>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8004f86:	7d03      	ldrb	r3, [r0, #20]
 8004f88:	b113      	cbz	r3, 8004f90 <lwip_netconn_do_listen+0x60>
            msg->err = ERR_VAL;
 8004f8a:	23fa      	movs	r3, #250	; 0xfa
 8004f8c:	7123      	strb	r3, [r4, #4]
 8004f8e:	e7d9      	b.n	8004f44 <lwip_netconn_do_listen+0x14>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8004f90:	f10d 0207 	add.w	r2, sp, #7
 8004f94:	21ff      	movs	r1, #255	; 0xff
 8004f96:	f002 ff7f 	bl	8007e98 <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 8004f9a:	4605      	mov	r5, r0
 8004f9c:	b1f0      	cbz	r0, 8004fdc <lwip_netconn_do_listen+0xac>
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8004f9e:	6820      	ldr	r0, [r4, #0]
 8004fa0:	3010      	adds	r0, #16
 8004fa2:	f006 fe3d 	bl	800bc20 <sys_mbox_valid>
 8004fa6:	b9e8      	cbnz	r0, 8004fe4 <lwip_netconn_do_listen+0xb4>
              msg->err = ERR_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8004fac:	6820      	ldr	r0, [r4, #0]
 8004fae:	3014      	adds	r0, #20
 8004fb0:	f006 fe36 	bl	800bc20 <sys_mbox_valid>
 8004fb4:	b1f8      	cbz	r0, 8004ff6 <lwip_netconn_do_listen+0xc6>
              if (msg->err == ERR_OK) {
 8004fb6:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8004fba:	bb1b      	cbnz	r3, 8005004 <lwip_netconn_do_listen+0xd4>
                msg->conn->state = NETCONN_LISTEN;
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	605d      	str	r5, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6858      	ldr	r0, [r3, #4]
 8004fcc:	f003 f861 	bl	8008092 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	4912      	ldr	r1, [pc, #72]	; (800501c <lwip_netconn_do_listen+0xec>)
 8004fd4:	6858      	ldr	r0, [r3, #4]
 8004fd6:	f003 f8ab 	bl	8008130 <tcp_accept>
 8004fda:	e7b3      	b.n	8004f44 <lwip_netconn_do_listen+0x14>
              msg->err = err;
 8004fdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004fe0:	7123      	strb	r3, [r4, #4]
 8004fe2:	e7af      	b.n	8004f44 <lwip_netconn_do_listen+0x14>
                sys_mbox_free(&msg->conn->recvmbox);
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	3010      	adds	r0, #16
 8004fe8:	f006 fdbc 	bl	800bb64 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	3010      	adds	r0, #16
 8004ff0:	f006 fe1c 	bl	800bc2c <sys_mbox_set_invalid>
 8004ff4:	e7d8      	b.n	8004fa8 <lwip_netconn_do_listen+0x78>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8004ff6:	6820      	ldr	r0, [r4, #0]
 8004ff8:	2106      	movs	r1, #6
 8004ffa:	3014      	adds	r0, #20
 8004ffc:	f006 fda0 	bl	800bb40 <sys_mbox_new>
 8005000:	7120      	strb	r0, [r4, #4]
 8005002:	e7d8      	b.n	8004fb6 <lwip_netconn_do_listen+0x86>
                tcp_close(lpcb);
 8005004:	4628      	mov	r0, r5
 8005006:	f003 fbd5 	bl	80087b4 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	2200      	movs	r2, #0
 800500e:	605a      	str	r2, [r3, #4]
 8005010:	e798      	b.n	8004f44 <lwip_netconn_do_listen+0x14>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8005012:	2b02      	cmp	r3, #2
 8005014:	d196      	bne.n	8004f44 <lwip_netconn_do_listen+0x14>
          msg->err = ERR_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	7123      	strb	r3, [r4, #4]
 800501a:	e793      	b.n	8004f44 <lwip_netconn_do_listen+0x14>
 800501c:	08004c61 	.word	0x08004c61

08005020 <lwip_netconn_do_recv>:
{
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8005028:	6803      	ldr	r3, [r0, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	b122      	cbz	r2, 8005038 <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005034:	2b10      	cmp	r3, #16
 8005036:	d00f      	beq.n	8005058 <lwip_netconn_do_recv+0x38>
  TCPIP_APIMSG_ACK(msg);
 8005038:	6833      	ldr	r3, [r6, #0]
 800503a:	b163      	cbz	r3, 8005056 <lwip_netconn_do_recv+0x36>
 800503c:	f006 fe80 	bl	800bd40 <sys_arch_protect>
 8005040:	6833      	ldr	r3, [r6, #0]
 8005042:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005046:	f112 0f0c 	cmn.w	r2, #12
 800504a:	db02      	blt.n	8005052 <lwip_netconn_do_recv+0x32>
 800504c:	f996 2004 	ldrsb.w	r2, [r6, #4]
 8005050:	721a      	strb	r2, [r3, #8]
 8005052:	f006 fe81 	bl	800bd58 <sys_arch_unprotect>
 8005056:	bd70      	pop	{r4, r5, r6, pc}
      u32_t remaining = msg->msg.r.len;
 8005058:	6884      	ldr	r4, [r0, #8]
 800505a:	e008      	b.n	800506e <lwip_netconn_do_recv+0x4e>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800505c:	f64f 75ff 	movw	r5, #65535	; 0xffff
        tcp_recved(msg->conn->pcb.tcp, recved);
 8005060:	6833      	ldr	r3, [r6, #0]
 8005062:	4629      	mov	r1, r5
 8005064:	6858      	ldr	r0, [r3, #4]
 8005066:	f002 ffa7 	bl	8007fb8 <tcp_recved>
      } while (remaining != 0);
 800506a:	1b64      	subs	r4, r4, r5
 800506c:	d0e4      	beq.n	8005038 <lwip_netconn_do_recv+0x18>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800506e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8005072:	d2f3      	bcs.n	800505c <lwip_netconn_do_recv+0x3c>
 8005074:	b2a5      	uxth	r5, r4
 8005076:	e7f3      	b.n	8005060 <lwip_netconn_do_recv+0x40>

08005078 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800507c:	6803      	ldr	r3, [r0, #0]
 800507e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005082:	f112 0f0c 	cmn.w	r2, #12
 8005086:	da0f      	bge.n	80050a8 <lwip_netconn_do_write+0x30>
    msg->err = msg->conn->last_err;
 8005088:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800508a:	b163      	cbz	r3, 80050a6 <lwip_netconn_do_write+0x2e>
 800508c:	f006 fe58 	bl	800bd40 <sys_arch_protect>
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005096:	f112 0f0c 	cmn.w	r2, #12
 800509a:	db02      	blt.n	80050a2 <lwip_netconn_do_write+0x2a>
 800509c:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80050a0:	721a      	strb	r2, [r3, #8]
 80050a2:	f006 fe59 	bl	800bd58 <sys_arch_unprotect>
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80050ae:	2a10      	cmp	r2, #16
 80050b0:	d002      	beq.n	80050b8 <lwip_netconn_do_write+0x40>
      msg->err = ERR_VAL;
 80050b2:	22fa      	movs	r2, #250	; 0xfa
 80050b4:	7102      	strb	r2, [r0, #4]
 80050b6:	e7e8      	b.n	800508a <lwip_netconn_do_write+0x12>
      if (msg->conn->state != NETCONN_NONE) {
 80050b8:	785a      	ldrb	r2, [r3, #1]
 80050ba:	b112      	cbz	r2, 80050c2 <lwip_netconn_do_write+0x4a>
        msg->err = ERR_INPROGRESS;
 80050bc:	22fb      	movs	r2, #251	; 0xfb
 80050be:	7102      	strb	r2, [r0, #4]
 80050c0:	e7e3      	b.n	800508a <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	2a00      	cmp	r2, #0
 80050c6:	d048      	beq.n	800515a <lwip_netconn_do_write+0xe2>
        msg->conn->state = NETCONN_WRITE;
 80050c8:	2201      	movs	r2, #1
 80050ca:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80050cc:	6803      	ldr	r3, [r0, #0]
 80050ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050d0:	2a00      	cmp	r2, #0
 80050d2:	d036      	beq.n	8005142 <lwip_netconn_do_write+0xca>
 80050d4:	4b22      	ldr	r3, [pc, #136]	; (8005160 <lwip_netconn_do_write+0xe8>)
 80050d6:	f240 6283 	movw	r2, #1667	; 0x683
 80050da:	4922      	ldr	r1, [pc, #136]	; (8005164 <lwip_netconn_do_write+0xec>)
 80050dc:	4822      	ldr	r0, [pc, #136]	; (8005168 <lwip_netconn_do_write+0xf0>)
 80050de:	f007 fb98 	bl	800c812 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80050e2:	68e3      	ldr	r3, [r4, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d030      	beq.n	800514a <lwip_netconn_do_write+0xd2>
        msg->conn->current_msg = msg;
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	625c      	str	r4, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	2100      	movs	r1, #0
 80050f0:	6219      	str	r1, [r3, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80050f2:	6820      	ldr	r0, [r4, #0]
 80050f4:	f7ff f9a8 	bl	8004448 <lwip_netconn_do_writemore>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d0d4      	beq.n	80050a6 <lwip_netconn_do_write+0x2e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d006      	beq.n	8005112 <lwip_netconn_do_write+0x9a>
 8005104:	4b16      	ldr	r3, [pc, #88]	; (8005160 <lwip_netconn_do_write+0xe8>)
 8005106:	f240 6289 	movw	r2, #1673	; 0x689
 800510a:	4918      	ldr	r1, [pc, #96]	; (800516c <lwip_netconn_do_write+0xf4>)
 800510c:	4816      	ldr	r0, [pc, #88]	; (8005168 <lwip_netconn_do_write+0xf0>)
 800510e:	f007 fb80 	bl	800c812 <iprintf>
          UNLOCK_TCPIP_CORE();
 8005112:	4d17      	ldr	r5, [pc, #92]	; (8005170 <lwip_netconn_do_write+0xf8>)
 8005114:	4628      	mov	r0, r5
 8005116:	f006 fdfb 	bl	800bd10 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800511a:	6820      	ldr	r0, [r4, #0]
 800511c:	2100      	movs	r1, #0
 800511e:	300c      	adds	r0, #12
 8005120:	f006 fda0 	bl	800bc64 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8005124:	4628      	mov	r0, r5
 8005126:	f006 fdec 	bl	800bd02 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	785b      	ldrb	r3, [r3, #1]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d1b9      	bne.n	80050a6 <lwip_netconn_do_write+0x2e>
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <lwip_netconn_do_write+0xe8>)
 8005134:	f240 628d 	movw	r2, #1677	; 0x68d
 8005138:	490c      	ldr	r1, [pc, #48]	; (800516c <lwip_netconn_do_write+0xf4>)
 800513a:	480b      	ldr	r0, [pc, #44]	; (8005168 <lwip_netconn_do_write+0xf0>)
 800513c:	f007 fb69 	bl	800c812 <iprintf>
 8005140:	bd38      	pop	{r3, r4, r5, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0cc      	beq.n	80050e2 <lwip_netconn_do_write+0x6a>
 8005148:	e7c4      	b.n	80050d4 <lwip_netconn_do_write+0x5c>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800514a:	4b05      	ldr	r3, [pc, #20]	; (8005160 <lwip_netconn_do_write+0xe8>)
 800514c:	f240 6284 	movw	r2, #1668	; 0x684
 8005150:	4908      	ldr	r1, [pc, #32]	; (8005174 <lwip_netconn_do_write+0xfc>)
 8005152:	4805      	ldr	r0, [pc, #20]	; (8005168 <lwip_netconn_do_write+0xf0>)
 8005154:	f007 fb5d 	bl	800c812 <iprintf>
 8005158:	e7c6      	b.n	80050e8 <lwip_netconn_do_write+0x70>
        msg->err = ERR_CONN;
 800515a:	22f5      	movs	r2, #245	; 0xf5
 800515c:	7102      	strb	r2, [r0, #4]
 800515e:	e794      	b.n	800508a <lwip_netconn_do_write+0x12>
 8005160:	0800d24c 	.word	0x0800d24c
 8005164:	0800d028 	.word	0x0800d028
 8005168:	0800cd98 	.word	0x0800cd98
 800516c:	0800d044 	.word	0x0800d044
 8005170:	20004270 	.word	0x20004270
 8005174:	0800d04c 	.word	0x0800d04c

08005178 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800517c:	6800      	ldr	r0, [r0, #0]
 800517e:	7842      	ldrb	r2, [r0, #1]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8005180:	6843      	ldr	r3, [r0, #4]
 8005182:	b123      	cbz	r3, 800518e <lwip_netconn_do_close+0x16>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8005184:	7803      	ldrb	r3, [r0, #0]
  if ((msg->conn->pcb.tcp != NULL) &&
 8005186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800518a:	2b10      	cmp	r3, #16
 800518c:	d010      	beq.n	80051b0 <lwip_netconn_do_close+0x38>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800518e:	23f5      	movs	r3, #245	; 0xf5
 8005190:	7123      	strb	r3, [r4, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8005192:	b160      	cbz	r0, 80051ae <lwip_netconn_do_close+0x36>
 8005194:	f006 fdd4 	bl	800bd40 <sys_arch_protect>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800519e:	f112 0f0c 	cmn.w	r2, #12
 80051a2:	db02      	blt.n	80051aa <lwip_netconn_do_close+0x32>
 80051a4:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80051a8:	721a      	strb	r2, [r3, #8]
 80051aa:	f006 fdd5 	bl	800bd58 <sys_arch_unprotect>
 80051ae:	bd38      	pop	{r3, r4, r5, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80051b0:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d001      	beq.n	80051ba <lwip_netconn_do_close+0x42>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80051b6:	2a02      	cmp	r2, #2
 80051b8:	d0e9      	beq.n	800518e <lwip_netconn_do_close+0x16>
    if (state == NETCONN_CONNECT) {
 80051ba:	2a03      	cmp	r2, #3
 80051bc:	d03d      	beq.n	800523a <lwip_netconn_do_close+0xc2>
    } else if (state == NETCONN_WRITE) {
 80051be:	2a01      	cmp	r2, #1
 80051c0:	d03e      	beq.n	8005240 <lwip_netconn_do_close+0xc8>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80051c2:	f013 0f01 	tst.w	r3, #1
 80051c6:	d13e      	bne.n	8005246 <lwip_netconn_do_close+0xce>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051cc:	2a00      	cmp	r2, #0
 80051ce:	d03d      	beq.n	800524c <lwip_netconn_do_close+0xd4>
 80051d0:	4b20      	ldr	r3, [pc, #128]	; (8005254 <lwip_netconn_do_close+0xdc>)
 80051d2:	f240 721c 	movw	r2, #1820	; 0x71c
 80051d6:	4920      	ldr	r1, [pc, #128]	; (8005258 <lwip_netconn_do_close+0xe0>)
 80051d8:	4820      	ldr	r0, [pc, #128]	; (800525c <lwip_netconn_do_close+0xe4>)
 80051da:	f007 fb1a 	bl	800c812 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	2204      	movs	r2, #4
 80051e2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	625c      	str	r4, [r3, #36]	; 0x24
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80051e8:	2100      	movs	r1, #0
 80051ea:	6820      	ldr	r0, [r4, #0]
 80051ec:	f7ff fa3c 	bl	8004668 <lwip_netconn_do_close_internal>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d0dc      	beq.n	80051ae <lwip_netconn_do_close+0x36>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d006      	beq.n	800520a <lwip_netconn_do_close+0x92>
 80051fc:	4b15      	ldr	r3, [pc, #84]	; (8005254 <lwip_netconn_do_close+0xdc>)
 80051fe:	f240 7221 	movw	r2, #1825	; 0x721
 8005202:	4917      	ldr	r1, [pc, #92]	; (8005260 <lwip_netconn_do_close+0xe8>)
 8005204:	4815      	ldr	r0, [pc, #84]	; (800525c <lwip_netconn_do_close+0xe4>)
 8005206:	f007 fb04 	bl	800c812 <iprintf>
        UNLOCK_TCPIP_CORE();
 800520a:	4d16      	ldr	r5, [pc, #88]	; (8005264 <lwip_netconn_do_close+0xec>)
 800520c:	4628      	mov	r0, r5
 800520e:	f006 fd7f 	bl	800bd10 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005212:	6820      	ldr	r0, [r4, #0]
 8005214:	2100      	movs	r1, #0
 8005216:	300c      	adds	r0, #12
 8005218:	f006 fd24 	bl	800bc64 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800521c:	4628      	mov	r0, r5
 800521e:	f006 fd70 	bl	800bd02 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0c1      	beq.n	80051ae <lwip_netconn_do_close+0x36>
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <lwip_netconn_do_close+0xdc>)
 800522c:	f240 7225 	movw	r2, #1829	; 0x725
 8005230:	490b      	ldr	r1, [pc, #44]	; (8005260 <lwip_netconn_do_close+0xe8>)
 8005232:	480a      	ldr	r0, [pc, #40]	; (800525c <lwip_netconn_do_close+0xe4>)
 8005234:	f007 faed 	bl	800c812 <iprintf>
 8005238:	bd38      	pop	{r3, r4, r5, pc}
      msg->err = ERR_CONN;
 800523a:	23f5      	movs	r3, #245	; 0xf5
 800523c:	7123      	strb	r3, [r4, #4]
 800523e:	e7a8      	b.n	8005192 <lwip_netconn_do_close+0x1a>
      msg->err = ERR_INPROGRESS;
 8005240:	23fb      	movs	r3, #251	; 0xfb
 8005242:	7123      	strb	r3, [r4, #4]
 8005244:	e7a5      	b.n	8005192 <lwip_netconn_do_close+0x1a>
        netconn_drain(msg->conn);
 8005246:	f7ff fcb9 	bl	8004bbc <netconn_drain>
 800524a:	e7bd      	b.n	80051c8 <lwip_netconn_do_close+0x50>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0c5      	beq.n	80051de <lwip_netconn_do_close+0x66>
 8005252:	e7bd      	b.n	80051d0 <lwip_netconn_do_close+0x58>
 8005254:	0800d24c 	.word	0x0800d24c
 8005258:	0800d028 	.word	0x0800d028
 800525c:	0800cd98 	.word	0x0800cd98
 8005260:	0800d044 	.word	0x0800d044
 8005264:	20004270 	.word	0x20004270

08005268 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 8005268:	b168      	cbz	r0, 8005286 <netbuf_delete+0x1e>
{
 800526a:	b510      	push	{r4, lr}
 800526c:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 800526e:	6800      	ldr	r0, [r0, #0]
 8005270:	b120      	cbz	r0, 800527c <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8005272:	f002 f9ff 	bl	8007674 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8005276:	2300      	movs	r3, #0
 8005278:	6063      	str	r3, [r4, #4]
 800527a:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800527c:	4621      	mov	r1, r4
 800527e:	2006      	movs	r0, #6
 8005280:	f002 f822 	bl	80072c8 <memp_free>
 8005284:	bd10      	pop	{r4, pc}
 8005286:	4770      	bx	lr

08005288 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8005288:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800528a:	b158      	cbz	r0, 80052a4 <netbuf_data+0x1c>
 800528c:	4603      	mov	r3, r0
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800528e:	b191      	cbz	r1, 80052b6 <netbuf_data+0x2e>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8005290:	b1d2      	cbz	r2, 80052c8 <netbuf_data+0x40>

  if (buf->ptr == NULL) {
 8005292:	6840      	ldr	r0, [r0, #4]
 8005294:	b308      	cbz	r0, 80052da <netbuf_data+0x52>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 8005296:	6840      	ldr	r0, [r0, #4]
 8005298:	6008      	str	r0, [r1, #0]
  *len = buf->ptr->len;
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	895b      	ldrh	r3, [r3, #10]
 800529e:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 80052a0:	2000      	movs	r0, #0
 80052a2:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80052a4:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <netbuf_data+0x58>)
 80052a6:	22c2      	movs	r2, #194	; 0xc2
 80052a8:	490e      	ldr	r1, [pc, #56]	; (80052e4 <netbuf_data+0x5c>)
 80052aa:	480f      	ldr	r0, [pc, #60]	; (80052e8 <netbuf_data+0x60>)
 80052ac:	f007 fab1 	bl	800c812 <iprintf>
 80052b0:	f06f 000f 	mvn.w	r0, #15
 80052b4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80052b6:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <netbuf_data+0x58>)
 80052b8:	22c3      	movs	r2, #195	; 0xc3
 80052ba:	490c      	ldr	r1, [pc, #48]	; (80052ec <netbuf_data+0x64>)
 80052bc:	480a      	ldr	r0, [pc, #40]	; (80052e8 <netbuf_data+0x60>)
 80052be:	f007 faa8 	bl	800c812 <iprintf>
 80052c2:	f06f 000f 	mvn.w	r0, #15
 80052c6:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80052c8:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <netbuf_data+0x58>)
 80052ca:	22c4      	movs	r2, #196	; 0xc4
 80052cc:	4908      	ldr	r1, [pc, #32]	; (80052f0 <netbuf_data+0x68>)
 80052ce:	4806      	ldr	r0, [pc, #24]	; (80052e8 <netbuf_data+0x60>)
 80052d0:	f007 fa9f 	bl	800c812 <iprintf>
 80052d4:	f06f 000f 	mvn.w	r0, #15
 80052d8:	bd08      	pop	{r3, pc}
    return ERR_BUF;
 80052da:	f06f 0001 	mvn.w	r0, #1
}
 80052de:	bd08      	pop	{r3, pc}
 80052e0:	0800d2e4 	.word	0x0800d2e4
 80052e4:	0800d358 	.word	0x0800d358
 80052e8:	0800cd98 	.word	0x0800cd98
 80052ec:	0800d374 	.word	0x0800d374
 80052f0:	0800d394 	.word	0x0800d394

080052f4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80052f4:	b500      	push	{lr}
 80052f6:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80052f8:	4b20      	ldr	r3, [pc, #128]	; (800537c <tcpip_thread+0x88>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	b113      	cbz	r3, 8005304 <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
 80052fe:	4a20      	ldr	r2, [pc, #128]	; (8005380 <tcpip_thread+0x8c>)
 8005300:	6810      	ldr	r0, [r2, #0]
 8005302:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8005304:	481f      	ldr	r0, [pc, #124]	; (8005384 <tcpip_thread+0x90>)
 8005306:	f006 fcfc 	bl	800bd02 <sys_mutex_lock>
 800530a:	e00e      	b.n	800532a <tcpip_thread+0x36>
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800530c:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <tcpip_thread+0x94>)
 800530e:	2269      	movs	r2, #105	; 0x69
 8005310:	491e      	ldr	r1, [pc, #120]	; (800538c <tcpip_thread+0x98>)
 8005312:	481f      	ldr	r0, [pc, #124]	; (8005390 <tcpip_thread+0x9c>)
 8005314:	f007 fa7d 	bl	800c812 <iprintf>
      continue;
 8005318:	e007      	b.n	800532a <tcpip_thread+0x36>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	6899      	ldr	r1, [r3, #8]
 800531e:	6858      	ldr	r0, [r3, #4]
 8005320:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005322:	9901      	ldr	r1, [sp, #4]
 8005324:	2009      	movs	r0, #9
 8005326:	f001 ffcf 	bl	80072c8 <memp_free>
    UNLOCK_TCPIP_CORE();
 800532a:	4c16      	ldr	r4, [pc, #88]	; (8005384 <tcpip_thread+0x90>)
 800532c:	4620      	mov	r0, r4
 800532e:	f006 fcef 	bl	800bd10 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8005332:	a901      	add	r1, sp, #4
 8005334:	4817      	ldr	r0, [pc, #92]	; (8005394 <tcpip_thread+0xa0>)
 8005336:	f006 f9d7 	bl	800b6e8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800533a:	4620      	mov	r0, r4
 800533c:	f006 fce1 	bl	800bd02 <sys_mutex_lock>
    if (msg == NULL) {
 8005340:	9b01      	ldr	r3, [sp, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0e2      	beq.n	800530c <tcpip_thread+0x18>
    switch (msg->type) {
 8005346:	781a      	ldrb	r2, [r3, #0]
 8005348:	2a03      	cmp	r2, #3
 800534a:	d00a      	beq.n	8005362 <tcpip_thread+0x6e>
 800534c:	2a04      	cmp	r2, #4
 800534e:	d010      	beq.n	8005372 <tcpip_thread+0x7e>
 8005350:	2a02      	cmp	r2, #2
 8005352:	d0e2      	beq.n	800531a <tcpip_thread+0x26>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <tcpip_thread+0x94>)
 8005356:	229b      	movs	r2, #155	; 0x9b
 8005358:	490c      	ldr	r1, [pc, #48]	; (800538c <tcpip_thread+0x98>)
 800535a:	480d      	ldr	r0, [pc, #52]	; (8005390 <tcpip_thread+0x9c>)
 800535c:	f007 fa59 	bl	800c812 <iprintf>
      break;
 8005360:	e7e3      	b.n	800532a <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	6898      	ldr	r0, [r3, #8]
 8005366:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005368:	9901      	ldr	r1, [sp, #4]
 800536a:	2008      	movs	r0, #8
 800536c:	f001 ffac 	bl	80072c8 <memp_free>
      break;
 8005370:	e7db      	b.n	800532a <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	6898      	ldr	r0, [r3, #8]
 8005376:	4790      	blx	r2
      break;
 8005378:	e7d7      	b.n	800532a <tcpip_thread+0x36>
 800537a:	bf00      	nop
 800537c:	20003d80 	.word	0x20003d80
 8005380:	20003d84 	.word	0x20003d84
 8005384:	20004270 	.word	0x20004270
 8005388:	0800d418 	.word	0x0800d418
 800538c:	0800d448 	.word	0x0800d448
 8005390:	0800cd98 	.word	0x0800cd98
 8005394:	20003d7c 	.word	0x20003d7c

08005398 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8005398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539a:	4607      	mov	r7, r0
 800539c:	460e      	mov	r6, r1
 800539e:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80053a0:	4813      	ldr	r0, [pc, #76]	; (80053f0 <tcpip_inpkt+0x58>)
 80053a2:	f006 fc3d 	bl	800bc20 <sys_mbox_valid>
 80053a6:	b188      	cbz	r0, 80053cc <tcpip_inpkt+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80053a8:	2009      	movs	r0, #9
 80053aa:	f001 ff73 	bl	8007294 <memp_malloc>
  if (msg == NULL) {
 80053ae:	4604      	mov	r4, r0
 80053b0:	b1d0      	cbz	r0, 80053e8 <tcpip_inpkt+0x50>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80053b2:	2302      	movs	r3, #2
 80053b4:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 80053b6:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80053b8:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 80053ba:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80053bc:	4601      	mov	r1, r0
 80053be:	480c      	ldr	r0, [pc, #48]	; (80053f0 <tcpip_inpkt+0x58>)
 80053c0:	f006 fbe5 	bl	800bb8e <sys_mbox_trypost>
 80053c4:	4603      	mov	r3, r0
 80053c6:	b940      	cbnz	r0, 80053da <tcpip_inpkt+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80053cc:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <tcpip_inpkt+0x5c>)
 80053ce:	22b5      	movs	r2, #181	; 0xb5
 80053d0:	4909      	ldr	r1, [pc, #36]	; (80053f8 <tcpip_inpkt+0x60>)
 80053d2:	480a      	ldr	r0, [pc, #40]	; (80053fc <tcpip_inpkt+0x64>)
 80053d4:	f007 fa1d 	bl	800c812 <iprintf>
 80053d8:	e7e6      	b.n	80053a8 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80053da:	4621      	mov	r1, r4
 80053dc:	2009      	movs	r0, #9
 80053de:	f001 ff73 	bl	80072c8 <memp_free>
    return ERR_MEM;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	e7ef      	b.n	80053c8 <tcpip_inpkt+0x30>
    return ERR_MEM;
 80053e8:	f04f 33ff 	mov.w	r3, #4294967295
 80053ec:	e7ec      	b.n	80053c8 <tcpip_inpkt+0x30>
 80053ee:	bf00      	nop
 80053f0:	20003d7c 	.word	0x20003d7c
 80053f4:	0800d418 	.word	0x0800d418
 80053f8:	0800d408 	.word	0x0800d408
 80053fc:	0800cd98 	.word	0x0800cd98

08005400 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8005400:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8005402:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8005406:	f013 0f18 	tst.w	r3, #24
 800540a:	d103      	bne.n	8005414 <tcpip_input+0x14>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800540c:	4a03      	ldr	r2, [pc, #12]	; (800541c <tcpip_input+0x1c>)
 800540e:	f7ff ffc3 	bl	8005398 <tcpip_inpkt>
}
 8005412:	bd08      	pop	{r3, pc}
    return tcpip_inpkt(p, inp, ethernet_input);
 8005414:	4a02      	ldr	r2, [pc, #8]	; (8005420 <tcpip_input+0x20>)
 8005416:	f7ff ffbf 	bl	8005398 <tcpip_inpkt>
 800541a:	bd08      	pop	{r3, pc}
 800541c:	08006179 	.word	0x08006179
 8005420:	0800ba29 	.word	0x0800ba29

08005424 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	4607      	mov	r7, r0
 8005428:	460e      	mov	r6, r1
 800542a:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800542c:	4816      	ldr	r0, [pc, #88]	; (8005488 <tcpip_callback_with_block+0x64>)
 800542e:	f006 fbf7 	bl	800bc20 <sys_mbox_valid>
 8005432:	b188      	cbz	r0, 8005458 <tcpip_callback_with_block+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8005434:	2008      	movs	r0, #8
 8005436:	f001 ff2d 	bl	8007294 <memp_malloc>
  if (msg == NULL) {
 800543a:	4604      	mov	r4, r0
 800543c:	b300      	cbz	r0, 8005480 <tcpip_callback_with_block+0x5c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800543e:	2303      	movs	r3, #3
 8005440:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 8005442:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8005444:	6086      	str	r6, [r0, #8]
  if (block) {
 8005446:	b975      	cbnz	r5, 8005466 <tcpip_callback_with_block+0x42>
    sys_mbox_post(&mbox, msg);
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8005448:	4601      	mov	r1, r0
 800544a:	480f      	ldr	r0, [pc, #60]	; (8005488 <tcpip_callback_with_block+0x64>)
 800544c:	f006 fb9f 	bl	800bb8e <sys_mbox_trypost>
 8005450:	4603      	mov	r3, r0
 8005452:	b970      	cbnz	r0, 8005472 <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
}
 8005454:	4618      	mov	r0, r3
 8005456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005458:	4b0c      	ldr	r3, [pc, #48]	; (800548c <tcpip_callback_with_block+0x68>)
 800545a:	22ee      	movs	r2, #238	; 0xee
 800545c:	490c      	ldr	r1, [pc, #48]	; (8005490 <tcpip_callback_with_block+0x6c>)
 800545e:	480d      	ldr	r0, [pc, #52]	; (8005494 <tcpip_callback_with_block+0x70>)
 8005460:	f007 f9d7 	bl	800c812 <iprintf>
 8005464:	e7e6      	b.n	8005434 <tcpip_callback_with_block+0x10>
    sys_mbox_post(&mbox, msg);
 8005466:	4601      	mov	r1, r0
 8005468:	4807      	ldr	r0, [pc, #28]	; (8005488 <tcpip_callback_with_block+0x64>)
 800546a:	f006 fb84 	bl	800bb76 <sys_mbox_post>
  return ERR_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	e7f0      	b.n	8005454 <tcpip_callback_with_block+0x30>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005472:	4621      	mov	r1, r4
 8005474:	2008      	movs	r0, #8
 8005476:	f001 ff27 	bl	80072c8 <memp_free>
      return ERR_MEM;
 800547a:	f04f 33ff 	mov.w	r3, #4294967295
 800547e:	e7e9      	b.n	8005454 <tcpip_callback_with_block+0x30>
    return ERR_MEM;
 8005480:	f04f 33ff 	mov.w	r3, #4294967295
 8005484:	e7e6      	b.n	8005454 <tcpip_callback_with_block+0x30>
 8005486:	bf00      	nop
 8005488:	20003d7c 	.word	0x20003d7c
 800548c:	0800d418 	.word	0x0800d418
 8005490:	0800d408 	.word	0x0800d408
 8005494:	0800cd98 	.word	0x0800cd98

08005498 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	4605      	mov	r5, r0
 800549c:	460e      	mov	r6, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800549e:	4c05      	ldr	r4, [pc, #20]	; (80054b4 <tcpip_send_msg_wait_sem+0x1c>)
 80054a0:	4620      	mov	r0, r4
 80054a2:	f006 fc2e 	bl	800bd02 <sys_mutex_lock>
  fn(apimsg);
 80054a6:	4630      	mov	r0, r6
 80054a8:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 80054aa:	4620      	mov	r0, r4
 80054ac:	f006 fc30 	bl	800bd10 <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80054b0:	2000      	movs	r0, #0
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	20004270 	.word	0x20004270

080054b8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80054b8:	b530      	push	{r4, r5, lr}
 80054ba:	b083      	sub	sp, #12
 80054bc:	4605      	mov	r5, r0
 80054be:	460c      	mov	r4, r1
  lwip_init();
 80054c0:	f000 f870 	bl	80055a4 <lwip_init>

  tcpip_init_done = initfunc;
 80054c4:	4b13      	ldr	r3, [pc, #76]	; (8005514 <tcpip_init+0x5c>)
 80054c6:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 80054c8:	4b13      	ldr	r3, [pc, #76]	; (8005518 <tcpip_init+0x60>)
 80054ca:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80054cc:	2106      	movs	r1, #6
 80054ce:	4813      	ldr	r0, [pc, #76]	; (800551c <tcpip_init+0x64>)
 80054d0:	f006 fb36 	bl	800bb40 <sys_mbox_new>
 80054d4:	b970      	cbnz	r0, 80054f4 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80054d6:	4812      	ldr	r0, [pc, #72]	; (8005520 <tcpip_init+0x68>)
 80054d8:	f006 fc02 	bl	800bce0 <sys_mutex_new>
 80054dc:	b990      	cbnz	r0, 8005504 <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80054de:	2303      	movs	r3, #3
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054e6:	2200      	movs	r2, #0
 80054e8:	490e      	ldr	r1, [pc, #56]	; (8005524 <tcpip_init+0x6c>)
 80054ea:	480f      	ldr	r0, [pc, #60]	; (8005528 <tcpip_init+0x70>)
 80054ec:	f006 fc15 	bl	800bd1a <sys_thread_new>
}
 80054f0:	b003      	add	sp, #12
 80054f2:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80054f4:	4b0d      	ldr	r3, [pc, #52]	; (800552c <tcpip_init+0x74>)
 80054f6:	f240 12d5 	movw	r2, #469	; 0x1d5
 80054fa:	490d      	ldr	r1, [pc, #52]	; (8005530 <tcpip_init+0x78>)
 80054fc:	480d      	ldr	r0, [pc, #52]	; (8005534 <tcpip_init+0x7c>)
 80054fe:	f007 f988 	bl	800c812 <iprintf>
 8005502:	e7e8      	b.n	80054d6 <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8005504:	4b09      	ldr	r3, [pc, #36]	; (800552c <tcpip_init+0x74>)
 8005506:	f240 12d9 	movw	r2, #473	; 0x1d9
 800550a:	490b      	ldr	r1, [pc, #44]	; (8005538 <tcpip_init+0x80>)
 800550c:	4809      	ldr	r0, [pc, #36]	; (8005534 <tcpip_init+0x7c>)
 800550e:	f007 f980 	bl	800c812 <iprintf>
 8005512:	e7e4      	b.n	80054de <tcpip_init+0x26>
 8005514:	20003d80 	.word	0x20003d80
 8005518:	20003d84 	.word	0x20003d84
 800551c:	20003d7c 	.word	0x20003d7c
 8005520:	20004270 	.word	0x20004270
 8005524:	080052f5 	.word	0x080052f5
 8005528:	0800d3f8 	.word	0x0800d3f8
 800552c:	0800d418 	.word	0x0800d418
 8005530:	0800d3b0 	.word	0x0800d3b0
 8005534:	0800cd98 	.word	0x0800cd98
 8005538:	0800d3d4 	.word	0x0800d3d4

0800553c <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800553c:	b1c8      	cbz	r0, 8005572 <fs_open+0x36>
{
 800553e:	b570      	push	{r4, r5, r6, lr}
 8005540:	4606      	mov	r6, r0
  if ((file == NULL) || (name == NULL)) {
 8005542:	b1c9      	cbz	r1, 8005578 <fs_open+0x3c>
 8005544:	460d      	mov	r5, r1
 8005546:	4c0e      	ldr	r4, [pc, #56]	; (8005580 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005548:	b184      	cbz	r4, 800556c <fs_open+0x30>
    if (!strcmp(name, (const char *)f->name)) {
 800554a:	6861      	ldr	r1, [r4, #4]
 800554c:	4628      	mov	r0, r5
 800554e:	f7fa fe3f 	bl	80001d0 <strcmp>
 8005552:	b108      	cbz	r0, 8005558 <fs_open+0x1c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005554:	6824      	ldr	r4, [r4, #0]
 8005556:	e7f7      	b.n	8005548 <fs_open+0xc>
      file->data = (const char *)f->data;
 8005558:	68a3      	ldr	r3, [r4, #8]
 800555a:	6033      	str	r3, [r6, #0]
      file->len = f->len;
 800555c:	68e3      	ldr	r3, [r4, #12]
 800555e:	6073      	str	r3, [r6, #4]
      file->index = f->len;
 8005560:	68e3      	ldr	r3, [r4, #12]
 8005562:	60b3      	str	r3, [r6, #8]
      file->pextension = NULL;
 8005564:	60f0      	str	r0, [r6, #12]
      file->flags = f->flags;
 8005566:	7c23      	ldrb	r3, [r4, #16]
 8005568:	7433      	strb	r3, [r6, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800556a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  /* file not found */
  return ERR_VAL;
 800556c:	f06f 0005 	mvn.w	r0, #5
 8005570:	bd70      	pop	{r4, r5, r6, pc}
     return ERR_ARG;
 8005572:	f06f 000f 	mvn.w	r0, #15
 8005576:	4770      	bx	lr
 8005578:	f06f 000f 	mvn.w	r0, #15
}
 800557c:	bd70      	pop	{r4, r5, r6, pc}
 800557e:	bf00      	nop
 8005580:	0800f330 	.word	0x0800f330

08005584 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8005584:	4770      	bx	lr

08005586 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8005586:	ba40      	rev16	r0, r0
}
 8005588:	b280      	uxth	r0, r0
 800558a:	4770      	bx	lr

0800558c <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 800558c:	0203      	lsls	r3, r0, #8
 800558e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005592:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005596:	0a02      	lsrs	r2, r0, #8
 8005598:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800559c:	4313      	orrs	r3, r2
}
 800559e:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 80055a2:	4770      	bx	lr

080055a4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80055a4:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80055a6:	f006 fb8f 	bl	800bcc8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80055aa:	f001 fc35 	bl	8006e18 <mem_init>
  memp_init();
 80055ae:	f001 fe61 	bl	8007274 <memp_init>
  pbuf_init();
  netif_init();
 80055b2:	f001 feb4 	bl	800731e <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80055b6:	f006 f905 	bl	800b7c4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80055ba:	f002 fc0d 	bl	8007dd8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80055be:	f006 f86d 	bl	800b69c <sys_timeouts_init>
 80055c2:	bd08      	pop	{r3, pc}

080055c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80055c4:	b510      	push	{r4, lr}
 80055c6:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80055c8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80055cc:	00d3      	lsls	r3, r2, #3
 80055ce:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <etharp_free_entry+0x30>)
 80055d0:	58d0      	ldr	r0, [r2, r3]
 80055d2:	b138      	cbz	r0, 80055e4 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80055d4:	f002 f84e 	bl	8007674 <pbuf_free>
    arp_table[i].q = NULL;
 80055d8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80055dc:	00d3      	lsls	r3, r2, #3
 80055de:	2100      	movs	r1, #0
 80055e0:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <etharp_free_entry+0x30>)
 80055e2:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80055e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80055e8:	00e2      	lsls	r2, r4, #3
 80055ea:	4b02      	ldr	r3, [pc, #8]	; (80055f4 <etharp_free_entry+0x30>)
 80055ec:	4413      	add	r3, r2
 80055ee:	2200      	movs	r2, #0
 80055f0:	751a      	strb	r2, [r3, #20]
 80055f2:	bd10      	pop	{r4, pc}
 80055f4:	20003d88 	.word	0x20003d88

080055f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80055f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80055fc:	f04f 0e00 	mov.w	lr, #0
 8005600:	46f3      	mov	fp, lr
 8005602:	46f1      	mov	r9, lr
  s8_t old_queue = ARP_TABLE_SIZE;
 8005604:	f04f 0c0a 	mov.w	ip, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005608:	4673      	mov	r3, lr
  s8_t empty = ARP_TABLE_SIZE;
 800560a:	4667      	mov	r7, ip
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800560c:	46e0      	mov	r8, ip
 800560e:	46e2      	mov	sl, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005610:	e003      	b.n	800561a <etharp_find_entry+0x22>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005612:	b96c      	cbnz	r4, 8005630 <etharp_find_entry+0x38>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8005614:	b25f      	sxtb	r7, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005616:	3301      	adds	r3, #1
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b09      	cmp	r3, #9
 800561c:	d845      	bhi.n	80056aa <etharp_find_entry+0xb2>
    u8_t state = arp_table[i].state;
 800561e:	461a      	mov	r2, r3
 8005620:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8005624:	00e5      	lsls	r5, r4, #3
 8005626:	4c59      	ldr	r4, [pc, #356]	; (800578c <etharp_find_entry+0x194>)
 8005628:	442c      	add	r4, r5
 800562a:	7d24      	ldrb	r4, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800562c:	2f0a      	cmp	r7, #10
 800562e:	d0f0      	beq.n	8005612 <etharp_find_entry+0x1a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8005630:	2c00      	cmp	r4, #0
 8005632:	d0f0      	beq.n	8005616 <etharp_find_entry+0x1e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005634:	b140      	cbz	r0, 8005648 <etharp_find_entry+0x50>
 8005636:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800563a:	00ee      	lsls	r6, r5, #3
 800563c:	4d53      	ldr	r5, [pc, #332]	; (800578c <etharp_find_entry+0x194>)
 800563e:	4435      	add	r5, r6
 8005640:	686d      	ldr	r5, [r5, #4]
 8005642:	6806      	ldr	r6, [r0, #0]
 8005644:	42ae      	cmp	r6, r5
 8005646:	d00f      	beq.n	8005668 <etharp_find_entry+0x70>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8005648:	2c01      	cmp	r4, #1
 800564a:	d010      	beq.n	800566e <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800564c:	2c01      	cmp	r4, #1
 800564e:	d9e2      	bls.n	8005616 <etharp_find_entry+0x1e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8005650:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005654:	00d4      	lsls	r4, r2, #3
 8005656:	4a4d      	ldr	r2, [pc, #308]	; (800578c <etharp_find_entry+0x194>)
 8005658:	4422      	add	r2, r4
 800565a:	8a52      	ldrh	r2, [r2, #18]
 800565c:	4596      	cmp	lr, r2
 800565e:	d8da      	bhi.n	8005616 <etharp_find_entry+0x1e>
            old_stable = i;
 8005660:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 8005664:	4696      	mov	lr, r2
 8005666:	e7d6      	b.n	8005616 <etharp_find_entry+0x1e>
        return i;
 8005668:	b258      	sxtb	r0, r3
 800566a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 800566e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8005672:	00ec      	lsls	r4, r5, #3
 8005674:	4d45      	ldr	r5, [pc, #276]	; (800578c <etharp_find_entry+0x194>)
 8005676:	592c      	ldr	r4, [r5, r4]
 8005678:	b15c      	cbz	r4, 8005692 <etharp_find_entry+0x9a>
          if (arp_table[i].ctime >= age_queue) {
 800567a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800567e:	00d4      	lsls	r4, r2, #3
 8005680:	462a      	mov	r2, r5
 8005682:	4422      	add	r2, r4
 8005684:	8a52      	ldrh	r2, [r2, #18]
 8005686:	4591      	cmp	r9, r2
 8005688:	d8c5      	bhi.n	8005616 <etharp_find_entry+0x1e>
            old_queue = i;
 800568a:	fa4f fc83 	sxtb.w	ip, r3
            age_queue = arp_table[i].ctime;
 800568e:	4691      	mov	r9, r2
 8005690:	e7c1      	b.n	8005616 <etharp_find_entry+0x1e>
          if (arp_table[i].ctime >= age_pending) {
 8005692:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005696:	00d4      	lsls	r4, r2, #3
 8005698:	4a3c      	ldr	r2, [pc, #240]	; (800578c <etharp_find_entry+0x194>)
 800569a:	4422      	add	r2, r4
 800569c:	8a52      	ldrh	r2, [r2, #18]
 800569e:	4593      	cmp	fp, r2
 80056a0:	d8b9      	bhi.n	8005616 <etharp_find_entry+0x1e>
            old_pending = i;
 80056a2:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 80056a6:	4693      	mov	fp, r2
 80056a8:	e7b5      	b.n	8005616 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80056aa:	f011 0f02 	tst.w	r1, #2
 80056ae:	d165      	bne.n	800577c <etharp_find_entry+0x184>
 80056b0:	2f0a      	cmp	r7, #10
 80056b2:	d020      	beq.n	80056f6 <etharp_find_entry+0xfe>
 80056b4:	4605      	mov	r5, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80056b6:	2f09      	cmp	r7, #9
 80056b8:	dc24      	bgt.n	8005704 <etharp_find_entry+0x10c>
    i = empty;
 80056ba:	b2ff      	uxtb	r7, r7
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80056bc:	2f09      	cmp	r7, #9
 80056be:	d84d      	bhi.n	800575c <etharp_find_entry+0x164>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80056c0:	463c      	mov	r4, r7
 80056c2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80056c6:	00da      	lsls	r2, r3, #3
 80056c8:	4b30      	ldr	r3, [pc, #192]	; (800578c <etharp_find_entry+0x194>)
 80056ca:	4413      	add	r3, r2
 80056cc:	7d1b      	ldrb	r3, [r3, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d14c      	bne.n	800576c <etharp_find_entry+0x174>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80056d2:	b135      	cbz	r5, 80056e2 <etharp_find_entry+0xea>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80056d4:	6829      	ldr	r1, [r5, #0]
 80056d6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80056da:	00da      	lsls	r2, r3, #3
 80056dc:	4b2b      	ldr	r3, [pc, #172]	; (800578c <etharp_find_entry+0x194>)
 80056de:	4413      	add	r3, r2
 80056e0:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80056e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80056e6:	00e2      	lsls	r2, r4, #3
 80056e8:	4b28      	ldr	r3, [pc, #160]	; (800578c <etharp_find_entry+0x194>)
 80056ea:	4413      	add	r3, r2
 80056ec:	2200      	movs	r2, #0
 80056ee:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80056f0:	b278      	sxtb	r0, r7
 80056f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80056f6:	f011 0f01 	tst.w	r1, #1
 80056fa:	d1db      	bne.n	80056b4 <etharp_find_entry+0xbc>
    return (s8_t)ERR_MEM;
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (old_stable < ARP_TABLE_SIZE) {
 8005704:	f1b8 0f09 	cmp.w	r8, #9
 8005708:	dc14      	bgt.n	8005734 <etharp_find_entry+0x13c>
      i = old_stable;
 800570a:	fa5f f788 	uxtb.w	r7, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800570e:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8005712:	00d3      	lsls	r3, r2, #3
 8005714:	4a1d      	ldr	r2, [pc, #116]	; (800578c <etharp_find_entry+0x194>)
 8005716:	58d3      	ldr	r3, [r2, r3]
 8005718:	b133      	cbz	r3, 8005728 <etharp_find_entry+0x130>
 800571a:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <etharp_find_entry+0x198>)
 800571c:	f240 126f 	movw	r2, #367	; 0x16f
 8005720:	491c      	ldr	r1, [pc, #112]	; (8005794 <etharp_find_entry+0x19c>)
 8005722:	481d      	ldr	r0, [pc, #116]	; (8005798 <etharp_find_entry+0x1a0>)
 8005724:	f007 f875 	bl	800c812 <iprintf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8005728:	2f09      	cmp	r7, #9
 800572a:	d80f      	bhi.n	800574c <etharp_find_entry+0x154>
    etharp_free_entry(i);
 800572c:	4638      	mov	r0, r7
 800572e:	f7ff ff49 	bl	80055c4 <etharp_free_entry>
 8005732:	e7c3      	b.n	80056bc <etharp_find_entry+0xc4>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8005734:	f1ba 0f09 	cmp.w	sl, #9
 8005738:	dc02      	bgt.n	8005740 <etharp_find_entry+0x148>
      i = old_pending;
 800573a:	fa5f f78a 	uxtb.w	r7, sl
 800573e:	e7f3      	b.n	8005728 <etharp_find_entry+0x130>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8005740:	f1bc 0f09 	cmp.w	ip, #9
 8005744:	dc1e      	bgt.n	8005784 <etharp_find_entry+0x18c>
      i = old_queue;
 8005746:	fa5f f78c 	uxtb.w	r7, ip
 800574a:	e7ed      	b.n	8005728 <etharp_find_entry+0x130>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800574c:	4b10      	ldr	r3, [pc, #64]	; (8005790 <etharp_find_entry+0x198>)
 800574e:	f240 1281 	movw	r2, #385	; 0x181
 8005752:	4912      	ldr	r1, [pc, #72]	; (800579c <etharp_find_entry+0x1a4>)
 8005754:	4810      	ldr	r0, [pc, #64]	; (8005798 <etharp_find_entry+0x1a0>)
 8005756:	f007 f85c 	bl	800c812 <iprintf>
 800575a:	e7e7      	b.n	800572c <etharp_find_entry+0x134>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800575c:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <etharp_find_entry+0x198>)
 800575e:	f240 1285 	movw	r2, #389	; 0x185
 8005762:	490e      	ldr	r1, [pc, #56]	; (800579c <etharp_find_entry+0x1a4>)
 8005764:	480c      	ldr	r0, [pc, #48]	; (8005798 <etharp_find_entry+0x1a0>)
 8005766:	f007 f854 	bl	800c812 <iprintf>
 800576a:	e7a9      	b.n	80056c0 <etharp_find_entry+0xc8>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800576c:	4b08      	ldr	r3, [pc, #32]	; (8005790 <etharp_find_entry+0x198>)
 800576e:	f240 1287 	movw	r2, #391	; 0x187
 8005772:	490b      	ldr	r1, [pc, #44]	; (80057a0 <etharp_find_entry+0x1a8>)
 8005774:	4808      	ldr	r0, [pc, #32]	; (8005798 <etharp_find_entry+0x1a0>)
 8005776:	f007 f84c 	bl	800c812 <iprintf>
 800577a:	e7aa      	b.n	80056d2 <etharp_find_entry+0xda>
    return (s8_t)ERR_MEM;
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (s8_t)ERR_MEM;
 8005784:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005788:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800578c:	20003d88 	.word	0x20003d88
 8005790:	0800f344 	.word	0x0800f344
 8005794:	0800f37c 	.word	0x0800f37c
 8005798:	0800cd98 	.word	0x0800cd98
 800579c:	0800f394 	.word	0x0800f394
 80057a0:	0800f3a8 	.word	0x0800f3a8

080057a4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80057a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057a6:	b083      	sub	sp, #12
 80057a8:	4604      	mov	r4, r0
 80057aa:	460d      	mov	r5, r1
 80057ac:	4616      	mov	r6, r2
 80057ae:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80057b0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80057b4:	2b06      	cmp	r3, #6
 80057b6:	d006      	beq.n	80057c6 <etharp_update_arp_entry+0x22>
 80057b8:	4b28      	ldr	r3, [pc, #160]	; (800585c <etharp_update_arp_entry+0xb8>)
 80057ba:	f240 12ab 	movw	r2, #427	; 0x1ab
 80057be:	4928      	ldr	r1, [pc, #160]	; (8005860 <etharp_update_arp_entry+0xbc>)
 80057c0:	4828      	ldr	r0, [pc, #160]	; (8005864 <etharp_update_arp_entry+0xc0>)
 80057c2:	f007 f826 	bl	800c812 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	d039      	beq.n	800583e <etharp_update_arp_entry+0x9a>
 80057ca:	6828      	ldr	r0, [r5, #0]
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d039      	beq.n	8005844 <etharp_update_arp_entry+0xa0>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80057d0:	4621      	mov	r1, r4
 80057d2:	f000 fe3c 	bl	800644e <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d137      	bne.n	800584a <etharp_update_arp_entry+0xa6>
      ip4_addr_ismulticast(ipaddr)) {
 80057da:	682b      	ldr	r3, [r5, #0]
 80057dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80057e0:	2be0      	cmp	r3, #224	; 0xe0
 80057e2:	d035      	beq.n	8005850 <etharp_update_arp_entry+0xac>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80057e4:	4622      	mov	r2, r4
 80057e6:	4639      	mov	r1, r7
 80057e8:	4628      	mov	r0, r5
 80057ea:	f7ff ff05 	bl	80055f8 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 80057ee:	2800      	cmp	r0, #0
 80057f0:	db23      	blt.n	800583a <etharp_update_arp_entry+0x96>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80057f2:	4d1d      	ldr	r5, [pc, #116]	; (8005868 <etharp_update_arp_entry+0xc4>)
 80057f4:	0042      	lsls	r2, r0, #1
 80057f6:	1813      	adds	r3, r2, r0
 80057f8:	00d9      	lsls	r1, r3, #3
 80057fa:	186f      	adds	r7, r5, r1
 80057fc:	2302      	movs	r3, #2
 80057fe:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8005800:	60bc      	str	r4, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8005802:	460b      	mov	r3, r1
 8005804:	3308      	adds	r3, #8
 8005806:	442b      	add	r3, r5
 8005808:	6832      	ldr	r2, [r6, #0]
 800580a:	605a      	str	r2, [r3, #4]
 800580c:	88b2      	ldrh	r2, [r6, #4]
 800580e:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8005814:	586d      	ldr	r5, [r5, r1]
 8005816:	b1f5      	cbz	r5, 8005856 <etharp_update_arp_entry+0xb2>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 8005818:	2700      	movs	r7, #0
 800581a:	4a13      	ldr	r2, [pc, #76]	; (8005868 <etharp_update_arp_entry+0xc4>)
 800581c:	5057      	str	r7, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800581e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	4633      	mov	r3, r6
 8005826:	f104 0225 	add.w	r2, r4, #37	; 0x25
 800582a:	4629      	mov	r1, r5
 800582c:	4620      	mov	r0, r4
 800582e:	f006 f94f 	bl	800bad0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8005832:	4628      	mov	r0, r5
 8005834:	f001 ff1e 	bl	8007674 <pbuf_free>
  }
  return ERR_OK;
 8005838:	4638      	mov	r0, r7
}
 800583a:	b003      	add	sp, #12
 800583c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 800583e:	f06f 000f 	mvn.w	r0, #15
 8005842:	e7fa      	b.n	800583a <etharp_update_arp_entry+0x96>
 8005844:	f06f 000f 	mvn.w	r0, #15
 8005848:	e7f7      	b.n	800583a <etharp_update_arp_entry+0x96>
 800584a:	f06f 000f 	mvn.w	r0, #15
 800584e:	e7f4      	b.n	800583a <etharp_update_arp_entry+0x96>
 8005850:	f06f 000f 	mvn.w	r0, #15
 8005854:	e7f1      	b.n	800583a <etharp_update_arp_entry+0x96>
  return ERR_OK;
 8005856:	2000      	movs	r0, #0
 8005858:	e7ef      	b.n	800583a <etharp_update_arp_entry+0x96>
 800585a:	bf00      	nop
 800585c:	0800f344 	.word	0x0800f344
 8005860:	0800f4fc 	.word	0x0800f4fc
 8005864:	0800cd98 	.word	0x0800cd98
 8005868:	20003d88 	.word	0x20003d88

0800586c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800586c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005870:	b082      	sub	sp, #8
 8005872:	4689      	mov	r9, r1
 8005874:	4692      	mov	sl, r2
 8005876:	4698      	mov	r8, r3
 8005878:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800587a:	4607      	mov	r7, r0
 800587c:	2800      	cmp	r0, #0
 800587e:	d048      	beq.n	8005912 <etharp_raw+0xa6>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8005880:	2200      	movs	r2, #0
 8005882:	211c      	movs	r1, #28
 8005884:	2002      	movs	r0, #2
 8005886:	f001 ff61 	bl	800774c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800588a:	4606      	mov	r6, r0
 800588c:	2800      	cmp	r0, #0
 800588e:	d050      	beq.n	8005932 <etharp_raw+0xc6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005890:	8943      	ldrh	r3, [r0, #10]
 8005892:	2b1b      	cmp	r3, #27
 8005894:	d945      	bls.n	8005922 <etharp_raw+0xb6>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8005896:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8005898:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800589c:	f7ff fe73 	bl	8005586 <lwip_htons>
 80058a0:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80058a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80058a6:	2b06      	cmp	r3, #6
 80058a8:	d006      	beq.n	80058b8 <etharp_raw+0x4c>
 80058aa:	4b23      	ldr	r3, [pc, #140]	; (8005938 <etharp_raw+0xcc>)
 80058ac:	f240 426b 	movw	r2, #1131	; 0x46b
 80058b0:	4922      	ldr	r1, [pc, #136]	; (800593c <etharp_raw+0xd0>)
 80058b2:	4823      	ldr	r0, [pc, #140]	; (8005940 <etharp_raw+0xd4>)
 80058b4:	f006 ffad 	bl	800c812 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80058b8:	f8d8 3000 	ldr.w	r3, [r8]
 80058bc:	60a3      	str	r3, [r4, #8]
 80058be:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80058c2:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	f8c4 3012 	str.w	r3, [r4, #18]
 80058ca:	88ab      	ldrh	r3, [r5, #4]
 80058cc:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80058ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80058d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80058dc:	2500      	movs	r5, #0
 80058de:	7025      	strb	r5, [r4, #0]
 80058e0:	2301      	movs	r3, #1
 80058e2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80058e4:	2308      	movs	r3, #8
 80058e6:	70a3      	strb	r3, [r4, #2]
 80058e8:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80058ea:	2306      	movs	r3, #6
 80058ec:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80058ee:	2304      	movs	r3, #4
 80058f0:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80058f2:	f640 0306 	movw	r3, #2054	; 0x806
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4653      	mov	r3, sl
 80058fa:	464a      	mov	r2, r9
 80058fc:	4631      	mov	r1, r6
 80058fe:	4638      	mov	r0, r7
 8005900:	f006 f8e6 	bl	800bad0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005904:	4630      	mov	r0, r6
 8005906:	f001 feb5 	bl	8007674 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800590a:	4628      	mov	r0, r5
}
 800590c:	b002      	add	sp, #8
 800590e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <etharp_raw+0xcc>)
 8005914:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8005918:	490a      	ldr	r1, [pc, #40]	; (8005944 <etharp_raw+0xd8>)
 800591a:	4809      	ldr	r0, [pc, #36]	; (8005940 <etharp_raw+0xd4>)
 800591c:	f006 ff79 	bl	800c812 <iprintf>
 8005920:	e7ae      	b.n	8005880 <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005922:	4b05      	ldr	r3, [pc, #20]	; (8005938 <etharp_raw+0xcc>)
 8005924:	f240 4264 	movw	r2, #1124	; 0x464
 8005928:	4907      	ldr	r1, [pc, #28]	; (8005948 <etharp_raw+0xdc>)
 800592a:	4805      	ldr	r0, [pc, #20]	; (8005940 <etharp_raw+0xd4>)
 800592c:	f006 ff71 	bl	800c812 <iprintf>
 8005930:	e7b1      	b.n	8005896 <etharp_raw+0x2a>
    return ERR_MEM;
 8005932:	f04f 30ff 	mov.w	r0, #4294967295
 8005936:	e7e9      	b.n	800590c <etharp_raw+0xa0>
 8005938:	0800f344 	.word	0x0800f344
 800593c:	0800f4b8 	.word	0x0800f4b8
 8005940:	0800cd98 	.word	0x0800cd98
 8005944:	0800f474 	.word	0x0800f474
 8005948:	0800f484 	.word	0x0800f484

0800594c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800594c:	b530      	push	{r4, r5, lr}
 800594e:	b085      	sub	sp, #20
 8005950:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005952:	f100 0425 	add.w	r4, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005956:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005958:	2501      	movs	r5, #1
 800595a:	9503      	str	r5, [sp, #12]
 800595c:	9102      	str	r1, [sp, #8]
 800595e:	4904      	ldr	r1, [pc, #16]	; (8005970 <etharp_request_dst+0x24>)
 8005960:	9101      	str	r1, [sp, #4]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	4623      	mov	r3, r4
 8005966:	4621      	mov	r1, r4
 8005968:	f7ff ff80 	bl	800586c <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800596c:	b005      	add	sp, #20
 800596e:	bd30      	pop	{r4, r5, pc}
 8005970:	08010c0c 	.word	0x08010c0c

08005974 <etharp_cleanup_netif>:
{
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005978:	2400      	movs	r4, #0
 800597a:	e001      	b.n	8005980 <etharp_cleanup_netif+0xc>
 800597c:	3401      	adds	r4, #1
 800597e:	b2e4      	uxtb	r4, r4
 8005980:	2c09      	cmp	r4, #9
 8005982:	d810      	bhi.n	80059a6 <etharp_cleanup_netif+0x32>
    u8_t state = arp_table[i].state;
 8005984:	4620      	mov	r0, r4
 8005986:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800598a:	00da      	lsls	r2, r3, #3
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <etharp_cleanup_netif+0x34>)
 800598e:	4413      	add	r3, r2
 8005990:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f2      	beq.n	800597c <etharp_cleanup_netif+0x8>
 8005996:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <etharp_cleanup_netif+0x34>)
 8005998:	4413      	add	r3, r2
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	42ab      	cmp	r3, r5
 800599e:	d1ed      	bne.n	800597c <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 80059a0:	f7ff fe10 	bl	80055c4 <etharp_free_entry>
 80059a4:	e7ea      	b.n	800597c <etharp_cleanup_netif+0x8>
}
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	20003d88 	.word	0x20003d88

080059ac <etharp_input>:
{
 80059ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b0:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80059b2:	b161      	cbz	r1, 80059ce <etharp_input+0x22>
 80059b4:	4604      	mov	r4, r0
 80059b6:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 80059b8:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80059ba:	882b      	ldrh	r3, [r5, #0]
 80059bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c0:	d00d      	beq.n	80059de <etharp_input+0x32>
    pbuf_free(p);
 80059c2:	4620      	mov	r0, r4
 80059c4:	f001 fe56 	bl	8007674 <pbuf_free>
}
 80059c8:	b006      	add	sp, #24
 80059ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80059ce:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <etharp_input+0xa4>)
 80059d0:	f44f 7222 	mov.w	r2, #648	; 0x288
 80059d4:	491f      	ldr	r1, [pc, #124]	; (8005a54 <etharp_input+0xa8>)
 80059d6:	4820      	ldr	r0, [pc, #128]	; (8005a58 <etharp_input+0xac>)
 80059d8:	f006 ff1b 	bl	800c812 <iprintf>
 80059dc:	e7f4      	b.n	80059c8 <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80059de:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80059e0:	2b06      	cmp	r3, #6
 80059e2:	d1ee      	bne.n	80059c2 <etharp_input+0x16>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80059e4:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d1eb      	bne.n	80059c2 <etharp_input+0x16>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80059ea:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d1e8      	bne.n	80059c2 <etharp_input+0x16>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80059f0:	f8d5 300e 	ldr.w	r3, [r5, #14]
 80059f4:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80059f6:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80059f8:	684b      	ldr	r3, [r1, #4]
 80059fa:	b1ab      	cbz	r3, 8005a28 <etharp_input+0x7c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80059fc:	429f      	cmp	r7, r3
 80059fe:	bf14      	ite	ne
 8005a00:	2700      	movne	r7, #0
 8005a02:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005a04:	f105 0808 	add.w	r8, r5, #8
 8005a08:	b187      	cbz	r7, 8005a2c <etharp_input+0x80>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	a905      	add	r1, sp, #20
 8005a10:	4630      	mov	r0, r6
 8005a12:	f7ff fec7 	bl	80057a4 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 8005a16:	88eb      	ldrh	r3, [r5, #6]
 8005a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a1c:	d100      	bne.n	8005a20 <etharp_input+0x74>
    if (for_us) {
 8005a1e:	b93f      	cbnz	r7, 8005a30 <etharp_input+0x84>
  pbuf_free(p);
 8005a20:	4620      	mov	r0, r4
 8005a22:	f001 fe27 	bl	8007674 <pbuf_free>
 8005a26:	e7cf      	b.n	80059c8 <etharp_input+0x1c>
    for_us = 0;
 8005a28:	2700      	movs	r7, #0
 8005a2a:	e7eb      	b.n	8005a04 <etharp_input+0x58>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e7ed      	b.n	8005a0c <etharp_input+0x60>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8005a30:	f106 0125 	add.w	r1, r6, #37	; 0x25
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8005a34:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 8005a36:	2202      	movs	r2, #2
 8005a38:	9203      	str	r2, [sp, #12]
 8005a3a:	aa05      	add	r2, sp, #20
 8005a3c:	9202      	str	r2, [sp, #8]
 8005a3e:	f8cd 8004 	str.w	r8, [sp, #4]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	460b      	mov	r3, r1
 8005a46:	4642      	mov	r2, r8
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f7ff ff0f 	bl	800586c <etharp_raw>
 8005a4e:	e7e7      	b.n	8005a20 <etharp_input+0x74>
 8005a50:	0800f344 	.word	0x0800f344
 8005a54:	0800f474 	.word	0x0800f474
 8005a58:	0800cd98 	.word	0x0800cd98

08005a5c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005a5c:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8005a5e:	4a02      	ldr	r2, [pc, #8]	; (8005a68 <etharp_request+0xc>)
 8005a60:	f7ff ff74 	bl	800594c <etharp_request_dst>
}
 8005a64:	bd08      	pop	{r3, pc}
 8005a66:	bf00      	nop
 8005a68:	08010b98 	.word	0x08010b98

08005a6c <etharp_tmr>:
{
 8005a6c:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005a6e:	2400      	movs	r4, #0
 8005a70:	e005      	b.n	8005a7e <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d91d      	bls.n	8005ab2 <etharp_tmr+0x46>
        etharp_free_entry(i);
 8005a76:	f7ff fda5 	bl	80055c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005a7a:	3401      	adds	r4, #1
 8005a7c:	b2e4      	uxtb	r4, r4
 8005a7e:	2c09      	cmp	r4, #9
 8005a80:	d838      	bhi.n	8005af4 <etharp_tmr+0x88>
    u8_t state = arp_table[i].state;
 8005a82:	4620      	mov	r0, r4
 8005a84:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005a88:	00da      	lsls	r2, r3, #3
 8005a8a:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <etharp_tmr+0x8c>)
 8005a8c:	4413      	add	r3, r2
 8005a8e:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f2      	beq.n	8005a7a <etharp_tmr+0xe>
      arp_table[i].ctime++;
 8005a94:	4611      	mov	r1, r2
 8005a96:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <etharp_tmr+0x8c>)
 8005a98:	440a      	add	r2, r1
 8005a9a:	8a53      	ldrh	r3, [r2, #18]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005aa2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005aa6:	d2e6      	bcs.n	8005a76 <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005aa8:	4a13      	ldr	r2, [pc, #76]	; (8005af8 <etharp_tmr+0x8c>)
 8005aaa:	440a      	add	r2, r1
 8005aac:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005aae:	2a01      	cmp	r2, #1
 8005ab0:	d0df      	beq.n	8005a72 <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8005ab2:	2a03      	cmp	r2, #3
 8005ab4:	d00e      	beq.n	8005ad4 <etharp_tmr+0x68>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8005ab6:	2a04      	cmp	r2, #4
 8005ab8:	d014      	beq.n	8005ae4 <etharp_tmr+0x78>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005aba:	2a01      	cmp	r2, #1
 8005abc:	d1dd      	bne.n	8005a7a <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8005abe:	4a0e      	ldr	r2, [pc, #56]	; (8005af8 <etharp_tmr+0x8c>)
 8005ac0:	0043      	lsls	r3, r0, #1
 8005ac2:	181d      	adds	r5, r3, r0
 8005ac4:	00e9      	lsls	r1, r5, #3
 8005ac6:	4411      	add	r1, r2
 8005ac8:	460a      	mov	r2, r1
 8005aca:	3104      	adds	r1, #4
 8005acc:	6890      	ldr	r0, [r2, #8]
 8005ace:	f7ff ffc5 	bl	8005a5c <etharp_request>
 8005ad2:	e7d2      	b.n	8005a7a <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005ad4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005ad8:	00c2      	lsls	r2, r0, #3
 8005ada:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <etharp_tmr+0x8c>)
 8005adc:	4413      	add	r3, r2
 8005ade:	2204      	movs	r2, #4
 8005ae0:	751a      	strb	r2, [r3, #20]
 8005ae2:	e7ca      	b.n	8005a7a <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005ae4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005ae8:	00c2      	lsls	r2, r0, #3
 8005aea:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <etharp_tmr+0x8c>)
 8005aec:	4413      	add	r3, r2
 8005aee:	2202      	movs	r2, #2
 8005af0:	751a      	strb	r2, [r3, #20]
 8005af2:	e7c2      	b.n	8005a7a <etharp_tmr+0xe>
}
 8005af4:	bd38      	pop	{r3, r4, r5, pc}
 8005af6:	bf00      	nop
 8005af8:	20003d88 	.word	0x20003d88

08005afc <etharp_output_to_arp_index>:
{
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	4605      	mov	r5, r0
 8005b02:	460e      	mov	r6, r1
 8005b04:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005b06:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005b0a:	00da      	lsls	r2, r3, #3
 8005b0c:	4b2c      	ldr	r3, [pc, #176]	; (8005bc0 <etharp_output_to_arp_index+0xc4>)
 8005b0e:	4413      	add	r3, r2
 8005b10:	7d1b      	ldrb	r3, [r3, #20]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d919      	bls.n	8005b4a <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005b16:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005b1a:	00da      	lsls	r2, r3, #3
 8005b1c:	4b28      	ldr	r3, [pc, #160]	; (8005bc0 <etharp_output_to_arp_index+0xc4>)
 8005b1e:	4413      	add	r3, r2
 8005b20:	7d1b      	ldrb	r3, [r3, #20]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d019      	beq.n	8005b5a <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005b26:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005b2a:	00e3      	lsls	r3, r4, #3
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	4a24      	ldr	r2, [pc, #144]	; (8005bc0 <etharp_output_to_arp_index+0xc4>)
 8005b30:	4413      	add	r3, r2
 8005b32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b36:	9200      	str	r2, [sp, #0]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4628      	mov	r0, r5
 8005b42:	f005 ffc5 	bl	800bad0 <ethernet_output>
}
 8005b46:	b002      	add	sp, #8
 8005b48:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005b4a:	4b1e      	ldr	r3, [pc, #120]	; (8005bc4 <etharp_output_to_arp_index+0xc8>)
 8005b4c:	f240 22ed 	movw	r2, #749	; 0x2ed
 8005b50:	491d      	ldr	r1, [pc, #116]	; (8005bc8 <etharp_output_to_arp_index+0xcc>)
 8005b52:	481e      	ldr	r0, [pc, #120]	; (8005bcc <etharp_output_to_arp_index+0xd0>)
 8005b54:	f006 fe5d 	bl	800c812 <iprintf>
 8005b58:	e7dd      	b.n	8005b16 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005b5a:	4b19      	ldr	r3, [pc, #100]	; (8005bc0 <etharp_output_to_arp_index+0xc4>)
 8005b5c:	4413      	add	r3, r2
 8005b5e:	8a5b      	ldrh	r3, [r3, #18]
 8005b60:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8005b64:	d819      	bhi.n	8005b9a <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005b66:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005b6a:	d3dc      	bcc.n	8005b26 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005b6c:	4a14      	ldr	r2, [pc, #80]	; (8005bc0 <etharp_output_to_arp_index+0xc4>)
 8005b6e:	0063      	lsls	r3, r4, #1
 8005b70:	1918      	adds	r0, r3, r4
 8005b72:	00c1      	lsls	r1, r0, #3
 8005b74:	4608      	mov	r0, r1
 8005b76:	4411      	add	r1, r2
 8005b78:	3008      	adds	r0, #8
 8005b7a:	4402      	add	r2, r0
 8005b7c:	3204      	adds	r2, #4
 8005b7e:	3104      	adds	r1, #4
 8005b80:	4628      	mov	r0, r5
 8005b82:	f7ff fee3 	bl	800594c <etharp_request_dst>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d1cd      	bne.n	8005b26 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005b8a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005b8e:	00da      	lsls	r2, r3, #3
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <etharp_output_to_arp_index+0xc4>)
 8005b92:	4413      	add	r3, r2
 8005b94:	2203      	movs	r2, #3
 8005b96:	751a      	strb	r2, [r3, #20]
 8005b98:	e7c5      	b.n	8005b26 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005b9a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005b9e:	00d3      	lsls	r3, r2, #3
 8005ba0:	4907      	ldr	r1, [pc, #28]	; (8005bc0 <etharp_output_to_arp_index+0xc4>)
 8005ba2:	4419      	add	r1, r3
 8005ba4:	3104      	adds	r1, #4
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7ff ff58 	bl	8005a5c <etharp_request>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d1ba      	bne.n	8005b26 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005bb0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005bb4:	00da      	lsls	r2, r3, #3
 8005bb6:	4b02      	ldr	r3, [pc, #8]	; (8005bc0 <etharp_output_to_arp_index+0xc4>)
 8005bb8:	4413      	add	r3, r2
 8005bba:	2203      	movs	r2, #3
 8005bbc:	751a      	strb	r2, [r3, #20]
 8005bbe:	e7b2      	b.n	8005b26 <etharp_output_to_arp_index+0x2a>
 8005bc0:	20003d88 	.word	0x20003d88
 8005bc4:	0800f344 	.word	0x0800f344
 8005bc8:	0800f3f4 	.word	0x0800f3f4
 8005bcc:	0800cd98 	.word	0x0800cd98

08005bd0 <etharp_query>:
{
 8005bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	460c      	mov	r4, r1
 8005bda:	4617      	mov	r7, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8005bdc:	f100 0825 	add.w	r8, r0, #37	; 0x25
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005be0:	4601      	mov	r1, r0
 8005be2:	6820      	ldr	r0, [r4, #0]
 8005be4:	f000 fc33 	bl	800644e <ip4_addr_isbroadcast_u32>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	f040 80aa 	bne.w	8005d42 <etharp_query+0x172>
      ip4_addr_ismulticast(ipaddr) ||
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005bf4:	2ae0      	cmp	r2, #224	; 0xe0
 8005bf6:	f000 80a7 	beq.w	8005d48 <etharp_query+0x178>
      ip4_addr_ismulticast(ipaddr) ||
 8005bfa:	2c00      	cmp	r4, #0
 8005bfc:	f000 80a7 	beq.w	8005d4e <etharp_query+0x17e>
      ip4_addr_isany(ipaddr)) {
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80a7 	beq.w	8005d54 <etharp_query+0x184>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8005c06:	4632      	mov	r2, r6
 8005c08:	2101      	movs	r1, #1
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f7ff fcf4 	bl	80055f8 <etharp_find_entry>
  if (i < 0) {
 8005c10:	1e05      	subs	r5, r0, #0
 8005c12:	f2c0 80a2 	blt.w	8005d5a <etharp_query+0x18a>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8005c16:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005c1a:	00da      	lsls	r2, r3, #3
 8005c1c:	4b51      	ldr	r3, [pc, #324]	; (8005d64 <etharp_query+0x194>)
 8005c1e:	4413      	add	r3, r2
 8005c20:	7d1b      	ldrb	r3, [r3, #20]
 8005c22:	bb1b      	cbnz	r3, 8005c6c <etharp_query+0x9c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8005c24:	006a      	lsls	r2, r5, #1
 8005c26:	442a      	add	r2, r5
 8005c28:	00d1      	lsls	r1, r2, #3
 8005c2a:	4b4e      	ldr	r3, [pc, #312]	; (8005d64 <etharp_query+0x194>)
 8005c2c:	440b      	add	r3, r1
 8005c2e:	f04f 0901 	mov.w	r9, #1
 8005c32:	f883 9014 	strb.w	r9, [r3, #20]
    arp_table[i].netif = netif;
 8005c36:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8005c38:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005c3c:	00da      	lsls	r2, r3, #3
 8005c3e:	4b49      	ldr	r3, [pc, #292]	; (8005d64 <etharp_query+0x194>)
 8005c40:	4413      	add	r3, r2
 8005c42:	7d1b      	ldrb	r3, [r3, #20]
 8005c44:	b1ab      	cbz	r3, 8005c72 <etharp_query+0xa2>
  if (is_new_entry || (q == NULL)) {
 8005c46:	f1b9 0f00 	cmp.w	r9, #0
 8005c4a:	d11a      	bne.n	8005c82 <etharp_query+0xb2>
 8005c4c:	b1cf      	cbz	r7, 8005c82 <etharp_query+0xb2>
  err_t result = ERR_MEM;
 8005c4e:	f04f 34ff 	mov.w	r4, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 8005c52:	b1f7      	cbz	r7, 8005c92 <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8005c54:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005c58:	00da      	lsls	r2, r3, #3
 8005c5a:	4b42      	ldr	r3, [pc, #264]	; (8005d64 <etharp_query+0x194>)
 8005c5c:	4413      	add	r3, r2
 8005c5e:	7d1b      	ldrb	r3, [r3, #20]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d81e      	bhi.n	8005ca2 <etharp_query+0xd2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d12c      	bne.n	8005cc2 <etharp_query+0xf2>
 8005c68:	463c      	mov	r4, r7
 8005c6a:	e032      	b.n	8005cd2 <etharp_query+0x102>
  int is_new_entry = 0;
 8005c6c:	f04f 0900 	mov.w	r9, #0
 8005c70:	e7e2      	b.n	8005c38 <etharp_query+0x68>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8005c72:	4b3d      	ldr	r3, [pc, #244]	; (8005d68 <etharp_query+0x198>)
 8005c74:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005c78:	493c      	ldr	r1, [pc, #240]	; (8005d6c <etharp_query+0x19c>)
 8005c7a:	483d      	ldr	r0, [pc, #244]	; (8005d70 <etharp_query+0x1a0>)
 8005c7c:	f006 fdc9 	bl	800c812 <iprintf>
 8005c80:	e7e1      	b.n	8005c46 <etharp_query+0x76>
    result = etharp_request(netif, ipaddr);
 8005c82:	4621      	mov	r1, r4
 8005c84:	4630      	mov	r0, r6
 8005c86:	f7ff fee9 	bl	8005a5c <etharp_request>
 8005c8a:	4604      	mov	r4, r0
    if (q == NULL) {
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	d1e0      	bne.n	8005c52 <etharp_query+0x82>
 8005c90:	e017      	b.n	8005cc2 <etharp_query+0xf2>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005c92:	4b35      	ldr	r3, [pc, #212]	; (8005d68 <etharp_query+0x198>)
 8005c94:	f240 32db 	movw	r2, #987	; 0x3db
 8005c98:	4936      	ldr	r1, [pc, #216]	; (8005d74 <etharp_query+0x1a4>)
 8005c9a:	4835      	ldr	r0, [pc, #212]	; (8005d70 <etharp_query+0x1a0>)
 8005c9c:	f006 fdb9 	bl	800c812 <iprintf>
 8005ca0:	e7d8      	b.n	8005c54 <etharp_query+0x84>
    ETHARP_SET_HINT(netif, i);
 8005ca2:	4b35      	ldr	r3, [pc, #212]	; (8005d78 <etharp_query+0x1a8>)
 8005ca4:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	3308      	adds	r3, #8
 8005caa:	4a2e      	ldr	r2, [pc, #184]	; (8005d64 <etharp_query+0x194>)
 8005cac:	4413      	add	r3, r2
 8005cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cb2:	9200      	str	r2, [sp, #0]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4642      	mov	r2, r8
 8005cb8:	4639      	mov	r1, r7
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f005 ff08 	bl	800bad0 <ethernet_output>
 8005cc0:	4604      	mov	r4, r0
}
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	b003      	add	sp, #12
 8005cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (p->type != PBUF_ROM) {
 8005cca:	7b23      	ldrb	r3, [r4, #12]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d122      	bne.n	8005d16 <etharp_query+0x146>
      p = p->next;
 8005cd0:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8005cd2:	b174      	cbz	r4, 8005cf2 <etharp_query+0x122>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8005cd4:	8962      	ldrh	r2, [r4, #10]
 8005cd6:	8923      	ldrh	r3, [r4, #8]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d1f6      	bne.n	8005cca <etharp_query+0xfa>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0f3      	beq.n	8005cca <etharp_query+0xfa>
 8005ce2:	4b21      	ldr	r3, [pc, #132]	; (8005d68 <etharp_query+0x198>)
 8005ce4:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8005ce8:	4924      	ldr	r1, [pc, #144]	; (8005d7c <etharp_query+0x1ac>)
 8005cea:	4821      	ldr	r0, [pc, #132]	; (8005d70 <etharp_query+0x1a0>)
 8005cec:	f006 fd91 	bl	800c812 <iprintf>
 8005cf0:	e7eb      	b.n	8005cca <etharp_query+0xfa>
    int copy_needed = 0;
 8005cf2:	2300      	movs	r3, #0
    if (copy_needed) {
 8005cf4:	b18b      	cbz	r3, 8005d1a <etharp_query+0x14a>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	8921      	ldrh	r1, [r4, #8]
 8005cfa:	2002      	movs	r0, #2
 8005cfc:	f001 fd26 	bl	800774c <pbuf_alloc>
      if (p != NULL) {
 8005d00:	4604      	mov	r4, r0
 8005d02:	b170      	cbz	r0, 8005d22 <etharp_query+0x152>
        if (pbuf_copy(p, q) != ERR_OK) {
 8005d04:	4639      	mov	r1, r7
 8005d06:	f001 fedb 	bl	8007ac0 <pbuf_copy>
 8005d0a:	b150      	cbz	r0, 8005d22 <etharp_query+0x152>
          pbuf_free(p);
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f001 fcb1 	bl	8007674 <pbuf_free>
          p = NULL;
 8005d12:	2400      	movs	r4, #0
 8005d14:	e005      	b.n	8005d22 <etharp_query+0x152>
        copy_needed = 1;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e7ec      	b.n	8005cf4 <etharp_query+0x124>
      pbuf_ref(p);
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	f001 fe7a 	bl	8007a14 <pbuf_ref>
      p = q;
 8005d20:	463c      	mov	r4, r7
    if (p != NULL) {
 8005d22:	b1e4      	cbz	r4, 8005d5e <etharp_query+0x18e>
      if (arp_table[i].q != NULL) {
 8005d24:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8005d28:	00d3      	lsls	r3, r2, #3
 8005d2a:	4a0e      	ldr	r2, [pc, #56]	; (8005d64 <etharp_query+0x194>)
 8005d2c:	58d0      	ldr	r0, [r2, r3]
 8005d2e:	b108      	cbz	r0, 8005d34 <etharp_query+0x164>
        pbuf_free(arp_table[i].q);
 8005d30:	f001 fca0 	bl	8007674 <pbuf_free>
      arp_table[i].q = p;
 8005d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d38:	00eb      	lsls	r3, r5, #3
 8005d3a:	4a0a      	ldr	r2, [pc, #40]	; (8005d64 <etharp_query+0x194>)
 8005d3c:	50d4      	str	r4, [r2, r3]
      result = ERR_OK;
 8005d3e:	2400      	movs	r4, #0
 8005d40:	e7bf      	b.n	8005cc2 <etharp_query+0xf2>
    return ERR_ARG;
 8005d42:	f06f 040f 	mvn.w	r4, #15
 8005d46:	e7bc      	b.n	8005cc2 <etharp_query+0xf2>
 8005d48:	f06f 040f 	mvn.w	r4, #15
 8005d4c:	e7b9      	b.n	8005cc2 <etharp_query+0xf2>
 8005d4e:	f06f 040f 	mvn.w	r4, #15
 8005d52:	e7b6      	b.n	8005cc2 <etharp_query+0xf2>
 8005d54:	f06f 040f 	mvn.w	r4, #15
 8005d58:	e7b3      	b.n	8005cc2 <etharp_query+0xf2>
    return (err_t)i;
 8005d5a:	462c      	mov	r4, r5
 8005d5c:	e7b1      	b.n	8005cc2 <etharp_query+0xf2>
      result = ERR_MEM;
 8005d5e:	f04f 34ff 	mov.w	r4, #4294967295
 8005d62:	e7ae      	b.n	8005cc2 <etharp_query+0xf2>
 8005d64:	20003d88 	.word	0x20003d88
 8005d68:	0800f344 	.word	0x0800f344
 8005d6c:	0800f424 	.word	0x0800f424
 8005d70:	0800cd98 	.word	0x0800cd98
 8005d74:	0800f44c 	.word	0x0800f44c
 8005d78:	20003e78 	.word	0x20003e78
 8005d7c:	0800f458 	.word	0x0800f458

08005d80 <etharp_output>:
{
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	460e      	mov	r6, r1
 8005d86:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005d88:	4605      	mov	r5, r0
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d02f      	beq.n	8005dee <etharp_output+0x6e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005d8e:	2e00      	cmp	r6, #0
 8005d90:	d035      	beq.n	8005dfe <etharp_output+0x7e>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8005d92:	2c00      	cmp	r4, #0
 8005d94:	d03b      	beq.n	8005e0e <etharp_output+0x8e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8005d96:	4629      	mov	r1, r5
 8005d98:	6820      	ldr	r0, [r4, #0]
 8005d9a:	f000 fb58 	bl	800644e <ip4_addr_isbroadcast_u32>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d17a      	bne.n	8005e98 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005da8:	2ae0      	cmp	r2, #224	; 0xe0
 8005daa:	d038      	beq.n	8005e1e <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005dac:	686a      	ldr	r2, [r5, #4]
 8005dae:	68a9      	ldr	r1, [r5, #8]
 8005db0:	405a      	eors	r2, r3
 8005db2:	420a      	tst	r2, r1
 8005db4:	d009      	beq.n	8005dca <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 8005db6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005db8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8005dc0:	68eb      	ldr	r3, [r5, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d074      	beq.n	8005eb0 <etharp_output+0x130>
            dst_addr = netif_ip4_gw(netif);
 8005dc6:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005dca:	4b3b      	ldr	r3, [pc, #236]	; (8005eb8 <etharp_output+0x138>)
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005dd2:	00d9      	lsls	r1, r3, #3
 8005dd4:	4b39      	ldr	r3, [pc, #228]	; (8005ebc <etharp_output+0x13c>)
 8005dd6:	440b      	add	r3, r1
 8005dd8:	7d1b      	ldrb	r3, [r3, #20]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d954      	bls.n	8005e88 <etharp_output+0x108>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8005dde:	6820      	ldr	r0, [r4, #0]
 8005de0:	4b36      	ldr	r3, [pc, #216]	; (8005ebc <etharp_output+0x13c>)
 8005de2:	440b      	add	r3, r1
 8005de4:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005de6:	4298      	cmp	r0, r3
 8005de8:	d02f      	beq.n	8005e4a <etharp_output+0xca>
 8005dea:	2200      	movs	r2, #0
 8005dec:	e034      	b.n	8005e58 <etharp_output+0xd8>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005dee:	4b34      	ldr	r3, [pc, #208]	; (8005ec0 <etharp_output+0x140>)
 8005df0:	f240 321b 	movw	r2, #795	; 0x31b
 8005df4:	4933      	ldr	r1, [pc, #204]	; (8005ec4 <etharp_output+0x144>)
 8005df6:	4834      	ldr	r0, [pc, #208]	; (8005ec8 <etharp_output+0x148>)
 8005df8:	f006 fd0b 	bl	800c812 <iprintf>
 8005dfc:	e7c7      	b.n	8005d8e <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005dfe:	4b30      	ldr	r3, [pc, #192]	; (8005ec0 <etharp_output+0x140>)
 8005e00:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8005e04:	4931      	ldr	r1, [pc, #196]	; (8005ecc <etharp_output+0x14c>)
 8005e06:	4830      	ldr	r0, [pc, #192]	; (8005ec8 <etharp_output+0x148>)
 8005e08:	f006 fd03 	bl	800c812 <iprintf>
 8005e0c:	e7c1      	b.n	8005d92 <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8005e0e:	4b2c      	ldr	r3, [pc, #176]	; (8005ec0 <etharp_output+0x140>)
 8005e10:	f240 321d 	movw	r2, #797	; 0x31d
 8005e14:	492e      	ldr	r1, [pc, #184]	; (8005ed0 <etharp_output+0x150>)
 8005e16:	482c      	ldr	r0, [pc, #176]	; (8005ec8 <etharp_output+0x148>)
 8005e18:	f006 fcfb 	bl	800c812 <iprintf>
 8005e1c:	e7bb      	b.n	8005d96 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8005e24:	2300      	movs	r3, #0
 8005e26:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8005e2a:	235e      	movs	r3, #94	; 0x5e
 8005e2c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005e30:	7863      	ldrb	r3, [r4, #1]
 8005e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e36:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8005e3a:	78a3      	ldrb	r3, [r4, #2]
 8005e3c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8005e40:	78e3      	ldrb	r3, [r4, #3]
 8005e42:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8005e46:	ab02      	add	r3, sp, #8
 8005e48:	e027      	b.n	8005e9a <etharp_output+0x11a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f7ff fe55 	bl	8005afc <etharp_output_to_arp_index>
 8005e52:	e02b      	b.n	8005eac <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8005e54:	3201      	adds	r2, #1
 8005e56:	b252      	sxtb	r2, r2
 8005e58:	2a09      	cmp	r2, #9
 8005e5a:	dc17      	bgt.n	8005e8c <etharp_output+0x10c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005e5c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005e60:	00d9      	lsls	r1, r3, #3
 8005e62:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <etharp_output+0x13c>)
 8005e64:	440b      	add	r3, r1
 8005e66:	7d1b      	ldrb	r3, [r3, #20]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d9f3      	bls.n	8005e54 <etharp_output+0xd4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8005e6c:	6820      	ldr	r0, [r4, #0]
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <etharp_output+0x13c>)
 8005e70:	440b      	add	r3, r1
 8005e72:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005e74:	4298      	cmp	r0, r3
 8005e76:	d1ed      	bne.n	8005e54 <etharp_output+0xd4>
        ETHARP_SET_HINT(netif, i);
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <etharp_output+0x138>)
 8005e7c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	f7ff fe3b 	bl	8005afc <etharp_output_to_arp_index>
 8005e86:	e011      	b.n	8005eac <etharp_output+0x12c>
 8005e88:	2200      	movs	r2, #0
 8005e8a:	e7e5      	b.n	8005e58 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 8005e8c:	4632      	mov	r2, r6
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4628      	mov	r0, r5
 8005e92:	f7ff fe9d 	bl	8005bd0 <etharp_query>
 8005e96:	e009      	b.n	8005eac <etharp_output+0x12c>
    dest = (const struct eth_addr *)&ethbroadcast;
 8005e98:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <etharp_output+0x154>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8005e9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e9e:	9200      	str	r2, [sp, #0]
 8005ea0:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f005 fe12 	bl	800bad0 <ethernet_output>
}
 8005eac:	b004      	add	sp, #16
 8005eae:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
 8005eb0:	f06f 0003 	mvn.w	r0, #3
 8005eb4:	e7fa      	b.n	8005eac <etharp_output+0x12c>
 8005eb6:	bf00      	nop
 8005eb8:	20003e78 	.word	0x20003e78
 8005ebc:	20003d88 	.word	0x20003d88
 8005ec0:	0800f344 	.word	0x0800f344
 8005ec4:	0800f474 	.word	0x0800f474
 8005ec8:	0800cd98 	.word	0x0800cd98
 8005ecc:	0800f44c 	.word	0x0800f44c
 8005ed0:	0800f3d4 	.word	0x0800f3d4
 8005ed4:	08010b98 	.word	0x08010b98

08005ed8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8005ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005edc:	b086      	sub	sp, #24
 8005ede:	4606      	mov	r6, r0
 8005ee0:	4688      	mov	r8, r1
 8005ee2:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2124      	movs	r1, #36	; 0x24
 8005ee8:	2001      	movs	r0, #1
 8005eea:	f001 fc2f 	bl	800774c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d037      	beq.n	8005f62 <icmp_send_response+0x8a>
 8005ef2:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005ef4:	8943      	ldrh	r3, [r0, #10]
 8005ef6:	2b23      	cmp	r3, #35	; 0x23
 8005ef8:	d936      	bls.n	8005f68 <icmp_send_response+0x90>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005efa:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8005efe:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8005f00:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 8005f04:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	7123      	strb	r3, [r4, #4]
 8005f0a:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8005f0c:	71a3      	strb	r3, [r4, #6]
 8005f0e:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005f10:	686f      	ldr	r7, [r5, #4]
 8005f12:	6873      	ldr	r3, [r6, #4]
 8005f14:	681e      	ldr	r6, [r3, #0]
 8005f16:	6858      	ldr	r0, [r3, #4]
 8005f18:	6899      	ldr	r1, [r3, #8]
 8005f1a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005f1e:	60be      	str	r6, [r7, #8]
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	6139      	str	r1, [r7, #16]
 8005f24:	f8c7 c014 	str.w	ip, [r7, #20]
 8005f28:	691e      	ldr	r6, [r3, #16]
 8005f2a:	6958      	ldr	r0, [r3, #20]
 8005f2c:	6999      	ldr	r1, [r3, #24]
 8005f2e:	61be      	str	r6, [r7, #24]
 8005f30:	61f8      	str	r0, [r7, #28]
 8005f32:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005f34:	f8de 300c 	ldr.w	r3, [lr, #12]
 8005f38:	a806      	add	r0, sp, #24
 8005f3a:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005f3e:	f000 f8cb 	bl	80060d8 <ip4_route>
#endif
  if (netif != NULL) {
 8005f42:	b158      	cbz	r0, 8005f5c <icmp_send_response+0x84>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005f44:	2100      	movs	r1, #0
 8005f46:	70a1      	strb	r1, [r4, #2]
 8005f48:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005f4a:	9002      	str	r0, [sp, #8]
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	9100      	str	r1, [sp, #0]
 8005f52:	23ff      	movs	r3, #255	; 0xff
 8005f54:	aa05      	add	r2, sp, #20
 8005f56:	4628      	mov	r0, r5
 8005f58:	f000 fa64 	bl	8006424 <ip4_output_if>
  }
  pbuf_free(q);
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f001 fb89 	bl	8007674 <pbuf_free>
}
 8005f62:	b006      	add	sp, #24
 8005f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005f68:	4b03      	ldr	r3, [pc, #12]	; (8005f78 <icmp_send_response+0xa0>)
 8005f6a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005f6e:	4903      	ldr	r1, [pc, #12]	; (8005f7c <icmp_send_response+0xa4>)
 8005f70:	4803      	ldr	r0, [pc, #12]	; (8005f80 <icmp_send_response+0xa8>)
 8005f72:	f006 fc4e 	bl	800c812 <iprintf>
 8005f76:	e7c0      	b.n	8005efa <icmp_send_response+0x22>
 8005f78:	0800f58c 	.word	0x0800f58c
 8005f7c:	0800f5c4 	.word	0x0800f5c4
 8005f80:	0800cd98 	.word	0x0800cd98

08005f84 <icmp_input>:
{
 8005f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f88:	b084      	sub	sp, #16
 8005f8a:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8005f8c:	4b47      	ldr	r3, [pc, #284]	; (80060ac <icmp_input+0x128>)
 8005f8e:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8005f90:	7834      	ldrb	r4, [r6, #0]
 8005f92:	f004 040f 	and.w	r4, r4, #15
 8005f96:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8005f98:	2c13      	cmp	r4, #19
 8005f9a:	d915      	bls.n	8005fc8 <icmp_input+0x44>
 8005f9c:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 8005f9e:	8943      	ldrh	r3, [r0, #10]
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d911      	bls.n	8005fc8 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8005fa4:	6843      	ldr	r3, [r0, #4]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d15d      	bne.n	8006068 <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005fac:	4b3f      	ldr	r3, [pc, #252]	; (80060ac <icmp_input+0x128>)
 8005fae:	6958      	ldr	r0, [r3, #20]
 8005fb0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8005fb4:	2be0      	cmp	r3, #224	; 0xe0
 8005fb6:	d023      	beq.n	8006000 <icmp_input+0x7c>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8005fb8:	4b3c      	ldr	r3, [pc, #240]	; (80060ac <icmp_input+0x128>)
 8005fba:	6819      	ldr	r1, [r3, #0]
 8005fbc:	f000 fa47 	bl	800644e <ip4_addr_isbroadcast_u32>
 8005fc0:	b9f0      	cbnz	r0, 8006000 <icmp_input+0x7c>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8005fc2:	892b      	ldrh	r3, [r5, #8]
 8005fc4:	2b07      	cmp	r3, #7
 8005fc6:	d805      	bhi.n	8005fd4 <icmp_input+0x50>
  pbuf_free(p);
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f001 fb53 	bl	8007674 <pbuf_free>
}
 8005fce:	b004      	add	sp, #16
 8005fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8005fd4:	f104 010e 	add.w	r1, r4, #14
 8005fd8:	4628      	mov	r0, r5
 8005fda:	f001 fb41 	bl	8007660 <pbuf_header>
 8005fde:	b3a8      	cbz	r0, 800604c <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8005fe0:	8929      	ldrh	r1, [r5, #8]
 8005fe2:	4421      	add	r1, r4
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	b289      	uxth	r1, r1
 8005fe8:	2002      	movs	r0, #2
 8005fea:	f001 fbaf 	bl	800774c <pbuf_alloc>
      if (r == NULL) {
 8005fee:	4680      	mov	r8, r0
 8005ff0:	b130      	cbz	r0, 8006000 <icmp_input+0x7c>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8005ff2:	8942      	ldrh	r2, [r0, #10]
 8005ff4:	f104 0308 	add.w	r3, r4, #8
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d205      	bcs.n	8006008 <icmp_input+0x84>
        pbuf_free(r);
 8005ffc:	f001 fb3a 	bl	8007674 <pbuf_free>
  pbuf_free(p);
 8006000:	4628      	mov	r0, r5
 8006002:	f001 fb37 	bl	8007674 <pbuf_free>
  return;
 8006006:	e7e2      	b.n	8005fce <icmp_input+0x4a>
      MEMCPY(r->payload, iphdr_in, hlen);
 8006008:	4622      	mov	r2, r4
 800600a:	4631      	mov	r1, r6
 800600c:	6840      	ldr	r0, [r0, #4]
 800600e:	f006 fe24 	bl	800cc5a <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8006012:	4261      	negs	r1, r4
 8006014:	4640      	mov	r0, r8
 8006016:	f001 fb23 	bl	8007660 <pbuf_header>
 800601a:	b148      	cbz	r0, 8006030 <icmp_input+0xac>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800601c:	4b24      	ldr	r3, [pc, #144]	; (80060b0 <icmp_input+0x12c>)
 800601e:	22af      	movs	r2, #175	; 0xaf
 8006020:	4924      	ldr	r1, [pc, #144]	; (80060b4 <icmp_input+0x130>)
 8006022:	4825      	ldr	r0, [pc, #148]	; (80060b8 <icmp_input+0x134>)
 8006024:	f006 fbf5 	bl	800c812 <iprintf>
        pbuf_free(r);
 8006028:	4640      	mov	r0, r8
 800602a:	f001 fb23 	bl	8007674 <pbuf_free>
        goto icmperr;
 800602e:	e7e7      	b.n	8006000 <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
 8006030:	4629      	mov	r1, r5
 8006032:	4640      	mov	r0, r8
 8006034:	f001 fd44 	bl	8007ac0 <pbuf_copy>
 8006038:	b118      	cbz	r0, 8006042 <icmp_input+0xbe>
        pbuf_free(r);
 800603a:	4640      	mov	r0, r8
 800603c:	f001 fb1a 	bl	8007674 <pbuf_free>
        goto icmperr;
 8006040:	e7de      	b.n	8006000 <icmp_input+0x7c>
      pbuf_free(p);
 8006042:	4628      	mov	r0, r5
 8006044:	f001 fb16 	bl	8007674 <pbuf_free>
      p = r;
 8006048:	4645      	mov	r5, r8
 800604a:	e007      	b.n	800605c <icmp_input+0xd8>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800604c:	f5c4 417f 	rsb	r1, r4, #65280	; 0xff00
 8006050:	31f2      	adds	r1, #242	; 0xf2
 8006052:	b209      	sxth	r1, r1
 8006054:	4628      	mov	r0, r5
 8006056:	f001 fb03 	bl	8007660 <pbuf_header>
 800605a:	b948      	cbnz	r0, 8006070 <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 800605c:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f001 fafd 	bl	8007660 <pbuf_header>
 8006066:	b150      	cbz	r0, 800607e <icmp_input+0xfa>
  pbuf_free(p);
 8006068:	4628      	mov	r0, r5
 800606a:	f001 fb03 	bl	8007674 <pbuf_free>
  return;
 800606e:	e7ae      	b.n	8005fce <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8006070:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <icmp_input+0x12c>)
 8006072:	22c0      	movs	r2, #192	; 0xc0
 8006074:	4911      	ldr	r1, [pc, #68]	; (80060bc <icmp_input+0x138>)
 8006076:	4810      	ldr	r0, [pc, #64]	; (80060b8 <icmp_input+0x134>)
 8006078:	f006 fbcb 	bl	800c812 <iprintf>
        goto icmperr;
 800607c:	e7c0      	b.n	8006000 <icmp_input+0x7c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800607e:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 8006080:	490a      	ldr	r1, [pc, #40]	; (80060ac <icmp_input+0x128>)
 8006082:	694b      	ldr	r3, [r1, #20]
 8006084:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8006086:	690b      	ldr	r3, [r1, #16]
 8006088:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800608a:	2200      	movs	r2, #0
 800608c:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 800608e:	70b2      	strb	r2, [r6, #2]
 8006090:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8006092:	23ff      	movs	r3, #255	; 0xff
 8006094:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8006096:	7282      	strb	r2, [r0, #10]
 8006098:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800609a:	9702      	str	r7, [sp, #8]
 800609c:	2001      	movs	r0, #1
 800609e:	9001      	str	r0, [sp, #4]
 80060a0:	9200      	str	r2, [sp, #0]
 80060a2:	3114      	adds	r1, #20
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 f9bd 	bl	8006424 <ip4_output_if>
 80060aa:	e7dd      	b.n	8006068 <icmp_input+0xe4>
 80060ac:	20004274 	.word	0x20004274
 80060b0:	0800f58c 	.word	0x0800f58c
 80060b4:	0800f520 	.word	0x0800f520
 80060b8:	0800cd98 	.word	0x0800cd98
 80060bc:	0800f558 	.word	0x0800f558

080060c0 <icmp_dest_unreach>:
{
 80060c0:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 80060c2:	460a      	mov	r2, r1
 80060c4:	2103      	movs	r1, #3
 80060c6:	f7ff ff07 	bl	8005ed8 <icmp_send_response>
 80060ca:	bd08      	pop	{r3, pc}

080060cc <icmp_time_exceeded>:
{
 80060cc:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 80060ce:	460a      	mov	r2, r1
 80060d0:	210b      	movs	r1, #11
 80060d2:	f7ff ff01 	bl	8005ed8 <icmp_send_response>
 80060d6:	bd08      	pop	{r3, pc}

080060d8 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80060d8:	4b25      	ldr	r3, [pc, #148]	; (8006170 <ip4_route+0x98>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	e02b      	b.n	8006136 <ip4_route+0x5e>
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	b1ab      	cbz	r3, 800610e <ip4_route+0x36>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80060e2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80060e6:	f002 0105 	and.w	r1, r2, #5
 80060ea:	2905      	cmp	r1, #5
 80060ec:	d1f7      	bne.n	80060de <ip4_route+0x6>
 80060ee:	6859      	ldr	r1, [r3, #4]
 80060f0:	2900      	cmp	r1, #0
 80060f2:	d0f4      	beq.n	80060de <ip4_route+0x6>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80060f4:	6804      	ldr	r4, [r0, #0]
 80060f6:	689d      	ldr	r5, [r3, #8]
 80060f8:	4061      	eors	r1, r4
 80060fa:	4229      	tst	r1, r5
 80060fc:	d016      	beq.n	800612c <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80060fe:	f012 0f02 	tst.w	r2, #2
 8006102:	d1ec      	bne.n	80060de <ip4_route+0x6>
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	4294      	cmp	r4, r2
 8006108:	d1e9      	bne.n	80060de <ip4_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
 800610a:	4618      	mov	r0, r3
 800610c:	e00a      	b.n	8006124 <ip4_route+0x4c>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800610e:	4a19      	ldr	r2, [pc, #100]	; (8006174 <ip4_route+0x9c>)
 8006110:	6810      	ldr	r0, [r2, #0]
 8006112:	b138      	cbz	r0, 8006124 <ip4_route+0x4c>
 8006114:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8006118:	f002 0205 	and.w	r2, r2, #5
 800611c:	2a05      	cmp	r2, #5
 800611e:	d107      	bne.n	8006130 <ip4_route+0x58>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8006120:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006122:	b10a      	cbz	r2, 8006128 <ip4_route+0x50>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8006124:	bc30      	pop	{r4, r5}
 8006126:	4770      	bx	lr
    return NULL;
 8006128:	4618      	mov	r0, r3
 800612a:	e7fb      	b.n	8006124 <ip4_route+0x4c>
        return netif;
 800612c:	4618      	mov	r0, r3
 800612e:	e7f9      	b.n	8006124 <ip4_route+0x4c>
    return NULL;
 8006130:	4618      	mov	r0, r3
 8006132:	e7f7      	b.n	8006124 <ip4_route+0x4c>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	b153      	cbz	r3, 800614e <ip4_route+0x76>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006138:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800613c:	f002 0105 	and.w	r1, r2, #5
 8006140:	2905      	cmp	r1, #5
 8006142:	d1f7      	bne.n	8006134 <ip4_route+0x5c>
 8006144:	6859      	ldr	r1, [r3, #4]
 8006146:	2900      	cmp	r1, #0
 8006148:	d0f4      	beq.n	8006134 <ip4_route+0x5c>
{
 800614a:	b430      	push	{r4, r5}
 800614c:	e7d2      	b.n	80060f4 <ip4_route+0x1c>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800614e:	4a09      	ldr	r2, [pc, #36]	; (8006174 <ip4_route+0x9c>)
 8006150:	6810      	ldr	r0, [r2, #0]
 8006152:	2800      	cmp	r0, #0
 8006154:	d0e7      	beq.n	8006126 <ip4_route+0x4e>
 8006156:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 800615a:	f002 0205 	and.w	r2, r2, #5
 800615e:	2a05      	cmp	r2, #5
 8006160:	d104      	bne.n	800616c <ip4_route+0x94>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8006162:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006164:	2a00      	cmp	r2, #0
 8006166:	d1de      	bne.n	8006126 <ip4_route+0x4e>
    return NULL;
 8006168:	4618      	mov	r0, r3
 800616a:	4770      	bx	lr
 800616c:	4618      	mov	r0, r3
 800616e:	4770      	bx	lr
 8006170:	2000888c 	.word	0x2000888c
 8006174:	20008890 	.word	0x20008890

08006178 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8006178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800617c:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800617e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8006182:	f898 3000 	ldrb.w	r3, [r8]
 8006186:	091a      	lsrs	r2, r3, #4
 8006188:	2a04      	cmp	r2, #4
 800618a:	d004      	beq.n	8006196 <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800618c:	f001 fa72 	bl	8007674 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8006190:	2000      	movs	r0, #0
 8006192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006196:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
 8006198:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 800619c:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800619e:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80061a2:	f7ff f9f0 	bl	8005586 <lwip_htons>
 80061a6:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 80061a8:	892b      	ldrh	r3, [r5, #8]
 80061aa:	4298      	cmp	r0, r3
 80061ac:	d316      	bcc.n	80061dc <ip4_input+0x64>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80061ae:	896b      	ldrh	r3, [r5, #10]
 80061b0:	429e      	cmp	r6, r3
 80061b2:	d818      	bhi.n	80061e6 <ip4_input+0x6e>
 80061b4:	892b      	ldrh	r3, [r5, #8]
 80061b6:	429c      	cmp	r4, r3
 80061b8:	d815      	bhi.n	80061e6 <ip4_input+0x6e>
 80061ba:	2e13      	cmp	r6, #19
 80061bc:	d913      	bls.n	80061e6 <ip4_input+0x6e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80061be:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80061c2:	4a59      	ldr	r2, [pc, #356]	; (8006328 <ip4_input+0x1b0>)
 80061c4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80061c6:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80061ca:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80061cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061d0:	2be0      	cmp	r3, #224	; 0xe0
 80061d2:	d00c      	beq.n	80061ee <ip4_input+0x76>
 80061d4:	463c      	mov	r4, r7
 80061d6:	f04f 0901 	mov.w	r9, #1
 80061da:	e015      	b.n	8006208 <ip4_input+0x90>
    pbuf_realloc(p, iphdr_len);
 80061dc:	4601      	mov	r1, r0
 80061de:	4628      	mov	r0, r5
 80061e0:	f001 fb9c 	bl	800791c <pbuf_realloc>
 80061e4:	e7e3      	b.n	80061ae <ip4_input+0x36>
    pbuf_free(p);
 80061e6:	4628      	mov	r0, r5
 80061e8:	f001 fa44 	bl	8007674 <pbuf_free>
    return ERR_OK;
 80061ec:	e7d0      	b.n	8006190 <ip4_input+0x18>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80061ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061f2:	f013 0f01 	tst.w	r3, #1
 80061f6:	d024      	beq.n	8006242 <ip4_input+0xca>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	bb23      	cbnz	r3, 8006246 <ip4_input+0xce>
      netif = NULL;
 80061fc:	2400      	movs	r4, #0
 80061fe:	e025      	b.n	800624c <ip4_input+0xd4>
        netif = netif->next;
 8006200:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 8006202:	42bc      	cmp	r4, r7
 8006204:	d01b      	beq.n	800623e <ip4_input+0xc6>
    } while (netif != NULL);
 8006206:	b30c      	cbz	r4, 800624c <ip4_input+0xd4>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006208:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800620c:	f013 0f01 	tst.w	r3, #1
 8006210:	d009      	beq.n	8006226 <ip4_input+0xae>
 8006212:	6863      	ldr	r3, [r4, #4]
 8006214:	b13b      	cbz	r3, 8006226 <ip4_input+0xae>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006216:	4a44      	ldr	r2, [pc, #272]	; (8006328 <ip4_input+0x1b0>)
 8006218:	6950      	ldr	r0, [r2, #20]
 800621a:	4283      	cmp	r3, r0
 800621c:	d016      	beq.n	800624c <ip4_input+0xd4>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800621e:	4621      	mov	r1, r4
 8006220:	f000 f915 	bl	800644e <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006224:	b990      	cbnz	r0, 800624c <ip4_input+0xd4>
      if (first) {
 8006226:	f1b9 0f00 	cmp.w	r9, #0
 800622a:	d0e9      	beq.n	8006200 <ip4_input+0x88>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800622c:	4b3e      	ldr	r3, [pc, #248]	; (8006328 <ip4_input+0x1b0>)
 800622e:	7d1b      	ldrb	r3, [r3, #20]
 8006230:	2b7f      	cmp	r3, #127	; 0x7f
 8006232:	d00a      	beq.n	800624a <ip4_input+0xd2>
        netif = netif_list;
 8006234:	4b3d      	ldr	r3, [pc, #244]	; (800632c <ip4_input+0x1b4>)
 8006236:	681c      	ldr	r4, [r3, #0]
        first = 0;
 8006238:	f04f 0900 	mov.w	r9, #0
 800623c:	e7e1      	b.n	8006202 <ip4_input+0x8a>
        netif = netif->next;
 800623e:	6824      	ldr	r4, [r4, #0]
 8006240:	e7e1      	b.n	8006206 <ip4_input+0x8e>
      netif = NULL;
 8006242:	2400      	movs	r4, #0
 8006244:	e002      	b.n	800624c <ip4_input+0xd4>
      netif = inp;
 8006246:	463c      	mov	r4, r7
 8006248:	e000      	b.n	800624c <ip4_input+0xd4>
          netif = NULL;
 800624a:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800624c:	4639      	mov	r1, r7
 800624e:	4b36      	ldr	r3, [pc, #216]	; (8006328 <ip4_input+0x1b0>)
 8006250:	6918      	ldr	r0, [r3, #16]
 8006252:	f000 f8fc 	bl	800644e <ip4_addr_isbroadcast_u32>
 8006256:	2800      	cmp	r0, #0
 8006258:	d146      	bne.n	80062e8 <ip4_input+0x170>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800625a:	4b33      	ldr	r3, [pc, #204]	; (8006328 <ip4_input+0x1b0>)
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006262:	2be0      	cmp	r3, #224	; 0xe0
 8006264:	d040      	beq.n	80062e8 <ip4_input+0x170>
  if (netif == NULL) {
 8006266:	2c00      	cmp	r4, #0
 8006268:	d042      	beq.n	80062f0 <ip4_input+0x178>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800626a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800626e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006272:	b29b      	uxth	r3, r3
 8006274:	b13b      	cbz	r3, 8006286 <ip4_input+0x10e>
    p = ip4_reass(p);
 8006276:	4628      	mov	r0, r5
 8006278:	f000 fb94 	bl	80069a4 <ip4_reass>
    if (p == NULL) {
 800627c:	4605      	mov	r5, r0
 800627e:	2800      	cmp	r0, #0
 8006280:	d086      	beq.n	8006190 <ip4_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
 8006282:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 8006286:	4a28      	ldr	r2, [pc, #160]	; (8006328 <ip4_input+0x1b0>)
 8006288:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 800628a:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800628c:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8006290:	f898 3000 	ldrb.w	r3, [r8]
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800629c:	4271      	negs	r1, r6
 800629e:	4628      	mov	r0, r5
 80062a0:	f001 f9de 	bl	8007660 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 80062a4:	f898 3009 	ldrb.w	r3, [r8, #9]
 80062a8:	2b06      	cmp	r3, #6
 80062aa:	d032      	beq.n	8006312 <ip4_input+0x19a>
 80062ac:	2b11      	cmp	r3, #17
 80062ae:	d023      	beq.n	80062f8 <ip4_input+0x180>
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d033      	beq.n	800631c <ip4_input+0x1a4>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80062b4:	4621      	mov	r1, r4
 80062b6:	4b1c      	ldr	r3, [pc, #112]	; (8006328 <ip4_input+0x1b0>)
 80062b8:	6958      	ldr	r0, [r3, #20]
 80062ba:	f000 f8c8 	bl	800644e <ip4_addr_isbroadcast_u32>
 80062be:	b978      	cbnz	r0, 80062e0 <ip4_input+0x168>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80062c0:	4b19      	ldr	r3, [pc, #100]	; (8006328 <ip4_input+0x1b0>)
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80062c8:	2be0      	cmp	r3, #224	; 0xe0
 80062ca:	d009      	beq.n	80062e0 <ip4_input+0x168>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80062cc:	4631      	mov	r1, r6
 80062ce:	4628      	mov	r0, r5
 80062d0:	f001 f9cb 	bl	800766a <pbuf_header_force>
        p->payload = iphdr;
 80062d4:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80062d8:	2102      	movs	r1, #2
 80062da:	4628      	mov	r0, r5
 80062dc:	f7ff fef0 	bl	80060c0 <icmp_dest_unreach>
      pbuf_free(p);
 80062e0:	4628      	mov	r0, r5
 80062e2:	f001 f9c7 	bl	8007674 <pbuf_free>
 80062e6:	e00b      	b.n	8006300 <ip4_input+0x188>
      pbuf_free(p);
 80062e8:	4628      	mov	r0, r5
 80062ea:	f001 f9c3 	bl	8007674 <pbuf_free>
      return ERR_OK;
 80062ee:	e74f      	b.n	8006190 <ip4_input+0x18>
    pbuf_free(p);
 80062f0:	4628      	mov	r0, r5
 80062f2:	f001 f9bf 	bl	8007674 <pbuf_free>
    return ERR_OK;
 80062f6:	e74b      	b.n	8006190 <ip4_input+0x18>
      udp_input(p, inp);
 80062f8:	4639      	mov	r1, r7
 80062fa:	4628      	mov	r0, r5
 80062fc:	f005 fa64 	bl	800b7c8 <udp_input>
  ip_data.current_netif = NULL;
 8006300:	4b09      	ldr	r3, [pc, #36]	; (8006328 <ip4_input+0x1b0>)
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8006306:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8006308:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800630a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800630c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800630e:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 8006310:	e73e      	b.n	8006190 <ip4_input+0x18>
      tcp_input(p, inp);
 8006312:	4639      	mov	r1, r7
 8006314:	4628      	mov	r0, r5
 8006316:	f003 fe35 	bl	8009f84 <tcp_input>
      break;
 800631a:	e7f1      	b.n	8006300 <ip4_input+0x188>
      icmp_input(p, inp);
 800631c:	4639      	mov	r1, r7
 800631e:	4628      	mov	r0, r5
 8006320:	f7ff fe30 	bl	8005f84 <icmp_input>
      break;
 8006324:	e7ec      	b.n	8006300 <ip4_input+0x188>
 8006326:	bf00      	nop
 8006328:	20004274 	.word	0x20004274
 800632c:	2000888c 	.word	0x2000888c

08006330 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8006330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006334:	b083      	sub	sp, #12
 8006336:	4605      	mov	r5, r0
 8006338:	4689      	mov	r9, r1
 800633a:	4616      	mov	r6, r2
 800633c:	4698      	mov	r8, r3
 800633e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8006340:	89c3      	ldrh	r3, [r0, #14]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d006      	beq.n	8006354 <ip4_output_if_src+0x24>
 8006346:	4b31      	ldr	r3, [pc, #196]	; (800640c <ip4_output_if_src+0xdc>)
 8006348:	f240 3233 	movw	r2, #819	; 0x333
 800634c:	4930      	ldr	r1, [pc, #192]	; (8006410 <ip4_output_if_src+0xe0>)
 800634e:	4831      	ldr	r0, [pc, #196]	; (8006414 <ip4_output_if_src+0xe4>)
 8006350:	f006 fa5f 	bl	800c812 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8006354:	2e00      	cmp	r6, #0
 8006356:	d04a      	beq.n	80063ee <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8006358:	2114      	movs	r1, #20
 800635a:	4628      	mov	r0, r5
 800635c:	f001 f980 	bl	8007660 <pbuf_header>
 8006360:	2800      	cmp	r0, #0
 8006362:	d150      	bne.n	8006406 <ip4_output_if_src+0xd6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 8006364:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006366:	896b      	ldrh	r3, [r5, #10]
 8006368:	2b13      	cmp	r3, #19
 800636a:	d934      	bls.n	80063d6 <ip4_output_if_src+0xa6>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800636c:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006370:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8006374:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8006376:	6833      	ldr	r3, [r6, #0]
 8006378:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800637a:	2345      	movs	r3, #69	; 0x45
 800637c:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800637e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8006382:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006384:	8928      	ldrh	r0, [r5, #8]
 8006386:	f7ff f8fe 	bl	8005586 <lwip_htons>
 800638a:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800638c:	2300      	movs	r3, #0
 800638e:	71a3      	strb	r3, [r4, #6]
 8006390:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006392:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8006420 <ip4_output_if_src+0xf0>
 8006396:	f8b8 0000 	ldrh.w	r0, [r8]
 800639a:	f7ff f8f4 	bl	8005586 <lwip_htons>
 800639e:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80063a0:	f8b8 3000 	ldrh.w	r3, [r8]
 80063a4:	3301      	adds	r3, #1
 80063a6:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 80063aa:	f1b9 0f00 	cmp.w	r9, #0
 80063ae:	d01a      	beq.n	80063e6 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80063b0:	f8d9 3000 	ldr.w	r3, [r9]
 80063b4:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80063b6:	2300      	movs	r3, #0
 80063b8:	72a3      	strb	r3, [r4, #10]
 80063ba:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80063bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063be:	b113      	cbz	r3, 80063c6 <ip4_output_if_src+0x96>
 80063c0:	892a      	ldrh	r2, [r5, #8]
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d319      	bcc.n	80063fa <ip4_output_if_src+0xca>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	4632      	mov	r2, r6
 80063ca:	4629      	mov	r1, r5
 80063cc:	4638      	mov	r0, r7
 80063ce:	4798      	blx	r3
}
 80063d0:	b003      	add	sp, #12
 80063d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <ip4_output_if_src+0xdc>)
 80063d8:	f240 3261 	movw	r2, #865	; 0x361
 80063dc:	490e      	ldr	r1, [pc, #56]	; (8006418 <ip4_output_if_src+0xe8>)
 80063de:	480d      	ldr	r0, [pc, #52]	; (8006414 <ip4_output_if_src+0xe4>)
 80063e0:	f006 fa17 	bl	800c812 <iprintf>
 80063e4:	e7c2      	b.n	800636c <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80063e6:	4b0d      	ldr	r3, [pc, #52]	; (800641c <ip4_output_if_src+0xec>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60e3      	str	r3, [r4, #12]
 80063ec:	e7e3      	b.n	80063b6 <ip4_output_if_src+0x86>
    iphdr = (struct ip_hdr *)p->payload;
 80063ee:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	ae02      	add	r6, sp, #8
 80063f4:	f846 3d04 	str.w	r3, [r6, #-4]!
 80063f8:	e7e0      	b.n	80063bc <ip4_output_if_src+0x8c>
    return ip4_frag(p, netif, dest);
 80063fa:	4632      	mov	r2, r6
 80063fc:	4639      	mov	r1, r7
 80063fe:	4628      	mov	r0, r5
 8006400:	f000 fba4 	bl	8006b4c <ip4_frag>
 8006404:	e7e4      	b.n	80063d0 <ip4_output_if_src+0xa0>
      return ERR_BUF;
 8006406:	f06f 0001 	mvn.w	r0, #1
 800640a:	e7e1      	b.n	80063d0 <ip4_output_if_src+0xa0>
 800640c:	0800f5f0 	.word	0x0800f5f0
 8006410:	0800f624 	.word	0x0800f624
 8006414:	0800cd98 	.word	0x0800cd98
 8006418:	0800f630 	.word	0x0800f630
 800641c:	0800f660 	.word	0x0800f660
 8006420:	20003e7a 	.word	0x20003e7a

08006424 <ip4_output_if>:
{
 8006424:	b530      	push	{r4, r5, lr}
 8006426:	b085      	sub	sp, #20
 8006428:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 800642a:	4615      	mov	r5, r2
 800642c:	b11a      	cbz	r2, 8006436 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800642e:	b109      	cbz	r1, 8006434 <ip4_output_if+0x10>
 8006430:	680a      	ldr	r2, [r1, #0]
 8006432:	b902      	cbnz	r2, 8006436 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 8006434:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8006436:	9402      	str	r4, [sp, #8]
 8006438:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800643c:	9201      	str	r2, [sp, #4]
 800643e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8006442:	9200      	str	r2, [sp, #0]
 8006444:	462a      	mov	r2, r5
 8006446:	f7ff ff73 	bl	8006330 <ip4_output_if_src>
}
 800644a:	b005      	add	sp, #20
 800644c:	bd30      	pop	{r4, r5, pc}

0800644e <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800644e:	1e43      	subs	r3, r0, #1
 8006450:	f113 0f03 	cmn.w	r3, #3
 8006454:	d811      	bhi.n	800647a <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8006456:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 800645a:	f013 0f02 	tst.w	r3, #2
 800645e:	d00e      	beq.n	800647e <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8006460:	684b      	ldr	r3, [r1, #4]
 8006462:	4298      	cmp	r0, r3
 8006464:	d00d      	beq.n	8006482 <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8006466:	688a      	ldr	r2, [r1, #8]
 8006468:	4043      	eors	r3, r0
 800646a:	4213      	tst	r3, r2
 800646c:	d10b      	bne.n	8006486 <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800646e:	43d2      	mvns	r2, r2
 8006470:	ea32 0300 	bics.w	r3, r2, r0
 8006474:	d009      	beq.n	800648a <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8006476:	2000      	movs	r0, #0
 8006478:	4770      	bx	lr
    return 1;
 800647a:	2001      	movs	r0, #1
 800647c:	4770      	bx	lr
    return 0;
 800647e:	2000      	movs	r0, #0
 8006480:	4770      	bx	lr
    return 0;
 8006482:	2000      	movs	r0, #0
 8006484:	4770      	bx	lr
    return 0;
 8006486:	2000      	movs	r0, #0
 8006488:	4770      	bx	lr
    return 1;
 800648a:	2001      	movs	r0, #1
  }
}
 800648c:	4770      	bx	lr
	...

08006490 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8006490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006494:	b083      	sub	sp, #12
 8006496:	4689      	mov	r9, r1
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8006498:	6803      	ldr	r3, [r0, #0]
 800649a:	f10d 0e08 	add.w	lr, sp, #8
 800649e:	f84e 3d04 	str.w	r3, [lr, #-4]!

  rp = buf;
 80064a2:	460f      	mov	r7, r1
  int len = 0;
 80064a4:	2600      	movs	r6, #0
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
 80064a6:	4630      	mov	r0, r6
 80064a8:	2803      	cmp	r0, #3
 80064aa:	d838      	bhi.n	800651e <ip4addr_ntoa_r+0x8e>
 80064ac:	2500      	movs	r5, #0
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 80064ae:	f89e 4000 	ldrb.w	r4, [lr]
 80064b2:	4b20      	ldr	r3, [pc, #128]	; (8006534 <ip4addr_ntoa_r+0xa4>)
 80064b4:	fba3 1304 	umull	r1, r3, r3, r4
 80064b8:	08db      	lsrs	r3, r3, #3
 80064ba:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 80064be:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 80064c2:	eba4 040c 	sub.w	r4, r4, ip
 80064c6:	b2e4      	uxtb	r4, r4
      *ap /= (u8_t)10;
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	f88e 3000 	strb.w	r3, [lr]
      inv[i++] = (char)('0' + rem);
 80064ce:	f105 0c01 	add.w	ip, r5, #1
 80064d2:	fa5f f18c 	uxtb.w	r1, ip
 80064d6:	3430      	adds	r4, #48	; 0x30
 80064d8:	f10d 0c08 	add.w	ip, sp, #8
 80064dc:	4465      	add	r5, ip
 80064de:	f805 4c08 	strb.w	r4, [r5, #-8]
 80064e2:	460d      	mov	r5, r1
    } while (*ap);
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e2      	bne.n	80064ae <ip4addr_ntoa_r+0x1e>
    while (i--) {
 80064e8:	1e4b      	subs	r3, r1, #1
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	b159      	cbz	r1, 8006506 <ip4addr_ntoa_r+0x76>
      if (len++ >= buflen) {
 80064ee:	1c74      	adds	r4, r6, #1
 80064f0:	4296      	cmp	r6, r2
 80064f2:	da19      	bge.n	8006528 <ip4addr_ntoa_r+0x98>
        return NULL;
      }
      *rp++ = inv[i];
 80064f4:	a902      	add	r1, sp, #8
 80064f6:	18cd      	adds	r5, r1, r3
 80064f8:	f815 5c08 	ldrb.w	r5, [r5, #-8]
 80064fc:	703d      	strb	r5, [r7, #0]
      if (len++ >= buflen) {
 80064fe:	4626      	mov	r6, r4
    while (i--) {
 8006500:	4619      	mov	r1, r3
      *rp++ = inv[i];
 8006502:	3701      	adds	r7, #1
 8006504:	e7f0      	b.n	80064e8 <ip4addr_ntoa_r+0x58>
    }
    if (len++ >= buflen) {
 8006506:	1c73      	adds	r3, r6, #1
 8006508:	4296      	cmp	r6, r2
 800650a:	da11      	bge.n	8006530 <ip4addr_ntoa_r+0xa0>
      return NULL;
    }
    *rp++ = '.';
 800650c:	242e      	movs	r4, #46	; 0x2e
 800650e:	703c      	strb	r4, [r7, #0]
    ap++;
 8006510:	f10e 0e01 	add.w	lr, lr, #1
  for (n = 0; n < 4; n++) {
 8006514:	3001      	adds	r0, #1
 8006516:	b2c0      	uxtb	r0, r0
    if (len++ >= buflen) {
 8006518:	461e      	mov	r6, r3
    *rp++ = '.';
 800651a:	3701      	adds	r7, #1
 800651c:	e7c4      	b.n	80064a8 <ip4addr_ntoa_r+0x18>
  }
  *--rp = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	f807 3c01 	strb.w	r3, [r7, #-1]
  return buf;
 8006524:	4648      	mov	r0, r9
 8006526:	e000      	b.n	800652a <ip4addr_ntoa_r+0x9a>
        return NULL;
 8006528:	2000      	movs	r0, #0
}
 800652a:	b003      	add	sp, #12
 800652c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 8006530:	2000      	movs	r0, #0
 8006532:	e7fa      	b.n	800652a <ip4addr_ntoa_r+0x9a>
 8006534:	cccccccd 	.word	0xcccccccd

08006538 <ip4addr_ntoa>:
{
 8006538:	b508      	push	{r3, lr}
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800653a:	2210      	movs	r2, #16
 800653c:	4901      	ldr	r1, [pc, #4]	; (8006544 <ip4addr_ntoa+0xc>)
 800653e:	f7ff ffa7 	bl	8006490 <ip4addr_ntoa_r>
}
 8006542:	bd08      	pop	{r3, pc}
 8006544:	20003e7c 	.word	0x20003e7c

08006548 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800654c:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <ip_reass_dequeue_datagram+0x38>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4283      	cmp	r3, r0
 8006552:	d008      	beq.n	8006566 <ip_reass_dequeue_datagram+0x1e>
 8006554:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8006556:	b151      	cbz	r1, 800656e <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800655c:	4621      	mov	r1, r4
 800655e:	2004      	movs	r0, #4
 8006560:	f000 feb2 	bl	80072c8 <memp_free>
 8006564:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 8006566:	6802      	ldr	r2, [r0, #0]
 8006568:	4b05      	ldr	r3, [pc, #20]	; (8006580 <ip_reass_dequeue_datagram+0x38>)
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	e7f6      	b.n	800655c <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <ip_reass_dequeue_datagram+0x3c>)
 8006570:	f240 1245 	movw	r2, #325	; 0x145
 8006574:	4904      	ldr	r1, [pc, #16]	; (8006588 <ip_reass_dequeue_datagram+0x40>)
 8006576:	4805      	ldr	r0, [pc, #20]	; (800658c <ip_reass_dequeue_datagram+0x44>)
 8006578:	f006 f94b 	bl	800c812 <iprintf>
 800657c:	e7ec      	b.n	8006558 <ip_reass_dequeue_datagram+0x10>
 800657e:	bf00      	nop
 8006580:	20003e90 	.word	0x20003e90
 8006584:	0800f754 	.word	0x0800f754
 8006588:	0800f790 	.word	0x0800f790
 800658c:	0800cd98 	.word	0x0800cd98

08006590 <ip_reass_free_complete_datagram>:
{
 8006590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006594:	4680      	mov	r8, r0
 8006596:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8006598:	4281      	cmp	r1, r0
 800659a:	d015      	beq.n	80065c8 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 800659c:	f1b9 0f00 	cmp.w	r9, #0
 80065a0:	d009      	beq.n	80065b6 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80065a2:	f8d9 3000 	ldr.w	r3, [r9]
 80065a6:	4598      	cmp	r8, r3
 80065a8:	d005      	beq.n	80065b6 <ip_reass_free_complete_datagram+0x26>
 80065aa:	4b35      	ldr	r3, [pc, #212]	; (8006680 <ip_reass_free_complete_datagram+0xf0>)
 80065ac:	22ad      	movs	r2, #173	; 0xad
 80065ae:	4935      	ldr	r1, [pc, #212]	; (8006684 <ip_reass_free_complete_datagram+0xf4>)
 80065b0:	4835      	ldr	r0, [pc, #212]	; (8006688 <ip_reass_free_complete_datagram+0xf8>)
 80065b2:	f006 f92e 	bl	800c812 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80065b6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80065ba:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 80065bc:	889a      	ldrh	r2, [r3, #4]
 80065be:	b152      	cbz	r2, 80065d6 <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 80065c0:	2600      	movs	r6, #0
  p = ipr->p;
 80065c2:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 80065c6:	e032      	b.n	800662e <ip_reass_free_complete_datagram+0x9e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80065c8:	4b2d      	ldr	r3, [pc, #180]	; (8006680 <ip_reass_free_complete_datagram+0xf0>)
 80065ca:	22ab      	movs	r2, #171	; 0xab
 80065cc:	492f      	ldr	r1, [pc, #188]	; (800668c <ip_reass_free_complete_datagram+0xfc>)
 80065ce:	482e      	ldr	r0, [pc, #184]	; (8006688 <ip_reass_free_complete_datagram+0xf8>)
 80065d0:	f006 f91f 	bl	800c812 <iprintf>
 80065d4:	e7e2      	b.n	800659c <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80065dc:	4643      	mov	r3, r8
 80065de:	6862      	ldr	r2, [r4, #4]
 80065e0:	f853 1f08 	ldr.w	r1, [r3, #8]!
 80065e4:	685e      	ldr	r6, [r3, #4]
 80065e6:	689d      	ldr	r5, [r3, #8]
 80065e8:	68d8      	ldr	r0, [r3, #12]
 80065ea:	6011      	str	r1, [r2, #0]
 80065ec:	6056      	str	r6, [r2, #4]
 80065ee:	6095      	str	r5, [r2, #8]
 80065f0:	60d0      	str	r0, [r2, #12]
 80065f2:	6919      	ldr	r1, [r3, #16]
 80065f4:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80065f6:	2101      	movs	r1, #1
 80065f8:	4620      	mov	r0, r4
 80065fa:	f7ff fd67 	bl	80060cc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80065fe:	4620      	mov	r0, r4
 8006600:	f001 f9fe 	bl	8007a00 <pbuf_clen>
 8006604:	4606      	mov	r6, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006606:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800660a:	da03      	bge.n	8006614 <ip_reass_free_complete_datagram+0x84>
    pbuf_free(p);
 800660c:	4620      	mov	r0, r4
 800660e:	f001 f831 	bl	8007674 <pbuf_free>
 8006612:	e7d6      	b.n	80065c2 <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006614:	4b1a      	ldr	r3, [pc, #104]	; (8006680 <ip_reass_free_complete_datagram+0xf0>)
 8006616:	22bc      	movs	r2, #188	; 0xbc
 8006618:	491d      	ldr	r1, [pc, #116]	; (8006690 <ip_reass_free_complete_datagram+0x100>)
 800661a:	481b      	ldr	r0, [pc, #108]	; (8006688 <ip_reass_free_complete_datagram+0xf8>)
 800661c:	f006 f8f9 	bl	800c812 <iprintf>
 8006620:	e7f4      	b.n	800660c <ip_reass_free_complete_datagram+0x7c>
    pbufs_freed += clen;
 8006622:	4435      	add	r5, r6
 8006624:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 8006626:	4620      	mov	r0, r4
 8006628:	f001 f824 	bl	8007674 <pbuf_free>
    p = iprh->next_pbuf;
 800662c:	463c      	mov	r4, r7
  while (p != NULL) {
 800662e:	b184      	cbz	r4, 8006652 <ip_reass_free_complete_datagram+0xc2>
    iprh = (struct ip_reass_helper *)p->payload;
 8006630:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 8006632:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 8006634:	4620      	mov	r0, r4
 8006636:	f001 f9e3 	bl	8007a00 <pbuf_clen>
 800663a:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800663c:	1833      	adds	r3, r6, r0
 800663e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006642:	dbee      	blt.n	8006622 <ip_reass_free_complete_datagram+0x92>
 8006644:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <ip_reass_free_complete_datagram+0xf0>)
 8006646:	22cc      	movs	r2, #204	; 0xcc
 8006648:	4911      	ldr	r1, [pc, #68]	; (8006690 <ip_reass_free_complete_datagram+0x100>)
 800664a:	480f      	ldr	r0, [pc, #60]	; (8006688 <ip_reass_free_complete_datagram+0xf8>)
 800664c:	f006 f8e1 	bl	800c812 <iprintf>
 8006650:	e7e7      	b.n	8006622 <ip_reass_free_complete_datagram+0x92>
  ip_reass_dequeue_datagram(ipr, prev);
 8006652:	4649      	mov	r1, r9
 8006654:	4640      	mov	r0, r8
 8006656:	f7ff ff77 	bl	8006548 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800665a:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <ip_reass_free_complete_datagram+0x104>)
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	429e      	cmp	r6, r3
 8006660:	d806      	bhi.n	8006670 <ip_reass_free_complete_datagram+0xe0>
  ip_reass_pbufcount -= pbufs_freed;
 8006662:	4a0c      	ldr	r2, [pc, #48]	; (8006694 <ip_reass_free_complete_datagram+0x104>)
 8006664:	8813      	ldrh	r3, [r2, #0]
 8006666:	1b9b      	subs	r3, r3, r6
 8006668:	8013      	strh	r3, [r2, #0]
}
 800666a:	4630      	mov	r0, r6
 800666c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8006670:	4b03      	ldr	r3, [pc, #12]	; (8006680 <ip_reass_free_complete_datagram+0xf0>)
 8006672:	22d2      	movs	r2, #210	; 0xd2
 8006674:	4908      	ldr	r1, [pc, #32]	; (8006698 <ip_reass_free_complete_datagram+0x108>)
 8006676:	4804      	ldr	r0, [pc, #16]	; (8006688 <ip_reass_free_complete_datagram+0xf8>)
 8006678:	f006 f8cb 	bl	800c812 <iprintf>
 800667c:	e7f1      	b.n	8006662 <ip_reass_free_complete_datagram+0xd2>
 800667e:	bf00      	nop
 8006680:	0800f754 	.word	0x0800f754
 8006684:	0800f7b8 	.word	0x0800f7b8
 8006688:	0800cd98 	.word	0x0800cd98
 800668c:	0800f7ac 	.word	0x0800f7ac
 8006690:	0800f7cc 	.word	0x0800f7cc
 8006694:	20003e8c 	.word	0x20003e8c
 8006698:	0800f7ec 	.word	0x0800f7ec

0800669c <ip_reass_remove_oldest_datagram>:
{
 800669c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a0:	4605      	mov	r5, r0
 80066a2:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 80066a4:	2600      	movs	r6, #0
 80066a6:	e02a      	b.n	80066fe <ip_reass_remove_oldest_datagram+0x62>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80066ae:	4562      	cmp	r2, ip
 80066b0:	d110      	bne.n	80066d4 <ip_reass_remove_oldest_datagram+0x38>
 80066b2:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 80066b6:	88aa      	ldrh	r2, [r5, #4]
 80066b8:	4594      	cmp	ip, r2
 80066ba:	d10b      	bne.n	80066d4 <ip_reass_remove_oldest_datagram+0x38>
 80066bc:	e001      	b.n	80066c2 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 80066be:	4671      	mov	r1, lr
          oldest = r;
 80066c0:	4618      	mov	r0, r3
      if (r->next != NULL) {
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	b18a      	cbz	r2, 80066ea <ip_reass_remove_oldest_datagram+0x4e>
 80066c6:	469e      	mov	lr, r3
 80066c8:	4613      	mov	r3, r2
    while (r != NULL) {
 80066ca:	b183      	cbz	r3, 80066ee <ip_reass_remove_oldest_datagram+0x52>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80066cc:	68ea      	ldr	r2, [r5, #12]
 80066ce:	695f      	ldr	r7, [r3, #20]
 80066d0:	4297      	cmp	r7, r2
 80066d2:	d0e9      	beq.n	80066a8 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 80066d4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d0f1      	beq.n	80066be <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 80066da:	f893 c01f 	ldrb.w	ip, [r3, #31]
 80066de:	7fc2      	ldrb	r2, [r0, #31]
 80066e0:	4594      	cmp	ip, r2
 80066e2:	d8ee      	bhi.n	80066c2 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 80066e4:	4671      	mov	r1, lr
          oldest = r;
 80066e6:	4618      	mov	r0, r3
 80066e8:	e7eb      	b.n	80066c2 <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 80066ea:	4673      	mov	r3, lr
 80066ec:	e7eb      	b.n	80066c6 <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 80066ee:	b110      	cbz	r0, 80066f6 <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80066f0:	f7ff ff4e 	bl	8006590 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80066f4:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80066f6:	4546      	cmp	r6, r8
 80066f8:	da08      	bge.n	800670c <ip_reass_remove_oldest_datagram+0x70>
 80066fa:	2c01      	cmp	r4, #1
 80066fc:	dd06      	ble.n	800670c <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 80066fe:	4b05      	ldr	r3, [pc, #20]	; (8006714 <ip_reass_remove_oldest_datagram+0x78>)
 8006700:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 8006702:	2400      	movs	r4, #0
    oldest_prev = NULL;
 8006704:	4621      	mov	r1, r4
    prev = NULL;
 8006706:	46a6      	mov	lr, r4
    oldest = NULL;
 8006708:	4620      	mov	r0, r4
    while (r != NULL) {
 800670a:	e7de      	b.n	80066ca <ip_reass_remove_oldest_datagram+0x2e>
}
 800670c:	4630      	mov	r0, r6
 800670e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006712:	bf00      	nop
 8006714:	20003e90 	.word	0x20003e90

08006718 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8006718:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800671a:	4604      	mov	r4, r0
 800671c:	b120      	cbz	r0, 8006728 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800671e:	4621      	mov	r1, r4
 8006720:	2005      	movs	r0, #5
 8006722:	f000 fdd1 	bl	80072c8 <memp_free>
 8006726:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8006728:	4b03      	ldr	r3, [pc, #12]	; (8006738 <ip_frag_free_pbuf_custom_ref+0x20>)
 800672a:	f240 22ae 	movw	r2, #686	; 0x2ae
 800672e:	4903      	ldr	r1, [pc, #12]	; (800673c <ip_frag_free_pbuf_custom_ref+0x24>)
 8006730:	4803      	ldr	r0, [pc, #12]	; (8006740 <ip_frag_free_pbuf_custom_ref+0x28>)
 8006732:	f006 f86e 	bl	800c812 <iprintf>
 8006736:	e7f2      	b.n	800671e <ip_frag_free_pbuf_custom_ref+0x6>
 8006738:	0800f754 	.word	0x0800f754
 800673c:	0800d08c 	.word	0x0800d08c
 8006740:	0800cd98 	.word	0x0800cd98

08006744 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8006744:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8006746:	4604      	mov	r4, r0
 8006748:	b138      	cbz	r0, 800675a <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800674a:	6960      	ldr	r0, [r4, #20]
 800674c:	b108      	cbz	r0, 8006752 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800674e:	f000 ff91 	bl	8007674 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8006752:	4620      	mov	r0, r4
 8006754:	f7ff ffe0 	bl	8006718 <ip_frag_free_pbuf_custom_ref>
 8006758:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800675a:	4b04      	ldr	r3, [pc, #16]	; (800676c <ipfrag_free_pbuf_custom+0x28>)
 800675c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8006760:	4903      	ldr	r1, [pc, #12]	; (8006770 <ipfrag_free_pbuf_custom+0x2c>)
 8006762:	4804      	ldr	r0, [pc, #16]	; (8006774 <ipfrag_free_pbuf_custom+0x30>)
 8006764:	f006 f855 	bl	800c812 <iprintf>
 8006768:	e7ef      	b.n	800674a <ipfrag_free_pbuf_custom+0x6>
 800676a:	bf00      	nop
 800676c:	0800f754 	.word	0x0800f754
 8006770:	0800f808 	.word	0x0800f808
 8006774:	0800cd98 	.word	0x0800cd98

08006778 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 8006778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800677c:	4680      	mov	r8, r0
 800677e:	460f      	mov	r7, r1
 8006780:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 8006782:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8006784:	8860      	ldrh	r0, [r4, #2]
 8006786:	f7fe fefe 	bl	8005586 <lwip_htons>
 800678a:	7826      	ldrb	r6, [r4, #0]
 800678c:	f006 060f 	and.w	r6, r6, #15
 8006790:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 8006794:	b2b6      	uxth	r6, r6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006796:	88e0      	ldrh	r0, [r4, #6]
 8006798:	f7fe fef5 	bl	8005586 <lwip_htons>
 800679c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80067a0:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 80067a2:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 80067a4:	2400      	movs	r4, #0
 80067a6:	702c      	strb	r4, [r5, #0]
 80067a8:	706c      	strb	r4, [r5, #1]
 80067aa:	70ac      	strb	r4, [r5, #2]
 80067ac:	70ec      	strb	r4, [r5, #3]
  iprh->start = offset;
 80067ae:	80a8      	strh	r0, [r5, #4]
  iprh->end = offset + len;
 80067b0:	eb06 0e00 	add.w	lr, r6, r0
 80067b4:	fa1f fe8e 	uxth.w	lr, lr
 80067b8:	f8a5 e006 	strh.w	lr, [r5, #6]
  for (q = ipr->p; q != NULL;) {
 80067bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
  int valid = 1;
 80067c0:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 80067c2:	e033      	b.n	800682c <ip_reass_chain_frag_into_datagram_and_validate+0xb4>
      iprh->next_pbuf = q;
 80067c4:	6029      	str	r1, [r5, #0]
      if (iprh_prev != NULL) {
 80067c6:	b34c      	cbz	r4, 800681c <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80067c8:	88e2      	ldrh	r2, [r4, #6]
 80067ca:	4290      	cmp	r0, r2
 80067cc:	d37e      	bcc.n	80068cc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
 80067ce:	889b      	ldrh	r3, [r3, #4]
 80067d0:	459e      	cmp	lr, r3
 80067d2:	d87b      	bhi.n	80068cc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        iprh_prev->next_pbuf = new_p;
 80067d4:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 80067d6:	88ab      	ldrh	r3, [r5, #4]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d000      	beq.n	80067de <ip_reass_chain_frag_into_datagram_and_validate+0x66>
          valid = 0;
 80067dc:	2600      	movs	r6, #0
  if (q == NULL) {
 80067de:	2900      	cmp	r1, #0
 80067e0:	d036      	beq.n	8006850 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80067e2:	f1b9 0f00 	cmp.w	r9, #0
 80067e6:	d104      	bne.n	80067f2 <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
 80067e8:	f898 301e 	ldrb.w	r3, [r8, #30]
 80067ec:	f013 0f01 	tst.w	r3, #1
 80067f0:	d07a      	beq.n	80068e8 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
    if (valid) {
 80067f2:	2e00      	cmp	r6, #0
 80067f4:	d067      	beq.n	80068c6 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80067f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d060      	beq.n	80068c0 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 80067fe:	6858      	ldr	r0, [r3, #4]
 8006800:	8883      	ldrh	r3, [r0, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d15e      	bne.n	80068c4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        q = iprh->next_pbuf;
 8006806:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 8006808:	2a00      	cmp	r2, #0
 800680a:	d044      	beq.n	8006896 <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
          iprh = (struct ip_reass_helper*)q->payload;
 800680c:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 800680e:	88e9      	ldrh	r1, [r5, #6]
 8006810:	889a      	ldrh	r2, [r3, #4]
 8006812:	4291      	cmp	r1, r2
 8006814:	d13d      	bne.n	8006892 <ip_reass_chain_frag_into_datagram_and_validate+0x11a>
          q = iprh->next_pbuf;
 8006816:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 8006818:	461d      	mov	r5, r3
 800681a:	e7f5      	b.n	8006808 <ip_reass_chain_frag_into_datagram_and_validate+0x90>
        if (iprh->end > iprh_tmp->start) {
 800681c:	889b      	ldrh	r3, [r3, #4]
 800681e:	459e      	cmp	lr, r3
 8006820:	d854      	bhi.n	80068cc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        ipr->p = new_p;
 8006822:	f8c8 7004 	str.w	r7, [r8, #4]
 8006826:	e7da      	b.n	80067de <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    q = iprh_tmp->next_pbuf;
 8006828:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 800682a:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 800682c:	2900      	cmp	r1, #0
 800682e:	d0d6      	beq.n	80067de <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8006830:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8006832:	889a      	ldrh	r2, [r3, #4]
 8006834:	4290      	cmp	r0, r2
 8006836:	d3c5      	bcc.n	80067c4 <ip_reass_chain_frag_into_datagram_and_validate+0x4c>
    } else if (iprh->start == iprh_tmp->start) {
 8006838:	4290      	cmp	r0, r2
 800683a:	d047      	beq.n	80068cc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start < iprh_tmp->end) {
 800683c:	88d9      	ldrh	r1, [r3, #6]
 800683e:	4288      	cmp	r0, r1
 8006840:	d344      	bcc.n	80068cc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      if (iprh_prev != NULL) {
 8006842:	2c00      	cmp	r4, #0
 8006844:	d0f0      	beq.n	8006828 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
        if (iprh_prev->end != iprh_tmp->start) {
 8006846:	88e1      	ldrh	r1, [r4, #6]
 8006848:	428a      	cmp	r2, r1
 800684a:	d0ed      	beq.n	8006828 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
          valid = 0;
 800684c:	2600      	movs	r6, #0
 800684e:	e7eb      	b.n	8006828 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
    if (iprh_prev != NULL) {
 8006850:	b194      	cbz	r4, 8006878 <ip_reass_chain_frag_into_datagram_and_validate+0x100>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006852:	88e2      	ldrh	r2, [r4, #6]
 8006854:	88ab      	ldrh	r3, [r5, #4]
 8006856:	429a      	cmp	r2, r3
 8006858:	d806      	bhi.n	8006868 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
      iprh_prev->next_pbuf = new_p;
 800685a:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 800685c:	88e2      	ldrh	r2, [r4, #6]
 800685e:	88ab      	ldrh	r3, [r5, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d0be      	beq.n	80067e2 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
        valid = 0;
 8006864:	2600      	movs	r6, #0
 8006866:	e7bc      	b.n	80067e2 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006868:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 800686a:	f240 12ab 	movw	r2, #427	; 0x1ab
 800686e:	4921      	ldr	r1, [pc, #132]	; (80068f4 <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 8006870:	4821      	ldr	r0, [pc, #132]	; (80068f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8006872:	f005 ffce 	bl	800c812 <iprintf>
 8006876:	e7f0      	b.n	800685a <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8006878:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800687c:	b133      	cbz	r3, 800688c <ip_reass_chain_frag_into_datagram_and_validate+0x114>
 800687e:	4b1c      	ldr	r3, [pc, #112]	; (80068f0 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8006880:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8006884:	491d      	ldr	r1, [pc, #116]	; (80068fc <ip_reass_chain_frag_into_datagram_and_validate+0x184>)
 8006886:	481c      	ldr	r0, [pc, #112]	; (80068f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8006888:	f005 ffc3 	bl	800c812 <iprintf>
      ipr->p = new_p;
 800688c:	f8c8 7004 	str.w	r7, [r8, #4]
 8006890:	e7a7      	b.n	80067e2 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
          iprh = (struct ip_reass_helper*)q->payload;
 8006892:	461d      	mov	r5, r3
            valid = 0;
 8006894:	2600      	movs	r6, #0
        if (valid) {
 8006896:	b1b6      	cbz	r6, 80068c6 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8006898:	4285      	cmp	r5, r0
 800689a:	d009      	beq.n	80068b0 <ip_reass_chain_frag_into_datagram_and_validate+0x138>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	b193      	cbz	r3, 80068c6 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 80068a0:	4b13      	ldr	r3, [pc, #76]	; (80068f0 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 80068a2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80068a6:	4916      	ldr	r1, [pc, #88]	; (8006900 <ip_reass_chain_frag_into_datagram_and_validate+0x188>)
 80068a8:	4813      	ldr	r0, [pc, #76]	; (80068f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 80068aa:	f005 ffb2 	bl	800c812 <iprintf>
 80068ae:	e00a      	b.n	80068c6 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 80068b0:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 80068b2:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80068b6:	4913      	ldr	r1, [pc, #76]	; (8006904 <ip_reass_chain_frag_into_datagram_and_validate+0x18c>)
 80068b8:	480f      	ldr	r0, [pc, #60]	; (80068f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 80068ba:	f005 ffaa 	bl	800c812 <iprintf>
 80068be:	e7ed      	b.n	800689c <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        valid = 0;
 80068c0:	2600      	movs	r6, #0
 80068c2:	e000      	b.n	80068c6 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 80068c4:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80068c6:	4630      	mov	r0, r6
 80068c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80068cc:	4638      	mov	r0, r7
 80068ce:	f001 f897 	bl	8007a00 <pbuf_clen>
 80068d2:	4a0d      	ldr	r2, [pc, #52]	; (8006908 <ip_reass_chain_frag_into_datagram_and_validate+0x190>)
 80068d4:	8813      	ldrh	r3, [r2, #0]
 80068d6:	1a18      	subs	r0, r3, r0
 80068d8:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 80068da:	4638      	mov	r0, r7
 80068dc:	f000 feca 	bl	8007674 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295
 80068e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80068e8:	4648      	mov	r0, r9
}
 80068ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ee:	bf00      	nop
 80068f0:	0800f754 	.word	0x0800f754
 80068f4:	0800f6c8 	.word	0x0800f6c8
 80068f8:	0800cd98 	.word	0x0800cd98
 80068fc:	0800f6e8 	.word	0x0800f6e8
 8006900:	0800f730 	.word	0x0800f730
 8006904:	0800f720 	.word	0x0800f720
 8006908:	20003e8c 	.word	0x20003e8c

0800690c <ip_frag_alloc_pbuf_custom_ref>:
{
 800690c:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800690e:	2005      	movs	r0, #5
 8006910:	f000 fcc0 	bl	8007294 <memp_malloc>
}
 8006914:	bd08      	pop	{r3, pc}
	...

08006918 <ip_reass_enqueue_new_datagram>:
{
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	4605      	mov	r5, r0
 800691c:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800691e:	2004      	movs	r0, #4
 8006920:	f000 fcb8 	bl	8007294 <memp_malloc>
  if (ipr == NULL) {
 8006924:	4604      	mov	r4, r0
 8006926:	b1b0      	cbz	r0, 8006956 <ip_reass_enqueue_new_datagram+0x3e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8006928:	2220      	movs	r2, #32
 800692a:	2100      	movs	r1, #0
 800692c:	4620      	mov	r0, r4
 800692e:	f006 f99f 	bl	800cc70 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8006932:	2303      	movs	r3, #3
 8006934:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8006936:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <ip_reass_enqueue_new_datagram+0x5c>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800693c:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800693e:	682a      	ldr	r2, [r5, #0]
 8006940:	686e      	ldr	r6, [r5, #4]
 8006942:	68a8      	ldr	r0, [r5, #8]
 8006944:	68e9      	ldr	r1, [r5, #12]
 8006946:	60a2      	str	r2, [r4, #8]
 8006948:	60e6      	str	r6, [r4, #12]
 800694a:	6120      	str	r0, [r4, #16]
 800694c:	6161      	str	r1, [r4, #20]
 800694e:	692a      	ldr	r2, [r5, #16]
 8006950:	61a2      	str	r2, [r4, #24]
}
 8006952:	4620      	mov	r0, r4
 8006954:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	f7ff fe9f 	bl	800669c <ip_reass_remove_oldest_datagram>
 800695e:	4286      	cmp	r6, r0
 8006960:	dd02      	ble.n	8006968 <ip_reass_enqueue_new_datagram+0x50>
    if (ipr == NULL)
 8006962:	2c00      	cmp	r4, #0
 8006964:	d1e0      	bne.n	8006928 <ip_reass_enqueue_new_datagram+0x10>
 8006966:	e7f4      	b.n	8006952 <ip_reass_enqueue_new_datagram+0x3a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8006968:	2004      	movs	r0, #4
 800696a:	f000 fc93 	bl	8007294 <memp_malloc>
 800696e:	4604      	mov	r4, r0
 8006970:	e7f7      	b.n	8006962 <ip_reass_enqueue_new_datagram+0x4a>
 8006972:	bf00      	nop
 8006974:	20003e90 	.word	0x20003e90

08006978 <ip_reass_tmr>:
{
 8006978:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800697a:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <ip_reass_tmr+0x28>)
 800697c:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800697e:	2400      	movs	r4, #0
  while (r != NULL) {
 8006980:	e004      	b.n	800698c <ip_reass_tmr+0x14>
      r = r->next;
 8006982:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8006984:	4621      	mov	r1, r4
 8006986:	f7ff fe03 	bl	8006590 <ip_reass_free_complete_datagram>
      r = r->next;
 800698a:	4628      	mov	r0, r5
  while (r != NULL) {
 800698c:	b138      	cbz	r0, 800699e <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 800698e:	7fc3      	ldrb	r3, [r0, #31]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f6      	beq.n	8006982 <ip_reass_tmr+0xa>
      r->timer--;
 8006994:	3b01      	subs	r3, #1
 8006996:	77c3      	strb	r3, [r0, #31]
      prev = r;
 8006998:	4604      	mov	r4, r0
      r = r->next;
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	e7f6      	b.n	800698c <ip_reass_tmr+0x14>
}
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	20003e90 	.word	0x20003e90

080069a4 <ip4_reass>:
{
 80069a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a8:	4681      	mov	r9, r0
  fraghdr = (struct ip_hdr*)p->payload;
 80069aa:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80069ac:	782b      	ldrb	r3, [r5, #0]
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	2b05      	cmp	r3, #5
 80069b4:	d124      	bne.n	8006a00 <ip4_reass+0x5c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80069b6:	88e8      	ldrh	r0, [r5, #6]
 80069b8:	f7fe fde5 	bl	8005586 <lwip_htons>
 80069bc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80069c0:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80069c2:	8868      	ldrh	r0, [r5, #2]
 80069c4:	f7fe fddf 	bl	8005586 <lwip_htons>
 80069c8:	782e      	ldrb	r6, [r5, #0]
 80069ca:	f006 060f 	and.w	r6, r6, #15
 80069ce:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 80069d2:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 80069d4:	4648      	mov	r0, r9
 80069d6:	f001 f813 	bl	8007a00 <pbuf_clen>
 80069da:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80069dc:	4b59      	ldr	r3, [pc, #356]	; (8006b44 <ip4_reass+0x1a0>)
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	4403      	add	r3, r0
 80069e2:	2b0a      	cmp	r3, #10
 80069e4:	dc02      	bgt.n	80069ec <ip4_reass+0x48>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80069e6:	4b58      	ldr	r3, [pc, #352]	; (8006b48 <ip4_reass+0x1a4>)
 80069e8:	681c      	ldr	r4, [r3, #0]
 80069ea:	e011      	b.n	8006a10 <ip4_reass+0x6c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80069ec:	4601      	mov	r1, r0
 80069ee:	4628      	mov	r0, r5
 80069f0:	f7ff fe54 	bl	800669c <ip_reass_remove_oldest_datagram>
 80069f4:	b120      	cbz	r0, 8006a00 <ip4_reass+0x5c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80069f6:	4b53      	ldr	r3, [pc, #332]	; (8006b44 <ip4_reass+0x1a0>)
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80069fc:	2b0a      	cmp	r3, #10
 80069fe:	ddf2      	ble.n	80069e6 <ip4_reass+0x42>
  pbuf_free(p);
 8006a00:	4648      	mov	r0, r9
 8006a02:	f000 fe37 	bl	8007674 <pbuf_free>
  return NULL;
 8006a06:	2700      	movs	r7, #0
}
 8006a08:	4638      	mov	r0, r7
 8006a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006a0e:	6824      	ldr	r4, [r4, #0]
 8006a10:	b15c      	cbz	r4, 8006a2a <ip4_reass+0x86>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8006a12:	6962      	ldr	r2, [r4, #20]
 8006a14:	68eb      	ldr	r3, [r5, #12]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d1f9      	bne.n	8006a0e <ip4_reass+0x6a>
 8006a1a:	69a2      	ldr	r2, [r4, #24]
 8006a1c:	692b      	ldr	r3, [r5, #16]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d1f5      	bne.n	8006a0e <ip4_reass+0x6a>
 8006a22:	89a2      	ldrh	r2, [r4, #12]
 8006a24:	88ab      	ldrh	r3, [r5, #4]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d1f1      	bne.n	8006a0e <ip4_reass+0x6a>
  if (ipr == NULL) {
 8006a2a:	2c00      	cmp	r4, #0
 8006a2c:	d048      	beq.n	8006ac0 <ip4_reass+0x11c>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006a2e:	88e8      	ldrh	r0, [r5, #6]
 8006a30:	f7fe fda9 	bl	8005586 <lwip_htons>
 8006a34:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d049      	beq.n	8006ad0 <ip4_reass+0x12c>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8006a3c:	88ed      	ldrh	r5, [r5, #6]
 8006a3e:	f005 0520 	and.w	r5, r5, #32
 8006a42:	2d00      	cmp	r5, #0
 8006a44:	bf0c      	ite	eq
 8006a46:	2201      	moveq	r2, #1
 8006a48:	2200      	movne	r2, #0
  if (is_last) {
 8006a4a:	d107      	bne.n	8006a5c <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8006a4c:	19bb      	adds	r3, r7, r6
 8006a4e:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8006a50:	429f      	cmp	r7, r3
 8006a52:	d8d5      	bhi.n	8006a00 <ip4_reass+0x5c>
 8006a54:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 8006a58:	428b      	cmp	r3, r1
 8006a5a:	d8d1      	bhi.n	8006a00 <ip4_reass+0x5c>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f7ff fe8a 	bl	8006778 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8006a64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006a68:	d0ca      	beq.n	8006a00 <ip4_reass+0x5c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8006a6a:	4b36      	ldr	r3, [pc, #216]	; (8006b44 <ip4_reass+0x1a0>)
 8006a6c:	881a      	ldrh	r2, [r3, #0]
 8006a6e:	4490      	add	r8, r2
 8006a70:	f8a3 8000 	strh.w	r8, [r3]
  if (is_last) {
 8006a74:	b92d      	cbnz	r5, 8006a82 <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 8006a76:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 8006a78:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006a7a:	7fa3      	ldrb	r3, [r4, #30]
 8006a7c:	f043 0301 	orr.w	r3, r3, #1
 8006a80:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006a82:	2801      	cmp	r0, #1
 8006a84:	d15b      	bne.n	8006b3e <ip4_reass+0x19a>
    ipr->datagram_len += IP_HLEN;
 8006a86:	8ba3      	ldrh	r3, [r4, #28]
 8006a88:	3314      	adds	r3, #20
 8006a8a:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8006a8c:	6863      	ldr	r3, [r4, #4]
 8006a8e:	685e      	ldr	r6, [r3, #4]
 8006a90:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006a92:	4623      	mov	r3, r4
 8006a94:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8006a98:	685f      	ldr	r7, [r3, #4]
 8006a9a:	6898      	ldr	r0, [r3, #8]
 8006a9c:	68d9      	ldr	r1, [r3, #12]
 8006a9e:	6032      	str	r2, [r6, #0]
 8006aa0:	6077      	str	r7, [r6, #4]
 8006aa2:	60b0      	str	r0, [r6, #8]
 8006aa4:	60f1      	str	r1, [r6, #12]
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8006aaa:	8ba0      	ldrh	r0, [r4, #28]
 8006aac:	f7fe fd6b 	bl	8005586 <lwip_htons>
 8006ab0:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	71b3      	strb	r3, [r6, #6]
 8006ab6:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006ab8:	72b3      	strb	r3, [r6, #10]
 8006aba:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8006abc:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8006abe:	e026      	b.n	8006b0e <ip4_reass+0x16a>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	f7ff ff28 	bl	8006918 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 8006ac8:	4604      	mov	r4, r0
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d1b6      	bne.n	8006a3c <ip4_reass+0x98>
 8006ace:	e797      	b.n	8006a00 <ip4_reass+0x5c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006ad0:	89e0      	ldrh	r0, [r4, #14]
 8006ad2:	f7fe fd58 	bl	8005586 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006ad6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d0ae      	beq.n	8006a3c <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006ade:	682a      	ldr	r2, [r5, #0]
 8006ae0:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8006ae4:	68a8      	ldr	r0, [r5, #8]
 8006ae6:	68e9      	ldr	r1, [r5, #12]
 8006ae8:	60a2      	str	r2, [r4, #8]
 8006aea:	f8c4 e00c 	str.w	lr, [r4, #12]
 8006aee:	6120      	str	r0, [r4, #16]
 8006af0:	6161      	str	r1, [r4, #20]
 8006af2:	692a      	ldr	r2, [r5, #16]
 8006af4:	61a2      	str	r2, [r4, #24]
 8006af6:	e7a1      	b.n	8006a3c <ip4_reass+0x98>
      iprh = (struct ip_reass_helper*)r->payload;
 8006af8:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 8006afa:	f06f 0113 	mvn.w	r1, #19
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 fdae 	bl	8007660 <pbuf_header>
      pbuf_cat(p, r);
 8006b04:	4629      	mov	r1, r5
 8006b06:	4638      	mov	r0, r7
 8006b08:	f000 ffa0 	bl	8007a4c <pbuf_cat>
      r = iprh->next_pbuf;
 8006b0c:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 8006b0e:	2d00      	cmp	r5, #0
 8006b10:	d1f2      	bne.n	8006af8 <ip4_reass+0x154>
    if (ipr == reassdatagrams) {
 8006b12:	4b0d      	ldr	r3, [pc, #52]	; (8006b48 <ip4_reass+0x1a4>)
 8006b14:	6819      	ldr	r1, [r3, #0]
 8006b16:	428c      	cmp	r4, r1
 8006b18:	d005      	beq.n	8006b26 <ip4_reass+0x182>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006b1a:	b129      	cbz	r1, 8006b28 <ip4_reass+0x184>
        if (ipr_prev->next == ipr) {
 8006b1c:	680b      	ldr	r3, [r1, #0]
 8006b1e:	429c      	cmp	r4, r3
 8006b20:	d002      	beq.n	8006b28 <ip4_reass+0x184>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006b22:	4619      	mov	r1, r3
 8006b24:	e7f9      	b.n	8006b1a <ip4_reass+0x176>
      ipr_prev = NULL;
 8006b26:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f7ff fd0d 	bl	8006548 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8006b2e:	4638      	mov	r0, r7
 8006b30:	f000 ff66 	bl	8007a00 <pbuf_clen>
 8006b34:	4a03      	ldr	r2, [pc, #12]	; (8006b44 <ip4_reass+0x1a0>)
 8006b36:	8813      	ldrh	r3, [r2, #0]
 8006b38:	1a18      	subs	r0, r3, r0
 8006b3a:	8010      	strh	r0, [r2, #0]
    return p;
 8006b3c:	e764      	b.n	8006a08 <ip4_reass+0x64>
  return NULL;
 8006b3e:	2700      	movs	r7, #0
 8006b40:	e762      	b.n	8006a08 <ip4_reass+0x64>
 8006b42:	bf00      	nop
 8006b44:	20003e8c 	.word	0x20003e8c
 8006b48:	20003e90 	.word	0x20003e90

08006b4c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b50:	b08d      	sub	sp, #52	; 0x34
 8006b52:	4605      	mov	r5, r0
 8006b54:	9107      	str	r1, [sp, #28]
 8006b56:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006b58:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8006b5a:	3b14      	subs	r3, #20
 8006b5c:	d420      	bmi.n	8006ba0 <ip4_frag+0x54>
 8006b5e:	10db      	asrs	r3, r3, #3
 8006b60:	9309      	str	r3, [sp, #36]	; 0x24
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8006b66:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	2b05      	cmp	r3, #5
 8006b74:	d116      	bne.n	8006ba4 <ip4_frag+0x58>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8006b76:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8006b7a:	f7fe fd04 	bl	8005586 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8006b7e:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8006b82:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006b84:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8006b88:	d116      	bne.n	8006bb8 <ip4_frag+0x6c>

  left = p->tot_len - IP_HLEN;
 8006b8a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8006b8e:	f1a9 0914 	sub.w	r9, r9, #20
 8006b92:	fa1f fb89 	uxth.w	fp, r9
  u16_t poff = IP_HLEN;
 8006b96:	f04f 0814 	mov.w	r8, #20
  u16_t newpbuflen = 0;
 8006b9a:	2400      	movs	r4, #0
 8006b9c:	46d9      	mov	r9, fp

  while (left) {
 8006b9e:	e08c      	b.n	8006cba <ip4_frag+0x16e>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006ba0:	3307      	adds	r3, #7
 8006ba2:	e7dc      	b.n	8006b5e <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006ba4:	4b5e      	ldr	r3, [pc, #376]	; (8006d20 <ip4_frag+0x1d4>)
 8006ba6:	f240 22e1 	movw	r2, #737	; 0x2e1
 8006baa:	495e      	ldr	r1, [pc, #376]	; (8006d24 <ip4_frag+0x1d8>)
 8006bac:	485e      	ldr	r0, [pc, #376]	; (8006d28 <ip4_frag+0x1dc>)
 8006bae:	f005 fe30 	bl	800c812 <iprintf>
 8006bb2:	f06f 0005 	mvn.w	r0, #5
 8006bb6:	e043      	b.n	8006c40 <ip4_frag+0xf4>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006bb8:	4b59      	ldr	r3, [pc, #356]	; (8006d20 <ip4_frag+0x1d4>)
 8006bba:	f240 22e6 	movw	r2, #742	; 0x2e6
 8006bbe:	495b      	ldr	r1, [pc, #364]	; (8006d2c <ip4_frag+0x1e0>)
 8006bc0:	4859      	ldr	r0, [pc, #356]	; (8006d28 <ip4_frag+0x1dc>)
 8006bc2:	f005 fe26 	bl	800c812 <iprintf>
 8006bc6:	f06f 0005 	mvn.w	r0, #5
 8006bca:	e039      	b.n	8006c40 <ip4_frag+0xf4>
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006bcc:	4b54      	ldr	r3, [pc, #336]	; (8006d20 <ip4_frag+0x1d4>)
 8006bce:	f240 3209 	movw	r2, #777	; 0x309
 8006bd2:	4957      	ldr	r1, [pc, #348]	; (8006d30 <ip4_frag+0x1e4>)
 8006bd4:	4854      	ldr	r0, [pc, #336]	; (8006d28 <ip4_frag+0x1dc>)
 8006bd6:	f005 fe1c 	bl	800c812 <iprintf>
 8006bda:	e086      	b.n	8006cea <ip4_frag+0x19e>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8006bdc:	f7ff fe96 	bl	800690c <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 8006be0:	4607      	mov	r7, r0
 8006be2:	b340      	cbz	r0, 8006c36 <ip4_frag+0xea>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 8006be4:	686b      	ldr	r3, [r5, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006be6:	4443      	add	r3, r8
 8006be8:	9401      	str	r4, [sp, #4]
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	4603      	mov	r3, r0
 8006bee:	2202      	movs	r2, #2
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	2004      	movs	r0, #4
 8006bf4:	f000 fcf8 	bl	80075e8 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8006bf8:	9003      	str	r0, [sp, #12]
 8006bfa:	b320      	cbz	r0, 8006c46 <ip4_frag+0xfa>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f000 ff09 	bl	8007a14 <pbuf_ref>
      pcr->original = p;
 8006c02:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006c04:	4b4b      	ldr	r3, [pc, #300]	; (8006d34 <ip4_frag+0x1e8>)
 8006c06:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8006c08:	9903      	ldr	r1, [sp, #12]
 8006c0a:	9804      	ldr	r0, [sp, #16]
 8006c0c:	f000 ff1e 	bl	8007a4c <pbuf_cat>
      left_to_copy -= newpbuflen;
 8006c10:	1b36      	subs	r6, r6, r4
 8006c12:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 8006c14:	b116      	cbz	r6, 8006c1c <ip4_frag+0xd0>
        poff = 0;
        p = p->next;
 8006c16:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8006c18:	f04f 0800 	mov.w	r8, #0
    while (left_to_copy) {
 8006c1c:	b1e6      	cbz	r6, 8006c58 <ip4_frag+0x10c>
      u16_t plen = p->len - poff;
 8006c1e:	896c      	ldrh	r4, [r5, #10]
 8006c20:	eba4 0408 	sub.w	r4, r4, r8
 8006c24:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8006c26:	42b4      	cmp	r4, r6
 8006c28:	bf28      	it	cs
 8006c2a:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 8006c2c:	2c00      	cmp	r4, #0
 8006c2e:	d1d5      	bne.n	8006bdc <ip4_frag+0x90>
        p = p->next;
 8006c30:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8006c32:	46a0      	mov	r8, r4
        continue;
 8006c34:	e7f2      	b.n	8006c1c <ip4_frag+0xd0>
        pbuf_free(rambuf);
 8006c36:	9804      	ldr	r0, [sp, #16]
 8006c38:	f000 fd1c 	bl	8007674 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006c40:	b00d      	add	sp, #52	; 0x34
 8006c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 8006c46:	4638      	mov	r0, r7
 8006c48:	f7ff fd66 	bl	8006718 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8006c4c:	9804      	ldr	r0, [sp, #16]
 8006c4e:	f000 fd11 	bl	8007674 <pbuf_free>
  return ERR_MEM;
 8006c52:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 8006c56:	e7f3      	b.n	8006c40 <ip4_frag+0xf4>
    poff += newpbuflen;
 8006c58:	44a0      	add	r8, r4
 8006c5a:	fa1f f888 	uxth.w	r8, r8
    last = (left <= netif->mtu - IP_HLEN);
 8006c5e:	9b07      	ldr	r3, [sp, #28]
 8006c60:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006c62:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 8006c64:	9a06      	ldr	r2, [sp, #24]
 8006c66:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 8006c6a:	9a08      	ldr	r2, [sp, #32]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	dd01      	ble.n	8006c74 <ip4_frag+0x128>
      tmp = tmp | IP_MF;
 8006c70:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8006c74:	f7fe fc87 	bl	8005586 <lwip_htons>
 8006c78:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8006c7c:	9e05      	ldr	r6, [sp, #20]
 8006c7e:	f106 0014 	add.w	r0, r6, #20
 8006c82:	b280      	uxth	r0, r0
 8006c84:	f7fe fc7f 	bl	8005586 <lwip_htons>
 8006c88:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f88b 300a 	strb.w	r3, [fp, #10]
 8006c92:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8006c96:	9807      	ldr	r0, [sp, #28]
 8006c98:	6943      	ldr	r3, [r0, #20]
 8006c9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c9c:	9f04      	ldr	r7, [sp, #16]
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	4798      	blx	r3
    pbuf_free(rambuf);
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	f000 fce6 	bl	8007674 <pbuf_free>
    left -= fragsize;
 8006ca8:	eba9 0306 	sub.w	r3, r9, r6
 8006cac:	fa1f f983 	uxth.w	r9, r3
    ofo += nfb;
 8006cb0:	9b06      	ldr	r3, [sp, #24]
 8006cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cb4:	4413      	add	r3, r2
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	9306      	str	r3, [sp, #24]
  while (left) {
 8006cba:	f1b9 0f00 	cmp.w	r9, #0
 8006cbe:	d029      	beq.n	8006d14 <ip4_frag+0x1c8>
    fragsize = LWIP_MIN(left, nfb * 8);
 8006cc0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	f8cd 9020 	str.w	r9, [sp, #32]
 8006cca:	454b      	cmp	r3, r9
 8006ccc:	bfa8      	it	ge
 8006cce:	464b      	movge	r3, r9
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2114      	movs	r1, #20
 8006cd8:	2002      	movs	r0, #2
 8006cda:	f000 fd37 	bl	800774c <pbuf_alloc>
    if (rambuf == NULL) {
 8006cde:	9004      	str	r0, [sp, #16]
 8006ce0:	b1d0      	cbz	r0, 8006d18 <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006ce2:	896b      	ldrh	r3, [r5, #10]
 8006ce4:	2b13      	cmp	r3, #19
 8006ce6:	f67f af71 	bls.w	8006bcc <ip4_frag+0x80>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8006cea:	9f04      	ldr	r7, [sp, #16]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8da 2000 	ldr.w	r2, [sl]
 8006cf2:	f8da 6004 	ldr.w	r6, [sl, #4]
 8006cf6:	f8da 0008 	ldr.w	r0, [sl, #8]
 8006cfa:	f8da 100c 	ldr.w	r1, [sl, #12]
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	605e      	str	r6, [r3, #4]
 8006d02:	6098      	str	r0, [r3, #8]
 8006d04:	60d9      	str	r1, [r3, #12]
 8006d06:	f8da 2010 	ldr.w	r2, [sl, #16]
 8006d0a:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006d0c:	f8d7 b004 	ldr.w	fp, [r7, #4]
    left_to_copy = fragsize;
 8006d10:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 8006d12:	e783      	b.n	8006c1c <ip4_frag+0xd0>
  return ERR_OK;
 8006d14:	2000      	movs	r0, #0
 8006d16:	e793      	b.n	8006c40 <ip4_frag+0xf4>
  return ERR_MEM;
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1c:	e790      	b.n	8006c40 <ip4_frag+0xf4>
 8006d1e:	bf00      	nop
 8006d20:	0800f754 	.word	0x0800f754
 8006d24:	0800f664 	.word	0x0800f664
 8006d28:	0800cd98 	.word	0x0800cd98
 8006d2c:	0800f68c 	.word	0x0800f68c
 8006d30:	0800f6a8 	.word	0x0800f6a8
 8006d34:	08006745 	.word	0x08006745

08006d38 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006d3c:	4b2d      	ldr	r3, [pc, #180]	; (8006df4 <plug_holes+0xbc>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4283      	cmp	r3, r0
 8006d42:	d831      	bhi.n	8006da8 <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006d44:	4b2c      	ldr	r3, [pc, #176]	; (8006df8 <plug_holes+0xc0>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	429c      	cmp	r4, r3
 8006d4a:	d235      	bcs.n	8006db8 <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006d4c:	7923      	ldrb	r3, [r4, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d13a      	bne.n	8006dc8 <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006d52:	8823      	ldrh	r3, [r4, #0]
 8006d54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006d58:	d83e      	bhi.n	8006dd8 <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8006d5a:	4b26      	ldr	r3, [pc, #152]	; (8006df4 <plug_holes+0xbc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	8821      	ldrh	r1, [r4, #0]
 8006d60:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006d62:	4294      	cmp	r4, r2
 8006d64:	d00f      	beq.n	8006d86 <plug_holes+0x4e>
 8006d66:	7910      	ldrb	r0, [r2, #4]
 8006d68:	b968      	cbnz	r0, 8006d86 <plug_holes+0x4e>
 8006d6a:	4823      	ldr	r0, [pc, #140]	; (8006df8 <plug_holes+0xc0>)
 8006d6c:	6800      	ldr	r0, [r0, #0]
 8006d6e:	4282      	cmp	r2, r0
 8006d70:	d009      	beq.n	8006d86 <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006d72:	4822      	ldr	r0, [pc, #136]	; (8006dfc <plug_holes+0xc4>)
 8006d74:	6800      	ldr	r0, [r0, #0]
 8006d76:	4282      	cmp	r2, r0
 8006d78:	d036      	beq.n	8006de8 <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 8006d7a:	5a5a      	ldrh	r2, [r3, r1]
 8006d7c:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006d7e:	5a5a      	ldrh	r2, [r3, r1]
 8006d80:	441a      	add	r2, r3
 8006d82:	1ae1      	subs	r1, r4, r3
 8006d84:	8051      	strh	r1, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006d86:	8861      	ldrh	r1, [r4, #2]
 8006d88:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8006d8a:	4294      	cmp	r4, r2
 8006d8c:	d00b      	beq.n	8006da6 <plug_holes+0x6e>
 8006d8e:	7910      	ldrb	r0, [r2, #4]
 8006d90:	b948      	cbnz	r0, 8006da6 <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006d92:	481a      	ldr	r0, [pc, #104]	; (8006dfc <plug_holes+0xc4>)
 8006d94:	6800      	ldr	r0, [r0, #0]
 8006d96:	4284      	cmp	r4, r0
 8006d98:	d029      	beq.n	8006dee <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 8006d9a:	8820      	ldrh	r0, [r4, #0]
 8006d9c:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8006d9e:	8821      	ldrh	r1, [r4, #0]
 8006da0:	4419      	add	r1, r3
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	804b      	strh	r3, [r1, #2]
 8006da6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006da8:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <plug_holes+0xc8>)
 8006daa:	f240 125d 	movw	r2, #349	; 0x15d
 8006dae:	4915      	ldr	r1, [pc, #84]	; (8006e04 <plug_holes+0xcc>)
 8006db0:	4815      	ldr	r0, [pc, #84]	; (8006e08 <plug_holes+0xd0>)
 8006db2:	f005 fd2e 	bl	800c812 <iprintf>
 8006db6:	e7c5      	b.n	8006d44 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006db8:	4b11      	ldr	r3, [pc, #68]	; (8006e00 <plug_holes+0xc8>)
 8006dba:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006dbe:	4913      	ldr	r1, [pc, #76]	; (8006e0c <plug_holes+0xd4>)
 8006dc0:	4811      	ldr	r0, [pc, #68]	; (8006e08 <plug_holes+0xd0>)
 8006dc2:	f005 fd26 	bl	800c812 <iprintf>
 8006dc6:	e7c1      	b.n	8006d4c <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006dc8:	4b0d      	ldr	r3, [pc, #52]	; (8006e00 <plug_holes+0xc8>)
 8006dca:	f240 125f 	movw	r2, #351	; 0x15f
 8006dce:	4910      	ldr	r1, [pc, #64]	; (8006e10 <plug_holes+0xd8>)
 8006dd0:	480d      	ldr	r0, [pc, #52]	; (8006e08 <plug_holes+0xd0>)
 8006dd2:	f005 fd1e 	bl	800c812 <iprintf>
 8006dd6:	e7bc      	b.n	8006d52 <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006dd8:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <plug_holes+0xc8>)
 8006dda:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006dde:	490d      	ldr	r1, [pc, #52]	; (8006e14 <plug_holes+0xdc>)
 8006de0:	4809      	ldr	r0, [pc, #36]	; (8006e08 <plug_holes+0xd0>)
 8006de2:	f005 fd16 	bl	800c812 <iprintf>
 8006de6:	e7b8      	b.n	8006d5a <plug_holes+0x22>
      lfree = mem;
 8006de8:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <plug_holes+0xc4>)
 8006dea:	6014      	str	r4, [r2, #0]
 8006dec:	e7c5      	b.n	8006d7a <plug_holes+0x42>
      lfree = pmem;
 8006dee:	4803      	ldr	r0, [pc, #12]	; (8006dfc <plug_holes+0xc4>)
 8006df0:	6002      	str	r2, [r0, #0]
 8006df2:	e7d2      	b.n	8006d9a <plug_holes+0x62>
 8006df4:	20003e9c 	.word	0x20003e9c
 8006df8:	20003ea0 	.word	0x20003ea0
 8006dfc:	20003e94 	.word	0x20003e94
 8006e00:	0800f958 	.word	0x0800f958
 8006e04:	0800f988 	.word	0x0800f988
 8006e08:	0800cd98 	.word	0x0800cd98
 8006e0c:	0800f9a0 	.word	0x0800f9a0
 8006e10:	0800f9bc 	.word	0x0800f9bc
 8006e14:	0800f9d8 	.word	0x0800f9d8

08006e18 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006e18:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006e1a:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <mem_init+0x48>)
 8006e1c:	f023 0303 	bic.w	r3, r3, #3
 8006e20:	4a10      	ldr	r2, [pc, #64]	; (8006e64 <mem_init+0x4c>)
 8006e22:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8006e24:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8006e28:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006e2e:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006e30:	185a      	adds	r2, r3, r1
 8006e32:	480d      	ldr	r0, [pc, #52]	; (8006e68 <mem_init+0x50>)
 8006e34:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 8006e36:	2001      	movs	r0, #1
 8006e38:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006e3a:	f8a3 1640 	strh.w	r1, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006e3e:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006e40:	4a0a      	ldr	r2, [pc, #40]	; (8006e6c <mem_init+0x54>)
 8006e42:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006e44:	480a      	ldr	r0, [pc, #40]	; (8006e70 <mem_init+0x58>)
 8006e46:	f004 ff4b 	bl	800bce0 <sys_mutex_new>
 8006e4a:	b900      	cbnz	r0, 8006e4e <mem_init+0x36>
 8006e4c:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006e4e:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <mem_init+0x5c>)
 8006e50:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006e54:	4908      	ldr	r1, [pc, #32]	; (8006e78 <mem_init+0x60>)
 8006e56:	4809      	ldr	r0, [pc, #36]	; (8006e7c <mem_init+0x64>)
 8006e58:	f005 fcdb 	bl	800c812 <iprintf>
  }
}
 8006e5c:	e7f6      	b.n	8006e4c <mem_init+0x34>
 8006e5e:	bf00      	nop
 8006e60:	2000428f 	.word	0x2000428f
 8006e64:	20003e9c 	.word	0x20003e9c
 8006e68:	20003ea0 	.word	0x20003ea0
 8006e6c:	20003e94 	.word	0x20003e94
 8006e70:	20003e98 	.word	0x20003e98
 8006e74:	0800f958 	.word	0x0800f958
 8006e78:	0800f864 	.word	0x0800f864
 8006e7c:	0800cd98 	.word	0x0800cd98

08006e80 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d048      	beq.n	8006f16 <mem_free+0x96>
{
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006e88:	f010 0f03 	tst.w	r0, #3
 8006e8c:	d11b      	bne.n	8006ec6 <mem_free+0x46>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006e8e:	4b22      	ldr	r3, [pc, #136]	; (8006f18 <mem_free+0x98>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	429c      	cmp	r4, r3
 8006e94:	d303      	bcc.n	8006e9e <mem_free+0x1e>
 8006e96:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <mem_free+0x9c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	429c      	cmp	r4, r3
 8006e9c:	d306      	bcc.n	8006eac <mem_free+0x2c>
 8006e9e:	4b20      	ldr	r3, [pc, #128]	; (8006f20 <mem_free+0xa0>)
 8006ea0:	f240 12af 	movw	r2, #431	; 0x1af
 8006ea4:	491f      	ldr	r1, [pc, #124]	; (8006f24 <mem_free+0xa4>)
 8006ea6:	4820      	ldr	r0, [pc, #128]	; (8006f28 <mem_free+0xa8>)
 8006ea8:	f005 fcb3 	bl	800c812 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006eac:	4b1a      	ldr	r3, [pc, #104]	; (8006f18 <mem_free+0x98>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	429c      	cmp	r4, r3
 8006eb2:	d303      	bcc.n	8006ebc <mem_free+0x3c>
 8006eb4:	4b19      	ldr	r3, [pc, #100]	; (8006f1c <mem_free+0x9c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	429c      	cmp	r4, r3
 8006eba:	d30c      	bcc.n	8006ed6 <mem_free+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8006ebc:	f004 ff40 	bl	800bd40 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8006ec0:	f004 ff4a 	bl	800bd58 <sys_arch_unprotect>
    return;
 8006ec4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006ec6:	4b16      	ldr	r3, [pc, #88]	; (8006f20 <mem_free+0xa0>)
 8006ec8:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8006ecc:	4917      	ldr	r1, [pc, #92]	; (8006f2c <mem_free+0xac>)
 8006ece:	4816      	ldr	r0, [pc, #88]	; (8006f28 <mem_free+0xa8>)
 8006ed0:	f005 fc9f 	bl	800c812 <iprintf>
 8006ed4:	e7db      	b.n	8006e8e <mem_free+0xe>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006ed6:	4816      	ldr	r0, [pc, #88]	; (8006f30 <mem_free+0xb0>)
 8006ed8:	f004 ff13 	bl	800bd02 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006edc:	f1a4 0508 	sub.w	r5, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006ee0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006ee4:	b17b      	cbz	r3, 8006f06 <mem_free+0x86>
  /* ... and is now unused. */
  mem->used = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8006eec:	4b11      	ldr	r3, [pc, #68]	; (8006f34 <mem_free+0xb4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	429d      	cmp	r5, r3
 8006ef2:	d201      	bcs.n	8006ef8 <mem_free+0x78>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006ef4:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <mem_free+0xb4>)
 8006ef6:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f7ff ff1d 	bl	8006d38 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006efe:	480c      	ldr	r0, [pc, #48]	; (8006f30 <mem_free+0xb0>)
 8006f00:	f004 ff06 	bl	800bd10 <sys_mutex_unlock>
 8006f04:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <mem_free+0xa0>)
 8006f08:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006f0c:	490a      	ldr	r1, [pc, #40]	; (8006f38 <mem_free+0xb8>)
 8006f0e:	4806      	ldr	r0, [pc, #24]	; (8006f28 <mem_free+0xa8>)
 8006f10:	f005 fc7f 	bl	800c812 <iprintf>
 8006f14:	e7e7      	b.n	8006ee6 <mem_free+0x66>
 8006f16:	4770      	bx	lr
 8006f18:	20003e9c 	.word	0x20003e9c
 8006f1c:	20003ea0 	.word	0x20003ea0
 8006f20:	0800f958 	.word	0x0800f958
 8006f24:	0800f838 	.word	0x0800f838
 8006f28:	0800cd98 	.word	0x0800cd98
 8006f2c:	0800f814 	.word	0x0800f814
 8006f30:	20003e98 	.word	0x20003e98
 8006f34:	20003e94 	.word	0x20003e94
 8006f38:	0800f850 	.word	0x0800f850

08006f3c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006f40:	1ccc      	adds	r4, r1, #3
 8006f42:	b2a4      	uxth	r4, r4
 8006f44:	f024 0403 	bic.w	r4, r4, #3
 8006f48:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 8006f4a:	2c0b      	cmp	r4, #11
 8006f4c:	d800      	bhi.n	8006f50 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006f4e:	240c      	movs	r4, #12
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8006f50:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8006f54:	d879      	bhi.n	800704a <mem_trim+0x10e>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006f56:	4b3f      	ldr	r3, [pc, #252]	; (8007054 <mem_trim+0x118>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	42ab      	cmp	r3, r5
 8006f5c:	d803      	bhi.n	8006f66 <mem_trim+0x2a>
 8006f5e:	4b3e      	ldr	r3, [pc, #248]	; (8007058 <mem_trim+0x11c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	429d      	cmp	r5, r3
 8006f64:	d306      	bcc.n	8006f74 <mem_trim+0x38>
 8006f66:	4b3d      	ldr	r3, [pc, #244]	; (800705c <mem_trim+0x120>)
 8006f68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006f6c:	493c      	ldr	r1, [pc, #240]	; (8007060 <mem_trim+0x124>)
 8006f6e:	483d      	ldr	r0, [pc, #244]	; (8007064 <mem_trim+0x128>)
 8006f70:	f005 fc4f 	bl	800c812 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006f74:	4b37      	ldr	r3, [pc, #220]	; (8007054 <mem_trim+0x118>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	429d      	cmp	r5, r3
 8006f7a:	d336      	bcc.n	8006fea <mem_trim+0xae>
 8006f7c:	4a36      	ldr	r2, [pc, #216]	; (8007058 <mem_trim+0x11c>)
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	4295      	cmp	r5, r2
 8006f82:	d232      	bcs.n	8006fea <mem_trim+0xae>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006f84:	f1a5 0708 	sub.w	r7, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006f88:	1aff      	subs	r7, r7, r3
 8006f8a:	b2bf      	uxth	r7, r7

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006f8c:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8006f90:	1bf6      	subs	r6, r6, r7
 8006f92:	b2b6      	uxth	r6, r6
 8006f94:	3e08      	subs	r6, #8
 8006f96:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006f98:	42b4      	cmp	r4, r6
 8006f9a:	d82c      	bhi.n	8006ff6 <mem_trim+0xba>
  if (newsize > size) {
 8006f9c:	42b4      	cmp	r4, r6
 8006f9e:	d856      	bhi.n	800704e <mem_trim+0x112>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8006fa0:	d027      	beq.n	8006ff2 <mem_trim+0xb6>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006fa2:	4831      	ldr	r0, [pc, #196]	; (8007068 <mem_trim+0x12c>)
 8006fa4:	f004 fead 	bl	800bd02 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8006fa8:	4b2a      	ldr	r3, [pc, #168]	; (8007054 <mem_trim+0x118>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8006fb0:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 8006fb2:	7908      	ldrb	r0, [r1, #4]
 8006fb4:	bb58      	cbnz	r0, 800700e <mem_trim+0xd2>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8006fb6:	5ad0      	ldrh	r0, [r2, r3]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006fb8:	19e3      	adds	r3, r4, r7
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8006fc0:	4c2a      	ldr	r4, [pc, #168]	; (800706c <mem_trim+0x130>)
 8006fc2:	6824      	ldr	r4, [r4, #0]
 8006fc4:	42a1      	cmp	r1, r4
 8006fc6:	d01e      	beq.n	8007006 <mem_trim+0xca>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006fc8:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 8006fca:	2400      	movs	r4, #0
 8006fcc:	710c      	strb	r4, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006fce:	52d0      	strh	r0, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
 8006fd0:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006fd2:	f825 3c08 	strh.w	r3, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006fd6:	5ad1      	ldrh	r1, [r2, r3]
 8006fd8:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8006fdc:	d001      	beq.n	8006fe2 <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006fde:	440a      	add	r2, r1
 8006fe0:	8053      	strh	r3, [r2, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006fe2:	4821      	ldr	r0, [pc, #132]	; (8007068 <mem_trim+0x12c>)
 8006fe4:	f004 fe94 	bl	800bd10 <sys_mutex_unlock>
  return rmem;
 8006fe8:	e003      	b.n	8006ff2 <mem_trim+0xb6>
    SYS_ARCH_PROTECT(lev);
 8006fea:	f004 fea9 	bl	800bd40 <sys_arch_protect>
    SYS_ARCH_UNPROTECT(lev);
 8006fee:	f004 feb3 	bl	800bd58 <sys_arch_unprotect>
}
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006ff6:	4b19      	ldr	r3, [pc, #100]	; (800705c <mem_trim+0x120>)
 8006ff8:	f240 2206 	movw	r2, #518	; 0x206
 8006ffc:	491c      	ldr	r1, [pc, #112]	; (8007070 <mem_trim+0x134>)
 8006ffe:	4819      	ldr	r0, [pc, #100]	; (8007064 <mem_trim+0x128>)
 8007000:	f005 fc07 	bl	800c812 <iprintf>
 8007004:	e7ca      	b.n	8006f9c <mem_trim+0x60>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8007006:	18d1      	adds	r1, r2, r3
 8007008:	4c18      	ldr	r4, [pc, #96]	; (800706c <mem_trim+0x130>)
 800700a:	6021      	str	r1, [r4, #0]
 800700c:	e7dc      	b.n	8006fc8 <mem_trim+0x8c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800700e:	f104 0314 	add.w	r3, r4, #20
 8007012:	42b3      	cmp	r3, r6
 8007014:	d8e5      	bhi.n	8006fe2 <mem_trim+0xa6>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007016:	19e3      	adds	r3, r4, r7
 8007018:	b29b      	uxth	r3, r3
 800701a:	3308      	adds	r3, #8
 800701c:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800701e:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 8007020:	4812      	ldr	r0, [pc, #72]	; (800706c <mem_trim+0x130>)
 8007022:	6800      	ldr	r0, [r0, #0]
 8007024:	4281      	cmp	r1, r0
 8007026:	d201      	bcs.n	800702c <mem_trim+0xf0>
      lfree = mem2;
 8007028:	4810      	ldr	r0, [pc, #64]	; (800706c <mem_trim+0x130>)
 800702a:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 800702c:	2000      	movs	r0, #0
 800702e:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8007030:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8007034:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 8007036:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 8007038:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800703c:	5ad1      	ldrh	r1, [r2, r3]
 800703e:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8007042:	d0ce      	beq.n	8006fe2 <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007044:	440a      	add	r2, r1
 8007046:	8053      	strh	r3, [r2, #2]
 8007048:	e7cb      	b.n	8006fe2 <mem_trim+0xa6>
    return NULL;
 800704a:	2500      	movs	r5, #0
 800704c:	e7d1      	b.n	8006ff2 <mem_trim+0xb6>
    return NULL;
 800704e:	2500      	movs	r5, #0
 8007050:	e7cf      	b.n	8006ff2 <mem_trim+0xb6>
 8007052:	bf00      	nop
 8007054:	20003e9c 	.word	0x20003e9c
 8007058:	20003ea0 	.word	0x20003ea0
 800705c:	0800f958 	.word	0x0800f958
 8007060:	0800f920 	.word	0x0800f920
 8007064:	0800cd98 	.word	0x0800cd98
 8007068:	20003e98 	.word	0x20003e98
 800706c:	20003e94 	.word	0x20003e94
 8007070:	0800f938 	.word	0x0800f938

08007074 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8007074:	2800      	cmp	r0, #0
 8007076:	f000 808e 	beq.w	8007196 <mem_malloc+0x122>
{
 800707a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707c:	4605      	mov	r5, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800707e:	3503      	adds	r5, #3
 8007080:	b2ad      	uxth	r5, r5
 8007082:	f025 0503 	bic.w	r5, r5, #3
 8007086:	b2ad      	uxth	r5, r5

  if (size < MIN_SIZE_ALIGNED) {
 8007088:	2d0b      	cmp	r5, #11
 800708a:	d800      	bhi.n	800708e <mem_malloc+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800708c:	250c      	movs	r5, #12
  }

  if (size > MEM_SIZE_ALIGNED) {
 800708e:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8007092:	f200 8082 	bhi.w	800719a <mem_malloc+0x126>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007096:	4842      	ldr	r0, [pc, #264]	; (80071a0 <mem_malloc+0x12c>)
 8007098:	f004 fe33 	bl	800bd02 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800709c:	4b41      	ldr	r3, [pc, #260]	; (80071a4 <mem_malloc+0x130>)
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	4b41      	ldr	r3, [pc, #260]	; (80071a8 <mem_malloc+0x134>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	1a1b      	subs	r3, r3, r0
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	e049      	b.n	800713e <mem_malloc+0xca>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80070aa:	2301      	movs	r3, #1
 80070ac:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80070ae:	4b3e      	ldr	r3, [pc, #248]	; (80071a8 <mem_malloc+0x134>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	429c      	cmp	r4, r3
 80070b4:	d014      	beq.n	80070e0 <mem_malloc+0x6c>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80070b6:	483a      	ldr	r0, [pc, #232]	; (80071a0 <mem_malloc+0x12c>)
 80070b8:	f004 fe2a 	bl	800bd10 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80070bc:	4426      	add	r6, r4
 80070be:	3608      	adds	r6, #8
 80070c0:	4b3a      	ldr	r3, [pc, #232]	; (80071ac <mem_malloc+0x138>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	429e      	cmp	r6, r3
 80070c6:	d821      	bhi.n	800710c <mem_malloc+0x98>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80070c8:	f014 0503 	ands.w	r5, r4, #3
 80070cc:	d126      	bne.n	800711c <mem_malloc+0xa8>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	d12c      	bne.n	800712c <mem_malloc+0xb8>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80070d2:	f104 0008 	add.w	r0, r4, #8
 80070d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cur = (struct mem *)(void *)&ram[cur->next];
 80070d8:	4a32      	ldr	r2, [pc, #200]	; (80071a4 <mem_malloc+0x130>)
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	4413      	add	r3, r2
          while (cur->used && cur != ram_end) {
 80070e0:	791a      	ldrb	r2, [r3, #4]
 80070e2:	b11a      	cbz	r2, 80070ec <mem_malloc+0x78>
 80070e4:	4931      	ldr	r1, [pc, #196]	; (80071ac <mem_malloc+0x138>)
 80070e6:	6809      	ldr	r1, [r1, #0]
 80070e8:	428b      	cmp	r3, r1
 80070ea:	d1f5      	bne.n	80070d8 <mem_malloc+0x64>
          lfree = cur;
 80070ec:	492e      	ldr	r1, [pc, #184]	; (80071a8 <mem_malloc+0x134>)
 80070ee:	600b      	str	r3, [r1, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80070f0:	492e      	ldr	r1, [pc, #184]	; (80071ac <mem_malloc+0x138>)
 80070f2:	6809      	ldr	r1, [r1, #0]
 80070f4:	428b      	cmp	r3, r1
 80070f6:	d0de      	beq.n	80070b6 <mem_malloc+0x42>
 80070f8:	2a00      	cmp	r2, #0
 80070fa:	d0dc      	beq.n	80070b6 <mem_malloc+0x42>
 80070fc:	4b2c      	ldr	r3, [pc, #176]	; (80071b0 <mem_malloc+0x13c>)
 80070fe:	f240 22cf 	movw	r2, #719	; 0x2cf
 8007102:	492c      	ldr	r1, [pc, #176]	; (80071b4 <mem_malloc+0x140>)
 8007104:	482c      	ldr	r0, [pc, #176]	; (80071b8 <mem_malloc+0x144>)
 8007106:	f005 fb84 	bl	800c812 <iprintf>
 800710a:	e7d4      	b.n	80070b6 <mem_malloc+0x42>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800710c:	4b28      	ldr	r3, [pc, #160]	; (80071b0 <mem_malloc+0x13c>)
 800710e:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8007112:	492a      	ldr	r1, [pc, #168]	; (80071bc <mem_malloc+0x148>)
 8007114:	4828      	ldr	r0, [pc, #160]	; (80071b8 <mem_malloc+0x144>)
 8007116:	f005 fb7c 	bl	800c812 <iprintf>
 800711a:	e7d5      	b.n	80070c8 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800711c:	4b24      	ldr	r3, [pc, #144]	; (80071b0 <mem_malloc+0x13c>)
 800711e:	f240 22d6 	movw	r2, #726	; 0x2d6
 8007122:	4927      	ldr	r1, [pc, #156]	; (80071c0 <mem_malloc+0x14c>)
 8007124:	4824      	ldr	r0, [pc, #144]	; (80071b8 <mem_malloc+0x144>)
 8007126:	f005 fb74 	bl	800c812 <iprintf>
 800712a:	e7d0      	b.n	80070ce <mem_malloc+0x5a>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800712c:	4b20      	ldr	r3, [pc, #128]	; (80071b0 <mem_malloc+0x13c>)
 800712e:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8007132:	4924      	ldr	r1, [pc, #144]	; (80071c4 <mem_malloc+0x150>)
 8007134:	4820      	ldr	r0, [pc, #128]	; (80071b8 <mem_malloc+0x144>)
 8007136:	f005 fb6c 	bl	800c812 <iprintf>
 800713a:	e7ca      	b.n	80070d2 <mem_malloc+0x5e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800713c:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800713e:	461f      	mov	r7, r3
 8007140:	462e      	mov	r6, r5
 8007142:	f5c5 61c8 	rsb	r1, r5, #1600	; 0x640
 8007146:	428b      	cmp	r3, r1
 8007148:	d220      	bcs.n	800718c <mem_malloc+0x118>
      mem = (struct mem *)(void *)&ram[ptr];
 800714a:	18c4      	adds	r4, r0, r3
      if ((!mem->used) &&
 800714c:	7921      	ldrb	r1, [r4, #4]
 800714e:	2900      	cmp	r1, #0
 8007150:	d1f4      	bne.n	800713c <mem_malloc+0xc8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007152:	5ac2      	ldrh	r2, [r0, r3]
 8007154:	1bd2      	subs	r2, r2, r7
 8007156:	3a08      	subs	r2, #8
      if ((!mem->used) &&
 8007158:	4296      	cmp	r6, r2
 800715a:	d8ef      	bhi.n	800713c <mem_malloc+0xc8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800715c:	f106 0114 	add.w	r1, r6, #20
 8007160:	428a      	cmp	r2, r1
 8007162:	d3a2      	bcc.n	80070aa <mem_malloc+0x36>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8007164:	18ea      	adds	r2, r5, r3
 8007166:	b292      	uxth	r2, r2
 8007168:	3208      	adds	r2, #8
 800716a:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800716c:	1881      	adds	r1, r0, r2
          mem2->used = 0;
 800716e:	2500      	movs	r5, #0
 8007170:	710d      	strb	r5, [r1, #4]
          mem2->next = mem->next;
 8007172:	8825      	ldrh	r5, [r4, #0]
 8007174:	5285      	strh	r5, [r0, r2]
          mem2->prev = ptr;
 8007176:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 8007178:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 800717a:	2301      	movs	r3, #1
 800717c:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800717e:	5a83      	ldrh	r3, [r0, r2]
 8007180:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007184:	d093      	beq.n	80070ae <mem_malloc+0x3a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007186:	4418      	add	r0, r3
 8007188:	8042      	strh	r2, [r0, #2]
 800718a:	e790      	b.n	80070ae <mem_malloc+0x3a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800718c:	4804      	ldr	r0, [pc, #16]	; (80071a0 <mem_malloc+0x12c>)
 800718e:	f004 fdbf 	bl	800bd10 <sys_mutex_unlock>
  return NULL;
 8007192:	2000      	movs	r0, #0
 8007194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8007196:	2000      	movs	r0, #0
 8007198:	4770      	bx	lr
    return NULL;
 800719a:	2000      	movs	r0, #0
}
 800719c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800719e:	bf00      	nop
 80071a0:	20003e98 	.word	0x20003e98
 80071a4:	20003e9c 	.word	0x20003e9c
 80071a8:	20003e94 	.word	0x20003e94
 80071ac:	20003ea0 	.word	0x20003ea0
 80071b0:	0800f958 	.word	0x0800f958
 80071b4:	0800f880 	.word	0x0800f880
 80071b8:	0800cd98 	.word	0x0800cd98
 80071bc:	0800f89c 	.word	0x0800f89c
 80071c0:	0800f8cc 	.word	0x0800f8cc
 80071c4:	0800f8fc 	.word	0x0800f8fc

080071c8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80071cc:	f004 fdb8 	bl	800bd40 <sys_arch_protect>
 80071d0:	4605      	mov	r5, r0

  memp = *desc->tab;
 80071d2:	68a3      	ldr	r3, [r4, #8]
 80071d4:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80071d6:	b18c      	cbz	r4, 80071fc <do_memp_malloc_pool+0x34>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80071dc:	f014 0f03 	tst.w	r4, #3
 80071e0:	d104      	bne.n	80071ec <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80071e2:	4628      	mov	r0, r5
 80071e4:	f004 fdb8 	bl	800bd58 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 80071e8:	4620      	mov	r0, r4
 80071ea:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80071ec:	4b05      	ldr	r3, [pc, #20]	; (8007204 <do_memp_malloc_pool+0x3c>)
 80071ee:	f240 1249 	movw	r2, #329	; 0x149
 80071f2:	4905      	ldr	r1, [pc, #20]	; (8007208 <do_memp_malloc_pool+0x40>)
 80071f4:	4805      	ldr	r0, [pc, #20]	; (800720c <do_memp_malloc_pool+0x44>)
 80071f6:	f005 fb0c 	bl	800c812 <iprintf>
 80071fa:	e7f2      	b.n	80071e2 <do_memp_malloc_pool+0x1a>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 80071fc:	f004 fdac 	bl	800bd58 <sys_arch_unprotect>
  return NULL;
 8007200:	2000      	movs	r0, #0
}
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	0800fa24 	.word	0x0800fa24
 8007208:	0800fa54 	.word	0x0800fa54
 800720c:	0800cd98 	.word	0x0800cd98

08007210 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4605      	mov	r5, r0
 8007214:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007216:	f011 0f03 	tst.w	r1, #3
 800721a:	d109      	bne.n	8007230 <do_memp_free_pool+0x20>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800721c:	f004 fd90 	bl	800bd40 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007220:	68ab      	ldr	r3, [r5, #8]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8007226:	68ab      	ldr	r3, [r5, #8]
 8007228:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800722a:	f004 fd95 	bl	800bd58 <sys_arch_unprotect>
 800722e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007230:	4b03      	ldr	r3, [pc, #12]	; (8007240 <do_memp_free_pool+0x30>)
 8007232:	f240 129d 	movw	r2, #413	; 0x19d
 8007236:	4903      	ldr	r1, [pc, #12]	; (8007244 <do_memp_free_pool+0x34>)
 8007238:	4803      	ldr	r0, [pc, #12]	; (8007248 <do_memp_free_pool+0x38>)
 800723a:	f005 faea 	bl	800c812 <iprintf>
 800723e:	e7ed      	b.n	800721c <do_memp_free_pool+0xc>
 8007240:	0800fa24 	.word	0x0800fa24
 8007244:	0800fa04 	.word	0x0800fa04
 8007248:	0800cd98 	.word	0x0800cd98

0800724c <memp_init_pool>:
  *desc->tab = NULL;
 800724c:	6883      	ldr	r3, [r0, #8]
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007252:	6843      	ldr	r3, [r0, #4]
 8007254:	3303      	adds	r3, #3
 8007256:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800725a:	e007      	b.n	800726c <memp_init_pool+0x20>
    memp->next = *desc->tab;
 800725c:	6881      	ldr	r1, [r0, #8]
 800725e:	6809      	ldr	r1, [r1, #0]
 8007260:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8007262:	6881      	ldr	r1, [r0, #8]
 8007264:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007266:	8801      	ldrh	r1, [r0, #0]
 8007268:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 800726a:	3201      	adds	r2, #1
 800726c:	8841      	ldrh	r1, [r0, #2]
 800726e:	428a      	cmp	r2, r1
 8007270:	dbf4      	blt.n	800725c <memp_init_pool+0x10>
}
 8007272:	4770      	bx	lr

08007274 <memp_init>:
{
 8007274:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007276:	2400      	movs	r4, #0
 8007278:	e006      	b.n	8007288 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 800727a:	4b05      	ldr	r3, [pc, #20]	; (8007290 <memp_init+0x1c>)
 800727c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007280:	f7ff ffe4 	bl	800724c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007284:	3401      	adds	r4, #1
 8007286:	b2a4      	uxth	r4, r4
 8007288:	2c0c      	cmp	r4, #12
 800728a:	d9f6      	bls.n	800727a <memp_init+0x6>
}
 800728c:	bd10      	pop	{r4, pc}
 800728e:	bf00      	nop
 8007290:	0800fb50 	.word	0x0800fb50

08007294 <memp_malloc>:
{
 8007294:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007296:	280c      	cmp	r0, #12
 8007298:	d805      	bhi.n	80072a6 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800729a:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <memp_malloc+0x24>)
 800729c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80072a0:	f7ff ff92 	bl	80071c8 <do_memp_malloc_pool>
}
 80072a4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <memp_malloc+0x28>)
 80072a8:	f240 1287 	movw	r2, #391	; 0x187
 80072ac:	4904      	ldr	r1, [pc, #16]	; (80072c0 <memp_malloc+0x2c>)
 80072ae:	4805      	ldr	r0, [pc, #20]	; (80072c4 <memp_malloc+0x30>)
 80072b0:	f005 faaf 	bl	800c812 <iprintf>
 80072b4:	2000      	movs	r0, #0
 80072b6:	bd08      	pop	{r3, pc}
 80072b8:	0800fb50 	.word	0x0800fb50
 80072bc:	0800fa24 	.word	0x0800fa24
 80072c0:	0800fb30 	.word	0x0800fb30
 80072c4:	0800cd98 	.word	0x0800cd98

080072c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80072c8:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80072ca:	280c      	cmp	r0, #12
 80072cc:	d806      	bhi.n	80072dc <memp_free+0x14>

  if (mem == NULL) {
 80072ce:	b121      	cbz	r1, 80072da <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80072d0:	4b06      	ldr	r3, [pc, #24]	; (80072ec <memp_free+0x24>)
 80072d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80072d6:	f7ff ff9b 	bl	8007210 <do_memp_free_pool>
 80072da:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80072dc:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <memp_free+0x28>)
 80072de:	f240 12db 	movw	r2, #475	; 0x1db
 80072e2:	4904      	ldr	r1, [pc, #16]	; (80072f4 <memp_free+0x2c>)
 80072e4:	4804      	ldr	r0, [pc, #16]	; (80072f8 <memp_free+0x30>)
 80072e6:	f005 fa94 	bl	800c812 <iprintf>
 80072ea:	bd08      	pop	{r3, pc}
 80072ec:	0800fb50 	.word	0x0800fb50
 80072f0:	0800fa24 	.word	0x0800fa24
 80072f4:	0800fb14 	.word	0x0800fb14
 80072f8:	0800cd98 	.word	0x0800cd98

080072fc <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80072fc:	f011 0f01 	tst.w	r1, #1
 8007300:	d00c      	beq.n	800731c <netif_issue_reports+0x20>
{
 8007302:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007304:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007306:	b123      	cbz	r3, 8007312 <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007308:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800730c:	f013 0f08 	tst.w	r3, #8
 8007310:	d100      	bne.n	8007314 <netif_issue_reports+0x18>
 8007312:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 8007314:	1d01      	adds	r1, r0, #4
 8007316:	f7fe fba1 	bl	8005a5c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800731a:	e7fa      	b.n	8007312 <netif_issue_reports+0x16>
 800731c:	4770      	bx	lr

0800731e <netif_init>:
{
 800731e:	4770      	bx	lr

08007320 <netif_set_ipaddr>:
{
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	b082      	sub	sp, #8
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007324:	460d      	mov	r5, r1
 8007326:	b1c1      	cbz	r1, 800735a <netif_set_ipaddr+0x3a>
 8007328:	680a      	ldr	r2, [r1, #0]
 800732a:	9201      	str	r2, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800732c:	6842      	ldr	r2, [r0, #4]
 800732e:	9901      	ldr	r1, [sp, #4]
 8007330:	4291      	cmp	r1, r2
 8007332:	d010      	beq.n	8007356 <netif_set_ipaddr+0x36>
 8007334:	4604      	mov	r4, r0
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007336:	1d06      	adds	r6, r0, #4
 8007338:	a901      	add	r1, sp, #4
 800733a:	4630      	mov	r0, r6
 800733c:	f001 fc96 	bl	8008c6c <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007340:	a901      	add	r1, sp, #4
 8007342:	4630      	mov	r0, r6
 8007344:	f004 fb56 	bl	800b9f4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007348:	b15d      	cbz	r5, 8007362 <netif_set_ipaddr+0x42>
 800734a:	682b      	ldr	r3, [r5, #0]
 800734c:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800734e:	2101      	movs	r1, #1
 8007350:	4620      	mov	r0, r4
 8007352:	f7ff ffd3 	bl	80072fc <netif_issue_reports>
}
 8007356:	b002      	add	sp, #8
 8007358:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800735a:	4a03      	ldr	r2, [pc, #12]	; (8007368 <netif_set_ipaddr+0x48>)
 800735c:	6812      	ldr	r2, [r2, #0]
 800735e:	9201      	str	r2, [sp, #4]
 8007360:	e7e4      	b.n	800732c <netif_set_ipaddr+0xc>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007362:	2300      	movs	r3, #0
 8007364:	e7f2      	b.n	800734c <netif_set_ipaddr+0x2c>
 8007366:	bf00      	nop
 8007368:	0800f660 	.word	0x0800f660

0800736c <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800736c:	b111      	cbz	r1, 8007374 <netif_set_gw+0x8>
 800736e:	680b      	ldr	r3, [r1, #0]
 8007370:	60c3      	str	r3, [r0, #12]
 8007372:	4770      	bx	lr
 8007374:	2300      	movs	r3, #0
 8007376:	e7fb      	b.n	8007370 <netif_set_gw+0x4>

08007378 <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007378:	b111      	cbz	r1, 8007380 <netif_set_netmask+0x8>
 800737a:	680b      	ldr	r3, [r1, #0]
 800737c:	6083      	str	r3, [r0, #8]
 800737e:	4770      	bx	lr
 8007380:	2300      	movs	r3, #0
 8007382:	e7fb      	b.n	800737c <netif_set_netmask+0x4>

08007384 <netif_set_addr>:
{
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	4617      	mov	r7, r2
 800738a:	461e      	mov	r6, r3
  if (ip4_addr_isany(ipaddr)) {
 800738c:	460d      	mov	r5, r1
 800738e:	b109      	cbz	r1, 8007394 <netif_set_addr+0x10>
 8007390:	680b      	ldr	r3, [r1, #0]
 8007392:	b963      	cbnz	r3, 80073ae <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 8007394:	4629      	mov	r1, r5
 8007396:	4620      	mov	r0, r4
 8007398:	f7ff ffc2 	bl	8007320 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800739c:	4639      	mov	r1, r7
 800739e:	4620      	mov	r0, r4
 80073a0:	f7ff ffea 	bl	8007378 <netif_set_netmask>
    netif_set_gw(netif, gw);
 80073a4:	4631      	mov	r1, r6
 80073a6:	4620      	mov	r0, r4
 80073a8:	f7ff ffe0 	bl	800736c <netif_set_gw>
 80073ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 80073ae:	4611      	mov	r1, r2
 80073b0:	f7ff ffe2 	bl	8007378 <netif_set_netmask>
    netif_set_gw(netif, gw);
 80073b4:	4631      	mov	r1, r6
 80073b6:	4620      	mov	r0, r4
 80073b8:	f7ff ffd8 	bl	800736c <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 80073bc:	4629      	mov	r1, r5
 80073be:	4620      	mov	r0, r4
 80073c0:	f7ff ffae 	bl	8007320 <netif_set_ipaddr>
 80073c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073c8 <netif_add>:
{
 80073c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073cc:	4604      	mov	r4, r0
 80073ce:	460e      	mov	r6, r1
 80073d0:	4617      	mov	r7, r2
 80073d2:	4698      	mov	r8, r3
 80073d4:	9d07      	ldr	r5, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 80073d6:	b315      	cbz	r5, 800741e <netif_add+0x56>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80073d8:	2300      	movs	r3, #0
 80073da:	6063      	str	r3, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80073dc:	60a3      	str	r3, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80073de:	60e3      	str	r3, [r4, #12]
  netif->flags = 0;
 80073e0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80073ea:	9b06      	ldr	r3, [sp, #24]
 80073ec:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80073ee:	4a11      	ldr	r2, [pc, #68]	; (8007434 <netif_add+0x6c>)
 80073f0:	7813      	ldrb	r3, [r2, #0]
 80073f2:	1c59      	adds	r1, r3, #1
 80073f4:	7011      	strb	r1, [r2, #0]
 80073f6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 80073fa:	9b08      	ldr	r3, [sp, #32]
 80073fc:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80073fe:	4643      	mov	r3, r8
 8007400:	463a      	mov	r2, r7
 8007402:	4631      	mov	r1, r6
 8007404:	4620      	mov	r0, r4
 8007406:	f7ff ffbd 	bl	8007384 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800740a:	4620      	mov	r0, r4
 800740c:	47a8      	blx	r5
 800740e:	b968      	cbnz	r0, 800742c <netif_add+0x64>
  netif->next = netif_list;
 8007410:	4b09      	ldr	r3, [pc, #36]	; (8007438 <netif_add+0x70>)
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8007416:	601c      	str	r4, [r3, #0]
  return netif;
 8007418:	4620      	mov	r0, r4
 800741a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 800741e:	4b07      	ldr	r3, [pc, #28]	; (800743c <netif_add+0x74>)
 8007420:	22fb      	movs	r2, #251	; 0xfb
 8007422:	4907      	ldr	r1, [pc, #28]	; (8007440 <netif_add+0x78>)
 8007424:	4807      	ldr	r0, [pc, #28]	; (8007444 <netif_add+0x7c>)
 8007426:	f005 f9f4 	bl	800c812 <iprintf>
 800742a:	e7d5      	b.n	80073d8 <netif_add+0x10>
    return NULL;
 800742c:	2000      	movs	r0, #0
}
 800742e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007432:	bf00      	nop
 8007434:	20003ed8 	.word	0x20003ed8
 8007438:	2000888c 	.word	0x2000888c
 800743c:	0800fb84 	.word	0x0800fb84
 8007440:	0800fbb8 	.word	0x0800fbb8
 8007444:	0800cd98 	.word	0x0800cd98

08007448 <netif_set_default>:
  netif_default = netif;
 8007448:	4b01      	ldr	r3, [pc, #4]	; (8007450 <netif_set_default+0x8>)
 800744a:	6018      	str	r0, [r3, #0]
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	20008890 	.word	0x20008890

08007454 <netif_set_up>:
{
 8007454:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007456:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800745a:	f013 0f01 	tst.w	r3, #1
 800745e:	d106      	bne.n	800746e <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 8007460:	f043 0301 	orr.w	r3, r3, #1
 8007464:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007468:	f013 0f04 	tst.w	r3, #4
 800746c:	d100      	bne.n	8007470 <netif_set_up+0x1c>
 800746e:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8007470:	2103      	movs	r1, #3
 8007472:	f7ff ff43 	bl	80072fc <netif_issue_reports>
}
 8007476:	e7fa      	b.n	800746e <netif_set_up+0x1a>

08007478 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007478:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 800747a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800747e:	f013 0f01 	tst.w	r3, #1
 8007482:	d006      	beq.n	8007492 <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 8007484:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007488:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800748c:	f013 0f08 	tst.w	r3, #8
 8007490:	d100      	bne.n	8007494 <netif_set_down+0x1c>
 8007492:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 8007494:	f7fe fa6e 	bl	8005974 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007498:	e7fb      	b.n	8007492 <netif_set_down+0x1a>
	...

0800749c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	460c      	mov	r4, r1
 80074a0:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80074a2:	4605      	mov	r5, r0
 80074a4:	b1c0      	cbz	r0, 80074d8 <pbuf_header_impl+0x3c>
  if ((header_size_increment == 0) || (p == NULL)) {
 80074a6:	2c00      	cmp	r4, #0
 80074a8:	d04e      	beq.n	8007548 <pbuf_header_impl+0xac>
 80074aa:	2d00      	cmp	r5, #0
 80074ac:	d04e      	beq.n	800754c <pbuf_header_impl+0xb0>
    return 0;
  }

  if (header_size_increment < 0) {
 80074ae:	2c00      	cmp	r4, #0
 80074b0:	db1a      	blt.n	80074e8 <pbuf_header_impl+0x4c>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80074b2:	b2a2      	uxth	r2, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80074b4:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80074b6:	6869      	ldr	r1, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80074b8:	b32b      	cbz	r3, 8007506 <pbuf_header_impl+0x6a>
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d023      	beq.n	8007506 <pbuf_header_impl+0x6a>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d837      	bhi.n	8007536 <pbuf_header_impl+0x9a>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80074c6:	2c00      	cmp	r4, #0
 80074c8:	db2f      	blt.n	800752a <pbuf_header_impl+0x8e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 80074ca:	2c00      	cmp	r4, #0
 80074cc:	dd40      	ble.n	8007550 <pbuf_header_impl+0xb4>
 80074ce:	2e00      	cmp	r6, #0
 80074d0:	d040      	beq.n	8007554 <pbuf_header_impl+0xb8>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80074d2:	1b09      	subs	r1, r1, r4
 80074d4:	6069      	str	r1, [r5, #4]
 80074d6:	e01c      	b.n	8007512 <pbuf_header_impl+0x76>
  LWIP_ASSERT("p != NULL", p != NULL);
 80074d8:	4b1f      	ldr	r3, [pc, #124]	; (8007558 <pbuf_header_impl+0xbc>)
 80074da:	f240 223f 	movw	r2, #575	; 0x23f
 80074de:	491f      	ldr	r1, [pc, #124]	; (800755c <pbuf_header_impl+0xc0>)
 80074e0:	481f      	ldr	r0, [pc, #124]	; (8007560 <pbuf_header_impl+0xc4>)
 80074e2:	f005 f996 	bl	800c812 <iprintf>
 80074e6:	e7de      	b.n	80074a6 <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 80074e8:	b2a2      	uxth	r2, r4
 80074ea:	4252      	negs	r2, r2
 80074ec:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80074ee:	896b      	ldrh	r3, [r5, #10]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d9df      	bls.n	80074b4 <pbuf_header_impl+0x18>
 80074f4:	4b18      	ldr	r3, [pc, #96]	; (8007558 <pbuf_header_impl+0xbc>)
 80074f6:	f240 2247 	movw	r2, #583	; 0x247
 80074fa:	491a      	ldr	r1, [pc, #104]	; (8007564 <pbuf_header_impl+0xc8>)
 80074fc:	4818      	ldr	r0, [pc, #96]	; (8007560 <pbuf_header_impl+0xc4>)
 80074fe:	f005 f988 	bl	800c812 <iprintf>
 8007502:	2001      	movs	r0, #1
 8007504:	bd70      	pop	{r4, r5, r6, pc}
    p->payload = (u8_t *)p->payload - header_size_increment;
 8007506:	1b0b      	subs	r3, r1, r4
 8007508:	606b      	str	r3, [r5, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800750a:	f105 0210 	add.w	r2, r5, #16
 800750e:	4293      	cmp	r3, r2
 8007510:	d308      	bcc.n	8007524 <pbuf_header_impl+0x88>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8007512:	b2a4      	uxth	r4, r4
 8007514:	896b      	ldrh	r3, [r5, #10]
 8007516:	4423      	add	r3, r4
 8007518:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 800751a:	892b      	ldrh	r3, [r5, #8]
 800751c:	441c      	add	r4, r3
 800751e:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8007520:	2000      	movs	r0, #0
 8007522:	bd70      	pop	{r4, r5, r6, pc}
      p->payload = payload;
 8007524:	6069      	str	r1, [r5, #4]
      return 1;
 8007526:	2001      	movs	r0, #1
 8007528:	bd70      	pop	{r4, r5, r6, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800752a:	896b      	ldrh	r3, [r5, #10]
 800752c:	429a      	cmp	r2, r3
 800752e:	d8cc      	bhi.n	80074ca <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007530:	1b09      	subs	r1, r1, r4
 8007532:	6069      	str	r1, [r5, #4]
 8007534:	e7ed      	b.n	8007512 <pbuf_header_impl+0x76>
    LWIP_ASSERT("bad pbuf type", 0);
 8007536:	4b08      	ldr	r3, [pc, #32]	; (8007558 <pbuf_header_impl+0xbc>)
 8007538:	f240 2277 	movw	r2, #631	; 0x277
 800753c:	490a      	ldr	r1, [pc, #40]	; (8007568 <pbuf_header_impl+0xcc>)
 800753e:	4808      	ldr	r0, [pc, #32]	; (8007560 <pbuf_header_impl+0xc4>)
 8007540:	f005 f967 	bl	800c812 <iprintf>
    return 1;
 8007544:	2001      	movs	r0, #1
 8007546:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8007548:	2000      	movs	r0, #0
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	2000      	movs	r0, #0
 800754e:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8007550:	2001      	movs	r0, #1
 8007552:	bd70      	pop	{r4, r5, r6, pc}
 8007554:	2001      	movs	r0, #1
}
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	0800fe88 	.word	0x0800fe88
 800755c:	0800d08c 	.word	0x0800d08c
 8007560:	0800cd98 	.word	0x0800cd98
 8007564:	0800feb8 	.word	0x0800feb8
 8007568:	0800fed8 	.word	0x0800fed8

0800756c <pbuf_pool_is_empty>:
{
 800756c:	b510      	push	{r4, lr}
  SYS_ARCH_PROTECT(old_level);
 800756e:	f004 fbe7 	bl	800bd40 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8007572:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <pbuf_pool_is_empty+0x38>)
 8007574:	781c      	ldrb	r4, [r3, #0]
 8007576:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 8007578:	2201      	movs	r2, #1
 800757a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800757c:	f004 fbec 	bl	800bd58 <sys_arch_unprotect>
  if (!queued) {
 8007580:	b104      	cbz	r4, 8007584 <pbuf_pool_is_empty+0x18>
 8007582:	bd10      	pop	{r4, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8007584:	2200      	movs	r2, #0
 8007586:	4611      	mov	r1, r2
 8007588:	4807      	ldr	r0, [pc, #28]	; (80075a8 <pbuf_pool_is_empty+0x3c>)
 800758a:	f7fd ff4b 	bl	8005424 <tcpip_callback_with_block>
 800758e:	2800      	cmp	r0, #0
 8007590:	d0f7      	beq.n	8007582 <pbuf_pool_is_empty+0x16>
 8007592:	f004 fbd5 	bl	800bd40 <sys_arch_protect>
 8007596:	2200      	movs	r2, #0
 8007598:	4b02      	ldr	r3, [pc, #8]	; (80075a4 <pbuf_pool_is_empty+0x38>)
 800759a:	701a      	strb	r2, [r3, #0]
 800759c:	f004 fbdc 	bl	800bd58 <sys_arch_unprotect>
}
 80075a0:	e7ef      	b.n	8007582 <pbuf_pool_is_empty+0x16>
 80075a2:	bf00      	nop
 80075a4:	20008894 	.word	0x20008894
 80075a8:	080075e1 	.word	0x080075e1

080075ac <pbuf_free_ooseq>:
{
 80075ac:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80075ae:	f004 fbc7 	bl	800bd40 <sys_arch_protect>
 80075b2:	2200      	movs	r2, #0
 80075b4:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <pbuf_free_ooseq+0x2c>)
 80075b6:	701a      	strb	r2, [r3, #0]
 80075b8:	f004 fbce 	bl	800bd58 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80075bc:	4b07      	ldr	r3, [pc, #28]	; (80075dc <pbuf_free_ooseq+0x30>)
 80075be:	681c      	ldr	r4, [r3, #0]
 80075c0:	b144      	cbz	r4, 80075d4 <pbuf_free_ooseq+0x28>
    if (NULL != pcb->ooseq) {
 80075c2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80075c4:	b908      	cbnz	r0, 80075ca <pbuf_free_ooseq+0x1e>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80075c6:	68e4      	ldr	r4, [r4, #12]
 80075c8:	e7fa      	b.n	80075c0 <pbuf_free_ooseq+0x14>
      tcp_segs_free(pcb->ooseq);
 80075ca:	f000 fd44 	bl	8008056 <tcp_segs_free>
      pcb->ooseq = NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 80075d2:	bd10      	pop	{r4, pc}
 80075d4:	bd10      	pop	{r4, pc}
 80075d6:	bf00      	nop
 80075d8:	20008894 	.word	0x20008894
 80075dc:	2000889c 	.word	0x2000889c

080075e0 <pbuf_free_ooseq_callback>:
{
 80075e0:	b508      	push	{r3, lr}
  pbuf_free_ooseq();
 80075e2:	f7ff ffe3 	bl	80075ac <pbuf_free_ooseq>
 80075e6:	bd08      	pop	{r3, pc}

080075e8 <pbuf_alloced_custom>:
{
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 80075ec:	2804      	cmp	r0, #4
 80075ee:	d80a      	bhi.n	8007606 <pbuf_alloced_custom+0x1e>
 80075f0:	e8df f000 	tbb	[pc, r0]
 80075f4:	05031412 	.word	0x05031412
 80075f8:	07          	.byte	0x07
 80075f9:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80075fa:	200e      	movs	r0, #14
    break;
 80075fc:	e00f      	b.n	800761e <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80075fe:	2000      	movs	r0, #0
    break;
 8007600:	e00d      	b.n	800761e <pbuf_alloced_custom+0x36>
    offset = 0;
 8007602:	2000      	movs	r0, #0
    break;
 8007604:	e00b      	b.n	800761e <pbuf_alloced_custom+0x36>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8007606:	4b13      	ldr	r3, [pc, #76]	; (8007654 <pbuf_alloced_custom+0x6c>)
 8007608:	f240 12c5 	movw	r2, #453	; 0x1c5
 800760c:	4912      	ldr	r1, [pc, #72]	; (8007658 <pbuf_alloced_custom+0x70>)
 800760e:	4813      	ldr	r0, [pc, #76]	; (800765c <pbuf_alloced_custom+0x74>)
 8007610:	f005 f8ff 	bl	800c812 <iprintf>
    return NULL;
 8007614:	2000      	movs	r0, #0
 8007616:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007618:	2036      	movs	r0, #54	; 0x36
 800761a:	e000      	b.n	800761e <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800761c:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800761e:	3003      	adds	r0, #3
 8007620:	f020 0003 	bic.w	r0, r0, #3
 8007624:	180e      	adds	r6, r1, r0
 8007626:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 800762a:	42ae      	cmp	r6, r5
 800762c:	d810      	bhi.n	8007650 <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 800762e:	2500      	movs	r5, #0
 8007630:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 8007632:	b154      	cbz	r4, 800764a <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007634:	4420      	add	r0, r4
 8007636:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8007638:	2002      	movs	r0, #2
 800763a:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800763c:	8119      	strh	r1, [r3, #8]
 800763e:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 8007640:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8007642:	2201      	movs	r2, #1
 8007644:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8007646:	4618      	mov	r0, r3
 8007648:	bd70      	pop	{r4, r5, r6, pc}
    p->pbuf.payload = NULL;
 800764a:	2000      	movs	r0, #0
 800764c:	6058      	str	r0, [r3, #4]
 800764e:	e7f3      	b.n	8007638 <pbuf_alloced_custom+0x50>
    return NULL;
 8007650:	2000      	movs	r0, #0
}
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	0800fe88 	.word	0x0800fe88
 8007658:	0800fcb4 	.word	0x0800fcb4
 800765c:	0800cd98 	.word	0x0800cd98

08007660 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8007660:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 8007662:	2200      	movs	r2, #0
 8007664:	f7ff ff1a 	bl	800749c <pbuf_header_impl>
}
 8007668:	bd08      	pop	{r3, pc}

0800766a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800766a:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 800766c:	2201      	movs	r2, #1
 800766e:	f7ff ff15 	bl	800749c <pbuf_header_impl>
}
 8007672:	bd08      	pop	{r3, pc}

08007674 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007676:	b128      	cbz	r0, 8007684 <pbuf_free+0x10>
 8007678:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800767a:	7b03      	ldrb	r3, [r0, #12]
 800767c:	2b03      	cmp	r3, #3
 800767e:	d80b      	bhi.n	8007698 <pbuf_free+0x24>
{
 8007680:	2600      	movs	r6, #0
 8007682:	e01f      	b.n	80076c4 <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007684:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <pbuf_free+0xc0>)
 8007686:	f240 22d2 	movw	r2, #722	; 0x2d2
 800768a:	492b      	ldr	r1, [pc, #172]	; (8007738 <pbuf_free+0xc4>)
 800768c:	482b      	ldr	r0, [pc, #172]	; (800773c <pbuf_free+0xc8>)
 800768e:	f005 f8c0 	bl	800c812 <iprintf>
    return 0;
 8007692:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8007694:	4630      	mov	r0, r6
 8007696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8007698:	4b26      	ldr	r3, [pc, #152]	; (8007734 <pbuf_free+0xc0>)
 800769a:	f240 22de 	movw	r2, #734	; 0x2de
 800769e:	4928      	ldr	r1, [pc, #160]	; (8007740 <pbuf_free+0xcc>)
 80076a0:	4826      	ldr	r0, [pc, #152]	; (800773c <pbuf_free+0xc8>)
 80076a2:	f005 f8b6 	bl	800c812 <iprintf>
 80076a6:	e7eb      	b.n	8007680 <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80076a8:	4b22      	ldr	r3, [pc, #136]	; (8007734 <pbuf_free+0xc0>)
 80076aa:	f240 22eb 	movw	r2, #747	; 0x2eb
 80076ae:	4925      	ldr	r1, [pc, #148]	; (8007744 <pbuf_free+0xd0>)
 80076b0:	4822      	ldr	r0, [pc, #136]	; (800773c <pbuf_free+0xc8>)
 80076b2:	f005 f8ae 	bl	800c812 <iprintf>
 80076b6:	e00d      	b.n	80076d4 <pbuf_free+0x60>
        pc->custom_free_function(p);
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	4620      	mov	r0, r4
 80076bc:	4798      	blx	r3
      count++;
 80076be:	3601      	adds	r6, #1
 80076c0:	b2f6      	uxtb	r6, r6
      p = q;
 80076c2:	462c      	mov	r4, r5
  while (p != NULL) {
 80076c4:	2c00      	cmp	r4, #0
 80076c6:	d0e5      	beq.n	8007694 <pbuf_free+0x20>
    SYS_ARCH_PROTECT(old_level);
 80076c8:	f004 fb3a 	bl	800bd40 <sys_arch_protect>
 80076cc:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80076ce:	89e3      	ldrh	r3, [r4, #14]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0e9      	beq.n	80076a8 <pbuf_free+0x34>
    ref = --(p->ref);
 80076d4:	89e5      	ldrh	r5, [r4, #14]
 80076d6:	3d01      	subs	r5, #1
 80076d8:	b2ad      	uxth	r5, r5
 80076da:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80076dc:	4638      	mov	r0, r7
 80076de:	f004 fb3b 	bl	800bd58 <sys_arch_unprotect>
    if (ref == 0) {
 80076e2:	bb25      	cbnz	r5, 800772e <pbuf_free+0xba>
      q = p->next;
 80076e4:	6825      	ldr	r5, [r4, #0]
      type = p->type;
 80076e6:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80076e8:	7b62      	ldrb	r2, [r4, #13]
 80076ea:	f012 0f02 	tst.w	r2, #2
 80076ee:	d00a      	beq.n	8007706 <pbuf_free+0x92>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e0      	bne.n	80076b8 <pbuf_free+0x44>
 80076f6:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <pbuf_free+0xc0>)
 80076f8:	f240 22f9 	movw	r2, #761	; 0x2f9
 80076fc:	4912      	ldr	r1, [pc, #72]	; (8007748 <pbuf_free+0xd4>)
 80076fe:	480f      	ldr	r0, [pc, #60]	; (800773c <pbuf_free+0xc8>)
 8007700:	f005 f887 	bl	800c812 <iprintf>
 8007704:	e7d8      	b.n	80076b8 <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 8007706:	2b03      	cmp	r3, #3
 8007708:	d007      	beq.n	800771a <pbuf_free+0xa6>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800770a:	3b01      	subs	r3, #1
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b01      	cmp	r3, #1
 8007710:	d908      	bls.n	8007724 <pbuf_free+0xb0>
          mem_free(p);
 8007712:	4620      	mov	r0, r4
 8007714:	f7ff fbb4 	bl	8006e80 <mem_free>
 8007718:	e7d1      	b.n	80076be <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 800771a:	4621      	mov	r1, r4
 800771c:	200c      	movs	r0, #12
 800771e:	f7ff fdd3 	bl	80072c8 <memp_free>
 8007722:	e7cc      	b.n	80076be <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 8007724:	4621      	mov	r1, r4
 8007726:	200b      	movs	r0, #11
 8007728:	f7ff fdce 	bl	80072c8 <memp_free>
 800772c:	e7c7      	b.n	80076be <pbuf_free+0x4a>
      p = NULL;
 800772e:	2400      	movs	r4, #0
 8007730:	e7c8      	b.n	80076c4 <pbuf_free+0x50>
 8007732:	bf00      	nop
 8007734:	0800fe88 	.word	0x0800fe88
 8007738:	0800d08c 	.word	0x0800d08c
 800773c:	0800cd98 	.word	0x0800cd98
 8007740:	0800fe34 	.word	0x0800fe34
 8007744:	0800fe4c 	.word	0x0800fe4c
 8007748:	0800fe64 	.word	0x0800fe64

0800774c <pbuf_alloc>:
{
 800774c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007750:	460d      	mov	r5, r1
 8007752:	4617      	mov	r7, r2
  switch (layer) {
 8007754:	2804      	cmp	r0, #4
 8007756:	d80a      	bhi.n	800776e <pbuf_alloc+0x22>
 8007758:	e8df f000 	tbb	[pc, r0]
 800775c:	05031412 	.word	0x05031412
 8007760:	07          	.byte	0x07
 8007761:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8007762:	240e      	movs	r4, #14
    break;
 8007764:	e00f      	b.n	8007786 <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8007766:	2400      	movs	r4, #0
    break;
 8007768:	e00d      	b.n	8007786 <pbuf_alloc+0x3a>
    offset = 0;
 800776a:	2400      	movs	r4, #0
    break;
 800776c:	e00b      	b.n	8007786 <pbuf_alloc+0x3a>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800776e:	4b64      	ldr	r3, [pc, #400]	; (8007900 <pbuf_alloc+0x1b4>)
 8007770:	f44f 728b 	mov.w	r2, #278	; 0x116
 8007774:	4963      	ldr	r1, [pc, #396]	; (8007904 <pbuf_alloc+0x1b8>)
 8007776:	4864      	ldr	r0, [pc, #400]	; (8007908 <pbuf_alloc+0x1bc>)
 8007778:	f005 f84b 	bl	800c812 <iprintf>
    return NULL;
 800777c:	2600      	movs	r6, #0
 800777e:	e0b1      	b.n	80078e4 <pbuf_alloc+0x198>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007780:	2436      	movs	r4, #54	; 0x36
 8007782:	e000      	b.n	8007786 <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8007784:	2422      	movs	r4, #34	; 0x22
  switch (type) {
 8007786:	2f03      	cmp	r7, #3
 8007788:	f200 80af 	bhi.w	80078ea <pbuf_alloc+0x19e>
 800778c:	e8df f007 	tbb	[pc, r7]
 8007790:	029b9b7b 	.word	0x029b9b7b
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007794:	200c      	movs	r0, #12
 8007796:	f7ff fd7d 	bl	8007294 <memp_malloc>
    if (p == NULL) {
 800779a:	4606      	mov	r6, r0
 800779c:	b1f8      	cbz	r0, 80077de <pbuf_alloc+0x92>
    p->type = type;
 800779e:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 80077a0:	2300      	movs	r3, #0
 80077a2:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80077a4:	f104 0310 	add.w	r3, r4, #16
 80077a8:	4403      	add	r3, r0
 80077aa:	3303      	adds	r3, #3
 80077ac:	f023 0303 	bic.w	r3, r3, #3
 80077b0:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 80077b2:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80077b4:	1ce2      	adds	r2, r4, #3
 80077b6:	f022 0203 	bic.w	r2, r2, #3
 80077ba:	f5c2 7242 	rsb	r2, r2, #776	; 0x308
 80077be:	42aa      	cmp	r2, r5
 80077c0:	bf28      	it	cs
 80077c2:	462a      	movcs	r2, r5
 80077c4:	b292      	uxth	r2, r2
 80077c6:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80077c8:	4413      	add	r3, r2
 80077ca:	f500 7846 	add.w	r8, r0, #792	; 0x318
 80077ce:	4543      	cmp	r3, r8
 80077d0:	d808      	bhi.n	80077e4 <pbuf_alloc+0x98>
    p->ref = 1;
 80077d2:	2301      	movs	r3, #1
 80077d4:	81f3      	strh	r3, [r6, #14]
    rem_len = length - p->len;
 80077d6:	8973      	ldrh	r3, [r6, #10]
 80077d8:	1aed      	subs	r5, r5, r3
    r = p;
 80077da:	46b1      	mov	r9, r6
    while (rem_len > 0) {
 80077dc:	e026      	b.n	800782c <pbuf_alloc+0xe0>
      PBUF_POOL_IS_EMPTY();
 80077de:	f7ff fec5 	bl	800756c <pbuf_pool_is_empty>
      return NULL;
 80077e2:	e07f      	b.n	80078e4 <pbuf_alloc+0x198>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80077e4:	4b46      	ldr	r3, [pc, #280]	; (8007900 <pbuf_alloc+0x1b4>)
 80077e6:	f44f 7298 	mov.w	r2, #304	; 0x130
 80077ea:	4948      	ldr	r1, [pc, #288]	; (800790c <pbuf_alloc+0x1c0>)
 80077ec:	4846      	ldr	r0, [pc, #280]	; (8007908 <pbuf_alloc+0x1bc>)
 80077ee:	f005 f810 	bl	800c812 <iprintf>
 80077f2:	e7ee      	b.n	80077d2 <pbuf_alloc+0x86>
        PBUF_POOL_IS_EMPTY();
 80077f4:	f7ff feba 	bl	800756c <pbuf_pool_is_empty>
        pbuf_free(p);
 80077f8:	4630      	mov	r0, r6
 80077fa:	f7ff ff3b 	bl	8007674 <pbuf_free>
        return NULL;
 80077fe:	4626      	mov	r6, r4
 8007800:	e070      	b.n	80078e4 <pbuf_alloc+0x198>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8007802:	4b3f      	ldr	r3, [pc, #252]	; (8007900 <pbuf_alloc+0x1b4>)
 8007804:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8007808:	4941      	ldr	r1, [pc, #260]	; (8007910 <pbuf_alloc+0x1c4>)
 800780a:	483f      	ldr	r0, [pc, #252]	; (8007908 <pbuf_alloc+0x1bc>)
 800780c:	f005 f801 	bl	800c812 <iprintf>
 8007810:	e01e      	b.n	8007850 <pbuf_alloc+0x104>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007812:	4b3b      	ldr	r3, [pc, #236]	; (8007900 <pbuf_alloc+0x1b4>)
 8007814:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8007818:	493e      	ldr	r1, [pc, #248]	; (8007914 <pbuf_alloc+0x1c8>)
 800781a:	483b      	ldr	r0, [pc, #236]	; (8007908 <pbuf_alloc+0x1bc>)
 800781c:	f004 fff9 	bl	800c812 <iprintf>
 8007820:	e024      	b.n	800786c <pbuf_alloc+0x120>
      q->ref = 1;
 8007822:	2301      	movs	r3, #1
 8007824:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 8007826:	8963      	ldrh	r3, [r4, #10]
 8007828:	1aed      	subs	r5, r5, r3
      r = q;
 800782a:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 800782c:	2d00      	cmp	r5, #0
 800782e:	dd55      	ble.n	80078dc <pbuf_alloc+0x190>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007830:	200c      	movs	r0, #12
 8007832:	f7ff fd2f 	bl	8007294 <memp_malloc>
      if (q == NULL) {
 8007836:	4604      	mov	r4, r0
 8007838:	2800      	cmp	r0, #0
 800783a:	d0db      	beq.n	80077f4 <pbuf_alloc+0xa8>
      q->type = type;
 800783c:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8007842:	6003      	str	r3, [r0, #0]
      r->next = q;
 8007844:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8007848:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800784c:	429d      	cmp	r5, r3
 800784e:	dcd8      	bgt.n	8007802 <pbuf_alloc+0xb6>
      q->tot_len = (u16_t)rem_len;
 8007850:	b2ab      	uxth	r3, r5
 8007852:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8007854:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 8007858:	bf28      	it	cs
 800785a:	f44f 7342 	movcs.w	r3, #776	; 0x308
 800785e:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8007860:	f104 0310 	add.w	r3, r4, #16
 8007864:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007866:	f013 0f03 	tst.w	r3, #3
 800786a:	d1d2      	bne.n	8007812 <pbuf_alloc+0xc6>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800786c:	6873      	ldr	r3, [r6, #4]
 800786e:	8972      	ldrh	r2, [r6, #10]
 8007870:	4413      	add	r3, r2
 8007872:	4598      	cmp	r8, r3
 8007874:	d2d5      	bcs.n	8007822 <pbuf_alloc+0xd6>
 8007876:	4b22      	ldr	r3, [pc, #136]	; (8007900 <pbuf_alloc+0x1b4>)
 8007878:	f240 1255 	movw	r2, #341	; 0x155
 800787c:	4923      	ldr	r1, [pc, #140]	; (800790c <pbuf_alloc+0x1c0>)
 800787e:	4822      	ldr	r0, [pc, #136]	; (8007908 <pbuf_alloc+0x1bc>)
 8007880:	f004 ffc7 	bl	800c812 <iprintf>
 8007884:	e7cd      	b.n	8007822 <pbuf_alloc+0xd6>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8007886:	f104 0013 	add.w	r0, r4, #19
 800788a:	f020 0003 	bic.w	r0, r0, #3
 800788e:	b283      	uxth	r3, r0
 8007890:	1cea      	adds	r2, r5, #3
 8007892:	b290      	uxth	r0, r2
 8007894:	f020 0003 	bic.w	r0, r0, #3
 8007898:	4418      	add	r0, r3
 800789a:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800789c:	f022 0203 	bic.w	r2, r2, #3
 80078a0:	4290      	cmp	r0, r2
 80078a2:	d32b      	bcc.n	80078fc <pbuf_alloc+0x1b0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 80078a4:	f7ff fbe6 	bl	8007074 <mem_malloc>
    if (p == NULL) {
 80078a8:	4606      	mov	r6, r0
 80078aa:	b1d8      	cbz	r0, 80078e4 <pbuf_alloc+0x198>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80078ac:	f104 0310 	add.w	r3, r4, #16
 80078b0:	4403      	add	r3, r0
 80078b2:	3303      	adds	r3, #3
 80078b4:	f023 0303 	bic.w	r3, r3, #3
 80078b8:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80078ba:	8105      	strh	r5, [r0, #8]
 80078bc:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	6003      	str	r3, [r0, #0]
    p->type = type;
 80078c2:	7307      	strb	r7, [r0, #12]
 80078c4:	e00a      	b.n	80078dc <pbuf_alloc+0x190>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80078c6:	200b      	movs	r0, #11
 80078c8:	f7ff fce4 	bl	8007294 <memp_malloc>
    if (p == NULL) {
 80078cc:	4606      	mov	r6, r0
 80078ce:	b148      	cbz	r0, 80078e4 <pbuf_alloc+0x198>
    p->payload = NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80078d4:	8105      	strh	r5, [r0, #8]
 80078d6:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 80078d8:	6003      	str	r3, [r0, #0]
    p->type = type;
 80078da:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 80078dc:	2301      	movs	r3, #1
 80078de:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	7373      	strb	r3, [r6, #13]
}
 80078e4:	4630      	mov	r0, r6
 80078e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <pbuf_alloc+0x1b4>)
 80078ec:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80078f0:	4909      	ldr	r1, [pc, #36]	; (8007918 <pbuf_alloc+0x1cc>)
 80078f2:	4805      	ldr	r0, [pc, #20]	; (8007908 <pbuf_alloc+0x1bc>)
 80078f4:	f004 ff8d 	bl	800c812 <iprintf>
    return NULL;
 80078f8:	2600      	movs	r6, #0
 80078fa:	e7f3      	b.n	80078e4 <pbuf_alloc+0x198>
        return NULL;
 80078fc:	2600      	movs	r6, #0
 80078fe:	e7f1      	b.n	80078e4 <pbuf_alloc+0x198>
 8007900:	0800fe88 	.word	0x0800fe88
 8007904:	0800fbd0 	.word	0x0800fbd0
 8007908:	0800cd98 	.word	0x0800cd98
 800790c:	0800fbec 	.word	0x0800fbec
 8007910:	0800fc54 	.word	0x0800fc54
 8007914:	0800fc68 	.word	0x0800fc68
 8007918:	0800fc98 	.word	0x0800fc98

0800791c <pbuf_realloc>:
{
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007920:	4604      	mov	r4, r0
 8007922:	b198      	cbz	r0, 800794c <pbuf_realloc+0x30>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8007924:	7b23      	ldrb	r3, [r4, #12]
 8007926:	2b03      	cmp	r3, #3
 8007928:	d00b      	beq.n	8007942 <pbuf_realloc+0x26>
 800792a:	2b01      	cmp	r3, #1
 800792c:	d009      	beq.n	8007942 <pbuf_realloc+0x26>
 800792e:	b143      	cbz	r3, 8007942 <pbuf_realloc+0x26>
 8007930:	2b02      	cmp	r3, #2
 8007932:	d006      	beq.n	8007942 <pbuf_realloc+0x26>
 8007934:	4b2b      	ldr	r3, [pc, #172]	; (80079e4 <pbuf_realloc+0xc8>)
 8007936:	f240 12f7 	movw	r2, #503	; 0x1f7
 800793a:	492b      	ldr	r1, [pc, #172]	; (80079e8 <pbuf_realloc+0xcc>)
 800793c:	482b      	ldr	r0, [pc, #172]	; (80079ec <pbuf_realloc+0xd0>)
 800793e:	f004 ff68 	bl	800c812 <iprintf>
  if (new_len >= p->tot_len) {
 8007942:	8926      	ldrh	r6, [r4, #8]
 8007944:	42ae      	cmp	r6, r5
 8007946:	d938      	bls.n	80079ba <pbuf_realloc+0x9e>
  grow = new_len - p->tot_len;
 8007948:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 800794a:	e00d      	b.n	8007968 <pbuf_realloc+0x4c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800794c:	4b25      	ldr	r3, [pc, #148]	; (80079e4 <pbuf_realloc+0xc8>)
 800794e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007952:	4927      	ldr	r1, [pc, #156]	; (80079f0 <pbuf_realloc+0xd4>)
 8007954:	4825      	ldr	r0, [pc, #148]	; (80079ec <pbuf_realloc+0xd0>)
 8007956:	f004 ff5c 	bl	800c812 <iprintf>
 800795a:	e7e3      	b.n	8007924 <pbuf_realloc+0x8>
    q->tot_len += (u16_t)grow;
 800795c:	8923      	ldrh	r3, [r4, #8]
 800795e:	fa13 f386 	uxtah	r3, r3, r6
 8007962:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8007964:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007966:	b184      	cbz	r4, 800798a <pbuf_realloc+0x6e>
  while (rem_len > q->len) {
 8007968:	8961      	ldrh	r1, [r4, #10]
 800796a:	428d      	cmp	r5, r1
 800796c:	d915      	bls.n	800799a <pbuf_realloc+0x7e>
    rem_len -= q->len;
 800796e:	1a69      	subs	r1, r5, r1
 8007970:	b28d      	uxth	r5, r1
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8007972:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007976:	429e      	cmp	r6, r3
 8007978:	ddf0      	ble.n	800795c <pbuf_realloc+0x40>
 800797a:	4b1a      	ldr	r3, [pc, #104]	; (80079e4 <pbuf_realloc+0xc8>)
 800797c:	f240 220b 	movw	r2, #523	; 0x20b
 8007980:	491c      	ldr	r1, [pc, #112]	; (80079f4 <pbuf_realloc+0xd8>)
 8007982:	481a      	ldr	r0, [pc, #104]	; (80079ec <pbuf_realloc+0xd0>)
 8007984:	f004 ff45 	bl	800c812 <iprintf>
 8007988:	e7e8      	b.n	800795c <pbuf_realloc+0x40>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800798a:	4b16      	ldr	r3, [pc, #88]	; (80079e4 <pbuf_realloc+0xc8>)
 800798c:	f240 220f 	movw	r2, #527	; 0x20f
 8007990:	4919      	ldr	r1, [pc, #100]	; (80079f8 <pbuf_realloc+0xdc>)
 8007992:	4816      	ldr	r0, [pc, #88]	; (80079ec <pbuf_realloc+0xd0>)
 8007994:	f004 ff3d 	bl	800c812 <iprintf>
 8007998:	e7e6      	b.n	8007968 <pbuf_realloc+0x4c>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800799a:	7b23      	ldrb	r3, [r4, #12]
 800799c:	b92b      	cbnz	r3, 80079aa <pbuf_realloc+0x8e>
 800799e:	428d      	cmp	r5, r1
 80079a0:	d003      	beq.n	80079aa <pbuf_realloc+0x8e>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80079a2:	7b63      	ldrb	r3, [r4, #13]
 80079a4:	f013 0f02 	tst.w	r3, #2
 80079a8:	d008      	beq.n	80079bc <pbuf_realloc+0xa0>
  q->len = rem_len;
 80079aa:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80079ac:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80079ae:	6820      	ldr	r0, [r4, #0]
 80079b0:	b108      	cbz	r0, 80079b6 <pbuf_realloc+0x9a>
    pbuf_free(q->next);
 80079b2:	f7ff fe5f 	bl	8007674 <pbuf_free>
  q->next = NULL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80079bc:	6863      	ldr	r3, [r4, #4]
 80079be:	1b1b      	subs	r3, r3, r4
 80079c0:	fa15 f183 	uxtah	r1, r5, r3
 80079c4:	b289      	uxth	r1, r1
 80079c6:	4620      	mov	r0, r4
 80079c8:	f7ff fab8 	bl	8006f3c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80079cc:	4604      	mov	r4, r0
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d1eb      	bne.n	80079aa <pbuf_realloc+0x8e>
 80079d2:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <pbuf_realloc+0xc8>)
 80079d4:	f240 221d 	movw	r2, #541	; 0x21d
 80079d8:	4908      	ldr	r1, [pc, #32]	; (80079fc <pbuf_realloc+0xe0>)
 80079da:	4804      	ldr	r0, [pc, #16]	; (80079ec <pbuf_realloc+0xd0>)
 80079dc:	f004 ff19 	bl	800c812 <iprintf>
 80079e0:	e7e3      	b.n	80079aa <pbuf_realloc+0x8e>
 80079e2:	bf00      	nop
 80079e4:	0800fe88 	.word	0x0800fe88
 80079e8:	0800ff00 	.word	0x0800ff00
 80079ec:	0800cd98 	.word	0x0800cd98
 80079f0:	0800fee8 	.word	0x0800fee8
 80079f4:	0800ff1c 	.word	0x0800ff1c
 80079f8:	0800ff30 	.word	0x0800ff30
 80079fc:	0800ff48 	.word	0x0800ff48

08007a00 <pbuf_clen>:
u16_t
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
 8007a00:	2300      	movs	r3, #0
  while (p != NULL) {
 8007a02:	e002      	b.n	8007a0a <pbuf_clen+0xa>
    ++len;
 8007a04:	3301      	adds	r3, #1
 8007a06:	b29b      	uxth	r3, r3
    p = p->next;
 8007a08:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d1fa      	bne.n	8007a04 <pbuf_clen+0x4>
  }
  return len;
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	4770      	bx	lr
	...

08007a14 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8007a14:	b198      	cbz	r0, 8007a3e <pbuf_ref+0x2a>
{
 8007a16:	b510      	push	{r4, lr}
 8007a18:	4604      	mov	r4, r0
    SYS_ARCH_INC(p->ref, 1);
 8007a1a:	f004 f991 	bl	800bd40 <sys_arch_protect>
 8007a1e:	89e3      	ldrh	r3, [r4, #14]
 8007a20:	3301      	adds	r3, #1
 8007a22:	81e3      	strh	r3, [r4, #14]
 8007a24:	f004 f998 	bl	800bd58 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007a28:	89e3      	ldrh	r3, [r4, #14]
 8007a2a:	b103      	cbz	r3, 8007a2e <pbuf_ref+0x1a>
 8007a2c:	bd10      	pop	{r4, pc}
 8007a2e:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <pbuf_ref+0x2c>)
 8007a30:	f240 3239 	movw	r2, #825	; 0x339
 8007a34:	4903      	ldr	r1, [pc, #12]	; (8007a44 <pbuf_ref+0x30>)
 8007a36:	4804      	ldr	r0, [pc, #16]	; (8007a48 <pbuf_ref+0x34>)
 8007a38:	f004 feeb 	bl	800c812 <iprintf>
  }
}
 8007a3c:	e7f6      	b.n	8007a2c <pbuf_ref+0x18>
 8007a3e:	4770      	bx	lr
 8007a40:	0800fe88 	.word	0x0800fe88
 8007a44:	0800ff64 	.word	0x0800ff64
 8007a48:	0800cd98 	.word	0x0800cd98

08007a4c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007a4c:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007a4e:	b110      	cbz	r0, 8007a56 <pbuf_cat+0xa>
 8007a50:	460d      	mov	r5, r1
 8007a52:	4604      	mov	r4, r0
 8007a54:	b961      	cbnz	r1, 8007a70 <pbuf_cat+0x24>
 8007a56:	4b15      	ldr	r3, [pc, #84]	; (8007aac <pbuf_cat+0x60>)
 8007a58:	f240 324d 	movw	r2, #845	; 0x34d
 8007a5c:	4914      	ldr	r1, [pc, #80]	; (8007ab0 <pbuf_cat+0x64>)
 8007a5e:	4815      	ldr	r0, [pc, #84]	; (8007ab4 <pbuf_cat+0x68>)
 8007a60:	f004 fed7 	bl	800c812 <iprintf>
 8007a64:	bd38      	pop	{r3, r4, r5, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8007a66:	892b      	ldrh	r3, [r5, #8]
 8007a68:	8921      	ldrh	r1, [r4, #8]
 8007a6a:	440b      	add	r3, r1
 8007a6c:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007a6e:	4614      	mov	r4, r2
 8007a70:	6822      	ldr	r2, [r4, #0]
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	d1f7      	bne.n	8007a66 <pbuf_cat+0x1a>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007a76:	8922      	ldrh	r2, [r4, #8]
 8007a78:	8963      	ldrh	r3, [r4, #10]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d006      	beq.n	8007a8c <pbuf_cat+0x40>
 8007a7e:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <pbuf_cat+0x60>)
 8007a80:	f240 3255 	movw	r2, #853	; 0x355
 8007a84:	490c      	ldr	r1, [pc, #48]	; (8007ab8 <pbuf_cat+0x6c>)
 8007a86:	480b      	ldr	r0, [pc, #44]	; (8007ab4 <pbuf_cat+0x68>)
 8007a88:	f004 fec3 	bl	800c812 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	b133      	cbz	r3, 8007a9e <pbuf_cat+0x52>
 8007a90:	4b06      	ldr	r3, [pc, #24]	; (8007aac <pbuf_cat+0x60>)
 8007a92:	f240 3256 	movw	r2, #854	; 0x356
 8007a96:	4909      	ldr	r1, [pc, #36]	; (8007abc <pbuf_cat+0x70>)
 8007a98:	4806      	ldr	r0, [pc, #24]	; (8007ab4 <pbuf_cat+0x68>)
 8007a9a:	f004 feba 	bl	800c812 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8007a9e:	892b      	ldrh	r3, [r5, #8]
 8007aa0:	8922      	ldrh	r2, [r4, #8]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007aa6:	6025      	str	r5, [r4, #0]
 8007aa8:	bd38      	pop	{r3, r4, r5, pc}
 8007aaa:	bf00      	nop
 8007aac:	0800fe88 	.word	0x0800fe88
 8007ab0:	0800fcd8 	.word	0x0800fcd8
 8007ab4:	0800cd98 	.word	0x0800cd98
 8007ab8:	0800fd10 	.word	0x0800fd10
 8007abc:	0800fd40 	.word	0x0800fd40

08007ac0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007ac4:	b150      	cbz	r0, 8007adc <pbuf_copy+0x1c>
 8007ac6:	460d      	mov	r5, r1
 8007ac8:	4607      	mov	r7, r0
 8007aca:	b139      	cbz	r1, 8007adc <pbuf_copy+0x1c>
 8007acc:	8902      	ldrh	r2, [r0, #8]
 8007ace:	890b      	ldrh	r3, [r1, #8]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d303      	bcc.n	8007adc <pbuf_copy+0x1c>
 8007ad4:	f04f 0800 	mov.w	r8, #0
 8007ad8:	4646      	mov	r6, r8
 8007ada:	e02c      	b.n	8007b36 <pbuf_copy+0x76>
 8007adc:	4b3f      	ldr	r3, [pc, #252]	; (8007bdc <pbuf_copy+0x11c>)
 8007ade:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007ae2:	493f      	ldr	r1, [pc, #252]	; (8007be0 <pbuf_copy+0x120>)
 8007ae4:	483f      	ldr	r0, [pc, #252]	; (8007be4 <pbuf_copy+0x124>)
 8007ae6:	f004 fe94 	bl	800c812 <iprintf>
 8007aea:	f06f 000f 	mvn.w	r0, #15
 8007aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007af2:	1b9b      	subs	r3, r3, r6
 8007af4:	b29c      	uxth	r4, r3
 8007af6:	e026      	b.n	8007b46 <pbuf_copy+0x86>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007af8:	4b38      	ldr	r3, [pc, #224]	; (8007bdc <pbuf_copy+0x11c>)
 8007afa:	f240 32cd 	movw	r2, #973	; 0x3cd
 8007afe:	493a      	ldr	r1, [pc, #232]	; (8007be8 <pbuf_copy+0x128>)
 8007b00:	4838      	ldr	r0, [pc, #224]	; (8007be4 <pbuf_copy+0x124>)
 8007b02:	f004 fe86 	bl	800c812 <iprintf>
 8007b06:	e02d      	b.n	8007b64 <pbuf_copy+0xa4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007b08:	4b34      	ldr	r3, [pc, #208]	; (8007bdc <pbuf_copy+0x11c>)
 8007b0a:	f240 32ce 	movw	r2, #974	; 0x3ce
 8007b0e:	4937      	ldr	r1, [pc, #220]	; (8007bec <pbuf_copy+0x12c>)
 8007b10:	4834      	ldr	r0, [pc, #208]	; (8007be4 <pbuf_copy+0x124>)
 8007b12:	f004 fe7e 	bl	800c812 <iprintf>
 8007b16:	e028      	b.n	8007b6a <pbuf_copy+0xaa>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8007b18:	897b      	ldrh	r3, [r7, #10]
 8007b1a:	429e      	cmp	r6, r3
 8007b1c:	d02c      	beq.n	8007b78 <pbuf_copy+0xb8>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007b1e:	b11d      	cbz	r5, 8007b28 <pbuf_copy+0x68>
 8007b20:	896a      	ldrh	r2, [r5, #10]
 8007b22:	892b      	ldrh	r3, [r5, #8]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d039      	beq.n	8007b9c <pbuf_copy+0xdc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007b28:	b11f      	cbz	r7, 8007b32 <pbuf_copy+0x72>
 8007b2a:	897a      	ldrh	r2, [r7, #10]
 8007b2c:	893b      	ldrh	r3, [r7, #8]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d042      	beq.n	8007bb8 <pbuf_copy+0xf8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007b32:	2d00      	cmp	r5, #0
 8007b34:	d04e      	beq.n	8007bd4 <pbuf_copy+0x114>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007b36:	897b      	ldrh	r3, [r7, #10]
 8007b38:	1b99      	subs	r1, r3, r6
 8007b3a:	896c      	ldrh	r4, [r5, #10]
 8007b3c:	eba4 0208 	sub.w	r2, r4, r8
 8007b40:	4291      	cmp	r1, r2
 8007b42:	dbd6      	blt.n	8007af2 <pbuf_copy+0x32>
      len = p_from->len - offset_from;
 8007b44:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	6869      	ldr	r1, [r5, #4]
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4441      	add	r1, r8
 8007b4e:	4430      	add	r0, r6
 8007b50:	f005 f883 	bl	800cc5a <memcpy>
    offset_to += len;
 8007b54:	4426      	add	r6, r4
 8007b56:	b2b6      	uxth	r6, r6
    offset_from += len;
 8007b58:	4444      	add	r4, r8
 8007b5a:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007b5e:	897b      	ldrh	r3, [r7, #10]
 8007b60:	429e      	cmp	r6, r3
 8007b62:	d8c9      	bhi.n	8007af8 <pbuf_copy+0x38>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007b64:	896b      	ldrh	r3, [r5, #10]
 8007b66:	4598      	cmp	r8, r3
 8007b68:	d8ce      	bhi.n	8007b08 <pbuf_copy+0x48>
    if (offset_from >= p_from->len) {
 8007b6a:	896b      	ldrh	r3, [r5, #10]
 8007b6c:	4598      	cmp	r8, r3
 8007b6e:	d3d3      	bcc.n	8007b18 <pbuf_copy+0x58>
      p_from = p_from->next;
 8007b70:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 8007b72:	f04f 0800 	mov.w	r8, #0
 8007b76:	e7cf      	b.n	8007b18 <pbuf_copy+0x58>
      p_to = p_to->next;
 8007b78:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007b7a:	b10f      	cbz	r7, 8007b80 <pbuf_copy+0xc0>
      offset_to = 0;
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	e7ce      	b.n	8007b1e <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007b80:	b90d      	cbnz	r5, 8007b86 <pbuf_copy+0xc6>
      offset_to = 0;
 8007b82:	2600      	movs	r6, #0
 8007b84:	e7cb      	b.n	8007b1e <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007b86:	4b15      	ldr	r3, [pc, #84]	; (8007bdc <pbuf_copy+0x11c>)
 8007b88:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8007b8c:	4918      	ldr	r1, [pc, #96]	; (8007bf0 <pbuf_copy+0x130>)
 8007b8e:	4815      	ldr	r0, [pc, #84]	; (8007be4 <pbuf_copy+0x124>)
 8007b90:	f004 fe3f 	bl	800c812 <iprintf>
 8007b94:	f06f 000f 	mvn.w	r0, #15
 8007b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0c2      	beq.n	8007b28 <pbuf_copy+0x68>
 8007ba2:	4b0e      	ldr	r3, [pc, #56]	; (8007bdc <pbuf_copy+0x11c>)
 8007ba4:	f240 32de 	movw	r2, #990	; 0x3de
 8007ba8:	4912      	ldr	r1, [pc, #72]	; (8007bf4 <pbuf_copy+0x134>)
 8007baa:	480e      	ldr	r0, [pc, #56]	; (8007be4 <pbuf_copy+0x124>)
 8007bac:	f004 fe31 	bl	800c812 <iprintf>
 8007bb0:	f06f 0005 	mvn.w	r0, #5
 8007bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0b9      	beq.n	8007b32 <pbuf_copy+0x72>
 8007bbe:	4b07      	ldr	r3, [pc, #28]	; (8007bdc <pbuf_copy+0x11c>)
 8007bc0:	f240 32e3 	movw	r2, #995	; 0x3e3
 8007bc4:	490b      	ldr	r1, [pc, #44]	; (8007bf4 <pbuf_copy+0x134>)
 8007bc6:	4807      	ldr	r0, [pc, #28]	; (8007be4 <pbuf_copy+0x124>)
 8007bc8:	f004 fe23 	bl	800c812 <iprintf>
 8007bcc:	f06f 0005 	mvn.w	r0, #5
 8007bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007bd4:	2000      	movs	r0, #0
}
 8007bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bda:	bf00      	nop
 8007bdc:	0800fe88 	.word	0x0800fe88
 8007be0:	0800fd50 	.word	0x0800fd50
 8007be4:	0800cd98 	.word	0x0800cd98
 8007be8:	0800fd80 	.word	0x0800fd80
 8007bec:	0800fd98 	.word	0x0800fd98
 8007bf0:	0800fdb4 	.word	0x0800fdb4
 8007bf4:	0800fdc4 	.word	0x0800fdc4

08007bf8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007bfc:	b128      	cbz	r0, 8007c0a <pbuf_copy_partial+0x12>
 8007bfe:	460f      	mov	r7, r1
 8007c00:	4690      	mov	r8, r2
 8007c02:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007c04:	b161      	cbz	r1, 8007c20 <pbuf_copy_partial+0x28>
 8007c06:	2600      	movs	r6, #0
 8007c08:	e027      	b.n	8007c5a <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007c0a:	4b1a      	ldr	r3, [pc, #104]	; (8007c74 <pbuf_copy_partial+0x7c>)
 8007c0c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007c10:	4919      	ldr	r1, [pc, #100]	; (8007c78 <pbuf_copy_partial+0x80>)
 8007c12:	481a      	ldr	r0, [pc, #104]	; (8007c7c <pbuf_copy_partial+0x84>)
 8007c14:	f004 fdfd 	bl	800c812 <iprintf>
 8007c18:	2600      	movs	r6, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007c20:	4b14      	ldr	r3, [pc, #80]	; (8007c74 <pbuf_copy_partial+0x7c>)
 8007c22:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007c26:	4916      	ldr	r1, [pc, #88]	; (8007c80 <pbuf_copy_partial+0x88>)
 8007c28:	4814      	ldr	r0, [pc, #80]	; (8007c7c <pbuf_copy_partial+0x84>)
 8007c2a:	f004 fdf2 	bl	800c812 <iprintf>
 8007c2e:	2600      	movs	r6, #0
 8007c30:	e7f3      	b.n	8007c1a <pbuf_copy_partial+0x22>
      buf_copy_len = p->len - offset;
 8007c32:	896a      	ldrh	r2, [r5, #10]
 8007c34:	1ad2      	subs	r2, r2, r3
 8007c36:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 8007c38:	45a0      	cmp	r8, r4
 8007c3a:	d200      	bcs.n	8007c3e <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 8007c3c:	4644      	mov	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007c3e:	6869      	ldr	r1, [r5, #4]
 8007c40:	4622      	mov	r2, r4
 8007c42:	4419      	add	r1, r3
 8007c44:	19b8      	adds	r0, r7, r6
 8007c46:	f005 f808 	bl	800cc5a <memcpy>
      copied_total += buf_copy_len;
 8007c4a:	4426      	add	r6, r4
 8007c4c:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 8007c4e:	eba8 0404 	sub.w	r4, r8, r4
 8007c52:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8007c56:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007c58:	682d      	ldr	r5, [r5, #0]
 8007c5a:	f1b8 0f00 	cmp.w	r8, #0
 8007c5e:	d0dc      	beq.n	8007c1a <pbuf_copy_partial+0x22>
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	d0da      	beq.n	8007c1a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0e4      	beq.n	8007c32 <pbuf_copy_partial+0x3a>
 8007c68:	8969      	ldrh	r1, [r5, #10]
 8007c6a:	428b      	cmp	r3, r1
 8007c6c:	d3e1      	bcc.n	8007c32 <pbuf_copy_partial+0x3a>
      offset -= p->len;
 8007c6e:	1a5b      	subs	r3, r3, r1
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	e7f1      	b.n	8007c58 <pbuf_copy_partial+0x60>
 8007c74:	0800fe88 	.word	0x0800fe88
 8007c78:	0800fdf0 	.word	0x0800fdf0
 8007c7c:	0800cd98 	.word	0x0800cd98
 8007c80:	0800fe10 	.word	0x0800fe10

08007c84 <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007c84:	e000      	b.n	8007c88 <tcp_remove_listener+0x4>
 8007c86:	68c0      	ldr	r0, [r0, #12]
 8007c88:	b128      	cbz	r0, 8007c96 <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 8007c8a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007c8c:	428b      	cmp	r3, r1
 8007c8e:	d1fa      	bne.n	8007c86 <tcp_remove_listener+0x2>
         pcb->listener = NULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	6783      	str	r3, [r0, #120]	; 0x78
 8007c94:	e7f7      	b.n	8007c86 <tcp_remove_listener+0x2>
      }
   }
}
 8007c96:	4770      	bx	lr

08007c98 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007c98:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 8007c9a:	2400      	movs	r4, #0
 8007c9c:	e009      	b.n	8007cb2 <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007c9e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007ca2:	4b14      	ldr	r3, [pc, #80]	; (8007cf4 <tcp_new_port+0x5c>)
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	e00c      	b.n	8007cc2 <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007ca8:	3401      	adds	r4, #1
 8007caa:	b2a4      	uxth	r4, r4
 8007cac:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8007cb0:	d21e      	bcs.n	8007cf0 <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8007cb2:	4a10      	ldr	r2, [pc, #64]	; (8007cf4 <tcp_new_port+0x5c>)
 8007cb4:	8813      	ldrh	r3, [r2, #0]
 8007cb6:	1c59      	adds	r1, r3, #1
 8007cb8:	8011      	strh	r1, [r2, #0]
 8007cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d0ed      	beq.n	8007c9e <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	2803      	cmp	r0, #3
 8007cc6:	d80e      	bhi.n	8007ce6 <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007cc8:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <tcp_new_port+0x60>)
 8007cca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	b133      	cbz	r3, 8007ce0 <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 8007cd2:	8ad9      	ldrh	r1, [r3, #22]
 8007cd4:	4a07      	ldr	r2, [pc, #28]	; (8007cf4 <tcp_new_port+0x5c>)
 8007cd6:	8812      	ldrh	r2, [r2, #0]
 8007cd8:	4291      	cmp	r1, r2
 8007cda:	d0e5      	beq.n	8007ca8 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	e7f7      	b.n	8007cd0 <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	b2c0      	uxtb	r0, r0
 8007ce4:	e7ee      	b.n	8007cc4 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007ce6:	4b03      	ldr	r3, [pc, #12]	; (8007cf4 <tcp_new_port+0x5c>)
 8007ce8:	8818      	ldrh	r0, [r3, #0]
}
 8007cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cee:	4770      	bx	lr
          return 0;
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	e7fa      	b.n	8007cea <tcp_new_port+0x52>
 8007cf4:	2000000c 	.word	0x2000000c
 8007cf8:	080100b0 	.word	0x080100b0

08007cfc <tcp_listen_closed>:
{
 8007cfc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007cfe:	4605      	mov	r5, r0
 8007d00:	b150      	cbz	r0, 8007d18 <tcp_listen_closed+0x1c>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007d02:	7d2b      	ldrb	r3, [r5, #20]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d005      	beq.n	8007d14 <tcp_listen_closed+0x18>
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <tcp_listen_closed+0x40>)
 8007d0a:	22c1      	movs	r2, #193	; 0xc1
 8007d0c:	490c      	ldr	r1, [pc, #48]	; (8007d40 <tcp_listen_closed+0x44>)
 8007d0e:	480d      	ldr	r0, [pc, #52]	; (8007d44 <tcp_listen_closed+0x48>)
 8007d10:	f004 fd7f 	bl	800c812 <iprintf>
{
 8007d14:	2401      	movs	r4, #1
 8007d16:	e00e      	b.n	8007d36 <tcp_listen_closed+0x3a>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007d18:	4b08      	ldr	r3, [pc, #32]	; (8007d3c <tcp_listen_closed+0x40>)
 8007d1a:	22c0      	movs	r2, #192	; 0xc0
 8007d1c:	490a      	ldr	r1, [pc, #40]	; (8007d48 <tcp_listen_closed+0x4c>)
 8007d1e:	4809      	ldr	r0, [pc, #36]	; (8007d44 <tcp_listen_closed+0x48>)
 8007d20:	f004 fd77 	bl	800c812 <iprintf>
 8007d24:	e7ed      	b.n	8007d02 <tcp_listen_closed+0x6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007d26:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <tcp_listen_closed+0x50>)
 8007d28:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	6818      	ldr	r0, [r3, #0]
 8007d30:	f7ff ffa8 	bl	8007c84 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007d34:	3401      	adds	r4, #1
 8007d36:	2c03      	cmp	r4, #3
 8007d38:	d9f5      	bls.n	8007d26 <tcp_listen_closed+0x2a>
}
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	08010038 	.word	0x08010038
 8007d40:	08010074 	.word	0x08010074
 8007d44:	0800cd98 	.word	0x0800cd98
 8007d48:	08010068 	.word	0x08010068
 8007d4c:	080100b0 	.word	0x080100b0

08007d50 <tcp_close_shutdown_fin>:
{
 8007d50:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007d52:	4604      	mov	r4, r0
 8007d54:	b140      	cbz	r0, 8007d68 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8007d56:	7d23      	ldrb	r3, [r4, #20]
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d01a      	beq.n	8007d92 <tcp_close_shutdown_fin+0x42>
 8007d5c:	2b07      	cmp	r3, #7
 8007d5e:	d021      	beq.n	8007da4 <tcp_close_shutdown_fin+0x54>
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d009      	beq.n	8007d78 <tcp_close_shutdown_fin+0x28>
    return ERR_OK;
 8007d64:	2500      	movs	r5, #0
 8007d66:	e012      	b.n	8007d8e <tcp_close_shutdown_fin+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007d68:	4b18      	ldr	r3, [pc, #96]	; (8007dcc <tcp_close_shutdown_fin+0x7c>)
 8007d6a:	f240 124d 	movw	r2, #333	; 0x14d
 8007d6e:	4918      	ldr	r1, [pc, #96]	; (8007dd0 <tcp_close_shutdown_fin+0x80>)
 8007d70:	4818      	ldr	r0, [pc, #96]	; (8007dd4 <tcp_close_shutdown_fin+0x84>)
 8007d72:	f004 fd4e 	bl	800c812 <iprintf>
 8007d76:	e7ee      	b.n	8007d56 <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f003 f891 	bl	800aea0 <tcp_send_fin>
    if (err == ERR_OK) {
 8007d7e:	4605      	mov	r5, r0
 8007d80:	b908      	cbnz	r0, 8007d86 <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8007d82:	2305      	movs	r3, #5
 8007d84:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 8007d86:	b1b5      	cbz	r5, 8007db6 <tcp_close_shutdown_fin+0x66>
  } else if (err == ERR_MEM) {
 8007d88:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007d8c:	d017      	beq.n	8007dbe <tcp_close_shutdown_fin+0x6e>
}
 8007d8e:	4628      	mov	r0, r5
 8007d90:	bd38      	pop	{r3, r4, r5, pc}
    err = tcp_send_fin(pcb);
 8007d92:	4620      	mov	r0, r4
 8007d94:	f003 f884 	bl	800aea0 <tcp_send_fin>
    if (err == ERR_OK) {
 8007d98:	4605      	mov	r5, r0
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d1f3      	bne.n	8007d86 <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8007d9e:	2305      	movs	r3, #5
 8007da0:	7523      	strb	r3, [r4, #20]
 8007da2:	e7f0      	b.n	8007d86 <tcp_close_shutdown_fin+0x36>
    err = tcp_send_fin(pcb);
 8007da4:	4620      	mov	r0, r4
 8007da6:	f003 f87b 	bl	800aea0 <tcp_send_fin>
    if (err == ERR_OK) {
 8007daa:	4605      	mov	r5, r0
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d1ea      	bne.n	8007d86 <tcp_close_shutdown_fin+0x36>
      pcb->state = LAST_ACK;
 8007db0:	2309      	movs	r3, #9
 8007db2:	7523      	strb	r3, [r4, #20]
 8007db4:	e7e7      	b.n	8007d86 <tcp_close_shutdown_fin+0x36>
    tcp_output(pcb);
 8007db6:	4620      	mov	r0, r4
 8007db8:	f003 f8ce 	bl	800af58 <tcp_output>
 8007dbc:	e7e7      	b.n	8007d8e <tcp_close_shutdown_fin+0x3e>
    pcb->flags |= TF_CLOSEPEND;
 8007dbe:	7ea3      	ldrb	r3, [r4, #26]
 8007dc0:	f043 0308 	orr.w	r3, r3, #8
 8007dc4:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8007dc6:	2500      	movs	r5, #0
 8007dc8:	e7e1      	b.n	8007d8e <tcp_close_shutdown_fin+0x3e>
 8007dca:	bf00      	nop
 8007dcc:	08010038 	.word	0x08010038
 8007dd0:	08010068 	.word	0x08010068
 8007dd4:	0800cd98 	.word	0x0800cd98

08007dd8 <tcp_init>:
{
 8007dd8:	4770      	bx	lr
	...

08007ddc <tcp_bind>:
{
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	4605      	mov	r5, r0
  if (ipaddr == NULL) {
 8007de0:	460c      	mov	r4, r1
 8007de2:	b171      	cbz	r1, 8007e02 <tcp_bind+0x26>
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8007de4:	2d00      	cmp	r5, #0
 8007de6:	d039      	beq.n	8007e5c <tcp_bind+0x80>
 8007de8:	2c00      	cmp	r4, #0
 8007dea:	d03a      	beq.n	8007e62 <tcp_bind+0x86>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007dec:	7d2b      	ldrb	r3, [r5, #20]
 8007dee:	b953      	cbnz	r3, 8007e06 <tcp_bind+0x2a>
  if (port == 0) {
 8007df0:	b19a      	cbz	r2, 8007e1a <tcp_bind+0x3e>
 8007df2:	2600      	movs	r6, #0
    for (i = 0; i < max_pcb_list; i++) {
 8007df4:	2e03      	cmp	r6, #3
 8007df6:	dc14      	bgt.n	8007e22 <tcp_bind+0x46>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007df8:	4b21      	ldr	r3, [pc, #132]	; (8007e80 <tcp_bind+0xa4>)
 8007dfa:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	e01c      	b.n	8007e3c <tcp_bind+0x60>
    ipaddr = IP4_ADDR_ANY;
 8007e02:	4c20      	ldr	r4, [pc, #128]	; (8007e84 <tcp_bind+0xa8>)
 8007e04:	e7ee      	b.n	8007de4 <tcp_bind+0x8>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007e06:	4b20      	ldr	r3, [pc, #128]	; (8007e88 <tcp_bind+0xac>)
 8007e08:	f44f 7211 	mov.w	r2, #580	; 0x244
 8007e0c:	491f      	ldr	r1, [pc, #124]	; (8007e8c <tcp_bind+0xb0>)
 8007e0e:	4820      	ldr	r0, [pc, #128]	; (8007e90 <tcp_bind+0xb4>)
 8007e10:	f004 fcff 	bl	800c812 <iprintf>
 8007e14:	f06f 0005 	mvn.w	r0, #5
 8007e18:	bd70      	pop	{r4, r5, r6, pc}
    port = tcp_new_port();
 8007e1a:	f7ff ff3d 	bl	8007c98 <tcp_new_port>
    if (port == 0) {
 8007e1e:	4602      	mov	r2, r0
 8007e20:	b310      	cbz	r0, 8007e68 <tcp_bind+0x8c>
  if (!ip_addr_isany(ipaddr)) {
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	b103      	cbz	r3, 8007e28 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007e26:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 8007e28:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007e2a:	4b1a      	ldr	r3, [pc, #104]	; (8007e94 <tcp_bind+0xb8>)
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	60ea      	str	r2, [r5, #12]
 8007e30:	601d      	str	r5, [r3, #0]
 8007e32:	f003 fbf9 	bl	800b628 <tcp_timer_needed>
  return ERR_OK;
 8007e36:	2000      	movs	r0, #0
 8007e38:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	b163      	cbz	r3, 8007e58 <tcp_bind+0x7c>
        if (cpcb->local_port == port) {
 8007e3e:	8ad9      	ldrh	r1, [r3, #22]
 8007e40:	428a      	cmp	r2, r1
 8007e42:	d1fa      	bne.n	8007e3a <tcp_bind+0x5e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007e44:	b19b      	cbz	r3, 8007e6e <tcp_bind+0x92>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007e46:	6819      	ldr	r1, [r3, #0]
 8007e48:	b1a1      	cbz	r1, 8007e74 <tcp_bind+0x98>
                ip_addr_isany(ipaddr) ||
 8007e4a:	6820      	ldr	r0, [r4, #0]
 8007e4c:	b1a8      	cbz	r0, 8007e7a <tcp_bind+0x9e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007e4e:	4281      	cmp	r1, r0
 8007e50:	d1f3      	bne.n	8007e3a <tcp_bind+0x5e>
              return ERR_USE;
 8007e52:	f06f 0007 	mvn.w	r0, #7
}
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8007e58:	3601      	adds	r6, #1
 8007e5a:	e7cb      	b.n	8007df4 <tcp_bind+0x18>
    return ERR_VAL;
 8007e5c:	f06f 0005 	mvn.w	r0, #5
 8007e60:	bd70      	pop	{r4, r5, r6, pc}
 8007e62:	f06f 0005 	mvn.w	r0, #5
 8007e66:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_BUF;
 8007e68:	f06f 0001 	mvn.w	r0, #1
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}
              return ERR_USE;
 8007e6e:	f06f 0007 	mvn.w	r0, #7
 8007e72:	bd70      	pop	{r4, r5, r6, pc}
 8007e74:	f06f 0007 	mvn.w	r0, #7
 8007e78:	bd70      	pop	{r4, r5, r6, pc}
 8007e7a:	f06f 0007 	mvn.w	r0, #7
 8007e7e:	bd70      	pop	{r4, r5, r6, pc}
 8007e80:	080100b0 	.word	0x080100b0
 8007e84:	0800f660 	.word	0x0800f660
 8007e88:	08010038 	.word	0x08010038
 8007e8c:	0800ffbc 	.word	0x0800ffbc
 8007e90:	0800cd98 	.word	0x0800cd98
 8007e94:	200088a8 	.word	0x200088a8

08007e98 <tcp_listen_with_backlog_and_err>:
{
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007e9c:	7d03      	ldrb	r3, [r0, #20]
 8007e9e:	bb23      	cbnz	r3, 8007eea <tcp_listen_with_backlog_and_err+0x52>
 8007ea0:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d042      	beq.n	8007f2c <tcp_listen_with_backlog_and_err+0x94>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007ea6:	2002      	movs	r0, #2
 8007ea8:	f7ff f9f4 	bl	8007294 <memp_malloc>
  if (lpcb == NULL) {
 8007eac:	4605      	mov	r5, r0
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d043      	beq.n	8007f3a <tcp_listen_with_backlog_and_err+0xa2>
  lpcb->callback_arg = pcb->callback_arg;
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8007eb6:	8ae3      	ldrh	r3, [r4, #22]
 8007eb8:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8007ebe:	7d63      	ldrb	r3, [r4, #21]
 8007ec0:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8007ec2:	7a23      	ldrb	r3, [r4, #8]
 8007ec4:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8007ec6:	7aa3      	ldrb	r3, [r4, #10]
 8007ec8:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
 8007eca:	7a63      	ldrb	r3, [r4, #9]
 8007ecc:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 8007ed2:	8ae3      	ldrh	r3, [r4, #22]
 8007ed4:	b1e3      	cbz	r3, 8007f10 <tcp_listen_with_backlog_and_err+0x78>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007ed6:	4b1a      	ldr	r3, [pc, #104]	; (8007f40 <tcp_listen_with_backlog_and_err+0xa8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	429c      	cmp	r4, r3
 8007edc:	d010      	beq.n	8007f00 <tcp_listen_with_backlog_and_err+0x68>
 8007ede:	b1ab      	cbz	r3, 8007f0c <tcp_listen_with_backlog_and_err+0x74>
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	4294      	cmp	r4, r2
 8007ee4:	d010      	beq.n	8007f08 <tcp_listen_with_backlog_and_err+0x70>
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	e7f9      	b.n	8007ede <tcp_listen_with_backlog_and_err+0x46>
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007eea:	4b16      	ldr	r3, [pc, #88]	; (8007f44 <tcp_listen_with_backlog_and_err+0xac>)
 8007eec:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8007ef0:	4915      	ldr	r1, [pc, #84]	; (8007f48 <tcp_listen_with_backlog_and_err+0xb0>)
 8007ef2:	4816      	ldr	r0, [pc, #88]	; (8007f4c <tcp_listen_with_backlog_and_err+0xb4>)
 8007ef4:	f004 fc8d 	bl	800c812 <iprintf>
 8007ef8:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8007efc:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007efe:	e018      	b.n	8007f32 <tcp_listen_with_backlog_and_err+0x9a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	4b0f      	ldr	r3, [pc, #60]	; (8007f40 <tcp_listen_with_backlog_and_err+0xa8>)
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e001      	b.n	8007f0c <tcp_listen_with_backlog_and_err+0x74>
 8007f08:	68e2      	ldr	r2, [r4, #12]
 8007f0a:	60da      	str	r2, [r3, #12]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8007f10:	4621      	mov	r1, r4
 8007f12:	2001      	movs	r0, #1
 8007f14:	f7ff f9d8 	bl	80072c8 <memp_free>
  lpcb->accept = tcp_accept_null;
 8007f18:	4b0d      	ldr	r3, [pc, #52]	; (8007f50 <tcp_listen_with_backlog_and_err+0xb8>)
 8007f1a:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <tcp_listen_with_backlog_and_err+0xbc>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	60ea      	str	r2, [r5, #12]
 8007f22:	601d      	str	r5, [r3, #0]
 8007f24:	f003 fb80 	bl	800b628 <tcp_timer_needed>
  res = ERR_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	e002      	b.n	8007f32 <tcp_listen_with_backlog_and_err+0x9a>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8007f2c:	4605      	mov	r5, r0
    res = ERR_ALREADY;
 8007f2e:	f06f 0308 	mvn.w	r3, #8
  if (err != NULL) {
 8007f32:	b106      	cbz	r6, 8007f36 <tcp_listen_with_backlog_and_err+0x9e>
    *err = res;
 8007f34:	7033      	strb	r3, [r6, #0]
}
 8007f36:	4628      	mov	r0, r5
 8007f38:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 8007f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3e:	e7f8      	b.n	8007f32 <tcp_listen_with_backlog_and_err+0x9a>
 8007f40:	200088a8 	.word	0x200088a8
 8007f44:	08010038 	.word	0x08010038
 8007f48:	0801008c 	.word	0x0801008c
 8007f4c:	0800cd98 	.word	0x0800cd98
 8007f50:	08008a5f 	.word	0x08008a5f
 8007f54:	200088a4 	.word	0x200088a4

08007f58 <tcp_update_rcv_ann_wnd>:
{
 8007f58:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007f5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f5c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 8007f5e:	192a      	adds	r2, r5, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007f60:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007f62:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8007f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f68:	d901      	bls.n	8007f6e <tcp_update_rcv_ann_wnd+0x16>
 8007f6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f6e:	440b      	add	r3, r1
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	db02      	blt.n	8007f7c <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007f76:	8544      	strh	r4, [r0, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007f78:	1a50      	subs	r0, r2, r1
 8007f7a:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007f7c:	1a6b      	subs	r3, r5, r1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dd03      	ble.n	8007f8a <tcp_update_rcv_ann_wnd+0x32>
      pcb->rcv_ann_wnd = 0;
 8007f82:	2200      	movs	r2, #0
 8007f84:	8542      	strh	r2, [r0, #42]	; 0x2a
    return 0;
 8007f86:	4610      	mov	r0, r2
 8007f88:	bd38      	pop	{r3, r4, r5, pc}
 8007f8a:	4604      	mov	r4, r0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007f8c:	1b4d      	subs	r5, r1, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007f8e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007f92:	d202      	bcs.n	8007f9a <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007f94:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8007f96:	2000      	movs	r0, #0
}
 8007f98:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007f9a:	4b04      	ldr	r3, [pc, #16]	; (8007fac <tcp_update_rcv_ann_wnd+0x54>)
 8007f9c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8007fa0:	4903      	ldr	r1, [pc, #12]	; (8007fb0 <tcp_update_rcv_ann_wnd+0x58>)
 8007fa2:	4804      	ldr	r0, [pc, #16]	; (8007fb4 <tcp_update_rcv_ann_wnd+0x5c>)
 8007fa4:	f004 fc35 	bl	800c812 <iprintf>
 8007fa8:	e7f4      	b.n	8007f94 <tcp_update_rcv_ann_wnd+0x3c>
 8007faa:	bf00      	nop
 8007fac:	08010038 	.word	0x08010038
 8007fb0:	08010330 	.word	0x08010330
 8007fb4:	0800cd98 	.word	0x0800cd98

08007fb8 <tcp_recved>:
{
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4605      	mov	r5, r0
 8007fbc:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007fbe:	7d03      	ldrb	r3, [r0, #20]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d010      	beq.n	8007fe6 <tcp_recved+0x2e>
  pcb->rcv_wnd += len;
 8007fc4:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 8007fc6:	4421      	add	r1, r4
 8007fc8:	b289      	uxth	r1, r1
 8007fca:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8007fcc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007fd0:	d911      	bls.n	8007ff6 <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fd6:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007fd8:	4628      	mov	r0, r5
 8007fda:	f7ff ffbd 	bl	8007f58 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007fde:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007fe2:	da1b      	bge.n	800801c <tcp_recved+0x64>
 8007fe4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007fe6:	4b11      	ldr	r3, [pc, #68]	; (800802c <tcp_recved+0x74>)
 8007fe8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007fec:	4910      	ldr	r1, [pc, #64]	; (8008030 <tcp_recved+0x78>)
 8007fee:	4811      	ldr	r0, [pc, #68]	; (8008034 <tcp_recved+0x7c>)
 8007ff0:	f004 fc0f 	bl	800c812 <iprintf>
 8007ff4:	e7e6      	b.n	8007fc4 <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	d1ee      	bne.n	8007fd8 <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8007ffa:	7d2b      	ldrb	r3, [r5, #20]
 8007ffc:	2b07      	cmp	r3, #7
 8007ffe:	d009      	beq.n	8008014 <tcp_recved+0x5c>
 8008000:	2b09      	cmp	r3, #9
 8008002:	d007      	beq.n	8008014 <tcp_recved+0x5c>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8008004:	4b09      	ldr	r3, [pc, #36]	; (800802c <tcp_recved+0x74>)
 8008006:	f240 322d 	movw	r2, #813	; 0x32d
 800800a:	490b      	ldr	r1, [pc, #44]	; (8008038 <tcp_recved+0x80>)
 800800c:	4809      	ldr	r0, [pc, #36]	; (8008034 <tcp_recved+0x7c>)
 800800e:	f004 fc00 	bl	800c812 <iprintf>
 8008012:	e7e1      	b.n	8007fd8 <tcp_recved+0x20>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008018:	852b      	strh	r3, [r5, #40]	; 0x28
 800801a:	e7dd      	b.n	8007fd8 <tcp_recved+0x20>
    tcp_ack_now(pcb);
 800801c:	7eab      	ldrb	r3, [r5, #26]
 800801e:	f043 0302 	orr.w	r3, r3, #2
 8008022:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 8008024:	4628      	mov	r0, r5
 8008026:	f002 ff97 	bl	800af58 <tcp_output>
}
 800802a:	e7db      	b.n	8007fe4 <tcp_recved+0x2c>
 800802c:	08010038 	.word	0x08010038
 8008030:	0801015c 	.word	0x0801015c
 8008034:	0800cd98 	.word	0x0800cd98
 8008038:	08010184 	.word	0x08010184

0800803c <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 800803c:	b150      	cbz	r0, 8008054 <tcp_seg_free+0x18>
{
 800803e:	b510      	push	{r4, lr}
 8008040:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8008042:	6840      	ldr	r0, [r0, #4]
 8008044:	b108      	cbz	r0, 800804a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8008046:	f7ff fb15 	bl	8007674 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800804a:	4621      	mov	r1, r4
 800804c:	2003      	movs	r0, #3
 800804e:	f7ff f93b 	bl	80072c8 <memp_free>
 8008052:	bd10      	pop	{r4, pc}
 8008054:	4770      	bx	lr

08008056 <tcp_segs_free>:
  while (seg != NULL) {
 8008056:	b138      	cbz	r0, 8008068 <tcp_segs_free+0x12>
{
 8008058:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 800805a:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800805c:	f7ff ffee 	bl	800803c <tcp_seg_free>
    seg = next;
 8008060:	4620      	mov	r0, r4
  while (seg != NULL) {
 8008062:	2c00      	cmp	r4, #0
 8008064:	d1f9      	bne.n	800805a <tcp_segs_free+0x4>
}
 8008066:	bd10      	pop	{r4, pc}
 8008068:	4770      	bx	lr

0800806a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800806a:	b538      	push	{r3, r4, r5, lr}
 800806c:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800806e:	2003      	movs	r0, #3
 8008070:	f7ff f910 	bl	8007294 <memp_malloc>
  if (cseg == NULL) {
 8008074:	4604      	mov	r4, r0
 8008076:	b150      	cbz	r0, 800808e <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008078:	6828      	ldr	r0, [r5, #0]
 800807a:	6869      	ldr	r1, [r5, #4]
 800807c:	68aa      	ldr	r2, [r5, #8]
 800807e:	68eb      	ldr	r3, [r5, #12]
 8008080:	6020      	str	r0, [r4, #0]
 8008082:	6061      	str	r1, [r4, #4]
 8008084:	60a2      	str	r2, [r4, #8]
 8008086:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8008088:	6860      	ldr	r0, [r4, #4]
 800808a:	f7ff fcc3 	bl	8007a14 <pbuf_ref>
  return cseg;
}
 800808e:	4620      	mov	r0, r4
 8008090:	bd38      	pop	{r3, r4, r5, pc}

08008092 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008092:	b100      	cbz	r0, 8008096 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8008094:	6101      	str	r1, [r0, #16]
 8008096:	4770      	bx	lr

08008098 <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 8008098:	b180      	cbz	r0, 80080bc <tcp_recv+0x24>
{
 800809a:	b538      	push	{r3, r4, r5, lr}
 800809c:	4604      	mov	r4, r0
 800809e:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80080a0:	7d03      	ldrb	r3, [r0, #20]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d002      	beq.n	80080ac <tcp_recv+0x14>
    pcb->recv = recv;
 80080a6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80080ac:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <tcp_recv+0x28>)
 80080ae:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80080b2:	4904      	ldr	r1, [pc, #16]	; (80080c4 <tcp_recv+0x2c>)
 80080b4:	4804      	ldr	r0, [pc, #16]	; (80080c8 <tcp_recv+0x30>)
 80080b6:	f004 fbac 	bl	800c812 <iprintf>
 80080ba:	e7f4      	b.n	80080a6 <tcp_recv+0xe>
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	08010038 	.word	0x08010038
 80080c4:	08010134 	.word	0x08010134
 80080c8:	0800cd98 	.word	0x0800cd98

080080cc <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 80080cc:	b178      	cbz	r0, 80080ee <tcp_sent+0x22>
{
 80080ce:	b538      	push	{r3, r4, r5, lr}
 80080d0:	4604      	mov	r4, r0
 80080d2:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80080d4:	7d03      	ldrb	r3, [r0, #20]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d001      	beq.n	80080de <tcp_sent+0x12>
    pcb->sent = sent;
 80080da:	67e5      	str	r5, [r4, #124]	; 0x7c
 80080dc:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80080de:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <tcp_sent+0x24>)
 80080e0:	f240 62cc 	movw	r2, #1740	; 0x6cc
 80080e4:	4903      	ldr	r1, [pc, #12]	; (80080f4 <tcp_sent+0x28>)
 80080e6:	4804      	ldr	r0, [pc, #16]	; (80080f8 <tcp_sent+0x2c>)
 80080e8:	f004 fb93 	bl	800c812 <iprintf>
 80080ec:	e7f5      	b.n	80080da <tcp_sent+0xe>
 80080ee:	4770      	bx	lr
 80080f0:	08010038 	.word	0x08010038
 80080f4:	080101a8 	.word	0x080101a8
 80080f8:	0800cd98 	.word	0x0800cd98

080080fc <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 80080fc:	b180      	cbz	r0, 8008120 <tcp_err+0x24>
{
 80080fe:	b538      	push	{r3, r4, r5, lr}
 8008100:	4604      	mov	r4, r0
 8008102:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008104:	7d03      	ldrb	r3, [r0, #20]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d002      	beq.n	8008110 <tcp_err+0x14>
    pcb->errf = err;
 800810a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 800810e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008110:	4b04      	ldr	r3, [pc, #16]	; (8008124 <tcp_err+0x28>)
 8008112:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8008116:	4904      	ldr	r1, [pc, #16]	; (8008128 <tcp_err+0x2c>)
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <tcp_err+0x30>)
 800811a:	f004 fb7a 	bl	800c812 <iprintf>
 800811e:	e7f4      	b.n	800810a <tcp_err+0xe>
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	08010038 	.word	0x08010038
 8008128:	08010000 	.word	0x08010000
 800812c:	0800cd98 	.word	0x0800cd98

08008130 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008130:	b110      	cbz	r0, 8008138 <tcp_accept+0x8>
 8008132:	7d02      	ldrb	r2, [r0, #20]
 8008134:	2a01      	cmp	r2, #1
 8008136:	d000      	beq.n	800813a <tcp_accept+0xa>
 8008138:	4770      	bx	lr
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 800813a:	6181      	str	r1, [r0, #24]
  }
}
 800813c:	e7fc      	b.n	8008138 <tcp_accept+0x8>
	...

08008140 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	4604      	mov	r4, r0
 8008144:	460e      	mov	r6, r1
 8008146:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008148:	7d03      	ldrb	r3, [r0, #20]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d003      	beq.n	8008156 <tcp_poll+0x16>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800814e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008152:	7725      	strb	r5, [r4, #28]
 8008154:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008156:	4b04      	ldr	r3, [pc, #16]	; (8008168 <tcp_poll+0x28>)
 8008158:	f240 7203 	movw	r2, #1795	; 0x703
 800815c:	4903      	ldr	r1, [pc, #12]	; (800816c <tcp_poll+0x2c>)
 800815e:	4804      	ldr	r0, [pc, #16]	; (8008170 <tcp_poll+0x30>)
 8008160:	f004 fb57 	bl	800c812 <iprintf>
 8008164:	e7f3      	b.n	800814e <tcp_poll+0xe>
 8008166:	bf00      	nop
 8008168:	08010038 	.word	0x08010038
 800816c:	08010114 	.word	0x08010114
 8008170:	0800cd98 	.word	0x0800cd98

08008174 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008174:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8008176:	7d03      	ldrb	r3, [r0, #20]
 8008178:	b1e3      	cbz	r3, 80081b4 <tcp_pcb_purge+0x40>
 800817a:	2b0a      	cmp	r3, #10
 800817c:	d01a      	beq.n	80081b4 <tcp_pcb_purge+0x40>
     pcb->state != TIME_WAIT &&
 800817e:	2b01      	cmp	r3, #1
 8008180:	d018      	beq.n	80081b4 <tcp_pcb_purge+0x40>
 8008182:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008184:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008186:	b118      	cbz	r0, 8008190 <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008188:	f7ff fa74 	bl	8007674 <pbuf_free>
      pcb->refused_data = NULL;
 800818c:	2300      	movs	r3, #0
 800818e:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8008190:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008192:	f7ff ff60 	bl	8008056 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008196:	2500      	movs	r5, #0
 8008198:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800819a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800819e:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80081a0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80081a2:	f7ff ff58 	bl	8008056 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80081a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80081a8:	f7ff ff55 	bl	8008056 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80081ac:	66a5      	str	r5, [r4, #104]	; 0x68
 80081ae:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80081b0:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080081b8 <tcp_slowtmr>:
{
 80081b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081bc:	b082      	sub	sp, #8
  ++tcp_ticks;
 80081be:	4aae      	ldr	r2, [pc, #696]	; (8008478 <tcp_slowtmr+0x2c0>)
 80081c0:	6813      	ldr	r3, [r2, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80081c6:	4aad      	ldr	r2, [pc, #692]	; (800847c <tcp_slowtmr+0x2c4>)
 80081c8:	7813      	ldrb	r3, [r2, #0]
 80081ca:	3301      	adds	r3, #1
 80081cc:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80081ce:	4bac      	ldr	r3, [pc, #688]	; (8008480 <tcp_slowtmr+0x2c8>)
 80081d0:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 80081d2:	2600      	movs	r6, #0
  while (pcb != NULL) {
 80081d4:	e018      	b.n	8008208 <tcp_slowtmr+0x50>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80081d6:	4bab      	ldr	r3, [pc, #684]	; (8008484 <tcp_slowtmr+0x2cc>)
 80081d8:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80081dc:	49aa      	ldr	r1, [pc, #680]	; (8008488 <tcp_slowtmr+0x2d0>)
 80081de:	48ab      	ldr	r0, [pc, #684]	; (800848c <tcp_slowtmr+0x2d4>)
 80081e0:	f004 fb17 	bl	800c812 <iprintf>
 80081e4:	e016      	b.n	8008214 <tcp_slowtmr+0x5c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80081e6:	4ba7      	ldr	r3, [pc, #668]	; (8008484 <tcp_slowtmr+0x2cc>)
 80081e8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80081ec:	49a8      	ldr	r1, [pc, #672]	; (8008490 <tcp_slowtmr+0x2d8>)
 80081ee:	48a7      	ldr	r0, [pc, #668]	; (800848c <tcp_slowtmr+0x2d4>)
 80081f0:	f004 fb0f 	bl	800c812 <iprintf>
 80081f4:	e011      	b.n	800821a <tcp_slowtmr+0x62>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80081f6:	4ba3      	ldr	r3, [pc, #652]	; (8008484 <tcp_slowtmr+0x2cc>)
 80081f8:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80081fc:	49a5      	ldr	r1, [pc, #660]	; (8008494 <tcp_slowtmr+0x2dc>)
 80081fe:	48a3      	ldr	r0, [pc, #652]	; (800848c <tcp_slowtmr+0x2d4>)
 8008200:	f004 fb07 	bl	800c812 <iprintf>
 8008204:	e00c      	b.n	8008220 <tcp_slowtmr+0x68>
      pcb = pcb->next;
 8008206:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008208:	2c00      	cmp	r4, #0
 800820a:	f000 817c 	beq.w	8008506 <tcp_slowtmr+0x34e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800820e:	7d23      	ldrb	r3, [r4, #20]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0e0      	beq.n	80081d6 <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008214:	7d23      	ldrb	r3, [r4, #20]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d0e5      	beq.n	80081e6 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800821a:	7d23      	ldrb	r3, [r4, #20]
 800821c:	2b0a      	cmp	r3, #10
 800821e:	d0ea      	beq.n	80081f6 <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008220:	7f62      	ldrb	r2, [r4, #29]
 8008222:	4b96      	ldr	r3, [pc, #600]	; (800847c <tcp_slowtmr+0x2c4>)
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d0ed      	beq.n	8008206 <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 800822a:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800822c:	7d23      	ldrb	r3, [r4, #20]
 800822e:	2b02      	cmp	r3, #2
 8008230:	d016      	beq.n	8008260 <tcp_slowtmr+0xa8>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8008232:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8008236:	2a0b      	cmp	r2, #11
 8008238:	d860      	bhi.n	80082fc <tcp_slowtmr+0x144>
      if (pcb->persist_backoff > 0) {
 800823a:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 800823e:	b335      	cbz	r5, 800828e <tcp_slowtmr+0xd6>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008240:	3d01      	subs	r5, #1
 8008242:	4b95      	ldr	r3, [pc, #596]	; (8008498 <tcp_slowtmr+0x2e0>)
 8008244:	5d5a      	ldrb	r2, [r3, r5]
        if (pcb->persist_cnt < backoff_cnt) {
 8008246:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800824a:	429a      	cmp	r2, r3
 800824c:	d902      	bls.n	8008254 <tcp_slowtmr+0x9c>
          pcb->persist_cnt++;
 800824e:	3301      	adds	r3, #1
 8008250:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8008254:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8008258:	429a      	cmp	r2, r3
 800825a:	d907      	bls.n	800826c <tcp_slowtmr+0xb4>
    pcb_remove = 0;
 800825c:	2500      	movs	r5, #0
 800825e:	e04e      	b.n	80082fe <tcp_slowtmr+0x146>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008260:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8008264:	2a05      	cmp	r2, #5
 8008266:	d9e4      	bls.n	8008232 <tcp_slowtmr+0x7a>
      ++pcb_remove;
 8008268:	2501      	movs	r5, #1
 800826a:	e048      	b.n	80082fe <tcp_slowtmr+0x146>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800826c:	4620      	mov	r0, r4
 800826e:	f003 f8c0 	bl	800b3f2 <tcp_zero_window_probe>
 8008272:	2800      	cmp	r0, #0
 8008274:	d150      	bne.n	8008318 <tcp_slowtmr+0x160>
            pcb->persist_cnt = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800827c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008280:	2b06      	cmp	r3, #6
 8008282:	d84b      	bhi.n	800831c <tcp_slowtmr+0x164>
              pcb->persist_backoff++;
 8008284:	3301      	adds	r3, #1
 8008286:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 800828a:	2500      	movs	r5, #0
 800828c:	e037      	b.n	80082fe <tcp_slowtmr+0x146>
        if (pcb->rtime >= 0) {
 800828e:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8008292:	2900      	cmp	r1, #0
 8008294:	db01      	blt.n	800829a <tcp_slowtmr+0xe2>
          ++pcb->rtime;
 8008296:	3101      	adds	r1, #1
 8008298:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800829a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800829c:	b379      	cbz	r1, 80082fe <tcp_slowtmr+0x146>
 800829e:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80082a2:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80082a6:	4288      	cmp	r0, r1
 80082a8:	db29      	blt.n	80082fe <tcp_slowtmr+0x146>
          if (pcb->state != SYN_SENT) {
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d00d      	beq.n	80082ca <tcp_slowtmr+0x112>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 80082ae:	2a0c      	cmp	r2, #12
 80082b0:	bf28      	it	cs
 80082b2:	220c      	movcs	r2, #12
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80082b4:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 80082b8:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80082bc:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80082c0:	4976      	ldr	r1, [pc, #472]	; (800849c <tcp_slowtmr+0x2e4>)
 80082c2:	5c8a      	ldrb	r2, [r1, r2]
 80082c4:	4093      	lsls	r3, r2
 80082c6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80082ce:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 80082d2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80082d6:	4293      	cmp	r3, r2
 80082d8:	bf28      	it	cs
 80082da:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 80082dc:	085b      	lsrs	r3, r3, #1
 80082de:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80082e2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 80082e4:	004a      	lsls	r2, r1, #1
 80082e6:	b292      	uxth	r2, r2
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d201      	bcs.n	80082f0 <tcp_slowtmr+0x138>
            pcb->ssthresh = (pcb->mss << 1);
 80082ec:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 80082f0:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 80082f4:	4620      	mov	r0, r4
 80082f6:	f002 ffdf 	bl	800b2b8 <tcp_rexmit_rto>
 80082fa:	e000      	b.n	80082fe <tcp_slowtmr+0x146>
      ++pcb_remove;
 80082fc:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 80082fe:	7d23      	ldrb	r3, [r4, #20]
 8008300:	2b06      	cmp	r3, #6
 8008302:	d00d      	beq.n	8008320 <tcp_slowtmr+0x168>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008304:	7a22      	ldrb	r2, [r4, #8]
 8008306:	f012 0f08 	tst.w	r2, #8
 800830a:	d043      	beq.n	8008394 <tcp_slowtmr+0x1dc>
 800830c:	2b04      	cmp	r3, #4
 800830e:	d014      	beq.n	800833a <tcp_slowtmr+0x182>
       ((pcb->state == ESTABLISHED) ||
 8008310:	2b07      	cmp	r3, #7
 8008312:	d012      	beq.n	800833a <tcp_slowtmr+0x182>
    pcb_reset = 0;
 8008314:	2700      	movs	r7, #0
 8008316:	e03e      	b.n	8008396 <tcp_slowtmr+0x1de>
    pcb_remove = 0;
 8008318:	2500      	movs	r5, #0
 800831a:	e7f0      	b.n	80082fe <tcp_slowtmr+0x146>
 800831c:	2500      	movs	r5, #0
 800831e:	e7ee      	b.n	80082fe <tcp_slowtmr+0x146>
      if (pcb->flags & TF_RXCLOSED) {
 8008320:	7ea2      	ldrb	r2, [r4, #26]
 8008322:	f012 0f10 	tst.w	r2, #16
 8008326:	d0ed      	beq.n	8008304 <tcp_slowtmr+0x14c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008328:	6a21      	ldr	r1, [r4, #32]
 800832a:	4a53      	ldr	r2, [pc, #332]	; (8008478 <tcp_slowtmr+0x2c0>)
 800832c:	6812      	ldr	r2, [r2, #0]
 800832e:	1a52      	subs	r2, r2, r1
 8008330:	2a28      	cmp	r2, #40	; 0x28
 8008332:	d9e7      	bls.n	8008304 <tcp_slowtmr+0x14c>
          ++pcb_remove;
 8008334:	3501      	adds	r5, #1
 8008336:	b2ed      	uxtb	r5, r5
 8008338:	e7e4      	b.n	8008304 <tcp_slowtmr+0x14c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800833a:	4b4f      	ldr	r3, [pc, #316]	; (8008478 <tcp_slowtmr+0x2c0>)
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	6a23      	ldr	r3, [r4, #32]
 8008340:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8008342:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8008346:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 800834a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800834e:	4854      	ldr	r0, [pc, #336]	; (80084a0 <tcp_slowtmr+0x2e8>)
 8008350:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008354:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8008358:	d903      	bls.n	8008362 <tcp_slowtmr+0x1aa>
        ++pcb_remove;
 800835a:	3501      	adds	r5, #1
 800835c:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 800835e:	2701      	movs	r7, #1
 8008360:	e019      	b.n	8008396 <tcp_slowtmr+0x1de>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008362:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8008366:	484f      	ldr	r0, [pc, #316]	; (80084a4 <tcp_slowtmr+0x2ec>)
 8008368:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 800836c:	494c      	ldr	r1, [pc, #304]	; (80084a0 <tcp_slowtmr+0x2e8>)
 800836e:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008372:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8008376:	d801      	bhi.n	800837c <tcp_slowtmr+0x1c4>
    pcb_reset = 0;
 8008378:	2700      	movs	r7, #0
 800837a:	e00c      	b.n	8008396 <tcp_slowtmr+0x1de>
        err = tcp_keepalive(pcb);
 800837c:	4620      	mov	r0, r4
 800837e:	f003 f80c 	bl	800b39a <tcp_keepalive>
        if (err == ERR_OK) {
 8008382:	2800      	cmp	r0, #0
 8008384:	d13a      	bne.n	80083fc <tcp_slowtmr+0x244>
          pcb->keep_cnt_sent++;
 8008386:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800838a:	3301      	adds	r3, #1
 800838c:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8008390:	2700      	movs	r7, #0
 8008392:	e000      	b.n	8008396 <tcp_slowtmr+0x1de>
 8008394:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8008396:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008398:	b150      	cbz	r0, 80083b0 <tcp_slowtmr+0x1f8>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800839a:	4b37      	ldr	r3, [pc, #220]	; (8008478 <tcp_slowtmr+0x2c0>)
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	6a23      	ldr	r3, [r4, #32]
 80083a0:	1ad2      	subs	r2, r2, r3
 80083a2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80083a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80083aa:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 80083ac:	428a      	cmp	r2, r1
 80083ae:	d227      	bcs.n	8008400 <tcp_slowtmr+0x248>
    if (pcb->state == SYN_RCVD) {
 80083b0:	7d23      	ldrb	r3, [r4, #20]
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d029      	beq.n	800840a <tcp_slowtmr+0x252>
    if (pcb->state == LAST_ACK) {
 80083b6:	2b09      	cmp	r3, #9
 80083b8:	d030      	beq.n	800841c <tcp_slowtmr+0x264>
    if (pcb_remove) {
 80083ba:	2d00      	cmp	r5, #0
 80083bc:	d137      	bne.n	800842e <tcp_slowtmr+0x276>
      pcb = pcb->next;
 80083be:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 80083c0:	7ee3      	ldrb	r3, [r4, #27]
 80083c2:	3301      	adds	r3, #1
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80083c8:	7f22      	ldrb	r2, [r4, #28]
 80083ca:	4293      	cmp	r3, r2
 80083cc:	f0c0 8098 	bcc.w	8008500 <tcp_slowtmr+0x348>
        prev->polltmr = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80083d4:	4a34      	ldr	r2, [pc, #208]	; (80084a8 <tcp_slowtmr+0x2f0>)
 80083d6:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 80083d8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 8087 	beq.w	80084f0 <tcp_slowtmr+0x338>
 80083e2:	4621      	mov	r1, r4
 80083e4:	6920      	ldr	r0, [r4, #16]
 80083e6:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80083e8:	4b2f      	ldr	r3, [pc, #188]	; (80084a8 <tcp_slowtmr+0x2f0>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f47f aeee 	bne.w	80081ce <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d07e      	beq.n	80084f4 <tcp_slowtmr+0x33c>
      prev = pcb;
 80083f6:	4626      	mov	r6, r4
      pcb = pcb->next;
 80083f8:	462c      	mov	r4, r5
 80083fa:	e705      	b.n	8008208 <tcp_slowtmr+0x50>
    pcb_reset = 0;
 80083fc:	2700      	movs	r7, #0
 80083fe:	e7ca      	b.n	8008396 <tcp_slowtmr+0x1de>
      tcp_segs_free(pcb->ooseq);
 8008400:	f7ff fe29 	bl	8008056 <tcp_segs_free>
      pcb->ooseq = NULL;
 8008404:	2300      	movs	r3, #0
 8008406:	6723      	str	r3, [r4, #112]	; 0x70
 8008408:	e7d2      	b.n	80083b0 <tcp_slowtmr+0x1f8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800840a:	6a21      	ldr	r1, [r4, #32]
 800840c:	4a1a      	ldr	r2, [pc, #104]	; (8008478 <tcp_slowtmr+0x2c0>)
 800840e:	6812      	ldr	r2, [r2, #0]
 8008410:	1a52      	subs	r2, r2, r1
 8008412:	2a28      	cmp	r2, #40	; 0x28
 8008414:	d9cf      	bls.n	80083b6 <tcp_slowtmr+0x1fe>
        ++pcb_remove;
 8008416:	3501      	adds	r5, #1
 8008418:	b2ed      	uxtb	r5, r5
 800841a:	e7cc      	b.n	80083b6 <tcp_slowtmr+0x1fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800841c:	6a22      	ldr	r2, [r4, #32]
 800841e:	4b16      	ldr	r3, [pc, #88]	; (8008478 <tcp_slowtmr+0x2c0>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	1a9b      	subs	r3, r3, r2
 8008424:	2bf0      	cmp	r3, #240	; 0xf0
 8008426:	d9c8      	bls.n	80083ba <tcp_slowtmr+0x202>
        ++pcb_remove;
 8008428:	3501      	adds	r5, #1
 800842a:	b2ed      	uxtb	r5, r5
 800842c:	e7c5      	b.n	80083ba <tcp_slowtmr+0x202>
      tcp_err_fn err_fn = pcb->errf;
 800842e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8008432:	4620      	mov	r0, r4
 8008434:	f7ff fe9e 	bl	8008174 <tcp_pcb_purge>
      if (prev != NULL) {
 8008438:	2e00      	cmp	r6, #0
 800843a:	d03f      	beq.n	80084bc <tcp_slowtmr+0x304>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800843c:	4b10      	ldr	r3, [pc, #64]	; (8008480 <tcp_slowtmr+0x2c8>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	429c      	cmp	r4, r3
 8008442:	d033      	beq.n	80084ac <tcp_slowtmr+0x2f4>
        prev->next = pcb->next;
 8008444:	68e3      	ldr	r3, [r4, #12]
 8008446:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 8008448:	2f00      	cmp	r7, #0
 800844a:	d146      	bne.n	80084da <tcp_slowtmr+0x322>
      err_arg = pcb->callback_arg;
 800844c:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 8008450:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8008452:	4621      	mov	r1, r4
 8008454:	2001      	movs	r0, #1
 8008456:	f7fe ff37 	bl	80072c8 <memp_free>
      tcp_active_pcbs_changed = 0;
 800845a:	2200      	movs	r2, #0
 800845c:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <tcp_slowtmr+0x2f0>)
 800845e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008460:	b11d      	cbz	r5, 800846a <tcp_slowtmr+0x2b2>
 8008462:	f06f 010c 	mvn.w	r1, #12
 8008466:	4640      	mov	r0, r8
 8008468:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 800846a:	4b0f      	ldr	r3, [pc, #60]	; (80084a8 <tcp_slowtmr+0x2f0>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	f47f aead 	bne.w	80081ce <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8008474:	463c      	mov	r4, r7
 8008476:	e6c7      	b.n	8008208 <tcp_slowtmr+0x50>
 8008478:	200088a0 	.word	0x200088a0
 800847c:	20003eda 	.word	0x20003eda
 8008480:	2000889c 	.word	0x2000889c
 8008484:	08010038 	.word	0x08010038
 8008488:	080101d0 	.word	0x080101d0
 800848c:	0800cd98 	.word	0x0800cd98
 8008490:	080101fc 	.word	0x080101fc
 8008494:	08010228 	.word	0x08010228
 8008498:	0801010c 	.word	0x0801010c
 800849c:	0800ffac 	.word	0x0800ffac
 80084a0:	10624dd3 	.word	0x10624dd3
 80084a4:	000124f8 	.word	0x000124f8
 80084a8:	20008898 	.word	0x20008898
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80084ac:	4b39      	ldr	r3, [pc, #228]	; (8008594 <tcp_slowtmr+0x3dc>)
 80084ae:	f240 4289 	movw	r2, #1161	; 0x489
 80084b2:	4939      	ldr	r1, [pc, #228]	; (8008598 <tcp_slowtmr+0x3e0>)
 80084b4:	4839      	ldr	r0, [pc, #228]	; (800859c <tcp_slowtmr+0x3e4>)
 80084b6:	f004 f9ac 	bl	800c812 <iprintf>
 80084ba:	e7c3      	b.n	8008444 <tcp_slowtmr+0x28c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80084bc:	4b38      	ldr	r3, [pc, #224]	; (80085a0 <tcp_slowtmr+0x3e8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	429c      	cmp	r4, r3
 80084c2:	d006      	beq.n	80084d2 <tcp_slowtmr+0x31a>
 80084c4:	4b33      	ldr	r3, [pc, #204]	; (8008594 <tcp_slowtmr+0x3dc>)
 80084c6:	f240 428d 	movw	r2, #1165	; 0x48d
 80084ca:	4936      	ldr	r1, [pc, #216]	; (80085a4 <tcp_slowtmr+0x3ec>)
 80084cc:	4833      	ldr	r0, [pc, #204]	; (800859c <tcp_slowtmr+0x3e4>)
 80084ce:	f004 f9a0 	bl	800c812 <iprintf>
        tcp_active_pcbs = pcb->next;
 80084d2:	68e2      	ldr	r2, [r4, #12]
 80084d4:	4b32      	ldr	r3, [pc, #200]	; (80085a0 <tcp_slowtmr+0x3e8>)
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	e7b6      	b.n	8008448 <tcp_slowtmr+0x290>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80084da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80084dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80084de:	8b23      	ldrh	r3, [r4, #24]
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	8ae3      	ldrh	r3, [r4, #22]
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	1d23      	adds	r3, r4, #4
 80084e8:	4622      	mov	r2, r4
 80084ea:	f002 fe91 	bl	800b210 <tcp_rst>
 80084ee:	e7ad      	b.n	800844c <tcp_slowtmr+0x294>
        TCP_EVENT_POLL(prev, err);
 80084f0:	2000      	movs	r0, #0
 80084f2:	e779      	b.n	80083e8 <tcp_slowtmr+0x230>
          tcp_output(prev);
 80084f4:	4620      	mov	r0, r4
 80084f6:	f002 fd2f 	bl	800af58 <tcp_output>
      prev = pcb;
 80084fa:	4626      	mov	r6, r4
      pcb = pcb->next;
 80084fc:	462c      	mov	r4, r5
 80084fe:	e683      	b.n	8008208 <tcp_slowtmr+0x50>
      prev = pcb;
 8008500:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008502:	462c      	mov	r4, r5
 8008504:	e680      	b.n	8008208 <tcp_slowtmr+0x50>
  pcb = tcp_tw_pcbs;
 8008506:	4b28      	ldr	r3, [pc, #160]	; (80085a8 <tcp_slowtmr+0x3f0>)
 8008508:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 800850a:	e003      	b.n	8008514 <tcp_slowtmr+0x35c>
      ++pcb_remove;
 800850c:	2301      	movs	r3, #1
    if (pcb_remove) {
 800850e:	b9ab      	cbnz	r3, 800853c <tcp_slowtmr+0x384>
      prev = pcb;
 8008510:	462c      	mov	r4, r5
      pcb = pcb->next;
 8008512:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 8008514:	2d00      	cmp	r5, #0
 8008516:	d039      	beq.n	800858c <tcp_slowtmr+0x3d4>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008518:	7d2b      	ldrb	r3, [r5, #20]
 800851a:	2b0a      	cmp	r3, #10
 800851c:	d006      	beq.n	800852c <tcp_slowtmr+0x374>
 800851e:	4b1d      	ldr	r3, [pc, #116]	; (8008594 <tcp_slowtmr+0x3dc>)
 8008520:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8008524:	4921      	ldr	r1, [pc, #132]	; (80085ac <tcp_slowtmr+0x3f4>)
 8008526:	481d      	ldr	r0, [pc, #116]	; (800859c <tcp_slowtmr+0x3e4>)
 8008528:	f004 f973 	bl	800c812 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800852c:	6a2a      	ldr	r2, [r5, #32]
 800852e:	4b20      	ldr	r3, [pc, #128]	; (80085b0 <tcp_slowtmr+0x3f8>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	1a9b      	subs	r3, r3, r2
 8008534:	2bf0      	cmp	r3, #240	; 0xf0
 8008536:	d8e9      	bhi.n	800850c <tcp_slowtmr+0x354>
    pcb_remove = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	e7e8      	b.n	800850e <tcp_slowtmr+0x356>
      tcp_pcb_purge(pcb);
 800853c:	4628      	mov	r0, r5
 800853e:	f7ff fe19 	bl	8008174 <tcp_pcb_purge>
      if (prev != NULL) {
 8008542:	b1a4      	cbz	r4, 800856e <tcp_slowtmr+0x3b6>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008544:	4b18      	ldr	r3, [pc, #96]	; (80085a8 <tcp_slowtmr+0x3f0>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	429d      	cmp	r5, r3
 800854a:	d008      	beq.n	800855e <tcp_slowtmr+0x3a6>
        prev->next = pcb->next;
 800854c:	68eb      	ldr	r3, [r5, #12]
 800854e:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8008550:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8008552:	4629      	mov	r1, r5
 8008554:	2001      	movs	r0, #1
 8008556:	f7fe feb7 	bl	80072c8 <memp_free>
      pcb = pcb->next;
 800855a:	4635      	mov	r5, r6
 800855c:	e7da      	b.n	8008514 <tcp_slowtmr+0x35c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800855e:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <tcp_slowtmr+0x3dc>)
 8008560:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8008564:	4913      	ldr	r1, [pc, #76]	; (80085b4 <tcp_slowtmr+0x3fc>)
 8008566:	480d      	ldr	r0, [pc, #52]	; (800859c <tcp_slowtmr+0x3e4>)
 8008568:	f004 f953 	bl	800c812 <iprintf>
 800856c:	e7ee      	b.n	800854c <tcp_slowtmr+0x394>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800856e:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <tcp_slowtmr+0x3f0>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	429d      	cmp	r5, r3
 8008574:	d006      	beq.n	8008584 <tcp_slowtmr+0x3cc>
 8008576:	4b07      	ldr	r3, [pc, #28]	; (8008594 <tcp_slowtmr+0x3dc>)
 8008578:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800857c:	490e      	ldr	r1, [pc, #56]	; (80085b8 <tcp_slowtmr+0x400>)
 800857e:	4807      	ldr	r0, [pc, #28]	; (800859c <tcp_slowtmr+0x3e4>)
 8008580:	f004 f947 	bl	800c812 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008584:	68ea      	ldr	r2, [r5, #12]
 8008586:	4b08      	ldr	r3, [pc, #32]	; (80085a8 <tcp_slowtmr+0x3f0>)
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	e7e1      	b.n	8008550 <tcp_slowtmr+0x398>
}
 800858c:	b002      	add	sp, #8
 800858e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008592:	bf00      	nop
 8008594:	08010038 	.word	0x08010038
 8008598:	08010258 	.word	0x08010258
 800859c:	0800cd98 	.word	0x0800cd98
 80085a0:	2000889c 	.word	0x2000889c
 80085a4:	08010284 	.word	0x08010284
 80085a8:	200088ac 	.word	0x200088ac
 80085ac:	080102b0 	.word	0x080102b0
 80085b0:	200088a0 	.word	0x200088a0
 80085b4:	080102e0 	.word	0x080102e0
 80085b8:	08010308 	.word	0x08010308

080085bc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80085bc:	b510      	push	{r4, lr}
 80085be:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 80085c0:	6803      	ldr	r3, [r0, #0]
 80085c2:	428b      	cmp	r3, r1
 80085c4:	d005      	beq.n	80085d2 <tcp_pcb_remove+0x16>
 80085c6:	b14b      	cbz	r3, 80085dc <tcp_pcb_remove+0x20>
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	4294      	cmp	r4, r2
 80085cc:	d004      	beq.n	80085d8 <tcp_pcb_remove+0x1c>
 80085ce:	4613      	mov	r3, r2
 80085d0:	e7f9      	b.n	80085c6 <tcp_pcb_remove+0xa>
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	6003      	str	r3, [r0, #0]
 80085d6:	e001      	b.n	80085dc <tcp_pcb_remove+0x20>
 80085d8:	68e2      	ldr	r2, [r4, #12]
 80085da:	60da      	str	r2, [r3, #12]
 80085dc:	2300      	movs	r3, #0
 80085de:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 80085e0:	4620      	mov	r0, r4
 80085e2:	f7ff fdc7 	bl	8008174 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80085e6:	7d23      	ldrb	r3, [r4, #20]
 80085e8:	2b0a      	cmp	r3, #10
 80085ea:	d005      	beq.n	80085f8 <tcp_pcb_remove+0x3c>
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d003      	beq.n	80085f8 <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80085f0:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 80085f2:	f013 0f01 	tst.w	r3, #1
 80085f6:	d121      	bne.n	800863c <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 80085f8:	7d23      	ldrb	r3, [r4, #20]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d01a      	beq.n	8008634 <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80085fe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008600:	b133      	cbz	r3, 8008610 <tcp_pcb_remove+0x54>
 8008602:	4b12      	ldr	r3, [pc, #72]	; (800864c <tcp_pcb_remove+0x90>)
 8008604:	f240 7253 	movw	r2, #1875	; 0x753
 8008608:	4911      	ldr	r1, [pc, #68]	; (8008650 <tcp_pcb_remove+0x94>)
 800860a:	4812      	ldr	r0, [pc, #72]	; (8008654 <tcp_pcb_remove+0x98>)
 800860c:	f004 f901 	bl	800c812 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008610:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008612:	b133      	cbz	r3, 8008622 <tcp_pcb_remove+0x66>
 8008614:	4b0d      	ldr	r3, [pc, #52]	; (800864c <tcp_pcb_remove+0x90>)
 8008616:	f240 7254 	movw	r2, #1876	; 0x754
 800861a:	490f      	ldr	r1, [pc, #60]	; (8008658 <tcp_pcb_remove+0x9c>)
 800861c:	480d      	ldr	r0, [pc, #52]	; (8008654 <tcp_pcb_remove+0x98>)
 800861e:	f004 f8f8 	bl	800c812 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008622:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008624:	b133      	cbz	r3, 8008634 <tcp_pcb_remove+0x78>
 8008626:	4b09      	ldr	r3, [pc, #36]	; (800864c <tcp_pcb_remove+0x90>)
 8008628:	f240 7256 	movw	r2, #1878	; 0x756
 800862c:	490b      	ldr	r1, [pc, #44]	; (800865c <tcp_pcb_remove+0xa0>)
 800862e:	4809      	ldr	r0, [pc, #36]	; (8008654 <tcp_pcb_remove+0x98>)
 8008630:	f004 f8ef 	bl	800c812 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008634:	2300      	movs	r3, #0
 8008636:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008638:	82e3      	strh	r3, [r4, #22]
 800863a:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 800863c:	f043 0302 	orr.w	r3, r3, #2
 8008640:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8008642:	4620      	mov	r0, r4
 8008644:	f002 fc88 	bl	800af58 <tcp_output>
 8008648:	e7d6      	b.n	80085f8 <tcp_pcb_remove+0x3c>
 800864a:	bf00      	nop
 800864c:	08010038 	.word	0x08010038
 8008650:	080100c0 	.word	0x080100c0
 8008654:	0800cd98 	.word	0x0800cd98
 8008658:	080100d8 	.word	0x080100d8
 800865c:	080100f4 	.word	0x080100f4

08008660 <tcp_close_shutdown>:
{
 8008660:	b510      	push	{r4, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008666:	b121      	cbz	r1, 8008672 <tcp_close_shutdown+0x12>
 8008668:	7d03      	ldrb	r3, [r0, #20]
 800866a:	2b04      	cmp	r3, #4
 800866c:	d00c      	beq.n	8008688 <tcp_close_shutdown+0x28>
 800866e:	2b07      	cmp	r3, #7
 8008670:	d00a      	beq.n	8008688 <tcp_close_shutdown+0x28>
  switch (pcb->state) {
 8008672:	7d23      	ldrb	r3, [r4, #20]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d072      	beq.n	800875e <tcp_close_shutdown+0xfe>
 8008678:	2b00      	cmp	r3, #0
 800867a:	d055      	beq.n	8008728 <tcp_close_shutdown+0xc8>
 800867c:	2b02      	cmp	r3, #2
 800867e:	d07b      	beq.n	8008778 <tcp_close_shutdown+0x118>
    return tcp_close_shutdown_fin(pcb);
 8008680:	4620      	mov	r0, r4
 8008682:	f7ff fb65 	bl	8007d50 <tcp_close_shutdown_fin>
 8008686:	e068      	b.n	800875a <tcp_close_shutdown+0xfa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008688:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800868a:	b1d3      	cbz	r3, 80086c2 <tcp_close_shutdown+0x62>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800868c:	7ea3      	ldrb	r3, [r4, #26]
 800868e:	f013 0f10 	tst.w	r3, #16
 8008692:	d01b      	beq.n	80086cc <tcp_close_shutdown+0x6c>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008694:	8b23      	ldrh	r3, [r4, #24]
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	8ae3      	ldrh	r3, [r4, #22]
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	1d23      	adds	r3, r4, #4
 800869e:	4622      	mov	r2, r4
 80086a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80086a2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80086a4:	f002 fdb4 	bl	800b210 <tcp_rst>
      tcp_pcb_purge(pcb);
 80086a8:	4620      	mov	r0, r4
 80086aa:	f7ff fd63 	bl	8008174 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80086ae:	4b38      	ldr	r3, [pc, #224]	; (8008790 <tcp_close_shutdown+0x130>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	429c      	cmp	r4, r3
 80086b4:	d012      	beq.n	80086dc <tcp_close_shutdown+0x7c>
 80086b6:	b1bb      	cbz	r3, 80086e8 <tcp_close_shutdown+0x88>
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	4294      	cmp	r4, r2
 80086bc:	d012      	beq.n	80086e4 <tcp_close_shutdown+0x84>
 80086be:	4613      	mov	r3, r2
 80086c0:	e7f9      	b.n	80086b6 <tcp_close_shutdown+0x56>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80086c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80086c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c8:	d1e0      	bne.n	800868c <tcp_close_shutdown+0x2c>
 80086ca:	e7d2      	b.n	8008672 <tcp_close_shutdown+0x12>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80086cc:	4b31      	ldr	r3, [pc, #196]	; (8008794 <tcp_close_shutdown+0x134>)
 80086ce:	f240 120f 	movw	r2, #271	; 0x10f
 80086d2:	4931      	ldr	r1, [pc, #196]	; (8008798 <tcp_close_shutdown+0x138>)
 80086d4:	4831      	ldr	r0, [pc, #196]	; (800879c <tcp_close_shutdown+0x13c>)
 80086d6:	f004 f89c 	bl	800c812 <iprintf>
 80086da:	e7db      	b.n	8008694 <tcp_close_shutdown+0x34>
      TCP_RMV_ACTIVE(pcb);
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	4b2c      	ldr	r3, [pc, #176]	; (8008790 <tcp_close_shutdown+0x130>)
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	e001      	b.n	80086e8 <tcp_close_shutdown+0x88>
 80086e4:	68e2      	ldr	r2, [r4, #12]
 80086e6:	60da      	str	r2, [r3, #12]
 80086e8:	2300      	movs	r3, #0
 80086ea:	60e3      	str	r3, [r4, #12]
 80086ec:	2201      	movs	r2, #1
 80086ee:	4b2c      	ldr	r3, [pc, #176]	; (80087a0 <tcp_close_shutdown+0x140>)
 80086f0:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80086f2:	7d23      	ldrb	r3, [r4, #20]
 80086f4:	2b04      	cmp	r3, #4
 80086f6:	d009      	beq.n	800870c <tcp_close_shutdown+0xac>
        if (tcp_input_pcb == pcb) {
 80086f8:	4b2a      	ldr	r3, [pc, #168]	; (80087a4 <tcp_close_shutdown+0x144>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	429c      	cmp	r4, r3
 80086fe:	d00f      	beq.n	8008720 <tcp_close_shutdown+0xc0>
          memp_free(MEMP_TCP_PCB, pcb);
 8008700:	4621      	mov	r1, r4
 8008702:	2001      	movs	r0, #1
 8008704:	f7fe fde0 	bl	80072c8 <memp_free>
      return ERR_OK;
 8008708:	2000      	movs	r0, #0
 800870a:	e026      	b.n	800875a <tcp_close_shutdown+0xfa>
        pcb->state = TIME_WAIT;
 800870c:	230a      	movs	r3, #10
 800870e:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008710:	4b25      	ldr	r3, [pc, #148]	; (80087a8 <tcp_close_shutdown+0x148>)
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	60e2      	str	r2, [r4, #12]
 8008716:	601c      	str	r4, [r3, #0]
 8008718:	f002 ff86 	bl	800b628 <tcp_timer_needed>
      return ERR_OK;
 800871c:	2000      	movs	r0, #0
 800871e:	e01c      	b.n	800875a <tcp_close_shutdown+0xfa>
          tcp_trigger_input_pcb_close();
 8008720:	f001 feca 	bl	800a4b8 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 8008724:	2000      	movs	r0, #0
 8008726:	e018      	b.n	800875a <tcp_close_shutdown+0xfa>
    if (pcb->local_port != 0) {
 8008728:	8ae3      	ldrh	r3, [r4, #22]
 800872a:	b18b      	cbz	r3, 8008750 <tcp_close_shutdown+0xf0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800872c:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <tcp_close_shutdown+0x14c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	429c      	cmp	r4, r3
 8008732:	d005      	beq.n	8008740 <tcp_close_shutdown+0xe0>
 8008734:	b153      	cbz	r3, 800874c <tcp_close_shutdown+0xec>
 8008736:	68da      	ldr	r2, [r3, #12]
 8008738:	4294      	cmp	r4, r2
 800873a:	d005      	beq.n	8008748 <tcp_close_shutdown+0xe8>
 800873c:	4613      	mov	r3, r2
 800873e:	e7f9      	b.n	8008734 <tcp_close_shutdown+0xd4>
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	4b1a      	ldr	r3, [pc, #104]	; (80087ac <tcp_close_shutdown+0x14c>)
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	e001      	b.n	800874c <tcp_close_shutdown+0xec>
 8008748:	68e2      	ldr	r2, [r4, #12]
 800874a:	60da      	str	r2, [r3, #12]
 800874c:	2300      	movs	r3, #0
 800874e:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 8008750:	4621      	mov	r1, r4
 8008752:	2001      	movs	r0, #1
 8008754:	f7fe fdb8 	bl	80072c8 <memp_free>
  return ERR_OK;
 8008758:	2000      	movs	r0, #0
}
 800875a:	b002      	add	sp, #8
 800875c:	bd10      	pop	{r4, pc}
    tcp_listen_closed(pcb);
 800875e:	4620      	mov	r0, r4
 8008760:	f7ff facc 	bl	8007cfc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008764:	4621      	mov	r1, r4
 8008766:	4812      	ldr	r0, [pc, #72]	; (80087b0 <tcp_close_shutdown+0x150>)
 8008768:	f7ff ff28 	bl	80085bc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800876c:	4621      	mov	r1, r4
 800876e:	2002      	movs	r0, #2
 8008770:	f7fe fdaa 	bl	80072c8 <memp_free>
  return ERR_OK;
 8008774:	2000      	movs	r0, #0
    break;
 8008776:	e7f0      	b.n	800875a <tcp_close_shutdown+0xfa>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8008778:	4621      	mov	r1, r4
 800877a:	4805      	ldr	r0, [pc, #20]	; (8008790 <tcp_close_shutdown+0x130>)
 800877c:	f7ff ff1e 	bl	80085bc <tcp_pcb_remove>
 8008780:	2001      	movs	r0, #1
 8008782:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <tcp_close_shutdown+0x140>)
 8008784:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8008786:	4621      	mov	r1, r4
 8008788:	f7fe fd9e 	bl	80072c8 <memp_free>
  return ERR_OK;
 800878c:	2000      	movs	r0, #0
    break;
 800878e:	e7e4      	b.n	800875a <tcp_close_shutdown+0xfa>
 8008790:	2000889c 	.word	0x2000889c
 8008794:	08010038 	.word	0x08010038
 8008798:	0800ffe4 	.word	0x0800ffe4
 800879c:	0800cd98 	.word	0x0800cd98
 80087a0:	20008898 	.word	0x20008898
 80087a4:	200088b0 	.word	0x200088b0
 80087a8:	200088ac 	.word	0x200088ac
 80087ac:	200088a8 	.word	0x200088a8
 80087b0:	200088a4 	.word	0x200088a4

080087b4 <tcp_close>:
{
 80087b4:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 80087b6:	7d03      	ldrb	r3, [r0, #20]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d003      	beq.n	80087c4 <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 80087bc:	7e83      	ldrb	r3, [r0, #26]
 80087be:	f043 0310 	orr.w	r3, r3, #16
 80087c2:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80087c4:	2101      	movs	r1, #1
 80087c6:	f7ff ff4b 	bl	8008660 <tcp_close_shutdown>
}
 80087ca:	bd08      	pop	{r3, pc}

080087cc <tcp_recv_null>:
{
 80087cc:	b510      	push	{r4, lr}
 80087ce:	4608      	mov	r0, r1
  if (p != NULL) {
 80087d0:	b142      	cbz	r2, 80087e4 <tcp_recv_null+0x18>
 80087d2:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 80087d4:	8911      	ldrh	r1, [r2, #8]
 80087d6:	f7ff fbef 	bl	8007fb8 <tcp_recved>
    pbuf_free(p);
 80087da:	4620      	mov	r0, r4
 80087dc:	f7fe ff4a 	bl	8007674 <pbuf_free>
  return ERR_OK;
 80087e0:	2000      	movs	r0, #0
 80087e2:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80087e4:	b10b      	cbz	r3, 80087ea <tcp_recv_null+0x1e>
  return ERR_OK;
 80087e6:	2000      	movs	r0, #0
}
 80087e8:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 80087ea:	f7ff ffe3 	bl	80087b4 <tcp_close>
 80087ee:	bd10      	pop	{r4, pc}

080087f0 <tcp_process_refused_data>:
{
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 80087f4:	6f46      	ldr	r6, [r0, #116]	; 0x74
 80087f6:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80087f8:	2300      	movs	r3, #0
 80087fa:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80087fc:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 8008800:	b1dd      	cbz	r5, 800883a <tcp_process_refused_data+0x4a>
 8008802:	4632      	mov	r2, r6
 8008804:	4601      	mov	r1, r0
 8008806:	6900      	ldr	r0, [r0, #16]
 8008808:	47a8      	blx	r5
 800880a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800880c:	b9fd      	cbnz	r5, 800884e <tcp_process_refused_data+0x5e>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800880e:	f017 0f20 	tst.w	r7, #32
 8008812:	d022      	beq.n	800885a <tcp_process_refused_data+0x6a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008814:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800881a:	d001      	beq.n	8008820 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 800881c:	3301      	adds	r3, #1
 800881e:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8008820:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8008824:	b18e      	cbz	r6, 800884a <tcp_process_refused_data+0x5a>
 8008826:	2300      	movs	r3, #0
 8008828:	461a      	mov	r2, r3
 800882a:	4621      	mov	r1, r4
 800882c:	6920      	ldr	r0, [r4, #16]
 800882e:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8008830:	f110 0f0d 	cmn.w	r0, #13
 8008834:	d111      	bne.n	800885a <tcp_process_refused_data+0x6a>
          return ERR_ABRT;
 8008836:	4605      	mov	r5, r0
 8008838:	e00f      	b.n	800885a <tcp_process_refused_data+0x6a>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800883a:	2300      	movs	r3, #0
 800883c:	4632      	mov	r2, r6
 800883e:	4601      	mov	r1, r0
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff ffc3 	bl	80087cc <tcp_recv_null>
 8008846:	4605      	mov	r5, r0
 8008848:	e7e0      	b.n	800880c <tcp_process_refused_data+0x1c>
        TCP_EVENT_CLOSED(pcb, err);
 800884a:	4628      	mov	r0, r5
 800884c:	e7f0      	b.n	8008830 <tcp_process_refused_data+0x40>
    } else if (err == ERR_ABRT) {
 800884e:	f115 0f0d 	cmn.w	r5, #13
 8008852:	d002      	beq.n	800885a <tcp_process_refused_data+0x6a>
      pcb->refused_data = refused_data;
 8008854:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8008856:	f06f 0504 	mvn.w	r5, #4
}
 800885a:	4628      	mov	r0, r5
 800885c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008860 <tcp_fasttmr>:
{
 8008860:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8008862:	4a1c      	ldr	r2, [pc, #112]	; (80088d4 <tcp_fasttmr+0x74>)
 8008864:	7813      	ldrb	r3, [r2, #0]
 8008866:	3301      	adds	r3, #1
 8008868:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800886a:	4b1b      	ldr	r3, [pc, #108]	; (80088d8 <tcp_fasttmr+0x78>)
 800886c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800886e:	e013      	b.n	8008898 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 8008870:	f043 0302 	orr.w	r3, r3, #2
 8008874:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8008876:	4620      	mov	r0, r4
 8008878:	f002 fb6e 	bl	800af58 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800887c:	7ea3      	ldrb	r3, [r4, #26]
 800887e:	f023 0303 	bic.w	r3, r3, #3
 8008882:	76a3      	strb	r3, [r4, #26]
 8008884:	e013      	b.n	80088ae <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 8008886:	f023 0308 	bic.w	r3, r3, #8
 800888a:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800888c:	4620      	mov	r0, r4
 800888e:	f7ff fa5f 	bl	8007d50 <tcp_close_shutdown_fin>
 8008892:	e010      	b.n	80088b6 <tcp_fasttmr+0x56>
      pcb = pcb->next;
 8008894:	68e5      	ldr	r5, [r4, #12]
{
 8008896:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8008898:	b1dc      	cbz	r4, 80088d2 <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 800889a:	7f62      	ldrb	r2, [r4, #29]
 800889c:	4b0d      	ldr	r3, [pc, #52]	; (80088d4 <tcp_fasttmr+0x74>)
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d0f7      	beq.n	8008894 <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 80088a4:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 80088a6:	7ea3      	ldrb	r3, [r4, #26]
 80088a8:	f013 0f01 	tst.w	r3, #1
 80088ac:	d1e0      	bne.n	8008870 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 80088ae:	7ea3      	ldrb	r3, [r4, #26]
 80088b0:	f013 0f08 	tst.w	r3, #8
 80088b4:	d1e7      	bne.n	8008886 <tcp_fasttmr+0x26>
      next = pcb->next;
 80088b6:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 80088b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d0eb      	beq.n	8008896 <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 80088be:	4e07      	ldr	r6, [pc, #28]	; (80088dc <tcp_fasttmr+0x7c>)
 80088c0:	2300      	movs	r3, #0
 80088c2:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 80088c4:	4620      	mov	r0, r4
 80088c6:	f7ff ff93 	bl	80087f0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80088ca:	7833      	ldrb	r3, [r6, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0e2      	beq.n	8008896 <tcp_fasttmr+0x36>
 80088d0:	e7cb      	b.n	800886a <tcp_fasttmr+0xa>
}
 80088d2:	bd70      	pop	{r4, r5, r6, pc}
 80088d4:	20003eda 	.word	0x20003eda
 80088d8:	2000889c 	.word	0x2000889c
 80088dc:	20008898 	.word	0x20008898

080088e0 <tcp_tmr>:
{
 80088e0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80088e2:	f7ff ffbd 	bl	8008860 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80088e6:	4a06      	ldr	r2, [pc, #24]	; (8008900 <tcp_tmr+0x20>)
 80088e8:	7813      	ldrb	r3, [r2, #0]
 80088ea:	3301      	adds	r3, #1
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	7013      	strb	r3, [r2, #0]
 80088f0:	f013 0f01 	tst.w	r3, #1
 80088f4:	d100      	bne.n	80088f8 <tcp_tmr+0x18>
 80088f6:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80088f8:	f7ff fc5e 	bl	80081b8 <tcp_slowtmr>
}
 80088fc:	e7fb      	b.n	80088f6 <tcp_tmr+0x16>
 80088fe:	bf00      	nop
 8008900:	20003ed9 	.word	0x20003ed9

08008904 <tcp_shutdown>:
  if (pcb->state == LISTEN) {
 8008904:	7d03      	ldrb	r3, [r0, #20]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d020      	beq.n	800894c <tcp_shutdown+0x48>
{
 800890a:	b570      	push	{r4, r5, r6, lr}
 800890c:	4616      	mov	r6, r2
 800890e:	460d      	mov	r5, r1
 8008910:	4604      	mov	r4, r0
  if (shut_rx) {
 8008912:	b151      	cbz	r1, 800892a <tcp_shutdown+0x26>
    pcb->flags |= TF_RXCLOSED;
 8008914:	7e83      	ldrb	r3, [r0, #26]
 8008916:	f043 0310 	orr.w	r3, r3, #16
 800891a:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 800891c:	b992      	cbnz	r2, 8008944 <tcp_shutdown+0x40>
    if (pcb->refused_data != NULL) {
 800891e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008920:	b118      	cbz	r0, 800892a <tcp_shutdown+0x26>
      pbuf_free(pcb->refused_data);
 8008922:	f7fe fea7 	bl	8007674 <pbuf_free>
      pcb->refused_data = NULL;
 8008926:	2300      	movs	r3, #0
 8008928:	6763      	str	r3, [r4, #116]	; 0x74
  if (shut_tx) {
 800892a:	b196      	cbz	r6, 8008952 <tcp_shutdown+0x4e>
    switch (pcb->state) {
 800892c:	7d23      	ldrb	r3, [r4, #20]
 800892e:	2b03      	cmp	r3, #3
 8008930:	d311      	bcc.n	8008956 <tcp_shutdown+0x52>
 8008932:	2b04      	cmp	r3, #4
 8008934:	d901      	bls.n	800893a <tcp_shutdown+0x36>
 8008936:	2b07      	cmp	r3, #7
 8008938:	d10d      	bne.n	8008956 <tcp_shutdown+0x52>
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800893a:	b2e9      	uxtb	r1, r5
 800893c:	4620      	mov	r0, r4
 800893e:	f7ff fe8f 	bl	8008660 <tcp_close_shutdown>
 8008942:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 8008944:	2101      	movs	r1, #1
 8008946:	f7ff fe8b 	bl	8008660 <tcp_close_shutdown>
 800894a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_CONN;
 800894c:	f06f 000a 	mvn.w	r0, #10
 8008950:	4770      	bx	lr
  return ERR_OK;
 8008952:	2000      	movs	r0, #0
 8008954:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_CONN;
 8008956:	f06f 000a 	mvn.w	r0, #10
}
 800895a:	bd70      	pop	{r4, r5, r6, pc}

0800895c <tcp_abandon>:
{
 800895c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008960:	b082      	sub	sp, #8
 8008962:	4604      	mov	r4, r0
 8008964:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008966:	7d03      	ldrb	r3, [r0, #20]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d01a      	beq.n	80089a2 <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 800896c:	7d23      	ldrb	r3, [r4, #20]
 800896e:	2b0a      	cmp	r3, #10
 8008970:	d01f      	beq.n	80089b2 <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 8008972:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8008976:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 800897a:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800897e:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8008980:	2b00      	cmp	r3, #0
 8008982:	d141      	bne.n	8008a08 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 8008984:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8008988:	f1ba 0f00 	cmp.w	sl, #0
 800898c:	d046      	beq.n	8008a1c <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800898e:	4b2a      	ldr	r3, [pc, #168]	; (8008a38 <tcp_abandon+0xdc>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	429c      	cmp	r4, r3
 8008994:	d016      	beq.n	80089c4 <tcp_abandon+0x68>
 8008996:	b1db      	cbz	r3, 80089d0 <tcp_abandon+0x74>
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	4294      	cmp	r4, r2
 800899c:	d016      	beq.n	80089cc <tcp_abandon+0x70>
 800899e:	4613      	mov	r3, r2
 80089a0:	e7f9      	b.n	8008996 <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80089a2:	4b26      	ldr	r3, [pc, #152]	; (8008a3c <tcp_abandon+0xe0>)
 80089a4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80089a8:	4925      	ldr	r1, [pc, #148]	; (8008a40 <tcp_abandon+0xe4>)
 80089aa:	4826      	ldr	r0, [pc, #152]	; (8008a44 <tcp_abandon+0xe8>)
 80089ac:	f003 ff31 	bl	800c812 <iprintf>
 80089b0:	e7dc      	b.n	800896c <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80089b2:	4621      	mov	r1, r4
 80089b4:	4824      	ldr	r0, [pc, #144]	; (8008a48 <tcp_abandon+0xec>)
 80089b6:	f7ff fe01 	bl	80085bc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80089ba:	4621      	mov	r1, r4
 80089bc:	2001      	movs	r0, #1
 80089be:	f7fe fc83 	bl	80072c8 <memp_free>
 80089c2:	e01e      	b.n	8008a02 <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80089c4:	68da      	ldr	r2, [r3, #12]
 80089c6:	4b1c      	ldr	r3, [pc, #112]	; (8008a38 <tcp_abandon+0xdc>)
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	e001      	b.n	80089d0 <tcp_abandon+0x74>
 80089cc:	68e2      	ldr	r2, [r4, #12]
 80089ce:	60da      	str	r2, [r3, #12]
 80089d0:	2500      	movs	r5, #0
 80089d2:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 80089d4:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 80089d6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80089d8:	b108      	cbz	r0, 80089de <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 80089da:	f7ff fb3c 	bl	8008056 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80089de:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80089e0:	b108      	cbz	r0, 80089e6 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 80089e2:	f7ff fb38 	bl	8008056 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80089e6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80089e8:	b108      	cbz	r0, 80089ee <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 80089ea:	f7ff fb34 	bl	8008056 <tcp_segs_free>
    if (send_rst) {
 80089ee:	b9bd      	cbnz	r5, 8008a20 <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 80089f0:	4621      	mov	r1, r4
 80089f2:	2001      	movs	r0, #1
 80089f4:	f7fe fc68 	bl	80072c8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80089f8:	b11e      	cbz	r6, 8008a02 <tcp_abandon+0xa6>
 80089fa:	f06f 010c 	mvn.w	r1, #12
 80089fe:	4638      	mov	r0, r7
 8008a00:	47b0      	blx	r6
}
 8008a02:	b002      	add	sp, #8
 8008a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8008a08:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	480f      	ldr	r0, [pc, #60]	; (8008a4c <tcp_abandon+0xf0>)
 8008a10:	f7ff fdd4 	bl	80085bc <tcp_pcb_remove>
 8008a14:	2201      	movs	r2, #1
 8008a16:	4b0e      	ldr	r3, [pc, #56]	; (8008a50 <tcp_abandon+0xf4>)
 8008a18:	701a      	strb	r2, [r3, #0]
 8008a1a:	e7dc      	b.n	80089d6 <tcp_abandon+0x7a>
    int send_rst = 0;
 8008a1c:	2500      	movs	r5, #0
 8008a1e:	e7da      	b.n	80089d6 <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008a20:	8b23      	ldrh	r3, [r4, #24]
 8008a22:	9301      	str	r3, [sp, #4]
 8008a24:	f8cd a000 	str.w	sl, [sp]
 8008a28:	1d23      	adds	r3, r4, #4
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	4640      	mov	r0, r8
 8008a30:	f002 fbee 	bl	800b210 <tcp_rst>
 8008a34:	e7dc      	b.n	80089f0 <tcp_abandon+0x94>
 8008a36:	bf00      	nop
 8008a38:	200088a8 	.word	0x200088a8
 8008a3c:	08010038 	.word	0x08010038
 8008a40:	0800ff78 	.word	0x0800ff78
 8008a44:	0800cd98 	.word	0x0800cd98
 8008a48:	200088ac 	.word	0x200088ac
 8008a4c:	2000889c 	.word	0x2000889c
 8008a50:	20008898 	.word	0x20008898

08008a54 <tcp_abort>:
{
 8008a54:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8008a56:	2101      	movs	r1, #1
 8008a58:	f7ff ff80 	bl	800895c <tcp_abandon>
 8008a5c:	bd08      	pop	{r3, pc}

08008a5e <tcp_accept_null>:
{
 8008a5e:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8008a60:	4608      	mov	r0, r1
 8008a62:	f7ff fff7 	bl	8008a54 <tcp_abort>
}
 8008a66:	f06f 000c 	mvn.w	r0, #12
 8008a6a:	bd08      	pop	{r3, pc}

08008a6c <tcp_kill_timewait>:
{
 8008a6c:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a6e:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <tcp_kill_timewait+0x2c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8008a72:	2400      	movs	r4, #0
  inactive = NULL;
 8008a74:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a76:	e000      	b.n	8008a7a <tcp_kill_timewait+0xe>
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	b143      	cbz	r3, 8008a8e <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008a7c:	6a19      	ldr	r1, [r3, #32]
 8008a7e:	4a07      	ldr	r2, [pc, #28]	; (8008a9c <tcp_kill_timewait+0x30>)
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	1a52      	subs	r2, r2, r1
 8008a84:	4294      	cmp	r4, r2
 8008a86:	d8f7      	bhi.n	8008a78 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 8008a88:	4614      	mov	r4, r2
      inactive = pcb;
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	e7f4      	b.n	8008a78 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 8008a8e:	b108      	cbz	r0, 8008a94 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 8008a90:	f7ff ffe0 	bl	8008a54 <tcp_abort>
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	bf00      	nop
 8008a98:	200088ac 	.word	0x200088ac
 8008a9c:	200088a0 	.word	0x200088a0

08008aa0 <tcp_kill_prio>:
{
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	4602      	mov	r2, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008aa4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008aa8:	d000      	beq.n	8008aac <tcp_kill_prio+0xc>
 8008aaa:	227f      	movs	r2, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008aac:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <tcp_kill_prio+0x3c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8008ab0:	2400      	movs	r4, #0
  inactive = NULL;
 8008ab2:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ab4:	b91b      	cbnz	r3, 8008abe <tcp_kill_prio+0x1e>
  if (inactive != NULL) {
 8008ab6:	b108      	cbz	r0, 8008abc <tcp_kill_prio+0x1c>
    tcp_abort(inactive);
 8008ab8:	f7ff ffcc 	bl	8008a54 <tcp_abort>
 8008abc:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->prio <= mprio &&
 8008abe:	7d5d      	ldrb	r5, [r3, #21]
 8008ac0:	42aa      	cmp	r2, r5
 8008ac2:	d308      	bcc.n	8008ad6 <tcp_kill_prio+0x36>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008ac4:	6a1e      	ldr	r6, [r3, #32]
 8008ac6:	4906      	ldr	r1, [pc, #24]	; (8008ae0 <tcp_kill_prio+0x40>)
 8008ac8:	6809      	ldr	r1, [r1, #0]
 8008aca:	1b89      	subs	r1, r1, r6
    if (pcb->prio <= mprio &&
 8008acc:	428c      	cmp	r4, r1
 8008ace:	d802      	bhi.n	8008ad6 <tcp_kill_prio+0x36>
      mprio = pcb->prio;
 8008ad0:	462a      	mov	r2, r5
      inactivity = tcp_ticks - pcb->tmr;
 8008ad2:	460c      	mov	r4, r1
      inactive = pcb;
 8008ad4:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	e7ec      	b.n	8008ab4 <tcp_kill_prio+0x14>
 8008ada:	bf00      	nop
 8008adc:	2000889c 	.word	0x2000889c
 8008ae0:	200088a0 	.word	0x200088a0

08008ae4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8008aea:	e003      	b.n	8008af4 <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008aec:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008aee:	f7ff ffb1 	bl	8008a54 <tcp_abort>
      pcb = next;
 8008af2:	4628      	mov	r0, r5
  while (pcb != NULL) {
 8008af4:	b128      	cbz	r0, 8008b02 <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008af6:	6802      	ldr	r2, [r0, #0]
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d0f6      	beq.n	8008aec <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 8008afe:	68c0      	ldr	r0, [r0, #12]
 8008b00:	e7f8      	b.n	8008af4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8008b02:	bd38      	pop	{r3, r4, r5, pc}

08008b04 <tcp_kill_state>:
{
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008b08:	f1a0 0308 	sub.w	r3, r0, #8
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d906      	bls.n	8008b20 <tcp_kill_state+0x1c>
 8008b12:	4b0f      	ldr	r3, [pc, #60]	; (8008b50 <tcp_kill_state+0x4c>)
 8008b14:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008b18:	490e      	ldr	r1, [pc, #56]	; (8008b54 <tcp_kill_state+0x50>)
 8008b1a:	480f      	ldr	r0, [pc, #60]	; (8008b58 <tcp_kill_state+0x54>)
 8008b1c:	f003 fe79 	bl	800c812 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b20:	4b0e      	ldr	r3, [pc, #56]	; (8008b5c <tcp_kill_state+0x58>)
 8008b22:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8008b24:	2100      	movs	r1, #0
  inactive = NULL;
 8008b26:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b28:	e000      	b.n	8008b2c <tcp_kill_state+0x28>
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	b15b      	cbz	r3, 8008b46 <tcp_kill_state+0x42>
    if (pcb->state == state) {
 8008b2e:	7d1a      	ldrb	r2, [r3, #20]
 8008b30:	4294      	cmp	r4, r2
 8008b32:	d1fa      	bne.n	8008b2a <tcp_kill_state+0x26>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008b34:	6a1d      	ldr	r5, [r3, #32]
 8008b36:	4a0a      	ldr	r2, [pc, #40]	; (8008b60 <tcp_kill_state+0x5c>)
 8008b38:	6812      	ldr	r2, [r2, #0]
 8008b3a:	1b52      	subs	r2, r2, r5
 8008b3c:	4291      	cmp	r1, r2
 8008b3e:	d8f4      	bhi.n	8008b2a <tcp_kill_state+0x26>
        inactivity = tcp_ticks - pcb->tmr;
 8008b40:	4611      	mov	r1, r2
        inactive = pcb;
 8008b42:	4618      	mov	r0, r3
 8008b44:	e7f1      	b.n	8008b2a <tcp_kill_state+0x26>
  if (inactive != NULL) {
 8008b46:	b110      	cbz	r0, 8008b4e <tcp_kill_state+0x4a>
    tcp_abandon(inactive, 0);
 8008b48:	2100      	movs	r1, #0
 8008b4a:	f7ff ff07 	bl	800895c <tcp_abandon>
 8008b4e:	bd38      	pop	{r3, r4, r5, pc}
 8008b50:	08010038 	.word	0x08010038
 8008b54:	08010028 	.word	0x08010028
 8008b58:	0800cd98 	.word	0x0800cd98
 8008b5c:	2000889c 	.word	0x2000889c
 8008b60:	200088a0 	.word	0x200088a0

08008b64 <tcp_alloc>:
{
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008b68:	2001      	movs	r0, #1
 8008b6a:	f7fe fb93 	bl	8007294 <memp_malloc>
  if (pcb == NULL) {
 8008b6e:	4604      	mov	r4, r0
 8008b70:	b368      	cbz	r0, 8008bce <tcp_alloc+0x6a>
  if (pcb != NULL) {
 8008b72:	b354      	cbz	r4, 8008bca <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008b74:	2298      	movs	r2, #152	; 0x98
 8008b76:	2100      	movs	r1, #0
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f004 f879 	bl	800cc70 <memset>
    pcb->prio = prio;
 8008b7e:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008b80:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8008b84:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008b88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b8c:	8562      	strh	r2, [r4, #42]	; 0x2a
 8008b8e:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008b90:	22ff      	movs	r2, #255	; 0xff
 8008b92:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8008b94:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008b98:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008b9a:	2206      	movs	r2, #6
 8008b9c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008ba0:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8008ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ba6:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008bae:	4a19      	ldr	r2, [pc, #100]	; (8008c14 <tcp_alloc+0xb0>)
 8008bb0:	6812      	ldr	r2, [r2, #0]
 8008bb2:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008bb4:	4a18      	ldr	r2, [pc, #96]	; (8008c18 <tcp_alloc+0xb4>)
 8008bb6:	7812      	ldrb	r2, [r2, #0]
 8008bb8:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 8008bba:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8008bbe:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <tcp_alloc+0xb8>)
 8008bc0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008bc4:	4b16      	ldr	r3, [pc, #88]	; (8008c20 <tcp_alloc+0xbc>)
 8008bc6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8008bca:	4620      	mov	r0, r4
 8008bcc:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 8008bce:	f7ff ff4d 	bl	8008a6c <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008bd2:	2001      	movs	r0, #1
 8008bd4:	f7fe fb5e 	bl	8007294 <memp_malloc>
    if (pcb == NULL) {
 8008bd8:	4604      	mov	r4, r0
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d1c9      	bne.n	8008b72 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8008bde:	2009      	movs	r0, #9
 8008be0:	f7ff ff90 	bl	8008b04 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008be4:	2001      	movs	r0, #1
 8008be6:	f7fe fb55 	bl	8007294 <memp_malloc>
      if (pcb == NULL) {
 8008bea:	4604      	mov	r4, r0
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d1c0      	bne.n	8008b72 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8008bf0:	2008      	movs	r0, #8
 8008bf2:	f7ff ff87 	bl	8008b04 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	f7fe fb4c 	bl	8007294 <memp_malloc>
        if (pcb == NULL) {
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d1b7      	bne.n	8008b72 <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 8008c02:	4628      	mov	r0, r5
 8008c04:	f7ff ff4c 	bl	8008aa0 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c08:	2001      	movs	r0, #1
 8008c0a:	f7fe fb43 	bl	8007294 <memp_malloc>
 8008c0e:	4604      	mov	r4, r0
 8008c10:	e7af      	b.n	8008b72 <tcp_alloc+0xe>
 8008c12:	bf00      	nop
 8008c14:	200088a0 	.word	0x200088a0
 8008c18:	20003eda 	.word	0x20003eda
 8008c1c:	080087cd 	.word	0x080087cd
 8008c20:	006ddd00 	.word	0x006ddd00

08008c24 <tcp_new_ip_type>:
{
 8008c24:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008c26:	2040      	movs	r0, #64	; 0x40
 8008c28:	f7ff ff9c 	bl	8008b64 <tcp_alloc>
}
 8008c2c:	bd08      	pop	{r3, pc}
	...

08008c30 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8008c30:	4b03      	ldr	r3, [pc, #12]	; (8008c40 <tcp_next_iss+0x10>)
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	4a03      	ldr	r2, [pc, #12]	; (8008c44 <tcp_next_iss+0x14>)
 8008c36:	6812      	ldr	r2, [r2, #0]
 8008c38:	4410      	add	r0, r2
 8008c3a:	6018      	str	r0, [r3, #0]
}
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20000008 	.word	0x20000008
 8008c44:	200088a0 	.word	0x200088a0

08008c48 <tcp_eff_send_mss_impl>:
{
 8008c48:	b510      	push	{r4, lr}
 8008c4a:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	f7fd fa43 	bl	80060d8 <ip4_route>
    if (outif == NULL) {
 8008c52:	b138      	cbz	r0, 8008c64 <tcp_eff_send_mss_impl+0x1c>
    mtu = outif->mtu;
 8008c54:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8008c56:	b13b      	cbz	r3, 8008c68 <tcp_eff_send_mss_impl+0x20>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8008c58:	3b28      	subs	r3, #40	; 0x28
 8008c5a:	b298      	uxth	r0, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008c5c:	42a0      	cmp	r0, r4
 8008c5e:	bf28      	it	cs
 8008c60:	4620      	movcs	r0, r4
 8008c62:	bd10      	pop	{r4, pc}
      return sendmss;
 8008c64:	4620      	mov	r0, r4
 8008c66:	bd10      	pop	{r4, pc}
 8008c68:	4620      	mov	r0, r4
}
 8008c6a:	bd10      	pop	{r4, pc}

08008c6c <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8008c6c:	b308      	cbz	r0, 8008cb2 <tcp_netif_ip_addr_changed+0x46>
{
 8008c6e:	b570      	push	{r4, r5, r6, lr}
 8008c70:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8008c72:	6803      	ldr	r3, [r0, #0]
 8008c74:	b903      	cbnz	r3, 8008c78 <tcp_netif_ip_addr_changed+0xc>
 8008c76:	bd70      	pop	{r4, r5, r6, pc}
 8008c78:	460e      	mov	r6, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008c7a:	4b0e      	ldr	r3, [pc, #56]	; (8008cb4 <tcp_netif_ip_addr_changed+0x48>)
 8008c7c:	6819      	ldr	r1, [r3, #0]
 8008c7e:	f7ff ff31 	bl	8008ae4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008c82:	4b0d      	ldr	r3, [pc, #52]	; (8008cb8 <tcp_netif_ip_addr_changed+0x4c>)
 8008c84:	6819      	ldr	r1, [r3, #0]
 8008c86:	4620      	mov	r0, r4
 8008c88:	f7ff ff2c 	bl	8008ae4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008c8c:	2e00      	cmp	r6, #0
 8008c8e:	d0f2      	beq.n	8008c76 <tcp_netif_ip_addr_changed+0xa>
 8008c90:	6833      	ldr	r3, [r6, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0ef      	beq.n	8008c76 <tcp_netif_ip_addr_changed+0xa>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8008c96:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <tcp_netif_ip_addr_changed+0x50>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	e000      	b.n	8008c9e <tcp_netif_ip_addr_changed+0x32>
{
 8008c9c:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0e9      	beq.n	8008c76 <tcp_netif_ip_addr_changed+0xa>
        next = lpcb->next;
 8008ca2:	68da      	ldr	r2, [r3, #12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008ca4:	681d      	ldr	r5, [r3, #0]
 8008ca6:	6820      	ldr	r0, [r4, #0]
 8008ca8:	4285      	cmp	r5, r0
 8008caa:	d1f7      	bne.n	8008c9c <tcp_netif_ip_addr_changed+0x30>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008cac:	6831      	ldr	r1, [r6, #0]
 8008cae:	6019      	str	r1, [r3, #0]
 8008cb0:	e7f4      	b.n	8008c9c <tcp_netif_ip_addr_changed+0x30>
 8008cb2:	4770      	bx	lr
 8008cb4:	2000889c 	.word	0x2000889c
 8008cb8:	200088a8 	.word	0x200088a8
 8008cbc:	200088a4 	.word	0x200088a4

08008cc0 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008cc0:	4b0e      	ldr	r3, [pc, #56]	; (8008cfc <tcp_getoptbyte+0x3c>)
 8008cc2:	6819      	ldr	r1, [r3, #0]
 8008cc4:	b189      	cbz	r1, 8008cea <tcp_getoptbyte+0x2a>
 8008cc6:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <tcp_getoptbyte+0x40>)
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	4a0e      	ldr	r2, [pc, #56]	; (8008d04 <tcp_getoptbyte+0x44>)
 8008ccc:	8812      	ldrh	r2, [r2, #0]
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d30b      	bcc.n	8008cea <tcp_getoptbyte+0x2a>
{
 8008cd2:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008cd4:	1c5c      	adds	r4, r3, #1
 8008cd6:	480a      	ldr	r0, [pc, #40]	; (8008d00 <tcp_getoptbyte+0x40>)
 8008cd8:	8004      	strh	r4, [r0, #0]
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	b2d2      	uxtb	r2, r2
 8008cde:	1a9b      	subs	r3, r3, r2
 8008ce0:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 8008ce2:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8008ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ce8:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008cea:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <tcp_getoptbyte+0x48>)
 8008cec:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8008cee:	4904      	ldr	r1, [pc, #16]	; (8008d00 <tcp_getoptbyte+0x40>)
 8008cf0:	880a      	ldrh	r2, [r1, #0]
 8008cf2:	1c50      	adds	r0, r2, #1
 8008cf4:	8008      	strh	r0, [r1, #0]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	7d18      	ldrb	r0, [r3, #20]
 8008cfa:	4770      	bx	lr
 8008cfc:	20003f10 	.word	0x20003f10
 8008d00:	20003f04 	.word	0x20003f04
 8008d04:	20003f0c 	.word	0x20003f0c
 8008d08:	20003f08 	.word	0x20003f08

08008d0c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008d0c:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008d0e:	4b1f      	ldr	r3, [pc, #124]	; (8008d8c <tcp_parseopt+0x80>)
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d038      	beq.n	8008d88 <tcp_parseopt+0x7c>
 8008d16:	4605      	mov	r5, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4b1d      	ldr	r3, [pc, #116]	; (8008d90 <tcp_parseopt+0x84>)
 8008d1c:	801a      	strh	r2, [r3, #0]
 8008d1e:	4b1c      	ldr	r3, [pc, #112]	; (8008d90 <tcp_parseopt+0x84>)
 8008d20:	881a      	ldrh	r2, [r3, #0]
 8008d22:	4b1a      	ldr	r3, [pc, #104]	; (8008d8c <tcp_parseopt+0x80>)
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d22e      	bcs.n	8008d88 <tcp_parseopt+0x7c>
      u8_t opt = tcp_getoptbyte();
 8008d2a:	f7ff ffc9 	bl	8008cc0 <tcp_getoptbyte>
      switch (opt) {
 8008d2e:	2801      	cmp	r0, #1
 8008d30:	d0f5      	beq.n	8008d1e <tcp_parseopt+0x12>
 8008d32:	b348      	cbz	r0, 8008d88 <tcp_parseopt+0x7c>
 8008d34:	2802      	cmp	r0, #2
 8008d36:	d11d      	bne.n	8008d74 <tcp_parseopt+0x68>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008d38:	f7ff ffc2 	bl	8008cc0 <tcp_getoptbyte>
 8008d3c:	2804      	cmp	r0, #4
 8008d3e:	d123      	bne.n	8008d88 <tcp_parseopt+0x7c>
 8008d40:	4b13      	ldr	r3, [pc, #76]	; (8008d90 <tcp_parseopt+0x84>)
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	3302      	adds	r3, #2
 8008d46:	4a11      	ldr	r2, [pc, #68]	; (8008d8c <tcp_parseopt+0x80>)
 8008d48:	8812      	ldrh	r2, [r2, #0]
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	dc1c      	bgt.n	8008d88 <tcp_parseopt+0x7c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8008d4e:	f7ff ffb7 	bl	8008cc0 <tcp_getoptbyte>
 8008d52:	b283      	uxth	r3, r0
 8008d54:	021b      	lsls	r3, r3, #8
 8008d56:	b29c      	uxth	r4, r3
        mss |= tcp_getoptbyte();
 8008d58:	f7ff ffb2 	bl	8008cc0 <tcp_getoptbyte>
 8008d5c:	b280      	uxth	r0, r0
 8008d5e:	ea44 0300 	orr.w	r3, r4, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008d62:	1e5a      	subs	r2, r3, #1
 8008d64:	b292      	uxth	r2, r2
 8008d66:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 8008d6a:	d301      	bcc.n	8008d70 <tcp_parseopt+0x64>
 8008d6c:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8008d70:	866b      	strh	r3, [r5, #50]	; 0x32
        break;
 8008d72:	e7d4      	b.n	8008d1e <tcp_parseopt+0x12>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008d74:	f7ff ffa4 	bl	8008cc0 <tcp_getoptbyte>
        if (data < 2) {
 8008d78:	2801      	cmp	r0, #1
 8008d7a:	d905      	bls.n	8008d88 <tcp_parseopt+0x7c>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008d7c:	4b04      	ldr	r3, [pc, #16]	; (8008d90 <tcp_parseopt+0x84>)
 8008d7e:	881a      	ldrh	r2, [r3, #0]
 8008d80:	4410      	add	r0, r2
 8008d82:	3802      	subs	r0, #2
 8008d84:	8018      	strh	r0, [r3, #0]
 8008d86:	e7ca      	b.n	8008d1e <tcp_parseopt+0x12>
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20003f14 	.word	0x20003f14
 8008d90:	20003f04 	.word	0x20003f04

08008d94 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8008d94:	4b0e      	ldr	r3, [pc, #56]	; (8008dd0 <tcp_input_delayed_close+0x3c>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	f013 0f10 	tst.w	r3, #16
 8008d9c:	d016      	beq.n	8008dcc <tcp_input_delayed_close+0x38>
{
 8008d9e:	b510      	push	{r4, lr}
 8008da0:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008da2:	7e83      	ldrb	r3, [r0, #26]
 8008da4:	f013 0f10 	tst.w	r3, #16
 8008da8:	d106      	bne.n	8008db8 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008daa:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8008dae:	b11b      	cbz	r3, 8008db8 <tcp_input_delayed_close+0x24>
 8008db0:	f06f 010e 	mvn.w	r1, #14
 8008db4:	6900      	ldr	r0, [r0, #16]
 8008db6:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008db8:	4621      	mov	r1, r4
 8008dba:	4806      	ldr	r0, [pc, #24]	; (8008dd4 <tcp_input_delayed_close+0x40>)
 8008dbc:	f7ff fbfe 	bl	80085bc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	f7fe fa80 	bl	80072c8 <memp_free>
    return 1;
 8008dc8:	2001      	movs	r0, #1
 8008dca:	bd10      	pop	{r4, pc}
  return 0;
 8008dcc:	2000      	movs	r0, #0
 8008dce:	4770      	bx	lr
 8008dd0:	20003efc 	.word	0x20003efc
 8008dd4:	2000889c 	.word	0x2000889c

08008dd8 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8008dd8:	4b1c      	ldr	r3, [pc, #112]	; (8008e4c <tcp_timewait_input+0x74>)
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	f013 0f04 	tst.w	r3, #4
 8008de0:	d132      	bne.n	8008e48 <tcp_timewait_input+0x70>
{
 8008de2:	b510      	push	{r4, lr}
 8008de4:	b082      	sub	sp, #8
  if (flags & TCP_SYN) {
 8008de6:	f013 0f02 	tst.w	r3, #2
 8008dea:	d01c      	beq.n	8008e26 <tcp_timewait_input+0x4e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008dec:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <tcp_timewait_input+0x78>)
 8008dee:	6819      	ldr	r1, [r3, #0]
 8008df0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008df2:	1aca      	subs	r2, r1, r3
 8008df4:	2a00      	cmp	r2, #0
 8008df6:	db1c      	blt.n	8008e32 <tcp_timewait_input+0x5a>
 8008df8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8008dfa:	4413      	add	r3, r2
 8008dfc:	1acb      	subs	r3, r1, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	dc17      	bgt.n	8008e32 <tcp_timewait_input+0x5a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e02:	4b14      	ldr	r3, [pc, #80]	; (8008e54 <tcp_timewait_input+0x7c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e06:	4a14      	ldr	r2, [pc, #80]	; (8008e58 <tcp_timewait_input+0x80>)
 8008e08:	4814      	ldr	r0, [pc, #80]	; (8008e5c <tcp_timewait_input+0x84>)
 8008e0a:	8800      	ldrh	r0, [r0, #0]
 8008e0c:	881c      	ldrh	r4, [r3, #0]
 8008e0e:	9401      	str	r4, [sp, #4]
 8008e10:	885b      	ldrh	r3, [r3, #2]
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	4613      	mov	r3, r2
 8008e16:	3204      	adds	r2, #4
 8008e18:	4401      	add	r1, r0
 8008e1a:	4811      	ldr	r0, [pc, #68]	; (8008e60 <tcp_timewait_input+0x88>)
 8008e1c:	6800      	ldr	r0, [r0, #0]
 8008e1e:	f002 f9f7 	bl	800b210 <tcp_rst>
}
 8008e22:	b002      	add	sp, #8
 8008e24:	bd10      	pop	{r4, pc}
  } else if (flags & TCP_FIN) {
 8008e26:	f013 0f01 	tst.w	r3, #1
 8008e2a:	d002      	beq.n	8008e32 <tcp_timewait_input+0x5a>
    pcb->tmr = tcp_ticks;
 8008e2c:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <tcp_timewait_input+0x8c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6203      	str	r3, [r0, #32]
  if ((tcplen > 0)) {
 8008e32:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <tcp_timewait_input+0x84>)
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0f3      	beq.n	8008e22 <tcp_timewait_input+0x4a>
    pcb->flags |= TF_ACK_NOW;
 8008e3a:	7e83      	ldrb	r3, [r0, #26]
 8008e3c:	f043 0302 	orr.w	r3, r3, #2
 8008e40:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 8008e42:	f002 f889 	bl	800af58 <tcp_output>
 8008e46:	e7ec      	b.n	8008e22 <tcp_timewait_input+0x4a>
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	20003ee0 	.word	0x20003ee0
 8008e50:	20003f00 	.word	0x20003f00
 8008e54:	20003f08 	.word	0x20003f08
 8008e58:	20004284 	.word	0x20004284
 8008e5c:	20003f16 	.word	0x20003f16
 8008e60:	20003edc 	.word	0x20003edc
 8008e64:	200088a0 	.word	0x200088a0

08008e68 <tcp_listen_input>:
  if (flags & TCP_RST) {
 8008e68:	4b3c      	ldr	r3, [pc, #240]	; (8008f5c <tcp_listen_input+0xf4>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	f013 0f04 	tst.w	r3, #4
 8008e70:	d173      	bne.n	8008f5a <tcp_listen_input+0xf2>
{
 8008e72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e74:	b083      	sub	sp, #12
 8008e76:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 8008e78:	f013 0f10 	tst.w	r3, #16
 8008e7c:	d104      	bne.n	8008e88 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 8008e7e:	f013 0f02 	tst.w	r3, #2
 8008e82:	d114      	bne.n	8008eae <tcp_listen_input+0x46>
}
 8008e84:	b003      	add	sp, #12
 8008e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e88:	4b35      	ldr	r3, [pc, #212]	; (8008f60 <tcp_listen_input+0xf8>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e8c:	4a35      	ldr	r2, [pc, #212]	; (8008f64 <tcp_listen_input+0xfc>)
 8008e8e:	4936      	ldr	r1, [pc, #216]	; (8008f68 <tcp_listen_input+0x100>)
 8008e90:	880c      	ldrh	r4, [r1, #0]
 8008e92:	4936      	ldr	r1, [pc, #216]	; (8008f6c <tcp_listen_input+0x104>)
 8008e94:	6809      	ldr	r1, [r1, #0]
 8008e96:	4836      	ldr	r0, [pc, #216]	; (8008f70 <tcp_listen_input+0x108>)
 8008e98:	6800      	ldr	r0, [r0, #0]
 8008e9a:	881d      	ldrh	r5, [r3, #0]
 8008e9c:	9501      	str	r5, [sp, #4]
 8008e9e:	885b      	ldrh	r3, [r3, #2]
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	3204      	adds	r2, #4
 8008ea6:	4421      	add	r1, r4
 8008ea8:	f002 f9b2 	bl	800b210 <tcp_rst>
 8008eac:	e7ea      	b.n	8008e84 <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 8008eae:	7d40      	ldrb	r0, [r0, #21]
 8008eb0:	f7ff fe58 	bl	8008b64 <tcp_alloc>
    if (npcb == NULL) {
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d041      	beq.n	8008f3e <tcp_listen_input+0xd6>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008eba:	4b2e      	ldr	r3, [pc, #184]	; (8008f74 <tcp_listen_input+0x10c>)
 8008ebc:	695a      	ldr	r2, [r3, #20]
 8008ebe:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8008ec4:	8aeb      	ldrh	r3, [r5, #22]
 8008ec6:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8008ec8:	4e25      	ldr	r6, [pc, #148]	; (8008f60 <tcp_listen_input+0xf8>)
 8008eca:	6833      	ldr	r3, [r6, #0]
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8008ed4:	4f25      	ldr	r7, [pc, #148]	; (8008f6c <tcp_listen_input+0x104>)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008edc:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008ede:	f7ff fea7 	bl	8008c30 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 8008ee2:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_nxt = iss;
 8008ee4:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8008ee6:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008ee8:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8008ef0:	692b      	ldr	r3, [r5, #16]
 8008ef2:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8008ef4:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008ef6:	7a2b      	ldrb	r3, [r5, #8]
 8008ef8:	f003 030c 	and.w	r3, r3, #12
 8008efc:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8008efe:	4b1e      	ldr	r3, [pc, #120]	; (8008f78 <tcp_listen_input+0x110>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	60e2      	str	r2, [r4, #12]
 8008f04:	601c      	str	r4, [r3, #0]
 8008f06:	f002 fb8f 	bl	800b628 <tcp_timer_needed>
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	4b1b      	ldr	r3, [pc, #108]	; (8008f7c <tcp_listen_input+0x114>)
 8008f0e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008f10:	4620      	mov	r0, r4
 8008f12:	f7ff fefb 	bl	8008d0c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008f16:	6833      	ldr	r3, [r6, #0]
 8008f18:	89db      	ldrh	r3, [r3, #14]
 8008f1a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008f1e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008f22:	1d21      	adds	r1, r4, #4
 8008f24:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8008f26:	f7ff fe8f 	bl	8008c48 <tcp_eff_send_mss_impl>
 8008f2a:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008f2c:	2112      	movs	r1, #18
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f001 ff02 	bl	800ad38 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8008f34:	b960      	cbnz	r0, 8008f50 <tcp_listen_input+0xe8>
    tcp_output(npcb);
 8008f36:	4620      	mov	r0, r4
 8008f38:	f002 f80e 	bl	800af58 <tcp_output>
 8008f3c:	e7a2      	b.n	8008e84 <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008f3e:	69ab      	ldr	r3, [r5, #24]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d09f      	beq.n	8008e84 <tcp_listen_input+0x1c>
 8008f44:	f04f 32ff 	mov.w	r2, #4294967295
 8008f48:	2100      	movs	r1, #0
 8008f4a:	6928      	ldr	r0, [r5, #16]
 8008f4c:	4798      	blx	r3
 8008f4e:	e799      	b.n	8008e84 <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 8008f50:	2100      	movs	r1, #0
 8008f52:	4620      	mov	r0, r4
 8008f54:	f7ff fd02 	bl	800895c <tcp_abandon>
      return;
 8008f58:	e794      	b.n	8008e84 <tcp_listen_input+0x1c>
 8008f5a:	4770      	bx	lr
 8008f5c:	20003ee0 	.word	0x20003ee0
 8008f60:	20003f08 	.word	0x20003f08
 8008f64:	20004284 	.word	0x20004284
 8008f68:	20003f16 	.word	0x20003f16
 8008f6c:	20003f00 	.word	0x20003f00
 8008f70:	20003edc 	.word	0x20003edc
 8008f74:	20004274 	.word	0x20004274
 8008f78:	2000889c 	.word	0x2000889c
 8008f7c:	20008898 	.word	0x20008898

08008f80 <tcp_oos_insert_segment>:
{
 8008f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f82:	4605      	mov	r5, r0
 8008f84:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008f86:	68c3      	ldr	r3, [r0, #12]
 8008f88:	8998      	ldrh	r0, [r3, #12]
 8008f8a:	f7fc fafc 	bl	8005586 <lwip_htons>
 8008f8e:	f010 0f01 	tst.w	r0, #1
 8008f92:	d009      	beq.n	8008fa8 <tcp_oos_insert_segment+0x28>
    tcp_segs_free(next);
 8008f94:	4620      	mov	r0, r4
 8008f96:	f7ff f85e 	bl	8008056 <tcp_segs_free>
    next = NULL;
 8008f9a:	2400      	movs	r4, #0
 8008f9c:	e02e      	b.n	8008ffc <tcp_oos_insert_segment+0x7c>
      next = next->next;
 8008f9e:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f7ff f84b 	bl	800803c <tcp_seg_free>
      next = next->next;
 8008fa6:	4634      	mov	r4, r6
    while (next &&
 8008fa8:	b1c4      	cbz	r4, 8008fdc <tcp_oos_insert_segment+0x5c>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008faa:	892b      	ldrh	r3, [r5, #8]
 8008fac:	4a14      	ldr	r2, [pc, #80]	; (8009000 <tcp_oos_insert_segment+0x80>)
 8008fae:	6812      	ldr	r2, [r2, #0]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	68e1      	ldr	r1, [r4, #12]
 8008fb4:	684a      	ldr	r2, [r1, #4]
 8008fb6:	8920      	ldrh	r0, [r4, #8]
 8008fb8:	4402      	add	r2, r0
 8008fba:	1a9b      	subs	r3, r3, r2
    while (next &&
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	db0d      	blt.n	8008fdc <tcp_oos_insert_segment+0x5c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008fc0:	8988      	ldrh	r0, [r1, #12]
 8008fc2:	f7fc fae0 	bl	8005586 <lwip_htons>
 8008fc6:	f010 0f01 	tst.w	r0, #1
 8008fca:	d0e8      	beq.n	8008f9e <tcp_oos_insert_segment+0x1e>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008fcc:	68ef      	ldr	r7, [r5, #12]
 8008fce:	89be      	ldrh	r6, [r7, #12]
 8008fd0:	2001      	movs	r0, #1
 8008fd2:	f7fc fad8 	bl	8005586 <lwip_htons>
 8008fd6:	4330      	orrs	r0, r6
 8008fd8:	81b8      	strh	r0, [r7, #12]
 8008fda:	e7e0      	b.n	8008f9e <tcp_oos_insert_segment+0x1e>
    if (next &&
 8008fdc:	b174      	cbz	r4, 8008ffc <tcp_oos_insert_segment+0x7c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008fde:	892b      	ldrh	r3, [r5, #8]
 8008fe0:	4a07      	ldr	r2, [pc, #28]	; (8009000 <tcp_oos_insert_segment+0x80>)
 8008fe2:	6811      	ldr	r1, [r2, #0]
 8008fe4:	440b      	add	r3, r1
 8008fe6:	68e2      	ldr	r2, [r4, #12]
 8008fe8:	6852      	ldr	r2, [r2, #4]
 8008fea:	1a9b      	subs	r3, r3, r2
    if (next &&
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	dd05      	ble.n	8008ffc <tcp_oos_insert_segment+0x7c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008ff0:	1a52      	subs	r2, r2, r1
 8008ff2:	b291      	uxth	r1, r2
 8008ff4:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008ff6:	6868      	ldr	r0, [r5, #4]
 8008ff8:	f7fe fc90 	bl	800791c <pbuf_realloc>
  cseg->next = next;
 8008ffc:	602c      	str	r4, [r5, #0]
 8008ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009000:	20003f00 	.word	0x20003f00

08009004 <tcp_receive>:
{
 8009004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009008:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800900a:	7d03      	ldrb	r3, [r0, #20]
 800900c:	2b03      	cmp	r3, #3
 800900e:	d979      	bls.n	8009104 <tcp_receive+0x100>
  if (flags & TCP_ACK) {
 8009010:	4bae      	ldr	r3, [pc, #696]	; (80092cc <tcp_receive+0x2c8>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	f013 0f10 	tst.w	r3, #16
 8009018:	f000 81aa 	beq.w	8009370 <tcp_receive+0x36c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800901c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8009020:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009022:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009024:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009026:	4baa      	ldr	r3, [pc, #680]	; (80092d0 <tcp_receive+0x2cc>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	1acd      	subs	r5, r1, r3
 800902c:	2d00      	cmp	r5, #0
 800902e:	db7c      	blt.n	800912a <tcp_receive+0x126>
 8009030:	4299      	cmp	r1, r3
 8009032:	d06f      	beq.n	8009114 <tcp_receive+0x110>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009034:	49a7      	ldr	r1, [pc, #668]	; (80092d4 <tcp_receive+0x2d0>)
 8009036:	6809      	ldr	r1, [r1, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009038:	428a      	cmp	r2, r1
 800903a:	d071      	beq.n	8009120 <tcp_receive+0x11c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800903c:	4ba5      	ldr	r3, [pc, #660]	; (80092d4 <tcp_receive+0x2d0>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009042:	1a5a      	subs	r2, r3, r1
 8009044:	2a00      	cmp	r2, #0
 8009046:	f340 8095 	ble.w	8009174 <tcp_receive+0x170>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800904a:	2a01      	cmp	r2, #1
 800904c:	d404      	bmi.n	8009058 <tcp_receive+0x54>
 800904e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009050:	1a9a      	subs	r2, r3, r2
 8009052:	2a00      	cmp	r2, #0
 8009054:	f340 80cc 	ble.w	80091f0 <tcp_receive+0x1ec>
      tcp_send_empty_ack(pcb);
 8009058:	4620      	mov	r0, r4
 800905a:	f001 ff43 	bl	800aee4 <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 800905e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 8176 	beq.w	8009352 <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009066:	4a9b      	ldr	r2, [pc, #620]	; (80092d4 <tcp_receive+0x2d0>)
 8009068:	6815      	ldr	r5, [r2, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	6858      	ldr	r0, [r3, #4]
 800906e:	f7fc fa8d 	bl	800558c <lwip_htonl>
 8009072:	4606      	mov	r6, r0
 8009074:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009076:	891f      	ldrh	r7, [r3, #8]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	8998      	ldrh	r0, [r3, #12]
 800907c:	f7fc fa83 	bl	8005586 <lwip_htons>
 8009080:	f010 0f03 	tst.w	r0, #3
 8009084:	f000 8163 	beq.w	800934e <tcp_receive+0x34a>
 8009088:	2301      	movs	r3, #1
 800908a:	443b      	add	r3, r7
 800908c:	441e      	add	r6, r3
 800908e:	1bad      	subs	r5, r5, r6
    while (pcb->unsent != NULL &&
 8009090:	2d00      	cmp	r5, #0
 8009092:	f2c0 815e 	blt.w	8009352 <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009096:	4b8f      	ldr	r3, [pc, #572]	; (80092d4 <tcp_receive+0x2d0>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f300 8157 	bgt.w	8009352 <tcp_receive+0x34e>
      next = pcb->unsent;
 80090a4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 80090a6:	682b      	ldr	r3, [r5, #0]
 80090a8:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 8144 	beq.w	8009338 <tcp_receive+0x334>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80090b0:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 80090b4:	6868      	ldr	r0, [r5, #4]
 80090b6:	f7fe fca3 	bl	8007a00 <pbuf_clen>
 80090ba:	4286      	cmp	r6, r0
 80090bc:	f0c0 813f 	bcc.w	800933e <tcp_receive+0x33a>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80090c0:	6868      	ldr	r0, [r5, #4]
 80090c2:	f7fe fc9d 	bl	8007a00 <pbuf_clen>
 80090c6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80090ca:	1a18      	subs	r0, r3, r0
 80090cc:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 80090d0:	892b      	ldrh	r3, [r5, #8]
 80090d2:	4a81      	ldr	r2, [pc, #516]	; (80092d8 <tcp_receive+0x2d4>)
 80090d4:	8811      	ldrh	r1, [r2, #0]
 80090d6:	440b      	add	r3, r1
 80090d8:	8013      	strh	r3, [r2, #0]
      tcp_seg_free(next);
 80090da:	4628      	mov	r0, r5
 80090dc:	f7fe ffae 	bl	800803c <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 80090e0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0ba      	beq.n	800905e <tcp_receive+0x5a>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80090e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1b7      	bne.n	800905e <tcp_receive+0x5a>
 80090ee:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1b4      	bne.n	800905e <tcp_receive+0x5a>
 80090f4:	4b79      	ldr	r3, [pc, #484]	; (80092dc <tcp_receive+0x2d8>)
 80090f6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80090fa:	4979      	ldr	r1, [pc, #484]	; (80092e0 <tcp_receive+0x2dc>)
 80090fc:	4879      	ldr	r0, [pc, #484]	; (80092e4 <tcp_receive+0x2e0>)
 80090fe:	f003 fb88 	bl	800c812 <iprintf>
 8009102:	e7ac      	b.n	800905e <tcp_receive+0x5a>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009104:	4b75      	ldr	r3, [pc, #468]	; (80092dc <tcp_receive+0x2d8>)
 8009106:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800910a:	4977      	ldr	r1, [pc, #476]	; (80092e8 <tcp_receive+0x2e4>)
 800910c:	4875      	ldr	r0, [pc, #468]	; (80092e4 <tcp_receive+0x2e0>)
 800910e:	f003 fb80 	bl	800c812 <iprintf>
 8009112:	e77d      	b.n	8009010 <tcp_receive+0xc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009114:	496f      	ldr	r1, [pc, #444]	; (80092d4 <tcp_receive+0x2d0>)
 8009116:	6809      	ldr	r1, [r1, #0]
 8009118:	1a51      	subs	r1, r2, r1
 800911a:	2900      	cmp	r1, #0
 800911c:	da8a      	bge.n	8009034 <tcp_receive+0x30>
 800911e:	e004      	b.n	800912a <tcp_receive+0x126>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009120:	4a72      	ldr	r2, [pc, #456]	; (80092ec <tcp_receive+0x2e8>)
 8009122:	6812      	ldr	r2, [r2, #0]
 8009124:	89d2      	ldrh	r2, [r2, #14]
 8009126:	4290      	cmp	r0, r2
 8009128:	d288      	bcs.n	800903c <tcp_receive+0x38>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800912a:	4a70      	ldr	r2, [pc, #448]	; (80092ec <tcp_receive+0x2e8>)
 800912c:	6812      	ldr	r2, [r2, #0]
 800912e:	89d2      	ldrh	r2, [r2, #14]
 8009130:	b291      	uxth	r1, r2
 8009132:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009136:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800913a:	4281      	cmp	r1, r0
 800913c:	d901      	bls.n	8009142 <tcp_receive+0x13e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800913e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 8009142:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8009144:	4b63      	ldr	r3, [pc, #396]	; (80092d4 <tcp_receive+0x2d0>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800914a:	b951      	cbnz	r1, 8009162 <tcp_receive+0x15e>
        if (pcb->persist_backoff == 0) {
 800914c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009150:	2b00      	cmp	r3, #0
 8009152:	f47f af73 	bne.w	800903c <tcp_receive+0x38>
          pcb->persist_cnt = 0;
 8009156:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 800915a:	2301      	movs	r3, #1
 800915c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009160:	e76c      	b.n	800903c <tcp_receive+0x38>
      } else if (pcb->persist_backoff > 0) {
 8009162:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009166:	2b00      	cmp	r3, #0
 8009168:	f43f af68 	beq.w	800903c <tcp_receive+0x38>
          pcb->persist_backoff = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009172:	e763      	b.n	800903c <tcp_receive+0x38>
      if (tcplen == 0) {
 8009174:	4a5e      	ldr	r2, [pc, #376]	; (80092f0 <tcp_receive+0x2ec>)
 8009176:	8812      	ldrh	r2, [r2, #0]
 8009178:	bb7a      	cbnz	r2, 80091da <tcp_receive+0x1d6>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800917a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800917c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8009180:	4402      	add	r2, r0
 8009182:	4296      	cmp	r6, r2
 8009184:	d001      	beq.n	800918a <tcp_receive+0x186>
  int found_dupack = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	e028      	b.n	80091dc <tcp_receive+0x1d8>
          if (pcb->rtime >= 0) {
 800918a:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800918e:	2a00      	cmp	r2, #0
 8009190:	db2a      	blt.n	80091e8 <tcp_receive+0x1e4>
            if (pcb->lastack == ackno) {
 8009192:	428b      	cmp	r3, r1
 8009194:	d001      	beq.n	800919a <tcp_receive+0x196>
  int found_dupack = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	e020      	b.n	80091dc <tcp_receive+0x1d8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800919a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800919e:	1c53      	adds	r3, r2, #1
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d201      	bcs.n	80091aa <tcp_receive+0x1a6>
                ++pcb->dupacks;
 80091a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 80091aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d90a      	bls.n	80091c8 <tcp_receive+0x1c4>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80091b2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80091b6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80091b8:	4413      	add	r3, r2
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	429a      	cmp	r2, r3
 80091be:	d215      	bcs.n	80091ec <tcp_receive+0x1e8>
                  pcb->cwnd += pcb->mss;
 80091c0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
              found_dupack = 1;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e009      	b.n	80091dc <tcp_receive+0x1d8>
              } else if (pcb->dupacks == 3) {
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d001      	beq.n	80091d0 <tcp_receive+0x1cc>
              found_dupack = 1;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e005      	b.n	80091dc <tcp_receive+0x1d8>
                tcp_rexmit_fast(pcb);
 80091d0:	4620      	mov	r0, r4
 80091d2:	f002 f8b6 	bl	800b342 <tcp_rexmit_fast>
              found_dupack = 1;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e000      	b.n	80091dc <tcp_receive+0x1d8>
  int found_dupack = 0;
 80091da:	2300      	movs	r3, #0
      if (!found_dupack) {
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f47f af3e 	bne.w	800905e <tcp_receive+0x5a>
        pcb->dupacks = 0;
 80091e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091e6:	e73a      	b.n	800905e <tcp_receive+0x5a>
  int found_dupack = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	e7f7      	b.n	80091dc <tcp_receive+0x1d8>
              found_dupack = 1;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e7f5      	b.n	80091dc <tcp_receive+0x1d8>
      if (pcb->flags & TF_INFR) {
 80091f0:	7ea2      	ldrb	r2, [r4, #26]
 80091f2:	f012 0f04 	tst.w	r2, #4
 80091f6:	d006      	beq.n	8009206 <tcp_receive+0x202>
        pcb->flags &= ~TF_INFR;
 80091f8:	f022 0204 	bic.w	r2, r2, #4
 80091fc:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 80091fe:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8009202:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 8009206:	2100      	movs	r1, #0
 8009208:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800920c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8009210:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009212:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 8009216:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800921a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 800921e:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8009220:	7d23      	ldrb	r3, [r4, #20]
 8009222:	2b03      	cmp	r3, #3
 8009224:	d90c      	bls.n	8009240 <tcp_receive+0x23c>
        if (pcb->cwnd < pcb->ssthresh) {
 8009226:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800922a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800922e:	429a      	cmp	r2, r3
 8009230:	d260      	bcs.n	80092f4 <tcp_receive+0x2f0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8009232:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009234:	4413      	add	r3, r2
 8009236:	b29b      	uxth	r3, r3
 8009238:	429a      	cmp	r2, r3
 800923a:	d201      	bcs.n	8009240 <tcp_receive+0x23c>
            pcb->cwnd += pcb->mss;
 800923c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 8009240:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d06d      	beq.n	8009322 <tcp_receive+0x31e>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	6858      	ldr	r0, [r3, #4]
 800924a:	f7fc f99f 	bl	800558c <lwip_htonl>
 800924e:	4605      	mov	r5, r0
 8009250:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009252:	891e      	ldrh	r6, [r3, #8]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	8998      	ldrh	r0, [r3, #12]
 8009258:	f7fc f995 	bl	8005586 <lwip_htons>
 800925c:	f010 0f03 	tst.w	r0, #3
 8009260:	d05d      	beq.n	800931e <tcp_receive+0x31a>
 8009262:	2301      	movs	r3, #1
 8009264:	4433      	add	r3, r6
 8009266:	441d      	add	r5, r3
 8009268:	4b1a      	ldr	r3, [pc, #104]	; (80092d4 <tcp_receive+0x2d0>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 800926e:	2d00      	cmp	r5, #0
 8009270:	dc57      	bgt.n	8009322 <tcp_receive+0x31e>
        next = pcb->unacked;
 8009272:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8009278:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800927c:	6868      	ldr	r0, [r5, #4]
 800927e:	f7fe fbbf 	bl	8007a00 <pbuf_clen>
 8009282:	4286      	cmp	r6, r0
 8009284:	d343      	bcc.n	800930e <tcp_receive+0x30a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8009286:	6868      	ldr	r0, [r5, #4]
 8009288:	f7fe fbba 	bl	8007a00 <pbuf_clen>
 800928c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009290:	1a18      	subs	r0, r3, r0
 8009292:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8009296:	892b      	ldrh	r3, [r5, #8]
 8009298:	4a0f      	ldr	r2, [pc, #60]	; (80092d8 <tcp_receive+0x2d4>)
 800929a:	8811      	ldrh	r1, [r2, #0]
 800929c:	440b      	add	r3, r1
 800929e:	8013      	strh	r3, [r2, #0]
        tcp_seg_free(next);
 80092a0:	4628      	mov	r0, r5
 80092a2:	f7fe fecb 	bl	800803c <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 80092a6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0c8      	beq.n	8009240 <tcp_receive+0x23c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80092ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1c5      	bne.n	8009240 <tcp_receive+0x23c>
 80092b4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1c2      	bne.n	8009240 <tcp_receive+0x23c>
 80092ba:	4b08      	ldr	r3, [pc, #32]	; (80092dc <tcp_receive+0x2d8>)
 80092bc:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80092c0:	4907      	ldr	r1, [pc, #28]	; (80092e0 <tcp_receive+0x2dc>)
 80092c2:	4808      	ldr	r0, [pc, #32]	; (80092e4 <tcp_receive+0x2e0>)
 80092c4:	f003 faa5 	bl	800c812 <iprintf>
 80092c8:	e7ba      	b.n	8009240 <tcp_receive+0x23c>
 80092ca:	bf00      	nop
 80092cc:	20003ee0 	.word	0x20003ee0
 80092d0:	20003f00 	.word	0x20003f00
 80092d4:	20003edc 	.word	0x20003edc
 80092d8:	20003ef4 	.word	0x20003ef4
 80092dc:	08010514 	.word	0x08010514
 80092e0:	0801058c 	.word	0x0801058c
 80092e4:	0800cd98 	.word	0x0800cd98
 80092e8:	08010548 	.word	0x08010548
 80092ec:	20003f08 	.word	0x20003f08
 80092f0:	20003f16 	.word	0x20003f16
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80092f4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80092f6:	fb03 f303 	mul.w	r3, r3, r3
 80092fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80092fe:	fa12 f383 	uxtah	r3, r2, r3
 8009302:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8009304:	429a      	cmp	r2, r3
 8009306:	d29b      	bcs.n	8009240 <tcp_receive+0x23c>
            pcb->cwnd = new_cwnd;
 8009308:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800930c:	e798      	b.n	8009240 <tcp_receive+0x23c>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800930e:	4ba2      	ldr	r3, [pc, #648]	; (8009598 <tcp_receive+0x594>)
 8009310:	f240 429e 	movw	r2, #1182	; 0x49e
 8009314:	49a1      	ldr	r1, [pc, #644]	; (800959c <tcp_receive+0x598>)
 8009316:	48a2      	ldr	r0, [pc, #648]	; (80095a0 <tcp_receive+0x59c>)
 8009318:	f003 fa7b 	bl	800c812 <iprintf>
 800931c:	e7b3      	b.n	8009286 <tcp_receive+0x282>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800931e:	2300      	movs	r3, #0
 8009320:	e7a0      	b.n	8009264 <tcp_receive+0x260>
      if (pcb->unacked == NULL) {
 8009322:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009324:	b123      	cbz	r3, 8009330 <tcp_receive+0x32c>
        pcb->rtime = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	76e3      	strb	r3, [r4, #27]
 800932e:	e696      	b.n	800905e <tcp_receive+0x5a>
        pcb->rtime = -1;
 8009330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009334:	8623      	strh	r3, [r4, #48]	; 0x30
 8009336:	e7f8      	b.n	800932a <tcp_receive+0x326>
        pcb->unsent_oversize = 0;
 8009338:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800933c:	e6b8      	b.n	80090b0 <tcp_receive+0xac>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800933e:	4b96      	ldr	r3, [pc, #600]	; (8009598 <tcp_receive+0x594>)
 8009340:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009344:	4995      	ldr	r1, [pc, #596]	; (800959c <tcp_receive+0x598>)
 8009346:	4896      	ldr	r0, [pc, #600]	; (80095a0 <tcp_receive+0x59c>)
 8009348:	f003 fa63 	bl	800c812 <iprintf>
 800934c:	e6b8      	b.n	80090c0 <tcp_receive+0xbc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800934e:	2300      	movs	r3, #0
 8009350:	e69b      	b.n	800908a <tcp_receive+0x86>
    pcb->snd_buf += recv_acked;
 8009352:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8009356:	4a93      	ldr	r2, [pc, #588]	; (80095a4 <tcp_receive+0x5a0>)
 8009358:	8812      	ldrh	r2, [r2, #0]
 800935a:	4413      	add	r3, r2
 800935c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009360:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009362:	b12b      	cbz	r3, 8009370 <tcp_receive+0x36c>
 8009364:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009366:	4990      	ldr	r1, [pc, #576]	; (80095a8 <tcp_receive+0x5a4>)
 8009368:	6809      	ldr	r1, [r1, #0]
 800936a:	1a52      	subs	r2, r2, r1
 800936c:	2a00      	cmp	r2, #0
 800936e:	db29      	blt.n	80093c4 <tcp_receive+0x3c0>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009370:	4b8e      	ldr	r3, [pc, #568]	; (80095ac <tcp_receive+0x5a8>)
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 834b 	beq.w	8009a10 <tcp_receive+0xa0c>
 800937a:	7d22      	ldrb	r2, [r4, #20]
 800937c:	2a06      	cmp	r2, #6
 800937e:	f200 8347 	bhi.w	8009a10 <tcp_receive+0xa0c>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009382:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009384:	4a8a      	ldr	r2, [pc, #552]	; (80095b0 <tcp_receive+0x5ac>)
 8009386:	6812      	ldr	r2, [r2, #0]
 8009388:	1a8e      	subs	r6, r1, r2
 800938a:	2e01      	cmp	r6, #1
 800938c:	d404      	bmi.n	8009398 <tcp_receive+0x394>
 800938e:	4413      	add	r3, r2
 8009390:	1acb      	subs	r3, r1, r3
 8009392:	3301      	adds	r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	dd36      	ble.n	8009406 <tcp_receive+0x402>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009398:	1a52      	subs	r2, r2, r1
 800939a:	2a00      	cmp	r2, #0
 800939c:	f2c0 8093 	blt.w	80094c6 <tcp_receive+0x4c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80093a0:	4b83      	ldr	r3, [pc, #524]	; (80095b0 <tcp_receive+0x5ac>)
 80093a2:	6819      	ldr	r1, [r3, #0]
 80093a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80093a6:	1a8b      	subs	r3, r1, r2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	db06      	blt.n	80093ba <tcp_receive+0x3b6>
 80093ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80093ae:	4413      	add	r3, r2
 80093b0:	1acb      	subs	r3, r1, r3
 80093b2:	3301      	adds	r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f340 808b 	ble.w	80094d0 <tcp_receive+0x4cc>
      tcp_send_empty_ack(pcb);
 80093ba:	4620      	mov	r0, r4
 80093bc:	f001 fd92 	bl	800aee4 <tcp_send_empty_ack>
 80093c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80093c4:	4a7b      	ldr	r2, [pc, #492]	; (80095b4 <tcp_receive+0x5b0>)
 80093c6:	6812      	ldr	r2, [r2, #0]
 80093c8:	1ad2      	subs	r2, r2, r3
 80093ca:	b292      	uxth	r2, r2
      m = m - (pcb->sa >> 3);
 80093cc:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 80093d0:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 80093d4:	b292      	uxth	r2, r2
 80093d6:	b213      	sxth	r3, r2
      pcb->sa += m;
 80093d8:	4411      	add	r1, r2
 80093da:	b209      	sxth	r1, r1
 80093dc:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 80093de:	2b00      	cmp	r3, #0
 80093e0:	db0e      	blt.n	8009400 <tcp_receive+0x3fc>
      m = m - (pcb->sv >> 2);
 80093e2:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 80093e6:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv += m;
 80093ea:	fa12 f383 	uxtah	r3, r2, r3
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80093f2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80093f6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	6363      	str	r3, [r4, #52]	; 0x34
 80093fe:	e7b7      	b.n	8009370 <tcp_receive+0x36c>
        m = -m;
 8009400:	4253      	negs	r3, r2
 8009402:	b21b      	sxth	r3, r3
 8009404:	e7ed      	b.n	80093e2 <tcp_receive+0x3de>
      struct pbuf *p = inseg.p;
 8009406:	4b6c      	ldr	r3, [pc, #432]	; (80095b8 <tcp_receive+0x5b4>)
 8009408:	685d      	ldr	r5, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 800940a:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800940c:	b195      	cbz	r5, 8009434 <tcp_receive+0x430>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800940e:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8009412:	429e      	cmp	r6, r3
 8009414:	dc16      	bgt.n	8009444 <tcp_receive+0x440>
      if (inseg.p->len < off) {
 8009416:	4b68      	ldr	r3, [pc, #416]	; (80095b8 <tcp_receive+0x5b4>)
 8009418:	6858      	ldr	r0, [r3, #4]
 800941a:	8943      	ldrh	r3, [r0, #10]
 800941c:	429e      	cmp	r6, r3
 800941e:	dd44      	ble.n	80094aa <tcp_receive+0x4a6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009420:	8903      	ldrh	r3, [r0, #8]
 8009422:	429e      	cmp	r6, r3
 8009424:	dc16      	bgt.n	8009454 <tcp_receive+0x450>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009426:	4b64      	ldr	r3, [pc, #400]	; (80095b8 <tcp_receive+0x5b4>)
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	891a      	ldrh	r2, [r3, #8]
 800942c:	b2b6      	uxth	r6, r6
 800942e:	1b92      	subs	r2, r2, r6
 8009430:	b292      	uxth	r2, r2
        while (p->len < off) {
 8009432:	e01c      	b.n	800946e <tcp_receive+0x46a>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009434:	4b58      	ldr	r3, [pc, #352]	; (8009598 <tcp_receive+0x594>)
 8009436:	f240 523c 	movw	r2, #1340	; 0x53c
 800943a:	4960      	ldr	r1, [pc, #384]	; (80095bc <tcp_receive+0x5b8>)
 800943c:	4858      	ldr	r0, [pc, #352]	; (80095a0 <tcp_receive+0x59c>)
 800943e:	f003 f9e8 	bl	800c812 <iprintf>
 8009442:	e7e4      	b.n	800940e <tcp_receive+0x40a>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8009444:	4b54      	ldr	r3, [pc, #336]	; (8009598 <tcp_receive+0x594>)
 8009446:	f240 523d 	movw	r2, #1341	; 0x53d
 800944a:	495d      	ldr	r1, [pc, #372]	; (80095c0 <tcp_receive+0x5bc>)
 800944c:	4854      	ldr	r0, [pc, #336]	; (80095a0 <tcp_receive+0x59c>)
 800944e:	f003 f9e0 	bl	800c812 <iprintf>
 8009452:	e7e0      	b.n	8009416 <tcp_receive+0x412>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009454:	4b50      	ldr	r3, [pc, #320]	; (8009598 <tcp_receive+0x594>)
 8009456:	f240 523f 	movw	r2, #1343	; 0x53f
 800945a:	495a      	ldr	r1, [pc, #360]	; (80095c4 <tcp_receive+0x5c0>)
 800945c:	4850      	ldr	r0, [pc, #320]	; (80095a0 <tcp_receive+0x59c>)
 800945e:	f003 f9d8 	bl	800c812 <iprintf>
 8009462:	e7e0      	b.n	8009426 <tcp_receive+0x422>
          off -= p->len;
 8009464:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 8009466:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	816b      	strh	r3, [r5, #10]
          p = p->next;
 800946c:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 800946e:	896b      	ldrh	r3, [r5, #10]
 8009470:	429f      	cmp	r7, r3
 8009472:	dcf7      	bgt.n	8009464 <tcp_receive+0x460>
        if (pbuf_header(p, (s16_t)-off)) {
 8009474:	4279      	negs	r1, r7
 8009476:	b209      	sxth	r1, r1
 8009478:	4628      	mov	r0, r5
 800947a:	f7fe f8f1 	bl	8007660 <pbuf_header>
 800947e:	b960      	cbnz	r0, 800949a <tcp_receive+0x496>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8009480:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009482:	484b      	ldr	r0, [pc, #300]	; (80095b0 <tcp_receive+0x5ac>)
 8009484:	6803      	ldr	r3, [r0, #0]
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	494b      	ldr	r1, [pc, #300]	; (80095b8 <tcp_receive+0x5b4>)
 800948a:	890d      	ldrh	r5, [r1, #8]
 800948c:	fa15 f383 	uxtah	r3, r5, r3
 8009490:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009492:	68cb      	ldr	r3, [r1, #12]
 8009494:	6002      	str	r2, [r0, #0]
 8009496:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009498:	e782      	b.n	80093a0 <tcp_receive+0x39c>
          LWIP_ASSERT("pbuf_header failed", 0);
 800949a:	4b3f      	ldr	r3, [pc, #252]	; (8009598 <tcp_receive+0x594>)
 800949c:	f240 524c 	movw	r2, #1356	; 0x54c
 80094a0:	4949      	ldr	r1, [pc, #292]	; (80095c8 <tcp_receive+0x5c4>)
 80094a2:	483f      	ldr	r0, [pc, #252]	; (80095a0 <tcp_receive+0x59c>)
 80094a4:	f003 f9b5 	bl	800c812 <iprintf>
 80094a8:	e7ea      	b.n	8009480 <tcp_receive+0x47c>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80094aa:	4271      	negs	r1, r6
 80094ac:	b209      	sxth	r1, r1
 80094ae:	f7fe f8d7 	bl	8007660 <pbuf_header>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d0e4      	beq.n	8009480 <tcp_receive+0x47c>
          LWIP_ASSERT("pbuf_header failed", 0);
 80094b6:	4b38      	ldr	r3, [pc, #224]	; (8009598 <tcp_receive+0x594>)
 80094b8:	f240 5251 	movw	r2, #1361	; 0x551
 80094bc:	4942      	ldr	r1, [pc, #264]	; (80095c8 <tcp_receive+0x5c4>)
 80094be:	4838      	ldr	r0, [pc, #224]	; (80095a0 <tcp_receive+0x59c>)
 80094c0:	f003 f9a7 	bl	800c812 <iprintf>
 80094c4:	e7dc      	b.n	8009480 <tcp_receive+0x47c>
        tcp_ack_now(pcb);
 80094c6:	7ea3      	ldrb	r3, [r4, #26]
 80094c8:	f043 0302 	orr.w	r3, r3, #2
 80094cc:	76a3      	strb	r3, [r4, #26]
 80094ce:	e767      	b.n	80093a0 <tcp_receive+0x39c>
      if (pcb->rcv_nxt == seqno) {
 80094d0:	4291      	cmp	r1, r2
 80094d2:	d008      	beq.n	80094e6 <tcp_receive+0x4e2>
        tcp_send_empty_ack(pcb);
 80094d4:	4620      	mov	r0, r4
 80094d6:	f001 fd05 	bl	800aee4 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 80094da:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80094dc:	2d00      	cmp	r5, #0
 80094de:	f000 81ad 	beq.w	800983c <tcp_receive+0x838>
 80094e2:	2600      	movs	r6, #0
 80094e4:	e1e4      	b.n	80098b0 <tcp_receive+0x8ac>
        tcplen = TCP_TCPLEN(&inseg);
 80094e6:	4b34      	ldr	r3, [pc, #208]	; (80095b8 <tcp_receive+0x5b4>)
 80094e8:	891d      	ldrh	r5, [r3, #8]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	8998      	ldrh	r0, [r3, #12]
 80094ee:	f7fc f84a 	bl	8005586 <lwip_htons>
 80094f2:	f010 0f03 	tst.w	r0, #3
 80094f6:	d015      	beq.n	8009524 <tcp_receive+0x520>
 80094f8:	2301      	movs	r3, #1
 80094fa:	442b      	add	r3, r5
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	4a2b      	ldr	r2, [pc, #172]	; (80095ac <tcp_receive+0x5a8>)
 8009500:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 8009502:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009504:	4293      	cmp	r3, r2
 8009506:	d80f      	bhi.n	8009528 <tcp_receive+0x524>
        if (pcb->ooseq != NULL) {
 8009508:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 80ed 	beq.w	80096ea <tcp_receive+0x6e6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009510:	4b29      	ldr	r3, [pc, #164]	; (80095b8 <tcp_receive+0x5b4>)
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	8998      	ldrh	r0, [r3, #12]
 8009516:	f7fc f836 	bl	8005586 <lwip_htons>
 800951a:	f010 0f01 	tst.w	r0, #1
 800951e:	d168      	bne.n	80095f2 <tcp_receive+0x5ee>
            next = pcb->ooseq;
 8009520:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 8009522:	e077      	b.n	8009614 <tcp_receive+0x610>
        tcplen = TCP_TCPLEN(&inseg);
 8009524:	2300      	movs	r3, #0
 8009526:	e7e8      	b.n	80094fa <tcp_receive+0x4f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009528:	4b23      	ldr	r3, [pc, #140]	; (80095b8 <tcp_receive+0x5b4>)
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	8998      	ldrh	r0, [r3, #12]
 800952e:	f7fc f82a 	bl	8005586 <lwip_htons>
 8009532:	f010 0f01 	tst.w	r0, #1
 8009536:	d14b      	bne.n	80095d0 <tcp_receive+0x5cc>
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009538:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800953a:	4b1f      	ldr	r3, [pc, #124]	; (80095b8 <tcp_receive+0x5b4>)
 800953c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	8998      	ldrh	r0, [r3, #12]
 8009542:	f7fc f820 	bl	8005586 <lwip_htons>
 8009546:	f010 0f02 	tst.w	r0, #2
 800954a:	d003      	beq.n	8009554 <tcp_receive+0x550>
            inseg.len -= 1;
 800954c:	4a1a      	ldr	r2, [pc, #104]	; (80095b8 <tcp_receive+0x5b4>)
 800954e:	8913      	ldrh	r3, [r2, #8]
 8009550:	3b01      	subs	r3, #1
 8009552:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8009554:	4d18      	ldr	r5, [pc, #96]	; (80095b8 <tcp_receive+0x5b4>)
 8009556:	8929      	ldrh	r1, [r5, #8]
 8009558:	6868      	ldr	r0, [r5, #4]
 800955a:	f7fe f9df 	bl	800791c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800955e:	892e      	ldrh	r6, [r5, #8]
 8009560:	68eb      	ldr	r3, [r5, #12]
 8009562:	8998      	ldrh	r0, [r3, #12]
 8009564:	f7fc f80f 	bl	8005586 <lwip_htons>
 8009568:	f010 0f03 	tst.w	r0, #3
 800956c:	d03f      	beq.n	80095ee <tcp_receive+0x5ea>
 800956e:	2301      	movs	r3, #1
 8009570:	4433      	add	r3, r6
 8009572:	b29b      	uxth	r3, r3
 8009574:	4a0d      	ldr	r2, [pc, #52]	; (80095ac <tcp_receive+0x5a8>)
 8009576:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009578:	4a0d      	ldr	r2, [pc, #52]	; (80095b0 <tcp_receive+0x5ac>)
 800957a:	6812      	ldr	r2, [r2, #0]
 800957c:	4413      	add	r3, r2
 800957e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009580:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009582:	440a      	add	r2, r1
 8009584:	4293      	cmp	r3, r2
 8009586:	d0bf      	beq.n	8009508 <tcp_receive+0x504>
 8009588:	4b03      	ldr	r3, [pc, #12]	; (8009598 <tcp_receive+0x594>)
 800958a:	f240 527f 	movw	r2, #1407	; 0x57f
 800958e:	490f      	ldr	r1, [pc, #60]	; (80095cc <tcp_receive+0x5c8>)
 8009590:	4803      	ldr	r0, [pc, #12]	; (80095a0 <tcp_receive+0x59c>)
 8009592:	f003 f93e 	bl	800c812 <iprintf>
 8009596:	e7b7      	b.n	8009508 <tcp_receive+0x504>
 8009598:	08010514 	.word	0x08010514
 800959c:	08010564 	.word	0x08010564
 80095a0:	0800cd98 	.word	0x0800cd98
 80095a4:	20003ef4 	.word	0x20003ef4
 80095a8:	20003edc 	.word	0x20003edc
 80095ac:	20003f16 	.word	0x20003f16
 80095b0:	20003f00 	.word	0x20003f00
 80095b4:	200088a0 	.word	0x200088a0
 80095b8:	20003ee4 	.word	0x20003ee4
 80095bc:	080105ac 	.word	0x080105ac
 80095c0:	080105bc 	.word	0x080105bc
 80095c4:	080105cc 	.word	0x080105cc
 80095c8:	080105dc 	.word	0x080105dc
 80095cc:	080105f0 	.word	0x080105f0
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80095d0:	4ba9      	ldr	r3, [pc, #676]	; (8009878 <tcp_receive+0x874>)
 80095d2:	68de      	ldr	r6, [r3, #12]
 80095d4:	89b0      	ldrh	r0, [r6, #12]
 80095d6:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 80095da:	b2ad      	uxth	r5, r5
 80095dc:	f7fb ffd3 	bl	8005586 <lwip_htons>
 80095e0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80095e4:	f7fb ffcf 	bl	8005586 <lwip_htons>
 80095e8:	4328      	orrs	r0, r5
 80095ea:	81b0      	strh	r0, [r6, #12]
 80095ec:	e7a4      	b.n	8009538 <tcp_receive+0x534>
          tcplen = TCP_TCPLEN(&inseg);
 80095ee:	2300      	movs	r3, #0
 80095f0:	e7be      	b.n	8009570 <tcp_receive+0x56c>
            while (pcb->ooseq != NULL) {
 80095f2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d078      	beq.n	80096ea <tcp_receive+0x6e6>
              pcb->ooseq = pcb->ooseq->next;
 80095f8:	6803      	ldr	r3, [r0, #0]
 80095fa:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80095fc:	f7fe fd1e 	bl	800803c <tcp_seg_free>
 8009600:	e7f7      	b.n	80095f2 <tcp_receive+0x5ee>
                tcplen = TCP_TCPLEN(&inseg);
 8009602:	2300      	movs	r3, #0
 8009604:	443b      	add	r3, r7
 8009606:	4a9d      	ldr	r2, [pc, #628]	; (800987c <tcp_receive+0x878>)
 8009608:	8013      	strh	r3, [r2, #0]
              next = next->next;
 800960a:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 800960c:	4628      	mov	r0, r5
 800960e:	f7fe fd15 	bl	800803c <tcp_seg_free>
              next = next->next;
 8009612:	4635      	mov	r5, r6
            while (next &&
 8009614:	b375      	cbz	r5, 8009674 <tcp_receive+0x670>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009616:	4b99      	ldr	r3, [pc, #612]	; (800987c <tcp_receive+0x878>)
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	4a99      	ldr	r2, [pc, #612]	; (8009880 <tcp_receive+0x87c>)
 800961c:	6812      	ldr	r2, [r2, #0]
 800961e:	4413      	add	r3, r2
 8009620:	68e9      	ldr	r1, [r5, #12]
 8009622:	684a      	ldr	r2, [r1, #4]
 8009624:	8928      	ldrh	r0, [r5, #8]
 8009626:	4402      	add	r2, r0
 8009628:	1a9b      	subs	r3, r3, r2
            while (next &&
 800962a:	2b00      	cmp	r3, #0
 800962c:	db22      	blt.n	8009674 <tcp_receive+0x670>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800962e:	8988      	ldrh	r0, [r1, #12]
 8009630:	f7fb ffa9 	bl	8005586 <lwip_htons>
 8009634:	f010 0f01 	tst.w	r0, #1
 8009638:	d0e7      	beq.n	800960a <tcp_receive+0x606>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800963a:	4b8f      	ldr	r3, [pc, #572]	; (8009878 <tcp_receive+0x874>)
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	8998      	ldrh	r0, [r3, #12]
 8009640:	f7fb ffa1 	bl	8005586 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009644:	f010 0f02 	tst.w	r0, #2
 8009648:	d1df      	bne.n	800960a <tcp_receive+0x606>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800964a:	4e8b      	ldr	r6, [pc, #556]	; (8009878 <tcp_receive+0x874>)
 800964c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8009650:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8009654:	2001      	movs	r0, #1
 8009656:	f7fb ff96 	bl	8005586 <lwip_htons>
 800965a:	4338      	orrs	r0, r7
 800965c:	f8a8 000c 	strh.w	r0, [r8, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009660:	8937      	ldrh	r7, [r6, #8]
 8009662:	68f3      	ldr	r3, [r6, #12]
 8009664:	8998      	ldrh	r0, [r3, #12]
 8009666:	f7fb ff8e 	bl	8005586 <lwip_htons>
 800966a:	f010 0f03 	tst.w	r0, #3
 800966e:	d0c8      	beq.n	8009602 <tcp_receive+0x5fe>
 8009670:	2301      	movs	r3, #1
 8009672:	e7c7      	b.n	8009604 <tcp_receive+0x600>
            if (next &&
 8009674:	2d00      	cmp	r5, #0
 8009676:	d037      	beq.n	80096e8 <tcp_receive+0x6e4>
                TCP_SEQ_GT(seqno + tcplen,
 8009678:	4b81      	ldr	r3, [pc, #516]	; (8009880 <tcp_receive+0x87c>)
 800967a:	6819      	ldr	r1, [r3, #0]
 800967c:	4b7f      	ldr	r3, [pc, #508]	; (800987c <tcp_receive+0x878>)
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	440b      	add	r3, r1
 8009682:	68ea      	ldr	r2, [r5, #12]
 8009684:	6852      	ldr	r2, [r2, #4]
 8009686:	1a9b      	subs	r3, r3, r2
            if (next &&
 8009688:	2b00      	cmp	r3, #0
 800968a:	dd2d      	ble.n	80096e8 <tcp_receive+0x6e4>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800968c:	1a52      	subs	r2, r2, r1
 800968e:	4b7a      	ldr	r3, [pc, #488]	; (8009878 <tcp_receive+0x874>)
 8009690:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	8998      	ldrh	r0, [r3, #12]
 8009696:	f7fb ff76 	bl	8005586 <lwip_htons>
 800969a:	f010 0f02 	tst.w	r0, #2
 800969e:	d003      	beq.n	80096a8 <tcp_receive+0x6a4>
                inseg.len -= 1;
 80096a0:	4a75      	ldr	r2, [pc, #468]	; (8009878 <tcp_receive+0x874>)
 80096a2:	8913      	ldrh	r3, [r2, #8]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 80096a8:	4e73      	ldr	r6, [pc, #460]	; (8009878 <tcp_receive+0x874>)
 80096aa:	8931      	ldrh	r1, [r6, #8]
 80096ac:	6870      	ldr	r0, [r6, #4]
 80096ae:	f7fe f935 	bl	800791c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80096b2:	8937      	ldrh	r7, [r6, #8]
 80096b4:	68f3      	ldr	r3, [r6, #12]
 80096b6:	8998      	ldrh	r0, [r3, #12]
 80096b8:	f7fb ff65 	bl	8005586 <lwip_htons>
 80096bc:	f010 0f03 	tst.w	r0, #3
 80096c0:	d03b      	beq.n	800973a <tcp_receive+0x736>
 80096c2:	2301      	movs	r3, #1
 80096c4:	443b      	add	r3, r7
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	4a6c      	ldr	r2, [pc, #432]	; (800987c <tcp_receive+0x878>)
 80096ca:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80096cc:	4a6c      	ldr	r2, [pc, #432]	; (8009880 <tcp_receive+0x87c>)
 80096ce:	6812      	ldr	r2, [r2, #0]
 80096d0:	4413      	add	r3, r2
 80096d2:	68ea      	ldr	r2, [r5, #12]
 80096d4:	6852      	ldr	r2, [r2, #4]
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d006      	beq.n	80096e8 <tcp_receive+0x6e4>
 80096da:	4b6a      	ldr	r3, [pc, #424]	; (8009884 <tcp_receive+0x880>)
 80096dc:	f240 52af 	movw	r2, #1455	; 0x5af
 80096e0:	4969      	ldr	r1, [pc, #420]	; (8009888 <tcp_receive+0x884>)
 80096e2:	486a      	ldr	r0, [pc, #424]	; (800988c <tcp_receive+0x888>)
 80096e4:	f003 f895 	bl	800c812 <iprintf>
            pcb->ooseq = next;
 80096e8:	6725      	str	r5, [r4, #112]	; 0x70
        pcb->rcv_nxt = seqno + tcplen;
 80096ea:	4b64      	ldr	r3, [pc, #400]	; (800987c <tcp_receive+0x878>)
 80096ec:	881a      	ldrh	r2, [r3, #0]
 80096ee:	4b64      	ldr	r3, [pc, #400]	; (8009880 <tcp_receive+0x87c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4413      	add	r3, r2
 80096f4:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80096f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d820      	bhi.n	800973e <tcp_receive+0x73a>
        pcb->rcv_wnd -= tcplen;
 80096fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80096fe:	4a5f      	ldr	r2, [pc, #380]	; (800987c <tcp_receive+0x878>)
 8009700:	8812      	ldrh	r2, [r2, #0]
 8009702:	1a9b      	subs	r3, r3, r2
 8009704:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8009706:	4620      	mov	r0, r4
 8009708:	f7fe fc26 	bl	8007f58 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800970c:	4b5a      	ldr	r3, [pc, #360]	; (8009878 <tcp_receive+0x874>)
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	891a      	ldrh	r2, [r3, #8]
 8009712:	b122      	cbz	r2, 800971e <tcp_receive+0x71a>
          recv_data = inseg.p;
 8009714:	4a5e      	ldr	r2, [pc, #376]	; (8009890 <tcp_receive+0x88c>)
 8009716:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8009718:	2200      	movs	r2, #0
 800971a:	4b57      	ldr	r3, [pc, #348]	; (8009878 <tcp_receive+0x874>)
 800971c:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800971e:	4b56      	ldr	r3, [pc, #344]	; (8009878 <tcp_receive+0x874>)
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	8998      	ldrh	r0, [r3, #12]
 8009724:	f7fb ff2f 	bl	8005586 <lwip_htons>
 8009728:	f010 0f01 	tst.w	r0, #1
 800972c:	d035      	beq.n	800979a <tcp_receive+0x796>
          recv_flags |= TF_GOT_FIN;
 800972e:	4a59      	ldr	r2, [pc, #356]	; (8009894 <tcp_receive+0x890>)
 8009730:	7813      	ldrb	r3, [r2, #0]
 8009732:	f043 0320 	orr.w	r3, r3, #32
 8009736:	7013      	strb	r3, [r2, #0]
 8009738:	e02f      	b.n	800979a <tcp_receive+0x796>
              tcplen = TCP_TCPLEN(&inseg);
 800973a:	2300      	movs	r3, #0
 800973c:	e7c2      	b.n	80096c4 <tcp_receive+0x6c0>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800973e:	4b51      	ldr	r3, [pc, #324]	; (8009884 <tcp_receive+0x880>)
 8009740:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009744:	4954      	ldr	r1, [pc, #336]	; (8009898 <tcp_receive+0x894>)
 8009746:	4851      	ldr	r0, [pc, #324]	; (800988c <tcp_receive+0x888>)
 8009748:	f003 f863 	bl	800c812 <iprintf>
 800974c:	e7d6      	b.n	80096fc <tcp_receive+0x6f8>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800974e:	2300      	movs	r3, #0
 8009750:	e035      	b.n	80097be <tcp_receive+0x7ba>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009752:	2300      	movs	r3, #0
 8009754:	e041      	b.n	80097da <tcp_receive+0x7d6>
 8009756:	4b4b      	ldr	r3, [pc, #300]	; (8009884 <tcp_receive+0x880>)
 8009758:	f240 52de 	movw	r2, #1502	; 0x5de
 800975c:	494f      	ldr	r1, [pc, #316]	; (800989c <tcp_receive+0x898>)
 800975e:	484b      	ldr	r0, [pc, #300]	; (800988c <tcp_receive+0x888>)
 8009760:	f003 f857 	bl	800c812 <iprintf>
 8009764:	e03c      	b.n	80097e0 <tcp_receive+0x7dc>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009766:	2300      	movs	r3, #0
 8009768:	e043      	b.n	80097f2 <tcp_receive+0x7ee>
              recv_data = cseg->p;
 800976a:	4b49      	ldr	r3, [pc, #292]	; (8009890 <tcp_receive+0x88c>)
 800976c:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 800976e:	2300      	movs	r3, #0
 8009770:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009772:	68eb      	ldr	r3, [r5, #12]
 8009774:	8998      	ldrh	r0, [r3, #12]
 8009776:	f7fb ff06 	bl	8005586 <lwip_htons>
 800977a:	f010 0f01 	tst.w	r0, #1
 800977e:	d007      	beq.n	8009790 <tcp_receive+0x78c>
            recv_flags |= TF_GOT_FIN;
 8009780:	4a44      	ldr	r2, [pc, #272]	; (8009894 <tcp_receive+0x890>)
 8009782:	7813      	ldrb	r3, [r2, #0]
 8009784:	f043 0320 	orr.w	r3, r3, #32
 8009788:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800978a:	7d23      	ldrb	r3, [r4, #20]
 800978c:	2b04      	cmp	r3, #4
 800978e:	d042      	beq.n	8009816 <tcp_receive+0x812>
          pcb->ooseq = cseg->next;
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8009794:	4628      	mov	r0, r5
 8009796:	f7fe fc51 	bl	800803c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800979a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800979c:	2d00      	cmp	r5, #0
 800979e:	d03d      	beq.n	800981c <tcp_receive+0x818>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80097a0:	68ea      	ldr	r2, [r5, #12]
 80097a2:	6853      	ldr	r3, [r2, #4]
 80097a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80097a6:	428b      	cmp	r3, r1
 80097a8:	d138      	bne.n	800981c <tcp_receive+0x818>
          seqno = pcb->ooseq->tcphdr->seqno;
 80097aa:	4935      	ldr	r1, [pc, #212]	; (8009880 <tcp_receive+0x87c>)
 80097ac:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80097ae:	892e      	ldrh	r6, [r5, #8]
 80097b0:	8990      	ldrh	r0, [r2, #12]
 80097b2:	f7fb fee8 	bl	8005586 <lwip_htons>
 80097b6:	f010 0f03 	tst.w	r0, #3
 80097ba:	d0c8      	beq.n	800974e <tcp_receive+0x74a>
 80097bc:	2301      	movs	r3, #1
 80097be:	199a      	adds	r2, r3, r6
 80097c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097c2:	4413      	add	r3, r2
 80097c4:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80097c6:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 80097c8:	892f      	ldrh	r7, [r5, #8]
 80097ca:	68eb      	ldr	r3, [r5, #12]
 80097cc:	8998      	ldrh	r0, [r3, #12]
 80097ce:	f7fb feda 	bl	8005586 <lwip_htons>
 80097d2:	f010 0f03 	tst.w	r0, #3
 80097d6:	d0bc      	beq.n	8009752 <tcp_receive+0x74e>
 80097d8:	2301      	movs	r3, #1
 80097da:	443b      	add	r3, r7
 80097dc:	429e      	cmp	r6, r3
 80097de:	d3ba      	bcc.n	8009756 <tcp_receive+0x752>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80097e0:	892e      	ldrh	r6, [r5, #8]
 80097e2:	68eb      	ldr	r3, [r5, #12]
 80097e4:	8998      	ldrh	r0, [r3, #12]
 80097e6:	f7fb fece 	bl	8005586 <lwip_htons>
 80097ea:	f010 0f03 	tst.w	r0, #3
 80097ee:	d0ba      	beq.n	8009766 <tcp_receive+0x762>
 80097f0:	2301      	movs	r3, #1
 80097f2:	199a      	adds	r2, r3, r6
 80097f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80097f6:	1a9b      	subs	r3, r3, r2
 80097f8:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80097fa:	4620      	mov	r0, r4
 80097fc:	f7fe fbac 	bl	8007f58 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8009800:	6869      	ldr	r1, [r5, #4]
 8009802:	890b      	ldrh	r3, [r1, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0b4      	beq.n	8009772 <tcp_receive+0x76e>
            if (recv_data) {
 8009808:	4b21      	ldr	r3, [pc, #132]	; (8009890 <tcp_receive+0x88c>)
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	2800      	cmp	r0, #0
 800980e:	d0ac      	beq.n	800976a <tcp_receive+0x766>
              pbuf_cat(recv_data, cseg->p);
 8009810:	f7fe f91c 	bl	8007a4c <pbuf_cat>
 8009814:	e7ab      	b.n	800976e <tcp_receive+0x76a>
              pcb->state = CLOSE_WAIT;
 8009816:	2307      	movs	r3, #7
 8009818:	7523      	strb	r3, [r4, #20]
 800981a:	e7b9      	b.n	8009790 <tcp_receive+0x78c>
        tcp_ack(pcb);
 800981c:	7ea3      	ldrb	r3, [r4, #26]
 800981e:	f013 0f01 	tst.w	r3, #1
 8009822:	d006      	beq.n	8009832 <tcp_receive+0x82e>
 8009824:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009828:	f043 0302 	orr.w	r3, r3, #2
 800982c:	76a3      	strb	r3, [r4, #26]
 800982e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009832:	f043 0301 	orr.w	r3, r3, #1
 8009836:	76a3      	strb	r3, [r4, #26]
 8009838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
 800983c:	480e      	ldr	r0, [pc, #56]	; (8009878 <tcp_receive+0x874>)
 800983e:	f7fe fc14 	bl	800806a <tcp_seg_copy>
 8009842:	6720      	str	r0, [r4, #112]	; 0x70
 8009844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              if (inseg.len > next->len) {
 8009848:	4b0b      	ldr	r3, [pc, #44]	; (8009878 <tcp_receive+0x874>)
 800984a:	891a      	ldrh	r2, [r3, #8]
 800984c:	892b      	ldrh	r3, [r5, #8]
 800984e:	429a      	cmp	r2, r3
 8009850:	f240 80ee 	bls.w	8009a30 <tcp_receive+0xa2c>
                cseg = tcp_seg_copy(&inseg);
 8009854:	4808      	ldr	r0, [pc, #32]	; (8009878 <tcp_receive+0x874>)
 8009856:	f7fe fc08 	bl	800806a <tcp_seg_copy>
                if (cseg != NULL) {
 800985a:	4603      	mov	r3, r0
 800985c:	2800      	cmp	r0, #0
 800985e:	f000 80e7 	beq.w	8009a30 <tcp_receive+0xa2c>
                  if (prev != NULL) {
 8009862:	b136      	cbz	r6, 8009872 <tcp_receive+0x86e>
                    prev->next = cseg;
 8009864:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 8009866:	4629      	mov	r1, r5
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff fb89 	bl	8008f80 <tcp_oos_insert_segment>
 800986e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pcb->ooseq = cseg;
 8009872:	6720      	str	r0, [r4, #112]	; 0x70
 8009874:	e7f7      	b.n	8009866 <tcp_receive+0x862>
 8009876:	bf00      	nop
 8009878:	20003ee4 	.word	0x20003ee4
 800987c:	20003f16 	.word	0x20003f16
 8009880:	20003f00 	.word	0x20003f00
 8009884:	08010514 	.word	0x08010514
 8009888:	08010628 	.word	0x08010628
 800988c:	0800cd98 	.word	0x0800cd98
 8009890:	20003ef8 	.word	0x20003ef8
 8009894:	20003efc 	.word	0x20003efc
 8009898:	08010664 	.word	0x08010664
 800989c:	08010684 	.word	0x08010684
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80098a0:	1a5a      	subs	r2, r3, r1
 80098a2:	2a00      	cmp	r2, #0
 80098a4:	db35      	blt.n	8009912 <tcp_receive+0x90e>
              if (next->next == NULL &&
 80098a6:	682a      	ldr	r2, [r5, #0]
 80098a8:	462e      	mov	r6, r5
 80098aa:	2a00      	cmp	r2, #0
 80098ac:	d03d      	beq.n	800992a <tcp_receive+0x926>
 80098ae:	4615      	mov	r5, r2
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80098b0:	2d00      	cmp	r5, #0
 80098b2:	f000 80ab 	beq.w	8009a0c <tcp_receive+0xa08>
            if (seqno == next->tcphdr->seqno) {
 80098b6:	68e8      	ldr	r0, [r5, #12]
 80098b8:	6841      	ldr	r1, [r0, #4]
 80098ba:	4b5e      	ldr	r3, [pc, #376]	; (8009a34 <tcp_receive+0xa30>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4299      	cmp	r1, r3
 80098c0:	d0c2      	beq.n	8009848 <tcp_receive+0x844>
              if (prev == NULL) {
 80098c2:	2e00      	cmp	r6, #0
 80098c4:	d0ec      	beq.n	80098a0 <tcp_receive+0x89c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80098c6:	68f2      	ldr	r2, [r6, #12]
 80098c8:	6852      	ldr	r2, [r2, #4]
 80098ca:	1a9a      	subs	r2, r3, r2
 80098cc:	2a01      	cmp	r2, #1
 80098ce:	d4ea      	bmi.n	80098a6 <tcp_receive+0x8a2>
 80098d0:	1a5a      	subs	r2, r3, r1
 80098d2:	3201      	adds	r2, #1
 80098d4:	2a00      	cmp	r2, #0
 80098d6:	dce6      	bgt.n	80098a6 <tcp_receive+0x8a2>
                  cseg = tcp_seg_copy(&inseg);
 80098d8:	4857      	ldr	r0, [pc, #348]	; (8009a38 <tcp_receive+0xa34>)
 80098da:	f7fe fbc6 	bl	800806a <tcp_seg_copy>
                  if (cseg != NULL) {
 80098de:	4604      	mov	r4, r0
 80098e0:	2800      	cmp	r0, #0
 80098e2:	f000 80a5 	beq.w	8009a30 <tcp_receive+0xa2c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80098e6:	68f3      	ldr	r3, [r6, #12]
 80098e8:	6859      	ldr	r1, [r3, #4]
 80098ea:	8932      	ldrh	r2, [r6, #8]
 80098ec:	440a      	add	r2, r1
 80098ee:	4b51      	ldr	r3, [pc, #324]	; (8009a34 <tcp_receive+0xa30>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	1ad2      	subs	r2, r2, r3
 80098f4:	2a00      	cmp	r2, #0
 80098f6:	dd05      	ble.n	8009904 <tcp_receive+0x900>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80098f8:	1a5b      	subs	r3, r3, r1
 80098fa:	b299      	uxth	r1, r3
 80098fc:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 80098fe:	6870      	ldr	r0, [r6, #4]
 8009900:	f7fe f80c 	bl	800791c <pbuf_realloc>
                    prev->next = cseg;
 8009904:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009906:	4629      	mov	r1, r5
 8009908:	4620      	mov	r0, r4
 800990a:	f7ff fb39 	bl	8008f80 <tcp_oos_insert_segment>
 800990e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  cseg = tcp_seg_copy(&inseg);
 8009912:	4849      	ldr	r0, [pc, #292]	; (8009a38 <tcp_receive+0xa34>)
 8009914:	f7fe fba9 	bl	800806a <tcp_seg_copy>
                  if (cseg != NULL) {
 8009918:	2800      	cmp	r0, #0
 800991a:	f000 8089 	beq.w	8009a30 <tcp_receive+0xa2c>
                    pcb->ooseq = cseg;
 800991e:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8009920:	4629      	mov	r1, r5
 8009922:	f7ff fb2d 	bl	8008f80 <tcp_oos_insert_segment>
 8009926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800992a:	1a5b      	subs	r3, r3, r1
              if (next->next == NULL &&
 800992c:	2b00      	cmp	r3, #0
 800992e:	dc01      	bgt.n	8009934 <tcp_receive+0x930>
 8009930:	4615      	mov	r5, r2
 8009932:	e7bd      	b.n	80098b0 <tcp_receive+0x8ac>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009934:	8980      	ldrh	r0, [r0, #12]
 8009936:	f7fb fe26 	bl	8005586 <lwip_htons>
 800993a:	f010 0f01 	tst.w	r0, #1
 800993e:	d177      	bne.n	8009a30 <tcp_receive+0xa2c>
                next->next = tcp_seg_copy(&inseg);
 8009940:	483d      	ldr	r0, [pc, #244]	; (8009a38 <tcp_receive+0xa34>)
 8009942:	f7fe fb92 	bl	800806a <tcp_seg_copy>
 8009946:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8009948:	2800      	cmp	r0, #0
 800994a:	d071      	beq.n	8009a30 <tcp_receive+0xa2c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800994c:	68eb      	ldr	r3, [r5, #12]
 800994e:	6859      	ldr	r1, [r3, #4]
 8009950:	892a      	ldrh	r2, [r5, #8]
 8009952:	440a      	add	r2, r1
 8009954:	4b37      	ldr	r3, [pc, #220]	; (8009a34 <tcp_receive+0xa30>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	1ad2      	subs	r2, r2, r3
 800995a:	2a00      	cmp	r2, #0
 800995c:	dd05      	ble.n	800996a <tcp_receive+0x966>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800995e:	1a5b      	subs	r3, r3, r1
 8009960:	b299      	uxth	r1, r3
 8009962:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8009964:	6868      	ldr	r0, [r5, #4]
 8009966:	f7fd ffd9 	bl	800791c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800996a:	4b34      	ldr	r3, [pc, #208]	; (8009a3c <tcp_receive+0xa38>)
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	4a31      	ldr	r2, [pc, #196]	; (8009a34 <tcp_receive+0xa30>)
 8009970:	6812      	ldr	r2, [r2, #0]
 8009972:	4413      	add	r3, r2
 8009974:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009976:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009978:	440a      	add	r2, r1
 800997a:	1a9b      	subs	r3, r3, r2
 800997c:	2b00      	cmp	r3, #0
 800997e:	dd57      	ble.n	8009a30 <tcp_receive+0xa2c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	8998      	ldrh	r0, [r3, #12]
 8009986:	f7fb fdfe 	bl	8005586 <lwip_htons>
 800998a:	f010 0f01 	tst.w	r0, #1
 800998e:	d12c      	bne.n	80099ea <tcp_receive+0x9e6>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009990:	682a      	ldr	r2, [r5, #0]
 8009992:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009994:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009996:	440b      	add	r3, r1
 8009998:	b29b      	uxth	r3, r3
 800999a:	4926      	ldr	r1, [pc, #152]	; (8009a34 <tcp_receive+0xa30>)
 800999c:	6809      	ldr	r1, [r1, #0]
 800999e:	1a5b      	subs	r3, r3, r1
 80099a0:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80099a2:	682b      	ldr	r3, [r5, #0]
 80099a4:	8919      	ldrh	r1, [r3, #8]
 80099a6:	6858      	ldr	r0, [r3, #4]
 80099a8:	f7fd ffb8 	bl	800791c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80099ac:	682b      	ldr	r3, [r5, #0]
 80099ae:	891d      	ldrh	r5, [r3, #8]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	8998      	ldrh	r0, [r3, #12]
 80099b4:	f7fb fde7 	bl	8005586 <lwip_htons>
 80099b8:	f010 0f03 	tst.w	r0, #3
 80099bc:	d024      	beq.n	8009a08 <tcp_receive+0xa04>
 80099be:	2301      	movs	r3, #1
 80099c0:	442b      	add	r3, r5
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	4a1d      	ldr	r2, [pc, #116]	; (8009a3c <tcp_receive+0xa38>)
 80099c6:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80099c8:	4a1a      	ldr	r2, [pc, #104]	; (8009a34 <tcp_receive+0xa30>)
 80099ca:	6812      	ldr	r2, [r2, #0]
 80099cc:	4413      	add	r3, r2
 80099ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80099d0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80099d2:	440a      	add	r2, r1
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d02b      	beq.n	8009a30 <tcp_receive+0xa2c>
 80099d8:	4b19      	ldr	r3, [pc, #100]	; (8009a40 <tcp_receive+0xa3c>)
 80099da:	f240 627b 	movw	r2, #1659	; 0x67b
 80099de:	4919      	ldr	r1, [pc, #100]	; (8009a44 <tcp_receive+0xa40>)
 80099e0:	4819      	ldr	r0, [pc, #100]	; (8009a48 <tcp_receive+0xa44>)
 80099e2:	f002 ff16 	bl	800c812 <iprintf>
 80099e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80099ea:	682b      	ldr	r3, [r5, #0]
 80099ec:	68df      	ldr	r7, [r3, #12]
 80099ee:	89b8      	ldrh	r0, [r7, #12]
 80099f0:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 80099f4:	b2b6      	uxth	r6, r6
 80099f6:	f7fb fdc6 	bl	8005586 <lwip_htons>
 80099fa:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80099fe:	f7fb fdc2 	bl	8005586 <lwip_htons>
 8009a02:	4330      	orrs	r0, r6
 8009a04:	81b8      	strh	r0, [r7, #12]
 8009a06:	e7c3      	b.n	8009990 <tcp_receive+0x98c>
                    tcplen = TCP_TCPLEN(next->next);
 8009a08:	2300      	movs	r3, #0
 8009a0a:	e7d9      	b.n	80099c0 <tcp_receive+0x9bc>
 8009a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009a10:	4b08      	ldr	r3, [pc, #32]	; (8009a34 <tcp_receive+0xa30>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009a16:	1a99      	subs	r1, r3, r2
 8009a18:	2900      	cmp	r1, #0
 8009a1a:	db05      	blt.n	8009a28 <tcp_receive+0xa24>
 8009a1c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009a1e:	440a      	add	r2, r1
 8009a20:	1a9b      	subs	r3, r3, r2
 8009a22:	3301      	adds	r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	dd03      	ble.n	8009a30 <tcp_receive+0xa2c>
      tcp_ack_now(pcb);
 8009a28:	7ea3      	ldrb	r3, [r4, #26]
 8009a2a:	f043 0302 	orr.w	r3, r3, #2
 8009a2e:	76a3      	strb	r3, [r4, #26]
 8009a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a34:	20003f00 	.word	0x20003f00
 8009a38:	20003ee4 	.word	0x20003ee4
 8009a3c:	20003f16 	.word	0x20003f16
 8009a40:	08010514 	.word	0x08010514
 8009a44:	080105f0 	.word	0x080105f0
 8009a48:	0800cd98 	.word	0x0800cd98

08009a4c <tcp_process>:
{
 8009a4c:	b570      	push	{r4, r5, r6, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 8009a52:	4ba3      	ldr	r3, [pc, #652]	; (8009ce0 <tcp_process+0x294>)
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	f013 0f04 	tst.w	r3, #4
 8009a5a:	d03d      	beq.n	8009ad8 <tcp_process+0x8c>
    if (pcb->state == SYN_SENT) {
 8009a5c:	7d01      	ldrb	r1, [r0, #20]
 8009a5e:	2902      	cmp	r1, #2
 8009a60:	d012      	beq.n	8009a88 <tcp_process+0x3c>
      if (seqno == pcb->rcv_nxt) {
 8009a62:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009a64:	4b9f      	ldr	r3, [pc, #636]	; (8009ce4 <tcp_process+0x298>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d01c      	beq.n	8009aa6 <tcp_process+0x5a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009a6c:	1a98      	subs	r0, r3, r2
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	db1b      	blt.n	8009aaa <tcp_process+0x5e>
 8009a72:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8009a74:	4402      	add	r2, r0
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	dd0c      	ble.n	8009a96 <tcp_process+0x4a>
  u8_t acceptable = 0;
 8009a7c:	2300      	movs	r3, #0
    if (acceptable) {
 8009a7e:	b9b3      	cbnz	r3, 8009aae <tcp_process+0x62>
      return ERR_OK;
 8009a80:	2500      	movs	r5, #0
}
 8009a82:	4628      	mov	r0, r5
 8009a84:	b002      	add	sp, #8
 8009a86:	bd70      	pop	{r4, r5, r6, pc}
      if (ackno == pcb->snd_nxt) {
 8009a88:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8009a8a:	4b97      	ldr	r3, [pc, #604]	; (8009ce8 <tcp_process+0x29c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d007      	beq.n	8009aa2 <tcp_process+0x56>
  u8_t acceptable = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	e7f3      	b.n	8009a7e <tcp_process+0x32>
        tcp_ack_now(pcb);
 8009a96:	7ea3      	ldrb	r3, [r4, #26]
 8009a98:	f043 0302 	orr.w	r3, r3, #2
 8009a9c:	76a3      	strb	r3, [r4, #26]
  u8_t acceptable = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	e7ed      	b.n	8009a7e <tcp_process+0x32>
        acceptable = 1;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e7eb      	b.n	8009a7e <tcp_process+0x32>
        acceptable = 1;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e7e9      	b.n	8009a7e <tcp_process+0x32>
  u8_t acceptable = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e7e7      	b.n	8009a7e <tcp_process+0x32>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009aae:	b159      	cbz	r1, 8009ac8 <tcp_process+0x7c>
      recv_flags |= TF_RESET;
 8009ab0:	4a8e      	ldr	r2, [pc, #568]	; (8009cec <tcp_process+0x2a0>)
 8009ab2:	7813      	ldrb	r3, [r2, #0]
 8009ab4:	f043 0308 	orr.w	r3, r3, #8
 8009ab8:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8009aba:	7ea3      	ldrb	r3, [r4, #26]
 8009abc:	f023 0301 	bic.w	r3, r3, #1
 8009ac0:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 8009ac2:	f06f 050d 	mvn.w	r5, #13
 8009ac6:	e7dc      	b.n	8009a82 <tcp_process+0x36>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009ac8:	4b89      	ldr	r3, [pc, #548]	; (8009cf0 <tcp_process+0x2a4>)
 8009aca:	f240 22e7 	movw	r2, #743	; 0x2e7
 8009ace:	4989      	ldr	r1, [pc, #548]	; (8009cf4 <tcp_process+0x2a8>)
 8009ad0:	4889      	ldr	r0, [pc, #548]	; (8009cf8 <tcp_process+0x2ac>)
 8009ad2:	f002 fe9e 	bl	800c812 <iprintf>
 8009ad6:	e7eb      	b.n	8009ab0 <tcp_process+0x64>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009ad8:	f013 0f02 	tst.w	r3, #2
 8009adc:	d00a      	beq.n	8009af4 <tcp_process+0xa8>
 8009ade:	7d03      	ldrb	r3, [r0, #20]
 8009ae0:	3b02      	subs	r3, #2
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d905      	bls.n	8009af4 <tcp_process+0xa8>
    tcp_ack_now(pcb);
 8009ae8:	7e83      	ldrb	r3, [r0, #26]
 8009aea:	f043 0302 	orr.w	r3, r3, #2
 8009aee:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 8009af0:	2500      	movs	r5, #0
 8009af2:	e7c6      	b.n	8009a82 <tcp_process+0x36>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009af4:	7ea3      	ldrb	r3, [r4, #26]
 8009af6:	f013 0f10 	tst.w	r3, #16
 8009afa:	d102      	bne.n	8009b02 <tcp_process+0xb6>
    pcb->tmr = tcp_ticks;
 8009afc:	4b7f      	ldr	r3, [pc, #508]	; (8009cfc <tcp_process+0x2b0>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f7ff f8ff 	bl	8008d0c <tcp_parseopt>
  switch (pcb->state) {
 8009b0e:	7d23      	ldrb	r3, [r4, #20]
 8009b10:	3b02      	subs	r3, #2
 8009b12:	2b07      	cmp	r3, #7
 8009b14:	f200 8219 	bhi.w	8009f4a <tcp_process+0x4fe>
 8009b18:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009b1c:	009b0008 	.word	0x009b0008
 8009b20:	01460135 	.word	0x01460135
 8009b24:	0135019c 	.word	0x0135019c
 8009b28:	01fd01ca 	.word	0x01fd01ca
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009b2c:	4b6c      	ldr	r3, [pc, #432]	; (8009ce0 <tcp_process+0x294>)
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	f003 0212 	and.w	r2, r3, #18
 8009b34:	2a12      	cmp	r2, #18
 8009b36:	d004      	beq.n	8009b42 <tcp_process+0xf6>
    else if (flags & TCP_ACK) {
 8009b38:	f013 0f10 	tst.w	r3, #16
 8009b3c:	d16b      	bne.n	8009c16 <tcp_process+0x1ca>
  return ERR_OK;
 8009b3e:	2500      	movs	r5, #0
 8009b40:	e79f      	b.n	8009a82 <tcp_process+0x36>
        && (ackno == pcb->lastack + 1)) {
 8009b42:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009b44:	3201      	adds	r2, #1
 8009b46:	4968      	ldr	r1, [pc, #416]	; (8009ce8 <tcp_process+0x29c>)
 8009b48:	6809      	ldr	r1, [r1, #0]
 8009b4a:	428a      	cmp	r2, r1
 8009b4c:	d1f4      	bne.n	8009b38 <tcp_process+0xec>
      pcb->rcv_nxt = seqno + 1;
 8009b4e:	4b65      	ldr	r3, [pc, #404]	; (8009ce4 <tcp_process+0x298>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	1c5a      	adds	r2, r3, #1
 8009b54:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009b56:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 8009b58:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8009b5a:	4a69      	ldr	r2, [pc, #420]	; (8009d00 <tcp_process+0x2b4>)
 8009b5c:	6812      	ldr	r2, [r2, #0]
 8009b5e:	89d2      	ldrh	r2, [r2, #14]
 8009b60:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8009b64:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009b70:	18e1      	adds	r1, r4, r3
 8009b72:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009b74:	f7ff f868 	bl	8008c48 <tcp_eff_send_mss_impl>
 8009b78:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b7a:	0043      	lsls	r3, r0, #1
 8009b7c:	f241 121c 	movw	r2, #4380	; 0x111c
 8009b80:	4293      	cmp	r3, r2
 8009b82:	bf38      	it	cc
 8009b84:	4613      	movcc	r3, r2
 8009b86:	0080      	lsls	r0, r0, #2
 8009b88:	4283      	cmp	r3, r0
 8009b8a:	bf28      	it	cs
 8009b8c:	4603      	movcs	r3, r0
 8009b8e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009b92:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009b96:	b31b      	cbz	r3, 8009be0 <tcp_process+0x194>
      --pcb->snd_queuelen;
 8009b98:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8009ba2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 8009ba4:	b325      	cbz	r5, 8009bf0 <tcp_process+0x1a4>
        pcb->unacked = rseg->next;
 8009ba6:	682b      	ldr	r3, [r5, #0]
 8009ba8:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 8009baa:	4628      	mov	r0, r5
 8009bac:	f7fe fa46 	bl	800803c <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8009bb0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009bb2:	b353      	cbz	r3, 8009c0a <tcp_process+0x1be>
        pcb->rtime = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8009bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009bbc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009bc0:	b33b      	cbz	r3, 8009c12 <tcp_process+0x1c6>
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	6920      	ldr	r0, [r4, #16]
 8009bc8:	4798      	blx	r3
 8009bca:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 8009bcc:	f115 0f0d 	cmn.w	r5, #13
 8009bd0:	f43f af57 	beq.w	8009a82 <tcp_process+0x36>
      tcp_ack_now(pcb);
 8009bd4:	7ea3      	ldrb	r3, [r4, #26]
 8009bd6:	f043 0302 	orr.w	r3, r3, #2
 8009bda:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 8009bdc:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 8009bde:	e750      	b.n	8009a82 <tcp_process+0x36>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009be0:	4b43      	ldr	r3, [pc, #268]	; (8009cf0 <tcp_process+0x2a4>)
 8009be2:	f240 321a 	movw	r2, #794	; 0x31a
 8009be6:	4947      	ldr	r1, [pc, #284]	; (8009d04 <tcp_process+0x2b8>)
 8009be8:	4843      	ldr	r0, [pc, #268]	; (8009cf8 <tcp_process+0x2ac>)
 8009bea:	f002 fe12 	bl	800c812 <iprintf>
 8009bee:	e7d3      	b.n	8009b98 <tcp_process+0x14c>
        rseg = pcb->unsent;
 8009bf0:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8009bf2:	b115      	cbz	r5, 8009bfa <tcp_process+0x1ae>
        pcb->unsent = rseg->next;
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	66a3      	str	r3, [r4, #104]	; 0x68
 8009bf8:	e7d7      	b.n	8009baa <tcp_process+0x15e>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8009bfa:	4b3d      	ldr	r3, [pc, #244]	; (8009cf0 <tcp_process+0x2a4>)
 8009bfc:	f240 3222 	movw	r2, #802	; 0x322
 8009c00:	4941      	ldr	r1, [pc, #260]	; (8009d08 <tcp_process+0x2bc>)
 8009c02:	483d      	ldr	r0, [pc, #244]	; (8009cf8 <tcp_process+0x2ac>)
 8009c04:	f002 fe05 	bl	800c812 <iprintf>
 8009c08:	e7f4      	b.n	8009bf4 <tcp_process+0x1a8>
        pcb->rtime = -1;
 8009c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c0e:	8623      	strh	r3, [r4, #48]	; 0x30
 8009c10:	e7d4      	b.n	8009bbc <tcp_process+0x170>
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009c12:	2500      	movs	r5, #0
 8009c14:	e7da      	b.n	8009bcc <tcp_process+0x180>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c16:	4b3a      	ldr	r3, [pc, #232]	; (8009d00 <tcp_process+0x2b4>)
 8009c18:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c1a:	4a3c      	ldr	r2, [pc, #240]	; (8009d0c <tcp_process+0x2c0>)
 8009c1c:	493c      	ldr	r1, [pc, #240]	; (8009d10 <tcp_process+0x2c4>)
 8009c1e:	880d      	ldrh	r5, [r1, #0]
 8009c20:	4930      	ldr	r1, [pc, #192]	; (8009ce4 <tcp_process+0x298>)
 8009c22:	6809      	ldr	r1, [r1, #0]
 8009c24:	4830      	ldr	r0, [pc, #192]	; (8009ce8 <tcp_process+0x29c>)
 8009c26:	6800      	ldr	r0, [r0, #0]
 8009c28:	881e      	ldrh	r6, [r3, #0]
 8009c2a:	9601      	str	r6, [sp, #4]
 8009c2c:	885b      	ldrh	r3, [r3, #2]
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	4613      	mov	r3, r2
 8009c32:	3204      	adds	r2, #4
 8009c34:	4429      	add	r1, r5
 8009c36:	f001 faeb 	bl	800b210 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009c3a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009c3e:	2b05      	cmp	r3, #5
 8009c40:	d901      	bls.n	8009c46 <tcp_process+0x1fa>
  return ERR_OK;
 8009c42:	2500      	movs	r5, #0
 8009c44:	e71d      	b.n	8009a82 <tcp_process+0x36>
        pcb->rtime = 0;
 8009c46:	2500      	movs	r5, #0
 8009c48:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f001 fb34 	bl	800b2b8 <tcp_rexmit_rto>
 8009c50:	e717      	b.n	8009a82 <tcp_process+0x36>
    if (flags & TCP_ACK) {
 8009c52:	4b23      	ldr	r3, [pc, #140]	; (8009ce0 <tcp_process+0x294>)
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	f013 0f10 	tst.w	r3, #16
 8009c5a:	f000 8083 	beq.w	8009d64 <tcp_process+0x318>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009c5e:	4b22      	ldr	r3, [pc, #136]	; (8009ce8 <tcp_process+0x29c>)
 8009c60:	6818      	ldr	r0, [r3, #0]
 8009c62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009c64:	1ac3      	subs	r3, r0, r3
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d403      	bmi.n	8009c72 <tcp_process+0x226>
 8009c6a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009c6c:	1ac3      	subs	r3, r0, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	dd11      	ble.n	8009c96 <tcp_process+0x24a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c72:	4b23      	ldr	r3, [pc, #140]	; (8009d00 <tcp_process+0x2b4>)
 8009c74:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c76:	4a25      	ldr	r2, [pc, #148]	; (8009d0c <tcp_process+0x2c0>)
 8009c78:	4925      	ldr	r1, [pc, #148]	; (8009d10 <tcp_process+0x2c4>)
 8009c7a:	880c      	ldrh	r4, [r1, #0]
 8009c7c:	4919      	ldr	r1, [pc, #100]	; (8009ce4 <tcp_process+0x298>)
 8009c7e:	6809      	ldr	r1, [r1, #0]
 8009c80:	881d      	ldrh	r5, [r3, #0]
 8009c82:	9501      	str	r5, [sp, #4]
 8009c84:	885b      	ldrh	r3, [r3, #2]
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	3204      	adds	r2, #4
 8009c8c:	4421      	add	r1, r4
 8009c8e:	f001 fabf 	bl	800b210 <tcp_rst>
  return ERR_OK;
 8009c92:	2500      	movs	r5, #0
 8009c94:	e6f5      	b.n	8009a82 <tcp_process+0x36>
        pcb->state = ESTABLISHED;
 8009c96:	2304      	movs	r3, #4
 8009c98:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009c9a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009c9c:	b10b      	cbz	r3, 8009ca2 <tcp_process+0x256>
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	b19b      	cbz	r3, 8009cca <tcp_process+0x27e>
        if (pcb->listener == NULL) {
 8009ca2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009ca4:	b1cb      	cbz	r3, 8009cda <tcp_process+0x28e>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	b3b3      	cbz	r3, 8009d18 <tcp_process+0x2cc>
 8009caa:	2200      	movs	r2, #0
 8009cac:	4621      	mov	r1, r4
 8009cae:	6920      	ldr	r0, [r4, #16]
 8009cb0:	4798      	blx	r3
 8009cb2:	4605      	mov	r5, r0
        if (err != ERR_OK) {
 8009cb4:	b39d      	cbz	r5, 8009d1e <tcp_process+0x2d2>
          if (err != ERR_ABRT) {
 8009cb6:	f115 0f0d 	cmn.w	r5, #13
 8009cba:	f43f aee2 	beq.w	8009a82 <tcp_process+0x36>
            tcp_abort(pcb);
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f7fe fec8 	bl	8008a54 <tcp_abort>
          return ERR_ABRT;
 8009cc4:	f06f 050c 	mvn.w	r5, #12
 8009cc8:	e6db      	b.n	8009a82 <tcp_process+0x36>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009cca:	4b09      	ldr	r3, [pc, #36]	; (8009cf0 <tcp_process+0x2a4>)
 8009ccc:	f240 3251 	movw	r2, #849	; 0x351
 8009cd0:	4910      	ldr	r1, [pc, #64]	; (8009d14 <tcp_process+0x2c8>)
 8009cd2:	4809      	ldr	r0, [pc, #36]	; (8009cf8 <tcp_process+0x2ac>)
 8009cd4:	f002 fd9d 	bl	800c812 <iprintf>
 8009cd8:	e7e3      	b.n	8009ca2 <tcp_process+0x256>
          err = ERR_VAL;
 8009cda:	f06f 0505 	mvn.w	r5, #5
 8009cde:	e7e9      	b.n	8009cb4 <tcp_process+0x268>
 8009ce0:	20003ee0 	.word	0x20003ee0
 8009ce4:	20003f00 	.word	0x20003f00
 8009ce8:	20003edc 	.word	0x20003edc
 8009cec:	20003efc 	.word	0x20003efc
 8009cf0:	08010514 	.word	0x08010514
 8009cf4:	080104a8 	.word	0x080104a8
 8009cf8:	0800cd98 	.word	0x0800cd98
 8009cfc:	200088a0 	.word	0x200088a0
 8009d00:	20003f08 	.word	0x20003f08
 8009d04:	080104c8 	.word	0x080104c8
 8009d08:	080104e0 	.word	0x080104e0
 8009d0c:	20004284 	.word	0x20004284
 8009d10:	20003f16 	.word	0x20003f16
 8009d14:	080104f4 	.word	0x080104f4
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009d18:	f06f 050f 	mvn.w	r5, #15
 8009d1c:	e7ca      	b.n	8009cb4 <tcp_process+0x268>
        tcp_receive(pcb);
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7ff f970 	bl	8009004 <tcp_receive>
        if (recv_acked != 0) {
 8009d24:	4b8f      	ldr	r3, [pc, #572]	; (8009f64 <tcp_process+0x518>)
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	b113      	cbz	r3, 8009d30 <tcp_process+0x2e4>
          recv_acked--;
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	4a8d      	ldr	r2, [pc, #564]	; (8009f64 <tcp_process+0x518>)
 8009d2e:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009d30:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8009d32:	0053      	lsls	r3, r2, #1
 8009d34:	f241 111c 	movw	r1, #4380	; 0x111c
 8009d38:	428b      	cmp	r3, r1
 8009d3a:	bf38      	it	cc
 8009d3c:	460b      	movcc	r3, r1
 8009d3e:	0092      	lsls	r2, r2, #2
 8009d40:	4293      	cmp	r3, r2
 8009d42:	bf28      	it	cs
 8009d44:	4613      	movcs	r3, r2
 8009d46:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 8009d4a:	4b87      	ldr	r3, [pc, #540]	; (8009f68 <tcp_process+0x51c>)
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	f013 0f20 	tst.w	r3, #32
 8009d52:	f43f ae96 	beq.w	8009a82 <tcp_process+0x36>
          tcp_ack_now(pcb);
 8009d56:	7ea3      	ldrb	r3, [r4, #26]
 8009d58:	f043 0302 	orr.w	r3, r3, #2
 8009d5c:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 8009d5e:	2307      	movs	r3, #7
 8009d60:	7523      	strb	r3, [r4, #20]
 8009d62:	e68e      	b.n	8009a82 <tcp_process+0x36>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009d64:	f013 0f02 	tst.w	r3, #2
 8009d68:	f000 80f1 	beq.w	8009f4e <tcp_process+0x502>
 8009d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	4a7e      	ldr	r2, [pc, #504]	; (8009f6c <tcp_process+0x520>)
 8009d72:	6812      	ldr	r2, [r2, #0]
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d001      	beq.n	8009d7c <tcp_process+0x330>
  return ERR_OK;
 8009d78:	2500      	movs	r5, #0
 8009d7a:	e682      	b.n	8009a82 <tcp_process+0x36>
      tcp_rexmit(pcb);
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f001 fab6 	bl	800b2ee <tcp_rexmit>
  return ERR_OK;
 8009d82:	2500      	movs	r5, #0
 8009d84:	e67d      	b.n	8009a82 <tcp_process+0x36>
    tcp_receive(pcb);
 8009d86:	4620      	mov	r0, r4
 8009d88:	f7ff f93c 	bl	8009004 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009d8c:	4b76      	ldr	r3, [pc, #472]	; (8009f68 <tcp_process+0x51c>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	f013 0f20 	tst.w	r3, #32
 8009d94:	f000 80dd 	beq.w	8009f52 <tcp_process+0x506>
      tcp_ack_now(pcb);
 8009d98:	7ea3      	ldrb	r3, [r4, #26]
 8009d9a:	f043 0302 	orr.w	r3, r3, #2
 8009d9e:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8009da0:	2307      	movs	r3, #7
 8009da2:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8009da4:	2500      	movs	r5, #0
 8009da6:	e66c      	b.n	8009a82 <tcp_process+0x36>
    tcp_receive(pcb);
 8009da8:	4620      	mov	r0, r4
 8009daa:	f7ff f92b 	bl	8009004 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009dae:	4b6e      	ldr	r3, [pc, #440]	; (8009f68 <tcp_process+0x51c>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	f013 0f20 	tst.w	r3, #32
 8009db6:	d038      	beq.n	8009e2a <tcp_process+0x3de>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009db8:	4b6d      	ldr	r3, [pc, #436]	; (8009f70 <tcp_process+0x524>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	f013 0f10 	tst.w	r3, #16
 8009dc0:	d004      	beq.n	8009dcc <tcp_process+0x380>
 8009dc2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009dc4:	4b6b      	ldr	r3, [pc, #428]	; (8009f74 <tcp_process+0x528>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d007      	beq.n	8009ddc <tcp_process+0x390>
        tcp_ack_now(pcb);
 8009dcc:	7ea3      	ldrb	r3, [r4, #26]
 8009dce:	f043 0302 	orr.w	r3, r3, #2
 8009dd2:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8009dd4:	2308      	movs	r3, #8
 8009dd6:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8009dd8:	2500      	movs	r5, #0
 8009dda:	e652      	b.n	8009a82 <tcp_process+0x36>
          pcb->unsent == NULL) {
 8009ddc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1f4      	bne.n	8009dcc <tcp_process+0x380>
        tcp_ack_now(pcb);
 8009de2:	7ea3      	ldrb	r3, [r4, #26]
 8009de4:	f043 0302 	orr.w	r3, r3, #2
 8009de8:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8009dea:	4620      	mov	r0, r4
 8009dec:	f7fe f9c2 	bl	8008174 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009df0:	4b61      	ldr	r3, [pc, #388]	; (8009f78 <tcp_process+0x52c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	429c      	cmp	r4, r3
 8009df6:	d005      	beq.n	8009e04 <tcp_process+0x3b8>
 8009df8:	b153      	cbz	r3, 8009e10 <tcp_process+0x3c4>
 8009dfa:	68da      	ldr	r2, [r3, #12]
 8009dfc:	4294      	cmp	r4, r2
 8009dfe:	d005      	beq.n	8009e0c <tcp_process+0x3c0>
 8009e00:	4613      	mov	r3, r2
 8009e02:	e7f9      	b.n	8009df8 <tcp_process+0x3ac>
 8009e04:	68da      	ldr	r2, [r3, #12]
 8009e06:	4b5c      	ldr	r3, [pc, #368]	; (8009f78 <tcp_process+0x52c>)
 8009e08:	601a      	str	r2, [r3, #0]
 8009e0a:	e001      	b.n	8009e10 <tcp_process+0x3c4>
 8009e0c:	68e2      	ldr	r2, [r4, #12]
 8009e0e:	60da      	str	r2, [r3, #12]
 8009e10:	2201      	movs	r2, #1
 8009e12:	4b5a      	ldr	r3, [pc, #360]	; (8009f7c <tcp_process+0x530>)
 8009e14:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009e16:	230a      	movs	r3, #10
 8009e18:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e1a:	4b59      	ldr	r3, [pc, #356]	; (8009f80 <tcp_process+0x534>)
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	60e2      	str	r2, [r4, #12]
 8009e20:	601c      	str	r4, [r3, #0]
 8009e22:	f001 fc01 	bl	800b628 <tcp_timer_needed>
  return ERR_OK;
 8009e26:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e28:	e62b      	b.n	8009a82 <tcp_process+0x36>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009e2a:	4b51      	ldr	r3, [pc, #324]	; (8009f70 <tcp_process+0x524>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	f013 0f10 	tst.w	r3, #16
 8009e32:	f000 8090 	beq.w	8009f56 <tcp_process+0x50a>
 8009e36:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009e38:	4b4e      	ldr	r3, [pc, #312]	; (8009f74 <tcp_process+0x528>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d001      	beq.n	8009e44 <tcp_process+0x3f8>
  return ERR_OK;
 8009e40:	2500      	movs	r5, #0
 8009e42:	e61e      	b.n	8009a82 <tcp_process+0x36>
               pcb->unsent == NULL) {
 8009e44:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009e46:	b10b      	cbz	r3, 8009e4c <tcp_process+0x400>
  return ERR_OK;
 8009e48:	2500      	movs	r5, #0
 8009e4a:	e61a      	b.n	8009a82 <tcp_process+0x36>
      pcb->state = FIN_WAIT_2;
 8009e4c:	2306      	movs	r3, #6
 8009e4e:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8009e50:	2500      	movs	r5, #0
 8009e52:	e616      	b.n	8009a82 <tcp_process+0x36>
    tcp_receive(pcb);
 8009e54:	4620      	mov	r0, r4
 8009e56:	f7ff f8d5 	bl	8009004 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009e5a:	4b43      	ldr	r3, [pc, #268]	; (8009f68 <tcp_process+0x51c>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	f013 0f20 	tst.w	r3, #32
 8009e62:	d101      	bne.n	8009e68 <tcp_process+0x41c>
  return ERR_OK;
 8009e64:	2500      	movs	r5, #0
 8009e66:	e60c      	b.n	8009a82 <tcp_process+0x36>
      tcp_ack_now(pcb);
 8009e68:	7ea3      	ldrb	r3, [r4, #26]
 8009e6a:	f043 0302 	orr.w	r3, r3, #2
 8009e6e:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8009e70:	4620      	mov	r0, r4
 8009e72:	f7fe f97f 	bl	8008174 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009e76:	4b40      	ldr	r3, [pc, #256]	; (8009f78 <tcp_process+0x52c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	429c      	cmp	r4, r3
 8009e7c:	d005      	beq.n	8009e8a <tcp_process+0x43e>
 8009e7e:	b153      	cbz	r3, 8009e96 <tcp_process+0x44a>
 8009e80:	68da      	ldr	r2, [r3, #12]
 8009e82:	4294      	cmp	r4, r2
 8009e84:	d005      	beq.n	8009e92 <tcp_process+0x446>
 8009e86:	4613      	mov	r3, r2
 8009e88:	e7f9      	b.n	8009e7e <tcp_process+0x432>
 8009e8a:	68da      	ldr	r2, [r3, #12]
 8009e8c:	4b3a      	ldr	r3, [pc, #232]	; (8009f78 <tcp_process+0x52c>)
 8009e8e:	601a      	str	r2, [r3, #0]
 8009e90:	e001      	b.n	8009e96 <tcp_process+0x44a>
 8009e92:	68e2      	ldr	r2, [r4, #12]
 8009e94:	60da      	str	r2, [r3, #12]
 8009e96:	2201      	movs	r2, #1
 8009e98:	4b38      	ldr	r3, [pc, #224]	; (8009f7c <tcp_process+0x530>)
 8009e9a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8009e9c:	230a      	movs	r3, #10
 8009e9e:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009ea0:	4b37      	ldr	r3, [pc, #220]	; (8009f80 <tcp_process+0x534>)
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	60e2      	str	r2, [r4, #12]
 8009ea6:	601c      	str	r4, [r3, #0]
 8009ea8:	f001 fbbe 	bl	800b628 <tcp_timer_needed>
  return ERR_OK;
 8009eac:	2500      	movs	r5, #0
 8009eae:	e5e8      	b.n	8009a82 <tcp_process+0x36>
    tcp_receive(pcb);
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f7ff f8a7 	bl	8009004 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009eb6:	4b2e      	ldr	r3, [pc, #184]	; (8009f70 <tcp_process+0x524>)
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	f013 0f10 	tst.w	r3, #16
 8009ebe:	d04c      	beq.n	8009f5a <tcp_process+0x50e>
 8009ec0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009ec2:	4b2c      	ldr	r3, [pc, #176]	; (8009f74 <tcp_process+0x528>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d001      	beq.n	8009ece <tcp_process+0x482>
  return ERR_OK;
 8009eca:	2500      	movs	r5, #0
 8009ecc:	e5d9      	b.n	8009a82 <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009ece:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009ed0:	b10b      	cbz	r3, 8009ed6 <tcp_process+0x48a>
  return ERR_OK;
 8009ed2:	2500      	movs	r5, #0
 8009ed4:	e5d5      	b.n	8009a82 <tcp_process+0x36>
      tcp_pcb_purge(pcb);
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f7fe f94c 	bl	8008174 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009edc:	4b26      	ldr	r3, [pc, #152]	; (8009f78 <tcp_process+0x52c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	429c      	cmp	r4, r3
 8009ee2:	d005      	beq.n	8009ef0 <tcp_process+0x4a4>
 8009ee4:	b153      	cbz	r3, 8009efc <tcp_process+0x4b0>
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	4294      	cmp	r4, r2
 8009eea:	d005      	beq.n	8009ef8 <tcp_process+0x4ac>
 8009eec:	4613      	mov	r3, r2
 8009eee:	e7f9      	b.n	8009ee4 <tcp_process+0x498>
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	4b21      	ldr	r3, [pc, #132]	; (8009f78 <tcp_process+0x52c>)
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	e001      	b.n	8009efc <tcp_process+0x4b0>
 8009ef8:	68e2      	ldr	r2, [r4, #12]
 8009efa:	60da      	str	r2, [r3, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	4b1f      	ldr	r3, [pc, #124]	; (8009f7c <tcp_process+0x530>)
 8009f00:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8009f02:	230a      	movs	r3, #10
 8009f04:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009f06:	4b1e      	ldr	r3, [pc, #120]	; (8009f80 <tcp_process+0x534>)
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	60e2      	str	r2, [r4, #12]
 8009f0c:	601c      	str	r4, [r3, #0]
 8009f0e:	f001 fb8b 	bl	800b628 <tcp_timer_needed>
  return ERR_OK;
 8009f12:	2500      	movs	r5, #0
 8009f14:	e5b5      	b.n	8009a82 <tcp_process+0x36>
    tcp_receive(pcb);
 8009f16:	4620      	mov	r0, r4
 8009f18:	f7ff f874 	bl	8009004 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009f1c:	4b14      	ldr	r3, [pc, #80]	; (8009f70 <tcp_process+0x524>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	f013 0f10 	tst.w	r3, #16
 8009f24:	d01b      	beq.n	8009f5e <tcp_process+0x512>
 8009f26:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009f28:	4b12      	ldr	r3, [pc, #72]	; (8009f74 <tcp_process+0x528>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d001      	beq.n	8009f34 <tcp_process+0x4e8>
  return ERR_OK;
 8009f30:	2500      	movs	r5, #0
 8009f32:	e5a6      	b.n	8009a82 <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009f34:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009f36:	b10b      	cbz	r3, 8009f3c <tcp_process+0x4f0>
  return ERR_OK;
 8009f38:	2500      	movs	r5, #0
 8009f3a:	e5a2      	b.n	8009a82 <tcp_process+0x36>
      recv_flags |= TF_CLOSED;
 8009f3c:	4a0a      	ldr	r2, [pc, #40]	; (8009f68 <tcp_process+0x51c>)
 8009f3e:	7813      	ldrb	r3, [r2, #0]
 8009f40:	f043 0310 	orr.w	r3, r3, #16
 8009f44:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 8009f46:	2500      	movs	r5, #0
 8009f48:	e59b      	b.n	8009a82 <tcp_process+0x36>
 8009f4a:	2500      	movs	r5, #0
 8009f4c:	e599      	b.n	8009a82 <tcp_process+0x36>
 8009f4e:	2500      	movs	r5, #0
 8009f50:	e597      	b.n	8009a82 <tcp_process+0x36>
 8009f52:	2500      	movs	r5, #0
 8009f54:	e595      	b.n	8009a82 <tcp_process+0x36>
 8009f56:	2500      	movs	r5, #0
 8009f58:	e593      	b.n	8009a82 <tcp_process+0x36>
 8009f5a:	2500      	movs	r5, #0
 8009f5c:	e591      	b.n	8009a82 <tcp_process+0x36>
 8009f5e:	2500      	movs	r5, #0
 8009f60:	e58f      	b.n	8009a82 <tcp_process+0x36>
 8009f62:	bf00      	nop
 8009f64:	20003ef4 	.word	0x20003ef4
 8009f68:	20003efc 	.word	0x20003efc
 8009f6c:	20003f00 	.word	0x20003f00
 8009f70:	20003ee0 	.word	0x20003ee0
 8009f74:	20003edc 	.word	0x20003edc
 8009f78:	2000889c 	.word	0x2000889c
 8009f7c:	20008898 	.word	0x20008898
 8009f80:	200088ac 	.word	0x200088ac

08009f84 <tcp_input>:
{
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	4604      	mov	r4, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 8009f8a:	6842      	ldr	r2, [r0, #4]
 8009f8c:	4b9f      	ldr	r3, [pc, #636]	; (800a20c <tcp_input+0x288>)
 8009f8e:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 8009f90:	8943      	ldrh	r3, [r0, #10]
 8009f92:	2b13      	cmp	r3, #19
 8009f94:	d93e      	bls.n	800a014 <tcp_input+0x90>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009f96:	4b9e      	ldr	r3, [pc, #632]	; (800a210 <tcp_input+0x28c>)
 8009f98:	6819      	ldr	r1, [r3, #0]
 8009f9a:	6958      	ldr	r0, [r3, #20]
 8009f9c:	f7fc fa57 	bl	800644e <ip4_addr_isbroadcast_u32>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d137      	bne.n	800a014 <tcp_input+0x90>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009fa4:	4b9a      	ldr	r3, [pc, #616]	; (800a210 <tcp_input+0x28c>)
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009fac:	2be0      	cmp	r3, #224	; 0xe0
 8009fae:	d031      	beq.n	800a014 <tcp_input+0x90>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8009fb0:	4b96      	ldr	r3, [pc, #600]	; (800a20c <tcp_input+0x288>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	8998      	ldrh	r0, [r3, #12]
 8009fb6:	f7fb fae6 	bl	8005586 <lwip_htons>
 8009fba:	f3c0 310f 	ubfx	r1, r0, #12, #16
 8009fbe:	0089      	lsls	r1, r1, #2
 8009fc0:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009fc2:	2913      	cmp	r1, #19
 8009fc4:	d926      	bls.n	800a014 <tcp_input+0x90>
 8009fc6:	b289      	uxth	r1, r1
 8009fc8:	8923      	ldrh	r3, [r4, #8]
 8009fca:	4299      	cmp	r1, r3
 8009fcc:	d822      	bhi.n	800a014 <tcp_input+0x90>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8009fce:	f1a1 0314 	sub.w	r3, r1, #20
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	4a8f      	ldr	r2, [pc, #572]	; (800a214 <tcp_input+0x290>)
 8009fd6:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
 8009fd8:	2000      	movs	r0, #0
 8009fda:	4a8f      	ldr	r2, [pc, #572]	; (800a218 <tcp_input+0x294>)
 8009fdc:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 8009fde:	8962      	ldrh	r2, [r4, #10]
 8009fe0:	4291      	cmp	r1, r2
 8009fe2:	d91c      	bls.n	800a01e <tcp_input+0x9a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d051      	beq.n	800a08e <tcp_input+0x10a>
    pbuf_header(p, -TCP_HLEN);
 8009fea:	f06f 0113 	mvn.w	r1, #19
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f7fd fb36 	bl	8007660 <pbuf_header>
    tcphdr_opt1len = p->len;
 8009ff4:	8961      	ldrh	r1, [r4, #10]
 8009ff6:	4b89      	ldr	r3, [pc, #548]	; (800a21c <tcp_input+0x298>)
 8009ff8:	8019      	strh	r1, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8009ffa:	4b86      	ldr	r3, [pc, #536]	; (800a214 <tcp_input+0x290>)
 8009ffc:	881d      	ldrh	r5, [r3, #0]
 8009ffe:	1a6d      	subs	r5, r5, r1
 800a000:	b2ad      	uxth	r5, r5
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800a002:	4249      	negs	r1, r1
 800a004:	b209      	sxth	r1, r1
 800a006:	4620      	mov	r0, r4
 800a008:	f7fd fb2a 	bl	8007660 <pbuf_header>
    if (opt2len > p->next->len) {
 800a00c:	6820      	ldr	r0, [r4, #0]
 800a00e:	8943      	ldrh	r3, [r0, #10]
 800a010:	429d      	cmp	r5, r3
 800a012:	d943      	bls.n	800a09c <tcp_input+0x118>
  pbuf_free(p);
 800a014:	4620      	mov	r0, r4
 800a016:	f7fd fb2d 	bl	8007674 <pbuf_free>
}
 800a01a:	b002      	add	sp, #8
 800a01c:	bd70      	pop	{r4, r5, r6, pc}
    tcphdr_opt1len = tcphdr_optlen;
 800a01e:	4a7f      	ldr	r2, [pc, #508]	; (800a21c <tcp_input+0x298>)
 800a020:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800a022:	4249      	negs	r1, r1
 800a024:	4620      	mov	r0, r4
 800a026:	f7fd fb1b 	bl	8007660 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a02a:	4d78      	ldr	r5, [pc, #480]	; (800a20c <tcp_input+0x288>)
 800a02c:	682e      	ldr	r6, [r5, #0]
 800a02e:	8830      	ldrh	r0, [r6, #0]
 800a030:	f7fb faa9 	bl	8005586 <lwip_htons>
 800a034:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a036:	682e      	ldr	r6, [r5, #0]
 800a038:	8870      	ldrh	r0, [r6, #2]
 800a03a:	f7fb faa4 	bl	8005586 <lwip_htons>
 800a03e:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a040:	682e      	ldr	r6, [r5, #0]
 800a042:	6870      	ldr	r0, [r6, #4]
 800a044:	f7fb faa2 	bl	800558c <lwip_htonl>
 800a048:	6070      	str	r0, [r6, #4]
 800a04a:	4b75      	ldr	r3, [pc, #468]	; (800a220 <tcp_input+0x29c>)
 800a04c:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a04e:	682e      	ldr	r6, [r5, #0]
 800a050:	68b0      	ldr	r0, [r6, #8]
 800a052:	f7fb fa9b 	bl	800558c <lwip_htonl>
 800a056:	60b0      	str	r0, [r6, #8]
 800a058:	4b72      	ldr	r3, [pc, #456]	; (800a224 <tcp_input+0x2a0>)
 800a05a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a05c:	682e      	ldr	r6, [r5, #0]
 800a05e:	89f0      	ldrh	r0, [r6, #14]
 800a060:	f7fb fa91 	bl	8005586 <lwip_htons>
 800a064:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800a066:	682b      	ldr	r3, [r5, #0]
 800a068:	8998      	ldrh	r0, [r3, #12]
 800a06a:	f7fb fa8c 	bl	8005586 <lwip_htons>
 800a06e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800a072:	4a6d      	ldr	r2, [pc, #436]	; (800a228 <tcp_input+0x2a4>)
 800a074:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800a076:	8922      	ldrh	r2, [r4, #8]
 800a078:	f013 0303 	ands.w	r3, r3, #3
 800a07c:	bf18      	it	ne
 800a07e:	2301      	movne	r3, #1
 800a080:	4413      	add	r3, r2
 800a082:	4a6a      	ldr	r2, [pc, #424]	; (800a22c <tcp_input+0x2a8>)
 800a084:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a086:	4b6a      	ldr	r3, [pc, #424]	; (800a230 <tcp_input+0x2ac>)
 800a088:	681d      	ldr	r5, [r3, #0]
  prev = NULL;
 800a08a:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a08c:	e033      	b.n	800a0f6 <tcp_input+0x172>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a08e:	4b69      	ldr	r3, [pc, #420]	; (800a234 <tcp_input+0x2b0>)
 800a090:	22b2      	movs	r2, #178	; 0xb2
 800a092:	4969      	ldr	r1, [pc, #420]	; (800a238 <tcp_input+0x2b4>)
 800a094:	4869      	ldr	r0, [pc, #420]	; (800a23c <tcp_input+0x2b8>)
 800a096:	f002 fbbc 	bl	800c812 <iprintf>
 800a09a:	e7a6      	b.n	8009fea <tcp_input+0x66>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800a09c:	6842      	ldr	r2, [r0, #4]
 800a09e:	4b5e      	ldr	r3, [pc, #376]	; (800a218 <tcp_input+0x294>)
 800a0a0:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 800a0a2:	4269      	negs	r1, r5
 800a0a4:	b209      	sxth	r1, r1
 800a0a6:	f7fd fadb 	bl	8007660 <pbuf_header>
    p->tot_len -= opt2len;
 800a0aa:	8923      	ldrh	r3, [r4, #8]
 800a0ac:	1b5d      	subs	r5, r3, r5
 800a0ae:	8125      	strh	r5, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a0b0:	8963      	ldrh	r3, [r4, #10]
 800a0b2:	b95b      	cbnz	r3, 800a0cc <tcp_input+0x148>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a0b4:	8922      	ldrh	r2, [r4, #8]
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	891b      	ldrh	r3, [r3, #8]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d0b5      	beq.n	800a02a <tcp_input+0xa6>
 800a0be:	4b5d      	ldr	r3, [pc, #372]	; (800a234 <tcp_input+0x2b0>)
 800a0c0:	22d0      	movs	r2, #208	; 0xd0
 800a0c2:	495f      	ldr	r1, [pc, #380]	; (800a240 <tcp_input+0x2bc>)
 800a0c4:	485d      	ldr	r0, [pc, #372]	; (800a23c <tcp_input+0x2b8>)
 800a0c6:	f002 fba4 	bl	800c812 <iprintf>
 800a0ca:	e7ae      	b.n	800a02a <tcp_input+0xa6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a0cc:	4b59      	ldr	r3, [pc, #356]	; (800a234 <tcp_input+0x2b0>)
 800a0ce:	22cf      	movs	r2, #207	; 0xcf
 800a0d0:	495c      	ldr	r1, [pc, #368]	; (800a244 <tcp_input+0x2c0>)
 800a0d2:	485a      	ldr	r0, [pc, #360]	; (800a23c <tcp_input+0x2b8>)
 800a0d4:	f002 fb9d 	bl	800c812 <iprintf>
 800a0d8:	e7ec      	b.n	800a0b4 <tcp_input+0x130>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a0da:	7d2b      	ldrb	r3, [r5, #20]
 800a0dc:	2b0a      	cmp	r3, #10
 800a0de:	d016      	beq.n	800a10e <tcp_input+0x18a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a0e0:	7d2b      	ldrb	r3, [r5, #20]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d01a      	beq.n	800a11c <tcp_input+0x198>
    if (pcb->remote_port == tcphdr->src &&
 800a0e6:	8b29      	ldrh	r1, [r5, #24]
 800a0e8:	4b48      	ldr	r3, [pc, #288]	; (800a20c <tcp_input+0x288>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	881a      	ldrh	r2, [r3, #0]
 800a0ee:	4291      	cmp	r1, r2
 800a0f0:	d01b      	beq.n	800a12a <tcp_input+0x1a6>
    prev = pcb;
 800a0f2:	462e      	mov	r6, r5
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0f4:	68ed      	ldr	r5, [r5, #12]
 800a0f6:	2d00      	cmp	r5, #0
 800a0f8:	d032      	beq.n	800a160 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a0fa:	7d2b      	ldrb	r3, [r5, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1ec      	bne.n	800a0da <tcp_input+0x156>
 800a100:	4b4c      	ldr	r3, [pc, #304]	; (800a234 <tcp_input+0x2b0>)
 800a102:	22e2      	movs	r2, #226	; 0xe2
 800a104:	4950      	ldr	r1, [pc, #320]	; (800a248 <tcp_input+0x2c4>)
 800a106:	484d      	ldr	r0, [pc, #308]	; (800a23c <tcp_input+0x2b8>)
 800a108:	f002 fb83 	bl	800c812 <iprintf>
 800a10c:	e7e5      	b.n	800a0da <tcp_input+0x156>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a10e:	4b49      	ldr	r3, [pc, #292]	; (800a234 <tcp_input+0x2b0>)
 800a110:	22e3      	movs	r2, #227	; 0xe3
 800a112:	494e      	ldr	r1, [pc, #312]	; (800a24c <tcp_input+0x2c8>)
 800a114:	4849      	ldr	r0, [pc, #292]	; (800a23c <tcp_input+0x2b8>)
 800a116:	f002 fb7c 	bl	800c812 <iprintf>
 800a11a:	e7e1      	b.n	800a0e0 <tcp_input+0x15c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a11c:	4b45      	ldr	r3, [pc, #276]	; (800a234 <tcp_input+0x2b0>)
 800a11e:	22e4      	movs	r2, #228	; 0xe4
 800a120:	494b      	ldr	r1, [pc, #300]	; (800a250 <tcp_input+0x2cc>)
 800a122:	4846      	ldr	r0, [pc, #280]	; (800a23c <tcp_input+0x2b8>)
 800a124:	f002 fb75 	bl	800c812 <iprintf>
 800a128:	e7dd      	b.n	800a0e6 <tcp_input+0x162>
        pcb->local_port == tcphdr->dest &&
 800a12a:	8aea      	ldrh	r2, [r5, #22]
 800a12c:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 800a12e:	429a      	cmp	r2, r3
 800a130:	d1df      	bne.n	800a0f2 <tcp_input+0x16e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a132:	686a      	ldr	r2, [r5, #4]
 800a134:	4b36      	ldr	r3, [pc, #216]	; (800a210 <tcp_input+0x28c>)
 800a136:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a138:	429a      	cmp	r2, r3
 800a13a:	d1da      	bne.n	800a0f2 <tcp_input+0x16e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a13c:	682a      	ldr	r2, [r5, #0]
 800a13e:	4b34      	ldr	r3, [pc, #208]	; (800a210 <tcp_input+0x28c>)
 800a140:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a142:	429a      	cmp	r2, r3
 800a144:	d1d5      	bne.n	800a0f2 <tcp_input+0x16e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a146:	68eb      	ldr	r3, [r5, #12]
 800a148:	429d      	cmp	r5, r3
 800a14a:	d04d      	beq.n	800a1e8 <tcp_input+0x264>
      if (prev != NULL) {
 800a14c:	b12e      	cbz	r6, 800a15a <tcp_input+0x1d6>
        prev->next = pcb->next;
 800a14e:	68eb      	ldr	r3, [r5, #12]
 800a150:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800a152:	4b37      	ldr	r3, [pc, #220]	; (800a230 <tcp_input+0x2ac>)
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	60ea      	str	r2, [r5, #12]
        tcp_active_pcbs = pcb;
 800a158:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a15a:	68eb      	ldr	r3, [r5, #12]
 800a15c:	429d      	cmp	r5, r3
 800a15e:	d04a      	beq.n	800a1f6 <tcp_input+0x272>
  if (pcb == NULL) {
 800a160:	2d00      	cmp	r5, #0
 800a162:	d04f      	beq.n	800a204 <tcp_input+0x280>
  if (pcb != NULL) {
 800a164:	2d00      	cmp	r5, #0
 800a166:	f000 8168 	beq.w	800a43a <tcp_input+0x4b6>
    inseg.next = NULL;
 800a16a:	4a3a      	ldr	r2, [pc, #232]	; (800a254 <tcp_input+0x2d0>)
 800a16c:	2300      	movs	r3, #0
 800a16e:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800a170:	8921      	ldrh	r1, [r4, #8]
 800a172:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800a174:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a176:	4925      	ldr	r1, [pc, #148]	; (800a20c <tcp_input+0x288>)
 800a178:	6809      	ldr	r1, [r1, #0]
 800a17a:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800a17c:	4a36      	ldr	r2, [pc, #216]	; (800a258 <tcp_input+0x2d4>)
 800a17e:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800a180:	4a36      	ldr	r2, [pc, #216]	; (800a25c <tcp_input+0x2d8>)
 800a182:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800a184:	4a36      	ldr	r2, [pc, #216]	; (800a260 <tcp_input+0x2dc>)
 800a186:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800a188:	4b27      	ldr	r3, [pc, #156]	; (800a228 <tcp_input+0x2a4>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	f013 0f08 	tst.w	r3, #8
 800a190:	d003      	beq.n	800a19a <tcp_input+0x216>
      p->flags |= PBUF_FLAG_PUSH;
 800a192:	7b63      	ldrb	r3, [r4, #13]
 800a194:	f043 0301 	orr.w	r3, r3, #1
 800a198:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 800a19a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f000 80b9 	beq.w	800a314 <tcp_input+0x390>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f7fe fb24 	bl	80087f0 <tcp_process_refused_data>
 800a1a8:	f110 0f0d 	cmn.w	r0, #13
 800a1ac:	d008      	beq.n	800a1c0 <tcp_input+0x23c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a1ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 80af 	beq.w	800a314 <tcp_input+0x390>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a1b6:	4b1d      	ldr	r3, [pc, #116]	; (800a22c <tcp_input+0x2a8>)
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 80aa 	beq.w	800a314 <tcp_input+0x390>
        if (pcb->rcv_ann_wnd == 0) {
 800a1c0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 80a2 	beq.w	800a30c <tcp_input+0x388>
    tcp_input_pcb = NULL;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4a26      	ldr	r2, [pc, #152]	; (800a264 <tcp_input+0x2e0>)
 800a1cc:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800a1ce:	4a22      	ldr	r2, [pc, #136]	; (800a258 <tcp_input+0x2d4>)
 800a1d0:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
 800a1d2:	4b20      	ldr	r3, [pc, #128]	; (800a254 <tcp_input+0x2d0>)
 800a1d4:	6858      	ldr	r0, [r3, #4]
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	f43f af1f 	beq.w	800a01a <tcp_input+0x96>
      pbuf_free(inseg.p);
 800a1dc:	f7fd fa4a 	bl	8007674 <pbuf_free>
      inseg.p = NULL;
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	4b1c      	ldr	r3, [pc, #112]	; (800a254 <tcp_input+0x2d0>)
 800a1e4:	605a      	str	r2, [r3, #4]
 800a1e6:	e718      	b.n	800a01a <tcp_input+0x96>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a1e8:	4b12      	ldr	r3, [pc, #72]	; (800a234 <tcp_input+0x2b0>)
 800a1ea:	22ec      	movs	r2, #236	; 0xec
 800a1ec:	491e      	ldr	r1, [pc, #120]	; (800a268 <tcp_input+0x2e4>)
 800a1ee:	4813      	ldr	r0, [pc, #76]	; (800a23c <tcp_input+0x2b8>)
 800a1f0:	f002 fb0f 	bl	800c812 <iprintf>
 800a1f4:	e7aa      	b.n	800a14c <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a1f6:	4b0f      	ldr	r3, [pc, #60]	; (800a234 <tcp_input+0x2b0>)
 800a1f8:	22f4      	movs	r2, #244	; 0xf4
 800a1fa:	491c      	ldr	r1, [pc, #112]	; (800a26c <tcp_input+0x2e8>)
 800a1fc:	480f      	ldr	r0, [pc, #60]	; (800a23c <tcp_input+0x2b8>)
 800a1fe:	f002 fb08 	bl	800c812 <iprintf>
 800a202:	e7ad      	b.n	800a160 <tcp_input+0x1dc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a204:	4b1a      	ldr	r3, [pc, #104]	; (800a270 <tcp_input+0x2ec>)
 800a206:	681d      	ldr	r5, [r3, #0]
 800a208:	e03b      	b.n	800a282 <tcp_input+0x2fe>
 800a20a:	bf00      	nop
 800a20c:	20003f08 	.word	0x20003f08
 800a210:	20004274 	.word	0x20004274
 800a214:	20003f14 	.word	0x20003f14
 800a218:	20003f10 	.word	0x20003f10
 800a21c:	20003f0c 	.word	0x20003f0c
 800a220:	20003f00 	.word	0x20003f00
 800a224:	20003edc 	.word	0x20003edc
 800a228:	20003ee0 	.word	0x20003ee0
 800a22c:	20003f16 	.word	0x20003f16
 800a230:	2000889c 	.word	0x2000889c
 800a234:	08010514 	.word	0x08010514
 800a238:	0801034c 	.word	0x0801034c
 800a23c:	0800cd98 	.word	0x0800cd98
 800a240:	08010368 	.word	0x08010368
 800a244:	0801035c 	.word	0x0801035c
 800a248:	08010388 	.word	0x08010388
 800a24c:	080103b0 	.word	0x080103b0
 800a250:	080103dc 	.word	0x080103dc
 800a254:	20003ee4 	.word	0x20003ee4
 800a258:	20003ef8 	.word	0x20003ef8
 800a25c:	20003efc 	.word	0x20003efc
 800a260:	20003ef4 	.word	0x20003ef4
 800a264:	200088b0 	.word	0x200088b0
 800a268:	08010404 	.word	0x08010404
 800a26c:	08010430 	.word	0x08010430
 800a270:	200088ac 	.word	0x200088ac
      if (pcb->remote_port == tcphdr->src &&
 800a274:	8b29      	ldrh	r1, [r5, #24]
 800a276:	4b80      	ldr	r3, [pc, #512]	; (800a478 <tcp_input+0x4f4>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	881a      	ldrh	r2, [r3, #0]
 800a27c:	4291      	cmp	r1, r2
 800a27e:	d00b      	beq.n	800a298 <tcp_input+0x314>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a280:	68ed      	ldr	r5, [r5, #12]
 800a282:	b1f5      	cbz	r5, 800a2c2 <tcp_input+0x33e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a284:	7d2b      	ldrb	r3, [r5, #20]
 800a286:	2b0a      	cmp	r3, #10
 800a288:	d0f4      	beq.n	800a274 <tcp_input+0x2f0>
 800a28a:	4b7c      	ldr	r3, [pc, #496]	; (800a47c <tcp_input+0x4f8>)
 800a28c:	22fe      	movs	r2, #254	; 0xfe
 800a28e:	497c      	ldr	r1, [pc, #496]	; (800a480 <tcp_input+0x4fc>)
 800a290:	487c      	ldr	r0, [pc, #496]	; (800a484 <tcp_input+0x500>)
 800a292:	f002 fabe 	bl	800c812 <iprintf>
 800a296:	e7ed      	b.n	800a274 <tcp_input+0x2f0>
          pcb->local_port == tcphdr->dest &&
 800a298:	8aea      	ldrh	r2, [r5, #22]
 800a29a:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d1ef      	bne.n	800a280 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a2a0:	686a      	ldr	r2, [r5, #4]
 800a2a2:	4b79      	ldr	r3, [pc, #484]	; (800a488 <tcp_input+0x504>)
 800a2a4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d1ea      	bne.n	800a280 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a2aa:	682a      	ldr	r2, [r5, #0]
 800a2ac:	4b76      	ldr	r3, [pc, #472]	; (800a488 <tcp_input+0x504>)
 800a2ae:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d1e5      	bne.n	800a280 <tcp_input+0x2fc>
        tcp_timewait_input(pcb);
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	f7fe fd8f 	bl	8008dd8 <tcp_timewait_input>
        pbuf_free(p);
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f7fd f9da 	bl	8007674 <pbuf_free>
        return;
 800a2c0:	e6ab      	b.n	800a01a <tcp_input+0x96>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a2c2:	4b72      	ldr	r3, [pc, #456]	; (800a48c <tcp_input+0x508>)
 800a2c4:	681e      	ldr	r6, [r3, #0]
 800a2c6:	4630      	mov	r0, r6
    prev = NULL;
 800a2c8:	4629      	mov	r1, r5
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a2ca:	e001      	b.n	800a2d0 <tcp_input+0x34c>
      prev = (struct tcp_pcb *)lpcb;
 800a2cc:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a2ce:	68c0      	ldr	r0, [r0, #12]
 800a2d0:	b168      	cbz	r0, 800a2ee <tcp_input+0x36a>
      if (lpcb->local_port == tcphdr->dest) {
 800a2d2:	8ac2      	ldrh	r2, [r0, #22]
 800a2d4:	4b68      	ldr	r3, [pc, #416]	; (800a478 <tcp_input+0x4f4>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	885b      	ldrh	r3, [r3, #2]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d1f6      	bne.n	800a2cc <tcp_input+0x348>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a2de:	6803      	ldr	r3, [r0, #0]
 800a2e0:	4a69      	ldr	r2, [pc, #420]	; (800a488 <tcp_input+0x504>)
 800a2e2:	6952      	ldr	r2, [r2, #20]
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d002      	beq.n	800a2ee <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a2e8:	b108      	cbz	r0, 800a2ee <tcp_input+0x36a>
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1ee      	bne.n	800a2cc <tcp_input+0x348>
    if (lpcb != NULL) {
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	f43f af38 	beq.w	800a164 <tcp_input+0x1e0>
      if (prev != NULL) {
 800a2f4:	b121      	cbz	r1, 800a300 <tcp_input+0x37c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a2f6:	68c3      	ldr	r3, [r0, #12]
 800a2f8:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a2fa:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a2fc:	4b63      	ldr	r3, [pc, #396]	; (800a48c <tcp_input+0x508>)
 800a2fe:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 800a300:	f7fe fdb2 	bl	8008e68 <tcp_listen_input>
      pbuf_free(p);
 800a304:	4620      	mov	r0, r4
 800a306:	f7fd f9b5 	bl	8007674 <pbuf_free>
      return;
 800a30a:	e686      	b.n	800a01a <tcp_input+0x96>
          tcp_send_empty_ack(pcb);
 800a30c:	4628      	mov	r0, r5
 800a30e:	f000 fde9 	bl	800aee4 <tcp_send_empty_ack>
 800a312:	e759      	b.n	800a1c8 <tcp_input+0x244>
    tcp_input_pcb = pcb;
 800a314:	4b5e      	ldr	r3, [pc, #376]	; (800a490 <tcp_input+0x50c>)
 800a316:	601d      	str	r5, [r3, #0]
    err = tcp_process(pcb);
 800a318:	4628      	mov	r0, r5
 800a31a:	f7ff fb97 	bl	8009a4c <tcp_process>
    if (err != ERR_ABRT) {
 800a31e:	f110 0f0d 	cmn.w	r0, #13
 800a322:	f43f af51 	beq.w	800a1c8 <tcp_input+0x244>
      if (recv_flags & TF_RESET) {
 800a326:	4b5b      	ldr	r3, [pc, #364]	; (800a494 <tcp_input+0x510>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	f013 0f08 	tst.w	r3, #8
 800a32e:	d00f      	beq.n	800a350 <tcp_input+0x3cc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a330:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800a334:	b11b      	cbz	r3, 800a33e <tcp_input+0x3ba>
 800a336:	f06f 010d 	mvn.w	r1, #13
 800a33a:	6928      	ldr	r0, [r5, #16]
 800a33c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a33e:	4629      	mov	r1, r5
 800a340:	4855      	ldr	r0, [pc, #340]	; (800a498 <tcp_input+0x514>)
 800a342:	f7fe f93b 	bl	80085bc <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800a346:	4629      	mov	r1, r5
 800a348:	2001      	movs	r0, #1
 800a34a:	f7fc ffbd 	bl	80072c8 <memp_free>
 800a34e:	e73b      	b.n	800a1c8 <tcp_input+0x244>
        if (recv_acked > 0) {
 800a350:	4b52      	ldr	r3, [pc, #328]	; (800a49c <tcp_input+0x518>)
 800a352:	881a      	ldrh	r2, [r3, #0]
 800a354:	b162      	cbz	r2, 800a370 <tcp_input+0x3ec>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a356:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d048      	beq.n	800a3ee <tcp_input+0x46a>
 800a35c:	4629      	mov	r1, r5
 800a35e:	6928      	ldr	r0, [r5, #16]
 800a360:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800a362:	f110 0f0d 	cmn.w	r0, #13
 800a366:	f43f af2f 	beq.w	800a1c8 <tcp_input+0x244>
          recv_acked = 0;
 800a36a:	2200      	movs	r2, #0
 800a36c:	4b4b      	ldr	r3, [pc, #300]	; (800a49c <tcp_input+0x518>)
 800a36e:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a370:	4628      	mov	r0, r5
 800a372:	f7fe fd0f 	bl	8008d94 <tcp_input_delayed_close>
 800a376:	2800      	cmp	r0, #0
 800a378:	f47f af26 	bne.w	800a1c8 <tcp_input+0x244>
        if (recv_data != NULL) {
 800a37c:	4b48      	ldr	r3, [pc, #288]	; (800a4a0 <tcp_input+0x51c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	b1eb      	cbz	r3, 800a3be <tcp_input+0x43a>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a382:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a384:	b133      	cbz	r3, 800a394 <tcp_input+0x410>
 800a386:	4b3d      	ldr	r3, [pc, #244]	; (800a47c <tcp_input+0x4f8>)
 800a388:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800a38c:	4945      	ldr	r1, [pc, #276]	; (800a4a4 <tcp_input+0x520>)
 800a38e:	483d      	ldr	r0, [pc, #244]	; (800a484 <tcp_input+0x500>)
 800a390:	f002 fa3f 	bl	800c812 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a394:	7eab      	ldrb	r3, [r5, #26]
 800a396:	f013 0f10 	tst.w	r3, #16
 800a39a:	d12a      	bne.n	800a3f2 <tcp_input+0x46e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a39c:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 800a3a0:	b37c      	cbz	r4, 800a402 <tcp_input+0x47e>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	4a3e      	ldr	r2, [pc, #248]	; (800a4a0 <tcp_input+0x51c>)
 800a3a6:	6812      	ldr	r2, [r2, #0]
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	6928      	ldr	r0, [r5, #16]
 800a3ac:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 800a3ae:	f110 0f0d 	cmn.w	r0, #13
 800a3b2:	f43f af09 	beq.w	800a1c8 <tcp_input+0x244>
          if (err != ERR_OK) {
 800a3b6:	b110      	cbz	r0, 800a3be <tcp_input+0x43a>
            pcb->refused_data = recv_data;
 800a3b8:	4b39      	ldr	r3, [pc, #228]	; (800a4a0 <tcp_input+0x51c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800a3be:	4b35      	ldr	r3, [pc, #212]	; (800a494 <tcp_input+0x510>)
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	f013 0f20 	tst.w	r3, #32
 800a3c6:	d005      	beq.n	800a3d4 <tcp_input+0x450>
          if (pcb->refused_data != NULL) {
 800a3c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a3ca:	b313      	cbz	r3, 800a412 <tcp_input+0x48e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a3cc:	7b5a      	ldrb	r2, [r3, #13]
 800a3ce:	f042 0220 	orr.w	r2, r2, #32
 800a3d2:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	4b2e      	ldr	r3, [pc, #184]	; (800a490 <tcp_input+0x50c>)
 800a3d8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f7fe fcda 	bl	8008d94 <tcp_input_delayed_close>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	f47f aef1 	bne.w	800a1c8 <tcp_input+0x244>
        tcp_output(pcb);
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	f000 fdb6 	bl	800af58 <tcp_output>
 800a3ec:	e6ec      	b.n	800a1c8 <tcp_input+0x244>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	e7b7      	b.n	800a362 <tcp_input+0x3de>
            pbuf_free(recv_data);
 800a3f2:	4b2b      	ldr	r3, [pc, #172]	; (800a4a0 <tcp_input+0x51c>)
 800a3f4:	6818      	ldr	r0, [r3, #0]
 800a3f6:	f7fd f93d 	bl	8007674 <pbuf_free>
            tcp_abort(pcb);
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f7fe fb2a 	bl	8008a54 <tcp_abort>
            goto aborted;
 800a400:	e6e2      	b.n	800a1c8 <tcp_input+0x244>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a402:	2300      	movs	r3, #0
 800a404:	4a26      	ldr	r2, [pc, #152]	; (800a4a0 <tcp_input+0x51c>)
 800a406:	6812      	ldr	r2, [r2, #0]
 800a408:	4629      	mov	r1, r5
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fe f9de 	bl	80087cc <tcp_recv_null>
 800a410:	e7cd      	b.n	800a3ae <tcp_input+0x42a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a412:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800a414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a418:	d001      	beq.n	800a41e <tcp_input+0x49a>
              pcb->rcv_wnd++;
 800a41a:	3301      	adds	r3, #1
 800a41c:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800a41e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 800a422:	b144      	cbz	r4, 800a436 <tcp_input+0x4b2>
 800a424:	2300      	movs	r3, #0
 800a426:	461a      	mov	r2, r3
 800a428:	4629      	mov	r1, r5
 800a42a:	6928      	ldr	r0, [r5, #16]
 800a42c:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 800a42e:	f110 0f0d 	cmn.w	r0, #13
 800a432:	d1cf      	bne.n	800a3d4 <tcp_input+0x450>
 800a434:	e6c8      	b.n	800a1c8 <tcp_input+0x244>
            TCP_EVENT_CLOSED(pcb, err);
 800a436:	2000      	movs	r0, #0
 800a438:	e7f9      	b.n	800a42e <tcp_input+0x4aa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a43a:	4b0f      	ldr	r3, [pc, #60]	; (800a478 <tcp_input+0x4f4>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	8998      	ldrh	r0, [r3, #12]
 800a440:	f7fb f8a1 	bl	8005586 <lwip_htons>
 800a444:	f010 0f04 	tst.w	r0, #4
 800a448:	d003      	beq.n	800a452 <tcp_input+0x4ce>
    pbuf_free(p);
 800a44a:	4620      	mov	r0, r4
 800a44c:	f7fd f912 	bl	8007674 <pbuf_free>
 800a450:	e5e3      	b.n	800a01a <tcp_input+0x96>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a452:	4b09      	ldr	r3, [pc, #36]	; (800a478 <tcp_input+0x4f4>)
 800a454:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a456:	4a14      	ldr	r2, [pc, #80]	; (800a4a8 <tcp_input+0x524>)
 800a458:	4914      	ldr	r1, [pc, #80]	; (800a4ac <tcp_input+0x528>)
 800a45a:	8808      	ldrh	r0, [r1, #0]
 800a45c:	4914      	ldr	r1, [pc, #80]	; (800a4b0 <tcp_input+0x52c>)
 800a45e:	6809      	ldr	r1, [r1, #0]
 800a460:	881d      	ldrh	r5, [r3, #0]
 800a462:	9501      	str	r5, [sp, #4]
 800a464:	885b      	ldrh	r3, [r3, #2]
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	4613      	mov	r3, r2
 800a46a:	3204      	adds	r2, #4
 800a46c:	4401      	add	r1, r0
 800a46e:	4811      	ldr	r0, [pc, #68]	; (800a4b4 <tcp_input+0x530>)
 800a470:	6800      	ldr	r0, [r0, #0]
 800a472:	f000 fecd 	bl	800b210 <tcp_rst>
 800a476:	e7e8      	b.n	800a44a <tcp_input+0x4c6>
 800a478:	20003f08 	.word	0x20003f08
 800a47c:	08010514 	.word	0x08010514
 800a480:	0801045c 	.word	0x0801045c
 800a484:	0800cd98 	.word	0x0800cd98
 800a488:	20004274 	.word	0x20004274
 800a48c:	200088a4 	.word	0x200088a4
 800a490:	200088b0 	.word	0x200088b0
 800a494:	20003efc 	.word	0x20003efc
 800a498:	2000889c 	.word	0x2000889c
 800a49c:	20003ef4 	.word	0x20003ef4
 800a4a0:	20003ef8 	.word	0x20003ef8
 800a4a4:	0801048c 	.word	0x0801048c
 800a4a8:	20004284 	.word	0x20004284
 800a4ac:	20003f16 	.word	0x20003f16
 800a4b0:	20003f00 	.word	0x20003f00
 800a4b4:	20003edc 	.word	0x20003edc

0800a4b8 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800a4b8:	4a02      	ldr	r2, [pc, #8]	; (800a4c4 <tcp_trigger_input_pcb_close+0xc>)
 800a4ba:	7813      	ldrb	r3, [r2, #0]
 800a4bc:	f043 0310 	orr.w	r3, r3, #16
 800a4c0:	7013      	strb	r3, [r2, #0]
 800a4c2:	4770      	bx	lr
 800a4c4:	20003efc 	.word	0x20003efc

0800a4c8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a4c8:	b508      	push	{r3, lr}
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a4ca:	7d03      	ldrb	r3, [r0, #20]
 800a4cc:	2b04      	cmp	r3, #4
 800a4ce:	d005      	beq.n	800a4dc <tcp_write_checks+0x14>
 800a4d0:	2b07      	cmp	r3, #7
 800a4d2:	d003      	beq.n	800a4dc <tcp_write_checks+0x14>
      (pcb->state != CLOSE_WAIT) &&
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d001      	beq.n	800a4dc <tcp_write_checks+0x14>
      (pcb->state != SYN_SENT) &&
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	d139      	bne.n	800a550 <tcp_write_checks+0x88>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 800a4dc:	2900      	cmp	r1, #0
 800a4de:	d03a      	beq.n	800a556 <tcp_write_checks+0x8e>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a4e0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800a4e4:	4299      	cmp	r1, r3
 800a4e6:	d808      	bhi.n	800a4fa <tcp_write_checks+0x32>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a4e8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a4ec:	2b0a      	cmp	r3, #10
 800a4ee:	d80b      	bhi.n	800a508 <tcp_write_checks+0x40>
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 800a4f0:	b1f3      	cbz	r3, 800a530 <tcp_write_checks+0x68>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a4f2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a4f4:	b17b      	cbz	r3, 800a516 <tcp_write_checks+0x4e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 800a4fa:	7e83      	ldrb	r3, [r0, #26]
 800a4fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a500:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 800a502:	f04f 30ff 	mov.w	r0, #4294967295
 800a506:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 800a508:	7e83      	ldrb	r3, [r0, #26]
 800a50a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a50e:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 800a510:	f04f 30ff 	mov.w	r0, #4294967295
 800a514:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a516:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a518:	b10b      	cbz	r3, 800a51e <tcp_write_checks+0x56>
  return ERR_OK;
 800a51a:	2000      	movs	r0, #0
 800a51c:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a51e:	4b0f      	ldr	r3, [pc, #60]	; (800a55c <tcp_write_checks+0x94>)
 800a520:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800a524:	490e      	ldr	r1, [pc, #56]	; (800a560 <tcp_write_checks+0x98>)
 800a526:	480f      	ldr	r0, [pc, #60]	; (800a564 <tcp_write_checks+0x9c>)
 800a528:	f002 f973 	bl	800c812 <iprintf>
  return ERR_OK;
 800a52c:	2000      	movs	r0, #0
 800a52e:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a530:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a532:	b143      	cbz	r3, 800a546 <tcp_write_checks+0x7e>
 800a534:	4b09      	ldr	r3, [pc, #36]	; (800a55c <tcp_write_checks+0x94>)
 800a536:	f240 1259 	movw	r2, #345	; 0x159
 800a53a:	490b      	ldr	r1, [pc, #44]	; (800a568 <tcp_write_checks+0xa0>)
 800a53c:	4809      	ldr	r0, [pc, #36]	; (800a564 <tcp_write_checks+0x9c>)
 800a53e:	f002 f968 	bl	800c812 <iprintf>
  return ERR_OK;
 800a542:	2000      	movs	r0, #0
 800a544:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a546:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1f3      	bne.n	800a534 <tcp_write_checks+0x6c>
  return ERR_OK;
 800a54c:	2000      	movs	r0, #0
}
 800a54e:	bd08      	pop	{r3, pc}
    return ERR_CONN;
 800a550:	f06f 000a 	mvn.w	r0, #10
 800a554:	bd08      	pop	{r3, pc}
    return ERR_OK;
 800a556:	2000      	movs	r0, #0
 800a558:	bd08      	pop	{r3, pc}
 800a55a:	bf00      	nop
 800a55c:	08010a24 	.word	0x08010a24
 800a560:	08010a58 	.word	0x08010a58
 800a564:	0800cd98 	.word	0x0800cd98
 800a568:	08010a94 	.word	0x08010a94

0800a56c <tcp_pbuf_prealloc>:
{
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	460c      	mov	r4, r1
 800a570:	461e      	mov	r6, r3
 800a572:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 800a576:	4291      	cmp	r1, r2
 800a578:	d215      	bcs.n	800a5a6 <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a57a:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800a57e:	f011 0f02 	tst.w	r1, #2
 800a582:	d108      	bne.n	800a596 <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 800a584:	9904      	ldr	r1, [sp, #16]
 800a586:	7e89      	ldrb	r1, [r1, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a588:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a58c:	d126      	bne.n	800a5dc <tcp_pbuf_prealloc+0x70>
        (!(pcb->flags & TF_NODELAY) &&
 800a58e:	b113      	cbz	r3, 800a596 <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 800a590:	9b04      	ldr	r3, [sp, #16]
 800a592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800a594:	b1e3      	cbz	r3, 800a5d0 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a596:	f204 21d3 	addw	r1, r4, #723	; 0x2d3
 800a59a:	f021 0103 	bic.w	r1, r1, #3
 800a59e:	428a      	cmp	r2, r1
 800a5a0:	bf28      	it	cs
 800a5a2:	460a      	movcs	r2, r1
 800a5a4:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f7fd f8d0 	bl	800774c <pbuf_alloc>
  if (p == NULL) {
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	b168      	cbz	r0, 800a5cc <tcp_pbuf_prealloc+0x60>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a5b0:	6803      	ldr	r3, [r0, #0]
 800a5b2:	b133      	cbz	r3, 800a5c2 <tcp_pbuf_prealloc+0x56>
 800a5b4:	4b0a      	ldr	r3, [pc, #40]	; (800a5e0 <tcp_pbuf_prealloc+0x74>)
 800a5b6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a5ba:	490a      	ldr	r1, [pc, #40]	; (800a5e4 <tcp_pbuf_prealloc+0x78>)
 800a5bc:	480a      	ldr	r0, [pc, #40]	; (800a5e8 <tcp_pbuf_prealloc+0x7c>)
 800a5be:	f002 f928 	bl	800c812 <iprintf>
  *oversize = p->len - length;
 800a5c2:	896b      	ldrh	r3, [r5, #10]
 800a5c4:	1b1b      	subs	r3, r3, r4
 800a5c6:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800a5c8:	812c      	strh	r4, [r5, #8]
 800a5ca:	816c      	strh	r4, [r5, #10]
}
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	bd70      	pop	{r4, r5, r6, pc}
          pcb->unacked != NULL))) {
 800a5d0:	9b04      	ldr	r3, [sp, #16]
 800a5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1de      	bne.n	800a596 <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 800a5d8:	4621      	mov	r1, r4
 800a5da:	e7e4      	b.n	800a5a6 <tcp_pbuf_prealloc+0x3a>
 800a5dc:	4621      	mov	r1, r4
 800a5de:	e7e2      	b.n	800a5a6 <tcp_pbuf_prealloc+0x3a>
 800a5e0:	08010a24 	.word	0x08010a24
 800a5e4:	08010834 	.word	0x08010834
 800a5e8:	0800cd98 	.word	0x0800cd98

0800a5ec <tcp_create_segment>:
{
 800a5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f0:	4680      	mov	r8, r0
 800a5f2:	460e      	mov	r6, r1
 800a5f4:	4617      	mov	r7, r2
 800a5f6:	4699      	mov	r9, r3
 800a5f8:	f89d a020 	ldrb.w	sl, [sp, #32]
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a5fc:	f01a 0f01 	tst.w	sl, #1
 800a600:	d03c      	beq.n	800a67c <tcp_create_segment+0x90>
 800a602:	2504      	movs	r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a604:	2003      	movs	r0, #3
 800a606:	f7fc fe45 	bl	8007294 <memp_malloc>
 800a60a:	4604      	mov	r4, r0
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d037      	beq.n	800a680 <tcp_create_segment+0x94>
  seg->flags = optflags;
 800a610:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800a614:	2300      	movs	r3, #0
 800a616:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800a618:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a61a:	8933      	ldrh	r3, [r6, #8]
 800a61c:	fa1f fa85 	uxth.w	sl, r5
 800a620:	4553      	cmp	r3, sl
 800a622:	d331      	bcc.n	800a688 <tcp_create_segment+0x9c>
  seg->len = p->tot_len - optlen;
 800a624:	8933      	ldrh	r3, [r6, #8]
 800a626:	eba3 030a 	sub.w	r3, r3, sl
 800a62a:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800a62c:	2114      	movs	r1, #20
 800a62e:	4630      	mov	r0, r6
 800a630:	f7fd f816 	bl	8007660 <pbuf_header>
 800a634:	bb78      	cbnz	r0, 800a696 <tcp_create_segment+0xaa>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a636:	6863      	ldr	r3, [r4, #4]
 800a638:	685e      	ldr	r6, [r3, #4]
 800a63a:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a63c:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 800a640:	f7fa ffa1 	bl	8005586 <lwip_htons>
 800a644:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a646:	68e6      	ldr	r6, [r4, #12]
 800a648:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 800a64c:	f7fa ff9b 	bl	8005586 <lwip_htons>
 800a650:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a652:	68e6      	ldr	r6, [r4, #12]
 800a654:	4648      	mov	r0, r9
 800a656:	f7fa ff99 	bl	800558c <lwip_htonl>
 800a65a:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800a65c:	68e6      	ldr	r6, [r4, #12]
 800a65e:	08a8      	lsrs	r0, r5, #2
 800a660:	3005      	adds	r0, #5
 800a662:	0300      	lsls	r0, r0, #12
 800a664:	b280      	uxth	r0, r0
 800a666:	4338      	orrs	r0, r7
 800a668:	f7fa ff8d 	bl	8005586 <lwip_htons>
 800a66c:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 800a66e:	68e3      	ldr	r3, [r4, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	749a      	strb	r2, [r3, #18]
 800a674:	74da      	strb	r2, [r3, #19]
}
 800a676:	4620      	mov	r0, r4
 800a678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a67c:	2500      	movs	r5, #0
 800a67e:	e7c1      	b.n	800a604 <tcp_create_segment+0x18>
    pbuf_free(p);
 800a680:	4630      	mov	r0, r6
 800a682:	f7fc fff7 	bl	8007674 <pbuf_free>
    return NULL;
 800a686:	e7f6      	b.n	800a676 <tcp_create_segment+0x8a>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a688:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <tcp_create_segment+0xb4>)
 800a68a:	22ba      	movs	r2, #186	; 0xba
 800a68c:	4905      	ldr	r1, [pc, #20]	; (800a6a4 <tcp_create_segment+0xb8>)
 800a68e:	4806      	ldr	r0, [pc, #24]	; (800a6a8 <tcp_create_segment+0xbc>)
 800a690:	f002 f8bf 	bl	800c812 <iprintf>
 800a694:	e7c6      	b.n	800a624 <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 800a696:	4620      	mov	r0, r4
 800a698:	f7fd fcd0 	bl	800803c <tcp_seg_free>
    return NULL;
 800a69c:	2400      	movs	r4, #0
 800a69e:	e7ea      	b.n	800a676 <tcp_create_segment+0x8a>
 800a6a0:	08010a24 	.word	0x08010a24
 800a6a4:	080106ac 	.word	0x080106ac
 800a6a8:	0800cd98 	.word	0x0800cd98

0800a6ac <tcp_output_alloc_header>:
{
 800a6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a6b6:	4411      	add	r1, r2
 800a6b8:	b289      	uxth	r1, r1
 800a6ba:	3114      	adds	r1, #20
 800a6bc:	2200      	movs	r2, #0
 800a6be:	b289      	uxth	r1, r1
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	f7fd f843 	bl	800774c <pbuf_alloc>
  if (p != NULL) {
 800a6c6:	4607      	mov	r7, r0
 800a6c8:	b348      	cbz	r0, 800a71e <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a6ca:	8942      	ldrh	r2, [r0, #10]
 800a6cc:	f104 0314 	add.w	r3, r4, #20
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	db27      	blt.n	800a724 <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800a6d4:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800a6d6:	8af0      	ldrh	r0, [r6, #22]
 800a6d8:	f7fa ff55 	bl	8005586 <lwip_htons>
 800a6dc:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800a6de:	8b30      	ldrh	r0, [r6, #24]
 800a6e0:	f7fa ff51 	bl	8005586 <lwip_htons>
 800a6e4:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800a6e6:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a6ea:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800a6ec:	f7fa ff4e 	bl	800558c <lwip_htonl>
 800a6f0:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800a6f2:	08a0      	lsrs	r0, r4, #2
 800a6f4:	3005      	adds	r0, #5
 800a6f6:	0300      	lsls	r0, r0, #12
 800a6f8:	b280      	uxth	r0, r0
 800a6fa:	f040 0010 	orr.w	r0, r0, #16
 800a6fe:	f7fa ff42 	bl	8005586 <lwip_htons>
 800a702:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a704:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 800a706:	f7fa ff3e 	bl	8005586 <lwip_htons>
 800a70a:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	742b      	strb	r3, [r5, #16]
 800a710:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800a712:	74ab      	strb	r3, [r5, #18]
 800a714:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a716:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a718:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
 800a71a:	4413      	add	r3, r2
 800a71c:	62f3      	str	r3, [r6, #44]	; 0x2c
}
 800a71e:	4638      	mov	r0, r7
 800a720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a724:	4b03      	ldr	r3, [pc, #12]	; (800a734 <tcp_output_alloc_header+0x88>)
 800a726:	2273      	movs	r2, #115	; 0x73
 800a728:	4903      	ldr	r1, [pc, #12]	; (800a738 <tcp_output_alloc_header+0x8c>)
 800a72a:	4804      	ldr	r0, [pc, #16]	; (800a73c <tcp_output_alloc_header+0x90>)
 800a72c:	f002 f871 	bl	800c812 <iprintf>
 800a730:	e7d0      	b.n	800a6d4 <tcp_output_alloc_header+0x28>
 800a732:	bf00      	nop
 800a734:	08010a24 	.word	0x08010a24
 800a738:	08010804 	.word	0x08010804
 800a73c:	0800cd98 	.word	0x0800cd98

0800a740 <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800a740:	6843      	ldr	r3, [r0, #4]
 800a742:	89db      	ldrh	r3, [r3, #14]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d001      	beq.n	800a74c <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800a748:	2000      	movs	r0, #0
 800a74a:	4770      	bx	lr
{
 800a74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74e:	b085      	sub	sp, #20
 800a750:	4616      	mov	r6, r2
 800a752:	460d      	mov	r5, r1
 800a754:	4604      	mov	r4, r0
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a756:	68c7      	ldr	r7, [r0, #12]
 800a758:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800a75a:	f7fa ff17 	bl	800558c <lwip_htonl>
 800a75e:	60b8      	str	r0, [r7, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a760:	68e7      	ldr	r7, [r4, #12]
 800a762:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800a764:	f7fa ff0f 	bl	8005586 <lwip_htons>
 800a768:	81f8      	strh	r0, [r7, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a76a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a76c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800a76e:	4413      	add	r3, r2
 800a770:	62eb      	str	r3, [r5, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a772:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a774:	7aa3      	ldrb	r3, [r4, #10]
 800a776:	f013 0f01 	tst.w	r3, #1
 800a77a:	d126      	bne.n	800a7ca <tcp_output_segment+0x8a>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a77c:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800a780:	2b00      	cmp	r3, #0
 800a782:	db2d      	blt.n	800a7e0 <tcp_output_segment+0xa0>
    pcb->rtime = 0;
  }

  if (pcb->rttest == 0) {
 800a784:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a786:	2b00      	cmp	r3, #0
 800a788:	d02d      	beq.n	800a7e6 <tcp_output_segment+0xa6>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a78a:	68e3      	ldr	r3, [r4, #12]
 800a78c:	6862      	ldr	r2, [r4, #4]
 800a78e:	6851      	ldr	r1, [r2, #4]
 800a790:	1a5b      	subs	r3, r3, r1
 800a792:	b29b      	uxth	r3, r3
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a794:	8951      	ldrh	r1, [r2, #10]
 800a796:	1ac9      	subs	r1, r1, r3
 800a798:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800a79a:	6861      	ldr	r1, [r4, #4]
 800a79c:	890a      	ldrh	r2, [r1, #8]
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
 800a7a2:	6863      	ldr	r3, [r4, #4]
 800a7a4:	68e2      	ldr	r2, [r4, #12]
 800a7a6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a7a8:	68e3      	ldr	r3, [r4, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	741a      	strb	r2, [r3, #16]
 800a7ae:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a7b0:	6860      	ldr	r0, [r4, #4]
 800a7b2:	7aab      	ldrb	r3, [r5, #10]
 800a7b4:	7a6a      	ldrb	r2, [r5, #9]
 800a7b6:	9602      	str	r6, [sp, #8]
 800a7b8:	2106      	movs	r1, #6
 800a7ba:	9101      	str	r1, [sp, #4]
 800a7bc:	9200      	str	r2, [sp, #0]
 800a7be:	1d2a      	adds	r2, r5, #4
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	f7fb fe2f 	bl	8006424 <ip4_output_if>
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 800a7c6:	b005      	add	sp, #20
 800a7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a7ca:	1d29      	adds	r1, r5, #4
 800a7cc:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 800a7d0:	f7fe fa3a 	bl	8008c48 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a7d4:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800a7d8:	f7fa fed8 	bl	800558c <lwip_htonl>
 800a7dc:	6178      	str	r0, [r7, #20]
 800a7de:	e7cd      	b.n	800a77c <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	862b      	strh	r3, [r5, #48]	; 0x30
 800a7e4:	e7ce      	b.n	800a784 <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 800a7e6:	4b04      	ldr	r3, [pc, #16]	; (800a7f8 <tcp_output_segment+0xb8>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a7ec:	68e3      	ldr	r3, [r4, #12]
 800a7ee:	6858      	ldr	r0, [r3, #4]
 800a7f0:	f7fa fecc 	bl	800558c <lwip_htonl>
 800a7f4:	63a8      	str	r0, [r5, #56]	; 0x38
 800a7f6:	e7c8      	b.n	800a78a <tcp_output_segment+0x4a>
 800a7f8:	200088a0 	.word	0x200088a0

0800a7fc <tcp_write>:
{
 800a7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a800:	b091      	sub	sp, #68	; 0x44
 800a802:	4681      	mov	r9, r0
 800a804:	9108      	str	r1, [sp, #32]
 800a806:	4692      	mov	sl, r2
 800a808:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800a810:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800a814:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800a816:	9205      	str	r2, [sp, #20]
 800a818:	085b      	lsrs	r3, r3, #1
 800a81a:	4293      	cmp	r3, r2
 800a81c:	bf28      	it	cs
 800a81e:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800a820:	b103      	cbz	r3, 800a824 <tcp_write+0x28>
 800a822:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a824:	9b08      	ldr	r3, [sp, #32]
 800a826:	b1cb      	cbz	r3, 800a85c <tcp_write+0x60>
  err = tcp_write_checks(pcb, len);
 800a828:	4651      	mov	r1, sl
 800a82a:	4648      	mov	r0, r9
 800a82c:	f7ff fe4c 	bl	800a4c8 <tcp_write_checks>
  if (err != ERR_OK) {
 800a830:	9009      	str	r0, [sp, #36]	; 0x24
 800a832:	2800      	cmp	r0, #0
 800a834:	f040 81b2 	bne.w	800ab9c <tcp_write+0x3a0>
  queuelen = pcb->snd_queuelen;
 800a838:	f8b9 6062 	ldrh.w	r6, [r9, #98]	; 0x62
  if (pcb->unsent != NULL) {
 800a83c:	f8d9 b068 	ldr.w	fp, [r9, #104]	; 0x68
 800a840:	f1bb 0f00 	cmp.w	fp, #0
 800a844:	d116      	bne.n	800a874 <tcp_write+0x78>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a846:	f8b9 4064 	ldrh.w	r4, [r9, #100]	; 0x64
 800a84a:	2c00      	cmp	r4, #0
 800a84c:	f040 80d8 	bne.w	800aa00 <tcp_write+0x204>
  u16_t extendlen = 0;
 800a850:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800a852:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a854:	46d8      	mov	r8, fp
  struct pbuf *concat_p = NULL;
 800a856:	2300      	movs	r3, #0
 800a858:	930c      	str	r3, [sp, #48]	; 0x30
 800a85a:	e0e3      	b.n	800aa24 <tcp_write+0x228>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a85c:	4bb1      	ldr	r3, [pc, #708]	; (800ab24 <tcp_write+0x328>)
 800a85e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800a862:	49b1      	ldr	r1, [pc, #708]	; (800ab28 <tcp_write+0x32c>)
 800a864:	48b1      	ldr	r0, [pc, #708]	; (800ab2c <tcp_write+0x330>)
 800a866:	f001 ffd4 	bl	800c812 <iprintf>
 800a86a:	f06f 030f 	mvn.w	r3, #15
 800a86e:	9309      	str	r3, [sp, #36]	; 0x24
 800a870:	e194      	b.n	800ab9c <tcp_write+0x3a0>
         last_unsent = last_unsent->next);
 800a872:	46bb      	mov	fp, r7
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a874:	f8db 7000 	ldr.w	r7, [fp]
 800a878:	2f00      	cmp	r7, #0
 800a87a:	d1fa      	bne.n	800a872 <tcp_write+0x76>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a87c:	f89b 300a 	ldrb.w	r3, [fp, #10]
 800a880:	f013 0f01 	tst.w	r3, #1
 800a884:	d051      	beq.n	800a92a <tcp_write+0x12e>
 800a886:	2404      	movs	r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a888:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800a88c:	4423      	add	r3, r4
 800a88e:	9a05      	ldr	r2, [sp, #20]
 800a890:	429a      	cmp	r2, r3
 800a892:	db4c      	blt.n	800a92e <tcp_write+0x132>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a894:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800a898:	441c      	add	r4, r3
 800a89a:	b2a4      	uxth	r4, r4
 800a89c:	9b05      	ldr	r3, [sp, #20]
 800a89e:	1b1c      	subs	r4, r3, r4
 800a8a0:	b2a3      	uxth	r3, r4
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 800a8a6:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800a8aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ac:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d04e      	beq.n	800a952 <tcp_write+0x156>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d342      	bcc.n	800a93e <tcp_write+0x142>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a8b8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a8bc:	459a      	cmp	sl, r3
 800a8be:	d946      	bls.n	800a94e <tcp_write+0x152>
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a8c4:	4282      	cmp	r2, r0
 800a8c6:	bfa8      	it	ge
 800a8c8:	4602      	movge	r2, r0
 800a8ca:	b292      	uxth	r2, r2
 800a8cc:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 800a8ce:	1a9b      	subs	r3, r3, r2
 800a8d0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800a8d4:	1a83      	subs	r3, r0, r2
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	930b      	str	r3, [sp, #44]	; 0x2c
      seg = last_unsent;
 800a8da:	46d8      	mov	r8, fp
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a8dc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800a8e0:	b14b      	cbz	r3, 800a8f6 <tcp_write+0xfa>
 800a8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e4:	4553      	cmp	r3, sl
 800a8e6:	d006      	beq.n	800a8f6 <tcp_write+0xfa>
 800a8e8:	4b8e      	ldr	r3, [pc, #568]	; (800ab24 <tcp_write+0x328>)
 800a8ea:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a8ee:	4990      	ldr	r1, [pc, #576]	; (800ab30 <tcp_write+0x334>)
 800a8f0:	488e      	ldr	r0, [pc, #568]	; (800ab2c <tcp_write+0x330>)
 800a8f2:	f001 ff8e 	bl	800c812 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a8f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8f8:	4552      	cmp	r2, sl
 800a8fa:	f080 808f 	bcs.w	800aa1c <tcp_write+0x220>
 800a8fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a900:	2900      	cmp	r1, #0
 800a902:	f000 8094 	beq.w	800aa2e <tcp_write+0x232>
 800a906:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 8093 	beq.w	800aa36 <tcp_write+0x23a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a910:	ebaa 0502 	sub.w	r5, sl, r2
 800a914:	428d      	cmp	r5, r1
 800a916:	bfa8      	it	ge
 800a918:	460d      	movge	r5, r1
 800a91a:	b2ac      	uxth	r4, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a91c:	9b06      	ldr	r3, [sp, #24]
 800a91e:	f013 0f01 	tst.w	r3, #1
 800a922:	d118      	bne.n	800a956 <tcp_write+0x15a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a924:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a928:	e038      	b.n	800a99c <tcp_write+0x1a0>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a92a:	2400      	movs	r4, #0
 800a92c:	e7ac      	b.n	800a888 <tcp_write+0x8c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a92e:	4b7d      	ldr	r3, [pc, #500]	; (800ab24 <tcp_write+0x328>)
 800a930:	f240 12c7 	movw	r2, #455	; 0x1c7
 800a934:	497f      	ldr	r1, [pc, #508]	; (800ab34 <tcp_write+0x338>)
 800a936:	487d      	ldr	r0, [pc, #500]	; (800ab2c <tcp_write+0x330>)
 800a938:	f001 ff6b 	bl	800c812 <iprintf>
 800a93c:	e7aa      	b.n	800a894 <tcp_write+0x98>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a93e:	4b79      	ldr	r3, [pc, #484]	; (800ab24 <tcp_write+0x328>)
 800a940:	f240 12d9 	movw	r2, #473	; 0x1d9
 800a944:	497c      	ldr	r1, [pc, #496]	; (800ab38 <tcp_write+0x33c>)
 800a946:	4879      	ldr	r0, [pc, #484]	; (800ab2c <tcp_write+0x330>)
 800a948:	f001 ff63 	bl	800c812 <iprintf>
 800a94c:	e7b4      	b.n	800a8b8 <tcp_write+0xbc>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a94e:	4652      	mov	r2, sl
 800a950:	e7b7      	b.n	800a8c2 <tcp_write+0xc6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a952:	46b8      	mov	r8, r7
 800a954:	e7c2      	b.n	800a8dc <tcp_write+0xe0>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a956:	2301      	movs	r3, #1
 800a958:	9302      	str	r3, [sp, #8]
 800a95a:	9b06      	ldr	r3, [sp, #24]
 800a95c:	9301      	str	r3, [sp, #4]
 800a95e:	f8cd 9000 	str.w	r9, [sp]
 800a962:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800a966:	460a      	mov	r2, r1
 800a968:	4621      	mov	r1, r4
 800a96a:	2004      	movs	r0, #4
 800a96c:	f7ff fdfe 	bl	800a56c <tcp_pbuf_prealloc>
 800a970:	4603      	mov	r3, r0
 800a972:	900c      	str	r0, [sp, #48]	; 0x30
 800a974:	2800      	cmp	r0, #0
 800a976:	f000 80f0 	beq.w	800ab5a <tcp_write+0x35e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a97a:	4622      	mov	r2, r4
 800a97c:	9908      	ldr	r1, [sp, #32]
 800a97e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a980:	4401      	add	r1, r0
 800a982:	461d      	mov	r5, r3
 800a984:	6858      	ldr	r0, [r3, #4]
 800a986:	f002 f968 	bl	800cc5a <memcpy>
        queuelen += pbuf_clen(concat_p);
 800a98a:	4628      	mov	r0, r5
 800a98c:	f7fd f838 	bl	8007a00 <pbuf_clen>
 800a990:	4406      	add	r6, r0
 800a992:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800a994:	2300      	movs	r3, #0
 800a996:	930b      	str	r3, [sp, #44]	; 0x2c
 800a998:	e01a      	b.n	800a9d0 <tcp_write+0x1d4>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a99a:	4613      	mov	r3, r2
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	2a00      	cmp	r2, #0
 800a9a0:	d1fb      	bne.n	800a99a <tcp_write+0x19e>
 800a9a2:	920c      	str	r2, [sp, #48]	; 0x30
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a9a4:	7b1a      	ldrb	r2, [r3, #12]
 800a9a6:	2a01      	cmp	r2, #1
 800a9a8:	d017      	beq.n	800a9da <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	2004      	movs	r0, #4
 800a9b0:	f7fc fecc 	bl	800774c <pbuf_alloc>
 800a9b4:	900c      	str	r0, [sp, #48]	; 0x30
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	f000 80cf 	beq.w	800ab5a <tcp_write+0x35e>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800a9bc:	9b08      	ldr	r3, [sp, #32]
 800a9be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a9c0:	440b      	add	r3, r1
 800a9c2:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800a9c4:	f7fd f81c 	bl	8007a00 <pbuf_clen>
 800a9c8:	4406      	add	r6, r0
 800a9ca:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800a9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d2:	441c      	add	r4, r3
 800a9d4:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 800a9d6:	46d8      	mov	r8, fp
 800a9d8:	e024      	b.n	800aa24 <tcp_write+0x228>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	895b      	ldrh	r3, [r3, #10]
 800a9de:	4413      	add	r3, r2
 800a9e0:	9a08      	ldr	r2, [sp, #32]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d1e1      	bne.n	800a9aa <tcp_write+0x1ae>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9e8:	b90b      	cbnz	r3, 800a9ee <tcp_write+0x1f2>
          extendlen = seglen;
 800a9ea:	940b      	str	r4, [sp, #44]	; 0x2c
 800a9ec:	e7f0      	b.n	800a9d0 <tcp_write+0x1d4>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a9ee:	4b4d      	ldr	r3, [pc, #308]	; (800ab24 <tcp_write+0x328>)
 800a9f0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800a9f4:	4951      	ldr	r1, [pc, #324]	; (800ab3c <tcp_write+0x340>)
 800a9f6:	484d      	ldr	r0, [pc, #308]	; (800ab2c <tcp_write+0x330>)
 800a9f8:	f001 ff0b 	bl	800c812 <iprintf>
          extendlen = seglen;
 800a9fc:	940b      	str	r4, [sp, #44]	; 0x2c
 800a9fe:	e7e7      	b.n	800a9d0 <tcp_write+0x1d4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800aa00:	4b48      	ldr	r3, [pc, #288]	; (800ab24 <tcp_write+0x328>)
 800aa02:	f240 2225 	movw	r2, #549	; 0x225
 800aa06:	494e      	ldr	r1, [pc, #312]	; (800ab40 <tcp_write+0x344>)
 800aa08:	4848      	ldr	r0, [pc, #288]	; (800ab2c <tcp_write+0x330>)
 800aa0a:	f001 ff02 	bl	800c812 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800aa0e:	46d8      	mov	r8, fp
  u16_t extendlen = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800aa14:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
 800aa16:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 800aa18:	930c      	str	r3, [sp, #48]	; 0x30
 800aa1a:	e003      	b.n	800aa24 <tcp_write+0x228>
 800aa1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  u16_t extendlen = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	930b      	str	r3, [sp, #44]	; 0x2c
  struct pbuf *concat_p = NULL;
 800aa22:	930c      	str	r3, [sp, #48]	; 0x30
      queue = seg;
 800aa24:	2700      	movs	r7, #0
 800aa26:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800aa2a:	46bb      	mov	fp, r7
 800aa2c:	e060      	b.n	800aaf0 <tcp_write+0x2f4>
 800aa2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 800aa30:	2300      	movs	r3, #0
 800aa32:	930c      	str	r3, [sp, #48]	; 0x30
 800aa34:	e7f6      	b.n	800aa24 <tcp_write+0x228>
  u16_t extendlen = 0;
 800aa36:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	930c      	str	r3, [sp, #48]	; 0x30
 800aa3e:	e7f1      	b.n	800aa24 <tcp_write+0x228>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800aa40:	fab7 f387 	clz	r3, r7
 800aa44:	095b      	lsrs	r3, r3, #5
 800aa46:	9302      	str	r3, [sp, #8]
 800aa48:	9b06      	ldr	r3, [sp, #24]
 800aa4a:	9301      	str	r3, [sp, #4]
 800aa4c:	f8cd 9000 	str.w	r9, [sp]
 800aa50:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800aa54:	9a05      	ldr	r2, [sp, #20]
 800aa56:	4629      	mov	r1, r5
 800aa58:	2000      	movs	r0, #0
 800aa5a:	f7ff fd87 	bl	800a56c <tcp_pbuf_prealloc>
 800aa5e:	4680      	mov	r8, r0
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d07a      	beq.n	800ab5a <tcp_write+0x35e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800aa64:	8943      	ldrh	r3, [r0, #10]
 800aa66:	429d      	cmp	r5, r3
 800aa68:	d807      	bhi.n	800aa7a <tcp_write+0x27e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800aa6a:	462a      	mov	r2, r5
 800aa6c:	9b08      	ldr	r3, [sp, #32]
 800aa6e:	1919      	adds	r1, r3, r4
 800aa70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aa74:	f002 f8f1 	bl	800cc5a <memcpy>
 800aa78:	e01d      	b.n	800aab6 <tcp_write+0x2ba>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800aa7a:	4b2a      	ldr	r3, [pc, #168]	; (800ab24 <tcp_write+0x328>)
 800aa7c:	f240 2241 	movw	r2, #577	; 0x241
 800aa80:	4930      	ldr	r1, [pc, #192]	; (800ab44 <tcp_write+0x348>)
 800aa82:	482a      	ldr	r0, [pc, #168]	; (800ab2c <tcp_write+0x330>)
 800aa84:	f001 fec5 	bl	800c812 <iprintf>
 800aa88:	e7ef      	b.n	800aa6a <tcp_write+0x26e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	2000      	movs	r0, #0
 800aa90:	f7fc fe5c 	bl	800774c <pbuf_alloc>
 800aa94:	9007      	str	r0, [sp, #28]
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d05f      	beq.n	800ab5a <tcp_write+0x35e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800aa9a:	9b08      	ldr	r3, [sp, #32]
 800aa9c:	4423      	add	r3, r4
 800aa9e:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	f7fc fe51 	bl	800774c <pbuf_alloc>
 800aaaa:	4680      	mov	r8, r0
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d04d      	beq.n	800ab4c <tcp_write+0x350>
      pbuf_cat(p/*header*/, p2/*data*/);
 800aab0:	9907      	ldr	r1, [sp, #28]
 800aab2:	f7fc ffcb 	bl	8007a4c <pbuf_cat>
    queuelen += pbuf_clen(p);
 800aab6:	4640      	mov	r0, r8
 800aab8:	f7fc ffa2 	bl	8007a00 <pbuf_clen>
 800aabc:	4406      	add	r6, r0
 800aabe:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800aac0:	2e0b      	cmp	r6, #11
 800aac2:	d847      	bhi.n	800ab54 <tcp_write+0x358>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800aac4:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 800aac8:	2200      	movs	r2, #0
 800aaca:	9200      	str	r2, [sp, #0]
 800aacc:	4423      	add	r3, r4
 800aace:	4641      	mov	r1, r8
 800aad0:	4648      	mov	r0, r9
 800aad2:	f7ff fd8b 	bl	800a5ec <tcp_create_segment>
 800aad6:	4680      	mov	r8, r0
 800aad8:	2800      	cmp	r0, #0
 800aada:	d03e      	beq.n	800ab5a <tcp_write+0x35e>
    if (queue == NULL) {
 800aadc:	2f00      	cmp	r7, #0
 800aade:	d069      	beq.n	800abb4 <tcp_write+0x3b8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800aae0:	f1bb 0f00 	cmp.w	fp, #0
 800aae4:	d05e      	beq.n	800aba4 <tcp_write+0x3a8>
      prev_seg->next = seg;
 800aae6:	f8cb 8000 	str.w	r8, [fp]
    pos += seglen;
 800aaea:	442c      	add	r4, r5
 800aaec:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 800aaee:	46c3      	mov	fp, r8
  while (pos < len) {
 800aaf0:	4554      	cmp	r4, sl
 800aaf2:	d261      	bcs.n	800abb8 <tcp_write+0x3bc>
    u16_t left = len - pos;
 800aaf4:	ebaa 0504 	sub.w	r5, sl, r4
 800aaf8:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 800aafa:	9b05      	ldr	r3, [sp, #20]
 800aafc:	429d      	cmp	r5, r3
 800aafe:	bf28      	it	cs
 800ab00:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ab02:	9b06      	ldr	r3, [sp, #24]
 800ab04:	f013 0f01 	tst.w	r3, #1
 800ab08:	d19a      	bne.n	800aa40 <tcp_write+0x244>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ab0a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d0bb      	beq.n	800aa8a <tcp_write+0x28e>
 800ab12:	4b04      	ldr	r3, [pc, #16]	; (800ab24 <tcp_write+0x328>)
 800ab14:	f240 224b 	movw	r2, #587	; 0x24b
 800ab18:	490b      	ldr	r1, [pc, #44]	; (800ab48 <tcp_write+0x34c>)
 800ab1a:	4804      	ldr	r0, [pc, #16]	; (800ab2c <tcp_write+0x330>)
 800ab1c:	f001 fe79 	bl	800c812 <iprintf>
 800ab20:	e7b3      	b.n	800aa8a <tcp_write+0x28e>
 800ab22:	bf00      	nop
 800ab24:	08010a24 	.word	0x08010a24
 800ab28:	08010848 	.word	0x08010848
 800ab2c:	0800cd98 	.word	0x0800cd98
 800ab30:	080108b4 	.word	0x080108b4
 800ab34:	0801087c 	.word	0x0801087c
 800ab38:	08010894 	.word	0x08010894
 800ab3c:	080108d4 	.word	0x080108d4
 800ab40:	08010900 	.word	0x08010900
 800ab44:	08010930 	.word	0x08010930
 800ab48:	08010970 	.word	0x08010970
        pbuf_free(p2);
 800ab4c:	9807      	ldr	r0, [sp, #28]
 800ab4e:	f7fc fd91 	bl	8007674 <pbuf_free>
        goto memerr;
 800ab52:	e002      	b.n	800ab5a <tcp_write+0x35e>
      pbuf_free(p);
 800ab54:	4640      	mov	r0, r8
 800ab56:	f7fc fd8d 	bl	8007674 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800ab5a:	f899 301a 	ldrb.w	r3, [r9, #26]
 800ab5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab62:	f889 301a 	strb.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800ab66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab68:	b113      	cbz	r3, 800ab70 <tcp_write+0x374>
    pbuf_free(concat_p);
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fc fd82 	bl	8007674 <pbuf_free>
  if (queue != NULL) {
 800ab70:	b117      	cbz	r7, 800ab78 <tcp_write+0x37c>
    tcp_segs_free(queue);
 800ab72:	4638      	mov	r0, r7
 800ab74:	f7fd fa6f 	bl	8008056 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800ab78:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 80c6 	beq.w	800ad0e <tcp_write+0x512>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ab82:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f040 80c5 	bne.w	800ad16 <tcp_write+0x51a>
 800ab8c:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 80b1 	beq.w	800acf8 <tcp_write+0x4fc>
  return ERR_MEM;
 800ab96:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9a:	9309      	str	r3, [sp, #36]	; 0x24
}
 800ab9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab9e:	b011      	add	sp, #68	; 0x44
 800aba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800aba4:	4b5e      	ldr	r3, [pc, #376]	; (800ad20 <tcp_write+0x524>)
 800aba6:	f240 2285 	movw	r2, #645	; 0x285
 800abaa:	495e      	ldr	r1, [pc, #376]	; (800ad24 <tcp_write+0x528>)
 800abac:	485e      	ldr	r0, [pc, #376]	; (800ad28 <tcp_write+0x52c>)
 800abae:	f001 fe30 	bl	800c812 <iprintf>
 800abb2:	e798      	b.n	800aae6 <tcp_write+0x2ea>
      queue = seg;
 800abb4:	4607      	mov	r7, r0
 800abb6:	e798      	b.n	800aaea <tcp_write+0x2ee>
 800abb8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  if (oversize_used > 0) {
 800abbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abbe:	b1e3      	cbz	r3, 800abfa <tcp_write+0x3fe>
    for (p = last_unsent->p; p; p = p->next) {
 800abc0:	f8db 4004 	ldr.w	r4, [fp, #4]
 800abc4:	461d      	mov	r5, r3
 800abc6:	e000      	b.n	800abca <tcp_write+0x3ce>
 800abc8:	6824      	ldr	r4, [r4, #0]
 800abca:	b184      	cbz	r4, 800abee <tcp_write+0x3f2>
      p->tot_len += oversize_used;
 800abcc:	8923      	ldrh	r3, [r4, #8]
 800abce:	442b      	add	r3, r5
 800abd0:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d1f7      	bne.n	800abc8 <tcp_write+0x3cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800abd8:	6860      	ldr	r0, [r4, #4]
 800abda:	8963      	ldrh	r3, [r4, #10]
 800abdc:	462a      	mov	r2, r5
 800abde:	9908      	ldr	r1, [sp, #32]
 800abe0:	4418      	add	r0, r3
 800abe2:	f002 f83a 	bl	800cc5a <memcpy>
        p->len += oversize_used;
 800abe6:	8963      	ldrh	r3, [r4, #10]
 800abe8:	442b      	add	r3, r5
 800abea:	8163      	strh	r3, [r4, #10]
 800abec:	e7ec      	b.n	800abc8 <tcp_write+0x3cc>
    last_unsent->len += oversize_used;
 800abee:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800abf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abf4:	441a      	add	r2, r3
 800abf6:	f8ab 2008 	strh.w	r2, [fp, #8]
  pcb->unsent_oversize = oversize;
 800abfa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800abfe:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (concat_p != NULL) {
 800ac02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d03f      	beq.n	800ac88 <tcp_write+0x48c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ac08:	f1bb 0f00 	cmp.w	fp, #0
 800ac0c:	d034      	beq.n	800ac78 <tcp_write+0x47c>
    pbuf_cat(last_unsent->p, concat_p);
 800ac0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ac10:	4621      	mov	r1, r4
 800ac12:	f8db 0004 	ldr.w	r0, [fp, #4]
 800ac16:	f7fc ff19 	bl	8007a4c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ac1a:	8923      	ldrh	r3, [r4, #8]
 800ac1c:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 800ac20:	4413      	add	r3, r2
 800ac22:	f8ab 3008 	strh.w	r3, [fp, #8]
  if (last_unsent == NULL) {
 800ac26:	f1bb 0f00 	cmp.w	fp, #0
 800ac2a:	d056      	beq.n	800acda <tcp_write+0x4de>
    last_unsent->next = queue;
 800ac2c:	f8cb 7000 	str.w	r7, [fp]
  pcb->snd_lbb += len;
 800ac30:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 800ac34:	4453      	add	r3, sl
 800ac36:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
  pcb->snd_buf -= len;
 800ac3a:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
 800ac3e:	eba3 0a0a 	sub.w	sl, r3, sl
 800ac42:	f8a9 a060 	strh.w	sl, [r9, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800ac46:	f8a9 6062 	strh.w	r6, [r9, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800ac4a:	b11e      	cbz	r6, 800ac54 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ac4c:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d045      	beq.n	800ace0 <tcp_write+0x4e4>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800ac54:	f1b8 0f00 	cmp.w	r8, #0
 800ac58:	d0a0      	beq.n	800ab9c <tcp_write+0x3a0>
 800ac5a:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800ac5e:	2c00      	cmp	r4, #0
 800ac60:	d09c      	beq.n	800ab9c <tcp_write+0x3a0>
 800ac62:	9b06      	ldr	r3, [sp, #24]
 800ac64:	f013 0f02 	tst.w	r3, #2
 800ac68:	d198      	bne.n	800ab9c <tcp_write+0x3a0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ac6a:	89a5      	ldrh	r5, [r4, #12]
 800ac6c:	2008      	movs	r0, #8
 800ac6e:	f7fa fc8a 	bl	8005586 <lwip_htons>
 800ac72:	4328      	orrs	r0, r5
 800ac74:	81a0      	strh	r0, [r4, #12]
 800ac76:	e791      	b.n	800ab9c <tcp_write+0x3a0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ac78:	4b29      	ldr	r3, [pc, #164]	; (800ad20 <tcp_write+0x524>)
 800ac7a:	f240 22bb 	movw	r2, #699	; 0x2bb
 800ac7e:	492b      	ldr	r1, [pc, #172]	; (800ad2c <tcp_write+0x530>)
 800ac80:	4829      	ldr	r0, [pc, #164]	; (800ad28 <tcp_write+0x52c>)
 800ac82:	f001 fdc6 	bl	800c812 <iprintf>
 800ac86:	e7c2      	b.n	800ac0e <tcp_write+0x412>
  } else if (extendlen > 0) {
 800ac88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0cb      	beq.n	800ac26 <tcp_write+0x42a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ac8e:	f1bb 0f00 	cmp.w	fp, #0
 800ac92:	d006      	beq.n	800aca2 <tcp_write+0x4a6>
 800ac94:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ac98:	b11b      	cbz	r3, 800aca2 <tcp_write+0x4a6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ac9a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ac9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aca0:	e00b      	b.n	800acba <tcp_write+0x4be>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800aca2:	4b1f      	ldr	r3, [pc, #124]	; (800ad20 <tcp_write+0x524>)
 800aca4:	f240 22c1 	movw	r2, #705	; 0x2c1
 800aca8:	4921      	ldr	r1, [pc, #132]	; (800ad30 <tcp_write+0x534>)
 800acaa:	481f      	ldr	r0, [pc, #124]	; (800ad28 <tcp_write+0x52c>)
 800acac:	f001 fdb1 	bl	800c812 <iprintf>
 800acb0:	e7f3      	b.n	800ac9a <tcp_write+0x49e>
      p->tot_len += extendlen;
 800acb2:	891a      	ldrh	r2, [r3, #8]
 800acb4:	4402      	add	r2, r0
 800acb6:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800acb8:	460b      	mov	r3, r1
 800acba:	6819      	ldr	r1, [r3, #0]
 800acbc:	2900      	cmp	r1, #0
 800acbe:	d1f8      	bne.n	800acb2 <tcp_write+0x4b6>
    p->tot_len += extendlen;
 800acc0:	891a      	ldrh	r2, [r3, #8]
 800acc2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800acc4:	4402      	add	r2, r0
 800acc6:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800acc8:	895a      	ldrh	r2, [r3, #10]
 800acca:	4402      	add	r2, r0
 800accc:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800acce:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800acd2:	4403      	add	r3, r0
 800acd4:	f8ab 3008 	strh.w	r3, [fp, #8]
 800acd8:	e7a5      	b.n	800ac26 <tcp_write+0x42a>
    pcb->unsent = queue;
 800acda:	f8c9 7068 	str.w	r7, [r9, #104]	; 0x68
 800acde:	e7a7      	b.n	800ac30 <tcp_write+0x434>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ace0:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1b5      	bne.n	800ac54 <tcp_write+0x458>
 800ace8:	4b0d      	ldr	r3, [pc, #52]	; (800ad20 <tcp_write+0x524>)
 800acea:	f240 22ed 	movw	r2, #749	; 0x2ed
 800acee:	4911      	ldr	r1, [pc, #68]	; (800ad34 <tcp_write+0x538>)
 800acf0:	480d      	ldr	r0, [pc, #52]	; (800ad28 <tcp_write+0x52c>)
 800acf2:	f001 fd8e 	bl	800c812 <iprintf>
 800acf6:	e7ad      	b.n	800ac54 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800acf8:	4b09      	ldr	r3, [pc, #36]	; (800ad20 <tcp_write+0x524>)
 800acfa:	f240 3202 	movw	r2, #770	; 0x302
 800acfe:	490d      	ldr	r1, [pc, #52]	; (800ad34 <tcp_write+0x538>)
 800ad00:	4809      	ldr	r0, [pc, #36]	; (800ad28 <tcp_write+0x52c>)
 800ad02:	f001 fd86 	bl	800c812 <iprintf>
  return ERR_MEM;
 800ad06:	f04f 33ff 	mov.w	r3, #4294967295
 800ad0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0c:	e746      	b.n	800ab9c <tcp_write+0x3a0>
 800ad0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad12:	9309      	str	r3, [sp, #36]	; 0x24
 800ad14:	e742      	b.n	800ab9c <tcp_write+0x3a0>
 800ad16:	f04f 33ff 	mov.w	r3, #4294967295
 800ad1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad1c:	e73e      	b.n	800ab9c <tcp_write+0x3a0>
 800ad1e:	bf00      	nop
 800ad20:	08010a24 	.word	0x08010a24
 800ad24:	08010980 	.word	0x08010980
 800ad28:	0800cd98 	.word	0x0800cd98
 800ad2c:	08010994 	.word	0x08010994
 800ad30:	080109cc 	.word	0x080109cc
 800ad34:	08010a04 	.word	0x08010a04

0800ad38 <tcp_enqueue_flags>:
{
 800ad38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad3c:	b083      	sub	sp, #12
 800ad3e:	4604      	mov	r4, r0
 800ad40:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ad42:	f011 0703 	ands.w	r7, r1, #3
 800ad46:	d030      	beq.n	800adaa <tcp_enqueue_flags+0x72>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800ad48:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ad4c:	2b0a      	cmp	r3, #10
 800ad4e:	d902      	bls.n	800ad56 <tcp_enqueue_flags+0x1e>
 800ad50:	f015 0f01 	tst.w	r5, #1
 800ad54:	d031      	beq.n	800adba <tcp_enqueue_flags+0x82>
  if (flags & TCP_SYN) {
 800ad56:	f015 0f02 	tst.w	r5, #2
 800ad5a:	d135      	bne.n	800adc8 <tcp_enqueue_flags+0x90>
  u8_t optflags = 0;
 800ad5c:	f04f 0900 	mov.w	r9, #0
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ad60:	f1b9 0f00 	cmp.w	r9, #0
 800ad64:	d033      	beq.n	800adce <tcp_enqueue_flags+0x96>
 800ad66:	2604      	movs	r6, #4
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ad68:	b2b6      	uxth	r6, r6
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	4631      	mov	r1, r6
 800ad6e:	4610      	mov	r0, r2
 800ad70:	f7fc fcec 	bl	800774c <pbuf_alloc>
 800ad74:	4680      	mov	r8, r0
 800ad76:	b360      	cbz	r0, 800add2 <tcp_enqueue_flags+0x9a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ad78:	8943      	ldrh	r3, [r0, #10]
 800ad7a:	429e      	cmp	r6, r3
 800ad7c:	d830      	bhi.n	800ade0 <tcp_enqueue_flags+0xa8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ad7e:	f8cd 9000 	str.w	r9, [sp]
 800ad82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad84:	462a      	mov	r2, r5
 800ad86:	4641      	mov	r1, r8
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f7ff fc2f 	bl	800a5ec <tcp_create_segment>
 800ad8e:	4606      	mov	r6, r0
 800ad90:	b370      	cbz	r0, 800adf0 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ad92:	68c3      	ldr	r3, [r0, #12]
 800ad94:	f013 0f03 	tst.w	r3, #3
 800ad98:	d131      	bne.n	800adfe <tcp_enqueue_flags+0xc6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ad9a:	8933      	ldrh	r3, [r6, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d136      	bne.n	800ae0e <tcp_enqueue_flags+0xd6>
  if (pcb->unsent == NULL) {
 800ada0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800ada2:	2a00      	cmp	r2, #0
 800ada4:	d13c      	bne.n	800ae20 <tcp_enqueue_flags+0xe8>
    pcb->unsent = seg;
 800ada6:	66a6      	str	r6, [r4, #104]	; 0x68
 800ada8:	e03e      	b.n	800ae28 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800adaa:	4b36      	ldr	r3, [pc, #216]	; (800ae84 <tcp_enqueue_flags+0x14c>)
 800adac:	f240 321b 	movw	r2, #795	; 0x31b
 800adb0:	4935      	ldr	r1, [pc, #212]	; (800ae88 <tcp_enqueue_flags+0x150>)
 800adb2:	4836      	ldr	r0, [pc, #216]	; (800ae8c <tcp_enqueue_flags+0x154>)
 800adb4:	f001 fd2d 	bl	800c812 <iprintf>
 800adb8:	e7c6      	b.n	800ad48 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 800adba:	7ea3      	ldrb	r3, [r4, #26]
 800adbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adc0:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800adc2:	f04f 30ff 	mov.w	r0, #4294967295
 800adc6:	e04a      	b.n	800ae5e <tcp_enqueue_flags+0x126>
    optflags = TF_SEG_OPTS_MSS;
 800adc8:	f04f 0901 	mov.w	r9, #1
 800adcc:	e7c8      	b.n	800ad60 <tcp_enqueue_flags+0x28>
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800adce:	2600      	movs	r6, #0
 800add0:	e7ca      	b.n	800ad68 <tcp_enqueue_flags+0x30>
    pcb->flags |= TF_NAGLEMEMERR;
 800add2:	7ea3      	ldrb	r3, [r4, #26]
 800add4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800add8:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800adda:	f04f 30ff 	mov.w	r0, #4294967295
 800adde:	e03e      	b.n	800ae5e <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ade0:	4b28      	ldr	r3, [pc, #160]	; (800ae84 <tcp_enqueue_flags+0x14c>)
 800ade2:	f240 3241 	movw	r2, #833	; 0x341
 800ade6:	492a      	ldr	r1, [pc, #168]	; (800ae90 <tcp_enqueue_flags+0x158>)
 800ade8:	4828      	ldr	r0, [pc, #160]	; (800ae8c <tcp_enqueue_flags+0x154>)
 800adea:	f001 fd12 	bl	800c812 <iprintf>
 800adee:	e7c6      	b.n	800ad7e <tcp_enqueue_flags+0x46>
    pcb->flags |= TF_NAGLEMEMERR;
 800adf0:	7ea3      	ldrb	r3, [r4, #26]
 800adf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adf6:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295
 800adfc:	e02f      	b.n	800ae5e <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800adfe:	4b21      	ldr	r3, [pc, #132]	; (800ae84 <tcp_enqueue_flags+0x14c>)
 800ae00:	f240 3249 	movw	r2, #841	; 0x349
 800ae04:	4923      	ldr	r1, [pc, #140]	; (800ae94 <tcp_enqueue_flags+0x15c>)
 800ae06:	4821      	ldr	r0, [pc, #132]	; (800ae8c <tcp_enqueue_flags+0x154>)
 800ae08:	f001 fd03 	bl	800c812 <iprintf>
 800ae0c:	e7c5      	b.n	800ad9a <tcp_enqueue_flags+0x62>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ae0e:	4b1d      	ldr	r3, [pc, #116]	; (800ae84 <tcp_enqueue_flags+0x14c>)
 800ae10:	f240 324a 	movw	r2, #842	; 0x34a
 800ae14:	4920      	ldr	r1, [pc, #128]	; (800ae98 <tcp_enqueue_flags+0x160>)
 800ae16:	481d      	ldr	r0, [pc, #116]	; (800ae8c <tcp_enqueue_flags+0x154>)
 800ae18:	f001 fcfb 	bl	800c812 <iprintf>
 800ae1c:	e7c0      	b.n	800ada0 <tcp_enqueue_flags+0x68>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ae1e:	461a      	mov	r2, r3
 800ae20:	6813      	ldr	r3, [r2, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1fb      	bne.n	800ae1e <tcp_enqueue_flags+0xe6>
    useg->next = seg;
 800ae26:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ae2e:	b117      	cbz	r7, 800ae36 <tcp_enqueue_flags+0xfe>
    pcb->snd_lbb++;
 800ae30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae32:	3301      	adds	r3, #1
 800ae34:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800ae36:	f015 0f01 	tst.w	r5, #1
 800ae3a:	d003      	beq.n	800ae44 <tcp_enqueue_flags+0x10c>
    pcb->flags |= TF_FIN;
 800ae3c:	7ea3      	ldrb	r3, [r4, #26]
 800ae3e:	f043 0320 	orr.w	r3, r3, #32
 800ae42:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ae44:	6870      	ldr	r0, [r6, #4]
 800ae46:	f7fc fddb 	bl	8007a00 <pbuf_clen>
 800ae4a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ae4e:	4418      	add	r0, r3
 800ae50:	b280      	uxth	r0, r0
 800ae52:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800ae56:	b190      	cbz	r0, 800ae7e <tcp_enqueue_flags+0x146>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ae58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ae5a:	b11b      	cbz	r3, 800ae64 <tcp_enqueue_flags+0x12c>
  return ERR_OK;
 800ae5c:	2000      	movs	r0, #0
}
 800ae5e:	b003      	add	sp, #12
 800ae60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ae64:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ae66:	b10b      	cbz	r3, 800ae6c <tcp_enqueue_flags+0x134>
  return ERR_OK;
 800ae68:	2000      	movs	r0, #0
 800ae6a:	e7f8      	b.n	800ae5e <tcp_enqueue_flags+0x126>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ae6c:	4b05      	ldr	r3, [pc, #20]	; (800ae84 <tcp_enqueue_flags+0x14c>)
 800ae6e:	f240 326d 	movw	r2, #877	; 0x36d
 800ae72:	490a      	ldr	r1, [pc, #40]	; (800ae9c <tcp_enqueue_flags+0x164>)
 800ae74:	4805      	ldr	r0, [pc, #20]	; (800ae8c <tcp_enqueue_flags+0x154>)
 800ae76:	f001 fccc 	bl	800c812 <iprintf>
  return ERR_OK;
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	e7ef      	b.n	800ae5e <tcp_enqueue_flags+0x126>
 800ae7e:	2000      	movs	r0, #0
 800ae80:	e7ed      	b.n	800ae5e <tcp_enqueue_flags+0x126>
 800ae82:	bf00      	nop
 800ae84:	08010a24 	.word	0x08010a24
 800ae88:	080106c4 	.word	0x080106c4
 800ae8c:	0800cd98 	.word	0x0800cd98
 800ae90:	0801071c 	.word	0x0801071c
 800ae94:	08010758 	.word	0x08010758
 800ae98:	08010770 	.word	0x08010770
 800ae9c:	0801079c 	.word	0x0801079c

0800aea0 <tcp_send_fin>:
{
 800aea0:	b570      	push	{r4, r5, r6, lr}
 800aea2:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800aea4:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800aea6:	b90c      	cbnz	r4, 800aeac <tcp_send_fin+0xc>
 800aea8:	e00a      	b.n	800aec0 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
 800aeaa:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1fb      	bne.n	800aeaa <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aeb2:	68e3      	ldr	r3, [r4, #12]
 800aeb4:	8998      	ldrh	r0, [r3, #12]
 800aeb6:	f7fa fb66 	bl	8005586 <lwip_htons>
 800aeba:	f010 0f07 	tst.w	r0, #7
 800aebe:	d004      	beq.n	800aeca <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800aec0:	2101      	movs	r1, #1
 800aec2:	4628      	mov	r0, r5
 800aec4:	f7ff ff38 	bl	800ad38 <tcp_enqueue_flags>
}
 800aec8:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800aeca:	68e6      	ldr	r6, [r4, #12]
 800aecc:	89b4      	ldrh	r4, [r6, #12]
 800aece:	2001      	movs	r0, #1
 800aed0:	f7fa fb59 	bl	8005586 <lwip_htons>
 800aed4:	4320      	orrs	r0, r4
 800aed6:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 800aed8:	7eab      	ldrb	r3, [r5, #26]
 800aeda:	f043 0320 	orr.w	r3, r3, #32
 800aede:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 800aee0:	2000      	movs	r0, #0
 800aee2:	bd70      	pop	{r4, r5, r6, pc}

0800aee4 <tcp_send_empty_ack>:
{
 800aee4:	b570      	push	{r4, r5, r6, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800aeea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800aeec:	f7fa fb4e 	bl	800558c <lwip_htonl>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2200      	movs	r2, #0
 800aef4:	4611      	mov	r1, r2
 800aef6:	4620      	mov	r0, r4
 800aef8:	f7ff fbd8 	bl	800a6ac <tcp_output_alloc_header>
  if (p == NULL) {
 800aefc:	b1e0      	cbz	r0, 800af38 <tcp_send_empty_ack+0x54>
 800aefe:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800af00:	1d25      	adds	r5, r4, #4
 800af02:	4628      	mov	r0, r5
 800af04:	f7fb f8e8 	bl	80060d8 <ip4_route>
  if (netif == NULL) {
 800af08:	b1e8      	cbz	r0, 800af46 <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800af0a:	7aa3      	ldrb	r3, [r4, #10]
 800af0c:	7a61      	ldrb	r1, [r4, #9]
 800af0e:	9002      	str	r0, [sp, #8]
 800af10:	2206      	movs	r2, #6
 800af12:	9201      	str	r2, [sp, #4]
 800af14:	9100      	str	r1, [sp, #0]
 800af16:	462a      	mov	r2, r5
 800af18:	4621      	mov	r1, r4
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7fb fa82 	bl	8006424 <ip4_output_if>
 800af20:	4605      	mov	r5, r0
  pbuf_free(p);
 800af22:	4630      	mov	r0, r6
 800af24:	f7fc fba6 	bl	8007674 <pbuf_free>
  if (err != ERR_OK) {
 800af28:	b985      	cbnz	r5, 800af4c <tcp_send_empty_ack+0x68>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800af2a:	7ea3      	ldrb	r3, [r4, #26]
 800af2c:	f023 0303 	bic.w	r3, r3, #3
 800af30:	76a3      	strb	r3, [r4, #26]
}
 800af32:	4628      	mov	r0, r5
 800af34:	b004      	add	sp, #16
 800af36:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800af38:	7ea3      	ldrb	r3, [r4, #26]
 800af3a:	f043 0303 	orr.w	r3, r3, #3
 800af3e:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 800af40:	f06f 0501 	mvn.w	r5, #1
 800af44:	e7f5      	b.n	800af32 <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 800af46:	f06f 0503 	mvn.w	r5, #3
 800af4a:	e7ea      	b.n	800af22 <tcp_send_empty_ack+0x3e>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800af4c:	7ea3      	ldrb	r3, [r4, #26]
 800af4e:	f043 0303 	orr.w	r3, r3, #3
 800af52:	76a3      	strb	r3, [r4, #26]
 800af54:	e7ed      	b.n	800af32 <tcp_send_empty_ack+0x4e>
	...

0800af58 <tcp_output>:
{
 800af58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af5c:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800af5e:	7d03      	ldrb	r3, [r0, #20]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d01e      	beq.n	800afa2 <tcp_output+0x4a>
  if (tcp_input_pcb == pcb) {
 800af64:	4ba5      	ldr	r3, [pc, #660]	; (800b1fc <tcp_output+0x2a4>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	429d      	cmp	r5, r3
 800af6a:	f000 813e 	beq.w	800b1ea <tcp_output+0x292>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800af6e:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800af72:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 800af76:	42bb      	cmp	r3, r7
 800af78:	d200      	bcs.n	800af7c <tcp_output+0x24>
 800af7a:	461f      	mov	r7, r3
  seg = pcb->unsent;
 800af7c:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 800af7e:	7eab      	ldrb	r3, [r5, #26]
 800af80:	f013 0f02 	tst.w	r3, #2
 800af84:	d00a      	beq.n	800af9c <tcp_output+0x44>
 800af86:	b1a4      	cbz	r4, 800afb2 <tcp_output+0x5a>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800af88:	68e3      	ldr	r3, [r4, #12]
 800af8a:	6858      	ldr	r0, [r3, #4]
 800af8c:	f7fa fafe 	bl	800558c <lwip_htonl>
 800af90:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800af92:	1ac3      	subs	r3, r0, r3
 800af94:	8920      	ldrh	r0, [r4, #8]
 800af96:	4403      	add	r3, r0
     (seg == NULL ||
 800af98:	429f      	cmp	r7, r3
 800af9a:	d30a      	bcc.n	800afb2 <tcp_output+0x5a>
  useg = pcb->unacked;
 800af9c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 800af9e:	b976      	cbnz	r6, 800afbe <tcp_output+0x66>
 800afa0:	e010      	b.n	800afc4 <tcp_output+0x6c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800afa2:	4b97      	ldr	r3, [pc, #604]	; (800b200 <tcp_output+0x2a8>)
 800afa4:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800afa8:	4996      	ldr	r1, [pc, #600]	; (800b204 <tcp_output+0x2ac>)
 800afaa:	4897      	ldr	r0, [pc, #604]	; (800b208 <tcp_output+0x2b0>)
 800afac:	f001 fc31 	bl	800c812 <iprintf>
 800afb0:	e7d8      	b.n	800af64 <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 800afb2:	4628      	mov	r0, r5
 800afb4:	f7ff ff96 	bl	800aee4 <tcp_send_empty_ack>
 800afb8:	4603      	mov	r3, r0
 800afba:	e03f      	b.n	800b03c <tcp_output+0xe4>
    for (; useg->next != NULL; useg = useg->next);
 800afbc:	461e      	mov	r6, r3
 800afbe:	6833      	ldr	r3, [r6, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1fb      	bne.n	800afbc <tcp_output+0x64>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800afc4:	1d28      	adds	r0, r5, #4
 800afc6:	f7fb f887 	bl	80060d8 <ip4_route>
  if (netif == NULL) {
 800afca:	4680      	mov	r8, r0
 800afcc:	2800      	cmp	r0, #0
 800afce:	f000 810e 	beq.w	800b1ee <tcp_output+0x296>
  if (ip_addr_isany(&pcb->local_ip)) {
 800afd2:	b10d      	cbz	r5, 800afd8 <tcp_output+0x80>
 800afd4:	682b      	ldr	r3, [r5, #0]
 800afd6:	b933      	cbnz	r3, 800afe6 <tcp_output+0x8e>
    if (local_ip == NULL) {
 800afd8:	f118 0f04 	cmn.w	r8, #4
 800afdc:	f000 810a 	beq.w	800b1f4 <tcp_output+0x29c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800afe0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800afe4:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 800afe6:	2c00      	cmp	r4, #0
 800afe8:	f000 80a2 	beq.w	800b130 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800afec:	68e3      	ldr	r3, [r4, #12]
 800afee:	6858      	ldr	r0, [r3, #4]
 800aff0:	f7fa facc 	bl	800558c <lwip_htonl>
 800aff4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800aff6:	1ac3      	subs	r3, r0, r3
 800aff8:	8920      	ldrh	r0, [r4, #8]
 800affa:	4403      	add	r3, r0
  if (seg != NULL &&
 800affc:	429f      	cmp	r7, r3
 800affe:	f080 8097 	bcs.w	800b130 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800b002:	2f00      	cmp	r7, #0
 800b004:	f000 8094 	beq.w	800b130 <tcp_output+0x1d8>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800b008:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800b00c:	429f      	cmp	r7, r3
 800b00e:	f040 808f 	bne.w	800b130 <tcp_output+0x1d8>
 800b012:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800b014:	2b00      	cmp	r3, #0
 800b016:	f040 808b 	bne.w	800b130 <tcp_output+0x1d8>
    if (pcb->persist_backoff == 0) {
 800b01a:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 800b01e:	b923      	cbnz	r3, 800b02a <tcp_output+0xd2>
      pcb->persist_cnt = 0;
 800b020:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 800b024:	2301      	movs	r3, #1
 800b026:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
  if (pcb->unsent == NULL) {
 800b02a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 80d9 	beq.w	800b1e4 <tcp_output+0x28c>
  pcb->flags &= ~TF_NAGLEMEMERR;
 800b032:	7eab      	ldrb	r3, [r5, #26]
 800b034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b038:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("RST not expected here!",
 800b042:	4b6f      	ldr	r3, [pc, #444]	; (800b200 <tcp_output+0x2a8>)
 800b044:	f240 4246 	movw	r2, #1094	; 0x446
 800b048:	4970      	ldr	r1, [pc, #448]	; (800b20c <tcp_output+0x2b4>)
 800b04a:	486f      	ldr	r0, [pc, #444]	; (800b208 <tcp_output+0x2b0>)
 800b04c:	f001 fbe1 	bl	800c812 <iprintf>
 800b050:	e084      	b.n	800b15c <tcp_output+0x204>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b052:	891a      	ldrh	r2, [r3, #8]
 800b054:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800b056:	429a      	cmp	r2, r3
 800b058:	f080 8091 	bcs.w	800b17e <tcp_output+0x226>
 800b05c:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800b060:	2b00      	cmp	r3, #0
 800b062:	f000 808e 	beq.w	800b182 <tcp_output+0x22a>
 800b066:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800b06a:	2b0a      	cmp	r3, #10
 800b06c:	f240 808b 	bls.w	800b186 <tcp_output+0x22e>
 800b070:	2301      	movs	r3, #1
 800b072:	e002      	b.n	800b07a <tcp_output+0x122>
 800b074:	2301      	movs	r3, #1
 800b076:	e000      	b.n	800b07a <tcp_output+0x122>
 800b078:	2301      	movs	r3, #1
 800b07a:	b91b      	cbnz	r3, 800b084 <tcp_output+0x12c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b07c:	7eab      	ldrb	r3, [r5, #26]
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b07e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800b082:	d0d2      	beq.n	800b02a <tcp_output+0xd2>
    if (pcb->state != SYN_SENT) {
 800b084:	7d2b      	ldrb	r3, [r5, #20]
 800b086:	2b02      	cmp	r3, #2
 800b088:	d00a      	beq.n	800b0a0 <tcp_output+0x148>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b08a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800b08e:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 800b092:	2010      	movs	r0, #16
 800b094:	f7fa fa77 	bl	8005586 <lwip_htons>
 800b098:	ea49 0000 	orr.w	r0, r9, r0
 800b09c:	f8aa 000c 	strh.w	r0, [sl, #12]
    err = tcp_output_segment(seg, pcb, netif);
 800b0a0:	4642      	mov	r2, r8
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f7ff fb4b 	bl	800a740 <tcp_output_segment>
    if (err != ERR_OK) {
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d16c      	bne.n	800b18a <tcp_output+0x232>
    pcb->unsent = seg->next;
 800b0b0:	6823      	ldr	r3, [r4, #0]
 800b0b2:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800b0b4:	7d2b      	ldrb	r3, [r5, #20]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d003      	beq.n	800b0c2 <tcp_output+0x16a>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800b0ba:	7eab      	ldrb	r3, [r5, #26]
 800b0bc:	f023 0303 	bic.w	r3, r3, #3
 800b0c0:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b0c2:	68e3      	ldr	r3, [r4, #12]
 800b0c4:	6858      	ldr	r0, [r3, #4]
 800b0c6:	f7fa fa61 	bl	800558c <lwip_htonl>
 800b0ca:	4681      	mov	r9, r0
 800b0cc:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 800b0d0:	68e3      	ldr	r3, [r4, #12]
 800b0d2:	8998      	ldrh	r0, [r3, #12]
 800b0d4:	f7fa fa57 	bl	8005586 <lwip_htons>
 800b0d8:	f010 0f03 	tst.w	r0, #3
 800b0dc:	d05a      	beq.n	800b194 <tcp_output+0x23c>
 800b0de:	2001      	movs	r0, #1
 800b0e0:	4450      	add	r0, sl
 800b0e2:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b0e4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b0e6:	1a1b      	subs	r3, r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	db55      	blt.n	800b198 <tcp_output+0x240>
    if (TCP_TCPLEN(seg) > 0) {
 800b0ec:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800b0f0:	68e3      	ldr	r3, [r4, #12]
 800b0f2:	8998      	ldrh	r0, [r3, #12]
 800b0f4:	f7fa fa47 	bl	8005586 <lwip_htons>
 800b0f8:	f010 0f03 	tst.w	r0, #3
 800b0fc:	d04e      	beq.n	800b19c <tcp_output+0x244>
 800b0fe:	2301      	movs	r3, #1
 800b100:	eb13 0f09 	cmn.w	r3, r9
 800b104:	d06a      	beq.n	800b1dc <tcp_output+0x284>
      seg->next = NULL;
 800b106:	2300      	movs	r3, #0
 800b108:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800b10a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d047      	beq.n	800b1a0 <tcp_output+0x248>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b110:	68e3      	ldr	r3, [r4, #12]
 800b112:	6858      	ldr	r0, [r3, #4]
 800b114:	f7fa fa3a 	bl	800558c <lwip_htonl>
 800b118:	4681      	mov	r9, r0
 800b11a:	68f3      	ldr	r3, [r6, #12]
 800b11c:	6858      	ldr	r0, [r3, #4]
 800b11e:	f7fa fa35 	bl	800558c <lwip_htonl>
 800b122:	eba9 0000 	sub.w	r0, r9, r0
 800b126:	2800      	cmp	r0, #0
 800b128:	db3d      	blt.n	800b1a6 <tcp_output+0x24e>
          useg->next = seg;
 800b12a:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 800b12c:	4626      	mov	r6, r4
    seg = pcb->unsent;
 800b12e:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 800b130:	2c00      	cmp	r4, #0
 800b132:	f43f af7a 	beq.w	800b02a <tcp_output+0xd2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b136:	68e3      	ldr	r3, [r4, #12]
 800b138:	6858      	ldr	r0, [r3, #4]
 800b13a:	f7fa fa27 	bl	800558c <lwip_htonl>
 800b13e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b140:	1ac0      	subs	r0, r0, r3
 800b142:	8923      	ldrh	r3, [r4, #8]
 800b144:	4418      	add	r0, r3
  while (seg != NULL &&
 800b146:	4287      	cmp	r7, r0
 800b148:	f4ff af6f 	bcc.w	800b02a <tcp_output+0xd2>
    LWIP_ASSERT("RST not expected here!",
 800b14c:	68e3      	ldr	r3, [r4, #12]
 800b14e:	8998      	ldrh	r0, [r3, #12]
 800b150:	f7fa fa19 	bl	8005586 <lwip_htons>
 800b154:	f010 0f04 	tst.w	r0, #4
 800b158:	f47f af73 	bne.w	800b042 <tcp_output+0xea>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b15c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d088      	beq.n	800b074 <tcp_output+0x11c>
 800b162:	7eab      	ldrb	r3, [r5, #26]
 800b164:	f013 0f44 	tst.w	r3, #68	; 0x44
 800b168:	d186      	bne.n	800b078 <tcp_output+0x120>
 800b16a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f43f af75 	beq.w	800b05c <tcp_output+0x104>
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	2a00      	cmp	r2, #0
 800b176:	f43f af6c 	beq.w	800b052 <tcp_output+0xfa>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e77d      	b.n	800b07a <tcp_output+0x122>
 800b17e:	2301      	movs	r3, #1
 800b180:	e77b      	b.n	800b07a <tcp_output+0x122>
 800b182:	2301      	movs	r3, #1
 800b184:	e779      	b.n	800b07a <tcp_output+0x122>
 800b186:	2300      	movs	r3, #0
 800b188:	e777      	b.n	800b07a <tcp_output+0x122>
      pcb->flags |= TF_NAGLEMEMERR;
 800b18a:	7eaa      	ldrb	r2, [r5, #26]
 800b18c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b190:	76aa      	strb	r2, [r5, #26]
      return err;
 800b192:	e753      	b.n	800b03c <tcp_output+0xe4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b194:	2000      	movs	r0, #0
 800b196:	e7a3      	b.n	800b0e0 <tcp_output+0x188>
      pcb->snd_nxt = snd_nxt;
 800b198:	64e8      	str	r0, [r5, #76]	; 0x4c
 800b19a:	e7a7      	b.n	800b0ec <tcp_output+0x194>
    if (TCP_TCPLEN(seg) > 0) {
 800b19c:	2300      	movs	r3, #0
 800b19e:	e7af      	b.n	800b100 <tcp_output+0x1a8>
        pcb->unacked = seg;
 800b1a0:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 800b1a2:	4626      	mov	r6, r4
 800b1a4:	e7c3      	b.n	800b12e <tcp_output+0x1d6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b1a6:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 800b1aa:	e001      	b.n	800b1b0 <tcp_output+0x258>
              cur_seg = &((*cur_seg)->next );
 800b1ac:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 800b1b0:	f8da 3000 	ldr.w	r3, [sl]
 800b1b4:	b163      	cbz	r3, 800b1d0 <tcp_output+0x278>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	6858      	ldr	r0, [r3, #4]
 800b1ba:	f7fa f9e7 	bl	800558c <lwip_htonl>
 800b1be:	4681      	mov	r9, r0
 800b1c0:	68e3      	ldr	r3, [r4, #12]
 800b1c2:	6858      	ldr	r0, [r3, #4]
 800b1c4:	f7fa f9e2 	bl	800558c <lwip_htonl>
 800b1c8:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	dbed      	blt.n	800b1ac <tcp_output+0x254>
          seg->next = (*cur_seg);
 800b1d0:	f8da 3000 	ldr.w	r3, [sl]
 800b1d4:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800b1d6:	f8ca 4000 	str.w	r4, [sl]
 800b1da:	e7a8      	b.n	800b12e <tcp_output+0x1d6>
      tcp_seg_free(seg);
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f7fc ff2d 	bl	800803c <tcp_seg_free>
 800b1e2:	e7a4      	b.n	800b12e <tcp_output+0x1d6>
    pcb->unsent_oversize = 0;
 800b1e4:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 800b1e8:	e723      	b.n	800b032 <tcp_output+0xda>
    return ERR_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	e726      	b.n	800b03c <tcp_output+0xe4>
    return ERR_RTE;
 800b1ee:	f06f 0303 	mvn.w	r3, #3
 800b1f2:	e723      	b.n	800b03c <tcp_output+0xe4>
      return ERR_RTE;
 800b1f4:	f06f 0303 	mvn.w	r3, #3
 800b1f8:	e720      	b.n	800b03c <tcp_output+0xe4>
 800b1fa:	bf00      	nop
 800b1fc:	200088b0 	.word	0x200088b0
 800b200:	08010a24 	.word	0x08010a24
 800b204:	080107c4 	.word	0x080107c4
 800b208:	0800cd98 	.word	0x0800cd98
 800b20c:	080107ec 	.word	0x080107ec

0800b210 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800b210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b214:	b085      	sub	sp, #20
 800b216:	4680      	mov	r8, r0
 800b218:	460f      	mov	r7, r1
 800b21a:	4691      	mov	r9, r2
 800b21c:	461e      	mov	r6, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800b21e:	2200      	movs	r2, #0
 800b220:	2114      	movs	r1, #20
 800b222:	2001      	movs	r0, #1
 800b224:	f7fc fa92 	bl	800774c <pbuf_alloc>
  if (p == NULL) {
 800b228:	b3a8      	cbz	r0, 800b296 <tcp_rst+0x86>
 800b22a:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b22c:	8943      	ldrh	r3, [r0, #10]
 800b22e:	2b13      	cmp	r3, #19
 800b230:	d934      	bls.n	800b29c <tcp_rst+0x8c>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800b232:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800b234:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 800b238:	f7fa f9a5 	bl	8005586 <lwip_htons>
 800b23c:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800b23e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800b242:	f7fa f9a0 	bl	8005586 <lwip_htons>
 800b246:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800b248:	4640      	mov	r0, r8
 800b24a:	f7fa f99f 	bl	800558c <lwip_htonl>
 800b24e:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800b250:	4638      	mov	r0, r7
 800b252:	f7fa f99b 	bl	800558c <lwip_htonl>
 800b256:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800b258:	f245 0014 	movw	r0, #20500	; 0x5014
 800b25c:	f7fa f993 	bl	8005586 <lwip_htons>
 800b260:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800b262:	2300      	movs	r3, #0
 800b264:	2210      	movs	r2, #16
 800b266:	73a2      	strb	r2, [r4, #14]
 800b268:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800b26a:	7423      	strb	r3, [r4, #16]
 800b26c:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 800b26e:	74a3      	strb	r3, [r4, #18]
 800b270:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800b272:	4630      	mov	r0, r6
 800b274:	f7fa ff30 	bl	80060d8 <ip4_route>
  if (netif != NULL) {
 800b278:	b150      	cbz	r0, 800b290 <tcp_rst+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800b27a:	9002      	str	r0, [sp, #8]
 800b27c:	2306      	movs	r3, #6
 800b27e:	9301      	str	r3, [sp, #4]
 800b280:	2300      	movs	r3, #0
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	23ff      	movs	r3, #255	; 0xff
 800b286:	4632      	mov	r2, r6
 800b288:	4649      	mov	r1, r9
 800b28a:	4628      	mov	r0, r5
 800b28c:	f7fb f8ca 	bl	8006424 <ip4_output_if>
  }
  pbuf_free(p);
 800b290:	4628      	mov	r0, r5
 800b292:	f7fc f9ef 	bl	8007674 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b296:	b005      	add	sp, #20
 800b298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b29c:	4b03      	ldr	r3, [pc, #12]	; (800b2ac <tcp_rst+0x9c>)
 800b29e:	f240 524d 	movw	r2, #1357	; 0x54d
 800b2a2:	4903      	ldr	r1, [pc, #12]	; (800b2b0 <tcp_rst+0xa0>)
 800b2a4:	4803      	ldr	r0, [pc, #12]	; (800b2b4 <tcp_rst+0xa4>)
 800b2a6:	f001 fab4 	bl	800c812 <iprintf>
 800b2aa:	e7c2      	b.n	800b232 <tcp_rst+0x22>
 800b2ac:	08010a24 	.word	0x08010a24
 800b2b0:	08010804 	.word	0x08010804
 800b2b4:	0800cd98 	.word	0x0800cd98

0800b2b8 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800b2b8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800b2ba:	b10a      	cbz	r2, 800b2c0 <tcp_rexmit_rto+0x8>
{
 800b2bc:	b508      	push	{r3, lr}
 800b2be:	e001      	b.n	800b2c4 <tcp_rexmit_rto+0xc>
 800b2c0:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	6813      	ldr	r3, [r2, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1fb      	bne.n	800b2c2 <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b2ca:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800b2cc:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b2ce:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b2d0:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b2d6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800b2da:	2bff      	cmp	r3, #255	; 0xff
 800b2dc:	d002      	beq.n	800b2e4 <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
 800b2de:	3301      	adds	r3, #1
 800b2e0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800b2e8:	f7ff fe36 	bl	800af58 <tcp_output>
 800b2ec:	bd08      	pop	{r3, pc}

0800b2ee <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800b2f0:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 800b2f2:	b316      	cbz	r6, 800b33a <tcp_rexmit+0x4c>
 800b2f4:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800b2f6:	6833      	ldr	r3, [r6, #0]
 800b2f8:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800b2fa:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 800b2fe:	e000      	b.n	800b302 <tcp_rexmit+0x14>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800b300:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800b302:	682b      	ldr	r3, [r5, #0]
 800b304:	b15b      	cbz	r3, 800b31e <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	6858      	ldr	r0, [r3, #4]
 800b30a:	f7fa f93f 	bl	800558c <lwip_htonl>
 800b30e:	4604      	mov	r4, r0
 800b310:	68f3      	ldr	r3, [r6, #12]
 800b312:	6858      	ldr	r0, [r3, #4]
 800b314:	f7fa f93a 	bl	800558c <lwip_htonl>
 800b318:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 800b31a:	2800      	cmp	r0, #0
 800b31c:	dbf0      	blt.n	800b300 <tcp_rexmit+0x12>
  }
  seg->next = *cur_seg;
 800b31e:	682b      	ldr	r3, [r5, #0]
 800b320:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800b322:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b324:	6833      	ldr	r3, [r6, #0]
 800b326:	b14b      	cbz	r3, 800b33c <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b328:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b32c:	2bff      	cmp	r3, #255	; 0xff
 800b32e:	d002      	beq.n	800b336 <tcp_rexmit+0x48>
    ++pcb->nrtx;
 800b330:	3301      	adds	r3, #1
 800b332:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b336:	2300      	movs	r3, #0
 800b338:	637b      	str	r3, [r7, #52]	; 0x34
 800b33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800b33c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b340:	e7f2      	b.n	800b328 <tcp_rexmit+0x3a>

0800b342 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b342:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b344:	b11b      	cbz	r3, 800b34e <tcp_rexmit_fast+0xc>
 800b346:	7e83      	ldrb	r3, [r0, #26]
 800b348:	f013 0f04 	tst.w	r3, #4
 800b34c:	d000      	beq.n	800b350 <tcp_rexmit_fast+0xe>
 800b34e:	4770      	bx	lr
{
 800b350:	b510      	push	{r4, lr}
 800b352:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800b354:	f7ff ffcb 	bl	800b2ee <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b358:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800b35c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800b360:	4293      	cmp	r3, r2
 800b362:	d218      	bcs.n	800b396 <tcp_rexmit_fast+0x54>
 800b364:	085a      	lsrs	r2, r3, #1
 800b366:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800b36a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b36c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800b370:	d202      	bcs.n	800b378 <tcp_rexmit_fast+0x36>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800b372:	005a      	lsls	r2, r3, #1
 800b374:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b378:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800b37c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b380:	fa12 f383 	uxtah	r3, r2, r3
 800b384:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800b388:	7ea3      	ldrb	r3, [r4, #26]
 800b38a:	f043 0304 	orr.w	r3, r3, #4
 800b38e:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800b390:	2300      	movs	r3, #0
 800b392:	8623      	strh	r3, [r4, #48]	; 0x30
 800b394:	bd10      	pop	{r4, pc}
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b396:	0852      	lsrs	r2, r2, #1
 800b398:	e7e5      	b.n	800b366 <tcp_rexmit_fast+0x24>

0800b39a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b39a:	b570      	push	{r4, r5, r6, lr}
 800b39c:	b084      	sub	sp, #16
 800b39e:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b3a0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800b3a2:	3801      	subs	r0, #1
 800b3a4:	f7fa f8f2 	bl	800558c <lwip_htonl>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7ff f97c 	bl	800a6ac <tcp_output_alloc_header>
  if (p == NULL) {
 800b3b4:	b1d0      	cbz	r0, 800b3ec <tcp_keepalive+0x52>
 800b3b6:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b3b8:	1d26      	adds	r6, r4, #4
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f7fa fe8c 	bl	80060d8 <ip4_route>
  if (netif == NULL) {
 800b3c0:	b188      	cbz	r0, 800b3e6 <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800b3c2:	7aa3      	ldrb	r3, [r4, #10]
 800b3c4:	9002      	str	r0, [sp, #8]
 800b3c6:	2206      	movs	r2, #6
 800b3c8:	9201      	str	r2, [sp, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	9200      	str	r2, [sp, #0]
 800b3ce:	4632      	mov	r2, r6
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	f7fb f826 	bl	8006424 <ip4_output_if>
 800b3d8:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f7fc f94a 	bl	8007674 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	b004      	add	sp, #16
 800b3e4:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800b3e6:	f06f 0403 	mvn.w	r4, #3
 800b3ea:	e7f6      	b.n	800b3da <tcp_keepalive+0x40>
    return ERR_MEM;
 800b3ec:	f04f 34ff 	mov.w	r4, #4294967295
 800b3f0:	e7f6      	b.n	800b3e0 <tcp_keepalive+0x46>

0800b3f2 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f6:	b084      	sub	sp, #16
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800b3f8:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 800b3fa:	b175      	cbz	r5, 800b41a <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 800b3fc:	2d00      	cmp	r5, #0
 800b3fe:	d05d      	beq.n	800b4bc <tcp_zero_window_probe+0xca>
 800b400:	4604      	mov	r4, r0
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b402:	68eb      	ldr	r3, [r5, #12]
 800b404:	8998      	ldrh	r0, [r3, #12]
 800b406:	f7fa f8be 	bl	8005586 <lwip_htons>
 800b40a:	f010 0f01 	tst.w	r0, #1
 800b40e:	d006      	beq.n	800b41e <tcp_zero_window_probe+0x2c>
 800b410:	892b      	ldrh	r3, [r5, #8]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d040      	beq.n	800b498 <tcp_zero_window_probe+0xa6>
 800b416:	2200      	movs	r2, #0
 800b418:	e002      	b.n	800b420 <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 800b41a:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800b41c:	e7ee      	b.n	800b3fc <tcp_zero_window_probe+0xa>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b41e:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b420:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800b424:	68eb      	ldr	r3, [r5, #12]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	f082 0201 	eor.w	r2, r2, #1
 800b42c:	2100      	movs	r1, #0
 800b42e:	4620      	mov	r0, r4
 800b430:	f7ff f93c 	bl	800a6ac <tcp_output_alloc_header>
  if (p == NULL) {
 800b434:	4607      	mov	r7, r0
 800b436:	2800      	cmp	r0, #0
 800b438:	d042      	beq.n	800b4c0 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b43a:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800b43e:	b36e      	cbz	r6, 800b49c <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b440:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 800b444:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800b448:	b2b6      	uxth	r6, r6
 800b44a:	2011      	movs	r0, #17
 800b44c:	f7fa f89b 	bl	8005586 <lwip_htons>
 800b450:	4330      	orrs	r0, r6
 800b452:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b456:	68eb      	ldr	r3, [r5, #12]
 800b458:	6858      	ldr	r0, [r3, #4]
 800b45a:	f7fa f897 	bl	800558c <lwip_htonl>
 800b45e:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b460:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b462:	1a1b      	subs	r3, r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	db24      	blt.n	800b4b2 <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b468:	1d25      	adds	r5, r4, #4
 800b46a:	4628      	mov	r0, r5
 800b46c:	f7fa fe34 	bl	80060d8 <ip4_route>
  if (netif == NULL) {
 800b470:	b308      	cbz	r0, 800b4b6 <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b472:	7aa3      	ldrb	r3, [r4, #10]
 800b474:	9002      	str	r0, [sp, #8]
 800b476:	2206      	movs	r2, #6
 800b478:	9201      	str	r2, [sp, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	9200      	str	r2, [sp, #0]
 800b47e:	462a      	mov	r2, r5
 800b480:	4621      	mov	r1, r4
 800b482:	4638      	mov	r0, r7
 800b484:	f7fa ffce 	bl	8006424 <ip4_output_if>
 800b488:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800b48a:	4638      	mov	r0, r7
 800b48c:	f7fc f8f2 	bl	8007674 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800b490:	4620      	mov	r0, r4
 800b492:	b004      	add	sp, #16
 800b494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b498:	2201      	movs	r2, #1
 800b49a:	e7c1      	b.n	800b420 <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b49c:	6868      	ldr	r0, [r5, #4]
 800b49e:	8903      	ldrh	r3, [r0, #8]
 800b4a0:	892a      	ldrh	r2, [r5, #8]
 800b4a2:	1a9b      	subs	r3, r3, r2
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f108 0114 	add.w	r1, r8, #20
 800b4ac:	f7fc fba4 	bl	8007bf8 <pbuf_copy_partial>
 800b4b0:	e7d1      	b.n	800b456 <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 800b4b2:	64e0      	str	r0, [r4, #76]	; 0x4c
 800b4b4:	e7d8      	b.n	800b468 <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 800b4b6:	f06f 0403 	mvn.w	r4, #3
 800b4ba:	e7e6      	b.n	800b48a <tcp_zero_window_probe+0x98>
    return ERR_OK;
 800b4bc:	2400      	movs	r4, #0
 800b4be:	e7e7      	b.n	800b490 <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 800b4c0:	f04f 34ff 	mov.w	r4, #4294967295
 800b4c4:	e7e4      	b.n	800b490 <tcp_zero_window_probe+0x9e>
	...

0800b4c8 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800b4c8:	b508      	push	{r3, lr}
  u32_t diff;
  if (next_timeout == NULL) {
 800b4ca:	4b0a      	ldr	r3, [pc, #40]	; (800b4f4 <sys_timeouts_sleeptime+0x2c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	b15b      	cbz	r3, 800b4e8 <sys_timeouts_sleeptime+0x20>
    return 0xffffffff;
  }
  diff = sys_now() - timeouts_last_time;
 800b4d0:	f000 fe3a 	bl	800c148 <sys_now>
 800b4d4:	4b08      	ldr	r3, [pc, #32]	; (800b4f8 <sys_timeouts_sleeptime+0x30>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	1ac0      	subs	r0, r0, r3
  if (diff > next_timeout->time) {
 800b4da:	4b06      	ldr	r3, [pc, #24]	; (800b4f4 <sys_timeouts_sleeptime+0x2c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	4298      	cmp	r0, r3
 800b4e2:	d804      	bhi.n	800b4ee <sys_timeouts_sleeptime+0x26>
    return 0;
  } else {
    return next_timeout->time - diff;
 800b4e4:	1a18      	subs	r0, r3, r0
 800b4e6:	bd08      	pop	{r3, pc}
    return 0xffffffff;
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	bd08      	pop	{r3, pc}
    return 0;
 800b4ee:	2000      	movs	r0, #0
  }
}
 800b4f0:	bd08      	pop	{r3, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20003f18 	.word	0x20003f18
 800b4f8:	20003f20 	.word	0x20003f20

0800b4fc <sys_check_timeouts>:
{
 800b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (next_timeout) {
 800b4fe:	4b18      	ldr	r3, [pc, #96]	; (800b560 <sys_check_timeouts+0x64>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	b363      	cbz	r3, 800b55e <sys_check_timeouts+0x62>
    now = sys_now();
 800b504:	f000 fe20 	bl	800c148 <sys_now>
    diff = now - timeouts_last_time;
 800b508:	4b16      	ldr	r3, [pc, #88]	; (800b564 <sys_check_timeouts+0x68>)
 800b50a:	681c      	ldr	r4, [r3, #0]
 800b50c:	1b04      	subs	r4, r0, r4
 800b50e:	e005      	b.n	800b51c <sys_check_timeouts+0x20>
      had_one = 0;
 800b510:	2300      	movs	r3, #0
 800b512:	e002      	b.n	800b51a <sys_check_timeouts+0x1e>
 800b514:	2300      	movs	r3, #0
 800b516:	e000      	b.n	800b51a <sys_check_timeouts+0x1e>
        had_one = 1;
 800b518:	2301      	movs	r3, #1
    } while (had_one);
 800b51a:	b303      	cbz	r3, 800b55e <sys_check_timeouts+0x62>
      tmptimeout = next_timeout;
 800b51c:	4b10      	ldr	r3, [pc, #64]	; (800b560 <sys_check_timeouts+0x64>)
 800b51e:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b520:	2900      	cmp	r1, #0
 800b522:	d0f5      	beq.n	800b510 <sys_check_timeouts+0x14>
 800b524:	684b      	ldr	r3, [r1, #4]
 800b526:	429c      	cmp	r4, r3
 800b528:	d3f4      	bcc.n	800b514 <sys_check_timeouts+0x18>
        timeouts_last_time += tmptimeout->time;
 800b52a:	480e      	ldr	r0, [pc, #56]	; (800b564 <sys_check_timeouts+0x68>)
 800b52c:	6802      	ldr	r2, [r0, #0]
 800b52e:	441a      	add	r2, r3
 800b530:	6002      	str	r2, [r0, #0]
        diff -= tmptimeout->time;
 800b532:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
 800b534:	680a      	ldr	r2, [r1, #0]
 800b536:	4b0a      	ldr	r3, [pc, #40]	; (800b560 <sys_check_timeouts+0x64>)
 800b538:	601a      	str	r2, [r3, #0]
        handler = tmptimeout->h;
 800b53a:	688d      	ldr	r5, [r1, #8]
        arg = tmptimeout->arg;
 800b53c:	68cf      	ldr	r7, [r1, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b53e:	200a      	movs	r0, #10
 800b540:	f7fb fec2 	bl	80072c8 <memp_free>
        if (handler != NULL) {
 800b544:	2d00      	cmp	r5, #0
 800b546:	d0e7      	beq.n	800b518 <sys_check_timeouts+0x1c>
          LOCK_TCPIP_CORE();
 800b548:	4e07      	ldr	r6, [pc, #28]	; (800b568 <sys_check_timeouts+0x6c>)
 800b54a:	4630      	mov	r0, r6
 800b54c:	f000 fbd9 	bl	800bd02 <sys_mutex_lock>
          handler(arg);
 800b550:	4638      	mov	r0, r7
 800b552:	47a8      	blx	r5
          UNLOCK_TCPIP_CORE();
 800b554:	4630      	mov	r0, r6
 800b556:	f000 fbdb 	bl	800bd10 <sys_mutex_unlock>
        had_one = 1;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e7dd      	b.n	800b51a <sys_check_timeouts+0x1e>
 800b55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b560:	20003f18 	.word	0x20003f18
 800b564:	20003f20 	.word	0x20003f20
 800b568:	20004270 	.word	0x20004270

0800b56c <sys_timeout>:
{
 800b56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b570:	4605      	mov	r5, r0
 800b572:	4688      	mov	r8, r1
 800b574:	4617      	mov	r7, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b576:	200a      	movs	r0, #10
 800b578:	f7fb fe8c 	bl	8007294 <memp_malloc>
  if (timeout == NULL) {
 800b57c:	b308      	cbz	r0, 800b5c2 <sys_timeout+0x56>
 800b57e:	4604      	mov	r4, r0
  now = sys_now();
 800b580:	f000 fde2 	bl	800c148 <sys_now>
  if (next_timeout == NULL) {
 800b584:	4b23      	ldr	r3, [pc, #140]	; (800b614 <sys_timeout+0xa8>)
 800b586:	681e      	ldr	r6, [r3, #0]
 800b588:	b31e      	cbz	r6, 800b5d2 <sys_timeout+0x66>
    diff = now - timeouts_last_time;
 800b58a:	4b23      	ldr	r3, [pc, #140]	; (800b618 <sys_timeout+0xac>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	1ac0      	subs	r0, r0, r3
  timeout->next = NULL;
 800b590:	2300      	movs	r3, #0
 800b592:	6023      	str	r3, [r4, #0]
  timeout->h = handler;
 800b594:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 800b598:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 800b59a:	4428      	add	r0, r5
 800b59c:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800b59e:	b1e6      	cbz	r6, 800b5da <sys_timeout+0x6e>
  if (next_timeout->time > msecs) {
 800b5a0:	6873      	ldr	r3, [r6, #4]
 800b5a2:	429d      	cmp	r5, r3
 800b5a4:	d31d      	bcc.n	800b5e2 <sys_timeout+0x76>
 800b5a6:	4632      	mov	r2, r6
    for (t = next_timeout; t != NULL; t = t->next) {
 800b5a8:	2a00      	cmp	r2, #0
 800b5aa:	d030      	beq.n	800b60e <sys_timeout+0xa2>
      timeout->time -= t->time;
 800b5ac:	6851      	ldr	r1, [r2, #4]
 800b5ae:	6863      	ldr	r3, [r4, #4]
 800b5b0:	1a5b      	subs	r3, r3, r1
 800b5b2:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800b5b4:	6811      	ldr	r1, [r2, #0]
 800b5b6:	b1d9      	cbz	r1, 800b5f0 <sys_timeout+0x84>
 800b5b8:	6848      	ldr	r0, [r1, #4]
 800b5ba:	4283      	cmp	r3, r0
 800b5bc:	d318      	bcc.n	800b5f0 <sys_timeout+0x84>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b5be:	460a      	mov	r2, r1
 800b5c0:	e7f2      	b.n	800b5a8 <sys_timeout+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b5c2:	4b16      	ldr	r3, [pc, #88]	; (800b61c <sys_timeout+0xb0>)
 800b5c4:	22d4      	movs	r2, #212	; 0xd4
 800b5c6:	4916      	ldr	r1, [pc, #88]	; (800b620 <sys_timeout+0xb4>)
 800b5c8:	4816      	ldr	r0, [pc, #88]	; (800b624 <sys_timeout+0xb8>)
 800b5ca:	f001 f922 	bl	800c812 <iprintf>
 800b5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeouts_last_time = now;
 800b5d2:	4b11      	ldr	r3, [pc, #68]	; (800b618 <sys_timeout+0xac>)
 800b5d4:	6018      	str	r0, [r3, #0]
    diff = 0;
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	e7da      	b.n	800b590 <sys_timeout+0x24>
    next_timeout = timeout;
 800b5da:	4b0e      	ldr	r3, [pc, #56]	; (800b614 <sys_timeout+0xa8>)
 800b5dc:	601c      	str	r4, [r3, #0]
    return;
 800b5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
 800b5e2:	1b5d      	subs	r5, r3, r5
 800b5e4:	6075      	str	r5, [r6, #4]
    timeout->next = next_timeout;
 800b5e6:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 800b5e8:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <sys_timeout+0xa8>)
 800b5ea:	601c      	str	r4, [r3, #0]
 800b5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (t->next != NULL) {
 800b5f0:	b139      	cbz	r1, 800b602 <sys_timeout+0x96>
          t->next->time -= timeout->time;
 800b5f2:	6848      	ldr	r0, [r1, #4]
 800b5f4:	1ac3      	subs	r3, r0, r3
 800b5f6:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 800b5f8:	6813      	ldr	r3, [r2, #0]
 800b5fa:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800b5fc:	6014      	str	r4, [r2, #0]
        break;
 800b5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if (timeout->time > msecs) {
 800b602:	429d      	cmp	r5, r3
 800b604:	d2f8      	bcs.n	800b5f8 <sys_timeout+0x8c>
          timeout->time = msecs + next_timeout->time;
 800b606:	6873      	ldr	r3, [r6, #4]
 800b608:	441d      	add	r5, r3
 800b60a:	6065      	str	r5, [r4, #4]
 800b60c:	e7f4      	b.n	800b5f8 <sys_timeout+0x8c>
 800b60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b612:	bf00      	nop
 800b614:	20003f18 	.word	0x20003f18
 800b618:	20003f20 	.word	0x20003f20
 800b61c:	08010ae0 	.word	0x08010ae0
 800b620:	08010b14 	.word	0x08010b14
 800b624:	0800cd98 	.word	0x0800cd98

0800b628 <tcp_timer_needed>:
{
 800b628:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b62a:	4b0a      	ldr	r3, [pc, #40]	; (800b654 <tcp_timer_needed+0x2c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	b953      	cbnz	r3, 800b646 <tcp_timer_needed+0x1e>
 800b630:	4b09      	ldr	r3, [pc, #36]	; (800b658 <tcp_timer_needed+0x30>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	b143      	cbz	r3, 800b648 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800b636:	2201      	movs	r2, #1
 800b638:	4b06      	ldr	r3, [pc, #24]	; (800b654 <tcp_timer_needed+0x2c>)
 800b63a:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b63c:	2200      	movs	r2, #0
 800b63e:	4907      	ldr	r1, [pc, #28]	; (800b65c <tcp_timer_needed+0x34>)
 800b640:	20fa      	movs	r0, #250	; 0xfa
 800b642:	f7ff ff93 	bl	800b56c <sys_timeout>
 800b646:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b648:	4b05      	ldr	r3, [pc, #20]	; (800b660 <tcp_timer_needed+0x38>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1f2      	bne.n	800b636 <tcp_timer_needed+0xe>
 800b650:	e7f9      	b.n	800b646 <tcp_timer_needed+0x1e>
 800b652:	bf00      	nop
 800b654:	20003f1c 	.word	0x20003f1c
 800b658:	2000889c 	.word	0x2000889c
 800b65c:	0800b665 	.word	0x0800b665
 800b660:	200088ac 	.word	0x200088ac

0800b664 <tcpip_tcp_timer>:
{
 800b664:	b508      	push	{r3, lr}
  tcp_tmr();
 800b666:	f7fd f93b 	bl	80088e0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b66a:	4b08      	ldr	r3, [pc, #32]	; (800b68c <tcpip_tcp_timer+0x28>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	b12b      	cbz	r3, 800b67c <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b670:	2200      	movs	r2, #0
 800b672:	4907      	ldr	r1, [pc, #28]	; (800b690 <tcpip_tcp_timer+0x2c>)
 800b674:	20fa      	movs	r0, #250	; 0xfa
 800b676:	f7ff ff79 	bl	800b56c <sys_timeout>
 800b67a:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b67c:	4b05      	ldr	r3, [pc, #20]	; (800b694 <tcpip_tcp_timer+0x30>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1f5      	bne.n	800b670 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800b684:	2200      	movs	r2, #0
 800b686:	4b04      	ldr	r3, [pc, #16]	; (800b698 <tcpip_tcp_timer+0x34>)
 800b688:	601a      	str	r2, [r3, #0]
 800b68a:	bd08      	pop	{r3, pc}
 800b68c:	2000889c 	.word	0x2000889c
 800b690:	0800b665 	.word	0x0800b665
 800b694:	200088ac 	.word	0x200088ac
 800b698:	20003f1c 	.word	0x20003f1c

0800b69c <sys_timeouts_init>:
{
 800b69c:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b69e:	2401      	movs	r4, #1
 800b6a0:	e008      	b.n	800b6b4 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800b6a2:	4b08      	ldr	r3, [pc, #32]	; (800b6c4 <sys_timeouts_init+0x28>)
 800b6a4:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800b6a8:	4907      	ldr	r1, [pc, #28]	; (800b6c8 <sys_timeouts_init+0x2c>)
 800b6aa:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800b6ae:	f7ff ff5d 	bl	800b56c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b6b2:	3401      	adds	r4, #1
 800b6b4:	2c02      	cmp	r4, #2
 800b6b6:	d9f4      	bls.n	800b6a2 <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 800b6b8:	f000 fd46 	bl	800c148 <sys_now>
 800b6bc:	4b03      	ldr	r3, [pc, #12]	; (800b6cc <sys_timeouts_init+0x30>)
 800b6be:	6018      	str	r0, [r3, #0]
 800b6c0:	bd10      	pop	{r4, pc}
 800b6c2:	bf00      	nop
 800b6c4:	08010ac8 	.word	0x08010ac8
 800b6c8:	0800b6d1 	.word	0x0800b6d1
 800b6cc:	20003f20 	.word	0x20003f20

0800b6d0 <cyclic_timer>:
{
 800b6d0:	b510      	push	{r4, lr}
 800b6d2:	4604      	mov	r4, r0
  cyclic->handler();
 800b6d4:	6843      	ldr	r3, [r0, #4]
 800b6d6:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800b6d8:	4622      	mov	r2, r4
 800b6da:	4902      	ldr	r1, [pc, #8]	; (800b6e4 <cyclic_timer+0x14>)
 800b6dc:	6820      	ldr	r0, [r4, #0]
 800b6de:	f7ff ff45 	bl	800b56c <sys_timeout>
 800b6e2:	bd10      	pop	{r4, pc}
 800b6e4:	0800b6d1 	.word	0x0800b6d1

0800b6e8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	460d      	mov	r5, r1
 800b6ee:	e007      	b.n	800b700 <sys_timeouts_mbox_fetch+0x18>
  u32_t sleeptime;

again:
  if (!next_timeout) {
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	4629      	mov	r1, r5
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f000 fa54 	bl	800bba2 <sys_arch_mbox_fetch>
    return;
 800b6fa:	bd38      	pop	{r3, r4, r5, pc}

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b6fc:	f7ff fefe 	bl	800b4fc <sys_check_timeouts>
  if (!next_timeout) {
 800b700:	4b08      	ldr	r3, [pc, #32]	; (800b724 <sys_timeouts_mbox_fetch+0x3c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d0f3      	beq.n	800b6f0 <sys_timeouts_mbox_fetch+0x8>
  sleeptime = sys_timeouts_sleeptime();
 800b708:	f7ff fede 	bl	800b4c8 <sys_timeouts_sleeptime>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800b70c:	4602      	mov	r2, r0
 800b70e:	2800      	cmp	r0, #0
 800b710:	d0f4      	beq.n	800b6fc <sys_timeouts_mbox_fetch+0x14>
 800b712:	4629      	mov	r1, r5
 800b714:	4620      	mov	r0, r4
 800b716:	f000 fa44 	bl	800bba2 <sys_arch_mbox_fetch>
 800b71a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b71e:	d0ed      	beq.n	800b6fc <sys_timeouts_mbox_fetch+0x14>
 800b720:	bd38      	pop	{r3, r4, r5, pc}
 800b722:	bf00      	nop
 800b724:	20003f18 	.word	0x20003f18

0800b728 <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 800b728:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b72a:	4a10      	ldr	r2, [pc, #64]	; (800b76c <udp_new_port+0x44>)
 800b72c:	8813      	ldrh	r3, [r2, #0]
 800b72e:	1c59      	adds	r1, r3, #1
 800b730:	8011      	strh	r1, [r2, #0]
 800b732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b736:	4293      	cmp	r3, r2
 800b738:	d009      	beq.n	800b74e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b73a:	4b0d      	ldr	r3, [pc, #52]	; (800b770 <udp_new_port+0x48>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	b193      	cbz	r3, 800b766 <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 800b740:	8a59      	ldrh	r1, [r3, #18]
 800b742:	4a0a      	ldr	r2, [pc, #40]	; (800b76c <udp_new_port+0x44>)
 800b744:	8812      	ldrh	r2, [r2, #0]
 800b746:	4291      	cmp	r1, r2
 800b748:	d006      	beq.n	800b758 <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	e7f7      	b.n	800b73e <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b74e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b752:	4b06      	ldr	r3, [pc, #24]	; (800b76c <udp_new_port+0x44>)
 800b754:	801a      	strh	r2, [r3, #0]
 800b756:	e7f0      	b.n	800b73a <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b758:	3001      	adds	r0, #1
 800b75a:	b280      	uxth	r0, r0
 800b75c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800b760:	d3e3      	bcc.n	800b72a <udp_new_port+0x2>
        return 0;
 800b762:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 800b764:	4770      	bx	lr
  return udp_port;
 800b766:	4b01      	ldr	r3, [pc, #4]	; (800b76c <udp_new_port+0x44>)
 800b768:	8818      	ldrh	r0, [r3, #0]
 800b76a:	4770      	bx	lr
 800b76c:	2000000e 	.word	0x2000000e
 800b770:	200088b4 	.word	0x200088b4

0800b774 <udp_input_local_match>:
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b774:	b16a      	cbz	r2, 800b792 <udp_input_local_match+0x1e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b776:	b1a8      	cbz	r0, 800b7a4 <udp_input_local_match+0x30>
 800b778:	6803      	ldr	r3, [r0, #0]
 800b77a:	b1ab      	cbz	r3, 800b7a8 <udp_input_local_match+0x34>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b77c:	4a10      	ldr	r2, [pc, #64]	; (800b7c0 <udp_input_local_match+0x4c>)
 800b77e:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b780:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b784:	d012      	beq.n	800b7ac <udp_input_local_match+0x38>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b786:	6889      	ldr	r1, [r1, #8]
 800b788:	4053      	eors	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b78a:	420b      	tst	r3, r1
 800b78c:	d010      	beq.n	800b7b0 <udp_input_local_match+0x3c>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      return 1;
    }
  }

  return 0;
 800b78e:	2000      	movs	r0, #0
 800b790:	4770      	bx	lr
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b792:	b178      	cbz	r0, 800b7b4 <udp_input_local_match+0x40>
 800b794:	6803      	ldr	r3, [r0, #0]
 800b796:	b17b      	cbz	r3, 800b7b8 <udp_input_local_match+0x44>
 800b798:	4a09      	ldr	r2, [pc, #36]	; (800b7c0 <udp_input_local_match+0x4c>)
 800b79a:	6952      	ldr	r2, [r2, #20]
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d00d      	beq.n	800b7bc <udp_input_local_match+0x48>
  return 0;
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	4770      	bx	lr
          return 1;
 800b7a4:	2001      	movs	r0, #1
 800b7a6:	4770      	bx	lr
 800b7a8:	2001      	movs	r0, #1
 800b7aa:	4770      	bx	lr
 800b7ac:	2001      	movs	r0, #1
 800b7ae:	4770      	bx	lr
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	4770      	bx	lr
      return 1;
 800b7b4:	2001      	movs	r0, #1
 800b7b6:	4770      	bx	lr
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	4770      	bx	lr
 800b7bc:	2001      	movs	r0, #1
}
 800b7be:	4770      	bx	lr
 800b7c0:	20004274 	.word	0x20004274

0800b7c4 <udp_init>:
{
 800b7c4:	4770      	bx	lr
	...

0800b7c8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	b085      	sub	sp, #20
 800b7ce:	4681      	mov	r9, r0
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b7d0:	8943      	ldrh	r3, [r0, #10]
 800b7d2:	2b07      	cmp	r3, #7
 800b7d4:	d917      	bls.n	800b806 <udp_input+0x3e>
 800b7d6:	460f      	mov	r7, r1
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b7d8:	6844      	ldr	r4, [r0, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b7da:	4b46      	ldr	r3, [pc, #280]	; (800b8f4 <udp_input+0x12c>)
 800b7dc:	6819      	ldr	r1, [r3, #0]
 800b7de:	6958      	ldr	r0, [r3, #20]
 800b7e0:	f7fa fe35 	bl	800644e <ip4_addr_isbroadcast_u32>
 800b7e4:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b7e6:	8820      	ldrh	r0, [r4, #0]
 800b7e8:	f7f9 fecd 	bl	8005586 <lwip_htons>
 800b7ec:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800b7ee:	8860      	ldrh	r0, [r4, #2]
 800b7f0:	f7f9 fec9 	bl	8005586 <lwip_htons>
 800b7f4:	4606      	mov	r6, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b7f6:	4b40      	ldr	r3, [pc, #256]	; (800b8f8 <udp_input+0x130>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	9303      	str	r3, [sp, #12]
 800b7fc:	461c      	mov	r4, r3
  uncon_pcb = NULL;
 800b7fe:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800b802:	465d      	mov	r5, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b804:	e009      	b.n	800b81a <udp_input+0x52>
    pbuf_free(p);
 800b806:	f7fb ff35 	bl	8007674 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b80a:	b005      	add	sp, #20
 800b80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((pcb->remote_port == src) &&
 800b810:	8aa3      	ldrh	r3, [r4, #20]
 800b812:	459a      	cmp	sl, r3
 800b814:	d015      	beq.n	800b842 <udp_input+0x7a>
    prev = pcb;
 800b816:	4625      	mov	r5, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b818:	68e4      	ldr	r4, [r4, #12]
 800b81a:	b1fc      	cbz	r4, 800b85c <udp_input+0x94>
    if ((pcb->local_port == dest) &&
 800b81c:	8a63      	ldrh	r3, [r4, #18]
 800b81e:	429e      	cmp	r6, r3
 800b820:	d1f9      	bne.n	800b816 <udp_input+0x4e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b822:	4642      	mov	r2, r8
 800b824:	4639      	mov	r1, r7
 800b826:	4620      	mov	r0, r4
 800b828:	f7ff ffa4 	bl	800b774 <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d0f2      	beq.n	800b816 <udp_input+0x4e>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800b830:	7c23      	ldrb	r3, [r4, #16]
 800b832:	f013 0f04 	tst.w	r3, #4
 800b836:	d1eb      	bne.n	800b810 <udp_input+0x48>
 800b838:	f1bb 0f00 	cmp.w	fp, #0
 800b83c:	d1e8      	bne.n	800b810 <udp_input+0x48>
        uncon_pcb = pcb;
 800b83e:	46a3      	mov	fp, r4
 800b840:	e7e6      	b.n	800b810 <udp_input+0x48>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b842:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800b844:	b11b      	cbz	r3, 800b84e <udp_input+0x86>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b846:	4a2b      	ldr	r2, [pc, #172]	; (800b8f4 <udp_input+0x12c>)
 800b848:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d1e3      	bne.n	800b816 <udp_input+0x4e>
        if (prev != NULL) {
 800b84e:	b12d      	cbz	r5, 800b85c <udp_input+0x94>
          prev->next = pcb->next;
 800b850:	68e3      	ldr	r3, [r4, #12]
 800b852:	60eb      	str	r3, [r5, #12]
          pcb->next = udp_pcbs;
 800b854:	9b03      	ldr	r3, [sp, #12]
 800b856:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800b858:	4b27      	ldr	r3, [pc, #156]	; (800b8f8 <udp_input+0x130>)
 800b85a:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 800b85c:	b1a4      	cbz	r4, 800b888 <udp_input+0xc0>
  if (pcb != NULL) {
 800b85e:	b1ac      	cbz	r4, 800b88c <udp_input+0xc4>
    for_us = 1;
 800b860:	2301      	movs	r3, #1
  if (for_us) {
 800b862:	2b00      	cmp	r3, #0
 800b864:	d041      	beq.n	800b8ea <udp_input+0x122>
    if (pbuf_header(p, -UDP_HLEN)) {
 800b866:	f06f 0107 	mvn.w	r1, #7
 800b86a:	4648      	mov	r0, r9
 800b86c:	f7fb fef8 	bl	8007660 <pbuf_header>
 800b870:	b9a0      	cbnz	r0, 800b89c <udp_input+0xd4>
    if (pcb != NULL) {
 800b872:	b314      	cbz	r4, 800b8ba <udp_input+0xf2>
      if (pcb->recv != NULL) {
 800b874:	69a5      	ldr	r5, [r4, #24]
 800b876:	b1e5      	cbz	r5, 800b8b2 <udp_input+0xea>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b878:	69e0      	ldr	r0, [r4, #28]
 800b87a:	f8cd a000 	str.w	sl, [sp]
 800b87e:	4b1f      	ldr	r3, [pc, #124]	; (800b8fc <udp_input+0x134>)
 800b880:	464a      	mov	r2, r9
 800b882:	4621      	mov	r1, r4
 800b884:	47a8      	blx	r5
 800b886:	e7c0      	b.n	800b80a <udp_input+0x42>
    pcb = uncon_pcb;
 800b888:	465c      	mov	r4, fp
 800b88a:	e7e8      	b.n	800b85e <udp_input+0x96>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4a19      	ldr	r2, [pc, #100]	; (800b8f4 <udp_input+0x12c>)
 800b890:	6952      	ldr	r2, [r2, #20]
 800b892:	4293      	cmp	r3, r2
 800b894:	bf14      	ite	ne
 800b896:	2300      	movne	r3, #0
 800b898:	2301      	moveq	r3, #1
 800b89a:	e7e2      	b.n	800b862 <udp_input+0x9a>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800b89c:	4b18      	ldr	r3, [pc, #96]	; (800b900 <udp_input+0x138>)
 800b89e:	f240 1255 	movw	r2, #341	; 0x155
 800b8a2:	4918      	ldr	r1, [pc, #96]	; (800b904 <udp_input+0x13c>)
 800b8a4:	4818      	ldr	r0, [pc, #96]	; (800b908 <udp_input+0x140>)
 800b8a6:	f000 ffb4 	bl	800c812 <iprintf>
      pbuf_free(p);
 800b8aa:	4648      	mov	r0, r9
 800b8ac:	f7fb fee2 	bl	8007674 <pbuf_free>
      goto end;
 800b8b0:	e7ab      	b.n	800b80a <udp_input+0x42>
        pbuf_free(p);
 800b8b2:	4648      	mov	r0, r9
 800b8b4:	f7fb fede 	bl	8007674 <pbuf_free>
        goto end;
 800b8b8:	e7a7      	b.n	800b80a <udp_input+0x42>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b8ba:	f1b8 0f00 	cmp.w	r8, #0
 800b8be:	d110      	bne.n	800b8e2 <udp_input+0x11a>
 800b8c0:	4b0c      	ldr	r3, [pc, #48]	; (800b8f4 <udp_input+0x12c>)
 800b8c2:	695b      	ldr	r3, [r3, #20]
 800b8c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8c8:	2be0      	cmp	r3, #224	; 0xe0
 800b8ca:	d00a      	beq.n	800b8e2 <udp_input+0x11a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b8cc:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <udp_input+0x12c>)
 800b8ce:	8999      	ldrh	r1, [r3, #12]
 800b8d0:	3108      	adds	r1, #8
 800b8d2:	b209      	sxth	r1, r1
 800b8d4:	4648      	mov	r0, r9
 800b8d6:	f7fb fec8 	bl	800766a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b8da:	2103      	movs	r1, #3
 800b8dc:	4648      	mov	r0, r9
 800b8de:	f7fa fbef 	bl	80060c0 <icmp_dest_unreach>
      pbuf_free(p);
 800b8e2:	4648      	mov	r0, r9
 800b8e4:	f7fb fec6 	bl	8007674 <pbuf_free>
 800b8e8:	e78f      	b.n	800b80a <udp_input+0x42>
    pbuf_free(p);
 800b8ea:	4648      	mov	r0, r9
 800b8ec:	f7fb fec2 	bl	8007674 <pbuf_free>
  return;
 800b8f0:	e78b      	b.n	800b80a <udp_input+0x42>
 800b8f2:	bf00      	nop
 800b8f4:	20004274 	.word	0x20004274
 800b8f8:	200088b4 	.word	0x200088b4
 800b8fc:	20004284 	.word	0x20004284
 800b900:	08010b54 	.word	0x08010b54
 800b904:	08010b84 	.word	0x08010b84
 800b908:	0800cd98 	.word	0x0800cd98

0800b90c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b90c:	b570      	push	{r4, r5, r6, lr}
 800b90e:	4604      	mov	r4, r0
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b910:	460d      	mov	r5, r1
 800b912:	b159      	cbz	r1, 800b92c <udp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b914:	2c00      	cmp	r4, #0
 800b916:	d02c      	beq.n	800b972 <udp_bind+0x66>
 800b918:	2d00      	cmp	r5, #0
 800b91a:	d02d      	beq.n	800b978 <udp_bind+0x6c>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b91c:	4b1a      	ldr	r3, [pc, #104]	; (800b988 <udp_bind+0x7c>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4619      	mov	r1, r3
 800b922:	b129      	cbz	r1, 800b930 <udp_bind+0x24>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b924:	42a1      	cmp	r1, r4
 800b926:	d013      	beq.n	800b950 <udp_bind+0x44>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b928:	68c9      	ldr	r1, [r1, #12]
 800b92a:	e7fa      	b.n	800b922 <udp_bind+0x16>
    ipaddr = IP4_ADDR_ANY;
 800b92c:	4d17      	ldr	r5, [pc, #92]	; (800b98c <udp_bind+0x80>)
 800b92e:	e7f1      	b.n	800b914 <udp_bind+0x8>
  rebind = 0;
 800b930:	2600      	movs	r6, #0
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800b932:	b982      	cbnz	r2, 800b956 <udp_bind+0x4a>
    port = udp_new_port();
 800b934:	f7ff fef8 	bl	800b728 <udp_new_port>
    if (port == 0) {
 800b938:	4602      	mov	r2, r0
 800b93a:	b300      	cbz	r0, 800b97e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 800b940:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b942:	b9fe      	cbnz	r6, 800b984 <udp_bind+0x78>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b944:	4b10      	ldr	r3, [pc, #64]	; (800b988 <udp_bind+0x7c>)
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 800b94a:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b94c:	2000      	movs	r0, #0
 800b94e:	bd70      	pop	{r4, r5, r6, pc}
      rebind = 1;
 800b950:	2601      	movs	r6, #1
 800b952:	e7ee      	b.n	800b932 <udp_bind+0x26>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d0f0      	beq.n	800b93c <udp_bind+0x30>
      if (pcb != ipcb) {
 800b95a:	42a3      	cmp	r3, r4
 800b95c:	d0fa      	beq.n	800b954 <udp_bind+0x48>
          if ((ipcb->local_port == port) &&
 800b95e:	8a59      	ldrh	r1, [r3, #18]
 800b960:	428a      	cmp	r2, r1
 800b962:	d1f7      	bne.n	800b954 <udp_bind+0x48>
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800b964:	6818      	ldr	r0, [r3, #0]
 800b966:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 800b968:	4288      	cmp	r0, r1
 800b96a:	d1f3      	bne.n	800b954 <udp_bind+0x48>
            return ERR_USE;
 800b96c:	f06f 0007 	mvn.w	r0, #7
 800b970:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800b972:	f06f 0005 	mvn.w	r0, #5
 800b976:	bd70      	pop	{r4, r5, r6, pc}
 800b978:	f06f 0005 	mvn.w	r0, #5
 800b97c:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_USE;
 800b97e:	f06f 0007 	mvn.w	r0, #7
 800b982:	bd70      	pop	{r4, r5, r6, pc}
  return ERR_OK;
 800b984:	2000      	movs	r0, #0
}
 800b986:	bd70      	pop	{r4, r5, r6, pc}
 800b988:	200088b4 	.word	0x200088b4
 800b98c:	0800f660 	.word	0x0800f660

0800b990 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b990:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800b992:	61c2      	str	r2, [r0, #28]
 800b994:	4770      	bx	lr
	...

0800b998 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800b998:	b508      	push	{r3, lr}
 800b99a:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b99c:	4b0b      	ldr	r3, [pc, #44]	; (800b9cc <udp_remove+0x34>)
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	4282      	cmp	r2, r0
 800b9a2:	d109      	bne.n	800b9b8 <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b9a4:	68d2      	ldr	r2, [r2, #12]
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	e001      	b.n	800b9ae <udp_remove+0x16>
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800b9aa:	68cb      	ldr	r3, [r1, #12]
 800b9ac:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	f7fb fc8a 	bl	80072c8 <memp_free>
 800b9b4:	bd08      	pop	{r3, pc}
 800b9b6:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b9b8:	2a00      	cmp	r2, #0
 800b9ba:	d0f8      	beq.n	800b9ae <udp_remove+0x16>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b9bc:	68d3      	ldr	r3, [r2, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d0f9      	beq.n	800b9b6 <udp_remove+0x1e>
 800b9c2:	4299      	cmp	r1, r3
 800b9c4:	d0f1      	beq.n	800b9aa <udp_remove+0x12>
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	e7f6      	b.n	800b9b8 <udp_remove+0x20>
 800b9ca:	bf00      	nop
 800b9cc:	200088b4 	.word	0x200088b4

0800b9d0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b9d0:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	f7fb fc5e 	bl	8007294 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b9d8:	4604      	mov	r4, r0
 800b9da:	b128      	cbz	r0, 800b9e8 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b9dc:	2220      	movs	r2, #32
 800b9de:	2100      	movs	r1, #0
 800b9e0:	f001 f946 	bl	800cc70 <memset>
    pcb->ttl = UDP_TTL;
 800b9e4:	23ff      	movs	r3, #255	; 0xff
 800b9e6:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	bd10      	pop	{r4, pc}

0800b9ec <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800b9ec:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;
  pcb = udp_new();
 800b9ee:	f7ff ffef 	bl	800b9d0 <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800b9f2:	bd08      	pop	{r3, pc}

0800b9f4 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b9f4:	b1a0      	cbz	r0, 800ba20 <udp_netif_ip_addr_changed+0x2c>
{
 800b9f6:	b410      	push	{r4}
 800b9f8:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b9fa:	6803      	ldr	r3, [r0, #0]
 800b9fc:	b173      	cbz	r3, 800ba1c <udp_netif_ip_addr_changed+0x28>
 800b9fe:	b169      	cbz	r1, 800ba1c <udp_netif_ip_addr_changed+0x28>
 800ba00:	680b      	ldr	r3, [r1, #0]
 800ba02:	b15b      	cbz	r3, 800ba1c <udp_netif_ip_addr_changed+0x28>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ba04:	4b07      	ldr	r3, [pc, #28]	; (800ba24 <udp_netif_ip_addr_changed+0x30>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	e000      	b.n	800ba0c <udp_netif_ip_addr_changed+0x18>
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	b133      	cbz	r3, 800ba1c <udp_netif_ip_addr_changed+0x28>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ba0e:	6818      	ldr	r0, [r3, #0]
 800ba10:	6822      	ldr	r2, [r4, #0]
 800ba12:	4290      	cmp	r0, r2
 800ba14:	d1f9      	bne.n	800ba0a <udp_netif_ip_addr_changed+0x16>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ba16:	680a      	ldr	r2, [r1, #0]
 800ba18:	601a      	str	r2, [r3, #0]
 800ba1a:	e7f6      	b.n	800ba0a <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 800ba1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	200088b4 	.word	0x200088b4

0800ba28 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2a:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800ba2c:	8945      	ldrh	r5, [r0, #10]
 800ba2e:	2d0e      	cmp	r5, #14
 800ba30:	d916      	bls.n	800ba60 <ethernet_input+0x38>
 800ba32:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ba34:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ba36:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ba38:	7803      	ldrb	r3, [r0, #0]
 800ba3a:	f013 0f01 	tst.w	r3, #1
 800ba3e:	d00a      	beq.n	800ba56 <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d012      	beq.n	800ba6a <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ba44:	2206      	movs	r2, #6
 800ba46:	4921      	ldr	r1, [pc, #132]	; (800bacc <ethernet_input+0xa4>)
 800ba48:	f001 f8f8 	bl	800cc3c <memcmp>
 800ba4c:	b918      	cbnz	r0, 800ba56 <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ba4e:	7b63      	ldrb	r3, [r4, #13]
 800ba50:	f043 0308 	orr.w	r3, r3, #8
 800ba54:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800ba56:	2e08      	cmp	r6, #8
 800ba58:	d012      	beq.n	800ba80 <ethernet_input+0x58>
 800ba5a:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800ba5e:	d022      	beq.n	800baa6 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800ba60:	4620      	mov	r0, r4
 800ba62:	f7fb fe07 	bl	8007674 <pbuf_free>
  return ERR_OK;
}
 800ba66:	2000      	movs	r0, #0
 800ba68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ba6a:	7843      	ldrb	r3, [r0, #1]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1f2      	bne.n	800ba56 <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ba70:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ba72:	2b5e      	cmp	r3, #94	; 0x5e
 800ba74:	d1ef      	bne.n	800ba56 <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 800ba76:	7b63      	ldrb	r3, [r4, #13]
 800ba78:	f043 0310 	orr.w	r3, r3, #16
 800ba7c:	7363      	strb	r3, [r4, #13]
 800ba7e:	e7ea      	b.n	800ba56 <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ba80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba84:	f013 0f08 	tst.w	r3, #8
 800ba88:	d0ea      	beq.n	800ba60 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800ba8a:	2d0d      	cmp	r5, #13
 800ba8c:	dde8      	ble.n	800ba60 <ethernet_input+0x38>
 800ba8e:	f06f 010d 	mvn.w	r1, #13
 800ba92:	4620      	mov	r0, r4
 800ba94:	f7fb fde4 	bl	8007660 <pbuf_header>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d1e1      	bne.n	800ba60 <ethernet_input+0x38>
        ip4_input(p, netif);
 800ba9c:	4639      	mov	r1, r7
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f7fa fb6a 	bl	8006178 <ip4_input>
      break;
 800baa4:	e7df      	b.n	800ba66 <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800baa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800baaa:	f013 0f08 	tst.w	r3, #8
 800baae:	d0d7      	beq.n	800ba60 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800bab0:	2d0d      	cmp	r5, #13
 800bab2:	ddd5      	ble.n	800ba60 <ethernet_input+0x38>
 800bab4:	f06f 010d 	mvn.w	r1, #13
 800bab8:	4620      	mov	r0, r4
 800baba:	f7fb fdd1 	bl	8007660 <pbuf_header>
 800babe:	2800      	cmp	r0, #0
 800bac0:	d1ce      	bne.n	800ba60 <ethernet_input+0x38>
        etharp_input(p, netif);
 800bac2:	4639      	mov	r1, r7
 800bac4:	4620      	mov	r0, r4
 800bac6:	f7f9 ff71 	bl	80059ac <etharp_input>
      break;
 800baca:	e7cc      	b.n	800ba66 <ethernet_input+0x3e>
 800bacc:	08010b98 	.word	0x08010b98

0800bad0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800bad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad4:	4605      	mov	r5, r0
 800bad6:	460c      	mov	r4, r1
 800bad8:	4616      	mov	r6, r2
 800bada:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800badc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800bae0:	f7f9 fd51 	bl	8005586 <lwip_htons>
 800bae4:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800bae6:	210e      	movs	r1, #14
 800bae8:	4620      	mov	r0, r4
 800baea:	f7fb fdb9 	bl	8007660 <pbuf_header>
 800baee:	b9e0      	cbnz	r0, 800bb2a <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800baf0:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 800baf2:	f8a3 800c 	strh.w	r8, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800baf6:	683a      	ldr	r2, [r7, #0]
 800baf8:	601a      	str	r2, [r3, #0]
 800bafa:	88ba      	ldrh	r2, [r7, #4]
 800bafc:	809a      	strh	r2, [r3, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800bafe:	6832      	ldr	r2, [r6, #0]
 800bb00:	f8c3 2006 	str.w	r2, [r3, #6]
 800bb04:	88b2      	ldrh	r2, [r6, #4]
 800bb06:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800bb08:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800bb0c:	2b06      	cmp	r3, #6
 800bb0e:	d006      	beq.n	800bb1e <ethernet_output+0x4e>
 800bb10:	4b08      	ldr	r3, [pc, #32]	; (800bb34 <ethernet_output+0x64>)
 800bb12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bb16:	4908      	ldr	r1, [pc, #32]	; (800bb38 <ethernet_output+0x68>)
 800bb18:	4808      	ldr	r0, [pc, #32]	; (800bb3c <ethernet_output+0x6c>)
 800bb1a:	f000 fe7a 	bl	800c812 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800bb1e:	69ab      	ldr	r3, [r5, #24]
 800bb20:	4621      	mov	r1, r4
 800bb22:	4628      	mov	r0, r5
 800bb24:	4798      	blx	r3
 800bb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800bb2a:	f06f 0001 	mvn.w	r0, #1
}
 800bb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb32:	bf00      	nop
 800bb34:	08010ba0 	.word	0x08010ba0
 800bb38:	08010bd8 	.word	0x08010bd8
 800bb3c:	0800cd98 	.word	0x0800cd98

0800bb40 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800bb40:	b510      	push	{r4, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800bb46:	9100      	str	r1, [sp, #0]
 800bb48:	2304      	movs	r3, #4
 800bb4a:	9301      	str	r3, [sp, #4]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	4668      	mov	r0, sp
 800bb50:	f7f6 fb92 	bl	8002278 <osMessageCreate>
 800bb54:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800bb56:	b110      	cbz	r0, 800bb5e <sys_mbox_new+0x1e>
  return ERR_MEM;
 
 return ERR_OK;
 800bb58:	2000      	movs	r0, #0
}
 800bb5a:	b002      	add	sp, #8
 800bb5c:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 800bb5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb62:	e7fa      	b.n	800bb5a <sys_mbox_new+0x1a>

0800bb64 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800bb64:	b510      	push	{r4, lr}
 800bb66:	4604      	mov	r4, r0
	if( osMessageWaiting(*mbox) )
 800bb68:	6800      	ldr	r0, [r0, #0]
 800bb6a:	f7f6 fc11 	bl	8002390 <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 800bb6e:	6820      	ldr	r0, [r4, #0]
 800bb70:	f7f6 fc1b 	bl	80023aa <osMessageDelete>
 800bb74:	bd10      	pop	{r4, pc}

0800bb76 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800bb76:	b538      	push	{r3, r4, r5, lr}
 800bb78:	4605      	mov	r5, r0
 800bb7a:	460c      	mov	r4, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800bb7c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb80:	4621      	mov	r1, r4
 800bb82:	6828      	ldr	r0, [r5, #0]
 800bb84:	f7f6 fb80 	bl	8002288 <osMessagePut>
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	d1f7      	bne.n	800bb7c <sys_mbox_post+0x6>
}
 800bb8c:	bd38      	pop	{r3, r4, r5, pc}

0800bb8e <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800bb8e:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800bb90:	2200      	movs	r2, #0
 800bb92:	6800      	ldr	r0, [r0, #0]
 800bb94:	f7f6 fb78 	bl	8002288 <osMessagePut>
 800bb98:	b900      	cbnz	r0, 800bb9c <sys_mbox_trypost+0xe>
#endif /* SYS_STATS */
			
   }

   return result;
}
 800bb9a:	bd08      	pop	{r3, pc}
      result = ERR_MEM;
 800bb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bba0:	e7fb      	b.n	800bb9a <sys_mbox_trypost+0xc>

0800bba2 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800bba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bba4:	b089      	sub	sp, #36	; 0x24
 800bba6:	4606      	mov	r6, r0
 800bba8:	460f      	mov	r7, r1
 800bbaa:	4615      	mov	r5, r2
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 800bbac:	f7f6 fa41 	bl	8002032 <osKernelSysTick>
 800bbb0:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800bbb2:	b185      	cbz	r5, 800bbd6 <sys_arch_mbox_fetch+0x34>
  { 
    event = osMessageGet (*mbox, timeout);
 800bbb4:	462a      	mov	r2, r5
 800bbb6:	6831      	ldr	r1, [r6, #0]
 800bbb8:	a805      	add	r0, sp, #20
 800bbba:	f7f6 fb99 	bl	80022f0 <osMessageGet>
    
    if(event.status == osEventMessage)
 800bbbe:	9b05      	ldr	r3, [sp, #20]
 800bbc0:	2b10      	cmp	r3, #16
 800bbc2:	d002      	beq.n	800bbca <sys_arch_mbox_fetch+0x28>
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 800bbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc8:	e015      	b.n	800bbf6 <sys_arch_mbox_fetch+0x54>
      *msg = (void *)event.value.v;
 800bbca:	9b06      	ldr	r3, [sp, #24]
 800bbcc:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 800bbce:	f7f6 fa30 	bl	8002032 <osKernelSysTick>
 800bbd2:	1b00      	subs	r0, r0, r4
 800bbd4:	e00f      	b.n	800bbf6 <sys_arch_mbox_fetch+0x54>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 800bbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbda:	6831      	ldr	r1, [r6, #0]
 800bbdc:	4668      	mov	r0, sp
 800bbde:	f7f6 fb87 	bl	80022f0 <osMessageGet>
 800bbe2:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 800bbe6:	ab08      	add	r3, sp, #32
 800bbe8:	e903 0007 	stmdb	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800bbec:	9b06      	ldr	r3, [sp, #24]
 800bbee:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 800bbf0:	f7f6 fa1f 	bl	8002032 <osKernelSysTick>
 800bbf4:	1b00      	subs	r0, r0, r4
  }
}
 800bbf6:	b009      	add	sp, #36	; 0x24
 800bbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bbfa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800bbfa:	b510      	push	{r4, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	460c      	mov	r4, r1
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 800bc00:	2200      	movs	r2, #0
 800bc02:	6801      	ldr	r1, [r0, #0]
 800bc04:	a801      	add	r0, sp, #4
 800bc06:	f7f6 fb73 	bl	80022f0 <osMessageGet>
  
  if(event.status == osEventMessage)
 800bc0a:	9b01      	ldr	r3, [sp, #4]
 800bc0c:	2b10      	cmp	r3, #16
 800bc0e:	d003      	beq.n	800bc18 <sys_arch_mbox_tryfetch+0x1e>
    *msg = (void *)event.value.v;
    return ERR_OK;
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 800bc14:	b004      	add	sp, #16
 800bc16:	bd10      	pop	{r4, pc}
    *msg = (void *)event.value.v;
 800bc18:	9b02      	ldr	r3, [sp, #8]
 800bc1a:	6023      	str	r3, [r4, #0]
    return ERR_OK;
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	e7f9      	b.n	800bc14 <sys_arch_mbox_tryfetch+0x1a>

0800bc20 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
  if (*mbox == SYS_MBOX_NULL) 
 800bc20:	6803      	ldr	r3, [r0, #0]
 800bc22:	b10b      	cbz	r3, 800bc28 <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 800bc24:	2001      	movs	r0, #1
}                                             
 800bc26:	4770      	bx	lr
    return 0;
 800bc28:	2000      	movs	r0, #0
 800bc2a:	4770      	bx	lr

0800bc2c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
  *mbox = SYS_MBOX_NULL;                      
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	6003      	str	r3, [r0, #0]
 800bc30:	4770      	bx	lr

0800bc32 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800bc32:	b530      	push	{r4, r5, lr}
 800bc34:	b083      	sub	sp, #12
 800bc36:	4604      	mov	r4, r0
 800bc38:	460d      	mov	r5, r1
  osSemaphoreDef(SEM);
 800bc3a:	a802      	add	r0, sp, #8
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	f840 3d04 	str.w	r3, [r0, #-4]!

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800bc42:	2101      	movs	r1, #1
 800bc44:	f7f6 fa90 	bl	8002168 <osSemaphoreCreate>
 800bc48:	6020      	str	r0, [r4, #0]
	
  if(*sem == NULL)
 800bc4a:	b140      	cbz	r0, 800bc5e <sys_sem_new+0x2c>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
  }
	
  if(count == 0)	// Means it can't be taken
 800bc4c:	b115      	cbz	r5, 800bc54 <sys_sem_new+0x22>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 800bc4e:	2000      	movs	r0, #0
}
 800bc50:	b003      	add	sp, #12
 800bc52:	bd30      	pop	{r4, r5, pc}
    osSemaphoreWait(*sem,0);
 800bc54:	2100      	movs	r1, #0
 800bc56:	f7f6 fa9b 	bl	8002190 <osSemaphoreWait>
	return ERR_OK;
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	e7f8      	b.n	800bc50 <sys_sem_new+0x1e>
		return ERR_MEM;
 800bc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc62:	e7f5      	b.n	800bc50 <sys_sem_new+0x1e>

0800bc64 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800bc64:	b570      	push	{r4, r5, r6, lr}
 800bc66:	4604      	mov	r4, r0
 800bc68:	460e      	mov	r6, r1
  uint32_t starttime = osKernelSysTick();
 800bc6a:	f7f6 f9e2 	bl	8002032 <osKernelSysTick>
 800bc6e:	4605      	mov	r5, r0
  
  if(timeout != 0)
 800bc70:	b956      	cbnz	r6, 800bc88 <sys_arch_sem_wait+0x24>
      return SYS_ARCH_TIMEOUT;
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800bc72:	f04f 31ff 	mov.w	r1, #4294967295
 800bc76:	6820      	ldr	r0, [r4, #0]
 800bc78:	f7f6 fa8a 	bl	8002190 <osSemaphoreWait>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d1f8      	bne.n	800bc72 <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 800bc80:	f7f6 f9d7 	bl	8002032 <osKernelSysTick>
 800bc84:	1b40      	subs	r0, r0, r5
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800bc88:	4631      	mov	r1, r6
 800bc8a:	6820      	ldr	r0, [r4, #0]
 800bc8c:	f7f6 fa80 	bl	8002190 <osSemaphoreWait>
 800bc90:	b110      	cbz	r0, 800bc98 <sys_arch_sem_wait+0x34>
      return SYS_ARCH_TIMEOUT;
 800bc92:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 800bc96:	bd70      	pop	{r4, r5, r6, pc}
      return (osKernelSysTick() - starttime);
 800bc98:	f7f6 f9cb 	bl	8002032 <osKernelSysTick>
 800bc9c:	1b40      	subs	r0, r0, r5
 800bc9e:	bd70      	pop	{r4, r5, r6, pc}

0800bca0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800bca0:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 800bca2:	6800      	ldr	r0, [r0, #0]
 800bca4:	f7f6 faae 	bl	8002204 <osSemaphoreRelease>
 800bca8:	bd08      	pop	{r3, pc}

0800bcaa <sys_sem_free>:
}

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800bcaa:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 800bcac:	6800      	ldr	r0, [r0, #0]
 800bcae:	f7f6 fad7 	bl	8002260 <osSemaphoreDelete>
 800bcb2:	bd08      	pop	{r3, pc}

0800bcb4 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
  if (*sem == SYS_SEM_NULL)
 800bcb4:	6803      	ldr	r3, [r0, #0]
 800bcb6:	b10b      	cbz	r3, 800bcbc <sys_sem_valid+0x8>
    return 0;
  else
    return 1;                                       
 800bcb8:	2001      	movs	r0, #1
}
 800bcba:	4770      	bx	lr
    return 0;
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	4770      	bx	lr

0800bcc0 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	6003      	str	r3, [r0, #0]
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 800bcc8:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800bcca:	4803      	ldr	r0, [pc, #12]	; (800bcd8 <sys_init+0x10>)
 800bccc:	f7f6 f9de 	bl	800208c <osMutexCreate>
 800bcd0:	4b02      	ldr	r3, [pc, #8]	; (800bcdc <sys_init+0x14>)
 800bcd2:	6018      	str	r0, [r3, #0]
 800bcd4:	bd08      	pop	{r3, pc}
 800bcd6:	bf00      	nop
 800bcd8:	08010c14 	.word	0x08010c14
 800bcdc:	200088bc 	.word	0x200088bc

0800bce0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800bce0:	b510      	push	{r4, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	4604      	mov	r4, r0
  
  osMutexDef(MUTEX);
 800bce6:	a802      	add	r0, sp, #8
 800bce8:	2300      	movs	r3, #0
 800bcea:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 800bcee:	f7f6 f9cd 	bl	800208c <osMutexCreate>
 800bcf2:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 800bcf4:	b110      	cbz	r0, 800bcfc <sys_mutex_new+0x1c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800bcf6:	2000      	movs	r0, #0
}
 800bcf8:	b002      	add	sp, #8
 800bcfa:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 800bcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bd00:	e7fa      	b.n	800bcf8 <sys_mutex_new+0x18>

0800bd02 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800bd02:	b508      	push	{r3, lr}
  osMutexWait (*mutex, osWaitForever);
 800bd04:	f04f 31ff 	mov.w	r1, #4294967295
 800bd08:	6800      	ldr	r0, [r0, #0]
 800bd0a:	f7f6 f9c5 	bl	8002098 <osMutexWait>
 800bd0e:	bd08      	pop	{r3, pc}

0800bd10 <sys_mutex_unlock>:
}

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800bd10:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 800bd12:	6800      	ldr	r0, [r0, #0]
 800bd14:	f7f6 f9fa 	bl	800210c <osMutexRelease>
 800bd18:	bd08      	pop	{r3, pc}

0800bd1a <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800bd1a:	b500      	push	{lr}
 800bd1c:	b087      	sub	sp, #28
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800bd1e:	9001      	str	r0, [sp, #4]
 800bd20:	9102      	str	r1, [sp, #8]
 800bd22:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800bd26:	f8ad 100c 	strh.w	r1, [sp, #12]
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	9104      	str	r1, [sp, #16]
 800bd2e:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 800bd30:	4611      	mov	r1, r2
 800bd32:	a801      	add	r0, sp, #4
 800bd34:	f7f6 f987 	bl	8002046 <osThreadCreate>
}
 800bd38:	b007      	add	sp, #28
 800bd3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800bd40 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800bd40:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800bd42:	f04f 31ff 	mov.w	r1, #4294967295
 800bd46:	4b03      	ldr	r3, [pc, #12]	; (800bd54 <sys_arch_protect+0x14>)
 800bd48:	6818      	ldr	r0, [r3, #0]
 800bd4a:	f7f6 f9a5 	bl	8002098 <osMutexWait>
  return (sys_prot_t)1;
}
 800bd4e:	2001      	movs	r0, #1
 800bd50:	bd08      	pop	{r3, pc}
 800bd52:	bf00      	nop
 800bd54:	200088bc 	.word	0x200088bc

0800bd58 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800bd58:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800bd5a:	4b02      	ldr	r3, [pc, #8]	; (800bd64 <sys_arch_unprotect+0xc>)
 800bd5c:	6818      	ldr	r0, [r3, #0]
 800bd5e:	f7f6 f9d5 	bl	800210c <osMutexRelease>
 800bd62:	bd08      	pop	{r3, pc}
 800bd64:	200088bc 	.word	0x200088bc

0800bd68 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800bd6c:	4834      	ldr	r0, [pc, #208]	; (800be40 <low_level_input+0xd8>)
 800bd6e:	f7f4 fe7b 	bl	8000a68 <HAL_ETH_GetReceivedFrame_IT>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d160      	bne.n	800be38 <low_level_input+0xd0>
    return NULL;
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800bd76:	4b32      	ldr	r3, [pc, #200]	; (800be40 <low_level_input+0xd8>)
 800bd78:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800bd7a:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
  
  if (len > 0)
 800bd7e:	b949      	cbnz	r1, 800bd94 <low_level_input+0x2c>
  struct pbuf *p = NULL;
 800bd80:	f04f 0a00 	mov.w	sl, #0
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
  }
  
  if (p != NULL)
 800bd84:	f1ba 0f00 	cmp.w	sl, #0
 800bd88:	d033      	beq.n	800bdf2 <low_level_input+0x8a>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bd8a:	4b2d      	ldr	r3, [pc, #180]	; (800be40 <low_level_input+0xd8>)
 800bd8c:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
 800bd8e:	46d1      	mov	r9, sl
    bufferoffset = 0;
 800bd90:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 800bd92:	e027      	b.n	800bde4 <low_level_input+0x7c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800bd94:	2203      	movs	r2, #3
 800bd96:	2004      	movs	r0, #4
 800bd98:	f7fb fcd8 	bl	800774c <pbuf_alloc>
 800bd9c:	4682      	mov	sl, r0
 800bd9e:	e7f1      	b.n	800bd84 <low_level_input+0x1c>
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800bda0:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800bda4:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800bda8:	3204      	adds	r2, #4
 800bdaa:	eb08 0104 	add.w	r1, r8, r4
 800bdae:	4430      	add	r0, r6
 800bdb0:	f000 ff53 	bl	800cc5a <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800bdb4:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800bdb6:	f8d7 8008 	ldr.w	r8, [r7, #8]
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800bdba:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800bdbe:	1b36      	subs	r6, r6, r4
 800bdc0:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 800bdc4:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bdc6:	18a5      	adds	r5, r4, r2
 800bdc8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800bdcc:	429d      	cmp	r5, r3
 800bdce:	d8e7      	bhi.n	800bda0 <low_level_input+0x38>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800bdd0:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800bdd4:	eb08 0104 	add.w	r1, r8, r4
 800bdd8:	4430      	add	r0, r6
 800bdda:	f000 ff3e 	bl	800cc5a <memcpy>
    for(q = p; q != NULL; q = q->next)
 800bdde:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 800bde2:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 800bde4:	f1b9 0f00 	cmp.w	r9, #0
 800bde8:	d003      	beq.n	800bdf2 <low_level_input+0x8a>
      byteslefttocopy = q->len;
 800bdea:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 800bdee:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800bdf0:	e7e9      	b.n	800bdc6 <low_level_input+0x5e>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800bdf2:	4b13      	ldr	r3, [pc, #76]	; (800be40 <low_level_input+0xd8>)
 800bdf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	e005      	b.n	800be06 <low_level_input+0x9e>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800be00:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800be02:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800be04:	3101      	adds	r1, #1
 800be06:	4a0e      	ldr	r2, [pc, #56]	; (800be40 <low_level_input+0xd8>)
 800be08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800be0a:	4291      	cmp	r1, r2
 800be0c:	d3f5      	bcc.n	800bdfa <low_level_input+0x92>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800be0e:	4b0c      	ldr	r3, [pc, #48]	; (800be40 <low_level_input+0xd8>)
 800be10:	2200      	movs	r2, #0
 800be12:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f241 0214 	movw	r2, #4116	; 0x1014
 800be1a:	589a      	ldr	r2, [r3, r2]
 800be1c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800be20:	d007      	beq.n	800be32 <low_level_input+0xca>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800be22:	2180      	movs	r1, #128	; 0x80
 800be24:	f241 0214 	movw	r2, #4116	; 0x1014
 800be28:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800be2a:	2100      	movs	r1, #0
 800be2c:	f241 0208 	movw	r2, #4104	; 0x1008
 800be30:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 800be32:	4650      	mov	r0, sl
 800be34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 800be38:	f04f 0a00 	mov.w	sl, #0
 800be3c:	e7f9      	b.n	800be32 <low_level_input+0xca>
 800be3e:	bf00      	nop
 800be40:	2000a190 	.word	0x2000a190

0800be44 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4605      	mov	r5, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800be48:	f04f 31ff 	mov.w	r1, #4294967295
 800be4c:	4b0b      	ldr	r3, [pc, #44]	; (800be7c <ethernetif_input+0x38>)
 800be4e:	6818      	ldr	r0, [r3, #0]
 800be50:	f7f6 f99e 	bl	8002190 <osSemaphoreWait>
 800be54:	2800      	cmp	r0, #0
 800be56:	d1f7      	bne.n	800be48 <ethernetif_input+0x4>
 800be58:	e001      	b.n	800be5e <ethernetif_input+0x1a>
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
      } while(p!=NULL);
 800be5a:	2c00      	cmp	r4, #0
 800be5c:	d0f4      	beq.n	800be48 <ethernetif_input+0x4>
        p = low_level_input( netif );
 800be5e:	4628      	mov	r0, r5
 800be60:	f7ff ff82 	bl	800bd68 <low_level_input>
        if   (p != NULL)
 800be64:	4604      	mov	r4, r0
 800be66:	2800      	cmp	r0, #0
 800be68:	d0f7      	beq.n	800be5a <ethernetif_input+0x16>
          if (netif->input( p, netif) != ERR_OK )
 800be6a:	692b      	ldr	r3, [r5, #16]
 800be6c:	4629      	mov	r1, r5
 800be6e:	4798      	blx	r3
 800be70:	2800      	cmp	r0, #0
 800be72:	d0f2      	beq.n	800be5a <ethernetif_input+0x16>
            pbuf_free(p);
 800be74:	4620      	mov	r0, r4
 800be76:	f7fb fbfd 	bl	8007674 <pbuf_free>
 800be7a:	e7ee      	b.n	800be5a <ethernetif_input+0x16>
 800be7c:	20003f24 	.word	0x20003f24

0800be80 <low_level_output>:
{
 800be80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800be86:	4b2c      	ldr	r3, [pc, #176]	; (800bf38 <low_level_output+0xb8>)
 800be88:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800be8a:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 800be8e:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 800be90:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 800be92:	f1bb 0f00 	cmp.w	fp, #0
 800be96:	d032      	beq.n	800befe <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800be98:	6833      	ldr	r3, [r6, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	db35      	blt.n	800bf0a <low_level_output+0x8a>
      byteslefttocopy = q->len;
 800be9e:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 800bea2:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800bea4:	eb04 0809 	add.w	r8, r4, r9
 800bea8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800beac:	4598      	cmp	r8, r3
 800beae:	d919      	bls.n	800bee4 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800beb0:	f8db 1004 	ldr.w	r1, [fp, #4]
 800beb4:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800beb8:	3204      	adds	r2, #4
 800beba:	4429      	add	r1, r5
 800bebc:	eb0a 0004 	add.w	r0, sl, r4
 800bec0:	f000 fecb 	bl	800cc5a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800bec4:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800bec6:	6833      	ldr	r3, [r6, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	db21      	blt.n	800bf10 <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800becc:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800bed0:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800bed4:	1b2d      	subs	r5, r5, r4
 800bed6:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800beda:	1b3f      	subs	r7, r7, r4
 800bedc:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800bee0:	2400      	movs	r4, #0
 800bee2:	e7df      	b.n	800bea4 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800bee4:	f8db 1004 	ldr.w	r1, [fp, #4]
 800bee8:	464a      	mov	r2, r9
 800beea:	4429      	add	r1, r5
 800beec:	eb0a 0004 	add.w	r0, sl, r4
 800bef0:	f000 feb3 	bl	800cc5a <memcpy>
      framelength = framelength + byteslefttocopy;
 800bef4:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 800bef6:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 800befa:	4644      	mov	r4, r8
 800befc:	e7c9      	b.n	800be92 <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 800befe:	4639      	mov	r1, r7
 800bf00:	480d      	ldr	r0, [pc, #52]	; (800bf38 <low_level_output+0xb8>)
 800bf02:	f7f4 fd1f 	bl	8000944 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800bf06:	2000      	movs	r0, #0
 800bf08:	e004      	b.n	800bf14 <low_level_output+0x94>
        errval = ERR_USE;
 800bf0a:	f06f 0007 	mvn.w	r0, #7
 800bf0e:	e001      	b.n	800bf14 <low_level_output+0x94>
          errval = ERR_USE;
 800bf10:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800bf14:	4b08      	ldr	r3, [pc, #32]	; (800bf38 <low_level_output+0xb8>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f241 0214 	movw	r2, #4116	; 0x1014
 800bf1c:	589a      	ldr	r2, [r3, r2]
 800bf1e:	f012 0f20 	tst.w	r2, #32
 800bf22:	d007      	beq.n	800bf34 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800bf24:	2120      	movs	r1, #32
 800bf26:	f241 0214 	movw	r2, #4116	; 0x1014
 800bf2a:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	f241 0204 	movw	r2, #4100	; 0x1004
 800bf32:	5099      	str	r1, [r3, r2]
}
 800bf34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf38:	2000a190 	.word	0x2000a190

0800bf3c <low_level_init>:
{ 
 800bf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf3e:	b089      	sub	sp, #36	; 0x24
 800bf40:	4604      	mov	r4, r0
  heth.Instance = ETH;
 800bf42:	4835      	ldr	r0, [pc, #212]	; (800c018 <low_level_init+0xdc>)
 800bf44:	4b35      	ldr	r3, [pc, #212]	; (800c01c <low_level_init+0xe0>)
 800bf46:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800bf48:	2201      	movs	r2, #1
 800bf4a:	6042      	str	r2, [r0, #4]
  heth.Init.PhyAddress = PHY_USER_NAME_PHY_ADDRESS;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 800bf50:	f88d 3018 	strb.w	r3, [sp, #24]
  MACAddr[1] = 0x02;
 800bf54:	2102      	movs	r1, #2
 800bf56:	f88d 1019 	strb.w	r1, [sp, #25]
  MACAddr[2] = 0xA2;
 800bf5a:	21a2      	movs	r1, #162	; 0xa2
 800bf5c:	f88d 101a 	strb.w	r1, [sp, #26]
  MACAddr[3] = 0x42;
 800bf60:	2142      	movs	r1, #66	; 0x42
 800bf62:	f88d 101b 	strb.w	r1, [sp, #27]
  MACAddr[4] = 0x50;
 800bf66:	2150      	movs	r1, #80	; 0x50
 800bf68:	f88d 101c 	strb.w	r1, [sp, #28]
  MACAddr[5] = 0xE4;
 800bf6c:	21e4      	movs	r1, #228	; 0xe4
 800bf6e:	f88d 101d 	strb.w	r1, [sp, #29]
  heth.Init.MACAddr = &MACAddr[0];
 800bf72:	a906      	add	r1, sp, #24
 800bf74:	6141      	str	r1, [r0, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800bf76:	6182      	str	r2, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800bf78:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 800bf7a:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bf7c:	f7f4 fe7e 	bl	8000c7c <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800bf80:	b928      	cbnz	r0, 800bf8e <low_level_init+0x52>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bf82:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800bf86:	f043 0304 	orr.w	r3, r3, #4
 800bf8a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800bf8e:	4f22      	ldr	r7, [pc, #136]	; (800c018 <low_level_init+0xdc>)
 800bf90:	2304      	movs	r3, #4
 800bf92:	4a23      	ldr	r2, [pc, #140]	; (800c020 <low_level_init+0xe4>)
 800bf94:	4923      	ldr	r1, [pc, #140]	; (800c024 <low_level_init+0xe8>)
 800bf96:	4638      	mov	r0, r7
 800bf98:	f7f4 fc64 	bl	8000864 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800bf9c:	2304      	movs	r3, #4
 800bf9e:	4a22      	ldr	r2, [pc, #136]	; (800c028 <low_level_init+0xec>)
 800bfa0:	4922      	ldr	r1, [pc, #136]	; (800c02c <low_level_init+0xf0>)
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	f7f4 fc97 	bl	80008d6 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bfa8:	2306      	movs	r3, #6
 800bfaa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	781a      	ldrb	r2, [r3, #0]
 800bfb2:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bfb6:	785a      	ldrb	r2, [r3, #1]
 800bfb8:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bfbc:	789a      	ldrb	r2, [r3, #2]
 800bfbe:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bfc2:	78da      	ldrb	r2, [r3, #3]
 800bfc4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bfc8:	791a      	ldrb	r2, [r3, #4]
 800bfca:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bfce:	795b      	ldrb	r3, [r3, #5]
 800bfd0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800bfd4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800bfd8:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bfda:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800bfde:	f043 030a 	orr.w	r3, r3, #10
 800bfe2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  osSemaphoreDef(SEM);
 800bfe6:	a808      	add	r0, sp, #32
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f840 3d0c 	str.w	r3, [r0, #-12]!
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800bfee:	2101      	movs	r1, #1
 800bff0:	f7f6 f8ba 	bl	8002168 <osSemaphoreCreate>
 800bff4:	4b0e      	ldr	r3, [pc, #56]	; (800c030 <low_level_init+0xf4>)
 800bff6:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800bff8:	466d      	mov	r5, sp
 800bffa:	4e0e      	ldr	r6, [pc, #56]	; (800c034 <low_level_init+0xf8>)
 800bffc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c000:	6833      	ldr	r3, [r6, #0]
 800c002:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 800c004:	4621      	mov	r1, r4
 800c006:	4668      	mov	r0, sp
 800c008:	f7f6 f81d 	bl	8002046 <osThreadCreate>
  HAL_ETH_Start(&heth);
 800c00c:	4638      	mov	r0, r7
 800c00e:	f7f4 ff61 	bl	8000ed4 <HAL_ETH_Start>
}
 800c012:	b009      	add	sp, #36	; 0x24
 800c014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c016:	bf00      	nop
 800c018:	2000a190 	.word	0x2000a190
 800c01c:	40028000 	.word	0x40028000
 800c020:	2000a1d8 	.word	0x2000a1d8
 800c024:	200088c0 	.word	0x200088c0
 800c028:	20008940 	.word	0x20008940
 800c02c:	2000a110 	.word	0x2000a110
 800c030:	20003f24 	.word	0x20003f24
 800c034:	0800ccbc 	.word	0x0800ccbc

0800c038 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800c038:	6802      	ldr	r2, [r0, #0]
 800c03a:	4b29      	ldr	r3, [pc, #164]	; (800c0e0 <HAL_ETH_MspInit+0xa8>)
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d000      	beq.n	800c042 <HAL_ETH_MspInit+0xa>
 800c040:	4770      	bx	lr
{
 800c042:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c044:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_ETH_CLK_ENABLE();
 800c046:	2400      	movs	r4, #0
 800c048:	9400      	str	r4, [sp, #0]
 800c04a:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800c04e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c050:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800c054:	631a      	str	r2, [r3, #48]	; 0x30
 800c056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c058:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800c05c:	9200      	str	r2, [sp, #0]
 800c05e:	9a00      	ldr	r2, [sp, #0]
 800c060:	9401      	str	r4, [sp, #4]
 800c062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c064:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c068:	631a      	str	r2, [r3, #48]	; 0x30
 800c06a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c06c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800c070:	9201      	str	r2, [sp, #4]
 800c072:	9a01      	ldr	r2, [sp, #4]
 800c074:	9402      	str	r4, [sp, #8]
 800c076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c078:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800c07c:	631a      	str	r2, [r3, #48]	; 0x30
 800c07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c084:	9302      	str	r3, [sp, #8]
 800c086:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c088:	233e      	movs	r3, #62	; 0x3e
 800c08a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c08c:	2702      	movs	r7, #2
 800c08e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c090:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c092:	2603      	movs	r6, #3
 800c094:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c096:	250b      	movs	r5, #11
 800c098:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c09a:	a903      	add	r1, sp, #12
 800c09c:	4811      	ldr	r0, [pc, #68]	; (800c0e4 <HAL_ETH_MspInit+0xac>)
 800c09e:	f7f4 ff3b 	bl	8000f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800c0a2:	238f      	movs	r3, #143	; 0x8f
 800c0a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0a6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0a8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0aa:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c0ac:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0ae:	a903      	add	r1, sp, #12
 800c0b0:	480d      	ldr	r0, [pc, #52]	; (800c0e8 <HAL_ETH_MspInit+0xb0>)
 800c0b2:	f7f4 ff31 	bl	8000f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 800c0b6:	f643 5303 	movw	r3, #15619	; 0x3d03
 800c0ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0bc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0be:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0c0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c0c2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0c4:	a903      	add	r1, sp, #12
 800c0c6:	4809      	ldr	r0, [pc, #36]	; (800c0ec <HAL_ETH_MspInit+0xb4>)
 800c0c8:	f7f4 ff26 	bl	8000f18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c0cc:	4622      	mov	r2, r4
 800c0ce:	2105      	movs	r1, #5
 800c0d0:	203d      	movs	r0, #61	; 0x3d
 800c0d2:	f7f4 fa69 	bl	80005a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c0d6:	203d      	movs	r0, #61	; 0x3d
 800c0d8:	f7f4 fa98 	bl	800060c <HAL_NVIC_EnableIRQ>
}
 800c0dc:	b009      	add	sp, #36	; 0x24
 800c0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0e0:	40028000 	.word	0x40028000
 800c0e4:	40020800 	.word	0x40020800
 800c0e8:	40020000 	.word	0x40020000
 800c0ec:	40020400 	.word	0x40020400

0800c0f0 <HAL_ETH_RxCpltCallback>:
{
 800c0f0:	b508      	push	{r3, lr}
  osSemaphoreRelease(s_xSemaphore);
 800c0f2:	4b02      	ldr	r3, [pc, #8]	; (800c0fc <HAL_ETH_RxCpltCallback+0xc>)
 800c0f4:	6818      	ldr	r0, [r3, #0]
 800c0f6:	f7f6 f885 	bl	8002204 <osSemaphoreRelease>
 800c0fa:	bd08      	pop	{r3, pc}
 800c0fc:	20003f24 	.word	0x20003f24

0800c100 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c100:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c102:	4604      	mov	r4, r0
 800c104:	b170      	cbz	r0, 800c124 <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c106:	2373      	movs	r3, #115	; 0x73
 800c108:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800c10c:	2374      	movs	r3, #116	; 0x74
 800c10e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c112:	4b08      	ldr	r3, [pc, #32]	; (800c134 <ethernetif_init+0x34>)
 800c114:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c116:	4b08      	ldr	r3, [pc, #32]	; (800c138 <ethernetif_init+0x38>)
 800c118:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c11a:	4620      	mov	r0, r4
 800c11c:	f7ff ff0e 	bl	800bf3c <low_level_init>

  return ERR_OK;
}
 800c120:	2000      	movs	r0, #0
 800c122:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c124:	4b05      	ldr	r3, [pc, #20]	; (800c13c <ethernetif_init+0x3c>)
 800c126:	f240 2249 	movw	r2, #585	; 0x249
 800c12a:	4905      	ldr	r1, [pc, #20]	; (800c140 <ethernetif_init+0x40>)
 800c12c:	4805      	ldr	r0, [pc, #20]	; (800c144 <ethernetif_init+0x44>)
 800c12e:	f000 fb70 	bl	800c812 <iprintf>
 800c132:	e7e8      	b.n	800c106 <ethernetif_init+0x6>
 800c134:	08005d81 	.word	0x08005d81
 800c138:	0800be81 	.word	0x0800be81
 800c13c:	08010c18 	.word	0x08010c18
 800c140:	0800f474 	.word	0x0800f474
 800c144:	0800cd98 	.word	0x0800cd98

0800c148 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800c148:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800c14a:	f7f4 fa01 	bl	8000550 <HAL_GetTick>
}
 800c14e:	bd08      	pop	{r3, pc}

0800c150 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 800c150:	b510      	push	{r4, lr}
 800c152:	b082      	sub	sp, #8
	/* init code for LWIP */
	MX_LWIP_Init();
 800c154:	f000 f8be 	bl	800c2d4 <MX_LWIP_Init>

	/* USER CODE BEGIN StartDefaultTask */
	printf("lwIP init completed.\n");
 800c158:	4817      	ldr	r0, [pc, #92]	; (800c1b8 <StartDefaultTask+0x68>)
 800c15a:	f000 fb7d 	bl	800c858 <puts>
	struct netconn *conn;
	err_t err;
	conn = netconn_new(NETCONN_TCP);
 800c15e:	2200      	movs	r2, #0
 800c160:	4611      	mov	r1, r2
 800c162:	2010      	movs	r0, #16
 800c164:	f7f7 fe3a 	bl	8003ddc <netconn_new_with_proto_and_callback>
	if (conn != NULL) {
 800c168:	b1c0      	cbz	r0, 800c19c <StartDefaultTask+0x4c>
 800c16a:	4604      	mov	r4, r0
		err = netconn_bind(conn, IP_ADDR_ANY, 80);
 800c16c:	2250      	movs	r2, #80	; 0x50
 800c16e:	4913      	ldr	r1, [pc, #76]	; (800c1bc <StartDefaultTask+0x6c>)
 800c170:	f7f7 feaa 	bl	8003ec8 <netconn_bind>
		if (err == ERR_OK) {
 800c174:	b9b0      	cbnz	r0, 800c1a4 <StartDefaultTask+0x54>
			netconn_listen(conn);
 800c176:	21ff      	movs	r1, #255	; 0xff
 800c178:	4620      	mov	r0, r4
 800c17a:	f7f7 fecb 	bl	8003f14 <netconn_listen_with_backlog>
			sys_thread_new("web_server_thread", web_server_thread, (void*) conn,
 800c17e:	2300      	movs	r3, #0
 800c180:	9300      	str	r3, [sp, #0]
 800c182:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c186:	4622      	mov	r2, r4
 800c188:	490d      	ldr	r1, [pc, #52]	; (800c1c0 <StartDefaultTask+0x70>)
 800c18a:	480e      	ldr	r0, [pc, #56]	; (800c1c4 <StartDefaultTask+0x74>)
 800c18c:	f7ff fdc5 	bl	800bd1a <sys_thread_new>
			DEFAULT_THREAD_STACKSIZE / 4, osPriorityNormal);
			printf("Binding ... OK\n");
 800c190:	480d      	ldr	r0, [pc, #52]	; (800c1c8 <StartDefaultTask+0x78>)
 800c192:	f000 fb61 	bl	800c858 <puts>
			osDelay(1);
 800c196:	2001      	movs	r0, #1
 800c198:	f7f5 ff6f 	bl	800207a <osDelay>
	for (;;) {
/*
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
		osDelay(249);
*/
		osDelay(1);
 800c19c:	2001      	movs	r0, #1
 800c19e:	f7f5 ff6c 	bl	800207a <osDelay>
 800c1a2:	e7fb      	b.n	800c19c <StartDefaultTask+0x4c>
			netconn_delete(conn);
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f7f7 fe75 	bl	8003e94 <netconn_delete>
			printf("Binding ... Err\n");
 800c1aa:	4808      	ldr	r0, [pc, #32]	; (800c1cc <StartDefaultTask+0x7c>)
 800c1ac:	f000 fb54 	bl	800c858 <puts>
			osDelay(1);
 800c1b0:	2001      	movs	r0, #1
 800c1b2:	f7f5 ff62 	bl	800207a <osDelay>
 800c1b6:	e7f1      	b.n	800c19c <StartDefaultTask+0x4c>
 800c1b8:	08010c34 	.word	0x08010c34
 800c1bc:	0800f660 	.word	0x0800f660
 800c1c0:	0800c985 	.word	0x0800c985
 800c1c4:	08010c4c 	.word	0x08010c4c
 800c1c8:	08010c60 	.word	0x08010c60
 800c1cc:	08010c70 	.word	0x08010c70

0800c1d0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800c1d0:	b530      	push	{r4, r5, lr}
 800c1d2:	b087      	sub	sp, #28
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800c1d4:	ac01      	add	r4, sp, #4
 800c1d6:	4d06      	ldr	r5, [pc, #24]	; (800c1f0 <MX_FREERTOS_Init+0x20>)
 800c1d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c1da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	6023      	str	r3, [r4, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	a801      	add	r0, sp, #4
 800c1e4:	f7f5 ff2f 	bl	8002046 <osThreadCreate>
 800c1e8:	4b02      	ldr	r3, [pc, #8]	; (800c1f4 <MX_FREERTOS_Init+0x24>)
 800c1ea:	6018      	str	r0, [r3, #0]
}
 800c1ec:	b007      	add	sp, #28
 800c1ee:	bd30      	pop	{r4, r5, pc}
 800c1f0:	0800ccd0 	.word	0x0800ccd0
 800c1f4:	2000b9a8 	.word	0x2000b9a8

0800c1f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800c1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1fa:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1fc:	2400      	movs	r4, #0
 800c1fe:	9407      	str	r4, [sp, #28]
 800c200:	9408      	str	r4, [sp, #32]
 800c202:	9409      	str	r4, [sp, #36]	; 0x24
 800c204:	940a      	str	r4, [sp, #40]	; 0x28
 800c206:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c208:	9401      	str	r4, [sp, #4]
 800c20a:	4b2f      	ldr	r3, [pc, #188]	; (800c2c8 <MX_GPIO_Init+0xd0>)
 800c20c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c20e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c212:	631a      	str	r2, [r3, #48]	; 0x30
 800c214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c216:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c21a:	9201      	str	r2, [sp, #4]
 800c21c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c21e:	9402      	str	r4, [sp, #8]
 800c220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c222:	f042 0204 	orr.w	r2, r2, #4
 800c226:	631a      	str	r2, [r3, #48]	; 0x30
 800c228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c22a:	f002 0204 	and.w	r2, r2, #4
 800c22e:	9202      	str	r2, [sp, #8]
 800c230:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c232:	9403      	str	r4, [sp, #12]
 800c234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c236:	f042 0201 	orr.w	r2, r2, #1
 800c23a:	631a      	str	r2, [r3, #48]	; 0x30
 800c23c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c23e:	f002 0201 	and.w	r2, r2, #1
 800c242:	9203      	str	r2, [sp, #12]
 800c244:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c246:	9404      	str	r4, [sp, #16]
 800c248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c24a:	f042 0202 	orr.w	r2, r2, #2
 800c24e:	631a      	str	r2, [r3, #48]	; 0x30
 800c250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c252:	f002 0202 	and.w	r2, r2, #2
 800c256:	9204      	str	r2, [sp, #16]
 800c258:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c25a:	9405      	str	r4, [sp, #20]
 800c25c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c25e:	f042 0208 	orr.w	r2, r2, #8
 800c262:	631a      	str	r2, [r3, #48]	; 0x30
 800c264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c266:	f002 0208 	and.w	r2, r2, #8
 800c26a:	9205      	str	r2, [sp, #20]
 800c26c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c26e:	9406      	str	r4, [sp, #24]
 800c270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c272:	f042 0210 	orr.w	r2, r2, #16
 800c276:	631a      	str	r2, [r3, #48]	; 0x30
 800c278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c27a:	f003 0310 	and.w	r3, r3, #16
 800c27e:	9306      	str	r3, [sp, #24]
 800c280:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800c282:	4f12      	ldr	r7, [pc, #72]	; (800c2cc <MX_GPIO_Init+0xd4>)
 800c284:	4622      	mov	r2, r4
 800c286:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c28a:	4638      	mov	r0, r7
 800c28c:	f7f4 ff2a 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_OUT_GPIO_Port, RE_DE_OUT_Pin, GPIO_PIN_RESET);
 800c290:	4e0f      	ldr	r6, [pc, #60]	; (800c2d0 <MX_GPIO_Init+0xd8>)
 800c292:	4622      	mov	r2, r4
 800c294:	2101      	movs	r1, #1
 800c296:	4630      	mov	r0, r6
 800c298:	f7f4 ff24 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c29c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2a0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2a2:	2501      	movs	r5, #1
 800c2a4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2a6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2a8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c2aa:	a907      	add	r1, sp, #28
 800c2ac:	4638      	mov	r0, r7
 800c2ae:	f7f4 fe33 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RE_DE_OUT_Pin;
 800c2b2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2b4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2b6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2b8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(RE_DE_OUT_GPIO_Port, &GPIO_InitStruct);
 800c2ba:	a907      	add	r1, sp, #28
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f7f4 fe2b 	bl	8000f18 <HAL_GPIO_Init>

}
 800c2c2:	b00d      	add	sp, #52	; 0x34
 800c2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	40023800 	.word	0x40023800
 800c2cc:	40020400 	.word	0x40020400
 800c2d0:	40021000 	.word	0x40021000

0800c2d4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2d6:	b085      	sub	sp, #20
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800c2d8:	4f3b      	ldr	r7, [pc, #236]	; (800c3c8 <MX_LWIP_Init+0xf4>)
 800c2da:	23c0      	movs	r3, #192	; 0xc0
 800c2dc:	703b      	strb	r3, [r7, #0]
  IP_ADDRESS[1] = 168;
 800c2de:	23a8      	movs	r3, #168	; 0xa8
 800c2e0:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 4;
 800c2e2:	2304      	movs	r3, #4
 800c2e4:	70bb      	strb	r3, [r7, #2]
  IP_ADDRESS[3] = 253;
 800c2e6:	23fd      	movs	r3, #253	; 0xfd
 800c2e8:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 800c2ea:	4e38      	ldr	r6, [pc, #224]	; (800c3cc <MX_LWIP_Init+0xf8>)
 800c2ec:	23ff      	movs	r3, #255	; 0xff
 800c2ee:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 800c2f0:	7073      	strb	r3, [r6, #1]
  NETMASK_ADDRESS[2] = 255;
 800c2f2:	70b3      	strb	r3, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 800c2f4:	2400      	movs	r4, #0
 800c2f6:	70f4      	strb	r4, [r6, #3]
  GATEWAY_ADDRESS[0] = 0;
 800c2f8:	4d35      	ldr	r5, [pc, #212]	; (800c3d0 <MX_LWIP_Init+0xfc>)
 800c2fa:	702c      	strb	r4, [r5, #0]
  GATEWAY_ADDRESS[1] = 0;
 800c2fc:	706c      	strb	r4, [r5, #1]
  GATEWAY_ADDRESS[2] = 0;
 800c2fe:	70ac      	strb	r4, [r5, #2]
  GATEWAY_ADDRESS[3] = 0;
 800c300:	70ec      	strb	r4, [r5, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800c302:	4621      	mov	r1, r4
 800c304:	4620      	mov	r0, r4
 800c306:	f7f9 f8d7 	bl	80054b8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c30a:	783a      	ldrb	r2, [r7, #0]
 800c30c:	787b      	ldrb	r3, [r7, #1]
 800c30e:	041b      	lsls	r3, r3, #16
 800c310:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c314:	78ba      	ldrb	r2, [r7, #2]
 800c316:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c31a:	78fa      	ldrb	r2, [r7, #3]
 800c31c:	4313      	orrs	r3, r2
 800c31e:	021a      	lsls	r2, r3, #8
 800c320:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800c324:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800c328:	0a19      	lsrs	r1, r3, #8
 800c32a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800c32e:	430a      	orrs	r2, r1
 800c330:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800c334:	4927      	ldr	r1, [pc, #156]	; (800c3d4 <MX_LWIP_Init+0x100>)
 800c336:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c338:	7832      	ldrb	r2, [r6, #0]
 800c33a:	7873      	ldrb	r3, [r6, #1]
 800c33c:	041b      	lsls	r3, r3, #16
 800c33e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c342:	78b2      	ldrb	r2, [r6, #2]
 800c344:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c348:	78f2      	ldrb	r2, [r6, #3]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	021a      	lsls	r2, r3, #8
 800c34e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800c352:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800c356:	0a18      	lsrs	r0, r3, #8
 800c358:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800c35c:	4302      	orrs	r2, r0
 800c35e:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800c362:	4a1d      	ldr	r2, [pc, #116]	; (800c3d8 <MX_LWIP_Init+0x104>)
 800c364:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c366:	7828      	ldrb	r0, [r5, #0]
 800c368:	786b      	ldrb	r3, [r5, #1]
 800c36a:	041b      	lsls	r3, r3, #16
 800c36c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c370:	78a8      	ldrb	r0, [r5, #2]
 800c372:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800c376:	78e8      	ldrb	r0, [r5, #3]
 800c378:	4303      	orrs	r3, r0
 800c37a:	0218      	lsls	r0, r3, #8
 800c37c:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800c380:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800c384:	0a1d      	lsrs	r5, r3, #8
 800c386:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 800c38a:	4328      	orrs	r0, r5
 800c38c:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
 800c390:	4b12      	ldr	r3, [pc, #72]	; (800c3dc <MX_LWIP_Init+0x108>)
 800c392:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c394:	4d12      	ldr	r5, [pc, #72]	; (800c3e0 <MX_LWIP_Init+0x10c>)
 800c396:	4813      	ldr	r0, [pc, #76]	; (800c3e4 <MX_LWIP_Init+0x110>)
 800c398:	9002      	str	r0, [sp, #8]
 800c39a:	4813      	ldr	r0, [pc, #76]	; (800c3e8 <MX_LWIP_Init+0x114>)
 800c39c:	9001      	str	r0, [sp, #4]
 800c39e:	9400      	str	r4, [sp, #0]
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	f7fb f811 	bl	80073c8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f7fb f84e 	bl	8007448 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c3ac:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800c3b0:	f013 0f04 	tst.w	r3, #4
 800c3b4:	d104      	bne.n	800c3c0 <MX_LWIP_Init+0xec>
    netif_set_up(&gnetif);
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800c3b6:	480a      	ldr	r0, [pc, #40]	; (800c3e0 <MX_LWIP_Init+0x10c>)
 800c3b8:	f7fb f85e 	bl	8007478 <netif_set_down>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c3bc:	b005      	add	sp, #20
 800c3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	f7fb f847 	bl	8007454 <netif_set_up>
 800c3c6:	e7f9      	b.n	800c3bc <MX_LWIP_Init+0xe8>
 800c3c8:	2000b9ec 	.word	0x2000b9ec
 800c3cc:	2000b9e8 	.word	0x2000b9e8
 800c3d0:	2000b9b0 	.word	0x2000b9b0
 800c3d4:	2000b9e4 	.word	0x2000b9e4
 800c3d8:	2000b9f0 	.word	0x2000b9f0
 800c3dc:	2000b9f4 	.word	0x2000b9f4
 800c3e0:	2000b9b4 	.word	0x2000b9b4
 800c3e4:	08005401 	.word	0x08005401
 800c3e8:	0800c101 	.word	0x0800c101

0800c3ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c3ec:	b570      	push	{r4, r5, r6, lr}
 800c3ee:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c3f0:	2230      	movs	r2, #48	; 0x30
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	a808      	add	r0, sp, #32
 800c3f6:	f000 fc3b 	bl	800cc70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c3fa:	2400      	movs	r4, #0
 800c3fc:	9403      	str	r4, [sp, #12]
 800c3fe:	9404      	str	r4, [sp, #16]
 800c400:	9405      	str	r4, [sp, #20]
 800c402:	9406      	str	r4, [sp, #24]
 800c404:	9407      	str	r4, [sp, #28]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c406:	9401      	str	r4, [sp, #4]
 800c408:	4b1c      	ldr	r3, [pc, #112]	; (800c47c <SystemClock_Config+0x90>)
 800c40a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c40c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c410:	641a      	str	r2, [r3, #64]	; 0x40
 800c412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c418:	9301      	str	r3, [sp, #4]
 800c41a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c41c:	9402      	str	r4, [sp, #8]
 800c41e:	4b18      	ldr	r3, [pc, #96]	; (800c480 <SystemClock_Config+0x94>)
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c42e:	9302      	str	r3, [sp, #8]
 800c430:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c432:	2301      	movs	r3, #1
 800c434:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c43a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c43c:	2502      	movs	r5, #2
 800c43e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c440:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c444:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800c446:	2319      	movs	r3, #25
 800c448:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800c44a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800c44e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c450:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800c452:	2605      	movs	r6, #5
 800c454:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c456:	a808      	add	r0, sp, #32
 800c458:	f7f4 fe4e 	bl	80010f8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c45c:	230f      	movs	r3, #15
 800c45e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c460:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c462:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c464:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c468:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c46a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c46e:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c470:	4631      	mov	r1, r6
 800c472:	a803      	add	r0, sp, #12
 800c474:	f7f5 f85e 	bl	8001534 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800c478:	b014      	add	sp, #80	; 0x50
 800c47a:	bd70      	pop	{r4, r5, r6, pc}
 800c47c:	40023800 	.word	0x40023800
 800c480:	40007000 	.word	0x40007000

0800c484 <main>:
{
 800c484:	b508      	push	{r3, lr}
  HAL_Init();
 800c486:	f7f4 f83d 	bl	8000504 <HAL_Init>
  SystemClock_Config();
 800c48a:	f7ff ffaf 	bl	800c3ec <SystemClock_Config>
  MX_GPIO_Init();
 800c48e:	f7ff feb3 	bl	800c1f8 <MX_GPIO_Init>
  MX_UART5_Init();
 800c492:	f000 f9fd 	bl	800c890 <MX_UART5_Init>
  MX_FREERTOS_Init();
 800c496:	f7ff fe9b 	bl	800c1d0 <MX_FREERTOS_Init>
  osKernelStart();
 800c49a:	f7f5 fdc5 	bl	8002028 <osKernelStart>
 800c49e:	e7fe      	b.n	800c49e <main+0x1a>

0800c4a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800c4a2:	6802      	ldr	r2, [r0, #0]
 800c4a4:	4b03      	ldr	r3, [pc, #12]	; (800c4b4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d000      	beq.n	800c4ac <HAL_TIM_PeriodElapsedCallback+0xc>
 800c4aa:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800c4ac:	f7f4 f844 	bl	8000538 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800c4b0:	e7fb      	b.n	800c4aa <HAL_TIM_PeriodElapsedCallback+0xa>
 800c4b2:	bf00      	nop
 800c4b4:	40010000 	.word	0x40010000

0800c4b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c4b8:	4770      	bx	lr
	...

0800c4bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c4bc:	b500      	push	{lr}
 800c4be:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	9200      	str	r2, [sp, #0]
 800c4c4:	4b0d      	ldr	r3, [pc, #52]	; (800c4fc <HAL_MspInit+0x40>)
 800c4c6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c4c8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800c4cc:	6459      	str	r1, [r3, #68]	; 0x44
 800c4ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c4d0:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800c4d4:	9100      	str	r1, [sp, #0]
 800c4d6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c4d8:	9201      	str	r2, [sp, #4]
 800c4da:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c4dc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800c4e0:	6419      	str	r1, [r3, #64]	; 0x40
 800c4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4e8:	9301      	str	r3, [sp, #4]
 800c4ea:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c4ec:	210f      	movs	r1, #15
 800c4ee:	f06f 0001 	mvn.w	r0, #1
 800c4f2:	f7f4 f859 	bl	80005a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c4f6:	b003      	add	sp, #12
 800c4f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4fc:	40023800 	.word	0x40023800

0800c500 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c500:	b510      	push	{r4, lr}
 800c502:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800c504:	2200      	movs	r2, #0
 800c506:	4601      	mov	r1, r0
 800c508:	2019      	movs	r0, #25
 800c50a:	f7f4 f84d 	bl	80005a8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800c50e:	2019      	movs	r0, #25
 800c510:	f7f4 f87c 	bl	800060c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800c514:	2400      	movs	r4, #0
 800c516:	9401      	str	r4, [sp, #4]
 800c518:	4b14      	ldr	r3, [pc, #80]	; (800c56c <HAL_InitTick+0x6c>)
 800c51a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c51c:	f042 0201 	orr.w	r2, r2, #1
 800c520:	645a      	str	r2, [r3, #68]	; 0x44
 800c522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c524:	f003 0301 	and.w	r3, r3, #1
 800c528:	9301      	str	r3, [sp, #4]
 800c52a:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c52c:	a902      	add	r1, sp, #8
 800c52e:	a803      	add	r0, sp, #12
 800c530:	f7f5 f8d2 	bl	80016d8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800c534:	f7f5 f8c0 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 800c538:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c53a:	480d      	ldr	r0, [pc, #52]	; (800c570 <HAL_InitTick+0x70>)
 800c53c:	fba0 2303 	umull	r2, r3, r0, r3
 800c540:	0c9b      	lsrs	r3, r3, #18
 800c542:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800c544:	480b      	ldr	r0, [pc, #44]	; (800c574 <HAL_InitTick+0x74>)
 800c546:	4a0c      	ldr	r2, [pc, #48]	; (800c578 <HAL_InitTick+0x78>)
 800c548:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800c54a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c54e:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800c550:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 800c552:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c554:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800c556:	f7f5 fa39 	bl	80019cc <HAL_TIM_Base_Init>
 800c55a:	b110      	cbz	r0, 800c562 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c55c:	2001      	movs	r0, #1
}
 800c55e:	b008      	add	sp, #32
 800c560:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 800c562:	4804      	ldr	r0, [pc, #16]	; (800c574 <HAL_InitTick+0x74>)
 800c564:	f7f5 f8d7 	bl	8001716 <HAL_TIM_Base_Start_IT>
 800c568:	e7f9      	b.n	800c55e <HAL_InitTick+0x5e>
 800c56a:	bf00      	nop
 800c56c:	40023800 	.word	0x40023800
 800c570:	431bde83 	.word	0x431bde83
 800c574:	2000b9f8 	.word	0x2000b9f8
 800c578:	40010000 	.word	0x40010000

0800c57c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c57c:	4770      	bx	lr

0800c57e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c57e:	e7fe      	b.n	800c57e <HardFault_Handler>

0800c580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c580:	e7fe      	b.n	800c580 <MemManage_Handler>

0800c582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c582:	e7fe      	b.n	800c582 <BusFault_Handler>

0800c584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c584:	e7fe      	b.n	800c584 <UsageFault_Handler>

0800c586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c586:	4770      	bx	lr

0800c588 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800c588:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c58a:	4802      	ldr	r0, [pc, #8]	; (800c594 <TIM1_UP_TIM10_IRQHandler+0xc>)
 800c58c:	f7f5 f8d3 	bl	8001736 <HAL_TIM_IRQHandler>
 800c590:	bd08      	pop	{r3, pc}
 800c592:	bf00      	nop
 800c594:	2000b9f8 	.word	0x2000b9f8

0800c598 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800c598:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800c59a:	4802      	ldr	r0, [pc, #8]	; (800c5a4 <UART5_IRQHandler+0xc>)
 800c59c:	f7f5 fca0 	bl	8001ee0 <HAL_UART_IRQHandler>
 800c5a0:	bd08      	pop	{r3, pc}
 800c5a2:	bf00      	nop
 800c5a4:	2000ba34 	.word	0x2000ba34

0800c5a8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800c5a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800c5aa:	4802      	ldr	r0, [pc, #8]	; (800c5b4 <ETH_IRQHandler+0xc>)
 800c5ac:	f7f4 faaa 	bl	8000b04 <HAL_ETH_IRQHandler>
 800c5b0:	bd08      	pop	{r3, pc}
 800c5b2:	bf00      	nop
 800c5b4:	2000a190 	.word	0x2000a190

0800c5b8 <_write>:
	}

	return len;
}

int _write(int file, char *ptr, int len) {
 800c5b8:	b430      	push	{r4, r5}
	int i = 0;
	for (i = 0; i < len; i++)
 800c5ba:	2400      	movs	r4, #0
 800c5bc:	e00a      	b.n	800c5d4 <_write+0x1c>
  __ASM volatile ("nop");
 800c5be:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800c5c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d0f9      	beq.n	800c5be <_write+0x6>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800c5ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800c5ce:	7019      	strb	r1, [r3, #0]
 800c5d0:	3401      	adds	r4, #1
		ITM_SendChar((*ptr++));
 800c5d2:	4629      	mov	r1, r5
	for (i = 0; i < len; i++)
 800c5d4:	4294      	cmp	r4, r2
 800c5d6:	da10      	bge.n	800c5fa <_write+0x42>
		ITM_SendChar((*ptr++));
 800c5d8:	1c4d      	adds	r5, r1, #1
 800c5da:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800c5dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800c5e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800c5e4:	f013 0f01 	tst.w	r3, #1
 800c5e8:	d0f2      	beq.n	800c5d0 <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800c5ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800c5ee:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800c5f2:	f013 0f01 	tst.w	r3, #1
 800c5f6:	d1e3      	bne.n	800c5c0 <_write+0x8>
 800c5f8:	e7ea      	b.n	800c5d0 <_write+0x18>
	return len;
}
 800c5fa:	4610      	mov	r0, r2
 800c5fc:	bc30      	pop	{r4, r5}
 800c5fe:	4770      	bx	lr

0800c600 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c600:	490f      	ldr	r1, [pc, #60]	; (800c640 <SystemInit+0x40>)
 800c602:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800c606:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c60a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c60e:	4b0d      	ldr	r3, [pc, #52]	; (800c644 <SystemInit+0x44>)
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	f042 0201 	orr.w	r2, r2, #1
 800c616:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c618:	2000      	movs	r0, #0
 800c61a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800c622:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c626:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c628:	4a07      	ldr	r2, [pc, #28]	; (800c648 <SystemInit+0x48>)
 800c62a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c632:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c634:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c636:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c63a:	608b      	str	r3, [r1, #8]
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	e000ed00 	.word	0xe000ed00
 800c644:	40023800 	.word	0x40023800
 800c648:	24003010 	.word	0x24003010

0800c64c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800c64c:	b470      	push	{r4, r5, r6}
	int div = 1;
 800c64e:	2301      	movs	r3, #1
	while (d/div >= base)
 800c650:	e001      	b.n	800c656 <ts_itoa+0xa>
		div *= base;
 800c652:	fb02 f303 	mul.w	r3, r2, r3
	while (d/div >= base)
 800c656:	fbb1 f4f3 	udiv	r4, r1, r3
 800c65a:	4294      	cmp	r4, r2
 800c65c:	d2f9      	bcs.n	800c652 <ts_itoa+0x6>
 800c65e:	e004      	b.n	800c66a <ts_itoa+0x1e>
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 800c660:	6805      	ldr	r5, [r0, #0]
 800c662:	1c6e      	adds	r6, r5, #1
 800c664:	6006      	str	r6, [r0, #0]
 800c666:	3430      	adds	r4, #48	; 0x30
 800c668:	702c      	strb	r4, [r5, #0]
	while (div != 0)
 800c66a:	b16b      	cbz	r3, 800c688 <ts_itoa+0x3c>
		int num = d/div;
 800c66c:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 800c670:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 800c674:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 800c678:	2c09      	cmp	r4, #9
 800c67a:	ddf1      	ble.n	800c660 <ts_itoa+0x14>
			*((*buf)++) = (num-10) + 'A';
 800c67c:	6805      	ldr	r5, [r0, #0]
 800c67e:	1c6e      	adds	r6, r5, #1
 800c680:	6006      	str	r6, [r0, #0]
 800c682:	3437      	adds	r4, #55	; 0x37
 800c684:	702c      	strb	r4, [r5, #0]
 800c686:	e7f0      	b.n	800c66a <ts_itoa+0x1e>
	}
}
 800c688:	bc70      	pop	{r4, r5, r6}
 800c68a:	4770      	bx	lr

0800c68c <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800c68c:	b530      	push	{r4, r5, lr}
 800c68e:	b083      	sub	sp, #12
 800c690:	9001      	str	r0, [sp, #4]
 800c692:	460c      	mov	r4, r1
 800c694:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 800c696:	4605      	mov	r5, r0
	while(*fmt)
 800c698:	e03e      	b.n	800c718 <ts_formatstring+0x8c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 800c69a:	7863      	ldrb	r3, [r4, #1]
 800c69c:	2b64      	cmp	r3, #100	; 0x64
 800c69e:	d01c      	beq.n	800c6da <ts_formatstring+0x4e>
 800c6a0:	d90d      	bls.n	800c6be <ts_formatstring+0x32>
 800c6a2:	2b73      	cmp	r3, #115	; 0x73
 800c6a4:	d04a      	beq.n	800c73c <ts_formatstring+0xb0>
 800c6a6:	d916      	bls.n	800c6d6 <ts_formatstring+0x4a>
 800c6a8:	2b75      	cmp	r3, #117	; 0x75
 800c6aa:	d121      	bne.n	800c6f0 <ts_formatstring+0x64>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800c6ac:	9b00      	ldr	r3, [sp, #0]
 800c6ae:	1d1a      	adds	r2, r3, #4
 800c6b0:	9200      	str	r2, [sp, #0]
 800c6b2:	220a      	movs	r2, #10
 800c6b4:	6819      	ldr	r1, [r3, #0]
 800c6b6:	a801      	add	r0, sp, #4
 800c6b8:	f7ff ffc8 	bl	800c64c <ts_itoa>
				break;
 800c6bc:	e02b      	b.n	800c716 <ts_formatstring+0x8a>
			switch (*(++fmt))
 800c6be:	2b58      	cmp	r3, #88	; 0x58
 800c6c0:	d018      	beq.n	800c6f4 <ts_formatstring+0x68>
 800c6c2:	2b63      	cmp	r3, #99	; 0x63
 800c6c4:	d01f      	beq.n	800c706 <ts_formatstring+0x7a>
 800c6c6:	2b25      	cmp	r3, #37	; 0x25
 800c6c8:	d125      	bne.n	800c716 <ts_formatstring+0x8a>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 800c6ca:	9b01      	ldr	r3, [sp, #4]
 800c6cc:	1c5a      	adds	r2, r3, #1
 800c6ce:	9201      	str	r2, [sp, #4]
 800c6d0:	2225      	movs	r2, #37	; 0x25
 800c6d2:	701a      	strb	r2, [r3, #0]
				  break;
 800c6d4:	e01f      	b.n	800c716 <ts_formatstring+0x8a>
			switch (*(++fmt))
 800c6d6:	2b69      	cmp	r3, #105	; 0x69
 800c6d8:	d11d      	bne.n	800c716 <ts_formatstring+0x8a>
					signed int val = va_arg(va, signed int);
 800c6da:	9b00      	ldr	r3, [sp, #0]
 800c6dc:	1d1a      	adds	r2, r3, #4
 800c6de:	9200      	str	r2, [sp, #0]
 800c6e0:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 800c6e2:	2900      	cmp	r1, #0
 800c6e4:	db23      	blt.n	800c72e <ts_formatstring+0xa2>
					ts_itoa(&buf, val, 10);
 800c6e6:	220a      	movs	r2, #10
 800c6e8:	a801      	add	r0, sp, #4
 800c6ea:	f7ff ffaf 	bl	800c64c <ts_itoa>
				break;
 800c6ee:	e012      	b.n	800c716 <ts_formatstring+0x8a>
			switch (*(++fmt))
 800c6f0:	2b78      	cmp	r3, #120	; 0x78
 800c6f2:	d110      	bne.n	800c716 <ts_formatstring+0x8a>
					ts_itoa(&buf, va_arg(va, int), 16);
 800c6f4:	9b00      	ldr	r3, [sp, #0]
 800c6f6:	1d1a      	adds	r2, r3, #4
 800c6f8:	9200      	str	r2, [sp, #0]
 800c6fa:	2210      	movs	r2, #16
 800c6fc:	6819      	ldr	r1, [r3, #0]
 800c6fe:	a801      	add	r0, sp, #4
 800c700:	f7ff ffa4 	bl	800c64c <ts_itoa>
				break;
 800c704:	e007      	b.n	800c716 <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 800c706:	9b01      	ldr	r3, [sp, #4]
 800c708:	1c5a      	adds	r2, r3, #1
 800c70a:	9201      	str	r2, [sp, #4]
 800c70c:	9a00      	ldr	r2, [sp, #0]
 800c70e:	1d11      	adds	r1, r2, #4
 800c710:	9100      	str	r1, [sp, #0]
 800c712:	6812      	ldr	r2, [r2, #0]
 800c714:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 800c716:	3402      	adds	r4, #2
	while(*fmt)
 800c718:	7823      	ldrb	r3, [r4, #0]
 800c71a:	b1f3      	cbz	r3, 800c75a <ts_formatstring+0xce>
		if (*fmt == '%')
 800c71c:	2b25      	cmp	r3, #37	; 0x25
 800c71e:	d0bc      	beq.n	800c69a <ts_formatstring+0xe>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800c720:	9b01      	ldr	r3, [sp, #4]
 800c722:	1c5a      	adds	r2, r3, #1
 800c724:	9201      	str	r2, [sp, #4]
 800c726:	7822      	ldrb	r2, [r4, #0]
 800c728:	701a      	strb	r2, [r3, #0]
 800c72a:	3401      	adds	r4, #1
 800c72c:	e7f4      	b.n	800c718 <ts_formatstring+0x8c>
						val *= -1;
 800c72e:	4249      	negs	r1, r1
						*buf++ = '-';
 800c730:	9b01      	ldr	r3, [sp, #4]
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	9201      	str	r2, [sp, #4]
 800c736:	222d      	movs	r2, #45	; 0x2d
 800c738:	701a      	strb	r2, [r3, #0]
 800c73a:	e7d4      	b.n	800c6e6 <ts_formatstring+0x5a>
					char * arg = va_arg(va, char *);
 800c73c:	9b00      	ldr	r3, [sp, #0]
 800c73e:	1d1a      	adds	r2, r3, #4
 800c740:	9200      	str	r2, [sp, #0]
 800c742:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 800c744:	e005      	b.n	800c752 <ts_formatstring+0xc6>
						*buf++ = *arg++;
 800c746:	9a01      	ldr	r2, [sp, #4]
 800c748:	1c51      	adds	r1, r2, #1
 800c74a:	9101      	str	r1, [sp, #4]
 800c74c:	7819      	ldrb	r1, [r3, #0]
 800c74e:	7011      	strb	r1, [r2, #0]
 800c750:	3301      	adds	r3, #1
					while (*arg)
 800c752:	781a      	ldrb	r2, [r3, #0]
 800c754:	2a00      	cmp	r2, #0
 800c756:	d1f6      	bne.n	800c746 <ts_formatstring+0xba>
 800c758:	e7dd      	b.n	800c716 <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 800c75a:	2200      	movs	r2, #0
 800c75c:	9b01      	ldr	r3, [sp, #4]
 800c75e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 800c760:	9801      	ldr	r0, [sp, #4]
 800c762:	1b40      	subs	r0, r0, r5
 800c764:	b003      	add	sp, #12
 800c766:	bd30      	pop	{r4, r5, pc}

0800c768 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800c768:	b082      	sub	sp, #8
 800c76a:	4603      	mov	r3, r0
 800c76c:	9101      	str	r1, [sp, #4]
	int length = 0;
 800c76e:	2000      	movs	r0, #0
	while (*fmt)
 800c770:	e01d      	b.n	800c7ae <ts_formatlength+0x46>
	{
		if (*fmt == '%')
		{
			++fmt;
 800c772:	1c59      	adds	r1, r3, #1
			switch (*fmt)
 800c774:	785b      	ldrb	r3, [r3, #1]
 800c776:	3b58      	subs	r3, #88	; 0x58
 800c778:	2b20      	cmp	r3, #32
 800c77a:	d837      	bhi.n	800c7ec <ts_formatlength+0x84>
 800c77c:	e8df f003 	tbb	[pc, r3]
 800c780:	36363630 	.word	0x36363630
 800c784:	36363636 	.word	0x36363636
 800c788:	11363636 	.word	0x11363636
 800c78c:	3636361d 	.word	0x3636361d
 800c790:	36361d36 	.word	0x36361d36
 800c794:	36363636 	.word	0x36363636
 800c798:	23363636 	.word	0x23363636
 800c79c:	36361d36 	.word	0x36361d36
 800c7a0:	30          	.byte	0x30
 800c7a1:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 800c7a2:	9b01      	ldr	r3, [sp, #4]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	9301      	str	r3, [sp, #4]
				  ++length;
 800c7a8:	3001      	adds	r0, #1
			++fmt;
 800c7aa:	460b      	mov	r3, r1
		}
		else
		{
			++length;
		}
		++fmt;
 800c7ac:	3301      	adds	r3, #1
	while (*fmt)
 800c7ae:	781a      	ldrb	r2, [r3, #0]
 800c7b0:	b1fa      	cbz	r2, 800c7f2 <ts_formatlength+0x8a>
		if (*fmt == '%')
 800c7b2:	2a25      	cmp	r2, #37	; 0x25
 800c7b4:	d0dd      	beq.n	800c772 <ts_formatlength+0xa>
			++length;
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	e7f8      	b.n	800c7ac <ts_formatlength+0x44>
				  length += 11;
 800c7ba:	300b      	adds	r0, #11
				  va_arg(va, int);
 800c7bc:	9b01      	ldr	r3, [sp, #4]
 800c7be:	3304      	adds	r3, #4
 800c7c0:	9301      	str	r3, [sp, #4]
			++fmt;
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	e7f2      	b.n	800c7ac <ts_formatlength+0x44>
			  		  char * str = va_arg(va, char *);
 800c7c6:	9b01      	ldr	r3, [sp, #4]
 800c7c8:	1d1a      	adds	r2, r3, #4
 800c7ca:	9201      	str	r2, [sp, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
			  		  while (*str++)
 800c7ce:	e001      	b.n	800c7d4 <ts_formatlength+0x6c>
			  			  ++length;
 800c7d0:	3001      	adds	r0, #1
			  		  while (*str++)
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	1c5a      	adds	r2, r3, #1
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1f9      	bne.n	800c7d0 <ts_formatlength+0x68>
			++fmt;
 800c7dc:	460b      	mov	r3, r1
 800c7de:	e7e5      	b.n	800c7ac <ts_formatlength+0x44>
				  length += 8;
 800c7e0:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 800c7e2:	9b01      	ldr	r3, [sp, #4]
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	9301      	str	r3, [sp, #4]
			++fmt;
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	e7df      	b.n	800c7ac <ts_formatlength+0x44>
				  ++length;
 800c7ec:	3001      	adds	r0, #1
			++fmt;
 800c7ee:	460b      	mov	r3, r1
				  break;
 800c7f0:	e7dc      	b.n	800c7ac <ts_formatlength+0x44>
	}
	return length;
}
 800c7f2:	b002      	add	sp, #8
 800c7f4:	4770      	bx	lr

0800c7f6 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800c7f6:	b40e      	push	{r1, r2, r3}
 800c7f8:	b500      	push	{lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	aa03      	add	r2, sp, #12
 800c7fe:	f852 1b04 	ldr.w	r1, [r2], #4
	int length;
	va_list va;
	va_start(va, fmt);
 800c802:	9201      	str	r2, [sp, #4]
	length = ts_formatstring(buf, fmt, va);
 800c804:	f7ff ff42 	bl	800c68c <ts_formatstring>
	va_end(va);
	return length;
}
 800c808:	b002      	add	sp, #8
 800c80a:	f85d eb04 	ldr.w	lr, [sp], #4
 800c80e:	b003      	add	sp, #12
 800c810:	4770      	bx	lr

0800c812 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 800c812:	b40f      	push	{r0, r1, r2, r3}
 800c814:	b5b0      	push	{r4, r5, r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	f107 0418 	add.w	r4, r7, #24
 800c81e:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 800c822:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 800c824:	4621      	mov	r1, r4
 800c826:	4628      	mov	r0, r5
 800c828:	f7ff ff9e 	bl	800c768 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 800c82c:	3007      	adds	r0, #7
 800c82e:	f020 0007 	bic.w	r0, r0, #7
 800c832:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
 800c836:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 800c838:	4622      	mov	r2, r4
 800c83a:	4629      	mov	r1, r5
 800c83c:	4668      	mov	r0, sp
 800c83e:	f7ff ff25 	bl	800c68c <ts_formatstring>
		length = _write(1, buf, length);
 800c842:	4602      	mov	r2, r0
 800c844:	4669      	mov	r1, sp
 800c846:	2001      	movs	r0, #1
 800c848:	f7ff feb6 	bl	800c5b8 <_write>
		va_end(va);
	}
	return length;
}
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c854:	b004      	add	sp, #16
 800c856:	4770      	bx	lr

0800c858 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4605      	mov	r5, r0
	int length = strlen(s);
 800c85c:	f7f3 fcc2 	bl	80001e4 <strlen>
 800c860:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 800c862:	4602      	mov	r2, r0
 800c864:	4629      	mov	r1, r5
 800c866:	2001      	movs	r0, #1
 800c868:	f7ff fea6 	bl	800c5b8 <_write>
 800c86c:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 800c86e:	2201      	movs	r2, #1
 800c870:	4906      	ldr	r1, [pc, #24]	; (800c88c <puts+0x34>)
 800c872:	4610      	mov	r0, r2
 800c874:	f7ff fea0 	bl	800c5b8 <_write>
 800c878:	4428      	add	r0, r5

	if (numbytes == (length+1))
 800c87a:	3401      	adds	r4, #1
 800c87c:	42a0      	cmp	r0, r4
 800c87e:	d101      	bne.n	800c884 <puts+0x2c>
	{
		res = 0;
 800c880:	2000      	movs	r0, #0
 800c882:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		res = EOF;
 800c884:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return res;
}
 800c888:	bd38      	pop	{r3, r4, r5, pc}
 800c88a:	bf00      	nop
 800c88c:	080101f8 	.word	0x080101f8

0800c890 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800c890:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 800c892:	480b      	ldr	r0, [pc, #44]	; (800c8c0 <MX_UART5_Init+0x30>)
 800c894:	4b0b      	ldr	r3, [pc, #44]	; (800c8c4 <MX_UART5_Init+0x34>)
 800c896:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 187500;
 800c898:	4b0b      	ldr	r3, [pc, #44]	; (800c8c8 <MX_UART5_Init+0x38>)
 800c89a:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c89c:	2300      	movs	r3, #0
 800c89e:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c8a0:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 800c8a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c8a6:	6102      	str	r2, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c8a8:	220c      	movs	r2, #12
 800c8aa:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c8ac:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c8ae:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800c8b0:	f7f5 fa8c 	bl	8001dcc <HAL_UART_Init>
 800c8b4:	b900      	cbnz	r0, 800c8b8 <MX_UART5_Init+0x28>
 800c8b6:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800c8b8:	f7ff fdfe 	bl	800c4b8 <Error_Handler>
  }

}
 800c8bc:	e7fb      	b.n	800c8b6 <MX_UART5_Init+0x26>
 800c8be:	bf00      	nop
 800c8c0:	2000ba34 	.word	0x2000ba34
 800c8c4:	40005000 	.word	0x40005000
 800c8c8:	0002dc6c 	.word	0x0002dc6c

0800c8cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	9303      	str	r3, [sp, #12]
 800c8d6:	9304      	str	r3, [sp, #16]
 800c8d8:	9305      	str	r3, [sp, #20]
 800c8da:	9306      	str	r3, [sp, #24]
 800c8dc:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==UART5)
 800c8de:	6802      	ldr	r2, [r0, #0]
 800c8e0:	4b25      	ldr	r3, [pc, #148]	; (800c978 <HAL_UART_MspInit+0xac>)
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d002      	beq.n	800c8ec <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800c8e6:	b008      	add	sp, #32
 800c8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 800c8ec:	2400      	movs	r4, #0
 800c8ee:	9400      	str	r4, [sp, #0]
 800c8f0:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 800c8f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c8fa:	641a      	str	r2, [r3, #64]	; 0x40
 800c8fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c902:	9200      	str	r2, [sp, #0]
 800c904:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c906:	9401      	str	r4, [sp, #4]
 800c908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c90a:	f042 0204 	orr.w	r2, r2, #4
 800c90e:	631a      	str	r2, [r3, #48]	; 0x30
 800c910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c912:	f002 0204 	and.w	r2, r2, #4
 800c916:	9201      	str	r2, [sp, #4]
 800c918:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c91a:	9402      	str	r4, [sp, #8]
 800c91c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c91e:	f042 0208 	orr.w	r2, r2, #8
 800c922:	631a      	str	r2, [r3, #48]	; 0x30
 800c924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c926:	f003 0308 	and.w	r3, r3, #8
 800c92a:	9302      	str	r3, [sp, #8]
 800c92c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c92e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c932:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c934:	f04f 0802 	mov.w	r8, #2
 800c938:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c93c:	2701      	movs	r7, #1
 800c93e:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c940:	2603      	movs	r6, #3
 800c942:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800c944:	2508      	movs	r5, #8
 800c946:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c948:	a903      	add	r1, sp, #12
 800c94a:	480c      	ldr	r0, [pc, #48]	; (800c97c <HAL_UART_MspInit+0xb0>)
 800c94c:	f7f4 fae4 	bl	8000f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c950:	2304      	movs	r3, #4
 800c952:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c954:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c958:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c95a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800c95c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c95e:	a903      	add	r1, sp, #12
 800c960:	4807      	ldr	r0, [pc, #28]	; (800c980 <HAL_UART_MspInit+0xb4>)
 800c962:	f7f4 fad9 	bl	8000f18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800c966:	4622      	mov	r2, r4
 800c968:	2105      	movs	r1, #5
 800c96a:	2035      	movs	r0, #53	; 0x35
 800c96c:	f7f3 fe1c 	bl	80005a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800c970:	2035      	movs	r0, #53	; 0x35
 800c972:	f7f3 fe4b 	bl	800060c <HAL_NVIC_EnableIRQ>
}
 800c976:	e7b6      	b.n	800c8e6 <HAL_UART_MspInit+0x1a>
 800c978:	40005000 	.word	0x40005000
 800c97c:	40020800 	.word	0x40020800
 800c980:	40020c00 	.word	0x40020c00

0800c984 <web_server_thread>:

static void get_query_parser(char * in_query) {

}

void web_server_thread(void *arg) {
 800c984:	b530      	push	{r4, r5, lr}
 800c986:	b08d      	sub	sp, #52	; 0x34
 800c988:	4604      	mov	r4, r0
	arg_conn = (struct netconn *) arg;
	u16_t buflen;
	char* buf;
	struct fs_file file;

	sprintf(PAGE_BODY,"%s%s%s%s",PAGE_HEADER_200_OK,PAGE_HEADER_SERVER,PAGE_HEADER_CONTENT_TEXT,ip4addr_ntoa(&gnetif.ip_addr));
 800c98a:	486e      	ldr	r0, [pc, #440]	; (800cb44 <web_server_thread+0x1c0>)
 800c98c:	f7f9 fdd4 	bl	8006538 <ip4addr_ntoa>
 800c990:	9001      	str	r0, [sp, #4]
 800c992:	4b6d      	ldr	r3, [pc, #436]	; (800cb48 <web_server_thread+0x1c4>)
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	4b6d      	ldr	r3, [pc, #436]	; (800cb4c <web_server_thread+0x1c8>)
 800c998:	4a6d      	ldr	r2, [pc, #436]	; (800cb50 <web_server_thread+0x1cc>)
 800c99a:	496e      	ldr	r1, [pc, #440]	; (800cb54 <web_server_thread+0x1d0>)
 800c99c:	486e      	ldr	r0, [pc, #440]	; (800cb58 <web_server_thread+0x1d4>)
 800c99e:	f7ff ff2a 	bl	800c7f6 <siprintf>

	printf("Net task created.\n");
 800c9a2:	486e      	ldr	r0, [pc, #440]	; (800cb5c <web_server_thread+0x1d8>)
 800c9a4:	f7ff ff58 	bl	800c858 <puts>
	osDelay(1);
 800c9a8:	2001      	movs	r0, #1
 800c9aa:	f7f5 fb66 	bl	800207a <osDelay>
 800c9ae:	e022      	b.n	800c9f6 <web_server_thread+0x72>
						printf("Connect\n");
						osDelay(1);
						if ((strncmp((char const *) buf, "GET / ", 6) == 0)
								|| (strncmp((char const *) buf,
										"GET /index.shtml", 16) == 0)) {
							fs_open(&file, "/index.shtml");
 800c9b0:	496b      	ldr	r1, [pc, #428]	; (800cb60 <web_server_thread+0x1dc>)
 800c9b2:	a803      	add	r0, sp, #12
 800c9b4:	f7f8 fdc2 	bl	800553c <fs_open>
							netconn_write(newconn,
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	9a04      	ldr	r2, [sp, #16]
 800c9be:	9903      	ldr	r1, [sp, #12]
 800c9c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9c2:	f7f7 fb7b 	bl	80040bc <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 800c9c6:	a803      	add	r0, sp, #12
 800c9c8:	f7f8 fddc 	bl	8005584 <fs_close>
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
							printf("File not found\n");
							osDelay(1);
						}
						buf[buflen] = 0;
 800c9cc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	9a08      	ldr	r2, [sp, #32]
 800c9d4:	54d1      	strb	r1, [r2, r3]
						printf("-> %s\n", buf);
 800c9d6:	9908      	ldr	r1, [sp, #32]
 800c9d8:	4862      	ldr	r0, [pc, #392]	; (800cb64 <web_server_thread+0x1e0>)
 800c9da:	f7ff ff1a 	bl	800c812 <iprintf>
						osDelay(1);
 800c9de:	2001      	movs	r0, #1
 800c9e0:	f7f5 fb4b 	bl	800207a <osDelay>
					}
				}
			}
			netconn_close(newconn);
 800c9e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9e6:	f7f7 fbbd 	bl	8004164 <netconn_close>
			netbuf_delete(inbuf);
 800c9ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c9ec:	f7f8 fc3c 	bl	8005268 <netbuf_delete>
			netconn_delete(newconn);
 800c9f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9f2:	f7f7 fa4f 	bl	8003e94 <netconn_delete>
		err = netconn_accept(arg_conn, &newconn);
 800c9f6:	a90a      	add	r1, sp, #40	; 0x28
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f7f7 faa9 	bl	8003f50 <netconn_accept>
		if (err == ERR_OK) {
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	f040 8097 	bne.w	800cb32 <web_server_thread+0x1ae>
			printf("Accept.\n");
 800ca04:	4858      	ldr	r0, [pc, #352]	; (800cb68 <web_server_thread+0x1e4>)
 800ca06:	f7ff ff27 	bl	800c858 <puts>
			recv_err = netconn_recv(newconn, &inbuf);
 800ca0a:	a90b      	add	r1, sp, #44	; 0x2c
 800ca0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ca0e:	f7f7 fafb 	bl	8004008 <netconn_recv>
			if (recv_err == ERR_OK) {
 800ca12:	2800      	cmp	r0, #0
 800ca14:	d1e6      	bne.n	800c9e4 <web_server_thread+0x60>
				if (netconn_err(newconn) == ERR_OK) {
 800ca16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca18:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1e1      	bne.n	800c9e4 <web_server_thread+0x60>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 800ca20:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800ca24:	a908      	add	r1, sp, #32
 800ca26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ca28:	f7f8 fc2e 	bl	8005288 <netbuf_data>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
 800ca2c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ca30:	2b04      	cmp	r3, #4
 800ca32:	d9d7      	bls.n	800c9e4 <web_server_thread+0x60>
 800ca34:	2205      	movs	r2, #5
 800ca36:	494d      	ldr	r1, [pc, #308]	; (800cb6c <web_server_thread+0x1e8>)
 800ca38:	9808      	ldr	r0, [sp, #32]
 800ca3a:	f000 f921 	bl	800cc80 <strncmp>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d1d0      	bne.n	800c9e4 <web_server_thread+0x60>
						printf("Connect\n");
 800ca42:	484b      	ldr	r0, [pc, #300]	; (800cb70 <web_server_thread+0x1ec>)
 800ca44:	f7ff ff08 	bl	800c858 <puts>
						osDelay(1);
 800ca48:	2001      	movs	r0, #1
 800ca4a:	f7f5 fb16 	bl	800207a <osDelay>
						if ((strncmp((char const *) buf, "GET / ", 6) == 0)
 800ca4e:	9d08      	ldr	r5, [sp, #32]
 800ca50:	2206      	movs	r2, #6
 800ca52:	4948      	ldr	r1, [pc, #288]	; (800cb74 <web_server_thread+0x1f0>)
 800ca54:	4628      	mov	r0, r5
 800ca56:	f000 f913 	bl	800cc80 <strncmp>
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d0a8      	beq.n	800c9b0 <web_server_thread+0x2c>
								|| (strncmp((char const *) buf,
 800ca5e:	2210      	movs	r2, #16
 800ca60:	4945      	ldr	r1, [pc, #276]	; (800cb78 <web_server_thread+0x1f4>)
 800ca62:	4628      	mov	r0, r5
 800ca64:	f000 f90c 	bl	800cc80 <strncmp>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d0a1      	beq.n	800c9b0 <web_server_thread+0x2c>
						} else if (strncmp((char const *) buf,
 800ca6c:	2211      	movs	r2, #17
 800ca6e:	4943      	ldr	r1, [pc, #268]	; (800cb7c <web_server_thread+0x1f8>)
 800ca70:	4628      	mov	r0, r5
 800ca72:	f000 f905 	bl	800cc80 <strncmp>
 800ca76:	b300      	cbz	r0, 800caba <web_server_thread+0x136>
						} else if (strncmp((char const *) buf, "GET /style.css",
 800ca78:	220e      	movs	r2, #14
 800ca7a:	4941      	ldr	r1, [pc, #260]	; (800cb80 <web_server_thread+0x1fc>)
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	f000 f8ff 	bl	800cc80 <strncmp>
 800ca82:	b348      	cbz	r0, 800cad8 <web_server_thread+0x154>
						} else if (strncmp((char const *) buf,
 800ca84:	2213      	movs	r2, #19
 800ca86:	493f      	ldr	r1, [pc, #252]	; (800cb84 <web_server_thread+0x200>)
 800ca88:	4628      	mov	r0, r5
 800ca8a:	f000 f8f9 	bl	800cc80 <strncmp>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	d031      	beq.n	800caf6 <web_server_thread+0x172>
						} else if (strncmp((char const *) buf,
 800ca92:	2211      	movs	r2, #17
 800ca94:	493c      	ldr	r1, [pc, #240]	; (800cb88 <web_server_thread+0x204>)
 800ca96:	4628      	mov	r0, r5
 800ca98:	f000 f8f2 	bl	800cc80 <strncmp>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d133      	bne.n	800cb08 <web_server_thread+0x184>
							netconn_write(newconn, PAGE_BODY, strlen((char*)PAGE_BODY), NETCONN_COPY);
 800caa0:	4d2d      	ldr	r5, [pc, #180]	; (800cb58 <web_server_thread+0x1d4>)
 800caa2:	4628      	mov	r0, r5
 800caa4:	f7f3 fb9e 	bl	80001e4 <strlen>
 800caa8:	2300      	movs	r3, #0
 800caaa:	9300      	str	r3, [sp, #0]
 800caac:	2301      	movs	r3, #1
 800caae:	4602      	mov	r2, r0
 800cab0:	4629      	mov	r1, r5
 800cab2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cab4:	f7f7 fb02 	bl	80040bc <netconn_write_partly>
 800cab8:	e788      	b.n	800c9cc <web_server_thread+0x48>
							fs_open(&file, "/img/logo.png");
 800caba:	4934      	ldr	r1, [pc, #208]	; (800cb8c <web_server_thread+0x208>)
 800cabc:	a803      	add	r0, sp, #12
 800cabe:	f7f8 fd3d 	bl	800553c <fs_open>
							netconn_write(newconn,
 800cac2:	2300      	movs	r3, #0
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	9a04      	ldr	r2, [sp, #16]
 800cac8:	9903      	ldr	r1, [sp, #12]
 800caca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cacc:	f7f7 faf6 	bl	80040bc <netconn_write_partly>
							fs_close(&file);
 800cad0:	a803      	add	r0, sp, #12
 800cad2:	f7f8 fd57 	bl	8005584 <fs_close>
 800cad6:	e779      	b.n	800c9cc <web_server_thread+0x48>
							fs_open(&file, "/style.css");
 800cad8:	492d      	ldr	r1, [pc, #180]	; (800cb90 <web_server_thread+0x20c>)
 800cada:	a803      	add	r0, sp, #12
 800cadc:	f7f8 fd2e 	bl	800553c <fs_open>
							netconn_write(newconn,
 800cae0:	2300      	movs	r3, #0
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	9a04      	ldr	r2, [sp, #16]
 800cae6:	9903      	ldr	r1, [sp, #12]
 800cae8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800caea:	f7f7 fae7 	bl	80040bc <netconn_write_partly>
							fs_close(&file);
 800caee:	a803      	add	r0, sp, #12
 800caf0:	f7f8 fd48 	bl	8005584 <fs_close>
 800caf4:	e76a      	b.n	800c9cc <web_server_thread+0x48>
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 800caf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cafa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800cafe:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 800cb02:	f7f4 faf5 	bl	80010f0 <HAL_GPIO_TogglePin>
 800cb06:	e761      	b.n	800c9cc <web_server_thread+0x48>
							fs_open(&file, "/404.html");
 800cb08:	4922      	ldr	r1, [pc, #136]	; (800cb94 <web_server_thread+0x210>)
 800cb0a:	a803      	add	r0, sp, #12
 800cb0c:	f7f8 fd16 	bl	800553c <fs_open>
							netconn_write(newconn,
 800cb10:	2300      	movs	r3, #0
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	9a04      	ldr	r2, [sp, #16]
 800cb16:	9903      	ldr	r1, [sp, #12]
 800cb18:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb1a:	f7f7 facf 	bl	80040bc <netconn_write_partly>
							fs_close(&file);
 800cb1e:	a803      	add	r0, sp, #12
 800cb20:	f7f8 fd30 	bl	8005584 <fs_close>
							printf("File not found\n");
 800cb24:	481c      	ldr	r0, [pc, #112]	; (800cb98 <web_server_thread+0x214>)
 800cb26:	f7ff fe97 	bl	800c858 <puts>
							osDelay(1);
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	f7f5 faa5 	bl	800207a <osDelay>
 800cb30:	e74c      	b.n	800c9cc <web_server_thread+0x48>
		} else {
			printf("Accept failed.\n");
 800cb32:	481a      	ldr	r0, [pc, #104]	; (800cb9c <web_server_thread+0x218>)
 800cb34:	f7ff fe90 	bl	800c858 <puts>
			osDelay(1000);
 800cb38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cb3c:	f7f5 fa9d 	bl	800207a <osDelay>
 800cb40:	e759      	b.n	800c9f6 <web_server_thread+0x72>
 800cb42:	bf00      	nop
 800cb44:	2000b9b8 	.word	0x2000b9b8
 800cb48:	08010cb8 	.word	0x08010cb8
 800cb4c:	08010cd4 	.word	0x08010cd4
 800cb50:	08010ca4 	.word	0x08010ca4
 800cb54:	08010d14 	.word	0x08010d14
 800cb58:	20003f28 	.word	0x20003f28
 800cb5c:	08010d20 	.word	0x08010d20
 800cb60:	08010d58 	.word	0x08010d58
 800cb64:	08010dd0 	.word	0x08010dd0
 800cb68:	08010d34 	.word	0x08010d34
 800cb6c:	08010d3c 	.word	0x08010d3c
 800cb70:	08010d44 	.word	0x08010d44
 800cb74:	08010d4c 	.word	0x08010d4c
 800cb78:	08010d54 	.word	0x08010d54
 800cb7c:	08010d68 	.word	0x08010d68
 800cb80:	08010d7c 	.word	0x08010d7c
 800cb84:	08010d8c 	.word	0x08010d8c
 800cb88:	08010da0 	.word	0x08010da0
 800cb8c:	08010d6c 	.word	0x08010d6c
 800cb90:	08010d80 	.word	0x08010d80
 800cb94:	08010db4 	.word	0x08010db4
 800cb98:	08010dc0 	.word	0x08010dc0
 800cb9c:	08010dd8 	.word	0x08010dd8

0800cba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800cba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cbd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800cba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800cba6:	e003      	b.n	800cbb0 <LoopCopyDataInit>

0800cba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800cba8:	4b0c      	ldr	r3, [pc, #48]	; (800cbdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800cbaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800cbac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800cbae:	3104      	adds	r1, #4

0800cbb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800cbb0:	480b      	ldr	r0, [pc, #44]	; (800cbe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800cbb2:	4b0c      	ldr	r3, [pc, #48]	; (800cbe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800cbb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800cbb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800cbb8:	d3f6      	bcc.n	800cba8 <CopyDataInit>
  ldr  r2, =_sbss
 800cbba:	4a0b      	ldr	r2, [pc, #44]	; (800cbe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800cbbc:	e002      	b.n	800cbc4 <LoopFillZerobss>

0800cbbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800cbbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800cbc0:	f842 3b04 	str.w	r3, [r2], #4

0800cbc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800cbc4:	4b09      	ldr	r3, [pc, #36]	; (800cbec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800cbc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800cbc8:	d3f9      	bcc.n	800cbbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800cbca:	f7ff fd19 	bl	800c600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cbce:	f000 f811 	bl	800cbf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cbd2:	f7ff fc57 	bl	800c484 <main>
  bx  lr    
 800cbd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800cbd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800cbdc:	08010df8 	.word	0x08010df8
  ldr  r0, =_sdata
 800cbe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800cbe4:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800cbe8:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800cbec:	2000ba74 	.word	0x2000ba74

0800cbf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cbf0:	e7fe      	b.n	800cbf0 <ADC_IRQHandler>
	...

0800cbf4 <__libc_init_array>:
 800cbf4:	b570      	push	{r4, r5, r6, lr}
 800cbf6:	4e0d      	ldr	r6, [pc, #52]	; (800cc2c <__libc_init_array+0x38>)
 800cbf8:	4c0d      	ldr	r4, [pc, #52]	; (800cc30 <__libc_init_array+0x3c>)
 800cbfa:	1ba4      	subs	r4, r4, r6
 800cbfc:	10a4      	asrs	r4, r4, #2
 800cbfe:	2500      	movs	r5, #0
 800cc00:	42a5      	cmp	r5, r4
 800cc02:	d109      	bne.n	800cc18 <__libc_init_array+0x24>
 800cc04:	4e0b      	ldr	r6, [pc, #44]	; (800cc34 <__libc_init_array+0x40>)
 800cc06:	4c0c      	ldr	r4, [pc, #48]	; (800cc38 <__libc_init_array+0x44>)
 800cc08:	f000 f84c 	bl	800cca4 <_init>
 800cc0c:	1ba4      	subs	r4, r4, r6
 800cc0e:	10a4      	asrs	r4, r4, #2
 800cc10:	2500      	movs	r5, #0
 800cc12:	42a5      	cmp	r5, r4
 800cc14:	d105      	bne.n	800cc22 <__libc_init_array+0x2e>
 800cc16:	bd70      	pop	{r4, r5, r6, pc}
 800cc18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc1c:	4798      	blx	r3
 800cc1e:	3501      	adds	r5, #1
 800cc20:	e7ee      	b.n	800cc00 <__libc_init_array+0xc>
 800cc22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc26:	4798      	blx	r3
 800cc28:	3501      	adds	r5, #1
 800cc2a:	e7f2      	b.n	800cc12 <__libc_init_array+0x1e>
 800cc2c:	08010df0 	.word	0x08010df0
 800cc30:	08010df0 	.word	0x08010df0
 800cc34:	08010df0 	.word	0x08010df0
 800cc38:	08010df4 	.word	0x08010df4

0800cc3c <memcmp>:
 800cc3c:	b510      	push	{r4, lr}
 800cc3e:	3901      	subs	r1, #1
 800cc40:	4402      	add	r2, r0
 800cc42:	4290      	cmp	r0, r2
 800cc44:	d101      	bne.n	800cc4a <memcmp+0xe>
 800cc46:	2000      	movs	r0, #0
 800cc48:	bd10      	pop	{r4, pc}
 800cc4a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cc4e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cc52:	42a3      	cmp	r3, r4
 800cc54:	d0f5      	beq.n	800cc42 <memcmp+0x6>
 800cc56:	1b18      	subs	r0, r3, r4
 800cc58:	bd10      	pop	{r4, pc}

0800cc5a <memcpy>:
 800cc5a:	b510      	push	{r4, lr}
 800cc5c:	1e43      	subs	r3, r0, #1
 800cc5e:	440a      	add	r2, r1
 800cc60:	4291      	cmp	r1, r2
 800cc62:	d100      	bne.n	800cc66 <memcpy+0xc>
 800cc64:	bd10      	pop	{r4, pc}
 800cc66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc6e:	e7f7      	b.n	800cc60 <memcpy+0x6>

0800cc70 <memset>:
 800cc70:	4402      	add	r2, r0
 800cc72:	4603      	mov	r3, r0
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d100      	bne.n	800cc7a <memset+0xa>
 800cc78:	4770      	bx	lr
 800cc7a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc7e:	e7f9      	b.n	800cc74 <memset+0x4>

0800cc80 <strncmp>:
 800cc80:	b510      	push	{r4, lr}
 800cc82:	b16a      	cbz	r2, 800cca0 <strncmp+0x20>
 800cc84:	3901      	subs	r1, #1
 800cc86:	1884      	adds	r4, r0, r2
 800cc88:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cc8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d103      	bne.n	800cc9c <strncmp+0x1c>
 800cc94:	42a0      	cmp	r0, r4
 800cc96:	d001      	beq.n	800cc9c <strncmp+0x1c>
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1f5      	bne.n	800cc88 <strncmp+0x8>
 800cc9c:	1a98      	subs	r0, r3, r2
 800cc9e:	bd10      	pop	{r4, pc}
 800cca0:	4610      	mov	r0, r2
 800cca2:	bd10      	pop	{r4, pc}

0800cca4 <_init>:
 800cca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca6:	bf00      	nop
 800cca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccaa:	bc08      	pop	{r3}
 800ccac:	469e      	mov	lr, r3
 800ccae:	4770      	bx	lr

0800ccb0 <_fini>:
 800ccb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb2:	bf00      	nop
 800ccb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccb6:	bc08      	pop	{r3}
 800ccb8:	469e      	mov	lr, r3
 800ccba:	4770      	bx	lr
